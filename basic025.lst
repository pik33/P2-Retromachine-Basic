00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic025.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 25
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 0C 5B A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 32 65 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 31 63 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 32 63 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 64 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 62 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 31 63 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 32 65 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 14 25 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 00 23 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 1C 13 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 60 11 03 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 E0 15 03 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 9C 8E 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 20 1D 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 D4 AF 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 84 D7 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 3C D5 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 14 E7 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc FC 08 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7A 00 00 FF 
00818     03 E5 05 F1 | 	add	objptr, ##62723
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7A 00 00 FF 
0082c     48 E5 85 F1 | 	sub	objptr, ##62792
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     90 88 B1 FD | 	call	#__system___waitms
0083c     7A 00 00 FF 
00840     48 E5 05 F1 | 	add	objptr, ##62792
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7A 00 00 FF 
00854     48 E5 85 F1 | 	sub	objptr, ##62792
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     68 88 B1 FD | 	call	#__system___waitms
00864     7A 00 00 FF 
00868     48 E5 05 F1 | 	add	objptr, ##62792
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7A 00 00 FF 
0087c     48 E5 85 F1 | 	sub	objptr, ##62792
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     40 88 B1 FD | 	call	#__system___waitms
0088c     7A 00 00 FF 
00890     48 E5 05 F1 | 	add	objptr, ##62792
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7A 00 00 FF 
008a4     48 E5 85 F1 | 	sub	objptr, ##62792
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     7A 00 00 FF 
008d4     C0 E4 05 F1 | 	add	objptr, ##62656
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     7A 00 00 FF 
00914     C8 E4 85 F1 | 	sub	objptr, ##62664
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     EC 7D B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     3C 7E B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     2C 7E B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     7A 00 00 FF 
00980     D0 E4 05 F1 | 	add	objptr, ##62672
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     7A 00 00 FF 
009ac     EC E4 85 F1 | 	sub	objptr, ##62700
009b0     90 7D B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     7A 00 00 FF 
009e0     D0 E4 05 F1 | 	add	objptr, ##62672
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     7A 00 00 FF 
00a08     EC E4 85 F1 | 	sub	objptr, ##62700
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     22 4A 05 F6 | 	mov	COUNT_, #34
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     4C F0 07 F1 | 	add	ptra, ##588
00a2c     56 00 00 FF 
00a30     F0 E4 05 F1 | 	add	objptr, ##44272
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     24 00 00 FF 
00a50     6C E4 05 F1 | 	add	objptr, ##18540
00a54     F2 00 68 FC | 	wrlong	#0, objptr
00a58     11 00 00 FF 
00a5c     14 E4 85 F1 | 	sub	objptr, ##8724
00a60     F2 00 68 FC | 	wrlong	#0, objptr
00a64     69 00 00 FF 
00a68     50 E5 85 F1 | 	sub	objptr, ##54096
00a6c     00 20 06 F6 | 	mov	local02, #0
00a70                 | LR__0020
00a70                 | ' 
00a70                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a70                 | ' 
00a70                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a70                 | ' 
00a70                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a70     00 22 06 F6 | 	mov	local03, #0
00a74     20 4E 05 F1 | 	add	fp, #32
00a78     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a7c                 | LR__0021
00a7c     11 25 02 F6 | 	mov	local04, local03
00a80     02 24 66 F0 | 	shl	local04, #2
00a84     A7 24 02 F1 | 	add	local04, fp
00a88     12 01 68 FC | 	wrlong	#0, local04
00a8c     01 22 06 F1 | 	add	local03, #1
00a90     7E 22 56 F2 | 	cmps	local03, #126 wc
00a94     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a98                 | LR__0022
00a98     20 4E 85 F1 | 	sub	fp, #32
00a9c                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a9c     00 22 06 F6 | 	mov	local03, #0
00aa0     54 00 00 FF 
00aa4     E0 E4 05 F1 | 	add	objptr, ##43232
00aa8     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aac                 | LR__0023
00aac     11 1F 02 F6 | 	mov	local01, local03
00ab0     03 1E 66 F0 | 	shl	local01, #3
00ab4     F2 1E 02 F1 | 	add	local01, objptr
00ab8     41 01 00 FF 
00abc     76 17 06 F6 | 	mov	arg03, ##@LR__4277
00ac0     0F 17 62 FC | 	wrlong	arg03, local01
00ac4     11 1F 02 F6 | 	mov	local01, local03
00ac8     03 1E 66 F0 | 	shl	local01, #3
00acc     F2 26 02 F6 | 	mov	local05, objptr
00ad0     F2 1E 02 F1 | 	add	local01, objptr
00ad4     00 28 06 F6 | 	mov	local06, #0
00ad8     04 1E 06 F1 | 	add	local01, #4
00adc     0F 01 68 FC | 	wrlong	#0, local01
00ae0     01 22 06 F1 | 	add	local03, #1
00ae4     7E 22 56 F2 | 	cmps	local03, #126 wc
00ae8     C0 FF 9F CD |  if_b	jmp	#LR__0023
00aec                 | LR__0024
00aec     02 00 00 FF 
00af0     10 E4 05 F1 | 	add	objptr, ##1040
00af4     F2 12 02 FB | 	rdlong	arg01, objptr
00af8     56 00 00 FF 
00afc     F0 E4 85 F1 | 	sub	objptr, ##44272
00b00     18 A7 B1 FD | 	call	#__system__RTrim_S
00b04     FD 12 02 F6 | 	mov	arg01, result1
00b08     50 A6 B1 FD | 	call	#__system__LTrim_S
00b0c     56 00 00 FF 
00b10     F0 E4 05 F1 | 	add	objptr, ##44272
00b14     F2 FA 61 FC | 	wrlong	result1, objptr
00b18     41 01 00 FF 
00b1c     77 1F 06 F6 | 	mov	local01, ##@LR__4278
00b20     24 00 00 FF 
00b24     94 E4 05 F1 | 	add	objptr, ##18580
00b28     F2 1E 62 FC | 	wrlong	local01, objptr
00b2c     24 00 00 FF 
00b30     94 E4 85 F1 | 	sub	objptr, ##18580
00b34     F2 12 02 FB | 	rdlong	arg01, objptr
00b38     56 00 00 FF 
00b3c     F0 E4 85 F1 | 	sub	objptr, ##44272
00b40     09 2B 02 F6 | 	mov	local07, arg01
00b44     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b48                 | LR__0025
00b48     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b4c     01 2A 06 51 |  if_ne	add	local07, #1
00b50     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b54                 | LR__0026
00b54     09 2B 8A F1 | 	sub	local07, arg01 wz
00b58     7A 00 00 FF 
00b5c     88 E5 05 F1 | 	add	objptr, ##62856
00b60     F2 2A 62 FC | 	wrlong	local07, objptr
00b64                 | ' if l=0 then goto 101
00b64     7A 00 00 FF 
00b68     88 E5 85 F1 | 	sub	objptr, ##62856
00b6c     D4 26 90 AD |  if_e	jmp	#LR__0148
00b70     7A 00 00 FF 
00b74     8C E5 05 F1 | 	add	objptr, ##62860
00b78     F2 00 68 FC | 	wrlong	#0, objptr
00b7c                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b7c                 | ' for i=1 to len(line$)
00b7c     01 22 06 F6 | 	mov	local03, #1
00b80     24 00 00 FF 
00b84     9C E4 85 F1 | 	sub	objptr, ##18588
00b88     F2 12 02 FB | 	rdlong	arg01, objptr
00b8c     56 00 00 FF 
00b90     F0 E4 85 F1 | 	sub	objptr, ##44272
00b94     09 2B 02 F6 | 	mov	local07, arg01
00b98     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b9c                 | LR__0027
00b9c     15 FB C9 FA | 	rdbyte	result1, local07 wz
00ba0     01 2A 06 51 |  if_ne	add	local07, #1
00ba4     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba8                 | LR__0028
00ba8     09 2B 82 F1 | 	sub	local07, arg01
00bac     15 2D 02 F6 | 	mov	local08, local07
00bb0     01 2C 06 F1 | 	add	local08, #1
00bb4                 | LR__0029
00bb4     16 23 52 F2 | 	cmps	local03, local08 wc
00bb8     00 01 90 3D |  if_ae	jmp	#LR__0032
00bbc                 | ' 
00bbc                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bbc     56 00 00 FF 
00bc0     F0 E4 05 F1 | 	add	objptr, ##44272
00bc4     F2 12 02 FB | 	rdlong	arg01, objptr
00bc8     56 00 00 FF 
00bcc     F0 E4 85 F1 | 	sub	objptr, ##44272
00bd0     11 15 02 F6 | 	mov	arg02, local03
00bd4     01 16 06 F6 | 	mov	arg03, #1
00bd8     24 A3 B1 FD | 	call	#__system__Mid_S
00bdc     FD 12 02 F6 | 	mov	arg01, result1
00be0     41 01 00 FF 
00be4     78 15 06 F6 | 	mov	arg02, ##@LR__4279
00be8     14 82 B1 FD | 	call	#__system___string_cmp
00bec     00 FA 0D F2 | 	cmp	result1, #0 wz
00bf0     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bf4     7A 00 00 FF 
00bf8     8C E5 05 F1 | 	add	objptr, ##62860
00bfc     F2 24 0A FB | 	rdlong	local04, objptr wz
00c00     7A 00 00 FF 
00c04     8C E5 85 F1 | 	sub	objptr, ##62860
00c08     7A 00 00 AF 
00c0c     8C E5 05 A1 |  if_e	add	objptr, ##62860
00c10     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c14     7A 00 00 AF 
00c18     8C E5 85 A1 |  if_e	sub	objptr, ##62860
00c1c     60 00 90 AD |  if_e	jmp	#LR__0031
00c20                 | LR__0030
00c20     56 00 00 FF 
00c24     F0 E4 05 F1 | 	add	objptr, ##44272
00c28     F2 12 02 FB | 	rdlong	arg01, objptr
00c2c     56 00 00 FF 
00c30     F0 E4 85 F1 | 	sub	objptr, ##44272
00c34     11 15 02 F6 | 	mov	arg02, local03
00c38     01 16 06 F6 | 	mov	arg03, #1
00c3c     C0 A2 B1 FD | 	call	#__system__Mid_S
00c40     FD 12 02 F6 | 	mov	arg01, result1
00c44     41 01 00 FF 
00c48     7A 15 06 F6 | 	mov	arg02, ##@LR__4280
00c4c     B0 81 B1 FD | 	call	#__system___string_cmp
00c50     00 FA 0D F2 | 	cmp	result1, #0 wz
00c54     7A 00 00 AF 
00c58     8C E5 05 A1 |  if_e	add	objptr, ##62860
00c5c     F2 24 02 AB |  if_e	rdlong	local04, objptr
00c60     7A 00 00 AF 
00c64     8C E5 85 A1 |  if_e	sub	objptr, ##62860
00c68     01 24 0E A2 |  if_e	cmp	local04, #1 wz
00c6c     7A 00 00 AF 
00c70     8C E5 05 A1 |  if_e	add	objptr, ##62860
00c74     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c78     7A 00 00 AF 
00c7c     8C E5 85 A1 |  if_e	sub	objptr, ##62860
00c80                 | LR__0031
00c80     11 1F 02 F6 | 	mov	local01, local03
00c84     03 1E 66 F0 | 	shl	local01, #3
00c88     54 00 00 FF 
00c8c     E0 E4 05 F1 | 	add	objptr, ##43232
00c90     F2 26 02 F6 | 	mov	local05, objptr
00c94     F2 1E 02 F1 | 	add	local01, objptr
00c98     26 00 00 FF 
00c9c     AC E4 05 F1 | 	add	objptr, ##19628
00ca0     F2 28 02 FB | 	rdlong	local06, objptr
00ca4     7A 00 00 FF 
00ca8     8C E5 85 F1 | 	sub	objptr, ##62860
00cac     04 1E 06 F1 | 	add	local01, #4
00cb0     0F 29 62 FC | 	wrlong	local06, local01
00cb4     01 22 06 F1 | 	add	local03, #1
00cb8     F8 FE 9F FD | 	jmp	#LR__0029
00cbc                 | LR__0032
00cbc     01 22 06 F6 | 	mov	local03, #1
00cc0                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cc0                 | LR__0033
00cc0     56 00 00 FF 
00cc4     F0 E4 05 F1 | 	add	objptr, ##44272
00cc8     F2 12 02 FB | 	rdlong	arg01, objptr
00ccc     56 00 00 FF 
00cd0     F0 E4 85 F1 | 	sub	objptr, ##44272
00cd4     11 15 02 F6 | 	mov	arg02, local03
00cd8     01 16 06 F6 | 	mov	arg03, #1
00cdc     20 A2 B1 FD | 	call	#__system__Mid_S
00ce0     FD 12 02 F6 | 	mov	arg01, result1
00ce4     41 01 00 FF 
00ce8     7C 2F 06 F6 | 	mov	local09, ##@LR__4281
00cec     17 15 02 F6 | 	mov	arg02, local09
00cf0     0C 81 B1 FD | 	call	#__system___string_cmp
00cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf8     34 00 90 5D |  if_ne	jmp	#LR__0034
00cfc     11 27 02 F6 | 	mov	local05, local03
00d00     03 26 66 F0 | 	shl	local05, #3
00d04     54 00 00 FF 
00d08     E0 E4 05 F1 | 	add	objptr, ##43232
00d0c     F2 28 02 F6 | 	mov	local06, objptr
00d10     F2 26 02 F1 | 	add	local05, objptr
00d14     04 26 06 F1 | 	add	local05, #4
00d18     13 31 02 FB | 	rdlong	local10, local05
00d1c     04 26 86 F1 | 	sub	local05, #4
00d20     18 33 0A F6 | 	mov	local11, local10 wz
00d24     54 00 00 FF 
00d28     E0 E4 85 F1 | 	sub	objptr, ##43232
00d2c     24 00 90 AD |  if_e	jmp	#LR__0035
00d30                 | LR__0034
00d30     7A 00 00 FF 
00d34     88 E5 05 F1 | 	add	objptr, ##62856
00d38     F2 34 02 FB | 	rdlong	local12, objptr
00d3c     7A 00 00 FF 
00d40     88 E5 85 F1 | 	sub	objptr, ##62856
00d44     1A 37 02 F6 | 	mov	local13, local12
00d48     1B 23 52 F2 | 	cmps	local03, local13 wc
00d4c     01 22 06 C1 |  if_b	add	local03, #1
00d50     6C FF 9F CD |  if_b	jmp	#LR__0033
00d54                 | LR__0035
00d54                 | ' 
00d54                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d54                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d54     7A 00 00 FF 
00d58     88 E5 05 F1 | 	add	objptr, ##62856
00d5c     F2 1E 02 FB | 	rdlong	local01, objptr
00d60     7A 00 00 FF 
00d64     88 E5 85 F1 | 	sub	objptr, ##62856
00d68     0F 23 52 F2 | 	cmps	local03, local01 wc
00d6c     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d70     56 00 00 FF 
00d74     F0 E4 05 F1 | 	add	objptr, ##44272
00d78     F2 28 02 FB | 	rdlong	local06, objptr
00d7c     56 00 00 FF 
00d80     F0 E4 85 F1 | 	sub	objptr, ##44272
00d84     14 13 02 F6 | 	mov	arg01, local06
00d88     09 2B 02 F6 | 	mov	local07, arg01
00d8c     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d90                 | LR__0036
00d90     15 FB C9 FA | 	rdbyte	result1, local07 wz
00d94     01 2A 06 51 |  if_ne	add	local07, #1
00d98     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d9c                 | LR__0037
00d9c     09 2B 82 F1 | 	sub	local07, arg01
00da0     15 15 02 F6 | 	mov	arg02, local07
00da4     11 15 82 F1 | 	sub	arg02, local03
00da8     14 13 02 F6 | 	mov	arg01, local06
00dac     C0 A0 B1 FD | 	call	#__system__Right_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     64 A4 B1 FD | 	call	#__system__RTrim_S
00db8     FD 12 02 F6 | 	mov	arg01, result1
00dbc     9C A3 B1 FD | 	call	#__system__LTrim_S
00dc0     7A 00 00 FF 
00dc4     90 E5 05 F1 | 	add	objptr, ##62864
00dc8     F2 FA 61 FC | 	wrlong	result1, objptr
00dcc     24 00 00 FF 
00dd0     A0 E4 85 F1 | 	sub	objptr, ##18592
00dd4     F2 12 02 FB | 	rdlong	arg01, objptr
00dd8     56 00 00 FF 
00ddc     F0 E4 85 F1 | 	sub	objptr, ##44272
00de0     01 22 86 F1 | 	sub	local03, #1
00de4     11 15 02 F6 | 	mov	arg02, local03
00de8     FC 9F B1 FD | 	call	#__system__Left_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     28 A4 B1 FD | 	call	#__system__RTrim_S
00df4     FD 12 02 F6 | 	mov	arg01, result1
00df8     60 A3 B1 FD | 	call	#__system__LTrim_S
00dfc     56 00 00 FF 
00e00     F0 E4 05 F1 | 	add	objptr, ##44272
00e04     F2 FA 61 FC | 	wrlong	result1, objptr
00e08     56 00 00 FF 
00e0c     F0 E4 85 F1 | 	sub	objptr, ##44272
00e10     1C 00 90 FD | 	jmp	#LR__0039
00e14                 | LR__0038
00e14     41 01 00 FF 
00e18     7E 1F 06 F6 | 	mov	local01, ##@LR__4282
00e1c     7A 00 00 FF 
00e20     90 E5 05 F1 | 	add	objptr, ##62864
00e24     F2 1E 62 FC | 	wrlong	local01, objptr
00e28     7A 00 00 FF 
00e2c     90 E5 85 F1 | 	sub	objptr, ##62864
00e30                 | LR__0039
00e30                 | ' 'print "line$=";line$
00e30                 | ' 'print "rest$=";rest$
00e30                 | ' 
00e30                 | ' 
00e30                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e30     56 00 00 FF 
00e34     F8 E4 05 F1 | 	add	objptr, ##44280
00e38     F2 1E 02 FB | 	rdlong	local01, objptr
00e3c     56 00 00 FF 
00e40     F8 E4 85 F1 | 	sub	objptr, ##44280
00e44     FF FF 7F FF 
00e48     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e4c     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e50     7A 00 00 FF 
00e54     90 E5 05 F1 | 	add	objptr, ##62864
00e58     F2 12 02 FB | 	rdlong	arg01, objptr
00e5c     7A 00 00 FF 
00e60     90 E5 85 F1 | 	sub	objptr, ##62864
00e64     41 01 00 FF 
00e68     7F 15 06 F6 | 	mov	arg02, ##@LR__4283
00e6c     90 7F B1 FD | 	call	#__system___string_cmp
00e70     00 FA 0D F2 | 	cmp	result1, #0 wz
00e74     56 00 00 5F 
00e78     F8 E4 05 51 |  if_ne	add	objptr, ##44280
00e7c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e80     56 00 00 5F 
00e84     F8 E4 85 51 |  if_ne	sub	objptr, ##44280
00e88     08 01 90 5D |  if_ne	jmp	#LR__0044
00e8c                 | LR__0040
00e8c                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e8c     56 00 00 FF 
00e90     F8 E4 05 F1 | 	add	objptr, ##44280
00e94     F2 1E 02 FB | 	rdlong	local01, objptr
00e98     56 00 00 FF 
00e9c     F8 E4 85 F1 | 	sub	objptr, ##44280
00ea0     FF FF 7F FF 
00ea4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea8     3C 00 90 5D |  if_ne	jmp	#LR__0041
00eac     7A 00 00 FF 
00eb0     90 E5 05 F1 | 	add	objptr, ##62864
00eb4     F2 12 02 FB | 	rdlong	arg01, objptr
00eb8     7A 00 00 FF 
00ebc     90 E5 85 F1 | 	sub	objptr, ##62864
00ec0     41 01 00 FF 
00ec4     80 15 06 F6 | 	mov	arg02, ##@LR__4284
00ec8     34 7F B1 FD | 	call	#__system___string_cmp
00ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
00ed0     56 00 00 AF 
00ed4     F8 E4 05 A1 |  if_e	add	objptr, ##44280
00ed8     F2 06 68 AC |  if_e	wrlong	#3, objptr
00edc     56 00 00 AF 
00ee0     F8 E4 85 A1 |  if_e	sub	objptr, ##44280
00ee4     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee8                 | LR__0041
00ee8                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee8     56 00 00 FF 
00eec     F8 E4 05 F1 | 	add	objptr, ##44280
00ef0     F2 1E 02 FB | 	rdlong	local01, objptr
00ef4     56 00 00 FF 
00ef8     F8 E4 85 F1 | 	sub	objptr, ##44280
00efc     04 1E 0E F2 | 	cmp	local01, #4 wz
00f00     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f04     7A 00 00 FF 
00f08     90 E5 05 F1 | 	add	objptr, ##62864
00f0c     F2 12 02 FB | 	rdlong	arg01, objptr
00f10     7A 00 00 FF 
00f14     90 E5 85 F1 | 	sub	objptr, ##62864
00f18     41 01 00 FF 
00f1c     81 15 06 F6 | 	mov	arg02, ##@LR__4285
00f20     DC 7E B1 FD | 	call	#__system___string_cmp
00f24     00 FA 0D F2 | 	cmp	result1, #0 wz
00f28     56 00 00 5F 
00f2c     F8 E4 05 51 |  if_ne	add	objptr, ##44280
00f30     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f34     56 00 00 5F 
00f38     F8 E4 85 51 |  if_ne	sub	objptr, ##44280
00f3c     54 00 90 5D |  if_ne	jmp	#LR__0044
00f40                 | LR__0042
00f40                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f40     56 00 00 FF 
00f44     F8 E4 05 F1 | 	add	objptr, ##44280
00f48     F2 1E 02 FB | 	rdlong	local01, objptr
00f4c     56 00 00 FF 
00f50     F8 E4 85 F1 | 	sub	objptr, ##44280
00f54     04 1E 0E F2 | 	cmp	local01, #4 wz
00f58     38 00 90 5D |  if_ne	jmp	#LR__0043
00f5c     7A 00 00 FF 
00f60     90 E5 05 F1 | 	add	objptr, ##62864
00f64     F2 12 02 FB | 	rdlong	arg01, objptr
00f68     7A 00 00 FF 
00f6c     90 E5 85 F1 | 	sub	objptr, ##62864
00f70     41 01 00 FF 
00f74     82 15 06 F6 | 	mov	arg02, ##@LR__4286
00f78     84 7E B1 FD | 	call	#__system___string_cmp
00f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f80     56 00 00 AF 
00f84     F8 E4 05 A1 |  if_e	add	objptr, ##44280
00f88     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f8c     56 00 00 AF 
00f90     F8 E4 85 A1 |  if_e	sub	objptr, ##44280
00f94                 | LR__0043
00f94                 | LR__0044
00f94     20 4E 05 F1 | 	add	fp, #32
00f98     A7 00 68 FC | 	wrlong	#0, fp
00f9c     20 4E 85 F1 | 	sub	fp, #32
00fa0     00 22 06 F6 | 	mov	local03, #0
00fa4     01 38 06 F6 | 	mov	local14, #1
00fa8                 | ' 
00fa8                 | ' ' 1b: find separators
00fa8                 | ' 
00fa8                 | ' 107
00fa8                 | ' separators(0)=0
00fa8                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa8                 | LR__0045
00fa8     01 22 06 F1 | 	add	local03, #1
00fac     56 00 00 FF 
00fb0     F0 E4 05 F1 | 	add	objptr, ##44272
00fb4     F2 12 02 FB | 	rdlong	arg01, objptr
00fb8     56 00 00 FF 
00fbc     F0 E4 85 F1 | 	sub	objptr, ##44272
00fc0     11 15 02 F6 | 	mov	arg02, local03
00fc4     01 16 06 F6 | 	mov	arg03, #1
00fc8     34 9F B1 FD | 	call	#__system__Mid_S
00fcc     7A 00 00 FF 
00fd0     94 E5 05 F1 | 	add	objptr, ##62868
00fd4     F2 FA 61 FC | 	wrlong	result1, objptr
00fd8                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd8     FD 12 02 F6 | 	mov	arg01, result1
00fdc     7A 00 00 FF 
00fe0     94 E5 85 F1 | 	sub	objptr, ##62868
00fe4     68 25 B0 FD | 	call	#_isseparator
00fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
00fec     1C 00 90 AD |  if_e	jmp	#LR__0046
00ff0     1C 25 02 F6 | 	mov	local04, local14
00ff4     02 24 66 F0 | 	shl	local04, #2
00ff8     20 4E 05 F1 | 	add	fp, #32
00ffc     A7 24 02 F1 | 	add	local04, fp
01000     12 23 62 FC | 	wrlong	local03, local04
01004     01 38 06 F1 | 	add	local14, #1
01008     20 4E 85 F1 | 	sub	fp, #32
0100c                 | LR__0046
0100c     7A 00 00 FF 
01010     88 E5 05 F1 | 	add	objptr, ##62856
01014     F2 1E 02 FB | 	rdlong	local01, objptr
01018     7A 00 00 FF 
0101c     88 E5 85 F1 | 	sub	objptr, ##62856
01020     0F 23 5A F2 | 	cmps	local03, local01 wcz
01024     80 FF 9F ED |  if_be	jmp	#LR__0045
01028     1C 25 02 F6 | 	mov	local04, local14
0102c     02 24 66 F0 | 	shl	local04, #2
01030     20 4E 05 F1 | 	add	fp, #32
01034     A7 24 02 F1 | 	add	local04, fp
01038     12 23 62 FC | 	wrlong	local03, local04
0103c     00 3A 06 F6 | 	mov	local15, #0
01040                 | ' for i=0 to j-1 
01040     00 22 06 F6 | 	mov	local03, #0
01044     1C 3D 02 F6 | 	mov	local16, local14
01048     20 4E 85 F1 | 	sub	fp, #32
0104c                 | LR__0047
0104c     1E 23 52 F2 | 	cmps	local03, local16 wc
01050     88 01 90 3D |  if_ae	jmp	#LR__0051
01054     11 25 02 F6 | 	mov	local04, local03
01058     02 24 66 F0 | 	shl	local04, #2
0105c     20 4E 05 F1 | 	add	fp, #32
01060     A7 24 02 F1 | 	add	local04, fp
01064     12 27 02 FB | 	rdlong	local05, local04
01068     7A 00 00 FF 
0106c     9C E5 05 F1 | 	add	objptr, ##62876
01070     F2 26 62 FC | 	wrlong	local05, objptr
01074     11 25 02 F6 | 	mov	local04, local03
01078     01 24 06 F1 | 	add	local04, #1
0107c     02 24 66 F0 | 	shl	local04, #2
01080     A7 2E 02 F6 | 	mov	local09, fp
01084     A7 24 02 F1 | 	add	local04, fp
01088     12 27 02 FB | 	rdlong	local05, local04
0108c     04 E4 05 F1 | 	add	objptr, #4
01090     F2 26 62 FC | 	wrlong	local05, objptr
01094                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
01094     04 E4 85 F1 | 	sub	objptr, #4
01098     F2 1E 02 FB | 	rdlong	local01, objptr
0109c     7A 00 00 FF 
010a0     9C E5 85 F1 | 	sub	objptr, ##62876
010a4     01 1E 56 F2 | 	cmps	local01, #1 wc
010a8     20 4E 85 F1 | 	sub	fp, #32
010ac     84 00 90 CD |  if_b	jmp	#LR__0049
010b0     56 00 00 FF 
010b4     F0 E4 05 F1 | 	add	objptr, ##44272
010b8     F2 12 02 FB | 	rdlong	arg01, objptr
010bc     24 00 00 FF 
010c0     AC E4 05 F1 | 	add	objptr, ##18604
010c4     F2 14 02 FB | 	rdlong	arg02, objptr
010c8     7A 00 00 FF 
010cc     9C E5 85 F1 | 	sub	objptr, ##62876
010d0     01 16 06 F6 | 	mov	arg03, #1
010d4     28 9E B1 FD | 	call	#__system__Mid_S
010d8     7A 00 00 FF 
010dc     A4 E5 05 F1 | 	add	objptr, ##62884
010e0     F2 FA 61 FC | 	wrlong	result1, objptr
010e4     7A 00 00 FF 
010e8     A4 E5 85 F1 | 	sub	objptr, ##62884
010ec     FD 12 02 F6 | 	mov	arg01, result1
010f0     41 01 00 FF 
010f4     83 15 06 F6 | 	mov	arg02, ##@LR__4287
010f8     04 7D B1 FD | 	call	#__system___string_cmp
010fc     00 FA 0D F2 | 	cmp	result1, #0 wz
01100     30 00 90 AD |  if_e	jmp	#LR__0048
01104     1D 2F 02 F6 | 	mov	local09, local15
01108     03 2E 66 F0 | 	shl	local09, #3
0110c     54 00 00 FF 
01110     E0 E4 05 F1 | 	add	objptr, ##43232
01114     F2 2E 02 F1 | 	add	local09, objptr
01118     26 00 00 FF 
0111c     C4 E4 05 F1 | 	add	objptr, ##19652
01120     F2 28 02 FB | 	rdlong	local06, objptr
01124     7A 00 00 FF 
01128     A4 E5 85 F1 | 	sub	objptr, ##62884
0112c     17 29 62 FC | 	wrlong	local06, local09
01130     01 3A 06 F1 | 	add	local15, #1
01134                 | LR__0048
01134                 | LR__0049
01134     56 00 00 FF 
01138     F0 E4 05 F1 | 	add	objptr, ##44272
0113c     F2 12 02 FB | 	rdlong	arg01, objptr
01140     24 00 00 FF 
01144     AC E4 05 F1 | 	add	objptr, ##18604
01148     F2 14 02 FB | 	rdlong	arg02, objptr
0114c     01 14 06 F1 | 	add	arg02, #1
01150     04 E4 05 F1 | 	add	objptr, #4
01154     F2 16 02 FB | 	rdlong	arg03, objptr
01158     04 E4 85 F1 | 	sub	objptr, #4
0115c     F2 30 02 FB | 	rdlong	local10, objptr
01160     7A 00 00 FF 
01164     9C E5 85 F1 | 	sub	objptr, ##62876
01168     18 33 02 F6 | 	mov	local11, local10
0116c     19 17 82 F1 | 	sub	arg03, local11
01170     01 16 86 F1 | 	sub	arg03, #1
01174     88 9D B1 FD | 	call	#__system__Mid_S
01178     7A 00 00 FF 
0117c     A4 E5 05 F1 | 	add	objptr, ##62884
01180     F2 FA 61 FC | 	wrlong	result1, objptr
01184     7A 00 00 FF 
01188     A4 E5 85 F1 | 	sub	objptr, ##62884
0118c     FD 12 02 F6 | 	mov	arg01, result1
01190     41 01 00 FF 
01194     84 15 06 F6 | 	mov	arg02, ##@LR__4288
01198     64 7C B1 FD | 	call	#__system___string_cmp
0119c     00 FA 0D F2 | 	cmp	result1, #0 wz
011a0     30 00 90 AD |  if_e	jmp	#LR__0050
011a4     1D 2F 02 F6 | 	mov	local09, local15
011a8     03 2E 66 F0 | 	shl	local09, #3
011ac     54 00 00 FF 
011b0     E0 E4 05 F1 | 	add	objptr, ##43232
011b4     F2 2E 02 F1 | 	add	local09, objptr
011b8     26 00 00 FF 
011bc     C4 E4 05 F1 | 	add	objptr, ##19652
011c0     F2 28 02 FB | 	rdlong	local06, objptr
011c4     7A 00 00 FF 
011c8     A4 E5 85 F1 | 	sub	objptr, ##62884
011cc     17 29 62 FC | 	wrlong	local06, local09
011d0     01 3A 06 F1 | 	add	local15, #1
011d4                 | LR__0050
011d4     01 22 06 F1 | 	add	local03, #1
011d8     70 FE 9F FD | 	jmp	#LR__0047
011dc                 | LR__0051
011dc     00 22 06 F6 | 	mov	local03, #0
011e0                 | ' 
011e0                 | ' ' 1d : find strings
011e0                 | ' 
011e0                 | ' i=0
011e0                 | ' do
011e0                 | LR__0052
011e0                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011e0     11 27 02 F6 | 	mov	local05, local03
011e4     03 26 66 F0 | 	shl	local05, #3
011e8     54 00 00 FF 
011ec     E0 E4 05 F1 | 	add	objptr, ##43232
011f0     F2 26 02 F1 | 	add	local05, objptr
011f4     13 13 02 FB | 	rdlong	arg01, local05
011f8     41 01 00 FF 
011fc     85 15 06 F6 | 	mov	arg02, ##@LR__4289
01200     54 00 00 FF 
01204     E0 E4 85 F1 | 	sub	objptr, ##43232
01208     F4 7B B1 FD | 	call	#__system___string_cmp
0120c     00 FA 0D F2 | 	cmp	result1, #0 wz
01210     01 22 06 51 |  if_ne	add	local03, #1
01214     50 01 90 5D |  if_ne	jmp	#LR__0057
01218     11 3F 02 F6 | 	mov	local17, local03
0121c                 | LR__0053
0121c     11 2F 02 F6 | 	mov	local09, local03
01220     01 2E 06 F1 | 	add	local09, #1
01224     03 2E 66 F0 | 	shl	local09, #3
01228     54 00 00 FF 
0122c     E0 E4 05 F1 | 	add	objptr, ##43232
01230     F2 2E 02 F1 | 	add	local09, objptr
01234     17 31 02 FB | 	rdlong	local10, local09
01238     26 00 00 FF 
0123c     C4 E4 05 F1 | 	add	objptr, ##19652
01240     F2 30 62 FC | 	wrlong	local10, objptr
01244     1F 2F 02 F6 | 	mov	local09, local17
01248     03 2E 66 F0 | 	shl	local09, #3
0124c     26 00 00 FF 
01250     C4 E4 85 F1 | 	sub	objptr, ##19652
01254     F2 2E 02 F1 | 	add	local09, objptr
01258     1F 37 02 F6 | 	mov	local13, local17
0125c     03 36 66 F0 | 	shl	local13, #3
01260     F2 36 02 F1 | 	add	local13, objptr
01264     1B 13 02 FB | 	rdlong	arg01, local13
01268     54 00 00 FF 
0126c     E0 E4 85 F1 | 	sub	objptr, ##43232
01270     18 33 02 F6 | 	mov	local11, local10
01274     19 15 02 F6 | 	mov	arg02, local11
01278     B8 7B B1 FD | 	call	#__system___string_concat
0127c     17 FB 61 FC | 	wrlong	result1, local09
01280     11 39 02 F6 | 	mov	local14, local03
01284     01 38 06 F1 | 	add	local14, #1
01288     1D 41 02 F6 | 	mov	local18, local15
0128c     01 40 06 F1 | 	add	local18, #1
01290     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01294                 | LR__0054
01294     20 39 52 F2 | 	cmps	local14, local18 wc
01298     70 00 90 3D |  if_ae	jmp	#LR__0056
0129c     1C 27 02 F6 | 	mov	local05, local14
012a0     01 26 06 F1 | 	add	local05, #1
012a4     03 26 66 F0 | 	shl	local05, #3
012a8     54 00 00 FF 
012ac     E0 E4 05 F1 | 	add	objptr, ##43232
012b0     F2 26 02 F1 | 	add	local05, objptr
012b4     13 1F 02 FB | 	rdlong	local01, local05
012b8     1C 29 02 F6 | 	mov	local06, local14
012bc     01 28 06 F1 | 	add	local06, #1
012c0     03 28 66 F0 | 	shl	local06, #3
012c4     F2 28 02 F1 | 	add	local06, objptr
012c8     04 28 06 F1 | 	add	local06, #4
012cc     14 25 02 FB | 	rdlong	local04, local06
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     03 28 66 F0 | 	shl	local06, #3
012d8     F2 32 02 F6 | 	mov	local11, objptr
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     14 1F 62 FC | 	wrlong	local01, local06
012e4     1C 31 02 F6 | 	mov	local10, local14
012e8     18 35 02 F6 | 	mov	local12, local10
012ec     03 34 66 F0 | 	shl	local12, #3
012f0     F2 34 02 F1 | 	add	local12, objptr
012f4     04 34 06 F1 | 	add	local12, #4
012f8     1A 25 62 FC | 	wrlong	local04, local12
012fc     01 38 06 F1 | 	add	local14, #1
01300     54 00 00 FF 
01304     E0 E4 85 F1 | 	sub	objptr, ##43232
01308     88 FF 9F FD | 	jmp	#LR__0054
0130c                 | LR__0055
0130c                 | LR__0056
0130c     01 3A 86 F1 | 	sub	local15, #1
01310     7A 00 00 FF 
01314     A4 E5 05 F1 | 	add	objptr, ##62884
01318     F2 12 02 FB | 	rdlong	arg01, objptr
0131c     7A 00 00 FF 
01320     A4 E5 85 F1 | 	sub	objptr, ##62884
01324     41 01 00 FF 
01328     87 15 06 F6 | 	mov	arg02, ##@LR__4290
0132c     D0 7A B1 FD | 	call	#__system___string_cmp
01330     00 FA 0D F2 | 	cmp	result1, #0 wz
01334     1D 23 52 52 |  if_ne	cmps	local03, local15 wc
01338     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
0133c                 | '   if p$<>"""" then k+=1:i+=1
0133c     7A 00 00 FF 
01340     A4 E5 05 F1 | 	add	objptr, ##62884
01344     F2 12 02 FB | 	rdlong	arg01, objptr
01348     7A 00 00 FF 
0134c     A4 E5 85 F1 | 	sub	objptr, ##62884
01350     41 01 00 FF 
01354     89 15 06 F6 | 	mov	arg02, ##@LR__4291
01358     A4 7A B1 FD | 	call	#__system___string_cmp
0135c     00 FA 0D F2 | 	cmp	result1, #0 wz
01360     01 3A 06 51 |  if_ne	add	local15, #1
01364     01 22 06 51 |  if_ne	add	local03, #1
01368                 | LR__0057
01368     1D 23 52 F2 | 	cmps	local03, local15 wc
0136c     70 FE 9F CD |  if_b	jmp	#LR__0052
01370     00 22 06 F6 | 	mov	local03, #0
01374                 | ' 
01374                 | ' ' 1e : concatenate strings if "" detected between
01374                 | '  
01374                 | ' i=0 : do
01374                 | LR__0058
01374                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01374     11 27 02 F6 | 	mov	local05, local03
01378     03 26 66 F0 | 	shl	local05, #3
0137c     54 00 00 FF 
01380     E0 E4 05 F1 | 	add	objptr, ##43232
01384     F2 26 02 F1 | 	add	local05, objptr
01388     13 13 02 FB | 	rdlong	arg01, local05
0138c     01 14 06 F6 | 	mov	arg02, #1
01390     54 00 00 FF 
01394     E0 E4 85 F1 | 	sub	objptr, ##43232
01398     D4 9A B1 FD | 	call	#__system__Right_S
0139c     FD 12 02 F6 | 	mov	arg01, result1
013a0     41 01 00 FF 
013a4     8B 15 06 F6 | 	mov	arg02, ##@LR__4292
013a8     54 7A B1 FD | 	call	#__system___string_cmp
013ac     00 FA 0D F2 | 	cmp	result1, #0 wz
013b0     78 01 90 5D |  if_ne	jmp	#LR__0064
013b4     11 29 02 F6 | 	mov	local06, local03
013b8     01 28 06 F1 | 	add	local06, #1
013bc     03 28 66 F0 | 	shl	local06, #3
013c0     54 00 00 FF 
013c4     E0 E4 05 F1 | 	add	objptr, ##43232
013c8     F2 32 02 F6 | 	mov	local11, objptr
013cc     F2 28 02 F1 | 	add	local06, objptr
013d0     14 13 02 FB | 	rdlong	arg01, local06
013d4     01 14 06 F6 | 	mov	arg02, #1
013d8     54 00 00 FF 
013dc     E0 E4 85 F1 | 	sub	objptr, ##43232
013e0     04 9A B1 FD | 	call	#__system__Left_S
013e4     FD 12 02 F6 | 	mov	arg01, result1
013e8     41 01 00 FF 
013ec     8D 15 06 F6 | 	mov	arg02, ##@LR__4293
013f0     0C 7A B1 FD | 	call	#__system___string_cmp
013f4     00 FA 0D F2 | 	cmp	result1, #0 wz
013f8     30 01 90 5D |  if_ne	jmp	#LR__0064
013fc     11 2F 02 F6 | 	mov	local09, local03
01400     03 2E 66 F0 | 	shl	local09, #3
01404     54 00 00 FF 
01408     E0 E4 05 F1 | 	add	objptr, ##43232
0140c     F2 2E 02 F1 | 	add	local09, objptr
01410     11 37 02 F6 | 	mov	local13, local03
01414     03 36 66 F0 | 	shl	local13, #3
01418     F2 36 02 F1 | 	add	local13, objptr
0141c     1B 29 02 FB | 	rdlong	local06, local13
01420     11 35 02 F6 | 	mov	local12, local03
01424     01 34 06 F1 | 	add	local12, #1
01428     03 34 66 F0 | 	shl	local12, #3
0142c     F2 34 02 F1 | 	add	local12, objptr
01430     1A 33 02 FB | 	rdlong	local11, local12
01434     11 43 02 F6 | 	mov	local19, local03
01438     01 42 06 F1 | 	add	local19, #1
0143c     21 45 02 F6 | 	mov	local20, local19
01440     03 44 66 F0 | 	shl	local20, #3
01444     F2 46 02 F6 | 	mov	local21, objptr
01448     F2 44 02 F1 | 	add	local20, objptr
0144c     22 13 02 FB | 	rdlong	arg01, local20
01450     54 00 00 FF 
01454     E0 E4 85 F1 | 	sub	objptr, ##43232
01458     09 2B 02 F6 | 	mov	local07, arg01
0145c     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01460                 | LR__0059
01460     15 FB C9 FA | 	rdbyte	result1, local07 wz
01464     01 2A 06 51 |  if_ne	add	local07, #1
01468     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
0146c                 | LR__0060
0146c     09 2B 82 F1 | 	sub	local07, arg01
01470     15 31 02 F6 | 	mov	local10, local07
01474     01 30 86 F1 | 	sub	local10, #1
01478     19 13 02 F6 | 	mov	arg01, local11
0147c     18 15 02 F6 | 	mov	arg02, local10
01480     EC 99 B1 FD | 	call	#__system__Right_S
01484     FD 32 02 F6 | 	mov	local11, result1
01488     14 13 02 F6 | 	mov	arg01, local06
0148c     19 15 02 F6 | 	mov	arg02, local11
01490     A0 79 B1 FD | 	call	#__system___string_concat
01494     17 FB 61 FC | 	wrlong	result1, local09
01498                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01498     11 39 02 F6 | 	mov	local14, local03
0149c     01 38 06 F1 | 	add	local14, #1
014a0     1D 49 02 F6 | 	mov	local22, local15
014a4     01 48 06 F1 | 	add	local22, #1
014a8     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014ac                 | LR__0061
014ac     24 39 52 F2 | 	cmps	local14, local22 wc
014b0     70 00 90 3D |  if_ae	jmp	#LR__0063
014b4     1C 27 02 F6 | 	mov	local05, local14
014b8     01 26 06 F1 | 	add	local05, #1
014bc     03 26 66 F0 | 	shl	local05, #3
014c0     54 00 00 FF 
014c4     E0 E4 05 F1 | 	add	objptr, ##43232
014c8     F2 26 02 F1 | 	add	local05, objptr
014cc     13 1F 02 FB | 	rdlong	local01, local05
014d0     1C 29 02 F6 | 	mov	local06, local14
014d4     01 28 06 F1 | 	add	local06, #1
014d8     03 28 66 F0 | 	shl	local06, #3
014dc     F2 28 02 F1 | 	add	local06, objptr
014e0     04 28 06 F1 | 	add	local06, #4
014e4     14 25 02 FB | 	rdlong	local04, local06
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     03 28 66 F0 | 	shl	local06, #3
014f0     F2 32 02 F6 | 	mov	local11, objptr
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     14 1F 62 FC | 	wrlong	local01, local06
014fc     1C 31 02 F6 | 	mov	local10, local14
01500     18 35 02 F6 | 	mov	local12, local10
01504     03 34 66 F0 | 	shl	local12, #3
01508     F2 34 02 F1 | 	add	local12, objptr
0150c     04 34 06 F1 | 	add	local12, #4
01510     1A 25 62 FC | 	wrlong	local04, local12
01514     01 38 06 F1 | 	add	local14, #1
01518     54 00 00 FF 
0151c     E0 E4 85 F1 | 	sub	objptr, ##43232
01520     88 FF 9F FD | 	jmp	#LR__0061
01524                 | LR__0062
01524                 | LR__0063
01524     01 22 86 F1 | 	sub	local03, #1
01528     01 3A 86 F1 | 	sub	local15, #1
0152c                 | LR__0064
0152c     01 22 06 F1 | 	add	local03, #1
01530     1D 23 52 F2 | 	cmps	local03, local15 wc
01534     3C FE 9F CD |  if_b	jmp	#LR__0058
01538     00 22 06 F6 | 	mov	local03, #0
0153c                 | '  
0153c                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
0153c                 | '  
0153c                 | ' i=0 : do
0153c                 | LR__0065
0153c     11 2F 02 F6 | 	mov	local09, local03
01540     03 2E 66 F0 | 	shl	local09, #3
01544     54 00 00 FF 
01548     E0 E4 05 F1 | 	add	objptr, ##43232
0154c     F2 2E 02 F1 | 	add	local09, objptr
01550     17 29 02 FB | 	rdlong	local06, local09
01554     26 00 00 FF 
01558     CC E4 05 F1 | 	add	objptr, ##19660
0155c     F2 28 62 FC | 	wrlong	local06, objptr
01560     11 2F 02 F6 | 	mov	local09, local03
01564     01 2E 06 F1 | 	add	local09, #1
01568     03 2E 66 F0 | 	shl	local09, #3
0156c     26 00 00 FF 
01570     CC E4 85 F1 | 	sub	objptr, ##19660
01574     F2 2E 02 F1 | 	add	local09, objptr
01578     17 29 02 FB | 	rdlong	local06, local09
0157c     26 00 00 FF 
01580     D0 E4 05 F1 | 	add	objptr, ##19664
01584     F2 28 62 FC | 	wrlong	local06, objptr
01588                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01588     04 E4 85 F1 | 	sub	objptr, #4
0158c     F2 12 02 FB | 	rdlong	arg01, objptr
01590     7A 00 00 FF 
01594     AC E5 85 F1 | 	sub	objptr, ##62892
01598     41 01 00 FF 
0159c     8F 15 06 F6 | 	mov	arg02, ##@LR__4294
015a0     5C 78 B1 FD | 	call	#__system___string_cmp
015a4     00 FA 0D F2 | 	cmp	result1, #0 wz
015a8     04 01 90 AD |  if_e	jmp	#LR__0066
015ac     7A 00 00 FF 
015b0     AC E5 05 F1 | 	add	objptr, ##62892
015b4     F2 12 02 FB | 	rdlong	arg01, objptr
015b8     7A 00 00 FF 
015bc     AC E5 85 F1 | 	sub	objptr, ##62892
015c0     41 01 00 FF 
015c4     91 15 06 F6 | 	mov	arg02, ##@LR__4295
015c8     34 78 B1 FD | 	call	#__system___string_cmp
015cc     FD 24 0A F6 | 	mov	local04, result1 wz
015d0     DC 00 90 AD |  if_e	jmp	#LR__0066
015d4     7A 00 00 FF 
015d8     AC E5 05 F1 | 	add	objptr, ##62892
015dc     F2 12 02 FB | 	rdlong	arg01, objptr
015e0     7A 00 00 FF 
015e4     AC E5 85 F1 | 	sub	objptr, ##62892
015e8     41 01 00 FF 
015ec     93 15 06 F6 | 	mov	arg02, ##@LR__4296
015f0     0C 78 B1 FD | 	call	#__system___string_cmp
015f4     00 FA 0D F2 | 	cmp	result1, #0 wz
015f8     B4 00 90 AD |  if_e	jmp	#LR__0066
015fc     7A 00 00 FF 
01600     AC E5 05 F1 | 	add	objptr, ##62892
01604     F2 12 02 FB | 	rdlong	arg01, objptr
01608     7A 00 00 FF 
0160c     AC E5 85 F1 | 	sub	objptr, ##62892
01610     41 01 00 FF 
01614     95 33 06 F6 | 	mov	local11, ##@LR__4297
01618     19 15 02 F6 | 	mov	arg02, local11
0161c     E0 77 B1 FD | 	call	#__system___string_cmp
01620     00 FA 0D F2 | 	cmp	result1, #0 wz
01624     88 00 90 AD |  if_e	jmp	#LR__0066
01628     7A 00 00 FF 
0162c     AC E5 05 F1 | 	add	objptr, ##62892
01630     F2 12 02 FB | 	rdlong	arg01, objptr
01634     7A 00 00 FF 
01638     AC E5 85 F1 | 	sub	objptr, ##62892
0163c     41 01 00 FF 
01640     97 31 06 F6 | 	mov	local10, ##@LR__4298
01644     18 33 02 F6 | 	mov	local11, local10
01648     19 15 02 F6 | 	mov	arg02, local11
0164c     B0 77 B1 FD | 	call	#__system___string_cmp
01650     00 FA 0D F2 | 	cmp	result1, #0 wz
01654     58 00 90 AD |  if_e	jmp	#LR__0066
01658     7A 00 00 FF 
0165c     AC E5 05 F1 | 	add	objptr, ##62892
01660     F2 12 02 FB | 	rdlong	arg01, objptr
01664     7A 00 00 FF 
01668     AC E5 85 F1 | 	sub	objptr, ##62892
0166c     41 01 00 FF 
01670     99 31 06 F6 | 	mov	local10, ##@LR__4299
01674     18 15 02 F6 | 	mov	arg02, local10
01678     84 77 B1 FD | 	call	#__system___string_cmp
0167c     FD 32 0A F6 | 	mov	local11, result1 wz
01680     2C 00 90 AD |  if_e	jmp	#LR__0066
01684     7A 00 00 FF 
01688     AC E5 05 F1 | 	add	objptr, ##62892
0168c     F2 12 02 FB | 	rdlong	arg01, objptr
01690     7A 00 00 FF 
01694     AC E5 85 F1 | 	sub	objptr, ##62892
01698     41 01 00 FF 
0169c     9B 37 06 F6 | 	mov	local13, ##@LR__4300
016a0     1B 15 02 F6 | 	mov	arg02, local13
016a4     58 77 B1 FD | 	call	#__system___string_cmp
016a8     FD 30 0A F6 | 	mov	local10, result1 wz
016ac     30 00 90 5D |  if_ne	jmp	#LR__0067
016b0                 | LR__0066
016b0     7A 00 00 FF 
016b4     B0 E5 05 F1 | 	add	objptr, ##62896
016b8     F2 12 02 FB | 	rdlong	arg01, objptr
016bc     7A 00 00 FF 
016c0     B0 E5 85 F1 | 	sub	objptr, ##62896
016c4     41 01 00 FF 
016c8     9D 4B 06 F6 | 	mov	local23, ##@LR__4301
016cc     25 35 02 F6 | 	mov	local12, local23
016d0     1A 15 02 F6 | 	mov	arg02, local12
016d4     28 77 B1 FD | 	call	#__system___string_cmp
016d8     FD 36 0A F6 | 	mov	local13, result1 wz
016dc     18 01 90 AD |  if_e	jmp	#LR__0070
016e0                 | LR__0067
016e0     7A 00 00 FF 
016e4     AC E5 05 F1 | 	add	objptr, ##62892
016e8     F2 12 02 FB | 	rdlong	arg01, objptr
016ec     7A 00 00 FF 
016f0     AC E5 85 F1 | 	sub	objptr, ##62892
016f4     41 01 00 FF 
016f8     9F 4B 06 F6 | 	mov	local23, ##@LR__4302
016fc     25 15 02 F6 | 	mov	arg02, local23
01700     FC 76 B1 FD | 	call	#__system___string_cmp
01704     FD 34 0A F6 | 	mov	local12, result1 wz
01708     30 00 90 5D |  if_ne	jmp	#LR__0068
0170c     7A 00 00 FF 
01710     B0 E5 05 F1 | 	add	objptr, ##62896
01714     F2 12 02 FB | 	rdlong	arg01, objptr
01718     7A 00 00 FF 
0171c     B0 E5 85 F1 | 	sub	objptr, ##62896
01720     41 01 00 FF 
01724     A1 45 06 F6 | 	mov	local20, ##@LR__4303
01728     22 43 02 F6 | 	mov	local19, local20
0172c     21 15 02 F6 | 	mov	arg02, local19
01730     CC 76 B1 FD | 	call	#__system___string_cmp
01734     FD 4A 0A F6 | 	mov	local23, result1 wz
01738     BC 00 90 AD |  if_e	jmp	#LR__0070
0173c                 | LR__0068
0173c     7A 00 00 FF 
01740     AC E5 05 F1 | 	add	objptr, ##62892
01744     F2 12 02 FB | 	rdlong	arg01, objptr
01748     7A 00 00 FF 
0174c     AC E5 85 F1 | 	sub	objptr, ##62892
01750     41 01 00 FF 
01754     A3 45 06 F6 | 	mov	local20, ##@LR__4304
01758     22 15 02 F6 | 	mov	arg02, local20
0175c     A0 76 B1 FD | 	call	#__system___string_cmp
01760     FD 42 0A F6 | 	mov	local19, result1 wz
01764     30 00 90 5D |  if_ne	jmp	#LR__0069
01768     7A 00 00 FF 
0176c     B0 E5 05 F1 | 	add	objptr, ##62896
01770     F2 12 02 FB | 	rdlong	arg01, objptr
01774     7A 00 00 FF 
01778     B0 E5 85 F1 | 	sub	objptr, ##62896
0177c     41 01 00 FF 
01780     A5 4D 06 F6 | 	mov	local24, ##@LR__4305
01784     26 47 02 F6 | 	mov	local21, local24
01788     23 15 02 F6 | 	mov	arg02, local21
0178c     70 76 B1 FD | 	call	#__system___string_cmp
01790     FD 44 0A F6 | 	mov	local20, result1 wz
01794     60 00 90 AD |  if_e	jmp	#LR__0070
01798                 | LR__0069
01798     7A 00 00 FF 
0179c     AC E5 05 F1 | 	add	objptr, ##62892
017a0     F2 12 02 FB | 	rdlong	arg01, objptr
017a4     7A 00 00 FF 
017a8     AC E5 85 F1 | 	sub	objptr, ##62892
017ac     41 01 00 FF 
017b0     A7 4F 06 F6 | 	mov	local25, ##@LR__4306
017b4     27 4D 02 F6 | 	mov	local24, local25
017b8     26 15 02 F6 | 	mov	arg02, local24
017bc     40 76 B1 FD | 	call	#__system___string_cmp
017c0     FD 46 0A F6 | 	mov	local21, result1 wz
017c4     10 01 90 5D |  if_ne	jmp	#LR__0074
017c8     7A 00 00 FF 
017cc     B0 E5 05 F1 | 	add	objptr, ##62896
017d0     F2 12 02 FB | 	rdlong	arg01, objptr
017d4     7A 00 00 FF 
017d8     B0 E5 85 F1 | 	sub	objptr, ##62896
017dc     41 01 00 FF 
017e0     A9 51 06 F6 | 	mov	local26, ##@LR__4307
017e4     28 4F 02 F6 | 	mov	local25, local26
017e8     27 15 02 F6 | 	mov	arg02, local25
017ec     10 76 B1 FD | 	call	#__system___string_cmp
017f0     FD 4C 0A F6 | 	mov	local24, result1 wz
017f4     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f8                 | LR__0070
017f8     11 2F 02 F6 | 	mov	local09, local03
017fc     03 2E 66 F0 | 	shl	local09, #3
01800     54 00 00 FF 
01804     E0 E4 05 F1 | 	add	objptr, ##43232
01808     F2 2E 02 F1 | 	add	local09, objptr
0180c     26 00 00 FF 
01810     CC E4 05 F1 | 	add	objptr, ##19660
01814     F2 12 02 FB | 	rdlong	arg01, objptr
01818     04 E4 05 F1 | 	add	objptr, #4
0181c     F2 30 02 FB | 	rdlong	local10, objptr
01820     7A 00 00 FF 
01824     B0 E5 85 F1 | 	sub	objptr, ##62896
01828     18 33 02 F6 | 	mov	local11, local10
0182c     19 15 02 F6 | 	mov	arg02, local11
01830     00 76 B1 FD | 	call	#__system___string_concat
01834     17 FB 61 FC | 	wrlong	result1, local09
01838                 | '     lparts(i).part$=s1$+s2$
01838                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01838     11 39 02 F6 | 	mov	local14, local03
0183c     01 38 06 F1 | 	add	local14, #1
01840     1D 53 02 F6 | 	mov	local27, local15
01844     01 52 06 F1 | 	add	local27, #1
01848     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
0184c                 | LR__0071
0184c     29 39 52 F2 | 	cmps	local14, local27 wc
01850     7C 00 90 3D |  if_ae	jmp	#LR__0073
01854     1C 27 02 F6 | 	mov	local05, local14
01858     01 26 06 F1 | 	add	local05, #1
0185c     03 26 66 F0 | 	shl	local05, #3
01860     54 00 00 FF 
01864     E0 E4 05 F1 | 	add	objptr, ##43232
01868     F2 26 02 F1 | 	add	local05, objptr
0186c     13 1F 02 FB | 	rdlong	local01, local05
01870     1C 29 02 F6 | 	mov	local06, local14
01874     01 28 06 F1 | 	add	local06, #1
01878     03 28 66 F0 | 	shl	local06, #3
0187c     F2 28 02 F1 | 	add	local06, objptr
01880     04 28 06 F1 | 	add	local06, #4
01884     14 25 02 FB | 	rdlong	local04, local06
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     03 28 66 F0 | 	shl	local06, #3
01890     F2 32 02 F6 | 	mov	local11, objptr
01894     F2 28 02 F1 | 	add	local06, objptr
01898     14 1F 62 FC | 	wrlong	local01, local06
0189c     1C 31 02 F6 | 	mov	local10, local14
018a0     18 37 02 F6 | 	mov	local13, local10
018a4     1B 35 02 F6 | 	mov	local12, local13
018a8     03 34 66 F0 | 	shl	local12, #3
018ac     F2 4A 02 F6 | 	mov	local23, objptr
018b0     F2 34 02 F1 | 	add	local12, objptr
018b4     04 34 06 F1 | 	add	local12, #4
018b8     1A 25 62 FC | 	wrlong	local04, local12
018bc     04 34 86 F1 | 	sub	local12, #4
018c0     01 38 06 F1 | 	add	local14, #1
018c4     54 00 00 FF 
018c8     E0 E4 85 F1 | 	sub	objptr, ##43232
018cc     7C FF 9F FD | 	jmp	#LR__0071
018d0                 | LR__0072
018d0                 | LR__0073
018d0     01 22 86 F1 | 	sub	local03, #1
018d4     01 3A 86 F1 | 	sub	local15, #1
018d8                 | LR__0074
018d8     01 22 06 F1 | 	add	local03, #1
018dc     1D 23 52 F2 | 	cmps	local03, local15 wc
018e0     58 FC 9F CD |  if_b	jmp	#LR__0065
018e4                 | '  
018e4                 | ' ' 1f : now remove parts that are spaces
018e4                 | ' 
018e4                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018e4     00 22 06 F6 | 	mov	local03, #0
018e8     1D 55 02 F6 | 	mov	local28, local15
018ec     01 54 06 F1 | 	add	local28, #1
018f0                 | LR__0075
018f0     2A 23 52 F2 | 	cmps	local03, local28 wc
018f4     50 00 90 3D |  if_ae	jmp	#LR__0076
018f8     11 2F 02 F6 | 	mov	local09, local03
018fc     03 2E 66 F0 | 	shl	local09, #3
01900     54 00 00 FF 
01904     E0 E4 05 F1 | 	add	objptr, ##43232
01908     F2 2E 02 F1 | 	add	local09, objptr
0190c     11 33 02 F6 | 	mov	local11, local03
01910     19 31 02 F6 | 	mov	local10, local11
01914     18 37 02 F6 | 	mov	local13, local10
01918     03 36 66 F0 | 	shl	local13, #3
0191c     F2 34 02 F6 | 	mov	local12, objptr
01920     F2 36 02 F1 | 	add	local13, objptr
01924     1B 13 02 FB | 	rdlong	arg01, local13
01928     54 00 00 FF 
0192c     E0 E4 85 F1 | 	sub	objptr, ##43232
01930     E8 98 B1 FD | 	call	#__system__RTrim_S
01934     FD 12 02 F6 | 	mov	arg01, result1
01938     20 98 B1 FD | 	call	#__system__LTrim_S
0193c     17 FB 61 FC | 	wrlong	result1, local09
01940     01 22 06 F1 | 	add	local03, #1
01944     A8 FF 9F FD | 	jmp	#LR__0075
01948                 | LR__0076
01948     00 22 06 F6 | 	mov	local03, #0
0194c     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01950                 | ' 
01950                 | ' i=0
01950                 | ' do 
01950                 | LR__0077
01950                 | '   if len(lparts(i).part$)=0 then 
01950     11 2F 02 F6 | 	mov	local09, local03
01954     17 27 02 F6 | 	mov	local05, local09
01958     03 26 66 F0 | 	shl	local05, #3
0195c     54 00 00 FF 
01960     E0 E4 05 F1 | 	add	objptr, ##43232
01964     F2 26 02 F1 | 	add	local05, objptr
01968     13 13 02 FB | 	rdlong	arg01, local05
0196c     54 00 00 FF 
01970     E0 E4 85 F1 | 	sub	objptr, ##43232
01974     09 2B 02 F6 | 	mov	local07, arg01
01978                 | LR__0078
01978     15 FB C9 FA | 	rdbyte	result1, local07 wz
0197c     01 2A 06 51 |  if_ne	add	local07, #1
01980     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
01984     09 2B 8A F1 | 	sub	local07, arg01 wz
01988     C4 00 90 5D |  if_ne	jmp	#LR__0082
0198c                 | '     if i=k-1 then k-=1  :  exit
0198c     1D 1F 02 F6 | 	mov	local01, local15
01990     01 1E 86 F1 | 	sub	local01, #1
01994     0F 23 0A F2 | 	cmp	local03, local01 wz
01998     01 3A 86 A1 |  if_e	sub	local15, #1
0199c     C4 00 90 AD |  if_e	jmp	#LR__0084
019a0                 | '     if i<k-1 then 
019a0     1D 1F 02 F6 | 	mov	local01, local15
019a4     01 1E 86 F1 | 	sub	local01, #1
019a8     0F 23 52 F2 | 	cmps	local03, local01 wc
019ac     A0 00 90 3D |  if_ae	jmp	#LR__0081
019b0                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019b0     11 39 02 F6 | 	mov	local14, local03
019b4     1D 57 02 F6 | 	mov	local29, local15
019b8     01 56 86 F1 | 	sub	local29, #1
019bc                 | LR__0079
019bc     2B 39 52 F2 | 	cmps	local14, local29 wc
019c0     80 00 90 3D |  if_ae	jmp	#LR__0080
019c4     1C 27 02 F6 | 	mov	local05, local14
019c8     01 26 06 F1 | 	add	local05, #1
019cc     03 26 66 F0 | 	shl	local05, #3
019d0     54 00 00 FF 
019d4     E0 E4 05 F1 | 	add	objptr, ##43232
019d8     F2 26 02 F1 | 	add	local05, objptr
019dc     13 1F 02 FB | 	rdlong	local01, local05
019e0     1C 29 02 F6 | 	mov	local06, local14
019e4     01 28 06 F1 | 	add	local06, #1
019e8     03 28 66 F0 | 	shl	local06, #3
019ec     F2 28 02 F1 | 	add	local06, objptr
019f0     04 28 06 F1 | 	add	local06, #4
019f4     14 25 02 FB | 	rdlong	local04, local06
019f8     1C 2F 02 F6 | 	mov	local09, local14
019fc     17 29 02 F6 | 	mov	local06, local09
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 32 02 F6 | 	mov	local11, objptr
01a08     F2 28 02 F1 | 	add	local06, objptr
01a0c     14 1F 62 FC | 	wrlong	local01, local06
01a10     1C 31 02 F6 | 	mov	local10, local14
01a14     18 37 02 F6 | 	mov	local13, local10
01a18     1B 35 02 F6 | 	mov	local12, local13
01a1c     03 34 66 F0 | 	shl	local12, #3
01a20     F2 4A 02 F6 | 	mov	local23, objptr
01a24     F2 34 02 F1 | 	add	local12, objptr
01a28     04 34 06 F1 | 	add	local12, #4
01a2c     1A 25 62 FC | 	wrlong	local04, local12
01a30     04 34 86 F1 | 	sub	local12, #4
01a34     01 38 06 F1 | 	add	local14, #1
01a38     54 00 00 FF 
01a3c     E0 E4 85 F1 | 	sub	objptr, ##43232
01a40     78 FF 9F FD | 	jmp	#LR__0079
01a44                 | LR__0080
01a44     01 3A 86 F1 | 	sub	local15, #1
01a48                 | '       if i>0 then i-=1 
01a48     01 22 56 F2 | 	cmps	local03, #1 wc
01a4c     01 22 86 31 |  if_ae	sub	local03, #1
01a50                 | LR__0081
01a50                 | LR__0082
01a50     01 22 06 F1 | 	add	local03, #1
01a54     1D 1F 02 F6 | 	mov	local01, local15
01a58     01 1E 86 F1 | 	sub	local01, #1
01a5c     0F 23 5A F2 | 	cmps	local03, local01 wcz
01a60     EC FE 9F ED |  if_be	jmp	#LR__0077
01a64                 | LR__0083
01a64                 | LR__0084
01a64                 | ' 
01a64                 | ' ' 1g: lowercase all that is not a string
01a64                 | ' 
01a64                 | ' for j=0 to k-1
01a64     00 38 06 F6 | 	mov	local14, #0
01a68     1D 59 02 F6 | 	mov	local30, local15
01a6c                 | LR__0085
01a6c     2C 39 52 F2 | 	cmps	local14, local30 wc
01a70     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a74                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a74     1C 27 02 F6 | 	mov	local05, local14
01a78     03 26 66 F0 | 	shl	local05, #3
01a7c     54 00 00 FF 
01a80     E0 E4 05 F1 | 	add	objptr, ##43232
01a84     F2 26 02 F1 | 	add	local05, objptr
01a88     13 13 02 FB | 	rdlong	arg01, local05
01a8c     01 14 06 F6 | 	mov	arg02, #1
01a90     54 00 00 FF 
01a94     E0 E4 85 F1 | 	sub	objptr, ##43232
01a98     4C 93 B1 FD | 	call	#__system__Left_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     41 01 00 FF 
01aa4     AB 15 06 F6 | 	mov	arg02, ##@LR__4308
01aa8     54 73 B1 FD | 	call	#__system___string_cmp
01aac     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab0     40 00 90 5D |  if_ne	jmp	#LR__0086
01ab4     1C 29 02 F6 | 	mov	local06, local14
01ab8     03 28 66 F0 | 	shl	local06, #3
01abc     54 00 00 FF 
01ac0     E0 E4 05 F1 | 	add	objptr, ##43232
01ac4     F2 28 02 F1 | 	add	local06, objptr
01ac8     14 13 02 FB | 	rdlong	arg01, local06
01acc     01 14 06 F6 | 	mov	arg02, #1
01ad0     54 00 00 FF 
01ad4     E0 E4 85 F1 | 	sub	objptr, ##43232
01ad8     94 93 B1 FD | 	call	#__system__Right_S
01adc     FD 12 02 F6 | 	mov	arg01, result1
01ae0     41 01 00 FF 
01ae4     AD 15 06 F6 | 	mov	arg02, ##@LR__4309
01ae8     14 73 B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     38 00 90 AD |  if_e	jmp	#LR__0087
01af4                 | LR__0086
01af4     1C 2F 02 F6 | 	mov	local09, local14
01af8     03 2E 66 F0 | 	shl	local09, #3
01afc     54 00 00 FF 
01b00     E0 E4 05 F1 | 	add	objptr, ##43232
01b04     F2 2E 02 F1 | 	add	local09, objptr
01b08     1C 37 02 F6 | 	mov	local13, local14
01b0c     03 36 66 F0 | 	shl	local13, #3
01b10     F2 34 02 F6 | 	mov	local12, objptr
01b14     F2 36 02 F1 | 	add	local13, objptr
01b18     1B 13 02 FB | 	rdlong	arg01, local13
01b1c     54 00 00 FF 
01b20     E0 E4 85 F1 | 	sub	objptr, ##43232
01b24     74 95 B1 FD | 	call	#__system__LCase_S
01b28     17 FB 61 FC | 	wrlong	result1, local09
01b2c                 | LR__0087
01b2c     01 38 06 F1 | 	add	local14, #1
01b30     38 FF 9F FD | 	jmp	#LR__0085
01b34                 | LR__0088
01b34                 | ' 
01b34                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b34                 | ' 
01b34                 | ' for i=0 to k: lparts(i).token=-1: next i
01b34     00 22 06 F6 | 	mov	local03, #0
01b38     1D 5B 02 F6 | 	mov	local31, local15
01b3c     01 5A 06 F1 | 	add	local31, #1
01b40     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b44                 | LR__0089
01b44     2D 23 52 F2 | 	cmps	local03, local31 wc
01b48     30 00 90 3D |  if_ae	jmp	#LR__0091
01b4c     11 2F 02 F6 | 	mov	local09, local03
01b50     03 2E 66 F0 | 	shl	local09, #3
01b54     54 00 00 FF 
01b58     E0 E4 05 F1 | 	add	objptr, ##43232
01b5c     F2 2E 02 F1 | 	add	local09, objptr
01b60     04 2E 06 F1 | 	add	local09, #4
01b64     FF FF FF FF 
01b68     17 FF 6B FC | 	wrlong	##-1, local09
01b6c     01 22 06 F1 | 	add	local03, #1
01b70     54 00 00 FF 
01b74     E0 E4 85 F1 | 	sub	objptr, ##43232
01b78     C8 FF 9F FD | 	jmp	#LR__0089
01b7c                 | LR__0090
01b7c                 | LR__0091
01b7c                 | ' 
01b7c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b7c                 | ' 
01b7c                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b7c     54 00 00 FF 
01b80     E0 E4 05 F1 | 	add	objptr, ##43232
01b84     F2 12 02 FB | 	rdlong	arg01, objptr
01b88     54 00 00 FF 
01b8c     E0 E4 85 F1 | 	sub	objptr, ##43232
01b90     09 2B 02 F6 | 	mov	local07, arg01
01b94     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01b98                 | LR__0092
01b98     15 FB C9 FA | 	rdbyte	result1, local07 wz
01b9c     01 2A 06 51 |  if_ne	add	local07, #1
01ba0     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01ba4                 | LR__0093
01ba4     09 2B 8A F1 | 	sub	local07, arg01 wz
01ba8     98 16 90 AD |  if_e	jmp	#LR__0148
01bac                 | ' 
01bac                 | ' 
01bac                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bac     54 00 00 FF 
01bb0     E0 E4 05 F1 | 	add	objptr, ##43232
01bb4     F2 12 02 FB | 	rdlong	arg01, objptr
01bb8     54 00 00 FF 
01bbc     E0 E4 85 F1 | 	sub	objptr, ##43232
01bc0     B0 2E B0 FD | 	call	#_isdec
01bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc8     7A 00 00 5F 
01bcc     B4 E5 05 51 |  if_ne	add	objptr, ##62900
01bd0     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bd4     7A 00 00 FF 
01bd8     B4 E5 E5 F3 | 	sumnz	objptr, ##62900
01bdc     F2 00 68 AC |  if_e	wrlong	#0, objptr
01be0     7A 00 00 AF 
01be4     B4 E5 85 A1 |  if_e	sub	objptr, ##62900
01be8     7A 00 00 FF 
01bec     B4 E5 05 F1 | 	add	objptr, ##62900
01bf0     F2 26 02 FB | 	rdlong	local05, objptr
01bf4     03 26 66 F0 | 	shl	local05, #3
01bf8     26 00 00 FF 
01bfc     D4 E4 85 F1 | 	sub	objptr, ##19668
01c00     F2 26 02 F1 | 	add	local05, objptr
01c04     13 33 02 FB | 	rdlong	local11, local05
01c08     26 00 00 FF 
01c0c     D8 E4 05 F1 | 	add	objptr, ##19672
01c10     F2 32 62 FC | 	wrlong	local11, objptr
01c14     04 E4 85 F1 | 	sub	objptr, #4
01c18     F2 32 02 FB | 	rdlong	local11, objptr
01c1c     03 32 66 F0 | 	shl	local11, #3
01c20     26 00 00 FF 
01c24     D4 E4 85 F1 | 	sub	objptr, ##19668
01c28     F2 30 02 F6 | 	mov	local10, objptr
01c2c     F2 32 02 F1 | 	add	local11, objptr
01c30     19 15 02 FB | 	rdlong	arg02, local11
01c34     41 01 00 FF 
01c38     AF 17 06 F6 | 	mov	arg03, ##@LR__4310
01c3c     01 12 06 F6 | 	mov	arg01, #1
01c40     54 00 00 FF 
01c44     E0 E4 85 F1 | 	sub	objptr, ##43232
01c48     88 96 B1 FD | 	call	#__system__Instr
01c4c     7A 00 00 FF 
01c50     BC E5 05 F1 | 	add	objptr, ##62908
01c54     F2 FA 61 FC | 	wrlong	result1, objptr
01c58                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c58     FD 1E 02 F6 | 	mov	local01, result1
01c5c     7A 00 00 FF 
01c60     BC E5 85 F1 | 	sub	objptr, ##62908
01c64     01 1E 56 F2 | 	cmps	local01, #1 wc
01c68     DC 01 90 CD |  if_b	jmp	#LR__0100
01c6c     7A 00 00 FF 
01c70     B4 E5 05 F1 | 	add	objptr, ##62900
01c74     F2 30 02 FB | 	rdlong	local10, objptr
01c78     03 30 66 F0 | 	shl	local10, #3
01c7c     26 00 00 FF 
01c80     D4 E4 85 F1 | 	sub	objptr, ##19668
01c84     F2 36 02 F6 | 	mov	local13, objptr
01c88     F2 30 02 F1 | 	add	local10, objptr
01c8c     18 13 02 FB | 	rdlong	arg01, local10
01c90     54 00 00 FF 
01c94     E0 E4 85 F1 | 	sub	objptr, ##43232
01c98     09 2B 02 F6 | 	mov	local07, arg01
01c9c     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01ca0                 | LR__0094
01ca0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ca4     01 2A 06 51 |  if_ne	add	local07, #1
01ca8     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cac                 | LR__0095
01cac     09 2B 82 F1 | 	sub	local07, arg01
01cb0     15 2F 02 F6 | 	mov	local09, local07
01cb4     7A 00 00 FF 
01cb8     BC E5 05 F1 | 	add	objptr, ##62908
01cbc     F2 26 02 FB | 	rdlong	local05, objptr
01cc0     7A 00 00 FF 
01cc4     BC E5 85 F1 | 	sub	objptr, ##62908
01cc8     17 27 52 F2 | 	cmps	local05, local09 wc
01ccc     78 01 90 3D |  if_ae	jmp	#LR__0100
01cd0     01 3A 06 F1 | 	add	local15, #1
01cd4                 | '   k+=1
01cd4                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cd4     1D 23 02 F6 | 	mov	local03, local15
01cd8     7A 00 00 FF 
01cdc     B4 E5 05 F1 | 	add	objptr, ##62900
01ce0     F2 5C 02 FB | 	rdlong	local32, objptr
01ce4     01 5C 06 F1 | 	add	local32, #1
01ce8     26 00 00 FF 
01cec     D4 E4 85 F1 | 	sub	objptr, ##19668
01cf0     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01cf4                 | LR__0096
01cf4     11 29 02 F6 | 	mov	local06, local03
01cf8     01 28 86 F1 | 	sub	local06, #1
01cfc     03 28 66 F0 | 	shl	local06, #3
01d00     F2 28 02 F1 | 	add	local06, objptr
01d04     14 25 02 FB | 	rdlong	local04, local06
01d08     11 33 02 F6 | 	mov	local11, local03
01d0c     01 32 86 F1 | 	sub	local11, #1
01d10     03 32 66 F0 | 	shl	local11, #3
01d14     F2 32 02 F1 | 	add	local11, objptr
01d18     04 32 06 F1 | 	add	local11, #4
01d1c     19 2F 02 FB | 	rdlong	local09, local11
01d20     11 33 02 F6 | 	mov	local11, local03
01d24     03 32 66 F0 | 	shl	local11, #3
01d28     F2 32 02 F1 | 	add	local11, objptr
01d2c     19 25 62 FC | 	wrlong	local04, local11
01d30     11 4B 02 F6 | 	mov	local23, local03
01d34     03 4A 66 F0 | 	shl	local23, #3
01d38     F2 4A 02 F1 | 	add	local23, objptr
01d3c     04 4A 06 F1 | 	add	local23, #4
01d40     25 2F 62 FC | 	wrlong	local09, local23
01d44     01 22 86 F1 | 	sub	local03, #1
01d48     2E 23 52 F2 | 	cmps	local03, local32 wc
01d4c     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d50                 | LR__0097
01d50     26 00 00 FF 
01d54     D4 E4 05 F1 | 	add	objptr, ##19668
01d58     F2 4A 02 FB | 	rdlong	local23, objptr
01d5c     25 27 02 F6 | 	mov	local05, local23
01d60     01 26 06 F1 | 	add	local05, #1
01d64     03 26 66 F0 | 	shl	local05, #3
01d68     26 00 00 FF 
01d6c     D4 E4 85 F1 | 	sub	objptr, ##19668
01d70     F2 26 02 F1 | 	add	local05, objptr
01d74     03 4A 66 F0 | 	shl	local23, #3
01d78     F2 4A 02 F1 | 	add	local23, objptr
01d7c     25 33 02 FB | 	rdlong	local11, local23
01d80     26 00 00 FF 
01d84     D4 E4 05 F1 | 	add	objptr, ##19668
01d88     F2 44 02 FB | 	rdlong	local20, objptr
01d8c     22 47 02 F6 | 	mov	local21, local20
01d90     03 46 66 F0 | 	shl	local21, #3
01d94     26 00 00 FF 
01d98     D4 E4 85 F1 | 	sub	objptr, ##19668
01d9c     F2 4C 02 F6 | 	mov	local24, objptr
01da0     F2 46 02 F1 | 	add	local21, objptr
01da4     23 13 02 FB | 	rdlong	arg01, local21
01da8     54 00 00 FF 
01dac     E0 E4 85 F1 | 	sub	objptr, ##43232
01db0     09 2B 02 F6 | 	mov	local07, arg01
01db4     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01db8                 | LR__0098
01db8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dbc     01 2A 06 51 |  if_ne	add	local07, #1
01dc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01dc4                 | LR__0099
01dc4     09 2B 82 F1 | 	sub	local07, arg01
01dc8     15 15 02 F6 | 	mov	arg02, local07
01dcc     7A 00 00 FF 
01dd0     BC E5 05 F1 | 	add	objptr, ##62908
01dd4     F2 4A 02 FB | 	rdlong	local23, objptr
01dd8     7A 00 00 FF 
01ddc     BC E5 85 F1 | 	sub	objptr, ##62908
01de0     25 15 82 F1 | 	sub	arg02, local23
01de4     19 13 02 F6 | 	mov	arg01, local11
01de8     84 90 B1 FD | 	call	#__system__Right_S
01dec     13 FB 61 FC | 	wrlong	result1, local05
01df0     7A 00 00 FF 
01df4     B4 E5 05 F1 | 	add	objptr, ##62900
01df8     F2 34 02 FB | 	rdlong	local12, objptr
01dfc     1A 27 02 F6 | 	mov	local05, local12
01e00     03 26 66 F0 | 	shl	local05, #3
01e04     26 00 00 FF 
01e08     D4 E4 85 F1 | 	sub	objptr, ##19668
01e0c     F2 26 02 F1 | 	add	local05, objptr
01e10     1A 4B 02 F6 | 	mov	local23, local12
01e14     03 4A 66 F0 | 	shl	local23, #3
01e18     F2 42 02 F6 | 	mov	local19, objptr
01e1c     F2 4A 02 F1 | 	add	local23, objptr
01e20     25 13 02 FB | 	rdlong	arg01, local23
01e24     26 00 00 FF 
01e28     DC E4 05 F1 | 	add	objptr, ##19676
01e2c     F2 36 02 FB | 	rdlong	local13, objptr
01e30     7A 00 00 FF 
01e34     BC E5 85 F1 | 	sub	objptr, ##62908
01e38     1B 31 02 F6 | 	mov	local10, local13
01e3c     18 15 02 F6 | 	mov	arg02, local10
01e40     A4 8F B1 FD | 	call	#__system__Left_S
01e44     13 FB 61 FC | 	wrlong	result1, local05
01e48                 | LR__0100
01e48                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e48     7A 00 00 FF 
01e4c     B4 E5 05 F1 | 	add	objptr, ##62900
01e50     F2 28 02 FB | 	rdlong	local06, objptr
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     26 00 00 FF 
01e5c     D4 E4 85 F1 | 	sub	objptr, ##19668
01e60     F2 28 02 F1 | 	add	local06, objptr
01e64     14 13 02 FB | 	rdlong	arg01, local06
01e68     01 14 06 F6 | 	mov	arg02, #1
01e6c     54 00 00 FF 
01e70     E0 E4 85 F1 | 	sub	objptr, ##43232
01e74     70 8F B1 FD | 	call	#__system__Left_S
01e78     FD 12 02 F6 | 	mov	arg01, result1
01e7c     41 01 00 FF 
01e80     B1 15 06 F6 | 	mov	arg02, ##@LR__4311
01e84     78 6F B1 FD | 	call	#__system___string_cmp
01e88     00 FA 0D F2 | 	cmp	result1, #0 wz
01e8c     9C 01 90 5D |  if_ne	jmp	#LR__0107
01e90     7A 00 00 FF 
01e94     B4 E5 05 F1 | 	add	objptr, ##62900
01e98     F2 32 02 FB | 	rdlong	local11, objptr
01e9c     03 32 66 F0 | 	shl	local11, #3
01ea0     26 00 00 FF 
01ea4     D4 E4 85 F1 | 	sub	objptr, ##19668
01ea8     F2 30 02 F6 | 	mov	local10, objptr
01eac     F2 32 02 F1 | 	add	local11, objptr
01eb0     19 13 02 FB | 	rdlong	arg01, local11
01eb4     54 00 00 FF 
01eb8     E0 E4 85 F1 | 	sub	objptr, ##43232
01ebc     09 2B 02 F6 | 	mov	local07, arg01
01ec0     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ec4                 | LR__0101
01ec4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ec8     01 2A 06 51 |  if_ne	add	local07, #1
01ecc     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ed0                 | LR__0102
01ed0     09 2B 82 F1 | 	sub	local07, arg01
01ed4     02 2A 56 F2 | 	cmps	local07, #2 wc
01ed8     50 01 90 CD |  if_b	jmp	#LR__0107
01edc     01 3A 06 F1 | 	add	local15, #1
01ee0                 | '   k+=1
01ee0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ee0     1D 23 02 F6 | 	mov	local03, local15
01ee4     7A 00 00 FF 
01ee8     B4 E5 05 F1 | 	add	objptr, ##62900
01eec     F2 5E 02 FB | 	rdlong	local33, objptr
01ef0     01 5E 06 F1 | 	add	local33, #1
01ef4     26 00 00 FF 
01ef8     D4 E4 85 F1 | 	sub	objptr, ##19668
01efc     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f00                 | LR__0103
01f00     11 29 02 F6 | 	mov	local06, local03
01f04     01 28 86 F1 | 	sub	local06, #1
01f08     03 28 66 F0 | 	shl	local06, #3
01f0c     F2 28 02 F1 | 	add	local06, objptr
01f10     14 25 02 FB | 	rdlong	local04, local06
01f14     11 33 02 F6 | 	mov	local11, local03
01f18     01 32 86 F1 | 	sub	local11, #1
01f1c     03 32 66 F0 | 	shl	local11, #3
01f20     F2 32 02 F1 | 	add	local11, objptr
01f24     04 32 06 F1 | 	add	local11, #4
01f28     19 2F 02 FB | 	rdlong	local09, local11
01f2c     11 33 02 F6 | 	mov	local11, local03
01f30     03 32 66 F0 | 	shl	local11, #3
01f34     F2 32 02 F1 | 	add	local11, objptr
01f38     19 25 62 FC | 	wrlong	local04, local11
01f3c     11 4B 02 F6 | 	mov	local23, local03
01f40     03 4A 66 F0 | 	shl	local23, #3
01f44     F2 4A 02 F1 | 	add	local23, objptr
01f48     04 4A 06 F1 | 	add	local23, #4
01f4c     25 2F 62 FC | 	wrlong	local09, local23
01f50     01 22 86 F1 | 	sub	local03, #1
01f54     2F 23 52 F2 | 	cmps	local03, local33 wc
01f58     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f5c                 | LR__0104
01f5c     26 00 00 FF 
01f60     D4 E4 05 F1 | 	add	objptr, ##19668
01f64     F2 4A 02 FB | 	rdlong	local23, objptr
01f68     25 27 02 F6 | 	mov	local05, local23
01f6c     01 26 06 F1 | 	add	local05, #1
01f70     03 26 66 F0 | 	shl	local05, #3
01f74     26 00 00 FF 
01f78     D4 E4 85 F1 | 	sub	objptr, ##19668
01f7c     F2 26 02 F1 | 	add	local05, objptr
01f80     03 4A 66 F0 | 	shl	local23, #3
01f84     F2 4A 02 F1 | 	add	local23, objptr
01f88     25 33 02 FB | 	rdlong	local11, local23
01f8c     26 00 00 FF 
01f90     D4 E4 05 F1 | 	add	objptr, ##19668
01f94     F2 42 02 FB | 	rdlong	local19, objptr
01f98     21 4B 02 F6 | 	mov	local23, local19
01f9c     25 45 02 F6 | 	mov	local20, local23
01fa0     22 47 02 F6 | 	mov	local21, local20
01fa4     03 46 66 F0 | 	shl	local21, #3
01fa8     26 00 00 FF 
01fac     D4 E4 85 F1 | 	sub	objptr, ##19668
01fb0     F2 4C 02 F6 | 	mov	local24, objptr
01fb4     F2 46 02 F1 | 	add	local21, objptr
01fb8     23 13 02 FB | 	rdlong	arg01, local21
01fbc     54 00 00 FF 
01fc0     E0 E4 85 F1 | 	sub	objptr, ##43232
01fc4     09 2B 02 F6 | 	mov	local07, arg01
01fc8     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fcc                 | LR__0105
01fcc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fd0     01 2A 06 51 |  if_ne	add	local07, #1
01fd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01fd8                 | LR__0106
01fd8     09 2B 82 F1 | 	sub	local07, arg01
01fdc     15 35 02 F6 | 	mov	local12, local07
01fe0     1A 37 02 F6 | 	mov	local13, local12
01fe4     01 36 86 F1 | 	sub	local13, #1
01fe8     1B 31 02 F6 | 	mov	local10, local13
01fec     19 13 02 F6 | 	mov	arg01, local11
01ff0     18 15 02 F6 | 	mov	arg02, local10
01ff4     78 8E B1 FD | 	call	#__system__Right_S
01ff8     13 FB 61 FC | 	wrlong	result1, local05
01ffc     7A 00 00 FF 
02000     B4 E5 05 F1 | 	add	objptr, ##62900
02004     F2 26 02 FB | 	rdlong	local05, objptr
02008     03 26 66 F0 | 	shl	local05, #3
0200c     26 00 00 FF 
02010     D4 E4 85 F1 | 	sub	objptr, ##19668
02014     F2 26 02 F1 | 	add	local05, objptr
02018     41 01 00 FF 
0201c     B3 33 06 F6 | 	mov	local11, ##@LR__4312
02020     13 33 62 FC | 	wrlong	local11, local05
02024     54 00 00 FF 
02028     E0 E4 85 F1 | 	sub	objptr, ##43232
0202c                 | LR__0107
0202c     7A 00 00 FF 
02030     B4 E5 05 F1 | 	add	objptr, ##62900
02034     F2 26 02 FB | 	rdlong	local05, objptr
02038     03 26 66 F0 | 	shl	local05, #3
0203c     26 00 00 FF 
02040     D4 E4 85 F1 | 	sub	objptr, ##19668
02044     F2 26 02 F1 | 	add	local05, objptr
02048     13 33 02 FB | 	rdlong	local11, local05
0204c     26 00 00 FF 
02050     D8 E4 05 F1 | 	add	objptr, ##19672
02054     F2 32 62 FC | 	wrlong	local11, objptr
02058                 | ' 
02058                 | ' ' process the case when simple load or save is called without ""
02058                 | ' 
02058                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") andalso lparts(addptr+1).token=token_name then 
02058     7A 00 00 FF 
0205c     B8 E5 85 F1 | 	sub	objptr, ##62904
02060     41 01 00 FF 
02064     B5 15 06 F6 | 	mov	arg02, ##@LR__4313
02068     19 13 02 F6 | 	mov	arg01, local11
0206c     90 6D B1 FD | 	call	#__system___string_cmp
02070     00 FA 0D F2 | 	cmp	result1, #0 wz
02074     50 00 90 AD |  if_e	jmp	#LR__0108
02078     7A 00 00 FF 
0207c     B8 E5 05 F1 | 	add	objptr, ##62904
02080     F2 12 02 FB | 	rdlong	arg01, objptr
02084     7A 00 00 FF 
02088     B8 E5 85 F1 | 	sub	objptr, ##62904
0208c     41 01 00 FF 
02090     BB 15 06 F6 | 	mov	arg02, ##@LR__4314
02094     68 6D B1 FD | 	call	#__system___string_cmp
02098     00 FA 0D F2 | 	cmp	result1, #0 wz
0209c     28 00 90 AD |  if_e	jmp	#LR__0108
020a0     7A 00 00 FF 
020a4     B8 E5 05 F1 | 	add	objptr, ##62904
020a8     F2 12 02 FB | 	rdlong	arg01, objptr
020ac     7A 00 00 FF 
020b0     B8 E5 85 F1 | 	sub	objptr, ##62904
020b4     41 01 00 FF 
020b8     C2 15 06 F6 | 	mov	arg02, ##@LR__4315
020bc     40 6D B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     94 01 90 5D |  if_ne	jmp	#LR__0111
020c8                 | LR__0108
020c8     7A 00 00 FF 
020cc     B4 E5 05 F1 | 	add	objptr, ##62900
020d0     F2 32 02 FB | 	rdlong	local11, objptr
020d4     01 32 06 F1 | 	add	local11, #1
020d8     19 31 02 F6 | 	mov	local10, local11
020dc     03 30 66 F0 | 	shl	local10, #3
020e0     26 00 00 FF 
020e4     D4 E4 85 F1 | 	sub	objptr, ##19668
020e8     F2 36 02 F6 | 	mov	local13, objptr
020ec     F2 30 02 F1 | 	add	local10, objptr
020f0     04 30 06 F1 | 	add	local10, #4
020f4     18 4B 02 FB | 	rdlong	local23, local10
020f8     04 30 86 F1 | 	sub	local10, #4
020fc     25 35 02 F6 | 	mov	local12, local23
02100     01 00 00 FF 
02104     04 34 0E F2 | 	cmp	local12, ##516 wz
02108     54 00 00 FF 
0210c     E0 E4 85 F1 | 	sub	objptr, ##43232
02110     48 01 90 5D |  if_ne	jmp	#LR__0111
02114                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
02114     7A 00 00 FF 
02118     B4 E5 05 F1 | 	add	objptr, ##62900
0211c     F2 28 02 FB | 	rdlong	local06, objptr
02120     01 28 06 F1 | 	add	local06, #1
02124     03 28 66 F0 | 	shl	local06, #3
02128     26 00 00 FF 
0212c     D4 E4 85 F1 | 	sub	objptr, ##19668
02130     F2 28 02 F1 | 	add	local06, objptr
02134     14 13 02 FB | 	rdlong	arg01, local06
02138     41 01 00 FF 
0213c     C8 15 06 F6 | 	mov	arg02, ##@LR__4316
02140     54 00 00 FF 
02144     E0 E4 85 F1 | 	sub	objptr, ##43232
02148     B4 6C B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     60 00 90 5D |  if_ne	jmp	#LR__0109
02154     7A 00 00 FF 
02158     B4 E5 05 F1 | 	add	objptr, ##62900
0215c     F2 26 02 FB | 	rdlong	local05, objptr
02160     01 26 06 F1 | 	add	local05, #1
02164     03 26 66 F0 | 	shl	local05, #3
02168     26 00 00 FF 
0216c     D4 E4 85 F1 | 	sub	objptr, ##19668
02170     F2 26 02 F1 | 	add	local05, objptr
02174     41 01 00 FF 
02178     CB 33 06 F6 | 	mov	local11, ##@LR__4317
0217c     13 33 62 FC | 	wrlong	local11, local05
02180     26 00 00 FF 
02184     D4 E4 05 F1 | 	add	objptr, ##19668
02188     F2 26 02 FB | 	rdlong	local05, objptr
0218c     01 26 06 F1 | 	add	local05, #1
02190     03 26 66 F0 | 	shl	local05, #3
02194     26 00 00 FF 
02198     D4 E4 85 F1 | 	sub	objptr, ##19668
0219c     F2 26 02 F1 | 	add	local05, objptr
021a0     04 26 06 F1 | 	add	local05, #4
021a4     01 00 80 FF 
021a8     13 01 68 FC | 	wrlong	##512, local05
021ac     54 00 00 FF 
021b0     E0 E4 85 F1 | 	sub	objptr, ##43232
021b4                 | LR__0109
021b4                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
021b4     7A 00 00 FF 
021b8     B4 E5 05 F1 | 	add	objptr, ##62900
021bc     F2 28 02 FB | 	rdlong	local06, objptr
021c0     01 28 06 F1 | 	add	local06, #1
021c4     03 28 66 F0 | 	shl	local06, #3
021c8     26 00 00 FF 
021cc     D4 E4 85 F1 | 	sub	objptr, ##19668
021d0     F2 32 02 F6 | 	mov	local11, objptr
021d4     F2 28 02 F1 | 	add	local06, objptr
021d8     14 13 02 FB | 	rdlong	arg01, local06
021dc     41 01 00 FF 
021e0     CD 15 06 F6 | 	mov	arg02, ##@LR__4318
021e4     54 00 00 FF 
021e8     E0 E4 85 F1 | 	sub	objptr, ##43232
021ec     10 6C B1 FD | 	call	#__system___string_cmp
021f0     00 FA 0D F2 | 	cmp	result1, #0 wz
021f4     64 00 90 5D |  if_ne	jmp	#LR__0110
021f8     7A 00 00 FF 
021fc     B4 E5 05 F1 | 	add	objptr, ##62900
02200     F2 26 02 FB | 	rdlong	local05, objptr
02204     01 26 06 F1 | 	add	local05, #1
02208     03 26 66 F0 | 	shl	local05, #3
0220c     26 00 00 FF 
02210     D4 E4 85 F1 | 	sub	objptr, ##19668
02214     F2 26 02 F1 | 	add	local05, objptr
02218     41 01 00 FF 
0221c     D1 33 06 F6 | 	mov	local11, ##@LR__4319
02220     13 33 62 FC | 	wrlong	local11, local05
02224     26 00 00 FF 
02228     D4 E4 05 F1 | 	add	objptr, ##19668
0222c     F2 26 02 FB | 	rdlong	local05, objptr
02230     01 26 06 F1 | 	add	local05, #1
02234     03 26 66 F0 | 	shl	local05, #3
02238     26 00 00 FF 
0223c     D4 E4 85 F1 | 	sub	objptr, ##19668
02240     F2 26 02 F1 | 	add	local05, objptr
02244     09 32 C6 F9 | 	decod	local11, #9
02248     04 26 06 F1 | 	add	local05, #4
0224c     01 00 80 FF 
02250     13 01 68 FC | 	wrlong	##512, local05
02254     54 00 00 FF 
02258     E0 E4 85 F1 | 	sub	objptr, ##43232
0225c                 | LR__0110
0225c                 | LR__0111
0225c                 | ' if (lp$="mode" orelse lp$="m.") then 
0225c     7A 00 00 FF 
02260     B8 E5 05 F1 | 	add	objptr, ##62904
02264     F2 12 02 FB | 	rdlong	arg01, objptr
02268     7A 00 00 FF 
0226c     B8 E5 85 F1 | 	sub	objptr, ##62904
02270     41 01 00 FF 
02274     D3 15 06 F6 | 	mov	arg02, ##@LR__4320
02278     84 6B B1 FD | 	call	#__system___string_cmp
0227c     00 FA 0D F2 | 	cmp	result1, #0 wz
02280     28 00 90 AD |  if_e	jmp	#LR__0112
02284     7A 00 00 FF 
02288     B8 E5 05 F1 | 	add	objptr, ##62904
0228c     F2 12 02 FB | 	rdlong	arg01, objptr
02290     7A 00 00 FF 
02294     B8 E5 85 F1 | 	sub	objptr, ##62904
02298     41 01 00 FF 
0229c     D8 15 06 F6 | 	mov	arg02, ##@LR__4321
022a0     5C 6B B1 FD | 	call	#__system___string_cmp
022a4     00 FA 0D F2 | 	cmp	result1, #0 wz
022a8     48 02 90 5D |  if_ne	jmp	#LR__0118
022ac                 | LR__0112
022ac                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
022ac     7A 00 00 FF 
022b0     B4 E5 05 F1 | 	add	objptr, ##62900
022b4     F2 28 02 FB | 	rdlong	local06, objptr
022b8     01 28 06 F1 | 	add	local06, #1
022bc     03 28 66 F0 | 	shl	local06, #3
022c0     26 00 00 FF 
022c4     D4 E4 85 F1 | 	sub	objptr, ##19668
022c8     F2 28 02 F1 | 	add	local06, objptr
022cc     14 13 02 FB | 	rdlong	arg01, local06
022d0     41 01 00 FF 
022d4     DB 15 06 F6 | 	mov	arg02, ##@LR__4322
022d8     54 00 00 FF 
022dc     E0 E4 85 F1 | 	sub	objptr, ##43232
022e0     1C 6B B1 FD | 	call	#__system___string_cmp
022e4     00 FA 0D F2 | 	cmp	result1, #0 wz
022e8     34 00 90 5D |  if_ne	jmp	#LR__0113
022ec     7A 00 00 FF 
022f0     B4 E5 05 F1 | 	add	objptr, ##62900
022f4     F2 26 02 FB | 	rdlong	local05, objptr
022f8     01 26 06 F1 | 	add	local05, #1
022fc     03 26 66 F0 | 	shl	local05, #3
02300     26 00 00 FF 
02304     D4 E4 85 F1 | 	sub	objptr, ##19668
02308     F2 26 02 F1 | 	add	local05, objptr
0230c     41 01 00 FF 
02310     E1 33 06 F6 | 	mov	local11, ##@LR__4323
02314     13 33 62 FC | 	wrlong	local11, local05
02318     54 00 00 FF 
0231c     E0 E4 85 F1 | 	sub	objptr, ##43232
02320                 | LR__0113
02320                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02320     7A 00 00 FF 
02324     B4 E5 05 F1 | 	add	objptr, ##62900
02328     F2 28 02 FB | 	rdlong	local06, objptr
0232c     01 28 06 F1 | 	add	local06, #1
02330     03 28 66 F0 | 	shl	local06, #3
02334     26 00 00 FF 
02338     D4 E4 85 F1 | 	sub	objptr, ##19668
0233c     F2 28 02 F1 | 	add	local06, objptr
02340     14 13 02 FB | 	rdlong	arg01, local06
02344     41 01 00 FF 
02348     E3 15 06 F6 | 	mov	arg02, ##@LR__4324
0234c     54 00 00 FF 
02350     E0 E4 85 F1 | 	sub	objptr, ##43232
02354     A8 6A B1 FD | 	call	#__system___string_cmp
02358     00 FA 0D F2 | 	cmp	result1, #0 wz
0235c     34 00 90 5D |  if_ne	jmp	#LR__0114
02360     7A 00 00 FF 
02364     B4 E5 05 F1 | 	add	objptr, ##62900
02368     F2 26 02 FB | 	rdlong	local05, objptr
0236c     01 26 06 F1 | 	add	local05, #1
02370     03 26 66 F0 | 	shl	local05, #3
02374     26 00 00 FF 
02378     D4 E4 85 F1 | 	sub	objptr, ##19668
0237c     F2 26 02 F1 | 	add	local05, objptr
02380     41 01 00 FF 
02384     EC 33 06 F6 | 	mov	local11, ##@LR__4325
02388     13 33 62 FC | 	wrlong	local11, local05
0238c     54 00 00 FF 
02390     E0 E4 85 F1 | 	sub	objptr, ##43232
02394                 | LR__0114
02394                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02394     7A 00 00 FF 
02398     B4 E5 05 F1 | 	add	objptr, ##62900
0239c     F2 28 02 FB | 	rdlong	local06, objptr
023a0     01 28 06 F1 | 	add	local06, #1
023a4     03 28 66 F0 | 	shl	local06, #3
023a8     26 00 00 FF 
023ac     D4 E4 85 F1 | 	sub	objptr, ##19668
023b0     F2 28 02 F1 | 	add	local06, objptr
023b4     14 13 02 FB | 	rdlong	arg01, local06
023b8     41 01 00 FF 
023bc     EE 15 06 F6 | 	mov	arg02, ##@LR__4326
023c0     54 00 00 FF 
023c4     E0 E4 85 F1 | 	sub	objptr, ##43232
023c8     34 6A B1 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     34 00 90 5D |  if_ne	jmp	#LR__0115
023d4     7A 00 00 FF 
023d8     B4 E5 05 F1 | 	add	objptr, ##62900
023dc     F2 26 02 FB | 	rdlong	local05, objptr
023e0     01 26 06 F1 | 	add	local05, #1
023e4     03 26 66 F0 | 	shl	local05, #3
023e8     26 00 00 FF 
023ec     D4 E4 85 F1 | 	sub	objptr, ##19668
023f0     F2 26 02 F1 | 	add	local05, objptr
023f4     41 01 00 FF 
023f8     F7 33 06 F6 | 	mov	local11, ##@LR__4327
023fc     13 33 62 FC | 	wrlong	local11, local05
02400     54 00 00 FF 
02404     E0 E4 85 F1 | 	sub	objptr, ##43232
02408                 | LR__0115
02408                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02408     7A 00 00 FF 
0240c     B4 E5 05 F1 | 	add	objptr, ##62900
02410     F2 28 02 FB | 	rdlong	local06, objptr
02414     01 28 06 F1 | 	add	local06, #1
02418     03 28 66 F0 | 	shl	local06, #3
0241c     26 00 00 FF 
02420     D4 E4 85 F1 | 	sub	objptr, ##19668
02424     F2 28 02 F1 | 	add	local06, objptr
02428     14 13 02 FB | 	rdlong	arg01, local06
0242c     41 01 00 FF 
02430     F9 15 06 F6 | 	mov	arg02, ##@LR__4328
02434     54 00 00 FF 
02438     E0 E4 85 F1 | 	sub	objptr, ##43232
0243c     C0 69 B1 FD | 	call	#__system___string_cmp
02440     00 FA 0D F2 | 	cmp	result1, #0 wz
02444     34 00 90 5D |  if_ne	jmp	#LR__0116
02448     7A 00 00 FF 
0244c     B4 E5 05 F1 | 	add	objptr, ##62900
02450     F2 26 02 FB | 	rdlong	local05, objptr
02454     01 26 06 F1 | 	add	local05, #1
02458     03 26 66 F0 | 	shl	local05, #3
0245c     26 00 00 FF 
02460     D4 E4 85 F1 | 	sub	objptr, ##19668
02464     F2 26 02 F1 | 	add	local05, objptr
02468     42 01 00 FF 
0246c     02 32 06 F6 | 	mov	local11, ##@LR__4329
02470     13 33 62 FC | 	wrlong	local11, local05
02474     54 00 00 FF 
02478     E0 E4 85 F1 | 	sub	objptr, ##43232
0247c                 | LR__0116
0247c                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
0247c     7A 00 00 FF 
02480     B4 E5 05 F1 | 	add	objptr, ##62900
02484     F2 28 02 FB | 	rdlong	local06, objptr
02488     01 28 06 F1 | 	add	local06, #1
0248c     03 28 66 F0 | 	shl	local06, #3
02490     26 00 00 FF 
02494     D4 E4 85 F1 | 	sub	objptr, ##19668
02498     F2 32 02 F6 | 	mov	local11, objptr
0249c     F2 28 02 F1 | 	add	local06, objptr
024a0     14 13 02 FB | 	rdlong	arg01, local06
024a4     42 01 00 FF 
024a8     04 14 06 F6 | 	mov	arg02, ##@LR__4330
024ac     54 00 00 FF 
024b0     E0 E4 85 F1 | 	sub	objptr, ##43232
024b4     48 69 B1 FD | 	call	#__system___string_cmp
024b8     00 FA 0D F2 | 	cmp	result1, #0 wz
024bc     34 00 90 5D |  if_ne	jmp	#LR__0117
024c0     7A 00 00 FF 
024c4     B4 E5 05 F1 | 	add	objptr, ##62900
024c8     F2 26 02 FB | 	rdlong	local05, objptr
024cc     01 26 06 F1 | 	add	local05, #1
024d0     03 26 66 F0 | 	shl	local05, #3
024d4     26 00 00 FF 
024d8     D4 E4 85 F1 | 	sub	objptr, ##19668
024dc     F2 26 02 F1 | 	add	local05, objptr
024e0     42 01 00 FF 
024e4     07 32 06 F6 | 	mov	local11, ##@LR__4331
024e8     13 33 62 FC | 	wrlong	local11, local05
024ec     54 00 00 FF 
024f0     E0 E4 85 F1 | 	sub	objptr, ##43232
024f4                 | LR__0117
024f4                 | LR__0118
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' ' 2a find part types 
024f4                 | ' 
024f4                 | ' for i=0 to k-1
024f4     00 22 06 F6 | 	mov	local03, #0
024f8     1D 61 02 F6 | 	mov	local34, local15
024fc                 | LR__0119
024fc     30 23 52 F2 | 	cmps	local03, local34 wc
02500     74 05 90 3D |  if_ae	jmp	#LR__0128
02504     11 2F 02 F6 | 	mov	local09, local03
02508     03 2E 66 F0 | 	shl	local09, #3
0250c     54 00 00 FF 
02510     E0 E4 05 F1 | 	add	objptr, ##43232
02514     F2 2E 02 F1 | 	add	local09, objptr
02518     11 35 02 F6 | 	mov	local12, local03
0251c     03 34 66 F0 | 	shl	local12, #3
02520     F2 4A 02 F6 | 	mov	local23, objptr
02524     F2 34 02 F1 | 	add	local12, objptr
02528     1A 13 02 FB | 	rdlong	arg01, local12
0252c     54 00 00 FF 
02530     E0 E4 85 F1 | 	sub	objptr, ##43232
02534     18 10 B0 FD | 	call	#_isseparator
02538     FD FA E1 F8 | 	getbyte	result1, result1, #0
0253c     04 2E 06 F1 | 	add	local09, #4
02540     17 FB 61 FC | 	wrlong	result1, local09
02544                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02544     11 2F 02 F6 | 	mov	local09, local03
02548     03 2E 66 F0 | 	shl	local09, #3
0254c     54 00 00 FF 
02550     E0 E4 05 F1 | 	add	objptr, ##43232
02554     F2 2E 02 F1 | 	add	local09, objptr
02558     04 2E 06 F1 | 	add	local09, #4
0255c     17 33 02 FB | 	rdlong	local11, local09
02560     01 32 56 F2 | 	cmps	local11, #1 wc
02564     54 00 00 FF 
02568     E0 E4 85 F1 | 	sub	objptr, ##43232
0256c     00 05 90 3D |  if_ae	jmp	#LR__0127
02570     11 2F 02 F6 | 	mov	local09, local03
02574     03 2E 66 F0 | 	shl	local09, #3
02578     54 00 00 FF 
0257c     E0 E4 05 F1 | 	add	objptr, ##43232
02580     F2 2E 02 F1 | 	add	local09, objptr
02584     11 35 02 F6 | 	mov	local12, local03
02588     03 34 66 F0 | 	shl	local12, #3
0258c     F2 4A 02 F6 | 	mov	local23, objptr
02590     F2 34 02 F1 | 	add	local12, objptr
02594     1A 13 02 FB | 	rdlong	arg01, local12
02598     54 00 00 FF 
0259c     E0 E4 85 F1 | 	sub	objptr, ##43232
025a0     CC 0C B0 FD | 	call	#_isoperator
025a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
025a8     04 2E 06 F1 | 	add	local09, #4
025ac     17 FB 61 FC | 	wrlong	result1, local09
025b0                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
025b0     11 2F 02 F6 | 	mov	local09, local03
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     54 00 00 FF 
025bc     E0 E4 05 F1 | 	add	objptr, ##43232
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     04 2E 06 F1 | 	add	local09, #4
025c8     17 33 02 FB | 	rdlong	local11, local09
025cc     01 32 56 F2 | 	cmps	local11, #1 wc
025d0     54 00 00 FF 
025d4     E0 E4 85 F1 | 	sub	objptr, ##43232
025d8     94 04 90 3D |  if_ae	jmp	#LR__0127
025dc     11 2F 02 F6 | 	mov	local09, local03
025e0     03 2E 66 F0 | 	shl	local09, #3
025e4     54 00 00 FF 
025e8     E0 E4 05 F1 | 	add	objptr, ##43232
025ec     F2 2E 02 F1 | 	add	local09, objptr
025f0     11 35 02 F6 | 	mov	local12, local03
025f4     03 34 66 F0 | 	shl	local12, #3
025f8     F2 4A 02 F6 | 	mov	local23, objptr
025fc     F2 34 02 F1 | 	add	local12, objptr
02600     1A 13 02 FB | 	rdlong	arg01, local12
02604     54 00 00 FF 
02608     E0 E4 85 F1 | 	sub	objptr, ##43232
0260c                 | ' 
0260c                 | ' select case s
0260c     42 01 00 FF 
02610     BD 14 06 F6 | 	mov	arg02, ##@LR__4384
02614     E8 67 B1 FD | 	call	#__system___string_cmp
02618     00 FA 0D F2 | 	cmp	result1, #0 wz
0261c     1B FA 05 A6 |  if_e	mov	result1, #27
02620     00 FA 05 56 |  if_ne	mov	result1, #0
02624     FD FA E1 F8 | 	getbyte	result1, result1, #0
02628     04 2E 06 F1 | 	add	local09, #4
0262c     17 FB 61 FC | 	wrlong	result1, local09
02630                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02630     11 2F 02 F6 | 	mov	local09, local03
02634     03 2E 66 F0 | 	shl	local09, #3
02638     54 00 00 FF 
0263c     E0 E4 05 F1 | 	add	objptr, ##43232
02640     F2 2E 02 F1 | 	add	local09, objptr
02644     04 2E 06 F1 | 	add	local09, #4
02648     17 33 02 FB | 	rdlong	local11, local09
0264c     01 32 56 F2 | 	cmps	local11, #1 wc
02650     54 00 00 FF 
02654     E0 E4 85 F1 | 	sub	objptr, ##43232
02658     14 04 90 3D |  if_ae	jmp	#LR__0127
0265c     11 2F 02 F6 | 	mov	local09, local03
02660     03 2E 66 F0 | 	shl	local09, #3
02664     54 00 00 FF 
02668     E0 E4 05 F1 | 	add	objptr, ##43232
0266c     F2 2E 02 F1 | 	add	local09, objptr
02670     11 35 02 F6 | 	mov	local12, local03
02674     03 34 66 F0 | 	shl	local12, #3
02678     F2 4A 02 F6 | 	mov	local23, objptr
0267c     F2 34 02 F1 | 	add	local12, objptr
02680     1A 13 02 FB | 	rdlong	arg01, local12
02684     54 00 00 FF 
02688     E0 E4 85 F1 | 	sub	objptr, ##43232
0268c     C0 10 B0 FD | 	call	#_iscommand
02690     FD FA E1 F8 | 	getbyte	result1, result1, #0
02694     04 2E 06 F1 | 	add	local09, #4
02698     17 FB 61 FC | 	wrlong	result1, local09
0269c                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
0269c     11 2F 02 F6 | 	mov	local09, local03
026a0     03 2E 66 F0 | 	shl	local09, #3
026a4     54 00 00 FF 
026a8     E0 E4 05 F1 | 	add	objptr, ##43232
026ac     F2 2E 02 F1 | 	add	local09, objptr
026b0     04 2E 06 F1 | 	add	local09, #4
026b4     17 33 02 FB | 	rdlong	local11, local09
026b8     01 32 56 F2 | 	cmps	local11, #1 wc
026bc     54 00 00 FF 
026c0     E0 E4 85 F1 | 	sub	objptr, ##43232
026c4     A8 03 90 3D |  if_ae	jmp	#LR__0127
026c8     11 2F 02 F6 | 	mov	local09, local03
026cc     03 2E 66 F0 | 	shl	local09, #3
026d0     54 00 00 FF 
026d4     E0 E4 05 F1 | 	add	objptr, ##43232
026d8     F2 2E 02 F1 | 	add	local09, objptr
026dc     11 31 02 F6 | 	mov	local10, local03
026e0     18 37 02 F6 | 	mov	local13, local10
026e4     1B 35 02 F6 | 	mov	local12, local13
026e8     03 34 66 F0 | 	shl	local12, #3
026ec     F2 4A 02 F6 | 	mov	local23, objptr
026f0     F2 34 02 F1 | 	add	local12, objptr
026f4     1A 13 02 FB | 	rdlong	arg01, local12
026f8     54 00 00 FF 
026fc     E0 E4 85 F1 | 	sub	objptr, ##43232
02700     2C 1A B0 FD | 	call	#_isfunction
02704     FD FA E1 F8 | 	getbyte	result1, result1, #0
02708     04 2E 06 F1 | 	add	local09, #4
0270c     17 FB 61 FC | 	wrlong	result1, local09
02710                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
02710     11 2F 02 F6 | 	mov	local09, local03
02714     03 2E 66 F0 | 	shl	local09, #3
02718     54 00 00 FF 
0271c     E0 E4 05 F1 | 	add	objptr, ##43232
02720     F2 2E 02 F1 | 	add	local09, objptr
02724     04 2E 06 F1 | 	add	local09, #4
02728     17 33 02 FB | 	rdlong	local11, local09
0272c     01 32 56 F2 | 	cmps	local11, #1 wc
02730     54 00 00 FF 
02734     E0 E4 85 F1 | 	sub	objptr, ##43232
02738     34 03 90 3D |  if_ae	jmp	#LR__0127
0273c     11 27 02 F6 | 	mov	local05, local03
02740     03 26 66 F0 | 	shl	local05, #3
02744     54 00 00 FF 
02748     E0 E4 05 F1 | 	add	objptr, ##43232
0274c     F2 26 02 F1 | 	add	local05, objptr
02750     13 13 02 FB | 	rdlong	arg01, local05
02754     54 00 00 FF 
02758     E0 E4 85 F1 | 	sub	objptr, ##43232
0275c     E4 1E B0 FD | 	call	#_isnum
02760     FD 1E 02 F6 | 	mov	local01, result1
02764     7A 00 00 FF 
02768     C0 E5 05 F1 | 	add	objptr, ##62912
0276c     F2 1E 62 FC | 	wrlong	local01, objptr
02770     11 27 02 F6 | 	mov	local05, local03
02774     03 26 66 F0 | 	shl	local05, #3
02778     26 00 00 FF 
0277c     E0 E4 85 F1 | 	sub	objptr, ##19680
02780     F2 26 02 F1 | 	add	local05, objptr
02784     13 13 02 FB | 	rdlong	arg01, local05
02788     54 00 00 FF 
0278c     E0 E4 85 F1 | 	sub	objptr, ##43232
02790     88 21 B0 FD | 	call	#_isint
02794     FD 1E 02 F6 | 	mov	local01, result1
02798     7A 00 00 FF 
0279c     C4 E5 05 F1 | 	add	objptr, ##62916
027a0     F2 1E 62 FC | 	wrlong	local01, objptr
027a4     11 27 02 F6 | 	mov	local05, local03
027a8     03 26 66 F0 | 	shl	local05, #3
027ac     26 00 00 FF 
027b0     E4 E4 85 F1 | 	sub	objptr, ##19684
027b4     F2 28 02 F6 | 	mov	local06, objptr
027b8     F2 26 02 F1 | 	add	local05, objptr
027bc     13 13 02 FB | 	rdlong	arg01, local05
027c0     54 00 00 FF 
027c4     E0 E4 85 F1 | 	sub	objptr, ##43232
027c8     A8 22 B0 FD | 	call	#_isdec
027cc     7A 00 00 FF 
027d0     C8 E5 05 F1 | 	add	objptr, ##62920
027d4     F2 FA 61 FC | 	wrlong	result1, objptr
027d8                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
027d8     08 E4 85 F1 | 	sub	objptr, #8
027dc     F2 1E 0A FB | 	rdlong	local01, objptr wz
027e0     7A 00 00 FF 
027e4     C0 E5 85 F1 | 	sub	objptr, ##62912
027e8     60 00 90 AD |  if_e	jmp	#LR__0120
027ec     7A 00 00 FF 
027f0     C4 E5 05 F1 | 	add	objptr, ##62916
027f4     F2 2E 0A FB | 	rdlong	local09, objptr wz
027f8     7A 00 00 FF 
027fc     C4 E5 85 F1 | 	sub	objptr, ##62916
02800     48 00 90 AD |  if_e	jmp	#LR__0120
02804     7A 00 00 FF 
02808     C8 E5 05 F1 | 	add	objptr, ##62920
0280c     F2 32 0A FB | 	rdlong	local11, objptr wz
02810     7A 00 00 FF 
02814     C8 E5 85 F1 | 	sub	objptr, ##62920
02818     30 00 90 AD |  if_e	jmp	#LR__0120
0281c     11 25 02 F6 | 	mov	local04, local03
02820     12 2F 02 F6 | 	mov	local09, local04
02824     03 2E 66 F0 | 	shl	local09, #3
02828     54 00 00 FF 
0282c     E0 E4 05 F1 | 	add	objptr, ##43232
02830     F2 2E 02 F1 | 	add	local09, objptr
02834     04 2E 06 F1 | 	add	local09, #4
02838     01 00 80 FF 
0283c     17 01 68 FC | 	wrlong	##512, local09
02840     54 00 00 FF 
02844     E0 E4 85 F1 | 	sub	objptr, ##43232
02848     24 02 90 FD | 	jmp	#LR__0127
0284c                 | LR__0120
0284c                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
0284c     7A 00 00 FF 
02850     C0 E5 05 F1 | 	add	objptr, ##62912
02854     F2 1E 0A FB | 	rdlong	local01, objptr wz
02858     7A 00 00 FF 
0285c     C0 E5 85 F1 | 	sub	objptr, ##62912
02860     64 00 90 AD |  if_e	jmp	#LR__0121
02864     7A 00 00 FF 
02868     C4 E5 05 F1 | 	add	objptr, ##62916
0286c     F2 2E 0A FB | 	rdlong	local09, objptr wz
02870     7A 00 00 FF 
02874     C4 E5 85 F1 | 	sub	objptr, ##62916
02878     7A 00 00 5F 
0287c     C8 E5 05 51 |  if_ne	add	objptr, ##62920
02880     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02884     7A 00 00 5F 
02888     C8 E5 85 51 |  if_ne	sub	objptr, ##62920
0288c     19 29 22 56 |  if_ne	not	local06, local11
02890     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02894     30 00 90 AD |  if_e	jmp	#LR__0121
02898     11 25 02 F6 | 	mov	local04, local03
0289c     12 2F 02 F6 | 	mov	local09, local04
028a0     03 2E 66 F0 | 	shl	local09, #3
028a4     54 00 00 FF 
028a8     E0 E4 05 F1 | 	add	objptr, ##43232
028ac     F2 2E 02 F1 | 	add	local09, objptr
028b0     04 2E 06 F1 | 	add	local09, #4
028b4     01 00 80 FF 
028b8     17 03 68 FC | 	wrlong	##513, local09
028bc     54 00 00 FF 
028c0     E0 E4 85 F1 | 	sub	objptr, ##43232
028c4     A8 01 90 FD | 	jmp	#LR__0127
028c8                 | LR__0121
028c8                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
028c8     7A 00 00 FF 
028cc     C0 E5 05 F1 | 	add	objptr, ##62912
028d0     F2 1E 0A FB | 	rdlong	local01, objptr wz
028d4     7A 00 00 FF 
028d8     C0 E5 85 F1 | 	sub	objptr, ##62912
028dc     7A 00 00 5F 
028e0     C4 E5 05 51 |  if_ne	add	objptr, ##62916
028e4     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
028e8     7A 00 00 5F 
028ec     C4 E5 85 51 |  if_ne	sub	objptr, ##62916
028f0     17 2F 22 56 |  if_ne	not	local09, local09
028f4     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
028f8     7A 00 00 5F 
028fc     C8 E5 05 51 |  if_ne	add	objptr, ##62920
02900     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02904     7A 00 00 5F 
02908     C8 E5 85 51 |  if_ne	sub	objptr, ##62920
0290c     19 29 22 56 |  if_ne	not	local06, local11
02910     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02914     30 00 90 AD |  if_e	jmp	#LR__0122
02918     11 25 02 F6 | 	mov	local04, local03
0291c     12 2F 02 F6 | 	mov	local09, local04
02920     03 2E 66 F0 | 	shl	local09, #3
02924     54 00 00 FF 
02928     E0 E4 05 F1 | 	add	objptr, ##43232
0292c     F2 2E 02 F1 | 	add	local09, objptr
02930     04 2E 06 F1 | 	add	local09, #4
02934     01 00 80 FF 
02938     17 05 68 FC | 	wrlong	##514, local09
0293c     54 00 00 FF 
02940     E0 E4 85 F1 | 	sub	objptr, ##43232
02944     28 01 90 FD | 	jmp	#LR__0127
02948                 | LR__0122
02948                 | ' 
02948                 | ' if isstring(lparts(i).part$) then 
02948     11 27 02 F6 | 	mov	local05, local03
0294c     03 26 66 F0 | 	shl	local05, #3
02950     54 00 00 FF 
02954     E0 E4 05 F1 | 	add	objptr, ##43232
02958     F2 26 02 F1 | 	add	local05, objptr
0295c     13 13 02 FB | 	rdlong	arg01, local05
02960     54 00 00 FF 
02964     E0 E4 85 F1 | 	sub	objptr, ##43232
02968     C8 21 B0 FD | 	call	#_isstring
0296c     00 FA 0D F2 | 	cmp	result1, #0 wz
02970     A0 00 90 AD |  if_e	jmp	#LR__0125
02974     11 2F 02 F6 | 	mov	local09, local03
02978     03 2E 66 F0 | 	shl	local09, #3
0297c     54 00 00 FF 
02980     E0 E4 05 F1 | 	add	objptr, ##43232
02984     F2 2E 02 F1 | 	add	local09, objptr
02988     04 2E 06 F1 | 	add	local09, #4
0298c     01 00 80 FF 
02990     17 07 68 FC | 	wrlong	##515, local09
02994     11 25 02 F6 | 	mov	local04, local03
02998     12 2F 02 F6 | 	mov	local09, local04
0299c     03 2E 66 F0 | 	shl	local09, #3
029a0     F2 2E 02 F1 | 	add	local09, objptr
029a4     11 37 02 F6 | 	mov	local13, local03
029a8     03 36 66 F0 | 	shl	local13, #3
029ac     F2 36 02 F1 | 	add	local13, objptr
029b0     1B 29 02 FB | 	rdlong	local06, local13
029b4     02 32 06 F6 | 	mov	local11, #2
029b8     11 4B 02 F6 | 	mov	local23, local03
029bc     25 43 02 F6 | 	mov	local19, local23
029c0     21 45 02 F6 | 	mov	local20, local19
029c4     03 44 66 F0 | 	shl	local20, #3
029c8     F2 46 02 F6 | 	mov	local21, objptr
029cc     F2 44 02 F1 | 	add	local20, objptr
029d0     22 13 02 FB | 	rdlong	arg01, local20
029d4     54 00 00 FF 
029d8     E0 E4 85 F1 | 	sub	objptr, ##43232
029dc     09 2B 02 F6 | 	mov	local07, arg01
029e0     97 06 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
029e4                 | LR__0123
029e4     15 FB C9 FA | 	rdbyte	result1, local07 wz
029e8     01 2A 06 51 |  if_ne	add	local07, #1
029ec     F4 FF 9F 5D |  if_ne	jmp	#LR__0123
029f0                 | LR__0124
029f0     09 2B 82 F1 | 	sub	local07, arg01
029f4     15 35 02 F6 | 	mov	local12, local07
029f8     1A 17 02 F6 | 	mov	arg03, local12
029fc     02 16 86 F1 | 	sub	arg03, #2
02a00     14 13 02 F6 | 	mov	arg01, local06
02a04     19 15 02 F6 | 	mov	arg02, local11
02a08     F4 84 B1 FD | 	call	#__system__Mid_S
02a0c     17 FB 61 FC | 	wrlong	result1, local09
02a10     5C 00 90 FD | 	jmp	#LR__0127
02a14                 | LR__0125
02a14                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02a14     11 25 02 F6 | 	mov	local04, local03
02a18     12 27 02 F6 | 	mov	local05, local04
02a1c     03 26 66 F0 | 	shl	local05, #3
02a20     54 00 00 FF 
02a24     E0 E4 05 F1 | 	add	objptr, ##43232
02a28     F2 26 02 F1 | 	add	local05, objptr
02a2c     13 13 02 FB | 	rdlong	arg01, local05
02a30     54 00 00 FF 
02a34     E0 E4 85 F1 | 	sub	objptr, ##43232
02a38     94 19 B0 FD | 	call	#_isname
02a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02a40     2C 00 90 AD |  if_e	jmp	#LR__0126
02a44     11 25 02 F6 | 	mov	local04, local03
02a48     12 2F 02 F6 | 	mov	local09, local04
02a4c     03 2E 66 F0 | 	shl	local09, #3
02a50     54 00 00 FF 
02a54     E0 E4 05 F1 | 	add	objptr, ##43232
02a58     F2 2E 02 F1 | 	add	local09, objptr
02a5c     04 2E 06 F1 | 	add	local09, #4
02a60     01 00 80 FF 
02a64     17 09 68 FC | 	wrlong	##516, local09
02a68     54 00 00 FF 
02a6c     E0 E4 85 F1 | 	sub	objptr, ##43232
02a70                 | LR__0126
02a70                 | LR__0127
02a70     01 22 06 F1 | 	add	local03, #1
02a74     84 FA 9F FD | 	jmp	#LR__0119
02a78                 | LR__0128
02a78     1D 2F 02 F6 | 	mov	local09, local15
02a7c     03 2E 66 F0 | 	shl	local09, #3
02a80     54 00 00 FF 
02a84     E0 E4 05 F1 | 	add	objptr, ##43232
02a88     F2 2E 02 F1 | 	add	local09, objptr
02a8c     04 2E 06 F1 | 	add	local09, #4
02a90     17 FD 6B FC | 	wrlong	#510, local09
02a94     1D 2F 02 F6 | 	mov	local09, local15
02a98     03 2E 66 F0 | 	shl	local09, #3
02a9c     F2 26 02 F6 | 	mov	local05, objptr
02aa0     F2 2E 02 F1 | 	add	local09, objptr
02aa4     42 01 00 FF 
02aa8     09 28 06 F6 | 	mov	local06, ##@LR__4332
02aac     17 29 62 FC | 	wrlong	local06, local09
02ab0     10 00 00 FF 
02ab4     54 E4 05 F1 | 	add	objptr, ##8276
02ab8     F2 3A 62 FC | 	wrlong	local15, objptr
02abc                 | ' 
02abc                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02abc                 | ' 
02abc                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02abc                 | '  
02abc                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02abc     16 00 00 FF 
02ac0     84 E4 05 F1 | 	add	objptr, ##11396
02ac4     F2 12 02 FB | 	rdlong	arg01, objptr
02ac8     7A 00 00 FF 
02acc     B8 E5 85 F1 | 	sub	objptr, ##62904
02ad0     42 01 00 FF 
02ad4     0A 2E 06 F6 | 	mov	local09, ##@LR__4333
02ad8     17 15 02 F6 | 	mov	arg02, local09
02adc     20 63 B1 FD | 	call	#__system___string_cmp
02ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ae4     EC 00 90 AD |  if_e	jmp	#LR__0129
02ae8     7A 00 00 FF 
02aec     B8 E5 05 F1 | 	add	objptr, ##62904
02af0     F2 12 02 FB | 	rdlong	arg01, objptr
02af4     7A 00 00 FF 
02af8     B8 E5 85 F1 | 	sub	objptr, ##62904
02afc     42 01 00 FF 
02b00     0F 26 06 F6 | 	mov	local05, ##@LR__4334
02b04     13 2F 02 F6 | 	mov	local09, local05
02b08     17 15 02 F6 | 	mov	arg02, local09
02b0c     F0 62 B1 FD | 	call	#__system___string_cmp
02b10     00 FA 0D F2 | 	cmp	result1, #0 wz
02b14     BC 00 90 AD |  if_e	jmp	#LR__0129
02b18     7A 00 00 FF 
02b1c     B8 E5 05 F1 | 	add	objptr, ##62904
02b20     F2 12 02 FB | 	rdlong	arg01, objptr
02b24     7A 00 00 FF 
02b28     B8 E5 85 F1 | 	sub	objptr, ##62904
02b2c     42 01 00 FF 
02b30     14 28 06 F6 | 	mov	local06, ##@LR__4335
02b34     14 27 02 F6 | 	mov	local05, local06
02b38     13 15 02 F6 | 	mov	arg02, local05
02b3c     C0 62 B1 FD | 	call	#__system___string_cmp
02b40     FD 2E 0A F6 | 	mov	local09, result1 wz
02b44     8C 00 90 AD |  if_e	jmp	#LR__0129
02b48     7A 00 00 FF 
02b4c     B8 E5 05 F1 | 	add	objptr, ##62904
02b50     F2 12 02 FB | 	rdlong	arg01, objptr
02b54     7A 00 00 FF 
02b58     B8 E5 85 F1 | 	sub	objptr, ##62904
02b5c     42 01 00 FF 
02b60     19 32 06 F6 | 	mov	local11, ##@LR__4336
02b64     19 29 02 F6 | 	mov	local06, local11
02b68     14 15 02 F6 | 	mov	arg02, local06
02b6c     90 62 B1 FD | 	call	#__system___string_cmp
02b70     FD 26 0A F6 | 	mov	local05, result1 wz
02b74     5C 00 90 AD |  if_e	jmp	#LR__0129
02b78     7A 00 00 FF 
02b7c     B8 E5 05 F1 | 	add	objptr, ##62904
02b80     F2 12 02 FB | 	rdlong	arg01, objptr
02b84     7A 00 00 FF 
02b88     B8 E5 85 F1 | 	sub	objptr, ##62904
02b8c     42 01 00 FF 
02b90     1D 32 06 F6 | 	mov	local11, ##@LR__4337
02b94     19 15 02 F6 | 	mov	arg02, local11
02b98     64 62 B1 FD | 	call	#__system___string_cmp
02b9c     FD 28 0A F6 | 	mov	local06, result1 wz
02ba0     30 00 90 AD |  if_e	jmp	#LR__0129
02ba4     7A 00 00 FF 
02ba8     B8 E5 05 F1 | 	add	objptr, ##62904
02bac     F2 12 02 FB | 	rdlong	arg01, objptr
02bb0     7A 00 00 FF 
02bb4     B8 E5 85 F1 | 	sub	objptr, ##62904
02bb8     42 01 00 FF 
02bbc     20 36 06 F6 | 	mov	local13, ##@LR__4338
02bc0     1B 31 02 F6 | 	mov	local10, local13
02bc4     18 15 02 F6 | 	mov	arg02, local10
02bc8     34 62 B1 FD | 	call	#__system___string_cmp
02bcc     FD 32 0A F6 | 	mov	local11, result1 wz
02bd0     9C 00 90 5D |  if_ne	jmp	#LR__0130
02bd4                 | LR__0129
02bd4     7A 00 00 FF 
02bd8     B4 E5 05 F1 | 	add	objptr, ##62900
02bdc     F2 36 02 FB | 	rdlong	local13, objptr
02be0     1B 31 02 F6 | 	mov	local10, local13
02be4     01 30 06 F1 | 	add	local10, #1
02be8     18 35 02 F6 | 	mov	local12, local10
02bec     1A 4B 02 F6 | 	mov	local23, local12
02bf0     03 4A 66 F0 | 	shl	local23, #3
02bf4     26 00 00 FF 
02bf8     D4 E4 85 F1 | 	sub	objptr, ##19668
02bfc     F2 42 02 F6 | 	mov	local19, objptr
02c00     F2 4A 02 F1 | 	add	local23, objptr
02c04     04 4A 06 F1 | 	add	local23, #4
02c08     25 47 02 FB | 	rdlong	local21, local23
02c0c     04 4A 86 F1 | 	sub	local23, #4
02c10     23 45 02 F6 | 	mov	local20, local21
02c14     01 00 00 FF 
02c18     04 44 0E F2 | 	cmp	local20, ##516 wz
02c1c     54 00 00 FF 
02c20     E0 E4 85 F1 | 	sub	objptr, ##43232
02c24     48 00 90 5D |  if_ne	jmp	#LR__0130
02c28     7A 00 00 FF 
02c2c     B4 E5 05 F1 | 	add	objptr, ##62900
02c30     F2 2E 02 FB | 	rdlong	local09, objptr
02c34     01 2E 06 F1 | 	add	local09, #1
02c38     17 27 02 F6 | 	mov	local05, local09
02c3c     03 26 66 F0 | 	shl	local05, #3
02c40     26 00 00 FF 
02c44     D4 E4 85 F1 | 	sub	objptr, ##19668
02c48     F2 28 02 F6 | 	mov	local06, objptr
02c4c     F2 26 02 F1 | 	add	local05, objptr
02c50     01 00 00 FF 
02c54     03 32 06 F6 | 	mov	local11, ##515
02c58     04 26 06 F1 | 	add	local05, #4
02c5c     01 00 80 FF 
02c60     13 07 68 FC | 	wrlong	##515, local05
02c64     04 26 86 F1 | 	sub	local05, #4
02c68     54 00 00 FF 
02c6c     E0 E4 85 F1 | 	sub	objptr, ##43232
02c70                 | LR__0130
02c70                 | ' 
02c70                 | ' ' abbreviated command has to be at the position addptr
02c70                 | ' 
02c70                 | ' 
02c70                 | ' 
02c70                 | ' '2b determine a type of the line
02c70                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02c70     54 00 00 FF 
02c74     E0 E4 05 F1 | 	add	objptr, ##43232
02c78     F2 12 02 FB | 	rdlong	arg01, objptr
02c7c     54 00 00 FF 
02c80     E0 E4 85 F1 | 	sub	objptr, ##43232
02c84     EC 1D B0 FD | 	call	#_isdec
02c88     00 FA 0D F2 | 	cmp	result1, #0 wz
02c8c     30 00 90 AD |  if_e	jmp	#LR__0131
02c90     54 00 00 FF 
02c94     E0 E4 05 F1 | 	add	objptr, ##43232
02c98     F2 12 02 FB | 	rdlong	arg01, objptr
02c9c     54 00 00 FF 
02ca0     E0 E4 85 F1 | 	sub	objptr, ##43232
02ca4     00 14 06 F6 | 	mov	arg02, #0
02ca8     90 92 B1 FD | 	call	#__system____builtin_atoi
02cac     7A 00 00 FF 
02cb0     64 E5 05 F1 | 	add	objptr, ##62820
02cb4     F2 FA 61 FC | 	wrlong	result1, objptr
02cb8     7A 00 00 FF 
02cbc     64 E5 85 F1 | 	sub	objptr, ##62820
02cc0                 | LR__0131
02cc0                 | ' 
02cc0                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02cc0     7A 00 00 FF 
02cc4     64 E5 05 F1 | 	add	objptr, ##62820
02cc8     F2 1E 02 FB | 	rdlong	local01, objptr
02ccc     7A 00 00 FF 
02cd0     64 E5 85 F1 | 	sub	objptr, ##62820
02cd4     01 1E 16 F2 | 	cmp	local01, #1 wc
02cd8     3C 00 90 CD |  if_b	jmp	#LR__0132
02cdc     01 3A 0E F2 | 	cmp	local15, #1 wz
02ce0     56 00 00 AF 
02ce4     F8 E4 05 A1 |  if_e	add	objptr, ##44280
02ce8     F2 26 02 AB |  if_e	rdlong	local05, objptr
02cec     56 00 00 AF 
02cf0     F8 E4 85 A1 |  if_e	sub	objptr, ##44280
02cf4     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02cf8     1C 00 90 5D |  if_ne	jmp	#LR__0132
02cfc     7A 00 00 FF 
02d00     64 E5 05 F1 | 	add	objptr, ##62820
02d04     F2 12 02 FB | 	rdlong	arg01, objptr
02d08     7A 00 00 FF 
02d0c     64 E5 85 F1 | 	sub	objptr, ##62820
02d10     84 1E B0 FD | 	call	#_deleteline
02d14     4C 05 90 FD | 	jmp	#LR__0149
02d18                 | LR__0132
02d18                 | ' 
02d18                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02d18     7A 00 00 FF 
02d1c     64 E5 05 F1 | 	add	objptr, ##62820
02d20     F2 1E 02 FB | 	rdlong	local01, objptr
02d24     7A 00 00 FF 
02d28     64 E5 85 F1 | 	sub	objptr, ##62820
02d2c     01 1E 16 F2 | 	cmp	local01, #1 wc
02d30     EC 00 90 CD |  if_b	jmp	#LR__0135
02d34     56 00 00 FF 
02d38     F8 E4 05 F1 | 	add	objptr, ##44280
02d3c     F2 26 02 FB | 	rdlong	local05, objptr
02d40     56 00 00 FF 
02d44     F8 E4 85 F1 | 	sub	objptr, ##44280
02d48     13 2F 0A F6 | 	mov	local09, local05 wz
02d4c     20 00 90 AD |  if_e	jmp	#LR__0133
02d50     56 00 00 FF 
02d54     F8 E4 05 F1 | 	add	objptr, ##44280
02d58     F2 32 02 FB | 	rdlong	local11, objptr
02d5c     56 00 00 FF 
02d60     F8 E4 85 F1 | 	sub	objptr, ##44280
02d64     19 29 02 F6 | 	mov	local06, local11
02d68     03 28 0E F2 | 	cmp	local06, #3 wz
02d6c     B0 00 90 5D |  if_ne	jmp	#LR__0135
02d70                 | LR__0133
02d70     54 00 00 FF 
02d74     F4 E4 05 F1 | 	add	objptr, ##43252
02d78     F2 36 02 FB | 	rdlong	local13, objptr
02d7c     54 00 00 FF 
02d80     F4 E4 85 F1 | 	sub	objptr, ##43252
02d84     1B 31 02 F6 | 	mov	local10, local13
02d88     1B 30 0E F2 | 	cmp	local10, #27 wz
02d8c     90 00 90 AD |  if_e	jmp	#LR__0135
02d90     7A 00 00 FF 
02d94     64 E5 05 F1 | 	add	objptr, ##62820
02d98     F2 12 02 FB | 	rdlong	arg01, objptr
02d9c     24 00 00 FF 
02da0     6C E4 85 F1 | 	sub	objptr, ##18540
02da4     F2 16 02 FB | 	rdlong	arg03, objptr
02da8     56 00 00 FF 
02dac     F8 E4 85 F1 | 	sub	objptr, ##44280
02db0     00 14 06 F6 | 	mov	arg02, #0
02db4     28 31 B0 FD | 	call	#_compile
02db8     FD 20 0A F6 | 	mov	local02, result1 wz
02dbc                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02dbc                 | '   if err<>0 then printerror(err): goto 104
02dbc     0C 00 90 AD |  if_e	jmp	#LR__0134
02dc0     10 13 02 F6 | 	mov	arg01, local02
02dc4     8C 2A B1 FD | 	call	#_printerror
02dc8     98 04 90 FD | 	jmp	#LR__0149
02dcc                 | LR__0134
02dcc                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02dcc     7A 00 00 FF 
02dd0     90 E5 05 F1 | 	add	objptr, ##62864
02dd4     F2 12 02 FB | 	rdlong	arg01, objptr
02dd8     7A 00 00 FF 
02ddc     90 E5 85 F1 | 	sub	objptr, ##62864
02de0     42 01 00 FF 
02de4     24 14 06 F6 | 	mov	arg02, ##@LR__4339
02de8     14 60 B1 FD | 	call	#__system___string_cmp
02dec     00 FA 0D F2 | 	cmp	result1, #0 wz
02df0     70 04 90 AD |  if_e	jmp	#LR__0149
02df4     7A 00 00 FF 
02df8     90 E5 05 F1 | 	add	objptr, ##62864
02dfc     F2 1E 02 FB | 	rdlong	local01, objptr
02e00     24 00 00 FF 
02e04     A0 E4 85 F1 | 	sub	objptr, ##18592
02e08     F2 1E 62 FC | 	wrlong	local01, objptr
02e0c     08 E4 05 F1 | 	add	objptr, #8
02e10     F2 08 68 FC | 	wrlong	#4, objptr
02e14     56 00 00 FF 
02e18     F8 E4 85 F1 | 	sub	objptr, ##44280
02e1c     50 DC 9F FD | 	jmp	#LR__0020
02e20                 | LR__0135
02e20                 | '       							
02e20                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02e20     7A 00 00 FF 
02e24     64 E5 05 F1 | 	add	objptr, ##62820
02e28     F2 1E 02 FB | 	rdlong	local01, objptr
02e2c     7A 00 00 FF 
02e30     64 E5 85 F1 | 	sub	objptr, ##62820
02e34     01 1E 16 F2 | 	cmp	local01, #1 wc
02e38     EC 00 90 CD |  if_b	jmp	#LR__0138
02e3c     56 00 00 FF 
02e40     F8 E4 05 F1 | 	add	objptr, ##44280
02e44     F2 26 02 FB | 	rdlong	local05, objptr
02e48     56 00 00 FF 
02e4c     F8 E4 85 F1 | 	sub	objptr, ##44280
02e50     01 26 0E F2 | 	cmp	local05, #1 wz
02e54     20 00 90 AD |  if_e	jmp	#LR__0136
02e58     56 00 00 FF 
02e5c     F8 E4 05 F1 | 	add	objptr, ##44280
02e60     F2 32 02 FB | 	rdlong	local11, objptr
02e64     56 00 00 FF 
02e68     F8 E4 85 F1 | 	sub	objptr, ##44280
02e6c     19 29 02 F6 | 	mov	local06, local11
02e70     02 28 0E F2 | 	cmp	local06, #2 wz
02e74     B0 00 90 5D |  if_ne	jmp	#LR__0138
02e78                 | LR__0136
02e78     54 00 00 FF 
02e7c     EC E4 05 F1 | 	add	objptr, ##43244
02e80     F2 36 02 FB | 	rdlong	local13, objptr
02e84     54 00 00 FF 
02e88     EC E4 85 F1 | 	sub	objptr, ##43244
02e8c     1B 31 02 F6 | 	mov	local10, local13
02e90     1B 30 0E F2 | 	cmp	local10, #27 wz
02e94     90 00 90 AD |  if_e	jmp	#LR__0138
02e98     7A 00 00 FF 
02e9c     64 E5 05 F1 | 	add	objptr, ##62820
02ea0     F2 12 02 FB | 	rdlong	arg01, objptr
02ea4     24 00 00 FF 
02ea8     6C E4 85 F1 | 	sub	objptr, ##18540
02eac     F2 16 02 FB | 	rdlong	arg03, objptr
02eb0     56 00 00 FF 
02eb4     F8 E4 85 F1 | 	sub	objptr, ##44280
02eb8     00 14 06 F6 | 	mov	arg02, #0
02ebc     20 30 B0 FD | 	call	#_compile
02ec0     FD 20 0A F6 | 	mov	local02, result1 wz
02ec4                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02ec4                 | '   if err<>0 then printerror(err): goto 104
02ec4     0C 00 90 AD |  if_e	jmp	#LR__0137
02ec8     10 13 02 F6 | 	mov	arg01, local02
02ecc     84 29 B1 FD | 	call	#_printerror
02ed0     90 03 90 FD | 	jmp	#LR__0149
02ed4                 | LR__0137
02ed4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02ed4     7A 00 00 FF 
02ed8     90 E5 05 F1 | 	add	objptr, ##62864
02edc     F2 12 02 FB | 	rdlong	arg01, objptr
02ee0     7A 00 00 FF 
02ee4     90 E5 85 F1 | 	sub	objptr, ##62864
02ee8     42 01 00 FF 
02eec     25 14 06 F6 | 	mov	arg02, ##@LR__4340
02ef0     0C 5F B1 FD | 	call	#__system___string_cmp
02ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef8     68 03 90 AD |  if_e	jmp	#LR__0149
02efc     7A 00 00 FF 
02f00     90 E5 05 F1 | 	add	objptr, ##62864
02f04     F2 1E 02 FB | 	rdlong	local01, objptr
02f08     24 00 00 FF 
02f0c     A0 E4 85 F1 | 	sub	objptr, ##18592
02f10     F2 1E 62 FC | 	wrlong	local01, objptr
02f14     08 E4 05 F1 | 	add	objptr, #8
02f18     F2 08 68 FC | 	wrlong	#4, objptr
02f1c     56 00 00 FF 
02f20     F8 E4 85 F1 | 	sub	objptr, ##44280
02f24     48 DB 9F FD | 	jmp	#LR__0020
02f28                 | LR__0138
02f28                 | ' 							 
02f28                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
02f28     7A 00 00 FF 
02f2c     64 E5 05 F1 | 	add	objptr, ##62820
02f30     F2 1E 02 FB | 	rdlong	local01, objptr
02f34     7A 00 00 FF 
02f38     64 E5 85 F1 | 	sub	objptr, ##62820
02f3c     01 1E 16 F2 | 	cmp	local01, #1 wc
02f40     D4 00 90 CD |  if_b	jmp	#LR__0140
02f44     56 00 00 FF 
02f48     F8 E4 05 F1 | 	add	objptr, ##44280
02f4c     F2 26 0A FB | 	rdlong	local05, objptr wz
02f50     56 00 00 FF 
02f54     F8 E4 85 F1 | 	sub	objptr, ##44280
02f58     20 00 90 AD |  if_e	jmp	#LR__0139
02f5c     56 00 00 FF 
02f60     F8 E4 05 F1 | 	add	objptr, ##44280
02f64     F2 32 02 FB | 	rdlong	local11, objptr
02f68     56 00 00 FF 
02f6c     F8 E4 85 F1 | 	sub	objptr, ##44280
02f70     19 29 02 F6 | 	mov	local06, local11
02f74     03 28 0E F2 | 	cmp	local06, #3 wz
02f78     9C 00 90 5D |  if_ne	jmp	#LR__0140
02f7c                 | LR__0139
02f7c     54 00 00 FF 
02f80     F4 E4 05 F1 | 	add	objptr, ##43252
02f84     F2 36 02 FB | 	rdlong	local13, objptr
02f88     54 00 00 FF 
02f8c     F4 E4 85 F1 | 	sub	objptr, ##43252
02f90     1B 31 02 F6 | 	mov	local10, local13
02f94     1B 30 0E F2 | 	cmp	local10, #27 wz
02f98     7C 00 90 5D |  if_ne	jmp	#LR__0140
02f9c     7A 00 00 FF 
02fa0     64 E5 05 F1 | 	add	objptr, ##62820
02fa4     F2 12 02 FB | 	rdlong	arg01, objptr
02fa8     24 00 00 FF 
02fac     6C E4 85 F1 | 	sub	objptr, ##18540
02fb0     F2 16 02 FB | 	rdlong	arg03, objptr
02fb4     56 00 00 FF 
02fb8     F8 E4 85 F1 | 	sub	objptr, ##44280
02fbc     00 14 06 F6 | 	mov	arg02, #0
02fc0     EC 2F B0 FD | 	call	#_compile_assign
02fc4                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02fc4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02fc4     7A 00 00 FF 
02fc8     90 E5 05 F1 | 	add	objptr, ##62864
02fcc     F2 12 02 FB | 	rdlong	arg01, objptr
02fd0     7A 00 00 FF 
02fd4     90 E5 85 F1 | 	sub	objptr, ##62864
02fd8     42 01 00 FF 
02fdc     26 14 06 F6 | 	mov	arg02, ##@LR__4341
02fe0     1C 5E B1 FD | 	call	#__system___string_cmp
02fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe8     78 02 90 AD |  if_e	jmp	#LR__0149
02fec     7A 00 00 FF 
02ff0     90 E5 05 F1 | 	add	objptr, ##62864
02ff4     F2 1E 02 FB | 	rdlong	local01, objptr
02ff8     24 00 00 FF 
02ffc     A0 E4 85 F1 | 	sub	objptr, ##18592
03000     F2 1E 62 FC | 	wrlong	local01, objptr
03004     08 E4 05 F1 | 	add	objptr, #8
03008     F2 08 68 FC | 	wrlong	#4, objptr
0300c     56 00 00 FF 
03010     F8 E4 85 F1 | 	sub	objptr, ##44280
03014     58 DA 9F FD | 	jmp	#LR__0020
03018                 | LR__0140
03018                 | '     							 
03018                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03018     7A 00 00 FF 
0301c     64 E5 05 F1 | 	add	objptr, ##62820
03020     F2 1E 02 FB | 	rdlong	local01, objptr
03024     7A 00 00 FF 
03028     64 E5 85 F1 | 	sub	objptr, ##62820
0302c     01 1E 16 F2 | 	cmp	local01, #1 wc
03030     CC 00 90 CD |  if_b	jmp	#LR__0141
03034     56 00 00 FF 
03038     F8 E4 05 F1 | 	add	objptr, ##44280
0303c     F2 26 02 FB | 	rdlong	local05, objptr
03040     56 00 00 FF 
03044     F8 E4 85 F1 | 	sub	objptr, ##44280
03048     01 26 0E F2 | 	cmp	local05, #1 wz
0304c     56 00 00 5F 
03050     F8 E4 05 51 |  if_ne	add	objptr, ##44280
03054     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03058     56 00 00 5F 
0305c     F8 E4 85 51 |  if_ne	sub	objptr, ##44280
03060     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03064     54 00 00 AF 
03068     EC E4 05 A1 |  if_e	add	objptr, ##43244
0306c     F2 36 02 AB |  if_e	rdlong	local13, objptr
03070     54 00 00 AF 
03074     EC E4 85 A1 |  if_e	sub	objptr, ##43244
03078     1B 31 02 A6 |  if_e	mov	local10, local13
0307c     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
03080     7C 00 90 5D |  if_ne	jmp	#LR__0141
03084     7A 00 00 FF 
03088     64 E5 05 F1 | 	add	objptr, ##62820
0308c     F2 12 02 FB | 	rdlong	arg01, objptr
03090     24 00 00 FF 
03094     6C E4 85 F1 | 	sub	objptr, ##18540
03098     F2 16 02 FB | 	rdlong	arg03, objptr
0309c     56 00 00 FF 
030a0     F8 E4 85 F1 | 	sub	objptr, ##44280
030a4     00 14 06 F6 | 	mov	arg02, #0
030a8     04 2F B0 FD | 	call	#_compile_assign
030ac                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
030ac                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
030ac     7A 00 00 FF 
030b0     90 E5 05 F1 | 	add	objptr, ##62864
030b4     F2 12 02 FB | 	rdlong	arg01, objptr
030b8     7A 00 00 FF 
030bc     90 E5 85 F1 | 	sub	objptr, ##62864
030c0     42 01 00 FF 
030c4     27 14 06 F6 | 	mov	arg02, ##@LR__4342
030c8     34 5D B1 FD | 	call	#__system___string_cmp
030cc     00 FA 0D F2 | 	cmp	result1, #0 wz
030d0     90 01 90 AD |  if_e	jmp	#LR__0149
030d4     7A 00 00 FF 
030d8     90 E5 05 F1 | 	add	objptr, ##62864
030dc     F2 1E 02 FB | 	rdlong	local01, objptr
030e0     24 00 00 FF 
030e4     A0 E4 85 F1 | 	sub	objptr, ##18592
030e8     F2 1E 62 FC | 	wrlong	local01, objptr
030ec     08 E4 05 F1 | 	add	objptr, #8
030f0     F2 08 68 FC | 	wrlong	#4, objptr
030f4     56 00 00 FF 
030f8     F8 E4 85 F1 | 	sub	objptr, ##44280
030fc     70 D9 9F FD | 	jmp	#LR__0020
03100                 | LR__0141
03100                 | ' 
03100                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
03100     54 00 00 FF 
03104     E4 E4 05 F1 | 	add	objptr, ##43236
03108     F2 1E 02 FB | 	rdlong	local01, objptr
0310c     54 00 00 FF 
03110     E4 E4 85 F1 | 	sub	objptr, ##43236
03114     01 00 00 FF 
03118     04 1E 0E F2 | 	cmp	local01, ##516 wz
0311c     54 00 00 AF 
03120     EC E4 05 A1 |  if_e	add	objptr, ##43244
03124     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03128     54 00 00 AF 
0312c     EC E4 85 A1 |  if_e	sub	objptr, ##43244
03130     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03134     14 00 90 5D |  if_ne	jmp	#LR__0142
03138     00 12 06 F6 | 	mov	arg01, #0
0313c     00 14 06 F6 | 	mov	arg02, #0
03140     00 16 06 F6 | 	mov	arg03, #0
03144     68 2E B0 FD | 	call	#_compile_assign
03148     90 00 90 FD | 	jmp	#LR__0144
0314c                 | LR__0142
0314c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0314c     54 00 00 FF 
03150     E4 E4 05 F1 | 	add	objptr, ##43236
03154     F2 1E 02 FB | 	rdlong	local01, objptr
03158     54 00 00 FF 
0315c     E4 E4 85 F1 | 	sub	objptr, ##43236
03160     01 00 00 FF 
03164     04 1E 0E F2 | 	cmp	local01, ##516 wz
03168     54 00 00 AF 
0316c     EC E4 05 A1 |  if_e	add	objptr, ##43244
03170     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03174     54 00 00 AF 
03178     EC E4 85 A1 |  if_e	sub	objptr, ##43244
0317c     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
03180     44 00 90 5D |  if_ne	jmp	#LR__0143
03184     00 12 06 F6 | 	mov	arg01, #0
03188     50 B5 B1 FD | 	call	#__system___getiolock_0423
0318c     FD 12 02 F6 | 	mov	arg01, result1
03190     44 5C B1 FD | 	call	#__system___lockmem
03194     42 01 00 FF 
03198     28 14 06 F6 | 	mov	arg02, ##@LR__4343
0319c     00 12 06 F6 | 	mov	arg01, #0
031a0     00 16 06 F6 | 	mov	arg03, #0
031a4     24 69 B1 FD | 	call	#__system___basic_print_string
031a8     00 12 06 F6 | 	mov	arg01, #0
031ac     0A 14 06 F6 | 	mov	arg02, #10
031b0     00 16 06 F6 | 	mov	arg03, #0
031b4     BC 68 B1 FD | 	call	#__system___basic_print_char
031b8     00 12 06 F6 | 	mov	arg01, #0
031bc     1C B5 B1 FD | 	call	#__system___getiolock_0423
031c0     FD 00 68 FC | 	wrlong	#0, result1
031c4     7C 00 90 FD | 	jmp	#LR__0148
031c8                 | LR__0143
031c8     00 12 06 F6 | 	mov	arg01, #0
031cc     00 14 06 F6 | 	mov	arg02, #0
031d0     00 16 06 F6 | 	mov	arg03, #0
031d4     08 2D B0 FD | 	call	#_compile
031d8     FD 20 02 F6 | 	mov	local02, result1
031dc                 | LR__0144
031dc                 | ' 
031dc                 | ' ' if we are here, this is not a program line to add, so try to execute this
031dc                 | ' 
031dc                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
031dc                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
031dc                 | ' if err=0 then execute_line() else printerror(err)
031dc     00 20 0E F2 | 	cmp	local02, #0 wz
031e0     0C 00 90 5D |  if_ne	jmp	#LR__0145
031e4     00 12 06 F6 | 	mov	arg01, #0
031e8     F4 65 B0 FD | 	call	#_execute_line
031ec     08 00 90 FD | 	jmp	#LR__0146
031f0                 | LR__0145
031f0     10 13 02 F6 | 	mov	arg01, local02
031f4     5C 26 B1 FD | 	call	#_printerror
031f8                 | LR__0146
031f8                 | ' if rest$<>"" then line$=rest$:  goto 108 
031f8     7A 00 00 FF 
031fc     90 E5 05 F1 | 	add	objptr, ##62864
03200     F2 12 02 FB | 	rdlong	arg01, objptr
03204     7A 00 00 FF 
03208     90 E5 85 F1 | 	sub	objptr, ##62864
0320c     42 01 00 FF 
03210     57 14 06 F6 | 	mov	arg02, ##@LR__4344
03214     E8 5B B1 FD | 	call	#__system___string_cmp
03218     00 FA 0D F2 | 	cmp	result1, #0 wz
0321c     24 00 90 AD |  if_e	jmp	#LR__0147
03220     7A 00 00 FF 
03224     90 E5 05 F1 | 	add	objptr, ##62864
03228     F2 1E 02 FB | 	rdlong	local01, objptr
0322c     24 00 00 FF 
03230     A0 E4 85 F1 | 	sub	objptr, ##18592
03234     F2 1E 62 FC | 	wrlong	local01, objptr
03238     56 00 00 FF 
0323c     F0 E4 85 F1 | 	sub	objptr, ##44272
03240     2C D8 9F FD | 	jmp	#LR__0020
03244                 | LR__0147
03244                 | LR__0148
03244     42 01 00 FF 
03248     58 12 06 F6 | 	mov	arg01, ##@LR__4345
0324c                 | ' 
0324c                 | ' write(text)
0324c     00 4B B1 FD | 	call	#_hg010b_spin2_write
03250                 | ' crlf
03250     5C 4C B1 FD | 	call	#_hg010b_spin2_crlf
03254     42 01 00 FF 
03258     59 12 06 F6 | 	mov	arg01, ##@LR__4346
0325c                 | ' 
0325c                 | ' write(text)
0325c     F0 4A B1 FD | 	call	#_hg010b_spin2_write
03260                 | ' crlf
03260     4C 4C B1 FD | 	call	#_hg010b_spin2_crlf
03264                 | LR__0149
03264     A7 F0 03 F6 | 	mov	ptra, fp
03268     B2 00 A0 FD | 	call	#popregs_
0326c                 | _interpret_ret
0326c     2D 00 64 FD | 	ret
03270                 | 
03270                 | ' 
03270                 | ' 
03270                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
03270                 | ' 
03270                 | ' function isoperator(s as string) as ubyte
03270                 | _isoperator
03270     01 4A 05 F6 | 	mov	COUNT_, #1
03274     A8 00 A0 FD | 	call	#pushregs_
03278                 | ' 
03278                 | ' select case s
03278     09 1F 02 F6 | 	mov	local01, arg01
0327c     42 01 00 FF 
03280     5F 14 06 F6 | 	mov	arg02, ##@LR__4347
03284     0F 13 02 F6 | 	mov	arg01, local01
03288     74 5B B1 FD | 	call	#__system___string_cmp
0328c     00 FA 0D F2 | 	cmp	result1, #0 wz
03290     FC 01 90 AD |  if_e	jmp	#LR__0150
03294     42 01 00 FF 
03298     61 14 06 F6 | 	mov	arg02, ##@LR__4348
0329c     0F 13 02 F6 | 	mov	arg01, local01
032a0     5C 5B B1 FD | 	call	#__system___string_cmp
032a4     00 FA 0D F2 | 	cmp	result1, #0 wz
032a8     EC 01 90 AD |  if_e	jmp	#LR__0151
032ac     42 01 00 FF 
032b0     63 14 06 F6 | 	mov	arg02, ##@LR__4349
032b4     0F 13 02 F6 | 	mov	arg01, local01
032b8     44 5B B1 FD | 	call	#__system___string_cmp
032bc     00 FA 0D F2 | 	cmp	result1, #0 wz
032c0     DC 01 90 AD |  if_e	jmp	#LR__0152
032c4     42 01 00 FF 
032c8     66 14 06 F6 | 	mov	arg02, ##@LR__4350
032cc     0F 13 02 F6 | 	mov	arg01, local01
032d0     2C 5B B1 FD | 	call	#__system___string_cmp
032d4     00 FA 0D F2 | 	cmp	result1, #0 wz
032d8     CC 01 90 AD |  if_e	jmp	#LR__0153
032dc     42 01 00 FF 
032e0     6A 14 06 F6 | 	mov	arg02, ##@LR__4351
032e4     0F 13 02 F6 | 	mov	arg01, local01
032e8     14 5B B1 FD | 	call	#__system___string_cmp
032ec     00 FA 0D F2 | 	cmp	result1, #0 wz
032f0     BC 01 90 AD |  if_e	jmp	#LR__0154
032f4     42 01 00 FF 
032f8     6C 14 06 F6 | 	mov	arg02, ##@LR__4352
032fc     0F 13 02 F6 | 	mov	arg01, local01
03300     FC 5A B1 FD | 	call	#__system___string_cmp
03304     00 FA 0D F2 | 	cmp	result1, #0 wz
03308     AC 01 90 AD |  if_e	jmp	#LR__0155
0330c     42 01 00 FF 
03310     6E 14 06 F6 | 	mov	arg02, ##@LR__4353
03314     0F 13 02 F6 | 	mov	arg01, local01
03318     E4 5A B1 FD | 	call	#__system___string_cmp
0331c     00 FA 0D F2 | 	cmp	result1, #0 wz
03320     9C 01 90 AD |  if_e	jmp	#LR__0156
03324     42 01 00 FF 
03328     72 14 06 F6 | 	mov	arg02, ##@LR__4354
0332c     0F 13 02 F6 | 	mov	arg01, local01
03330     CC 5A B1 FD | 	call	#__system___string_cmp
03334     00 FA 0D F2 | 	cmp	result1, #0 wz
03338     8C 01 90 AD |  if_e	jmp	#LR__0157
0333c     42 01 00 FF 
03340     76 14 06 F6 | 	mov	arg02, ##@LR__4355
03344     0F 13 02 F6 | 	mov	arg01, local01
03348     B4 5A B1 FD | 	call	#__system___string_cmp
0334c     00 FA 0D F2 | 	cmp	result1, #0 wz
03350     7C 01 90 AD |  if_e	jmp	#LR__0158
03354     42 01 00 FF 
03358     7A 14 06 F6 | 	mov	arg02, ##@LR__4356
0335c     0F 13 02 F6 | 	mov	arg01, local01
03360     9C 5A B1 FD | 	call	#__system___string_cmp
03364     00 FA 0D F2 | 	cmp	result1, #0 wz
03368     6C 01 90 AD |  if_e	jmp	#LR__0159
0336c     42 01 00 FF 
03370     7E 14 06 F6 | 	mov	arg02, ##@LR__4357
03374     0F 13 02 F6 | 	mov	arg01, local01
03378     84 5A B1 FD | 	call	#__system___string_cmp
0337c     00 FA 0D F2 | 	cmp	result1, #0 wz
03380     5C 01 90 AD |  if_e	jmp	#LR__0160
03384     42 01 00 FF 
03388     82 14 06 F6 | 	mov	arg02, ##@LR__4358
0338c     0F 13 02 F6 | 	mov	arg01, local01
03390     6C 5A B1 FD | 	call	#__system___string_cmp
03394     00 FA 0D F2 | 	cmp	result1, #0 wz
03398     4C 01 90 AD |  if_e	jmp	#LR__0161
0339c     42 01 00 FF 
033a0     84 14 06 F6 | 	mov	arg02, ##@LR__4359
033a4     0F 13 02 F6 | 	mov	arg01, local01
033a8     54 5A B1 FD | 	call	#__system___string_cmp
033ac     00 FA 0D F2 | 	cmp	result1, #0 wz
033b0     3C 01 90 AD |  if_e	jmp	#LR__0162
033b4     42 01 00 FF 
033b8     88 14 06 F6 | 	mov	arg02, ##@LR__4360
033bc     0F 13 02 F6 | 	mov	arg01, local01
033c0     3C 5A B1 FD | 	call	#__system___string_cmp
033c4     00 FA 0D F2 | 	cmp	result1, #0 wz
033c8     2C 01 90 AD |  if_e	jmp	#LR__0163
033cc     42 01 00 FF 
033d0     8A 14 06 F6 | 	mov	arg02, ##@LR__4361
033d4     0F 13 02 F6 | 	mov	arg01, local01
033d8     24 5A B1 FD | 	call	#__system___string_cmp
033dc     00 FA 0D F2 | 	cmp	result1, #0 wz
033e0     1C 01 90 AD |  if_e	jmp	#LR__0164
033e4     42 01 00 FF 
033e8     8C 14 06 F6 | 	mov	arg02, ##@LR__4362
033ec     0F 13 02 F6 | 	mov	arg01, local01
033f0     0C 5A B1 FD | 	call	#__system___string_cmp
033f4     00 FA 0D F2 | 	cmp	result1, #0 wz
033f8     0C 01 90 AD |  if_e	jmp	#LR__0165
033fc     42 01 00 FF 
03400     8F 14 06 F6 | 	mov	arg02, ##@LR__4363
03404     0F 13 02 F6 | 	mov	arg01, local01
03408     F4 59 B1 FD | 	call	#__system___string_cmp
0340c     00 FA 0D F2 | 	cmp	result1, #0 wz
03410     FC 00 90 AD |  if_e	jmp	#LR__0166
03414     42 01 00 FF 
03418     92 14 06 F6 | 	mov	arg02, ##@LR__4364
0341c     0F 13 02 F6 | 	mov	arg01, local01
03420     DC 59 B1 FD | 	call	#__system___string_cmp
03424     00 FA 0D F2 | 	cmp	result1, #0 wz
03428     EC 00 90 AD |  if_e	jmp	#LR__0167
0342c     42 01 00 FF 
03430     94 14 06 F6 | 	mov	arg02, ##@LR__4365
03434     0F 13 02 F6 | 	mov	arg01, local01
03438     C4 59 B1 FD | 	call	#__system___string_cmp
0343c     00 FA 0D F2 | 	cmp	result1, #0 wz
03440     DC 00 90 AD |  if_e	jmp	#LR__0168
03444     42 01 00 FF 
03448     96 14 06 F6 | 	mov	arg02, ##@LR__4366
0344c     0F 13 02 F6 | 	mov	arg01, local01
03450     AC 59 B1 FD | 	call	#__system___string_cmp
03454     00 FA 0D F2 | 	cmp	result1, #0 wz
03458     CC 00 90 AD |  if_e	jmp	#LR__0169
0345c     42 01 00 FF 
03460     99 14 06 F6 | 	mov	arg02, ##@LR__4367
03464     0F 13 02 F6 | 	mov	arg01, local01
03468     94 59 B1 FD | 	call	#__system___string_cmp
0346c     00 FA 0D F2 | 	cmp	result1, #0 wz
03470     BC 00 90 AD |  if_e	jmp	#LR__0170
03474     42 01 00 FF 
03478     9C 14 06 F6 | 	mov	arg02, ##@LR__4368
0347c     0F 13 02 F6 | 	mov	arg01, local01
03480     7C 59 B1 FD | 	call	#__system___string_cmp
03484     00 FA 0D F2 | 	cmp	result1, #0 wz
03488     AC 00 90 AD |  if_e	jmp	#LR__0171
0348c     B0 00 90 FD | 	jmp	#LR__0172
03490                 | LR__0150
03490     01 FA 05 F6 | 	mov	result1, #1
03494     AC 00 90 FD | 	jmp	#LR__0173
03498                 | LR__0151
03498     02 FA 05 F6 | 	mov	result1, #2
0349c     A4 00 90 FD | 	jmp	#LR__0173
034a0                 | LR__0152
034a0     03 FA 05 F6 | 	mov	result1, #3
034a4     9C 00 90 FD | 	jmp	#LR__0173
034a8                 | LR__0153
034a8     04 FA 05 F6 | 	mov	result1, #4
034ac     94 00 90 FD | 	jmp	#LR__0173
034b0                 | LR__0154
034b0     05 FA 05 F6 | 	mov	result1, #5
034b4     8C 00 90 FD | 	jmp	#LR__0173
034b8                 | LR__0155
034b8     06 FA 05 F6 | 	mov	result1, #6
034bc     84 00 90 FD | 	jmp	#LR__0173
034c0                 | LR__0156
034c0     07 FA 05 F6 | 	mov	result1, #7
034c4     7C 00 90 FD | 	jmp	#LR__0173
034c8                 | LR__0157
034c8     08 FA 05 F6 | 	mov	result1, #8
034cc     74 00 90 FD | 	jmp	#LR__0173
034d0                 | LR__0158
034d0     09 FA 05 F6 | 	mov	result1, #9
034d4     6C 00 90 FD | 	jmp	#LR__0173
034d8                 | LR__0159
034d8     0A FA 05 F6 | 	mov	result1, #10
034dc     64 00 90 FD | 	jmp	#LR__0173
034e0                 | LR__0160
034e0     0B FA 05 F6 | 	mov	result1, #11
034e4     5C 00 90 FD | 	jmp	#LR__0173
034e8                 | LR__0161
034e8     0C FA 05 F6 | 	mov	result1, #12
034ec     54 00 90 FD | 	jmp	#LR__0173
034f0                 | LR__0162
034f0     0D FA 05 F6 | 	mov	result1, #13
034f4     4C 00 90 FD | 	jmp	#LR__0173
034f8                 | LR__0163
034f8     0E FA 05 F6 | 	mov	result1, #14
034fc     44 00 90 FD | 	jmp	#LR__0173
03500                 | LR__0164
03500     1B FA 05 F6 | 	mov	result1, #27
03504     3C 00 90 FD | 	jmp	#LR__0173
03508                 | LR__0165
03508     27 FA 05 F6 | 	mov	result1, #39
0350c     34 00 90 FD | 	jmp	#LR__0173
03510                 | LR__0166
03510     26 FA 05 F6 | 	mov	result1, #38
03514     2C 00 90 FD | 	jmp	#LR__0173
03518                 | LR__0167
03518     10 FA 05 F6 | 	mov	result1, #16
0351c     24 00 90 FD | 	jmp	#LR__0173
03520                 | LR__0168
03520     0F FA 05 F6 | 	mov	result1, #15
03524     1C 00 90 FD | 	jmp	#LR__0173
03528                 | LR__0169
03528     2A FA 05 F6 | 	mov	result1, #42
0352c     14 00 90 FD | 	jmp	#LR__0173
03530                 | LR__0170
03530     28 FA 05 F6 | 	mov	result1, #40
03534     0C 00 90 FD | 	jmp	#LR__0173
03538                 | LR__0171
03538     29 FA 05 F6 | 	mov	result1, #41
0353c     04 00 90 FD | 	jmp	#LR__0173
03540                 | LR__0172
03540     00 FA 05 F6 | 	mov	result1, #0
03544                 | LR__0173
03544     A7 F0 03 F6 | 	mov	ptra, fp
03548     B2 00 A0 FD | 	call	#popregs_
0354c                 | _isoperator_ret
0354c     2D 00 64 FD | 	ret
03550                 | 
03550                 | ' 
03550                 | ' function isseparator(s as string) as ubyte
03550                 | _isseparator
03550     01 4A 05 F6 | 	mov	COUNT_, #1
03554     A8 00 A0 FD | 	call	#pushregs_
03558                 | ' 
03558                 | ' select case s
03558     09 1F 02 F6 | 	mov	local01, arg01
0355c     42 01 00 FF 
03560     9F 14 06 F6 | 	mov	arg02, ##@LR__4369
03564     0F 13 02 F6 | 	mov	arg01, local01
03568     94 58 B1 FD | 	call	#__system___string_cmp
0356c     00 FA 0D F2 | 	cmp	result1, #0 wz
03570     54 01 90 AD |  if_e	jmp	#LR__0180
03574     42 01 00 FF 
03578     A1 14 06 F6 | 	mov	arg02, ##@LR__4370
0357c     0F 13 02 F6 | 	mov	arg01, local01
03580     7C 58 B1 FD | 	call	#__system___string_cmp
03584     00 FA 0D F2 | 	cmp	result1, #0 wz
03588     44 01 90 AD |  if_e	jmp	#LR__0181
0358c     42 01 00 FF 
03590     A3 14 06 F6 | 	mov	arg02, ##@LR__4371
03594     0F 13 02 F6 | 	mov	arg01, local01
03598     64 58 B1 FD | 	call	#__system___string_cmp
0359c     00 FA 0D F2 | 	cmp	result1, #0 wz
035a0     34 01 90 AD |  if_e	jmp	#LR__0182
035a4     42 01 00 FF 
035a8     A5 14 06 F6 | 	mov	arg02, ##@LR__4372
035ac     0F 13 02 F6 | 	mov	arg01, local01
035b0     4C 58 B1 FD | 	call	#__system___string_cmp
035b4     00 FA 0D F2 | 	cmp	result1, #0 wz
035b8     24 01 90 AD |  if_e	jmp	#LR__0183
035bc     42 01 00 FF 
035c0     A7 14 06 F6 | 	mov	arg02, ##@LR__4373
035c4     0F 13 02 F6 | 	mov	arg01, local01
035c8     34 58 B1 FD | 	call	#__system___string_cmp
035cc     00 FA 0D F2 | 	cmp	result1, #0 wz
035d0     14 01 90 AD |  if_e	jmp	#LR__0184
035d4     42 01 00 FF 
035d8     A9 14 06 F6 | 	mov	arg02, ##@LR__4374
035dc     0F 13 02 F6 | 	mov	arg01, local01
035e0     1C 58 B1 FD | 	call	#__system___string_cmp
035e4     00 FA 0D F2 | 	cmp	result1, #0 wz
035e8     04 01 90 AD |  if_e	jmp	#LR__0185
035ec     42 01 00 FF 
035f0     AB 14 06 F6 | 	mov	arg02, ##@LR__4375
035f4     0F 13 02 F6 | 	mov	arg01, local01
035f8     04 58 B1 FD | 	call	#__system___string_cmp
035fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03600     F4 00 90 AD |  if_e	jmp	#LR__0186
03604     42 01 00 FF 
03608     AD 14 06 F6 | 	mov	arg02, ##@LR__4376
0360c     0F 13 02 F6 | 	mov	arg01, local01
03610     EC 57 B1 FD | 	call	#__system___string_cmp
03614     00 FA 0D F2 | 	cmp	result1, #0 wz
03618     E4 00 90 AD |  if_e	jmp	#LR__0187
0361c     42 01 00 FF 
03620     AF 14 06 F6 | 	mov	arg02, ##@LR__4377
03624     0F 13 02 F6 | 	mov	arg01, local01
03628     D4 57 B1 FD | 	call	#__system___string_cmp
0362c     00 FA 0D F2 | 	cmp	result1, #0 wz
03630     D4 00 90 AD |  if_e	jmp	#LR__0188
03634     42 01 00 FF 
03638     B1 14 06 F6 | 	mov	arg02, ##@LR__4378
0363c     0F 13 02 F6 | 	mov	arg01, local01
03640     BC 57 B1 FD | 	call	#__system___string_cmp
03644     00 FA 0D F2 | 	cmp	result1, #0 wz
03648     C4 00 90 AD |  if_e	jmp	#LR__0189
0364c     42 01 00 FF 
03650     B3 14 06 F6 | 	mov	arg02, ##@LR__4379
03654     0F 13 02 F6 | 	mov	arg01, local01
03658     A4 57 B1 FD | 	call	#__system___string_cmp
0365c     00 FA 0D F2 | 	cmp	result1, #0 wz
03660     B4 00 90 AD |  if_e	jmp	#LR__0190
03664     42 01 00 FF 
03668     B5 14 06 F6 | 	mov	arg02, ##@LR__4380
0366c     0F 13 02 F6 | 	mov	arg01, local01
03670     8C 57 B1 FD | 	call	#__system___string_cmp
03674     00 FA 0D F2 | 	cmp	result1, #0 wz
03678     A4 00 90 AD |  if_e	jmp	#LR__0191
0367c     42 01 00 FF 
03680     B7 14 06 F6 | 	mov	arg02, ##@LR__4381
03684     0F 13 02 F6 | 	mov	arg01, local01
03688     74 57 B1 FD | 	call	#__system___string_cmp
0368c     00 FA 0D F2 | 	cmp	result1, #0 wz
03690     94 00 90 AD |  if_e	jmp	#LR__0192
03694     42 01 00 FF 
03698     B9 14 06 F6 | 	mov	arg02, ##@LR__4382
0369c     0F 13 02 F6 | 	mov	arg01, local01
036a0     5C 57 B1 FD | 	call	#__system___string_cmp
036a4     00 FA 0D F2 | 	cmp	result1, #0 wz
036a8     84 00 90 AD |  if_e	jmp	#LR__0193
036ac     42 01 00 FF 
036b0     BB 14 06 F6 | 	mov	arg02, ##@LR__4383
036b4     0F 13 02 F6 | 	mov	arg01, local01
036b8     44 57 B1 FD | 	call	#__system___string_cmp
036bc     00 FA 0D F2 | 	cmp	result1, #0 wz
036c0     74 00 90 AD |  if_e	jmp	#LR__0194
036c4     78 00 90 FD | 	jmp	#LR__0195
036c8                 | LR__0180
036c8     01 FA 05 F6 | 	mov	result1, #1
036cc     74 00 90 FD | 	jmp	#LR__0196
036d0                 | LR__0181
036d0     02 FA 05 F6 | 	mov	result1, #2
036d4     6C 00 90 FD | 	jmp	#LR__0196
036d8                 | LR__0182
036d8     1B FA 05 F6 | 	mov	result1, #27
036dc     64 00 90 FD | 	jmp	#LR__0196
036e0                 | LR__0183
036e0     11 FA 05 F6 | 	mov	result1, #17
036e4     5C 00 90 FD | 	jmp	#LR__0196
036e8                 | LR__0184
036e8     05 FA 05 F6 | 	mov	result1, #5
036ec     54 00 90 FD | 	jmp	#LR__0196
036f0                 | LR__0185
036f0     06 FA 05 F6 | 	mov	result1, #6
036f4     4C 00 90 FD | 	jmp	#LR__0196
036f8                 | LR__0186
036f8     12 FA 05 F6 | 	mov	result1, #18
036fc     44 00 90 FD | 	jmp	#LR__0196
03700                 | LR__0187
03700     13 FA 05 F6 | 	mov	result1, #19
03704     3C 00 90 FD | 	jmp	#LR__0196
03708                 | LR__0188
03708     0C FA 05 F6 | 	mov	result1, #12
0370c     34 00 90 FD | 	jmp	#LR__0196
03710                 | LR__0189
03710     14 FA 05 F6 | 	mov	result1, #20
03714     2C 00 90 FD | 	jmp	#LR__0196
03718                 | LR__0190
03718     15 FA 05 F6 | 	mov	result1, #21
0371c     24 00 90 FD | 	jmp	#LR__0196
03720                 | LR__0191
03720     16 FA 05 F6 | 	mov	result1, #22
03724     1C 00 90 FD | 	jmp	#LR__0196
03728                 | LR__0192
03728     FF FB 05 F6 | 	mov	result1, #511
0372c     14 00 90 FD | 	jmp	#LR__0196
03730                 | LR__0193
03730     0F FA 05 F6 | 	mov	result1, #15
03734     0C 00 90 FD | 	jmp	#LR__0196
03738                 | LR__0194
03738     10 FA 05 F6 | 	mov	result1, #16
0373c     04 00 90 FD | 	jmp	#LR__0196
03740                 | LR__0195
03740     00 FA 05 F6 | 	mov	result1, #0
03744                 | LR__0196
03744     A7 F0 03 F6 | 	mov	ptra, fp
03748     B2 00 A0 FD | 	call	#popregs_
0374c                 | _isseparator_ret
0374c     2D 00 64 FD | 	ret
03750                 | 
03750                 | ' 
03750                 | ' 
03750                 | ' function iscommand(s as string) as ubyte
03750                 | _iscommand
03750     01 4A 05 F6 | 	mov	COUNT_, #1
03754     A8 00 A0 FD | 	call	#pushregs_
03758                 | ' 
03758                 | ' select case s
03758     09 1F 02 F6 | 	mov	local01, arg01
0375c     42 01 00 FF 
03760     BF 14 06 F6 | 	mov	arg02, ##@LR__4385
03764     0F 13 02 F6 | 	mov	arg01, local01
03768     94 56 B1 FD | 	call	#__system___string_cmp
0376c     00 FA 0D F2 | 	cmp	result1, #0 wz
03770     3C 07 90 AD |  if_e	jmp	#LR__0200
03774     42 01 00 FF 
03778     C4 14 06 F6 | 	mov	arg02, ##@LR__4386
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     7C 56 B1 FD | 	call	#__system___string_cmp
03784     00 FA 0D F2 | 	cmp	result1, #0 wz
03788     2C 07 90 AD |  if_e	jmp	#LR__0201
0378c     42 01 00 FF 
03790     C7 14 06 F6 | 	mov	arg02, ##@LR__4387
03794     0F 13 02 F6 | 	mov	arg01, local01
03798     64 56 B1 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     1C 07 90 AD |  if_e	jmp	#LR__0202
037a4     42 01 00 FF 
037a8     CB 14 06 F6 | 	mov	arg02, ##@LR__4388
037ac     0F 13 02 F6 | 	mov	arg01, local01
037b0     4C 56 B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     0C 07 90 AD |  if_e	jmp	#LR__0203
037bc     42 01 00 FF 
037c0     D0 14 06 F6 | 	mov	arg02, ##@LR__4389
037c4     0F 13 02 F6 | 	mov	arg01, local01
037c8     34 56 B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     FC 06 90 AD |  if_e	jmp	#LR__0204
037d4     42 01 00 FF 
037d8     D4 14 06 F6 | 	mov	arg02, ##@LR__4390
037dc     0F 13 02 F6 | 	mov	arg01, local01
037e0     1C 56 B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     EC 06 90 AD |  if_e	jmp	#LR__0205
037ec     42 01 00 FF 
037f0     DB 14 06 F6 | 	mov	arg02, ##@LR__4391
037f4     0F 13 02 F6 | 	mov	arg01, local01
037f8     04 56 B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     DC 06 90 AD |  if_e	jmp	#LR__0206
03804     42 01 00 FF 
03808     DF 14 06 F6 | 	mov	arg02, ##@LR__4392
0380c     0F 13 02 F6 | 	mov	arg01, local01
03810     EC 55 B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     CC 06 90 AD |  if_e	jmp	#LR__0207
0381c     42 01 00 FF 
03820     E5 14 06 F6 | 	mov	arg02, ##@LR__4393
03824     0F 13 02 F6 | 	mov	arg01, local01
03828     D4 55 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     BC 06 90 AD |  if_e	jmp	#LR__0208
03834     42 01 00 FF 
03838     E9 14 06 F6 | 	mov	arg02, ##@LR__4394
0383c     0F 13 02 F6 | 	mov	arg01, local01
03840     BC 55 B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     AC 06 90 AD |  if_e	jmp	#LR__0209
0384c     42 01 00 FF 
03850     EF 14 06 F6 | 	mov	arg02, ##@LR__4395
03854     0F 13 02 F6 | 	mov	arg01, local01
03858     A4 55 B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     9C 06 90 AD |  if_e	jmp	#LR__0210
03864     42 01 00 FF 
03868     F2 14 06 F6 | 	mov	arg02, ##@LR__4396
0386c     0F 13 02 F6 | 	mov	arg01, local01
03870     8C 55 B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     8C 06 90 AD |  if_e	jmp	#LR__0211
0387c     42 01 00 FF 
03880     F8 14 06 F6 | 	mov	arg02, ##@LR__4397
03884     0F 13 02 F6 | 	mov	arg01, local01
03888     74 55 B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     7C 06 90 AD |  if_e	jmp	#LR__0212
03894     42 01 00 FF 
03898     FC 14 06 F6 | 	mov	arg02, ##@LR__4398
0389c     0F 13 02 F6 | 	mov	arg01, local01
038a0     5C 55 B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     6C 06 90 AD |  if_e	jmp	#LR__0213
038ac     42 01 00 FF 
038b0     03 15 06 F6 | 	mov	arg02, ##@LR__4399
038b4     0F 13 02 F6 | 	mov	arg01, local01
038b8     44 55 B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     5C 06 90 AD |  if_e	jmp	#LR__0214
038c4     42 01 00 FF 
038c8     0A 15 06 F6 | 	mov	arg02, ##@LR__4400
038cc     0F 13 02 F6 | 	mov	arg01, local01
038d0     2C 55 B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     4C 06 90 AD |  if_e	jmp	#LR__0215
038dc     42 01 00 FF 
038e0     11 15 06 F6 | 	mov	arg02, ##@LR__4401
038e4     0F 13 02 F6 | 	mov	arg01, local01
038e8     14 55 B1 FD | 	call	#__system___string_cmp
038ec     00 FA 0D F2 | 	cmp	result1, #0 wz
038f0     3C 06 90 AD |  if_e	jmp	#LR__0216
038f4     42 01 00 FF 
038f8     1B 15 06 F6 | 	mov	arg02, ##@LR__4402
038fc     0F 13 02 F6 | 	mov	arg01, local01
03900     FC 54 B1 FD | 	call	#__system___string_cmp
03904     00 FA 0D F2 | 	cmp	result1, #0 wz
03908     2C 06 90 AD |  if_e	jmp	#LR__0217
0390c     42 01 00 FF 
03910     1F 15 06 F6 | 	mov	arg02, ##@LR__4403
03914     0F 13 02 F6 | 	mov	arg01, local01
03918     E4 54 B1 FD | 	call	#__system___string_cmp
0391c     00 FA 0D F2 | 	cmp	result1, #0 wz
03920     1C 06 90 AD |  if_e	jmp	#LR__0218
03924     42 01 00 FF 
03928     23 15 06 F6 | 	mov	arg02, ##@LR__4404
0392c     0F 13 02 F6 | 	mov	arg01, local01
03930     CC 54 B1 FD | 	call	#__system___string_cmp
03934     00 FA 0D F2 | 	cmp	result1, #0 wz
03938     0C 06 90 AD |  if_e	jmp	#LR__0219
0393c     42 01 00 FF 
03940     27 15 06 F6 | 	mov	arg02, ##@LR__4405
03944     0F 13 02 F6 | 	mov	arg01, local01
03948     B4 54 B1 FD | 	call	#__system___string_cmp
0394c     00 FA 0D F2 | 	cmp	result1, #0 wz
03950     FC 05 90 AD |  if_e	jmp	#LR__0220
03954     42 01 00 FF 
03958     2B 15 06 F6 | 	mov	arg02, ##@LR__4406
0395c     0F 13 02 F6 | 	mov	arg01, local01
03960     9C 54 B1 FD | 	call	#__system___string_cmp
03964     00 FA 0D F2 | 	cmp	result1, #0 wz
03968     EC 05 90 AD |  if_e	jmp	#LR__0221
0396c     42 01 00 FF 
03970     30 15 06 F6 | 	mov	arg02, ##@LR__4407
03974     0F 13 02 F6 | 	mov	arg01, local01
03978     84 54 B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     DC 05 90 AD |  if_e	jmp	#LR__0222
03984     42 01 00 FF 
03988     34 15 06 F6 | 	mov	arg02, ##@LR__4408
0398c     0F 13 02 F6 | 	mov	arg01, local01
03990     6C 54 B1 FD | 	call	#__system___string_cmp
03994     00 FA 0D F2 | 	cmp	result1, #0 wz
03998     CC 05 90 AD |  if_e	jmp	#LR__0223
0399c     42 01 00 FF 
039a0     39 15 06 F6 | 	mov	arg02, ##@LR__4409
039a4     0F 13 02 F6 | 	mov	arg01, local01
039a8     54 54 B1 FD | 	call	#__system___string_cmp
039ac     00 FA 0D F2 | 	cmp	result1, #0 wz
039b0     BC 05 90 AD |  if_e	jmp	#LR__0224
039b4     42 01 00 FF 
039b8     41 15 06 F6 | 	mov	arg02, ##@LR__4410
039bc     0F 13 02 F6 | 	mov	arg01, local01
039c0     3C 54 B1 FD | 	call	#__system___string_cmp
039c4     00 FA 0D F2 | 	cmp	result1, #0 wz
039c8     AC 05 90 AD |  if_e	jmp	#LR__0225
039cc     42 01 00 FF 
039d0     45 15 06 F6 | 	mov	arg02, ##@LR__4411
039d4     0F 13 02 F6 | 	mov	arg01, local01
039d8     24 54 B1 FD | 	call	#__system___string_cmp
039dc     00 FA 0D F2 | 	cmp	result1, #0 wz
039e0     9C 05 90 AD |  if_e	jmp	#LR__0226
039e4     42 01 00 FF 
039e8     4A 15 06 F6 | 	mov	arg02, ##@LR__4412
039ec     0F 13 02 F6 | 	mov	arg01, local01
039f0     0C 54 B1 FD | 	call	#__system___string_cmp
039f4     00 FA 0D F2 | 	cmp	result1, #0 wz
039f8     8C 05 90 AD |  if_e	jmp	#LR__0227
039fc     42 01 00 FF 
03a00     4E 15 06 F6 | 	mov	arg02, ##@LR__4413
03a04     0F 13 02 F6 | 	mov	arg01, local01
03a08     F4 53 B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     7C 05 90 AD |  if_e	jmp	#LR__0228
03a14     42 01 00 FF 
03a18     53 15 06 F6 | 	mov	arg02, ##@LR__4414
03a1c     0F 13 02 F6 | 	mov	arg01, local01
03a20     DC 53 B1 FD | 	call	#__system___string_cmp
03a24     00 FA 0D F2 | 	cmp	result1, #0 wz
03a28     6C 05 90 AD |  if_e	jmp	#LR__0229
03a2c     42 01 00 FF 
03a30     57 15 06 F6 | 	mov	arg02, ##@LR__4415
03a34     0F 13 02 F6 | 	mov	arg01, local01
03a38     C4 53 B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     5C 05 90 AD |  if_e	jmp	#LR__0230
03a44     42 01 00 FF 
03a48     5A 15 06 F6 | 	mov	arg02, ##@LR__4416
03a4c     0F 13 02 F6 | 	mov	arg01, local01
03a50     AC 53 B1 FD | 	call	#__system___string_cmp
03a54     00 FA 0D F2 | 	cmp	result1, #0 wz
03a58     4C 05 90 AD |  if_e	jmp	#LR__0231
03a5c     42 01 00 FF 
03a60     60 15 06 F6 | 	mov	arg02, ##@LR__4417
03a64     0F 13 02 F6 | 	mov	arg01, local01
03a68     94 53 B1 FD | 	call	#__system___string_cmp
03a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a70     3C 05 90 AD |  if_e	jmp	#LR__0232
03a74     42 01 00 FF 
03a78     64 15 06 F6 | 	mov	arg02, ##@LR__4418
03a7c     0F 13 02 F6 | 	mov	arg01, local01
03a80     7C 53 B1 FD | 	call	#__system___string_cmp
03a84     00 FA 0D F2 | 	cmp	result1, #0 wz
03a88     2C 05 90 AD |  if_e	jmp	#LR__0233
03a8c     42 01 00 FF 
03a90     69 15 06 F6 | 	mov	arg02, ##@LR__4419
03a94     0F 13 02 F6 | 	mov	arg01, local01
03a98     64 53 B1 FD | 	call	#__system___string_cmp
03a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03aa0     1C 05 90 AD |  if_e	jmp	#LR__0234
03aa4     42 01 00 FF 
03aa8     6C 15 06 F6 | 	mov	arg02, ##@LR__4420
03aac     0F 13 02 F6 | 	mov	arg01, local01
03ab0     4C 53 B1 FD | 	call	#__system___string_cmp
03ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab8     0C 05 90 AD |  if_e	jmp	#LR__0235
03abc     42 01 00 FF 
03ac0     6F 15 06 F6 | 	mov	arg02, ##@LR__4421
03ac4     0F 13 02 F6 | 	mov	arg01, local01
03ac8     34 53 B1 FD | 	call	#__system___string_cmp
03acc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad0     FC 04 90 AD |  if_e	jmp	#LR__0236
03ad4     42 01 00 FF 
03ad8     73 15 06 F6 | 	mov	arg02, ##@LR__4422
03adc     0F 13 02 F6 | 	mov	arg01, local01
03ae0     1C 53 B1 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     EC 04 90 AD |  if_e	jmp	#LR__0237
03aec     42 01 00 FF 
03af0     76 15 06 F6 | 	mov	arg02, ##@LR__4423
03af4     0F 13 02 F6 | 	mov	arg01, local01
03af8     04 53 B1 FD | 	call	#__system___string_cmp
03afc     00 FA 0D F2 | 	cmp	result1, #0 wz
03b00     DC 04 90 AD |  if_e	jmp	#LR__0238
03b04     42 01 00 FF 
03b08     7A 15 06 F6 | 	mov	arg02, ##@LR__4424
03b0c     0F 13 02 F6 | 	mov	arg01, local01
03b10     EC 52 B1 FD | 	call	#__system___string_cmp
03b14     00 FA 0D F2 | 	cmp	result1, #0 wz
03b18     CC 04 90 AD |  if_e	jmp	#LR__0239
03b1c     42 01 00 FF 
03b20     7F 15 06 F6 | 	mov	arg02, ##@LR__4425
03b24     0F 13 02 F6 | 	mov	arg01, local01
03b28     D4 52 B1 FD | 	call	#__system___string_cmp
03b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b30     BC 04 90 AD |  if_e	jmp	#LR__0240
03b34     42 01 00 FF 
03b38     82 15 06 F6 | 	mov	arg02, ##@LR__4426
03b3c     0F 13 02 F6 | 	mov	arg01, local01
03b40     BC 52 B1 FD | 	call	#__system___string_cmp
03b44     00 FA 0D F2 | 	cmp	result1, #0 wz
03b48     AC 04 90 AD |  if_e	jmp	#LR__0241
03b4c     42 01 00 FF 
03b50     87 15 06 F6 | 	mov	arg02, ##@LR__4427
03b54     0F 13 02 F6 | 	mov	arg01, local01
03b58     A4 52 B1 FD | 	call	#__system___string_cmp
03b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b60     9C 04 90 AD |  if_e	jmp	#LR__0242
03b64     42 01 00 FF 
03b68     8B 15 06 F6 | 	mov	arg02, ##@LR__4428
03b6c     0F 13 02 F6 | 	mov	arg01, local01
03b70     8C 52 B1 FD | 	call	#__system___string_cmp
03b74     00 FA 0D F2 | 	cmp	result1, #0 wz
03b78     8C 04 90 AD |  if_e	jmp	#LR__0243
03b7c     42 01 00 FF 
03b80     90 15 06 F6 | 	mov	arg02, ##@LR__4429
03b84     0F 13 02 F6 | 	mov	arg01, local01
03b88     74 52 B1 FD | 	call	#__system___string_cmp
03b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b90     7C 04 90 AD |  if_e	jmp	#LR__0244
03b94     42 01 00 FF 
03b98     93 15 06 F6 | 	mov	arg02, ##@LR__4430
03b9c     0F 13 02 F6 | 	mov	arg01, local01
03ba0     5C 52 B1 FD | 	call	#__system___string_cmp
03ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ba8     6C 04 90 AD |  if_e	jmp	#LR__0245
03bac     42 01 00 FF 
03bb0     99 15 06 F6 | 	mov	arg02, ##@LR__4431
03bb4     0F 13 02 F6 | 	mov	arg01, local01
03bb8     44 52 B1 FD | 	call	#__system___string_cmp
03bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03bc0     5C 04 90 AD |  if_e	jmp	#LR__0246
03bc4     42 01 00 FF 
03bc8     9D 15 06 F6 | 	mov	arg02, ##@LR__4432
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     2C 52 B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     4C 04 90 AD |  if_e	jmp	#LR__0247
03bdc     42 01 00 FF 
03be0     A2 15 06 F6 | 	mov	arg02, ##@LR__4433
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     14 52 B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     3C 04 90 AD |  if_e	jmp	#LR__0248
03bf4     42 01 00 FF 
03bf8     A5 15 06 F6 | 	mov	arg02, ##@LR__4434
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     FC 51 B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     2C 04 90 AD |  if_e	jmp	#LR__0249
03c0c     42 01 00 FF 
03c10     AB 15 06 F6 | 	mov	arg02, ##@LR__4435
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     E4 51 B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     1C 04 90 AD |  if_e	jmp	#LR__0250
03c24     42 01 00 FF 
03c28     AE 15 06 F6 | 	mov	arg02, ##@LR__4436
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     CC 51 B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     0C 04 90 AD |  if_e	jmp	#LR__0251
03c3c     42 01 00 FF 
03c40     B7 15 06 F6 | 	mov	arg02, ##@LR__4437
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     B4 51 B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     FC 03 90 AD |  if_e	jmp	#LR__0252
03c54     42 01 00 FF 
03c58     BD 15 06 F6 | 	mov	arg02, ##@LR__4438
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     9C 51 B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     EC 03 90 AD |  if_e	jmp	#LR__0253
03c6c     42 01 00 FF 
03c70     C3 15 06 F6 | 	mov	arg02, ##@LR__4439
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     84 51 B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     DC 03 90 AD |  if_e	jmp	#LR__0254
03c84     42 01 00 FF 
03c88     CC 15 06 F6 | 	mov	arg02, ##@LR__4440
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     6C 51 B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     CC 03 90 AD |  if_e	jmp	#LR__0255
03c9c     42 01 00 FF 
03ca0     D6 15 06 F6 | 	mov	arg02, ##@LR__4441
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     54 51 B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     BC 03 90 AD |  if_e	jmp	#LR__0256
03cb4     42 01 00 FF 
03cb8     DF 15 06 F6 | 	mov	arg02, ##@LR__4442
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     3C 51 B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     AC 03 90 AD |  if_e	jmp	#LR__0257
03ccc     42 01 00 FF 
03cd0     E4 15 06 F6 | 	mov	arg02, ##@LR__4443
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     24 51 B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     9C 03 90 AD |  if_e	jmp	#LR__0258
03ce4     42 01 00 FF 
03ce8     E9 15 06 F6 | 	mov	arg02, ##@LR__4444
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     0C 51 B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     8C 03 90 AD |  if_e	jmp	#LR__0259
03cfc     42 01 00 FF 
03d00     ED 15 06 F6 | 	mov	arg02, ##@LR__4445
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     F4 50 B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     7C 03 90 AD |  if_e	jmp	#LR__0260
03d14     42 01 00 FF 
03d18     F6 15 06 F6 | 	mov	arg02, ##@LR__4446
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     DC 50 B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     6C 03 90 AD |  if_e	jmp	#LR__0261
03d2c     42 01 00 FF 
03d30     FB 15 06 F6 | 	mov	arg02, ##@LR__4447
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     C4 50 B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     5C 03 90 AD |  if_e	jmp	#LR__0262
03d44     43 01 00 FF 
03d48     01 14 06 F6 | 	mov	arg02, ##@LR__4448
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     AC 50 B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     4C 03 90 AD |  if_e	jmp	#LR__0263
03d5c     43 01 00 FF 
03d60     03 14 06 F6 | 	mov	arg02, ##@LR__4449
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     94 50 B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     3C 03 90 AD |  if_e	jmp	#LR__0264
03d74     43 01 00 FF 
03d78     07 14 06 F6 | 	mov	arg02, ##@LR__4450
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     7C 50 B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     2C 03 90 AD |  if_e	jmp	#LR__0265
03d8c     43 01 00 FF 
03d90     0B 14 06 F6 | 	mov	arg02, ##@LR__4451
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     64 50 B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     1C 03 90 AD |  if_e	jmp	#LR__0266
03da4     43 01 00 FF 
03da8     10 14 06 F6 | 	mov	arg02, ##@LR__4452
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     4C 50 B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     0C 03 90 AD |  if_e	jmp	#LR__0267
03dbc     43 01 00 FF 
03dc0     13 14 06 F6 | 	mov	arg02, ##@LR__4453
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     34 50 B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     FC 02 90 AD |  if_e	jmp	#LR__0268
03dd4     43 01 00 FF 
03dd8     1A 14 06 F6 | 	mov	arg02, ##@LR__4454
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     1C 50 B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     EC 02 90 AD |  if_e	jmp	#LR__0269
03dec     43 01 00 FF 
03df0     1E 14 06 F6 | 	mov	arg02, ##@LR__4455
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     04 50 B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     DC 02 90 AD |  if_e	jmp	#LR__0270
03e04     43 01 00 FF 
03e08     23 14 06 F6 | 	mov	arg02, ##@LR__4456
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     EC 4F B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     CC 02 90 AD |  if_e	jmp	#LR__0271
03e1c     43 01 00 FF 
03e20     2A 14 06 F6 | 	mov	arg02, ##@LR__4457
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     D4 4F B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     BC 02 90 AD |  if_e	jmp	#LR__0272
03e34     43 01 00 FF 
03e38     34 14 06 F6 | 	mov	arg02, ##@LR__4458
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     BC 4F B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     AC 02 90 AD |  if_e	jmp	#LR__0273
03e4c     43 01 00 FF 
03e50     38 14 06 F6 | 	mov	arg02, ##@LR__4459
03e54     0F 13 02 F6 | 	mov	arg01, local01
03e58     A4 4F B1 FD | 	call	#__system___string_cmp
03e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e60     9C 02 90 AD |  if_e	jmp	#LR__0274
03e64     43 01 00 FF 
03e68     40 14 06 F6 | 	mov	arg02, ##@LR__4460
03e6c     0F 13 02 F6 | 	mov	arg01, local01
03e70     8C 4F B1 FD | 	call	#__system___string_cmp
03e74     00 FA 0D F2 | 	cmp	result1, #0 wz
03e78     8C 02 90 AD |  if_e	jmp	#LR__0275
03e7c     43 01 00 FF 
03e80     44 14 06 F6 | 	mov	arg02, ##@LR__4461
03e84     0F 13 02 F6 | 	mov	arg01, local01
03e88     74 4F B1 FD | 	call	#__system___string_cmp
03e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e90     7C 02 90 AD |  if_e	jmp	#LR__0276
03e94     43 01 00 FF 
03e98     4A 14 06 F6 | 	mov	arg02, ##@LR__4462
03e9c     0F 13 02 F6 | 	mov	arg01, local01
03ea0     5C 4F B1 FD | 	call	#__system___string_cmp
03ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ea8     6C 02 90 AD |  if_e	jmp	#LR__0277
03eac     70 02 90 FD | 	jmp	#LR__0278
03eb0                 | LR__0200
03eb0     5C FA 05 F6 | 	mov	result1, #92
03eb4     6C 02 90 FD | 	jmp	#LR__0279
03eb8                 | LR__0201
03eb8     5C FA 05 F6 | 	mov	result1, #92
03ebc     64 02 90 FD | 	jmp	#LR__0279
03ec0                 | LR__0202
03ec0     47 FA 05 F6 | 	mov	result1, #71
03ec4     5C 02 90 FD | 	jmp	#LR__0279
03ec8                 | LR__0203
03ec8     59 FA 05 F6 | 	mov	result1, #89
03ecc     54 02 90 FD | 	jmp	#LR__0279
03ed0                 | LR__0204
03ed0     59 FA 05 F6 | 	mov	result1, #89
03ed4     4C 02 90 FD | 	jmp	#LR__0279
03ed8                 | LR__0205
03ed8     45 FA 05 F6 | 	mov	result1, #69
03edc     44 02 90 FD | 	jmp	#LR__0279
03ee0                 | LR__0206
03ee0     45 FA 05 F6 | 	mov	result1, #69
03ee4     3C 02 90 FD | 	jmp	#LR__0279
03ee8                 | LR__0207
03ee8     69 FA 05 F6 | 	mov	result1, #105
03eec     34 02 90 FD | 	jmp	#LR__0279
03ef0                 | LR__0208
03ef0     40 FA 05 F6 | 	mov	result1, #64
03ef4     2C 02 90 FD | 	jmp	#LR__0279
03ef8                 | LR__0209
03ef8     49 FA 05 F6 | 	mov	result1, #73
03efc     24 02 90 FD | 	jmp	#LR__0279
03f00                 | LR__0210
03f00     49 FA 05 F6 | 	mov	result1, #73
03f04     1C 02 90 FD | 	jmp	#LR__0279
03f08                 | LR__0211
03f08     50 FA 05 F6 | 	mov	result1, #80
03f0c     14 02 90 FD | 	jmp	#LR__0279
03f10                 | LR__0212
03f10     50 FA 05 F6 | 	mov	result1, #80
03f14     0C 02 90 FD | 	jmp	#LR__0279
03f18                 | LR__0213
03f18     68 FA 05 F6 | 	mov	result1, #104
03f1c     04 02 90 FD | 	jmp	#LR__0279
03f20                 | LR__0214
03f20     73 FA 05 F6 | 	mov	result1, #115
03f24     FC 01 90 FD | 	jmp	#LR__0279
03f28                 | LR__0215
03f28     74 FA 05 F6 | 	mov	result1, #116
03f2c     F4 01 90 FD | 	jmp	#LR__0279
03f30                 | LR__0216
03f30     6C FA 05 F6 | 	mov	result1, #108
03f34     EC 01 90 FD | 	jmp	#LR__0279
03f38                 | LR__0217
03f38     6C FA 05 F6 | 	mov	result1, #108
03f3c     E4 01 90 FD | 	jmp	#LR__0279
03f40                 | LR__0218
03f40     89 FA 05 F6 | 	mov	result1, #137
03f44     DC 01 90 FD | 	jmp	#LR__0279
03f48                 | LR__0219
03f48     72 FA 05 F6 | 	mov	result1, #114
03f4c     D4 01 90 FD | 	jmp	#LR__0279
03f50                 | LR__0220
03f50     5D FA 05 F6 | 	mov	result1, #93
03f54     CC 01 90 FD | 	jmp	#LR__0279
03f58                 | LR__0221
03f58     43 FA 05 F6 | 	mov	result1, #67
03f5c     C4 01 90 FD | 	jmp	#LR__0279
03f60                 | LR__0222
03f60     43 FA 05 F6 | 	mov	result1, #67
03f64     BC 01 90 FD | 	jmp	#LR__0279
03f68                 | LR__0223
03f68     5A FA 05 F6 | 	mov	result1, #90
03f6c     B4 01 90 FD | 	jmp	#LR__0279
03f70                 | LR__0224
03f70     46 FA 05 F6 | 	mov	result1, #70
03f74     AC 01 90 FD | 	jmp	#LR__0279
03f78                 | LR__0225
03f78     46 FA 05 F6 | 	mov	result1, #70
03f7c     A4 01 90 FD | 	jmp	#LR__0279
03f80                 | LR__0226
03f80     71 FA 05 F6 | 	mov	result1, #113
03f84     9C 01 90 FD | 	jmp	#LR__0279
03f88                 | LR__0227
03f88     71 FA 05 F6 | 	mov	result1, #113
03f8c     94 01 90 FD | 	jmp	#LR__0279
03f90                 | LR__0228
03f90     60 FA 05 F6 | 	mov	result1, #96
03f94     8C 01 90 FD | 	jmp	#LR__0279
03f98                 | LR__0229
03f98     4A FA 05 F6 | 	mov	result1, #74
03f9c     84 01 90 FD | 	jmp	#LR__0279
03fa0                 | LR__0230
03fa0     4A FA 05 F6 | 	mov	result1, #74
03fa4     7C 01 90 FD | 	jmp	#LR__0279
03fa8                 | LR__0231
03fa8     48 FA 05 F6 | 	mov	result1, #72
03fac     74 01 90 FD | 	jmp	#LR__0279
03fb0                 | LR__0232
03fb0     48 FA 05 F6 | 	mov	result1, #72
03fb4     6C 01 90 FD | 	jmp	#LR__0279
03fb8                 | LR__0233
03fb8     4E FA 05 F6 | 	mov	result1, #78
03fbc     64 01 90 FD | 	jmp	#LR__0279
03fc0                 | LR__0234
03fc0     4E FA 05 F6 | 	mov	result1, #78
03fc4     5C 01 90 FD | 	jmp	#LR__0279
03fc8                 | LR__0235
03fc8     58 FA 05 F6 | 	mov	result1, #88
03fcc     54 01 90 FD | 	jmp	#LR__0279
03fd0                 | LR__0236
03fd0     5F FA 05 F6 | 	mov	result1, #95
03fd4     4C 01 90 FD | 	jmp	#LR__0279
03fd8                 | LR__0237
03fd8     5F FA 05 F6 | 	mov	result1, #95
03fdc     44 01 90 FD | 	jmp	#LR__0279
03fe0                 | LR__0238
03fe0     8A FA 05 F6 | 	mov	result1, #138
03fe4     3C 01 90 FD | 	jmp	#LR__0279
03fe8                 | LR__0239
03fe8     4C FA 05 F6 | 	mov	result1, #76
03fec     34 01 90 FD | 	jmp	#LR__0279
03ff0                 | LR__0240
03ff0     4C FA 05 F6 | 	mov	result1, #76
03ff4     2C 01 90 FD | 	jmp	#LR__0279
03ff8                 | LR__0241
03ff8     52 FA 05 F6 | 	mov	result1, #82
03ffc     24 01 90 FD | 	jmp	#LR__0279
04000                 | LR__0242
04000     52 FA 05 F6 | 	mov	result1, #82
04004     1C 01 90 FD | 	jmp	#LR__0279
04008                 | LR__0243
04008     61 FA 05 F6 | 	mov	result1, #97
0400c     14 01 90 FD | 	jmp	#LR__0279
04010                 | LR__0244
04010     61 FA 05 F6 | 	mov	result1, #97
04014     0C 01 90 FD | 	jmp	#LR__0279
04018                 | LR__0245
04018     63 FA 05 F6 | 	mov	result1, #99
0401c     04 01 90 FD | 	jmp	#LR__0279
04020                 | LR__0246
04020     41 FA 05 F6 | 	mov	result1, #65
04024     FC 00 90 FD | 	jmp	#LR__0279
04028                 | LR__0247
04028     4B FA 05 F6 | 	mov	result1, #75
0402c     F4 00 90 FD | 	jmp	#LR__0279
04030                 | LR__0248
04030     4B FA 05 F6 | 	mov	result1, #75
04034     EC 00 90 FD | 	jmp	#LR__0279
04038                 | LR__0249
04038     5E FA 05 F6 | 	mov	result1, #94
0403c     E4 00 90 FD | 	jmp	#LR__0279
04040                 | LR__0250
04040     5E FA 05 F6 | 	mov	result1, #94
04044     DC 00 90 FD | 	jmp	#LR__0279
04048                 | LR__0251
04048     7C FA 05 F6 | 	mov	result1, #124
0404c     D4 00 90 FD | 	jmp	#LR__0279
04050                 | LR__0252
04050     7E FA 05 F6 | 	mov	result1, #126
04054     CC 00 90 FD | 	jmp	#LR__0279
04058                 | LR__0253
04058     7D FA 05 F6 | 	mov	result1, #125
0405c     C4 00 90 FD | 	jmp	#LR__0279
04060                 | LR__0254
04060     7F FA 05 F6 | 	mov	result1, #127
04064     BC 00 90 FD | 	jmp	#LR__0279
04068                 | LR__0255
04068     80 FA 05 F6 | 	mov	result1, #128
0406c     B4 00 90 FD | 	jmp	#LR__0279
04070                 | LR__0256
04070     55 FA 05 F6 | 	mov	result1, #85
04074     AC 00 90 FD | 	jmp	#LR__0279
04078                 | LR__0257
04078     75 FA 05 F6 | 	mov	result1, #117
0407c     A4 00 90 FD | 	jmp	#LR__0279
04080                 | LR__0258
04080     42 FA 05 F6 | 	mov	result1, #66
04084     9C 00 90 FD | 	jmp	#LR__0279
04088                 | LR__0259
04088     42 FA 05 F6 | 	mov	result1, #66
0408c     94 00 90 FD | 	jmp	#LR__0279
04090                 | LR__0260
04090     81 FA 05 F6 | 	mov	result1, #129
04094     8C 00 90 FD | 	jmp	#LR__0279
04098                 | LR__0261
04098     81 FA 05 F6 | 	mov	result1, #129
0409c     84 00 90 FD | 	jmp	#LR__0279
040a0                 | LR__0262
040a0     44 FA 05 F6 | 	mov	result1, #68
040a4     7C 00 90 FD | 	jmp	#LR__0279
040a8                 | LR__0263
040a8     44 FA 05 F6 | 	mov	result1, #68
040ac     74 00 90 FD | 	jmp	#LR__0279
040b0                 | LR__0264
040b0     88 FA 05 F6 | 	mov	result1, #136
040b4     6C 00 90 FD | 	jmp	#LR__0279
040b8                 | LR__0265
040b8     4D FA 05 F6 | 	mov	result1, #77
040bc     64 00 90 FD | 	jmp	#LR__0279
040c0                 | LR__0266
040c0     51 FA 05 F6 | 	mov	result1, #81
040c4     5C 00 90 FD | 	jmp	#LR__0279
040c8                 | LR__0267
040c8     51 FA 05 F6 | 	mov	result1, #81
040cc     54 00 90 FD | 	jmp	#LR__0279
040d0                 | LR__0268
040d0     6D FA 05 F6 | 	mov	result1, #109
040d4     4C 00 90 FD | 	jmp	#LR__0279
040d8                 | LR__0269
040d8     6D FA 05 F6 | 	mov	result1, #109
040dc     44 00 90 FD | 	jmp	#LR__0279
040e0                 | LR__0270
040e0     5B FA 05 F6 | 	mov	result1, #91
040e4     3C 00 90 FD | 	jmp	#LR__0279
040e8                 | LR__0271
040e8     56 FA 05 F6 | 	mov	result1, #86
040ec     34 00 90 FD | 	jmp	#LR__0279
040f0                 | LR__0272
040f0     70 FA 05 F6 | 	mov	result1, #112
040f4     2C 00 90 FD | 	jmp	#LR__0279
040f8                 | LR__0273
040f8     70 FA 05 F6 | 	mov	result1, #112
040fc     24 00 90 FD | 	jmp	#LR__0279
04100                 | LR__0274
04100     57 FA 05 F6 | 	mov	result1, #87
04104     1C 00 90 FD | 	jmp	#LR__0279
04108                 | LR__0275
04108     57 FA 05 F6 | 	mov	result1, #87
0410c     14 00 90 FD | 	jmp	#LR__0279
04110                 | LR__0276
04110     77 FA 05 F6 | 	mov	result1, #119
04114     0C 00 90 FD | 	jmp	#LR__0279
04118                 | LR__0277
04118     78 FA 05 F6 | 	mov	result1, #120
0411c     04 00 90 FD | 	jmp	#LR__0279
04120                 | LR__0278
04120     00 FA 05 F6 | 	mov	result1, #0
04124                 | LR__0279
04124     A7 F0 03 F6 | 	mov	ptra, fp
04128     B2 00 A0 FD | 	call	#popregs_
0412c                 | _iscommand_ret
0412c     2D 00 64 FD | 	ret
04130                 | 
04130                 | ' 
04130                 | ' function isfunction(s as string) as ubyte
04130                 | _isfunction
04130     01 4A 05 F6 | 	mov	COUNT_, #1
04134     A8 00 A0 FD | 	call	#pushregs_
04138                 | ' 
04138                 | ' select case s
04138     09 1F 02 F6 | 	mov	local01, arg01
0413c     43 01 00 FF 
04140     50 14 06 F6 | 	mov	arg02, ##@LR__4463
04144     0F 13 02 F6 | 	mov	arg01, local01
04148     B4 4C B1 FD | 	call	#__system___string_cmp
0414c     00 FA 0D F2 | 	cmp	result1, #0 wz
04150     CC 01 90 AD |  if_e	jmp	#LR__0280
04154     43 01 00 FF 
04158     55 14 06 F6 | 	mov	arg02, ##@LR__4464
0415c     0F 13 02 F6 | 	mov	arg01, local01
04160     9C 4C B1 FD | 	call	#__system___string_cmp
04164     00 FA 0D F2 | 	cmp	result1, #0 wz
04168     BC 01 90 AD |  if_e	jmp	#LR__0281
0416c     43 01 00 FF 
04170     5A 14 06 F6 | 	mov	arg02, ##@LR__4465
04174     0F 13 02 F6 | 	mov	arg01, local01
04178     84 4C B1 FD | 	call	#__system___string_cmp
0417c     00 FA 0D F2 | 	cmp	result1, #0 wz
04180     AC 01 90 AD |  if_e	jmp	#LR__0282
04184     43 01 00 FF 
04188     5E 14 06 F6 | 	mov	arg02, ##@LR__4466
0418c     0F 13 02 F6 | 	mov	arg01, local01
04190     6C 4C B1 FD | 	call	#__system___string_cmp
04194     00 FA 0D F2 | 	cmp	result1, #0 wz
04198     9C 01 90 AD |  if_e	jmp	#LR__0283
0419c     43 01 00 FF 
041a0     62 14 06 F6 | 	mov	arg02, ##@LR__4467
041a4     0F 13 02 F6 | 	mov	arg01, local01
041a8     54 4C B1 FD | 	call	#__system___string_cmp
041ac     00 FA 0D F2 | 	cmp	result1, #0 wz
041b0     8C 01 90 AD |  if_e	jmp	#LR__0284
041b4     43 01 00 FF 
041b8     6B 14 06 F6 | 	mov	arg02, ##@LR__4468
041bc     0F 13 02 F6 | 	mov	arg01, local01
041c0     3C 4C B1 FD | 	call	#__system___string_cmp
041c4     00 FA 0D F2 | 	cmp	result1, #0 wz
041c8     7C 01 90 AD |  if_e	jmp	#LR__0285
041cc     43 01 00 FF 
041d0     6F 14 06 F6 | 	mov	arg02, ##@LR__4469
041d4     0F 13 02 F6 | 	mov	arg01, local01
041d8     24 4C B1 FD | 	call	#__system___string_cmp
041dc     00 FA 0D F2 | 	cmp	result1, #0 wz
041e0     6C 01 90 AD |  if_e	jmp	#LR__0286
041e4     43 01 00 FF 
041e8     77 14 06 F6 | 	mov	arg02, ##@LR__4470
041ec     0F 13 02 F6 | 	mov	arg01, local01
041f0     0C 4C B1 FD | 	call	#__system___string_cmp
041f4     00 FA 0D F2 | 	cmp	result1, #0 wz
041f8     5C 01 90 AD |  if_e	jmp	#LR__0287
041fc     43 01 00 FF 
04200     7E 14 06 F6 | 	mov	arg02, ##@LR__4471
04204     0F 13 02 F6 | 	mov	arg01, local01
04208     F4 4B B1 FD | 	call	#__system___string_cmp
0420c     00 FA 0D F2 | 	cmp	result1, #0 wz
04210     4C 01 90 AD |  if_e	jmp	#LR__0288
04214     43 01 00 FF 
04218     85 14 06 F6 | 	mov	arg02, ##@LR__4472
0421c     0F 13 02 F6 | 	mov	arg01, local01
04220     DC 4B B1 FD | 	call	#__system___string_cmp
04224     00 FA 0D F2 | 	cmp	result1, #0 wz
04228     3C 01 90 AD |  if_e	jmp	#LR__0289
0422c     43 01 00 FF 
04230     8C 14 06 F6 | 	mov	arg02, ##@LR__4473
04234     0F 13 02 F6 | 	mov	arg01, local01
04238     C4 4B B1 FD | 	call	#__system___string_cmp
0423c     00 FA 0D F2 | 	cmp	result1, #0 wz
04240     2C 01 90 AD |  if_e	jmp	#LR__0290
04244     43 01 00 FF 
04248     93 14 06 F6 | 	mov	arg02, ##@LR__4474
0424c     0F 13 02 F6 | 	mov	arg01, local01
04250     AC 4B B1 FD | 	call	#__system___string_cmp
04254     00 FA 0D F2 | 	cmp	result1, #0 wz
04258     1C 01 90 AD |  if_e	jmp	#LR__0291
0425c     43 01 00 FF 
04260     9B 14 06 F6 | 	mov	arg02, ##@LR__4475
04264     0F 13 02 F6 | 	mov	arg01, local01
04268     94 4B B1 FD | 	call	#__system___string_cmp
0426c     00 FA 0D F2 | 	cmp	result1, #0 wz
04270     0C 01 90 AD |  if_e	jmp	#LR__0292
04274     43 01 00 FF 
04278     A1 14 06 F6 | 	mov	arg02, ##@LR__4476
0427c     0F 13 02 F6 | 	mov	arg01, local01
04280     7C 4B B1 FD | 	call	#__system___string_cmp
04284     00 FA 0D F2 | 	cmp	result1, #0 wz
04288     FC 00 90 AD |  if_e	jmp	#LR__0293
0428c     43 01 00 FF 
04290     A7 14 06 F6 | 	mov	arg02, ##@LR__4477
04294     0F 13 02 F6 | 	mov	arg01, local01
04298     64 4B B1 FD | 	call	#__system___string_cmp
0429c     00 FA 0D F2 | 	cmp	result1, #0 wz
042a0     EC 00 90 AD |  if_e	jmp	#LR__0294
042a4     43 01 00 FF 
042a8     AB 14 06 F6 | 	mov	arg02, ##@LR__4478
042ac     0F 13 02 F6 | 	mov	arg01, local01
042b0     4C 4B B1 FD | 	call	#__system___string_cmp
042b4     00 FA 0D F2 | 	cmp	result1, #0 wz
042b8     DC 00 90 AD |  if_e	jmp	#LR__0295
042bc     43 01 00 FF 
042c0     AF 14 06 F6 | 	mov	arg02, ##@LR__4479
042c4     0F 13 02 F6 | 	mov	arg01, local01
042c8     34 4B B1 FD | 	call	#__system___string_cmp
042cc     00 FA 0D F2 | 	cmp	result1, #0 wz
042d0     CC 00 90 AD |  if_e	jmp	#LR__0296
042d4     43 01 00 FF 
042d8     B3 14 06 F6 | 	mov	arg02, ##@LR__4480
042dc     0F 13 02 F6 | 	mov	arg01, local01
042e0     1C 4B B1 FD | 	call	#__system___string_cmp
042e4     00 FA 0D F2 | 	cmp	result1, #0 wz
042e8     BC 00 90 AD |  if_e	jmp	#LR__0297
042ec     43 01 00 FF 
042f0     B9 14 06 F6 | 	mov	arg02, ##@LR__4481
042f4     0F 13 02 F6 | 	mov	arg01, local01
042f8     04 4B B1 FD | 	call	#__system___string_cmp
042fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04300     AC 00 90 AD |  if_e	jmp	#LR__0298
04304     43 01 00 FF 
04308     BF 14 06 F6 | 	mov	arg02, ##@LR__4482
0430c     0F 13 02 F6 | 	mov	arg01, local01
04310     EC 4A B1 FD | 	call	#__system___string_cmp
04314     00 FA 0D F2 | 	cmp	result1, #0 wz
04318     9C 00 90 AD |  if_e	jmp	#LR__0299
0431c     A0 00 90 FD | 	jmp	#LR__0300
04320                 | LR__0280
04320     85 FA 05 F6 | 	mov	result1, #133
04324     9C 00 90 FD | 	jmp	#LR__0301
04328                 | LR__0281
04328     84 FA 05 F6 | 	mov	result1, #132
0432c     94 00 90 FD | 	jmp	#LR__0301
04330                 | LR__0282
04330     86 FA 05 F6 | 	mov	result1, #134
04334     8C 00 90 FD | 	jmp	#LR__0301
04338                 | LR__0283
04338     82 FA 05 F6 | 	mov	result1, #130
0433c     84 00 90 FD | 	jmp	#LR__0301
04340                 | LR__0284
04340     6F FA 05 F6 | 	mov	result1, #111
04344     7C 00 90 FD | 	jmp	#LR__0301
04348                 | LR__0285
04348     6F FA 05 F6 | 	mov	result1, #111
0434c     74 00 90 FD | 	jmp	#LR__0301
04350                 | LR__0286
04350     62 FA 05 F6 | 	mov	result1, #98
04354     6C 00 90 FD | 	jmp	#LR__0301
04358                 | LR__0287
04358     66 FA 05 F6 | 	mov	result1, #102
0435c     64 00 90 FD | 	jmp	#LR__0301
04360                 | LR__0288
04360     67 FA 05 F6 | 	mov	result1, #103
04364     5C 00 90 FD | 	jmp	#LR__0301
04368                 | LR__0289
04368     64 FA 05 F6 | 	mov	result1, #100
0436c     54 00 90 FD | 	jmp	#LR__0301
04370                 | LR__0290
04370     65 FA 05 F6 | 	mov	result1, #101
04374     4C 00 90 FD | 	jmp	#LR__0301
04378                 | LR__0291
04378     7B FA 05 F6 | 	mov	result1, #123
0437c     44 00 90 FD | 	jmp	#LR__0301
04380                 | LR__0292
04380     76 FA 05 F6 | 	mov	result1, #118
04384     3C 00 90 FD | 	jmp	#LR__0301
04388                 | LR__0293
04388     7A FA 05 F6 | 	mov	result1, #122
0438c     34 00 90 FD | 	jmp	#LR__0301
04390                 | LR__0294
04390     54 FA 05 F6 | 	mov	result1, #84
04394     2C 00 90 FD | 	jmp	#LR__0301
04398                 | LR__0295
04398     6B FA 05 F6 | 	mov	result1, #107
0439c     24 00 90 FD | 	jmp	#LR__0301
043a0                 | LR__0296
043a0     87 FA 05 F6 | 	mov	result1, #135
043a4     1C 00 90 FD | 	jmp	#LR__0301
043a8                 | LR__0297
043a8     6A FA 05 F6 | 	mov	result1, #106
043ac     14 00 90 FD | 	jmp	#LR__0301
043b0                 | LR__0298
043b0     6E FA 05 F6 | 	mov	result1, #110
043b4     0C 00 90 FD | 	jmp	#LR__0301
043b8                 | LR__0299
043b8     83 FA 05 F6 | 	mov	result1, #131
043bc     04 00 90 FD | 	jmp	#LR__0301
043c0                 | LR__0300
043c0     00 FA 05 F6 | 	mov	result1, #0
043c4                 | LR__0301
043c4     A7 F0 03 F6 | 	mov	ptra, fp
043c8     B2 00 A0 FD | 	call	#popregs_
043cc                 | _isfunction_ret
043cc     2D 00 64 FD | 	ret
043d0                 | 
043d0                 | ' 
043d0                 | ' function isname(s as string) as boolean
043d0                 | _isname
043d0     0D 4A 05 F6 | 	mov	COUNT_, #13
043d4     A8 00 A0 FD | 	call	#pushregs_
043d8     09 1F 02 F6 | 	mov	local01, arg01
043dc     09 21 02 F6 | 	mov	local02, arg01
043e0     97 06 48 FB | 	callpa	#(@LR__0311-@LR__0310)>>2,fcache_load_ptr_
043e4                 | LR__0310
043e4     10 FB C9 FA | 	rdbyte	result1, local02 wz
043e8     01 20 06 51 |  if_ne	add	local02, #1
043ec     F4 FF 9F 5D |  if_ne	jmp	#LR__0310
043f0                 | LR__0311
043f0     09 21 82 F1 | 	sub	local02, arg01
043f4     10 FB 01 F6 | 	mov	result1, local02
043f8     FD 22 0A F6 | 	mov	local03, result1 wz
043fc     00 FA 05 A6 |  if_e	mov	result1, #0
04400     34 02 90 AD |  if_e	jmp	#LR__0323
04404     0F 13 02 F6 | 	mov	arg01, local01
04408     01 14 06 F6 | 	mov	arg02, #1
0440c     01 16 06 F6 | 	mov	arg03, #1
04410     EC 6A B1 FD | 	call	#__system__Mid_S
04414     FD 24 02 F6 | 	mov	local04, result1
04418                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04418     43 01 00 FF 
0441c     C3 14 06 F6 | 	mov	arg02, ##@LR__4483
04420     12 13 02 F6 | 	mov	arg01, local04
04424     D8 49 B1 FD | 	call	#__system___string_cmp
04428     00 FA 55 F2 | 	cmps	result1, #0 wc
0442c     18 00 90 CD |  if_b	jmp	#LR__0312
04430     43 01 00 FF 
04434     C5 14 06 F6 | 	mov	arg02, ##@LR__4484
04438     12 13 02 F6 | 	mov	arg01, local04
0443c     C0 49 B1 FD | 	call	#__system___string_cmp
04440     01 FA 55 F2 | 	cmps	result1, #1 wc
04444     1C 00 90 CD |  if_b	jmp	#LR__0313
04448                 | LR__0312
04448     43 01 00 FF 
0444c     C7 14 06 F6 | 	mov	arg02, ##@LR__4485
04450     12 13 02 F6 | 	mov	arg01, local04
04454     A8 49 B1 FD | 	call	#__system___string_cmp
04458     00 FA 0D F2 | 	cmp	result1, #0 wz
0445c     00 FA 05 56 |  if_ne	mov	result1, #0
04460     D4 01 90 5D |  if_ne	jmp	#LR__0323
04464                 | LR__0313
04464                 | ' if l>2 then 
04464     03 22 56 F2 | 	cmps	local03, #3 wc
04468     C8 01 90 CD |  if_b	jmp	#LR__0322
0446c                 | '   for i=2 to l
0446c     02 26 06 F6 | 	mov	local05, #2
04470     11 29 02 F6 | 	mov	local06, local03
04474     01 28 06 F1 | 	add	local06, #1
04478                 | LR__0314
04478     14 27 52 F2 | 	cmps	local05, local06 wc
0447c     B4 01 90 3D |  if_ae	jmp	#LR__0321
04480     0F 13 02 F6 | 	mov	arg01, local01
04484     13 15 02 F6 | 	mov	arg02, local05
04488     01 16 06 F6 | 	mov	arg03, #1
0448c     70 6A B1 FD | 	call	#__system__Mid_S
04490     FD 24 02 F6 | 	mov	local04, result1
04494                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
04494     11 27 52 F2 | 	cmps	local05, local03 wc
04498     9C 00 90 3D |  if_ae	jmp	#LR__0317
0449c     43 01 00 FF 
044a0     C9 14 06 F6 | 	mov	arg02, ##@LR__4486
044a4     12 13 02 F6 | 	mov	arg01, local04
044a8     54 49 B1 FD | 	call	#__system___string_cmp
044ac     00 FA 55 F2 | 	cmps	result1, #0 wc
044b0     18 00 90 CD |  if_b	jmp	#LR__0315
044b4     43 01 00 FF 
044b8     CB 14 06 F6 | 	mov	arg02, ##@LR__4487
044bc     12 13 02 F6 | 	mov	arg01, local04
044c0     3C 49 B1 FD | 	call	#__system___string_cmp
044c4     01 FA 55 F2 | 	cmps	result1, #1 wc
044c8     6C 00 90 CD |  if_b	jmp	#LR__0317
044cc                 | LR__0315
044cc     43 01 00 FF 
044d0     CD 14 06 F6 | 	mov	arg02, ##@LR__4488
044d4     12 13 02 F6 | 	mov	arg01, local04
044d8     24 49 B1 FD | 	call	#__system___string_cmp
044dc     00 FA 55 F2 | 	cmps	result1, #0 wc
044e0     18 00 90 CD |  if_b	jmp	#LR__0316
044e4     43 01 00 FF 
044e8     CF 14 06 F6 | 	mov	arg02, ##@LR__4489
044ec     12 13 02 F6 | 	mov	arg01, local04
044f0     0C 49 B1 FD | 	call	#__system___string_cmp
044f4     01 FA 55 F2 | 	cmps	result1, #1 wc
044f8     3C 00 90 CD |  if_b	jmp	#LR__0317
044fc                 | LR__0316
044fc     43 01 00 FF 
04500     D1 2A 06 F6 | 	mov	local07, ##@LR__4490
04504     12 13 02 F6 | 	mov	arg01, local04
04508     15 15 02 F6 | 	mov	arg02, local07
0450c     F0 48 B1 FD | 	call	#__system___string_cmp
04510     00 FA 0D F2 | 	cmp	result1, #0 wz
04514     20 00 90 AD |  if_e	jmp	#LR__0317
04518     43 01 00 FF 
0451c     D3 2C 06 F6 | 	mov	local08, ##@LR__4491
04520     12 13 02 F6 | 	mov	arg01, local04
04524     16 15 02 F6 | 	mov	arg02, local08
04528     D4 48 B1 FD | 	call	#__system___string_cmp
0452c     FD 2E 0A F6 | 	mov	local09, result1 wz
04530     00 FA 05 56 |  if_ne	mov	result1, #0
04534     00 01 90 5D |  if_ne	jmp	#LR__0323
04538                 | LR__0317
04538                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04538     11 27 0A F2 | 	cmp	local05, local03 wz
0453c     EC 00 90 5D |  if_ne	jmp	#LR__0320
04540     43 01 00 FF 
04544     D5 30 06 F6 | 	mov	local10, ##@LR__4492
04548     12 13 02 F6 | 	mov	arg01, local04
0454c     18 15 02 F6 | 	mov	arg02, local10
04550     AC 48 B1 FD | 	call	#__system___string_cmp
04554     FD 32 02 F6 | 	mov	local11, result1
04558     00 32 56 F2 | 	cmps	local11, #0 wc
0455c     1C 00 90 CD |  if_b	jmp	#LR__0318
04560     43 01 00 FF 
04564     D7 14 06 F6 | 	mov	arg02, ##@LR__4493
04568     12 13 02 F6 | 	mov	arg01, local04
0456c     90 48 B1 FD | 	call	#__system___string_cmp
04570     FD 30 02 F6 | 	mov	local10, result1
04574     01 30 56 F2 | 	cmps	local10, #1 wc
04578     B0 00 90 CD |  if_b	jmp	#LR__0320
0457c                 | LR__0318
0457c     43 01 00 FF 
04580     D9 14 06 F6 | 	mov	arg02, ##@LR__4494
04584     12 13 02 F6 | 	mov	arg01, local04
04588     74 48 B1 FD | 	call	#__system___string_cmp
0458c     00 FA 55 F2 | 	cmps	result1, #0 wc
04590     1C 00 90 CD |  if_b	jmp	#LR__0319
04594     43 01 00 FF 
04598     DB 2E 06 F6 | 	mov	local09, ##@LR__4495
0459c     12 13 02 F6 | 	mov	arg01, local04
045a0     17 15 02 F6 | 	mov	arg02, local09
045a4     58 48 B1 FD | 	call	#__system___string_cmp
045a8     01 FA 55 F2 | 	cmps	result1, #1 wc
045ac     7C 00 90 CD |  if_b	jmp	#LR__0320
045b0                 | LR__0319
045b0     43 01 00 FF 
045b4     DD 2E 06 F6 | 	mov	local09, ##@LR__4496
045b8     12 13 02 F6 | 	mov	arg01, local04
045bc     17 15 02 F6 | 	mov	arg02, local09
045c0     3C 48 B1 FD | 	call	#__system___string_cmp
045c4     00 FA 4D F2 | 	cmps	result1, #0 wz
045c8     60 00 90 AD |  if_e	jmp	#LR__0320
045cc     43 01 00 FF 
045d0     DF 2C 06 F6 | 	mov	local08, ##@LR__4497
045d4     12 13 02 F6 | 	mov	arg01, local04
045d8     16 15 02 F6 | 	mov	arg02, local08
045dc     20 48 B1 FD | 	call	#__system___string_cmp
045e0     FD 2E 0A F6 | 	mov	local09, result1 wz
045e4     44 00 90 AD |  if_e	jmp	#LR__0320
045e8     43 01 00 FF 
045ec     E1 34 06 F6 | 	mov	local12, ##@LR__4498
045f0     1A 2D 02 F6 | 	mov	local08, local12
045f4     12 13 02 F6 | 	mov	arg01, local04
045f8     16 15 02 F6 | 	mov	arg02, local08
045fc     00 48 B1 FD | 	call	#__system___string_cmp
04600     FD 2A 0A F6 | 	mov	local07, result1 wz
04604     24 00 90 AD |  if_e	jmp	#LR__0320
04608     43 01 00 FF 
0460c     E3 36 06 F6 | 	mov	local13, ##@LR__4499
04610     1B 35 02 F6 | 	mov	local12, local13
04614     12 13 02 F6 | 	mov	arg01, local04
04618     1A 15 02 F6 | 	mov	arg02, local12
0461c     E0 47 B1 FD | 	call	#__system___string_cmp
04620     FD 2C 0A F6 | 	mov	local08, result1 wz
04624     00 FA 05 56 |  if_ne	mov	result1, #0
04628     0C 00 90 5D |  if_ne	jmp	#LR__0323
0462c                 | LR__0320
0462c     01 26 06 F1 | 	add	local05, #1
04630     44 FE 9F FD | 	jmp	#LR__0314
04634                 | LR__0321
04634                 | LR__0322
04634                 | ' return true
04634     01 FA 65 F6 | 	neg	result1, #1
04638                 | LR__0323
04638     A7 F0 03 F6 | 	mov	ptra, fp
0463c     B2 00 A0 FD | 	call	#popregs_
04640                 | _isname_ret
04640     2D 00 64 FD | 	ret
04644                 | 
04644                 | ' 
04644                 | ' function isnum(s as string) as boolean
04644                 | _isnum
04644     0D 4A 05 F6 | 	mov	COUNT_, #13
04648     A8 00 A0 FD | 	call	#pushregs_
0464c     09 1F 02 F6 | 	mov	local01, arg01
04650     00 20 06 F6 | 	mov	local02, #0
04654     00 22 06 F6 | 	mov	local03, #0
04658     0F 13 02 F6 | 	mov	arg01, local01
0465c     09 25 02 F6 | 	mov	local04, arg01
04660     97 06 48 FB | 	callpa	#(@LR__0331-@LR__0330)>>2,fcache_load_ptr_
04664                 | LR__0330
04664     12 FB C9 FA | 	rdbyte	result1, local04 wz
04668     01 24 06 51 |  if_ne	add	local04, #1
0466c     F4 FF 9F 5D |  if_ne	jmp	#LR__0330
04670                 | LR__0331
04670     09 25 82 F1 | 	sub	local04, arg01
04674     12 FB 01 F6 | 	mov	result1, local04
04678     FD 26 0A F6 | 	mov	local05, result1 wz
0467c     00 FA 05 A6 |  if_e	mov	result1, #0
04680     8C 02 90 AD |  if_e	jmp	#LR__0342
04684     0F 13 02 F6 | 	mov	arg01, local01
04688     01 14 06 F6 | 	mov	arg02, #1
0468c     01 16 06 F6 | 	mov	arg03, #1
04690     6C 68 B1 FD | 	call	#__system__Mid_S
04694     FD 28 02 F6 | 	mov	local06, result1
04698                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04698     43 01 00 FF 
0469c     E5 14 06 F6 | 	mov	arg02, ##@LR__4500
046a0     14 13 02 F6 | 	mov	arg01, local06
046a4     58 47 B1 FD | 	call	#__system___string_cmp
046a8     00 FA 55 F2 | 	cmps	result1, #0 wc
046ac     18 00 90 CD |  if_b	jmp	#LR__0332
046b0     43 01 00 FF 
046b4     E7 14 06 F6 | 	mov	arg02, ##@LR__4501
046b8     14 13 02 F6 | 	mov	arg01, local06
046bc     40 47 B1 FD | 	call	#__system___string_cmp
046c0     01 FA 55 F2 | 	cmps	result1, #1 wc
046c4     78 00 90 CD |  if_b	jmp	#LR__0333
046c8                 | LR__0332
046c8     43 01 00 FF 
046cc     E9 14 06 F6 | 	mov	arg02, ##@LR__4502
046d0     14 13 02 F6 | 	mov	arg01, local06
046d4     28 47 B1 FD | 	call	#__system___string_cmp
046d8     00 FA 0D F2 | 	cmp	result1, #0 wz
046dc     60 00 90 AD |  if_e	jmp	#LR__0333
046e0     43 01 00 FF 
046e4     EB 2A 06 F6 | 	mov	local07, ##@LR__4503
046e8     14 13 02 F6 | 	mov	arg01, local06
046ec     15 15 02 F6 | 	mov	arg02, local07
046f0     0C 47 B1 FD | 	call	#__system___string_cmp
046f4     00 FA 0D F2 | 	cmp	result1, #0 wz
046f8     44 00 90 AD |  if_e	jmp	#LR__0333
046fc     43 01 00 FF 
04700     ED 2C 06 F6 | 	mov	local08, ##@LR__4504
04704     16 2B 02 F6 | 	mov	local07, local08
04708     14 13 02 F6 | 	mov	arg01, local06
0470c     15 15 02 F6 | 	mov	arg02, local07
04710     EC 46 B1 FD | 	call	#__system___string_cmp
04714     00 FA 4D F2 | 	cmps	result1, #0 wz
04718     24 00 90 AD |  if_e	jmp	#LR__0333
0471c     43 01 00 FF 
04720     EF 2E 06 F6 | 	mov	local09, ##@LR__4505
04724     17 2D 02 F6 | 	mov	local08, local09
04728     14 13 02 F6 | 	mov	arg01, local06
0472c     16 15 02 F6 | 	mov	arg02, local08
04730     CC 46 B1 FD | 	call	#__system___string_cmp
04734     FD 2A 0A F6 | 	mov	local07, result1 wz
04738     00 FA 05 56 |  if_ne	mov	result1, #0
0473c     D0 01 90 5D |  if_ne	jmp	#LR__0342
04740                 | LR__0333
04740                 | ' if m$="." then ds=1
04740     43 01 00 FF 
04744     F1 14 06 F6 | 	mov	arg02, ##@LR__4506
04748     14 13 02 F6 | 	mov	arg01, local06
0474c     B0 46 B1 FD | 	call	#__system___string_cmp
04750     00 FA 0D F2 | 	cmp	result1, #0 wz
04754     01 20 06 A6 |  if_e	mov	local02, #1
04758                 | ' if l>1 then 
04758     02 26 56 F2 | 	cmps	local05, #2 wc
0475c     AC 01 90 CD |  if_b	jmp	#LR__0341
04760                 | '   for i=2 to l
04760     02 30 06 F6 | 	mov	local10, #2
04764     13 33 02 F6 | 	mov	local11, local05
04768     01 32 06 F1 | 	add	local11, #1
0476c                 | LR__0334
0476c     19 31 52 F2 | 	cmps	local10, local11 wc
04770     98 01 90 3D |  if_ae	jmp	#LR__0340
04774     0F 13 02 F6 | 	mov	arg01, local01
04778     18 15 02 F6 | 	mov	arg02, local10
0477c     01 16 06 F6 | 	mov	arg03, #1
04780     7C 67 B1 FD | 	call	#__system__Mid_S
04784     FD 28 02 F6 | 	mov	local06, result1
04788                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
04788     43 01 00 FF 
0478c     F3 14 06 F6 | 	mov	arg02, ##@LR__4507
04790     14 13 02 F6 | 	mov	arg01, local06
04794     68 46 B1 FD | 	call	#__system___string_cmp
04798     00 FA 55 F2 | 	cmps	result1, #0 wc
0479c     18 00 90 CD |  if_b	jmp	#LR__0335
047a0     43 01 00 FF 
047a4     F5 14 06 F6 | 	mov	arg02, ##@LR__4508
047a8     14 13 02 F6 | 	mov	arg01, local06
047ac     50 46 B1 FD | 	call	#__system___string_cmp
047b0     01 FA 55 F2 | 	cmps	result1, #1 wc
047b4     98 00 90 CD |  if_b	jmp	#LR__0336
047b8                 | LR__0335
047b8     43 01 00 FF 
047bc     F7 14 06 F6 | 	mov	arg02, ##@LR__4509
047c0     14 13 02 F6 | 	mov	arg01, local06
047c4     38 46 B1 FD | 	call	#__system___string_cmp
047c8     00 FA 0D F2 | 	cmp	result1, #0 wz
047cc     80 00 90 AD |  if_e	jmp	#LR__0336
047d0     43 01 00 FF 
047d4     F9 2A 06 F6 | 	mov	local07, ##@LR__4510
047d8     14 13 02 F6 | 	mov	arg01, local06
047dc     15 15 02 F6 | 	mov	arg02, local07
047e0     1C 46 B1 FD | 	call	#__system___string_cmp
047e4     00 FA 4D F2 | 	cmps	result1, #0 wz
047e8     64 00 90 AD |  if_e	jmp	#LR__0336
047ec     43 01 00 FF 
047f0     FB 2C 06 F6 | 	mov	local08, ##@LR__4511
047f4     16 2B 02 F6 | 	mov	local07, local08
047f8     14 13 02 F6 | 	mov	arg01, local06
047fc     15 15 02 F6 | 	mov	arg02, local07
04800     FC 45 B1 FD | 	call	#__system___string_cmp
04804     FD 34 0A F6 | 	mov	local12, result1 wz
04808     44 00 90 AD |  if_e	jmp	#LR__0336
0480c     43 01 00 FF 
04810     FD 2E 06 F6 | 	mov	local09, ##@LR__4512
04814     17 2D 02 F6 | 	mov	local08, local09
04818     14 13 02 F6 | 	mov	arg01, local06
0481c     16 15 02 F6 | 	mov	arg02, local08
04820     DC 45 B1 FD | 	call	#__system___string_cmp
04824     FD 2A 0A F6 | 	mov	local07, result1 wz
04828     24 00 90 AD |  if_e	jmp	#LR__0336
0482c     43 01 00 FF 
04830     FF 36 06 F6 | 	mov	local13, ##@LR__4513
04834     1B 2F 02 F6 | 	mov	local09, local13
04838     14 13 02 F6 | 	mov	arg01, local06
0483c     17 15 02 F6 | 	mov	arg02, local09
04840     BC 45 B1 FD | 	call	#__system___string_cmp
04844     FD 2C 0A F6 | 	mov	local08, result1 wz
04848     00 FA 05 56 |  if_ne	mov	result1, #0
0484c     C0 00 90 5D |  if_ne	jmp	#LR__0342
04850                 | LR__0336
04850                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
04850     43 01 00 FF 
04854     01 15 06 F6 | 	mov	arg02, ##@LR__4514
04858     14 13 02 F6 | 	mov	arg01, local06
0485c     A0 45 B1 FD | 	call	#__system___string_cmp
04860     00 FA 0D F2 | 	cmp	result1, #0 wz
04864     38 00 90 5D |  if_ne	jmp	#LR__0337
04868     18 15 02 F6 | 	mov	arg02, local10
0486c     01 14 86 F1 | 	sub	arg02, #1
04870     0F 13 02 F6 | 	mov	arg01, local01
04874     01 16 06 F6 | 	mov	arg03, #1
04878     84 66 B1 FD | 	call	#__system__Mid_S
0487c     FD 12 02 F6 | 	mov	arg01, result1
04880     18 68 B1 FD | 	call	#__system__LCase_S
04884     FD 12 02 F6 | 	mov	arg01, result1
04888     43 01 00 FF 
0488c     03 15 06 F6 | 	mov	arg02, ##@LR__4515
04890     6C 45 B1 FD | 	call	#__system___string_cmp
04894     00 FA 0D F2 | 	cmp	result1, #0 wz
04898     00 FA 05 56 |  if_ne	mov	result1, #0
0489c     70 00 90 5D |  if_ne	jmp	#LR__0342
048a0                 | LR__0337
048a0                 | '     if m$="." then ds+=1: if ds>1 then return false
048a0     43 01 00 FF 
048a4     05 15 06 F6 | 	mov	arg02, ##@LR__4516
048a8     14 13 02 F6 | 	mov	arg01, local06
048ac     50 45 B1 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     01 20 06 A1 |  if_e	add	local02, #1
048b8     02 20 56 A2 |  if_e	cmps	local02, #2 wc
048bc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
048c0     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0342
048c4                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
048c4     43 01 00 FF 
048c8     07 15 06 F6 | 	mov	arg02, ##@LR__4517
048cc     14 13 02 F6 | 	mov	arg01, local06
048d0     2C 45 B1 FD | 	call	#__system___string_cmp
048d4     00 FA 4D F2 | 	cmps	result1, #0 wz
048d8     18 00 90 AD |  if_e	jmp	#LR__0338
048dc     43 01 00 FF 
048e0     09 15 06 F6 | 	mov	arg02, ##@LR__4518
048e4     14 13 02 F6 | 	mov	arg01, local06
048e8     14 45 B1 FD | 	call	#__system___string_cmp
048ec     00 FA 4D F2 | 	cmps	result1, #0 wz
048f0     10 00 90 5D |  if_ne	jmp	#LR__0339
048f4                 | LR__0338
048f4     01 22 06 F1 | 	add	local03, #1
048f8     02 22 56 F2 | 	cmps	local03, #2 wc
048fc     00 FA 05 36 |  if_ae	mov	result1, #0
04900     0C 00 90 3D |  if_ae	jmp	#LR__0342
04904                 | LR__0339
04904     01 30 06 F1 | 	add	local10, #1
04908     60 FE 9F FD | 	jmp	#LR__0334
0490c                 | LR__0340
0490c                 | LR__0341
0490c                 | ' return true
0490c     01 FA 65 F6 | 	neg	result1, #1
04910                 | LR__0342
04910     A7 F0 03 F6 | 	mov	ptra, fp
04914     B2 00 A0 FD | 	call	#popregs_
04918                 | _isnum_ret
04918     2D 00 64 FD | 	ret
0491c                 | 
0491c                 | '   
0491c                 | ' function isint(s as string) as boolean
0491c                 | _isint
0491c     05 4A 05 F6 | 	mov	COUNT_, #5
04920     A8 00 A0 FD | 	call	#pushregs_
04924     09 1F 02 F6 | 	mov	local01, arg01
04928     09 21 02 F6 | 	mov	local02, arg01
0492c     97 06 48 FB | 	callpa	#(@LR__0351-@LR__0350)>>2,fcache_load_ptr_
04930                 | LR__0350
04930     10 FB C9 FA | 	rdbyte	result1, local02 wz
04934     01 20 06 51 |  if_ne	add	local02, #1
04938     F4 FF 9F 5D |  if_ne	jmp	#LR__0350
0493c                 | LR__0351
0493c     09 21 82 F1 | 	sub	local02, arg01
04940     10 FB 01 F6 | 	mov	result1, local02
04944     FD 20 0A F6 | 	mov	local02, result1 wz
04948     00 FA 05 A6 |  if_e	mov	result1, #0
0494c     18 01 90 AD |  if_e	jmp	#LR__0359
04950     0F 13 02 F6 | 	mov	arg01, local01
04954     01 14 06 F6 | 	mov	arg02, #1
04958     01 16 06 F6 | 	mov	arg03, #1
0495c     A0 65 B1 FD | 	call	#__system__Mid_S
04960     FD 22 02 F6 | 	mov	local03, result1
04964                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04964     43 01 00 FF 
04968     0B 15 06 F6 | 	mov	arg02, ##@LR__4519
0496c     11 13 02 F6 | 	mov	arg01, local03
04970     8C 44 B1 FD | 	call	#__system___string_cmp
04974     00 FA 55 F2 | 	cmps	result1, #0 wc
04978     18 00 90 CD |  if_b	jmp	#LR__0352
0497c     43 01 00 FF 
04980     0D 15 06 F6 | 	mov	arg02, ##@LR__4520
04984     11 13 02 F6 | 	mov	arg01, local03
04988     74 44 B1 FD | 	call	#__system___string_cmp
0498c     01 FA 55 F2 | 	cmps	result1, #1 wc
04990     4C 00 90 CD |  if_b	jmp	#LR__0353
04994                 | LR__0352
04994     43 01 00 FF 
04998     0F 15 06 F6 | 	mov	arg02, ##@LR__4521
0499c     11 13 02 F6 | 	mov	arg01, local03
049a0     5C 44 B1 FD | 	call	#__system___string_cmp
049a4     00 FA 0D F2 | 	cmp	result1, #0 wz
049a8     34 00 90 AD |  if_e	jmp	#LR__0353
049ac     43 01 00 FF 
049b0     11 15 06 F6 | 	mov	arg02, ##@LR__4522
049b4     11 13 02 F6 | 	mov	arg01, local03
049b8     44 44 B1 FD | 	call	#__system___string_cmp
049bc     00 FA 0D F2 | 	cmp	result1, #0 wz
049c0     1C 00 90 AD |  if_e	jmp	#LR__0353
049c4     43 01 00 FF 
049c8     13 15 06 F6 | 	mov	arg02, ##@LR__4523
049cc     11 13 02 F6 | 	mov	arg01, local03
049d0     2C 44 B1 FD | 	call	#__system___string_cmp
049d4     00 FA 0D F2 | 	cmp	result1, #0 wz
049d8     00 FA 05 56 |  if_ne	mov	result1, #0
049dc     88 00 90 5D |  if_ne	jmp	#LR__0359
049e0                 | LR__0353
049e0                 | ' 
049e0                 | ' if l>1 then 
049e0     02 20 56 F2 | 	cmps	local02, #2 wc
049e4     7C 00 90 CD |  if_b	jmp	#LR__0358
049e8                 | '   for i=2 to l
049e8     02 24 06 F6 | 	mov	local04, #2
049ec     10 27 02 F6 | 	mov	local05, local02
049f0     01 26 06 F1 | 	add	local05, #1
049f4                 | LR__0354
049f4     13 25 52 F2 | 	cmps	local04, local05 wc
049f8     68 00 90 3D |  if_ae	jmp	#LR__0357
049fc     0F 13 02 F6 | 	mov	arg01, local01
04a00     12 15 02 F6 | 	mov	arg02, local04
04a04     01 16 06 F6 | 	mov	arg03, #1
04a08     F4 64 B1 FD | 	call	#__system__Mid_S
04a0c     FD 22 02 F6 | 	mov	local03, result1
04a10                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04a10     43 01 00 FF 
04a14     15 15 06 F6 | 	mov	arg02, ##@LR__4524
04a18     11 13 02 F6 | 	mov	arg01, local03
04a1c     E0 43 B1 FD | 	call	#__system___string_cmp
04a20     00 FA 55 F2 | 	cmps	result1, #0 wc
04a24     18 00 90 CD |  if_b	jmp	#LR__0355
04a28     43 01 00 FF 
04a2c     17 15 06 F6 | 	mov	arg02, ##@LR__4525
04a30     11 13 02 F6 | 	mov	arg01, local03
04a34     C8 43 B1 FD | 	call	#__system___string_cmp
04a38     01 FA 55 F2 | 	cmps	result1, #1 wc
04a3c     1C 00 90 CD |  if_b	jmp	#LR__0356
04a40                 | LR__0355
04a40     43 01 00 FF 
04a44     19 15 06 F6 | 	mov	arg02, ##@LR__4526
04a48     11 13 02 F6 | 	mov	arg01, local03
04a4c     B0 43 B1 FD | 	call	#__system___string_cmp
04a50     00 FA 0D F2 | 	cmp	result1, #0 wz
04a54     00 FA 05 56 |  if_ne	mov	result1, #0
04a58     0C 00 90 5D |  if_ne	jmp	#LR__0359
04a5c                 | LR__0356
04a5c     01 24 06 F1 | 	add	local04, #1
04a60     90 FF 9F FD | 	jmp	#LR__0354
04a64                 | LR__0357
04a64                 | LR__0358
04a64                 | ' return true
04a64     01 FA 65 F6 | 	neg	result1, #1
04a68                 | LR__0359
04a68     A7 F0 03 F6 | 	mov	ptra, fp
04a6c     B2 00 A0 FD | 	call	#popregs_
04a70                 | _isint_ret
04a70     2D 00 64 FD | 	ret
04a74                 | 
04a74                 | ' 
04a74                 | ' function isdec(s as string) as boolean
04a74                 | _isdec
04a74     05 4A 05 F6 | 	mov	COUNT_, #5
04a78     A8 00 A0 FD | 	call	#pushregs_
04a7c     09 1F 02 F6 | 	mov	local01, arg01
04a80     09 21 02 F6 | 	mov	local02, arg01
04a84     97 06 48 FB | 	callpa	#(@LR__0361-@LR__0360)>>2,fcache_load_ptr_
04a88                 | LR__0360
04a88     10 FB C9 FA | 	rdbyte	result1, local02 wz
04a8c     01 20 06 51 |  if_ne	add	local02, #1
04a90     F4 FF 9F 5D |  if_ne	jmp	#LR__0360
04a94                 | LR__0361
04a94     09 21 82 F1 | 	sub	local02, arg01
04a98     10 FB 01 F6 | 	mov	result1, local02
04a9c     FD 20 0A F6 | 	mov	local02, result1 wz
04aa0     00 FA 05 A6 |  if_e	mov	result1, #0
04aa4     80 00 90 AD |  if_e	jmp	#LR__0366
04aa8                 | ' for i=1 to l
04aa8     01 22 06 F6 | 	mov	local03, #1
04aac     10 25 02 F6 | 	mov	local04, local02
04ab0     01 24 06 F1 | 	add	local04, #1
04ab4                 | LR__0362
04ab4     12 23 52 F2 | 	cmps	local03, local04 wc
04ab8     68 00 90 3D |  if_ae	jmp	#LR__0365
04abc     0F 13 02 F6 | 	mov	arg01, local01
04ac0     11 15 02 F6 | 	mov	arg02, local03
04ac4     01 16 06 F6 | 	mov	arg03, #1
04ac8     34 64 B1 FD | 	call	#__system__Mid_S
04acc     FD 26 02 F6 | 	mov	local05, result1
04ad0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04ad0     43 01 00 FF 
04ad4     1B 15 06 F6 | 	mov	arg02, ##@LR__4527
04ad8     13 13 02 F6 | 	mov	arg01, local05
04adc     20 43 B1 FD | 	call	#__system___string_cmp
04ae0     00 FA 55 F2 | 	cmps	result1, #0 wc
04ae4     18 00 90 CD |  if_b	jmp	#LR__0363
04ae8     43 01 00 FF 
04aec     1D 15 06 F6 | 	mov	arg02, ##@LR__4528
04af0     13 13 02 F6 | 	mov	arg01, local05
04af4     08 43 B1 FD | 	call	#__system___string_cmp
04af8     01 FA 55 F2 | 	cmps	result1, #1 wc
04afc     1C 00 90 CD |  if_b	jmp	#LR__0364
04b00                 | LR__0363
04b00     43 01 00 FF 
04b04     1F 15 06 F6 | 	mov	arg02, ##@LR__4529
04b08     13 13 02 F6 | 	mov	arg01, local05
04b0c     F0 42 B1 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     00 FA 05 56 |  if_ne	mov	result1, #0
04b18     0C 00 90 5D |  if_ne	jmp	#LR__0366
04b1c                 | LR__0364
04b1c     01 22 06 F1 | 	add	local03, #1
04b20     90 FF 9F FD | 	jmp	#LR__0362
04b24                 | LR__0365
04b24                 | ' return true
04b24     01 FA 65 F6 | 	neg	result1, #1
04b28                 | LR__0366
04b28     A7 F0 03 F6 | 	mov	ptra, fp
04b2c     B2 00 A0 FD | 	call	#popregs_
04b30                 | _isdec_ret
04b30     2D 00 64 FD | 	ret
04b34                 | 
04b34                 | ' 
04b34                 | ' function isstring(s as string) as boolean
04b34                 | _isstring
04b34     01 4A 05 F6 | 	mov	COUNT_, #1
04b38     A8 00 A0 FD | 	call	#pushregs_
04b3c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
04b3c     09 1F 02 F6 | 	mov	local01, arg01
04b40     01 14 06 F6 | 	mov	arg02, #1
04b44     A0 62 B1 FD | 	call	#__system__Left_S
04b48     FD 12 02 F6 | 	mov	arg01, result1
04b4c     43 01 00 FF 
04b50     21 15 06 F6 | 	mov	arg02, ##@LR__4530
04b54     A8 42 B1 FD | 	call	#__system___string_cmp
04b58     00 FA 4D F2 | 	cmps	result1, #0 wz
04b5c     28 00 90 5D |  if_ne	jmp	#LR__0370
04b60     0F 13 02 F6 | 	mov	arg01, local01
04b64     01 14 06 F6 | 	mov	arg02, #1
04b68     04 63 B1 FD | 	call	#__system__Right_S
04b6c     FD 12 02 F6 | 	mov	arg01, result1
04b70     43 01 00 FF 
04b74     23 15 06 F6 | 	mov	arg02, ##@LR__4531
04b78     84 42 B1 FD | 	call	#__system___string_cmp
04b7c     00 FA 4D F2 | 	cmps	result1, #0 wz
04b80     01 FA 65 A6 |  if_e	neg	result1, #1
04b84     04 00 90 AD |  if_e	jmp	#LR__0371
04b88                 | LR__0370
04b88     00 FA 05 F6 | 	mov	result1, #0
04b8c                 | LR__0371
04b8c     A7 F0 03 F6 | 	mov	ptra, fp
04b90     B2 00 A0 FD | 	call	#popregs_
04b94                 | _isstring_ret
04b94     2D 00 64 FD | 	ret
04b98                 | 
04b98                 | ' 
04b98                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
04b98                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04b98                 | ' 
04b98                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04b98                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
04b98                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04b98                 | ' 
04b98                 | ' '----- delete a line from a program
04b98                 | ' 
04b98                 | ' function deleteline(aline as ulong) as integer
04b98                 | _deleteline
04b98     03 4A 05 F6 | 	mov	COUNT_, #3
04b9c     A8 00 A0 FD | 	call	#pushregs_
04ba0     2C F0 07 F1 | 	add	ptra, #44
04ba4     04 4E 05 F1 | 	add	fp, #4
04ba8     A7 12 62 FC | 	wrlong	arg01, fp
04bac     69 00 00 FF 
04bb0     58 E5 05 F1 | 	add	objptr, ##54104
04bb4     F2 1E 02 FB | 	rdlong	local01, objptr
04bb8     0C 4E 05 F1 | 	add	fp, #12
04bbc     A7 1E 62 FC | 	wrlong	local01, fp
04bc0     10 4E 85 F1 | 	sub	fp, #16
04bc4                 | ' 
04bc4                 | ' 
04bc4                 | ' searchptr=programstart
04bc4                 | ' 
04bc4                 | ' do
04bc4     5E 00 00 FF 
04bc8     98 E4 85 F1 | 	sub	objptr, ##48280
04bcc                 | LR__0380
04bcc     14 4E 05 F1 | 	add	fp, #20
04bd0     A7 12 02 F6 | 	mov	arg01, fp
04bd4     04 4E 85 F1 | 	sub	fp, #4
04bd8     A7 14 02 FB | 	rdlong	arg02, fp
04bdc     10 4E 85 F1 | 	sub	fp, #16
04be0     18 16 06 F6 | 	mov	arg03, #24
04be4     A0 36 B1 FD | 	call	#_psram_spin2_read1
04be8     10 4E 05 F1 | 	add	fp, #16
04bec     A7 1E 02 FB | 	rdlong	local01, fp
04bf0     08 4E 85 F1 | 	sub	fp, #8
04bf4     A7 1E 62 FC | 	wrlong	local01, fp
04bf8     20 4E 05 F1 | 	add	fp, #32
04bfc     A7 1E 02 FB | 	rdlong	local01, fp
04c00     18 4E 85 F1 | 	sub	fp, #24
04c04     A7 1E 62 FC | 	wrlong	local01, fp
04c08     04 4E 05 F1 | 	add	fp, #4
04c0c     A7 1E 02 FB | 	rdlong	local01, fp
04c10     10 4E 85 F1 | 	sub	fp, #16
04c14     A7 16 02 FB | 	rdlong	arg03, fp
04c18     04 4E 85 F1 | 	sub	fp, #4
04c1c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04c20     28 4E 05 C1 |  if_b	add	fp, #40
04c24     A7 20 02 CB |  if_b	rdlong	local02, fp
04c28     28 4E 85 C1 |  if_b	sub	fp, #40
04c2c     FF FF 3F CF 
04c30     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04c34     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0380
04c38     0B 00 00 FF 
04c3c     C0 E4 85 F1 | 	sub	objptr, ##5824
04c40                 | ' 
04c40                 | ' 
04c40                 | ' if header(0)<>aline then return -1
04c40     14 4E 05 F1 | 	add	fp, #20
04c44     A7 1E 02 FB | 	rdlong	local01, fp
04c48     10 4E 85 F1 | 	sub	fp, #16
04c4c     A7 22 02 FB | 	rdlong	local03, fp
04c50     04 4E 85 F1 | 	sub	fp, #4
04c54     11 1F 0A F2 | 	cmp	local01, local03 wz
04c58     01 FA 65 56 |  if_ne	neg	result1, #1
04c5c     4C 03 90 5D |  if_ne	jmp	#LR__0386
04c60     08 4E 05 F1 | 	add	fp, #8
04c64     A7 12 02 FB | 	rdlong	arg01, fp
04c68     08 4E 85 F1 | 	sub	fp, #8
04c6c     01 14 66 F6 | 	neg	arg02, #1
04c70     01 16 06 F6 | 	mov	arg03, #1
04c74     00 18 06 F6 | 	mov	arg04, #0
04c78     0B 00 00 FF 
04c7c     C0 E4 05 F1 | 	add	objptr, ##5824
04c80                 | '     return fill(addr, pattern, count, listPtr, 4)
04c80     04 1A 06 F6 | 	mov	arg05, #4
04c84     38 37 B1 FD | 	call	#_psram_spin2_fill
04c88     0B 00 00 FF 
04c8c     C0 E4 85 F1 | 	sub	objptr, ##5824
04c90                 | ' 
04c90                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
04c90                 | ' 
04c90                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
04c90     28 4E 05 F1 | 	add	fp, #40
04c94     A7 1E 02 FB | 	rdlong	local01, fp
04c98     28 4E 85 F1 | 	sub	fp, #40
04c9c     FF FF 3F FF 
04ca0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04ca4     24 4E 05 A1 |  if_e	add	fp, #36
04ca8     A7 22 02 AB |  if_e	rdlong	local03, fp
04cac     24 4E 85 A1 |  if_e	sub	fp, #36
04cb0     FF FF 7F AF 
04cb4     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
04cb8     90 00 90 5D |  if_ne	jmp	#LR__0381
04cbc     69 00 00 FF 
04cc0     58 E5 05 F1 | 	add	objptr, ##54104
04cc4     F2 00 68 FC | 	wrlong	#0, objptr
04cc8     07 00 00 FF 
04ccc     28 E4 85 F1 | 	sub	objptr, ##3624
04cd0     F2 00 68 FC | 	wrlong	#0, objptr
04cd4     07 00 00 FF 
04cd8     2C E4 05 F1 | 	add	objptr, ##3628
04cdc     F2 00 68 FC | 	wrlong	#0, objptr
04ce0     04 E4 05 F1 | 	add	objptr, #4
04ce4     FF FF FF FF 
04ce8     F2 FE 6B FC | 	wrlong	##-1, objptr
04cec     00 12 06 F6 | 	mov	arg01, #0
04cf0     10 E4 85 F1 | 	sub	objptr, #16
04cf4     F2 00 68 FC | 	wrlong	#0, objptr
04cf8     01 14 66 F6 | 	neg	arg02, #1
04cfc     01 16 06 F6 | 	mov	arg03, #1
04d00     00 18 06 F6 | 	mov	arg04, #0
04d04     5E 00 00 FF 
04d08     90 E4 85 F1 | 	sub	objptr, ##48272
04d0c                 | '     return fill(addr, pattern, count, listPtr, 4)
04d0c     04 1A 06 F6 | 	mov	arg05, #4
04d10     AC 36 B1 FD | 	call	#_psram_spin2_fill
04d14     10 12 06 F6 | 	mov	arg01, #16
04d18     01 14 66 F6 | 	neg	arg02, #1
04d1c     01 16 06 F6 | 	mov	arg03, #1
04d20     00 18 06 F6 | 	mov	arg04, #0
04d24                 | '     return fill(addr, pattern, count, listPtr, 4)
04d24     04 1A 06 F6 | 	mov	arg05, #4
04d28     94 36 B1 FD | 	call	#_psram_spin2_fill
04d2c     14 12 06 F6 | 	mov	arg01, #20
04d30     1E 14 CE F9 | 	bmask	arg02, #30
04d34     01 16 06 F6 | 	mov	arg03, #1
04d38     00 18 06 F6 | 	mov	arg04, #0
04d3c                 | '     return fill(addr, pattern, count, listPtr, 4)
04d3c     04 1A 06 F6 | 	mov	arg05, #4
04d40     7C 36 B1 FD | 	call	#_psram_spin2_fill
04d44     0B 00 00 FF 
04d48     C0 E4 85 F1 | 	sub	objptr, ##5824
04d4c                 | LR__0381
04d4c                 | ' 
04d4c                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
04d4c     28 4E 05 F1 | 	add	fp, #40
04d50     A7 1E 02 FB | 	rdlong	local01, fp
04d54     28 4E 85 F1 | 	sub	fp, #40
04d58     FF FF 3F FF 
04d5c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04d60     88 00 90 5D |  if_ne	jmp	#LR__0382
04d64     24 4E 05 F1 | 	add	fp, #36
04d68     A7 22 02 FB | 	rdlong	local03, fp
04d6c     24 4E 85 F1 | 	sub	fp, #36
04d70     FF FF 7F FF 
04d74     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04d78     70 00 90 AD |  if_e	jmp	#LR__0382
04d7c     24 4E 05 F1 | 	add	fp, #36
04d80     A7 12 02 FB | 	rdlong	arg01, fp
04d84     24 4E 85 F1 | 	sub	fp, #36
04d88     14 12 06 F1 | 	add	arg01, #20
04d8c     1E 14 CE F9 | 	bmask	arg02, #30
04d90     01 16 06 F6 | 	mov	arg03, #1
04d94     00 18 06 F6 | 	mov	arg04, #0
04d98     0B 00 00 FF 
04d9c     C0 E4 05 F1 | 	add	objptr, ##5824
04da0                 | '     return fill(addr, pattern, count, listPtr, 4)
04da0     04 1A 06 F6 | 	mov	arg05, #4
04da4     18 36 B1 FD | 	call	#_psram_spin2_fill
04da8     24 4E 05 F1 | 	add	fp, #36
04dac     A7 1E 02 FB | 	rdlong	local01, fp
04db0     5E 00 00 FF 
04db4     A0 E4 05 F1 | 	add	objptr, ##48288
04db8     F2 1E 62 FC | 	wrlong	local01, objptr
04dbc     69 00 00 FF 
04dc0     60 E5 85 F1 | 	sub	objptr, ##54112
04dc4     A7 12 02 FB | 	rdlong	arg01, fp
04dc8     24 4E 85 F1 | 	sub	fp, #36
04dcc     40 0C B1 FD | 	call	#_pslpeek
04dd0     69 00 00 FF 
04dd4     5C E5 05 F1 | 	add	objptr, ##54108
04dd8     F2 FA 61 FC | 	wrlong	result1, objptr
04ddc     69 00 00 FF 
04de0     5C E5 85 F1 | 	sub	objptr, ##54108
04de4                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
04de4                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
04de4                 | '   lastline=pslpeek(header(4))
04de4                 | '   return 0
04de4     00 FA 05 F6 | 	mov	result1, #0
04de8     C0 01 90 FD | 	jmp	#LR__0386
04dec                 | LR__0382
04dec                 | ' 
04dec                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
04dec     28 4E 05 F1 | 	add	fp, #40
04df0     A7 1E 02 FB | 	rdlong	local01, fp
04df4     28 4E 85 F1 | 	sub	fp, #40
04df8     FF FF 3F FF 
04dfc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04e00     6C 00 90 AD |  if_e	jmp	#LR__0383
04e04     24 4E 05 F1 | 	add	fp, #36
04e08     A7 22 02 FB | 	rdlong	local03, fp
04e0c     24 4E 85 F1 | 	sub	fp, #36
04e10     FF FF 7F FF 
04e14     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04e18     54 00 90 5D |  if_ne	jmp	#LR__0383
04e1c     28 4E 05 F1 | 	add	fp, #40
04e20     A7 12 02 FB | 	rdlong	arg01, fp
04e24     28 4E 85 F1 | 	sub	fp, #40
04e28     10 12 06 F1 | 	add	arg01, #16
04e2c     01 14 66 F6 | 	neg	arg02, #1
04e30     01 16 06 F6 | 	mov	arg03, #1
04e34     00 18 06 F6 | 	mov	arg04, #0
04e38     0B 00 00 FF 
04e3c     C0 E4 05 F1 | 	add	objptr, ##5824
04e40                 | '     return fill(addr, pattern, count, listPtr, 4)
04e40     04 1A 06 F6 | 	mov	arg05, #4
04e44     78 35 B1 FD | 	call	#_psram_spin2_fill
04e48     28 4E 05 F1 | 	add	fp, #40
04e4c     A7 1E 02 FB | 	rdlong	local01, fp
04e50     28 4E 85 F1 | 	sub	fp, #40
04e54     5E 00 00 FF 
04e58     98 E4 05 F1 | 	add	objptr, ##48280
04e5c     F2 1E 62 FC | 	wrlong	local01, objptr
04e60     69 00 00 FF 
04e64     58 E5 85 F1 | 	sub	objptr, ##54104
04e68                 | ' '   print "deleted first line"
04e68                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
04e68                 | '   programstart=header(5) ' adjust the program start to point on the first new line
04e68                 | '   return 0
04e68     00 FA 05 F6 | 	mov	result1, #0
04e6c     3C 01 90 FD | 	jmp	#LR__0386
04e70                 | LR__0383
04e70                 | ' 
04e70                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
04e70     28 4E 05 F1 | 	add	fp, #40
04e74     A7 1E 02 FB | 	rdlong	local01, fp
04e78     28 4E 85 F1 | 	sub	fp, #40
04e7c     FF FF 3F FF 
04e80     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04e84     24 4E 05 51 |  if_ne	add	fp, #36
04e88     A7 22 02 5B |  if_ne	rdlong	local03, fp
04e8c     24 4E 85 51 |  if_ne	sub	fp, #36
04e90     FF FF 7F 5F 
04e94     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
04e98     68 00 90 AD |  if_e	jmp	#LR__0384
04e9c     28 4E 05 F1 | 	add	fp, #40
04ea0     A7 12 02 FB | 	rdlong	arg01, fp
04ea4     10 12 06 F1 | 	add	arg01, #16
04ea8     04 4E 85 F1 | 	sub	fp, #4
04eac     A7 14 02 FB | 	rdlong	arg02, fp
04eb0     24 4E 85 F1 | 	sub	fp, #36
04eb4     01 16 06 F6 | 	mov	arg03, #1
04eb8     00 18 06 F6 | 	mov	arg04, #0
04ebc     0B 00 00 FF 
04ec0     C0 E4 05 F1 | 	add	objptr, ##5824
04ec4                 | '     return fill(addr, pattern, count, listPtr, 4)
04ec4     04 1A 06 F6 | 	mov	arg05, #4
04ec8     F4 34 B1 FD | 	call	#_psram_spin2_fill
04ecc     24 4E 05 F1 | 	add	fp, #36
04ed0     A7 12 02 FB | 	rdlong	arg01, fp
04ed4     14 12 06 F1 | 	add	arg01, #20
04ed8     04 4E 05 F1 | 	add	fp, #4
04edc     A7 14 02 FB | 	rdlong	arg02, fp
04ee0     28 4E 85 F1 | 	sub	fp, #40
04ee4     01 16 06 F6 | 	mov	arg03, #1
04ee8     00 18 06 F6 | 	mov	arg04, #0
04eec                 | '     return fill(addr, pattern, count, listPtr, 4)
04eec     04 1A 06 F6 | 	mov	arg05, #4
04ef0     CC 34 B1 FD | 	call	#_psram_spin2_fill
04ef4     0B 00 00 FF 
04ef8     C0 E4 85 F1 | 	sub	objptr, ##5824
04efc                 | '    pslpoke(header(5)+16,header(4))  
04efc                 | '    pslpoke(header(4)+20, header(5))
04efc                 | '    return 0
04efc     00 FA 05 F6 | 	mov	result1, #0
04f00     A8 00 90 FD | 	jmp	#LR__0386
04f04                 | LR__0384
04f04     10 4E 05 F1 | 	add	fp, #16
04f08     A7 1E 02 FB | 	rdlong	local01, fp
04f0c     08 4E 85 F1 | 	sub	fp, #8
04f10     A7 1E 62 FC | 	wrlong	local01, fp
04f14     69 00 00 FF 
04f18     58 E5 05 F1 | 	add	objptr, ##54104
04f1c     F2 1E 02 FB | 	rdlong	local01, objptr
04f20     08 4E 05 F1 | 	add	fp, #8
04f24     A7 1E 62 FC | 	wrlong	local01, fp
04f28     10 4E 85 F1 | 	sub	fp, #16
04f2c                 | ' 
04f2c                 | ' 
04f2c                 | ' 
04f2c                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
04f2c                 | ' 
04f2c                 | ' lineptr2=searchptr
04f2c                 | ' searchptr=programstart
04f2c                 | ' 
04f2c                 | ' do
04f2c     5E 00 00 FF 
04f30     98 E4 85 F1 | 	sub	objptr, ##48280
04f34                 | LR__0385
04f34     14 4E 05 F1 | 	add	fp, #20
04f38     A7 12 02 F6 | 	mov	arg01, fp
04f3c     04 4E 85 F1 | 	sub	fp, #4
04f40     A7 14 02 FB | 	rdlong	arg02, fp
04f44     10 4E 85 F1 | 	sub	fp, #16
04f48     18 16 06 F6 | 	mov	arg03, #24
04f4c     38 33 B1 FD | 	call	#_psram_spin2_read1
04f50     10 4E 05 F1 | 	add	fp, #16
04f54     A7 1E 02 FB | 	rdlong	local01, fp
04f58     08 4E 85 F1 | 	sub	fp, #8
04f5c     A7 1E 62 FC | 	wrlong	local01, fp
04f60     20 4E 05 F1 | 	add	fp, #32
04f64     A7 1E 02 FB | 	rdlong	local01, fp
04f68     18 4E 85 F1 | 	sub	fp, #24
04f6c     A7 1E 62 FC | 	wrlong	local01, fp
04f70     04 4E 05 F1 | 	add	fp, #4
04f74     A7 1E 02 FB | 	rdlong	local01, fp
04f78     10 4E 85 F1 | 	sub	fp, #16
04f7c     A7 22 02 FB | 	rdlong	local03, fp
04f80     04 4E 85 F1 | 	sub	fp, #4
04f84     11 1F 12 F2 | 	cmp	local01, local03 wc
04f88     28 4E 05 C1 |  if_b	add	fp, #40
04f8c     A7 20 02 CB |  if_b	rdlong	local02, fp
04f90     28 4E 85 C1 |  if_b	sub	fp, #40
04f94     FF FF 3F CF 
04f98     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04f9c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0385
04fa0     0B 00 00 FF 
04fa4     C0 E4 85 F1 | 	sub	objptr, ##5824
04fa8     00 FA 05 F6 | 	mov	result1, #0
04fac                 | LR__0386
04fac     A7 F0 03 F6 | 	mov	ptra, fp
04fb0     B2 00 A0 FD | 	call	#popregs_
04fb4                 | _deleteline_ret
04fb4     2D 00 64 FD | 	ret
04fb8                 | 
04fb8                 | ' 
04fb8                 | ' sub save_line
04fb8                 | _save_line
04fb8     03 4A 05 F6 | 	mov	COUNT_, #3
04fbc     A8 00 A0 FD | 	call	#pushregs_
04fc0     69 00 00 FF 
04fc4     50 E5 05 F1 | 	add	objptr, ##54096
04fc8     F2 16 02 FB | 	rdlong	arg03, objptr
04fcc     01 16 06 F1 | 	add	arg03, #1
04fd0     05 00 00 FF 
04fd4     18 E4 85 F1 | 	sub	objptr, ##2584
04fd8     F2 14 02 FB | 	rdlong	arg02, objptr
04fdc     0B 15 02 FD | 	qmul	arg02, arg03
04fe0     0E 00 00 FF 
04fe4     44 E4 85 F1 | 	sub	objptr, ##7236
04fe8     F2 12 02 FB | 	rdlong	arg01, objptr
04fec     56 00 00 FF 
04ff0     F4 E4 85 F1 | 	sub	objptr, ##44276
04ff4     09 1F 02 F6 | 	mov	local01, arg01
04ff8     18 20 62 FD | 	getqx	local02
04ffc     97 06 48 FB | 	callpa	#(@LR__0391-@LR__0390)>>2,fcache_load_ptr_
05000                 | LR__0390
05000     0F FB C9 FA | 	rdbyte	result1, local01 wz
05004     01 1E 06 51 |  if_ne	add	local01, #1
05008     F4 FF 9F 5D |  if_ne	jmp	#LR__0390
0500c                 | LR__0391
0500c     09 1F 82 F1 | 	sub	local01, arg01
05010     03 1E CE F7 | 	test	local01, #3 wz
05014     02 1E 46 50 |  if_ne	shr	local01, #2
05018     01 1E 06 51 |  if_ne	add	local01, #1
0501c     02 1E 66 50 |  if_ne	shl	local01, #2
05020     10 23 02 F6 | 	mov	local03, local02
05024     0F 23 02 F1 | 	add	local03, local01
05028     62 00 00 FF 
0502c     30 E5 05 F1 | 	add	objptr, ##50480
05030     F2 16 02 FB | 	rdlong	arg03, objptr
05034     10 17 02 F1 | 	add	arg03, local02
05038     04 00 00 FF 
0503c     28 E4 05 F1 | 	add	objptr, ##2088
05040     F2 16 62 FC | 	wrlong	arg03, objptr
05044     04 E4 05 F1 | 	add	objptr, #4
05048     F2 1E 62 FC | 	wrlong	local01, objptr
0504c     0C E4 85 F1 | 	sub	objptr, #12
05050     F2 12 02 F6 | 	mov	arg01, objptr
05054     04 00 00 FF 
05058     20 E4 85 F1 | 	sub	objptr, ##2080
0505c     F2 14 02 FB | 	rdlong	arg02, objptr
05060     10 17 02 F6 | 	mov	arg03, local02
05064     57 00 00 FF 
05068     70 E4 85 F1 | 	sub	objptr, ##44656
0506c     B4 32 B1 FD | 	call	#_psram_spin2_write
05070     4B 00 00 FF 
05074     34 E4 05 F1 | 	add	objptr, ##38452
05078     F2 12 02 FB | 	rdlong	arg01, objptr
0507c     0C 00 00 FF 
05080     3C E4 05 F1 | 	add	objptr, ##6204
05084     F2 14 02 FB | 	rdlong	arg02, objptr
05088     10 15 02 F1 | 	add	arg02, local02
0508c     0F 17 02 F6 | 	mov	arg03, local01
05090     57 00 00 FF 
05094     70 E4 85 F1 | 	sub	objptr, ##44656
05098     88 32 B1 FD | 	call	#_psram_spin2_write
0509c     57 00 00 FF 
050a0     70 E4 05 F1 | 	add	objptr, ##44656
050a4     F2 1E 02 FB | 	rdlong	local01, objptr
050a8     11 1F 02 F1 | 	add	local01, local03
050ac     F2 1E 62 FC | 	wrlong	local01, objptr
050b0     62 00 00 FF 
050b4     30 E5 85 F1 | 	sub	objptr, ##50480
050b8     A7 F0 03 F6 | 	mov	ptra, fp
050bc     B2 00 A0 FD | 	call	#popregs_
050c0                 | _save_line_ret
050c0     2D 00 64 FD | 	ret
050c4                 | 
050c4                 | ' 
050c4                 | ' 
050c4                 | ' function insertline(aline as ulong) as integer
050c4                 | _insertline
050c4     02 4A 05 F6 | 	mov	COUNT_, #2
050c8     A8 00 A0 FD | 	call	#pushregs_
050cc     28 F0 07 F1 | 	add	ptra, #40
050d0     04 4E 05 F1 | 	add	fp, #4
050d4     A7 12 62 FC | 	wrlong	arg01, fp
050d8     69 00 00 FF 
050dc     58 E5 05 F1 | 	add	objptr, ##54104
050e0     F2 1E 02 FB | 	rdlong	local01, objptr
050e4     04 4E 05 F1 | 	add	fp, #4
050e8     A7 1E 62 FC | 	wrlong	local01, fp
050ec     08 4E 85 F1 | 	sub	fp, #8
050f0                 | ' 
050f0                 | ' do
050f0     5E 00 00 FF 
050f4     98 E4 85 F1 | 	sub	objptr, ##48280
050f8                 | LR__0400
050f8     10 4E 05 F1 | 	add	fp, #16
050fc     A7 12 02 F6 | 	mov	arg01, fp
05100     08 4E 85 F1 | 	sub	fp, #8
05104     A7 14 02 FB | 	rdlong	arg02, fp
05108     08 4E 85 F1 | 	sub	fp, #8
0510c     18 16 06 F6 | 	mov	arg03, #24
05110     74 31 B1 FD | 	call	#_psram_spin2_read1
05114     08 4E 05 F1 | 	add	fp, #8
05118     A7 1E 02 FB | 	rdlong	local01, fp
0511c     04 4E 05 F1 | 	add	fp, #4
05120     A7 1E 62 FC | 	wrlong	local01, fp
05124     18 4E 05 F1 | 	add	fp, #24
05128     A7 1E 02 FB | 	rdlong	local01, fp
0512c     1C 4E 85 F1 | 	sub	fp, #28
05130     A7 1E 62 FC | 	wrlong	local01, fp
05134     08 4E 05 F1 | 	add	fp, #8
05138     A7 1E 02 FB | 	rdlong	local01, fp
0513c     0C 4E 85 F1 | 	sub	fp, #12
05140     A7 16 02 FB | 	rdlong	arg03, fp
05144     04 4E 85 F1 | 	sub	fp, #4
05148     0B 1F 12 F2 | 	cmp	local01, arg03 wc
0514c     24 4E 05 C1 |  if_b	add	fp, #36
05150     A7 20 02 CB |  if_b	rdlong	local02, fp
05154     24 4E 85 C1 |  if_b	sub	fp, #36
05158     FF FF 3F CF 
0515c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05160     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0400
05164     0B 00 00 FF 
05168     C0 E4 85 F1 | 	sub	objptr, ##5824
0516c                 | ' 
0516c                 | ' if header(0)=aline then return -1 ' delete it first
0516c     10 4E 05 F1 | 	add	fp, #16
05170     A7 1E 02 FB | 	rdlong	local01, fp
05174     0C 4E 85 F1 | 	sub	fp, #12
05178     A7 20 02 FB | 	rdlong	local02, fp
0517c     04 4E 85 F1 | 	sub	fp, #4
05180     10 1F 0A F2 | 	cmp	local01, local02 wz
05184     01 FA 65 A6 |  if_e	neg	result1, #1
05188     74 01 90 AD |  if_e	jmp	#LR__0403
0518c                 | ' if header(0)<aline then return -2 ' end of program reached
0518c     10 4E 05 F1 | 	add	fp, #16
05190     A7 1E 02 FB | 	rdlong	local01, fp
05194     0C 4E 85 F1 | 	sub	fp, #12
05198     A7 16 02 FB | 	rdlong	arg03, fp
0519c     04 4E 85 F1 | 	sub	fp, #4
051a0     0B 1F 12 F2 | 	cmp	local01, arg03 wc
051a4     02 FA 65 C6 |  if_b	neg	result1, #2
051a8     54 01 90 CD |  if_b	jmp	#LR__0403
051ac                 | ' 
051ac                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
051ac     20 4E 05 F1 | 	add	fp, #32
051b0     A7 1E 02 FB | 	rdlong	local01, fp
051b4     20 4E 85 F1 | 	sub	fp, #32
051b8     FF FF 7F FF 
051bc     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
051c0     84 00 90 5D |  if_ne	jmp	#LR__0401
051c4     62 00 00 FF 
051c8     30 E5 05 F1 | 	add	objptr, ##50480
051cc     F2 1E 02 FB | 	rdlong	local01, objptr
051d0     07 00 00 FF 
051d4     28 E4 05 F1 | 	add	objptr, ##3624
051d8     F2 1E 62 FC | 	wrlong	local01, objptr
051dc     0C 4E 05 F1 | 	add	fp, #12
051e0     A7 12 02 FB | 	rdlong	arg01, fp
051e4     0C 4E 85 F1 | 	sub	fp, #12
051e8     10 12 06 F1 | 	add	arg01, #16
051ec     07 00 00 FF 
051f0     28 E4 85 F1 | 	sub	objptr, ##3624
051f4     F2 14 02 FB | 	rdlong	arg02, objptr
051f8     01 16 06 F6 | 	mov	arg03, #1
051fc     00 18 06 F6 | 	mov	arg04, #0
05200     57 00 00 FF 
05204     70 E4 85 F1 | 	sub	objptr, ##44656
05208                 | '     return fill(addr, pattern, count, listPtr, 4)
05208     04 1A 06 F6 | 	mov	arg05, #4
0520c     B0 31 B1 FD | 	call	#_psram_spin2_fill
05210     5B 00 00 FF 
05214     A0 E4 05 F1 | 	add	objptr, ##46752
05218     FF FF FF FF 
0521c     F2 FE 6B FC | 	wrlong	##-1, objptr
05220     0C 4E 05 F1 | 	add	fp, #12
05224     A7 1E 02 FB | 	rdlong	local01, fp
05228     0C 4E 85 F1 | 	sub	fp, #12
0522c     04 E4 05 F1 | 	add	objptr, #4
05230     F2 1E 62 FC | 	wrlong	local01, objptr
05234     66 00 00 FF 
05238     64 E5 85 F1 | 	sub	objptr, ##52580
0523c     78 FD BF FD | 	call	#_save_line
05240                 | '   programstart=programptr
05240                 | '   pslpoke(lineptr2+16,programptr)
05240                 | '   ucompiledline(4)=$FFFF_FFFF
05240                 | '   ucompiledline(5)=lineptr2
05240                 | '   save_line
05240                 | '   return 0
05240     00 FA 05 F6 | 	mov	result1, #0
05244     B8 00 90 FD | 	jmp	#LR__0403
05248                 | LR__0401
05248                 | ' 
05248                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05248     20 4E 05 F1 | 	add	fp, #32
0524c     A7 1E 02 FB | 	rdlong	local01, fp
05250     20 4E 85 F1 | 	sub	fp, #32
05254     FF FF 7F FF 
05258     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0525c     9C 00 90 AD |  if_e	jmp	#LR__0402
05260     20 4E 05 F1 | 	add	fp, #32
05264     A7 1E 02 FB | 	rdlong	local01, fp
05268     66 00 00 FF 
0526c     60 E5 05 F1 | 	add	objptr, ##52576
05270     F2 1E 62 FC | 	wrlong	local01, objptr
05274     14 4E 85 F1 | 	sub	fp, #20
05278     A7 1E 02 FB | 	rdlong	local01, fp
0527c     04 E4 05 F1 | 	add	objptr, #4
05280     F2 1E 62 FC | 	wrlong	local01, objptr
05284     A7 12 02 FB | 	rdlong	arg01, fp
05288     0C 4E 85 F1 | 	sub	fp, #12
0528c     10 12 06 F1 | 	add	arg01, #16
05290     04 00 00 FF 
05294     34 E4 85 F1 | 	sub	objptr, ##2100
05298     F2 14 02 FB | 	rdlong	arg02, objptr
0529c     01 16 06 F6 | 	mov	arg03, #1
052a0     00 18 06 F6 | 	mov	arg04, #0
052a4     57 00 00 FF 
052a8     70 E4 85 F1 | 	sub	objptr, ##44656
052ac                 | '     return fill(addr, pattern, count, listPtr, 4)
052ac     04 1A 06 F6 | 	mov	arg05, #4
052b0     0C 31 B1 FD | 	call	#_psram_spin2_fill
052b4     20 4E 05 F1 | 	add	fp, #32
052b8     A7 12 02 FB | 	rdlong	arg01, fp
052bc     20 4E 85 F1 | 	sub	fp, #32
052c0     14 12 06 F1 | 	add	arg01, #20
052c4     57 00 00 FF 
052c8     70 E4 05 F1 | 	add	objptr, ##44656
052cc     F2 14 02 FB | 	rdlong	arg02, objptr
052d0     01 16 06 F6 | 	mov	arg03, #1
052d4     00 18 06 F6 | 	mov	arg04, #0
052d8     57 00 00 FF 
052dc     70 E4 85 F1 | 	sub	objptr, ##44656
052e0                 | '     return fill(addr, pattern, count, listPtr, 4)
052e0     04 1A 06 F6 | 	mov	arg05, #4
052e4     D8 30 B1 FD | 	call	#_psram_spin2_fill
052e8     0B 00 00 FF 
052ec     C0 E4 85 F1 | 	sub	objptr, ##5824
052f0     C4 FC BF FD | 	call	#_save_line
052f4                 | '   ucompiledline(4)=header(4)
052f4                 | '   ucompiledline(5)=lineptr2
052f4                 | '   pslpoke(lineptr2+16,programptr)
052f4                 | '   pslpoke(header(4)+20,programptr)
052f4                 | '   save_line
052f4                 | '   return 0
052f4     00 FA 05 F6 | 	mov	result1, #0
052f8     04 00 90 FD | 	jmp	#LR__0403
052fc                 | LR__0402
052fc     00 FA 05 F6 | 	mov	result1, #0
05300                 | LR__0403
05300     A7 F0 03 F6 | 	mov	ptra, fp
05304     B2 00 A0 FD | 	call	#popregs_
05308                 | _insertline_ret
05308     2D 00 64 FD | 	ret
0530c                 | 
0530c                 | ' 
0530c                 | ' sub add_line_at_end(aline) 
0530c                 | _add_line_at_end
0530c     69 00 00 FF 
05310     5C E5 05 F1 | 	add	objptr, ##54108
05314     F2 12 62 FC | 	wrlong	arg01, objptr
05318     04 E4 05 F1 | 	add	objptr, #4
0531c     F2 14 02 FB | 	rdlong	arg02, objptr
05320     03 00 00 FF 
05324     00 E4 85 F1 | 	sub	objptr, ##1536
05328     F2 14 62 FC | 	wrlong	arg02, objptr
0532c     03 00 00 FF 
05330     00 E4 05 F1 | 	add	objptr, ##1536
05334     F2 12 02 FB | 	rdlong	arg01, objptr
05338     14 12 06 F1 | 	add	arg01, #20
0533c     07 00 00 FF 
05340     30 E4 85 F1 | 	sub	objptr, ##3632
05344     F2 14 02 FB | 	rdlong	arg02, objptr
05348     01 16 06 F6 | 	mov	arg03, #1
0534c     00 18 06 F6 | 	mov	arg04, #0
05350     57 00 00 FF 
05354     70 E4 85 F1 | 	sub	objptr, ##44656
05358                 | '     return fill(addr, pattern, count, listPtr, 4)
05358     04 1A 06 F6 | 	mov	arg05, #4
0535c     60 30 B1 FD | 	call	#_psram_spin2_fill
05360     57 00 00 FF 
05364     70 E4 05 F1 | 	add	objptr, ##44656
05368     F2 14 02 FB | 	rdlong	arg02, objptr
0536c     07 00 00 FF 
05370     30 E4 05 F1 | 	add	objptr, ##3632
05374     F2 14 62 FC | 	wrlong	arg02, objptr
05378     02 00 00 FF 
0537c     FC E5 85 F1 | 	sub	objptr, ##1532
05380     FF FF BF FF 
05384     F2 FE 6B FC | 	wrlong	##2147483647, objptr
05388                 | ' 
05388                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
05388                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
05388     04 00 00 FF 
0538c     34 E4 85 F1 | 	sub	objptr, ##2100
05390     F2 14 0A FB | 	rdlong	arg02, objptr wz
05394     62 00 00 FF 
05398     30 E5 85 F1 | 	sub	objptr, ##50480
0539c     66 00 00 AF 
053a0     60 E5 05 A1 |  if_e	add	objptr, ##52576
053a4     FF FF FF AF 
053a8     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
053ac     66 00 00 AF 
053b0     60 E5 85 A1 |  if_e	sub	objptr, ##52576
053b4     00 FC BF FD | 	call	#_save_line
053b8     62 00 00 FF 
053bc     30 E5 05 F1 | 	add	objptr, ##50480
053c0     F2 12 02 FB | 	rdlong	arg01, objptr
053c4     01 14 66 F6 | 	neg	arg02, #1
053c8     01 16 06 F6 | 	mov	arg03, #1
053cc     00 18 06 F6 | 	mov	arg04, #0
053d0     57 00 00 FF 
053d4     70 E4 85 F1 | 	sub	objptr, ##44656
053d8                 | '     return fill(addr, pattern, count, listPtr, 4)
053d8     04 1A 06 F6 | 	mov	arg05, #4
053dc     E0 2F B1 FD | 	call	#_psram_spin2_fill
053e0     0B 00 00 FF 
053e4     C0 E4 85 F1 | 	sub	objptr, ##5824
053e8                 | _add_line_at_end_ret
053e8     2D 00 64 FD | 	ret
053ec                 | 
053ec                 | ' 
053ec                 | ' function compile_immediate(linetype as ulong) as integer
053ec                 | _compile_immediate
053ec     09 4A 05 F6 | 	mov	COUNT_, #9
053f0     A8 00 A0 FD | 	call	#pushregs_
053f4                 | _compile_immediate_enter
053f4     09 25 0A F6 | 	mov	local04, arg01 wz
053f8     00 26 06 F6 | 	mov	local05, #0
053fc     00 28 06 F6 | 	mov	local06, #0
05400                 | ' 
05400                 | ' ' linetype=cont+1, linetype=0 immediate
05400                 | ' '  : 1: this is the first part of the line that will continue
05400                 | ' ' 2 - this is the continuation of the line
05400                 | ' ' 3 - this is the last continued line
05400                 | ' ' 4 - this is the one and only part
05400                 | ' 
05400                 | ' err=0
05400                 | ' cmd=0
05400                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
05400     2C 00 90 5D |  if_ne	jmp	#LR__0410
05404     54 00 00 FF 
05408     E4 E4 05 F1 | 	add	objptr, ##43236
0540c     F2 28 02 FB | 	rdlong	local06, objptr
05410     02 00 00 FF 
05414     34 E4 05 F1 | 	add	objptr, ##1076
05418     F2 02 68 FC | 	wrlong	#1, objptr
0541c     13 00 00 FF 
05420     38 E4 05 F1 | 	add	objptr, ##9784
05424     F2 00 68 FC | 	wrlong	#0, objptr
05428     69 00 00 FF 
0542c     50 E5 85 F1 | 	sub	objptr, ##54096
05430                 | LR__0410
05430                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05430     02 24 0E F2 | 	cmp	local04, #2 wz
05434     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05438     54 00 00 AF 
0543c     E4 E4 05 A1 |  if_e	add	objptr, ##43236
05440     F2 28 02 AB |  if_e	rdlong	local06, objptr
05444     02 00 00 AF 
05448     34 E4 05 A1 |  if_e	add	objptr, ##1076
0544c     F2 02 68 AC |  if_e	wrlong	#1, objptr
05450     56 00 00 AF 
05454     18 E5 85 A1 |  if_e	sub	objptr, ##44312
05458                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05458     04 24 0E F2 | 	cmp	local04, #4 wz
0545c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05460     2C 00 90 5D |  if_ne	jmp	#LR__0411
05464     54 00 00 FF 
05468     EC E4 05 F1 | 	add	objptr, ##43244
0546c     F2 28 02 FB | 	rdlong	local06, objptr
05470     02 00 00 FF 
05474     2C E4 05 F1 | 	add	objptr, ##1068
05478     F2 04 68 FC | 	wrlong	#2, objptr
0547c     13 00 00 FF 
05480     38 E4 05 F1 | 	add	objptr, ##9784
05484     F2 04 68 FC | 	wrlong	#2, objptr
05488     69 00 00 FF 
0548c     50 E5 85 F1 | 	sub	objptr, ##54096
05490                 | LR__0411
05490                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
05490     05 24 0E F2 | 	cmp	local04, #5 wz
05494     40 00 90 5D |  if_ne	jmp	#LR__0412
05498     56 00 00 FF 
0549c     18 E5 05 F1 | 	add	objptr, ##44312
054a0     F2 2A 02 FB | 	rdlong	local07, objptr
054a4     15 29 02 F6 | 	mov	local06, local07
054a8     03 28 66 F0 | 	shl	local06, #3
054ac     02 00 00 FF 
054b0     38 E4 85 F1 | 	sub	objptr, ##1080
054b4     F2 28 02 F1 | 	add	local06, objptr
054b8     04 28 06 F1 | 	add	local06, #4
054bc     14 29 02 FB | 	rdlong	local06, local06
054c0     01 2A 06 F1 | 	add	local07, #1
054c4     02 00 00 FF 
054c8     38 E4 05 F1 | 	add	objptr, ##1080
054cc     F2 2A 62 FC | 	wrlong	local07, objptr
054d0     56 00 00 FF 
054d4     18 E5 85 F1 | 	sub	objptr, ##44312
054d8                 | LR__0412
054d8     00 2C 06 F6 | 	mov	local08, #0
054dc                 | ' vars=0
054dc                 | ' 'print  "In compile_immediate cmd=:", cmd
054dc                 | ' 451 select case cmd
054dc     40 28 0E F2 | 	cmp	local06, #64 wz
054e0     41 28 0E 52 |  if_ne	cmp	local06, #65 wz
054e4     C8 03 90 AD |  if_e	jmp	#LR__0461
054e8     4C 28 0E F2 | 	cmp	local06, #76 wz
054ec     98 01 90 AD |  if_e	jmp	#LR__0413
054f0     73 28 0E F2 | 	cmp	local06, #115 wz
054f4     9C 01 90 AD |  if_e	jmp	#LR__0414
054f8     74 28 0E F2 | 	cmp	local06, #116 wz
054fc     A0 01 90 AD |  if_e	jmp	#LR__0415
05500     75 28 0E F2 | 	cmp	local06, #117 wz
05504     A4 01 90 AD |  if_e	jmp	#LR__0416
05508     4D 28 0E F2 | 	cmp	local06, #77 wz
0550c     A0 03 90 AD |  if_e	jmp	#LR__0461
05510     42 28 0E F2 | 	cmp	local06, #66 wz
05514     A0 01 90 AD |  if_e	jmp	#LR__0417
05518     43 28 0E F2 | 	cmp	local06, #67 wz
0551c     A4 01 90 AD |  if_e	jmp	#LR__0418
05520     45 28 0E F2 | 	cmp	local06, #69 wz
05524     A8 01 90 AD |  if_e	jmp	#LR__0419
05528     46 28 0E F2 | 	cmp	local06, #70 wz
0552c     AC 01 90 AD |  if_e	jmp	#LR__0420
05530     47 28 0E F2 | 	cmp	local06, #71 wz
05534     B0 01 90 AD |  if_e	jmp	#LR__0421
05538     48 28 0E F2 | 	cmp	local06, #72 wz
0553c     B4 01 90 AD |  if_e	jmp	#LR__0422
05540     49 28 0E F2 | 	cmp	local06, #73 wz
05544     B8 01 90 AD |  if_e	jmp	#LR__0423
05548     44 28 0E F2 | 	cmp	local06, #68 wz
0554c     BC 01 90 AD |  if_e	jmp	#LR__0424
05550     4E 28 0E F2 | 	cmp	local06, #78 wz
05554     C0 01 90 AD |  if_e	jmp	#LR__0425
05558     50 28 0E F2 | 	cmp	local06, #80 wz
0555c     D4 01 90 AD |  if_e	jmp	#LR__0427
05560     51 28 0E F2 | 	cmp	local06, #81 wz
05564     D8 01 90 AD |  if_e	jmp	#LR__0428
05568     52 28 0E F2 | 	cmp	local06, #82 wz
0556c     DC 01 90 AD |  if_e	jmp	#LR__0429
05570     59 28 0E F2 | 	cmp	local06, #89 wz
05574     E0 01 90 AD |  if_e	jmp	#LR__0430
05578     55 28 0E F2 | 	cmp	local06, #85 wz
0557c     E4 01 90 AD |  if_e	jmp	#LR__0431
05580     56 28 0E F2 | 	cmp	local06, #86 wz
05584     E8 01 90 AD |  if_e	jmp	#LR__0432
05588     57 28 0E F2 | 	cmp	local06, #87 wz
0558c     70 28 0E 52 |  if_ne	cmp	local06, #112 wz
05590     1C 03 90 AD |  if_e	jmp	#LR__0461
05594     58 28 0E F2 | 	cmp	local06, #88 wz
05598     E0 01 90 AD |  if_e	jmp	#LR__0433
0559c     4A 28 0E F2 | 	cmp	local06, #74 wz
055a0     E0 01 90 AD |  if_e	jmp	#LR__0434
055a4     4B 28 0E F2 | 	cmp	local06, #75 wz
055a8     E0 01 90 AD |  if_e	jmp	#LR__0435
055ac     89 28 0E F2 | 	cmp	local06, #137 wz
055b0     88 28 0E 52 |  if_ne	cmp	local06, #136 wz
055b4     F8 02 90 AD |  if_e	jmp	#LR__0461
055b8     8A 28 0E F2 | 	cmp	local06, #138 wz
055bc     D4 01 90 AD |  if_e	jmp	#LR__0436
055c0     5A 28 0E F2 | 	cmp	local06, #90 wz
055c4     D8 01 90 AD |  if_e	jmp	#LR__0437
055c8     5C 28 0E F2 | 	cmp	local06, #92 wz
055cc     D8 01 90 AD |  if_e	jmp	#LR__0438
055d0     5D 28 0E F2 | 	cmp	local06, #93 wz
055d4     D8 02 90 AD |  if_e	jmp	#LR__0461
055d8     5E 28 0E F2 | 	cmp	local06, #94 wz
055dc     D4 01 90 AD |  if_e	jmp	#LR__0439
055e0     5F 28 0E F2 | 	cmp	local06, #95 wz
055e4     D8 01 90 AD |  if_e	jmp	#LR__0440
055e8     60 28 0E F2 | 	cmp	local06, #96 wz
055ec     DC 01 90 AD |  if_e	jmp	#LR__0441
055f0     61 28 0E F2 | 	cmp	local06, #97 wz
055f4     E0 01 90 AD |  if_e	jmp	#LR__0442
055f8     63 28 0E F2 | 	cmp	local06, #99 wz
055fc     E4 01 90 AD |  if_e	jmp	#LR__0443
05600     68 28 0E F2 | 	cmp	local06, #104 wz
05604     E8 01 90 AD |  if_e	jmp	#LR__0444
05608     69 28 0E F2 | 	cmp	local06, #105 wz
0560c     EC 01 90 AD |  if_e	jmp	#LR__0445
05610     6D 28 0E F2 | 	cmp	local06, #109 wz
05614     F0 01 90 AD |  if_e	jmp	#LR__0446
05618     6C 28 0E F2 | 	cmp	local06, #108 wz
0561c     F4 01 90 AD |  if_e	jmp	#LR__0447
05620     71 28 0E F2 | 	cmp	local06, #113 wz
05624     F8 01 90 AD |  if_e	jmp	#LR__0448
05628     79 28 0E F2 | 	cmp	local06, #121 wz
0562c     FC 01 90 AD |  if_e	jmp	#LR__0449
05630     77 28 0E F2 | 	cmp	local06, #119 wz
05634     00 02 90 AD |  if_e	jmp	#LR__0450
05638     78 28 0E F2 | 	cmp	local06, #120 wz
0563c     04 02 90 AD |  if_e	jmp	#LR__0451
05640     7C 28 0E F2 | 	cmp	local06, #124 wz
05644     08 02 90 AD |  if_e	jmp	#LR__0452
05648     7D 28 0E F2 | 	cmp	local06, #125 wz
0564c     0C 02 90 AD |  if_e	jmp	#LR__0453
05650     7E 28 0E F2 | 	cmp	local06, #126 wz
05654     10 02 90 AD |  if_e	jmp	#LR__0454
05658     7F 28 0E F2 | 	cmp	local06, #127 wz
0565c     14 02 90 AD |  if_e	jmp	#LR__0455
05660     80 28 0E F2 | 	cmp	local06, #128 wz
05664     18 02 90 AD |  if_e	jmp	#LR__0456
05668     72 28 0E F2 | 	cmp	local06, #114 wz
0566c     1C 02 90 AD |  if_e	jmp	#LR__0457
05670     81 28 0E F2 | 	cmp	local06, #129 wz
05674     1C 02 90 AD |  if_e	jmp	#LR__0458
05678     01 00 00 FF 
0567c     04 28 0E F2 | 	cmp	local06, ##516 wz
05680     1C 02 90 AD |  if_e	jmp	#LR__0459
05684     20 02 90 FD | 	jmp	#LR__0460
05688                 | LR__0413
05688     3C 0F B0 FD | 	call	#_compile_fun_varp
0568c     FD 2C 02 F6 | 	mov	local08, result1
05690     1C 02 90 FD | 	jmp	#LR__0461
05694                 | LR__0414
05694     30 0F B0 FD | 	call	#_compile_fun_varp
05698     FD 2C 02 F6 | 	mov	local08, result1
0569c     10 02 90 FD | 	jmp	#LR__0461
056a0                 | LR__0415
056a0     24 0F B0 FD | 	call	#_compile_fun_varp
056a4     FD 2C 02 F6 | 	mov	local08, result1
056a8     04 02 90 FD | 	jmp	#LR__0461
056ac                 | LR__0416
056ac     18 0F B0 FD | 	call	#_compile_fun_varp
056b0     FD 2C 02 F6 | 	mov	local08, result1
056b4     F8 01 90 FD | 	jmp	#LR__0461
056b8                 | LR__0417
056b8     2C 0B B0 FD | 	call	#_compile_fun_2p
056bc     FD 26 02 F6 | 	mov	local05, result1
056c0     EC 01 90 FD | 	jmp	#LR__0461
056c4                 | LR__0418
056c4     20 0B B0 FD | 	call	#_compile_fun_2p
056c8     FD 26 02 F6 | 	mov	local05, result1
056cc     E0 01 90 FD | 	jmp	#LR__0461
056d0                 | LR__0419
056d0     88 0B B0 FD | 	call	#_compile_fun_3p
056d4     FD 26 02 F6 | 	mov	local05, result1
056d8     D4 01 90 FD | 	jmp	#LR__0461
056dc                 | LR__0420
056dc     7C 0B B0 FD | 	call	#_compile_fun_3p
056e0     FD 26 02 F6 | 	mov	local05, result1
056e4     C8 01 90 FD | 	jmp	#LR__0461
056e8                 | LR__0421
056e8     3C 0C B0 FD | 	call	#_compile_fun_4p
056ec     FD 26 02 F6 | 	mov	local05, result1
056f0     BC 01 90 FD | 	jmp	#LR__0461
056f4                 | LR__0422
056f4     30 0C B0 FD | 	call	#_compile_fun_4p
056f8     FD 26 02 F6 | 	mov	local05, result1
056fc     B0 01 90 FD | 	jmp	#LR__0461
05700                 | LR__0423
05700     30 2D B0 FD | 	call	#_expr
05704                 | ' expr()
05704                 | ' return 0
05704     00 26 06 F6 | 	mov	local05, #0
05708     A4 01 90 FD | 	jmp	#LR__0461
0570c                 | LR__0424
0570c     64 0F B0 FD | 	call	#_compile_print
05710     FD 26 02 F6 | 	mov	local05, result1
05714     54 02 90 FD | 	jmp	#LR__0462
05718                 | LR__0425
05718     01 24 16 F2 | 	cmp	local04, #1 wc
0571c     08 00 90 CD |  if_b	jmp	#LR__0426
05720     B0 29 B0 FD | 	call	#_compile_goto
05724     44 02 90 FD | 	jmp	#LR__0462
05728                 | LR__0426
05728     19 12 06 F6 | 	mov	arg01, #25
0572c     24 01 B1 FD | 	call	#_printerror
05730     38 02 90 FD | 	jmp	#LR__0462
05734                 | LR__0427
05734     FC 2C B0 FD | 	call	#_expr
05738                 | ' expr()
05738                 | ' return 0
05738     00 26 06 F6 | 	mov	local05, #0
0573c     70 01 90 FD | 	jmp	#LR__0461
05740                 | LR__0428
05740     F0 2C B0 FD | 	call	#_expr
05744                 | ' expr()
05744                 | ' return 0
05744     00 26 06 F6 | 	mov	local05, #0
05748     64 01 90 FD | 	jmp	#LR__0461
0574c                 | LR__0429
0574c     E4 2C B0 FD | 	call	#_expr
05750                 | ' expr()
05750                 | ' return 0
05750     00 26 06 F6 | 	mov	local05, #0
05754     58 01 90 FD | 	jmp	#LR__0461
05758                 | LR__0430
05758     D8 2C B0 FD | 	call	#_expr
0575c                 | ' expr()
0575c                 | ' return 0
0575c     00 26 06 F6 | 	mov	local05, #0
05760     4C 01 90 FD | 	jmp	#LR__0461
05764                 | LR__0431
05764     80 0A B0 FD | 	call	#_compile_fun_2p
05768     FD 26 02 F6 | 	mov	local05, result1
0576c     40 01 90 FD | 	jmp	#LR__0461
05770                 | LR__0432
05770     C0 2C B0 FD | 	call	#_expr
05774                 | ' expr()
05774                 | ' return 0
05774     00 26 06 F6 | 	mov	local05, #0
05778     34 01 90 FD | 	jmp	#LR__0461
0577c                 | LR__0433
0577c     CC 15 B0 FD | 	call	#_compile_if
05780     E8 01 90 FD | 	jmp	#LR__0462
05784                 | LR__0434
05784     74 1F B0 FD | 	call	#_compile_for
05788     E0 01 90 FD | 	jmp	#LR__0462
0578c                 | LR__0435
0578c     94 27 B0 FD | 	call	#_compile_next
05790     D8 01 90 FD | 	jmp	#LR__0462
05794                 | LR__0436
05794     9C 2C B0 FD | 	call	#_expr
05798                 | ' expr()
05798                 | ' return 0
05798     00 26 06 F6 | 	mov	local05, #0
0579c     10 01 90 FD | 	jmp	#LR__0461
057a0                 | LR__0437
057a0     E8 16 B0 FD | 	call	#_compile_else
057a4     C4 01 90 FD | 	jmp	#LR__0462
057a8                 | LR__0438
057a8     3C 0A B0 FD | 	call	#_compile_fun_2p
057ac     FD 26 02 F6 | 	mov	local05, result1
057b0     FC 00 90 FD | 	jmp	#LR__0461
057b4                 | LR__0439
057b4     7C 2C B0 FD | 	call	#_expr
057b8                 | ' expr()
057b8                 | ' return 0
057b8     00 26 06 F6 | 	mov	local05, #0
057bc     F0 00 90 FD | 	jmp	#LR__0461
057c0                 | LR__0440
057c0     70 2C B0 FD | 	call	#_expr
057c4                 | ' expr()
057c4                 | ' return 0
057c4     00 26 06 F6 | 	mov	local05, #0
057c8     E4 00 90 FD | 	jmp	#LR__0461
057cc                 | LR__0441
057cc     64 2C B0 FD | 	call	#_expr
057d0                 | ' expr()
057d0                 | ' return 0
057d0     00 26 06 F6 | 	mov	local05, #0
057d4     D8 00 90 FD | 	jmp	#LR__0461
057d8                 | LR__0442
057d8     58 2C B0 FD | 	call	#_expr
057dc                 | ' expr()
057dc                 | ' return 0
057dc     00 26 06 F6 | 	mov	local05, #0
057e0     CC 00 90 FD | 	jmp	#LR__0461
057e4                 | LR__0443
057e4     4C 2C B0 FD | 	call	#_expr
057e8                 | ' expr()
057e8                 | ' return 0
057e8     00 26 06 F6 | 	mov	local05, #0
057ec     C0 00 90 FD | 	jmp	#LR__0461
057f0                 | LR__0444
057f0     40 2C B0 FD | 	call	#_expr
057f4                 | ' expr()
057f4                 | ' return 0
057f4     00 26 06 F6 | 	mov	local05, #0
057f8     B4 00 90 FD | 	jmp	#LR__0461
057fc                 | LR__0445
057fc     34 2C B0 FD | 	call	#_expr
05800                 | ' expr()
05800                 | ' return 0
05800     00 26 06 F6 | 	mov	local05, #0
05804     A8 00 90 FD | 	jmp	#LR__0461
05808                 | LR__0446
05808     50 0A B0 FD | 	call	#_compile_fun_3p
0580c     FD 26 02 F6 | 	mov	local05, result1
05810     9C 00 90 FD | 	jmp	#LR__0461
05814                 | LR__0447
05814     34 0C B0 FD | 	call	#_compile_fun_5p
05818     FD 26 02 F6 | 	mov	local05, result1
0581c     90 00 90 FD | 	jmp	#LR__0461
05820                 | LR__0448
05820     04 0B B0 FD | 	call	#_compile_fun_4p
05824     FD 26 02 F6 | 	mov	local05, result1
05828     84 00 90 FD | 	jmp	#LR__0461
0582c                 | LR__0449
0582c     B8 09 B0 FD | 	call	#_compile_fun_2p
05830     FD 26 02 F6 | 	mov	local05, result1
05834     78 00 90 FD | 	jmp	#LR__0461
05838                 | LR__0450
05838     AC 09 B0 FD | 	call	#_compile_fun_2p
0583c     FD 26 02 F6 | 	mov	local05, result1
05840     6C 00 90 FD | 	jmp	#LR__0461
05844                 | LR__0451
05844     A0 09 B0 FD | 	call	#_compile_fun_2p
05848     FD 26 02 F6 | 	mov	local05, result1
0584c     60 00 90 FD | 	jmp	#LR__0461
05850                 | LR__0452
05850     E0 2B B0 FD | 	call	#_expr
05854                 | ' expr()
05854                 | ' return 0
05854     00 26 06 F6 | 	mov	local05, #0
05858     54 00 90 FD | 	jmp	#LR__0461
0585c                 | LR__0453
0585c     D4 2B B0 FD | 	call	#_expr
05860                 | ' expr()
05860                 | ' return 0
05860     00 26 06 F6 | 	mov	local05, #0
05864     48 00 90 FD | 	jmp	#LR__0461
05868                 | LR__0454
05868     C8 2B B0 FD | 	call	#_expr
0586c                 | ' expr()
0586c                 | ' return 0
0586c     00 26 06 F6 | 	mov	local05, #0
05870     3C 00 90 FD | 	jmp	#LR__0461
05874                 | LR__0455
05874     B0 0A B0 FD | 	call	#_compile_fun_4p
05878     FD 26 02 F6 | 	mov	local05, result1
0587c     30 00 90 FD | 	jmp	#LR__0461
05880                 | LR__0456
05880     B0 2B B0 FD | 	call	#_expr
05884                 | ' expr()
05884                 | ' return 0
05884     00 26 06 F6 | 	mov	local05, #0
05888     24 00 90 FD | 	jmp	#LR__0461
0588c                 | LR__0457
0588c     24 17 B0 FD | 	call	#_compile_dim
05890     D8 00 90 FD | 	jmp	#LR__0462
05894                 | LR__0458
05894     50 09 B0 FD | 	call	#_compile_fun_2p
05898     FD 26 02 F6 | 	mov	local05, result1
0589c     10 00 90 FD | 	jmp	#LR__0461
058a0                 | LR__0459
058a0     20 01 B0 FD | 	call	#_compile_array_assign
058a4     C4 00 90 FD | 	jmp	#LR__0462
058a8                 | LR__0460
058a8     80 08 B0 FD | 	call	#_compile_unknown
058ac     BC 00 90 FD | 	jmp	#LR__0462
058b0                 | LR__0461
058b0     14 23 02 F6 | 	mov	local03, local06
058b4     16 1F 02 F6 | 	mov	local01, local08
058b8     0F 2B 02 F6 | 	mov	local07, local01
058bc     10 2F 02 F6 | 	mov	local09, local02
058c0     11 1F 02 F6 | 	mov	local01, local03
058c4     69 00 00 FF 
058c8     50 E5 05 F1 | 	add	objptr, ##54096
058cc     F2 2C 02 FB | 	rdlong	local08, objptr
058d0     16 29 02 F6 | 	mov	local06, local08
058d4     01 28 66 F0 | 	shl	local06, #1
058d8     16 29 02 F1 | 	add	local06, local08
058dc     02 28 66 F0 | 	shl	local06, #2
058e0     03 00 00 FF 
058e4     00 E4 85 F1 | 	sub	objptr, ##1536
058e8     F2 28 02 F1 | 	add	local06, objptr
058ec     14 2B 62 FC | 	wrlong	local07, local06
058f0     03 00 00 FF 
058f4     00 E4 05 F1 | 	add	objptr, ##1536
058f8     F2 2C 02 FB | 	rdlong	local08, objptr
058fc     16 2B 02 F6 | 	mov	local07, local08
05900     01 2A 66 F0 | 	shl	local07, #1
05904     16 2B 02 F1 | 	add	local07, local08
05908     02 2A 66 F0 | 	shl	local07, #2
0590c     03 00 00 FF 
05910     00 E4 85 F1 | 	sub	objptr, ##1536
05914     F2 2A 02 F1 | 	add	local07, objptr
05918     04 2A 06 F1 | 	add	local07, #4
0591c     15 2F 62 FC | 	wrlong	local09, local07
05920     03 00 00 FF 
05924     00 E4 05 F1 | 	add	objptr, ##1536
05928     F2 2E 02 FB | 	rdlong	local09, objptr
0592c     17 2D 02 F6 | 	mov	local08, local09
05930     01 2C 66 F0 | 	shl	local08, #1
05934     17 2D 02 F1 | 	add	local08, local09
05938     02 2C 66 F0 | 	shl	local08, #2
0593c     03 00 00 FF 
05940     00 E4 85 F1 | 	sub	objptr, ##1536
05944     F2 2C 02 F1 | 	add	local08, objptr
05948     08 2C 06 F1 | 	add	local08, #8
0594c     16 1F 62 FC | 	wrlong	local01, local08
05950     03 00 00 FF 
05954     00 E4 05 F1 | 	add	objptr, ##1536
05958     F2 2A 02 FB | 	rdlong	local07, objptr
0595c     01 2A 06 F1 | 	add	local07, #1
05960     F2 2A 62 FC | 	wrlong	local07, objptr
05964     69 00 00 FF 
05968     50 E5 85 F1 | 	sub	objptr, ##54096
0596c                 | LR__0462
0596c                 | ' 
0596c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
0596c                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
0596c     00 24 0E F2 | 	cmp	local04, #0 wz
05970     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05974     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
05978     38 00 90 5D |  if_ne	jmp	#LR__0463
0597c     69 00 00 FF 
05980     50 E5 05 F1 | 	add	objptr, ##54096
05984     F2 2E 02 FB | 	rdlong	local09, objptr
05988     17 1F 02 F6 | 	mov	local01, local09
0598c     01 1E 66 F0 | 	shl	local01, #1
05990     17 1F 02 F1 | 	add	local01, local09
05994     02 1E 66 F0 | 	shl	local01, #2
05998     03 00 00 FF 
0599c     00 E4 85 F1 | 	sub	objptr, ##1536
059a0     F2 1E 02 F1 | 	add	local01, objptr
059a4     08 1E 06 F1 | 	add	local01, #8
059a8     0F FD 6B FC | 	wrlong	#510, local01
059ac     66 00 00 FF 
059b0     50 E5 85 F1 | 	sub	objptr, ##52560
059b4                 | LR__0463
059b4                 | ' 
059b4                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
059b4                 | ' return err
059b4     13 FB 01 F6 | 	mov	result1, local05
059b8     A7 F0 03 F6 | 	mov	ptra, fp
059bc     B2 00 A0 FD | 	call	#popregs_
059c0                 | _compile_immediate_ret
059c0     2D 00 64 FD | 	ret
059c4                 | 
059c4                 | ' 
059c4                 | ' sub compile_array_assign
059c4                 | _compile_array_assign
059c4     0A 4A 05 F6 | 	mov	COUNT_, #10
059c8     A8 00 A0 FD | 	call	#pushregs_
059cc     00 24 06 F6 | 	mov	local04, #0
059d0     56 00 00 FF 
059d4     18 E5 05 F1 | 	add	objptr, ##44312
059d8     F2 26 02 FB | 	rdlong	local05, objptr
059dc     13 FB 01 F6 | 	mov	result1, local05
059e0     01 FA 85 F1 | 	sub	result1, #1
059e4     03 FA 65 F0 | 	shl	result1, #3
059e8     02 00 00 FF 
059ec     38 E4 85 F1 | 	sub	objptr, ##1080
059f0     F2 FA 01 F1 | 	add	result1, objptr
059f4     FD 28 02 FB | 	rdlong	local06, result1
059f8                 | ' numpar=0
059f8                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
059f8                 | ' ' todo here: recognize params and t1.result.twowords=numpar
059f8                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
059f8                 | ' if lparts(ct).token=token_lpar then
059f8     03 26 66 F0 | 	shl	local05, #3
059fc     F2 26 02 F1 | 	add	local05, objptr
05a00     04 26 06 F1 | 	add	local05, #4
05a04     13 27 02 FB | 	rdlong	local05, local05
05a08     15 26 0E F2 | 	cmp	local05, #21 wz
05a0c     54 00 00 FF 
05a10     E0 E4 85 F1 | 	sub	objptr, ##43232
05a14     D4 01 90 5D |  if_ne	jmp	#LR__0474
05a18     56 00 00 FF 
05a1c     18 E5 05 F1 | 	add	objptr, ##44312
05a20     F2 2A 02 FB | 	rdlong	local07, objptr
05a24     01 2A 06 F1 | 	add	local07, #1
05a28     F2 2A 62 FC | 	wrlong	local07, objptr
05a2c     56 00 00 FF 
05a30     18 E5 85 F1 | 	sub	objptr, ##44312
05a34                 | '   ct+=1 											' omit this lpar, this is for expr list
05a34                 | '   do
05a34                 | LR__0470
05a34     FC 29 B0 FD | 	call	#_expr
05a38     56 00 00 FF 
05a3c     18 E5 05 F1 | 	add	objptr, ##44312
05a40     F2 26 02 FB | 	rdlong	local05, objptr
05a44     01 26 06 F1 | 	add	local05, #1
05a48     F2 26 62 FC | 	wrlong	local05, objptr
05a4c     01 24 06 F1 | 	add	local04, #1
05a50     01 26 86 F1 | 	sub	local05, #1
05a54     03 26 66 F0 | 	shl	local05, #3
05a58     02 00 00 FF 
05a5c     38 E4 85 F1 | 	sub	objptr, ##1080
05a60     F2 26 02 F1 | 	add	local05, objptr
05a64     04 26 06 F1 | 	add	local05, #4
05a68     13 2B 02 FB | 	rdlong	local07, local05
05a6c     14 2A 0E F2 | 	cmp	local07, #20 wz
05a70     54 00 00 FF 
05a74     E0 E4 85 F1 | 	sub	objptr, ##43232
05a78     34 00 90 AD |  if_e	jmp	#LR__0471
05a7c     56 00 00 FF 
05a80     18 E5 05 F1 | 	add	objptr, ##44312
05a84     F2 2A 02 FB | 	rdlong	local07, objptr
05a88     03 2A 66 F0 | 	shl	local07, #3
05a8c     02 00 00 FF 
05a90     38 E4 85 F1 | 	sub	objptr, ##1080
05a94     F2 2A 02 F1 | 	add	local07, objptr
05a98     04 2A 06 F1 | 	add	local07, #4
05a9c     15 2B 02 FB | 	rdlong	local07, local07
05aa0     FE 2B 0E F2 | 	cmp	local07, #510 wz
05aa4     54 00 00 FF 
05aa8     E0 E4 85 F1 | 	sub	objptr, ##43232
05aac     84 FF 9F 5D |  if_ne	jmp	#LR__0470
05ab0                 | LR__0471
05ab0     56 00 00 FF 
05ab4     18 E5 05 F1 | 	add	objptr, ##44312
05ab8     F2 2A 02 FB | 	rdlong	local07, objptr
05abc     01 2A 06 F1 | 	add	local07, #1
05ac0     F2 2A 62 FC | 	wrlong	local07, objptr
05ac4     56 00 00 FF 
05ac8     18 E5 85 F1 | 	sub	objptr, ##44312
05acc     64 29 B0 FD | 	call	#_expr
05ad0     01 2C 66 F6 | 	neg	local08, #1
05ad4     00 2E 06 F6 | 	mov	local09, #0
05ad8                 | ' '   print "in array_assign, rpar found, numpar=",numpar
05ad8                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
05ad8                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
05ad8                 | ' ct+=1 : expr()
05ad8                 | ' ' now find the vae
05ad8                 | ' 
05ad8                 | ' j=-1 : i=0 : do : 
05ad8                 | LR__0472
05ad8                 | '   if variables(i).name=varname$ then j=i: exit loop
05ad8     17 27 02 F6 | 	mov	local05, local09
05adc     04 26 66 F0 | 	shl	local05, #4
05ae0     34 00 00 FF 
05ae4     DC E4 05 F1 | 	add	objptr, ##26844
05ae8     F2 26 02 F1 | 	add	local05, objptr
05aec     13 13 02 FB | 	rdlong	arg01, local05
05af0     14 15 02 F6 | 	mov	arg02, local06
05af4     34 00 00 FF 
05af8     DC E4 85 F1 | 	sub	objptr, ##26844
05afc     00 33 B1 FD | 	call	#__system___string_cmp
05b00     00 FA 0D F2 | 	cmp	result1, #0 wz
05b04     17 2D 02 A6 |  if_e	mov	local08, local09
05b08     20 00 90 AD |  if_e	jmp	#LR__0473
05b0c     01 2E 06 F1 | 	add	local09, #1
05b10     54 00 00 FF 
05b14     DC E4 05 F1 | 	add	objptr, ##43228
05b18     F2 2A 02 FB | 	rdlong	local07, objptr
05b1c     54 00 00 FF 
05b20     DC E4 85 F1 | 	sub	objptr, ##43228
05b24     15 2F 5A F2 | 	cmps	local09, local07 wcz
05b28     AC FF 9F ED |  if_be	jmp	#LR__0472
05b2c                 | LR__0473
05b2c     16 1F 02 F6 | 	mov	local01, local08
05b30     12 21 02 F6 | 	mov	local02, local04
05b34     17 22 06 F6 | 	mov	local03, #23
05b38     0F 2B 02 F6 | 	mov	local07, local01
05b3c     10 31 02 F6 | 	mov	local10, local02
05b40     11 2D 02 F6 | 	mov	local08, local03
05b44     69 00 00 FF 
05b48     50 E5 05 F1 | 	add	objptr, ##54096
05b4c     F2 1E 02 FB | 	rdlong	local01, objptr
05b50     0F 2F 02 F6 | 	mov	local09, local01
05b54     01 2E 66 F0 | 	shl	local09, #1
05b58     0F 2F 02 F1 | 	add	local09, local01
05b5c     02 2E 66 F0 | 	shl	local09, #2
05b60     03 00 00 FF 
05b64     00 E4 85 F1 | 	sub	objptr, ##1536
05b68     F2 2E 02 F1 | 	add	local09, objptr
05b6c     17 2B 62 FC | 	wrlong	local07, local09
05b70     03 00 00 FF 
05b74     00 E4 05 F1 | 	add	objptr, ##1536
05b78     F2 1E 02 FB | 	rdlong	local01, objptr
05b7c     0F 2F 02 F6 | 	mov	local09, local01
05b80     01 2E 66 F0 | 	shl	local09, #1
05b84     0F 2F 02 F1 | 	add	local09, local01
05b88     02 2E 66 F0 | 	shl	local09, #2
05b8c     03 00 00 FF 
05b90     00 E4 85 F1 | 	sub	objptr, ##1536
05b94     F2 2E 02 F1 | 	add	local09, objptr
05b98     04 2E 06 F1 | 	add	local09, #4
05b9c     17 31 62 FC | 	wrlong	local10, local09
05ba0     03 00 00 FF 
05ba4     00 E4 05 F1 | 	add	objptr, ##1536
05ba8     F2 30 02 FB | 	rdlong	local10, objptr
05bac     18 1F 02 F6 | 	mov	local01, local10
05bb0     01 1E 66 F0 | 	shl	local01, #1
05bb4     18 1F 02 F1 | 	add	local01, local10
05bb8     02 1E 66 F0 | 	shl	local01, #2
05bbc     03 00 00 FF 
05bc0     00 E4 85 F1 | 	sub	objptr, ##1536
05bc4     F2 1E 02 F1 | 	add	local01, objptr
05bc8     08 1E 06 F1 | 	add	local01, #8
05bcc     0F 2D 62 FC | 	wrlong	local08, local01
05bd0     03 00 00 FF 
05bd4     00 E4 05 F1 | 	add	objptr, ##1536
05bd8     F2 2A 02 FB | 	rdlong	local07, objptr
05bdc     01 2A 06 F1 | 	add	local07, #1
05be0     F2 2A 62 FC | 	wrlong	local07, objptr
05be4     69 00 00 FF 
05be8     50 E5 85 F1 | 	sub	objptr, ##54096
05bec                 | LR__0474
05bec     A7 F0 03 F6 | 	mov	ptra, fp
05bf0     B2 00 A0 FD | 	call	#popregs_
05bf4                 | _compile_array_assign_ret
05bf4     2D 00 64 FD | 	ret
05bf8                 | 
05bf8                 | ' 
05bf8                 | ' 
05bf8                 | ' sub compile_immediate_assign(linetype as ulong)
05bf8                 | _compile_immediate_assign
05bf8     09 4A 05 F6 | 	mov	COUNT_, #9
05bfc     A8 00 A0 FD | 	call	#pushregs_
05c00     09 25 0A F6 | 	mov	local04, arg01 wz
05c04     FF 22 06 F6 | 	mov	local03, #255
05c08     01 26 66 F6 | 	neg	local05, #1
05c0c                 | ' 
05c0c                 | ' t1.result_type=result_error : t1.result.uresult=0
05c0c                 | ' i=-1: j=-1
05c0c                 | ' 
05c0c                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
05c0c     2C 00 90 5D |  if_ne	jmp	#LR__0480
05c10     54 00 00 FF 
05c14     E0 E4 05 F1 | 	add	objptr, ##43232
05c18     F2 28 02 FB | 	rdlong	local06, objptr
05c1c     02 00 00 FF 
05c20     38 E4 05 F1 | 	add	objptr, ##1080
05c24     F2 04 68 FC | 	wrlong	#2, objptr
05c28     13 00 00 FF 
05c2c     38 E4 05 F1 | 	add	objptr, ##9784
05c30     F2 00 68 FC | 	wrlong	#0, objptr
05c34     69 00 00 FF 
05c38     50 E5 85 F1 | 	sub	objptr, ##54096
05c3c                 | LR__0480
05c3c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
05c3c     02 24 0E F2 | 	cmp	local04, #2 wz
05c40     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05c44     54 00 00 AF 
05c48     E0 E4 05 A1 |  if_e	add	objptr, ##43232
05c4c     F2 28 02 AB |  if_e	rdlong	local06, objptr
05c50     02 00 00 AF 
05c54     38 E4 05 A1 |  if_e	add	objptr, ##1080
05c58     F2 04 68 AC |  if_e	wrlong	#2, objptr
05c5c     56 00 00 AF 
05c60     18 E5 85 A1 |  if_e	sub	objptr, ##44312
05c64                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
05c64     04 24 0E F2 | 	cmp	local04, #4 wz
05c68     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05c6c     2C 00 90 5D |  if_ne	jmp	#LR__0481
05c70     54 00 00 FF 
05c74     E8 E4 05 F1 | 	add	objptr, ##43240
05c78     F2 28 02 FB | 	rdlong	local06, objptr
05c7c     02 00 00 FF 
05c80     30 E4 05 F1 | 	add	objptr, ##1072
05c84     F2 06 68 FC | 	wrlong	#3, objptr
05c88     13 00 00 FF 
05c8c     38 E4 05 F1 | 	add	objptr, ##9784
05c90     F2 04 68 FC | 	wrlong	#2, objptr
05c94     69 00 00 FF 
05c98     50 E5 85 F1 | 	sub	objptr, ##54096
05c9c                 | LR__0481
05c9c                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
05c9c     05 24 0E F2 | 	cmp	local04, #5 wz
05ca0     3C 00 90 5D |  if_ne	jmp	#LR__0482
05ca4     56 00 00 FF 
05ca8     18 E5 05 F1 | 	add	objptr, ##44312
05cac     F2 FA 01 FB | 	rdlong	result1, objptr
05cb0     FD 28 02 F6 | 	mov	local06, result1
05cb4     03 28 66 F0 | 	shl	local06, #3
05cb8     02 00 00 FF 
05cbc     38 E4 85 F1 | 	sub	objptr, ##1080
05cc0     F2 28 02 F1 | 	add	local06, objptr
05cc4     14 29 02 FB | 	rdlong	local06, local06
05cc8     02 FA 05 F1 | 	add	result1, #2
05ccc     02 00 00 FF 
05cd0     38 E4 05 F1 | 	add	objptr, ##1080
05cd4     F2 FA 61 FC | 	wrlong	result1, objptr
05cd8     56 00 00 FF 
05cdc     18 E5 85 F1 | 	sub	objptr, ##44312
05ce0                 | LR__0482
05ce0     14 13 02 F6 | 	mov	arg01, local06
05ce4     01 14 06 F6 | 	mov	arg02, #1
05ce8     84 51 B1 FD | 	call	#__system__Right_S
05cec     44 27 B0 FD | 	call	#_expr
05cf0                 | '  
05cf0                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
05cf0                 | ' 
05cf0                 | ' suffix2$=right$(varname2$,1)
05cf0                 | ' expr()
05cf0                 | ' 
05cf0                 | ' 
05cf0                 | ' if varnum>0 then
05cf0     54 00 00 FF 
05cf4     DC E4 05 F1 | 	add	objptr, ##43228
05cf8     F2 2A 02 FB | 	rdlong	local07, objptr
05cfc     54 00 00 FF 
05d00     DC E4 85 F1 | 	sub	objptr, ##43228
05d04     01 2A 56 F2 | 	cmps	local07, #1 wc
05d08     58 00 90 CD |  if_b	jmp	#LR__0485
05d0c                 | '   for i=0 to varnum-1
05d0c     00 2C 06 F6 | 	mov	local08, #0
05d10     54 00 00 FF 
05d14     DC E4 05 F1 | 	add	objptr, ##43228
05d18     F2 2E 02 FB | 	rdlong	local09, objptr
05d1c     54 00 00 FF 
05d20     DC E4 85 F1 | 	sub	objptr, ##43228
05d24                 | LR__0483
05d24     17 2D 52 F2 | 	cmps	local08, local09 wc
05d28     38 00 90 3D |  if_ae	jmp	#LR__0484
05d2c                 | '     if variables(i).name=varname2$ then j=i : exit
05d2c     16 2B 02 F6 | 	mov	local07, local08
05d30     04 2A 66 F0 | 	shl	local07, #4
05d34     34 00 00 FF 
05d38     DC E4 05 F1 | 	add	objptr, ##26844
05d3c     F2 2A 02 F1 | 	add	local07, objptr
05d40     15 13 02 FB | 	rdlong	arg01, local07
05d44     14 15 02 F6 | 	mov	arg02, local06
05d48     34 00 00 FF 
05d4c     DC E4 85 F1 | 	sub	objptr, ##26844
05d50     AC 30 B1 FD | 	call	#__system___string_cmp
05d54     00 FA 0D F2 | 	cmp	result1, #0 wz
05d58     16 27 02 A6 |  if_e	mov	local05, local08
05d5c     01 2C 06 51 |  if_ne	add	local08, #1
05d60     C0 FF 9F 5D |  if_ne	jmp	#LR__0483
05d64                 | LR__0484
05d64                 | LR__0485
05d64                 | ' if  j=-1 andalso varnum<maxvars then   
05d64     FF FF 7F FF 
05d68     FF 27 0E F2 | 	cmp	local05, ##-1 wz
05d6c     60 00 90 5D |  if_ne	jmp	#LR__0486
05d70     54 00 00 FF 
05d74     DC E4 05 F1 | 	add	objptr, ##43228
05d78     F2 2A 02 FB | 	rdlong	local07, objptr
05d7c     54 00 00 FF 
05d80     DC E4 85 F1 | 	sub	objptr, ##43228
05d84     01 00 00 FF 
05d88     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
05d8c     40 00 90 3D |  if_ae	jmp	#LR__0486
05d90     54 00 00 FF 
05d94     DC E4 05 F1 | 	add	objptr, ##43228
05d98     F2 2E 02 FB | 	rdlong	local09, objptr
05d9c     04 2E 66 F0 | 	shl	local09, #4
05da0     20 00 00 FF 
05da4     00 E4 85 F1 | 	sub	objptr, ##16384
05da8     F2 2E 02 F1 | 	add	local09, objptr
05dac     17 29 62 FC | 	wrlong	local06, local09
05db0     20 00 00 FF 
05db4     00 E4 05 F1 | 	add	objptr, ##16384
05db8     F2 2A 02 FB | 	rdlong	local07, objptr
05dbc     15 27 02 F6 | 	mov	local05, local07
05dc0     01 2A 06 F1 | 	add	local07, #1
05dc4     F2 2A 62 FC | 	wrlong	local07, objptr
05dc8     54 00 00 FF 
05dcc     DC E4 85 F1 | 	sub	objptr, ##43228
05dd0                 | LR__0486
05dd0     13 1F 02 F6 | 	mov	local01, local05
05dd4     17 22 06 F6 | 	mov	local03, #23
05dd8     0F 2B 02 F6 | 	mov	local07, local01
05ddc     10 2F 02 F6 | 	mov	local09, local02
05de0     11 1F 02 F6 | 	mov	local01, local03
05de4     69 00 00 FF 
05de8     50 E5 05 F1 | 	add	objptr, ##54096
05dec     F2 2C 02 FB | 	rdlong	local08, objptr
05df0     16 29 02 F6 | 	mov	local06, local08
05df4     01 28 66 F0 | 	shl	local06, #1
05df8     16 29 02 F1 | 	add	local06, local08
05dfc     02 28 66 F0 | 	shl	local06, #2
05e00     03 00 00 FF 
05e04     00 E4 85 F1 | 	sub	objptr, ##1536
05e08     F2 28 02 F1 | 	add	local06, objptr
05e0c     14 2B 62 FC | 	wrlong	local07, local06
05e10     03 00 00 FF 
05e14     00 E4 05 F1 | 	add	objptr, ##1536
05e18     F2 2C 02 FB | 	rdlong	local08, objptr
05e1c     16 2B 02 F6 | 	mov	local07, local08
05e20     01 2A 66 F0 | 	shl	local07, #1
05e24     16 2B 02 F1 | 	add	local07, local08
05e28     02 2A 66 F0 | 	shl	local07, #2
05e2c     03 00 00 FF 
05e30     00 E4 85 F1 | 	sub	objptr, ##1536
05e34     F2 2A 02 F1 | 	add	local07, objptr
05e38     04 2A 06 F1 | 	add	local07, #4
05e3c     15 2F 62 FC | 	wrlong	local09, local07
05e40     03 00 00 FF 
05e44     00 E4 05 F1 | 	add	objptr, ##1536
05e48     F2 2E 02 FB | 	rdlong	local09, objptr
05e4c     17 2D 02 F6 | 	mov	local08, local09
05e50     01 2C 66 F0 | 	shl	local08, #1
05e54     17 2D 02 F1 | 	add	local08, local09
05e58     02 2C 66 F0 | 	shl	local08, #2
05e5c     03 00 00 FF 
05e60     00 E4 85 F1 | 	sub	objptr, ##1536
05e64     F2 2C 02 F1 | 	add	local08, objptr
05e68     08 2C 06 F1 | 	add	local08, #8
05e6c     16 1F 62 FC | 	wrlong	local01, local08
05e70     03 00 00 FF 
05e74     00 E4 05 F1 | 	add	objptr, ##1536
05e78     F2 2A 02 FB | 	rdlong	local07, objptr
05e7c     01 2A 06 F1 | 	add	local07, #1
05e80     F2 2A 62 FC | 	wrlong	local07, objptr
05e84     69 00 00 FF 
05e88     50 E5 85 F1 | 	sub	objptr, ##54096
05e8c                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
05e8c                 | ' 
05e8c                 | ' 
05e8c                 | ' 
05e8c                 | ' 
05e8c                 | ' 
05e8c                 | ' 
05e8c                 | ' compiledline(lineptr)=t1:  lineptr+=1 
05e8c                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
05e8c     00 24 0E F2 | 	cmp	local04, #0 wz
05e90     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05e94     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
05e98     38 00 90 5D |  if_ne	jmp	#LR__0487
05e9c     69 00 00 FF 
05ea0     50 E5 05 F1 | 	add	objptr, ##54096
05ea4     F2 1E 02 FB | 	rdlong	local01, objptr
05ea8     0F 2F 02 F6 | 	mov	local09, local01
05eac     01 2E 66 F0 | 	shl	local09, #1
05eb0     0F 2F 02 F1 | 	add	local09, local01
05eb4     02 2E 66 F0 | 	shl	local09, #2
05eb8     03 00 00 FF 
05ebc     00 E4 85 F1 | 	sub	objptr, ##1536
05ec0     F2 2E 02 F1 | 	add	local09, objptr
05ec4     08 2E 06 F1 | 	add	local09, #8
05ec8     17 FD 6B FC | 	wrlong	#510, local09
05ecc     66 00 00 FF 
05ed0     50 E5 85 F1 | 	sub	objptr, ##52560
05ed4                 | LR__0487
05ed4     A7 F0 03 F6 | 	mov	ptra, fp
05ed8     B2 00 A0 FD | 	call	#popregs_
05edc                 | _compile_immediate_assign_ret
05edc     2D 00 64 FD | 	ret
05ee0                 | 
05ee0                 | ' 
05ee0                 | ' ' ------------------ compile the line that is calling a command 
05ee0                 | ' 
05ee0                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
05ee0                 | _compile
05ee0     04 4A 05 F6 | 	mov	COUNT_, #4
05ee4     A8 00 A0 FD | 	call	#pushregs_
05ee8     09 1F 0A F6 | 	mov	local01, arg01 wz
05eec     0A 21 02 F6 | 	mov	local02, arg02
05ef0     0B 23 02 F6 | 	mov	local03, arg03
05ef4                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
05ef4                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
05ef4                 | '  
05ef4                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
05ef4                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
05ef4     0C 00 90 5D |  if_ne	jmp	#LR__0490
05ef8     00 12 06 F6 | 	mov	arg01, #0
05efc     EC F4 BF FD | 	call	#_compile_immediate
05f00     A0 00 90 FD | 	jmp	#LR__0497
05f04                 | LR__0490
05f04     66 00 00 FF 
05f08     50 E5 05 F1 | 	add	objptr, ##52560
05f0c     F2 1E 62 FC | 	wrlong	local01, objptr
05f10     04 E4 05 F1 | 	add	objptr, #4
05f14     F2 20 62 FC | 	wrlong	local02, objptr
05f18     66 00 00 FF 
05f1c     54 E5 85 F1 | 	sub	objptr, ##52564
05f20     11 13 02 F6 | 	mov	arg01, local03
05f24     01 12 06 F1 | 	add	arg01, #1
05f28     C0 F4 BF FD | 	call	#_compile_immediate
05f2c     FD 24 0A F6 | 	mov	local04, result1 wz
05f30                 | ' 
05f30                 | ' ucompiledline(0)=alinemajor
05f30                 | ' ucompiledline(1)=alineminor
05f30                 | ' 
05f30                 | ' 
05f30                 | ' ' cont: 0: this is the first part of the line that will continue
05f30                 | ' ' 1 - this is the continuation of the line
05f30                 | ' ' 2 - this is the last continued line
05f30                 | ' ' 3 - this is the ome and only part
05f30                 | ' 
05f30                 | ' 
05f30                 | ' err=compile_immediate(cont+1) 
05f30                 | ' if err=0 then
05f30     6C 00 90 5D |  if_ne	jmp	#LR__0496
05f34                 | '   if cont=3 orelse cont=2 then 
05f34     03 22 0E F2 | 	cmp	local03, #3 wz
05f38     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05f3c     60 00 90 5D |  if_ne	jmp	#LR__0495
05f40                 | '     if alinemajor >lastline then 
05f40     69 00 00 FF 
05f44     5C E5 05 F1 | 	add	objptr, ##54108
05f48     F2 16 02 FB | 	rdlong	arg03, objptr
05f4c     69 00 00 FF 
05f50     5C E5 85 F1 | 	sub	objptr, ##54108
05f54     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05f58     0C 00 90 ED |  if_be	jmp	#LR__0491
05f5c     0F 13 02 F6 | 	mov	arg01, local01
05f60     A8 F3 BF FD | 	call	#_add_line_at_end
05f64     38 00 90 FD | 	jmp	#LR__0494
05f68                 | LR__0491
05f68     0F 13 02 F6 | 	mov	arg01, local01
05f6c     28 EC BF FD | 	call	#_deleteline
05f70                 | '       deleteline(alinemajor)  
05f70                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
05f70     69 00 00 FF 
05f74     5C E5 05 F1 | 	add	objptr, ##54108
05f78     F2 16 02 FB | 	rdlong	arg03, objptr
05f7c     69 00 00 FF 
05f80     5C E5 85 F1 | 	sub	objptr, ##54108
05f84     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05f88     0C 00 90 ED |  if_be	jmp	#LR__0492
05f8c     0F 13 02 F6 | 	mov	arg01, local01
05f90     78 F3 BF FD | 	call	#_add_line_at_end
05f94     08 00 90 FD | 	jmp	#LR__0493
05f98                 | LR__0492
05f98     0F 13 02 F6 | 	mov	arg01, local01
05f9c     24 F1 BF FD | 	call	#_insertline
05fa0                 | LR__0493
05fa0                 | LR__0494
05fa0                 | LR__0495
05fa0                 | LR__0496
05fa0                 | ' return err
05fa0     12 FB 01 F6 | 	mov	result1, local04
05fa4                 | LR__0497
05fa4     A7 F0 03 F6 | 	mov	ptra, fp
05fa8     B2 00 A0 FD | 	call	#popregs_
05fac                 | _compile_ret
05fac     2D 00 64 FD | 	ret
05fb0                 | 
05fb0                 | ' 
05fb0                 | ' ' ------------------ compile the line that is assigning to a variable
05fb0                 | ' 
05fb0                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
05fb0                 | _compile_assign
05fb0     03 4A 05 F6 | 	mov	COUNT_, #3
05fb4     A8 00 A0 FD | 	call	#pushregs_
05fb8     09 1F 0A F6 | 	mov	local01, arg01 wz
05fbc     0A 21 02 F6 | 	mov	local02, arg02
05fc0     0B 23 02 F6 | 	mov	local03, arg03
05fc4                 | ' 
05fc4                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
05fc4                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
05fc4     0C 00 90 5D |  if_ne	jmp	#LR__0500
05fc8     00 12 06 F6 | 	mov	arg01, #0
05fcc     28 FC BF FD | 	call	#_compile_immediate_assign
05fd0     94 00 90 FD | 	jmp	#LR__0506
05fd4                 | LR__0500
05fd4     66 00 00 FF 
05fd8     50 E5 05 F1 | 	add	objptr, ##52560
05fdc     F2 1E 62 FC | 	wrlong	local01, objptr
05fe0     04 E4 05 F1 | 	add	objptr, #4
05fe4     F2 20 62 FC | 	wrlong	local02, objptr
05fe8     66 00 00 FF 
05fec     54 E5 85 F1 | 	sub	objptr, ##52564
05ff0     11 13 02 F6 | 	mov	arg01, local03
05ff4     01 12 06 F1 | 	add	arg01, #1
05ff8     FC FB BF FD | 	call	#_compile_immediate_assign
05ffc                 | ' 
05ffc                 | ' ucompiledline(0)=alinemajor
05ffc                 | ' ucompiledline(1)=alineminor
05ffc                 | ' 
05ffc                 | ' compile_immediate_assign(cont+1) 
05ffc                 | ' 
05ffc                 | ' if cont=3 orelse cont=2 then 
05ffc     03 22 0E F2 | 	cmp	local03, #3 wz
06000     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06004     60 00 90 5D |  if_ne	jmp	#LR__0505
06008                 | '   if alinemajor >lastline then 
06008     69 00 00 FF 
0600c     5C E5 05 F1 | 	add	objptr, ##54108
06010     F2 16 02 FB | 	rdlong	arg03, objptr
06014     69 00 00 FF 
06018     5C E5 85 F1 | 	sub	objptr, ##54108
0601c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06020     0C 00 90 ED |  if_be	jmp	#LR__0501
06024     0F 13 02 F6 | 	mov	arg01, local01
06028     E0 F2 BF FD | 	call	#_add_line_at_end
0602c     38 00 90 FD | 	jmp	#LR__0504
06030                 | LR__0501
06030     0F 13 02 F6 | 	mov	arg01, local01
06034     60 EB BF FD | 	call	#_deleteline
06038                 | '     deleteline(alinemajor)  
06038                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
06038     69 00 00 FF 
0603c     5C E5 05 F1 | 	add	objptr, ##54108
06040     F2 16 02 FB | 	rdlong	arg03, objptr
06044     69 00 00 FF 
06048     5C E5 85 F1 | 	sub	objptr, ##54108
0604c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06050     0C 00 90 ED |  if_be	jmp	#LR__0502
06054     0F 13 02 F6 | 	mov	arg01, local01
06058     B0 F2 BF FD | 	call	#_add_line_at_end
0605c     08 00 90 FD | 	jmp	#LR__0503
06060                 | LR__0502
06060     0F 13 02 F6 | 	mov	arg01, local01
06064     5C F0 BF FD | 	call	#_insertline
06068                 | LR__0503
06068                 | LR__0504
06068                 | LR__0505
06068                 | LR__0506
06068     A7 F0 03 F6 | 	mov	ptra, fp
0606c     B2 00 A0 FD | 	call	#popregs_
06070                 | _compile_assign_ret
06070     2D 00 64 FD | 	ret
06074                 | 
06074                 | ' 
06074                 | ' sub compile_error(errno)
06074                 | _compile_error
06074     FF 04 06 F6 | 	mov	_var03, #255
06078     01 07 02 F6 | 	mov	_var04, _var02
0607c     02 09 02 F6 | 	mov	_var05, _var03
06080     69 00 00 FF 
06084     50 E5 05 F1 | 	add	objptr, ##54096
06088     F2 0A 02 FB | 	rdlong	_var06, objptr
0608c     05 0D 02 F6 | 	mov	_var07, _var06
06090     01 0C 66 F0 | 	shl	_var07, #1
06094     05 0D 02 F1 | 	add	_var07, _var06
06098     02 0C 66 F0 | 	shl	_var07, #2
0609c     03 00 00 FF 
060a0     00 E4 85 F1 | 	sub	objptr, ##1536
060a4     F2 0C 02 F1 | 	add	_var07, objptr
060a8     06 13 62 FC | 	wrlong	arg01, _var07
060ac     03 00 00 FF 
060b0     00 E4 05 F1 | 	add	objptr, ##1536
060b4     F2 0C 02 FB | 	rdlong	_var07, objptr
060b8     06 0B 02 F6 | 	mov	_var06, _var07
060bc     01 0A 66 F0 | 	shl	_var06, #1
060c0     06 0B 02 F1 | 	add	_var06, _var07
060c4     02 0A 66 F0 | 	shl	_var06, #2
060c8     03 00 00 FF 
060cc     00 E4 85 F1 | 	sub	objptr, ##1536
060d0     F2 0A 02 F1 | 	add	_var06, objptr
060d4     04 0A 06 F1 | 	add	_var06, #4
060d8     05 07 62 FC | 	wrlong	_var04, _var06
060dc     03 00 00 FF 
060e0     00 E4 05 F1 | 	add	objptr, ##1536
060e4     F2 0C 02 FB | 	rdlong	_var07, objptr
060e8     06 0B 02 F6 | 	mov	_var06, _var07
060ec     01 0A 66 F0 | 	shl	_var06, #1
060f0     06 0B 02 F1 | 	add	_var06, _var07
060f4     02 0A 66 F0 | 	shl	_var06, #2
060f8     03 00 00 FF 
060fc     00 E4 85 F1 | 	sub	objptr, ##1536
06100     F2 0A 02 F1 | 	add	_var06, objptr
06104     08 0A 06 F1 | 	add	_var06, #8
06108     05 09 62 FC | 	wrlong	_var05, _var06
0610c     03 00 00 FF 
06110     00 E4 05 F1 | 	add	objptr, ##1536
06114     F2 12 02 FB | 	rdlong	arg01, objptr
06118     01 12 06 F1 | 	add	arg01, #1
0611c     F2 12 62 FC | 	wrlong	arg01, objptr
06120     69 00 00 FF 
06124     50 E5 85 F1 | 	sub	objptr, ##54096
06128                 | _compile_error_ret
06128     2D 00 64 FD | 	ret
0612c                 | 
0612c                 | ' 
0612c                 | ' sub compile_unknown() 
0612c                 | _compile_unknown
0612c     FF 04 06 F6 | 	mov	_var03, #255
06130     17 00 06 F6 | 	mov	_var01, #23
06134     01 07 02 F6 | 	mov	_var04, _var02
06138     02 01 02 F6 | 	mov	_var01, _var03
0613c     69 00 00 FF 
06140     50 E5 05 F1 | 	add	objptr, ##54096
06144     F2 08 02 FB | 	rdlong	_var05, objptr
06148     04 0B 02 F6 | 	mov	_var06, _var05
0614c     01 0A 66 F0 | 	shl	_var06, #1
06150     04 0B 02 F1 | 	add	_var06, _var05
06154     02 0A 66 F0 | 	shl	_var06, #2
06158     03 00 00 FF 
0615c     00 E4 85 F1 | 	sub	objptr, ##1536
06160     F2 0A 02 F1 | 	add	_var06, objptr
06164     05 2F 68 FC | 	wrlong	#23, _var06
06168     03 00 00 FF 
0616c     00 E4 05 F1 | 	add	objptr, ##1536
06170     F2 0A 02 FB | 	rdlong	_var06, objptr
06174     05 09 02 F6 | 	mov	_var05, _var06
06178     01 08 66 F0 | 	shl	_var05, #1
0617c     05 09 02 F1 | 	add	_var05, _var06
06180     02 08 66 F0 | 	shl	_var05, #2
06184     03 00 00 FF 
06188     00 E4 85 F1 | 	sub	objptr, ##1536
0618c     F2 08 02 F1 | 	add	_var05, objptr
06190     04 08 06 F1 | 	add	_var05, #4
06194     04 07 62 FC | 	wrlong	_var04, _var05
06198     03 00 00 FF 
0619c     00 E4 05 F1 | 	add	objptr, ##1536
061a0     F2 0A 02 FB | 	rdlong	_var06, objptr
061a4     05 09 02 F6 | 	mov	_var05, _var06
061a8     01 08 66 F0 | 	shl	_var05, #1
061ac     05 09 02 F1 | 	add	_var05, _var06
061b0     02 08 66 F0 | 	shl	_var05, #2
061b4     03 00 00 FF 
061b8     00 E4 85 F1 | 	sub	objptr, ##1536
061bc     F2 08 02 F1 | 	add	_var05, objptr
061c0     08 08 06 F1 | 	add	_var05, #8
061c4     04 01 62 FC | 	wrlong	_var01, _var05
061c8     03 00 00 FF 
061cc     00 E4 05 F1 | 	add	objptr, ##1536
061d0     F2 0A 02 FB | 	rdlong	_var06, objptr
061d4     01 0A 06 F1 | 	add	_var06, #1
061d8     F2 0A 62 FC | 	wrlong	_var06, objptr
061dc     69 00 00 FF 
061e0     50 E5 85 F1 | 	sub	objptr, ##54096
061e4                 | _compile_unknown_ret
061e4     2D 00 64 FD | 	ret
061e8                 | 
061e8                 | ' 
061e8                 | ' function compile_fun_2p() as ulong
061e8                 | _compile_fun_2p
061e8     01 4A 05 F6 | 	mov	COUNT_, #1
061ec     A8 00 A0 FD | 	call	#pushregs_
061f0     40 22 B0 FD | 	call	#_expr
061f4                 | ' 
061f4                 | ' expr()
061f4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
061f4     56 00 00 FF 
061f8     18 E5 05 F1 | 	add	objptr, ##44312
061fc     F2 1E 02 FB | 	rdlong	local01, objptr
06200     03 1E 66 F0 | 	shl	local01, #3
06204     02 00 00 FF 
06208     38 E4 85 F1 | 	sub	objptr, ##1080
0620c     F2 1E 02 F1 | 	add	local01, objptr
06210     04 1E 06 F1 | 	add	local01, #4
06214     0F 1F 02 FB | 	rdlong	local01, local01
06218     11 1E 0E F2 | 	cmp	local01, #17 wz
0621c     54 00 00 FF 
06220     E0 E4 85 F1 | 	sub	objptr, ##43232
06224     15 FA 05 56 |  if_ne	mov	result1, #21
06228     24 00 90 5D |  if_ne	jmp	#LR__0510
0622c     56 00 00 FF 
06230     18 E5 05 F1 | 	add	objptr, ##44312
06234     F2 1E 02 FB | 	rdlong	local01, objptr
06238     01 1E 06 F1 | 	add	local01, #1
0623c     F2 1E 62 FC | 	wrlong	local01, objptr
06240     56 00 00 FF 
06244     18 E5 85 F1 | 	sub	objptr, ##44312
06248     E8 21 B0 FD | 	call	#_expr
0624c     00 FA 05 F6 | 	mov	result1, #0
06250                 | LR__0510
06250     A7 F0 03 F6 | 	mov	ptra, fp
06254     B2 00 A0 FD | 	call	#popregs_
06258                 | _compile_fun_2p_ret
06258     2D 00 64 FD | 	ret
0625c                 | 
0625c                 | ' 
0625c                 | ' function compile_fun_3p() as ulong
0625c                 | _compile_fun_3p
0625c     01 4A 05 F6 | 	mov	COUNT_, #1
06260     A8 00 A0 FD | 	call	#pushregs_
06264     CC 21 B0 FD | 	call	#_expr
06268                 | ' 
06268                 | ' expr()
06268                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06268     56 00 00 FF 
0626c     18 E5 05 F1 | 	add	objptr, ##44312
06270     F2 1E 02 FB | 	rdlong	local01, objptr
06274     03 1E 66 F0 | 	shl	local01, #3
06278     02 00 00 FF 
0627c     38 E4 85 F1 | 	sub	objptr, ##1080
06280     F2 1E 02 F1 | 	add	local01, objptr
06284     04 1E 06 F1 | 	add	local01, #4
06288     0F 1F 02 FB | 	rdlong	local01, local01
0628c     11 1E 0E F2 | 	cmp	local01, #17 wz
06290     54 00 00 FF 
06294     E0 E4 85 F1 | 	sub	objptr, ##43232
06298     15 FA 05 56 |  if_ne	mov	result1, #21
0629c     7C 00 90 5D |  if_ne	jmp	#LR__0520
062a0     56 00 00 FF 
062a4     18 E5 05 F1 | 	add	objptr, ##44312
062a8     F2 1E 02 FB | 	rdlong	local01, objptr
062ac     01 1E 06 F1 | 	add	local01, #1
062b0     F2 1E 62 FC | 	wrlong	local01, objptr
062b4     56 00 00 FF 
062b8     18 E5 85 F1 | 	sub	objptr, ##44312
062bc     74 21 B0 FD | 	call	#_expr
062c0                 | ' expr()
062c0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
062c0     56 00 00 FF 
062c4     18 E5 05 F1 | 	add	objptr, ##44312
062c8     F2 1E 02 FB | 	rdlong	local01, objptr
062cc     03 1E 66 F0 | 	shl	local01, #3
062d0     02 00 00 FF 
062d4     38 E4 85 F1 | 	sub	objptr, ##1080
062d8     F2 1E 02 F1 | 	add	local01, objptr
062dc     04 1E 06 F1 | 	add	local01, #4
062e0     0F 1F 02 FB | 	rdlong	local01, local01
062e4     11 1E 0E F2 | 	cmp	local01, #17 wz
062e8     54 00 00 FF 
062ec     E0 E4 85 F1 | 	sub	objptr, ##43232
062f0     15 FA 05 56 |  if_ne	mov	result1, #21
062f4     24 00 90 5D |  if_ne	jmp	#LR__0520
062f8     56 00 00 FF 
062fc     18 E5 05 F1 | 	add	objptr, ##44312
06300     F2 1E 02 FB | 	rdlong	local01, objptr
06304     01 1E 06 F1 | 	add	local01, #1
06308     F2 1E 62 FC | 	wrlong	local01, objptr
0630c     56 00 00 FF 
06310     18 E5 85 F1 | 	sub	objptr, ##44312
06314     1C 21 B0 FD | 	call	#_expr
06318     00 FA 05 F6 | 	mov	result1, #0
0631c                 | LR__0520
0631c     A7 F0 03 F6 | 	mov	ptra, fp
06320     B2 00 A0 FD | 	call	#popregs_
06324                 | _compile_fun_3p_ret
06324     2D 00 64 FD | 	ret
06328                 | 
06328                 | ' 
06328                 | ' function compile_fun_4p() as ulong
06328                 | _compile_fun_4p
06328     01 4A 05 F6 | 	mov	COUNT_, #1
0632c     A8 00 A0 FD | 	call	#pushregs_
06330     00 21 B0 FD | 	call	#_expr
06334                 | ' 
06334                 | ' expr()
06334                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06334     56 00 00 FF 
06338     18 E5 05 F1 | 	add	objptr, ##44312
0633c     F2 1E 02 FB | 	rdlong	local01, objptr
06340     03 1E 66 F0 | 	shl	local01, #3
06344     02 00 00 FF 
06348     38 E4 85 F1 | 	sub	objptr, ##1080
0634c     F2 1E 02 F1 | 	add	local01, objptr
06350     04 1E 06 F1 | 	add	local01, #4
06354     0F 1F 02 FB | 	rdlong	local01, local01
06358     11 1E 0E F2 | 	cmp	local01, #17 wz
0635c     54 00 00 FF 
06360     E0 E4 85 F1 | 	sub	objptr, ##43232
06364     15 FA 05 56 |  if_ne	mov	result1, #21
06368     D4 00 90 5D |  if_ne	jmp	#LR__0530
0636c     56 00 00 FF 
06370     18 E5 05 F1 | 	add	objptr, ##44312
06374     F2 1E 02 FB | 	rdlong	local01, objptr
06378     01 1E 06 F1 | 	add	local01, #1
0637c     F2 1E 62 FC | 	wrlong	local01, objptr
06380     56 00 00 FF 
06384     18 E5 85 F1 | 	sub	objptr, ##44312
06388     A8 20 B0 FD | 	call	#_expr
0638c                 | ' expr()
0638c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0638c     56 00 00 FF 
06390     18 E5 05 F1 | 	add	objptr, ##44312
06394     F2 1E 02 FB | 	rdlong	local01, objptr
06398     03 1E 66 F0 | 	shl	local01, #3
0639c     02 00 00 FF 
063a0     38 E4 85 F1 | 	sub	objptr, ##1080
063a4     F2 1E 02 F1 | 	add	local01, objptr
063a8     04 1E 06 F1 | 	add	local01, #4
063ac     0F 1F 02 FB | 	rdlong	local01, local01
063b0     11 1E 0E F2 | 	cmp	local01, #17 wz
063b4     54 00 00 FF 
063b8     E0 E4 85 F1 | 	sub	objptr, ##43232
063bc     15 FA 05 56 |  if_ne	mov	result1, #21
063c0     7C 00 90 5D |  if_ne	jmp	#LR__0530
063c4     56 00 00 FF 
063c8     18 E5 05 F1 | 	add	objptr, ##44312
063cc     F2 1E 02 FB | 	rdlong	local01, objptr
063d0     01 1E 06 F1 | 	add	local01, #1
063d4     F2 1E 62 FC | 	wrlong	local01, objptr
063d8     56 00 00 FF 
063dc     18 E5 85 F1 | 	sub	objptr, ##44312
063e0     50 20 B0 FD | 	call	#_expr
063e4                 | ' expr()
063e4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
063e4     56 00 00 FF 
063e8     18 E5 05 F1 | 	add	objptr, ##44312
063ec     F2 1E 02 FB | 	rdlong	local01, objptr
063f0     03 1E 66 F0 | 	shl	local01, #3
063f4     02 00 00 FF 
063f8     38 E4 85 F1 | 	sub	objptr, ##1080
063fc     F2 1E 02 F1 | 	add	local01, objptr
06400     04 1E 06 F1 | 	add	local01, #4
06404     0F 1F 02 FB | 	rdlong	local01, local01
06408     11 1E 0E F2 | 	cmp	local01, #17 wz
0640c     54 00 00 FF 
06410     E0 E4 85 F1 | 	sub	objptr, ##43232
06414     15 FA 05 56 |  if_ne	mov	result1, #21
06418     24 00 90 5D |  if_ne	jmp	#LR__0530
0641c     56 00 00 FF 
06420     18 E5 05 F1 | 	add	objptr, ##44312
06424     F2 1E 02 FB | 	rdlong	local01, objptr
06428     01 1E 06 F1 | 	add	local01, #1
0642c     F2 1E 62 FC | 	wrlong	local01, objptr
06430     56 00 00 FF 
06434     18 E5 85 F1 | 	sub	objptr, ##44312
06438     F8 1F B0 FD | 	call	#_expr
0643c     00 FA 05 F6 | 	mov	result1, #0
06440                 | LR__0530
06440     A7 F0 03 F6 | 	mov	ptra, fp
06444     B2 00 A0 FD | 	call	#popregs_
06448                 | _compile_fun_4p_ret
06448     2D 00 64 FD | 	ret
0644c                 | 
0644c                 | ' 
0644c                 | ' 
0644c                 | ' function compile_fun_5p() as ulong
0644c                 | _compile_fun_5p
0644c     01 4A 05 F6 | 	mov	COUNT_, #1
06450     A8 00 A0 FD | 	call	#pushregs_
06454     DC 1F B0 FD | 	call	#_expr
06458                 | ' 
06458                 | ' expr()
06458                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06458     56 00 00 FF 
0645c     18 E5 05 F1 | 	add	objptr, ##44312
06460     F2 1E 02 FB | 	rdlong	local01, objptr
06464     03 1E 66 F0 | 	shl	local01, #3
06468     02 00 00 FF 
0646c     38 E4 85 F1 | 	sub	objptr, ##1080
06470     F2 1E 02 F1 | 	add	local01, objptr
06474     04 1E 06 F1 | 	add	local01, #4
06478     0F 1F 02 FB | 	rdlong	local01, local01
0647c     11 1E 0E F2 | 	cmp	local01, #17 wz
06480     54 00 00 FF 
06484     E0 E4 85 F1 | 	sub	objptr, ##43232
06488     15 FA 05 56 |  if_ne	mov	result1, #21
0648c     2C 01 90 5D |  if_ne	jmp	#LR__0540
06490     56 00 00 FF 
06494     18 E5 05 F1 | 	add	objptr, ##44312
06498     F2 1E 02 FB | 	rdlong	local01, objptr
0649c     01 1E 06 F1 | 	add	local01, #1
064a0     F2 1E 62 FC | 	wrlong	local01, objptr
064a4     56 00 00 FF 
064a8     18 E5 85 F1 | 	sub	objptr, ##44312
064ac     84 1F B0 FD | 	call	#_expr
064b0                 | ' expr()
064b0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
064b0     56 00 00 FF 
064b4     18 E5 05 F1 | 	add	objptr, ##44312
064b8     F2 1E 02 FB | 	rdlong	local01, objptr
064bc     03 1E 66 F0 | 	shl	local01, #3
064c0     02 00 00 FF 
064c4     38 E4 85 F1 | 	sub	objptr, ##1080
064c8     F2 1E 02 F1 | 	add	local01, objptr
064cc     04 1E 06 F1 | 	add	local01, #4
064d0     0F 1F 02 FB | 	rdlong	local01, local01
064d4     11 1E 0E F2 | 	cmp	local01, #17 wz
064d8     54 00 00 FF 
064dc     E0 E4 85 F1 | 	sub	objptr, ##43232
064e0     15 FA 05 56 |  if_ne	mov	result1, #21
064e4     D4 00 90 5D |  if_ne	jmp	#LR__0540
064e8     56 00 00 FF 
064ec     18 E5 05 F1 | 	add	objptr, ##44312
064f0     F2 1E 02 FB | 	rdlong	local01, objptr
064f4     01 1E 06 F1 | 	add	local01, #1
064f8     F2 1E 62 FC | 	wrlong	local01, objptr
064fc     56 00 00 FF 
06500     18 E5 85 F1 | 	sub	objptr, ##44312
06504     2C 1F B0 FD | 	call	#_expr
06508                 | ' expr()
06508                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06508     56 00 00 FF 
0650c     18 E5 05 F1 | 	add	objptr, ##44312
06510     F2 1E 02 FB | 	rdlong	local01, objptr
06514     03 1E 66 F0 | 	shl	local01, #3
06518     02 00 00 FF 
0651c     38 E4 85 F1 | 	sub	objptr, ##1080
06520     F2 1E 02 F1 | 	add	local01, objptr
06524     04 1E 06 F1 | 	add	local01, #4
06528     0F 1F 02 FB | 	rdlong	local01, local01
0652c     11 1E 0E F2 | 	cmp	local01, #17 wz
06530     54 00 00 FF 
06534     E0 E4 85 F1 | 	sub	objptr, ##43232
06538     15 FA 05 56 |  if_ne	mov	result1, #21
0653c     7C 00 90 5D |  if_ne	jmp	#LR__0540
06540     56 00 00 FF 
06544     18 E5 05 F1 | 	add	objptr, ##44312
06548     F2 1E 02 FB | 	rdlong	local01, objptr
0654c     01 1E 06 F1 | 	add	local01, #1
06550     F2 1E 62 FC | 	wrlong	local01, objptr
06554     56 00 00 FF 
06558     18 E5 85 F1 | 	sub	objptr, ##44312
0655c     D4 1E B0 FD | 	call	#_expr
06560                 | ' expr()
06560                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06560     56 00 00 FF 
06564     18 E5 05 F1 | 	add	objptr, ##44312
06568     F2 1E 02 FB | 	rdlong	local01, objptr
0656c     03 1E 66 F0 | 	shl	local01, #3
06570     02 00 00 FF 
06574     38 E4 85 F1 | 	sub	objptr, ##1080
06578     F2 1E 02 F1 | 	add	local01, objptr
0657c     04 1E 06 F1 | 	add	local01, #4
06580     0F 1F 02 FB | 	rdlong	local01, local01
06584     11 1E 0E F2 | 	cmp	local01, #17 wz
06588     54 00 00 FF 
0658c     E0 E4 85 F1 | 	sub	objptr, ##43232
06590     15 FA 05 56 |  if_ne	mov	result1, #21
06594     24 00 90 5D |  if_ne	jmp	#LR__0540
06598     56 00 00 FF 
0659c     18 E5 05 F1 | 	add	objptr, ##44312
065a0     F2 1E 02 FB | 	rdlong	local01, objptr
065a4     01 1E 06 F1 | 	add	local01, #1
065a8     F2 1E 62 FC | 	wrlong	local01, objptr
065ac     56 00 00 FF 
065b0     18 E5 85 F1 | 	sub	objptr, ##44312
065b4     7C 1E B0 FD | 	call	#_expr
065b8     00 FA 05 F6 | 	mov	result1, #0
065bc                 | LR__0540
065bc     A7 F0 03 F6 | 	mov	ptra, fp
065c0     B2 00 A0 FD | 	call	#popregs_
065c4                 | _compile_fun_5p_ret
065c4     2D 00 64 FD | 	ret
065c8                 | 
065c8                 | ' 
065c8                 | ' function compile_fun_varp() as ulong 
065c8                 | _compile_fun_varp
065c8     02 4A 05 F6 | 	mov	COUNT_, #2
065cc     A8 00 A0 FD | 	call	#pushregs_
065d0     00 1E 06 F6 | 	mov	local01, #0
065d4                 | ' i=0
065d4                 | ' if lparts(ct).token<>token_end then
065d4     56 00 00 FF 
065d8     18 E5 05 F1 | 	add	objptr, ##44312
065dc     F2 20 02 FB | 	rdlong	local02, objptr
065e0     03 20 66 F0 | 	shl	local02, #3
065e4     02 00 00 FF 
065e8     38 E4 85 F1 | 	sub	objptr, ##1080
065ec     F2 20 02 F1 | 	add	local02, objptr
065f0     04 20 06 F1 | 	add	local02, #4
065f4     10 21 02 FB | 	rdlong	local02, local02
065f8     FE 21 0E F2 | 	cmp	local02, #510 wz
065fc     54 00 00 FF 
06600     E0 E4 85 F1 | 	sub	objptr, ##43232
06604     5C 00 90 AD |  if_e	jmp	#LR__0552
06608                 | '   do
06608                 | LR__0550
06608     28 1E B0 FD | 	call	#_expr
0660c     01 1E 06 F1 | 	add	local01, #1
06610                 | '   expr()
06610                 | '    i+=1
06610                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
06610     56 00 00 FF 
06614     18 E5 05 F1 | 	add	objptr, ##44312
06618     F2 20 02 FB | 	rdlong	local02, objptr
0661c     03 20 66 F0 | 	shl	local02, #3
06620     02 00 00 FF 
06624     38 E4 85 F1 | 	sub	objptr, ##1080
06628     F2 20 02 F1 | 	add	local02, objptr
0662c     04 20 06 F1 | 	add	local02, #4
06630     10 21 02 FB | 	rdlong	local02, local02
06634     11 20 0E F2 | 	cmp	local02, #17 wz
06638     54 00 00 FF 
0663c     E0 E4 85 F1 | 	sub	objptr, ##43232
06640     20 00 90 5D |  if_ne	jmp	#LR__0551
06644     56 00 00 FF 
06648     18 E5 05 F1 | 	add	objptr, ##44312
0664c     F2 20 02 FB | 	rdlong	local02, objptr
06650     01 20 06 F1 | 	add	local02, #1
06654     F2 20 62 FC | 	wrlong	local02, objptr
06658     56 00 00 FF 
0665c     18 E5 85 F1 | 	sub	objptr, ##44312
06660     A4 FF 9F FD | 	jmp	#LR__0550
06664                 | LR__0551
06664                 | LR__0552
06664                 | ' return i
06664     0F FB 01 F6 | 	mov	result1, local01
06668     A7 F0 03 F6 | 	mov	ptra, fp
0666c     B2 00 A0 FD | 	call	#popregs_
06670                 | _compile_fun_varp_ret
06670     2D 00 64 FD | 	ret
06674                 | 
06674                 | ' 
06674                 | ' 
06674                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
06674                 | _compile_print
06674     0B 4A 05 F6 | 	mov	COUNT_, #11
06678     A8 00 A0 FD | 	call	#pushregs_
0667c     00 1E 06 F6 | 	mov	local01, #0
06680     1D 22 06 F6 | 	mov	local03, #29
06684                 | ' t1.result.uresult=0 : t1.result_type=result_uint
06684                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
06684     56 00 00 FF 
06688     18 E5 05 F1 | 	add	objptr, ##44312
0668c     F2 24 02 FB | 	rdlong	local04, objptr
06690     03 24 66 F0 | 	shl	local04, #3
06694     02 00 00 FF 
06698     38 E4 85 F1 | 	sub	objptr, ##1080
0669c     F2 24 02 F1 | 	add	local04, objptr
066a0     04 24 06 F1 | 	add	local04, #4
066a4     12 25 02 FB | 	rdlong	local04, local04
066a8     FE 25 0E F2 | 	cmp	local04, #510 wz
066ac     54 00 00 FF 
066b0     E0 E4 85 F1 | 	sub	objptr, ##43232
066b4     68 01 90 5D |  if_ne	jmp	#LR__0560
066b8     20 22 06 F6 | 	mov	local03, #32
066bc     0F 27 02 F6 | 	mov	local05, local01
066c0     10 29 02 F6 | 	mov	local06, local02
066c4     11 2B 02 F6 | 	mov	local07, local03
066c8     69 00 00 FF 
066cc     50 E5 05 F1 | 	add	objptr, ##54096
066d0     F2 2C 02 FB | 	rdlong	local08, objptr
066d4     16 2F 02 F6 | 	mov	local09, local08
066d8     01 2E 66 F0 | 	shl	local09, #1
066dc     16 2F 02 F1 | 	add	local09, local08
066e0     02 2E 66 F0 | 	shl	local09, #2
066e4     03 00 00 FF 
066e8     00 E4 85 F1 | 	sub	objptr, ##1536
066ec     F2 2E 02 F1 | 	add	local09, objptr
066f0     17 27 62 FC | 	wrlong	local05, local09
066f4     03 00 00 FF 
066f8     00 E4 05 F1 | 	add	objptr, ##1536
066fc     F2 26 02 FB | 	rdlong	local05, objptr
06700     13 31 02 F6 | 	mov	local10, local05
06704     01 30 66 F0 | 	shl	local10, #1
06708     13 31 02 F1 | 	add	local10, local05
0670c     02 30 66 F0 | 	shl	local10, #2
06710     03 00 00 FF 
06714     00 E4 85 F1 | 	sub	objptr, ##1536
06718     F2 30 02 F1 | 	add	local10, objptr
0671c     04 30 06 F1 | 	add	local10, #4
06720     18 29 62 FC | 	wrlong	local06, local10
06724     03 00 00 FF 
06728     00 E4 05 F1 | 	add	objptr, ##1536
0672c     F2 26 02 FB | 	rdlong	local05, objptr
06730     13 33 02 F6 | 	mov	local11, local05
06734     01 32 66 F0 | 	shl	local11, #1
06738     13 33 02 F1 | 	add	local11, local05
0673c     02 32 66 F0 | 	shl	local11, #2
06740     03 00 00 FF 
06744     00 E4 85 F1 | 	sub	objptr, ##1536
06748     F2 32 02 F1 | 	add	local11, objptr
0674c     08 32 06 F1 | 	add	local11, #8
06750     19 2B 62 FC | 	wrlong	local07, local11
06754     03 00 00 FF 
06758     00 E4 05 F1 | 	add	objptr, ##1536
0675c     F2 26 02 FB | 	rdlong	local05, objptr
06760     01 26 06 F1 | 	add	local05, #1
06764     F2 26 62 FC | 	wrlong	local05, objptr
06768     44 22 06 F6 | 	mov	local03, #68
0676c     0F 27 02 F6 | 	mov	local05, local01
06770     10 29 02 F6 | 	mov	local06, local02
06774     11 2B 02 F6 | 	mov	local07, local03
06778     F2 2C 02 FB | 	rdlong	local08, objptr
0677c     16 2F 02 F6 | 	mov	local09, local08
06780     01 2E 66 F0 | 	shl	local09, #1
06784     16 2F 02 F1 | 	add	local09, local08
06788     02 2E 66 F0 | 	shl	local09, #2
0678c     03 00 00 FF 
06790     00 E4 85 F1 | 	sub	objptr, ##1536
06794     F2 2E 02 F1 | 	add	local09, objptr
06798     17 27 62 FC | 	wrlong	local05, local09
0679c     03 00 00 FF 
067a0     00 E4 05 F1 | 	add	objptr, ##1536
067a4     F2 32 02 FB | 	rdlong	local11, objptr
067a8     19 31 02 F6 | 	mov	local10, local11
067ac     01 30 66 F0 | 	shl	local10, #1
067b0     19 31 02 F1 | 	add	local10, local11
067b4     02 30 66 F0 | 	shl	local10, #2
067b8     03 00 00 FF 
067bc     00 E4 85 F1 | 	sub	objptr, ##1536
067c0     F2 30 02 F1 | 	add	local10, objptr
067c4     04 30 06 F1 | 	add	local10, #4
067c8     18 29 62 FC | 	wrlong	local06, local10
067cc     03 00 00 FF 
067d0     00 E4 05 F1 | 	add	objptr, ##1536
067d4     F2 30 02 FB | 	rdlong	local10, objptr
067d8     18 33 02 F6 | 	mov	local11, local10
067dc     01 32 66 F0 | 	shl	local11, #1
067e0     18 33 02 F1 | 	add	local11, local10
067e4     02 32 66 F0 | 	shl	local11, #2
067e8     03 00 00 FF 
067ec     00 E4 85 F1 | 	sub	objptr, ##1536
067f0     F2 32 02 F1 | 	add	local11, objptr
067f4     08 32 06 F1 | 	add	local11, #8
067f8     19 2B 62 FC | 	wrlong	local07, local11
067fc     03 00 00 FF 
06800     00 E4 05 F1 | 	add	objptr, ##1536
06804     F2 26 02 FB | 	rdlong	local05, objptr
06808     01 26 06 F1 | 	add	local05, #1
0680c     F2 26 62 FC | 	wrlong	local05, objptr
06810     69 00 00 FF 
06814     50 E5 85 F1 | 	sub	objptr, ##54096
06818     00 FA 05 F6 | 	mov	result1, #0
0681c     20 05 90 FD | 	jmp	#LR__0567
06820                 | LR__0560
06820                 | ' do
06820                 | LR__0561
06820     10 1C B0 FD | 	call	#_expr
06824                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
06824                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06824     56 00 00 FF 
06828     18 E5 05 F1 | 	add	objptr, ##44312
0682c     F2 24 02 FB | 	rdlong	local04, objptr
06830     03 24 66 F0 | 	shl	local04, #3
06834     02 00 00 FF 
06838     38 E4 85 F1 | 	sub	objptr, ##1080
0683c     F2 24 02 F1 | 	add	local04, objptr
06840     04 24 06 F1 | 	add	local04, #4
06844     12 2D 02 FB | 	rdlong	local08, local04
06848     11 2C 0E F2 | 	cmp	local08, #17 wz
0684c     54 00 00 FF 
06850     E0 E4 85 F1 | 	sub	objptr, ##43232
06854     60 01 90 5D |  if_ne	jmp	#LR__0562
06858     21 22 06 F6 | 	mov	local03, #33
0685c     0F 27 02 F6 | 	mov	local05, local01
06860     10 29 02 F6 | 	mov	local06, local02
06864     11 2B 02 F6 | 	mov	local07, local03
06868     69 00 00 FF 
0686c     50 E5 05 F1 | 	add	objptr, ##54096
06870     F2 2C 02 FB | 	rdlong	local08, objptr
06874     16 2F 02 F6 | 	mov	local09, local08
06878     01 2E 66 F0 | 	shl	local09, #1
0687c     16 2F 02 F1 | 	add	local09, local08
06880     02 2E 66 F0 | 	shl	local09, #2
06884     03 00 00 FF 
06888     00 E4 85 F1 | 	sub	objptr, ##1536
0688c     F2 2E 02 F1 | 	add	local09, objptr
06890     17 27 62 FC | 	wrlong	local05, local09
06894     03 00 00 FF 
06898     00 E4 05 F1 | 	add	objptr, ##1536
0689c     F2 32 02 FB | 	rdlong	local11, objptr
068a0     19 31 02 F6 | 	mov	local10, local11
068a4     01 30 66 F0 | 	shl	local10, #1
068a8     19 31 02 F1 | 	add	local10, local11
068ac     02 30 66 F0 | 	shl	local10, #2
068b0     03 00 00 FF 
068b4     00 E4 85 F1 | 	sub	objptr, ##1536
068b8     F2 30 02 F1 | 	add	local10, objptr
068bc     04 30 06 F1 | 	add	local10, #4
068c0     18 29 62 FC | 	wrlong	local06, local10
068c4     03 00 00 FF 
068c8     00 E4 05 F1 | 	add	objptr, ##1536
068cc     F2 26 02 FB | 	rdlong	local05, objptr
068d0     13 33 02 F6 | 	mov	local11, local05
068d4     01 32 66 F0 | 	shl	local11, #1
068d8     13 33 02 F1 | 	add	local11, local05
068dc     02 32 66 F0 | 	shl	local11, #2
068e0     03 00 00 FF 
068e4     00 E4 85 F1 | 	sub	objptr, ##1536
068e8     F2 32 02 F1 | 	add	local11, objptr
068ec     08 32 06 F1 | 	add	local11, #8
068f0     19 2B 62 FC | 	wrlong	local07, local11
068f4     03 00 00 FF 
068f8     00 E4 05 F1 | 	add	objptr, ##1536
068fc     F2 26 02 FB | 	rdlong	local05, objptr
06900     01 26 06 F1 | 	add	local05, #1
06904     F2 26 62 FC | 	wrlong	local05, objptr
06908     44 22 06 F6 | 	mov	local03, #68
0690c     0F 27 02 F6 | 	mov	local05, local01
06910     10 29 02 F6 | 	mov	local06, local02
06914     11 2B 02 F6 | 	mov	local07, local03
06918     F2 2C 02 FB | 	rdlong	local08, objptr
0691c     16 2F 02 F6 | 	mov	local09, local08
06920     01 2E 66 F0 | 	shl	local09, #1
06924     16 2F 02 F1 | 	add	local09, local08
06928     02 2E 66 F0 | 	shl	local09, #2
0692c     03 00 00 FF 
06930     00 E4 85 F1 | 	sub	objptr, ##1536
06934     F2 2E 02 F1 | 	add	local09, objptr
06938     17 27 62 FC | 	wrlong	local05, local09
0693c     03 00 00 FF 
06940     00 E4 05 F1 | 	add	objptr, ##1536
06944     F2 32 02 FB | 	rdlong	local11, objptr
06948     19 31 02 F6 | 	mov	local10, local11
0694c     01 30 66 F0 | 	shl	local10, #1
06950     19 31 02 F1 | 	add	local10, local11
06954     02 30 66 F0 | 	shl	local10, #2
06958     03 00 00 FF 
0695c     00 E4 85 F1 | 	sub	objptr, ##1536
06960     F2 30 02 F1 | 	add	local10, objptr
06964     04 30 06 F1 | 	add	local10, #4
06968     18 29 62 FC | 	wrlong	local06, local10
0696c     03 00 00 FF 
06970     00 E4 05 F1 | 	add	objptr, ##1536
06974     F2 30 02 FB | 	rdlong	local10, objptr
06978     18 33 02 F6 | 	mov	local11, local10
0697c     01 32 66 F0 | 	shl	local11, #1
06980     18 33 02 F1 | 	add	local11, local10
06984     02 32 66 F0 | 	shl	local11, #2
06988     03 00 00 FF 
0698c     00 E4 85 F1 | 	sub	objptr, ##1536
06990     F2 32 02 F1 | 	add	local11, objptr
06994     08 32 06 F1 | 	add	local11, #8
06998     19 2B 62 FC | 	wrlong	local07, local11
0699c     03 00 00 FF 
069a0     00 E4 05 F1 | 	add	objptr, ##1536
069a4     F2 26 02 FB | 	rdlong	local05, objptr
069a8     01 26 06 F1 | 	add	local05, #1
069ac     F2 26 62 FC | 	wrlong	local05, objptr
069b0     69 00 00 FF 
069b4     50 E5 85 F1 | 	sub	objptr, ##54096
069b8                 | LR__0562
069b8                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
069b8     56 00 00 FF 
069bc     18 E5 05 F1 | 	add	objptr, ##44312
069c0     F2 24 02 FB | 	rdlong	local04, objptr
069c4     03 24 66 F0 | 	shl	local04, #3
069c8     02 00 00 FF 
069cc     38 E4 85 F1 | 	sub	objptr, ##1080
069d0     F2 24 02 F1 | 	add	local04, objptr
069d4     04 24 06 F1 | 	add	local04, #4
069d8     12 2D 02 FB | 	rdlong	local08, local04
069dc     12 2C 0E F2 | 	cmp	local08, #18 wz
069e0     54 00 00 FF 
069e4     E0 E4 85 F1 | 	sub	objptr, ##43232
069e8     60 01 90 5D |  if_ne	jmp	#LR__0563
069ec     22 22 06 F6 | 	mov	local03, #34
069f0     0F 27 02 F6 | 	mov	local05, local01
069f4     10 29 02 F6 | 	mov	local06, local02
069f8     11 2B 02 F6 | 	mov	local07, local03
069fc     69 00 00 FF 
06a00     50 E5 05 F1 | 	add	objptr, ##54096
06a04     F2 2C 02 FB | 	rdlong	local08, objptr
06a08     16 2F 02 F6 | 	mov	local09, local08
06a0c     01 2E 66 F0 | 	shl	local09, #1
06a10     16 2F 02 F1 | 	add	local09, local08
06a14     02 2E 66 F0 | 	shl	local09, #2
06a18     03 00 00 FF 
06a1c     00 E4 85 F1 | 	sub	objptr, ##1536
06a20     F2 2E 02 F1 | 	add	local09, objptr
06a24     17 27 62 FC | 	wrlong	local05, local09
06a28     03 00 00 FF 
06a2c     00 E4 05 F1 | 	add	objptr, ##1536
06a30     F2 32 02 FB | 	rdlong	local11, objptr
06a34     19 31 02 F6 | 	mov	local10, local11
06a38     01 30 66 F0 | 	shl	local10, #1
06a3c     19 31 02 F1 | 	add	local10, local11
06a40     02 30 66 F0 | 	shl	local10, #2
06a44     03 00 00 FF 
06a48     00 E4 85 F1 | 	sub	objptr, ##1536
06a4c     F2 30 02 F1 | 	add	local10, objptr
06a50     04 30 06 F1 | 	add	local10, #4
06a54     18 29 62 FC | 	wrlong	local06, local10
06a58     03 00 00 FF 
06a5c     00 E4 05 F1 | 	add	objptr, ##1536
06a60     F2 26 02 FB | 	rdlong	local05, objptr
06a64     13 33 02 F6 | 	mov	local11, local05
06a68     01 32 66 F0 | 	shl	local11, #1
06a6c     13 33 02 F1 | 	add	local11, local05
06a70     02 32 66 F0 | 	shl	local11, #2
06a74     03 00 00 FF 
06a78     00 E4 85 F1 | 	sub	objptr, ##1536
06a7c     F2 32 02 F1 | 	add	local11, objptr
06a80     08 32 06 F1 | 	add	local11, #8
06a84     19 2B 62 FC | 	wrlong	local07, local11
06a88     03 00 00 FF 
06a8c     00 E4 05 F1 | 	add	objptr, ##1536
06a90     F2 26 02 FB | 	rdlong	local05, objptr
06a94     01 26 06 F1 | 	add	local05, #1
06a98     F2 26 62 FC | 	wrlong	local05, objptr
06a9c     44 22 06 F6 | 	mov	local03, #68
06aa0     0F 27 02 F6 | 	mov	local05, local01
06aa4     10 29 02 F6 | 	mov	local06, local02
06aa8     11 2B 02 F6 | 	mov	local07, local03
06aac     F2 2C 02 FB | 	rdlong	local08, objptr
06ab0     16 2F 02 F6 | 	mov	local09, local08
06ab4     01 2E 66 F0 | 	shl	local09, #1
06ab8     16 2F 02 F1 | 	add	local09, local08
06abc     02 2E 66 F0 | 	shl	local09, #2
06ac0     03 00 00 FF 
06ac4     00 E4 85 F1 | 	sub	objptr, ##1536
06ac8     F2 2E 02 F1 | 	add	local09, objptr
06acc     17 27 62 FC | 	wrlong	local05, local09
06ad0     03 00 00 FF 
06ad4     00 E4 05 F1 | 	add	objptr, ##1536
06ad8     F2 32 02 FB | 	rdlong	local11, objptr
06adc     19 31 02 F6 | 	mov	local10, local11
06ae0     01 30 66 F0 | 	shl	local10, #1
06ae4     19 31 02 F1 | 	add	local10, local11
06ae8     02 30 66 F0 | 	shl	local10, #2
06aec     03 00 00 FF 
06af0     00 E4 85 F1 | 	sub	objptr, ##1536
06af4     F2 30 02 F1 | 	add	local10, objptr
06af8     04 30 06 F1 | 	add	local10, #4
06afc     18 29 62 FC | 	wrlong	local06, local10
06b00     03 00 00 FF 
06b04     00 E4 05 F1 | 	add	objptr, ##1536
06b08     F2 30 02 FB | 	rdlong	local10, objptr
06b0c     18 33 02 F6 | 	mov	local11, local10
06b10     01 32 66 F0 | 	shl	local11, #1
06b14     18 33 02 F1 | 	add	local11, local10
06b18     02 32 66 F0 | 	shl	local11, #2
06b1c     03 00 00 FF 
06b20     00 E4 85 F1 | 	sub	objptr, ##1536
06b24     F2 32 02 F1 | 	add	local11, objptr
06b28     08 32 06 F1 | 	add	local11, #8
06b2c     19 2B 62 FC | 	wrlong	local07, local11
06b30     03 00 00 FF 
06b34     00 E4 05 F1 | 	add	objptr, ##1536
06b38     F2 26 02 FB | 	rdlong	local05, objptr
06b3c     01 26 06 F1 | 	add	local05, #1
06b40     F2 26 62 FC | 	wrlong	local05, objptr
06b44     69 00 00 FF 
06b48     50 E5 85 F1 | 	sub	objptr, ##54096
06b4c                 | LR__0563
06b4c                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06b4c     56 00 00 FF 
06b50     18 E5 05 F1 | 	add	objptr, ##44312
06b54     F2 24 02 FB | 	rdlong	local04, objptr
06b58     03 24 66 F0 | 	shl	local04, #3
06b5c     02 00 00 FF 
06b60     38 E4 85 F1 | 	sub	objptr, ##1080
06b64     F2 24 02 F1 | 	add	local04, objptr
06b68     04 24 06 F1 | 	add	local04, #4
06b6c     12 2D 02 FB | 	rdlong	local08, local04
06b70     FE 2D 0E F2 | 	cmp	local08, #510 wz
06b74     54 00 00 FF 
06b78     E0 E4 85 F1 | 	sub	objptr, ##43232
06b7c     B8 00 90 5D |  if_ne	jmp	#LR__0564
06b80     44 22 06 F6 | 	mov	local03, #68
06b84     0F 27 02 F6 | 	mov	local05, local01
06b88     10 29 02 F6 | 	mov	local06, local02
06b8c     11 2B 02 F6 | 	mov	local07, local03
06b90     69 00 00 FF 
06b94     50 E5 05 F1 | 	add	objptr, ##54096
06b98     F2 2C 02 FB | 	rdlong	local08, objptr
06b9c     16 2F 02 F6 | 	mov	local09, local08
06ba0     01 2E 66 F0 | 	shl	local09, #1
06ba4     16 2F 02 F1 | 	add	local09, local08
06ba8     02 2E 66 F0 | 	shl	local09, #2
06bac     03 00 00 FF 
06bb0     00 E4 85 F1 | 	sub	objptr, ##1536
06bb4     F2 2E 02 F1 | 	add	local09, objptr
06bb8     17 27 62 FC | 	wrlong	local05, local09
06bbc     03 00 00 FF 
06bc0     00 E4 05 F1 | 	add	objptr, ##1536
06bc4     F2 32 02 FB | 	rdlong	local11, objptr
06bc8     19 31 02 F6 | 	mov	local10, local11
06bcc     01 30 66 F0 | 	shl	local10, #1
06bd0     19 31 02 F1 | 	add	local10, local11
06bd4     02 30 66 F0 | 	shl	local10, #2
06bd8     03 00 00 FF 
06bdc     00 E4 85 F1 | 	sub	objptr, ##1536
06be0     F2 30 02 F1 | 	add	local10, objptr
06be4     04 30 06 F1 | 	add	local10, #4
06be8     18 29 62 FC | 	wrlong	local06, local10
06bec     03 00 00 FF 
06bf0     00 E4 05 F1 | 	add	objptr, ##1536
06bf4     F2 30 02 FB | 	rdlong	local10, objptr
06bf8     18 33 02 F6 | 	mov	local11, local10
06bfc     01 32 66 F0 | 	shl	local11, #1
06c00     18 33 02 F1 | 	add	local11, local10
06c04     02 32 66 F0 | 	shl	local11, #2
06c08     03 00 00 FF 
06c0c     00 E4 85 F1 | 	sub	objptr, ##1536
06c10     F2 32 02 F1 | 	add	local11, objptr
06c14     08 32 06 F1 | 	add	local11, #8
06c18     19 2B 62 FC | 	wrlong	local07, local11
06c1c     03 00 00 FF 
06c20     00 E4 05 F1 | 	add	objptr, ##1536
06c24     F2 26 02 FB | 	rdlong	local05, objptr
06c28     01 26 06 F1 | 	add	local05, #1
06c2c     F2 26 62 FC | 	wrlong	local05, objptr
06c30     69 00 00 FF 
06c34     50 E5 85 F1 | 	sub	objptr, ##54096
06c38                 | LR__0564
06c38                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
06c38     56 00 00 FF 
06c3c     18 E5 05 F1 | 	add	objptr, ##44312
06c40     F2 24 02 FB | 	rdlong	local04, objptr
06c44     03 24 66 F0 | 	shl	local04, #3
06c48     02 00 00 FF 
06c4c     38 E4 85 F1 | 	sub	objptr, ##1080
06c50     F2 24 02 F1 | 	add	local04, objptr
06c54     04 24 06 F1 | 	add	local04, #4
06c58     12 2D 02 FB | 	rdlong	local08, local04
06c5c     11 2C 0E F2 | 	cmp	local08, #17 wz
06c60     54 00 00 FF 
06c64     E0 E4 85 F1 | 	sub	objptr, ##43232
06c68     6C 00 90 AD |  if_e	jmp	#LR__0565
06c6c     56 00 00 FF 
06c70     18 E5 05 F1 | 	add	objptr, ##44312
06c74     F2 2C 02 FB | 	rdlong	local08, objptr
06c78     03 2C 66 F0 | 	shl	local08, #3
06c7c     02 00 00 FF 
06c80     38 E4 85 F1 | 	sub	objptr, ##1080
06c84     F2 2C 02 F1 | 	add	local08, objptr
06c88     04 2C 06 F1 | 	add	local08, #4
06c8c     16 2D 02 FB | 	rdlong	local08, local08
06c90     12 2C 0E F2 | 	cmp	local08, #18 wz
06c94     54 00 00 FF 
06c98     E0 E4 85 F1 | 	sub	objptr, ##43232
06c9c     38 00 90 AD |  if_e	jmp	#LR__0565
06ca0     56 00 00 FF 
06ca4     18 E5 05 F1 | 	add	objptr, ##44312
06ca8     F2 32 02 FB | 	rdlong	local11, objptr
06cac     03 32 66 F0 | 	shl	local11, #3
06cb0     02 00 00 FF 
06cb4     38 E4 85 F1 | 	sub	objptr, ##1080
06cb8     F2 32 02 F1 | 	add	local11, objptr
06cbc     04 32 06 F1 | 	add	local11, #4
06cc0     19 33 02 FB | 	rdlong	local11, local11
06cc4     FE 33 0E F2 | 	cmp	local11, #510 wz
06cc8     54 00 00 FF 
06ccc     E0 E4 85 F1 | 	sub	objptr, ##43232
06cd0     16 FA 05 56 |  if_ne	mov	result1, #22
06cd4     68 00 90 5D |  if_ne	jmp	#LR__0567
06cd8                 | LR__0565
06cd8     56 00 00 FF 
06cdc     18 E5 05 F1 | 	add	objptr, ##44312
06ce0     F2 24 02 FB | 	rdlong	local04, objptr
06ce4     01 24 06 F1 | 	add	local04, #1
06ce8     F2 24 62 FC | 	wrlong	local04, objptr
06cec     03 24 66 F0 | 	shl	local04, #3
06cf0     02 00 00 FF 
06cf4     38 E4 85 F1 | 	sub	objptr, ##1080
06cf8     F2 24 02 F1 | 	add	local04, objptr
06cfc     04 24 06 F1 | 	add	local04, #4
06d00     12 2D 02 FB | 	rdlong	local08, local04
06d04     FE 2D 0E F2 | 	cmp	local08, #510 wz
06d08     54 00 00 FF 
06d0c     E0 E4 85 F1 | 	sub	objptr, ##43232
06d10     28 00 90 AD |  if_e	jmp	#LR__0566
06d14     56 00 00 FF 
06d18     18 E5 05 F1 | 	add	objptr, ##44312
06d1c     F2 32 02 FB | 	rdlong	local11, objptr
06d20     0E 00 00 FF 
06d24     1C E4 05 F1 | 	add	objptr, ##7196
06d28     F2 30 02 FB | 	rdlong	local10, objptr
06d2c     64 00 00 FF 
06d30     34 E5 85 F1 | 	sub	objptr, ##51508
06d34     18 33 52 F2 | 	cmps	local11, local10 wc
06d38     E4 FA 9F CD |  if_b	jmp	#LR__0561
06d3c                 | LR__0566
06d3c                 | ' return 0
06d3c     00 FA 05 F6 | 	mov	result1, #0
06d40                 | LR__0567
06d40     A7 F0 03 F6 | 	mov	ptra, fp
06d44     B2 00 A0 FD | 	call	#popregs_
06d48                 | _compile_print_ret
06d48     2D 00 64 FD | 	ret
06d4c                 | 
06d4c                 | ' 
06d4c                 | ' function compile_if() as ulong  
06d4c                 | _compile_if
06d4c     05 4A 05 F6 | 	mov	COUNT_, #5
06d50     A8 00 A0 FD | 	call	#pushregs_
06d54                 | _compile_if_enter
06d54     DC 16 B0 FD | 	call	#_expr
06d58                 | ' expr()
06d58                 | ' return 0
06d58     56 00 00 FF 
06d5c     18 E5 05 F1 | 	add	objptr, ##44312
06d60     F2 FA 01 FB | 	rdlong	result1, objptr
06d64     01 FA 05 F1 | 	add	result1, #1
06d68     F2 FA 61 FC | 	wrlong	result1, objptr
06d6c     58 22 06 F6 | 	mov	local03, #88
06d70     0F 25 02 F6 | 	mov	local04, local01
06d74     10 27 02 F6 | 	mov	local05, local02
06d78     11 1F 02 F6 | 	mov	local01, local03
06d7c     13 00 00 FF 
06d80     38 E4 05 F1 | 	add	objptr, ##9784
06d84     F2 12 02 FB | 	rdlong	arg01, objptr
06d88     09 FB 01 F6 | 	mov	result1, arg01
06d8c     01 FA 65 F0 | 	shl	result1, #1
06d90     09 FB 01 F1 | 	add	result1, arg01
06d94     02 FA 65 F0 | 	shl	result1, #2
06d98     03 00 00 FF 
06d9c     00 E4 85 F1 | 	sub	objptr, ##1536
06da0     F2 FA 01 F1 | 	add	result1, objptr
06da4     FD 24 62 FC | 	wrlong	local04, result1
06da8     03 00 00 FF 
06dac     00 E4 05 F1 | 	add	objptr, ##1536
06db0     F2 12 02 FB | 	rdlong	arg01, objptr
06db4     09 25 02 F6 | 	mov	local04, arg01
06db8     01 24 66 F0 | 	shl	local04, #1
06dbc     09 25 02 F1 | 	add	local04, arg01
06dc0     02 24 66 F0 | 	shl	local04, #2
06dc4     03 00 00 FF 
06dc8     00 E4 85 F1 | 	sub	objptr, ##1536
06dcc     F2 24 02 F1 | 	add	local04, objptr
06dd0     04 24 06 F1 | 	add	local04, #4
06dd4     12 27 62 FC | 	wrlong	local05, local04
06dd8     03 00 00 FF 
06ddc     00 E4 05 F1 | 	add	objptr, ##1536
06de0     F2 24 02 FB | 	rdlong	local04, objptr
06de4     12 27 02 F6 | 	mov	local05, local04
06de8     01 26 66 F0 | 	shl	local05, #1
06dec     12 27 02 F1 | 	add	local05, local04
06df0     02 26 66 F0 | 	shl	local05, #2
06df4     03 00 00 FF 
06df8     00 E4 85 F1 | 	sub	objptr, ##1536
06dfc     F2 26 02 F1 | 	add	local05, objptr
06e00     08 26 06 F1 | 	add	local05, #8
06e04     13 1F 62 FC | 	wrlong	local01, local05
06e08     03 00 00 FF 
06e0c     00 E4 05 F1 | 	add	objptr, ##1536
06e10     F2 24 02 FB | 	rdlong	local04, objptr
06e14     01 24 06 F1 | 	add	local04, #1
06e18     F2 24 62 FC | 	wrlong	local04, objptr
06e1c                 | ' 
06e1c                 | ' 'print "In compile_if"
06e1c                 | ' compile_fun_1p()
06e1c                 | ' cmd=lparts(ct).token : ct+=1
06e1c                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
06e1c                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
06e1c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06e1c     13 00 00 FF 
06e20     38 E4 85 F1 | 	sub	objptr, ##9784
06e24     F2 26 02 FB | 	rdlong	local05, objptr
06e28     01 26 06 F1 | 	add	local05, #1
06e2c     03 26 66 F0 | 	shl	local05, #3
06e30     02 00 00 FF 
06e34     38 E4 85 F1 | 	sub	objptr, ##1080
06e38     F2 26 02 F1 | 	add	local05, objptr
06e3c     13 13 02 FB | 	rdlong	arg01, local05
06e40     54 00 00 FF 
06e44     E0 E4 85 F1 | 	sub	objptr, ##43232
06e48                 | ' 
06e48                 | ' select case s
06e48     42 01 00 FF 
06e4c     BD 14 06 F6 | 	mov	arg02, ##@LR__4384
06e50     AC 1F B1 FD | 	call	#__system___string_cmp
06e54     00 FA 0D F2 | 	cmp	result1, #0 wz
06e58     1B FA 05 A6 |  if_e	mov	result1, #27
06e5c     00 FA 05 56 |  if_ne	mov	result1, #0
06e60     00 FA 0D F2 | 	cmp	result1, #0 wz
06e64     0C 00 90 AD |  if_e	jmp	#LR__0570
06e68     05 12 06 F6 | 	mov	arg01, #5
06e6c     88 ED BF FD | 	call	#_compile_immediate_assign
06e70     08 00 90 FD | 	jmp	#LR__0571
06e74                 | LR__0570
06e74     05 12 06 F6 | 	mov	arg01, #5
06e78     70 E5 BF FD | 	call	#_compile_immediate
06e7c                 | LR__0571
06e7c                 | ' 
06e7c                 | ' 
06e7c                 | ' return 0
06e7c     00 FA 05 F6 | 	mov	result1, #0
06e80     A7 F0 03 F6 | 	mov	ptra, fp
06e84     B2 00 A0 FD | 	call	#popregs_
06e88                 | _compile_if_ret
06e88     2D 00 64 FD | 	ret
06e8c                 | 
06e8c                 | ' 
06e8c                 | ' function compile_else() as ulong  
06e8c                 | _compile_else
06e8c     05 4A 05 F6 | 	mov	COUNT_, #5
06e90     A8 00 A0 FD | 	call	#pushregs_
06e94                 | _compile_else_enter
06e94     5A 22 06 F6 | 	mov	local03, #90
06e98     0F 25 02 F6 | 	mov	local04, local01
06e9c     10 27 02 F6 | 	mov	local05, local02
06ea0     11 1F 02 F6 | 	mov	local01, local03
06ea4     69 00 00 FF 
06ea8     50 E5 05 F1 | 	add	objptr, ##54096
06eac     F2 12 02 FB | 	rdlong	arg01, objptr
06eb0     09 FB 01 F6 | 	mov	result1, arg01
06eb4     01 FA 65 F0 | 	shl	result1, #1
06eb8     09 FB 01 F1 | 	add	result1, arg01
06ebc     02 FA 65 F0 | 	shl	result1, #2
06ec0     03 00 00 FF 
06ec4     00 E4 85 F1 | 	sub	objptr, ##1536
06ec8     F2 FA 01 F1 | 	add	result1, objptr
06ecc     FD 24 62 FC | 	wrlong	local04, result1
06ed0     03 00 00 FF 
06ed4     00 E4 05 F1 | 	add	objptr, ##1536
06ed8     F2 FA 01 FB | 	rdlong	result1, objptr
06edc     FD 24 02 F6 | 	mov	local04, result1
06ee0     01 24 66 F0 | 	shl	local04, #1
06ee4     FD 24 02 F1 | 	add	local04, result1
06ee8     02 24 66 F0 | 	shl	local04, #2
06eec     03 00 00 FF 
06ef0     00 E4 85 F1 | 	sub	objptr, ##1536
06ef4     F2 24 02 F1 | 	add	local04, objptr
06ef8     04 24 06 F1 | 	add	local04, #4
06efc     12 27 62 FC | 	wrlong	local05, local04
06f00     03 00 00 FF 
06f04     00 E4 05 F1 | 	add	objptr, ##1536
06f08     F2 24 02 FB | 	rdlong	local04, objptr
06f0c     12 27 02 F6 | 	mov	local05, local04
06f10     01 26 66 F0 | 	shl	local05, #1
06f14     12 27 02 F1 | 	add	local05, local04
06f18     02 26 66 F0 | 	shl	local05, #2
06f1c     03 00 00 FF 
06f20     00 E4 85 F1 | 	sub	objptr, ##1536
06f24     F2 26 02 F1 | 	add	local05, objptr
06f28     08 26 06 F1 | 	add	local05, #8
06f2c     13 1F 62 FC | 	wrlong	local01, local05
06f30     03 00 00 FF 
06f34     00 E4 05 F1 | 	add	objptr, ##1536
06f38     F2 24 02 FB | 	rdlong	local04, objptr
06f3c     01 24 06 F1 | 	add	local04, #1
06f40     F2 24 62 FC | 	wrlong	local04, objptr
06f44                 | ' 
06f44                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
06f44                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06f44     13 00 00 FF 
06f48     38 E4 85 F1 | 	sub	objptr, ##9784
06f4c     F2 26 02 FB | 	rdlong	local05, objptr
06f50     01 26 06 F1 | 	add	local05, #1
06f54     03 26 66 F0 | 	shl	local05, #3
06f58     02 00 00 FF 
06f5c     38 E4 85 F1 | 	sub	objptr, ##1080
06f60     F2 26 02 F1 | 	add	local05, objptr
06f64     13 13 02 FB | 	rdlong	arg01, local05
06f68     54 00 00 FF 
06f6c     E0 E4 85 F1 | 	sub	objptr, ##43232
06f70                 | ' 
06f70                 | ' select case s
06f70     42 01 00 FF 
06f74     BD 14 06 F6 | 	mov	arg02, ##@LR__4384
06f78     84 1E B1 FD | 	call	#__system___string_cmp
06f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
06f80     1B FA 05 A6 |  if_e	mov	result1, #27
06f84     00 FA 05 56 |  if_ne	mov	result1, #0
06f88     00 FA 0D F2 | 	cmp	result1, #0 wz
06f8c     0C 00 90 AD |  if_e	jmp	#LR__0580
06f90     05 12 06 F6 | 	mov	arg01, #5
06f94     60 EC BF FD | 	call	#_compile_immediate_assign
06f98     08 00 90 FD | 	jmp	#LR__0581
06f9c                 | LR__0580
06f9c     05 12 06 F6 | 	mov	arg01, #5
06fa0     48 E4 BF FD | 	call	#_compile_immediate
06fa4                 | LR__0581
06fa4                 | ' 
06fa4                 | ' 
06fa4                 | ' return 0
06fa4     00 FA 05 F6 | 	mov	result1, #0
06fa8     A7 F0 03 F6 | 	mov	ptra, fp
06fac     B2 00 A0 FD | 	call	#popregs_
06fb0                 | _compile_else_ret
06fb0     2D 00 64 FD | 	ret
06fb4                 | 
06fb4                 | ' 
06fb4                 | ' 
06fb4                 | ' function compile_dim() as ulong  
06fb4                 | _compile_dim
06fb4     11 4A 05 F6 | 	mov	COUNT_, #17
06fb8     A8 00 A0 FD | 	call	#pushregs_
06fbc     01 1E 06 F6 | 	mov	local01, #1
06fc0     01 20 06 F6 | 	mov	local02, #1
06fc4     01 22 06 F6 | 	mov	local03, #1
06fc8                 | ' 
06fc8                 | ' dims(0)=1: dims(1)=1: dims(2)=1
06fc8                 | ' 
06fc8                 | ' if isname(lparts(ct).part$) then 
06fc8     56 00 00 FF 
06fcc     18 E5 05 F1 | 	add	objptr, ##44312
06fd0     F2 18 02 FB | 	rdlong	arg04, objptr
06fd4     03 18 66 F0 | 	shl	arg04, #3
06fd8     02 00 00 FF 
06fdc     38 E4 85 F1 | 	sub	objptr, ##1080
06fe0     F2 18 02 F1 | 	add	arg04, objptr
06fe4     0C 13 02 FB | 	rdlong	arg01, arg04
06fe8     54 00 00 FF 
06fec     E0 E4 85 F1 | 	sub	objptr, ##43232
06ff0     DC D3 BF FD | 	call	#_isname
06ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ff8     AC 05 90 AD |  if_e	jmp	#LR__0614
06ffc     56 00 00 FF 
07000     18 E5 05 F1 | 	add	objptr, ##44312
07004     F2 24 02 FB | 	rdlong	local04, objptr
07008     03 24 66 F0 | 	shl	local04, #3
0700c     02 00 00 FF 
07010     38 E4 85 F1 | 	sub	objptr, ##1080
07014     F2 24 02 F1 | 	add	local04, objptr
07018     12 27 02 FB | 	rdlong	local05, local04
0701c     01 28 66 F6 | 	neg	local06, #1
07020                 | '   varname2$=lparts(ct).part$ 
07020                 | '   j=-1
07020                 | '   if varnum>0 then
07020     04 E4 85 F1 | 	sub	objptr, #4
07024     F2 2A 02 FB | 	rdlong	local07, objptr
07028     54 00 00 FF 
0702c     DC E4 85 F1 | 	sub	objptr, ##43228
07030     01 2A 56 F2 | 	cmps	local07, #1 wc
07034     58 00 90 CD |  if_b	jmp	#LR__0592
07038                 | '  '   print "in dim, varnum=";varnum
07038                 | '     for i=0 to varnum-1
07038     00 2C 06 F6 | 	mov	local08, #0
0703c     54 00 00 FF 
07040     DC E4 05 F1 | 	add	objptr, ##43228
07044     F2 2E 02 FB | 	rdlong	local09, objptr
07048     54 00 00 FF 
0704c     DC E4 85 F1 | 	sub	objptr, ##43228
07050                 | LR__0590
07050     17 2D 52 F2 | 	cmps	local08, local09 wc
07054     38 00 90 3D |  if_ae	jmp	#LR__0591
07058                 | '       if variables(i).name=varname2$ then j=i : exit
07058     16 25 02 F6 | 	mov	local04, local08
0705c     04 24 66 F0 | 	shl	local04, #4
07060     34 00 00 FF 
07064     DC E4 05 F1 | 	add	objptr, ##26844
07068     F2 24 02 F1 | 	add	local04, objptr
0706c     12 13 02 FB | 	rdlong	arg01, local04
07070     13 15 02 F6 | 	mov	arg02, local05
07074     34 00 00 FF 
07078     DC E4 85 F1 | 	sub	objptr, ##26844
0707c     80 1D B1 FD | 	call	#__system___string_cmp
07080     00 FA 0D F2 | 	cmp	result1, #0 wz
07084     16 29 02 A6 |  if_e	mov	local06, local08
07088     01 2C 06 51 |  if_ne	add	local08, #1
0708c     C0 FF 9F 5D |  if_ne	jmp	#LR__0590
07090                 | LR__0591
07090                 | LR__0592
07090                 | ' '  if j<>-1 then printerror (42) : return 42
07090                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
07090     FF FF 7F FF 
07094     FF 29 0E F2 | 	cmp	local06, ##-1 wz
07098     54 00 00 AF 
0709c     DC E4 05 A1 |  if_e	add	objptr, ##43228
070a0     F2 28 02 AB |  if_e	rdlong	local06, objptr
070a4     54 00 00 AF 
070a8     DC E4 85 A1 |  if_e	sub	objptr, ##43228
070ac     78 00 90 AD |  if_e	jmp	#LR__0593
070b0     00 12 06 F6 | 	mov	arg01, #0
070b4     24 76 B1 FD | 	call	#__system___getiolock_0423
070b8     FD 12 02 F6 | 	mov	arg01, result1
070bc     18 1D B1 FD | 	call	#__system___lockmem
070c0     43 01 00 FF 
070c4     25 15 06 F6 | 	mov	arg02, ##@LR__4532
070c8     00 12 06 F6 | 	mov	arg01, #0
070cc     00 16 06 F6 | 	mov	arg03, #0
070d0     F8 29 B1 FD | 	call	#__system___basic_print_string
070d4     7A 00 00 FF 
070d8     64 E5 05 F1 | 	add	objptr, ##62820
070dc     F2 14 02 FB | 	rdlong	arg02, objptr
070e0     7A 00 00 FF 
070e4     64 E5 85 F1 | 	sub	objptr, ##62820
070e8     00 12 06 F6 | 	mov	arg01, #0
070ec     00 16 06 F6 | 	mov	arg03, #0
070f0     0A 18 06 F6 | 	mov	arg04, #10
070f4     58 2A B1 FD | 	call	#__system___basic_print_unsigned
070f8     43 01 00 FF 
070fc     33 15 06 F6 | 	mov	arg02, ##@LR__4533
07100     00 12 06 F6 | 	mov	arg01, #0
07104     00 16 06 F6 | 	mov	arg03, #0
07108     C0 29 B1 FD | 	call	#__system___basic_print_string
0710c     00 12 06 F6 | 	mov	arg01, #0
07110     0A 14 06 F6 | 	mov	arg02, #10
07114     00 16 06 F6 | 	mov	arg03, #0
07118     58 29 B1 FD | 	call	#__system___basic_print_char
0711c     00 12 06 F6 | 	mov	arg01, #0
07120     B8 75 B1 FD | 	call	#__system___getiolock_0423
07124     FD 00 68 FC | 	wrlong	#0, result1
07128                 | LR__0593
07128                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
07128     56 00 00 FF 
0712c     18 E5 05 F1 | 	add	objptr, ##44312
07130     F2 18 02 FB | 	rdlong	arg04, objptr
07134     01 18 06 F1 | 	add	arg04, #1
07138     03 18 66 F0 | 	shl	arg04, #3
0713c     02 00 00 FF 
07140     38 E4 85 F1 | 	sub	objptr, ##1080
07144     F2 18 02 F1 | 	add	arg04, objptr
07148     0C 13 02 FB | 	rdlong	arg01, arg04
0714c     43 01 00 FF 
07150     54 15 06 F6 | 	mov	arg02, ##@LR__4534
07154     54 00 00 FF 
07158     E0 E4 85 F1 | 	sub	objptr, ##43232
0715c     A0 1C B1 FD | 	call	#__system___string_cmp
07160     00 FA 0D F2 | 	cmp	result1, #0 wz
07164     50 00 90 AD |  if_e	jmp	#LR__0594
07168     56 00 00 FF 
0716c     18 E5 05 F1 | 	add	objptr, ##44312
07170     F2 2E 02 FB | 	rdlong	local09, objptr
07174     01 2E 06 F1 | 	add	local09, #1
07178     03 2E 66 F0 | 	shl	local09, #3
0717c     02 00 00 FF 
07180     38 E4 85 F1 | 	sub	objptr, ##1080
07184     F2 2E 02 F1 | 	add	local09, objptr
07188     17 13 02 FB | 	rdlong	arg01, local09
0718c     43 01 00 FF 
07190     56 15 06 F6 | 	mov	arg02, ##@LR__4535
07194     54 00 00 FF 
07198     E0 E4 85 F1 | 	sub	objptr, ##43232
0719c     60 1C B1 FD | 	call	#__system___string_cmp
071a0     00 FA 0D F2 | 	cmp	result1, #0 wz
071a4     10 00 90 AD |  if_e	jmp	#LR__0594
071a8     2B 12 06 F6 | 	mov	arg01, #43
071ac     A4 E6 B0 FD | 	call	#_printerror
071b0     2B FA 05 F6 | 	mov	result1, #43
071b4     38 05 90 FD | 	jmp	#LR__0616
071b8                 | LR__0594
071b8                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
071b8     56 00 00 FF 
071bc     18 E5 05 F1 | 	add	objptr, ##44312
071c0     F2 14 02 FB | 	rdlong	arg02, objptr
071c4     01 14 06 F1 | 	add	arg02, #1
071c8     03 14 66 F0 | 	shl	arg02, #3
071cc     02 00 00 FF 
071d0     38 E4 85 F1 | 	sub	objptr, ##1080
071d4     F2 14 02 F1 | 	add	arg02, objptr
071d8     0A 13 02 FB | 	rdlong	arg01, arg02
071dc     43 01 00 FF 
071e0     59 15 06 F6 | 	mov	arg02, ##@LR__4536
071e4     54 00 00 FF 
071e8     E0 E4 85 F1 | 	sub	objptr, ##43232
071ec     10 1C B1 FD | 	call	#__system___string_cmp
071f0     00 FA 0D F2 | 	cmp	result1, #0 wz
071f4     56 00 00 AF 
071f8     18 E5 05 A1 |  if_e	add	objptr, ##44312
071fc     F2 30 02 AB |  if_e	rdlong	local10, objptr
07200     56 00 00 AF 
07204     18 E5 85 A1 |  if_e	sub	objptr, ##44312
07208     01 30 06 A1 |  if_e	add	local10, #1
0720c     7C 01 90 AD |  if_e	jmp	#LR__0600
07210     56 00 00 FF 
07214     18 E5 05 F1 | 	add	objptr, ##44312
07218     F2 30 02 FB | 	rdlong	local10, objptr
0721c     56 00 00 FF 
07220     18 E5 85 F1 | 	sub	objptr, ##44312
07224     02 30 06 F1 | 	add	local10, #2
07228     00 32 06 F6 | 	mov	local11, #0
0722c                 | '   l=ct+2 : m=0 : do
0722c                 | LR__0595
0722c                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
0722c                 | '     if isdec(lparts(l).part$) then 
0722c     18 25 02 F6 | 	mov	local04, local10
07230     03 24 66 F0 | 	shl	local04, #3
07234     54 00 00 FF 
07238     E0 E4 05 F1 | 	add	objptr, ##43232
0723c     F2 24 02 F1 | 	add	local04, objptr
07240     12 13 02 FB | 	rdlong	arg01, local04
07244     54 00 00 FF 
07248     E0 E4 85 F1 | 	sub	objptr, ##43232
0724c     24 D8 BF FD | 	call	#_isdec
07250     00 FA 0D F2 | 	cmp	result1, #0 wz
07254     44 00 90 AD |  if_e	jmp	#LR__0596
07258     19 35 02 F6 | 	mov	local12, local11
0725c     0F 35 06 F1 | 	add	local12, #local01
07260     18 2F 02 F6 | 	mov	local09, local10
07264     03 2E 66 F0 | 	shl	local09, #3
07268     54 00 00 FF 
0726c     E0 E4 05 F1 | 	add	objptr, ##43232
07270     F2 2E 02 F1 | 	add	local09, objptr
07274     17 13 02 FB | 	rdlong	arg01, local09
07278     00 14 06 F6 | 	mov	arg02, #0
0727c     54 00 00 FF 
07280     E0 E4 85 F1 | 	sub	objptr, ##43232
07284     B4 4C B1 FD | 	call	#__system____builtin_atoi
07288     FD 36 02 F6 | 	mov	local13, result1
0728c                 | 	'.live	local13
0728c                 | 	'.live	local12
0728c     00 34 8E F9 | 	altd	local12, #0
07290     1B 35 02 F6 | 	mov	local12, local13
07294     01 32 06 F1 | 	add	local11, #1
07298     10 00 90 FD | 	jmp	#LR__0597
0729c                 | LR__0596
0729c     11 12 06 F6 | 	mov	arg01, #17
072a0     B0 E5 B0 FD | 	call	#_printerror
072a4                 | '       printerror (17)  : return(17)
072a4     11 FA 05 F6 | 	mov	result1, #17
072a8     44 04 90 FD | 	jmp	#LR__0616
072ac                 | LR__0597
072ac                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
072ac     18 25 02 F6 | 	mov	local04, local10
072b0     01 24 06 F1 | 	add	local04, #1
072b4     03 24 66 F0 | 	shl	local04, #3
072b8     54 00 00 FF 
072bc     E0 E4 05 F1 | 	add	objptr, ##43232
072c0     F2 24 02 F1 | 	add	local04, objptr
072c4     12 13 02 FB | 	rdlong	arg01, local04
072c8     43 01 00 FF 
072cc     5C 15 06 F6 | 	mov	arg02, ##@LR__4537
072d0     54 00 00 FF 
072d4     E0 E4 85 F1 | 	sub	objptr, ##43232
072d8     24 1B B1 FD | 	call	#__system___string_cmp
072dc     00 FA 0D F2 | 	cmp	result1, #0 wz
072e0     48 00 90 AD |  if_e	jmp	#LR__0598
072e4     18 37 02 F6 | 	mov	local13, local10
072e8     01 36 06 F1 | 	add	local13, #1
072ec     03 36 66 F0 | 	shl	local13, #3
072f0     54 00 00 FF 
072f4     E0 E4 05 F1 | 	add	objptr, ##43232
072f8     F2 36 02 F1 | 	add	local13, objptr
072fc     1B 13 02 FB | 	rdlong	arg01, local13
07300     43 01 00 FF 
07304     5E 15 06 F6 | 	mov	arg02, ##@LR__4538
07308     54 00 00 FF 
0730c     E0 E4 85 F1 | 	sub	objptr, ##43232
07310     EC 1A B1 FD | 	call	#__system___string_cmp
07314     00 FA 0D F2 | 	cmp	result1, #0 wz
07318     10 00 90 AD |  if_e	jmp	#LR__0598
0731c     2C 12 06 F6 | 	mov	arg01, #44
07320     30 E5 B0 FD | 	call	#_printerror
07324     2C FA 05 F6 | 	mov	result1, #44
07328     C4 03 90 FD | 	jmp	#LR__0616
0732c                 | LR__0598
0732c     02 30 06 F1 | 	add	local10, #2
07330     18 25 02 F6 | 	mov	local04, local10
07334     01 24 86 F1 | 	sub	local04, #1
07338     03 24 66 F0 | 	shl	local04, #3
0733c     54 00 00 FF 
07340     E0 E4 05 F1 | 	add	objptr, ##43232
07344     F2 24 02 F1 | 	add	local04, objptr
07348     12 13 02 FB | 	rdlong	arg01, local04
0734c     43 01 00 FF 
07350     60 15 06 F6 | 	mov	arg02, ##@LR__4539
07354     54 00 00 FF 
07358     E0 E4 85 F1 | 	sub	objptr, ##43232
0735c     A0 1A B1 FD | 	call	#__system___string_cmp
07360     00 FA 0D F2 | 	cmp	result1, #0 wz
07364     03 32 56 52 |  if_ne	cmps	local11, #3 wc
07368     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0595
0736c                 | '   if m>3 then printerror(45): return(45)
0736c     04 32 56 F2 | 	cmps	local11, #4 wc
07370     10 00 90 CD |  if_b	jmp	#LR__0599
07374     2D 12 06 F6 | 	mov	arg01, #45
07378     D8 E4 B0 FD | 	call	#_printerror
0737c     2D FA 05 F6 | 	mov	result1, #45
07380     6C 03 90 FD | 	jmp	#LR__0616
07384                 | LR__0599
07384     00 39 06 F6 | 	mov	local14, #256
07388     0C 3A 06 F6 | 	mov	local15, #12
0738c                 | LR__0600
0738c                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
0738c                 | '   arraytype=array_no_type : esize=12
0738c                 | ' 1350 
0738c                 | '   if lparts(l).part$="as" then
0738c     18 25 02 F6 | 	mov	local04, local10
07390     03 24 66 F0 | 	shl	local04, #3
07394     54 00 00 FF 
07398     E0 E4 05 F1 | 	add	objptr, ##43232
0739c     F2 24 02 F1 | 	add	local04, objptr
073a0     12 13 02 FB | 	rdlong	arg01, local04
073a4     43 01 00 FF 
073a8     62 15 06 F6 | 	mov	arg02, ##@LR__4540
073ac     54 00 00 FF 
073b0     E0 E4 85 F1 | 	sub	objptr, ##43232
073b4     48 1A B1 FD | 	call	#__system___string_cmp
073b8     00 FA 0D F2 | 	cmp	result1, #0 wz
073bc     F8 01 90 5D |  if_ne	jmp	#LR__0615
073c0                 | '     select case lparts(l+1).part$
073c0     18 35 02 F6 | 	mov	local12, local10
073c4     01 34 06 F1 | 	add	local12, #1
073c8     03 34 66 F0 | 	shl	local12, #3
073cc     54 00 00 FF 
073d0     E0 E4 05 F1 | 	add	objptr, ##43232
073d4     F2 34 02 F1 | 	add	local12, objptr
073d8     1A 3D 02 FB | 	rdlong	local16, local12
073dc     43 01 00 FF 
073e0     65 15 06 F6 | 	mov	arg02, ##@LR__4541
073e4     1E 13 02 F6 | 	mov	arg01, local16
073e8     54 00 00 FF 
073ec     E0 E4 85 F1 | 	sub	objptr, ##43232
073f0     0C 1A B1 FD | 	call	#__system___string_cmp
073f4     00 FA 0D F2 | 	cmp	result1, #0 wz
073f8     0C 01 90 AD |  if_e	jmp	#LR__0601
073fc     43 01 00 FF 
07400     6A 15 06 F6 | 	mov	arg02, ##@LR__4542
07404     1E 13 02 F6 | 	mov	arg01, local16
07408     F4 19 B1 FD | 	call	#__system___string_cmp
0740c     00 FA 0D F2 | 	cmp	result1, #0 wz
07410     00 01 90 AD |  if_e	jmp	#LR__0602
07414     43 01 00 FF 
07418     70 15 06 F6 | 	mov	arg02, ##@LR__4543
0741c     1E 13 02 F6 | 	mov	arg01, local16
07420     DC 19 B1 FD | 	call	#__system___string_cmp
07424     00 FA 0D F2 | 	cmp	result1, #0 wz
07428     F4 00 90 AD |  if_e	jmp	#LR__0603
0742c     43 01 00 FF 
07430     76 15 06 F6 | 	mov	arg02, ##@LR__4544
07434     1E 13 02 F6 | 	mov	arg01, local16
07438     C4 19 B1 FD | 	call	#__system___string_cmp
0743c     00 FA 0D F2 | 	cmp	result1, #0 wz
07440     E8 00 90 AD |  if_e	jmp	#LR__0604
07444     43 01 00 FF 
07448     7D 15 06 F6 | 	mov	arg02, ##@LR__4545
0744c     1E 13 02 F6 | 	mov	arg01, local16
07450     AC 19 B1 FD | 	call	#__system___string_cmp
07454     00 FA 0D F2 | 	cmp	result1, #0 wz
07458     DC 00 90 AD |  if_e	jmp	#LR__0605
0745c     43 01 00 FF 
07460     82 15 06 F6 | 	mov	arg02, ##@LR__4546
07464     1E 13 02 F6 | 	mov	arg01, local16
07468     94 19 B1 FD | 	call	#__system___string_cmp
0746c     00 FA 0D F2 | 	cmp	result1, #0 wz
07470     D0 00 90 AD |  if_e	jmp	#LR__0606
07474     43 01 00 FF 
07478     8A 15 06 F6 | 	mov	arg02, ##@LR__4547
0747c     1E 13 02 F6 | 	mov	arg01, local16
07480     7C 19 B1 FD | 	call	#__system___string_cmp
07484     00 FA 0D F2 | 	cmp	result1, #0 wz
07488     C4 00 90 AD |  if_e	jmp	#LR__0607
0748c     43 01 00 FF 
07490     90 15 06 F6 | 	mov	arg02, ##@LR__4548
07494     1E 13 02 F6 | 	mov	arg01, local16
07498     64 19 B1 FD | 	call	#__system___string_cmp
0749c     00 FA 0D F2 | 	cmp	result1, #0 wz
074a0     B8 00 90 AD |  if_e	jmp	#LR__0608
074a4     43 01 00 FF 
074a8     96 15 06 F6 | 	mov	arg02, ##@LR__4549
074ac     1E 13 02 F6 | 	mov	arg01, local16
074b0     4C 19 B1 FD | 	call	#__system___string_cmp
074b4     00 FA 0D F2 | 	cmp	result1, #0 wz
074b8     AC 00 90 AD |  if_e	jmp	#LR__0609
074bc     43 01 00 FF 
074c0     9D 15 06 F6 | 	mov	arg02, ##@LR__4550
074c4     1E 13 02 F6 | 	mov	arg01, local16
074c8     34 19 B1 FD | 	call	#__system___string_cmp
074cc     00 FA 0D F2 | 	cmp	result1, #0 wz
074d0     A0 00 90 AD |  if_e	jmp	#LR__0610
074d4     43 01 00 FF 
074d8     A4 15 06 F6 | 	mov	arg02, ##@LR__4551
074dc     1E 13 02 F6 | 	mov	arg01, local16
074e0     1C 19 B1 FD | 	call	#__system___string_cmp
074e4     00 FA 0D F2 | 	cmp	result1, #0 wz
074e8     94 00 90 AD |  if_e	jmp	#LR__0611
074ec     43 01 00 FF 
074f0     AB 15 06 F6 | 	mov	arg02, ##@LR__4552
074f4     1E 13 02 F6 | 	mov	arg01, local16
074f8     04 19 B1 FD | 	call	#__system___string_cmp
074fc     00 FA 0D F2 | 	cmp	result1, #0 wz
07500     88 00 90 AD |  if_e	jmp	#LR__0612
07504     90 00 90 FD | 	jmp	#LR__0613
07508                 | LR__0601
07508     01 39 06 F6 | 	mov	local14, #257
0750c     01 3A 06 F6 | 	mov	local15, #1
07510     A4 00 90 FD | 	jmp	#LR__0615
07514                 | LR__0602
07514     02 39 06 F6 | 	mov	local14, #258
07518     01 3A 06 F6 | 	mov	local15, #1
0751c     98 00 90 FD | 	jmp	#LR__0615
07520                 | LR__0603
07520     03 39 06 F6 | 	mov	local14, #259
07524     02 3A 06 F6 | 	mov	local15, #2
07528     8C 00 90 FD | 	jmp	#LR__0615
0752c                 | LR__0604
0752c     04 39 06 F6 | 	mov	local14, #260
07530     02 3A 06 F6 | 	mov	local15, #2
07534     80 00 90 FD | 	jmp	#LR__0615
07538                 | LR__0605
07538     05 39 06 F6 | 	mov	local14, #261
0753c     04 3A 06 F6 | 	mov	local15, #4
07540     74 00 90 FD | 	jmp	#LR__0615
07544                 | LR__0606
07544     05 39 06 F6 | 	mov	local14, #261
07548     04 3A 06 F6 | 	mov	local15, #4
0754c     68 00 90 FD | 	jmp	#LR__0615
07550                 | LR__0607
07550     06 39 06 F6 | 	mov	local14, #262
07554     04 3A 06 F6 | 	mov	local15, #4
07558     5C 00 90 FD | 	jmp	#LR__0615
0755c                 | LR__0608
0755c     07 39 06 F6 | 	mov	local14, #263
07560     08 3A 06 F6 | 	mov	local15, #8
07564     50 00 90 FD | 	jmp	#LR__0615
07568                 | LR__0609
07568     08 39 06 F6 | 	mov	local14, #264
0756c     08 3A 06 F6 | 	mov	local15, #8
07570     44 00 90 FD | 	jmp	#LR__0615
07574                 | LR__0610
07574     09 39 06 F6 | 	mov	local14, #265
07578     04 3A 06 F6 | 	mov	local15, #4
0757c     38 00 90 FD | 	jmp	#LR__0615
07580                 | LR__0611
07580     0A 39 06 F6 | 	mov	local14, #266
07584     08 3A 06 F6 | 	mov	local15, #8
07588     2C 00 90 FD | 	jmp	#LR__0615
0758c                 | LR__0612
0758c     0B 39 06 F6 | 	mov	local14, #267
07590     04 3A 06 F6 | 	mov	local15, #4
07594     20 00 90 FD | 	jmp	#LR__0615
07598                 | LR__0613
07598     2F 12 06 F6 | 	mov	arg01, #47
0759c     B4 E2 B0 FD | 	call	#_printerror
075a0     2F FA 05 F6 | 	mov	result1, #47
075a4     48 01 90 FD | 	jmp	#LR__0616
075a8                 | LR__0614
075a8     2E 12 06 F6 | 	mov	arg01, #46
075ac     A4 E2 B0 FD | 	call	#_printerror
075b0                 | '   printerror(46): return 46
075b0     2E FA 05 F6 | 	mov	result1, #46
075b4     38 01 90 FD | 	jmp	#LR__0616
075b8                 | LR__0615
075b8     0F 3B 02 FD | 	qmul	local15, local01
075bc     18 2A 62 FD | 	getqx	local07
075c0     10 2B 02 FD | 	qmul	local07, local02
075c4     18 3C 62 FD | 	getqx	local16
075c8     11 3D 02 FD | 	qmul	local16, local03
075cc     7A 00 00 FF 
075d0     4C E5 05 F1 | 	add	objptr, ##62796
075d4     F2 3E 02 FB | 	rdlong	local17, objptr
075d8     1C 15 02 F6 | 	mov	arg02, local14
075dc     01 16 06 F6 | 	mov	arg03, #1
075e0     00 18 06 F6 | 	mov	arg04, #0
075e4                 | '     return fill(addr, pattern, count, listPtr, 4)
075e4     04 1A 06 F6 | 	mov	arg05, #4
075e8     18 3C 62 FD | 	getqx	local16
075ec     1E 3F 82 F1 | 	sub	local17, local16
075f0     10 3E 86 F1 | 	sub	local17, #16
075f4     F2 3E 62 FC | 	wrlong	local17, objptr
075f8     1F 13 02 F6 | 	mov	arg01, local17
075fc     6F 00 00 FF 
07600     8C E4 85 F1 | 	sub	objptr, ##56972
07604     B8 0D B1 FD | 	call	#_psram_spin2_fill
07608     1F 13 02 F6 | 	mov	arg01, local17
0760c     02 12 06 F1 | 	add	arg01, #2
07610     1D 15 02 F6 | 	mov	arg02, local15
07614     01 16 06 F6 | 	mov	arg03, #1
07618     00 18 06 F6 | 	mov	arg04, #0
0761c                 | '     return fill(addr, pattern, count, listPtr, 1)
0761c     01 1A 06 F6 | 	mov	arg05, #1
07620     9C 0D B1 FD | 	call	#_psram_spin2_fill
07624     1F 13 02 F6 | 	mov	arg01, local17
07628     04 12 06 F1 | 	add	arg01, #4
0762c     0F 15 02 F6 | 	mov	arg02, local01
07630     01 16 06 F6 | 	mov	arg03, #1
07634     00 18 06 F6 | 	mov	arg04, #0
07638                 | '     return fill(addr, pattern, count, listPtr, 4)
07638     04 1A 06 F6 | 	mov	arg05, #4
0763c     80 0D B1 FD | 	call	#_psram_spin2_fill
07640     1F 13 02 F6 | 	mov	arg01, local17
07644     08 12 06 F1 | 	add	arg01, #8
07648     10 15 02 F6 | 	mov	arg02, local02
0764c     01 16 06 F6 | 	mov	arg03, #1
07650     00 18 06 F6 | 	mov	arg04, #0
07654                 | '     return fill(addr, pattern, count, listPtr, 4)
07654     04 1A 06 F6 | 	mov	arg05, #4
07658     64 0D B1 FD | 	call	#_psram_spin2_fill
0765c     1F 13 02 F6 | 	mov	arg01, local17
07660     0C 12 06 F1 | 	add	arg01, #12
07664     11 15 02 F6 | 	mov	arg02, local03
07668     01 16 06 F6 | 	mov	arg03, #1
0766c     00 18 06 F6 | 	mov	arg04, #0
07670                 | '     return fill(addr, pattern, count, listPtr, 4)
07670     04 1A 06 F6 | 	mov	arg05, #4
07674     48 0D B1 FD | 	call	#_psram_spin2_fill
07678     14 35 02 F6 | 	mov	local12, local06
0767c     04 34 66 F0 | 	shl	local12, #4
07680     29 00 00 FF 
07684     1C E4 05 F1 | 	add	objptr, ##21020
07688     F2 34 02 F1 | 	add	local12, objptr
0768c     1A 27 62 FC | 	wrlong	local05, local12
07690     14 35 02 F6 | 	mov	local12, local06
07694     04 34 66 F0 | 	shl	local12, #4
07698     F2 34 02 F1 | 	add	local12, objptr
0769c     04 34 06 F1 | 	add	local12, #4
076a0     1A 3F 62 FC | 	wrlong	local17, local12
076a4     14 35 02 F6 | 	mov	local12, local06
076a8     04 34 66 F0 | 	shl	local12, #4
076ac     F2 34 02 F1 | 	add	local12, objptr
076b0     0C 34 06 F1 | 	add	local12, #12
076b4     1A 39 62 FC | 	wrlong	local14, local12
076b8                 | ' 'print dims(0),dims(1),dims(2),arraytype
076b8                 | ' 
076b8                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
076b8                 | ' arrayptr=memtop-arraysize-16
076b8                 | ' memtop=arrayptr
076b8                 | ' 
076b8                 | ' pslpoke arrayptr,arraytype
076b8                 | ' pspoke arrayptr+2,esize
076b8                 | ' pslpoke arrayptr+4,dims(0)
076b8                 | ' pslpoke arrayptr+8,dims(1)
076b8                 | ' pslpoke arrayptr+12,dims(2)
076b8                 | ' 
076b8                 | ' variables(j).name=varname2$
076b8                 | ' variables(j).value.uresult=arrayptr
076b8                 | ' variables(j).vartype=arraytype
076b8                 | ' if j=varnum then varnum+=1
076b8     20 00 00 FF 
076bc     00 E4 05 F1 | 	add	objptr, ##16384
076c0     F2 2A 02 FB | 	rdlong	local07, objptr
076c4     54 00 00 FF 
076c8     DC E4 85 F1 | 	sub	objptr, ##43228
076cc     15 29 0A F2 | 	cmp	local06, local07 wz
076d0     54 00 00 AF 
076d4     DC E4 05 A1 |  if_e	add	objptr, ##43228
076d8     F2 2A 02 AB |  if_e	rdlong	local07, objptr
076dc     01 2A 06 A1 |  if_e	add	local07, #1
076e0     F2 2A 62 AC |  if_e	wrlong	local07, objptr
076e4     54 00 00 AF 
076e8     DC E4 85 A1 |  if_e	sub	objptr, ##43228
076ec                 | ' 
076ec                 | ' return 0
076ec     00 FA 05 F6 | 	mov	result1, #0
076f0                 | LR__0616
076f0     A7 F0 03 F6 | 	mov	ptra, fp
076f4     B2 00 A0 FD | 	call	#popregs_
076f8                 | _compile_dim_ret
076f8     2D 00 64 FD | 	ret
076fc                 | 
076fc                 | ' 
076fc                 | ' 
076fc                 | ' function compile_for() as ulong  
076fc                 | _compile_for
076fc     07 4A 05 F6 | 	mov	COUNT_, #7
07700     A8 00 A0 FD | 	call	#pushregs_
07704                 | ' 
07704                 | ' 
07704                 | ' 
07704                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
07704     56 00 00 FF 
07708     18 E5 05 F1 | 	add	objptr, ##44312
0770c     F2 14 02 FB | 	rdlong	arg02, objptr
07710     01 14 06 F1 | 	add	arg02, #1
07714     03 14 66 F0 | 	shl	arg02, #3
07718     02 00 00 FF 
0771c     38 E4 85 F1 | 	sub	objptr, ##1080
07720     F2 14 02 F1 | 	add	arg02, objptr
07724     0A 13 02 FB | 	rdlong	arg01, arg02
07728     54 00 00 FF 
0772c     E0 E4 85 F1 | 	sub	objptr, ##43232
07730                 | ' 
07730                 | ' select case s
07730     42 01 00 FF 
07734     BD 14 06 F6 | 	mov	arg02, ##@LR__4384
07738     C4 16 B1 FD | 	call	#__system___string_cmp
0773c     00 FA 0D F2 | 	cmp	result1, #0 wz
07740     1B FA 05 A6 |  if_e	mov	result1, #27
07744     00 FA 05 56 |  if_ne	mov	result1, #0
07748     00 FA 0D F2 | 	cmp	result1, #0 wz
0774c     0C 00 90 AD |  if_e	jmp	#LR__0620
07750     05 12 06 F6 | 	mov	arg01, #5
07754     A0 E4 BF FD | 	call	#_compile_immediate_assign
07758     10 00 90 FD | 	jmp	#LR__0621
0775c                 | LR__0620
0775c     20 12 06 F6 | 	mov	arg01, #32
07760     10 E9 BF FD | 	call	#_compile_error
07764     20 FA 05 F6 | 	mov	result1, #32
07768     E8 02 90 FD | 	jmp	#LR__0627
0776c                 | LR__0621
0776c     69 00 00 FF 
07770     50 E5 05 F1 | 	add	objptr, ##54096
07774     F2 12 02 FB | 	rdlong	arg01, objptr
07778     09 25 02 F6 | 	mov	local04, arg01
0777c     01 24 86 F1 | 	sub	local04, #1
07780     12 15 02 F6 | 	mov	arg02, local04
07784     01 14 66 F0 | 	shl	arg02, #1
07788     12 15 02 F1 | 	add	arg02, local04
0778c     02 14 66 F0 | 	shl	arg02, #2
07790     03 00 00 FF 
07794     00 E4 85 F1 | 	sub	objptr, ##1536
07798     F2 14 02 F1 | 	add	arg02, objptr
0779c     0A 1F 02 FB | 	rdlong	local01, arg02
077a0     04 14 06 F1 | 	add	arg02, #4
077a4     0A 27 02 FB | 	rdlong	local05, arg02
077a8     01 12 86 F1 | 	sub	arg01, #1
077ac     09 29 02 F6 | 	mov	local06, arg01
077b0     01 28 66 F0 | 	shl	local06, #1
077b4     09 29 02 F1 | 	add	local06, arg01
077b8     02 28 66 F0 | 	shl	local06, #2
077bc     F2 28 02 F1 | 	add	local06, objptr
077c0     08 28 06 F1 | 	add	local06, #8
077c4     14 13 02 FB | 	rdlong	arg01, local06
077c8     13 21 02 F6 | 	mov	local02, local05
077cc     09 23 02 F6 | 	mov	local03, arg01
077d0                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
077d0                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
077d0     17 22 0E F2 | 	cmp	local03, #23 wz
077d4     66 00 00 FF 
077d8     50 E5 85 F1 | 	sub	objptr, ##52560
077dc     10 00 90 AD |  if_e	jmp	#LR__0622
077e0     22 12 06 F6 | 	mov	arg01, #34
077e4     8C E8 BF FD | 	call	#_compile_error
077e8     22 FA 05 F6 | 	mov	result1, #34
077ec     64 02 90 FD | 	jmp	#LR__0627
077f0                 | LR__0622
077f0     0F 2B 02 F6 | 	mov	local07, local01
077f4                 | ' varnum=t1.result.uresult
077f4                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
077f4     56 00 00 FF 
077f8     18 E5 05 F1 | 	add	objptr, ##44312
077fc     F2 24 02 FB | 	rdlong	local04, objptr
07800     03 24 66 F0 | 	shl	local04, #3
07804     02 00 00 FF 
07808     38 E4 85 F1 | 	sub	objptr, ##1080
0780c     F2 24 02 F1 | 	add	local04, objptr
07810     12 13 02 FB | 	rdlong	arg01, local04
07814     43 01 00 FF 
07818     B2 15 06 F6 | 	mov	arg02, ##@LR__4553
0781c     54 00 00 FF 
07820     E0 E4 85 F1 | 	sub	objptr, ##43232
07824     D8 15 B1 FD | 	call	#__system___string_cmp
07828     00 FA 0D F2 | 	cmp	result1, #0 wz
0782c     10 00 90 AD |  if_e	jmp	#LR__0623
07830     21 12 06 F6 | 	mov	arg01, #33
07834     3C E8 BF FD | 	call	#_compile_error
07838     21 FA 05 F6 | 	mov	result1, #33
0783c     14 02 90 FD | 	jmp	#LR__0627
07840                 | LR__0623
07840     56 00 00 FF 
07844     18 E5 05 F1 | 	add	objptr, ##44312
07848     F2 24 02 FB | 	rdlong	local04, objptr
0784c     01 24 06 F1 | 	add	local04, #1
07850     F2 24 62 FC | 	wrlong	local04, objptr
07854     56 00 00 FF 
07858     18 E5 85 F1 | 	sub	objptr, ##44312
0785c     D4 0B B0 FD | 	call	#_expr
07860                 | ' ct+=1
07860                 | ' expr()  ' there is "to" value pushed on the stack
07860                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
07860     56 00 00 FF 
07864     18 E5 05 F1 | 	add	objptr, ##44312
07868     F2 24 02 FB | 	rdlong	local04, objptr
0786c     03 24 66 F0 | 	shl	local04, #3
07870     02 00 00 FF 
07874     38 E4 85 F1 | 	sub	objptr, ##1080
07878     F2 24 02 F1 | 	add	local04, objptr
0787c     12 13 02 FB | 	rdlong	arg01, local04
07880     43 01 00 FF 
07884     B5 15 06 F6 | 	mov	arg02, ##@LR__4554
07888     54 00 00 FF 
0788c     E0 E4 85 F1 | 	sub	objptr, ##43232
07890     6C 15 B1 FD | 	call	#__system___string_cmp
07894     00 FA 0D F2 | 	cmp	result1, #0 wz
07898     3C 00 90 AD |  if_e	jmp	#LR__0624
0789c     56 00 00 FF 
078a0     18 E5 05 F1 | 	add	objptr, ##44312
078a4     F2 28 02 FB | 	rdlong	local06, objptr
078a8     03 28 66 F0 | 	shl	local06, #3
078ac     02 00 00 FF 
078b0     38 E4 85 F1 | 	sub	objptr, ##1080
078b4     F2 28 02 F1 | 	add	local06, objptr
078b8     14 13 02 FB | 	rdlong	arg01, local06
078bc     43 01 00 FF 
078c0     BA 15 06 F6 | 	mov	arg02, ##@LR__4555
078c4     54 00 00 FF 
078c8     E0 E4 85 F1 | 	sub	objptr, ##43232
078cc     30 15 B1 FD | 	call	#__system___string_cmp
078d0     00 FA 0D F2 | 	cmp	result1, #0 wz
078d4     24 00 90 5D |  if_ne	jmp	#LR__0625
078d8                 | LR__0624
078d8     56 00 00 FF 
078dc     18 E5 05 F1 | 	add	objptr, ##44312
078e0     F2 28 02 FB | 	rdlong	local06, objptr
078e4     01 28 06 F1 | 	add	local06, #1
078e8     F2 28 62 FC | 	wrlong	local06, objptr
078ec     56 00 00 FF 
078f0     18 E5 85 F1 | 	sub	objptr, ##44312
078f4     3C 0B B0 FD | 	call	#_expr
078f8     78 00 90 FD | 	jmp	#LR__0626
078fc                 | LR__0625
078fc     69 00 00 FF 
07900     50 E5 05 F1 | 	add	objptr, ##54096
07904     F2 28 02 FB | 	rdlong	local06, objptr
07908     14 27 02 F6 | 	mov	local05, local06
0790c     01 26 66 F0 | 	shl	local05, #1
07910     14 27 02 F1 | 	add	local05, local06
07914     02 26 66 F0 | 	shl	local05, #2
07918     03 00 00 FF 
0791c     00 E4 85 F1 | 	sub	objptr, ##1536
07920     F2 26 02 F1 | 	add	local05, objptr
07924     08 26 06 F1 | 	add	local05, #8
07928     13 39 68 FC | 	wrlong	#28, local05
0792c     03 00 00 FF 
07930     00 E4 05 F1 | 	add	objptr, ##1536
07934     F2 28 02 FB | 	rdlong	local06, objptr
07938     14 27 02 F6 | 	mov	local05, local06
0793c     01 26 66 F0 | 	shl	local05, #1
07940     14 27 02 F1 | 	add	local05, local06
07944     02 26 66 F0 | 	shl	local05, #2
07948     03 00 00 FF 
0794c     00 E4 85 F1 | 	sub	objptr, ##1536
07950     F2 26 02 F1 | 	add	local05, objptr
07954     13 03 68 FC | 	wrlong	#1, local05
07958     03 00 00 FF 
0795c     00 E4 05 F1 | 	add	objptr, ##1536
07960     F2 28 02 FB | 	rdlong	local06, objptr
07964     01 28 06 F1 | 	add	local06, #1
07968     F2 28 62 FC | 	wrlong	local06, objptr
0796c     69 00 00 FF 
07970     50 E5 85 F1 | 	sub	objptr, ##54096
07974                 | LR__0626
07974     69 00 00 FF 
07978     50 E5 05 F1 | 	add	objptr, ##54096
0797c     F2 28 02 FB | 	rdlong	local06, objptr
07980     14 27 02 F6 | 	mov	local05, local06
07984     01 26 66 F0 | 	shl	local05, #1
07988     14 27 02 F1 | 	add	local05, local06
0798c     02 26 66 F0 | 	shl	local05, #2
07990     03 00 00 FF 
07994     00 E4 85 F1 | 	sub	objptr, ##1536
07998     F2 26 02 F1 | 	add	local05, objptr
0799c     08 26 06 F1 | 	add	local05, #8
079a0     13 39 68 FC | 	wrlong	#28, local05
079a4     03 00 00 FF 
079a8     00 E4 05 F1 | 	add	objptr, ##1536
079ac     F2 28 02 FB | 	rdlong	local06, objptr
079b0     14 27 02 F6 | 	mov	local05, local06
079b4     01 26 66 F0 | 	shl	local05, #1
079b8     14 27 02 F1 | 	add	local05, local06
079bc     02 26 66 F0 | 	shl	local05, #2
079c0     03 00 00 FF 
079c4     00 E4 85 F1 | 	sub	objptr, ##1536
079c8     F2 26 02 F1 | 	add	local05, objptr
079cc     13 2B 62 FC | 	wrlong	local07, local05
079d0     03 00 00 FF 
079d4     00 E4 05 F1 | 	add	objptr, ##1536
079d8     F2 2A 02 FB | 	rdlong	local07, objptr
079dc     01 2A 06 F1 | 	add	local07, #1
079e0     F2 2A 62 FC | 	wrlong	local07, objptr
079e4     15 29 02 F6 | 	mov	local06, local07
079e8     01 28 66 F0 | 	shl	local06, #1
079ec     15 29 02 F1 | 	add	local06, local07
079f0     02 28 66 F0 | 	shl	local06, #2
079f4     03 00 00 FF 
079f8     00 E4 85 F1 | 	sub	objptr, ##1536
079fc     F2 28 02 F1 | 	add	local06, objptr
07a00     08 28 06 F1 | 	add	local06, #8
07a04     14 95 68 FC | 	wrlong	#74, local06
07a08     03 00 00 FF 
07a0c     00 E4 05 F1 | 	add	objptr, ##1536
07a10     F2 2A 02 FB | 	rdlong	local07, objptr
07a14     15 29 02 F6 | 	mov	local06, local07
07a18     01 28 66 F0 | 	shl	local06, #1
07a1c     15 29 02 F1 | 	add	local06, local07
07a20     02 28 66 F0 | 	shl	local06, #2
07a24     03 00 00 FF 
07a28     00 E4 85 F1 | 	sub	objptr, ##1536
07a2c     F2 28 02 F1 | 	add	local06, objptr
07a30     14 01 68 FC | 	wrlong	#0, local06
07a34     03 00 00 FF 
07a38     00 E4 05 F1 | 	add	objptr, ##1536
07a3c     F2 2A 02 FB | 	rdlong	local07, objptr
07a40     01 2A 06 F1 | 	add	local07, #1
07a44     F2 2A 62 FC | 	wrlong	local07, objptr
07a48     69 00 00 FF 
07a4c     50 E5 85 F1 | 	sub	objptr, ##54096
07a50                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
07a50                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
07a50                 | ' 
07a50                 | ' 
07a50                 | ' return 0
07a50     00 FA 05 F6 | 	mov	result1, #0
07a54                 | LR__0627
07a54     A7 F0 03 F6 | 	mov	ptra, fp
07a58     B2 00 A0 FD | 	call	#popregs_
07a5c                 | _compile_for_ret
07a5c     2D 00 64 FD | 	ret
07a60                 | 
07a60                 | ' 
07a60                 | ' 
07a60                 | ' sub do_for()
07a60                 | _do_for
07a60     05 4A 05 F6 | 	mov	COUNT_, #5
07a64     A8 00 A0 FD | 	call	#pushregs_
07a68     79 00 00 FF 
07a6c     AC E4 05 F1 | 	add	objptr, ##62124
07a70     F2 24 02 FB | 	rdlong	local04, objptr
07a74     01 24 06 F1 | 	add	local04, #1
07a78     F2 24 62 FC | 	wrlong	local04, objptr
07a7c     79 00 00 FF 
07a80     AC E4 85 F1 | 	sub	objptr, ##62124
07a84     5C 1E B0 FD | 	call	#_pop
07a88     FD 1E 02 F6 | 	mov	local01, result1
07a8c     FE 20 02 F6 | 	mov	local02, result2
07a90     FF 22 02 F6 | 	mov	local03, result3
07a94     79 00 00 FF 
07a98     AC E4 05 F1 | 	add	objptr, ##62124
07a9c     F2 24 02 FB | 	rdlong	local04, objptr
07aa0     12 27 02 F6 | 	mov	local05, local04
07aa4     02 26 66 F0 | 	shl	local05, #2
07aa8     12 27 02 F1 | 	add	local05, local04
07aac     02 26 66 F0 | 	shl	local05, #2
07ab0     07 00 00 FF 
07ab4     40 E5 85 F1 | 	sub	objptr, ##3904
07ab8     F2 26 02 F1 | 	add	local05, objptr
07abc     08 26 06 F1 | 	add	local05, #8
07ac0     13 1F 62 FC | 	wrlong	local01, local05
07ac4     71 00 00 FF 
07ac8     6C E5 85 F1 | 	sub	objptr, ##58220
07acc     14 1E B0 FD | 	call	#_pop
07ad0     FD 1E 02 F6 | 	mov	local01, result1
07ad4     FE 20 02 F6 | 	mov	local02, result2
07ad8     FF 22 02 F6 | 	mov	local03, result3
07adc     79 00 00 FF 
07ae0     AC E4 05 F1 | 	add	objptr, ##62124
07ae4     F2 24 02 FB | 	rdlong	local04, objptr
07ae8     12 27 02 F6 | 	mov	local05, local04
07aec     02 26 66 F0 | 	shl	local05, #2
07af0     12 27 02 F1 | 	add	local05, local04
07af4     02 26 66 F0 | 	shl	local05, #2
07af8     07 00 00 FF 
07afc     40 E5 85 F1 | 	sub	objptr, ##3904
07b00     F2 26 02 F1 | 	add	local05, objptr
07b04     0C 26 06 F1 | 	add	local05, #12
07b08     13 1F 62 FC | 	wrlong	local01, local05
07b0c     71 00 00 FF 
07b10     6C E5 85 F1 | 	sub	objptr, ##58220
07b14     CC 1D B0 FD | 	call	#_pop
07b18     FD 1E 02 F6 | 	mov	local01, result1
07b1c     FE 20 02 F6 | 	mov	local02, result2
07b20     FF 22 02 F6 | 	mov	local03, result3
07b24     79 00 00 FF 
07b28     AC E4 05 F1 | 	add	objptr, ##62124
07b2c     F2 24 02 FB | 	rdlong	local04, objptr
07b30     12 27 02 F6 | 	mov	local05, local04
07b34     02 26 66 F0 | 	shl	local05, #2
07b38     12 27 02 F1 | 	add	local05, local04
07b3c     02 26 66 F0 | 	shl	local05, #2
07b40     07 00 00 FF 
07b44     40 E5 85 F1 | 	sub	objptr, ##3904
07b48     F2 26 02 F1 | 	add	local05, objptr
07b4c     10 26 06 F1 | 	add	local05, #16
07b50     13 1F 62 FC | 	wrlong	local01, local05
07b54                 | ' fortop+=1
07b54                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
07b54                 | ' 'if i> maxfor then printerror(36) : return
07b54                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
07b54                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
07b54                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
07b54                 | ' if compiledline(lineptr_e).result_type=token_end then
07b54     08 00 00 FF 
07b58     18 E4 85 F1 | 	sub	objptr, ##4120
07b5c     F2 1E 02 FB | 	rdlong	local01, objptr
07b60     0F 27 02 F6 | 	mov	local05, local01
07b64     01 26 66 F0 | 	shl	local05, #1
07b68     0F 27 02 F1 | 	add	local05, local01
07b6c     02 26 66 F0 | 	shl	local05, #2
07b70     03 00 00 FF 
07b74     04 E4 85 F1 | 	sub	objptr, ##1540
07b78     F2 26 02 F1 | 	add	local05, objptr
07b7c     08 26 06 F1 | 	add	local05, #8
07b80     13 27 02 FB | 	rdlong	local05, local05
07b84     FE 27 0E F2 | 	cmp	local05, #510 wz
07b88     66 00 00 FF 
07b8c     50 E5 85 F1 | 	sub	objptr, ##52560
07b90     70 00 90 5D |  if_ne	jmp	#LR__0630
07b94     79 00 00 FF 
07b98     AC E4 05 F1 | 	add	objptr, ##62124
07b9c     F2 1E 02 FB | 	rdlong	local01, objptr
07ba0     0F 27 02 F6 | 	mov	local05, local01
07ba4     02 26 66 F0 | 	shl	local05, #2
07ba8     0F 27 02 F1 | 	add	local05, local01
07bac     02 26 66 F0 | 	shl	local05, #2
07bb0     07 00 00 FF 
07bb4     40 E5 85 F1 | 	sub	objptr, ##3904
07bb8     F2 26 02 F1 | 	add	local05, objptr
07bbc     07 00 00 FF 
07bc0     18 E5 05 F1 | 	add	objptr, ##3864
07bc4     F2 1E 02 FB | 	rdlong	local01, objptr
07bc8     13 1F 62 FC | 	wrlong	local01, local05
07bcc     28 E4 05 F1 | 	add	objptr, #40
07bd0     F2 1E 02 FB | 	rdlong	local01, objptr
07bd4     0F 27 02 F6 | 	mov	local05, local01
07bd8     02 26 66 F0 | 	shl	local05, #2
07bdc     0F 27 02 F1 | 	add	local05, local01
07be0     02 26 66 F0 | 	shl	local05, #2
07be4     07 00 00 FF 
07be8     40 E5 85 F1 | 	sub	objptr, ##3904
07bec     F2 26 02 F1 | 	add	local05, objptr
07bf0     04 26 06 F1 | 	add	local05, #4
07bf4     13 01 68 FC | 	wrlong	#0, local05
07bf8     71 00 00 FF 
07bfc     6C E5 85 F1 | 	sub	objptr, ##58220
07c00     7C 00 90 FD | 	jmp	#LR__0631
07c04                 | LR__0630
07c04     79 00 00 FF 
07c08     AC E4 05 F1 | 	add	objptr, ##62124
07c0c     F2 1E 02 FB | 	rdlong	local01, objptr
07c10     0F 27 02 F6 | 	mov	local05, local01
07c14     02 26 66 F0 | 	shl	local05, #2
07c18     0F 27 02 F1 | 	add	local05, local01
07c1c     02 26 66 F0 | 	shl	local05, #2
07c20     07 00 00 FF 
07c24     40 E5 85 F1 | 	sub	objptr, ##3904
07c28     F2 26 02 F1 | 	add	local05, objptr
07c2c     07 00 00 FF 
07c30     20 E5 05 F1 | 	add	objptr, ##3872
07c34     F2 1E 02 FB | 	rdlong	local01, objptr
07c38     13 1F 62 FC | 	wrlong	local01, local05
07c3c     20 E4 05 F1 | 	add	objptr, #32
07c40     F2 1E 02 FB | 	rdlong	local01, objptr
07c44     0F 27 02 F6 | 	mov	local05, local01
07c48     02 26 66 F0 | 	shl	local05, #2
07c4c     0F 27 02 F1 | 	add	local05, local01
07c50     02 26 66 F0 | 	shl	local05, #2
07c54     07 00 00 FF 
07c58     40 E5 85 F1 | 	sub	objptr, ##3904
07c5c     F2 26 02 F1 | 	add	local05, objptr
07c60     08 00 00 FF 
07c64     18 E4 85 F1 | 	sub	objptr, ##4120
07c68     F2 1E 02 FB | 	rdlong	local01, objptr
07c6c     69 00 00 FF 
07c70     54 E5 85 F1 | 	sub	objptr, ##54100
07c74     01 1E 06 F1 | 	add	local01, #1
07c78     04 26 06 F1 | 	add	local05, #4
07c7c     13 1F 62 FC | 	wrlong	local01, local05
07c80                 | LR__0631
07c80     A7 F0 03 F6 | 	mov	ptra, fp
07c84     B2 00 A0 FD | 	call	#popregs_
07c88                 | _do_for_ret
07c88     2D 00 64 FD | 	ret
07c8c                 | 
07c8c                 | ' 
07c8c                 | ' ' now do_next todo
07c8c                 | ' 
07c8c                 | ' sub do_next()
07c8c                 | _do_next
07c8c     04 4A 05 F6 | 	mov	COUNT_, #4
07c90     A8 00 A0 FD | 	call	#pushregs_
07c94     4C 1C B0 FD | 	call	#_pop
07c98     FD 1E 02 F6 | 	mov	local01, result1
07c9c     FE 20 02 F6 | 	mov	local02, result2
07ca0     FF 22 02 F6 | 	mov	local03, result3
07ca4                 | ' 
07ca4                 | ' t1=pop() :varnum=t1.result.uresult
07ca4                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
07ca4     79 00 00 FF 
07ca8     AC E4 05 F1 | 	add	objptr, ##62124
07cac     F2 12 02 FB | 	rdlong	arg01, objptr
07cb0     09 25 02 F6 | 	mov	local04, arg01
07cb4     02 24 66 F0 | 	shl	local04, #2
07cb8     09 25 02 F1 | 	add	local04, arg01
07cbc     02 24 66 F0 | 	shl	local04, #2
07cc0     07 00 00 FF 
07cc4     40 E5 85 F1 | 	sub	objptr, ##3904
07cc8     F2 24 02 F1 | 	add	local04, objptr
07ccc     08 24 06 F1 | 	add	local04, #8
07cd0     12 25 02 FB | 	rdlong	local04, local04
07cd4     0F 25 0A F2 | 	cmp	local04, local01 wz
07cd8     71 00 00 FF 
07cdc     6C E5 85 F1 | 	sub	objptr, ##58220
07ce0     0C 00 90 AD |  if_e	jmp	#LR__0640
07ce4     25 12 06 F6 | 	mov	arg01, #37
07ce8     68 DB B0 FD | 	call	#_printerror
07cec     28 02 90 FD | 	jmp	#LR__0644
07cf0                 | LR__0640
07cf0     79 00 00 FF 
07cf4     AC E4 05 F1 | 	add	objptr, ##62124
07cf8     F2 12 02 FB | 	rdlong	arg01, objptr
07cfc     09 25 02 F6 | 	mov	local04, arg01
07d00     02 24 66 F0 | 	shl	local04, #2
07d04     09 25 02 F1 | 	add	local04, arg01
07d08     02 24 66 F0 | 	shl	local04, #2
07d0c     07 00 00 FF 
07d10     40 E5 85 F1 | 	sub	objptr, ##3904
07d14     F2 24 02 F1 | 	add	local04, objptr
07d18     0C 24 06 F1 | 	add	local04, #12
07d1c     12 25 02 FB | 	rdlong	local04, local04
07d20     0F 13 02 F6 | 	mov	arg01, local01
07d24     04 12 66 F0 | 	shl	arg01, #4
07d28     3D 00 00 FF 
07d2c     90 E4 85 F1 | 	sub	objptr, ##31376
07d30     F2 12 02 F1 | 	add	arg01, objptr
07d34     0F FF 01 F6 | 	mov	result3, local01
07d38     04 FE 65 F0 | 	shl	result3, #4
07d3c     F2 FE 01 F1 | 	add	result3, objptr
07d40     04 FE 05 F1 | 	add	result3, #4
07d44     FF FE 01 FB | 	rdlong	result3, result3
07d48     12 FF 01 F1 | 	add	result3, local04
07d4c     04 12 06 F1 | 	add	arg01, #4
07d50     09 FF 61 FC | 	wrlong	result3, arg01
07d54                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
07d54                 | ' if fortable(fortop).stepval>=0 then
07d54     44 00 00 FF 
07d58     D0 E5 05 F1 | 	add	objptr, ##35280
07d5c     F2 12 02 FB | 	rdlong	arg01, objptr
07d60     09 25 02 F6 | 	mov	local04, arg01
07d64     02 24 66 F0 | 	shl	local04, #2
07d68     09 25 02 F1 | 	add	local04, arg01
07d6c     02 24 66 F0 | 	shl	local04, #2
07d70     07 00 00 FF 
07d74     40 E5 85 F1 | 	sub	objptr, ##3904
07d78     F2 24 02 F1 | 	add	local04, objptr
07d7c     0C 24 06 F1 | 	add	local04, #12
07d80     12 25 02 FB | 	rdlong	local04, local04
07d84     00 24 56 F2 | 	cmps	local04, #0 wc
07d88     71 00 00 FF 
07d8c     6C E5 85 F1 | 	sub	objptr, ##58220
07d90     78 00 90 CD |  if_b	jmp	#LR__0641
07d94                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
07d94     04 1E 66 F0 | 	shl	local01, #4
07d98     34 00 00 FF 
07d9c     DC E4 05 F1 | 	add	objptr, ##26844
07da0     F2 1E 02 F1 | 	add	local01, objptr
07da4     44 00 00 FF 
07da8     D0 E5 05 F1 | 	add	objptr, ##35280
07dac     F2 24 02 FB | 	rdlong	local04, objptr
07db0     12 13 02 F6 | 	mov	arg01, local04
07db4     02 12 66 F0 | 	shl	arg01, #2
07db8     12 13 02 F1 | 	add	arg01, local04
07dbc     02 12 66 F0 | 	shl	arg01, #2
07dc0     07 00 00 FF 
07dc4     40 E5 85 F1 | 	sub	objptr, ##3904
07dc8     F2 12 02 F1 | 	add	arg01, objptr
07dcc     04 1E 06 F1 | 	add	local01, #4
07dd0     0F 25 02 FB | 	rdlong	local04, local01
07dd4     10 12 06 F1 | 	add	arg01, #16
07dd8     09 13 02 FB | 	rdlong	arg01, arg01
07ddc     09 25 5A F2 | 	cmps	local04, arg01 wcz
07de0     71 00 00 FF 
07de4     6C E5 85 F1 | 	sub	objptr, ##58220
07de8     9C 00 90 ED |  if_be	jmp	#LR__0643
07dec     79 00 00 FF 
07df0     AC E4 05 F1 | 	add	objptr, ##62124
07df4     F2 24 02 FB | 	rdlong	local04, objptr
07df8     01 24 86 F1 | 	sub	local04, #1
07dfc     F2 24 62 FC | 	wrlong	local04, objptr
07e00     79 00 00 FF 
07e04     AC E4 85 F1 | 	sub	objptr, ##62124
07e08     0C 01 90 FD | 	jmp	#LR__0644
07e0c                 | LR__0641
07e0c                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
07e0c     0F 13 02 F6 | 	mov	arg01, local01
07e10     04 12 66 F0 | 	shl	arg01, #4
07e14     34 00 00 FF 
07e18     DC E4 05 F1 | 	add	objptr, ##26844
07e1c     F2 12 02 F1 | 	add	arg01, objptr
07e20     44 00 00 FF 
07e24     D0 E5 05 F1 | 	add	objptr, ##35280
07e28     F2 24 02 FB | 	rdlong	local04, objptr
07e2c     12 1F 02 F6 | 	mov	local01, local04
07e30     02 1E 66 F0 | 	shl	local01, #2
07e34     12 1F 02 F1 | 	add	local01, local04
07e38     02 1E 66 F0 | 	shl	local01, #2
07e3c     07 00 00 FF 
07e40     40 E5 85 F1 | 	sub	objptr, ##3904
07e44     F2 1E 02 F1 | 	add	local01, objptr
07e48     04 12 06 F1 | 	add	arg01, #4
07e4c     09 13 02 FB | 	rdlong	arg01, arg01
07e50     10 1E 06 F1 | 	add	local01, #16
07e54     0F 1F 02 FB | 	rdlong	local01, local01
07e58     0F 13 52 F2 | 	cmps	arg01, local01 wc
07e5c     71 00 00 FF 
07e60     6C E5 85 F1 | 	sub	objptr, ##58220
07e64     20 00 90 3D |  if_ae	jmp	#LR__0642
07e68     79 00 00 FF 
07e6c     AC E4 05 F1 | 	add	objptr, ##62124
07e70     F2 24 02 FB | 	rdlong	local04, objptr
07e74     01 24 86 F1 | 	sub	local04, #1
07e78     F2 24 62 FC | 	wrlong	local04, objptr
07e7c     79 00 00 FF 
07e80     AC E4 85 F1 | 	sub	objptr, ##62124
07e84     90 00 90 FD | 	jmp	#LR__0644
07e88                 | LR__0642
07e88                 | LR__0643
07e88     79 00 00 FF 
07e8c     AC E4 05 F1 | 	add	objptr, ##62124
07e90     F2 1E 02 FB | 	rdlong	local01, objptr
07e94     0F 25 02 F6 | 	mov	local04, local01
07e98     02 24 66 F0 | 	shl	local04, #2
07e9c     0F 25 02 F1 | 	add	local04, local01
07ea0     02 24 66 F0 | 	shl	local04, #2
07ea4     07 00 00 FF 
07ea8     40 E5 85 F1 | 	sub	objptr, ##3904
07eac     F2 24 02 F1 | 	add	local04, objptr
07eb0     12 25 02 FB | 	rdlong	local04, local04
07eb4     07 00 00 FF 
07eb8     18 E5 05 F1 | 	add	objptr, ##3864
07ebc     F2 24 62 FC | 	wrlong	local04, objptr
07ec0     28 E4 05 F1 | 	add	objptr, #40
07ec4     F2 1E 02 FB | 	rdlong	local01, objptr
07ec8     0F 25 02 F6 | 	mov	local04, local01
07ecc     02 24 66 F0 | 	shl	local04, #2
07ed0     0F 25 02 F1 | 	add	local04, local01
07ed4     02 24 66 F0 | 	shl	local04, #2
07ed8     07 00 00 FF 
07edc     40 E5 85 F1 | 	sub	objptr, ##3904
07ee0     F2 24 02 F1 | 	add	local04, objptr
07ee4     04 24 06 F1 | 	add	local04, #4
07ee8     12 25 02 FB | 	rdlong	local04, local04
07eec     07 00 00 FF 
07ef0     1C E5 05 F1 | 	add	objptr, ##3868
07ef4     F2 24 62 FC | 	wrlong	local04, objptr
07ef8     0F 00 00 FF 
07efc     38 E5 85 F1 | 	sub	objptr, ##7992
07f00     F2 24 02 FB | 	rdlong	local04, objptr
07f04     01 24 86 F1 | 	sub	local04, #1
07f08     04 E4 05 F1 | 	add	objptr, #4
07f0c     F2 24 62 FC | 	wrlong	local04, objptr
07f10     69 00 00 FF 
07f14     54 E5 85 F1 | 	sub	objptr, ##54100
07f18                 | LR__0644
07f18     A7 F0 03 F6 | 	mov	ptra, fp
07f1c     B2 00 A0 FD | 	call	#popregs_
07f20                 | _do_next_ret
07f20     2D 00 64 FD | 	ret
07f24                 | 
07f24                 | ' 
07f24                 | ' 
07f24                 | ' function compile_next() as ulong
07f24                 | _compile_next
07f24     04 4A 05 F6 | 	mov	COUNT_, #4
07f28     A8 00 A0 FD | 	call	#pushregs_
07f2c     56 00 00 FF 
07f30     18 E5 05 F1 | 	add	objptr, ##44312
07f34     F2 12 02 FB | 	rdlong	arg01, objptr
07f38     03 12 66 F0 | 	shl	arg01, #3
07f3c     02 00 00 FF 
07f40     38 E4 85 F1 | 	sub	objptr, ##1080
07f44     F2 12 02 F1 | 	add	arg01, objptr
07f48     09 1F 02 FB | 	rdlong	local01, arg01
07f4c                 | ' 
07f4c                 | ' varname$=lparts(ct).part$ 
07f4c                 | ' 'suffix$=right$(varname$,1)
07f4c                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
07f4c                 | ' if varnum=0 then compile_error(35)  : return 35
07f4c     04 E4 85 F1 | 	sub	objptr, #4
07f50     F2 14 0A FB | 	rdlong	arg02, objptr wz
07f54     54 00 00 FF 
07f58     DC E4 85 F1 | 	sub	objptr, ##43228
07f5c     10 00 90 5D |  if_ne	jmp	#LR__0650
07f60     23 12 06 F6 | 	mov	arg01, #35
07f64     0C E1 BF FD | 	call	#_compile_error
07f68     23 FA 05 F6 | 	mov	result1, #35
07f6c     58 01 90 FD | 	jmp	#LR__0654
07f70                 | LR__0650
07f70     01 20 66 F6 | 	neg	local02, #1
07f74                 | ' j=-1
07f74                 | ' for i=0 to varnum-1
07f74     00 22 06 F6 | 	mov	local03, #0
07f78     54 00 00 FF 
07f7c     DC E4 05 F1 | 	add	objptr, ##43228
07f80     F2 24 02 FB | 	rdlong	local04, objptr
07f84     54 00 00 FF 
07f88     DC E4 85 F1 | 	sub	objptr, ##43228
07f8c                 | LR__0651
07f8c     12 23 12 F2 | 	cmp	local03, local04 wc
07f90     38 00 90 3D |  if_ae	jmp	#LR__0652
07f94                 | '   if variables(i).name=varname$ then j=i : exit
07f94     11 15 02 F6 | 	mov	arg02, local03
07f98     04 14 66 F0 | 	shl	arg02, #4
07f9c     34 00 00 FF 
07fa0     DC E4 05 F1 | 	add	objptr, ##26844
07fa4     F2 14 02 F1 | 	add	arg02, objptr
07fa8     0A 13 02 FB | 	rdlong	arg01, arg02
07fac     0F 15 02 F6 | 	mov	arg02, local01
07fb0     34 00 00 FF 
07fb4     DC E4 85 F1 | 	sub	objptr, ##26844
07fb8     44 0E B1 FD | 	call	#__system___string_cmp
07fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
07fc0     11 21 02 A6 |  if_e	mov	local02, local03
07fc4     01 22 06 51 |  if_ne	add	local03, #1
07fc8     C0 FF 9F 5D |  if_ne	jmp	#LR__0651
07fcc                 | LR__0652
07fcc                 | ' if j=-1 then compile_error(35) : return 35
07fcc     FF FF 7F FF 
07fd0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
07fd4     10 00 90 5D |  if_ne	jmp	#LR__0653
07fd8     23 12 06 F6 | 	mov	arg01, #35
07fdc     94 E0 BF FD | 	call	#_compile_error
07fe0     23 FA 05 F6 | 	mov	result1, #35
07fe4     E0 00 90 FD | 	jmp	#LR__0654
07fe8                 | LR__0653
07fe8     69 00 00 FF 
07fec     50 E5 05 F1 | 	add	objptr, ##54096
07ff0     F2 24 02 FB | 	rdlong	local04, objptr
07ff4     12 23 02 F6 | 	mov	local03, local04
07ff8     01 22 66 F0 | 	shl	local03, #1
07ffc     12 23 02 F1 | 	add	local03, local04
08000     02 22 66 F0 | 	shl	local03, #2
08004     03 00 00 FF 
08008     00 E4 85 F1 | 	sub	objptr, ##1536
0800c     F2 22 02 F1 | 	add	local03, objptr
08010     08 22 06 F1 | 	add	local03, #8
08014     11 39 68 FC | 	wrlong	#28, local03
08018     03 00 00 FF 
0801c     00 E4 05 F1 | 	add	objptr, ##1536
08020     F2 24 02 FB | 	rdlong	local04, objptr
08024     12 23 02 F6 | 	mov	local03, local04
08028     01 22 66 F0 | 	shl	local03, #1
0802c     12 23 02 F1 | 	add	local03, local04
08030     02 22 66 F0 | 	shl	local03, #2
08034     03 00 00 FF 
08038     00 E4 85 F1 | 	sub	objptr, ##1536
0803c     F2 22 02 F1 | 	add	local03, objptr
08040     11 21 62 FC | 	wrlong	local02, local03
08044     03 00 00 FF 
08048     00 E4 05 F1 | 	add	objptr, ##1536
0804c     F2 24 02 FB | 	rdlong	local04, objptr
08050     01 24 06 F1 | 	add	local04, #1
08054     F2 24 62 FC | 	wrlong	local04, objptr
08058     12 23 02 F6 | 	mov	local03, local04
0805c     01 22 66 F0 | 	shl	local03, #1
08060     12 23 02 F1 | 	add	local03, local04
08064     02 22 66 F0 | 	shl	local03, #2
08068     03 00 00 FF 
0806c     00 E4 85 F1 | 	sub	objptr, ##1536
08070     F2 22 02 F1 | 	add	local03, objptr
08074     08 22 06 F1 | 	add	local03, #8
08078     11 97 68 FC | 	wrlong	#75, local03
0807c     03 00 00 FF 
08080     00 E4 05 F1 | 	add	objptr, ##1536
08084     F2 24 02 FB | 	rdlong	local04, objptr
08088     12 23 02 F6 | 	mov	local03, local04
0808c     01 22 66 F0 | 	shl	local03, #1
08090     12 23 02 F1 | 	add	local03, local04
08094     02 22 66 F0 | 	shl	local03, #2
08098     03 00 00 FF 
0809c     00 E4 85 F1 | 	sub	objptr, ##1536
080a0     F2 22 02 F1 | 	add	local03, objptr
080a4     11 01 68 FC | 	wrlong	#0, local03
080a8     03 00 00 FF 
080ac     00 E4 05 F1 | 	add	objptr, ##1536
080b0     F2 24 02 FB | 	rdlong	local04, objptr
080b4     01 24 06 F1 | 	add	local04, #1
080b8     F2 24 62 FC | 	wrlong	local04, objptr
080bc     69 00 00 FF 
080c0     50 E5 85 F1 | 	sub	objptr, ##54096
080c4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
080c4                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
080c4                 | ' return 0
080c4     00 FA 05 F6 | 	mov	result1, #0
080c8                 | LR__0654
080c8     A7 F0 03 F6 | 	mov	ptra, fp
080cc     B2 00 A0 FD | 	call	#popregs_
080d0                 | _compile_next_ret
080d0     2D 00 64 FD | 	ret
080d4                 | 
080d4                 | ' 
080d4                 | ' 
080d4                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
080d4                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
080d4                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
080d4                 | ' 
080d4                 | ' 
080d4                 | ' function compile_goto( ) as ulong
080d4                 | _compile_goto
080d4     03 4A 05 F6 | 	mov	COUNT_, #3
080d8     A8 00 A0 FD | 	call	#pushregs_
080dc     28 F0 07 F1 | 	add	ptra, #40
080e0                 | ' 
080e0                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
080e0     56 00 00 FF 
080e4     18 E5 05 F1 | 	add	objptr, ##44312
080e8     F2 16 02 FB | 	rdlong	arg03, objptr
080ec     03 16 66 F0 | 	shl	arg03, #3
080f0     02 00 00 FF 
080f4     38 E4 85 F1 | 	sub	objptr, ##1080
080f8     F2 16 02 F1 | 	add	arg03, objptr
080fc     04 16 06 F1 | 	add	arg03, #4
08100     0B 17 02 FB | 	rdlong	arg03, arg03
08104     01 00 00 FF 
08108     00 16 0E F2 | 	cmp	arg03, ##512 wz
0810c     54 00 00 FF 
08110     E0 E4 85 F1 | 	sub	objptr, ##43232
08114     CC 02 90 5D |  if_ne	jmp	#LR__0665
08118     56 00 00 FF 
0811c     18 E5 05 F1 | 	add	objptr, ##44312
08120     F2 16 02 FB | 	rdlong	arg03, objptr
08124     01 16 06 F1 | 	add	arg03, #1
08128     03 16 66 F0 | 	shl	arg03, #3
0812c     02 00 00 FF 
08130     38 E4 85 F1 | 	sub	objptr, ##1080
08134     F2 16 02 F1 | 	add	arg03, objptr
08138     04 16 06 F1 | 	add	arg03, #4
0813c     0B 17 02 FB | 	rdlong	arg03, arg03
08140     FE 17 0E F2 | 	cmp	arg03, #510 wz
08144     54 00 00 FF 
08148     E0 E4 85 F1 | 	sub	objptr, ##43232
0814c     94 02 90 5D |  if_ne	jmp	#LR__0665
08150     56 00 00 FF 
08154     18 E5 05 F1 | 	add	objptr, ##44312
08158     F2 16 02 FB | 	rdlong	arg03, objptr
0815c     03 16 66 F0 | 	shl	arg03, #3
08160     02 00 00 FF 
08164     38 E4 85 F1 | 	sub	objptr, ##1080
08168     F2 16 02 F1 | 	add	arg03, objptr
0816c     0B 13 02 FB | 	rdlong	arg01, arg03
08170     00 14 06 F6 | 	mov	arg02, #0
08174     54 00 00 FF 
08178     E0 E4 85 F1 | 	sub	objptr, ##43232
0817c     BC 3D B1 FD | 	call	#__system____builtin_atoi
08180     04 4E 05 F1 | 	add	fp, #4
08184     A7 FA 61 FC | 	wrlong	result1, fp
08188     69 00 00 FF 
0818c     50 E5 05 F1 | 	add	objptr, ##54096
08190     F2 1E 02 FB | 	rdlong	local01, objptr
08194     0F 21 02 F6 | 	mov	local02, local01
08198     01 20 66 F0 | 	shl	local02, #1
0819c     0F 21 02 F1 | 	add	local02, local01
081a0     02 20 66 F0 | 	shl	local02, #2
081a4     03 00 00 FF 
081a8     00 E4 85 F1 | 	sub	objptr, ##1536
081ac     F2 20 02 F1 | 	add	local02, objptr
081b0     08 20 06 F1 | 	add	local02, #8
081b4     10 9D 68 FC | 	wrlong	#78, local02
081b8     03 00 00 FF 
081bc     08 E4 05 F1 | 	add	objptr, ##1544
081c0     F2 22 02 FB | 	rdlong	local03, objptr
081c4     69 00 00 FF 
081c8     58 E5 85 F1 | 	sub	objptr, ##54104
081cc     04 4E 05 F1 | 	add	fp, #4
081d0     A7 22 62 FC | 	wrlong	local03, fp
081d4     08 4E 85 F1 | 	sub	fp, #8
081d8                 | ' 
081d8                 | '   gotoline=val%(lparts(ct).part$) 
081d8                 | '   compiledline(lineptr).result_type=token_fast_goto
081d8                 | ' ' now find a pointer to goto
081d8                 | '   gotoptr=programstart
081d8                 | '   do
081d8                 | LR__0660
081d8     10 4E 05 F1 | 	add	fp, #16
081dc     A7 12 02 F6 | 	mov	arg01, fp
081e0     08 4E 85 F1 | 	sub	fp, #8
081e4     A7 14 02 FB | 	rdlong	arg02, fp
081e8     08 4E 85 F1 | 	sub	fp, #8
081ec     18 16 06 F6 | 	mov	arg03, #24
081f0     0B 00 00 FF 
081f4     C0 E4 05 F1 | 	add	objptr, ##5824
081f8     8C 00 B1 FD | 	call	#_psram_spin2_read1
081fc     0B 00 00 FF 
08200     C0 E4 85 F1 | 	sub	objptr, ##5824
08204                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08204                 | '     if gotoheader(0)<>$FFFFFFFF then
08204     10 4E 05 F1 | 	add	fp, #16
08208     A7 22 02 FB | 	rdlong	local03, fp
0820c     10 4E 85 F1 | 	sub	fp, #16
08210     FF FF 7F FF 
08214     FF 23 0E F2 | 	cmp	local03, ##-1 wz
08218     24 00 90 AD |  if_e	jmp	#LR__0661
0821c     08 4E 05 F1 | 	add	fp, #8
08220     A7 22 02 FB | 	rdlong	local03, fp
08224     04 4E 05 F1 | 	add	fp, #4
08228     A7 22 62 FC | 	wrlong	local03, fp
0822c     18 4E 05 F1 | 	add	fp, #24
08230     A7 22 02 FB | 	rdlong	local03, fp
08234     1C 4E 85 F1 | 	sub	fp, #28
08238     A7 22 62 FC | 	wrlong	local03, fp
0823c     08 4E 85 F1 | 	sub	fp, #8
08240                 | LR__0661
08240     24 4E 05 F1 | 	add	fp, #36
08244     A7 22 02 FB | 	rdlong	local03, fp
08248     24 4E 85 F1 | 	sub	fp, #36
0824c     FF FF 3F FF 
08250     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08254     10 4E 05 51 |  if_ne	add	fp, #16
08258     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0825c     10 4E 85 51 |  if_ne	sub	fp, #16
08260     FF FF 7F 5F 
08264     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
08268     1C 00 90 AD |  if_e	jmp	#LR__0662
0826c     10 4E 05 F1 | 	add	fp, #16
08270     A7 22 02 FB | 	rdlong	local03, fp
08274     0C 4E 85 F1 | 	sub	fp, #12
08278     A7 20 02 FB | 	rdlong	local02, fp
0827c     04 4E 85 F1 | 	sub	fp, #4
08280     10 23 0A F2 | 	cmp	local03, local02 wz
08284     50 FF 9F 5D |  if_ne	jmp	#LR__0660
08288                 | LR__0662
08288                 | '   if gotoheader(0)=gotoline then
08288     10 4E 05 F1 | 	add	fp, #16
0828c     A7 22 02 FB | 	rdlong	local03, fp
08290     0C 4E 85 F1 | 	sub	fp, #12
08294     A7 1E 02 FB | 	rdlong	local01, fp
08298     04 4E 85 F1 | 	sub	fp, #4
0829c     0F 23 0A F2 | 	cmp	local03, local01 wz
082a0     7C 00 90 5D |  if_ne	jmp	#LR__0663
082a4     69 00 00 FF 
082a8     50 E5 05 F1 | 	add	objptr, ##54096
082ac     F2 1E 02 FB | 	rdlong	local01, objptr
082b0     0F 21 02 F6 | 	mov	local02, local01
082b4     01 20 66 F0 | 	shl	local02, #1
082b8     0F 21 02 F1 | 	add	local02, local01
082bc     02 20 66 F0 | 	shl	local02, #2
082c0     03 00 00 FF 
082c4     00 E4 85 F1 | 	sub	objptr, ##1536
082c8     F2 20 02 F1 | 	add	local02, objptr
082cc     0C 4E 05 F1 | 	add	fp, #12
082d0     A7 22 02 FB | 	rdlong	local03, fp
082d4     10 23 62 FC | 	wrlong	local03, local02
082d8     03 00 00 FF 
082dc     00 E4 05 F1 | 	add	objptr, ##1536
082e0     F2 1E 02 FB | 	rdlong	local01, objptr
082e4     0F 21 02 F6 | 	mov	local02, local01
082e8     01 20 66 F0 | 	shl	local02, #1
082ec     0F 21 02 F1 | 	add	local02, local01
082f0     02 20 66 F0 | 	shl	local02, #2
082f4     03 00 00 FF 
082f8     00 E4 85 F1 | 	sub	objptr, ##1536
082fc     F2 20 02 F1 | 	add	local02, objptr
08300     08 4E 85 F1 | 	sub	fp, #8
08304     A7 22 02 FB | 	rdlong	local03, fp
08308     04 4E 85 F1 | 	sub	fp, #4
0830c     04 20 06 F1 | 	add	local02, #4
08310     10 23 62 FC | 	wrlong	local03, local02
08314     66 00 00 FF 
08318     50 E5 85 F1 | 	sub	objptr, ##52560
0831c     A4 00 90 FD | 	jmp	#LR__0664
08320                 | LR__0663
08320     69 00 00 FF 
08324     50 E5 05 F1 | 	add	objptr, ##54096
08328     F2 1E 02 FB | 	rdlong	local01, objptr
0832c     0F 21 02 F6 | 	mov	local02, local01
08330     01 20 66 F0 | 	shl	local02, #1
08334     0F 21 02 F1 | 	add	local02, local01
08338     02 20 66 F0 | 	shl	local02, #2
0833c     03 00 00 FF 
08340     00 E4 85 F1 | 	sub	objptr, ##1536
08344     F2 20 02 F1 | 	add	local02, objptr
08348     00 00 C0 FF 
0834c     10 01 68 FC | 	wrlong	##-2147483648, local02
08350     03 00 00 FF 
08354     00 E4 05 F1 | 	add	objptr, ##1536
08358     F2 1E 02 FB | 	rdlong	local01, objptr
0835c     0F 21 02 F6 | 	mov	local02, local01
08360     01 20 66 F0 | 	shl	local02, #1
08364     0F 21 02 F1 | 	add	local02, local01
08368     02 20 66 F0 | 	shl	local02, #2
0836c     03 00 00 FF 
08370     00 E4 85 F1 | 	sub	objptr, ##1536
08374     F2 20 02 F1 | 	add	local02, objptr
08378     04 4E 05 F1 | 	add	fp, #4
0837c     A7 22 02 FB | 	rdlong	local03, fp
08380     04 4E 85 F1 | 	sub	fp, #4
08384     04 20 06 F1 | 	add	local02, #4
08388     10 23 62 FC | 	wrlong	local03, local02
0838c     03 00 00 FF 
08390     00 E4 05 F1 | 	add	objptr, ##1536
08394     F2 1E 02 FB | 	rdlong	local01, objptr
08398     0F 21 02 F6 | 	mov	local02, local01
0839c     01 20 66 F0 | 	shl	local02, #1
083a0     0F 21 02 F1 | 	add	local02, local01
083a4     02 20 66 F0 | 	shl	local02, #2
083a8     03 00 00 FF 
083ac     00 E4 85 F1 | 	sub	objptr, ##1536
083b0     F2 20 02 F1 | 	add	local02, objptr
083b4     08 20 06 F1 | 	add	local02, #8
083b8     10 A7 68 FC | 	wrlong	#83, local02
083bc     66 00 00 FF 
083c0     50 E5 85 F1 | 	sub	objptr, ##52560
083c4                 | LR__0664
083c4     69 00 00 FF 
083c8     50 E5 05 F1 | 	add	objptr, ##54096
083cc     F2 22 02 FB | 	rdlong	local03, objptr
083d0     01 22 06 F1 | 	add	local03, #1
083d4     F2 22 62 FC | 	wrlong	local03, objptr
083d8     69 00 00 FF 
083dc     50 E5 85 F1 | 	sub	objptr, ##54096
083e0     40 00 90 FD | 	jmp	#LR__0666
083e4                 | LR__0665
083e4                 | '    print "We have a slow goto, todo  "
083e4     00 12 06 F6 | 	mov	arg01, #0
083e8     F0 62 B1 FD | 	call	#__system___getiolock_0423
083ec     FD 12 02 F6 | 	mov	arg01, result1
083f0     E4 09 B1 FD | 	call	#__system___lockmem
083f4     43 01 00 FF 
083f8     BD 15 06 F6 | 	mov	arg02, ##@LR__4556
083fc     00 12 06 F6 | 	mov	arg01, #0
08400     00 16 06 F6 | 	mov	arg03, #0
08404     C4 16 B1 FD | 	call	#__system___basic_print_string
08408     00 12 06 F6 | 	mov	arg01, #0
0840c     0A 14 06 F6 | 	mov	arg02, #10
08410     00 16 06 F6 | 	mov	arg03, #0
08414     5C 16 B1 FD | 	call	#__system___basic_print_char
08418     00 12 06 F6 | 	mov	arg01, #0
0841c     BC 62 B1 FD | 	call	#__system___getiolock_0423
08420     FD 00 68 FC | 	wrlong	#0, result1
08424                 | LR__0666
08424                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
08424                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
08424                 | ' return 0
08424     00 FA 05 F6 | 	mov	result1, #0
08428     A7 F0 03 F6 | 	mov	ptra, fp
0842c     B2 00 A0 FD | 	call	#popregs_
08430                 | _compile_goto_ret
08430     2D 00 64 FD | 	ret
08434                 | 
08434                 | ' 
08434                 | ' 
08434                 | ' 
08434                 | ' 
08434                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08434                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
08434                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08434                 | ' 
08434                 | ' 
08434                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08434                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
08434                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08434                 | ' 
08434                 | ' 
08434                 | ' function expr() as integer 
08434                 | _expr
08434     07 4A 05 F6 | 	mov	COUNT_, #7
08438     A8 00 A0 FD | 	call	#pushregs_
0843c                 | _expr_enter
0843c     56 00 00 FF 
08440     18 E5 05 F1 | 	add	objptr, ##44312
08444     F2 24 02 FB | 	rdlong	local04, objptr
08448     03 24 66 F0 | 	shl	local04, #3
0844c     02 00 00 FF 
08450     38 E4 85 F1 | 	sub	objptr, ##1080
08454     F2 24 02 F1 | 	add	local04, objptr
08458     04 24 06 F1 | 	add	local04, #4
0845c     12 27 02 FB | 	rdlong	local05, local04
08460                 | ' 
08460                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
08460     FE 27 0E F2 | 	cmp	local05, #510 wz
08464     54 00 00 FF 
08468     E0 E4 85 F1 | 	sub	objptr, ##43232
0846c     C4 00 90 5D |  if_ne	jmp	#LR__0670
08470     1D 1E 06 F6 | 	mov	local01, #29
08474     FF 22 06 F6 | 	mov	local03, #255
08478     0F 29 02 F6 | 	mov	local06, local01
0847c     10 2B 02 F6 | 	mov	local07, local02
08480     11 1F 02 F6 | 	mov	local01, local03
08484     69 00 00 FF 
08488     50 E5 05 F1 | 	add	objptr, ##54096
0848c     F2 26 02 FB | 	rdlong	local05, objptr
08490     13 25 02 F6 | 	mov	local04, local05
08494     01 24 66 F0 | 	shl	local04, #1
08498     13 25 02 F1 | 	add	local04, local05
0849c     02 24 66 F0 | 	shl	local04, #2
084a0     03 00 00 FF 
084a4     00 E4 85 F1 | 	sub	objptr, ##1536
084a8     F2 24 02 F1 | 	add	local04, objptr
084ac     12 29 62 FC | 	wrlong	local06, local04
084b0     03 00 00 FF 
084b4     00 E4 05 F1 | 	add	objptr, ##1536
084b8     F2 28 02 FB | 	rdlong	local06, objptr
084bc     14 27 02 F6 | 	mov	local05, local06
084c0     01 26 66 F0 | 	shl	local05, #1
084c4     14 27 02 F1 | 	add	local05, local06
084c8     02 26 66 F0 | 	shl	local05, #2
084cc     03 00 00 FF 
084d0     00 E4 85 F1 | 	sub	objptr, ##1536
084d4     F2 26 02 F1 | 	add	local05, objptr
084d8     04 26 06 F1 | 	add	local05, #4
084dc     13 2B 62 FC | 	wrlong	local07, local05
084e0     03 00 00 FF 
084e4     00 E4 05 F1 | 	add	objptr, ##1536
084e8     F2 2A 02 FB | 	rdlong	local07, objptr
084ec     15 29 02 F6 | 	mov	local06, local07
084f0     01 28 66 F0 | 	shl	local06, #1
084f4     15 29 02 F1 | 	add	local06, local07
084f8     02 28 66 F0 | 	shl	local06, #2
084fc     03 00 00 FF 
08500     00 E4 85 F1 | 	sub	objptr, ##1536
08504     F2 28 02 F1 | 	add	local06, objptr
08508     08 28 06 F1 | 	add	local06, #8
0850c     14 1F 62 FC | 	wrlong	local01, local06
08510     03 00 00 FF 
08514     00 E4 05 F1 | 	add	objptr, ##1536
08518     F2 28 02 FB | 	rdlong	local06, objptr
0851c     01 28 06 F1 | 	add	local06, #1
08520     F2 28 62 FC | 	wrlong	local06, objptr
08524     69 00 00 FF 
08528     50 E5 85 F1 | 	sub	objptr, ##54096
0852c     1D FA 05 F6 | 	mov	result1, #29
08530     54 01 90 FD | 	jmp	#LR__0673
08534                 | LR__0670
08534     00 1E 06 F6 | 	mov	local01, #0
08538     58 01 B0 FD | 	call	#_addsub
0853c     56 00 00 FF 
08540     18 E5 05 F1 | 	add	objptr, ##44312
08544     F2 24 02 FB | 	rdlong	local04, objptr
08548     03 24 66 F0 | 	shl	local04, #3
0854c     02 00 00 FF 
08550     38 E4 85 F1 | 	sub	objptr, ##1080
08554     F2 24 02 F1 | 	add	local04, objptr
08558     04 24 06 F1 | 	add	local04, #4
0855c     12 27 02 FB | 	rdlong	local05, local04
08560                 | ' t3.result.uresult=0
08560                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08560                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08560                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
08560     54 00 00 FF 
08564     E0 E4 85 F1 | 	sub	objptr, ##43232
08568                 | LR__0671
08568     1B 26 0E F2 | 	cmp	local05, #27 wz
0856c     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
08570     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
08574     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
08578     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
0857c     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
08580     00 01 90 5D |  if_ne	jmp	#LR__0672
08584     56 00 00 FF 
08588     18 E5 05 F1 | 	add	objptr, ##44312
0858c     F2 28 02 FB | 	rdlong	local06, objptr
08590     01 28 06 F1 | 	add	local06, #1
08594     F2 28 62 FC | 	wrlong	local06, objptr
08598     56 00 00 FF 
0859c     18 E5 85 F1 | 	sub	objptr, ##44312
085a0     F0 00 B0 FD | 	call	#_addsub
085a4     13 23 02 F6 | 	mov	local03, local05
085a8     0F 29 02 F6 | 	mov	local06, local01
085ac     10 2B 02 F6 | 	mov	local07, local02
085b0     11 27 02 F6 | 	mov	local05, local03
085b4     69 00 00 FF 
085b8     50 E5 05 F1 | 	add	objptr, ##54096
085bc     F2 24 02 FB | 	rdlong	local04, objptr
085c0     12 FB 01 F6 | 	mov	result1, local04
085c4     01 FA 65 F0 | 	shl	result1, #1
085c8     12 FB 01 F1 | 	add	result1, local04
085cc     02 FA 65 F0 | 	shl	result1, #2
085d0     03 00 00 FF 
085d4     00 E4 85 F1 | 	sub	objptr, ##1536
085d8     F2 FA 01 F1 | 	add	result1, objptr
085dc     FD 28 62 FC | 	wrlong	local06, result1
085e0     03 00 00 FF 
085e4     00 E4 05 F1 | 	add	objptr, ##1536
085e8     F2 28 02 FB | 	rdlong	local06, objptr
085ec     14 25 02 F6 | 	mov	local04, local06
085f0     01 24 66 F0 | 	shl	local04, #1
085f4     14 25 02 F1 | 	add	local04, local06
085f8     02 24 66 F0 | 	shl	local04, #2
085fc     03 00 00 FF 
08600     00 E4 85 F1 | 	sub	objptr, ##1536
08604     F2 24 02 F1 | 	add	local04, objptr
08608     04 24 06 F1 | 	add	local04, #4
0860c     12 2B 62 FC | 	wrlong	local07, local04
08610     03 00 00 FF 
08614     00 E4 05 F1 | 	add	objptr, ##1536
08618     F2 2A 02 FB | 	rdlong	local07, objptr
0861c     15 29 02 F6 | 	mov	local06, local07
08620     01 28 66 F0 | 	shl	local06, #1
08624     15 29 02 F1 | 	add	local06, local07
08628     02 28 66 F0 | 	shl	local06, #2
0862c     03 00 00 FF 
08630     00 E4 85 F1 | 	sub	objptr, ##1536
08634     F2 28 02 F1 | 	add	local06, objptr
08638     08 28 06 F1 | 	add	local06, #8
0863c     14 27 62 FC | 	wrlong	local05, local06
08640     03 00 00 FF 
08644     00 E4 05 F1 | 	add	objptr, ##1536
08648     F2 28 02 FB | 	rdlong	local06, objptr
0864c     01 28 06 F1 | 	add	local06, #1
08650     F2 28 62 FC | 	wrlong	local06, objptr
08654     13 00 00 FF 
08658     38 E4 85 F1 | 	sub	objptr, ##9784
0865c     F2 24 02 FB | 	rdlong	local04, objptr
08660     03 24 66 F0 | 	shl	local04, #3
08664     02 00 00 FF 
08668     38 E4 85 F1 | 	sub	objptr, ##1080
0866c     F2 24 02 F1 | 	add	local04, objptr
08670     04 24 06 F1 | 	add	local04, #4
08674     12 27 02 FB | 	rdlong	local05, local04
08678     54 00 00 FF 
0867c     E0 E4 85 F1 | 	sub	objptr, ##43232
08680     E4 FE 9F FD | 	jmp	#LR__0671
08684                 | LR__0672
08684                 | ' return 0  
08684     00 FA 05 F6 | 	mov	result1, #0
08688                 | LR__0673
08688     A7 F0 03 F6 | 	mov	ptra, fp
0868c     B2 00 A0 FD | 	call	#popregs_
08690                 | _expr_ret
08690     2D 00 64 FD | 	ret
08694                 | 
08694                 | ' 
08694                 | ' 
08694                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
08694                 | ' 
08694                 | ' function addsub() as integer 
08694                 | _addsub
08694     07 4A 05 F6 | 	mov	COUNT_, #7
08698     A8 00 A0 FD | 	call	#pushregs_
0869c                 | _addsub_enter
0869c     00 1E 06 F6 | 	mov	local01, #0
086a0     50 01 B0 FD | 	call	#_muldiv
086a4     56 00 00 FF 
086a8     18 E5 05 F1 | 	add	objptr, ##44312
086ac     F2 24 02 FB | 	rdlong	local04, objptr
086b0     03 24 66 F0 | 	shl	local04, #3
086b4     02 00 00 FF 
086b8     38 E4 85 F1 | 	sub	objptr, ##1080
086bc     F2 24 02 F1 | 	add	local04, objptr
086c0     04 24 06 F1 | 	add	local04, #4
086c4     12 27 02 FB | 	rdlong	local05, local04
086c8                 | ' t3.result.uresult=0
086c8                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
086c8                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
086c8                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
086c8     54 00 00 FF 
086cc     E0 E4 85 F1 | 	sub	objptr, ##43232
086d0                 | LR__0680
086d0     01 26 0E F2 | 	cmp	local05, #1 wz
086d4     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
086d8     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
086dc     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
086e0     00 01 90 5D |  if_ne	jmp	#LR__0681
086e4     56 00 00 FF 
086e8     18 E5 05 F1 | 	add	objptr, ##44312
086ec     F2 24 02 FB | 	rdlong	local04, objptr
086f0     01 24 06 F1 | 	add	local04, #1
086f4     F2 24 62 FC | 	wrlong	local04, objptr
086f8     56 00 00 FF 
086fc     18 E5 85 F1 | 	sub	objptr, ##44312
08700     F0 00 B0 FD | 	call	#_muldiv
08704     13 23 02 F6 | 	mov	local03, local05
08708     0F 29 02 F6 | 	mov	local06, local01
0870c     10 2B 02 F6 | 	mov	local07, local02
08710     11 27 02 F6 | 	mov	local05, local03
08714     69 00 00 FF 
08718     50 E5 05 F1 | 	add	objptr, ##54096
0871c     F2 24 02 FB | 	rdlong	local04, objptr
08720     12 FB 01 F6 | 	mov	result1, local04
08724     01 FA 65 F0 | 	shl	result1, #1
08728     12 FB 01 F1 | 	add	result1, local04
0872c     02 FA 65 F0 | 	shl	result1, #2
08730     03 00 00 FF 
08734     00 E4 85 F1 | 	sub	objptr, ##1536
08738     F2 FA 01 F1 | 	add	result1, objptr
0873c     FD 28 62 FC | 	wrlong	local06, result1
08740     03 00 00 FF 
08744     00 E4 05 F1 | 	add	objptr, ##1536
08748     F2 28 02 FB | 	rdlong	local06, objptr
0874c     14 25 02 F6 | 	mov	local04, local06
08750     01 24 66 F0 | 	shl	local04, #1
08754     14 25 02 F1 | 	add	local04, local06
08758     02 24 66 F0 | 	shl	local04, #2
0875c     03 00 00 FF 
08760     00 E4 85 F1 | 	sub	objptr, ##1536
08764     F2 24 02 F1 | 	add	local04, objptr
08768     04 24 06 F1 | 	add	local04, #4
0876c     12 2B 62 FC | 	wrlong	local07, local04
08770     03 00 00 FF 
08774     00 E4 05 F1 | 	add	objptr, ##1536
08778     F2 2A 02 FB | 	rdlong	local07, objptr
0877c     15 29 02 F6 | 	mov	local06, local07
08780     01 28 66 F0 | 	shl	local06, #1
08784     15 29 02 F1 | 	add	local06, local07
08788     02 28 66 F0 | 	shl	local06, #2
0878c     03 00 00 FF 
08790     00 E4 85 F1 | 	sub	objptr, ##1536
08794     F2 28 02 F1 | 	add	local06, objptr
08798     08 28 06 F1 | 	add	local06, #8
0879c     14 27 62 FC | 	wrlong	local05, local06
087a0     03 00 00 FF 
087a4     00 E4 05 F1 | 	add	objptr, ##1536
087a8     F2 28 02 FB | 	rdlong	local06, objptr
087ac     01 28 06 F1 | 	add	local06, #1
087b0     F2 28 62 FC | 	wrlong	local06, objptr
087b4     13 00 00 FF 
087b8     38 E4 85 F1 | 	sub	objptr, ##9784
087bc     F2 24 02 FB | 	rdlong	local04, objptr
087c0     03 24 66 F0 | 	shl	local04, #3
087c4     02 00 00 FF 
087c8     38 E4 85 F1 | 	sub	objptr, ##1080
087cc     F2 24 02 F1 | 	add	local04, objptr
087d0     04 24 06 F1 | 	add	local04, #4
087d4     12 27 02 FB | 	rdlong	local05, local04
087d8     54 00 00 FF 
087dc     E0 E4 85 F1 | 	sub	objptr, ##43232
087e0     EC FE 9F FD | 	jmp	#LR__0680
087e4                 | LR__0681
087e4                 | '   return 0
087e4     00 FA 05 F6 | 	mov	result1, #0
087e8     A7 F0 03 F6 | 	mov	ptra, fp
087ec     B2 00 A0 FD | 	call	#popregs_
087f0                 | _addsub_ret
087f0     2D 00 64 FD | 	ret
087f4                 | 
087f4                 | ' 
087f4                 | ' sub muldiv()
087f4                 | _muldiv
087f4     08 4A 05 F6 | 	mov	COUNT_, #8
087f8     A8 00 A0 FD | 	call	#pushregs_
087fc                 | _muldiv_enter
087fc     00 1E 06 F6 | 	mov	local01, #0
08800     58 01 B0 FD | 	call	#_getvalue
08804     56 00 00 FF 
08808     18 E5 05 F1 | 	add	objptr, ##44312
0880c     F2 24 02 FB | 	rdlong	local04, objptr
08810     03 24 66 F0 | 	shl	local04, #3
08814     02 00 00 FF 
08818     38 E4 85 F1 | 	sub	objptr, ##1080
0881c     F2 24 02 F1 | 	add	local04, objptr
08820     04 24 06 F1 | 	add	local04, #4
08824     12 27 02 FB | 	rdlong	local05, local04
08828                 | ' t3.result.uresult=0
08828                 | ' getvalue()    
08828                 | ' op = lparts(ct).token
08828                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
08828     54 00 00 FF 
0882c     E0 E4 85 F1 | 	sub	objptr, ##43232
08830                 | LR__0690
08830     05 26 0E F2 | 	cmp	local05, #5 wz
08834     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
08838     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
0883c     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
08840     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
08844     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
08848     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
0884c     00 01 90 5D |  if_ne	jmp	#LR__0691
08850     56 00 00 FF 
08854     18 E5 05 F1 | 	add	objptr, ##44312
08858     F2 24 02 FB | 	rdlong	local04, objptr
0885c     01 24 06 F1 | 	add	local04, #1
08860     F2 24 62 FC | 	wrlong	local04, objptr
08864     56 00 00 FF 
08868     18 E5 85 F1 | 	sub	objptr, ##44312
0886c     EC 00 B0 FD | 	call	#_getvalue
08870     13 23 02 F6 | 	mov	local03, local05
08874     0F 29 02 F6 | 	mov	local06, local01
08878     10 2B 02 F6 | 	mov	local07, local02
0887c     11 27 02 F6 | 	mov	local05, local03
08880     69 00 00 FF 
08884     50 E5 05 F1 | 	add	objptr, ##54096
08888     F2 24 02 FB | 	rdlong	local04, objptr
0888c     12 2D 02 F6 | 	mov	local08, local04
08890     01 2C 66 F0 | 	shl	local08, #1
08894     12 2D 02 F1 | 	add	local08, local04
08898     02 2C 66 F0 | 	shl	local08, #2
0889c     03 00 00 FF 
088a0     00 E4 85 F1 | 	sub	objptr, ##1536
088a4     F2 2C 02 F1 | 	add	local08, objptr
088a8     16 29 62 FC | 	wrlong	local06, local08
088ac     03 00 00 FF 
088b0     00 E4 05 F1 | 	add	objptr, ##1536
088b4     F2 2C 02 FB | 	rdlong	local08, objptr
088b8     16 29 02 F6 | 	mov	local06, local08
088bc     01 28 66 F0 | 	shl	local06, #1
088c0     16 29 02 F1 | 	add	local06, local08
088c4     02 28 66 F0 | 	shl	local06, #2
088c8     03 00 00 FF 
088cc     00 E4 85 F1 | 	sub	objptr, ##1536
088d0     F2 28 02 F1 | 	add	local06, objptr
088d4     04 28 06 F1 | 	add	local06, #4
088d8     14 2B 62 FC | 	wrlong	local07, local06
088dc     03 00 00 FF 
088e0     00 E4 05 F1 | 	add	objptr, ##1536
088e4     F2 2C 02 FB | 	rdlong	local08, objptr
088e8     16 2B 02 F6 | 	mov	local07, local08
088ec     01 2A 66 F0 | 	shl	local07, #1
088f0     16 2B 02 F1 | 	add	local07, local08
088f4     02 2A 66 F0 | 	shl	local07, #2
088f8     03 00 00 FF 
088fc     00 E4 85 F1 | 	sub	objptr, ##1536
08900     F2 2A 02 F1 | 	add	local07, objptr
08904     08 2A 06 F1 | 	add	local07, #8
08908     15 27 62 FC | 	wrlong	local05, local07
0890c     03 00 00 FF 
08910     00 E4 05 F1 | 	add	objptr, ##1536
08914     F2 28 02 FB | 	rdlong	local06, objptr
08918     01 28 06 F1 | 	add	local06, #1
0891c     F2 28 62 FC | 	wrlong	local06, objptr
08920     13 00 00 FF 
08924     38 E4 85 F1 | 	sub	objptr, ##9784
08928     F2 24 02 FB | 	rdlong	local04, objptr
0892c     03 24 66 F0 | 	shl	local04, #3
08930     02 00 00 FF 
08934     38 E4 85 F1 | 	sub	objptr, ##1080
08938     F2 24 02 F1 | 	add	local04, objptr
0893c     04 24 06 F1 | 	add	local04, #4
08940     12 27 02 FB | 	rdlong	local05, local04
08944     54 00 00 FF 
08948     E0 E4 85 F1 | 	sub	objptr, ##43232
0894c     E0 FE 9F FD | 	jmp	#LR__0690
08950                 | LR__0691
08950     A7 F0 03 F6 | 	mov	ptra, fp
08954     B2 00 A0 FD | 	call	#popregs_
08958                 | _muldiv_ret
08958     2D 00 64 FD | 	ret
0895c                 | 
0895c                 | ' 
0895c                 | ' sub getvalue() 
0895c                 | _getvalue
0895c     0B 4A 05 F6 | 	mov	COUNT_, #11
08960     A8 00 A0 FD | 	call	#pushregs_
08964                 | _getvalue_enter
08964     01 24 06 F6 | 	mov	local04, #1
08968     00 1E 06 F6 | 	mov	local01, #0
0896c     1D 22 06 F6 | 	mov	local03, #29
08970     56 00 00 FF 
08974     18 E5 05 F1 | 	add	objptr, ##44312
08978     F2 16 02 FB | 	rdlong	arg03, objptr
0897c     03 16 66 F0 | 	shl	arg03, #3
08980     02 00 00 FF 
08984     38 E4 85 F1 | 	sub	objptr, ##1080
08988     F2 16 02 F1 | 	add	arg03, objptr
0898c     04 16 06 F1 | 	add	arg03, #4
08990     0B 27 02 FB | 	rdlong	local05, arg03
08994                 | ' m=1
08994                 | ' t1.result.uresult=0: t1.result_type=result_uint
08994                 | ' op=lparts(ct).token
08994                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
08994     02 26 0E F2 | 	cmp	local05, #2 wz
08998     54 00 00 FF 
0899c     E0 E4 85 F1 | 	sub	objptr, ##43232
089a0     38 00 90 5D |  if_ne	jmp	#LR__0700
089a4     01 24 66 F6 | 	neg	local04, #1
089a8     56 00 00 FF 
089ac     18 E5 05 F1 | 	add	objptr, ##44312
089b0     F2 26 02 FB | 	rdlong	local05, objptr
089b4     01 26 06 F1 | 	add	local05, #1
089b8     F2 26 62 FC | 	wrlong	local05, objptr
089bc     03 26 66 F0 | 	shl	local05, #3
089c0     02 00 00 FF 
089c4     38 E4 85 F1 | 	sub	objptr, ##1080
089c8     F2 26 02 F1 | 	add	local05, objptr
089cc     04 26 06 F1 | 	add	local05, #4
089d0     13 27 02 FB | 	rdlong	local05, local05
089d4     54 00 00 FF 
089d8     E0 E4 85 F1 | 	sub	objptr, ##43232
089dc                 | LR__0700
089dc                 | ' select case op
089dc     01 00 00 FF 
089e0     00 26 0E F2 | 	cmp	local05, ##512 wz
089e4     3C 00 90 AD |  if_e	jmp	#LR__0701
089e8     01 00 00 FF 
089ec     01 26 0E F2 | 	cmp	local05, ##513 wz
089f0     88 01 90 AD |  if_e	jmp	#LR__0704
089f4     01 00 00 FF 
089f8     02 26 0E F2 | 	cmp	local05, ##514 wz
089fc     84 02 90 AD |  if_e	jmp	#LR__0705
08a00     01 00 00 FF 
08a04     03 26 0E F2 | 	cmp	local05, ##515 wz
08a08     E8 03 90 AD |  if_e	jmp	#LR__0708
08a0c     01 00 00 FF 
08a10     04 26 0E F2 | 	cmp	local05, ##516 wz
08a14     E0 05 90 AD |  if_e	jmp	#LR__0713
08a18     15 26 0E F2 | 	cmp	local05, #21 wz
08a1c     00 06 90 AD |  if_e	jmp	#LR__0714
08a20     70 06 90 FD | 	jmp	#LR__0715
08a24                 | LR__0701
08a24                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
08a24     01 24 0E F2 | 	cmp	local04, #1 wz
08a28     3C 00 90 5D |  if_ne	jmp	#LR__0702
08a2c     56 00 00 FF 
08a30     18 E5 05 F1 | 	add	objptr, ##44312
08a34     F2 26 02 FB | 	rdlong	local05, objptr
08a38     03 26 66 F0 | 	shl	local05, #3
08a3c     02 00 00 FF 
08a40     38 E4 85 F1 | 	sub	objptr, ##1080
08a44     F2 26 02 F1 | 	add	local05, objptr
08a48     13 13 02 FB | 	rdlong	arg01, local05
08a4c     00 14 06 F6 | 	mov	arg02, #0
08a50     54 00 00 FF 
08a54     E0 E4 85 F1 | 	sub	objptr, ##43232
08a58     E0 34 B1 FD | 	call	#__system____builtin_atoi
08a5c     FD 24 02 FD | 	qmul	local04, result1
08a60     18 1E 62 FD | 	getqx	local01
08a64     1C 22 06 F6 | 	mov	local03, #28
08a68                 | LR__0702
08a68                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
08a68     FF FF 7F FF 
08a6c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08a70     3C 00 90 5D |  if_ne	jmp	#LR__0703
08a74     56 00 00 FF 
08a78     18 E5 05 F1 | 	add	objptr, ##44312
08a7c     F2 26 02 FB | 	rdlong	local05, objptr
08a80     03 26 66 F0 | 	shl	local05, #3
08a84     02 00 00 FF 
08a88     38 E4 85 F1 | 	sub	objptr, ##1080
08a8c     F2 26 02 F1 | 	add	local05, objptr
08a90     13 13 02 FB | 	rdlong	arg01, local05
08a94     00 14 06 F6 | 	mov	arg02, #0
08a98     54 00 00 FF 
08a9c     E0 E4 85 F1 | 	sub	objptr, ##43232
08aa0     98 34 B1 FD | 	call	#__system____builtin_atoi
08aa4     FD 24 02 FD | 	qmul	local04, result1
08aa8     18 1E 62 FD | 	getqx	local01
08aac     1C 22 06 F6 | 	mov	local03, #28
08ab0                 | LR__0703
08ab0     0F 29 02 F6 | 	mov	local06, local01
08ab4     10 2B 02 F6 | 	mov	local07, local02
08ab8     11 27 02 F6 | 	mov	local05, local03
08abc     69 00 00 FF 
08ac0     50 E5 05 F1 | 	add	objptr, ##54096
08ac4     F2 1E 02 FB | 	rdlong	local01, objptr
08ac8     0F 25 02 F6 | 	mov	local04, local01
08acc     01 24 66 F0 | 	shl	local04, #1
08ad0     0F 25 02 F1 | 	add	local04, local01
08ad4     02 24 66 F0 | 	shl	local04, #2
08ad8     03 00 00 FF 
08adc     00 E4 85 F1 | 	sub	objptr, ##1536
08ae0     F2 24 02 F1 | 	add	local04, objptr
08ae4     12 29 62 FC | 	wrlong	local06, local04
08ae8     03 00 00 FF 
08aec     00 E4 05 F1 | 	add	objptr, ##1536
08af0     F2 28 02 FB | 	rdlong	local06, objptr
08af4     14 1F 02 F6 | 	mov	local01, local06
08af8     01 1E 66 F0 | 	shl	local01, #1
08afc     14 1F 02 F1 | 	add	local01, local06
08b00     02 1E 66 F0 | 	shl	local01, #2
08b04     03 00 00 FF 
08b08     00 E4 85 F1 | 	sub	objptr, ##1536
08b0c     F2 1E 02 F1 | 	add	local01, objptr
08b10     04 1E 06 F1 | 	add	local01, #4
08b14     0F 2B 62 FC | 	wrlong	local07, local01
08b18     03 00 00 FF 
08b1c     00 E4 05 F1 | 	add	objptr, ##1536
08b20     F2 2A 02 FB | 	rdlong	local07, objptr
08b24     15 29 02 F6 | 	mov	local06, local07
08b28     01 28 66 F0 | 	shl	local06, #1
08b2c     15 29 02 F1 | 	add	local06, local07
08b30     02 28 66 F0 | 	shl	local06, #2
08b34     03 00 00 FF 
08b38     00 E4 85 F1 | 	sub	objptr, ##1536
08b3c     F2 28 02 F1 | 	add	local06, objptr
08b40     08 28 06 F1 | 	add	local06, #8
08b44     14 27 62 FC | 	wrlong	local05, local06
08b48     03 00 00 FF 
08b4c     00 E4 05 F1 | 	add	objptr, ##1536
08b50     F2 28 02 FB | 	rdlong	local06, objptr
08b54     01 28 06 F1 | 	add	local06, #1
08b58     F2 28 62 FC | 	wrlong	local06, objptr
08b5c     13 00 00 FF 
08b60     38 E4 85 F1 | 	sub	objptr, ##9784
08b64     F2 28 02 FB | 	rdlong	local06, objptr
08b68     01 28 06 F1 | 	add	local06, #1
08b6c     F2 28 62 FC | 	wrlong	local06, objptr
08b70     56 00 00 FF 
08b74     18 E5 85 F1 | 	sub	objptr, ##44312
08b78     3C 05 90 FD | 	jmp	#LR__0716
08b7c                 | LR__0704
08b7c     56 00 00 FF 
08b80     18 E5 05 F1 | 	add	objptr, ##44312
08b84     F2 28 02 FB | 	rdlong	local06, objptr
08b88     03 28 66 F0 | 	shl	local06, #3
08b8c     02 00 00 FF 
08b90     38 E4 85 F1 | 	sub	objptr, ##1080
08b94     F2 28 02 F1 | 	add	local06, objptr
08b98     14 13 02 FB | 	rdlong	arg01, local06
08b9c     00 14 06 F6 | 	mov	arg02, #0
08ba0     54 00 00 FF 
08ba4     E0 E4 85 F1 | 	sub	objptr, ##43232
08ba8     90 33 B1 FD | 	call	#__system____builtin_atoi
08bac     FD 24 02 FD | 	qmul	local04, result1
08bb0     69 00 00 FF 
08bb4     50 E5 05 F1 | 	add	objptr, ##54096
08bb8     F2 28 02 FB | 	rdlong	local06, objptr
08bbc     14 2D 02 F6 | 	mov	local08, local06
08bc0     01 2C 66 F0 | 	shl	local08, #1
08bc4     14 2D 02 F1 | 	add	local08, local06
08bc8     02 2C 66 F0 | 	shl	local08, #2
08bcc     03 00 00 FF 
08bd0     00 E4 85 F1 | 	sub	objptr, ##1536
08bd4     F2 2C 02 F1 | 	add	local08, objptr
08bd8     03 00 00 FF 
08bdc     00 E4 05 F1 | 	add	objptr, ##1536
08be0     18 1E 62 FD | 	getqx	local01
08be4     1C 22 06 F6 | 	mov	local03, #28
08be8     0F 29 02 F6 | 	mov	local06, local01
08bec     10 2B 02 F6 | 	mov	local07, local02
08bf0     16 29 62 FC | 	wrlong	local06, local08
08bf4     11 2D 02 F6 | 	mov	local08, local03
08bf8     F2 28 02 FB | 	rdlong	local06, objptr
08bfc     14 27 02 F6 | 	mov	local05, local06
08c00     01 26 66 F0 | 	shl	local05, #1
08c04     14 27 02 F1 | 	add	local05, local06
08c08     02 26 66 F0 | 	shl	local05, #2
08c0c     03 00 00 FF 
08c10     00 E4 85 F1 | 	sub	objptr, ##1536
08c14     F2 26 02 F1 | 	add	local05, objptr
08c18     04 26 06 F1 | 	add	local05, #4
08c1c     13 2B 62 FC | 	wrlong	local07, local05
08c20     03 00 00 FF 
08c24     00 E4 05 F1 | 	add	objptr, ##1536
08c28     F2 2A 02 FB | 	rdlong	local07, objptr
08c2c     15 29 02 F6 | 	mov	local06, local07
08c30     01 28 66 F0 | 	shl	local06, #1
08c34     15 29 02 F1 | 	add	local06, local07
08c38     02 28 66 F0 | 	shl	local06, #2
08c3c     03 00 00 FF 
08c40     00 E4 85 F1 | 	sub	objptr, ##1536
08c44     F2 28 02 F1 | 	add	local06, objptr
08c48     08 28 06 F1 | 	add	local06, #8
08c4c     14 2D 62 FC | 	wrlong	local08, local06
08c50     03 00 00 FF 
08c54     00 E4 05 F1 | 	add	objptr, ##1536
08c58     F2 28 02 FB | 	rdlong	local06, objptr
08c5c     01 28 06 F1 | 	add	local06, #1
08c60     F2 28 62 FC | 	wrlong	local06, objptr
08c64     13 00 00 FF 
08c68     38 E4 85 F1 | 	sub	objptr, ##9784
08c6c     F2 28 02 FB | 	rdlong	local06, objptr
08c70     01 28 06 F1 | 	add	local06, #1
08c74     F2 28 62 FC | 	wrlong	local06, objptr
08c78     56 00 00 FF 
08c7c     18 E5 85 F1 | 	sub	objptr, ##44312
08c80     34 04 90 FD | 	jmp	#LR__0716
08c84                 | LR__0705
08c84                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
08c84     01 24 0E F2 | 	cmp	local04, #1 wz
08c88     48 00 90 5D |  if_ne	jmp	#LR__0706
08c8c     00 C0 1F FF 
08c90     00 28 06 F6 | 	mov	local06, ##1065353216
08c94     56 00 00 FF 
08c98     18 E5 05 F1 | 	add	objptr, ##44312
08c9c     F2 2C 02 FB | 	rdlong	local08, objptr
08ca0     03 2C 66 F0 | 	shl	local08, #3
08ca4     02 00 00 FF 
08ca8     38 E4 85 F1 | 	sub	objptr, ##1080
08cac     F2 2C 02 F1 | 	add	local08, objptr
08cb0     16 13 02 FB | 	rdlong	arg01, local08
08cb4     54 00 00 FF 
08cb8     E0 E4 85 F1 | 	sub	objptr, ##43232
08cbc     EC 33 B1 FD | 	call	#__system____builtin_atof
08cc0     FD 14 02 F6 | 	mov	arg02, result1
08cc4     14 13 02 F6 | 	mov	arg01, local06
08cc8     F8 2B B1 FD | 	call	#__system___float_mul
08ccc     FD 1E 02 F6 | 	mov	local01, result1
08cd0     1E 22 06 F6 | 	mov	local03, #30
08cd4                 | LR__0706
08cd4                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
08cd4     FF FF 7F FF 
08cd8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08cdc     48 00 90 5D |  if_ne	jmp	#LR__0707
08ce0     00 C0 5F FF 
08ce4     00 28 06 F6 | 	mov	local06, ##-1082130432
08ce8     56 00 00 FF 
08cec     18 E5 05 F1 | 	add	objptr, ##44312
08cf0     F2 2C 02 FB | 	rdlong	local08, objptr
08cf4     03 2C 66 F0 | 	shl	local08, #3
08cf8     02 00 00 FF 
08cfc     38 E4 85 F1 | 	sub	objptr, ##1080
08d00     F2 2C 02 F1 | 	add	local08, objptr
08d04     16 13 02 FB | 	rdlong	arg01, local08
08d08     54 00 00 FF 
08d0c     E0 E4 85 F1 | 	sub	objptr, ##43232
08d10     98 33 B1 FD | 	call	#__system____builtin_atof
08d14     FD 14 02 F6 | 	mov	arg02, result1
08d18     14 13 02 F6 | 	mov	arg01, local06
08d1c     A4 2B B1 FD | 	call	#__system___float_mul
08d20     FD 1E 02 F6 | 	mov	local01, result1
08d24     1E 22 06 F6 | 	mov	local03, #30
08d28                 | LR__0707
08d28     0F 29 02 F6 | 	mov	local06, local01
08d2c     10 2B 02 F6 | 	mov	local07, local02
08d30     11 27 02 F6 | 	mov	local05, local03
08d34     69 00 00 FF 
08d38     50 E5 05 F1 | 	add	objptr, ##54096
08d3c     F2 1E 02 FB | 	rdlong	local01, objptr
08d40     0F 2D 02 F6 | 	mov	local08, local01
08d44     01 2C 66 F0 | 	shl	local08, #1
08d48     0F 2D 02 F1 | 	add	local08, local01
08d4c     02 2C 66 F0 | 	shl	local08, #2
08d50     03 00 00 FF 
08d54     00 E4 85 F1 | 	sub	objptr, ##1536
08d58     F2 2C 02 F1 | 	add	local08, objptr
08d5c     16 29 62 FC | 	wrlong	local06, local08
08d60     03 00 00 FF 
08d64     00 E4 05 F1 | 	add	objptr, ##1536
08d68     F2 2C 02 FB | 	rdlong	local08, objptr
08d6c     16 29 02 F6 | 	mov	local06, local08
08d70     01 28 66 F0 | 	shl	local06, #1
08d74     16 29 02 F1 | 	add	local06, local08
08d78     02 28 66 F0 | 	shl	local06, #2
08d7c     03 00 00 FF 
08d80     00 E4 85 F1 | 	sub	objptr, ##1536
08d84     F2 28 02 F1 | 	add	local06, objptr
08d88     04 28 06 F1 | 	add	local06, #4
08d8c     14 2B 62 FC | 	wrlong	local07, local06
08d90     03 00 00 FF 
08d94     00 E4 05 F1 | 	add	objptr, ##1536
08d98     F2 2C 02 FB | 	rdlong	local08, objptr
08d9c     16 2B 02 F6 | 	mov	local07, local08
08da0     01 2A 66 F0 | 	shl	local07, #1
08da4     16 2B 02 F1 | 	add	local07, local08
08da8     02 2A 66 F0 | 	shl	local07, #2
08dac     03 00 00 FF 
08db0     00 E4 85 F1 | 	sub	objptr, ##1536
08db4     F2 2A 02 F1 | 	add	local07, objptr
08db8     08 2A 06 F1 | 	add	local07, #8
08dbc     15 27 62 FC | 	wrlong	local05, local07
08dc0     03 00 00 FF 
08dc4     00 E4 05 F1 | 	add	objptr, ##1536
08dc8     F2 28 02 FB | 	rdlong	local06, objptr
08dcc     01 28 06 F1 | 	add	local06, #1
08dd0     F2 28 62 FC | 	wrlong	local06, objptr
08dd4     13 00 00 FF 
08dd8     38 E4 85 F1 | 	sub	objptr, ##9784
08ddc     F2 28 02 FB | 	rdlong	local06, objptr
08de0     01 28 06 F1 | 	add	local06, #1
08de4     F2 28 62 FC | 	wrlong	local06, objptr
08de8     56 00 00 FF 
08dec     18 E5 85 F1 | 	sub	objptr, ##44312
08df0     C4 02 90 FD | 	jmp	#LR__0716
08df4                 | LR__0708
08df4     1F 22 06 F6 | 	mov	local03, #31
08df8     56 00 00 FF 
08dfc     18 E5 05 F1 | 	add	objptr, ##44312
08e00     F2 16 02 FB | 	rdlong	arg03, objptr
08e04     03 16 66 F0 | 	shl	arg03, #3
08e08     02 00 00 FF 
08e0c     38 E4 85 F1 | 	sub	objptr, ##1080
08e10     F2 16 02 F1 | 	add	arg03, objptr
08e14     0B 13 02 FB | 	rdlong	arg01, arg03
08e18     54 00 00 FF 
08e1c     E0 E4 85 F1 | 	sub	objptr, ##43232
08e20     09 2F 02 F6 | 	mov	local09, arg01
08e24     97 06 48 FB | 	callpa	#(@LR__0710-@LR__0709)>>2,fcache_load_ptr_
08e28                 | LR__0709
08e28     17 FB C9 FA | 	rdbyte	result1, local09 wz
08e2c     01 2E 06 51 |  if_ne	add	local09, #1
08e30     F4 FF 9F 5D |  if_ne	jmp	#LR__0709
08e34                 | LR__0710
08e34     09 2F 82 F1 | 	sub	local09, arg01
08e38     17 FB 01 F6 | 	mov	result1, local09
08e3c     7A 00 00 FF 
08e40     88 E5 05 F1 | 	add	objptr, ##62856
08e44     F2 FA 61 FC | 	wrlong	result1, objptr
08e48     3C E4 85 F1 | 	sub	objptr, #60
08e4c     F2 12 02 FB | 	rdlong	arg01, objptr
08e50     FD 12 82 F1 | 	sub	arg01, result1
08e54     04 12 86 F1 | 	sub	arg01, #4
08e58     03 12 26 F5 | 	andn	arg01, #3
08e5c     F2 12 62 FC | 	wrlong	arg01, objptr
08e60     3C E4 05 F1 | 	add	objptr, #60
08e64     F2 14 02 FB | 	rdlong	arg02, objptr
08e68     01 16 06 F6 | 	mov	arg03, #1
08e6c     00 18 06 F6 | 	mov	arg04, #0
08e70     6F 00 00 FF 
08e74     C8 E4 85 F1 | 	sub	objptr, ##57032
08e78                 | '     return fill(addr, pattern, count, listPtr, 4)
08e78     04 1A 06 F6 | 	mov	arg05, #4
08e7c     40 F5 B0 FD | 	call	#_psram_spin2_fill
08e80                 | '     pslpoke memtop,l
08e80                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08e80     01 30 06 F6 | 	mov	local10, #1
08e84     6F 00 00 FF 
08e88     C8 E4 05 F1 | 	add	objptr, ##57032
08e8c     F2 32 02 FB | 	rdlong	local11, objptr
08e90     7A 00 00 FF 
08e94     88 E5 85 F1 | 	sub	objptr, ##62856
08e98     01 32 06 F1 | 	add	local11, #1
08e9c                 | LR__0711
08e9c     19 31 52 F2 | 	cmps	local10, local11 wc
08ea0     78 00 90 3D |  if_ae	jmp	#LR__0712
08ea4     7A 00 00 FF 
08ea8     4C E5 05 F1 | 	add	objptr, ##62796
08eac     F2 2A 02 FB | 	rdlong	local07, objptr
08eb0     03 2A 06 F1 | 	add	local07, #3
08eb4     18 2B 02 F1 | 	add	local07, local10
08eb8     24 00 00 FF 
08ebc     34 E4 85 F1 | 	sub	objptr, ##18484
08ec0     F2 2C 02 FB | 	rdlong	local08, objptr
08ec4     03 2C 66 F0 | 	shl	local08, #3
08ec8     02 00 00 FF 
08ecc     38 E4 85 F1 | 	sub	objptr, ##1080
08ed0     F2 2C 02 F1 | 	add	local08, objptr
08ed4     16 13 02 FB | 	rdlong	arg01, local08
08ed8     18 15 02 F6 | 	mov	arg02, local10
08edc     01 16 06 F6 | 	mov	arg03, #1
08ee0     54 00 00 FF 
08ee4     E0 E4 85 F1 | 	sub	objptr, ##43232
08ee8     14 20 B1 FD | 	call	#__system__Mid_S
08eec     FD 14 C2 FA | 	rdbyte	arg02, result1
08ef0     15 13 02 F6 | 	mov	arg01, local07
08ef4     01 16 06 F6 | 	mov	arg03, #1
08ef8     00 18 06 F6 | 	mov	arg04, #0
08efc     0B 00 00 FF 
08f00     C0 E4 05 F1 | 	add	objptr, ##5824
08f04                 | '     return fill(addr, pattern, count, listPtr, 1)
08f04     01 1A 06 F6 | 	mov	arg05, #1
08f08     B4 F4 B0 FD | 	call	#_psram_spin2_fill
08f0c     0B 00 00 FF 
08f10     C0 E4 85 F1 | 	sub	objptr, ##5824
08f14     01 30 06 F1 | 	add	local10, #1
08f18     80 FF 9F FD | 	jmp	#LR__0711
08f1c                 | LR__0712
08f1c     7A 00 00 FF 
08f20     4C E5 05 F1 | 	add	objptr, ##62796
08f24     F2 1E 02 FB | 	rdlong	local01, objptr
08f28     2B 22 06 F6 | 	mov	local03, #43
08f2c     0F 29 02 F6 | 	mov	local06, local01
08f30     10 2B 02 F6 | 	mov	local07, local02
08f34     11 33 02 F6 | 	mov	local11, local03
08f38     10 00 00 FF 
08f3c     FC E5 85 F1 | 	sub	objptr, ##8700
08f40     F2 30 02 FB | 	rdlong	local10, objptr
08f44     18 2D 02 F6 | 	mov	local08, local10
08f48     01 2C 66 F0 | 	shl	local08, #1
08f4c     18 2D 02 F1 | 	add	local08, local10
08f50     02 2C 66 F0 | 	shl	local08, #2
08f54     03 00 00 FF 
08f58     00 E4 85 F1 | 	sub	objptr, ##1536
08f5c     F2 2C 02 F1 | 	add	local08, objptr
08f60     16 29 62 FC | 	wrlong	local06, local08
08f64     03 00 00 FF 
08f68     00 E4 05 F1 | 	add	objptr, ##1536
08f6c     F2 30 02 FB | 	rdlong	local10, objptr
08f70     18 2D 02 F6 | 	mov	local08, local10
08f74     01 2C 66 F0 | 	shl	local08, #1
08f78     18 2D 02 F1 | 	add	local08, local10
08f7c     02 2C 66 F0 | 	shl	local08, #2
08f80     03 00 00 FF 
08f84     00 E4 85 F1 | 	sub	objptr, ##1536
08f88     F2 2C 02 F1 | 	add	local08, objptr
08f8c     04 2C 06 F1 | 	add	local08, #4
08f90     16 2B 62 FC | 	wrlong	local07, local08
08f94     03 00 00 FF 
08f98     00 E4 05 F1 | 	add	objptr, ##1536
08f9c     F2 30 02 FB | 	rdlong	local10, objptr
08fa0     18 2D 02 F6 | 	mov	local08, local10
08fa4     01 2C 66 F0 | 	shl	local08, #1
08fa8     18 2D 02 F1 | 	add	local08, local10
08fac     02 2C 66 F0 | 	shl	local08, #2
08fb0     03 00 00 FF 
08fb4     00 E4 85 F1 | 	sub	objptr, ##1536
08fb8     F2 2C 02 F1 | 	add	local08, objptr
08fbc     08 2C 06 F1 | 	add	local08, #8
08fc0     16 33 62 FC | 	wrlong	local11, local08
08fc4     03 00 00 FF 
08fc8     00 E4 05 F1 | 	add	objptr, ##1536
08fcc     F2 28 02 FB | 	rdlong	local06, objptr
08fd0     01 28 06 F1 | 	add	local06, #1
08fd4     F2 28 62 FC | 	wrlong	local06, objptr
08fd8     13 00 00 FF 
08fdc     38 E4 85 F1 | 	sub	objptr, ##9784
08fe0     F2 28 02 FB | 	rdlong	local06, objptr
08fe4     01 28 06 F1 | 	add	local06, #1
08fe8     F2 28 62 FC | 	wrlong	local06, objptr
08fec     56 00 00 FF 
08ff0     18 E5 85 F1 | 	sub	objptr, ##44312
08ff4     C0 00 90 FD | 	jmp	#LR__0716
08ff8                 | LR__0713
08ff8     12 13 02 F6 | 	mov	arg01, local04
08ffc     B8 03 B0 FD | 	call	#_getvar
09000     56 00 00 FF 
09004     18 E5 05 F1 | 	add	objptr, ##44312
09008     F2 28 02 FB | 	rdlong	local06, objptr
0900c     01 28 06 F1 | 	add	local06, #1
09010     F2 28 62 FC | 	wrlong	local06, objptr
09014     56 00 00 FF 
09018     18 E5 85 F1 | 	sub	objptr, ##44312
0901c     98 00 90 FD | 	jmp	#LR__0716
09020                 | LR__0714
09020     56 00 00 FF 
09024     18 E5 05 F1 | 	add	objptr, ##44312
09028     F2 28 02 FB | 	rdlong	local06, objptr
0902c     01 28 06 F1 | 	add	local06, #1
09030     F2 28 62 FC | 	wrlong	local06, objptr
09034     56 00 00 FF 
09038     18 E5 85 F1 | 	sub	objptr, ##44312
0903c     F4 F3 BF FD | 	call	#_expr
09040                 | '     ct+=1
09040                 | '     expr() 
09040                 | '     if lparts(ct).token=token_rpar then ct+=1
09040     56 00 00 FF 
09044     18 E5 05 F1 | 	add	objptr, ##44312
09048     F2 32 02 FB | 	rdlong	local11, objptr
0904c     03 32 66 F0 | 	shl	local11, #3
09050     02 00 00 FF 
09054     38 E4 85 F1 | 	sub	objptr, ##1080
09058     F2 32 02 F1 | 	add	local11, objptr
0905c     04 32 06 F1 | 	add	local11, #4
09060     19 33 02 FB | 	rdlong	local11, local11
09064     14 32 0E F2 | 	cmp	local11, #20 wz
09068     54 00 00 FF 
0906c     E0 E4 85 F1 | 	sub	objptr, ##43232
09070     44 00 90 5D |  if_ne	jmp	#LR__0716
09074     56 00 00 FF 
09078     18 E5 05 F1 | 	add	objptr, ##44312
0907c     F2 28 02 FB | 	rdlong	local06, objptr
09080     01 28 06 F1 | 	add	local06, #1
09084     F2 28 62 FC | 	wrlong	local06, objptr
09088     56 00 00 FF 
0908c     18 E5 85 F1 | 	sub	objptr, ##44312
09090     24 00 90 FD | 	jmp	#LR__0716
09094                 | LR__0715
09094     12 13 02 F6 | 	mov	arg01, local04
09098     28 00 B0 FD | 	call	#_getfun
0909c     56 00 00 FF 
090a0     18 E5 05 F1 | 	add	objptr, ##44312
090a4     F2 28 02 FB | 	rdlong	local06, objptr
090a8     01 28 06 F1 | 	add	local06, #1
090ac     F2 28 62 FC | 	wrlong	local06, objptr
090b0     56 00 00 FF 
090b4     18 E5 85 F1 | 	sub	objptr, ##44312
090b8                 | LR__0716
090b8     A7 F0 03 F6 | 	mov	ptra, fp
090bc     B2 00 A0 FD | 	call	#popregs_
090c0                 | _getvalue_ret
090c0     2D 00 64 FD | 	ret
090c4                 | 
090c4                 | ' 
090c4                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
090c4                 | _getfun
090c4     0A 4A 05 F6 | 	mov	COUNT_, #10
090c8     A8 00 A0 FD | 	call	#pushregs_
090cc                 | _getfun_enter
090cc     09 25 02 F6 | 	mov	local04, arg01
090d0     56 00 00 FF 
090d4     18 E5 05 F1 | 	add	objptr, ##44312
090d8     F2 26 02 FB | 	rdlong	local05, objptr
090dc     13 29 02 F6 | 	mov	local06, local05
090e0     00 2A 06 F6 | 	mov	local07, #0
090e4                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
090e4                 | ' oldct=ct
090e4                 | ' numpar=0
090e4                 | '   
090e4                 | ' if lparts(ct+1).token=token_lpar then
090e4     01 26 06 F1 | 	add	local05, #1
090e8     03 26 66 F0 | 	shl	local05, #3
090ec     02 00 00 FF 
090f0     38 E4 85 F1 | 	sub	objptr, ##1080
090f4     F2 26 02 F1 | 	add	local05, objptr
090f8     04 26 06 F1 | 	add	local05, #4
090fc     13 27 02 FB | 	rdlong	local05, local05
09100     15 26 0E F2 | 	cmp	local05, #21 wz
09104     54 00 00 FF 
09108     E0 E4 85 F1 | 	sub	objptr, ##43232
0910c     08 01 90 5D |  if_ne	jmp	#LR__0724
09110     56 00 00 FF 
09114     18 E5 05 F1 | 	add	objptr, ##44312
09118     F2 2C 02 FB | 	rdlong	local08, objptr
0911c     01 2C 06 F1 | 	add	local08, #1
09120     F2 2C 62 FC | 	wrlong	local08, objptr
09124     56 00 00 FF 
09128     18 E5 85 F1 | 	sub	objptr, ##44312
0912c                 | '   ct+=1 											' omit this lpar, this is for expr list
0912c                 | '   do
0912c                 | LR__0720
0912c     56 00 00 FF 
09130     18 E5 05 F1 | 	add	objptr, ##44312
09134     F2 26 02 FB | 	rdlong	local05, objptr
09138     01 26 06 F1 | 	add	local05, #1
0913c     F2 26 62 FC | 	wrlong	local05, objptr
09140                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09140                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09140     03 26 66 F0 | 	shl	local05, #3
09144     02 00 00 FF 
09148     38 E4 85 F1 | 	sub	objptr, ##1080
0914c     F2 26 02 F1 | 	add	local05, objptr
09150     04 26 06 F1 | 	add	local05, #4
09154     13 2D 02 FB | 	rdlong	local08, local05
09158     15 2C 0E F2 | 	cmp	local08, #21 wz
0915c     54 00 00 FF 
09160     E0 E4 85 F1 | 	sub	objptr, ##43232
09164     40 00 90 5D |  if_ne	jmp	#LR__0721
09168     56 00 00 FF 
0916c     18 E5 05 F1 | 	add	objptr, ##44312
09170     F2 2C 02 FB | 	rdlong	local08, objptr
09174     01 2C 06 F1 | 	add	local08, #1
09178     F2 2C 62 FC | 	wrlong	local08, objptr
0917c     56 00 00 FF 
09180     18 E5 85 F1 | 	sub	objptr, ##44312
09184     AC F2 BF FD | 	call	#_expr
09188     56 00 00 FF 
0918c     18 E5 05 F1 | 	add	objptr, ##44312
09190     F2 2C 02 FB | 	rdlong	local08, objptr
09194     01 2C 06 F1 | 	add	local08, #1
09198     F2 2C 62 FC | 	wrlong	local08, objptr
0919c     56 00 00 FF 
091a0     18 E5 85 F1 | 	sub	objptr, ##44312
091a4     04 00 90 FD | 	jmp	#LR__0722
091a8                 | LR__0721
091a8     88 F2 BF FD | 	call	#_expr
091ac                 | LR__0722
091ac     01 2A 06 F1 | 	add	local07, #1
091b0     56 00 00 FF 
091b4     18 E5 05 F1 | 	add	objptr, ##44312
091b8     F2 26 02 FB | 	rdlong	local05, objptr
091bc     03 26 66 F0 | 	shl	local05, #3
091c0     02 00 00 FF 
091c4     38 E4 85 F1 | 	sub	objptr, ##1080
091c8     F2 26 02 F1 | 	add	local05, objptr
091cc     04 26 06 F1 | 	add	local05, #4
091d0     13 2D 02 FB | 	rdlong	local08, local05
091d4     14 2C 0E F2 | 	cmp	local08, #20 wz
091d8     54 00 00 FF 
091dc     E0 E4 85 F1 | 	sub	objptr, ##43232
091e0     34 00 90 AD |  if_e	jmp	#LR__0723
091e4     56 00 00 FF 
091e8     18 E5 05 F1 | 	add	objptr, ##44312
091ec     F2 2C 02 FB | 	rdlong	local08, objptr
091f0     03 2C 66 F0 | 	shl	local08, #3
091f4     02 00 00 FF 
091f8     38 E4 85 F1 | 	sub	objptr, ##1080
091fc     F2 2C 02 F1 | 	add	local08, objptr
09200     04 2C 06 F1 | 	add	local08, #4
09204     16 2D 02 FB | 	rdlong	local08, local08
09208     FE 2D 0E F2 | 	cmp	local08, #510 wz
0920c     54 00 00 FF 
09210     E0 E4 85 F1 | 	sub	objptr, ##43232
09214     14 FF 9F 5D |  if_ne	jmp	#LR__0720
09218                 | LR__0723
09218                 | LR__0724
09218     15 1F 02 F6 | 	mov	local01, local07
0921c     03 28 66 F0 | 	shl	local06, #3
09220     54 00 00 FF 
09224     E0 E4 05 F1 | 	add	objptr, ##43232
09228     F2 28 02 F1 | 	add	local06, objptr
0922c     04 28 06 F1 | 	add	local06, #4
09230     14 23 02 FB | 	rdlong	local03, local06
09234     0F 2D 02 F6 | 	mov	local08, local01
09238     10 2B 02 F6 | 	mov	local07, local02
0923c     11 29 02 F6 | 	mov	local06, local03
09240     15 00 00 FF 
09244     70 E4 05 F1 | 	add	objptr, ##10864
09248     F2 26 02 FB | 	rdlong	local05, objptr
0924c     13 13 02 F6 | 	mov	arg01, local05
09250     01 12 66 F0 | 	shl	arg01, #1
09254     13 13 02 F1 | 	add	arg01, local05
09258     02 12 66 F0 | 	shl	arg01, #2
0925c     03 00 00 FF 
09260     00 E4 85 F1 | 	sub	objptr, ##1536
09264     F2 12 02 F1 | 	add	arg01, objptr
09268     09 2D 62 FC | 	wrlong	local08, arg01
0926c     03 00 00 FF 
09270     00 E4 05 F1 | 	add	objptr, ##1536
09274     F2 2C 02 FB | 	rdlong	local08, objptr
09278     16 2F 02 F6 | 	mov	local09, local08
0927c     01 2E 66 F0 | 	shl	local09, #1
09280     16 2F 02 F1 | 	add	local09, local08
09284     02 2E 66 F0 | 	shl	local09, #2
09288     03 00 00 FF 
0928c     00 E4 85 F1 | 	sub	objptr, ##1536
09290     F2 2E 02 F1 | 	add	local09, objptr
09294     04 2E 06 F1 | 	add	local09, #4
09298     17 2B 62 FC | 	wrlong	local07, local09
0929c     03 00 00 FF 
092a0     00 E4 05 F1 | 	add	objptr, ##1536
092a4     F2 2C 02 FB | 	rdlong	local08, objptr
092a8     16 31 02 F6 | 	mov	local10, local08
092ac     01 30 66 F0 | 	shl	local10, #1
092b0     16 31 02 F1 | 	add	local10, local08
092b4     02 30 66 F0 | 	shl	local10, #2
092b8     03 00 00 FF 
092bc     00 E4 85 F1 | 	sub	objptr, ##1536
092c0     F2 30 02 F1 | 	add	local10, objptr
092c4     08 30 06 F1 | 	add	local10, #8
092c8     18 29 62 FC | 	wrlong	local06, local10
092cc     03 00 00 FF 
092d0     00 E4 05 F1 | 	add	objptr, ##1536
092d4     F2 2C 02 FB | 	rdlong	local08, objptr
092d8     01 2C 06 F1 | 	add	local08, #1
092dc     F2 2C 62 FC | 	wrlong	local08, objptr
092e0     69 00 00 FF 
092e4     50 E5 85 F1 | 	sub	objptr, ##54096
092e8                 | ' 
092e8                 | ' t2.result.uresult=numpar
092e8                 | ' 
092e8                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
092e8                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
092e8                 | ' 
092e8                 | '   
092e8                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
092e8     FF FF 7F FF 
092ec     FF 25 0E F2 | 	cmp	local04, ##-1 wz
092f0     B8 00 90 5D |  if_ne	jmp	#LR__0725
092f4     15 22 06 F6 | 	mov	local03, #21
092f8     0F 2D 02 F6 | 	mov	local08, local01
092fc     10 2B 02 F6 | 	mov	local07, local02
09300     11 29 02 F6 | 	mov	local06, local03
09304     69 00 00 FF 
09308     50 E5 05 F1 | 	add	objptr, ##54096
0930c     F2 26 02 FB | 	rdlong	local05, objptr
09310     13 13 02 F6 | 	mov	arg01, local05
09314     01 12 66 F0 | 	shl	arg01, #1
09318     13 13 02 F1 | 	add	arg01, local05
0931c     02 12 66 F0 | 	shl	arg01, #2
09320     03 00 00 FF 
09324     00 E4 85 F1 | 	sub	objptr, ##1536
09328     F2 12 02 F1 | 	add	arg01, objptr
0932c     09 2D 62 FC | 	wrlong	local08, arg01
09330     03 00 00 FF 
09334     00 E4 05 F1 | 	add	objptr, ##1536
09338     F2 30 02 FB | 	rdlong	local10, objptr
0933c     18 2F 02 F6 | 	mov	local09, local10
09340     01 2E 66 F0 | 	shl	local09, #1
09344     18 2F 02 F1 | 	add	local09, local10
09348     02 2E 66 F0 | 	shl	local09, #2
0934c     03 00 00 FF 
09350     00 E4 85 F1 | 	sub	objptr, ##1536
09354     F2 2E 02 F1 | 	add	local09, objptr
09358     04 2E 06 F1 | 	add	local09, #4
0935c     17 2B 62 FC | 	wrlong	local07, local09
09360     03 00 00 FF 
09364     00 E4 05 F1 | 	add	objptr, ##1536
09368     F2 2E 02 FB | 	rdlong	local09, objptr
0936c     17 31 02 F6 | 	mov	local10, local09
09370     01 30 66 F0 | 	shl	local10, #1
09374     17 31 02 F1 | 	add	local10, local09
09378     02 30 66 F0 | 	shl	local10, #2
0937c     03 00 00 FF 
09380     00 E4 85 F1 | 	sub	objptr, ##1536
09384     F2 30 02 F1 | 	add	local10, objptr
09388     08 30 06 F1 | 	add	local10, #8
0938c     18 29 62 FC | 	wrlong	local06, local10
09390     03 00 00 FF 
09394     00 E4 05 F1 | 	add	objptr, ##1536
09398     F2 2C 02 FB | 	rdlong	local08, objptr
0939c     01 2C 06 F1 | 	add	local08, #1
093a0     F2 2C 62 FC | 	wrlong	local08, objptr
093a4     69 00 00 FF 
093a8     50 E5 85 F1 | 	sub	objptr, ##54096
093ac                 | LR__0725
093ac     A7 F0 03 F6 | 	mov	ptra, fp
093b0     B2 00 A0 FD | 	call	#popregs_
093b4                 | _getfun_ret
093b4     2D 00 64 FD | 	ret
093b8                 | 
093b8                 | '   
093b8                 | '   
093b8                 | ' sub getvar(m as integer) 
093b8                 | _getvar
093b8     0A 4A 05 F6 | 	mov	COUNT_, #10
093bc     A8 00 A0 FD | 	call	#pushregs_
093c0                 | _getvar_enter
093c0     09 25 02 F6 | 	mov	local04, arg01
093c4     56 00 00 FF 
093c8     18 E5 05 F1 | 	add	objptr, ##44312
093cc     F2 14 02 FB | 	rdlong	arg02, objptr
093d0     03 14 66 F0 | 	shl	arg02, #3
093d4     02 00 00 FF 
093d8     38 E4 85 F1 | 	sub	objptr, ##1080
093dc     F2 14 02 F1 | 	add	arg02, objptr
093e0     0A 27 02 FB | 	rdlong	local05, arg02
093e4     13 13 02 F6 | 	mov	arg01, local05
093e8     01 14 06 F6 | 	mov	arg02, #1
093ec     54 00 00 FF 
093f0     E0 E4 85 F1 | 	sub	objptr, ##43232
093f4     78 1A B1 FD | 	call	#__system__Right_S
093f8     FD 28 02 F6 | 	mov	local06, result1
093fc     01 2A 66 F6 | 	neg	local07, #1
09400                 | ' 
09400                 | ' varname$=lparts(ct).part$
09400                 | ' suffix$=right$(varname$,1)
09400                 | ' j=-1
09400                 | ' 
09400                 | ' for i=0 to varnum-1
09400     00 2C 06 F6 | 	mov	local08, #0
09404     54 00 00 FF 
09408     DC E4 05 F1 | 	add	objptr, ##43228
0940c     F2 2E 02 FB | 	rdlong	local09, objptr
09410     54 00 00 FF 
09414     DC E4 85 F1 | 	sub	objptr, ##43228
09418                 | LR__0730
09418     17 2D 52 F2 | 	cmps	local08, local09 wc
0941c     38 00 90 3D |  if_ae	jmp	#LR__0731
09420                 | '   if variables(i).name=varname$ then j=i : exit
09420     16 15 02 F6 | 	mov	arg02, local08
09424     04 14 66 F0 | 	shl	arg02, #4
09428     34 00 00 FF 
0942c     DC E4 05 F1 | 	add	objptr, ##26844
09430     F2 14 02 F1 | 	add	arg02, objptr
09434     0A 13 02 FB | 	rdlong	arg01, arg02
09438     13 15 02 F6 | 	mov	arg02, local05
0943c     34 00 00 FF 
09440     DC E4 85 F1 | 	sub	objptr, ##26844
09444     B8 F9 B0 FD | 	call	#__system___string_cmp
09448     00 FA 0D F2 | 	cmp	result1, #0 wz
0944c     16 2B 02 A6 |  if_e	mov	local07, local08
09450     01 2C 06 51 |  if_ne	add	local08, #1
09454     C0 FF 9F 5D |  if_ne	jmp	#LR__0730
09458                 | LR__0731
09458                 | ' if  j=-1 andalso varnum<maxvars then   
09458     FF FF 7F FF 
0945c     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
09460     A8 00 90 5D |  if_ne	jmp	#LR__0732
09464     54 00 00 FF 
09468     DC E4 05 F1 | 	add	objptr, ##43228
0946c     F2 2E 02 FB | 	rdlong	local09, objptr
09470     54 00 00 FF 
09474     DC E4 85 F1 | 	sub	objptr, ##43228
09478     01 00 00 FF 
0947c     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
09480     88 00 90 3D |  if_ae	jmp	#LR__0732
09484     54 00 00 FF 
09488     DC E4 05 F1 | 	add	objptr, ##43228
0948c     F2 2E 02 FB | 	rdlong	local09, objptr
09490     04 2E 66 F0 | 	shl	local09, #4
09494     20 00 00 FF 
09498     00 E4 85 F1 | 	sub	objptr, ##16384
0949c     F2 2E 02 F1 | 	add	local09, objptr
094a0     17 27 62 FC | 	wrlong	local05, local09
094a4     20 00 00 FF 
094a8     00 E4 05 F1 | 	add	objptr, ##16384
094ac     F2 2E 02 FB | 	rdlong	local09, objptr
094b0     04 2E 66 F0 | 	shl	local09, #4
094b4     20 00 00 FF 
094b8     00 E4 85 F1 | 	sub	objptr, ##16384
094bc     F2 2E 02 F1 | 	add	local09, objptr
094c0     04 2E 06 F1 | 	add	local09, #4
094c4     17 01 68 FC | 	wrlong	#0, local09
094c8     20 00 00 FF 
094cc     00 E4 05 F1 | 	add	objptr, ##16384
094d0     F2 2E 02 FB | 	rdlong	local09, objptr
094d4     04 2E 66 F0 | 	shl	local09, #4
094d8     20 00 00 FF 
094dc     00 E4 85 F1 | 	sub	objptr, ##16384
094e0     F2 2E 02 F1 | 	add	local09, objptr
094e4     0C 2E 06 F1 | 	add	local09, #12
094e8     17 39 68 FC | 	wrlong	#28, local09
094ec     20 00 00 FF 
094f0     00 E4 05 F1 | 	add	objptr, ##16384
094f4     F2 2E 02 FB | 	rdlong	local09, objptr
094f8     17 2B 02 F6 | 	mov	local07, local09
094fc     01 2E 06 F1 | 	add	local09, #1
09500     F2 2E 62 FC | 	wrlong	local09, objptr
09504     54 00 00 FF 
09508     DC E4 85 F1 | 	sub	objptr, ##43228
0950c                 | LR__0732
0950c     00 2E 06 F6 | 	mov	local09, #0
09510                 | ' numpar=0
09510                 | ' ' check if it is an array
09510                 | ' 
09510                 | ' if lparts(ct+1).token=token_lpar then
09510     56 00 00 FF 
09514     18 E5 05 F1 | 	add	objptr, ##44312
09518     F2 2C 02 FB | 	rdlong	local08, objptr
0951c     01 2C 06 F1 | 	add	local08, #1
09520     03 2C 66 F0 | 	shl	local08, #3
09524     02 00 00 FF 
09528     38 E4 85 F1 | 	sub	objptr, ##1080
0952c     F2 2C 02 F1 | 	add	local08, objptr
09530     04 2C 06 F1 | 	add	local08, #4
09534     16 2D 02 FB | 	rdlong	local08, local08
09538     15 2C 0E F2 | 	cmp	local08, #21 wz
0953c     54 00 00 FF 
09540     E0 E4 85 F1 | 	sub	objptr, ##43232
09544     08 01 90 5D |  if_ne	jmp	#LR__0737
09548     56 00 00 FF 
0954c     18 E5 05 F1 | 	add	objptr, ##44312
09550     F2 30 02 FB | 	rdlong	local10, objptr
09554     01 30 06 F1 | 	add	local10, #1
09558     F2 30 62 FC | 	wrlong	local10, objptr
0955c     56 00 00 FF 
09560     18 E5 85 F1 | 	sub	objptr, ##44312
09564                 | '   ct+=1 											' omit this lpar, this is for expr list
09564                 | '   do
09564                 | LR__0733
09564     56 00 00 FF 
09568     18 E5 05 F1 | 	add	objptr, ##44312
0956c     F2 2C 02 FB | 	rdlong	local08, objptr
09570     01 2C 06 F1 | 	add	local08, #1
09574     F2 2C 62 FC | 	wrlong	local08, objptr
09578                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09578                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09578     03 2C 66 F0 | 	shl	local08, #3
0957c     02 00 00 FF 
09580     38 E4 85 F1 | 	sub	objptr, ##1080
09584     F2 2C 02 F1 | 	add	local08, objptr
09588     04 2C 06 F1 | 	add	local08, #4
0958c     16 31 02 FB | 	rdlong	local10, local08
09590     15 30 0E F2 | 	cmp	local10, #21 wz
09594     54 00 00 FF 
09598     E0 E4 85 F1 | 	sub	objptr, ##43232
0959c     40 00 90 5D |  if_ne	jmp	#LR__0734
095a0     56 00 00 FF 
095a4     18 E5 05 F1 | 	add	objptr, ##44312
095a8     F2 30 02 FB | 	rdlong	local10, objptr
095ac     01 30 06 F1 | 	add	local10, #1
095b0     F2 30 62 FC | 	wrlong	local10, objptr
095b4     56 00 00 FF 
095b8     18 E5 85 F1 | 	sub	objptr, ##44312
095bc     74 EE BF FD | 	call	#_expr
095c0     56 00 00 FF 
095c4     18 E5 05 F1 | 	add	objptr, ##44312
095c8     F2 30 02 FB | 	rdlong	local10, objptr
095cc     01 30 06 F1 | 	add	local10, #1
095d0     F2 30 62 FC | 	wrlong	local10, objptr
095d4     56 00 00 FF 
095d8     18 E5 85 F1 | 	sub	objptr, ##44312
095dc     04 00 90 FD | 	jmp	#LR__0735
095e0                 | LR__0734
095e0     50 EE BF FD | 	call	#_expr
095e4                 | LR__0735
095e4     01 2E 06 F1 | 	add	local09, #1
095e8     56 00 00 FF 
095ec     18 E5 05 F1 | 	add	objptr, ##44312
095f0     F2 2C 02 FB | 	rdlong	local08, objptr
095f4     03 2C 66 F0 | 	shl	local08, #3
095f8     02 00 00 FF 
095fc     38 E4 85 F1 | 	sub	objptr, ##1080
09600     F2 2C 02 F1 | 	add	local08, objptr
09604     04 2C 06 F1 | 	add	local08, #4
09608     16 31 02 FB | 	rdlong	local10, local08
0960c     14 30 0E F2 | 	cmp	local10, #20 wz
09610     54 00 00 FF 
09614     E0 E4 85 F1 | 	sub	objptr, ##43232
09618     34 00 90 AD |  if_e	jmp	#LR__0736
0961c     56 00 00 FF 
09620     18 E5 05 F1 | 	add	objptr, ##44312
09624     F2 30 02 FB | 	rdlong	local10, objptr
09628     03 30 66 F0 | 	shl	local10, #3
0962c     02 00 00 FF 
09630     38 E4 85 F1 | 	sub	objptr, ##1080
09634     F2 30 02 F1 | 	add	local10, objptr
09638     04 30 06 F1 | 	add	local10, #4
0963c     18 31 02 FB | 	rdlong	local10, local10
09640     FE 31 0E F2 | 	cmp	local10, #510 wz
09644     54 00 00 FF 
09648     E0 E4 85 F1 | 	sub	objptr, ##43232
0964c     14 FF 9F 5D |  if_ne	jmp	#LR__0733
09650                 | LR__0736
09650                 | LR__0737
09650     17 21 02 F6 | 	mov	local02, local09
09654     11 22 06 F6 | 	mov	local03, #17
09658     15 1F 02 F6 | 	mov	local01, local07
0965c     0F 31 02 F6 | 	mov	local10, local01
09660     10 2F 02 F6 | 	mov	local09, local02
09664     11 2D 02 F6 | 	mov	local08, local03
09668     69 00 00 FF 
0966c     50 E5 05 F1 | 	add	objptr, ##54096
09670     F2 2A 02 FB | 	rdlong	local07, objptr
09674     15 29 02 F6 | 	mov	local06, local07
09678     01 28 66 F0 | 	shl	local06, #1
0967c     15 29 02 F1 | 	add	local06, local07
09680     02 28 66 F0 | 	shl	local06, #2
09684     03 00 00 FF 
09688     00 E4 85 F1 | 	sub	objptr, ##1536
0968c     F2 28 02 F1 | 	add	local06, objptr
09690     14 31 62 FC | 	wrlong	local10, local06
09694     03 00 00 FF 
09698     00 E4 05 F1 | 	add	objptr, ##1536
0969c     F2 30 02 FB | 	rdlong	local10, objptr
096a0     18 27 02 F6 | 	mov	local05, local10
096a4     01 26 66 F0 | 	shl	local05, #1
096a8     18 27 02 F1 | 	add	local05, local10
096ac     02 26 66 F0 | 	shl	local05, #2
096b0     03 00 00 FF 
096b4     00 E4 85 F1 | 	sub	objptr, ##1536
096b8     F2 26 02 F1 | 	add	local05, objptr
096bc     04 26 06 F1 | 	add	local05, #4
096c0     13 2F 62 FC | 	wrlong	local09, local05
096c4     03 00 00 FF 
096c8     00 E4 05 F1 | 	add	objptr, ##1536
096cc     F2 30 02 FB | 	rdlong	local10, objptr
096d0     18 FB 01 F6 | 	mov	result1, local10
096d4     01 FA 65 F0 | 	shl	result1, #1
096d8     18 FB 01 F1 | 	add	result1, local10
096dc     02 FA 65 F0 | 	shl	result1, #2
096e0     03 00 00 FF 
096e4     00 E4 85 F1 | 	sub	objptr, ##1536
096e8     F2 FA 01 F1 | 	add	result1, objptr
096ec     08 FA 05 F1 | 	add	result1, #8
096f0     FD 2C 62 FC | 	wrlong	local08, result1
096f4     03 00 00 FF 
096f8     00 E4 05 F1 | 	add	objptr, ##1536
096fc     F2 30 02 FB | 	rdlong	local10, objptr
09700     01 30 06 F1 | 	add	local10, #1
09704     F2 30 62 FC | 	wrlong	local10, objptr
09708     69 00 00 FF 
0970c     50 E5 85 F1 | 	sub	objptr, ##54096
09710                 | ' 
09710                 | ' t2.result.twowords(1)=numpar
09710                 | ' 
09710                 | ' 
09710                 | ' 
09710                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
09710                 | ' 
09710                 | ' 
09710                 | '  
09710                 | ' 
09710                 | ' 701 
09710                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09710                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09710     FF FF 7F FF 
09714     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09718     B8 00 90 5D |  if_ne	jmp	#LR__0738
0971c     15 22 06 F6 | 	mov	local03, #21
09720     0F 31 02 F6 | 	mov	local10, local01
09724     10 2F 02 F6 | 	mov	local09, local02
09728     11 2D 02 F6 | 	mov	local08, local03
0972c     69 00 00 FF 
09730     50 E5 05 F1 | 	add	objptr, ##54096
09734     F2 2A 02 FB | 	rdlong	local07, objptr
09738     15 29 02 F6 | 	mov	local06, local07
0973c     01 28 66 F0 | 	shl	local06, #1
09740     15 29 02 F1 | 	add	local06, local07
09744     02 28 66 F0 | 	shl	local06, #2
09748     03 00 00 FF 
0974c     00 E4 85 F1 | 	sub	objptr, ##1536
09750     F2 28 02 F1 | 	add	local06, objptr
09754     14 31 62 FC | 	wrlong	local10, local06
09758     03 00 00 FF 
0975c     00 E4 05 F1 | 	add	objptr, ##1536
09760     F2 1E 02 FB | 	rdlong	local01, objptr
09764     0F 27 02 F6 | 	mov	local05, local01
09768     01 26 66 F0 | 	shl	local05, #1
0976c     0F 27 02 F1 | 	add	local05, local01
09770     02 26 66 F0 | 	shl	local05, #2
09774     03 00 00 FF 
09778     00 E4 85 F1 | 	sub	objptr, ##1536
0977c     F2 26 02 F1 | 	add	local05, objptr
09780     04 26 06 F1 | 	add	local05, #4
09784     13 2F 62 FC | 	wrlong	local09, local05
09788     03 00 00 FF 
0978c     00 E4 05 F1 | 	add	objptr, ##1536
09790     F2 1E 02 FB | 	rdlong	local01, objptr
09794     0F FB 01 F6 | 	mov	result1, local01
09798     01 FA 65 F0 | 	shl	result1, #1
0979c     0F FB 01 F1 | 	add	result1, local01
097a0     02 FA 65 F0 | 	shl	result1, #2
097a4     03 00 00 FF 
097a8     00 E4 85 F1 | 	sub	objptr, ##1536
097ac     F2 FA 01 F1 | 	add	result1, objptr
097b0     08 FA 05 F1 | 	add	result1, #8
097b4     FD 2C 62 FC | 	wrlong	local08, result1
097b8     03 00 00 FF 
097bc     00 E4 05 F1 | 	add	objptr, ##1536
097c0     F2 30 02 FB | 	rdlong	local10, objptr
097c4     01 30 06 F1 | 	add	local10, #1
097c8     F2 30 62 FC | 	wrlong	local10, objptr
097cc     69 00 00 FF 
097d0     50 E5 85 F1 | 	sub	objptr, ##54096
097d4                 | LR__0738
097d4     A7 F0 03 F6 | 	mov	ptra, fp
097d8     B2 00 A0 FD | 	call	#popregs_
097dc                 | _getvar_ret
097dc     2D 00 64 FD | 	ret
097e0                 | 
097e0                 | ' 
097e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
097e0                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
097e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
097e0                 | ' 
097e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
097e0                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
097e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
097e0                 | ' 
097e0                 | ' function execute_line (astart=0 as integer) as integer
097e0                 | _execute_line
097e0     04 4A 05 F6 | 	mov	COUNT_, #4
097e4     A8 00 A0 FD | 	call	#pushregs_
097e8     79 00 00 FF 
097ec     88 E4 05 F1 | 	add	objptr, ##62088
097f0     F2 00 68 FC | 	wrlong	#0, objptr
097f4                 | ' runptr2=0
097f4                 | ' for lineptr_e=astart to lineptr-1
097f4     0F 00 00 FF 
097f8     34 E5 85 F1 | 	sub	objptr, ##7988
097fc     F2 12 62 FC | 	wrlong	arg01, objptr
09800     04 E4 85 F1 | 	sub	objptr, #4
09804     F2 1E 02 FB | 	rdlong	local01, objptr
09808     69 00 00 FF 
0980c     50 E5 85 F1 | 	sub	objptr, ##54096
09810                 | LR__0740
09810     69 00 00 FF 
09814     54 E5 05 F1 | 	add	objptr, ##54100
09818     F2 FA 01 FB | 	rdlong	result1, objptr
0981c     69 00 00 FF 
09820     54 E5 85 F1 | 	sub	objptr, ##54100
09824     0F FB 51 F2 | 	cmps	result1, local01 wc
09828     98 00 90 3D |  if_ae	jmp	#LR__0741
0982c     69 00 00 FF 
09830     54 E5 05 F1 | 	add	objptr, ##54100
09834     F2 FA 01 FB | 	rdlong	result1, objptr
09838     FD 20 02 F6 | 	mov	local02, result1
0983c     01 20 66 F0 | 	shl	local02, #1
09840     FD 20 02 F1 | 	add	local02, result1
09844     02 20 66 F0 | 	shl	local02, #2
09848     03 00 00 FF 
0984c     04 E4 85 F1 | 	sub	objptr, ##1540
09850     F2 20 02 F1 | 	add	local02, objptr
09854     08 20 06 F1 | 	add	local02, #8
09858     10 21 02 FB | 	rdlong	local02, local02
0985c     10 21 E2 F8 | 	getbyte	local02, local02, #0
09860     02 20 66 F0 | 	shl	local02, #2
09864     04 00 00 FF 
09868     1C E4 85 F1 | 	sub	objptr, ##2076
0986c     F2 20 02 F1 | 	add	local02, objptr
09870     10 21 02 FB | 	rdlong	local02, local02
09874     10 23 02 F6 | 	mov	local03, local02
09878     13 20 46 F7 | 	zerox	local02, #19
0987c     14 22 46 F0 | 	shr	local03, #20
09880     02 22 66 F0 | 	shl	local03, #2
09884     ED 22 02 F1 | 	add	local03, __methods__
09888     11 23 02 FB | 	rdlong	local03, local03
0988c     62 00 00 FF 
09890     34 E5 85 F1 | 	sub	objptr, ##50484
09894     F2 24 02 F6 | 	mov	local04, objptr
09898     10 E5 01 F6 | 	mov	objptr, local02
0989c     2D 22 62 FD | 	call	local03
098a0     12 E5 01 F6 | 	mov	objptr, local04
098a4     69 00 00 FF 
098a8     54 E5 05 F1 | 	add	objptr, ##54100
098ac     F2 24 02 FB | 	rdlong	local04, objptr
098b0     01 24 06 F1 | 	add	local04, #1
098b4     F2 24 62 FC | 	wrlong	local04, objptr
098b8     69 00 00 FF 
098bc     54 E5 85 F1 | 	sub	objptr, ##54100
098c0     4C FF 9F FD | 	jmp	#LR__0740
098c4                 | LR__0741
098c4                 | ' return runptr2
098c4     79 00 00 FF 
098c8     88 E4 05 F1 | 	add	objptr, ##62088
098cc     F2 FA 01 FB | 	rdlong	result1, objptr
098d0     79 00 00 FF 
098d4     88 E4 85 F1 | 	sub	objptr, ##62088
098d8     A7 F0 03 F6 | 	mov	ptra, fp
098dc     B2 00 A0 FD | 	call	#popregs_
098e0                 | _execute_line_ret
098e0     2D 00 64 FD | 	ret
098e4                 | 
098e4                 | ' 
098e4                 | ' 
098e4                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
098e4                 | ' 
098e4                 | ' function pop() as expr_result
098e4                 | _pop
098e4                 | ' 
098e4                 | ' if stackpointer=0 then
098e4     62 00 00 FF 
098e8     2C E5 05 F1 | 	add	objptr, ##50476
098ec     F2 FA 09 FB | 	rdlong	result1, objptr wz
098f0     62 00 00 FF 
098f4     2C E5 85 F1 | 	sub	objptr, ##50476
098f8     FF 04 06 A6 |  if_e	mov	_var03, #255
098fc     18 00 06 A6 |  if_e	mov	_var01, #24
09900     68 00 90 AD |  if_e	jmp	#LR__0750
09904     62 00 00 FF 
09908     2C E5 05 F1 | 	add	objptr, ##50476
0990c     F2 FA 01 FB | 	rdlong	result1, objptr
09910     01 FA 85 F1 | 	sub	result1, #1
09914     F2 FA 61 FC | 	wrlong	result1, objptr
09918     FD FE 01 F6 | 	mov	result3, result1
0991c     01 FE 65 F0 | 	shl	result3, #1
09920     FD FE 01 F1 | 	add	result3, result1
09924     02 FE 65 F0 | 	shl	result3, #2
09928     0C 00 00 FF 
0992c     0C E4 85 F1 | 	sub	objptr, ##6156
09930     F2 FE 01 F1 | 	add	result3, objptr
09934     FF 00 02 FB | 	rdlong	_var01, result3
09938     04 FE 05 F1 | 	add	result3, #4
0993c     FF FE 01 FB | 	rdlong	result3, result3
09940     FD FC 01 F6 | 	mov	result2, result1
09944     01 FC 65 F0 | 	shl	result2, #1
09948     FD FC 01 F1 | 	add	result2, result1
0994c     02 FC 65 F0 | 	shl	result2, #2
09950     F2 FC 01 F1 | 	add	result2, objptr
09954     08 FC 05 F1 | 	add	result2, #8
09958     FE FA 01 FB | 	rdlong	result1, result2
0995c     FF 02 02 F6 | 	mov	_var02, result3
09960     FD 04 02 F6 | 	mov	_var03, result1
09964     56 00 00 FF 
09968     20 E5 85 F1 | 	sub	objptr, ##44320
0996c                 | LR__0750
0996c                 | ' return t1
0996c     01 FD 01 F6 | 	mov	result2, _var02
09970     02 FF 01 F6 | 	mov	result3, _var03
09974     00 FB 01 F6 | 	mov	result1, _var01
09978                 | _pop_ret
09978     2D 00 64 FD | 	ret
0997c                 | 
0997c                 | ' 
0997c                 | ' sub push(t1 as expr_result )
0997c                 | _push
0997c                 | ' 
0997c                 | ' 'print "In push: "; t1.result_type
0997c                 | ' 'print "In push: "; t1.result.uresult
0997c                 | ' 
0997c                 | ' if stackpointer<maxstack then 
0997c     62 00 00 FF 
09980     2C E5 05 F1 | 	add	objptr, ##50476
09984     F2 00 02 FB | 	rdlong	_var01, objptr
09988     62 00 00 FF 
0998c     2C E5 85 F1 | 	sub	objptr, ##50476
09990     01 00 00 FF 
09994     00 00 56 F2 | 	cmps	_var01, ##512 wc
09998     BC 00 90 3D |  if_ae	jmp	#LR__0760
0999c     09 01 02 FB | 	rdlong	_var01, arg01
099a0     04 12 06 F1 | 	add	arg01, #4
099a4     09 03 02 FB | 	rdlong	_var02, arg01
099a8     04 12 06 F1 | 	add	arg01, #4
099ac     09 13 02 FB | 	rdlong	arg01, arg01
099b0     62 00 00 FF 
099b4     2C E5 05 F1 | 	add	objptr, ##50476
099b8     F2 04 02 FB | 	rdlong	_var03, objptr
099bc     02 07 02 F6 | 	mov	_var04, _var03
099c0     01 06 66 F0 | 	shl	_var04, #1
099c4     02 07 02 F1 | 	add	_var04, _var03
099c8     02 06 66 F0 | 	shl	_var04, #2
099cc     0C 00 00 FF 
099d0     0C E4 85 F1 | 	sub	objptr, ##6156
099d4     F2 06 02 F1 | 	add	_var04, objptr
099d8     03 01 62 FC | 	wrlong	_var01, _var04
099dc     0C 00 00 FF 
099e0     0C E4 05 F1 | 	add	objptr, ##6156
099e4     F2 06 02 FB | 	rdlong	_var04, objptr
099e8     03 05 02 F6 | 	mov	_var03, _var04
099ec     01 04 66 F0 | 	shl	_var03, #1
099f0     03 05 02 F1 | 	add	_var03, _var04
099f4     02 04 66 F0 | 	shl	_var03, #2
099f8     0C 00 00 FF 
099fc     0C E4 85 F1 | 	sub	objptr, ##6156
09a00     F2 04 02 F1 | 	add	_var03, objptr
09a04     04 04 06 F1 | 	add	_var03, #4
09a08     02 03 62 FC | 	wrlong	_var02, _var03
09a0c     0C 00 00 FF 
09a10     0C E4 05 F1 | 	add	objptr, ##6156
09a14     F2 06 02 FB | 	rdlong	_var04, objptr
09a18     03 05 02 F6 | 	mov	_var03, _var04
09a1c     01 04 66 F0 | 	shl	_var03, #1
09a20     03 05 02 F1 | 	add	_var03, _var04
09a24     02 04 66 F0 | 	shl	_var03, #2
09a28     0C 00 00 FF 
09a2c     0C E4 85 F1 | 	sub	objptr, ##6156
09a30     F2 04 02 F1 | 	add	_var03, objptr
09a34     08 04 06 F1 | 	add	_var03, #8
09a38     02 13 62 FC | 	wrlong	arg01, _var03
09a3c     0C 00 00 FF 
09a40     0C E4 05 F1 | 	add	objptr, ##6156
09a44     F2 00 02 FB | 	rdlong	_var01, objptr
09a48     01 00 06 F1 | 	add	_var01, #1
09a4c     F2 00 62 FC | 	wrlong	_var01, objptr
09a50     62 00 00 FF 
09a54     2C E5 85 F1 | 	sub	objptr, ##50476
09a58                 | LR__0760
09a58                 | _push_ret
09a58     2D 00 64 FD | 	ret
09a5c                 | 
09a5c                 | ' 
09a5c                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
09a5c                 | ' 
09a5c                 | ' sub do_push
09a5c                 | _do_push
09a5c                 | ' if stackpointer<maxstack then 
09a5c     62 00 00 FF 
09a60     2C E5 05 F1 | 	add	objptr, ##50476
09a64     F2 00 02 FB | 	rdlong	_var01, objptr
09a68     62 00 00 FF 
09a6c     2C E5 85 F1 | 	sub	objptr, ##50476
09a70     01 00 00 FF 
09a74     00 00 56 F2 | 	cmps	_var01, ##512 wc
09a78     F8 00 90 3D |  if_ae	jmp	#LR__0770
09a7c     69 00 00 FF 
09a80     54 E5 05 F1 | 	add	objptr, ##54100
09a84     F2 02 02 FB | 	rdlong	_var02, objptr
09a88     01 05 02 F6 | 	mov	_var03, _var02
09a8c     01 04 66 F0 | 	shl	_var03, #1
09a90     01 05 02 F1 | 	add	_var03, _var02
09a94     02 04 66 F0 | 	shl	_var03, #2
09a98     03 00 00 FF 
09a9c     04 E4 85 F1 | 	sub	objptr, ##1540
09aa0     F2 04 02 F1 | 	add	_var03, objptr
09aa4     02 01 02 FB | 	rdlong	_var01, _var03
09aa8     04 04 06 F1 | 	add	_var03, #4
09aac     02 07 02 FB | 	rdlong	_var04, _var03
09ab0     01 05 02 F6 | 	mov	_var03, _var02
09ab4     01 04 66 F0 | 	shl	_var03, #1
09ab8     01 05 02 F1 | 	add	_var03, _var02
09abc     02 04 66 F0 | 	shl	_var03, #2
09ac0     F2 04 02 F1 | 	add	_var03, objptr
09ac4     08 04 06 F1 | 	add	_var03, #8
09ac8     02 03 02 FB | 	rdlong	_var02, _var03
09acc     04 00 00 FF 
09ad0     24 E4 85 F1 | 	sub	objptr, ##2084
09ad4     F2 04 02 FB | 	rdlong	_var03, objptr
09ad8     02 09 02 F6 | 	mov	_var05, _var03
09adc     01 08 66 F0 | 	shl	_var05, #1
09ae0     02 09 02 F1 | 	add	_var05, _var03
09ae4     02 08 66 F0 | 	shl	_var05, #2
09ae8     0C 00 00 FF 
09aec     0C E4 85 F1 | 	sub	objptr, ##6156
09af0     F2 08 02 F1 | 	add	_var05, objptr
09af4     04 01 62 FC | 	wrlong	_var01, _var05
09af8     0C 00 00 FF 
09afc     0C E4 05 F1 | 	add	objptr, ##6156
09b00     F2 08 02 FB | 	rdlong	_var05, objptr
09b04     04 05 02 F6 | 	mov	_var03, _var05
09b08     01 04 66 F0 | 	shl	_var03, #1
09b0c     04 05 02 F1 | 	add	_var03, _var05
09b10     02 04 66 F0 | 	shl	_var03, #2
09b14     0C 00 00 FF 
09b18     0C E4 85 F1 | 	sub	objptr, ##6156
09b1c     F2 04 02 F1 | 	add	_var03, objptr
09b20     04 04 06 F1 | 	add	_var03, #4
09b24     02 07 62 FC | 	wrlong	_var04, _var03
09b28     0C 00 00 FF 
09b2c     0C E4 05 F1 | 	add	objptr, ##6156
09b30     F2 08 02 FB | 	rdlong	_var05, objptr
09b34     04 07 02 F6 | 	mov	_var04, _var05
09b38     01 06 66 F0 | 	shl	_var04, #1
09b3c     04 07 02 F1 | 	add	_var04, _var05
09b40     02 06 66 F0 | 	shl	_var04, #2
09b44     0C 00 00 FF 
09b48     0C E4 85 F1 | 	sub	objptr, ##6156
09b4c     F2 06 02 F1 | 	add	_var04, objptr
09b50     08 06 06 F1 | 	add	_var04, #8
09b54     03 03 62 FC | 	wrlong	_var02, _var04
09b58     0C 00 00 FF 
09b5c     0C E4 05 F1 | 	add	objptr, ##6156
09b60     F2 00 02 FB | 	rdlong	_var01, objptr
09b64     01 00 06 F1 | 	add	_var01, #1
09b68     F2 00 62 FC | 	wrlong	_var01, objptr
09b6c     62 00 00 FF 
09b70     2C E5 85 F1 | 	sub	objptr, ##50476
09b74                 | LR__0770
09b74                 | _do_push_ret
09b74     2D 00 64 FD | 	ret
09b78                 | 
09b78                 | ' 
09b78                 | '   
09b78                 | ' sub csave_block(address as ulong)
09b78                 | _csave_block
09b78     09 01 02 F6 | 	mov	_var01, arg01
09b7c                 | ' 
09b7c                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
09b7c                 | ' ' we enter it at the state of playing 1 kHz header tone
09b7c                 | ' 
09b7c                 | ' for i=0 to 63 step 2
09b7c     00 02 06 F6 | 	mov	_var02, #0
09b80                 | LR__0780
09b80                 | '   do: loop until lpeek(base+32*7)>32768
09b80     56 00 00 FF 
09b84     E4 E4 05 F1 | 	add	objptr, ##44260
09b88     97 0C 48 FB | 	callpa	#(@LR__0782-@LR__0781)>>2,fcache_load_ptr_
09b8c                 | LR__0781
09b8c     F2 12 02 FB | 	rdlong	arg01, objptr
09b90     E0 12 06 F1 | 	add	arg01, #224
09b94     09 FB 01 FB | 	rdlong	result1, arg01
09b98     40 00 00 FF 
09b9c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09ba0     E8 FF 9F CD |  if_b	jmp	#LR__0781
09ba4                 | LR__0782
09ba4     00 13 02 F6 | 	mov	arg01, _var01
09ba8     01 05 02 F6 | 	mov	_var03, _var02
09bac     02 04 66 F0 | 	shl	_var03, #2
09bb0     02 13 02 F1 | 	add	arg01, _var03
09bb4     09 07 02 FB | 	rdlong	_var04, arg01
09bb8     24 00 00 FF 
09bbc     C4 E4 05 F1 | 	add	objptr, ##18628
09bc0     F2 06 62 FC | 	wrlong	_var04, objptr
09bc4     7A 00 00 FF 
09bc8     A8 E5 85 F1 | 	sub	objptr, ##62888
09bcc                 | '   q=lpeek(address+4*i)
09bcc                 | '      for bit=0 to 31
09bcc     00 08 06 F6 | 	mov	_var05, #0
09bd0     97 84 48 FB | 	callpa	#(@LR__0787-@LR__0783)>>2,fcache_load_ptr_
09bd4                 | LR__0783
09bd4                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
09bd4     7A 00 00 FF 
09bd8     A8 E5 05 F1 | 	add	objptr, ##62888
09bdc     F2 06 02 FB | 	rdlong	_var04, objptr
09be0     7A 00 00 FF 
09be4     A8 E5 85 F1 | 	sub	objptr, ##62888
09be8     04 05 C2 F9 | 	decod	_var03, _var05
09bec     02 07 CA F7 | 	test	_var04, _var03 wz
09bf0     60 00 90 AD |  if_e	jmp	#LR__0784
09bf4     04 05 02 F6 | 	mov	_var03, _var05
09bf8     02 04 66 F0 | 	shl	_var03, #2
09bfc     76 00 00 FF 
09c00     80 E5 05 F1 | 	add	objptr, ##60800
09c04     F2 04 02 F1 | 	add	_var03, objptr
09c08     02 FF 48 FC | 	wrbyte	#127, _var03
09c0c     04 05 02 F6 | 	mov	_var03, _var05
09c10     02 04 66 F0 | 	shl	_var03, #2
09c14     01 04 06 F1 | 	add	_var03, #1
09c18     F2 04 02 F1 | 	add	_var03, objptr
09c1c     02 01 49 FC | 	wrbyte	#128, _var03
09c20     04 05 02 F6 | 	mov	_var03, _var05
09c24     02 04 66 F0 | 	shl	_var03, #2
09c28     02 04 06 F1 | 	add	_var03, #2
09c2c     F2 04 02 F1 | 	add	_var03, objptr
09c30     02 FF 48 FC | 	wrbyte	#127, _var03
09c34     04 05 02 F6 | 	mov	_var03, _var05
09c38     02 04 66 F0 | 	shl	_var03, #2
09c3c     03 04 06 F1 | 	add	_var03, #3
09c40     F2 04 02 F1 | 	add	_var03, objptr
09c44     02 01 49 FC | 	wrbyte	#128, _var03
09c48     76 00 00 FF 
09c4c     80 E5 85 F1 | 	sub	objptr, ##60800
09c50     5C 00 90 FD | 	jmp	#LR__0785
09c54                 | LR__0784
09c54     04 05 02 F6 | 	mov	_var03, _var05
09c58     02 04 66 F0 | 	shl	_var03, #2
09c5c     76 00 00 FF 
09c60     80 E5 05 F1 | 	add	objptr, ##60800
09c64     F2 04 02 F1 | 	add	_var03, objptr
09c68     02 01 49 FC | 	wrbyte	#128, _var03
09c6c     04 05 02 F6 | 	mov	_var03, _var05
09c70     02 04 66 F0 | 	shl	_var03, #2
09c74     01 04 06 F1 | 	add	_var03, #1
09c78     F2 04 02 F1 | 	add	_var03, objptr
09c7c     02 01 49 FC | 	wrbyte	#128, _var03
09c80     04 05 02 F6 | 	mov	_var03, _var05
09c84     02 04 66 F0 | 	shl	_var03, #2
09c88     02 04 06 F1 | 	add	_var03, #2
09c8c     F2 04 02 F1 | 	add	_var03, objptr
09c90     02 FF 48 FC | 	wrbyte	#127, _var03
09c94     04 05 02 F6 | 	mov	_var03, _var05
09c98     02 04 66 F0 | 	shl	_var03, #2
09c9c     03 04 06 F1 | 	add	_var03, #3
09ca0     F2 04 02 F1 | 	add	_var03, objptr
09ca4     02 FF 48 FC | 	wrbyte	#127, _var03
09ca8     76 00 00 FF 
09cac     80 E5 85 F1 | 	sub	objptr, ##60800
09cb0                 | LR__0785
09cb0     01 08 06 F1 | 	add	_var05, #1
09cb4     20 08 56 F2 | 	cmps	_var05, #32 wc
09cb8     18 FF 9F CD |  if_b	jmp	#LR__0783
09cbc                 | '   do: loop until lpeek(base+32*7)<32768
09cbc     56 00 00 FF 
09cc0     E4 E4 05 F1 | 	add	objptr, ##44260
09cc4                 | LR__0786
09cc4     F2 12 02 FB | 	rdlong	arg01, objptr
09cc8     E0 12 06 F1 | 	add	arg01, #224
09ccc     09 FB 01 FB | 	rdlong	result1, arg01
09cd0     40 00 00 FF 
09cd4     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09cd8     E8 FF 9F 3D |  if_ae	jmp	#LR__0786
09cdc                 | LR__0787
09cdc     00 13 02 F6 | 	mov	arg01, _var01
09ce0     04 12 06 F1 | 	add	arg01, #4
09ce4     01 05 02 F6 | 	mov	_var03, _var02
09ce8     02 04 66 F0 | 	shl	_var03, #2
09cec     02 13 02 F1 | 	add	arg01, _var03
09cf0     09 07 02 FB | 	rdlong	_var04, arg01
09cf4     24 00 00 FF 
09cf8     C4 E4 05 F1 | 	add	objptr, ##18628
09cfc     F2 06 62 FC | 	wrlong	_var04, objptr
09d00     7A 00 00 FF 
09d04     A8 E5 85 F1 | 	sub	objptr, ##62888
09d08                 | '   q=lpeek(address+4+4*i)
09d08                 | '      for bit=0 to 31
09d08     00 08 06 F6 | 	mov	_var05, #0
09d0c     97 94 48 FB | 	callpa	#(@LR__0791-@LR__0788)>>2,fcache_load_ptr_
09d10                 | LR__0788
09d10                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
09d10     7A 00 00 FF 
09d14     A8 E5 05 F1 | 	add	objptr, ##62888
09d18     F2 06 02 FB | 	rdlong	_var04, objptr
09d1c     7A 00 00 FF 
09d20     A8 E5 85 F1 | 	sub	objptr, ##62888
09d24     04 05 C2 F9 | 	decod	_var03, _var05
09d28     02 07 CA F7 | 	test	_var04, _var03 wz
09d2c     80 00 90 AD |  if_e	jmp	#LR__0789
09d30     04 0B 02 F6 | 	mov	_var06, _var05
09d34     02 0A 66 F0 | 	shl	_var06, #2
09d38     80 04 06 F6 | 	mov	_var03, #128
09d3c     05 05 02 F1 | 	add	_var03, _var06
09d40     76 00 00 FF 
09d44     80 E5 05 F1 | 	add	objptr, ##60800
09d48     F2 04 02 F1 | 	add	_var03, objptr
09d4c     02 FF 48 FC | 	wrbyte	#127, _var03
09d50     04 0B 02 F6 | 	mov	_var06, _var05
09d54     02 0A 66 F0 | 	shl	_var06, #2
09d58     80 04 06 F6 | 	mov	_var03, #128
09d5c     05 05 02 F1 | 	add	_var03, _var06
09d60     01 04 06 F1 | 	add	_var03, #1
09d64     F2 04 02 F1 | 	add	_var03, objptr
09d68     02 01 49 FC | 	wrbyte	#128, _var03
09d6c     04 0B 02 F6 | 	mov	_var06, _var05
09d70     02 0A 66 F0 | 	shl	_var06, #2
09d74     80 04 06 F6 | 	mov	_var03, #128
09d78     05 05 02 F1 | 	add	_var03, _var06
09d7c     02 04 06 F1 | 	add	_var03, #2
09d80     F2 04 02 F1 | 	add	_var03, objptr
09d84     02 FF 48 FC | 	wrbyte	#127, _var03
09d88     04 0B 02 F6 | 	mov	_var06, _var05
09d8c     02 0A 66 F0 | 	shl	_var06, #2
09d90     80 04 06 F6 | 	mov	_var03, #128
09d94     05 05 02 F1 | 	add	_var03, _var06
09d98     03 04 06 F1 | 	add	_var03, #3
09d9c     F2 04 02 F1 | 	add	_var03, objptr
09da0     02 01 49 FC | 	wrbyte	#128, _var03
09da4     76 00 00 FF 
09da8     80 E5 85 F1 | 	sub	objptr, ##60800
09dac     7C 00 90 FD | 	jmp	#LR__0790
09db0                 | LR__0789
09db0     04 0B 02 F6 | 	mov	_var06, _var05
09db4     02 0A 66 F0 | 	shl	_var06, #2
09db8     80 04 06 F6 | 	mov	_var03, #128
09dbc     05 05 02 F1 | 	add	_var03, _var06
09dc0     76 00 00 FF 
09dc4     80 E5 05 F1 | 	add	objptr, ##60800
09dc8     F2 04 02 F1 | 	add	_var03, objptr
09dcc     02 01 49 FC | 	wrbyte	#128, _var03
09dd0     04 0B 02 F6 | 	mov	_var06, _var05
09dd4     02 0A 66 F0 | 	shl	_var06, #2
09dd8     80 04 06 F6 | 	mov	_var03, #128
09ddc     05 05 02 F1 | 	add	_var03, _var06
09de0     01 04 06 F1 | 	add	_var03, #1
09de4     F2 04 02 F1 | 	add	_var03, objptr
09de8     02 01 49 FC | 	wrbyte	#128, _var03
09dec     04 0B 02 F6 | 	mov	_var06, _var05
09df0     02 0A 66 F0 | 	shl	_var06, #2
09df4     80 04 06 F6 | 	mov	_var03, #128
09df8     05 05 02 F1 | 	add	_var03, _var06
09dfc     02 04 06 F1 | 	add	_var03, #2
09e00     F2 04 02 F1 | 	add	_var03, objptr
09e04     02 FF 48 FC | 	wrbyte	#127, _var03
09e08     04 0B 02 F6 | 	mov	_var06, _var05
09e0c     02 0A 66 F0 | 	shl	_var06, #2
09e10     80 04 06 F6 | 	mov	_var03, #128
09e14     05 05 02 F1 | 	add	_var03, _var06
09e18     03 04 06 F1 | 	add	_var03, #3
09e1c     F2 04 02 F1 | 	add	_var03, objptr
09e20     02 FF 48 FC | 	wrbyte	#127, _var03
09e24     76 00 00 FF 
09e28     80 E5 85 F1 | 	sub	objptr, ##60800
09e2c                 | LR__0790
09e2c     01 08 06 F1 | 	add	_var05, #1
09e30     20 08 56 F2 | 	cmps	_var05, #32 wc
09e34     D8 FE 9F CD |  if_b	jmp	#LR__0788
09e38                 | LR__0791
09e38     02 02 06 F1 | 	add	_var02, #2
09e3c     40 02 56 F2 | 	cmps	_var02, #64 wc
09e40     3C FD 9F CD |  if_b	jmp	#LR__0780
09e44                 | ' do: loop until lpeek(base+32*7)>32768
09e44     56 00 00 FF 
09e48     E4 E4 05 F1 | 	add	objptr, ##44260
09e4c     97 84 48 FB | 	callpa	#(@LR__0800-@LR__0792)>>2,fcache_load_ptr_
09e50                 | LR__0792
09e50     F2 12 02 FB | 	rdlong	arg01, objptr
09e54     E0 12 06 F1 | 	add	arg01, #224
09e58     09 FB 01 FB | 	rdlong	result1, arg01
09e5c     40 00 00 FF 
09e60     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09e64     E8 FF 9F CD |  if_b	jmp	#LR__0792
09e68     56 00 00 FF 
09e6c     E4 E4 85 F1 | 	sub	objptr, ##44260
09e70                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09e70     00 02 06 F6 | 	mov	_var02, #0
09e74                 | LR__0793
09e74     01 07 52 F6 | 	abs	_var04, _var02 wc
09e78     07 06 06 F5 | 	and	_var04, #7
09e7c     03 07 82 F6 | 	negc	_var04, _var04
09e80     04 06 56 F2 | 	cmps	_var04, #4 wc
09e84     20 00 90 3D |  if_ae	jmp	#LR__0794
09e88     01 0B 02 F6 | 	mov	_var06, _var02
09e8c     76 00 00 FF 
09e90     80 E5 05 F1 | 	add	objptr, ##60800
09e94     F2 0A 02 F1 | 	add	_var06, objptr
09e98     05 FF 48 FC | 	wrbyte	#127, _var06
09e9c     76 00 00 FF 
09ea0     80 E5 85 F1 | 	sub	objptr, ##60800
09ea4     1C 00 90 FD | 	jmp	#LR__0795
09ea8                 | LR__0794
09ea8     01 0B 02 F6 | 	mov	_var06, _var02
09eac     76 00 00 FF 
09eb0     80 E5 05 F1 | 	add	objptr, ##60800
09eb4     F2 0A 02 F1 | 	add	_var06, objptr
09eb8     05 01 49 FC | 	wrbyte	#128, _var06
09ebc     76 00 00 FF 
09ec0     80 E5 85 F1 | 	sub	objptr, ##60800
09ec4                 | LR__0795
09ec4     01 02 06 F1 | 	add	_var02, #1
09ec8     80 02 56 F2 | 	cmps	_var02, #128 wc
09ecc     A4 FF 9F CD |  if_b	jmp	#LR__0793
09ed0                 | ' 
09ed0                 | ' do: loop until lpeek(base+32*7)<32768
09ed0     56 00 00 FF 
09ed4     E4 E4 05 F1 | 	add	objptr, ##44260
09ed8                 | LR__0796
09ed8     F2 12 02 FB | 	rdlong	arg01, objptr
09edc     E0 12 06 F1 | 	add	arg01, #224
09ee0     09 FB 01 FB | 	rdlong	result1, arg01
09ee4     40 00 00 FF 
09ee8     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09eec     E8 FF 9F 3D |  if_ae	jmp	#LR__0796
09ef0     56 00 00 FF 
09ef4     E4 E4 85 F1 | 	sub	objptr, ##44260
09ef8                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09ef8     80 02 06 F6 | 	mov	_var02, #128
09efc                 | LR__0797
09efc     01 07 52 F6 | 	abs	_var04, _var02 wc
09f00     07 06 06 F5 | 	and	_var04, #7
09f04     03 07 82 F6 | 	negc	_var04, _var04
09f08     04 06 56 F2 | 	cmps	_var04, #4 wc
09f0c     20 00 90 3D |  if_ae	jmp	#LR__0798
09f10     01 0B 02 F6 | 	mov	_var06, _var02
09f14     76 00 00 FF 
09f18     80 E5 05 F1 | 	add	objptr, ##60800
09f1c     F2 0A 02 F1 | 	add	_var06, objptr
09f20     05 FF 48 FC | 	wrbyte	#127, _var06
09f24     76 00 00 FF 
09f28     80 E5 85 F1 | 	sub	objptr, ##60800
09f2c     1C 00 90 FD | 	jmp	#LR__0799
09f30                 | LR__0798
09f30     01 0B 02 F6 | 	mov	_var06, _var02
09f34     76 00 00 FF 
09f38     80 E5 05 F1 | 	add	objptr, ##60800
09f3c     F2 0A 02 F1 | 	add	_var06, objptr
09f40     05 01 49 FC | 	wrbyte	#128, _var06
09f44     76 00 00 FF 
09f48     80 E5 85 F1 | 	sub	objptr, ##60800
09f4c                 | LR__0799
09f4c     01 02 06 F1 | 	add	_var02, #1
09f50     00 03 16 F2 | 	cmp	_var02, #256 wc
09f54     A4 FF 9F CD |  if_b	jmp	#LR__0797
09f58                 | LR__0800
09f58                 | _csave_block_ret
09f58     2D 00 64 FD | 	ret
09f5c                 | 
09f5c                 | ' 
09f5c                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
09f5c                 | _csave_addtoblock
09f5c     04 4A 05 F6 | 	mov	COUNT_, #4
09f60     A8 00 A0 FD | 	call	#pushregs_
09f64     09 1F 02 F6 | 	mov	local01, arg01
09f68                 | ' 
09f68                 | ' 
09f68                 | ' if force=0 then
09f68     07 14 4E F7 | 	zerox	arg02, #7 wz
09f6c     78 00 90 5D |  if_ne	jmp	#LR__0810
09f70     79 00 00 FF 
09f74     80 E4 05 F1 | 	add	objptr, ##62080
09f78     F2 14 02 FB | 	rdlong	arg02, objptr
09f7c     02 00 00 FF 
09f80     00 E4 85 F1 | 	sub	objptr, ##1024
09f84     F2 14 02 F1 | 	add	arg02, objptr
09f88     0A 1F 42 FC | 	wrbyte	local01, arg02
09f8c     02 00 00 FF 
09f90     00 E4 05 F1 | 	add	objptr, ##1024
09f94     F2 1E 02 FB | 	rdlong	local01, objptr
09f98     01 1E 06 F1 | 	add	local01, #1
09f9c     F2 1E 62 FC | 	wrlong	local01, objptr
09fa0                 | '   block(blockptr)=d
09fa0                 | '   blockptr+=1
09fa0                 | '   if blockptr>=255 then
09fa0     79 00 00 FF 
09fa4     80 E4 85 F1 | 	sub	objptr, ##62080
09fa8     FF 1E 16 F2 | 	cmp	local01, #255 wc
09fac     E4 00 90 CD |  if_b	jmp	#LR__0814
09fb0     77 00 00 FF 
09fb4     80 E4 05 F1 | 	add	objptr, ##61056
09fb8     F2 12 02 F6 | 	mov	arg01, objptr
09fbc     77 00 00 FF 
09fc0     80 E4 85 F1 | 	sub	objptr, ##61056
09fc4     B0 FB BF FD | 	call	#_csave_block
09fc8     79 00 00 FF 
09fcc     80 E4 05 F1 | 	add	objptr, ##62080
09fd0     F2 00 68 FC | 	wrlong	#0, objptr
09fd4     79 00 00 FF 
09fd8     80 E4 85 F1 | 	sub	objptr, ##62080
09fdc     2C 13 06 F6 | 	mov	arg01, #300
09fe0     E8 F0 B0 FD | 	call	#__system___waitms
09fe4     AC 00 90 FD | 	jmp	#LR__0814
09fe8                 | LR__0810
09fe8     79 00 00 FF 
09fec     80 E4 05 F1 | 	add	objptr, ##62080
09ff0     F2 20 02 FB | 	rdlong	local02, objptr
09ff4     02 00 00 FF 
09ff8     00 E4 85 F1 | 	sub	objptr, ##1024
09ffc     F2 20 02 F1 | 	add	local02, objptr
0a000     10 1F 42 FC | 	wrbyte	local01, local02
0a004                 | '   block(blockptr)=d
0a004                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0a004     02 00 00 FF 
0a008     00 E4 05 F1 | 	add	objptr, ##1024
0a00c     F2 22 02 FB | 	rdlong	local03, objptr
0a010     79 00 00 FF 
0a014     80 E4 85 F1 | 	sub	objptr, ##62080
0a018     FF 22 16 F2 | 	cmp	local03, #255 wc
0a01c     40 00 90 3D |  if_ae	jmp	#LR__0813
0a020     79 00 00 FF 
0a024     80 E4 05 F1 | 	add	objptr, ##62080
0a028     F2 24 02 FB | 	rdlong	local04, objptr
0a02c     79 00 00 FF 
0a030     80 E4 85 F1 | 	sub	objptr, ##62080
0a034                 | LR__0811
0a034     00 25 56 F2 | 	cmps	local04, #256 wc
0a038     24 00 90 3D |  if_ae	jmp	#LR__0812
0a03c     12 21 02 F6 | 	mov	local02, local04
0a040     77 00 00 FF 
0a044     80 E4 05 F1 | 	add	objptr, ##61056
0a048     F2 20 02 F1 | 	add	local02, objptr
0a04c     10 01 48 FC | 	wrbyte	#0, local02
0a050     01 24 06 F1 | 	add	local04, #1
0a054     77 00 00 FF 
0a058     80 E4 85 F1 | 	sub	objptr, ##61056
0a05c     D4 FF 9F FD | 	jmp	#LR__0811
0a060                 | LR__0812
0a060                 | LR__0813
0a060     77 00 00 FF 
0a064     80 E4 05 F1 | 	add	objptr, ##61056
0a068     F2 12 02 F6 | 	mov	arg01, objptr
0a06c     77 00 00 FF 
0a070     80 E4 85 F1 | 	sub	objptr, ##61056
0a074     00 FB BF FD | 	call	#_csave_block
0a078     79 00 00 FF 
0a07c     80 E4 05 F1 | 	add	objptr, ##62080
0a080     F2 00 68 FC | 	wrlong	#0, objptr
0a084     79 00 00 FF 
0a088     80 E4 85 F1 | 	sub	objptr, ##62080
0a08c     2C 13 06 F6 | 	mov	arg01, #300
0a090     38 F0 B0 FD | 	call	#__system___waitms
0a094                 | LR__0814
0a094     A7 F0 03 F6 | 	mov	ptra, fp
0a098     B2 00 A0 FD | 	call	#popregs_
0a09c                 | _csave_addtoblock_ret
0a09c     2D 00 64 FD | 	ret
0a0a0                 | 
0a0a0                 | ' 
0a0a0                 | ' sub test_csave
0a0a0                 | _test_csave
0a0a0     04 4A 05 F6 | 	mov	COUNT_, #4
0a0a4     A8 00 A0 FD | 	call	#pushregs_
0a0a8     C0 F0 07 F1 | 	add	ptra, #192
0a0ac                 | ' 'dim fileheader,savestart, saveptr as ulong
0a0ac                 | ' 
0a0ac                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a0ac     69 00 00 FF 
0a0b0     58 E5 05 F1 | 	add	objptr, ##54104
0a0b4     F2 12 02 FB | 	rdlong	arg01, objptr
0a0b8     69 00 00 FF 
0a0bc     58 E5 85 F1 | 	sub	objptr, ##54104
0a0c0     4C B9 B0 FD | 	call	#_pslpeek
0a0c4     FF FF 7F FF 
0a0c8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a0cc     0C 00 90 5D |  if_ne	jmp	#LR__0820
0a0d0     1B 12 06 F6 | 	mov	arg01, #27
0a0d4     7C B7 B0 FD | 	call	#_printerror
0a0d8     0C 03 90 FD | 	jmp	#LR__0832
0a0dc                 | LR__0820
0a0dc     04 F8 BF FD | 	call	#_pop
0a0e0     FF 1E 02 F6 | 	mov	local01, result3
0a0e4     90 4E 05 F1 | 	add	fp, #144
0a0e8     A7 FA 61 FC | 	wrlong	result1, fp
0a0ec     04 4E 05 F1 | 	add	fp, #4
0a0f0     A7 FC 61 FC | 	wrlong	result2, fp
0a0f4     04 4E 05 F1 | 	add	fp, #4
0a0f8     A7 1E 62 FC | 	wrlong	local01, fp
0a0fc                 | ' t1=pop()
0a0fc                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
0a0fc     98 4E 85 F1 | 	sub	fp, #152
0a100     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a104     43 01 00 5F 
0a108     D9 1F 06 56 |  if_ne	mov	local01, ##@LR__4557
0a10c     8C 4E 05 51 |  if_ne	add	fp, #140
0a110     A7 1E 62 5C |  if_ne	wrlong	local01, fp
0a114     8C 4E 85 51 |  if_ne	sub	fp, #140
0a118     90 4E 05 A1 |  if_e	add	fp, #144
0a11c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0a120     04 4E 85 A1 |  if_e	sub	fp, #4
0a124     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a128     8C 4E 85 A1 |  if_e	sub	fp, #140
0a12c                 | ' 
0a12c                 | ' ' prepare 1 kHz header wave
0a12c                 | ' 
0a12c                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a12c     A7 00 68 FC | 	wrlong	#0, fp
0a130     97 34 48 FB | 	callpa	#(@LR__0824-@LR__0821)>>2,fcache_load_ptr_
0a134                 | LR__0821
0a134     A7 1E 02 FB | 	rdlong	local01, fp
0a138     0F 1F 52 F6 | 	abs	local01, local01 wc
0a13c     07 1E 06 F5 | 	and	local01, #7
0a140     0F 1F 82 F6 | 	negc	local01, local01
0a144     04 1E 56 F2 | 	cmps	local01, #4 wc
0a148     20 00 90 3D |  if_ae	jmp	#LR__0822
0a14c     A7 1E 02 FB | 	rdlong	local01, fp
0a150     76 00 00 FF 
0a154     80 E5 05 F1 | 	add	objptr, ##60800
0a158     F2 1E 02 F1 | 	add	local01, objptr
0a15c     0F FF 48 FC | 	wrbyte	#127, local01
0a160     76 00 00 FF 
0a164     80 E5 85 F1 | 	sub	objptr, ##60800
0a168     1C 00 90 FD | 	jmp	#LR__0823
0a16c                 | LR__0822
0a16c     A7 1E 02 FB | 	rdlong	local01, fp
0a170     76 00 00 FF 
0a174     80 E5 05 F1 | 	add	objptr, ##60800
0a178     F2 1E 02 F1 | 	add	local01, objptr
0a17c     0F 01 49 FC | 	wrbyte	#128, local01
0a180     76 00 00 FF 
0a184     80 E5 85 F1 | 	sub	objptr, ##60800
0a188                 | LR__0823
0a188     A7 1E 02 FB | 	rdlong	local01, fp
0a18c     01 1E 06 F1 | 	add	local01, #1
0a190     A7 1E 62 FC | 	wrlong	local01, fp
0a194     00 1F 56 F2 | 	cmps	local01, #256 wc
0a198     98 FF 9F CD |  if_b	jmp	#LR__0821
0a19c                 | LR__0824
0a19c     76 00 00 FF 
0a1a0     80 E5 05 F1 | 	add	objptr, ##60800
0a1a4     F2 14 02 F6 | 	mov	arg02, objptr
0a1a8     07 12 06 F6 | 	mov	arg01, #7
0a1ac     0F 00 00 FF 
0a1b0     40 17 06 F6 | 	mov	arg03, ##8000
0a1b4     0E 18 C6 F9 | 	decod	arg04, #14
0a1b8     00 1B 06 F6 | 	mov	arg05, #256
0a1bc     00 1C 06 F6 | 	mov	arg06, #0
0a1c0     6B 00 00 FF 
0a1c4     C0 E4 85 F1 | 	sub	objptr, ##54976
0a1c8     70 E8 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
0a1cc     0B 00 00 FF 
0a1d0     C0 E4 85 F1 | 	sub	objptr, ##5824
0a1d4     05 00 00 FF 
0a1d8     B8 13 06 F6 | 	mov	arg01, ##3000
0a1dc     EC EE B0 FD | 	call	#__system___waitms
0a1e0     79 00 00 FF 
0a1e4     80 E4 05 F1 | 	add	objptr, ##62080
0a1e8     F2 00 68 FC | 	wrlong	#0, objptr
0a1ec     79 00 00 FF 
0a1f0     80 E4 85 F1 | 	sub	objptr, ##62080
0a1f4     72 12 06 F6 | 	mov	arg01, #114
0a1f8     00 14 06 F6 | 	mov	arg02, #0
0a1fc     5C FD BF FD | 	call	#_csave_addtoblock
0a200     62 12 06 F6 | 	mov	arg01, #98
0a204     00 14 06 F6 | 	mov	arg02, #0
0a208     50 FD BF FD | 	call	#_csave_addtoblock
0a20c     61 12 06 F6 | 	mov	arg01, #97
0a210     00 14 06 F6 | 	mov	arg02, #0
0a214     44 FD BF FD | 	call	#_csave_addtoblock
0a218     0D 12 06 F6 | 	mov	arg01, #13
0a21c     00 14 06 F6 | 	mov	arg02, #0
0a220     38 FD BF FD | 	call	#_csave_addtoblock
0a224                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0a224                 | ' waitms 3000 
0a224                 | ' 
0a224                 | ' blockptr=0
0a224                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0a224                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0a224     A7 02 68 FC | 	wrlong	#1, fp
0a228     8C 4E 05 F1 | 	add	fp, #140
0a22c     A7 12 02 FB | 	rdlong	arg01, fp
0a230     8C 4E 85 F1 | 	sub	fp, #140
0a234     09 21 02 F6 | 	mov	local02, arg01
0a238     97 06 48 FB | 	callpa	#(@LR__0826-@LR__0825)>>2,fcache_load_ptr_
0a23c                 | LR__0825
0a23c     10 FB C9 FA | 	rdbyte	result1, local02 wz
0a240     01 20 06 51 |  if_ne	add	local02, #1
0a244     F4 FF 9F 5D |  if_ne	jmp	#LR__0825
0a248                 | LR__0826
0a248     09 21 82 F1 | 	sub	local02, arg01
0a24c     10 23 02 F6 | 	mov	local03, local02
0a250     01 22 06 F1 | 	add	local03, #1
0a254                 | LR__0827
0a254     A7 1E 02 FB | 	rdlong	local01, fp
0a258     11 1F 52 F2 | 	cmps	local01, local03 wc
0a25c     34 00 90 3D |  if_ae	jmp	#LR__0828
0a260     8C 4E 05 F1 | 	add	fp, #140
0a264     A7 12 02 FB | 	rdlong	arg01, fp
0a268     8C 4E 85 F1 | 	sub	fp, #140
0a26c     A7 14 02 FB | 	rdlong	arg02, fp
0a270     01 16 06 F6 | 	mov	arg03, #1
0a274     88 0C B1 FD | 	call	#__system__Mid_S
0a278     FD 12 C2 FA | 	rdbyte	arg01, result1
0a27c     00 14 06 F6 | 	mov	arg02, #0
0a280     D8 FC BF FD | 	call	#_csave_addtoblock
0a284     A7 1E 02 FB | 	rdlong	local01, fp
0a288     01 1E 06 F1 | 	add	local01, #1
0a28c     A7 1E 62 FC | 	wrlong	local01, fp
0a290     C0 FF 9F FD | 	jmp	#LR__0827
0a294                 | LR__0828
0a294     00 12 06 F6 | 	mov	arg01, #0
0a298     00 14 06 F6 | 	mov	arg02, #0
0a29c     BC FC BF FD | 	call	#_csave_addtoblock
0a2a0     72 12 06 F6 | 	mov	arg01, #114
0a2a4     00 14 06 F6 | 	mov	arg02, #0
0a2a8     B0 FC BF FD | 	call	#_csave_addtoblock
0a2ac     62 12 06 F6 | 	mov	arg01, #98
0a2b0     00 14 06 F6 | 	mov	arg02, #0
0a2b4     A4 FC BF FD | 	call	#_csave_addtoblock
0a2b8     73 12 06 F6 | 	mov	arg01, #115
0a2bc     00 14 06 F6 | 	mov	arg02, #0
0a2c0     98 FC BF FD | 	call	#_csave_addtoblock
0a2c4     0D 12 06 F6 | 	mov	arg01, #13
0a2c8     00 14 06 F6 | 	mov	arg02, #0
0a2cc     8C FC BF FD | 	call	#_csave_addtoblock
0a2d0     69 00 00 FF 
0a2d4     58 E5 05 F1 | 	add	objptr, ##54104
0a2d8     F2 1E 02 FB | 	rdlong	local01, objptr
0a2dc     69 00 00 FF 
0a2e0     58 E5 85 F1 | 	sub	objptr, ##54104
0a2e4     9C 4E 05 F1 | 	add	fp, #156
0a2e8     A7 1E 62 FC | 	wrlong	local01, fp
0a2ec     9C 4E 85 F1 | 	sub	fp, #156
0a2f0                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0a2f0                 | ' 
0a2f0                 | ' saveptr=programstart
0a2f0                 | ' do
0a2f0                 | LR__0829
0a2f0     A0 4E 05 F1 | 	add	fp, #160
0a2f4     A7 12 02 F6 | 	mov	arg01, fp
0a2f8     04 4E 85 F1 | 	sub	fp, #4
0a2fc     A7 14 02 FB | 	rdlong	arg02, fp
0a300     9C 4E 85 F1 | 	sub	fp, #156
0a304     18 16 06 F6 | 	mov	arg03, #24
0a308     0B 00 00 FF 
0a30c     C0 E4 05 F1 | 	add	objptr, ##5824
0a310     74 DF B0 FD | 	call	#_psram_spin2_read1
0a314     0C 4E 05 F1 | 	add	fp, #12
0a318     A7 12 02 F6 | 	mov	arg01, fp
0a31c     9C 4E 05 F1 | 	add	fp, #156
0a320     A7 14 02 FB | 	rdlong	arg02, fp
0a324     04 4E 05 F1 | 	add	fp, #4
0a328     A7 16 02 FB | 	rdlong	arg03, fp
0a32c     AC 4E 85 F1 | 	sub	fp, #172
0a330     54 DF B0 FD | 	call	#_psram_spin2_read1
0a334     0B 00 00 FF 
0a338     C0 E4 85 F1 | 	sub	objptr, ##5824
0a33c     AC 4E 05 F1 | 	add	fp, #172
0a340     A7 12 02 FB | 	rdlong	arg01, fp
0a344     AC 4E 85 F1 | 	sub	fp, #172
0a348     00 14 06 F6 | 	mov	arg02, #0
0a34c     0C FC BF FD | 	call	#_csave_addtoblock
0a350                 | '   psram.read1(varptr(header(0)),saveptr,24)
0a350                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0a350                 | '   csave_addtoblock(header(3),0) ' that's always <255
0a350                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0a350     A7 00 68 FC | 	wrlong	#0, fp
0a354     AC 4E 05 F1 | 	add	fp, #172
0a358     A7 24 02 FB | 	rdlong	local04, fp
0a35c     AC 4E 85 F1 | 	sub	fp, #172
0a360                 | LR__0830
0a360     A7 1E 02 FB | 	rdlong	local01, fp
0a364     12 1F 52 F2 | 	cmps	local01, local04 wc
0a368     2C 00 90 3D |  if_ae	jmp	#LR__0831
0a36c     A7 22 02 FB | 	rdlong	local03, fp
0a370     0C 4E 05 F1 | 	add	fp, #12
0a374     A7 22 02 F1 | 	add	local03, fp
0a378     11 13 C2 FA | 	rdbyte	arg01, local03
0a37c     00 14 06 F6 | 	mov	arg02, #0
0a380     0C 4E 85 F1 | 	sub	fp, #12
0a384     D4 FB BF FD | 	call	#_csave_addtoblock
0a388     A7 22 02 FB | 	rdlong	local03, fp
0a38c     01 22 06 F1 | 	add	local03, #1
0a390     A7 22 62 FC | 	wrlong	local03, fp
0a394     C8 FF 9F FD | 	jmp	#LR__0830
0a398                 | LR__0831
0a398     B4 4E 05 F1 | 	add	fp, #180
0a39c     A7 1E 02 FB | 	rdlong	local01, fp
0a3a0     18 4E 85 F1 | 	sub	fp, #24
0a3a4     A7 1E 62 FC | 	wrlong	local01, fp
0a3a8     18 4E 05 F1 | 	add	fp, #24
0a3ac     A7 1E 02 FB | 	rdlong	local01, fp
0a3b0     B4 4E 85 F1 | 	sub	fp, #180
0a3b4     FF FF 3F FF 
0a3b8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a3bc     30 FF 9F 5D |  if_ne	jmp	#LR__0829
0a3c0     00 12 06 F6 | 	mov	arg01, #0
0a3c4     01 14 06 F6 | 	mov	arg02, #1
0a3c8     90 FB BF FD | 	call	#_csave_addtoblock
0a3cc     56 00 00 FF 
0a3d0     E4 E4 05 F1 | 	add	objptr, ##44260
0a3d4     F2 12 02 FB | 	rdlong	arg01, objptr
0a3d8     56 00 00 FF 
0a3dc     E4 E4 85 F1 | 	sub	objptr, ##44260
0a3e0     F4 12 06 F1 | 	add	arg01, #244
0a3e4     09 01 58 FC | 	wrword	#0, arg01
0a3e8                 | LR__0832
0a3e8     A7 F0 03 F6 | 	mov	ptra, fp
0a3ec     B2 00 A0 FD | 	call	#popregs_
0a3f0                 | _test_csave_ret
0a3f0     2D 00 64 FD | 	ret
0a3f4                 | 
0a3f4                 | ' 
0a3f4                 | ' ' ----------------- Save the program
0a3f4                 | ' 
0a3f4                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0a3f4                 | _do_save
0a3f4     02 4A 05 F6 | 	mov	COUNT_, #2
0a3f8     A8 00 A0 FD | 	call	#pushregs_
0a3fc     01 00 00 FF 
0a400     BC F0 07 F1 | 	add	ptra, ##700
0a404     01 00 00 FF 
0a408     10 4E 05 F1 | 	add	fp, ##528
0a40c     B1 B0 86 FF 
0a410     A7 E4 68 FC | 	wrlong	##224486002, fp
0a414     01 00 00 FF 
0a418     10 4E 85 F1 | 	sub	fp, ##528
0a41c     C4 F4 BF FD | 	call	#_pop
0a420     FF 16 02 F6 | 	mov	arg03, result3
0a424     A7 FA 61 FC | 	wrlong	result1, fp
0a428     04 4E 05 F1 | 	add	fp, #4
0a42c     A7 FC 61 FC | 	wrlong	result2, fp
0a430     04 4E 05 F1 | 	add	fp, #4
0a434     A7 16 62 FC | 	wrlong	arg03, fp
0a438     08 4E 85 F1 | 	sub	fp, #8
0a43c                 | ' 
0a43c                 | ' fileheader=$0D616272' rba+ver'
0a43c                 | ' 
0a43c                 | ' t1=pop() 
0a43c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a43c     69 00 00 FF 
0a440     58 E5 05 F1 | 	add	objptr, ##54104
0a444     F2 12 02 FB | 	rdlong	arg01, objptr
0a448     69 00 00 FF 
0a44c     58 E5 85 F1 | 	sub	objptr, ##54104
0a450     BC B5 B0 FD | 	call	#_pslpeek
0a454     FF FF 7F FF 
0a458     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a45c     0C 00 90 5D |  if_ne	jmp	#LR__0840
0a460     1B 12 06 F6 | 	mov	arg01, #27
0a464     EC B3 B0 FD | 	call	#_printerror
0a468     68 02 90 FD | 	jmp	#LR__0846
0a46c                 | LR__0840
0a46c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0a46c     08 4E 05 F1 | 	add	fp, #8
0a470     A7 16 02 FB | 	rdlong	arg03, fp
0a474     08 4E 85 F1 | 	sub	fp, #8
0a478     2B 16 0E F2 | 	cmp	arg03, #43 wz
0a47c     18 00 90 5D |  if_ne	jmp	#LR__0841
0a480     A7 12 02 FB | 	rdlong	arg01, fp
0a484     98 25 B0 FD | 	call	#_convertstring
0a488     A7 FA 61 FC | 	wrlong	result1, fp
0a48c     08 4E 05 F1 | 	add	fp, #8
0a490     A7 3E 68 FC | 	wrlong	#31, fp
0a494     08 4E 85 F1 | 	sub	fp, #8
0a498                 | LR__0841
0a498                 | ' if t1.result_type=result_string then
0a498     08 4E 05 F1 | 	add	fp, #8
0a49c     A7 1E 02 FB | 	rdlong	local01, fp
0a4a0     08 4E 85 F1 | 	sub	fp, #8
0a4a4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a4a8     28 02 90 5D |  if_ne	jmp	#LR__0845
0a4ac                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0a4ac     A7 12 02 FB | 	rdlong	arg01, fp
0a4b0     43 01 00 FF 
0a4b4     E4 15 06 F6 | 	mov	arg02, ##@LR__4558
0a4b8     44 E9 B0 FD | 	call	#__system___string_cmp
0a4bc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4c0     43 01 00 AF 
0a4c4     E5 1F 06 A6 |  if_e	mov	local01, ##@LR__4559
0a4c8     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a4cc                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0a4cc     09 12 06 F6 | 	mov	arg01, #9
0a4d0     38 38 B1 FD | 	call	#__system__close
0a4d4     09 1E 06 F6 | 	mov	local01, #9
0a4d8     71 00 00 FF 
0a4dc     68 E5 05 F1 | 	add	objptr, ##58216
0a4e0     F2 12 02 FB | 	rdlong	arg01, objptr
0a4e4     71 00 00 FF 
0a4e8     68 E5 85 F1 | 	sub	objptr, ##58216
0a4ec     43 01 00 FF 
0a4f0     F0 15 06 F6 | 	mov	arg02, ##@LR__4560
0a4f4     3C E9 B0 FD | 	call	#__system___string_concat
0a4f8     FD 12 02 F6 | 	mov	arg01, result1
0a4fc     A7 14 02 FB | 	rdlong	arg02, fp
0a500     30 E9 B0 FD | 	call	#__system___string_concat
0a504     FD 14 02 F6 | 	mov	arg02, result1
0a508     0F 13 02 F6 | 	mov	arg01, local01
0a50c     0D 16 06 F6 | 	mov	arg03, #13
0a510     C8 F4 B0 FD | 	call	#__system___basic_open_string
0a514     01 00 00 FF 
0a518     0C 4E 05 F1 | 	add	fp, ##524
0a51c     A7 0A 68 FC | 	wrlong	#5, fp
0a520     69 00 00 FF 
0a524     58 E5 05 F1 | 	add	objptr, ##54104
0a528     F2 1E 02 FB | 	rdlong	local01, objptr
0a52c     69 00 00 FF 
0a530     58 E5 85 F1 | 	sub	objptr, ##54104
0a534     0C 4E 05 F1 | 	add	fp, #12
0a538     A7 1E 62 FC | 	wrlong	local01, fp
0a53c     01 00 00 FF 
0a540     18 4E 85 F1 | 	sub	fp, ##536
0a544                 | ' '  put #9,1,fileheader,1
0a544                 | '   i=5
0a544                 | '   saveptr=programstart
0a544                 | '   do
0a544                 | LR__0842
0a544     01 00 00 FF 
0a548     1C 4E 05 F1 | 	add	fp, ##540
0a54c     A7 12 02 F6 | 	mov	arg01, fp
0a550     04 4E 85 F1 | 	sub	fp, #4
0a554     A7 14 02 FB | 	rdlong	arg02, fp
0a558     01 00 00 FF 
0a55c     18 4E 85 F1 | 	sub	fp, ##536
0a560     18 16 06 F6 | 	mov	arg03, #24
0a564     0B 00 00 FF 
0a568     C0 E4 05 F1 | 	add	objptr, ##5824
0a56c     18 DD B0 FD | 	call	#_psram_spin2_read1
0a570     01 00 00 FF 
0a574     34 4E 05 F1 | 	add	fp, ##564
0a578     A7 12 02 F6 | 	mov	arg01, fp
0a57c     10 4E 85 F1 | 	sub	fp, #16
0a580     A7 14 02 FB | 	rdlong	arg02, fp
0a584     04 4E 05 F1 | 	add	fp, #4
0a588     A7 16 02 FB | 	rdlong	arg03, fp
0a58c     01 00 00 FF 
0a590     28 4E 85 F1 | 	sub	fp, ##552
0a594     F0 DC B0 FD | 	call	#_psram_spin2_read1
0a598     0B 00 00 FF 
0a59c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a5a0     43 01 00 FF 
0a5a4     F2 1F 06 F6 | 	mov	local01, ##@LR__4561
0a5a8     01 00 00 FF 
0a5ac     B4 4E 05 F1 | 	add	fp, ##692
0a5b0     A7 1E 62 FC | 	wrlong	local01, fp
0a5b4                 | '     psram.read1(varptr(header(0)),saveptr,24)
0a5b4                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0a5b4                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0a5b4     A8 4E 85 F1 | 	sub	fp, #168
0a5b8     A7 02 68 FC | 	wrlong	#1, fp
0a5bc     1C 4E 05 F1 | 	add	fp, #28
0a5c0     A7 20 02 FB | 	rdlong	local02, fp
0a5c4     01 00 00 FF 
0a5c8     28 4E 85 F1 | 	sub	fp, ##552
0a5cc     01 20 06 F1 | 	add	local02, #1
0a5d0                 | LR__0843
0a5d0     01 00 00 FF 
0a5d4     0C 4E 05 F1 | 	add	fp, ##524
0a5d8     A7 1E 02 FB | 	rdlong	local01, fp
0a5dc     01 00 00 FF 
0a5e0     0C 4E 85 F1 | 	sub	fp, ##524
0a5e4     10 1F 52 F2 | 	cmps	local01, local02 wc
0a5e8     64 00 90 3D |  if_ae	jmp	#LR__0844
0a5ec     01 00 00 FF 
0a5f0     B4 4E 05 F1 | 	add	fp, ##692
0a5f4     A7 1E 02 FB | 	rdlong	local01, fp
0a5f8     A8 4E 85 F1 | 	sub	fp, #168
0a5fc     A7 16 02 FB | 	rdlong	arg03, fp
0a600     01 16 86 F1 | 	sub	arg03, #1
0a604     28 4E 05 F1 | 	add	fp, #40
0a608     A7 16 02 F1 | 	add	arg03, fp
0a60c     0B 13 C2 FA | 	rdbyte	arg01, arg03
0a610     01 00 00 FF 
0a614     34 4E 85 F1 | 	sub	fp, ##564
0a618     90 09 B1 FD | 	call	#__system__Chr_S
0a61c     FD 14 02 F6 | 	mov	arg02, result1
0a620     0F 13 02 F6 | 	mov	arg01, local01
0a624     0C E8 B0 FD | 	call	#__system___string_concat
0a628     01 00 00 FF 
0a62c     B4 4E 05 F1 | 	add	fp, ##692
0a630     A7 FA 61 FC | 	wrlong	result1, fp
0a634     A8 4E 85 F1 | 	sub	fp, #168
0a638     A7 1E 02 FB | 	rdlong	local01, fp
0a63c     01 1E 06 F1 | 	add	local01, #1
0a640     A7 1E 62 FC | 	wrlong	local01, fp
0a644     01 00 00 FF 
0a648     0C 4E 85 F1 | 	sub	fp, ##524
0a64c     80 FF 9F FD | 	jmp	#LR__0843
0a650                 | LR__0844
0a650                 | '  '   put #9,i,header(3),1 : i+=4
0a650                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0a650                 | '      print #9, saveline$
0a650     09 12 06 F6 | 	mov	arg01, #9
0a654     84 40 B1 FD | 	call	#__system___getiolock_0423
0a658     FD 12 02 F6 | 	mov	arg01, result1
0a65c     78 E7 B0 FD | 	call	#__system___lockmem
0a660     01 00 00 FF 
0a664     B4 4E 05 F1 | 	add	fp, ##692
0a668     A7 14 02 FB | 	rdlong	arg02, fp
0a66c     01 00 00 FF 
0a670     B4 4E 85 F1 | 	sub	fp, ##692
0a674     09 12 06 F6 | 	mov	arg01, #9
0a678     00 16 06 F6 | 	mov	arg03, #0
0a67c     4C F4 B0 FD | 	call	#__system___basic_print_string
0a680     09 12 06 F6 | 	mov	arg01, #9
0a684     0A 14 06 F6 | 	mov	arg02, #10
0a688     00 16 06 F6 | 	mov	arg03, #0
0a68c     E4 F3 B0 FD | 	call	#__system___basic_print_char
0a690     09 12 06 F6 | 	mov	arg01, #9
0a694     44 40 B1 FD | 	call	#__system___getiolock_0423
0a698     FD 00 68 FC | 	wrlong	#0, result1
0a69c     01 00 00 FF 
0a6a0     30 4E 05 F1 | 	add	fp, ##560
0a6a4     A7 1E 02 FB | 	rdlong	local01, fp
0a6a8     18 4E 85 F1 | 	sub	fp, #24
0a6ac     A7 1E 62 FC | 	wrlong	local01, fp
0a6b0     18 4E 05 F1 | 	add	fp, #24
0a6b4     A7 1E 02 FB | 	rdlong	local01, fp
0a6b8     01 00 00 FF 
0a6bc     30 4E 85 F1 | 	sub	fp, ##560
0a6c0     FF FF 3F FF 
0a6c4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a6c8     78 FE 9F 5D |  if_ne	jmp	#LR__0842
0a6cc                 | '   close #9  
0a6cc     09 12 06 F6 | 	mov	arg01, #9
0a6d0     38 36 B1 FD | 	call	#__system__close
0a6d4                 | LR__0845
0a6d4                 | LR__0846
0a6d4     A7 F0 03 F6 | 	mov	ptra, fp
0a6d8     B2 00 A0 FD | 	call	#popregs_
0a6dc                 | _do_save_ret
0a6dc     2D 00 64 FD | 	ret
0a6e0                 | 
0a6e0                 | ' 
0a6e0                 | ' '----------------- Load the program
0a6e0                 | ' 'lo todo: errors while loading
0a6e0                 | ' sub do_load
0a6e0                 | _do_load
0a6e0     01 4A 05 F6 | 	mov	COUNT_, #1
0a6e4     A8 00 A0 FD | 	call	#pushregs_
0a6e8     A4 F0 07 F1 | 	add	ptra, #164
0a6ec     A0 4E 05 F1 | 	add	fp, #160
0a6f0     A7 12 02 F6 | 	mov	arg01, fp
0a6f4     80 4E 85 F1 | 	sub	fp, #128
0a6f8     A7 14 02 F6 | 	mov	arg02, fp
0a6fc     20 4E 85 F1 | 	sub	fp, #32
0a700     09 15 62 FC | 	wrlong	arg02, arg01
0a704     DC F1 BF FD | 	call	#_pop
0a708     FF 1A 02 F6 | 	mov	arg05, result3
0a70c     A7 FA 61 FC | 	wrlong	result1, fp
0a710     04 4E 05 F1 | 	add	fp, #4
0a714     A7 FC 61 FC | 	wrlong	result2, fp
0a718     04 4E 05 F1 | 	add	fp, #4
0a71c     A7 1A 62 FC | 	wrlong	arg05, fp
0a720                 | ' 
0a720                 | ' lpoke varptr(line2$),varptr(line2)
0a720                 | ' t1=pop() 
0a720                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0a720                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0a720     08 4E 85 F1 | 	sub	fp, #8
0a724     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0a728     18 00 90 5D |  if_ne	jmp	#LR__0850
0a72c     A7 12 02 FB | 	rdlong	arg01, fp
0a730     EC 22 B0 FD | 	call	#_convertstring
0a734     A7 FA 61 FC | 	wrlong	result1, fp
0a738     08 4E 05 F1 | 	add	fp, #8
0a73c     A7 3E 68 FC | 	wrlong	#31, fp
0a740     08 4E 85 F1 | 	sub	fp, #8
0a744                 | LR__0850
0a744                 | ' if t1.result_type=result_string then
0a744     08 4E 05 F1 | 	add	fp, #8
0a748     A7 1E 02 FB | 	rdlong	local01, fp
0a74c     08 4E 85 F1 | 	sub	fp, #8
0a750     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a754     40 03 90 5D |  if_ne	jmp	#LR__0857
0a758     2C 1D B0 FD | 	call	#_do_new
0a75c                 | '   do_new
0a75c                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
0a75c     A7 12 02 FB | 	rdlong	arg01, fp
0a760     43 01 00 FF 
0a764     F3 15 06 F6 | 	mov	arg02, ##@LR__4562
0a768     94 E6 B0 FD | 	call	#__system___string_cmp
0a76c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a770     43 01 00 AF 
0a774     F4 1F 06 A6 |  if_e	mov	local01, ##@LR__4563
0a778     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a77c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a77c     09 12 06 F6 | 	mov	arg01, #9
0a780     88 35 B1 FD | 	call	#__system__close
0a784     09 1E 06 F6 | 	mov	local01, #9
0a788     71 00 00 FF 
0a78c     68 E5 05 F1 | 	add	objptr, ##58216
0a790     F2 12 02 FB | 	rdlong	arg01, objptr
0a794     71 00 00 FF 
0a798     68 E5 85 F1 | 	sub	objptr, ##58216
0a79c     43 01 00 FF 
0a7a0     FF 15 06 F6 | 	mov	arg02, ##@LR__4564
0a7a4     8C E6 B0 FD | 	call	#__system___string_concat
0a7a8     FD 12 02 F6 | 	mov	arg01, result1
0a7ac     A7 14 02 FB | 	rdlong	arg02, fp
0a7b0     80 E6 B0 FD | 	call	#__system___string_concat
0a7b4     FD 14 02 F6 | 	mov	arg02, result1
0a7b8     0F 13 02 F6 | 	mov	arg01, local01
0a7bc     00 16 06 F6 | 	mov	arg03, #0
0a7c0     18 F2 B0 FD | 	call	#__system___basic_open_string
0a7c4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0a7c8     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0a7cc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0a7d0     10 4E 05 F1 | 	add	fp, #16
0a7d4     A7 FA 61 FC | 	wrlong	result1, fp
0a7d8                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0a7d8     10 4E 85 F1 | 	sub	fp, #16
0a7dc     9C 00 90 AD |  if_e	jmp	#LR__0851
0a7e0     00 12 06 F6 | 	mov	arg01, #0
0a7e4     F4 3E B1 FD | 	call	#__system___getiolock_0423
0a7e8     FD 12 02 F6 | 	mov	arg01, result1
0a7ec     E8 E5 B0 FD | 	call	#__system___lockmem
0a7f0     44 01 00 FF 
0a7f4     01 14 06 F6 | 	mov	arg02, ##@LR__4565
0a7f8     00 12 06 F6 | 	mov	arg01, #0
0a7fc     00 16 06 F6 | 	mov	arg03, #0
0a800     C8 F2 B0 FD | 	call	#__system___basic_print_string
0a804     10 4E 05 F1 | 	add	fp, #16
0a808     A7 14 02 FB | 	rdlong	arg02, fp
0a80c     10 4E 85 F1 | 	sub	fp, #16
0a810     00 12 06 F6 | 	mov	arg01, #0
0a814     00 16 06 F6 | 	mov	arg03, #0
0a818     0A 18 06 F6 | 	mov	arg04, #10
0a81c     F0 F2 B0 FD | 	call	#__system___basic_print_integer
0a820     44 01 00 FF 
0a824     0F 14 06 F6 | 	mov	arg02, ##@LR__4566
0a828     00 12 06 F6 | 	mov	arg01, #0
0a82c     00 16 06 F6 | 	mov	arg03, #0
0a830     98 F2 B0 FD | 	call	#__system___basic_print_string
0a834     10 4E 05 F1 | 	add	fp, #16
0a838     A7 12 02 FB | 	rdlong	arg01, fp
0a83c     10 4E 85 F1 | 	sub	fp, #16
0a840     94 0B B1 FD | 	call	#__system___strerror
0a844     FD 14 02 F6 | 	mov	arg02, result1
0a848     00 12 06 F6 | 	mov	arg01, #0
0a84c     00 16 06 F6 | 	mov	arg03, #0
0a850     78 F2 B0 FD | 	call	#__system___basic_print_string
0a854     00 12 06 F6 | 	mov	arg01, #0
0a858     0A 14 06 F6 | 	mov	arg02, #10
0a85c     00 16 06 F6 | 	mov	arg03, #0
0a860     10 F2 B0 FD | 	call	#__system___basic_print_char
0a864     00 12 06 F6 | 	mov	arg01, #0
0a868     70 3E B1 FD | 	call	#__system___getiolock_0423
0a86c     FD 00 68 FC | 	wrlong	#0, result1
0a870     09 12 06 F6 | 	mov	arg01, #9
0a874     94 34 B1 FD | 	call	#__system__close
0a878     24 02 90 FD | 	jmp	#LR__0859
0a87c                 | LR__0851
0a87c     0C 4E 05 F1 | 	add	fp, #12
0a880     A7 0A 68 FC | 	wrlong	#5, fp
0a884                 | '   i=5
0a884                 | '   get #9,1,header,1
0a884     0C 4E 05 F1 | 	add	fp, #12
0a888     A7 16 02 F6 | 	mov	arg03, fp
0a88c     18 4E 85 F1 | 	sub	fp, #24
0a890     09 12 06 F6 | 	mov	arg01, #9
0a894     01 14 06 F6 | 	mov	arg02, #1
0a898     01 18 06 F6 | 	mov	arg04, #1
0a89c     04 1A 06 F6 | 	mov	arg05, #4
0a8a0     38 F3 B0 FD | 	call	#__system___basic_get
0a8a4                 | '   
0a8a4                 | '   if header<>$0D616272 then 
0a8a4     18 4E 05 F1 | 	add	fp, #24
0a8a8     A7 1E 02 FB | 	rdlong	local01, fp
0a8ac     18 4E 85 F1 | 	sub	fp, #24
0a8b0     B1 B0 06 FF 
0a8b4     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0a8b8     F0 00 90 AD |  if_e	jmp	#LR__0854
0a8bc                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a8bc     09 12 06 F6 | 	mov	arg01, #9
0a8c0     48 34 B1 FD | 	call	#__system__close
0a8c4     09 1E 06 F6 | 	mov	local01, #9
0a8c8     71 00 00 FF 
0a8cc     68 E5 05 F1 | 	add	objptr, ##58216
0a8d0     F2 12 02 FB | 	rdlong	arg01, objptr
0a8d4     71 00 00 FF 
0a8d8     68 E5 85 F1 | 	sub	objptr, ##58216
0a8dc     44 01 00 FF 
0a8e0     12 14 06 F6 | 	mov	arg02, ##@LR__4567
0a8e4     4C E5 B0 FD | 	call	#__system___string_concat
0a8e8     FD 12 02 F6 | 	mov	arg01, result1
0a8ec     A7 14 02 FB | 	rdlong	arg02, fp
0a8f0     40 E5 B0 FD | 	call	#__system___string_concat
0a8f4     FD 14 02 F6 | 	mov	arg02, result1
0a8f8     0F 13 02 F6 | 	mov	arg01, local01
0a8fc     00 16 06 F6 | 	mov	arg03, #0
0a900     D8 F0 B0 FD | 	call	#__system___basic_open_string
0a904                 | '     do
0a904                 | LR__0852
0a904     09 12 06 F6 | 	mov	arg01, #9
0a908     D8 E6 B0 FD | 	call	#__system___basic_read_line
0a90c     56 00 00 FF 
0a910     F0 E4 05 F1 | 	add	objptr, ##44272
0a914     F2 FA 61 FC | 	wrlong	result1, objptr
0a918                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0a918     56 00 00 FF 
0a91c     F0 E4 85 F1 | 	sub	objptr, ##44272
0a920     FD 12 02 F6 | 	mov	arg01, result1
0a924     01 14 06 F6 | 	mov	arg02, #1
0a928     BC 04 B1 FD | 	call	#__system__Left_S
0a92c     FD 12 02 F6 | 	mov	arg01, result1
0a930     44 01 00 FF 
0a934     14 14 06 F6 | 	mov	arg02, ##@LR__4568
0a938     C4 E4 B0 FD | 	call	#__system___string_cmp
0a93c     00 FA 55 F2 | 	cmps	result1, #0 wc
0a940     34 00 90 CD |  if_b	jmp	#LR__0853
0a944     56 00 00 FF 
0a948     F0 E4 05 F1 | 	add	objptr, ##44272
0a94c     F2 12 02 FB | 	rdlong	arg01, objptr
0a950     56 00 00 FF 
0a954     F0 E4 85 F1 | 	sub	objptr, ##44272
0a958     01 14 06 F6 | 	mov	arg02, #1
0a95c     88 04 B1 FD | 	call	#__system__Left_S
0a960     FD 12 02 F6 | 	mov	arg01, result1
0a964     44 01 00 FF 
0a968     16 14 06 F6 | 	mov	arg02, ##@LR__4569
0a96c     90 E4 B0 FD | 	call	#__system___string_cmp
0a970     01 FA 55 F2 | 	cmps	result1, #1 wc
0a974     A4 60 BF CD |  if_b	call	#_interpret
0a978                 | LR__0853
0a978     56 00 00 FF 
0a97c     F0 E4 05 F1 | 	add	objptr, ##44272
0a980     F2 12 02 FB | 	rdlong	arg01, objptr
0a984     56 00 00 FF 
0a988     F0 E4 85 F1 | 	sub	objptr, ##44272
0a98c     44 01 00 FF 
0a990     18 14 06 F6 | 	mov	arg02, ##@LR__4570
0a994     68 E4 B0 FD | 	call	#__system___string_cmp
0a998     00 FA 0D F2 | 	cmp	result1, #0 wz
0a99c     64 FF 9F 5D |  if_ne	jmp	#LR__0852
0a9a0                 | '     close #9
0a9a0     09 12 06 F6 | 	mov	arg01, #9
0a9a4     64 33 B1 FD | 	call	#__system__close
0a9a8     F4 00 90 FD | 	jmp	#LR__0858
0a9ac                 | LR__0854
0a9ac                 | '   'printerror(26) : close #9 : return
0a9ac                 | '     do
0a9ac                 | LR__0855
0a9ac                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0a9ac     0C 4E 05 F1 | 	add	fp, #12
0a9b0     A7 14 02 FB | 	rdlong	arg02, fp
0a9b4     10 4E 05 F1 | 	add	fp, #16
0a9b8     A7 16 02 F6 | 	mov	arg03, fp
0a9bc     1C 4E 85 F1 | 	sub	fp, #28
0a9c0     09 12 06 F6 | 	mov	arg01, #9
0a9c4     01 18 06 F6 | 	mov	arg04, #1
0a9c8     04 1A 06 F6 | 	mov	arg05, #4
0a9cc     0C F2 B0 FD | 	call	#__system___basic_get
0a9d0     14 4E 05 F1 | 	add	fp, #20
0a9d4     A7 FA 61 FC | 	wrlong	result1, fp
0a9d8     08 4E 85 F1 | 	sub	fp, #8
0a9dc     A7 1E 02 FB | 	rdlong	local01, fp
0a9e0     04 1E 06 F1 | 	add	local01, #4
0a9e4     A7 1E 62 FC | 	wrlong	local01, fp
0a9e8     10 4E 05 F1 | 	add	fp, #16
0a9ec     A7 1E 02 FB | 	rdlong	local01, fp
0a9f0     04 4E 05 F1 | 	add	fp, #4
0a9f4     A7 1E 02 F1 | 	add	local01, fp
0a9f8     0F 01 48 FC | 	wrbyte	#0, local01
0a9fc                 | '       if amount=1 then  
0a9fc     0C 4E 85 F1 | 	sub	fp, #12
0aa00     A7 1E 02 FB | 	rdlong	local01, fp
0aa04     14 4E 85 F1 | 	sub	fp, #20
0aa08     01 1E 0E F2 | 	cmp	local01, #1 wz
0aa0c     68 00 90 5D |  if_ne	jmp	#LR__0856
0aa10                 | '         get #9,i,line2(0),linelength : i+=linelength
0aa10     0C 4E 05 F1 | 	add	fp, #12
0aa14     A7 14 02 FB | 	rdlong	arg02, fp
0aa18     14 4E 05 F1 | 	add	fp, #20
0aa1c     A7 16 02 F6 | 	mov	arg03, fp
0aa20     04 4E 85 F1 | 	sub	fp, #4
0aa24     A7 18 02 FB | 	rdlong	arg04, fp
0aa28     1C 4E 85 F1 | 	sub	fp, #28
0aa2c     09 12 06 F6 | 	mov	arg01, #9
0aa30     01 1A 06 F6 | 	mov	arg05, #1
0aa34     A4 F1 B0 FD | 	call	#__system___basic_get
0aa38     0C 4E 05 F1 | 	add	fp, #12
0aa3c     A7 1E 02 FB | 	rdlong	local01, fp
0aa40     10 4E 05 F1 | 	add	fp, #16
0aa44     A7 1A 02 FB | 	rdlong	arg05, fp
0aa48     0D 1F 02 F1 | 	add	local01, arg05
0aa4c     10 4E 85 F1 | 	sub	fp, #16
0aa50     A7 1E 62 FC | 	wrlong	local01, fp
0aa54     94 4E 05 F1 | 	add	fp, #148
0aa58     A7 1E 02 FB | 	rdlong	local01, fp
0aa5c     A0 4E 85 F1 | 	sub	fp, #160
0aa60     56 00 00 FF 
0aa64     F0 E4 05 F1 | 	add	objptr, ##44272
0aa68     F2 1E 62 FC | 	wrlong	local01, objptr
0aa6c     56 00 00 FF 
0aa70     F0 E4 85 F1 | 	sub	objptr, ##44272
0aa74     A4 5F BF FD | 	call	#_interpret
0aa78                 | LR__0856
0aa78     14 4E 05 F1 | 	add	fp, #20
0aa7c     A7 1E 02 FB | 	rdlong	local01, fp
0aa80     14 4E 85 F1 | 	sub	fp, #20
0aa84     01 1E 56 F2 | 	cmps	local01, #1 wc
0aa88     20 FF 9F 3D |  if_ae	jmp	#LR__0855
0aa8c                 | '     close #9 
0aa8c     09 12 06 F6 | 	mov	arg01, #9
0aa90     78 32 B1 FD | 	call	#__system__close
0aa94     08 00 90 FD | 	jmp	#LR__0858
0aa98                 | LR__0857
0aa98     1E 12 06 F6 | 	mov	arg01, #30
0aa9c     B4 AD B0 FD | 	call	#_printerror
0aaa0                 | LR__0858
0aaa0                 | LR__0859
0aaa0     A7 F0 03 F6 | 	mov	ptra, fp
0aaa4     B2 00 A0 FD | 	call	#popregs_
0aaa8                 | _do_load_ret
0aaa8     2D 00 64 FD | 	ret
0aaac                 | 
0aaac                 | ' 
0aaac                 | ' '----------------- Run the program 
0aaac                 | ' 
0aaac                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0aaac                 | ' 
0aaac                 | ' sub do_run
0aaac                 | _do_run
0aaac     01 4A 05 F6 | 	mov	COUNT_, #1
0aab0     A8 00 A0 FD | 	call	#pushregs_
0aab4     69 00 00 FF 
0aab8     58 E5 05 F1 | 	add	objptr, ##54104
0aabc     F2 1C 02 FB | 	rdlong	arg06, objptr
0aac0     0F 00 00 FF 
0aac4     2C E5 05 F1 | 	add	objptr, ##7980
0aac8     F2 1C 62 FC | 	wrlong	arg06, objptr
0aacc     04 E4 05 F1 | 	add	objptr, #4
0aad0     F2 00 68 FC | 	wrlong	#0, objptr
0aad4     04 E4 05 F1 | 	add	objptr, #4
0aad8     FF FF FF FF 
0aadc     F2 FE 6B FC | 	wrlong	##-1, objptr
0aae0                 | ' if inrun>0 then 
0aae0     04 E4 05 F1 | 	add	objptr, #4
0aae4     F2 1C 02 FB | 	rdlong	arg06, objptr
0aae8     79 00 00 FF 
0aaec     90 E4 85 F1 | 	sub	objptr, ##62096
0aaf0     01 1C 16 F2 | 	cmp	arg06, #1 wc
0aaf4     30 00 90 CD |  if_b	jmp	#LR__0860
0aaf8     79 00 00 FF 
0aafc     94 E4 05 F1 | 	add	objptr, ##62100
0ab00     F2 12 02 F6 | 	mov	arg01, objptr
0ab04     10 E4 85 F1 | 	sub	objptr, #16
0ab08     F2 14 02 FB | 	rdlong	arg02, objptr
0ab0c     18 16 06 F6 | 	mov	arg03, #24
0ab10     6D 00 00 FF 
0ab14     C4 E5 85 F1 | 	sub	objptr, ##56260
0ab18     6C D7 B0 FD | 	call	#_psram_spin2_read1
0ab1c     0B 00 00 FF 
0ab20     C0 E4 85 F1 | 	sub	objptr, ##5824
0ab24                 | '   psram.read1(varptr(runheader),runptr,24)  
0ab24                 | '   return
0ab24     9C 02 90 FD | 	jmp	#LR__0866
0ab28                 | LR__0860
0ab28     79 00 00 FF 
0ab2c     90 E4 05 F1 | 	add	objptr, ##62096
0ab30     F2 02 68 FC | 	wrlong	#1, objptr
0ab34     04 E4 05 F1 | 	add	objptr, #4
0ab38     F2 12 02 F6 | 	mov	arg01, objptr
0ab3c     10 E4 85 F1 | 	sub	objptr, #16
0ab40     F2 14 02 FB | 	rdlong	arg02, objptr
0ab44     18 16 06 F6 | 	mov	arg03, #24
0ab48     6D 00 00 FF 
0ab4c     C4 E5 85 F1 | 	sub	objptr, ##56260
0ab50     34 D7 B0 FD | 	call	#_psram_spin2_read1
0ab54                 | ' inrun=1
0ab54                 | ' psram.read1(varptr(runheader),runptr,24) 
0ab54                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0ab54     6D 00 00 FF 
0ab58     D4 E5 05 F1 | 	add	objptr, ##56276
0ab5c     F2 1E 02 FB | 	rdlong	local01, objptr
0ab60     79 00 00 FF 
0ab64     94 E4 85 F1 | 	sub	objptr, ##62100
0ab68     FF FF 7F FF 
0ab6c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0ab70     79 00 00 AF 
0ab74     90 E4 05 A1 |  if_e	add	objptr, ##62096
0ab78     F2 00 68 AC |  if_e	wrlong	#0, objptr
0ab7c     79 00 00 AF 
0ab80     90 E4 85 A1 |  if_e	sub	objptr, ##62096
0ab84     3C 02 90 AD |  if_e	jmp	#LR__0866
0ab88                 | ' do 
0ab88                 | LR__0861
0ab88                 | '   if runptr<>oldrunptr then
0ab88     79 00 00 FF 
0ab8c     84 E4 05 F1 | 	add	objptr, ##62084
0ab90     F2 1E 02 FB | 	rdlong	local01, objptr
0ab94     08 E4 05 F1 | 	add	objptr, #8
0ab98     F2 1C 02 FB | 	rdlong	arg06, objptr
0ab9c     79 00 00 FF 
0aba0     8C E4 85 F1 | 	sub	objptr, ##62092
0aba4     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0aba8     CC 00 90 AD |  if_e	jmp	#LR__0862
0abac     79 00 00 FF 
0abb0     94 E4 05 F1 | 	add	objptr, ##62100
0abb4     F2 12 02 F6 | 	mov	arg01, objptr
0abb8     10 E4 85 F1 | 	sub	objptr, #16
0abbc     F2 14 02 FB | 	rdlong	arg02, objptr
0abc0     18 16 06 F6 | 	mov	arg03, #24
0abc4     6D 00 00 FF 
0abc8     C4 E5 85 F1 | 	sub	objptr, ##56260
0abcc     B8 D6 B0 FD | 	call	#_psram_spin2_read1
0abd0     5B 00 00 FF 
0abd4     90 E4 05 F1 | 	add	objptr, ##46736
0abd8     F2 12 02 F6 | 	mov	arg01, objptr
0abdc     12 00 00 FF 
0abe0     34 E5 05 F1 | 	add	objptr, ##9524
0abe4     F2 14 02 FB | 	rdlong	arg02, objptr
0abe8     14 00 00 FF 
0abec     4C E5 85 F1 | 	sub	objptr, ##10572
0abf0     F2 1E 02 FB | 	rdlong	local01, objptr
0abf4     01 1E 66 F0 | 	shl	local01, #1
0abf8     0F 15 02 F1 | 	add	arg02, local01
0abfc     14 00 00 FF 
0ac00     64 E5 05 F1 | 	add	objptr, ##10596
0ac04     F2 16 02 FB | 	rdlong	arg03, objptr
0ac08     18 E4 85 F1 | 	sub	objptr, #24
0ac0c     F2 1E 02 FB | 	rdlong	local01, objptr
0ac10     0F 17 82 F1 | 	sub	arg03, local01
0ac14     6D 00 00 FF 
0ac18     C4 E5 85 F1 | 	sub	objptr, ##56260
0ac1c     68 D6 B0 FD | 	call	#_psram_spin2_read1
0ac20     6D 00 00 FF 
0ac24     DC E5 05 F1 | 	add	objptr, ##56284
0ac28     F2 1E 02 FB | 	rdlong	local01, objptr
0ac2c     18 E4 85 F1 | 	sub	objptr, #24
0ac30     F2 1C 02 FB | 	rdlong	arg06, objptr
0ac34     0E 1F 82 F1 | 	sub	local01, arg06
0ac38     14 00 00 FF 
0ac3c     4C E5 85 F1 | 	sub	objptr, ##10572
0ac40     F2 1C 02 FB | 	rdlong	arg06, objptr
0ac44     0E 1F 12 FD | 	qdiv	local01, arg06
0ac48     05 00 00 FF 
0ac4c     18 E4 05 F1 | 	add	objptr, ##2584
0ac50     18 1E 62 FD | 	getqx	local01
0ac54     03 1E 86 F1 | 	sub	local01, #3
0ac58     F2 1E 62 FC | 	wrlong	local01, objptr
0ac5c     0F 00 00 FF 
0ac60     34 E5 05 F1 | 	add	objptr, ##7988
0ac64     F2 1E 02 FB | 	rdlong	local01, objptr
0ac68     08 E4 05 F1 | 	add	objptr, #8
0ac6c     F2 1E 62 FC | 	wrlong	local01, objptr
0ac70     79 00 00 FF 
0ac74     8C E4 85 F1 | 	sub	objptr, ##62092
0ac78                 | LR__0862
0ac78     79 00 00 FF 
0ac7c     A8 E4 05 F1 | 	add	objptr, ##62120
0ac80     F2 1E 02 FB | 	rdlong	local01, objptr
0ac84     24 E4 85 F1 | 	sub	objptr, #36
0ac88     F2 1E 62 FC | 	wrlong	local01, objptr
0ac8c     04 E4 05 F1 | 	add	objptr, #4
0ac90     F2 12 02 FB | 	rdlong	arg01, objptr
0ac94     79 00 00 FF 
0ac98     88 E4 85 F1 | 	sub	objptr, ##62088
0ac9c     40 EB BF FD | 	call	#_execute_line
0aca0     79 00 00 FF 
0aca4     88 E4 05 F1 | 	add	objptr, ##62088
0aca8     F2 FA 61 FC | 	wrlong	result1, objptr
0acac     04 E4 85 F1 | 	sub	objptr, #4
0acb0     F2 1E 02 FB | 	rdlong	local01, objptr
0acb4     79 00 00 FF 
0acb8     84 E4 85 F1 | 	sub	objptr, ##62084
0acbc     FF FF 3F FF 
0acc0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0acc4     0C 00 90 AD |  if_e	jmp	#LR__0863
0acc8     4C D9 B0 FD | 	call	#_usbnew_spin2_get_key
0accc     06 FB 0D F2 | 	cmp	result1, #262 wz
0acd0     B4 FE 9F 5D |  if_ne	jmp	#LR__0861
0acd4                 | LR__0863
0acd4                 | ' if runheader(5)<>$7FFF_FFFF then 
0acd4     79 00 00 FF 
0acd8     A8 E4 05 F1 | 	add	objptr, ##62120
0acdc     F2 1E 02 FB | 	rdlong	local01, objptr
0ace0     79 00 00 FF 
0ace4     A8 E4 85 F1 | 	sub	objptr, ##62120
0ace8     FF FF 3F FF 
0acec     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0acf0     BC 00 90 AD |  if_e	jmp	#LR__0865
0acf4                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len)  
0acf4     79 00 00 FF 
0acf8     B4 E4 05 F1 | 	add	objptr, ##62132
0acfc     F2 1E 02 FB | 	rdlong	local01, objptr
0ad00     79 00 00 FF 
0ad04     B4 E4 85 F1 | 	sub	objptr, ##62132
0ad08     01 1E 0E F2 | 	cmp	local01, #1 wz
0ad0c     3C 00 90 5D |  if_ne	jmp	#LR__0864
0ad10     7A 00 00 FF 
0ad14     58 E5 05 F1 | 	add	objptr, ##62808
0ad18     F2 14 02 FB | 	rdlong	arg02, objptr
0ad1c     04 E4 85 F1 | 	sub	objptr, #4
0ad20     F2 1A 02 FB | 	rdlong	arg05, objptr
0ad24     07 12 06 F6 | 	mov	arg01, #7
0ad28     56 00 00 FF 
0ad2c     44 16 06 F6 | 	mov	arg03, ##44100
0ad30     0E 18 C6 F9 | 	decod	arg04, #14
0ad34     01 1C 66 F6 | 	neg	arg06, #1
0ad38     6F 00 00 FF 
0ad3c     94 E4 85 F1 | 	sub	objptr, ##56980
0ad40     5C DC B0 FD | 	call	#_Audio093b_8_sc_spin2_play
0ad44     0B 00 00 FF 
0ad48     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad4c                 | LR__0864
0ad4c                 | '   print "Stopped at line ";runheader(0)
0ad4c     00 12 06 F6 | 	mov	arg01, #0
0ad50     88 39 B1 FD | 	call	#__system___getiolock_0423
0ad54     FD 12 02 F6 | 	mov	arg01, result1
0ad58     7C E0 B0 FD | 	call	#__system___lockmem
0ad5c     44 01 00 FF 
0ad60     19 14 06 F6 | 	mov	arg02, ##@LR__4571
0ad64     00 12 06 F6 | 	mov	arg01, #0
0ad68     00 16 06 F6 | 	mov	arg03, #0
0ad6c     5C ED B0 FD | 	call	#__system___basic_print_string
0ad70     79 00 00 FF 
0ad74     94 E4 05 F1 | 	add	objptr, ##62100
0ad78     F2 14 02 FB | 	rdlong	arg02, objptr
0ad7c     79 00 00 FF 
0ad80     94 E4 85 F1 | 	sub	objptr, ##62100
0ad84     00 12 06 F6 | 	mov	arg01, #0
0ad88     00 16 06 F6 | 	mov	arg03, #0
0ad8c     0A 18 06 F6 | 	mov	arg04, #10
0ad90     BC ED B0 FD | 	call	#__system___basic_print_unsigned
0ad94     00 12 06 F6 | 	mov	arg01, #0
0ad98     0A 14 06 F6 | 	mov	arg02, #10
0ad9c     00 16 06 F6 | 	mov	arg03, #0
0ada0     D0 EC B0 FD | 	call	#__system___basic_print_char
0ada4     00 12 06 F6 | 	mov	arg01, #0
0ada8     30 39 B1 FD | 	call	#__system___getiolock_0423
0adac     FD 00 68 FC | 	wrlong	#0, result1
0adb0                 | LR__0865
0adb0     79 00 00 FF 
0adb4     90 E4 05 F1 | 	add	objptr, ##62096
0adb8     F2 00 68 FC | 	wrlong	#0, objptr
0adbc     79 00 00 FF 
0adc0     90 E4 85 F1 | 	sub	objptr, ##62096
0adc4                 | LR__0866
0adc4     A7 F0 03 F6 | 	mov	ptra, fp
0adc8     B2 00 A0 FD | 	call	#popregs_
0adcc                 | _do_run_ret
0adcc     2D 00 64 FD | 	ret
0add0                 | 
0add0                 | ' 
0add0                 | ' sub do_defenv
0add0                 | _do_defenv
0add0     05 4A 05 F6 | 	mov	COUNT_, #5
0add4     A8 00 A0 FD | 	call	#pushregs_
0add8     84 F0 07 F1 | 	add	ptra, #132
0addc     69 00 00 FF 
0ade0     54 E5 05 F1 | 	add	objptr, ##54100
0ade4     F2 1A 02 FB | 	rdlong	arg05, objptr
0ade8     0D 19 02 F6 | 	mov	arg04, arg05
0adec     01 18 66 F0 | 	shl	arg04, #1
0adf0     0D 19 02 F1 | 	add	arg04, arg05
0adf4     02 18 66 F0 | 	shl	arg04, #2
0adf8     03 00 00 FF 
0adfc     04 E4 85 F1 | 	sub	objptr, ##1540
0ae00     F2 18 02 F1 | 	add	arg04, objptr
0ae04     0C 1B 02 FB | 	rdlong	arg05, arg04
0ae08     A7 1A 62 FC | 	wrlong	arg05, fp
0ae0c                 | ' 
0ae0c                 | ' numpar=compiledline(lineptr_e).result.uresult
0ae0c                 | ' 
0ae0c                 | ' 
0ae0c                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0ae0c                 | ' ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0ae0c                 | ' ' Every 5 ms added 
0ae0c                 | ' ' defsnd channel, a,d,s,r - defines ADSR as in SID 
0ae0c                 | ' 
0ae0c                 | ' 
0ae0c                 | ' if numpar<2 then return
0ae0c     02 1A 56 F2 | 	cmps	arg05, #2 wc
0ae10     66 00 00 FF 
0ae14     50 E5 85 F1 | 	sub	objptr, ##52560
0ae18     40 0A 90 CD |  if_b	jmp	#LR__0897
0ae1c                 | ' 
0ae1c                 | '  
0ae1c                 | ' if numpar=2 then
0ae1c     A7 1A 02 FB | 	rdlong	arg05, fp
0ae20     02 1A 0E F2 | 	cmp	arg05, #2 wz
0ae24     AC 04 90 5D |  if_ne	jmp	#LR__0880
0ae28     B8 EA BF FD | 	call	#_pop
0ae2c     FF 1A 02 F6 | 	mov	arg05, result3
0ae30     28 4E 05 F1 | 	add	fp, #40
0ae34     A7 FA 61 FC | 	wrlong	result1, fp
0ae38     04 4E 05 F1 | 	add	fp, #4
0ae3c     A7 FC 61 FC | 	wrlong	result2, fp
0ae40     04 4E 05 F1 | 	add	fp, #4
0ae44     A7 1A 62 FC | 	wrlong	arg05, fp
0ae48                 | '   t1=pop()
0ae48                 | '   if t1.result_type=result_string2 then 
0ae48     30 4E 85 F1 | 	sub	fp, #48
0ae4c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0ae50     20 00 90 5D |  if_ne	jmp	#LR__0870
0ae54     28 4E 05 F1 | 	add	fp, #40
0ae58     A7 12 02 FB | 	rdlong	arg01, fp
0ae5c     28 4E 85 F1 | 	sub	fp, #40
0ae60     BC 1B B0 FD | 	call	#_convertstring
0ae64     34 4E 05 F1 | 	add	fp, #52
0ae68     A7 FA 61 FC | 	wrlong	result1, fp
0ae6c     34 4E 85 F1 | 	sub	fp, #52
0ae70     40 00 90 FD | 	jmp	#LR__0873
0ae74                 | LR__0870
0ae74     30 4E 05 F1 | 	add	fp, #48
0ae78     A7 1A 02 FB | 	rdlong	arg05, fp
0ae7c     30 4E 85 F1 | 	sub	fp, #48
0ae80     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0ae84     18 00 90 5D |  if_ne	jmp	#LR__0871
0ae88     28 4E 05 F1 | 	add	fp, #40
0ae8c     A7 1A 02 FB | 	rdlong	arg05, fp
0ae90     0C 4E 05 F1 | 	add	fp, #12
0ae94     A7 1A 62 FC | 	wrlong	arg05, fp
0ae98     34 4E 85 F1 | 	sub	fp, #52
0ae9c     14 00 90 FD | 	jmp	#LR__0872
0aea0                 | LR__0871
0aea0     44 01 00 FF 
0aea4     2A 1A 06 F6 | 	mov	arg05, ##@LR__4572
0aea8     34 4E 05 F1 | 	add	fp, #52
0aeac     A7 1A 62 FC | 	wrlong	arg05, fp
0aeb0     34 4E 85 F1 | 	sub	fp, #52
0aeb4                 | LR__0872
0aeb4                 | LR__0873
0aeb4                 | ' 
0aeb4                 | '     
0aeb4                 | '   if s<>"" then 
0aeb4     34 4E 05 F1 | 	add	fp, #52
0aeb8     A7 12 02 FB | 	rdlong	arg01, fp
0aebc     34 4E 85 F1 | 	sub	fp, #52
0aec0     44 01 00 FF 
0aec4     2B 14 06 F6 | 	mov	arg02, ##@LR__4573
0aec8     34 DF B0 FD | 	call	#__system___string_cmp
0aecc     00 FA 0D F2 | 	cmp	result1, #0 wz
0aed0     9C 02 90 AD |  if_e	jmp	#LR__0878
0aed4     0C EA BF FD | 	call	#_pop
0aed8     FF 1A 02 F6 | 	mov	arg05, result3
0aedc     28 4E 05 F1 | 	add	fp, #40
0aee0     A7 FA 61 FC | 	wrlong	result1, fp
0aee4     04 4E 05 F1 | 	add	fp, #4
0aee8     A7 FC 61 FC | 	wrlong	result2, fp
0aeec     04 4E 05 F1 | 	add	fp, #4
0aef0     A7 1A 62 FC | 	wrlong	arg05, fp
0aef4     08 4E 85 F1 | 	sub	fp, #8
0aef8     A7 12 02 F6 | 	mov	arg01, fp
0aefc     28 4E 85 F1 | 	sub	fp, #40
0af00     50 5F B0 FD | 	call	#_converttoint
0af04     10 4E 05 F1 | 	add	fp, #16
0af08     A7 FA 61 FC | 	wrlong	result1, fp
0af0c     10 4E 85 F1 | 	sub	fp, #16
0af10                 | '     t1=pop()
0af10                 | '     channel=converttoint(t1) 
0af10                 | '     close #9 : open "/sd/media/h/"+s for input as #9
0af10     09 12 06 F6 | 	mov	arg01, #9
0af14     F4 2D B1 FD | 	call	#__system__close
0af18     09 1E 06 F6 | 	mov	local01, #9
0af1c     44 01 00 FF 
0af20     2C 12 06 F6 | 	mov	arg01, ##@LR__4574
0af24     34 4E 05 F1 | 	add	fp, #52
0af28     A7 14 02 FB | 	rdlong	arg02, fp
0af2c     34 4E 85 F1 | 	sub	fp, #52
0af30     00 DF B0 FD | 	call	#__system___string_concat
0af34     FD 14 02 F6 | 	mov	arg02, result1
0af38     0F 13 02 F6 | 	mov	arg01, local01
0af3c     00 16 06 F6 | 	mov	arg03, #0
0af40     98 EA B0 FD | 	call	#__system___basic_open_string
0af44     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0af48     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0af4c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0af50     7A 00 00 FF 
0af54     D4 E5 05 F1 | 	add	objptr, ##62932
0af58     F2 FA 61 FC | 	wrlong	result1, objptr
0af5c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0af5c     7A 00 00 FF 
0af60     D4 E5 85 F1 | 	sub	objptr, ##62932
0af64     B0 00 90 AD |  if_e	jmp	#LR__0874
0af68     00 12 06 F6 | 	mov	arg01, #0
0af6c     6C 37 B1 FD | 	call	#__system___getiolock_0423
0af70     FD 12 02 F6 | 	mov	arg01, result1
0af74     60 DE B0 FD | 	call	#__system___lockmem
0af78     44 01 00 FF 
0af7c     39 14 06 F6 | 	mov	arg02, ##@LR__4575
0af80     00 12 06 F6 | 	mov	arg01, #0
0af84     00 16 06 F6 | 	mov	arg03, #0
0af88     40 EB B0 FD | 	call	#__system___basic_print_string
0af8c     7A 00 00 FF 
0af90     D4 E5 05 F1 | 	add	objptr, ##62932
0af94     F2 14 02 FB | 	rdlong	arg02, objptr
0af98     7A 00 00 FF 
0af9c     D4 E5 85 F1 | 	sub	objptr, ##62932
0afa0     00 12 06 F6 | 	mov	arg01, #0
0afa4     00 16 06 F6 | 	mov	arg03, #0
0afa8     0A 18 06 F6 | 	mov	arg04, #10
0afac     60 EB B0 FD | 	call	#__system___basic_print_integer
0afb0     44 01 00 FF 
0afb4     47 14 06 F6 | 	mov	arg02, ##@LR__4576
0afb8     00 12 06 F6 | 	mov	arg01, #0
0afbc     00 16 06 F6 | 	mov	arg03, #0
0afc0     08 EB B0 FD | 	call	#__system___basic_print_string
0afc4     00 1E 06 F6 | 	mov	local01, #0
0afc8     7A 00 00 FF 
0afcc     D4 E5 05 F1 | 	add	objptr, ##62932
0afd0     F2 12 02 FB | 	rdlong	arg01, objptr
0afd4     7A 00 00 FF 
0afd8     D4 E5 85 F1 | 	sub	objptr, ##62932
0afdc     F8 03 B1 FD | 	call	#__system___strerror
0afe0     FD 14 02 F6 | 	mov	arg02, result1
0afe4     0F 13 02 F6 | 	mov	arg01, local01
0afe8     00 16 06 F6 | 	mov	arg03, #0
0afec     DC EA B0 FD | 	call	#__system___basic_print_string
0aff0     00 12 06 F6 | 	mov	arg01, #0
0aff4     0A 14 06 F6 | 	mov	arg02, #10
0aff8     00 16 06 F6 | 	mov	arg03, #0
0affc     74 EA B0 FD | 	call	#__system___basic_print_char
0b000     00 12 06 F6 | 	mov	arg01, #0
0b004     D4 36 B1 FD | 	call	#__system___getiolock_0423
0b008     FD 00 68 FC | 	wrlong	#0, result1
0b00c     09 12 06 F6 | 	mov	arg01, #9
0b010     F8 2C B1 FD | 	call	#__system__close
0b014     44 08 90 FD | 	jmp	#LR__0897
0b018                 | LR__0874
0b018                 | '     get #9,17,envbuf8(channel,0),256
0b018     10 4E 05 F1 | 	add	fp, #16
0b01c     A7 1A 02 FB | 	rdlong	arg05, fp
0b020     10 4E 85 F1 | 	sub	fp, #16
0b024     0D 17 02 F6 | 	mov	arg03, arg05
0b028     09 16 66 F0 | 	shl	arg03, #9
0b02c     0D 17 02 F1 | 	add	arg03, arg05
0b030     2C 00 00 FF 
0b034     CC E4 05 F1 | 	add	objptr, ##22732
0b038     F2 16 02 F1 | 	add	arg03, objptr
0b03c     09 12 06 F6 | 	mov	arg01, #9
0b040     11 14 06 F6 | 	mov	arg02, #17
0b044     00 19 06 F6 | 	mov	arg04, #256
0b048     01 1A 06 F6 | 	mov	arg05, #1
0b04c     2C 00 00 FF 
0b050     CC E4 85 F1 | 	sub	objptr, ##22732
0b054     84 EB B0 FD | 	call	#__system___basic_get
0b058                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0b058     04 4E 05 F1 | 	add	fp, #4
0b05c     A7 FE 69 FC | 	wrlong	#255, fp
0b060     04 4E 85 F1 | 	sub	fp, #4
0b064     2C 00 00 FF 
0b068     CC E4 05 F1 | 	add	objptr, ##22732
0b06c     97 34 48 FB | 	callpa	#(@LR__0876-@LR__0875)>>2,fcache_load_ptr_
0b070                 | LR__0875
0b070     10 4E 05 F1 | 	add	fp, #16
0b074     A7 1A 02 FB | 	rdlong	arg05, fp
0b078     0D 19 02 F6 | 	mov	arg04, arg05
0b07c     08 18 66 F0 | 	shl	arg04, #8
0b080     0D 19 02 F1 | 	add	arg04, arg05
0b084     01 18 66 F0 | 	shl	arg04, #1
0b088     F2 18 02 F1 | 	add	arg04, objptr
0b08c     0C 4E 85 F1 | 	sub	fp, #12
0b090     A7 16 02 FB | 	rdlong	arg03, fp
0b094     0B 15 02 F6 | 	mov	arg02, arg03
0b098     01 14 66 F0 | 	shl	arg02, #1
0b09c     0C 15 02 F1 | 	add	arg02, arg04
0b0a0     0D 19 02 F6 | 	mov	arg04, arg05
0b0a4     09 18 66 F0 | 	shl	arg04, #9
0b0a8     0D 19 02 F1 | 	add	arg04, arg05
0b0ac     F2 18 02 F1 | 	add	arg04, objptr
0b0b0     0C 17 02 F1 | 	add	arg03, arg04
0b0b4     0B 1B C2 FA | 	rdbyte	arg05, arg03
0b0b8     00 1B 06 FA | 	mul	arg05, #256
0b0bc     0A 1B 52 FC | 	wrword	arg05, arg02
0b0c0     A7 1A 02 FB | 	rdlong	arg05, fp
0b0c4     01 1A 86 F1 | 	sub	arg05, #1
0b0c8     A7 1A 62 FC | 	wrlong	arg05, fp
0b0cc     04 4E 85 F1 | 	sub	fp, #4
0b0d0     00 1A 56 F2 | 	cmps	arg05, #0 wc
0b0d4     98 FF 9F 3D |  if_ae	jmp	#LR__0875
0b0d8                 | LR__0876
0b0d8     2C 00 00 FF 
0b0dc     CC E4 85 F1 | 	sub	objptr, ##22732
0b0e0                 | '     close #9
0b0e0     09 12 06 F6 | 	mov	arg01, #9
0b0e4     24 2C B1 FD | 	call	#__system__close
0b0e8                 | '                                                                       for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0b0e8     04 4E 05 F1 | 	add	fp, #4
0b0ec     A7 00 68 FC | 	wrlong	#0, fp
0b0f0                 | LR__0877
0b0f0     A7 1E 02 FB | 	rdlong	local01, fp
0b0f4     0F 13 02 F6 | 	mov	arg01, local01
0b0f8     0C 4E 05 F1 | 	add	fp, #12
0b0fc     A7 1A 02 FB | 	rdlong	arg05, fp
0b100     0D 19 02 F6 | 	mov	arg04, arg05
0b104     08 18 66 F0 | 	shl	arg04, #8
0b108     0D 19 02 F1 | 	add	arg04, arg05
0b10c     01 18 66 F0 | 	shl	arg04, #1
0b110     2C 00 00 FF 
0b114     CC E4 05 F1 | 	add	objptr, ##22732
0b118     F2 18 02 F1 | 	add	arg04, objptr
0b11c     01 1E 66 F0 | 	shl	local01, #1
0b120     0C 1F 02 F1 | 	add	local01, arg04
0b124     0F 1F E2 FA | 	rdword	local01, local01
0b128     0F 1F 52 F6 | 	abs	local01, local01 wc
0b12c     90 1F 16 FD | 	qdiv	local01, #400
0b130     10 4E 85 F1 | 	sub	fp, #16
0b134     2C 00 00 FF 
0b138     CC E4 85 F1 | 	sub	objptr, ##22732
0b13c     20 15 06 F6 | 	mov	arg02, #288
0b140     28 16 06 F6 | 	mov	arg03, #40
0b144     18 1E 62 FD | 	getqx	local01
0b148     0F 15 A2 F3 | 	sumnc	arg02, local01
0b14c     D8 BC B0 FD | 	call	#_hg010b_spin2_putpixel
0b150     04 4E 05 F1 | 	add	fp, #4
0b154     A7 1E 02 FB | 	rdlong	local01, fp
0b158     01 1E 06 F1 | 	add	local01, #1
0b15c     A7 1E 62 FC | 	wrlong	local01, fp
0b160     00 1F 56 F2 | 	cmps	local01, #256 wc
0b164     88 FF 9F CD |  if_b	jmp	#LR__0877
0b168     04 4E 85 F1 | 	sub	fp, #4
0b16c                 | '     return
0b16c     EC 06 90 FD | 	jmp	#LR__0897
0b170                 | LR__0878
0b170     28 4E 05 F1 | 	add	fp, #40
0b174     A7 12 02 F6 | 	mov	arg01, fp
0b178     28 4E 85 F1 | 	sub	fp, #40
0b17c     D4 5C B0 FD | 	call	#_converttoint
0b180     FD 1E 02 F6 | 	mov	local01, result1
0b184     0C 4E 05 F1 | 	add	fp, #12
0b188     A7 1E 62 FC | 	wrlong	local01, fp
0b18c     0C 4E 85 F1 | 	sub	fp, #12
0b190                 | '   
0b190                 | '   par=converttoint(t1)  : print par
0b190     00 12 06 F6 | 	mov	arg01, #0
0b194     44 35 B1 FD | 	call	#__system___getiolock_0423
0b198     FD 12 02 F6 | 	mov	arg01, result1
0b19c     38 DC B0 FD | 	call	#__system___lockmem
0b1a0     0C 4E 05 F1 | 	add	fp, #12
0b1a4     A7 14 02 FB | 	rdlong	arg02, fp
0b1a8     0C 4E 85 F1 | 	sub	fp, #12
0b1ac     00 12 06 F6 | 	mov	arg01, #0
0b1b0     00 16 06 F6 | 	mov	arg03, #0
0b1b4     0A 18 06 F6 | 	mov	arg04, #10
0b1b8     54 E9 B0 FD | 	call	#__system___basic_print_integer
0b1bc     00 12 06 F6 | 	mov	arg01, #0
0b1c0     0A 14 06 F6 | 	mov	arg02, #10
0b1c4     00 16 06 F6 | 	mov	arg03, #0
0b1c8     A8 E8 B0 FD | 	call	#__system___basic_print_char
0b1cc     00 12 06 F6 | 	mov	arg01, #0
0b1d0     08 35 B1 FD | 	call	#__system___getiolock_0423
0b1d4     FD 00 68 FC | 	wrlong	#0, result1
0b1d8     08 E7 BF FD | 	call	#_pop
0b1dc     FF 1E 02 F6 | 	mov	local01, result3
0b1e0     28 4E 05 F1 | 	add	fp, #40
0b1e4     A7 FA 61 FC | 	wrlong	result1, fp
0b1e8     04 4E 05 F1 | 	add	fp, #4
0b1ec     A7 FC 61 FC | 	wrlong	result2, fp
0b1f0     04 4E 05 F1 | 	add	fp, #4
0b1f4     A7 1E 62 FC | 	wrlong	local01, fp
0b1f8     08 4E 85 F1 | 	sub	fp, #8
0b1fc     A7 12 02 F6 | 	mov	arg01, fp
0b200     28 4E 85 F1 | 	sub	fp, #40
0b204     4C 5C B0 FD | 	call	#_converttoint
0b208     10 4E 05 F1 | 	add	fp, #16
0b20c     A7 FA 61 FC | 	wrlong	result1, fp
0b210                 | '   t1=pop()
0b210                 | '   channel=converttoint(t1)  
0b210                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0b210     04 4E 85 F1 | 	sub	fp, #4
0b214     A7 1E 0A FB | 	rdlong	local01, fp wz
0b218     0C 4E 85 F1 | 	sub	fp, #12
0b21c     3C 06 90 5D |  if_ne	jmp	#LR__0897
0b220     04 4E 05 F1 | 	add	fp, #4
0b224     A7 00 68 FC | 	wrlong	#0, fp
0b228     04 4E 85 F1 | 	sub	fp, #4
0b22c                 | LR__0879
0b22c     10 4E 05 F1 | 	add	fp, #16
0b230     A7 1E 02 FB | 	rdlong	local01, fp
0b234     0B 1E 66 F0 | 	shl	local01, #11
0b238     0C 00 00 FF 
0b23c     CC E4 05 F1 | 	add	objptr, ##6348
0b240     F2 1E 02 F1 | 	add	local01, objptr
0b244     0C 4E 85 F1 | 	sub	fp, #12
0b248     A7 12 02 FB | 	rdlong	arg01, fp
0b24c     09 21 02 F6 | 	mov	local02, arg01
0b250     01 20 66 F0 | 	shl	local02, #1
0b254     0F 21 02 F1 | 	add	local02, local01
0b258     04 4E 85 F1 | 	sub	fp, #4
0b25c     0C 00 00 FF 
0b260     CC E4 85 F1 | 	sub	objptr, ##6348
0b264     09 13 52 F6 | 	abs	arg01, arg01 wc
0b268     1F 22 C6 C9 |  if_b	decod	local03, #31
0b26c     00 22 06 36 |  if_ae	mov	local03, #0
0b270     4C 02 B1 FD | 	call	#__system___float_fromuns
0b274     11 FB 61 F5 | 	xor	result1, local03
0b278     FD 14 02 F6 | 	mov	arg02, result1
0b27c     87 E4 1D FF 
0b280     DB 13 06 F6 | 	mov	arg01, ##1003032539
0b284     3C 06 B1 FD | 	call	#__system___float_mul
0b288     FD 12 02 F6 | 	mov	arg01, result1
0b28c     70 0F B1 FD | 	call	#__system____builtin_sinf
0b290     FD 14 02 F6 | 	mov	arg02, result1
0b294     58 7F 23 FF 
0b298     00 12 06 F6 | 	mov	arg01, ##1191096320
0b29c     24 06 B1 FD | 	call	#__system___float_mul
0b2a0     FD 12 02 F6 | 	mov	arg01, result1
0b2a4     01 14 06 F6 | 	mov	arg02, #1
0b2a8     E0 0A B1 FD | 	call	#__system___float_tointeger
0b2ac     10 FB 51 FC | 	wrword	result1, local02
0b2b0     04 4E 05 F1 | 	add	fp, #4
0b2b4     A7 20 02 FB | 	rdlong	local02, fp
0b2b8     01 20 06 F1 | 	add	local02, #1
0b2bc     A7 20 62 FC | 	wrlong	local02, fp
0b2c0     04 4E 85 F1 | 	sub	fp, #4
0b2c4     02 00 00 FF 
0b2c8     00 20 56 F2 | 	cmps	local02, ##1024 wc
0b2cc     5C FF 9F CD |  if_b	jmp	#LR__0879
0b2d0                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0b2d0                 | '   return
0b2d0     88 05 90 FD | 	jmp	#LR__0897
0b2d4                 | LR__0880
0b2d4                 | ' for i=0 to 15 : harm(i)=0: next i  
0b2d4     04 4E 05 F1 | 	add	fp, #4
0b2d8     A7 00 68 FC | 	wrlong	#0, fp
0b2dc     97 16 48 FB | 	callpa	#(@LR__0882-@LR__0881)>>2,fcache_load_ptr_
0b2e0                 | LR__0881
0b2e0     A7 1E 02 FB | 	rdlong	local01, fp
0b2e4     02 1E 66 F0 | 	shl	local01, #2
0b2e8     34 4E 05 F1 | 	add	fp, #52
0b2ec     A7 1E 02 F1 | 	add	local01, fp
0b2f0     0F 01 68 FC | 	wrlong	#0, local01
0b2f4     34 4E 85 F1 | 	sub	fp, #52
0b2f8     A7 1E 02 FB | 	rdlong	local01, fp
0b2fc     01 1E 06 F1 | 	add	local01, #1
0b300     A7 1E 62 FC | 	wrlong	local01, fp
0b304     10 1E 56 F2 | 	cmps	local01, #16 wc
0b308     D4 FF 9F CD |  if_b	jmp	#LR__0881
0b30c                 | LR__0882
0b30c     04 4E 85 F1 | 	sub	fp, #4
0b310                 | ' for i=numpar to 2 step -1 
0b310     A7 1E 02 FB | 	rdlong	local01, fp
0b314     04 4E 05 F1 | 	add	fp, #4
0b318     A7 1E 62 FC | 	wrlong	local01, fp
0b31c     04 4E 85 F1 | 	sub	fp, #4
0b320                 | LR__0883
0b320     C0 E5 BF FD | 	call	#_pop
0b324     28 4E 05 F1 | 	add	fp, #40
0b328     A7 FA 61 FC | 	wrlong	result1, fp
0b32c     04 4E 05 F1 | 	add	fp, #4
0b330     A7 FC 61 FC | 	wrlong	result2, fp
0b334     04 4E 05 F1 | 	add	fp, #4
0b338     A7 FE 61 FC | 	wrlong	result3, fp
0b33c     2C 4E 85 F1 | 	sub	fp, #44
0b340     A7 1E 02 FB | 	rdlong	local01, fp
0b344     02 1E 86 F1 | 	sub	local01, #2
0b348     02 1E 66 F0 | 	shl	local01, #2
0b34c     34 4E 05 F1 | 	add	fp, #52
0b350     A7 1E 02 F1 | 	add	local01, fp
0b354     10 4E 85 F1 | 	sub	fp, #16
0b358     A7 12 02 F6 | 	mov	arg01, fp
0b35c     28 4E 85 F1 | 	sub	fp, #40
0b360     9C 5B B0 FD | 	call	#_converttofloat
0b364     0F FB 61 FC | 	wrlong	result1, local01
0b368     04 4E 05 F1 | 	add	fp, #4
0b36c     A7 1E 02 FB | 	rdlong	local01, fp
0b370     01 1E 86 F1 | 	sub	local01, #1
0b374     A7 1E 62 FC | 	wrlong	local01, fp
0b378     04 4E 85 F1 | 	sub	fp, #4
0b37c     02 1E 56 F2 | 	cmps	local01, #2 wc
0b380     9C FF 9F 3D |  if_ae	jmp	#LR__0883
0b384     5C E5 BF FD | 	call	#_pop
0b388     FF 1E 02 F6 | 	mov	local01, result3
0b38c     28 4E 05 F1 | 	add	fp, #40
0b390     A7 FA 61 FC | 	wrlong	result1, fp
0b394     04 4E 05 F1 | 	add	fp, #4
0b398     A7 FC 61 FC | 	wrlong	result2, fp
0b39c     04 4E 05 F1 | 	add	fp, #4
0b3a0     A7 1E 62 FC | 	wrlong	local01, fp
0b3a4     08 4E 85 F1 | 	sub	fp, #8
0b3a8     A7 12 02 F6 | 	mov	arg01, fp
0b3ac     28 4E 85 F1 | 	sub	fp, #40
0b3b0     A0 5A B0 FD | 	call	#_converttoint
0b3b4     FD 1E 02 F6 | 	mov	local01, result1
0b3b8     10 4E 05 F1 | 	add	fp, #16
0b3bc     A7 1E 62 FC | 	wrlong	local01, fp
0b3c0     10 4E 85 F1 | 	sub	fp, #16
0b3c4                 | ' t1=pop()
0b3c4                 | ' channel=converttoint(t1) : print channel
0b3c4     00 12 06 F6 | 	mov	arg01, #0
0b3c8     10 33 B1 FD | 	call	#__system___getiolock_0423
0b3cc     FD 12 02 F6 | 	mov	arg01, result1
0b3d0     04 DA B0 FD | 	call	#__system___lockmem
0b3d4     10 4E 05 F1 | 	add	fp, #16
0b3d8     A7 14 02 FB | 	rdlong	arg02, fp
0b3dc     10 4E 85 F1 | 	sub	fp, #16
0b3e0     00 12 06 F6 | 	mov	arg01, #0
0b3e4     00 16 06 F6 | 	mov	arg03, #0
0b3e8     0A 18 06 F6 | 	mov	arg04, #10
0b3ec     20 E7 B0 FD | 	call	#__system___basic_print_integer
0b3f0     00 12 06 F6 | 	mov	arg01, #0
0b3f4     0A 14 06 F6 | 	mov	arg02, #10
0b3f8     00 16 06 F6 | 	mov	arg03, #0
0b3fc     74 E6 B0 FD | 	call	#__system___basic_print_char
0b400     00 12 06 F6 | 	mov	arg01, #0
0b404     D4 32 B1 FD | 	call	#__system___getiolock_0423
0b408     FD 00 68 FC | 	wrlong	#0, result1
0b40c                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0b40c     08 4E 05 F1 | 	add	fp, #8
0b410     02 00 80 FF 
0b414     A7 00 68 FC | 	wrlong	##1024, fp
0b418     08 4E 85 F1 | 	sub	fp, #8
0b41c     0C 00 00 FF 
0b420     CC E4 05 F1 | 	add	objptr, ##6348
0b424     97 18 48 FB | 	callpa	#(@LR__0886-@LR__0884)>>2,fcache_load_ptr_
0b428                 | LR__0884
0b428     02 00 00 FF 
0b42c     00 14 DC FC | 	rep	@LR__0887, ##1024
0b430                 | LR__0885
0b430     10 4E 05 F1 | 	add	fp, #16
0b434     A7 20 02 FB | 	rdlong	local02, fp
0b438     0B 20 66 F0 | 	shl	local02, #11
0b43c     F2 20 02 F1 | 	add	local02, objptr
0b440     0C 4E 85 F1 | 	sub	fp, #12
0b444     A7 1E 02 FB | 	rdlong	local01, fp
0b448     04 4E 85 F1 | 	sub	fp, #4
0b44c     01 1E 66 F0 | 	shl	local01, #1
0b450     10 1F 02 F1 | 	add	local01, local02
0b454     0F 01 58 FC | 	wrword	#0, local01
0b458                 | LR__0886
0b458                 | LR__0887
0b458     0C 00 00 FF 
0b45c     CC E4 85 F1 | 	sub	objptr, ##6348
0b460     1C 4E 05 F1 | 	add	fp, #28
0b464     A7 00 68 FC | 	wrlong	#0, fp
0b468                 | ' max=0
0b468                 | ' if harm(0)<0 then
0b468     1C 4E 05 F1 | 	add	fp, #28
0b46c     A7 12 02 FB | 	rdlong	arg01, fp
0b470     38 4E 85 F1 | 	sub	fp, #56
0b474     00 14 06 F6 | 	mov	arg02, #0
0b478     01 16 06 F6 | 	mov	arg03, #1
0b47c     78 08 B1 FD | 	call	#__system___float_cmp
0b480     00 FA 55 F2 | 	cmps	result1, #0 wc
0b484     04 01 90 3D |  if_ae	jmp	#LR__0890
0b488     38 4E 05 F1 | 	add	fp, #56
0b48c     A7 FA 01 FB | 	rdlong	result1, fp
0b490     1F FA 05 F4 | 	bitl	result1, #31
0b494     24 4E 85 F1 | 	sub	fp, #36
0b498     A7 FA 61 FC | 	wrlong	result1, fp
0b49c     28 4E 05 F1 | 	add	fp, #40
0b4a0     A7 FA 01 FB | 	rdlong	result1, fp
0b4a4     1F FA 05 F4 | 	bitl	result1, #31
0b4a8     24 4E 85 F1 | 	sub	fp, #36
0b4ac     A7 FA 61 FC | 	wrlong	result1, fp
0b4b0     20 4E 05 F1 | 	add	fp, #32
0b4b4     00 C0 9F FF 
0b4b8     A7 00 68 FC | 	wrlong	##1065353216, fp
0b4bc     24 4E 85 F1 | 	sub	fp, #36
0b4c0     A7 1E 02 FB | 	rdlong	local01, fp
0b4c4     28 4E 05 F1 | 	add	fp, #40
0b4c8     A7 1E 62 FC | 	wrlong	local01, fp
0b4cc     24 4E 85 F1 | 	sub	fp, #36
0b4d0     A7 1E 02 FB | 	rdlong	local01, fp
0b4d4     28 4E 05 F1 | 	add	fp, #40
0b4d8     A7 1E 62 FC | 	wrlong	local01, fp
0b4dc                 | '   harm(0)=1
0b4dc                 | '   harm(1)=even
0b4dc                 | '   harm(2)=odd
0b4dc                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0b4dc     3C 4E 85 F1 | 	sub	fp, #60
0b4e0     A7 06 68 FC | 	wrlong	#3, fp
0b4e4                 | LR__0888
0b4e4     A7 1A 02 FB | 	rdlong	arg05, fp
0b4e8     0D 25 02 F6 | 	mov	local04, arg05
0b4ec     02 24 66 F0 | 	shl	local04, #2
0b4f0     34 4E 05 F1 | 	add	fp, #52
0b4f4     A7 24 02 F1 | 	add	local04, fp
0b4f8     02 1A 86 F1 | 	sub	arg05, #2
0b4fc     02 1A 66 F0 | 	shl	arg05, #2
0b500     A7 1A 02 F1 | 	add	arg05, fp
0b504     0D 13 02 FB | 	rdlong	arg01, arg05
0b508     24 4E 85 F1 | 	sub	fp, #36
0b50c     A7 14 02 FB | 	rdlong	arg02, fp
0b510     14 4E 85 F1 | 	sub	fp, #20
0b514     AC 03 B1 FD | 	call	#__system___float_mul
0b518     12 FB 61 FC | 	wrlong	result1, local04
0b51c     04 4E 05 F1 | 	add	fp, #4
0b520     A7 26 02 FB | 	rdlong	local05, fp
0b524     02 26 06 F1 | 	add	local05, #2
0b528     A7 26 62 FC | 	wrlong	local05, fp
0b52c     10 26 56 F2 | 	cmps	local05, #16 wc
0b530     B0 FF 9F CD |  if_b	jmp	#LR__0888
0b534                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0b534     A7 08 68 FC | 	wrlong	#4, fp
0b538                 | LR__0889
0b538     A7 26 02 FB | 	rdlong	local05, fp
0b53c     13 25 02 F6 | 	mov	local04, local05
0b540     02 24 66 F0 | 	shl	local04, #2
0b544     34 4E 05 F1 | 	add	fp, #52
0b548     A7 24 02 F1 | 	add	local04, fp
0b54c     02 26 86 F1 | 	sub	local05, #2
0b550     02 26 66 F0 | 	shl	local05, #2
0b554     A7 26 02 F1 | 	add	local05, fp
0b558     13 13 02 FB | 	rdlong	arg01, local05
0b55c     20 4E 85 F1 | 	sub	fp, #32
0b560     A7 14 02 FB | 	rdlong	arg02, fp
0b564     18 4E 85 F1 | 	sub	fp, #24
0b568     58 03 B1 FD | 	call	#__system___float_mul
0b56c     12 FB 61 FC | 	wrlong	result1, local04
0b570     04 4E 05 F1 | 	add	fp, #4
0b574     A7 26 02 FB | 	rdlong	local05, fp
0b578     02 26 06 F1 | 	add	local05, #2
0b57c     A7 26 62 FC | 	wrlong	local05, fp
0b580     0F 26 56 F2 | 	cmps	local05, #15 wc
0b584     B0 FF 9F CD |  if_b	jmp	#LR__0889
0b588     04 4E 85 F1 | 	sub	fp, #4
0b58c                 | LR__0890
0b58c                 | ' if harm(0)>=0 then ' synthesize with harmonics
0b58c     38 4E 05 F1 | 	add	fp, #56
0b590     A7 12 02 FB | 	rdlong	arg01, fp
0b594     38 4E 85 F1 | 	sub	fp, #56
0b598     00 14 06 F6 | 	mov	arg02, #0
0b59c     01 16 66 F6 | 	neg	arg03, #1
0b5a0     54 07 B1 FD | 	call	#__system___float_cmp
0b5a4     00 FA 55 F2 | 	cmps	result1, #0 wc
0b5a8     B0 02 90 CD |  if_b	jmp	#LR__0896
0b5ac                 | '   for i=0 to 1023
0b5ac     04 4E 05 F1 | 	add	fp, #4
0b5b0     A7 00 68 FC | 	wrlong	#0, fp
0b5b4     04 4E 85 F1 | 	sub	fp, #4
0b5b8                 | LR__0891
0b5b8     20 4E 05 F1 | 	add	fp, #32
0b5bc     A7 00 68 FC | 	wrlong	#0, fp
0b5c0                 | '     spl=0
0b5c0                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0b5c0     18 4E 85 F1 | 	sub	fp, #24
0b5c4     A7 00 68 FC | 	wrlong	#0, fp
0b5c8                 | LR__0892
0b5c8     A7 24 02 FB | 	rdlong	local04, fp
0b5cc     02 24 66 F0 | 	shl	local04, #2
0b5d0     30 4E 05 F1 | 	add	fp, #48
0b5d4     A7 24 02 F1 | 	add	local04, fp
0b5d8     12 27 02 FB | 	rdlong	local05, local04
0b5dc     87 E4 1D FF 
0b5e0     DB 25 06 F6 | 	mov	local04, ##1003032539
0b5e4     34 4E 85 F1 | 	sub	fp, #52
0b5e8     A7 12 02 FB | 	rdlong	arg01, fp
0b5ec     04 4E 85 F1 | 	sub	fp, #4
0b5f0     09 13 52 F6 | 	abs	arg01, arg01 wc
0b5f4     1F 22 C6 C9 |  if_b	decod	local03, #31
0b5f8     00 22 06 36 |  if_ae	mov	local03, #0
0b5fc     C0 FE B0 FD | 	call	#__system___float_fromuns
0b600     11 FB 61 F5 | 	xor	result1, local03
0b604     FD 14 02 F6 | 	mov	arg02, result1
0b608     12 13 02 F6 | 	mov	arg01, local04
0b60c     B4 02 B1 FD | 	call	#__system___float_mul
0b610     FD 24 02 F6 | 	mov	local04, result1
0b614     08 4E 05 F1 | 	add	fp, #8
0b618     A7 12 02 FB | 	rdlong	arg01, fp
0b61c     08 4E 85 F1 | 	sub	fp, #8
0b620     01 12 06 F1 | 	add	arg01, #1
0b624     09 13 52 F6 | 	abs	arg01, arg01 wc
0b628     1F 22 C6 C9 |  if_b	decod	local03, #31
0b62c     00 22 06 36 |  if_ae	mov	local03, #0
0b630     8C FE B0 FD | 	call	#__system___float_fromuns
0b634     11 FB 61 F5 | 	xor	result1, local03
0b638     FD 14 02 F6 | 	mov	arg02, result1
0b63c     12 13 02 F6 | 	mov	arg01, local04
0b640     80 02 B1 FD | 	call	#__system___float_mul
0b644     FD 12 02 F6 | 	mov	arg01, result1
0b648     B4 0B B1 FD | 	call	#__system____builtin_sinf
0b64c     FD 14 02 F6 | 	mov	arg02, result1
0b650     13 13 02 F6 | 	mov	arg01, local05
0b654     6C 02 B1 FD | 	call	#__system___float_mul
0b658     FD 14 02 F6 | 	mov	arg02, result1
0b65c     20 4E 05 F1 | 	add	fp, #32
0b660     A7 12 02 FB | 	rdlong	arg01, fp
0b664     20 4E 85 F1 | 	sub	fp, #32
0b668     88 FE B0 FD | 	call	#__system___float_add
0b66c     20 4E 05 F1 | 	add	fp, #32
0b670     A7 FA 61 FC | 	wrlong	result1, fp
0b674     18 4E 85 F1 | 	sub	fp, #24
0b678     A7 16 02 FB | 	rdlong	arg03, fp
0b67c     01 16 06 F1 | 	add	arg03, #1
0b680     A7 16 62 FC | 	wrlong	arg03, fp
0b684     10 16 56 F2 | 	cmps	arg03, #16 wc
0b688     3C FF 9F CD |  if_b	jmp	#LR__0892
0b68c                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0b68c     18 4E 05 F1 | 	add	fp, #24
0b690     A7 12 02 FB | 	rdlong	arg01, fp
0b694     1F 12 06 F4 | 	bitl	arg01, #31
0b698     04 4E 85 F1 | 	sub	fp, #4
0b69c     A7 14 02 FB | 	rdlong	arg02, fp
0b6a0     1C 4E 85 F1 | 	sub	fp, #28
0b6a4     01 16 66 F6 | 	neg	arg03, #1
0b6a8     4C 06 B1 FD | 	call	#__system___float_cmp
0b6ac     01 FA 55 F2 | 	cmps	result1, #1 wc
0b6b0     18 00 90 CD |  if_b	jmp	#LR__0893
0b6b4     20 4E 05 F1 | 	add	fp, #32
0b6b8     A7 FA 01 FB | 	rdlong	result1, fp
0b6bc     1F FA 05 F4 | 	bitl	result1, #31
0b6c0     04 4E 85 F1 | 	sub	fp, #4
0b6c4     A7 FA 61 FC | 	wrlong	result1, fp
0b6c8     1C 4E 85 F1 | 	sub	fp, #28
0b6cc                 | LR__0893
0b6cc     04 4E 05 F1 | 	add	fp, #4
0b6d0     A7 26 02 FB | 	rdlong	local05, fp
0b6d4     01 26 06 F1 | 	add	local05, #1
0b6d8     A7 26 62 FC | 	wrlong	local05, fp
0b6dc     04 4E 85 F1 | 	sub	fp, #4
0b6e0     02 00 00 FF 
0b6e4     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b6e8     CC FE 9F CD |  if_b	jmp	#LR__0891
0b6ec                 | '   for i=0 to 1023
0b6ec     04 4E 05 F1 | 	add	fp, #4
0b6f0     A7 00 68 FC | 	wrlong	#0, fp
0b6f4     04 4E 85 F1 | 	sub	fp, #4
0b6f8                 | LR__0894
0b6f8     20 4E 05 F1 | 	add	fp, #32
0b6fc     A7 00 68 FC | 	wrlong	#0, fp
0b700                 | '     spl=0
0b700                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0b700     18 4E 85 F1 | 	sub	fp, #24
0b704     A7 00 68 FC | 	wrlong	#0, fp
0b708                 | LR__0895
0b708     A7 26 02 FB | 	rdlong	local05, fp
0b70c     02 26 66 F0 | 	shl	local05, #2
0b710     30 4E 05 F1 | 	add	fp, #48
0b714     A7 26 02 F1 | 	add	local05, fp
0b718     13 27 02 FB | 	rdlong	local05, local05
0b71c     1C 4E 85 F1 | 	sub	fp, #28
0b720     A7 14 02 FB | 	rdlong	arg02, fp
0b724     1C 4E 85 F1 | 	sub	fp, #28
0b728     58 7F 23 FF 
0b72c     00 12 06 F6 | 	mov	arg01, ##1191096320
0b730     94 03 B1 FD | 	call	#__system___float_div
0b734     FD 14 02 F6 | 	mov	arg02, result1
0b738     13 13 02 F6 | 	mov	arg01, local05
0b73c     84 01 B1 FD | 	call	#__system___float_mul
0b740     FD 26 02 F6 | 	mov	local05, result1
0b744     87 E4 1D FF 
0b748     DB 25 06 F6 | 	mov	local04, ##1003032539
0b74c     04 4E 05 F1 | 	add	fp, #4
0b750     A7 12 02 FB | 	rdlong	arg01, fp
0b754     04 4E 85 F1 | 	sub	fp, #4
0b758     09 13 52 F6 | 	abs	arg01, arg01 wc
0b75c     1F 22 C6 C9 |  if_b	decod	local03, #31
0b760     00 22 06 36 |  if_ae	mov	local03, #0
0b764     58 FD B0 FD | 	call	#__system___float_fromuns
0b768     11 FB 61 F5 | 	xor	result1, local03
0b76c     FD 14 02 F6 | 	mov	arg02, result1
0b770     12 13 02 F6 | 	mov	arg01, local04
0b774     4C 01 B1 FD | 	call	#__system___float_mul
0b778     FD 24 02 F6 | 	mov	local04, result1
0b77c     08 4E 05 F1 | 	add	fp, #8
0b780     A7 12 02 FB | 	rdlong	arg01, fp
0b784     08 4E 85 F1 | 	sub	fp, #8
0b788     01 12 06 F1 | 	add	arg01, #1
0b78c     09 13 52 F6 | 	abs	arg01, arg01 wc
0b790     1F 22 C6 C9 |  if_b	decod	local03, #31
0b794     00 22 06 36 |  if_ae	mov	local03, #0
0b798     24 FD B0 FD | 	call	#__system___float_fromuns
0b79c     11 FB 61 F5 | 	xor	result1, local03
0b7a0     FD 14 02 F6 | 	mov	arg02, result1
0b7a4     12 13 02 F6 | 	mov	arg01, local04
0b7a8     18 01 B1 FD | 	call	#__system___float_mul
0b7ac     FD 12 02 F6 | 	mov	arg01, result1
0b7b0     4C 0A B1 FD | 	call	#__system____builtin_sinf
0b7b4     FD 14 02 F6 | 	mov	arg02, result1
0b7b8     13 13 02 F6 | 	mov	arg01, local05
0b7bc     04 01 B1 FD | 	call	#__system___float_mul
0b7c0     FD 14 02 F6 | 	mov	arg02, result1
0b7c4     20 4E 05 F1 | 	add	fp, #32
0b7c8     A7 12 02 FB | 	rdlong	arg01, fp
0b7cc     20 4E 85 F1 | 	sub	fp, #32
0b7d0     20 FD B0 FD | 	call	#__system___float_add
0b7d4     20 4E 05 F1 | 	add	fp, #32
0b7d8     A7 FA 61 FC | 	wrlong	result1, fp
0b7dc     18 4E 85 F1 | 	sub	fp, #24
0b7e0     A7 26 02 FB | 	rdlong	local05, fp
0b7e4     01 26 06 F1 | 	add	local05, #1
0b7e8     A7 26 62 FC | 	wrlong	local05, fp
0b7ec     10 26 56 F2 | 	cmps	local05, #16 wc
0b7f0     14 FF 9F CD |  if_b	jmp	#LR__0895
0b7f4     08 4E 05 F1 | 	add	fp, #8
0b7f8     A7 26 02 FB | 	rdlong	local05, fp
0b7fc     0B 26 66 F0 | 	shl	local05, #11
0b800     0C 00 00 FF 
0b804     CC E4 05 F1 | 	add	objptr, ##6348
0b808     F2 26 02 F1 | 	add	local05, objptr
0b80c     0C 4E 85 F1 | 	sub	fp, #12
0b810     A7 20 02 FB | 	rdlong	local02, fp
0b814     01 20 66 F0 | 	shl	local02, #1
0b818     13 21 02 F1 | 	add	local02, local05
0b81c     1C 4E 05 F1 | 	add	fp, #28
0b820     A7 12 02 FB | 	rdlong	arg01, fp
0b824     20 4E 85 F1 | 	sub	fp, #32
0b828     0C 00 00 FF 
0b82c     CC E4 85 F1 | 	sub	objptr, ##6348
0b830     01 14 06 F6 | 	mov	arg02, #1
0b834     54 05 B1 FD | 	call	#__system___float_tointeger
0b838     10 FB 51 FC | 	wrword	result1, local02
0b83c     04 4E 05 F1 | 	add	fp, #4
0b840     A7 26 02 FB | 	rdlong	local05, fp
0b844     01 26 06 F1 | 	add	local05, #1
0b848     A7 26 62 FC | 	wrlong	local05, fp
0b84c     04 4E 85 F1 | 	sub	fp, #4
0b850     02 00 00 FF 
0b854     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b858     9C FE 9F CD |  if_b	jmp	#LR__0894
0b85c                 | LR__0896
0b85c                 | LR__0897
0b85c     A7 F0 03 F6 | 	mov	ptra, fp
0b860     B2 00 A0 FD | 	call	#popregs_
0b864                 | _do_defenv_ret
0b864     2D 00 64 FD | 	ret
0b868                 | 
0b868                 | ' 
0b868                 | ' sub do_defsnd
0b868                 | _do_defsnd
0b868     05 4A 05 F6 | 	mov	COUNT_, #5
0b86c     A8 00 A0 FD | 	call	#pushregs_
0b870     84 F0 07 F1 | 	add	ptra, #132
0b874     69 00 00 FF 
0b878     54 E5 05 F1 | 	add	objptr, ##54100
0b87c     F2 1A 02 FB | 	rdlong	arg05, objptr
0b880     0D 19 02 F6 | 	mov	arg04, arg05
0b884     01 18 66 F0 | 	shl	arg04, #1
0b888     0D 19 02 F1 | 	add	arg04, arg05
0b88c     02 18 66 F0 | 	shl	arg04, #2
0b890     03 00 00 FF 
0b894     04 E4 85 F1 | 	sub	objptr, ##1540
0b898     F2 18 02 F1 | 	add	arg04, objptr
0b89c     0C 1B 02 FB | 	rdlong	arg05, arg04
0b8a0     A7 1A 62 FC | 	wrlong	arg05, fp
0b8a4                 | ' 
0b8a4                 | ' numpar=compiledline(lineptr_e).result.uresult
0b8a4                 | ' 
0b8a4                 | ' 
0b8a4                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0b8a4                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0b8a4                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0b8a4                 | ' ' defsnd channel, oneint - defines waveshape as in SID and 0=sinewave
0b8a4                 | ' 
0b8a4                 | ' if numpar<2 then return
0b8a4     02 1A 56 F2 | 	cmps	arg05, #2 wc
0b8a8     66 00 00 FF 
0b8ac     50 E5 85 F1 | 	sub	objptr, ##52560
0b8b0     2C 09 90 CD |  if_b	jmp	#LR__0924
0b8b4                 | ' 
0b8b4                 | '  
0b8b4                 | ' if numpar=2 then
0b8b4     A7 1A 02 FB | 	rdlong	arg05, fp
0b8b8     02 1A 0E F2 | 	cmp	arg05, #2 wz
0b8bc     98 03 90 5D |  if_ne	jmp	#LR__0907
0b8c0     20 E0 BF FD | 	call	#_pop
0b8c4     FF 1A 02 F6 | 	mov	arg05, result3
0b8c8     28 4E 05 F1 | 	add	fp, #40
0b8cc     A7 FA 61 FC | 	wrlong	result1, fp
0b8d0     04 4E 05 F1 | 	add	fp, #4
0b8d4     A7 FC 61 FC | 	wrlong	result2, fp
0b8d8     04 4E 05 F1 | 	add	fp, #4
0b8dc     A7 1A 62 FC | 	wrlong	arg05, fp
0b8e0                 | '   t1=pop()
0b8e0                 | '   if t1.result_type=result_string2 then 
0b8e0     30 4E 85 F1 | 	sub	fp, #48
0b8e4     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0b8e8     20 00 90 5D |  if_ne	jmp	#LR__0900
0b8ec     28 4E 05 F1 | 	add	fp, #40
0b8f0     A7 12 02 FB | 	rdlong	arg01, fp
0b8f4     28 4E 85 F1 | 	sub	fp, #40
0b8f8     24 11 B0 FD | 	call	#_convertstring
0b8fc     34 4E 05 F1 | 	add	fp, #52
0b900     A7 FA 61 FC | 	wrlong	result1, fp
0b904     34 4E 85 F1 | 	sub	fp, #52
0b908     40 00 90 FD | 	jmp	#LR__0903
0b90c                 | LR__0900
0b90c     30 4E 05 F1 | 	add	fp, #48
0b910     A7 1A 02 FB | 	rdlong	arg05, fp
0b914     30 4E 85 F1 | 	sub	fp, #48
0b918     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0b91c     18 00 90 5D |  if_ne	jmp	#LR__0901
0b920     28 4E 05 F1 | 	add	fp, #40
0b924     A7 1A 02 FB | 	rdlong	arg05, fp
0b928     0C 4E 05 F1 | 	add	fp, #12
0b92c     A7 1A 62 FC | 	wrlong	arg05, fp
0b930     34 4E 85 F1 | 	sub	fp, #52
0b934     14 00 90 FD | 	jmp	#LR__0902
0b938                 | LR__0901
0b938     44 01 00 FF 
0b93c     4A 1A 06 F6 | 	mov	arg05, ##@LR__4577
0b940     34 4E 05 F1 | 	add	fp, #52
0b944     A7 1A 62 FC | 	wrlong	arg05, fp
0b948     34 4E 85 F1 | 	sub	fp, #52
0b94c                 | LR__0902
0b94c                 | LR__0903
0b94c                 | ' 
0b94c                 | '     
0b94c                 | '   if s<>"" then 
0b94c     34 4E 05 F1 | 	add	fp, #52
0b950     A7 12 02 FB | 	rdlong	arg01, fp
0b954     34 4E 85 F1 | 	sub	fp, #52
0b958     44 01 00 FF 
0b95c     4B 14 06 F6 | 	mov	arg02, ##@LR__4578
0b960     9C D4 B0 FD | 	call	#__system___string_cmp
0b964     00 FA 0D F2 | 	cmp	result1, #0 wz
0b968     88 01 90 AD |  if_e	jmp	#LR__0905
0b96c     74 DF BF FD | 	call	#_pop
0b970     FF 1A 02 F6 | 	mov	arg05, result3
0b974     28 4E 05 F1 | 	add	fp, #40
0b978     A7 FA 61 FC | 	wrlong	result1, fp
0b97c     04 4E 05 F1 | 	add	fp, #4
0b980     A7 FC 61 FC | 	wrlong	result2, fp
0b984     04 4E 05 F1 | 	add	fp, #4
0b988     A7 1A 62 FC | 	wrlong	arg05, fp
0b98c     08 4E 85 F1 | 	sub	fp, #8
0b990     A7 12 02 F6 | 	mov	arg01, fp
0b994     28 4E 85 F1 | 	sub	fp, #40
0b998     B8 54 B0 FD | 	call	#_converttoint
0b99c     10 4E 05 F1 | 	add	fp, #16
0b9a0     A7 FA 61 FC | 	wrlong	result1, fp
0b9a4     10 4E 85 F1 | 	sub	fp, #16
0b9a8                 | '     t1=pop()
0b9a8                 | '     channel=converttoint(t1) 
0b9a8                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0b9a8     09 12 06 F6 | 	mov	arg01, #9
0b9ac     5C 23 B1 FD | 	call	#__system__close
0b9b0     09 1E 06 F6 | 	mov	local01, #9
0b9b4     44 01 00 FF 
0b9b8     4C 12 06 F6 | 	mov	arg01, ##@LR__4579
0b9bc     34 4E 05 F1 | 	add	fp, #52
0b9c0     A7 14 02 FB | 	rdlong	arg02, fp
0b9c4     34 4E 85 F1 | 	sub	fp, #52
0b9c8     68 D4 B0 FD | 	call	#__system___string_concat
0b9cc     FD 14 02 F6 | 	mov	arg02, result1
0b9d0     0F 13 02 F6 | 	mov	arg01, local01
0b9d4     00 16 06 F6 | 	mov	arg03, #0
0b9d8     00 E0 B0 FD | 	call	#__system___basic_open_string
0b9dc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0b9e0     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b9e4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0b9e8     7A 00 00 FF 
0b9ec     D4 E5 05 F1 | 	add	objptr, ##62932
0b9f0     F2 FA 61 FC | 	wrlong	result1, objptr
0b9f4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0b9f4     7A 00 00 FF 
0b9f8     D4 E5 85 F1 | 	sub	objptr, ##62932
0b9fc     B0 00 90 AD |  if_e	jmp	#LR__0904
0ba00     00 12 06 F6 | 	mov	arg01, #0
0ba04     D4 2C B1 FD | 	call	#__system___getiolock_0423
0ba08     FD 12 02 F6 | 	mov	arg01, result1
0ba0c     C8 D3 B0 FD | 	call	#__system___lockmem
0ba10     44 01 00 FF 
0ba14     59 14 06 F6 | 	mov	arg02, ##@LR__4580
0ba18     00 12 06 F6 | 	mov	arg01, #0
0ba1c     00 16 06 F6 | 	mov	arg03, #0
0ba20     A8 E0 B0 FD | 	call	#__system___basic_print_string
0ba24     7A 00 00 FF 
0ba28     D4 E5 05 F1 | 	add	objptr, ##62932
0ba2c     F2 14 02 FB | 	rdlong	arg02, objptr
0ba30     7A 00 00 FF 
0ba34     D4 E5 85 F1 | 	sub	objptr, ##62932
0ba38     00 12 06 F6 | 	mov	arg01, #0
0ba3c     00 16 06 F6 | 	mov	arg03, #0
0ba40     0A 18 06 F6 | 	mov	arg04, #10
0ba44     C8 E0 B0 FD | 	call	#__system___basic_print_integer
0ba48     44 01 00 FF 
0ba4c     67 14 06 F6 | 	mov	arg02, ##@LR__4581
0ba50     00 12 06 F6 | 	mov	arg01, #0
0ba54     00 16 06 F6 | 	mov	arg03, #0
0ba58     70 E0 B0 FD | 	call	#__system___basic_print_string
0ba5c     00 1E 06 F6 | 	mov	local01, #0
0ba60     7A 00 00 FF 
0ba64     D4 E5 05 F1 | 	add	objptr, ##62932
0ba68     F2 12 02 FB | 	rdlong	arg01, objptr
0ba6c     7A 00 00 FF 
0ba70     D4 E5 85 F1 | 	sub	objptr, ##62932
0ba74     60 F9 B0 FD | 	call	#__system___strerror
0ba78     FD 14 02 F6 | 	mov	arg02, result1
0ba7c     0F 13 02 F6 | 	mov	arg01, local01
0ba80     00 16 06 F6 | 	mov	arg03, #0
0ba84     44 E0 B0 FD | 	call	#__system___basic_print_string
0ba88     00 12 06 F6 | 	mov	arg01, #0
0ba8c     0A 14 06 F6 | 	mov	arg02, #10
0ba90     00 16 06 F6 | 	mov	arg03, #0
0ba94     DC DF B0 FD | 	call	#__system___basic_print_char
0ba98     00 12 06 F6 | 	mov	arg01, #0
0ba9c     3C 2C B1 FD | 	call	#__system___getiolock_0423
0baa0     FD 00 68 FC | 	wrlong	#0, result1
0baa4     09 12 06 F6 | 	mov	arg01, #9
0baa8     60 22 B1 FD | 	call	#__system__close
0baac     30 07 90 FD | 	jmp	#LR__0924
0bab0                 | LR__0904
0bab0                 | '     get #9,17,samplebuf(channel,0),1024
0bab0     10 4E 05 F1 | 	add	fp, #16
0bab4     A7 16 02 FB | 	rdlong	arg03, fp
0bab8     10 4E 85 F1 | 	sub	fp, #16
0babc     0B 16 66 F0 | 	shl	arg03, #11
0bac0     0C 00 00 FF 
0bac4     CC E4 05 F1 | 	add	objptr, ##6348
0bac8     F2 16 02 F1 | 	add	arg03, objptr
0bacc     09 12 06 F6 | 	mov	arg01, #9
0bad0     11 14 06 F6 | 	mov	arg02, #17
0bad4     0A 18 C6 F9 | 	decod	arg04, #10
0bad8     02 1A 06 F6 | 	mov	arg05, #2
0badc     0C 00 00 FF 
0bae0     CC E4 85 F1 | 	sub	objptr, ##6348
0bae4     F4 E0 B0 FD | 	call	#__system___basic_get
0bae8                 | '     close #9
0bae8     09 12 06 F6 | 	mov	arg01, #9
0baec     1C 22 B1 FD | 	call	#__system__close
0baf0                 | '                                                                       '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0baf0                 | '     return
0baf0     EC 06 90 FD | 	jmp	#LR__0924
0baf4                 | LR__0905
0baf4     28 4E 05 F1 | 	add	fp, #40
0baf8     A7 12 02 F6 | 	mov	arg01, fp
0bafc     28 4E 85 F1 | 	sub	fp, #40
0bb00     50 53 B0 FD | 	call	#_converttoint
0bb04     FD 1E 02 F6 | 	mov	local01, result1
0bb08     0C 4E 05 F1 | 	add	fp, #12
0bb0c     A7 1E 62 FC | 	wrlong	local01, fp
0bb10     0C 4E 85 F1 | 	sub	fp, #12
0bb14                 | '   
0bb14                 | '   par=converttoint(t1)  : print par
0bb14     00 12 06 F6 | 	mov	arg01, #0
0bb18     C0 2B B1 FD | 	call	#__system___getiolock_0423
0bb1c     FD 12 02 F6 | 	mov	arg01, result1
0bb20     B4 D2 B0 FD | 	call	#__system___lockmem
0bb24     0C 4E 05 F1 | 	add	fp, #12
0bb28     A7 14 02 FB | 	rdlong	arg02, fp
0bb2c     0C 4E 85 F1 | 	sub	fp, #12
0bb30     00 12 06 F6 | 	mov	arg01, #0
0bb34     00 16 06 F6 | 	mov	arg03, #0
0bb38     0A 18 06 F6 | 	mov	arg04, #10
0bb3c     D0 DF B0 FD | 	call	#__system___basic_print_integer
0bb40     00 12 06 F6 | 	mov	arg01, #0
0bb44     0A 14 06 F6 | 	mov	arg02, #10
0bb48     00 16 06 F6 | 	mov	arg03, #0
0bb4c     24 DF B0 FD | 	call	#__system___basic_print_char
0bb50     00 12 06 F6 | 	mov	arg01, #0
0bb54     84 2B B1 FD | 	call	#__system___getiolock_0423
0bb58     FD 00 68 FC | 	wrlong	#0, result1
0bb5c     84 DD BF FD | 	call	#_pop
0bb60     FF 1E 02 F6 | 	mov	local01, result3
0bb64     28 4E 05 F1 | 	add	fp, #40
0bb68     A7 FA 61 FC | 	wrlong	result1, fp
0bb6c     04 4E 05 F1 | 	add	fp, #4
0bb70     A7 FC 61 FC | 	wrlong	result2, fp
0bb74     04 4E 05 F1 | 	add	fp, #4
0bb78     A7 1E 62 FC | 	wrlong	local01, fp
0bb7c     08 4E 85 F1 | 	sub	fp, #8
0bb80     A7 12 02 F6 | 	mov	arg01, fp
0bb84     28 4E 85 F1 | 	sub	fp, #40
0bb88     C8 52 B0 FD | 	call	#_converttoint
0bb8c     10 4E 05 F1 | 	add	fp, #16
0bb90     A7 FA 61 FC | 	wrlong	result1, fp
0bb94                 | '   t1=pop()
0bb94                 | '   channel=converttoint(t1)  
0bb94                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0bb94     04 4E 85 F1 | 	sub	fp, #4
0bb98     A7 1E 0A FB | 	rdlong	local01, fp wz
0bb9c     0C 4E 85 F1 | 	sub	fp, #12
0bba0     3C 06 90 5D |  if_ne	jmp	#LR__0924
0bba4     04 4E 05 F1 | 	add	fp, #4
0bba8     A7 00 68 FC | 	wrlong	#0, fp
0bbac     04 4E 85 F1 | 	sub	fp, #4
0bbb0                 | LR__0906
0bbb0     10 4E 05 F1 | 	add	fp, #16
0bbb4     A7 1E 02 FB | 	rdlong	local01, fp
0bbb8     0B 1E 66 F0 | 	shl	local01, #11
0bbbc     0C 00 00 FF 
0bbc0     CC E4 05 F1 | 	add	objptr, ##6348
0bbc4     F2 1E 02 F1 | 	add	local01, objptr
0bbc8     0C 4E 85 F1 | 	sub	fp, #12
0bbcc     A7 12 02 FB | 	rdlong	arg01, fp
0bbd0     09 21 02 F6 | 	mov	local02, arg01
0bbd4     01 20 66 F0 | 	shl	local02, #1
0bbd8     0F 21 02 F1 | 	add	local02, local01
0bbdc     04 4E 85 F1 | 	sub	fp, #4
0bbe0     0C 00 00 FF 
0bbe4     CC E4 85 F1 | 	sub	objptr, ##6348
0bbe8     09 13 52 F6 | 	abs	arg01, arg01 wc
0bbec     1F 22 C6 C9 |  if_b	decod	local03, #31
0bbf0     00 22 06 36 |  if_ae	mov	local03, #0
0bbf4     C8 F8 B0 FD | 	call	#__system___float_fromuns
0bbf8     11 FB 61 F5 | 	xor	result1, local03
0bbfc     FD 14 02 F6 | 	mov	arg02, result1
0bc00     87 E4 1D FF 
0bc04     DB 13 06 F6 | 	mov	arg01, ##1003032539
0bc08     B8 FC B0 FD | 	call	#__system___float_mul
0bc0c     FD 12 02 F6 | 	mov	arg01, result1
0bc10     EC 05 B1 FD | 	call	#__system____builtin_sinf
0bc14     FD 14 02 F6 | 	mov	arg02, result1
0bc18     58 7F 23 FF 
0bc1c     00 12 06 F6 | 	mov	arg01, ##1191096320
0bc20     A0 FC B0 FD | 	call	#__system___float_mul
0bc24     FD 12 02 F6 | 	mov	arg01, result1
0bc28     01 14 06 F6 | 	mov	arg02, #1
0bc2c     5C 01 B1 FD | 	call	#__system___float_tointeger
0bc30     10 FB 51 FC | 	wrword	result1, local02
0bc34     04 4E 05 F1 | 	add	fp, #4
0bc38     A7 20 02 FB | 	rdlong	local02, fp
0bc3c     01 20 06 F1 | 	add	local02, #1
0bc40     A7 20 62 FC | 	wrlong	local02, fp
0bc44     04 4E 85 F1 | 	sub	fp, #4
0bc48     02 00 00 FF 
0bc4c     00 20 56 F2 | 	cmps	local02, ##1024 wc
0bc50     5C FF 9F CD |  if_b	jmp	#LR__0906
0bc54                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0bc54                 | '   return
0bc54     88 05 90 FD | 	jmp	#LR__0924
0bc58                 | LR__0907
0bc58                 | ' for i=0 to 15 : harm(i)=0: next i  
0bc58     04 4E 05 F1 | 	add	fp, #4
0bc5c     A7 00 68 FC | 	wrlong	#0, fp
0bc60     97 16 48 FB | 	callpa	#(@LR__0909-@LR__0908)>>2,fcache_load_ptr_
0bc64                 | LR__0908
0bc64     A7 1E 02 FB | 	rdlong	local01, fp
0bc68     02 1E 66 F0 | 	shl	local01, #2
0bc6c     34 4E 05 F1 | 	add	fp, #52
0bc70     A7 1E 02 F1 | 	add	local01, fp
0bc74     0F 01 68 FC | 	wrlong	#0, local01
0bc78     34 4E 85 F1 | 	sub	fp, #52
0bc7c     A7 1E 02 FB | 	rdlong	local01, fp
0bc80     01 1E 06 F1 | 	add	local01, #1
0bc84     A7 1E 62 FC | 	wrlong	local01, fp
0bc88     10 1E 56 F2 | 	cmps	local01, #16 wc
0bc8c     D4 FF 9F CD |  if_b	jmp	#LR__0908
0bc90                 | LR__0909
0bc90     04 4E 85 F1 | 	sub	fp, #4
0bc94                 | ' for i=numpar to 2 step -1 
0bc94     A7 1E 02 FB | 	rdlong	local01, fp
0bc98     04 4E 05 F1 | 	add	fp, #4
0bc9c     A7 1E 62 FC | 	wrlong	local01, fp
0bca0     04 4E 85 F1 | 	sub	fp, #4
0bca4                 | LR__0910
0bca4     3C DC BF FD | 	call	#_pop
0bca8     28 4E 05 F1 | 	add	fp, #40
0bcac     A7 FA 61 FC | 	wrlong	result1, fp
0bcb0     04 4E 05 F1 | 	add	fp, #4
0bcb4     A7 FC 61 FC | 	wrlong	result2, fp
0bcb8     04 4E 05 F1 | 	add	fp, #4
0bcbc     A7 FE 61 FC | 	wrlong	result3, fp
0bcc0     2C 4E 85 F1 | 	sub	fp, #44
0bcc4     A7 1E 02 FB | 	rdlong	local01, fp
0bcc8     02 1E 86 F1 | 	sub	local01, #2
0bccc     02 1E 66 F0 | 	shl	local01, #2
0bcd0     34 4E 05 F1 | 	add	fp, #52
0bcd4     A7 1E 02 F1 | 	add	local01, fp
0bcd8     10 4E 85 F1 | 	sub	fp, #16
0bcdc     A7 12 02 F6 | 	mov	arg01, fp
0bce0     28 4E 85 F1 | 	sub	fp, #40
0bce4     18 52 B0 FD | 	call	#_converttofloat
0bce8     0F FB 61 FC | 	wrlong	result1, local01
0bcec     04 4E 05 F1 | 	add	fp, #4
0bcf0     A7 1E 02 FB | 	rdlong	local01, fp
0bcf4     01 1E 86 F1 | 	sub	local01, #1
0bcf8     A7 1E 62 FC | 	wrlong	local01, fp
0bcfc     04 4E 85 F1 | 	sub	fp, #4
0bd00     02 1E 56 F2 | 	cmps	local01, #2 wc
0bd04     9C FF 9F 3D |  if_ae	jmp	#LR__0910
0bd08     D8 DB BF FD | 	call	#_pop
0bd0c     FF 1E 02 F6 | 	mov	local01, result3
0bd10     28 4E 05 F1 | 	add	fp, #40
0bd14     A7 FA 61 FC | 	wrlong	result1, fp
0bd18     04 4E 05 F1 | 	add	fp, #4
0bd1c     A7 FC 61 FC | 	wrlong	result2, fp
0bd20     04 4E 05 F1 | 	add	fp, #4
0bd24     A7 1E 62 FC | 	wrlong	local01, fp
0bd28     08 4E 85 F1 | 	sub	fp, #8
0bd2c     A7 12 02 F6 | 	mov	arg01, fp
0bd30     28 4E 85 F1 | 	sub	fp, #40
0bd34     1C 51 B0 FD | 	call	#_converttoint
0bd38     FD 1E 02 F6 | 	mov	local01, result1
0bd3c     10 4E 05 F1 | 	add	fp, #16
0bd40     A7 1E 62 FC | 	wrlong	local01, fp
0bd44     10 4E 85 F1 | 	sub	fp, #16
0bd48                 | ' t1=pop()
0bd48                 | ' channel=converttoint(t1) : print channel
0bd48     00 12 06 F6 | 	mov	arg01, #0
0bd4c     8C 29 B1 FD | 	call	#__system___getiolock_0423
0bd50     FD 12 02 F6 | 	mov	arg01, result1
0bd54     80 D0 B0 FD | 	call	#__system___lockmem
0bd58     10 4E 05 F1 | 	add	fp, #16
0bd5c     A7 14 02 FB | 	rdlong	arg02, fp
0bd60     10 4E 85 F1 | 	sub	fp, #16
0bd64     00 12 06 F6 | 	mov	arg01, #0
0bd68     00 16 06 F6 | 	mov	arg03, #0
0bd6c     0A 18 06 F6 | 	mov	arg04, #10
0bd70     9C DD B0 FD | 	call	#__system___basic_print_integer
0bd74     00 12 06 F6 | 	mov	arg01, #0
0bd78     0A 14 06 F6 | 	mov	arg02, #10
0bd7c     00 16 06 F6 | 	mov	arg03, #0
0bd80     F0 DC B0 FD | 	call	#__system___basic_print_char
0bd84     00 12 06 F6 | 	mov	arg01, #0
0bd88     50 29 B1 FD | 	call	#__system___getiolock_0423
0bd8c     FD 00 68 FC | 	wrlong	#0, result1
0bd90                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0bd90     08 4E 05 F1 | 	add	fp, #8
0bd94     02 00 80 FF 
0bd98     A7 00 68 FC | 	wrlong	##1024, fp
0bd9c     08 4E 85 F1 | 	sub	fp, #8
0bda0     0C 00 00 FF 
0bda4     CC E4 05 F1 | 	add	objptr, ##6348
0bda8     97 18 48 FB | 	callpa	#(@LR__0913-@LR__0911)>>2,fcache_load_ptr_
0bdac                 | LR__0911
0bdac     02 00 00 FF 
0bdb0     00 14 DC FC | 	rep	@LR__0914, ##1024
0bdb4                 | LR__0912
0bdb4     10 4E 05 F1 | 	add	fp, #16
0bdb8     A7 20 02 FB | 	rdlong	local02, fp
0bdbc     0B 20 66 F0 | 	shl	local02, #11
0bdc0     F2 20 02 F1 | 	add	local02, objptr
0bdc4     0C 4E 85 F1 | 	sub	fp, #12
0bdc8     A7 1E 02 FB | 	rdlong	local01, fp
0bdcc     04 4E 85 F1 | 	sub	fp, #4
0bdd0     01 1E 66 F0 | 	shl	local01, #1
0bdd4     10 1F 02 F1 | 	add	local01, local02
0bdd8     0F 01 58 FC | 	wrword	#0, local01
0bddc                 | LR__0913
0bddc                 | LR__0914
0bddc     0C 00 00 FF 
0bde0     CC E4 85 F1 | 	sub	objptr, ##6348
0bde4     1C 4E 05 F1 | 	add	fp, #28
0bde8     A7 00 68 FC | 	wrlong	#0, fp
0bdec                 | ' max=0
0bdec                 | ' if harm(0)<0 then
0bdec     1C 4E 05 F1 | 	add	fp, #28
0bdf0     A7 12 02 FB | 	rdlong	arg01, fp
0bdf4     38 4E 85 F1 | 	sub	fp, #56
0bdf8     00 14 06 F6 | 	mov	arg02, #0
0bdfc     01 16 06 F6 | 	mov	arg03, #1
0be00     F4 FE B0 FD | 	call	#__system___float_cmp
0be04     00 FA 55 F2 | 	cmps	result1, #0 wc
0be08     04 01 90 3D |  if_ae	jmp	#LR__0917
0be0c     38 4E 05 F1 | 	add	fp, #56
0be10     A7 FA 01 FB | 	rdlong	result1, fp
0be14     1F FA 05 F4 | 	bitl	result1, #31
0be18     24 4E 85 F1 | 	sub	fp, #36
0be1c     A7 FA 61 FC | 	wrlong	result1, fp
0be20     28 4E 05 F1 | 	add	fp, #40
0be24     A7 FA 01 FB | 	rdlong	result1, fp
0be28     1F FA 05 F4 | 	bitl	result1, #31
0be2c     24 4E 85 F1 | 	sub	fp, #36
0be30     A7 FA 61 FC | 	wrlong	result1, fp
0be34     20 4E 05 F1 | 	add	fp, #32
0be38     00 C0 9F FF 
0be3c     A7 00 68 FC | 	wrlong	##1065353216, fp
0be40     24 4E 85 F1 | 	sub	fp, #36
0be44     A7 1E 02 FB | 	rdlong	local01, fp
0be48     28 4E 05 F1 | 	add	fp, #40
0be4c     A7 1E 62 FC | 	wrlong	local01, fp
0be50     24 4E 85 F1 | 	sub	fp, #36
0be54     A7 1E 02 FB | 	rdlong	local01, fp
0be58     28 4E 05 F1 | 	add	fp, #40
0be5c     A7 1E 62 FC | 	wrlong	local01, fp
0be60                 | '   harm(0)=1
0be60                 | '   harm(1)=even
0be60                 | '   harm(2)=odd
0be60                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0be60     3C 4E 85 F1 | 	sub	fp, #60
0be64     A7 06 68 FC | 	wrlong	#3, fp
0be68                 | LR__0915
0be68     A7 1A 02 FB | 	rdlong	arg05, fp
0be6c     0D 25 02 F6 | 	mov	local04, arg05
0be70     02 24 66 F0 | 	shl	local04, #2
0be74     34 4E 05 F1 | 	add	fp, #52
0be78     A7 24 02 F1 | 	add	local04, fp
0be7c     02 1A 86 F1 | 	sub	arg05, #2
0be80     02 1A 66 F0 | 	shl	arg05, #2
0be84     A7 1A 02 F1 | 	add	arg05, fp
0be88     0D 13 02 FB | 	rdlong	arg01, arg05
0be8c     24 4E 85 F1 | 	sub	fp, #36
0be90     A7 14 02 FB | 	rdlong	arg02, fp
0be94     14 4E 85 F1 | 	sub	fp, #20
0be98     28 FA B0 FD | 	call	#__system___float_mul
0be9c     12 FB 61 FC | 	wrlong	result1, local04
0bea0     04 4E 05 F1 | 	add	fp, #4
0bea4     A7 26 02 FB | 	rdlong	local05, fp
0bea8     02 26 06 F1 | 	add	local05, #2
0beac     A7 26 62 FC | 	wrlong	local05, fp
0beb0     10 26 56 F2 | 	cmps	local05, #16 wc
0beb4     B0 FF 9F CD |  if_b	jmp	#LR__0915
0beb8                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0beb8     A7 08 68 FC | 	wrlong	#4, fp
0bebc                 | LR__0916
0bebc     A7 26 02 FB | 	rdlong	local05, fp
0bec0     13 25 02 F6 | 	mov	local04, local05
0bec4     02 24 66 F0 | 	shl	local04, #2
0bec8     34 4E 05 F1 | 	add	fp, #52
0becc     A7 24 02 F1 | 	add	local04, fp
0bed0     02 26 86 F1 | 	sub	local05, #2
0bed4     02 26 66 F0 | 	shl	local05, #2
0bed8     A7 26 02 F1 | 	add	local05, fp
0bedc     13 13 02 FB | 	rdlong	arg01, local05
0bee0     20 4E 85 F1 | 	sub	fp, #32
0bee4     A7 14 02 FB | 	rdlong	arg02, fp
0bee8     18 4E 85 F1 | 	sub	fp, #24
0beec     D4 F9 B0 FD | 	call	#__system___float_mul
0bef0     12 FB 61 FC | 	wrlong	result1, local04
0bef4     04 4E 05 F1 | 	add	fp, #4
0bef8     A7 26 02 FB | 	rdlong	local05, fp
0befc     02 26 06 F1 | 	add	local05, #2
0bf00     A7 26 62 FC | 	wrlong	local05, fp
0bf04     0F 26 56 F2 | 	cmps	local05, #15 wc
0bf08     B0 FF 9F CD |  if_b	jmp	#LR__0916
0bf0c     04 4E 85 F1 | 	sub	fp, #4
0bf10                 | LR__0917
0bf10                 | ' if harm(0)>=0 then ' synthesize with harmonics
0bf10     38 4E 05 F1 | 	add	fp, #56
0bf14     A7 12 02 FB | 	rdlong	arg01, fp
0bf18     38 4E 85 F1 | 	sub	fp, #56
0bf1c     00 14 06 F6 | 	mov	arg02, #0
0bf20     01 16 66 F6 | 	neg	arg03, #1
0bf24     D0 FD B0 FD | 	call	#__system___float_cmp
0bf28     00 FA 55 F2 | 	cmps	result1, #0 wc
0bf2c     B0 02 90 CD |  if_b	jmp	#LR__0923
0bf30                 | '   for i=0 to 1023
0bf30     04 4E 05 F1 | 	add	fp, #4
0bf34     A7 00 68 FC | 	wrlong	#0, fp
0bf38     04 4E 85 F1 | 	sub	fp, #4
0bf3c                 | LR__0918
0bf3c     20 4E 05 F1 | 	add	fp, #32
0bf40     A7 00 68 FC | 	wrlong	#0, fp
0bf44                 | '     spl=0
0bf44                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0bf44     18 4E 85 F1 | 	sub	fp, #24
0bf48     A7 00 68 FC | 	wrlong	#0, fp
0bf4c                 | LR__0919
0bf4c     A7 24 02 FB | 	rdlong	local04, fp
0bf50     02 24 66 F0 | 	shl	local04, #2
0bf54     30 4E 05 F1 | 	add	fp, #48
0bf58     A7 24 02 F1 | 	add	local04, fp
0bf5c     12 27 02 FB | 	rdlong	local05, local04
0bf60     87 E4 1D FF 
0bf64     DB 25 06 F6 | 	mov	local04, ##1003032539
0bf68     34 4E 85 F1 | 	sub	fp, #52
0bf6c     A7 12 02 FB | 	rdlong	arg01, fp
0bf70     04 4E 85 F1 | 	sub	fp, #4
0bf74     09 13 52 F6 | 	abs	arg01, arg01 wc
0bf78     1F 22 C6 C9 |  if_b	decod	local03, #31
0bf7c     00 22 06 36 |  if_ae	mov	local03, #0
0bf80     3C F5 B0 FD | 	call	#__system___float_fromuns
0bf84     11 FB 61 F5 | 	xor	result1, local03
0bf88     FD 14 02 F6 | 	mov	arg02, result1
0bf8c     12 13 02 F6 | 	mov	arg01, local04
0bf90     30 F9 B0 FD | 	call	#__system___float_mul
0bf94     FD 24 02 F6 | 	mov	local04, result1
0bf98     08 4E 05 F1 | 	add	fp, #8
0bf9c     A7 12 02 FB | 	rdlong	arg01, fp
0bfa0     08 4E 85 F1 | 	sub	fp, #8
0bfa4     01 12 06 F1 | 	add	arg01, #1
0bfa8     09 13 52 F6 | 	abs	arg01, arg01 wc
0bfac     1F 22 C6 C9 |  if_b	decod	local03, #31
0bfb0     00 22 06 36 |  if_ae	mov	local03, #0
0bfb4     08 F5 B0 FD | 	call	#__system___float_fromuns
0bfb8     11 FB 61 F5 | 	xor	result1, local03
0bfbc     FD 14 02 F6 | 	mov	arg02, result1
0bfc0     12 13 02 F6 | 	mov	arg01, local04
0bfc4     FC F8 B0 FD | 	call	#__system___float_mul
0bfc8     FD 12 02 F6 | 	mov	arg01, result1
0bfcc     30 02 B1 FD | 	call	#__system____builtin_sinf
0bfd0     FD 14 02 F6 | 	mov	arg02, result1
0bfd4     13 13 02 F6 | 	mov	arg01, local05
0bfd8     E8 F8 B0 FD | 	call	#__system___float_mul
0bfdc     FD 14 02 F6 | 	mov	arg02, result1
0bfe0     20 4E 05 F1 | 	add	fp, #32
0bfe4     A7 12 02 FB | 	rdlong	arg01, fp
0bfe8     20 4E 85 F1 | 	sub	fp, #32
0bfec     04 F5 B0 FD | 	call	#__system___float_add
0bff0     20 4E 05 F1 | 	add	fp, #32
0bff4     A7 FA 61 FC | 	wrlong	result1, fp
0bff8     18 4E 85 F1 | 	sub	fp, #24
0bffc     A7 16 02 FB | 	rdlong	arg03, fp
0c000     01 16 06 F1 | 	add	arg03, #1
0c004     A7 16 62 FC | 	wrlong	arg03, fp
0c008     10 16 56 F2 | 	cmps	arg03, #16 wc
0c00c     3C FF 9F CD |  if_b	jmp	#LR__0919
0c010                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0c010     18 4E 05 F1 | 	add	fp, #24
0c014     A7 12 02 FB | 	rdlong	arg01, fp
0c018     1F 12 06 F4 | 	bitl	arg01, #31
0c01c     04 4E 85 F1 | 	sub	fp, #4
0c020     A7 14 02 FB | 	rdlong	arg02, fp
0c024     1C 4E 85 F1 | 	sub	fp, #28
0c028     01 16 66 F6 | 	neg	arg03, #1
0c02c     C8 FC B0 FD | 	call	#__system___float_cmp
0c030     01 FA 55 F2 | 	cmps	result1, #1 wc
0c034     18 00 90 CD |  if_b	jmp	#LR__0920
0c038     20 4E 05 F1 | 	add	fp, #32
0c03c     A7 FA 01 FB | 	rdlong	result1, fp
0c040     1F FA 05 F4 | 	bitl	result1, #31
0c044     04 4E 85 F1 | 	sub	fp, #4
0c048     A7 FA 61 FC | 	wrlong	result1, fp
0c04c     1C 4E 85 F1 | 	sub	fp, #28
0c050                 | LR__0920
0c050     04 4E 05 F1 | 	add	fp, #4
0c054     A7 26 02 FB | 	rdlong	local05, fp
0c058     01 26 06 F1 | 	add	local05, #1
0c05c     A7 26 62 FC | 	wrlong	local05, fp
0c060     04 4E 85 F1 | 	sub	fp, #4
0c064     02 00 00 FF 
0c068     00 26 56 F2 | 	cmps	local05, ##1024 wc
0c06c     CC FE 9F CD |  if_b	jmp	#LR__0918
0c070                 | '   for i=0 to 1023
0c070     04 4E 05 F1 | 	add	fp, #4
0c074     A7 00 68 FC | 	wrlong	#0, fp
0c078     04 4E 85 F1 | 	sub	fp, #4
0c07c                 | LR__0921
0c07c     20 4E 05 F1 | 	add	fp, #32
0c080     A7 00 68 FC | 	wrlong	#0, fp
0c084                 | '     spl=0
0c084                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0c084     18 4E 85 F1 | 	sub	fp, #24
0c088     A7 00 68 FC | 	wrlong	#0, fp
0c08c                 | LR__0922
0c08c     A7 26 02 FB | 	rdlong	local05, fp
0c090     02 26 66 F0 | 	shl	local05, #2
0c094     30 4E 05 F1 | 	add	fp, #48
0c098     A7 26 02 F1 | 	add	local05, fp
0c09c     13 27 02 FB | 	rdlong	local05, local05
0c0a0     1C 4E 85 F1 | 	sub	fp, #28
0c0a4     A7 14 02 FB | 	rdlong	arg02, fp
0c0a8     1C 4E 85 F1 | 	sub	fp, #28
0c0ac     58 7F 23 FF 
0c0b0     00 12 06 F6 | 	mov	arg01, ##1191096320
0c0b4     10 FA B0 FD | 	call	#__system___float_div
0c0b8     FD 14 02 F6 | 	mov	arg02, result1
0c0bc     13 13 02 F6 | 	mov	arg01, local05
0c0c0     00 F8 B0 FD | 	call	#__system___float_mul
0c0c4     FD 26 02 F6 | 	mov	local05, result1
0c0c8     87 E4 1D FF 
0c0cc     DB 25 06 F6 | 	mov	local04, ##1003032539
0c0d0     04 4E 05 F1 | 	add	fp, #4
0c0d4     A7 12 02 FB | 	rdlong	arg01, fp
0c0d8     04 4E 85 F1 | 	sub	fp, #4
0c0dc     09 13 52 F6 | 	abs	arg01, arg01 wc
0c0e0     1F 22 C6 C9 |  if_b	decod	local03, #31
0c0e4     00 22 06 36 |  if_ae	mov	local03, #0
0c0e8     D4 F3 B0 FD | 	call	#__system___float_fromuns
0c0ec     11 FB 61 F5 | 	xor	result1, local03
0c0f0     FD 14 02 F6 | 	mov	arg02, result1
0c0f4     12 13 02 F6 | 	mov	arg01, local04
0c0f8     C8 F7 B0 FD | 	call	#__system___float_mul
0c0fc     FD 24 02 F6 | 	mov	local04, result1
0c100     08 4E 05 F1 | 	add	fp, #8
0c104     A7 12 02 FB | 	rdlong	arg01, fp
0c108     08 4E 85 F1 | 	sub	fp, #8
0c10c     01 12 06 F1 | 	add	arg01, #1
0c110     09 13 52 F6 | 	abs	arg01, arg01 wc
0c114     1F 22 C6 C9 |  if_b	decod	local03, #31
0c118     00 22 06 36 |  if_ae	mov	local03, #0
0c11c     A0 F3 B0 FD | 	call	#__system___float_fromuns
0c120     11 FB 61 F5 | 	xor	result1, local03
0c124     FD 14 02 F6 | 	mov	arg02, result1
0c128     12 13 02 F6 | 	mov	arg01, local04
0c12c     94 F7 B0 FD | 	call	#__system___float_mul
0c130     FD 12 02 F6 | 	mov	arg01, result1
0c134     C8 00 B1 FD | 	call	#__system____builtin_sinf
0c138     FD 14 02 F6 | 	mov	arg02, result1
0c13c     13 13 02 F6 | 	mov	arg01, local05
0c140     80 F7 B0 FD | 	call	#__system___float_mul
0c144     FD 14 02 F6 | 	mov	arg02, result1
0c148     20 4E 05 F1 | 	add	fp, #32
0c14c     A7 12 02 FB | 	rdlong	arg01, fp
0c150     20 4E 85 F1 | 	sub	fp, #32
0c154     9C F3 B0 FD | 	call	#__system___float_add
0c158     20 4E 05 F1 | 	add	fp, #32
0c15c     A7 FA 61 FC | 	wrlong	result1, fp
0c160     18 4E 85 F1 | 	sub	fp, #24
0c164     A7 26 02 FB | 	rdlong	local05, fp
0c168     01 26 06 F1 | 	add	local05, #1
0c16c     A7 26 62 FC | 	wrlong	local05, fp
0c170     10 26 56 F2 | 	cmps	local05, #16 wc
0c174     14 FF 9F CD |  if_b	jmp	#LR__0922
0c178     08 4E 05 F1 | 	add	fp, #8
0c17c     A7 26 02 FB | 	rdlong	local05, fp
0c180     0B 26 66 F0 | 	shl	local05, #11
0c184     0C 00 00 FF 
0c188     CC E4 05 F1 | 	add	objptr, ##6348
0c18c     F2 26 02 F1 | 	add	local05, objptr
0c190     0C 4E 85 F1 | 	sub	fp, #12
0c194     A7 20 02 FB | 	rdlong	local02, fp
0c198     01 20 66 F0 | 	shl	local02, #1
0c19c     13 21 02 F1 | 	add	local02, local05
0c1a0     1C 4E 05 F1 | 	add	fp, #28
0c1a4     A7 12 02 FB | 	rdlong	arg01, fp
0c1a8     20 4E 85 F1 | 	sub	fp, #32
0c1ac     0C 00 00 FF 
0c1b0     CC E4 85 F1 | 	sub	objptr, ##6348
0c1b4     01 14 06 F6 | 	mov	arg02, #1
0c1b8     D0 FB B0 FD | 	call	#__system___float_tointeger
0c1bc     10 FB 51 FC | 	wrword	result1, local02
0c1c0     04 4E 05 F1 | 	add	fp, #4
0c1c4     A7 26 02 FB | 	rdlong	local05, fp
0c1c8     01 26 06 F1 | 	add	local05, #1
0c1cc     A7 26 62 FC | 	wrlong	local05, fp
0c1d0     04 4E 85 F1 | 	sub	fp, #4
0c1d4     02 00 00 FF 
0c1d8     00 26 56 F2 | 	cmps	local05, ##1024 wc
0c1dc     9C FE 9F CD |  if_b	jmp	#LR__0921
0c1e0                 | LR__0923
0c1e0                 | LR__0924
0c1e0     A7 F0 03 F6 | 	mov	ptra, fp
0c1e4     B2 00 A0 FD | 	call	#popregs_
0c1e8                 | _do_defsnd_ret
0c1e8     2D 00 64 FD | 	ret
0c1ec                 | 
0c1ec                 | ' 
0c1ec                 | ' ' ---------------  List the program. 
0c1ec                 | ' 
0c1ec                 | ' sub do_list
0c1ec                 | _do_list
0c1ec     02 4A 05 F6 | 	mov	COUNT_, #2
0c1f0     A8 00 A0 FD | 	call	#pushregs_
0c1f4     B8 F0 07 F1 | 	add	ptra, #184
0c1f8     04 4E 05 F1 | 	add	fp, #4
0c1fc     A7 00 68 FC | 	wrlong	#0, fp
0c200     04 4E 05 F1 | 	add	fp, #4
0c204     FF FF BF FF 
0c208     A7 FE 6B FC | 	wrlong	##2147483647, fp
0c20c     08 4E 85 F1 | 	sub	fp, #8
0c210     69 00 00 FF 
0c214     54 E5 05 F1 | 	add	objptr, ##54100
0c218     F2 1E 02 FB | 	rdlong	local01, objptr
0c21c     0F 17 02 F6 | 	mov	arg03, local01
0c220     01 16 66 F0 | 	shl	arg03, #1
0c224     0F 17 02 F1 | 	add	arg03, local01
0c228     02 16 66 F0 | 	shl	arg03, #2
0c22c     03 00 00 FF 
0c230     04 E4 85 F1 | 	sub	objptr, ##1540
0c234     F2 16 02 F1 | 	add	arg03, objptr
0c238     0B 17 02 FB | 	rdlong	arg03, arg03
0c23c     A7 16 62 FC | 	wrlong	arg03, fp
0c240                 | ' 
0c240                 | ' startline=0 : endline=$7FFFFFFF
0c240                 | ' numpar=compiledline(lineptr_e).result.uresult
0c240                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0c240     01 16 0E F2 | 	cmp	arg03, #1 wz
0c244     66 00 00 FF 
0c248     50 E5 85 F1 | 	sub	objptr, ##52560
0c24c     3C 00 90 5D |  if_ne	jmp	#LR__0930
0c250     90 D6 BF FD | 	call	#_pop
0c254     FF 1E 02 F6 | 	mov	local01, result3
0c258     0C 4E 05 F1 | 	add	fp, #12
0c25c     A7 FA 61 FC | 	wrlong	result1, fp
0c260     04 4E 05 F1 | 	add	fp, #4
0c264     A7 FC 61 FC | 	wrlong	result2, fp
0c268     04 4E 05 F1 | 	add	fp, #4
0c26c     A7 1E 62 FC | 	wrlong	local01, fp
0c270     08 4E 85 F1 | 	sub	fp, #8
0c274     A7 12 02 F6 | 	mov	arg01, fp
0c278     0C 4E 85 F1 | 	sub	fp, #12
0c27c     D4 4B B0 FD | 	call	#_converttoint
0c280     04 4E 05 F1 | 	add	fp, #4
0c284     A7 FA 61 FC | 	wrlong	result1, fp
0c288     04 4E 85 F1 | 	sub	fp, #4
0c28c                 | LR__0930
0c28c                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0c28c     A7 16 02 FB | 	rdlong	arg03, fp
0c290     02 16 0E F2 | 	cmp	arg03, #2 wz
0c294     7C 00 90 5D |  if_ne	jmp	#LR__0931
0c298     48 D6 BF FD | 	call	#_pop
0c29c     FF 1E 02 F6 | 	mov	local01, result3
0c2a0     0C 4E 05 F1 | 	add	fp, #12
0c2a4     A7 FA 61 FC | 	wrlong	result1, fp
0c2a8     04 4E 05 F1 | 	add	fp, #4
0c2ac     A7 FC 61 FC | 	wrlong	result2, fp
0c2b0     04 4E 05 F1 | 	add	fp, #4
0c2b4     A7 1E 62 FC | 	wrlong	local01, fp
0c2b8     08 4E 85 F1 | 	sub	fp, #8
0c2bc     A7 12 02 F6 | 	mov	arg01, fp
0c2c0     0C 4E 85 F1 | 	sub	fp, #12
0c2c4     8C 4B B0 FD | 	call	#_converttoint
0c2c8     FD 1E 02 F6 | 	mov	local01, result1
0c2cc     08 4E 05 F1 | 	add	fp, #8
0c2d0     A7 1E 62 FC | 	wrlong	local01, fp
0c2d4     08 4E 85 F1 | 	sub	fp, #8
0c2d8     08 D6 BF FD | 	call	#_pop
0c2dc     FF 1E 02 F6 | 	mov	local01, result3
0c2e0     0C 4E 05 F1 | 	add	fp, #12
0c2e4     A7 FA 61 FC | 	wrlong	result1, fp
0c2e8     04 4E 05 F1 | 	add	fp, #4
0c2ec     A7 FC 61 FC | 	wrlong	result2, fp
0c2f0     04 4E 05 F1 | 	add	fp, #4
0c2f4     A7 1E 62 FC | 	wrlong	local01, fp
0c2f8     08 4E 85 F1 | 	sub	fp, #8
0c2fc     A7 12 02 F6 | 	mov	arg01, fp
0c300     0C 4E 85 F1 | 	sub	fp, #12
0c304     4C 4B B0 FD | 	call	#_converttoint
0c308     04 4E 05 F1 | 	add	fp, #4
0c30c     A7 FA 61 FC | 	wrlong	result1, fp
0c310     04 4E 85 F1 | 	sub	fp, #4
0c314                 | LR__0931
0c314                 | ' 
0c314                 | ' 
0c314                 | ' print
0c314     00 12 06 F6 | 	mov	arg01, #0
0c318     C0 23 B1 FD | 	call	#__system___getiolock_0423
0c31c     FD 12 02 F6 | 	mov	arg01, result1
0c320     B4 CA B0 FD | 	call	#__system___lockmem
0c324     00 12 06 F6 | 	mov	arg01, #0
0c328     0A 14 06 F6 | 	mov	arg02, #10
0c32c     00 16 06 F6 | 	mov	arg03, #0
0c330     40 D7 B0 FD | 	call	#__system___basic_print_char
0c334     00 12 06 F6 | 	mov	arg01, #0
0c338     A0 23 B1 FD | 	call	#__system___getiolock_0423
0c33c     FD 00 68 FC | 	wrlong	#0, result1
0c340     69 00 00 FF 
0c344     58 E5 05 F1 | 	add	objptr, ##54104
0c348     F2 20 02 FB | 	rdlong	local02, objptr
0c34c     11 00 00 FF 
0c350     74 E4 05 F1 | 	add	objptr, ##8820
0c354     F2 20 62 FC | 	wrlong	local02, objptr
0c358     7A 00 00 FF 
0c35c     CC E5 85 F1 | 	sub	objptr, ##62924
0c360                 | ' do 
0c360                 | LR__0932
0c360     20 4E 05 F1 | 	add	fp, #32
0c364     A7 12 02 F6 | 	mov	arg01, fp
0c368     20 4E 85 F1 | 	sub	fp, #32
0c36c     7A 00 00 FF 
0c370     CC E5 05 F1 | 	add	objptr, ##62924
0c374     F2 14 02 FB | 	rdlong	arg02, objptr
0c378     18 16 06 F6 | 	mov	arg03, #24
0c37c     6F 00 00 FF 
0c380     0C E5 85 F1 | 	sub	objptr, ##57100
0c384     00 BF B0 FD | 	call	#_psram_spin2_read1
0c388     0B 00 00 FF 
0c38c     C0 E4 85 F1 | 	sub	objptr, ##5824
0c390                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
0c390                 | '   if header(0)<> $FFFFFFFF then
0c390     20 4E 05 F1 | 	add	fp, #32
0c394     A7 20 02 FB | 	rdlong	local02, fp
0c398     20 4E 85 F1 | 	sub	fp, #32
0c39c     FF FF 7F FF 
0c3a0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0c3a4     A8 00 90 AD |  if_e	jmp	#LR__0934
0c3a8     38 4E 05 F1 | 	add	fp, #56
0c3ac     3F 16 06 F6 | 	mov	arg03, #63
0c3b0     28 16 62 FD | 	setq	arg03
0c3b4     A7 00 68 FC | 	wrlong	#0, fp
0c3b8     A7 12 02 F6 | 	mov	arg01, fp
0c3bc     10 4E 85 F1 | 	sub	fp, #16
0c3c0     A7 14 02 FB | 	rdlong	arg02, fp
0c3c4     04 4E 05 F1 | 	add	fp, #4
0c3c8     A7 16 02 FB | 	rdlong	arg03, fp
0c3cc     2C 4E 85 F1 | 	sub	fp, #44
0c3d0     0B 00 00 FF 
0c3d4     C0 E4 05 F1 | 	add	objptr, ##5824
0c3d8     AC BE B0 FD | 	call	#_psram_spin2_read1
0c3dc     0B 00 00 FF 
0c3e0     C0 E4 85 F1 | 	sub	objptr, ##5824
0c3e4                 | '     longfill(linebuf,0,64)
0c3e4                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0c3e4                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0c3e4     20 4E 05 F1 | 	add	fp, #32
0c3e8     A7 20 02 FB | 	rdlong	local02, fp
0c3ec     1C 4E 85 F1 | 	sub	fp, #28
0c3f0     A7 1E 02 FB | 	rdlong	local01, fp
0c3f4     04 4E 85 F1 | 	sub	fp, #4
0c3f8     0F 21 52 F2 | 	cmps	local02, local01 wc
0c3fc     30 00 90 CD |  if_b	jmp	#LR__0933
0c400     20 4E 05 F1 | 	add	fp, #32
0c404     A7 20 02 FB | 	rdlong	local02, fp
0c408     18 4E 85 F1 | 	sub	fp, #24
0c40c     A7 16 02 FB | 	rdlong	arg03, fp
0c410     08 4E 85 F1 | 	sub	fp, #8
0c414     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0c418     14 00 90 1D |  if_a	jmp	#LR__0933
0c41c     38 4E 05 F1 | 	add	fp, #56
0c420     A7 12 02 F6 | 	mov	arg01, fp
0c424     38 4E 85 F1 | 	sub	fp, #56
0c428                 | ' 
0c428                 | ' write(text)
0c428     24 B9 B0 FD | 	call	#_hg010b_spin2_write
0c42c                 | ' crlf
0c42c     80 BA B0 FD | 	call	#_hg010b_spin2_crlf
0c430                 | LR__0933
0c430     34 4E 05 F1 | 	add	fp, #52
0c434     A7 20 02 FB | 	rdlong	local02, fp
0c438     34 4E 85 F1 | 	sub	fp, #52
0c43c     7A 00 00 FF 
0c440     CC E5 05 F1 | 	add	objptr, ##62924
0c444     F2 20 62 FC | 	wrlong	local02, objptr
0c448     7A 00 00 FF 
0c44c     CC E5 85 F1 | 	sub	objptr, ##62924
0c450                 | LR__0934
0c450     34 4E 05 F1 | 	add	fp, #52
0c454     A7 20 02 FB | 	rdlong	local02, fp
0c458     34 4E 85 F1 | 	sub	fp, #52
0c45c     FF FF 3F FF 
0c460     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0c464     20 4E 05 51 |  if_ne	add	fp, #32
0c468     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c46c     20 4E 85 51 |  if_ne	sub	fp, #32
0c470     FF FF 7F 5F 
0c474     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0c478     E4 FE 9F 5D |  if_ne	jmp	#LR__0932
0c47c     A7 F0 03 F6 | 	mov	ptra, fp
0c480     B2 00 A0 FD | 	call	#popregs_
0c484                 | _do_list_ret
0c484     2D 00 64 FD | 	ret
0c488                 | 
0c488                 | ' 
0c488                 | ' '---------------- Clear the program
0c488                 | ' 
0c488                 | ' sub do_new
0c488                 | _do_new
0c488     03 4A 05 F6 | 	mov	COUNT_, #3
0c48c     A8 00 A0 FD | 	call	#pushregs_
0c490     00 12 06 F6 | 	mov	arg01, #0
0c494     01 14 66 F6 | 	neg	arg02, #1
0c498     01 16 06 F6 | 	mov	arg03, #1
0c49c     00 18 06 F6 | 	mov	arg04, #0
0c4a0     0B 00 00 FF 
0c4a4     C0 E4 05 F1 | 	add	objptr, ##5824
0c4a8                 | '     return fill(addr, pattern, count, listPtr, 4)
0c4a8     04 1A 06 F6 | 	mov	arg05, #4
0c4ac     10 BF B0 FD | 	call	#_psram_spin2_fill
0c4b0     49 00 00 FF 
0c4b4     1C E4 05 F1 | 	add	objptr, ##37404
0c4b8     F2 00 68 FC | 	wrlong	#0, objptr
0c4bc     15 00 00 FF 
0c4c0     7C E4 05 F1 | 	add	objptr, ##10876
0c4c4     F2 00 68 FC | 	wrlong	#0, objptr
0c4c8     0F 00 00 FF 
0c4cc     2C E5 05 F1 | 	add	objptr, ##7980
0c4d0     F2 00 68 FC | 	wrlong	#0, objptr
0c4d4     04 E4 05 F1 | 	add	objptr, #4
0c4d8     F2 00 68 FC | 	wrlong	#0, objptr
0c4dc     16 00 00 FF 
0c4e0     5C E5 85 F1 | 	sub	objptr, ##11612
0c4e4     F2 00 68 FC | 	wrlong	#0, objptr
0c4e8     07 00 00 FF 
0c4ec     24 E4 05 F1 | 	add	objptr, ##3620
0c4f0     F2 00 68 FC | 	wrlong	#0, objptr
0c4f4     07 00 00 FF 
0c4f8     20 E4 85 F1 | 	sub	objptr, ##3616
0c4fc     F2 00 68 FC | 	wrlong	#0, objptr
0c500     0F 00 00 FF 
0c504     34 E4 05 F1 | 	add	objptr, ##7732
0c508     F2 00 68 FC | 	wrlong	#0, objptr
0c50c     08 00 00 FF 
0c510     08 E4 85 F1 | 	sub	objptr, ##4104
0c514     F2 00 68 FC | 	wrlong	#0, objptr
0c518     04 E4 05 F1 | 	add	objptr, #4
0c51c     FF FF FF FF 
0c520     F2 FE 6B FC | 	wrlong	##-1, objptr
0c524     0F 00 00 FF 
0c528     4C E5 05 F1 | 	add	objptr, ##8012
0c52c     F2 00 68 FC | 	wrlong	#0, objptr
0c530                 | ' 
0c530                 | ' pslpoke(0,$FFFFFFFF)
0c530                 | ' varnum=0
0c530                 | ' programstart=0 :runptr=0 : runptr2=0
0c530                 | ' stackpointer=0
0c530                 | ' lineptr=0 
0c530                 | ' programptr=0 : stringptr=0
0c530                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0c530                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0c530     00 1E 06 F6 | 	mov	local01, #0
0c534     07 00 00 FF 
0c538     40 E5 85 F1 | 	sub	objptr, ##3904
0c53c     97 16 48 FB | 	callpa	#(@LR__0941-@LR__0940)>>2,fcache_load_ptr_
0c540                 | LR__0940
0c540     0F 21 02 F6 | 	mov	local02, local01
0c544     02 20 66 F0 | 	shl	local02, #2
0c548     0F 21 02 F1 | 	add	local02, local01
0c54c     02 20 66 F0 | 	shl	local02, #2
0c550     F2 20 02 F1 | 	add	local02, objptr
0c554     08 20 06 F1 | 	add	local02, #8
0c558     FF FF FF FF 
0c55c     10 FF 6B FC | 	wrlong	##-1, local02
0c560     01 1E 06 F1 | 	add	local01, #1
0c564     81 1E 56 F2 | 	cmps	local01, #129 wc
0c568     D4 FF 9F CD |  if_b	jmp	#LR__0940
0c56c                 | LR__0941
0c56c     71 00 00 FF 
0c570     6C E5 85 F1 | 	sub	objptr, ##58220
0c574                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0c574     00 1E 06 F6 | 	mov	local01, #0
0c578                 | LR__0942
0c578     0F 21 02 F6 | 	mov	local02, local01
0c57c     02 20 66 F0 | 	shl	local02, #2
0c580     7A 00 00 FF 
0c584     08 E5 05 F1 | 	add	objptr, ##62728
0c588     F2 20 02 F1 | 	add	local02, objptr
0c58c     10 21 0A FB | 	rdlong	local02, local02 wz
0c590     7A 00 00 FF 
0c594     08 E5 85 F1 | 	sub	objptr, ##62728
0c598     34 00 90 AD |  if_e	jmp	#LR__0943
0c59c     0F 13 02 F6 | 	mov	arg01, local01
0c5a0     00 14 06 F6 | 	mov	arg02, #0
0c5a4     00 16 06 F6 | 	mov	arg03, #0
0c5a8     30 A8 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c5ac     0F 21 02 F6 | 	mov	local02, local01
0c5b0     02 20 66 F0 | 	shl	local02, #2
0c5b4     7A 00 00 FF 
0c5b8     08 E5 05 F1 | 	add	objptr, ##62728
0c5bc     F2 20 02 F1 | 	add	local02, objptr
0c5c0     10 13 02 FB | 	rdlong	arg01, local02
0c5c4     7A 00 00 FF 
0c5c8     08 E5 85 F1 | 	sub	objptr, ##62728
0c5cc     FC 06 B1 FD | 	call	#__system___gc_free
0c5d0                 | LR__0943
0c5d0     7A 00 00 FF 
0c5d4     5C E5 05 F1 | 	add	objptr, ##62812
0c5d8     00 C0 9F FF 
0c5dc     F2 00 68 FC | 	wrlong	##1065353216, objptr
0c5e0     04 E4 05 F1 | 	add	objptr, #4
0c5e4     00 C0 9F FF 
0c5e8     F2 00 68 FC | 	wrlong	##1065353216, objptr
0c5ec     7A 00 00 FF 
0c5f0     60 E5 85 F1 | 	sub	objptr, ##62816
0c5f4     F2 22 02 FB | 	rdlong	local03, objptr
0c5f8     7A 00 00 FF 
0c5fc     4C E5 05 F1 | 	add	objptr, ##62796
0c600     F2 22 62 FC | 	wrlong	local03, objptr
0c604     7A 00 00 FF 
0c608     4C E5 85 F1 | 	sub	objptr, ##62796
0c60c     11 12 06 F6 | 	mov	arg01, #17
0c610     08 14 06 F6 | 	mov	arg02, #8
0c614     10 16 06 F6 | 	mov	arg03, #16
0c618     C0 A7 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c61c     10 12 06 F6 | 	mov	arg01, #16
0c620     20 14 06 F6 | 	mov	arg02, #32
0c624     20 16 06 F6 | 	mov	arg03, #32
0c628     B0 A7 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c62c     01 1E 06 F1 | 	add	local01, #1
0c630     10 1E 56 F2 | 	cmps	local01, #16 wc
0c634     40 FF 9F CD |  if_b	jmp	#LR__0942
0c638     A7 F0 03 F6 | 	mov	ptra, fp
0c63c     B2 00 A0 FD | 	call	#popregs_
0c640                 | _do_new_ret
0c640     2D 00 64 FD | 	ret
0c644                 | 
0c644                 | ' 
0c644                 | ' '----------------------- goto
0c644                 | ' sub do_fast_goto
0c644                 | _do_fast_goto
0c644     02 4A 05 F6 | 	mov	COUNT_, #2
0c648     A8 00 A0 FD | 	call	#pushregs_
0c64c                 | _do_fast_goto_enter
0c64c     69 00 00 FF 
0c650     54 E5 05 F1 | 	add	objptr, ##54100
0c654     F2 12 02 FB | 	rdlong	arg01, objptr
0c658     09 1F 02 F6 | 	mov	local01, arg01
0c65c     01 1E 66 F0 | 	shl	local01, #1
0c660     09 1F 02 F1 | 	add	local01, arg01
0c664     02 1E 66 F0 | 	shl	local01, #2
0c668     03 00 00 FF 
0c66c     04 E4 85 F1 | 	sub	objptr, ##1540
0c670     F2 1E 02 F1 | 	add	local01, objptr
0c674     0F 21 02 FB | 	rdlong	local02, local01
0c678     10 13 02 F6 | 	mov	arg01, local02
0c67c     66 00 00 FF 
0c680     50 E5 85 F1 | 	sub	objptr, ##52560
0c684     88 93 B0 FD | 	call	#_pslpeek
0c688     FD 12 02 F6 | 	mov	arg01, result1
0c68c                 | ' 
0c68c                 | ' testptr=compiledline(lineptr_e).result.uresult
0c68c                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0c68c                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0c68c     69 00 00 FF 
0c690     54 E5 05 F1 | 	add	objptr, ##54100
0c694     F2 FA 01 FB | 	rdlong	result1, objptr
0c698     FD 1E 02 F6 | 	mov	local01, result1
0c69c     01 1E 66 F0 | 	shl	local01, #1
0c6a0     FD 1E 02 F1 | 	add	local01, result1
0c6a4     02 1E 66 F0 | 	shl	local01, #2
0c6a8     03 00 00 FF 
0c6ac     04 E4 85 F1 | 	sub	objptr, ##1540
0c6b0     F2 1E 02 F1 | 	add	local01, objptr
0c6b4     04 1E 06 F1 | 	add	local01, #4
0c6b8     0F 1F 02 FB | 	rdlong	local01, local01
0c6bc     0F 13 0A F2 | 	cmp	arg01, local01 wz
0c6c0     66 00 00 FF 
0c6c4     50 E5 85 F1 | 	sub	objptr, ##52560
0c6c8     58 00 90 5D |  if_ne	jmp	#LR__0950
0c6cc     79 00 00 FF 
0c6d0     84 E4 05 F1 | 	add	objptr, ##62084
0c6d4     F2 20 62 FC | 	wrlong	local02, objptr
0c6d8     0F 00 00 FF 
0c6dc     34 E5 85 F1 | 	sub	objptr, ##7988
0c6e0     F2 20 02 FB | 	rdlong	local02, objptr
0c6e4     01 20 86 F1 | 	sub	local02, #1
0c6e8     04 E4 05 F1 | 	add	objptr, #4
0c6ec     F2 20 62 FC | 	wrlong	local02, objptr
0c6f0                 | '   runptr=testptr
0c6f0                 | '   lineptr_e=lineptr-1
0c6f0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0c6f0     0F 00 00 FF 
0c6f4     54 E5 05 F1 | 	add	objptr, ##8020
0c6f8     F2 20 02 FB | 	rdlong	local02, objptr
0c6fc     79 00 00 FF 
0c700     A8 E4 85 F1 | 	sub	objptr, ##62120
0c704     FF FF 3F FF 
0c708     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0c70c     79 00 00 AF 
0c710     A8 E4 05 A1 |  if_e	add	objptr, ##62120
0c714     F2 00 68 AC |  if_e	wrlong	#0, objptr
0c718     79 00 00 AF 
0c71c     A8 E4 85 A1 |  if_e	sub	objptr, ##62120
0c720     04 00 90 FD | 	jmp	#LR__0951
0c724                 | LR__0950
0c724     0C 00 B0 FD | 	call	#_do_find_goto
0c728                 | LR__0951
0c728     A7 F0 03 F6 | 	mov	ptra, fp
0c72c     B2 00 A0 FD | 	call	#popregs_
0c730                 | _do_fast_goto_ret
0c730     2D 00 64 FD | 	ret
0c734                 | 
0c734                 | ' 
0c734                 | ' 
0c734                 | ' 
0c734                 | ' 
0c734                 | ' sub do_find_goto
0c734                 | _do_find_goto
0c734     03 4A 05 F6 | 	mov	COUNT_, #3
0c738     A8 00 A0 FD | 	call	#pushregs_
0c73c     24 F0 07 F1 | 	add	ptra, #36
0c740                 | _do_find_goto_enter
0c740     69 00 00 FF 
0c744     54 E5 05 F1 | 	add	objptr, ##54100
0c748     F2 1E 02 FB | 	rdlong	local01, objptr
0c74c     0F 21 02 F6 | 	mov	local02, local01
0c750     01 20 66 F0 | 	shl	local02, #1
0c754     0F 21 02 F1 | 	add	local02, local01
0c758     02 20 66 F0 | 	shl	local02, #2
0c75c     03 00 00 FF 
0c760     04 E4 85 F1 | 	sub	objptr, ##1540
0c764     F2 20 02 F1 | 	add	local02, objptr
0c768     04 20 06 F1 | 	add	local02, #4
0c76c     10 21 02 FB | 	rdlong	local02, local02
0c770     A7 20 62 FC | 	wrlong	local02, fp
0c774     03 00 00 FF 
0c778     08 E4 05 F1 | 	add	objptr, ##1544
0c77c     F2 22 02 FB | 	rdlong	local03, objptr
0c780     69 00 00 FF 
0c784     58 E5 85 F1 | 	sub	objptr, ##54104
0c788     04 4E 05 F1 | 	add	fp, #4
0c78c     A7 22 62 FC | 	wrlong	local03, fp
0c790     04 4E 85 F1 | 	sub	fp, #4
0c794                 | ' 
0c794                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0c794                 | '  ' print "find goto"                                                                     'print gotoline 
0c794                 | ' gotoptr=programstart
0c794                 | ' do
0c794                 | LR__0960
0c794     0C 4E 05 F1 | 	add	fp, #12
0c798     A7 12 02 F6 | 	mov	arg01, fp
0c79c     08 4E 85 F1 | 	sub	fp, #8
0c7a0     A7 14 02 FB | 	rdlong	arg02, fp
0c7a4     04 4E 85 F1 | 	sub	fp, #4
0c7a8     18 16 06 F6 | 	mov	arg03, #24
0c7ac     0B 00 00 FF 
0c7b0     C0 E4 05 F1 | 	add	objptr, ##5824
0c7b4     D0 BA B0 FD | 	call	#_psram_spin2_read1
0c7b8     0B 00 00 FF 
0c7bc     C0 E4 85 F1 | 	sub	objptr, ##5824
0c7c0                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0c7c0                 | '   if gotoheader(0)<>$FFFFFFFF then
0c7c0     0C 4E 05 F1 | 	add	fp, #12
0c7c4     A7 22 02 FB | 	rdlong	local03, fp
0c7c8     0C 4E 85 F1 | 	sub	fp, #12
0c7cc     FF FF 7F FF 
0c7d0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0c7d4     24 00 90 AD |  if_e	jmp	#LR__0961
0c7d8     04 4E 05 F1 | 	add	fp, #4
0c7dc     A7 22 02 FB | 	rdlong	local03, fp
0c7e0     04 4E 05 F1 | 	add	fp, #4
0c7e4     A7 22 62 FC | 	wrlong	local03, fp
0c7e8     18 4E 05 F1 | 	add	fp, #24
0c7ec     A7 22 02 FB | 	rdlong	local03, fp
0c7f0     1C 4E 85 F1 | 	sub	fp, #28
0c7f4     A7 22 62 FC | 	wrlong	local03, fp
0c7f8     04 4E 85 F1 | 	sub	fp, #4
0c7fc                 | LR__0961
0c7fc     20 4E 05 F1 | 	add	fp, #32
0c800     A7 22 02 FB | 	rdlong	local03, fp
0c804     20 4E 85 F1 | 	sub	fp, #32
0c808     FF FF 3F FF 
0c80c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c810     0C 4E 05 51 |  if_ne	add	fp, #12
0c814     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c818     0C 4E 85 51 |  if_ne	sub	fp, #12
0c81c     FF FF 7F 5F 
0c820     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0c824     18 00 90 AD |  if_e	jmp	#LR__0962
0c828     0C 4E 05 F1 | 	add	fp, #12
0c82c     A7 22 02 FB | 	rdlong	local03, fp
0c830     0C 4E 85 F1 | 	sub	fp, #12
0c834     A7 20 02 FB | 	rdlong	local02, fp
0c838     10 23 0A F2 | 	cmp	local03, local02 wz
0c83c     54 FF 9F 5D |  if_ne	jmp	#LR__0960
0c840                 | LR__0962
0c840                 | ' 
0c840                 | ' if gotoheader(0)=gotoline then
0c840     0C 4E 05 F1 | 	add	fp, #12
0c844     A7 22 02 FB | 	rdlong	local03, fp
0c848     0C 4E 85 F1 | 	sub	fp, #12
0c84c     A7 1E 02 FB | 	rdlong	local01, fp
0c850     0F 23 0A F2 | 	cmp	local03, local01 wz
0c854     D8 00 90 5D |  if_ne	jmp	#LR__0963
0c858     69 00 00 FF 
0c85c     54 E5 05 F1 | 	add	objptr, ##54100
0c860     F2 1E 02 FB | 	rdlong	local01, objptr
0c864     0F 21 02 F6 | 	mov	local02, local01
0c868     01 20 66 F0 | 	shl	local02, #1
0c86c     0F 21 02 F1 | 	add	local02, local01
0c870     02 20 66 F0 | 	shl	local02, #2
0c874     03 00 00 FF 
0c878     04 E4 85 F1 | 	sub	objptr, ##1540
0c87c     F2 20 02 F1 | 	add	local02, objptr
0c880     08 4E 05 F1 | 	add	fp, #8
0c884     A7 22 02 FB | 	rdlong	local03, fp
0c888     10 23 62 FC | 	wrlong	local03, local02
0c88c     03 00 00 FF 
0c890     04 E4 05 F1 | 	add	objptr, ##1540
0c894     F2 1E 02 FB | 	rdlong	local01, objptr
0c898     0F 21 02 F6 | 	mov	local02, local01
0c89c     01 20 66 F0 | 	shl	local02, #1
0c8a0     0F 21 02 F1 | 	add	local02, local01
0c8a4     02 20 66 F0 | 	shl	local02, #2
0c8a8     03 00 00 FF 
0c8ac     04 E4 85 F1 | 	sub	objptr, ##1540
0c8b0     F2 20 02 F1 | 	add	local02, objptr
0c8b4     08 20 06 F1 | 	add	local02, #8
0c8b8     10 9D 68 FC | 	wrlong	#78, local02
0c8bc     03 00 00 FF 
0c8c0     04 E4 05 F1 | 	add	objptr, ##1540
0c8c4     F2 20 02 FB | 	rdlong	local02, objptr
0c8c8     10 13 02 F6 | 	mov	arg01, local02
0c8cc     01 12 66 F0 | 	shl	arg01, #1
0c8d0     10 13 02 F1 | 	add	arg01, local02
0c8d4     02 12 66 F0 | 	shl	arg01, #2
0c8d8     03 00 00 FF 
0c8dc     04 E4 85 F1 | 	sub	objptr, ##1540
0c8e0     F2 12 02 F1 | 	add	arg01, objptr
0c8e4     12 00 00 FF 
0c8e8     3C E5 05 F1 | 	add	objptr, ##9532
0c8ec     F2 14 02 FB | 	rdlong	arg02, objptr
0c8f0     02 22 06 F6 | 	mov	local03, #2
0c8f4     10 23 02 F1 | 	add	local03, local02
0c8f8     14 00 00 FF 
0c8fc     54 E5 85 F1 | 	sub	objptr, ##10580
0c900     F2 16 02 FB | 	rdlong	arg03, objptr
0c904     0B 23 02 FD | 	qmul	local03, arg03
0c908     08 4E 85 F1 | 	sub	fp, #8
0c90c     59 00 00 FF 
0c910     78 E4 85 F1 | 	sub	objptr, ##45688
0c914     18 22 62 FD | 	getqx	local03
0c918     11 15 02 F1 | 	add	arg02, local03
0c91c     04 BA B0 FD | 	call	#_psram_spin2_write
0c920     0B 00 00 FF 
0c924     C0 E4 85 F1 | 	sub	objptr, ##5824
0c928     18 FD BF FD | 	call	#_do_fast_goto
0c92c     08 00 90 FD | 	jmp	#LR__0964
0c930                 | LR__0963
0c930     26 12 06 F6 | 	mov	arg01, #38
0c934     1C 8F B0 FD | 	call	#_printerror
0c938                 | LR__0964
0c938     A7 F0 03 F6 | 	mov	ptra, fp
0c93c     B2 00 A0 FD | 	call	#popregs_
0c940                 | _do_find_goto_ret
0c940     2D 00 64 FD | 	ret
0c944                 | 
0c944                 | ' 
0c944                 | ' sub do_slow_goto
0c944                 | _do_slow_goto
0c944                 | _do_slow_goto_ret
0c944     2D 00 64 FD | 	ret
0c948                 | 
0c948                 | ' 
0c948                 | ' '----------------------- Error processing
0c948                 | ' 
0c948                 | ' sub do_error
0c948                 | _do_error
0c948     01 4A 05 F6 | 	mov	COUNT_, #1
0c94c     A8 00 A0 FD | 	call	#pushregs_
0c950     69 00 00 FF 
0c954     54 E5 05 F1 | 	add	objptr, ##54100
0c958     F2 18 02 FB | 	rdlong	arg04, objptr
0c95c     0C 17 02 F6 | 	mov	arg03, arg04
0c960     01 16 66 F0 | 	shl	arg03, #1
0c964     0C 17 02 F1 | 	add	arg03, arg04
0c968     02 16 66 F0 | 	shl	arg03, #2
0c96c     03 00 00 FF 
0c970     04 E4 85 F1 | 	sub	objptr, ##1540
0c974     F2 16 02 F1 | 	add	arg03, objptr
0c978     0B 1F 02 FB | 	rdlong	local01, arg03
0c97c                 | ' r=compiledline(lineptr_e).result.uresult
0c97c                 | ' print "Error ";r;": ";errors$(r)
0c97c     00 12 06 F6 | 	mov	arg01, #0
0c980     66 00 00 FF 
0c984     50 E5 85 F1 | 	sub	objptr, ##52560
0c988     50 1D B1 FD | 	call	#__system___getiolock_0423
0c98c     FD 12 02 F6 | 	mov	arg01, result1
0c990     44 C4 B0 FD | 	call	#__system___lockmem
0c994     44 01 00 FF 
0c998     6A 14 06 F6 | 	mov	arg02, ##@LR__4582
0c99c     00 12 06 F6 | 	mov	arg01, #0
0c9a0     00 16 06 F6 | 	mov	arg03, #0
0c9a4     24 D1 B0 FD | 	call	#__system___basic_print_string
0c9a8     00 12 06 F6 | 	mov	arg01, #0
0c9ac     0F 15 02 F6 | 	mov	arg02, local01
0c9b0     00 16 06 F6 | 	mov	arg03, #0
0c9b4     0A 18 06 F6 | 	mov	arg04, #10
0c9b8     94 D1 B0 FD | 	call	#__system___basic_print_unsigned
0c9bc     44 01 00 FF 
0c9c0     71 14 06 F6 | 	mov	arg02, ##@LR__4583
0c9c4     00 12 06 F6 | 	mov	arg01, #0
0c9c8     00 16 06 F6 | 	mov	arg03, #0
0c9cc     FC D0 B0 FD | 	call	#__system___basic_print_string
0c9d0     02 1E 66 F0 | 	shl	local01, #2
0c9d4     64 00 00 FF 
0c9d8     50 E5 05 F1 | 	add	objptr, ##51536
0c9dc     F2 1E 02 F1 | 	add	local01, objptr
0c9e0     0F 15 02 FB | 	rdlong	arg02, local01
0c9e4     00 12 06 F6 | 	mov	arg01, #0
0c9e8     00 16 06 F6 | 	mov	arg03, #0
0c9ec     64 00 00 FF 
0c9f0     50 E5 85 F1 | 	sub	objptr, ##51536
0c9f4     D4 D0 B0 FD | 	call	#__system___basic_print_string
0c9f8     00 12 06 F6 | 	mov	arg01, #0
0c9fc     0A 14 06 F6 | 	mov	arg02, #10
0ca00     00 16 06 F6 | 	mov	arg03, #0
0ca04     6C D0 B0 FD | 	call	#__system___basic_print_char
0ca08     00 12 06 F6 | 	mov	arg01, #0
0ca0c     CC 1C B1 FD | 	call	#__system___getiolock_0423
0ca10     FD 00 68 FC | 	wrlong	#0, result1
0ca14     A7 F0 03 F6 | 	mov	ptra, fp
0ca18     B2 00 A0 FD | 	call	#popregs_
0ca1c                 | _do_error_ret
0ca1c     2D 00 64 FD | 	ret
0ca20                 | 
0ca20                 | ' 
0ca20                 | ' 
0ca20                 | ' '------------------ Assigning to a variable  
0ca20                 | ' 
0ca20                 | ' function  convertstring(psaddr as ulong) as string
0ca20                 | _convertstring
0ca20     04 4A 05 F6 | 	mov	COUNT_, #4
0ca24     A8 00 A0 FD | 	call	#pushregs_
0ca28     09 1F 02 F6 | 	mov	local01, arg01
0ca2c     E0 8F B0 FD | 	call	#_pslpeek
0ca30     FD 20 02 F6 | 	mov	local02, result1
0ca34     44 01 00 FF 
0ca38     74 22 06 F6 | 	mov	local03, ##@LR__4584
0ca3c                 | ' 'print "in convertstring: psaddr=";psaddr
0ca3c                 | ' l=pslpeek(psaddr)
0ca3c                 | ' 'print "in convertstring: len=";l
0ca3c                 | ' s="" 
0ca3c                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0ca3c     01 24 06 F6 | 	mov	local04, #1
0ca40     01 20 06 F1 | 	add	local02, #1
0ca44                 | LR__0970
0ca44     10 25 52 F2 | 	cmps	local04, local02 wc
0ca48     30 00 90 3D |  if_ae	jmp	#LR__0971
0ca4c     0F 13 02 F6 | 	mov	arg01, local01
0ca50     03 12 06 F1 | 	add	arg01, #3
0ca54     12 13 02 F1 | 	add	arg01, local04
0ca58     5C 8F B0 FD | 	call	#_pspeek
0ca5c     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0ca60     48 E5 B0 FD | 	call	#__system__Chr_S
0ca64     FD 14 02 F6 | 	mov	arg02, result1
0ca68     11 13 02 F6 | 	mov	arg01, local03
0ca6c     C4 C3 B0 FD | 	call	#__system___string_concat
0ca70     FD 22 02 F6 | 	mov	local03, result1
0ca74     01 24 06 F1 | 	add	local04, #1
0ca78     C8 FF 9F FD | 	jmp	#LR__0970
0ca7c                 | LR__0971
0ca7c                 | ' 'print "in convertstring: str=";s
0ca7c                 | ' return s
0ca7c     11 FB 01 F6 | 	mov	result1, local03
0ca80     A7 F0 03 F6 | 	mov	ptra, fp
0ca84     B2 00 A0 FD | 	call	#popregs_
0ca88                 | _convertstring_ret
0ca88     2D 00 64 FD | 	ret
0ca8c                 | 
0ca8c                 | ' 
0ca8c                 | ' sub do_assign
0ca8c                 | _do_assign
0ca8c     05 4A 05 F6 | 	mov	COUNT_, #5
0ca90     A8 00 A0 FD | 	call	#pushregs_
0ca94     44 F0 07 F1 | 	add	ptra, #68
0ca98     69 00 00 FF 
0ca9c     54 E5 05 F1 | 	add	objptr, ##54100
0caa0     F2 16 02 FB | 	rdlong	arg03, objptr
0caa4     0B 15 02 F6 | 	mov	arg02, arg03
0caa8     01 14 66 F0 | 	shl	arg02, #1
0caac     0B 15 02 F1 | 	add	arg02, arg03
0cab0     02 14 66 F0 | 	shl	arg02, #2
0cab4     03 00 00 FF 
0cab8     04 E4 85 F1 | 	sub	objptr, ##1540
0cabc     F2 14 02 F1 | 	add	arg02, objptr
0cac0     0A 15 02 FB | 	rdlong	arg02, arg02
0cac4     18 4E 05 F1 | 	add	fp, #24
0cac8     A7 14 62 FC | 	wrlong	arg02, fp
0cacc                 | ' 
0cacc                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0cacc                 | ' 
0cacc                 | ' if variables(varnum).vartype<array_no_type then 
0cacc     18 4E 85 F1 | 	sub	fp, #24
0cad0     04 14 66 F0 | 	shl	arg02, #4
0cad4     32 00 00 FF 
0cad8     74 E4 85 F1 | 	sub	objptr, ##25716
0cadc     F2 14 02 F1 | 	add	arg02, objptr
0cae0     0C 14 06 F1 | 	add	arg02, #12
0cae4     0A 17 02 FB | 	rdlong	arg03, arg02
0cae8     00 17 16 F2 | 	cmp	arg03, #256 wc
0caec     34 00 00 FF 
0caf0     DC E4 85 F1 | 	sub	objptr, ##26844
0caf4     18 01 90 3D |  if_ae	jmp	#LR__0980
0caf8     E8 CD BF FD | 	call	#_pop
0cafc     A7 FA 61 FC | 	wrlong	result1, fp
0cb00     04 4E 05 F1 | 	add	fp, #4
0cb04     A7 FC 61 FC | 	wrlong	result2, fp
0cb08     04 4E 05 F1 | 	add	fp, #4
0cb0c     A7 FE 61 FC | 	wrlong	result3, fp
0cb10     08 4E 85 F1 | 	sub	fp, #8
0cb14     A7 16 02 FB | 	rdlong	arg03, fp
0cb18     04 4E 05 F1 | 	add	fp, #4
0cb1c     A7 14 02 FB | 	rdlong	arg02, fp
0cb20     14 4E 05 F1 | 	add	fp, #20
0cb24     A7 12 02 FB | 	rdlong	arg01, fp
0cb28     04 12 66 F0 | 	shl	arg01, #4
0cb2c     34 00 00 FF 
0cb30     DC E4 05 F1 | 	add	objptr, ##26844
0cb34     F2 12 02 F1 | 	add	arg01, objptr
0cb38     04 12 06 F1 | 	add	arg01, #4
0cb3c     09 17 62 FC | 	wrlong	arg03, arg01
0cb40     A7 16 02 FB | 	rdlong	arg03, fp
0cb44     04 16 66 F0 | 	shl	arg03, #4
0cb48     F2 16 02 F1 | 	add	arg03, objptr
0cb4c     08 16 06 F1 | 	add	arg03, #8
0cb50     0B 15 62 FC | 	wrlong	arg02, arg03
0cb54     A7 16 02 FB | 	rdlong	arg03, fp
0cb58     04 16 66 F0 | 	shl	arg03, #4
0cb5c     F2 16 02 F1 | 	add	arg03, objptr
0cb60     10 4E 85 F1 | 	sub	fp, #16
0cb64     A7 14 02 FB | 	rdlong	arg02, fp
0cb68     0C 16 06 F1 | 	add	arg03, #12
0cb6c     0B 15 62 FC | 	wrlong	arg02, arg03
0cb70                 | '   t1=pop() 
0cb70                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0cb70                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0cb70                 | '   if variables(varnum).vartype<>result_string2 then return
0cb70     10 4E 05 F1 | 	add	fp, #16
0cb74     A7 16 02 FB | 	rdlong	arg03, fp
0cb78     18 4E 85 F1 | 	sub	fp, #24
0cb7c     04 16 66 F0 | 	shl	arg03, #4
0cb80     F2 16 02 F1 | 	add	arg03, objptr
0cb84     0C 16 06 F1 | 	add	arg03, #12
0cb88     0B 17 02 FB | 	rdlong	arg03, arg03
0cb8c     2B 16 0E F2 | 	cmp	arg03, #43 wz
0cb90     34 00 00 FF 
0cb94     DC E4 85 F1 | 	sub	objptr, ##26844
0cb98     30 06 90 5D |  if_ne	jmp	#LR__1003
0cb9c     18 4E 05 F1 | 	add	fp, #24
0cba0     A7 16 02 FB | 	rdlong	arg03, fp
0cba4     0B 1F 02 F6 | 	mov	local01, arg03
0cba8     04 1E 66 F0 | 	shl	local01, #4
0cbac     34 00 00 FF 
0cbb0     DC E4 05 F1 | 	add	objptr, ##26844
0cbb4     F2 1E 02 F1 | 	add	local01, objptr
0cbb8     18 4E 85 F1 | 	sub	fp, #24
0cbbc     04 16 66 F0 | 	shl	arg03, #4
0cbc0     F2 16 02 F1 | 	add	arg03, objptr
0cbc4     04 16 06 F1 | 	add	arg03, #4
0cbc8     0B 13 02 FB | 	rdlong	arg01, arg03
0cbcc     34 00 00 FF 
0cbd0     DC E4 85 F1 | 	sub	objptr, ##26844
0cbd4     48 FE BF FD | 	call	#_convertstring
0cbd8     04 1E 06 F1 | 	add	local01, #4
0cbdc     0F FB 61 FC | 	wrlong	result1, local01
0cbe0     18 4E 05 F1 | 	add	fp, #24
0cbe4     A7 1E 02 FB | 	rdlong	local01, fp
0cbe8     18 4E 85 F1 | 	sub	fp, #24
0cbec     04 1E 66 F0 | 	shl	local01, #4
0cbf0     34 00 00 FF 
0cbf4     DC E4 05 F1 | 	add	objptr, ##26844
0cbf8     F2 1E 02 F1 | 	add	local01, objptr
0cbfc     0C 1E 06 F1 | 	add	local01, #12
0cc00     0F 3F 68 FC | 	wrlong	#31, local01
0cc04                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0cc04                 | '   variables(varnum).vartype=result_string
0cc04                 | '   return
0cc04     34 00 00 FF 
0cc08     DC E4 85 F1 | 	sub	objptr, ##26844
0cc0c     BC 05 90 FD | 	jmp	#LR__1003
0cc10                 | LR__0980
0cc10                 | ' for i=0 to 2 : arrid(i)=0 : next i
0cc10     1C 4E 05 F1 | 	add	fp, #28
0cc14     A7 00 68 FC | 	wrlong	#0, fp
0cc18     97 16 48 FB | 	callpa	#(@LR__0982-@LR__0981)>>2,fcache_load_ptr_
0cc1c                 | LR__0981
0cc1c     A7 1E 02 FB | 	rdlong	local01, fp
0cc20     02 1E 66 F0 | 	shl	local01, #2
0cc24     18 4E 05 F1 | 	add	fp, #24
0cc28     A7 1E 02 F1 | 	add	local01, fp
0cc2c     0F 01 68 FC | 	wrlong	#0, local01
0cc30     18 4E 85 F1 | 	sub	fp, #24
0cc34     A7 1E 02 FB | 	rdlong	local01, fp
0cc38     01 1E 06 F1 | 	add	local01, #1
0cc3c     A7 1E 62 FC | 	wrlong	local01, fp
0cc40     03 1E 16 F2 | 	cmp	local01, #3 wc
0cc44     D4 FF 9F CD |  if_b	jmp	#LR__0981
0cc48                 | LR__0982
0cc48     69 00 00 FF 
0cc4c     54 E5 05 F1 | 	add	objptr, ##54100
0cc50     F2 16 02 FB | 	rdlong	arg03, objptr
0cc54     0B 1F 02 F6 | 	mov	local01, arg03
0cc58     01 1E 66 F0 | 	shl	local01, #1
0cc5c     0B 1F 02 F1 | 	add	local01, arg03
0cc60     02 1E 66 F0 | 	shl	local01, #2
0cc64     03 00 00 FF 
0cc68     04 E4 85 F1 | 	sub	objptr, ##1540
0cc6c     F2 1E 02 F1 | 	add	local01, objptr
0cc70     04 1E 06 F1 | 	add	local01, #4
0cc74     0F 21 02 FB | 	rdlong	local02, local01
0cc78     04 4E 05 F1 | 	add	fp, #4
0cc7c     A7 20 62 FC | 	wrlong	local02, fp
0cc80     20 4E 85 F1 | 	sub	fp, #32
0cc84     66 00 00 FF 
0cc88     50 E5 85 F1 | 	sub	objptr, ##52560
0cc8c     54 CC BF FD | 	call	#_pop
0cc90     A7 FA 61 FC | 	wrlong	result1, fp
0cc94     04 4E 05 F1 | 	add	fp, #4
0cc98     A7 FC 61 FC | 	wrlong	result2, fp
0cc9c     04 4E 05 F1 | 	add	fp, #4
0cca0     A7 FE 61 FC | 	wrlong	result3, fp
0cca4                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0cca4                 | ' t1=pop() ' var value
0cca4                 | ' if numpar>0 then
0cca4     18 4E 05 F1 | 	add	fp, #24
0cca8     A7 22 02 FB | 	rdlong	local03, fp
0ccac     20 4E 85 F1 | 	sub	fp, #32
0ccb0     01 22 16 F2 | 	cmp	local03, #1 wc
0ccb4     78 00 90 CD |  if_b	jmp	#LR__0985
0ccb8                 | '   for i=numpar to 1 step -1
0ccb8     20 4E 05 F1 | 	add	fp, #32
0ccbc     A7 24 0A FB | 	rdlong	local04, fp wz
0ccc0     04 4E 85 F1 | 	sub	fp, #4
0ccc4     A7 24 62 FC | 	wrlong	local04, fp
0ccc8     1C 4E 85 F1 | 	sub	fp, #28
0cccc     60 00 90 AD |  if_e	jmp	#LR__0984
0ccd0                 | LR__0983
0ccd0     10 CC BF FD | 	call	#_pop
0ccd4     0C 4E 05 F1 | 	add	fp, #12
0ccd8     A7 FA 61 FC | 	wrlong	result1, fp
0ccdc     04 4E 05 F1 | 	add	fp, #4
0cce0     A7 FC 61 FC | 	wrlong	result2, fp
0cce4     04 4E 05 F1 | 	add	fp, #4
0cce8     A7 FE 61 FC | 	wrlong	result3, fp
0ccec     08 4E 05 F1 | 	add	fp, #8
0ccf0     A7 22 02 FB | 	rdlong	local03, fp
0ccf4     01 22 86 F1 | 	sub	local03, #1
0ccf8     02 22 66 F0 | 	shl	local03, #2
0ccfc     18 4E 05 F1 | 	add	fp, #24
0cd00     A7 22 02 F1 | 	add	local03, fp
0cd04     28 4E 85 F1 | 	sub	fp, #40
0cd08     A7 12 02 F6 | 	mov	arg01, fp
0cd0c     0C 4E 85 F1 | 	sub	fp, #12
0cd10     40 41 B0 FD | 	call	#_converttoint
0cd14     11 FB 61 FC | 	wrlong	result1, local03
0cd18     1C 4E 05 F1 | 	add	fp, #28
0cd1c     A7 24 02 FB | 	rdlong	local04, fp
0cd20     01 24 8E F1 | 	sub	local04, #1 wz
0cd24     A7 24 62 FC | 	wrlong	local04, fp
0cd28     1C 4E 85 F1 | 	sub	fp, #28
0cd2c     A0 FF 9F 5D |  if_ne	jmp	#LR__0983
0cd30                 | LR__0984
0cd30                 | LR__0985
0cd30     18 4E 05 F1 | 	add	fp, #24
0cd34     A7 1E 02 FB | 	rdlong	local01, fp
0cd38     04 1E 66 F0 | 	shl	local01, #4
0cd3c     34 00 00 FF 
0cd40     DC E4 05 F1 | 	add	objptr, ##26844
0cd44     F2 1E 02 F1 | 	add	local01, objptr
0cd48     04 1E 06 F1 | 	add	local01, #4
0cd4c     0F 13 02 FB | 	rdlong	arg01, local01
0cd50     0C 4E 05 F1 | 	add	fp, #12
0cd54     A7 12 62 FC | 	wrlong	arg01, fp
0cd58     24 4E 85 F1 | 	sub	fp, #36
0cd5c     34 00 00 FF 
0cd60     DC E4 85 F1 | 	sub	objptr, ##26844
0cd64     A8 8C B0 FD | 	call	#_pslpeek
0cd68     FD 24 32 F9 | 	getword	local04, result1, #0
0cd6c     28 4E 05 F1 | 	add	fp, #40
0cd70     A7 24 62 FC | 	wrlong	local04, fp
0cd74     04 4E 85 F1 | 	sub	fp, #4
0cd78     A7 12 02 FB | 	rdlong	arg01, fp
0cd7c     24 4E 85 F1 | 	sub	fp, #36
0cd80     02 12 06 F1 | 	add	arg01, #2
0cd84     30 8C B0 FD | 	call	#_pspeek
0cd88     FD FA E1 F8 | 	getbyte	result1, result1, #0
0cd8c     2C 4E 05 F1 | 	add	fp, #44
0cd90     A7 FA 61 FC | 	wrlong	result1, fp
0cd94                 | ' esize=pspeek(arrptr+2)
0cd94                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0cd94     08 4E 85 F1 | 	sub	fp, #8
0cd98     A7 12 02 FB | 	rdlong	arg01, fp
0cd9c     24 4E 85 F1 | 	sub	fp, #36
0cda0     04 12 06 F1 | 	add	arg01, #4
0cda4     68 8C B0 FD | 	call	#_pslpeek
0cda8     FD 24 02 F6 | 	mov	local04, result1
0cdac     34 4E 05 F1 | 	add	fp, #52
0cdb0     A7 1E 02 FB | 	rdlong	local01, fp
0cdb4     34 4E 85 F1 | 	sub	fp, #52
0cdb8     12 1F 12 F2 | 	cmp	local01, local04 wc
0cdbc     54 00 90 3D |  if_ae	jmp	#LR__0986
0cdc0     24 4E 05 F1 | 	add	fp, #36
0cdc4     A7 12 02 FB | 	rdlong	arg01, fp
0cdc8     24 4E 85 F1 | 	sub	fp, #36
0cdcc     08 12 06 F1 | 	add	arg01, #8
0cdd0     3C 8C B0 FD | 	call	#_pslpeek
0cdd4     FD 1E 02 F6 | 	mov	local01, result1
0cdd8     38 4E 05 F1 | 	add	fp, #56
0cddc     A7 24 02 FB | 	rdlong	local04, fp
0cde0     38 4E 85 F1 | 	sub	fp, #56
0cde4     0F 25 12 F2 | 	cmp	local04, local01 wc
0cde8     28 00 90 3D |  if_ae	jmp	#LR__0986
0cdec     24 4E 05 F1 | 	add	fp, #36
0cdf0     A7 12 02 FB | 	rdlong	arg01, fp
0cdf4     24 4E 85 F1 | 	sub	fp, #36
0cdf8     0C 12 06 F1 | 	add	arg01, #12
0cdfc     10 8C B0 FD | 	call	#_pslpeek
0ce00     3C 4E 05 F1 | 	add	fp, #60
0ce04     A7 24 02 FB | 	rdlong	local04, fp
0ce08     3C 4E 85 F1 | 	sub	fp, #60
0ce0c     FD 24 12 F2 | 	cmp	local04, result1 wc
0ce10     0C 00 90 CD |  if_b	jmp	#LR__0987
0ce14                 | LR__0986
0ce14     31 12 06 F6 | 	mov	arg01, #49
0ce18     38 8A B0 FD | 	call	#_printerror
0ce1c     AC 03 90 FD | 	jmp	#LR__1003
0ce20                 | LR__0987
0ce20     24 4E 05 F1 | 	add	fp, #36
0ce24     A7 12 02 FB | 	rdlong	arg01, fp
0ce28     09 25 02 F6 | 	mov	local04, arg01
0ce2c     10 24 06 F1 | 	add	local04, #16
0ce30     24 4E 85 F1 | 	sub	fp, #36
0ce34     04 12 06 F1 | 	add	arg01, #4
0ce38     D4 8B B0 FD | 	call	#_pslpeek
0ce3c     FD 1E 02 F6 | 	mov	local01, result1
0ce40     38 4E 05 F1 | 	add	fp, #56
0ce44     A7 20 02 FB | 	rdlong	local02, fp
0ce48     10 1F 02 FD | 	qmul	local01, local02
0ce4c     04 4E 85 F1 | 	sub	fp, #4
0ce50     A7 22 02 FB | 	rdlong	local03, fp
0ce54     10 4E 85 F1 | 	sub	fp, #16
0ce58     A7 12 02 FB | 	rdlong	arg01, fp
0ce5c     24 4E 85 F1 | 	sub	fp, #36
0ce60     08 12 06 F1 | 	add	arg01, #8
0ce64     18 20 62 FD | 	getqx	local02
0ce68     10 23 02 F1 | 	add	local03, local02
0ce6c     A0 8B B0 FD | 	call	#_pslpeek
0ce70     FD 20 02 F6 | 	mov	local02, result1
0ce74     24 4E 05 F1 | 	add	fp, #36
0ce78     A7 12 02 FB | 	rdlong	arg01, fp
0ce7c     24 4E 85 F1 | 	sub	fp, #36
0ce80     04 12 06 F1 | 	add	arg01, #4
0ce84     88 8B B0 FD | 	call	#_pslpeek
0ce88     FD 20 02 FD | 	qmul	local02, result1
0ce8c     3C 4E 05 F1 | 	add	fp, #60
0ce90     A7 20 02 FB | 	rdlong	local02, fp
0ce94     18 1E 62 FD | 	getqx	local01
0ce98     10 1F 02 FD | 	qmul	local01, local02
0ce9c     10 4E 85 F1 | 	sub	fp, #16
0cea0     A7 20 02 FB | 	rdlong	local02, fp
0cea4     18 1E 62 FD | 	getqx	local01
0cea8     0F 23 02 F1 | 	add	local03, local01
0ceac     11 21 02 FD | 	qmul	local02, local03
0ceb0     04 4E 05 F1 | 	add	fp, #4
0ceb4                 | ' 
0ceb4                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0ceb4                 | ' select case arrtype
0ceb4     18 22 62 FD | 	getqx	local03
0ceb8     11 25 02 F1 | 	add	local04, local03
0cebc     A7 24 62 FC | 	wrlong	local04, fp
0cec0     08 4E 85 F1 | 	sub	fp, #8
0cec4     A7 26 02 FB | 	rdlong	local05, fp
0cec8     28 4E 85 F1 | 	sub	fp, #40
0cecc     00 27 86 F1 | 	sub	local05, #256
0ced0     0C 26 26 F3 | 	fle	local05, #12
0ced4     30 26 62 FD | 	jmprel	local05
0ced8                 | LR__0988
0ced8     30 00 90 FD | 	jmp	#LR__0989
0cedc     58 00 90 FD | 	jmp	#LR__0990
0cee0     88 00 90 FD | 	jmp	#LR__0991
0cee4     B8 00 90 FD | 	jmp	#LR__0992
0cee8     10 01 90 FD | 	jmp	#LR__0993
0ceec     68 01 90 FD | 	jmp	#LR__0994
0cef0     98 01 90 FD | 	jmp	#LR__0995
0cef4     C8 01 90 FD | 	jmp	#LR__0996
0cef8     F8 01 90 FD | 	jmp	#LR__0997
0cefc     28 02 90 FD | 	jmp	#LR__0998
0cf00     58 02 90 FD | 	jmp	#LR__0999
0cf04     88 02 90 FD | 	jmp	#LR__1000
0cf08     B8 02 90 FD | 	jmp	#LR__1001
0cf0c                 | LR__0989
0cf0c     A7 12 02 F6 | 	mov	arg01, fp
0cf10     30 4E 05 F1 | 	add	fp, #48
0cf14     A7 14 02 FB | 	rdlong	arg02, fp
0cf18     30 4E 85 F1 | 	sub	fp, #48
0cf1c     0C 16 06 F6 | 	mov	arg03, #12
0cf20     0B 00 00 FF 
0cf24     C0 E4 05 F1 | 	add	objptr, ##5824
0cf28     F8 B3 B0 FD | 	call	#_psram_spin2_write
0cf2c     0B 00 00 FF 
0cf30     C0 E4 85 F1 | 	sub	objptr, ##5824
0cf34     94 02 90 FD | 	jmp	#LR__1002
0cf38                 | LR__0990
0cf38     30 4E 05 F1 | 	add	fp, #48
0cf3c     A7 12 02 FB | 	rdlong	arg01, fp
0cf40     30 4E 85 F1 | 	sub	fp, #48
0cf44     A7 14 02 FB | 	rdlong	arg02, fp
0cf48     01 16 06 F6 | 	mov	arg03, #1
0cf4c     00 18 06 F6 | 	mov	arg04, #0
0cf50     0B 00 00 FF 
0cf54     C0 E4 05 F1 | 	add	objptr, ##5824
0cf58                 | '     return fill(addr, pattern, count, listPtr, 1)
0cf58     01 1A 06 F6 | 	mov	arg05, #1
0cf5c     60 B4 B0 FD | 	call	#_psram_spin2_fill
0cf60     0B 00 00 FF 
0cf64     C0 E4 85 F1 | 	sub	objptr, ##5824
0cf68     60 02 90 FD | 	jmp	#LR__1002
0cf6c                 | LR__0991
0cf6c     30 4E 05 F1 | 	add	fp, #48
0cf70     A7 12 02 FB | 	rdlong	arg01, fp
0cf74     30 4E 85 F1 | 	sub	fp, #48
0cf78     A7 14 02 FB | 	rdlong	arg02, fp
0cf7c     01 16 06 F6 | 	mov	arg03, #1
0cf80     00 18 06 F6 | 	mov	arg04, #0
0cf84     0B 00 00 FF 
0cf88     C0 E4 05 F1 | 	add	objptr, ##5824
0cf8c                 | '     return fill(addr, pattern, count, listPtr, 1)
0cf8c     01 1A 06 F6 | 	mov	arg05, #1
0cf90     2C B4 B0 FD | 	call	#_psram_spin2_fill
0cf94     0B 00 00 FF 
0cf98     C0 E4 85 F1 | 	sub	objptr, ##5824
0cf9c     2C 02 90 FD | 	jmp	#LR__1002
0cfa0                 | LR__0992
0cfa0     30 4E 05 F1 | 	add	fp, #48
0cfa4     A7 12 02 FB | 	rdlong	arg01, fp
0cfa8     30 4E 85 F1 | 	sub	fp, #48
0cfac     A7 14 02 FB | 	rdlong	arg02, fp
0cfb0     01 16 06 F6 | 	mov	arg03, #1
0cfb4     00 18 06 F6 | 	mov	arg04, #0
0cfb8     0B 00 00 FF 
0cfbc     C0 E4 05 F1 | 	add	objptr, ##5824
0cfc0                 | '     return fill(addr, pattern, count, listPtr, 1)
0cfc0     01 1A 06 F6 | 	mov	arg05, #1
0cfc4     F8 B3 B0 FD | 	call	#_psram_spin2_fill
0cfc8     30 4E 05 F1 | 	add	fp, #48
0cfcc     A7 12 02 FB | 	rdlong	arg01, fp
0cfd0     30 4E 85 F1 | 	sub	fp, #48
0cfd4     01 12 06 F1 | 	add	arg01, #1
0cfd8     A7 14 02 FB | 	rdlong	arg02, fp
0cfdc     08 14 46 F0 | 	shr	arg02, #8
0cfe0     01 16 06 F6 | 	mov	arg03, #1
0cfe4     00 18 06 F6 | 	mov	arg04, #0
0cfe8                 | '     return fill(addr, pattern, count, listPtr, 1)
0cfe8     01 1A 06 F6 | 	mov	arg05, #1
0cfec     D0 B3 B0 FD | 	call	#_psram_spin2_fill
0cff0     0B 00 00 FF 
0cff4     C0 E4 85 F1 | 	sub	objptr, ##5824
0cff8     D0 01 90 FD | 	jmp	#LR__1002
0cffc                 | LR__0993
0cffc     30 4E 05 F1 | 	add	fp, #48
0d000     A7 12 02 FB | 	rdlong	arg01, fp
0d004     30 4E 85 F1 | 	sub	fp, #48
0d008     A7 14 02 FB | 	rdlong	arg02, fp
0d00c     01 16 06 F6 | 	mov	arg03, #1
0d010     00 18 06 F6 | 	mov	arg04, #0
0d014     0B 00 00 FF 
0d018     C0 E4 05 F1 | 	add	objptr, ##5824
0d01c                 | '     return fill(addr, pattern, count, listPtr, 1)
0d01c     01 1A 06 F6 | 	mov	arg05, #1
0d020     9C B3 B0 FD | 	call	#_psram_spin2_fill
0d024     30 4E 05 F1 | 	add	fp, #48
0d028     A7 12 02 FB | 	rdlong	arg01, fp
0d02c     30 4E 85 F1 | 	sub	fp, #48
0d030     01 12 06 F1 | 	add	arg01, #1
0d034     A7 14 02 FB | 	rdlong	arg02, fp
0d038     08 14 46 F0 | 	shr	arg02, #8
0d03c     01 16 06 F6 | 	mov	arg03, #1
0d040     00 18 06 F6 | 	mov	arg04, #0
0d044                 | '     return fill(addr, pattern, count, listPtr, 1)
0d044     01 1A 06 F6 | 	mov	arg05, #1
0d048     74 B3 B0 FD | 	call	#_psram_spin2_fill
0d04c     0B 00 00 FF 
0d050     C0 E4 85 F1 | 	sub	objptr, ##5824
0d054     74 01 90 FD | 	jmp	#LR__1002
0d058                 | LR__0994
0d058     30 4E 05 F1 | 	add	fp, #48
0d05c     A7 12 02 FB | 	rdlong	arg01, fp
0d060     30 4E 85 F1 | 	sub	fp, #48
0d064     A7 14 02 FB | 	rdlong	arg02, fp
0d068     01 16 06 F6 | 	mov	arg03, #1
0d06c     00 18 06 F6 | 	mov	arg04, #0
0d070     0B 00 00 FF 
0d074     C0 E4 05 F1 | 	add	objptr, ##5824
0d078                 | '     return fill(addr, pattern, count, listPtr, 4)
0d078     04 1A 06 F6 | 	mov	arg05, #4
0d07c     40 B3 B0 FD | 	call	#_psram_spin2_fill
0d080     0B 00 00 FF 
0d084     C0 E4 85 F1 | 	sub	objptr, ##5824
0d088     40 01 90 FD | 	jmp	#LR__1002
0d08c                 | LR__0995
0d08c     30 4E 05 F1 | 	add	fp, #48
0d090     A7 12 02 FB | 	rdlong	arg01, fp
0d094     30 4E 85 F1 | 	sub	fp, #48
0d098     A7 14 02 FB | 	rdlong	arg02, fp
0d09c     01 16 06 F6 | 	mov	arg03, #1
0d0a0     00 18 06 F6 | 	mov	arg04, #0
0d0a4     0B 00 00 FF 
0d0a8     C0 E4 05 F1 | 	add	objptr, ##5824
0d0ac                 | '     return fill(addr, pattern, count, listPtr, 4)
0d0ac     04 1A 06 F6 | 	mov	arg05, #4
0d0b0     0C B3 B0 FD | 	call	#_psram_spin2_fill
0d0b4     0B 00 00 FF 
0d0b8     C0 E4 85 F1 | 	sub	objptr, ##5824
0d0bc     0C 01 90 FD | 	jmp	#LR__1002
0d0c0                 | LR__0996
0d0c0     30 4E 05 F1 | 	add	fp, #48
0d0c4     A7 12 02 FB | 	rdlong	arg01, fp
0d0c8     30 4E 85 F1 | 	sub	fp, #48
0d0cc     A7 14 02 FB | 	rdlong	arg02, fp
0d0d0     01 16 06 F6 | 	mov	arg03, #1
0d0d4     00 18 06 F6 | 	mov	arg04, #0
0d0d8     0B 00 00 FF 
0d0dc     C0 E4 05 F1 | 	add	objptr, ##5824
0d0e0                 | '     return fill(addr, pattern, count, listPtr, 4)
0d0e0     04 1A 06 F6 | 	mov	arg05, #4
0d0e4     D8 B2 B0 FD | 	call	#_psram_spin2_fill
0d0e8     0B 00 00 FF 
0d0ec     C0 E4 85 F1 | 	sub	objptr, ##5824
0d0f0     D8 00 90 FD | 	jmp	#LR__1002
0d0f4                 | LR__0997
0d0f4     30 4E 05 F1 | 	add	fp, #48
0d0f8     A7 12 02 FB | 	rdlong	arg01, fp
0d0fc     30 4E 85 F1 | 	sub	fp, #48
0d100     A7 14 02 FB | 	rdlong	arg02, fp
0d104     01 16 06 F6 | 	mov	arg03, #1
0d108     00 18 06 F6 | 	mov	arg04, #0
0d10c     0B 00 00 FF 
0d110     C0 E4 05 F1 | 	add	objptr, ##5824
0d114                 | '     return fill(addr, pattern, count, listPtr, 4)
0d114     04 1A 06 F6 | 	mov	arg05, #4
0d118     A4 B2 B0 FD | 	call	#_psram_spin2_fill
0d11c     0B 00 00 FF 
0d120     C0 E4 85 F1 | 	sub	objptr, ##5824
0d124     A4 00 90 FD | 	jmp	#LR__1002
0d128                 | LR__0998
0d128     30 4E 05 F1 | 	add	fp, #48
0d12c     A7 12 02 FB | 	rdlong	arg01, fp
0d130     30 4E 85 F1 | 	sub	fp, #48
0d134     A7 14 02 FB | 	rdlong	arg02, fp
0d138     01 16 06 F6 | 	mov	arg03, #1
0d13c     00 18 06 F6 | 	mov	arg04, #0
0d140     0B 00 00 FF 
0d144     C0 E4 05 F1 | 	add	objptr, ##5824
0d148                 | '     return fill(addr, pattern, count, listPtr, 4)
0d148     04 1A 06 F6 | 	mov	arg05, #4
0d14c     70 B2 B0 FD | 	call	#_psram_spin2_fill
0d150     0B 00 00 FF 
0d154     C0 E4 85 F1 | 	sub	objptr, ##5824
0d158     70 00 90 FD | 	jmp	#LR__1002
0d15c                 | LR__0999
0d15c     30 4E 05 F1 | 	add	fp, #48
0d160     A7 12 02 FB | 	rdlong	arg01, fp
0d164     30 4E 85 F1 | 	sub	fp, #48
0d168     A7 14 02 FB | 	rdlong	arg02, fp
0d16c     01 16 06 F6 | 	mov	arg03, #1
0d170     00 18 06 F6 | 	mov	arg04, #0
0d174     0B 00 00 FF 
0d178     C0 E4 05 F1 | 	add	objptr, ##5824
0d17c                 | '     return fill(addr, pattern, count, listPtr, 4)
0d17c     04 1A 06 F6 | 	mov	arg05, #4
0d180     3C B2 B0 FD | 	call	#_psram_spin2_fill
0d184     0B 00 00 FF 
0d188     C0 E4 85 F1 | 	sub	objptr, ##5824
0d18c     3C 00 90 FD | 	jmp	#LR__1002
0d190                 | LR__1000
0d190     30 4E 05 F1 | 	add	fp, #48
0d194     A7 12 02 FB | 	rdlong	arg01, fp
0d198     30 4E 85 F1 | 	sub	fp, #48
0d19c     A7 14 02 FB | 	rdlong	arg02, fp
0d1a0     01 16 06 F6 | 	mov	arg03, #1
0d1a4     00 18 06 F6 | 	mov	arg04, #0
0d1a8     0B 00 00 FF 
0d1ac     C0 E4 05 F1 | 	add	objptr, ##5824
0d1b0                 | '     return fill(addr, pattern, count, listPtr, 4)
0d1b0     04 1A 06 F6 | 	mov	arg05, #4
0d1b4     08 B2 B0 FD | 	call	#_psram_spin2_fill
0d1b8     0B 00 00 FF 
0d1bc     C0 E4 85 F1 | 	sub	objptr, ##5824
0d1c0     08 00 90 FD | 	jmp	#LR__1002
0d1c4                 | LR__1001
0d1c4     2F 12 06 F6 | 	mov	arg01, #47
0d1c8     88 86 B0 FD | 	call	#_printerror
0d1cc                 | LR__1002
0d1cc                 | LR__1003
0d1cc     A7 F0 03 F6 | 	mov	ptra, fp
0d1d0     B2 00 A0 FD | 	call	#popregs_
0d1d4                 | _do_assign_ret
0d1d4     2D 00 64 FD | 	ret
0d1d8                 | 
0d1d8                 | ' 
0d1d8                 | ' 
0d1d8                 | ' ' --------------------- Read a variable and push to the stack
0d1d8                 | ' 
0d1d8                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0d1d8                 | ' 
0d1d8                 | ' sub do_getvar
0d1d8                 | _do_getvar
0d1d8     04 4A 05 F6 | 	mov	COUNT_, #4
0d1dc     A8 00 A0 FD | 	call	#pushregs_
0d1e0     3C F0 07 F1 | 	add	ptra, #60
0d1e4                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0d1e4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0d1e4     69 00 00 FF 
0d1e8     54 E5 05 F1 | 	add	objptr, ##54100
0d1ec     F2 1E 02 FB | 	rdlong	local01, objptr
0d1f0     0F 17 02 F6 | 	mov	arg03, local01
0d1f4     01 16 66 F0 | 	shl	arg03, #1
0d1f8     0F 17 02 F1 | 	add	arg03, local01
0d1fc     02 16 66 F0 | 	shl	arg03, #2
0d200     03 00 00 FF 
0d204     04 E4 85 F1 | 	sub	objptr, ##1540
0d208     F2 16 02 F1 | 	add	arg03, objptr
0d20c     04 16 06 F1 | 	add	arg03, #4
0d210     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0d214     66 00 00 FF 
0d218     50 E5 85 F1 | 	sub	objptr, ##52560
0d21c     C4 00 90 5D |  if_ne	jmp	#LR__1011
0d220     69 00 00 FF 
0d224     54 E5 05 F1 | 	add	objptr, ##54100
0d228     F2 1E 02 FB | 	rdlong	local01, objptr
0d22c     0F 13 02 F6 | 	mov	arg01, local01
0d230     01 12 66 F0 | 	shl	arg01, #1
0d234     0F 13 02 F1 | 	add	arg01, local01
0d238     02 12 66 F0 | 	shl	arg01, #2
0d23c     03 00 00 FF 
0d240     04 E4 85 F1 | 	sub	objptr, ##1540
0d244     F2 12 02 F1 | 	add	arg01, objptr
0d248     09 1F 02 FB | 	rdlong	local01, arg01
0d24c     04 1E 66 F0 | 	shl	local01, #4
0d250     32 00 00 FF 
0d254     74 E4 85 F1 | 	sub	objptr, ##25716
0d258     F2 1E 02 F1 | 	add	local01, objptr
0d25c     04 1E 06 F1 | 	add	local01, #4
0d260     0F 13 02 FB | 	rdlong	arg01, local01
0d264     04 1E 06 F1 | 	add	local01, #4
0d268     0F 1F 02 FB | 	rdlong	local01, local01
0d26c     A7 12 62 FC | 	wrlong	arg01, fp
0d270     04 4E 05 F1 | 	add	fp, #4
0d274     A7 1E 62 FC | 	wrlong	local01, fp
0d278     35 00 00 FF 
0d27c     78 E4 05 F1 | 	add	objptr, ##27256
0d280     F2 1E 02 FB | 	rdlong	local01, objptr
0d284     0F 13 02 F6 | 	mov	arg01, local01
0d288     01 12 66 F0 | 	shl	arg01, #1
0d28c     0F 13 02 F1 | 	add	arg01, local01
0d290     02 12 66 F0 | 	shl	arg01, #2
0d294     03 00 00 FF 
0d298     04 E4 85 F1 | 	sub	objptr, ##1540
0d29c     F2 12 02 F1 | 	add	arg01, objptr
0d2a0     09 1F 02 FB | 	rdlong	local01, arg01
0d2a4     04 1E 66 F0 | 	shl	local01, #4
0d2a8     32 00 00 FF 
0d2ac     74 E4 85 F1 | 	sub	objptr, ##25716
0d2b0     F2 1E 02 F1 | 	add	local01, objptr
0d2b4     0C 1E 06 F1 | 	add	local01, #12
0d2b8     0F 1F 02 FB | 	rdlong	local01, local01
0d2bc     04 4E 05 F1 | 	add	fp, #4
0d2c0     A7 1E 62 FC | 	wrlong	local01, fp
0d2c4                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0d2c4                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0d2c4                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0d2c4     08 4E 85 F1 | 	sub	fp, #8
0d2c8     00 1F 16 F2 | 	cmp	local01, #256 wc
0d2cc     34 00 00 FF 
0d2d0     DC E4 85 F1 | 	sub	objptr, ##26844
0d2d4     0C 00 90 3D |  if_ae	jmp	#LR__1010
0d2d8     A7 12 02 F6 | 	mov	arg01, fp
0d2dc     9C C6 BF FD | 	call	#_push
0d2e0     A0 04 90 FD | 	jmp	#LR__1032
0d2e4                 | LR__1010
0d2e4                 | LR__1011
0d2e4     69 00 00 FF 
0d2e8     54 E5 05 F1 | 	add	objptr, ##54100
0d2ec     F2 16 02 FB | 	rdlong	arg03, objptr
0d2f0     0B 15 02 F6 | 	mov	arg02, arg03
0d2f4     01 14 66 F0 | 	shl	arg02, #1
0d2f8     0B 15 02 F1 | 	add	arg02, arg03
0d2fc     02 14 66 F0 | 	shl	arg02, #2
0d300     03 00 00 FF 
0d304     04 E4 85 F1 | 	sub	objptr, ##1540
0d308     F2 14 02 F1 | 	add	arg02, objptr
0d30c     0A 17 02 FB | 	rdlong	arg03, arg02
0d310     04 16 66 F0 | 	shl	arg03, #4
0d314     32 00 00 FF 
0d318     74 E4 85 F1 | 	sub	objptr, ##25716
0d31c     F2 16 02 F1 | 	add	arg03, objptr
0d320     04 16 06 F1 | 	add	arg03, #4
0d324     0B 13 02 FB | 	rdlong	arg01, arg03
0d328     0C 4E 05 F1 | 	add	fp, #12
0d32c     A7 12 62 FC | 	wrlong	arg01, fp
0d330     0C 4E 85 F1 | 	sub	fp, #12
0d334     34 00 00 FF 
0d338     DC E4 85 F1 | 	sub	objptr, ##26844
0d33c     D0 86 B0 FD | 	call	#_pslpeek
0d340     FD FA 31 F9 | 	getword	result1, result1, #0
0d344     10 4E 05 F1 | 	add	fp, #16
0d348     A7 FA 61 FC | 	wrlong	result1, fp
0d34c     69 00 00 FF 
0d350     54 E5 05 F1 | 	add	objptr, ##54100
0d354     F2 16 02 FB | 	rdlong	arg03, objptr
0d358     0B 15 02 F6 | 	mov	arg02, arg03
0d35c     01 14 66 F0 | 	shl	arg02, #1
0d360     0B 15 02 F1 | 	add	arg02, arg03
0d364     02 14 66 F0 | 	shl	arg02, #2
0d368     03 00 00 FF 
0d36c     04 E4 85 F1 | 	sub	objptr, ##1540
0d370     F2 14 02 F1 | 	add	arg02, objptr
0d374     04 14 06 F1 | 	add	arg02, #4
0d378     0A 17 02 FB | 	rdlong	arg03, arg02
0d37c     04 4E 05 F1 | 	add	fp, #4
0d380     A7 16 62 FC | 	wrlong	arg03, fp
0d384     08 4E 85 F1 | 	sub	fp, #8
0d388     A7 12 02 FB | 	rdlong	arg01, fp
0d38c     0C 4E 85 F1 | 	sub	fp, #12
0d390     02 12 06 F1 | 	add	arg01, #2
0d394     66 00 00 FF 
0d398     50 E5 85 F1 | 	sub	objptr, ##52560
0d39c     18 86 B0 FD | 	call	#_pspeek
0d3a0     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d3a4     18 4E 05 F1 | 	add	fp, #24
0d3a8     A7 FA 61 FC | 	wrlong	result1, fp
0d3ac     0C 4E 85 F1 | 	sub	fp, #12
0d3b0     A7 12 02 FB | 	rdlong	arg01, fp
0d3b4     0C 4E 85 F1 | 	sub	fp, #12
0d3b8     04 12 06 F1 | 	add	arg01, #4
0d3bc     50 86 B0 FD | 	call	#_pslpeek
0d3c0     1C 4E 05 F1 | 	add	fp, #28
0d3c4     A7 FA 61 FC | 	wrlong	result1, fp
0d3c8     10 4E 85 F1 | 	sub	fp, #16
0d3cc     A7 12 02 FB | 	rdlong	arg01, fp
0d3d0     0C 4E 85 F1 | 	sub	fp, #12
0d3d4     08 12 06 F1 | 	add	arg01, #8
0d3d8     34 86 B0 FD | 	call	#_pslpeek
0d3dc     20 4E 05 F1 | 	add	fp, #32
0d3e0     A7 FA 61 FC | 	wrlong	result1, fp
0d3e4     14 4E 85 F1 | 	sub	fp, #20
0d3e8     A7 12 02 FB | 	rdlong	arg01, fp
0d3ec     0C 4E 85 F1 | 	sub	fp, #12
0d3f0     0C 12 06 F1 | 	add	arg01, #12
0d3f4     18 86 B0 FD | 	call	#_pslpeek
0d3f8     24 4E 05 F1 | 	add	fp, #36
0d3fc     A7 FA 61 FC | 	wrlong	result1, fp
0d400                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0d400                 | ' esize=pspeek(arrptr+2)
0d400                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0d400                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0d400                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0d400                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0d400     10 4E 85 F1 | 	sub	fp, #16
0d404     A7 16 02 FB | 	rdlong	arg03, fp
0d408     14 4E 85 F1 | 	sub	fp, #20
0d40c     03 16 16 F2 | 	cmp	arg03, #3 wc
0d410     38 00 90 CD |  if_b	jmp	#LR__1012
0d414     CC C4 BF FD | 	call	#_pop
0d418     FF 16 02 F6 | 	mov	arg03, result3
0d41c     A7 FA 61 FC | 	wrlong	result1, fp
0d420     04 4E 05 F1 | 	add	fp, #4
0d424     A7 FC 61 FC | 	wrlong	result2, fp
0d428     04 4E 05 F1 | 	add	fp, #4
0d42c     A7 16 62 FC | 	wrlong	arg03, fp
0d430     08 4E 85 F1 | 	sub	fp, #8
0d434     A7 12 02 F6 | 	mov	arg01, fp
0d438     18 3A B0 FD | 	call	#_converttoint
0d43c     30 4E 05 F1 | 	add	fp, #48
0d440     A7 FA 61 FC | 	wrlong	result1, fp
0d444     30 4E 85 F1 | 	sub	fp, #48
0d448     0C 00 90 FD | 	jmp	#LR__1013
0d44c                 | LR__1012
0d44c     30 4E 05 F1 | 	add	fp, #48
0d450     A7 00 68 FC | 	wrlong	#0, fp
0d454     30 4E 85 F1 | 	sub	fp, #48
0d458                 | LR__1013
0d458                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0d458     14 4E 05 F1 | 	add	fp, #20
0d45c     A7 16 02 FB | 	rdlong	arg03, fp
0d460     14 4E 85 F1 | 	sub	fp, #20
0d464     02 16 16 F2 | 	cmp	arg03, #2 wc
0d468     38 00 90 CD |  if_b	jmp	#LR__1014
0d46c     74 C4 BF FD | 	call	#_pop
0d470     FF 16 02 F6 | 	mov	arg03, result3
0d474     A7 FA 61 FC | 	wrlong	result1, fp
0d478     04 4E 05 F1 | 	add	fp, #4
0d47c     A7 FC 61 FC | 	wrlong	result2, fp
0d480     04 4E 05 F1 | 	add	fp, #4
0d484     A7 16 62 FC | 	wrlong	arg03, fp
0d488     08 4E 85 F1 | 	sub	fp, #8
0d48c     A7 12 02 F6 | 	mov	arg01, fp
0d490     C0 39 B0 FD | 	call	#_converttoint
0d494     2C 4E 05 F1 | 	add	fp, #44
0d498     A7 FA 61 FC | 	wrlong	result1, fp
0d49c     2C 4E 85 F1 | 	sub	fp, #44
0d4a0     0C 00 90 FD | 	jmp	#LR__1015
0d4a4                 | LR__1014
0d4a4     2C 4E 05 F1 | 	add	fp, #44
0d4a8     A7 00 68 FC | 	wrlong	#0, fp
0d4ac     2C 4E 85 F1 | 	sub	fp, #44
0d4b0                 | LR__1015
0d4b0                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0d4b0     14 4E 05 F1 | 	add	fp, #20
0d4b4     A7 16 02 FB | 	rdlong	arg03, fp
0d4b8     14 4E 85 F1 | 	sub	fp, #20
0d4bc     01 16 16 F2 | 	cmp	arg03, #1 wc
0d4c0     38 00 90 CD |  if_b	jmp	#LR__1016
0d4c4     1C C4 BF FD | 	call	#_pop
0d4c8     FF 16 02 F6 | 	mov	arg03, result3
0d4cc     A7 FA 61 FC | 	wrlong	result1, fp
0d4d0     04 4E 05 F1 | 	add	fp, #4
0d4d4     A7 FC 61 FC | 	wrlong	result2, fp
0d4d8     04 4E 05 F1 | 	add	fp, #4
0d4dc     A7 16 62 FC | 	wrlong	arg03, fp
0d4e0     08 4E 85 F1 | 	sub	fp, #8
0d4e4     A7 12 02 F6 | 	mov	arg01, fp
0d4e8     68 39 B0 FD | 	call	#_converttoint
0d4ec     28 4E 05 F1 | 	add	fp, #40
0d4f0     A7 FA 61 FC | 	wrlong	result1, fp
0d4f4     28 4E 85 F1 | 	sub	fp, #40
0d4f8     0C 00 90 FD | 	jmp	#LR__1017
0d4fc                 | LR__1016
0d4fc     28 4E 05 F1 | 	add	fp, #40
0d500     A7 00 68 FC | 	wrlong	#0, fp
0d504     28 4E 85 F1 | 	sub	fp, #40
0d508                 | LR__1017
0d508     0C 4E 05 F1 | 	add	fp, #12
0d50c     A7 20 02 FB | 	rdlong	local02, fp
0d510     1C 4E 05 F1 | 	add	fp, #28
0d514     A7 22 02 FB | 	rdlong	local03, fp
0d518     04 4E 05 F1 | 	add	fp, #4
0d51c     A7 FC 01 FB | 	rdlong	result2, fp
0d520     10 4E 85 F1 | 	sub	fp, #16
0d524     A7 FE 01 FB | 	rdlong	result3, fp
0d528     FF FC 01 FD | 	qmul	result2, result3
0d52c     10 20 06 F1 | 	add	local02, #16
0d530     14 4E 05 F1 | 	add	fp, #20
0d534     A7 FC 01 FB | 	rdlong	result2, fp
0d538     18 FA 61 FD | 	getqx	result1
0d53c     FF FC 01 FD | 	qmul	result2, result3
0d540     FD 22 02 F1 | 	add	local03, result1
0d544     10 4E 85 F1 | 	sub	fp, #16
0d548     A7 FE 01 FB | 	rdlong	result3, fp
0d54c     18 FC 61 FD | 	getqx	result2
0d550     FF FC 01 FD | 	qmul	result2, result3
0d554     08 4E 85 F1 | 	sub	fp, #8
0d558     A7 FE 01 FB | 	rdlong	result3, fp
0d55c     18 FC 61 FD | 	getqx	result2
0d560     FE 22 02 F1 | 	add	local03, result2
0d564     FF 22 02 FD | 	qmul	local03, result3
0d568     1C 4E 05 F1 | 	add	fp, #28
0d56c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0d56c                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0d56c                 | ' 
0d56c                 | ' select case vartype
0d56c     18 FC 61 FD | 	getqx	result2
0d570     FE 20 02 F1 | 	add	local02, result2
0d574     A7 20 62 FC | 	wrlong	local02, fp
0d578     24 4E 85 F1 | 	sub	fp, #36
0d57c     A7 24 02 FB | 	rdlong	local04, fp
0d580     10 4E 85 F1 | 	sub	fp, #16
0d584     00 25 86 F1 | 	sub	local04, #256
0d588     0C 24 26 F3 | 	fle	local04, #12
0d58c     30 24 62 FD | 	jmprel	local04
0d590                 | LR__1018
0d590     30 00 90 FD | 	jmp	#LR__1019
0d594     58 00 90 FD | 	jmp	#LR__1020
0d598     8C 00 90 FD | 	jmp	#LR__1021
0d59c     AC 00 90 FD | 	jmp	#LR__1022
0d5a0     E8 00 90 FD | 	jmp	#LR__1023
0d5a4     08 01 90 FD | 	jmp	#LR__1024
0d5a8     24 01 90 FD | 	jmp	#LR__1025
0d5ac     40 01 90 FD | 	jmp	#LR__1026
0d5b0     50 01 90 FD | 	jmp	#LR__1027
0d5b4     60 01 90 FD | 	jmp	#LR__1028
0d5b8     7C 01 90 FD | 	jmp	#LR__1029
0d5bc     8C 01 90 FD | 	jmp	#LR__1030
0d5c0     B8 01 90 FD | 	jmp	#LR__1031
0d5c4                 | LR__1019
0d5c4     A7 12 02 F6 | 	mov	arg01, fp
0d5c8     34 4E 05 F1 | 	add	fp, #52
0d5cc     A7 14 02 FB | 	rdlong	arg02, fp
0d5d0     34 4E 85 F1 | 	sub	fp, #52
0d5d4     0C 16 06 F6 | 	mov	arg03, #12
0d5d8     0B 00 00 FF 
0d5dc     C0 E4 05 F1 | 	add	objptr, ##5824
0d5e0     A4 AC B0 FD | 	call	#_psram_spin2_read1
0d5e4     0B 00 00 FF 
0d5e8     C0 E4 85 F1 | 	sub	objptr, ##5824
0d5ec     8C 01 90 FD | 	jmp	#LR__1031
0d5f0                 | LR__1020
0d5f0     08 4E 05 F1 | 	add	fp, #8
0d5f4     A7 38 68 FC | 	wrlong	#28, fp
0d5f8     2C 4E 05 F1 | 	add	fp, #44
0d5fc     A7 12 02 FB | 	rdlong	arg01, fp
0d600     34 4E 85 F1 | 	sub	fp, #52
0d604     B0 83 B0 FD | 	call	#_pspeek
0d608     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d60c     A7 FA 61 FC | 	wrlong	result1, fp
0d610     80 FA 15 F2 | 	cmp	result1, #128 wc
0d614     00 1F 66 36 |  if_ae	neg	local01, #256
0d618     A7 22 02 3B |  if_ae	rdlong	local03, fp
0d61c     11 1F 42 35 |  if_ae	or	local01, local03
0d620     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0d624     54 01 90 FD | 	jmp	#LR__1031
0d628                 | LR__1021
0d628     08 4E 05 F1 | 	add	fp, #8
0d62c     A7 3A 68 FC | 	wrlong	#29, fp
0d630     2C 4E 05 F1 | 	add	fp, #44
0d634     A7 12 02 FB | 	rdlong	arg01, fp
0d638     34 4E 85 F1 | 	sub	fp, #52
0d63c     78 83 B0 FD | 	call	#_pspeek
0d640     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d644     A7 FA 61 FC | 	wrlong	result1, fp
0d648     30 01 90 FD | 	jmp	#LR__1031
0d64c                 | LR__1022
0d64c     08 4E 05 F1 | 	add	fp, #8
0d650     A7 38 68 FC | 	wrlong	#28, fp
0d654     2C 4E 05 F1 | 	add	fp, #44
0d658     A7 12 02 FB | 	rdlong	arg01, fp
0d65c     34 4E 85 F1 | 	sub	fp, #52
0d660     AC 83 B0 FD | 	call	#_pslpeek
0d664     FD FA 31 F9 | 	getword	result1, result1, #0
0d668     A7 FA 61 FC | 	wrlong	result1, fp
0d66c     40 00 00 FF 
0d670     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0d674     FF 7F 00 3F 
0d678     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0d67c     A7 22 02 3B |  if_ae	rdlong	local03, fp
0d680     11 1F 42 35 |  if_ae	or	local01, local03
0d684     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0d688     F0 00 90 FD | 	jmp	#LR__1031
0d68c                 | LR__1023
0d68c     08 4E 05 F1 | 	add	fp, #8
0d690     A7 3A 68 FC | 	wrlong	#29, fp
0d694     2C 4E 05 F1 | 	add	fp, #44
0d698     A7 12 02 FB | 	rdlong	arg01, fp
0d69c     34 4E 85 F1 | 	sub	fp, #52
0d6a0     6C 83 B0 FD | 	call	#_pslpeek
0d6a4     FD FA 31 F9 | 	getword	result1, result1, #0
0d6a8     A7 FA 61 FC | 	wrlong	result1, fp
0d6ac     CC 00 90 FD | 	jmp	#LR__1031
0d6b0                 | LR__1024
0d6b0     08 4E 05 F1 | 	add	fp, #8
0d6b4     A7 38 68 FC | 	wrlong	#28, fp
0d6b8     2C 4E 05 F1 | 	add	fp, #44
0d6bc     A7 12 02 FB | 	rdlong	arg01, fp
0d6c0     34 4E 85 F1 | 	sub	fp, #52
0d6c4     48 83 B0 FD | 	call	#_pslpeek
0d6c8     A7 FA 61 FC | 	wrlong	result1, fp
0d6cc     AC 00 90 FD | 	jmp	#LR__1031
0d6d0                 | LR__1025
0d6d0     08 4E 05 F1 | 	add	fp, #8
0d6d4     A7 3A 68 FC | 	wrlong	#29, fp
0d6d8     2C 4E 05 F1 | 	add	fp, #44
0d6dc     A7 12 02 FB | 	rdlong	arg01, fp
0d6e0     34 4E 85 F1 | 	sub	fp, #52
0d6e4     28 83 B0 FD | 	call	#_pslpeek
0d6e8     A7 FA 61 FC | 	wrlong	result1, fp
0d6ec     8C 00 90 FD | 	jmp	#LR__1031
0d6f0                 | LR__1026
0d6f0     08 4E 05 F1 | 	add	fp, #8
0d6f4     A7 FE 69 FC | 	wrlong	#255, fp
0d6f8     08 4E 85 F1 | 	sub	fp, #8
0d6fc     A7 60 68 FC | 	wrlong	#48, fp
0d700     78 00 90 FD | 	jmp	#LR__1031
0d704                 | LR__1027
0d704     08 4E 05 F1 | 	add	fp, #8
0d708     A7 FE 69 FC | 	wrlong	#255, fp
0d70c     08 4E 85 F1 | 	sub	fp, #8
0d710     A7 60 68 FC | 	wrlong	#48, fp
0d714     64 00 90 FD | 	jmp	#LR__1031
0d718                 | LR__1028
0d718     08 4E 05 F1 | 	add	fp, #8
0d71c     A7 3C 68 FC | 	wrlong	#30, fp
0d720     2C 4E 05 F1 | 	add	fp, #44
0d724     A7 12 02 FB | 	rdlong	arg01, fp
0d728     34 4E 85 F1 | 	sub	fp, #52
0d72c     E0 82 B0 FD | 	call	#_pslpeek
0d730     A7 FA 61 FC | 	wrlong	result1, fp
0d734     44 00 90 FD | 	jmp	#LR__1031
0d738                 | LR__1029
0d738     08 4E 05 F1 | 	add	fp, #8
0d73c     A7 FE 69 FC | 	wrlong	#255, fp
0d740     08 4E 85 F1 | 	sub	fp, #8
0d744     A7 60 68 FC | 	wrlong	#48, fp
0d748     30 00 90 FD | 	jmp	#LR__1031
0d74c                 | LR__1030
0d74c     08 4E 05 F1 | 	add	fp, #8
0d750     A7 3E 68 FC | 	wrlong	#31, fp
0d754     2C 4E 05 F1 | 	add	fp, #44
0d758     A7 12 02 FB | 	rdlong	arg01, fp
0d75c     34 4E 85 F1 | 	sub	fp, #52
0d760     AC 82 B0 FD | 	call	#_pslpeek
0d764     A7 FA 61 FC | 	wrlong	result1, fp
0d768     00 04 00 FF 
0d76c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0d770     08 4E 05 31 |  if_ae	add	fp, #8
0d774     A7 56 68 3C |  if_ae	wrlong	#43, fp
0d778     08 4E 85 31 |  if_ae	sub	fp, #8
0d77c                 | LR__1031
0d77c     A7 12 02 F6 | 	mov	arg01, fp
0d780     F8 C1 BF FD | 	call	#_push
0d784                 | LR__1032
0d784     A7 F0 03 F6 | 	mov	ptra, fp
0d788     B2 00 A0 FD | 	call	#popregs_
0d78c                 | _do_getvar_ret
0d78c     2D 00 64 FD | 	ret
0d790                 | 
0d790                 | ' 
0d790                 | ' '------------------------ Operators 
0d790                 | ' 
0d790                 | ' sub do_plus 
0d790                 | _do_plus
0d790     05 4A 05 F6 | 	mov	COUNT_, #5
0d794     A8 00 A0 FD | 	call	#pushregs_
0d798     18 F0 07 F1 | 	add	ptra, #24
0d79c     44 C1 BF FD | 	call	#_pop
0d7a0     FD 1E 02 F6 | 	mov	local01, result1
0d7a4     FE 20 02 F6 | 	mov	local02, result2
0d7a8     FF 22 02 F6 | 	mov	local03, result3
0d7ac     0C 4E 05 F1 | 	add	fp, #12
0d7b0     A7 1E 62 FC | 	wrlong	local01, fp
0d7b4     04 4E 05 F1 | 	add	fp, #4
0d7b8     A7 20 62 FC | 	wrlong	local02, fp
0d7bc     04 4E 05 F1 | 	add	fp, #4
0d7c0     A7 22 62 FC | 	wrlong	local03, fp
0d7c4     14 4E 85 F1 | 	sub	fp, #20
0d7c8     18 C1 BF FD | 	call	#_pop
0d7cc     FF 22 02 F6 | 	mov	local03, result3
0d7d0     A7 FA 61 FC | 	wrlong	result1, fp
0d7d4     04 4E 05 F1 | 	add	fp, #4
0d7d8     A7 FC 61 FC | 	wrlong	result2, fp
0d7dc     04 4E 05 F1 | 	add	fp, #4
0d7e0     A7 22 62 FC | 	wrlong	local03, fp
0d7e4                 | ' 
0d7e4                 | ' t2=pop()
0d7e4                 | ' t1=pop()
0d7e4                 | ' 
0d7e4                 | ' 
0d7e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0d7e4     08 4E 85 F1 | 	sub	fp, #8
0d7e8     1D 22 0E F2 | 	cmp	local03, #29 wz
0d7ec     14 4E 05 A1 |  if_e	add	fp, #20
0d7f0     A7 24 02 AB |  if_e	rdlong	local04, fp
0d7f4     14 4E 85 A1 |  if_e	sub	fp, #20
0d7f8     12 23 02 A6 |  if_e	mov	local03, local04
0d7fc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d800     1C 00 90 5D |  if_ne	jmp	#LR__1040
0d804     A7 1E 02 FB | 	rdlong	local01, fp
0d808     0C 4E 05 F1 | 	add	fp, #12
0d80c     A7 20 02 FB | 	rdlong	local02, fp
0d810     0C 4E 85 F1 | 	sub	fp, #12
0d814     10 1F 02 F1 | 	add	local01, local02
0d818     A7 1E 62 FC | 	wrlong	local01, fp
0d81c     48 04 90 FD | 	jmp	#LR__1055
0d820                 | LR__1040
0d820                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0d820     08 4E 05 F1 | 	add	fp, #8
0d824     A7 1E 02 FB | 	rdlong	local01, fp
0d828     08 4E 85 F1 | 	sub	fp, #8
0d82c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d830     14 4E 05 A1 |  if_e	add	fp, #20
0d834     A7 24 02 AB |  if_e	rdlong	local04, fp
0d838     14 4E 85 A1 |  if_e	sub	fp, #20
0d83c     12 23 02 A6 |  if_e	mov	local03, local04
0d840     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d844     28 00 90 5D |  if_ne	jmp	#LR__1041
0d848     A7 1E 02 FB | 	rdlong	local01, fp
0d84c     0C 4E 05 F1 | 	add	fp, #12
0d850     A7 20 02 FB | 	rdlong	local02, fp
0d854     0C 4E 85 F1 | 	sub	fp, #12
0d858     10 1F 02 F1 | 	add	local01, local02
0d85c     A7 1E 62 FC | 	wrlong	local01, fp
0d860     08 4E 05 F1 | 	add	fp, #8
0d864     A7 38 68 FC | 	wrlong	#28, fp
0d868     08 4E 85 F1 | 	sub	fp, #8
0d86c     F8 03 90 FD | 	jmp	#LR__1055
0d870                 | LR__1041
0d870                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0d870     08 4E 05 F1 | 	add	fp, #8
0d874     A7 1E 02 FB | 	rdlong	local01, fp
0d878     08 4E 85 F1 | 	sub	fp, #8
0d87c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d880     14 4E 05 A1 |  if_e	add	fp, #20
0d884     A7 24 02 AB |  if_e	rdlong	local04, fp
0d888     14 4E 85 A1 |  if_e	sub	fp, #20
0d88c     12 23 02 A6 |  if_e	mov	local03, local04
0d890     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d894     30 00 90 5D |  if_ne	jmp	#LR__1042
0d898     A7 12 02 FB | 	rdlong	arg01, fp
0d89c     20 DC B0 FD | 	call	#__system___float_fromuns
0d8a0     FD 12 02 F6 | 	mov	arg01, result1
0d8a4     0C 4E 05 F1 | 	add	fp, #12
0d8a8     A7 14 02 FB | 	rdlong	arg02, fp
0d8ac     0C 4E 85 F1 | 	sub	fp, #12
0d8b0     40 DC B0 FD | 	call	#__system___float_add
0d8b4     A7 FA 61 FC | 	wrlong	result1, fp
0d8b8     08 4E 05 F1 | 	add	fp, #8
0d8bc     A7 3C 68 FC | 	wrlong	#30, fp
0d8c0     08 4E 85 F1 | 	sub	fp, #8
0d8c4     A0 03 90 FD | 	jmp	#LR__1055
0d8c8                 | LR__1042
0d8c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0d8c8     08 4E 05 F1 | 	add	fp, #8
0d8cc     A7 1E 02 FB | 	rdlong	local01, fp
0d8d0     08 4E 85 F1 | 	sub	fp, #8
0d8d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d8d8     14 4E 05 A1 |  if_e	add	fp, #20
0d8dc     A7 24 02 AB |  if_e	rdlong	local04, fp
0d8e0     14 4E 85 A1 |  if_e	sub	fp, #20
0d8e4     12 23 02 A6 |  if_e	mov	local03, local04
0d8e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d8ec     1C 00 90 5D |  if_ne	jmp	#LR__1043
0d8f0     A7 1E 02 FB | 	rdlong	local01, fp
0d8f4     0C 4E 05 F1 | 	add	fp, #12
0d8f8     A7 20 02 FB | 	rdlong	local02, fp
0d8fc     0C 4E 85 F1 | 	sub	fp, #12
0d900     10 1F 02 F1 | 	add	local01, local02
0d904     A7 1E 62 FC | 	wrlong	local01, fp
0d908     5C 03 90 FD | 	jmp	#LR__1055
0d90c                 | LR__1043
0d90c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0d90c     08 4E 05 F1 | 	add	fp, #8
0d910     A7 1E 02 FB | 	rdlong	local01, fp
0d914     08 4E 85 F1 | 	sub	fp, #8
0d918     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d91c     14 4E 05 A1 |  if_e	add	fp, #20
0d920     A7 24 02 AB |  if_e	rdlong	local04, fp
0d924     14 4E 85 A1 |  if_e	sub	fp, #20
0d928     12 23 02 A6 |  if_e	mov	local03, local04
0d92c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d930     1C 00 90 5D |  if_ne	jmp	#LR__1044
0d934     A7 1E 02 FB | 	rdlong	local01, fp
0d938     0C 4E 05 F1 | 	add	fp, #12
0d93c     A7 20 02 FB | 	rdlong	local02, fp
0d940     0C 4E 85 F1 | 	sub	fp, #12
0d944     10 1F 02 F1 | 	add	local01, local02
0d948     A7 1E 62 FC | 	wrlong	local01, fp
0d94c     18 03 90 FD | 	jmp	#LR__1055
0d950                 | LR__1044
0d950                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0d950     08 4E 05 F1 | 	add	fp, #8
0d954     A7 1E 02 FB | 	rdlong	local01, fp
0d958     08 4E 85 F1 | 	sub	fp, #8
0d95c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d960     14 4E 05 A1 |  if_e	add	fp, #20
0d964     A7 24 02 AB |  if_e	rdlong	local04, fp
0d968     14 4E 85 A1 |  if_e	sub	fp, #20
0d96c     12 23 02 A6 |  if_e	mov	local03, local04
0d970     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d974     40 00 90 5D |  if_ne	jmp	#LR__1045
0d978     A7 12 02 FB | 	rdlong	arg01, fp
0d97c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d980     1F 26 C6 C9 |  if_b	decod	local05, #31
0d984     00 26 06 36 |  if_ae	mov	local05, #0
0d988     34 DB B0 FD | 	call	#__system___float_fromuns
0d98c     13 FB 61 F5 | 	xor	result1, local05
0d990     FD 12 02 F6 | 	mov	arg01, result1
0d994     0C 4E 05 F1 | 	add	fp, #12
0d998     A7 14 02 FB | 	rdlong	arg02, fp
0d99c     0C 4E 85 F1 | 	sub	fp, #12
0d9a0     50 DB B0 FD | 	call	#__system___float_add
0d9a4     A7 FA 61 FC | 	wrlong	result1, fp
0d9a8     08 4E 05 F1 | 	add	fp, #8
0d9ac     A7 3C 68 FC | 	wrlong	#30, fp
0d9b0     08 4E 85 F1 | 	sub	fp, #8
0d9b4     B0 02 90 FD | 	jmp	#LR__1055
0d9b8                 | LR__1045
0d9b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0d9b8     08 4E 05 F1 | 	add	fp, #8
0d9bc     A7 1E 02 FB | 	rdlong	local01, fp
0d9c0     08 4E 85 F1 | 	sub	fp, #8
0d9c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d9c8     14 4E 05 A1 |  if_e	add	fp, #20
0d9cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0d9d0     14 4E 85 A1 |  if_e	sub	fp, #20
0d9d4     12 23 02 A6 |  if_e	mov	local03, local04
0d9d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d9dc     28 00 90 5D |  if_ne	jmp	#LR__1046
0d9e0     A7 1E 02 FB | 	rdlong	local01, fp
0d9e4     0C 4E 05 F1 | 	add	fp, #12
0d9e8     A7 12 02 FB | 	rdlong	arg01, fp
0d9ec     0C 4E 85 F1 | 	sub	fp, #12
0d9f0     CC DA B0 FD | 	call	#__system___float_fromuns
0d9f4     FD 14 02 F6 | 	mov	arg02, result1
0d9f8     0F 13 02 F6 | 	mov	arg01, local01
0d9fc     F4 DA B0 FD | 	call	#__system___float_add
0da00     A7 FA 61 FC | 	wrlong	result1, fp
0da04     60 02 90 FD | 	jmp	#LR__1055
0da08                 | LR__1046
0da08                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0da08     08 4E 05 F1 | 	add	fp, #8
0da0c     A7 1E 02 FB | 	rdlong	local01, fp
0da10     08 4E 85 F1 | 	sub	fp, #8
0da14     1E 1E 0E F2 | 	cmp	local01, #30 wz
0da18     14 4E 05 A1 |  if_e	add	fp, #20
0da1c     A7 24 02 AB |  if_e	rdlong	local04, fp
0da20     14 4E 85 A1 |  if_e	sub	fp, #20
0da24     12 23 02 A6 |  if_e	mov	local03, local04
0da28     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0da2c     38 00 90 5D |  if_ne	jmp	#LR__1047
0da30     A7 1E 02 FB | 	rdlong	local01, fp
0da34     0C 4E 05 F1 | 	add	fp, #12
0da38     A7 12 02 FB | 	rdlong	arg01, fp
0da3c     0C 4E 85 F1 | 	sub	fp, #12
0da40     09 13 52 F6 | 	abs	arg01, arg01 wc
0da44     1F 26 C6 C9 |  if_b	decod	local05, #31
0da48     00 26 06 36 |  if_ae	mov	local05, #0
0da4c     70 DA B0 FD | 	call	#__system___float_fromuns
0da50     13 FB 61 F5 | 	xor	result1, local05
0da54     FD 14 02 F6 | 	mov	arg02, result1
0da58     0F 13 02 F6 | 	mov	arg01, local01
0da5c     94 DA B0 FD | 	call	#__system___float_add
0da60     A7 FA 61 FC | 	wrlong	result1, fp
0da64     00 02 90 FD | 	jmp	#LR__1055
0da68                 | LR__1047
0da68                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0da68     08 4E 05 F1 | 	add	fp, #8
0da6c     A7 1E 02 FB | 	rdlong	local01, fp
0da70     08 4E 85 F1 | 	sub	fp, #8
0da74     1E 1E 0E F2 | 	cmp	local01, #30 wz
0da78     14 4E 05 A1 |  if_e	add	fp, #20
0da7c     A7 24 02 AB |  if_e	rdlong	local04, fp
0da80     14 4E 85 A1 |  if_e	sub	fp, #20
0da84     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0da88     1C 00 90 5D |  if_ne	jmp	#LR__1048
0da8c     A7 12 02 FB | 	rdlong	arg01, fp
0da90     0C 4E 05 F1 | 	add	fp, #12
0da94     A7 14 02 FB | 	rdlong	arg02, fp
0da98     0C 4E 85 F1 | 	sub	fp, #12
0da9c     54 DA B0 FD | 	call	#__system___float_add
0daa0     A7 FA 61 FC | 	wrlong	result1, fp
0daa4     C0 01 90 FD | 	jmp	#LR__1055
0daa8                 | LR__1048
0daa8                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0daa8     08 4E 05 F1 | 	add	fp, #8
0daac     A7 1E 02 FB | 	rdlong	local01, fp
0dab0     08 4E 85 F1 | 	sub	fp, #8
0dab4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0dab8     24 00 90 5D |  if_ne	jmp	#LR__1049
0dabc     14 4E 05 F1 | 	add	fp, #20
0dac0     A7 22 02 FB | 	rdlong	local03, fp
0dac4     14 4E 85 F1 | 	sub	fp, #20
0dac8     1F 22 0E F2 | 	cmp	local03, #31 wz
0dacc     A7 04 68 5C |  if_ne	wrlong	#2, fp
0dad0     08 4E 05 51 |  if_ne	add	fp, #8
0dad4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0dad8     08 4E 85 51 |  if_ne	sub	fp, #8
0dadc     88 01 90 5D |  if_ne	jmp	#LR__1055
0dae0                 | LR__1049
0dae0                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0dae0     14 4E 05 F1 | 	add	fp, #20
0dae4     A7 1E 02 FB | 	rdlong	local01, fp
0dae8     14 4E 85 F1 | 	sub	fp, #20
0daec     1F 1E 0E F2 | 	cmp	local01, #31 wz
0daf0     24 00 90 5D |  if_ne	jmp	#LR__1050
0daf4     08 4E 05 F1 | 	add	fp, #8
0daf8     A7 22 02 FB | 	rdlong	local03, fp
0dafc     08 4E 85 F1 | 	sub	fp, #8
0db00     1F 22 0E F2 | 	cmp	local03, #31 wz
0db04     A7 04 68 5C |  if_ne	wrlong	#2, fp
0db08     08 4E 05 51 |  if_ne	add	fp, #8
0db0c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0db10     08 4E 85 51 |  if_ne	sub	fp, #8
0db14     50 01 90 5D |  if_ne	jmp	#LR__1055
0db18                 | LR__1050
0db18                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0db18     08 4E 05 F1 | 	add	fp, #8
0db1c     A7 1E 02 FB | 	rdlong	local01, fp
0db20     08 4E 85 F1 | 	sub	fp, #8
0db24     1F 1E 0E F2 | 	cmp	local01, #31 wz
0db28     14 4E 05 A1 |  if_e	add	fp, #20
0db2c     A7 22 02 AB |  if_e	rdlong	local03, fp
0db30     14 4E 85 A1 |  if_e	sub	fp, #20
0db34     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0db38     1C 00 90 5D |  if_ne	jmp	#LR__1051
0db3c     A7 12 02 FB | 	rdlong	arg01, fp
0db40     0C 4E 05 F1 | 	add	fp, #12
0db44     A7 14 02 FB | 	rdlong	arg02, fp
0db48     0C 4E 85 F1 | 	sub	fp, #12
0db4c     E4 B2 B0 FD | 	call	#__system___string_concat
0db50     A7 FA 61 FC | 	wrlong	result1, fp
0db54     10 01 90 FD | 	jmp	#LR__1055
0db58                 | LR__1051
0db58                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0db58     08 4E 05 F1 | 	add	fp, #8
0db5c     A7 1E 02 FB | 	rdlong	local01, fp
0db60     08 4E 85 F1 | 	sub	fp, #8
0db64     2B 1E 0E F2 | 	cmp	local01, #43 wz
0db68     14 4E 05 A1 |  if_e	add	fp, #20
0db6c     A7 22 02 AB |  if_e	rdlong	local03, fp
0db70     14 4E 85 A1 |  if_e	sub	fp, #20
0db74     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0db78     30 00 90 5D |  if_ne	jmp	#LR__1052
0db7c     A7 12 02 FB | 	rdlong	arg01, fp
0db80     9C EE BF FD | 	call	#_convertstring
0db84     FD 12 02 F6 | 	mov	arg01, result1
0db88     0C 4E 05 F1 | 	add	fp, #12
0db8c     A7 14 02 FB | 	rdlong	arg02, fp
0db90     0C 4E 85 F1 | 	sub	fp, #12
0db94     9C B2 B0 FD | 	call	#__system___string_concat
0db98     A7 FA 61 FC | 	wrlong	result1, fp
0db9c     08 4E 05 F1 | 	add	fp, #8
0dba0     A7 3E 68 FC | 	wrlong	#31, fp
0dba4     08 4E 85 F1 | 	sub	fp, #8
0dba8     BC 00 90 FD | 	jmp	#LR__1055
0dbac                 | LR__1052
0dbac                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0dbac     08 4E 05 F1 | 	add	fp, #8
0dbb0     A7 1E 02 FB | 	rdlong	local01, fp
0dbb4     08 4E 85 F1 | 	sub	fp, #8
0dbb8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0dbbc     14 4E 05 A1 |  if_e	add	fp, #20
0dbc0     A7 22 02 AB |  if_e	rdlong	local03, fp
0dbc4     14 4E 85 A1 |  if_e	sub	fp, #20
0dbc8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0dbcc     28 00 90 5D |  if_ne	jmp	#LR__1053
0dbd0     A7 1E 02 FB | 	rdlong	local01, fp
0dbd4     0C 4E 05 F1 | 	add	fp, #12
0dbd8     A7 12 02 FB | 	rdlong	arg01, fp
0dbdc     0C 4E 85 F1 | 	sub	fp, #12
0dbe0     3C EE BF FD | 	call	#_convertstring
0dbe4     FD 14 02 F6 | 	mov	arg02, result1
0dbe8     0F 13 02 F6 | 	mov	arg01, local01
0dbec     44 B2 B0 FD | 	call	#__system___string_concat
0dbf0     A7 FA 61 FC | 	wrlong	result1, fp
0dbf4     70 00 90 FD | 	jmp	#LR__1055
0dbf8                 | LR__1053
0dbf8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0dbf8     08 4E 05 F1 | 	add	fp, #8
0dbfc     A7 1E 02 FB | 	rdlong	local01, fp
0dc00     08 4E 85 F1 | 	sub	fp, #8
0dc04     2B 1E 0E F2 | 	cmp	local01, #43 wz
0dc08     14 4E 05 A1 |  if_e	add	fp, #20
0dc0c     A7 22 02 AB |  if_e	rdlong	local03, fp
0dc10     14 4E 85 A1 |  if_e	sub	fp, #20
0dc14     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0dc18     3C 00 90 5D |  if_ne	jmp	#LR__1054
0dc1c     A7 12 02 FB | 	rdlong	arg01, fp
0dc20     FC ED BF FD | 	call	#_convertstring
0dc24     FD 1E 02 F6 | 	mov	local01, result1
0dc28     0C 4E 05 F1 | 	add	fp, #12
0dc2c     A7 12 02 FB | 	rdlong	arg01, fp
0dc30     0C 4E 85 F1 | 	sub	fp, #12
0dc34     E8 ED BF FD | 	call	#_convertstring
0dc38     FD 14 02 F6 | 	mov	arg02, result1
0dc3c     0F 13 02 F6 | 	mov	arg01, local01
0dc40     F0 B1 B0 FD | 	call	#__system___string_concat
0dc44     A7 FA 61 FC | 	wrlong	result1, fp
0dc48     08 4E 05 F1 | 	add	fp, #8
0dc4c     A7 3E 68 FC | 	wrlong	#31, fp
0dc50     08 4E 85 F1 | 	sub	fp, #8
0dc54     10 00 90 FD | 	jmp	#LR__1055
0dc58                 | LR__1054
0dc58     A7 08 68 FC | 	wrlong	#4, fp
0dc5c     08 4E 05 F1 | 	add	fp, #8
0dc60     A7 FE 69 FC | 	wrlong	#255, fp
0dc64     08 4E 85 F1 | 	sub	fp, #8
0dc68                 | LR__1055
0dc68     A7 12 02 F6 | 	mov	arg01, fp
0dc6c     0C BD BF FD | 	call	#_push
0dc70     A7 F0 03 F6 | 	mov	ptra, fp
0dc74     B2 00 A0 FD | 	call	#popregs_
0dc78                 | _do_plus_ret
0dc78     2D 00 64 FD | 	ret
0dc7c                 | 
0dc7c                 | ' 
0dc7c                 | ' sub do_minus
0dc7c                 | _do_minus
0dc7c     05 4A 05 F6 | 	mov	COUNT_, #5
0dc80     A8 00 A0 FD | 	call	#pushregs_
0dc84     18 F0 07 F1 | 	add	ptra, #24
0dc88     58 BC BF FD | 	call	#_pop
0dc8c     FD 1E 02 F6 | 	mov	local01, result1
0dc90     FE 20 02 F6 | 	mov	local02, result2
0dc94     FF 22 02 F6 | 	mov	local03, result3
0dc98     0C 4E 05 F1 | 	add	fp, #12
0dc9c     A7 1E 62 FC | 	wrlong	local01, fp
0dca0     04 4E 05 F1 | 	add	fp, #4
0dca4     A7 20 62 FC | 	wrlong	local02, fp
0dca8     04 4E 05 F1 | 	add	fp, #4
0dcac     A7 22 62 FC | 	wrlong	local03, fp
0dcb0     14 4E 85 F1 | 	sub	fp, #20
0dcb4     2C BC BF FD | 	call	#_pop
0dcb8     FF 22 02 F6 | 	mov	local03, result3
0dcbc     A7 FA 61 FC | 	wrlong	result1, fp
0dcc0     04 4E 05 F1 | 	add	fp, #4
0dcc4     A7 FC 61 FC | 	wrlong	result2, fp
0dcc8     04 4E 05 F1 | 	add	fp, #4
0dccc     A7 22 62 FC | 	wrlong	local03, fp
0dcd0                 | ' 
0dcd0                 | ' t2=pop()
0dcd0                 | ' t1=pop()
0dcd0                 | ' 
0dcd0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0dcd0     08 4E 85 F1 | 	sub	fp, #8
0dcd4     1D 22 0E F2 | 	cmp	local03, #29 wz
0dcd8     14 4E 05 A1 |  if_e	add	fp, #20
0dcdc     A7 24 02 AB |  if_e	rdlong	local04, fp
0dce0     14 4E 85 A1 |  if_e	sub	fp, #20
0dce4     12 23 02 A6 |  if_e	mov	local03, local04
0dce8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dcec     5C 00 90 5D |  if_ne	jmp	#LR__1061
0dcf0                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0dcf0     0C 4E 05 F1 | 	add	fp, #12
0dcf4     A7 1E 02 FB | 	rdlong	local01, fp
0dcf8     0C 4E 85 F1 | 	sub	fp, #12
0dcfc     A7 22 02 FB | 	rdlong	local03, fp
0dd00     11 1F 12 F2 | 	cmp	local01, local03 wc
0dd04     1C 00 90 3D |  if_ae	jmp	#LR__1060
0dd08     A7 1E 02 FB | 	rdlong	local01, fp
0dd0c     0C 4E 05 F1 | 	add	fp, #12
0dd10     A7 20 02 FB | 	rdlong	local02, fp
0dd14     0C 4E 85 F1 | 	sub	fp, #12
0dd18     10 1F 82 F1 | 	sub	local01, local02
0dd1c     A7 1E 62 FC | 	wrlong	local01, fp
0dd20     F4 02 90 FD | 	jmp	#LR__1070
0dd24                 | LR__1060
0dd24     A7 1E 02 FB | 	rdlong	local01, fp
0dd28     0C 4E 05 F1 | 	add	fp, #12
0dd2c     A7 20 02 FB | 	rdlong	local02, fp
0dd30     0C 4E 85 F1 | 	sub	fp, #12
0dd34     10 1F 82 F1 | 	sub	local01, local02
0dd38     A7 1E 62 FC | 	wrlong	local01, fp
0dd3c     08 4E 05 F1 | 	add	fp, #8
0dd40     A7 38 68 FC | 	wrlong	#28, fp
0dd44     08 4E 85 F1 | 	sub	fp, #8
0dd48     CC 02 90 FD | 	jmp	#LR__1070
0dd4c                 | LR__1061
0dd4c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0dd4c     08 4E 05 F1 | 	add	fp, #8
0dd50     A7 1E 02 FB | 	rdlong	local01, fp
0dd54     08 4E 85 F1 | 	sub	fp, #8
0dd58     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dd5c     14 4E 05 A1 |  if_e	add	fp, #20
0dd60     A7 24 02 AB |  if_e	rdlong	local04, fp
0dd64     14 4E 85 A1 |  if_e	sub	fp, #20
0dd68     12 23 02 A6 |  if_e	mov	local03, local04
0dd6c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dd70     28 00 90 5D |  if_ne	jmp	#LR__1062
0dd74     A7 1E 02 FB | 	rdlong	local01, fp
0dd78     0C 4E 05 F1 | 	add	fp, #12
0dd7c     A7 20 02 FB | 	rdlong	local02, fp
0dd80     0C 4E 85 F1 | 	sub	fp, #12
0dd84     10 1F 82 F1 | 	sub	local01, local02
0dd88     A7 1E 62 FC | 	wrlong	local01, fp
0dd8c     08 4E 05 F1 | 	add	fp, #8
0dd90     A7 38 68 FC | 	wrlong	#28, fp
0dd94     08 4E 85 F1 | 	sub	fp, #8
0dd98     7C 02 90 FD | 	jmp	#LR__1070
0dd9c                 | LR__1062
0dd9c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0dd9c     08 4E 05 F1 | 	add	fp, #8
0dda0     A7 1E 02 FB | 	rdlong	local01, fp
0dda4     08 4E 85 F1 | 	sub	fp, #8
0dda8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ddac     14 4E 05 A1 |  if_e	add	fp, #20
0ddb0     A7 24 02 AB |  if_e	rdlong	local04, fp
0ddb4     14 4E 85 A1 |  if_e	sub	fp, #20
0ddb8     12 23 02 A6 |  if_e	mov	local03, local04
0ddbc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ddc0     34 00 90 5D |  if_ne	jmp	#LR__1063
0ddc4     A7 12 02 FB | 	rdlong	arg01, fp
0ddc8     F4 D6 B0 FD | 	call	#__system___float_fromuns
0ddcc     FD 12 02 F6 | 	mov	arg01, result1
0ddd0     0C 4E 05 F1 | 	add	fp, #12
0ddd4     A7 14 02 FB | 	rdlong	arg02, fp
0ddd8     0C 4E 85 F1 | 	sub	fp, #12
0dddc     1F 14 E6 F4 | 	bitnot	arg02, #31
0dde0     10 D7 B0 FD | 	call	#__system___float_add
0dde4     A7 FA 61 FC | 	wrlong	result1, fp
0dde8     08 4E 05 F1 | 	add	fp, #8
0ddec     A7 3C 68 FC | 	wrlong	#30, fp
0ddf0     08 4E 85 F1 | 	sub	fp, #8
0ddf4     20 02 90 FD | 	jmp	#LR__1070
0ddf8                 | LR__1063
0ddf8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0ddf8     08 4E 05 F1 | 	add	fp, #8
0ddfc     A7 1E 02 FB | 	rdlong	local01, fp
0de00     08 4E 85 F1 | 	sub	fp, #8
0de04     1C 1E 0E F2 | 	cmp	local01, #28 wz
0de08     14 4E 05 A1 |  if_e	add	fp, #20
0de0c     A7 24 02 AB |  if_e	rdlong	local04, fp
0de10     14 4E 85 A1 |  if_e	sub	fp, #20
0de14     12 23 02 A6 |  if_e	mov	local03, local04
0de18     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0de1c     1C 00 90 5D |  if_ne	jmp	#LR__1064
0de20     A7 1E 02 FB | 	rdlong	local01, fp
0de24     0C 4E 05 F1 | 	add	fp, #12
0de28     A7 20 02 FB | 	rdlong	local02, fp
0de2c     0C 4E 85 F1 | 	sub	fp, #12
0de30     10 1F 82 F1 | 	sub	local01, local02
0de34     A7 1E 62 FC | 	wrlong	local01, fp
0de38     DC 01 90 FD | 	jmp	#LR__1070
0de3c                 | LR__1064
0de3c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0de3c     08 4E 05 F1 | 	add	fp, #8
0de40     A7 1E 02 FB | 	rdlong	local01, fp
0de44     08 4E 85 F1 | 	sub	fp, #8
0de48     1C 1E 0E F2 | 	cmp	local01, #28 wz
0de4c     14 4E 05 A1 |  if_e	add	fp, #20
0de50     A7 24 02 AB |  if_e	rdlong	local04, fp
0de54     14 4E 85 A1 |  if_e	sub	fp, #20
0de58     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0de5c     1C 00 90 5D |  if_ne	jmp	#LR__1065
0de60     A7 1E 02 FB | 	rdlong	local01, fp
0de64     0C 4E 05 F1 | 	add	fp, #12
0de68     A7 20 02 FB | 	rdlong	local02, fp
0de6c     0C 4E 85 F1 | 	sub	fp, #12
0de70     10 1F 82 F1 | 	sub	local01, local02
0de74     A7 1E 62 FC | 	wrlong	local01, fp
0de78     9C 01 90 FD | 	jmp	#LR__1070
0de7c                 | LR__1065
0de7c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0de7c     08 4E 05 F1 | 	add	fp, #8
0de80     A7 1E 02 FB | 	rdlong	local01, fp
0de84     08 4E 85 F1 | 	sub	fp, #8
0de88     1C 1E 0E F2 | 	cmp	local01, #28 wz
0de8c     14 4E 05 A1 |  if_e	add	fp, #20
0de90     A7 22 02 AB |  if_e	rdlong	local03, fp
0de94     14 4E 85 A1 |  if_e	sub	fp, #20
0de98     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0de9c     44 00 90 5D |  if_ne	jmp	#LR__1066
0dea0     A7 12 02 FB | 	rdlong	arg01, fp
0dea4     09 13 52 F6 | 	abs	arg01, arg01 wc
0dea8     1F 26 C6 C9 |  if_b	decod	local05, #31
0deac     00 26 06 36 |  if_ae	mov	local05, #0
0deb0     0C D6 B0 FD | 	call	#__system___float_fromuns
0deb4     13 FB 61 F5 | 	xor	result1, local05
0deb8     FD 12 02 F6 | 	mov	arg01, result1
0debc     0C 4E 05 F1 | 	add	fp, #12
0dec0     A7 14 02 FB | 	rdlong	arg02, fp
0dec4     0C 4E 85 F1 | 	sub	fp, #12
0dec8     1F 14 E6 F4 | 	bitnot	arg02, #31
0decc     24 D6 B0 FD | 	call	#__system___float_add
0ded0     A7 FA 61 FC | 	wrlong	result1, fp
0ded4     08 4E 05 F1 | 	add	fp, #8
0ded8     A7 3C 68 FC | 	wrlong	#30, fp
0dedc     08 4E 85 F1 | 	sub	fp, #8
0dee0     34 01 90 FD | 	jmp	#LR__1070
0dee4                 | LR__1066
0dee4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0dee4     08 4E 05 F1 | 	add	fp, #8
0dee8     A7 1E 02 FB | 	rdlong	local01, fp
0deec     08 4E 85 F1 | 	sub	fp, #8
0def0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0def4     14 4E 05 A1 |  if_e	add	fp, #20
0def8     A7 22 02 AB |  if_e	rdlong	local03, fp
0defc     14 4E 85 A1 |  if_e	sub	fp, #20
0df00     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0df04     2C 00 90 5D |  if_ne	jmp	#LR__1067
0df08     A7 1E 02 FB | 	rdlong	local01, fp
0df0c     0C 4E 05 F1 | 	add	fp, #12
0df10     A7 12 02 FB | 	rdlong	arg01, fp
0df14     0C 4E 85 F1 | 	sub	fp, #12
0df18     A4 D5 B0 FD | 	call	#__system___float_fromuns
0df1c     FD 14 02 F6 | 	mov	arg02, result1
0df20     0F 13 02 F6 | 	mov	arg01, local01
0df24     1F 14 E6 F4 | 	bitnot	arg02, #31
0df28     C8 D5 B0 FD | 	call	#__system___float_add
0df2c     A7 FA 61 FC | 	wrlong	result1, fp
0df30     E4 00 90 FD | 	jmp	#LR__1070
0df34                 | LR__1067
0df34                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0df34     08 4E 05 F1 | 	add	fp, #8
0df38     A7 1E 02 FB | 	rdlong	local01, fp
0df3c     08 4E 85 F1 | 	sub	fp, #8
0df40     1E 1E 0E F2 | 	cmp	local01, #30 wz
0df44     14 4E 05 A1 |  if_e	add	fp, #20
0df48     A7 22 02 AB |  if_e	rdlong	local03, fp
0df4c     14 4E 85 A1 |  if_e	sub	fp, #20
0df50     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0df54     3C 00 90 5D |  if_ne	jmp	#LR__1068
0df58     A7 1E 02 FB | 	rdlong	local01, fp
0df5c     0C 4E 05 F1 | 	add	fp, #12
0df60     A7 12 02 FB | 	rdlong	arg01, fp
0df64     0C 4E 85 F1 | 	sub	fp, #12
0df68     09 13 52 F6 | 	abs	arg01, arg01 wc
0df6c     1F 26 C6 C9 |  if_b	decod	local05, #31
0df70     00 26 06 36 |  if_ae	mov	local05, #0
0df74     48 D5 B0 FD | 	call	#__system___float_fromuns
0df78     13 FB 61 F5 | 	xor	result1, local05
0df7c     FD 14 02 F6 | 	mov	arg02, result1
0df80     0F 13 02 F6 | 	mov	arg01, local01
0df84     1F 14 E6 F4 | 	bitnot	arg02, #31
0df88     68 D5 B0 FD | 	call	#__system___float_add
0df8c     A7 FA 61 FC | 	wrlong	result1, fp
0df90     84 00 90 FD | 	jmp	#LR__1070
0df94                 | LR__1068
0df94                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0df94     08 4E 05 F1 | 	add	fp, #8
0df98     A7 1E 02 FB | 	rdlong	local01, fp
0df9c     08 4E 85 F1 | 	sub	fp, #8
0dfa0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dfa4     14 4E 05 A1 |  if_e	add	fp, #20
0dfa8     A7 22 02 AB |  if_e	rdlong	local03, fp
0dfac     14 4E 85 A1 |  if_e	sub	fp, #20
0dfb0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dfb4     20 00 90 5D |  if_ne	jmp	#LR__1069
0dfb8     A7 12 02 FB | 	rdlong	arg01, fp
0dfbc     0C 4E 05 F1 | 	add	fp, #12
0dfc0     A7 14 02 FB | 	rdlong	arg02, fp
0dfc4     0C 4E 85 F1 | 	sub	fp, #12
0dfc8     1F 14 E6 F4 | 	bitnot	arg02, #31
0dfcc     24 D5 B0 FD | 	call	#__system___float_add
0dfd0     A7 FA 61 FC | 	wrlong	result1, fp
0dfd4     40 00 90 FD | 	jmp	#LR__1070
0dfd8                 | LR__1069
0dfd8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0dfd8     08 4E 05 F1 | 	add	fp, #8
0dfdc     A7 1E 02 FB | 	rdlong	local01, fp
0dfe0     08 4E 85 F1 | 	sub	fp, #8
0dfe4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0dfe8     14 4E 05 51 |  if_ne	add	fp, #20
0dfec     A7 22 02 5B |  if_ne	rdlong	local03, fp
0dff0     14 4E 85 51 |  if_ne	sub	fp, #20
0dff4     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0dff8     A7 06 68 AC |  if_e	wrlong	#3, fp
0dffc     08 4E 05 A1 |  if_e	add	fp, #8
0e000     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e004     08 4E 85 A1 |  if_e	sub	fp, #8
0e008     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0e00c     08 4E 05 51 |  if_ne	add	fp, #8
0e010     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0e014     08 4E 85 51 |  if_ne	sub	fp, #8
0e018                 | LR__1070
0e018     A7 12 02 F6 | 	mov	arg01, fp
0e01c     5C B9 BF FD | 	call	#_push
0e020     A7 F0 03 F6 | 	mov	ptra, fp
0e024     B2 00 A0 FD | 	call	#popregs_
0e028                 | _do_minus_ret
0e028     2D 00 64 FD | 	ret
0e02c                 | 
0e02c                 | ' 
0e02c                 | ' sub do_and 
0e02c                 | _do_and
0e02c     03 4A 05 F6 | 	mov	COUNT_, #3
0e030     A8 00 A0 FD | 	call	#pushregs_
0e034     18 F0 07 F1 | 	add	ptra, #24
0e038     A8 B8 BF FD | 	call	#_pop
0e03c     FD 12 02 F6 | 	mov	arg01, result1
0e040     FE 1E 02 F6 | 	mov	local01, result2
0e044     FF 20 02 F6 | 	mov	local02, result3
0e048     0C 4E 05 F1 | 	add	fp, #12
0e04c     A7 12 62 FC | 	wrlong	arg01, fp
0e050     04 4E 05 F1 | 	add	fp, #4
0e054     A7 1E 62 FC | 	wrlong	local01, fp
0e058     04 4E 05 F1 | 	add	fp, #4
0e05c     A7 20 62 FC | 	wrlong	local02, fp
0e060     14 4E 85 F1 | 	sub	fp, #20
0e064     7C B8 BF FD | 	call	#_pop
0e068     FF 22 02 F6 | 	mov	local03, result3
0e06c     A7 FA 61 FC | 	wrlong	result1, fp
0e070     04 4E 05 F1 | 	add	fp, #4
0e074     A7 FC 61 FC | 	wrlong	result2, fp
0e078     04 4E 05 F1 | 	add	fp, #4
0e07c     A7 22 62 FC | 	wrlong	local03, fp
0e080                 | ' 
0e080                 | ' t2=pop()
0e080                 | ' t1=pop()
0e080                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0e080     08 4E 85 F1 | 	sub	fp, #8
0e084     1C 22 0E F2 | 	cmp	local03, #28 wz
0e088     A7 22 02 AB |  if_e	rdlong	local03, fp
0e08c     A7 22 62 AC |  if_e	wrlong	local03, fp
0e090     08 4E 05 A1 |  if_e	add	fp, #8
0e094     A7 3A 68 AC |  if_e	wrlong	#29, fp
0e098     08 4E 85 A1 |  if_e	sub	fp, #8
0e09c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0e09c     14 4E 05 F1 | 	add	fp, #20
0e0a0     A7 22 02 FB | 	rdlong	local03, fp
0e0a4     14 4E 85 F1 | 	sub	fp, #20
0e0a8     1C 22 0E F2 | 	cmp	local03, #28 wz
0e0ac     18 00 90 5D |  if_ne	jmp	#LR__1080
0e0b0     0C 4E 05 F1 | 	add	fp, #12
0e0b4     A7 22 02 FB | 	rdlong	local03, fp
0e0b8     A7 22 62 FC | 	wrlong	local03, fp
0e0bc     08 4E 05 F1 | 	add	fp, #8
0e0c0     A7 3A 68 FC | 	wrlong	#29, fp
0e0c4     14 4E 85 F1 | 	sub	fp, #20
0e0c8                 | LR__1080
0e0c8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0e0c8     08 4E 05 F1 | 	add	fp, #8
0e0cc     A7 22 02 FB | 	rdlong	local03, fp
0e0d0     08 4E 85 F1 | 	sub	fp, #8
0e0d4     1F 22 0E F2 | 	cmp	local03, #31 wz
0e0d8     14 4E 05 51 |  if_ne	add	fp, #20
0e0dc     A7 20 02 5B |  if_ne	rdlong	local02, fp
0e0e0     14 4E 85 51 |  if_ne	sub	fp, #20
0e0e4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0e0e8     08 4E 05 51 |  if_ne	add	fp, #8
0e0ec     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e0f0     08 4E 85 51 |  if_ne	sub	fp, #8
0e0f4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0e0f8     14 4E 05 51 |  if_ne	add	fp, #20
0e0fc     14 4E 85 51 |  if_ne	sub	fp, #20
0e100     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0e104     A7 0C 68 AC |  if_e	wrlong	#6, fp
0e108     08 4E 05 A1 |  if_e	add	fp, #8
0e10c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e110     08 4E 85 A1 |  if_e	sub	fp, #8
0e114     18 00 90 AD |  if_e	jmp	#LR__1081
0e118     A7 22 02 FB | 	rdlong	local03, fp
0e11c     0C 4E 05 F1 | 	add	fp, #12
0e120     A7 1E 02 FB | 	rdlong	local01, fp
0e124     0C 4E 85 F1 | 	sub	fp, #12
0e128     0F 23 02 F5 | 	and	local03, local01
0e12c     A7 22 62 FC | 	wrlong	local03, fp
0e130                 | LR__1081
0e130     A7 12 02 F6 | 	mov	arg01, fp
0e134     44 B8 BF FD | 	call	#_push
0e138     A7 F0 03 F6 | 	mov	ptra, fp
0e13c     B2 00 A0 FD | 	call	#popregs_
0e140                 | _do_and_ret
0e140     2D 00 64 FD | 	ret
0e144                 | 
0e144                 | ' 
0e144                 | ' sub do_or 
0e144                 | _do_or
0e144     03 4A 05 F6 | 	mov	COUNT_, #3
0e148     A8 00 A0 FD | 	call	#pushregs_
0e14c     18 F0 07 F1 | 	add	ptra, #24
0e150     90 B7 BF FD | 	call	#_pop
0e154     FD 12 02 F6 | 	mov	arg01, result1
0e158     FE 1E 02 F6 | 	mov	local01, result2
0e15c     FF 20 02 F6 | 	mov	local02, result3
0e160     0C 4E 05 F1 | 	add	fp, #12
0e164     A7 12 62 FC | 	wrlong	arg01, fp
0e168     04 4E 05 F1 | 	add	fp, #4
0e16c     A7 1E 62 FC | 	wrlong	local01, fp
0e170     04 4E 05 F1 | 	add	fp, #4
0e174     A7 20 62 FC | 	wrlong	local02, fp
0e178     14 4E 85 F1 | 	sub	fp, #20
0e17c     64 B7 BF FD | 	call	#_pop
0e180     FF 22 02 F6 | 	mov	local03, result3
0e184     A7 FA 61 FC | 	wrlong	result1, fp
0e188     04 4E 05 F1 | 	add	fp, #4
0e18c     A7 FC 61 FC | 	wrlong	result2, fp
0e190     04 4E 05 F1 | 	add	fp, #4
0e194     A7 22 62 FC | 	wrlong	local03, fp
0e198                 | ' 
0e198                 | ' t2=pop()
0e198                 | ' t1=pop()
0e198                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0e198     08 4E 85 F1 | 	sub	fp, #8
0e19c     1C 22 0E F2 | 	cmp	local03, #28 wz
0e1a0     A7 22 02 AB |  if_e	rdlong	local03, fp
0e1a4     A7 22 62 AC |  if_e	wrlong	local03, fp
0e1a8     08 4E 05 A1 |  if_e	add	fp, #8
0e1ac     A7 3A 68 AC |  if_e	wrlong	#29, fp
0e1b0     08 4E 85 A1 |  if_e	sub	fp, #8
0e1b4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0e1b4     14 4E 05 F1 | 	add	fp, #20
0e1b8     A7 22 02 FB | 	rdlong	local03, fp
0e1bc     14 4E 85 F1 | 	sub	fp, #20
0e1c0     1C 22 0E F2 | 	cmp	local03, #28 wz
0e1c4     18 00 90 5D |  if_ne	jmp	#LR__1090
0e1c8     0C 4E 05 F1 | 	add	fp, #12
0e1cc     A7 22 02 FB | 	rdlong	local03, fp
0e1d0     A7 22 62 FC | 	wrlong	local03, fp
0e1d4     08 4E 05 F1 | 	add	fp, #8
0e1d8     A7 3A 68 FC | 	wrlong	#29, fp
0e1dc     14 4E 85 F1 | 	sub	fp, #20
0e1e0                 | LR__1090
0e1e0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0e1e0     08 4E 05 F1 | 	add	fp, #8
0e1e4     A7 22 02 FB | 	rdlong	local03, fp
0e1e8     08 4E 85 F1 | 	sub	fp, #8
0e1ec     1F 22 0E F2 | 	cmp	local03, #31 wz
0e1f0     14 4E 05 51 |  if_ne	add	fp, #20
0e1f4     A7 20 02 5B |  if_ne	rdlong	local02, fp
0e1f8     14 4E 85 51 |  if_ne	sub	fp, #20
0e1fc     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0e200     08 4E 05 51 |  if_ne	add	fp, #8
0e204     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e208     08 4E 85 51 |  if_ne	sub	fp, #8
0e20c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0e210     14 4E 05 51 |  if_ne	add	fp, #20
0e214     14 4E 85 51 |  if_ne	sub	fp, #20
0e218     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0e21c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0e220     08 4E 05 A1 |  if_e	add	fp, #8
0e224     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e228     08 4E 85 A1 |  if_e	sub	fp, #8
0e22c     18 00 90 AD |  if_e	jmp	#LR__1091
0e230     A7 22 02 FB | 	rdlong	local03, fp
0e234     0C 4E 05 F1 | 	add	fp, #12
0e238     A7 1E 02 FB | 	rdlong	local01, fp
0e23c     0C 4E 85 F1 | 	sub	fp, #12
0e240     0F 23 42 F5 | 	or	local03, local01
0e244     A7 22 62 FC | 	wrlong	local03, fp
0e248                 | LR__1091
0e248     A7 12 02 F6 | 	mov	arg01, fp
0e24c     2C B7 BF FD | 	call	#_push
0e250     A7 F0 03 F6 | 	mov	ptra, fp
0e254     B2 00 A0 FD | 	call	#popregs_
0e258                 | _do_or_ret
0e258     2D 00 64 FD | 	ret
0e25c                 | 
0e25c                 | ' 
0e25c                 | ' sub do_mul
0e25c                 | _do_mul
0e25c     05 4A 05 F6 | 	mov	COUNT_, #5
0e260     A8 00 A0 FD | 	call	#pushregs_
0e264     18 F0 07 F1 | 	add	ptra, #24
0e268     78 B6 BF FD | 	call	#_pop
0e26c     FD 1E 02 F6 | 	mov	local01, result1
0e270     FE 20 02 F6 | 	mov	local02, result2
0e274     FF 22 02 F6 | 	mov	local03, result3
0e278     0C 4E 05 F1 | 	add	fp, #12
0e27c     A7 1E 62 FC | 	wrlong	local01, fp
0e280     04 4E 05 F1 | 	add	fp, #4
0e284     A7 20 62 FC | 	wrlong	local02, fp
0e288     04 4E 05 F1 | 	add	fp, #4
0e28c     A7 22 62 FC | 	wrlong	local03, fp
0e290     14 4E 85 F1 | 	sub	fp, #20
0e294     4C B6 BF FD | 	call	#_pop
0e298     FF 22 02 F6 | 	mov	local03, result3
0e29c     A7 FA 61 FC | 	wrlong	result1, fp
0e2a0     04 4E 05 F1 | 	add	fp, #4
0e2a4     A7 FC 61 FC | 	wrlong	result2, fp
0e2a8     04 4E 05 F1 | 	add	fp, #4
0e2ac     A7 22 62 FC | 	wrlong	local03, fp
0e2b0                 | ' 
0e2b0                 | ' t2=pop()
0e2b0                 | ' t1=pop()
0e2b0                 | ' 
0e2b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0e2b0     08 4E 85 F1 | 	sub	fp, #8
0e2b4     1D 22 0E F2 | 	cmp	local03, #29 wz
0e2b8     14 4E 05 A1 |  if_e	add	fp, #20
0e2bc     A7 24 02 AB |  if_e	rdlong	local04, fp
0e2c0     14 4E 85 A1 |  if_e	sub	fp, #20
0e2c4     12 23 02 A6 |  if_e	mov	local03, local04
0e2c8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e2cc     20 00 90 5D |  if_ne	jmp	#LR__1100
0e2d0     A7 20 02 FB | 	rdlong	local02, fp
0e2d4     0C 4E 05 F1 | 	add	fp, #12
0e2d8     A7 22 02 FB | 	rdlong	local03, fp
0e2dc     11 21 02 FD | 	qmul	local02, local03
0e2e0     0C 4E 85 F1 | 	sub	fp, #12
0e2e4     18 1E 62 FD | 	getqx	local01
0e2e8     A7 1E 62 FC | 	wrlong	local01, fp
0e2ec     C4 02 90 FD | 	jmp	#LR__1109
0e2f0                 | LR__1100
0e2f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0e2f0     08 4E 05 F1 | 	add	fp, #8
0e2f4     A7 1E 02 FB | 	rdlong	local01, fp
0e2f8     08 4E 85 F1 | 	sub	fp, #8
0e2fc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e300     14 4E 05 A1 |  if_e	add	fp, #20
0e304     A7 24 02 AB |  if_e	rdlong	local04, fp
0e308     14 4E 85 A1 |  if_e	sub	fp, #20
0e30c     12 23 02 A6 |  if_e	mov	local03, local04
0e310     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e314     2C 00 90 5D |  if_ne	jmp	#LR__1101
0e318     A7 20 02 FB | 	rdlong	local02, fp
0e31c     0C 4E 05 F1 | 	add	fp, #12
0e320     A7 22 02 FB | 	rdlong	local03, fp
0e324     11 21 02 FD | 	qmul	local02, local03
0e328     0C 4E 85 F1 | 	sub	fp, #12
0e32c     18 1E 62 FD | 	getqx	local01
0e330     A7 1E 62 FC | 	wrlong	local01, fp
0e334     08 4E 05 F1 | 	add	fp, #8
0e338     A7 38 68 FC | 	wrlong	#28, fp
0e33c     08 4E 85 F1 | 	sub	fp, #8
0e340     70 02 90 FD | 	jmp	#LR__1109
0e344                 | LR__1101
0e344                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0e344     08 4E 05 F1 | 	add	fp, #8
0e348     A7 1E 02 FB | 	rdlong	local01, fp
0e34c     08 4E 85 F1 | 	sub	fp, #8
0e350     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e354     14 4E 05 A1 |  if_e	add	fp, #20
0e358     A7 24 02 AB |  if_e	rdlong	local04, fp
0e35c     14 4E 85 A1 |  if_e	sub	fp, #20
0e360     12 23 02 A6 |  if_e	mov	local03, local04
0e364     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e368     30 00 90 5D |  if_ne	jmp	#LR__1102
0e36c     A7 12 02 FB | 	rdlong	arg01, fp
0e370     4C D1 B0 FD | 	call	#__system___float_fromuns
0e374     FD 12 02 F6 | 	mov	arg01, result1
0e378     0C 4E 05 F1 | 	add	fp, #12
0e37c     A7 14 02 FB | 	rdlong	arg02, fp
0e380     0C 4E 85 F1 | 	sub	fp, #12
0e384     3C D5 B0 FD | 	call	#__system___float_mul
0e388     A7 FA 61 FC | 	wrlong	result1, fp
0e38c     08 4E 05 F1 | 	add	fp, #8
0e390     A7 3C 68 FC | 	wrlong	#30, fp
0e394     08 4E 85 F1 | 	sub	fp, #8
0e398     18 02 90 FD | 	jmp	#LR__1109
0e39c                 | LR__1102
0e39c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0e39c     08 4E 05 F1 | 	add	fp, #8
0e3a0     A7 1E 02 FB | 	rdlong	local01, fp
0e3a4     08 4E 85 F1 | 	sub	fp, #8
0e3a8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e3ac     14 4E 05 A1 |  if_e	add	fp, #20
0e3b0     A7 24 02 AB |  if_e	rdlong	local04, fp
0e3b4     14 4E 85 A1 |  if_e	sub	fp, #20
0e3b8     12 23 02 A6 |  if_e	mov	local03, local04
0e3bc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e3c0     20 00 90 5D |  if_ne	jmp	#LR__1103
0e3c4     A7 20 02 FB | 	rdlong	local02, fp
0e3c8     0C 4E 05 F1 | 	add	fp, #12
0e3cc     A7 22 02 FB | 	rdlong	local03, fp
0e3d0     11 21 02 FD | 	qmul	local02, local03
0e3d4     0C 4E 85 F1 | 	sub	fp, #12
0e3d8     18 1E 62 FD | 	getqx	local01
0e3dc     A7 1E 62 FC | 	wrlong	local01, fp
0e3e0     D0 01 90 FD | 	jmp	#LR__1109
0e3e4                 | LR__1103
0e3e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0e3e4     08 4E 05 F1 | 	add	fp, #8
0e3e8     A7 1E 02 FB | 	rdlong	local01, fp
0e3ec     08 4E 85 F1 | 	sub	fp, #8
0e3f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e3f4     14 4E 05 A1 |  if_e	add	fp, #20
0e3f8     A7 24 02 AB |  if_e	rdlong	local04, fp
0e3fc     14 4E 85 A1 |  if_e	sub	fp, #20
0e400     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0e404     20 00 90 5D |  if_ne	jmp	#LR__1104
0e408     A7 20 02 FB | 	rdlong	local02, fp
0e40c     0C 4E 05 F1 | 	add	fp, #12
0e410     A7 22 02 FB | 	rdlong	local03, fp
0e414     11 21 02 FD | 	qmul	local02, local03
0e418     0C 4E 85 F1 | 	sub	fp, #12
0e41c     18 1E 62 FD | 	getqx	local01
0e420     A7 1E 62 FC | 	wrlong	local01, fp
0e424     8C 01 90 FD | 	jmp	#LR__1109
0e428                 | LR__1104
0e428                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0e428     08 4E 05 F1 | 	add	fp, #8
0e42c     A7 1E 02 FB | 	rdlong	local01, fp
0e430     08 4E 85 F1 | 	sub	fp, #8
0e434     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e438     14 4E 05 A1 |  if_e	add	fp, #20
0e43c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e440     14 4E 85 A1 |  if_e	sub	fp, #20
0e444     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e448     40 00 90 5D |  if_ne	jmp	#LR__1105
0e44c     A7 12 02 FB | 	rdlong	arg01, fp
0e450     09 13 52 F6 | 	abs	arg01, arg01 wc
0e454     1F 26 C6 C9 |  if_b	decod	local05, #31
0e458     00 26 06 36 |  if_ae	mov	local05, #0
0e45c     60 D0 B0 FD | 	call	#__system___float_fromuns
0e460     13 FB 61 F5 | 	xor	result1, local05
0e464     FD 12 02 F6 | 	mov	arg01, result1
0e468     0C 4E 05 F1 | 	add	fp, #12
0e46c     A7 14 02 FB | 	rdlong	arg02, fp
0e470     0C 4E 85 F1 | 	sub	fp, #12
0e474     4C D4 B0 FD | 	call	#__system___float_mul
0e478     A7 FA 61 FC | 	wrlong	result1, fp
0e47c     08 4E 05 F1 | 	add	fp, #8
0e480     A7 3C 68 FC | 	wrlong	#30, fp
0e484     08 4E 85 F1 | 	sub	fp, #8
0e488     28 01 90 FD | 	jmp	#LR__1109
0e48c                 | LR__1105
0e48c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0e48c     08 4E 05 F1 | 	add	fp, #8
0e490     A7 1E 02 FB | 	rdlong	local01, fp
0e494     08 4E 85 F1 | 	sub	fp, #8
0e498     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e49c     14 4E 05 A1 |  if_e	add	fp, #20
0e4a0     A7 22 02 AB |  if_e	rdlong	local03, fp
0e4a4     14 4E 85 A1 |  if_e	sub	fp, #20
0e4a8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e4ac     28 00 90 5D |  if_ne	jmp	#LR__1106
0e4b0     A7 1E 02 FB | 	rdlong	local01, fp
0e4b4     0C 4E 05 F1 | 	add	fp, #12
0e4b8     A7 12 02 FB | 	rdlong	arg01, fp
0e4bc     0C 4E 85 F1 | 	sub	fp, #12
0e4c0     FC CF B0 FD | 	call	#__system___float_fromuns
0e4c4     FD 14 02 F6 | 	mov	arg02, result1
0e4c8     0F 13 02 F6 | 	mov	arg01, local01
0e4cc     F4 D3 B0 FD | 	call	#__system___float_mul
0e4d0     A7 FA 61 FC | 	wrlong	result1, fp
0e4d4     DC 00 90 FD | 	jmp	#LR__1109
0e4d8                 | LR__1106
0e4d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0e4d8     08 4E 05 F1 | 	add	fp, #8
0e4dc     A7 1E 02 FB | 	rdlong	local01, fp
0e4e0     08 4E 85 F1 | 	sub	fp, #8
0e4e4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e4e8     14 4E 05 A1 |  if_e	add	fp, #20
0e4ec     A7 22 02 AB |  if_e	rdlong	local03, fp
0e4f0     14 4E 85 A1 |  if_e	sub	fp, #20
0e4f4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e4f8     38 00 90 5D |  if_ne	jmp	#LR__1107
0e4fc     A7 1E 02 FB | 	rdlong	local01, fp
0e500     0C 4E 05 F1 | 	add	fp, #12
0e504     A7 12 02 FB | 	rdlong	arg01, fp
0e508     0C 4E 85 F1 | 	sub	fp, #12
0e50c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e510     1F 26 C6 C9 |  if_b	decod	local05, #31
0e514     00 26 06 36 |  if_ae	mov	local05, #0
0e518     A4 CF B0 FD | 	call	#__system___float_fromuns
0e51c     13 FB 61 F5 | 	xor	result1, local05
0e520     FD 14 02 F6 | 	mov	arg02, result1
0e524     0F 13 02 F6 | 	mov	arg01, local01
0e528     98 D3 B0 FD | 	call	#__system___float_mul
0e52c     A7 FA 61 FC | 	wrlong	result1, fp
0e530     80 00 90 FD | 	jmp	#LR__1109
0e534                 | LR__1107
0e534                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0e534     08 4E 05 F1 | 	add	fp, #8
0e538     A7 1E 02 FB | 	rdlong	local01, fp
0e53c     08 4E 85 F1 | 	sub	fp, #8
0e540     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e544     14 4E 05 A1 |  if_e	add	fp, #20
0e548     A7 22 02 AB |  if_e	rdlong	local03, fp
0e54c     14 4E 85 A1 |  if_e	sub	fp, #20
0e550     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e554     1C 00 90 5D |  if_ne	jmp	#LR__1108
0e558     A7 12 02 FB | 	rdlong	arg01, fp
0e55c     0C 4E 05 F1 | 	add	fp, #12
0e560     A7 14 02 FB | 	rdlong	arg02, fp
0e564     0C 4E 85 F1 | 	sub	fp, #12
0e568     58 D3 B0 FD | 	call	#__system___float_mul
0e56c     A7 FA 61 FC | 	wrlong	result1, fp
0e570     40 00 90 FD | 	jmp	#LR__1109
0e574                 | LR__1108
0e574                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0e574     08 4E 05 F1 | 	add	fp, #8
0e578     A7 1E 02 FB | 	rdlong	local01, fp
0e57c     08 4E 85 F1 | 	sub	fp, #8
0e580     1F 1E 0E F2 | 	cmp	local01, #31 wz
0e584     14 4E 05 51 |  if_ne	add	fp, #20
0e588     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e58c     14 4E 85 51 |  if_ne	sub	fp, #20
0e590     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0e594     A7 10 68 AC |  if_e	wrlong	#8, fp
0e598     08 4E 05 A1 |  if_e	add	fp, #8
0e59c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e5a0     08 4E 85 A1 |  if_e	sub	fp, #8
0e5a4     A7 12 68 5C |  if_ne	wrlong	#9, fp
0e5a8     08 4E 05 51 |  if_ne	add	fp, #8
0e5ac     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0e5b0     08 4E 85 51 |  if_ne	sub	fp, #8
0e5b4                 | LR__1109
0e5b4     A7 12 02 F6 | 	mov	arg01, fp
0e5b8     C0 B3 BF FD | 	call	#_push
0e5bc     A7 F0 03 F6 | 	mov	ptra, fp
0e5c0     B2 00 A0 FD | 	call	#popregs_
0e5c4                 | _do_mul_ret
0e5c4     2D 00 64 FD | 	ret
0e5c8                 | 
0e5c8                 | ' 
0e5c8                 | ' sub do_div 
0e5c8                 | _do_div
0e5c8     01 4A 05 F6 | 	mov	COUNT_, #1
0e5cc     A8 00 A0 FD | 	call	#pushregs_
0e5d0     18 F0 07 F1 | 	add	ptra, #24
0e5d4     0C B3 BF FD | 	call	#_pop
0e5d8     FD 64 02 F6 | 	mov	muldivb_, result1
0e5dc     FE 62 02 F6 | 	mov	muldiva_, result2
0e5e0     FF 1E 02 F6 | 	mov	local01, result3
0e5e4     0C 4E 05 F1 | 	add	fp, #12
0e5e8     A7 64 62 FC | 	wrlong	muldivb_, fp
0e5ec     04 4E 05 F1 | 	add	fp, #4
0e5f0     A7 62 62 FC | 	wrlong	muldiva_, fp
0e5f4     04 4E 05 F1 | 	add	fp, #4
0e5f8     A7 1E 62 FC | 	wrlong	local01, fp
0e5fc     14 4E 85 F1 | 	sub	fp, #20
0e600     E0 B2 BF FD | 	call	#_pop
0e604     A7 FA 61 FC | 	wrlong	result1, fp
0e608     04 4E 05 F1 | 	add	fp, #4
0e60c     A7 FC 61 FC | 	wrlong	result2, fp
0e610     04 4E 05 F1 | 	add	fp, #4
0e614     A7 FE 61 FC | 	wrlong	result3, fp
0e618                 | ' 
0e618                 | ' t2=pop()
0e618                 | ' t1=pop()
0e618                 | ' 
0e618                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0e618     08 4E 85 F1 | 	sub	fp, #8
0e61c     1F FE 0D F2 | 	cmp	result3, #31 wz
0e620     14 4E 05 51 |  if_ne	add	fp, #20
0e624     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0e628     14 4E 85 51 |  if_ne	sub	fp, #20
0e62c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0e630     A7 14 68 AC |  if_e	wrlong	#10, fp
0e634     08 4E 05 A1 |  if_e	add	fp, #8
0e638     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e63c     08 4E 85 A1 |  if_e	sub	fp, #8
0e640     90 01 90 AD |  if_e	jmp	#LR__1116
0e644                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0e644     08 4E 05 F1 | 	add	fp, #8
0e648     A7 64 02 FB | 	rdlong	muldivb_, fp
0e64c     08 4E 85 F1 | 	sub	fp, #8
0e650     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0e654     1C 00 90 5D |  if_ne	jmp	#LR__1110
0e658     08 4E 05 F1 | 	add	fp, #8
0e65c     A7 38 68 FC | 	wrlong	#28, fp
0e660     08 4E 85 F1 | 	sub	fp, #8
0e664     A7 12 02 FB | 	rdlong	arg01, fp
0e668     00 14 06 F6 | 	mov	arg02, #0
0e66c     1C D7 B0 FD | 	call	#__system___float_tointeger
0e670     A7 FA 61 FC | 	wrlong	result1, fp
0e674                 | LR__1110
0e674                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0e674     14 4E 05 F1 | 	add	fp, #20
0e678     A7 64 02 FB | 	rdlong	muldivb_, fp
0e67c     14 4E 85 F1 | 	sub	fp, #20
0e680     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0e684     28 00 90 5D |  if_ne	jmp	#LR__1111
0e688     14 4E 05 F1 | 	add	fp, #20
0e68c     A7 38 68 FC | 	wrlong	#28, fp
0e690     08 4E 85 F1 | 	sub	fp, #8
0e694     A7 12 02 FB | 	rdlong	arg01, fp
0e698     0C 4E 85 F1 | 	sub	fp, #12
0e69c     00 14 06 F6 | 	mov	arg02, #0
0e6a0     E8 D6 B0 FD | 	call	#__system___float_tointeger
0e6a4     0C 4E 05 F1 | 	add	fp, #12
0e6a8     A7 FA 61 FC | 	wrlong	result1, fp
0e6ac     0C 4E 85 F1 | 	sub	fp, #12
0e6b0                 | LR__1111
0e6b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0e6b0     08 4E 05 F1 | 	add	fp, #8
0e6b4     A7 64 02 FB | 	rdlong	muldivb_, fp
0e6b8     08 4E 85 F1 | 	sub	fp, #8
0e6bc     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0e6c0     14 4E 05 A1 |  if_e	add	fp, #20
0e6c4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e6c8     14 4E 85 A1 |  if_e	sub	fp, #20
0e6cc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e6d0     20 00 90 5D |  if_ne	jmp	#LR__1112
0e6d4     0C 4E 05 F1 | 	add	fp, #12
0e6d8     A7 1E 02 FB | 	rdlong	local01, fp
0e6dc     0C 4E 85 F1 | 	sub	fp, #12
0e6e0     A7 64 02 FB | 	rdlong	muldivb_, fp
0e6e4     0F 65 12 FD | 	qdiv	muldivb_, local01
0e6e8     18 1E 62 FD | 	getqx	local01
0e6ec     A7 1E 62 FC | 	wrlong	local01, fp
0e6f0     E0 00 90 FD | 	jmp	#LR__1116
0e6f4                 | LR__1112
0e6f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0e6f4     08 4E 05 F1 | 	add	fp, #8
0e6f8     A7 64 02 FB | 	rdlong	muldivb_, fp
0e6fc     08 4E 85 F1 | 	sub	fp, #8
0e700     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0e704     14 4E 05 A1 |  if_e	add	fp, #20
0e708     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e70c     14 4E 85 A1 |  if_e	sub	fp, #20
0e710     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e714     2C 00 90 5D |  if_ne	jmp	#LR__1113
0e718     0C 4E 05 F1 | 	add	fp, #12
0e71c     A7 1E 02 FB | 	rdlong	local01, fp
0e720     0C 4E 85 F1 | 	sub	fp, #12
0e724     A7 64 02 FB | 	rdlong	muldivb_, fp
0e728     0F 65 12 FD | 	qdiv	muldivb_, local01
0e72c     18 1E 62 FD | 	getqx	local01
0e730     A7 1E 62 FC | 	wrlong	local01, fp
0e734     08 4E 05 F1 | 	add	fp, #8
0e738     A7 38 68 FC | 	wrlong	#28, fp
0e73c     08 4E 85 F1 | 	sub	fp, #8
0e740     90 00 90 FD | 	jmp	#LR__1116
0e744                 | LR__1113
0e744                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0e744     08 4E 05 F1 | 	add	fp, #8
0e748     A7 64 02 FB | 	rdlong	muldivb_, fp
0e74c     08 4E 85 F1 | 	sub	fp, #8
0e750     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0e754     14 4E 05 A1 |  if_e	add	fp, #20
0e758     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e75c     14 4E 85 A1 |  if_e	sub	fp, #20
0e760     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e764     1C 00 90 5D |  if_ne	jmp	#LR__1114
0e768     A7 62 02 FB | 	rdlong	muldiva_, fp
0e76c     0C 4E 05 F1 | 	add	fp, #12
0e770     A7 64 02 FB | 	rdlong	muldivb_, fp
0e774     0C 4E 85 F1 | 	sub	fp, #12
0e778     BA 00 A0 FD | 	call	#divide_
0e77c     A7 64 62 FC | 	wrlong	muldivb_, fp
0e780     50 00 90 FD | 	jmp	#LR__1116
0e784                 | LR__1114
0e784                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0e784     08 4E 05 F1 | 	add	fp, #8
0e788     A7 64 02 FB | 	rdlong	muldivb_, fp
0e78c     08 4E 85 F1 | 	sub	fp, #8
0e790     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0e794     14 4E 05 A1 |  if_e	add	fp, #20
0e798     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e79c     14 4E 85 A1 |  if_e	sub	fp, #20
0e7a0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e7a4     1C 00 90 5D |  if_ne	jmp	#LR__1115
0e7a8     A7 62 02 FB | 	rdlong	muldiva_, fp
0e7ac     0C 4E 05 F1 | 	add	fp, #12
0e7b0     A7 64 02 FB | 	rdlong	muldivb_, fp
0e7b4     0C 4E 85 F1 | 	sub	fp, #12
0e7b8     BA 00 A0 FD | 	call	#divide_
0e7bc     A7 64 62 FC | 	wrlong	muldivb_, fp
0e7c0     10 00 90 FD | 	jmp	#LR__1116
0e7c4                 | LR__1115
0e7c4     A7 16 68 FC | 	wrlong	#11, fp
0e7c8     08 4E 05 F1 | 	add	fp, #8
0e7cc     A7 FE 69 FC | 	wrlong	#255, fp
0e7d0     08 4E 85 F1 | 	sub	fp, #8
0e7d4                 | LR__1116
0e7d4     A7 12 02 F6 | 	mov	arg01, fp
0e7d8     A0 B1 BF FD | 	call	#_push
0e7dc     A7 F0 03 F6 | 	mov	ptra, fp
0e7e0     B2 00 A0 FD | 	call	#popregs_
0e7e4                 | _do_div_ret
0e7e4     2D 00 64 FD | 	ret
0e7e8                 | 
0e7e8                 | ' 
0e7e8                 | ' sub do_fdiv 
0e7e8                 | _do_fdiv
0e7e8     02 4A 05 F6 | 	mov	COUNT_, #2
0e7ec     A8 00 A0 FD | 	call	#pushregs_
0e7f0     18 F0 07 F1 | 	add	ptra, #24
0e7f4     EC B0 BF FD | 	call	#_pop
0e7f8     FD 14 02 F6 | 	mov	arg02, result1
0e7fc     FE 12 02 F6 | 	mov	arg01, result2
0e800     FF 1E 02 F6 | 	mov	local01, result3
0e804     0C 4E 05 F1 | 	add	fp, #12
0e808     A7 14 62 FC | 	wrlong	arg02, fp
0e80c     04 4E 05 F1 | 	add	fp, #4
0e810     A7 12 62 FC | 	wrlong	arg01, fp
0e814     04 4E 05 F1 | 	add	fp, #4
0e818     A7 1E 62 FC | 	wrlong	local01, fp
0e81c     14 4E 85 F1 | 	sub	fp, #20
0e820     C0 B0 BF FD | 	call	#_pop
0e824     A7 FA 61 FC | 	wrlong	result1, fp
0e828     04 4E 05 F1 | 	add	fp, #4
0e82c     A7 FC 61 FC | 	wrlong	result2, fp
0e830     04 4E 05 F1 | 	add	fp, #4
0e834     A7 FE 61 FC | 	wrlong	result3, fp
0e838                 | ' 
0e838                 | ' t2=pop()
0e838                 | ' t1=pop()
0e838                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0e838     08 4E 85 F1 | 	sub	fp, #8
0e83c     1F FE 0D F2 | 	cmp	result3, #31 wz
0e840     14 4E 05 51 |  if_ne	add	fp, #20
0e844     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e848     14 4E 85 51 |  if_ne	sub	fp, #20
0e84c     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0e850     A7 14 68 AC |  if_e	wrlong	#10, fp
0e854     08 4E 05 A1 |  if_e	add	fp, #8
0e858     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e85c     08 4E 85 A1 |  if_e	sub	fp, #8
0e860     38 01 90 AD |  if_e	jmp	#LR__1125
0e864                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0e864     08 4E 05 F1 | 	add	fp, #8
0e868     A7 14 02 FB | 	rdlong	arg02, fp
0e86c     08 4E 85 F1 | 	sub	fp, #8
0e870     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e874     28 00 90 5D |  if_ne	jmp	#LR__1120
0e878     08 4E 05 F1 | 	add	fp, #8
0e87c     A7 3C 68 FC | 	wrlong	#30, fp
0e880     08 4E 85 F1 | 	sub	fp, #8
0e884     A7 12 02 FB | 	rdlong	arg01, fp
0e888     09 13 52 F6 | 	abs	arg01, arg01 wc
0e88c     1F 20 C6 C9 |  if_b	decod	local02, #31
0e890     00 20 06 36 |  if_ae	mov	local02, #0
0e894     28 CC B0 FD | 	call	#__system___float_fromuns
0e898     10 FB 61 F5 | 	xor	result1, local02
0e89c     A7 FA 61 FC | 	wrlong	result1, fp
0e8a0                 | LR__1120
0e8a0                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0e8a0     08 4E 05 F1 | 	add	fp, #8
0e8a4     A7 14 02 FB | 	rdlong	arg02, fp
0e8a8     08 4E 85 F1 | 	sub	fp, #8
0e8ac     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e8b0     18 00 90 5D |  if_ne	jmp	#LR__1121
0e8b4     08 4E 05 F1 | 	add	fp, #8
0e8b8     A7 3C 68 FC | 	wrlong	#30, fp
0e8bc     08 4E 85 F1 | 	sub	fp, #8
0e8c0     A7 12 02 FB | 	rdlong	arg01, fp
0e8c4     F8 CB B0 FD | 	call	#__system___float_fromuns
0e8c8     A7 FA 61 FC | 	wrlong	result1, fp
0e8cc                 | LR__1121
0e8cc                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0e8cc     14 4E 05 F1 | 	add	fp, #20
0e8d0     A7 14 02 FB | 	rdlong	arg02, fp
0e8d4     14 4E 85 F1 | 	sub	fp, #20
0e8d8     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e8dc     34 00 90 5D |  if_ne	jmp	#LR__1122
0e8e0     14 4E 05 F1 | 	add	fp, #20
0e8e4     A7 3C 68 FC | 	wrlong	#30, fp
0e8e8     08 4E 85 F1 | 	sub	fp, #8
0e8ec     A7 12 02 FB | 	rdlong	arg01, fp
0e8f0     0C 4E 85 F1 | 	sub	fp, #12
0e8f4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e8f8     1F 20 C6 C9 |  if_b	decod	local02, #31
0e8fc     00 20 06 36 |  if_ae	mov	local02, #0
0e900     BC CB B0 FD | 	call	#__system___float_fromuns
0e904     10 FB 61 F5 | 	xor	result1, local02
0e908     0C 4E 05 F1 | 	add	fp, #12
0e90c     A7 FA 61 FC | 	wrlong	result1, fp
0e910     0C 4E 85 F1 | 	sub	fp, #12
0e914                 | LR__1122
0e914                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0e914     14 4E 05 F1 | 	add	fp, #20
0e918     A7 14 02 FB | 	rdlong	arg02, fp
0e91c     14 4E 85 F1 | 	sub	fp, #20
0e920     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e924     24 00 90 5D |  if_ne	jmp	#LR__1123
0e928     14 4E 05 F1 | 	add	fp, #20
0e92c     A7 3C 68 FC | 	wrlong	#30, fp
0e930     08 4E 85 F1 | 	sub	fp, #8
0e934     A7 12 02 FB | 	rdlong	arg01, fp
0e938     0C 4E 85 F1 | 	sub	fp, #12
0e93c     80 CB B0 FD | 	call	#__system___float_fromuns
0e940     0C 4E 05 F1 | 	add	fp, #12
0e944     A7 FA 61 FC | 	wrlong	result1, fp
0e948     0C 4E 85 F1 | 	sub	fp, #12
0e94c                 | LR__1123
0e94c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0e94c     08 4E 05 F1 | 	add	fp, #8
0e950     A7 14 02 FB | 	rdlong	arg02, fp
0e954     08 4E 85 F1 | 	sub	fp, #8
0e958     1E 14 0E F2 | 	cmp	arg02, #30 wz
0e95c     14 4E 05 A1 |  if_e	add	fp, #20
0e960     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e964     14 4E 85 A1 |  if_e	sub	fp, #20
0e968     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0e96c     1C 00 90 5D |  if_ne	jmp	#LR__1124
0e970     A7 12 02 FB | 	rdlong	arg01, fp
0e974     0C 4E 05 F1 | 	add	fp, #12
0e978     A7 14 02 FB | 	rdlong	arg02, fp
0e97c     0C 4E 85 F1 | 	sub	fp, #12
0e980     44 D1 B0 FD | 	call	#__system___float_div
0e984     A7 FA 61 FC | 	wrlong	result1, fp
0e988     10 00 90 FD | 	jmp	#LR__1125
0e98c                 | LR__1124
0e98c     A7 16 68 FC | 	wrlong	#11, fp
0e990     08 4E 05 F1 | 	add	fp, #8
0e994     A7 FE 69 FC | 	wrlong	#255, fp
0e998     08 4E 85 F1 | 	sub	fp, #8
0e99c                 | LR__1125
0e99c     A7 12 02 F6 | 	mov	arg01, fp
0e9a0     D8 AF BF FD | 	call	#_push
0e9a4     A7 F0 03 F6 | 	mov	ptra, fp
0e9a8     B2 00 A0 FD | 	call	#popregs_
0e9ac                 | _do_fdiv_ret
0e9ac     2D 00 64 FD | 	ret
0e9b0                 | 
0e9b0                 | ' 
0e9b0                 | ' 
0e9b0                 | ' sub do_mod 
0e9b0                 | _do_mod
0e9b0     01 4A 05 F6 | 	mov	COUNT_, #1
0e9b4     A8 00 A0 FD | 	call	#pushregs_
0e9b8     18 F0 07 F1 | 	add	ptra, #24
0e9bc     24 AF BF FD | 	call	#_pop
0e9c0     FD 64 02 F6 | 	mov	muldivb_, result1
0e9c4     FE 62 02 F6 | 	mov	muldiva_, result2
0e9c8     FF 1E 02 F6 | 	mov	local01, result3
0e9cc     0C 4E 05 F1 | 	add	fp, #12
0e9d0     A7 64 62 FC | 	wrlong	muldivb_, fp
0e9d4     04 4E 05 F1 | 	add	fp, #4
0e9d8     A7 62 62 FC | 	wrlong	muldiva_, fp
0e9dc     04 4E 05 F1 | 	add	fp, #4
0e9e0     A7 1E 62 FC | 	wrlong	local01, fp
0e9e4     14 4E 85 F1 | 	sub	fp, #20
0e9e8     F8 AE BF FD | 	call	#_pop
0e9ec     A7 FA 61 FC | 	wrlong	result1, fp
0e9f0     04 4E 05 F1 | 	add	fp, #4
0e9f4     A7 FC 61 FC | 	wrlong	result2, fp
0e9f8     04 4E 05 F1 | 	add	fp, #4
0e9fc     A7 FE 61 FC | 	wrlong	result3, fp
0ea00                 | ' 
0ea00                 | ' t2=pop()
0ea00                 | ' t1=pop()
0ea00                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0ea00     08 4E 85 F1 | 	sub	fp, #8
0ea04     1F FE 0D F2 | 	cmp	result3, #31 wz
0ea08     14 4E 05 51 |  if_ne	add	fp, #20
0ea0c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0ea10     14 4E 85 51 |  if_ne	sub	fp, #20
0ea14     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0ea18     A7 14 68 AC |  if_e	wrlong	#10, fp
0ea1c     08 4E 05 A1 |  if_e	add	fp, #8
0ea20     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ea24     08 4E 85 A1 |  if_e	sub	fp, #8
0ea28     90 01 90 AD |  if_e	jmp	#LR__1136
0ea2c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0ea2c     08 4E 05 F1 | 	add	fp, #8
0ea30     A7 64 02 FB | 	rdlong	muldivb_, fp
0ea34     08 4E 85 F1 | 	sub	fp, #8
0ea38     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0ea3c     1C 00 90 5D |  if_ne	jmp	#LR__1130
0ea40     08 4E 05 F1 | 	add	fp, #8
0ea44     A7 38 68 FC | 	wrlong	#28, fp
0ea48     08 4E 85 F1 | 	sub	fp, #8
0ea4c     A7 12 02 FB | 	rdlong	arg01, fp
0ea50     00 14 06 F6 | 	mov	arg02, #0
0ea54     34 D3 B0 FD | 	call	#__system___float_tointeger
0ea58     A7 FA 61 FC | 	wrlong	result1, fp
0ea5c                 | LR__1130
0ea5c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0ea5c     14 4E 05 F1 | 	add	fp, #20
0ea60     A7 64 02 FB | 	rdlong	muldivb_, fp
0ea64     14 4E 85 F1 | 	sub	fp, #20
0ea68     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0ea6c     28 00 90 5D |  if_ne	jmp	#LR__1131
0ea70     14 4E 05 F1 | 	add	fp, #20
0ea74     A7 38 68 FC | 	wrlong	#28, fp
0ea78     08 4E 85 F1 | 	sub	fp, #8
0ea7c     A7 12 02 FB | 	rdlong	arg01, fp
0ea80     0C 4E 85 F1 | 	sub	fp, #12
0ea84     00 14 06 F6 | 	mov	arg02, #0
0ea88     00 D3 B0 FD | 	call	#__system___float_tointeger
0ea8c     0C 4E 05 F1 | 	add	fp, #12
0ea90     A7 FA 61 FC | 	wrlong	result1, fp
0ea94     0C 4E 85 F1 | 	sub	fp, #12
0ea98                 | LR__1131
0ea98                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0ea98     08 4E 05 F1 | 	add	fp, #8
0ea9c     A7 64 02 FB | 	rdlong	muldivb_, fp
0eaa0     08 4E 85 F1 | 	sub	fp, #8
0eaa4     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0eaa8     14 4E 05 A1 |  if_e	add	fp, #20
0eaac     A7 1E 02 AB |  if_e	rdlong	local01, fp
0eab0     14 4E 85 A1 |  if_e	sub	fp, #20
0eab4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0eab8     20 00 90 5D |  if_ne	jmp	#LR__1132
0eabc     0C 4E 05 F1 | 	add	fp, #12
0eac0     A7 1E 02 FB | 	rdlong	local01, fp
0eac4     0C 4E 85 F1 | 	sub	fp, #12
0eac8     A7 64 02 FB | 	rdlong	muldivb_, fp
0eacc     0F 65 12 FD | 	qdiv	muldivb_, local01
0ead0     19 1E 62 FD | 	getqy	local01
0ead4     A7 1E 62 FC | 	wrlong	local01, fp
0ead8     E0 00 90 FD | 	jmp	#LR__1136
0eadc                 | LR__1132
0eadc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0eadc     08 4E 05 F1 | 	add	fp, #8
0eae0     A7 64 02 FB | 	rdlong	muldivb_, fp
0eae4     08 4E 85 F1 | 	sub	fp, #8
0eae8     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0eaec     14 4E 05 A1 |  if_e	add	fp, #20
0eaf0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0eaf4     14 4E 85 A1 |  if_e	sub	fp, #20
0eaf8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0eafc     2C 00 90 5D |  if_ne	jmp	#LR__1133
0eb00     0C 4E 05 F1 | 	add	fp, #12
0eb04     A7 1E 02 FB | 	rdlong	local01, fp
0eb08     0C 4E 85 F1 | 	sub	fp, #12
0eb0c     A7 64 02 FB | 	rdlong	muldivb_, fp
0eb10     0F 65 12 FD | 	qdiv	muldivb_, local01
0eb14     19 1E 62 FD | 	getqy	local01
0eb18     A7 1E 62 FC | 	wrlong	local01, fp
0eb1c     08 4E 05 F1 | 	add	fp, #8
0eb20     A7 38 68 FC | 	wrlong	#28, fp
0eb24     08 4E 85 F1 | 	sub	fp, #8
0eb28     90 00 90 FD | 	jmp	#LR__1136
0eb2c                 | LR__1133
0eb2c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0eb2c     08 4E 05 F1 | 	add	fp, #8
0eb30     A7 64 02 FB | 	rdlong	muldivb_, fp
0eb34     08 4E 85 F1 | 	sub	fp, #8
0eb38     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0eb3c     14 4E 05 A1 |  if_e	add	fp, #20
0eb40     A7 1E 02 AB |  if_e	rdlong	local01, fp
0eb44     14 4E 85 A1 |  if_e	sub	fp, #20
0eb48     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0eb4c     1C 00 90 5D |  if_ne	jmp	#LR__1134
0eb50     A7 62 02 FB | 	rdlong	muldiva_, fp
0eb54     0C 4E 05 F1 | 	add	fp, #12
0eb58     A7 64 02 FB | 	rdlong	muldivb_, fp
0eb5c     0C 4E 85 F1 | 	sub	fp, #12
0eb60     BA 00 A0 FD | 	call	#divide_
0eb64     A7 62 62 FC | 	wrlong	muldiva_, fp
0eb68     50 00 90 FD | 	jmp	#LR__1136
0eb6c                 | LR__1134
0eb6c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0eb6c     08 4E 05 F1 | 	add	fp, #8
0eb70     A7 64 02 FB | 	rdlong	muldivb_, fp
0eb74     08 4E 85 F1 | 	sub	fp, #8
0eb78     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0eb7c     14 4E 05 A1 |  if_e	add	fp, #20
0eb80     A7 1E 02 AB |  if_e	rdlong	local01, fp
0eb84     14 4E 85 A1 |  if_e	sub	fp, #20
0eb88     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0eb8c     1C 00 90 5D |  if_ne	jmp	#LR__1135
0eb90     A7 62 02 FB | 	rdlong	muldiva_, fp
0eb94     0C 4E 05 F1 | 	add	fp, #12
0eb98     A7 64 02 FB | 	rdlong	muldivb_, fp
0eb9c     0C 4E 85 F1 | 	sub	fp, #12
0eba0     BA 00 A0 FD | 	call	#divide_
0eba4     A7 62 62 FC | 	wrlong	muldiva_, fp
0eba8     10 00 90 FD | 	jmp	#LR__1136
0ebac                 | LR__1135
0ebac     A7 16 68 FC | 	wrlong	#11, fp
0ebb0     08 4E 05 F1 | 	add	fp, #8
0ebb4     A7 FE 69 FC | 	wrlong	#255, fp
0ebb8     08 4E 85 F1 | 	sub	fp, #8
0ebbc                 | LR__1136
0ebbc     A7 12 02 F6 | 	mov	arg01, fp
0ebc0     B8 AD BF FD | 	call	#_push
0ebc4     A7 F0 03 F6 | 	mov	ptra, fp
0ebc8     B2 00 A0 FD | 	call	#popregs_
0ebcc                 | _do_mod_ret
0ebcc     2D 00 64 FD | 	ret
0ebd0                 | 
0ebd0                 | ' 
0ebd0                 | ' sub do_shl 
0ebd0                 | _do_shl
0ebd0     03 4A 05 F6 | 	mov	COUNT_, #3
0ebd4     A8 00 A0 FD | 	call	#pushregs_
0ebd8     18 F0 07 F1 | 	add	ptra, #24
0ebdc     04 AD BF FD | 	call	#_pop
0ebe0     FD 12 02 F6 | 	mov	arg01, result1
0ebe4     FE 1E 02 F6 | 	mov	local01, result2
0ebe8     FF 20 02 F6 | 	mov	local02, result3
0ebec     0C 4E 05 F1 | 	add	fp, #12
0ebf0     A7 12 62 FC | 	wrlong	arg01, fp
0ebf4     04 4E 05 F1 | 	add	fp, #4
0ebf8     A7 1E 62 FC | 	wrlong	local01, fp
0ebfc     04 4E 05 F1 | 	add	fp, #4
0ec00     A7 20 62 FC | 	wrlong	local02, fp
0ec04     14 4E 85 F1 | 	sub	fp, #20
0ec08     D8 AC BF FD | 	call	#_pop
0ec0c     FF 22 02 F6 | 	mov	local03, result3
0ec10     A7 FA 61 FC | 	wrlong	result1, fp
0ec14     04 4E 05 F1 | 	add	fp, #4
0ec18     A7 FC 61 FC | 	wrlong	result2, fp
0ec1c     04 4E 05 F1 | 	add	fp, #4
0ec20     A7 22 62 FC | 	wrlong	local03, fp
0ec24                 | ' 
0ec24                 | ' t2=pop()
0ec24                 | ' t1=pop()
0ec24                 | ' 
0ec24                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0ec24     08 4E 85 F1 | 	sub	fp, #8
0ec28     1C 22 0E F2 | 	cmp	local03, #28 wz
0ec2c     A7 22 02 AB |  if_e	rdlong	local03, fp
0ec30     A7 22 62 AC |  if_e	wrlong	local03, fp
0ec34     08 4E 05 A1 |  if_e	add	fp, #8
0ec38     A7 3A 68 AC |  if_e	wrlong	#29, fp
0ec3c     08 4E 85 A1 |  if_e	sub	fp, #8
0ec40                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0ec40     14 4E 05 F1 | 	add	fp, #20
0ec44     A7 22 02 FB | 	rdlong	local03, fp
0ec48     14 4E 85 F1 | 	sub	fp, #20
0ec4c     1C 22 0E F2 | 	cmp	local03, #28 wz
0ec50     18 00 90 5D |  if_ne	jmp	#LR__1140
0ec54     0C 4E 05 F1 | 	add	fp, #12
0ec58     A7 22 02 FB | 	rdlong	local03, fp
0ec5c     A7 22 62 FC | 	wrlong	local03, fp
0ec60     08 4E 05 F1 | 	add	fp, #8
0ec64     A7 3A 68 FC | 	wrlong	#29, fp
0ec68     14 4E 85 F1 | 	sub	fp, #20
0ec6c                 | LR__1140
0ec6c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0ec6c     08 4E 05 F1 | 	add	fp, #8
0ec70     A7 22 02 FB | 	rdlong	local03, fp
0ec74     08 4E 85 F1 | 	sub	fp, #8
0ec78     1F 22 0E F2 | 	cmp	local03, #31 wz
0ec7c     14 4E 05 51 |  if_ne	add	fp, #20
0ec80     A7 20 02 5B |  if_ne	rdlong	local02, fp
0ec84     14 4E 85 51 |  if_ne	sub	fp, #20
0ec88     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0ec8c     08 4E 05 51 |  if_ne	add	fp, #8
0ec90     A7 22 02 5B |  if_ne	rdlong	local03, fp
0ec94     08 4E 85 51 |  if_ne	sub	fp, #8
0ec98     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0ec9c     14 4E 05 51 |  if_ne	add	fp, #20
0eca0     14 4E 85 51 |  if_ne	sub	fp, #20
0eca4     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0eca8     A7 0C 68 AC |  if_e	wrlong	#6, fp
0ecac     08 4E 05 A1 |  if_e	add	fp, #8
0ecb0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ecb4     08 4E 85 A1 |  if_e	sub	fp, #8
0ecb8     18 00 90 AD |  if_e	jmp	#LR__1141
0ecbc     A7 22 02 FB | 	rdlong	local03, fp
0ecc0     0C 4E 05 F1 | 	add	fp, #12
0ecc4     A7 1E 02 FB | 	rdlong	local01, fp
0ecc8     0C 4E 85 F1 | 	sub	fp, #12
0eccc     0F 23 62 F0 | 	shl	local03, local01
0ecd0     A7 22 62 FC | 	wrlong	local03, fp
0ecd4                 | LR__1141
0ecd4     A7 12 02 F6 | 	mov	arg01, fp
0ecd8     A0 AC BF FD | 	call	#_push
0ecdc     A7 F0 03 F6 | 	mov	ptra, fp
0ece0     B2 00 A0 FD | 	call	#popregs_
0ece4                 | _do_shl_ret
0ece4     2D 00 64 FD | 	ret
0ece8                 | 
0ece8                 | ' 
0ece8                 | ' sub do_shr 
0ece8                 | _do_shr
0ece8     03 4A 05 F6 | 	mov	COUNT_, #3
0ecec     A8 00 A0 FD | 	call	#pushregs_
0ecf0     18 F0 07 F1 | 	add	ptra, #24
0ecf4     EC AB BF FD | 	call	#_pop
0ecf8     FD 12 02 F6 | 	mov	arg01, result1
0ecfc     FE 1E 02 F6 | 	mov	local01, result2
0ed00     FF 20 02 F6 | 	mov	local02, result3
0ed04     0C 4E 05 F1 | 	add	fp, #12
0ed08     A7 12 62 FC | 	wrlong	arg01, fp
0ed0c     04 4E 05 F1 | 	add	fp, #4
0ed10     A7 1E 62 FC | 	wrlong	local01, fp
0ed14     04 4E 05 F1 | 	add	fp, #4
0ed18     A7 20 62 FC | 	wrlong	local02, fp
0ed1c     14 4E 85 F1 | 	sub	fp, #20
0ed20     C0 AB BF FD | 	call	#_pop
0ed24     FF 22 02 F6 | 	mov	local03, result3
0ed28     A7 FA 61 FC | 	wrlong	result1, fp
0ed2c     04 4E 05 F1 | 	add	fp, #4
0ed30     A7 FC 61 FC | 	wrlong	result2, fp
0ed34     04 4E 05 F1 | 	add	fp, #4
0ed38     A7 22 62 FC | 	wrlong	local03, fp
0ed3c                 | ' t2=pop()
0ed3c                 | ' t1=pop()
0ed3c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0ed3c     08 4E 85 F1 | 	sub	fp, #8
0ed40     1C 22 0E F2 | 	cmp	local03, #28 wz
0ed44     A7 22 02 AB |  if_e	rdlong	local03, fp
0ed48     A7 22 62 AC |  if_e	wrlong	local03, fp
0ed4c     08 4E 05 A1 |  if_e	add	fp, #8
0ed50     A7 3A 68 AC |  if_e	wrlong	#29, fp
0ed54     08 4E 85 A1 |  if_e	sub	fp, #8
0ed58                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0ed58     14 4E 05 F1 | 	add	fp, #20
0ed5c     A7 22 02 FB | 	rdlong	local03, fp
0ed60     14 4E 85 F1 | 	sub	fp, #20
0ed64     1C 22 0E F2 | 	cmp	local03, #28 wz
0ed68     18 00 90 5D |  if_ne	jmp	#LR__1150
0ed6c     0C 4E 05 F1 | 	add	fp, #12
0ed70     A7 22 02 FB | 	rdlong	local03, fp
0ed74     A7 22 62 FC | 	wrlong	local03, fp
0ed78     08 4E 05 F1 | 	add	fp, #8
0ed7c     A7 3A 68 FC | 	wrlong	#29, fp
0ed80     14 4E 85 F1 | 	sub	fp, #20
0ed84                 | LR__1150
0ed84                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0ed84     08 4E 05 F1 | 	add	fp, #8
0ed88     A7 22 02 FB | 	rdlong	local03, fp
0ed8c     08 4E 85 F1 | 	sub	fp, #8
0ed90     1F 22 0E F2 | 	cmp	local03, #31 wz
0ed94     14 4E 05 51 |  if_ne	add	fp, #20
0ed98     A7 20 02 5B |  if_ne	rdlong	local02, fp
0ed9c     14 4E 85 51 |  if_ne	sub	fp, #20
0eda0     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0eda4     08 4E 05 51 |  if_ne	add	fp, #8
0eda8     A7 22 02 5B |  if_ne	rdlong	local03, fp
0edac     08 4E 85 51 |  if_ne	sub	fp, #8
0edb0     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0edb4     14 4E 05 51 |  if_ne	add	fp, #20
0edb8     14 4E 85 51 |  if_ne	sub	fp, #20
0edbc     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0edc0     A7 0C 68 AC |  if_e	wrlong	#6, fp
0edc4     08 4E 05 A1 |  if_e	add	fp, #8
0edc8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0edcc     08 4E 85 A1 |  if_e	sub	fp, #8
0edd0     18 00 90 AD |  if_e	jmp	#LR__1151
0edd4     A7 22 02 FB | 	rdlong	local03, fp
0edd8     0C 4E 05 F1 | 	add	fp, #12
0eddc     A7 1E 02 FB | 	rdlong	local01, fp
0ede0     0C 4E 85 F1 | 	sub	fp, #12
0ede4     0F 23 42 F0 | 	shr	local03, local01
0ede8     A7 22 62 FC | 	wrlong	local03, fp
0edec                 | LR__1151
0edec     A7 12 02 F6 | 	mov	arg01, fp
0edf0     88 AB BF FD | 	call	#_push
0edf4     A7 F0 03 F6 | 	mov	ptra, fp
0edf8     B2 00 A0 FD | 	call	#popregs_
0edfc                 | _do_shr_ret
0edfc     2D 00 64 FD | 	ret
0ee00                 | 
0ee00                 | ' 
0ee00                 | ' sub do_power 
0ee00                 | _do_power
0ee00     02 4A 05 F6 | 	mov	COUNT_, #2
0ee04     A8 00 A0 FD | 	call	#pushregs_
0ee08     18 F0 07 F1 | 	add	ptra, #24
0ee0c     D4 AA BF FD | 	call	#_pop
0ee10     FD 14 02 F6 | 	mov	arg02, result1
0ee14     FE 12 02 F6 | 	mov	arg01, result2
0ee18     FF 1E 02 F6 | 	mov	local01, result3
0ee1c     0C 4E 05 F1 | 	add	fp, #12
0ee20     A7 14 62 FC | 	wrlong	arg02, fp
0ee24     04 4E 05 F1 | 	add	fp, #4
0ee28     A7 12 62 FC | 	wrlong	arg01, fp
0ee2c     04 4E 05 F1 | 	add	fp, #4
0ee30     A7 1E 62 FC | 	wrlong	local01, fp
0ee34     14 4E 85 F1 | 	sub	fp, #20
0ee38     A8 AA BF FD | 	call	#_pop
0ee3c     A7 FA 61 FC | 	wrlong	result1, fp
0ee40     04 4E 05 F1 | 	add	fp, #4
0ee44     A7 FC 61 FC | 	wrlong	result2, fp
0ee48     04 4E 05 F1 | 	add	fp, #4
0ee4c     A7 FE 61 FC | 	wrlong	result3, fp
0ee50                 | ' t2=pop()
0ee50                 | ' t1=pop()
0ee50                 | ' 
0ee50                 | ' 
0ee50                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0ee50     08 4E 85 F1 | 	sub	fp, #8
0ee54     1F FE 0D F2 | 	cmp	result3, #31 wz
0ee58     14 4E 05 51 |  if_ne	add	fp, #20
0ee5c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ee60     14 4E 85 51 |  if_ne	sub	fp, #20
0ee64     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0ee68     A7 18 68 AC |  if_e	wrlong	#12, fp
0ee6c     08 4E 05 A1 |  if_e	add	fp, #8
0ee70     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ee74     08 4E 85 A1 |  if_e	sub	fp, #8
0ee78     38 01 90 AD |  if_e	jmp	#LR__1165
0ee7c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0ee7c     08 4E 05 F1 | 	add	fp, #8
0ee80     A7 14 02 FB | 	rdlong	arg02, fp
0ee84     08 4E 85 F1 | 	sub	fp, #8
0ee88     1C 14 0E F2 | 	cmp	arg02, #28 wz
0ee8c     28 00 90 5D |  if_ne	jmp	#LR__1160
0ee90     08 4E 05 F1 | 	add	fp, #8
0ee94     A7 3C 68 FC | 	wrlong	#30, fp
0ee98     08 4E 85 F1 | 	sub	fp, #8
0ee9c     A7 12 02 FB | 	rdlong	arg01, fp
0eea0     09 13 52 F6 | 	abs	arg01, arg01 wc
0eea4     1F 20 C6 C9 |  if_b	decod	local02, #31
0eea8     00 20 06 36 |  if_ae	mov	local02, #0
0eeac     10 C6 B0 FD | 	call	#__system___float_fromuns
0eeb0     10 FB 61 F5 | 	xor	result1, local02
0eeb4     A7 FA 61 FC | 	wrlong	result1, fp
0eeb8                 | LR__1160
0eeb8                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0eeb8     08 4E 05 F1 | 	add	fp, #8
0eebc     A7 14 02 FB | 	rdlong	arg02, fp
0eec0     08 4E 85 F1 | 	sub	fp, #8
0eec4     1D 14 0E F2 | 	cmp	arg02, #29 wz
0eec8     18 00 90 5D |  if_ne	jmp	#LR__1161
0eecc     08 4E 05 F1 | 	add	fp, #8
0eed0     A7 3C 68 FC | 	wrlong	#30, fp
0eed4     08 4E 85 F1 | 	sub	fp, #8
0eed8     A7 12 02 FB | 	rdlong	arg01, fp
0eedc     E0 C5 B0 FD | 	call	#__system___float_fromuns
0eee0     A7 FA 61 FC | 	wrlong	result1, fp
0eee4                 | LR__1161
0eee4                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0eee4     14 4E 05 F1 | 	add	fp, #20
0eee8     A7 14 02 FB | 	rdlong	arg02, fp
0eeec     14 4E 85 F1 | 	sub	fp, #20
0eef0     1C 14 0E F2 | 	cmp	arg02, #28 wz
0eef4     34 00 90 5D |  if_ne	jmp	#LR__1162
0eef8     14 4E 05 F1 | 	add	fp, #20
0eefc     A7 3C 68 FC | 	wrlong	#30, fp
0ef00     08 4E 85 F1 | 	sub	fp, #8
0ef04     A7 12 02 FB | 	rdlong	arg01, fp
0ef08     0C 4E 85 F1 | 	sub	fp, #12
0ef0c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ef10     1F 20 C6 C9 |  if_b	decod	local02, #31
0ef14     00 20 06 36 |  if_ae	mov	local02, #0
0ef18     A4 C5 B0 FD | 	call	#__system___float_fromuns
0ef1c     10 FB 61 F5 | 	xor	result1, local02
0ef20     0C 4E 05 F1 | 	add	fp, #12
0ef24     A7 FA 61 FC | 	wrlong	result1, fp
0ef28     0C 4E 85 F1 | 	sub	fp, #12
0ef2c                 | LR__1162
0ef2c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0ef2c     14 4E 05 F1 | 	add	fp, #20
0ef30     A7 14 02 FB | 	rdlong	arg02, fp
0ef34     14 4E 85 F1 | 	sub	fp, #20
0ef38     1D 14 0E F2 | 	cmp	arg02, #29 wz
0ef3c     24 00 90 5D |  if_ne	jmp	#LR__1163
0ef40     14 4E 05 F1 | 	add	fp, #20
0ef44     A7 3C 68 FC | 	wrlong	#30, fp
0ef48     08 4E 85 F1 | 	sub	fp, #8
0ef4c     A7 12 02 FB | 	rdlong	arg01, fp
0ef50     0C 4E 85 F1 | 	sub	fp, #12
0ef54     68 C5 B0 FD | 	call	#__system___float_fromuns
0ef58     0C 4E 05 F1 | 	add	fp, #12
0ef5c     A7 FA 61 FC | 	wrlong	result1, fp
0ef60     0C 4E 85 F1 | 	sub	fp, #12
0ef64                 | LR__1163
0ef64                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0ef64     08 4E 05 F1 | 	add	fp, #8
0ef68     A7 14 02 FB | 	rdlong	arg02, fp
0ef6c     08 4E 85 F1 | 	sub	fp, #8
0ef70     1E 14 0E F2 | 	cmp	arg02, #30 wz
0ef74     14 4E 05 A1 |  if_e	add	fp, #20
0ef78     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ef7c     14 4E 85 A1 |  if_e	sub	fp, #20
0ef80     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0ef84     1C 00 90 5D |  if_ne	jmp	#LR__1164
0ef88     A7 12 02 FB | 	rdlong	arg01, fp
0ef8c     0C 4E 05 F1 | 	add	fp, #12
0ef90     A7 14 02 FB | 	rdlong	arg02, fp
0ef94     0C 4E 85 F1 | 	sub	fp, #12
0ef98     0C D8 B0 FD | 	call	#__system____builtin_powf
0ef9c     A7 FA 61 FC | 	wrlong	result1, fp
0efa0     10 00 90 FD | 	jmp	#LR__1165
0efa4                 | LR__1164
0efa4     A7 1A 68 FC | 	wrlong	#13, fp
0efa8     08 4E 05 F1 | 	add	fp, #8
0efac     A7 FE 69 FC | 	wrlong	#255, fp
0efb0     08 4E 85 F1 | 	sub	fp, #8
0efb4                 | LR__1165
0efb4     A7 12 02 F6 | 	mov	arg01, fp
0efb8     C0 A9 BF FD | 	call	#_push
0efbc     A7 F0 03 F6 | 	mov	ptra, fp
0efc0     B2 00 A0 FD | 	call	#popregs_
0efc4                 | _do_power_ret
0efc4     2D 00 64 FD | 	ret
0efc8                 | 
0efc8                 | ' 
0efc8                 | ' 
0efc8                 | ' sub do_eq
0efc8                 | _do_eq
0efc8     05 4A 05 F6 | 	mov	COUNT_, #5
0efcc     A8 00 A0 FD | 	call	#pushregs_
0efd0     18 F0 07 F1 | 	add	ptra, #24
0efd4     0C A9 BF FD | 	call	#_pop
0efd8     FD 1E 02 F6 | 	mov	local01, result1
0efdc     FE 20 02 F6 | 	mov	local02, result2
0efe0     FF 22 02 F6 | 	mov	local03, result3
0efe4     0C 4E 05 F1 | 	add	fp, #12
0efe8     A7 1E 62 FC | 	wrlong	local01, fp
0efec     04 4E 05 F1 | 	add	fp, #4
0eff0     A7 20 62 FC | 	wrlong	local02, fp
0eff4     04 4E 05 F1 | 	add	fp, #4
0eff8     A7 22 62 FC | 	wrlong	local03, fp
0effc     14 4E 85 F1 | 	sub	fp, #20
0f000     E0 A8 BF FD | 	call	#_pop
0f004     FF 22 02 F6 | 	mov	local03, result3
0f008     A7 FA 61 FC | 	wrlong	result1, fp
0f00c     04 4E 05 F1 | 	add	fp, #4
0f010     A7 FC 61 FC | 	wrlong	result2, fp
0f014     04 4E 05 F1 | 	add	fp, #4
0f018     A7 22 62 FC | 	wrlong	local03, fp
0f01c                 | ' t2=pop()
0f01c                 | ' t1=pop()
0f01c                 | ' 
0f01c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0f01c     08 4E 85 F1 | 	sub	fp, #8
0f020     1F 22 0E F2 | 	cmp	local03, #31 wz
0f024     14 4E 05 A1 |  if_e	add	fp, #20
0f028     A7 24 02 AB |  if_e	rdlong	local04, fp
0f02c     14 4E 85 A1 |  if_e	sub	fp, #20
0f030     12 23 02 A6 |  if_e	mov	local03, local04
0f034     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f038     28 00 90 5D |  if_ne	jmp	#LR__1170
0f03c     00 1E 06 F6 | 	mov	local01, #0
0f040     A7 12 02 FB | 	rdlong	arg01, fp
0f044     0C 4E 05 F1 | 	add	fp, #12
0f048     A7 14 02 FB | 	rdlong	arg02, fp
0f04c     0C 4E 85 F1 | 	sub	fp, #12
0f050     AC 9D B0 FD | 	call	#__system___string_cmp
0f054     00 FA 0D F2 | 	cmp	result1, #0 wz
0f058     00 1E 26 A6 |  if_e	not	local01, #0
0f05c     A7 1E 62 FC | 	wrlong	local01, fp
0f060     1C 04 90 FD | 	jmp	#LR__1183
0f064                 | LR__1170
0f064                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0f064     08 4E 05 F1 | 	add	fp, #8
0f068     A7 1E 02 FB | 	rdlong	local01, fp
0f06c     08 4E 85 F1 | 	sub	fp, #8
0f070     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f074     14 4E 05 A1 |  if_e	add	fp, #20
0f078     A7 24 02 AB |  if_e	rdlong	local04, fp
0f07c     14 4E 85 A1 |  if_e	sub	fp, #20
0f080     12 23 02 A6 |  if_e	mov	local03, local04
0f084     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f088     2C 00 90 5D |  if_ne	jmp	#LR__1171
0f08c     00 1E 06 F6 | 	mov	local01, #0
0f090     A7 12 02 FB | 	rdlong	arg01, fp
0f094     0C 4E 05 F1 | 	add	fp, #12
0f098     A7 14 02 FB | 	rdlong	arg02, fp
0f09c     0C 4E 85 F1 | 	sub	fp, #12
0f0a0     01 16 06 F6 | 	mov	arg03, #1
0f0a4     50 CC B0 FD | 	call	#__system___float_cmp
0f0a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0f0ac     00 1E 26 A6 |  if_e	not	local01, #0
0f0b0     A7 1E 62 FC | 	wrlong	local01, fp
0f0b4     C8 03 90 FD | 	jmp	#LR__1183
0f0b8                 | LR__1171
0f0b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0f0b8     08 4E 05 F1 | 	add	fp, #8
0f0bc     A7 1E 02 FB | 	rdlong	local01, fp
0f0c0     08 4E 85 F1 | 	sub	fp, #8
0f0c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f0c8     14 4E 05 A1 |  if_e	add	fp, #20
0f0cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0f0d0     14 4E 85 A1 |  if_e	sub	fp, #20
0f0d4     12 23 02 A6 |  if_e	mov	local03, local04
0f0d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f0dc     48 00 90 5D |  if_ne	jmp	#LR__1172
0f0e0     00 1E 06 F6 | 	mov	local01, #0
0f0e4     A7 20 02 FB | 	rdlong	local02, fp
0f0e8     0C 4E 05 F1 | 	add	fp, #12
0f0ec     A7 12 02 FB | 	rdlong	arg01, fp
0f0f0     0C 4E 85 F1 | 	sub	fp, #12
0f0f4     09 13 52 F6 | 	abs	arg01, arg01 wc
0f0f8     1F 26 C6 C9 |  if_b	decod	local05, #31
0f0fc     00 26 06 36 |  if_ae	mov	local05, #0
0f100     BC C3 B0 FD | 	call	#__system___float_fromuns
0f104     13 FB 61 F5 | 	xor	result1, local05
0f108     FD 14 02 F6 | 	mov	arg02, result1
0f10c     10 13 02 F6 | 	mov	arg01, local02
0f110     01 16 06 F6 | 	mov	arg03, #1
0f114     E0 CB B0 FD | 	call	#__system___float_cmp
0f118     00 FA 0D F2 | 	cmp	result1, #0 wz
0f11c     00 1E 26 A6 |  if_e	not	local01, #0
0f120     A7 1E 62 FC | 	wrlong	local01, fp
0f124     58 03 90 FD | 	jmp	#LR__1183
0f128                 | LR__1172
0f128                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0f128     08 4E 05 F1 | 	add	fp, #8
0f12c     A7 1E 02 FB | 	rdlong	local01, fp
0f130     08 4E 85 F1 | 	sub	fp, #8
0f134     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f138     14 4E 05 A1 |  if_e	add	fp, #20
0f13c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f140     14 4E 85 A1 |  if_e	sub	fp, #20
0f144     12 23 02 A6 |  if_e	mov	local03, local04
0f148     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f14c     38 00 90 5D |  if_ne	jmp	#LR__1173
0f150     00 1E 06 F6 | 	mov	local01, #0
0f154     A7 20 02 FB | 	rdlong	local02, fp
0f158     0C 4E 05 F1 | 	add	fp, #12
0f15c     A7 12 02 FB | 	rdlong	arg01, fp
0f160     0C 4E 85 F1 | 	sub	fp, #12
0f164     58 C3 B0 FD | 	call	#__system___float_fromuns
0f168     FD 14 02 F6 | 	mov	arg02, result1
0f16c     10 13 02 F6 | 	mov	arg01, local02
0f170     01 16 06 F6 | 	mov	arg03, #1
0f174     80 CB B0 FD | 	call	#__system___float_cmp
0f178     00 FA 0D F2 | 	cmp	result1, #0 wz
0f17c     00 1E 26 A6 |  if_e	not	local01, #0
0f180     A7 1E 62 FC | 	wrlong	local01, fp
0f184     F8 02 90 FD | 	jmp	#LR__1183
0f188                 | LR__1173
0f188                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0f188     08 4E 05 F1 | 	add	fp, #8
0f18c     A7 1E 02 FB | 	rdlong	local01, fp
0f190     08 4E 85 F1 | 	sub	fp, #8
0f194     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f198     14 4E 05 A1 |  if_e	add	fp, #20
0f19c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f1a0     14 4E 85 A1 |  if_e	sub	fp, #20
0f1a4     12 23 02 A6 |  if_e	mov	local03, local04
0f1a8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f1ac     44 00 90 5D |  if_ne	jmp	#LR__1174
0f1b0     00 1E 06 F6 | 	mov	local01, #0
0f1b4     A7 12 02 FB | 	rdlong	arg01, fp
0f1b8     09 13 52 F6 | 	abs	arg01, arg01 wc
0f1bc     1F 26 C6 C9 |  if_b	decod	local05, #31
0f1c0     00 26 06 36 |  if_ae	mov	local05, #0
0f1c4     F8 C2 B0 FD | 	call	#__system___float_fromuns
0f1c8     13 FB 61 F5 | 	xor	result1, local05
0f1cc     FD 12 02 F6 | 	mov	arg01, result1
0f1d0     0C 4E 05 F1 | 	add	fp, #12
0f1d4     A7 14 02 FB | 	rdlong	arg02, fp
0f1d8     0C 4E 85 F1 | 	sub	fp, #12
0f1dc     01 16 06 F6 | 	mov	arg03, #1
0f1e0     14 CB B0 FD | 	call	#__system___float_cmp
0f1e4     00 FA 0D F2 | 	cmp	result1, #0 wz
0f1e8     00 1E 26 A6 |  if_e	not	local01, #0
0f1ec     A7 1E 62 FC | 	wrlong	local01, fp
0f1f0     8C 02 90 FD | 	jmp	#LR__1183
0f1f4                 | LR__1174
0f1f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0f1f4     08 4E 05 F1 | 	add	fp, #8
0f1f8     A7 1E 02 FB | 	rdlong	local01, fp
0f1fc     08 4E 85 F1 | 	sub	fp, #8
0f200     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f204     14 4E 05 A1 |  if_e	add	fp, #20
0f208     A7 24 02 AB |  if_e	rdlong	local04, fp
0f20c     14 4E 85 A1 |  if_e	sub	fp, #20
0f210     12 23 02 A6 |  if_e	mov	local03, local04
0f214     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f218     24 00 90 5D |  if_ne	jmp	#LR__1175
0f21c     00 1E 06 F6 | 	mov	local01, #0
0f220     A7 20 02 FB | 	rdlong	local02, fp
0f224     0C 4E 05 F1 | 	add	fp, #12
0f228     A7 22 02 FB | 	rdlong	local03, fp
0f22c     0C 4E 85 F1 | 	sub	fp, #12
0f230     11 21 0A F2 | 	cmp	local02, local03 wz
0f234     01 1E 66 A6 |  if_e	neg	local01, #1
0f238     A7 1E 62 FC | 	wrlong	local01, fp
0f23c     40 02 90 FD | 	jmp	#LR__1183
0f240                 | LR__1175
0f240                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0f240     08 4E 05 F1 | 	add	fp, #8
0f244     A7 1E 02 FB | 	rdlong	local01, fp
0f248     08 4E 85 F1 | 	sub	fp, #8
0f24c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f250     14 4E 05 A1 |  if_e	add	fp, #20
0f254     A7 24 02 AB |  if_e	rdlong	local04, fp
0f258     14 4E 85 A1 |  if_e	sub	fp, #20
0f25c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f260     24 00 90 5D |  if_ne	jmp	#LR__1176
0f264     00 1E 06 F6 | 	mov	local01, #0
0f268     A7 20 02 FB | 	rdlong	local02, fp
0f26c     0C 4E 05 F1 | 	add	fp, #12
0f270     A7 22 02 FB | 	rdlong	local03, fp
0f274     0C 4E 85 F1 | 	sub	fp, #12
0f278     11 21 0A F2 | 	cmp	local02, local03 wz
0f27c     01 1E 66 A6 |  if_e	neg	local01, #1
0f280     A7 1E 62 FC | 	wrlong	local01, fp
0f284     F8 01 90 FD | 	jmp	#LR__1183
0f288                 | LR__1176
0f288                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0f288     08 4E 05 F1 | 	add	fp, #8
0f28c     A7 1E 02 FB | 	rdlong	local01, fp
0f290     08 4E 85 F1 | 	sub	fp, #8
0f294     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f298     14 4E 05 A1 |  if_e	add	fp, #20
0f29c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f2a0     14 4E 85 A1 |  if_e	sub	fp, #20
0f2a4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f2a8     34 00 90 5D |  if_ne	jmp	#LR__1177
0f2ac     00 1E 06 F6 | 	mov	local01, #0
0f2b0     A7 12 02 FB | 	rdlong	arg01, fp
0f2b4     08 C2 B0 FD | 	call	#__system___float_fromuns
0f2b8     FD 12 02 F6 | 	mov	arg01, result1
0f2bc     0C 4E 05 F1 | 	add	fp, #12
0f2c0     A7 14 02 FB | 	rdlong	arg02, fp
0f2c4     0C 4E 85 F1 | 	sub	fp, #12
0f2c8     01 16 06 F6 | 	mov	arg03, #1
0f2cc     28 CA B0 FD | 	call	#__system___float_cmp
0f2d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0f2d4     00 1E 26 A6 |  if_e	not	local01, #0
0f2d8     A7 1E 62 FC | 	wrlong	local01, fp
0f2dc     A0 01 90 FD | 	jmp	#LR__1183
0f2e0                 | LR__1177
0f2e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0f2e0     08 4E 05 F1 | 	add	fp, #8
0f2e4     A7 1E 02 FB | 	rdlong	local01, fp
0f2e8     08 4E 85 F1 | 	sub	fp, #8
0f2ec     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f2f0     14 4E 05 A1 |  if_e	add	fp, #20
0f2f4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f2f8     14 4E 85 A1 |  if_e	sub	fp, #20
0f2fc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f300     24 00 90 5D |  if_ne	jmp	#LR__1178
0f304     00 1E 06 F6 | 	mov	local01, #0
0f308     A7 20 02 FB | 	rdlong	local02, fp
0f30c     0C 4E 05 F1 | 	add	fp, #12
0f310     A7 22 02 FB | 	rdlong	local03, fp
0f314     0C 4E 85 F1 | 	sub	fp, #12
0f318     11 21 0A F2 | 	cmp	local02, local03 wz
0f31c     01 1E 66 A6 |  if_e	neg	local01, #1
0f320     A7 1E 62 FC | 	wrlong	local01, fp
0f324     58 01 90 FD | 	jmp	#LR__1183
0f328                 | LR__1178
0f328                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0f328     08 4E 05 F1 | 	add	fp, #8
0f32c     A7 1E 02 FB | 	rdlong	local01, fp
0f330     08 4E 85 F1 | 	sub	fp, #8
0f334     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f338     14 4E 05 A1 |  if_e	add	fp, #20
0f33c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f340     14 4E 85 A1 |  if_e	sub	fp, #20
0f344     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f348     24 00 90 5D |  if_ne	jmp	#LR__1179
0f34c     00 1E 06 F6 | 	mov	local01, #0
0f350     A7 20 02 FB | 	rdlong	local02, fp
0f354     0C 4E 05 F1 | 	add	fp, #12
0f358     A7 22 02 FB | 	rdlong	local03, fp
0f35c     0C 4E 85 F1 | 	sub	fp, #12
0f360     11 21 0A F2 | 	cmp	local02, local03 wz
0f364     01 1E 66 A6 |  if_e	neg	local01, #1
0f368     A7 1E 62 FC | 	wrlong	local01, fp
0f36c     10 01 90 FD | 	jmp	#LR__1183
0f370                 | LR__1179
0f370                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
0f370     08 4E 05 F1 | 	add	fp, #8
0f374     A7 1E 02 FB | 	rdlong	local01, fp
0f378     08 4E 85 F1 | 	sub	fp, #8
0f37c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f380     14 4E 05 A1 |  if_e	add	fp, #20
0f384     A7 22 02 AB |  if_e	rdlong	local03, fp
0f388     14 4E 85 A1 |  if_e	sub	fp, #20
0f38c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f390     30 00 90 5D |  if_ne	jmp	#LR__1180
0f394     00 1E 06 F6 | 	mov	local01, #0
0f398     A7 12 02 FB | 	rdlong	arg01, fp
0f39c     80 D6 BF FD | 	call	#_convertstring
0f3a0     FD 12 02 F6 | 	mov	arg01, result1
0f3a4     0C 4E 05 F1 | 	add	fp, #12
0f3a8     A7 14 02 FB | 	rdlong	arg02, fp
0f3ac     0C 4E 85 F1 | 	sub	fp, #12
0f3b0     4C 9A B0 FD | 	call	#__system___string_cmp
0f3b4     00 FA 0D F2 | 	cmp	result1, #0 wz
0f3b8     00 1E 26 A6 |  if_e	not	local01, #0
0f3bc     A7 1E 62 FC | 	wrlong	local01, fp
0f3c0     BC 00 90 FD | 	jmp	#LR__1183
0f3c4                 | LR__1180
0f3c4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
0f3c4     08 4E 05 F1 | 	add	fp, #8
0f3c8     A7 1E 02 FB | 	rdlong	local01, fp
0f3cc     08 4E 85 F1 | 	sub	fp, #8
0f3d0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f3d4     14 4E 05 A1 |  if_e	add	fp, #20
0f3d8     A7 22 02 AB |  if_e	rdlong	local03, fp
0f3dc     14 4E 85 A1 |  if_e	sub	fp, #20
0f3e0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f3e4     34 00 90 5D |  if_ne	jmp	#LR__1181
0f3e8     00 1E 06 F6 | 	mov	local01, #0
0f3ec     A7 20 02 FB | 	rdlong	local02, fp
0f3f0     0C 4E 05 F1 | 	add	fp, #12
0f3f4     A7 12 02 FB | 	rdlong	arg01, fp
0f3f8     0C 4E 85 F1 | 	sub	fp, #12
0f3fc     20 D6 BF FD | 	call	#_convertstring
0f400     FD 14 02 F6 | 	mov	arg02, result1
0f404     10 13 02 F6 | 	mov	arg01, local02
0f408     F4 99 B0 FD | 	call	#__system___string_cmp
0f40c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f410     00 1E 26 A6 |  if_e	not	local01, #0
0f414     A7 1E 62 FC | 	wrlong	local01, fp
0f418     64 00 90 FD | 	jmp	#LR__1183
0f41c                 | LR__1181
0f41c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
0f41c     08 4E 05 F1 | 	add	fp, #8
0f420     A7 1E 02 FB | 	rdlong	local01, fp
0f424     08 4E 85 F1 | 	sub	fp, #8
0f428     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f42c     14 4E 05 A1 |  if_e	add	fp, #20
0f430     A7 22 02 AB |  if_e	rdlong	local03, fp
0f434     14 4E 85 A1 |  if_e	sub	fp, #20
0f438     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f43c     3C 00 90 5D |  if_ne	jmp	#LR__1182
0f440     00 1E 06 F6 | 	mov	local01, #0
0f444     A7 12 02 FB | 	rdlong	arg01, fp
0f448     D4 D5 BF FD | 	call	#_convertstring
0f44c     FD 20 02 F6 | 	mov	local02, result1
0f450     0C 4E 05 F1 | 	add	fp, #12
0f454     A7 12 02 FB | 	rdlong	arg01, fp
0f458     0C 4E 85 F1 | 	sub	fp, #12
0f45c     C0 D5 BF FD | 	call	#_convertstring
0f460     FD 14 02 F6 | 	mov	arg02, result1
0f464     10 13 02 F6 | 	mov	arg01, local02
0f468     94 99 B0 FD | 	call	#__system___string_cmp
0f46c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f470     00 1E 26 A6 |  if_e	not	local01, #0
0f474     A7 1E 62 FC | 	wrlong	local01, fp
0f478     04 00 90 FD | 	jmp	#LR__1183
0f47c                 | LR__1182
0f47c     A7 00 68 FC | 	wrlong	#0, fp
0f480                 | LR__1183
0f480     08 4E 05 F1 | 	add	fp, #8
0f484     A7 38 68 FC | 	wrlong	#28, fp
0f488     08 4E 85 F1 | 	sub	fp, #8
0f48c     A7 12 02 F6 | 	mov	arg01, fp
0f490     E8 A4 BF FD | 	call	#_push
0f494     A7 F0 03 F6 | 	mov	ptra, fp
0f498     B2 00 A0 FD | 	call	#popregs_
0f49c                 | _do_eq_ret
0f49c     2D 00 64 FD | 	ret
0f4a0                 | 
0f4a0                 | ' 
0f4a0                 | ' sub do_gt
0f4a0                 | _do_gt
0f4a0     05 4A 05 F6 | 	mov	COUNT_, #5
0f4a4     A8 00 A0 FD | 	call	#pushregs_
0f4a8     18 F0 07 F1 | 	add	ptra, #24
0f4ac     34 A4 BF FD | 	call	#_pop
0f4b0     FD 1E 02 F6 | 	mov	local01, result1
0f4b4     FE 20 02 F6 | 	mov	local02, result2
0f4b8     FF 22 02 F6 | 	mov	local03, result3
0f4bc     0C 4E 05 F1 | 	add	fp, #12
0f4c0     A7 1E 62 FC | 	wrlong	local01, fp
0f4c4     04 4E 05 F1 | 	add	fp, #4
0f4c8     A7 20 62 FC | 	wrlong	local02, fp
0f4cc     04 4E 05 F1 | 	add	fp, #4
0f4d0     A7 22 62 FC | 	wrlong	local03, fp
0f4d4     14 4E 85 F1 | 	sub	fp, #20
0f4d8     08 A4 BF FD | 	call	#_pop
0f4dc     FF 22 02 F6 | 	mov	local03, result3
0f4e0     A7 FA 61 FC | 	wrlong	result1, fp
0f4e4     04 4E 05 F1 | 	add	fp, #4
0f4e8     A7 FC 61 FC | 	wrlong	result2, fp
0f4ec     04 4E 05 F1 | 	add	fp, #4
0f4f0     A7 22 62 FC | 	wrlong	local03, fp
0f4f4                 | ' t2=pop()
0f4f4                 | ' t1=pop()
0f4f4                 | ' 
0f4f4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0f4f4     08 4E 85 F1 | 	sub	fp, #8
0f4f8     1F 22 0E F2 | 	cmp	local03, #31 wz
0f4fc     14 4E 05 A1 |  if_e	add	fp, #20
0f500     A7 24 02 AB |  if_e	rdlong	local04, fp
0f504     14 4E 85 A1 |  if_e	sub	fp, #20
0f508     12 23 02 A6 |  if_e	mov	local03, local04
0f50c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f510     28 00 90 5D |  if_ne	jmp	#LR__1190
0f514     00 1E 06 F6 | 	mov	local01, #0
0f518     A7 12 02 FB | 	rdlong	arg01, fp
0f51c     0C 4E 05 F1 | 	add	fp, #12
0f520     A7 14 02 FB | 	rdlong	arg02, fp
0f524     0C 4E 85 F1 | 	sub	fp, #12
0f528     D4 98 B0 FD | 	call	#__system___string_cmp
0f52c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f530     00 1E 26 36 |  if_ae	not	local01, #0
0f534     A7 1E 62 FC | 	wrlong	local01, fp
0f538     1C 04 90 FD | 	jmp	#LR__1203
0f53c                 | LR__1190
0f53c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0f53c     08 4E 05 F1 | 	add	fp, #8
0f540     A7 1E 02 FB | 	rdlong	local01, fp
0f544     08 4E 85 F1 | 	sub	fp, #8
0f548     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f54c     14 4E 05 A1 |  if_e	add	fp, #20
0f550     A7 24 02 AB |  if_e	rdlong	local04, fp
0f554     14 4E 85 A1 |  if_e	sub	fp, #20
0f558     12 23 02 A6 |  if_e	mov	local03, local04
0f55c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f560     2C 00 90 5D |  if_ne	jmp	#LR__1191
0f564     00 1E 06 F6 | 	mov	local01, #0
0f568     A7 12 02 FB | 	rdlong	arg01, fp
0f56c     0C 4E 05 F1 | 	add	fp, #12
0f570     A7 14 02 FB | 	rdlong	arg02, fp
0f574     0C 4E 85 F1 | 	sub	fp, #12
0f578     01 16 66 F6 | 	neg	arg03, #1
0f57c     78 C7 B0 FD | 	call	#__system___float_cmp
0f580     01 FA 55 F2 | 	cmps	result1, #1 wc
0f584     00 1E 26 36 |  if_ae	not	local01, #0
0f588     A7 1E 62 FC | 	wrlong	local01, fp
0f58c     C8 03 90 FD | 	jmp	#LR__1203
0f590                 | LR__1191
0f590                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0f590     08 4E 05 F1 | 	add	fp, #8
0f594     A7 1E 02 FB | 	rdlong	local01, fp
0f598     08 4E 85 F1 | 	sub	fp, #8
0f59c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f5a0     14 4E 05 A1 |  if_e	add	fp, #20
0f5a4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f5a8     14 4E 85 A1 |  if_e	sub	fp, #20
0f5ac     12 23 02 A6 |  if_e	mov	local03, local04
0f5b0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f5b4     48 00 90 5D |  if_ne	jmp	#LR__1192
0f5b8     00 1E 06 F6 | 	mov	local01, #0
0f5bc     A7 20 02 FB | 	rdlong	local02, fp
0f5c0     0C 4E 05 F1 | 	add	fp, #12
0f5c4     A7 12 02 FB | 	rdlong	arg01, fp
0f5c8     0C 4E 85 F1 | 	sub	fp, #12
0f5cc     09 13 52 F6 | 	abs	arg01, arg01 wc
0f5d0     1F 26 C6 C9 |  if_b	decod	local05, #31
0f5d4     00 26 06 36 |  if_ae	mov	local05, #0
0f5d8     E4 BE B0 FD | 	call	#__system___float_fromuns
0f5dc     13 FB 61 F5 | 	xor	result1, local05
0f5e0     FD 14 02 F6 | 	mov	arg02, result1
0f5e4     10 13 02 F6 | 	mov	arg01, local02
0f5e8     01 16 66 F6 | 	neg	arg03, #1
0f5ec     08 C7 B0 FD | 	call	#__system___float_cmp
0f5f0     01 FA 55 F2 | 	cmps	result1, #1 wc
0f5f4     00 1E 26 36 |  if_ae	not	local01, #0
0f5f8     A7 1E 62 FC | 	wrlong	local01, fp
0f5fc     58 03 90 FD | 	jmp	#LR__1203
0f600                 | LR__1192
0f600                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0f600     08 4E 05 F1 | 	add	fp, #8
0f604     A7 1E 02 FB | 	rdlong	local01, fp
0f608     08 4E 85 F1 | 	sub	fp, #8
0f60c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f610     14 4E 05 A1 |  if_e	add	fp, #20
0f614     A7 24 02 AB |  if_e	rdlong	local04, fp
0f618     14 4E 85 A1 |  if_e	sub	fp, #20
0f61c     12 23 02 A6 |  if_e	mov	local03, local04
0f620     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f624     38 00 90 5D |  if_ne	jmp	#LR__1193
0f628     00 1E 06 F6 | 	mov	local01, #0
0f62c     A7 20 02 FB | 	rdlong	local02, fp
0f630     0C 4E 05 F1 | 	add	fp, #12
0f634     A7 12 02 FB | 	rdlong	arg01, fp
0f638     0C 4E 85 F1 | 	sub	fp, #12
0f63c     80 BE B0 FD | 	call	#__system___float_fromuns
0f640     FD 14 02 F6 | 	mov	arg02, result1
0f644     10 13 02 F6 | 	mov	arg01, local02
0f648     01 16 66 F6 | 	neg	arg03, #1
0f64c     A8 C6 B0 FD | 	call	#__system___float_cmp
0f650     01 FA 55 F2 | 	cmps	result1, #1 wc
0f654     00 1E 26 36 |  if_ae	not	local01, #0
0f658     A7 1E 62 FC | 	wrlong	local01, fp
0f65c     F8 02 90 FD | 	jmp	#LR__1203
0f660                 | LR__1193
0f660                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0f660     08 4E 05 F1 | 	add	fp, #8
0f664     A7 1E 02 FB | 	rdlong	local01, fp
0f668     08 4E 85 F1 | 	sub	fp, #8
0f66c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f670     14 4E 05 A1 |  if_e	add	fp, #20
0f674     A7 24 02 AB |  if_e	rdlong	local04, fp
0f678     14 4E 85 A1 |  if_e	sub	fp, #20
0f67c     12 23 02 A6 |  if_e	mov	local03, local04
0f680     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f684     44 00 90 5D |  if_ne	jmp	#LR__1194
0f688     00 1E 06 F6 | 	mov	local01, #0
0f68c     A7 12 02 FB | 	rdlong	arg01, fp
0f690     09 13 52 F6 | 	abs	arg01, arg01 wc
0f694     1F 26 C6 C9 |  if_b	decod	local05, #31
0f698     00 26 06 36 |  if_ae	mov	local05, #0
0f69c     20 BE B0 FD | 	call	#__system___float_fromuns
0f6a0     13 FB 61 F5 | 	xor	result1, local05
0f6a4     FD 12 02 F6 | 	mov	arg01, result1
0f6a8     0C 4E 05 F1 | 	add	fp, #12
0f6ac     A7 14 02 FB | 	rdlong	arg02, fp
0f6b0     0C 4E 85 F1 | 	sub	fp, #12
0f6b4     01 16 66 F6 | 	neg	arg03, #1
0f6b8     3C C6 B0 FD | 	call	#__system___float_cmp
0f6bc     01 FA 55 F2 | 	cmps	result1, #1 wc
0f6c0     00 1E 26 36 |  if_ae	not	local01, #0
0f6c4     A7 1E 62 FC | 	wrlong	local01, fp
0f6c8     8C 02 90 FD | 	jmp	#LR__1203
0f6cc                 | LR__1194
0f6cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0f6cc     08 4E 05 F1 | 	add	fp, #8
0f6d0     A7 1E 02 FB | 	rdlong	local01, fp
0f6d4     08 4E 85 F1 | 	sub	fp, #8
0f6d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f6dc     14 4E 05 A1 |  if_e	add	fp, #20
0f6e0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f6e4     14 4E 85 A1 |  if_e	sub	fp, #20
0f6e8     12 23 02 A6 |  if_e	mov	local03, local04
0f6ec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f6f0     24 00 90 5D |  if_ne	jmp	#LR__1195
0f6f4     00 1E 06 F6 | 	mov	local01, #0
0f6f8     A7 20 02 FB | 	rdlong	local02, fp
0f6fc     0C 4E 05 F1 | 	add	fp, #12
0f700     A7 22 02 FB | 	rdlong	local03, fp
0f704     0C 4E 85 F1 | 	sub	fp, #12
0f708     11 21 5A F2 | 	cmps	local02, local03 wcz
0f70c     01 1E 66 16 |  if_a	neg	local01, #1
0f710     A7 1E 62 FC | 	wrlong	local01, fp
0f714     40 02 90 FD | 	jmp	#LR__1203
0f718                 | LR__1195
0f718                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0f718     08 4E 05 F1 | 	add	fp, #8
0f71c     A7 1E 02 FB | 	rdlong	local01, fp
0f720     08 4E 85 F1 | 	sub	fp, #8
0f724     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f728     14 4E 05 A1 |  if_e	add	fp, #20
0f72c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f730     14 4E 85 A1 |  if_e	sub	fp, #20
0f734     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f738     24 00 90 5D |  if_ne	jmp	#LR__1196
0f73c     00 1E 06 F6 | 	mov	local01, #0
0f740     A7 20 02 FB | 	rdlong	local02, fp
0f744     0C 4E 05 F1 | 	add	fp, #12
0f748     A7 22 02 FB | 	rdlong	local03, fp
0f74c     0C 4E 85 F1 | 	sub	fp, #12
0f750     11 21 5A F2 | 	cmps	local02, local03 wcz
0f754     01 1E 66 16 |  if_a	neg	local01, #1
0f758     A7 1E 62 FC | 	wrlong	local01, fp
0f75c     F8 01 90 FD | 	jmp	#LR__1203
0f760                 | LR__1196
0f760                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0f760     08 4E 05 F1 | 	add	fp, #8
0f764     A7 1E 02 FB | 	rdlong	local01, fp
0f768     08 4E 85 F1 | 	sub	fp, #8
0f76c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f770     14 4E 05 A1 |  if_e	add	fp, #20
0f774     A7 22 02 AB |  if_e	rdlong	local03, fp
0f778     14 4E 85 A1 |  if_e	sub	fp, #20
0f77c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f780     34 00 90 5D |  if_ne	jmp	#LR__1197
0f784     00 1E 06 F6 | 	mov	local01, #0
0f788     A7 12 02 FB | 	rdlong	arg01, fp
0f78c     30 BD B0 FD | 	call	#__system___float_fromuns
0f790     FD 12 02 F6 | 	mov	arg01, result1
0f794     0C 4E 05 F1 | 	add	fp, #12
0f798     A7 14 02 FB | 	rdlong	arg02, fp
0f79c     0C 4E 85 F1 | 	sub	fp, #12
0f7a0     01 16 66 F6 | 	neg	arg03, #1
0f7a4     50 C5 B0 FD | 	call	#__system___float_cmp
0f7a8     01 FA 55 F2 | 	cmps	result1, #1 wc
0f7ac     00 1E 26 36 |  if_ae	not	local01, #0
0f7b0     A7 1E 62 FC | 	wrlong	local01, fp
0f7b4     A0 01 90 FD | 	jmp	#LR__1203
0f7b8                 | LR__1197
0f7b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0f7b8     08 4E 05 F1 | 	add	fp, #8
0f7bc     A7 1E 02 FB | 	rdlong	local01, fp
0f7c0     08 4E 85 F1 | 	sub	fp, #8
0f7c4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f7c8     14 4E 05 A1 |  if_e	add	fp, #20
0f7cc     A7 22 02 AB |  if_e	rdlong	local03, fp
0f7d0     14 4E 85 A1 |  if_e	sub	fp, #20
0f7d4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f7d8     24 00 90 5D |  if_ne	jmp	#LR__1198
0f7dc     00 1E 06 F6 | 	mov	local01, #0
0f7e0     A7 20 02 FB | 	rdlong	local02, fp
0f7e4     0C 4E 05 F1 | 	add	fp, #12
0f7e8     A7 22 02 FB | 	rdlong	local03, fp
0f7ec     0C 4E 85 F1 | 	sub	fp, #12
0f7f0     11 21 5A F2 | 	cmps	local02, local03 wcz
0f7f4     01 1E 66 16 |  if_a	neg	local01, #1
0f7f8     A7 1E 62 FC | 	wrlong	local01, fp
0f7fc     58 01 90 FD | 	jmp	#LR__1203
0f800                 | LR__1198
0f800                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0f800     08 4E 05 F1 | 	add	fp, #8
0f804     A7 1E 02 FB | 	rdlong	local01, fp
0f808     08 4E 85 F1 | 	sub	fp, #8
0f80c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f810     14 4E 05 A1 |  if_e	add	fp, #20
0f814     A7 22 02 AB |  if_e	rdlong	local03, fp
0f818     14 4E 85 A1 |  if_e	sub	fp, #20
0f81c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f820     24 00 90 5D |  if_ne	jmp	#LR__1199
0f824     00 1E 06 F6 | 	mov	local01, #0
0f828     A7 20 02 FB | 	rdlong	local02, fp
0f82c     0C 4E 05 F1 | 	add	fp, #12
0f830     A7 22 02 FB | 	rdlong	local03, fp
0f834     0C 4E 85 F1 | 	sub	fp, #12
0f838     11 21 1A F2 | 	cmp	local02, local03 wcz
0f83c     01 1E 66 16 |  if_a	neg	local01, #1
0f840     A7 1E 62 FC | 	wrlong	local01, fp
0f844     10 01 90 FD | 	jmp	#LR__1203
0f848                 | LR__1199
0f848                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
0f848     08 4E 05 F1 | 	add	fp, #8
0f84c     A7 1E 02 FB | 	rdlong	local01, fp
0f850     08 4E 85 F1 | 	sub	fp, #8
0f854     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f858     14 4E 05 A1 |  if_e	add	fp, #20
0f85c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f860     14 4E 85 A1 |  if_e	sub	fp, #20
0f864     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f868     30 00 90 5D |  if_ne	jmp	#LR__1200
0f86c     00 1E 06 F6 | 	mov	local01, #0
0f870     A7 12 02 FB | 	rdlong	arg01, fp
0f874     A8 D1 BF FD | 	call	#_convertstring
0f878     FD 12 02 F6 | 	mov	arg01, result1
0f87c     0C 4E 05 F1 | 	add	fp, #12
0f880     A7 14 02 FB | 	rdlong	arg02, fp
0f884     0C 4E 85 F1 | 	sub	fp, #12
0f888     74 95 B0 FD | 	call	#__system___string_cmp
0f88c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f890     00 1E 26 36 |  if_ae	not	local01, #0
0f894     A7 1E 62 FC | 	wrlong	local01, fp
0f898     BC 00 90 FD | 	jmp	#LR__1203
0f89c                 | LR__1200
0f89c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
0f89c     08 4E 05 F1 | 	add	fp, #8
0f8a0     A7 1E 02 FB | 	rdlong	local01, fp
0f8a4     08 4E 85 F1 | 	sub	fp, #8
0f8a8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f8ac     14 4E 05 A1 |  if_e	add	fp, #20
0f8b0     A7 22 02 AB |  if_e	rdlong	local03, fp
0f8b4     14 4E 85 A1 |  if_e	sub	fp, #20
0f8b8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f8bc     34 00 90 5D |  if_ne	jmp	#LR__1201
0f8c0     00 1E 06 F6 | 	mov	local01, #0
0f8c4     A7 20 02 FB | 	rdlong	local02, fp
0f8c8     0C 4E 05 F1 | 	add	fp, #12
0f8cc     A7 12 02 FB | 	rdlong	arg01, fp
0f8d0     0C 4E 85 F1 | 	sub	fp, #12
0f8d4     48 D1 BF FD | 	call	#_convertstring
0f8d8     FD 14 02 F6 | 	mov	arg02, result1
0f8dc     10 13 02 F6 | 	mov	arg01, local02
0f8e0     1C 95 B0 FD | 	call	#__system___string_cmp
0f8e4     01 FA 55 F2 | 	cmps	result1, #1 wc
0f8e8     00 1E 26 36 |  if_ae	not	local01, #0
0f8ec     A7 1E 62 FC | 	wrlong	local01, fp
0f8f0     64 00 90 FD | 	jmp	#LR__1203
0f8f4                 | LR__1201
0f8f4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
0f8f4     08 4E 05 F1 | 	add	fp, #8
0f8f8     A7 1E 02 FB | 	rdlong	local01, fp
0f8fc     08 4E 85 F1 | 	sub	fp, #8
0f900     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f904     14 4E 05 A1 |  if_e	add	fp, #20
0f908     A7 22 02 AB |  if_e	rdlong	local03, fp
0f90c     14 4E 85 A1 |  if_e	sub	fp, #20
0f910     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f914     3C 00 90 5D |  if_ne	jmp	#LR__1202
0f918     00 1E 06 F6 | 	mov	local01, #0
0f91c     A7 12 02 FB | 	rdlong	arg01, fp
0f920     FC D0 BF FD | 	call	#_convertstring
0f924     FD 20 02 F6 | 	mov	local02, result1
0f928     0C 4E 05 F1 | 	add	fp, #12
0f92c     A7 12 02 FB | 	rdlong	arg01, fp
0f930     0C 4E 85 F1 | 	sub	fp, #12
0f934     E8 D0 BF FD | 	call	#_convertstring
0f938     FD 14 02 F6 | 	mov	arg02, result1
0f93c     10 13 02 F6 | 	mov	arg01, local02
0f940     BC 94 B0 FD | 	call	#__system___string_cmp
0f944     01 FA 55 F2 | 	cmps	result1, #1 wc
0f948     00 1E 26 36 |  if_ae	not	local01, #0
0f94c     A7 1E 62 FC | 	wrlong	local01, fp
0f950     04 00 90 FD | 	jmp	#LR__1203
0f954                 | LR__1202
0f954     A7 00 68 FC | 	wrlong	#0, fp
0f958                 | LR__1203
0f958     08 4E 05 F1 | 	add	fp, #8
0f95c     A7 38 68 FC | 	wrlong	#28, fp
0f960     08 4E 85 F1 | 	sub	fp, #8
0f964     A7 12 02 F6 | 	mov	arg01, fp
0f968     10 A0 BF FD | 	call	#_push
0f96c     A7 F0 03 F6 | 	mov	ptra, fp
0f970     B2 00 A0 FD | 	call	#popregs_
0f974                 | _do_gt_ret
0f974     2D 00 64 FD | 	ret
0f978                 | 
0f978                 | ' 
0f978                 | ' sub do_lt
0f978                 | _do_lt
0f978     05 4A 05 F6 | 	mov	COUNT_, #5
0f97c     A8 00 A0 FD | 	call	#pushregs_
0f980     18 F0 07 F1 | 	add	ptra, #24
0f984     5C 9F BF FD | 	call	#_pop
0f988     FD 1E 02 F6 | 	mov	local01, result1
0f98c     FE 20 02 F6 | 	mov	local02, result2
0f990     FF 22 02 F6 | 	mov	local03, result3
0f994     0C 4E 05 F1 | 	add	fp, #12
0f998     A7 1E 62 FC | 	wrlong	local01, fp
0f99c     04 4E 05 F1 | 	add	fp, #4
0f9a0     A7 20 62 FC | 	wrlong	local02, fp
0f9a4     04 4E 05 F1 | 	add	fp, #4
0f9a8     A7 22 62 FC | 	wrlong	local03, fp
0f9ac     14 4E 85 F1 | 	sub	fp, #20
0f9b0     30 9F BF FD | 	call	#_pop
0f9b4     FF 22 02 F6 | 	mov	local03, result3
0f9b8     A7 FA 61 FC | 	wrlong	result1, fp
0f9bc     04 4E 05 F1 | 	add	fp, #4
0f9c0     A7 FC 61 FC | 	wrlong	result2, fp
0f9c4     04 4E 05 F1 | 	add	fp, #4
0f9c8     A7 22 62 FC | 	wrlong	local03, fp
0f9cc                 | ' t2=pop()
0f9cc                 | ' t1=pop()
0f9cc                 | ' 
0f9cc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0f9cc     08 4E 85 F1 | 	sub	fp, #8
0f9d0     1F 22 0E F2 | 	cmp	local03, #31 wz
0f9d4     14 4E 05 A1 |  if_e	add	fp, #20
0f9d8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f9dc     14 4E 85 A1 |  if_e	sub	fp, #20
0f9e0     12 23 02 A6 |  if_e	mov	local03, local04
0f9e4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f9e8     28 00 90 5D |  if_ne	jmp	#LR__1210
0f9ec     00 1E 06 F6 | 	mov	local01, #0
0f9f0     A7 12 02 FB | 	rdlong	arg01, fp
0f9f4     0C 4E 05 F1 | 	add	fp, #12
0f9f8     A7 14 02 FB | 	rdlong	arg02, fp
0f9fc     0C 4E 85 F1 | 	sub	fp, #12
0fa00     FC 93 B0 FD | 	call	#__system___string_cmp
0fa04     00 FA 55 F2 | 	cmps	result1, #0 wc
0fa08     00 1E 26 C6 |  if_b	not	local01, #0
0fa0c     A7 1E 62 FC | 	wrlong	local01, fp
0fa10     0C 04 90 FD | 	jmp	#LR__1223
0fa14                 | LR__1210
0fa14                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0fa14     08 4E 05 F1 | 	add	fp, #8
0fa18     A7 1E 02 FB | 	rdlong	local01, fp
0fa1c     08 4E 85 F1 | 	sub	fp, #8
0fa20     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fa24     14 4E 05 A1 |  if_e	add	fp, #20
0fa28     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa2c     14 4E 85 A1 |  if_e	sub	fp, #20
0fa30     12 23 02 A6 |  if_e	mov	local03, local04
0fa34     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fa38     2C 00 90 5D |  if_ne	jmp	#LR__1211
0fa3c     00 1E 06 F6 | 	mov	local01, #0
0fa40     A7 12 02 FB | 	rdlong	arg01, fp
0fa44     0C 4E 05 F1 | 	add	fp, #12
0fa48     A7 14 02 FB | 	rdlong	arg02, fp
0fa4c     0C 4E 85 F1 | 	sub	fp, #12
0fa50     01 16 06 F6 | 	mov	arg03, #1
0fa54     A0 C2 B0 FD | 	call	#__system___float_cmp
0fa58     00 FA 55 F2 | 	cmps	result1, #0 wc
0fa5c     00 1E 26 C6 |  if_b	not	local01, #0
0fa60     A7 1E 62 FC | 	wrlong	local01, fp
0fa64     B8 03 90 FD | 	jmp	#LR__1223
0fa68                 | LR__1211
0fa68                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0fa68     08 4E 05 F1 | 	add	fp, #8
0fa6c     A7 1E 02 FB | 	rdlong	local01, fp
0fa70     08 4E 85 F1 | 	sub	fp, #8
0fa74     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fa78     14 4E 05 A1 |  if_e	add	fp, #20
0fa7c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa80     14 4E 85 A1 |  if_e	sub	fp, #20
0fa84     12 23 02 A6 |  if_e	mov	local03, local04
0fa88     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fa8c     48 00 90 5D |  if_ne	jmp	#LR__1212
0fa90     00 1E 06 F6 | 	mov	local01, #0
0fa94     A7 20 02 FB | 	rdlong	local02, fp
0fa98     0C 4E 05 F1 | 	add	fp, #12
0fa9c     A7 12 02 FB | 	rdlong	arg01, fp
0faa0     0C 4E 85 F1 | 	sub	fp, #12
0faa4     09 13 52 F6 | 	abs	arg01, arg01 wc
0faa8     1F 26 C6 C9 |  if_b	decod	local05, #31
0faac     00 26 06 36 |  if_ae	mov	local05, #0
0fab0     0C BA B0 FD | 	call	#__system___float_fromuns
0fab4     13 FB 61 F5 | 	xor	result1, local05
0fab8     FD 14 02 F6 | 	mov	arg02, result1
0fabc     10 13 02 F6 | 	mov	arg01, local02
0fac0     01 16 06 F6 | 	mov	arg03, #1
0fac4     30 C2 B0 FD | 	call	#__system___float_cmp
0fac8     00 FA 55 F2 | 	cmps	result1, #0 wc
0facc     00 1E 26 C6 |  if_b	not	local01, #0
0fad0     A7 1E 62 FC | 	wrlong	local01, fp
0fad4     48 03 90 FD | 	jmp	#LR__1223
0fad8                 | LR__1212
0fad8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0fad8     08 4E 05 F1 | 	add	fp, #8
0fadc     A7 1E 02 FB | 	rdlong	local01, fp
0fae0     08 4E 85 F1 | 	sub	fp, #8
0fae4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fae8     14 4E 05 A1 |  if_e	add	fp, #20
0faec     A7 24 02 AB |  if_e	rdlong	local04, fp
0faf0     14 4E 85 A1 |  if_e	sub	fp, #20
0faf4     12 23 02 A6 |  if_e	mov	local03, local04
0faf8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fafc     38 00 90 5D |  if_ne	jmp	#LR__1213
0fb00     00 1E 06 F6 | 	mov	local01, #0
0fb04     A7 20 02 FB | 	rdlong	local02, fp
0fb08     0C 4E 05 F1 | 	add	fp, #12
0fb0c     A7 12 02 FB | 	rdlong	arg01, fp
0fb10     0C 4E 85 F1 | 	sub	fp, #12
0fb14     A8 B9 B0 FD | 	call	#__system___float_fromuns
0fb18     FD 14 02 F6 | 	mov	arg02, result1
0fb1c     10 13 02 F6 | 	mov	arg01, local02
0fb20     01 16 06 F6 | 	mov	arg03, #1
0fb24     D0 C1 B0 FD | 	call	#__system___float_cmp
0fb28     00 FA 55 F2 | 	cmps	result1, #0 wc
0fb2c     00 1E 26 C6 |  if_b	not	local01, #0
0fb30     A7 1E 62 FC | 	wrlong	local01, fp
0fb34     E8 02 90 FD | 	jmp	#LR__1223
0fb38                 | LR__1213
0fb38                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0fb38     08 4E 05 F1 | 	add	fp, #8
0fb3c     A7 1E 02 FB | 	rdlong	local01, fp
0fb40     08 4E 85 F1 | 	sub	fp, #8
0fb44     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fb48     14 4E 05 A1 |  if_e	add	fp, #20
0fb4c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fb50     14 4E 85 A1 |  if_e	sub	fp, #20
0fb54     12 23 02 A6 |  if_e	mov	local03, local04
0fb58     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fb5c     44 00 90 5D |  if_ne	jmp	#LR__1214
0fb60     00 1E 06 F6 | 	mov	local01, #0
0fb64     A7 12 02 FB | 	rdlong	arg01, fp
0fb68     09 13 52 F6 | 	abs	arg01, arg01 wc
0fb6c     1F 26 C6 C9 |  if_b	decod	local05, #31
0fb70     00 26 06 36 |  if_ae	mov	local05, #0
0fb74     48 B9 B0 FD | 	call	#__system___float_fromuns
0fb78     13 FB 61 F5 | 	xor	result1, local05
0fb7c     FD 12 02 F6 | 	mov	arg01, result1
0fb80     0C 4E 05 F1 | 	add	fp, #12
0fb84     A7 14 02 FB | 	rdlong	arg02, fp
0fb88     0C 4E 85 F1 | 	sub	fp, #12
0fb8c     01 16 06 F6 | 	mov	arg03, #1
0fb90     64 C1 B0 FD | 	call	#__system___float_cmp
0fb94     00 FA 55 F2 | 	cmps	result1, #0 wc
0fb98     00 1E 26 C6 |  if_b	not	local01, #0
0fb9c     A7 1E 62 FC | 	wrlong	local01, fp
0fba0     7C 02 90 FD | 	jmp	#LR__1223
0fba4                 | LR__1214
0fba4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0fba4     08 4E 05 F1 | 	add	fp, #8
0fba8     A7 1E 02 FB | 	rdlong	local01, fp
0fbac     08 4E 85 F1 | 	sub	fp, #8
0fbb0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fbb4     14 4E 05 A1 |  if_e	add	fp, #20
0fbb8     A7 24 02 AB |  if_e	rdlong	local04, fp
0fbbc     14 4E 85 A1 |  if_e	sub	fp, #20
0fbc0     12 23 02 A6 |  if_e	mov	local03, local04
0fbc4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fbc8     20 00 90 5D |  if_ne	jmp	#LR__1215
0fbcc     A7 20 02 FB | 	rdlong	local02, fp
0fbd0     0C 4E 05 F1 | 	add	fp, #12
0fbd4     A7 22 02 FB | 	rdlong	local03, fp
0fbd8     0C 4E 85 F1 | 	sub	fp, #12
0fbdc     11 21 52 F2 | 	cmps	local02, local03 wc
0fbe0     0F 1F A2 F1 | 	subx	local01, local01
0fbe4     A7 1E 62 FC | 	wrlong	local01, fp
0fbe8     34 02 90 FD | 	jmp	#LR__1223
0fbec                 | LR__1215
0fbec                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0fbec     08 4E 05 F1 | 	add	fp, #8
0fbf0     A7 1E 02 FB | 	rdlong	local01, fp
0fbf4     08 4E 85 F1 | 	sub	fp, #8
0fbf8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fbfc     14 4E 05 A1 |  if_e	add	fp, #20
0fc00     A7 24 02 AB |  if_e	rdlong	local04, fp
0fc04     14 4E 85 A1 |  if_e	sub	fp, #20
0fc08     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0fc0c     20 00 90 5D |  if_ne	jmp	#LR__1216
0fc10     A7 20 02 FB | 	rdlong	local02, fp
0fc14     0C 4E 05 F1 | 	add	fp, #12
0fc18     A7 22 02 FB | 	rdlong	local03, fp
0fc1c     0C 4E 85 F1 | 	sub	fp, #12
0fc20     11 21 52 F2 | 	cmps	local02, local03 wc
0fc24     0F 1F A2 F1 | 	subx	local01, local01
0fc28     A7 1E 62 FC | 	wrlong	local01, fp
0fc2c     F0 01 90 FD | 	jmp	#LR__1223
0fc30                 | LR__1216
0fc30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0fc30     08 4E 05 F1 | 	add	fp, #8
0fc34     A7 1E 02 FB | 	rdlong	local01, fp
0fc38     08 4E 85 F1 | 	sub	fp, #8
0fc3c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fc40     14 4E 05 A1 |  if_e	add	fp, #20
0fc44     A7 22 02 AB |  if_e	rdlong	local03, fp
0fc48     14 4E 85 A1 |  if_e	sub	fp, #20
0fc4c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fc50     34 00 90 5D |  if_ne	jmp	#LR__1217
0fc54     00 1E 06 F6 | 	mov	local01, #0
0fc58     A7 12 02 FB | 	rdlong	arg01, fp
0fc5c     60 B8 B0 FD | 	call	#__system___float_fromuns
0fc60     FD 12 02 F6 | 	mov	arg01, result1
0fc64     0C 4E 05 F1 | 	add	fp, #12
0fc68     A7 14 02 FB | 	rdlong	arg02, fp
0fc6c     0C 4E 85 F1 | 	sub	fp, #12
0fc70     01 16 06 F6 | 	mov	arg03, #1
0fc74     80 C0 B0 FD | 	call	#__system___float_cmp
0fc78     00 FA 55 F2 | 	cmps	result1, #0 wc
0fc7c     00 1E 26 C6 |  if_b	not	local01, #0
0fc80     A7 1E 62 FC | 	wrlong	local01, fp
0fc84     98 01 90 FD | 	jmp	#LR__1223
0fc88                 | LR__1217
0fc88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0fc88     08 4E 05 F1 | 	add	fp, #8
0fc8c     A7 1E 02 FB | 	rdlong	local01, fp
0fc90     08 4E 85 F1 | 	sub	fp, #8
0fc94     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fc98     14 4E 05 A1 |  if_e	add	fp, #20
0fc9c     A7 22 02 AB |  if_e	rdlong	local03, fp
0fca0     14 4E 85 A1 |  if_e	sub	fp, #20
0fca4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fca8     20 00 90 5D |  if_ne	jmp	#LR__1218
0fcac     A7 20 02 FB | 	rdlong	local02, fp
0fcb0     0C 4E 05 F1 | 	add	fp, #12
0fcb4     A7 22 02 FB | 	rdlong	local03, fp
0fcb8     0C 4E 85 F1 | 	sub	fp, #12
0fcbc     11 21 52 F2 | 	cmps	local02, local03 wc
0fcc0     0F 1F A2 F1 | 	subx	local01, local01
0fcc4     A7 1E 62 FC | 	wrlong	local01, fp
0fcc8     54 01 90 FD | 	jmp	#LR__1223
0fccc                 | LR__1218
0fccc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0fccc     08 4E 05 F1 | 	add	fp, #8
0fcd0     A7 1E 02 FB | 	rdlong	local01, fp
0fcd4     08 4E 85 F1 | 	sub	fp, #8
0fcd8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fcdc     14 4E 05 A1 |  if_e	add	fp, #20
0fce0     A7 22 02 AB |  if_e	rdlong	local03, fp
0fce4     14 4E 85 A1 |  if_e	sub	fp, #20
0fce8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fcec     20 00 90 5D |  if_ne	jmp	#LR__1219
0fcf0     A7 20 02 FB | 	rdlong	local02, fp
0fcf4     0C 4E 05 F1 | 	add	fp, #12
0fcf8     A7 22 02 FB | 	rdlong	local03, fp
0fcfc     0C 4E 85 F1 | 	sub	fp, #12
0fd00     11 21 12 F2 | 	cmp	local02, local03 wc
0fd04     0F 1F A2 F1 | 	subx	local01, local01
0fd08     A7 1E 62 FC | 	wrlong	local01, fp
0fd0c     10 01 90 FD | 	jmp	#LR__1223
0fd10                 | LR__1219
0fd10                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
0fd10     08 4E 05 F1 | 	add	fp, #8
0fd14     A7 1E 02 FB | 	rdlong	local01, fp
0fd18     08 4E 85 F1 | 	sub	fp, #8
0fd1c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fd20     14 4E 05 A1 |  if_e	add	fp, #20
0fd24     A7 22 02 AB |  if_e	rdlong	local03, fp
0fd28     14 4E 85 A1 |  if_e	sub	fp, #20
0fd2c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fd30     30 00 90 5D |  if_ne	jmp	#LR__1220
0fd34     00 1E 06 F6 | 	mov	local01, #0
0fd38     A7 12 02 FB | 	rdlong	arg01, fp
0fd3c     E0 CC BF FD | 	call	#_convertstring
0fd40     FD 12 02 F6 | 	mov	arg01, result1
0fd44     0C 4E 05 F1 | 	add	fp, #12
0fd48     A7 14 02 FB | 	rdlong	arg02, fp
0fd4c     0C 4E 85 F1 | 	sub	fp, #12
0fd50     AC 90 B0 FD | 	call	#__system___string_cmp
0fd54     00 FA 55 F2 | 	cmps	result1, #0 wc
0fd58     00 1E 26 C6 |  if_b	not	local01, #0
0fd5c     A7 1E 62 FC | 	wrlong	local01, fp
0fd60     BC 00 90 FD | 	jmp	#LR__1223
0fd64                 | LR__1220
0fd64                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
0fd64     08 4E 05 F1 | 	add	fp, #8
0fd68     A7 1E 02 FB | 	rdlong	local01, fp
0fd6c     08 4E 85 F1 | 	sub	fp, #8
0fd70     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fd74     14 4E 05 A1 |  if_e	add	fp, #20
0fd78     A7 22 02 AB |  if_e	rdlong	local03, fp
0fd7c     14 4E 85 A1 |  if_e	sub	fp, #20
0fd80     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fd84     34 00 90 5D |  if_ne	jmp	#LR__1221
0fd88     00 1E 06 F6 | 	mov	local01, #0
0fd8c     A7 20 02 FB | 	rdlong	local02, fp
0fd90     0C 4E 05 F1 | 	add	fp, #12
0fd94     A7 12 02 FB | 	rdlong	arg01, fp
0fd98     0C 4E 85 F1 | 	sub	fp, #12
0fd9c     80 CC BF FD | 	call	#_convertstring
0fda0     FD 14 02 F6 | 	mov	arg02, result1
0fda4     10 13 02 F6 | 	mov	arg01, local02
0fda8     54 90 B0 FD | 	call	#__system___string_cmp
0fdac     00 FA 55 F2 | 	cmps	result1, #0 wc
0fdb0     00 1E 26 C6 |  if_b	not	local01, #0
0fdb4     A7 1E 62 FC | 	wrlong	local01, fp
0fdb8     64 00 90 FD | 	jmp	#LR__1223
0fdbc                 | LR__1221
0fdbc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
0fdbc     08 4E 05 F1 | 	add	fp, #8
0fdc0     A7 1E 02 FB | 	rdlong	local01, fp
0fdc4     08 4E 85 F1 | 	sub	fp, #8
0fdc8     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fdcc     14 4E 05 A1 |  if_e	add	fp, #20
0fdd0     A7 22 02 AB |  if_e	rdlong	local03, fp
0fdd4     14 4E 85 A1 |  if_e	sub	fp, #20
0fdd8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fddc     3C 00 90 5D |  if_ne	jmp	#LR__1222
0fde0     00 1E 06 F6 | 	mov	local01, #0
0fde4     A7 12 02 FB | 	rdlong	arg01, fp
0fde8     34 CC BF FD | 	call	#_convertstring
0fdec     FD 20 02 F6 | 	mov	local02, result1
0fdf0     0C 4E 05 F1 | 	add	fp, #12
0fdf4     A7 12 02 FB | 	rdlong	arg01, fp
0fdf8     0C 4E 85 F1 | 	sub	fp, #12
0fdfc     20 CC BF FD | 	call	#_convertstring
0fe00     FD 14 02 F6 | 	mov	arg02, result1
0fe04     10 13 02 F6 | 	mov	arg01, local02
0fe08     F4 8F B0 FD | 	call	#__system___string_cmp
0fe0c     00 FA 55 F2 | 	cmps	result1, #0 wc
0fe10     00 1E 26 C6 |  if_b	not	local01, #0
0fe14     A7 1E 62 FC | 	wrlong	local01, fp
0fe18     04 00 90 FD | 	jmp	#LR__1223
0fe1c                 | LR__1222
0fe1c     A7 00 68 FC | 	wrlong	#0, fp
0fe20                 | LR__1223
0fe20     08 4E 05 F1 | 	add	fp, #8
0fe24     A7 38 68 FC | 	wrlong	#28, fp
0fe28     08 4E 85 F1 | 	sub	fp, #8
0fe2c     A7 12 02 F6 | 	mov	arg01, fp
0fe30     48 9B BF FD | 	call	#_push
0fe34     A7 F0 03 F6 | 	mov	ptra, fp
0fe38     B2 00 A0 FD | 	call	#popregs_
0fe3c                 | _do_lt_ret
0fe3c     2D 00 64 FD | 	ret
0fe40                 | 
0fe40                 | ' 
0fe40                 | ' sub do_ge
0fe40                 | _do_ge
0fe40     05 4A 05 F6 | 	mov	COUNT_, #5
0fe44     A8 00 A0 FD | 	call	#pushregs_
0fe48     18 F0 07 F1 | 	add	ptra, #24
0fe4c     94 9A BF FD | 	call	#_pop
0fe50     FD 1E 02 F6 | 	mov	local01, result1
0fe54     FE 20 02 F6 | 	mov	local02, result2
0fe58     FF 22 02 F6 | 	mov	local03, result3
0fe5c     0C 4E 05 F1 | 	add	fp, #12
0fe60     A7 1E 62 FC | 	wrlong	local01, fp
0fe64     04 4E 05 F1 | 	add	fp, #4
0fe68     A7 20 62 FC | 	wrlong	local02, fp
0fe6c     04 4E 05 F1 | 	add	fp, #4
0fe70     A7 22 62 FC | 	wrlong	local03, fp
0fe74     14 4E 85 F1 | 	sub	fp, #20
0fe78     68 9A BF FD | 	call	#_pop
0fe7c     FF 22 02 F6 | 	mov	local03, result3
0fe80     A7 FA 61 FC | 	wrlong	result1, fp
0fe84     04 4E 05 F1 | 	add	fp, #4
0fe88     A7 FC 61 FC | 	wrlong	result2, fp
0fe8c     04 4E 05 F1 | 	add	fp, #4
0fe90     A7 22 62 FC | 	wrlong	local03, fp
0fe94                 | ' t2=pop()
0fe94                 | ' t1=pop()
0fe94                 | ' 
0fe94                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0fe94     08 4E 85 F1 | 	sub	fp, #8
0fe98     1F 22 0E F2 | 	cmp	local03, #31 wz
0fe9c     14 4E 05 A1 |  if_e	add	fp, #20
0fea0     A7 24 02 AB |  if_e	rdlong	local04, fp
0fea4     14 4E 85 A1 |  if_e	sub	fp, #20
0fea8     12 23 02 A6 |  if_e	mov	local03, local04
0feac     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0feb0     28 00 90 5D |  if_ne	jmp	#LR__1230
0feb4     00 1E 06 F6 | 	mov	local01, #0
0feb8     A7 12 02 FB | 	rdlong	arg01, fp
0febc     0C 4E 05 F1 | 	add	fp, #12
0fec0     A7 14 02 FB | 	rdlong	arg02, fp
0fec4     0C 4E 85 F1 | 	sub	fp, #12
0fec8     34 8F B0 FD | 	call	#__system___string_cmp
0fecc     00 FA 55 F2 | 	cmps	result1, #0 wc
0fed0     00 1E 26 36 |  if_ae	not	local01, #0
0fed4     A7 1E 62 FC | 	wrlong	local01, fp
0fed8     1C 04 90 FD | 	jmp	#LR__1243
0fedc                 | LR__1230
0fedc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0fedc     08 4E 05 F1 | 	add	fp, #8
0fee0     A7 1E 02 FB | 	rdlong	local01, fp
0fee4     08 4E 85 F1 | 	sub	fp, #8
0fee8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0feec     14 4E 05 A1 |  if_e	add	fp, #20
0fef0     A7 24 02 AB |  if_e	rdlong	local04, fp
0fef4     14 4E 85 A1 |  if_e	sub	fp, #20
0fef8     12 23 02 A6 |  if_e	mov	local03, local04
0fefc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ff00     2C 00 90 5D |  if_ne	jmp	#LR__1231
0ff04     00 1E 06 F6 | 	mov	local01, #0
0ff08     A7 12 02 FB | 	rdlong	arg01, fp
0ff0c     0C 4E 05 F1 | 	add	fp, #12
0ff10     A7 14 02 FB | 	rdlong	arg02, fp
0ff14     0C 4E 85 F1 | 	sub	fp, #12
0ff18     01 16 66 F6 | 	neg	arg03, #1
0ff1c     D8 BD B0 FD | 	call	#__system___float_cmp
0ff20     00 FA 55 F2 | 	cmps	result1, #0 wc
0ff24     00 1E 26 36 |  if_ae	not	local01, #0
0ff28     A7 1E 62 FC | 	wrlong	local01, fp
0ff2c     C8 03 90 FD | 	jmp	#LR__1243
0ff30                 | LR__1231
0ff30                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0ff30     08 4E 05 F1 | 	add	fp, #8
0ff34     A7 1E 02 FB | 	rdlong	local01, fp
0ff38     08 4E 85 F1 | 	sub	fp, #8
0ff3c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ff40     14 4E 05 A1 |  if_e	add	fp, #20
0ff44     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff48     14 4E 85 A1 |  if_e	sub	fp, #20
0ff4c     12 23 02 A6 |  if_e	mov	local03, local04
0ff50     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ff54     48 00 90 5D |  if_ne	jmp	#LR__1232
0ff58     00 1E 06 F6 | 	mov	local01, #0
0ff5c     A7 20 02 FB | 	rdlong	local02, fp
0ff60     0C 4E 05 F1 | 	add	fp, #12
0ff64     A7 12 02 FB | 	rdlong	arg01, fp
0ff68     0C 4E 85 F1 | 	sub	fp, #12
0ff6c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ff70     1F 26 C6 C9 |  if_b	decod	local05, #31
0ff74     00 26 06 36 |  if_ae	mov	local05, #0
0ff78     44 B5 B0 FD | 	call	#__system___float_fromuns
0ff7c     13 FB 61 F5 | 	xor	result1, local05
0ff80     FD 14 02 F6 | 	mov	arg02, result1
0ff84     10 13 02 F6 | 	mov	arg01, local02
0ff88     01 16 66 F6 | 	neg	arg03, #1
0ff8c     68 BD B0 FD | 	call	#__system___float_cmp
0ff90     00 FA 55 F2 | 	cmps	result1, #0 wc
0ff94     00 1E 26 36 |  if_ae	not	local01, #0
0ff98     A7 1E 62 FC | 	wrlong	local01, fp
0ff9c     58 03 90 FD | 	jmp	#LR__1243
0ffa0                 | LR__1232
0ffa0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0ffa0     08 4E 05 F1 | 	add	fp, #8
0ffa4     A7 1E 02 FB | 	rdlong	local01, fp
0ffa8     08 4E 85 F1 | 	sub	fp, #8
0ffac     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ffb0     14 4E 05 A1 |  if_e	add	fp, #20
0ffb4     A7 24 02 AB |  if_e	rdlong	local04, fp
0ffb8     14 4E 85 A1 |  if_e	sub	fp, #20
0ffbc     12 23 02 A6 |  if_e	mov	local03, local04
0ffc0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ffc4     38 00 90 5D |  if_ne	jmp	#LR__1233
0ffc8     00 1E 06 F6 | 	mov	local01, #0
0ffcc     A7 20 02 FB | 	rdlong	local02, fp
0ffd0     0C 4E 05 F1 | 	add	fp, #12
0ffd4     A7 12 02 FB | 	rdlong	arg01, fp
0ffd8     0C 4E 85 F1 | 	sub	fp, #12
0ffdc     E0 B4 B0 FD | 	call	#__system___float_fromuns
0ffe0     FD 14 02 F6 | 	mov	arg02, result1
0ffe4     10 13 02 F6 | 	mov	arg01, local02
0ffe8     01 16 66 F6 | 	neg	arg03, #1
0ffec     08 BD B0 FD | 	call	#__system___float_cmp
0fff0     00 FA 55 F2 | 	cmps	result1, #0 wc
0fff4     00 1E 26 36 |  if_ae	not	local01, #0
0fff8     A7 1E 62 FC | 	wrlong	local01, fp
0fffc     F8 02 90 FD | 	jmp	#LR__1243
10000                 | LR__1233
10000                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
10000     08 4E 05 F1 | 	add	fp, #8
10004     A7 1E 02 FB | 	rdlong	local01, fp
10008     08 4E 85 F1 | 	sub	fp, #8
1000c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10010     14 4E 05 A1 |  if_e	add	fp, #20
10014     A7 24 02 AB |  if_e	rdlong	local04, fp
10018     14 4E 85 A1 |  if_e	sub	fp, #20
1001c     12 23 02 A6 |  if_e	mov	local03, local04
10020     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10024     44 00 90 5D |  if_ne	jmp	#LR__1234
10028     00 1E 06 F6 | 	mov	local01, #0
1002c     A7 12 02 FB | 	rdlong	arg01, fp
10030     09 13 52 F6 | 	abs	arg01, arg01 wc
10034     1F 26 C6 C9 |  if_b	decod	local05, #31
10038     00 26 06 36 |  if_ae	mov	local05, #0
1003c     80 B4 B0 FD | 	call	#__system___float_fromuns
10040     13 FB 61 F5 | 	xor	result1, local05
10044     FD 12 02 F6 | 	mov	arg01, result1
10048     0C 4E 05 F1 | 	add	fp, #12
1004c     A7 14 02 FB | 	rdlong	arg02, fp
10050     0C 4E 85 F1 | 	sub	fp, #12
10054     01 16 66 F6 | 	neg	arg03, #1
10058     9C BC B0 FD | 	call	#__system___float_cmp
1005c     00 FA 55 F2 | 	cmps	result1, #0 wc
10060     00 1E 26 36 |  if_ae	not	local01, #0
10064     A7 1E 62 FC | 	wrlong	local01, fp
10068     8C 02 90 FD | 	jmp	#LR__1243
1006c                 | LR__1234
1006c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1006c     08 4E 05 F1 | 	add	fp, #8
10070     A7 1E 02 FB | 	rdlong	local01, fp
10074     08 4E 85 F1 | 	sub	fp, #8
10078     1C 1E 0E F2 | 	cmp	local01, #28 wz
1007c     14 4E 05 A1 |  if_e	add	fp, #20
10080     A7 24 02 AB |  if_e	rdlong	local04, fp
10084     14 4E 85 A1 |  if_e	sub	fp, #20
10088     12 23 02 A6 |  if_e	mov	local03, local04
1008c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10090     24 00 90 5D |  if_ne	jmp	#LR__1235
10094     00 1E 06 F6 | 	mov	local01, #0
10098     A7 20 02 FB | 	rdlong	local02, fp
1009c     0C 4E 05 F1 | 	add	fp, #12
100a0     A7 22 02 FB | 	rdlong	local03, fp
100a4     0C 4E 85 F1 | 	sub	fp, #12
100a8     11 21 52 F2 | 	cmps	local02, local03 wc
100ac     01 1E 66 36 |  if_ae	neg	local01, #1
100b0     A7 1E 62 FC | 	wrlong	local01, fp
100b4     40 02 90 FD | 	jmp	#LR__1243
100b8                 | LR__1235
100b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
100b8     08 4E 05 F1 | 	add	fp, #8
100bc     A7 1E 02 FB | 	rdlong	local01, fp
100c0     08 4E 85 F1 | 	sub	fp, #8
100c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
100c8     14 4E 05 A1 |  if_e	add	fp, #20
100cc     A7 24 02 AB |  if_e	rdlong	local04, fp
100d0     14 4E 85 A1 |  if_e	sub	fp, #20
100d4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
100d8     24 00 90 5D |  if_ne	jmp	#LR__1236
100dc     00 1E 06 F6 | 	mov	local01, #0
100e0     A7 20 02 FB | 	rdlong	local02, fp
100e4     0C 4E 05 F1 | 	add	fp, #12
100e8     A7 22 02 FB | 	rdlong	local03, fp
100ec     0C 4E 85 F1 | 	sub	fp, #12
100f0     11 21 52 F2 | 	cmps	local02, local03 wc
100f4     01 1E 66 36 |  if_ae	neg	local01, #1
100f8     A7 1E 62 FC | 	wrlong	local01, fp
100fc     F8 01 90 FD | 	jmp	#LR__1243
10100                 | LR__1236
10100                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
10100     08 4E 05 F1 | 	add	fp, #8
10104     A7 1E 02 FB | 	rdlong	local01, fp
10108     08 4E 85 F1 | 	sub	fp, #8
1010c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10110     14 4E 05 A1 |  if_e	add	fp, #20
10114     A7 22 02 AB |  if_e	rdlong	local03, fp
10118     14 4E 85 A1 |  if_e	sub	fp, #20
1011c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10120     34 00 90 5D |  if_ne	jmp	#LR__1237
10124     00 1E 06 F6 | 	mov	local01, #0
10128     A7 12 02 FB | 	rdlong	arg01, fp
1012c     90 B3 B0 FD | 	call	#__system___float_fromuns
10130     FD 12 02 F6 | 	mov	arg01, result1
10134     0C 4E 05 F1 | 	add	fp, #12
10138     A7 14 02 FB | 	rdlong	arg02, fp
1013c     0C 4E 85 F1 | 	sub	fp, #12
10140     01 16 66 F6 | 	neg	arg03, #1
10144     B0 BB B0 FD | 	call	#__system___float_cmp
10148     00 FA 55 F2 | 	cmps	result1, #0 wc
1014c     00 1E 26 36 |  if_ae	not	local01, #0
10150     A7 1E 62 FC | 	wrlong	local01, fp
10154     A0 01 90 FD | 	jmp	#LR__1243
10158                 | LR__1237
10158                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
10158     08 4E 05 F1 | 	add	fp, #8
1015c     A7 1E 02 FB | 	rdlong	local01, fp
10160     08 4E 85 F1 | 	sub	fp, #8
10164     1D 1E 0E F2 | 	cmp	local01, #29 wz
10168     14 4E 05 A1 |  if_e	add	fp, #20
1016c     A7 22 02 AB |  if_e	rdlong	local03, fp
10170     14 4E 85 A1 |  if_e	sub	fp, #20
10174     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10178     24 00 90 5D |  if_ne	jmp	#LR__1238
1017c     00 1E 06 F6 | 	mov	local01, #0
10180     A7 20 02 FB | 	rdlong	local02, fp
10184     0C 4E 05 F1 | 	add	fp, #12
10188     A7 22 02 FB | 	rdlong	local03, fp
1018c     0C 4E 85 F1 | 	sub	fp, #12
10190     11 21 52 F2 | 	cmps	local02, local03 wc
10194     01 1E 66 36 |  if_ae	neg	local01, #1
10198     A7 1E 62 FC | 	wrlong	local01, fp
1019c     58 01 90 FD | 	jmp	#LR__1243
101a0                 | LR__1238
101a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
101a0     08 4E 05 F1 | 	add	fp, #8
101a4     A7 1E 02 FB | 	rdlong	local01, fp
101a8     08 4E 85 F1 | 	sub	fp, #8
101ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
101b0     14 4E 05 A1 |  if_e	add	fp, #20
101b4     A7 22 02 AB |  if_e	rdlong	local03, fp
101b8     14 4E 85 A1 |  if_e	sub	fp, #20
101bc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
101c0     24 00 90 5D |  if_ne	jmp	#LR__1239
101c4     00 1E 06 F6 | 	mov	local01, #0
101c8     A7 20 02 FB | 	rdlong	local02, fp
101cc     0C 4E 05 F1 | 	add	fp, #12
101d0     A7 22 02 FB | 	rdlong	local03, fp
101d4     0C 4E 85 F1 | 	sub	fp, #12
101d8     11 21 12 F2 | 	cmp	local02, local03 wc
101dc     01 1E 66 36 |  if_ae	neg	local01, #1
101e0     A7 1E 62 FC | 	wrlong	local01, fp
101e4     10 01 90 FD | 	jmp	#LR__1243
101e8                 | LR__1239
101e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
101e8     08 4E 05 F1 | 	add	fp, #8
101ec     A7 1E 02 FB | 	rdlong	local01, fp
101f0     08 4E 85 F1 | 	sub	fp, #8
101f4     2B 1E 0E F2 | 	cmp	local01, #43 wz
101f8     14 4E 05 A1 |  if_e	add	fp, #20
101fc     A7 22 02 AB |  if_e	rdlong	local03, fp
10200     14 4E 85 A1 |  if_e	sub	fp, #20
10204     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10208     30 00 90 5D |  if_ne	jmp	#LR__1240
1020c     00 1E 06 F6 | 	mov	local01, #0
10210     A7 12 02 FB | 	rdlong	arg01, fp
10214     08 C8 BF FD | 	call	#_convertstring
10218     FD 12 02 F6 | 	mov	arg01, result1
1021c     0C 4E 05 F1 | 	add	fp, #12
10220     A7 14 02 FB | 	rdlong	arg02, fp
10224     0C 4E 85 F1 | 	sub	fp, #12
10228     D4 8B B0 FD | 	call	#__system___string_cmp
1022c     00 FA 55 F2 | 	cmps	result1, #0 wc
10230     00 1E 26 36 |  if_ae	not	local01, #0
10234     A7 1E 62 FC | 	wrlong	local01, fp
10238     BC 00 90 FD | 	jmp	#LR__1243
1023c                 | LR__1240
1023c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1023c     08 4E 05 F1 | 	add	fp, #8
10240     A7 1E 02 FB | 	rdlong	local01, fp
10244     08 4E 85 F1 | 	sub	fp, #8
10248     1F 1E 0E F2 | 	cmp	local01, #31 wz
1024c     14 4E 05 A1 |  if_e	add	fp, #20
10250     A7 22 02 AB |  if_e	rdlong	local03, fp
10254     14 4E 85 A1 |  if_e	sub	fp, #20
10258     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1025c     34 00 90 5D |  if_ne	jmp	#LR__1241
10260     00 1E 06 F6 | 	mov	local01, #0
10264     A7 20 02 FB | 	rdlong	local02, fp
10268     0C 4E 05 F1 | 	add	fp, #12
1026c     A7 12 02 FB | 	rdlong	arg01, fp
10270     0C 4E 85 F1 | 	sub	fp, #12
10274     A8 C7 BF FD | 	call	#_convertstring
10278     FD 14 02 F6 | 	mov	arg02, result1
1027c     10 13 02 F6 | 	mov	arg01, local02
10280     7C 8B B0 FD | 	call	#__system___string_cmp
10284     00 FA 55 F2 | 	cmps	result1, #0 wc
10288     00 1E 26 36 |  if_ae	not	local01, #0
1028c     A7 1E 62 FC | 	wrlong	local01, fp
10290     64 00 90 FD | 	jmp	#LR__1243
10294                 | LR__1241
10294                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
10294     08 4E 05 F1 | 	add	fp, #8
10298     A7 1E 02 FB | 	rdlong	local01, fp
1029c     08 4E 85 F1 | 	sub	fp, #8
102a0     2B 1E 0E F2 | 	cmp	local01, #43 wz
102a4     14 4E 05 A1 |  if_e	add	fp, #20
102a8     A7 22 02 AB |  if_e	rdlong	local03, fp
102ac     14 4E 85 A1 |  if_e	sub	fp, #20
102b0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
102b4     3C 00 90 5D |  if_ne	jmp	#LR__1242
102b8     00 1E 06 F6 | 	mov	local01, #0
102bc     A7 12 02 FB | 	rdlong	arg01, fp
102c0     5C C7 BF FD | 	call	#_convertstring
102c4     FD 20 02 F6 | 	mov	local02, result1
102c8     0C 4E 05 F1 | 	add	fp, #12
102cc     A7 12 02 FB | 	rdlong	arg01, fp
102d0     0C 4E 85 F1 | 	sub	fp, #12
102d4     48 C7 BF FD | 	call	#_convertstring
102d8     FD 14 02 F6 | 	mov	arg02, result1
102dc     10 13 02 F6 | 	mov	arg01, local02
102e0     1C 8B B0 FD | 	call	#__system___string_cmp
102e4     00 FA 55 F2 | 	cmps	result1, #0 wc
102e8     00 1E 26 36 |  if_ae	not	local01, #0
102ec     A7 1E 62 FC | 	wrlong	local01, fp
102f0     04 00 90 FD | 	jmp	#LR__1243
102f4                 | LR__1242
102f4     A7 00 68 FC | 	wrlong	#0, fp
102f8                 | LR__1243
102f8     08 4E 05 F1 | 	add	fp, #8
102fc     A7 38 68 FC | 	wrlong	#28, fp
10300     08 4E 85 F1 | 	sub	fp, #8
10304     A7 12 02 F6 | 	mov	arg01, fp
10308     70 96 BF FD | 	call	#_push
1030c     A7 F0 03 F6 | 	mov	ptra, fp
10310     B2 00 A0 FD | 	call	#popregs_
10314                 | _do_ge_ret
10314     2D 00 64 FD | 	ret
10318                 | 
10318                 | ' 
10318                 | ' sub do_le
10318                 | _do_le
10318     05 4A 05 F6 | 	mov	COUNT_, #5
1031c     A8 00 A0 FD | 	call	#pushregs_
10320     18 F0 07 F1 | 	add	ptra, #24
10324     BC 95 BF FD | 	call	#_pop
10328     FD 1E 02 F6 | 	mov	local01, result1
1032c     FE 20 02 F6 | 	mov	local02, result2
10330     FF 22 02 F6 | 	mov	local03, result3
10334     0C 4E 05 F1 | 	add	fp, #12
10338     A7 1E 62 FC | 	wrlong	local01, fp
1033c     04 4E 05 F1 | 	add	fp, #4
10340     A7 20 62 FC | 	wrlong	local02, fp
10344     04 4E 05 F1 | 	add	fp, #4
10348     A7 22 62 FC | 	wrlong	local03, fp
1034c     14 4E 85 F1 | 	sub	fp, #20
10350     90 95 BF FD | 	call	#_pop
10354     FF 22 02 F6 | 	mov	local03, result3
10358     A7 FA 61 FC | 	wrlong	result1, fp
1035c     04 4E 05 F1 | 	add	fp, #4
10360     A7 FC 61 FC | 	wrlong	result2, fp
10364     04 4E 05 F1 | 	add	fp, #4
10368     A7 22 62 FC | 	wrlong	local03, fp
1036c                 | ' t2=pop()
1036c                 | ' t1=pop()
1036c                 | ' 
1036c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1036c     08 4E 85 F1 | 	sub	fp, #8
10370     1F 22 0E F2 | 	cmp	local03, #31 wz
10374     14 4E 05 A1 |  if_e	add	fp, #20
10378     A7 24 02 AB |  if_e	rdlong	local04, fp
1037c     14 4E 85 A1 |  if_e	sub	fp, #20
10380     12 23 02 A6 |  if_e	mov	local03, local04
10384     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10388     28 00 90 5D |  if_ne	jmp	#LR__1250
1038c     00 1E 06 F6 | 	mov	local01, #0
10390     A7 12 02 FB | 	rdlong	arg01, fp
10394     0C 4E 05 F1 | 	add	fp, #12
10398     A7 14 02 FB | 	rdlong	arg02, fp
1039c     0C 4E 85 F1 | 	sub	fp, #12
103a0     5C 8A B0 FD | 	call	#__system___string_cmp
103a4     01 FA 55 F2 | 	cmps	result1, #1 wc
103a8     00 1E 26 C6 |  if_b	not	local01, #0
103ac     A7 1E 62 FC | 	wrlong	local01, fp
103b0     1C 04 90 FD | 	jmp	#LR__1263
103b4                 | LR__1250
103b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
103b4     08 4E 05 F1 | 	add	fp, #8
103b8     A7 1E 02 FB | 	rdlong	local01, fp
103bc     08 4E 85 F1 | 	sub	fp, #8
103c0     1E 1E 0E F2 | 	cmp	local01, #30 wz
103c4     14 4E 05 A1 |  if_e	add	fp, #20
103c8     A7 24 02 AB |  if_e	rdlong	local04, fp
103cc     14 4E 85 A1 |  if_e	sub	fp, #20
103d0     12 23 02 A6 |  if_e	mov	local03, local04
103d4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
103d8     2C 00 90 5D |  if_ne	jmp	#LR__1251
103dc     00 1E 06 F6 | 	mov	local01, #0
103e0     A7 12 02 FB | 	rdlong	arg01, fp
103e4     0C 4E 05 F1 | 	add	fp, #12
103e8     A7 14 02 FB | 	rdlong	arg02, fp
103ec     0C 4E 85 F1 | 	sub	fp, #12
103f0     01 16 06 F6 | 	mov	arg03, #1
103f4     00 B9 B0 FD | 	call	#__system___float_cmp
103f8     01 FA 55 F2 | 	cmps	result1, #1 wc
103fc     00 1E 26 C6 |  if_b	not	local01, #0
10400     A7 1E 62 FC | 	wrlong	local01, fp
10404     C8 03 90 FD | 	jmp	#LR__1263
10408                 | LR__1251
10408                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
10408     08 4E 05 F1 | 	add	fp, #8
1040c     A7 1E 02 FB | 	rdlong	local01, fp
10410     08 4E 85 F1 | 	sub	fp, #8
10414     1E 1E 0E F2 | 	cmp	local01, #30 wz
10418     14 4E 05 A1 |  if_e	add	fp, #20
1041c     A7 24 02 AB |  if_e	rdlong	local04, fp
10420     14 4E 85 A1 |  if_e	sub	fp, #20
10424     12 23 02 A6 |  if_e	mov	local03, local04
10428     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1042c     48 00 90 5D |  if_ne	jmp	#LR__1252
10430     00 1E 06 F6 | 	mov	local01, #0
10434     A7 20 02 FB | 	rdlong	local02, fp
10438     0C 4E 05 F1 | 	add	fp, #12
1043c     A7 12 02 FB | 	rdlong	arg01, fp
10440     0C 4E 85 F1 | 	sub	fp, #12
10444     09 13 52 F6 | 	abs	arg01, arg01 wc
10448     1F 26 C6 C9 |  if_b	decod	local05, #31
1044c     00 26 06 36 |  if_ae	mov	local05, #0
10450     6C B0 B0 FD | 	call	#__system___float_fromuns
10454     13 FB 61 F5 | 	xor	result1, local05
10458     FD 14 02 F6 | 	mov	arg02, result1
1045c     10 13 02 F6 | 	mov	arg01, local02
10460     01 16 06 F6 | 	mov	arg03, #1
10464     90 B8 B0 FD | 	call	#__system___float_cmp
10468     01 FA 55 F2 | 	cmps	result1, #1 wc
1046c     00 1E 26 C6 |  if_b	not	local01, #0
10470     A7 1E 62 FC | 	wrlong	local01, fp
10474     58 03 90 FD | 	jmp	#LR__1263
10478                 | LR__1252
10478                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
10478     08 4E 05 F1 | 	add	fp, #8
1047c     A7 1E 02 FB | 	rdlong	local01, fp
10480     08 4E 85 F1 | 	sub	fp, #8
10484     1E 1E 0E F2 | 	cmp	local01, #30 wz
10488     14 4E 05 A1 |  if_e	add	fp, #20
1048c     A7 24 02 AB |  if_e	rdlong	local04, fp
10490     14 4E 85 A1 |  if_e	sub	fp, #20
10494     12 23 02 A6 |  if_e	mov	local03, local04
10498     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1049c     38 00 90 5D |  if_ne	jmp	#LR__1253
104a0     00 1E 06 F6 | 	mov	local01, #0
104a4     A7 20 02 FB | 	rdlong	local02, fp
104a8     0C 4E 05 F1 | 	add	fp, #12
104ac     A7 12 02 FB | 	rdlong	arg01, fp
104b0     0C 4E 85 F1 | 	sub	fp, #12
104b4     08 B0 B0 FD | 	call	#__system___float_fromuns
104b8     FD 14 02 F6 | 	mov	arg02, result1
104bc     10 13 02 F6 | 	mov	arg01, local02
104c0     01 16 06 F6 | 	mov	arg03, #1
104c4     30 B8 B0 FD | 	call	#__system___float_cmp
104c8     01 FA 55 F2 | 	cmps	result1, #1 wc
104cc     00 1E 26 C6 |  if_b	not	local01, #0
104d0     A7 1E 62 FC | 	wrlong	local01, fp
104d4     F8 02 90 FD | 	jmp	#LR__1263
104d8                 | LR__1253
104d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
104d8     08 4E 05 F1 | 	add	fp, #8
104dc     A7 1E 02 FB | 	rdlong	local01, fp
104e0     08 4E 85 F1 | 	sub	fp, #8
104e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
104e8     14 4E 05 A1 |  if_e	add	fp, #20
104ec     A7 24 02 AB |  if_e	rdlong	local04, fp
104f0     14 4E 85 A1 |  if_e	sub	fp, #20
104f4     12 23 02 A6 |  if_e	mov	local03, local04
104f8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
104fc     44 00 90 5D |  if_ne	jmp	#LR__1254
10500     00 1E 06 F6 | 	mov	local01, #0
10504     A7 12 02 FB | 	rdlong	arg01, fp
10508     09 13 52 F6 | 	abs	arg01, arg01 wc
1050c     1F 26 C6 C9 |  if_b	decod	local05, #31
10510     00 26 06 36 |  if_ae	mov	local05, #0
10514     A8 AF B0 FD | 	call	#__system___float_fromuns
10518     13 FB 61 F5 | 	xor	result1, local05
1051c     FD 12 02 F6 | 	mov	arg01, result1
10520     0C 4E 05 F1 | 	add	fp, #12
10524     A7 14 02 FB | 	rdlong	arg02, fp
10528     0C 4E 85 F1 | 	sub	fp, #12
1052c     01 16 06 F6 | 	mov	arg03, #1
10530     C4 B7 B0 FD | 	call	#__system___float_cmp
10534     01 FA 55 F2 | 	cmps	result1, #1 wc
10538     00 1E 26 C6 |  if_b	not	local01, #0
1053c     A7 1E 62 FC | 	wrlong	local01, fp
10540     8C 02 90 FD | 	jmp	#LR__1263
10544                 | LR__1254
10544                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
10544     08 4E 05 F1 | 	add	fp, #8
10548     A7 1E 02 FB | 	rdlong	local01, fp
1054c     08 4E 85 F1 | 	sub	fp, #8
10550     1C 1E 0E F2 | 	cmp	local01, #28 wz
10554     14 4E 05 A1 |  if_e	add	fp, #20
10558     A7 24 02 AB |  if_e	rdlong	local04, fp
1055c     14 4E 85 A1 |  if_e	sub	fp, #20
10560     12 23 02 A6 |  if_e	mov	local03, local04
10564     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10568     24 00 90 5D |  if_ne	jmp	#LR__1255
1056c     00 1E 06 F6 | 	mov	local01, #0
10570     A7 20 02 FB | 	rdlong	local02, fp
10574     0C 4E 05 F1 | 	add	fp, #12
10578     A7 22 02 FB | 	rdlong	local03, fp
1057c     0C 4E 85 F1 | 	sub	fp, #12
10580     11 21 5A F2 | 	cmps	local02, local03 wcz
10584     01 1E 66 E6 |  if_be	neg	local01, #1
10588     A7 1E 62 FC | 	wrlong	local01, fp
1058c     40 02 90 FD | 	jmp	#LR__1263
10590                 | LR__1255
10590                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
10590     08 4E 05 F1 | 	add	fp, #8
10594     A7 1E 02 FB | 	rdlong	local01, fp
10598     08 4E 85 F1 | 	sub	fp, #8
1059c     1C 1E 0E F2 | 	cmp	local01, #28 wz
105a0     14 4E 05 A1 |  if_e	add	fp, #20
105a4     A7 24 02 AB |  if_e	rdlong	local04, fp
105a8     14 4E 85 A1 |  if_e	sub	fp, #20
105ac     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
105b0     24 00 90 5D |  if_ne	jmp	#LR__1256
105b4     00 1E 06 F6 | 	mov	local01, #0
105b8     A7 20 02 FB | 	rdlong	local02, fp
105bc     0C 4E 05 F1 | 	add	fp, #12
105c0     A7 22 02 FB | 	rdlong	local03, fp
105c4     0C 4E 85 F1 | 	sub	fp, #12
105c8     11 21 5A F2 | 	cmps	local02, local03 wcz
105cc     01 1E 66 E6 |  if_be	neg	local01, #1
105d0     A7 1E 62 FC | 	wrlong	local01, fp
105d4     F8 01 90 FD | 	jmp	#LR__1263
105d8                 | LR__1256
105d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
105d8     08 4E 05 F1 | 	add	fp, #8
105dc     A7 1E 02 FB | 	rdlong	local01, fp
105e0     08 4E 85 F1 | 	sub	fp, #8
105e4     1D 1E 0E F2 | 	cmp	local01, #29 wz
105e8     14 4E 05 A1 |  if_e	add	fp, #20
105ec     A7 22 02 AB |  if_e	rdlong	local03, fp
105f0     14 4E 85 A1 |  if_e	sub	fp, #20
105f4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
105f8     34 00 90 5D |  if_ne	jmp	#LR__1257
105fc     00 1E 06 F6 | 	mov	local01, #0
10600     A7 12 02 FB | 	rdlong	arg01, fp
10604     B8 AE B0 FD | 	call	#__system___float_fromuns
10608     FD 12 02 F6 | 	mov	arg01, result1
1060c     0C 4E 05 F1 | 	add	fp, #12
10610     A7 14 02 FB | 	rdlong	arg02, fp
10614     0C 4E 85 F1 | 	sub	fp, #12
10618     01 16 06 F6 | 	mov	arg03, #1
1061c     D8 B6 B0 FD | 	call	#__system___float_cmp
10620     01 FA 55 F2 | 	cmps	result1, #1 wc
10624     00 1E 26 C6 |  if_b	not	local01, #0
10628     A7 1E 62 FC | 	wrlong	local01, fp
1062c     A0 01 90 FD | 	jmp	#LR__1263
10630                 | LR__1257
10630                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
10630     08 4E 05 F1 | 	add	fp, #8
10634     A7 1E 02 FB | 	rdlong	local01, fp
10638     08 4E 85 F1 | 	sub	fp, #8
1063c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10640     14 4E 05 A1 |  if_e	add	fp, #20
10644     A7 22 02 AB |  if_e	rdlong	local03, fp
10648     14 4E 85 A1 |  if_e	sub	fp, #20
1064c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10650     24 00 90 5D |  if_ne	jmp	#LR__1258
10654     00 1E 06 F6 | 	mov	local01, #0
10658     A7 20 02 FB | 	rdlong	local02, fp
1065c     0C 4E 05 F1 | 	add	fp, #12
10660     A7 22 02 FB | 	rdlong	local03, fp
10664     0C 4E 85 F1 | 	sub	fp, #12
10668     11 21 5A F2 | 	cmps	local02, local03 wcz
1066c     01 1E 66 E6 |  if_be	neg	local01, #1
10670     A7 1E 62 FC | 	wrlong	local01, fp
10674     58 01 90 FD | 	jmp	#LR__1263
10678                 | LR__1258
10678                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
10678     08 4E 05 F1 | 	add	fp, #8
1067c     A7 1E 02 FB | 	rdlong	local01, fp
10680     08 4E 85 F1 | 	sub	fp, #8
10684     1D 1E 0E F2 | 	cmp	local01, #29 wz
10688     14 4E 05 A1 |  if_e	add	fp, #20
1068c     A7 22 02 AB |  if_e	rdlong	local03, fp
10690     14 4E 85 A1 |  if_e	sub	fp, #20
10694     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10698     24 00 90 5D |  if_ne	jmp	#LR__1259
1069c     00 1E 06 F6 | 	mov	local01, #0
106a0     A7 20 02 FB | 	rdlong	local02, fp
106a4     0C 4E 05 F1 | 	add	fp, #12
106a8     A7 22 02 FB | 	rdlong	local03, fp
106ac     0C 4E 85 F1 | 	sub	fp, #12
106b0     11 21 1A F2 | 	cmp	local02, local03 wcz
106b4     01 1E 66 E6 |  if_be	neg	local01, #1
106b8     A7 1E 62 FC | 	wrlong	local01, fp
106bc     10 01 90 FD | 	jmp	#LR__1263
106c0                 | LR__1259
106c0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
106c0     08 4E 05 F1 | 	add	fp, #8
106c4     A7 1E 02 FB | 	rdlong	local01, fp
106c8     08 4E 85 F1 | 	sub	fp, #8
106cc     2B 1E 0E F2 | 	cmp	local01, #43 wz
106d0     14 4E 05 A1 |  if_e	add	fp, #20
106d4     A7 22 02 AB |  if_e	rdlong	local03, fp
106d8     14 4E 85 A1 |  if_e	sub	fp, #20
106dc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
106e0     30 00 90 5D |  if_ne	jmp	#LR__1260
106e4     00 1E 06 F6 | 	mov	local01, #0
106e8     A7 12 02 FB | 	rdlong	arg01, fp
106ec     30 C3 BF FD | 	call	#_convertstring
106f0     FD 12 02 F6 | 	mov	arg01, result1
106f4     0C 4E 05 F1 | 	add	fp, #12
106f8     A7 14 02 FB | 	rdlong	arg02, fp
106fc     0C 4E 85 F1 | 	sub	fp, #12
10700     FC 86 B0 FD | 	call	#__system___string_cmp
10704     01 FA 55 F2 | 	cmps	result1, #1 wc
10708     00 1E 26 C6 |  if_b	not	local01, #0
1070c     A7 1E 62 FC | 	wrlong	local01, fp
10710     BC 00 90 FD | 	jmp	#LR__1263
10714                 | LR__1260
10714                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
10714     08 4E 05 F1 | 	add	fp, #8
10718     A7 1E 02 FB | 	rdlong	local01, fp
1071c     08 4E 85 F1 | 	sub	fp, #8
10720     1F 1E 0E F2 | 	cmp	local01, #31 wz
10724     14 4E 05 A1 |  if_e	add	fp, #20
10728     A7 22 02 AB |  if_e	rdlong	local03, fp
1072c     14 4E 85 A1 |  if_e	sub	fp, #20
10730     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10734     34 00 90 5D |  if_ne	jmp	#LR__1261
10738     00 1E 06 F6 | 	mov	local01, #0
1073c     A7 20 02 FB | 	rdlong	local02, fp
10740     0C 4E 05 F1 | 	add	fp, #12
10744     A7 12 02 FB | 	rdlong	arg01, fp
10748     0C 4E 85 F1 | 	sub	fp, #12
1074c     D0 C2 BF FD | 	call	#_convertstring
10750     FD 14 02 F6 | 	mov	arg02, result1
10754     10 13 02 F6 | 	mov	arg01, local02
10758     A4 86 B0 FD | 	call	#__system___string_cmp
1075c     01 FA 55 F2 | 	cmps	result1, #1 wc
10760     00 1E 26 C6 |  if_b	not	local01, #0
10764     A7 1E 62 FC | 	wrlong	local01, fp
10768     64 00 90 FD | 	jmp	#LR__1263
1076c                 | LR__1261
1076c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1076c     08 4E 05 F1 | 	add	fp, #8
10770     A7 1E 02 FB | 	rdlong	local01, fp
10774     08 4E 85 F1 | 	sub	fp, #8
10778     2B 1E 0E F2 | 	cmp	local01, #43 wz
1077c     14 4E 05 A1 |  if_e	add	fp, #20
10780     A7 22 02 AB |  if_e	rdlong	local03, fp
10784     14 4E 85 A1 |  if_e	sub	fp, #20
10788     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1078c     3C 00 90 5D |  if_ne	jmp	#LR__1262
10790     00 1E 06 F6 | 	mov	local01, #0
10794     A7 12 02 FB | 	rdlong	arg01, fp
10798     84 C2 BF FD | 	call	#_convertstring
1079c     FD 20 02 F6 | 	mov	local02, result1
107a0     0C 4E 05 F1 | 	add	fp, #12
107a4     A7 12 02 FB | 	rdlong	arg01, fp
107a8     0C 4E 85 F1 | 	sub	fp, #12
107ac     70 C2 BF FD | 	call	#_convertstring
107b0     FD 14 02 F6 | 	mov	arg02, result1
107b4     10 13 02 F6 | 	mov	arg01, local02
107b8     44 86 B0 FD | 	call	#__system___string_cmp
107bc     01 FA 55 F2 | 	cmps	result1, #1 wc
107c0     00 1E 26 C6 |  if_b	not	local01, #0
107c4     A7 1E 62 FC | 	wrlong	local01, fp
107c8     04 00 90 FD | 	jmp	#LR__1263
107cc                 | LR__1262
107cc     A7 00 68 FC | 	wrlong	#0, fp
107d0                 | LR__1263
107d0     08 4E 05 F1 | 	add	fp, #8
107d4     A7 38 68 FC | 	wrlong	#28, fp
107d8     08 4E 85 F1 | 	sub	fp, #8
107dc     A7 12 02 F6 | 	mov	arg01, fp
107e0     98 91 BF FD | 	call	#_push
107e4     A7 F0 03 F6 | 	mov	ptra, fp
107e8     B2 00 A0 FD | 	call	#popregs_
107ec                 | _do_le_ret
107ec     2D 00 64 FD | 	ret
107f0                 | 
107f0                 | ' 
107f0                 | ' 
107f0                 | ' sub do_ne
107f0                 | _do_ne
107f0     05 4A 05 F6 | 	mov	COUNT_, #5
107f4     A8 00 A0 FD | 	call	#pushregs_
107f8     18 F0 07 F1 | 	add	ptra, #24
107fc     E4 90 BF FD | 	call	#_pop
10800     FD 1E 02 F6 | 	mov	local01, result1
10804     FE 20 02 F6 | 	mov	local02, result2
10808     FF 22 02 F6 | 	mov	local03, result3
1080c     0C 4E 05 F1 | 	add	fp, #12
10810     A7 1E 62 FC | 	wrlong	local01, fp
10814     04 4E 05 F1 | 	add	fp, #4
10818     A7 20 62 FC | 	wrlong	local02, fp
1081c     04 4E 05 F1 | 	add	fp, #4
10820     A7 22 62 FC | 	wrlong	local03, fp
10824     14 4E 85 F1 | 	sub	fp, #20
10828     B8 90 BF FD | 	call	#_pop
1082c     FF 22 02 F6 | 	mov	local03, result3
10830     A7 FA 61 FC | 	wrlong	result1, fp
10834     04 4E 05 F1 | 	add	fp, #4
10838     A7 FC 61 FC | 	wrlong	result2, fp
1083c     04 4E 05 F1 | 	add	fp, #4
10840     A7 22 62 FC | 	wrlong	local03, fp
10844                 | ' t2=pop()
10844                 | ' t1=pop()
10844                 | ' 
10844                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
10844     08 4E 85 F1 | 	sub	fp, #8
10848     1F 22 0E F2 | 	cmp	local03, #31 wz
1084c     14 4E 05 A1 |  if_e	add	fp, #20
10850     A7 24 02 AB |  if_e	rdlong	local04, fp
10854     14 4E 85 A1 |  if_e	sub	fp, #20
10858     12 23 02 A6 |  if_e	mov	local03, local04
1085c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10860     28 00 90 5D |  if_ne	jmp	#LR__1270
10864     00 1E 06 F6 | 	mov	local01, #0
10868     A7 12 02 FB | 	rdlong	arg01, fp
1086c     0C 4E 05 F1 | 	add	fp, #12
10870     A7 14 02 FB | 	rdlong	arg02, fp
10874     0C 4E 85 F1 | 	sub	fp, #12
10878     84 85 B0 FD | 	call	#__system___string_cmp
1087c     00 FA 0D F2 | 	cmp	result1, #0 wz
10880     00 1E 26 56 |  if_ne	not	local01, #0
10884     A7 1E 62 FC | 	wrlong	local01, fp
10888     1C 04 90 FD | 	jmp	#LR__1283
1088c                 | LR__1270
1088c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1088c     08 4E 05 F1 | 	add	fp, #8
10890     A7 1E 02 FB | 	rdlong	local01, fp
10894     08 4E 85 F1 | 	sub	fp, #8
10898     1E 1E 0E F2 | 	cmp	local01, #30 wz
1089c     14 4E 05 A1 |  if_e	add	fp, #20
108a0     A7 24 02 AB |  if_e	rdlong	local04, fp
108a4     14 4E 85 A1 |  if_e	sub	fp, #20
108a8     12 23 02 A6 |  if_e	mov	local03, local04
108ac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
108b0     2C 00 90 5D |  if_ne	jmp	#LR__1271
108b4     00 1E 06 F6 | 	mov	local01, #0
108b8     A7 12 02 FB | 	rdlong	arg01, fp
108bc     0C 4E 05 F1 | 	add	fp, #12
108c0     A7 14 02 FB | 	rdlong	arg02, fp
108c4     0C 4E 85 F1 | 	sub	fp, #12
108c8     01 16 06 F6 | 	mov	arg03, #1
108cc     28 B4 B0 FD | 	call	#__system___float_cmp
108d0     00 FA 0D F2 | 	cmp	result1, #0 wz
108d4     00 1E 26 56 |  if_ne	not	local01, #0
108d8     A7 1E 62 FC | 	wrlong	local01, fp
108dc     C8 03 90 FD | 	jmp	#LR__1283
108e0                 | LR__1271
108e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
108e0     08 4E 05 F1 | 	add	fp, #8
108e4     A7 1E 02 FB | 	rdlong	local01, fp
108e8     08 4E 85 F1 | 	sub	fp, #8
108ec     1E 1E 0E F2 | 	cmp	local01, #30 wz
108f0     14 4E 05 A1 |  if_e	add	fp, #20
108f4     A7 24 02 AB |  if_e	rdlong	local04, fp
108f8     14 4E 85 A1 |  if_e	sub	fp, #20
108fc     12 23 02 A6 |  if_e	mov	local03, local04
10900     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10904     48 00 90 5D |  if_ne	jmp	#LR__1272
10908     00 1E 06 F6 | 	mov	local01, #0
1090c     A7 20 02 FB | 	rdlong	local02, fp
10910     0C 4E 05 F1 | 	add	fp, #12
10914     A7 12 02 FB | 	rdlong	arg01, fp
10918     0C 4E 85 F1 | 	sub	fp, #12
1091c     09 13 52 F6 | 	abs	arg01, arg01 wc
10920     1F 26 C6 C9 |  if_b	decod	local05, #31
10924     00 26 06 36 |  if_ae	mov	local05, #0
10928     94 AB B0 FD | 	call	#__system___float_fromuns
1092c     13 FB 61 F5 | 	xor	result1, local05
10930     FD 14 02 F6 | 	mov	arg02, result1
10934     10 13 02 F6 | 	mov	arg01, local02
10938     01 16 06 F6 | 	mov	arg03, #1
1093c     B8 B3 B0 FD | 	call	#__system___float_cmp
10940     00 FA 0D F2 | 	cmp	result1, #0 wz
10944     00 1E 26 56 |  if_ne	not	local01, #0
10948     A7 1E 62 FC | 	wrlong	local01, fp
1094c     58 03 90 FD | 	jmp	#LR__1283
10950                 | LR__1272
10950                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
10950     08 4E 05 F1 | 	add	fp, #8
10954     A7 1E 02 FB | 	rdlong	local01, fp
10958     08 4E 85 F1 | 	sub	fp, #8
1095c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10960     14 4E 05 A1 |  if_e	add	fp, #20
10964     A7 24 02 AB |  if_e	rdlong	local04, fp
10968     14 4E 85 A1 |  if_e	sub	fp, #20
1096c     12 23 02 A6 |  if_e	mov	local03, local04
10970     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10974     38 00 90 5D |  if_ne	jmp	#LR__1273
10978     00 1E 06 F6 | 	mov	local01, #0
1097c     A7 20 02 FB | 	rdlong	local02, fp
10980     0C 4E 05 F1 | 	add	fp, #12
10984     A7 12 02 FB | 	rdlong	arg01, fp
10988     0C 4E 85 F1 | 	sub	fp, #12
1098c     30 AB B0 FD | 	call	#__system___float_fromuns
10990     FD 14 02 F6 | 	mov	arg02, result1
10994     10 13 02 F6 | 	mov	arg01, local02
10998     01 16 06 F6 | 	mov	arg03, #1
1099c     58 B3 B0 FD | 	call	#__system___float_cmp
109a0     00 FA 0D F2 | 	cmp	result1, #0 wz
109a4     00 1E 26 56 |  if_ne	not	local01, #0
109a8     A7 1E 62 FC | 	wrlong	local01, fp
109ac     F8 02 90 FD | 	jmp	#LR__1283
109b0                 | LR__1273
109b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
109b0     08 4E 05 F1 | 	add	fp, #8
109b4     A7 1E 02 FB | 	rdlong	local01, fp
109b8     08 4E 85 F1 | 	sub	fp, #8
109bc     1C 1E 0E F2 | 	cmp	local01, #28 wz
109c0     14 4E 05 A1 |  if_e	add	fp, #20
109c4     A7 24 02 AB |  if_e	rdlong	local04, fp
109c8     14 4E 85 A1 |  if_e	sub	fp, #20
109cc     12 23 02 A6 |  if_e	mov	local03, local04
109d0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
109d4     44 00 90 5D |  if_ne	jmp	#LR__1274
109d8     00 1E 06 F6 | 	mov	local01, #0
109dc     A7 12 02 FB | 	rdlong	arg01, fp
109e0     09 13 52 F6 | 	abs	arg01, arg01 wc
109e4     1F 26 C6 C9 |  if_b	decod	local05, #31
109e8     00 26 06 36 |  if_ae	mov	local05, #0
109ec     D0 AA B0 FD | 	call	#__system___float_fromuns
109f0     13 FB 61 F5 | 	xor	result1, local05
109f4     FD 12 02 F6 | 	mov	arg01, result1
109f8     0C 4E 05 F1 | 	add	fp, #12
109fc     A7 14 02 FB | 	rdlong	arg02, fp
10a00     0C 4E 85 F1 | 	sub	fp, #12
10a04     01 16 06 F6 | 	mov	arg03, #1
10a08     EC B2 B0 FD | 	call	#__system___float_cmp
10a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
10a10     00 1E 26 56 |  if_ne	not	local01, #0
10a14     A7 1E 62 FC | 	wrlong	local01, fp
10a18     8C 02 90 FD | 	jmp	#LR__1283
10a1c                 | LR__1274
10a1c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
10a1c     08 4E 05 F1 | 	add	fp, #8
10a20     A7 1E 02 FB | 	rdlong	local01, fp
10a24     08 4E 85 F1 | 	sub	fp, #8
10a28     1C 1E 0E F2 | 	cmp	local01, #28 wz
10a2c     14 4E 05 A1 |  if_e	add	fp, #20
10a30     A7 24 02 AB |  if_e	rdlong	local04, fp
10a34     14 4E 85 A1 |  if_e	sub	fp, #20
10a38     12 23 02 A6 |  if_e	mov	local03, local04
10a3c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10a40     24 00 90 5D |  if_ne	jmp	#LR__1275
10a44     00 1E 06 F6 | 	mov	local01, #0
10a48     A7 20 02 FB | 	rdlong	local02, fp
10a4c     0C 4E 05 F1 | 	add	fp, #12
10a50     A7 22 02 FB | 	rdlong	local03, fp
10a54     0C 4E 85 F1 | 	sub	fp, #12
10a58     11 21 0A F2 | 	cmp	local02, local03 wz
10a5c     01 1E 66 56 |  if_ne	neg	local01, #1
10a60     A7 1E 62 FC | 	wrlong	local01, fp
10a64     40 02 90 FD | 	jmp	#LR__1283
10a68                 | LR__1275
10a68                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
10a68     08 4E 05 F1 | 	add	fp, #8
10a6c     A7 1E 02 FB | 	rdlong	local01, fp
10a70     08 4E 85 F1 | 	sub	fp, #8
10a74     1C 1E 0E F2 | 	cmp	local01, #28 wz
10a78     14 4E 05 A1 |  if_e	add	fp, #20
10a7c     A7 24 02 AB |  if_e	rdlong	local04, fp
10a80     14 4E 85 A1 |  if_e	sub	fp, #20
10a84     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10a88     24 00 90 5D |  if_ne	jmp	#LR__1276
10a8c     00 1E 06 F6 | 	mov	local01, #0
10a90     A7 20 02 FB | 	rdlong	local02, fp
10a94     0C 4E 05 F1 | 	add	fp, #12
10a98     A7 22 02 FB | 	rdlong	local03, fp
10a9c     0C 4E 85 F1 | 	sub	fp, #12
10aa0     11 21 0A F2 | 	cmp	local02, local03 wz
10aa4     01 1E 66 56 |  if_ne	neg	local01, #1
10aa8     A7 1E 62 FC | 	wrlong	local01, fp
10aac     F8 01 90 FD | 	jmp	#LR__1283
10ab0                 | LR__1276
10ab0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
10ab0     08 4E 05 F1 | 	add	fp, #8
10ab4     A7 1E 02 FB | 	rdlong	local01, fp
10ab8     08 4E 85 F1 | 	sub	fp, #8
10abc     1D 1E 0E F2 | 	cmp	local01, #29 wz
10ac0     14 4E 05 A1 |  if_e	add	fp, #20
10ac4     A7 22 02 AB |  if_e	rdlong	local03, fp
10ac8     14 4E 85 A1 |  if_e	sub	fp, #20
10acc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10ad0     34 00 90 5D |  if_ne	jmp	#LR__1277
10ad4     00 1E 06 F6 | 	mov	local01, #0
10ad8     A7 12 02 FB | 	rdlong	arg01, fp
10adc     E0 A9 B0 FD | 	call	#__system___float_fromuns
10ae0     FD 12 02 F6 | 	mov	arg01, result1
10ae4     0C 4E 05 F1 | 	add	fp, #12
10ae8     A7 14 02 FB | 	rdlong	arg02, fp
10aec     0C 4E 85 F1 | 	sub	fp, #12
10af0     01 16 06 F6 | 	mov	arg03, #1
10af4     00 B2 B0 FD | 	call	#__system___float_cmp
10af8     00 FA 0D F2 | 	cmp	result1, #0 wz
10afc     00 1E 26 56 |  if_ne	not	local01, #0
10b00     A7 1E 62 FC | 	wrlong	local01, fp
10b04     A0 01 90 FD | 	jmp	#LR__1283
10b08                 | LR__1277
10b08                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
10b08     08 4E 05 F1 | 	add	fp, #8
10b0c     A7 1E 02 FB | 	rdlong	local01, fp
10b10     08 4E 85 F1 | 	sub	fp, #8
10b14     1D 1E 0E F2 | 	cmp	local01, #29 wz
10b18     14 4E 05 A1 |  if_e	add	fp, #20
10b1c     A7 22 02 AB |  if_e	rdlong	local03, fp
10b20     14 4E 85 A1 |  if_e	sub	fp, #20
10b24     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10b28     24 00 90 5D |  if_ne	jmp	#LR__1278
10b2c     00 1E 06 F6 | 	mov	local01, #0
10b30     A7 20 02 FB | 	rdlong	local02, fp
10b34     0C 4E 05 F1 | 	add	fp, #12
10b38     A7 22 02 FB | 	rdlong	local03, fp
10b3c     0C 4E 85 F1 | 	sub	fp, #12
10b40     11 21 0A F2 | 	cmp	local02, local03 wz
10b44     01 1E 66 56 |  if_ne	neg	local01, #1
10b48     A7 1E 62 FC | 	wrlong	local01, fp
10b4c     58 01 90 FD | 	jmp	#LR__1283
10b50                 | LR__1278
10b50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
10b50     08 4E 05 F1 | 	add	fp, #8
10b54     A7 1E 02 FB | 	rdlong	local01, fp
10b58     08 4E 85 F1 | 	sub	fp, #8
10b5c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10b60     14 4E 05 A1 |  if_e	add	fp, #20
10b64     A7 22 02 AB |  if_e	rdlong	local03, fp
10b68     14 4E 85 A1 |  if_e	sub	fp, #20
10b6c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10b70     24 00 90 5D |  if_ne	jmp	#LR__1279
10b74     00 1E 06 F6 | 	mov	local01, #0
10b78     A7 20 02 FB | 	rdlong	local02, fp
10b7c     0C 4E 05 F1 | 	add	fp, #12
10b80     A7 22 02 FB | 	rdlong	local03, fp
10b84     0C 4E 85 F1 | 	sub	fp, #12
10b88     11 21 0A F2 | 	cmp	local02, local03 wz
10b8c     01 1E 66 56 |  if_ne	neg	local01, #1
10b90     A7 1E 62 FC | 	wrlong	local01, fp
10b94     10 01 90 FD | 	jmp	#LR__1283
10b98                 | LR__1279
10b98                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
10b98     08 4E 05 F1 | 	add	fp, #8
10b9c     A7 1E 02 FB | 	rdlong	local01, fp
10ba0     08 4E 85 F1 | 	sub	fp, #8
10ba4     2B 1E 0E F2 | 	cmp	local01, #43 wz
10ba8     14 4E 05 A1 |  if_e	add	fp, #20
10bac     A7 22 02 AB |  if_e	rdlong	local03, fp
10bb0     14 4E 85 A1 |  if_e	sub	fp, #20
10bb4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10bb8     30 00 90 5D |  if_ne	jmp	#LR__1280
10bbc     00 1E 06 F6 | 	mov	local01, #0
10bc0     A7 12 02 FB | 	rdlong	arg01, fp
10bc4     58 BE BF FD | 	call	#_convertstring
10bc8     FD 12 02 F6 | 	mov	arg01, result1
10bcc     0C 4E 05 F1 | 	add	fp, #12
10bd0     A7 14 02 FB | 	rdlong	arg02, fp
10bd4     0C 4E 85 F1 | 	sub	fp, #12
10bd8     24 82 B0 FD | 	call	#__system___string_cmp
10bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
10be0     00 1E 26 56 |  if_ne	not	local01, #0
10be4     A7 1E 62 FC | 	wrlong	local01, fp
10be8     BC 00 90 FD | 	jmp	#LR__1283
10bec                 | LR__1280
10bec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
10bec     08 4E 05 F1 | 	add	fp, #8
10bf0     A7 1E 02 FB | 	rdlong	local01, fp
10bf4     08 4E 85 F1 | 	sub	fp, #8
10bf8     1F 1E 0E F2 | 	cmp	local01, #31 wz
10bfc     14 4E 05 A1 |  if_e	add	fp, #20
10c00     A7 22 02 AB |  if_e	rdlong	local03, fp
10c04     14 4E 85 A1 |  if_e	sub	fp, #20
10c08     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10c0c     34 00 90 5D |  if_ne	jmp	#LR__1281
10c10     00 1E 06 F6 | 	mov	local01, #0
10c14     A7 20 02 FB | 	rdlong	local02, fp
10c18     0C 4E 05 F1 | 	add	fp, #12
10c1c     A7 12 02 FB | 	rdlong	arg01, fp
10c20     0C 4E 85 F1 | 	sub	fp, #12
10c24     F8 BD BF FD | 	call	#_convertstring
10c28     FD 14 02 F6 | 	mov	arg02, result1
10c2c     10 13 02 F6 | 	mov	arg01, local02
10c30     CC 81 B0 FD | 	call	#__system___string_cmp
10c34     00 FA 0D F2 | 	cmp	result1, #0 wz
10c38     00 1E 26 56 |  if_ne	not	local01, #0
10c3c     A7 1E 62 FC | 	wrlong	local01, fp
10c40     64 00 90 FD | 	jmp	#LR__1283
10c44                 | LR__1281
10c44                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
10c44     08 4E 05 F1 | 	add	fp, #8
10c48     A7 1E 02 FB | 	rdlong	local01, fp
10c4c     08 4E 85 F1 | 	sub	fp, #8
10c50     2B 1E 0E F2 | 	cmp	local01, #43 wz
10c54     14 4E 05 A1 |  if_e	add	fp, #20
10c58     A7 22 02 AB |  if_e	rdlong	local03, fp
10c5c     14 4E 85 A1 |  if_e	sub	fp, #20
10c60     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10c64     3C 00 90 5D |  if_ne	jmp	#LR__1282
10c68     00 1E 06 F6 | 	mov	local01, #0
10c6c     A7 12 02 FB | 	rdlong	arg01, fp
10c70     AC BD BF FD | 	call	#_convertstring
10c74     FD 20 02 F6 | 	mov	local02, result1
10c78     0C 4E 05 F1 | 	add	fp, #12
10c7c     A7 12 02 FB | 	rdlong	arg01, fp
10c80     0C 4E 85 F1 | 	sub	fp, #12
10c84     98 BD BF FD | 	call	#_convertstring
10c88     FD 14 02 F6 | 	mov	arg02, result1
10c8c     10 13 02 F6 | 	mov	arg01, local02
10c90     6C 81 B0 FD | 	call	#__system___string_cmp
10c94     00 FA 0D F2 | 	cmp	result1, #0 wz
10c98     00 1E 26 56 |  if_ne	not	local01, #0
10c9c     A7 1E 62 FC | 	wrlong	local01, fp
10ca0     04 00 90 FD | 	jmp	#LR__1283
10ca4                 | LR__1282
10ca4     A7 00 68 FC | 	wrlong	#0, fp
10ca8                 | LR__1283
10ca8     08 4E 05 F1 | 	add	fp, #8
10cac     A7 38 68 FC | 	wrlong	#28, fp
10cb0     08 4E 85 F1 | 	sub	fp, #8
10cb4     A7 12 02 F6 | 	mov	arg01, fp
10cb8     C0 8C BF FD | 	call	#_push
10cbc     A7 F0 03 F6 | 	mov	ptra, fp
10cc0     B2 00 A0 FD | 	call	#popregs_
10cc4                 | _do_ne_ret
10cc4     2D 00 64 FD | 	ret
10cc8                 | 
10cc8                 | ' 
10cc8                 | ' 
10cc8                 | ' 
10cc8                 | ' ' -------------------   convert a variable on the top of stack to integer
10cc8                 | ' 
10cc8                 | ' sub do_converttoint
10cc8                 | _do_converttoint
10cc8     02 4A 05 F6 | 	mov	COUNT_, #2
10ccc     A8 00 A0 FD | 	call	#pushregs_
10cd0     18 F0 07 F1 | 	add	ptra, #24
10cd4     0C 8C BF FD | 	call	#_pop
10cd8     FE 1E 02 F6 | 	mov	local01, result2
10cdc     FF 20 02 F6 | 	mov	local02, result3
10ce0     A7 FA 61 FC | 	wrlong	result1, fp
10ce4     04 4E 05 F1 | 	add	fp, #4
10ce8     A7 1E 62 FC | 	wrlong	local01, fp
10cec     04 4E 05 F1 | 	add	fp, #4
10cf0     A7 20 62 FC | 	wrlong	local02, fp
10cf4                 | ' t1=pop() 
10cf4                 | ' select case t1.result_type
10cf4     08 4E 85 F1 | 	sub	fp, #8
10cf8     1C 20 0E F2 | 	cmp	local02, #28 wz
10cfc     2C 00 90 AD |  if_e	jmp	#LR__1290
10d00     1D 20 0E F2 | 	cmp	local02, #29 wz
10d04     40 00 90 AD |  if_e	jmp	#LR__1291
10d08     1E 20 0E F2 | 	cmp	local02, #30 wz
10d0c     54 00 90 AD |  if_e	jmp	#LR__1292
10d10     1F 20 0E F2 | 	cmp	local02, #31 wz
10d14     70 00 90 AD |  if_e	jmp	#LR__1293
10d18     2B 20 0E F2 | 	cmp	local02, #43 wz
10d1c     94 00 90 AD |  if_e	jmp	#LR__1294
10d20     FF 20 0E F2 | 	cmp	local02, #255 wz
10d24     C0 00 90 AD |  if_e	jmp	#LR__1295
10d28     DC 00 90 FD | 	jmp	#LR__1296
10d2c                 | LR__1290
10d2c     A7 20 02 FB | 	rdlong	local02, fp
10d30     0C 4E 05 F1 | 	add	fp, #12
10d34     A7 20 62 FC | 	wrlong	local02, fp
10d38     04 4E 05 F1 | 	add	fp, #4
10d3c     A7 38 68 FC | 	wrlong	#28, fp
10d40     10 4E 85 F1 | 	sub	fp, #16
10d44     D4 00 90 FD | 	jmp	#LR__1297
10d48                 | LR__1291
10d48     A7 20 02 FB | 	rdlong	local02, fp
10d4c     0C 4E 05 F1 | 	add	fp, #12
10d50     A7 20 62 FC | 	wrlong	local02, fp
10d54     04 4E 05 F1 | 	add	fp, #4
10d58     A7 38 68 FC | 	wrlong	#28, fp
10d5c     10 4E 85 F1 | 	sub	fp, #16
10d60     B8 00 90 FD | 	jmp	#LR__1297
10d64                 | LR__1292
10d64     A7 12 02 FB | 	rdlong	arg01, fp
10d68     01 14 06 F6 | 	mov	arg02, #1
10d6c     1C B0 B0 FD | 	call	#__system___float_tointeger
10d70     0C 4E 05 F1 | 	add	fp, #12
10d74     A7 FA 61 FC | 	wrlong	result1, fp
10d78     04 4E 05 F1 | 	add	fp, #4
10d7c     A7 38 68 FC | 	wrlong	#28, fp
10d80     10 4E 85 F1 | 	sub	fp, #16
10d84     94 00 90 FD | 	jmp	#LR__1297
10d88                 | LR__1293
10d88     A7 12 02 FB | 	rdlong	arg01, fp
10d8c     1C B3 B0 FD | 	call	#__system____builtin_atof
10d90     FD 12 02 F6 | 	mov	arg01, result1
10d94     00 14 06 F6 | 	mov	arg02, #0
10d98     F0 AF B0 FD | 	call	#__system___float_tointeger
10d9c     0C 4E 05 F1 | 	add	fp, #12
10da0     A7 FA 61 FC | 	wrlong	result1, fp
10da4     04 4E 05 F1 | 	add	fp, #4
10da8     A7 38 68 FC | 	wrlong	#28, fp
10dac     10 4E 85 F1 | 	sub	fp, #16
10db0     68 00 90 FD | 	jmp	#LR__1297
10db4                 | LR__1294
10db4     A7 12 02 FB | 	rdlong	arg01, fp
10db8     64 BC BF FD | 	call	#_convertstring
10dbc     FD 12 02 F6 | 	mov	arg01, result1
10dc0     E8 B2 B0 FD | 	call	#__system____builtin_atof
10dc4     FD 12 02 F6 | 	mov	arg01, result1
10dc8     00 14 06 F6 | 	mov	arg02, #0
10dcc     BC AF B0 FD | 	call	#__system___float_tointeger
10dd0     0C 4E 05 F1 | 	add	fp, #12
10dd4     A7 FA 61 FC | 	wrlong	result1, fp
10dd8     04 4E 05 F1 | 	add	fp, #4
10ddc     A7 38 68 FC | 	wrlong	#28, fp
10de0     10 4E 85 F1 | 	sub	fp, #16
10de4     34 00 90 FD | 	jmp	#LR__1297
10de8                 | LR__1295
10de8     0C 4E 05 F1 | 	add	fp, #12
10dec     A7 00 68 FC | 	wrlong	#0, fp
10df0     0C 4E 85 F1 | 	sub	fp, #12
10df4     A7 20 02 FB | 	rdlong	local02, fp
10df8     10 4E 05 F1 | 	add	fp, #16
10dfc     A7 20 62 FC | 	wrlong	local02, fp
10e00     10 4E 85 F1 | 	sub	fp, #16
10e04     14 00 90 FD | 	jmp	#LR__1297
10e08                 | LR__1296
10e08     0C 4E 05 F1 | 	add	fp, #12
10e0c     A7 00 68 FC | 	wrlong	#0, fp
10e10     04 4E 05 F1 | 	add	fp, #4
10e14     A7 02 68 FC | 	wrlong	#1, fp
10e18     10 4E 85 F1 | 	sub	fp, #16
10e1c                 | LR__1297
10e1c     0C 4E 05 F1 | 	add	fp, #12
10e20     A7 20 02 FB | 	rdlong	local02, fp
10e24     0C 4E 85 F1 | 	sub	fp, #12
10e28     A7 20 62 FC | 	wrlong	local02, fp
10e2c     10 4E 05 F1 | 	add	fp, #16
10e30     A7 20 02 FB | 	rdlong	local02, fp
10e34     08 4E 85 F1 | 	sub	fp, #8
10e38     A7 20 62 FC | 	wrlong	local02, fp
10e3c     08 4E 85 F1 | 	sub	fp, #8
10e40     A7 12 02 F6 | 	mov	arg01, fp
10e44     34 8B BF FD | 	call	#_push
10e48     A7 F0 03 F6 | 	mov	ptra, fp
10e4c     B2 00 A0 FD | 	call	#popregs_
10e50                 | _do_converttoint_ret
10e50     2D 00 64 FD | 	ret
10e54                 | 
10e54                 | ' 
10e54                 | ' function converttoint (t1 as expr_result) as integer
10e54                 | _converttoint
10e54     02 4A 05 F6 | 	mov	COUNT_, #2
10e58     A8 00 A0 FD | 	call	#pushregs_
10e5c     09 1F 02 F6 | 	mov	local01, arg01
10e60                 | ' 
10e60                 | ' select case t1.result_type
10e60     08 1E 06 F1 | 	add	local01, #8
10e64     0F 21 02 FB | 	rdlong	local02, local01
10e68     08 1E 86 F1 | 	sub	local01, #8
10e6c     1C 20 0E F2 | 	cmp	local02, #28 wz
10e70     24 00 90 AD |  if_e	jmp	#LR__1300
10e74     1D 20 0E F2 | 	cmp	local02, #29 wz
10e78     24 00 90 AD |  if_e	jmp	#LR__1301
10e7c     1E 20 0E F2 | 	cmp	local02, #30 wz
10e80     24 00 90 AD |  if_e	jmp	#LR__1302
10e84     1F 20 0E F2 | 	cmp	local02, #31 wz
10e88     2C 00 90 AD |  if_e	jmp	#LR__1303
10e8c     2B 20 0E F2 | 	cmp	local02, #43 wz
10e90     3C 00 90 AD |  if_e	jmp	#LR__1304
10e94     58 00 90 FD | 	jmp	#LR__1305
10e98                 | LR__1300
10e98     0F FB 01 FB | 	rdlong	result1, local01
10e9c     54 00 90 FD | 	jmp	#LR__1306
10ea0                 | LR__1301
10ea0     0F FB 01 FB | 	rdlong	result1, local01
10ea4     4C 00 90 FD | 	jmp	#LR__1306
10ea8                 | LR__1302
10ea8     0F 13 02 FB | 	rdlong	arg01, local01
10eac     01 14 06 F6 | 	mov	arg02, #1
10eb0     D8 AE B0 FD | 	call	#__system___float_tointeger
10eb4     3C 00 90 FD | 	jmp	#LR__1306
10eb8                 | LR__1303
10eb8     0F 13 02 FB | 	rdlong	arg01, local01
10ebc     EC B1 B0 FD | 	call	#__system____builtin_atof
10ec0     FD 12 02 F6 | 	mov	arg01, result1
10ec4     00 14 06 F6 | 	mov	arg02, #0
10ec8     C0 AE B0 FD | 	call	#__system___float_tointeger
10ecc     24 00 90 FD | 	jmp	#LR__1306
10ed0                 | LR__1304
10ed0     0F 13 02 FB | 	rdlong	arg01, local01
10ed4     48 BB BF FD | 	call	#_convertstring
10ed8     FD 12 02 F6 | 	mov	arg01, result1
10edc     CC B1 B0 FD | 	call	#__system____builtin_atof
10ee0     FD 12 02 F6 | 	mov	arg01, result1
10ee4     00 14 06 F6 | 	mov	arg02, #0
10ee8     A0 AE B0 FD | 	call	#__system___float_tointeger
10eec     04 00 90 FD | 	jmp	#LR__1306
10ef0                 | LR__1305
10ef0     00 FA 05 F6 | 	mov	result1, #0
10ef4                 | LR__1306
10ef4     A7 F0 03 F6 | 	mov	ptra, fp
10ef8     B2 00 A0 FD | 	call	#popregs_
10efc                 | _converttoint_ret
10efc     2D 00 64 FD | 	ret
10f00                 | 
10f00                 | ' 
10f00                 | ' function converttofloat (t1 as expr_result) as single
10f00                 | _converttofloat
10f00     03 4A 05 F6 | 	mov	COUNT_, #3
10f04     A8 00 A0 FD | 	call	#pushregs_
10f08     09 1F 02 F6 | 	mov	local01, arg01
10f0c                 | ' 
10f0c                 | ' select case t1.result_type
10f0c     08 1E 06 F1 | 	add	local01, #8
10f10     0F 21 02 FB | 	rdlong	local02, local01
10f14     08 1E 86 F1 | 	sub	local01, #8
10f18     1C 20 0E F2 | 	cmp	local02, #28 wz
10f1c     24 00 90 AD |  if_e	jmp	#LR__1310
10f20     1D 20 0E F2 | 	cmp	local02, #29 wz
10f24     38 00 90 AD |  if_e	jmp	#LR__1311
10f28     1E 20 0E F2 | 	cmp	local02, #30 wz
10f2c     3C 00 90 AD |  if_e	jmp	#LR__1312
10f30     1F 20 0E F2 | 	cmp	local02, #31 wz
10f34     3C 00 90 AD |  if_e	jmp	#LR__1313
10f38     2B 20 0E F2 | 	cmp	local02, #43 wz
10f3c     40 00 90 AD |  if_e	jmp	#LR__1314
10f40     50 00 90 FD | 	jmp	#LR__1315
10f44                 | LR__1310
10f44     0F 13 02 FB | 	rdlong	arg01, local01
10f48     09 13 52 F6 | 	abs	arg01, arg01 wc
10f4c     1F 22 C6 C9 |  if_b	decod	local03, #31
10f50     00 22 06 36 |  if_ae	mov	local03, #0
10f54     68 A5 B0 FD | 	call	#__system___float_fromuns
10f58     11 FB 61 F5 | 	xor	result1, local03
10f5c     38 00 90 FD | 	jmp	#LR__1316
10f60                 | LR__1311
10f60     0F 13 02 FB | 	rdlong	arg01, local01
10f64     58 A5 B0 FD | 	call	#__system___float_fromuns
10f68     2C 00 90 FD | 	jmp	#LR__1316
10f6c                 | LR__1312
10f6c     0F FB 01 FB | 	rdlong	result1, local01
10f70     24 00 90 FD | 	jmp	#LR__1316
10f74                 | LR__1313
10f74     0F 13 02 FB | 	rdlong	arg01, local01
10f78     30 B1 B0 FD | 	call	#__system____builtin_atof
10f7c     18 00 90 FD | 	jmp	#LR__1316
10f80                 | LR__1314
10f80     0F 13 02 FB | 	rdlong	arg01, local01
10f84     98 BA BF FD | 	call	#_convertstring
10f88     FD 12 02 F6 | 	mov	arg01, result1
10f8c     1C B1 B0 FD | 	call	#__system____builtin_atof
10f90     04 00 90 FD | 	jmp	#LR__1316
10f94                 | LR__1315
10f94     00 FA 05 F6 | 	mov	result1, #0
10f98                 | LR__1316
10f98     A7 F0 03 F6 | 	mov	ptra, fp
10f9c     B2 00 A0 FD | 	call	#popregs_
10fa0                 | _converttofloat_ret
10fa0     2D 00 64 FD | 	ret
10fa4                 | 
10fa4                 | ' 
10fa4                 | ' sub do_rnd
10fa4                 | _do_rnd
10fa4     01 4A 05 F6 | 	mov	COUNT_, #1
10fa8     A8 00 A0 FD | 	call	#pushregs_
10fac     10 F0 07 F1 | 	add	ptra, #16
10fb0     69 00 00 FF 
10fb4     54 E5 05 F1 | 	add	objptr, ##54100
10fb8     F2 1E 02 FB | 	rdlong	local01, objptr
10fbc     0F 17 02 F6 | 	mov	arg03, local01
10fc0     01 16 66 F0 | 	shl	arg03, #1
10fc4     0F 17 02 F1 | 	add	arg03, local01
10fc8     02 16 66 F0 | 	shl	arg03, #2
10fcc     03 00 00 FF 
10fd0     04 E4 85 F1 | 	sub	objptr, ##1540
10fd4     F2 16 02 F1 | 	add	arg03, objptr
10fd8     0B 17 02 FB | 	rdlong	arg03, arg03
10fdc     0C 4E 05 F1 | 	add	fp, #12
10fe0     A7 16 62 FC | 	wrlong	arg03, fp
10fe4                 | ' 
10fe4                 | ' numpar=compiledline(lineptr_e).result.uresult
10fe4                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
10fe4     0C 4E 85 F1 | 	sub	fp, #12
10fe8     02 16 16 F2 | 	cmp	arg03, #2 wc
10fec     66 00 00 FF 
10ff0     50 E5 85 F1 | 	sub	objptr, ##52560
10ff4     3C 00 90 CD |  if_b	jmp	#LR__1320
10ff8     00 12 06 F6 | 	mov	arg01, #0
10ffc     DC D6 B0 FD | 	call	#__system___getiolock_0423
11000     FD 12 02 F6 | 	mov	arg01, result1
11004     D0 7D B0 FD | 	call	#__system___lockmem
11008     44 01 00 FF 
1100c     75 14 06 F6 | 	mov	arg02, ##@LR__4585
11010     00 12 06 F6 | 	mov	arg01, #0
11014     00 16 06 F6 | 	mov	arg03, #0
11018     B0 8A B0 FD | 	call	#__system___basic_print_string
1101c     00 12 06 F6 | 	mov	arg01, #0
11020     B8 D6 B0 FD | 	call	#__system___getiolock_0423
11024     FD 00 68 FC | 	wrlong	#0, result1
11028     27 12 06 F6 | 	mov	arg01, #39
1102c     24 48 B0 FD | 	call	#_printerror
11030     2C 01 90 FD | 	jmp	#LR__1327
11034                 | LR__1320
11034                 | ' if numpar=0 then
11034     0C 4E 05 F1 | 	add	fp, #12
11038     A7 FE 09 FB | 	rdlong	result3, fp wz
1103c     0C 4E 85 F1 | 	sub	fp, #12
11040     20 00 90 5D |  if_ne	jmp	#LR__1321
11044     08 4E 05 F1 | 	add	fp, #8
11048     A7 3A 68 FC | 	wrlong	#29, fp
1104c     08 4E 85 F1 | 	sub	fp, #8
11050     1B FA 61 FD | 	getrnd	result1
11054     A7 FA 61 FC | 	wrlong	result1, fp
11058     A7 12 02 F6 | 	mov	arg01, fp
1105c     1C 89 BF FD | 	call	#_push
11060     FC 00 90 FD | 	jmp	#LR__1326
11064                 | LR__1321
11064     7C 88 BF FD | 	call	#_pop
11068     A7 FA 61 FC | 	wrlong	result1, fp
1106c     04 4E 05 F1 | 	add	fp, #4
11070     A7 FC 61 FC | 	wrlong	result2, fp
11074     04 4E 05 F1 | 	add	fp, #4
11078     A7 FE 61 FC | 	wrlong	result3, fp
1107c                 | '   t1=pop()
1107c                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1107c     08 4E 85 F1 | 	sub	fp, #8
11080     1C FE 0D F2 | 	cmp	result3, #28 wz
11084     08 4E 05 51 |  if_ne	add	fp, #8
11088     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1108c     08 4E 85 51 |  if_ne	sub	fp, #8
11090     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11094     2C 00 90 5D |  if_ne	jmp	#LR__1322
11098     1B FA 61 FD | 	getrnd	result1
1109c     A7 1E 02 FB | 	rdlong	local01, fp
110a0     0F FB 11 FD | 	qdiv	result1, local01
110a4     A7 12 02 F6 | 	mov	arg01, fp
110a8     19 1E 62 FD | 	getqy	local01
110ac     A7 1E 62 FC | 	wrlong	local01, fp
110b0     08 4E 05 F1 | 	add	fp, #8
110b4     A7 3A 68 FC | 	wrlong	#29, fp
110b8     08 4E 85 F1 | 	sub	fp, #8
110bc     BC 88 BF FD | 	call	#_push
110c0     9C 00 90 FD | 	jmp	#LR__1325
110c4                 | LR__1322
110c4     08 4E 05 F1 | 	add	fp, #8
110c8     A7 1E 02 FB | 	rdlong	local01, fp
110cc     08 4E 85 F1 | 	sub	fp, #8
110d0     1E 1E 0E F2 | 	cmp	local01, #30 wz
110d4     48 00 90 5D |  if_ne	jmp	#LR__1323
110d8     A7 12 02 FB | 	rdlong	arg01, fp
110dc     00 C0 24 FF 
110e0     00 14 06 F6 | 	mov	arg02, ##1233125376
110e4     E0 A9 B0 FD | 	call	#__system___float_div
110e8     FD 1E 02 F6 | 	mov	local01, result1
110ec     1B 12 62 FD | 	getrnd	arg01
110f0     74 13 06 F4 | 	bitl	arg01, #372
110f4     C8 A3 B0 FD | 	call	#__system___float_fromuns
110f8     FD 14 02 F6 | 	mov	arg02, result1
110fc     0F 13 02 F6 | 	mov	arg01, local01
11100     C0 A7 B0 FD | 	call	#__system___float_mul
11104     A7 FA 61 FC | 	wrlong	result1, fp
11108     08 4E 05 F1 | 	add	fp, #8
1110c     A7 3C 68 FC | 	wrlong	#30, fp
11110     08 4E 85 F1 | 	sub	fp, #8
11114     A7 12 02 F6 | 	mov	arg01, fp
11118     60 88 BF FD | 	call	#_push
1111c     40 00 90 FD | 	jmp	#LR__1324
11120                 | LR__1323
11120                 | '     print "rnd: "; : printerror(40) 
11120     00 12 06 F6 | 	mov	arg01, #0
11124     B4 D5 B0 FD | 	call	#__system___getiolock_0423
11128     FD 12 02 F6 | 	mov	arg01, result1
1112c     A8 7C B0 FD | 	call	#__system___lockmem
11130     44 01 00 FF 
11134     7B 14 06 F6 | 	mov	arg02, ##@LR__4586
11138     00 12 06 F6 | 	mov	arg01, #0
1113c     00 16 06 F6 | 	mov	arg03, #0
11140     88 89 B0 FD | 	call	#__system___basic_print_string
11144     00 12 06 F6 | 	mov	arg01, #0
11148     90 D5 B0 FD | 	call	#__system___getiolock_0423
1114c     FD 00 68 FC | 	wrlong	#0, result1
11150     28 12 06 F6 | 	mov	arg01, #40
11154     FC 46 B0 FD | 	call	#_printerror
11158     A7 12 02 F6 | 	mov	arg01, fp
1115c     1C 88 BF FD | 	call	#_push
11160                 | LR__1324
11160                 | LR__1325
11160                 | LR__1326
11160                 | LR__1327
11160     A7 F0 03 F6 | 	mov	ptra, fp
11164     B2 00 A0 FD | 	call	#popregs_
11168                 | _do_rnd_ret
11168     2D 00 64 FD | 	ret
1116c                 | 
1116c                 | ' 
1116c                 | ' sub do_sin
1116c                 | _do_sin
1116c     01 4A 05 F6 | 	mov	COUNT_, #1
11170     A8 00 A0 FD | 	call	#pushregs_
11174     10 F0 07 F1 | 	add	ptra, #16
11178     69 00 00 FF 
1117c     54 E5 05 F1 | 	add	objptr, ##54100
11180     F2 1E 02 FB | 	rdlong	local01, objptr
11184     0F 17 02 F6 | 	mov	arg03, local01
11188     01 16 66 F0 | 	shl	arg03, #1
1118c     0F 17 02 F1 | 	add	arg03, local01
11190     02 16 66 F0 | 	shl	arg03, #2
11194     03 00 00 FF 
11198     04 E4 85 F1 | 	sub	objptr, ##1540
1119c     F2 16 02 F1 | 	add	arg03, objptr
111a0     0B 17 02 FB | 	rdlong	arg03, arg03
111a4     0C 4E 05 F1 | 	add	fp, #12
111a8     A7 16 62 FC | 	wrlong	arg03, fp
111ac                 | ' 
111ac                 | ' numpar=compiledline(lineptr_e).result.uresult
111ac                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
111ac     0C 4E 85 F1 | 	sub	fp, #12
111b0     02 16 16 F2 | 	cmp	arg03, #2 wc
111b4     66 00 00 FF 
111b8     50 E5 85 F1 | 	sub	objptr, ##52560
111bc     0C 4E 05 C1 |  if_b	add	fp, #12
111c0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
111c4     0C 4E 85 C1 |  if_b	sub	fp, #12
111c8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1330
111cc     00 12 06 F6 | 	mov	arg01, #0
111d0     08 D5 B0 FD | 	call	#__system___getiolock_0423
111d4     FD 12 02 F6 | 	mov	arg01, result1
111d8     FC 7B B0 FD | 	call	#__system___lockmem
111dc     44 01 00 FF 
111e0     81 14 06 F6 | 	mov	arg02, ##@LR__4587
111e4     00 12 06 F6 | 	mov	arg01, #0
111e8     00 16 06 F6 | 	mov	arg03, #0
111ec     DC 88 B0 FD | 	call	#__system___basic_print_string
111f0     00 12 06 F6 | 	mov	arg01, #0
111f4     E4 D4 B0 FD | 	call	#__system___getiolock_0423
111f8     FD 00 68 FC | 	wrlong	#0, result1
111fc     27 12 06 F6 | 	mov	arg01, #39
11200     50 46 B0 FD | 	call	#_printerror
11204     64 00 90 FD | 	jmp	#LR__1331
11208                 | LR__1330
11208     D8 86 BF FD | 	call	#_pop
1120c     A7 FA 61 FC | 	wrlong	result1, fp
11210     04 4E 05 F1 | 	add	fp, #4
11214     A7 FC 61 FC | 	wrlong	result2, fp
11218     04 4E 05 F1 | 	add	fp, #4
1121c     A7 FE 61 FC | 	wrlong	result3, fp
11220     08 4E 85 F1 | 	sub	fp, #8
11224     7A 00 00 FF 
11228     5C E5 05 F1 | 	add	objptr, ##62812
1122c     F2 1E 02 FB | 	rdlong	local01, objptr
11230     7A 00 00 FF 
11234     5C E5 85 F1 | 	sub	objptr, ##62812
11238     A7 12 02 F6 | 	mov	arg01, fp
1123c     C0 FC BF FD | 	call	#_converttofloat
11240     FD 14 02 F6 | 	mov	arg02, result1
11244     0F 13 02 F6 | 	mov	arg01, local01
11248     78 A6 B0 FD | 	call	#__system___float_mul
1124c     FD 12 02 F6 | 	mov	arg01, result1
11250     AC AF B0 FD | 	call	#__system____builtin_sinf
11254     A7 FA 61 FC | 	wrlong	result1, fp
11258     08 4E 05 F1 | 	add	fp, #8
1125c     A7 3C 68 FC | 	wrlong	#30, fp
11260     08 4E 85 F1 | 	sub	fp, #8
11264     A7 12 02 F6 | 	mov	arg01, fp
11268     10 87 BF FD | 	call	#_push
1126c                 | LR__1331
1126c     A7 F0 03 F6 | 	mov	ptra, fp
11270     B2 00 A0 FD | 	call	#popregs_
11274                 | _do_sin_ret
11274     2D 00 64 FD | 	ret
11278                 | 
11278                 | ' 
11278                 | ' sub do_cos
11278                 | _do_cos
11278     01 4A 05 F6 | 	mov	COUNT_, #1
1127c     A8 00 A0 FD | 	call	#pushregs_
11280     10 F0 07 F1 | 	add	ptra, #16
11284     69 00 00 FF 
11288     54 E5 05 F1 | 	add	objptr, ##54100
1128c     F2 1E 02 FB | 	rdlong	local01, objptr
11290     0F 17 02 F6 | 	mov	arg03, local01
11294     01 16 66 F0 | 	shl	arg03, #1
11298     0F 17 02 F1 | 	add	arg03, local01
1129c     02 16 66 F0 | 	shl	arg03, #2
112a0     03 00 00 FF 
112a4     04 E4 85 F1 | 	sub	objptr, ##1540
112a8     F2 16 02 F1 | 	add	arg03, objptr
112ac     0B 17 02 FB | 	rdlong	arg03, arg03
112b0     0C 4E 05 F1 | 	add	fp, #12
112b4     A7 16 62 FC | 	wrlong	arg03, fp
112b8                 | ' 
112b8                 | ' numpar=compiledline(lineptr_e).result.uresult
112b8                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
112b8     0C 4E 85 F1 | 	sub	fp, #12
112bc     02 16 16 F2 | 	cmp	arg03, #2 wc
112c0     66 00 00 FF 
112c4     50 E5 85 F1 | 	sub	objptr, ##52560
112c8     0C 4E 05 C1 |  if_b	add	fp, #12
112cc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
112d0     0C 4E 85 C1 |  if_b	sub	fp, #12
112d4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1340
112d8     00 12 06 F6 | 	mov	arg01, #0
112dc     FC D3 B0 FD | 	call	#__system___getiolock_0423
112e0     FD 12 02 F6 | 	mov	arg01, result1
112e4     F0 7A B0 FD | 	call	#__system___lockmem
112e8     44 01 00 FF 
112ec     87 14 06 F6 | 	mov	arg02, ##@LR__4588
112f0     00 12 06 F6 | 	mov	arg01, #0
112f4     00 16 06 F6 | 	mov	arg03, #0
112f8     D0 87 B0 FD | 	call	#__system___basic_print_string
112fc     00 12 06 F6 | 	mov	arg01, #0
11300     D8 D3 B0 FD | 	call	#__system___getiolock_0423
11304     FD 00 68 FC | 	wrlong	#0, result1
11308     27 12 06 F6 | 	mov	arg01, #39
1130c     44 45 B0 FD | 	call	#_printerror
11310     78 00 90 FD | 	jmp	#LR__1341
11314                 | LR__1340
11314     CC 85 BF FD | 	call	#_pop
11318     A7 FA 61 FC | 	wrlong	result1, fp
1131c     04 4E 05 F1 | 	add	fp, #4
11320     A7 FC 61 FC | 	wrlong	result2, fp
11324     04 4E 05 F1 | 	add	fp, #4
11328     A7 FE 61 FC | 	wrlong	result3, fp
1132c     08 4E 85 F1 | 	sub	fp, #8
11330     7A 00 00 FF 
11334     5C E5 05 F1 | 	add	objptr, ##62812
11338     F2 1E 02 FB | 	rdlong	local01, objptr
1133c     7A 00 00 FF 
11340     5C E5 85 F1 | 	sub	objptr, ##62812
11344     A7 12 02 F6 | 	mov	arg01, fp
11348     B4 FB BF FD | 	call	#_converttofloat
1134c     FD 14 02 F6 | 	mov	arg02, result1
11350     0F 13 02 F6 | 	mov	arg01, local01
11354     6C A5 B0 FD | 	call	#__system___float_mul
11358     FD 14 02 F6 | 	mov	arg02, result1
1135c     87 E4 1F FF 
11360     DB 13 06 F6 | 	mov	arg01, ##1070141403
11364     1F 14 E6 F4 | 	bitnot	arg02, #31
11368     88 A1 B0 FD | 	call	#__system___float_add
1136c     FD 12 02 F6 | 	mov	arg01, result1
11370     8C AE B0 FD | 	call	#__system____builtin_sinf
11374     A7 FA 61 FC | 	wrlong	result1, fp
11378     08 4E 05 F1 | 	add	fp, #8
1137c     A7 3C 68 FC | 	wrlong	#30, fp
11380     08 4E 85 F1 | 	sub	fp, #8
11384     A7 12 02 F6 | 	mov	arg01, fp
11388     F0 85 BF FD | 	call	#_push
1138c                 | LR__1341
1138c     A7 F0 03 F6 | 	mov	ptra, fp
11390     B2 00 A0 FD | 	call	#popregs_
11394                 | _do_cos_ret
11394     2D 00 64 FD | 	ret
11398                 | 
11398                 | ' 
11398                 | ' sub do_tan
11398                 | _do_tan
11398     01 4A 05 F6 | 	mov	COUNT_, #1
1139c     A8 00 A0 FD | 	call	#pushregs_
113a0     10 F0 07 F1 | 	add	ptra, #16
113a4     69 00 00 FF 
113a8     54 E5 05 F1 | 	add	objptr, ##54100
113ac     F2 1E 02 FB | 	rdlong	local01, objptr
113b0     0F 17 02 F6 | 	mov	arg03, local01
113b4     01 16 66 F0 | 	shl	arg03, #1
113b8     0F 17 02 F1 | 	add	arg03, local01
113bc     02 16 66 F0 | 	shl	arg03, #2
113c0     03 00 00 FF 
113c4     04 E4 85 F1 | 	sub	objptr, ##1540
113c8     F2 16 02 F1 | 	add	arg03, objptr
113cc     0B 17 02 FB | 	rdlong	arg03, arg03
113d0     0C 4E 05 F1 | 	add	fp, #12
113d4     A7 16 62 FC | 	wrlong	arg03, fp
113d8                 | ' 
113d8                 | ' numpar=compiledline(lineptr_e).result.uresult
113d8                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
113d8     0C 4E 85 F1 | 	sub	fp, #12
113dc     02 16 16 F2 | 	cmp	arg03, #2 wc
113e0     66 00 00 FF 
113e4     50 E5 85 F1 | 	sub	objptr, ##52560
113e8     0C 4E 05 C1 |  if_b	add	fp, #12
113ec     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
113f0     0C 4E 85 C1 |  if_b	sub	fp, #12
113f4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1350
113f8     00 12 06 F6 | 	mov	arg01, #0
113fc     DC D2 B0 FD | 	call	#__system___getiolock_0423
11400     FD 12 02 F6 | 	mov	arg01, result1
11404     D0 79 B0 FD | 	call	#__system___lockmem
11408     44 01 00 FF 
1140c     8D 14 06 F6 | 	mov	arg02, ##@LR__4589
11410     00 12 06 F6 | 	mov	arg01, #0
11414     00 16 06 F6 | 	mov	arg03, #0
11418     B0 86 B0 FD | 	call	#__system___basic_print_string
1141c     00 12 06 F6 | 	mov	arg01, #0
11420     B8 D2 B0 FD | 	call	#__system___getiolock_0423
11424     FD 00 68 FC | 	wrlong	#0, result1
11428     27 12 06 F6 | 	mov	arg01, #39
1142c     24 44 B0 FD | 	call	#_printerror
11430     64 00 90 FD | 	jmp	#LR__1351
11434                 | LR__1350
11434     AC 84 BF FD | 	call	#_pop
11438     A7 FA 61 FC | 	wrlong	result1, fp
1143c     04 4E 05 F1 | 	add	fp, #4
11440     A7 FC 61 FC | 	wrlong	result2, fp
11444     04 4E 05 F1 | 	add	fp, #4
11448     A7 FE 61 FC | 	wrlong	result3, fp
1144c     08 4E 85 F1 | 	sub	fp, #8
11450     7A 00 00 FF 
11454     5C E5 05 F1 | 	add	objptr, ##62812
11458     F2 1E 02 FB | 	rdlong	local01, objptr
1145c     7A 00 00 FF 
11460     5C E5 85 F1 | 	sub	objptr, ##62812
11464     A7 12 02 F6 | 	mov	arg01, fp
11468     94 FA BF FD | 	call	#_converttofloat
1146c     FD 14 02 F6 | 	mov	arg02, result1
11470     0F 13 02 F6 | 	mov	arg01, local01
11474     4C A4 B0 FD | 	call	#__system___float_mul
11478     FD 12 02 F6 | 	mov	arg01, result1
1147c     CC AE B0 FD | 	call	#__system____builtin_tanf
11480     A7 FA 61 FC | 	wrlong	result1, fp
11484     08 4E 05 F1 | 	add	fp, #8
11488     A7 3C 68 FC | 	wrlong	#30, fp
1148c     08 4E 85 F1 | 	sub	fp, #8
11490     A7 12 02 F6 | 	mov	arg01, fp
11494     E4 84 BF FD | 	call	#_push
11498                 | LR__1351
11498     A7 F0 03 F6 | 	mov	ptra, fp
1149c     B2 00 A0 FD | 	call	#popregs_
114a0                 | _do_tan_ret
114a0     2D 00 64 FD | 	ret
114a4                 | 
114a4                 | ' 
114a4                 | ' sub do_asin
114a4                 | _do_asin
114a4     01 4A 05 F6 | 	mov	COUNT_, #1
114a8     A8 00 A0 FD | 	call	#pushregs_
114ac     10 F0 07 F1 | 	add	ptra, #16
114b0     69 00 00 FF 
114b4     54 E5 05 F1 | 	add	objptr, ##54100
114b8     F2 1E 02 FB | 	rdlong	local01, objptr
114bc     0F 17 02 F6 | 	mov	arg03, local01
114c0     01 16 66 F0 | 	shl	arg03, #1
114c4     0F 17 02 F1 | 	add	arg03, local01
114c8     02 16 66 F0 | 	shl	arg03, #2
114cc     03 00 00 FF 
114d0     04 E4 85 F1 | 	sub	objptr, ##1540
114d4     F2 16 02 F1 | 	add	arg03, objptr
114d8     0B 17 02 FB | 	rdlong	arg03, arg03
114dc     0C 4E 05 F1 | 	add	fp, #12
114e0     A7 16 62 FC | 	wrlong	arg03, fp
114e4                 | ' 
114e4                 | ' numpar=compiledline(lineptr_e).result.uresult
114e4                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
114e4     0C 4E 85 F1 | 	sub	fp, #12
114e8     02 16 16 F2 | 	cmp	arg03, #2 wc
114ec     66 00 00 FF 
114f0     50 E5 85 F1 | 	sub	objptr, ##52560
114f4     0C 4E 05 C1 |  if_b	add	fp, #12
114f8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
114fc     0C 4E 85 C1 |  if_b	sub	fp, #12
11500     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1360
11504     00 12 06 F6 | 	mov	arg01, #0
11508     D0 D1 B0 FD | 	call	#__system___getiolock_0423
1150c     FD 12 02 F6 | 	mov	arg01, result1
11510     C4 78 B0 FD | 	call	#__system___lockmem
11514     44 01 00 FF 
11518     93 14 06 F6 | 	mov	arg02, ##@LR__4590
1151c     00 12 06 F6 | 	mov	arg01, #0
11520     00 16 06 F6 | 	mov	arg03, #0
11524     A4 85 B0 FD | 	call	#__system___basic_print_string
11528     00 12 06 F6 | 	mov	arg01, #0
1152c     AC D1 B0 FD | 	call	#__system___getiolock_0423
11530     FD 00 68 FC | 	wrlong	#0, result1
11534     27 12 06 F6 | 	mov	arg01, #39
11538     18 43 B0 FD | 	call	#_printerror
1153c     64 00 90 FD | 	jmp	#LR__1361
11540                 | LR__1360
11540     A0 83 BF FD | 	call	#_pop
11544     FF 1E 02 F6 | 	mov	local01, result3
11548     A7 FA 61 FC | 	wrlong	result1, fp
1154c     04 4E 05 F1 | 	add	fp, #4
11550     A7 FC 61 FC | 	wrlong	result2, fp
11554     04 4E 05 F1 | 	add	fp, #4
11558     A7 1E 62 FC | 	wrlong	local01, fp
1155c     08 4E 85 F1 | 	sub	fp, #8
11560     A7 12 02 F6 | 	mov	arg01, fp
11564     98 F9 BF FD | 	call	#_converttofloat
11568     FD 12 02 F6 | 	mov	arg01, result1
1156c     24 AE B0 FD | 	call	#__system____builtin_asinf
11570     FD 12 02 F6 | 	mov	arg01, result1
11574     7A 00 00 FF 
11578     60 E5 05 F1 | 	add	objptr, ##62816
1157c     F2 14 02 FB | 	rdlong	arg02, objptr
11580     7A 00 00 FF 
11584     60 E5 85 F1 | 	sub	objptr, ##62816
11588     38 A3 B0 FD | 	call	#__system___float_mul
1158c     A7 FA 61 FC | 	wrlong	result1, fp
11590     08 4E 05 F1 | 	add	fp, #8
11594     A7 3C 68 FC | 	wrlong	#30, fp
11598     08 4E 85 F1 | 	sub	fp, #8
1159c     A7 12 02 F6 | 	mov	arg01, fp
115a0     D8 83 BF FD | 	call	#_push
115a4                 | LR__1361
115a4     A7 F0 03 F6 | 	mov	ptra, fp
115a8     B2 00 A0 FD | 	call	#popregs_
115ac                 | _do_asin_ret
115ac     2D 00 64 FD | 	ret
115b0                 | 
115b0                 | ' 
115b0                 | ' sub do_acos
115b0                 | _do_acos
115b0     01 4A 05 F6 | 	mov	COUNT_, #1
115b4     A8 00 A0 FD | 	call	#pushregs_
115b8     10 F0 07 F1 | 	add	ptra, #16
115bc     69 00 00 FF 
115c0     54 E5 05 F1 | 	add	objptr, ##54100
115c4     F2 1E 02 FB | 	rdlong	local01, objptr
115c8     0F 17 02 F6 | 	mov	arg03, local01
115cc     01 16 66 F0 | 	shl	arg03, #1
115d0     0F 17 02 F1 | 	add	arg03, local01
115d4     02 16 66 F0 | 	shl	arg03, #2
115d8     03 00 00 FF 
115dc     04 E4 85 F1 | 	sub	objptr, ##1540
115e0     F2 16 02 F1 | 	add	arg03, objptr
115e4     0B 17 02 FB | 	rdlong	arg03, arg03
115e8     0C 4E 05 F1 | 	add	fp, #12
115ec     A7 16 62 FC | 	wrlong	arg03, fp
115f0                 | ' 
115f0                 | ' numpar=compiledline(lineptr_e).result.uresult
115f0                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
115f0     0C 4E 85 F1 | 	sub	fp, #12
115f4     02 16 16 F2 | 	cmp	arg03, #2 wc
115f8     66 00 00 FF 
115fc     50 E5 85 F1 | 	sub	objptr, ##52560
11600     0C 4E 05 C1 |  if_b	add	fp, #12
11604     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11608     0C 4E 85 C1 |  if_b	sub	fp, #12
1160c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1370
11610     00 12 06 F6 | 	mov	arg01, #0
11614     C4 D0 B0 FD | 	call	#__system___getiolock_0423
11618     FD 12 02 F6 | 	mov	arg01, result1
1161c     B8 77 B0 FD | 	call	#__system___lockmem
11620     44 01 00 FF 
11624     9A 14 06 F6 | 	mov	arg02, ##@LR__4591
11628     00 12 06 F6 | 	mov	arg01, #0
1162c     00 16 06 F6 | 	mov	arg03, #0
11630     98 84 B0 FD | 	call	#__system___basic_print_string
11634     00 12 06 F6 | 	mov	arg01, #0
11638     A0 D0 B0 FD | 	call	#__system___getiolock_0423
1163c     FD 00 68 FC | 	wrlong	#0, result1
11640     27 12 06 F6 | 	mov	arg01, #39
11644     0C 42 B0 FD | 	call	#_printerror
11648     64 00 90 FD | 	jmp	#LR__1371
1164c                 | LR__1370
1164c     94 82 BF FD | 	call	#_pop
11650     FF 1E 02 F6 | 	mov	local01, result3
11654     A7 FA 61 FC | 	wrlong	result1, fp
11658     04 4E 05 F1 | 	add	fp, #4
1165c     A7 FC 61 FC | 	wrlong	result2, fp
11660     04 4E 05 F1 | 	add	fp, #4
11664     A7 1E 62 FC | 	wrlong	local01, fp
11668     08 4E 85 F1 | 	sub	fp, #8
1166c     A7 12 02 F6 | 	mov	arg01, fp
11670     8C F8 BF FD | 	call	#_converttofloat
11674     FD 12 02 F6 | 	mov	arg01, result1
11678     64 AD B0 FD | 	call	#__system____builtin_acosf
1167c     FD 12 02 F6 | 	mov	arg01, result1
11680     7A 00 00 FF 
11684     60 E5 05 F1 | 	add	objptr, ##62816
11688     F2 14 02 FB | 	rdlong	arg02, objptr
1168c     7A 00 00 FF 
11690     60 E5 85 F1 | 	sub	objptr, ##62816
11694     2C A2 B0 FD | 	call	#__system___float_mul
11698     A7 FA 61 FC | 	wrlong	result1, fp
1169c     08 4E 05 F1 | 	add	fp, #8
116a0     A7 3C 68 FC | 	wrlong	#30, fp
116a4     08 4E 85 F1 | 	sub	fp, #8
116a8     A7 12 02 F6 | 	mov	arg01, fp
116ac     CC 82 BF FD | 	call	#_push
116b0                 | LR__1371
116b0     A7 F0 03 F6 | 	mov	ptra, fp
116b4     B2 00 A0 FD | 	call	#popregs_
116b8                 | _do_acos_ret
116b8     2D 00 64 FD | 	ret
116bc                 | 
116bc                 | ' 
116bc                 | ' sub do_atn
116bc                 | _do_atn
116bc     01 4A 05 F6 | 	mov	COUNT_, #1
116c0     A8 00 A0 FD | 	call	#pushregs_
116c4     10 F0 07 F1 | 	add	ptra, #16
116c8     69 00 00 FF 
116cc     54 E5 05 F1 | 	add	objptr, ##54100
116d0     F2 1E 02 FB | 	rdlong	local01, objptr
116d4     0F 17 02 F6 | 	mov	arg03, local01
116d8     01 16 66 F0 | 	shl	arg03, #1
116dc     0F 17 02 F1 | 	add	arg03, local01
116e0     02 16 66 F0 | 	shl	arg03, #2
116e4     03 00 00 FF 
116e8     04 E4 85 F1 | 	sub	objptr, ##1540
116ec     F2 16 02 F1 | 	add	arg03, objptr
116f0     0B 17 02 FB | 	rdlong	arg03, arg03
116f4     0C 4E 05 F1 | 	add	fp, #12
116f8     A7 16 62 FC | 	wrlong	arg03, fp
116fc                 | ' 
116fc                 | ' numpar=compiledline(lineptr_e).result.uresult
116fc                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
116fc     0C 4E 85 F1 | 	sub	fp, #12
11700     02 16 16 F2 | 	cmp	arg03, #2 wc
11704     66 00 00 FF 
11708     50 E5 85 F1 | 	sub	objptr, ##52560
1170c     0C 4E 05 C1 |  if_b	add	fp, #12
11710     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11714     0C 4E 85 C1 |  if_b	sub	fp, #12
11718     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1380
1171c     00 12 06 F6 | 	mov	arg01, #0
11720     B8 CF B0 FD | 	call	#__system___getiolock_0423
11724     FD 12 02 F6 | 	mov	arg01, result1
11728     AC 76 B0 FD | 	call	#__system___lockmem
1172c     44 01 00 FF 
11730     A1 14 06 F6 | 	mov	arg02, ##@LR__4592
11734     00 12 06 F6 | 	mov	arg01, #0
11738     00 16 06 F6 | 	mov	arg03, #0
1173c     8C 83 B0 FD | 	call	#__system___basic_print_string
11740     00 12 06 F6 | 	mov	arg01, #0
11744     94 CF B0 FD | 	call	#__system___getiolock_0423
11748     FD 00 68 FC | 	wrlong	#0, result1
1174c     27 12 06 F6 | 	mov	arg01, #39
11750     00 41 B0 FD | 	call	#_printerror
11754     6C 00 90 FD | 	jmp	#LR__1381
11758                 | LR__1380
11758     88 81 BF FD | 	call	#_pop
1175c     FF 1E 02 F6 | 	mov	local01, result3
11760     A7 FA 61 FC | 	wrlong	result1, fp
11764     04 4E 05 F1 | 	add	fp, #4
11768     A7 FC 61 FC | 	wrlong	result2, fp
1176c     04 4E 05 F1 | 	add	fp, #4
11770     A7 1E 62 FC | 	wrlong	local01, fp
11774     08 4E 85 F1 | 	sub	fp, #8
11778     A7 12 02 F6 | 	mov	arg01, fp
1177c     80 F7 BF FD | 	call	#_converttofloat
11780     FD 12 02 F6 | 	mov	arg01, result1
11784     00 C0 1F FF 
11788     00 14 06 F6 | 	mov	arg02, ##1065353216
1178c     9C AC B0 FD | 	call	#__system____builtin_atan2f
11790     FD 12 02 F6 | 	mov	arg01, result1
11794     7A 00 00 FF 
11798     60 E5 05 F1 | 	add	objptr, ##62816
1179c     F2 14 02 FB | 	rdlong	arg02, objptr
117a0     7A 00 00 FF 
117a4     60 E5 85 F1 | 	sub	objptr, ##62816
117a8     18 A1 B0 FD | 	call	#__system___float_mul
117ac     A7 FA 61 FC | 	wrlong	result1, fp
117b0     08 4E 05 F1 | 	add	fp, #8
117b4     A7 3C 68 FC | 	wrlong	#30, fp
117b8     08 4E 85 F1 | 	sub	fp, #8
117bc     A7 12 02 F6 | 	mov	arg01, fp
117c0     B8 81 BF FD | 	call	#_push
117c4                 | LR__1381
117c4     A7 F0 03 F6 | 	mov	ptra, fp
117c8     B2 00 A0 FD | 	call	#popregs_
117cc                 | _do_atn_ret
117cc     2D 00 64 FD | 	ret
117d0                 | 
117d0                 | ' 
117d0                 | ' sub do_sqr
117d0                 | _do_sqr
117d0     01 4A 05 F6 | 	mov	COUNT_, #1
117d4     A8 00 A0 FD | 	call	#pushregs_
117d8     10 F0 07 F1 | 	add	ptra, #16
117dc     69 00 00 FF 
117e0     54 E5 05 F1 | 	add	objptr, ##54100
117e4     F2 1E 02 FB | 	rdlong	local01, objptr
117e8     0F 17 02 F6 | 	mov	arg03, local01
117ec     01 16 66 F0 | 	shl	arg03, #1
117f0     0F 17 02 F1 | 	add	arg03, local01
117f4     02 16 66 F0 | 	shl	arg03, #2
117f8     03 00 00 FF 
117fc     04 E4 85 F1 | 	sub	objptr, ##1540
11800     F2 16 02 F1 | 	add	arg03, objptr
11804     0B 17 02 FB | 	rdlong	arg03, arg03
11808     0C 4E 05 F1 | 	add	fp, #12
1180c     A7 16 62 FC | 	wrlong	arg03, fp
11810                 | ' 
11810                 | ' numpar=compiledline(lineptr_e).result.uresult
11810                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
11810     0C 4E 85 F1 | 	sub	fp, #12
11814     02 16 16 F2 | 	cmp	arg03, #2 wc
11818     66 00 00 FF 
1181c     50 E5 85 F1 | 	sub	objptr, ##52560
11820     0C 4E 05 C1 |  if_b	add	fp, #12
11824     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11828     0C 4E 85 C1 |  if_b	sub	fp, #12
1182c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1390
11830     00 12 06 F6 | 	mov	arg01, #0
11834     A4 CE B0 FD | 	call	#__system___getiolock_0423
11838     FD 12 02 F6 | 	mov	arg01, result1
1183c     98 75 B0 FD | 	call	#__system___lockmem
11840     44 01 00 FF 
11844     A7 14 06 F6 | 	mov	arg02, ##@LR__4593
11848     00 12 06 F6 | 	mov	arg01, #0
1184c     00 16 06 F6 | 	mov	arg03, #0
11850     78 82 B0 FD | 	call	#__system___basic_print_string
11854     00 12 06 F6 | 	mov	arg01, #0
11858     80 CE B0 FD | 	call	#__system___getiolock_0423
1185c     FD 00 68 FC | 	wrlong	#0, result1
11860     27 12 06 F6 | 	mov	arg01, #39
11864     EC 3F B0 FD | 	call	#_printerror
11868     48 00 90 FD | 	jmp	#LR__1391
1186c                 | LR__1390
1186c     74 80 BF FD | 	call	#_pop
11870     FF 1E 02 F6 | 	mov	local01, result3
11874     A7 FA 61 FC | 	wrlong	result1, fp
11878     04 4E 05 F1 | 	add	fp, #4
1187c     A7 FC 61 FC | 	wrlong	result2, fp
11880     04 4E 05 F1 | 	add	fp, #4
11884     A7 1E 62 FC | 	wrlong	local01, fp
11888     08 4E 85 F1 | 	sub	fp, #8
1188c     A7 12 02 F6 | 	mov	arg01, fp
11890     6C F6 BF FD | 	call	#_converttofloat
11894     FD 12 02 F6 | 	mov	arg01, result1
11898     50 9F B0 FD | 	call	#__system___float_sqrt
1189c     A7 FA 61 FC | 	wrlong	result1, fp
118a0     08 4E 05 F1 | 	add	fp, #8
118a4     A7 3C 68 FC | 	wrlong	#30, fp
118a8     08 4E 85 F1 | 	sub	fp, #8
118ac     A7 12 02 F6 | 	mov	arg01, fp
118b0     C8 80 BF FD | 	call	#_push
118b4                 | LR__1391
118b4     A7 F0 03 F6 | 	mov	ptra, fp
118b8     B2 00 A0 FD | 	call	#popregs_
118bc                 | _do_sqr_ret
118bc     2D 00 64 FD | 	ret
118c0                 | 
118c0                 | ' 
118c0                 | ' sub do_stick
118c0                 | _do_stick
118c0     01 4A 05 F6 | 	mov	COUNT_, #1
118c4     A8 00 A0 FD | 	call	#pushregs_
118c8     10 F0 07 F1 | 	add	ptra, #16
118cc     69 00 00 FF 
118d0     54 E5 05 F1 | 	add	objptr, ##54100
118d4     F2 1E 02 FB | 	rdlong	local01, objptr
118d8     0F 17 02 F6 | 	mov	arg03, local01
118dc     01 16 66 F0 | 	shl	arg03, #1
118e0     0F 17 02 F1 | 	add	arg03, local01
118e4     02 16 66 F0 | 	shl	arg03, #2
118e8     03 00 00 FF 
118ec     04 E4 85 F1 | 	sub	objptr, ##1540
118f0     F2 16 02 F1 | 	add	arg03, objptr
118f4     0B 17 02 FB | 	rdlong	arg03, arg03
118f8     0C 4E 05 F1 | 	add	fp, #12
118fc     A7 16 62 FC | 	wrlong	arg03, fp
11900                 | ' 
11900                 | ' numpar=compiledline(lineptr_e).result.uresult
11900                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
11900     0C 4E 85 F1 | 	sub	fp, #12
11904     02 16 16 F2 | 	cmp	arg03, #2 wc
11908     66 00 00 FF 
1190c     50 E5 85 F1 | 	sub	objptr, ##52560
11910     3C 00 90 CD |  if_b	jmp	#LR__1400
11914     00 12 06 F6 | 	mov	arg01, #0
11918     C0 CD B0 FD | 	call	#__system___getiolock_0423
1191c     FD 12 02 F6 | 	mov	arg01, result1
11920     B4 74 B0 FD | 	call	#__system___lockmem
11924     44 01 00 FF 
11928     AD 14 06 F6 | 	mov	arg02, ##@LR__4594
1192c     00 12 06 F6 | 	mov	arg01, #0
11930     00 16 06 F6 | 	mov	arg03, #0
11934     94 81 B0 FD | 	call	#__system___basic_print_string
11938     00 12 06 F6 | 	mov	arg01, #0
1193c     9C CD B0 FD | 	call	#__system___getiolock_0423
11940     FD 00 68 FC | 	wrlong	#0, result1
11944     27 12 06 F6 | 	mov	arg01, #39
11948     08 3F B0 FD | 	call	#_printerror
1194c     E8 00 90 FD | 	jmp	#LR__1404
11950                 | LR__1400
11950                 | ' 
11950                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
11950     0C 4E 05 F1 | 	add	fp, #12
11954     A7 FE 09 FB | 	rdlong	result3, fp wz
11958     0C 4E 85 F1 | 	sub	fp, #12
1195c     30 00 90 5D |  if_ne	jmp	#LR__1401
11960     7A 00 00 FF 
11964     D0 E4 05 F1 | 	add	objptr, ##62672
11968     F2 1E 02 FB | 	rdlong	local01, objptr
1196c     7A 00 00 FF 
11970     D0 E4 85 F1 | 	sub	objptr, ##62672
11974     A7 1E 62 FC | 	wrlong	local01, fp
11978     08 4E 05 F1 | 	add	fp, #8
1197c     A7 3A 68 FC | 	wrlong	#29, fp
11980     08 4E 85 F1 | 	sub	fp, #8
11984     A7 12 02 F6 | 	mov	arg01, fp
11988     F0 7F BF FD | 	call	#_push
1198c     A8 00 90 FD | 	jmp	#LR__1404
11990                 | LR__1401
11990     50 7F BF FD | 	call	#_pop
11994     A7 FA 61 FC | 	wrlong	result1, fp
11998     04 4E 05 F1 | 	add	fp, #4
1199c     A7 FC 61 FC | 	wrlong	result2, fp
119a0     04 4E 05 F1 | 	add	fp, #4
119a4     A7 FE 61 FC | 	wrlong	result3, fp
119a8                 | ' 
119a8                 | ' t1=pop()
119a8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
119a8     08 4E 85 F1 | 	sub	fp, #8
119ac     1C FE 0D F2 | 	cmp	result3, #28 wz
119b0     08 4E 05 51 |  if_ne	add	fp, #8
119b4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
119b8     08 4E 85 51 |  if_ne	sub	fp, #8
119bc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
119c0     6C 00 90 5D |  if_ne	jmp	#LR__1403
119c4     A7 1E 02 FB | 	rdlong	local01, fp
119c8     7A 00 00 FF 
119cc     A8 E5 05 F1 | 	add	objptr, ##62888
119d0     F2 1E 62 FC | 	wrlong	local01, objptr
119d4                 | '   q=t1.result.uresult
119d4                 | '   if q<7 then 
119d4     7A 00 00 FF 
119d8     A8 E5 85 F1 | 	sub	objptr, ##62888
119dc     07 1E 56 F2 | 	cmps	local01, #7 wc
119e0     40 00 90 3D |  if_ae	jmp	#LR__1402
119e4     7A 00 00 FF 
119e8     A8 E5 05 F1 | 	add	objptr, ##62888
119ec     F2 1E 02 FB | 	rdlong	local01, objptr
119f0     02 1E 66 F0 | 	shl	local01, #2
119f4     D8 E4 85 F1 | 	sub	objptr, #216
119f8     F2 1E 02 F1 | 	add	local01, objptr
119fc     0F 1F 02 FB | 	rdlong	local01, local01
11a00     A7 1E 62 FC | 	wrlong	local01, fp
11a04     08 4E 05 F1 | 	add	fp, #8
11a08     A7 3A 68 FC | 	wrlong	#29, fp
11a0c     08 4E 85 F1 | 	sub	fp, #8
11a10     A7 12 02 F6 | 	mov	arg01, fp
11a14     7A 00 00 FF 
11a18     D0 E4 85 F1 | 	sub	objptr, ##62672
11a1c     5C 7F BF FD | 	call	#_push
11a20                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
11a20     14 00 90 FD | 	jmp	#LR__1404
11a24                 | LR__1402
11a24     29 12 06 F6 | 	mov	arg01, #41
11a28     28 3E B0 FD | 	call	#_printerror
11a2c                 | '      printerror(41) : return
11a2c     08 00 90 FD | 	jmp	#LR__1404
11a30                 | LR__1403
11a30     29 12 06 F6 | 	mov	arg01, #41
11a34     1C 3E B0 FD | 	call	#_printerror
11a38                 | LR__1404
11a38     A7 F0 03 F6 | 	mov	ptra, fp
11a3c     B2 00 A0 FD | 	call	#popregs_
11a40                 | _do_stick_ret
11a40     2D 00 64 FD | 	ret
11a44                 | 
11a44                 | ' 
11a44                 | ' sub do_strig
11a44                 | _do_strig
11a44     01 4A 05 F6 | 	mov	COUNT_, #1
11a48     A8 00 A0 FD | 	call	#pushregs_
11a4c     10 F0 07 F1 | 	add	ptra, #16
11a50     69 00 00 FF 
11a54     54 E5 05 F1 | 	add	objptr, ##54100
11a58     F2 1E 02 FB | 	rdlong	local01, objptr
11a5c     0F 17 02 F6 | 	mov	arg03, local01
11a60     01 16 66 F0 | 	shl	arg03, #1
11a64     0F 17 02 F1 | 	add	arg03, local01
11a68     02 16 66 F0 | 	shl	arg03, #2
11a6c     03 00 00 FF 
11a70     04 E4 85 F1 | 	sub	objptr, ##1540
11a74     F2 16 02 F1 | 	add	arg03, objptr
11a78     0B 17 02 FB | 	rdlong	arg03, arg03
11a7c     0C 4E 05 F1 | 	add	fp, #12
11a80     A7 16 62 FC | 	wrlong	arg03, fp
11a84                 | ' 
11a84                 | ' numpar=compiledline(lineptr_e).result.uresult
11a84                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
11a84     0C 4E 85 F1 | 	sub	fp, #12
11a88     02 16 16 F2 | 	cmp	arg03, #2 wc
11a8c     66 00 00 FF 
11a90     50 E5 85 F1 | 	sub	objptr, ##52560
11a94     3C 00 90 CD |  if_b	jmp	#LR__1410
11a98     00 12 06 F6 | 	mov	arg01, #0
11a9c     3C CC B0 FD | 	call	#__system___getiolock_0423
11aa0     FD 12 02 F6 | 	mov	arg01, result1
11aa4     30 73 B0 FD | 	call	#__system___lockmem
11aa8     44 01 00 FF 
11aac     B5 14 06 F6 | 	mov	arg02, ##@LR__4595
11ab0     00 12 06 F6 | 	mov	arg01, #0
11ab4     00 16 06 F6 | 	mov	arg03, #0
11ab8     10 80 B0 FD | 	call	#__system___basic_print_string
11abc     00 12 06 F6 | 	mov	arg01, #0
11ac0     18 CC B0 FD | 	call	#__system___getiolock_0423
11ac4     FD 00 68 FC | 	wrlong	#0, result1
11ac8     27 12 06 F6 | 	mov	arg01, #39
11acc     84 3D B0 FD | 	call	#_printerror
11ad0     E8 00 90 FD | 	jmp	#LR__1414
11ad4                 | LR__1410
11ad4                 | ' 
11ad4                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
11ad4     0C 4E 05 F1 | 	add	fp, #12
11ad8     A7 FE 09 FB | 	rdlong	result3, fp wz
11adc     0C 4E 85 F1 | 	sub	fp, #12
11ae0     30 00 90 5D |  if_ne	jmp	#LR__1411
11ae4     7A 00 00 FF 
11ae8     EC E4 05 F1 | 	add	objptr, ##62700
11aec     F2 1E 02 FB | 	rdlong	local01, objptr
11af0     7A 00 00 FF 
11af4     EC E4 85 F1 | 	sub	objptr, ##62700
11af8     A7 1E 62 FC | 	wrlong	local01, fp
11afc     08 4E 05 F1 | 	add	fp, #8
11b00     A7 3A 68 FC | 	wrlong	#29, fp
11b04     08 4E 85 F1 | 	sub	fp, #8
11b08     A7 12 02 F6 | 	mov	arg01, fp
11b0c     6C 7E BF FD | 	call	#_push
11b10     A8 00 90 FD | 	jmp	#LR__1414
11b14                 | LR__1411
11b14     CC 7D BF FD | 	call	#_pop
11b18     A7 FA 61 FC | 	wrlong	result1, fp
11b1c     04 4E 05 F1 | 	add	fp, #4
11b20     A7 FC 61 FC | 	wrlong	result2, fp
11b24     04 4E 05 F1 | 	add	fp, #4
11b28     A7 FE 61 FC | 	wrlong	result3, fp
11b2c                 | ' 
11b2c                 | ' t1=pop()
11b2c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
11b2c     08 4E 85 F1 | 	sub	fp, #8
11b30     1C FE 0D F2 | 	cmp	result3, #28 wz
11b34     08 4E 05 51 |  if_ne	add	fp, #8
11b38     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11b3c     08 4E 85 51 |  if_ne	sub	fp, #8
11b40     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11b44     6C 00 90 5D |  if_ne	jmp	#LR__1413
11b48     A7 1E 02 FB | 	rdlong	local01, fp
11b4c     7A 00 00 FF 
11b50     A8 E5 05 F1 | 	add	objptr, ##62888
11b54     F2 1E 62 FC | 	wrlong	local01, objptr
11b58                 | '   q=t1.result.uresult
11b58                 | '   if q<7 then 
11b58     7A 00 00 FF 
11b5c     A8 E5 85 F1 | 	sub	objptr, ##62888
11b60     07 1E 56 F2 | 	cmps	local01, #7 wc
11b64     40 00 90 3D |  if_ae	jmp	#LR__1412
11b68     7A 00 00 FF 
11b6c     A8 E5 05 F1 | 	add	objptr, ##62888
11b70     F2 1E 02 FB | 	rdlong	local01, objptr
11b74     02 1E 66 F0 | 	shl	local01, #2
11b78     BC E4 85 F1 | 	sub	objptr, #188
11b7c     F2 1E 02 F1 | 	add	local01, objptr
11b80     0F 1F 02 FB | 	rdlong	local01, local01
11b84     A7 1E 62 FC | 	wrlong	local01, fp
11b88     08 4E 05 F1 | 	add	fp, #8
11b8c     A7 3A 68 FC | 	wrlong	#29, fp
11b90     08 4E 85 F1 | 	sub	fp, #8
11b94     A7 12 02 F6 | 	mov	arg01, fp
11b98     7A 00 00 FF 
11b9c     EC E4 85 F1 | 	sub	objptr, ##62700
11ba0     D8 7D BF FD | 	call	#_push
11ba4                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
11ba4     14 00 90 FD | 	jmp	#LR__1414
11ba8                 | LR__1412
11ba8     29 12 06 F6 | 	mov	arg01, #41
11bac     A4 3C B0 FD | 	call	#_printerror
11bb0                 | '      printerror(41) : return
11bb0     08 00 90 FD | 	jmp	#LR__1414
11bb4                 | LR__1413
11bb4     29 12 06 F6 | 	mov	arg01, #41
11bb8     98 3C B0 FD | 	call	#_printerror
11bbc                 | LR__1414
11bbc     A7 F0 03 F6 | 	mov	ptra, fp
11bc0     B2 00 A0 FD | 	call	#popregs_
11bc4                 | _do_strig_ret
11bc4     2D 00 64 FD | 	ret
11bc8                 | 
11bc8                 | ' 
11bc8                 | ' sub do_getpixel
11bc8                 | _do_getpixel
11bc8     00 4A 05 F6 | 	mov	COUNT_, #0
11bcc     A8 00 A0 FD | 	call	#pushregs_
11bd0     24 F0 07 F1 | 	add	ptra, #36
11bd4     69 00 00 FF 
11bd8     54 E5 05 F1 | 	add	objptr, ##54100
11bdc     F2 16 02 FB | 	rdlong	arg03, objptr
11be0     0B 15 02 F6 | 	mov	arg02, arg03
11be4     01 14 66 F0 | 	shl	arg02, #1
11be8     0B 15 02 F1 | 	add	arg02, arg03
11bec     02 14 66 F0 | 	shl	arg02, #2
11bf0     03 00 00 FF 
11bf4     04 E4 85 F1 | 	sub	objptr, ##1540
11bf8     F2 14 02 F1 | 	add	arg02, objptr
11bfc     0A 17 02 FB | 	rdlong	arg03, arg02
11c00     18 4E 05 F1 | 	add	fp, #24
11c04     A7 16 62 FC | 	wrlong	arg03, fp
11c08                 | ' 
11c08                 | ' numpar=compiledline(lineptr_e).result.uresult
11c08                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
11c08     18 4E 85 F1 | 	sub	fp, #24
11c0c     02 16 0E F2 | 	cmp	arg03, #2 wz
11c10     66 00 00 FF 
11c14     50 E5 85 F1 | 	sub	objptr, ##52560
11c18     3C 00 90 AD |  if_e	jmp	#LR__1420
11c1c     00 12 06 F6 | 	mov	arg01, #0
11c20     B8 CA B0 FD | 	call	#__system___getiolock_0423
11c24     FD 12 02 F6 | 	mov	arg01, result1
11c28     AC 71 B0 FD | 	call	#__system___lockmem
11c2c     44 01 00 FF 
11c30     BD 14 06 F6 | 	mov	arg02, ##@LR__4596
11c34     00 12 06 F6 | 	mov	arg01, #0
11c38     00 16 06 F6 | 	mov	arg03, #0
11c3c     8C 7E B0 FD | 	call	#__system___basic_print_string
11c40     00 12 06 F6 | 	mov	arg01, #0
11c44     94 CA B0 FD | 	call	#__system___getiolock_0423
11c48     FD 00 68 FC | 	wrlong	#0, result1
11c4c     27 12 06 F6 | 	mov	arg01, #39
11c50     00 3C B0 FD | 	call	#_printerror
11c54     B4 00 90 FD | 	jmp	#LR__1421
11c58                 | LR__1420
11c58     88 7C BF FD | 	call	#_pop
11c5c     FD 16 02 F6 | 	mov	arg03, result1
11c60     FE 14 02 F6 | 	mov	arg02, result2
11c64     FF 12 02 F6 | 	mov	arg01, result3
11c68     0C 4E 05 F1 | 	add	fp, #12
11c6c     A7 16 62 FC | 	wrlong	arg03, fp
11c70     04 4E 05 F1 | 	add	fp, #4
11c74     A7 14 62 FC | 	wrlong	arg02, fp
11c78     04 4E 05 F1 | 	add	fp, #4
11c7c     A7 12 62 FC | 	wrlong	arg01, fp
11c80     14 4E 85 F1 | 	sub	fp, #20
11c84     5C 7C BF FD | 	call	#_pop
11c88     FF 16 02 F6 | 	mov	arg03, result3
11c8c     A7 FA 61 FC | 	wrlong	result1, fp
11c90     04 4E 05 F1 | 	add	fp, #4
11c94     A7 FC 61 FC | 	wrlong	result2, fp
11c98     04 4E 05 F1 | 	add	fp, #4
11c9c     A7 16 62 FC | 	wrlong	arg03, fp
11ca0     08 4E 85 F1 | 	sub	fp, #8
11ca4     A7 12 02 F6 | 	mov	arg01, fp
11ca8     A8 F1 BF FD | 	call	#_converttoint
11cac     1C 4E 05 F1 | 	add	fp, #28
11cb0     A7 FA 61 FC | 	wrlong	result1, fp
11cb4     10 4E 85 F1 | 	sub	fp, #16
11cb8     A7 12 02 F6 | 	mov	arg01, fp
11cbc     0C 4E 85 F1 | 	sub	fp, #12
11cc0     90 F1 BF FD | 	call	#_converttoint
11cc4     FD 16 02 F6 | 	mov	arg03, result1
11cc8     20 4E 05 F1 | 	add	fp, #32
11ccc     A7 16 62 FC | 	wrlong	arg03, fp
11cd0     F2 12 02 FB | 	rdlong	arg01, objptr
11cd4     04 4E 85 F1 | 	sub	fp, #4
11cd8     A7 FE 01 FB | 	rdlong	result3, fp
11cdc     FF 12 02 F1 | 	add	arg01, result3
11ce0     1C 4E 85 F1 | 	sub	fp, #28
11ce4     0A 16 66 F0 | 	shl	arg03, #10
11ce8     0B 13 02 F1 | 	add	arg01, arg03
11cec     C8 3C B0 FD | 	call	#_pspeek
11cf0     FD FA E1 F8 | 	getbyte	result1, result1, #0
11cf4     A7 FA 61 FC | 	wrlong	result1, fp
11cf8     08 4E 05 F1 | 	add	fp, #8
11cfc     A7 3A 68 FC | 	wrlong	#29, fp
11d00     08 4E 85 F1 | 	sub	fp, #8
11d04     A7 12 02 F6 | 	mov	arg01, fp
11d08     70 7C BF FD | 	call	#_push
11d0c                 | LR__1421
11d0c     A7 F0 03 F6 | 	mov	ptra, fp
11d10     B2 00 A0 FD | 	call	#popregs_
11d14                 | _do_getpixel_ret
11d14     2D 00 64 FD | 	ret
11d18                 | 
11d18                 | ' 
11d18                 | ' 
11d18                 | ' 
11d18                 | ' sub do_defsprite
11d18                 | _do_defsprite
11d18     07 4A 05 F6 | 	mov	COUNT_, #7
11d1c     A8 00 A0 FD | 	call	#pushregs_
11d20     5C F0 07 F1 | 	add	ptra, #92
11d24     BC 7B BF FD | 	call	#_pop
11d28     FD 16 02 F6 | 	mov	arg03, result1
11d2c     FE 14 02 F6 | 	mov	arg02, result2
11d30     FF 12 02 F6 | 	mov	arg01, result3
11d34     30 4E 05 F1 | 	add	fp, #48
11d38     A7 16 62 FC | 	wrlong	arg03, fp
11d3c     04 4E 05 F1 | 	add	fp, #4
11d40     A7 14 62 FC | 	wrlong	arg02, fp
11d44     04 4E 05 F1 | 	add	fp, #4
11d48     A7 12 62 FC | 	wrlong	arg01, fp
11d4c     38 4E 85 F1 | 	sub	fp, #56
11d50     90 7B BF FD | 	call	#_pop
11d54     FD 16 02 F6 | 	mov	arg03, result1
11d58     FE 14 02 F6 | 	mov	arg02, result2
11d5c     FF 12 02 F6 | 	mov	arg01, result3
11d60     24 4E 05 F1 | 	add	fp, #36
11d64     A7 16 62 FC | 	wrlong	arg03, fp
11d68     04 4E 05 F1 | 	add	fp, #4
11d6c     A7 14 62 FC | 	wrlong	arg02, fp
11d70     04 4E 05 F1 | 	add	fp, #4
11d74     A7 12 62 FC | 	wrlong	arg01, fp
11d78     2C 4E 85 F1 | 	sub	fp, #44
11d7c     64 7B BF FD | 	call	#_pop
11d80     FD 16 02 F6 | 	mov	arg03, result1
11d84     FE 14 02 F6 | 	mov	arg02, result2
11d88     FF 12 02 F6 | 	mov	arg01, result3
11d8c     18 4E 05 F1 | 	add	fp, #24
11d90     A7 16 62 FC | 	wrlong	arg03, fp
11d94     04 4E 05 F1 | 	add	fp, #4
11d98     A7 14 62 FC | 	wrlong	arg02, fp
11d9c     04 4E 05 F1 | 	add	fp, #4
11da0     A7 12 62 FC | 	wrlong	arg01, fp
11da4     20 4E 85 F1 | 	sub	fp, #32
11da8     38 7B BF FD | 	call	#_pop
11dac     FD 16 02 F6 | 	mov	arg03, result1
11db0     FE 14 02 F6 | 	mov	arg02, result2
11db4     FF 12 02 F6 | 	mov	arg01, result3
11db8     0C 4E 05 F1 | 	add	fp, #12
11dbc     A7 16 62 FC | 	wrlong	arg03, fp
11dc0     04 4E 05 F1 | 	add	fp, #4
11dc4     A7 14 62 FC | 	wrlong	arg02, fp
11dc8     04 4E 05 F1 | 	add	fp, #4
11dcc     A7 12 62 FC | 	wrlong	arg01, fp
11dd0     14 4E 85 F1 | 	sub	fp, #20
11dd4     0C 7B BF FD | 	call	#_pop
11dd8     FF 16 02 F6 | 	mov	arg03, result3
11ddc     A7 FA 61 FC | 	wrlong	result1, fp
11de0     04 4E 05 F1 | 	add	fp, #4
11de4     A7 FC 61 FC | 	wrlong	result2, fp
11de8     04 4E 05 F1 | 	add	fp, #4
11dec     A7 16 62 FC | 	wrlong	arg03, fp
11df0     08 4E 85 F1 | 	sub	fp, #8
11df4     A7 12 02 F6 | 	mov	arg01, fp
11df8     58 F0 BF FD | 	call	#_converttoint
11dfc     3C 4E 05 F1 | 	add	fp, #60
11e00     A7 FA 61 FC | 	wrlong	result1, fp
11e04     30 4E 85 F1 | 	sub	fp, #48
11e08     A7 12 02 F6 | 	mov	arg01, fp
11e0c     0C 4E 85 F1 | 	sub	fp, #12
11e10     40 F0 BF FD | 	call	#_converttoint
11e14     40 4E 05 F1 | 	add	fp, #64
11e18     A7 FA 61 FC | 	wrlong	result1, fp
11e1c     28 4E 85 F1 | 	sub	fp, #40
11e20     A7 12 02 F6 | 	mov	arg01, fp
11e24     18 4E 85 F1 | 	sub	fp, #24
11e28     28 F0 BF FD | 	call	#_converttoint
11e2c     44 4E 05 F1 | 	add	fp, #68
11e30     A7 FA 61 FC | 	wrlong	result1, fp
11e34     20 4E 85 F1 | 	sub	fp, #32
11e38     A7 12 02 F6 | 	mov	arg01, fp
11e3c     24 4E 85 F1 | 	sub	fp, #36
11e40     10 F0 BF FD | 	call	#_converttoint
11e44     48 4E 05 F1 | 	add	fp, #72
11e48     A7 FA 61 FC | 	wrlong	result1, fp
11e4c     18 4E 85 F1 | 	sub	fp, #24
11e50     A7 12 02 F6 | 	mov	arg01, fp
11e54     30 4E 85 F1 | 	sub	fp, #48
11e58     F8 EF BF FD | 	call	#_converttoint
11e5c     4C 4E 05 F1 | 	add	fp, #76
11e60     A7 FA 61 FC | 	wrlong	result1, fp
11e64                 | ' 
11e64                 | ' t5=pop()
11e64                 | ' t4=pop()
11e64                 | ' t3=pop()
11e64                 | ' t2=pop()
11e64                 | ' t1=pop()
11e64                 | ' 
11e64                 | ' ' do convert, defsprite is not a racing command
11e64                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
11e64                 | '  
11e64                 | ' ' todo: check parameters for linits
11e64                 | ' if sprite(a1)<> nil then delete(sprite(a1))
11e64     10 4E 85 F1 | 	sub	fp, #16
11e68     A7 16 02 FB | 	rdlong	arg03, fp
11e6c     3C 4E 85 F1 | 	sub	fp, #60
11e70     02 16 66 F0 | 	shl	arg03, #2
11e74     7A 00 00 FF 
11e78     08 E5 05 F1 | 	add	objptr, ##62728
11e7c     F2 16 02 F1 | 	add	arg03, objptr
11e80     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11e84     7A 00 00 FF 
11e88     08 E5 85 F1 | 	sub	objptr, ##62728
11e8c     2C 00 90 AD |  if_e	jmp	#LR__1430
11e90     3C 4E 05 F1 | 	add	fp, #60
11e94     A7 16 02 FB | 	rdlong	arg03, fp
11e98     3C 4E 85 F1 | 	sub	fp, #60
11e9c     02 16 66 F0 | 	shl	arg03, #2
11ea0     7A 00 00 FF 
11ea4     08 E5 05 F1 | 	add	objptr, ##62728
11ea8     F2 16 02 F1 | 	add	arg03, objptr
11eac     0B 13 02 FB | 	rdlong	arg01, arg03
11eb0     7A 00 00 FF 
11eb4     08 E5 85 F1 | 	sub	objptr, ##62728
11eb8     10 AE B0 FD | 	call	#__system___gc_free
11ebc                 | LR__1430
11ebc     3C 4E 05 F1 | 	add	fp, #60
11ec0     A7 1E 02 FB | 	rdlong	local01, fp
11ec4     0C 4E 05 F1 | 	add	fp, #12
11ec8     A7 16 02 FB | 	rdlong	arg03, fp
11ecc     04 4E 05 F1 | 	add	fp, #4
11ed0     A7 14 02 FB | 	rdlong	arg02, fp
11ed4     0A 17 02 FD | 	qmul	arg03, arg02
11ed8     02 1E 66 F0 | 	shl	local01, #2
11edc     7A 00 00 FF 
11ee0     08 E5 05 F1 | 	add	objptr, ##62728
11ee4     F2 1E 02 F1 | 	add	local01, objptr
11ee8     4C 4E 85 F1 | 	sub	fp, #76
11eec     7A 00 00 FF 
11ef0     08 E5 85 F1 | 	sub	objptr, ##62728
11ef4     18 12 62 FD | 	getqx	arg01
11ef8     94 AC B0 FD | 	call	#__system___gc_alloc_managed
11efc     0F FB 61 FC | 	wrlong	result1, local01
11f00                 | ' for y=a3 to a3+a5-1
11f00     44 4E 05 F1 | 	add	fp, #68
11f04     A7 20 02 FB | 	rdlong	local02, fp
11f08     0C 4E 05 F1 | 	add	fp, #12
11f0c     A7 20 62 FC | 	wrlong	local02, fp
11f10     0C 4E 85 F1 | 	sub	fp, #12
11f14     A7 22 02 FB | 	rdlong	local03, fp
11f18     08 4E 05 F1 | 	add	fp, #8
11f1c     A7 24 02 FB | 	rdlong	local04, fp
11f20     4C 4E 85 F1 | 	sub	fp, #76
11f24     12 23 02 F1 | 	add	local03, local04
11f28                 | LR__1431
11f28     50 4E 05 F1 | 	add	fp, #80
11f2c     A7 20 02 FB | 	rdlong	local02, fp
11f30     50 4E 85 F1 | 	sub	fp, #80
11f34     11 21 52 F2 | 	cmps	local02, local03 wc
11f38     10 01 90 3D |  if_ae	jmp	#LR__1434
11f3c                 | '   for x=a2 to a4+a2-1
11f3c     40 4E 05 F1 | 	add	fp, #64
11f40     A7 1E 02 FB | 	rdlong	local01, fp
11f44     7A 00 00 FF 
11f48     7C E5 05 F1 | 	add	objptr, ##62844
11f4c     F2 1E 62 FC | 	wrlong	local01, objptr
11f50     7A 00 00 FF 
11f54     7C E5 85 F1 | 	sub	objptr, ##62844
11f58     08 4E 05 F1 | 	add	fp, #8
11f5c     A7 26 02 FB | 	rdlong	local05, fp
11f60     08 4E 85 F1 | 	sub	fp, #8
11f64     A7 28 02 FB | 	rdlong	local06, fp
11f68     40 4E 85 F1 | 	sub	fp, #64
11f6c     14 27 02 F1 | 	add	local05, local06
11f70                 | LR__1432
11f70     7A 00 00 FF 
11f74     7C E5 05 F1 | 	add	objptr, ##62844
11f78     F2 1E 02 FB | 	rdlong	local01, objptr
11f7c     7A 00 00 FF 
11f80     7C E5 85 F1 | 	sub	objptr, ##62844
11f84     13 1F 52 F2 | 	cmps	local01, local05 wc
11f88     A8 00 90 3D |  if_ae	jmp	#LR__1433
11f8c     3C 4E 05 F1 | 	add	fp, #60
11f90     A7 28 02 FB | 	rdlong	local06, fp
11f94     04 4E 05 F1 | 	add	fp, #4
11f98     A7 24 02 FB | 	rdlong	local04, fp
11f9c     10 4E 05 F1 | 	add	fp, #16
11fa0     A7 20 02 FB | 	rdlong	local02, fp
11fa4     10 1F 02 F6 | 	mov	local01, local02
11fa8     0C 4E 85 F1 | 	sub	fp, #12
11fac     A7 16 02 FB | 	rdlong	arg03, fp
11fb0     0B 1F 82 F1 | 	sub	local01, arg03
11fb4     04 4E 05 F1 | 	add	fp, #4
11fb8     A7 16 02 FB | 	rdlong	arg03, fp
11fbc     0B 1F 02 FD | 	qmul	local01, arg03
11fc0     02 28 66 F0 | 	shl	local06, #2
11fc4     7A 00 00 FF 
11fc8     08 E5 05 F1 | 	add	objptr, ##62728
11fcc     F2 28 02 F1 | 	add	local06, objptr
11fd0     14 29 02 FB | 	rdlong	local06, local06
11fd4     74 E4 05 F1 | 	add	objptr, #116
11fd8     F2 1E 02 FB | 	rdlong	local01, objptr
11fdc     7A 00 00 FF 
11fe0     7C E5 85 F1 | 	sub	objptr, ##62844
11fe4     0F 2B 02 F6 | 	mov	local07, local01
11fe8     12 2B 82 F1 | 	sub	local07, local04
11fec     F2 12 02 FB | 	rdlong	arg01, objptr
11ff0     0F 13 02 F1 | 	add	arg01, local01
11ff4     48 4E 85 F1 | 	sub	fp, #72
11ff8     0A 20 66 F0 | 	shl	local02, #10
11ffc     10 13 02 F1 | 	add	arg01, local02
12000     18 24 62 FD | 	getqx	local04
12004     12 2B 02 F1 | 	add	local07, local04
12008     14 2B 02 F1 | 	add	local07, local06
1200c     A8 39 B0 FD | 	call	#_pspeek
12010     15 FB 41 FC | 	wrbyte	result1, local07
12014     7A 00 00 FF 
12018     7C E5 05 F1 | 	add	objptr, ##62844
1201c     F2 2A 02 FB | 	rdlong	local07, objptr
12020     01 2A 06 F1 | 	add	local07, #1
12024     F2 2A 62 FC | 	wrlong	local07, objptr
12028     7A 00 00 FF 
1202c     7C E5 85 F1 | 	sub	objptr, ##62844
12030     3C FF 9F FD | 	jmp	#LR__1432
12034                 | LR__1433
12034     50 4E 05 F1 | 	add	fp, #80
12038     A7 2A 02 FB | 	rdlong	local07, fp
1203c     01 2A 06 F1 | 	add	local07, #1
12040     A7 2A 62 FC | 	wrlong	local07, fp
12044     50 4E 85 F1 | 	sub	fp, #80
12048     DC FE 9F FD | 	jmp	#LR__1431
1204c                 | LR__1434
1204c     3C 4E 05 F1 | 	add	fp, #60
12050     A7 2A 02 FB | 	rdlong	local07, fp
12054     15 13 02 F6 | 	mov	arg01, local07
12058     3C 4E 85 F1 | 	sub	fp, #60
1205c     02 2A 66 F0 | 	shl	local07, #2
12060     7A 00 00 FF 
12064     08 E5 05 F1 | 	add	objptr, ##62728
12068     F2 2A 02 F1 | 	add	local07, objptr
1206c     15 15 02 FB | 	rdlong	arg02, local07
12070     7A 00 00 FF 
12074     08 E5 85 F1 | 	sub	objptr, ##62728
12078     EC 4C B0 FD | 	call	#_hg010b_spin2_setspriteptr
1207c     3C 4E 05 F1 | 	add	fp, #60
12080     A7 12 02 FB | 	rdlong	arg01, fp
12084     0C 4E 05 F1 | 	add	fp, #12
12088     A7 14 02 FB | 	rdlong	arg02, fp
1208c     04 4E 05 F1 | 	add	fp, #4
12090     A7 16 02 FB | 	rdlong	arg03, fp
12094     4C 4E 85 F1 | 	sub	fp, #76
12098     40 4D B0 FD | 	call	#_hg010b_spin2_setspritesize
1209c     A7 F0 03 F6 | 	mov	ptra, fp
120a0     B2 00 A0 FD | 	call	#popregs_
120a4                 | _do_defsprite_ret
120a4     2D 00 64 FD | 	ret
120a8                 | 
120a8                 | ' 
120a8                 | ' sub do_sprite
120a8                 | _do_sprite
120a8     00 4A 05 F6 | 	mov	COUNT_, #0
120ac     A8 00 A0 FD | 	call	#pushregs_
120b0     30 F0 07 F1 | 	add	ptra, #48
120b4     2C 78 BF FD | 	call	#_pop
120b8     FD 16 02 F6 | 	mov	arg03, result1
120bc     FE 14 02 F6 | 	mov	arg02, result2
120c0     FF 12 02 F6 | 	mov	arg01, result3
120c4     18 4E 05 F1 | 	add	fp, #24
120c8     A7 16 62 FC | 	wrlong	arg03, fp
120cc     04 4E 05 F1 | 	add	fp, #4
120d0     A7 14 62 FC | 	wrlong	arg02, fp
120d4     04 4E 05 F1 | 	add	fp, #4
120d8     A7 12 62 FC | 	wrlong	arg01, fp
120dc     20 4E 85 F1 | 	sub	fp, #32
120e0     00 78 BF FD | 	call	#_pop
120e4     FD 16 02 F6 | 	mov	arg03, result1
120e8     FE 14 02 F6 | 	mov	arg02, result2
120ec     FF 12 02 F6 | 	mov	arg01, result3
120f0     0C 4E 05 F1 | 	add	fp, #12
120f4     A7 16 62 FC | 	wrlong	arg03, fp
120f8     04 4E 05 F1 | 	add	fp, #4
120fc     A7 14 62 FC | 	wrlong	arg02, fp
12100     04 4E 05 F1 | 	add	fp, #4
12104     A7 12 62 FC | 	wrlong	arg01, fp
12108     14 4E 85 F1 | 	sub	fp, #20
1210c     D4 77 BF FD | 	call	#_pop
12110     FF 16 02 F6 | 	mov	arg03, result3
12114     A7 FA 61 FC | 	wrlong	result1, fp
12118     04 4E 05 F1 | 	add	fp, #4
1211c     A7 FC 61 FC | 	wrlong	result2, fp
12120     04 4E 05 F1 | 	add	fp, #4
12124     A7 16 62 FC | 	wrlong	arg03, fp
12128     08 4E 85 F1 | 	sub	fp, #8
1212c     A7 12 02 F6 | 	mov	arg01, fp
12130     20 ED BF FD | 	call	#_converttoint
12134     24 4E 05 F1 | 	add	fp, #36
12138     A7 FA 61 FC | 	wrlong	result1, fp
1213c     18 4E 85 F1 | 	sub	fp, #24
12140     A7 12 02 F6 | 	mov	arg01, fp
12144     0C 4E 85 F1 | 	sub	fp, #12
12148     08 ED BF FD | 	call	#_converttoint
1214c     28 4E 05 F1 | 	add	fp, #40
12150     A7 FA 61 FC | 	wrlong	result1, fp
12154     10 4E 85 F1 | 	sub	fp, #16
12158     A7 12 02 F6 | 	mov	arg01, fp
1215c     18 4E 85 F1 | 	sub	fp, #24
12160     F0 EC BF FD | 	call	#_converttoint
12164     2C 4E 05 F1 | 	add	fp, #44
12168     A7 FA 61 FC | 	wrlong	result1, fp
1216c     08 4E 85 F1 | 	sub	fp, #8
12170     A7 12 02 FB | 	rdlong	arg01, fp
12174     04 4E 05 F1 | 	add	fp, #4
12178     A7 14 02 FB | 	rdlong	arg02, fp
1217c     FD 16 02 F6 | 	mov	arg03, result1
12180     28 4E 85 F1 | 	sub	fp, #40
12184     08 4C B0 FD | 	call	#_hg010b_spin2_setspritepos
12188     A7 F0 03 F6 | 	mov	ptra, fp
1218c     B2 00 A0 FD | 	call	#popregs_
12190                 | _do_sprite_ret
12190     2D 00 64 FD | 	ret
12194                 | 
12194                 | ' 
12194                 | ' sub do_mousex
12194                 | _do_mousex
12194     00 4A 05 F6 | 	mov	COUNT_, #0
12198     A8 00 A0 FD | 	call	#pushregs_
1219c     0C F0 07 F1 | 	add	ptra, #12
121a0     08 4E 05 F1 | 	add	fp, #8
121a4     A7 3A 68 FC | 	wrlong	#29, fp
121a8     08 4E 85 F1 | 	sub	fp, #8
121ac     7A 00 00 FF 
121b0     C0 E4 05 F1 | 	add	objptr, ##62656
121b4     F2 12 02 FB | 	rdlong	arg01, objptr
121b8     7A 00 00 FF 
121bc     C0 E4 85 F1 | 	sub	objptr, ##62656
121c0     A7 12 62 FC | 	wrlong	arg01, fp
121c4     A7 12 02 F6 | 	mov	arg01, fp
121c8     B0 77 BF FD | 	call	#_push
121cc     A7 F0 03 F6 | 	mov	ptra, fp
121d0     B2 00 A0 FD | 	call	#popregs_
121d4                 | _do_mousex_ret
121d4     2D 00 64 FD | 	ret
121d8                 | 
121d8                 | ' 
121d8                 | ' sub do_mousey
121d8                 | _do_mousey
121d8     00 4A 05 F6 | 	mov	COUNT_, #0
121dc     A8 00 A0 FD | 	call	#pushregs_
121e0     0C F0 07 F1 | 	add	ptra, #12
121e4     08 4E 05 F1 | 	add	fp, #8
121e8     A7 3A 68 FC | 	wrlong	#29, fp
121ec     08 4E 85 F1 | 	sub	fp, #8
121f0     7A 00 00 FF 
121f4     C4 E4 05 F1 | 	add	objptr, ##62660
121f8     F2 12 02 FB | 	rdlong	arg01, objptr
121fc     7A 00 00 FF 
12200     C4 E4 85 F1 | 	sub	objptr, ##62660
12204     A7 12 62 FC | 	wrlong	arg01, fp
12208     A7 12 02 F6 | 	mov	arg01, fp
1220c     6C 77 BF FD | 	call	#_push
12210     A7 F0 03 F6 | 	mov	ptra, fp
12214     B2 00 A0 FD | 	call	#popregs_
12218                 | _do_mousey_ret
12218     2D 00 64 FD | 	ret
1221c                 | 
1221c                 | ' 
1221c                 | ' sub do_mousew
1221c                 | _do_mousew
1221c     00 4A 05 F6 | 	mov	COUNT_, #0
12220     A8 00 A0 FD | 	call	#pushregs_
12224     0C F0 07 F1 | 	add	ptra, #12
12228     08 4E 05 F1 | 	add	fp, #8
1222c     A7 38 68 FC | 	wrlong	#28, fp
12230     08 4E 85 F1 | 	sub	fp, #8
12234     7A 00 00 FF 
12238     CC E4 05 F1 | 	add	objptr, ##62668
1223c     F2 12 02 FB | 	rdlong	arg01, objptr
12240     7A 00 00 FF 
12244     CC E4 85 F1 | 	sub	objptr, ##62668
12248     A7 12 62 FC | 	wrlong	arg01, fp
1224c     A7 12 02 F6 | 	mov	arg01, fp
12250     28 77 BF FD | 	call	#_push
12254     A7 F0 03 F6 | 	mov	ptra, fp
12258     B2 00 A0 FD | 	call	#popregs_
1225c                 | _do_mousew_ret
1225c     2D 00 64 FD | 	ret
12260                 | 
12260                 | ' 
12260                 | ' sub do_mousek
12260                 | _do_mousek
12260     00 4A 05 F6 | 	mov	COUNT_, #0
12264     A8 00 A0 FD | 	call	#pushregs_
12268     0C F0 07 F1 | 	add	ptra, #12
1226c     08 4E 05 F1 | 	add	fp, #8
12270     A7 3A 68 FC | 	wrlong	#29, fp
12274     08 4E 85 F1 | 	sub	fp, #8
12278     7A 00 00 FF 
1227c     C8 E4 05 F1 | 	add	objptr, ##62664
12280     F2 12 02 FB | 	rdlong	arg01, objptr
12284     7A 00 00 FF 
12288     C8 E4 85 F1 | 	sub	objptr, ##62664
1228c     A7 12 62 FC | 	wrlong	arg01, fp
12290     A7 12 02 F6 | 	mov	arg01, fp
12294     E4 76 BF FD | 	call	#_push
12298     A7 F0 03 F6 | 	mov	ptra, fp
1229c     B2 00 A0 FD | 	call	#popregs_
122a0                 | _do_mousek_ret
122a0     2D 00 64 FD | 	ret
122a4                 | 
122a4                 | ' 
122a4                 | ' 
122a4                 | ' sub do_rdpin
122a4                 | _do_rdpin
122a4     00 4A 05 F6 | 	mov	COUNT_, #0
122a8     A8 00 A0 FD | 	call	#pushregs_
122ac     0C F0 07 F1 | 	add	ptra, #12
122b0     30 76 BF FD | 	call	#_pop
122b4     A7 FA 61 FC | 	wrlong	result1, fp
122b8     04 4E 05 F1 | 	add	fp, #4
122bc     A7 FC 61 FC | 	wrlong	result2, fp
122c0     04 4E 05 F1 | 	add	fp, #4
122c4     A7 FE 61 FC | 	wrlong	result3, fp
122c8     08 4E 85 F1 | 	sub	fp, #8
122cc     A7 12 02 F6 | 	mov	arg01, fp
122d0     80 EB BF FD | 	call	#_converttoint
122d4     FD FA 89 FA | 	rdpin	result1, result1
122d8     7A 00 00 FF 
122dc     D4 E5 05 F1 | 	add	objptr, ##62932
122e0     F2 FA 61 FC | 	wrlong	result1, objptr
122e4     7A 00 00 FF 
122e8     D4 E5 85 F1 | 	sub	objptr, ##62932
122ec     08 4E 05 F1 | 	add	fp, #8
122f0     A7 3A 68 FC | 	wrlong	#29, fp
122f4     08 4E 85 F1 | 	sub	fp, #8
122f8     A7 08 68 FC | 	wrlong	#4, fp
122fc     A7 12 02 F6 | 	mov	arg01, fp
12300     78 76 BF FD | 	call	#_push
12304     A7 F0 03 F6 | 	mov	ptra, fp
12308     B2 00 A0 FD | 	call	#popregs_
1230c                 | _do_rdpin_ret
1230c     2D 00 64 FD | 	ret
12310                 | 
12310                 | ' 
12310                 | ' sub do_rqpin
12310                 | _do_rqpin
12310     00 4A 05 F6 | 	mov	COUNT_, #0
12314     A8 00 A0 FD | 	call	#pushregs_
12318     0C F0 07 F1 | 	add	ptra, #12
1231c     C4 75 BF FD | 	call	#_pop
12320     A7 FA 61 FC | 	wrlong	result1, fp
12324     04 4E 05 F1 | 	add	fp, #4
12328     A7 FC 61 FC | 	wrlong	result2, fp
1232c     04 4E 05 F1 | 	add	fp, #4
12330     A7 FE 61 FC | 	wrlong	result3, fp
12334     08 4E 85 F1 | 	sub	fp, #8
12338     A7 12 02 F6 | 	mov	arg01, fp
1233c     14 EB BF FD | 	call	#_converttoint
12340     FD 12 02 F6 | 	mov	arg01, result1
12344     00 FA 05 F6 | 	mov	result1, #0
12348     09 FB 81 FA | 	rqpin	result1, arg01
1234c     7A 00 00 FF 
12350     D4 E5 05 F1 | 	add	objptr, ##62932
12354     F2 FA 61 FC | 	wrlong	result1, objptr
12358     7A 00 00 FF 
1235c     D4 E5 85 F1 | 	sub	objptr, ##62932
12360     08 4E 05 F1 | 	add	fp, #8
12364     A7 3A 68 FC | 	wrlong	#29, fp
12368     08 4E 85 F1 | 	sub	fp, #8
1236c     A7 08 68 FC | 	wrlong	#4, fp
12370     A7 12 02 F6 | 	mov	arg01, fp
12374     04 76 BF FD | 	call	#_push
12378     A7 F0 03 F6 | 	mov	ptra, fp
1237c     B2 00 A0 FD | 	call	#popregs_
12380                 | _do_rqpin_ret
12380     2D 00 64 FD | 	ret
12384                 | 
12384                 | ' 
12384                 | ' sub do_pinread
12384                 | _do_pinread
12384     00 4A 05 F6 | 	mov	COUNT_, #0
12388     A8 00 A0 FD | 	call	#pushregs_
1238c     0C F0 07 F1 | 	add	ptra, #12
12390     50 75 BF FD | 	call	#_pop
12394     A7 FA 61 FC | 	wrlong	result1, fp
12398     04 4E 05 F1 | 	add	fp, #4
1239c     A7 FC 61 FC | 	wrlong	result2, fp
123a0     04 4E 05 F1 | 	add	fp, #4
123a4     A7 FE 61 FC | 	wrlong	result3, fp
123a8     08 4E 85 F1 | 	sub	fp, #8
123ac     A7 12 02 F6 | 	mov	arg01, fp
123b0     A0 EA BF FD | 	call	#_converttoint
123b4     FD 12 02 F6 | 	mov	arg01, result1
123b8     20 12 CE F7 | 	test	arg01, #32 wz
123bc     FF FB 01 56 |  if_ne	mov	result1, inb
123c0     FE FB 01 A6 |  if_e	mov	result1, ina
123c4     09 FB 41 F0 | 	shr	result1, arg01
123c8     06 12 46 F0 | 	shr	arg01, #6
123cc     09 FB 41 F7 | 	zerox	result1, arg01
123d0     7A 00 00 FF 
123d4     D4 E5 05 F1 | 	add	objptr, ##62932
123d8     F2 FA 61 FC | 	wrlong	result1, objptr
123dc     7A 00 00 FF 
123e0     D4 E5 85 F1 | 	sub	objptr, ##62932
123e4     08 4E 05 F1 | 	add	fp, #8
123e8     A7 3A 68 FC | 	wrlong	#29, fp
123ec     08 4E 85 F1 | 	sub	fp, #8
123f0     A7 08 68 FC | 	wrlong	#4, fp
123f4     A7 12 02 F6 | 	mov	arg01, fp
123f8     80 75 BF FD | 	call	#_push
123fc     A7 F0 03 F6 | 	mov	ptra, fp
12400     B2 00 A0 FD | 	call	#popregs_
12404                 | _do_pinread_ret
12404     2D 00 64 FD | 	ret
12408                 | 
12408                 | ' 
12408                 | ' sub do_gettime
12408                 | _do_gettime
12408     02 4A 05 F6 | 	mov	COUNT_, #2
1240c     A8 00 A0 FD | 	call	#pushregs_
12410     14 F0 07 F1 | 	add	ptra, #20
12414                 | ' 
12414                 | ' const asm 
12414     1A 1E 72 FD | 	getct	local01 wc
12418     1A 20 62 FD | 	getct	local02
1241c                 | ' 
1241c                 | ' return hi1, lo1
1241c     10 FD 01 F6 | 	mov	result2, local02
12420     A7 1E 62 FC | 	wrlong	local01, fp
12424     04 4E 05 F1 | 	add	fp, #4
12428     A7 FC 61 FC | 	wrlong	result2, fp
1242c     0C 4E 05 F1 | 	add	fp, #12
12430     A7 3A 68 FC | 	wrlong	#29, fp
12434     0C 4E 85 F1 | 	sub	fp, #12
12438     A7 12 02 FB | 	rdlong	arg01, fp
1243c     04 4E 05 F1 | 	add	fp, #4
12440     A7 12 62 FC | 	wrlong	arg01, fp
12444     08 4E 85 F1 | 	sub	fp, #8
12448     A7 12 02 FB | 	rdlong	arg01, fp
1244c     0C 4E 05 F1 | 	add	fp, #12
12450     A7 12 62 FC | 	wrlong	arg01, fp
12454     04 4E 85 F1 | 	sub	fp, #4
12458     A7 12 02 F6 | 	mov	arg01, fp
1245c     08 4E 85 F1 | 	sub	fp, #8
12460     18 75 BF FD | 	call	#_push
12464     A7 F0 03 F6 | 	mov	ptra, fp
12468     B2 00 A0 FD | 	call	#popregs_
1246c                 | _do_gettime_ret
1246c     2D 00 64 FD | 	ret
12470                 | 
12470                 | '    
12470                 | ' 
12470                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
12470                 | ' 
12470                 | ' '' ----------------------------- Clear the screen
12470                 | ' 
12470                 | ' sub do_cls
12470                 | _do_cls
12470     56 00 00 FF 
12474     10 E5 05 F1 | 	add	objptr, ##44304
12478     F2 12 02 FB | 	rdlong	arg01, objptr
1247c     04 E4 85 F1 | 	sub	objptr, #4
12480     F2 14 02 FB | 	rdlong	arg02, objptr
12484     56 00 00 FF 
12488     0C E5 85 F1 | 	sub	objptr, ##44300
1248c     04 56 B0 FD | 	call	#_hg010b_spin2_cls
12490     56 00 00 FF 
12494     10 E5 05 F1 | 	add	objptr, ##44304
12498     F2 14 02 FB | 	rdlong	arg02, objptr
1249c     14 E4 85 F1 | 	sub	objptr, #20
124a0     F2 14 62 FC | 	wrlong	arg02, objptr
124a4     56 00 00 FF 
124a8     FC E4 85 F1 | 	sub	objptr, ##44284
124ac                 | ' cls(ink,paper): plot_color=ink: print
124ac     00 12 06 F6 | 	mov	arg01, #0
124b0     28 C2 B0 FD | 	call	#__system___getiolock_0423
124b4     FD 12 02 F6 | 	mov	arg01, result1
124b8     1C 69 B0 FD | 	call	#__system___lockmem
124bc     00 12 06 F6 | 	mov	arg01, #0
124c0     0A 14 06 F6 | 	mov	arg02, #10
124c4     00 16 06 F6 | 	mov	arg03, #0
124c8     A8 75 B0 FD | 	call	#__system___basic_print_char
124cc     00 12 06 F6 | 	mov	arg01, #0
124d0     08 C2 B0 FD | 	call	#__system___getiolock_0423
124d4     FD 00 68 FC | 	wrlong	#0, result1
124d8                 | _do_cls_ret
124d8     2D 00 64 FD | 	ret
124dc                 | 
124dc                 | ' 
124dc                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
124dc                 | ' 
124dc                 | ' sub do_color
124dc                 | _do_color
124dc     03 4A 05 F6 | 	mov	COUNT_, #3
124e0     A8 00 A0 FD | 	call	#pushregs_
124e4     FC 73 BF FD | 	call	#_pop
124e8     FD 1E 02 F6 | 	mov	local01, result1
124ec     FE 20 02 F6 | 	mov	local02, result2
124f0     FF 22 02 F6 | 	mov	local03, result3
124f4     56 00 00 FF 
124f8     FC E4 05 F1 | 	add	objptr, ##44284
124fc     F2 1E 62 FC | 	wrlong	local01, objptr
12500     56 00 00 FF 
12504     FC E4 85 F1 | 	sub	objptr, ##44284
12508     A7 F0 03 F6 | 	mov	ptra, fp
1250c     B2 00 A0 FD | 	call	#popregs_
12510                 | _do_color_ret
12510     2D 00 64 FD | 	ret
12514                 | 
12514                 | ' 
12514                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
12514                 | ' 
12514                 | ' sub do_plot
12514                 | _do_plot
12514     00 4A 05 F6 | 	mov	COUNT_, #0
12518     A8 00 A0 FD | 	call	#pushregs_
1251c     20 F0 07 F1 | 	add	ptra, #32
12520     C0 73 BF FD | 	call	#_pop
12524     FD 16 02 F6 | 	mov	arg03, result1
12528     FE 14 02 F6 | 	mov	arg02, result2
1252c     FF 12 02 F6 | 	mov	arg01, result3
12530     0C 4E 05 F1 | 	add	fp, #12
12534     A7 16 62 FC | 	wrlong	arg03, fp
12538     04 4E 05 F1 | 	add	fp, #4
1253c     A7 14 62 FC | 	wrlong	arg02, fp
12540     04 4E 05 F1 | 	add	fp, #4
12544     A7 12 62 FC | 	wrlong	arg01, fp
12548     14 4E 85 F1 | 	sub	fp, #20
1254c     94 73 BF FD | 	call	#_pop
12550     FF 16 02 F6 | 	mov	arg03, result3
12554     A7 FA 61 FC | 	wrlong	result1, fp
12558     04 4E 05 F1 | 	add	fp, #4
1255c     A7 FC 61 FC | 	wrlong	result2, fp
12560     04 4E 05 F1 | 	add	fp, #4
12564     A7 16 62 FC | 	wrlong	arg03, fp
12568     08 4E 85 F1 | 	sub	fp, #8
1256c     A7 12 02 F6 | 	mov	arg01, fp
12570     E0 E8 BF FD | 	call	#_converttoint
12574     18 4E 05 F1 | 	add	fp, #24
12578     A7 FA 61 FC | 	wrlong	result1, fp
1257c     0C 4E 85 F1 | 	sub	fp, #12
12580     A7 12 02 F6 | 	mov	arg01, fp
12584     0C 4E 85 F1 | 	sub	fp, #12
12588     C8 E8 BF FD | 	call	#_converttoint
1258c     1C 4E 05 F1 | 	add	fp, #28
12590     A7 FA 61 FC | 	wrlong	result1, fp
12594     04 4E 85 F1 | 	sub	fp, #4
12598     A7 16 02 FB | 	rdlong	arg03, fp
1259c     56 00 00 FF 
125a0     00 E5 05 F1 | 	add	objptr, ##44288
125a4     F2 16 62 FC | 	wrlong	arg03, objptr
125a8     04 4E 05 F1 | 	add	fp, #4
125ac     A7 14 02 FB | 	rdlong	arg02, fp
125b0     1C 4E 85 F1 | 	sub	fp, #28
125b4     04 E4 05 F1 | 	add	objptr, #4
125b8     F2 14 62 FC | 	wrlong	arg02, objptr
125bc     04 E4 85 F1 | 	sub	objptr, #4
125c0     F2 12 02 FB | 	rdlong	arg01, objptr
125c4     04 E4 85 F1 | 	sub	objptr, #4
125c8     F2 16 02 FB | 	rdlong	arg03, objptr
125cc     56 00 00 FF 
125d0     FC E4 85 F1 | 	sub	objptr, ##44284
125d4     50 48 B0 FD | 	call	#_hg010b_spin2_putpixel
125d8     A7 F0 03 F6 | 	mov	ptra, fp
125dc     B2 00 A0 FD | 	call	#popregs_
125e0                 | _do_plot_ret
125e0     2D 00 64 FD | 	ret
125e4                 | 
125e4                 | ' 
125e4                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
125e4                 | ' 
125e4                 | ' sub do_draw
125e4                 | _do_draw
125e4     00 4A 05 F6 | 	mov	COUNT_, #0
125e8     A8 00 A0 FD | 	call	#pushregs_
125ec     20 F0 07 F1 | 	add	ptra, #32
125f0     F0 72 BF FD | 	call	#_pop
125f4     FD 1A 02 F6 | 	mov	arg05, result1
125f8     FE 18 02 F6 | 	mov	arg04, result2
125fc     FF 16 02 F6 | 	mov	arg03, result3
12600     0C 4E 05 F1 | 	add	fp, #12
12604     A7 1A 62 FC | 	wrlong	arg05, fp
12608     04 4E 05 F1 | 	add	fp, #4
1260c     A7 18 62 FC | 	wrlong	arg04, fp
12610     04 4E 05 F1 | 	add	fp, #4
12614     A7 16 62 FC | 	wrlong	arg03, fp
12618     14 4E 85 F1 | 	sub	fp, #20
1261c     C4 72 BF FD | 	call	#_pop
12620     FF 1A 02 F6 | 	mov	arg05, result3
12624     A7 FA 61 FC | 	wrlong	result1, fp
12628     04 4E 05 F1 | 	add	fp, #4
1262c     A7 FC 61 FC | 	wrlong	result2, fp
12630     04 4E 05 F1 | 	add	fp, #4
12634     A7 1A 62 FC | 	wrlong	arg05, fp
12638     08 4E 85 F1 | 	sub	fp, #8
1263c     A7 12 02 F6 | 	mov	arg01, fp
12640     10 E8 BF FD | 	call	#_converttoint
12644     18 4E 05 F1 | 	add	fp, #24
12648     A7 FA 61 FC | 	wrlong	result1, fp
1264c     0C 4E 85 F1 | 	sub	fp, #12
12650     A7 12 02 F6 | 	mov	arg01, fp
12654     0C 4E 85 F1 | 	sub	fp, #12
12658     F8 E7 BF FD | 	call	#_converttoint
1265c     1C 4E 05 F1 | 	add	fp, #28
12660     A7 FA 61 FC | 	wrlong	result1, fp
12664     56 00 00 FF 
12668     00 E5 05 F1 | 	add	objptr, ##44288
1266c     F2 12 02 FB | 	rdlong	arg01, objptr
12670     04 E4 05 F1 | 	add	objptr, #4
12674     F2 14 02 FB | 	rdlong	arg02, objptr
12678     04 4E 85 F1 | 	sub	fp, #4
1267c     A7 16 02 FB | 	rdlong	arg03, fp
12680     FD 18 02 F6 | 	mov	arg04, result1
12684     18 4E 85 F1 | 	sub	fp, #24
12688     08 E4 85 F1 | 	sub	objptr, #8
1268c     F2 1A 02 FB | 	rdlong	arg05, objptr
12690     56 00 00 FF 
12694     FC E4 85 F1 | 	sub	objptr, ##44284
12698     3C 4A B0 FD | 	call	#_hg010b_spin2_draw
1269c     18 4E 05 F1 | 	add	fp, #24
126a0     A7 1A 02 FB | 	rdlong	arg05, fp
126a4     56 00 00 FF 
126a8     00 E5 05 F1 | 	add	objptr, ##44288
126ac     F2 1A 62 FC | 	wrlong	arg05, objptr
126b0     04 4E 05 F1 | 	add	fp, #4
126b4     A7 1A 02 FB | 	rdlong	arg05, fp
126b8     1C 4E 85 F1 | 	sub	fp, #28
126bc     04 E4 05 F1 | 	add	objptr, #4
126c0     F2 1A 62 FC | 	wrlong	arg05, objptr
126c4     56 00 00 FF 
126c8     04 E5 85 F1 | 	sub	objptr, ##44292
126cc     A7 F0 03 F6 | 	mov	ptra, fp
126d0     B2 00 A0 FD | 	call	#popregs_
126d4                 | _do_draw_ret
126d4     2D 00 64 FD | 	ret
126d8                 | 
126d8                 | ' 
126d8                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
126d8                 | ' 
126d8                 | ' sub do_fcircle
126d8                 | _do_fcircle
126d8     02 4A 05 F6 | 	mov	COUNT_, #2
126dc     A8 00 A0 FD | 	call	#pushregs_
126e0     24 F0 07 F1 | 	add	ptra, #36
126e4     FC 71 BF FD | 	call	#_pop
126e8     FD 18 02 F6 | 	mov	arg04, result1
126ec     FE 16 02 F6 | 	mov	arg03, result2
126f0     FF 14 02 F6 | 	mov	arg02, result3
126f4     18 4E 05 F1 | 	add	fp, #24
126f8     A7 18 62 FC | 	wrlong	arg04, fp
126fc     04 4E 05 F1 | 	add	fp, #4
12700     A7 16 62 FC | 	wrlong	arg03, fp
12704     04 4E 05 F1 | 	add	fp, #4
12708     A7 14 62 FC | 	wrlong	arg02, fp
1270c     20 4E 85 F1 | 	sub	fp, #32
12710     D0 71 BF FD | 	call	#_pop
12714     FD 18 02 F6 | 	mov	arg04, result1
12718     FE 16 02 F6 | 	mov	arg03, result2
1271c     FF 1E 02 F6 | 	mov	local01, result3
12720     0C 4E 05 F1 | 	add	fp, #12
12724     A7 18 62 FC | 	wrlong	arg04, fp
12728     04 4E 05 F1 | 	add	fp, #4
1272c     A7 16 62 FC | 	wrlong	arg03, fp
12730     04 4E 05 F1 | 	add	fp, #4
12734     A7 1E 62 FC | 	wrlong	local01, fp
12738     14 4E 85 F1 | 	sub	fp, #20
1273c     A4 71 BF FD | 	call	#_pop
12740     A7 FA 61 FC | 	wrlong	result1, fp
12744     04 4E 05 F1 | 	add	fp, #4
12748     A7 FC 61 FC | 	wrlong	result2, fp
1274c     04 4E 05 F1 | 	add	fp, #4
12750     A7 FE 61 FC | 	wrlong	result3, fp
12754                 | ' 
12754                 | ' t3=pop()
12754                 | ' t2=pop()
12754                 | ' t1=pop()
12754                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
12754     FF 18 02 F6 | 	mov	arg04, result3
12758     08 4E 85 F1 | 	sub	fp, #8
1275c     1C 18 0E F2 | 	cmp	arg04, #28 wz
12760     08 4E 05 51 |  if_ne	add	fp, #8
12764     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12768     08 4E 85 51 |  if_ne	sub	fp, #8
1276c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12770     7C 00 90 5D |  if_ne	jmp	#LR__1440
12774     14 4E 05 F1 | 	add	fp, #20
12778     A7 1E 02 FB | 	rdlong	local01, fp
1277c     14 4E 85 F1 | 	sub	fp, #20
12780     1C 1E 0E F2 | 	cmp	local01, #28 wz
12784     14 4E 05 51 |  if_ne	add	fp, #20
12788     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1278c     14 4E 85 51 |  if_ne	sub	fp, #20
12790     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12794     58 00 90 5D |  if_ne	jmp	#LR__1440
12798     20 4E 05 F1 | 	add	fp, #32
1279c     A7 1E 02 FB | 	rdlong	local01, fp
127a0     20 4E 85 F1 | 	sub	fp, #32
127a4     1C 1E 0E F2 | 	cmp	local01, #28 wz
127a8     20 4E 05 51 |  if_ne	add	fp, #32
127ac     A7 18 02 5B |  if_ne	rdlong	arg04, fp
127b0     20 4E 85 51 |  if_ne	sub	fp, #32
127b4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
127b8     34 00 90 5D |  if_ne	jmp	#LR__1440
127bc     A7 12 02 FB | 	rdlong	arg01, fp
127c0     0C 4E 05 F1 | 	add	fp, #12
127c4     A7 14 02 FB | 	rdlong	arg02, fp
127c8     0C 4E 05 F1 | 	add	fp, #12
127cc     A7 16 02 FB | 	rdlong	arg03, fp
127d0     18 4E 85 F1 | 	sub	fp, #24
127d4     56 00 00 FF 
127d8     FC E4 05 F1 | 	add	objptr, ##44284
127dc     F2 18 02 FB | 	rdlong	arg04, objptr
127e0     56 00 00 FF 
127e4     FC E4 85 F1 | 	sub	objptr, ##44284
127e8     70 4D B0 FD | 	call	#_hg010b_spin2_fcircle
127ec                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
127ec     54 00 90 FD | 	jmp	#LR__1441
127f0                 | LR__1440
127f0     A7 12 02 F6 | 	mov	arg01, fp
127f4     5C E6 BF FD | 	call	#_converttoint
127f8     FD 1E 02 F6 | 	mov	local01, result1
127fc     0C 4E 05 F1 | 	add	fp, #12
12800     A7 12 02 F6 | 	mov	arg01, fp
12804     0C 4E 85 F1 | 	sub	fp, #12
12808     48 E6 BF FD | 	call	#_converttoint
1280c     FD 20 02 F6 | 	mov	local02, result1
12810     18 4E 05 F1 | 	add	fp, #24
12814     A7 12 02 F6 | 	mov	arg01, fp
12818     18 4E 85 F1 | 	sub	fp, #24
1281c     34 E6 BF FD | 	call	#_converttoint
12820     FD 16 02 F6 | 	mov	arg03, result1
12824     56 00 00 FF 
12828     FC E4 05 F1 | 	add	objptr, ##44284
1282c     F2 18 02 FB | 	rdlong	arg04, objptr
12830     56 00 00 FF 
12834     FC E4 85 F1 | 	sub	objptr, ##44284
12838     0F 13 02 F6 | 	mov	arg01, local01
1283c     10 15 02 F6 | 	mov	arg02, local02
12840     18 4D B0 FD | 	call	#_hg010b_spin2_fcircle
12844                 | LR__1441
12844     A7 F0 03 F6 | 	mov	ptra, fp
12848     B2 00 A0 FD | 	call	#popregs_
1284c                 | _do_fcircle_ret
1284c     2D 00 64 FD | 	ret
12850                 | 
12850                 | ' 
12850                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
12850                 | ' 
12850                 | ' sub do_circle
12850                 | _do_circle
12850     02 4A 05 F6 | 	mov	COUNT_, #2
12854     A8 00 A0 FD | 	call	#pushregs_
12858     24 F0 07 F1 | 	add	ptra, #36
1285c     84 70 BF FD | 	call	#_pop
12860     FD 18 02 F6 | 	mov	arg04, result1
12864     FE 16 02 F6 | 	mov	arg03, result2
12868     FF 14 02 F6 | 	mov	arg02, result3
1286c     18 4E 05 F1 | 	add	fp, #24
12870     A7 18 62 FC | 	wrlong	arg04, fp
12874     04 4E 05 F1 | 	add	fp, #4
12878     A7 16 62 FC | 	wrlong	arg03, fp
1287c     04 4E 05 F1 | 	add	fp, #4
12880     A7 14 62 FC | 	wrlong	arg02, fp
12884     20 4E 85 F1 | 	sub	fp, #32
12888     58 70 BF FD | 	call	#_pop
1288c     FD 18 02 F6 | 	mov	arg04, result1
12890     FE 16 02 F6 | 	mov	arg03, result2
12894     FF 1E 02 F6 | 	mov	local01, result3
12898     0C 4E 05 F1 | 	add	fp, #12
1289c     A7 18 62 FC | 	wrlong	arg04, fp
128a0     04 4E 05 F1 | 	add	fp, #4
128a4     A7 16 62 FC | 	wrlong	arg03, fp
128a8     04 4E 05 F1 | 	add	fp, #4
128ac     A7 1E 62 FC | 	wrlong	local01, fp
128b0     14 4E 85 F1 | 	sub	fp, #20
128b4     2C 70 BF FD | 	call	#_pop
128b8     A7 FA 61 FC | 	wrlong	result1, fp
128bc     04 4E 05 F1 | 	add	fp, #4
128c0     A7 FC 61 FC | 	wrlong	result2, fp
128c4     04 4E 05 F1 | 	add	fp, #4
128c8     A7 FE 61 FC | 	wrlong	result3, fp
128cc                 | ' 
128cc                 | ' t3=pop()
128cc                 | ' t2=pop()
128cc                 | ' t1=pop()
128cc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
128cc     FF 18 02 F6 | 	mov	arg04, result3
128d0     08 4E 85 F1 | 	sub	fp, #8
128d4     1C 18 0E F2 | 	cmp	arg04, #28 wz
128d8     08 4E 05 51 |  if_ne	add	fp, #8
128dc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
128e0     08 4E 85 51 |  if_ne	sub	fp, #8
128e4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
128e8     7C 00 90 5D |  if_ne	jmp	#LR__1450
128ec     14 4E 05 F1 | 	add	fp, #20
128f0     A7 1E 02 FB | 	rdlong	local01, fp
128f4     14 4E 85 F1 | 	sub	fp, #20
128f8     1C 1E 0E F2 | 	cmp	local01, #28 wz
128fc     14 4E 05 51 |  if_ne	add	fp, #20
12900     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12904     14 4E 85 51 |  if_ne	sub	fp, #20
12908     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1290c     58 00 90 5D |  if_ne	jmp	#LR__1450
12910     20 4E 05 F1 | 	add	fp, #32
12914     A7 1E 02 FB | 	rdlong	local01, fp
12918     20 4E 85 F1 | 	sub	fp, #32
1291c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12920     20 4E 05 51 |  if_ne	add	fp, #32
12924     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12928     20 4E 85 51 |  if_ne	sub	fp, #32
1292c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12930     34 00 90 5D |  if_ne	jmp	#LR__1450
12934     A7 12 02 FB | 	rdlong	arg01, fp
12938     0C 4E 05 F1 | 	add	fp, #12
1293c     A7 14 02 FB | 	rdlong	arg02, fp
12940     0C 4E 05 F1 | 	add	fp, #12
12944     A7 16 02 FB | 	rdlong	arg03, fp
12948     18 4E 85 F1 | 	sub	fp, #24
1294c     56 00 00 FF 
12950     FC E4 05 F1 | 	add	objptr, ##44284
12954     F2 18 02 FB | 	rdlong	arg04, objptr
12958     56 00 00 FF 
1295c     FC E4 85 F1 | 	sub	objptr, ##44284
12960     04 4D B0 FD | 	call	#_hg010b_spin2_circle
12964                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
12964     54 00 90 FD | 	jmp	#LR__1451
12968                 | LR__1450
12968     A7 12 02 F6 | 	mov	arg01, fp
1296c     E4 E4 BF FD | 	call	#_converttoint
12970     FD 1E 02 F6 | 	mov	local01, result1
12974     0C 4E 05 F1 | 	add	fp, #12
12978     A7 12 02 F6 | 	mov	arg01, fp
1297c     0C 4E 85 F1 | 	sub	fp, #12
12980     D0 E4 BF FD | 	call	#_converttoint
12984     FD 20 02 F6 | 	mov	local02, result1
12988     18 4E 05 F1 | 	add	fp, #24
1298c     A7 12 02 F6 | 	mov	arg01, fp
12990     18 4E 85 F1 | 	sub	fp, #24
12994     BC E4 BF FD | 	call	#_converttoint
12998     FD 16 02 F6 | 	mov	arg03, result1
1299c     56 00 00 FF 
129a0     FC E4 05 F1 | 	add	objptr, ##44284
129a4     F2 18 02 FB | 	rdlong	arg04, objptr
129a8     56 00 00 FF 
129ac     FC E4 85 F1 | 	sub	objptr, ##44284
129b0     0F 13 02 F6 | 	mov	arg01, local01
129b4     10 15 02 F6 | 	mov	arg02, local02
129b8     AC 4C B0 FD | 	call	#_hg010b_spin2_circle
129bc                 | LR__1451
129bc     A7 F0 03 F6 | 	mov	ptra, fp
129c0     B2 00 A0 FD | 	call	#popregs_
129c4                 | _do_circle_ret
129c4     2D 00 64 FD | 	ret
129c8                 | 
129c8                 | ' 
129c8                 | ' ' -------------------------- Draw a rectangle
129c8                 | ' 
129c8                 | ' sub do_box
129c8                 | _do_box
129c8     03 4A 05 F6 | 	mov	COUNT_, #3
129cc     A8 00 A0 FD | 	call	#pushregs_
129d0     30 F0 07 F1 | 	add	ptra, #48
129d4     0C 6F BF FD | 	call	#_pop
129d8     FD 1A 02 F6 | 	mov	arg05, result1
129dc     FE 18 02 F6 | 	mov	arg04, result2
129e0     FF 16 02 F6 | 	mov	arg03, result3
129e4     24 4E 05 F1 | 	add	fp, #36
129e8     A7 1A 62 FC | 	wrlong	arg05, fp
129ec     04 4E 05 F1 | 	add	fp, #4
129f0     A7 18 62 FC | 	wrlong	arg04, fp
129f4     04 4E 05 F1 | 	add	fp, #4
129f8     A7 16 62 FC | 	wrlong	arg03, fp
129fc     2C 4E 85 F1 | 	sub	fp, #44
12a00     E0 6E BF FD | 	call	#_pop
12a04     FD 1A 02 F6 | 	mov	arg05, result1
12a08     FE 18 02 F6 | 	mov	arg04, result2
12a0c     FF 16 02 F6 | 	mov	arg03, result3
12a10     18 4E 05 F1 | 	add	fp, #24
12a14     A7 1A 62 FC | 	wrlong	arg05, fp
12a18     04 4E 05 F1 | 	add	fp, #4
12a1c     A7 18 62 FC | 	wrlong	arg04, fp
12a20     04 4E 05 F1 | 	add	fp, #4
12a24     A7 16 62 FC | 	wrlong	arg03, fp
12a28     20 4E 85 F1 | 	sub	fp, #32
12a2c     B4 6E BF FD | 	call	#_pop
12a30     FD 1A 02 F6 | 	mov	arg05, result1
12a34     FE 18 02 F6 | 	mov	arg04, result2
12a38     FF 1E 02 F6 | 	mov	local01, result3
12a3c     0C 4E 05 F1 | 	add	fp, #12
12a40     A7 1A 62 FC | 	wrlong	arg05, fp
12a44     04 4E 05 F1 | 	add	fp, #4
12a48     A7 18 62 FC | 	wrlong	arg04, fp
12a4c     04 4E 05 F1 | 	add	fp, #4
12a50     A7 1E 62 FC | 	wrlong	local01, fp
12a54     14 4E 85 F1 | 	sub	fp, #20
12a58     88 6E BF FD | 	call	#_pop
12a5c     A7 FA 61 FC | 	wrlong	result1, fp
12a60     04 4E 05 F1 | 	add	fp, #4
12a64     A7 FC 61 FC | 	wrlong	result2, fp
12a68     04 4E 05 F1 | 	add	fp, #4
12a6c     A7 FE 61 FC | 	wrlong	result3, fp
12a70                 | ' 
12a70                 | ' t4=pop()
12a70                 | ' t3=pop()
12a70                 | ' t2=pop()
12a70                 | ' t1=pop()
12a70                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12a70     FF 1A 02 F6 | 	mov	arg05, result3
12a74     08 4E 85 F1 | 	sub	fp, #8
12a78     1C 1A 0E F2 | 	cmp	arg05, #28 wz
12a7c     08 4E 05 51 |  if_ne	add	fp, #8
12a80     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12a84     08 4E 85 51 |  if_ne	sub	fp, #8
12a88     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12a8c     A8 00 90 5D |  if_ne	jmp	#LR__1460
12a90     14 4E 05 F1 | 	add	fp, #20
12a94     A7 1E 02 FB | 	rdlong	local01, fp
12a98     14 4E 85 F1 | 	sub	fp, #20
12a9c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12aa0     14 4E 05 51 |  if_ne	add	fp, #20
12aa4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12aa8     14 4E 85 51 |  if_ne	sub	fp, #20
12aac     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12ab0     84 00 90 5D |  if_ne	jmp	#LR__1460
12ab4     20 4E 05 F1 | 	add	fp, #32
12ab8     A7 1E 02 FB | 	rdlong	local01, fp
12abc     20 4E 85 F1 | 	sub	fp, #32
12ac0     1C 1E 0E F2 | 	cmp	local01, #28 wz
12ac4     20 4E 05 51 |  if_ne	add	fp, #32
12ac8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12acc     20 4E 85 51 |  if_ne	sub	fp, #32
12ad0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12ad4     60 00 90 5D |  if_ne	jmp	#LR__1460
12ad8     2C 4E 05 F1 | 	add	fp, #44
12adc     A7 1E 02 FB | 	rdlong	local01, fp
12ae0     2C 4E 85 F1 | 	sub	fp, #44
12ae4     1C 1E 0E F2 | 	cmp	local01, #28 wz
12ae8     2C 4E 05 51 |  if_ne	add	fp, #44
12aec     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12af0     2C 4E 85 51 |  if_ne	sub	fp, #44
12af4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12af8     3C 00 90 5D |  if_ne	jmp	#LR__1460
12afc     A7 12 02 FB | 	rdlong	arg01, fp
12b00     0C 4E 05 F1 | 	add	fp, #12
12b04     A7 14 02 FB | 	rdlong	arg02, fp
12b08     0C 4E 05 F1 | 	add	fp, #12
12b0c     A7 16 02 FB | 	rdlong	arg03, fp
12b10     0C 4E 05 F1 | 	add	fp, #12
12b14     A7 18 02 FB | 	rdlong	arg04, fp
12b18     24 4E 85 F1 | 	sub	fp, #36
12b1c     56 00 00 FF 
12b20     FC E4 05 F1 | 	add	objptr, ##44284
12b24     F2 1A 02 FB | 	rdlong	arg05, objptr
12b28     56 00 00 FF 
12b2c     FC E4 85 F1 | 	sub	objptr, ##44284
12b30     00 4D B0 FD | 	call	#_hg010b_spin2_box
12b34                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
12b34     6C 00 90 FD | 	jmp	#LR__1461
12b38                 | LR__1460
12b38     A7 12 02 F6 | 	mov	arg01, fp
12b3c     14 E3 BF FD | 	call	#_converttoint
12b40     FD 20 02 F6 | 	mov	local02, result1
12b44     0C 4E 05 F1 | 	add	fp, #12
12b48     A7 12 02 F6 | 	mov	arg01, fp
12b4c     0C 4E 85 F1 | 	sub	fp, #12
12b50     00 E3 BF FD | 	call	#_converttoint
12b54     FD 22 02 F6 | 	mov	local03, result1
12b58     18 4E 05 F1 | 	add	fp, #24
12b5c     A7 12 02 F6 | 	mov	arg01, fp
12b60     18 4E 85 F1 | 	sub	fp, #24
12b64     EC E2 BF FD | 	call	#_converttoint
12b68     FD 1E 02 F6 | 	mov	local01, result1
12b6c     24 4E 05 F1 | 	add	fp, #36
12b70     A7 12 02 F6 | 	mov	arg01, fp
12b74     24 4E 85 F1 | 	sub	fp, #36
12b78     D8 E2 BF FD | 	call	#_converttoint
12b7c     FD 18 02 F6 | 	mov	arg04, result1
12b80     56 00 00 FF 
12b84     FC E4 05 F1 | 	add	objptr, ##44284
12b88     F2 1A 02 FB | 	rdlong	arg05, objptr
12b8c     56 00 00 FF 
12b90     FC E4 85 F1 | 	sub	objptr, ##44284
12b94     10 13 02 F6 | 	mov	arg01, local02
12b98     11 15 02 F6 | 	mov	arg02, local03
12b9c     0F 17 02 F6 | 	mov	arg03, local01
12ba0     90 4C B0 FD | 	call	#_hg010b_spin2_box
12ba4                 | LR__1461
12ba4     A7 F0 03 F6 | 	mov	ptra, fp
12ba8     B2 00 A0 FD | 	call	#popregs_
12bac                 | _do_box_ret
12bac     2D 00 64 FD | 	ret
12bb0                 | 
12bb0                 | ' 
12bb0                 | ' sub do_fill
12bb0                 | _do_fill
12bb0     03 4A 05 F6 | 	mov	COUNT_, #3
12bb4     A8 00 A0 FD | 	call	#pushregs_
12bb8     30 F0 07 F1 | 	add	ptra, #48
12bbc     24 6D BF FD | 	call	#_pop
12bc0     FD 18 02 F6 | 	mov	arg04, result1
12bc4     FE 16 02 F6 | 	mov	arg03, result2
12bc8     FF 14 02 F6 | 	mov	arg02, result3
12bcc     24 4E 05 F1 | 	add	fp, #36
12bd0     A7 18 62 FC | 	wrlong	arg04, fp
12bd4     04 4E 05 F1 | 	add	fp, #4
12bd8     A7 16 62 FC | 	wrlong	arg03, fp
12bdc     04 4E 05 F1 | 	add	fp, #4
12be0     A7 14 62 FC | 	wrlong	arg02, fp
12be4     2C 4E 85 F1 | 	sub	fp, #44
12be8     F8 6C BF FD | 	call	#_pop
12bec     FD 18 02 F6 | 	mov	arg04, result1
12bf0     FE 16 02 F6 | 	mov	arg03, result2
12bf4     FF 14 02 F6 | 	mov	arg02, result3
12bf8     18 4E 05 F1 | 	add	fp, #24
12bfc     A7 18 62 FC | 	wrlong	arg04, fp
12c00     04 4E 05 F1 | 	add	fp, #4
12c04     A7 16 62 FC | 	wrlong	arg03, fp
12c08     04 4E 05 F1 | 	add	fp, #4
12c0c     A7 14 62 FC | 	wrlong	arg02, fp
12c10     20 4E 85 F1 | 	sub	fp, #32
12c14     CC 6C BF FD | 	call	#_pop
12c18     FD 18 02 F6 | 	mov	arg04, result1
12c1c     FE 16 02 F6 | 	mov	arg03, result2
12c20     FF 1E 02 F6 | 	mov	local01, result3
12c24     0C 4E 05 F1 | 	add	fp, #12
12c28     A7 18 62 FC | 	wrlong	arg04, fp
12c2c     04 4E 05 F1 | 	add	fp, #4
12c30     A7 16 62 FC | 	wrlong	arg03, fp
12c34     04 4E 05 F1 | 	add	fp, #4
12c38     A7 1E 62 FC | 	wrlong	local01, fp
12c3c     14 4E 85 F1 | 	sub	fp, #20
12c40     A0 6C BF FD | 	call	#_pop
12c44     A7 FA 61 FC | 	wrlong	result1, fp
12c48     04 4E 05 F1 | 	add	fp, #4
12c4c     A7 FC 61 FC | 	wrlong	result2, fp
12c50     04 4E 05 F1 | 	add	fp, #4
12c54     A7 FE 61 FC | 	wrlong	result3, fp
12c58                 | ' 
12c58                 | ' t4=pop()
12c58                 | ' t3=pop()
12c58                 | ' t2=pop()
12c58                 | ' t1=pop()
12c58                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12c58     FF 18 02 F6 | 	mov	arg04, result3
12c5c     08 4E 85 F1 | 	sub	fp, #8
12c60     1C 18 0E F2 | 	cmp	arg04, #28 wz
12c64     08 4E 05 51 |  if_ne	add	fp, #8
12c68     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12c6c     08 4E 85 51 |  if_ne	sub	fp, #8
12c70     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12c74     94 00 90 5D |  if_ne	jmp	#LR__1470
12c78     14 4E 05 F1 | 	add	fp, #20
12c7c     A7 1E 02 FB | 	rdlong	local01, fp
12c80     14 4E 85 F1 | 	sub	fp, #20
12c84     1C 1E 0E F2 | 	cmp	local01, #28 wz
12c88     14 4E 05 51 |  if_ne	add	fp, #20
12c8c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12c90     14 4E 85 51 |  if_ne	sub	fp, #20
12c94     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12c98     70 00 90 5D |  if_ne	jmp	#LR__1470
12c9c     20 4E 05 F1 | 	add	fp, #32
12ca0     A7 1E 02 FB | 	rdlong	local01, fp
12ca4     20 4E 85 F1 | 	sub	fp, #32
12ca8     1C 1E 0E F2 | 	cmp	local01, #28 wz
12cac     20 4E 05 51 |  if_ne	add	fp, #32
12cb0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12cb4     20 4E 85 51 |  if_ne	sub	fp, #32
12cb8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12cbc     4C 00 90 5D |  if_ne	jmp	#LR__1470
12cc0     2C 4E 05 F1 | 	add	fp, #44
12cc4     A7 1E 02 FB | 	rdlong	local01, fp
12cc8     2C 4E 85 F1 | 	sub	fp, #44
12ccc     1C 1E 0E F2 | 	cmp	local01, #28 wz
12cd0     2C 4E 05 51 |  if_ne	add	fp, #44
12cd4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12cd8     2C 4E 85 51 |  if_ne	sub	fp, #44
12cdc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12ce0     28 00 90 5D |  if_ne	jmp	#LR__1470
12ce4     A7 12 02 FB | 	rdlong	arg01, fp
12ce8     0C 4E 05 F1 | 	add	fp, #12
12cec     A7 14 02 FB | 	rdlong	arg02, fp
12cf0     0C 4E 05 F1 | 	add	fp, #12
12cf4     A7 16 02 FB | 	rdlong	arg03, fp
12cf8     0C 4E 05 F1 | 	add	fp, #12
12cfc     A7 18 02 FB | 	rdlong	arg04, fp
12d00     24 4E 85 F1 | 	sub	fp, #36
12d04     C0 45 B0 FD | 	call	#_hg010b_spin2_fill
12d08                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
12d08     58 00 90 FD | 	jmp	#LR__1471
12d0c                 | LR__1470
12d0c     A7 12 02 F6 | 	mov	arg01, fp
12d10     40 E1 BF FD | 	call	#_converttoint
12d14     FD 20 02 F6 | 	mov	local02, result1
12d18     0C 4E 05 F1 | 	add	fp, #12
12d1c     A7 12 02 F6 | 	mov	arg01, fp
12d20     0C 4E 85 F1 | 	sub	fp, #12
12d24     2C E1 BF FD | 	call	#_converttoint
12d28     FD 22 02 F6 | 	mov	local03, result1
12d2c     18 4E 05 F1 | 	add	fp, #24
12d30     A7 12 02 F6 | 	mov	arg01, fp
12d34     18 4E 85 F1 | 	sub	fp, #24
12d38     18 E1 BF FD | 	call	#_converttoint
12d3c     FD 1E 02 F6 | 	mov	local01, result1
12d40     24 4E 05 F1 | 	add	fp, #36
12d44     A7 12 02 F6 | 	mov	arg01, fp
12d48     24 4E 85 F1 | 	sub	fp, #36
12d4c     04 E1 BF FD | 	call	#_converttoint
12d50     FD 18 02 F6 | 	mov	arg04, result1
12d54     10 13 02 F6 | 	mov	arg01, local02
12d58     11 15 02 F6 | 	mov	arg02, local03
12d5c     0F 17 02 F6 | 	mov	arg03, local01
12d60     64 45 B0 FD | 	call	#_hg010b_spin2_fill
12d64                 | LR__1471
12d64     A7 F0 03 F6 | 	mov	ptra, fp
12d68     B2 00 A0 FD | 	call	#popregs_
12d6c                 | _do_fill_ret
12d6c     2D 00 64 FD | 	ret
12d70                 | 
12d70                 | ' 
12d70                 | ' ' -------------------------- Draw a frane
12d70                 | ' 
12d70                 | ' sub do_frame
12d70                 | _do_frame
12d70     03 4A 05 F6 | 	mov	COUNT_, #3
12d74     A8 00 A0 FD | 	call	#pushregs_
12d78     30 F0 07 F1 | 	add	ptra, #48
12d7c     64 6B BF FD | 	call	#_pop
12d80     FD 1A 02 F6 | 	mov	arg05, result1
12d84     FE 18 02 F6 | 	mov	arg04, result2
12d88     FF 16 02 F6 | 	mov	arg03, result3
12d8c     24 4E 05 F1 | 	add	fp, #36
12d90     A7 1A 62 FC | 	wrlong	arg05, fp
12d94     04 4E 05 F1 | 	add	fp, #4
12d98     A7 18 62 FC | 	wrlong	arg04, fp
12d9c     04 4E 05 F1 | 	add	fp, #4
12da0     A7 16 62 FC | 	wrlong	arg03, fp
12da4     2C 4E 85 F1 | 	sub	fp, #44
12da8     38 6B BF FD | 	call	#_pop
12dac     FD 1A 02 F6 | 	mov	arg05, result1
12db0     FE 18 02 F6 | 	mov	arg04, result2
12db4     FF 16 02 F6 | 	mov	arg03, result3
12db8     18 4E 05 F1 | 	add	fp, #24
12dbc     A7 1A 62 FC | 	wrlong	arg05, fp
12dc0     04 4E 05 F1 | 	add	fp, #4
12dc4     A7 18 62 FC | 	wrlong	arg04, fp
12dc8     04 4E 05 F1 | 	add	fp, #4
12dcc     A7 16 62 FC | 	wrlong	arg03, fp
12dd0     20 4E 85 F1 | 	sub	fp, #32
12dd4     0C 6B BF FD | 	call	#_pop
12dd8     FD 1A 02 F6 | 	mov	arg05, result1
12ddc     FE 18 02 F6 | 	mov	arg04, result2
12de0     FF 1E 02 F6 | 	mov	local01, result3
12de4     0C 4E 05 F1 | 	add	fp, #12
12de8     A7 1A 62 FC | 	wrlong	arg05, fp
12dec     04 4E 05 F1 | 	add	fp, #4
12df0     A7 18 62 FC | 	wrlong	arg04, fp
12df4     04 4E 05 F1 | 	add	fp, #4
12df8     A7 1E 62 FC | 	wrlong	local01, fp
12dfc     14 4E 85 F1 | 	sub	fp, #20
12e00     E0 6A BF FD | 	call	#_pop
12e04     A7 FA 61 FC | 	wrlong	result1, fp
12e08     04 4E 05 F1 | 	add	fp, #4
12e0c     A7 FC 61 FC | 	wrlong	result2, fp
12e10     04 4E 05 F1 | 	add	fp, #4
12e14     A7 FE 61 FC | 	wrlong	result3, fp
12e18                 | ' 
12e18                 | ' t4=pop()
12e18                 | ' t3=pop()
12e18                 | ' t2=pop()
12e18                 | ' t1=pop()
12e18                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12e18     FF 1A 02 F6 | 	mov	arg05, result3
12e1c     08 4E 85 F1 | 	sub	fp, #8
12e20     1C 1A 0E F2 | 	cmp	arg05, #28 wz
12e24     08 4E 05 51 |  if_ne	add	fp, #8
12e28     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12e2c     08 4E 85 51 |  if_ne	sub	fp, #8
12e30     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12e34     A8 00 90 5D |  if_ne	jmp	#LR__1480
12e38     14 4E 05 F1 | 	add	fp, #20
12e3c     A7 1E 02 FB | 	rdlong	local01, fp
12e40     14 4E 85 F1 | 	sub	fp, #20
12e44     1C 1E 0E F2 | 	cmp	local01, #28 wz
12e48     14 4E 05 51 |  if_ne	add	fp, #20
12e4c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12e50     14 4E 85 51 |  if_ne	sub	fp, #20
12e54     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12e58     84 00 90 5D |  if_ne	jmp	#LR__1480
12e5c     20 4E 05 F1 | 	add	fp, #32
12e60     A7 1E 02 FB | 	rdlong	local01, fp
12e64     20 4E 85 F1 | 	sub	fp, #32
12e68     1C 1E 0E F2 | 	cmp	local01, #28 wz
12e6c     20 4E 05 51 |  if_ne	add	fp, #32
12e70     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12e74     20 4E 85 51 |  if_ne	sub	fp, #32
12e78     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12e7c     60 00 90 5D |  if_ne	jmp	#LR__1480
12e80     2C 4E 05 F1 | 	add	fp, #44
12e84     A7 1E 02 FB | 	rdlong	local01, fp
12e88     2C 4E 85 F1 | 	sub	fp, #44
12e8c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12e90     2C 4E 05 51 |  if_ne	add	fp, #44
12e94     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12e98     2C 4E 85 51 |  if_ne	sub	fp, #44
12e9c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12ea0     3C 00 90 5D |  if_ne	jmp	#LR__1480
12ea4     A7 12 02 FB | 	rdlong	arg01, fp
12ea8     0C 4E 05 F1 | 	add	fp, #12
12eac     A7 14 02 FB | 	rdlong	arg02, fp
12eb0     0C 4E 05 F1 | 	add	fp, #12
12eb4     A7 16 02 FB | 	rdlong	arg03, fp
12eb8     0C 4E 05 F1 | 	add	fp, #12
12ebc     A7 18 02 FB | 	rdlong	arg04, fp
12ec0     24 4E 85 F1 | 	sub	fp, #36
12ec4     56 00 00 FF 
12ec8     FC E4 05 F1 | 	add	objptr, ##44284
12ecc     F2 1A 02 FB | 	rdlong	arg05, objptr
12ed0     56 00 00 FF 
12ed4     FC E4 85 F1 | 	sub	objptr, ##44284
12ed8     D8 48 B0 FD | 	call	#_hg010b_spin2_frame
12edc                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
12edc     6C 00 90 FD | 	jmp	#LR__1481
12ee0                 | LR__1480
12ee0     A7 12 02 F6 | 	mov	arg01, fp
12ee4     6C DF BF FD | 	call	#_converttoint
12ee8     FD 20 02 F6 | 	mov	local02, result1
12eec     0C 4E 05 F1 | 	add	fp, #12
12ef0     A7 12 02 F6 | 	mov	arg01, fp
12ef4     0C 4E 85 F1 | 	sub	fp, #12
12ef8     58 DF BF FD | 	call	#_converttoint
12efc     FD 22 02 F6 | 	mov	local03, result1
12f00     18 4E 05 F1 | 	add	fp, #24
12f04     A7 12 02 F6 | 	mov	arg01, fp
12f08     18 4E 85 F1 | 	sub	fp, #24
12f0c     44 DF BF FD | 	call	#_converttoint
12f10     FD 1E 02 F6 | 	mov	local01, result1
12f14     24 4E 05 F1 | 	add	fp, #36
12f18     A7 12 02 F6 | 	mov	arg01, fp
12f1c     24 4E 85 F1 | 	sub	fp, #36
12f20     30 DF BF FD | 	call	#_converttoint
12f24     FD 18 02 F6 | 	mov	arg04, result1
12f28     56 00 00 FF 
12f2c     FC E4 05 F1 | 	add	objptr, ##44284
12f30     F2 1A 02 FB | 	rdlong	arg05, objptr
12f34     56 00 00 FF 
12f38     FC E4 85 F1 | 	sub	objptr, ##44284
12f3c     10 13 02 F6 | 	mov	arg01, local02
12f40     11 15 02 F6 | 	mov	arg02, local03
12f44     0F 17 02 F6 | 	mov	arg03, local01
12f48     68 48 B0 FD | 	call	#_hg010b_spin2_frame
12f4c                 | LR__1481
12f4c     A7 F0 03 F6 | 	mov	ptra, fp
12f50     B2 00 A0 FD | 	call	#popregs_
12f54                 | _do_frame_ret
12f54     2D 00 64 FD | 	ret
12f58                 | 
12f58                 | ' 
12f58                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
12f58                 | ' 
12f58                 | ' ' ------------------------- Print to the screem
12f58                 | ' 
12f58                 | ' sub do_print  
12f58                 | _do_print
12f58     0A 4A 05 F6 | 	mov	COUNT_, #10
12f5c     A8 00 A0 FD | 	call	#pushregs_
12f60     00 24 06 F6 | 	mov	local04, #0
12f64     7C 69 BF FD | 	call	#_pop
12f68     FD 26 02 F6 | 	mov	local05, result1
12f6c     FE 28 02 F6 | 	mov	local06, result2
12f70     FF 2A 02 F6 | 	mov	local07, result3
12f74     13 1F 02 F6 | 	mov	local01, local05
12f78     14 21 02 F6 | 	mov	local02, local06
12f7c     15 23 02 F6 | 	mov	local03, local07
12f80                 | '  
12f80                 | ' r=0
12f80                 | ' t1=pop() 
12f80                 | ' 'print t1.result_type,t1.result.uresult
12f80                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
12f80     2B 22 0E F2 | 	cmp	local03, #43 wz
12f84     14 00 90 5D |  if_ne	jmp	#LR__1490
12f88     0F 13 02 F6 | 	mov	arg01, local01
12f8c     90 9A BF FD | 	call	#_convertstring
12f90     FD 26 02 F6 | 	mov	local05, result1
12f94     13 1F 02 F6 | 	mov	local01, local05
12f98     1F 22 06 F6 | 	mov	local03, #31
12f9c                 | LR__1490
12f9c                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
12f9c     21 22 0E F2 | 	cmp	local03, #33 wz
12fa0     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
12fa4     20 00 90 5D |  if_ne	jmp	#LR__1491
12fa8     11 25 02 F6 | 	mov	local04, local03
12fac     34 69 BF FD | 	call	#_pop
12fb0     FD 26 02 F6 | 	mov	local05, result1
12fb4     FE 28 02 F6 | 	mov	local06, result2
12fb8     FF 2A 02 F6 | 	mov	local07, result3
12fbc     13 1F 02 F6 | 	mov	local01, local05
12fc0     14 21 02 F6 | 	mov	local02, local06
12fc4     15 23 02 F6 | 	mov	local03, local07
12fc8                 | LR__1491
12fc8                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
12fc8     20 22 0E F2 | 	cmp	local03, #32 wz
12fcc     11 25 02 A6 |  if_e	mov	local04, local03
12fd0                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
12fd0     FF 22 0E F2 | 	cmp	local03, #255 wz
12fd4     0C 00 90 5D |  if_ne	jmp	#LR__1492
12fd8     0F 13 02 F6 | 	mov	arg01, local01
12fdc     74 28 B0 FD | 	call	#_printerror
12fe0     30 04 90 FD | 	jmp	#LR__1509
12fe4                 | LR__1492
12fe4                 | ' 
12fe4                 | ' if r=print_mod_comma  then
12fe4     21 24 0E F2 | 	cmp	local04, #33 wz
12fe8     AC 01 90 5D |  if_ne	jmp	#LR__1497
12fec                 | '   if t1.result_type=result_int then print t1.result.iresult,
12fec     1C 22 0E F2 | 	cmp	local03, #28 wz
12ff0     64 00 90 5D |  if_ne	jmp	#LR__1493
12ff4     00 12 06 F6 | 	mov	arg01, #0
12ff8     E0 B6 B0 FD | 	call	#__system___getiolock_0423
12ffc     FD 12 02 F6 | 	mov	arg01, result1
13000     D4 5D B0 FD | 	call	#__system___lockmem
13004     00 28 06 F6 | 	mov	local06, #0
13008     00 12 06 F6 | 	mov	arg01, #0
1300c     0F 15 02 F6 | 	mov	arg02, local01
13010     00 16 06 F6 | 	mov	arg03, #0
13014     0A 18 06 F6 | 	mov	arg04, #10
13018     F4 6A B0 FD | 	call	#__system___basic_print_integer
1301c     FD 2A 02 F6 | 	mov	local07, result1
13020     14 27 02 F6 | 	mov	local05, local06
13024     15 27 02 F1 | 	add	local05, local07
13028     00 2C 06 F6 | 	mov	local08, #0
1302c     00 12 06 F6 | 	mov	arg01, #0
13030     09 14 06 F6 | 	mov	arg02, #9
13034     00 16 06 F6 | 	mov	arg03, #0
13038     38 6A B0 FD | 	call	#__system___basic_print_char
1303c     FD 2E 02 F6 | 	mov	local09, result1
13040     FD 26 02 F1 | 	add	local05, result1
13044     00 12 06 F6 | 	mov	arg01, #0
13048     90 B6 B0 FD | 	call	#__system___getiolock_0423
1304c     FD 00 68 FC | 	wrlong	#0, result1
13050     00 FA 05 F6 | 	mov	result1, #0
13054     00 30 06 F6 | 	mov	local10, #0
13058                 | LR__1493
13058                 | '   if t1.result_type=result_uint then print t1.result.uresult,
13058     1D 22 0E F2 | 	cmp	local03, #29 wz
1305c     64 00 90 5D |  if_ne	jmp	#LR__1494
13060     00 12 06 F6 | 	mov	arg01, #0
13064     74 B6 B0 FD | 	call	#__system___getiolock_0423
13068     FD 12 02 F6 | 	mov	arg01, result1
1306c     68 5D B0 FD | 	call	#__system___lockmem
13070     00 28 06 F6 | 	mov	local06, #0
13074     00 12 06 F6 | 	mov	arg01, #0
13078     0F 15 02 F6 | 	mov	arg02, local01
1307c     00 16 06 F6 | 	mov	arg03, #0
13080     0A 18 06 F6 | 	mov	arg04, #10
13084     C8 6A B0 FD | 	call	#__system___basic_print_unsigned
13088     FD 2A 02 F6 | 	mov	local07, result1
1308c     14 27 02 F6 | 	mov	local05, local06
13090     15 27 02 F1 | 	add	local05, local07
13094     00 2C 06 F6 | 	mov	local08, #0
13098     00 12 06 F6 | 	mov	arg01, #0
1309c     09 14 06 F6 | 	mov	arg02, #9
130a0     00 16 06 F6 | 	mov	arg03, #0
130a4     CC 69 B0 FD | 	call	#__system___basic_print_char
130a8     FD 2E 02 F6 | 	mov	local09, result1
130ac     FD 26 02 F1 | 	add	local05, result1
130b0     00 12 06 F6 | 	mov	arg01, #0
130b4     24 B6 B0 FD | 	call	#__system___getiolock_0423
130b8     FD 00 68 FC | 	wrlong	#0, result1
130bc     00 FA 05 F6 | 	mov	result1, #0
130c0     00 30 06 F6 | 	mov	local10, #0
130c4                 | LR__1494
130c4                 | '   if t1.result_type=result_float then print t1.result.fresult,
130c4     1E 22 0E F2 | 	cmp	local03, #30 wz
130c8     64 00 90 5D |  if_ne	jmp	#LR__1495
130cc     00 12 06 F6 | 	mov	arg01, #0
130d0     08 B6 B0 FD | 	call	#__system___getiolock_0423
130d4     FD 12 02 F6 | 	mov	arg01, result1
130d8     FC 5C B0 FD | 	call	#__system___lockmem
130dc     00 28 06 F6 | 	mov	local06, #0
130e0     00 12 06 F6 | 	mov	arg01, #0
130e4     0F 15 02 F6 | 	mov	arg02, local01
130e8     00 16 06 F6 | 	mov	arg03, #0
130ec     23 18 06 F6 | 	mov	arg04, #35
130f0     E8 8D B0 FD | 	call	#__system___basic_print_float
130f4     FD 2A 02 F6 | 	mov	local07, result1
130f8     14 27 02 F6 | 	mov	local05, local06
130fc     15 27 02 F1 | 	add	local05, local07
13100     00 2C 06 F6 | 	mov	local08, #0
13104     00 12 06 F6 | 	mov	arg01, #0
13108     09 14 06 F6 | 	mov	arg02, #9
1310c     00 16 06 F6 | 	mov	arg03, #0
13110     60 69 B0 FD | 	call	#__system___basic_print_char
13114     FD 2E 02 F6 | 	mov	local09, result1
13118     FD 26 02 F1 | 	add	local05, result1
1311c     00 12 06 F6 | 	mov	arg01, #0
13120     B8 B5 B0 FD | 	call	#__system___getiolock_0423
13124     FD 00 68 FC | 	wrlong	#0, result1
13128     00 FA 05 F6 | 	mov	result1, #0
1312c     00 30 06 F6 | 	mov	local10, #0
13130                 | LR__1495
13130                 | '   if t1.result_type=result_string then print t1.result.sresult,
13130     1F 22 0E F2 | 	cmp	local03, #31 wz
13134     60 00 90 5D |  if_ne	jmp	#LR__1496
13138     00 12 06 F6 | 	mov	arg01, #0
1313c     9C B5 B0 FD | 	call	#__system___getiolock_0423
13140     FD 12 02 F6 | 	mov	arg01, result1
13144     90 5C B0 FD | 	call	#__system___lockmem
13148     00 28 06 F6 | 	mov	local06, #0
1314c     00 12 06 F6 | 	mov	arg01, #0
13150     0F 15 02 F6 | 	mov	arg02, local01
13154     00 16 06 F6 | 	mov	arg03, #0
13158     70 69 B0 FD | 	call	#__system___basic_print_string
1315c     FD 2A 02 F6 | 	mov	local07, result1
13160     14 27 02 F6 | 	mov	local05, local06
13164     15 27 02 F1 | 	add	local05, local07
13168     00 2C 06 F6 | 	mov	local08, #0
1316c     00 12 06 F6 | 	mov	arg01, #0
13170     09 14 06 F6 | 	mov	arg02, #9
13174     00 16 06 F6 | 	mov	arg03, #0
13178     F8 68 B0 FD | 	call	#__system___basic_print_char
1317c     FD 2E 02 F6 | 	mov	local09, result1
13180     FD 26 02 F1 | 	add	local05, result1
13184     00 12 06 F6 | 	mov	arg01, #0
13188     50 B5 B0 FD | 	call	#__system___getiolock_0423
1318c     FD 00 68 FC | 	wrlong	#0, result1
13190     00 FA 05 F6 | 	mov	result1, #0
13194     00 30 06 F6 | 	mov	local10, #0
13198                 | LR__1496
13198                 | LR__1497
13198                 | ' if r=print_mod_semicolon then 
13198     22 24 0E F2 | 	cmp	local04, #34 wz
1319c     1C 01 90 5D |  if_ne	jmp	#LR__1502
131a0                 | '   if t1.result_type=result_int then print t1.result.iresult;
131a0     1C 22 0E F2 | 	cmp	local03, #28 wz
131a4     50 00 90 5D |  if_ne	jmp	#LR__1498
131a8     00 12 06 F6 | 	mov	arg01, #0
131ac     2C B5 B0 FD | 	call	#__system___getiolock_0423
131b0     FD 12 02 F6 | 	mov	arg01, result1
131b4     20 5C B0 FD | 	call	#__system___lockmem
131b8     00 28 06 F6 | 	mov	local06, #0
131bc     00 30 06 F6 | 	mov	local10, #0
131c0     0A 2C 06 F6 | 	mov	local08, #10
131c4     00 12 06 F6 | 	mov	arg01, #0
131c8     0F 15 02 F6 | 	mov	arg02, local01
131cc     00 16 06 F6 | 	mov	arg03, #0
131d0     0A 18 06 F6 | 	mov	arg04, #10
131d4     38 69 B0 FD | 	call	#__system___basic_print_integer
131d8     FD 2A 02 F6 | 	mov	local07, result1
131dc     14 27 02 F6 | 	mov	local05, local06
131e0     15 27 02 F1 | 	add	local05, local07
131e4     00 12 06 F6 | 	mov	arg01, #0
131e8     F0 B4 B0 FD | 	call	#__system___getiolock_0423
131ec     FD 00 68 FC | 	wrlong	#0, result1
131f0     00 FA 05 F6 | 	mov	result1, #0
131f4     00 2E 06 F6 | 	mov	local09, #0
131f8                 | LR__1498
131f8                 | '   if t1.result_type=result_uint then print t1.result.uresult;
131f8     1D 22 0E F2 | 	cmp	local03, #29 wz
131fc     50 00 90 5D |  if_ne	jmp	#LR__1499
13200     00 12 06 F6 | 	mov	arg01, #0
13204     D4 B4 B0 FD | 	call	#__system___getiolock_0423
13208     FD 12 02 F6 | 	mov	arg01, result1
1320c     C8 5B B0 FD | 	call	#__system___lockmem
13210     00 28 06 F6 | 	mov	local06, #0
13214     00 30 06 F6 | 	mov	local10, #0
13218     0A 2C 06 F6 | 	mov	local08, #10
1321c     00 12 06 F6 | 	mov	arg01, #0
13220     0F 15 02 F6 | 	mov	arg02, local01
13224     00 16 06 F6 | 	mov	arg03, #0
13228     0A 18 06 F6 | 	mov	arg04, #10
1322c     20 69 B0 FD | 	call	#__system___basic_print_unsigned
13230     FD 2A 02 F6 | 	mov	local07, result1
13234     14 27 02 F6 | 	mov	local05, local06
13238     15 27 02 F1 | 	add	local05, local07
1323c     00 12 06 F6 | 	mov	arg01, #0
13240     98 B4 B0 FD | 	call	#__system___getiolock_0423
13244     FD 00 68 FC | 	wrlong	#0, result1
13248     00 FA 05 F6 | 	mov	result1, #0
1324c     00 2E 06 F6 | 	mov	local09, #0
13250                 | LR__1499
13250                 | '   if t1.result_type=result_float then print t1.result.fresult;
13250     1E 22 0E F2 | 	cmp	local03, #30 wz
13254     30 00 90 5D |  if_ne	jmp	#LR__1500
13258     00 12 06 F6 | 	mov	arg01, #0
1325c     7C B4 B0 FD | 	call	#__system___getiolock_0423
13260     FD 12 02 F6 | 	mov	arg01, result1
13264     70 5B B0 FD | 	call	#__system___lockmem
13268     00 12 06 F6 | 	mov	arg01, #0
1326c     0F 15 02 F6 | 	mov	arg02, local01
13270     00 16 06 F6 | 	mov	arg03, #0
13274     23 18 06 F6 | 	mov	arg04, #35
13278     60 8C B0 FD | 	call	#__system___basic_print_float
1327c     00 12 06 F6 | 	mov	arg01, #0
13280     58 B4 B0 FD | 	call	#__system___getiolock_0423
13284     FD 00 68 FC | 	wrlong	#0, result1
13288                 | LR__1500
13288                 | '   if t1.result_type=result_string then print t1.result.sresult;
13288     1F 22 0E F2 | 	cmp	local03, #31 wz
1328c     2C 00 90 5D |  if_ne	jmp	#LR__1501
13290     00 12 06 F6 | 	mov	arg01, #0
13294     44 B4 B0 FD | 	call	#__system___getiolock_0423
13298     FD 12 02 F6 | 	mov	arg01, result1
1329c     38 5B B0 FD | 	call	#__system___lockmem
132a0     00 12 06 F6 | 	mov	arg01, #0
132a4     0F 15 02 F6 | 	mov	arg02, local01
132a8     00 16 06 F6 | 	mov	arg03, #0
132ac     1C 68 B0 FD | 	call	#__system___basic_print_string
132b0     00 12 06 F6 | 	mov	arg01, #0
132b4     24 B4 B0 FD | 	call	#__system___getiolock_0423
132b8     FD 00 68 FC | 	wrlong	#0, result1
132bc                 | LR__1501
132bc                 | LR__1502
132bc                 | ' if r=0 then 
132bc     00 24 0E F2 | 	cmp	local04, #0 wz
132c0     1C 01 90 5D |  if_ne	jmp	#LR__1507
132c4                 | '   if t1.result_type=result_int then print t1.result.iresult
132c4     1C 22 0E F2 | 	cmp	local03, #28 wz
132c8     40 00 90 5D |  if_ne	jmp	#LR__1503
132cc     00 12 06 F6 | 	mov	arg01, #0
132d0     08 B4 B0 FD | 	call	#__system___getiolock_0423
132d4     FD 12 02 F6 | 	mov	arg01, result1
132d8     FC 5A B0 FD | 	call	#__system___lockmem
132dc     00 12 06 F6 | 	mov	arg01, #0
132e0     0F 15 02 F6 | 	mov	arg02, local01
132e4     00 16 06 F6 | 	mov	arg03, #0
132e8     0A 18 06 F6 | 	mov	arg04, #10
132ec     20 68 B0 FD | 	call	#__system___basic_print_integer
132f0     00 12 06 F6 | 	mov	arg01, #0
132f4     0A 14 06 F6 | 	mov	arg02, #10
132f8     00 16 06 F6 | 	mov	arg03, #0
132fc     74 67 B0 FD | 	call	#__system___basic_print_char
13300     00 12 06 F6 | 	mov	arg01, #0
13304     D4 B3 B0 FD | 	call	#__system___getiolock_0423
13308     FD 00 68 FC | 	wrlong	#0, result1
1330c                 | LR__1503
1330c                 | '   if t1.result_type=result_uint then print t1.result.uresult
1330c     1D 22 0E F2 | 	cmp	local03, #29 wz
13310     40 00 90 5D |  if_ne	jmp	#LR__1504
13314     00 12 06 F6 | 	mov	arg01, #0
13318     C0 B3 B0 FD | 	call	#__system___getiolock_0423
1331c     FD 12 02 F6 | 	mov	arg01, result1
13320     B4 5A B0 FD | 	call	#__system___lockmem
13324     00 12 06 F6 | 	mov	arg01, #0
13328     0F 15 02 F6 | 	mov	arg02, local01
1332c     00 16 06 F6 | 	mov	arg03, #0
13330     0A 18 06 F6 | 	mov	arg04, #10
13334     18 68 B0 FD | 	call	#__system___basic_print_unsigned
13338     00 12 06 F6 | 	mov	arg01, #0
1333c     0A 14 06 F6 | 	mov	arg02, #10
13340     00 16 06 F6 | 	mov	arg03, #0
13344     2C 67 B0 FD | 	call	#__system___basic_print_char
13348     00 12 06 F6 | 	mov	arg01, #0
1334c     8C B3 B0 FD | 	call	#__system___getiolock_0423
13350     FD 00 68 FC | 	wrlong	#0, result1
13354                 | LR__1504
13354                 | '   if t1.result_type=result_float then print t1.result.fresult
13354     1E 22 0E F2 | 	cmp	local03, #30 wz
13358     40 00 90 5D |  if_ne	jmp	#LR__1505
1335c     00 12 06 F6 | 	mov	arg01, #0
13360     78 B3 B0 FD | 	call	#__system___getiolock_0423
13364     FD 12 02 F6 | 	mov	arg01, result1
13368     6C 5A B0 FD | 	call	#__system___lockmem
1336c     00 12 06 F6 | 	mov	arg01, #0
13370     0F 15 02 F6 | 	mov	arg02, local01
13374     00 16 06 F6 | 	mov	arg03, #0
13378     23 18 06 F6 | 	mov	arg04, #35
1337c     5C 8B B0 FD | 	call	#__system___basic_print_float
13380     00 12 06 F6 | 	mov	arg01, #0
13384     0A 14 06 F6 | 	mov	arg02, #10
13388     00 16 06 F6 | 	mov	arg03, #0
1338c     E4 66 B0 FD | 	call	#__system___basic_print_char
13390     00 12 06 F6 | 	mov	arg01, #0
13394     44 B3 B0 FD | 	call	#__system___getiolock_0423
13398     FD 00 68 FC | 	wrlong	#0, result1
1339c                 | LR__1505
1339c                 | '   if t1.result_type=result_string then print t1.result.sresult
1339c     1F 22 0E F2 | 	cmp	local03, #31 wz
133a0     3C 00 90 5D |  if_ne	jmp	#LR__1506
133a4     00 12 06 F6 | 	mov	arg01, #0
133a8     30 B3 B0 FD | 	call	#__system___getiolock_0423
133ac     FD 12 02 F6 | 	mov	arg01, result1
133b0     24 5A B0 FD | 	call	#__system___lockmem
133b4     00 12 06 F6 | 	mov	arg01, #0
133b8     0F 15 02 F6 | 	mov	arg02, local01
133bc     00 16 06 F6 | 	mov	arg03, #0
133c0     08 67 B0 FD | 	call	#__system___basic_print_string
133c4     00 12 06 F6 | 	mov	arg01, #0
133c8     0A 14 06 F6 | 	mov	arg02, #10
133cc     00 16 06 F6 | 	mov	arg03, #0
133d0     A0 66 B0 FD | 	call	#__system___basic_print_char
133d4     00 12 06 F6 | 	mov	arg01, #0
133d8     00 B3 B0 FD | 	call	#__system___getiolock_0423
133dc     FD 00 68 FC | 	wrlong	#0, result1
133e0                 | LR__1506
133e0                 | LR__1507
133e0                 | ' if r=print_mod_empty then print
133e0     20 24 0E F2 | 	cmp	local04, #32 wz
133e4     2C 00 90 5D |  if_ne	jmp	#LR__1508
133e8     00 12 06 F6 | 	mov	arg01, #0
133ec     EC B2 B0 FD | 	call	#__system___getiolock_0423
133f0     FD 12 02 F6 | 	mov	arg01, result1
133f4     E0 59 B0 FD | 	call	#__system___lockmem
133f8     00 12 06 F6 | 	mov	arg01, #0
133fc     0A 14 06 F6 | 	mov	arg02, #10
13400     00 16 06 F6 | 	mov	arg03, #0
13404     6C 66 B0 FD | 	call	#__system___basic_print_char
13408     00 12 06 F6 | 	mov	arg01, #0
1340c     CC B2 B0 FD | 	call	#__system___getiolock_0423
13410     FD 00 68 FC | 	wrlong	#0, result1
13414                 | LR__1508
13414                 | LR__1509
13414     A7 F0 03 F6 | 	mov	ptra, fp
13418     B2 00 A0 FD | 	call	#popregs_
1341c                 | _do_print_ret
1341c     2D 00 64 FD | 	ret
13420                 | 
13420                 | ' 
13420                 | ' 
13420                 | ' sub do_paper
13420                 | _do_paper
13420     03 4A 05 F6 | 	mov	COUNT_, #3
13424     A8 00 A0 FD | 	call	#pushregs_
13428     B8 64 BF FD | 	call	#_pop
1342c     FD 1E 02 F6 | 	mov	local01, result1
13430     FE 20 02 F6 | 	mov	local02, result2
13434     FF 22 02 F6 | 	mov	local03, result3
13438                 | ' t1=pop() 
13438                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13438     1E 22 0E F2 | 	cmp	local03, #30 wz
1343c     10 00 90 5D |  if_ne	jmp	#LR__1510
13440     0F 13 02 F6 | 	mov	arg01, local01
13444     00 14 06 F6 | 	mov	arg02, #0
13448     40 89 B0 FD | 	call	#__system___float_tointeger
1344c     FD 1E 02 F6 | 	mov	local01, result1
13450                 | LR__1510
13450                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13450     1F 22 0E F2 | 	cmp	local03, #31 wz
13454     18 00 90 5D |  if_ne	jmp	#LR__1511
13458     0F 13 02 F6 | 	mov	arg01, local01
1345c     4C 8C B0 FD | 	call	#__system____builtin_atof
13460     FD 12 02 F6 | 	mov	arg01, result1
13464     00 14 06 F6 | 	mov	arg02, #0
13468     20 89 B0 FD | 	call	#__system___float_tointeger
1346c     FD 1E 02 F6 | 	mov	local01, result1
13470                 | LR__1511
13470     56 00 00 FF 
13474     0C E5 05 F1 | 	add	objptr, ##44300
13478     F2 1E 62 FC | 	wrlong	local01, objptr
1347c     04 E4 05 F1 | 	add	objptr, #4
13480     F2 12 02 FB | 	rdlong	arg01, objptr
13484                 | ' 
13484                 | ' write_color:=ff
13484     56 00 00 FF 
13488     D3 E4 85 F1 | 	sub	objptr, ##44243
1348c     F2 12 62 FC | 	wrlong	arg01, objptr
13490                 | ' write_background:=bb
13490     04 E4 05 F1 | 	add	objptr, #4
13494     F2 1E 62 FC | 	wrlong	local01, objptr
13498     41 E4 85 F1 | 	sub	objptr, #65
1349c     A7 F0 03 F6 | 	mov	ptra, fp
134a0     B2 00 A0 FD | 	call	#popregs_
134a4                 | _do_paper_ret
134a4     2D 00 64 FD | 	ret
134a8                 | 
134a8                 | ' 
134a8                 | ' sub do_ink
134a8                 | _do_ink
134a8     03 4A 05 F6 | 	mov	COUNT_, #3
134ac     A8 00 A0 FD | 	call	#pushregs_
134b0     30 64 BF FD | 	call	#_pop
134b4     FD 1E 02 F6 | 	mov	local01, result1
134b8     FE 20 02 F6 | 	mov	local02, result2
134bc     FF 22 02 F6 | 	mov	local03, result3
134c0                 | ' t1=pop() 
134c0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
134c0     1E 22 0E F2 | 	cmp	local03, #30 wz
134c4     10 00 90 5D |  if_ne	jmp	#LR__1520
134c8     0F 13 02 F6 | 	mov	arg01, local01
134cc     00 14 06 F6 | 	mov	arg02, #0
134d0     B8 88 B0 FD | 	call	#__system___float_tointeger
134d4     FD 1E 02 F6 | 	mov	local01, result1
134d8                 | LR__1520
134d8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
134d8     1F 22 0E F2 | 	cmp	local03, #31 wz
134dc     18 00 90 5D |  if_ne	jmp	#LR__1521
134e0     0F 13 02 F6 | 	mov	arg01, local01
134e4     C4 8B B0 FD | 	call	#__system____builtin_atof
134e8     FD 12 02 F6 | 	mov	arg01, result1
134ec     00 14 06 F6 | 	mov	arg02, #0
134f0     98 88 B0 FD | 	call	#__system___float_tointeger
134f4     FD 1E 02 F6 | 	mov	local01, result1
134f8                 | LR__1521
134f8     56 00 00 FF 
134fc     10 E5 05 F1 | 	add	objptr, ##44304
13500     F2 1E 62 FC | 	wrlong	local01, objptr
13504     04 E4 85 F1 | 	sub	objptr, #4
13508     F2 14 02 FB | 	rdlong	arg02, objptr
1350c                 | ' 
1350c                 | ' write_color:=ff
1350c     56 00 00 FF 
13510     CF E4 85 F1 | 	sub	objptr, ##44239
13514     F2 1E 62 FC | 	wrlong	local01, objptr
13518                 | ' write_background:=bb
13518     04 E4 05 F1 | 	add	objptr, #4
1351c     F2 14 62 FC | 	wrlong	arg02, objptr
13520     56 00 00 FF 
13524     CF E4 05 F1 | 	add	objptr, ##44239
13528     F2 12 02 FB | 	rdlong	arg01, objptr
1352c     56 00 00 FF 
13530     10 E5 85 F1 | 	sub	objptr, ##44304
13534     14 35 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
13538     A7 F0 03 F6 | 	mov	ptra, fp
1353c     B2 00 A0 FD | 	call	#popregs_
13540                 | _do_ink_ret
13540     2D 00 64 FD | 	ret
13544                 | 
13544                 | ' 
13544                 | ' 
13544                 | ' sub do_font
13544                 | _do_font
13544     03 4A 05 F6 | 	mov	COUNT_, #3
13548     A8 00 A0 FD | 	call	#pushregs_
1354c     94 63 BF FD | 	call	#_pop
13550     FD 1E 02 F6 | 	mov	local01, result1
13554     FE 20 02 F6 | 	mov	local02, result2
13558     FF 22 02 F6 | 	mov	local03, result3
1355c                 | ' t1=pop() 
1355c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1355c     1E 22 0E F2 | 	cmp	local03, #30 wz
13560     10 00 90 5D |  if_ne	jmp	#LR__1530
13564     0F 13 02 F6 | 	mov	arg01, local01
13568     00 14 06 F6 | 	mov	arg02, #0
1356c     1C 88 B0 FD | 	call	#__system___float_tointeger
13570     FD 1E 02 F6 | 	mov	local01, result1
13574                 | LR__1530
13574                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13574     1F 22 0E F2 | 	cmp	local03, #31 wz
13578     18 00 90 5D |  if_ne	jmp	#LR__1531
1357c     0F 13 02 F6 | 	mov	arg01, local01
13580     28 8B B0 FD | 	call	#__system____builtin_atof
13584     FD 12 02 F6 | 	mov	arg01, result1
13588     00 14 06 F6 | 	mov	arg02, #0
1358c     FC 87 B0 FD | 	call	#__system___float_tointeger
13590     FD 1E 02 F6 | 	mov	local01, result1
13594                 | LR__1531
13594     56 00 00 FF 
13598     14 E5 05 F1 | 	add	objptr, ##44308
1359c     F2 1E 62 FC | 	wrlong	local01, objptr
135a0     56 00 00 FF 
135a4     14 E5 85 F1 | 	sub	objptr, ##44308
135a8     02 1E 66 F0 | 	shl	local01, #2
135ac     0F 13 02 F6 | 	mov	arg01, local01
135b0     F8 43 B0 FD | 	call	#_hg010b_spin2_setfontfamily
135b4     A7 F0 03 F6 | 	mov	ptra, fp
135b8     B2 00 A0 FD | 	call	#popregs_
135bc                 | _do_font_ret
135bc     2D 00 64 FD | 	ret
135c0                 | 
135c0                 | ' 
135c0                 | ' sub do_mode
135c0                 | _do_mode
135c0     04 4A 05 F6 | 	mov	COUNT_, #4
135c4     A8 00 A0 FD | 	call	#pushregs_
135c8     18 63 BF FD | 	call	#_pop
135cc     FD 1E 02 F6 | 	mov	local01, result1
135d0     FE 20 02 F6 | 	mov	local02, result2
135d4     FF 22 02 F6 | 	mov	local03, result3
135d8                 | ' t1=pop() 
135d8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
135d8     1E 22 0E F2 | 	cmp	local03, #30 wz
135dc     10 00 90 5D |  if_ne	jmp	#LR__1540
135e0     0F 13 02 F6 | 	mov	arg01, local01
135e4     00 14 06 F6 | 	mov	arg02, #0
135e8     A0 87 B0 FD | 	call	#__system___float_tointeger
135ec     FD 1E 02 F6 | 	mov	local01, result1
135f0                 | LR__1540
135f0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
135f0     1F 22 0E F2 | 	cmp	local03, #31 wz
135f4     18 00 90 5D |  if_ne	jmp	#LR__1541
135f8     0F 13 02 F6 | 	mov	arg01, local01
135fc     AC 8A B0 FD | 	call	#__system____builtin_atof
13600     FD 12 02 F6 | 	mov	arg01, result1
13604     00 14 06 F6 | 	mov	arg02, #0
13608     80 87 B0 FD | 	call	#__system___float_tointeger
1360c     FD 1E 02 F6 | 	mov	local01, result1
13610                 | LR__1541
13610                 | ' select case t1.result.iresult
13610     0F 25 02 F6 | 	mov	local04, local01
13614     05 24 26 F3 | 	fle	local04, #5
13618     30 24 62 FD | 	jmprel	local04
1361c                 | LR__1542
1361c     14 00 90 FD | 	jmp	#LR__1543
13620     A8 00 90 FD | 	jmp	#LR__1544
13624     10 01 90 FD | 	jmp	#LR__1545
13628     78 01 90 FD | 	jmp	#LR__1546
1362c     E0 01 90 FD | 	jmp	#LR__1547
13630     70 02 90 FD | 	jmp	#LR__1548
13634                 | LR__1543
13634     56 00 00 FF 
13638     14 E5 05 F1 | 	add	objptr, ##44308
1363c     F2 02 68 FC | 	wrlong	#1, objptr
13640     04 E4 85 F1 | 	sub	objptr, #4
13644     F2 34 69 FC | 	wrlong	#154, objptr
13648     22 00 00 FF 
1364c     A4 E5 05 F1 | 	add	objptr, ##17828
13650     F2 02 68 FC | 	wrlong	#1, objptr
13654     22 00 00 FF 
13658     A8 E5 85 F1 | 	sub	objptr, ##17832
1365c     F2 26 69 FC | 	wrlong	#147, objptr
13660     56 00 00 FF 
13664     0C E5 85 F1 | 	sub	objptr, ##44300
13668     04 12 06 F6 | 	mov	arg01, #4
1366c     3C 43 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13670     56 00 00 FF 
13674     10 E5 05 F1 | 	add	objptr, ##44304
13678     F2 12 02 FB | 	rdlong	arg01, objptr
1367c     04 E4 85 F1 | 	sub	objptr, #4
13680     F2 14 02 FB | 	rdlong	arg02, objptr
13684                 | ' 
13684                 | ' write_color:=ff
13684     56 00 00 FF 
13688     CF E4 85 F1 | 	sub	objptr, ##44239
1368c     F2 12 62 FC | 	wrlong	arg01, objptr
13690                 | ' write_background:=bb
13690     04 E4 05 F1 | 	add	objptr, #4
13694     F2 14 62 FC | 	wrlong	arg02, objptr
13698     01 00 00 FF 
1369c     00 EA 05 F1 | 	add	ptr__dat__, ##512
136a0     7A 00 00 FF 
136a4     17 E5 05 F1 | 	add	objptr, ##62743
136a8     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
136ac     04 E4 85 F1 | 	sub	objptr, #4
136b0     03 00 80 FF 
136b4     F2 28 69 FC | 	wrlong	##1684, objptr
136b8     7A 00 00 FF 
136bc     54 E5 85 F1 | 	sub	objptr, ##62804
136c0     01 00 00 FF 
136c4     00 EA 85 F1 | 	sub	ptr__dat__, ##512
136c8     D8 01 90 FD | 	jmp	#LR__1548
136cc                 | LR__1544
136cc     56 00 00 FF 
136d0     14 E5 05 F1 | 	add	objptr, ##44308
136d4     F2 00 68 FC | 	wrlong	#0, objptr
136d8     04 E4 85 F1 | 	sub	objptr, #4
136dc     F2 2E 68 FC | 	wrlong	#23, objptr
136e0     22 00 00 FF 
136e4     A4 E5 05 F1 | 	add	objptr, ##17828
136e8     F2 00 68 FC | 	wrlong	#0, objptr
136ec     22 00 00 FF 
136f0     A8 E5 85 F1 | 	sub	objptr, ##17832
136f4     F2 00 68 FC | 	wrlong	#0, objptr
136f8     56 00 00 FF 
136fc     0C E5 85 F1 | 	sub	objptr, ##44300
13700     00 12 06 F6 | 	mov	arg01, #0
13704     A4 42 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13708     56 00 00 FF 
1370c     10 E5 05 F1 | 	add	objptr, ##44304
13710     F2 12 02 FB | 	rdlong	arg01, objptr
13714     04 E4 85 F1 | 	sub	objptr, #4
13718     F2 14 02 FB | 	rdlong	arg02, objptr
1371c                 | ' 
1371c                 | ' write_color:=ff
1371c     56 00 00 FF 
13720     CF E4 85 F1 | 	sub	objptr, ##44239
13724     F2 12 62 FC | 	wrlong	arg01, objptr
13728                 | ' write_background:=bb
13728     04 E4 05 F1 | 	add	objptr, #4
1372c     F2 14 62 FC | 	wrlong	arg02, objptr
13730     41 E4 85 F1 | 	sub	objptr, #65
13734     6C 01 90 FD | 	jmp	#LR__1548
13738                 | LR__1545
13738     56 00 00 FF 
1373c     14 E5 05 F1 | 	add	objptr, ##44308
13740     F2 00 68 FC | 	wrlong	#0, objptr
13744     04 E4 85 F1 | 	sub	objptr, #4
13748     F2 6A 69 FC | 	wrlong	#181, objptr
1374c     22 00 00 FF 
13750     A4 E5 05 F1 | 	add	objptr, ##17828
13754     F2 00 68 FC | 	wrlong	#0, objptr
13758     22 00 00 FF 
1375c     A8 E5 85 F1 | 	sub	objptr, ##17832
13760     F2 00 68 FC | 	wrlong	#0, objptr
13764     56 00 00 FF 
13768     0C E5 85 F1 | 	sub	objptr, ##44300
1376c     00 12 06 F6 | 	mov	arg01, #0
13770     38 42 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13774     56 00 00 FF 
13778     10 E5 05 F1 | 	add	objptr, ##44304
1377c     F2 12 02 FB | 	rdlong	arg01, objptr
13780     04 E4 85 F1 | 	sub	objptr, #4
13784     F2 14 02 FB | 	rdlong	arg02, objptr
13788                 | ' 
13788                 | ' write_color:=ff
13788     56 00 00 FF 
1378c     CF E4 85 F1 | 	sub	objptr, ##44239
13790     F2 12 62 FC | 	wrlong	arg01, objptr
13794                 | ' write_background:=bb
13794     04 E4 05 F1 | 	add	objptr, #4
13798     F2 14 62 FC | 	wrlong	arg02, objptr
1379c     41 E4 85 F1 | 	sub	objptr, #65
137a0     00 01 90 FD | 	jmp	#LR__1548
137a4                 | LR__1546
137a4     56 00 00 FF 
137a8     14 E5 05 F1 | 	add	objptr, ##44308
137ac     F2 00 68 FC | 	wrlong	#0, objptr
137b0     04 E4 85 F1 | 	sub	objptr, #4
137b4     F2 1E 68 FC | 	wrlong	#15, objptr
137b8     22 00 00 FF 
137bc     A4 E5 05 F1 | 	add	objptr, ##17828
137c0     F2 00 68 FC | 	wrlong	#0, objptr
137c4     22 00 00 FF 
137c8     A8 E5 85 F1 | 	sub	objptr, ##17832
137cc     F2 00 68 FC | 	wrlong	#0, objptr
137d0     56 00 00 FF 
137d4     0C E5 85 F1 | 	sub	objptr, ##44300
137d8     00 12 06 F6 | 	mov	arg01, #0
137dc     CC 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
137e0     56 00 00 FF 
137e4     10 E5 05 F1 | 	add	objptr, ##44304
137e8     F2 12 02 FB | 	rdlong	arg01, objptr
137ec     04 E4 85 F1 | 	sub	objptr, #4
137f0     F2 14 02 FB | 	rdlong	arg02, objptr
137f4                 | ' 
137f4                 | ' write_color:=ff
137f4     56 00 00 FF 
137f8     CF E4 85 F1 | 	sub	objptr, ##44239
137fc     F2 12 62 FC | 	wrlong	arg01, objptr
13800                 | ' write_background:=bb
13800     04 E4 05 F1 | 	add	objptr, #4
13804     F2 14 62 FC | 	wrlong	arg02, objptr
13808     41 E4 85 F1 | 	sub	objptr, #65
1380c     94 00 90 FD | 	jmp	#LR__1548
13810                 | LR__1547
13810     56 00 00 FF 
13814     14 E5 05 F1 | 	add	objptr, ##44308
13818     F2 02 68 FC | 	wrlong	#1, objptr
1381c     04 E4 85 F1 | 	sub	objptr, #4
13820     F2 02 68 FC | 	wrlong	#1, objptr
13824     22 00 00 FF 
13828     A4 E5 05 F1 | 	add	objptr, ##17828
1382c     F2 02 68 FC | 	wrlong	#1, objptr
13830     22 00 00 FF 
13834     A8 E5 85 F1 | 	sub	objptr, ##17832
13838     F2 1C 68 FC | 	wrlong	#14, objptr
1383c     56 00 00 FF 
13840     0C E5 85 F1 | 	sub	objptr, ##44300
13844     04 12 06 F6 | 	mov	arg01, #4
13848     60 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1384c     56 00 00 FF 
13850     10 E5 05 F1 | 	add	objptr, ##44304
13854     F2 12 02 FB | 	rdlong	arg01, objptr
13858     04 E4 85 F1 | 	sub	objptr, #4
1385c     F2 14 02 FB | 	rdlong	arg02, objptr
13860                 | ' 
13860                 | ' write_color:=ff
13860     56 00 00 FF 
13864     CF E4 85 F1 | 	sub	objptr, ##44239
13868     F2 12 62 FC | 	wrlong	arg01, objptr
1386c                 | ' write_background:=bb
1386c     04 E4 05 F1 | 	add	objptr, #4
13870     F2 14 62 FC | 	wrlong	arg02, objptr
13874     07 00 00 FF 
13878     72 EB 05 F1 | 	add	ptr__dat__, ##3954
1387c     7A 00 00 FF 
13880     17 E5 05 F1 | 	add	objptr, ##62743
13884     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
13888     04 E4 85 F1 | 	sub	objptr, #4
1388c     03 00 80 FF 
13890     F2 28 69 FC | 	wrlong	##1684, objptr
13894     7A 00 00 FF 
13898     54 E5 85 F1 | 	sub	objptr, ##62804
1389c     07 00 00 FF 
138a0     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
138a4                 | LR__1548
138a4     7A 00 00 FF 
138a8     50 E5 05 F1 | 	add	objptr, ##62800
138ac     F2 1E 62 FC | 	wrlong	local01, objptr
138b0     24 00 00 FF 
138b4     40 E4 85 F1 | 	sub	objptr, ##18496
138b8     F2 12 02 FB | 	rdlong	arg01, objptr
138bc     04 E4 85 F1 | 	sub	objptr, #4
138c0     F2 14 02 FB | 	rdlong	arg02, objptr
138c4     56 00 00 FF 
138c8     0C E5 85 F1 | 	sub	objptr, ##44300
138cc     C4 41 B0 FD | 	call	#_hg010b_spin2_cls
138d0     44 01 00 FF 
138d4     C8 12 06 F6 | 	mov	arg01, ##@LR__4597
138d8                 | ' 
138d8                 | ' write(text)
138d8     74 44 B0 FD | 	call	#_hg010b_spin2_write
138dc                 | ' crlf
138dc     D0 45 B0 FD | 	call	#_hg010b_spin2_crlf
138e0     10 00 00 FF 
138e4     10 EB 05 F1 | 	add	ptr__dat__, ##8464
138e8     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
138ec     10 00 00 FF 
138f0     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
138f4                 | ' 
138f4                 | ' write(text)
138f4     58 44 B0 FD | 	call	#_hg010b_spin2_write
138f8                 | ' crlf
138f8     B4 45 B0 FD | 	call	#_hg010b_spin2_crlf
138fc     79 00 00 FF 
13900     B0 E4 05 F1 | 	add	objptr, ##62128
13904     F2 12 02 FB | 	rdlong	arg01, objptr
13908     79 00 00 FF 
1390c     B0 E4 85 F1 | 	sub	objptr, ##62128
13910                 | ' 
13910                 | ' write(text)
13910     3C 44 B0 FD | 	call	#_hg010b_spin2_write
13914                 | ' crlf
13914     98 45 B0 FD | 	call	#_hg010b_spin2_crlf
13918     A7 F0 03 F6 | 	mov	ptra, fp
1391c     B2 00 A0 FD | 	call	#popregs_
13920                 | _do_mode_ret
13920     2D 00 64 FD | 	ret
13924                 | 
13924                 | ' 
13924                 | ' 
13924                 | ' 
13924                 | ' sub do_pinwrite
13924                 | _do_pinwrite
13924     01 4A 05 F6 | 	mov	COUNT_, #1
13928     A8 00 A0 FD | 	call	#pushregs_
1392c     18 F0 07 F1 | 	add	ptra, #24
13930     B0 5F BF FD | 	call	#_pop
13934     FD 14 02 F6 | 	mov	arg02, result1
13938     FE 12 02 F6 | 	mov	arg01, result2
1393c     FF 1E 02 F6 | 	mov	local01, result3
13940     A7 14 62 FC | 	wrlong	arg02, fp
13944     04 4E 05 F1 | 	add	fp, #4
13948     A7 12 62 FC | 	wrlong	arg01, fp
1394c     04 4E 05 F1 | 	add	fp, #4
13950     A7 1E 62 FC | 	wrlong	local01, fp
13954     08 4E 85 F1 | 	sub	fp, #8
13958     88 5F BF FD | 	call	#_pop
1395c     FF 1E 02 F6 | 	mov	local01, result3
13960     0C 4E 05 F1 | 	add	fp, #12
13964     A7 FA 61 FC | 	wrlong	result1, fp
13968     04 4E 05 F1 | 	add	fp, #4
1396c     A7 FC 61 FC | 	wrlong	result2, fp
13970     04 4E 05 F1 | 	add	fp, #4
13974     A7 1E 62 FC | 	wrlong	local01, fp
13978     08 4E 85 F1 | 	sub	fp, #8
1397c     A7 12 02 F6 | 	mov	arg01, fp
13980     0C 4E 85 F1 | 	sub	fp, #12
13984     CC D4 BF FD | 	call	#_converttoint
13988     FD 1E 02 F6 | 	mov	local01, result1
1398c     A7 12 02 F6 | 	mov	arg01, fp
13990     C0 D4 BF FD | 	call	#_converttoint
13994     FD 14 02 F6 | 	mov	arg02, result1
13998     0F 13 02 F6 | 	mov	arg01, local01
1399c     EC 55 B0 FD | 	call	#__system___pinwrite
139a0     A7 F0 03 F6 | 	mov	ptra, fp
139a4     B2 00 A0 FD | 	call	#popregs_
139a8                 | _do_pinwrite_ret
139a8     2D 00 64 FD | 	ret
139ac                 | 
139ac                 | ' 
139ac                 | ' sub do_pinfloat
139ac                 | _do_pinfloat
139ac     00 4A 05 F6 | 	mov	COUNT_, #0
139b0     A8 00 A0 FD | 	call	#pushregs_
139b4     0C F0 07 F1 | 	add	ptra, #12
139b8     28 5F BF FD | 	call	#_pop
139bc     A7 FA 61 FC | 	wrlong	result1, fp
139c0     04 4E 05 F1 | 	add	fp, #4
139c4     A7 FC 61 FC | 	wrlong	result2, fp
139c8     04 4E 05 F1 | 	add	fp, #4
139cc     A7 FE 61 FC | 	wrlong	result3, fp
139d0     08 4E 85 F1 | 	sub	fp, #8
139d4     A7 12 02 F6 | 	mov	arg01, fp
139d8     78 D4 BF FD | 	call	#_converttoint
139dc     50 FA 61 FD | 	fltl	result1
139e0     A7 F0 03 F6 | 	mov	ptra, fp
139e4     B2 00 A0 FD | 	call	#popregs_
139e8                 | _do_pinfloat_ret
139e8     2D 00 64 FD | 	ret
139ec                 | 
139ec                 | ' 
139ec                 | ' sub do_pinlo
139ec                 | _do_pinlo
139ec     00 4A 05 F6 | 	mov	COUNT_, #0
139f0     A8 00 A0 FD | 	call	#pushregs_
139f4     0C F0 07 F1 | 	add	ptra, #12
139f8     E8 5E BF FD | 	call	#_pop
139fc     A7 FA 61 FC | 	wrlong	result1, fp
13a00     04 4E 05 F1 | 	add	fp, #4
13a04     A7 FC 61 FC | 	wrlong	result2, fp
13a08     04 4E 05 F1 | 	add	fp, #4
13a0c     A7 FE 61 FC | 	wrlong	result3, fp
13a10     08 4E 85 F1 | 	sub	fp, #8
13a14     A7 12 02 F6 | 	mov	arg01, fp
13a18     38 D4 BF FD | 	call	#_converttoint
13a1c     58 FA 61 FD | 	drvl	result1
13a20     A7 F0 03 F6 | 	mov	ptra, fp
13a24     B2 00 A0 FD | 	call	#popregs_
13a28                 | _do_pinlo_ret
13a28     2D 00 64 FD | 	ret
13a2c                 | 
13a2c                 | ' 
13a2c                 | ' sub do_pinhi
13a2c                 | _do_pinhi
13a2c     00 4A 05 F6 | 	mov	COUNT_, #0
13a30     A8 00 A0 FD | 	call	#pushregs_
13a34     0C F0 07 F1 | 	add	ptra, #12
13a38     A8 5E BF FD | 	call	#_pop
13a3c     A7 FA 61 FC | 	wrlong	result1, fp
13a40     04 4E 05 F1 | 	add	fp, #4
13a44     A7 FC 61 FC | 	wrlong	result2, fp
13a48     04 4E 05 F1 | 	add	fp, #4
13a4c     A7 FE 61 FC | 	wrlong	result3, fp
13a50     08 4E 85 F1 | 	sub	fp, #8
13a54     A7 12 02 F6 | 	mov	arg01, fp
13a58     F8 D3 BF FD | 	call	#_converttoint
13a5c     59 FA 61 FD | 	drvh	result1
13a60     A7 F0 03 F6 | 	mov	ptra, fp
13a64     B2 00 A0 FD | 	call	#popregs_
13a68                 | _do_pinhi_ret
13a68     2D 00 64 FD | 	ret
13a6c                 | 
13a6c                 | ' 
13a6c                 | ' sub do_pintoggle
13a6c                 | _do_pintoggle
13a6c     00 4A 05 F6 | 	mov	COUNT_, #0
13a70     A8 00 A0 FD | 	call	#pushregs_
13a74     0C F0 07 F1 | 	add	ptra, #12
13a78     68 5E BF FD | 	call	#_pop
13a7c     A7 FA 61 FC | 	wrlong	result1, fp
13a80     04 4E 05 F1 | 	add	fp, #4
13a84     A7 FC 61 FC | 	wrlong	result2, fp
13a88     04 4E 05 F1 | 	add	fp, #4
13a8c     A7 FE 61 FC | 	wrlong	result3, fp
13a90     08 4E 85 F1 | 	sub	fp, #8
13a94     A7 12 02 F6 | 	mov	arg01, fp
13a98     B8 D3 BF FD | 	call	#_converttoint
13a9c     5F FA 61 FD | 	drvnot	result1
13aa0     A7 F0 03 F6 | 	mov	ptra, fp
13aa4     B2 00 A0 FD | 	call	#popregs_
13aa8                 | _do_pintoggle_ret
13aa8     2D 00 64 FD | 	ret
13aac                 | 
13aac                 | ' 
13aac                 | ' 
13aac                 | ' sub do_pinstart
13aac                 | _do_pinstart
13aac     03 4A 05 F6 | 	mov	COUNT_, #3
13ab0     A8 00 A0 FD | 	call	#pushregs_
13ab4     30 F0 07 F1 | 	add	ptra, #48
13ab8     28 5E BF FD | 	call	#_pop
13abc     FD 16 02 F6 | 	mov	arg03, result1
13ac0     FE 14 02 F6 | 	mov	arg02, result2
13ac4     FF 18 02 F6 | 	mov	arg04, result3
13ac8     A7 16 62 FC | 	wrlong	arg03, fp
13acc     04 4E 05 F1 | 	add	fp, #4
13ad0     A7 14 62 FC | 	wrlong	arg02, fp
13ad4     04 4E 05 F1 | 	add	fp, #4
13ad8     A7 18 62 FC | 	wrlong	arg04, fp
13adc     08 4E 85 F1 | 	sub	fp, #8
13ae0     00 5E BF FD | 	call	#_pop
13ae4     FD 16 02 F6 | 	mov	arg03, result1
13ae8     FE 14 02 F6 | 	mov	arg02, result2
13aec     FF 18 02 F6 | 	mov	arg04, result3
13af0     0C 4E 05 F1 | 	add	fp, #12
13af4     A7 16 62 FC | 	wrlong	arg03, fp
13af8     04 4E 05 F1 | 	add	fp, #4
13afc     A7 14 62 FC | 	wrlong	arg02, fp
13b00     04 4E 05 F1 | 	add	fp, #4
13b04     A7 18 62 FC | 	wrlong	arg04, fp
13b08     14 4E 85 F1 | 	sub	fp, #20
13b0c     D4 5D BF FD | 	call	#_pop
13b10     FD 16 02 F6 | 	mov	arg03, result1
13b14     FE 14 02 F6 | 	mov	arg02, result2
13b18     FF 18 02 F6 | 	mov	arg04, result3
13b1c     18 4E 05 F1 | 	add	fp, #24
13b20     A7 16 62 FC | 	wrlong	arg03, fp
13b24     04 4E 05 F1 | 	add	fp, #4
13b28     A7 14 62 FC | 	wrlong	arg02, fp
13b2c     04 4E 05 F1 | 	add	fp, #4
13b30     A7 18 62 FC | 	wrlong	arg04, fp
13b34     20 4E 85 F1 | 	sub	fp, #32
13b38     A8 5D BF FD | 	call	#_pop
13b3c     FF 16 02 F6 | 	mov	arg03, result3
13b40     24 4E 05 F1 | 	add	fp, #36
13b44     A7 FA 61 FC | 	wrlong	result1, fp
13b48     04 4E 05 F1 | 	add	fp, #4
13b4c     A7 FC 61 FC | 	wrlong	result2, fp
13b50     04 4E 05 F1 | 	add	fp, #4
13b54     A7 16 62 FC | 	wrlong	arg03, fp
13b58     08 4E 85 F1 | 	sub	fp, #8
13b5c     A7 12 02 F6 | 	mov	arg01, fp
13b60     24 4E 85 F1 | 	sub	fp, #36
13b64     EC D2 BF FD | 	call	#_converttoint
13b68     FD 1E 02 F6 | 	mov	local01, result1
13b6c     18 4E 05 F1 | 	add	fp, #24
13b70     A7 12 02 F6 | 	mov	arg01, fp
13b74     18 4E 85 F1 | 	sub	fp, #24
13b78     D8 D2 BF FD | 	call	#_converttoint
13b7c     FD 20 02 F6 | 	mov	local02, result1
13b80     0C 4E 05 F1 | 	add	fp, #12
13b84     A7 12 02 F6 | 	mov	arg01, fp
13b88     0C 4E 85 F1 | 	sub	fp, #12
13b8c     C4 D2 BF FD | 	call	#_converttoint
13b90     FD 22 02 F6 | 	mov	local03, result1
13b94     A7 12 02 F6 | 	mov	arg01, fp
13b98     B8 D2 BF FD | 	call	#_converttoint
13b9c     40 1E 62 FD | 	dirl	local01
13ba0     0F 21 02 FC | 	wrpin	local02, local01
13ba4     0F 23 12 FC | 	wxpin	local03, local01
13ba8     0F FB 21 FC | 	wypin	result1, local01
13bac     41 1E 62 FD | 	dirh	local01
13bb0     A7 F0 03 F6 | 	mov	ptra, fp
13bb4     B2 00 A0 FD | 	call	#popregs_
13bb8                 | _do_pinstart_ret
13bb8     2D 00 64 FD | 	ret
13bbc                 | 
13bbc                 | ' 
13bbc                 | ' 
13bbc                 | ' sub do_wrpin
13bbc                 | _do_wrpin
13bbc     01 4A 05 F6 | 	mov	COUNT_, #1
13bc0     A8 00 A0 FD | 	call	#pushregs_
13bc4     18 F0 07 F1 | 	add	ptra, #24
13bc8     18 5D BF FD | 	call	#_pop
13bcc     FD 14 02 F6 | 	mov	arg02, result1
13bd0     FE 12 02 F6 | 	mov	arg01, result2
13bd4     FF 1E 02 F6 | 	mov	local01, result3
13bd8     A7 14 62 FC | 	wrlong	arg02, fp
13bdc     04 4E 05 F1 | 	add	fp, #4
13be0     A7 12 62 FC | 	wrlong	arg01, fp
13be4     04 4E 05 F1 | 	add	fp, #4
13be8     A7 1E 62 FC | 	wrlong	local01, fp
13bec     08 4E 85 F1 | 	sub	fp, #8
13bf0     F0 5C BF FD | 	call	#_pop
13bf4     FF 1E 02 F6 | 	mov	local01, result3
13bf8     0C 4E 05 F1 | 	add	fp, #12
13bfc     A7 FA 61 FC | 	wrlong	result1, fp
13c00     04 4E 05 F1 | 	add	fp, #4
13c04     A7 FC 61 FC | 	wrlong	result2, fp
13c08     04 4E 05 F1 | 	add	fp, #4
13c0c     A7 1E 62 FC | 	wrlong	local01, fp
13c10     08 4E 85 F1 | 	sub	fp, #8
13c14     A7 12 02 F6 | 	mov	arg01, fp
13c18     0C 4E 85 F1 | 	sub	fp, #12
13c1c     34 D2 BF FD | 	call	#_converttoint
13c20     FD 1E 02 F6 | 	mov	local01, result1
13c24     A7 12 02 F6 | 	mov	arg01, fp
13c28     28 D2 BF FD | 	call	#_converttoint
13c2c     0F FB 01 FC | 	wrpin	result1, local01
13c30     A7 F0 03 F6 | 	mov	ptra, fp
13c34     B2 00 A0 FD | 	call	#popregs_
13c38                 | _do_wrpin_ret
13c38     2D 00 64 FD | 	ret
13c3c                 | 
13c3c                 | ' 
13c3c                 | ' sub do_wxpin
13c3c                 | _do_wxpin
13c3c     01 4A 05 F6 | 	mov	COUNT_, #1
13c40     A8 00 A0 FD | 	call	#pushregs_
13c44     18 F0 07 F1 | 	add	ptra, #24
13c48     98 5C BF FD | 	call	#_pop
13c4c     FD 14 02 F6 | 	mov	arg02, result1
13c50     FE 12 02 F6 | 	mov	arg01, result2
13c54     FF 1E 02 F6 | 	mov	local01, result3
13c58     A7 14 62 FC | 	wrlong	arg02, fp
13c5c     04 4E 05 F1 | 	add	fp, #4
13c60     A7 12 62 FC | 	wrlong	arg01, fp
13c64     04 4E 05 F1 | 	add	fp, #4
13c68     A7 1E 62 FC | 	wrlong	local01, fp
13c6c     08 4E 85 F1 | 	sub	fp, #8
13c70     70 5C BF FD | 	call	#_pop
13c74     FF 1E 02 F6 | 	mov	local01, result3
13c78     0C 4E 05 F1 | 	add	fp, #12
13c7c     A7 FA 61 FC | 	wrlong	result1, fp
13c80     04 4E 05 F1 | 	add	fp, #4
13c84     A7 FC 61 FC | 	wrlong	result2, fp
13c88     04 4E 05 F1 | 	add	fp, #4
13c8c     A7 1E 62 FC | 	wrlong	local01, fp
13c90     08 4E 85 F1 | 	sub	fp, #8
13c94     A7 12 02 F6 | 	mov	arg01, fp
13c98     0C 4E 85 F1 | 	sub	fp, #12
13c9c     B4 D1 BF FD | 	call	#_converttoint
13ca0     FD 1E 02 F6 | 	mov	local01, result1
13ca4     A7 12 02 F6 | 	mov	arg01, fp
13ca8     A8 D1 BF FD | 	call	#_converttoint
13cac     0F FB 11 FC | 	wxpin	result1, local01
13cb0     A7 F0 03 F6 | 	mov	ptra, fp
13cb4     B2 00 A0 FD | 	call	#popregs_
13cb8                 | _do_wxpin_ret
13cb8     2D 00 64 FD | 	ret
13cbc                 | 
13cbc                 | ' 
13cbc                 | ' sub do_wypin
13cbc                 | _do_wypin
13cbc     01 4A 05 F6 | 	mov	COUNT_, #1
13cc0     A8 00 A0 FD | 	call	#pushregs_
13cc4     18 F0 07 F1 | 	add	ptra, #24
13cc8     18 5C BF FD | 	call	#_pop
13ccc     FD 14 02 F6 | 	mov	arg02, result1
13cd0     FE 12 02 F6 | 	mov	arg01, result2
13cd4     FF 1E 02 F6 | 	mov	local01, result3
13cd8     A7 14 62 FC | 	wrlong	arg02, fp
13cdc     04 4E 05 F1 | 	add	fp, #4
13ce0     A7 12 62 FC | 	wrlong	arg01, fp
13ce4     04 4E 05 F1 | 	add	fp, #4
13ce8     A7 1E 62 FC | 	wrlong	local01, fp
13cec     08 4E 85 F1 | 	sub	fp, #8
13cf0     F0 5B BF FD | 	call	#_pop
13cf4     FF 1E 02 F6 | 	mov	local01, result3
13cf8     0C 4E 05 F1 | 	add	fp, #12
13cfc     A7 FA 61 FC | 	wrlong	result1, fp
13d00     04 4E 05 F1 | 	add	fp, #4
13d04     A7 FC 61 FC | 	wrlong	result2, fp
13d08     04 4E 05 F1 | 	add	fp, #4
13d0c     A7 1E 62 FC | 	wrlong	local01, fp
13d10     08 4E 85 F1 | 	sub	fp, #8
13d14     A7 12 02 F6 | 	mov	arg01, fp
13d18     0C 4E 85 F1 | 	sub	fp, #12
13d1c     34 D1 BF FD | 	call	#_converttoint
13d20     FD 1E 02 F6 | 	mov	local01, result1
13d24     A7 12 02 F6 | 	mov	arg01, fp
13d28     28 D1 BF FD | 	call	#_converttoint
13d2c     0F FB 21 FC | 	wypin	result1, local01
13d30     A7 F0 03 F6 | 	mov	ptra, fp
13d34     B2 00 A0 FD | 	call	#popregs_
13d38                 | _do_wypin_ret
13d38     2D 00 64 FD | 	ret
13d3c                 | 
13d3c                 | ' 
13d3c                 | ' sub do_position
13d3c                 | _do_position
13d3c     01 4A 05 F6 | 	mov	COUNT_, #1
13d40     A8 00 A0 FD | 	call	#pushregs_
13d44     18 F0 07 F1 | 	add	ptra, #24
13d48     98 5B BF FD | 	call	#_pop
13d4c     FD 14 02 F6 | 	mov	arg02, result1
13d50     FE 12 02 F6 | 	mov	arg01, result2
13d54     FF 1E 02 F6 | 	mov	local01, result3
13d58     A7 14 62 FC | 	wrlong	arg02, fp
13d5c     04 4E 05 F1 | 	add	fp, #4
13d60     A7 12 62 FC | 	wrlong	arg01, fp
13d64     04 4E 05 F1 | 	add	fp, #4
13d68     A7 1E 62 FC | 	wrlong	local01, fp
13d6c     08 4E 85 F1 | 	sub	fp, #8
13d70     70 5B BF FD | 	call	#_pop
13d74     FF 1E 02 F6 | 	mov	local01, result3
13d78     0C 4E 05 F1 | 	add	fp, #12
13d7c     A7 FA 61 FC | 	wrlong	result1, fp
13d80     04 4E 05 F1 | 	add	fp, #4
13d84     A7 FC 61 FC | 	wrlong	result2, fp
13d88     04 4E 05 F1 | 	add	fp, #4
13d8c     A7 1E 62 FC | 	wrlong	local01, fp
13d90     08 4E 85 F1 | 	sub	fp, #8
13d94     A7 12 02 F6 | 	mov	arg01, fp
13d98     0C 4E 85 F1 | 	sub	fp, #12
13d9c     B4 D0 BF FD | 	call	#_converttoint
13da0     FD 1E 02 F6 | 	mov	local01, result1
13da4     A7 12 02 F6 | 	mov	arg01, fp
13da8     A8 D0 BF FD | 	call	#_converttoint
13dac     FD 14 02 F6 | 	mov	arg02, result1
13db0     0F 13 02 F6 | 	mov	arg01, local01
13db4     34 3C B0 FD | 	call	#_hg010b_spin2_setcursorpos
13db8     A7 F0 03 F6 | 	mov	ptra, fp
13dbc     B2 00 A0 FD | 	call	#popregs_
13dc0                 | _do_position_ret
13dc0     2D 00 64 FD | 	ret
13dc4                 | 
13dc4                 | ' 
13dc4                 | ' sub do_waitms
13dc4                 | _do_waitms
13dc4     01 4A 05 F6 | 	mov	COUNT_, #1
13dc8     A8 00 A0 FD | 	call	#pushregs_
13dcc     18 F0 07 F1 | 	add	ptra, #24
13dd0     10 5B BF FD | 	call	#_pop
13dd4     A7 FA 61 FC | 	wrlong	result1, fp
13dd8     04 4E 05 F1 | 	add	fp, #4
13ddc     A7 FC 61 FC | 	wrlong	result2, fp
13de0     04 4E 05 F1 | 	add	fp, #4
13de4     A7 FE 61 FC | 	wrlong	result3, fp
13de8                 | ' 
13de8                 | ' t1=pop() 'value
13de8                 | ' 
13de8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
13de8     08 4E 85 F1 | 	sub	fp, #8
13dec     1C FE 0D F2 | 	cmp	result3, #28 wz
13df0     08 4E 05 51 |  if_ne	add	fp, #8
13df4     A7 12 02 5B |  if_ne	rdlong	arg01, fp
13df8     08 4E 85 51 |  if_ne	sub	fp, #8
13dfc     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
13e00     A7 12 02 AB |  if_e	rdlong	arg01, fp
13e04     0C 4E 05 A1 |  if_e	add	fp, #12
13e08     A7 12 62 AC |  if_e	wrlong	arg01, fp
13e0c     0C 4E 85 A1 |  if_e	sub	fp, #12
13e10     14 00 90 AD |  if_e	jmp	#LR__1550
13e14     A7 12 02 F6 | 	mov	arg01, fp
13e18     38 D0 BF FD | 	call	#_converttoint
13e1c     0C 4E 05 F1 | 	add	fp, #12
13e20     A7 FA 61 FC | 	wrlong	result1, fp
13e24     0C 4E 85 F1 | 	sub	fp, #12
13e28                 | LR__1550
13e28                 | ' if t<0 then return
13e28     0C 4E 05 F1 | 	add	fp, #12
13e2c     A7 12 02 FB | 	rdlong	arg01, fp
13e30     0C 4E 85 F1 | 	sub	fp, #12
13e34     00 12 56 F2 | 	cmps	arg01, #0 wc
13e38     B8 00 90 CD |  if_b	jmp	#LR__1555
13e3c                 | ' if t < 5000 then 
13e3c     0C 4E 05 F1 | 	add	fp, #12
13e40     A7 12 02 FB | 	rdlong	arg01, fp
13e44     0C 4E 85 F1 | 	sub	fp, #12
13e48     09 00 00 FF 
13e4c     88 13 56 F2 | 	cmps	arg01, ##5000 wc
13e50     14 00 90 3D |  if_ae	jmp	#LR__1551
13e54     0C 4E 05 F1 | 	add	fp, #12
13e58     A7 12 02 FB | 	rdlong	arg01, fp
13e5c     0C 4E 85 F1 | 	sub	fp, #12
13e60     68 52 B0 FD | 	call	#__system___waitms
13e64     8C 00 90 FD | 	jmp	#LR__1554
13e68                 | LR__1551
13e68     10 4E 05 F1 | 	add	fp, #16
13e6c     A7 02 68 FC | 	wrlong	#1, fp
13e70     04 4E 85 F1 | 	sub	fp, #4
13e74     A7 12 02 FB | 	rdlong	arg01, fp
13e78     09 13 52 F6 | 	abs	arg01, arg01 wc
13e7c     09 00 00 FF 
13e80     88 13 16 FD | 	qdiv	arg01, ##5000
13e84                 | '   for i=1 to t/5000
13e84     0C 4E 85 F1 | 	sub	fp, #12
13e88     18 1E 62 FD | 	getqx	local01
13e8c     0F 1F 82 F6 | 	negc	local01, local01
13e90     01 1E 06 F1 | 	add	local01, #1
13e94                 | LR__1552
13e94     10 4E 05 F1 | 	add	fp, #16
13e98     A7 12 02 FB | 	rdlong	arg01, fp
13e9c     10 4E 85 F1 | 	sub	fp, #16
13ea0     0F 13 52 F2 | 	cmps	arg01, local01 wc
13ea4     28 00 90 3D |  if_ae	jmp	#LR__1553
13ea8     0C 4E 05 F1 | 	add	fp, #12
13eac     A7 12 02 FB | 	rdlong	arg01, fp
13eb0     0C 4E 85 F1 | 	sub	fp, #12
13eb4     14 52 B0 FD | 	call	#__system___waitms
13eb8     10 4E 05 F1 | 	add	fp, #16
13ebc     A7 12 02 FB | 	rdlong	arg01, fp
13ec0     01 12 06 F1 | 	add	arg01, #1
13ec4     A7 12 62 FC | 	wrlong	arg01, fp
13ec8     10 4E 85 F1 | 	sub	fp, #16
13ecc     C4 FF 9F FD | 	jmp	#LR__1552
13ed0                 | LR__1553
13ed0     0C 4E 05 F1 | 	add	fp, #12
13ed4     A7 1E 02 FB | 	rdlong	local01, fp
13ed8     0F 1F 52 F6 | 	abs	local01, local01 wc
13edc     09 00 00 FF 
13ee0     88 1F 16 FD | 	qdiv	local01, ##5000
13ee4     0C 4E 85 F1 | 	sub	fp, #12
13ee8     19 1E 62 FD | 	getqy	local01
13eec     0F 13 82 F6 | 	negc	arg01, local01
13ef0     D8 51 B0 FD | 	call	#__system___waitms
13ef4                 | LR__1554
13ef4                 | LR__1555
13ef4     A7 F0 03 F6 | 	mov	ptra, fp
13ef8     B2 00 A0 FD | 	call	#popregs_
13efc                 | _do_waitms_ret
13efc     2D 00 64 FD | 	ret
13f00                 | 
13f00                 | ' 
13f00                 | ' sub do_waitvbl
13f00                 | _do_waitvbl
13f00     01 12 06 F6 | 	mov	arg01, #1
13f04     1C 3B B0 FD | 	call	#_hg010b_spin2_waitvbl
13f08                 | _do_waitvbl_ret
13f08     2D 00 64 FD | 	ret
13f0c                 | 
13f0c                 | ' 
13f0c                 | ' sub do_waitclock
13f0c                 | _do_waitclock
13f0c     7A 00 00 FF 
13f10     48 E5 05 F1 | 	add	objptr, ##62792
13f14     F2 00 02 FB | 	rdlong	_var01, objptr
13f18                 | ' c=hkcnt
13f18                 | ' do: loop until hkcnt<>c
13f18                 | LR__1560
13f18     F2 02 02 FB | 	rdlong	_var02, objptr
13f1c     00 03 0A F2 | 	cmp	_var02, _var01 wz
13f20     F4 FF 9F AD |  if_e	jmp	#LR__1560
13f24     7A 00 00 FF 
13f28     48 E5 85 F1 | 	sub	objptr, ##62792
13f2c                 | _do_waitclock_ret
13f2c     2D 00 64 FD | 	ret
13f30                 | 
13f30                 | ' 
13f30                 | ' sub do_dir
13f30                 | _do_dir
13f30     03 4A 05 F6 | 	mov	COUNT_, #3
13f34     A8 00 A0 FD | 	call	#pushregs_
13f38     44 01 00 FF 
13f3c     C9 12 06 F6 | 	mov	arg01, ##@LR__4598
13f40     20 55 B0 FD | 	call	#__system___chdir
13f44                 | ' chdir("/sd/bas")       ' set working directory
13f44                 | ' print "Working directory: "; currentdir$ 
13f44     00 12 06 F6 | 	mov	arg01, #0
13f48     90 A7 B0 FD | 	call	#__system___getiolock_0423
13f4c     FD 12 02 F6 | 	mov	arg01, result1
13f50     84 4E B0 FD | 	call	#__system___lockmem
13f54     44 01 00 FF 
13f58     D1 14 06 F6 | 	mov	arg02, ##@LR__4599
13f5c     00 12 06 F6 | 	mov	arg01, #0
13f60     00 16 06 F6 | 	mov	arg03, #0
13f64     64 5B B0 FD | 	call	#__system___basic_print_string
13f68     71 00 00 FF 
13f6c     68 E5 05 F1 | 	add	objptr, ##58216
13f70     F2 14 02 FB | 	rdlong	arg02, objptr
13f74     71 00 00 FF 
13f78     68 E5 85 F1 | 	sub	objptr, ##58216
13f7c     00 12 06 F6 | 	mov	arg01, #0
13f80     00 16 06 F6 | 	mov	arg03, #0
13f84     44 5B B0 FD | 	call	#__system___basic_print_string
13f88     00 12 06 F6 | 	mov	arg01, #0
13f8c     0A 14 06 F6 | 	mov	arg02, #10
13f90     00 16 06 F6 | 	mov	arg03, #0
13f94     DC 5A B0 FD | 	call	#__system___basic_print_char
13f98     00 12 06 F6 | 	mov	arg01, #0
13f9c     3C A7 B0 FD | 	call	#__system___getiolock_0423
13fa0     FD 00 68 FC | 	wrlong	#0, result1
13fa4     44 01 00 FF 
13fa8     E5 12 06 F6 | 	mov	arg01, ##@LR__4600
13fac     10 14 06 F6 | 	mov	arg02, #16
13fb0     60 A8 B0 FD | 	call	#__system___basic_dir
13fb4     FD 1E 02 F6 | 	mov	local01, result1
13fb8                 | ' 
13fb8                 | ' filename=dir$("*", fbDirectory)
13fb8                 | ' while filename <> "" and filename <> nil
13fb8                 | LR__1570
13fb8     00 20 06 F6 | 	mov	local02, #0
13fbc     44 01 00 FF 
13fc0     E7 14 06 F6 | 	mov	arg02, ##@LR__4601
13fc4     0F 13 02 F6 | 	mov	arg01, local01
13fc8     34 4E B0 FD | 	call	#__system___string_cmp
13fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
13fd0     00 20 26 56 |  if_ne	not	local02, #0
13fd4     00 22 06 F6 | 	mov	local03, #0
13fd8     0F 13 02 F6 | 	mov	arg01, local01
13fdc     00 14 06 F6 | 	mov	arg02, #0
13fe0     1C 4E B0 FD | 	call	#__system___string_cmp
13fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
13fe8     00 22 26 56 |  if_ne	not	local03, #0
13fec     11 21 CA F7 | 	test	local02, local03 wz
13ff0     64 00 90 AD |  if_e	jmp	#LR__1571
13ff4                 | '   print "[dir] ";filename
13ff4     00 12 06 F6 | 	mov	arg01, #0
13ff8     E0 A6 B0 FD | 	call	#__system___getiolock_0423
13ffc     FD 12 02 F6 | 	mov	arg01, result1
14000     D4 4D B0 FD | 	call	#__system___lockmem
14004     44 01 00 FF 
14008     E8 14 06 F6 | 	mov	arg02, ##@LR__4602
1400c     00 12 06 F6 | 	mov	arg01, #0
14010     00 16 06 F6 | 	mov	arg03, #0
14014     B4 5A B0 FD | 	call	#__system___basic_print_string
14018     00 12 06 F6 | 	mov	arg01, #0
1401c     0F 15 02 F6 | 	mov	arg02, local01
14020     00 16 06 F6 | 	mov	arg03, #0
14024     A4 5A B0 FD | 	call	#__system___basic_print_string
14028     00 12 06 F6 | 	mov	arg01, #0
1402c     0A 14 06 F6 | 	mov	arg02, #10
14030     00 16 06 F6 | 	mov	arg03, #0
14034     3C 5A B0 FD | 	call	#__system___basic_print_char
14038     00 12 06 F6 | 	mov	arg01, #0
1403c     9C A6 B0 FD | 	call	#__system___getiolock_0423
14040     FD 00 68 FC | 	wrlong	#0, result1
14044     00 12 06 F6 | 	mov	arg01, #0
14048     00 14 06 F6 | 	mov	arg02, #0
1404c     C4 A7 B0 FD | 	call	#__system___basic_dir
14050     FD 1E 02 F6 | 	mov	local01, result1
14054     60 FF 9F FD | 	jmp	#LR__1570
14058                 | LR__1571
14058     44 01 00 FF 
1405c     EF 12 06 F6 | 	mov	arg01, ##@LR__4603
14060     21 14 06 F6 | 	mov	arg02, #33
14064     AC A7 B0 FD | 	call	#__system___basic_dir
14068     FD 1E 02 F6 | 	mov	local01, result1
1406c                 | ' 
1406c                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
1406c                 | ' do while filename <> "" and filename <> nil
1406c                 | LR__1572
1406c     00 20 06 F6 | 	mov	local02, #0
14070     44 01 00 FF 
14074     F1 14 06 F6 | 	mov	arg02, ##@LR__4604
14078     0F 13 02 F6 | 	mov	arg01, local01
1407c     80 4D B0 FD | 	call	#__system___string_cmp
14080     00 FA 0D F2 | 	cmp	result1, #0 wz
14084     00 20 26 56 |  if_ne	not	local02, #0
14088     00 22 06 F6 | 	mov	local03, #0
1408c     0F 13 02 F6 | 	mov	arg01, local01
14090     00 14 06 F6 | 	mov	arg02, #0
14094     68 4D B0 FD | 	call	#__system___string_cmp
14098     00 FA 0D F2 | 	cmp	result1, #0 wz
1409c     00 22 26 56 |  if_ne	not	local03, #0
140a0     11 21 CA F7 | 	test	local02, local03 wz
140a4     4C 01 90 AD |  if_e	jmp	#LR__1576
140a8                 | '   print filename
140a8     00 12 06 F6 | 	mov	arg01, #0
140ac     2C A6 B0 FD | 	call	#__system___getiolock_0423
140b0     FD 12 02 F6 | 	mov	arg01, result1
140b4     20 4D B0 FD | 	call	#__system___lockmem
140b8     00 12 06 F6 | 	mov	arg01, #0
140bc     0F 15 02 F6 | 	mov	arg02, local01
140c0     00 16 06 F6 | 	mov	arg03, #0
140c4     04 5A B0 FD | 	call	#__system___basic_print_string
140c8     00 12 06 F6 | 	mov	arg01, #0
140cc     0A 14 06 F6 | 	mov	arg02, #10
140d0     00 16 06 F6 | 	mov	arg03, #0
140d4     9C 59 B0 FD | 	call	#__system___basic_print_char
140d8     00 12 06 F6 | 	mov	arg01, #0
140dc     FC A5 B0 FD | 	call	#__system___getiolock_0423
140e0     FD 00 68 FC | 	wrlong	#0, result1
140e4     00 12 06 F6 | 	mov	arg01, #0
140e8     00 14 06 F6 | 	mov	arg02, #0
140ec     24 A7 B0 FD | 	call	#__system___basic_dir
140f0     FD 1E 02 F6 | 	mov	local01, result1
140f4                 | '   filename = dir$()      ' continue scan
140f4                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
140f4                 | ' return cursor_y
140f4     3A E4 05 F1 | 	add	objptr, #58
140f8     F2 FA C1 FA | 	rdbyte	result1, objptr
140fc     3A E4 85 F1 | 	sub	objptr, #58
14100     22 FA 0D F2 | 	cmp	result1, #34 wz
14104     64 FF 9F 5D |  if_ne	jmp	#LR__1572
14108                 | '     print "-----more, press any key";
14108     00 12 06 F6 | 	mov	arg01, #0
1410c     CC A5 B0 FD | 	call	#__system___getiolock_0423
14110     FD 12 02 F6 | 	mov	arg01, result1
14114     C0 4C B0 FD | 	call	#__system___lockmem
14118     44 01 00 FF 
1411c     F2 14 06 F6 | 	mov	arg02, ##@LR__4605
14120     00 12 06 F6 | 	mov	arg01, #0
14124     00 16 06 F6 | 	mov	arg03, #0
14128     A0 59 B0 FD | 	call	#__system___basic_print_string
1412c     00 12 06 F6 | 	mov	arg01, #0
14130     A8 A5 B0 FD | 	call	#__system___getiolock_0423
14134     FD 00 68 FC | 	wrlong	#0, result1
14138                 | '     do 
14138                 | LR__1573
14138     DC 44 B0 FD | 	call	#_usbnew_spin2_get_key
1413c     00 FA 0D F2 | 	cmp	result1, #0 wz
14140     F4 FF 9F 5D |  if_ne	jmp	#LR__1573
14144                 | '     do
14144                 | LR__1574
14144     D0 44 B0 FD | 	call	#_usbnew_spin2_get_key
14148     00 FA 0D F2 | 	cmp	result1, #0 wz
1414c     F4 FF 9F AD |  if_e	jmp	#LR__1574
14150                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
14150     79 00 00 FF 
14154     B4 E4 05 F1 | 	add	objptr, ##62132
14158     F2 20 02 FB | 	rdlong	local02, objptr
1415c     79 00 00 FF 
14160     B4 E4 85 F1 | 	sub	objptr, ##62132
14164     01 20 0E F2 | 	cmp	local02, #1 wz
14168     3C 00 90 5D |  if_ne	jmp	#LR__1575
1416c     7A 00 00 FF 
14170     58 E5 05 F1 | 	add	objptr, ##62808
14174     F2 14 02 FB | 	rdlong	arg02, objptr
14178     04 E4 85 F1 | 	sub	objptr, #4
1417c     F2 1A 02 FB | 	rdlong	arg05, objptr
14180     07 12 06 F6 | 	mov	arg01, #7
14184     56 00 00 FF 
14188     44 16 06 F6 | 	mov	arg03, ##44100
1418c     0E 18 C6 F9 | 	decod	arg04, #14
14190     01 1C 66 F6 | 	neg	arg06, #1
14194     6F 00 00 FF 
14198     94 E4 85 F1 | 	sub	objptr, ##56980
1419c     00 48 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
141a0     0B 00 00 FF 
141a4     C0 E4 85 F1 | 	sub	objptr, ##5824
141a8                 | LR__1575
141a8     00 12 06 F6 | 	mov	arg01, #0
141ac     23 14 06 F6 | 	mov	arg02, #35
141b0     38 38 B0 FD | 	call	#_hg010b_spin2_setcursorpos
141b4                 | '     position 0,35: print "                             ";: position 4,35  
141b4     00 12 06 F6 | 	mov	arg01, #0
141b8     20 A5 B0 FD | 	call	#__system___getiolock_0423
141bc     FD 12 02 F6 | 	mov	arg01, result1
141c0     14 4C B0 FD | 	call	#__system___lockmem
141c4     44 01 00 FF 
141c8     0B 15 06 F6 | 	mov	arg02, ##@LR__4606
141cc     00 12 06 F6 | 	mov	arg01, #0
141d0     00 16 06 F6 | 	mov	arg03, #0
141d4     F4 58 B0 FD | 	call	#__system___basic_print_string
141d8     00 12 06 F6 | 	mov	arg01, #0
141dc     FC A4 B0 FD | 	call	#__system___getiolock_0423
141e0     FD 00 68 FC | 	wrlong	#0, result1
141e4     04 12 06 F6 | 	mov	arg01, #4
141e8     23 14 06 F6 | 	mov	arg02, #35
141ec     FC 37 B0 FD | 	call	#_hg010b_spin2_setcursorpos
141f0     78 FE 9F FD | 	jmp	#LR__1572
141f4                 | LR__1576
141f4     A7 F0 03 F6 | 	mov	ptra, fp
141f8     B2 00 A0 FD | 	call	#popregs_
141fc                 | _do_dir_ret
141fc     2D 00 64 FD | 	ret
14200                 | 
14200                 | ' 
14200                 | ' sub do_if
14200                 | _do_if
14200     05 4A 05 F6 | 	mov	COUNT_, #5
14204     A8 00 A0 FD | 	call	#pushregs_
14208     D8 56 BF FD | 	call	#_pop
1420c     FD 1E 0A F6 | 	mov	local01, result1 wz
14210     FE 20 02 F6 | 	mov	local02, result2
14214     FF 22 02 F6 | 	mov	local03, result3
14218                 | ' t1=pop()
14218                 | ' ' if uresult=0, jump over else
14218                 | ' if t1.result.uresult = 0 then 
14218     BC 00 90 5D |  if_ne	jmp	#LR__1582
1421c                 | '   for i=lineptr_e to lineptr-1
1421c     69 00 00 FF 
14220     54 E5 05 F1 | 	add	objptr, ##54100
14224     F2 24 02 FB | 	rdlong	local04, objptr
14228     04 E4 85 F1 | 	sub	objptr, #4
1422c     F2 26 02 FB | 	rdlong	local05, objptr
14230     69 00 00 FF 
14234     50 E5 85 F1 | 	sub	objptr, ##54096
14238                 | LR__1580
14238     13 25 52 F2 | 	cmps	local04, local05 wc
1423c     78 00 90 3D |  if_ae	jmp	#LR__1581
14240     12 FF 01 F6 | 	mov	result3, local04
14244     01 FE 65 F0 | 	shl	result3, #1
14248     12 FF 01 F1 | 	add	result3, local04
1424c     02 FE 65 F0 | 	shl	result3, #2
14250     66 00 00 FF 
14254     50 E5 05 F1 | 	add	objptr, ##52560
14258     F2 FE 01 F1 | 	add	result3, objptr
1425c     FF 1E 02 FB | 	rdlong	local01, result3
14260     04 FE 05 F1 | 	add	result3, #4
14264     FF FC 01 FB | 	rdlong	result2, result3
14268     12 FF 01 F6 | 	mov	result3, local04
1426c     01 FE 65 F0 | 	shl	result3, #1
14270     12 FF 01 F1 | 	add	result3, local04
14274     02 FE 65 F0 | 	shl	result3, #2
14278     F2 FE 01 F1 | 	add	result3, objptr
1427c     08 FE 05 F1 | 	add	result3, #8
14280     FF FE 01 FB | 	rdlong	result3, result3
14284     FE 20 02 F6 | 	mov	local02, result2
14288     FF 22 02 F6 | 	mov	local03, result3
1428c                 | '     t1=compiledline(i)
1428c                 | '     if t1.result_type=token_else then lineptr_e=i : return
1428c     5A 22 0E F2 | 	cmp	local03, #90 wz
14290     66 00 00 FF 
14294     50 E5 85 F1 | 	sub	objptr, ##52560
14298     69 00 00 AF 
1429c     54 E5 05 A1 |  if_e	add	objptr, ##54100
142a0     F2 24 62 AC |  if_e	wrlong	local04, objptr
142a4     69 00 00 AF 
142a8     54 E5 85 A1 |  if_e	sub	objptr, ##54100
142ac     28 00 90 AD |  if_e	jmp	#LR__1583
142b0     01 24 06 F1 | 	add	local04, #1
142b4     80 FF 9F FD | 	jmp	#LR__1580
142b8                 | LR__1581
142b8     69 00 00 FF 
142bc     50 E5 05 F1 | 	add	objptr, ##54096
142c0     F2 26 02 FB | 	rdlong	local05, objptr
142c4     01 26 86 F1 | 	sub	local05, #1
142c8     04 E4 05 F1 | 	add	objptr, #4
142cc     F2 26 62 FC | 	wrlong	local05, objptr
142d0     69 00 00 FF 
142d4     54 E5 85 F1 | 	sub	objptr, ##54100
142d8                 | LR__1582
142d8                 | LR__1583
142d8     A7 F0 03 F6 | 	mov	ptra, fp
142dc     B2 00 A0 FD | 	call	#popregs_
142e0                 | _do_if_ret
142e0     2D 00 64 FD | 	ret
142e4                 | 
142e4                 | ' 
142e4                 | ' sub do_else
142e4                 | _do_else
142e4     69 00 00 FF 
142e8     50 E5 05 F1 | 	add	objptr, ##54096
142ec     F2 00 02 FB | 	rdlong	_var01, objptr
142f0     01 00 86 F1 | 	sub	_var01, #1
142f4     04 E4 05 F1 | 	add	objptr, #4
142f8     F2 00 62 FC | 	wrlong	_var01, objptr
142fc     69 00 00 FF 
14300     54 E5 85 F1 | 	sub	objptr, ##54100
14304                 | _do_else_ret
14304     2D 00 64 FD | 	ret
14308                 | 
14308                 | ' 
14308                 | ' sub do_rad
14308                 | _do_rad
14308     7A 00 00 FF 
1430c     5C E5 05 F1 | 	add	objptr, ##62812
14310     00 C0 9F FF 
14314     F2 00 68 FC | 	wrlong	##1065353216, objptr
14318     04 E4 05 F1 | 	add	objptr, #4
1431c     00 C0 9F FF 
14320     F2 00 68 FC | 	wrlong	##1065353216, objptr
14324     7A 00 00 FF 
14328     60 E5 85 F1 | 	sub	objptr, ##62816
1432c                 | _do_rad_ret
1432c     2D 00 64 FD | 	ret
14330                 | 
14330                 | ' 
14330                 | ' sub do_deg
14330                 | _do_deg
14330     7A 00 00 FF 
14334     5C E5 05 F1 | 	add	objptr, ##62812
14338     7D 47 9E FF 
1433c     F2 6A 68 FC | 	wrlong	##1016003125, objptr
14340     04 E4 05 F1 | 	add	objptr, #4
14344     97 32 A1 FF 
14348     F2 C2 69 FC | 	wrlong	##1113927393, objptr
1434c     7A 00 00 FF 
14350     60 E5 85 F1 | 	sub	objptr, ##62816
14354                 | _do_deg_ret
14354     2D 00 64 FD | 	ret
14358                 | 
14358                 | ' 
14358                 | ' sub do_int
14358                 | _do_int
14358     00 4A 05 F6 | 	mov	COUNT_, #0
1435c     A8 00 A0 FD | 	call	#pushregs_
14360     0C F0 07 F1 | 	add	ptra, #12
14364     7C 55 BF FD | 	call	#_pop
14368     A7 FA 61 FC | 	wrlong	result1, fp
1436c     04 4E 05 F1 | 	add	fp, #4
14370     A7 FC 61 FC | 	wrlong	result2, fp
14374     04 4E 05 F1 | 	add	fp, #4
14378     A7 FE 61 FC | 	wrlong	result3, fp
1437c     08 4E 85 F1 | 	sub	fp, #8
14380     A7 12 02 F6 | 	mov	arg01, fp
14384     CC CA BF FD | 	call	#_converttoint
14388     A7 FA 61 FC | 	wrlong	result1, fp
1438c     08 4E 05 F1 | 	add	fp, #8
14390     A7 38 68 FC | 	wrlong	#28, fp
14394     08 4E 85 F1 | 	sub	fp, #8
14398     A7 12 02 F6 | 	mov	arg01, fp
1439c     DC 55 BF FD | 	call	#_push
143a0     A7 F0 03 F6 | 	mov	ptra, fp
143a4     B2 00 A0 FD | 	call	#popregs_
143a8                 | _do_int_ret
143a8     2D 00 64 FD | 	ret
143ac                 | 
143ac                 | ' 
143ac                 | ' sub do_nothing
143ac                 | _do_nothing
143ac                 | _do_nothing_ret
143ac     2D 00 64 FD | 	ret
143b0                 | 
143b0                 | ' 
143b0                 | ' sub do_brun
143b0                 | _do_brun
143b0     08 4A 05 F6 | 	mov	COUNT_, #8
143b4     A8 00 A0 FD | 	call	#pushregs_
143b8     28 55 BF FD | 	call	#_pop
143bc     FE 1A 02 F6 | 	mov	arg05, result2
143c0     FF 18 02 F6 | 	mov	arg04, result3
143c4     FD 1E 02 F6 | 	mov	local01, result1
143c8     0D 21 02 F6 | 	mov	local02, arg05
143cc     0C 23 02 F6 | 	mov	local03, arg04
143d0                 | ' 
143d0                 | ' t1=pop() 
143d0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
143d0     2B 22 0E F2 | 	cmp	local03, #43 wz
143d4     10 00 90 5D |  if_ne	jmp	#LR__1590
143d8     0F 13 02 F6 | 	mov	arg01, local01
143dc     40 86 BF FD | 	call	#_convertstring
143e0     FD 1E 02 F6 | 	mov	local01, result1
143e4     1F 22 06 F6 | 	mov	local03, #31
143e8                 | LR__1590
143e8                 | ' if t1.result_type=result_string then
143e8     1F 22 0E F2 | 	cmp	local03, #31 wz
143ec     EC 01 90 5D |  if_ne	jmp	#LR__1594
143f0     0F 25 02 F6 | 	mov	local04, local01
143f4                 | '   filename=t1.result.sresult
143f4                 | '   if left$(filename,1)="/" then 
143f4     12 13 02 F6 | 	mov	arg01, local04
143f8     01 14 06 F6 | 	mov	arg02, #1
143fc     E8 69 B0 FD | 	call	#__system__Left_S
14400     FD 12 02 F6 | 	mov	arg01, result1
14404     44 01 00 FF 
14408     29 15 06 F6 | 	mov	arg02, ##@LR__4607
1440c     F0 49 B0 FD | 	call	#__system___string_cmp
14410     00 FA 0D F2 | 	cmp	result1, #0 wz
14414     12 27 02 A6 |  if_e	mov	local05, local04
14418     14 00 90 AD |  if_e	jmp	#LR__1591
1441c     44 01 00 FF 
14420     2B 13 06 F6 | 	mov	arg01, ##@LR__4608
14424     12 15 02 F6 | 	mov	arg02, local04
14428     08 4A B0 FD | 	call	#__system___string_concat
1442c     FD 26 02 F6 | 	mov	local05, result1
14430                 | LR__1591
14430                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
14430                 | '   open fullfilename for input as #9
14430     09 12 06 F6 | 	mov	arg01, #9
14434     13 15 02 F6 | 	mov	arg02, local05
14438     00 16 06 F6 | 	mov	arg03, #0
1443c     9C 55 B0 FD | 	call	#__system___basic_open_string
14440     20 E8 05 F1 | 	add	ptr___system__dat__, #32
14444     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
14448     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1444c     FD 28 0A F6 | 	mov	local06, result1 wz
14450                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
14450     8C 00 90 AD |  if_e	jmp	#LR__1592
14454     00 12 06 F6 | 	mov	arg01, #0
14458     80 A2 B0 FD | 	call	#__system___getiolock_0423
1445c     FD 12 02 F6 | 	mov	arg01, result1
14460     74 49 B0 FD | 	call	#__system___lockmem
14464     44 01 00 FF 
14468     34 15 06 F6 | 	mov	arg02, ##@LR__4609
1446c     00 12 06 F6 | 	mov	arg01, #0
14470     00 16 06 F6 | 	mov	arg03, #0
14474     54 56 B0 FD | 	call	#__system___basic_print_string
14478     00 12 06 F6 | 	mov	arg01, #0
1447c     14 15 02 F6 | 	mov	arg02, local06
14480     00 16 06 F6 | 	mov	arg03, #0
14484     0A 18 06 F6 | 	mov	arg04, #10
14488     84 56 B0 FD | 	call	#__system___basic_print_integer
1448c     44 01 00 FF 
14490     42 15 06 F6 | 	mov	arg02, ##@LR__4610
14494     00 12 06 F6 | 	mov	arg01, #0
14498     00 16 06 F6 | 	mov	arg03, #0
1449c     2C 56 B0 FD | 	call	#__system___basic_print_string
144a0     14 13 02 F6 | 	mov	arg01, local06
144a4     30 6F B0 FD | 	call	#__system___strerror
144a8     FD 14 02 F6 | 	mov	arg02, result1
144ac     00 12 06 F6 | 	mov	arg01, #0
144b0     00 16 06 F6 | 	mov	arg03, #0
144b4     14 56 B0 FD | 	call	#__system___basic_print_string
144b8     00 12 06 F6 | 	mov	arg01, #0
144bc     0A 14 06 F6 | 	mov	arg02, #10
144c0     00 16 06 F6 | 	mov	arg03, #0
144c4     AC 55 B0 FD | 	call	#__system___basic_print_char
144c8     00 12 06 F6 | 	mov	arg01, #0
144cc     0C A2 B0 FD | 	call	#__system___getiolock_0423
144d0     FD 00 68 FC | 	wrlong	#0, result1
144d4     09 12 06 F6 | 	mov	arg01, #9
144d8     30 98 B0 FD | 	call	#__system__close
144dc     FC 00 90 FD | 	jmp	#LR__1595
144e0                 | LR__1592
144e0     01 2A 06 F6 | 	mov	local07, #1
144e4     00 2C 06 F6 | 	mov	local08, #0
144e8                 | '   do
144e8                 | LR__1593
144e8                 | '     get #9,pos,block(0),1024,r : pos+=r	
144e8     77 00 00 FF 
144ec     80 E4 05 F1 | 	add	objptr, ##61056
144f0     F2 16 02 F6 | 	mov	arg03, objptr
144f4     77 00 00 FF 
144f8     80 E4 85 F1 | 	sub	objptr, ##61056
144fc     09 12 06 F6 | 	mov	arg01, #9
14500     15 15 02 F6 | 	mov	arg02, local07
14504     0A 18 C6 F9 | 	decod	arg04, #10
14508     01 1A 06 F6 | 	mov	arg05, #1
1450c     CC 56 B0 FD | 	call	#__system___basic_get
14510     FD 28 02 F6 | 	mov	local06, result1
14514     FD 2A 02 F1 | 	add	local07, result1
14518     77 00 00 FF 
1451c     80 E4 05 F1 | 	add	objptr, ##61056
14520     F2 12 02 F6 | 	mov	arg01, objptr
14524     16 15 02 F6 | 	mov	arg02, local08
14528     0A 16 C6 F9 | 	decod	arg03, #10
1452c     6B 00 00 FF 
14530     C0 E5 85 F1 | 	sub	objptr, ##55232
14534     EC 3D B0 FD | 	call	#_psram_spin2_write
14538     0B 00 00 FF 
1453c     C0 E4 85 F1 | 	sub	objptr, ##5824
14540     14 2D 02 F1 | 	add	local08, local06
14544     02 00 00 FF 
14548     00 28 0E F2 | 	cmp	local06, ##1024 wz
1454c     E0 03 00 AF 
14550     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
14554     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1593
14558     56 00 00 FF 
1455c     D0 E4 05 F1 | 	add	objptr, ##44240
14560     F2 12 02 FB | 	rdlong	arg01, objptr
14564     03 12 62 FD | 	cogstop	arg01
14568     04 E4 05 F1 | 	add	objptr, #4
1456c     F2 12 02 FB | 	rdlong	arg01, objptr
14570     03 12 62 FD | 	cogstop	arg01
14574     04 E4 05 F1 | 	add	objptr, #4
14578     F2 12 02 FB | 	rdlong	arg01, objptr
1457c     03 12 62 FD | 	cogstop	arg01
14580     22 00 00 FF 
14584     E0 E5 05 F1 | 	add	objptr, ##17888
14588     F2 12 02 FB | 	rdlong	arg01, objptr
1458c     03 12 62 FD | 	cogstop	arg01
14590     10 00 00 FF 
14594     9C EA 05 F1 | 	add	ptr__dat__, ##8348
14598     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1459c     10 00 00 FF 
145a0     9C EA 85 F1 | 	sub	ptr__dat__, ##8348
145a4     22 00 00 FF 
145a8     D8 E5 85 F1 | 	sub	objptr, ##17880
145ac     1E 2C 06 F6 | 	mov	local08, #30
145b0     28 E4 61 FD | 	setq	objptr
145b4     0A 2D F2 FC | 	coginit	local08, arg02 wc
145b8     01 2C 66 C6 |  if_b	neg	local08, #1
145bc     24 00 00 FF 
145c0     FC E4 05 F1 | 	add	objptr, ##18684
145c4     F2 2C 62 FC | 	wrlong	local08, objptr
145c8     7A 00 00 FF 
145cc     DC E5 85 F1 | 	sub	objptr, ##62940
145d0     00 12 06 F6 | 	mov	arg01, #0
145d4     01 12 62 FD | 	cogid	arg01
145d8     03 12 62 FD | 	cogstop	arg01
145dc                 | LR__1594
145dc                 | LR__1595
145dc     A7 F0 03 F6 | 	mov	ptra, fp
145e0     B2 00 A0 FD | 	call	#popregs_
145e4                 | _do_brun_ret
145e4     2D 00 64 FD | 	ret
145e8                 | 
145e8                 | ' 
145e8                 | ' 
145e8                 | ' sub do_mouse
145e8                 | _do_mouse
145e8     F8 52 BF FD | 	call	#_pop
145ec     00 FA 4D F2 | 	cmps	result1, #0 wz
145f0                 | ' 
145f0                 | ' t1=pop()
145f0                 | ' 
145f0                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
145f0     14 00 90 5D |  if_ne	jmp	#LR__1600
145f4     10 12 06 F6 | 	mov	arg01, #16
145f8     00 14 06 F6 | 	mov	arg02, #0
145fc     00 16 06 F6 | 	mov	arg03, #0
14600     D8 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14604     10 00 90 FD | 	jmp	#LR__1601
14608                 | LR__1600
14608     10 12 06 F6 | 	mov	arg01, #16
1460c     20 14 06 F6 | 	mov	arg02, #32
14610     20 16 06 F6 | 	mov	arg03, #32
14614     C4 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14618                 | LR__1601
14618                 | _do_mouse_ret
14618     2D 00 64 FD | 	ret
1461c                 | 
1461c                 | ' 
1461c                 | ' sub do_cursor
1461c                 | _do_cursor
1461c     C4 52 BF FD | 	call	#_pop
14620     00 FA 4D F2 | 	cmps	result1, #0 wz
14624                 | ' 
14624                 | ' t1=pop()
14624                 | ' 
14624                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
14624     14 00 90 5D |  if_ne	jmp	#LR__1610
14628     11 12 06 F6 | 	mov	arg01, #17
1462c     00 14 06 F6 | 	mov	arg02, #0
14630     00 16 06 F6 | 	mov	arg03, #0
14634     A4 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14638     10 00 90 FD | 	jmp	#LR__1611
1463c                 | LR__1610
1463c     11 12 06 F6 | 	mov	arg01, #17
14640     08 14 06 F6 | 	mov	arg02, #8
14644     10 16 06 F6 | 	mov	arg03, #16
14648     90 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
1464c                 | LR__1611
1464c                 | _do_cursor_ret
1464c     2D 00 64 FD | 	ret
14650                 | 
14650                 | ' 
14650                 | ' 
14650                 | ' sub do_click
14650                 | _do_click
14650     90 52 BF FD | 	call	#_pop
14654     00 FA 4D F2 | 	cmps	result1, #0 wz
14658                 | ' 
14658                 | ' t1=pop()
14658                 | ' 
14658                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
14658     79 00 00 AF 
1465c     B4 E4 05 A1 |  if_e	add	objptr, ##62132
14660     F2 00 68 AC |  if_e	wrlong	#0, objptr
14664     79 00 00 FF 
14668     B4 E4 C5 F3 | 	sumz	objptr, ##62132
1466c     F2 02 68 5C |  if_ne	wrlong	#1, objptr
14670     79 00 00 5F 
14674     B4 E4 85 51 |  if_ne	sub	objptr, ##62132
14678                 | _do_click_ret
14678     2D 00 64 FD | 	ret
1467c                 | 
1467c                 | ' 
1467c                 | ' 
1467c                 | ' sub do_beep
1467c                 | _do_beep
1467c     02 4A 05 F6 | 	mov	COUNT_, #2
14680     A8 00 A0 FD | 	call	#pushregs_
14684     20 F0 07 F1 | 	add	ptra, #32
14688     58 52 BF FD | 	call	#_pop
1468c     FD 1E 02 F6 | 	mov	local01, result1
14690     FE 1C 02 F6 | 	mov	arg06, result2
14694     FF 20 02 F6 | 	mov	local02, result3
14698     0C 4E 05 F1 | 	add	fp, #12
1469c     A7 1E 62 FC | 	wrlong	local01, fp
146a0     04 4E 05 F1 | 	add	fp, #4
146a4     A7 1C 62 FC | 	wrlong	arg06, fp
146a8     04 4E 05 F1 | 	add	fp, #4
146ac     A7 20 62 FC | 	wrlong	local02, fp
146b0     14 4E 85 F1 | 	sub	fp, #20
146b4     2C 52 BF FD | 	call	#_pop
146b8     A7 FA 61 FC | 	wrlong	result1, fp
146bc     04 4E 05 F1 | 	add	fp, #4
146c0     A7 FC 61 FC | 	wrlong	result2, fp
146c4     04 4E 05 F1 | 	add	fp, #4
146c8     A7 FE 61 FC | 	wrlong	result3, fp
146cc                 | ' 
146cc                 | ' 
146cc                 | ' 
146cc                 | ' t2=pop()
146cc                 | ' t1=pop()
146cc                 | ' 
146cc                 | ' 
146cc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
146cc     08 4E 85 F1 | 	sub	fp, #8
146d0     1C FE 0D F2 | 	cmp	result3, #28 wz
146d4     08 4E 05 51 |  if_ne	add	fp, #8
146d8     A7 20 02 5B |  if_ne	rdlong	local02, fp
146dc     08 4E 85 51 |  if_ne	sub	fp, #8
146e0     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
146e4     A7 1E 02 AB |  if_e	rdlong	local01, fp
146e8     18 4E 05 A1 |  if_e	add	fp, #24
146ec     A7 1E 62 AC |  if_e	wrlong	local01, fp
146f0     18 4E 85 A1 |  if_e	sub	fp, #24
146f4     14 00 90 AD |  if_e	jmp	#LR__1620
146f8     A7 12 02 F6 | 	mov	arg01, fp
146fc     54 C7 BF FD | 	call	#_converttoint
14700     18 4E 05 F1 | 	add	fp, #24
14704     A7 FA 61 FC | 	wrlong	result1, fp
14708     18 4E 85 F1 | 	sub	fp, #24
1470c                 | LR__1620
1470c     1C 4E 05 F1 | 	add	fp, #28
14710     A7 FE 48 FC | 	wrbyte	#127, fp
14714     01 4E 05 F1 | 	add	fp, #1
14718     A7 00 49 FC | 	wrbyte	#128, fp
1471c     01 4E 85 F1 | 	sub	fp, #1
14720     A7 14 02 F6 | 	mov	arg02, fp
14724     04 4E 85 F1 | 	sub	fp, #4
14728     A7 16 02 FB | 	rdlong	arg03, fp
1472c     18 4E 85 F1 | 	sub	fp, #24
14730     01 16 66 F0 | 	shl	arg03, #1
14734     07 12 06 F6 | 	mov	arg01, #7
14738     0E 18 C6 F9 | 	decod	arg04, #14
1473c     02 1A 06 F6 | 	mov	arg05, #2
14740     00 1C 06 F6 | 	mov	arg06, #0
14744     0B 00 00 FF 
14748     C0 E4 05 F1 | 	add	objptr, ##5824
1474c     EC 42 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
14750     0B 00 00 FF 
14754     C0 E4 85 F1 | 	sub	objptr, ##5824
14758     0C 4E 05 F1 | 	add	fp, #12
1475c     A7 12 02 F6 | 	mov	arg01, fp
14760     0C 4E 85 F1 | 	sub	fp, #12
14764     14 52 BF FD | 	call	#_push
14768     58 F6 BF FD | 	call	#_do_waitms
1476c     07 12 06 F6 | 	mov	arg01, #7
14770     0B 00 00 FF 
14774     C0 E4 05 F1 | 	add	objptr, ##5824
14778     74 43 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
1477c     0B 00 00 FF 
14780     C0 E4 85 F1 | 	sub	objptr, ##5824
14784     A7 F0 03 F6 | 	mov	ptra, fp
14788     B2 00 A0 FD | 	call	#popregs_
1478c                 | _do_beep_ret
1478c     2D 00 64 FD | 	ret
14790                 | 
14790                 | ' 
14790                 | ' sub do_no_command
14790                 | _do_no_command
14790     17 12 06 F6 | 	mov	arg01, #23
14794     BC 10 B0 FD | 	call	#_printerror
14798                 | _do_no_command_ret
14798     2D 00 64 FD | 	ret
1479c                 | 
1479c                 | ' 
1479c                 | ' sub do_negative
1479c                 | _do_negative
1479c     02 4A 05 F6 | 	mov	COUNT_, #2
147a0     A8 00 A0 FD | 	call	#pushregs_
147a4     0C F0 07 F1 | 	add	ptra, #12
147a8     38 51 BF FD | 	call	#_pop
147ac     FF 1E 02 F6 | 	mov	local01, result3
147b0     A7 FA 61 FC | 	wrlong	result1, fp
147b4     04 4E 05 F1 | 	add	fp, #4
147b8     A7 FC 61 FC | 	wrlong	result2, fp
147bc     04 4E 05 F1 | 	add	fp, #4
147c0     A7 1E 62 FC | 	wrlong	local01, fp
147c4                 | ' t1=pop()
147c4                 | ' if t1.result_type=result_int then 
147c4     08 4E 85 F1 | 	sub	fp, #8
147c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
147cc     A7 20 02 AB |  if_e	rdlong	local02, fp
147d0     10 1F 62 A6 |  if_e	neg	local01, local02
147d4     A7 1E 62 AC |  if_e	wrlong	local01, fp
147d8     5C 00 90 AD |  if_e	jmp	#LR__1632
147dc     08 4E 05 F1 | 	add	fp, #8
147e0     A7 1E 02 FB | 	rdlong	local01, fp
147e4     08 4E 85 F1 | 	sub	fp, #8
147e8     1D 1E 0E F2 | 	cmp	local01, #29 wz
147ec     1C 00 90 5D |  if_ne	jmp	#LR__1630
147f0     A7 20 02 FB | 	rdlong	local02, fp
147f4     10 1F 62 F6 | 	neg	local01, local02
147f8     A7 1E 62 FC | 	wrlong	local01, fp
147fc     08 4E 05 F1 | 	add	fp, #8
14800     A7 38 68 FC | 	wrlong	#28, fp
14804     08 4E 85 F1 | 	sub	fp, #8
14808     2C 00 90 FD | 	jmp	#LR__1631
1480c                 | LR__1630
1480c     08 4E 05 F1 | 	add	fp, #8
14810     A7 1E 02 FB | 	rdlong	local01, fp
14814     08 4E 85 F1 | 	sub	fp, #8
14818     1E 1E 0E F2 | 	cmp	local01, #30 wz
1481c     A7 FA 01 AB |  if_e	rdlong	result1, fp
14820     1F FA E5 A4 |  if_e	bitnot	result1, #31
14824     A7 FA 61 AC |  if_e	wrlong	result1, fp
14828     08 4E 05 51 |  if_ne	add	fp, #8
1482c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
14830     08 4E 85 51 |  if_ne	sub	fp, #8
14834     A7 50 68 5C |  if_ne	wrlong	#40, fp
14838                 | LR__1631
14838                 | LR__1632
14838     A7 12 02 F6 | 	mov	arg01, fp
1483c     3C 51 BF FD | 	call	#_push
14840     A7 F0 03 F6 | 	mov	ptra, fp
14844     B2 00 A0 FD | 	call	#popregs_
14848                 | _do_negative_ret
14848     2D 00 64 FD | 	ret
1484c                 | 
1484c                 | ' 
1484c                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1484c                 | ' 
1484c                 | ' ''----------------------------------------------------------------------------------------------------
1484c                 | ' ''------------------ Initialization procedures -------------------------------------------------------
1484c                 | ' ''----------------------------------------------------------------------------------------------------
1484c                 | ' 
1484c                 | ' ''--------------------------- Command function pointers
1484c                 | ' 
1484c                 | ' sub init_commands
1484c                 | _init_commands
1484c                 | ' 
1484c                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1484c     00 00 06 F6 | 	mov	_var01, #0
14850     97 16 48 FB | 	callpa	#(@LR__1641-@LR__1640)>>2,fcache_load_ptr_
14854                 | LR__1640
14854     00 FB 01 F6 | 	mov	result1, _var01
14858     02 FA 65 F0 | 	shl	result1, #2
1485c     62 00 00 FF 
14860     34 E5 05 F1 | 	add	objptr, ##50484
14864     F2 FA 01 F1 | 	add	result1, objptr
14868     62 00 00 FF 
1486c     34 E5 85 F1 | 	sub	objptr, ##50484
14870     FD E4 61 FC | 	wrlong	objptr, result1
14874     01 00 06 F1 | 	add	_var01, #1
14878     00 01 56 F2 | 	cmps	_var01, #256 wc
1487c     D4 FF 9F CD |  if_b	jmp	#LR__1640
14880                 | LR__1641
14880     F2 FA 01 F6 | 	mov	result1, objptr
14884     14 FA 25 F4 | 	bith	result1, #20
14888     62 00 00 FF 
1488c     38 E5 05 F1 | 	add	objptr, ##50488
14890     F2 FA 61 FC | 	wrlong	result1, objptr
14894     62 00 00 FF 
14898     38 E5 85 F1 | 	sub	objptr, ##50488
1489c     F2 FA 01 F6 | 	mov	result1, objptr
148a0     15 FA 25 F4 | 	bith	result1, #21
148a4     62 00 00 FF 
148a8     3C E5 05 F1 | 	add	objptr, ##50492
148ac     F2 FA 61 FC | 	wrlong	result1, objptr
148b0     62 00 00 FF 
148b4     3C E5 85 F1 | 	sub	objptr, ##50492
148b8     F2 FA 01 F6 | 	mov	result1, objptr
148bc     34 FA 25 F4 | 	bith	result1, #52
148c0     62 00 00 FF 
148c4     40 E5 05 F1 | 	add	objptr, ##50496
148c8     F2 FA 61 FC | 	wrlong	result1, objptr
148cc     62 00 00 FF 
148d0     40 E5 85 F1 | 	sub	objptr, ##50496
148d4     F2 FA 01 F6 | 	mov	result1, objptr
148d8     16 FA 25 F4 | 	bith	result1, #22
148dc     62 00 00 FF 
148e0     48 E5 05 F1 | 	add	objptr, ##50504
148e4     F2 FA 61 FC | 	wrlong	result1, objptr
148e8     62 00 00 FF 
148ec     48 E5 85 F1 | 	sub	objptr, ##50504
148f0     F2 FA 01 F6 | 	mov	result1, objptr
148f4     00 28 00 FF 
148f8     00 FA 45 F5 | 	or	result1, ##5242880
148fc     62 00 00 FF 
14900     4C E5 05 F1 | 	add	objptr, ##50508
14904     F2 FA 61 FC | 	wrlong	result1, objptr
14908     62 00 00 FF 
1490c     4C E5 85 F1 | 	sub	objptr, ##50508
14910     F2 FA 01 F6 | 	mov	result1, objptr
14914     35 FA 25 F4 | 	bith	result1, #53
14918     62 00 00 FF 
1491c     50 E5 05 F1 | 	add	objptr, ##50512
14920     F2 FA 61 FC | 	wrlong	result1, objptr
14924     62 00 00 FF 
14928     50 E5 85 F1 | 	sub	objptr, ##50512
1492c     F2 FA 01 F6 | 	mov	result1, objptr
14930     54 FA 25 F4 | 	bith	result1, #84
14934     62 00 00 FF 
14938     54 E5 05 F1 | 	add	objptr, ##50516
1493c     F2 FA 61 FC | 	wrlong	result1, objptr
14940     62 00 00 FF 
14944     54 E5 85 F1 | 	sub	objptr, ##50516
14948     F2 FA 01 F6 | 	mov	result1, objptr
1494c     17 FA 25 F4 | 	bith	result1, #23
14950     62 00 00 FF 
14954     58 E5 05 F1 | 	add	objptr, ##50520
14958     F2 FA 61 FC | 	wrlong	result1, objptr
1495c     62 00 00 FF 
14960     58 E5 85 F1 | 	sub	objptr, ##50520
14964     F2 FA 01 F6 | 	mov	result1, objptr
14968     00 48 00 FF 
1496c     00 FA 45 F5 | 	or	result1, ##9437184
14970     62 00 00 FF 
14974     5C E5 05 F1 | 	add	objptr, ##50524
14978     F2 FA 61 FC | 	wrlong	result1, objptr
1497c     62 00 00 FF 
14980     5C E5 85 F1 | 	sub	objptr, ##50524
14984     F2 FA 01 F6 | 	mov	result1, objptr
14988     00 50 00 FF 
1498c     00 FA 45 F5 | 	or	result1, ##10485760
14990     62 00 00 FF 
14994     60 E5 05 F1 | 	add	objptr, ##50528
14998     F2 FA 61 FC | 	wrlong	result1, objptr
1499c     62 00 00 FF 
149a0     60 E5 85 F1 | 	sub	objptr, ##50528
149a4     F2 FA 01 F6 | 	mov	result1, objptr
149a8     00 58 00 FF 
149ac     00 FA 45 F5 | 	or	result1, ##11534336
149b0     62 00 00 FF 
149b4     64 E5 05 F1 | 	add	objptr, ##50532
149b8     F2 FA 61 FC | 	wrlong	result1, objptr
149bc     62 00 00 FF 
149c0     64 E5 85 F1 | 	sub	objptr, ##50532
149c4     F2 FA 01 F6 | 	mov	result1, objptr
149c8     36 FA 25 F4 | 	bith	result1, #54
149cc     62 00 00 FF 
149d0     78 E5 05 F1 | 	add	objptr, ##50552
149d4     F2 FA 61 FC | 	wrlong	result1, objptr
149d8     62 00 00 FF 
149dc     78 E5 85 F1 | 	sub	objptr, ##50552
149e0     F2 FA 01 F6 | 	mov	result1, objptr
149e4     00 68 00 FF 
149e8     00 FA 45 F5 | 	or	result1, ##13631488
149ec     62 00 00 FF 
149f0     A8 E5 05 F1 | 	add	objptr, ##50600
149f4     F2 FA 61 FC | 	wrlong	result1, objptr
149f8     62 00 00 FF 
149fc     A8 E5 85 F1 | 	sub	objptr, ##50600
14a00     F2 FA 01 F6 | 	mov	result1, objptr
14a04     00 68 00 FF 
14a08     00 FA 45 F5 | 	or	result1, ##13631488
14a0c     62 00 00 FF 
14a10     A4 E5 05 F1 | 	add	objptr, ##50596
14a14     F2 FA 61 FC | 	wrlong	result1, objptr
14a18     62 00 00 FF 
14a1c     A4 E5 85 F1 | 	sub	objptr, ##50596
14a20     F2 FA 01 F6 | 	mov	result1, objptr
14a24     00 68 00 FF 
14a28     00 FA 45 F5 | 	or	result1, ##13631488
14a2c     62 00 00 FF 
14a30     AC E5 05 F1 | 	add	objptr, ##50604
14a34     F2 FA 61 FC | 	wrlong	result1, objptr
14a38     62 00 00 FF 
14a3c     AC E5 85 F1 | 	sub	objptr, ##50604
14a40     F2 FA 01 F6 | 	mov	result1, objptr
14a44     00 68 00 FF 
14a48     00 FA 45 F5 | 	or	result1, ##13631488
14a4c     62 00 00 FF 
14a50     B0 E5 05 F1 | 	add	objptr, ##50608
14a54     F2 FA 61 FC | 	wrlong	result1, objptr
14a58     62 00 00 FF 
14a5c     B0 E5 85 F1 | 	sub	objptr, ##50608
14a60     F2 FA 01 F6 | 	mov	result1, objptr
14a64     00 68 00 FF 
14a68     00 FA 45 F5 | 	or	result1, ##13631488
14a6c     62 00 00 FF 
14a70     E0 E5 05 F1 | 	add	objptr, ##50656
14a74     F2 FA 61 FC | 	wrlong	result1, objptr
14a78     62 00 00 FF 
14a7c     E0 E5 85 F1 | 	sub	objptr, ##50656
14a80     F2 FA 01 F6 | 	mov	result1, objptr
14a84     55 FA 25 F4 | 	bith	result1, #85
14a88     62 00 00 FF 
14a8c     90 E5 05 F1 | 	add	objptr, ##50576
14a90     F2 FA 61 FC | 	wrlong	result1, objptr
14a94     62 00 00 FF 
14a98     90 E5 85 F1 | 	sub	objptr, ##50576
14a9c     F2 FA 01 F6 | 	mov	result1, objptr
14aa0     00 68 00 FF 
14aa4     00 FA 45 F5 | 	or	result1, ##13631488
14aa8     62 00 00 FF 
14aac     B4 E5 05 F1 | 	add	objptr, ##50612
14ab0     F2 FA 61 FC | 	wrlong	result1, objptr
14ab4     62 00 00 FF 
14ab8     B4 E5 85 F1 | 	sub	objptr, ##50612
14abc     F2 FA 01 F6 | 	mov	result1, objptr
14ac0     00 68 00 FF 
14ac4     00 FA 45 F5 | 	or	result1, ##13631488
14ac8     62 00 00 FF 
14acc     B8 E5 05 F1 | 	add	objptr, ##50616
14ad0     F2 FA 61 FC | 	wrlong	result1, objptr
14ad4     62 00 00 FF 
14ad8     B8 E5 85 F1 | 	sub	objptr, ##50616
14adc     F2 FA 01 F6 | 	mov	result1, objptr
14ae0     00 68 00 FF 
14ae4     00 FA 45 F5 | 	or	result1, ##13631488
14ae8     62 00 00 FF 
14aec     BC E5 05 F1 | 	add	objptr, ##50620
14af0     F2 FA 61 FC | 	wrlong	result1, objptr
14af4     62 00 00 FF 
14af8     BC E5 85 F1 | 	sub	objptr, ##50620
14afc     F2 FA 01 F6 | 	mov	result1, objptr
14b00     74 FA 25 F4 | 	bith	result1, #116
14b04     63 00 00 FF 
14b08     34 E4 05 F1 | 	add	objptr, ##50740
14b0c     F2 FA 61 FC | 	wrlong	result1, objptr
14b10     63 00 00 FF 
14b14     34 E4 85 F1 | 	sub	objptr, ##50740
14b18     F2 FA 01 F6 | 	mov	result1, objptr
14b1c     18 FA 25 F4 | 	bith	result1, #24
14b20     63 00 00 FF 
14b24     38 E4 05 F1 | 	add	objptr, ##50744
14b28     F2 FA 61 FC | 	wrlong	result1, objptr
14b2c     63 00 00 FF 
14b30     38 E4 85 F1 | 	sub	objptr, ##50744
14b34     F2 FA 01 F6 | 	mov	result1, objptr
14b38     00 88 00 FF 
14b3c     00 FA 45 F5 | 	or	result1, ##17825792
14b40     63 00 00 FF 
14b44     3C E4 05 F1 | 	add	objptr, ##50748
14b48     F2 FA 61 FC | 	wrlong	result1, objptr
14b4c     63 00 00 FF 
14b50     3C E4 85 F1 | 	sub	objptr, ##50748
14b54     F2 FA 01 F6 | 	mov	result1, objptr
14b58     00 90 00 FF 
14b5c     00 FA 45 F5 | 	or	result1, ##18874368
14b60     63 00 00 FF 
14b64     40 E4 05 F1 | 	add	objptr, ##50752
14b68     F2 FA 61 FC | 	wrlong	result1, objptr
14b6c     63 00 00 FF 
14b70     40 E4 85 F1 | 	sub	objptr, ##50752
14b74     F2 FA 01 F6 | 	mov	result1, objptr
14b78     00 98 00 FF 
14b7c     00 FA 45 F5 | 	or	result1, ##19922944
14b80     63 00 00 FF 
14b84     44 E4 05 F1 | 	add	objptr, ##50756
14b88     F2 FA 61 FC | 	wrlong	result1, objptr
14b8c     63 00 00 FF 
14b90     44 E4 85 F1 | 	sub	objptr, ##50756
14b94     F2 FA 01 F6 | 	mov	result1, objptr
14b98     00 A0 00 FF 
14b9c     00 FA 45 F5 | 	or	result1, ##20971520
14ba0     63 00 00 FF 
14ba4     48 E4 05 F1 | 	add	objptr, ##50760
14ba8     F2 FA 61 FC | 	wrlong	result1, objptr
14bac     63 00 00 FF 
14bb0     48 E4 85 F1 | 	sub	objptr, ##50760
14bb4     F2 FA 01 F6 | 	mov	result1, objptr
14bb8     00 A8 00 FF 
14bbc     00 FA 45 F5 | 	or	result1, ##22020096
14bc0     63 00 00 FF 
14bc4     4C E4 05 F1 | 	add	objptr, ##50764
14bc8     F2 FA 61 FC | 	wrlong	result1, objptr
14bcc     63 00 00 FF 
14bd0     4C E4 85 F1 | 	sub	objptr, ##50764
14bd4     F2 FA 01 F6 | 	mov	result1, objptr
14bd8     00 B0 00 FF 
14bdc     00 FA 45 F5 | 	or	result1, ##23068672
14be0     63 00 00 FF 
14be4     50 E4 05 F1 | 	add	objptr, ##50768
14be8     F2 FA 61 FC | 	wrlong	result1, objptr
14bec     63 00 00 FF 
14bf0     50 E4 85 F1 | 	sub	objptr, ##50768
14bf4     F2 FA 01 F6 | 	mov	result1, objptr
14bf8     00 B8 00 FF 
14bfc     00 FA 45 F5 | 	or	result1, ##24117248
14c00     63 00 00 FF 
14c04     54 E4 05 F1 | 	add	objptr, ##50772
14c08     F2 FA 61 FC | 	wrlong	result1, objptr
14c0c     63 00 00 FF 
14c10     54 E4 85 F1 | 	sub	objptr, ##50772
14c14     F2 FA 01 F6 | 	mov	result1, objptr
14c18     37 FA 25 F4 | 	bith	result1, #55
14c1c     63 00 00 FF 
14c20     58 E4 05 F1 | 	add	objptr, ##50776
14c24     F2 FA 61 FC | 	wrlong	result1, objptr
14c28     63 00 00 FF 
14c2c     58 E4 85 F1 | 	sub	objptr, ##50776
14c30     F2 FA 01 F6 | 	mov	result1, objptr
14c34     00 C8 00 FF 
14c38     00 FA 45 F5 | 	or	result1, ##26214400
14c3c     63 00 00 FF 
14c40     5C E4 05 F1 | 	add	objptr, ##50780
14c44     F2 FA 61 FC | 	wrlong	result1, objptr
14c48     63 00 00 FF 
14c4c     5C E4 85 F1 | 	sub	objptr, ##50780
14c50     F2 FA 01 F6 | 	mov	result1, objptr
14c54     00 D0 00 FF 
14c58     00 FA 45 F5 | 	or	result1, ##27262976
14c5c     63 00 00 FF 
14c60     60 E4 05 F1 | 	add	objptr, ##50784
14c64     F2 FA 61 FC | 	wrlong	result1, objptr
14c68     63 00 00 FF 
14c6c     60 E4 85 F1 | 	sub	objptr, ##50784
14c70     F2 FA 01 F6 | 	mov	result1, objptr
14c74     00 D8 00 FF 
14c78     00 FA 45 F5 | 	or	result1, ##28311552
14c7c     63 00 00 FF 
14c80     64 E4 05 F1 | 	add	objptr, ##50788
14c84     F2 FA 61 FC | 	wrlong	result1, objptr
14c88     63 00 00 FF 
14c8c     64 E4 85 F1 | 	sub	objptr, ##50788
14c90     F2 FA 01 F6 | 	mov	result1, objptr
14c94     56 FA 25 F4 | 	bith	result1, #86
14c98     63 00 00 FF 
14c9c     68 E4 05 F1 | 	add	objptr, ##50792
14ca0     F2 FA 61 FC | 	wrlong	result1, objptr
14ca4     63 00 00 FF 
14ca8     68 E4 85 F1 | 	sub	objptr, ##50792
14cac     F2 FA 01 F6 | 	mov	result1, objptr
14cb0     00 E8 00 FF 
14cb4     00 FA 45 F5 | 	or	result1, ##30408704
14cb8     64 00 00 FF 
14cbc     30 E5 05 F1 | 	add	objptr, ##51504
14cc0     F2 FA 61 FC | 	wrlong	result1, objptr
14cc4     64 00 00 FF 
14cc8     30 E5 85 F1 | 	sub	objptr, ##51504
14ccc     F2 FA 01 F6 | 	mov	result1, objptr
14cd0     75 FA 25 F4 | 	bith	result1, #117
14cd4     63 00 00 FF 
14cd8     6C E4 05 F1 | 	add	objptr, ##50796
14cdc     F2 FA 61 FC | 	wrlong	result1, objptr
14ce0     63 00 00 FF 
14ce4     6C E4 85 F1 | 	sub	objptr, ##50796
14ce8     F2 FA 01 F6 | 	mov	result1, objptr
14cec     94 FA 25 F4 | 	bith	result1, #148
14cf0     63 00 00 FF 
14cf4     80 E4 05 F1 | 	add	objptr, ##50816
14cf8     F2 FA 61 FC | 	wrlong	result1, objptr
14cfc     63 00 00 FF 
14d00     80 E4 85 F1 | 	sub	objptr, ##50816
14d04     F2 FA 01 F6 | 	mov	result1, objptr
14d08     19 FA 25 F4 | 	bith	result1, #25
14d0c     63 00 00 FF 
14d10     70 E4 05 F1 | 	add	objptr, ##50800
14d14     F2 FA 61 FC | 	wrlong	result1, objptr
14d18     63 00 00 FF 
14d1c     70 E4 85 F1 | 	sub	objptr, ##50800
14d20     F2 FA 01 F6 | 	mov	result1, objptr
14d24     00 08 01 FF 
14d28     00 FA 45 F5 | 	or	result1, ##34603008
14d2c     62 00 00 FF 
14d30     8C E5 05 F1 | 	add	objptr, ##50572
14d34     F2 FA 61 FC | 	wrlong	result1, objptr
14d38     62 00 00 FF 
14d3c     8C E5 85 F1 | 	sub	objptr, ##50572
14d40     F2 FA 01 F6 | 	mov	result1, objptr
14d44     00 10 01 FF 
14d48     00 FA 45 F5 | 	or	result1, ##35651584
14d4c     63 00 00 FF 
14d50     74 E4 05 F1 | 	add	objptr, ##50804
14d54     F2 FA 61 FC | 	wrlong	result1, objptr
14d58     63 00 00 FF 
14d5c     74 E4 85 F1 | 	sub	objptr, ##50804
14d60     F2 FA 01 F6 | 	mov	result1, objptr
14d64     00 18 01 FF 
14d68     00 FA 45 F5 | 	or	result1, ##36700160
14d6c     63 00 00 FF 
14d70     78 E4 05 F1 | 	add	objptr, ##50808
14d74     F2 FA 61 FC | 	wrlong	result1, objptr
14d78     63 00 00 FF 
14d7c     78 E4 85 F1 | 	sub	objptr, ##50808
14d80     F2 FA 01 F6 | 	mov	result1, objptr
14d84     00 20 01 FF 
14d88     00 FA 45 F5 | 	or	result1, ##37748736
14d8c     63 00 00 FF 
14d90     7C E4 05 F1 | 	add	objptr, ##50812
14d94     F2 FA 61 FC | 	wrlong	result1, objptr
14d98     63 00 00 FF 
14d9c     7C E4 85 F1 | 	sub	objptr, ##50812
14da0     F2 FA 01 F6 | 	mov	result1, objptr
14da4     00 28 01 FF 
14da8     00 FA 45 F5 | 	or	result1, ##38797312
14dac     63 00 00 FF 
14db0     88 E4 05 F1 | 	add	objptr, ##50824
14db4     F2 FA 61 FC | 	wrlong	result1, objptr
14db8     63 00 00 FF 
14dbc     88 E4 85 F1 | 	sub	objptr, ##50824
14dc0     F2 FA 01 F6 | 	mov	result1, objptr
14dc4     00 30 01 FF 
14dc8     00 FA 45 F5 | 	or	result1, ##39845888
14dcc     63 00 00 FF 
14dd0     8C E4 05 F1 | 	add	objptr, ##50828
14dd4     F2 FA 61 FC | 	wrlong	result1, objptr
14dd8     63 00 00 FF 
14ddc     8C E4 85 F1 | 	sub	objptr, ##50828
14de0     F2 FA 01 F6 | 	mov	result1, objptr
14de4     00 38 01 FF 
14de8     00 FA 45 F5 | 	or	result1, ##40894464
14dec     63 00 00 FF 
14df0     90 E4 05 F1 | 	add	objptr, ##50832
14df4     F2 FA 61 FC | 	wrlong	result1, objptr
14df8     63 00 00 FF 
14dfc     90 E4 85 F1 | 	sub	objptr, ##50832
14e00     F2 FA 01 F6 | 	mov	result1, objptr
14e04     00 40 01 FF 
14e08     00 FA 45 F5 | 	or	result1, ##41943040
14e0c     63 00 00 FF 
14e10     94 E4 05 F1 | 	add	objptr, ##50836
14e14     F2 FA 61 FC | 	wrlong	result1, objptr
14e18     63 00 00 FF 
14e1c     94 E4 85 F1 | 	sub	objptr, ##50836
14e20     F2 FA 01 F6 | 	mov	result1, objptr
14e24     00 48 01 FF 
14e28     00 FA 45 F5 | 	or	result1, ##42991616
14e2c     63 00 00 FF 
14e30     9C E4 05 F1 | 	add	objptr, ##50844
14e34     F2 FA 61 FC | 	wrlong	result1, objptr
14e38     63 00 00 FF 
14e3c     9C E4 85 F1 | 	sub	objptr, ##50844
14e40     F2 FA 01 F6 | 	mov	result1, objptr
14e44     00 50 01 FF 
14e48     00 FA 45 F5 | 	or	result1, ##44040192
14e4c     63 00 00 FF 
14e50     A0 E4 05 F1 | 	add	objptr, ##50848
14e54     F2 FA 61 FC | 	wrlong	result1, objptr
14e58     63 00 00 FF 
14e5c     A0 E4 85 F1 | 	sub	objptr, ##50848
14e60     F2 FA 01 F6 | 	mov	result1, objptr
14e64     00 58 01 FF 
14e68     00 FA 45 F5 | 	or	result1, ##45088768
14e6c     62 00 00 FF 
14e70     A0 E5 05 F1 | 	add	objptr, ##50592
14e74     F2 FA 61 FC | 	wrlong	result1, objptr
14e78     62 00 00 FF 
14e7c     A0 E5 85 F1 | 	sub	objptr, ##50592
14e80     F2 FA 01 F6 | 	mov	result1, objptr
14e84     00 60 01 FF 
14e88     00 FA 45 F5 | 	or	result1, ##46137344
14e8c     62 00 00 FF 
14e90     D0 E5 05 F1 | 	add	objptr, ##50640
14e94     F2 FA 61 FC | 	wrlong	result1, objptr
14e98     62 00 00 FF 
14e9c     D0 E5 85 F1 | 	sub	objptr, ##50640
14ea0     F2 FA 01 F6 | 	mov	result1, objptr
14ea4     00 68 01 FF 
14ea8     00 FA 45 F5 | 	or	result1, ##47185920
14eac     62 00 00 FF 
14eb0     CC E5 05 F1 | 	add	objptr, ##50636
14eb4     F2 FA 61 FC | 	wrlong	result1, objptr
14eb8     62 00 00 FF 
14ebc     CC E5 85 F1 | 	sub	objptr, ##50636
14ec0     F2 FA 01 F6 | 	mov	result1, objptr
14ec4     00 70 01 FF 
14ec8     00 FA 45 F5 | 	or	result1, ##48234496
14ecc     62 00 00 FF 
14ed0     70 E5 05 F1 | 	add	objptr, ##50544
14ed4     F2 FA 61 FC | 	wrlong	result1, objptr
14ed8     62 00 00 FF 
14edc     70 E5 85 F1 | 	sub	objptr, ##50544
14ee0     F2 FA 01 F6 | 	mov	result1, objptr
14ee4     00 78 01 FF 
14ee8     00 FA 45 F5 | 	or	result1, ##49283072
14eec     62 00 00 FF 
14ef0     74 E5 05 F1 | 	add	objptr, ##50548
14ef4     F2 FA 61 FC | 	wrlong	result1, objptr
14ef8     62 00 00 FF 
14efc     74 E5 85 F1 | 	sub	objptr, ##50548
14f00     F2 FA 01 F6 | 	mov	result1, objptr
14f04     38 FA 25 F4 | 	bith	result1, #56
14f08     62 00 00 FF 
14f0c     DC E5 05 F1 | 	add	objptr, ##50652
14f10     F2 FA 61 FC | 	wrlong	result1, objptr
14f14     62 00 00 FF 
14f18     DC E5 85 F1 | 	sub	objptr, ##50652
14f1c     F2 FA 01 F6 | 	mov	result1, objptr
14f20     00 88 01 FF 
14f24     00 FA 45 F5 | 	or	result1, ##51380224
14f28     63 00 00 FF 
14f2c     84 E4 05 F1 | 	add	objptr, ##50820
14f30     F2 FA 61 FC | 	wrlong	result1, objptr
14f34     63 00 00 FF 
14f38     84 E4 85 F1 | 	sub	objptr, ##50820
14f3c     F2 FA 01 F6 | 	mov	result1, objptr
14f40     00 90 01 FF 
14f44     00 FA 45 F5 | 	or	result1, ##52428800
14f48     63 00 00 FF 
14f4c     98 E4 05 F1 | 	add	objptr, ##50840
14f50     F2 FA 61 FC | 	wrlong	result1, objptr
14f54     63 00 00 FF 
14f58     98 E4 85 F1 | 	sub	objptr, ##50840
14f5c     F2 FA 01 F6 | 	mov	result1, objptr
14f60     00 98 01 FF 
14f64     00 FA 45 F5 | 	or	result1, ##53477376
14f68     63 00 00 FF 
14f6c     A4 E4 05 F1 | 	add	objptr, ##50852
14f70     F2 FA 61 FC | 	wrlong	result1, objptr
14f74     63 00 00 FF 
14f78     A4 E4 85 F1 | 	sub	objptr, ##50852
14f7c     F2 FA 01 F6 | 	mov	result1, objptr
14f80     00 A0 01 FF 
14f84     00 FA 45 F5 | 	or	result1, ##54525952
14f88     63 00 00 FF 
14f8c     A8 E4 05 F1 | 	add	objptr, ##50856
14f90     F2 FA 61 FC | 	wrlong	result1, objptr
14f94     63 00 00 FF 
14f98     A8 E4 85 F1 | 	sub	objptr, ##50856
14f9c     F2 FA 01 F6 | 	mov	result1, objptr
14fa0     00 A8 01 FF 
14fa4     00 FA 45 F5 | 	or	result1, ##55574528
14fa8     63 00 00 FF 
14fac     AC E4 05 F1 | 	add	objptr, ##50860
14fb0     F2 FA 61 FC | 	wrlong	result1, objptr
14fb4     63 00 00 FF 
14fb8     AC E4 85 F1 | 	sub	objptr, ##50860
14fbc     F2 FA 01 F6 | 	mov	result1, objptr
14fc0     00 B0 01 FF 
14fc4     00 FA 45 F5 | 	or	result1, ##56623104
14fc8     63 00 00 FF 
14fcc     B0 E4 05 F1 | 	add	objptr, ##50864
14fd0     F2 FA 61 FC | 	wrlong	result1, objptr
14fd4     63 00 00 FF 
14fd8     B0 E4 85 F1 | 	sub	objptr, ##50864
14fdc     F2 FA 01 F6 | 	mov	result1, objptr
14fe0     00 B8 01 FF 
14fe4     00 FA 45 F5 | 	or	result1, ##57671680
14fe8     63 00 00 FF 
14fec     B4 E4 05 F1 | 	add	objptr, ##50868
14ff0     F2 FA 61 FC | 	wrlong	result1, objptr
14ff4     63 00 00 FF 
14ff8     B4 E4 85 F1 | 	sub	objptr, ##50868
14ffc     F2 FA 01 F6 | 	mov	result1, objptr
15000     57 FA 25 F4 | 	bith	result1, #87
15004     63 00 00 FF 
15008     B8 E4 05 F1 | 	add	objptr, ##50872
1500c     F2 FA 61 FC | 	wrlong	result1, objptr
15010     63 00 00 FF 
15014     B8 E4 85 F1 | 	sub	objptr, ##50872
15018     F2 FA 01 F6 | 	mov	result1, objptr
1501c     94 FA 25 F4 | 	bith	result1, #148
15020     63 00 00 FF 
15024     80 E4 05 F1 | 	add	objptr, ##50816
15028     F2 FA 61 FC | 	wrlong	result1, objptr
1502c     63 00 00 FF 
15030     80 E4 85 F1 | 	sub	objptr, ##50816
15034     F2 FA 01 F6 | 	mov	result1, objptr
15038     00 C8 01 FF 
1503c     00 FA 45 F5 | 	or	result1, ##59768832
15040     63 00 00 FF 
15044     C0 E4 05 F1 | 	add	objptr, ##50880
15048     F2 FA 61 FC | 	wrlong	result1, objptr
1504c     63 00 00 FF 
15050     C0 E4 85 F1 | 	sub	objptr, ##50880
15054     F2 FA 01 F6 | 	mov	result1, objptr
15058     00 D0 01 FF 
1505c     00 FA 45 F5 | 	or	result1, ##60817408
15060     63 00 00 FF 
15064     BC E4 05 F1 | 	add	objptr, ##50876
15068     F2 FA 61 FC | 	wrlong	result1, objptr
1506c     63 00 00 FF 
15070     BC E4 85 F1 | 	sub	objptr, ##50876
15074     F2 FA 01 F6 | 	mov	result1, objptr
15078     00 D8 01 FF 
1507c     00 FA 45 F5 | 	or	result1, ##61865984
15080     63 00 00 FF 
15084     D4 E4 05 F1 | 	add	objptr, ##50900
15088     F2 FA 61 FC | 	wrlong	result1, objptr
1508c     63 00 00 FF 
15090     D4 E4 85 F1 | 	sub	objptr, ##50900
15094     F2 FA 01 F6 | 	mov	result1, objptr
15098     76 FA 25 F4 | 	bith	result1, #118
1509c     63 00 00 FF 
150a0     D8 E4 05 F1 | 	add	objptr, ##50904
150a4     F2 FA 61 FC | 	wrlong	result1, objptr
150a8     63 00 00 FF 
150ac     D8 E4 85 F1 | 	sub	objptr, ##50904
150b0     F2 FA 01 F6 | 	mov	result1, objptr
150b4     00 E8 01 FF 
150b8     00 FA 45 F5 | 	or	result1, ##63963136
150bc     63 00 00 FF 
150c0     C4 E4 05 F1 | 	add	objptr, ##50884
150c4     F2 FA 61 FC | 	wrlong	result1, objptr
150c8     63 00 00 FF 
150cc     C4 E4 85 F1 | 	sub	objptr, ##50884
150d0     F2 FA 01 F6 | 	mov	result1, objptr
150d4     95 FA 25 F4 | 	bith	result1, #149
150d8     63 00 00 FF 
150dc     C8 E4 05 F1 | 	add	objptr, ##50888
150e0     F2 FA 61 FC | 	wrlong	result1, objptr
150e4     63 00 00 FF 
150e8     C8 E4 85 F1 | 	sub	objptr, ##50888
150ec     F2 FA 01 F6 | 	mov	result1, objptr
150f0     B4 FA 25 F4 | 	bith	result1, #180
150f4     63 00 00 FF 
150f8     CC E4 05 F1 | 	add	objptr, ##50892
150fc     F2 FA 61 FC | 	wrlong	result1, objptr
15100     63 00 00 FF 
15104     CC E4 85 F1 | 	sub	objptr, ##50892
15108     F2 FA 01 F6 | 	mov	result1, objptr
1510c     1A FA 25 F4 | 	bith	result1, #26
15110     63 00 00 FF 
15114     D0 E4 05 F1 | 	add	objptr, ##50896
15118     F2 FA 61 FC | 	wrlong	result1, objptr
1511c     63 00 00 FF 
15120     D0 E4 85 F1 | 	sub	objptr, ##50896
15124     F2 FA 01 F6 | 	mov	result1, objptr
15128     00 08 02 FF 
1512c     00 FA 45 F5 | 	or	result1, ##68157440
15130     63 00 00 FF 
15134     E0 E4 05 F1 | 	add	objptr, ##50912
15138     F2 FA 61 FC | 	wrlong	result1, objptr
1513c     63 00 00 FF 
15140     E0 E4 85 F1 | 	sub	objptr, ##50912
15144     F2 FA 01 F6 | 	mov	result1, objptr
15148     00 10 02 FF 
1514c     00 FA 45 F5 | 	or	result1, ##69206016
15150     63 00 00 FF 
15154     DC E4 05 F1 | 	add	objptr, ##50908
15158     F2 FA 61 FC | 	wrlong	result1, objptr
1515c     63 00 00 FF 
15160     DC E4 85 F1 | 	sub	objptr, ##50908
15164     F2 FA 01 F6 | 	mov	result1, objptr
15168     00 18 02 FF 
1516c     00 FA 45 F5 | 	or	result1, ##70254592
15170     63 00 00 FF 
15174     EC E4 05 F1 | 	add	objptr, ##50924
15178     F2 FA 61 FC | 	wrlong	result1, objptr
1517c     63 00 00 FF 
15180     EC E4 85 F1 | 	sub	objptr, ##50924
15184     F2 FA 01 F6 | 	mov	result1, objptr
15188     00 20 02 FF 
1518c     00 FA 45 F5 | 	or	result1, ##71303168
15190     63 00 00 FF 
15194     E8 E4 05 F1 | 	add	objptr, ##50920
15198     F2 FA 61 FC | 	wrlong	result1, objptr
1519c     63 00 00 FF 
151a0     E8 E4 85 F1 | 	sub	objptr, ##50920
151a4     F2 FA 01 F6 | 	mov	result1, objptr
151a8     00 28 02 FF 
151ac     00 FA 45 F5 | 	or	result1, ##72351744
151b0     63 00 00 FF 
151b4     E4 E4 05 F1 | 	add	objptr, ##50916
151b8     F2 FA 61 FC | 	wrlong	result1, objptr
151bc     63 00 00 FF 
151c0     E4 E4 85 F1 | 	sub	objptr, ##50916
151c4     F2 FA 01 F6 | 	mov	result1, objptr
151c8     00 30 02 FF 
151cc     00 FA 45 F5 | 	or	result1, ##73400320
151d0     63 00 00 FF 
151d4     F0 E4 05 F1 | 	add	objptr, ##50928
151d8     F2 FA 61 FC | 	wrlong	result1, objptr
151dc     63 00 00 FF 
151e0     F0 E4 85 F1 | 	sub	objptr, ##50928
151e4     F2 FA 01 F6 | 	mov	result1, objptr
151e8     00 38 02 FF 
151ec     00 FA 45 F5 | 	or	result1, ##74448896
151f0     63 00 00 FF 
151f4     F4 E4 05 F1 | 	add	objptr, ##50932
151f8     F2 FA 61 FC | 	wrlong	result1, objptr
151fc     63 00 00 FF 
15200     F4 E4 85 F1 | 	sub	objptr, ##50932
15204     F2 FA 01 F6 | 	mov	result1, objptr
15208     00 40 02 FF 
1520c     00 FA 45 F5 | 	or	result1, ##75497472
15210     62 00 00 FF 
15214     88 E5 05 F1 | 	add	objptr, ##50568
15218     F2 FA 61 FC | 	wrlong	result1, objptr
1521c     62 00 00 FF 
15220     88 E5 85 F1 | 	sub	objptr, ##50568
15224     F2 FA 01 F6 | 	mov	result1, objptr
15228     00 48 02 FF 
1522c     00 FA 45 F5 | 	or	result1, ##76546048
15230     63 00 00 FF 
15234     0C E5 05 F1 | 	add	objptr, ##50956
15238     F2 FA 61 FC | 	wrlong	result1, objptr
1523c     63 00 00 FF 
15240     0C E5 85 F1 | 	sub	objptr, ##50956
15244     F2 FA 01 F6 | 	mov	result1, objptr
15248     00 50 02 FF 
1524c     00 FA 45 F5 | 	or	result1, ##77594624
15250     63 00 00 FF 
15254     1C E5 05 F1 | 	add	objptr, ##50972
15258     F2 FA 61 FC | 	wrlong	result1, objptr
1525c     63 00 00 FF 
15260     1C E5 85 F1 | 	sub	objptr, ##50972
15264     F2 FA 01 F6 | 	mov	result1, objptr
15268     00 58 02 FF 
1526c     00 FA 45 F5 | 	or	result1, ##78643200
15270     63 00 00 FF 
15274     20 E5 05 F1 | 	add	objptr, ##50976
15278     F2 FA 61 FC | 	wrlong	result1, objptr
1527c     63 00 00 FF 
15280     20 E5 85 F1 | 	sub	objptr, ##50976
15284     F2 FA 01 F6 | 	mov	result1, objptr
15288     00 60 02 FF 
1528c     00 FA 45 F5 | 	or	result1, ##79691776
15290     63 00 00 FF 
15294     18 E5 05 F1 | 	add	objptr, ##50968
15298     F2 FA 61 FC | 	wrlong	result1, objptr
1529c     63 00 00 FF 
152a0     18 E5 85 F1 | 	sub	objptr, ##50968
152a4     F2 FA 01 F6 | 	mov	result1, objptr
152a8     00 68 02 FF 
152ac     00 FA 45 F5 | 	or	result1, ##80740352
152b0     63 00 00 FF 
152b4     10 E5 05 F1 | 	add	objptr, ##50960
152b8     F2 FA 61 FC | 	wrlong	result1, objptr
152bc     63 00 00 FF 
152c0     10 E5 85 F1 | 	sub	objptr, ##50960
152c4     F2 FA 01 F6 | 	mov	result1, objptr
152c8     00 70 02 FF 
152cc     00 FA 45 F5 | 	or	result1, ##81788928
152d0     63 00 00 FF 
152d4     14 E5 05 F1 | 	add	objptr, ##50964
152d8     F2 FA 61 FC | 	wrlong	result1, objptr
152dc     63 00 00 FF 
152e0     14 E5 85 F1 | 	sub	objptr, ##50964
152e4     F2 FA 01 F6 | 	mov	result1, objptr
152e8     00 78 02 FF 
152ec     00 FA 45 F5 | 	or	result1, ##82837504
152f0     63 00 00 FF 
152f4     24 E5 05 F1 | 	add	objptr, ##50980
152f8     F2 FA 61 FC | 	wrlong	result1, objptr
152fc     63 00 00 FF 
15300     24 E5 85 F1 | 	sub	objptr, ##50980
15304     F2 FA 01 F6 | 	mov	result1, objptr
15308     00 80 02 FF 
1530c     00 FA 45 F5 | 	or	result1, ##83886080
15310     63 00 00 FF 
15314     28 E5 05 F1 | 	add	objptr, ##50984
15318     F2 FA 61 FC | 	wrlong	result1, objptr
1531c     63 00 00 FF 
15320     28 E5 85 F1 | 	sub	objptr, ##50984
15324     F2 FA 01 F6 | 	mov	result1, objptr
15328     00 88 02 FF 
1532c     00 FA 45 F5 | 	or	result1, ##84934656
15330     63 00 00 FF 
15334     2C E5 05 F1 | 	add	objptr, ##50988
15338     F2 FA 61 FC | 	wrlong	result1, objptr
1533c     63 00 00 FF 
15340     2C E5 85 F1 | 	sub	objptr, ##50988
15344     F2 FA 01 F6 | 	mov	result1, objptr
15348     00 90 02 FF 
1534c     00 FA 45 F5 | 	or	result1, ##85983232
15350     63 00 00 FF 
15354     30 E5 05 F1 | 	add	objptr, ##50992
15358     F2 FA 61 FC | 	wrlong	result1, objptr
1535c     63 00 00 FF 
15360     30 E5 85 F1 | 	sub	objptr, ##50992
15364     F2 FA 01 F6 | 	mov	result1, objptr
15368     00 98 02 FF 
1536c     00 FA 45 F5 | 	or	result1, ##87031808
15370     63 00 00 FF 
15374     34 E5 05 F1 | 	add	objptr, ##50996
15378     F2 FA 61 FC | 	wrlong	result1, objptr
1537c     63 00 00 FF 
15380     34 E5 85 F1 | 	sub	objptr, ##50996
15384     F2 FA 01 F6 | 	mov	result1, objptr
15388     00 A0 02 FF 
1538c     00 FA 45 F5 | 	or	result1, ##88080384
15390     63 00 00 FF 
15394     38 E5 05 F1 | 	add	objptr, ##51000
15398     F2 FA 61 FC | 	wrlong	result1, objptr
1539c     63 00 00 FF 
153a0     38 E5 85 F1 | 	sub	objptr, ##51000
153a4     F2 FA 01 F6 | 	mov	result1, objptr
153a8     00 A8 02 FF 
153ac     00 FA 45 F5 | 	or	result1, ##89128960
153b0     63 00 00 FF 
153b4     3C E5 05 F1 | 	add	objptr, ##51004
153b8     F2 FA 61 FC | 	wrlong	result1, objptr
153bc     63 00 00 FF 
153c0     3C E5 85 F1 | 	sub	objptr, ##51004
153c4     F2 FA 01 F6 | 	mov	result1, objptr
153c8     00 B0 02 FF 
153cc     00 FA 45 F5 | 	or	result1, ##90177536
153d0     63 00 00 FF 
153d4     40 E5 05 F1 | 	add	objptr, ##51008
153d8     F2 FA 61 FC | 	wrlong	result1, objptr
153dc     63 00 00 FF 
153e0     40 E5 85 F1 | 	sub	objptr, ##51008
153e4     F2 FA 01 F6 | 	mov	result1, objptr
153e8     00 B8 02 FF 
153ec     00 FA 45 F5 | 	or	result1, ##91226112
153f0     63 00 00 FF 
153f4     4C E5 05 F1 | 	add	objptr, ##51020
153f8     F2 FA 61 FC | 	wrlong	result1, objptr
153fc     63 00 00 FF 
15400     4C E5 85 F1 | 	sub	objptr, ##51020
15404     F2 FA 01 F6 | 	mov	result1, objptr
15408     00 C0 02 FF 
1540c     00 FA 45 F5 | 	or	result1, ##92274688
15410     63 00 00 FF 
15414     44 E5 05 F1 | 	add	objptr, ##51012
15418     F2 FA 61 FC | 	wrlong	result1, objptr
1541c     63 00 00 FF 
15420     44 E5 85 F1 | 	sub	objptr, ##51012
15424     F2 FA 01 F6 | 	mov	result1, objptr
15428     00 C8 02 FF 
1542c     00 FA 45 F5 | 	or	result1, ##93323264
15430     63 00 00 FF 
15434     48 E5 05 F1 | 	add	objptr, ##51016
15438     F2 FA 61 FC | 	wrlong	result1, objptr
1543c     63 00 00 FF 
15440     48 E5 85 F1 | 	sub	objptr, ##51016
15444     F2 FA 01 F6 | 	mov	result1, objptr
15448     00 D0 02 FF 
1544c     00 FA 45 F5 | 	or	result1, ##94371840
15450     63 00 00 FF 
15454     50 E5 05 F1 | 	add	objptr, ##51024
15458     F2 FA 61 FC | 	wrlong	result1, objptr
1545c     63 00 00 FF 
15460     50 E5 85 F1 | 	sub	objptr, ##51024
15464     F2 FA 01 F6 | 	mov	result1, objptr
15468     00 D8 02 FF 
1546c     00 FA 45 F5 | 	or	result1, ##95420416
15470     63 00 00 FF 
15474     F8 E4 05 F1 | 	add	objptr, ##50936
15478     F2 FA 61 FC | 	wrlong	result1, objptr
1547c     63 00 00 FF 
15480     F8 E4 85 F1 | 	sub	objptr, ##50936
15484     F2 FA 01 F6 | 	mov	result1, objptr
15488     00 E0 02 FF 
1548c     00 FA 45 F5 | 	or	result1, ##96468992
15490     63 00 00 FF 
15494     00 E5 05 F1 | 	add	objptr, ##50944
15498     F2 FA 61 FC | 	wrlong	result1, objptr
1549c     63 00 00 FF 
154a0     00 E5 85 F1 | 	sub	objptr, ##50944
154a4     F2 FA 01 F6 | 	mov	result1, objptr
154a8     00 E8 02 FF 
154ac     00 FA 45 F5 | 	or	result1, ##97517568
154b0     63 00 00 FF 
154b4     04 E5 05 F1 | 	add	objptr, ##50948
154b8     F2 FA 61 FC | 	wrlong	result1, objptr
154bc     63 00 00 FF 
154c0     04 E5 85 F1 | 	sub	objptr, ##50948
154c4     F2 FA 01 F6 | 	mov	result1, objptr
154c8     00 F0 02 FF 
154cc     00 FA 45 F5 | 	or	result1, ##98566144
154d0     63 00 00 FF 
154d4     54 E5 05 F1 | 	add	objptr, ##51028
154d8     F2 FA 61 FC | 	wrlong	result1, objptr
154dc     63 00 00 FF 
154e0     54 E5 85 F1 | 	sub	objptr, ##51028
154e4     F2 FA 01 F6 | 	mov	result1, objptr
154e8     00 F8 02 FF 
154ec     00 FA 45 F5 | 	or	result1, ##99614720
154f0     63 00 00 FF 
154f4     58 E5 05 F1 | 	add	objptr, ##51032
154f8     F2 FA 61 FC | 	wrlong	result1, objptr
154fc     63 00 00 FF 
15500     58 E5 85 F1 | 	sub	objptr, ##51032
15504     F2 FA 01 F6 | 	mov	result1, objptr
15508     39 FA 25 F4 | 	bith	result1, #57
1550c     63 00 00 FF 
15510     5C E5 05 F1 | 	add	objptr, ##51036
15514     F2 FA 61 FC | 	wrlong	result1, objptr
15518     63 00 00 FF 
1551c     5C E5 85 F1 | 	sub	objptr, ##51036
15520                 | _init_commands_ret
15520     2D 00 64 FD | 	ret
15524                 | 
15524                 | ' 
15524                 | ' ''--------------------------------Error strings -------------------------------------
15524                 | ' 
15524                 | ' sub init_error_strings
15524                 | _init_error_strings
15524     44 01 00 FF 
15528     45 01 06 F6 | 	mov	_var01, ##@LR__4611
1552c     64 00 00 FF 
15530     50 E5 05 F1 | 	add	objptr, ##51536
15534     F2 00 62 FC | 	wrlong	_var01, objptr
15538     44 01 00 FF 
1553c     46 01 06 F6 | 	mov	_var01, ##@LR__4612
15540     04 E4 05 F1 | 	add	objptr, #4
15544     F2 00 62 FC | 	wrlong	_var01, objptr
15548     44 01 00 FF 
1554c     6B 01 06 F6 | 	mov	_var01, ##@LR__4613
15550     04 E4 05 F1 | 	add	objptr, #4
15554     F2 00 62 FC | 	wrlong	_var01, objptr
15558     44 01 00 FF 
1555c     8C 01 06 F6 | 	mov	_var01, ##@LR__4614
15560     04 E4 05 F1 | 	add	objptr, #4
15564     F2 00 62 FC | 	wrlong	_var01, objptr
15568     44 01 00 FF 
1556c     A6 01 06 F6 | 	mov	_var01, ##@LR__4615
15570     04 E4 05 F1 | 	add	objptr, #4
15574     F2 00 62 FC | 	wrlong	_var01, objptr
15578     44 01 00 FF 
1557c     C2 01 06 F6 | 	mov	_var01, ##@LR__4616
15580     04 E4 05 F1 | 	add	objptr, #4
15584     F2 00 62 FC | 	wrlong	_var01, objptr
15588     44 01 00 FF 
1558c     E4 01 06 F6 | 	mov	_var01, ##@LR__4617
15590     04 E4 05 F1 | 	add	objptr, #4
15594     F2 00 62 FC | 	wrlong	_var01, objptr
15598     45 01 00 FF 
1559c     12 00 06 F6 | 	mov	_var01, ##@LR__4618
155a0     04 E4 05 F1 | 	add	objptr, #4
155a4     F2 00 62 FC | 	wrlong	_var01, objptr
155a8     45 01 00 FF 
155ac     3D 00 06 F6 | 	mov	_var01, ##@LR__4619
155b0     04 E4 05 F1 | 	add	objptr, #4
155b4     F2 00 62 FC | 	wrlong	_var01, objptr
155b8     45 01 00 FF 
155bc     56 00 06 F6 | 	mov	_var01, ##@LR__4620
155c0     04 E4 05 F1 | 	add	objptr, #4
155c4     F2 00 62 FC | 	wrlong	_var01, objptr
155c8     45 01 00 FF 
155cc     77 00 06 F6 | 	mov	_var01, ##@LR__4621
155d0     04 E4 05 F1 | 	add	objptr, #4
155d4     F2 00 62 FC | 	wrlong	_var01, objptr
155d8     45 01 00 FF 
155dc     8E 00 06 F6 | 	mov	_var01, ##@LR__4622
155e0     04 E4 05 F1 | 	add	objptr, #4
155e4     F2 00 62 FC | 	wrlong	_var01, objptr
155e8     45 01 00 FF 
155ec     AC 00 06 F6 | 	mov	_var01, ##@LR__4623
155f0     04 E4 05 F1 | 	add	objptr, #4
155f4     F2 00 62 FC | 	wrlong	_var01, objptr
155f8     45 01 00 FF 
155fc     D0 00 06 F6 | 	mov	_var01, ##@LR__4624
15600     04 E4 05 F1 | 	add	objptr, #4
15604     F2 00 62 FC | 	wrlong	_var01, objptr
15608     45 01 00 FF 
1560c     F7 00 06 F6 | 	mov	_var01, ##@LR__4625
15610     04 E4 05 F1 | 	add	objptr, #4
15614     F2 00 62 FC | 	wrlong	_var01, objptr
15618     45 01 00 FF 
1561c     13 01 06 F6 | 	mov	_var01, ##@LR__4626
15620     04 E4 05 F1 | 	add	objptr, #4
15624     F2 00 62 FC | 	wrlong	_var01, objptr
15628     45 01 00 FF 
1562c     24 01 06 F6 | 	mov	_var01, ##@LR__4627
15630     04 E4 05 F1 | 	add	objptr, #4
15634     F2 00 62 FC | 	wrlong	_var01, objptr
15638     45 01 00 FF 
1563c     34 01 06 F6 | 	mov	_var01, ##@LR__4628
15640     04 E4 05 F1 | 	add	objptr, #4
15644     F2 00 62 FC | 	wrlong	_var01, objptr
15648     45 01 00 FF 
1564c     4F 01 06 F6 | 	mov	_var01, ##@LR__4629
15650     04 E4 05 F1 | 	add	objptr, #4
15654     F2 00 62 FC | 	wrlong	_var01, objptr
15658     45 01 00 FF 
1565c     61 01 06 F6 | 	mov	_var01, ##@LR__4630
15660     04 E4 05 F1 | 	add	objptr, #4
15664     F2 00 62 FC | 	wrlong	_var01, objptr
15668     45 01 00 FF 
1566c     79 01 06 F6 | 	mov	_var01, ##@LR__4631
15670     04 E4 05 F1 | 	add	objptr, #4
15674     F2 00 62 FC | 	wrlong	_var01, objptr
15678     45 01 00 FF 
1567c     8D 01 06 F6 | 	mov	_var01, ##@LR__4632
15680     04 E4 05 F1 | 	add	objptr, #4
15684     F2 00 62 FC | 	wrlong	_var01, objptr
15688     45 01 00 FF 
1568c     9D 01 06 F6 | 	mov	_var01, ##@LR__4633
15690     04 E4 05 F1 | 	add	objptr, #4
15694     F2 00 62 FC | 	wrlong	_var01, objptr
15698     45 01 00 FF 
1569c     BA 01 06 F6 | 	mov	_var01, ##@LR__4634
156a0     04 E4 05 F1 | 	add	objptr, #4
156a4     F2 00 62 FC | 	wrlong	_var01, objptr
156a8     45 01 00 FF 
156ac     CB 01 06 F6 | 	mov	_var01, ##@LR__4635
156b0     04 E4 05 F1 | 	add	objptr, #4
156b4     F2 00 62 FC | 	wrlong	_var01, objptr
156b8     45 01 00 FF 
156bc     DC 01 06 F6 | 	mov	_var01, ##@LR__4636
156c0     04 E4 05 F1 | 	add	objptr, #4
156c4     F2 00 62 FC | 	wrlong	_var01, objptr
156c8     46 01 00 FF 
156cc     07 00 06 F6 | 	mov	_var01, ##@LR__4637
156d0     04 E4 05 F1 | 	add	objptr, #4
156d4     F2 00 62 FC | 	wrlong	_var01, objptr
156d8     46 01 00 FF 
156dc     23 00 06 F6 | 	mov	_var01, ##@LR__4638
156e0     04 E4 05 F1 | 	add	objptr, #4
156e4     F2 00 62 FC | 	wrlong	_var01, objptr
156e8     46 01 00 FF 
156ec     39 00 06 F6 | 	mov	_var01, ##@LR__4639
156f0     04 E4 05 F1 | 	add	objptr, #4
156f4     F2 00 62 FC | 	wrlong	_var01, objptr
156f8     46 01 00 FF 
156fc     46 00 06 F6 | 	mov	_var01, ##@LR__4640
15700     04 E4 05 F1 | 	add	objptr, #4
15704     F2 00 62 FC | 	wrlong	_var01, objptr
15708     46 01 00 FF 
1570c     58 00 06 F6 | 	mov	_var01, ##@LR__4641
15710     04 E4 05 F1 | 	add	objptr, #4
15714     F2 00 62 FC | 	wrlong	_var01, objptr
15718     46 01 00 FF 
1571c     69 00 06 F6 | 	mov	_var01, ##@LR__4642
15720     04 E4 05 F1 | 	add	objptr, #4
15724     F2 00 62 FC | 	wrlong	_var01, objptr
15728     46 01 00 FF 
1572c     85 00 06 F6 | 	mov	_var01, ##@LR__4643
15730     04 E4 05 F1 | 	add	objptr, #4
15734     F2 00 62 FC | 	wrlong	_var01, objptr
15738     46 01 00 FF 
1573c     96 00 06 F6 | 	mov	_var01, ##@LR__4644
15740     04 E4 05 F1 | 	add	objptr, #4
15744     F2 00 62 FC | 	wrlong	_var01, objptr
15748     46 01 00 FF 
1574c     A5 00 06 F6 | 	mov	_var01, ##@LR__4645
15750     04 E4 05 F1 | 	add	objptr, #4
15754     F2 00 62 FC | 	wrlong	_var01, objptr
15758     46 01 00 FF 
1575c     C0 00 06 F6 | 	mov	_var01, ##@LR__4646
15760     04 E4 05 F1 | 	add	objptr, #4
15764     F2 00 62 FC | 	wrlong	_var01, objptr
15768     46 01 00 FF 
1576c     F4 00 06 F6 | 	mov	_var01, ##@LR__4647
15770     04 E4 05 F1 | 	add	objptr, #4
15774     F2 00 62 FC | 	wrlong	_var01, objptr
15778     46 01 00 FF 
1577c     0D 01 06 F6 | 	mov	_var01, ##@LR__4648
15780     04 E4 05 F1 | 	add	objptr, #4
15784     F2 00 62 FC | 	wrlong	_var01, objptr
15788     46 01 00 FF 
1578c     29 01 06 F6 | 	mov	_var01, ##@LR__4649
15790     04 E4 05 F1 | 	add	objptr, #4
15794     F2 00 62 FC | 	wrlong	_var01, objptr
15798     46 01 00 FF 
1579c     47 01 06 F6 | 	mov	_var01, ##@LR__4650
157a0     04 E4 05 F1 | 	add	objptr, #4
157a4     F2 00 62 FC | 	wrlong	_var01, objptr
157a8     46 01 00 FF 
157ac     60 01 06 F6 | 	mov	_var01, ##@LR__4651
157b0     04 E4 05 F1 | 	add	objptr, #4
157b4     F2 00 62 FC | 	wrlong	_var01, objptr
157b8     46 01 00 FF 
157bc     7F 01 06 F6 | 	mov	_var01, ##@LR__4652
157c0     04 E4 05 F1 | 	add	objptr, #4
157c4     F2 00 62 FC | 	wrlong	_var01, objptr
157c8     46 01 00 FF 
157cc     8E 01 06 F6 | 	mov	_var01, ##@LR__4653
157d0     04 E4 05 F1 | 	add	objptr, #4
157d4     F2 00 62 FC | 	wrlong	_var01, objptr
157d8     46 01 00 FF 
157dc     BC 01 06 F6 | 	mov	_var01, ##@LR__4654
157e0     04 E4 05 F1 | 	add	objptr, #4
157e4     F2 00 62 FC | 	wrlong	_var01, objptr
157e8     46 01 00 FF 
157ec     CA 01 06 F6 | 	mov	_var01, ##@LR__4655
157f0     04 E4 05 F1 | 	add	objptr, #4
157f4     F2 00 62 FC | 	wrlong	_var01, objptr
157f8     46 01 00 FF 
157fc     DF 01 06 F6 | 	mov	_var01, ##@LR__4656
15800     04 E4 05 F1 | 	add	objptr, #4
15804     F2 00 62 FC | 	wrlong	_var01, objptr
15808     47 01 00 FF 
1580c     03 00 06 F6 | 	mov	_var01, ##@LR__4657
15810     04 E4 05 F1 | 	add	objptr, #4
15814     F2 00 62 FC | 	wrlong	_var01, objptr
15818     47 01 00 FF 
1581c     1A 00 06 F6 | 	mov	_var01, ##@LR__4658
15820     04 E4 05 F1 | 	add	objptr, #4
15824     F2 00 62 FC | 	wrlong	_var01, objptr
15828     47 01 00 FF 
1582c     2D 00 06 F6 | 	mov	_var01, ##@LR__4659
15830     04 E4 05 F1 | 	add	objptr, #4
15834     F2 00 62 FC | 	wrlong	_var01, objptr
15838     47 01 00 FF 
1583c     44 00 06 F6 | 	mov	_var01, ##@LR__4660
15840     04 E4 05 F1 | 	add	objptr, #4
15844     F2 00 62 FC | 	wrlong	_var01, objptr
15848     65 00 00 FF 
1584c     14 E4 85 F1 | 	sub	objptr, ##51732
15850                 | _init_error_strings_ret
15850     2D 00 64 FD | 	ret
15854                 | 
15854                 | '         
15854                 | ' sub printerror(err as integer)
15854                 | _printerror
15854     01 4A 05 F6 | 	mov	COUNT_, #1
15858     A8 00 A0 FD | 	call	#pushregs_
1585c     09 1F 02 F6 | 	mov	local01, arg01
15860     47 01 00 FF 
15864     5D 12 06 F6 | 	mov	arg01, ##@LR__4661
15868     E4 24 B0 FD | 	call	#_hg010b_spin2_write
1586c     0F 13 02 F6 | 	mov	arg01, local01
15870     DC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
15874     FD 12 02 F6 | 	mov	arg01, result1
15878     D4 24 B0 FD | 	call	#_hg010b_spin2_write
1587c     47 01 00 FF 
15880     64 12 06 F6 | 	mov	arg01, ##@LR__4662
15884     C8 24 B0 FD | 	call	#_hg010b_spin2_write
15888     02 1E 66 F0 | 	shl	local01, #2
1588c     64 00 00 FF 
15890     50 E5 05 F1 | 	add	objptr, ##51536
15894     F2 1E 02 F1 | 	add	local01, objptr
15898     0F 13 02 FB | 	rdlong	arg01, local01
1589c     64 00 00 FF 
158a0     50 E5 85 F1 | 	sub	objptr, ##51536
158a4                 | ' 
158a4                 | ' write(text)
158a4     A8 24 B0 FD | 	call	#_hg010b_spin2_write
158a8                 | ' crlf
158a8     04 26 B0 FD | 	call	#_hg010b_spin2_crlf
158ac     A7 F0 03 F6 | 	mov	ptra, fp
158b0     B2 00 A0 FD | 	call	#popregs_
158b4                 | _printerror_ret
158b4     2D 00 64 FD | 	ret
158b8                 | 
158b8                 | ' 
158b8                 | ' '' ------------------------------- Hardware start/stop/initialization 
158b8                 | ' 
158b8                 | ' sub startpsram
158b8                 | _startpsram
158b8     00 12 06 F6 | 	mov	arg01, #0
158bc     0A 14 C6 F9 | 	decod	arg02, #10
158c0     0B 16 06 F6 | 	mov	arg03, #11
158c4     07 18 06 F6 | 	mov	arg04, #7
158c8     0B 00 00 FF 
158cc     C0 E4 05 F1 | 	add	objptr, ##5824
158d0     88 27 B0 FD | 	call	#_psram_spin2_startx
158d4     4B 00 00 FF 
158d8     1C E4 05 F1 | 	add	objptr, ##38428
158dc     F2 FA 61 FC | 	wrlong	result1, objptr
158e0                 | '     return $7FF00 + cog*12
158e0     0C E4 05 F1 | 	add	objptr, #12
158e4     FF 03 80 FF 
158e8     F2 00 6A FC | 	wrlong	##524032, objptr
158ec     56 00 00 FF 
158f0     E8 E4 85 F1 | 	sub	objptr, ##44264
158f4                 | _startpsram_ret
158f4     2D 00 64 FD | 	ret
158f8                 | 
158f8                 | ' 
158f8                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
158f8                 | _startvideo
158f8     01 4A 05 F6 | 	mov	COUNT_, #1
158fc     A8 00 A0 FD | 	call	#pushregs_
15900     56 00 00 FF 
15904     E8 E4 05 F1 | 	add	objptr, ##44264
15908     F2 18 02 FB | 	rdlong	arg04, objptr
1590c     56 00 00 FF 
15910     E8 E4 85 F1 | 	sub	objptr, ##44264
15914     0A 13 02 F6 | 	mov	arg01, arg02
15918     0C 15 02 F6 | 	mov	arg02, arg04
1591c     50 0F B0 FD | 	call	#_hg010b_spin2_start
15920     56 00 00 FF 
15924     D4 E4 05 F1 | 	add	objptr, ##44244
15928     F2 FA 61 FC | 	wrlong	result1, objptr
1592c                 | ' 
1592c                 | ' videocog=v.start(pin,mbox)
1592c                 | ' 
1592c                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1592c     00 1E 06 F6 | 	mov	local01, #0
15930     4B 00 00 FF 
15934     14 E4 85 F1 | 	sub	objptr, ##38420
15938                 | LR__1650
15938     0F 13 02 F6 | 	mov	arg01, local01
1593c     00 28 00 FF 
15940     00 14 06 F6 | 	mov	arg02, ##5242880
15944     6C 2B B0 FD | 	call	#_psram_spin2_setQos
15948     01 1E 06 F1 | 	add	local01, #1
1594c     08 1E 56 F2 | 	cmps	local01, #8 wc
15950     E4 FF 9F CD |  if_b	jmp	#LR__1650
15954     4B 00 00 FF 
15958     14 E4 05 F1 | 	add	objptr, ##38420
1595c     F2 12 02 FB | 	rdlong	arg01, objptr
15960     7A 00 02 FF 
15964     00 14 06 F6 | 	mov	arg02, ##67171328
15968     4B 00 00 FF 
1596c     14 E4 85 F1 | 	sub	objptr, ##38420
15970     40 2B B0 FD | 	call	#_psram_spin2_setQos
15974     0B 00 00 FF 
15978     C0 E4 85 F1 | 	sub	objptr, ##5824
1597c                 | ' psram.setQoS(videocog, $0400f400) 
1597c                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1597c     F2 14 02 F6 | 	mov	arg02, objptr
15980     00 08 03 FF 
15984     00 14 46 F5 | 	or	arg02, ##101711872
15988     00 16 06 F6 | 	mov	arg03, #0
1598c     00 18 06 F6 | 	mov	arg04, #0
15990     00 12 06 F6 | 	mov	arg01, #0
15994     E8 3E B0 FD | 	call	#__system___basic_open
15998                 | ' return videocog
15998     56 00 00 FF 
1599c     D4 E4 05 F1 | 	add	objptr, ##44244
159a0     F2 FA 01 FB | 	rdlong	result1, objptr
159a4     56 00 00 FF 
159a8     D4 E4 85 F1 | 	sub	objptr, ##44244
159ac     A7 F0 03 F6 | 	mov	ptra, fp
159b0     B2 00 A0 FD | 	call	#popregs_
159b4                 | _startvideo_ret
159b4     2D 00 64 FD | 	ret
159b8                 | 
159b8                 | ' 
159b8                 | ' function pspeek(adr as ulong) as ubyte
159b8                 | _pspeek
159b8     00 4A 05 F6 | 	mov	COUNT_, #0
159bc     A8 00 A0 FD | 	call	#pushregs_
159c0     0C F0 07 F1 | 	add	ptra, #12
159c4     04 4E 05 F1 | 	add	fp, #4
159c8     A7 12 62 FC | 	wrlong	arg01, fp
159cc     04 4E 05 F1 | 	add	fp, #4
159d0     A7 12 02 F6 | 	mov	arg01, fp
159d4     04 4E 85 F1 | 	sub	fp, #4
159d8     A7 14 02 FB | 	rdlong	arg02, fp
159dc     04 4E 85 F1 | 	sub	fp, #4
159e0     01 16 06 F6 | 	mov	arg03, #1
159e4     0B 00 00 FF 
159e8     C0 E4 05 F1 | 	add	objptr, ##5824
159ec     98 28 B0 FD | 	call	#_psram_spin2_read1
159f0     0B 00 00 FF 
159f4     C0 E4 85 F1 | 	sub	objptr, ##5824
159f8                 | ' psram.read1(varptr(res),adr,1)
159f8                 | ' return res
159f8     08 4E 05 F1 | 	add	fp, #8
159fc     A7 FA C1 FA | 	rdbyte	result1, fp
15a00     08 4E 85 F1 | 	sub	fp, #8
15a04     A7 F0 03 F6 | 	mov	ptra, fp
15a08     B2 00 A0 FD | 	call	#popregs_
15a0c                 | _pspeek_ret
15a0c     2D 00 64 FD | 	ret
15a10                 | 
15a10                 | ' 
15a10                 | ' function pslpeek(adr as ulong) as ulong
15a10                 | _pslpeek
15a10     00 4A 05 F6 | 	mov	COUNT_, #0
15a14     A8 00 A0 FD | 	call	#pushregs_
15a18     0C F0 07 F1 | 	add	ptra, #12
15a1c     04 4E 05 F1 | 	add	fp, #4
15a20     A7 12 62 FC | 	wrlong	arg01, fp
15a24     04 4E 05 F1 | 	add	fp, #4
15a28     A7 12 02 F6 | 	mov	arg01, fp
15a2c     04 4E 85 F1 | 	sub	fp, #4
15a30     A7 14 02 FB | 	rdlong	arg02, fp
15a34     04 4E 85 F1 | 	sub	fp, #4
15a38     04 16 06 F6 | 	mov	arg03, #4
15a3c     0B 00 00 FF 
15a40     C0 E4 05 F1 | 	add	objptr, ##5824
15a44     40 28 B0 FD | 	call	#_psram_spin2_read1
15a48     0B 00 00 FF 
15a4c     C0 E4 85 F1 | 	sub	objptr, ##5824
15a50                 | ' psram.read1(varptr(res),adr,4)
15a50                 | ' return res
15a50     08 4E 05 F1 | 	add	fp, #8
15a54     A7 FA 01 FB | 	rdlong	result1, fp
15a58     08 4E 85 F1 | 	sub	fp, #8
15a5c     A7 F0 03 F6 | 	mov	ptra, fp
15a60     B2 00 A0 FD | 	call	#popregs_
15a64                 | _pslpeek_ret
15a64     2D 00 64 FD | 	ret
15a68                 | 
15a68                 | ' 
15a68                 | ' '' ------------------------------- USB keyboard scan to char translator
15a68                 | ' 
15a68                 | ' function scantochar(key)
15a68                 | _scantochar
15a68                 | ' 
15a68                 | ' select case (key shr 8) and 255
15a68     09 01 02 F6 | 	mov	_var01, arg01
15a6c     08 00 C6 F0 | 	sar	_var01, #8
15a70     FF 00 0E F5 | 	and	_var01, #255 wz
15a74     24 00 90 AD |  if_e	jmp	#LR__1660
15a78     02 00 0E F2 | 	cmp	_var01, #2 wz
15a7c     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
15a80     30 00 90 AD |  if_e	jmp	#LR__1661
15a84     40 00 0E F2 | 	cmp	_var01, #64 wz
15a88     44 00 90 AD |  if_e	jmp	#LR__1662
15a8c     42 00 0E F2 | 	cmp	_var01, #66 wz
15a90     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
15a94     70 00 90 5D |  if_ne	jmp	#LR__1664
15a98     50 00 90 FD | 	jmp	#LR__1663
15a9c                 | LR__1660
15a9c     09 FB 01 F6 | 	mov	result1, arg01
15aa0     7F FA 05 F5 | 	and	result1, #127
15aa4     02 FA 65 F0 | 	shl	result1, #2
15aa8     F5 FA 01 F1 | 	add	result1, ptr__dat__
15aac     FD FA C1 FA | 	rdbyte	result1, result1
15ab0     54 00 90 FD | 	jmp	#_scantochar_ret
15ab4                 | LR__1661
15ab4     09 FB 01 F6 | 	mov	result1, arg01
15ab8     7F FA 05 F5 | 	and	result1, #127
15abc     02 FA 65 F0 | 	shl	result1, #2
15ac0     01 FA 05 F1 | 	add	result1, #1
15ac4     F5 FA 01 F1 | 	add	result1, ptr__dat__
15ac8     FD FA C1 FA | 	rdbyte	result1, result1
15acc     38 00 90 FD | 	jmp	#_scantochar_ret
15ad0                 | LR__1662
15ad0     09 FB 01 F6 | 	mov	result1, arg01
15ad4     7F FA 05 F5 | 	and	result1, #127
15ad8     02 FA 65 F0 | 	shl	result1, #2
15adc     02 FA 05 F1 | 	add	result1, #2
15ae0     F5 FA 01 F1 | 	add	result1, ptr__dat__
15ae4     FD FA C1 FA | 	rdbyte	result1, result1
15ae8     1C 00 90 FD | 	jmp	#_scantochar_ret
15aec                 | LR__1663
15aec     09 FB 01 F6 | 	mov	result1, arg01
15af0     7F FA 05 F5 | 	and	result1, #127
15af4     02 FA 65 F0 | 	shl	result1, #2
15af8     03 FA 05 F1 | 	add	result1, #3
15afc     F5 FA 01 F1 | 	add	result1, ptr__dat__
15b00     FD FA C1 FA | 	rdbyte	result1, result1
15b04     00 00 90 FD | 	jmp	#_scantochar_ret
15b08                 | LR__1664
15b08                 | _scantochar_ret
15b08     2D 00 64 FD | 	ret
15b0c                 | 
15b0c                 | _program
15b0c     0B 4A 05 F6 | 	mov	COUNT_, #11
15b10     A8 00 A0 FD | 	call	#pushregs_
15b14     A0 FD BF FD | 	call	#_startpsram
15b18     40 12 06 F6 | 	mov	arg01, #64
15b1c     00 14 06 F6 | 	mov	arg02, #0
15b20     00 16 06 F6 | 	mov	arg03, #0
15b24     D0 FD BF FD | 	call	#_startvideo
15b28     00 12 06 F6 | 	mov	arg01, #0
15b2c     00 14 06 F6 | 	mov	arg02, #0
15b30     00 16 06 F6 | 	mov	arg03, #0
15b34     0B 00 00 FF 
15b38     C0 E4 05 F1 | 	add	objptr, ##5824
15b3c     88 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
15b40     FE 1C 02 F6 | 	mov	arg06, result2
15b44     4B 00 00 FF 
15b48     10 E4 05 F1 | 	add	objptr, ##38416
15b4c     F2 FA 61 FC | 	wrlong	result1, objptr
15b50     14 E4 05 F1 | 	add	objptr, #20
15b54     F2 1C 62 FC | 	wrlong	arg06, objptr
15b58     56 00 00 FF 
15b5c     E4 E4 85 F1 | 	sub	objptr, ##44260
15b60     32 12 06 F6 | 	mov	arg01, #50
15b64     64 35 B0 FD | 	call	#__system___waitms
15b68     56 00 00 FF 
15b6c     E4 E4 05 F1 | 	add	objptr, ##44260
15b70     F2 12 02 FB | 	rdlong	arg01, objptr
15b74     56 00 00 FF 
15b78     E4 E4 85 F1 | 	sub	objptr, ##44260
15b7c     14 12 06 F1 | 	add	arg01, #20
15b80     20 00 80 FF 
15b84     09 01 58 FC | 	wrword	##16384, arg01
15b88     30 2A B0 FD | 	call	#_usbnew_spin2_start
15b8c     56 00 00 FF 
15b90     D8 E4 05 F1 | 	add	objptr, ##44248
15b94     F2 FA 61 FC | 	wrlong	result1, objptr
15b98                 | '   mouse_limits[0] := xlim
15b98     0F 00 00 FF 
15b9c     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
15ba0     01 00 80 FF 
15ba4     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
15ba8                 | '   mouse_limits[1] := ylim
15ba8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
15bac     01 00 80 FF 
15bb0     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
15bb4     55 00 00 FF 
15bb8     CB E5 85 F1 | 	sub	objptr, ##43979
15bbc     F2 12 02 F6 | 	mov	arg01, objptr
15bc0     0D E5 85 F1 | 	sub	objptr, #269
15bc4     C4 12 06 F1 | 	add	arg01, #196
15bc8                 | '   mouse_outptr := ptr
15bc8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
15bcc     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
15bd0     0F 00 00 FF 
15bd4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
15bd8     0E 00 00 FF 
15bdc     9A EA 05 F1 | 	add	ptr__dat__, ##7322
15be0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15be4     0E 00 00 FF 
15be8     9A EA 85 F1 | 	sub	ptr__dat__, ##7322
15bec     10 12 06 F6 | 	mov	arg01, #16
15bf0     74 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
15bf4     10 12 06 F6 | 	mov	arg01, #16
15bf8     20 14 06 F6 | 	mov	arg02, #32
15bfc     20 16 06 F6 | 	mov	arg03, #32
15c00     D8 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
15c04     09 12 C6 F9 | 	decod	arg01, #9
15c08     20 15 06 F6 | 	mov	arg02, #288
15c0c     68 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
15c10     F2 1C 02 F6 | 	mov	arg06, objptr
15c14     79 00 00 FF 
15c18     BC E4 05 F1 | 	add	objptr, ##62140
15c1c     F2 1A 02 F6 | 	mov	arg05, objptr
15c20     0D 1D 62 FC | 	wrlong	arg06, arg05
15c24     04 1A 06 F1 | 	add	arg05, #4
15c28     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
15c2c     EF 14 02 F6 | 	mov	arg02, entryptr__
15c30     F2 1E 02 F6 | 	mov	local01, objptr
15c34     1E FA 05 F6 | 	mov	result1, #30
15c38     28 1E 62 FD | 	setq	local01
15c3c     0A FB F1 FC | 	coginit	result1, arg02 wc
15c40     01 FA 65 C6 |  if_b	neg	result1, #1
15c44     04 E4 85 F1 | 	sub	objptr, #4
15c48     F2 FA 61 FC | 	wrlong	result1, objptr
15c4c     01 00 00 FF 
15c50     90 E4 05 F1 | 	add	objptr, ##656
15c54     F2 00 68 FC | 	wrlong	#0, objptr
15c58     24 00 00 FF 
15c5c     40 E4 85 F1 | 	sub	objptr, ##18496
15c60     F2 04 68 FC | 	wrlong	#2, objptr
15c64     04 E4 05 F1 | 	add	objptr, #4
15c68     F2 26 69 FC | 	wrlong	#147, objptr
15c6c     04 E4 05 F1 | 	add	objptr, #4
15c70     F2 34 69 FC | 	wrlong	#154, objptr
15c74     04 E4 05 F1 | 	add	objptr, #4
15c78     F2 08 68 FC | 	wrlong	#4, objptr
15c7c     04 E4 85 F1 | 	sub	objptr, #4
15c80     F2 1C 02 FB | 	rdlong	arg06, objptr
15c84     14 E4 85 F1 | 	sub	objptr, #20
15c88     F2 1C 62 FC | 	wrlong	arg06, objptr
15c8c     04 E4 05 F1 | 	add	objptr, #4
15c90     F2 00 68 FC | 	wrlong	#0, objptr
15c94     04 E4 05 F1 | 	add	objptr, #4
15c98     F2 00 68 FC | 	wrlong	#0, objptr
15c9c     22 00 00 FF 
15ca0     B0 E5 05 F1 | 	add	objptr, ##17840
15ca4     F2 02 68 FC | 	wrlong	#1, objptr
15ca8     01 00 00 FF 
15cac     9C E4 05 F1 | 	add	objptr, ##668
15cb0     F2 00 68 FC | 	wrlong	#0, objptr
15cb4     01 00 00 FF 
15cb8     00 EA 05 F1 | 	add	ptr__dat__, ##512
15cbc     08 E4 05 F1 | 	add	objptr, #8
15cc0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15cc4     04 E4 85 F1 | 	sub	objptr, #4
15cc8     03 00 80 FF 
15ccc     F2 28 69 FC | 	wrlong	##1684, objptr
15cd0     16 00 00 FF 
15cd4     1C E4 85 F1 | 	sub	objptr, ##11292
15cd8     F2 18 68 FC | 	wrlong	#12, objptr
15cdc     64 00 00 FF 
15ce0     38 E5 85 F1 | 	sub	objptr, ##51512
15ce4     01 00 00 FF 
15ce8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15cec     5C EB BF FD | 	call	#_init_commands
15cf0     30 F8 BF FD | 	call	#_init_error_strings
15cf4     90 67 BF FD | 	call	#_do_new
15cf8     56 00 00 FF 
15cfc     10 E5 05 F1 | 	add	objptr, ##44304
15d00     F2 12 02 FB | 	rdlong	arg01, objptr
15d04     04 E4 85 F1 | 	sub	objptr, #4
15d08     F2 14 02 FB | 	rdlong	arg02, objptr
15d0c     56 00 00 FF 
15d10     0C E5 85 F1 | 	sub	objptr, ##44300
15d14     7C 1D B0 FD | 	call	#_hg010b_spin2_cls
15d18     56 00 00 FF 
15d1c     14 E5 05 F1 | 	add	objptr, ##44308
15d20     F2 12 02 FB | 	rdlong	arg01, objptr
15d24     56 00 00 FF 
15d28     14 E5 85 F1 | 	sub	objptr, ##44308
15d2c     7C 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
15d30                 | ' 
15d30                 | ' leading_spaces:=amount
15d30     01 00 00 FF 
15d34     B2 E4 05 F1 | 	add	objptr, ##690
15d38     F2 04 68 FC | 	wrlong	#2, objptr
15d3c     01 00 00 FF 
15d40     B2 E4 85 F1 | 	sub	objptr, ##690
15d44     47 01 00 FF 
15d48     67 20 06 F6 | 	mov	local02, ##@LR__4663
15d4c     3D 12 06 F6 | 	mov	arg01, #61
15d50     3C 14 06 F6 | 	mov	arg02, #60
15d54     3B 16 06 F6 | 	mov	arg03, #59
15d58     3A 18 06 F6 | 	mov	arg04, #58
15d5c     14 7A B0 FD | 	call	#__system___vfs_open_sdcardx
15d60     FD 14 02 F6 | 	mov	arg02, result1
15d64     10 13 02 F6 | 	mov	arg01, local02
15d68     38 34 B0 FD | 	call	#__system___mount
15d6c     47 01 00 FF 
15d70     6B 12 06 F6 | 	mov	arg01, ##@LR__4664
15d74     EC 36 B0 FD | 	call	#__system___chdir
15d78     47 01 00 FF 
15d7c     73 20 06 F6 | 	mov	local02, ##@LR__4665
15d80     71 00 00 FF 
15d84     68 E5 05 F1 | 	add	objptr, ##58216
15d88     F2 20 62 FC | 	wrlong	local02, objptr
15d8c     1B 00 00 FF 
15d90     60 E4 85 F1 | 	sub	objptr, ##13920
15d94     F2 12 02 FB | 	rdlong	arg01, objptr
15d98     56 00 00 FF 
15d9c     08 E5 85 F1 | 	sub	objptr, ##44296
15da0     01 12 66 F0 | 	shl	arg01, #1
15da4     01 14 06 F6 | 	mov	arg02, #1
15da8     40 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
15dac                 | ' 
15dac                 | ' init_commands
15dac                 | ' init_error_strings
15dac                 | ' do_new
15dac                 | ' 
15dac                 | ' 
15dac                 | ' cls(ink, paper)
15dac                 | ' v.setfontfamily(font) 				' use ST Mono font
15dac                 | ' v.setleadingspaces(2)
15dac                 | ' mount "/sd", _vfs_open_sdcard()
15dac                 | ' chdir "/sd/bas"
15dac                 | ' 
15dac                 | ' currentdir$="/sd/bas"
15dac                 | ' 
15dac                 | ' position 2*editor_spaces,1 : print ver$
15dac     00 12 06 F6 | 	mov	arg01, #0
15db0     28 89 B0 FD | 	call	#__system___getiolock_0423
15db4     FD 12 02 F6 | 	mov	arg01, result1
15db8     1C 30 B0 FD | 	call	#__system___lockmem
15dbc     10 00 00 FF 
15dc0     10 EB 05 F1 | 	add	ptr__dat__, ##8464
15dc4     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
15dc8     10 00 00 FF 
15dcc     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
15dd0     00 12 06 F6 | 	mov	arg01, #0
15dd4     00 16 06 F6 | 	mov	arg03, #0
15dd8     F0 3C B0 FD | 	call	#__system___basic_print_string
15ddc     00 12 06 F6 | 	mov	arg01, #0
15de0     0A 14 06 F6 | 	mov	arg02, #10
15de4     00 16 06 F6 | 	mov	arg03, #0
15de8     88 3C B0 FD | 	call	#__system___basic_print_char
15dec     00 12 06 F6 | 	mov	arg01, #0
15df0     E8 88 B0 FD | 	call	#__system___getiolock_0423
15df4     FD 00 68 FC | 	wrlong	#0, result1
15df8     F2 12 02 FB | 	rdlong	arg01, objptr
15dfc     00 14 06 F6 | 	mov	arg02, #0
15e00     0A 16 06 F6 | 	mov	arg03, #10
15e04     D8 51 B0 FD | 	call	#__system__Number_S
15e08     FD 12 02 F6 | 	mov	arg01, result1
15e0c     47 01 00 FF 
15e10     7B 14 06 F6 | 	mov	arg02, ##@LR__4666
15e14     1C 30 B0 FD | 	call	#__system___string_concat
15e18     FD 20 02 F6 | 	mov	local02, result1
15e1c     79 00 00 FF 
15e20     B0 E4 05 F1 | 	add	objptr, ##62128
15e24     F2 20 62 FC | 	wrlong	local02, objptr
15e28     79 00 00 FF 
15e2c     B0 E4 85 F1 | 	sub	objptr, ##62128
15e30                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
15e30     00 12 06 F6 | 	mov	arg01, #0
15e34     A4 88 B0 FD | 	call	#__system___getiolock_0423
15e38     FD 12 02 F6 | 	mov	arg01, result1
15e3c     98 2F B0 FD | 	call	#__system___lockmem
15e40     79 00 00 FF 
15e44     B0 E4 05 F1 | 	add	objptr, ##62128
15e48     F2 14 02 FB | 	rdlong	arg02, objptr
15e4c     79 00 00 FF 
15e50     B0 E4 85 F1 | 	sub	objptr, ##62128
15e54     00 12 06 F6 | 	mov	arg01, #0
15e58     00 16 06 F6 | 	mov	arg03, #0
15e5c     6C 3C B0 FD | 	call	#__system___basic_print_string
15e60     00 12 06 F6 | 	mov	arg01, #0
15e64     0A 14 06 F6 | 	mov	arg02, #10
15e68     00 16 06 F6 | 	mov	arg03, #0
15e6c     04 3C B0 FD | 	call	#__system___basic_print_char
15e70     00 12 06 F6 | 	mov	arg01, #0
15e74     64 88 B0 FD | 	call	#__system___getiolock_0423
15e78     FD 00 68 FC | 	wrlong	#0, result1
15e7c     56 00 00 FF 
15e80     08 E5 05 F1 | 	add	objptr, ##44296
15e84     F2 12 02 FB | 	rdlong	arg01, objptr
15e88     56 00 00 FF 
15e8c     08 E5 85 F1 | 	sub	objptr, ##44296
15e90     01 12 66 F0 | 	shl	arg01, #1
15e94     04 14 06 F6 | 	mov	arg02, #4
15e98     50 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
15e9c                 | ' position 2*editor_spaces,4 : print "Ready"
15e9c     00 12 06 F6 | 	mov	arg01, #0
15ea0     38 88 B0 FD | 	call	#__system___getiolock_0423
15ea4     FD 12 02 F6 | 	mov	arg01, result1
15ea8     2C 2F B0 FD | 	call	#__system___lockmem
15eac     47 01 00 FF 
15eb0     8D 14 06 F6 | 	mov	arg02, ##@LR__4667
15eb4     00 12 06 F6 | 	mov	arg01, #0
15eb8     00 16 06 F6 | 	mov	arg03, #0
15ebc     0C 3C B0 FD | 	call	#__system___basic_print_string
15ec0     FD 22 02 F6 | 	mov	local03, result1
15ec4     00 12 06 F6 | 	mov	arg01, #0
15ec8     0A 14 06 F6 | 	mov	arg02, #10
15ecc     00 16 06 F6 | 	mov	arg03, #0
15ed0     A0 3B B0 FD | 	call	#__system___basic_print_char
15ed4     01 24 06 F6 | 	mov	local04, #1
15ed8     00 12 06 F6 | 	mov	arg01, #0
15edc     FC 87 B0 FD | 	call	#__system___getiolock_0423
15ee0     FD 00 68 FC | 	wrlong	#0, result1
15ee4     00 26 06 F6 | 	mov	local05, #0
15ee8     00 14 06 F6 | 	mov	arg02, #0
15eec     01 14 D6 F7 | 	test	arg02, #1 wc
15ef0     5A 4C 64 FD | 	drvc	#38
15ef4     01 14 D6 F7 | 	test	arg02, #1 wc
15ef8     5A 4E 64 FD | 	drvc	#39
15efc                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
15efc                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
15efc                 | ' 
15efc                 | ' 
15efc                 | ' '-------------------------------------------------------------------------------------------------------- 
15efc                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
15efc                 | ' '--------------------------------------------------------------------------------------------------------
15efc                 | ' 
15efc                 | ' do
15efc                 | LR__1670
15efc     01 12 06 F6 | 	mov	arg01, #1
15f00     20 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
15f04     10 27 B0 FD | 	call	#_usbnew_spin2_get_key
15f08     64 00 00 FF 
15f0c     48 E5 05 F1 | 	add	objptr, ##51528
15f10     F2 FA 61 FC | 	wrlong	result1, objptr
15f14                 | '   return hkbd_led_rep
15f14     13 00 00 FF 
15f18     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
15f1c     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
15f20     13 00 00 FF 
15f24     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
15f28     16 00 00 FF 
15f2c     20 E4 05 F1 | 	add	objptr, ##11296
15f30     F2 FA 61 FC | 	wrlong	result1, objptr
15f34                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
15f34     16 00 00 FF 
15f38     20 E4 85 F1 | 	sub	objptr, ##11296
15f3c     F2 20 02 FB | 	rdlong	local02, objptr
15f40     64 00 00 FF 
15f44     48 E5 85 F1 | 	sub	objptr, ##51528
15f48     01 20 16 F2 | 	cmp	local02, #1 wc
15f4c     BC 00 90 CD |  if_b	jmp	#LR__1671
15f50     64 00 00 FF 
15f54     48 E5 05 F1 | 	add	objptr, ##51528
15f58     F2 24 02 FB | 	rdlong	local04, objptr
15f5c     64 00 00 FF 
15f60     48 E5 85 F1 | 	sub	objptr, ##51528
15f64     12 23 02 F6 | 	mov	local03, local04
15f68     04 22 16 F2 | 	cmp	local03, #4 wc
15f6c     9C 00 90 3D |  if_ae	jmp	#LR__1671
15f70     79 00 00 FF 
15f74     B4 E4 05 F1 | 	add	objptr, ##62132
15f78     F2 1E 02 FB | 	rdlong	local01, objptr
15f7c     79 00 00 FF 
15f80     B4 E4 85 F1 | 	sub	objptr, ##62132
15f84     0F 27 02 F6 | 	mov	local05, local01
15f88     01 26 0E F2 | 	cmp	local05, #1 wz
15f8c     7C 00 90 5D |  if_ne	jmp	#LR__1671
15f90     04 00 00 FF 
15f94     94 EA 05 F1 | 	add	ptr__dat__, ##2196
15f98     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15f9c     04 00 00 FF 
15fa0     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
15fa4     56 00 00 FF 
15fa8     44 22 06 F6 | 	mov	local03, ##44100
15fac     0E 24 C6 F9 | 	decod	local04, #14
15fb0     00 26 06 F6 | 	mov	local05, #0
15fb4     03 00 00 FF 
15fb8     DE 1E 06 F6 | 	mov	local01, ##1758
15fbc     07 12 06 F6 | 	mov	arg01, #7
15fc0     56 00 00 FF 
15fc4     44 16 06 F6 | 	mov	arg03, ##44100
15fc8     0E 18 C6 F9 | 	decod	arg04, #14
15fcc     00 1A 06 F6 | 	mov	arg05, #0
15fd0     03 00 00 FF 
15fd4     DE 1C 06 F6 | 	mov	arg06, ##1758
15fd8     0B 00 00 FF 
15fdc     C0 E4 05 F1 | 	add	objptr, ##5824
15fe0     BC 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
15fe4     0B 00 00 FF 
15fe8     C0 E4 85 F1 | 	sub	objptr, ##5824
15fec     0A 12 06 F6 | 	mov	arg01, #10
15ff0     D8 30 B0 FD | 	call	#__system___waitms
15ff4     07 12 06 F6 | 	mov	arg01, #7
15ff8     0B 00 00 FF 
15ffc     C0 E4 05 F1 | 	add	objptr, ##5824
16000     EC 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
16004     0B 00 00 FF 
16008     C0 E4 85 F1 | 	sub	objptr, ##5824
1600c                 | LR__1671
1600c                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
1600c     64 00 00 FF 
16010     48 E5 05 F1 | 	add	objptr, ##51528
16014     F2 20 02 FB | 	rdlong	local02, objptr
16018     64 00 00 FF 
1601c     48 E5 85 F1 | 	sub	objptr, ##51528
16020     04 20 16 F2 | 	cmp	local02, #4 wc
16024     80 00 90 CD |  if_b	jmp	#LR__1672
16028     64 00 00 FF 
1602c     48 E5 05 F1 | 	add	objptr, ##51528
16030     F2 24 02 FB | 	rdlong	local04, objptr
16034     64 00 00 FF 
16038     48 E5 85 F1 | 	sub	objptr, ##51528
1603c     12 23 02 F6 | 	mov	local03, local04
16040     00 00 40 FF 
16044     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
16048     64 00 00 CF 
1604c     48 E5 05 C1 |  if_b	add	objptr, ##51528
16050     F2 1E 02 CB |  if_b	rdlong	local01, objptr
16054     64 00 00 CF 
16058     48 E5 85 C1 |  if_b	sub	objptr, ##51528
1605c     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
16060     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
16064     40 00 90 3D |  if_ae	jmp	#LR__1672
16068     64 00 00 FF 
1606c     48 E5 05 F1 | 	add	objptr, ##51528
16070     F2 20 02 FB | 	rdlong	local02, objptr
16074     04 E4 05 F1 | 	add	objptr, #4
16078     F2 20 62 FC | 	wrlong	local02, objptr
1607c     16 00 00 FF 
16080     20 E4 05 F1 | 	add	objptr, ##11296
16084     F2 02 68 FC | 	wrlong	#1, objptr
16088     16 00 00 FF 
1608c     20 E4 85 F1 | 	sub	objptr, ##11296
16090     F2 20 02 FB | 	rdlong	local02, objptr
16094     16 00 00 FF 
16098     24 E4 05 F1 | 	add	objptr, ##11300
1609c     F2 20 62 FC | 	wrlong	local02, objptr
160a0     7A 00 00 FF 
160a4     70 E5 85 F1 | 	sub	objptr, ##62832
160a8                 | LR__1672
160a8                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
160a8     64 00 00 FF 
160ac     48 E5 05 F1 | 	add	objptr, ##51528
160b0     F2 20 02 FB | 	rdlong	local02, objptr
160b4     64 00 00 FF 
160b8     48 E5 85 F1 | 	sub	objptr, ##51528
160bc     00 00 40 FF 
160c0     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
160c4     7A 00 00 3F 
160c8     74 E5 05 31 |  if_ae	add	objptr, ##62836
160cc     F2 00 68 3C |  if_ae	wrlong	#0, objptr
160d0     08 E4 85 31 |  if_ae	sub	objptr, #8
160d4     F2 00 68 3C |  if_ae	wrlong	#0, objptr
160d8     7A 00 00 3F 
160dc     6C E5 85 31 |  if_ae	sub	objptr, ##62828
160e0                 | ' if key=0 andalso rpt=1 then rptcnt+=1
160e0     64 00 00 FF 
160e4     48 E5 05 F1 | 	add	objptr, ##51528
160e8     F2 20 0A FB | 	rdlong	local02, objptr wz
160ec     64 00 00 FF 
160f0     48 E5 85 F1 | 	sub	objptr, ##51528
160f4     7A 00 00 AF 
160f8     6C E5 05 A1 |  if_e	add	objptr, ##62828
160fc     F2 24 02 AB |  if_e	rdlong	local04, objptr
16100     7A 00 00 AF 
16104     6C E5 85 A1 |  if_e	sub	objptr, ##62828
16108     12 23 02 A6 |  if_e	mov	local03, local04
1610c     01 22 0E A2 |  if_e	cmp	local03, #1 wz
16110     7A 00 00 AF 
16114     74 E5 05 A1 |  if_e	add	objptr, ##62836
16118     F2 20 02 AB |  if_e	rdlong	local02, objptr
1611c     01 20 06 A1 |  if_e	add	local02, #1
16120     F2 20 62 AC |  if_e	wrlong	local02, objptr
16124     7A 00 00 AF 
16128     74 E5 85 A1 |  if_e	sub	objptr, ##62836
1612c                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
1612c     64 00 00 FF 
16130     48 E5 05 F1 | 	add	objptr, ##51528
16134     F2 20 02 FB | 	rdlong	local02, objptr
16138     64 00 00 FF 
1613c     48 E5 85 F1 | 	sub	objptr, ##51528
16140     00 00 40 FF 
16144     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
16148     44 00 90 3D |  if_ae	jmp	#LR__1674
1614c     7A 00 00 FF 
16150     74 E5 05 F1 | 	add	objptr, ##62836
16154     F2 20 02 FB | 	rdlong	local02, objptr
16158     7A 00 00 FF 
1615c     74 E5 85 F1 | 	sub	objptr, ##62836
16160     19 20 0E F2 | 	cmp	local02, #25 wz
16164     28 00 90 5D |  if_ne	jmp	#LR__1673
16168     64 00 00 FF 
1616c     4C E5 05 F1 | 	add	objptr, ##51532
16170     F2 20 02 FB | 	rdlong	local02, objptr
16174     16 00 00 FF 
16178     24 E4 05 F1 | 	add	objptr, ##11300
1617c     F2 20 62 FC | 	wrlong	local02, objptr
16180     04 E4 05 F1 | 	add	objptr, #4
16184     F2 2A 68 FC | 	wrlong	#21, objptr
16188     7A 00 00 FF 
1618c     74 E5 85 F1 | 	sub	objptr, ##62836
16190                 | LR__1673
16190                 | LR__1674
16190                 | ' 
16190                 | ' 
16190                 | ' if key3<>0 then
16190     7A 00 00 FF 
16194     70 E5 05 F1 | 	add	objptr, ##62832
16198     F2 28 0A FB | 	rdlong	local06, objptr wz
1619c     7A 00 00 FF 
161a0     70 E5 85 F1 | 	sub	objptr, ##62832
161a4     54 FD 9F AD |  if_e	jmp	#LR__1670
161a8                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
161a8     79 00 00 FF 
161ac     B4 E4 05 F1 | 	add	objptr, ##62132
161b0     F2 20 02 FB | 	rdlong	local02, objptr
161b4     79 00 00 FF 
161b8     B4 E4 85 F1 | 	sub	objptr, ##62132
161bc     01 20 0E F2 | 	cmp	local02, #1 wz
161c0     50 00 90 5D |  if_ne	jmp	#LR__1675
161c4     7A 00 00 FF 
161c8     58 E5 05 F1 | 	add	objptr, ##62808
161cc     F2 14 02 FB | 	rdlong	arg02, objptr
161d0     56 00 00 FF 
161d4     44 22 06 F6 | 	mov	local03, ##44100
161d8     0E 24 C6 F9 | 	decod	local04, #14
161dc     04 E4 85 F1 | 	sub	objptr, #4
161e0     F2 26 02 FB | 	rdlong	local05, objptr
161e4     01 1E 66 F6 | 	neg	local01, #1
161e8     07 12 06 F6 | 	mov	arg01, #7
161ec     56 00 00 FF 
161f0     44 16 06 F6 | 	mov	arg03, ##44100
161f4     0E 18 C6 F9 | 	decod	arg04, #14
161f8     13 1B 02 F6 | 	mov	arg05, local05
161fc     01 1C 66 F6 | 	neg	arg06, #1
16200     6F 00 00 FF 
16204     94 E4 85 F1 | 	sub	objptr, ##56980
16208     94 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
1620c     0B 00 00 FF 
16210     C0 E4 85 F1 | 	sub	objptr, ##5824
16214                 | LR__1675
16214     7A 00 00 FF 
16218     70 E5 05 F1 | 	add	objptr, ##62832
1621c     F2 12 02 FB | 	rdlong	arg01, objptr
16220     7A 00 00 FF 
16224     70 E5 85 F1 | 	sub	objptr, ##62832
16228     3C F8 BF FD | 	call	#_scantochar
1622c     7A 00 00 FF 
16230     78 E5 05 F1 | 	add	objptr, ##62840
16234     F2 FA 61 FC | 	wrlong	result1, objptr
16238                 | '   if leds and 2 = 2 then 
16238     10 E4 85 F1 | 	sub	objptr, #16
1623c     F2 20 0A FB | 	rdlong	local02, objptr wz
16240     7A 00 00 FF 
16244     68 E5 85 F1 | 	sub	objptr, ##62824
16248     68 01 90 AD |  if_e	jmp	#LR__1683
1624c                 | '     if key4>96 andalso key4<123 then
1624c     7A 00 00 FF 
16250     78 E5 05 F1 | 	add	objptr, ##62840
16254     F2 20 02 FB | 	rdlong	local02, objptr
16258     7A 00 00 FF 
1625c     78 E5 85 F1 | 	sub	objptr, ##62840
16260     61 20 56 F2 | 	cmps	local02, #97 wc
16264     40 00 90 CD |  if_b	jmp	#LR__1676
16268     7A 00 00 FF 
1626c     78 E5 05 F1 | 	add	objptr, ##62840
16270     F2 24 02 FB | 	rdlong	local04, objptr
16274     7A 00 00 FF 
16278     78 E5 85 F1 | 	sub	objptr, ##62840
1627c     12 23 02 F6 | 	mov	local03, local04
16280     7B 22 56 F2 | 	cmps	local03, #123 wc
16284     20 00 90 3D |  if_ae	jmp	#LR__1676
16288     7A 00 00 FF 
1628c     78 E5 05 F1 | 	add	objptr, ##62840
16290     F2 20 02 FB | 	rdlong	local02, objptr
16294     20 20 86 F1 | 	sub	local02, #32
16298     F2 20 62 FC | 	wrlong	local02, objptr
1629c     7A 00 00 FF 
162a0     78 E5 85 F1 | 	sub	objptr, ##62840
162a4     0C 01 90 FD | 	jmp	#LR__1682
162a8                 | LR__1676
162a8     7A 00 00 FF 
162ac     78 E5 05 F1 | 	add	objptr, ##62840
162b0     F2 20 02 FB | 	rdlong	local02, objptr
162b4     7A 00 00 FF 
162b8     78 E5 85 F1 | 	sub	objptr, ##62840
162bc     41 20 56 F2 | 	cmps	local02, #65 wc
162c0     40 00 90 CD |  if_b	jmp	#LR__1677
162c4     7A 00 00 FF 
162c8     78 E5 05 F1 | 	add	objptr, ##62840
162cc     F2 24 02 FB | 	rdlong	local04, objptr
162d0     7A 00 00 FF 
162d4     78 E5 85 F1 | 	sub	objptr, ##62840
162d8     12 23 02 F6 | 	mov	local03, local04
162dc     5B 22 56 F2 | 	cmps	local03, #91 wc
162e0     20 00 90 3D |  if_ae	jmp	#LR__1677
162e4     7A 00 00 FF 
162e8     78 E5 05 F1 | 	add	objptr, ##62840
162ec     F2 20 02 FB | 	rdlong	local02, objptr
162f0     20 20 06 F1 | 	add	local02, #32
162f4     F2 20 62 FC | 	wrlong	local02, objptr
162f8     7A 00 00 FF 
162fc     78 E5 85 F1 | 	sub	objptr, ##62840
16300     B0 00 90 FD | 	jmp	#LR__1681
16304                 | LR__1677
16304     7A 00 00 FF 
16308     78 E5 05 F1 | 	add	objptr, ##62840
1630c     F2 20 02 FB | 	rdlong	local02, objptr
16310     7A 00 00 FF 
16314     78 E5 85 F1 | 	sub	objptr, ##62840
16318     17 20 56 F2 | 	cmps	local02, #23 wc
1631c     40 00 90 CD |  if_b	jmp	#LR__1678
16320     7A 00 00 FF 
16324     78 E5 05 F1 | 	add	objptr, ##62840
16328     F2 24 02 FB | 	rdlong	local04, objptr
1632c     7A 00 00 FF 
16330     78 E5 85 F1 | 	sub	objptr, ##62840
16334     12 23 02 F6 | 	mov	local03, local04
16338     20 22 56 F2 | 	cmps	local03, #32 wc
1633c     20 00 90 3D |  if_ae	jmp	#LR__1678
16340     7A 00 00 FF 
16344     78 E5 05 F1 | 	add	objptr, ##62840
16348     F2 20 02 FB | 	rdlong	local02, objptr
1634c     09 20 86 F1 | 	sub	local02, #9
16350     F2 20 62 FC | 	wrlong	local02, objptr
16354     7A 00 00 FF 
16358     78 E5 85 F1 | 	sub	objptr, ##62840
1635c     54 00 90 FD | 	jmp	#LR__1680
16360                 | LR__1678
16360     7A 00 00 FF 
16364     78 E5 05 F1 | 	add	objptr, ##62840
16368     F2 20 02 FB | 	rdlong	local02, objptr
1636c     7A 00 00 FF 
16370     78 E5 85 F1 | 	sub	objptr, ##62840
16374     0E 20 56 F2 | 	cmps	local02, #14 wc
16378     38 00 90 CD |  if_b	jmp	#LR__1679
1637c     7A 00 00 FF 
16380     78 E5 05 F1 | 	add	objptr, ##62840
16384     F2 24 02 FB | 	rdlong	local04, objptr
16388     7A 00 00 FF 
1638c     78 E5 85 F1 | 	sub	objptr, ##62840
16390     12 23 02 F6 | 	mov	local03, local04
16394     17 22 56 F2 | 	cmps	local03, #23 wc
16398     7A 00 00 CF 
1639c     78 E5 05 C1 |  if_b	add	objptr, ##62840
163a0     F2 20 02 CB |  if_b	rdlong	local02, objptr
163a4     27 20 06 C1 |  if_b	add	local02, #39
163a8     F2 20 62 CC |  if_b	wrlong	local02, objptr
163ac     7A 00 00 CF 
163b0     78 E5 85 C1 |  if_b	sub	objptr, ##62840
163b4                 | LR__1679
163b4                 | LR__1680
163b4                 | LR__1681
163b4                 | LR__1682
163b4                 | LR__1683
163b4                 | '  
163b4                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
163b4     7A 00 00 FF 
163b8     78 E5 05 F1 | 	add	objptr, ##62840
163bc     F2 20 02 FB | 	rdlong	local02, objptr
163c0     7A 00 00 FF 
163c4     78 E5 85 F1 | 	sub	objptr, ##62840
163c8     01 20 56 F2 | 	cmps	local02, #1 wc
163cc     90 00 90 CD |  if_b	jmp	#LR__1684
163d0     7A 00 00 FF 
163d4     78 E5 05 F1 | 	add	objptr, ##62840
163d8     F2 24 02 FB | 	rdlong	local04, objptr
163dc     7A 00 00 FF 
163e0     78 E5 85 F1 | 	sub	objptr, ##62840
163e4     12 23 02 F6 | 	mov	local03, local04
163e8     7F 22 56 F2 | 	cmps	local03, #127 wc
163ec     38 E4 05 C1 |  if_b	add	objptr, #56
163f0     F2 1E E2 CA |  if_b	rdword	local01, objptr
163f4     38 E4 85 C1 |  if_b	sub	objptr, #56
163f8     0F 27 32 C9 |  if_b	getword	local05, local01, #0
163fc     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
16400     5C 00 90 3D |  if_ae	jmp	#LR__1684
16404     7A 00 00 FF 
16408     78 E5 05 F1 | 	add	objptr, ##62840
1640c     F2 12 02 FB | 	rdlong	arg01, objptr
16410     7A 00 00 FF 
16414     78 E5 85 F1 | 	sub	objptr, ##62840
16418     90 4B B0 FD | 	call	#__system__Chr_S
1641c     FD 2A 02 F6 | 	mov	local07, result1
16420     56 00 00 FF 
16424     F0 E4 05 F1 | 	add	objptr, ##44272
16428     F2 12 02 FB | 	rdlong	arg01, objptr
1642c     56 00 00 FF 
16430     F0 E4 85 F1 | 	sub	objptr, ##44272
16434     15 15 02 F6 | 	mov	arg02, local07
16438     F8 29 B0 FD | 	call	#__system___string_concat
1643c     56 00 00 FF 
16440     F0 E4 05 F1 | 	add	objptr, ##44272
16444     F2 FA 61 FC | 	wrlong	result1, objptr
16448     24 00 00 FF 
1644c     88 E4 05 F1 | 	add	objptr, ##18568
16450     F2 12 02 FB | 	rdlong	arg01, objptr
16454     7A 00 00 FF 
16458     78 E5 85 F1 | 	sub	objptr, ##62840
1645c     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
16460                 | LR__1684
16460                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(7) 'end of line reached
16460     7A 00 00 FF 
16464     78 E5 05 F1 | 	add	objptr, ##62840
16468     F2 20 02 FB | 	rdlong	local02, objptr
1646c     7A 00 00 FF 
16470     78 E5 85 F1 | 	sub	objptr, ##62840
16474     01 20 56 F2 | 	cmps	local02, #1 wc
16478     D0 00 90 CD |  if_b	jmp	#LR__1685
1647c     7A 00 00 FF 
16480     78 E5 05 F1 | 	add	objptr, ##62840
16484     F2 24 02 FB | 	rdlong	local04, objptr
16488     7A 00 00 FF 
1648c     78 E5 85 F1 | 	sub	objptr, ##62840
16490     12 23 02 F6 | 	mov	local03, local04
16494     7F 22 56 F2 | 	cmps	local03, #127 wc
16498     B0 00 90 3D |  if_ae	jmp	#LR__1685
1649c     38 E4 05 F1 | 	add	objptr, #56
164a0     F2 1E E2 FA | 	rdword	local01, objptr
164a4     38 E4 85 F1 | 	sub	objptr, #56
164a8     0F 27 32 F9 | 	getword	local05, local01, #0
164ac     FE 26 0E F2 | 	cmp	local05, #254 wz
164b0     79 00 00 AF 
164b4     B4 E4 05 A1 |  if_e	add	objptr, ##62132
164b8     F2 2C 02 AB |  if_e	rdlong	local08, objptr
164bc     79 00 00 AF 
164c0     B4 E4 85 A1 |  if_e	sub	objptr, ##62132
164c4     16 2F 02 A6 |  if_e	mov	local09, local08
164c8     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
164cc     7C 00 90 5D |  if_ne	jmp	#LR__1685
164d0     04 00 00 FF 
164d4     94 EA 05 F1 | 	add	ptr__dat__, ##2196
164d8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
164dc     04 00 00 FF 
164e0     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
164e4     56 00 00 FF 
164e8     44 22 06 F6 | 	mov	local03, ##44100
164ec     0E 24 C6 F9 | 	decod	local04, #14
164f0     00 26 06 F6 | 	mov	local05, #0
164f4     03 00 00 FF 
164f8     DE 1E 06 F6 | 	mov	local01, ##1758
164fc     07 12 06 F6 | 	mov	arg01, #7
16500     56 00 00 FF 
16504     44 16 06 F6 | 	mov	arg03, ##44100
16508     0E 18 C6 F9 | 	decod	arg04, #14
1650c     00 1A 06 F6 | 	mov	arg05, #0
16510     03 00 00 FF 
16514     DE 1C 06 F6 | 	mov	arg06, ##1758
16518     0B 00 00 FF 
1651c     C0 E4 05 F1 | 	add	objptr, ##5824
16520     7C 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
16524     0B 00 00 FF 
16528     C0 E4 85 F1 | 	sub	objptr, ##5824
1652c     2C 13 06 F6 | 	mov	arg01, #300
16530     98 2B B0 FD | 	call	#__system___waitms
16534     07 12 06 F6 | 	mov	arg01, #7
16538     0B 00 00 FF 
1653c     C0 E4 05 F1 | 	add	objptr, ##5824
16540     AC 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
16544     0B 00 00 FF 
16548     C0 E4 85 F1 | 	sub	objptr, ##5824
1654c                 | LR__1685
1654c                 | '  
1654c                 | '   'tab
1654c                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1654c     7A 00 00 FF 
16550     70 E5 05 F1 | 	add	objptr, ##62832
16554     F2 20 02 FB | 	rdlong	local02, objptr
16558     7A 00 00 FF 
1655c     70 E5 85 F1 | 	sub	objptr, ##62832
16560     10 21 E2 F8 | 	getbyte	local02, local02, #0
16564     2B 20 0E F2 | 	cmp	local02, #43 wz
16568     B4 00 90 5D |  if_ne	jmp	#LR__1686
1656c     38 E4 05 F1 | 	add	objptr, #56
16570     F2 24 E2 FA | 	rdword	local04, objptr
16574     38 E4 85 F1 | 	sub	objptr, #56
16578     12 23 32 F9 | 	getword	local03, local04, #0
1657c     F0 22 16 F2 | 	cmp	local03, #240 wc
16580     9C 00 90 CD |  if_b	jmp	#LR__1686
16584     79 00 00 FF 
16588     B4 E4 05 F1 | 	add	objptr, ##62132
1658c     F2 1E 02 FB | 	rdlong	local01, objptr
16590     79 00 00 FF 
16594     B4 E4 85 F1 | 	sub	objptr, ##62132
16598     0F 27 02 F6 | 	mov	local05, local01
1659c     01 26 0E F2 | 	cmp	local05, #1 wz
165a0     7C 00 90 5D |  if_ne	jmp	#LR__1686
165a4     04 00 00 FF 
165a8     94 EA 05 F1 | 	add	ptr__dat__, ##2196
165ac     F5 14 02 F6 | 	mov	arg02, ptr__dat__
165b0     04 00 00 FF 
165b4     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
165b8     56 00 00 FF 
165bc     44 22 06 F6 | 	mov	local03, ##44100
165c0     0E 24 C6 F9 | 	decod	local04, #14
165c4     00 26 06 F6 | 	mov	local05, #0
165c8     03 00 00 FF 
165cc     DE 1E 06 F6 | 	mov	local01, ##1758
165d0     00 12 06 F6 | 	mov	arg01, #0
165d4     56 00 00 FF 
165d8     44 16 06 F6 | 	mov	arg03, ##44100
165dc     0E 18 C6 F9 | 	decod	arg04, #14
165e0     00 1A 06 F6 | 	mov	arg05, #0
165e4     03 00 00 FF 
165e8     DE 1C 06 F6 | 	mov	arg06, ##1758
165ec     0B 00 00 FF 
165f0     C0 E4 05 F1 | 	add	objptr, ##5824
165f4     A8 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
165f8     0B 00 00 FF 
165fc     C0 E4 85 F1 | 	sub	objptr, ##5824
16600     2C 13 06 F6 | 	mov	arg01, #300
16604     C4 2A B0 FD | 	call	#__system___waitms
16608     00 12 06 F6 | 	mov	arg01, #0
1660c     0B 00 00 FF 
16610     C0 E4 05 F1 | 	add	objptr, ##5824
16614     D8 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
16618     0B 00 00 FF 
1661c     C0 E4 85 F1 | 	sub	objptr, ##5824
16620                 | LR__1686
16620                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
16620     7A 00 00 FF 
16624     70 E5 05 F1 | 	add	objptr, ##62832
16628     F2 20 02 FB | 	rdlong	local02, objptr
1662c     7A 00 00 FF 
16630     70 E5 85 F1 | 	sub	objptr, ##62832
16634     10 21 E2 F8 | 	getbyte	local02, local02, #0
16638     2B 20 0E F2 | 	cmp	local02, #43 wz
1663c     AC 00 90 5D |  if_ne	jmp	#LR__1689
16640     38 E4 05 F1 | 	add	objptr, #56
16644     F2 24 E2 FA | 	rdword	local04, objptr
16648     38 E4 85 F1 | 	sub	objptr, #56
1664c     12 23 32 F9 | 	getword	local03, local04, #0
16650     F0 22 16 F2 | 	cmp	local03, #240 wc
16654     94 00 90 3D |  if_ae	jmp	#LR__1689
16658     38 E4 05 F1 | 	add	objptr, #56
1665c     F2 20 E2 FA | 	rdword	local02, objptr
16660     10 23 52 F6 | 	abs	local03, local02 wc
16664     11 23 42 F8 | 	getnib	local03, local03, #0
16668     11 23 82 F6 | 	negc	local03, local03
1666c     11 25 52 F6 | 	abs	local04, local03 wc
16670     01 24 46 F0 | 	shr	local04, #1
16674     12 25 82 F6 | 	negc	local04, local04
16678     7A 00 00 FF 
1667c     44 E5 05 F1 | 	add	objptr, ##62788
16680     F2 24 62 FC | 	wrlong	local04, objptr
16684     12 31 02 F6 | 	mov	local10, local04
16688     7A 00 00 FF 
1668c     7C E5 85 F1 | 	sub	objptr, ##62844
16690                 | LR__1687
16690     08 30 56 F2 | 	cmps	local10, #8 wc
16694     54 00 90 3D |  if_ae	jmp	#LR__1688
16698     56 00 00 FF 
1669c     F0 E4 05 F1 | 	add	objptr, ##44272
166a0     F2 12 02 FB | 	rdlong	arg01, objptr
166a4     56 00 00 FF 
166a8     F0 E4 85 F1 | 	sub	objptr, ##44272
166ac     47 01 00 FF 
166b0     93 24 06 F6 | 	mov	local04, ##@LR__4668
166b4     12 15 02 F6 | 	mov	arg02, local04
166b8     78 27 B0 FD | 	call	#__system___string_concat
166bc     56 00 00 FF 
166c0     F0 E4 05 F1 | 	add	objptr, ##44272
166c4     F2 FA 61 FC | 	wrlong	result1, objptr
166c8     56 00 00 FF 
166cc     F0 E4 85 F1 | 	sub	objptr, ##44272
166d0     47 01 00 FF 
166d4     95 12 06 F6 | 	mov	arg01, ##@LR__4669
166d8     74 16 B0 FD | 	call	#_hg010b_spin2_write
166dc     18 23 02 F6 | 	mov	local03, local10
166e0     01 22 06 F1 | 	add	local03, #1
166e4     11 31 02 F6 | 	mov	local10, local03
166e8     A4 FF 9F FD | 	jmp	#LR__1687
166ec                 | LR__1688
166ec                 | LR__1689
166ec                 | '  
166ec                 | '   'backspace
166ec                 | '   if (key3 and 255) = 42 then 
166ec     7A 00 00 FF 
166f0     70 E5 05 F1 | 	add	objptr, ##62832
166f4     F2 20 02 FB | 	rdlong	local02, objptr
166f8     7A 00 00 FF 
166fc     70 E5 85 F1 | 	sub	objptr, ##62832
16700     10 21 E2 F8 | 	getbyte	local02, local02, #0
16704     2A 20 0E F2 | 	cmp	local02, #42 wz
16708     D4 00 90 5D |  if_ne	jmp	#LR__1694
1670c                 | '       if v.cursor_x>4 then 
1670c     38 E4 05 F1 | 	add	objptr, #56
16710     F2 20 E2 FA | 	rdword	local02, objptr
16714     38 E4 85 F1 | 	sub	objptr, #56
16718     05 20 16 F2 | 	cmp	local02, #5 wc
1671c     9C 00 90 CD |  if_b	jmp	#LR__1692
16720     56 00 00 FF 
16724     F0 E4 05 F1 | 	add	objptr, ##44272
16728     F2 26 02 FB | 	rdlong	local05, objptr
1672c     56 00 00 FF 
16730     F0 E4 85 F1 | 	sub	objptr, ##44272
16734     13 13 02 F6 | 	mov	arg01, local05
16738     09 33 02 F6 | 	mov	local11, arg01
1673c     97 06 48 FB | 	callpa	#(@LR__1691-@LR__1690)>>2,fcache_load_ptr_
16740                 | LR__1690
16740     19 FB C9 FA | 	rdbyte	result1, local11 wz
16744     01 32 06 51 |  if_ne	add	local11, #1
16748     F4 FF 9F 5D |  if_ne	jmp	#LR__1690
1674c                 | LR__1691
1674c     09 33 82 F1 | 	sub	local11, arg01
16750     19 15 02 F6 | 	mov	arg02, local11
16754     01 14 86 F1 | 	sub	arg02, #1
16758     13 13 02 F6 | 	mov	arg01, local05
1675c     88 46 B0 FD | 	call	#__system__Left_S
16760     56 00 00 FF 
16764     F0 E4 05 F1 | 	add	objptr, ##44272
16768     F2 FA 61 FC | 	wrlong	result1, objptr
1676c     56 00 00 FF 
16770     B8 E4 85 F1 | 	sub	objptr, ##44216
16774     F2 12 E2 FA | 	rdword	arg01, objptr
16778     02 12 86 F1 | 	sub	arg01, #2
1677c     02 E4 05 F1 | 	add	objptr, #2
16780     F2 14 C2 FA | 	rdbyte	arg02, objptr
16784     3A E4 85 F1 | 	sub	objptr, #58
16788     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1678c     20 12 06 F6 | 	mov	arg01, #32
16790     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
16794     38 E4 05 F1 | 	add	objptr, #56
16798     F2 12 E2 FA | 	rdword	arg01, objptr
1679c     02 12 86 F1 | 	sub	arg01, #2
167a0     02 E4 05 F1 | 	add	objptr, #2
167a4     F2 24 C2 FA | 	rdbyte	local04, objptr
167a8     3A E4 85 F1 | 	sub	objptr, #58
167ac     12 23 E2 F8 | 	getbyte	local03, local04, #0
167b0     11 15 02 F6 | 	mov	arg02, local03
167b4     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
167b8     24 00 90 FD | 	jmp	#LR__1693
167bc                 | LR__1692
167bc     47 01 00 FF 
167c0     97 20 06 F6 | 	mov	local02, ##@LR__4670
167c4     56 00 00 FF 
167c8     F0 E4 05 F1 | 	add	objptr, ##44272
167cc     F2 20 62 FC | 	wrlong	local02, objptr
167d0     56 00 00 FF 
167d4     B8 E4 85 F1 | 	sub	objptr, ##44216
167d8     F2 08 58 FC | 	wrword	#4, objptr
167dc     38 E4 85 F1 | 	sub	objptr, #56
167e0                 | LR__1693
167e0                 | LR__1694
167e0                 | '    
167e0                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
167e0                 | '  
167e0                 | '   if key4=key_enter then 
167e0     7A 00 00 FF 
167e4     78 E5 05 F1 | 	add	objptr, ##62840
167e8     F2 28 02 FB | 	rdlong	local06, objptr
167ec     7A 00 00 FF 
167f0     78 E5 85 F1 | 	sub	objptr, ##62840
167f4     8D 28 0E F2 | 	cmp	local06, #141 wz
167f8     50 00 90 5D |  if_ne	jmp	#LR__1695
167fc     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
16800     18 A2 BE FD | 	call	#_interpret
16804     47 01 00 FF 
16808     98 20 06 F6 | 	mov	local02, ##@LR__4671
1680c     56 00 00 FF 
16810     F0 E4 05 F1 | 	add	objptr, ##44272
16814     F2 20 62 FC | 	wrlong	local02, objptr
16818     1A FA 61 FD | 	getct	result1
1681c     24 00 00 FF 
16820     90 E4 05 F1 | 	add	objptr, ##18576
16824     F2 24 02 FB | 	rdlong	local04, objptr
16828     12 23 02 F6 | 	mov	local03, local04
1682c     11 FB 81 F1 | 	sub	result1, local03
16830     F2 FA 61 FC | 	wrlong	result1, objptr
16834     14 E4 85 F1 | 	sub	objptr, #20
16838     F2 00 68 FC | 	wrlong	#0, objptr
1683c     08 E4 05 F1 | 	add	objptr, #8
16840     F2 00 68 FC | 	wrlong	#0, objptr
16844     7A 00 00 FF 
16848     74 E5 85 F1 | 	sub	objptr, ##62836
1684c                 | LR__1695
1684c     7A 00 00 FF 
16850     70 E5 05 F1 | 	add	objptr, ##62832
16854     F2 00 68 FC | 	wrlong	#0, objptr
16858     7A 00 00 FF 
1685c     70 E5 85 F1 | 	sub	objptr, ##62832
16860     98 F6 9F FD | 	jmp	#LR__1670
16864     A7 F0 03 F6 | 	mov	ptra, fp
16868     B2 00 A0 FD | 	call	#popregs_
1686c                 | _program_ret
1686c     2D 00 64 FD | 	ret
16870                 | 
16870                 | ' '' this is not a main program.
16870                 | ' 
16870                 | ' '****************************************************************************************************************
16870                 | ' '                                                                                                             	*
16870                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
16870                 | ' '                                                                                                            	*
16870                 | ' ' mode - mode #, see below											*
16870                 | ' ' base - HDMI base pin												*
16870                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
16870                 | ' '														*
16870                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
16870                 | ' '' set bit #15 for custom timings														*
16870                 | ' '' p - 1 - psram, 0 - hub											*
16870                 | ' '' t - 1 - graphics, 0 - text											*
16870                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
16870                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
16870                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
16870                 | ' '														*
16870                 | ' '****************************************************************************************************************
16870                 | ' 
16870                 | ' pub start(base,mb):result |i
16870                 | _hg010b_spin2_start
16870                 | ' 
16870                 | ' '--------------------------- initialize pointers and variables
16870                 | ' 
16870                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
16870     30 E4 05 F1 | 	add	objptr, #48
16874     F2 FA 01 F6 | 	mov	result1, objptr
16878     28 E4 85 F1 | 	sub	objptr, #40
1687c     F2 FA 61 FC | 	wrlong	result1, objptr
16880                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
16880                 | ' hdmibase:=base							' HDMI base pin, 8*n
16880     18 E4 05 F1 | 	add	objptr, #24
16884     F2 12 62 FC | 	wrlong	arg01, objptr
16888                 | ' mailbox_ptr:=mb		
16888     04 E4 05 F1 | 	add	objptr, #4
1688c     F2 14 62 FC | 	wrlong	arg02, objptr
16890                 | ' mailbox0:=mb				' PSRAM mailbox pointer
16890     C1 E5 05 F1 | 	add	objptr, #449
16894     F2 14 62 FC | 	wrlong	arg02, objptr
16898                 | ' sprite_ptr:=@spr1ptr
16898     D8 E4 85 F1 | 	sub	objptr, #216
1689c     F2 FA 01 F6 | 	mov	result1, objptr
168a0     E5 E4 85 F1 | 	sub	objptr, #229
168a4     F2 FA 61 FC | 	wrlong	result1, objptr
168a8                 | ' 
168a8                 | ' 		'
168a8                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
168a8     E5 E4 05 F1 | 	add	objptr, #229
168ac     F2 FA 01 FB | 	rdlong	result1, objptr
168b0     D0 FA 05 F1 | 	add	result1, #208
168b4     FD 10 58 FC | 	wrword	#8, result1
168b8                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
168b8     F2 16 02 FB | 	rdlong	arg03, objptr
168bc     D2 16 06 F1 | 	add	arg03, #210
168c0     0B 21 58 FC | 	wrword	#16, arg03
168c4                 | ' leading_spaces:=0				'
168c4     A5 E5 05 F1 | 	add	objptr, #421
168c8     F2 00 68 FC | 	wrlong	#0, objptr
168cc                 | ' 
168cc                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
168cc     99 E4 85 F1 | 	sub	objptr, #153
168d0     00 00 A0 FF 
168d4     F2 0E 68 FC | 	wrlong	##1073741831, objptr
168d8                 | ' emptydl[1]:=0
168d8     04 E4 05 F1 | 	add	objptr, #4
168dc     F2 00 68 FC | 	wrlong	#0, objptr
168e0                 | ' 
168e0                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
168e0                 | ' 
168e0                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
168e0     28 E5 85 F1 | 	sub	objptr, #296
168e4     F2 02 68 FC | 	wrlong	#1, objptr
168e8                 | ' if s_debug<>0
168e8                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
168e8     20 00 80 FF 
168ec     F2 00 68 FC | 	wrlong	##16384, objptr
168f0     F5 E4 85 F1 | 	sub	objptr, #245
168f4                 | ' setmode()							' set the mode, see below
168f4     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
168f8                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
168f8     45 E4 05 F1 | 	add	objptr, #69
168fc     F2 FA 01 F6 | 	mov	result1, objptr
16900     35 E4 85 F1 | 	sub	objptr, #53
16904     F2 FA 61 FC | 	wrlong	result1, objptr
16908                 | ' cursor_ptr:=@cursor_x						
16908     28 E4 05 F1 | 	add	objptr, #40
1690c     F2 16 02 F6 | 	mov	arg03, objptr
16910     2C E4 85 F1 | 	sub	objptr, #44
16914     F2 16 62 FC | 	wrlong	arg03, objptr
16918                 | ' fontnum:=0  							' start with a PC type font 
16918     55 E4 05 F1 | 	add	objptr, #85
1691c     F2 00 68 FC | 	wrlong	#0, objptr
16920                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
16920     1C E4 05 F1 | 	add	objptr, #28
16924     F2 12 02 F6 | 	mov	arg01, objptr
16928     7D E4 85 F1 | 	sub	objptr, #125
1692c     10 00 00 FF 
16930     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
16934     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
16938     10 00 00 FF 
1693c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
16940     10 16 06 F6 | 	mov	arg03, #16
16944     B0 23 B0 FD | 	call	#__system____builtin_memmove
16948                 | ' leading_spaces:=0
16948     01 00 00 FF 
1694c     B2 E4 05 F1 | 	add	objptr, ##690
16950     F2 00 68 FC | 	wrlong	#0, objptr
16954     01 00 00 FF 
16958     B2 E4 85 F1 | 	sub	objptr, ##690
1695c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1695c                 | ' 
1695c                 | ' initcursor(154)
1695c     9A 12 06 F6 | 	mov	arg01, #154
16960     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
16964                 | ' 
16964                 | ' '---------------------------- start the cog
16964                 | ' 
16964                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
16964     10 00 00 FF 
16968     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1696c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
16970     10 00 00 FF 
16974     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
16978     10 E4 05 F1 | 	add	objptr, #16
1697c     10 FA 05 F6 | 	mov	result1, #16
16980     28 E4 61 FD | 	setq	objptr
16984     0A FB F1 FC | 	coginit	result1, arg02 wc
16988     01 FA 65 C6 |  if_b	neg	result1, #1
1698c     1C E4 05 F1 | 	add	objptr, #28
16990     F2 FA 61 FC | 	wrlong	result1, objptr
16994     2C E4 85 F1 | 	sub	objptr, #44
16998                 | ' waitms(40)							' wait for stabilize
16998     28 12 06 F6 | 	mov	arg01, #40
1699c     2C 27 B0 FD | 	call	#__system___waitms
169a0                 | ' return cog							' return the driver's cog #
169a0     2C E4 05 F1 | 	add	objptr, #44
169a4     F2 FA 01 FB | 	rdlong	result1, objptr
169a8     2C E4 85 F1 | 	sub	objptr, #44
169ac                 | _hg010b_spin2_start_ret
169ac     2D 00 64 FD | 	ret
169b0                 | 
169b0                 | ' 
169b0                 | ' 
169b0                 | ' '**************************************************************************************************************** 
169b0                 | ' '                                                                                                             	*
169b0                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
169b0                 | ' '  Mode number - see start() above or bits below								*
169b0                 | ' '                                                                                                             	*
169b0                 | ' '****************************************************************************************************************
169b0                 | ' 
169b0                 | ' '---------------------------- initialize a cursor (MSDOS type)
169b0                 | ' pub initcursor(color) |i
169b0                 | _hg010b_spin2_initcursor
169b0     03 4A 05 F6 | 	mov	COUNT_, #3
169b4     A8 00 A0 FD | 	call	#pushregs_
169b8     09 1F 02 F6 | 	mov	local01, arg01
169bc                 | ' 
169bc                 | ' cursor_x:=0							' place the cursor at 0:0
169bc     38 E4 05 F1 | 	add	objptr, #56
169c0     F2 00 58 FC | 	wrword	#0, objptr
169c4                 | ' cursor_y:=0
169c4     02 E4 05 F1 | 	add	objptr, #2
169c8     F2 00 48 FC | 	wrbyte	#0, objptr
169cc                 | ' repeat i from 0 to 111
169cc     00 20 06 F6 | 	mov	local02, #0
169d0     F8 E5 05 F1 | 	add	objptr, #504
169d4     97 1A 48 FB | 	callpa	#(@LR__1702-@LR__1700)>>2,fcache_load_ptr_
169d8                 | LR__1700
169d8                 | '   cursor[i]:=0
169d8     10 23 02 F6 | 	mov	local03, local02
169dc     F2 22 02 F1 | 	add	local03, objptr
169e0     11 01 48 FC | 	wrbyte	#0, local03
169e4     01 20 06 F1 | 	add	local02, #1
169e8     70 20 56 F2 | 	cmps	local02, #112 wc
169ec     E8 FF 9F CD |  if_b	jmp	#LR__1700
169f0                 | ' repeat i from 112 to 127
169f0     70 20 06 F6 | 	mov	local02, #112
169f4                 | LR__1701
169f4                 | '   cursor[i]:=color  
169f4     10 23 02 F6 | 	mov	local03, local02
169f8     F2 22 02 F1 | 	add	local03, objptr
169fc     11 1F 42 FC | 	wrbyte	local01, local03
16a00     01 20 06 F1 | 	add	local02, #1
16a04     80 20 16 F2 | 	cmp	local02, #128 wc
16a08     E8 FF 9F CD |  if_b	jmp	#LR__1701
16a0c                 | LR__1702
16a0c                 | ' 'repeat i from 0 to 127
16a0c                 | ' '  if ((i/8)//2)
16a0c                 | ' '    cursor[i]:=15
16a0c                 | ' '  else
16a0c                 | ' '    cursor[i]:=0
16a0c                 | ' '  if i>=120    
16a0c                 | ' '    cursor[i]:=40
16a0c                 | ' setspriteptr(17,@cursor)
16a0c     F2 14 02 F6 | 	mov	arg02, objptr
16a10     01 00 00 FF 
16a14     32 E4 85 F1 | 	sub	objptr, ##562
16a18     11 12 06 F6 | 	mov	arg01, #17
16a1c     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
16a20                 | ' setspritesize(17,8,16)
16a20     11 12 06 F6 | 	mov	arg01, #17
16a24     08 14 06 F6 | 	mov	arg02, #8
16a28     10 16 06 F6 | 	mov	arg03, #16
16a2c     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
16a30                 | ' setspritepos(17,0,0)
16a30     11 12 06 F6 | 	mov	arg01, #17
16a34     00 14 06 F6 | 	mov	arg02, #0
16a38     00 16 06 F6 | 	mov	arg03, #0
16a3c     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
16a40     A7 F0 03 F6 | 	mov	ptra, fp
16a44     B2 00 A0 FD | 	call	#popregs_
16a48                 | _hg010b_spin2_initcursor_ret
16a48     2D 00 64 FD | 	ret
16a4c                 | 
16a4c                 | ' 
16a4c                 | '  
16a4c                 | ' pub setcursorcolor(color) |i
16a4c                 | _hg010b_spin2_setcursorcolor
16a4c                 | ' 
16a4c                 | ' 
16a4c                 | ' repeat i from 0 to 111
16a4c     00 00 06 F6 | 	mov	_var01, #0
16a50     01 00 00 FF 
16a54     32 E4 05 F1 | 	add	objptr, ##562
16a58     97 1A 48 FB | 	callpa	#(@LR__1712-@LR__1710)>>2,fcache_load_ptr_
16a5c                 | LR__1710
16a5c                 | '   cursor[i]:=0
16a5c     00 03 02 F6 | 	mov	_var02, _var01
16a60     F2 02 02 F1 | 	add	_var02, objptr
16a64     01 01 48 FC | 	wrbyte	#0, _var02
16a68     01 00 06 F1 | 	add	_var01, #1
16a6c     70 00 56 F2 | 	cmps	_var01, #112 wc
16a70     E8 FF 9F CD |  if_b	jmp	#LR__1710
16a74                 | ' repeat i from 112 to 127
16a74     70 00 06 F6 | 	mov	_var01, #112
16a78                 | LR__1711
16a78                 | '   cursor[i]:=color  
16a78     00 03 02 F6 | 	mov	_var02, _var01
16a7c     F2 02 02 F1 | 	add	_var02, objptr
16a80     01 13 42 FC | 	wrbyte	arg01, _var02
16a84     01 00 06 F1 | 	add	_var01, #1
16a88     80 00 16 F2 | 	cmp	_var01, #128 wc
16a8c     E8 FF 9F CD |  if_b	jmp	#LR__1711
16a90                 | LR__1712
16a90     01 00 00 FF 
16a94     32 E4 85 F1 | 	sub	objptr, ##562
16a98                 | _hg010b_spin2_setcursorcolor_ret
16a98     2D 00 64 FD | 	ret
16a9c                 | 
16a9c                 | '  
16a9c                 | ' 
16a9c                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
16a9c                 | _hg010b_spin2_setmode
16a9c     02 4A 05 F6 | 	mov	COUNT_, #2
16aa0     A8 00 A0 FD | 	call	#pushregs_
16aa4                 | ' 
16aa4                 | ' 
16aa4                 | ' dl_ptr:=@emptydl[0]
16aa4     01 00 00 FF 
16aa8     19 E4 05 F1 | 	add	objptr, ##537
16aac     F2 64 02 F6 | 	mov	muldivb_, objptr
16ab0     FD E5 85 F1 | 	sub	objptr, #509
16ab4     F2 64 62 FC | 	wrlong	muldivb_, objptr
16ab8                 | ' 
16ab8                 | ' if cog>0 
16ab8     10 E4 05 F1 | 	add	objptr, #16
16abc     F2 64 02 FB | 	rdlong	muldivb_, objptr
16ac0     2C E4 85 F1 | 	sub	objptr, #44
16ac4     01 64 56 F2 | 	cmps	muldivb_, #1 wc
16ac8                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
16ac8     01 12 06 36 |  if_ae	mov	arg01, #1
16acc     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
16ad0                 | ' xres:=1024
16ad0     01 00 00 FF 
16ad4     22 E4 05 F1 | 	add	objptr, ##546
16ad8     02 00 80 FF 
16adc     F2 00 68 FC | 	wrlong	##1024, objptr
16ae0                 | ' yres:=576  
16ae0     04 E4 05 F1 | 	add	objptr, #4
16ae4     01 00 80 FF 
16ae8     F2 80 68 FC | 	wrlong	##576, objptr
16aec                 | ' ppl:=(timings[3])
16aec     10 00 00 FF 
16af0     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
16af4     F7 64 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
16af8     51 E5 85 F1 | 	sub	objptr, #337
16afc     F2 64 62 FC | 	wrlong	muldivb_, objptr
16b00                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
16b00     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
16b04     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
16b08     01 1E 66 F0 | 	shl	local01, #1
16b0c     80 E4 85 F1 | 	sub	objptr, #128
16b10     F2 1E 62 FC | 	wrlong	local01, objptr
16b14                 | ' cpl1:=cpl '' todo remove
16b14     04 E4 05 F1 | 	add	objptr, #4
16b18     F2 1E 62 FC | 	wrlong	local01, objptr
16b1c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
16b1c     02 00 00 FF 
16b20     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
16b24     41 E4 85 F1 | 	sub	objptr, #65
16b28     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
16b2c                 | ' repeat i from 0 to 3
16b2c     00 20 06 F6 | 	mov	local02, #0
16b30     02 00 00 FF 
16b34     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
16b38     08 E4 05 F1 | 	add	objptr, #8
16b3c     97 20 48 FB | 	callpa	#(@LR__1721-@LR__1720)>>2,fcache_load_ptr_
16b40                 | LR__1720
16b40                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
16b40     10 1F 02 F6 | 	mov	local01, local02
16b44     02 1E 66 F0 | 	shl	local01, #2
16b48     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
16b4c     F2 64 02 FB | 	rdlong	muldivb_, objptr
16b50     11 64 66 F0 | 	shl	muldivb_, #17
16b54     0F 1F 02 FB | 	rdlong	local01, local01
16b58     32 1F 02 F1 | 	add	local01, muldivb_
16b5c     80 40 38 FF 
16b60     00 1E 06 F1 | 	add	local01, ##1887502336
16b64     10 65 02 F6 | 	mov	muldivb_, local02
16b68     02 64 66 F0 | 	shl	muldivb_, #2
16b6c     F7 64 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
16b70     32 1F 62 FC | 	wrlong	local01, muldivb_
16b74     01 20 06 F1 | 	add	local02, #1
16b78     04 20 56 F2 | 	cmps	local02, #4 wc
16b7c     C0 FF 9F CD |  if_b	jmp	#LR__1720
16b80                 | LR__1721
16b80     20 E4 85 F1 | 	sub	objptr, #32
16b84                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
16b84     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
16b88     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
16b8c     14 1E 66 FC | 	wrlong	local01, #20
16b90                 | ' hubset(timings[10])
16b90     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
16b94     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
16b98     10 00 00 FF 
16b9c     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
16ba0     00 12 62 FD | 	hubset	arg01
16ba4                 | ' waitms(1)                                                   	' wait for stabilization
16ba4     01 12 06 F6 | 	mov	arg01, #1
16ba8     20 25 B0 FD | 	call	#__system___waitms
16bac     10 00 00 FF 
16bb0     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
16bb4     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
16bb8     5D E4 05 F1 | 	add	objptr, #93
16bbc     F2 20 62 FC | 	wrlong	local02, objptr
16bc0     10 1F 52 F6 | 	abs	local01, local02 wc
16bc4     04 1E 46 F0 | 	shr	local01, #4
16bc8     0F 1F 82 F6 | 	negc	local01, local01
16bcc     9C E4 05 F1 | 	add	objptr, #156
16bd0     F2 1E 62 FC | 	wrlong	local01, objptr
16bd4     A4 E4 85 F1 | 	sub	objptr, #164
16bd8     F2 20 02 FB | 	rdlong	local02, objptr
16bdc     08 E4 05 F1 | 	add	objptr, #8
16be0     F2 1E 02 FB | 	rdlong	local01, objptr
16be4     0F 21 02 FD | 	qmul	local02, local01
16be8                 | ' lines:=timings[11]
16be8                 | ' t_lines:=lines/16
16be8                 | ' buflen:=cpl*lines						' framebuffer length in longs
16be8     29 E4 85 F1 | 	sub	objptr, #41
16bec                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
16bec     19 1E C6 F9 | 	decod	local01, #25
16bf0                 | ' mode_ptr:=@timings						' set pointers to timings
16bf0     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
16bf4                 | ' graphmode:=1024+512+192+48							' det global variable
16bf4                 | ' makedl(graphmode)							' make a DL for the mode
16bf4     03 00 00 FF 
16bf8     F0 12 06 F6 | 	mov	arg01, ##1776
16bfc     18 20 62 FD | 	getqx	local02
16c00     F2 20 62 FC | 	wrlong	local02, objptr
16c04     34 E4 85 F1 | 	sub	objptr, #52
16c08     02 20 66 F0 | 	shl	local02, #2
16c0c     10 1F 82 F1 | 	sub	local01, local02
16c10     F2 1E 62 FC | 	wrlong	local01, objptr
16c14     14 E4 05 F1 | 	add	objptr, #20
16c18     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
16c1c     79 E4 05 F1 | 	add	objptr, #121
16c20     03 00 80 FF 
16c24     F2 E0 69 FC | 	wrlong	##1776, objptr
16c28     8D E4 85 F1 | 	sub	objptr, #141
16c2c     10 00 00 FF 
16c30     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
16c34     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
16c38                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
16c38     F2 1E 02 FB | 	rdlong	local01, objptr
16c3c     D9 E4 05 F1 | 	add	objptr, #217
16c40     F2 1E 62 FC | 	wrlong	local01, objptr
16c44                 | ' s_font_ptr:=font_ptr
16c44     D5 E4 85 F1 | 	sub	objptr, #213
16c48     F2 1E 02 FB | 	rdlong	local01, objptr
16c4c     D9 E4 05 F1 | 	add	objptr, #217
16c50     F2 1E 62 FC | 	wrlong	local01, objptr
16c54                 | ' s_lines:=lines
16c54     80 E4 85 F1 | 	sub	objptr, #128
16c58     F2 1E 02 FB | 	rdlong	local01, objptr
16c5c     84 E4 05 F1 | 	add	objptr, #132
16c60     F2 1E 62 FC | 	wrlong	local01, objptr
16c64                 | ' s_buflen:=buflen
16c64     AD E4 85 F1 | 	sub	objptr, #173
16c68     F2 1E 02 FB | 	rdlong	local01, objptr
16c6c     B5 E4 05 F1 | 	add	objptr, #181
16c70     F2 1E 62 FC | 	wrlong	local01, objptr
16c74                 | ' s_cpl:=cpl
16c74     94 E4 85 F1 | 	sub	objptr, #148
16c78     F2 1E 02 FB | 	rdlong	local01, objptr
16c7c     90 E4 05 F1 | 	add	objptr, #144
16c80     F2 1E 62 FC | 	wrlong	local01, objptr
16c84                 | ' s_cpl1:=cpl
16c84     90 E4 85 F1 | 	sub	objptr, #144
16c88     F2 1E 02 FB | 	rdlong	local01, objptr
16c8c     98 E4 05 F1 | 	add	objptr, #152
16c90     F2 1E 62 FC | 	wrlong	local01, objptr
16c94                 | ' st_lines:=t_lines
16c94     0C E4 05 F1 | 	add	objptr, #12
16c98     F2 1E 02 FB | 	rdlong	local01, objptr
16c9c     04 E4 05 F1 | 	add	objptr, #4
16ca0     F2 1E 62 FC | 	wrlong	local01, objptr
16ca4                 | ' ppl:=ppl/xzoom  
16ca4     28 E4 85 F1 | 	sub	objptr, #40
16ca8     F2 62 02 FB | 	rdlong	muldiva_, objptr
16cac     2C E4 05 F1 | 	add	objptr, #44
16cb0     F2 64 02 FB | 	rdlong	muldivb_, objptr
16cb4     01 E5 85 F1 | 	sub	objptr, #257
16cb8     BA 00 A0 FD | 	call	#divide_
16cbc     D5 E4 05 F1 | 	add	objptr, #213
16cc0     F2 64 62 FC | 	wrlong	muldivb_, objptr
16cc4                 | ' s_ppl:=ppl
16cc4     1C E4 05 F1 | 	add	objptr, #28
16cc8     F2 64 62 FC | 	wrlong	muldivb_, objptr
16ccc     F1 E4 85 F1 | 	sub	objptr, #241
16cd0                 | ' waitms(20)							' wait 
16cd0     14 12 06 F6 | 	mov	arg01, #20
16cd4     F4 23 B0 FD | 	call	#__system___waitms
16cd8     A7 F0 03 F6 | 	mov	ptra, fp
16cdc     B2 00 A0 FD | 	call	#popregs_
16ce0                 | _hg010b_spin2_setmode_ret
16ce0     2D 00 64 FD | 	ret
16ce4                 | 
16ce4                 | ' 
16ce4                 | ' 
16ce4                 | ' '****************************************************************************************************************
16ce4                 | ' '                                                                                                             	*
16ce4                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
16ce4                 | ' '                                                                                                             	*
16ce4                 | ' '****************************************************************************************************************
16ce4                 | ' 
16ce4                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
16ce4                 | _hg010b_spin2_makedl
16ce4                 | ' 
16ce4                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
16ce4                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
16ce4                 | ' repeat i from 0 to 11                                                           ' clear DL
16ce4     00 00 06 F6 | 	mov	_var01, #0
16ce8     E9 E5 05 F1 | 	add	objptr, #489
16cec     97 0E 48 FB | 	callpa	#(@LR__1731-@LR__1730)>>2,fcache_load_ptr_
16cf0                 | LR__1730
16cf0                 | '   displaylist[i]:=0 
16cf0     00 03 02 F6 | 	mov	_var02, _var01
16cf4     02 02 66 F0 | 	shl	_var02, #2
16cf8     F2 02 02 F1 | 	add	_var02, objptr
16cfc     01 01 68 FC | 	wrlong	#0, _var02
16d00     01 00 06 F1 | 	add	_var01, #1
16d04     0C 00 56 F2 | 	cmps	_var01, #12 wc
16d08     E4 FF 9F CD |  if_b	jmp	#LR__1730
16d0c                 | LR__1731
16d0c                 | '                         ' 
16d0c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
16d0c     8C E5 85 F1 | 	sub	objptr, #396
16d10     F2 02 02 FB | 	rdlong	_var02, objptr
16d14     14 02 66 F0 | 	shl	_var02, #20
16d18     01 02 06 F1 | 	add	_var02, #1
16d1c     04 E4 85 F1 | 	sub	objptr, #4
16d20     F2 00 02 FB | 	rdlong	_var01, objptr
16d24     02 00 66 F0 | 	shl	_var01, #2
16d28     04 00 66 F0 | 	shl	_var01, #4
16d2c     00 03 02 F1 | 	add	_var02, _var01
16d30     90 E5 05 F1 | 	add	objptr, #400
16d34     F2 02 62 FC | 	wrlong	_var02, objptr
16d38     E9 E5 85 F1 | 	sub	objptr, #489
16d3c                 | ' displaylist[1]:=buf_ptr<<4+%10  
16d3c     F2 02 02 FB | 	rdlong	_var02, objptr
16d40     04 02 66 F0 | 	shl	_var02, #4
16d44     02 02 06 F1 | 	add	_var02, #2
16d48     ED E5 05 F1 | 	add	objptr, #493
16d4c     F2 02 62 FC | 	wrlong	_var02, objptr
16d50                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
16d50     04 E4 85 F1 | 	sub	objptr, #4
16d54     F2 02 02 F6 | 	mov	_var02, objptr
16d58     CD E5 85 F1 | 	sub	objptr, #461
16d5c     F2 02 62 FC | 	wrlong	_var02, objptr
16d60     1C E4 85 F1 | 	sub	objptr, #28
16d64                 | _hg010b_spin2_makedl_ret
16d64     2D 00 64 FD | 	ret
16d68                 | 
16d68                 | ' 
16d68                 | ' 
16d68                 | ' '****************************************************************************************************************
16d68                 | ' '                                                                        					*
16d68                 | ' '  Graphic primitives                                                    					*
16d68                 | ' '                                                                        					*
16d68                 | ' '****************************************************************************************************************
16d68                 | ' 
16d68                 | ' pub setspriteptr(num,ptr)
16d68                 | _hg010b_spin2_setspriteptr
16d68                 | ' long[@spr1ptr+12*num]:=ptr
16d68     0D E5 05 F1 | 	add	objptr, #269
16d6c     F2 00 02 F6 | 	mov	_var01, objptr
16d70     09 03 02 F6 | 	mov	_var02, arg01
16d74     01 02 66 F0 | 	shl	_var02, #1
16d78     09 03 02 F1 | 	add	_var02, arg01
16d7c     02 02 66 F0 | 	shl	_var02, #2
16d80     01 01 02 F1 | 	add	_var01, _var02
16d84     00 15 62 FC | 	wrlong	arg02, _var01
16d88     0D E5 85 F1 | 	sub	objptr, #269
16d8c                 | _hg010b_spin2_setspriteptr_ret
16d8c     2D 00 64 FD | 	ret
16d90                 | 
16d90                 | ' 
16d90                 | ' pub setspritepos(num,x,y)
16d90                 | _hg010b_spin2_setspritepos
16d90                 | ' word[@spr1ptr+12*num+4]:=x
16d90     0D E5 05 F1 | 	add	objptr, #269
16d94     F2 00 02 F6 | 	mov	_var01, objptr
16d98     09 03 02 F6 | 	mov	_var02, arg01
16d9c     01 02 66 F0 | 	shl	_var02, #1
16da0     09 03 02 F1 | 	add	_var02, arg01
16da4     02 02 66 F0 | 	shl	_var02, #2
16da8     01 01 02 F1 | 	add	_var01, _var02
16dac     04 00 06 F1 | 	add	_var01, #4
16db0     00 15 52 FC | 	wrword	arg02, _var01
16db4                 | ' word[@spr1ptr+12*num+6]:=y
16db4     F2 00 02 F6 | 	mov	_var01, objptr
16db8     09 03 02 F6 | 	mov	_var02, arg01
16dbc     01 02 66 F0 | 	shl	_var02, #1
16dc0     09 03 02 F1 | 	add	_var02, arg01
16dc4     02 02 66 F0 | 	shl	_var02, #2
16dc8     01 01 02 F1 | 	add	_var01, _var02
16dcc     06 00 06 F1 | 	add	_var01, #6
16dd0     00 17 52 FC | 	wrword	arg03, _var01
16dd4     0D E5 85 F1 | 	sub	objptr, #269
16dd8                 | _hg010b_spin2_setspritepos_ret
16dd8     2D 00 64 FD | 	ret
16ddc                 | 
16ddc                 | ' 
16ddc                 | ' pub setspritesize(num,w,h)
16ddc                 | _hg010b_spin2_setspritesize
16ddc                 | ' word[@spr1ptr+12*num+8]:=w
16ddc     0D E5 05 F1 | 	add	objptr, #269
16de0     F2 00 02 F6 | 	mov	_var01, objptr
16de4     09 03 02 F6 | 	mov	_var02, arg01
16de8     01 02 66 F0 | 	shl	_var02, #1
16dec     09 03 02 F1 | 	add	_var02, arg01
16df0     02 02 66 F0 | 	shl	_var02, #2
16df4     01 01 02 F1 | 	add	_var01, _var02
16df8     08 00 06 F1 | 	add	_var01, #8
16dfc     00 15 52 FC | 	wrword	arg02, _var01
16e00                 | ' word[@spr1ptr+12*num+10]:=h
16e00     F2 00 02 F6 | 	mov	_var01, objptr
16e04     09 03 02 F6 | 	mov	_var02, arg01
16e08     01 02 66 F0 | 	shl	_var02, #1
16e0c     09 03 02 F1 | 	add	_var02, arg01
16e10     02 02 66 F0 | 	shl	_var02, #2
16e14     01 01 02 F1 | 	add	_var01, _var02
16e18     0A 00 06 F1 | 	add	_var01, #10
16e1c     00 17 52 FC | 	wrword	arg03, _var01
16e20     0D E5 85 F1 | 	sub	objptr, #269
16e24                 | _hg010b_spin2_setspritesize_ret
16e24     2D 00 64 FD | 	ret
16e28                 | 
16e28                 | ' 
16e28                 | ' 
16e28                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
16e28                 | ' 
16e28                 | ' 
16e28                 | ' pub putpixel(x,y,c)
16e28                 | _hg010b_spin2_putpixel
16e28     04 4A 05 F6 | 	mov	COUNT_, #4
16e2c     A8 00 A0 FD | 	call	#pushregs_
16e30     09 1F 02 F6 | 	mov	local01, arg01
16e34                 | ' 
16e34                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
16e34     00 20 06 F6 | 	mov	local02, #0
16e38     00 1E 56 F2 | 	cmps	local01, #0 wc
16e3c     01 20 66 36 |  if_ae	neg	local02, #1
16e40     E5 E4 05 F1 | 	add	objptr, #229
16e44     F2 1A 02 FB | 	rdlong	arg05, objptr
16e48     02 1A 66 F0 | 	shl	arg05, #2
16e4c     0D 1F 52 F2 | 	cmps	local01, arg05 wc
16e50     11 23 A2 F1 | 	subx	local03, local03
16e54     11 21 02 F5 | 	and	local02, local03
16e58     00 22 06 F6 | 	mov	local03, #0
16e5c     00 14 56 F2 | 	cmps	arg02, #0 wc
16e60     01 22 66 36 |  if_ae	neg	local03, #1
16e64     11 21 02 F5 | 	and	local02, local03
16e68     04 E4 85 F1 | 	sub	objptr, #4
16e6c     F2 22 02 FB | 	rdlong	local03, objptr
16e70     E1 E4 85 F1 | 	sub	objptr, #225
16e74     11 15 52 F2 | 	cmps	arg02, local03 wc
16e78     12 25 A2 F1 | 	subx	local04, local04
16e7c     12 21 CA F7 | 	test	local02, local04 wz
16e80     48 00 90 AD |  if_e	jmp	#LR__1740
16e84     D9 E4 05 F1 | 	add	objptr, #217
16e88     F2 12 02 FB | 	rdlong	arg01, objptr
16e8c     14 E4 05 F1 | 	add	objptr, #20
16e90     F2 24 02 FB | 	rdlong	local04, objptr
16e94     02 24 66 F0 | 	shl	local04, #2
16e98     0A 25 02 FD | 	qmul	local04, arg02
16e9c                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
16e9c     0B 15 02 F6 | 	mov	arg02, arg03
16ea0     01 16 06 F6 | 	mov	arg03, #1
16ea4     00 18 06 F6 | 	mov	arg04, #0
16ea8     01 1A 06 F6 | 	mov	arg05, #1
16eac     0A 00 00 FF 
16eb0     D3 E5 05 F1 | 	add	objptr, ##5587
16eb4     18 24 62 FD | 	getqx	local04
16eb8     0F 25 02 F1 | 	add	local04, local01
16ebc     12 13 02 F1 | 	add	arg01, local04
16ec0     FC 14 B0 FD | 	call	#_psram_spin2_fill
16ec4     0B 00 00 FF 
16ec8     C0 E4 85 F1 | 	sub	objptr, ##5824
16ecc                 | LR__1740
16ecc     A7 F0 03 F6 | 	mov	ptra, fp
16ed0     B2 00 A0 FD | 	call	#popregs_
16ed4                 | _hg010b_spin2_putpixel_ret
16ed4     2D 00 64 FD | 	ret
16ed8                 | 
16ed8                 | ' 
16ed8                 | ' pub putpixel2(x,y,c)
16ed8                 | _hg010b_spin2_putpixel2
16ed8     02 4A 05 F6 | 	mov	COUNT_, #2
16edc     A8 00 A0 FD | 	call	#pushregs_
16ee0     D9 E4 05 F1 | 	add	objptr, #217
16ee4     F2 1E 02 FB | 	rdlong	local01, objptr
16ee8     14 E4 05 F1 | 	add	objptr, #20
16eec     F2 1A 02 FB | 	rdlong	arg05, objptr
16ef0     02 1A 66 F0 | 	shl	arg05, #2
16ef4     0A 1B 02 FD | 	qmul	arg05, arg02
16ef8                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
16ef8     0B 15 02 F6 | 	mov	arg02, arg03
16efc     01 16 06 F6 | 	mov	arg03, #1
16f00     00 18 06 F6 | 	mov	arg04, #0
16f04     01 1A 06 F6 | 	mov	arg05, #1
16f08     0A 00 00 FF 
16f0c     D3 E5 05 F1 | 	add	objptr, ##5587
16f10     18 20 62 FD | 	getqx	local02
16f14     09 21 02 F1 | 	add	local02, arg01
16f18     10 1F 02 F1 | 	add	local01, local02
16f1c     0F 13 02 F6 | 	mov	arg01, local01
16f20     9C 14 B0 FD | 	call	#_psram_spin2_fill
16f24     0B 00 00 FF 
16f28     C0 E4 85 F1 | 	sub	objptr, ##5824
16f2c     A7 F0 03 F6 | 	mov	ptra, fp
16f30     B2 00 A0 FD | 	call	#popregs_
16f34                 | _hg010b_spin2_putpixel2_ret
16f34     2D 00 64 FD | 	ret
16f38                 | 
16f38                 | ' 
16f38                 | ' pub getpixel2(x,y): c 
16f38                 | _hg010b_spin2_getpixel2
16f38     02 4A 05 F6 | 	mov	COUNT_, #2
16f3c     A8 00 A0 FD | 	call	#pushregs_
16f40     0C F0 07 F1 | 	add	ptra, #12
16f44     04 4E 05 F1 | 	add	fp, #4
16f48     A7 12 62 FC | 	wrlong	arg01, fp
16f4c     04 4E 05 F1 | 	add	fp, #4
16f50     A7 14 62 FC | 	wrlong	arg02, fp
16f54     08 4E 85 F1 | 	sub	fp, #8
16f58     A7 00 68 FC | 	wrlong	#0, fp
16f5c     A7 12 02 F6 | 	mov	arg01, fp
16f60     D9 E4 05 F1 | 	add	objptr, #217
16f64     F2 14 02 FB | 	rdlong	arg02, objptr
16f68     14 E4 05 F1 | 	add	objptr, #20
16f6c     F2 16 02 FB | 	rdlong	arg03, objptr
16f70     02 16 66 F0 | 	shl	arg03, #2
16f74     08 4E 05 F1 | 	add	fp, #8
16f78     A7 FA 01 FB | 	rdlong	result1, fp
16f7c     FD 16 02 FD | 	qmul	arg03, result1
16f80                 | ' 
16f80                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
16f80     04 4E 85 F1 | 	sub	fp, #4
16f84     A7 1E 02 FB | 	rdlong	local01, fp
16f88     04 4E 85 F1 | 	sub	fp, #4
16f8c     01 16 06 F6 | 	mov	arg03, #1
16f90     0A 00 00 FF 
16f94     D3 E5 05 F1 | 	add	objptr, ##5587
16f98     18 20 62 FD | 	getqx	local02
16f9c     0F 21 02 F1 | 	add	local02, local01
16fa0     10 15 02 F1 | 	add	arg02, local02
16fa4     E0 12 B0 FD | 	call	#_psram_spin2_read1
16fa8     0B 00 00 FF 
16fac     C0 E4 85 F1 | 	sub	objptr, ##5824
16fb0                 | ' return c
16fb0     A7 FA 01 FB | 	rdlong	result1, fp
16fb4     A7 F0 03 F6 | 	mov	ptra, fp
16fb8     B2 00 A0 FD | 	call	#popregs_
16fbc                 | _hg010b_spin2_getpixel2_ret
16fbc     2D 00 64 FD | 	ret
16fc0                 | 
16fc0                 | '   
16fc0                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
16fc0                 | ' 
16fc0                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
16fc0                 | _hg010b_spin2_fastline
16fc0     02 4A 05 F6 | 	mov	COUNT_, #2
16fc4     A8 00 A0 FD | 	call	#pushregs_
16fc8     09 1F 02 F6 | 	mov	local01, arg01
16fcc     0A 21 02 F6 | 	mov	local02, arg02
16fd0                 | ' 
16fd0                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
16fd0     00 16 56 F2 | 	cmps	arg03, #0 wc
16fd4     F4 00 90 CD |  if_b	jmp	#LR__1750
16fd8     01 00 00 FF 
16fdc     26 E4 05 F1 | 	add	objptr, ##550
16fe0     F2 1A 02 FB | 	rdlong	arg05, objptr
16fe4     01 00 00 FF 
16fe8     26 E4 85 F1 | 	sub	objptr, ##550
16fec     0D 17 52 F2 | 	cmps	arg03, arg05 wc
16ff0     D8 00 90 3D |  if_ae	jmp	#LR__1750
16ff4     00 1E 56 F2 | 	cmps	local01, #0 wc
16ff8     00 20 56 C2 |  if_b	cmps	local02, #0 wc
16ffc     CC 00 90 CD |  if_b	jmp	#LR__1750
17000     01 00 00 FF 
17004     22 E4 05 F1 | 	add	objptr, ##546
17008     F2 1A 02 FB | 	rdlong	arg05, objptr
1700c     01 00 00 FF 
17010     22 E4 85 F1 | 	sub	objptr, ##546
17014     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
17018     01 00 00 1F 
1701c     22 E4 05 11 |  if_a	add	objptr, ##546
17020     F2 12 02 1B |  if_a	rdlong	arg01, objptr
17024     01 00 00 1F 
17028     22 E4 85 11 |  if_a	sub	objptr, ##546
1702c     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
17030                 | '   return
17030     98 00 90 1D |  if_a	jmp	#LR__1750
17034     10 1F 5A F2 | 	cmps	local01, local02 wcz
17038     0F 1B 02 16 |  if_a	mov	arg05, local01
1703c     10 1F 02 16 |  if_a	mov	local01, local02
17040     0D 21 02 16 |  if_a	mov	local02, arg05
17044     00 1E 56 F2 | 	cmps	local01, #0 wc
17048     00 1E 06 C6 |  if_b	mov	local01, #0
1704c     01 00 00 FF 
17050     22 E4 05 F1 | 	add	objptr, ##546
17054     F2 1A 02 FB | 	rdlong	arg05, objptr
17058     01 00 00 FF 
1705c     22 E4 85 F1 | 	sub	objptr, ##546
17060     0D 21 52 F2 | 	cmps	local02, arg05 wc
17064     01 00 00 3F 
17068     22 E4 05 31 |  if_ae	add	objptr, ##546
1706c     F2 20 02 3B |  if_ae	rdlong	local02, objptr
17070     01 00 00 3F 
17074     22 E4 85 31 |  if_ae	sub	objptr, ##546
17078     D9 E4 05 F1 | 	add	objptr, #217
1707c     F2 12 02 FB | 	rdlong	arg01, objptr
17080     14 E4 05 F1 | 	add	objptr, #20
17084     F2 1A 02 FB | 	rdlong	arg05, objptr
17088     02 1A 66 F0 | 	shl	arg05, #2
1708c     0B 1B 02 FD | 	qmul	arg05, arg03
17090                 | ' if x1>x2
17090                 | '   x1,x2:=x2,x1
17090                 | ' if x1<0 
17090                 | '   x1:=0
17090                 | ' if x2>=xres
17090                 | '   x2:=xres-1  
17090     01 20 86 31 |  if_ae	sub	local02, #1
17094                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
17094     01 16 06 F6 | 	mov	arg03, #1
17098     10 17 02 F1 | 	add	arg03, local02
1709c     0F 17 82 F1 | 	sub	arg03, local01
170a0     0C 15 02 F6 | 	mov	arg02, arg04
170a4     00 18 06 F6 | 	mov	arg04, #0
170a8     01 1A 06 F6 | 	mov	arg05, #1
170ac     0A 00 00 FF 
170b0     D3 E5 05 F1 | 	add	objptr, ##5587
170b4     18 20 62 FD | 	getqx	local02
170b8     0F 21 02 F1 | 	add	local02, local01
170bc     10 13 02 F1 | 	add	arg01, local02
170c0     FC 12 B0 FD | 	call	#_psram_spin2_fill
170c4     0B 00 00 FF 
170c8     C0 E4 85 F1 | 	sub	objptr, ##5824
170cc                 | LR__1750
170cc     A7 F0 03 F6 | 	mov	ptra, fp
170d0     B2 00 A0 FD | 	call	#popregs_
170d4                 | _hg010b_spin2_fastline_ret
170d4     2D 00 64 FD | 	ret
170d8                 | 
170d8                 | ' 
170d8                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
170d8                 | _hg010b_spin2_draw
170d8     0E 4A 05 F6 | 	mov	COUNT_, #14
170dc     A8 00 A0 FD | 	call	#pushregs_
170e0     09 1F 02 F6 | 	mov	local01, arg01
170e4     0A 21 02 F6 | 	mov	local02, arg02
170e8     0B 23 02 F6 | 	mov	local03, arg03
170ec     0C 25 02 F6 | 	mov	local04, arg04
170f0     0D 27 02 F6 | 	mov	local05, arg05
170f4                 | ' 
170f4                 | ' if (y1==y2)
170f4     12 21 0A F2 | 	cmp	local02, local04 wz
170f8     18 00 90 5D |  if_ne	jmp	#LR__1760
170fc                 | '   fastline(x1,x2,y1,c)
170fc     0F 13 02 F6 | 	mov	arg01, local01
17100     11 15 02 F6 | 	mov	arg02, local03
17104     10 17 02 F6 | 	mov	arg03, local02
17108     13 19 02 F6 | 	mov	arg04, local05
1710c     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
17110     F8 00 90 FD | 	jmp	#LR__1766
17114                 | LR__1760
17114                 | ' else  
17114                 | '   x:=x1
17114     0F 29 02 F6 | 	mov	local06, local01
17118                 | '   y:=y1
17118     10 2B 02 F6 | 	mov	local07, local02
1711c                 | ' 
1711c                 | '   if (x1<x2) 
1711c     11 1F 52 F2 | 	cmps	local01, local03 wc
17120                 | '     xi:=1
17120     01 2C 06 C6 |  if_b	mov	local08, #1
17124                 | '     dx:=x2-x1
17124     11 2F 02 C6 |  if_b	mov	local09, local03
17128     0F 2F 82 C1 |  if_b	sub	local09, local01
1712c                 | '   else
1712c                 | '     xi:=-1
1712c     01 2C 66 36 |  if_ae	neg	local08, #1
17130                 | '     dx:=x1-x2
17130     11 1F 82 31 |  if_ae	sub	local01, local03
17134     0F 2F 02 36 |  if_ae	mov	local09, local01
17138                 | '   
17138                 | '   if (y1<y2) 
17138     12 21 52 F2 | 	cmps	local02, local04 wc
1713c                 | '     yi:=1
1713c     01 30 06 C6 |  if_b	mov	local10, #1
17140                 | '     dy:=y2-y1
17140     12 33 02 C6 |  if_b	mov	local11, local04
17144     10 33 82 C1 |  if_b	sub	local11, local02
17148                 | '   else
17148                 | '     yi:=-1
17148     01 30 66 36 |  if_ae	neg	local10, #1
1714c                 | '     dy:=y1-y2
1714c     12 21 82 31 |  if_ae	sub	local02, local04
17150     10 33 02 36 |  if_ae	mov	local11, local02
17154                 | ' 
17154                 | '   putpixel(x,y,c)
17154     13 17 02 F6 | 	mov	arg03, local05
17158     14 13 02 F6 | 	mov	arg01, local06
1715c     15 15 02 F6 | 	mov	arg02, local07
17160     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
17164                 | ' 
17164                 | '   if (dx>dy)
17164     19 2F 5A F2 | 	cmps	local09, local11 wcz
17168     50 00 90 ED |  if_be	jmp	#LR__1762
1716c                 | '     ai:=(dy-dx)*2
1716c     19 35 02 F6 | 	mov	local12, local11
17170     17 35 82 F1 | 	sub	local12, local09
17174     01 34 66 F0 | 	shl	local12, #1
17178                 | '     bi:=dy*2
17178     01 32 66 F0 | 	shl	local11, #1
1717c     19 37 02 F6 | 	mov	local13, local11
17180                 | '     d:= bi-dx
17180     1B 39 02 F6 | 	mov	local14, local13
17184     17 39 82 F1 | 	sub	local14, local09
17188                 | '     repeat while (x<>x2) 
17188                 | LR__1761
17188     11 29 0A F2 | 	cmp	local06, local03 wz
1718c     7C 00 90 AD |  if_e	jmp	#LR__1765
17190                 | '       if (d>=0) 
17190     00 38 56 F2 | 	cmps	local14, #0 wc
17194                 | '         x+=xi
17194     16 29 02 31 |  if_ae	add	local06, local08
17198                 | '         y+=yi
17198     18 2B 02 31 |  if_ae	add	local07, local10
1719c                 | '         d+=ai
1719c     1A 39 02 31 |  if_ae	add	local14, local12
171a0                 | '       else
171a0                 | '         d+=bi
171a0     1B 39 02 C1 |  if_b	add	local14, local13
171a4                 | '         x+=xi
171a4     16 29 02 C1 |  if_b	add	local06, local08
171a8                 | '       putpixel(x,y,c)
171a8     14 13 02 F6 | 	mov	arg01, local06
171ac     15 15 02 F6 | 	mov	arg02, local07
171b0     13 17 02 F6 | 	mov	arg03, local05
171b4     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
171b8     CC FF 9F FD | 	jmp	#LR__1761
171bc                 | LR__1762
171bc                 | '   else
171bc                 | '     ai:=(dx-dy)*2
171bc     17 35 02 F6 | 	mov	local12, local09
171c0     19 35 82 F1 | 	sub	local12, local11
171c4     01 34 66 F0 | 	shl	local12, #1
171c8                 | '     bi:=dx*2
171c8     01 2E 66 F0 | 	shl	local09, #1
171cc     17 37 02 F6 | 	mov	local13, local09
171d0                 | '     d:=bi-dy
171d0     1B 39 02 F6 | 	mov	local14, local13
171d4     19 39 82 F1 | 	sub	local14, local11
171d8                 | '     repeat while (y<>y2)
171d8                 | LR__1763
171d8     12 2B 0A F2 | 	cmp	local07, local04 wz
171dc     2C 00 90 AD |  if_e	jmp	#LR__1764
171e0                 | '       if (d>=0)
171e0     00 38 56 F2 | 	cmps	local14, #0 wc
171e4                 | '         x+=xi
171e4     16 29 02 31 |  if_ae	add	local06, local08
171e8                 | '         y+=yi
171e8     18 2B 02 31 |  if_ae	add	local07, local10
171ec                 | '         d+=ai
171ec     1A 39 02 31 |  if_ae	add	local14, local12
171f0                 | '       else
171f0                 | '         d+=bi
171f0     1B 39 02 C1 |  if_b	add	local14, local13
171f4                 | '         y+=yi
171f4     18 2B 02 C1 |  if_b	add	local07, local10
171f8                 | '       putpixel(x, y,c)
171f8     14 13 02 F6 | 	mov	arg01, local06
171fc     15 15 02 F6 | 	mov	arg02, local07
17200     13 17 02 F6 | 	mov	arg03, local05
17204     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
17208     CC FF 9F FD | 	jmp	#LR__1763
1720c                 | LR__1764
1720c                 | LR__1765
1720c                 | LR__1766
1720c     A7 F0 03 F6 | 	mov	ptra, fp
17210     B2 00 A0 FD | 	call	#popregs_
17214                 | _hg010b_spin2_draw_ret
17214     2D 00 64 FD | 	ret
17218                 | 
17218                 | '  
17218                 | ' pub fillpush(val) 
17218                 | _hg010b_spin2_fillpush
17218                 | ' fillstack[fillptr]:=val
17218     0B 00 00 FF 
1721c     B6 E4 05 F1 | 	add	objptr, ##5814
17220     F2 00 02 FB | 	rdlong	_var01, objptr
17224     02 00 66 F0 | 	shl	_var01, #2
17228     0A 00 00 FF 
1722c     00 E4 85 F1 | 	sub	objptr, ##5120
17230     F2 00 02 F1 | 	add	_var01, objptr
17234     00 13 62 FC | 	wrlong	arg01, _var01
17238                 | ' fillptr+=1   
17238     0A 00 00 FF 
1723c     00 E4 05 F1 | 	add	objptr, ##5120
17240     F2 00 02 FB | 	rdlong	_var01, objptr
17244     01 00 06 F1 | 	add	_var01, #1
17248     F2 00 62 FC | 	wrlong	_var01, objptr
1724c     0B 00 00 FF 
17250     B6 E4 85 F1 | 	sub	objptr, ##5814
17254                 | _hg010b_spin2_fillpush_ret
17254     2D 00 64 FD | 	ret
17258                 | 
17258                 | ' 
17258                 | '     
17258                 | ' pub fillpop() : val
17258                 | _hg010b_spin2_fillpop
17258                 | ' 
17258                 | ' fillptr-=1
17258     0B 00 00 FF 
1725c     B6 E4 05 F1 | 	add	objptr, ##5814
17260     F2 FA 01 FB | 	rdlong	result1, objptr
17264     01 FA 85 F1 | 	sub	result1, #1
17268     F2 FA 61 FC | 	wrlong	result1, objptr
1726c                 | ' if fillptr<0
1726c     0B 00 00 FF 
17270     B6 E4 85 F1 | 	sub	objptr, ##5814
17274     00 FA 55 F2 | 	cmps	result1, #0 wc
17278                 | '   fillptr:=0
17278     0B 00 00 CF 
1727c     B6 E4 05 C1 |  if_b	add	objptr, ##5814
17280     F2 00 68 CC |  if_b	wrlong	#0, objptr
17284     0B 00 00 CF 
17288     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
1728c                 | '   val:=-12345
1728c     E7 FF 7F CF 
17290     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
17294     28 00 90 CD |  if_b	jmp	#LR__1770
17298                 | ' else 
17298                 | '   val:=fillstack[fillptr]
17298     0B 00 00 FF 
1729c     B6 E4 05 F1 | 	add	objptr, ##5814
172a0     F2 00 02 FB | 	rdlong	_var01, objptr
172a4     02 00 66 F0 | 	shl	_var01, #2
172a8     0A 00 00 FF 
172ac     00 E4 85 F1 | 	sub	objptr, ##5120
172b0     F2 00 02 F1 | 	add	_var01, objptr
172b4     00 01 02 FB | 	rdlong	_var01, _var01
172b8     01 00 00 FF 
172bc     B6 E4 85 F1 | 	sub	objptr, ##694
172c0                 | LR__1770
172c0                 | ' return val
172c0     00 FB 01 F6 | 	mov	result1, _var01
172c4                 | _hg010b_spin2_fillpop_ret
172c4     2D 00 64 FD | 	ret
172c8                 | 
172c8                 | ' 
172c8                 | '       
172c8                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
172c8                 | _hg010b_spin2_fill
172c8     0B 4A 05 F6 | 	mov	COUNT_, #11
172cc     A8 00 A0 FD | 	call	#pushregs_
172d0                 | ' 
172d0                 | ' newcolor:=newcolor & 255
172d0     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
172d4                 | ' oldcolor:=oldcolor & 255
172d4     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
172d8                 | ' 
172d8                 | ' if (oldcolor == newcolor) 
172d8     0F 21 0A F2 | 	cmp	local02, local01 wz
172dc                 | '   return
172dc     70 02 90 AD |  if_e	jmp	#LR__1789
172e0                 | ' 
172e0                 | ' fillptr:=0
172e0     0B 00 00 FF 
172e4     B6 E4 05 F1 | 	add	objptr, ##5814
172e8     F2 00 68 FC | 	wrlong	#0, objptr
172ec                 | ' fillmax:=0
172ec     04 E4 05 F1 | 	add	objptr, #4
172f0     F2 00 68 FC | 	wrlong	#0, objptr
172f4     0B 00 00 FF 
172f8     BA E4 85 F1 | 	sub	objptr, ##5818
172fc                 | ' fillpush(x)
172fc     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
17300                 | ' fillpush(y)
17300     0A 13 02 F6 | 	mov	arg01, arg02
17304     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
17308                 | ' y:=fillpop()
17308     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1730c     FD 22 02 F6 | 	mov	local03, result1
17310                 | ' x:=fillpop()
17310     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
17314     FD 24 02 F6 | 	mov	local04, result1
17318                 | ' 'pinhigh(38)
17318                 | ' repeat while (x>-1)       
17318                 | LR__1780
17318     00 24 56 F2 | 	cmps	local04, #0 wc
1731c     30 02 90 CD |  if_b	jmp	#LR__1788
17320                 | '  ' pintoggle(39)
17320                 | '   x1 := x
17320     12 27 02 F6 | 	mov	local05, local04
17324                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
17324                 | LR__1781
17324     00 28 06 F6 | 	mov	local06, #0
17328     00 2A 06 F6 | 	mov	local07, #0
1732c     00 26 56 F2 | 	cmps	local05, #0 wc
17330     01 2A 66 36 |  if_ae	neg	local07, #1
17334     00 2A 0E F2 | 	cmp	local07, #0 wz
17338     00 28 26 56 |  if_ne	not	local06, #0
1733c     00 2C 06 F6 | 	mov	local08, #0
17340     00 2E 06 F6 | 	mov	local09, #0
17344     11 15 02 F6 | 	mov	arg02, local03
17348     13 13 02 F6 | 	mov	arg01, local05
1734c     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
17350     10 FB 09 F2 | 	cmp	result1, local02 wz
17354     00 2E 26 A6 |  if_e	not	local09, #0
17358     00 2E 0E F2 | 	cmp	local09, #0 wz
1735c     00 2C 26 56 |  if_ne	not	local08, #0
17360     16 29 CA F7 | 	test	local06, local08 wz
17364                 | '     x1--
17364     01 26 86 51 |  if_ne	sub	local05, #1
17368     B8 FF 9F 5D |  if_ne	jmp	#LR__1781
1736c                 | '   x1++
1736c     01 26 06 F1 | 	add	local05, #1
17370                 | '   spanabove := 0
17370     00 30 06 F6 | 	mov	local10, #0
17374                 | '   spanbelow := 0
17374     00 32 06 F6 | 	mov	local11, #0
17378                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
17378                 | LR__1782
17378     00 28 06 F6 | 	mov	local06, #0
1737c     02 00 00 FF 
17380     00 26 56 F2 | 	cmps	local05, ##1024 wc
17384     00 28 26 C6 |  if_b	not	local06, #0
17388     00 2C 06 F6 | 	mov	local08, #0
1738c     00 2E 06 F6 | 	mov	local09, #0
17390     11 15 02 F6 | 	mov	arg02, local03
17394     13 13 02 F6 | 	mov	arg01, local05
17398     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1739c     10 FB 09 F2 | 	cmp	result1, local02 wz
173a0     00 2E 26 A6 |  if_e	not	local09, #0
173a4     00 2E 0E F2 | 	cmp	local09, #0 wz
173a8     00 2C 26 56 |  if_ne	not	local08, #0
173ac     16 29 CA F7 | 	test	local06, local08 wz
173b0     88 01 90 AD |  if_e	jmp	#LR__1787
173b4                 | '     putpixel2 (x1,y, newcolor & 255)
173b4     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
173b8     13 13 02 F6 | 	mov	arg01, local05
173bc     11 15 02 F6 | 	mov	arg02, local03
173c0     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
173c4                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
173c4     00 28 06 F6 | 	mov	local06, #0
173c8     00 2A 06 F6 | 	mov	local07, #0
173cc     00 30 0E F2 | 	cmp	local10, #0 wz
173d0     01 22 56 A2 |  if_e	cmps	local03, #1 wc
173d4     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
173d8     00 2A 0E F2 | 	cmp	local07, #0 wz
173dc     00 28 26 56 |  if_ne	not	local06, #0
173e0     00 2C 06 F6 | 	mov	local08, #0
173e4     00 2E 06 F6 | 	mov	local09, #0
173e8     11 15 02 F6 | 	mov	arg02, local03
173ec     01 14 86 F1 | 	sub	arg02, #1
173f0     13 13 02 F6 | 	mov	arg01, local05
173f4     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
173f8     10 FB 09 F2 | 	cmp	result1, local02 wz
173fc     00 2E 26 A6 |  if_e	not	local09, #0
17400     00 2E 0E F2 | 	cmp	local09, #0 wz
17404     00 2C 26 56 |  if_ne	not	local08, #0
17408     16 29 CA F7 | 	test	local06, local08 wz
1740c     1C 00 90 AD |  if_e	jmp	#LR__1783
17410                 | '       fillpush(x1)
17410     13 13 02 F6 | 	mov	arg01, local05
17414     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
17418                 | '       fillpush(y-1)
17418     11 13 02 F6 | 	mov	arg01, local03
1741c     01 12 86 F1 | 	sub	arg01, #1
17420     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
17424                 | '       spanabove := 1 
17424     01 30 06 F6 | 	mov	local10, #1
17428     4C 00 90 FD | 	jmp	#LR__1784
1742c                 | LR__1783
1742c                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1742c     00 28 06 F6 | 	mov	local06, #0
17430     00 2A 06 F6 | 	mov	local07, #0
17434     00 30 0E F2 | 	cmp	local10, #0 wz
17438     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1743c     01 2A 66 16 |  if_a	neg	local07, #1
17440     00 2A 0E F2 | 	cmp	local07, #0 wz
17444     00 28 26 56 |  if_ne	not	local06, #0
17448     00 2C 06 F6 | 	mov	local08, #0
1744c     00 2E 06 F6 | 	mov	local09, #0
17450     11 15 02 F6 | 	mov	arg02, local03
17454     01 14 86 F1 | 	sub	arg02, #1
17458     13 13 02 F6 | 	mov	arg01, local05
1745c     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
17460     10 FB 09 F2 | 	cmp	result1, local02 wz
17464     00 2E 26 56 |  if_ne	not	local09, #0
17468     00 2E 0E F2 | 	cmp	local09, #0 wz
1746c     00 2C 26 56 |  if_ne	not	local08, #0
17470     16 29 CA F7 | 	test	local06, local08 wz
17474                 | '       spanabove := 0 
17474     00 30 06 56 |  if_ne	mov	local10, #0
17478                 | LR__1784
17478                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
17478     00 28 06 F6 | 	mov	local06, #0
1747c     00 2A 06 F6 | 	mov	local07, #0
17480     00 32 0E F2 | 	cmp	local11, #0 wz
17484     01 00 00 AF 
17488     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1748c     01 2A 66 86 |  if_c_and_z	neg	local07, #1
17490     00 2A 0E F2 | 	cmp	local07, #0 wz
17494     00 28 26 56 |  if_ne	not	local06, #0
17498     00 2C 06 F6 | 	mov	local08, #0
1749c     00 2E 06 F6 | 	mov	local09, #0
174a0     11 15 02 F6 | 	mov	arg02, local03
174a4     01 14 06 F1 | 	add	arg02, #1
174a8     13 13 02 F6 | 	mov	arg01, local05
174ac     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
174b0     10 FB 09 F2 | 	cmp	result1, local02 wz
174b4     00 2E 26 A6 |  if_e	not	local09, #0
174b8     00 2E 0E F2 | 	cmp	local09, #0 wz
174bc     00 2C 26 56 |  if_ne	not	local08, #0
174c0     16 29 CA F7 | 	test	local06, local08 wz
174c4     1C 00 90 AD |  if_e	jmp	#LR__1785
174c8                 | '       fillpush(x1)
174c8     13 13 02 F6 | 	mov	arg01, local05
174cc     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
174d0                 | '       fillpush(y + 1)
174d0     11 13 02 F6 | 	mov	arg01, local03
174d4     01 12 06 F1 | 	add	arg01, #1
174d8     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
174dc                 | '       spanBelow := 1
174dc     01 32 06 F6 | 	mov	local11, #1
174e0     50 00 90 FD | 	jmp	#LR__1786
174e4                 | LR__1785
174e4                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
174e4     00 28 06 F6 | 	mov	local06, #0
174e8     00 2A 06 F6 | 	mov	local07, #0
174ec     00 32 0E F2 | 	cmp	local11, #0 wz
174f0     01 00 00 5F 
174f4     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
174f8     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
174fc     00 2A 0E F2 | 	cmp	local07, #0 wz
17500     00 28 26 56 |  if_ne	not	local06, #0
17504     00 2C 06 F6 | 	mov	local08, #0
17508     00 2E 06 F6 | 	mov	local09, #0
1750c     11 15 02 F6 | 	mov	arg02, local03
17510     01 14 06 F1 | 	add	arg02, #1
17514     13 13 02 F6 | 	mov	arg01, local05
17518     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1751c     10 FB 09 F2 | 	cmp	result1, local02 wz
17520     00 2E 26 56 |  if_ne	not	local09, #0
17524     00 2E 0E F2 | 	cmp	local09, #0 wz
17528     00 2C 26 56 |  if_ne	not	local08, #0
1752c     16 29 CA F7 | 	test	local06, local08 wz
17530                 | '       spanbelow := 0
17530     00 32 06 56 |  if_ne	mov	local11, #0
17534                 | LR__1786
17534                 | '     x1++
17534     01 26 06 F1 | 	add	local05, #1
17538     3C FE 9F FD | 	jmp	#LR__1782
1753c                 | LR__1787
1753c                 | '   y:=fillpop()
1753c     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
17540     FD 22 02 F6 | 	mov	local03, result1
17544                 | '   x:=fillpop()
17544     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
17548     FD 24 02 F6 | 	mov	local04, result1
1754c     C8 FD 9F FD | 	jmp	#LR__1780
17550                 | LR__1788
17550                 | LR__1789
17550     A7 F0 03 F6 | 	mov	ptra, fp
17554     B2 00 A0 FD | 	call	#popregs_
17558                 | _hg010b_spin2_fill_ret
17558     2D 00 64 FD | 	ret
1755c                 | 
1755c                 | ' 'pinlow(38)    
1755c                 | ' 
1755c                 | ' '-- A filled circle -----------------------------------------------------
1755c                 | ' 
1755c                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1755c                 | _hg010b_spin2_fcircle
1755c     08 4A 05 F6 | 	mov	COUNT_, #8
17560     A8 00 A0 FD | 	call	#pushregs_
17564     0B 1F 02 F6 | 	mov	local01, arg03
17568     FF FF 7F FF 
1756c     FE 1F 06 FD | 	qmul	local01, ##-2
17570     09 21 02 F6 | 	mov	local02, arg01
17574     0A 23 02 F6 | 	mov	local03, arg02
17578     0C 25 02 F6 | 	mov	local04, arg04
1757c                 | ' 
1757c                 | ' d:=5-4*r
1757c     0F 19 02 F6 | 	mov	arg04, local01
17580     02 18 66 F0 | 	shl	arg04, #2
17584     05 26 06 F6 | 	mov	local05, #5
17588     0C 27 82 F1 | 	sub	local05, arg04
1758c                 | ' x:=0
1758c     00 28 06 F6 | 	mov	local06, #0
17590                 | ' y:=r
17590                 | ' da:=(-2*r+5)*4
17590                 | ' db:=3*4
17590     0C 2A 06 F6 | 	mov	local07, #12
17594                 | ' repeat while (x<=y) 
17594     18 2C 62 FD | 	getqx	local08
17598     05 2C 06 F1 | 	add	local08, #5
1759c     02 2C 66 F0 | 	shl	local08, #2
175a0                 | LR__1790
175a0     0F 29 5A F2 | 	cmps	local06, local01 wcz
175a4     B4 00 90 1D |  if_a	jmp	#LR__1792
175a8                 | '   fastline(x0-x,x0+x,y0-y,c)
175a8     10 13 02 F6 | 	mov	arg01, local02
175ac     14 13 82 F1 | 	sub	arg01, local06
175b0     10 15 02 F6 | 	mov	arg02, local02
175b4     14 15 02 F1 | 	add	arg02, local06
175b8     11 17 02 F6 | 	mov	arg03, local03
175bc     0F 17 82 F1 | 	sub	arg03, local01
175c0     12 19 02 F6 | 	mov	arg04, local04
175c4     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
175c8                 | '   fastline(x0-x,x0+x,y0+y,c)
175c8     10 13 02 F6 | 	mov	arg01, local02
175cc     14 13 82 F1 | 	sub	arg01, local06
175d0     10 15 02 F6 | 	mov	arg02, local02
175d4     14 15 02 F1 | 	add	arg02, local06
175d8     11 17 02 F6 | 	mov	arg03, local03
175dc     0F 17 02 F1 | 	add	arg03, local01
175e0     12 19 02 F6 | 	mov	arg04, local04
175e4     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
175e8                 | '   fastline(x0-y,x0+y,y0-x,c)
175e8     10 13 02 F6 | 	mov	arg01, local02
175ec     0F 13 82 F1 | 	sub	arg01, local01
175f0     10 15 02 F6 | 	mov	arg02, local02
175f4     0F 15 02 F1 | 	add	arg02, local01
175f8     11 17 02 F6 | 	mov	arg03, local03
175fc     14 17 82 F1 | 	sub	arg03, local06
17600     12 19 02 F6 | 	mov	arg04, local04
17604     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
17608                 | '   fastline(x0-y,x0+y,y0+x,c)
17608     10 13 02 F6 | 	mov	arg01, local02
1760c     0F 13 82 F1 | 	sub	arg01, local01
17610     10 15 02 F6 | 	mov	arg02, local02
17614     0F 15 02 F1 | 	add	arg02, local01
17618     11 17 02 F6 | 	mov	arg03, local03
1761c     14 17 02 F1 | 	add	arg03, local06
17620     12 19 02 F6 | 	mov	arg04, local04
17624     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
17628                 | '   if d>0 
17628     01 26 56 F2 | 	cmps	local05, #1 wc
1762c     18 00 90 CD |  if_b	jmp	#LR__1791
17630                 | '     d+=da
17630     16 27 02 F1 | 	add	local05, local08
17634                 | '     y-=1
17634     01 1E 86 F1 | 	sub	local01, #1
17638                 | '     x+=1
17638     01 28 06 F1 | 	add	local06, #1
1763c                 | '     da+=4*4
1763c     10 2C 06 F1 | 	add	local08, #16
17640                 | '     db+=2*4
17640     08 2A 06 F1 | 	add	local07, #8
17644     58 FF 9F FD | 	jmp	#LR__1790
17648                 | LR__1791
17648                 | '   else
17648                 | '     d+=db
17648     15 27 02 F1 | 	add	local05, local07
1764c                 | '     x+=1
1764c     01 28 06 F1 | 	add	local06, #1
17650                 | '     da+=2*4
17650     08 2C 06 F1 | 	add	local08, #8
17654                 | '     db+=2*4
17654     08 2A 06 F1 | 	add	local07, #8
17658     44 FF 9F FD | 	jmp	#LR__1790
1765c                 | LR__1792
1765c     A7 F0 03 F6 | 	mov	ptra, fp
17660     B2 00 A0 FD | 	call	#popregs_
17664                 | _hg010b_spin2_fcircle_ret
17664     2D 00 64 FD | 	ret
17668                 | 
17668                 | '  
17668                 | ' '-- A circle ------------------------------------------------------------ 
17668                 | '  
17668                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
17668                 | _hg010b_spin2_circle
17668     08 4A 05 F6 | 	mov	COUNT_, #8
1766c     A8 00 A0 FD | 	call	#pushregs_
17670     0B 1F 02 F6 | 	mov	local01, arg03
17674     FF FF 7F FF 
17678     FE 1F 06 FD | 	qmul	local01, ##-2
1767c     09 21 02 F6 | 	mov	local02, arg01
17680     0A 23 02 F6 | 	mov	local03, arg02
17684     0C 25 02 F6 | 	mov	local04, arg04
17688                 | ' 
17688                 | '  
17688                 | ' d:=5-4*r
17688     0F 19 02 F6 | 	mov	arg04, local01
1768c     02 18 66 F0 | 	shl	arg04, #2
17690     05 26 06 F6 | 	mov	local05, #5
17694     0C 27 82 F1 | 	sub	local05, arg04
17698                 | ' x:=0
17698     00 28 06 F6 | 	mov	local06, #0
1769c                 | ' y:=r
1769c                 | ' da:=(-2*r+5)*4
1769c                 | ' db:=3*4
1769c     0C 2A 06 F6 | 	mov	local07, #12
176a0                 | ' repeat while (x<=y) 
176a0     18 2C 62 FD | 	getqx	local08
176a4     05 2C 06 F1 | 	add	local08, #5
176a8     02 2C 66 F0 | 	shl	local08, #2
176ac                 | LR__1800
176ac     0F 29 5A F2 | 	cmps	local06, local01 wcz
176b0     F4 00 90 1D |  if_a	jmp	#LR__1802
176b4                 | '   putpixel(x0-x,y0-y,c)
176b4     10 13 02 F6 | 	mov	arg01, local02
176b8     14 13 82 F1 | 	sub	arg01, local06
176bc     11 15 02 F6 | 	mov	arg02, local03
176c0     0F 15 82 F1 | 	sub	arg02, local01
176c4     12 17 02 F6 | 	mov	arg03, local04
176c8     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
176cc                 | '   putpixel(x0-x,y0+y,c)
176cc     10 13 02 F6 | 	mov	arg01, local02
176d0     14 13 82 F1 | 	sub	arg01, local06
176d4     11 15 02 F6 | 	mov	arg02, local03
176d8     0F 15 02 F1 | 	add	arg02, local01
176dc     12 17 02 F6 | 	mov	arg03, local04
176e0     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
176e4                 | '   putpixel(x0+x,y0-y,c)
176e4     10 13 02 F6 | 	mov	arg01, local02
176e8     14 13 02 F1 | 	add	arg01, local06
176ec     11 15 02 F6 | 	mov	arg02, local03
176f0     0F 15 82 F1 | 	sub	arg02, local01
176f4     12 17 02 F6 | 	mov	arg03, local04
176f8     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
176fc                 | '   putpixel(x0+x,y0+y,c)
176fc     10 13 02 F6 | 	mov	arg01, local02
17700     14 13 02 F1 | 	add	arg01, local06
17704     11 15 02 F6 | 	mov	arg02, local03
17708     0F 15 02 F1 | 	add	arg02, local01
1770c     12 17 02 F6 | 	mov	arg03, local04
17710     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
17714                 | '   putpixel(x0-y,y0-x,c)
17714     10 13 02 F6 | 	mov	arg01, local02
17718     0F 13 82 F1 | 	sub	arg01, local01
1771c     11 15 02 F6 | 	mov	arg02, local03
17720     14 15 82 F1 | 	sub	arg02, local06
17724     12 17 02 F6 | 	mov	arg03, local04
17728     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1772c                 | '   putpixel(x0-y,y0+x,c)
1772c     10 13 02 F6 | 	mov	arg01, local02
17730     0F 13 82 F1 | 	sub	arg01, local01
17734     11 15 02 F6 | 	mov	arg02, local03
17738     14 15 02 F1 | 	add	arg02, local06
1773c     12 17 02 F6 | 	mov	arg03, local04
17740     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
17744                 | '   putpixel(x0+y,y0-x,c)
17744     10 13 02 F6 | 	mov	arg01, local02
17748     0F 13 02 F1 | 	add	arg01, local01
1774c     11 15 02 F6 | 	mov	arg02, local03
17750     14 15 82 F1 | 	sub	arg02, local06
17754     12 17 02 F6 | 	mov	arg03, local04
17758     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1775c                 | '   putpixel(x0+y,y0+x,c)
1775c     10 13 02 F6 | 	mov	arg01, local02
17760     0F 13 02 F1 | 	add	arg01, local01
17764     11 15 02 F6 | 	mov	arg02, local03
17768     14 15 02 F1 | 	add	arg02, local06
1776c     12 17 02 F6 | 	mov	arg03, local04
17770     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
17774                 | '   if d>0 
17774     01 26 56 F2 | 	cmps	local05, #1 wc
17778     18 00 90 CD |  if_b	jmp	#LR__1801
1777c                 | '     d+=da
1777c     16 27 02 F1 | 	add	local05, local08
17780                 | '     y-=1
17780     01 1E 86 F1 | 	sub	local01, #1
17784                 | '     x+=1
17784     01 28 06 F1 | 	add	local06, #1
17788                 | '     da+=4*4
17788     10 2C 06 F1 | 	add	local08, #16
1778c                 | '     db+=2*4
1778c     08 2A 06 F1 | 	add	local07, #8
17790     18 FF 9F FD | 	jmp	#LR__1800
17794                 | LR__1801
17794                 | '   else
17794                 | '     d+=db
17794     15 27 02 F1 | 	add	local05, local07
17798                 | '     x+=1
17798     01 28 06 F1 | 	add	local06, #1
1779c                 | '     da+=2*4
1779c     08 2C 06 F1 | 	add	local08, #8
177a0                 | '     db+=2*4
177a0     08 2A 06 F1 | 	add	local07, #8
177a4     04 FF 9F FD | 	jmp	#LR__1800
177a8                 | LR__1802
177a8     A7 F0 03 F6 | 	mov	ptra, fp
177ac     B2 00 A0 FD | 	call	#popregs_
177b0                 | _hg010b_spin2_circle_ret
177b0     2D 00 64 FD | 	ret
177b4                 | 
177b4                 | '     
177b4                 | ' '-- A frame (an empty rectangle) ---------------------------------------
177b4                 | ' 
177b4                 | ' pub frame(x1,y1,x2,y2,c)
177b4                 | _hg010b_spin2_frame
177b4     05 4A 05 F6 | 	mov	COUNT_, #5
177b8     A8 00 A0 FD | 	call	#pushregs_
177bc     09 1F 02 F6 | 	mov	local01, arg01
177c0     0A 21 02 F6 | 	mov	local02, arg02
177c4     0B 23 02 F6 | 	mov	local03, arg03
177c8     0C 25 02 F6 | 	mov	local04, arg04
177cc     0D 27 02 F6 | 	mov	local05, arg05
177d0                 | ' 
177d0                 | ' fastline(x1,x2,y1,c)
177d0     0F 13 02 F6 | 	mov	arg01, local01
177d4     11 15 02 F6 | 	mov	arg02, local03
177d8     10 17 02 F6 | 	mov	arg03, local02
177dc     13 19 02 F6 | 	mov	arg04, local05
177e0     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
177e4                 | ' fastline(x1,x2,y2,c)
177e4     0F 13 02 F6 | 	mov	arg01, local01
177e8     11 15 02 F6 | 	mov	arg02, local03
177ec     12 17 02 F6 | 	mov	arg03, local04
177f0     13 19 02 F6 | 	mov	arg04, local05
177f4     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
177f8                 | ' line(x1,y1,x1,y2,c)
177f8     0F 13 02 F6 | 	mov	arg01, local01
177fc     10 15 02 F6 | 	mov	arg02, local02
17800     0F 17 02 F6 | 	mov	arg03, local01
17804     12 19 02 F6 | 	mov	arg04, local04
17808     13 1B 02 F6 | 	mov	arg05, local05
1780c                 | ' draw(x1,y1,x2,y2,c)
1780c     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
17810                 | ' line(x2,y1,x2,y2,c)
17810     11 13 02 F6 | 	mov	arg01, local03
17814     10 15 02 F6 | 	mov	arg02, local02
17818     11 17 02 F6 | 	mov	arg03, local03
1781c     12 19 02 F6 | 	mov	arg04, local04
17820     13 1B 02 F6 | 	mov	arg05, local05
17824                 | ' draw(x1,y1,x2,y2,c)
17824     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
17828     A7 F0 03 F6 | 	mov	ptra, fp
1782c     B2 00 A0 FD | 	call	#popregs_
17830                 | _hg010b_spin2_frame_ret
17830     2D 00 64 FD | 	ret
17834                 | 
17834                 | ' 
17834                 | ' '-- A box (a filled rectangle) ----------------------------------------
17834                 | ' 
17834                 | ' pub box(x1,y1,x2,y2,c) |yy
17834                 | _hg010b_spin2_box
17834     06 4A 05 F6 | 	mov	COUNT_, #6
17838     A8 00 A0 FD | 	call	#pushregs_
1783c     09 1F 02 F6 | 	mov	local01, arg01
17840     0A 21 02 F6 | 	mov	local02, arg02
17844     0B 23 02 F6 | 	mov	local03, arg03
17848     0C 25 02 F6 | 	mov	local04, arg04
1784c     0D 27 02 F6 | 	mov	local05, arg05
17850                 | ' 
17850                 | ' repeat yy from y1 to y2
17850     10 25 52 F2 | 	cmps	local04, local02 wc
17854     01 28 86 F6 | 	negc	local06, #1
17858     14 25 02 F1 | 	add	local04, local06
1785c                 | LR__1810
1785c                 | '   fastline(x1,x2,yy,c)
1785c     0F 13 02 F6 | 	mov	arg01, local01
17860     11 15 02 F6 | 	mov	arg02, local03
17864     13 19 02 F6 | 	mov	arg04, local05
17868     10 17 02 F6 | 	mov	arg03, local02
1786c     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
17870     14 21 02 F1 | 	add	local02, local06
17874     12 21 0A F2 | 	cmp	local02, local04 wz
17878     E0 FF 9F 5D |  if_ne	jmp	#LR__1810
1787c     A7 F0 03 F6 | 	mov	ptra, fp
17880     B2 00 A0 FD | 	call	#popregs_
17884                 | _hg010b_spin2_box_ret
17884     2D 00 64 FD | 	ret
17888                 | 
17888                 | '       
17888                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
17888                 | _hg010b_spin2_putcharxycgf
17888                 | ' 
17888                 | '  
17888                 | ' repeat yy from 0 to 15
17888     00 00 06 F6 | 	mov	_var01, #0
1788c     97 8C 48 FB | 	callpa	#(@LR__1822-@LR__1820)>>2,fcache_load_ptr_
17890                 | LR__1820
17890                 | ' 
17890                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
17890     91 E4 05 F1 | 	add	objptr, #145
17894     F2 02 02 FB | 	rdlong	_var02, objptr
17898     0A 02 66 F0 | 	shl	_var02, #10
1789c     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
178a0     01 05 02 F1 | 	add	_var03, _var02
178a4     0B 03 02 F6 | 	mov	_var02, arg03
178a8     04 02 66 F0 | 	shl	_var02, #4
178ac     01 05 02 F1 | 	add	_var03, _var02
178b0     00 05 02 F1 | 	add	_var03, _var01
178b4     02 05 C2 FA | 	rdbyte	_var03, _var03
178b8                 | '   asm
178b8     00 04 0E F4 | 	testb	_var03, #0 wz
178bc     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
178c0     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
178c4     01 04 0E F4 | 	testb	_var03, #1 wz
178c8     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
178cc     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
178d0     02 04 0E F4 | 	testb	_var03, #2 wz
178d4     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
178d8     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
178dc     03 04 0E F4 | 	testb	_var03, #3 wz
178e0     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
178e4     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
178e8     04 04 0E F4 | 	testb	_var03, #4 wz
178ec     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
178f0     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
178f4     05 04 0E F4 | 	testb	_var03, #5 wz
178f8     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
178fc     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
17900     06 04 0E F4 | 	testb	_var03, #6 wz
17904     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
17908     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1790c     07 04 0E F4 | 	testb	_var03, #7 wz
17910     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
17914     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
17918                 | '   
17918                 | '   ccc[0]:=c1
17918     99 E5 05 F1 | 	add	objptr, #409
1791c     F2 06 62 FC | 	wrlong	_var04, objptr
17920                 | '   ccc[1]:=c2 
17920     04 E4 05 F1 | 	add	objptr, #4
17924     F2 08 62 FC | 	wrlong	_var05, objptr
17928                 | '   long[mailbox0][2]:=8
17928     49 E4 85 F1 | 	sub	objptr, #73
1792c     F2 04 02 FB | 	rdlong	_var03, objptr
17930     08 04 06 F1 | 	add	_var03, #8
17934     02 11 68 FC | 	wrlong	#8, _var03
17938                 | '   long[mailbox0][1]:=@ccc
17938     45 E4 05 F1 | 	add	objptr, #69
1793c     F2 04 02 F6 | 	mov	_var03, objptr
17940     45 E4 85 F1 | 	sub	objptr, #69
17944     F2 02 02 FB | 	rdlong	_var02, objptr
17948     04 02 06 F1 | 	add	_var02, #4
1794c     01 05 62 FC | 	wrlong	_var03, _var02
17950                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
17950     0C E5 85 F1 | 	sub	objptr, #268
17954     F2 04 02 FB | 	rdlong	_var03, objptr
17958     0A 03 02 F6 | 	mov	_var02, arg02
1795c     00 03 02 F1 | 	add	_var02, _var01
17960     0A 02 66 F0 | 	shl	_var02, #10
17964     09 0B 02 F6 | 	mov	_var06, arg01
17968     02 0A 66 F0 | 	shl	_var06, #2
1796c     05 03 02 F1 | 	add	_var02, _var06
17970     01 05 02 F1 | 	add	_var03, _var02
17974     00 00 78 FF 
17978     00 04 06 F1 | 	add	_var03, ##-268435456
1797c     0C E5 05 F1 | 	add	objptr, #268
17980     F2 0A 02 FB | 	rdlong	_var06, objptr
17984     05 05 62 FC | 	wrlong	_var03, _var06
17988                 | '   repeat
17988                 | LR__1821
17988     F2 04 02 FB | 	rdlong	_var03, objptr
1798c     02 03 02 FB | 	rdlong	_var02, _var03
17990     00 02 56 F2 | 	cmps	_var02, #0 wc
17994     F0 FF 9F CD |  if_b	jmp	#LR__1821
17998     E5 E5 85 F1 | 	sub	objptr, #485
1799c     01 00 06 F1 | 	add	_var01, #1
179a0     10 00 56 F2 | 	cmps	_var01, #16 wc
179a4     E8 FE 9F CD |  if_b	jmp	#LR__1820
179a8                 | LR__1822
179a8                 | _hg010b_spin2_putcharxycgf_ret
179a8     2D 00 64 FD | 	ret
179ac                 | 
179ac                 | ' 
179ac                 | ' 
179ac                 | ' '**********************************************************************r***
179ac                 | ' '                                                                        *
179ac                 | ' ' Font related functions                                                 *
179ac                 | ' '                                                                        *
179ac                 | ' '*************************************************************************
179ac                 | ' 
179ac                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
179ac                 | ' 
179ac                 | ' pub setfontfamily(afontnum)
179ac                 | _hg010b_spin2_setfontfamily
179ac                 | ' 
179ac                 | ' font_family:=afontnum
179ac     91 E4 05 F1 | 	add	objptr, #145
179b0     F2 12 62 FC | 	wrlong	arg01, objptr
179b4     91 E4 85 F1 | 	sub	objptr, #145
179b8                 | ' 'if afontnum==8
179b8                 | ' '  font_ptr:=@amiga_font
179b8                 | ' 
179b8                 | ' if afontnum==4
179b8     04 12 0E F2 | 	cmp	arg01, #4 wz
179bc                 | '   font_ptr:=@st_font
179bc     08 00 00 AF 
179c0     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
179c4     04 E4 05 A1 |  if_e	add	objptr, #4
179c8     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
179cc     04 E4 85 A1 |  if_e	sub	objptr, #4
179d0     08 00 00 AF 
179d4     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
179d8                 | ' if afontnum==0
179d8     00 12 0E F2 | 	cmp	arg01, #0 wz
179dc                 | '   font_ptr:=@vga_font
179dc     04 E4 05 A1 |  if_e	add	objptr, #4
179e0     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
179e4     04 E4 85 A1 |  if_e	sub	objptr, #4
179e8                 | _hg010b_spin2_setfontfamily_ret
179e8     2D 00 64 FD | 	ret
179ec                 | 
179ec                 | ' 
179ec                 | ' '*************************************************************************
179ec                 | ' '                                                                        *
179ec                 | ' '  Cursor functions                                                      *
179ec                 | ' '                                                                        *
179ec                 | ' '*************************************************************************
179ec                 | ' 
179ec                 | ' 
179ec                 | ' pub setcursorpos(x,y)
179ec                 | _hg010b_spin2_setcursorpos
179ec                 | ' 
179ec                 | ' ''---------- Set the (x,y) position of cursor
179ec                 | ' 
179ec                 | ' cursor_x:=x
179ec     38 E4 05 F1 | 	add	objptr, #56
179f0     F2 12 52 FC | 	wrword	arg01, objptr
179f4                 | ' cursor_y:=y
179f4     02 E4 05 F1 | 	add	objptr, #2
179f8     F2 14 42 FC | 	wrbyte	arg02, objptr
179fc                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
179fc     02 E4 85 F1 | 	sub	objptr, #2
17a00     F2 14 E2 FA | 	rdword	arg02, objptr
17a04     02 14 66 F0 | 	shl	arg02, #2
17a08     02 E4 05 F1 | 	add	objptr, #2
17a0c     F2 16 C2 FA | 	rdbyte	arg03, objptr
17a10     3A E4 85 F1 | 	sub	objptr, #58
17a14     04 16 66 F0 | 	shl	arg03, #4
17a18     11 12 06 F6 | 	mov	arg01, #17
17a1c     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
17a20                 | _hg010b_spin2_setcursorpos_ret
17a20     2D 00 64 FD | 	ret
17a24                 | 
17a24                 | ' 
17a24                 | ' '*************************************************************************
17a24                 | ' '                                                                        *
17a24                 | ' '  VBlank functions                                                      *
17a24                 | ' '                                                                        *
17a24                 | ' '*************************************************************************
17a24                 | ' 
17a24                 | ' pub waitvbl(amount) | i
17a24                 | _hg010b_spin2_waitvbl
17a24     03 4A 05 F6 | 	mov	COUNT_, #3
17a28     A8 00 A0 FD | 	call	#pushregs_
17a2c     09 1F 02 F6 | 	mov	local01, arg01
17a30                 | ' 
17a30                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
17a30                 | ' 
17a30                 | ' repeat i from 1 to amount
17a30     01 20 06 F6 | 	mov	local02, #1
17a34     01 1E 56 F2 | 	cmps	local01, #1 wc
17a38     01 22 86 F6 | 	negc	local03, #1
17a3c     11 1F 02 F1 | 	add	local01, local03
17a40                 | LR__1830
17a40                 | '   repeat until vblank==0
17a40                 | LR__1831
17a40     45 E4 05 F1 | 	add	objptr, #69
17a44     F2 12 0A FB | 	rdlong	arg01, objptr wz
17a48     45 E4 85 F1 | 	sub	objptr, #69
17a4c     0C 00 90 AD |  if_e	jmp	#LR__1832
17a50                 | '     waitus(100)
17a50     64 12 06 F6 | 	mov	arg01, #100
17a54     E0 16 B0 FD | 	call	#__system___waitus
17a58     E4 FF 9F FD | 	jmp	#LR__1831
17a5c                 | LR__1832
17a5c                 | '   repeat until vblank==1
17a5c                 | LR__1833
17a5c     45 E4 05 F1 | 	add	objptr, #69
17a60     F2 12 02 FB | 	rdlong	arg01, objptr
17a64     45 E4 85 F1 | 	sub	objptr, #69
17a68     01 12 0E F2 | 	cmp	arg01, #1 wz
17a6c     0C 00 90 AD |  if_e	jmp	#LR__1834
17a70                 | '     waitus(100)
17a70     64 12 06 F6 | 	mov	arg01, #100
17a74     C0 16 B0 FD | 	call	#__system___waitus
17a78     E0 FF 9F FD | 	jmp	#LR__1833
17a7c                 | LR__1834
17a7c     11 21 02 F1 | 	add	local02, local03
17a80     0F 21 0A F2 | 	cmp	local02, local01 wz
17a84     B8 FF 9F 5D |  if_ne	jmp	#LR__1830
17a88     A7 F0 03 F6 | 	mov	ptra, fp
17a8c     B2 00 A0 FD | 	call	#popregs_
17a90                 | _hg010b_spin2_waitvbl_ret
17a90     2D 00 64 FD | 	ret
17a94                 | 
17a94                 | ' 
17a94                 | ' 
17a94                 | ' pub cls(fc,bc)   :c,i
17a94                 | _hg010b_spin2_cls
17a94     02 4A 05 F6 | 	mov	COUNT_, #2
17a98     A8 00 A0 FD | 	call	#pushregs_
17a9c     09 1F 02 F6 | 	mov	local01, arg01
17aa0     0A 21 02 F6 | 	mov	local02, arg02
17aa4                 | ' 
17aa4                 | ' c:=bc
17aa4                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
17aa4     D9 E4 05 F1 | 	add	objptr, #217
17aa8     F2 12 02 FB | 	rdlong	arg01, objptr
17aac     A5 E4 85 F1 | 	sub	objptr, #165
17ab0     F2 16 02 FB | 	rdlong	arg03, objptr
17ab4     02 16 66 F0 | 	shl	arg03, #2
17ab8     10 15 02 F6 | 	mov	arg02, local02
17abc     00 18 06 F6 | 	mov	arg04, #0
17ac0     01 1A 06 F6 | 	mov	arg05, #1
17ac4     0B 00 00 FF 
17ac8     8C E4 05 F1 | 	add	objptr, ##5772
17acc     F0 08 B0 FD | 	call	#_psram_spin2_fill
17ad0                 | ' setwritecolors(fc,bc)
17ad0                 | ' 
17ad0                 | ' write_color:=ff
17ad0     0B 00 00 FF 
17ad4     83 E4 85 F1 | 	sub	objptr, ##5763
17ad8     F2 1E 62 FC | 	wrlong	local01, objptr
17adc                 | ' write_background:=bb
17adc     04 E4 05 F1 | 	add	objptr, #4
17ae0     F2 20 62 FC | 	wrlong	local02, objptr
17ae4                 | ' cursor_x:=0
17ae4     09 E4 85 F1 | 	sub	objptr, #9
17ae8     F2 00 58 FC | 	wrword	#0, objptr
17aec                 | ' cursor_y:=0
17aec     02 E4 05 F1 | 	add	objptr, #2
17af0     F2 00 48 FC | 	wrbyte	#0, objptr
17af4                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17af4     02 E4 85 F1 | 	sub	objptr, #2
17af8     F2 14 E2 FA | 	rdword	arg02, objptr
17afc     02 14 66 F0 | 	shl	arg02, #2
17b00     02 E4 05 F1 | 	add	objptr, #2
17b04     F2 16 C2 FA | 	rdbyte	arg03, objptr
17b08     3A E4 85 F1 | 	sub	objptr, #58
17b0c     04 16 66 F0 | 	shl	arg03, #4
17b10     11 12 06 F6 | 	mov	arg01, #17
17b14     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
17b18                 | ' setcursorcolor(fc)
17b18     0F 13 02 F6 | 	mov	arg01, local01
17b1c     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
17b20     10 FB 01 F6 | 	mov	result1, local02
17b24     00 FC 05 F6 | 	mov	result2, #0
17b28     A7 F0 03 F6 | 	mov	ptra, fp
17b2c     B2 00 A0 FD | 	call	#popregs_
17b30                 | _hg010b_spin2_cls_ret
17b30     2D 00 64 FD | 	ret
17b34                 | 
17b34                 | ' 
17b34                 | ' ''---------- Output a char at the cursor position, move the cursor 
17b34                 | ' 
17b34                 | ' pub putchar(achar) | c,x,y,l,newcpl
17b34                 | _hg010b_spin2_putchar
17b34     01 4A 05 F6 | 	mov	COUNT_, #1
17b38     A8 00 A0 FD | 	call	#pushregs_
17b3c     09 1F 02 F6 | 	mov	local01, arg01
17b40                 | ' 
17b40                 | ' if achar==10
17b40     0A 1E 0E F2 | 	cmp	local01, #10 wz
17b44                 | '   crlf()
17b44     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
17b48                 | ' if achar==9
17b48     09 1E 0E F2 | 	cmp	local01, #9 wz
17b4c     18 00 90 5D |  if_ne	jmp	#LR__1840
17b50                 | '   cursor_x:=(cursor_x& %11110000)+16
17b50     38 E4 05 F1 | 	add	objptr, #56
17b54     F2 16 E2 FA | 	rdword	arg03, objptr
17b58     F0 16 06 F5 | 	and	arg03, #240
17b5c     10 16 06 F1 | 	add	arg03, #16
17b60     F2 16 52 FC | 	wrword	arg03, objptr
17b64     38 E4 85 F1 | 	sub	objptr, #56
17b68                 | LR__1840
17b68                 | '   
17b68                 | ' if (achar<>9) && (achar<>10) 
17b68     09 1E 0E F2 | 	cmp	local01, #9 wz
17b6c     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
17b70     44 00 90 AD |  if_e	jmp	#LR__1841
17b74                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
17b74     38 E4 05 F1 | 	add	objptr, #56
17b78     F2 12 E2 FA | 	rdword	arg01, objptr
17b7c     02 E4 05 F1 | 	add	objptr, #2
17b80     F2 14 C2 FA | 	rdbyte	arg02, objptr
17b84     04 14 66 F0 | 	shl	arg02, #4
17b88     03 E4 05 F1 | 	add	objptr, #3
17b8c     F2 18 02 FB | 	rdlong	arg04, objptr
17b90     04 E4 05 F1 | 	add	objptr, #4
17b94     F2 1A 02 FB | 	rdlong	arg05, objptr
17b98     41 E4 85 F1 | 	sub	objptr, #65
17b9c     0F 17 02 F6 | 	mov	arg03, local01
17ba0     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
17ba4                 | '   cursor_x+=2
17ba4     38 E4 05 F1 | 	add	objptr, #56
17ba8     F2 1E E2 FA | 	rdword	local01, objptr
17bac     02 1E 06 F1 | 	add	local01, #2
17bb0     F2 1E 52 FC | 	wrword	local01, objptr
17bb4     38 E4 85 F1 | 	sub	objptr, #56
17bb8                 | LR__1841
17bb8                 | ' 
17bb8                 | ' if cursor_x>=256
17bb8     38 E4 05 F1 | 	add	objptr, #56
17bbc     F2 1E E2 FA | 	rdword	local01, objptr
17bc0     38 E4 85 F1 | 	sub	objptr, #56
17bc4     00 1F 56 F2 | 	cmps	local01, #256 wc
17bc8     64 00 90 CD |  if_b	jmp	#LR__1843
17bcc                 | '   cursor_x:=0
17bcc     38 E4 05 F1 | 	add	objptr, #56
17bd0     F2 00 58 FC | 	wrword	#0, objptr
17bd4                 | '   cursor_y+=1
17bd4     02 E4 05 F1 | 	add	objptr, #2
17bd8     F2 1E C2 FA | 	rdbyte	local01, objptr
17bdc     01 1E 06 F1 | 	add	local01, #1
17be0     F2 1E 42 FC | 	wrbyte	local01, objptr
17be4                 | '   if cursor_y>st_lines-1
17be4     C3 E4 05 F1 | 	add	objptr, #195
17be8     F2 1E 02 FB | 	rdlong	local01, objptr
17bec     01 1E 86 F1 | 	sub	local01, #1
17bf0     C3 E4 85 F1 | 	sub	objptr, #195
17bf4     F2 16 C2 FA | 	rdbyte	arg03, objptr
17bf8     3A E4 85 F1 | 	sub	objptr, #58
17bfc     0F 17 5A F2 | 	cmps	arg03, local01 wcz
17c00     2C 00 90 ED |  if_be	jmp	#LR__1842
17c04                 | '     scrollup()
17c04     00 12 06 F6 | 	mov	arg01, #0
17c08     01 00 00 FF 
17c0c     40 14 06 F6 | 	mov	arg02, ##576
17c10     10 16 06 F6 | 	mov	arg03, #16
17c14     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
17c18                 | '     cursor_y:=st_lines-1
17c18     FD E4 05 F1 | 	add	objptr, #253
17c1c     F2 1E 02 FB | 	rdlong	local01, objptr
17c20     01 1E 86 F1 | 	sub	local01, #1
17c24     C3 E4 85 F1 | 	sub	objptr, #195
17c28     F2 1E 42 FC | 	wrbyte	local01, objptr
17c2c     3A E4 85 F1 | 	sub	objptr, #58
17c30                 | LR__1842
17c30                 | LR__1843
17c30                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17c30     38 E4 05 F1 | 	add	objptr, #56
17c34     F2 14 E2 FA | 	rdword	arg02, objptr
17c38     02 14 66 F0 | 	shl	arg02, #2
17c3c     02 E4 05 F1 | 	add	objptr, #2
17c40     F2 16 C2 FA | 	rdbyte	arg03, objptr
17c44     3A E4 85 F1 | 	sub	objptr, #58
17c48     04 16 66 F0 | 	shl	arg03, #4
17c4c     11 12 06 F6 | 	mov	arg01, #17
17c50     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
17c54     A7 F0 03 F6 | 	mov	ptra, fp
17c58     B2 00 A0 FD | 	call	#popregs_
17c5c                 | _hg010b_spin2_putchar_ret
17c5c     2D 00 64 FD | 	ret
17c60                 | 
17c60                 | '     
17c60                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
17c60                 | ' 
17c60                 | ' pub putchar2(achar) | c,x,y,l,newcpl
17c60                 | _hg010b_spin2_putchar2
17c60     01 4A 05 F6 | 	mov	COUNT_, #1
17c64     A8 00 A0 FD | 	call	#pushregs_
17c68                 | ' 
17c68                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
17c68     38 E4 05 F1 | 	add	objptr, #56
17c6c     F2 1E E2 FA | 	rdword	local01, objptr
17c70     02 E4 05 F1 | 	add	objptr, #2
17c74     F2 14 C2 FA | 	rdbyte	arg02, objptr
17c78     04 14 66 F0 | 	shl	arg02, #4
17c7c     09 17 02 F6 | 	mov	arg03, arg01
17c80     03 E4 05 F1 | 	add	objptr, #3
17c84     F2 18 02 FB | 	rdlong	arg04, objptr
17c88     04 E4 05 F1 | 	add	objptr, #4
17c8c     F2 1A 02 FB | 	rdlong	arg05, objptr
17c90     41 E4 85 F1 | 	sub	objptr, #65
17c94     0F 13 02 F6 | 	mov	arg01, local01
17c98     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
17c9c                 | ' cursor_x+=2
17c9c     38 E4 05 F1 | 	add	objptr, #56
17ca0     F2 1E E2 FA | 	rdword	local01, objptr
17ca4     02 1E 06 F1 | 	add	local01, #2
17ca8     F2 1E 52 FC | 	wrword	local01, objptr
17cac                 | ' if cursor_x>=256
17cac     F2 1E E2 FA | 	rdword	local01, objptr
17cb0     38 E4 85 F1 | 	sub	objptr, #56
17cb4     00 1F 56 F2 | 	cmps	local01, #256 wc
17cb8     64 00 90 CD |  if_b	jmp	#LR__1851
17cbc                 | '   cursor_x:=0
17cbc     38 E4 05 F1 | 	add	objptr, #56
17cc0     F2 00 58 FC | 	wrword	#0, objptr
17cc4                 | '   cursor_y+=1
17cc4     02 E4 05 F1 | 	add	objptr, #2
17cc8     F2 1E C2 FA | 	rdbyte	local01, objptr
17ccc     01 1E 06 F1 | 	add	local01, #1
17cd0     F2 1E 42 FC | 	wrbyte	local01, objptr
17cd4                 | '   if cursor_y>st_lines-1
17cd4     C3 E4 05 F1 | 	add	objptr, #195
17cd8     F2 1E 02 FB | 	rdlong	local01, objptr
17cdc     01 1E 86 F1 | 	sub	local01, #1
17ce0     C3 E4 85 F1 | 	sub	objptr, #195
17ce4     F2 1A C2 FA | 	rdbyte	arg05, objptr
17ce8     3A E4 85 F1 | 	sub	objptr, #58
17cec     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
17cf0     2C 00 90 ED |  if_be	jmp	#LR__1850
17cf4                 | '     scrollup()
17cf4     00 12 06 F6 | 	mov	arg01, #0
17cf8     01 00 00 FF 
17cfc     40 14 06 F6 | 	mov	arg02, ##576
17d00     10 16 06 F6 | 	mov	arg03, #16
17d04     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
17d08                 | '     cursor_y:=st_lines-1
17d08     FD E4 05 F1 | 	add	objptr, #253
17d0c     F2 1E 02 FB | 	rdlong	local01, objptr
17d10     01 1E 86 F1 | 	sub	local01, #1
17d14     C3 E4 85 F1 | 	sub	objptr, #195
17d18     F2 1E 42 FC | 	wrbyte	local01, objptr
17d1c     3A E4 85 F1 | 	sub	objptr, #58
17d20                 | LR__1850
17d20                 | LR__1851
17d20                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
17d20     38 E4 05 F1 | 	add	objptr, #56
17d24     F2 14 E2 FA | 	rdword	arg02, objptr
17d28     02 14 66 F0 | 	shl	arg02, #2
17d2c     02 E4 05 F1 | 	add	objptr, #2
17d30     F2 16 C2 FA | 	rdbyte	arg03, objptr
17d34     3A E4 85 F1 | 	sub	objptr, #58
17d38     04 16 66 F0 | 	shl	arg03, #4
17d3c     11 12 06 F6 | 	mov	arg01, #17
17d40     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
17d44     A7 F0 03 F6 | 	mov	ptra, fp
17d48     B2 00 A0 FD | 	call	#popregs_
17d4c                 | _hg010b_spin2_putchar2_ret
17d4c     2D 00 64 FD | 	ret
17d50                 | 
17d50                 | ' ''--------- Output a string at the cursor position, move the cursor  
17d50                 | ' 
17d50                 | ' pub write(text) | iii,c,ncx,ncy
17d50                 | _hg010b_spin2_write
17d50     04 4A 05 F6 | 	mov	COUNT_, #4
17d54     A8 00 A0 FD | 	call	#pushregs_
17d58     09 1F 02 F6 | 	mov	local01, arg01
17d5c                 | ' 
17d5c                 | ' repeat iii from 0 to strsize(text)-1
17d5c     00 20 06 F6 | 	mov	local02, #0
17d60     0F 13 02 F6 | 	mov	arg01, local01
17d64     09 23 02 F6 | 	mov	local03, arg01
17d68     97 06 48 FB | 	callpa	#(@LR__1861-@LR__1860)>>2,fcache_load_ptr_
17d6c                 | LR__1860
17d6c     11 FB C9 FA | 	rdbyte	result1, local03 wz
17d70     01 22 06 51 |  if_ne	add	local03, #1
17d74     F4 FF 9F 5D |  if_ne	jmp	#LR__1860
17d78                 | LR__1861
17d78     09 23 82 F1 | 	sub	local03, arg01
17d7c     01 22 86 F1 | 	sub	local03, #1
17d80     00 22 56 F2 | 	cmps	local03, #0 wc
17d84     01 24 86 F6 | 	negc	local04, #1
17d88     12 23 02 F1 | 	add	local03, local04
17d8c                 | LR__1862
17d8c                 | '   putchar2(byte[text+iii])
17d8c     0F 13 02 F6 | 	mov	arg01, local01
17d90     10 13 02 F1 | 	add	arg01, local02
17d94     09 13 C2 FA | 	rdbyte	arg01, arg01
17d98     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
17d9c     12 21 02 F1 | 	add	local02, local04
17da0     11 21 0A F2 | 	cmp	local02, local03 wz
17da4     E4 FF 9F 5D |  if_ne	jmp	#LR__1862
17da8     A7 F0 03 F6 | 	mov	ptra, fp
17dac     B2 00 A0 FD | 	call	#popregs_
17db0                 | _hg010b_spin2_write_ret
17db0     2D 00 64 FD | 	ret
17db4                 | 
17db4                 | ' 
17db4                 | ' ''-----------  Scroll the screen one line up
17db4                 | ' 
17db4                 | ' pub scrollup(start=0, end=576 , amount=16) | i
17db4                 | _hg010b_spin2_scrollup
17db4     01 4A 05 F6 | 	mov	COUNT_, #1
17db8     A8 00 A0 FD | 	call	#pushregs_
17dbc                 | ' 	
17dbc                 | ' repeat i from 0 to 559 
17dbc     00 1E 06 F6 | 	mov	local01, #0
17dc0                 | LR__1870
17dc0     F5 E4 05 F1 | 	add	objptr, #245
17dc4     F2 18 02 FB | 	rdlong	arg04, objptr
17dc8     1C E4 85 F1 | 	sub	objptr, #28
17dcc     F2 14 02 FB | 	rdlong	arg02, objptr
17dd0     0F 13 02 F6 | 	mov	arg01, local01
17dd4     10 12 06 F1 | 	add	arg01, #16
17dd8     02 12 66 F0 | 	shl	arg01, #2
17ddc     14 E4 05 F1 | 	add	objptr, #20
17de0     F2 16 02 FB | 	rdlong	arg03, objptr
17de4     0B 13 02 FD | 	qmul	arg01, arg03
17de8                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
17de8     F6 03 00 FF 
17dec     00 12 06 F6 | 	mov	arg01, ##519168
17df0     0C 13 82 F1 | 	sub	arg01, arg04
17df4     02 16 66 F0 | 	shl	arg03, #2
17df8     0A 00 00 FF 
17dfc     D3 E5 05 F1 | 	add	objptr, ##5587
17e00     18 18 62 FD | 	getqx	arg04
17e04     0C 15 02 F1 | 	add	arg02, arg04
17e08     7C 04 B0 FD | 	call	#_psram_spin2_read1
17e0c     0A 00 00 FF 
17e10     CB E5 85 F1 | 	sub	objptr, ##5579
17e14     F2 18 02 FB | 	rdlong	arg04, objptr
17e18     1C E4 85 F1 | 	sub	objptr, #28
17e1c     F2 14 02 FB | 	rdlong	arg02, objptr
17e20     0F 13 02 F6 | 	mov	arg01, local01
17e24     02 12 66 F0 | 	shl	arg01, #2
17e28     14 E4 05 F1 | 	add	objptr, #20
17e2c     F2 16 02 FB | 	rdlong	arg03, objptr
17e30     0B 13 02 FD | 	qmul	arg01, arg03
17e34                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
17e34     F6 03 00 FF 
17e38     00 12 06 F6 | 	mov	arg01, ##519168
17e3c     0C 13 82 F1 | 	sub	arg01, arg04
17e40     02 16 66 F0 | 	shl	arg03, #2
17e44     0A 00 00 FF 
17e48     D3 E5 05 F1 | 	add	objptr, ##5587
17e4c     18 18 62 FD | 	getqx	arg04
17e50     0C 15 02 F1 | 	add	arg02, arg04
17e54     CC 04 B0 FD | 	call	#_psram_spin2_write
17e58     0B 00 00 FF 
17e5c     C0 E4 85 F1 | 	sub	objptr, ##5824
17e60     01 1E 06 F1 | 	add	local01, #1
17e64     01 00 00 FF 
17e68     30 1E 56 F2 | 	cmps	local01, ##560 wc
17e6c     50 FF 9F CD |  if_b	jmp	#LR__1870
17e70                 | ' 
17e70                 | ' repeat i from 560 to 575
17e70     01 00 00 FF 
17e74     30 1E 06 F6 | 	mov	local01, ##560
17e78                 | LR__1871
17e78                 | '    fastline(0,1023,i,write_background)   
17e78     41 E4 05 F1 | 	add	objptr, #65
17e7c     F2 18 02 FB | 	rdlong	arg04, objptr
17e80     41 E4 85 F1 | 	sub	objptr, #65
17e84     00 12 06 F6 | 	mov	arg01, #0
17e88     09 14 CE F9 | 	bmask	arg02, #9
17e8c     0F 17 02 F6 | 	mov	arg03, local01
17e90     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
17e94     01 1E 06 F1 | 	add	local01, #1
17e98     01 00 00 FF 
17e9c     40 1E 16 F2 | 	cmp	local01, ##576 wc
17ea0     D4 FF 9F CD |  if_b	jmp	#LR__1871
17ea4     A7 F0 03 F6 | 	mov	ptra, fp
17ea8     B2 00 A0 FD | 	call	#popregs_
17eac                 | _hg010b_spin2_scrollup_ret
17eac     2D 00 64 FD | 	ret
17eb0                 | 
17eb0                 | ' 
17eb0                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
17eb0                 | ' 
17eb0                 | ' pub crlf()
17eb0                 | _hg010b_spin2_crlf
17eb0                 | ' 
17eb0                 | ' cursor_x:=leading_spaces*2
17eb0     01 00 00 FF 
17eb4     B2 E4 05 F1 | 	add	objptr, ##690
17eb8     F2 16 02 FB | 	rdlong	arg03, objptr
17ebc     01 16 66 F0 | 	shl	arg03, #1
17ec0     01 00 00 FF 
17ec4     7A E4 85 F1 | 	sub	objptr, ##634
17ec8     F2 16 52 FC | 	wrword	arg03, objptr
17ecc                 | ' cursor_y+=1
17ecc     02 E4 05 F1 | 	add	objptr, #2
17ed0     F2 16 C2 FA | 	rdbyte	arg03, objptr
17ed4     01 16 06 F1 | 	add	arg03, #1
17ed8     F2 16 42 FC | 	wrbyte	arg03, objptr
17edc                 | ' if cursor_y>st_lines-1
17edc     C3 E4 05 F1 | 	add	objptr, #195
17ee0     F2 16 02 FB | 	rdlong	arg03, objptr
17ee4     01 16 86 F1 | 	sub	arg03, #1
17ee8     C3 E4 85 F1 | 	sub	objptr, #195
17eec     F2 14 C2 FA | 	rdbyte	arg02, objptr
17ef0     3A E4 85 F1 | 	sub	objptr, #58
17ef4     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
17ef8     2C 00 90 ED |  if_be	jmp	#LR__1880
17efc                 | '   scrollup()
17efc     00 12 06 F6 | 	mov	arg01, #0
17f00     01 00 00 FF 
17f04     40 14 06 F6 | 	mov	arg02, ##576
17f08     10 16 06 F6 | 	mov	arg03, #16
17f0c     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
17f10                 | '   cursor_y:=st_lines-1
17f10     FD E4 05 F1 | 	add	objptr, #253
17f14     F2 16 02 FB | 	rdlong	arg03, objptr
17f18     01 16 86 F1 | 	sub	arg03, #1
17f1c     C3 E4 85 F1 | 	sub	objptr, #195
17f20     F2 16 42 FC | 	wrbyte	arg03, objptr
17f24     3A E4 85 F1 | 	sub	objptr, #58
17f28                 | LR__1880
17f28                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
17f28     38 E4 05 F1 | 	add	objptr, #56
17f2c     F2 14 E2 FA | 	rdword	arg02, objptr
17f30     02 14 66 F0 | 	shl	arg02, #2
17f34     02 E4 05 F1 | 	add	objptr, #2
17f38     F2 16 C2 FA | 	rdbyte	arg03, objptr
17f3c     3A E4 85 F1 | 	sub	objptr, #58
17f40     04 16 66 F0 | 	shl	arg03, #4
17f44     11 12 06 F6 | 	mov	arg01, #17
17f48     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
17f4c                 | _hg010b_spin2_crlf_ret
17f4c     2D 00 64 FD | 	ret
17f50                 | 
17f50                 | ' 
17f50                 | ' 
17f50                 | ' '*************************************************************************
17f50                 | ' '                                                                        *
17f50                 | ' '  Conversions                                                           *
17f50                 | ' '                                                                        *
17f50                 | ' '*************************************************************************
17f50                 | ' 
17f50                 | ' ''---------- Convert a integer to dec string, return a pointer
17f50                 | ' 
17f50                 | ' pub inttostr(i):result |q,pos,k,j
17f50                 | _hg010b_spin2_inttostr
17f50     03 4A 05 F6 | 	mov	COUNT_, #3
17f54     A8 00 A0 FD | 	call	#pushregs_
17f58     09 1F 0A F6 | 	mov	local01, arg01 wz
17f5c                 | ' 
17f5c                 | ' j:=i
17f5c                 | ' pos:=10
17f5c     0A 20 06 F6 | 	mov	local02, #10
17f60                 | ' k:=0
17f60     00 22 06 F6 | 	mov	local03, #0
17f64                 | ' 
17f64                 | ' if (j==0)
17f64     18 00 90 5D |  if_ne	jmp	#LR__1890
17f68                 | '   n_string[0]:=48
17f68     49 E4 05 F1 | 	add	objptr, #73
17f6c     F2 60 48 FC | 	wrbyte	#48, objptr
17f70                 | '   n_string[1]:=0
17f70     01 E4 05 F1 | 	add	objptr, #1
17f74     F2 00 48 FC | 	wrbyte	#0, objptr
17f78     4A E4 85 F1 | 	sub	objptr, #74
17f7c     C4 00 90 FD | 	jmp	#LR__1897
17f80                 | LR__1890
17f80                 | ' 
17f80                 | ' else
17f80                 | '   if (j<0)
17f80     0F 1F 52 F6 | 	abs	local01, local01 wc
17f84                 | '     j:=0-j
17f84                 | '     k:=45
17f84     2D 22 06 C6 |  if_b	mov	local03, #45
17f88                 | ' 
17f88                 | '   n_string[11]:=0
17f88     54 E4 05 F1 | 	add	objptr, #84
17f8c     F2 00 48 FC | 	wrbyte	#0, objptr
17f90     54 E4 85 F1 | 	sub	objptr, #84
17f94     97 24 48 FB | 	callpa	#(@LR__1892-@LR__1891)>>2,fcache_load_ptr_
17f98                 | '   repeat while (pos>-1)
17f98                 | LR__1891
17f98     00 20 56 F2 | 	cmps	local02, #0 wc
17f9c     40 00 90 CD |  if_b	jmp	#LR__1893
17fa0     0F FB 51 F6 | 	abs	result1, local01 wc
17fa4     0A FA 15 FD | 	qdiv	result1, #10
17fa8                 | '     q:=j//10
17fa8     19 FA 61 FD | 	getqy	result1
17fac     FD FA 81 F6 | 	negc	result1, result1
17fb0     0F 1F 52 F6 | 	abs	local01, local01 wc
17fb4     0A 1E 16 FD | 	qdiv	local01, #10
17fb8                 | '     q:=48+q
17fb8     30 FA 05 F1 | 	add	result1, #48
17fbc                 | '     n_string[pos]:=q
17fbc     10 1F 02 F6 | 	mov	local01, local02
17fc0     49 E4 05 F1 | 	add	objptr, #73
17fc4     F2 1E 02 F1 | 	add	local01, objptr
17fc8     0F FB 41 FC | 	wrbyte	result1, local01
17fcc                 | '     j:=j/10
17fcc     49 E4 85 F1 | 	sub	objptr, #73
17fd0                 | '     pos-=1
17fd0     01 20 86 F1 | 	sub	local02, #1
17fd4     18 1E 62 FD | 	getqx	local01
17fd8     0F 1F 82 F6 | 	negc	local01, local01
17fdc     B8 FF 9F FD | 	jmp	#LR__1891
17fe0                 | LR__1892
17fe0                 | LR__1893
17fe0                 | '   repeat while n_string[0]==48
17fe0                 | LR__1894
17fe0     49 E4 05 F1 | 	add	objptr, #73
17fe4     F2 16 C2 FA | 	rdbyte	arg03, objptr
17fe8     49 E4 85 F1 | 	sub	objptr, #73
17fec     30 16 0E F2 | 	cmp	arg03, #48 wz
17ff0     20 00 90 5D |  if_ne	jmp	#LR__1895
17ff4                 | '     bytemove(@n_string,@n_string+1,12)
17ff4     49 E4 05 F1 | 	add	objptr, #73
17ff8     F2 12 02 F6 | 	mov	arg01, objptr
17ffc     F2 14 02 F6 | 	mov	arg02, objptr
18000     49 E4 85 F1 | 	sub	objptr, #73
18004     01 14 06 F1 | 	add	arg02, #1
18008     0C 16 06 F6 | 	mov	arg03, #12
1800c     E8 0C B0 FD | 	call	#__system____builtin_memmove
18010     CC FF 9F FD | 	jmp	#LR__1894
18014                 | LR__1895
18014                 | ' 
18014                 | '   if k==45
18014     2D 22 0E F2 | 	cmp	local03, #45 wz
18018     28 00 90 5D |  if_ne	jmp	#LR__1896
1801c                 | '      bytemove(@n_string+1,@n_string,12)
1801c     49 E4 05 F1 | 	add	objptr, #73
18020     F2 12 02 F6 | 	mov	arg01, objptr
18024     01 12 06 F1 | 	add	arg01, #1
18028     F2 14 02 F6 | 	mov	arg02, objptr
1802c     49 E4 85 F1 | 	sub	objptr, #73
18030     0C 16 06 F6 | 	mov	arg03, #12
18034     C0 0C B0 FD | 	call	#__system____builtin_memmove
18038                 | '      n_string[0]:=k
18038     49 E4 05 F1 | 	add	objptr, #73
1803c     F2 22 42 FC | 	wrbyte	local03, objptr
18040     49 E4 85 F1 | 	sub	objptr, #73
18044                 | LR__1896
18044                 | LR__1897
18044                 | ' 
18044                 | ' q:=@n_string
18044     49 E4 05 F1 | 	add	objptr, #73
18048     F2 FA 01 F6 | 	mov	result1, objptr
1804c     49 E4 85 F1 | 	sub	objptr, #73
18050                 | ' return q
18050     A7 F0 03 F6 | 	mov	ptra, fp
18054     B2 00 A0 FD | 	call	#popregs_
18058                 | _hg010b_spin2_inttostr_ret
18058     2D 00 64 FD | 	ret
1805c                 | 
1805c                 | ' 
1805c                 | ' '..............................................................................
1805c                 | ' 
1805c                 | ' {{
1805c                 | ' }}
1805c                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1805c                 | _psram_spin2_startx
1805c     04 4A 05 F6 | 	mov	COUNT_, #4
18060     A8 00 A0 FD | 	call	#pushregs_
18064     09 1F 02 F6 | 	mov	local01, arg01
18068     0B 21 02 F6 | 	mov	local02, arg03
1806c     0C 23 02 F6 | 	mov	local03, arg04
18070                 | '     stop() ' restart driver if required
18070     54 01 B0 FD | 	call	#_psram_spin2_stop
18074     00 1E 0E F2 | 	cmp	local01, #0 wz
18078     14 1E 06 AB |  if_e	rdlong	local01, #20
1807c     0F 15 52 F6 | 	abs	arg02, local01 wc
18080     A1 07 00 FF 
18084     40 14 16 FD | 	qdiv	arg02, ##1000000
18088                 | ' 
18088                 | '     ' use current frequency if none specified
18088                 | ' 
18088                 | '     if freq == 0 
18088                 | '         freq := clkfreq 
18088                 | ' 
18088                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
18088                 | ' 
18088                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
18088                 | '     if burst < 0
18088                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
18088     18 14 62 FD | 	getqx	arg02
1808c     0A 19 82 F6 | 	negc	arg04, arg02
18090     03 18 66 F0 | 	shl	arg04, #3
18094     84 18 86 F1 | 	sub	arg04, #132
18098     04 18 46 F0 | 	shr	arg04, #4
1809c     04 18 66 F0 | 	shl	arg04, #4
180a0     00 18 56 F2 | 	cmps	arg04, #0 wc
180a4     0E FA 65 C6 |  if_b	neg	result1, #14
180a8     10 01 90 CD |  if_b	jmp	#LR__1903
180ac                 | ' 
180ac                 | '     ' compute the input delay
180ac                 | ' 
180ac                 | '     if delay <= 0
180ac     01 20 56 F2 | 	cmps	local02, #1 wc
180b0     10 00 90 3D |  if_ae	jmp	#LR__1900
180b4                 | '         delay := lookupDelay(freq)
180b4     0F 13 02 F6 | 	mov	arg01, local01
180b8     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
180bc     FD 20 02 F6 | 	mov	local02, result1
180c0     04 00 90 FD | 	jmp	#LR__1901
180c4                 | LR__1900
180c4                 | '     else
180c4                 | '         delay <#= $f ' limit to 15
180c4     0F 20 66 F3 | 	fles	local02, #15
180c8                 | LR__1901
180c8                 | ' 
180c8                 | '     ' create our lock
180c8                 | ' 
180c8                 | '     driverlock := LOCKNEW()  
180c8     00 FA 05 F6 | 	mov	result1, #0
180cc     04 FA 61 FD | 	locknew	result1
180d0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
180d4     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
180d8                 | '     if driverlock == -1
180d8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
180dc     FF FF 7F FF 
180e0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
180e4                 | '         return ERR_NO_LOCK
180e4     1A FA 65 A6 |  if_e	neg	result1, #26
180e8     D0 00 90 AD |  if_e	jmp	#LR__1903
180ec                 | ' 
180ec                 | '     ' patch in the proper data and HUB addresses to the startup structure
180ec                 | ' 
180ec                 | '     long[@startupData][0]:=clkfreq
180ec     14 1E 06 FB | 	rdlong	local01, #20
180f0     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
180f4     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
180f8                 | ' '    long[@startupData][1]:=$1000_0000
180f8                 | '     long[@startupData][5]:=@deviceData
180f8     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
180fc     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
18100     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
18104     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
18108     14 14 06 F1 | 	add	arg02, #20
1810c     0A 1F 62 FC | 	wrlong	local01, arg02
18110                 | '     long[@startupData][6]:=@qosData
18110     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
18114     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
18118     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1811c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
18120     18 14 06 F1 | 	add	arg02, #24
18124     0A 1F 62 FC | 	wrlong	local01, arg02
18128                 | '     long[@startupData][7]:=$7FF00
18128     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1812c     1C 1E 06 F1 | 	add	local01, #28
18130     FF 03 80 FF 
18134     0F 01 6A FC | 	wrlong	##524032, local01
18138                 | ' 
18138                 | '     ' setup some default bank and QoS parameter values
18138                 | ' 
18138                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
18138     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1813c     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
18140     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
18144     10 18 66 F0 | 	shl	arg04, #16
18148     0C 20 66 F0 | 	shl	local02, #12
1814c     10 19 42 F5 | 	or	arg04, local02
18150     18 18 46 F5 | 	or	arg04, #24
18154     0C 15 02 F6 | 	mov	arg02, arg04
18158     02 16 06 F6 | 	mov	arg03, #2
1815c     A0 00 A0 FD | 	call	#\builtin_longfill_
18160                 | '     longfill(@qosData, $FFFF0000, 8)
18160     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
18164     07 16 06 F6 | 	mov	arg03, #7
18168     28 16 62 FD | 	setq	arg03
1816c     80 FF FF FF 
18170     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
18174                 | ' 
18174                 | '     ' get the address of the PSRAM memory driver so we can start it
18174                 | ' 
18174                 | '     driverAddr:= driver.getDriverAddr()
18174                 | '     return @driver_start
18174     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
18178     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1817c     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
18180                 | ' 
18180                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
18180                 | ' 
18180                 | '     if desiredcog < 0
18180     00 22 56 F2 | 	cmps	local03, #0 wc
18184                 | '         desiredcog := NEWCOG
18184     10 22 06 C6 |  if_b	mov	local03, #16
18188                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
18188     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1818c     11 25 02 F6 | 	mov	local04, local03
18190     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
18194     0A 25 F2 FC | 	coginit	local04, arg02 wc
18198     01 24 66 C6 |  if_b	neg	local04, #1
1819c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
181a0     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
181a4                 | '     repeat until long[@startupData] == 0 
181a4     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
181a8                 | LR__1902
181a8     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
181ac     F8 FF 9F 5D |  if_ne	jmp	#LR__1902
181b0                 | ' 
181b0                 | '     return drivercog
181b0     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
181b4     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
181b8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
181bc                 | LR__1903
181bc     A7 F0 03 F6 | 	mov	ptra, fp
181c0     B2 00 A0 FD | 	call	#popregs_
181c4                 | _psram_spin2_startx_ret
181c4     2D 00 64 FD | 	ret
181c8                 | 
181c8                 | ' 
181c8                 | ' '..............................................................................
181c8                 | ' 
181c8                 | ' {{
181c8                 | ' }}
181c8                 | ' PUB stop() : i
181c8                 | _psram_spin2_stop
181c8     00 00 06 F6 | 	mov	_var01, #0
181cc                 | '     if drivercog <> -1
181cc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
181d0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
181d4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
181d8     FF FF 7F FF 
181dc     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
181e0     70 00 90 AD |  if_e	jmp	#LR__1913
181e4                 | '         cogstop(drivercog) ' a rather brutal stop
181e4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
181e8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
181ec     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
181f0     03 12 62 FD | 	cogstop	arg01
181f4     97 26 48 FB | 	callpa	#(@LR__1912-@LR__1910)>>2,fcache_load_ptr_
181f8                 | '         repeat i from 0 to 7
181f8                 | LR__1910
181f8                 | '             if long[$7FF00][i*3] < 0
181f8     00 FB 01 F6 | 	mov	result1, _var01
181fc     01 FA 65 F0 | 	shl	result1, #1
18200     00 FB 01 F1 | 	add	result1, _var01
18204     02 FA 65 F0 | 	shl	result1, #2
18208     FF 03 00 FF 
1820c     00 FB 05 F1 | 	add	result1, ##524032
18210     FD FA 01 FB | 	rdlong	result1, result1
18214     00 FA 55 F2 | 	cmps	result1, #0 wc
18218     1C 00 90 3D |  if_ae	jmp	#LR__1911
1821c                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1821c     00 FB 01 F6 | 	mov	result1, _var01
18220     01 FA 65 F0 | 	shl	result1, #1
18224     00 FB 01 F1 | 	add	result1, _var01
18228     02 FA 65 F0 | 	shl	result1, #2
1822c     FF 03 00 FF 
18230     00 FB 05 F1 | 	add	result1, ##524032
18234     FD 20 68 FC | 	wrlong	#16, result1
18238                 | LR__1911
18238     01 00 06 F1 | 	add	_var01, #1
1823c     08 00 56 F2 | 	cmps	_var01, #8 wc
18240     B4 FF 9F CD |  if_b	jmp	#LR__1910
18244                 | LR__1912
18244                 | '         drivercog := -1
18244     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18248     FF FF FF FF 
1824c     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
18250     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18254                 | LR__1913
18254                 | '     if driverlock <> -1
18254     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
18258     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1825c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
18260     FF FF 7F FF 
18264     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
18268                 | '         LOCKRET(driverlock)
18268     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1826c     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
18270     05 12 62 5D |  if_ne	lockret	arg01
18274                 | '         driverlock := -1
18274     FF FF FF 5F 
18278     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1827c     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
18280     00 FB 01 F6 | 	mov	result1, _var01
18284                 | _psram_spin2_stop_ret
18284     2D 00 64 FD | 	ret
18288                 | 
18288                 | ' 
18288                 | ' '..............................................................................
18288                 | ' 
18288                 | ' {{
18288                 | ' }}
18288                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
18288                 | _psram_spin2_read1
18288                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
18288                 | '     if drivercog == -1 ' driver must be running
18288     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1828c     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
18290     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18294     FF FF 7F FF 
18298     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1829c                 | '         return ERR_INACTIVE
1829c     0F FA 65 A6 |  if_e	neg	result1, #15
182a0     7C 00 90 AD |  if_e	jmp	#LR__1921
182a4                 | '     if count == 0 ' don't even bother reading
182a4     00 16 0E F2 | 	cmp	arg03, #0 wz
182a8                 | '         return 0
182a8     00 FA 05 A6 |  if_e	mov	result1, #0
182ac     70 00 90 AD |  if_e	jmp	#LR__1921
182b0                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
182b0     00 FA 05 F6 | 	mov	result1, #0
182b4     01 FA 61 FD | 	cogid	result1
182b8     FD 00 02 F6 | 	mov	_var01, result1
182bc     01 00 66 F0 | 	shl	_var01, #1
182c0     FD 00 02 F1 | 	add	_var01, result1
182c4     02 00 66 F0 | 	shl	_var01, #2
182c8     FF 03 00 FF 
182cc     00 03 06 F6 | 	mov	_var02, ##524032
182d0     00 03 02 F1 | 	add	_var02, _var01
182d4                 | '     if long[mailbox] < 0
182d4     01 01 02 FB | 	rdlong	_var01, _var02
182d8     00 00 56 F2 | 	cmps	_var01, #0 wc
182dc                 | '         return ERR_MAILBOX_BUSY
182dc     1C FA 65 C6 |  if_b	neg	result1, #28
182e0     3C 00 90 CD |  if_b	jmp	#LR__1921
182e4                 | '     long[mailbox][2] := count
182e4     08 02 06 F1 | 	add	_var02, #8
182e8     01 17 62 FC | 	wrlong	arg03, _var02
182ec                 | '     long[mailbox][1] := dstHubAddr
182ec     04 02 86 F1 | 	sub	_var02, #4
182f0     01 13 62 FC | 	wrlong	arg01, _var02
182f4     04 02 86 F1 | 	sub	_var02, #4
182f8                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
182f8     0A 05 02 F6 | 	mov	_var03, arg02
182fc     D9 04 06 F4 | 	bitl	_var03, #217
18300     00 00 58 FF 
18304     00 00 06 F6 | 	mov	_var01, ##-1342177280
18308     02 01 02 F1 | 	add	_var01, _var03
1830c     01 01 62 FC | 	wrlong	_var01, _var02
18310                 | '     repeat
18310                 | LR__1920
18310                 | '         result := long[mailbox]    
18310     01 05 02 FB | 	rdlong	_var03, _var02
18314     00 04 56 F2 | 	cmps	_var03, #0 wc
18318     F4 FF 9F CD |  if_b	jmp	#LR__1920
1831c                 | '     while result < 0   
1831c                 | '     return -result                       'return success or error
1831c     02 FB 61 F6 | 	neg	result1, _var03
18320                 | LR__1921
18320                 | _psram_spin2_read1_ret
18320     2D 00 64 FD | 	ret
18324                 | 
18324                 | ' 
18324                 | ' '..............................................................................
18324                 | ' 
18324                 | ' {{
18324                 | ' }}
18324                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
18324                 | _psram_spin2_write
18324                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
18324                 | '     if drivercog == -1 ' driver must be running
18324     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18328     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1832c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18330     FF FF 7F FF 
18334     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
18338                 | '         return ERR_INACTIVE
18338     0F FA 65 A6 |  if_e	neg	result1, #15
1833c     7C 00 90 AD |  if_e	jmp	#LR__1931
18340                 | '     if count == 0 ' don't even bother writing
18340     00 16 0E F2 | 	cmp	arg03, #0 wz
18344                 | '         return 0
18344     00 FA 05 A6 |  if_e	mov	result1, #0
18348     70 00 90 AD |  if_e	jmp	#LR__1931
1834c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1834c     00 FA 05 F6 | 	mov	result1, #0
18350     01 FA 61 FD | 	cogid	result1
18354     FD 00 02 F6 | 	mov	_var01, result1
18358     01 00 66 F0 | 	shl	_var01, #1
1835c     FD 00 02 F1 | 	add	_var01, result1
18360     02 00 66 F0 | 	shl	_var01, #2
18364     FF 03 00 FF 
18368     00 03 06 F6 | 	mov	_var02, ##524032
1836c     00 03 02 F1 | 	add	_var02, _var01
18370                 | '     if long[mailbox] < 0
18370     01 01 02 FB | 	rdlong	_var01, _var02
18374     00 00 56 F2 | 	cmps	_var01, #0 wc
18378                 | '         return ERR_MAILBOX_BUSY
18378     1C FA 65 C6 |  if_b	neg	result1, #28
1837c     3C 00 90 CD |  if_b	jmp	#LR__1931
18380                 | '     long[mailbox][2] := count
18380     08 02 06 F1 | 	add	_var02, #8
18384     01 17 62 FC | 	wrlong	arg03, _var02
18388                 | '     long[mailbox][1] := srcHubAddr
18388     04 02 86 F1 | 	sub	_var02, #4
1838c     01 13 62 FC | 	wrlong	arg01, _var02
18390     04 02 86 F1 | 	sub	_var02, #4
18394                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
18394     0A 05 02 F6 | 	mov	_var03, arg02
18398     D9 04 06 F4 | 	bitl	_var03, #217
1839c     00 00 78 FF 
183a0     00 00 06 F6 | 	mov	_var01, ##-268435456
183a4     02 01 02 F1 | 	add	_var01, _var03
183a8     01 01 62 FC | 	wrlong	_var01, _var02
183ac                 | '     repeat
183ac                 | LR__1930
183ac                 | '         result := long[mailbox]    
183ac     01 05 02 FB | 	rdlong	_var03, _var02
183b0     00 04 56 F2 | 	cmps	_var03, #0 wc
183b4     F4 FF 9F CD |  if_b	jmp	#LR__1930
183b8                 | '     while result < 0   
183b8                 | '     return -result                       'return success or error
183b8     02 FB 61 F6 | 	neg	result1, _var03
183bc                 | LR__1931
183bc                 | _psram_spin2_write_ret
183bc     2D 00 64 FD | 	ret
183c0                 | 
183c0                 | ' 
183c0                 | ' ' generalized fill
183c0                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
183c0                 | _psram_spin2_fill
183c0     09 01 02 F6 | 	mov	_var01, arg01
183c4     0A 03 02 F6 | 	mov	_var02, arg02
183c8     0B 05 02 F6 | 	mov	_var03, arg03
183cc     0D 07 02 F6 | 	mov	_var04, arg05
183d0                 | '     case datasize 
183d0     01 06 86 F1 | 	sub	_var04, #1
183d4     04 06 26 F3 | 	fle	_var04, #4
183d8     30 06 62 FD | 	jmprel	_var04
183dc                 | LR__1940
183dc     10 00 90 FD | 	jmp	#LR__1941
183e0     18 00 90 FD | 	jmp	#LR__1942
183e4     2C 00 90 FD | 	jmp	#LR__1944
183e8     1C 00 90 FD | 	jmp	#LR__1943
183ec     24 00 90 FD | 	jmp	#LR__1944
183f0                 | LR__1941
183f0                 | '         1: req := driver.R_WRITEBYTE
183f0     00 00 60 FF 
183f4     00 08 06 F6 | 	mov	_var05, ##-1073741824
183f8     20 00 90 FD | 	jmp	#LR__1945
183fc                 | LR__1942
183fc                 | '         2: req := driver.R_WRITEWORD
183fc     00 00 68 FF 
18400     00 08 06 F6 | 	mov	_var05, ##-805306368
18404     14 00 90 FD | 	jmp	#LR__1945
18408                 | LR__1943
18408                 | '         4: req := driver.R_WRITELONG
18408     00 00 70 FF 
1840c     00 08 06 F6 | 	mov	_var05, ##-536870912
18410     08 00 90 FD | 	jmp	#LR__1945
18414                 | LR__1944
18414                 | '         other : return ERR_INVALID
18414     06 FA 65 F6 | 	neg	result1, #6
18418     94 00 90 FD | 	jmp	#LR__1947
1841c                 | LR__1945
1841c                 | '     if count == 0   ' nothing to do
1841c     00 04 0E F2 | 	cmp	_var03, #0 wz
18420                 | '         return 0
18420     00 FA 05 A6 |  if_e	mov	result1, #0
18424     88 00 90 AD |  if_e	jmp	#LR__1947
18428                 | '     if drivercog == -1
18428     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1842c     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
18430     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18434     FF FF 7F FF 
18438     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1843c                 | '         return ERR_INACTIVE
1843c     0F FA 65 A6 |  if_e	neg	result1, #15
18440     6C 00 90 AD |  if_e	jmp	#LR__1947
18444                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
18444     00 FA 05 F6 | 	mov	result1, #0
18448     01 FA 61 FD | 	cogid	result1
1844c     FD 06 02 F6 | 	mov	_var04, result1
18450     01 06 66 F0 | 	shl	_var04, #1
18454     FD 06 02 F1 | 	add	_var04, result1
18458     02 06 66 F0 | 	shl	_var04, #2
1845c     FF 03 00 FF 
18460     00 0B 06 F6 | 	mov	_var06, ##524032
18464     03 0B 02 F1 | 	add	_var06, _var04
18468                 | '     if long[mailbox] < 0
18468     05 07 02 FB | 	rdlong	_var04, _var06
1846c     00 06 56 F2 | 	cmps	_var04, #0 wc
18470                 | '         return ERR_MAILBOX_BUSY
18470     1C FA 65 C6 |  if_b	neg	result1, #28
18474     38 00 90 CD |  if_b	jmp	#LR__1947
18478                 | '     long[mailbox][2] := count
18478     08 0A 06 F1 | 	add	_var06, #8
1847c     05 05 62 FC | 	wrlong	_var03, _var06
18480                 | '     long[mailbox][1] := pattern
18480     04 0A 86 F1 | 	sub	_var06, #4
18484     05 03 62 FC | 	wrlong	_var02, _var06
18488     04 0A 86 F1 | 	sub	_var06, #4
1848c                 | '     long[mailbox] := req + (addr & $fffffff)
1848c     04 0D 02 F6 | 	mov	_var07, _var05
18490     00 0F 02 F6 | 	mov	_var08, _var01
18494     7C 0E 06 F4 | 	bitl	_var08, #124
18498     07 0D 02 F1 | 	add	_var07, _var08
1849c     05 0D 62 FC | 	wrlong	_var07, _var06
184a0                 | '     repeat
184a0                 | LR__1946
184a0                 | '         r := long[mailbox]
184a0     05 0F 02 FB | 	rdlong	_var08, _var06
184a4     00 0E 56 F2 | 	cmps	_var08, #0 wc
184a8     F4 FF 9F CD |  if_b	jmp	#LR__1946
184ac                 | '     while r < 0
184ac                 | '     return -r                  ' return 0 for success or negated error code
184ac     07 FB 61 F6 | 	neg	result1, _var08
184b0                 | LR__1947
184b0                 | _psram_spin2_fill_ret
184b0     2D 00 64 FD | 	ret
184b4                 | 
184b4                 | ' 
184b4                 | ' '..............................................................................
184b4                 | ' 
184b4                 | ' {{
184b4                 | ' }}
184b4                 | ' PUB setQos(cog, qos) : result | mailbox
184b4                 | _psram_spin2_setQos
184b4     09 01 02 F6 | 	mov	_var01, arg01
184b8                 | '     if drivercog == -1 ' driver must be running
184b8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
184bc     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
184c0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
184c4     FF FF 7F FF 
184c8     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
184cc                 | '         return ERR_INACTIVE
184cc     0F FA 65 A6 |  if_e	neg	result1, #15
184d0     9C 00 90 AD |  if_e	jmp	#LR__1954
184d4                 | '     if cog < 0 or cog > 7 ' enforce cog id range
184d4     00 00 56 F2 | 	cmps	_var01, #0 wc
184d8     08 00 90 CD |  if_b	jmp	#LR__1950
184dc     08 00 56 F2 | 	cmps	_var01, #8 wc
184e0     08 00 90 CD |  if_b	jmp	#LR__1951
184e4                 | LR__1950
184e4                 | '         return ERR_INVALID
184e4     06 FA 65 F6 | 	neg	result1, #6
184e8     84 00 90 FD | 	jmp	#LR__1954
184ec                 | LR__1951
184ec                 | '     long[@qosData][cog] := qos & !$1ff
184ec     FF 15 26 F5 | 	andn	arg02, #511
184f0     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
184f4     02 00 66 F0 | 	shl	_var01, #2
184f8     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
184fc     00 15 62 FC | 	wrlong	arg02, _var01
18500                 | '     mailbox := $7FF00 + drivercog*12
18500     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
18504     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
18508     02 07 02 F6 | 	mov	_var04, _var03
1850c     01 06 66 F0 | 	shl	_var04, #1
18510     02 07 02 F1 | 	add	_var04, _var03
18514     02 06 66 F0 | 	shl	_var04, #2
18518     FF 03 00 FF 
1851c     00 09 06 F6 | 	mov	_var05, ##524032
18520     03 09 02 F1 | 	add	_var05, _var04
18524                 | '     repeat until LOCKTRY(driverlock)
18524     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
18528                 | LR__1952
18528     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1852c     06 12 72 FD | 	locktry	arg01 wc
18530     F4 FF 9F 3D |  if_ae	jmp	#LR__1952
18534     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
18538                 | '     long[mailbox] := driver.R_CONFIG + cogid()
18538     00 06 06 F6 | 	mov	_var04, #0
1853c     01 06 62 FD | 	cogid	_var04
18540     00 00 78 FF 
18544     00 02 06 F6 | 	mov	_var02, ##-268435456
18548     03 03 02 F1 | 	add	_var02, _var04
1854c     04 03 62 FC | 	wrlong	_var02, _var05
18550                 | '     repeat while long[mailbox] < 0
18550                 | LR__1953
18550     04 03 02 FB | 	rdlong	_var02, _var05
18554     00 02 56 F2 | 	cmps	_var02, #0 wc
18558     F4 FF 9F CD |  if_b	jmp	#LR__1953
1855c                 | '     LOCKREL(driverlock)
1855c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
18560     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
18564     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
18568     07 12 72 FD | 	lockrel	arg01 wc
1856c     00 FA 05 F6 | 	mov	result1, #0
18570                 | LR__1954
18570                 | _psram_spin2_setQos_ret
18570     2D 00 64 FD | 	ret
18574                 | 
18574                 | ' 
18574                 | ' '..............................................................................
18574                 | ' 
18574                 | ' {{
18574                 | ' }}
18574                 | ' PRI lookupDelay(freq) : delay | profile
18574                 | _psram_spin2_lookupDelay
18574                 | '     profile := @delayTable
18574     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
18578     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1857c                 | '     delay := long[profile][0]
1857c     00 03 02 FB | 	rdlong	_var02, _var01
18580                 | '     repeat while long[profile][1] 
18580     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
18584     97 16 48 FB | 	callpa	#(@LR__1961-@LR__1960)>>2,fcache_load_ptr_
18588                 | LR__1960
18588     04 00 06 F1 | 	add	_var01, #4
1858c     00 FB 09 FB | 	rdlong	result1, _var01 wz
18590     04 00 86 F1 | 	sub	_var01, #4
18594     1C 00 90 AD |  if_e	jmp	#LR__1962
18598                 | '         if freq +< long[profile][1] 
18598     04 00 06 F1 | 	add	_var01, #4
1859c     00 FB 01 FB | 	rdlong	result1, _var01
185a0     04 00 86 F1 | 	sub	_var01, #4
185a4     FD 12 12 F2 | 	cmp	arg01, result1 wc
185a8                 | '             quit
185a8                 | '         profile += 4
185a8     04 00 06 31 |  if_ae	add	_var01, #4
185ac                 | '         delay++
185ac     01 02 06 31 |  if_ae	add	_var02, #1
185b0     D4 FF 9F 3D |  if_ae	jmp	#LR__1960
185b4                 | LR__1961
185b4                 | LR__1962
185b4     01 FB 01 F6 | 	mov	result1, _var02
185b8                 | _psram_spin2_lookupDelay_ret
185b8     2D 00 64 FD | 	ret
185bc                 | 
185bc                 | ' 
185bc                 | ' PUB start() : r
185bc                 | _usbnew_spin2_start
185bc     00 00 06 F6 | 	mov	_var01, #0
185c0                 | '   ifnot driver_cog
185c0     15 00 00 FF 
185c4     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
185c8     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
185cc     15 00 00 FF 
185d0     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
185d4     38 00 90 5D |  if_ne	jmp	#LR__1970
185d8                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
185d8     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
185dc     10 00 06 F6 | 	mov	_var01, #16
185e0     00 16 06 F6 | 	mov	arg03, #0
185e4     28 16 62 FD | 	setq	arg03
185e8     0A 01 F2 FC | 	coginit	_var01, arg02 wc
185ec     01 00 66 C6 |  if_b	neg	_var01, #1
185f0                 | '     if r >= 0
185f0     00 00 56 F2 | 	cmps	_var01, #0 wc
185f4                 | '       driver_cog := r+1
185f4     00 03 02 36 |  if_ae	mov	_var02, _var01
185f8     01 02 06 31 |  if_ae	add	_var02, #1
185fc     15 00 00 3F 
18600     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
18604     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
18608     15 00 00 3F 
1860c     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
18610                 | LR__1970
18610     00 FB 01 F6 | 	mov	result1, _var01
18614                 | _usbnew_spin2_start_ret
18614     2D 00 64 FD | 	ret
18618                 | 
18618                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
18618                 | ' 
18618                 | ' '' Return key event from buffer if there is one
18618                 | ' PUB get_key() : r | tail
18618                 | _usbnew_spin2_get_key
18618                 | '   tail := keyq_tail
18618     0F 00 00 FF 
1861c     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
18620     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
18624                 | '   if keyq_head == tail
18624     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
18628     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1862c     0F 00 00 FF 
18630     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
18634     00 03 0A F2 | 	cmp	_var02, _var01 wz
18638                 | '     return 0 ' No event
18638     00 FA 05 A6 |  if_e	mov	result1, #0
1863c     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
18640                 | '   r := keyq_data[tail]
18640     00 03 02 F6 | 	mov	_var02, _var01
18644     02 02 66 F0 | 	shl	_var02, #2
18648     0F 00 00 FF 
1864c     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
18650     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
18654     01 FB 01 FB | 	rdlong	result1, _var02
18658                 | '   if ++tail == KEYQUEUE_SIZE
18658     01 00 06 F1 | 	add	_var01, #1
1865c     80 00 0E F2 | 	cmp	_var01, #128 wz
18660                 | '     tail := 0
18660     00 00 06 A6 |  if_e	mov	_var01, #0
18664                 | '   keyq_tail := tail
18664     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
18668     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1866c     0F 00 00 FF 
18670     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
18674                 | _usbnew_spin2_get_key_ret
18674     2D 00 64 FD | 	ret
18678                 | 
18678                 | ' 
18678                 | ' '' Emulate mouse movement
18678                 | ' PUB mouse_move(x,y)
18678                 | _usbnew_spin2_mouse_move
18678     02 4A 05 F6 | 	mov	COUNT_, #2
1867c     A8 00 A0 FD | 	call	#pushregs_
18680     09 1F 02 F6 | 	mov	local01, arg01
18684     0A 21 02 F6 | 	mov	local02, arg02
18688                 | '   mouse_lock := 1
18688     14 00 00 FF 
1868c     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
18690     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
18694     14 00 00 FF 
18698     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1869c                 | '   waitus(2) ' hope driver is now done
1869c     02 12 06 F6 | 	mov	arg01, #2
186a0     94 0A B0 FD | 	call	#__system___waitus
186a4                 | '   mouse_xacc := x
186a4     14 00 00 FF 
186a8     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
186ac     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
186b0                 | '   mouse_yacc := y
186b0     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
186b4     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
186b8                 | '   if mouse_outptr
186b8     04 00 00 FF 
186bc     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
186c0     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
186c4     0F 00 00 FF 
186c8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
186cc     24 00 90 AD |  if_e	jmp	#LR__1980
186d0                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
186d0     10 20 66 F0 | 	shl	local02, #16
186d4     0F 1F 32 F9 | 	getword	local01, local01, #0
186d8     0F 21 42 F5 | 	or	local02, local01
186dc     0F 00 00 FF 
186e0     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
186e4     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
186e8     0F 00 00 FF 
186ec     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
186f0     0F 21 62 FC | 	wrlong	local02, local01
186f4                 | LR__1980
186f4                 | '   mouse_lock := 0
186f4     14 00 00 FF 
186f8     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
186fc     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
18700     14 00 00 FF 
18704     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
18708     A7 F0 03 F6 | 	mov	ptra, fp
1870c     B2 00 A0 FD | 	call	#popregs_
18710                 | _usbnew_spin2_mouse_move_ret
18710     2D 00 64 FD | 	ret
18714                 | 
18714                 | '     '' Set HAVE_HIDPAD to enable.
18714                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
18714                 | ' 
18714                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
18714                 | ' PUB hidpad_id(dev) : r
18714                 | _usbnew_spin2_hidpad_id
18714                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
18714     13 00 00 FF 
18718     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1871c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
18720     09 01 02 F6 | 	mov	_var01, arg01
18724     03 00 66 F0 | 	shl	_var01, #3
18728     09 01 82 F1 | 	sub	_var01, arg01
1872c     02 00 66 F0 | 	shl	_var01, #2
18730     00 FB 01 F1 | 	add	result1, _var01
18734     FD FA 01 FB | 	rdlong	result1, result1
18738     13 00 00 FF 
1873c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
18740                 | _usbnew_spin2_hidpad_id_ret
18740     2D 00 64 FD | 	ret
18744                 | 
18744                 | ' 
18744                 | ' '' Get all button states for a device
18744                 | ' PUB hidpad_buttons(dev) : r 
18744                 | _usbnew_spin2_hidpad_buttons
18744                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
18744     13 00 00 FF 
18748     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1874c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
18750     09 01 02 F6 | 	mov	_var01, arg01
18754     03 00 66 F0 | 	shl	_var01, #3
18758     09 01 82 F1 | 	sub	_var01, arg01
1875c     02 00 66 F0 | 	shl	_var01, #2
18760     00 FB 01 F1 | 	add	result1, _var01
18764     14 FA 05 F1 | 	add	result1, #20
18768     FD FA 01 FB | 	rdlong	result1, result1
1876c     13 00 00 FF 
18770     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
18774                 | _usbnew_spin2_hidpad_buttons_ret
18774     2D 00 64 FD | 	ret
18778                 | 
18778                 | ' 
18778                 | ' '' Get state of an axis (normalized between -32768 and 32767)
18778                 | ' PUB hidpad_axis(dev,axnum) : r
18778                 | _usbnew_spin2_hidpad_axis
18778                 | '   if axnum +>= 6
18778     06 14 16 F2 | 	cmp	arg02, #6 wc
1877c                 | '     return 0
1877c     00 FA 05 36 |  if_ae	mov	result1, #0
18780     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
18784                 | '   else 
18784                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
18784     13 00 00 FF 
18788     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1878c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
18790     09 01 02 F6 | 	mov	_var01, arg01
18794     03 00 66 F0 | 	shl	_var01, #3
18798     09 01 82 F1 | 	sub	_var01, arg01
1879c     02 00 66 F0 | 	shl	_var01, #2
187a0     00 FB 01 F1 | 	add	result1, _var01
187a4     04 00 06 F6 | 	mov	_var01, #4
187a8     0A 01 02 F1 | 	add	_var01, arg02
187ac     01 00 66 F0 | 	shl	_var01, #1
187b0     FD 00 02 F1 | 	add	_var01, result1
187b4     00 FB E1 FA | 	rdword	result1, _var01
187b8     0F FA 65 F7 | 	signx	result1, #15
187bc     13 00 00 FF 
187c0     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
187c4                 | _usbnew_spin2_hidpad_axis_ret
187c4     2D 00 64 FD | 	ret
187c8                 | 
187c8                 | ' 
187c8                 | ' 
187c8                 | ' '--------------------------------------------------------------
187c8                 | ' '---------- Init the variables, start the cog. ----------------
187c8                 | ' '--------------------------------------------------------------
187c8                 | ' 
187c8                 | ' pub start(mbox,scope,cache) :cog,base | iii
187c8                 | _Audio093b_8_sc_spin2_start
187c8     04 4A 05 F6 | 	mov	COUNT_, #4
187cc     A8 00 A0 FD | 	call	#pushregs_
187d0     09 1F 02 F6 | 	mov	local01, arg01
187d4                 | ' 
187d4                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
187d4                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
187d4                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
187d4                 | ' 
187d4                 | ' mailboxaddr:=mbox 
187d4     F2 1E 62 FC | 	wrlong	local01, objptr
187d8                 | ' scope_ptr:=scope
187d8     04 E4 05 F1 | 	add	objptr, #4
187dc     F2 14 62 FC | 	wrlong	arg02, objptr
187e0                 | ' cache_ptr:=cache
187e0     04 E4 05 F1 | 	add	objptr, #4
187e4     F2 16 62 FC | 	wrlong	arg03, objptr
187e8                 | ' base:=@channel1[0]
187e8     04 E4 05 F1 | 	add	objptr, #4
187ec     F2 20 02 F6 | 	mov	local02, objptr
187f0                 | ' 
187f0                 | ' repeat iii from 0 to 7
187f0     00 22 06 F6 | 	mov	local03, #0
187f4     02 00 00 FF 
187f8     78 E6 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##1144
187fc     0C E4 85 F1 | 	sub	objptr, #12
18800     97 B0 48 FB | 	callpa	#(@LR__1991-@LR__1990)>>2,fcache_load_ptr_
18804                 | LR__1990
18804                 | '   long[base+64*iii]:=0
18804     10 1F 02 F6 | 	mov	local01, local02
18808     11 FD 01 F6 | 	mov	result2, local03
1880c     06 FC 65 F0 | 	shl	result2, #6
18810     FE 1E 02 F1 | 	add	local01, result2
18814     0F 01 68 FC | 	wrlong	#0, local01
18818                 | '   long[base+64*iii+4]:=0
18818     10 1F 02 F6 | 	mov	local01, local02
1881c     11 FD 01 F6 | 	mov	result2, local03
18820     06 FC 65 F0 | 	shl	result2, #6
18824     FE 1E 02 F1 | 	add	local01, result2
18828     04 1E 06 F1 | 	add	local01, #4
1882c     0F 01 68 FC | 	wrlong	#0, local01
18830                 | '   long[base+64*iii+12]:=0
18830     10 25 02 F6 | 	mov	local04, local02
18834     11 1F 02 F6 | 	mov	local01, local03
18838     06 1E 66 F0 | 	shl	local01, #6
1883c     0F 25 02 F1 | 	add	local04, local01
18840     0C 24 06 F1 | 	add	local04, #12
18844     12 01 68 FC | 	wrlong	#0, local04
18848                 | '   long[base+64*iii+16]:=2 
18848     10 25 02 F6 | 	mov	local04, local02
1884c     11 1F 02 F6 | 	mov	local01, local03
18850     06 1E 66 F0 | 	shl	local01, #6
18854     0F 25 02 F1 | 	add	local04, local01
18858     10 24 06 F1 | 	add	local04, #16
1885c     12 05 68 FC | 	wrlong	#2, local04
18860                 | '   word[base+64*iii+20]:=0
18860     10 25 02 F6 | 	mov	local04, local02
18864     11 1F 02 F6 | 	mov	local01, local03
18868     06 1E 66 F0 | 	shl	local01, #6
1886c     0F 25 02 F1 | 	add	local04, local01
18870     14 24 06 F1 | 	add	local04, #20
18874     12 01 58 FC | 	wrword	#0, local04
18878                 | '   word[base+64*iii+22]:=8192
18878     10 25 02 F6 | 	mov	local04, local02
1887c     11 1F 02 F6 | 	mov	local01, local03
18880     06 1E 66 F0 | 	shl	local01, #6
18884     0F 25 02 F1 | 	add	local04, local01
18888     16 24 06 F1 | 	add	local04, #22
1888c     10 00 80 FF 
18890     12 01 58 FC | 	wrword	##8192, local04
18894                 | '   word[base+64*iii+24]:=4000+2*iii
18894     11 25 02 F6 | 	mov	local04, local03
18898     01 24 66 F0 | 	shl	local04, #1
1889c     07 00 00 FF 
188a0     A0 1F 06 F6 | 	mov	local01, ##4000
188a4     12 1F 02 F1 | 	add	local01, local04
188a8     10 25 02 F6 | 	mov	local04, local02
188ac     11 FD 01 F6 | 	mov	result2, local03
188b0     06 FC 65 F0 | 	shl	result2, #6
188b4     FE 24 02 F1 | 	add	local04, result2
188b8     18 24 06 F1 | 	add	local04, #24
188bc     12 1F 52 FC | 	wrword	local01, local04
188c0                 | '   word[base+64*iii+26]:=2
188c0     10 25 02 F6 | 	mov	local04, local02
188c4     11 1F 02 F6 | 	mov	local01, local03
188c8     06 1E 66 F0 | 	shl	local01, #6
188cc     0F 25 02 F1 | 	add	local04, local01
188d0     1A 24 06 F1 | 	add	local04, #26
188d4     12 05 58 FC | 	wrword	#2, local04
188d8                 | '   long [base+64*iii+8]:=@null | $C0000000
188d8     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
188dc     3E 1E 26 F4 | 	bith	local01, #62
188e0     10 25 02 F6 | 	mov	local04, local02
188e4     11 17 02 F6 | 	mov	arg03, local03
188e8     06 16 66 F0 | 	shl	arg03, #6
188ec     0B 25 02 F1 | 	add	local04, arg03
188f0     08 24 06 F1 | 	add	local04, #8
188f4     12 1F 62 FC | 	wrlong	local01, local04
188f8                 | '   long[base+64*iii+32]:=0
188f8     10 25 02 F6 | 	mov	local04, local02
188fc     11 1F 02 F6 | 	mov	local01, local03
18900     06 1E 66 F0 | 	shl	local01, #6
18904     0F 25 02 F1 | 	add	local04, local01
18908     20 24 06 F1 | 	add	local04, #32
1890c     12 01 68 FC | 	wrlong	#0, local04
18910                 | '   long[base+64*iii+36]:=0
18910     10 25 02 F6 | 	mov	local04, local02
18914     11 1F 02 F6 | 	mov	local01, local03
18918     06 1E 66 F0 | 	shl	local01, #6
1891c     0F 25 02 F1 | 	add	local04, local01
18920     24 24 06 F1 | 	add	local04, #36
18924     12 01 68 FC | 	wrlong	#0, local04
18928                 | '   long[base+64*iii+40]:=0
18928     10 25 02 F6 | 	mov	local04, local02
1892c     11 1F 02 F6 | 	mov	local01, local03
18930     06 1E 66 F0 | 	shl	local01, #6
18934     0F 25 02 F1 | 	add	local04, local01
18938     28 24 06 F1 | 	add	local04, #40
1893c     12 01 68 FC | 	wrlong	#0, local04
18940                 | '   long[base+64*iii+44]:=0
18940     10 25 02 F6 | 	mov	local04, local02
18944     11 1F 02 F6 | 	mov	local01, local03
18948     06 1E 66 F0 | 	shl	local01, #6
1894c     0F 25 02 F1 | 	add	local04, local01
18950     2C 24 06 F1 | 	add	local04, #44
18954     12 01 68 FC | 	wrlong	#0, local04
18958     01 22 06 F1 | 	add	local03, #1
1895c     08 22 56 F2 | 	cmps	local03, #8 wc
18960     A0 FE 9F CD |  if_b	jmp	#LR__1990
18964                 | LR__1991
18964     02 00 00 FF 
18968     78 E6 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##1144
1896c                 | '   
1896c                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1896c     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
18970     F2 16 02 F6 | 	mov	arg03, objptr
18974     10 24 06 F6 | 	mov	local04, #16
18978     28 16 62 FD | 	setq	arg03
1897c     0A 25 F2 FC | 	coginit	local04, arg02 wc
18980     01 24 66 C6 |  if_b	neg	local04, #1
18984                 | ' waitms(100)
18984     64 12 06 F6 | 	mov	arg01, #100
18988     40 07 B0 FD | 	call	#__system___waitms
1898c                 | ' return cog,base
1898c     10 FD 01 F6 | 	mov	result2, local02
18990     12 FB 01 F6 | 	mov	result1, local04
18994     A7 F0 03 F6 | 	mov	ptra, fp
18998     B2 00 A0 FD | 	call	#popregs_
1899c                 | _Audio093b_8_sc_spin2_start_ret
1899c     2D 00 64 FD | 	ret
189a0                 | 
189a0                 | ' 
189a0                 | ' ' a simple play procedure to not poke everything. 
189a0                 | ' 
189a0                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
189a0                 | _Audio093b_8_sc_spin2_play
189a0     0C E4 05 F1 | 	add	objptr, #12
189a4     F2 00 02 F6 | 	mov	_var01, objptr
189a8     06 12 66 F0 | 	shl	arg01, #6
189ac     09 01 02 F1 | 	add	_var01, arg01
189b0     00 00 60 FF 
189b4     00 14 06 F1 | 	add	arg02, ##-1073741824
189b8     00 13 02 F6 | 	mov	arg01, _var01
189bc     08 12 06 F1 | 	add	arg01, #8
189c0     09 15 62 FC | 	wrlong	arg02, arg01
189c4     00 15 02 F6 | 	mov	arg02, _var01
189c8     0C 14 06 F1 | 	add	arg02, #12
189cc     0A 1B 62 FC | 	wrlong	arg05, arg02
189d0     00 1C 56 F2 | 	cmps	arg06, #0 wc
189d4     00 15 02 36 |  if_ae	mov	arg02, _var01
189d8     10 14 06 31 |  if_ae	add	arg02, #16
189dc     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
189e0     02 1A 06 C1 |  if_b	add	arg05, #2
189e4     00 13 02 C6 |  if_b	mov	arg01, _var01
189e8     10 12 06 C1 |  if_b	add	arg01, #16
189ec     09 1B 62 CC |  if_b	wrlong	arg05, arg01
189f0     0B 15 52 F6 | 	abs	arg02, arg03 wc
189f4     0F 1B 80 FF 
189f8     0A 3F 1A FD | 	qdiv	##3546911, arg02
189fc                 | ' 
189fc                 | ' base2:=@channel1[0]+64*channel
189fc                 | ' long[base2+8]:=sample+$C0000000 
189fc                 | ' long[base2+12]:= len
189fc                 | ' if loop >=0 
189fc                 | '   long[base2+16]:= loop
189fc     0C E4 85 F1 | 	sub	objptr, #12
18a00                 | ' else
18a00                 | '   long[base2+16]:= len+2
18a00                 | ' word[base2+20]:=vol
18a00     00 15 02 F6 | 	mov	arg02, _var01
18a04     14 14 06 F1 | 	add	arg02, #20
18a08     0A 19 52 FC | 	wrword	arg04, arg02
18a0c                 | ' word[base2+24]:= 3546911/splfreq 
18a0c     00 13 02 F6 | 	mov	arg01, _var01
18a10     18 12 06 F1 | 	add	arg01, #24
18a14                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
18a14                 | ' long[base2+28]:=$40000000
18a14     18 14 62 FD | 	getqx	arg02
18a18     0A 15 82 F6 | 	negc	arg02, arg02
18a1c     09 15 52 FC | 	wrword	arg02, arg01
18a20     00 15 02 F6 | 	mov	arg02, _var01
18a24     1A 14 06 F1 | 	add	arg02, #26
18a28     0A 01 5A FC | 	wrword	#256, arg02
18a2c     1C 00 06 F1 | 	add	_var01, #28
18a30     00 00 A0 FF 
18a34     00 01 68 FC | 	wrlong	##1073741824, _var01
18a38                 | _Audio093b_8_sc_spin2_play_ret
18a38     2D 00 64 FD | 	ret
18a3c                 | 
18a3c                 | ' until (i >>8) >=len
18a3c                 | ' 
18a3c                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
18a3c                 | _Audio093b_8_sc_spin2_play8
18a3c                 | ' 
18a3c                 | ' base2:=@channel1[0]+64*channel
18a3c     0C E4 05 F1 | 	add	objptr, #12
18a40     F2 00 02 F6 | 	mov	_var01, objptr
18a44     06 12 66 F0 | 	shl	arg01, #6
18a48     09 01 02 F1 | 	add	_var01, arg01
18a4c                 | ' long[base2]:=0
18a4c     00 01 68 FC | 	wrlong	#0, _var01
18a50                 | ' long[base2+8]:=sample+$40000000 
18a50     00 00 20 FF 
18a54     00 14 06 F1 | 	add	arg02, ##1073741824
18a58     00 13 02 F6 | 	mov	arg01, _var01
18a5c     08 12 06 F1 | 	add	arg01, #8
18a60     09 15 62 FC | 	wrlong	arg02, arg01
18a64                 | ' if loop>=0
18a64     00 1C 56 F2 | 	cmps	arg06, #0 wc
18a68     0C E4 85 F1 | 	sub	objptr, #12
18a6c     1C 00 90 CD |  if_b	jmp	#LR__2000
18a70                 | '   long[base2+12]:=loop
18a70     00 15 02 F6 | 	mov	arg02, _var01
18a74     0C 14 06 F1 | 	add	arg02, #12
18a78     0A 1D 62 FC | 	wrlong	arg06, arg02
18a7c                 | '   long[base2+16]:= len
18a7c     00 1D 02 F6 | 	mov	arg06, _var01
18a80     10 1C 06 F1 | 	add	arg06, #16
18a84     0E 1B 62 FC | 	wrlong	arg05, arg06
18a88     1C 00 90 FD | 	jmp	#LR__2001
18a8c                 | LR__2000
18a8c                 | ' else
18a8c                 | '   long[base2+12]:= len
18a8c     00 1D 02 F6 | 	mov	arg06, _var01
18a90     0C 1C 06 F1 | 	add	arg06, #12
18a94     0E 1B 62 FC | 	wrlong	arg05, arg06
18a98                 | '   long[base2+16]:= len+1
18a98     01 1A 06 F1 | 	add	arg05, #1
18a9c     00 13 02 F6 | 	mov	arg01, _var01
18aa0     10 12 06 F1 | 	add	arg01, #16
18aa4     09 1B 62 FC | 	wrlong	arg05, arg01
18aa8                 | LR__2001
18aa8     0B 17 52 F6 | 	abs	arg03, arg03 wc
18aac     0F 1B 80 FF 
18ab0     0B 3F 1A FD | 	qdiv	##3546911, arg03
18ab4                 | ' word[base2+20]:=vol
18ab4     00 17 02 F6 | 	mov	arg03, _var01
18ab8     14 16 06 F1 | 	add	arg03, #20
18abc     0B 19 52 FC | 	wrword	arg04, arg03
18ac0                 | ' word[base2+24]:= 3546911/splfreq 
18ac0     00 13 02 F6 | 	mov	arg01, _var01
18ac4     18 12 06 F1 | 	add	arg01, #24
18ac8                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
18ac8                 | ' long[base2+28]:=$40000000
18ac8     18 18 62 FD | 	getqx	arg04
18acc     0C 19 82 F6 | 	negc	arg04, arg04
18ad0     09 19 52 FC | 	wrword	arg04, arg01
18ad4     00 19 02 F6 | 	mov	arg04, _var01
18ad8     1A 18 06 F1 | 	add	arg04, #26
18adc     0C 01 5A FC | 	wrword	#256, arg04
18ae0     1C 00 06 F1 | 	add	_var01, #28
18ae4     00 00 A0 FF 
18ae8     00 01 68 FC | 	wrlong	##1073741824, _var01
18aec                 | _Audio093b_8_sc_spin2_play8_ret
18aec     2D 00 64 FD | 	ret
18af0                 | 
18af0                 | ' 
18af0                 | '     
18af0                 | ' pub stop(channel) 'silence it
18af0                 | _Audio093b_8_sc_spin2_stop
18af0                 | ' 
18af0                 | ' word[@channel1[0]+64*channel+20]:=0
18af0     0C E4 05 F1 | 	add	objptr, #12
18af4     F2 00 02 F6 | 	mov	_var01, objptr
18af8     06 12 66 F0 | 	shl	arg01, #6
18afc     09 01 02 F1 | 	add	_var01, arg01
18b00     14 00 06 F1 | 	add	_var01, #20
18b04     00 01 58 FC | 	wrword	#0, _var01
18b08     0C E4 85 F1 | 	sub	objptr, #12
18b0c                 | _Audio093b_8_sc_spin2_stop_ret
18b0c     2D 00 64 FD | 	ret
18b10                 | hubexit
18b10     81 00 80 FD | 	jmp	#cogexit
18b14                 | 
18b14                 | __system___setbaud
18b14     14 62 06 FB | 	rdlong	muldiva_, #20
18b18     09 65 02 F6 | 	mov	muldivb_, arg01
18b1c     BA 00 A0 FD | 	call	#divide_
18b20     97 06 48 FB | 	callpa	#(@LR__2011-@LR__2010)>>2,fcache_load_ptr_
18b24                 | LR__2010
18b24     3E FA 9D FA | 	rdpin	result1, #62 wc
18b28     FE FC A1 F1 | 	subx	result2, result2
18b2c     F4 FF 9F CD |  if_b	jmp	#LR__2010
18b30                 | LR__2011
18b30     40 7C 64 FD | 	dirl	#62
18b34     40 7E 64 FD | 	dirl	#63
18b38     F4 64 62 FC | 	wrlong	muldivb_, ptr___system__dat__
18b3c     10 64 66 F0 | 	shl	muldivb_, #16
18b40     07 14 06 F6 | 	mov	arg02, #7
18b44     32 15 02 F1 | 	add	arg02, muldivb_
18b48     3E F8 0C FC | 	wrpin	#124, #62
18b4c     3E 14 16 FC | 	wxpin	arg02, #62
18b50     3F 7C 0C FC | 	wrpin	#62, #63
18b54     14 14 06 F1 | 	add	arg02, #20
18b58     3F 14 16 FC | 	wxpin	arg02, #63
18b5c     41 7C 64 FD | 	dirh	#62
18b60     41 7E 64 FD | 	dirh	#63
18b64                 | __system___setbaud_ret
18b64     2D 00 64 FD | 	ret
18b68                 | 
18b68                 | __system___txraw
18b68     01 4A 05 F6 | 	mov	COUNT_, #1
18b6c     A8 00 A0 FD | 	call	#pushregs_
18b70     09 1F 02 F6 | 	mov	local01, arg01
18b74     97 06 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
18b78                 | LR__2020
18b78     3E FA 9D FA | 	rdpin	result1, #62 wc
18b7c     FE FC A1 F1 | 	subx	result2, result2
18b80     F4 FF 9F CD |  if_b	jmp	#LR__2020
18b84                 | LR__2021
18b84     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
18b88     C2 01 00 AF 
18b8c     00 12 06 A6 |  if_e	mov	arg01, ##230400
18b90     80 FF BF AD |  if_e	call	#__system___setbaud
18b94     58 7C 64 FD | 	drvl	#62
18b98     3E 1E 26 FC | 	wypin	local01, #62
18b9c     01 FA 05 F6 | 	mov	result1, #1
18ba0     A7 F0 03 F6 | 	mov	ptra, fp
18ba4     B2 00 A0 FD | 	call	#popregs_
18ba8                 | __system___txraw_ret
18ba8     2D 00 64 FD | 	ret
18bac                 | 
18bac                 | __system___rxraw
18bac     0D 4A 05 F6 | 	mov	COUNT_, #13
18bb0     A8 00 A0 FD | 	call	#pushregs_
18bb4     09 1F 02 F6 | 	mov	local01, arg01
18bb8     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
18bbc     C2 01 00 AF 
18bc0     00 12 06 A6 |  if_e	mov	arg01, ##230400
18bc4     4C FF BF AD |  if_e	call	#__system___setbaud
18bc8     00 1E 0E F2 | 	cmp	local01, #0 wz
18bcc     20 00 90 AD |  if_e	jmp	#LR__2030
18bd0     14 22 06 FB | 	rdlong	local03, #20
18bd4     0A 22 46 F0 | 	shr	local03, #10
18bd8     11 1F 02 FD | 	qmul	local01, local03
18bdc     1A FA 61 FD | 	getct	result1
18be0     18 24 62 FD | 	getqx	local04
18be4     12 FB 01 F1 | 	add	result1, local04
18be8     FD 26 02 F6 | 	mov	local05, result1
18bec     04 00 90 FD | 	jmp	#LR__2031
18bf0                 | LR__2030
18bf0     00 26 06 F6 | 	mov	local05, #0
18bf4                 | LR__2031
18bf4     01 28 66 F6 | 	neg	local06, #1
18bf8     3F 2A 06 F6 | 	mov	local07, #63
18bfc     00 2C 06 F6 | 	mov	local08, #0
18c00     04 E8 05 F1 | 	add	ptr___system__dat__, #4
18c04     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
18c08     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
18c0c                 | LR__2032
18c0c     08 2E 16 F4 | 	testb	local09, #8 wc
18c10     09 2E 76 F4 | 	testbn	local09, #9 andc
18c14     0A 2E 46 F0 | 	shr	local09, #10
18c18     01 2C 06 C6 |  if_b	mov	local08, #1
18c1c     40 7E 6C 3D |  if_ae	testp	#63 wz
18c20     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
18c24     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
18c28     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
18c2c                 | LR__2033
18c2c     00 20 06 F6 | 	mov	local02, #0
18c30     00 2C 0E F2 | 	cmp	local08, #0 wz
18c34     01 20 66 56 |  if_ne	neg	local02, #1
18c38     00 30 06 F6 | 	mov	local10, #0
18c3c     00 22 06 F6 | 	mov	local03, #0
18c40     00 1E 0E F2 | 	cmp	local01, #0 wz
18c44     01 22 66 56 |  if_ne	neg	local03, #1
18c48     00 24 06 F6 | 	mov	local04, #0
18c4c     00 32 06 F6 | 	mov	local11, #0
18c50     1A FA 61 FD | 	getct	result1
18c54     FD 34 02 F6 | 	mov	local12, result1
18c58     1A 37 02 F6 | 	mov	local13, local12
18c5c     13 37 82 F1 | 	sub	local13, local05
18c60     00 36 56 F2 | 	cmps	local13, #0 wc
18c64     00 32 26 C6 |  if_b	not	local11, #0
18c68     00 32 0E F2 | 	cmp	local11, #0 wz
18c6c     00 24 26 56 |  if_ne	not	local04, #0
18c70     12 23 CA F7 | 	test	local03, local04 wz
18c74     00 30 26 56 |  if_ne	not	local10, #0
18c78     18 21 4A F5 | 	or	local02, local10 wz
18c7c     8C FF 9F AD |  if_e	jmp	#LR__2032
18c80     00 2C 0E F2 | 	cmp	local08, #0 wz
18c84     17 29 02 56 |  if_ne	mov	local06, local09
18c88     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
18c8c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
18c90     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
18c94     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
18c98     14 FB 01 F6 | 	mov	result1, local06
18c9c     A7 F0 03 F6 | 	mov	ptra, fp
18ca0     B2 00 A0 FD | 	call	#popregs_
18ca4                 | __system___rxraw_ret
18ca4     2D 00 64 FD | 	ret
18ca8                 | 
18ca8                 | __system___getus
18ca8     1A FC 71 FD | 	getct	result2 wc
18cac     1A 00 62 FD | 	getct	_var01
18cb0     10 E8 05 F1 | 	add	ptr___system__dat__, #16
18cb4     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
18cb8     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
18cbc     20 00 90 5D |  if_ne	jmp	#LR__2040
18cc0     14 02 06 FB | 	rdlong	_var02, #20
18cc4     A1 07 00 FF 
18cc8     40 02 16 FD | 	qdiv	_var02, ##1000000
18ccc     10 E8 05 F1 | 	add	ptr___system__dat__, #16
18cd0     18 FA 61 FD | 	getqx	result1
18cd4     FD 02 02 F6 | 	mov	_var02, result1
18cd8     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
18cdc     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
18ce0                 | LR__2040
18ce0     01 FD 11 FD | 	qdiv	result2, _var02
18ce4     19 FC 61 FD | 	getqy	result2
18ce8     28 FC 61 FD | 	setq	result2
18cec     01 01 12 FD | 	qdiv	_var01, _var02
18cf0     18 FA 61 FD | 	getqx	result1
18cf4                 | __system___getus_ret
18cf4     2D 00 64 FD | 	ret
18cf8                 | 
18cf8                 | __system____builtin_memmove
18cf8     09 01 02 F6 | 	mov	_var01, arg01
18cfc     0A 13 52 F2 | 	cmps	arg01, arg02 wc
18d00     10 00 90 CD |  if_b	jmp	#LR__2050
18d04     0A 03 02 F6 | 	mov	_var02, arg02
18d08     0B 03 02 F1 | 	add	_var02, arg03
18d0c     01 13 52 F2 | 	cmps	arg01, _var02 wc
18d10     48 00 90 CD |  if_b	jmp	#LR__2056
18d14                 | LR__2050
18d14     0B 05 02 F6 | 	mov	_var03, arg03
18d18     02 04 4E F0 | 	shr	_var03, #2 wz
18d1c     18 00 90 AD |  if_e	jmp	#LR__2055
18d20     97 0A 48 FB | 	callpa	#(@LR__2053-@LR__2051)>>2,fcache_load_ptr_
18d24                 | LR__2051
18d24     02 09 D8 FC | 	rep	@LR__2054, _var03
18d28                 | LR__2052
18d28     0A 05 02 FB | 	rdlong	_var03, arg02
18d2c     09 05 62 FC | 	wrlong	_var03, arg01
18d30     04 12 06 F1 | 	add	arg01, #4
18d34     04 14 06 F1 | 	add	arg02, #4
18d38                 | LR__2053
18d38                 | LR__2054
18d38                 | LR__2055
18d38     02 16 CE F7 | 	test	arg03, #2 wz
18d3c     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
18d40     09 03 52 5C |  if_ne	wrword	_var02, arg01
18d44     02 12 06 51 |  if_ne	add	arg01, #2
18d48     02 14 06 51 |  if_ne	add	arg02, #2
18d4c     01 16 CE F7 | 	test	arg03, #1 wz
18d50     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
18d54     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
18d58     28 00 90 FD | 	jmp	#LR__2062
18d5c                 | LR__2056
18d5c     0B 13 02 F1 | 	add	arg01, arg03
18d60     0B 15 02 F1 | 	add	arg02, arg03
18d64     0B 07 0A F6 | 	mov	_var04, arg03 wz
18d68     18 00 90 AD |  if_e	jmp	#LR__2061
18d6c     97 0A 48 FB | 	callpa	#(@LR__2059-@LR__2057)>>2,fcache_load_ptr_
18d70                 | LR__2057
18d70     03 09 D8 FC | 	rep	@LR__2060, _var04
18d74                 | LR__2058
18d74     01 12 86 F1 | 	sub	arg01, #1
18d78     01 14 86 F1 | 	sub	arg02, #1
18d7c     0A 03 C2 FA | 	rdbyte	_var02, arg02
18d80     09 03 42 FC | 	wrbyte	_var02, arg01
18d84                 | LR__2059
18d84                 | LR__2060
18d84                 | LR__2061
18d84                 | LR__2062
18d84     00 FB 01 F6 | 	mov	result1, _var01
18d88                 | __system____builtin_memmove_ret
18d88     2D 00 64 FD | 	ret
18d8c                 | 
18d8c                 | __system____builtin_strcpy
18d8c     09 01 02 F6 | 	mov	_var01, arg01
18d90     97 0A 48 FB | 	callpa	#(@LR__2071-@LR__2070)>>2,fcache_load_ptr_
18d94                 | LR__2070
18d94     0A FB C9 FA | 	rdbyte	result1, arg02 wz
18d98     09 FB 41 FC | 	wrbyte	result1, arg01
18d9c     01 14 06 F1 | 	add	arg02, #1
18da0     01 12 06 F1 | 	add	arg01, #1
18da4     EC FF 9F 5D |  if_ne	jmp	#LR__2070
18da8                 | LR__2071
18da8     00 FB 01 F6 | 	mov	result1, _var01
18dac                 | __system____builtin_strcpy_ret
18dac     2D 00 64 FD | 	ret
18db0                 | 
18db0                 | __system____topofstack
18db0     00 4A 05 F6 | 	mov	COUNT_, #0
18db4     A8 00 A0 FD | 	call	#pushregs_
18db8     08 F0 07 F1 | 	add	ptra, #8
18dbc     04 4E 05 F1 | 	add	fp, #4
18dc0     A7 12 62 FC | 	wrlong	arg01, fp
18dc4     A7 FA 01 F6 | 	mov	result1, fp
18dc8     04 4E 85 F1 | 	sub	fp, #4
18dcc     A7 F0 03 F6 | 	mov	ptra, fp
18dd0     B2 00 A0 FD | 	call	#popregs_
18dd4                 | __system____topofstack_ret
18dd4     2D 00 64 FD | 	ret
18dd8                 | 
18dd8                 | __system___lockmem
18dd8     00 FA 05 F6 | 	mov	result1, #0
18ddc     01 FA 61 FD | 	cogid	result1
18de0     00 FB 05 F1 | 	add	result1, #256
18de4                 | LR__2080
18de4     09 01 0A FB | 	rdlong	_var01, arg01 wz
18de8     09 FB 61 AC |  if_e	wrlong	result1, arg01
18dec     09 01 02 AB |  if_e	rdlong	_var01, arg01
18df0     09 01 02 AB |  if_e	rdlong	_var01, arg01
18df4     FD 00 0A F2 | 	cmp	_var01, result1 wz
18df8     E8 FF 9F 5D |  if_ne	jmp	#LR__2080
18dfc                 | __system___lockmem_ret
18dfc     2D 00 64 FD | 	ret
18e00                 | 
18e00                 | __system___string_cmp
18e00     97 14 48 FB | 	callpa	#(@LR__2091-@LR__2090)>>2,fcache_load_ptr_
18e04                 | LR__2090
18e04     09 01 C2 FA | 	rdbyte	_var01, arg01
18e08     0A 03 C2 FA | 	rdbyte	_var02, arg02
18e0c     00 05 02 F6 | 	mov	_var03, _var01
18e10     01 05 8A F1 | 	sub	_var03, _var02 wz
18e14     01 12 06 F1 | 	add	arg01, #1
18e18     01 14 06 F1 | 	add	arg02, #1
18e1c     0C 00 90 5D |  if_ne	jmp	#LR__2092
18e20     00 00 0E F2 | 	cmp	_var01, #0 wz
18e24     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
18e28     D8 FF 9F 5D |  if_ne	jmp	#LR__2090
18e2c                 | LR__2091
18e2c                 | LR__2092
18e2c     02 FB 01 F6 | 	mov	result1, _var03
18e30                 | __system___string_cmp_ret
18e30     2D 00 64 FD | 	ret
18e34                 | 
18e34                 | __system___string_concat
18e34     05 4A 05 F6 | 	mov	COUNT_, #5
18e38     A8 00 A0 FD | 	call	#pushregs_
18e3c     09 1F 02 F6 | 	mov	local01, arg01
18e40     0A 21 02 F6 | 	mov	local02, arg02
18e44     0F 13 02 F6 | 	mov	arg01, local01
18e48     09 23 02 F6 | 	mov	local03, arg01
18e4c     97 06 48 FB | 	callpa	#(@LR__2101-@LR__2100)>>2,fcache_load_ptr_
18e50                 | LR__2100
18e50     11 FB C9 FA | 	rdbyte	result1, local03 wz
18e54     01 22 06 51 |  if_ne	add	local03, #1
18e58     F4 FF 9F 5D |  if_ne	jmp	#LR__2100
18e5c                 | LR__2101
18e5c     09 23 82 F1 | 	sub	local03, arg01
18e60     11 25 02 F6 | 	mov	local04, local03
18e64     10 13 02 F6 | 	mov	arg01, local02
18e68     09 23 02 F6 | 	mov	local03, arg01
18e6c     97 06 48 FB | 	callpa	#(@LR__2103-@LR__2102)>>2,fcache_load_ptr_
18e70                 | LR__2102
18e70     11 FB C9 FA | 	rdbyte	result1, local03 wz
18e74     01 22 06 51 |  if_ne	add	local03, #1
18e78     F4 FF 9F 5D |  if_ne	jmp	#LR__2102
18e7c                 | LR__2103
18e7c     09 23 82 F1 | 	sub	local03, arg01
18e80     12 13 02 F6 | 	mov	arg01, local04
18e84     11 13 02 F1 | 	add	arg01, local03
18e88     01 12 06 F1 | 	add	arg01, #1
18e8c     00 3D B0 FD | 	call	#__system___gc_alloc_managed
18e90     FD 26 0A F6 | 	mov	local05, result1 wz
18e94     28 00 90 AD |  if_e	jmp	#LR__2104
18e98     13 13 02 F6 | 	mov	arg01, local05
18e9c     0F 15 02 F6 | 	mov	arg02, local01
18ea0     12 17 02 F6 | 	mov	arg03, local04
18ea4     50 FE BF FD | 	call	#__system____builtin_memmove
18ea8     13 13 02 F6 | 	mov	arg01, local05
18eac     12 13 02 F1 | 	add	arg01, local04
18eb0     01 22 06 F1 | 	add	local03, #1
18eb4     10 15 02 F6 | 	mov	arg02, local02
18eb8     11 17 02 F6 | 	mov	arg03, local03
18ebc     38 FE BF FD | 	call	#__system____builtin_memmove
18ec0                 | LR__2104
18ec0     13 FB 01 F6 | 	mov	result1, local05
18ec4     A7 F0 03 F6 | 	mov	ptra, fp
18ec8     B2 00 A0 FD | 	call	#popregs_
18ecc                 | __system___string_concat_ret
18ecc     2D 00 64 FD | 	ret
18ed0                 | 
18ed0                 | __system___tx
18ed0     02 4A 05 F6 | 	mov	COUNT_, #2
18ed4     A8 00 A0 FD | 	call	#pushregs_
18ed8     09 1F 02 F6 | 	mov	local01, arg01
18edc     0A 1E 0E F2 | 	cmp	local01, #10 wz
18ee0     18 00 90 5D |  if_ne	jmp	#LR__2110
18ee4     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18ee8     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
18eec     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18ef0     02 20 CE F7 | 	test	local02, #2 wz
18ef4     0D 12 06 56 |  if_ne	mov	arg01, #13
18ef8     6C FC BF 5D |  if_ne	call	#__system___txraw
18efc                 | LR__2110
18efc     0F 13 02 F6 | 	mov	arg01, local01
18f00     64 FC BF FD | 	call	#__system___txraw
18f04     A7 F0 03 F6 | 	mov	ptra, fp
18f08     B2 00 A0 FD | 	call	#popregs_
18f0c                 | __system___tx_ret
18f0c     2D 00 64 FD | 	ret
18f10                 | 
18f10                 | __system___rx
18f10     01 4A 05 F6 | 	mov	COUNT_, #1
18f14     A8 00 A0 FD | 	call	#pushregs_
18f18                 | LR__2120
18f18     00 12 06 F6 | 	mov	arg01, #0
18f1c     8C FC BF FD | 	call	#__system___rxraw
18f20     FD 1E 02 F6 | 	mov	local01, result1
18f24     FF FF 7F FF 
18f28     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
18f2c     E8 FF 9F AD |  if_e	jmp	#LR__2120
18f30     0D 1E 0E F2 | 	cmp	local01, #13 wz
18f34     14 00 90 5D |  if_ne	jmp	#LR__2121
18f38     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18f3c     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
18f40     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18f44     02 FA CD F7 | 	test	result1, #2 wz
18f48     0A 1E 06 56 |  if_ne	mov	local01, #10
18f4c                 | LR__2121
18f4c     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18f50     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
18f54     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18f58     01 12 CE F7 | 	test	arg01, #1 wz
18f5c     1C 00 90 AD |  if_e	jmp	#LR__2124
18f60     7F 1E 0E F2 | 	cmp	local01, #127 wz
18f64     0C 00 90 5D |  if_ne	jmp	#LR__2122
18f68     08 12 06 F6 | 	mov	arg01, #8
18f6c     60 FF BF FD | 	call	#__system___tx
18f70     08 00 90 FD | 	jmp	#LR__2123
18f74                 | LR__2122
18f74     0F 13 02 F6 | 	mov	arg01, local01
18f78     54 FF BF FD | 	call	#__system___tx
18f7c                 | LR__2123
18f7c                 | LR__2124
18f7c     0F FB 01 F6 | 	mov	result1, local01
18f80     A7 F0 03 F6 | 	mov	ptra, fp
18f84     B2 00 A0 FD | 	call	#popregs_
18f88                 | __system___rx_ret
18f88     2D 00 64 FD | 	ret
18f8c                 | 
18f8c                 | __system___pinwrite
18f8c     09 01 02 F6 | 	mov	_var01, arg01
18f90     1F 00 06 F5 | 	and	_var01, #31
18f94     20 12 CE F7 | 	test	arg01, #32 wz
18f98     06 12 46 F0 | 	shr	arg01, #6
18f9c     09 13 CA F9 | 	bmask	arg01, arg01
18fa0     00 13 62 F0 | 	shl	arg01, _var01
18fa4     00 15 62 F0 | 	shl	arg02, _var01
18fa8     1C 00 90 AD |  if_e	jmp	#LR__2130
18fac     09 F7 43 F5 | 	or	dirb, arg01
18fb0     FD 01 02 F6 | 	mov	_var01, outb
18fb4     09 01 22 F5 | 	andn	_var01, arg01
18fb8     09 15 02 F5 | 	and	arg02, arg01
18fbc     0A 01 42 F5 | 	or	_var01, arg02
18fc0     00 FB 03 F6 | 	mov	outb, _var01
18fc4     18 00 90 FD | 	jmp	#LR__2131
18fc8                 | LR__2130
18fc8     09 F5 43 F5 | 	or	dira, arg01
18fcc     FC 01 02 F6 | 	mov	_var01, outa
18fd0     09 01 22 F5 | 	andn	_var01, arg01
18fd4     09 15 02 F5 | 	and	arg02, arg01
18fd8     0A 01 42 F5 | 	or	_var01, arg02
18fdc     00 F9 03 F6 | 	mov	outa, _var01
18fe0                 | LR__2131
18fe0                 | __system___pinwrite_ret
18fe0     2D 00 64 FD | 	ret
18fe4                 | 
18fe4                 | __system___basic_read_line
18fe4     06 4A 05 F6 | 	mov	COUNT_, #6
18fe8     A8 00 A0 FD | 	call	#pushregs_
18fec     09 1F 02 F6 | 	mov	local01, arg01
18ff0     00 20 06 F6 | 	mov	local02, #0
18ff4     18 22 06 F6 | 	mov	local03, #24
18ff8     00 24 06 F6 | 	mov	local04, #0
18ffc     18 12 06 F6 | 	mov	arg01, #24
19000     8C 3B B0 FD | 	call	#__system___gc_alloc_managed
19004     FD 26 0A F6 | 	mov	local05, result1 wz
19008     13 FB 01 A6 |  if_e	mov	result1, local05
1900c     B0 00 90 AD |  if_e	jmp	#LR__2143
19010                 | LR__2140
19010     0F 13 02 F6 | 	mov	arg01, local01
19014     78 0B B0 FD | 	call	#__system___basic_get_char
19018     FD 28 02 F6 | 	mov	local06, result1
1901c     01 28 56 F2 | 	cmps	local06, #1 wc
19020     8C 00 90 CD |  if_b	jmp	#LR__2142
19024     0A 28 0E F2 | 	cmp	local06, #10 wz
19028     10 00 90 5D |  if_ne	jmp	#LR__2141
1902c     00 24 0E F2 | 	cmp	local04, #0 wz
19030     01 20 56 52 |  if_ne	cmps	local02, #1 wc
19034     01 20 86 11 |  if_a	sub	local02, #1
19038     74 00 90 FD | 	jmp	#LR__2142
1903c                 | LR__2141
1903c     0D 28 0E F2 | 	cmp	local06, #13 wz
19040     01 24 06 A6 |  if_e	mov	local04, #1
19044     00 24 06 56 |  if_ne	mov	local04, #0
19048     08 28 0E F2 | 	cmp	local06, #8 wz
1904c     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
19050     01 20 56 A2 |  if_e	cmps	local02, #1 wc
19054     01 20 86 21 |  if_nc_and_z	sub	local02, #1
19058     B4 FF 9F AD |  if_e	jmp	#LR__2140
1905c     13 17 02 F6 | 	mov	arg03, local05
19060     10 17 02 F1 | 	add	arg03, local02
19064     0B 29 42 FC | 	wrbyte	local06, arg03
19068     01 20 06 F1 | 	add	local02, #1
1906c     11 21 0A F2 | 	cmp	local02, local03 wz
19070     9C FF 9F 5D |  if_ne	jmp	#LR__2140
19074     11 13 02 F6 | 	mov	arg01, local03
19078     20 12 06 F1 | 	add	arg01, #32
1907c     10 3B B0 FD | 	call	#__system___gc_alloc_managed
19080     FD 28 0A F6 | 	mov	local06, result1 wz
19084     14 FB 01 A6 |  if_e	mov	result1, local06
19088     34 00 90 AD |  if_e	jmp	#LR__2143
1908c     14 13 02 F6 | 	mov	arg01, local06
19090     13 15 02 F6 | 	mov	arg02, local05
19094     11 17 02 F6 | 	mov	arg03, local03
19098     5C FC BF FD | 	call	#__system____builtin_memmove
1909c     20 22 06 F1 | 	add	local03, #32
190a0     13 13 02 F6 | 	mov	arg01, local05
190a4     24 3C B0 FD | 	call	#__system___gc_free
190a8     14 27 02 F6 | 	mov	local05, local06
190ac     60 FF 9F FD | 	jmp	#LR__2140
190b0                 | LR__2142
190b0     13 29 02 F6 | 	mov	local06, local05
190b4     10 29 02 F1 | 	add	local06, local02
190b8     14 01 48 FC | 	wrbyte	#0, local06
190bc     13 FB 01 F6 | 	mov	result1, local05
190c0                 | LR__2143
190c0     A7 F0 03 F6 | 	mov	ptra, fp
190c4     B2 00 A0 FD | 	call	#popregs_
190c8                 | __system___basic_read_line_ret
190c8     2D 00 64 FD | 	ret
190cc                 | 
190cc                 | __system___waitms
190cc     09 01 02 F6 | 	mov	_var01, arg01
190d0     1A 02 62 FD | 	getct	_var02
190d4     14 04 06 FB | 	rdlong	_var03, #20
190d8     97 14 48 FB | 	callpa	#(@LR__2151-@LR__2150)>>2,fcache_load_ptr_
190dc                 | LR__2150
190dc     01 00 00 FF 
190e0     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
190e4     1C 00 90 CD |  if_b	jmp	#LR__2152
190e8     02 03 02 F1 | 	add	_var02, _var03
190ec     01 13 02 F6 | 	mov	arg01, _var02
190f0     00 12 66 FA | 	addct1	arg01, #0
190f4     24 22 60 FD | 	waitct1
190f8     01 00 00 FF 
190fc     E8 01 86 F1 | 	sub	_var01, ##1000
19100     D8 FF 9F FD | 	jmp	#LR__2150
19104                 | LR__2151
19104                 | LR__2152
19104     01 00 56 F2 | 	cmps	_var01, #1 wc
19108     28 00 90 CD |  if_b	jmp	#LR__2153
1910c     02 01 02 FD | 	qmul	_var01, _var03
19110     01 00 00 FF 
19114     E8 17 06 F6 | 	mov	arg03, ##1000
19118     19 FA 61 FD | 	getqy	result1
1911c     18 12 62 FD | 	getqx	arg01
19120     28 FA 61 FD | 	setq	result1
19124     0B 13 12 FD | 	qdiv	arg01, arg03
19128     18 12 62 FD | 	getqx	arg01
1912c     01 13 62 FA | 	addct1	arg01, _var02
19130     24 22 60 FD | 	waitct1
19134                 | LR__2153
19134                 | __system___waitms_ret
19134     2D 00 64 FD | 	ret
19138                 | 
19138                 | __system___waitus
19138     09 01 02 F6 | 	mov	_var01, arg01
1913c     1A 02 62 FD | 	getct	_var02
19140     14 04 06 FB | 	rdlong	_var03, #20
19144     97 14 48 FB | 	callpa	#(@LR__2161-@LR__2160)>>2,fcache_load_ptr_
19148                 | LR__2160
19148     A1 07 00 FF 
1914c     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
19150     1C 00 90 CD |  if_b	jmp	#LR__2162
19154     02 03 02 F1 | 	add	_var02, _var03
19158     01 13 02 F6 | 	mov	arg01, _var02
1915c     00 12 66 FA | 	addct1	arg01, #0
19160     24 22 60 FD | 	waitct1
19164     A1 07 00 FF 
19168     40 00 86 F1 | 	sub	_var01, ##1000000
1916c     D8 FF 9F FD | 	jmp	#LR__2160
19170                 | LR__2161
19170                 | LR__2162
19170     01 00 56 F2 | 	cmps	_var01, #1 wc
19174     28 00 90 CD |  if_b	jmp	#LR__2163
19178     02 01 02 FD | 	qmul	_var01, _var03
1917c     A1 07 00 FF 
19180     40 16 06 F6 | 	mov	arg03, ##1000000
19184     19 FA 61 FD | 	getqy	result1
19188     18 12 62 FD | 	getqx	arg01
1918c     28 FA 61 FD | 	setq	result1
19190     0B 13 12 FD | 	qdiv	arg01, arg03
19194     18 FA 61 FD | 	getqx	result1
19198     FD 02 62 FA | 	addct1	_var02, result1
1919c     24 22 60 FD | 	waitct1
191a0                 | LR__2163
191a0                 | __system___waitus_ret
191a0     2D 00 64 FD | 	ret
191a4                 | 
191a4                 | __system___mount
191a4     0B 4A 05 F6 | 	mov	COUNT_, #11
191a8     A8 00 A0 FD | 	call	#pushregs_
191ac     09 1F 02 F6 | 	mov	local01, arg01
191b0     0A 21 0A F6 | 	mov	local02, arg02 wz
191b4     01 22 66 F6 | 	neg	local03, #1
191b8     01 FA 65 A6 |  if_e	neg	result1, #1
191bc     98 02 90 AD |  if_e	jmp	#LR__2185
191c0     0F FB C1 FA | 	rdbyte	result1, local01
191c4     2F FA 0D F2 | 	cmp	result1, #47 wz
191c8     28 00 90 5D |  if_ne	jmp	#LR__2172
191cc     0F 13 02 F6 | 	mov	arg01, local01
191d0     09 25 02 F6 | 	mov	local04, arg01
191d4     97 06 48 FB | 	callpa	#(@LR__2171-@LR__2170)>>2,fcache_load_ptr_
191d8                 | LR__2170
191d8     12 FB C9 FA | 	rdbyte	result1, local04 wz
191dc     01 24 06 51 |  if_ne	add	local04, #1
191e0     F4 FF 9F 5D |  if_ne	jmp	#LR__2170
191e4                 | LR__2171
191e4     09 25 82 F1 | 	sub	local04, arg01
191e8     12 FB 01 F6 | 	mov	result1, local04
191ec     10 FA 55 F2 | 	cmps	result1, #16 wc
191f0     14 00 90 CD |  if_b	jmp	#LR__2173
191f4                 | LR__2172
191f4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
191f8     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
191fc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19200     01 FA 65 F6 | 	neg	result1, #1
19204     50 02 90 FD | 	jmp	#LR__2185
19208                 | LR__2173
19208     00 26 06 F6 | 	mov	local05, #0
1920c                 | LR__2174
1920c     04 26 56 F2 | 	cmps	local05, #4 wc
19210     B0 00 90 3D |  if_ae	jmp	#LR__2179
19214     13 13 02 F6 | 	mov	arg01, local05
19218     02 12 66 F0 | 	shl	arg01, #2
1921c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19220     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
19224     09 FB 09 FB | 	rdlong	result1, arg01 wz
19228     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1922c     00 22 56 A2 |  if_e	cmps	local03, #0 wc
19230     13 23 02 86 |  if_c_and_z	mov	local03, local05
19234     84 00 90 8D |  if_c_and_z	jmp	#LR__2178
19238     13 13 02 F6 | 	mov	arg01, local05
1923c     02 12 66 F0 | 	shl	arg01, #2
19240     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19244     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
19248     09 13 02 FB | 	rdlong	arg01, arg01
1924c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19250     09 25 02 F6 | 	mov	local04, arg01
19254     97 06 48 FB | 	callpa	#(@LR__2176-@LR__2175)>>2,fcache_load_ptr_
19258                 | LR__2175
19258     12 FB C9 FA | 	rdbyte	result1, local04 wz
1925c     01 24 06 51 |  if_ne	add	local04, #1
19260     F4 FF 9F 5D |  if_ne	jmp	#LR__2175
19264                 | LR__2176
19264     09 25 82 F1 | 	sub	local04, arg01
19268     12 29 02 F6 | 	mov	local06, local04
1926c     14 13 02 F6 | 	mov	arg01, local06
19270     0F 13 02 F1 | 	add	arg01, local01
19274     09 FB C1 FA | 	rdbyte	result1, arg01
19278     2F FA 0D F2 | 	cmp	result1, #47 wz
1927c     14 2B 02 56 |  if_ne	mov	local07, local06
19280     0F 2B 02 51 |  if_ne	add	local07, local01
19284     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
19288     30 00 90 5D |  if_ne	jmp	#LR__2177
1928c     13 17 02 F6 | 	mov	arg03, local05
19290     02 16 66 F0 | 	shl	arg03, #2
19294     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19298     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
1929c     0B 15 02 FB | 	rdlong	arg02, arg03
192a0     0F 13 02 F6 | 	mov	arg01, local01
192a4     14 17 02 F6 | 	mov	arg03, local06
192a8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
192ac     24 4D B0 FD | 	call	#__system__strncmp
192b0     00 FA 0D F2 | 	cmp	result1, #0 wz
192b4     13 23 02 A6 |  if_e	mov	local03, local05
192b8     08 00 90 AD |  if_e	jmp	#LR__2179
192bc                 | LR__2177
192bc                 | LR__2178
192bc     01 26 06 F1 | 	add	local05, #1
192c0     48 FF 9F FD | 	jmp	#LR__2174
192c4                 | LR__2179
192c4     FF FF 7F FF 
192c8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
192cc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
192d0     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
192d4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
192d8     01 FA 65 A6 |  if_e	neg	result1, #1
192dc     78 01 90 AD |  if_e	jmp	#LR__2185
192e0     11 27 02 F6 | 	mov	local05, local03
192e4     13 2B 02 F6 | 	mov	local07, local05
192e8     02 2A 66 F0 | 	shl	local07, #2
192ec     74 E8 05 F1 | 	add	ptr___system__dat__, #116
192f0     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
192f4     15 29 0A FB | 	rdlong	local06, local07 wz
192f8     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
192fc     58 00 90 AD |  if_e	jmp	#LR__2180
19300     4C 28 06 F1 | 	add	local06, #76
19304     14 2B 0A FB | 	rdlong	local07, local06 wz
19308     4C 28 86 F1 | 	sub	local06, #76
1930c     48 00 90 AD |  if_e	jmp	#LR__2180
19310     4C 28 06 F1 | 	add	local06, #76
19314     14 2B 02 FB | 	rdlong	local07, local06
19318     15 23 02 F6 | 	mov	local03, local07
1931c     13 2A 46 F7 | 	zerox	local07, #19
19320     14 22 46 F0 | 	shr	local03, #20
19324     02 22 66 F0 | 	shl	local03, #2
19328     ED 22 02 F1 | 	add	local03, __methods__
1932c     11 23 02 FB | 	rdlong	local03, local03
19330     13 29 02 F6 | 	mov	local06, local05
19334     02 28 66 F0 | 	shl	local06, #2
19338     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1933c     F4 28 02 F1 | 	add	local06, ptr___system__dat__
19340     14 13 02 FB | 	rdlong	arg01, local06
19344     F2 28 02 F6 | 	mov	local06, objptr
19348     15 E5 01 F6 | 	mov	objptr, local07
1934c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19350     2D 22 62 FD | 	call	local03
19354     14 E5 01 F6 | 	mov	objptr, local06
19358                 | LR__2180
19358     13 2D 02 F6 | 	mov	local08, local05
1935c     02 2C 66 F0 | 	shl	local08, #2
19360     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19364     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
19368     16 21 62 FC | 	wrlong	local02, local08
1936c     00 20 0E F2 | 	cmp	local02, #0 wz
19370     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
19374     18 00 90 5D |  if_ne	jmp	#LR__2181
19378     02 26 66 F0 | 	shl	local05, #2
1937c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19380     F4 26 02 F1 | 	add	local05, ptr___system__dat__
19384     13 01 68 FC | 	wrlong	#0, local05
19388     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1938c     C4 00 90 FD | 	jmp	#LR__2184
19390                 | LR__2181
19390     13 2F 02 F6 | 	mov	local09, local05
19394     04 2E 66 F0 | 	shl	local09, #4
19398     24 E8 05 F1 | 	add	ptr___system__dat__, #36
1939c     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
193a0     17 13 02 F6 | 	mov	arg01, local09
193a4     0F 15 02 F6 | 	mov	arg02, local01
193a8     10 16 06 F6 | 	mov	arg03, #16
193ac     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
193b0     74 4B B0 FD | 	call	#__system__strncpy
193b4     48 20 06 F1 | 	add	local02, #72
193b8     10 2D 0A FB | 	rdlong	local08, local02 wz
193bc     48 20 86 F1 | 	sub	local02, #72
193c0     7C 00 90 AD |  if_e	jmp	#LR__2183
193c4     48 20 06 F1 | 	add	local02, #72
193c8     10 2D 02 FB | 	rdlong	local08, local02
193cc     16 31 02 F6 | 	mov	local10, local08
193d0     13 2C 46 F7 | 	zerox	local08, #19
193d4     14 30 46 F0 | 	shr	local10, #20
193d8     02 30 66 F0 | 	shl	local10, #2
193dc     ED 30 02 F1 | 	add	local10, __methods__
193e0     18 31 02 FB | 	rdlong	local10, local10
193e4     17 13 02 F6 | 	mov	arg01, local09
193e8     F2 32 02 F6 | 	mov	local11, objptr
193ec     16 E5 01 F6 | 	mov	objptr, local08
193f0     2D 30 62 FD | 	call	local10
193f4     19 E5 01 F6 | 	mov	objptr, local11
193f8     FD 12 0A F6 | 	mov	arg01, result1 wz
193fc     40 00 90 AD |  if_e	jmp	#LR__2182
19400     13 2D 02 F6 | 	mov	local08, local05
19404     02 2C 66 F0 | 	shl	local08, #2
19408     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1940c     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
19410     16 01 68 FC | 	wrlong	#0, local08
19414     02 26 66 F0 | 	shl	local05, #2
19418     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
1941c     F4 26 02 F1 | 	add	local05, ptr___system__dat__
19420     13 01 68 FC | 	wrlong	#0, local05
19424     09 13 6A F6 | 	neg	arg01, arg01 wz
19428     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
1942c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19430     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19434     01 FA 65 56 |  if_ne	neg	result1, #1
19438     00 FA 05 A6 |  if_e	mov	result1, #0
1943c     18 00 90 FD | 	jmp	#LR__2185
19440                 | LR__2182
19440                 | LR__2183
19440     02 26 66 F0 | 	shl	local05, #2
19444     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19448     F4 26 02 F1 | 	add	local05, ptr___system__dat__
1944c     13 2F 62 FC | 	wrlong	local09, local05
19450     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19454                 | LR__2184
19454     00 FA 05 F6 | 	mov	result1, #0
19458                 | LR__2185
19458     A7 F0 03 F6 | 	mov	ptra, fp
1945c     B2 00 A0 FD | 	call	#popregs_
19460                 | __system___mount_ret
19460     2D 00 64 FD | 	ret
19464                 | 
19464                 | __system___chdir
19464     00 4A 05 F6 | 	mov	COUNT_, #0
19468     A8 00 A0 FD | 	call	#pushregs_
1946c     40 F0 07 F1 | 	add	ptra, #64
19470     04 4E 05 F1 | 	add	fp, #4
19474     A7 12 62 FC | 	wrlong	arg01, fp
19478     04 4E 05 F1 | 	add	fp, #4
1947c     A7 14 02 F6 | 	mov	arg02, fp
19480     08 4E 85 F1 | 	sub	fp, #8
19484     80 47 B0 FD | 	call	#__system__stat
19488     3C 4E 05 F1 | 	add	fp, #60
1948c     A7 FA 61 FC | 	wrlong	result1, fp
19490     3C 4E 85 F1 | 	sub	fp, #60
19494     00 FA 0D F2 | 	cmp	result1, #0 wz
19498     3C 4E 05 51 |  if_ne	add	fp, #60
1949c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
194a0     3C 4E 85 51 |  if_ne	sub	fp, #60
194a4     BC 00 90 5D |  if_ne	jmp	#LR__2192
194a8     10 4E 05 F1 | 	add	fp, #16
194ac     A7 12 02 FB | 	rdlong	arg01, fp
194b0     10 4E 85 F1 | 	sub	fp, #16
194b4     78 00 00 FF 
194b8     00 12 06 F5 | 	and	arg01, ##61440
194bc     08 00 00 FF 
194c0     00 12 0E F2 | 	cmp	arg01, ##4096 wz
194c4     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
194c8     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
194cc     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
194d0     01 FA 65 56 |  if_ne	neg	result1, #1
194d4     8C 00 90 5D |  if_ne	jmp	#LR__2192
194d8     04 4E 05 F1 | 	add	fp, #4
194dc     A7 16 02 FB | 	rdlong	arg03, fp
194e0     04 4E 85 F1 | 	sub	fp, #4
194e4     0B 17 C2 FA | 	rdbyte	arg03, arg03
194e8     2F 16 0E F2 | 	cmp	arg03, #47 wz
194ec     24 00 90 5D |  if_ne	jmp	#LR__2190
194f0     84 E8 05 F1 | 	add	ptr___system__dat__, #132
194f4     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
194f8     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
194fc     04 4E 05 F1 | 	add	fp, #4
19500     A7 14 02 FB | 	rdlong	arg02, fp
19504     04 4E 85 F1 | 	sub	fp, #4
19508     00 17 06 F6 | 	mov	arg03, #256
1950c     18 4A B0 FD | 	call	#__system__strncpy
19510     4C 00 90 FD | 	jmp	#LR__2191
19514                 | LR__2190
19514     84 E9 05 F1 | 	add	ptr___system__dat__, #388
19518     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1951c     38 4E 05 F1 | 	add	fp, #56
19520     A7 12 62 FC | 	wrlong	arg01, fp
19524     38 4E 85 F1 | 	sub	fp, #56
19528     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
1952c     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
19530     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
19534     00 17 06 F6 | 	mov	arg03, #256
19538     EC 49 B0 FD | 	call	#__system__strncpy
1953c     38 4E 05 F1 | 	add	fp, #56
19540     A7 12 02 FB | 	rdlong	arg01, fp
19544     34 4E 85 F1 | 	sub	fp, #52
19548     A7 14 02 FB | 	rdlong	arg02, fp
1954c     04 4E 85 F1 | 	sub	fp, #4
19550     84 E8 05 F1 | 	add	ptr___system__dat__, #132
19554     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
19558     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
1955c     10 00 B0 FD | 	call	#__system____getvfsforfile
19560                 | LR__2191
19560     00 FA 05 F6 | 	mov	result1, #0
19564                 | LR__2192
19564     A7 F0 03 F6 | 	mov	ptra, fp
19568     B2 00 A0 FD | 	call	#popregs_
1956c                 | __system___chdir_ret
1956c     2D 00 64 FD | 	ret
19570                 | 
19570                 | __system____getvfsforfile
19570     0E 4A 05 F6 | 	mov	COUNT_, #14
19574     A8 00 A0 FD | 	call	#pushregs_
19578     09 1F 02 F6 | 	mov	local01, arg01
1957c     0A 21 02 F6 | 	mov	local02, arg02
19580     0B 23 02 F6 | 	mov	local03, arg03
19584     97 10 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
19588                 | LR__2200
19588     10 FB C1 FA | 	rdbyte	result1, local02
1958c     2F FA 0D F2 | 	cmp	result1, #47 wz
19590     01 20 06 A1 |  if_e	add	local02, #1
19594     10 25 C2 AA |  if_e	rdbyte	local04, local02
19598     01 20 86 A1 |  if_e	sub	local02, #1
1959c     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
195a0     01 20 06 A1 |  if_e	add	local02, #1
195a4     E0 FF 9F AD |  if_e	jmp	#LR__2200
195a8                 | LR__2201
195a8     10 25 C2 FA | 	rdbyte	local04, local02
195ac     2F 24 0E F2 | 	cmp	local04, #47 wz
195b0     14 00 90 5D |  if_ne	jmp	#LR__2202
195b4     0F 13 02 F6 | 	mov	arg01, local01
195b8     10 15 02 F6 | 	mov	arg02, local02
195bc     00 17 06 F6 | 	mov	arg03, #256
195c0     64 49 B0 FD | 	call	#__system__strncpy
195c4     7C 00 90 FD | 	jmp	#LR__2204
195c8                 | LR__2202
195c8     84 E8 05 F1 | 	add	ptr___system__dat__, #132
195cc     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
195d0     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
195d4     0F 13 02 F6 | 	mov	arg01, local01
195d8     00 17 06 F6 | 	mov	arg03, #256
195dc     48 49 B0 FD | 	call	#__system__strncpy
195e0     10 25 CA FA | 	rdbyte	local04, local02 wz
195e4     5C 00 90 AD |  if_e	jmp	#LR__2203
195e8     10 25 C2 FA | 	rdbyte	local04, local02
195ec     2E 24 0E F2 | 	cmp	local04, #46 wz
195f0     01 20 06 A1 |  if_e	add	local02, #1
195f4     10 27 C2 AA |  if_e	rdbyte	local05, local02
195f8     01 20 86 A1 |  if_e	sub	local02, #1
195fc     13 29 02 A6 |  if_e	mov	local06, local05
19600     07 28 4E A7 |  if_e	zerox	local06, #7 wz
19604     3C 00 90 AD |  if_e	jmp	#LR__2203
19608     0F 27 C2 FA | 	rdbyte	local05, local01
1960c     2F 26 0E F2 | 	cmp	local05, #47 wz
19610     01 1E 06 A1 |  if_e	add	local01, #1
19614     0F 25 C2 AA |  if_e	rdbyte	local04, local01
19618     01 1E 86 A1 |  if_e	sub	local01, #1
1961c     00 24 4E A2 |  if_e	cmps	local04, #0 wz
19620     41 01 00 5F 
19624     E4 14 06 56 |  if_ne	mov	arg02, ##@LR__4250
19628     0F 13 02 56 |  if_ne	mov	arg01, local01
1962c     00 17 06 56 |  if_ne	mov	arg03, #256
19630     40 49 B0 5D |  if_ne	call	#__system__strncat
19634     0F 13 02 F6 | 	mov	arg01, local01
19638     10 15 02 F6 | 	mov	arg02, local02
1963c     00 17 06 F6 | 	mov	arg03, #256
19640     30 49 B0 FD | 	call	#__system__strncat
19644                 | LR__2203
19644                 | LR__2204
19644     0F 13 02 F6 | 	mov	arg01, local01
19648     E8 4A B0 FD | 	call	#__system___normalizeName
1964c     0F 25 CA FA | 	rdbyte	local04, local01 wz
19650     1C 00 90 AD |  if_e	jmp	#LR__2205
19654     0F 25 C2 FA | 	rdbyte	local04, local01
19658     2F 24 0E F2 | 	cmp	local04, #47 wz
1965c     01 1E 06 A1 |  if_e	add	local01, #1
19660     0F 29 C2 AA |  if_e	rdbyte	local06, local01
19664     01 1E 86 A1 |  if_e	sub	local01, #1
19668     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1966c     18 00 90 5D |  if_ne	jmp	#LR__2206
19670                 | LR__2205
19670     01 00 00 FF 
19674     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
19678     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1967c     01 00 00 FF 
19680     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
19684     EC 01 90 FD | 	jmp	#LR__2220
19688                 | LR__2206
19688     00 2A 06 F6 | 	mov	local07, #0
1968c                 | LR__2207
1968c     04 2A 56 F2 | 	cmps	local07, #4 wc
19690     CC 01 90 3D |  if_ae	jmp	#LR__2219
19694     15 29 02 F6 | 	mov	local06, local07
19698     02 28 66 F0 | 	shl	local06, #2
1969c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
196a0     F4 28 02 F1 | 	add	local06, ptr___system__dat__
196a4     14 29 0A FB | 	rdlong	local06, local06 wz
196a8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
196ac     A8 01 90 AD |  if_e	jmp	#LR__2218
196b0     15 25 02 F6 | 	mov	local04, local07
196b4     02 24 66 F0 | 	shl	local04, #2
196b8     64 E8 05 F1 | 	add	ptr___system__dat__, #100
196bc     F4 24 02 F1 | 	add	local04, ptr___system__dat__
196c0     12 13 02 FB | 	rdlong	arg01, local04
196c4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
196c8     09 2D 02 F6 | 	mov	local08, arg01
196cc     97 06 48 FB | 	callpa	#(@LR__2209-@LR__2208)>>2,fcache_load_ptr_
196d0                 | LR__2208
196d0     16 FB C9 FA | 	rdbyte	result1, local08 wz
196d4     01 2C 06 51 |  if_ne	add	local08, #1
196d8     F4 FF 9F 5D |  if_ne	jmp	#LR__2208
196dc                 | LR__2209
196dc     09 2D 82 F1 | 	sub	local08, arg01
196e0     16 2F 02 F6 | 	mov	local09, local08
196e4     17 25 02 F6 | 	mov	local04, local09
196e8     0F 25 02 F1 | 	add	local04, local01
196ec     12 29 C2 FA | 	rdbyte	local06, local04
196f0     2F 28 0E F2 | 	cmp	local06, #47 wz
196f4     17 31 02 56 |  if_ne	mov	local10, local09
196f8     0F 31 02 51 |  if_ne	add	local10, local01
196fc     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
19700     54 01 90 5D |  if_ne	jmp	#LR__2217
19704     15 17 02 F6 | 	mov	arg03, local07
19708     02 16 66 F0 | 	shl	arg03, #2
1970c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19710     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
19714     0B 15 02 FB | 	rdlong	arg02, arg03
19718     17 17 02 F6 | 	mov	arg03, local09
1971c     0F 13 02 F6 | 	mov	arg01, local01
19720     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19724     AC 48 B0 FD | 	call	#__system__strncmp
19728     00 FA 4D F2 | 	cmps	result1, #0 wz
1972c     28 01 90 5D |  if_ne	jmp	#LR__2217
19730     15 33 02 F6 | 	mov	local11, local07
19734     02 32 66 F0 | 	shl	local11, #2
19738     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1973c     F4 32 02 F1 | 	add	local11, ptr___system__dat__
19740     19 35 02 FB | 	rdlong	local12, local11
19744     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
19748     97 22 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
1974c                 | LR__2210
1974c     17 29 02 F6 | 	mov	local06, local09
19750     01 28 06 F1 | 	add	local06, #1
19754     0F 29 02 F1 | 	add	local06, local01
19758     14 33 C2 FA | 	rdbyte	local11, local06
1975c     2E 32 0E F2 | 	cmp	local11, #46 wz
19760     2C 00 90 5D |  if_ne	jmp	#LR__2212
19764     17 33 02 F6 | 	mov	local11, local09
19768     02 32 06 F1 | 	add	local11, #2
1976c     0F 33 02 F1 | 	add	local11, local01
19770     19 31 C2 FA | 	rdbyte	local10, local11
19774     2F 30 0E F2 | 	cmp	local10, #47 wz
19778     17 37 02 56 |  if_ne	mov	local13, local09
1977c     02 36 06 51 |  if_ne	add	local13, #2
19780     0F 37 02 51 |  if_ne	add	local13, local01
19784     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
19788     01 2E 06 A1 |  if_e	add	local09, #1
1978c     BC FF 9F AD |  if_e	jmp	#LR__2210
19790                 | LR__2211
19790                 | LR__2212
19790     00 22 0E F2 | 	cmp	local03, #0 wz
19794     11 13 02 56 |  if_ne	mov	arg01, local03
19798     0F 15 02 56 |  if_ne	mov	arg02, local01
1979c     00 17 06 56 |  if_ne	mov	arg03, #256
197a0     84 47 B0 5D |  if_ne	call	#__system__strncpy
197a4     0F 15 02 F6 | 	mov	arg02, local01
197a8     17 15 02 F1 | 	add	arg02, local09
197ac     01 14 06 F1 | 	add	arg02, #1
197b0     0F 13 02 F6 | 	mov	arg01, local01
197b4     D4 F5 BF FD | 	call	#__system____builtin_strcpy
197b8     0F 13 02 F6 | 	mov	arg01, local01
197bc     09 2D 02 F6 | 	mov	local08, arg01
197c0     97 06 48 FB | 	callpa	#(@LR__2214-@LR__2213)>>2,fcache_load_ptr_
197c4                 | LR__2213
197c4     16 FB C9 FA | 	rdbyte	result1, local08 wz
197c8     01 2C 06 51 |  if_ne	add	local08, #1
197cc     F4 FF 9F 5D |  if_ne	jmp	#LR__2213
197d0                 | LR__2214
197d0     09 2D 82 F1 | 	sub	local08, arg01
197d4     16 2F 02 F6 | 	mov	local09, local08
197d8                 | LR__2215
197d8     01 2E 56 F2 | 	cmps	local09, #1 wc
197dc     70 00 90 CD |  if_b	jmp	#LR__2216
197e0     17 25 02 F6 | 	mov	local04, local09
197e4     0F 25 02 F1 | 	add	local04, local01
197e8     12 33 C2 FA | 	rdbyte	local11, local04
197ec     2F 32 0E F2 | 	cmp	local11, #47 wz
197f0     17 33 02 A6 |  if_e	mov	local11, local09
197f4     0F 33 02 A1 |  if_e	add	local11, local01
197f8     19 01 48 AC |  if_e	wrbyte	#0, local11
197fc     01 2E 86 A1 |  if_e	sub	local09, #1
19800     D4 FF 9F AD |  if_e	jmp	#LR__2215
19804     17 25 02 F6 | 	mov	local04, local09
19808     0F 25 02 F1 | 	add	local04, local01
1980c     12 33 C2 FA | 	rdbyte	local11, local04
19810     2E 32 0E F2 | 	cmp	local11, #46 wz
19814     38 00 90 5D |  if_ne	jmp	#LR__2216
19818     02 2E 56 F2 | 	cmps	local09, #2 wc
1981c     30 00 90 CD |  if_b	jmp	#LR__2216
19820     17 39 02 F6 | 	mov	local14, local09
19824     01 38 86 F1 | 	sub	local14, #1
19828     0F 39 02 F1 | 	add	local14, local01
1982c     1C 27 C2 FA | 	rdbyte	local05, local14
19830     2F 26 0E F2 | 	cmp	local05, #47 wz
19834     18 00 90 5D |  if_ne	jmp	#LR__2216
19838     17 25 02 F6 | 	mov	local04, local09
1983c     01 24 86 F1 | 	sub	local04, #1
19840     0F 25 02 F1 | 	add	local04, local01
19844     12 01 48 FC | 	wrbyte	#0, local04
19848     02 2E 86 F1 | 	sub	local09, #2
1984c     88 FF 9F FD | 	jmp	#LR__2215
19850                 | LR__2216
19850     1A FB 01 F6 | 	mov	result1, local12
19854     1C 00 90 FD | 	jmp	#LR__2220
19858                 | LR__2217
19858                 | LR__2218
19858     01 2A 06 F1 | 	add	local07, #1
1985c     2C FE 9F FD | 	jmp	#LR__2207
19860                 | LR__2219
19860     03 00 00 FF 
19864     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
19868     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1986c     03 00 00 FF 
19870     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
19874                 | LR__2220
19874     A7 F0 03 F6 | 	mov	ptra, fp
19878     B2 00 A0 FD | 	call	#popregs_
1987c                 | __system____getvfsforfile_ret
1987c     2D 00 64 FD | 	ret
19880                 | 
19880                 | __system___basic_open
19880     05 4A 05 F6 | 	mov	COUNT_, #5
19884     A8 00 A0 FD | 	call	#pushregs_
19888     0A 1F 02 F6 | 	mov	local01, arg02
1988c     0B 21 02 F6 | 	mov	local02, arg03
19890     0C 23 02 F6 | 	mov	local03, arg04
19894     00 24 06 F6 | 	mov	local04, #0
19898     64 46 B0 FD | 	call	#__system____getftab
1989c     FD 26 0A F6 | 	mov	local05, result1 wz
198a0     18 00 90 5D |  if_ne	jmp	#LR__2230
198a4     EE 12 02 F6 | 	mov	arg01, abortchain
198a8     0C 14 06 F6 | 	mov	arg02, #12
198ac     01 16 06 F6 | 	mov	arg03, #1
198b0     DA 00 A0 FD | 	call	#__longjmp
198b4     01 FA 65 F6 | 	neg	result1, #1
198b8     14 01 90 FD | 	jmp	#LR__2239
198bc                 | LR__2230
198bc     08 26 06 F1 | 	add	local05, #8
198c0     13 FB 09 FB | 	rdlong	result1, local05 wz
198c4     08 26 86 F1 | 	sub	local05, #8
198c8     13 13 02 56 |  if_ne	mov	arg01, local05
198cc     C0 3D B0 5D |  if_ne	call	#__system___closeraw
198d0     00 1E 0E F2 | 	cmp	local01, #0 wz
198d4     00 20 0E A2 |  if_e	cmp	local02, #0 wz
198d8     00 22 0E A2 |  if_e	cmp	local03, #0 wz
198dc     3C 00 90 AD |  if_e	jmp	#LR__2232
198e0     0C 12 06 F6 | 	mov	arg01, #12
198e4     A8 32 B0 FD | 	call	#__system___gc_alloc_managed
198e8     FD 24 0A F6 | 	mov	local04, result1 wz
198ec     18 00 90 5D |  if_ne	jmp	#LR__2231
198f0     EE 12 02 F6 | 	mov	arg01, abortchain
198f4     07 14 06 F6 | 	mov	arg02, #7
198f8     01 16 06 F6 | 	mov	arg03, #1
198fc     DA 00 A0 FD | 	call	#__longjmp
19900     01 FA 65 F6 | 	neg	result1, #1
19904     C8 00 90 FD | 	jmp	#LR__2239
19908                 | LR__2231
19908     12 01 68 FC | 	wrlong	#0, local04
1990c     04 24 06 F1 | 	add	local04, #4
19910     12 01 68 FC | 	wrlong	#0, local04
19914     04 24 86 F1 | 	sub	local04, #4
19918     13 25 62 FC | 	wrlong	local04, local05
1991c                 | LR__2232
1991c     00 1E 0E F2 | 	cmp	local01, #0 wz
19920     20 00 90 AD |  if_e	jmp	#LR__2233
19924     12 1F 62 FC | 	wrlong	local01, local04
19928     12 FB 01 F6 | 	mov	result1, local04
1992c     00 10 03 FF 
19930     00 FA 45 F5 | 	or	result1, ##102760448
19934     1C 26 06 F1 | 	add	local05, #28
19938     13 FB 61 FC | 	wrlong	result1, local05
1993c     1C 26 86 F1 | 	sub	local05, #28
19940     0C 00 90 FD | 	jmp	#LR__2234
19944                 | LR__2233
19944     1C 26 06 F1 | 	add	local05, #28
19948     13 01 68 FC | 	wrlong	#0, local05
1994c     1C 26 86 F1 | 	sub	local05, #28
19950                 | LR__2234
19950     00 20 0E F2 | 	cmp	local02, #0 wz
19954     28 00 90 AD |  if_e	jmp	#LR__2235
19958     04 24 06 F1 | 	add	local04, #4
1995c     12 21 62 FC | 	wrlong	local02, local04
19960     04 24 86 F1 | 	sub	local04, #4
19964     12 FB 01 F6 | 	mov	result1, local04
19968     00 18 03 FF 
1996c     00 FA 45 F5 | 	or	result1, ##103809024
19970     20 26 06 F1 | 	add	local05, #32
19974     13 FB 61 FC | 	wrlong	result1, local05
19978     20 26 86 F1 | 	sub	local05, #32
1997c     0C 00 90 FD | 	jmp	#LR__2236
19980                 | LR__2235
19980     20 26 06 F1 | 	add	local05, #32
19984     13 01 68 FC | 	wrlong	#0, local05
19988     20 26 86 F1 | 	sub	local05, #32
1998c                 | LR__2236
1998c     00 22 0E F2 | 	cmp	local03, #0 wz
19990     24 00 90 AD |  if_e	jmp	#LR__2237
19994     08 24 06 F1 | 	add	local04, #8
19998     12 23 62 FC | 	wrlong	local03, local04
1999c     08 24 86 F1 | 	sub	local04, #8
199a0     00 20 03 FF 
199a4     00 24 46 F5 | 	or	local04, ##104857600
199a8     24 26 06 F1 | 	add	local05, #36
199ac     13 25 62 FC | 	wrlong	local04, local05
199b0     24 26 86 F1 | 	sub	local05, #36
199b4     0C 00 90 FD | 	jmp	#LR__2238
199b8                 | LR__2237
199b8     24 26 06 F1 | 	add	local05, #36
199bc     13 01 68 FC | 	wrlong	#0, local05
199c0     24 26 86 F1 | 	sub	local05, #36
199c4                 | LR__2238
199c4     08 26 06 F1 | 	add	local05, #8
199c8     13 0F 68 FC | 	wrlong	#7, local05
199cc     00 FA 05 F6 | 	mov	result1, #0
199d0                 | LR__2239
199d0     A7 F0 03 F6 | 	mov	ptra, fp
199d4     B2 00 A0 FD | 	call	#popregs_
199d8                 | __system___basic_open_ret
199d8     2D 00 64 FD | 	ret
199dc                 | 
199dc                 | __system___basic_open_string
199dc     04 4A 05 F6 | 	mov	COUNT_, #4
199e0     A8 00 A0 FD | 	call	#pushregs_
199e4     0A 1F 02 F6 | 	mov	local01, arg02
199e8     0B 21 02 F6 | 	mov	local02, arg03
199ec     10 45 B0 FD | 	call	#__system____getftab
199f0     FD 22 0A F6 | 	mov	local03, result1 wz
199f4     18 00 90 5D |  if_ne	jmp	#LR__2240
199f8     EE 12 02 F6 | 	mov	arg01, abortchain
199fc     0C 14 06 F6 | 	mov	arg02, #12
19a00     01 16 06 F6 | 	mov	arg03, #1
19a04     DA 00 A0 FD | 	call	#__longjmp
19a08     01 FA 65 F6 | 	neg	result1, #1
19a0c     58 00 90 FD | 	jmp	#LR__2242
19a10                 | LR__2240
19a10     08 22 06 F1 | 	add	local03, #8
19a14     11 19 0A FB | 	rdlong	arg04, local03 wz
19a18     08 22 86 F1 | 	sub	local03, #8
19a1c     11 13 02 56 |  if_ne	mov	arg01, local03
19a20     6C 3C B0 5D |  if_ne	call	#__system___closeraw
19a24     0F 15 02 F6 | 	mov	arg02, local01
19a28     10 17 02 F6 | 	mov	arg03, local02
19a2c     11 13 02 F6 | 	mov	arg01, local03
19a30     B6 19 06 F6 | 	mov	arg04, #438
19a34     54 39 B0 FD | 	call	#__system___openraw
19a38     FD 24 02 F6 | 	mov	local04, result1
19a3c     00 24 56 F2 | 	cmps	local04, #0 wc
19a40     20 00 90 3D |  if_ae	jmp	#LR__2241
19a44     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19a48     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
19a4c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19a50     EE 12 02 F6 | 	mov	arg01, abortchain
19a54     01 16 06 F6 | 	mov	arg03, #1
19a58     DA 00 A0 FD | 	call	#__longjmp
19a5c     01 FA 65 F6 | 	neg	result1, #1
19a60     04 00 90 FD | 	jmp	#LR__2242
19a64                 | LR__2241
19a64     12 FB 01 F6 | 	mov	result1, local04
19a68                 | LR__2242
19a68     A7 F0 03 F6 | 	mov	ptra, fp
19a6c     B2 00 A0 FD | 	call	#popregs_
19a70                 | __system___basic_open_string_ret
19a70     2D 00 64 FD | 	ret
19a74                 | 
19a74                 | __system___basic_print_char
19a74     03 4A 05 F6 | 	mov	COUNT_, #3
19a78     A8 00 A0 FD | 	call	#pushregs_
19a7c     0A 1F 02 F6 | 	mov	local01, arg02
19a80     D0 4B B0 FD | 	call	#__system___gettxfunc
19a84     FD 20 0A F6 | 	mov	local02, result1 wz
19a88     00 FA 05 A6 |  if_e	mov	result1, #0
19a8c     30 00 90 AD |  if_e	jmp	#LR__2250
19a90     10 23 02 F6 | 	mov	local03, local02
19a94     13 20 46 F7 | 	zerox	local02, #19
19a98     14 22 46 F0 | 	shr	local03, #20
19a9c     02 22 66 F0 | 	shl	local03, #2
19aa0     ED 22 02 F1 | 	add	local03, __methods__
19aa4     11 23 02 FB | 	rdlong	local03, local03
19aa8     0F 13 02 F6 | 	mov	arg01, local01
19aac     F2 1E 02 F6 | 	mov	local01, objptr
19ab0     10 E5 01 F6 | 	mov	objptr, local02
19ab4     2D 22 62 FD | 	call	local03
19ab8     0F E5 01 F6 | 	mov	objptr, local01
19abc     01 FA 05 F6 | 	mov	result1, #1
19ac0                 | LR__2250
19ac0     A7 F0 03 F6 | 	mov	ptra, fp
19ac4     B2 00 A0 FD | 	call	#popregs_
19ac8                 | __system___basic_print_char_ret
19ac8     2D 00 64 FD | 	ret
19acc                 | 
19acc                 | __system___basic_print_string
19acc     03 4A 05 F6 | 	mov	COUNT_, #3
19ad0     A8 00 A0 FD | 	call	#pushregs_
19ad4     0A 1F 02 F6 | 	mov	local01, arg02
19ad8     0B 21 02 F6 | 	mov	local02, arg03
19adc     74 4B B0 FD | 	call	#__system___gettxfunc
19ae0     FD 22 0A F6 | 	mov	local03, result1 wz
19ae4     00 FA 05 A6 |  if_e	mov	result1, #0
19ae8     18 00 90 AD |  if_e	jmp	#LR__2260
19aec     00 1E 0E F2 | 	cmp	local01, #0 wz
19af0     00 FA 05 A6 |  if_e	mov	result1, #0
19af4     11 13 02 56 |  if_ne	mov	arg01, local03
19af8     10 15 02 56 |  if_ne	mov	arg02, local02
19afc     0F 17 02 56 |  if_ne	mov	arg03, local01
19b00     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
19b04                 | LR__2260
19b04     A7 F0 03 F6 | 	mov	ptra, fp
19b08     B2 00 A0 FD | 	call	#popregs_
19b0c                 | __system___basic_print_string_ret
19b0c     2D 00 64 FD | 	ret
19b10                 | 
19b10                 | __system___basic_print_integer
19b10     04 4A 05 F6 | 	mov	COUNT_, #4
19b14     A8 00 A0 FD | 	call	#pushregs_
19b18     0A 1F 02 F6 | 	mov	local01, arg02
19b1c     0B 21 02 F6 | 	mov	local02, arg03
19b20     0C 23 02 F6 | 	mov	local03, arg04
19b24     2C 4B B0 FD | 	call	#__system___gettxfunc
19b28     FD 24 0A F6 | 	mov	local04, result1 wz
19b2c     00 FA 05 A6 |  if_e	mov	result1, #0
19b30     12 13 02 56 |  if_ne	mov	arg01, local04
19b34     10 15 02 56 |  if_ne	mov	arg02, local02
19b38     0F 17 02 56 |  if_ne	mov	arg03, local01
19b3c     11 19 02 56 |  if_ne	mov	arg04, local03
19b40     48 02 B0 5D |  if_ne	call	#__system___fmtnum
19b44     A7 F0 03 F6 | 	mov	ptra, fp
19b48     B2 00 A0 FD | 	call	#popregs_
19b4c                 | __system___basic_print_integer_ret
19b4c     2D 00 64 FD | 	ret
19b50                 | 
19b50                 | __system___basic_print_unsigned
19b50     03 4A 05 F6 | 	mov	COUNT_, #3
19b54     A8 00 A0 FD | 	call	#pushregs_
19b58     0A 1F 02 F6 | 	mov	local01, arg02
19b5c     0B 21 02 F6 | 	mov	local02, arg03
19b60     0C 23 02 F6 | 	mov	local03, arg04
19b64     EC 4A B0 FD | 	call	#__system___gettxfunc
19b68     FD 12 0A F6 | 	mov	arg01, result1 wz
19b6c     00 FA 05 A6 |  if_e	mov	result1, #0
19b70     3A 20 26 54 |  if_ne	bith	local02, #58
19b74     10 15 02 56 |  if_ne	mov	arg02, local02
19b78     0F 17 02 56 |  if_ne	mov	arg03, local01
19b7c     11 19 02 56 |  if_ne	mov	arg04, local03
19b80     08 02 B0 5D |  if_ne	call	#__system___fmtnum
19b84     A7 F0 03 F6 | 	mov	ptra, fp
19b88     B2 00 A0 FD | 	call	#popregs_
19b8c                 | __system___basic_print_unsigned_ret
19b8c     2D 00 64 FD | 	ret
19b90                 | 
19b90                 | __system___basic_get_char
19b90     03 4A 05 F6 | 	mov	COUNT_, #3
19b94     A8 00 A0 FD | 	call	#pushregs_
19b98     FC 4A B0 FD | 	call	#__system___getrxfunc
19b9c     FD 1E 0A F6 | 	mov	local01, result1 wz
19ba0     01 FA 65 A6 |  if_e	neg	result1, #1
19ba4     28 00 90 AD |  if_e	jmp	#LR__2270
19ba8     0F 21 02 F6 | 	mov	local02, local01
19bac     13 1E 46 F7 | 	zerox	local01, #19
19bb0     14 20 46 F0 | 	shr	local02, #20
19bb4     02 20 66 F0 | 	shl	local02, #2
19bb8     ED 20 02 F1 | 	add	local02, __methods__
19bbc     10 21 02 FB | 	rdlong	local02, local02
19bc0     F2 22 02 F6 | 	mov	local03, objptr
19bc4     0F E5 01 F6 | 	mov	objptr, local01
19bc8     2D 20 62 FD | 	call	local02
19bcc     11 E5 01 F6 | 	mov	objptr, local03
19bd0                 | LR__2270
19bd0     A7 F0 03 F6 | 	mov	ptra, fp
19bd4     B2 00 A0 FD | 	call	#popregs_
19bd8                 | __system___basic_get_char_ret
19bd8     2D 00 64 FD | 	ret
19bdc                 | 
19bdc                 | __system___basic_get
19bdc     04 4A 05 F6 | 	mov	COUNT_, #4
19be0     A8 00 A0 FD | 	call	#pushregs_
19be4     0D 1F 02 F6 | 	mov	local01, arg05
19be8     0F 19 02 FD | 	qmul	arg04, local01
19bec     09 21 02 F6 | 	mov	local02, arg01
19bf0     0B 23 02 F6 | 	mov	local03, arg03
19bf4     00 14 0E F2 | 	cmp	arg02, #0 wz
19bf8     01 14 86 51 |  if_ne	sub	arg02, #1
19bfc     10 13 02 56 |  if_ne	mov	arg01, local02
19c00     00 16 06 56 |  if_ne	mov	arg03, #0
19c04     18 24 62 FD | 	getqx	local04
19c08     3C 41 B0 5D |  if_ne	call	#__system__lseek
19c0c     11 15 02 F6 | 	mov	arg02, local03
19c10     12 17 02 F6 | 	mov	arg03, local04
19c14     10 13 02 F6 | 	mov	arg01, local02
19c18     B4 40 B0 FD | 	call	#__system__read
19c1c     FD 24 02 F6 | 	mov	local04, result1
19c20     01 24 56 F2 | 	cmps	local04, #1 wc
19c24     10 00 90 CD |  if_b	jmp	#LR__2280
19c28     12 63 02 F6 | 	mov	muldiva_, local04
19c2c     0F 65 02 F6 | 	mov	muldivb_, local01
19c30     BA 00 A0 FD | 	call	#divide_
19c34     32 25 02 F6 | 	mov	local04, muldivb_
19c38                 | LR__2280
19c38     12 FB 01 F6 | 	mov	result1, local04
19c3c     A7 F0 03 F6 | 	mov	ptra, fp
19c40     B2 00 A0 FD | 	call	#popregs_
19c44                 | __system___basic_get_ret
19c44     2D 00 64 FD | 	ret
19c48                 | 
19c48                 | __system___fmtchar
19c48     00 4A 05 F6 | 	mov	COUNT_, #0
19c4c     A8 00 A0 FD | 	call	#pushregs_
19c50     10 F0 07 F1 | 	add	ptra, #16
19c54     04 4E 05 F1 | 	add	fp, #4
19c58     A7 12 62 FC | 	wrlong	arg01, fp
19c5c     04 4E 05 F1 | 	add	fp, #4
19c60     A7 14 62 FC | 	wrlong	arg02, fp
19c64     04 4E 05 F1 | 	add	fp, #4
19c68     A7 16 62 FC | 	wrlong	arg03, fp
19c6c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
19c70     A7 16 62 FC | 	wrlong	arg03, fp
19c74     08 4E 85 F1 | 	sub	fp, #8
19c78     A7 12 02 FB | 	rdlong	arg01, fp
19c7c     04 4E 05 F1 | 	add	fp, #4
19c80     A7 14 02 FB | 	rdlong	arg02, fp
19c84     04 4E 05 F1 | 	add	fp, #4
19c88     A7 16 02 F6 | 	mov	arg03, fp
19c8c     0C 4E 85 F1 | 	sub	fp, #12
19c90     0C 00 B0 FD | 	call	#__system___fmtstr
19c94     A7 F0 03 F6 | 	mov	ptra, fp
19c98     B2 00 A0 FD | 	call	#popregs_
19c9c                 | __system___fmtchar_ret
19c9c     2D 00 64 FD | 	ret
19ca0                 | 
19ca0                 | __system___fmtstr
19ca0     09 4A 05 F6 | 	mov	COUNT_, #9
19ca4     A8 00 A0 FD | 	call	#pushregs_
19ca8     09 1F 02 F6 | 	mov	local01, arg01
19cac     0A 21 02 F6 | 	mov	local02, arg02
19cb0     0B 23 02 F6 | 	mov	local03, arg03
19cb4     10 19 E2 F8 | 	getbyte	arg04, local02, #0
19cb8     11 13 02 F6 | 	mov	arg01, local03
19cbc     09 25 02 F6 | 	mov	local04, arg01
19cc0     97 06 48 FB | 	callpa	#(@LR__2291-@LR__2290)>>2,fcache_load_ptr_
19cc4                 | LR__2290
19cc4     12 FB C9 FA | 	rdbyte	result1, local04 wz
19cc8     01 24 06 51 |  if_ne	add	local04, #1
19ccc     F4 FF 9F 5D |  if_ne	jmp	#LR__2290
19cd0                 | LR__2291
19cd0     09 25 82 F1 | 	sub	local04, arg01
19cd4     00 18 0E F2 | 	cmp	arg04, #0 wz
19cd8     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
19cdc     10 15 02 F6 | 	mov	arg02, local02
19ce0     12 17 02 F6 | 	mov	arg03, local04
19ce4     0F 13 02 F6 | 	mov	arg01, local01
19ce8     02 18 06 F6 | 	mov	arg04, #2
19cec     04 46 B0 FD | 	call	#__system___fmtpad
19cf0     FD 26 02 F6 | 	mov	local05, result1
19cf4     00 26 56 F2 | 	cmps	local05, #0 wc
19cf8     13 FB 01 C6 |  if_b	mov	result1, local05
19cfc     80 00 90 CD |  if_b	jmp	#LR__2294
19d00     01 24 56 F2 | 	cmps	local04, #1 wc
19d04     50 00 90 CD |  if_b	jmp	#LR__2293
19d08     12 29 02 F6 | 	mov	local06, local04
19d0c                 | LR__2292
19d0c     0F 2B 02 F6 | 	mov	local07, local01
19d10     0F 2D 02 F6 | 	mov	local08, local01
19d14     13 2A 46 F7 | 	zerox	local07, #19
19d18     14 2C 46 F0 | 	shr	local08, #20
19d1c     02 2C 66 F0 | 	shl	local08, #2
19d20     ED 2C 02 F1 | 	add	local08, __methods__
19d24     16 2D 02 FB | 	rdlong	local08, local08
19d28     11 13 C2 FA | 	rdbyte	arg01, local03
19d2c     F2 2E 02 F6 | 	mov	local09, objptr
19d30     15 E5 01 F6 | 	mov	objptr, local07
19d34     01 22 06 F1 | 	add	local03, #1
19d38     2D 2C 62 FD | 	call	local08
19d3c     17 E5 01 F6 | 	mov	objptr, local09
19d40     FD 2E 02 F6 | 	mov	local09, result1
19d44     00 2E 56 F2 | 	cmps	local09, #0 wc
19d48     17 FB 01 C6 |  if_b	mov	result1, local09
19d4c     30 00 90 CD |  if_b	jmp	#LR__2294
19d50     17 27 02 F1 | 	add	local05, local09
19d54     ED 29 6E FB | 	djnz	local06, #LR__2292
19d58                 | LR__2293
19d58     10 15 02 F6 | 	mov	arg02, local02
19d5c     12 17 02 F6 | 	mov	arg03, local04
19d60     0F 13 02 F6 | 	mov	arg01, local01
19d64     01 18 06 F6 | 	mov	arg04, #1
19d68     88 45 B0 FD | 	call	#__system___fmtpad
19d6c     FD 2E 02 F6 | 	mov	local09, result1
19d70     00 2E 56 F2 | 	cmps	local09, #0 wc
19d74     17 FB 01 C6 |  if_b	mov	result1, local09
19d78     17 27 02 31 |  if_ae	add	local05, local09
19d7c     13 FB 01 36 |  if_ae	mov	result1, local05
19d80                 | LR__2294
19d80     A7 F0 03 F6 | 	mov	ptra, fp
19d84     B2 00 A0 FD | 	call	#popregs_
19d88                 | __system___fmtstr_ret
19d88     2D 00 64 FD | 	ret
19d8c                 | 
19d8c                 | __system___fmtnum
19d8c     0B 4A 05 F6 | 	mov	COUNT_, #11
19d90     A8 00 A0 FD | 	call	#pushregs_
19d94     09 1F 02 F6 | 	mov	local01, arg01
19d98     0A 21 02 F6 | 	mov	local02, arg02
19d9c     0B 23 02 F6 | 	mov	local03, arg03
19da0     0C 25 02 F6 | 	mov	local04, arg04
19da4     F8 27 02 F6 | 	mov	local05, ptra
19da8     13 29 02 F6 | 	mov	local06, local05
19dac     00 2A 06 F6 | 	mov	local07, #0
19db0     10 2D 02 F6 | 	mov	local08, local02
19db4     10 2C 46 F0 | 	shr	local08, #16
19db8     3F 2C 06 F5 | 	and	local08, #63
19dbc     10 2F E2 F8 | 	getbyte	local09, local02, #0
19dc0     10 31 02 F6 | 	mov	local10, local02
19dc4     1A 30 46 F0 | 	shr	local10, #26
19dc8     03 30 06 F5 | 	and	local10, #3
19dcc     18 33 02 F6 | 	mov	local11, local10
19dd0     01 2C 56 F2 | 	cmps	local08, #1 wc
19dd4     44 F0 07 F1 | 	add	ptra, #68
19dd8     01 2C 86 31 |  if_ae	sub	local08, #1
19ddc     41 2E 56 F2 | 	cmps	local09, #65 wc
19de0     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
19de4     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
19de8     03 32 0E F2 | 	cmp	local11, #3 wz
19dec     00 32 06 A6 |  if_e	mov	local11, #0
19df0     00 22 56 52 |  if_ne	cmps	local03, #0 wc
19df4     04 32 06 46 |  if_c_and_nz	mov	local11, #4
19df8     11 23 62 46 |  if_c_and_nz	neg	local03, local03
19dfc     00 32 0E F2 | 	cmp	local11, #0 wz
19e00     4C 00 90 AD |  if_e	jmp	#LR__2303
19e04     01 2A 06 F6 | 	mov	local07, #1
19e08     17 2D 0A F2 | 	cmp	local08, local09 wz
19e0c     18 00 90 5D |  if_ne	jmp	#LR__2301
19e10     05 2C 6E FB | 	djnz	local08, #LR__2300
19e14     0F 13 02 F6 | 	mov	arg01, local01
19e18     10 15 02 F6 | 	mov	arg02, local02
19e1c     23 16 06 F6 | 	mov	arg03, #35
19e20     24 FE BF FD | 	call	#__system___fmtchar
19e24     88 00 90 FD | 	jmp	#LR__2307
19e28                 | LR__2300
19e28                 | LR__2301
19e28     02 32 0E F2 | 	cmp	local11, #2 wz
19e2c     14 31 02 A6 |  if_e	mov	local10, local06
19e30     01 28 06 A1 |  if_e	add	local06, #1
19e34     18 41 48 AC |  if_e	wrbyte	#32, local10
19e38     14 00 90 AD |  if_e	jmp	#LR__2302
19e3c     04 32 0E F2 | 	cmp	local11, #4 wz
19e40     14 5B 48 AC |  if_e	wrbyte	#45, local06
19e44     01 28 06 A1 |  if_e	add	local06, #1
19e48     14 57 48 5C |  if_ne	wrbyte	#43, local06
19e4c     01 28 06 51 |  if_ne	add	local06, #1
19e50                 | LR__2302
19e50                 | LR__2303
19e50     14 13 02 F6 | 	mov	arg01, local06
19e54     11 15 02 F6 | 	mov	arg02, local03
19e58     12 17 02 F6 | 	mov	arg03, local04
19e5c     16 19 02 F6 | 	mov	arg04, local08
19e60     00 1A 06 F6 | 	mov	arg05, #0
19e64     1D 20 2E F4 | 	testbn	local02, #29 wz
19e68     01 1A 06 56 |  if_ne	mov	arg05, #1
19e6c     4C 45 B0 FD | 	call	#__system___uitoa
19e70     FD 2A 02 F1 | 	add	local07, result1
19e74     17 2B 5A F2 | 	cmps	local07, local09 wcz
19e78     24 00 90 ED |  if_be	jmp	#LR__2306
19e7c     97 0E 48 FB | 	callpa	#(@LR__2305-@LR__2304)>>2,fcache_load_ptr_
19e80                 | LR__2304
19e80     17 31 02 F6 | 	mov	local10, local09
19e84     01 30 56 F2 | 	cmps	local10, #1 wc
19e88     01 2E 86 F1 | 	sub	local09, #1
19e8c     14 31 02 36 |  if_ae	mov	local10, local06
19e90     01 28 06 31 |  if_ae	add	local06, #1
19e94     18 47 48 3C |  if_ae	wrbyte	#35, local10
19e98     E4 FF 9F 3D |  if_ae	jmp	#LR__2304
19e9c                 | LR__2305
19e9c     14 01 48 FC | 	wrbyte	#0, local06
19ea0                 | LR__2306
19ea0     0F 13 02 F6 | 	mov	arg01, local01
19ea4     10 15 02 F6 | 	mov	arg02, local02
19ea8     13 17 02 F6 | 	mov	arg03, local05
19eac     F0 FD BF FD | 	call	#__system___fmtstr
19eb0                 | LR__2307
19eb0     A7 F0 03 F6 | 	mov	ptra, fp
19eb4     B2 00 A0 FD | 	call	#popregs_
19eb8                 | __system___fmtnum_ret
19eb8     2D 00 64 FD | 	ret
19ebc                 | 
19ebc                 | __system___fmtfloat
19ebc     10 4A 05 F6 | 	mov	COUNT_, #16
19ec0     A8 00 A0 FD | 	call	#pushregs_
19ec4     24 F1 07 F1 | 	add	ptra, #292
19ec8     04 4E 05 F1 | 	add	fp, #4
19ecc     A7 12 62 FC | 	wrlong	arg01, fp
19ed0     04 4E 05 F1 | 	add	fp, #4
19ed4     A7 14 62 FC | 	wrlong	arg02, fp
19ed8     04 4E 05 F1 | 	add	fp, #4
19edc     A7 16 62 FC | 	wrlong	arg03, fp
19ee0     04 4E 05 F1 | 	add	fp, #4
19ee4     A7 18 62 FC | 	wrlong	arg04, fp
19ee8     0C 4E 05 F1 | 	add	fp, #12
19eec     A7 14 68 FC | 	wrlong	#10, fp
19ef0     08 4E 05 F1 | 	add	fp, #8
19ef4     A7 00 68 FC | 	wrlong	#0, fp
19ef8     08 4E 05 F1 | 	add	fp, #8
19efc     A7 00 68 FC | 	wrlong	#0, fp
19f00     08 4E 05 F1 | 	add	fp, #8
19f04     A7 00 68 FC | 	wrlong	#0, fp
19f08     04 4E 05 F1 | 	add	fp, #4
19f0c     A7 04 68 FC | 	wrlong	#2, fp
19f10     04 4E 05 F1 | 	add	fp, #4
19f14     A7 00 68 FC | 	wrlong	#0, fp
19f18     04 4E 05 F1 | 	add	fp, #4
19f1c     A7 00 68 FC | 	wrlong	#0, fp
19f20     04 4E 05 F1 | 	add	fp, #4
19f24     A7 00 68 FC | 	wrlong	#0, fp
19f28     04 4E 05 F1 | 	add	fp, #4
19f2c     A7 00 68 FC | 	wrlong	#0, fp
19f30     18 4E 05 F1 | 	add	fp, #24
19f34     A7 00 68 FC | 	wrlong	#0, fp
19f38     68 4E 05 F1 | 	add	fp, #104
19f3c     A7 1E 02 F6 | 	mov	local01, fp
19f40     08 4E 85 F1 | 	sub	fp, #8
19f44     A7 1E 62 FC | 	wrlong	local01, fp
19f48     04 4E 05 F1 | 	add	fp, #4
19f4c     A7 1E 62 FC | 	wrlong	local01, fp
19f50     BC 4E 85 F1 | 	sub	fp, #188
19f54     A7 1E 02 FB | 	rdlong	local01, fp
19f58     10 1E 46 F0 | 	shr	local01, #16
19f5c     3F 1E 06 F5 | 	and	local01, #63
19f60     B0 4E 05 F1 | 	add	fp, #176
19f64     A7 1E 62 FC | 	wrlong	local01, fp
19f68     B0 4E 85 F1 | 	sub	fp, #176
19f6c     A7 1E 02 FB | 	rdlong	local01, fp
19f70     1C 1E 46 F0 | 	shr	local01, #28
19f74     01 1E 06 F5 | 	and	local01, #1
19f78     08 4F 05 F1 | 	add	fp, #264
19f7c     A7 1E 62 FC | 	wrlong	local01, fp
19f80     58 4E 85 F1 | 	sub	fp, #88
19f84     A7 1E 0A FB | 	rdlong	local01, fp wz
19f88     B8 4E 85 F1 | 	sub	fp, #184
19f8c     3C 00 90 5D |  if_ne	jmp	#LR__2311
19f90     10 4E 05 F1 | 	add	fp, #16
19f94     A7 1E 02 FB | 	rdlong	local01, fp
19f98     10 4E 85 F1 | 	sub	fp, #16
19f9c     61 1E 0E F2 | 	cmp	local01, #97 wz
19fa0     18 00 90 5D |  if_ne	jmp	#LR__2310
19fa4     B8 4E 05 F1 | 	add	fp, #184
19fa8     A7 1A 68 FC | 	wrlong	#13, fp
19fac     84 4E 85 F1 | 	sub	fp, #132
19fb0     A7 02 68 FC | 	wrlong	#1, fp
19fb4     34 4E 85 F1 | 	sub	fp, #52
19fb8     24 00 90 FD | 	jmp	#LR__2312
19fbc                 | LR__2310
19fbc     B8 4E 05 F1 | 	add	fp, #184
19fc0     A7 0C 68 FC | 	wrlong	#6, fp
19fc4     B8 4E 85 F1 | 	sub	fp, #184
19fc8     14 00 90 FD | 	jmp	#LR__2312
19fcc                 | LR__2311
19fcc     B8 4E 05 F1 | 	add	fp, #184
19fd0     A7 1E 02 FB | 	rdlong	local01, fp
19fd4     01 1E 86 F1 | 	sub	local01, #1
19fd8     A7 1E 62 FC | 	wrlong	local01, fp
19fdc     B8 4E 85 F1 | 	sub	fp, #184
19fe0                 | LR__2312
19fe0     08 4E 05 F1 | 	add	fp, #8
19fe4     A7 1E 02 FB | 	rdlong	local01, fp
19fe8     16 1E 46 F0 | 	shr	local01, #22
19fec     03 1E 06 F5 | 	and	local01, #3
19ff0     04 4F 05 F1 | 	add	fp, #260
19ff4     A7 1E 62 FC | 	wrlong	local01, fp
19ff8     04 4F 85 F1 | 	sub	fp, #260
19ffc     A7 1E 02 FB | 	rdlong	local01, fp
1a000     1D 1E 46 F0 | 	shr	local01, #29
1a004     01 1E 06 F5 | 	and	local01, #1
1a008     B4 4E 05 F1 | 	add	fp, #180
1a00c     A7 1E 62 FC | 	wrlong	local01, fp
1a010     B4 4E 85 F1 | 	sub	fp, #180
1a014     A7 1E 02 FB | 	rdlong	local01, fp
1a018     0F 1F EA F8 | 	getbyte	local01, local01, #1
1a01c     60 4E 05 F1 | 	add	fp, #96
1a020     A7 1E 62 FC | 	wrlong	local01, fp
1a024     60 4E 85 F1 | 	sub	fp, #96
1a028     A7 1E 02 FB | 	rdlong	local01, fp
1a02c     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1a030     64 4E 05 F1 | 	add	fp, #100
1a034     A7 1E 62 FC | 	wrlong	local01, fp
1a038     00 1E 06 F6 | 	mov	local01, #0
1a03c     5C 4E 85 F1 | 	sub	fp, #92
1a040     A7 1A 02 FB | 	rdlong	arg05, fp
1a044     65 1A 0E F2 | 	cmp	arg05, #101 wz
1a048     01 1E 06 A6 |  if_e	mov	local01, #1
1a04c     14 4E 05 F1 | 	add	fp, #20
1a050     A7 1E 62 FC | 	wrlong	local01, fp
1a054     98 4E 05 F1 | 	add	fp, #152
1a058     A7 20 0A FB | 	rdlong	local02, fp wz
1a05c     45 1E 06 56 |  if_ne	mov	local01, #69
1a060     65 1E 06 A6 |  if_e	mov	local01, #101
1a064     8C 4E 85 F1 | 	sub	fp, #140
1a068     A7 1E 62 FC | 	wrlong	local01, fp
1a06c     20 4E 85 F1 | 	sub	fp, #32
1a070     A7 1E 02 FB | 	rdlong	local01, fp
1a074     10 4E 85 F1 | 	sub	fp, #16
1a078     61 1E 0E F2 | 	cmp	local01, #97 wz
1a07c     4C 00 90 5D |  if_ne	jmp	#LR__2313
1a080     24 4E 05 F1 | 	add	fp, #36
1a084     A7 02 68 FC | 	wrlong	#1, fp
1a088     98 4E 05 F1 | 	add	fp, #152
1a08c     A7 20 0A FB | 	rdlong	local02, fp wz
1a090     50 1E 06 56 |  if_ne	mov	local01, #80
1a094     70 1E 06 A6 |  if_e	mov	local01, #112
1a098     8C 4E 85 F1 | 	sub	fp, #140
1a09c     A7 1E 62 FC | 	wrlong	local01, fp
1a0a0     14 4E 85 F1 | 	sub	fp, #20
1a0a4     A7 04 68 FC | 	wrlong	#2, fp
1a0a8     1C 4E 05 F1 | 	add	fp, #28
1a0ac     A7 02 68 FC | 	wrlong	#1, fp
1a0b0     84 4E 05 F1 | 	add	fp, #132
1a0b4     A7 20 0A FB | 	rdlong	local02, fp wz
1a0b8     58 1E 06 56 |  if_ne	mov	local01, #88
1a0bc     78 1E 06 A6 |  if_e	mov	local01, #120
1a0c0     7C 4E 85 F1 | 	sub	fp, #124
1a0c4     A7 1E 62 FC | 	wrlong	local01, fp
1a0c8     40 4E 85 F1 | 	sub	fp, #64
1a0cc                 | LR__2313
1a0cc     10 4E 05 F1 | 	add	fp, #16
1a0d0     A7 1E 02 FB | 	rdlong	local01, fp
1a0d4     10 4E 85 F1 | 	sub	fp, #16
1a0d8     23 1E 0E F2 | 	cmp	local01, #35 wz
1a0dc     3C 00 90 5D |  if_ne	jmp	#LR__2316
1a0e0     48 4E 05 F1 | 	add	fp, #72
1a0e4     A7 02 68 FC | 	wrlong	#1, fp
1a0e8     C8 4E 05 F1 | 	add	fp, #200
1a0ec     A7 1E 0A FB | 	rdlong	local01, fp wz
1a0f0     10 4F 85 F1 | 	sub	fp, #272
1a0f4     18 00 90 AD |  if_e	jmp	#LR__2314
1a0f8     10 4E 05 F1 | 	add	fp, #16
1a0fc     A7 CC 68 FC | 	wrlong	#102, fp
1a100     00 4F 05 F1 | 	add	fp, #256
1a104     A7 00 68 FC | 	wrlong	#0, fp
1a108     10 4F 85 F1 | 	sub	fp, #272
1a10c     0C 00 90 FD | 	jmp	#LR__2315
1a110                 | LR__2314
1a110     10 4F 05 F1 | 	add	fp, #272
1a114     A7 02 68 FC | 	wrlong	#1, fp
1a118     10 4F 85 F1 | 	sub	fp, #272
1a11c                 | LR__2315
1a11c                 | LR__2316
1a11c     08 4E 05 F1 | 	add	fp, #8
1a120     A7 1E 02 FB | 	rdlong	local01, fp
1a124     1A 1E 46 F0 | 	shr	local01, #26
1a128     03 1E 06 F5 | 	and	local01, #3
1a12c     5C 4E 05 F1 | 	add	fp, #92
1a130     A7 1E 62 FC | 	wrlong	local01, fp
1a134     58 4E 85 F1 | 	sub	fp, #88
1a138     A7 FA 01 FB | 	rdlong	result1, fp
1a13c     0C 4E 85 F1 | 	sub	fp, #12
1a140     1F FA 4D F0 | 	shr	result1, #31 wz
1a144     20 00 90 AD |  if_e	jmp	#LR__2317
1a148     2C 4E 05 F1 | 	add	fp, #44
1a14c     A7 5A 68 FC | 	wrlong	#45, fp
1a150     20 4E 85 F1 | 	sub	fp, #32
1a154     A7 FA 01 FB | 	rdlong	result1, fp
1a158     1F FA E5 F4 | 	bitnot	result1, #31
1a15c     A7 FA 61 FC | 	wrlong	result1, fp
1a160     0C 4E 85 F1 | 	sub	fp, #12
1a164     3C 00 90 FD | 	jmp	#LR__2319
1a168                 | LR__2317
1a168     64 4E 05 F1 | 	add	fp, #100
1a16c     A7 1E 02 FB | 	rdlong	local01, fp
1a170     64 4E 85 F1 | 	sub	fp, #100
1a174     01 1E 0E F2 | 	cmp	local01, #1 wz
1a178     2C 4E 05 A1 |  if_e	add	fp, #44
1a17c     A7 56 68 AC |  if_e	wrlong	#43, fp
1a180     2C 4E 85 A1 |  if_e	sub	fp, #44
1a184     1C 00 90 AD |  if_e	jmp	#LR__2318
1a188     64 4E 05 F1 | 	add	fp, #100
1a18c     A7 1E 02 FB | 	rdlong	local01, fp
1a190     64 4E 85 F1 | 	sub	fp, #100
1a194     02 1E 0E F2 | 	cmp	local01, #2 wz
1a198     2C 4E 05 A1 |  if_e	add	fp, #44
1a19c     A7 40 68 AC |  if_e	wrlong	#32, fp
1a1a0     2C 4E 85 A1 |  if_e	sub	fp, #44
1a1a4                 | LR__2318
1a1a4                 | LR__2319
1a1a4     08 4E 05 F1 | 	add	fp, #8
1a1a8     A7 1E 02 FB | 	rdlong	local01, fp
1a1ac     18 1E 46 F0 | 	shr	local01, #24
1a1b0     03 1E 06 F5 | 	and	local01, #3
1a1b4     3C 4E 05 F1 | 	add	fp, #60
1a1b8     A7 1E 62 FC | 	wrlong	local01, fp
1a1bc     00 1E 06 F6 | 	mov	local01, #0
1a1c0     18 4E 85 F1 | 	sub	fp, #24
1a1c4     A7 22 0A FB | 	rdlong	local03, fp wz
1a1c8     2C 4E 85 F1 | 	sub	fp, #44
1a1cc     18 00 90 5D |  if_ne	jmp	#LR__2320
1a1d0     1C 4E 05 F1 | 	add	fp, #28
1a1d4     A7 24 02 FB | 	rdlong	local04, fp
1a1d8     1C 4E 85 F1 | 	sub	fp, #28
1a1dc     12 27 02 F6 | 	mov	local05, local04
1a1e0     0A 26 0E F2 | 	cmp	local05, #10 wz
1a1e4     04 00 90 AD |  if_e	jmp	#LR__2321
1a1e8                 | LR__2320
1a1e8     01 1E 66 F5 | 	xor	local01, #1
1a1ec                 | LR__2321
1a1ec     3C 4E 05 F1 | 	add	fp, #60
1a1f0     A7 1E 62 FC | 	wrlong	local01, fp
1a1f4     3C 4E 85 F1 | 	sub	fp, #60
1a1f8     00 1E 0E F2 | 	cmp	local01, #0 wz
1a1fc     0C 01 90 AD |  if_e	jmp	#LR__2323
1a200     44 4E 05 F1 | 	add	fp, #68
1a204     A7 26 02 FB | 	rdlong	local05, fp
1a208     44 4E 85 F1 | 	sub	fp, #68
1a20c     13 23 02 F6 | 	mov	local03, local05
1a210     02 22 0E F2 | 	cmp	local03, #2 wz
1a214     F4 00 90 5D |  if_ne	jmp	#LR__2323
1a218     0C 4F 05 F1 | 	add	fp, #268
1a21c     A7 28 02 FB | 	rdlong	local06, fp
1a220     0C 4F 85 F1 | 	sub	fp, #268
1a224     14 25 02 F6 | 	mov	local04, local06
1a228     02 24 0E F2 | 	cmp	local04, #2 wz
1a22c     DC 00 90 AD |  if_e	jmp	#LR__2323
1a230     C0 4E 05 F1 | 	add	fp, #192
1a234     A7 12 02 FB | 	rdlong	arg01, fp
1a238     94 4E 85 F1 | 	sub	fp, #148
1a23c     A7 14 02 FB | 	rdlong	arg02, fp
1a240     14 4E 05 F1 | 	add	fp, #20
1a244     A7 16 02 FB | 	rdlong	arg03, fp
1a248     40 4E 85 F1 | 	sub	fp, #64
1a24c     D4 43 B0 FD | 	call	#__system__emitsign_0383
1a250     14 4F 05 F1 | 	add	fp, #276
1a254     A7 FA 61 FC | 	wrlong	result1, fp
1a258     14 4F 85 F1 | 	sub	fp, #276
1a25c     00 FA 55 F2 | 	cmps	result1, #0 wc
1a260     14 4F 05 C1 |  if_b	add	fp, #276
1a264     A7 FA 01 CB |  if_b	rdlong	result1, fp
1a268     14 4F 85 C1 |  if_b	sub	fp, #276
1a26c     6C 0B 90 CD |  if_b	jmp	#LR__2373
1a270     C0 4E 05 F1 | 	add	fp, #192
1a274     A7 1E 02 FB | 	rdlong	local01, fp
1a278     54 4E 05 F1 | 	add	fp, #84
1a27c     A7 26 02 FB | 	rdlong	local05, fp
1a280     13 23 02 F6 | 	mov	local03, local05
1a284     13 1F 02 F1 | 	add	local01, local05
1a288     54 4E 85 F1 | 	sub	fp, #84
1a28c     A7 1E 62 FC | 	wrlong	local01, fp
1a290     58 4E 85 F1 | 	sub	fp, #88
1a294     A7 1E 0A FB | 	rdlong	local01, fp wz
1a298     68 4E 85 F1 | 	sub	fp, #104
1a29c     60 00 90 AD |  if_e	jmp	#LR__2322
1a2a0     68 4E 05 F1 | 	add	fp, #104
1a2a4     A7 1E 02 FB | 	rdlong	local01, fp
1a2a8     AC 4E 05 F1 | 	add	fp, #172
1a2ac     A7 22 02 FB | 	rdlong	local03, fp
1a2b0     11 1F 82 F1 | 	sub	local01, local03
1a2b4     AC 4E 85 F1 | 	sub	fp, #172
1a2b8     A7 1E 62 FC | 	wrlong	local01, fp
1a2bc     68 4E 85 F1 | 	sub	fp, #104
1a2c0     00 1E 56 F2 | 	cmps	local01, #0 wc
1a2c4     68 4E 05 C1 |  if_b	add	fp, #104
1a2c8     A7 00 68 CC |  if_b	wrlong	#0, fp
1a2cc     68 4E 85 C1 |  if_b	sub	fp, #104
1a2d0     08 4E 05 F1 | 	add	fp, #8
1a2d4     A7 1E 02 FB | 	rdlong	local01, fp
1a2d8     E8 1E 06 F4 | 	bitl	local01, #232
1a2dc     A7 1E 62 FC | 	wrlong	local01, fp
1a2e0     60 4E 05 F1 | 	add	fp, #96
1a2e4     A7 26 02 FB | 	rdlong	local05, fp
1a2e8     13 23 02 F6 | 	mov	local03, local05
1a2ec     08 22 66 F0 | 	shl	local03, #8
1a2f0     11 1F 42 F5 | 	or	local01, local03
1a2f4     60 4E 85 F1 | 	sub	fp, #96
1a2f8     A7 1E 62 FC | 	wrlong	local01, fp
1a2fc     08 4E 85 F1 | 	sub	fp, #8
1a300                 | LR__2322
1a300     3C 4E 05 F1 | 	add	fp, #60
1a304     A7 00 68 FC | 	wrlong	#0, fp
1a308     3C 4E 85 F1 | 	sub	fp, #60
1a30c                 | LR__2323
1a30c     0C 4E 05 F1 | 	add	fp, #12
1a310     A7 12 02 FB | 	rdlong	arg01, fp
1a314     0C 4E 85 F1 | 	sub	fp, #12
1a318     A8 1E B0 FD | 	call	#__system____builtin_ilogb
1a31c     FF FF 3F FF 
1a320     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1a324     50 00 90 5D |  if_ne	jmp	#LR__2325
1a328     2C 4E 05 F1 | 	add	fp, #44
1a32c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a330     2C 4E 85 F1 | 	sub	fp, #44
1a334     24 00 90 AD |  if_e	jmp	#LR__2324
1a338     C0 4E 05 F1 | 	add	fp, #192
1a33c     A7 20 02 FB | 	rdlong	local02, fp
1a340     10 23 02 F6 | 	mov	local03, local02
1a344     01 22 06 F1 | 	add	local03, #1
1a348     A7 22 62 FC | 	wrlong	local03, fp
1a34c     94 4E 85 F1 | 	sub	fp, #148
1a350     A7 24 02 FB | 	rdlong	local04, fp
1a354     2C 4E 85 F1 | 	sub	fp, #44
1a358     10 25 42 FC | 	wrbyte	local04, local02
1a35c                 | LR__2324
1a35c     C0 4E 05 F1 | 	add	fp, #192
1a360     A7 12 02 FB | 	rdlong	arg01, fp
1a364     C0 4E 85 F1 | 	sub	fp, #192
1a368     41 01 00 FF 
1a36c     E6 14 06 F6 | 	mov	arg02, ##@LR__4251
1a370     18 EA BF FD | 	call	#__system____builtin_strcpy
1a374     A4 08 90 FD | 	jmp	#LR__2361
1a378                 | LR__2325
1a378     0C 4E 05 F1 | 	add	fp, #12
1a37c     A7 20 02 FB | 	rdlong	local02, fp
1a380     0C 4E 85 F1 | 	sub	fp, #12
1a384     10 13 02 F6 | 	mov	arg01, local02
1a388     38 1E B0 FD | 	call	#__system____builtin_ilogb
1a38c     00 00 40 FF 
1a390     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
1a394     50 00 90 5D |  if_ne	jmp	#LR__2327
1a398     2C 4E 05 F1 | 	add	fp, #44
1a39c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a3a0     2C 4E 85 F1 | 	sub	fp, #44
1a3a4     24 00 90 AD |  if_e	jmp	#LR__2326
1a3a8     C0 4E 05 F1 | 	add	fp, #192
1a3ac     A7 20 02 FB | 	rdlong	local02, fp
1a3b0     10 23 02 F6 | 	mov	local03, local02
1a3b4     01 22 06 F1 | 	add	local03, #1
1a3b8     A7 22 62 FC | 	wrlong	local03, fp
1a3bc     94 4E 85 F1 | 	sub	fp, #148
1a3c0     A7 24 02 FB | 	rdlong	local04, fp
1a3c4     2C 4E 85 F1 | 	sub	fp, #44
1a3c8     10 25 42 FC | 	wrbyte	local04, local02
1a3cc                 | LR__2326
1a3cc     C0 4E 05 F1 | 	add	fp, #192
1a3d0     A7 12 02 FB | 	rdlong	arg01, fp
1a3d4     C0 4E 85 F1 | 	sub	fp, #192
1a3d8     41 01 00 FF 
1a3dc     EA 14 06 F6 | 	mov	arg02, ##@LR__4252
1a3e0     A8 E9 BF FD | 	call	#__system____builtin_strcpy
1a3e4     34 08 90 FD | 	jmp	#LR__2361
1a3e8                 | LR__2327
1a3e8     10 4E 05 F1 | 	add	fp, #16
1a3ec     A7 1E 02 FB | 	rdlong	local01, fp
1a3f0     10 4E 85 F1 | 	sub	fp, #16
1a3f4     67 1E 0E F2 | 	cmp	local01, #103 wz
1a3f8     10 4E 05 51 |  if_ne	add	fp, #16
1a3fc     A7 22 02 5B |  if_ne	rdlong	local03, fp
1a400     10 4E 85 51 |  if_ne	sub	fp, #16
1a404     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
1a408     94 01 90 5D |  if_ne	jmp	#LR__2332
1a40c     0C 4E 05 F1 | 	add	fp, #12
1a410     A7 12 02 FB | 	rdlong	arg01, fp
1a414     08 4E 05 F1 | 	add	fp, #8
1a418     A7 14 02 F6 | 	mov	arg02, fp
1a41c     0C 4E 05 F1 | 	add	fp, #12
1a420     A7 16 02 F6 | 	mov	arg03, fp
1a424     98 4E 05 F1 | 	add	fp, #152
1a428     A7 18 02 FB | 	rdlong	arg04, fp
1a42c     9C 4E 85 F1 | 	sub	fp, #156
1a430     A7 1A 02 FB | 	rdlong	arg05, fp
1a434     1C 4E 85 F1 | 	sub	fp, #28
1a438     F4 3F B0 FD | 	call	#__system__disassemble_0381
1a43c     10 4E 05 F1 | 	add	fp, #16
1a440     A7 1E 02 FB | 	rdlong	local01, fp
1a444     10 4E 85 F1 | 	sub	fp, #16
1a448     23 1E 0E F2 | 	cmp	local01, #35 wz
1a44c     A0 00 90 5D |  if_ne	jmp	#LR__2329
1a450     20 4E 05 F1 | 	add	fp, #32
1a454     A7 1E 02 FB | 	rdlong	local01, fp
1a458     98 4E 05 F1 | 	add	fp, #152
1a45c     A7 22 02 FB | 	rdlong	local03, fp
1a460     B8 4E 85 F1 | 	sub	fp, #184
1a464     11 1F 5A F2 | 	cmps	local01, local03 wcz
1a468     24 4E 05 11 |  if_a	add	fp, #36
1a46c     A7 02 68 1C |  if_a	wrlong	#1, fp
1a470     24 4E 85 11 |  if_a	sub	fp, #36
1a474     A4 01 90 1D |  if_a	jmp	#LR__2335
1a478     20 4E 05 F1 | 	add	fp, #32
1a47c     A7 1E 02 FB | 	rdlong	local01, fp
1a480     20 4E 85 F1 | 	sub	fp, #32
1a484     00 1E 56 F2 | 	cmps	local01, #0 wc
1a488     2C 00 90 3D |  if_ae	jmp	#LR__2328
1a48c     B8 4E 05 F1 | 	add	fp, #184
1a490     A7 1E 02 FB | 	rdlong	local01, fp
1a494     0F 1F 62 F6 | 	neg	local01, local01
1a498     98 4E 85 F1 | 	sub	fp, #152
1a49c     A7 22 02 FB | 	rdlong	local03, fp
1a4a0     20 4E 85 F1 | 	sub	fp, #32
1a4a4     0F 23 5A F2 | 	cmps	local03, local01 wcz
1a4a8     24 4E 05 E1 |  if_be	add	fp, #36
1a4ac     A7 02 68 EC |  if_be	wrlong	#1, fp
1a4b0     24 4E 85 E1 |  if_be	sub	fp, #36
1a4b4     64 01 90 FD | 	jmp	#LR__2335
1a4b8                 | LR__2328
1a4b8     20 4E 05 F1 | 	add	fp, #32
1a4bc     A7 1E 02 FB | 	rdlong	local01, fp
1a4c0     20 4E 85 F1 | 	sub	fp, #32
1a4c4     01 1E 56 F2 | 	cmps	local01, #1 wc
1a4c8     50 01 90 CD |  if_b	jmp	#LR__2335
1a4cc     B8 4E 05 F1 | 	add	fp, #184
1a4d0     A7 1E 02 FB | 	rdlong	local01, fp
1a4d4     98 4E 85 F1 | 	sub	fp, #152
1a4d8     A7 22 02 FB | 	rdlong	local03, fp
1a4dc     11 1F 82 F1 | 	sub	local01, local03
1a4e0     98 4E 05 F1 | 	add	fp, #152
1a4e4     A7 1E 62 FC | 	wrlong	local01, fp
1a4e8     B8 4E 85 F1 | 	sub	fp, #184
1a4ec     2C 01 90 FD | 	jmp	#LR__2335
1a4f0                 | LR__2329
1a4f0     00 1E 06 F6 | 	mov	local01, #0
1a4f4     08 4E 05 F1 | 	add	fp, #8
1a4f8     A7 20 02 FB | 	rdlong	local02, fp
1a4fc     1C 20 46 F0 | 	shr	local02, #28
1a500     01 20 0E F5 | 	and	local02, #1 wz
1a504     01 1E 06 A6 |  if_e	mov	local01, #1
1a508     2C 4E 05 F1 | 	add	fp, #44
1a50c     A7 1E 62 FC | 	wrlong	local01, fp
1a510     14 4E 85 F1 | 	sub	fp, #20
1a514     A7 1E 02 FB | 	rdlong	local01, fp
1a518     98 4E 05 F1 | 	add	fp, #152
1a51c     A7 22 02 FB | 	rdlong	local03, fp
1a520     B8 4E 85 F1 | 	sub	fp, #184
1a524     11 1F 52 F2 | 	cmps	local01, local03 wc
1a528     18 00 90 3D |  if_ae	jmp	#LR__2330
1a52c     20 4E 05 F1 | 	add	fp, #32
1a530     A7 24 02 FB | 	rdlong	local04, fp
1a534     20 4E 85 F1 | 	sub	fp, #32
1a538     FF FF 7F FF 
1a53c     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1a540     10 00 90 3D |  if_ae	jmp	#LR__2331
1a544                 | LR__2330
1a544     24 4E 05 F1 | 	add	fp, #36
1a548     A7 02 68 FC | 	wrlong	#1, fp
1a54c     24 4E 85 F1 | 	sub	fp, #36
1a550     C8 00 90 FD | 	jmp	#LR__2335
1a554                 | LR__2331
1a554     B8 4E 05 F1 | 	add	fp, #184
1a558     A7 24 02 FB | 	rdlong	local04, fp
1a55c     98 4E 85 F1 | 	sub	fp, #152
1a560     A7 22 02 FB | 	rdlong	local03, fp
1a564     11 25 82 F1 | 	sub	local04, local03
1a568     98 4E 05 F1 | 	add	fp, #152
1a56c     A7 24 62 FC | 	wrlong	local04, fp
1a570     AC 4E 85 F1 | 	sub	fp, #172
1a574     A7 12 02 FB | 	rdlong	arg01, fp
1a578     08 4E 05 F1 | 	add	fp, #8
1a57c     A7 14 02 F6 | 	mov	arg02, fp
1a580     0C 4E 05 F1 | 	add	fp, #12
1a584     A7 16 02 F6 | 	mov	arg03, fp
1a588     12 19 62 F6 | 	neg	arg04, local04
1a58c     04 4E 85 F1 | 	sub	fp, #4
1a590     A7 1A 02 FB | 	rdlong	arg05, fp
1a594     1C 4E 85 F1 | 	sub	fp, #28
1a598     94 3E B0 FD | 	call	#__system__disassemble_0381
1a59c     7C 00 90 FD | 	jmp	#LR__2335
1a5a0                 | LR__2332
1a5a0     24 4E 05 F1 | 	add	fp, #36
1a5a4     A7 1E 0A FB | 	rdlong	local01, fp wz
1a5a8     24 4E 85 F1 | 	sub	fp, #36
1a5ac     34 00 90 AD |  if_e	jmp	#LR__2333
1a5b0     0C 4E 05 F1 | 	add	fp, #12
1a5b4     A7 12 02 FB | 	rdlong	arg01, fp
1a5b8     08 4E 05 F1 | 	add	fp, #8
1a5bc     A7 14 02 F6 | 	mov	arg02, fp
1a5c0     0C 4E 05 F1 | 	add	fp, #12
1a5c4     A7 16 02 F6 | 	mov	arg03, fp
1a5c8     98 4E 05 F1 | 	add	fp, #152
1a5cc     A7 18 02 FB | 	rdlong	arg04, fp
1a5d0     9C 4E 85 F1 | 	sub	fp, #156
1a5d4     A7 1A 02 FB | 	rdlong	arg05, fp
1a5d8     1C 4E 85 F1 | 	sub	fp, #28
1a5dc     50 3E B0 FD | 	call	#__system__disassemble_0381
1a5e0     38 00 90 FD | 	jmp	#LR__2334
1a5e4                 | LR__2333
1a5e4     0C 4E 05 F1 | 	add	fp, #12
1a5e8     A7 12 02 FB | 	rdlong	arg01, fp
1a5ec     08 4E 05 F1 | 	add	fp, #8
1a5f0     A7 14 02 F6 | 	mov	arg02, fp
1a5f4     0C 4E 05 F1 | 	add	fp, #12
1a5f8     A7 16 02 F6 | 	mov	arg03, fp
1a5fc     98 4E 05 F1 | 	add	fp, #152
1a600     A7 24 02 FB | 	rdlong	local04, fp
1a604     01 24 06 F1 | 	add	local04, #1
1a608     12 19 62 F6 | 	neg	arg04, local04
1a60c     9C 4E 85 F1 | 	sub	fp, #156
1a610     A7 1A 02 FB | 	rdlong	arg05, fp
1a614     1C 4E 85 F1 | 	sub	fp, #28
1a618     14 3E B0 FD | 	call	#__system__disassemble_0381
1a61c                 | LR__2334
1a61c                 | LR__2335
1a61c     1C 4E 05 F1 | 	add	fp, #28
1a620     A7 1E 02 FB | 	rdlong	local01, fp
1a624     1C 4E 85 F1 | 	sub	fp, #28
1a628     02 1E 0E F2 | 	cmp	local01, #2 wz
1a62c     4C 00 90 5D |  if_ne	jmp	#LR__2338
1a630     1C 4E 05 F1 | 	add	fp, #28
1a634     A7 20 68 FC | 	wrlong	#16, fp
1a638     1C 4E 85 F1 | 	sub	fp, #28
1a63c                 | LR__2336
1a63c     14 4E 05 F1 | 	add	fp, #20
1a640     A7 1E 0A FB | 	rdlong	local01, fp wz
1a644     14 4E 85 F1 | 	sub	fp, #20
1a648     30 00 90 AD |  if_e	jmp	#LR__2337
1a64c     14 4E 05 F1 | 	add	fp, #20
1a650     A7 22 02 FB | 	rdlong	local03, fp
1a654     14 4E 85 F1 | 	sub	fp, #20
1a658     00 80 00 FF 
1a65c     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1a660     18 00 90 3D |  if_ae	jmp	#LR__2337
1a664     14 4E 05 F1 | 	add	fp, #20
1a668     A7 1E 02 FB | 	rdlong	local01, fp
1a66c     01 1E 66 F0 | 	shl	local01, #1
1a670     A7 1E 62 FC | 	wrlong	local01, fp
1a674     14 4E 85 F1 | 	sub	fp, #20
1a678     C0 FF 9F FD | 	jmp	#LR__2336
1a67c                 | LR__2337
1a67c                 | LR__2338
1a67c     70 4E 05 F1 | 	add	fp, #112
1a680     A7 12 02 F6 | 	mov	arg01, fp
1a684     5C 4E 85 F1 | 	sub	fp, #92
1a688     A7 14 02 FB | 	rdlong	arg02, fp
1a68c     08 4E 05 F1 | 	add	fp, #8
1a690     A7 16 02 FB | 	rdlong	arg03, fp
1a694     A0 4E 05 F1 | 	add	fp, #160
1a698     A7 1A 02 FB | 	rdlong	arg05, fp
1a69c     BC 4E 85 F1 | 	sub	fp, #188
1a6a0     01 18 06 F6 | 	mov	arg04, #1
1a6a4     14 3D B0 FD | 	call	#__system___uitoa
1a6a8     58 4E 05 F1 | 	add	fp, #88
1a6ac     A7 FA 61 FC | 	wrlong	result1, fp
1a6b0     38 4E 85 F1 | 	sub	fp, #56
1a6b4     A7 1E 02 FB | 	rdlong	local01, fp
1a6b8     20 4E 85 F1 | 	sub	fp, #32
1a6bc     00 1E 56 F2 | 	cmps	local01, #0 wc
1a6c0     50 00 90 3D |  if_ae	jmp	#LR__2339
1a6c4     60 4E 05 F1 | 	add	fp, #96
1a6c8     A7 5A 68 FC | 	wrlong	#45, fp
1a6cc     50 4E 05 F1 | 	add	fp, #80
1a6d0     A7 12 02 F6 | 	mov	arg01, fp
1a6d4     90 4E 85 F1 | 	sub	fp, #144
1a6d8     A7 22 02 FB | 	rdlong	local03, fp
1a6dc     11 15 62 F6 | 	neg	arg02, local03
1a6e0     18 4E 05 F1 | 	add	fp, #24
1a6e4     A7 18 02 FB | 	rdlong	arg04, fp
1a6e8     84 4E 05 F1 | 	add	fp, #132
1a6ec     A7 28 02 FB | 	rdlong	local06, fp
1a6f0     BC 4E 85 F1 | 	sub	fp, #188
1a6f4     14 25 02 F6 | 	mov	local04, local06
1a6f8     0A 16 06 F6 | 	mov	arg03, #10
1a6fc     12 1B 02 F6 | 	mov	arg05, local04
1a700     B8 3C B0 FD | 	call	#__system___uitoa
1a704     5C 4E 05 F1 | 	add	fp, #92
1a708     A7 FA 61 FC | 	wrlong	result1, fp
1a70c     5C 4E 85 F1 | 	sub	fp, #92
1a710     48 00 90 FD | 	jmp	#LR__2340
1a714                 | LR__2339
1a714     60 4E 05 F1 | 	add	fp, #96
1a718     A7 56 68 FC | 	wrlong	#43, fp
1a71c     50 4E 05 F1 | 	add	fp, #80
1a720     A7 12 02 F6 | 	mov	arg01, fp
1a724     90 4E 85 F1 | 	sub	fp, #144
1a728     A7 14 02 FB | 	rdlong	arg02, fp
1a72c     18 4E 05 F1 | 	add	fp, #24
1a730     A7 18 02 FB | 	rdlong	arg04, fp
1a734     84 4E 05 F1 | 	add	fp, #132
1a738     A7 28 02 FB | 	rdlong	local06, fp
1a73c     BC 4E 85 F1 | 	sub	fp, #188
1a740     14 25 02 F6 | 	mov	local04, local06
1a744     0A 16 06 F6 | 	mov	arg03, #10
1a748     12 1B 02 F6 | 	mov	arg05, local04
1a74c     6C 3C B0 FD | 	call	#__system___uitoa
1a750     5C 4E 05 F1 | 	add	fp, #92
1a754     A7 FA 61 FC | 	wrlong	result1, fp
1a758     5C 4E 85 F1 | 	sub	fp, #92
1a75c                 | LR__2340
1a75c     24 4E 05 F1 | 	add	fp, #36
1a760     A7 1E 0A FB | 	rdlong	local01, fp wz
1a764     24 4E 85 F1 | 	sub	fp, #36
1a768     2C 00 90 AD |  if_e	jmp	#LR__2341
1a76c     50 4E 05 F1 | 	add	fp, #80
1a770     A7 00 68 FC | 	wrlong	#0, fp
1a774     04 4E 85 F1 | 	sub	fp, #4
1a778     A7 00 68 FC | 	wrlong	#0, fp
1a77c     6C 4E 05 F1 | 	add	fp, #108
1a780     A7 1E 02 FB | 	rdlong	local01, fp
1a784     01 1E 06 F1 | 	add	local01, #1
1a788     64 4E 85 F1 | 	sub	fp, #100
1a78c     A7 1E 62 FC | 	wrlong	local01, fp
1a790     54 4E 85 F1 | 	sub	fp, #84
1a794     88 00 90 FD | 	jmp	#LR__2344
1a798                 | LR__2341
1a798     20 4E 05 F1 | 	add	fp, #32
1a79c     A7 1E 02 FB | 	rdlong	local01, fp
1a7a0     20 4E 85 F1 | 	sub	fp, #32
1a7a4     00 1E 56 F2 | 	cmps	local01, #0 wc
1a7a8     40 00 90 3D |  if_ae	jmp	#LR__2342
1a7ac     20 4E 05 F1 | 	add	fp, #32
1a7b0     A7 20 02 FB | 	rdlong	local02, fp
1a7b4     30 4E 05 F1 | 	add	fp, #48
1a7b8     A7 20 62 FC | 	wrlong	local02, fp
1a7bc     04 4E 85 F1 | 	sub	fp, #4
1a7c0     A7 20 62 FC | 	wrlong	local02, fp
1a7c4     2C 4E 85 F1 | 	sub	fp, #44
1a7c8     A7 1E 02 FB | 	rdlong	local01, fp
1a7cc     98 4E 05 F1 | 	add	fp, #152
1a7d0     A7 22 02 FB | 	rdlong	local03, fp
1a7d4     11 1F 02 F1 | 	add	local01, local03
1a7d8     01 1E 06 F1 | 	add	local01, #1
1a7dc     64 4E 85 F1 | 	sub	fp, #100
1a7e0     A7 1E 62 FC | 	wrlong	local01, fp
1a7e4     54 4E 85 F1 | 	sub	fp, #84
1a7e8     34 00 90 FD | 	jmp	#LR__2343
1a7ec                 | LR__2342
1a7ec     4C 4E 05 F1 | 	add	fp, #76
1a7f0     A7 00 68 FC | 	wrlong	#0, fp
1a7f4     2C 4E 85 F1 | 	sub	fp, #44
1a7f8     A7 1E 02 FB | 	rdlong	local01, fp
1a7fc     30 4E 05 F1 | 	add	fp, #48
1a800     A7 1E 62 FC | 	wrlong	local01, fp
1a804     68 4E 05 F1 | 	add	fp, #104
1a808     A7 22 02 FB | 	rdlong	local03, fp
1a80c     11 1F 02 F1 | 	add	local01, local03
1a810     01 1E 06 F1 | 	add	local01, #1
1a814     64 4E 85 F1 | 	sub	fp, #100
1a818     A7 1E 62 FC | 	wrlong	local01, fp
1a81c     54 4E 85 F1 | 	sub	fp, #84
1a820                 | LR__2343
1a820                 | LR__2344
1a820     54 4E 05 F1 | 	add	fp, #84
1a824     A7 1E 02 FB | 	rdlong	local01, fp
1a828     08 4E 85 F1 | 	sub	fp, #8
1a82c     A7 22 02 FB | 	rdlong	local03, fp
1a830     11 1F 82 F1 | 	sub	local01, local03
1a834     01 1E 06 F1 | 	add	local01, #1
1a838     24 4E 85 F1 | 	sub	fp, #36
1a83c     A7 1E 62 FC | 	wrlong	local01, fp
1a840     04 4E 05 F1 | 	add	fp, #4
1a844     A7 1E 0A FB | 	rdlong	local01, fp wz
1a848     2C 4E 85 F1 | 	sub	fp, #44
1a84c     28 4E 05 51 |  if_ne	add	fp, #40
1a850     A7 22 02 5B |  if_ne	rdlong	local03, fp
1a854     01 22 06 51 |  if_ne	add	local03, #1
1a858     A7 22 62 5C |  if_ne	wrlong	local03, fp
1a85c     28 4E 85 51 |  if_ne	sub	fp, #40
1a860     1C 4E 05 F1 | 	add	fp, #28
1a864     A7 1E 02 FB | 	rdlong	local01, fp
1a868     1C 4E 85 F1 | 	sub	fp, #28
1a86c     10 1E 0E F2 | 	cmp	local01, #16 wz
1a870     28 4E 05 A1 |  if_e	add	fp, #40
1a874     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a878     02 1E 06 A1 |  if_e	add	local01, #2
1a87c     A7 1E 62 AC |  if_e	wrlong	local01, fp
1a880     28 4E 85 A1 |  if_e	sub	fp, #40
1a884     24 4E 05 F1 | 	add	fp, #36
1a888     A7 1E 0A FB | 	rdlong	local01, fp wz
1a88c     24 4E 85 F1 | 	sub	fp, #36
1a890     28 00 90 AD |  if_e	jmp	#LR__2345
1a894     28 4E 05 F1 | 	add	fp, #40
1a898     A7 1E 02 FB | 	rdlong	local01, fp
1a89c     02 22 06 F6 | 	mov	local03, #2
1a8a0     34 4E 05 F1 | 	add	fp, #52
1a8a4     A7 26 02 FB | 	rdlong	local05, fp
1a8a8     13 23 02 F1 | 	add	local03, local05
1a8ac     11 1F 02 F1 | 	add	local01, local03
1a8b0     34 4E 85 F1 | 	sub	fp, #52
1a8b4     A7 1E 62 FC | 	wrlong	local01, fp
1a8b8     28 4E 85 F1 | 	sub	fp, #40
1a8bc                 | LR__2345
1a8bc     28 4E 05 F1 | 	add	fp, #40
1a8c0     A7 1E 02 FB | 	rdlong	local01, fp
1a8c4     28 4E 85 F1 | 	sub	fp, #40
1a8c8     41 1E 56 F2 | 	cmps	local01, #65 wc
1a8cc     01 FA 65 36 |  if_ae	neg	result1, #1
1a8d0     08 05 90 3D |  if_ae	jmp	#LR__2373
1a8d4     3C 4E 05 F1 | 	add	fp, #60
1a8d8     A7 1E 0A FB | 	rdlong	local01, fp wz
1a8dc     3C 4E 85 F1 | 	sub	fp, #60
1a8e0     60 00 90 AD |  if_e	jmp	#LR__2346
1a8e4     C0 4E 05 F1 | 	add	fp, #192
1a8e8     A7 12 02 FB | 	rdlong	arg01, fp
1a8ec     94 4E 85 F1 | 	sub	fp, #148
1a8f0     A7 14 02 FB | 	rdlong	arg02, fp
1a8f4     14 4E 05 F1 | 	add	fp, #20
1a8f8     A7 16 02 FB | 	rdlong	arg03, fp
1a8fc     40 4E 85 F1 | 	sub	fp, #64
1a900     20 3D B0 FD | 	call	#__system__emitsign_0383
1a904     18 4F 05 F1 | 	add	fp, #280
1a908     A7 FA 61 FC | 	wrlong	result1, fp
1a90c     18 4F 85 F1 | 	sub	fp, #280
1a910     00 FA 55 F2 | 	cmps	result1, #0 wc
1a914     18 4F 05 C1 |  if_b	add	fp, #280
1a918     A7 FA 01 CB |  if_b	rdlong	result1, fp
1a91c     18 4F 85 C1 |  if_b	sub	fp, #280
1a920     B8 04 90 CD |  if_b	jmp	#LR__2373
1a924     C0 4E 05 F1 | 	add	fp, #192
1a928     A7 1E 02 FB | 	rdlong	local01, fp
1a92c     58 4E 05 F1 | 	add	fp, #88
1a930     A7 22 02 FB | 	rdlong	local03, fp
1a934     11 1F 02 F1 | 	add	local01, local03
1a938     58 4E 85 F1 | 	sub	fp, #88
1a93c     A7 1E 62 FC | 	wrlong	local01, fp
1a940     C0 4E 85 F1 | 	sub	fp, #192
1a944                 | LR__2346
1a944     4C 4E 05 F1 | 	add	fp, #76
1a948     A7 1E 02 FB | 	rdlong	local01, fp
1a94c     34 4E 85 F1 | 	sub	fp, #52
1a950     A7 1E 62 FC | 	wrlong	local01, fp
1a954     18 4E 85 F1 | 	sub	fp, #24
1a958     97 9E 48 FB | 	callpa	#(@LR__2352-@LR__2347)>>2,fcache_load_ptr_
1a95c                 | LR__2347
1a95c     18 4E 05 F1 | 	add	fp, #24
1a960     A7 20 02 FB | 	rdlong	local02, fp
1a964     3C 4E 05 F1 | 	add	fp, #60
1a968     A7 26 02 FB | 	rdlong	local05, fp
1a96c     54 4E 85 F1 | 	sub	fp, #84
1a970     13 21 52 F2 | 	cmps	local02, local05 wc
1a974     20 01 90 3D |  if_ae	jmp	#LR__2353
1a978     18 4E 05 F1 | 	add	fp, #24
1a97c     A7 28 02 FB | 	rdlong	local06, fp
1a980     18 4E 85 F1 | 	sub	fp, #24
1a984     00 28 56 F2 | 	cmps	local06, #0 wc
1a988     58 00 90 CD |  if_b	jmp	#LR__2348
1a98c     18 4E 05 F1 | 	add	fp, #24
1a990     A7 28 02 FB | 	rdlong	local06, fp
1a994     40 4E 05 F1 | 	add	fp, #64
1a998     A7 2A 02 FB | 	rdlong	local07, fp
1a99c     58 4E 85 F1 | 	sub	fp, #88
1a9a0     15 29 52 F2 | 	cmps	local06, local07 wc
1a9a4     3C 00 90 3D |  if_ae	jmp	#LR__2348
1a9a8     C0 4E 05 F1 | 	add	fp, #192
1a9ac     A7 2C 02 FB | 	rdlong	local08, fp
1a9b0     16 2B 02 F6 | 	mov	local07, local08
1a9b4     01 2A 06 F1 | 	add	local07, #1
1a9b8     A7 2A 62 FC | 	wrlong	local07, fp
1a9bc     A8 4E 85 F1 | 	sub	fp, #168
1a9c0     A7 2A 02 FB | 	rdlong	local07, fp
1a9c4     15 2F 02 F6 | 	mov	local09, local07
1a9c8     58 4E 05 F1 | 	add	fp, #88
1a9cc     A7 30 02 F6 | 	mov	local10, fp
1a9d0     A7 2E 02 F1 | 	add	local09, fp
1a9d4     17 33 C2 FA | 	rdbyte	local11, local09
1a9d8     16 33 42 FC | 	wrbyte	local11, local08
1a9dc     70 4E 85 F1 | 	sub	fp, #112
1a9e0     20 00 90 FD | 	jmp	#LR__2349
1a9e4                 | LR__2348
1a9e4     C0 4E 05 F1 | 	add	fp, #192
1a9e8     A7 2C 02 FB | 	rdlong	local08, fp
1a9ec     16 2F 02 F6 | 	mov	local09, local08
1a9f0     01 2E 06 F1 | 	add	local09, #1
1a9f4     A7 2E 62 FC | 	wrlong	local09, fp
1a9f8     C0 4E 85 F1 | 	sub	fp, #192
1a9fc     30 2E 06 F6 | 	mov	local09, #48
1aa00     16 61 48 FC | 	wrbyte	#48, local08
1aa04                 | LR__2349
1aa04     18 4E 05 F1 | 	add	fp, #24
1aa08     A7 28 02 FB | 	rdlong	local06, fp
1aa0c     38 4E 05 F1 | 	add	fp, #56
1aa10     A7 34 02 FB | 	rdlong	local12, fp
1aa14     50 4E 85 F1 | 	sub	fp, #80
1aa18     1A 29 0A F2 | 	cmp	local06, local12 wz
1aa1c     5C 00 90 5D |  if_ne	jmp	#LR__2351
1aa20     10 4F 05 F1 | 	add	fp, #272
1aa24     A7 2A 02 FB | 	rdlong	local07, fp
1aa28     10 4F 85 F1 | 	sub	fp, #272
1aa2c     15 2F 0A F6 | 	mov	local09, local07 wz
1aa30     28 00 90 5D |  if_ne	jmp	#LR__2350
1aa34     54 4E 05 F1 | 	add	fp, #84
1aa38     A7 32 02 FB | 	rdlong	local11, fp
1aa3c     19 31 02 F6 | 	mov	local10, local11
1aa40     01 30 86 F1 | 	sub	local10, #1
1aa44     3C 4E 85 F1 | 	sub	fp, #60
1aa48     A7 36 02 FB | 	rdlong	local13, fp
1aa4c     18 4E 85 F1 | 	sub	fp, #24
1aa50     1B 39 02 F6 | 	mov	local14, local13
1aa54     18 39 52 F2 | 	cmps	local14, local10 wc
1aa58     20 00 90 3D |  if_ae	jmp	#LR__2351
1aa5c                 | LR__2350
1aa5c     C0 4E 05 F1 | 	add	fp, #192
1aa60     A7 2C 02 FB | 	rdlong	local08, fp
1aa64     16 35 02 F6 | 	mov	local12, local08
1aa68     01 34 06 F1 | 	add	local12, #1
1aa6c     A7 34 62 FC | 	wrlong	local12, fp
1aa70     C0 4E 85 F1 | 	sub	fp, #192
1aa74     2E 2E 06 F6 | 	mov	local09, #46
1aa78     16 5D 48 FC | 	wrbyte	#46, local08
1aa7c                 | LR__2351
1aa7c     18 4E 05 F1 | 	add	fp, #24
1aa80     A7 3A 02 FB | 	rdlong	local15, fp
1aa84     1D 35 02 F6 | 	mov	local12, local15
1aa88     01 34 06 F1 | 	add	local12, #1
1aa8c     A7 34 62 FC | 	wrlong	local12, fp
1aa90     18 4E 85 F1 | 	sub	fp, #24
1aa94     C4 FE 9F FD | 	jmp	#LR__2347
1aa98                 | LR__2352
1aa98                 | LR__2353
1aa98     34 4E 05 F1 | 	add	fp, #52
1aa9c     A7 1E 0A FB | 	rdlong	local01, fp wz
1aaa0     34 4E 85 F1 | 	sub	fp, #52
1aaa4     A0 00 90 AD |  if_e	jmp	#LR__2357
1aaa8     C0 4E 05 F1 | 	add	fp, #192
1aaac     A7 1E 02 FB | 	rdlong	local01, fp
1aab0     01 1E 86 F1 | 	sub	local01, #1
1aab4     A7 1E 62 FC | 	wrlong	local01, fp
1aab8     C0 4E 85 F1 | 	sub	fp, #192
1aabc     97 26 48 FB | 	callpa	#(@LR__2355-@LR__2354)>>2,fcache_load_ptr_
1aac0                 | LR__2354
1aac0     C0 4E 05 F1 | 	add	fp, #192
1aac4     A7 1E 02 FB | 	rdlong	local01, fp
1aac8     04 4E 05 F1 | 	add	fp, #4
1aacc     A7 22 02 FB | 	rdlong	local03, fp
1aad0     C4 4E 85 F1 | 	sub	fp, #196
1aad4     11 1F 5A F2 | 	cmps	local01, local03 wcz
1aad8     30 00 90 ED |  if_be	jmp	#LR__2356
1aadc     C0 4E 05 F1 | 	add	fp, #192
1aae0     A7 28 02 FB | 	rdlong	local06, fp
1aae4     C0 4E 85 F1 | 	sub	fp, #192
1aae8     14 25 C2 FA | 	rdbyte	local04, local06
1aaec     30 24 0E F2 | 	cmp	local04, #48 wz
1aaf0     18 00 90 5D |  if_ne	jmp	#LR__2356
1aaf4     C0 4E 05 F1 | 	add	fp, #192
1aaf8     A7 1E 02 FB | 	rdlong	local01, fp
1aafc     01 1E 86 F1 | 	sub	local01, #1
1ab00     A7 1E 62 FC | 	wrlong	local01, fp
1ab04     C0 4E 85 F1 | 	sub	fp, #192
1ab08     B4 FF 9F FD | 	jmp	#LR__2354
1ab0c                 | LR__2355
1ab0c                 | LR__2356
1ab0c     C0 4E 05 F1 | 	add	fp, #192
1ab10     A7 20 02 FB | 	rdlong	local02, fp
1ab14     C0 4E 85 F1 | 	sub	fp, #192
1ab18     10 1F C2 FA | 	rdbyte	local01, local02
1ab1c     2E 1E 0E F2 | 	cmp	local01, #46 wz
1ab20     C0 4E 05 A1 |  if_e	add	fp, #192
1ab24     A7 1E 02 AB |  if_e	rdlong	local01, fp
1ab28     01 1E 86 A1 |  if_e	sub	local01, #1
1ab2c     A7 1E 62 AC |  if_e	wrlong	local01, fp
1ab30     C0 4E 85 A1 |  if_e	sub	fp, #192
1ab34     C0 4E 05 F1 | 	add	fp, #192
1ab38     A7 22 02 FB | 	rdlong	local03, fp
1ab3c     01 22 06 F1 | 	add	local03, #1
1ab40     A7 22 62 FC | 	wrlong	local03, fp
1ab44     C0 4E 85 F1 | 	sub	fp, #192
1ab48                 | LR__2357
1ab48     24 4E 05 F1 | 	add	fp, #36
1ab4c     A7 1E 0A FB | 	rdlong	local01, fp wz
1ab50     24 4E 85 F1 | 	sub	fp, #36
1ab54     B4 00 90 AD |  if_e	jmp	#LR__2360
1ab58     C0 4E 05 F1 | 	add	fp, #192
1ab5c     A7 20 02 FB | 	rdlong	local02, fp
1ab60     10 23 02 F6 | 	mov	local03, local02
1ab64     01 22 06 F1 | 	add	local03, #1
1ab68     A7 22 62 FC | 	wrlong	local03, fp
1ab6c     90 4E 85 F1 | 	sub	fp, #144
1ab70     A7 24 02 FB | 	rdlong	local04, fp
1ab74     10 25 42 FC | 	wrbyte	local04, local02
1ab78     90 4E 05 F1 | 	add	fp, #144
1ab7c     A7 20 02 FB | 	rdlong	local02, fp
1ab80     10 23 02 F6 | 	mov	local03, local02
1ab84     01 22 06 F1 | 	add	local03, #1
1ab88     A7 22 62 FC | 	wrlong	local03, fp
1ab8c     60 4E 85 F1 | 	sub	fp, #96
1ab90     A7 24 02 FB | 	rdlong	local04, fp
1ab94     10 25 42 FC | 	wrbyte	local04, local02
1ab98     48 4E 85 F1 | 	sub	fp, #72
1ab9c     A7 00 68 FC | 	wrlong	#0, fp
1aba0     18 4E 85 F1 | 	sub	fp, #24
1aba4                 | LR__2358
1aba4     18 4E 05 F1 | 	add	fp, #24
1aba8     A7 20 02 FB | 	rdlong	local02, fp
1abac     44 4E 05 F1 | 	add	fp, #68
1abb0     A7 26 02 FB | 	rdlong	local05, fp
1abb4     5C 4E 85 F1 | 	sub	fp, #92
1abb8     13 21 52 F2 | 	cmps	local02, local05 wc
1abbc     4C 00 90 3D |  if_ae	jmp	#LR__2359
1abc0     C0 4E 05 F1 | 	add	fp, #192
1abc4     A7 2C 02 FB | 	rdlong	local08, fp
1abc8     16 35 02 F6 | 	mov	local12, local08
1abcc     01 34 06 F1 | 	add	local12, #1
1abd0     A7 34 62 FC | 	wrlong	local12, fp
1abd4     A8 4E 85 F1 | 	sub	fp, #168
1abd8     A7 2A 02 FB | 	rdlong	local07, fp
1abdc     15 2F 02 F6 | 	mov	local09, local07
1abe0     98 4E 05 F1 | 	add	fp, #152
1abe4     A7 30 02 F6 | 	mov	local10, fp
1abe8     A7 2E 02 F1 | 	add	local09, fp
1abec     17 33 C2 FA | 	rdbyte	local11, local09
1abf0     16 33 42 FC | 	wrbyte	local11, local08
1abf4     98 4E 85 F1 | 	sub	fp, #152
1abf8     A7 34 02 FB | 	rdlong	local12, fp
1abfc     01 34 06 F1 | 	add	local12, #1
1ac00     A7 34 62 FC | 	wrlong	local12, fp
1ac04     18 4E 85 F1 | 	sub	fp, #24
1ac08     98 FF 9F FD | 	jmp	#LR__2358
1ac0c                 | LR__2359
1ac0c                 | LR__2360
1ac0c     C0 4E 05 F1 | 	add	fp, #192
1ac10     A7 1E 02 FB | 	rdlong	local01, fp
1ac14     C0 4E 85 F1 | 	sub	fp, #192
1ac18     0F 01 48 FC | 	wrbyte	#0, local01
1ac1c                 | LR__2361
1ac1c     6C 4E 05 F1 | 	add	fp, #108
1ac20     A7 1E 0A FB | 	rdlong	local01, fp wz
1ac24     6C 4E 85 F1 | 	sub	fp, #108
1ac28     90 01 90 AD |  if_e	jmp	#LR__2372
1ac2c     48 4E 05 F1 | 	add	fp, #72
1ac30     A7 22 0A FB | 	rdlong	local03, fp wz
1ac34     48 4E 85 F1 | 	sub	fp, #72
1ac38     80 01 90 AD |  if_e	jmp	#LR__2372
1ac3c     C4 4E 05 F1 | 	add	fp, #196
1ac40     A7 12 02 FB | 	rdlong	arg01, fp
1ac44     C4 4E 85 F1 | 	sub	fp, #196
1ac48     09 3D 02 F6 | 	mov	local16, arg01
1ac4c     97 06 48 FB | 	callpa	#(@LR__2363-@LR__2362)>>2,fcache_load_ptr_
1ac50                 | LR__2362
1ac50     1E FB C9 FA | 	rdbyte	result1, local16 wz
1ac54     01 3C 06 51 |  if_ne	add	local16, #1
1ac58     F4 FF 9F 5D |  if_ne	jmp	#LR__2362
1ac5c                 | LR__2363
1ac5c     09 3D 82 F1 | 	sub	local16, arg01
1ac60     1E 25 02 F6 | 	mov	local04, local16
1ac64     6C 4E 05 F1 | 	add	fp, #108
1ac68     A7 28 02 FB | 	rdlong	local06, fp
1ac6c     6C 4E 85 F1 | 	sub	fp, #108
1ac70     14 25 5A F2 | 	cmps	local04, local06 wcz
1ac74     44 01 90 ED |  if_be	jmp	#LR__2372
1ac78     C4 4E 05 F1 | 	add	fp, #196
1ac7c     A7 1E 02 FB | 	rdlong	local01, fp
1ac80     5C 4E 05 F1 | 	add	fp, #92
1ac84     A7 1E 62 FC | 	wrlong	local01, fp
1ac88     FC 4E 85 F1 | 	sub	fp, #252
1ac8c     A7 1E 0A FB | 	rdlong	local01, fp wz
1ac90     24 4E 85 F1 | 	sub	fp, #36
1ac94     20 00 90 AD |  if_e	jmp	#LR__2364
1ac98     B8 4E 05 F1 | 	add	fp, #184
1ac9c     A7 00 68 FC | 	wrlong	#0, fp
1aca0     4C 4E 85 F1 | 	sub	fp, #76
1aca4     A7 1E 02 FB | 	rdlong	local01, fp
1aca8     B0 4E 05 F1 | 	add	fp, #176
1acac     A7 1E 62 FC | 	wrlong	local01, fp
1acb0     1C 4F 85 F1 | 	sub	fp, #284
1acb4     24 00 90 FD | 	jmp	#LR__2365
1acb8                 | LR__2364
1acb8     6C 4E 05 F1 | 	add	fp, #108
1acbc     A7 1E 02 FB | 	rdlong	local01, fp
1acc0     01 1E 86 F1 | 	sub	local01, #1
1acc4     4C 4E 05 F1 | 	add	fp, #76
1acc8     A7 22 02 FB | 	rdlong	local03, fp
1accc     11 1F 82 F1 | 	sub	local01, local03
1acd0     64 4E 05 F1 | 	add	fp, #100
1acd4     A7 1E 62 FC | 	wrlong	local01, fp
1acd8     1C 4F 85 F1 | 	sub	fp, #284
1acdc                 | LR__2365
1acdc     97 20 48 FB | 	callpa	#(@LR__2367-@LR__2366)>>2,fcache_load_ptr_
1ace0                 | LR__2366
1ace0     1C 4F 05 F1 | 	add	fp, #284
1ace4     A7 1E 0A FB | 	rdlong	local01, fp wz
1ace8     1C 4F 85 F1 | 	sub	fp, #284
1acec     30 00 90 AD |  if_e	jmp	#LR__2368
1acf0     20 4F 05 F1 | 	add	fp, #288
1acf4     A7 20 02 FB | 	rdlong	local02, fp
1acf8     10 23 02 F6 | 	mov	local03, local02
1acfc     01 22 06 F1 | 	add	local03, #1
1ad00     A7 22 62 FC | 	wrlong	local03, fp
1ad04     10 55 48 FC | 	wrbyte	#42, local02
1ad08     04 4E 85 F1 | 	sub	fp, #4
1ad0c     A7 1E 02 FB | 	rdlong	local01, fp
1ad10     01 1E 86 F1 | 	sub	local01, #1
1ad14     A7 1E 62 FC | 	wrlong	local01, fp
1ad18     1C 4F 85 F1 | 	sub	fp, #284
1ad1c     C0 FF 9F FD | 	jmp	#LR__2366
1ad20                 | LR__2367
1ad20                 | LR__2368
1ad20     B8 4E 05 F1 | 	add	fp, #184
1ad24     A7 1E 0A FB | 	rdlong	local01, fp wz
1ad28     B8 4E 85 F1 | 	sub	fp, #184
1ad2c     70 00 90 AD |  if_e	jmp	#LR__2371
1ad30     20 4F 05 F1 | 	add	fp, #288
1ad34     A7 20 02 FB | 	rdlong	local02, fp
1ad38     10 23 02 F6 | 	mov	local03, local02
1ad3c     01 22 06 F1 | 	add	local03, #1
1ad40     A7 22 62 FC | 	wrlong	local03, fp
1ad44     10 5D 48 FC | 	wrbyte	#46, local02
1ad48     04 4E 85 F1 | 	sub	fp, #4
1ad4c     A7 00 68 FC | 	wrlong	#0, fp
1ad50     1C 4F 85 F1 | 	sub	fp, #284
1ad54                 | LR__2369
1ad54     1C 4F 05 F1 | 	add	fp, #284
1ad58     A7 20 02 FB | 	rdlong	local02, fp
1ad5c     64 4E 85 F1 | 	sub	fp, #100
1ad60     A7 26 02 FB | 	rdlong	local05, fp
1ad64     B8 4E 85 F1 | 	sub	fp, #184
1ad68     13 21 52 F2 | 	cmps	local02, local05 wc
1ad6c     30 00 90 3D |  if_ae	jmp	#LR__2370
1ad70     20 4F 05 F1 | 	add	fp, #288
1ad74     A7 2C 02 FB | 	rdlong	local08, fp
1ad78     16 35 02 F6 | 	mov	local12, local08
1ad7c     01 34 06 F1 | 	add	local12, #1
1ad80     A7 34 62 FC | 	wrlong	local12, fp
1ad84     16 55 48 FC | 	wrbyte	#42, local08
1ad88     04 4E 85 F1 | 	sub	fp, #4
1ad8c     A7 34 02 FB | 	rdlong	local12, fp
1ad90     01 34 06 F1 | 	add	local12, #1
1ad94     A7 34 62 FC | 	wrlong	local12, fp
1ad98     1C 4F 85 F1 | 	sub	fp, #284
1ad9c     B4 FF 9F FD | 	jmp	#LR__2369
1ada0                 | LR__2370
1ada0                 | LR__2371
1ada0     20 4F 05 F1 | 	add	fp, #288
1ada4     A7 20 02 FB | 	rdlong	local02, fp
1ada8     10 23 02 F6 | 	mov	local03, local02
1adac     01 22 06 F1 | 	add	local03, #1
1adb0     A7 22 62 FC | 	wrlong	local03, fp
1adb4     20 4F 85 F1 | 	sub	fp, #288
1adb8     10 01 48 FC | 	wrbyte	#0, local02
1adbc                 | LR__2372
1adbc     04 4E 05 F1 | 	add	fp, #4
1adc0     A7 12 02 FB | 	rdlong	arg01, fp
1adc4     04 4E 05 F1 | 	add	fp, #4
1adc8     A7 14 02 FB | 	rdlong	arg02, fp
1adcc     BC 4E 05 F1 | 	add	fp, #188
1add0     A7 16 02 FB | 	rdlong	arg03, fp
1add4     C4 4E 85 F1 | 	sub	fp, #196
1add8     C4 EE BF FD | 	call	#__system___fmtstr
1addc                 | LR__2373
1addc     A7 F0 03 F6 | 	mov	ptra, fp
1ade0     B2 00 A0 FD | 	call	#popregs_
1ade4                 | __system___fmtfloat_ret
1ade4     2D 00 64 FD | 	ret
1ade8                 | 
1ade8                 | __system__Left_S
1ade8     04 4A 05 F6 | 	mov	COUNT_, #4
1adec     A8 00 A0 FD | 	call	#pushregs_
1adf0     09 1F 02 F6 | 	mov	local01, arg01
1adf4     0A 21 02 F6 | 	mov	local02, arg02
1adf8     01 20 56 F2 | 	cmps	local02, #1 wc
1adfc     41 01 00 CF 
1ae00     EE FA 05 C6 |  if_b	mov	result1, ##@LR__4253
1ae04     5C 00 90 CD |  if_b	jmp	#LR__2383
1ae08     0F 13 02 F6 | 	mov	arg01, local01
1ae0c     09 23 02 F6 | 	mov	local03, arg01
1ae10     97 06 48 FB | 	callpa	#(@LR__2381-@LR__2380)>>2,fcache_load_ptr_
1ae14                 | LR__2380
1ae14     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ae18     01 22 06 51 |  if_ne	add	local03, #1
1ae1c     F4 FF 9F 5D |  if_ne	jmp	#LR__2380
1ae20                 | LR__2381
1ae20     09 23 82 F1 | 	sub	local03, arg01
1ae24     11 FB 01 F6 | 	mov	result1, local03
1ae28     10 FB 59 F2 | 	cmps	result1, local02 wcz
1ae2c     0F FB 01 E6 |  if_be	mov	result1, local01
1ae30     30 00 90 ED |  if_be	jmp	#LR__2383
1ae34     10 13 02 F6 | 	mov	arg01, local02
1ae38     02 12 06 F1 | 	add	arg01, #2
1ae3c     50 1D B0 FD | 	call	#__system___gc_alloc_managed
1ae40     FD 24 0A F6 | 	mov	local04, result1 wz
1ae44     18 00 90 AD |  if_e	jmp	#LR__2382
1ae48     12 13 02 F6 | 	mov	arg01, local04
1ae4c     0F 15 02 F6 | 	mov	arg02, local01
1ae50     10 17 02 F6 | 	mov	arg03, local02
1ae54     A0 DE BF FD | 	call	#__system____builtin_memmove
1ae58     12 21 02 F1 | 	add	local02, local04
1ae5c     10 01 48 FC | 	wrbyte	#0, local02
1ae60                 | LR__2382
1ae60     12 FB 01 F6 | 	mov	result1, local04
1ae64                 | LR__2383
1ae64     A7 F0 03 F6 | 	mov	ptra, fp
1ae68     B2 00 A0 FD | 	call	#popregs_
1ae6c                 | __system__Left_S_ret
1ae6c     2D 00 64 FD | 	ret
1ae70                 | 
1ae70                 | __system__Right_S
1ae70     05 4A 05 F6 | 	mov	COUNT_, #5
1ae74     A8 00 A0 FD | 	call	#pushregs_
1ae78     09 1F 02 F6 | 	mov	local01, arg01
1ae7c     0A 21 02 F6 | 	mov	local02, arg02
1ae80     01 20 56 F2 | 	cmps	local02, #1 wc
1ae84     41 01 00 CF 
1ae88     EF FA 05 C6 |  if_b	mov	result1, ##@LR__4254
1ae8c     64 00 90 CD |  if_b	jmp	#LR__2393
1ae90     0F 13 02 F6 | 	mov	arg01, local01
1ae94     09 23 02 F6 | 	mov	local03, arg01
1ae98     97 06 48 FB | 	callpa	#(@LR__2391-@LR__2390)>>2,fcache_load_ptr_
1ae9c                 | LR__2390
1ae9c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1aea0     01 22 06 51 |  if_ne	add	local03, #1
1aea4     F4 FF 9F 5D |  if_ne	jmp	#LR__2390
1aea8                 | LR__2391
1aea8     09 23 82 F1 | 	sub	local03, arg01
1aeac     11 FB 01 F6 | 	mov	result1, local03
1aeb0     FD 24 02 F6 | 	mov	local04, result1
1aeb4     10 25 5A F2 | 	cmps	local04, local02 wcz
1aeb8     0F FB 01 E6 |  if_be	mov	result1, local01
1aebc     34 00 90 ED |  if_be	jmp	#LR__2393
1aec0     10 13 02 F6 | 	mov	arg01, local02
1aec4     02 12 06 F1 | 	add	arg01, #2
1aec8     C4 1C B0 FD | 	call	#__system___gc_alloc_managed
1aecc     FD 26 0A F6 | 	mov	local05, result1 wz
1aed0     1C 00 90 AD |  if_e	jmp	#LR__2392
1aed4     10 25 82 F1 | 	sub	local04, local02
1aed8     0F 25 02 F1 | 	add	local04, local01
1aedc     01 20 06 F1 | 	add	local02, #1
1aee0     13 13 02 F6 | 	mov	arg01, local05
1aee4     12 15 02 F6 | 	mov	arg02, local04
1aee8     10 17 02 F6 | 	mov	arg03, local02
1aeec     08 DE BF FD | 	call	#__system____builtin_memmove
1aef0                 | LR__2392
1aef0     13 FB 01 F6 | 	mov	result1, local05
1aef4                 | LR__2393
1aef4     A7 F0 03 F6 | 	mov	ptra, fp
1aef8     B2 00 A0 FD | 	call	#popregs_
1aefc                 | __system__Right_S_ret
1aefc     2D 00 64 FD | 	ret
1af00                 | 
1af00                 | __system__Mid_S
1af00     05 4A 05 F6 | 	mov	COUNT_, #5
1af04     A8 00 A0 FD | 	call	#pushregs_
1af08     09 1F 02 F6 | 	mov	local01, arg01
1af0c     0A 21 02 F6 | 	mov	local02, arg02
1af10     01 16 56 F2 | 	cmps	arg03, #1 wc
1af14     41 01 00 CF 
1af18     F0 FA 05 C6 |  if_b	mov	result1, ##@LR__4255
1af1c     80 00 90 CD |  if_b	jmp	#LR__2403
1af20     01 20 86 F1 | 	sub	local02, #1
1af24     00 20 56 F3 | 	fges	local02, #0 wc
1af28     0F 13 02 F6 | 	mov	arg01, local01
1af2c     09 23 02 F6 | 	mov	local03, arg01
1af30     97 06 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1af34                 | LR__2400
1af34     11 FB C9 FA | 	rdbyte	result1, local03 wz
1af38     01 22 06 51 |  if_ne	add	local03, #1
1af3c     F4 FF 9F 5D |  if_ne	jmp	#LR__2400
1af40                 | LR__2401
1af40     09 23 82 F1 | 	sub	local03, arg01
1af44     11 FB 01 F6 | 	mov	result1, local03
1af48     FD 14 02 F6 | 	mov	arg02, result1
1af4c     10 15 52 F2 | 	cmps	arg02, local02 wc
1af50     41 01 00 CF 
1af54     F1 FA 05 C6 |  if_b	mov	result1, ##@LR__4256
1af58     44 00 90 CD |  if_b	jmp	#LR__2403
1af5c     0A 25 02 F6 | 	mov	local04, arg02
1af60     10 25 82 F1 | 	sub	local04, local02
1af64     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1af68     0B 25 02 16 |  if_a	mov	local04, arg03
1af6c     12 13 02 F6 | 	mov	arg01, local04
1af70     02 12 06 F1 | 	add	arg01, #2
1af74     18 1C B0 FD | 	call	#__system___gc_alloc_managed
1af78     FD 26 0A F6 | 	mov	local05, result1 wz
1af7c     1C 00 90 AD |  if_e	jmp	#LR__2402
1af80     0F 21 02 F1 | 	add	local02, local01
1af84     13 13 02 F6 | 	mov	arg01, local05
1af88     10 15 02 F6 | 	mov	arg02, local02
1af8c     12 17 02 F6 | 	mov	arg03, local04
1af90     64 DD BF FD | 	call	#__system____builtin_memmove
1af94     13 25 02 F1 | 	add	local04, local05
1af98     12 01 48 FC | 	wrbyte	#0, local04
1af9c                 | LR__2402
1af9c     13 FB 01 F6 | 	mov	result1, local05
1afa0                 | LR__2403
1afa0     A7 F0 03 F6 | 	mov	ptra, fp
1afa4     B2 00 A0 FD | 	call	#popregs_
1afa8                 | __system__Mid_S_ret
1afa8     2D 00 64 FD | 	ret
1afac                 | 
1afac                 | __system__Chr_S
1afac     01 4A 05 F6 | 	mov	COUNT_, #1
1afb0     A8 00 A0 FD | 	call	#pushregs_
1afb4     09 1F 02 F6 | 	mov	local01, arg01
1afb8     03 12 06 F6 | 	mov	arg01, #3
1afbc     D0 1B B0 FD | 	call	#__system___gc_alloc_managed
1afc0     00 FA 4D F2 | 	cmps	result1, #0 wz
1afc4     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1afc8     01 FA 05 51 |  if_ne	add	result1, #1
1afcc     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1afd0     01 FA 85 51 |  if_ne	sub	result1, #1
1afd4     A7 F0 03 F6 | 	mov	ptra, fp
1afd8     B2 00 A0 FD | 	call	#popregs_
1afdc                 | __system__Chr_S_ret
1afdc     2D 00 64 FD | 	ret
1afe0                 | 
1afe0                 | __system__Number_S
1afe0     08 4A 05 F6 | 	mov	COUNT_, #8
1afe4     A8 00 A0 FD | 	call	#pushregs_
1afe8     09 1F 02 F6 | 	mov	local01, arg01
1afec     0A 21 0A F6 | 	mov	local02, arg02 wz
1aff0     0B 23 02 F6 | 	mov	local03, arg03
1aff4     3C 00 90 5D |  if_ne	jmp	#LR__2412
1aff8     01 20 06 F6 | 	mov	local02, #1
1affc     11 25 02 F6 | 	mov	local04, local03
1b000     01 26 06 F6 | 	mov	local05, #1
1b004     97 16 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1b008                 | LR__2410
1b008     00 28 06 F6 | 	mov	local06, #0
1b00c     0F 25 1A F2 | 	cmp	local04, local01 wcz
1b010     01 28 66 E6 |  if_be	neg	local06, #1
1b014     12 27 12 F2 | 	cmp	local05, local04 wc
1b018     15 2B A2 F1 | 	subx	local07, local07
1b01c     15 29 CA F7 | 	test	local06, local07 wz
1b020     11 25 02 5D |  if_ne	qmul	local04, local03
1b024     12 27 02 56 |  if_ne	mov	local05, local04
1b028     01 20 06 51 |  if_ne	add	local02, #1
1b02c     18 24 62 5D |  if_ne	getqx	local04
1b030     D4 FF 9F 5D |  if_ne	jmp	#LR__2410
1b034                 | LR__2411
1b034                 | LR__2412
1b034     20 20 36 F3 | 	fle	local02, #32 wc
1b038     10 13 02 F6 | 	mov	arg01, local02
1b03c     02 12 06 F1 | 	add	arg01, #2
1b040     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
1b044     FD 28 02 F6 | 	mov	local06, result1
1b048     10 2B 02 F6 | 	mov	local07, local02
1b04c     14 2B 02 F1 | 	add	local07, local06
1b050     15 01 48 FC | 	wrbyte	#0, local07
1b054     97 1A 48 FB | 	callpa	#(@LR__2414-@LR__2413)>>2,fcache_load_ptr_
1b058                 | LR__2413
1b058     01 20 16 F2 | 	cmp	local02, #1 wc
1b05c     2C 00 90 CD |  if_b	jmp	#LR__2415
1b060     11 1F 12 FD | 	qdiv	local01, local03
1b064     01 20 86 F1 | 	sub	local02, #1
1b068     10 2B 02 F6 | 	mov	local07, local02
1b06c     14 2B 02 F1 | 	add	local07, local06
1b070     19 2C 62 FD | 	getqy	local08
1b074     0A 2C 16 F2 | 	cmp	local08, #10 wc
1b078     30 2C 06 C1 |  if_b	add	local08, #48
1b07c     37 2C 06 31 |  if_ae	add	local08, #55
1b080     15 2D 42 FC | 	wrbyte	local08, local07
1b084     18 1E 62 FD | 	getqx	local01
1b088     CC FF 9F FD | 	jmp	#LR__2413
1b08c                 | LR__2414
1b08c                 | LR__2415
1b08c     14 FB 01 F6 | 	mov	result1, local06
1b090     A7 F0 03 F6 | 	mov	ptra, fp
1b094     B2 00 A0 FD | 	call	#popregs_
1b098                 | __system__Number_S_ret
1b098     2D 00 64 FD | 	ret
1b09c                 | 
1b09c                 | __system__LCase_S
1b09c     07 4A 05 F6 | 	mov	COUNT_, #7
1b0a0     A8 00 A0 FD | 	call	#pushregs_
1b0a4     09 1F 02 F6 | 	mov	local01, arg01
1b0a8     09 21 02 F6 | 	mov	local02, arg01
1b0ac     97 06 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1b0b0                 | LR__2420
1b0b0     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b0b4     01 20 06 51 |  if_ne	add	local02, #1
1b0b8     F4 FF 9F 5D |  if_ne	jmp	#LR__2420
1b0bc                 | LR__2421
1b0bc     09 21 82 F1 | 	sub	local02, arg01
1b0c0     10 FB 01 F6 | 	mov	result1, local02
1b0c4     FD 20 0A F6 | 	mov	local02, result1 wz
1b0c8     41 01 00 AF 
1b0cc     F2 FA 05 A6 |  if_e	mov	result1, ##@LR__4257
1b0d0     7C 00 90 AD |  if_e	jmp	#LR__2427
1b0d4     10 13 02 F6 | 	mov	arg01, local02
1b0d8     02 12 06 F1 | 	add	arg01, #2
1b0dc     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
1b0e0     FD 22 0A F6 | 	mov	local03, result1 wz
1b0e4     64 00 90 AD |  if_e	jmp	#LR__2426
1b0e8     01 24 66 F6 | 	neg	local04, #1
1b0ec     97 26 48 FB | 	callpa	#(@LR__2425-@LR__2422)>>2,fcache_load_ptr_
1b0f0                 | LR__2422
1b0f0     01 24 06 F1 | 	add	local04, #1
1b0f4     12 27 02 F6 | 	mov	local05, local04
1b0f8     0F 27 02 F1 | 	add	local05, local01
1b0fc     13 29 C2 FA | 	rdbyte	local06, local05
1b100     41 28 56 F2 | 	cmps	local06, #65 wc
1b104     18 00 90 CD |  if_b	jmp	#LR__2423
1b108     5B 28 56 F2 | 	cmps	local06, #91 wc
1b10c     12 2B 02 C6 |  if_b	mov	local07, local04
1b110     11 2B 02 C1 |  if_b	add	local07, local03
1b114     20 28 06 C1 |  if_b	add	local06, #32
1b118     15 29 42 CC |  if_b	wrbyte	local06, local07
1b11c     0C 00 90 CD |  if_b	jmp	#LR__2424
1b120                 | LR__2423
1b120     12 2B 02 F6 | 	mov	local07, local04
1b124     11 2B 02 F1 | 	add	local07, local03
1b128     15 29 42 FC | 	wrbyte	local06, local07
1b12c                 | LR__2424
1b12c     10 29 02 F6 | 	mov	local06, local02
1b130     01 28 86 F1 | 	sub	local06, #1
1b134     14 25 0A F2 | 	cmp	local04, local06 wz
1b138     B4 FF 9F 5D |  if_ne	jmp	#LR__2422
1b13c                 | LR__2425
1b13c     11 21 02 F1 | 	add	local02, local03
1b140     10 01 48 FC | 	wrbyte	#0, local02
1b144     11 FB 01 F6 | 	mov	result1, local03
1b148     04 00 90 FD | 	jmp	#LR__2427
1b14c                 | LR__2426
1b14c     11 FB 01 F6 | 	mov	result1, local03
1b150                 | LR__2427
1b150     A7 F0 03 F6 | 	mov	ptra, fp
1b154     B2 00 A0 FD | 	call	#popregs_
1b158                 | __system__LCase_S_ret
1b158     2D 00 64 FD | 	ret
1b15c                 | 
1b15c                 | __system__LTrim_S
1b15c     05 4A 05 F6 | 	mov	COUNT_, #5
1b160     A8 00 A0 FD | 	call	#pushregs_
1b164     09 1F 02 F6 | 	mov	local01, arg01
1b168     09 21 02 F6 | 	mov	local02, arg01
1b16c     97 06 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1b170                 | LR__2430
1b170     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b174     01 20 06 51 |  if_ne	add	local02, #1
1b178     F4 FF 9F 5D |  if_ne	jmp	#LR__2430
1b17c                 | LR__2431
1b17c     09 21 82 F1 | 	sub	local02, arg01
1b180     10 FB 01 F6 | 	mov	result1, local02
1b184     FD 20 0A F6 | 	mov	local02, result1 wz
1b188     41 01 00 AF 
1b18c     F3 FA 05 A6 |  if_e	mov	result1, ##@LR__4258
1b190     7C 00 90 AD |  if_e	jmp	#LR__2436
1b194     00 22 06 F6 | 	mov	local03, #0
1b198     10 25 02 F6 | 	mov	local04, local02
1b19c                 | LR__2432
1b19c     12 23 52 F2 | 	cmps	local03, local04 wc
1b1a0     68 00 90 3D |  if_ae	jmp	#LR__2435
1b1a4     11 17 02 F6 | 	mov	arg03, local03
1b1a8     0F 17 02 F1 | 	add	arg03, local01
1b1ac     0B 17 C2 FA | 	rdbyte	arg03, arg03
1b1b0     20 16 0E F2 | 	cmp	arg03, #32 wz
1b1b4     4C 00 90 AD |  if_e	jmp	#LR__2434
1b1b8     10 13 02 F6 | 	mov	arg01, local02
1b1bc     11 13 82 F1 | 	sub	arg01, local03
1b1c0     02 12 06 F1 | 	add	arg01, #2
1b1c4     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
1b1c8     FD 26 0A F6 | 	mov	local05, result1 wz
1b1cc     2C 00 90 AD |  if_e	jmp	#LR__2433
1b1d0     11 15 02 F6 | 	mov	arg02, local03
1b1d4     0F 15 02 F1 | 	add	arg02, local01
1b1d8     10 17 02 F6 | 	mov	arg03, local02
1b1dc     11 17 82 F1 | 	sub	arg03, local03
1b1e0     13 13 02 F6 | 	mov	arg01, local05
1b1e4     10 DB BF FD | 	call	#__system____builtin_memmove
1b1e8     11 21 82 F1 | 	sub	local02, local03
1b1ec     13 21 02 F1 | 	add	local02, local05
1b1f0     10 01 48 FC | 	wrbyte	#0, local02
1b1f4     13 FB 01 F6 | 	mov	result1, local05
1b1f8     14 00 90 FD | 	jmp	#LR__2436
1b1fc                 | LR__2433
1b1fc     13 FB 01 F6 | 	mov	result1, local05
1b200     0C 00 90 FD | 	jmp	#LR__2436
1b204                 | LR__2434
1b204     01 22 06 F1 | 	add	local03, #1
1b208     90 FF 9F FD | 	jmp	#LR__2432
1b20c                 | LR__2435
1b20c     0F FB 01 F6 | 	mov	result1, local01
1b210                 | LR__2436
1b210     A7 F0 03 F6 | 	mov	ptra, fp
1b214     B2 00 A0 FD | 	call	#popregs_
1b218                 | __system__LTrim_S_ret
1b218     2D 00 64 FD | 	ret
1b21c                 | 
1b21c                 | __system__RTrim_S
1b21c     04 4A 05 F6 | 	mov	COUNT_, #4
1b220     A8 00 A0 FD | 	call	#pushregs_
1b224     09 1F 02 F6 | 	mov	local01, arg01
1b228     09 21 02 F6 | 	mov	local02, arg01
1b22c     97 06 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1b230                 | LR__2440
1b230     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b234     01 20 06 51 |  if_ne	add	local02, #1
1b238     F4 FF 9F 5D |  if_ne	jmp	#LR__2440
1b23c                 | LR__2441
1b23c     09 21 82 F1 | 	sub	local02, arg01
1b240     10 FB 01 F6 | 	mov	result1, local02
1b244     FD 20 0A F6 | 	mov	local02, result1 wz
1b248     41 01 00 AF 
1b24c     F4 FA 05 A6 |  if_e	mov	result1, ##@LR__4259
1b250     74 00 90 AD |  if_e	jmp	#LR__2445
1b254     10 23 02 F6 | 	mov	local03, local02
1b258     01 22 86 F1 | 	sub	local03, #1
1b25c                 | LR__2442
1b25c     11 15 02 F6 | 	mov	arg02, local03
1b260     0F 15 02 F1 | 	add	arg02, local01
1b264     0A 21 C2 FA | 	rdbyte	local02, arg02
1b268     20 20 0E F2 | 	cmp	local02, #32 wz
1b26c     44 00 90 AD |  if_e	jmp	#LR__2444
1b270     11 13 02 F6 | 	mov	arg01, local03
1b274     02 12 06 F1 | 	add	arg01, #2
1b278     14 19 B0 FD | 	call	#__system___gc_alloc_managed
1b27c     FD 24 0A F6 | 	mov	local04, result1 wz
1b280     28 00 90 AD |  if_e	jmp	#LR__2443
1b284     11 17 02 F6 | 	mov	arg03, local03
1b288     01 16 06 F1 | 	add	arg03, #1
1b28c     12 13 02 F6 | 	mov	arg01, local04
1b290     0F 15 02 F6 | 	mov	arg02, local01
1b294     60 DA BF FD | 	call	#__system____builtin_memmove
1b298     01 22 06 F1 | 	add	local03, #1
1b29c     12 23 02 F1 | 	add	local03, local04
1b2a0     11 01 48 FC | 	wrbyte	#0, local03
1b2a4     12 FB 01 F6 | 	mov	result1, local04
1b2a8     1C 00 90 FD | 	jmp	#LR__2445
1b2ac                 | LR__2443
1b2ac     12 FB 01 F6 | 	mov	result1, local04
1b2b0     14 00 90 FD | 	jmp	#LR__2445
1b2b4                 | LR__2444
1b2b4     01 22 86 F1 | 	sub	local03, #1
1b2b8     00 22 56 F2 | 	cmps	local03, #0 wc
1b2bc     9C FF 9F 3D |  if_ae	jmp	#LR__2442
1b2c0     41 01 00 FF 
1b2c4     F5 FA 05 F6 | 	mov	result1, ##@LR__4260
1b2c8                 | LR__2445
1b2c8     A7 F0 03 F6 | 	mov	ptra, fp
1b2cc     B2 00 A0 FD | 	call	#popregs_
1b2d0                 | __system__RTrim_S_ret
1b2d0     2D 00 64 FD | 	ret
1b2d4                 | 
1b2d4                 | __system__Instr
1b2d4     07 4A 05 F6 | 	mov	COUNT_, #7
1b2d8     A8 00 A0 FD | 	call	#pushregs_
1b2dc     09 1F 02 F6 | 	mov	local01, arg01
1b2e0     0A 21 02 F6 | 	mov	local02, arg02
1b2e4     0B 23 02 F6 | 	mov	local03, arg03
1b2e8     11 13 02 F6 | 	mov	arg01, local03
1b2ec     09 25 02 F6 | 	mov	local04, arg01
1b2f0     97 06 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1b2f4                 | LR__2450
1b2f4     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b2f8     01 24 06 51 |  if_ne	add	local04, #1
1b2fc     F4 FF 9F 5D |  if_ne	jmp	#LR__2450
1b300                 | LR__2451
1b300     09 25 82 F1 | 	sub	local04, arg01
1b304     12 27 02 F6 | 	mov	local05, local04
1b308     10 13 02 F6 | 	mov	arg01, local02
1b30c     09 25 02 F6 | 	mov	local04, arg01
1b310     97 06 48 FB | 	callpa	#(@LR__2453-@LR__2452)>>2,fcache_load_ptr_
1b314                 | LR__2452
1b314     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b318     01 24 06 51 |  if_ne	add	local04, #1
1b31c     F4 FF 9F 5D |  if_ne	jmp	#LR__2452
1b320                 | LR__2453
1b320     09 25 82 F1 | 	sub	local04, arg01
1b324     12 FB 01 F6 | 	mov	result1, local04
1b328     FD 18 0A F6 | 	mov	arg04, result1 wz
1b32c     00 FA 05 A6 |  if_e	mov	result1, #0
1b330     98 00 90 AD |  if_e	jmp	#LR__2457
1b334     00 26 0E F2 | 	cmp	local05, #0 wz
1b338     00 FA 05 A6 |  if_e	mov	result1, #0
1b33c     8C 00 90 AD |  if_e	jmp	#LR__2457
1b340     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
1b344     00 FA 05 16 |  if_a	mov	result1, #0
1b348     80 00 90 1D |  if_a	jmp	#LR__2457
1b34c     01 1E 56 F2 | 	cmps	local01, #1 wc
1b350     01 1E 06 C6 |  if_b	mov	local01, #1
1b354     11 29 C2 FA | 	rdbyte	local06, local03
1b358     01 26 0E F2 | 	cmp	local05, #1 wz
1b35c     18 00 90 5D |  if_ne	jmp	#LR__2454
1b360     10 13 02 F6 | 	mov	arg01, local02
1b364     14 15 02 F6 | 	mov	arg02, local06
1b368     0F 17 02 F6 | 	mov	arg03, local01
1b36c     00 18 06 F6 | 	mov	arg04, #0
1b370     B8 33 B0 FD | 	call	#__system____ScanForChar
1b374     54 00 90 FD | 	jmp	#LR__2457
1b378                 | LR__2454
1b378     0F 2B 02 F6 | 	mov	local07, local01
1b37c                 | LR__2455
1b37c     10 13 02 F6 | 	mov	arg01, local02
1b380     14 15 02 F6 | 	mov	arg02, local06
1b384     15 17 02 F6 | 	mov	arg03, local07
1b388     00 18 06 F6 | 	mov	arg04, #0
1b38c     9C 33 B0 FD | 	call	#__system____ScanForChar
1b390     FD 2A 0A F6 | 	mov	local07, result1 wz
1b394     30 00 90 AD |  if_e	jmp	#LR__2456
1b398     13 17 02 F6 | 	mov	arg03, local05
1b39c     10 13 02 F6 | 	mov	arg01, local02
1b3a0     15 15 02 F6 | 	mov	arg02, local07
1b3a4     58 FB BF FD | 	call	#__system__Mid_S
1b3a8     FD 12 02 F6 | 	mov	arg01, result1
1b3ac     11 15 02 F6 | 	mov	arg02, local03
1b3b0     4C DA BF FD | 	call	#__system___string_cmp
1b3b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b3b8     15 FB 01 A6 |  if_e	mov	result1, local07
1b3bc     0C 00 90 AD |  if_e	jmp	#LR__2457
1b3c0     13 2B 02 F1 | 	add	local07, local05
1b3c4     B4 FF 9F FD | 	jmp	#LR__2455
1b3c8                 | LR__2456
1b3c8     00 FA 05 F6 | 	mov	result1, #0
1b3cc                 | LR__2457
1b3cc     A7 F0 03 F6 | 	mov	ptra, fp
1b3d0     B2 00 A0 FD | 	call	#popregs_
1b3d4                 | __system__Instr_ret
1b3d4     2D 00 64 FD | 	ret
1b3d8                 | 
1b3d8                 | __system___strerror
1b3d8     00 12 56 F2 | 	cmps	arg01, #0 wc
1b3dc     08 00 90 CD |  if_b	jmp	#LR__2460
1b3e0     1A 12 56 F2 | 	cmps	arg01, #26 wc
1b3e4     04 00 90 CD |  if_b	jmp	#LR__2461
1b3e8                 | LR__2460
1b3e8     19 12 06 F6 | 	mov	arg01, #25
1b3ec                 | LR__2461
1b3ec     02 12 66 F0 | 	shl	arg01, #2
1b3f0     01 00 00 FF 
1b3f4     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
1b3f8     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1b3fc     09 FB 01 FB | 	rdlong	result1, arg01
1b400     01 00 00 FF 
1b404     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
1b408                 | __system___strerror_ret
1b408     2D 00 64 FD | 	ret
1b40c                 | 
1b40c                 | __system___int64_shl
1b40c     20 16 CE F7 | 	test	arg03, #32 wz
1b410     09 15 02 56 |  if_ne	mov	arg02, arg01
1b414     00 12 06 56 |  if_ne	mov	arg01, #0
1b418     1F 16 CE F7 | 	test	arg03, #31 wz
1b41c     18 00 90 AD |  if_e	jmp	#LR__2470
1b420     0B 15 62 F0 | 	shl	arg02, arg03
1b424     09 FB 01 F6 | 	mov	result1, arg01
1b428     0B FD 61 F6 | 	neg	result2, arg03
1b42c     FE FA 41 F0 | 	shr	result1, result2
1b430     FD 14 42 F5 | 	or	arg02, result1
1b434     0B 13 62 F0 | 	shl	arg01, arg03
1b438                 | LR__2470
1b438     0A FD 01 F6 | 	mov	result2, arg02
1b43c     09 FB 01 F6 | 	mov	result1, arg01
1b440                 | __system___int64_shl_ret
1b440     2D 00 64 FD | 	ret
1b444                 | 
1b444                 | __system___usepins
1b444     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b448     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b44c     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
1b450     00 13 CA F7 | 	test	arg01, _var01 wz
1b454     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
1b458     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1b45c     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
1b460     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1b464     00 FA 05 56 |  if_ne	mov	result1, #0
1b468     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1b46c     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b470     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1b474     09 03 42 F5 | 	or	_var02, arg01
1b478     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1b47c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b480     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1b484     0A 03 42 F5 | 	or	_var02, arg02
1b488     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1b48c     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1b490     01 FA 65 F6 | 	neg	result1, #1
1b494                 | __system___usepins_ret
1b494     2D 00 64 FD | 	ret
1b498                 | 
1b498                 | __system___freepins
1b498     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b49c     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b4a0     09 01 22 F5 | 	andn	_var01, arg01
1b4a4     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1b4a8     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b4ac     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b4b0     0A 01 22 F5 | 	andn	_var01, arg02
1b4b4     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1b4b8     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1b4bc                 | __system___freepins_ret
1b4bc     2D 00 64 FD | 	ret
1b4c0                 | 
1b4c0                 | __system___float_fromuns
1b4c0     09 17 0A F6 | 	mov	arg03, arg01 wz
1b4c4     0B FB 01 A6 |  if_e	mov	result1, arg03
1b4c8     24 00 90 AD |  if_e	jmp	#LR__2480
1b4cc     0B 15 92 F7 | 	encod	arg02, arg03 wc
1b4d0     01 14 06 C1 |  if_b	add	arg02, #1
1b4d4     01 14 86 F1 | 	sub	arg02, #1
1b4d8     1F 12 06 F6 | 	mov	arg01, #31
1b4dc     0A 13 82 F1 | 	sub	arg01, arg02
1b4e0     09 17 62 F0 | 	shl	arg03, arg01
1b4e4     02 16 46 F0 | 	shr	arg03, #2
1b4e8     00 12 06 F6 | 	mov	arg01, #0
1b4ec     4C 09 B0 FD | 	call	#__system___float_Pack
1b4f0                 | LR__2480
1b4f0                 | __system___float_fromuns_ret
1b4f0     2D 00 64 FD | 	ret
1b4f4                 | 
1b4f4                 | __system___float_add
1b4f4     0F 4A 05 F6 | 	mov	COUNT_, #15
1b4f8     A8 00 A0 FD | 	call	#pushregs_
1b4fc     09 1F 02 F6 | 	mov	local01, arg01
1b500     0A 21 02 F6 | 	mov	local02, arg02
1b504     00 22 06 F6 | 	mov	local03, #0
1b508     0F 25 02 F6 | 	mov	local04, local01
1b50c     12 27 02 F6 | 	mov	local05, local04
1b510     16 26 46 F7 | 	zerox	local05, #22
1b514     12 29 02 F6 | 	mov	local06, local04
1b518     01 28 66 F0 | 	shl	local06, #1
1b51c     18 28 46 F0 | 	shr	local06, #24
1b520     1F 24 46 F0 | 	shr	local04, #31
1b524     10 13 02 F6 | 	mov	arg01, local02
1b528     09 FB 01 F6 | 	mov	result1, arg01
1b52c     FD 2A 02 F6 | 	mov	local07, result1
1b530     15 2D 02 F6 | 	mov	local08, local07
1b534     16 2C 46 F7 | 	zerox	local08, #22
1b538     15 2F 02 F6 | 	mov	local09, local07
1b53c     01 2E 66 F0 | 	shl	local09, #1
1b540     18 2E 46 F0 | 	shr	local09, #24
1b544     17 31 02 F6 | 	mov	local10, local09
1b548     1F 2A 46 F0 | 	shr	local07, #31
1b54c     00 32 06 F6 | 	mov	local11, #0
1b550     00 34 06 F6 | 	mov	local12, #0
1b554     18 29 12 F2 | 	cmp	local06, local10 wc
1b558     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1b55c     2C 00 90 1D |  if_a	jmp	#LR__2490
1b560     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1b564     24 00 90 3D |  if_ae	jmp	#LR__2490
1b568     13 37 02 F6 | 	mov	local13, local05
1b56c     16 27 02 F6 | 	mov	local05, local08
1b570     1B 2D 02 F6 | 	mov	local08, local13
1b574     14 37 02 F6 | 	mov	local13, local06
1b578     18 29 02 F6 | 	mov	local06, local10
1b57c     1B 31 02 F6 | 	mov	local10, local13
1b580     12 37 02 F6 | 	mov	local13, local04
1b584     15 25 02 F6 | 	mov	local04, local07
1b588     1B 2B 02 F6 | 	mov	local07, local13
1b58c                 | LR__2490
1b58c     FF 28 0E F2 | 	cmp	local06, #255 wz
1b590     70 01 90 AD |  if_e	jmp	#LR__2505
1b594     00 28 0E F2 | 	cmp	local06, #0 wz
1b598     AC 01 90 AD |  if_e	jmp	#LR__2507
1b59c     17 26 26 F4 | 	bith	local05, #23
1b5a0                 | LR__2491
1b5a0     00 30 0E F2 | 	cmp	local10, #0 wz
1b5a4     F0 01 90 AD |  if_e	jmp	#LR__2511
1b5a8     17 2C 26 F4 | 	bith	local08, #23
1b5ac                 | LR__2492
1b5ac     7F 28 86 F1 | 	sub	local06, #127
1b5b0     7F 30 86 F1 | 	sub	local10, #127
1b5b4     14 39 02 F6 | 	mov	local14, local06
1b5b8     18 39 82 F1 | 	sub	local14, local10
1b5bc     97 14 48 FB | 	callpa	#(@LR__2494-@LR__2493)>>2,fcache_load_ptr_
1b5c0                 | LR__2493
1b5c0     20 38 56 F2 | 	cmps	local14, #32 wc
1b5c4     20 00 90 CD |  if_b	jmp	#LR__2495
1b5c8     16 2F 02 F6 | 	mov	local09, local08
1b5cc     00 32 0E F2 | 	cmp	local11, #0 wz
1b5d0     6F 32 62 FD | 	wrnz	local11
1b5d4     19 2F 42 F5 | 	or	local09, local11
1b5d8     17 33 02 F6 | 	mov	local11, local09
1b5dc     00 2C 06 F6 | 	mov	local08, #0
1b5e0     20 38 86 F1 | 	sub	local14, #32
1b5e4     D8 FF 9F FD | 	jmp	#LR__2493
1b5e8                 | LR__2494
1b5e8                 | LR__2495
1b5e8     00 38 0E F2 | 	cmp	local14, #0 wz
1b5ec     38 00 90 AD |  if_e	jmp	#LR__2496
1b5f0     16 37 02 F6 | 	mov	local13, local08
1b5f4     20 30 06 F6 | 	mov	local10, #32
1b5f8     1C 31 82 F1 | 	sub	local10, local14
1b5fc     18 37 62 F0 | 	shl	local13, local10
1b600     19 31 02 F6 | 	mov	local10, local11
1b604     20 2E 06 F6 | 	mov	local09, #32
1b608     1C 2F 82 F1 | 	sub	local09, local14
1b60c     17 31 6A F0 | 	shl	local10, local09 wz
1b610     1C 33 42 F0 | 	shr	local11, local14
1b614     1C 2D 42 F0 | 	shr	local08, local14
1b618     1B 33 42 F5 | 	or	local11, local13
1b61c     00 3A 06 F6 | 	mov	local15, #0
1b620     01 3A 06 56 |  if_ne	mov	local15, #1
1b624     1D 33 42 F5 | 	or	local11, local15
1b628                 | LR__2496
1b628     12 3B 02 F6 | 	mov	local15, local04
1b62c     15 3B 62 F5 | 	xor	local15, local07
1b630     01 3A CE F7 | 	test	local15, #1 wz
1b634     18 00 90 AD |  if_e	jmp	#LR__2497
1b638     16 2D 22 F6 | 	not	local08, local08
1b63c     19 33 22 F6 | 	not	local11, local11
1b640     01 32 0E F1 | 	add	local11, #1 wz
1b644     00 3A 06 F6 | 	mov	local15, #0
1b648     01 3A 06 A6 |  if_e	mov	local15, #1
1b64c     1D 2D 02 F1 | 	add	local08, local15
1b650                 | LR__2497
1b650     19 35 12 F1 | 	add	local12, local11 wc
1b654     16 27 22 F1 | 	addx	local05, local08
1b658     00 26 56 F2 | 	cmps	local05, #0 wc
1b65c     1C 00 90 3D |  if_ae	jmp	#LR__2498
1b660     01 24 66 F5 | 	xor	local04, #1
1b664     13 27 22 F6 | 	not	local05, local05
1b668     1A 35 22 F6 | 	not	local12, local12
1b66c     01 34 0E F1 | 	add	local12, #1 wz
1b670     00 3A 06 F6 | 	mov	local15, #0
1b674     01 3A 06 A6 |  if_e	mov	local15, #1
1b678     1D 27 02 F1 | 	add	local05, local15
1b67c                 | LR__2498
1b67c     00 80 00 FF 
1b680     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1b684     28 00 90 CD |  if_b	jmp	#LR__2499
1b688     01 28 06 F1 | 	add	local06, #1
1b68c     1A 39 02 F6 | 	mov	local14, local12
1b690     01 38 06 F5 | 	and	local14, #1
1b694     01 34 46 F0 | 	shr	local12, #1
1b698     13 3B 02 F6 | 	mov	local15, local05
1b69c     1F 3A 66 F0 | 	shl	local15, #31
1b6a0     1D 35 42 F5 | 	or	local12, local15
1b6a4     1C 35 42 F5 | 	or	local12, local14
1b6a8     01 26 46 F0 | 	shr	local05, #1
1b6ac     3C 00 90 FD | 	jmp	#LR__2504
1b6b0                 | LR__2499
1b6b0     00 40 00 FF 
1b6b4     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b6b8     30 00 90 3D |  if_ae	jmp	#LR__2503
1b6bc     00 26 0E F2 | 	cmp	local05, #0 wz
1b6c0     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1b6c4     08 24 46 A5 |  if_e	or	local04, #8
1b6c8     01 24 26 A5 |  if_e	andn	local04, #1
1b6cc     1C 00 90 AD |  if_e	jmp	#LR__2502
1b6d0                 | LR__2500
1b6d0     00 40 00 FF 
1b6d4     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b6d8     10 00 90 3D |  if_ae	jmp	#LR__2501
1b6dc     1A 35 12 F1 | 	add	local12, local12 wc
1b6e0     13 27 22 F1 | 	addx	local05, local05
1b6e4     01 28 86 F1 | 	sub	local06, #1
1b6e8     E4 FF 9F FD | 	jmp	#LR__2500
1b6ec                 | LR__2501
1b6ec                 | LR__2502
1b6ec                 | LR__2503
1b6ec                 | LR__2504
1b6ec     13 13 02 F6 | 	mov	arg01, local05
1b6f0     1A 15 02 F6 | 	mov	arg02, local12
1b6f4     14 17 02 F6 | 	mov	arg03, local06
1b6f8     12 19 02 F6 | 	mov	arg04, local04
1b6fc     70 34 B0 FD | 	call	#__system__pack_0489
1b700     DC 00 90 FD | 	jmp	#LR__2515
1b704                 | LR__2505
1b704     FF 30 0E F2 | 	cmp	local10, #255 wz
1b708     10 00 90 5D |  if_ne	jmp	#LR__2506
1b70c     12 2B 0A F2 | 	cmp	local07, local04 wz
1b710     00 F8 3F 5F 
1b714     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b718     C4 00 90 5D |  if_ne	jmp	#LR__2515
1b71c                 | LR__2506
1b71c     00 26 0E F2 | 	cmp	local05, #0 wz
1b720     00 F8 3F 5F 
1b724     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b728     B4 00 90 5D |  if_ne	jmp	#LR__2515
1b72c     1A 15 02 F6 | 	mov	arg02, local12
1b730     14 17 02 F6 | 	mov	arg03, local06
1b734     12 19 02 F6 | 	mov	arg04, local04
1b738     02 18 46 F5 | 	or	arg04, #2
1b73c     13 13 02 F6 | 	mov	arg01, local05
1b740     2C 34 B0 FD | 	call	#__system__pack_0489
1b744     98 00 90 FD | 	jmp	#LR__2515
1b748                 | LR__2507
1b748     00 26 0E F2 | 	cmp	local05, #0 wz
1b74c     28 00 90 AD |  if_e	jmp	#LR__2510
1b750     01 26 66 F0 | 	shl	local05, #1
1b754     97 0E 48 FB | 	callpa	#(@LR__2509-@LR__2508)>>2,fcache_load_ptr_
1b758                 | LR__2508
1b758     00 40 00 FF 
1b75c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b760     14 3B 02 C6 |  if_b	mov	local15, local06
1b764     01 3A 86 C1 |  if_b	sub	local15, #1
1b768     1D 29 02 C6 |  if_b	mov	local06, local15
1b76c     01 26 66 C0 |  if_b	shl	local05, #1
1b770     E4 FF 9F CD |  if_b	jmp	#LR__2508
1b774                 | LR__2509
1b774     28 FE 9F FD | 	jmp	#LR__2491
1b778                 | LR__2510
1b778     15 25 02 F5 | 	and	local04, local07
1b77c     12 19 02 F6 | 	mov	arg04, local04
1b780     08 18 46 F5 | 	or	arg04, #8
1b784     00 12 06 F6 | 	mov	arg01, #0
1b788     00 14 06 F6 | 	mov	arg02, #0
1b78c     00 16 06 F6 | 	mov	arg03, #0
1b790     DC 33 B0 FD | 	call	#__system__pack_0489
1b794     48 00 90 FD | 	jmp	#LR__2515
1b798                 | LR__2511
1b798     00 2C 0E F2 | 	cmp	local08, #0 wz
1b79c     28 00 90 AD |  if_e	jmp	#LR__2514
1b7a0     01 2C 66 F0 | 	shl	local08, #1
1b7a4     97 0E 48 FB | 	callpa	#(@LR__2513-@LR__2512)>>2,fcache_load_ptr_
1b7a8                 | LR__2512
1b7a8     00 40 00 FF 
1b7ac     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1b7b0     18 3B 02 C6 |  if_b	mov	local15, local10
1b7b4     01 3A 86 C1 |  if_b	sub	local15, #1
1b7b8     1D 31 02 C6 |  if_b	mov	local10, local15
1b7bc     01 2C 66 C0 |  if_b	shl	local08, #1
1b7c0     E4 FF 9F CD |  if_b	jmp	#LR__2512
1b7c4                 | LR__2513
1b7c4     E4 FD 9F FD | 	jmp	#LR__2492
1b7c8                 | LR__2514
1b7c8     7F 28 86 F1 | 	sub	local06, #127
1b7cc     13 13 02 F6 | 	mov	arg01, local05
1b7d0     1A 15 02 F6 | 	mov	arg02, local12
1b7d4     14 17 02 F6 | 	mov	arg03, local06
1b7d8     12 19 02 F6 | 	mov	arg04, local04
1b7dc     90 33 B0 FD | 	call	#__system__pack_0489
1b7e0                 | LR__2515
1b7e0     A7 F0 03 F6 | 	mov	ptra, fp
1b7e4     B2 00 A0 FD | 	call	#popregs_
1b7e8                 | __system___float_add_ret
1b7e8     2D 00 64 FD | 	ret
1b7ec                 | 
1b7ec                 | __system___float_sqrt
1b7ec     04 4A 05 F6 | 	mov	COUNT_, #4
1b7f0     A8 00 A0 FD | 	call	#pushregs_
1b7f4     09 1F 02 F6 | 	mov	local01, arg01
1b7f8     09 FB 01 F6 | 	mov	result1, arg01
1b7fc     FD 20 02 F6 | 	mov	local02, result1
1b800     10 23 02 F6 | 	mov	local03, local02
1b804     16 22 46 F7 | 	zerox	local03, #22
1b808     10 25 02 F6 | 	mov	local04, local02
1b80c     01 24 66 F0 | 	shl	local04, #1
1b810     18 24 4E F0 | 	shr	local04, #24 wz
1b814     1F 20 46 F0 | 	shr	local02, #31
1b818     70 00 90 AD |  if_e	jmp	#LR__2521
1b81c     17 22 26 F4 | 	bith	local03, #23
1b820                 | LR__2520
1b820     00 20 0E F2 | 	cmp	local02, #0 wz
1b824     00 F8 3F 5F 
1b828     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b82c     88 00 90 5D |  if_ne	jmp	#LR__2524
1b830     FF 24 0E F2 | 	cmp	local04, #255 wz
1b834     0F FB 01 A6 |  if_e	mov	result1, local01
1b838     7C 00 90 AD |  if_e	jmp	#LR__2524
1b83c     7F 24 86 F1 | 	sub	local04, #127
1b840     01 24 CE F7 | 	test	local04, #1 wz
1b844     01 22 66 50 |  if_ne	shl	local03, #1
1b848     05 22 66 F0 | 	shl	local03, #5
1b84c     11 01 38 FD | 	qsqrt	#0, local03
1b850     01 24 86 51 |  if_ne	sub	local04, #1
1b854     12 25 52 F6 | 	abs	local04, local04 wc
1b858     01 24 46 F0 | 	shr	local04, #1
1b85c     12 17 82 F6 | 	negc	arg03, local04
1b860     10 19 02 F6 | 	mov	arg04, local02
1b864     18 12 62 FD | 	getqx	arg01
1b868     09 15 02 F6 | 	mov	arg02, arg01
1b86c     19 14 66 F0 | 	shl	arg02, #25
1b870     07 12 46 F0 | 	shr	arg01, #7
1b874     00 80 00 FF 
1b878     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1b87c     01 16 06 31 |  if_ae	add	arg03, #1
1b880     01 12 46 30 |  if_ae	shr	arg01, #1
1b884     E8 32 B0 FD | 	call	#__system__pack_0489
1b888     2C 00 90 FD | 	jmp	#LR__2524
1b88c                 | LR__2521
1b88c     00 22 0E F2 | 	cmp	local03, #0 wz
1b890     0F FB 01 A6 |  if_e	mov	result1, local01
1b894     20 00 90 AD |  if_e	jmp	#LR__2524
1b898     01 22 66 F0 | 	shl	local03, #1
1b89c     97 0A 48 FB | 	callpa	#(@LR__2523-@LR__2522)>>2,fcache_load_ptr_
1b8a0                 | LR__2522
1b8a0     00 40 00 FF 
1b8a4     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1b8a8     01 24 86 C1 |  if_b	sub	local04, #1
1b8ac     01 22 66 C0 |  if_b	shl	local03, #1
1b8b0     EC FF 9F CD |  if_b	jmp	#LR__2522
1b8b4                 | LR__2523
1b8b4     68 FF 9F FD | 	jmp	#LR__2520
1b8b8                 | LR__2524
1b8b8     A7 F0 03 F6 | 	mov	ptra, fp
1b8bc     B2 00 A0 FD | 	call	#popregs_
1b8c0                 | __system___float_sqrt_ret
1b8c0     2D 00 64 FD | 	ret
1b8c4                 | 
1b8c4                 | __system___float_mul
1b8c4     0B 4A 05 F6 | 	mov	COUNT_, #11
1b8c8     A8 00 A0 FD | 	call	#pushregs_
1b8cc     09 1F 02 F6 | 	mov	local01, arg01
1b8d0     0A 21 02 F6 | 	mov	local02, arg02
1b8d4     0F 23 02 F6 | 	mov	local03, local01
1b8d8     11 25 02 F6 | 	mov	local04, local03
1b8dc     16 24 46 F7 | 	zerox	local04, #22
1b8e0     11 27 02 F6 | 	mov	local05, local03
1b8e4     01 26 66 F0 | 	shl	local05, #1
1b8e8     18 26 46 F0 | 	shr	local05, #24
1b8ec     1F 22 46 F0 | 	shr	local03, #31
1b8f0     10 FB 01 F6 | 	mov	result1, local02
1b8f4     FD 28 02 F6 | 	mov	local06, result1
1b8f8     14 2B 02 F6 | 	mov	local07, local06
1b8fc     16 2A 46 F7 | 	zerox	local07, #22
1b900     14 2D 02 F6 | 	mov	local08, local06
1b904     01 2C 66 F0 | 	shl	local08, #1
1b908     18 2C 46 F0 | 	shr	local08, #24
1b90c     1F 28 46 F0 | 	shr	local06, #31
1b910     14 23 62 F5 | 	xor	local03, local06
1b914     FF 26 0E F2 | 	cmp	local05, #255 wz
1b918     90 00 90 AD |  if_e	jmp	#LR__2533
1b91c     FF 2C 0E F2 | 	cmp	local08, #255 wz
1b920     D8 00 90 AD |  if_e	jmp	#LR__2535
1b924     00 26 0E F2 | 	cmp	local05, #0 wz
1b928     0C 01 90 AD |  if_e	jmp	#LR__2536
1b92c     17 24 26 F4 | 	bith	local04, #23
1b930                 | LR__2530
1b930     00 2C 0E F2 | 	cmp	local08, #0 wz
1b934     44 01 90 AD |  if_e	jmp	#LR__2540
1b938     17 2A 26 F4 | 	bith	local07, #23
1b93c                 | LR__2531
1b93c     12 21 02 F6 | 	mov	local02, local04
1b940     04 20 66 F0 | 	shl	local02, #4
1b944     15 29 02 F6 | 	mov	local06, local07
1b948     05 28 66 F0 | 	shl	local06, #5
1b94c     14 21 02 FD | 	qmul	local02, local06
1b950     16 27 02 F1 | 	add	local05, local08
1b954     FE 26 86 F1 | 	sub	local05, #254
1b958     13 2F 02 F6 | 	mov	local09, local05
1b95c     04 24 66 F0 | 	shl	local04, #4
1b960     05 2A 66 F0 | 	shl	local07, #5
1b964     18 30 62 FD | 	getqx	local10
1b968     15 25 02 FD | 	qmul	local04, local07
1b96c     19 32 62 FD | 	getqy	local11
1b970     00 80 00 FF 
1b974     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1b978     18 00 90 CD |  if_b	jmp	#LR__2532
1b97c     01 2E 06 F1 | 	add	local09, #1
1b980     01 30 46 F0 | 	shr	local10, #1
1b984     19 2D 02 F6 | 	mov	local08, local11
1b988     1F 2C 66 F0 | 	shl	local08, #31
1b98c     16 31 42 F5 | 	or	local10, local08
1b990     01 32 46 F0 | 	shr	local11, #1
1b994                 | LR__2532
1b994     19 13 02 F6 | 	mov	arg01, local11
1b998     18 15 02 F6 | 	mov	arg02, local10
1b99c     17 17 02 F6 | 	mov	arg03, local09
1b9a0     11 19 02 F6 | 	mov	arg04, local03
1b9a4     C8 31 B0 FD | 	call	#__system__pack_0489
1b9a8     10 01 90 FD | 	jmp	#LR__2544
1b9ac                 | LR__2533
1b9ac     00 24 0E F2 | 	cmp	local04, #0 wz
1b9b0     0F FB 01 56 |  if_ne	mov	result1, local01
1b9b4     04 01 90 5D |  if_ne	jmp	#LR__2544
1b9b8     FF 2C 56 F2 | 	cmps	local08, #255 wc
1b9bc     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1b9c0     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1b9c4     18 00 90 4D |  if_c_and_nz	jmp	#LR__2534
1b9c8     00 F8 3F CF 
1b9cc     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1b9d0     E8 00 90 CD |  if_b	jmp	#LR__2544
1b9d4     00 2A 0E F2 | 	cmp	local07, #0 wz
1b9d8     10 FB 01 56 |  if_ne	mov	result1, local02
1b9dc     DC 00 90 5D |  if_ne	jmp	#LR__2544
1b9e0                 | LR__2534
1b9e0     02 22 46 F5 | 	or	local03, #2
1b9e4     00 12 06 F6 | 	mov	arg01, #0
1b9e8     00 14 06 F6 | 	mov	arg02, #0
1b9ec     13 17 02 F6 | 	mov	arg03, local05
1b9f0     11 19 02 F6 | 	mov	arg04, local03
1b9f4     78 31 B0 FD | 	call	#__system__pack_0489
1b9f8     C0 00 90 FD | 	jmp	#LR__2544
1b9fc                 | LR__2535
1b9fc     00 26 0E F2 | 	cmp	local05, #0 wz
1ba00     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1ba04     00 F8 3F AF 
1ba08     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1ba0c     AC 00 90 AD |  if_e	jmp	#LR__2544
1ba10     00 2A 0E F2 | 	cmp	local07, #0 wz
1ba14     10 FB 01 56 |  if_ne	mov	result1, local02
1ba18     A0 00 90 5D |  if_ne	jmp	#LR__2544
1ba1c     16 17 02 F6 | 	mov	arg03, local08
1ba20     11 19 02 F6 | 	mov	arg04, local03
1ba24     02 18 46 F5 | 	or	arg04, #2
1ba28     00 12 06 F6 | 	mov	arg01, #0
1ba2c     00 14 06 F6 | 	mov	arg02, #0
1ba30     3C 31 B0 FD | 	call	#__system__pack_0489
1ba34     84 00 90 FD | 	jmp	#LR__2544
1ba38                 | LR__2536
1ba38     00 24 0E F2 | 	cmp	local04, #0 wz
1ba3c     20 00 90 AD |  if_e	jmp	#LR__2539
1ba40     01 24 66 F0 | 	shl	local04, #1
1ba44     97 0A 48 FB | 	callpa	#(@LR__2538-@LR__2537)>>2,fcache_load_ptr_
1ba48                 | LR__2537
1ba48     00 40 00 FF 
1ba4c     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1ba50     01 26 86 C1 |  if_b	sub	local05, #1
1ba54     01 24 66 C0 |  if_b	shl	local04, #1
1ba58     EC FF 9F CD |  if_b	jmp	#LR__2537
1ba5c                 | LR__2538
1ba5c     D0 FE 9F FD | 	jmp	#LR__2530
1ba60                 | LR__2539
1ba60     08 22 46 F5 | 	or	local03, #8
1ba64     00 12 06 F6 | 	mov	arg01, #0
1ba68     00 14 06 F6 | 	mov	arg02, #0
1ba6c     00 16 06 F6 | 	mov	arg03, #0
1ba70     11 19 02 F6 | 	mov	arg04, local03
1ba74     F8 30 B0 FD | 	call	#__system__pack_0489
1ba78     40 00 90 FD | 	jmp	#LR__2544
1ba7c                 | LR__2540
1ba7c     00 2A 0E F2 | 	cmp	local07, #0 wz
1ba80     20 00 90 AD |  if_e	jmp	#LR__2543
1ba84     01 2A 66 F0 | 	shl	local07, #1
1ba88     97 0A 48 FB | 	callpa	#(@LR__2542-@LR__2541)>>2,fcache_load_ptr_
1ba8c                 | LR__2541
1ba8c     00 40 00 FF 
1ba90     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1ba94     01 2C 86 C1 |  if_b	sub	local08, #1
1ba98     01 2A 66 C0 |  if_b	shl	local07, #1
1ba9c     EC FF 9F CD |  if_b	jmp	#LR__2541
1baa0                 | LR__2542
1baa0     98 FE 9F FD | 	jmp	#LR__2531
1baa4                 | LR__2543
1baa4     08 22 46 F5 | 	or	local03, #8
1baa8     00 12 06 F6 | 	mov	arg01, #0
1baac     00 14 06 F6 | 	mov	arg02, #0
1bab0     00 16 06 F6 | 	mov	arg03, #0
1bab4     11 19 02 F6 | 	mov	arg04, local03
1bab8     B4 30 B0 FD | 	call	#__system__pack_0489
1babc                 | LR__2544
1babc     A7 F0 03 F6 | 	mov	ptra, fp
1bac0     B2 00 A0 FD | 	call	#popregs_
1bac4                 | __system___float_mul_ret
1bac4     2D 00 64 FD | 	ret
1bac8                 | 
1bac8                 | __system___float_div
1bac8     0E 4A 05 F6 | 	mov	COUNT_, #14
1bacc     A8 00 A0 FD | 	call	#pushregs_
1bad0     09 23 02 F6 | 	mov	local03, arg01
1bad4     0A 25 02 F6 | 	mov	local04, arg02
1bad8     11 27 02 F6 | 	mov	local05, local03
1badc     13 29 02 F6 | 	mov	local06, local05
1bae0     16 28 46 F7 | 	zerox	local06, #22
1bae4     13 2B 02 F6 | 	mov	local07, local05
1bae8     01 2A 66 F0 | 	shl	local07, #1
1baec     18 2A 46 F0 | 	shr	local07, #24
1baf0     1F 26 46 F0 | 	shr	local05, #31
1baf4     12 FB 01 F6 | 	mov	result1, local04
1baf8     FD 2C 02 F6 | 	mov	local08, result1
1bafc     16 2F 02 F6 | 	mov	local09, local08
1bb00     16 2E 46 F7 | 	zerox	local09, #22
1bb04     16 31 02 F6 | 	mov	local10, local08
1bb08     01 30 66 F0 | 	shl	local10, #1
1bb0c     18 30 46 F0 | 	shr	local10, #24
1bb10     1F 2C 46 F0 | 	shr	local08, #31
1bb14     16 27 62 F5 | 	xor	local05, local08
1bb18     FF 2A 0E F2 | 	cmp	local07, #255 wz
1bb1c     D4 00 90 AD |  if_e	jmp	#LR__2555
1bb20     FF 30 0E F2 | 	cmp	local10, #255 wz
1bb24     04 01 90 AD |  if_e	jmp	#LR__2556
1bb28     00 2A 0E F2 | 	cmp	local07, #0 wz
1bb2c     24 01 90 AD |  if_e	jmp	#LR__2557
1bb30     17 28 26 F4 | 	bith	local06, #23
1bb34                 | LR__2550
1bb34     00 30 0E F2 | 	cmp	local10, #0 wz
1bb38     70 01 90 AD |  if_e	jmp	#LR__2561
1bb3c     17 2E 26 F4 | 	bith	local09, #23
1bb40                 | LR__2551
1bb40     18 2B 82 F1 | 	sub	local07, local10
1bb44     15 33 02 F6 | 	mov	local11, local07
1bb48     14 13 02 F6 | 	mov	arg01, local06
1bb4c     02 12 46 F0 | 	shr	arg01, #2
1bb50     1E 28 66 F0 | 	shl	local06, #30
1bb54     14 15 02 F6 | 	mov	arg02, local06
1bb58     17 17 02 F6 | 	mov	arg03, local09
1bb5c     28 12 62 FD | 	setq	arg01
1bb60     0B 15 12 FD | 	qdiv	arg02, arg03
1bb64     00 34 06 F6 | 	mov	local12, #0
1bb68     18 1E 62 FD | 	getqx	local01
1bb6c     19 FC 61 FD | 	getqy	result2
1bb70     FE 20 02 F6 | 	mov	local02, result2
1bb74     0F 37 02 F6 | 	mov	local13, local01
1bb78     00 20 4E F2 | 	cmps	local02, #0 wz
1bb7c     1B 39 02 F6 | 	mov	local14, local13
1bb80     19 38 66 F0 | 	shl	local14, #25
1bb84     01 34 06 56 |  if_ne	mov	local12, #1
1bb88     1A 39 42 F5 | 	or	local14, local12
1bb8c     07 36 46 F0 | 	shr	local13, #7
1bb90     00 80 00 FF 
1bb94     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1bb98     1C 00 90 CD |  if_b	jmp	#LR__2552
1bb9c     01 32 06 F1 | 	add	local11, #1
1bba0     01 38 46 F0 | 	shr	local14, #1
1bba4     1B 35 02 F6 | 	mov	local12, local13
1bba8     1F 34 66 F0 | 	shl	local12, #31
1bbac     1A 39 42 F5 | 	or	local14, local12
1bbb0     01 36 46 F0 | 	shr	local13, #1
1bbb4     24 00 90 FD | 	jmp	#LR__2554
1bbb8                 | LR__2552
1bbb8     00 40 00 FF 
1bbbc     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1bbc0     18 00 90 3D |  if_ae	jmp	#LR__2553
1bbc4     01 32 86 F1 | 	sub	local11, #1
1bbc8     01 36 66 F0 | 	shl	local13, #1
1bbcc     1C 35 02 F6 | 	mov	local12, local14
1bbd0     1F 34 46 F0 | 	shr	local12, #31
1bbd4     1A 37 42 F5 | 	or	local13, local12
1bbd8     01 38 66 F0 | 	shl	local14, #1
1bbdc                 | LR__2553
1bbdc                 | LR__2554
1bbdc     1B 13 02 F6 | 	mov	arg01, local13
1bbe0     1C 15 02 F6 | 	mov	arg02, local14
1bbe4     19 17 02 F6 | 	mov	arg03, local11
1bbe8     13 19 02 F6 | 	mov	arg04, local05
1bbec     80 2F B0 FD | 	call	#__system__pack_0489
1bbf0     F8 00 90 FD | 	jmp	#LR__2565
1bbf4                 | LR__2555
1bbf4     00 28 0E F2 | 	cmp	local06, #0 wz
1bbf8     11 FB 01 56 |  if_ne	mov	result1, local03
1bbfc     EC 00 90 5D |  if_ne	jmp	#LR__2565
1bc00     FF 30 0E F2 | 	cmp	local10, #255 wz
1bc04     00 F8 3F AF 
1bc08     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1bc0c     DC 00 90 AD |  if_e	jmp	#LR__2565
1bc10     02 26 46 F5 | 	or	local05, #2
1bc14     00 12 06 F6 | 	mov	arg01, #0
1bc18     00 14 06 F6 | 	mov	arg02, #0
1bc1c     15 17 02 F6 | 	mov	arg03, local07
1bc20     13 19 02 F6 | 	mov	arg04, local05
1bc24     48 2F B0 FD | 	call	#__system__pack_0489
1bc28     C0 00 90 FD | 	jmp	#LR__2565
1bc2c                 | LR__2556
1bc2c     00 2E 0E F2 | 	cmp	local09, #0 wz
1bc30     12 FB 01 56 |  if_ne	mov	result1, local04
1bc34     B4 00 90 5D |  if_ne	jmp	#LR__2565
1bc38     13 19 02 F6 | 	mov	arg04, local05
1bc3c     08 18 46 F5 | 	or	arg04, #8
1bc40     00 12 06 F6 | 	mov	arg01, #0
1bc44     00 14 06 F6 | 	mov	arg02, #0
1bc48     00 16 06 F6 | 	mov	arg03, #0
1bc4c     20 2F B0 FD | 	call	#__system__pack_0489
1bc50     98 00 90 FD | 	jmp	#LR__2565
1bc54                 | LR__2557
1bc54     00 28 0E F2 | 	cmp	local06, #0 wz
1bc58     20 00 90 AD |  if_e	jmp	#LR__2560
1bc5c     01 28 66 F0 | 	shl	local06, #1
1bc60     97 0A 48 FB | 	callpa	#(@LR__2559-@LR__2558)>>2,fcache_load_ptr_
1bc64                 | LR__2558
1bc64     00 40 00 FF 
1bc68     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1bc6c     01 2A 86 C1 |  if_b	sub	local07, #1
1bc70     01 28 66 C0 |  if_b	shl	local06, #1
1bc74     EC FF 9F CD |  if_b	jmp	#LR__2558
1bc78                 | LR__2559
1bc78     B8 FE 9F FD | 	jmp	#LR__2550
1bc7c                 | LR__2560
1bc7c     00 30 0E F2 | 	cmp	local10, #0 wz
1bc80     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1bc84     00 F8 3F AF 
1bc88     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1bc8c     5C 00 90 AD |  if_e	jmp	#LR__2565
1bc90     13 19 02 F6 | 	mov	arg04, local05
1bc94     08 18 46 F5 | 	or	arg04, #8
1bc98     00 12 06 F6 | 	mov	arg01, #0
1bc9c     00 14 06 F6 | 	mov	arg02, #0
1bca0     00 16 06 F6 | 	mov	arg03, #0
1bca4     C8 2E B0 FD | 	call	#__system__pack_0489
1bca8     40 00 90 FD | 	jmp	#LR__2565
1bcac                 | LR__2561
1bcac     00 2E 0E F2 | 	cmp	local09, #0 wz
1bcb0     20 00 90 AD |  if_e	jmp	#LR__2564
1bcb4     01 2E 66 F0 | 	shl	local09, #1
1bcb8     97 0A 48 FB | 	callpa	#(@LR__2563-@LR__2562)>>2,fcache_load_ptr_
1bcbc                 | LR__2562
1bcbc     00 40 00 FF 
1bcc0     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
1bcc4     01 30 86 C1 |  if_b	sub	local10, #1
1bcc8     01 2E 66 C0 |  if_b	shl	local09, #1
1bccc     EC FF 9F CD |  if_b	jmp	#LR__2562
1bcd0                 | LR__2563
1bcd0     6C FE 9F FD | 	jmp	#LR__2551
1bcd4                 | LR__2564
1bcd4     02 26 46 F5 | 	or	local05, #2
1bcd8     00 12 06 F6 | 	mov	arg01, #0
1bcdc     00 14 06 F6 | 	mov	arg02, #0
1bce0     00 16 06 F6 | 	mov	arg03, #0
1bce4     13 19 02 F6 | 	mov	arg04, local05
1bce8     84 2E B0 FD | 	call	#__system__pack_0489
1bcec                 | LR__2565
1bcec     A7 F0 03 F6 | 	mov	ptra, fp
1bcf0     B2 00 A0 FD | 	call	#popregs_
1bcf4                 | __system___float_div_ret
1bcf4     2D 00 64 FD | 	ret
1bcf8                 | 
1bcf8                 | __system___float_cmp
1bcf8     00 C0 3F FF 
1bcfc     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
1bd00     00 C0 3F CF 
1bd04     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1bd08     0B FB 01 36 |  if_ae	mov	result1, arg03
1bd0c     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1bd10     00 C0 7F FF 
1bd14     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1bd18     00 C0 7F CF 
1bd1c     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
1bd20     0B FB 01 36 |  if_ae	mov	result1, arg03
1bd24     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1bd28     00 12 56 F2 | 	cmps	arg01, #0 wc
1bd2c     2C 00 90 3D |  if_ae	jmp	#LR__2570
1bd30     00 14 56 F2 | 	cmps	arg02, #0 wc
1bd34     0A FB 01 C6 |  if_b	mov	result1, arg02
1bd38     09 FB 81 C1 |  if_b	sub	result1, arg01
1bd3c     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
1bd40     00 14 0E F2 | 	cmp	arg02, #0 wz
1bd44     00 00 40 AF 
1bd48     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1bd4c     00 FA 05 A6 |  if_e	mov	result1, #0
1bd50     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1bd54     01 FA 65 F6 | 	neg	result1, #1
1bd58     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1bd5c                 | LR__2570
1bd5c     00 14 56 F2 | 	cmps	arg02, #0 wc
1bd60     1C 00 90 3D |  if_ae	jmp	#LR__2571
1bd64     00 12 0E F2 | 	cmp	arg01, #0 wz
1bd68     00 00 40 AF 
1bd6c     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
1bd70     00 FA 05 A6 |  if_e	mov	result1, #0
1bd74     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1bd78     01 FA 05 F6 | 	mov	result1, #1
1bd7c     08 00 90 FD | 	jmp	#__system___float_cmp_ret
1bd80                 | LR__2571
1bd80     0A 13 82 F1 | 	sub	arg01, arg02
1bd84     09 FB 01 F6 | 	mov	result1, arg01
1bd88                 | __system___float_cmp_ret
1bd88     2D 00 64 FD | 	ret
1bd8c                 | 
1bd8c                 | __system___float_tointeger
1bd8c     02 4A 05 F6 | 	mov	COUNT_, #2
1bd90     A8 00 A0 FD | 	call	#pushregs_
1bd94     50 00 B0 FD | 	call	#__system___float_Unpack
1bd98     FF FF 7F FF 
1bd9c     FF FD 55 F2 | 	cmps	result2, ##-1 wc
1bda0     34 00 90 CD |  if_b	jmp	#LR__2580
1bda4     1F FC 55 F2 | 	cmps	result2, #31 wc
1bda8     2C 00 90 3D |  if_ae	jmp	#LR__2580
1bdac     02 FE 65 F0 | 	shl	result3, #2
1bdb0     1E 1E 06 F6 | 	mov	local01, #30
1bdb4     FE 1E 82 F1 | 	sub	local01, result2
1bdb8     0F FF 41 F0 | 	shr	result3, local01
1bdbc     FF 20 02 F6 | 	mov	local02, result3
1bdc0     0A 21 02 F1 | 	add	local02, arg02
1bdc4     01 20 46 F0 | 	shr	local02, #1
1bdc8     00 FA 0D F2 | 	cmp	result1, #0 wz
1bdcc     10 21 62 56 |  if_ne	neg	local02, local02
1bdd0     10 FB 01 F6 | 	mov	result1, local02
1bdd4     04 00 90 FD | 	jmp	#LR__2581
1bdd8                 | LR__2580
1bdd8     00 FA 05 F6 | 	mov	result1, #0
1bddc                 | LR__2581
1bddc     A7 F0 03 F6 | 	mov	ptra, fp
1bde0     B2 00 A0 FD | 	call	#popregs_
1bde4                 | __system___float_tointeger_ret
1bde4     2D 00 64 FD | 	ret
1bde8                 | 
1bde8                 | __system___float_Unpack
1bde8     09 01 02 F6 | 	mov	_var01, arg01
1bdec     1F 00 46 F0 | 	shr	_var01, #31
1bdf0     09 03 02 F6 | 	mov	_var02, arg01
1bdf4     01 02 66 F0 | 	shl	_var02, #1
1bdf8     18 02 4E F0 | 	shr	_var02, #24 wz
1bdfc     17 13 06 F4 | 	bitl	arg01, #279
1be00     06 12 66 50 |  if_ne	shl	arg01, #6
1be04     1D 12 26 54 |  if_ne	bith	arg01, #29
1be08     1C 00 90 5D |  if_ne	jmp	#LR__2590
1be0c     09 05 92 F7 | 	encod	_var03, arg01 wc
1be10     01 04 06 C1 |  if_b	add	_var03, #1
1be14     17 04 86 F1 | 	sub	_var03, #23
1be18     02 03 02 F6 | 	mov	_var02, _var03
1be1c     07 FC 05 F6 | 	mov	result2, #7
1be20     02 FD 81 F1 | 	sub	result2, _var03
1be24     FE 12 62 F0 | 	shl	arg01, result2
1be28                 | LR__2590
1be28     7F 02 86 F1 | 	sub	_var02, #127
1be2c     09 FF 01 F6 | 	mov	result3, arg01
1be30     00 FB 01 F6 | 	mov	result1, _var01
1be34     01 FD 01 F6 | 	mov	result2, _var02
1be38                 | __system___float_Unpack_ret
1be38     2D 00 64 FD | 	ret
1be3c                 | 
1be3c                 | __system___float_Pack
1be3c     00 00 06 F6 | 	mov	_var01, #0
1be40     00 16 0E F2 | 	cmp	arg03, #0 wz
1be44     8C 00 90 AD |  if_e	jmp	#LR__2601
1be48     0B 03 92 F7 | 	encod	_var02, arg03 wc
1be4c     01 02 06 C1 |  if_b	add	_var02, #1
1be50     21 00 06 F6 | 	mov	_var01, #33
1be54     01 01 82 F1 | 	sub	_var01, _var02
1be58     00 17 62 F0 | 	shl	arg03, _var01
1be5c     03 02 06 F6 | 	mov	_var02, #3
1be60     00 03 82 F1 | 	sub	_var02, _var01
1be64     01 15 02 F1 | 	add	arg02, _var02
1be68     0A 05 02 F6 | 	mov	_var03, arg02
1be6c     00 17 06 F1 | 	add	arg03, #256
1be70     0B 03 02 F6 | 	mov	_var02, arg03
1be74     FF 02 2E F5 | 	andn	_var02, #255 wz
1be78     01 04 06 A1 |  if_e	add	_var03, #1
1be7c     7F 04 06 F1 | 	add	_var03, #127
1be80     FF FF 7F FF 
1be84     E9 05 46 F3 | 	fges	_var03, ##-23
1be88     FF 04 66 F3 | 	fles	_var03, #255
1be8c     01 04 56 F2 | 	cmps	_var03, #1 wc
1be90     1C 00 90 3D |  if_ae	jmp	#LR__2600
1be94     01 16 46 F0 | 	shr	arg03, #1
1be98     1F 02 C6 F9 | 	decod	_var02, #31
1be9c     0B 03 02 F1 | 	add	_var02, arg03
1bea0     02 05 62 F6 | 	neg	_var03, _var03
1bea4     02 03 42 F0 | 	shr	_var02, _var03
1bea8     01 17 02 F6 | 	mov	arg03, _var02
1beac     00 04 06 F6 | 	mov	_var03, #0
1beb0                 | LR__2600
1beb0     09 FB 01 F6 | 	mov	result1, arg01
1beb4     1F FA 65 F0 | 	shl	result1, #31
1beb8     02 03 02 F6 | 	mov	_var02, _var03
1bebc     17 02 66 F0 | 	shl	_var02, #23
1bec0     01 FB 41 F5 | 	or	result1, _var02
1bec4     0B 07 02 F6 | 	mov	_var04, arg03
1bec8     09 06 46 F0 | 	shr	_var04, #9
1becc     03 FB 41 F5 | 	or	result1, _var04
1bed0     04 00 90 FD | 	jmp	#__system___float_Pack_ret
1bed4                 | LR__2601
1bed4     00 FB 01 F6 | 	mov	result1, _var01
1bed8                 | __system___float_Pack_ret
1bed8     2D 00 64 FD | 	ret
1bedc                 | 
1bedc                 | __system___basic_print_float
1bedc     05 4A 05 F6 | 	mov	COUNT_, #5
1bee0     A8 00 A0 FD | 	call	#pushregs_
1bee4     09 1F 02 F6 | 	mov	local01, arg01
1bee8     0A 21 02 F6 | 	mov	local02, arg02
1beec     0B 23 0A F6 | 	mov	local03, arg03 wz
1bef0     0C 25 02 F6 | 	mov	local04, arg04
1bef4     14 00 90 5D |  if_ne	jmp	#LR__2610
1bef8     23 24 0E F2 | 	cmp	local04, #35 wz
1befc     80 02 10 AF 
1bf00     00 26 06 A6 |  if_e	mov	local05, ##537198592
1bf04     1D 26 C6 59 |  if_ne	decod	local05, #29
1bf08     13 23 02 F6 | 	mov	local03, local05
1bf0c                 | LR__2610
1bf0c     0F 13 02 F6 | 	mov	arg01, local01
1bf10     40 27 B0 FD | 	call	#__system___gettxfunc
1bf14     FD 26 0A F6 | 	mov	local05, result1 wz
1bf18     00 FA 05 A6 |  if_e	mov	result1, #0
1bf1c     13 13 02 56 |  if_ne	mov	arg01, local05
1bf20     11 15 02 56 |  if_ne	mov	arg02, local03
1bf24     10 17 02 56 |  if_ne	mov	arg03, local02
1bf28     12 19 02 56 |  if_ne	mov	arg04, local04
1bf2c     8C DF BF 5D |  if_ne	call	#__system___fmtfloat
1bf30     A7 F0 03 F6 | 	mov	ptra, fp
1bf34     B2 00 A0 FD | 	call	#popregs_
1bf38                 | __system___basic_print_float_ret
1bf38     2D 00 64 FD | 	ret
1bf3c                 | 
1bf3c                 | __system____builtin_atoi
1bf3c     07 4A 05 F6 | 	mov	COUNT_, #7
1bf40     A8 00 A0 FD | 	call	#pushregs_
1bf44                 | __system____builtin_atoi_enter
1bf44     09 1F 02 F6 | 	mov	local01, arg01
1bf48     0A 21 02 F6 | 	mov	local02, arg02
1bf4c     00 22 06 F6 | 	mov	local03, #0
1bf50     00 24 06 F6 | 	mov	local04, #0
1bf54     00 26 06 F6 | 	mov	local05, #0
1bf58     97 08 48 FB | 	callpa	#(@LR__2621-@LR__2620)>>2,fcache_load_ptr_
1bf5c                 | LR__2620
1bf5c     0F 29 C2 FA | 	rdbyte	local06, local01
1bf60     20 28 0E F2 | 	cmp	local06, #32 wz
1bf64     01 1E 06 A1 |  if_e	add	local01, #1
1bf68     F0 FF 9F AD |  if_e	jmp	#LR__2620
1bf6c                 | LR__2621
1bf6c     0F 2B C2 FA | 	rdbyte	local07, local01
1bf70                 | LR__2622
1bf70     2D 2A 0E F2 | 	cmp	local07, #45 wz
1bf74     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1bf78     18 00 90 5D |  if_ne	jmp	#LR__2623
1bf7c     01 1E 06 F1 | 	add	local01, #1
1bf80     2D 2A 0E F2 | 	cmp	local07, #45 wz
1bf84     01 28 06 A6 |  if_e	mov	local06, #1
1bf88     14 27 C2 A2 |  if_e	subr	local05, local06
1bf8c     0F 2B C2 FA | 	rdbyte	local07, local01
1bf90     DC FF 9F FD | 	jmp	#LR__2622
1bf94                 | LR__2623
1bf94     97 48 48 FB | 	callpa	#(@LR__2631-@LR__2624)>>2,fcache_load_ptr_
1bf98                 | LR__2624
1bf98                 | LR__2625
1bf98     0F 2B C2 FA | 	rdbyte	local07, local01
1bf9c     5F 2A 0E F2 | 	cmp	local07, #95 wz
1bfa0     01 1E 06 F1 | 	add	local01, #1
1bfa4     F0 FF 9F AD |  if_e	jmp	#LR__2625
1bfa8     30 2A 0E F2 | 	cmp	local07, #48 wz
1bfac     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
1bfb0     00 24 06 A6 |  if_e	mov	local04, #0
1bfb4     60 00 90 AD |  if_e	jmp	#LR__2630
1bfb8     31 2A 56 F2 | 	cmps	local07, #49 wc
1bfbc     18 00 90 CD |  if_b	jmp	#LR__2626
1bfc0     3A 2A 56 F2 | 	cmps	local07, #58 wc
1bfc4     15 25 02 C6 |  if_b	mov	local04, local07
1bfc8     30 24 86 C1 |  if_b	sub	local04, #48
1bfcc     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1bfd0     0A 20 06 86 |  if_c_and_z	mov	local02, #10
1bfd4     40 00 90 CD |  if_b	jmp	#LR__2629
1bfd8                 | LR__2626
1bfd8     0B 20 56 F2 | 	cmps	local02, #11 wc
1bfdc     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
1bfe0     14 00 90 CD |  if_b	jmp	#LR__2627
1bfe4     67 2A 56 F2 | 	cmps	local07, #103 wc
1bfe8     61 2A 86 C1 |  if_b	sub	local07, #97
1bfec     0A 24 06 C6 |  if_b	mov	local04, #10
1bff0     15 25 02 C1 |  if_b	add	local04, local07
1bff4     20 00 90 CD |  if_b	jmp	#LR__2628
1bff8                 | LR__2627
1bff8     0B 20 56 F2 | 	cmps	local02, #11 wc
1bffc     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
1c000     24 00 90 CD |  if_b	jmp	#LR__2632
1c004     47 2A 56 F2 | 	cmps	local07, #71 wc
1c008     41 2A 86 C1 |  if_b	sub	local07, #65
1c00c     0A 24 06 C6 |  if_b	mov	local04, #10
1c010     15 25 02 C1 |  if_b	add	local04, local07
1c014     10 00 90 3D |  if_ae	jmp	#LR__2632
1c018                 | LR__2628
1c018                 | LR__2629
1c018                 | LR__2630
1c018     11 21 02 FD | 	qmul	local02, local03
1c01c     18 22 62 FD | 	getqx	local03
1c020     12 23 02 F1 | 	add	local03, local04
1c024     70 FF 9F FD | 	jmp	#LR__2624
1c028                 | LR__2631
1c028                 | LR__2632
1c028     00 20 0E F2 | 	cmp	local02, #0 wz
1c02c     64 00 90 5D |  if_ne	jmp	#LR__2638
1c030     78 2A 0E F2 | 	cmp	local07, #120 wz
1c034     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1c038     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1c03c     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
1c040     14 00 90 5D |  if_ne	jmp	#LR__2633
1c044     0F 13 02 F6 | 	mov	arg01, local01
1c048     10 14 06 F6 | 	mov	arg02, #16
1c04c     EC FE BF FD | 	call	#__system____builtin_atoi
1c050     FD 22 02 F6 | 	mov	local03, result1
1c054     3C 00 90 FD | 	jmp	#LR__2637
1c058                 | LR__2633
1c058     62 2A 0E F2 | 	cmp	local07, #98 wz
1c05c     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
1c060     14 00 90 5D |  if_ne	jmp	#LR__2634
1c064     0F 13 02 F6 | 	mov	arg01, local01
1c068     02 14 06 F6 | 	mov	arg02, #2
1c06c     CC FE BF FD | 	call	#__system____builtin_atoi
1c070     FD 22 02 F6 | 	mov	local03, result1
1c074     1C 00 90 FD | 	jmp	#LR__2636
1c078                 | LR__2634
1c078     6F 2A 0E F2 | 	cmp	local07, #111 wz
1c07c     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
1c080     10 00 90 5D |  if_ne	jmp	#LR__2635
1c084     0F 13 02 F6 | 	mov	arg01, local01
1c088     08 14 06 F6 | 	mov	arg02, #8
1c08c     AC FE BF FD | 	call	#__system____builtin_atoi
1c090     FD 22 02 F6 | 	mov	local03, result1
1c094                 | LR__2635
1c094                 | LR__2636
1c094                 | LR__2637
1c094                 | LR__2638
1c094     00 26 0E F2 | 	cmp	local05, #0 wz
1c098     11 23 62 56 |  if_ne	neg	local03, local03
1c09c     11 FB 01 F6 | 	mov	result1, local03
1c0a0     A7 F0 03 F6 | 	mov	ptra, fp
1c0a4     B2 00 A0 FD | 	call	#popregs_
1c0a8                 | __system____builtin_atoi_ret
1c0a8     2D 00 64 FD | 	ret
1c0ac                 | 
1c0ac                 | __system____builtin_atof
1c0ac     07 4A 05 F6 | 	mov	COUNT_, #7
1c0b0     A8 00 A0 FD | 	call	#pushregs_
1c0b4     09 1F 02 F6 | 	mov	local01, arg01
1c0b8     00 20 06 F6 | 	mov	local02, #0
1c0bc     00 22 06 F6 | 	mov	local03, #0
1c0c0     00 24 06 F6 | 	mov	local04, #0
1c0c4     00 26 06 F6 | 	mov	local05, #0
1c0c8     97 08 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
1c0cc                 | LR__2640
1c0cc     0F 17 C2 FA | 	rdbyte	arg03, local01
1c0d0     20 16 0E F2 | 	cmp	arg03, #32 wz
1c0d4     01 1E 06 A1 |  if_e	add	local01, #1
1c0d8     F0 FF 9F AD |  if_e	jmp	#LR__2640
1c0dc                 | LR__2641
1c0dc     0F 29 C2 FA | 	rdbyte	local06, local01
1c0e0                 | LR__2642
1c0e0     2B 28 0E F2 | 	cmp	local06, #43 wz
1c0e4     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1c0e8     14 00 90 5D |  if_ne	jmp	#LR__2643
1c0ec     2D 28 0E F2 | 	cmp	local06, #45 wz
1c0f0     1F 24 E6 A4 |  if_e	bitnot	local04, #31
1c0f4     01 1E 06 F1 | 	add	local01, #1
1c0f8     0F 29 C2 FA | 	rdbyte	local06, local01
1c0fc     E0 FF 9F FD | 	jmp	#LR__2642
1c100                 | LR__2643
1c100                 | LR__2644
1c100     97 08 48 FB | 	callpa	#(@LR__2646-@LR__2645)>>2,fcache_load_ptr_
1c104                 | LR__2645
1c104     0F 29 C2 FA | 	rdbyte	local06, local01
1c108     5F 28 0E F2 | 	cmp	local06, #95 wz
1c10c     01 1E 06 F1 | 	add	local01, #1
1c110     F0 FF 9F AD |  if_e	jmp	#LR__2645
1c114                 | LR__2646
1c114     00 28 0E F2 | 	cmp	local06, #0 wz
1c118     5C 00 90 AD |  if_e	jmp	#LR__2648
1c11c     30 28 56 F2 | 	cmps	local06, #48 wc
1c120     44 00 90 CD |  if_b	jmp	#LR__2647
1c124     3A 28 56 F2 | 	cmps	local06, #58 wc
1c128     3C 00 90 3D |  if_ae	jmp	#LR__2647
1c12c     10 13 02 F6 | 	mov	arg01, local02
1c130     00 90 20 FF 
1c134     00 14 06 F6 | 	mov	arg02, ##1092616192
1c138     88 F7 BF FD | 	call	#__system___float_mul
1c13c     FD 20 02 F6 | 	mov	local02, result1
1c140     30 28 86 F1 | 	sub	local06, #48
1c144     14 13 02 F6 | 	mov	arg01, local06
1c148     74 F3 BF FD | 	call	#__system___float_fromuns
1c14c     FD 14 02 F6 | 	mov	arg02, result1
1c150     10 13 02 F6 | 	mov	arg01, local02
1c154     9C F3 BF FD | 	call	#__system___float_add
1c158     FD 20 02 F6 | 	mov	local02, result1
1c15c     00 26 0E F2 | 	cmp	local05, #0 wz
1c160     01 22 86 51 |  if_ne	sub	local03, #1
1c164     98 FF 9F FD | 	jmp	#LR__2644
1c168                 | LR__2647
1c168     2E 28 0E F2 | 	cmp	local06, #46 wz
1c16c     00 26 0E A2 |  if_e	cmp	local05, #0 wz
1c170     01 26 06 A6 |  if_e	mov	local05, #1
1c174     88 FF 9F AD |  if_e	jmp	#LR__2644
1c178                 | LR__2648
1c178     45 28 0E F2 | 	cmp	local06, #69 wz
1c17c     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
1c180     18 00 90 5D |  if_ne	jmp	#LR__2649
1c184     0F 13 02 F6 | 	mov	arg01, local01
1c188     00 14 06 F6 | 	mov	arg02, #0
1c18c     AC FD BF FD | 	call	#__system____builtin_atoi
1c190     11 FB 01 F1 | 	add	result1, local03
1c194     FD 2A 02 F6 | 	mov	local07, result1
1c198     04 00 90 FD | 	jmp	#LR__2650
1c19c                 | LR__2649
1c19c     11 2B 02 F6 | 	mov	local07, local03
1c1a0                 | LR__2650
1c1a0     15 17 02 F6 | 	mov	arg03, local07
1c1a4     10 13 02 F6 | 	mov	arg01, local02
1c1a8     00 90 20 FF 
1c1ac     00 14 06 F6 | 	mov	arg02, ##1092616192
1c1b0     BC 06 B0 FD | 	call	#__system___float_pow_n
1c1b4     12 FB 61 F5 | 	xor	result1, local04
1c1b8     A7 F0 03 F6 | 	mov	ptra, fp
1c1bc     B2 00 A0 FD | 	call	#popregs_
1c1c0                 | __system____builtin_atof_ret
1c1c0     2D 00 64 FD | 	ret
1c1c4                 | 
1c1c4                 | __system____builtin_ilogb
1c1c4     20 FC BF FD | 	call	#__system___float_Unpack
1c1c8     00 FE 0D F2 | 	cmp	result3, #0 wz
1c1cc     00 00 40 AF 
1c1d0     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
1c1d4     24 00 90 AD |  if_e	jmp	#LR__2661
1c1d8     80 FC 0D F2 | 	cmp	result2, #128 wz
1c1dc     18 00 90 5D |  if_ne	jmp	#LR__2660
1c1e0     00 00 10 FF 
1c1e4     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1c1e8     1E FA CD A9 |  if_e	bmask	result1, #30
1c1ec     0C 00 90 AD |  if_e	jmp	#LR__2661
1c1f0     1F FA C5 F9 | 	decod	result1, #31
1c1f4     04 00 90 FD | 	jmp	#LR__2661
1c1f8                 | LR__2660
1c1f8     FE FA 01 F6 | 	mov	result1, result2
1c1fc                 | LR__2661
1c1fc                 | __system____builtin_ilogb_ret
1c1fc     2D 00 64 FD | 	ret
1c200                 | 
1c200                 | __system____builtin_sinf
1c200     03 4A 05 F6 | 	mov	COUNT_, #3
1c204     A8 00 A0 FD | 	call	#pushregs_
1c208     09 1F 02 F6 | 	mov	local01, arg01
1c20c     87 64 20 FF 
1c210     DB 15 06 F6 | 	mov	arg02, ##1086918619
1c214     B0 F8 BF FD | 	call	#__system___float_div
1c218     FD 12 02 F6 | 	mov	arg01, result1
1c21c     00 14 06 F6 | 	mov	arg02, #0
1c220     68 FB BF FD | 	call	#__system___float_tointeger
1c224     FD 16 0A F6 | 	mov	arg03, result1 wz
1c228     44 00 90 AD |  if_e	jmp	#LR__2670
1c22c     0B 13 52 F6 | 	abs	arg01, arg03 wc
1c230     1F 20 C6 C9 |  if_b	decod	local02, #31
1c234     00 20 06 36 |  if_ae	mov	local02, #0
1c238     84 F2 BF FD | 	call	#__system___float_fromuns
1c23c     10 FB 61 F5 | 	xor	result1, local02
1c240     FD 12 02 F6 | 	mov	arg01, result1
1c244     1E 14 C6 F9 | 	decod	arg02, #30
1c248     78 F6 BF FD | 	call	#__system___float_mul
1c24c     FD 12 02 F6 | 	mov	arg01, result1
1c250     87 24 20 FF 
1c254     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c258     68 F6 BF FD | 	call	#__system___float_mul
1c25c     FD 14 02 F6 | 	mov	arg02, result1
1c260     0F 13 02 F6 | 	mov	arg01, local01
1c264     1F 14 E6 F4 | 	bitnot	arg02, #31
1c268     88 F2 BF FD | 	call	#__system___float_add
1c26c     FD 1E 02 F6 | 	mov	local01, result1
1c270                 | LR__2670
1c270     0F 13 02 F6 | 	mov	arg01, local01
1c274     66 E6 1E FF 
1c278     CD 14 06 F6 | 	mov	arg02, ##1036831949
1c27c     01 16 06 F6 | 	mov	arg03, #1
1c280     74 FA BF FD | 	call	#__system___float_cmp
1c284     00 FA 55 F2 | 	cmps	result1, #0 wc
1c288     5C 00 90 3D |  if_ae	jmp	#LR__2671
1c28c     0F 13 02 F6 | 	mov	arg01, local01
1c290     66 E6 5E FF 
1c294     CD 14 06 F6 | 	mov	arg02, ##-1110651699
1c298     01 16 66 F6 | 	neg	arg03, #1
1c29c     58 FA BF FD | 	call	#__system___float_cmp
1c2a0     01 FA 55 F2 | 	cmps	result1, #1 wc
1c2a4     40 00 90 CD |  if_b	jmp	#LR__2671
1c2a8     0F 13 02 F6 | 	mov	arg01, local01
1c2ac     0F 15 02 F6 | 	mov	arg02, local01
1c2b0     10 F6 BF FD | 	call	#__system___float_mul
1c2b4     FD 12 02 F6 | 	mov	arg01, result1
1c2b8     0F 15 02 F6 | 	mov	arg02, local01
1c2bc     04 F6 BF FD | 	call	#__system___float_mul
1c2c0     FD 12 02 F6 | 	mov	arg01, result1
1c2c4     00 60 20 FF 
1c2c8     00 14 06 F6 | 	mov	arg02, ##1086324736
1c2cc     F8 F7 BF FD | 	call	#__system___float_div
1c2d0     FD 14 02 F6 | 	mov	arg02, result1
1c2d4     0F 13 02 F6 | 	mov	arg01, local01
1c2d8     1F 14 E6 F4 | 	bitnot	arg02, #31
1c2dc     14 F2 BF FD | 	call	#__system___float_add
1c2e0     FD 22 02 F6 | 	mov	local03, result1
1c2e4     54 00 90 FD | 	jmp	#LR__2672
1c2e8                 | LR__2671
1c2e8     0F 13 02 F6 | 	mov	arg01, local01
1c2ec     7C 91 26 FF 
1c2f0     83 15 06 F6 | 	mov	arg02, ##1294137731
1c2f4     CC F5 BF FD | 	call	#__system___float_mul
1c2f8     FD 12 02 F6 | 	mov	arg01, result1
1c2fc     00 14 06 F6 | 	mov	arg02, #0
1c300     88 FA BF FD | 	call	#__system___float_tointeger
1c304     02 FA 65 F0 | 	shl	result1, #2
1c308     00 00 A0 FF 
1c30c     FD 00 48 FD | 	qrotate	##1073741824, result1
1c310     19 12 62 FD | 	getqy	arg01
1c314     09 13 52 F6 | 	abs	arg01, arg01 wc
1c318     1F 20 C6 C9 |  if_b	decod	local02, #31
1c31c     00 20 06 36 |  if_ae	mov	local02, #0
1c320     9C F1 BF FD | 	call	#__system___float_fromuns
1c324     10 FB 61 F5 | 	xor	result1, local02
1c328     FD 12 02 F6 | 	mov	arg01, result1
1c32c     00 40 27 FF 
1c330     00 14 06 F6 | 	mov	arg02, ##1317011456
1c334     90 F7 BF FD | 	call	#__system___float_div
1c338     FD 22 02 F6 | 	mov	local03, result1
1c33c                 | LR__2672
1c33c     11 FB 01 F6 | 	mov	result1, local03
1c340     A7 F0 03 F6 | 	mov	ptra, fp
1c344     B2 00 A0 FD | 	call	#popregs_
1c348                 | __system____builtin_sinf_ret
1c348     2D 00 64 FD | 	ret
1c34c                 | 
1c34c                 | __system____builtin_tanf
1c34c     02 4A 05 F6 | 	mov	COUNT_, #2
1c350     A8 00 A0 FD | 	call	#pushregs_
1c354     09 1F 02 F6 | 	mov	local01, arg01
1c358     A4 FE BF FD | 	call	#__system____builtin_sinf
1c35c     FD 20 02 F6 | 	mov	local02, result1
1c360     0F 15 02 F6 | 	mov	arg02, local01
1c364     87 E4 1F FF 
1c368     DB 13 06 F6 | 	mov	arg01, ##1070141403
1c36c     1F 14 E6 F4 | 	bitnot	arg02, #31
1c370     80 F1 BF FD | 	call	#__system___float_add
1c374     FD 12 02 F6 | 	mov	arg01, result1
1c378     84 FE BF FD | 	call	#__system____builtin_sinf
1c37c     FD 14 02 F6 | 	mov	arg02, result1
1c380     10 13 02 F6 | 	mov	arg01, local02
1c384     40 F7 BF FD | 	call	#__system___float_div
1c388     A7 F0 03 F6 | 	mov	ptra, fp
1c38c     B2 00 A0 FD | 	call	#popregs_
1c390                 | __system____builtin_tanf_ret
1c390     2D 00 64 FD | 	ret
1c394                 | 
1c394                 | __system____builtin_asinf
1c394     01 4A 05 F6 | 	mov	COUNT_, #1
1c398     A8 00 A0 FD | 	call	#pushregs_
1c39c     09 1F 02 F6 | 	mov	local01, arg01
1c3a0     0F 15 02 F6 | 	mov	arg02, local01
1c3a4     0F 13 02 F6 | 	mov	arg01, local01
1c3a8     18 F5 BF FD | 	call	#__system___float_mul
1c3ac     FD 14 02 F6 | 	mov	arg02, result1
1c3b0     00 C0 1F FF 
1c3b4     00 12 06 F6 | 	mov	arg01, ##1065353216
1c3b8     1F 14 E6 F4 | 	bitnot	arg02, #31
1c3bc     34 F1 BF FD | 	call	#__system___float_add
1c3c0     FD 12 02 F6 | 	mov	arg01, result1
1c3c4     24 F4 BF FD | 	call	#__system___float_sqrt
1c3c8     FD 14 02 F6 | 	mov	arg02, result1
1c3cc     0F 13 02 F6 | 	mov	arg01, local01
1c3d0     58 00 B0 FD | 	call	#__system____builtin_atan2f
1c3d4     A7 F0 03 F6 | 	mov	ptra, fp
1c3d8     B2 00 A0 FD | 	call	#popregs_
1c3dc                 | __system____builtin_asinf_ret
1c3dc     2D 00 64 FD | 	ret
1c3e0                 | 
1c3e0                 | __system____builtin_acosf
1c3e0     01 4A 05 F6 | 	mov	COUNT_, #1
1c3e4     A8 00 A0 FD | 	call	#pushregs_
1c3e8     09 1F 02 F6 | 	mov	local01, arg01
1c3ec     0F 15 02 F6 | 	mov	arg02, local01
1c3f0     0F 13 02 F6 | 	mov	arg01, local01
1c3f4     CC F4 BF FD | 	call	#__system___float_mul
1c3f8     FD 14 02 F6 | 	mov	arg02, result1
1c3fc     00 C0 1F FF 
1c400     00 12 06 F6 | 	mov	arg01, ##1065353216
1c404     1F 14 E6 F4 | 	bitnot	arg02, #31
1c408     E8 F0 BF FD | 	call	#__system___float_add
1c40c     FD 12 02 F6 | 	mov	arg01, result1
1c410     D8 F3 BF FD | 	call	#__system___float_sqrt
1c414     FD 12 02 F6 | 	mov	arg01, result1
1c418     0F 15 02 F6 | 	mov	arg02, local01
1c41c     0C 00 B0 FD | 	call	#__system____builtin_atan2f
1c420     A7 F0 03 F6 | 	mov	ptra, fp
1c424     B2 00 A0 FD | 	call	#popregs_
1c428                 | __system____builtin_acosf_ret
1c428     2D 00 64 FD | 	ret
1c42c                 | 
1c42c                 | __system____builtin_atan2f
1c42c     04 4A 05 F6 | 	mov	COUNT_, #4
1c430     A8 00 A0 FD | 	call	#pushregs_
1c434     09 1F 02 F6 | 	mov	local01, arg01
1c438     0A 21 02 F6 | 	mov	local02, arg02
1c43c     0F 13 02 F6 | 	mov	arg01, local01
1c440     00 14 06 F6 | 	mov	arg02, #0
1c444     01 16 06 F6 | 	mov	arg03, #1
1c448     AC F8 BF FD | 	call	#__system___float_cmp
1c44c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c450     28 00 90 5D |  if_ne	jmp	#LR__2680
1c454     10 13 02 F6 | 	mov	arg01, local02
1c458     00 14 06 F6 | 	mov	arg02, #0
1c45c     01 16 06 F6 | 	mov	arg03, #1
1c460     94 F8 BF FD | 	call	#__system___float_cmp
1c464     00 FA 55 F2 | 	cmps	result1, #0 wc
1c468     87 24 60 CF 
1c46c     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
1c470     DC 00 90 CD |  if_b	jmp	#LR__2681
1c474     00 FA 05 F6 | 	mov	result1, #0
1c478     D4 00 90 FD | 	jmp	#LR__2681
1c47c                 | LR__2680
1c47c     10 13 02 F6 | 	mov	arg01, local02
1c480     10 15 02 F6 | 	mov	arg02, local02
1c484     3C F4 BF FD | 	call	#__system___float_mul
1c488     FD 22 02 F6 | 	mov	local03, result1
1c48c     0F 13 02 F6 | 	mov	arg01, local01
1c490     0F 15 02 F6 | 	mov	arg02, local01
1c494     2C F4 BF FD | 	call	#__system___float_mul
1c498     FD 14 02 F6 | 	mov	arg02, result1
1c49c     11 13 02 F6 | 	mov	arg01, local03
1c4a0     50 F0 BF FD | 	call	#__system___float_add
1c4a4     FD 12 02 F6 | 	mov	arg01, result1
1c4a8     40 F3 BF FD | 	call	#__system___float_sqrt
1c4ac     FD 22 02 F6 | 	mov	local03, result1
1c4b0     10 13 02 F6 | 	mov	arg01, local02
1c4b4     11 15 02 F6 | 	mov	arg02, local03
1c4b8     0C F6 BF FD | 	call	#__system___float_div
1c4bc     FD 20 02 F6 | 	mov	local02, result1
1c4c0     0F 13 02 F6 | 	mov	arg01, local01
1c4c4     11 15 02 F6 | 	mov	arg02, local03
1c4c8     FC F5 BF FD | 	call	#__system___float_div
1c4cc     FD 1E 02 F6 | 	mov	local01, result1
1c4d0     00 40 27 FF 
1c4d4     00 12 06 F6 | 	mov	arg01, ##1317011456
1c4d8     10 15 02 F6 | 	mov	arg02, local02
1c4dc     E4 F3 BF FD | 	call	#__system___float_mul
1c4e0     FD 12 02 F6 | 	mov	arg01, result1
1c4e4     00 14 06 F6 | 	mov	arg02, #0
1c4e8     A0 F8 BF FD | 	call	#__system___float_tointeger
1c4ec     FD 22 02 F6 | 	mov	local03, result1
1c4f0     00 40 27 FF 
1c4f4     00 12 06 F6 | 	mov	arg01, ##1317011456
1c4f8     0F 15 02 F6 | 	mov	arg02, local01
1c4fc     C4 F3 BF FD | 	call	#__system___float_mul
1c500     FD 12 02 F6 | 	mov	arg01, result1
1c504     00 14 06 F6 | 	mov	arg02, #0
1c508     80 F8 BF FD | 	call	#__system___float_tointeger
1c50c     FD 22 52 FD | 	qvector	local03, result1
1c510     87 24 20 FF 
1c514     DB 23 06 F6 | 	mov	local03, ##1078530011
1c518     19 12 62 FD | 	getqy	arg01
1c51c     01 12 C6 F0 | 	sar	arg01, #1
1c520     09 13 52 F6 | 	abs	arg01, arg01 wc
1c524     1F 24 C6 C9 |  if_b	decod	local04, #31
1c528     00 24 06 36 |  if_ae	mov	local04, #0
1c52c     90 EF BF FD | 	call	#__system___float_fromuns
1c530     12 FB 61 F5 | 	xor	result1, local04
1c534     FD 12 02 F6 | 	mov	arg01, result1
1c538     00 40 27 FF 
1c53c     00 14 06 F6 | 	mov	arg02, ##1317011456
1c540     84 F5 BF FD | 	call	#__system___float_div
1c544     FD 14 02 F6 | 	mov	arg02, result1
1c548     11 13 02 F6 | 	mov	arg01, local03
1c54c     74 F3 BF FD | 	call	#__system___float_mul
1c550                 | LR__2681
1c550     A7 F0 03 F6 | 	mov	ptra, fp
1c554     B2 00 A0 FD | 	call	#popregs_
1c558                 | __system____builtin_atan2f_ret
1c558     2D 00 64 FD | 	ret
1c55c                 | 
1c55c                 | __system____builtin_exp2f
1c55c     04 4A 05 F6 | 	mov	COUNT_, #4
1c560     A8 00 A0 FD | 	call	#pushregs_
1c564     09 1F 02 F6 | 	mov	local01, arg01
1c568     00 7F 21 FF 
1c56c     00 14 06 F6 | 	mov	arg02, ##1123942400
1c570     01 16 66 F6 | 	neg	arg03, #1
1c574     80 F7 BF FD | 	call	#__system___float_cmp
1c578     00 FA 55 F2 | 	cmps	result1, #0 wc
1c57c     00 C0 3F 3F 
1c580     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1c584     DC 00 90 3D |  if_ae	jmp	#LR__2691
1c588     0F 13 02 F6 | 	mov	arg01, local01
1c58c     00 7F 61 FF 
1c590     00 14 06 F6 | 	mov	arg02, ##-1023541248
1c594     01 16 06 F6 | 	mov	arg03, #1
1c598     5C F7 BF FD | 	call	#__system___float_cmp
1c59c     00 FA 55 F2 | 	cmps	result1, #0 wc
1c5a0     00 FA 05 C6 |  if_b	mov	result1, #0
1c5a4     BC 00 90 CD |  if_b	jmp	#LR__2691
1c5a8     0F 13 02 F6 | 	mov	arg01, local01
1c5ac     00 14 06 F6 | 	mov	arg02, #0
1c5b0     D8 F7 BF FD | 	call	#__system___float_tointeger
1c5b4     FD 20 02 F6 | 	mov	local02, result1
1c5b8     10 13 52 F6 | 	abs	arg01, local02 wc
1c5bc     1F 22 C6 C9 |  if_b	decod	local03, #31
1c5c0     00 22 06 36 |  if_ae	mov	local03, #0
1c5c4     F8 EE BF FD | 	call	#__system___float_fromuns
1c5c8     11 FB 61 F5 | 	xor	result1, local03
1c5cc     FD 14 02 F6 | 	mov	arg02, result1
1c5d0     0F 13 02 F6 | 	mov	arg01, local01
1c5d4     1F 14 E6 F4 | 	bitnot	arg02, #31
1c5d8     18 EF BF FD | 	call	#__system___float_add
1c5dc     FD 24 02 F6 | 	mov	local04, result1
1c5e0     12 13 02 F6 | 	mov	arg01, local04
1c5e4     00 14 06 F6 | 	mov	arg02, #0
1c5e8     01 16 06 F6 | 	mov	arg03, #1
1c5ec     08 F7 BF FD | 	call	#__system___float_cmp
1c5f0     00 FA 55 F2 | 	cmps	result1, #0 wc
1c5f4     18 00 90 3D |  if_ae	jmp	#LR__2690
1c5f8     12 13 02 F6 | 	mov	arg01, local04
1c5fc     00 C0 1F FF 
1c600     00 14 06 F6 | 	mov	arg02, ##1065353216
1c604     EC EE BF FD | 	call	#__system___float_add
1c608     FD 24 02 F6 | 	mov	local04, result1
1c60c     01 20 86 F1 | 	sub	local02, #1
1c610                 | LR__2690
1c610     7F 20 06 F1 | 	add	local02, #127
1c614     17 20 66 F0 | 	shl	local02, #23
1c618     12 13 02 F6 | 	mov	arg01, local04
1c61c     00 80 26 FF 
1c620     00 14 06 F6 | 	mov	arg02, ##1291845632
1c624     9C F2 BF FD | 	call	#__system___float_mul
1c628     FD 12 02 F6 | 	mov	arg01, result1
1c62c     00 14 06 F6 | 	mov	arg02, #0
1c630     58 F7 BF FD | 	call	#__system___float_tointeger
1c634     FD 24 0A F6 | 	mov	local04, result1 wz
1c638     10 FB 01 A6 |  if_e	mov	result1, local02
1c63c     24 00 90 AD |  if_e	jmp	#LR__2691
1c640     3E 24 26 F4 | 	bith	local04, #62
1c644     0F 24 62 FD | 	qexp	local04
1c648     10 13 02 F6 | 	mov	arg01, local02
1c64c     18 14 62 FD | 	getqx	arg02
1c650     01 14 06 F1 | 	add	arg02, #1
1c654     01 14 46 F0 | 	shr	arg02, #1
1c658     00 80 1F FF 
1c65c     00 14 06 F1 | 	add	arg02, ##1056964608
1c660     60 F2 BF FD | 	call	#__system___float_mul
1c664                 | LR__2691
1c664     A7 F0 03 F6 | 	mov	ptra, fp
1c668     B2 00 A0 FD | 	call	#popregs_
1c66c                 | __system____builtin_exp2f_ret
1c66c     2D 00 64 FD | 	ret
1c670                 | 
1c670                 | __system____builtin_log2f
1c670     06 4A 05 F6 | 	mov	COUNT_, #6
1c674     A8 00 A0 FD | 	call	#pushregs_
1c678     09 1F 02 F6 | 	mov	local01, arg01
1c67c     09 21 0A F6 | 	mov	local02, arg01 wz
1c680     00 00 40 5F 
1c684     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
1c688     00 40 00 AF 
1c68c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1c690     08 01 90 AD |  if_e	jmp	#LR__2704
1c694     00 20 56 F2 | 	cmps	local02, #0 wc
1c698     00 E0 3F CF 
1c69c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1c6a0     F8 00 90 CD |  if_b	jmp	#LR__2704
1c6a4     0F 13 02 F6 | 	mov	arg01, local01
1c6a8     00 90 20 FF 
1c6ac     00 14 06 F6 | 	mov	arg02, ##1092616192
1c6b0     01 16 06 F6 | 	mov	arg03, #1
1c6b4     40 F6 BF FD | 	call	#__system___float_cmp
1c6b8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c6bc     4D 2A 20 AF 
1c6c0     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
1c6c4     D4 00 90 AD |  if_e	jmp	#LR__2704
1c6c8     0F 13 02 F6 | 	mov	arg01, local01
1c6cc     FC 16 20 FF 
1c6d0     54 14 06 F6 | 	mov	arg02, ##1076754516
1c6d4     01 16 06 F6 | 	mov	arg03, #1
1c6d8     1C F6 BF FD | 	call	#__system___float_cmp
1c6dc     00 FA 0D F2 | 	cmp	result1, #0 wz
1c6e0     55 DC 1F AF 
1c6e4     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
1c6e8     B0 00 90 AD |  if_e	jmp	#LR__2704
1c6ec     10 23 02 F6 | 	mov	local03, local02
1c6f0     17 22 46 F0 | 	shr	local03, #23
1c6f4     11 23 E2 F8 | 	getbyte	local03, local03, #0
1c6f8     17 21 06 F4 | 	bitl	local02, #279
1c6fc     10 25 02 F6 | 	mov	local04, local02
1c700     FF 22 0E F2 | 	cmp	local03, #255 wz
1c704     1C 00 90 5D |  if_ne	jmp	#LR__2700
1c708     00 24 0E F2 | 	cmp	local04, #0 wz
1c70c     00 C0 3F 5F 
1c710     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1c714     00 E0 3F AF 
1c718     00 26 06 A6 |  if_e	mov	local05, ##2143289344
1c71c     13 FB 01 F6 | 	mov	result1, local05
1c720     78 00 90 FD | 	jmp	#LR__2704
1c724                 | LR__2700
1c724     00 22 0E F2 | 	cmp	local03, #0 wz
1c728     17 24 26 54 |  if_ne	bith	local04, #23
1c72c     7F 22 86 51 |  if_ne	sub	local03, #127
1c730     28 00 90 5D |  if_ne	jmp	#LR__2703
1c734     00 24 0E F2 | 	cmp	local04, #0 wz
1c738     00 40 00 AF 
1c73c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1c740     58 00 90 AD |  if_e	jmp	#LR__2704
1c744     7E 22 66 F6 | 	neg	local03, #126
1c748     97 08 48 FB | 	callpa	#(@LR__2702-@LR__2701)>>2,fcache_load_ptr_
1c74c                 | LR__2701
1c74c     17 24 2E F4 | 	testbn	local04, #23 wz
1c750     01 24 66 A0 |  if_e	shl	local04, #1
1c754     01 22 06 A1 |  if_e	add	local03, #1
1c758     F0 FF 9F AD |  if_e	jmp	#LR__2701
1c75c                 | LR__2702
1c75c                 | LR__2703
1c75c     0E 24 62 FD | 	qlog	local04
1c760     01 22 86 F1 | 	sub	local03, #1
1c764     11 13 52 F6 | 	abs	arg01, local03 wc
1c768     1F 28 C6 C9 |  if_b	decod	local06, #31
1c76c     00 28 06 36 |  if_ae	mov	local06, #0
1c770     18 26 62 FD | 	getqx	local05
1c774     9B 26 06 F4 | 	bitl	local05, #155
1c778     08 26 06 F1 | 	add	local05, #8
1c77c     04 26 46 F0 | 	shr	local05, #4
1c780     00 C0 1F FF 
1c784     00 26 06 F1 | 	add	local05, ##1065353216
1c788     34 ED BF FD | 	call	#__system___float_fromuns
1c78c     14 FB 61 F5 | 	xor	result1, local06
1c790     FD 14 02 F6 | 	mov	arg02, result1
1c794     13 13 02 F6 | 	mov	arg01, local05
1c798     58 ED BF FD | 	call	#__system___float_add
1c79c                 | LR__2704
1c79c     A7 F0 03 F6 | 	mov	ptra, fp
1c7a0     B2 00 A0 FD | 	call	#popregs_
1c7a4                 | __system____builtin_log2f_ret
1c7a4     2D 00 64 FD | 	ret
1c7a8                 | 
1c7a8                 | __system____builtin_powf
1c7a8     04 4A 05 F6 | 	mov	COUNT_, #4
1c7ac     A8 00 A0 FD | 	call	#pushregs_
1c7b0     09 1F 02 F6 | 	mov	local01, arg01
1c7b4     0A 21 02 F6 | 	mov	local02, arg02
1c7b8     10 13 02 F6 | 	mov	arg01, local02
1c7bc     00 14 06 F6 | 	mov	arg02, #0
1c7c0     C8 F5 BF FD | 	call	#__system___float_tointeger
1c7c4     FD 22 02 F6 | 	mov	local03, result1
1c7c8     11 13 52 F6 | 	abs	arg01, local03 wc
1c7cc     1F 24 C6 C9 |  if_b	decod	local04, #31
1c7d0     00 24 06 36 |  if_ae	mov	local04, #0
1c7d4     E8 EC BF FD | 	call	#__system___float_fromuns
1c7d8     12 FB 61 F5 | 	xor	result1, local04
1c7dc     FD 12 02 F6 | 	mov	arg01, result1
1c7e0     10 15 02 F6 | 	mov	arg02, local02
1c7e4     01 16 06 F6 | 	mov	arg03, #1
1c7e8     0C F5 BF FD | 	call	#__system___float_cmp
1c7ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1c7f0     18 00 90 5D |  if_ne	jmp	#LR__2710
1c7f4     00 C0 1F FF 
1c7f8     00 12 06 F6 | 	mov	arg01, ##1065353216
1c7fc     0F 15 02 F6 | 	mov	arg02, local01
1c800     11 17 02 F6 | 	mov	arg03, local03
1c804     68 00 B0 FD | 	call	#__system___float_pow_n
1c808     58 00 90 FD | 	jmp	#LR__2711
1c80c                 | LR__2710
1c80c     0F 13 02 F6 | 	mov	arg01, local01
1c810     00 14 06 F6 | 	mov	arg02, #0
1c814     01 16 06 F6 | 	mov	arg03, #1
1c818     DC F4 BF FD | 	call	#__system___float_cmp
1c81c     00 FA 55 F2 | 	cmps	result1, #0 wc
1c820     00 E0 3F CF 
1c824     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1c828     38 00 90 CD |  if_b	jmp	#LR__2711
1c82c     0F 13 02 F6 | 	mov	arg01, local01
1c830     00 14 06 F6 | 	mov	arg02, #0
1c834     01 16 06 F6 | 	mov	arg03, #1
1c838     BC F4 BF FD | 	call	#__system___float_cmp
1c83c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c840     00 FA 05 A6 |  if_e	mov	result1, #0
1c844     1C 00 90 AD |  if_e	jmp	#LR__2711
1c848     0F 13 02 F6 | 	mov	arg01, local01
1c84c     20 FE BF FD | 	call	#__system____builtin_log2f
1c850     FD 12 02 F6 | 	mov	arg01, result1
1c854     10 15 02 F6 | 	mov	arg02, local02
1c858     68 F0 BF FD | 	call	#__system___float_mul
1c85c     FD 12 02 F6 | 	mov	arg01, result1
1c860     F8 FC BF FD | 	call	#__system____builtin_exp2f
1c864                 | LR__2711
1c864     A7 F0 03 F6 | 	mov	ptra, fp
1c868     B2 00 A0 FD | 	call	#popregs_
1c86c                 | __system____builtin_powf_ret
1c86c     2D 00 64 FD | 	ret
1c870                 | 
1c870                 | __system___float_pow_n
1c870     05 4A 05 F6 | 	mov	COUNT_, #5
1c874     A8 00 A0 FD | 	call	#pushregs_
1c878     09 1F 02 F6 | 	mov	local01, arg01
1c87c     0A 21 02 F6 | 	mov	local02, arg02
1c880     0B 23 02 F6 | 	mov	local03, arg03
1c884     00 22 56 F2 | 	cmps	local03, #0 wc
1c888     18 00 90 3D |  if_ae	jmp	#LR__2720
1c88c     01 24 06 F6 | 	mov	local04, #1
1c890     11 23 62 F6 | 	neg	local03, local03
1c894     00 22 56 F2 | 	cmps	local03, #0 wc
1c898     00 FA 05 C6 |  if_b	mov	result1, #0
1c89c     94 00 90 CD |  if_b	jmp	#LR__2728
1c8a0     04 00 90 FD | 	jmp	#LR__2721
1c8a4                 | LR__2720
1c8a4     00 24 06 F6 | 	mov	local04, #0
1c8a8                 | LR__2721
1c8a8     00 C0 1F FF 
1c8ac     00 26 06 F6 | 	mov	local05, ##1065353216
1c8b0                 | LR__2722
1c8b0     01 22 56 F2 | 	cmps	local03, #1 wc
1c8b4     30 00 90 CD |  if_b	jmp	#LR__2724
1c8b8     01 22 CE F7 | 	test	local03, #1 wz
1c8bc     10 00 90 AD |  if_e	jmp	#LR__2723
1c8c0     13 13 02 F6 | 	mov	arg01, local05
1c8c4     10 15 02 F6 | 	mov	arg02, local02
1c8c8     F8 EF BF FD | 	call	#__system___float_mul
1c8cc     FD 26 02 F6 | 	mov	local05, result1
1c8d0                 | LR__2723
1c8d0     01 22 C6 F0 | 	sar	local03, #1
1c8d4     10 13 02 F6 | 	mov	arg01, local02
1c8d8     10 15 02 F6 | 	mov	arg02, local02
1c8dc     E4 EF BF FD | 	call	#__system___float_mul
1c8e0     FD 20 02 F6 | 	mov	local02, result1
1c8e4     C8 FF 9F FD | 	jmp	#LR__2722
1c8e8                 | LR__2724
1c8e8     00 24 0E F2 | 	cmp	local04, #0 wz
1c8ec     14 00 90 AD |  if_e	jmp	#LR__2725
1c8f0     0F 13 02 F6 | 	mov	arg01, local01
1c8f4     13 15 02 F6 | 	mov	arg02, local05
1c8f8     CC F1 BF FD | 	call	#__system___float_div
1c8fc     FD 26 02 F6 | 	mov	local05, result1
1c900     2C 00 90 FD | 	jmp	#LR__2727
1c904                 | LR__2725
1c904     0F 13 02 F6 | 	mov	arg01, local01
1c908     00 C0 1F FF 
1c90c     00 14 06 F6 | 	mov	arg02, ##1065353216
1c910     01 16 06 F6 | 	mov	arg03, #1
1c914     E0 F3 BF FD | 	call	#__system___float_cmp
1c918     00 FA 0D F2 | 	cmp	result1, #0 wz
1c91c     10 00 90 AD |  if_e	jmp	#LR__2726
1c920     0F 13 02 F6 | 	mov	arg01, local01
1c924     13 15 02 F6 | 	mov	arg02, local05
1c928     98 EF BF FD | 	call	#__system___float_mul
1c92c     FD 26 02 F6 | 	mov	local05, result1
1c930                 | LR__2726
1c930                 | LR__2727
1c930     13 FB 01 F6 | 	mov	result1, local05
1c934                 | LR__2728
1c934     A7 F0 03 F6 | 	mov	ptra, fp
1c938     B2 00 A0 FD | 	call	#popregs_
1c93c                 | __system___float_pow_n_ret
1c93c     2D 00 64 FD | 	ret
1c940                 | 
1c940                 | __system___gc_ptrs
1c940     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1c944     00 03 02 F6 | 	mov	_var02, _var01
1c948     76 01 00 FF 
1c94c     F8 03 06 F1 | 	add	_var02, ##191992
1c950     00 FD 09 FB | 	rdlong	result2, _var01 wz
1c954     74 00 90 5D |  if_ne	jmp	#LR__2730
1c958     01 FD 01 F6 | 	mov	result2, _var02
1c95c     00 FD 81 F1 | 	sub	result2, _var01
1c960     00 03 58 FC | 	wrword	#1, _var01
1c964     00 FB 01 F6 | 	mov	result1, _var01
1c968     02 FA 05 F1 | 	add	result1, #2
1c96c     36 00 80 FF 
1c970     FD 20 59 FC | 	wrword	##27792, result1
1c974     00 FB 01 F6 | 	mov	result1, _var01
1c978     04 FA 05 F1 | 	add	result1, #4
1c97c     FD 00 58 FC | 	wrword	#0, result1
1c980     00 FB 01 F6 | 	mov	result1, _var01
1c984     06 FA 05 F1 | 	add	result1, #6
1c988     FD 02 58 FC | 	wrword	#1, result1
1c98c     10 00 06 F1 | 	add	_var01, #16
1c990     FE FC 51 F6 | 	abs	result2, result2 wc
1c994     04 FC 45 F0 | 	shr	result2, #4
1c998     FE FC 81 F6 | 	negc	result2, result2
1c99c     00 FD 51 FC | 	wrword	result2, _var01
1c9a0     00 FD 01 F6 | 	mov	result2, _var01
1c9a4     02 FC 05 F1 | 	add	result2, #2
1c9a8     36 00 80 FF 
1c9ac     FE 1E 59 FC | 	wrword	##27791, result2
1c9b0     00 FD 01 F6 | 	mov	result2, _var01
1c9b4     04 FC 05 F1 | 	add	result2, #4
1c9b8     FE 00 58 FC | 	wrword	#0, result2
1c9bc     00 FD 01 F6 | 	mov	result2, _var01
1c9c0     06 FC 05 F1 | 	add	result2, #6
1c9c4     FE 00 58 FC | 	wrword	#0, result2
1c9c8     10 00 86 F1 | 	sub	_var01, #16
1c9cc                 | LR__2730
1c9cc     00 FB 01 F6 | 	mov	result1, _var01
1c9d0     01 FD 01 F6 | 	mov	result2, _var02
1c9d4                 | __system___gc_ptrs_ret
1c9d4     2D 00 64 FD | 	ret
1c9d8                 | 
1c9d8                 | __system___gc_tryalloc
1c9d8     0B 4A 05 F6 | 	mov	COUNT_, #11
1c9dc     A8 00 A0 FD | 	call	#pushregs_
1c9e0     09 1F 02 F6 | 	mov	local01, arg01
1c9e4     0A 21 02 F6 | 	mov	local02, arg02
1c9e8     54 FF BF FD | 	call	#__system___gc_ptrs
1c9ec     FD 22 02 F6 | 	mov	local03, result1
1c9f0     FE 24 02 F6 | 	mov	local04, result2
1c9f4     11 27 02 F6 | 	mov	local05, local03
1c9f8     00 28 06 F6 | 	mov	local06, #0
1c9fc     97 1E 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
1ca00                 | LR__2740
1ca00     13 2B 02 F6 | 	mov	local07, local05
1ca04     06 26 06 F1 | 	add	local05, #6
1ca08     13 15 EA FA | 	rdword	arg02, local05 wz
1ca0c     11 13 02 F6 | 	mov	arg01, local03
1ca10     00 FA 05 A6 |  if_e	mov	result1, #0
1ca14     04 14 66 50 |  if_ne	shl	arg02, #4
1ca18     0A 13 02 51 |  if_ne	add	arg01, arg02
1ca1c     09 FB 01 56 |  if_ne	mov	result1, arg01
1ca20     FD 26 0A F6 | 	mov	local05, result1 wz
1ca24     13 29 E2 5A |  if_ne	rdword	local06, local05
1ca28     00 26 0E F2 | 	cmp	local05, #0 wz
1ca2c     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1ca30     08 00 90 1D |  if_a	jmp	#LR__2742
1ca34     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
1ca38     C4 FF 9F 1D |  if_a	jmp	#LR__2740
1ca3c                 | LR__2741
1ca3c                 | LR__2742
1ca3c     00 26 0E F2 | 	cmp	local05, #0 wz
1ca40     13 FB 01 A6 |  if_e	mov	result1, local05
1ca44     3C 01 90 AD |  if_e	jmp	#LR__2745
1ca48     13 FD 01 F6 | 	mov	result2, local05
1ca4c     06 FC 05 F1 | 	add	result2, #6
1ca50     FE 2C E2 FA | 	rdword	local08, result2
1ca54     14 1F 52 F2 | 	cmps	local01, local06 wc
1ca58     C0 00 90 3D |  if_ae	jmp	#LR__2744
1ca5c     13 1F 52 FC | 	wrword	local01, local05
1ca60     13 13 02 F6 | 	mov	arg01, local05
1ca64     0F 2D 02 F6 | 	mov	local08, local01
1ca68     04 2C 66 F0 | 	shl	local08, #4
1ca6c     16 13 02 F1 | 	add	arg01, local08
1ca70     0F 29 82 F1 | 	sub	local06, local01
1ca74     09 29 52 FC | 	wrword	local06, arg01
1ca78     09 2D 02 F6 | 	mov	local08, arg01
1ca7c     02 2C 06 F1 | 	add	local08, #2
1ca80     36 00 80 FF 
1ca84     16 1F 59 FC | 	wrword	##27791, local08
1ca88     13 15 0A F6 | 	mov	arg02, local05 wz
1ca8c     00 FA 05 A6 |  if_e	mov	result1, #0
1ca90     11 15 82 51 |  if_ne	sub	arg02, local03
1ca94     04 14 46 50 |  if_ne	shr	arg02, #4
1ca98     0A FB 01 56 |  if_ne	mov	result1, arg02
1ca9c     09 2D 02 F6 | 	mov	local08, arg01
1caa0     04 2C 06 F1 | 	add	local08, #4
1caa4     16 FB 51 FC | 	wrword	result1, local08
1caa8     13 2D 02 F6 | 	mov	local08, local05
1caac     06 2C 06 F1 | 	add	local08, #6
1cab0     09 15 02 F6 | 	mov	arg02, arg01
1cab4     16 2D E2 FA | 	rdword	local08, local08
1cab8     06 14 06 F1 | 	add	arg02, #6
1cabc     0A 2D 52 FC | 	wrword	local08, arg02
1cac0     09 2F 02 F6 | 	mov	local09, arg01
1cac4     17 15 0A F6 | 	mov	arg02, local09 wz
1cac8     00 FA 05 A6 |  if_e	mov	result1, #0
1cacc     11 15 82 51 |  if_ne	sub	arg02, local03
1cad0     04 14 46 50 |  if_ne	shr	arg02, #4
1cad4     0A FB 01 56 |  if_ne	mov	result1, arg02
1cad8     FD 2C 02 F6 | 	mov	local08, result1
1cadc     09 31 EA FA | 	rdword	local10, arg01 wz
1cae0     00 FA 05 A6 |  if_e	mov	result1, #0
1cae4     04 30 66 50 |  if_ne	shl	local10, #4
1cae8     18 13 02 51 |  if_ne	add	arg01, local10
1caec     09 FB 01 56 |  if_ne	mov	result1, arg01
1caf0     FD 32 0A F6 | 	mov	local11, result1 wz
1caf4     24 00 90 AD |  if_e	jmp	#LR__2743
1caf8     12 33 52 F2 | 	cmps	local11, local04 wc
1cafc     1C 00 90 3D |  if_ae	jmp	#LR__2743
1cb00     17 15 0A F6 | 	mov	arg02, local09 wz
1cb04     00 FA 05 A6 |  if_e	mov	result1, #0
1cb08     11 15 82 51 |  if_ne	sub	arg02, local03
1cb0c     04 14 46 50 |  if_ne	shr	arg02, #4
1cb10     0A FB 01 56 |  if_ne	mov	result1, arg02
1cb14     04 32 06 F1 | 	add	local11, #4
1cb18     19 FB 51 FC | 	wrword	result1, local11
1cb1c                 | LR__2743
1cb1c                 | LR__2744
1cb1c     06 2A 06 F1 | 	add	local07, #6
1cb20     15 2D 52 FC | 	wrword	local08, local07
1cb24     36 00 00 FF 
1cb28     80 2E 06 F6 | 	mov	local09, ##27776
1cb2c     10 2F 42 F5 | 	or	local09, local02
1cb30     00 FA 05 F6 | 	mov	result1, #0
1cb34     01 FA 61 FD | 	cogid	result1
1cb38     FD 2E 42 F5 | 	or	local09, result1
1cb3c     13 33 02 F6 | 	mov	local11, local05
1cb40     02 32 06 F1 | 	add	local11, #2
1cb44     19 2F 52 FC | 	wrword	local09, local11
1cb48     11 2F 02 F6 | 	mov	local09, local03
1cb4c     08 2E 06 F1 | 	add	local09, #8
1cb50     13 33 02 F6 | 	mov	local11, local05
1cb54     17 2F E2 FA | 	rdword	local09, local09
1cb58     06 32 06 F1 | 	add	local11, #6
1cb5c     19 2F 52 FC | 	wrword	local09, local11
1cb60     13 15 0A F6 | 	mov	arg02, local05 wz
1cb64     00 FA 05 A6 |  if_e	mov	result1, #0
1cb68     11 15 82 51 |  if_ne	sub	arg02, local03
1cb6c     04 14 46 50 |  if_ne	shr	arg02, #4
1cb70     0A FB 01 56 |  if_ne	mov	result1, arg02
1cb74     08 22 06 F1 | 	add	local03, #8
1cb78     11 FB 51 FC | 	wrword	result1, local03
1cb7c     08 26 06 F1 | 	add	local05, #8
1cb80     13 FB 01 F6 | 	mov	result1, local05
1cb84                 | LR__2745
1cb84     A7 F0 03 F6 | 	mov	ptra, fp
1cb88     B2 00 A0 FD | 	call	#popregs_
1cb8c                 | __system___gc_tryalloc_ret
1cb8c     2D 00 64 FD | 	ret
1cb90                 | 
1cb90                 | __system___gc_alloc_managed
1cb90     01 4A 05 F6 | 	mov	COUNT_, #1
1cb94     A8 00 A0 FD | 	call	#pushregs_
1cb98     09 1F 02 F6 | 	mov	local01, arg01
1cb9c     00 14 06 F6 | 	mov	arg02, #0
1cba0     1C 00 B0 FD | 	call	#__system___gc_doalloc
1cba4     FD 14 0A F6 | 	mov	arg02, result1 wz
1cba8     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
1cbac     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
1cbb0     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
1cbb4     A7 F0 03 F6 | 	mov	ptra, fp
1cbb8     B2 00 A0 FD | 	call	#popregs_
1cbbc                 | __system___gc_alloc_managed_ret
1cbbc     2D 00 64 FD | 	ret
1cbc0                 | 
1cbc0                 | __system___gc_doalloc
1cbc0     06 4A 05 F6 | 	mov	COUNT_, #6
1cbc4     A8 00 A0 FD | 	call	#pushregs_
1cbc8     09 1F 0A F6 | 	mov	local01, arg01 wz
1cbcc     0A 21 02 F6 | 	mov	local02, arg02
1cbd0     00 FA 05 A6 |  if_e	mov	result1, #0
1cbd4     8C 00 90 AD |  if_e	jmp	#LR__2757
1cbd8     17 1E 06 F1 | 	add	local01, #23
1cbdc     0F 1E 26 F5 | 	andn	local01, #15
1cbe0     04 1E 46 F0 | 	shr	local01, #4
1cbe4     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cbe8     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cbec     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cbf0     E4 C1 BF FD | 	call	#__system___lockmem
1cbf4     0F 13 02 F6 | 	mov	arg01, local01
1cbf8     10 15 02 F6 | 	mov	arg02, local02
1cbfc     D8 FD BF FD | 	call	#__system___gc_tryalloc
1cc00     FD 22 0A F6 | 	mov	local03, result1 wz
1cc04     14 00 90 5D |  if_ne	jmp	#LR__2750
1cc08     70 03 B0 FD | 	call	#__system___gc_docollect
1cc0c     0F 13 02 F6 | 	mov	arg01, local01
1cc10     10 15 02 F6 | 	mov	arg02, local02
1cc14     C0 FD BF FD | 	call	#__system___gc_tryalloc
1cc18     FD 22 02 F6 | 	mov	local03, result1
1cc1c                 | LR__2750
1cc1c     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cc20     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cc24     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cc28     09 01 68 FC | 	wrlong	#0, arg01
1cc2c     00 22 0E F2 | 	cmp	local03, #0 wz
1cc30     2C 00 90 AD |  if_e	jmp	#LR__2756
1cc34     04 1E 66 F0 | 	shl	local01, #4
1cc38     08 1E 86 F1 | 	sub	local01, #8
1cc3c     0F 25 52 F6 | 	abs	local04, local01 wc
1cc40     02 24 46 F0 | 	shr	local04, #2
1cc44     12 27 8A F6 | 	negc	local05, local04 wz
1cc48     11 29 02 F6 | 	mov	local06, local03
1cc4c     10 00 90 AD |  if_e	jmp	#LR__2755
1cc50     97 06 48 FB | 	callpa	#(@LR__2753-@LR__2751)>>2,fcache_load_ptr_
1cc54                 | LR__2751
1cc54     13 05 D8 FC | 	rep	@LR__2754, local05
1cc58                 | LR__2752
1cc58     14 01 68 FC | 	wrlong	#0, local06
1cc5c     04 28 06 F1 | 	add	local06, #4
1cc60                 | LR__2753
1cc60                 | LR__2754
1cc60                 | LR__2755
1cc60                 | LR__2756
1cc60     11 FB 01 F6 | 	mov	result1, local03
1cc64                 | LR__2757
1cc64     A7 F0 03 F6 | 	mov	ptra, fp
1cc68     B2 00 A0 FD | 	call	#popregs_
1cc6c                 | __system___gc_doalloc_ret
1cc6c     2D 00 64 FD | 	ret
1cc70                 | 
1cc70                 | __system___gc_isvalidptr
1cc70     F8 16 06 F4 | 	bitl	arg03, #248
1cc74     08 16 86 F1 | 	sub	arg03, #8
1cc78     09 17 52 F2 | 	cmps	arg03, arg01 wc
1cc7c     08 00 90 CD |  if_b	jmp	#LR__2760
1cc80     0A 17 52 F2 | 	cmps	arg03, arg02 wc
1cc84     08 00 90 CD |  if_b	jmp	#LR__2761
1cc88                 | LR__2760
1cc88     00 FA 05 F6 | 	mov	result1, #0
1cc8c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
1cc90                 | LR__2761
1cc90     0B 01 02 F6 | 	mov	_var01, arg03
1cc94     09 01 62 F5 | 	xor	_var01, arg01
1cc98     0F 00 CE F7 | 	test	_var01, #15 wz
1cc9c     00 FA 05 56 |  if_ne	mov	result1, #0
1cca0     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
1cca4     0B 01 02 F6 | 	mov	_var01, arg03
1cca8     02 00 06 F1 | 	add	_var01, #2
1ccac     00 01 E2 FA | 	rdword	_var01, _var01
1ccb0     7F 00 00 FF 
1ccb4     C0 01 06 F5 | 	and	_var01, ##65472
1ccb8     36 00 00 FF 
1ccbc     80 00 0E F2 | 	cmp	_var01, ##27776 wz
1ccc0     00 FA 05 56 |  if_ne	mov	result1, #0
1ccc4     0B FB 01 A6 |  if_e	mov	result1, arg03
1ccc8                 | __system___gc_isvalidptr_ret
1ccc8     2D 00 64 FD | 	ret
1cccc                 | 
1cccc                 | __system___gc_free
1cccc     09 17 02 F6 | 	mov	arg03, arg01
1ccd0     6C FC BF FD | 	call	#__system___gc_ptrs
1ccd4     FD 12 02 F6 | 	mov	arg01, result1
1ccd8     FE 14 02 F6 | 	mov	arg02, result2
1ccdc     90 FF BF FD | 	call	#__system___gc_isvalidptr
1cce0     FD 14 0A F6 | 	mov	arg02, result1 wz
1cce4     28 00 90 AD |  if_e	jmp	#LR__2770
1cce8     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1ccec     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1ccf0     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1ccf4     E0 C0 BF FD | 	call	#__system___lockmem
1ccf8     0A 13 02 F6 | 	mov	arg01, arg02
1ccfc     14 00 B0 FD | 	call	#__system___gc_dofree
1cd00     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cd04     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cd08     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cd0c     09 01 68 FC | 	wrlong	#0, arg01
1cd10                 | LR__2770
1cd10                 | __system___gc_free_ret
1cd10     2D 00 64 FD | 	ret
1cd14                 | 
1cd14                 | __system___gc_dofree
1cd14     06 4A 05 F6 | 	mov	COUNT_, #6
1cd18     A8 00 A0 FD | 	call	#pushregs_
1cd1c     09 1F 02 F6 | 	mov	local01, arg01
1cd20     1C FC BF FD | 	call	#__system___gc_ptrs
1cd24     FD 20 02 F6 | 	mov	local02, result1
1cd28     FE 22 02 F6 | 	mov	local03, result2
1cd2c     0F 15 02 F6 | 	mov	arg02, local01
1cd30     02 14 06 F1 | 	add	arg02, #2
1cd34     36 00 80 FF 
1cd38     0A 1F 59 FC | 	wrword	##27791, arg02
1cd3c     0F 25 02 F6 | 	mov	local04, local01
1cd40     0F 13 02 F6 | 	mov	arg01, local01
1cd44     09 27 EA FA | 	rdword	local05, arg01 wz
1cd48     00 FA 05 A6 |  if_e	mov	result1, #0
1cd4c     04 26 66 50 |  if_ne	shl	local05, #4
1cd50     13 13 02 51 |  if_ne	add	arg01, local05
1cd54     09 FB 01 56 |  if_ne	mov	result1, arg01
1cd58     FD 28 02 F6 | 	mov	local06, result1
1cd5c     97 24 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
1cd60                 | LR__2780
1cd60     04 24 06 F1 | 	add	local04, #4
1cd64     12 15 EA FA | 	rdword	arg02, local04 wz
1cd68     10 13 02 F6 | 	mov	arg01, local02
1cd6c     00 FA 05 A6 |  if_e	mov	result1, #0
1cd70     04 14 66 50 |  if_ne	shl	arg02, #4
1cd74     0A 13 02 51 |  if_ne	add	arg01, arg02
1cd78     09 FB 01 56 |  if_ne	mov	result1, arg01
1cd7c     FD 24 0A F6 | 	mov	local04, result1 wz
1cd80     24 00 90 AD |  if_e	jmp	#LR__2782
1cd84     12 13 02 F6 | 	mov	arg01, local04
1cd88     00 FA 05 F6 | 	mov	result1, #0
1cd8c     02 12 06 F1 | 	add	arg01, #2
1cd90     09 13 E2 FA | 	rdword	arg01, arg01
1cd94     36 00 00 FF 
1cd98     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1cd9c     01 FA 65 A6 |  if_e	neg	result1, #1
1cda0     00 FA 0D F2 | 	cmp	result1, #0 wz
1cda4     B8 FF 9F AD |  if_e	jmp	#LR__2780
1cda8                 | LR__2781
1cda8                 | LR__2782
1cda8     00 24 0E F2 | 	cmp	local04, #0 wz
1cdac     10 25 02 A6 |  if_e	mov	local04, local02
1cdb0     12 15 02 F6 | 	mov	arg02, local04
1cdb4     06 14 06 F1 | 	add	arg02, #6
1cdb8     0F 13 02 F6 | 	mov	arg01, local01
1cdbc     0A 15 E2 FA | 	rdword	arg02, arg02
1cdc0     06 12 06 F1 | 	add	arg01, #6
1cdc4     09 15 52 FC | 	wrword	arg02, arg01
1cdc8     0F 15 0A F6 | 	mov	arg02, local01 wz
1cdcc     00 FA 05 A6 |  if_e	mov	result1, #0
1cdd0     10 15 82 51 |  if_ne	sub	arg02, local02
1cdd4     04 14 46 50 |  if_ne	shr	arg02, #4
1cdd8     0A FB 01 56 |  if_ne	mov	result1, arg02
1cddc     12 15 02 F6 | 	mov	arg02, local04
1cde0     06 14 06 F1 | 	add	arg02, #6
1cde4     0A FB 51 FC | 	wrword	result1, arg02
1cde8     10 25 0A F2 | 	cmp	local04, local02 wz
1cdec     A4 00 90 AD |  if_e	jmp	#LR__2785
1cdf0     12 13 02 F6 | 	mov	arg01, local04
1cdf4     09 27 EA FA | 	rdword	local05, arg01 wz
1cdf8     00 FA 05 A6 |  if_e	mov	result1, #0
1cdfc     04 26 66 50 |  if_ne	shl	local05, #4
1ce00     13 13 02 51 |  if_ne	add	arg01, local05
1ce04     09 FB 01 56 |  if_ne	mov	result1, arg01
1ce08     0F FB 09 F2 | 	cmp	result1, local01 wz
1ce0c     84 00 90 5D |  if_ne	jmp	#LR__2784
1ce10     12 29 E2 FA | 	rdword	local06, local04
1ce14     0F 15 E2 FA | 	rdword	arg02, local01
1ce18     0A 29 02 F1 | 	add	local06, arg02
1ce1c     12 29 52 FC | 	wrword	local06, local04
1ce20     0F 29 02 F6 | 	mov	local06, local01
1ce24     02 28 06 F1 | 	add	local06, #2
1ce28     14 01 58 FC | 	wrword	#0, local06
1ce2c     0F 13 02 F6 | 	mov	arg01, local01
1ce30     09 27 EA FA | 	rdword	local05, arg01 wz
1ce34     00 FA 05 A6 |  if_e	mov	result1, #0
1ce38     04 26 66 50 |  if_ne	shl	local05, #4
1ce3c     13 13 02 51 |  if_ne	add	arg01, local05
1ce40     09 FB 01 56 |  if_ne	mov	result1, arg01
1ce44     FD 28 02 F6 | 	mov	local06, result1
1ce48     11 29 52 F2 | 	cmps	local06, local03 wc
1ce4c     20 00 90 3D |  if_ae	jmp	#LR__2783
1ce50     12 15 0A F6 | 	mov	arg02, local04 wz
1ce54     00 FA 05 A6 |  if_e	mov	result1, #0
1ce58     10 15 82 51 |  if_ne	sub	arg02, local02
1ce5c     04 14 46 50 |  if_ne	shr	arg02, #4
1ce60     0A FB 01 56 |  if_ne	mov	result1, arg02
1ce64     14 15 02 F6 | 	mov	arg02, local06
1ce68     04 14 06 F1 | 	add	arg02, #4
1ce6c     0A FB 51 FC | 	wrword	result1, arg02
1ce70                 | LR__2783
1ce70     0F 15 02 F6 | 	mov	arg02, local01
1ce74     06 14 06 F1 | 	add	arg02, #6
1ce78     12 FD 01 F6 | 	mov	result2, local04
1ce7c     0A 15 E2 FA | 	rdword	arg02, arg02
1ce80     06 FC 05 F1 | 	add	result2, #6
1ce84     FE 14 52 FC | 	wrword	arg02, result2
1ce88     06 1E 06 F1 | 	add	local01, #6
1ce8c     0F 01 58 FC | 	wrword	#0, local01
1ce90     12 1F 02 F6 | 	mov	local01, local04
1ce94                 | LR__2784
1ce94                 | LR__2785
1ce94     0F 13 02 F6 | 	mov	arg01, local01
1ce98     09 27 EA FA | 	rdword	local05, arg01 wz
1ce9c     00 FA 05 A6 |  if_e	mov	result1, #0
1cea0     04 26 66 50 |  if_ne	shl	local05, #4
1cea4     13 13 02 51 |  if_ne	add	arg01, local05
1cea8     09 FB 01 56 |  if_ne	mov	result1, arg01
1ceac     FD 14 0A F6 | 	mov	arg02, result1 wz
1ceb0     B8 00 90 AD |  if_e	jmp	#LR__2787
1ceb4     11 15 52 F2 | 	cmps	arg02, local03 wc
1ceb8     B0 00 90 3D |  if_ae	jmp	#LR__2787
1cebc     0A 13 02 F6 | 	mov	arg01, arg02
1cec0     00 FA 05 F6 | 	mov	result1, #0
1cec4     02 12 06 F1 | 	add	arg01, #2
1cec8     09 13 E2 FA | 	rdword	arg01, arg01
1cecc     36 00 00 FF 
1ced0     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1ced4     01 FA 65 A6 |  if_e	neg	result1, #1
1ced8     00 FA 0D F2 | 	cmp	result1, #0 wz
1cedc     8C 00 90 AD |  if_e	jmp	#LR__2787
1cee0     0F 25 02 F6 | 	mov	local04, local01
1cee4     12 29 E2 FA | 	rdword	local06, local04
1cee8     0A 13 02 F6 | 	mov	arg01, arg02
1ceec     09 1F E2 FA | 	rdword	local01, arg01
1cef0     0F 29 02 F1 | 	add	local06, local01
1cef4     12 29 52 FC | 	wrword	local06, local04
1cef8     09 29 02 F6 | 	mov	local06, arg01
1cefc     06 28 06 F1 | 	add	local06, #6
1cf00     12 1F 02 F6 | 	mov	local01, local04
1cf04     14 29 E2 FA | 	rdword	local06, local06
1cf08     06 1E 06 F1 | 	add	local01, #6
1cf0c     0F 29 52 FC | 	wrword	local06, local01
1cf10     09 29 02 F6 | 	mov	local06, arg01
1cf14     02 28 06 F1 | 	add	local06, #2
1cf18     14 55 59 FC | 	wrword	#170, local06
1cf1c     09 29 02 F6 | 	mov	local06, arg01
1cf20     06 28 06 F1 | 	add	local06, #6
1cf24     14 01 58 FC | 	wrword	#0, local06
1cf28     09 27 EA FA | 	rdword	local05, arg01 wz
1cf2c     00 FA 05 A6 |  if_e	mov	result1, #0
1cf30     04 26 66 50 |  if_ne	shl	local05, #4
1cf34     13 13 02 51 |  if_ne	add	arg01, local05
1cf38     09 FB 01 56 |  if_ne	mov	result1, arg01
1cf3c     FD 28 0A F6 | 	mov	local06, result1 wz
1cf40     28 00 90 AD |  if_e	jmp	#LR__2786
1cf44     11 29 52 F2 | 	cmps	local06, local03 wc
1cf48     20 00 90 3D |  if_ae	jmp	#LR__2786
1cf4c     12 15 0A F6 | 	mov	arg02, local04 wz
1cf50     00 FA 05 A6 |  if_e	mov	result1, #0
1cf54     10 15 82 51 |  if_ne	sub	arg02, local02
1cf58     04 14 46 50 |  if_ne	shr	arg02, #4
1cf5c     0A FB 01 56 |  if_ne	mov	result1, arg02
1cf60     14 25 02 F6 | 	mov	local04, local06
1cf64     04 24 06 F1 | 	add	local04, #4
1cf68     12 FB 51 FC | 	wrword	result1, local04
1cf6c                 | LR__2786
1cf6c                 | LR__2787
1cf6c     14 FB 01 F6 | 	mov	result1, local06
1cf70     A7 F0 03 F6 | 	mov	ptra, fp
1cf74     B2 00 A0 FD | 	call	#popregs_
1cf78                 | __system___gc_dofree_ret
1cf78     2D 00 64 FD | 	ret
1cf7c                 | 
1cf7c                 | __system___gc_docollect
1cf7c     05 4A 05 F6 | 	mov	COUNT_, #5
1cf80     A8 00 A0 FD | 	call	#pushregs_
1cf84     B8 F9 BF FD | 	call	#__system___gc_ptrs
1cf88     FE 1E 02 F6 | 	mov	local01, result2
1cf8c     FD 20 02 F6 | 	mov	local02, result1
1cf90     10 13 02 F6 | 	mov	arg01, local02
1cf94     09 23 EA FA | 	rdword	local03, arg01 wz
1cf98     00 FA 05 A6 |  if_e	mov	result1, #0
1cf9c     04 22 66 50 |  if_ne	shl	local03, #4
1cfa0     11 13 02 51 |  if_ne	add	arg01, local03
1cfa4     09 FB 01 56 |  if_ne	mov	result1, arg01
1cfa8     FD 24 0A F6 | 	mov	local04, result1 wz
1cfac     00 FA 05 F6 | 	mov	result1, #0
1cfb0     01 FA 61 FD | 	cogid	result1
1cfb4     FD 26 02 F6 | 	mov	local05, result1
1cfb8     48 00 90 AD |  if_e	jmp	#LR__2792
1cfbc     97 22 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
1cfc0                 | LR__2790
1cfc0     0F 25 52 F2 | 	cmps	local04, local01 wc
1cfc4     3C 00 90 3D |  if_ae	jmp	#LR__2792
1cfc8     12 15 02 F6 | 	mov	arg02, local04
1cfcc     02 14 06 F1 | 	add	arg02, #2
1cfd0     0A 15 E2 FA | 	rdword	arg02, arg02
1cfd4     20 14 26 F5 | 	andn	arg02, #32
1cfd8     12 13 02 F6 | 	mov	arg01, local04
1cfdc     02 12 06 F1 | 	add	arg01, #2
1cfe0     09 15 52 FC | 	wrword	arg02, arg01
1cfe4     12 13 02 F6 | 	mov	arg01, local04
1cfe8     09 23 EA FA | 	rdword	local03, arg01 wz
1cfec     00 FA 05 A6 |  if_e	mov	result1, #0
1cff0     04 22 66 50 |  if_ne	shl	local03, #4
1cff4     11 13 02 51 |  if_ne	add	arg01, local03
1cff8     09 FB 01 56 |  if_ne	mov	result1, arg01
1cffc     FD 24 0A F6 | 	mov	local04, result1 wz
1d000     BC FF 9F 5D |  if_ne	jmp	#LR__2790
1d004                 | LR__2791
1d004                 | LR__2792
1d004     00 22 06 F6 | 	mov	local03, #0
1d008     00 12 06 F6 | 	mov	arg01, #0
1d00c     A0 BD BF FD | 	call	#__system____topofstack
1d010     FD 14 02 F6 | 	mov	arg02, result1
1d014     11 13 02 F6 | 	mov	arg01, local03
1d018     90 00 B0 FD | 	call	#__system___gc_markhub
1d01c     1C 01 B0 FD | 	call	#__system___gc_markcog
1d020     10 13 02 F6 | 	mov	arg01, local02
1d024     09 23 EA FA | 	rdword	local03, arg01 wz
1d028     00 FA 05 A6 |  if_e	mov	result1, #0
1d02c     04 22 66 50 |  if_ne	shl	local03, #4
1d030     11 13 02 51 |  if_ne	add	arg01, local03
1d034     09 FB 01 56 |  if_ne	mov	result1, arg01
1d038     FD 20 0A F6 | 	mov	local02, result1 wz
1d03c     60 00 90 AD |  if_e	jmp	#LR__2796
1d040                 | LR__2793
1d040     10 25 02 F6 | 	mov	local04, local02
1d044     12 13 02 F6 | 	mov	arg01, local04
1d048     09 23 EA FA | 	rdword	local03, arg01 wz
1d04c     00 FA 05 A6 |  if_e	mov	result1, #0
1d050     04 22 66 50 |  if_ne	shl	local03, #4
1d054     11 13 02 51 |  if_ne	add	arg01, local03
1d058     09 FB 01 56 |  if_ne	mov	result1, arg01
1d05c     FD 20 02 F6 | 	mov	local02, result1
1d060     12 15 02 F6 | 	mov	arg02, local04
1d064     02 14 06 F1 | 	add	arg02, #2
1d068     0A 15 E2 FA | 	rdword	arg02, arg02
1d06c     20 14 CE F7 | 	test	arg02, #32 wz
1d070     10 14 CE A7 |  if_e	test	arg02, #16 wz
1d074     1C 00 90 5D |  if_ne	jmp	#LR__2795
1d078     0A 15 42 F8 | 	getnib	arg02, arg02, #0
1d07c     13 15 0A F2 | 	cmp	arg02, local05 wz
1d080     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
1d084     0C 00 90 5D |  if_ne	jmp	#LR__2794
1d088     12 13 02 F6 | 	mov	arg01, local04
1d08c     84 FC BF FD | 	call	#__system___gc_dofree
1d090     FD 20 02 F6 | 	mov	local02, result1
1d094                 | LR__2794
1d094                 | LR__2795
1d094     00 20 0E F2 | 	cmp	local02, #0 wz
1d098     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
1d09c     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2793
1d0a0                 | LR__2796
1d0a0     A7 F0 03 F6 | 	mov	ptra, fp
1d0a4     B2 00 A0 FD | 	call	#popregs_
1d0a8                 | __system___gc_docollect_ret
1d0a8     2D 00 64 FD | 	ret
1d0ac                 | 
1d0ac                 | __system___gc_markhub
1d0ac     04 4A 05 F6 | 	mov	COUNT_, #4
1d0b0     A8 00 A0 FD | 	call	#pushregs_
1d0b4     09 1F 02 F6 | 	mov	local01, arg01
1d0b8     0A 21 02 F6 | 	mov	local02, arg02
1d0bc     80 F8 BF FD | 	call	#__system___gc_ptrs
1d0c0     FD 22 02 F6 | 	mov	local03, result1
1d0c4     FE 24 02 F6 | 	mov	local04, result2
1d0c8                 | LR__2800
1d0c8     10 1F 52 F2 | 	cmps	local01, local02 wc
1d0cc     60 00 90 3D |  if_ae	jmp	#LR__2801
1d0d0     0F 17 02 FB | 	rdlong	arg03, local01
1d0d4     04 1E 06 F1 | 	add	local01, #4
1d0d8     12 15 02 F6 | 	mov	arg02, local04
1d0dc     11 13 02 F6 | 	mov	arg01, local03
1d0e0     8C FB BF FD | 	call	#__system___gc_isvalidptr
1d0e4     FD 16 0A F6 | 	mov	arg03, result1 wz
1d0e8     DC FF 9F AD |  if_e	jmp	#LR__2800
1d0ec     0B 13 02 F6 | 	mov	arg01, arg03
1d0f0     00 FA 05 F6 | 	mov	result1, #0
1d0f4     02 12 06 F1 | 	add	arg01, #2
1d0f8     09 13 E2 FA | 	rdword	arg01, arg01
1d0fc     36 00 00 FF 
1d100     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1d104     01 FA 65 A6 |  if_e	neg	result1, #1
1d108     00 FA 0D F2 | 	cmp	result1, #0 wz
1d10c     B8 FF 9F 5D |  if_ne	jmp	#LR__2800
1d110     0B FD 01 F6 | 	mov	result2, arg03
1d114     02 FC 05 F1 | 	add	result2, #2
1d118     FE FC E1 FA | 	rdword	result2, result2
1d11c     0F FC 25 F5 | 	andn	result2, #15
1d120     2E FC 45 F5 | 	or	result2, #46
1d124     02 16 06 F1 | 	add	arg03, #2
1d128     0B FD 51 FC | 	wrword	result2, arg03
1d12c     98 FF 9F FD | 	jmp	#LR__2800
1d130                 | LR__2801
1d130     A7 F0 03 F6 | 	mov	ptra, fp
1d134     B2 00 A0 FD | 	call	#popregs_
1d138                 | __system___gc_markhub_ret
1d138     2D 00 64 FD | 	ret
1d13c                 | 
1d13c                 | __system___gc_markcog
1d13c     04 4A 05 F6 | 	mov	COUNT_, #4
1d140     A8 00 A0 FD | 	call	#pushregs_
1d144     F8 F7 BF FD | 	call	#__system___gc_ptrs
1d148     FD 1E 02 F6 | 	mov	local01, result1
1d14c     FE 20 02 F6 | 	mov	local02, result2
1d150     EF 23 06 F6 | 	mov	local03, #495
1d154                 | LR__2810
1d154                 | 	'.live	local03
1d154     00 22 96 F9 | 	alts	local03, #0
1d158     11 25 02 F6 | 	mov	local04, local03
1d15c     0F 13 02 F6 | 	mov	arg01, local01
1d160     10 15 02 F6 | 	mov	arg02, local02
1d164     12 17 02 F6 | 	mov	arg03, local04
1d168     04 FB BF FD | 	call	#__system___gc_isvalidptr
1d16c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d170     18 00 90 AD |  if_e	jmp	#LR__2811
1d174     FD 24 02 F6 | 	mov	local04, result1
1d178     02 24 06 F1 | 	add	local04, #2
1d17c     12 25 E2 FA | 	rdword	local04, local04
1d180     20 24 46 F5 | 	or	local04, #32
1d184     02 FA 05 F1 | 	add	result1, #2
1d188     FD 24 52 FC | 	wrword	local04, result1
1d18c                 | LR__2811
1d18c     01 22 86 F1 | 	sub	local03, #1
1d190     00 22 56 F2 | 	cmps	local03, #0 wc
1d194     BC FF 9F 3D |  if_ae	jmp	#LR__2810
1d198     A7 F0 03 F6 | 	mov	ptra, fp
1d19c     B2 00 A0 FD | 	call	#popregs_
1d1a0                 | __system___gc_markcog_ret
1d1a0     2D 00 64 FD | 	ret
1d1a4                 | 
1d1a4                 | __system__opendir
1d1a4     06 4A 05 F6 | 	mov	COUNT_, #6
1d1a8     A8 00 A0 FD | 	call	#pushregs_
1d1ac     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1d1b0     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
1d1b4     09 15 02 F6 | 	mov	arg02, arg01
1d1b8     0F 13 02 F6 | 	mov	arg01, local01
1d1bc     00 16 06 F6 | 	mov	arg03, #0
1d1c0     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1d1c4     A8 C3 BF FD | 	call	#__system____getvfsforfile
1d1c8     FD 20 0A F6 | 	mov	local02, result1 wz
1d1cc     10 00 90 AD |  if_e	jmp	#LR__2820
1d1d0     28 20 06 F1 | 	add	local02, #40
1d1d4     10 17 0A FB | 	rdlong	arg03, local02 wz
1d1d8     28 20 86 F1 | 	sub	local02, #40
1d1dc     14 00 90 5D |  if_ne	jmp	#LR__2821
1d1e0                 | LR__2820
1d1e0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d1e4     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1d1e8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d1ec     00 FA 05 F6 | 	mov	result1, #0
1d1f0     90 00 90 FD | 	jmp	#LR__2823
1d1f4                 | LR__2821
1d1f4     5C 12 06 F6 | 	mov	arg01, #92
1d1f8     10 14 06 F6 | 	mov	arg02, #16
1d1fc     C0 F9 BF FD | 	call	#__system___gc_doalloc
1d200     FD 22 0A F6 | 	mov	local03, result1 wz
1d204     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d208     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
1d20c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d210     00 FA 05 A6 |  if_e	mov	result1, #0
1d214     6C 00 90 AD |  if_e	jmp	#LR__2823
1d218     28 20 06 F1 | 	add	local02, #40
1d21c     10 25 02 FB | 	rdlong	local04, local02
1d220     12 27 02 F6 | 	mov	local05, local04
1d224     28 20 86 F1 | 	sub	local02, #40
1d228     13 26 46 F7 | 	zerox	local05, #19
1d22c     14 24 46 F0 | 	shr	local04, #20
1d230     02 24 66 F0 | 	shl	local04, #2
1d234     ED 24 02 F1 | 	add	local04, __methods__
1d238     12 25 02 FB | 	rdlong	local04, local04
1d23c     11 13 02 F6 | 	mov	arg01, local03
1d240     0F 15 02 F6 | 	mov	arg02, local01
1d244     F2 28 02 F6 | 	mov	local06, objptr
1d248     13 E5 01 F6 | 	mov	objptr, local05
1d24c     2D 24 62 FD | 	call	local04
1d250     14 E5 01 F6 | 	mov	objptr, local06
1d254     FD 16 0A F6 | 	mov	arg03, result1 wz
1d258     20 00 90 AD |  if_e	jmp	#LR__2822
1d25c     00 16 4E F2 | 	cmps	arg03, #0 wz
1d260     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d264     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
1d268     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d26c     11 13 02 F6 | 	mov	arg01, local03
1d270     58 FA BF FD | 	call	#__system___gc_free
1d274     00 FA 05 F6 | 	mov	result1, #0
1d278     08 00 90 FD | 	jmp	#LR__2823
1d27c                 | LR__2822
1d27c     11 21 62 FC | 	wrlong	local02, local03
1d280     11 FB 01 F6 | 	mov	result1, local03
1d284                 | LR__2823
1d284     A7 F0 03 F6 | 	mov	ptra, fp
1d288     B2 00 A0 FD | 	call	#popregs_
1d28c                 | __system__opendir_ret
1d28c     2D 00 64 FD | 	ret
1d290                 | 
1d290                 | __system__closedir
1d290     04 4A 05 F6 | 	mov	COUNT_, #4
1d294     A8 00 A0 FD | 	call	#pushregs_
1d298     09 1F 02 F6 | 	mov	local01, arg01
1d29c     0F 13 02 FB | 	rdlong	arg01, local01
1d2a0     2C 12 06 F1 | 	add	arg01, #44
1d2a4     09 21 02 FB | 	rdlong	local02, arg01
1d2a8     10 23 02 F6 | 	mov	local03, local02
1d2ac     13 22 46 F7 | 	zerox	local03, #19
1d2b0     14 20 46 F0 | 	shr	local02, #20
1d2b4     02 20 66 F0 | 	shl	local02, #2
1d2b8     ED 20 02 F1 | 	add	local02, __methods__
1d2bc     10 21 02 FB | 	rdlong	local02, local02
1d2c0     0F 13 02 F6 | 	mov	arg01, local01
1d2c4     F2 24 02 F6 | 	mov	local04, objptr
1d2c8     11 E5 01 F6 | 	mov	objptr, local03
1d2cc     2D 20 62 FD | 	call	local02
1d2d0     12 E5 01 F6 | 	mov	objptr, local04
1d2d4     FD 24 02 F6 | 	mov	local04, result1
1d2d8     0F 13 02 F6 | 	mov	arg01, local01
1d2dc     EC F9 BF FD | 	call	#__system___gc_free
1d2e0     00 24 4E F2 | 	cmps	local04, #0 wz
1d2e4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d2e8     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
1d2ec     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d2f0     01 FA 65 56 |  if_ne	neg	result1, #1
1d2f4     00 FA 05 A6 |  if_e	mov	result1, #0
1d2f8     A7 F0 03 F6 | 	mov	ptra, fp
1d2fc     B2 00 A0 FD | 	call	#popregs_
1d300                 | __system__closedir_ret
1d300     2D 00 64 FD | 	ret
1d304                 | 
1d304                 | __system__readdir
1d304     04 4A 05 F6 | 	mov	COUNT_, #4
1d308     A8 00 A0 FD | 	call	#pushregs_
1d30c     09 15 0A FB | 	rdlong	arg02, arg01 wz
1d310     08 12 06 F1 | 	add	arg01, #8
1d314     09 1F 02 F6 | 	mov	local01, arg01
1d318     08 12 86 F1 | 	sub	arg01, #8
1d31c     00 FA 05 A6 |  if_e	mov	result1, #0
1d320     5C 00 90 AD |  if_e	jmp	#LR__2831
1d324     30 14 06 F1 | 	add	arg02, #48
1d328     0A 21 02 FB | 	rdlong	local02, arg02
1d32c     10 23 02 F6 | 	mov	local03, local02
1d330     13 22 46 F7 | 	zerox	local03, #19
1d334     14 20 46 F0 | 	shr	local02, #20
1d338     02 20 66 F0 | 	shl	local02, #2
1d33c     ED 20 02 F1 | 	add	local02, __methods__
1d340     10 21 02 FB | 	rdlong	local02, local02
1d344     0F 15 02 F6 | 	mov	arg02, local01
1d348     F2 24 02 F6 | 	mov	local04, objptr
1d34c     11 E5 01 F6 | 	mov	objptr, local03
1d350     2D 20 62 FD | 	call	local02
1d354     12 E5 01 F6 | 	mov	objptr, local04
1d358     00 FA 4D F2 | 	cmps	result1, #0 wz
1d35c     1C 00 90 AD |  if_e	jmp	#LR__2830
1d360     01 FA 55 F2 | 	cmps	result1, #1 wc
1d364     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
1d368     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1d36c     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
1d370     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1d374     00 FA 05 F6 | 	mov	result1, #0
1d378     04 00 90 FD | 	jmp	#LR__2831
1d37c                 | LR__2830
1d37c     0F FB 01 F6 | 	mov	result1, local01
1d380                 | LR__2831
1d380     A7 F0 03 F6 | 	mov	ptra, fp
1d384     B2 00 A0 FD | 	call	#popregs_
1d388                 | __system__readdir_ret
1d388     2D 00 64 FD | 	ret
1d38c                 | 
1d38c                 | __system___openraw
1d38c     15 4A 05 F6 | 	mov	COUNT_, #21
1d390     A8 00 A0 FD | 	call	#pushregs_
1d394     09 1F 02 F6 | 	mov	local01, arg01
1d398     0A 21 02 F6 | 	mov	local02, arg02
1d39c     0B 23 02 F6 | 	mov	local03, arg03
1d3a0     0C 25 02 F6 | 	mov	local04, arg04
1d3a4     04 26 06 F6 | 	mov	local05, #4
1d3a8     0F 29 02 F6 | 	mov	local06, local01
1d3ac     00 2A 06 F6 | 	mov	local07, #0
1d3b0     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1d3b4     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
1d3b8     16 13 02 F6 | 	mov	arg01, local08
1d3bc     10 15 02 F6 | 	mov	arg02, local02
1d3c0     00 16 06 F6 | 	mov	arg03, #0
1d3c4     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1d3c8     A4 C1 BF FD | 	call	#__system____getvfsforfile
1d3cc     FD 2E 0A F6 | 	mov	local09, result1 wz
1d3d0     10 00 90 AD |  if_e	jmp	#LR__2840
1d3d4     20 2E 06 F1 | 	add	local09, #32
1d3d8     17 FB 09 FB | 	rdlong	result1, local09 wz
1d3dc     20 2E 86 F1 | 	sub	local09, #32
1d3e0     14 00 90 5D |  if_ne	jmp	#LR__2841
1d3e4                 | LR__2840
1d3e4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d3e8     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1d3ec     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d3f0     01 FA 65 F6 | 	neg	result1, #1
1d3f4     8C 02 90 FD | 	jmp	#LR__2854
1d3f8                 | LR__2841
1d3f8     14 13 02 F6 | 	mov	arg01, local06
1d3fc     00 14 06 F6 | 	mov	arg02, #0
1d400     34 16 06 F6 | 	mov	arg03, #52
1d404     09 31 02 F6 | 	mov	local10, arg01
1d408     98 00 A0 FD | 	call	#\builtin_bytefill_
1d40c     20 2E 06 F1 | 	add	local09, #32
1d410     17 33 02 FB | 	rdlong	local11, local09
1d414     19 35 02 F6 | 	mov	local12, local11
1d418     19 37 02 F6 | 	mov	local13, local11
1d41c     20 2E 86 F1 | 	sub	local09, #32
1d420     1B 39 02 F6 | 	mov	local14, local13
1d424     13 34 46 F7 | 	zerox	local12, #19
1d428     14 38 46 F0 | 	shr	local14, #20
1d42c     02 38 66 F0 | 	shl	local14, #2
1d430     ED 38 02 F1 | 	add	local14, __methods__
1d434     1C 39 02 FB | 	rdlong	local14, local14
1d438     14 3B 02 F6 | 	mov	local15, local06
1d43c     16 3D 02 F6 | 	mov	local16, local08
1d440     11 3F 02 F6 | 	mov	local17, local03
1d444     1D 13 02 F6 | 	mov	arg01, local15
1d448     1E 15 02 F6 | 	mov	arg02, local16
1d44c     1F 17 02 F6 | 	mov	arg03, local17
1d450     F2 40 02 F6 | 	mov	local18, objptr
1d454     1A E5 01 F6 | 	mov	objptr, local12
1d458     2D 38 62 FD | 	call	local14
1d45c     20 E5 01 F6 | 	mov	objptr, local18
1d460     FD 42 0A F6 | 	mov	local19, result1 wz
1d464     04 22 CE 57 |  if_ne	test	local03, #4 wz
1d468     58 00 90 AD |  if_e	jmp	#LR__2842
1d46c     24 2E 06 F1 | 	add	local09, #36
1d470     17 33 02 FB | 	rdlong	local11, local09
1d474     19 35 02 F6 | 	mov	local12, local11
1d478     19 37 02 F6 | 	mov	local13, local11
1d47c     24 2E 86 F1 | 	sub	local09, #36
1d480     1B 39 02 F6 | 	mov	local14, local13
1d484     13 34 46 F7 | 	zerox	local12, #19
1d488     14 38 46 F0 | 	shr	local14, #20
1d48c     02 38 66 F0 | 	shl	local14, #2
1d490     ED 38 02 F1 | 	add	local14, __methods__
1d494     1C 39 02 FB | 	rdlong	local14, local14
1d498     14 3B 02 F6 | 	mov	local15, local06
1d49c     16 3D 02 F6 | 	mov	local16, local08
1d4a0     12 3F 02 F6 | 	mov	local17, local04
1d4a4     1D 13 02 F6 | 	mov	arg01, local15
1d4a8     1E 15 02 F6 | 	mov	arg02, local16
1d4ac     1F 17 02 F6 | 	mov	arg03, local17
1d4b0     F2 40 02 F6 | 	mov	local18, objptr
1d4b4     1A E5 01 F6 | 	mov	objptr, local12
1d4b8     2D 38 62 FD | 	call	local14
1d4bc     20 E5 01 F6 | 	mov	objptr, local18
1d4c0     FD 42 02 F6 | 	mov	local19, result1
1d4c4                 | LR__2842
1d4c4     00 42 0E F2 | 	cmp	local19, #0 wz
1d4c8     8C 01 90 5D |  if_ne	jmp	#LR__2852
1d4cc     11 45 02 F6 | 	mov	local20, local03
1d4d0     03 44 0E F5 | 	and	local20, #3 wz
1d4d4     02 26 46 55 |  if_ne	or	local05, #2
1d4d8     01 44 0E F2 | 	cmp	local20, #1 wz
1d4dc     01 26 46 55 |  if_ne	or	local05, #1
1d4e0     20 22 CE F7 | 	test	local03, #32 wz
1d4e4     C0 26 46 55 |  if_ne	or	local05, #192
1d4e8     08 28 06 F1 | 	add	local06, #8
1d4ec     14 27 62 FC | 	wrlong	local05, local06
1d4f0     0C 28 06 F1 | 	add	local06, #12
1d4f4     14 47 0A FB | 	rdlong	local21, local06 wz
1d4f8     14 28 86 F1 | 	sub	local06, #20
1d4fc     18 00 90 5D |  if_ne	jmp	#LR__2843
1d500     04 2E 06 F1 | 	add	local09, #4
1d504     17 47 02 FB | 	rdlong	local21, local09
1d508     04 2E 86 F1 | 	sub	local09, #4
1d50c     14 28 06 F1 | 	add	local06, #20
1d510     14 47 62 FC | 	wrlong	local21, local06
1d514     14 28 86 F1 | 	sub	local06, #20
1d518                 | LR__2843
1d518     18 28 06 F1 | 	add	local06, #24
1d51c     14 47 0A FB | 	rdlong	local21, local06 wz
1d520     18 28 86 F1 | 	sub	local06, #24
1d524     18 00 90 5D |  if_ne	jmp	#LR__2844
1d528     08 2E 06 F1 | 	add	local09, #8
1d52c     17 47 02 FB | 	rdlong	local21, local09
1d530     08 2E 86 F1 | 	sub	local09, #8
1d534     18 28 06 F1 | 	add	local06, #24
1d538     14 47 62 FC | 	wrlong	local21, local06
1d53c     18 28 86 F1 | 	sub	local06, #24
1d540                 | LR__2844
1d540     24 28 06 F1 | 	add	local06, #36
1d544     14 47 0A FB | 	rdlong	local21, local06 wz
1d548     24 28 86 F1 | 	sub	local06, #36
1d54c     17 47 02 AB |  if_e	rdlong	local21, local09
1d550     24 28 06 A1 |  if_e	add	local06, #36
1d554     14 47 62 AC |  if_e	wrlong	local21, local06
1d558     24 28 86 A1 |  if_e	sub	local06, #36
1d55c     28 28 06 F1 | 	add	local06, #40
1d560     14 47 0A FB | 	rdlong	local21, local06 wz
1d564     28 28 86 F1 | 	sub	local06, #40
1d568     18 00 90 5D |  if_ne	jmp	#LR__2845
1d56c     10 2E 06 F1 | 	add	local09, #16
1d570     17 47 02 FB | 	rdlong	local21, local09
1d574     10 2E 86 F1 | 	sub	local09, #16
1d578     28 28 06 F1 | 	add	local06, #40
1d57c     14 47 62 FC | 	wrlong	local21, local06
1d580     28 28 86 F1 | 	sub	local06, #40
1d584                 | LR__2845
1d584     30 28 06 F1 | 	add	local06, #48
1d588     14 47 0A FB | 	rdlong	local21, local06 wz
1d58c     30 28 86 F1 | 	sub	local06, #48
1d590     18 00 90 5D |  if_ne	jmp	#LR__2846
1d594     0C 2E 06 F1 | 	add	local09, #12
1d598     17 47 02 FB | 	rdlong	local21, local09
1d59c     0C 2E 86 F1 | 	sub	local09, #12
1d5a0     30 28 06 F1 | 	add	local06, #48
1d5a4     14 47 62 FC | 	wrlong	local21, local06
1d5a8     30 28 86 F1 | 	sub	local06, #48
1d5ac                 | LR__2846
1d5ac     1C 28 06 F1 | 	add	local06, #28
1d5b0     14 47 0A FB | 	rdlong	local21, local06 wz
1d5b4     1C 28 86 F1 | 	sub	local06, #28
1d5b8     1C 00 90 5D |  if_ne	jmp	#LR__2847
1d5bc     01 2A 06 F6 | 	mov	local07, #1
1d5c0     F2 12 02 F6 | 	mov	arg01, objptr
1d5c4     00 60 03 FF 
1d5c8     00 12 46 F5 | 	or	arg01, ##113246208
1d5cc     1C 28 06 F1 | 	add	local06, #28
1d5d0     14 13 62 FC | 	wrlong	arg01, local06
1d5d4     1C 28 86 F1 | 	sub	local06, #28
1d5d8                 | LR__2847
1d5d8     20 28 06 F1 | 	add	local06, #32
1d5dc     14 47 0A FB | 	rdlong	local21, local06 wz
1d5e0     20 28 86 F1 | 	sub	local06, #32
1d5e4     1C 00 90 5D |  if_ne	jmp	#LR__2848
1d5e8     01 2A 06 F6 | 	mov	local07, #1
1d5ec     F2 12 02 F6 | 	mov	arg01, objptr
1d5f0     00 68 03 FF 
1d5f4     00 12 46 F5 | 	or	arg01, ##114294784
1d5f8     20 28 06 F1 | 	add	local06, #32
1d5fc     14 13 62 FC | 	wrlong	arg01, local06
1d600     20 28 86 F1 | 	sub	local06, #32
1d604                 | LR__2848
1d604     2C 28 06 F1 | 	add	local06, #44
1d608     14 47 0A FB | 	rdlong	local21, local06 wz
1d60c     2C 28 86 F1 | 	sub	local06, #44
1d610     44 00 90 5D |  if_ne	jmp	#LR__2851
1d614     14 2E 06 F1 | 	add	local09, #20
1d618     17 47 0A FB | 	rdlong	local21, local09 wz
1d61c     14 2E 86 F1 | 	sub	local09, #20
1d620     18 00 90 AD |  if_e	jmp	#LR__2849
1d624     14 2E 06 F1 | 	add	local09, #20
1d628     17 47 02 FB | 	rdlong	local21, local09
1d62c     2C 28 06 F1 | 	add	local06, #44
1d630     14 47 62 FC | 	wrlong	local21, local06
1d634     2C 28 86 F1 | 	sub	local06, #44
1d638     1C 00 90 FD | 	jmp	#LR__2850
1d63c                 | LR__2849
1d63c     01 2A 06 F6 | 	mov	local07, #1
1d640     F2 12 02 F6 | 	mov	arg01, objptr
1d644     00 70 03 FF 
1d648     00 12 46 F5 | 	or	arg01, ##115343360
1d64c     2C 28 06 F1 | 	add	local06, #44
1d650     14 13 62 FC | 	wrlong	arg01, local06
1d654     2C 28 86 F1 | 	sub	local06, #44
1d658                 | LR__2850
1d658                 | LR__2851
1d658                 | LR__2852
1d658     00 2A 0E F2 | 	cmp	local07, #0 wz
1d65c     14 13 02 56 |  if_ne	mov	arg01, local06
1d660     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
1d664     00 42 0E F2 | 	cmp	local19, #0 wz
1d668     00 12 06 A6 |  if_e	mov	arg01, #0
1d66c     10 00 90 5D |  if_ne	jmp	#LR__2853
1d670     00 12 4E F2 | 	cmps	arg01, #0 wz
1d674     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d678     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d67c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d680                 | LR__2853
1d680     21 FB 01 F6 | 	mov	result1, local19
1d684                 | LR__2854
1d684     A7 F0 03 F6 | 	mov	ptra, fp
1d688     B2 00 A0 FD | 	call	#popregs_
1d68c                 | __system___openraw_ret
1d68c     2D 00 64 FD | 	ret
1d690                 | 
1d690                 | __system___closeraw
1d690     05 4A 05 F6 | 	mov	COUNT_, #5
1d694     A8 00 A0 FD | 	call	#pushregs_
1d698     09 1F 02 F6 | 	mov	local01, arg01
1d69c     00 20 06 F6 | 	mov	local02, #0
1d6a0     08 1E 06 F1 | 	add	local01, #8
1d6a4     0F FB 09 FB | 	rdlong	result1, local01 wz
1d6a8     08 1E 86 F1 | 	sub	local01, #8
1d6ac     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d6b0     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1d6b4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d6b8     01 FA 65 A6 |  if_e	neg	result1, #1
1d6bc     A8 00 90 AD |  if_e	jmp	#LR__2862
1d6c0     2C 1E 06 F1 | 	add	local01, #44
1d6c4     0F FB 09 FB | 	rdlong	result1, local01 wz
1d6c8     2C 1E 86 F1 | 	sub	local01, #44
1d6cc     38 00 90 AD |  if_e	jmp	#LR__2860
1d6d0     2C 1E 06 F1 | 	add	local01, #44
1d6d4     0F 23 02 FB | 	rdlong	local03, local01
1d6d8     11 25 02 F6 | 	mov	local04, local03
1d6dc     2C 1E 86 F1 | 	sub	local01, #44
1d6e0     13 24 46 F7 | 	zerox	local04, #19
1d6e4     14 22 46 F0 | 	shr	local03, #20
1d6e8     02 22 66 F0 | 	shl	local03, #2
1d6ec     ED 22 02 F1 | 	add	local03, __methods__
1d6f0     11 23 02 FB | 	rdlong	local03, local03
1d6f4     0F 13 02 F6 | 	mov	arg01, local01
1d6f8     F2 26 02 F6 | 	mov	local05, objptr
1d6fc     12 E5 01 F6 | 	mov	objptr, local04
1d700     2D 22 62 FD | 	call	local03
1d704     13 E5 01 F6 | 	mov	objptr, local05
1d708                 | LR__2860
1d708     24 1E 06 F1 | 	add	local01, #36
1d70c     0F 27 0A FB | 	rdlong	local05, local01 wz
1d710     24 1E 86 F1 | 	sub	local01, #36
1d714     3C 00 90 AD |  if_e	jmp	#LR__2861
1d718     24 1E 06 F1 | 	add	local01, #36
1d71c     0F 23 02 FB | 	rdlong	local03, local01
1d720     11 25 02 F6 | 	mov	local04, local03
1d724     24 1E 86 F1 | 	sub	local01, #36
1d728     13 24 46 F7 | 	zerox	local04, #19
1d72c     14 22 46 F0 | 	shr	local03, #20
1d730     02 22 66 F0 | 	shl	local03, #2
1d734     ED 22 02 F1 | 	add	local03, __methods__
1d738     11 23 02 FB | 	rdlong	local03, local03
1d73c     0F 13 02 F6 | 	mov	arg01, local01
1d740     F2 26 02 F6 | 	mov	local05, objptr
1d744     12 E5 01 F6 | 	mov	objptr, local04
1d748     2D 22 62 FD | 	call	local03
1d74c     13 E5 01 F6 | 	mov	objptr, local05
1d750     FD 20 02 F6 | 	mov	local02, result1
1d754                 | LR__2861
1d754     0F 13 02 F6 | 	mov	arg01, local01
1d758     00 14 06 F6 | 	mov	arg02, #0
1d75c     34 16 06 F6 | 	mov	arg03, #52
1d760     98 00 A0 FD | 	call	#\builtin_bytefill_
1d764     10 FB 01 F6 | 	mov	result1, local02
1d768                 | LR__2862
1d768     A7 F0 03 F6 | 	mov	ptra, fp
1d76c     B2 00 A0 FD | 	call	#popregs_
1d770                 | __system___closeraw_ret
1d770     2D 00 64 FD | 	ret
1d774                 | 
1d774                 | __system___vfs_open_sdcardx
1d774     0B 4A 05 F6 | 	mov	COUNT_, #11
1d778     A8 00 A0 FD | 	call	#pushregs_
1d77c     09 23 02 F6 | 	mov	local03, arg01
1d780     0A 25 02 F6 | 	mov	local04, arg02
1d784     0B 27 02 F6 | 	mov	local05, arg03
1d788     0C 29 02 F6 | 	mov	local06, arg04
1d78c     01 00 00 FF 
1d790     24 12 06 F6 | 	mov	arg01, ##548
1d794     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
1d798     FD 2A 02 F6 | 	mov	local07, result1
1d79c     01 00 00 FF 
1d7a0     34 12 06 F6 | 	mov	arg01, ##564
1d7a4     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
1d7a8     FD 2C 02 F6 | 	mov	local08, result1
1d7ac     11 19 02 F6 | 	mov	arg04, local03
1d7b0     1F 18 C6 F0 | 	sar	arg04, #31
1d7b4     11 17 02 F6 | 	mov	arg03, local03
1d7b8     01 12 06 F6 | 	mov	arg01, #1
1d7bc     00 14 06 F6 | 	mov	arg02, #0
1d7c0     48 DC BF FD | 	call	#__system___int64_shl
1d7c4     FD 1E 02 F6 | 	mov	local01, result1
1d7c8     FE 2E 02 F6 | 	mov	local09, result2
1d7cc     12 19 02 F6 | 	mov	arg04, local04
1d7d0     1F 18 C6 F0 | 	sar	arg04, #31
1d7d4     12 17 02 F6 | 	mov	arg03, local04
1d7d8     01 12 06 F6 | 	mov	arg01, #1
1d7dc     00 14 06 F6 | 	mov	arg02, #0
1d7e0     28 DC BF FD | 	call	#__system___int64_shl
1d7e4     FD 1E 42 F5 | 	or	local01, result1
1d7e8     FE 2E 42 F5 | 	or	local09, result2
1d7ec     13 19 02 F6 | 	mov	arg04, local05
1d7f0     1F 18 C6 F0 | 	sar	arg04, #31
1d7f4     13 17 02 F6 | 	mov	arg03, local05
1d7f8     01 12 06 F6 | 	mov	arg01, #1
1d7fc     00 14 06 F6 | 	mov	arg02, #0
1d800     08 DC BF FD | 	call	#__system___int64_shl
1d804     FD 1E 42 F5 | 	or	local01, result1
1d808     FE 2E 42 F5 | 	or	local09, result2
1d80c     14 19 02 F6 | 	mov	arg04, local06
1d810     1F 18 C6 F0 | 	sar	arg04, #31
1d814     14 17 02 F6 | 	mov	arg03, local06
1d818     01 12 06 F6 | 	mov	arg01, #1
1d81c     00 14 06 F6 | 	mov	arg02, #0
1d820     E8 DB BF FD | 	call	#__system___int64_shl
1d824     17 15 02 F6 | 	mov	arg02, local09
1d828     FD 1E 42 F5 | 	or	local01, result1
1d82c     0A FD 41 F5 | 	or	result2, arg02
1d830     FE 20 02 F6 | 	mov	local02, result2
1d834     0F 13 02 F6 | 	mov	arg01, local01
1d838     10 15 02 F6 | 	mov	arg02, local02
1d83c     04 DC BF FD | 	call	#__system___usepins
1d840     00 FA 0D F2 | 	cmp	result1, #0 wz
1d844     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d848     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
1d84c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d850     00 FA 05 A6 |  if_e	mov	result1, #0
1d854     B4 00 90 AD |  if_e	jmp	#LR__2872
1d858     0F 31 02 F6 | 	mov	local10, local01
1d85c     10 2F 02 F6 | 	mov	local09, local02
1d860     01 00 00 FF 
1d864     08 2A 06 F1 | 	add	local07, ##520
1d868     15 31 62 FC | 	wrlong	local10, local07
1d86c     04 2A 06 F1 | 	add	local07, #4
1d870     15 2F 62 FC | 	wrlong	local09, local07
1d874     01 00 00 FF 
1d878     0C 2A 86 F1 | 	sub	local07, ##524
1d87c     14 1B 02 F6 | 	mov	arg05, local06
1d880     00 12 06 F6 | 	mov	arg01, #0
1d884     11 15 02 F6 | 	mov	arg02, local03
1d888     12 17 02 F6 | 	mov	arg03, local04
1d88c     13 19 02 F6 | 	mov	arg04, local05
1d890     F2 30 02 F6 | 	mov	local10, objptr
1d894     15 E5 01 F6 | 	mov	objptr, local07
1d898     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
1d89c     18 E5 01 F6 | 	mov	objptr, local10
1d8a0     FD 32 0A F6 | 	mov	local11, result1 wz
1d8a4     24 00 90 5D |  if_ne	jmp	#LR__2870
1d8a8     41 01 00 FF 
1d8ac     4E 15 06 F6 | 	mov	arg02, ##@LR__4267
1d8b0     16 13 02 F6 | 	mov	arg01, local08
1d8b4     00 16 06 F6 | 	mov	arg03, #0
1d8b8     F2 32 02 F6 | 	mov	local11, objptr
1d8bc     15 E5 01 F6 | 	mov	objptr, local07
1d8c0     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
1d8c4     19 E5 01 F6 | 	mov	objptr, local11
1d8c8     FD 32 02 F6 | 	mov	local11, result1
1d8cc                 | LR__2870
1d8cc     00 32 0E F2 | 	cmp	local11, #0 wz
1d8d0     24 00 90 AD |  if_e	jmp	#LR__2871
1d8d4     0F 13 02 F6 | 	mov	arg01, local01
1d8d8     10 15 02 F6 | 	mov	arg02, local02
1d8dc     B8 DB BF FD | 	call	#__system___freepins
1d8e0     19 13 6A F6 | 	neg	arg01, local11 wz
1d8e4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d8e8     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d8ec     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d8f0     00 FA 05 F6 | 	mov	result1, #0
1d8f4     14 00 90 FD | 	jmp	#LR__2872
1d8f8                 | LR__2871
1d8f8     15 13 02 F6 | 	mov	arg01, local07
1d8fc     F2 32 02 F6 | 	mov	local11, objptr
1d900     15 E5 01 F6 | 	mov	objptr, local07
1d904     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
1d908     19 E5 01 F6 | 	mov	objptr, local11
1d90c                 | LR__2872
1d90c     A7 F0 03 F6 | 	mov	ptra, fp
1d910     B2 00 A0 FD | 	call	#popregs_
1d914                 | __system___vfs_open_sdcardx_ret
1d914     2D 00 64 FD | 	ret
1d918                 | 
1d918                 | __system____default_getc
1d918     03 4A 05 F6 | 	mov	COUNT_, #3
1d91c     A8 00 A0 FD | 	call	#pushregs_
1d920     09 1F 02 F6 | 	mov	local01, arg01
1d924     0F 21 02 FB | 	rdlong	local02, local01
1d928     08 20 06 F1 | 	add	local02, #8
1d92c     10 23 02 FB | 	rdlong	local03, local02
1d930     02 22 CE F7 | 	test	local03, #2 wz
1d934     0F 13 02 56 |  if_ne	mov	arg01, local01
1d938     00 01 B0 5D |  if_ne	call	#__system____default_flush
1d93c     10 23 02 FB | 	rdlong	local03, local02
1d940     01 22 46 F5 | 	or	local03, #1
1d944     10 23 62 FC | 	wrlong	local03, local02
1d948     08 20 86 F1 | 	sub	local02, #8
1d94c     10 23 0A FB | 	rdlong	local03, local02 wz
1d950     0C 00 90 5D |  if_ne	jmp	#LR__2880
1d954     0F 13 02 F6 | 	mov	arg01, local01
1d958     64 16 B0 FD | 	call	#__system____default_filbuf
1d95c     FD 22 02 F6 | 	mov	local03, result1
1d960                 | LR__2880
1d960     01 22 56 F2 | 	cmps	local03, #1 wc
1d964     01 FA 65 C6 |  if_b	neg	result1, #1
1d968     1C 00 90 CD |  if_b	jmp	#LR__2881
1d96c     01 22 86 F1 | 	sub	local03, #1
1d970     10 23 62 FC | 	wrlong	local03, local02
1d974     04 20 06 F1 | 	add	local02, #4
1d978     10 23 02 FB | 	rdlong	local03, local02
1d97c     11 FB C1 FA | 	rdbyte	result1, local03
1d980     01 22 06 F1 | 	add	local03, #1
1d984     10 23 62 FC | 	wrlong	local03, local02
1d988                 | LR__2881
1d988     A7 F0 03 F6 | 	mov	ptra, fp
1d98c     B2 00 A0 FD | 	call	#popregs_
1d990                 | __system____default_getc_ret
1d990     2D 00 64 FD | 	ret
1d994                 | 
1d994                 | __system____default_putc
1d994     06 4A 05 F6 | 	mov	COUNT_, #6
1d998     A8 00 A0 FD | 	call	#pushregs_
1d99c     09 1F 02 F6 | 	mov	local01, arg01
1d9a0     0A 21 02 F6 | 	mov	local02, arg02
1d9a4     10 23 02 FB | 	rdlong	local03, local02
1d9a8     08 22 06 F1 | 	add	local03, #8
1d9ac     11 FB 01 FB | 	rdlong	result1, local03
1d9b0     01 FA CD F7 | 	test	result1, #1 wz
1d9b4     10 13 02 56 |  if_ne	mov	arg01, local02
1d9b8     80 00 B0 5D |  if_ne	call	#__system____default_flush
1d9bc     11 25 02 FB | 	rdlong	local04, local03
1d9c0     02 24 46 F5 | 	or	local04, #2
1d9c4     11 25 62 FC | 	wrlong	local04, local03
1d9c8     08 22 86 F1 | 	sub	local03, #8
1d9cc     11 27 02 FB | 	rdlong	local05, local03
1d9d0     10 22 06 F1 | 	add	local03, #16
1d9d4     11 15 02 FB | 	rdlong	arg02, local03
1d9d8     10 22 86 F1 | 	sub	local03, #16
1d9dc     13 FB 01 F6 | 	mov	result1, local05
1d9e0     0A FB 01 F1 | 	add	result1, arg02
1d9e4     FD 1E 42 FC | 	wrbyte	local01, result1
1d9e8     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1d9ec     01 26 06 F1 | 	add	local05, #1
1d9f0     11 27 62 FC | 	wrlong	local05, local03
1d9f4     06 20 06 F1 | 	add	local02, #6
1d9f8     10 29 EA FA | 	rdword	local06, local02 wz
1d9fc     06 20 86 F1 | 	sub	local02, #6
1da00     0C 22 06 51 |  if_ne	add	local03, #12
1da04     11 25 02 5B |  if_ne	rdlong	local04, local03
1da08     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1da0c     0C 00 90 AD |  if_e	jmp	#LR__2890
1da10     0A 1E 0E F2 | 	cmp	local01, #10 wz
1da14     01 28 0E A2 |  if_e	cmp	local06, #1 wz
1da18     10 00 90 5D |  if_ne	jmp	#LR__2891
1da1c                 | LR__2890
1da1c     10 13 02 F6 | 	mov	arg01, local02
1da20     18 00 B0 FD | 	call	#__system____default_flush
1da24     00 FA 0D F2 | 	cmp	result1, #0 wz
1da28     01 1E 66 56 |  if_ne	neg	local01, #1
1da2c                 | LR__2891
1da2c     0F FB 01 F6 | 	mov	result1, local01
1da30     A7 F0 03 F6 | 	mov	ptra, fp
1da34     B2 00 A0 FD | 	call	#popregs_
1da38                 | __system____default_putc_ret
1da38     2D 00 64 FD | 	ret
1da3c                 | 
1da3c                 | __system____default_flush
1da3c     06 4A 05 F6 | 	mov	COUNT_, #6
1da40     A8 00 A0 FD | 	call	#pushregs_
1da44     09 1F 02 F6 | 	mov	local01, arg01
1da48     0F 21 02 FB | 	rdlong	local02, local01
1da4c     10 23 02 FB | 	rdlong	local03, local02
1da50     08 20 06 F1 | 	add	local02, #8
1da54     10 FB 01 FB | 	rdlong	result1, local02
1da58     08 20 86 F1 | 	sub	local02, #8
1da5c     02 FA CD F7 | 	test	result1, #2 wz
1da60     D0 00 90 AD |  if_e	jmp	#LR__2902
1da64     01 22 56 F2 | 	cmps	local03, #1 wc
1da68     20 01 90 CD |  if_b	jmp	#LR__2904
1da6c     08 1E 06 F1 | 	add	local01, #8
1da70     0F FB 01 FB | 	rdlong	result1, local01
1da74     08 1E 86 F1 | 	sub	local01, #8
1da78     40 FA CD F7 | 	test	result1, #64 wz
1da7c     68 00 90 AD |  if_e	jmp	#LR__2901
1da80     08 1E 06 F1 | 	add	local01, #8
1da84     0F 17 02 FB | 	rdlong	arg03, local01
1da88     08 1E 86 F1 | 	sub	local01, #8
1da8c     80 16 CE F7 | 	test	arg03, #128 wz
1da90     54 00 90 AD |  if_e	jmp	#LR__2900
1da94     30 1E 06 F1 | 	add	local01, #48
1da98     0F 25 02 FB | 	rdlong	local04, local01
1da9c     12 27 02 F6 | 	mov	local05, local04
1daa0     30 1E 86 F1 | 	sub	local01, #48
1daa4     13 26 46 F7 | 	zerox	local05, #19
1daa8     14 24 46 F0 | 	shr	local04, #20
1daac     02 24 66 F0 | 	shl	local04, #2
1dab0     ED 24 02 F1 | 	add	local04, __methods__
1dab4     12 25 02 FB | 	rdlong	local04, local04
1dab8     0F 13 02 F6 | 	mov	arg01, local01
1dabc     00 14 06 F6 | 	mov	arg02, #0
1dac0     02 16 06 F6 | 	mov	arg03, #2
1dac4     F2 28 02 F6 | 	mov	local06, objptr
1dac8     13 E5 01 F6 | 	mov	objptr, local05
1dacc     2D 24 62 FD | 	call	local04
1dad0     14 E5 01 F6 | 	mov	objptr, local06
1dad4     08 1E 06 F1 | 	add	local01, #8
1dad8     0F 29 02 FB | 	rdlong	local06, local01
1dadc     80 28 26 F5 | 	andn	local06, #128
1dae0     0F 29 62 FC | 	wrlong	local06, local01
1dae4     08 1E 86 F1 | 	sub	local01, #8
1dae8                 | LR__2900
1dae8                 | LR__2901
1dae8     18 1E 06 F1 | 	add	local01, #24
1daec     0F 25 02 FB | 	rdlong	local04, local01
1daf0     12 27 02 F6 | 	mov	local05, local04
1daf4     18 1E 86 F1 | 	sub	local01, #24
1daf8     13 26 46 F7 | 	zerox	local05, #19
1dafc     14 24 46 F0 | 	shr	local04, #20
1db00     02 24 66 F0 | 	shl	local04, #2
1db04     ED 24 02 F1 | 	add	local04, __methods__
1db08     12 25 02 FB | 	rdlong	local04, local04
1db0c     10 20 06 F1 | 	add	local02, #16
1db10     10 15 02 FB | 	rdlong	arg02, local02
1db14     10 20 86 F1 | 	sub	local02, #16
1db18     0F 13 02 F6 | 	mov	arg01, local01
1db1c     11 17 02 F6 | 	mov	arg03, local03
1db20     F2 28 02 F6 | 	mov	local06, objptr
1db24     13 E5 01 F6 | 	mov	objptr, local05
1db28     2D 24 62 FD | 	call	local04
1db2c     14 E5 01 F6 | 	mov	objptr, local06
1db30     58 00 90 FD | 	jmp	#LR__2904
1db34                 | LR__2902
1db34     08 20 06 F1 | 	add	local02, #8
1db38     10 29 02 FB | 	rdlong	local06, local02
1db3c     08 20 86 F1 | 	sub	local02, #8
1db40     01 28 CE F7 | 	test	local06, #1 wz
1db44     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1db48     40 00 90 AD |  if_e	jmp	#LR__2903
1db4c     30 1E 06 F1 | 	add	local01, #48
1db50     0F 25 02 FB | 	rdlong	local04, local01
1db54     12 27 02 F6 | 	mov	local05, local04
1db58     30 1E 86 F1 | 	sub	local01, #48
1db5c     13 26 46 F7 | 	zerox	local05, #19
1db60     14 24 46 F0 | 	shr	local04, #20
1db64     02 24 66 F0 | 	shl	local04, #2
1db68     ED 24 02 F1 | 	add	local04, __methods__
1db6c     12 25 02 FB | 	rdlong	local04, local04
1db70     0F 13 02 F6 | 	mov	arg01, local01
1db74     11 15 62 F6 | 	neg	arg02, local03
1db78     01 16 06 F6 | 	mov	arg03, #1
1db7c     F2 28 02 F6 | 	mov	local06, objptr
1db80     13 E5 01 F6 | 	mov	objptr, local05
1db84     2D 24 62 FD | 	call	local04
1db88     14 E5 01 F6 | 	mov	objptr, local06
1db8c                 | LR__2903
1db8c                 | LR__2904
1db8c     10 01 68 FC | 	wrlong	#0, local02
1db90     04 20 06 F1 | 	add	local02, #4
1db94     10 01 68 FC | 	wrlong	#0, local02
1db98     04 20 06 F1 | 	add	local02, #4
1db9c     10 01 68 FC | 	wrlong	#0, local02
1dba0     00 FA 05 F6 | 	mov	result1, #0
1dba4     A7 F0 03 F6 | 	mov	ptra, fp
1dba8     B2 00 A0 FD | 	call	#popregs_
1dbac                 | __system____default_flush_ret
1dbac     2D 00 64 FD | 	ret
1dbb0                 | 
1dbb0                 | __system____default_buffer_init
1dbb0     02 4A 05 F6 | 	mov	COUNT_, #2
1dbb4     A8 00 A0 FD | 	call	#pushregs_
1dbb8     09 1F 02 F6 | 	mov	local01, arg01
1dbbc     0F 21 02 FB | 	rdlong	local02, local01
1dbc0     0F 13 02 F6 | 	mov	arg01, local01
1dbc4     F8 02 B0 FD | 	call	#__system___isatty
1dbc8     00 FA 0D F2 | 	cmp	result1, #0 wz
1dbcc     06 1E 06 51 |  if_ne	add	local01, #6
1dbd0     0F 0B 58 5C |  if_ne	wrword	#5, local01
1dbd4     06 1E 06 A1 |  if_e	add	local01, #6
1dbd8     0F 0D 58 AC |  if_e	wrword	#6, local01
1dbdc     14 20 06 F1 | 	add	local02, #20
1dbe0     10 1F 02 F6 | 	mov	local01, local02
1dbe4     04 20 86 F1 | 	sub	local02, #4
1dbe8     10 1F 62 FC | 	wrlong	local01, local02
1dbec     04 20 86 F1 | 	sub	local02, #4
1dbf0     02 00 80 FF 
1dbf4     10 01 68 FC | 	wrlong	##1024, local02
1dbf8     00 FA 05 F6 | 	mov	result1, #0
1dbfc     A7 F0 03 F6 | 	mov	ptra, fp
1dc00     B2 00 A0 FD | 	call	#popregs_
1dc04                 | __system____default_buffer_init_ret
1dc04     2D 00 64 FD | 	ret
1dc08                 | 
1dc08                 | __system__stat
1dc08     04 4A 05 F6 | 	mov	COUNT_, #4
1dc0c     A8 00 A0 FD | 	call	#pushregs_
1dc10     0A 1F 02 F6 | 	mov	local01, arg02
1dc14     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1dc18     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
1dc1c     09 15 02 F6 | 	mov	arg02, arg01
1dc20     10 13 02 F6 | 	mov	arg01, local02
1dc24     00 16 06 F6 | 	mov	arg03, #0
1dc28     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1dc2c     40 B9 BF FD | 	call	#__system____getvfsforfile
1dc30     FD 22 0A F6 | 	mov	local03, result1 wz
1dc34     10 00 90 AD |  if_e	jmp	#LR__2910
1dc38     34 22 06 F1 | 	add	local03, #52
1dc3c     11 17 0A FB | 	rdlong	arg03, local03 wz
1dc40     34 22 86 F1 | 	sub	local03, #52
1dc44     14 00 90 5D |  if_ne	jmp	#LR__2911
1dc48                 | LR__2910
1dc48     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1dc4c     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1dc50     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1dc54     01 FA 65 F6 | 	neg	result1, #1
1dc58     68 00 90 FD | 	jmp	#LR__2912
1dc5c                 | LR__2911
1dc5c     0F 13 02 F6 | 	mov	arg01, local01
1dc60     00 14 06 F6 | 	mov	arg02, #0
1dc64     30 16 06 F6 | 	mov	arg03, #48
1dc68     09 25 02 F6 | 	mov	local04, arg01
1dc6c     98 00 A0 FD | 	call	#\builtin_bytefill_
1dc70     12 FB 01 F6 | 	mov	result1, local04
1dc74     10 13 CA FA | 	rdbyte	arg01, local02 wz
1dc78     08 1E 06 A1 |  if_e	add	local01, #8
1dc7c     08 00 80 AF 
1dc80     0F FF 6B AC |  if_e	wrlong	##4607, local01
1dc84     00 FA 05 A6 |  if_e	mov	result1, #0
1dc88     38 00 90 AD |  if_e	jmp	#LR__2912
1dc8c     34 22 06 F1 | 	add	local03, #52
1dc90     11 23 02 FB | 	rdlong	local03, local03
1dc94     11 25 02 F6 | 	mov	local04, local03
1dc98     13 22 46 F7 | 	zerox	local03, #19
1dc9c     14 24 46 F0 | 	shr	local04, #20
1dca0     02 24 66 F0 | 	shl	local04, #2
1dca4     ED 24 02 F1 | 	add	local04, __methods__
1dca8     12 25 02 FB | 	rdlong	local04, local04
1dcac     10 13 02 F6 | 	mov	arg01, local02
1dcb0     0F 15 02 F6 | 	mov	arg02, local01
1dcb4     F2 20 02 F6 | 	mov	local02, objptr
1dcb8     11 E5 01 F6 | 	mov	objptr, local03
1dcbc     2D 24 62 FD | 	call	local04
1dcc0     10 E5 01 F6 | 	mov	objptr, local02
1dcc4                 | LR__2912
1dcc4     A7 F0 03 F6 | 	mov	ptra, fp
1dcc8     B2 00 A0 FD | 	call	#popregs_
1dccc                 | __system__stat_ret
1dccc     2D 00 64 FD | 	ret
1dcd0                 | 
1dcd0                 | __system__read
1dcd0     0A 12 16 F2 | 	cmp	arg01, #10 wc
1dcd4     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1dcd8     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1dcdc     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1dce0     01 FA 65 36 |  if_ae	neg	result1, #1
1dce4     20 00 90 3D |  if_ae	jmp	#LR__2920
1dce8     34 12 06 FD | 	qmul	arg01, #52
1dcec     02 00 00 FF 
1dcf0     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1dcf4     18 12 62 FD | 	getqx	arg01
1dcf8     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1dcfc     02 00 00 FF 
1dd00     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1dd04     D0 0F B0 FD | 	call	#__system___vfsread
1dd08                 | LR__2920
1dd08                 | __system__read_ret
1dd08     2D 00 64 FD | 	ret
1dd0c                 | 
1dd0c                 | __system__close
1dd0c     0A 12 16 F2 | 	cmp	arg01, #10 wc
1dd10     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1dd14     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1dd18     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1dd1c     01 FA 65 36 |  if_ae	neg	result1, #1
1dd20     20 00 90 3D |  if_ae	jmp	#LR__2930
1dd24     34 12 06 FD | 	qmul	arg01, #52
1dd28     02 00 00 FF 
1dd2c     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1dd30     18 12 62 FD | 	getqx	arg01
1dd34     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1dd38     02 00 00 FF 
1dd3c     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1dd40     4C F9 BF FD | 	call	#__system___closeraw
1dd44                 | LR__2930
1dd44                 | __system__close_ret
1dd44     2D 00 64 FD | 	ret
1dd48                 | 
1dd48                 | __system__lseek
1dd48     06 4A 05 F6 | 	mov	COUNT_, #6
1dd4c     A8 00 A0 FD | 	call	#pushregs_
1dd50     0A 12 16 F2 | 	cmp	arg01, #10 wc
1dd54     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1dd58     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1dd5c     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1dd60     01 FA 65 36 |  if_ae	neg	result1, #1
1dd64     C4 00 90 3D |  if_ae	jmp	#LR__2941
1dd68     34 12 06 FD | 	qmul	arg01, #52
1dd6c     02 00 00 FF 
1dd70     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1dd74     18 1E 62 FD | 	getqx	local01
1dd78     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
1dd7c     30 1E 06 F1 | 	add	local01, #48
1dd80     0F 13 0A FB | 	rdlong	arg01, local01 wz
1dd84     30 1E 86 F1 | 	sub	local01, #48
1dd88     02 00 00 FF 
1dd8c     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1dd90     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1dd94     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1dd98     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1dd9c     01 FA 65 A6 |  if_e	neg	result1, #1
1dda0     88 00 90 AD |  if_e	jmp	#LR__2941
1dda4     08 1E 06 F1 | 	add	local01, #8
1dda8     0F 21 02 FB | 	rdlong	local02, local01
1ddac     08 1E 86 F1 | 	sub	local01, #8
1ddb0     40 20 CE F7 | 	test	local02, #64 wz
1ddb4     08 1E 06 51 |  if_ne	add	local01, #8
1ddb8     0F 21 02 5B |  if_ne	rdlong	local02, local01
1ddbc     80 20 46 55 |  if_ne	or	local02, #128
1ddc0     0F 21 62 5C |  if_ne	wrlong	local02, local01
1ddc4     08 1E 86 51 |  if_ne	sub	local01, #8
1ddc8     30 1E 06 F1 | 	add	local01, #48
1ddcc     0F 23 02 FB | 	rdlong	local03, local01
1ddd0     11 25 02 F6 | 	mov	local04, local03
1ddd4     30 1E 86 F1 | 	sub	local01, #48
1ddd8     13 24 46 F7 | 	zerox	local04, #19
1dddc     14 22 46 F0 | 	shr	local03, #20
1dde0     02 22 66 F0 | 	shl	local03, #2
1dde4     ED 22 02 F1 | 	add	local03, __methods__
1dde8     11 23 02 FB | 	rdlong	local03, local03
1ddec     0F 13 02 F6 | 	mov	arg01, local01
1ddf0     F2 26 02 F6 | 	mov	local05, objptr
1ddf4     12 E5 01 F6 | 	mov	objptr, local04
1ddf8     2D 22 62 FD | 	call	local03
1ddfc     13 E5 01 F6 | 	mov	objptr, local05
1de00     FD 28 02 F6 | 	mov	local06, result1
1de04     00 28 56 F2 | 	cmps	local06, #0 wc
1de08     1C 00 90 3D |  if_ae	jmp	#LR__2940
1de0c     14 13 6A F6 | 	neg	arg01, local06 wz
1de10     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1de14     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1de18     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1de1c     01 FA 65 56 |  if_ne	neg	result1, #1
1de20     00 FA 05 A6 |  if_e	mov	result1, #0
1de24     04 00 90 FD | 	jmp	#LR__2941
1de28                 | LR__2940
1de28     14 FB 01 F6 | 	mov	result1, local06
1de2c                 | LR__2941
1de2c     A7 F0 03 F6 | 	mov	ptra, fp
1de30     B2 00 A0 FD | 	call	#popregs_
1de34                 | __system__lseek_ret
1de34     2D 00 64 FD | 	ret
1de38                 | 
1de38                 | __system___ioctl
1de38     03 4A 05 F6 | 	mov	COUNT_, #3
1de3c     A8 00 A0 FD | 	call	#pushregs_
1de40     00 12 4E F2 | 	cmps	arg01, #0 wz
1de44     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1de48     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1de4c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1de50     01 FA 65 A6 |  if_e	neg	result1, #1
1de54     5C 00 90 AD |  if_e	jmp	#LR__2951
1de58     28 12 06 F1 | 	add	arg01, #40
1de5c     09 1F 02 FB | 	rdlong	local01, arg01
1de60     0F 21 02 F6 | 	mov	local02, local01
1de64     28 12 86 F1 | 	sub	arg01, #40
1de68     13 20 46 F7 | 	zerox	local02, #19
1de6c     14 1E 46 F0 | 	shr	local01, #20
1de70     02 1E 66 F0 | 	shl	local01, #2
1de74     ED 1E 02 F1 | 	add	local01, __methods__
1de78     0F 1F 02 FB | 	rdlong	local01, local01
1de7c     F2 22 02 F6 | 	mov	local03, objptr
1de80     10 E5 01 F6 | 	mov	objptr, local02
1de84     2D 1E 62 FD | 	call	local01
1de88     11 E5 01 F6 | 	mov	objptr, local03
1de8c     FD 12 0A F6 | 	mov	arg01, result1 wz
1de90     1C 00 90 AD |  if_e	jmp	#LR__2950
1de94     00 12 4E F2 | 	cmps	arg01, #0 wz
1de98     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1de9c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1dea0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1dea4     01 FA 65 56 |  if_ne	neg	result1, #1
1dea8     00 FA 05 A6 |  if_e	mov	result1, #0
1deac     04 00 90 FD | 	jmp	#LR__2951
1deb0                 | LR__2950
1deb0     00 FA 05 F6 | 	mov	result1, #0
1deb4                 | LR__2951
1deb4     A7 F0 03 F6 | 	mov	ptra, fp
1deb8     B2 00 A0 FD | 	call	#popregs_
1debc                 | __system___ioctl_ret
1debc     2D 00 64 FD | 	ret
1dec0                 | 
1dec0                 | __system___isatty
1dec0     00 4A 05 F6 | 	mov	COUNT_, #0
1dec4     A8 00 A0 FD | 	call	#pushregs_
1dec8     0C F0 07 F1 | 	add	ptra, #12
1decc     04 4E 05 F1 | 	add	fp, #4
1ded0     A7 12 62 FC | 	wrlong	arg01, fp
1ded4     04 4E 05 F1 | 	add	fp, #4
1ded8     A7 16 02 F6 | 	mov	arg03, fp
1dedc     08 4E 85 F1 | 	sub	fp, #8
1dee0     00 15 06 F6 | 	mov	arg02, #256
1dee4     50 FF BF FD | 	call	#__system___ioctl
1dee8     00 FA 0D F2 | 	cmp	result1, #0 wz
1deec     01 FA 05 A6 |  if_e	mov	result1, #1
1def0     00 FA 05 56 |  if_ne	mov	result1, #0
1def4     A7 F0 03 F6 | 	mov	ptra, fp
1def8     B2 00 A0 FD | 	call	#popregs_
1defc                 | __system___isatty_ret
1defc     2D 00 64 FD | 	ret
1df00                 | 
1df00                 | __system____getftab
1df00     0A 12 16 F2 | 	cmp	arg01, #10 wc
1df04     34 12 06 CD |  if_b	qmul	arg01, #52
1df08     00 FA 05 36 |  if_ae	mov	result1, #0
1df0c     02 00 00 CF 
1df10     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1df14     18 FA 61 CD |  if_b	getqx	result1
1df18     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1df1c     02 00 00 CF 
1df20     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1df24                 | __system____getftab_ret
1df24     2D 00 64 FD | 	ret
1df28                 | 
1df28                 | __system__strncpy
1df28     09 01 02 F6 | 	mov	_var01, arg01
1df2c                 | LR__2960
1df2c     01 16 86 F1 | 	sub	arg03, #1
1df30     00 16 56 F2 | 	cmps	arg03, #0 wc
1df34     18 00 90 CD |  if_b	jmp	#LR__2961
1df38     0A FB C1 FA | 	rdbyte	result1, arg02
1df3c     00 FB 41 FC | 	wrbyte	result1, _var01
1df40     01 14 06 F1 | 	add	arg02, #1
1df44     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1df48     01 00 06 F1 | 	add	_var01, #1
1df4c     DC FF 9F 5D |  if_ne	jmp	#LR__2960
1df50                 | LR__2961
1df50     97 0C 48 FB | 	callpa	#(@LR__2963-@LR__2962)>>2,fcache_load_ptr_
1df54                 | LR__2962
1df54     01 16 86 F1 | 	sub	arg03, #1
1df58     00 16 56 F2 | 	cmps	arg03, #0 wc
1df5c     00 03 02 36 |  if_ae	mov	_var02, _var01
1df60     01 00 06 31 |  if_ae	add	_var01, #1
1df64     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1df68     E8 FF 9F 3D |  if_ae	jmp	#LR__2962
1df6c                 | LR__2963
1df6c     09 FB 01 F6 | 	mov	result1, arg01
1df70                 | __system__strncpy_ret
1df70     2D 00 64 FD | 	ret
1df74                 | 
1df74                 | __system__strncat
1df74     00 14 4E F2 | 	cmps	arg02, #0 wz
1df78     50 00 90 AD |  if_e	jmp	#LR__2974
1df7c     01 16 16 F2 | 	cmp	arg03, #1 wc
1df80     48 00 90 CD |  if_b	jmp	#LR__2974
1df84     09 01 02 F6 | 	mov	_var01, arg01
1df88     97 1E 48 FB | 	callpa	#(@LR__2972-@LR__2970)>>2,fcache_load_ptr_
1df8c                 | LR__2970
1df8c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1df90     01 00 06 51 |  if_ne	add	_var01, #1
1df94     F4 FF 9F 5D |  if_ne	jmp	#LR__2970
1df98     0B 03 02 F6 | 	mov	_var02, arg03
1df9c                 | LR__2971
1df9c     0A 05 C2 FA | 	rdbyte	_var03, arg02
1dfa0     02 07 02 F6 | 	mov	_var04, _var03
1dfa4     07 06 4E F7 | 	zerox	_var04, #7 wz
1dfa8     01 14 06 F1 | 	add	arg02, #1
1dfac     18 00 90 AD |  if_e	jmp	#LR__2973
1dfb0     01 02 86 F1 | 	sub	_var02, #1
1dfb4     00 02 56 F2 | 	cmps	_var02, #0 wc
1dfb8     00 07 02 36 |  if_ae	mov	_var04, _var01
1dfbc     01 00 06 31 |  if_ae	add	_var01, #1
1dfc0     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1dfc4     D4 FF 9F 3D |  if_ae	jmp	#LR__2971
1dfc8                 | LR__2972
1dfc8                 | LR__2973
1dfc8     00 01 48 FC | 	wrbyte	#0, _var01
1dfcc                 | LR__2974
1dfcc     09 FB 01 F6 | 	mov	result1, arg01
1dfd0                 | __system__strncat_ret
1dfd0     2D 00 64 FD | 	ret
1dfd4                 | 
1dfd4                 | __system__strncmp
1dfd4     09 01 0A F6 | 	mov	_var01, arg01 wz
1dfd8     14 00 90 5D |  if_ne	jmp	#LR__2980
1dfdc     00 14 0E F2 | 	cmp	arg02, #0 wz
1dfe0     01 02 66 56 |  if_ne	neg	_var02, #1
1dfe4     00 02 06 A6 |  if_e	mov	_var02, #0
1dfe8     01 FB 01 F6 | 	mov	result1, _var02
1dfec     74 00 90 FD | 	jmp	#__system__strncmp_ret
1dff0                 | LR__2980
1dff0     00 14 0E F2 | 	cmp	arg02, #0 wz
1dff4     01 FA 05 A6 |  if_e	mov	result1, #1
1dff8     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1dffc     0B 05 02 F6 | 	mov	_var03, arg03
1e000     97 16 48 FB | 	callpa	#(@LR__2982-@LR__2981)>>2,fcache_load_ptr_
1e004                 | LR__2981
1e004     00 07 C2 FA | 	rdbyte	_var04, _var01
1e008     0A 09 02 F6 | 	mov	_var05, arg02
1e00c     04 0B C2 FA | 	rdbyte	_var06, _var05
1e010     01 04 86 F1 | 	sub	_var03, #1
1e014     00 04 56 F2 | 	cmps	_var03, #0 wc
1e018     01 00 06 F1 | 	add	_var01, #1
1e01c     01 14 06 F1 | 	add	arg02, #1
1e020     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1e024     08 00 90 2D |  if_nc_and_z	jmp	#LR__2983
1e028     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1e02c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__2981
1e030                 | LR__2982
1e030                 | LR__2983
1e030     00 04 56 F2 | 	cmps	_var03, #0 wc
1e034     00 FA 05 C6 |  if_b	mov	result1, #0
1e038     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1e03c     05 07 0A F2 | 	cmp	_var04, _var06 wz
1e040     00 FA 05 A6 |  if_e	mov	result1, #0
1e044     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1e048     00 06 0E F2 | 	cmp	_var04, #0 wz
1e04c     01 FA 65 A6 |  if_e	neg	result1, #1
1e050     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1e054     00 0A 0E F2 | 	cmp	_var06, #0 wz
1e058     01 FA 05 A6 |  if_e	mov	result1, #1
1e05c     03 FB 01 56 |  if_ne	mov	result1, _var04
1e060     05 FB 81 51 |  if_ne	sub	result1, _var06
1e064                 | __system__strncmp_ret
1e064     2D 00 64 FD | 	ret
1e068                 | 
1e068                 | __system____root_opendir
1e068     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1e06c     04 12 06 F1 | 	add	arg01, #4
1e070     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
1e074     00 FA 05 F6 | 	mov	result1, #0
1e078     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1e07c                 | __system____root_opendir_ret
1e07c     2D 00 64 FD | 	ret
1e080                 | 
1e080                 | __system____root_readdir
1e080     03 4A 05 F6 | 	mov	COUNT_, #3
1e084     A8 00 A0 FD | 	call	#pushregs_
1e088     09 1F 02 F6 | 	mov	local01, arg01
1e08c     0A 21 02 F6 | 	mov	local02, arg02
1e090     04 1E 06 F1 | 	add	local01, #4
1e094     0F 23 02 FB | 	rdlong	local03, local01
1e098     04 1E 86 F1 | 	sub	local01, #4
1e09c                 | LR__2990
1e09c     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1e0a0     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1e0a4     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1e0a8     01 FA 65 A6 |  if_e	neg	result1, #1
1e0ac     48 00 90 AD |  if_e	jmp	#LR__2991
1e0b0     11 17 0A FB | 	rdlong	arg03, local03 wz
1e0b4     04 22 06 A1 |  if_e	add	local03, #4
1e0b8     E0 FF 9F AD |  if_e	jmp	#LR__2990
1e0bc     11 15 02 FB | 	rdlong	arg02, local03
1e0c0     01 14 06 F1 | 	add	arg02, #1
1e0c4     10 13 02 F6 | 	mov	arg01, local02
1e0c8     40 16 06 F6 | 	mov	arg03, #64
1e0cc     58 FE BF FD | 	call	#__system__strncpy
1e0d0     50 20 06 F1 | 	add	local02, #80
1e0d4     10 03 48 FC | 	wrbyte	#1, local02
1e0d8     08 20 86 F1 | 	sub	local02, #8
1e0dc     10 01 68 FC | 	wrlong	#0, local02
1e0e0     04 20 06 F1 | 	add	local02, #4
1e0e4     10 01 68 FC | 	wrlong	#0, local02
1e0e8     04 22 06 F1 | 	add	local03, #4
1e0ec     04 1E 06 F1 | 	add	local01, #4
1e0f0     0F 23 62 FC | 	wrlong	local03, local01
1e0f4     00 FA 05 F6 | 	mov	result1, #0
1e0f8                 | LR__2991
1e0f8     A7 F0 03 F6 | 	mov	ptra, fp
1e0fc     B2 00 A0 FD | 	call	#popregs_
1e100                 | __system____root_readdir_ret
1e100     2D 00 64 FD | 	ret
1e104                 | 
1e104                 | __system____root_closedir
1e104     00 FA 05 F6 | 	mov	result1, #0
1e108                 | __system____root_closedir_ret
1e108     2D 00 64 FD | 	ret
1e10c                 | 
1e10c                 | __system____root_stat
1e10c     0A 01 02 F6 | 	mov	_var01, arg02
1e110     00 13 02 F6 | 	mov	arg01, _var01
1e114     00 14 06 F6 | 	mov	arg02, #0
1e118     30 16 06 F6 | 	mov	arg03, #48
1e11c     98 00 A0 FD | 	call	#\builtin_bytefill_
1e120     08 00 06 F1 | 	add	_var01, #8
1e124     08 00 80 FF 
1e128     00 FF 6B FC | 	wrlong	##4607, _var01
1e12c     00 FA 05 F6 | 	mov	result1, #0
1e130                 | __system____root_stat_ret
1e130     2D 00 64 FD | 	ret
1e134                 | 
1e134                 | __system___normalizeName
1e134     00 00 06 F6 | 	mov	_var01, #0
1e138     09 03 02 F6 | 	mov	_var02, arg01
1e13c     01 05 02 F6 | 	mov	_var03, _var02
1e140                 | LR__3000
1e140     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1e144     5C 01 90 AD |  if_e	jmp	#LR__3019
1e148     00 00 0E F2 | 	cmp	_var01, #0 wz
1e14c     02 07 02 56 |  if_ne	mov	_var04, _var03
1e150     01 04 06 51 |  if_ne	add	_var03, #1
1e154     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
1e158     00 00 06 56 |  if_ne	mov	_var01, #0
1e15c     01 07 C2 FA | 	rdbyte	_var04, _var02
1e160     2E 06 0E F2 | 	cmp	_var04, #46 wz
1e164     D8 00 90 5D |  if_ne	jmp	#LR__3012
1e168     01 02 06 F1 | 	add	_var02, #1
1e16c     01 07 C2 FA | 	rdbyte	_var04, _var02
1e170     01 02 86 F1 | 	sub	_var02, #1
1e174     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e178     18 00 90 AD |  if_e	jmp	#LR__3001
1e17c     01 02 06 F1 | 	add	_var02, #1
1e180     01 09 C2 FA | 	rdbyte	_var05, _var02
1e184     01 02 86 F1 | 	sub	_var02, #1
1e188     04 0B 02 F6 | 	mov	_var06, _var05
1e18c     07 0A 4E F7 | 	zerox	_var06, #7 wz
1e190     10 00 90 5D |  if_ne	jmp	#LR__3002
1e194                 | LR__3001
1e194     01 0D 02 F6 | 	mov	_var07, _var02
1e198     01 0C 06 F1 | 	add	_var07, #1
1e19c     06 03 02 F6 | 	mov	_var02, _var07
1e1a0     E0 00 90 FD | 	jmp	#LR__3016
1e1a4                 | LR__3002
1e1a4     01 02 06 F1 | 	add	_var02, #1
1e1a8     01 0D C2 FA | 	rdbyte	_var07, _var02
1e1ac     01 02 86 F1 | 	sub	_var02, #1
1e1b0     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1e1b4     2E 06 0E F2 | 	cmp	_var04, #46 wz
1e1b8     84 00 90 5D |  if_ne	jmp	#LR__3011
1e1bc     02 02 06 F1 | 	add	_var02, #2
1e1c0     01 0D C2 FA | 	rdbyte	_var07, _var02
1e1c4     02 02 86 F1 | 	sub	_var02, #2
1e1c8     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1e1cc     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e1d0     18 00 90 AD |  if_e	jmp	#LR__3003
1e1d4     02 02 06 F1 | 	add	_var02, #2
1e1d8     01 09 C2 FA | 	rdbyte	_var05, _var02
1e1dc     02 02 86 F1 | 	sub	_var02, #2
1e1e0     04 0B 02 F6 | 	mov	_var06, _var05
1e1e4     07 0A 4E F7 | 	zerox	_var06, #7 wz
1e1e8     54 00 90 5D |  if_ne	jmp	#LR__3010
1e1ec                 | LR__3003
1e1ec     02 02 06 F1 | 	add	_var02, #2
1e1f0     09 05 5A F2 | 	cmps	_var03, arg01 wcz
1e1f4     40 00 90 ED |  if_be	jmp	#LR__3009
1e1f8     02 0F 02 F6 | 	mov	_var08, _var03
1e1fc     01 0E 86 F1 | 	sub	_var08, #1
1e200                 | LR__3004
1e200     07 07 C2 FA | 	rdbyte	_var04, _var08
1e204     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e208     0C 00 90 5D |  if_ne	jmp	#LR__3005
1e20c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1e210     01 0E 86 11 |  if_a	sub	_var08, #1
1e214     E8 FF 9F 1D |  if_a	jmp	#LR__3004
1e218                 | LR__3005
1e218     97 0C 48 FB | 	callpa	#(@LR__3007-@LR__3006)>>2,fcache_load_ptr_
1e21c                 | LR__3006
1e21c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1e220     10 00 90 ED |  if_be	jmp	#LR__3008
1e224     07 07 C2 FA | 	rdbyte	_var04, _var08
1e228     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e22c     01 0E 86 51 |  if_ne	sub	_var08, #1
1e230     E8 FF 9F 5D |  if_ne	jmp	#LR__3006
1e234                 | LR__3007
1e234                 | LR__3008
1e234     07 05 02 F6 | 	mov	_var03, _var08
1e238                 | LR__3009
1e238     01 00 06 F6 | 	mov	_var01, #1
1e23c     44 00 90 FD | 	jmp	#LR__3016
1e240                 | LR__3010
1e240                 | LR__3011
1e240                 | LR__3012
1e240     97 18 48 FB | 	callpa	#(@LR__3014-@LR__3013)>>2,fcache_load_ptr_
1e244                 | LR__3013
1e244     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1e248     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1e24c     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1e250     20 00 90 AD |  if_e	jmp	#LR__3015
1e254     01 0B 02 F6 | 	mov	_var06, _var02
1e258     01 09 02 F6 | 	mov	_var05, _var02
1e25c     01 08 06 F1 | 	add	_var05, #1
1e260     05 11 C2 FA | 	rdbyte	_var09, _var06
1e264     04 03 02 F6 | 	mov	_var02, _var05
1e268     02 11 42 FC | 	wrbyte	_var09, _var03
1e26c     01 04 06 F1 | 	add	_var03, #1
1e270     D0 FF 9F FD | 	jmp	#LR__3013
1e274                 | LR__3014
1e274                 | LR__3015
1e274     01 07 C2 FA | 	rdbyte	_var04, _var02
1e278     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e27c     C0 FE 9F 5D |  if_ne	jmp	#LR__3000
1e280     01 00 06 F6 | 	mov	_var01, #1
1e284                 | LR__3016
1e284     97 0C 48 FB | 	callpa	#(@LR__3018-@LR__3017)>>2,fcache_load_ptr_
1e288                 | LR__3017
1e288     01 07 C2 FA | 	rdbyte	_var04, _var02
1e28c     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e290     01 0D 02 A6 |  if_e	mov	_var07, _var02
1e294     01 0C 06 A1 |  if_e	add	_var07, #1
1e298     06 03 02 A6 |  if_e	mov	_var02, _var07
1e29c     E8 FF 9F AD |  if_e	jmp	#LR__3017
1e2a0                 | LR__3018
1e2a0     9C FE 9F FD | 	jmp	#LR__3000
1e2a4                 | LR__3019
1e2a4     02 01 48 FC | 	wrbyte	#0, _var03
1e2a8                 | __system___normalizeName_ret
1e2a8     2D 00 64 FD | 	ret
1e2ac                 | 
1e2ac                 | __system___strrev
1e2ac     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1e2b0     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1e2b4     09 03 02 F6 | 	mov	_var02, arg01
1e2b8     97 1A 48 FB | 	callpa	#(@LR__3022-@LR__3020)>>2,fcache_load_ptr_
1e2bc                 | LR__3020
1e2bc     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1e2c0     01 02 06 51 |  if_ne	add	_var02, #1
1e2c4     F4 FF 9F 5D |  if_ne	jmp	#LR__3020
1e2c8     01 02 86 F1 | 	sub	_var02, #1
1e2cc                 | LR__3021
1e2cc     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1e2d0     1C 00 90 ED |  if_be	jmp	#LR__3023
1e2d4     09 01 C2 FA | 	rdbyte	_var01, arg01
1e2d8     01 05 C2 FA | 	rdbyte	_var03, _var02
1e2dc     09 05 42 FC | 	wrbyte	_var03, arg01
1e2e0     01 01 42 FC | 	wrbyte	_var01, _var02
1e2e4     01 12 06 F1 | 	add	arg01, #1
1e2e8     01 02 86 F1 | 	sub	_var02, #1
1e2ec     DC FF 9F FD | 	jmp	#LR__3021
1e2f0                 | LR__3022
1e2f0                 | LR__3023
1e2f0                 | __system___strrev_ret
1e2f0     2D 00 64 FD | 	ret
1e2f4                 | 
1e2f4                 | __system___fmtpad
1e2f4     06 4A 05 F6 | 	mov	COUNT_, #6
1e2f8     A8 00 A0 FD | 	call	#pushregs_
1e2fc     09 1F 02 F6 | 	mov	local01, arg01
1e300     0A 21 02 F6 | 	mov	local02, arg02
1e304     0B 23 02 F6 | 	mov	local03, arg03
1e308     10 13 EA F8 | 	getbyte	arg01, local02, #1
1e30c     16 20 46 F0 | 	shr	local02, #22
1e310     03 20 0E F5 | 	and	local02, #3 wz
1e314     00 24 06 F6 | 	mov	local04, #0
1e318     01 20 06 A6 |  if_e	mov	local02, #1
1e31c     0C 21 CA F7 | 	test	local02, arg04 wz
1e320     00 FA 05 A6 |  if_e	mov	result1, #0
1e324     88 00 90 AD |  if_e	jmp	#LR__3033
1e328     09 23 C2 F2 | 	subr	local03, arg01
1e32c     01 22 56 F2 | 	cmps	local03, #1 wc
1e330     00 FA 05 C6 |  if_b	mov	result1, #0
1e334     78 00 90 CD |  if_b	jmp	#LR__3033
1e338     03 20 0E F2 | 	cmp	local02, #3 wz
1e33c     18 00 90 5D |  if_ne	jmp	#LR__3030
1e340     01 18 0E F2 | 	cmp	arg04, #1 wz
1e344     6E 20 62 FD | 	wrz	local02
1e348     10 23 02 F1 | 	add	local03, local02
1e34c     11 23 52 F6 | 	abs	local03, local03 wc
1e350     01 22 46 F0 | 	shr	local03, #1
1e354     11 23 82 F6 | 	negc	local03, local03
1e358                 | LR__3030
1e358     01 22 56 F2 | 	cmps	local03, #1 wc
1e35c     4C 00 90 CD |  if_b	jmp	#LR__3032
1e360     11 27 02 F6 | 	mov	local05, local03
1e364                 | LR__3031
1e364     0F 21 02 F6 | 	mov	local02, local01
1e368     0F 29 02 F6 | 	mov	local06, local01
1e36c     13 20 46 F7 | 	zerox	local02, #19
1e370     14 28 46 F0 | 	shr	local06, #20
1e374     02 28 66 F0 | 	shl	local06, #2
1e378     ED 28 02 F1 | 	add	local06, __methods__
1e37c     14 29 02 FB | 	rdlong	local06, local06
1e380     20 12 06 F6 | 	mov	arg01, #32
1e384     F2 22 02 F6 | 	mov	local03, objptr
1e388     10 E5 01 F6 | 	mov	objptr, local02
1e38c     2D 28 62 FD | 	call	local06
1e390     11 E5 01 F6 | 	mov	objptr, local03
1e394     FD 28 02 F6 | 	mov	local06, result1
1e398     00 28 56 F2 | 	cmps	local06, #0 wc
1e39c     14 FB 01 C6 |  if_b	mov	result1, local06
1e3a0     0C 00 90 CD |  if_b	jmp	#LR__3033
1e3a4     14 25 02 F1 | 	add	local04, local06
1e3a8     EE 27 6E FB | 	djnz	local05, #LR__3031
1e3ac                 | LR__3032
1e3ac     12 FB 01 F6 | 	mov	result1, local04
1e3b0                 | LR__3033
1e3b0     A7 F0 03 F6 | 	mov	ptra, fp
1e3b4     B2 00 A0 FD | 	call	#popregs_
1e3b8                 | __system___fmtpad_ret
1e3b8     2D 00 64 FD | 	ret
1e3bc                 | 
1e3bc                 | __system___uitoa
1e3bc     04 4A 05 F6 | 	mov	COUNT_, #4
1e3c0     A8 00 A0 FD | 	call	#pushregs_
1e3c4     09 1F 02 F6 | 	mov	local01, arg01
1e3c8     00 1A 4E F2 | 	cmps	arg05, #0 wz
1e3cc     0F 1B 02 F6 | 	mov	arg05, local01
1e3d0     00 20 06 F6 | 	mov	local02, #0
1e3d4     37 22 06 56 |  if_ne	mov	local03, #55
1e3d8     57 22 06 A6 |  if_e	mov	local03, #87
1e3dc                 | LR__3040
1e3dc     0B 15 12 FD | 	qdiv	arg02, arg03
1e3e0     19 24 62 FD | 	getqy	local04
1e3e4     0B 15 12 FD | 	qdiv	arg02, arg03
1e3e8     0A 24 16 F2 | 	cmp	local04, #10 wc
1e3ec     30 24 06 C1 |  if_b	add	local04, #48
1e3f0     11 25 02 31 |  if_ae	add	local04, local03
1e3f4     0D 25 42 FC | 	wrbyte	local04, arg05
1e3f8     01 1A 06 F1 | 	add	arg05, #1
1e3fc     01 20 06 F1 | 	add	local02, #1
1e400     18 14 62 FD | 	getqx	arg02
1e404     00 14 0E F2 | 	cmp	arg02, #0 wz
1e408     D0 FF 9F 5D |  if_ne	jmp	#LR__3040
1e40c     0C 21 12 F2 | 	cmp	local02, arg04 wc
1e410     C8 FF 9F CD |  if_b	jmp	#LR__3040
1e414     0D 01 48 FC | 	wrbyte	#0, arg05
1e418     0F 13 02 F6 | 	mov	arg01, local01
1e41c     8C FE BF FD | 	call	#__system___strrev
1e420     10 FB 01 F6 | 	mov	result1, local02
1e424     A7 F0 03 F6 | 	mov	ptra, fp
1e428     B2 00 A0 FD | 	call	#popregs_
1e42c                 | __system___uitoa_ret
1e42c     2D 00 64 FD | 	ret
1e430                 | 
1e430                 | __system__disassemble_0381
1e430     10 4A 05 F6 | 	mov	COUNT_, #16
1e434     A8 00 A0 FD | 	call	#pushregs_
1e438     09 1F 02 F6 | 	mov	local01, arg01
1e43c     0A 21 02 F6 | 	mov	local02, arg02
1e440     0B 23 02 F6 | 	mov	local03, arg03
1e444     0C 25 02 F6 | 	mov	local04, arg04
1e448     0D 27 02 F6 | 	mov	local05, arg05
1e44c     13 13 52 F6 | 	abs	arg01, local05 wc
1e450     1F 28 C6 C9 |  if_b	decod	local06, #31
1e454     00 28 06 36 |  if_ae	mov	local06, #0
1e458     64 D0 BF FD | 	call	#__system___float_fromuns
1e45c     14 FB 61 F5 | 	xor	result1, local06
1e460     FD 2A 02 F6 | 	mov	local07, result1
1e464     00 2C 06 F6 | 	mov	local08, #0
1e468     0F 13 02 F6 | 	mov	arg01, local01
1e46c     00 14 06 F6 | 	mov	arg02, #0
1e470     01 16 06 F6 | 	mov	arg03, #1
1e474     80 D8 BF FD | 	call	#__system___float_cmp
1e478     00 FA 0D F2 | 	cmp	result1, #0 wz
1e47c     00 2E 06 A6 |  if_e	mov	local09, #0
1e480     10 01 68 AC |  if_e	wrlong	#0, local02
1e484     11 2F 62 AC |  if_e	wrlong	local09, local03
1e488     8C 01 90 AD |  if_e	jmp	#LR__3062
1e48c     0F 13 02 F6 | 	mov	arg01, local01
1e490     30 DD BF FD | 	call	#__system____builtin_ilogb
1e494     FD 30 02 F6 | 	mov	local10, result1
1e498     0A 26 0E F2 | 	cmp	local05, #10 wz
1e49c     24 00 90 5D |  if_ne	jmp	#LR__3050
1e4a0     18 2F 02 F6 | 	mov	local09, local10
1e4a4     01 2E 66 F0 | 	shl	local09, #1
1e4a8     18 2F 02 F1 | 	add	local09, local10
1e4ac     17 31 52 F6 | 	abs	local10, local09 wc
1e4b0     0A 30 16 FD | 	qdiv	local10, #10
1e4b4     09 32 06 F6 | 	mov	local11, #9
1e4b8     18 30 62 FD | 	getqx	local10
1e4bc     18 31 82 F6 | 	negc	local10, local10
1e4c0     04 00 90 FD | 	jmp	#LR__3051
1e4c4                 | LR__3050
1e4c4     18 32 06 F6 | 	mov	local11, #24
1e4c8                 | LR__3051
1e4c8                 | LR__3052
1e4c8     08 2C 56 F2 | 	cmps	local08, #8 wc
1e4cc     01 2C 06 F1 | 	add	local08, #1
1e4d0     60 00 90 3D |  if_ae	jmp	#LR__3053
1e4d4     00 C0 1F FF 
1e4d8     00 12 06 F6 | 	mov	arg01, ##1065353216
1e4dc     15 15 02 F6 | 	mov	arg02, local07
1e4e0     18 17 02 F6 | 	mov	arg03, local10
1e4e4     88 E3 BF FD | 	call	#__system___float_pow_n
1e4e8     FD 14 02 F6 | 	mov	arg02, result1
1e4ec     0F 13 02 F6 | 	mov	arg01, local01
1e4f0     D4 D5 BF FD | 	call	#__system___float_div
1e4f4     FD 34 02 F6 | 	mov	local12, result1
1e4f8     1A 13 02 F6 | 	mov	arg01, local12
1e4fc     00 C0 1F FF 
1e500     00 14 06 F6 | 	mov	arg02, ##1065353216
1e504     01 16 06 F6 | 	mov	arg03, #1
1e508     EC D7 BF FD | 	call	#__system___float_cmp
1e50c     00 FA 55 F2 | 	cmps	result1, #0 wc
1e510     01 30 86 C1 |  if_b	sub	local10, #1
1e514     B0 FF 9F CD |  if_b	jmp	#LR__3052
1e518     15 15 02 F6 | 	mov	arg02, local07
1e51c     1A 13 02 F6 | 	mov	arg01, local12
1e520     01 16 66 F6 | 	neg	arg03, #1
1e524     D0 D7 BF FD | 	call	#__system___float_cmp
1e528     00 FA 55 F2 | 	cmps	result1, #0 wc
1e52c     01 30 06 31 |  if_ae	add	local10, #1
1e530     94 FF 9F 3D |  if_ae	jmp	#LR__3052
1e534                 | LR__3053
1e534     1A 13 02 F6 | 	mov	arg01, local12
1e538     88 DC BF FD | 	call	#__system____builtin_ilogb
1e53c     FD 36 02 F6 | 	mov	local13, result1
1e540     1A 39 02 F6 | 	mov	local14, local12
1e544     17 39 06 F4 | 	bitl	local14, #279
1e548     17 38 26 F4 | 	bith	local14, #23
1e54c     1B 39 62 F0 | 	shl	local14, local13
1e550     02 26 0E F2 | 	cmp	local05, #2 wz
1e554     02 24 66 A0 |  if_e	shl	local04, #2
1e558     00 3A 06 F6 | 	mov	local15, #0
1e55c     00 24 56 F2 | 	cmps	local04, #0 wc
1e560     10 00 90 3D |  if_ae	jmp	#LR__3054
1e564     18 25 C2 F2 | 	subr	local04, local10
1e568     00 24 56 F2 | 	cmps	local04, #0 wc
1e56c     A0 00 90 CD |  if_b	jmp	#LR__3061
1e570     04 00 90 FD | 	jmp	#LR__3055
1e574                 | LR__3054
1e574     01 24 06 F1 | 	add	local04, #1
1e578                 | LR__3055
1e578     19 25 7A F3 | 	fles	local04, local11 wcz
1e57c     01 3C 06 F6 | 	mov	local16, #1
1e580     97 22 48 FB | 	callpa	#(@LR__3057-@LR__3056)>>2,fcache_load_ptr_
1e584                 | LR__3056
1e584     00 40 00 FF 
1e588     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1e58c     38 00 90 3D |  if_ae	jmp	#LR__3058
1e590     01 24 56 F2 | 	cmps	local04, #1 wc
1e594     01 24 86 F1 | 	sub	local04, #1
1e598     2C 00 90 CD |  if_b	jmp	#LR__3058
1e59c     13 3B 02 FD | 	qmul	local15, local05
1e5a0     1C 37 02 F6 | 	mov	local13, local14
1e5a4     17 36 46 F0 | 	shr	local13, #23
1e5a8     17 39 06 F4 | 	bitl	local14, #279
1e5ac     18 3A 62 FD | 	getqx	local15
1e5b0     13 3D 02 FD | 	qmul	local16, local05
1e5b4     18 3C 62 FD | 	getqx	local16
1e5b8     13 39 02 FD | 	qmul	local14, local05
1e5bc     1B 3B 02 F1 | 	add	local15, local13
1e5c0     18 38 62 FD | 	getqx	local14
1e5c4     BC FF 9F FD | 	jmp	#LR__3056
1e5c8                 | LR__3057
1e5c8                 | LR__3058
1e5c8     13 2F 02 F6 | 	mov	local09, local05
1e5cc     17 2E 66 F0 | 	shl	local09, #23
1e5d0     17 37 52 F6 | 	abs	local13, local09 wc
1e5d4     01 36 46 F0 | 	shr	local13, #1
1e5d8     1B 37 82 F6 | 	negc	local13, local13
1e5dc     1B 39 1A F2 | 	cmp	local14, local13 wcz
1e5e0     20 00 90 1D |  if_a	jmp	#LR__3059
1e5e4     17 26 66 F0 | 	shl	local05, #23
1e5e8     13 37 52 F6 | 	abs	local13, local05 wc
1e5ec     01 36 46 F0 | 	shr	local13, #1
1e5f0     1B 37 82 F6 | 	negc	local13, local13
1e5f4     1B 39 0A F2 | 	cmp	local14, local13 wz
1e5f8     14 00 90 5D |  if_ne	jmp	#LR__3060
1e5fc     01 3A CE F7 | 	test	local15, #1 wz
1e600     0C 00 90 AD |  if_e	jmp	#LR__3060
1e604                 | LR__3059
1e604     01 3A 06 F1 | 	add	local15, #1
1e608     1E 3B 0A F2 | 	cmp	local15, local16 wz
1e60c     01 30 06 A1 |  if_e	add	local10, #1
1e610                 | LR__3060
1e610                 | LR__3061
1e610     10 3B 62 FC | 	wrlong	local15, local02
1e614     11 31 62 FC | 	wrlong	local10, local03
1e618                 | LR__3062
1e618     A7 F0 03 F6 | 	mov	ptra, fp
1e61c     B2 00 A0 FD | 	call	#popregs_
1e620                 | __system__disassemble_0381_ret
1e620     2D 00 64 FD | 	ret
1e624                 | 
1e624                 | __system__emitsign_0383
1e624     00 FA 05 F6 | 	mov	result1, #0
1e628     00 14 0E F2 | 	cmp	arg02, #0 wz
1e62c     09 01 02 56 |  if_ne	mov	_var01, arg01
1e630     01 12 06 51 |  if_ne	add	arg01, #1
1e634     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1e638     01 FA 05 56 |  if_ne	mov	result1, #1
1e63c     00 16 0E F2 | 	cmp	arg03, #0 wz
1e640     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1e644     01 12 06 51 |  if_ne	add	arg01, #1
1e648     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1e64c     02 FA 05 51 |  if_ne	add	result1, #2
1e650                 | __system__emitsign_0383_ret
1e650     2D 00 64 FD | 	ret
1e654                 | 
1e654                 | __system___gettxfunc
1e654     01 4A 05 F6 | 	mov	COUNT_, #1
1e658     A8 00 A0 FD | 	call	#pushregs_
1e65c     A0 F8 BF FD | 	call	#__system____getftab
1e660     FD 1E 0A F6 | 	mov	local01, result1 wz
1e664     10 00 90 AD |  if_e	jmp	#LR__3070
1e668     08 1E 06 F1 | 	add	local01, #8
1e66c     0F 15 0A FB | 	rdlong	arg02, local01 wz
1e670     08 1E 86 F1 | 	sub	local01, #8
1e674     08 00 90 5D |  if_ne	jmp	#LR__3071
1e678                 | LR__3070
1e678     00 FA 05 F6 | 	mov	result1, #0
1e67c     0C 00 90 FD | 	jmp	#LR__3072
1e680                 | LR__3071
1e680     00 28 03 FF 
1e684     00 1E 46 F5 | 	or	local01, ##105906176
1e688     0F FB 01 F6 | 	mov	result1, local01
1e68c                 | LR__3072
1e68c     A7 F0 03 F6 | 	mov	ptra, fp
1e690     B2 00 A0 FD | 	call	#popregs_
1e694                 | __system___gettxfunc_ret
1e694     2D 00 64 FD | 	ret
1e698                 | 
1e698                 | __system___getrxfunc
1e698     01 4A 05 F6 | 	mov	COUNT_, #1
1e69c     A8 00 A0 FD | 	call	#pushregs_
1e6a0     5C F8 BF FD | 	call	#__system____getftab
1e6a4     FD 1E 0A F6 | 	mov	local01, result1 wz
1e6a8     10 00 90 AD |  if_e	jmp	#LR__3080
1e6ac     08 1E 06 F1 | 	add	local01, #8
1e6b0     0F 15 0A FB | 	rdlong	arg02, local01 wz
1e6b4     08 1E 86 F1 | 	sub	local01, #8
1e6b8     08 00 90 5D |  if_ne	jmp	#LR__3081
1e6bc                 | LR__3080
1e6bc     00 FA 05 F6 | 	mov	result1, #0
1e6c0     0C 00 90 FD | 	jmp	#LR__3082
1e6c4                 | LR__3081
1e6c4     00 30 03 FF 
1e6c8     00 1E 46 F5 | 	or	local01, ##106954752
1e6cc     0F FB 01 F6 | 	mov	result1, local01
1e6d0                 | LR__3082
1e6d0     A7 F0 03 F6 | 	mov	ptra, fp
1e6d4     B2 00 A0 FD | 	call	#popregs_
1e6d8                 | __system___getrxfunc_ret
1e6d8     2D 00 64 FD | 	ret
1e6dc                 | 
1e6dc                 | __system___getiolock_0423
1e6dc     01 4A 05 F6 | 	mov	COUNT_, #1
1e6e0     A8 00 A0 FD | 	call	#pushregs_
1e6e4     18 F8 BF FD | 	call	#__system____getftab
1e6e8     FD 1E 0A F6 | 	mov	local01, result1 wz
1e6ec     10 00 90 AD |  if_e	jmp	#LR__3090
1e6f0     08 1E 06 F1 | 	add	local01, #8
1e6f4     0F FB 09 FB | 	rdlong	result1, local01 wz
1e6f8     08 1E 86 F1 | 	sub	local01, #8
1e6fc     18 00 90 5D |  if_ne	jmp	#LR__3091
1e700                 | LR__3090
1e700     01 00 00 FF 
1e704     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1e708     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1e70c     01 00 00 FF 
1e710     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1e714     08 00 90 FD | 	jmp	#LR__3092
1e718                 | LR__3091
1e718     0C 1E 06 F1 | 	add	local01, #12
1e71c     0F FB 01 F6 | 	mov	result1, local01
1e720                 | LR__3092
1e720     A7 F0 03 F6 | 	mov	ptra, fp
1e724     B2 00 A0 FD | 	call	#popregs_
1e728                 | __system___getiolock_0423_ret
1e728     2D 00 64 FD | 	ret
1e72c                 | 
1e72c                 | __system____ScanForChar
1e72c     09 01 02 F6 | 	mov	_var01, arg01
1e730     09 03 02 F6 | 	mov	_var02, arg01
1e734     97 06 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
1e738                 | LR__3100
1e738     01 FB C9 FA | 	rdbyte	result1, _var02 wz
1e73c     01 02 06 51 |  if_ne	add	_var02, #1
1e740     F4 FF 9F 5D |  if_ne	jmp	#LR__3100
1e744                 | LR__3101
1e744     09 03 82 F1 | 	sub	_var02, arg01
1e748     01 FB 01 F6 | 	mov	result1, _var02
1e74c     FD 12 0A F6 | 	mov	arg01, result1 wz
1e750     00 FA 05 A6 |  if_e	mov	result1, #0
1e754     B8 00 90 AD |  if_e	jmp	#LR__3108
1e758     0A 05 02 F6 | 	mov	_var03, arg02
1e75c     07 04 4E F7 | 	zerox	_var03, #7 wz
1e760     00 FA 05 A6 |  if_e	mov	result1, #0
1e764     A8 00 90 AD |  if_e	jmp	#LR__3108
1e768     01 16 16 F2 | 	cmp	arg03, #1 wc
1e76c     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
1e770     01 16 06 86 |  if_c_and_z	mov	arg03, #1
1e774     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
1e778     94 00 90 4D |  if_c_and_nz	jmp	#LR__3108
1e77c     09 17 1A F2 | 	cmp	arg03, arg01 wcz
1e780     10 00 90 ED |  if_be	jmp	#LR__3102
1e784     00 18 0E F2 | 	cmp	arg04, #0 wz
1e788     00 FA 05 A6 |  if_e	mov	result1, #0
1e78c     80 00 90 AD |  if_e	jmp	#LR__3108
1e790     09 17 02 F6 | 	mov	arg03, arg01
1e794                 | LR__3102
1e794     01 16 86 F1 | 	sub	arg03, #1
1e798     00 18 0E F2 | 	cmp	arg04, #0 wz
1e79c     38 00 90 5D |  if_ne	jmp	#LR__3104
1e7a0     0B 07 02 F6 | 	mov	_var04, arg03
1e7a4     09 09 02 F6 | 	mov	_var05, arg01
1e7a8                 | LR__3103
1e7a8     04 07 12 F2 | 	cmp	_var04, _var05 wc
1e7ac     5C 00 90 3D |  if_ae	jmp	#LR__3107
1e7b0     03 05 02 F6 | 	mov	_var03, _var04
1e7b4     00 05 02 F1 | 	add	_var03, _var01
1e7b8     02 05 C2 FA | 	rdbyte	_var03, _var03
1e7bc     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
1e7c0     0C 05 0A F2 | 	cmp	_var03, arg04 wz
1e7c4     01 06 06 A1 |  if_e	add	_var04, #1
1e7c8     03 FB 01 A6 |  if_e	mov	result1, _var04
1e7cc     40 00 90 AD |  if_e	jmp	#LR__3108
1e7d0     01 06 06 F1 | 	add	_var04, #1
1e7d4     D0 FF 9F FD | 	jmp	#LR__3103
1e7d8                 | LR__3104
1e7d8     0B 07 02 F6 | 	mov	_var04, arg03
1e7dc                 | LR__3105
1e7dc     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
1e7e0     28 00 90 1D |  if_a	jmp	#LR__3106
1e7e4     03 09 02 F6 | 	mov	_var05, _var04
1e7e8     00 09 02 F1 | 	add	_var05, _var01
1e7ec     04 05 C2 FA | 	rdbyte	_var03, _var05
1e7f0     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
1e7f4     04 05 0A F2 | 	cmp	_var03, _var05 wz
1e7f8     01 06 06 A1 |  if_e	add	_var04, #1
1e7fc     03 FB 01 A6 |  if_e	mov	result1, _var04
1e800     0C 00 90 AD |  if_e	jmp	#LR__3108
1e804     01 06 86 F1 | 	sub	_var04, #1
1e808     D0 FF 9F FD | 	jmp	#LR__3105
1e80c                 | LR__3106
1e80c                 | LR__3107
1e80c     00 FA 05 F6 | 	mov	result1, #0
1e810                 | LR__3108
1e810                 | __system____ScanForChar_ret
1e810     2D 00 64 FD | 	ret
1e814                 | 
1e814                 | __system___basic_dir
1e814     05 4A 05 F6 | 	mov	COUNT_, #5
1e818     A8 00 A0 FD | 	call	#pushregs_
1e81c     4C F0 07 F1 | 	add	ptra, #76
1e820     04 4E 05 F1 | 	add	fp, #4
1e824     A7 12 62 FC | 	wrlong	arg01, fp
1e828     04 4E 05 F1 | 	add	fp, #4
1e82c     A7 14 62 FC | 	wrlong	arg02, fp
1e830     04 4E 85 F1 | 	sub	fp, #4
1e834     A7 14 0A FB | 	rdlong	arg02, fp wz
1e838     04 4E 85 F1 | 	sub	fp, #4
1e83c     04 4E 05 51 |  if_ne	add	fp, #4
1e840     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1e844     04 4E 85 51 |  if_ne	sub	fp, #4
1e848     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1e84c     70 00 90 AD |  if_e	jmp	#LR__3110
1e850     03 00 00 FF 
1e854     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e858     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e85c     03 00 00 FF 
1e860     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e864     03 00 00 5F 
1e868     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1e86c     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1e870     03 00 00 5F 
1e874     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1e878     14 EA BF 5D |  if_ne	call	#__system__closedir
1e87c     41 01 00 FF 
1e880     50 13 06 F6 | 	mov	arg01, ##@LR__4268
1e884     1C E9 BF FD | 	call	#__system__opendir
1e888     03 00 00 FF 
1e88c     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e890     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1e894     08 4E 05 F1 | 	add	fp, #8
1e898     A7 20 02 FB | 	rdlong	local02, fp
1e89c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1e8a0     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1e8a4     04 4E 85 F1 | 	sub	fp, #4
1e8a8     A7 20 02 FB | 	rdlong	local02, fp
1e8ac     04 4E 85 F1 | 	sub	fp, #4
1e8b0     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1e8b4     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1e8b8     03 00 00 FF 
1e8bc     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1e8c0                 | LR__3110
1e8c0     03 00 00 FF 
1e8c4     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e8c8     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e8cc     03 00 00 FF 
1e8d0     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e8d4     41 01 00 AF 
1e8d8     52 FB 05 A6 |  if_e	mov	result1, ##@LR__4269
1e8dc     84 02 90 AD |  if_e	jmp	#LR__3123
1e8e0                 | LR__3111
1e8e0     03 00 00 FF 
1e8e4     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e8e8     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1e8ec     03 00 00 FF 
1e8f0     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e8f4     0C EA BF FD | 	call	#__system__readdir
1e8f8     0C 4E 05 F1 | 	add	fp, #12
1e8fc     A7 FA 61 FC | 	wrlong	result1, fp
1e900     0C 4E 85 F1 | 	sub	fp, #12
1e904     00 FA 0D F2 | 	cmp	result1, #0 wz
1e908     38 00 90 5D |  if_ne	jmp	#LR__3112
1e90c     03 00 00 FF 
1e910     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e914     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1e918     03 00 00 FF 
1e91c     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e920     6C E9 BF FD | 	call	#__system__closedir
1e924     03 00 00 FF 
1e928     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e92c     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1e930     03 00 00 FF 
1e934     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e938     41 01 00 FF 
1e93c     54 FB 05 F6 | 	mov	result1, ##@LR__4270
1e940     20 02 90 FD | 	jmp	#LR__3123
1e944                 | LR__3112
1e944     0C 4E 05 F1 | 	add	fp, #12
1e948     A7 12 02 FB | 	rdlong	arg01, fp
1e94c     0C 4E 85 F1 | 	sub	fp, #12
1e950     03 00 00 FF 
1e954     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1e958     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1e95c     03 00 00 FF 
1e960     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1e964     48 07 B0 FD | 	call	#__system___pat_match
1e968     00 FA 0D F2 | 	cmp	result1, #0 wz
1e96c     70 FF 9F AD |  if_e	jmp	#LR__3111
1e970     03 00 00 FF 
1e974     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1e978     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e97c     03 00 00 FF 
1e980     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1e984     78 01 90 AD |  if_e	jmp	#LR__3119
1e988     0C 4E 05 F1 | 	add	fp, #12
1e98c     A7 12 02 FB | 	rdlong	arg01, fp
1e990     04 4E 05 F1 | 	add	fp, #4
1e994     A7 14 02 F6 | 	mov	arg02, fp
1e998     10 4E 85 F1 | 	sub	fp, #16
1e99c     68 F2 BF FD | 	call	#__system__stat
1e9a0     40 4E 05 F1 | 	add	fp, #64
1e9a4     A7 FA 61 FC | 	wrlong	result1, fp
1e9a8     40 4E 85 F1 | 	sub	fp, #64
1e9ac     00 FA 0D F2 | 	cmp	result1, #0 wz
1e9b0     41 01 00 5F 
1e9b4     56 FB 05 56 |  if_ne	mov	result1, ##@LR__4271
1e9b8     A8 01 90 5D |  if_ne	jmp	#LR__3123
1e9bc     18 4E 05 F1 | 	add	fp, #24
1e9c0     A7 20 02 FB | 	rdlong	local02, fp
1e9c4     78 00 00 FF 
1e9c8     00 20 06 F5 | 	and	local02, ##61440
1e9cc     2C 4E 05 F1 | 	add	fp, #44
1e9d0     A7 20 62 FC | 	wrlong	local02, fp
1e9d4     38 4E 85 F1 | 	sub	fp, #56
1e9d8     A7 20 02 FB | 	rdlong	local02, fp
1e9dc     0C 4E 85 F1 | 	sub	fp, #12
1e9e0     10 21 C2 FA | 	rdbyte	local02, local02
1e9e4     2E 20 0E F2 | 	cmp	local02, #46 wz
1e9e8     08 4E 05 A1 |  if_e	add	fp, #8
1e9ec     A7 04 68 AC |  if_e	wrlong	#2, fp
1e9f0     08 4E C5 F3 | 	sumz	fp, #8
1e9f4     A7 00 68 5C |  if_ne	wrlong	#0, fp
1e9f8     08 4E 85 51 |  if_ne	sub	fp, #8
1e9fc     44 4E 05 F1 | 	add	fp, #68
1ea00     A7 20 02 FB | 	rdlong	local02, fp
1ea04     44 4E 85 F1 | 	sub	fp, #68
1ea08     08 00 00 FF 
1ea0c     00 20 0E F2 | 	cmp	local02, ##4096 wz
1ea10     18 00 90 5D |  if_ne	jmp	#LR__3113
1ea14     08 4E 05 F1 | 	add	fp, #8
1ea18     A7 20 02 FB | 	rdlong	local02, fp
1ea1c     10 20 46 F5 | 	or	local02, #16
1ea20     A7 20 62 FC | 	wrlong	local02, fp
1ea24     08 4E 85 F1 | 	sub	fp, #8
1ea28     AC 00 90 FD | 	jmp	#LR__3118
1ea2c                 | LR__3113
1ea2c     44 4E 05 F1 | 	add	fp, #68
1ea30     A7 20 02 FB | 	rdlong	local02, fp
1ea34     44 4E 85 F1 | 	sub	fp, #68
1ea38     10 00 00 FF 
1ea3c     00 20 0E F2 | 	cmp	local02, ##8192 wz
1ea40     44 4E 05 51 |  if_ne	add	fp, #68
1ea44     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1ea48     44 4E 85 51 |  if_ne	sub	fp, #68
1ea4c     18 00 00 5F 
1ea50     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1ea54     44 4E 05 51 |  if_ne	add	fp, #68
1ea58     0F 23 02 56 |  if_ne	mov	local03, local01
1ea5c     44 4E 85 51 |  if_ne	sub	fp, #68
1ea60     20 00 00 5F 
1ea64     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1ea68     18 00 90 5D |  if_ne	jmp	#LR__3114
1ea6c     08 4E 05 F1 | 	add	fp, #8
1ea70     A7 20 02 FB | 	rdlong	local02, fp
1ea74     04 20 46 F5 | 	or	local02, #4
1ea78     A7 20 62 FC | 	wrlong	local02, fp
1ea7c     08 4E 85 F1 | 	sub	fp, #8
1ea80     54 00 90 FD | 	jmp	#LR__3117
1ea84                 | LR__3114
1ea84     18 4E 05 F1 | 	add	fp, #24
1ea88     A7 20 02 FB | 	rdlong	local02, fp
1ea8c     18 4E 85 F1 | 	sub	fp, #24
1ea90     92 20 CE F7 | 	test	local02, #146 wz
1ea94     18 00 90 5D |  if_ne	jmp	#LR__3115
1ea98     08 4E 05 F1 | 	add	fp, #8
1ea9c     A7 20 02 FB | 	rdlong	local02, fp
1eaa0     01 20 46 F5 | 	or	local02, #1
1eaa4     A7 20 62 FC | 	wrlong	local02, fp
1eaa8     08 4E 85 F1 | 	sub	fp, #8
1eaac     28 00 90 FD | 	jmp	#LR__3116
1eab0                 | LR__3115
1eab0     44 4E 05 F1 | 	add	fp, #68
1eab4     A7 24 02 FB | 	rdlong	local04, fp
1eab8     44 4E 85 F1 | 	sub	fp, #68
1eabc     08 00 00 FF 
1eac0     00 24 0E F2 | 	cmp	local04, ##4096 wz
1eac4     08 4E 05 51 |  if_ne	add	fp, #8
1eac8     A7 24 02 5B |  if_ne	rdlong	local04, fp
1eacc     20 24 46 55 |  if_ne	or	local04, #32
1ead0     A7 24 62 5C |  if_ne	wrlong	local04, fp
1ead4     08 4E 85 51 |  if_ne	sub	fp, #8
1ead8                 | LR__3116
1ead8                 | LR__3117
1ead8                 | LR__3118
1ead8     08 4E 05 F1 | 	add	fp, #8
1eadc     A7 24 02 FB | 	rdlong	local04, fp
1eae0     08 4E 85 F1 | 	sub	fp, #8
1eae4     03 00 00 FF 
1eae8     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1eaec     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1eaf0     03 00 00 FF 
1eaf4     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1eaf8     0F 25 CA F7 | 	test	local04, local01 wz
1eafc     E0 FD 9F AD |  if_e	jmp	#LR__3111
1eb00                 | LR__3119
1eb00     0C 4E 05 F1 | 	add	fp, #12
1eb04     A7 12 02 FB | 	rdlong	arg01, fp
1eb08     0C 4E 85 F1 | 	sub	fp, #12
1eb0c     09 27 02 F6 | 	mov	local05, arg01
1eb10     97 06 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
1eb14                 | LR__3120
1eb14     13 FB C9 FA | 	rdbyte	result1, local05 wz
1eb18     01 26 06 51 |  if_ne	add	local05, #1
1eb1c     F4 FF 9F 5D |  if_ne	jmp	#LR__3120
1eb20                 | LR__3121
1eb20     13 13 C2 F2 | 	subr	arg01, local05
1eb24     01 12 06 F1 | 	add	arg01, #1
1eb28     64 E0 BF FD | 	call	#__system___gc_alloc_managed
1eb2c     48 4E 05 F1 | 	add	fp, #72
1eb30     A7 FA 61 FC | 	wrlong	result1, fp
1eb34     48 4E 85 F1 | 	sub	fp, #72
1eb38     00 FA 0D F2 | 	cmp	result1, #0 wz
1eb3c     18 00 90 AD |  if_e	jmp	#LR__3122
1eb40     48 4E 05 F1 | 	add	fp, #72
1eb44     A7 12 02 FB | 	rdlong	arg01, fp
1eb48     3C 4E 85 F1 | 	sub	fp, #60
1eb4c     A7 14 02 FB | 	rdlong	arg02, fp
1eb50     0C 4E 85 F1 | 	sub	fp, #12
1eb54     34 A2 BF FD | 	call	#__system____builtin_strcpy
1eb58                 | LR__3122
1eb58     48 4E 05 F1 | 	add	fp, #72
1eb5c     A7 FA 01 FB | 	rdlong	result1, fp
1eb60     48 4E 85 F1 | 	sub	fp, #72
1eb64                 | LR__3123
1eb64     A7 F0 03 F6 | 	mov	ptra, fp
1eb68     B2 00 A0 FD | 	call	#popregs_
1eb6c                 | __system___basic_dir_ret
1eb6c     2D 00 64 FD | 	ret
1eb70                 | 
1eb70                 | __system__pack_0489
1eb70     09 01 02 F6 | 	mov	_var01, arg01
1eb74     7F 16 06 F1 | 	add	arg03, #127
1eb78     04 18 CE F7 | 	test	arg04, #4 wz
1eb7c     10 00 90 AD |  if_e	jmp	#LR__3130
1eb80     00 00 0E F2 | 	cmp	_var01, #0 wz
1eb84     16 00 C6 A9 |  if_e	decod	_var01, #22
1eb88     F7 00 26 F4 | 	bith	_var01, #247
1eb8c     B4 00 90 FD | 	jmp	#LR__3139
1eb90                 | LR__3130
1eb90     02 18 CE F7 | 	test	arg04, #2 wz
1eb94     00 C0 3F 5F 
1eb98     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1eb9c     00 14 06 56 |  if_ne	mov	arg02, #0
1eba0     A0 00 90 5D |  if_ne	jmp	#LR__3138
1eba4     08 18 CE F7 | 	test	arg04, #8 wz
1eba8     00 00 06 56 |  if_ne	mov	_var01, #0
1ebac     94 00 90 5D |  if_ne	jmp	#LR__3137
1ebb0     FF 16 56 F2 | 	cmps	arg03, #255 wc
1ebb4     00 C0 3F 3F 
1ebb8     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1ebbc     00 14 06 36 |  if_ae	mov	arg02, #0
1ebc0     80 00 90 3D |  if_ae	jmp	#LR__3136
1ebc4     01 16 56 F2 | 	cmps	arg03, #1 wc
1ebc8     6C 00 90 3D |  if_ae	jmp	#LR__3134
1ebcc     01 14 46 F0 | 	shr	arg02, #1
1ebd0     00 03 02 F6 | 	mov	_var02, _var01
1ebd4     01 02 06 F5 | 	and	_var02, #1
1ebd8     1F 02 66 F0 | 	shl	_var02, #31
1ebdc     01 15 42 F5 | 	or	arg02, _var02
1ebe0     01 00 46 F0 | 	shr	_var01, #1
1ebe4     97 1E 48 FB | 	callpa	#(@LR__3132-@LR__3131)>>2,fcache_load_ptr_
1ebe8                 | LR__3131
1ebe8     00 16 56 F2 | 	cmps	arg03, #0 wc
1ebec     34 00 90 3D |  if_ae	jmp	#LR__3133
1ebf0     00 00 0E F2 | 	cmp	_var01, #0 wz
1ebf4     2C 00 90 AD |  if_e	jmp	#LR__3133
1ebf8     0A 13 02 F6 | 	mov	arg01, arg02
1ebfc     01 12 06 F5 | 	and	arg01, #1
1ec00     01 16 06 F1 | 	add	arg03, #1
1ec04     01 14 46 F0 | 	shr	arg02, #1
1ec08     00 03 02 F6 | 	mov	_var02, _var01
1ec0c     01 02 06 F5 | 	and	_var02, #1
1ec10     1F 02 66 F0 | 	shl	_var02, #31
1ec14     01 15 42 F5 | 	or	arg02, _var02
1ec18     09 15 42 F5 | 	or	arg02, arg01
1ec1c     01 00 46 F0 | 	shr	_var01, #1
1ec20     C4 FF 9F FD | 	jmp	#LR__3131
1ec24                 | LR__3132
1ec24                 | LR__3133
1ec24     00 16 56 F2 | 	cmps	arg03, #0 wc
1ec28     18 00 90 3D |  if_ae	jmp	#LR__3135
1ec2c     00 14 0E F2 | 	cmp	arg02, #0 wz
1ec30     6F 14 62 FD | 	wrnz	arg02
1ec34     0C 00 90 FD | 	jmp	#LR__3135
1ec38                 | LR__3134
1ec38     17 01 06 F4 | 	bitl	_var01, #279
1ec3c     17 16 66 F0 | 	shl	arg03, #23
1ec40     0B 01 42 F5 | 	or	_var01, arg03
1ec44                 | LR__3135
1ec44                 | LR__3136
1ec44                 | LR__3137
1ec44                 | LR__3138
1ec44                 | LR__3139
1ec44     01 00 CE F7 | 	test	_var01, #1 wz
1ec48     01 14 46 55 |  if_ne	or	arg02, #1
1ec4c     0A 17 02 F6 | 	mov	arg03, arg02
1ec50     00 02 06 F6 | 	mov	_var02, #0
1ec54     FF FF 3F FF 
1ec58     FF 15 06 F1 | 	add	arg02, ##2147483647
1ec5c     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1ec60     01 02 06 C6 |  if_b	mov	_var02, #1
1ec64     01 01 02 F1 | 	add	_var01, _var02
1ec68     01 18 CE F7 | 	test	arg04, #1 wz
1ec6c     1F 00 26 54 |  if_ne	bith	_var01, #31
1ec70     00 FB 01 F6 | 	mov	result1, _var01
1ec74                 | __system__pack_0489_ret
1ec74     2D 00 64 FD | 	ret
1ec78                 | 
1ec78                 | __system___rxtxioctl_0579
1ec78     00 15 0E F2 | 	cmp	arg02, #256 wz
1ec7c     0C 00 90 AD |  if_e	jmp	#LR__3140
1ec80     01 15 0E F2 | 	cmp	arg02, #257 wz
1ec84     1C 00 90 AD |  if_e	jmp	#LR__3141
1ec88     30 00 90 FD | 	jmp	#LR__3142
1ec8c                 | LR__3140
1ec8c     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1ec90     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1ec94     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1ec98     0B FB 61 FC | 	wrlong	result1, arg03
1ec9c     00 FA 05 F6 | 	mov	result1, #0
1eca0     28 00 90 FD | 	jmp	#LR__3143
1eca4                 | LR__3141
1eca4     0B 13 02 FB | 	rdlong	arg01, arg03
1eca8     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1ecac     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1ecb0     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1ecb4     00 FA 05 F6 | 	mov	result1, #0
1ecb8     10 00 90 FD | 	jmp	#LR__3143
1ecbc                 | LR__3142
1ecbc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1ecc0     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1ecc4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1ecc8     01 FA 65 F6 | 	neg	result1, #1
1eccc                 | LR__3143
1eccc                 | __system___rxtxioctl_0579_ret
1eccc     2D 00 64 FD | 	ret
1ecd0                 | 
1ecd0                 | __system____dummy_flush_0580
1ecd0     00 FA 05 F6 | 	mov	result1, #0
1ecd4                 | __system____dummy_flush_0580_ret
1ecd4     2D 00 64 FD | 	ret
1ecd8                 | 
1ecd8                 | __system___vfsread
1ecd8     03 4A 05 F6 | 	mov	COUNT_, #3
1ecdc     A8 00 A0 FD | 	call	#pushregs_
1ece0     28 F0 07 F1 | 	add	ptra, #40
1ece4     04 4E 05 F1 | 	add	fp, #4
1ece8     A7 12 62 FC | 	wrlong	arg01, fp
1ecec     04 4E 05 F1 | 	add	fp, #4
1ecf0     A7 14 62 FC | 	wrlong	arg02, fp
1ecf4     04 4E 05 F1 | 	add	fp, #4
1ecf8     A7 16 62 FC | 	wrlong	arg03, fp
1ecfc     04 4E 85 F1 | 	sub	fp, #4
1ed00     A7 FA 01 FB | 	rdlong	result1, fp
1ed04     14 4E 05 F1 | 	add	fp, #20
1ed08     A7 FA 61 FC | 	wrlong	result1, fp
1ed0c     04 4E 05 F1 | 	add	fp, #4
1ed10     A7 00 68 FC | 	wrlong	#0, fp
1ed14     1C 4E 85 F1 | 	sub	fp, #28
1ed18     A7 12 02 FB | 	rdlong	arg01, fp
1ed1c     04 4E 85 F1 | 	sub	fp, #4
1ed20     08 12 06 F1 | 	add	arg01, #8
1ed24     09 FB 01 FB | 	rdlong	result1, arg01
1ed28     01 FA CD F7 | 	test	result1, #1 wz
1ed2c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1ed30     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1ed34     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1ed38     01 FA 65 A6 |  if_e	neg	result1, #1
1ed3c     74 02 90 AD |  if_e	jmp	#LR__3156
1ed40     04 4E 05 F1 | 	add	fp, #4
1ed44     A7 12 02 FB | 	rdlong	arg01, fp
1ed48     04 4E 85 F1 | 	sub	fp, #4
1ed4c     14 12 06 F1 | 	add	arg01, #20
1ed50     09 FB 09 FB | 	rdlong	result1, arg01 wz
1ed54     B8 00 90 AD |  if_e	jmp	#LR__3151
1ed58     04 4E 05 F1 | 	add	fp, #4
1ed5c     A7 12 02 FB | 	rdlong	arg01, fp
1ed60     09 17 02 F6 | 	mov	arg03, arg01
1ed64     14 16 06 F1 | 	add	arg03, #20
1ed68     0B 1F 02 FB | 	rdlong	local01, arg03
1ed6c     0F 21 02 F6 | 	mov	local02, local01
1ed70     13 1E 46 F7 | 	zerox	local01, #19
1ed74     14 20 46 F0 | 	shr	local02, #20
1ed78     02 20 66 F0 | 	shl	local02, #2
1ed7c     ED 20 02 F1 | 	add	local02, __methods__
1ed80     10 21 02 FB | 	rdlong	local02, local02
1ed84     04 4E 05 F1 | 	add	fp, #4
1ed88     A7 14 02 FB | 	rdlong	arg02, fp
1ed8c     04 4E 05 F1 | 	add	fp, #4
1ed90     A7 16 02 FB | 	rdlong	arg03, fp
1ed94     0C 4E 85 F1 | 	sub	fp, #12
1ed98     F2 22 02 F6 | 	mov	local03, objptr
1ed9c     0F E5 01 F6 | 	mov	objptr, local01
1eda0     2D 20 62 FD | 	call	local02
1eda4     11 E5 01 F6 | 	mov	objptr, local03
1eda8     10 4E 05 F1 | 	add	fp, #16
1edac     A7 FA 61 FC | 	wrlong	result1, fp
1edb0     10 4E 85 F1 | 	sub	fp, #16
1edb4     00 FA 55 F2 | 	cmps	result1, #0 wc
1edb8     44 00 90 3D |  if_ae	jmp	#LR__3150
1edbc     04 4E 05 F1 | 	add	fp, #4
1edc0     A7 22 02 FB | 	rdlong	local03, fp
1edc4     11 1F 02 F6 | 	mov	local01, local03
1edc8     08 22 06 F1 | 	add	local03, #8
1edcc     11 21 02 FB | 	rdlong	local02, local03
1edd0     20 20 46 F5 | 	or	local02, #32
1edd4     08 1E 06 F1 | 	add	local01, #8
1edd8     0F 21 62 FC | 	wrlong	local02, local01
1eddc     0C 4E 05 F1 | 	add	fp, #12
1ede0     A7 12 0A FB | 	rdlong	arg01, fp wz
1ede4     10 4E 85 F1 | 	sub	fp, #16
1ede8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1edec     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1edf0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1edf4     01 FA 65 56 |  if_ne	neg	result1, #1
1edf8     00 FA 05 A6 |  if_e	mov	result1, #0
1edfc     B4 01 90 FD | 	jmp	#LR__3156
1ee00                 | LR__3150
1ee00     10 4E 05 F1 | 	add	fp, #16
1ee04     A7 FA 01 FB | 	rdlong	result1, fp
1ee08     10 4E 85 F1 | 	sub	fp, #16
1ee0c     A4 01 90 FD | 	jmp	#LR__3156
1ee10                 | LR__3151
1ee10     04 4E 05 F1 | 	add	fp, #4
1ee14     A7 12 02 FB | 	rdlong	arg01, fp
1ee18     20 12 06 F1 | 	add	arg01, #32
1ee1c     09 13 0A FB | 	rdlong	arg01, arg01 wz
1ee20     14 4E 05 F1 | 	add	fp, #20
1ee24     A7 12 62 FC | 	wrlong	arg01, fp
1ee28     18 4E 85 F1 | 	sub	fp, #24
1ee2c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1ee30     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1ee34     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1ee38     01 FA 65 A6 |  if_e	neg	result1, #1
1ee3c     74 01 90 AD |  if_e	jmp	#LR__3156
1ee40     04 4E 05 F1 | 	add	fp, #4
1ee44     A7 22 02 FB | 	rdlong	local03, fp
1ee48     04 4E 85 F1 | 	sub	fp, #4
1ee4c     28 22 06 F1 | 	add	local03, #40
1ee50     11 21 0A FB | 	rdlong	local02, local03 wz
1ee54     7C 00 90 AD |  if_e	jmp	#LR__3153
1ee58     04 4E 05 F1 | 	add	fp, #4
1ee5c     A7 12 02 FB | 	rdlong	arg01, fp
1ee60     09 23 02 F6 | 	mov	local03, arg01
1ee64     28 22 06 F1 | 	add	local03, #40
1ee68     11 1F 02 FB | 	rdlong	local01, local03
1ee6c     0F 21 02 F6 | 	mov	local02, local01
1ee70     13 1E 46 F7 | 	zerox	local01, #19
1ee74     14 20 46 F0 | 	shr	local02, #20
1ee78     02 20 66 F0 | 	shl	local02, #2
1ee7c     ED 20 02 F1 | 	add	local02, __methods__
1ee80     10 21 02 FB | 	rdlong	local02, local02
1ee84     20 4E 05 F1 | 	add	fp, #32
1ee88     A7 16 02 F6 | 	mov	arg03, fp
1ee8c     24 4E 85 F1 | 	sub	fp, #36
1ee90     00 15 06 F6 | 	mov	arg02, #256
1ee94     F2 22 02 F6 | 	mov	local03, objptr
1ee98     0F E5 01 F6 | 	mov	objptr, local01
1ee9c     2D 20 62 FD | 	call	local02
1eea0     11 E5 01 F6 | 	mov	objptr, local03
1eea4     10 4E 05 F1 | 	add	fp, #16
1eea8     A7 FA 61 FC | 	wrlong	result1, fp
1eeac     00 FA 4D F2 | 	cmps	result1, #0 wz
1eeb0     10 4E 85 F1 | 	sub	fp, #16
1eeb4     1C 00 90 5D |  if_ne	jmp	#LR__3152
1eeb8     24 4E 05 F1 | 	add	fp, #36
1eebc     A7 20 02 FB | 	rdlong	local02, fp
1eec0     24 4E 85 F1 | 	sub	fp, #36
1eec4     02 20 CE F7 | 	test	local02, #2 wz
1eec8     20 4E 05 51 |  if_ne	add	fp, #32
1eecc     A7 02 68 5C |  if_ne	wrlong	#1, fp
1eed0     20 4E 85 51 |  if_ne	sub	fp, #32
1eed4                 | LR__3152
1eed4                 | LR__3153
1eed4     10 4E 05 F1 | 	add	fp, #16
1eed8     A7 00 68 FC | 	wrlong	#0, fp
1eedc     10 4E 85 F1 | 	sub	fp, #16
1eee0                 | LR__3154
1eee0     0C 4E 05 F1 | 	add	fp, #12
1eee4     A7 22 02 FB | 	rdlong	local03, fp
1eee8     0C 4E 85 F1 | 	sub	fp, #12
1eeec     01 22 16 F2 | 	cmp	local03, #1 wc
1eef0     B4 00 90 CD |  if_b	jmp	#LR__3155
1eef4     18 4E 05 F1 | 	add	fp, #24
1eef8     A7 20 02 FB | 	rdlong	local02, fp
1eefc     10 23 02 F6 | 	mov	local03, local02
1ef00     13 22 46 F7 | 	zerox	local03, #19
1ef04     14 20 46 F0 | 	shr	local02, #20
1ef08     02 20 66 F0 | 	shl	local02, #2
1ef0c     ED 20 02 F1 | 	add	local02, __methods__
1ef10     10 21 02 FB | 	rdlong	local02, local02
1ef14     14 4E 85 F1 | 	sub	fp, #20
1ef18     A7 12 02 FB | 	rdlong	arg01, fp
1ef1c     04 4E 85 F1 | 	sub	fp, #4
1ef20     F2 1E 02 F6 | 	mov	local01, objptr
1ef24     11 E5 01 F6 | 	mov	objptr, local03
1ef28     2D 20 62 FD | 	call	local02
1ef2c     0F E5 01 F6 | 	mov	objptr, local01
1ef30     14 4E 05 F1 | 	add	fp, #20
1ef34     A7 FA 61 FC | 	wrlong	result1, fp
1ef38     14 4E 85 F1 | 	sub	fp, #20
1ef3c     00 FA 55 F2 | 	cmps	result1, #0 wc
1ef40     64 00 90 CD |  if_b	jmp	#LR__3155
1ef44     1C 4E 05 F1 | 	add	fp, #28
1ef48     A7 22 02 FB | 	rdlong	local03, fp
1ef4c     11 21 02 F6 | 	mov	local02, local03
1ef50     01 20 06 F1 | 	add	local02, #1
1ef54     A7 20 62 FC | 	wrlong	local02, fp
1ef58     08 4E 85 F1 | 	sub	fp, #8
1ef5c     A7 20 02 FB | 	rdlong	local02, fp
1ef60     11 21 42 FC | 	wrbyte	local02, local03
1ef64     04 4E 85 F1 | 	sub	fp, #4
1ef68     A7 22 02 FB | 	rdlong	local03, fp
1ef6c     01 22 06 F1 | 	add	local03, #1
1ef70     A7 22 62 FC | 	wrlong	local03, fp
1ef74     04 4E 85 F1 | 	sub	fp, #4
1ef78     A7 22 02 FB | 	rdlong	local03, fp
1ef7c     01 22 86 F1 | 	sub	local03, #1
1ef80     A7 22 62 FC | 	wrlong	local03, fp
1ef84     14 4E 05 F1 | 	add	fp, #20
1ef88     A7 22 0A FB | 	rdlong	local03, fp wz
1ef8c     20 4E 85 F1 | 	sub	fp, #32
1ef90     4C FF 9F AD |  if_e	jmp	#LR__3154
1ef94     14 4E 05 F1 | 	add	fp, #20
1ef98     A7 20 02 FB | 	rdlong	local02, fp
1ef9c     14 4E 85 F1 | 	sub	fp, #20
1efa0     0A 20 0E F2 | 	cmp	local02, #10 wz
1efa4     38 FF 9F 5D |  if_ne	jmp	#LR__3154
1efa8                 | LR__3155
1efa8     10 4E 05 F1 | 	add	fp, #16
1efac     A7 FA 01 FB | 	rdlong	result1, fp
1efb0     10 4E 85 F1 | 	sub	fp, #16
1efb4                 | LR__3156
1efb4     A7 F0 03 F6 | 	mov	ptra, fp
1efb8     B2 00 A0 FD | 	call	#popregs_
1efbc                 | __system___vfsread_ret
1efbc     2D 00 64 FD | 	ret
1efc0                 | 
1efc0                 | __system____default_filbuf
1efc0     04 4A 05 F6 | 	mov	COUNT_, #4
1efc4     A8 00 A0 FD | 	call	#pushregs_
1efc8     09 1F 02 F6 | 	mov	local01, arg01
1efcc     0F 21 02 FB | 	rdlong	local02, local01
1efd0     0C 20 06 F1 | 	add	local02, #12
1efd4     10 FB 09 FB | 	rdlong	result1, local02 wz
1efd8     0C 20 86 F1 | 	sub	local02, #12
1efdc     20 00 90 5D |  if_ne	jmp	#LR__3160
1efe0     14 20 06 F1 | 	add	local02, #20
1efe4     10 FB 01 F6 | 	mov	result1, local02
1efe8     04 20 86 F1 | 	sub	local02, #4
1efec     10 FB 61 FC | 	wrlong	result1, local02
1eff0     04 20 86 F1 | 	sub	local02, #4
1eff4     02 00 80 FF 
1eff8     10 01 68 FC | 	wrlong	##1024, local02
1effc     0C 20 86 F1 | 	sub	local02, #12
1f000                 | LR__3160
1f000     14 1E 06 F1 | 	add	local01, #20
1f004     0F 23 02 FB | 	rdlong	local03, local01
1f008     11 25 02 F6 | 	mov	local04, local03
1f00c     14 1E 86 F1 | 	sub	local01, #20
1f010     13 24 46 F7 | 	zerox	local04, #19
1f014     14 22 46 F0 | 	shr	local03, #20
1f018     02 22 66 F0 | 	shl	local03, #2
1f01c     ED 22 02 F1 | 	add	local03, __methods__
1f020     11 23 02 FB | 	rdlong	local03, local03
1f024     10 20 06 F1 | 	add	local02, #16
1f028     10 15 02 FB | 	rdlong	arg02, local02
1f02c     04 20 86 F1 | 	sub	local02, #4
1f030     10 17 02 FB | 	rdlong	arg03, local02
1f034     0C 20 86 F1 | 	sub	local02, #12
1f038     0F 13 02 F6 | 	mov	arg01, local01
1f03c     F2 1E 02 F6 | 	mov	local01, objptr
1f040     12 E5 01 F6 | 	mov	objptr, local04
1f044     2D 22 62 FD | 	call	local03
1f048     0F E5 01 F6 | 	mov	objptr, local01
1f04c     FD 24 02 F6 | 	mov	local04, result1
1f050     00 24 56 F2 | 	cmps	local04, #0 wc
1f054     01 FA 65 C6 |  if_b	neg	result1, #1
1f058     28 00 90 CD |  if_b	jmp	#LR__3161
1f05c     10 25 62 FC | 	wrlong	local04, local02
1f060     10 20 06 F1 | 	add	local02, #16
1f064     10 23 02 FB | 	rdlong	local03, local02
1f068     0C 20 86 F1 | 	sub	local02, #12
1f06c     10 23 62 FC | 	wrlong	local03, local02
1f070     04 20 06 F1 | 	add	local02, #4
1f074     10 23 02 FB | 	rdlong	local03, local02
1f078     01 22 46 F5 | 	or	local03, #1
1f07c     10 23 62 FC | 	wrlong	local03, local02
1f080     12 FB 01 F6 | 	mov	result1, local04
1f084                 | LR__3161
1f084     A7 F0 03 F6 | 	mov	ptra, fp
1f088     B2 00 A0 FD | 	call	#popregs_
1f08c                 | __system____default_filbuf_ret
1f08c     2D 00 64 FD | 	ret
1f090                 | 
1f090                 | __system__getlower_0965
1f090     41 12 56 F2 | 	cmps	arg01, #65 wc
1f094     10 00 90 CD |  if_b	jmp	#LR__3170
1f098     5B 12 56 F2 | 	cmps	arg01, #91 wc
1f09c     09 FB 01 C6 |  if_b	mov	result1, arg01
1f0a0     20 FA 05 C1 |  if_b	add	result1, #32
1f0a4     04 00 90 CD |  if_b	jmp	#__system__getlower_0965_ret
1f0a8                 | LR__3170
1f0a8     09 FB 01 F6 | 	mov	result1, arg01
1f0ac                 | __system__getlower_0965_ret
1f0ac     2D 00 64 FD | 	ret
1f0b0                 | 
1f0b0                 | __system___pat_match
1f0b0     08 4A 05 F6 | 	mov	COUNT_, #8
1f0b4     A8 00 A0 FD | 	call	#pushregs_
1f0b8     09 1F 02 F6 | 	mov	local01, arg01
1f0bc                 | LR__3180
1f0bc     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1f0c0     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1f0c4     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1f0c8     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1f0cc     2C 00 90 AD |  if_e	jmp	#LR__3181
1f0d0     0A 13 C2 FA | 	rdbyte	arg01, arg02
1f0d4     B8 FF BF FD | 	call	#__system__getlower_0965
1f0d8     FD 22 02 F6 | 	mov	local03, result1
1f0dc     0F 13 C2 FA | 	rdbyte	arg01, local01
1f0e0     AC FF BF FD | 	call	#__system__getlower_0965
1f0e4     11 FB 09 F2 | 	cmp	result1, local03 wz
1f0e8     00 FA 05 56 |  if_ne	mov	result1, #0
1f0ec     FC 00 90 5D |  if_ne	jmp	#LR__3189
1f0f0     01 1E 06 F1 | 	add	local01, #1
1f0f4     01 14 06 F1 | 	add	arg02, #1
1f0f8     C0 FF 9F FD | 	jmp	#LR__3180
1f0fc                 | LR__3181
1f0fc     0A 23 C2 FA | 	rdbyte	local03, arg02
1f100     2A 22 0E F2 | 	cmp	local03, #42 wz
1f104     D4 00 90 5D |  if_ne	jmp	#LR__3188
1f108     01 14 06 F1 | 	add	arg02, #1
1f10c     0A 21 C2 FA | 	rdbyte	local02, arg02
1f110     01 14 86 F1 | 	sub	arg02, #1
1f114     2E 20 0E F2 | 	cmp	local02, #46 wz
1f118     28 00 90 5D |  if_ne	jmp	#LR__3182
1f11c     02 14 06 F1 | 	add	arg02, #2
1f120     0A 21 C2 FA | 	rdbyte	local02, arg02
1f124     02 14 86 F1 | 	sub	arg02, #2
1f128     2A 20 0E F2 | 	cmp	local02, #42 wz
1f12c     03 14 06 A1 |  if_e	add	arg02, #3
1f130     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1f134     03 14 86 A1 |  if_e	sub	arg02, #3
1f138     12 27 0A A6 |  if_e	mov	local05, local04 wz
1f13c     01 FA 05 A6 |  if_e	mov	result1, #1
1f140     A8 00 90 AD |  if_e	jmp	#LR__3189
1f144                 | LR__3182
1f144     01 14 06 F1 | 	add	arg02, #1
1f148     00 28 06 F6 | 	mov	local06, #0
1f14c     97 1E 48 FB | 	callpa	#(@LR__3185-@LR__3183)>>2,fcache_load_ptr_
1f150                 | LR__3183
1f150     14 2B 02 F6 | 	mov	local07, local06
1f154     0A 2B 02 F1 | 	add	local07, arg02
1f158     15 2B CA FA | 	rdbyte	local07, local07 wz
1f15c     14 27 02 56 |  if_ne	mov	local05, local06
1f160     01 26 06 51 |  if_ne	add	local05, #1
1f164     13 29 02 56 |  if_ne	mov	local06, local05
1f168     E4 FF 9F 5D |  if_ne	jmp	#LR__3183
1f16c     00 2C 06 F6 | 	mov	local08, #0
1f170                 | LR__3184
1f170     16 2B 02 F6 | 	mov	local07, local08
1f174     0F 2B 02 F1 | 	add	local07, local01
1f178     15 2B CA FA | 	rdbyte	local07, local07 wz
1f17c     16 27 02 56 |  if_ne	mov	local05, local08
1f180     01 26 06 51 |  if_ne	add	local05, #1
1f184     13 2D 02 56 |  if_ne	mov	local08, local05
1f188     E4 FF 9F 5D |  if_ne	jmp	#LR__3184
1f18c                 | LR__3185
1f18c     14 2D 52 F2 | 	cmps	local08, local06 wc
1f190     00 FA 05 C6 |  if_b	mov	result1, #0
1f194     54 00 90 CD |  if_b	jmp	#LR__3189
1f198     16 21 02 F6 | 	mov	local02, local08
1f19c     14 21 82 F1 | 	sub	local02, local06
1f1a0     10 1F 02 F1 | 	add	local01, local02
1f1a4                 | LR__3186
1f1a4     01 28 56 F2 | 	cmps	local06, #1 wc
1f1a8     30 00 90 CD |  if_b	jmp	#LR__3187
1f1ac     0F 13 C2 FA | 	rdbyte	arg01, local01
1f1b0     DC FE BF FD | 	call	#__system__getlower_0965
1f1b4     FD 2C 02 F6 | 	mov	local08, result1
1f1b8     0A 13 C2 FA | 	rdbyte	arg01, arg02
1f1bc     D0 FE BF FD | 	call	#__system__getlower_0965
1f1c0     FD 2C 0A F2 | 	cmp	local08, result1 wz
1f1c4     00 FA 05 56 |  if_ne	mov	result1, #0
1f1c8     20 00 90 5D |  if_ne	jmp	#LR__3189
1f1cc     01 1E 06 F1 | 	add	local01, #1
1f1d0     01 14 06 F1 | 	add	arg02, #1
1f1d4     01 28 86 F1 | 	sub	local06, #1
1f1d8     C8 FF 9F FD | 	jmp	#LR__3186
1f1dc                 | LR__3187
1f1dc                 | LR__3188
1f1dc     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1f1e0     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1f1e4     01 FA 05 A6 |  if_e	mov	result1, #1
1f1e8     00 FA 05 56 |  if_ne	mov	result1, #0
1f1ec                 | LR__3189
1f1ec     A7 F0 03 F6 | 	mov	ptra, fp
1f1f0     B2 00 A0 FD | 	call	#popregs_
1f1f4                 | __system___pat_match_ret
1f1f4     2D 00 64 FD | 	ret
1f1f8                 | 
1f1f8                 | _fatfs_cc_ff_uni2oem
1f1f8     00 00 06 F6 | 	mov	_var01, #0
1f1fc     80 12 16 F2 | 	cmp	arg01, #128 wc
1f200     09 01 02 C6 |  if_b	mov	_var01, arg01
1f204     58 00 90 CD |  if_b	jmp	#LR__3194
1f208     80 00 00 FF 
1f20c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1f210     4C 00 90 3D |  if_ae	jmp	#LR__3193
1f214     0A FB 31 F9 | 	getword	result1, arg02, #0
1f218     01 00 00 FF 
1f21c     52 FB 0D F2 | 	cmp	result1, ##850 wz
1f220     3C 00 90 5D |  if_ne	jmp	#LR__3193
1f224                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1f224     00 00 06 F6 | 	mov	_var01, #0
1f228     97 14 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
1f22c                 | LR__3190
1f22c     00 FB 31 F9 | 	getword	result1, _var01, #0
1f230     80 FA 15 F2 | 	cmp	result1, #128 wc
1f234     1C 00 90 3D |  if_ae	jmp	#LR__3192
1f238     00 FB 31 F9 | 	getword	result1, _var01, #0
1f23c     01 FA 65 F0 | 	shl	result1, #1
1f240     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1f244     FD FA E1 FA | 	rdword	result1, result1
1f248     FD 12 0A F2 | 	cmp	arg01, result1 wz
1f24c     01 00 06 51 |  if_ne	add	_var01, #1
1f250     D8 FF 9F 5D |  if_ne	jmp	#LR__3190
1f254                 | LR__3191
1f254                 | LR__3192
1f254     00 01 32 F9 | 	getword	_var01, _var01, #0
1f258     80 00 06 F1 | 	add	_var01, #128
1f25c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1f260                 | LR__3193
1f260                 | LR__3194
1f260                 | ' 			c = (c + 0x80) & 0xFF;
1f260                 | ' 		}
1f260                 | ' 	}
1f260                 | ' 
1f260                 | ' 	return c;
1f260     00 FB 01 F6 | 	mov	result1, _var01
1f264                 | _fatfs_cc_ff_uni2oem_ret
1f264     2D 00 64 FD | 	ret
1f268                 | 
1f268                 | _fatfs_cc_ff_oem2uni
1f268     00 00 06 F6 | 	mov	_var01, #0
1f26c     09 FB 31 F9 | 	getword	result1, arg01, #0
1f270     80 FA 15 F2 | 	cmp	result1, #128 wc
1f274     09 01 02 C6 |  if_b	mov	_var01, arg01
1f278     2C 00 90 CD |  if_b	jmp	#LR__3201
1f27c     0A 15 32 F9 | 	getword	arg02, arg02, #0
1f280     01 00 00 FF 
1f284     52 15 0E F2 | 	cmp	arg02, ##850 wz
1f288     1C 00 90 5D |  if_ne	jmp	#LR__3200
1f28c     09 FB 31 F9 | 	getword	result1, arg01, #0
1f290     00 FB 15 F2 | 	cmp	result1, #256 wc
1f294     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1f298     80 12 86 C1 |  if_b	sub	arg01, #128
1f29c     01 12 66 C0 |  if_b	shl	arg01, #1
1f2a0     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1f2a4     09 01 E2 CA |  if_b	rdword	_var01, arg01
1f2a8                 | LR__3200
1f2a8                 | LR__3201
1f2a8                 | ' 		}
1f2a8                 | ' 	}
1f2a8                 | ' 
1f2a8                 | ' 	return c;
1f2a8     00 FB 01 F6 | 	mov	result1, _var01
1f2ac                 | _fatfs_cc_ff_oem2uni_ret
1f2ac     2D 00 64 FD | 	ret
1f2b0                 | 
1f2b0                 | _fatfs_cc_ff_wtoupper
1f2b0     09 01 02 F6 | 	mov	_var01, arg01
1f2b4     80 00 00 FF 
1f2b8     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1f2bc     60 01 90 3D |  if_ae	jmp	#LR__3223
1f2c0     00 03 02 F6 | 	mov	_var02, _var01
1f2c4     01 01 32 F9 | 	getword	_var01, _var02, #0
1f2c8     08 00 00 FF 
1f2cc     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1f2d0     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1f2d4     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1f2d8     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1f2dc     01 00 00 3F 
1f2e0     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1f2e4     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1f2e8     01 00 00 3F 
1f2ec     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1f2f0     02 07 02 F6 | 	mov	_var04, _var03
1f2f4                 | ' 		uc = (WORD)uni;
1f2f4                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1f2f4                 | ' 		for (;;) {
1f2f4                 | LR__3210
1f2f4     03 09 E2 FA | 	rdword	_var05, _var04
1f2f8     04 05 02 F6 | 	mov	_var03, _var05
1f2fc     0F 04 4E F7 | 	zerox	_var03, #15 wz
1f300     02 06 06 F1 | 	add	_var04, #2
1f304     14 01 90 AD |  if_e	jmp	#LR__3222
1f308     01 05 32 F9 | 	getword	_var03, _var02, #0
1f30c     04 01 32 F9 | 	getword	_var01, _var05, #0
1f310     00 05 12 F2 | 	cmp	_var03, _var01 wc
1f314     04 01 90 CD |  if_b	jmp	#LR__3222
1f318     03 0B E2 FA | 	rdword	_var06, _var04
1f31c     05 0D 32 F9 | 	getword	_var07, _var06, #0
1f320     08 0C 46 F0 | 	shr	_var07, #8
1f324     05 0B 32 F9 | 	getword	_var06, _var06, #0
1f328     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1f32c     01 05 32 F9 | 	getword	_var03, _var02, #0
1f330     04 0F 32 F9 | 	getword	_var08, _var05, #0
1f334     05 01 32 F9 | 	getword	_var01, _var06, #0
1f338     00 0F 02 F1 | 	add	_var08, _var01
1f33c     07 05 52 F2 | 	cmps	_var03, _var08 wc
1f340     02 06 06 F1 | 	add	_var04, #2
1f344     C4 00 90 3D |  if_ae	jmp	#LR__3221
1f348                 | ' 				switch (cmd) {
1f348     06 11 32 F9 | 	getword	_var09, _var07, #0
1f34c     09 10 26 F3 | 	fle	_var09, #9
1f350     30 10 62 FD | 	jmprel	_var09
1f354                 | LR__3211
1f354     24 00 90 FD | 	jmp	#LR__3212
1f358     3C 00 90 FD | 	jmp	#LR__3213
1f35c     54 00 90 FD | 	jmp	#LR__3214
1f360     5C 00 90 FD | 	jmp	#LR__3215
1f364     64 00 90 FD | 	jmp	#LR__3216
1f368     6C 00 90 FD | 	jmp	#LR__3217
1f36c     74 00 90 FD | 	jmp	#LR__3218
1f370     7C 00 90 FD | 	jmp	#LR__3219
1f374     84 00 90 FD | 	jmp	#LR__3220
1f378     A0 00 90 FD | 	jmp	#LR__3222
1f37c                 | LR__3212
1f37c     01 03 32 F9 | 	getword	_var02, _var02, #0
1f380     04 09 32 F9 | 	getword	_var05, _var05, #0
1f384     04 03 82 F1 | 	sub	_var02, _var05
1f388     01 02 66 F0 | 	shl	_var02, #1
1f38c     03 03 02 F1 | 	add	_var02, _var04
1f390     01 03 E2 FA | 	rdword	_var02, _var02
1f394     84 00 90 FD | 	jmp	#LR__3222
1f398                 | LR__3213
1f398     01 05 32 F9 | 	getword	_var03, _var02, #0
1f39c     01 03 32 F9 | 	getword	_var02, _var02, #0
1f3a0     04 09 32 F9 | 	getword	_var05, _var05, #0
1f3a4     04 03 82 F1 | 	sub	_var02, _var05
1f3a8     01 02 06 F5 | 	and	_var02, #1
1f3ac     02 03 C2 F2 | 	subr	_var02, _var03
1f3b0     68 00 90 FD | 	jmp	#LR__3222
1f3b4                 | LR__3214
1f3b4     01 03 32 F9 | 	getword	_var02, _var02, #0
1f3b8     10 02 86 F1 | 	sub	_var02, #16
1f3bc     5C 00 90 FD | 	jmp	#LR__3222
1f3c0                 | LR__3215
1f3c0     01 03 32 F9 | 	getword	_var02, _var02, #0
1f3c4     20 02 86 F1 | 	sub	_var02, #32
1f3c8     50 00 90 FD | 	jmp	#LR__3222
1f3cc                 | LR__3216
1f3cc     01 03 32 F9 | 	getword	_var02, _var02, #0
1f3d0     30 02 86 F1 | 	sub	_var02, #48
1f3d4     44 00 90 FD | 	jmp	#LR__3222
1f3d8                 | LR__3217
1f3d8     01 03 32 F9 | 	getword	_var02, _var02, #0
1f3dc     1A 02 86 F1 | 	sub	_var02, #26
1f3e0     38 00 90 FD | 	jmp	#LR__3222
1f3e4                 | LR__3218
1f3e4     01 03 32 F9 | 	getword	_var02, _var02, #0
1f3e8     08 02 06 F1 | 	add	_var02, #8
1f3ec     2C 00 90 FD | 	jmp	#LR__3222
1f3f0                 | LR__3219
1f3f0     01 03 32 F9 | 	getword	_var02, _var02, #0
1f3f4     50 02 86 F1 | 	sub	_var02, #80
1f3f8     20 00 90 FD | 	jmp	#LR__3222
1f3fc                 | LR__3220
1f3fc     01 03 32 F9 | 	getword	_var02, _var02, #0
1f400     0E 00 00 FF 
1f404     60 02 86 F1 | 	sub	_var02, ##7264
1f408                 | ' 				}
1f408                 | ' 				break;
1f408     10 00 90 FD | 	jmp	#LR__3222
1f40c                 | LR__3221
1f40c     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1f410     02 0A 06 AA |  if_e	mul	_var06, #2
1f414     05 07 02 A1 |  if_e	add	_var04, _var06
1f418     D8 FE 9F FD | 	jmp	#LR__3210
1f41c                 | LR__3222
1f41c     01 01 32 F9 | 	getword	_var01, _var02, #0
1f420                 | LR__3223
1f420                 | ' 		}
1f420                 | ' 		uni = uc;
1f420                 | ' 	}
1f420                 | ' 
1f420                 | ' 	return uni;
1f420     00 FB 01 F6 | 	mov	result1, _var01
1f424                 | _fatfs_cc_ff_wtoupper_ret
1f424     2D 00 64 FD | 	ret
1f428                 | 
1f428                 | _fatfs_cc_strncpy
1f428     09 01 02 F6 | 	mov	_var01, arg01
1f42c     97 12 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
1f430                 | ' 
1f430                 | ' 	dscan = dst;
1f430                 | ' 	sscan = src;
1f430                 | ' 	count = n;
1f430                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1f430                 | LR__3230
1f430     01 16 86 F1 | 	sub	arg03, #1
1f434     00 16 56 F2 | 	cmps	arg03, #0 wc
1f438     18 00 90 CD |  if_b	jmp	#LR__3232
1f43c     0A FB C1 FA | 	rdbyte	result1, arg02
1f440     00 FB 41 FC | 	wrbyte	result1, _var01
1f444     01 14 06 F1 | 	add	arg02, #1
1f448     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1f44c                 | ' 		continue;
1f44c     01 00 06 F1 | 	add	_var01, #1
1f450     DC FF 9F 5D |  if_ne	jmp	#LR__3230
1f454                 | LR__3231
1f454                 | LR__3232
1f454     97 0C 48 FB | 	callpa	#(@LR__3234-@LR__3233)>>2,fcache_load_ptr_
1f458                 | ' 	while (--count >= 0)
1f458                 | LR__3233
1f458     01 16 86 F1 | 	sub	arg03, #1
1f45c     00 16 56 F2 | 	cmps	arg03, #0 wc
1f460     00 03 02 36 |  if_ae	mov	_var02, _var01
1f464     01 00 06 31 |  if_ae	add	_var01, #1
1f468     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1f46c     E8 FF 9F 3D |  if_ae	jmp	#LR__3233
1f470                 | LR__3234
1f470                 | ' 		*dscan++ = '\0';
1f470                 | ' 	return(dst);
1f470     09 FB 01 F6 | 	mov	result1, arg01
1f474                 | _fatfs_cc_strncpy_ret
1f474     2D 00 64 FD | 	ret
1f478                 | 
1f478                 | _fatfs_cc_memcmp
1f478                 | ' 	for (n = size; n > 0; n--)
1f478     00 16 0E F2 | 	cmp	arg03, #0 wz
1f47c     28 00 90 AD |  if_e	jmp	#LR__3241
1f480                 | LR__3240
1f480     09 01 C2 FA | 	rdbyte	_var01, arg01
1f484     0A 03 C2 FA | 	rdbyte	_var02, arg02
1f488     01 01 0A F2 | 	cmp	_var01, _var02 wz
1f48c     01 12 06 A1 |  if_e	add	arg01, #1
1f490     01 14 06 A1 |  if_e	add	arg02, #1
1f494                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1f494     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1f498     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1f49c     01 FB 81 51 |  if_ne	sub	result1, _var02
1f4a0     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1f4a4     F6 17 6E FB | 	djnz	arg03, #LR__3240
1f4a8                 | LR__3241
1f4a8                 | ' 
1f4a8                 | ' 	return(0);
1f4a8     00 FA 05 F6 | 	mov	result1, #0
1f4ac                 | _fatfs_cc_memcmp_ret
1f4ac     2D 00 64 FD | 	ret
1f4b0                 | 
1f4b0                 | _fatfs_cc_strncmp
1f4b0     09 01 0A F6 | 	mov	_var01, arg01 wz
1f4b4     14 00 90 5D |  if_ne	jmp	#LR__3250
1f4b8                 | ' 		return scan2 ? -1 : 0;
1f4b8     00 14 0E F2 | 	cmp	arg02, #0 wz
1f4bc     01 02 66 56 |  if_ne	neg	_var02, #1
1f4c0     00 02 06 A6 |  if_e	mov	_var02, #0
1f4c4     01 FB 01 F6 | 	mov	result1, _var02
1f4c8     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1f4cc                 | LR__3250
1f4cc     00 14 0E F2 | 	cmp	arg02, #0 wz
1f4d0     01 FA 05 A6 |  if_e	mov	result1, #1
1f4d4     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f4d8     0B 05 02 F6 | 	mov	_var03, arg03
1f4dc     97 16 48 FB | 	callpa	#(@LR__3252-@LR__3251)>>2,fcache_load_ptr_
1f4e0                 | ' 	count = n;
1f4e0                 | ' 	do {
1f4e0                 | LR__3251
1f4e0     00 07 C2 FA | 	rdbyte	_var04, _var01
1f4e4     0A 09 02 F6 | 	mov	_var05, arg02
1f4e8     04 0B C2 FA | 	rdbyte	_var06, _var05
1f4ec     01 04 86 F1 | 	sub	_var03, #1
1f4f0     00 04 56 F2 | 	cmps	_var03, #0 wc
1f4f4     01 00 06 F1 | 	add	_var01, #1
1f4f8     01 14 06 F1 | 	add	arg02, #1
1f4fc     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1f500     08 00 90 2D |  if_nc_and_z	jmp	#LR__3253
1f504     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1f508     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3251
1f50c                 | LR__3252
1f50c                 | LR__3253
1f50c     00 04 56 F2 | 	cmps	_var03, #0 wc
1f510                 | ' 		return(0);
1f510     00 FA 05 C6 |  if_b	mov	result1, #0
1f514     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1f518     05 07 0A F2 | 	cmp	_var04, _var06 wz
1f51c                 | ' 		return(0);
1f51c     00 FA 05 A6 |  if_e	mov	result1, #0
1f520     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f524     00 06 0E F2 | 	cmp	_var04, #0 wz
1f528                 | ' 		return(-1);
1f528     01 FA 65 A6 |  if_e	neg	result1, #1
1f52c     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f530     00 0A 0E F2 | 	cmp	_var06, #0 wz
1f534                 | ' 		return(1);
1f534     01 FA 05 A6 |  if_e	mov	result1, #1
1f538                 | ' 		return(c1 - c2);
1f538     03 FB 01 56 |  if_ne	mov	result1, _var04
1f53c     05 FB 81 51 |  if_ne	sub	result1, _var06
1f540                 | _fatfs_cc_strncmp_ret
1f540     2D 00 64 FD | 	ret
1f544                 | 
1f544                 | _fatfs_cc_strchr
1f544                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
1f544                 | ' 	while ((c = *s++) != (char) charwanted)
1f544                 | LR__3260
1f544     09 01 02 F6 | 	mov	_var01, arg01
1f548     00 03 C2 FA | 	rdbyte	_var02, _var01
1f54c     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1f550     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1f554     03 05 0A F2 | 	cmp	_var03, _var04 wz
1f558     01 12 06 F1 | 	add	arg01, #1
1f55c     14 00 90 AD |  if_e	jmp	#LR__3261
1f560     01 05 02 F6 | 	mov	_var03, _var02
1f564     07 04 4E F7 | 	zerox	_var03, #7 wz
1f568     00 FA 05 A6 |  if_e	mov	result1, #0
1f56c     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1f570     D0 FF 9F FD | 	jmp	#LR__3260
1f574                 | LR__3261
1f574                 | ' 	return((char *)--s);
1f574     01 12 86 F1 | 	sub	arg01, #1
1f578     09 FB 01 F6 | 	mov	result1, arg01
1f57c                 | _fatfs_cc_strchr_ret
1f57c     2D 00 64 FD | 	ret
1f580                 | 
1f580                 | _fatfs_cc_disk_initialize
1f580     04 4A 05 F6 | 	mov	COUNT_, #4
1f584     A8 00 A0 FD | 	call	#pushregs_
1f588     40 F0 07 F1 | 	add	ptra, #64
1f58c     04 4E 05 F1 | 	add	fp, #4
1f590     A7 12 42 FC | 	wrbyte	arg01, fp
1f594     01 00 00 FF 
1f598     14 E4 05 F1 | 	add	objptr, ##532
1f59c     F2 18 02 FB | 	rdlong	arg04, objptr
1f5a0     2C 4E 05 F1 | 	add	fp, #44
1f5a4     A7 18 62 FC | 	wrlong	arg04, fp
1f5a8     04 E4 85 F1 | 	sub	objptr, #4
1f5ac     F2 18 02 FB | 	rdlong	arg04, objptr
1f5b0     04 4E 05 F1 | 	add	fp, #4
1f5b4     A7 18 62 FC | 	wrlong	arg04, fp
1f5b8     08 E4 05 F1 | 	add	objptr, #8
1f5bc     F2 18 02 FB | 	rdlong	arg04, objptr
1f5c0     04 4E 05 F1 | 	add	fp, #4
1f5c4     A7 18 62 FC | 	wrlong	arg04, fp
1f5c8     04 E4 05 F1 | 	add	objptr, #4
1f5cc     F2 18 02 FB | 	rdlong	arg04, objptr
1f5d0     04 4E 05 F1 | 	add	fp, #4
1f5d4     A7 18 62 FC | 	wrlong	arg04, fp
1f5d8     04 E4 05 F1 | 	add	objptr, #4
1f5dc     F2 02 48 FC | 	wrbyte	#1, objptr
1f5e0     01 00 00 FF 
1f5e4     20 E4 85 F1 | 	sub	objptr, ##544
1f5e8     38 4E 85 F1 | 	sub	fp, #56
1f5ec     A7 18 CA FA | 	rdbyte	arg04, fp wz
1f5f0     04 4E 85 F1 | 	sub	fp, #4
1f5f4                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1f5f4                 | '             return RES_NOTRDY;
1f5f4     03 FA 05 56 |  if_ne	mov	result1, #3
1f5f8     D8 05 90 5D |  if_ne	jmp	#LR__3288
1f5fc     13 00 00 FF 
1f600     10 13 06 F6 | 	mov	arg01, ##10000
1f604     30 9B BF FD | 	call	#__system___waitus
1f608     30 4E 05 F1 | 	add	fp, #48
1f60c     A7 12 02 FB | 	rdlong	arg01, fp
1f610     09 01 08 FC | 	wrpin	#0, arg01
1f614     04 4E 05 F1 | 	add	fp, #4
1f618     A7 12 02 FB | 	rdlong	arg01, fp
1f61c     09 01 08 FC | 	wrpin	#0, arg01
1f620     04 4E 05 F1 | 	add	fp, #4
1f624     A7 12 02 FB | 	rdlong	arg01, fp
1f628     09 01 08 FC | 	wrpin	#0, arg01
1f62c     04 4E 05 F1 | 	add	fp, #4
1f630     A7 12 02 FB | 	rdlong	arg01, fp
1f634     09 00 80 FF 
1f638     09 01 08 FC | 	wrpin	##4608, arg01
1f63c     0C 4E 85 F1 | 	sub	fp, #12
1f640     A7 12 02 FB | 	rdlong	arg01, fp
1f644     59 12 62 FD | 	drvh	arg01
1f648     04 4E 05 F1 | 	add	fp, #4
1f64c     A7 12 02 FB | 	rdlong	arg01, fp
1f650     59 12 62 FD | 	drvh	arg01
1f654     04 4E 05 F1 | 	add	fp, #4
1f658     A7 12 02 FB | 	rdlong	arg01, fp
1f65c     59 12 62 FD | 	drvh	arg01
1f660     04 4E 05 F1 | 	add	fp, #4
1f664     A7 12 02 FB | 	rdlong	arg01, fp
1f668     59 12 62 FD | 	drvh	arg01
1f66c     20 4E 85 F1 | 	sub	fp, #32
1f670     00 04 80 FF 
1f674     A7 20 68 FC | 	wrlong	##524304, fp
1f678     04 4E 05 F1 | 	add	fp, #4
1f67c     20 03 80 FF 
1f680     A7 90 68 FC | 	wrlong	##409672, fp
1f684     14 4E 05 F1 | 	add	fp, #20
1f688     A7 1E 02 FB | 	rdlong	local01, fp
1f68c     18 4E 85 F1 | 	sub	fp, #24
1f690     A7 16 02 FB | 	rdlong	arg03, fp
1f694     40 1E 62 FD | 	dirl	local01
1f698     A0 03 80 FF 
1f69c     0F 91 08 FC | 	wrpin	##475208, local01
1f6a0     0F 17 12 FC | 	wxpin	arg03, local01
1f6a4     0F 01 28 FC | 	wypin	#0, local01
1f6a8     41 1E 62 FD | 	dirh	local01
1f6ac     1C 4E 05 F1 | 	add	fp, #28
1f6b0     A7 20 02 FB | 	rdlong	local02, fp
1f6b4     10 1F 82 F1 | 	sub	local01, local02
1f6b8     07 1E 06 F5 | 	and	local01, #7
1f6bc     18 1E 66 F0 | 	shl	local01, #24
1f6c0     78 14 06 F6 | 	mov	arg02, #120
1f6c4     0F 15 42 F5 | 	or	arg02, local01
1f6c8     14 4E 85 F1 | 	sub	fp, #20
1f6cc     A7 14 62 FC | 	wrlong	arg02, fp
1f6d0     14 4E 05 F1 | 	add	fp, #20
1f6d4     A7 12 02 FB | 	rdlong	arg01, fp
1f6d8     10 14 26 F4 | 	bith	arg02, #16
1f6dc     40 12 62 FD | 	dirl	arg01
1f6e0     09 15 02 FC | 	wrpin	arg02, arg01
1f6e4     09 3F 18 FC | 	wxpin	#31, arg01
1f6e8     FF FF FF FF 
1f6ec     09 FF 2B FC | 	wypin	##-1, arg01
1f6f0     41 12 62 FD | 	dirh	arg01
1f6f4     04 4E 85 F1 | 	sub	fp, #4
1f6f8     A7 14 02 FB | 	rdlong	arg02, fp
1f6fc     08 4E 05 F1 | 	add	fp, #8
1f700     A7 22 02 FB | 	rdlong	local03, fp
1f704     11 15 82 F1 | 	sub	arg02, local03
1f708     07 14 06 F5 | 	and	arg02, #7
1f70c     18 14 66 F0 | 	shl	arg02, #24
1f710     14 4E 85 F1 | 	sub	fp, #20
1f714     A7 14 62 FC | 	wrlong	arg02, fp
1f718     29 00 00 FF 
1f71c     7A 14 46 F5 | 	or	arg02, ##21114
1f720     A7 14 62 FC | 	wrlong	arg02, fp
1f724     14 4E 05 F1 | 	add	fp, #20
1f728     A7 12 02 FB | 	rdlong	arg01, fp
1f72c     40 12 62 FD | 	dirl	arg01
1f730     09 15 02 FC | 	wrpin	arg02, arg01
1f734     09 4F 18 FC | 	wxpin	#39, arg01
1f738     09 01 28 FC | 	wypin	#0, arg01
1f73c     41 12 62 FD | 	dirh	arg01
1f740     28 4E 85 F1 | 	sub	fp, #40
1f744     A7 12 02 F6 | 	mov	arg01, fp
1f748     14 4E 85 F1 | 	sub	fp, #20
1f74c     0A 14 06 F6 | 	mov	arg02, #10
1f750     0C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f754     00 12 06 F6 | 	mov	arg01, #0
1f758     00 14 06 F6 | 	mov	arg02, #0
1f75c     D8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f760     14 80 B0 FD | 	call	#_fatfs_cc_deselect_1009
1f764     64 12 06 F6 | 	mov	arg01, #100
1f768     CC 99 BF FD | 	call	#__system___waitus
1f76c     14 4E 05 F1 | 	add	fp, #20
1f770     A7 12 02 F6 | 	mov	arg01, fp
1f774     14 4E 85 F1 | 	sub	fp, #20
1f778     0A 14 06 F6 | 	mov	arg02, #10
1f77c     E0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f780     0C 4E 05 F1 | 	add	fp, #12
1f784     A7 00 48 FC | 	wrbyte	#0, fp
1f788     0C 4E 85 F1 | 	sub	fp, #12
1f78c     00 12 06 F6 | 	mov	arg01, #0
1f790     00 14 06 F6 | 	mov	arg02, #0
1f794     A0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f798     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1f79c     01 18 0E F2 | 	cmp	arg04, #1 wz
1f7a0     B8 03 90 5D |  if_ne	jmp	#LR__3287
1f7a4     08 12 06 F6 | 	mov	arg01, #8
1f7a8     AA 15 06 F6 | 	mov	arg02, #426
1f7ac     88 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f7b0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1f7b4     01 FA 0D F2 | 	cmp	result1, #1 wz
1f7b8     98 01 90 5D |  if_ne	jmp	#LR__3273
1f7bc     14 4E 05 F1 | 	add	fp, #20
1f7c0     A7 12 02 F6 | 	mov	arg01, fp
1f7c4     14 4E 85 F1 | 	sub	fp, #20
1f7c8     04 14 06 F6 | 	mov	arg02, #4
1f7cc     90 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f7d0     16 4E 05 F1 | 	add	fp, #22
1f7d4     A7 24 C2 FA | 	rdbyte	local04, fp
1f7d8     16 4E 85 F1 | 	sub	fp, #22
1f7dc     01 24 0E F2 | 	cmp	local04, #1 wz
1f7e0     17 4E 05 A1 |  if_e	add	fp, #23
1f7e4     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1f7e8     17 4E 85 A1 |  if_e	sub	fp, #23
1f7ec     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1f7f0     68 03 90 5D |  if_ne	jmp	#LR__3286
1f7f4                 | ' 				for (tmr = 1000; tmr; tmr--) {
1f7f4     18 4E 05 F1 | 	add	fp, #24
1f7f8     01 00 80 FF 
1f7fc     A7 D0 6B FC | 	wrlong	##1000, fp
1f800     18 4E 85 F1 | 	sub	fp, #24
1f804                 | LR__3270
1f804     18 4E 05 F1 | 	add	fp, #24
1f808     A7 1E 0A FB | 	rdlong	local01, fp wz
1f80c     18 4E 85 F1 | 	sub	fp, #24
1f810     3C 00 90 AD |  if_e	jmp	#LR__3271
1f814     A9 12 06 F6 | 	mov	arg01, #169
1f818     1E 14 C6 F9 | 	decod	arg02, #30
1f81c     18 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f820     FD 24 02 F6 | 	mov	local04, result1
1f824     07 24 4E F7 | 	zerox	local04, #7 wz
1f828     24 00 90 AD |  if_e	jmp	#LR__3271
1f82c     01 00 00 FF 
1f830     E8 13 06 F6 | 	mov	arg01, ##1000
1f834     00 99 BF FD | 	call	#__system___waitus
1f838     18 4E 05 F1 | 	add	fp, #24
1f83c     A7 24 02 FB | 	rdlong	local04, fp
1f840     01 24 86 F1 | 	sub	local04, #1
1f844     A7 24 62 FC | 	wrlong	local04, fp
1f848     18 4E 85 F1 | 	sub	fp, #24
1f84c     B4 FF 9F FD | 	jmp	#LR__3270
1f850                 | LR__3271
1f850     18 4E 05 F1 | 	add	fp, #24
1f854     A7 24 0A FB | 	rdlong	local04, fp wz
1f858     18 4E 85 F1 | 	sub	fp, #24
1f85c     4C 00 90 AD |  if_e	jmp	#LR__3272
1f860     3A 12 06 F6 | 	mov	arg01, #58
1f864     00 14 06 F6 | 	mov	arg02, #0
1f868     CC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f86c     FD 22 02 F6 | 	mov	local03, result1
1f870     07 22 4E F7 | 	zerox	local03, #7 wz
1f874     34 00 90 5D |  if_ne	jmp	#LR__3272
1f878     14 4E 05 F1 | 	add	fp, #20
1f87c     A7 12 02 F6 | 	mov	arg01, fp
1f880     14 4E 85 F1 | 	sub	fp, #20
1f884     04 14 06 F6 | 	mov	arg02, #4
1f888     D4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f88c     14 4E 05 F1 | 	add	fp, #20
1f890     A7 1E C2 FA | 	rdbyte	local01, fp
1f894     40 1E CE F7 | 	test	local01, #64 wz
1f898     0C 24 06 56 |  if_ne	mov	local04, #12
1f89c     04 24 06 A6 |  if_e	mov	local04, #4
1f8a0     08 4E 85 F1 | 	sub	fp, #8
1f8a4     A7 24 42 FC | 	wrbyte	local04, fp
1f8a8     0C 4E 85 F1 | 	sub	fp, #12
1f8ac                 | LR__3272
1f8ac     14 24 06 FB | 	rdlong	local04, #20
1f8b0     18 4E 05 F1 | 	add	fp, #24
1f8b4     A7 24 62 FC | 	wrlong	local04, fp
1f8b8     0C 4E 05 F1 | 	add	fp, #12
1f8bc     A7 24 02 FB | 	rdlong	local04, fp
1f8c0     1B 24 26 F4 | 	bith	local04, #27
1f8c4     A7 24 62 FC | 	wrlong	local04, fp
1f8c8     0C 4E 85 F1 | 	sub	fp, #12
1f8cc     A7 24 02 FB | 	rdlong	local04, fp
1f8d0     18 4E 85 F1 | 	sub	fp, #24
1f8d4     68 78 04 FF 
1f8d8     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1f8dc     1C 4E 05 C1 |  if_b	add	fp, #28
1f8e0     00 01 80 CF 
1f8e4     A7 08 68 CC |  if_b	wrlong	##131076, fp
1f8e8     1C 4E 85 C1 |  if_b	sub	fp, #28
1f8ec     6C 02 90 CD |  if_b	jmp	#LR__3286
1f8f0     18 4E 05 F1 | 	add	fp, #24
1f8f4     A7 24 02 FB | 	rdlong	local04, fp
1f8f8     18 4E 85 F1 | 	sub	fp, #24
1f8fc     E1 F5 05 FF 
1f900     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1f904     1C 4E 05 C1 |  if_b	add	fp, #28
1f908     00 01 80 CF 
1f90c     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1f910     1C 4E 85 C1 |  if_b	sub	fp, #28
1f914     44 02 90 CD |  if_b	jmp	#LR__3286
1f918     18 4E 05 F1 | 	add	fp, #24
1f91c     A7 24 02 FB | 	rdlong	local04, fp
1f920     18 4E 85 F1 | 	sub	fp, #24
1f924     3B 58 08 FF 
1f928     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1f92c     1C 4E 05 C1 |  if_b	add	fp, #28
1f930     00 01 80 CF 
1f934     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1f938     1C 4E 85 C1 |  if_b	sub	fp, #28
1f93c     1C 02 90 CD |  if_b	jmp	#LR__3286
1f940     1C 4E 05 F1 | 	add	fp, #28
1f944     80 01 80 FF 
1f948     A7 10 68 FC | 	wrlong	##196616, fp
1f94c     1C 4E 85 F1 | 	sub	fp, #28
1f950     08 02 90 FD | 	jmp	#LR__3286
1f954                 | LR__3273
1f954     A9 12 06 F6 | 	mov	arg01, #169
1f958     00 14 06 F6 | 	mov	arg02, #0
1f95c     D8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f960     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1f964     02 24 16 F2 | 	cmp	local04, #2 wc
1f968     18 00 90 3D |  if_ae	jmp	#LR__3274
1f96c     0C 4E 05 F1 | 	add	fp, #12
1f970     A7 04 48 FC | 	wrbyte	#2, fp
1f974     04 4E 05 F1 | 	add	fp, #4
1f978     A7 52 49 FC | 	wrbyte	#169, fp
1f97c     10 4E 85 F1 | 	sub	fp, #16
1f980     14 00 90 FD | 	jmp	#LR__3275
1f984                 | LR__3274
1f984     0C 4E 05 F1 | 	add	fp, #12
1f988     A7 02 48 FC | 	wrbyte	#1, fp
1f98c     04 4E 05 F1 | 	add	fp, #4
1f990     A7 02 48 FC | 	wrbyte	#1, fp
1f994     10 4E 85 F1 | 	sub	fp, #16
1f998                 | LR__3275
1f998                 | ' 				ty =  0x01 ; cmd =  (1) ;
1f998                 | ' 			}
1f998                 | ' 			for (tmr = 1000; tmr; tmr--) {
1f998     18 4E 05 F1 | 	add	fp, #24
1f99c     01 00 80 FF 
1f9a0     A7 D0 6B FC | 	wrlong	##1000, fp
1f9a4     18 4E 85 F1 | 	sub	fp, #24
1f9a8                 | LR__3276
1f9a8     18 4E 05 F1 | 	add	fp, #24
1f9ac     A7 22 0A FB | 	rdlong	local03, fp wz
1f9b0     18 4E 85 F1 | 	sub	fp, #24
1f9b4     44 00 90 AD |  if_e	jmp	#LR__3277
1f9b8     10 4E 05 F1 | 	add	fp, #16
1f9bc     A7 12 C2 FA | 	rdbyte	arg01, fp
1f9c0     10 4E 85 F1 | 	sub	fp, #16
1f9c4     00 14 06 F6 | 	mov	arg02, #0
1f9c8     6C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f9cc     FD 24 02 F6 | 	mov	local04, result1
1f9d0     07 24 4E F7 | 	zerox	local04, #7 wz
1f9d4     24 00 90 AD |  if_e	jmp	#LR__3277
1f9d8     01 00 00 FF 
1f9dc     E8 13 06 F6 | 	mov	arg01, ##1000
1f9e0     54 97 BF FD | 	call	#__system___waitus
1f9e4     18 4E 05 F1 | 	add	fp, #24
1f9e8     A7 24 02 FB | 	rdlong	local04, fp
1f9ec     01 24 86 F1 | 	sub	local04, #1
1f9f0     A7 24 62 FC | 	wrlong	local04, fp
1f9f4     18 4E 85 F1 | 	sub	fp, #24
1f9f8     AC FF 9F FD | 	jmp	#LR__3276
1f9fc                 | LR__3277
1f9fc     18 4E 05 F1 | 	add	fp, #24
1fa00     A7 24 0A FB | 	rdlong	local04, fp wz
1fa04     18 4E 85 F1 | 	sub	fp, #24
1fa08     14 00 90 AD |  if_e	jmp	#LR__3278
1fa0c     10 12 06 F6 | 	mov	arg01, #16
1fa10     09 14 C6 F9 | 	decod	arg02, #9
1fa14     20 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fa18     07 FA 4D F7 | 	zerox	result1, #7 wz
1fa1c     0C 00 90 AD |  if_e	jmp	#LR__3279
1fa20                 | LR__3278
1fa20     0C 4E 05 F1 | 	add	fp, #12
1fa24     A7 00 48 FC | 	wrbyte	#0, fp
1fa28     0C 4E 85 F1 | 	sub	fp, #12
1fa2c                 | LR__3279
1fa2c     14 24 06 FB | 	rdlong	local04, #20
1fa30     18 4E 05 F1 | 	add	fp, #24
1fa34     A7 24 62 FC | 	wrlong	local04, fp
1fa38     18 4E 85 F1 | 	sub	fp, #24
1fa3c     F0 FA 02 FF 
1fa40     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1fa44     18 00 90 3D |  if_ae	jmp	#LR__3280
1fa48     24 4E 05 F1 | 	add	fp, #36
1fa4c     A7 24 02 FB | 	rdlong	local04, fp
1fa50     1B 24 26 F4 | 	bith	local04, #27
1fa54     A7 24 62 FC | 	wrlong	local04, fp
1fa58     24 4E 85 F1 | 	sub	fp, #36
1fa5c     2C 00 90 FD | 	jmp	#LR__3281
1fa60                 | LR__3280
1fa60     18 4E 05 F1 | 	add	fp, #24
1fa64     A7 24 02 FB | 	rdlong	local04, fp
1fa68     18 4E 85 F1 | 	sub	fp, #24
1fa6c     E1 F5 05 FF 
1fa70     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1fa74     24 4E 05 C1 |  if_b	add	fp, #36
1fa78     A7 24 02 CB |  if_b	rdlong	local04, fp
1fa7c     80 00 04 CF 
1fa80     00 24 46 C5 |  if_b	or	local04, ##134283264
1fa84     A7 24 62 CC |  if_b	wrlong	local04, fp
1fa88     24 4E 85 C1 |  if_b	sub	fp, #36
1fa8c                 | LR__3281
1fa8c     18 4E 05 F1 | 	add	fp, #24
1fa90     A7 24 02 FB | 	rdlong	local04, fp
1fa94     18 4E 85 F1 | 	sub	fp, #24
1fa98     F0 FA 02 FF 
1fa9c     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1faa0     1C 4E 05 C1 |  if_b	add	fp, #28
1faa4     00 01 80 CF 
1faa8     A7 08 68 CC |  if_b	wrlong	##131076, fp
1faac     1C 4E 85 C1 |  if_b	sub	fp, #28
1fab0     A8 00 90 CD |  if_b	jmp	#LR__3285
1fab4     18 4E 05 F1 | 	add	fp, #24
1fab8     A7 24 02 FB | 	rdlong	local04, fp
1fabc     18 4E 85 F1 | 	sub	fp, #24
1fac0     68 78 04 FF 
1fac4     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1fac8     1C 4E 05 C1 |  if_b	add	fp, #28
1facc     80 01 80 CF 
1fad0     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1fad4     1C 4E 85 C1 |  if_b	sub	fp, #28
1fad8     80 00 90 CD |  if_b	jmp	#LR__3284
1fadc     18 4E 05 F1 | 	add	fp, #24
1fae0     A7 24 02 FB | 	rdlong	local04, fp
1fae4     18 4E 85 F1 | 	sub	fp, #24
1fae8     E1 F5 05 FF 
1faec     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1faf0     1C 4E 05 C1 |  if_b	add	fp, #28
1faf4     00 02 80 CF 
1faf8     A7 10 68 CC |  if_b	wrlong	##262152, fp
1fafc     1C 4E 85 C1 |  if_b	sub	fp, #28
1fb00     58 00 90 CD |  if_b	jmp	#LR__3283
1fb04     18 4E 05 F1 | 	add	fp, #24
1fb08     A7 24 02 FB | 	rdlong	local04, fp
1fb0c     18 4E 85 F1 | 	sub	fp, #24
1fb10     59 73 07 FF 
1fb14     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1fb18     1C 4E 05 C1 |  if_b	add	fp, #28
1fb1c     80 02 80 CF 
1fb20     A7 14 68 CC |  if_b	wrlong	##327690, fp
1fb24     1C 4E 85 C1 |  if_b	sub	fp, #28
1fb28     30 00 90 CD |  if_b	jmp	#LR__3282
1fb2c     18 4E 05 F1 | 	add	fp, #24
1fb30     A7 24 02 FB | 	rdlong	local04, fp
1fb34     18 4E 85 F1 | 	sub	fp, #24
1fb38     D1 F0 08 FF 
1fb3c     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1fb40     1C 4E 05 C1 |  if_b	add	fp, #28
1fb44     00 03 80 CF 
1fb48     A7 18 68 CC |  if_b	wrlong	##393228, fp
1fb4c     1C 4E 85 F3 | 	sumc	fp, #28
1fb50     80 03 80 3F 
1fb54     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1fb58     1C 4E 85 31 |  if_ae	sub	fp, #28
1fb5c                 | LR__3282
1fb5c                 | LR__3283
1fb5c                 | LR__3284
1fb5c                 | LR__3285
1fb5c                 | LR__3286
1fb5c                 | LR__3287
1fb5c     0C 4E 05 F1 | 	add	fp, #12
1fb60     A7 24 C2 FA | 	rdbyte	local04, fp
1fb64     01 00 00 FF 
1fb68     21 E4 05 F1 | 	add	objptr, ##545
1fb6c     F2 24 42 FC | 	wrbyte	local04, objptr
1fb70     A7 1E CA FA | 	rdbyte	local01, fp wz
1fb74     00 24 06 56 |  if_ne	mov	local04, #0
1fb78     01 24 06 A6 |  if_e	mov	local04, #1
1fb7c     20 4E 05 F1 | 	add	fp, #32
1fb80     A7 24 42 FC | 	wrbyte	local04, fp
1fb84     A7 24 C2 FA | 	rdbyte	local04, fp
1fb88     2C 4E 85 F1 | 	sub	fp, #44
1fb8c     01 E4 85 F1 | 	sub	objptr, #1
1fb90     F2 24 42 FC | 	wrbyte	local04, objptr
1fb94     01 00 00 FF 
1fb98     20 E4 85 F1 | 	sub	objptr, ##544
1fb9c     D8 7B B0 FD | 	call	#_fatfs_cc_deselect_1009
1fba0     34 4E 05 F1 | 	add	fp, #52
1fba4     A7 12 02 FB | 	rdlong	arg01, fp
1fba8     18 4E 85 F1 | 	sub	fp, #24
1fbac     A7 14 02 FB | 	rdlong	arg02, fp
1fbb0     09 15 12 FC | 	wxpin	arg02, arg01
1fbb4     1C 4E 05 F1 | 	add	fp, #28
1fbb8     A7 12 02 FB | 	rdlong	arg01, fp
1fbbc     14 4E 85 F1 | 	sub	fp, #20
1fbc0     A7 14 02 FB | 	rdlong	arg02, fp
1fbc4     09 15 02 FC | 	wrpin	arg02, arg01
1fbc8                 | ' 
1fbc8                 | ' 		}
1fbc8                 | ' 	}
1fbc8                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1fbc8                 | ' 	CardType = ty;
1fbc8                 | ' 	s = ty ? 0 :  0x01 ;
1fbc8                 | ' 	Stat = s;
1fbc8                 | ' 
1fbc8                 | ' 	deselect();
1fbc8                 | ' 
1fbc8                 | ' 
1fbc8                 | ' 	_wxpin( PIN_CLK, ck_div );
1fbc8                 | ' 	_wrpin( PIN_DI, spm_tx );
1fbc8                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1fbc8                 | ' 	return s;
1fbc8     08 4E 05 F1 | 	add	fp, #8
1fbcc     A7 FA C1 FA | 	rdbyte	result1, fp
1fbd0     2C 4E 85 F1 | 	sub	fp, #44
1fbd4                 | LR__3288
1fbd4     A7 F0 03 F6 | 	mov	ptra, fp
1fbd8     B2 00 A0 FD | 	call	#popregs_
1fbdc                 | _fatfs_cc_disk_initialize_ret
1fbdc     2D 00 64 FD | 	ret
1fbe0                 | 
1fbe0                 | _fatfs_cc_disk_read
1fbe0     05 4A 05 F6 | 	mov	COUNT_, #5
1fbe4     A8 00 A0 FD | 	call	#pushregs_
1fbe8     0A 1F 02 F6 | 	mov	local01, arg02
1fbec     0B 21 02 F6 | 	mov	local02, arg03
1fbf0     0C 23 02 F6 | 	mov	local03, arg04
1fbf4     00 12 0E F2 | 	cmp	arg01, #0 wz
1fbf8     01 FA 05 56 |  if_ne	mov	result1, #1
1fbfc                 | ' 
1fbfc                 | ' 	return Stat;
1fbfc     01 00 00 AF 
1fc00     20 E4 05 A1 |  if_e	add	objptr, ##544
1fc04     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fc08     01 00 00 AF 
1fc0c     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fc10     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fc14     01 FA CD F7 | 	test	result1, #1 wz
1fc18     03 FA 05 56 |  if_ne	mov	result1, #3
1fc1c     84 00 90 5D |  if_ne	jmp	#LR__3292
1fc20     01 00 00 FF 
1fc24     21 E4 05 F1 | 	add	objptr, ##545
1fc28     F2 24 C2 FA | 	rdbyte	local04, objptr
1fc2c     01 00 00 FF 
1fc30     21 E4 85 F1 | 	sub	objptr, ##545
1fc34     08 24 CE F7 | 	test	local04, #8 wz
1fc38     09 20 66 A0 |  if_e	shl	local02, #9
1fc3c     02 22 16 F2 | 	cmp	local03, #2 wc
1fc40     12 24 06 36 |  if_ae	mov	local04, #18
1fc44     11 24 06 C6 |  if_b	mov	local04, #17
1fc48     10 15 02 F6 | 	mov	arg02, local02
1fc4c     12 13 02 F6 | 	mov	arg01, local04
1fc50     E4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fc54     FD 26 02 F6 | 	mov	local05, result1
1fc58     07 26 4E F7 | 	zerox	local05, #7 wz
1fc5c     30 00 90 5D |  if_ne	jmp	#LR__3291
1fc60                 | ' 		do {
1fc60                 | LR__3290
1fc60     0F 13 02 F6 | 	mov	arg01, local01
1fc64     09 14 C6 F9 | 	decod	arg02, #9
1fc68     20 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1017
1fc6c     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc70     01 00 00 5F 
1fc74     00 1E 06 51 |  if_ne	add	local01, ##512
1fc78     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3290
1fc7c     12 25 E2 F8 | 	getbyte	local04, local04, #0
1fc80     12 24 0E F2 | 	cmp	local04, #18 wz
1fc84     0C 12 06 A6 |  if_e	mov	arg01, #12
1fc88     00 14 06 A6 |  if_e	mov	arg02, #0
1fc8c     A8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1023
1fc90                 | LR__3291
1fc90     E4 7A B0 FD | 	call	#_fatfs_cc_deselect_1009
1fc94                 | ' 	}
1fc94                 | ' 	deselect();
1fc94                 | ' 
1fc94                 | ' 	return count ? RES_ERROR : RES_OK;
1fc94     00 22 0E F2 | 	cmp	local03, #0 wz
1fc98     01 26 06 56 |  if_ne	mov	local05, #1
1fc9c     00 26 06 A6 |  if_e	mov	local05, #0
1fca0     13 FB 01 F6 | 	mov	result1, local05
1fca4                 | LR__3292
1fca4     A7 F0 03 F6 | 	mov	ptra, fp
1fca8     B2 00 A0 FD | 	call	#popregs_
1fcac                 | _fatfs_cc_disk_read_ret
1fcac     2D 00 64 FD | 	ret
1fcb0                 | 
1fcb0                 | _fatfs_cc_disk_write
1fcb0     04 4A 05 F6 | 	mov	COUNT_, #4
1fcb4     A8 00 A0 FD | 	call	#pushregs_
1fcb8     0A 1F 02 F6 | 	mov	local01, arg02
1fcbc     0C 21 02 F6 | 	mov	local02, arg04
1fcc0     0B 23 02 F6 | 	mov	local03, arg03
1fcc4     00 12 0E F2 | 	cmp	arg01, #0 wz
1fcc8     01 FA 05 56 |  if_ne	mov	result1, #1
1fccc                 | ' 
1fccc                 | ' 	return Stat;
1fccc     01 00 00 AF 
1fcd0     20 E4 05 A1 |  if_e	add	objptr, ##544
1fcd4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fcd8     01 00 00 AF 
1fcdc     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fce0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fce4     01 FA CD F7 | 	test	result1, #1 wz
1fce8     03 FA 05 56 |  if_ne	mov	result1, #3
1fcec     D4 00 90 5D |  if_ne	jmp	#LR__3304
1fcf0     01 00 00 FF 
1fcf4     21 E4 05 F1 | 	add	objptr, ##545
1fcf8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fcfc     01 00 00 FF 
1fd00     21 E4 85 F1 | 	sub	objptr, ##545
1fd04     08 16 CE F7 | 	test	arg03, #8 wz
1fd08     09 22 66 A0 |  if_e	shl	local03, #9
1fd0c     01 20 0E F2 | 	cmp	local02, #1 wz
1fd10     30 00 90 5D |  if_ne	jmp	#LR__3300
1fd14     18 12 06 F6 | 	mov	arg01, #24
1fd18     11 15 02 F6 | 	mov	arg02, local03
1fd1c     18 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fd20     FD 24 02 F6 | 	mov	local04, result1
1fd24     07 24 4E F7 | 	zerox	local04, #7 wz
1fd28     84 00 90 5D |  if_ne	jmp	#LR__3303
1fd2c     0F 13 02 F6 | 	mov	arg01, local01
1fd30     FE 14 06 F6 | 	mov	arg02, #254
1fd34     34 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1019
1fd38     00 FA 0D F2 | 	cmp	result1, #0 wz
1fd3c     00 20 06 56 |  if_ne	mov	local02, #0
1fd40     6C 00 90 FD | 	jmp	#LR__3303
1fd44                 | LR__3300
1fd44     01 00 00 FF 
1fd48     21 E4 05 F1 | 	add	objptr, ##545
1fd4c     F2 24 C2 FA | 	rdbyte	local04, objptr
1fd50     01 00 00 FF 
1fd54     21 E4 85 F1 | 	sub	objptr, ##545
1fd58     06 24 CE F7 | 	test	local04, #6 wz
1fd5c     97 12 06 56 |  if_ne	mov	arg01, #151
1fd60     10 15 02 56 |  if_ne	mov	arg02, local02
1fd64     D0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1023
1fd68     11 15 02 F6 | 	mov	arg02, local03
1fd6c     19 12 06 F6 | 	mov	arg01, #25
1fd70     C4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fd74     FD 24 02 F6 | 	mov	local04, result1
1fd78     07 24 4E F7 | 	zerox	local04, #7 wz
1fd7c     30 00 90 5D |  if_ne	jmp	#LR__3302
1fd80                 | ' 			do {
1fd80                 | LR__3301
1fd80     0F 13 02 F6 | 	mov	arg01, local01
1fd84     FC 14 06 F6 | 	mov	arg02, #252
1fd88     E0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1019
1fd8c     00 FA 0D F2 | 	cmp	result1, #0 wz
1fd90     01 00 00 5F 
1fd94     00 1E 06 51 |  if_ne	add	local01, ##512
1fd98     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3301
1fd9c     00 12 06 F6 | 	mov	arg01, #0
1fda0     FD 14 06 F6 | 	mov	arg02, #253
1fda4     C4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1019
1fda8     00 FA 0D F2 | 	cmp	result1, #0 wz
1fdac     01 20 06 A6 |  if_e	mov	local02, #1
1fdb0                 | LR__3302
1fdb0                 | LR__3303
1fdb0     C4 79 B0 FD | 	call	#_fatfs_cc_deselect_1009
1fdb4                 | ' 				count = 1;
1fdb4                 | ' 		}
1fdb4                 | ' 	}
1fdb4                 | ' 	deselect();
1fdb4                 | ' 
1fdb4                 | ' 	return count ? RES_ERROR : RES_OK;
1fdb4     00 20 0E F2 | 	cmp	local02, #0 wz
1fdb8     01 24 06 56 |  if_ne	mov	local04, #1
1fdbc     00 24 06 A6 |  if_e	mov	local04, #0
1fdc0     12 FB 01 F6 | 	mov	result1, local04
1fdc4                 | LR__3304
1fdc4     A7 F0 03 F6 | 	mov	ptra, fp
1fdc8     B2 00 A0 FD | 	call	#popregs_
1fdcc                 | _fatfs_cc_disk_write_ret
1fdcc     2D 00 64 FD | 	ret
1fdd0                 | 
1fdd0                 | _fatfs_cc_disk_ioctl
1fdd0     01 4A 05 F6 | 	mov	COUNT_, #1
1fdd4     A8 00 A0 FD | 	call	#pushregs_
1fdd8     30 F0 07 F1 | 	add	ptra, #48
1fddc     04 4E 05 F1 | 	add	fp, #4
1fde0     A7 12 42 FC | 	wrbyte	arg01, fp
1fde4     04 4E 05 F1 | 	add	fp, #4
1fde8     A7 14 42 FC | 	wrbyte	arg02, fp
1fdec     04 4E 05 F1 | 	add	fp, #4
1fdf0     A7 16 62 FC | 	wrlong	arg03, fp
1fdf4     08 4E 85 F1 | 	sub	fp, #8
1fdf8     A7 12 CA FA | 	rdbyte	arg01, fp wz
1fdfc     04 4E 85 F1 | 	sub	fp, #4
1fe00     01 FA 05 56 |  if_ne	mov	result1, #1
1fe04                 | ' 
1fe04                 | ' 	return Stat;
1fe04     01 00 00 AF 
1fe08     20 E4 05 A1 |  if_e	add	objptr, ##544
1fe0c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fe10     01 00 00 AF 
1fe14     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fe18     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fe1c     01 FA CD F7 | 	test	result1, #1 wz
1fe20     03 FA 05 56 |  if_ne	mov	result1, #3
1fe24     E4 01 90 5D |  if_ne	jmp	#LR__3318
1fe28     10 4E 05 F1 | 	add	fp, #16
1fe2c     A7 02 68 FC | 	wrlong	#1, fp
1fe30                 | ' 
1fe30                 | ' 	res = RES_ERROR;
1fe30                 | ' 	switch (ctrl) {
1fe30     08 4E 85 F1 | 	sub	fp, #8
1fe34     A7 1E C2 FA | 	rdbyte	local01, fp
1fe38     08 4E 85 F1 | 	sub	fp, #8
1fe3c     04 1E 26 F3 | 	fle	local01, #4
1fe40     30 1E 62 FD | 	jmprel	local01
1fe44                 | LR__3310
1fe44     10 00 90 FD | 	jmp	#LR__3311
1fe48     24 00 90 FD | 	jmp	#LR__3312
1fe4c     A0 01 90 FD | 	jmp	#LR__3316
1fe50     80 01 90 FD | 	jmp	#LR__3315
1fe54     98 01 90 FD | 	jmp	#LR__3316
1fe58                 | LR__3311
1fe58     A0 79 B0 FD | 	call	#_fatfs_cc_select_1013
1fe5c     00 FA 0D F2 | 	cmp	result1, #0 wz
1fe60     10 4E 05 51 |  if_ne	add	fp, #16
1fe64     A7 00 68 5C |  if_ne	wrlong	#0, fp
1fe68     10 4E 85 51 |  if_ne	sub	fp, #16
1fe6c                 | ' 			break;
1fe6c     8C 01 90 FD | 	jmp	#LR__3317
1fe70                 | LR__3312
1fe70     09 12 06 F6 | 	mov	arg01, #9
1fe74     00 14 06 F6 | 	mov	arg02, #0
1fe78     BC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fe7c     FD 1E 02 F6 | 	mov	local01, result1
1fe80     07 1E 4E F7 | 	zerox	local01, #7 wz
1fe84     74 01 90 5D |  if_ne	jmp	#LR__3317
1fe88     18 4E 05 F1 | 	add	fp, #24
1fe8c     A7 12 02 F6 | 	mov	arg01, fp
1fe90     18 4E 85 F1 | 	sub	fp, #24
1fe94     10 14 06 F6 | 	mov	arg02, #16
1fe98     F0 79 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1017
1fe9c     00 FA 0D F2 | 	cmp	result1, #0 wz
1fea0     58 01 90 AD |  if_e	jmp	#LR__3317
1fea4     18 4E 05 F1 | 	add	fp, #24
1fea8     A7 1E C2 FA | 	rdbyte	local01, fp
1feac     18 4E 85 F1 | 	sub	fp, #24
1feb0     06 1E 46 F0 | 	shr	local01, #6
1feb4     01 1E 0E F2 | 	cmp	local01, #1 wz
1feb8     5C 00 90 5D |  if_ne	jmp	#LR__3313
1febc     21 4E 05 F1 | 	add	fp, #33
1fec0     A7 1E C2 FA | 	rdbyte	local01, fp
1fec4     01 4E 85 F1 | 	sub	fp, #1
1fec8     A7 FA C1 FA | 	rdbyte	result1, fp
1fecc     FD FA 31 F9 | 	getword	result1, result1, #0
1fed0     08 FA 65 F0 | 	shl	result1, #8
1fed4     FD 1E 02 F1 | 	add	local01, result1
1fed8     01 4E 85 F1 | 	sub	fp, #1
1fedc     A7 FA C1 FA | 	rdbyte	result1, fp
1fee0     3F FA 05 F5 | 	and	result1, #63
1fee4     10 FA 65 F0 | 	shl	result1, #16
1fee8     FD 1E 02 F1 | 	add	local01, result1
1feec     01 1E 06 F1 | 	add	local01, #1
1fef0     09 4E 05 F1 | 	add	fp, #9
1fef4     A7 1E 62 FC | 	wrlong	local01, fp
1fef8     1C 4E 85 F1 | 	sub	fp, #28
1fefc     A7 1E 02 FB | 	rdlong	local01, fp
1ff00     1C 4E 05 F1 | 	add	fp, #28
1ff04     A7 FA 01 FB | 	rdlong	result1, fp
1ff08     28 4E 85 F1 | 	sub	fp, #40
1ff0c     0A FA 65 F0 | 	shl	result1, #10
1ff10     0F FB 61 FC | 	wrlong	result1, local01
1ff14     AC 00 90 FD | 	jmp	#LR__3314
1ff18                 | LR__3313
1ff18     1D 4E 05 F1 | 	add	fp, #29
1ff1c     A7 1E C2 FA | 	rdbyte	local01, fp
1ff20     0F 1F 42 F8 | 	getnib	local01, local01, #0
1ff24     05 4E 05 F1 | 	add	fp, #5
1ff28     A7 FA C1 FA | 	rdbyte	result1, fp
1ff2c     80 FA 05 F5 | 	and	result1, #128
1ff30     07 FA C5 F0 | 	sar	result1, #7
1ff34     FD 1E 02 F1 | 	add	local01, result1
1ff38     01 4E 85 F1 | 	sub	fp, #1
1ff3c     A7 FA C1 FA | 	rdbyte	result1, fp
1ff40     03 FA 05 F5 | 	and	result1, #3
1ff44     01 FA 65 F0 | 	shl	result1, #1
1ff48     FD 1E 02 F1 | 	add	local01, result1
1ff4c     02 1E 06 F1 | 	add	local01, #2
1ff50     0D 4E 85 F1 | 	sub	fp, #13
1ff54     A7 1E 42 FC | 	wrbyte	local01, fp
1ff58     0C 4E 05 F1 | 	add	fp, #12
1ff5c     A7 1E C2 FA | 	rdbyte	local01, fp
1ff60     06 1E 46 F0 | 	shr	local01, #6
1ff64     01 4E 85 F1 | 	sub	fp, #1
1ff68     A7 FA C1 FA | 	rdbyte	result1, fp
1ff6c     FD FA 31 F9 | 	getword	result1, result1, #0
1ff70     02 FA 65 F0 | 	shl	result1, #2
1ff74     FD 1E 02 F1 | 	add	local01, result1
1ff78     01 4E 85 F1 | 	sub	fp, #1
1ff7c     A7 FA C1 FA | 	rdbyte	result1, fp
1ff80     03 FA 05 F5 | 	and	result1, #3
1ff84     FD FA 31 F9 | 	getword	result1, result1, #0
1ff88     0A FA 65 F0 | 	shl	result1, #10
1ff8c     FD 1E 02 F1 | 	add	local01, result1
1ff90     01 1E 06 F1 | 	add	local01, #1
1ff94     0A 4E 05 F1 | 	add	fp, #10
1ff98     A7 1E 62 FC | 	wrlong	local01, fp
1ff9c     1C 4E 85 F1 | 	sub	fp, #28
1ffa0     A7 1E 02 FB | 	rdlong	local01, fp
1ffa4     1C 4E 05 F1 | 	add	fp, #28
1ffa8     A7 FA 01 FB | 	rdlong	result1, fp
1ffac     14 4E 85 F1 | 	sub	fp, #20
1ffb0     A7 16 C2 FA | 	rdbyte	arg03, fp
1ffb4     14 4E 85 F1 | 	sub	fp, #20
1ffb8     09 16 86 F1 | 	sub	arg03, #9
1ffbc     0B FB 61 F0 | 	shl	result1, arg03
1ffc0     0F FB 61 FC | 	wrlong	result1, local01
1ffc4                 | LR__3314
1ffc4     10 4E 05 F1 | 	add	fp, #16
1ffc8     A7 00 68 FC | 	wrlong	#0, fp
1ffcc     10 4E 85 F1 | 	sub	fp, #16
1ffd0                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1ffd0                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1ffd0                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1ffd0                 | ' 				}
1ffd0                 | ' 				res = RES_OK;
1ffd0                 | ' 			}
1ffd0                 | ' 			break;
1ffd0     28 00 90 FD | 	jmp	#LR__3317
1ffd4                 | LR__3315
1ffd4     0C 4E 05 F1 | 	add	fp, #12
1ffd8     A7 1E 02 FB | 	rdlong	local01, fp
1ffdc     0F 01 69 FC | 	wrlong	#128, local01
1ffe0     04 4E 05 F1 | 	add	fp, #4
1ffe4     A7 00 68 FC | 	wrlong	#0, fp
1ffe8     10 4E 85 F1 | 	sub	fp, #16
1ffec                 | ' 			*(DWORD*)buff = 128;
1ffec                 | ' 			res = RES_OK;
1ffec                 | ' 			break;
1ffec     0C 00 90 FD | 	jmp	#LR__3317
1fff0                 | LR__3316
1fff0     10 4E 05 F1 | 	add	fp, #16
1fff4     A7 08 68 FC | 	wrlong	#4, fp
1fff8     10 4E 85 F1 | 	sub	fp, #16
1fffc                 | LR__3317
1fffc     78 77 B0 FD | 	call	#_fatfs_cc_deselect_1009
20000                 | ' 			res = RES_PARERR;
20000                 | ' 	}
20000                 | ' 
20000                 | ' 	deselect();
20000                 | ' 
20000                 | ' 	return res;
20000     10 4E 05 F1 | 	add	fp, #16
20004     A7 FA 01 FB | 	rdlong	result1, fp
20008     10 4E 85 F1 | 	sub	fp, #16
2000c                 | LR__3318
2000c     A7 F0 03 F6 | 	mov	ptra, fp
20010     B2 00 A0 FD | 	call	#popregs_
20014                 | _fatfs_cc_disk_ioctl_ret
20014     2D 00 64 FD | 	ret
20018                 | 
20018                 | _fatfs_cc_disk_setpins
20018     00 12 0E F2 | 	cmp	arg01, #0 wz
2001c     01 FA 65 56 |  if_ne	neg	result1, #1
20020     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
20024     01 00 00 FF 
20028     10 E4 05 F1 | 	add	objptr, ##528
2002c     F2 14 62 FC | 	wrlong	arg02, objptr
20030     04 E4 05 F1 | 	add	objptr, #4
20034     F2 16 62 FC | 	wrlong	arg03, objptr
20038     04 E4 05 F1 | 	add	objptr, #4
2003c     F2 18 62 FC | 	wrlong	arg04, objptr
20040     04 E4 05 F1 | 	add	objptr, #4
20044     F2 1A 62 FC | 	wrlong	arg05, objptr
20048     01 00 00 FF 
2004c     1C E4 85 F1 | 	sub	objptr, ##540
20050     00 FA 05 F6 | 	mov	result1, #0
20054                 | _fatfs_cc_disk_setpins_ret
20054     2D 00 64 FD | 	ret
20058                 | 
20058                 | _fatfs_cc_tchar2uni
20058     09 01 02 FB | 	rdlong	_var01, arg01
2005c     00 03 02 F6 | 	mov	_var02, _var01
20060     01 00 06 F1 | 	add	_var01, #1
20064     00 05 02 F6 | 	mov	_var03, _var01
20068     01 07 C2 FA | 	rdbyte	_var04, _var02
2006c     80 06 CE F7 | 	test	_var04, #128 wz
20070     E8 00 90 AD |  if_e	jmp	#LR__3327
20074     03 09 02 F6 | 	mov	_var05, _var04
20078     E0 08 06 F5 | 	and	_var05, #224
2007c     C0 08 0E F2 | 	cmp	_var05, #192 wz
20080     1F 06 06 A5 |  if_e	and	_var04, #31
20084     01 0A 06 A6 |  if_e	mov	_var06, #1
20088     34 00 90 AD |  if_e	jmp	#LR__3321
2008c     03 09 02 F6 | 	mov	_var05, _var04
20090     F0 08 06 F5 | 	and	_var05, #240
20094     E0 08 0E F2 | 	cmp	_var05, #224 wz
20098     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2009c     02 0A 06 A6 |  if_e	mov	_var06, #2
200a0     1C 00 90 AD |  if_e	jmp	#LR__3320
200a4     03 09 02 F6 | 	mov	_var05, _var04
200a8     F8 08 06 F5 | 	and	_var05, #248
200ac     F0 08 0E F2 | 	cmp	_var05, #240 wz
200b0     07 06 06 A5 |  if_e	and	_var04, #7
200b4     03 0A 06 A6 |  if_e	mov	_var06, #3
200b8                 | ' 			return 0xFFFFFFFF;
200b8     01 FA 65 56 |  if_ne	neg	result1, #1
200bc     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
200c0                 | LR__3320
200c0                 | LR__3321
200c0                 | ' 		}
200c0                 | ' 		do {
200c0                 | LR__3322
200c0     02 0D C2 FA | 	rdbyte	_var07, _var03
200c4     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
200c8     C0 08 06 F5 | 	and	_var05, #192
200cc     80 08 0E F2 | 	cmp	_var05, #128 wz
200d0     01 04 06 F1 | 	add	_var03, #1
200d4     01 FA 65 56 |  if_ne	neg	result1, #1
200d8     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
200dc     06 06 66 F0 | 	shl	_var04, #6
200e0     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
200e4     3F 02 06 F5 | 	and	_var02, #63
200e8     01 07 42 F5 | 	or	_var04, _var02
200ec     F4 0B 6E FB | 	djnz	_var06, #LR__3322
200f0     80 06 16 F2 | 	cmp	_var04, #128 wc
200f4     24 00 90 CD |  if_b	jmp	#LR__3324
200f8     6C 00 00 FF 
200fc     00 06 16 F2 | 	cmp	_var04, ##55296 wc
20100     0C 00 90 CD |  if_b	jmp	#LR__3323
20104     70 00 00 FF 
20108     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2010c     0C 00 90 CD |  if_b	jmp	#LR__3324
20110                 | LR__3323
20110     80 08 00 FF 
20114     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
20118     08 00 90 CD |  if_b	jmp	#LR__3325
2011c                 | LR__3324
2011c     01 FA 65 F6 | 	neg	result1, #1
20120     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
20124                 | LR__3325
20124     80 00 00 FF 
20128     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2012c     2C 00 90 CD |  if_b	jmp	#LR__3326
20130     03 03 02 F6 | 	mov	_var02, _var04
20134     80 00 00 FF 
20138     00 02 86 F1 | 	sub	_var02, ##65536
2013c     06 02 66 F0 | 	shl	_var02, #6
20140     80 FF 01 FF 
20144     00 02 06 F5 | 	and	_var02, ##67043328
20148     6E 00 6C FF 
2014c     00 08 06 F6 | 	mov	_var05, ##-671032320
20150     01 09 42 F5 | 	or	_var05, _var02
20154     09 06 46 F7 | 	zerox	_var04, #9
20158     04 07 42 F5 | 	or	_var04, _var05
2015c                 | LR__3326
2015c                 | LR__3327
2015c     09 05 62 FC | 	wrlong	_var03, arg01
20160                 | ' 	}
20160                 | ' #line 811 "ff.c"
20160                 | ' 	*str = p;
20160                 | ' 	return uc;
20160     03 FB 01 F6 | 	mov	result1, _var04
20164                 | _fatfs_cc_tchar2uni_ret
20164     2D 00 64 FD | 	ret
20168                 | 
20168                 | _fatfs_cc_put_utf
20168     80 12 16 F2 | 	cmp	arg01, #128 wc
2016c     18 00 90 3D |  if_ae	jmp	#LR__3330
20170     01 16 16 F2 | 	cmp	arg03, #1 wc
20174     00 FA 05 C6 |  if_b	mov	result1, #0
20178     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2017c     0A 13 42 FC | 	wrbyte	arg01, arg02
20180                 | ' 		*buf = (TCHAR)chr;
20180                 | ' 		return 1;
20180     01 FA 05 F6 | 	mov	result1, #1
20184     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
20188                 | LR__3330
20188     04 00 00 FF 
2018c     00 12 16 F2 | 	cmp	arg01, ##2048 wc
20190     40 00 90 3D |  if_ae	jmp	#LR__3331
20194     02 16 16 F2 | 	cmp	arg03, #2 wc
20198     00 FA 05 C6 |  if_b	mov	result1, #0
2019c     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
201a0     09 FB 01 F6 | 	mov	result1, arg01
201a4     06 FA 45 F0 | 	shr	result1, #6
201a8     1F FA 05 F5 | 	and	result1, #31
201ac     C0 16 06 F6 | 	mov	arg03, #192
201b0     FD 16 42 F5 | 	or	arg03, result1
201b4     0A 17 42 FC | 	wrbyte	arg03, arg02
201b8     01 14 06 F1 | 	add	arg02, #1
201bc     3F 12 06 F5 | 	and	arg01, #63
201c0     80 FA 05 F6 | 	mov	result1, #128
201c4     09 FB 41 F5 | 	or	result1, arg01
201c8     0A FB 41 FC | 	wrbyte	result1, arg02
201cc                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
201cc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
201cc                 | ' 		return 2;
201cc     02 FA 05 F6 | 	mov	result1, #2
201d0     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
201d4                 | LR__3331
201d4     80 00 00 FF 
201d8     00 12 16 F2 | 	cmp	arg01, ##65536 wc
201dc     70 00 90 3D |  if_ae	jmp	#LR__3334
201e0     03 16 16 F2 | 	cmp	arg03, #3 wc
201e4     18 00 90 CD |  if_b	jmp	#LR__3332
201e8     6C 00 00 FF 
201ec     00 12 16 F2 | 	cmp	arg01, ##55296 wc
201f0     14 00 90 CD |  if_b	jmp	#LR__3333
201f4     70 00 00 FF 
201f8     00 12 16 F2 | 	cmp	arg01, ##57344 wc
201fc     08 00 90 3D |  if_ae	jmp	#LR__3333
20200                 | LR__3332
20200     00 FA 05 F6 | 	mov	result1, #0
20204     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
20208                 | LR__3333
20208     09 FB 59 F8 | 	getnib	result1, arg01, #3
2020c     E0 16 06 F6 | 	mov	arg03, #224
20210     FD 16 42 F5 | 	or	arg03, result1
20214     0A 17 42 FC | 	wrbyte	arg03, arg02
20218     01 14 06 F1 | 	add	arg02, #1
2021c     09 FB 01 F6 | 	mov	result1, arg01
20220     06 FA 45 F0 | 	shr	result1, #6
20224     3F FA 05 F5 | 	and	result1, #63
20228     80 16 06 F6 | 	mov	arg03, #128
2022c     FD 16 42 F5 | 	or	arg03, result1
20230     0A 17 42 FC | 	wrbyte	arg03, arg02
20234     01 14 06 F1 | 	add	arg02, #1
20238     3F 12 06 F5 | 	and	arg01, #63
2023c     80 FA 05 F6 | 	mov	result1, #128
20240     09 FB 41 F5 | 	or	result1, arg01
20244     0A FB 41 FC | 	wrbyte	result1, arg02
20248                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
20248                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
20248                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
20248                 | ' 		return 3;
20248     03 FA 05 F6 | 	mov	result1, #3
2024c     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
20250                 | LR__3334
20250     04 16 16 F2 | 	cmp	arg03, #4 wc
20254     00 FA 05 C6 |  if_b	mov	result1, #0
20258     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2025c     09 01 02 F6 | 	mov	_var01, arg01
20260     E0 01 06 F4 | 	bitl	_var01, #480
20264     00 00 6C FF 
20268     00 00 86 F1 | 	sub	_var01, ##-671088640
2026c     06 00 46 F0 | 	shr	_var01, #6
20270     09 13 32 F9 | 	getword	arg01, arg01, #0
20274     6E 00 00 FF 
20278     00 12 86 F1 | 	sub	arg01, ##56320
2027c     00 08 00 FF 
20280     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
20284     02 00 00 CF 
20288     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2028c     00 FA 05 36 |  if_ae	mov	result1, #0
20290     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
20294     09 01 42 F5 | 	or	_var01, arg01
20298     80 00 00 FF 
2029c     00 00 06 F1 | 	add	_var01, ##65536
202a0     00 FB 01 F6 | 	mov	result1, _var01
202a4     12 FA 45 F0 | 	shr	result1, #18
202a8     07 FA 05 F5 | 	and	result1, #7
202ac     F0 16 06 F6 | 	mov	arg03, #240
202b0     FD 16 42 F5 | 	or	arg03, result1
202b4     0A 17 42 FC | 	wrbyte	arg03, arg02
202b8     01 14 06 F1 | 	add	arg02, #1
202bc     00 FB 01 F6 | 	mov	result1, _var01
202c0     0C FA 45 F0 | 	shr	result1, #12
202c4     3F FA 05 F5 | 	and	result1, #63
202c8     80 16 06 F6 | 	mov	arg03, #128
202cc     FD 16 42 F5 | 	or	arg03, result1
202d0     0A 17 42 FC | 	wrbyte	arg03, arg02
202d4     01 14 06 F1 | 	add	arg02, #1
202d8     00 FB 01 F6 | 	mov	result1, _var01
202dc     06 FA 45 F0 | 	shr	result1, #6
202e0     3F FA 05 F5 | 	and	result1, #63
202e4     80 16 06 F6 | 	mov	arg03, #128
202e8     FD 16 42 F5 | 	or	arg03, result1
202ec     0A 17 42 FC | 	wrbyte	arg03, arg02
202f0     01 14 06 F1 | 	add	arg02, #1
202f4     3F 00 06 F5 | 	and	_var01, #63
202f8     80 FA 05 F6 | 	mov	result1, #128
202fc     00 FB 41 F5 | 	or	result1, _var01
20300     0A FB 41 FC | 	wrbyte	result1, arg02
20304                 | ' 	chr = (hc | chr) + 0x10000;
20304                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
20304                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
20304                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
20304                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
20304                 | ' 	return 4;
20304     04 FA 05 F6 | 	mov	result1, #4
20308                 | _fatfs_cc_put_utf_ret
20308     2D 00 64 FD | 	ret
2030c                 | 
2030c                 | _fatfs_cc_sync_window
2030c     02 4A 05 F6 | 	mov	COUNT_, #2
20310     A8 00 A0 FD | 	call	#pushregs_
20314     09 1F 02 F6 | 	mov	local01, arg01
20318     00 20 06 F6 | 	mov	local02, #0
2031c     03 1E 06 F1 | 	add	local01, #3
20320     0F FB C9 FA | 	rdbyte	result1, local01 wz
20324     03 1E 86 F1 | 	sub	local01, #3
20328     A4 00 90 AD |  if_e	jmp	#LR__3342
2032c     01 1E 06 F1 | 	add	local01, #1
20330     0F 13 C2 FA | 	rdbyte	arg01, local01
20334     33 1E 06 F1 | 	add	local01, #51
20338     0F 15 02 F6 | 	mov	arg02, local01
2033c     04 1E 86 F1 | 	sub	local01, #4
20340     0F 17 02 FB | 	rdlong	arg03, local01
20344     30 1E 86 F1 | 	sub	local01, #48
20348     01 18 06 F6 | 	mov	arg04, #1
2034c     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
20350     00 FA 0D F2 | 	cmp	result1, #0 wz
20354     74 00 90 5D |  if_ne	jmp	#LR__3340
20358     03 1E 06 F1 | 	add	local01, #3
2035c     0F 01 48 FC | 	wrbyte	#0, local01
20360     2D 1E 06 F1 | 	add	local01, #45
20364     0F FB 01 FB | 	rdlong	result1, local01
20368     0C 1E 86 F1 | 	sub	local01, #12
2036c     0F 19 02 FB | 	rdlong	arg04, local01
20370     0C FB 81 F1 | 	sub	result1, arg04
20374     08 1E 86 F1 | 	sub	local01, #8
20378     0F 19 02 FB | 	rdlong	arg04, local01
2037c     1C 1E 86 F1 | 	sub	local01, #28
20380     0C FB 11 F2 | 	cmp	result1, arg04 wc
20384     48 00 90 3D |  if_ae	jmp	#LR__3341
20388     02 1E 06 F1 | 	add	local01, #2
2038c     0F 19 C2 FA | 	rdbyte	arg04, local01
20390     02 1E 86 F1 | 	sub	local01, #2
20394     02 18 0E F2 | 	cmp	arg04, #2 wz
20398     34 00 90 5D |  if_ne	jmp	#LR__3341
2039c     01 1E 06 F1 | 	add	local01, #1
203a0     0F 13 C2 FA | 	rdbyte	arg01, local01
203a4     33 1E 06 F1 | 	add	local01, #51
203a8     0F 15 02 F6 | 	mov	arg02, local01
203ac     04 1E 86 F1 | 	sub	local01, #4
203b0     0F 17 02 FB | 	rdlong	arg03, local01
203b4     14 1E 86 F1 | 	sub	local01, #20
203b8     0F 1F 02 FB | 	rdlong	local01, local01
203bc     0F 17 02 F1 | 	add	arg03, local01
203c0     01 18 06 F6 | 	mov	arg04, #1
203c4     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
203c8     04 00 90 FD | 	jmp	#LR__3341
203cc                 | LR__3340
203cc     01 20 06 F6 | 	mov	local02, #1
203d0                 | LR__3341
203d0                 | LR__3342
203d0                 | ' 			res = FR_DISK_ERR;
203d0                 | ' 		}
203d0                 | ' 	}
203d0                 | ' 	return res;
203d0     10 FB 01 F6 | 	mov	result1, local02
203d4     A7 F0 03 F6 | 	mov	ptra, fp
203d8     B2 00 A0 FD | 	call	#popregs_
203dc                 | _fatfs_cc_sync_window_ret
203dc     2D 00 64 FD | 	ret
203e0                 | 
203e0                 | _fatfs_cc_move_window
203e0     03 4A 05 F6 | 	mov	COUNT_, #3
203e4     A8 00 A0 FD | 	call	#pushregs_
203e8     09 1F 02 F6 | 	mov	local01, arg01
203ec     0A 21 02 F6 | 	mov	local02, arg02
203f0     00 22 06 F6 | 	mov	local03, #0
203f4     30 1E 06 F1 | 	add	local01, #48
203f8     0F 19 02 FB | 	rdlong	arg04, local01
203fc     30 1E 86 F1 | 	sub	local01, #48
20400     0C 21 0A F2 | 	cmp	local02, arg04 wz
20404     40 00 90 AD |  if_e	jmp	#LR__3351
20408     0F 13 02 F6 | 	mov	arg01, local01
2040c     FC FE BF FD | 	call	#_fatfs_cc_sync_window
20410     FD 22 0A F6 | 	mov	local03, result1 wz
20414     30 00 90 5D |  if_ne	jmp	#LR__3350
20418     01 1E 06 F1 | 	add	local01, #1
2041c     0F 13 C2 FA | 	rdbyte	arg01, local01
20420     33 1E 06 F1 | 	add	local01, #51
20424     0F 15 02 F6 | 	mov	arg02, local01
20428     10 17 02 F6 | 	mov	arg03, local02
2042c     01 18 06 F6 | 	mov	arg04, #1
20430     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
20434     00 FA 0D F2 | 	cmp	result1, #0 wz
20438     01 20 66 56 |  if_ne	neg	local02, #1
2043c     01 22 06 56 |  if_ne	mov	local03, #1
20440     04 1E 86 F1 | 	sub	local01, #4
20444     0F 21 62 FC | 	wrlong	local02, local01
20448                 | LR__3350
20448                 | LR__3351
20448                 | ' 				sect = (LBA_t)0 - 1;
20448                 | ' 				res = FR_DISK_ERR;
20448                 | ' 			}
20448                 | ' 			fs->winsect = sect;
20448                 | ' 		}
20448                 | ' 	}
20448                 | ' 	return res;
20448     11 FB 01 F6 | 	mov	result1, local03
2044c     A7 F0 03 F6 | 	mov	ptra, fp
20450     B2 00 A0 FD | 	call	#popregs_
20454                 | _fatfs_cc_move_window_ret
20454     2D 00 64 FD | 	ret
20458                 | 
20458                 | _fatfs_cc_sync_fs
20458     02 4A 05 F6 | 	mov	COUNT_, #2
2045c     A8 00 A0 FD | 	call	#pushregs_
20460     09 1F 02 F6 | 	mov	local01, arg01
20464     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
20468     FD 20 0A F6 | 	mov	local02, result1 wz
2046c     D8 00 90 5D |  if_ne	jmp	#LR__3361
20470     0F 19 C2 FA | 	rdbyte	arg04, local01
20474     03 18 0E F2 | 	cmp	arg04, #3 wz
20478     04 1E 06 A1 |  if_e	add	local01, #4
2047c     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
20480     04 1E 86 A1 |  if_e	sub	local01, #4
20484     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
20488     A0 00 90 5D |  if_ne	jmp	#LR__3360
2048c     34 1E 06 F1 | 	add	local01, #52
20490     0F 13 02 F6 | 	mov	arg01, local01
20494     00 14 06 F6 | 	mov	arg02, #0
20498     09 16 C6 F9 | 	decod	arg03, #9
2049c     98 00 A0 FD | 	call	#\builtin_bytefill_
204a0     0F 13 02 F6 | 	mov	arg01, local01
204a4     FE 13 06 F1 | 	add	arg01, #510
204a8     55 00 80 FF 
204ac     09 AB 58 FC | 	wrword	##43605, arg01
204b0     A9 B0 A0 FF 
204b4     0F A5 68 FC | 	wrlong	##1096897106, local01
204b8     0F 13 02 F6 | 	mov	arg01, local01
204bc     E4 13 06 F1 | 	add	arg01, #484
204c0     B9 A0 B0 FF 
204c4     09 E5 68 FC | 	wrlong	##1631679090, arg01
204c8     0F 13 02 F6 | 	mov	arg01, local01
204cc     E8 13 06 F1 | 	add	arg01, #488
204d0     20 1E 86 F1 | 	sub	local01, #32
204d4     0F 15 02 FB | 	rdlong	arg02, local01
204d8     09 15 62 FC | 	wrlong	arg02, arg01
204dc     20 1E 06 F1 | 	add	local01, #32
204e0     0F 13 02 F6 | 	mov	arg01, local01
204e4     EC 13 06 F1 | 	add	arg01, #492
204e8     24 1E 86 F1 | 	sub	local01, #36
204ec     0F 15 02 FB | 	rdlong	arg02, local01
204f0     09 15 62 FC | 	wrlong	arg02, arg01
204f4     10 1E 06 F1 | 	add	local01, #16
204f8     0F 17 02 FB | 	rdlong	arg03, local01
204fc     01 16 06 F1 | 	add	arg03, #1
20500     10 1E 06 F1 | 	add	local01, #16
20504     0F 17 62 FC | 	wrlong	arg03, local01
20508     2F 1E 86 F1 | 	sub	local01, #47
2050c     0F 13 C2 FA | 	rdbyte	arg01, local01
20510     33 1E 06 F1 | 	add	local01, #51
20514     0F 15 02 F6 | 	mov	arg02, local01
20518     01 18 06 F6 | 	mov	arg04, #1
2051c     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
20520     30 1E 86 F1 | 	sub	local01, #48
20524     0F 01 48 FC | 	wrbyte	#0, local01
20528     04 1E 86 F1 | 	sub	local01, #4
2052c                 | LR__3360
2052c     01 1E 06 F1 | 	add	local01, #1
20530     0F 13 C2 FA | 	rdbyte	arg01, local01
20534     00 14 06 F6 | 	mov	arg02, #0
20538     00 16 06 F6 | 	mov	arg03, #0
2053c     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
20540     00 FA 0D F2 | 	cmp	result1, #0 wz
20544     01 20 06 56 |  if_ne	mov	local02, #1
20548                 | LR__3361
20548                 | ' 	}
20548                 | ' 
20548                 | ' 	return res;
20548     10 FB 01 F6 | 	mov	result1, local02
2054c     A7 F0 03 F6 | 	mov	ptra, fp
20550     B2 00 A0 FD | 	call	#popregs_
20554                 | _fatfs_cc_sync_fs_ret
20554     2D 00 64 FD | 	ret
20558                 | 
20558                 | _fatfs_cc_clst2sect
20558     02 14 86 F1 | 	sub	arg02, #2
2055c     18 12 06 F1 | 	add	arg01, #24
20560     09 01 02 FB | 	rdlong	_var01, arg01
20564     18 12 86 F1 | 	sub	arg01, #24
20568     02 00 86 F1 | 	sub	_var01, #2
2056c     00 15 12 F2 | 	cmp	arg02, _var01 wc
20570     00 FA 05 36 |  if_ae	mov	result1, #0
20574     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
20578     0A 12 06 F1 | 	add	arg01, #10
2057c     09 01 E2 FA | 	rdword	_var01, arg01
20580     0A 01 02 FD | 	qmul	_var01, arg02
20584                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
20584     22 12 06 F1 | 	add	arg01, #34
20588     09 FB 01 FB | 	rdlong	result1, arg01
2058c     18 00 62 FD | 	getqx	_var01
20590     00 FB 01 F1 | 	add	result1, _var01
20594                 | _fatfs_cc_clst2sect_ret
20594     2D 00 64 FD | 	ret
20598                 | 
20598                 | _fatfs_cc_get_fat
20598     07 4A 05 F6 | 	mov	COUNT_, #7
2059c     A8 00 A0 FD | 	call	#pushregs_
205a0     0A 1F 02 F6 | 	mov	local01, arg02
205a4     09 21 02 FB | 	rdlong	local02, arg01
205a8     02 1E 16 F2 | 	cmp	local01, #2 wc
205ac     14 00 90 CD |  if_b	jmp	#LR__3370
205b0     18 20 06 F1 | 	add	local02, #24
205b4     10 23 02 FB | 	rdlong	local03, local02
205b8     18 20 86 F1 | 	sub	local02, #24
205bc     11 1F 12 F2 | 	cmp	local01, local03 wc
205c0     08 00 90 CD |  if_b	jmp	#LR__3371
205c4                 | LR__3370
205c4     01 24 06 F6 | 	mov	local04, #1
205c8     60 01 90 FD | 	jmp	#LR__3378
205cc                 | LR__3371
205cc     01 24 66 F6 | 	neg	local04, #1
205d0                 | ' 		val = 0xFFFFFFFF;
205d0                 | ' 
205d0                 | ' 		switch (fs->fs_type) {
205d0     10 27 C2 FA | 	rdbyte	local05, local02
205d4     01 26 86 F1 | 	sub	local05, #1
205d8     03 26 26 F3 | 	fle	local05, #3
205dc     30 26 62 FD | 	jmprel	local05
205e0                 | LR__3372
205e0     0C 00 90 FD | 	jmp	#LR__3373
205e4     B8 00 90 FD | 	jmp	#LR__3374
205e8     F8 00 90 FD | 	jmp	#LR__3375
205ec     38 01 90 FD | 	jmp	#LR__3376
205f0                 | LR__3373
205f0     0F 27 02 F6 | 	mov	local05, local01
205f4     0F 13 02 F6 | 	mov	arg01, local01
205f8     01 12 46 F0 | 	shr	arg01, #1
205fc     09 27 02 F1 | 	add	local05, arg01
20600     10 13 02 F6 | 	mov	arg01, local02
20604     13 29 02 F6 | 	mov	local06, local05
20608     09 28 46 F0 | 	shr	local06, #9
2060c     24 20 06 F1 | 	add	local02, #36
20610     10 15 02 FB | 	rdlong	arg02, local02
20614     24 20 86 F1 | 	sub	local02, #36
20618     14 15 02 F1 | 	add	arg02, local06
2061c     C0 FD BF FD | 	call	#_fatfs_cc_move_window
20620     00 FA 0D F2 | 	cmp	result1, #0 wz
20624     04 01 90 5D |  if_ne	jmp	#LR__3377
20628     13 29 02 F6 | 	mov	local06, local05
2062c     FF 29 06 F5 | 	and	local06, #511
20630     34 20 06 F1 | 	add	local02, #52
20634     10 29 02 F1 | 	add	local06, local02
20638     14 2B C2 FA | 	rdbyte	local07, local06
2063c     34 20 86 F1 | 	sub	local02, #52
20640     10 13 02 F6 | 	mov	arg01, local02
20644     01 26 06 F1 | 	add	local05, #1
20648     13 29 02 F6 | 	mov	local06, local05
2064c     09 28 46 F0 | 	shr	local06, #9
20650     24 20 06 F1 | 	add	local02, #36
20654     10 15 02 FB | 	rdlong	arg02, local02
20658     24 20 86 F1 | 	sub	local02, #36
2065c     14 15 02 F1 | 	add	arg02, local06
20660     7C FD BF FD | 	call	#_fatfs_cc_move_window
20664     00 FA 0D F2 | 	cmp	result1, #0 wz
20668     C0 00 90 5D |  if_ne	jmp	#LR__3377
2066c     FF 27 06 F5 | 	and	local05, #511
20670     34 20 06 F1 | 	add	local02, #52
20674     10 27 02 F1 | 	add	local05, local02
20678     13 29 C2 FA | 	rdbyte	local06, local05
2067c     08 28 66 F0 | 	shl	local06, #8
20680     14 2B 42 F5 | 	or	local07, local06
20684     01 1E CE F7 | 	test	local01, #1 wz
20688     04 2A 46 50 |  if_ne	shr	local07, #4
2068c     15 23 02 56 |  if_ne	mov	local03, local07
20690     0B 2A 46 A7 |  if_e	zerox	local07, #11
20694     15 23 02 A6 |  if_e	mov	local03, local07
20698     11 25 02 F6 | 	mov	local04, local03
2069c                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2069c                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2069c                 | ' 			break;
2069c     8C 00 90 FD | 	jmp	#LR__3377
206a0                 | LR__3374
206a0     10 13 02 F6 | 	mov	arg01, local02
206a4     0F 29 02 F6 | 	mov	local06, local01
206a8     08 28 46 F0 | 	shr	local06, #8
206ac     24 20 06 F1 | 	add	local02, #36
206b0     10 15 02 FB | 	rdlong	arg02, local02
206b4     24 20 86 F1 | 	sub	local02, #36
206b8     14 15 02 F1 | 	add	arg02, local06
206bc     20 FD BF FD | 	call	#_fatfs_cc_move_window
206c0     00 FA 0D F2 | 	cmp	result1, #0 wz
206c4     64 00 90 5D |  if_ne	jmp	#LR__3377
206c8     34 20 06 F1 | 	add	local02, #52
206cc     01 1E 66 F0 | 	shl	local01, #1
206d0     FF 1F 06 F5 | 	and	local01, #511
206d4     0F 21 02 F1 | 	add	local02, local01
206d8                 | ' {
206d8                 | ' 
206d8                 | ' 	return *((WORD*)ptr);
206d8     10 FB E1 FA | 	rdword	result1, local02
206dc     FD 24 32 F9 | 	getword	local04, result1, #0
206e0                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
206e0                 | ' 			break;
206e0     48 00 90 FD | 	jmp	#LR__3377
206e4                 | LR__3375
206e4     10 13 02 F6 | 	mov	arg01, local02
206e8     0F 29 02 F6 | 	mov	local06, local01
206ec     07 28 46 F0 | 	shr	local06, #7
206f0     24 20 06 F1 | 	add	local02, #36
206f4     10 15 02 FB | 	rdlong	arg02, local02
206f8     24 20 86 F1 | 	sub	local02, #36
206fc     14 15 02 F1 | 	add	arg02, local06
20700     DC FC BF FD | 	call	#_fatfs_cc_move_window
20704     00 FA 0D F2 | 	cmp	result1, #0 wz
20708     20 00 90 5D |  if_ne	jmp	#LR__3377
2070c     34 20 06 F1 | 	add	local02, #52
20710     02 1E 66 F0 | 	shl	local01, #2
20714     FF 1F 06 F5 | 	and	local01, #511
20718     0F 21 02 F1 | 	add	local02, local01
2071c                 | ' {
2071c                 | ' 
2071c                 | ' 	return *((DWORD*)ptr);
2071c     10 25 02 FB | 	rdlong	local04, local02
20720     7C 24 06 F4 | 	bitl	local04, #124
20724                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
20724                 | ' 			break;
20724     04 00 90 FD | 	jmp	#LR__3377
20728                 | LR__3376
20728     01 24 06 F6 | 	mov	local04, #1
2072c                 | LR__3377
2072c                 | LR__3378
2072c                 | ' 			val = 1;
2072c                 | ' 		}
2072c                 | ' 	}
2072c                 | ' 
2072c                 | ' 	return val;
2072c     12 FB 01 F6 | 	mov	result1, local04
20730     A7 F0 03 F6 | 	mov	ptra, fp
20734     B2 00 A0 FD | 	call	#popregs_
20738                 | _fatfs_cc_get_fat_ret
20738     2D 00 64 FD | 	ret
2073c                 | 
2073c                 | _fatfs_cc_put_fat
2073c     08 4A 05 F6 | 	mov	COUNT_, #8
20740     A8 00 A0 FD | 	call	#pushregs_
20744     09 1F 02 F6 | 	mov	local01, arg01
20748     0A 21 02 F6 | 	mov	local02, arg02
2074c     0B 23 02 F6 | 	mov	local03, arg03
20750     02 24 06 F6 | 	mov	local04, #2
20754     02 20 16 F2 | 	cmp	local02, #2 wc
20758     E0 01 90 CD |  if_b	jmp	#LR__3387
2075c     18 1E 06 F1 | 	add	local01, #24
20760     0F 27 02 FB | 	rdlong	local05, local01
20764     18 1E 86 F1 | 	sub	local01, #24
20768     13 21 12 F2 | 	cmp	local02, local05 wc
2076c     CC 01 90 3D |  if_ae	jmp	#LR__3387
20770                 | ' 		switch (fs->fs_type) {
20770     0F 29 C2 FA | 	rdbyte	local06, local01
20774     01 28 86 F1 | 	sub	local06, #1
20778     03 28 26 F3 | 	fle	local06, #3
2077c     30 28 62 FD | 	jmprel	local06
20780                 | LR__3380
20780     0C 00 90 FD | 	jmp	#LR__3381
20784     F8 00 90 FD | 	jmp	#LR__3384
20788     40 01 90 FD | 	jmp	#LR__3385
2078c     AC 01 90 FD | 	jmp	#LR__3386
20790                 | LR__3381
20790     10 2B 02 F6 | 	mov	local07, local02
20794     10 27 02 F6 | 	mov	local05, local02
20798     01 26 46 F0 | 	shr	local05, #1
2079c     13 2B 02 F1 | 	add	local07, local05
207a0     0F 13 02 F6 | 	mov	arg01, local01
207a4     15 29 02 F6 | 	mov	local06, local07
207a8     09 28 46 F0 | 	shr	local06, #9
207ac     24 1E 06 F1 | 	add	local01, #36
207b0     0F 15 02 FB | 	rdlong	arg02, local01
207b4     24 1E 86 F1 | 	sub	local01, #36
207b8     14 15 02 F1 | 	add	arg02, local06
207bc     20 FC BF FD | 	call	#_fatfs_cc_move_window
207c0     FD 24 0A F6 | 	mov	local04, result1 wz
207c4     74 01 90 5D |  if_ne	jmp	#LR__3386
207c8     34 1E 06 F1 | 	add	local01, #52
207cc     0F 2D 02 F6 | 	mov	local08, local01
207d0     15 27 02 F6 | 	mov	local05, local07
207d4     FF 27 06 F5 | 	and	local05, #511
207d8     13 2D 02 F1 | 	add	local08, local05
207dc     01 20 CE F7 | 	test	local02, #1 wz
207e0     34 1E 86 F1 | 	sub	local01, #52
207e4     01 2A 06 F1 | 	add	local07, #1
207e8     18 00 90 AD |  if_e	jmp	#LR__3382
207ec     16 27 C2 FA | 	rdbyte	local05, local08
207f0     13 27 42 F8 | 	getnib	local05, local05, #0
207f4     11 29 E2 F8 | 	getbyte	local06, local03, #0
207f8     04 28 66 F0 | 	shl	local06, #4
207fc     14 27 42 F5 | 	or	local05, local06
20800     04 00 90 FD | 	jmp	#LR__3383
20804                 | LR__3382
20804     11 27 02 F6 | 	mov	local05, local03
20808                 | LR__3383
20808     16 27 42 FC | 	wrbyte	local05, local08
2080c     03 1E 06 F1 | 	add	local01, #3
20810     0F 03 48 FC | 	wrbyte	#1, local01
20814     03 1E 86 F1 | 	sub	local01, #3
20818     0F 13 02 F6 | 	mov	arg01, local01
2081c     15 2D 02 F6 | 	mov	local08, local07
20820     09 2C 46 F0 | 	shr	local08, #9
20824     24 1E 06 F1 | 	add	local01, #36
20828     0F 15 02 FB | 	rdlong	arg02, local01
2082c     24 1E 86 F1 | 	sub	local01, #36
20830     16 15 02 F1 | 	add	arg02, local08
20834     A8 FB BF FD | 	call	#_fatfs_cc_move_window
20838     FD 24 0A F6 | 	mov	local04, result1 wz
2083c     FC 00 90 5D |  if_ne	jmp	#LR__3386
20840     34 1E 06 F1 | 	add	local01, #52
20844     0F 2D 02 F6 | 	mov	local08, local01
20848     FF 2B 06 F5 | 	and	local07, #511
2084c     15 2D 02 F1 | 	add	local08, local07
20850     01 20 CE F7 | 	test	local02, #1 wz
20854     04 22 46 50 |  if_ne	shr	local03, #4
20858     11 27 02 56 |  if_ne	mov	local05, local03
2085c     16 27 C2 AA |  if_e	rdbyte	local05, local08
20860     F0 26 06 A5 |  if_e	and	local05, #240
20864     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
20868     11 23 42 A8 |  if_e	getnib	local03, local03, #0
2086c     11 27 42 A5 |  if_e	or	local05, local03
20870     16 27 42 FC | 	wrbyte	local05, local08
20874     31 1E 86 F1 | 	sub	local01, #49
20878     0F 03 48 FC | 	wrbyte	#1, local01
2087c                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2087c                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2087c                 | ' 			fs->wflag = 1;
2087c                 | ' 			break;
2087c     BC 00 90 FD | 	jmp	#LR__3386
20880                 | LR__3384
20880     0F 13 02 F6 | 	mov	arg01, local01
20884     10 2D 02 F6 | 	mov	local08, local02
20888     08 2C 46 F0 | 	shr	local08, #8
2088c     24 1E 06 F1 | 	add	local01, #36
20890     0F 15 02 FB | 	rdlong	arg02, local01
20894     24 1E 86 F1 | 	sub	local01, #36
20898     16 15 02 F1 | 	add	arg02, local08
2089c     40 FB BF FD | 	call	#_fatfs_cc_move_window
208a0     FD 24 0A F6 | 	mov	local04, result1 wz
208a4     94 00 90 5D |  if_ne	jmp	#LR__3386
208a8     34 1E 06 F1 | 	add	local01, #52
208ac     0F 13 02 F6 | 	mov	arg01, local01
208b0     01 20 66 F0 | 	shl	local02, #1
208b4     FF 21 06 F5 | 	and	local02, #511
208b8     10 13 02 F1 | 	add	arg01, local02
208bc     09 23 52 FC | 	wrword	local03, arg01
208c0     31 1E 86 F1 | 	sub	local01, #49
208c4     0F 03 48 FC | 	wrbyte	#1, local01
208c8                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
208c8                 | ' 			fs->wflag = 1;
208c8                 | ' 			break;
208c8     70 00 90 FD | 	jmp	#LR__3386
208cc                 | LR__3385
208cc     0F 13 02 F6 | 	mov	arg01, local01
208d0     10 2D 02 F6 | 	mov	local08, local02
208d4     07 2C 46 F0 | 	shr	local08, #7
208d8     24 1E 06 F1 | 	add	local01, #36
208dc     0F 15 02 FB | 	rdlong	arg02, local01
208e0     24 1E 86 F1 | 	sub	local01, #36
208e4     16 15 02 F1 | 	add	arg02, local08
208e8     F4 FA BF FD | 	call	#_fatfs_cc_move_window
208ec     FD 24 0A F6 | 	mov	local04, result1 wz
208f0     48 00 90 5D |  if_ne	jmp	#LR__3386
208f4     7C 22 06 F4 | 	bitl	local03, #124
208f8     34 1E 06 F1 | 	add	local01, #52
208fc     10 2D 02 F6 | 	mov	local08, local02
20900     02 2C 66 F0 | 	shl	local08, #2
20904     FF 2D 06 F5 | 	and	local08, #511
20908     0F 13 02 F6 | 	mov	arg01, local01
2090c     16 13 02 F1 | 	add	arg01, local08
20910                 | ' {
20910                 | ' 
20910                 | ' 	return *((DWORD*)ptr);
20910     09 2D 02 FB | 	rdlong	local08, arg01
20914     00 00 78 FF 
20918     00 2C 06 F5 | 	and	local08, ##-268435456
2091c     16 23 42 F5 | 	or	local03, local08
20920     0F 13 02 F6 | 	mov	arg01, local01
20924     02 20 66 F0 | 	shl	local02, #2
20928     FF 21 06 F5 | 	and	local02, #511
2092c     10 13 02 F1 | 	add	arg01, local02
20930     09 23 62 FC | 	wrlong	local03, arg01
20934     31 1E 86 F1 | 	sub	local01, #49
20938     0F 03 48 FC | 	wrbyte	#1, local01
2093c                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2093c                 | ' 			}
2093c                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2093c                 | ' 			fs->wflag = 1;
2093c                 | ' 			break;
2093c                 | LR__3386
2093c                 | LR__3387
2093c                 | ' 		}
2093c                 | ' 	}
2093c                 | ' 	return res;
2093c     12 FB 01 F6 | 	mov	result1, local04
20940     A7 F0 03 F6 | 	mov	ptra, fp
20944     B2 00 A0 FD | 	call	#popregs_
20948                 | _fatfs_cc_put_fat_ret
20948     2D 00 64 FD | 	ret
2094c                 | 
2094c                 | _fatfs_cc_remove_chain
2094c     05 4A 05 F6 | 	mov	COUNT_, #5
20950     A8 00 A0 FD | 	call	#pushregs_
20954     09 1F 02 F6 | 	mov	local01, arg01
20958     0A 21 02 F6 | 	mov	local02, arg02
2095c     0B 23 02 F6 | 	mov	local03, arg03
20960     0F 25 02 FB | 	rdlong	local04, local01
20964     02 20 16 F2 | 	cmp	local02, #2 wc
20968     14 00 90 CD |  if_b	jmp	#LR__3390
2096c     18 24 06 F1 | 	add	local04, #24
20970     12 FB 01 FB | 	rdlong	result1, local04
20974     18 24 86 F1 | 	sub	local04, #24
20978     FD 20 12 F2 | 	cmp	local02, result1 wc
2097c     08 00 90 CD |  if_b	jmp	#LR__3391
20980                 | LR__3390
20980     02 FA 05 F6 | 	mov	result1, #2
20984     CC 00 90 FD | 	jmp	#LR__3396
20988                 | LR__3391
20988     00 22 0E F2 | 	cmp	local03, #0 wz
2098c     18 00 90 AD |  if_e	jmp	#LR__3392
20990     11 15 02 F6 | 	mov	arg02, local03
20994     12 13 02 F6 | 	mov	arg01, local04
20998     01 16 66 F6 | 	neg	arg03, #1
2099c     9C FD BF FD | 	call	#_fatfs_cc_put_fat
209a0     00 FA 0D F2 | 	cmp	result1, #0 wz
209a4     AC 00 90 5D |  if_ne	jmp	#LR__3396
209a8                 | LR__3392
209a8                 | ' 	}
209a8                 | ' 
209a8                 | ' 
209a8                 | ' 	do {
209a8                 | LR__3393
209a8     10 15 02 F6 | 	mov	arg02, local02
209ac     0F 13 02 F6 | 	mov	arg01, local01
209b0     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
209b4     FD 26 0A F6 | 	mov	local05, result1 wz
209b8     94 00 90 AD |  if_e	jmp	#LR__3395
209bc     01 26 0E F2 | 	cmp	local05, #1 wz
209c0     02 FA 05 A6 |  if_e	mov	result1, #2
209c4     8C 00 90 AD |  if_e	jmp	#LR__3396
209c8     FF FF 7F FF 
209cc     FF 27 0E F2 | 	cmp	local05, ##-1 wz
209d0     01 FA 05 A6 |  if_e	mov	result1, #1
209d4     7C 00 90 AD |  if_e	jmp	#LR__3396
209d8     10 15 02 F6 | 	mov	arg02, local02
209dc     12 13 02 F6 | 	mov	arg01, local04
209e0     00 16 06 F6 | 	mov	arg03, #0
209e4     54 FD BF FD | 	call	#_fatfs_cc_put_fat
209e8     FD 22 0A F6 | 	mov	local03, result1 wz
209ec     11 FB 01 56 |  if_ne	mov	result1, local03
209f0     60 00 90 5D |  if_ne	jmp	#LR__3396
209f4     18 24 06 F1 | 	add	local04, #24
209f8     12 23 02 FB | 	rdlong	local03, local04
209fc     02 22 86 F1 | 	sub	local03, #2
20a00     04 24 86 F1 | 	sub	local04, #4
20a04     12 21 02 FB | 	rdlong	local02, local04
20a08     14 24 86 F1 | 	sub	local04, #20
20a0c     11 21 12 F2 | 	cmp	local02, local03 wc
20a10     24 00 90 3D |  if_ae	jmp	#LR__3394
20a14     14 24 06 F1 | 	add	local04, #20
20a18     12 23 02 FB | 	rdlong	local03, local04
20a1c     01 22 06 F1 | 	add	local03, #1
20a20     12 23 62 FC | 	wrlong	local03, local04
20a24     10 24 86 F1 | 	sub	local04, #16
20a28     12 23 C2 FA | 	rdbyte	local03, local04
20a2c     01 22 46 F5 | 	or	local03, #1
20a30     12 23 42 FC | 	wrbyte	local03, local04
20a34     04 24 86 F1 | 	sub	local04, #4
20a38                 | LR__3394
20a38     13 21 02 F6 | 	mov	local02, local05
20a3c     18 24 06 F1 | 	add	local04, #24
20a40     12 27 02 FB | 	rdlong	local05, local04
20a44     18 24 86 F1 | 	sub	local04, #24
20a48     13 21 12 F2 | 	cmp	local02, local05 wc
20a4c     58 FF 9F CD |  if_b	jmp	#LR__3393
20a50                 | LR__3395
20a50                 | ' #line 1500 "ff.c"
20a50                 | ' 	return FR_OK;
20a50     00 FA 05 F6 | 	mov	result1, #0
20a54                 | LR__3396
20a54     A7 F0 03 F6 | 	mov	ptra, fp
20a58     B2 00 A0 FD | 	call	#popregs_
20a5c                 | _fatfs_cc_remove_chain_ret
20a5c     2D 00 64 FD | 	ret
20a60                 | 
20a60                 | _fatfs_cc_create_chain
20a60     09 4A 05 F6 | 	mov	COUNT_, #9
20a64     A8 00 A0 FD | 	call	#pushregs_
20a68     09 1F 02 F6 | 	mov	local01, arg01
20a6c     0A 21 0A F6 | 	mov	local02, arg02 wz
20a70     0F 23 02 FB | 	rdlong	local03, local01
20a74     28 00 90 5D |  if_ne	jmp	#LR__3400
20a78     10 22 06 F1 | 	add	local03, #16
20a7c     11 25 0A FB | 	rdlong	local04, local03 wz
20a80     10 22 86 F1 | 	sub	local03, #16
20a84     18 22 06 51 |  if_ne	add	local03, #24
20a88     11 27 02 5B |  if_ne	rdlong	local05, local03
20a8c     18 22 86 51 |  if_ne	sub	local03, #24
20a90     13 25 12 52 |  if_ne	cmp	local04, local05 wc
20a94     50 00 90 4D |  if_c_and_nz	jmp	#LR__3401
20a98     01 24 06 F6 | 	mov	local04, #1
20a9c     48 00 90 FD | 	jmp	#LR__3401
20aa0                 | LR__3400
20aa0     10 15 02 F6 | 	mov	arg02, local02
20aa4     0F 13 02 F6 | 	mov	arg01, local01
20aa8     EC FA BF FD | 	call	#_fatfs_cc_get_fat
20aac     FD 24 02 F6 | 	mov	local04, result1
20ab0     02 24 16 F2 | 	cmp	local04, #2 wc
20ab4     01 FA 05 C6 |  if_b	mov	result1, #1
20ab8     BC 01 90 CD |  if_b	jmp	#LR__3411
20abc     FF FF 7F FF 
20ac0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
20ac4     12 FB 01 A6 |  if_e	mov	result1, local04
20ac8     AC 01 90 AD |  if_e	jmp	#LR__3411
20acc     18 22 06 F1 | 	add	local03, #24
20ad0     11 27 02 FB | 	rdlong	local05, local03
20ad4     18 22 86 F1 | 	sub	local03, #24
20ad8     13 25 12 F2 | 	cmp	local04, local05 wc
20adc     12 FB 01 C6 |  if_b	mov	result1, local04
20ae0     94 01 90 CD |  if_b	jmp	#LR__3411
20ae4     10 25 02 F6 | 	mov	local04, local02
20ae8                 | LR__3401
20ae8     14 22 06 F1 | 	add	local03, #20
20aec     11 27 0A FB | 	rdlong	local05, local03 wz
20af0     14 22 86 F1 | 	sub	local03, #20
20af4     00 FA 05 A6 |  if_e	mov	result1, #0
20af8     7C 01 90 AD |  if_e	jmp	#LR__3411
20afc     00 28 06 F6 | 	mov	local06, #0
20b00     10 25 0A F2 | 	cmp	local04, local02 wz
20b04     74 00 90 5D |  if_ne	jmp	#LR__3404
20b08     12 29 02 F6 | 	mov	local06, local04
20b0c     01 28 06 F1 | 	add	local06, #1
20b10     18 22 06 F1 | 	add	local03, #24
20b14     11 27 02 FB | 	rdlong	local05, local03
20b18     18 22 86 F1 | 	sub	local03, #24
20b1c     13 29 12 F2 | 	cmp	local06, local05 wc
20b20     02 28 06 36 |  if_ae	mov	local06, #2
20b24     14 15 02 F6 | 	mov	arg02, local06
20b28     0F 13 02 F6 | 	mov	arg01, local01
20b2c     68 FA BF FD | 	call	#_fatfs_cc_get_fat
20b30     FD 26 02 F6 | 	mov	local05, result1
20b34     01 26 0E F2 | 	cmp	local05, #1 wz
20b38     FF FF 7F 5F 
20b3c     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
20b40     13 FB 01 A6 |  if_e	mov	result1, local05
20b44     30 01 90 AD |  if_e	jmp	#LR__3411
20b48     00 26 0E F2 | 	cmp	local05, #0 wz
20b4c     2C 00 90 AD |  if_e	jmp	#LR__3403
20b50     10 22 06 F1 | 	add	local03, #16
20b54     11 2B 02 FB | 	rdlong	local07, local03
20b58     10 22 86 F1 | 	sub	local03, #16
20b5c     02 2A 16 F2 | 	cmp	local07, #2 wc
20b60     14 00 90 CD |  if_b	jmp	#LR__3402
20b64     18 22 06 F1 | 	add	local03, #24
20b68     11 27 02 FB | 	rdlong	local05, local03
20b6c     18 22 86 F1 | 	sub	local03, #24
20b70     13 2B 12 F2 | 	cmp	local07, local05 wc
20b74     15 25 02 C6 |  if_b	mov	local04, local07
20b78                 | LR__3402
20b78     00 28 06 F6 | 	mov	local06, #0
20b7c                 | LR__3403
20b7c                 | LR__3404
20b7c     00 28 0E F2 | 	cmp	local06, #0 wz
20b80     60 00 90 5D |  if_ne	jmp	#LR__3407
20b84     12 29 02 F6 | 	mov	local06, local04
20b88                 | ' 			ncl = scl;
20b88                 | ' 			for (;;) {
20b88                 | LR__3405
20b88     01 28 06 F1 | 	add	local06, #1
20b8c     18 22 06 F1 | 	add	local03, #24
20b90     11 27 02 FB | 	rdlong	local05, local03
20b94     18 22 86 F1 | 	sub	local03, #24
20b98     13 29 12 F2 | 	cmp	local06, local05 wc
20b9c     02 28 06 36 |  if_ae	mov	local06, #2
20ba0     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
20ba4     00 FA 05 16 |  if_a	mov	result1, #0
20ba8     CC 00 90 1D |  if_a	jmp	#LR__3411
20bac     14 15 02 F6 | 	mov	arg02, local06
20bb0     0F 13 02 F6 | 	mov	arg01, local01
20bb4     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
20bb8     FD 2A 0A F6 | 	mov	local07, result1 wz
20bbc     24 00 90 AD |  if_e	jmp	#LR__3406
20bc0     01 2A 0E F2 | 	cmp	local07, #1 wz
20bc4     FF FF 7F 5F 
20bc8     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
20bcc     15 FB 01 A6 |  if_e	mov	result1, local07
20bd0     A4 00 90 AD |  if_e	jmp	#LR__3411
20bd4     12 29 0A F2 | 	cmp	local06, local04 wz
20bd8     00 FA 05 A6 |  if_e	mov	result1, #0
20bdc     98 00 90 AD |  if_e	jmp	#LR__3411
20be0     A4 FF 9F FD | 	jmp	#LR__3405
20be4                 | LR__3406
20be4                 | LR__3407
20be4     11 13 02 F6 | 	mov	arg01, local03
20be8     14 15 02 F6 | 	mov	arg02, local06
20bec     01 16 66 F6 | 	neg	arg03, #1
20bf0     48 FB BF FD | 	call	#_fatfs_cc_put_fat
20bf4     FD 2C 0A F6 | 	mov	local08, result1 wz
20bf8     1C 00 90 5D |  if_ne	jmp	#LR__3408
20bfc     00 20 0E F2 | 	cmp	local02, #0 wz
20c00     14 00 90 AD |  if_e	jmp	#LR__3408
20c04     11 13 02 F6 | 	mov	arg01, local03
20c08     10 15 02 F6 | 	mov	arg02, local02
20c0c     14 17 02 F6 | 	mov	arg03, local06
20c10     28 FB BF FD | 	call	#_fatfs_cc_put_fat
20c14     FD 2C 02 F6 | 	mov	local08, result1
20c18                 | LR__3408
20c18     00 2C 0E F2 | 	cmp	local08, #0 wz
20c1c     4C 00 90 5D |  if_ne	jmp	#LR__3409
20c20     10 22 06 F1 | 	add	local03, #16
20c24     11 29 62 FC | 	wrlong	local06, local03
20c28     08 22 06 F1 | 	add	local03, #8
20c2c     11 27 02 FB | 	rdlong	local05, local03
20c30     02 26 86 F1 | 	sub	local05, #2
20c34     04 22 86 F1 | 	sub	local03, #4
20c38     11 2F 02 FB | 	rdlong	local09, local03
20c3c     14 22 86 F1 | 	sub	local03, #20
20c40     13 2F 1A F2 | 	cmp	local09, local05 wcz
20c44     14 22 06 E1 |  if_be	add	local03, #20
20c48     11 2F 02 EB |  if_be	rdlong	local09, local03
20c4c     01 2E 86 E1 |  if_be	sub	local09, #1
20c50     11 2F 62 EC |  if_be	wrlong	local09, local03
20c54     14 22 86 E1 |  if_be	sub	local03, #20
20c58     04 22 06 F1 | 	add	local03, #4
20c5c     11 27 C2 FA | 	rdbyte	local05, local03
20c60     01 26 46 F5 | 	or	local05, #1
20c64     11 27 42 FC | 	wrbyte	local05, local03
20c68     08 00 90 FD | 	jmp	#LR__3410
20c6c                 | LR__3409
20c6c     01 2C 0E F2 | 	cmp	local08, #1 wz
20c70     01 28 C6 F6 | 	negz	local06, #1
20c74                 | LR__3410
20c74                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
20c74                 | ' 	}
20c74                 | ' 
20c74                 | ' 	return ncl;
20c74     14 FB 01 F6 | 	mov	result1, local06
20c78                 | LR__3411
20c78     A7 F0 03 F6 | 	mov	ptra, fp
20c7c     B2 00 A0 FD | 	call	#popregs_
20c80                 | _fatfs_cc_create_chain_ret
20c80     2D 00 64 FD | 	ret
20c84                 | 
20c84                 | _fatfs_cc_dir_clear
20c84     06 4A 05 F6 | 	mov	COUNT_, #6
20c88     A8 00 A0 FD | 	call	#pushregs_
20c8c     09 1F 02 F6 | 	mov	local01, arg01
20c90     0A 21 02 F6 | 	mov	local02, arg02
20c94     0F 13 02 F6 | 	mov	arg01, local01
20c98     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
20c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
20ca0     01 FA 05 56 |  if_ne	mov	result1, #1
20ca4     90 00 90 5D |  if_ne	jmp	#LR__3422
20ca8     0F 13 02 F6 | 	mov	arg01, local01
20cac     10 15 02 F6 | 	mov	arg02, local02
20cb0     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
20cb4     FD 22 02 F6 | 	mov	local03, result1
20cb8     30 1E 06 F1 | 	add	local01, #48
20cbc     0F 23 62 FC | 	wrlong	local03, local01
20cc0     04 1E 06 F1 | 	add	local01, #4
20cc4     0F 13 02 F6 | 	mov	arg01, local01
20cc8     00 14 06 F6 | 	mov	arg02, #0
20ccc     09 16 C6 F9 | 	decod	arg03, #9
20cd0     98 00 A0 FD | 	call	#\builtin_bytefill_
20cd4     0F 25 02 F6 | 	mov	local04, local01
20cd8                 | ' #line 1667 "ff.c"
20cd8                 | ' 	{
20cd8                 | ' 		ibuf = fs->win; szb = 1;
20cd8                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
20cd8     00 26 06 F6 | 	mov	local05, #0
20cdc     34 1E 86 F1 | 	sub	local01, #52
20ce0                 | LR__3420
20ce0     0A 1E 06 F1 | 	add	local01, #10
20ce4     0F 29 E2 FA | 	rdword	local06, local01
20ce8     0A 1E 86 F1 | 	sub	local01, #10
20cec     14 27 12 F2 | 	cmp	local05, local06 wc
20cf0     2C 00 90 3D |  if_ae	jmp	#LR__3421
20cf4     01 1E 06 F1 | 	add	local01, #1
20cf8     0F 13 C2 FA | 	rdbyte	arg01, local01
20cfc     01 1E 86 F1 | 	sub	local01, #1
20d00     12 15 02 F6 | 	mov	arg02, local04
20d04     11 17 02 F6 | 	mov	arg03, local03
20d08     13 17 02 F1 | 	add	arg03, local05
20d0c     01 18 06 F6 | 	mov	arg04, #1
20d10     9C EF BF FD | 	call	#_fatfs_cc_disk_write
20d14     00 FA 0D F2 | 	cmp	result1, #0 wz
20d18     01 26 06 A1 |  if_e	add	local05, #1
20d1c     C0 FF 9F AD |  if_e	jmp	#LR__3420
20d20                 | LR__3421
20d20                 | ' 	}
20d20                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
20d20     0A 1E 06 F1 | 	add	local01, #10
20d24     0F 25 E2 FA | 	rdword	local04, local01
20d28     12 27 0A F2 | 	cmp	local05, local04 wz
20d2c     00 28 06 A6 |  if_e	mov	local06, #0
20d30     01 28 06 56 |  if_ne	mov	local06, #1
20d34     14 FB 01 F6 | 	mov	result1, local06
20d38                 | LR__3422
20d38     A7 F0 03 F6 | 	mov	ptra, fp
20d3c     B2 00 A0 FD | 	call	#popregs_
20d40                 | _fatfs_cc_dir_clear_ret
20d40     2D 00 64 FD | 	ret
20d44                 | 
20d44                 | _fatfs_cc_dir_sdi
20d44     06 4A 05 F6 | 	mov	COUNT_, #6
20d48     A8 00 A0 FD | 	call	#pushregs_
20d4c     09 1F 02 F6 | 	mov	local01, arg01
20d50     0A 21 02 F6 | 	mov	local02, arg02
20d54     0F 23 02 FB | 	rdlong	local03, local01
20d58     00 10 00 FF 
20d5c     00 20 16 F2 | 	cmp	local02, ##2097152 wc
20d60     1F 20 CE C7 |  if_b	test	local02, #31 wz
20d64                 | ' 		return FR_INT_ERR;
20d64     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
20d68     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3436
20d6c     10 1E 06 F1 | 	add	local01, #16
20d70     0F 21 62 FC | 	wrlong	local02, local01
20d74     08 1E 86 F1 | 	sub	local01, #8
20d78     0F 25 0A FB | 	rdlong	local04, local01 wz
20d7c     08 1E 86 F1 | 	sub	local01, #8
20d80     11 27 C2 AA |  if_e	rdbyte	local05, local03
20d84     03 26 16 A2 |  if_e	cmp	local05, #3 wc
20d88     28 22 06 21 |  if_nc_and_z	add	local03, #40
20d8c     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
20d90     28 22 86 21 |  if_nc_and_z	sub	local03, #40
20d94     00 24 0E F2 | 	cmp	local04, #0 wz
20d98     3C 00 90 5D |  if_ne	jmp	#LR__3430
20d9c     10 27 02 F6 | 	mov	local05, local02
20da0     05 26 46 F0 | 	shr	local05, #5
20da4     08 22 06 F1 | 	add	local03, #8
20da8     11 15 E2 FA | 	rdword	arg02, local03
20dac     08 22 86 F1 | 	sub	local03, #8
20db0     0A 27 12 F2 | 	cmp	local05, arg02 wc
20db4     02 FA 05 36 |  if_ae	mov	result1, #2
20db8     E4 00 90 3D |  if_ae	jmp	#LR__3436
20dbc     28 22 06 F1 | 	add	local03, #40
20dc0     11 27 02 FB | 	rdlong	local05, local03
20dc4     28 22 86 F1 | 	sub	local03, #40
20dc8     18 1E 06 F1 | 	add	local01, #24
20dcc     0F 27 62 FC | 	wrlong	local05, local01
20dd0     18 1E 86 F1 | 	sub	local01, #24
20dd4     7C 00 90 FD | 	jmp	#LR__3435
20dd8                 | LR__3430
20dd8     0A 22 06 F1 | 	add	local03, #10
20ddc     11 29 E2 FA | 	rdword	local06, local03
20de0     0A 22 86 F1 | 	sub	local03, #10
20de4     09 28 66 F0 | 	shl	local06, #9
20de8                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
20de8                 | ' 		while (ofs >= csz) {
20de8                 | LR__3431
20de8     14 21 12 F2 | 	cmp	local02, local06 wc
20dec     4C 00 90 CD |  if_b	jmp	#LR__3434
20df0     0F 13 02 F6 | 	mov	arg01, local01
20df4     12 15 02 F6 | 	mov	arg02, local04
20df8     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
20dfc     FD 24 02 F6 | 	mov	local04, result1
20e00     FF FF 7F FF 
20e04     FF 25 0E F2 | 	cmp	local04, ##-1 wz
20e08     01 FA 05 A6 |  if_e	mov	result1, #1
20e0c     90 00 90 AD |  if_e	jmp	#LR__3436
20e10     02 24 16 F2 | 	cmp	local04, #2 wc
20e14     14 00 90 CD |  if_b	jmp	#LR__3432
20e18     18 22 06 F1 | 	add	local03, #24
20e1c     11 27 02 FB | 	rdlong	local05, local03
20e20     18 22 86 F1 | 	sub	local03, #24
20e24     13 25 12 F2 | 	cmp	local04, local05 wc
20e28     08 00 90 CD |  if_b	jmp	#LR__3433
20e2c                 | LR__3432
20e2c     02 FA 05 F6 | 	mov	result1, #2
20e30     6C 00 90 FD | 	jmp	#LR__3436
20e34                 | LR__3433
20e34     14 21 82 F1 | 	sub	local02, local06
20e38     AC FF 9F FD | 	jmp	#LR__3431
20e3c                 | LR__3434
20e3c     11 13 02 F6 | 	mov	arg01, local03
20e40     12 15 02 F6 | 	mov	arg02, local04
20e44     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
20e48     18 1E 06 F1 | 	add	local01, #24
20e4c     0F FB 61 FC | 	wrlong	result1, local01
20e50     18 1E 86 F1 | 	sub	local01, #24
20e54                 | LR__3435
20e54     14 1E 06 F1 | 	add	local01, #20
20e58     0F 25 62 FC | 	wrlong	local04, local01
20e5c     04 1E 06 F1 | 	add	local01, #4
20e60     0F 27 0A FB | 	rdlong	local05, local01 wz
20e64     18 1E 86 F1 | 	sub	local01, #24
20e68     02 FA 05 A6 |  if_e	mov	result1, #2
20e6c     30 00 90 AD |  if_e	jmp	#LR__3436
20e70     10 29 02 F6 | 	mov	local06, local02
20e74     09 28 46 F0 | 	shr	local06, #9
20e78     18 1E 06 F1 | 	add	local01, #24
20e7c     0F 27 02 FB | 	rdlong	local05, local01
20e80     14 27 02 F1 | 	add	local05, local06
20e84     0F 27 62 FC | 	wrlong	local05, local01
20e88     34 22 06 F1 | 	add	local03, #52
20e8c     FF 21 06 F5 | 	and	local02, #511
20e90     10 23 02 F1 | 	add	local03, local02
20e94     04 1E 06 F1 | 	add	local01, #4
20e98     0F 23 62 FC | 	wrlong	local03, local01
20e9c                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
20e9c                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
20e9c                 | ' 
20e9c                 | ' 	return FR_OK;
20e9c     00 FA 05 F6 | 	mov	result1, #0
20ea0                 | LR__3436
20ea0     A7 F0 03 F6 | 	mov	ptra, fp
20ea4     B2 00 A0 FD | 	call	#popregs_
20ea8                 | _fatfs_cc_dir_sdi_ret
20ea8     2D 00 64 FD | 	ret
20eac                 | 
20eac                 | _fatfs_cc_dir_next
20eac     05 4A 05 F6 | 	mov	COUNT_, #5
20eb0     A8 00 A0 FD | 	call	#pushregs_
20eb4     09 1F 02 F6 | 	mov	local01, arg01
20eb8     0A 21 02 F6 | 	mov	local02, arg02
20ebc     0F 23 02 FB | 	rdlong	local03, local01
20ec0     10 1E 06 F1 | 	add	local01, #16
20ec4     0F 25 02 FB | 	rdlong	local04, local01
20ec8     10 1E 86 F1 | 	sub	local01, #16
20ecc     20 24 06 F1 | 	add	local04, #32
20ed0     00 10 00 FF 
20ed4     00 24 16 F2 | 	cmp	local04, ##2097152 wc
20ed8     18 1E 06 31 |  if_ae	add	local01, #24
20edc     0F 01 68 3C |  if_ae	wrlong	#0, local01
20ee0     18 1E 86 31 |  if_ae	sub	local01, #24
20ee4     18 1E 06 F1 | 	add	local01, #24
20ee8     0F 15 0A FB | 	rdlong	arg02, local01 wz
20eec     18 1E 86 F1 | 	sub	local01, #24
20ef0     04 FA 05 A6 |  if_e	mov	result1, #4
20ef4     64 01 90 AD |  if_e	jmp	#LR__3445
20ef8     FF 25 CE F7 | 	test	local04, #511 wz
20efc     3C 01 90 5D |  if_ne	jmp	#LR__3444
20f00     18 1E 06 F1 | 	add	local01, #24
20f04     0F 15 02 FB | 	rdlong	arg02, local01
20f08     01 14 06 F1 | 	add	arg02, #1
20f0c     0F 15 62 FC | 	wrlong	arg02, local01
20f10     04 1E 86 F1 | 	sub	local01, #4
20f14     0F 15 0A FB | 	rdlong	arg02, local01 wz
20f18     14 1E 86 F1 | 	sub	local01, #20
20f1c     2C 00 90 5D |  if_ne	jmp	#LR__3440
20f20     12 15 02 F6 | 	mov	arg02, local04
20f24     05 14 46 F0 | 	shr	arg02, #5
20f28     08 22 06 F1 | 	add	local03, #8
20f2c     11 21 E2 FA | 	rdword	local02, local03
20f30     08 22 86 F1 | 	sub	local03, #8
20f34     10 15 12 F2 | 	cmp	arg02, local02 wc
20f38     18 1E 06 31 |  if_ae	add	local01, #24
20f3c     0F 01 68 3C |  if_ae	wrlong	#0, local01
20f40                 | ' 				dp->sect = 0; return FR_NO_FILE;
20f40     04 FA 05 36 |  if_ae	mov	result1, #4
20f44     14 01 90 3D |  if_ae	jmp	#LR__3445
20f48     F0 00 90 FD | 	jmp	#LR__3443
20f4c                 | LR__3440
20f4c     12 13 02 F6 | 	mov	arg01, local04
20f50     09 12 46 F0 | 	shr	arg01, #9
20f54     0A 22 06 F1 | 	add	local03, #10
20f58     11 15 E2 FA | 	rdword	arg02, local03
20f5c     0A 22 86 F1 | 	sub	local03, #10
20f60     01 14 86 F1 | 	sub	arg02, #1
20f64     0A 13 CA F7 | 	test	arg01, arg02 wz
20f68     D0 00 90 5D |  if_ne	jmp	#LR__3442
20f6c     0F 13 02 F6 | 	mov	arg01, local01
20f70     14 1E 06 F1 | 	add	local01, #20
20f74     0F 15 02 FB | 	rdlong	arg02, local01
20f78     14 1E 86 F1 | 	sub	local01, #20
20f7c     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
20f80     FD 26 02 F6 | 	mov	local05, result1
20f84     02 26 16 F2 | 	cmp	local05, #2 wc
20f88     02 FA 05 C6 |  if_b	mov	result1, #2
20f8c     CC 00 90 CD |  if_b	jmp	#LR__3445
20f90     FF FF 7F FF 
20f94     FF 27 0E F2 | 	cmp	local05, ##-1 wz
20f98     01 FA 05 A6 |  if_e	mov	result1, #1
20f9c     BC 00 90 AD |  if_e	jmp	#LR__3445
20fa0     18 22 06 F1 | 	add	local03, #24
20fa4     11 15 02 FB | 	rdlong	arg02, local03
20fa8     18 22 86 F1 | 	sub	local03, #24
20fac     0A 27 12 F2 | 	cmp	local05, arg02 wc
20fb0     68 00 90 CD |  if_b	jmp	#LR__3441
20fb4     00 20 0E F2 | 	cmp	local02, #0 wz
20fb8     18 1E 06 A1 |  if_e	add	local01, #24
20fbc     0F 01 68 AC |  if_e	wrlong	#0, local01
20fc0                 | ' 						dp->sect = 0; return FR_NO_FILE;
20fc0     04 FA 05 A6 |  if_e	mov	result1, #4
20fc4     94 00 90 AD |  if_e	jmp	#LR__3445
20fc8     0F 13 02 F6 | 	mov	arg01, local01
20fcc     14 1E 06 F1 | 	add	local01, #20
20fd0     0F 15 02 FB | 	rdlong	arg02, local01
20fd4     14 1E 86 F1 | 	sub	local01, #20
20fd8     84 FA BF FD | 	call	#_fatfs_cc_create_chain
20fdc     FD 26 0A F6 | 	mov	local05, result1 wz
20fe0     07 FA 05 A6 |  if_e	mov	result1, #7
20fe4     74 00 90 AD |  if_e	jmp	#LR__3445
20fe8     01 26 0E F2 | 	cmp	local05, #1 wz
20fec     02 FA 05 A6 |  if_e	mov	result1, #2
20ff0     68 00 90 AD |  if_e	jmp	#LR__3445
20ff4     FF FF 7F FF 
20ff8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
20ffc     01 FA 05 A6 |  if_e	mov	result1, #1
21000     58 00 90 AD |  if_e	jmp	#LR__3445
21004     13 15 02 F6 | 	mov	arg02, local05
21008     11 13 02 F6 | 	mov	arg01, local03
2100c     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
21010     00 FA 0D F2 | 	cmp	result1, #0 wz
21014     01 FA 05 56 |  if_ne	mov	result1, #1
21018     40 00 90 5D |  if_ne	jmp	#LR__3445
2101c                 | LR__3441
2101c     14 1E 06 F1 | 	add	local01, #20
21020     0F 27 62 FC | 	wrlong	local05, local01
21024     11 13 02 F6 | 	mov	arg01, local03
21028     13 15 02 F6 | 	mov	arg02, local05
2102c     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
21030     04 1E 06 F1 | 	add	local01, #4
21034     0F FB 61 FC | 	wrlong	result1, local01
21038     18 1E 86 F1 | 	sub	local01, #24
2103c                 | LR__3442
2103c                 | LR__3443
2103c                 | LR__3444
2103c     10 1E 06 F1 | 	add	local01, #16
21040     0F 25 62 FC | 	wrlong	local04, local01
21044     34 22 06 F1 | 	add	local03, #52
21048     FF 25 06 F5 | 	and	local04, #511
2104c     12 23 02 F1 | 	add	local03, local04
21050     0C 1E 06 F1 | 	add	local01, #12
21054     0F 23 62 FC | 	wrlong	local03, local01
21058                 | ' #line 1771 "ff.c"
21058                 | ' 				}
21058                 | ' 				dp->clust = clst;
21058                 | ' 				dp->sect = clst2sect(fs, clst);
21058                 | ' 			}
21058                 | ' 		}
21058                 | ' 	}
21058                 | ' 	dp->dptr = ofs;
21058                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
21058                 | ' 
21058                 | ' 	return FR_OK;
21058     00 FA 05 F6 | 	mov	result1, #0
2105c                 | LR__3445
2105c     A7 F0 03 F6 | 	mov	ptra, fp
21060     B2 00 A0 FD | 	call	#popregs_
21064                 | _fatfs_cc_dir_next_ret
21064     2D 00 64 FD | 	ret
21068                 | 
21068                 | _fatfs_cc_dir_alloc
21068     08 4A 05 F6 | 	mov	COUNT_, #8
2106c     A8 00 A0 FD | 	call	#pushregs_
21070     09 1F 02 F6 | 	mov	local01, arg01
21074     0A 21 02 F6 | 	mov	local02, arg02
21078     0F 23 02 FB | 	rdlong	local03, local01
2107c     0F 13 02 F6 | 	mov	arg01, local01
21080     00 14 06 F6 | 	mov	arg02, #0
21084     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
21088     FD 24 0A F6 | 	mov	local04, result1 wz
2108c     70 00 90 5D |  if_ne	jmp	#LR__3454
21090     00 26 06 F6 | 	mov	local05, #0
21094                 | ' 		n = 0;
21094                 | ' 		do {
21094                 | LR__3450
21094     18 1E 06 F1 | 	add	local01, #24
21098     0F 15 02 FB | 	rdlong	arg02, local01
2109c     18 1E 86 F1 | 	sub	local01, #24
210a0     11 13 02 F6 | 	mov	arg01, local03
210a4     38 F3 BF FD | 	call	#_fatfs_cc_move_window
210a8     FD 24 0A F6 | 	mov	local04, result1 wz
210ac     50 00 90 5D |  if_ne	jmp	#LR__3453
210b0     1C 1E 06 F1 | 	add	local01, #28
210b4     0F 29 02 FB | 	rdlong	local06, local01
210b8     1C 1E 86 F1 | 	sub	local01, #28
210bc     14 29 C2 FA | 	rdbyte	local06, local06
210c0     E5 28 0E F2 | 	cmp	local06, #229 wz
210c4     1C 1E 06 51 |  if_ne	add	local01, #28
210c8     0F 2B 02 5B |  if_ne	rdlong	local07, local01
210cc     1C 1E 86 51 |  if_ne	sub	local01, #28
210d0     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
210d4     10 00 90 5D |  if_ne	jmp	#LR__3451
210d8     01 26 06 F1 | 	add	local05, #1
210dc     10 27 0A F2 | 	cmp	local05, local02 wz
210e0     1C 00 90 AD |  if_e	jmp	#LR__3453
210e4     04 00 90 FD | 	jmp	#LR__3452
210e8                 | LR__3451
210e8     00 26 06 F6 | 	mov	local05, #0
210ec                 | LR__3452
210ec     0F 13 02 F6 | 	mov	arg01, local01
210f0     01 14 06 F6 | 	mov	arg02, #1
210f4     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
210f8     FD 24 0A F6 | 	mov	local04, result1 wz
210fc     94 FF 9F AD |  if_e	jmp	#LR__3450
21100                 | LR__3453
21100                 | LR__3454
21100     04 24 0E F2 | 	cmp	local04, #4 wz
21104     07 24 06 A6 |  if_e	mov	local04, #7
21108                 | ' 	return res;
21108     12 FB 01 F6 | 	mov	result1, local04
2110c     A7 F0 03 F6 | 	mov	ptra, fp
21110     B2 00 A0 FD | 	call	#popregs_
21114                 | _fatfs_cc_dir_alloc_ret
21114     2D 00 64 FD | 	ret
21118                 | 
21118                 | _fatfs_cc_ld_clust
21118     09 01 02 F6 | 	mov	_var01, arg01
2111c     0A 13 02 F6 | 	mov	arg01, arg02
21120     1A 12 06 F1 | 	add	arg01, #26
21124                 | ' {
21124                 | ' 
21124                 | ' 	return *((WORD*)ptr);
21124     09 FB E1 FA | 	rdword	result1, arg01
21128     FD 12 32 F9 | 	getword	arg01, result1, #0
2112c     00 01 C2 FA | 	rdbyte	_var01, _var01
21130     03 00 0E F2 | 	cmp	_var01, #3 wz
21134     14 14 06 A1 |  if_e	add	arg02, #20
21138                 | ' {
21138                 | ' 
21138                 | ' 	return *((WORD*)ptr);
21138     0A FB E1 AA |  if_e	rdword	result1, arg02
2113c     10 FA 65 A0 |  if_e	shl	result1, #16
21140     FD 12 42 A5 |  if_e	or	arg01, result1
21144                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
21144                 | ' 	}
21144                 | ' 
21144                 | ' 	return cl;
21144     09 FB 01 F6 | 	mov	result1, arg01
21148                 | _fatfs_cc_ld_clust_ret
21148     2D 00 64 FD | 	ret
2114c                 | 
2114c                 | _fatfs_cc_st_clust
2114c     09 01 02 F6 | 	mov	_var01, arg01
21150     0A 13 02 F6 | 	mov	arg01, arg02
21154     1A 12 06 F1 | 	add	arg01, #26
21158     09 17 52 FC | 	wrword	arg03, arg01
2115c     00 01 C2 FA | 	rdbyte	_var01, _var01
21160     03 00 0E F2 | 	cmp	_var01, #3 wz
21164     14 14 06 A1 |  if_e	add	arg02, #20
21168     10 16 46 A0 |  if_e	shr	arg03, #16
2116c     0A 17 52 AC |  if_e	wrword	arg03, arg02
21170                 | _fatfs_cc_st_clust_ret
21170     2D 00 64 FD | 	ret
21174                 | 
21174                 | _fatfs_cc_cmp_lfn
21174     07 4A 05 F6 | 	mov	COUNT_, #7
21178     A8 00 A0 FD | 	call	#pushregs_
2117c     09 1F 02 F6 | 	mov	local01, arg01
21180     0A 13 02 F6 | 	mov	arg01, arg02
21184     1A 12 06 F1 | 	add	arg01, #26
21188                 | ' {
21188                 | ' 
21188                 | ' 	return *((WORD*)ptr);
21188     09 FB E9 FA | 	rdword	result1, arg01 wz
2118c     00 FA 05 56 |  if_ne	mov	result1, #0
21190     E0 00 90 5D |  if_ne	jmp	#LR__3466
21194     0A 21 C2 FA | 	rdbyte	local02, arg02
21198     3F 20 06 F5 | 	and	local02, #63
2119c     01 20 86 F1 | 	sub	local02, #1
211a0     0D 20 06 FD | 	qmul	local02, #13
211a4                 | ' 
211a4                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
211a4                 | ' 
211a4                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
211a4     01 22 06 F6 | 	mov	local03, #1
211a8     00 24 06 F6 | 	mov	local04, #0
211ac     18 26 62 FD | 	getqx	local05
211b0                 | LR__3460
211b0     0D 24 16 F2 | 	cmp	local04, #13 wc
211b4     9C 00 90 3D |  if_ae	jmp	#LR__3465
211b8     0A 13 02 F6 | 	mov	arg01, arg02
211bc     12 21 02 F6 | 	mov	local02, local04
211c0     01 00 00 FF 
211c4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
211c8     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
211cc     10 21 C2 FA | 	rdbyte	local02, local02
211d0     01 20 06 FA | 	mul	local02, #1
211d4     10 13 02 F1 | 	add	arg01, local02
211d8     01 00 00 FF 
211dc     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
211e0                 | ' {
211e0                 | ' 
211e0                 | ' 	return *((WORD*)ptr);
211e0     09 FB E1 FA | 	rdword	result1, arg01
211e4     FD 28 02 F6 | 	mov	local06, result1
211e8     11 21 02 F6 | 	mov	local02, local03
211ec     0F 20 4E F7 | 	zerox	local02, #15 wz
211f0     44 00 90 AD |  if_e	jmp	#LR__3463
211f4     00 27 16 F2 | 	cmp	local05, #256 wc
211f8     2C 00 90 3D |  if_ae	jmp	#LR__3461
211fc     14 13 32 F9 | 	getword	arg01, local06, #0
21200     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
21204     FD 20 02 F6 | 	mov	local02, result1
21208     13 23 02 F6 | 	mov	local03, local05
2120c     01 22 66 F0 | 	shl	local03, #1
21210     0F 23 02 F1 | 	add	local03, local01
21214     11 13 E2 FA | 	rdword	arg01, local03
21218     01 26 06 F1 | 	add	local05, #1
2121c     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
21220     FD 20 0A F2 | 	cmp	local02, result1 wz
21224     08 00 90 AD |  if_e	jmp	#LR__3462
21228                 | LR__3461
21228                 | ' 				return 0;
21228     00 FA 05 F6 | 	mov	result1, #0
2122c     44 00 90 FD | 	jmp	#LR__3466
21230                 | LR__3462
21230     14 23 02 F6 | 	mov	local03, local06
21234     14 00 90 FD | 	jmp	#LR__3464
21238                 | LR__3463
21238     14 29 32 F9 | 	getword	local06, local06, #0
2123c     7F 00 00 FF 
21240     FF 29 0E F2 | 	cmp	local06, ##65535 wz
21244     00 FA 05 56 |  if_ne	mov	result1, #0
21248     28 00 90 5D |  if_ne	jmp	#LR__3466
2124c                 | LR__3464
2124c     01 24 06 F1 | 	add	local04, #1
21250     5C FF 9F FD | 	jmp	#LR__3460
21254                 | LR__3465
21254     0A 21 C2 FA | 	rdbyte	local02, arg02
21258     40 20 CE F7 | 	test	local02, #64 wz
2125c     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
21260     01 26 66 50 |  if_ne	shl	local05, #1
21264     0F 27 02 51 |  if_ne	add	local05, local01
21268     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
2126c     00 FA 05 56 |  if_ne	mov	result1, #0
21270                 | ' 
21270                 | ' 	return 1;
21270     01 FA 05 A6 |  if_e	mov	result1, #1
21274                 | LR__3466
21274     A7 F0 03 F6 | 	mov	ptra, fp
21278     B2 00 A0 FD | 	call	#popregs_
2127c                 | _fatfs_cc_cmp_lfn_ret
2127c     2D 00 64 FD | 	ret
21280                 | 
21280                 | _fatfs_cc_pick_lfn
21280     09 01 02 F6 | 	mov	_var01, arg01
21284     0A 13 02 F6 | 	mov	arg01, arg02
21288     1A 12 06 F1 | 	add	arg01, #26
2128c                 | ' {
2128c                 | ' 
2128c                 | ' 	return *((WORD*)ptr);
2128c     09 FB E9 FA | 	rdword	result1, arg01 wz
21290     00 FA 05 56 |  if_ne	mov	result1, #0
21294     D4 00 90 5D |  if_ne	jmp	#LR__3475
21298     0A 03 C2 FA | 	rdbyte	_var02, arg02
2129c     40 02 26 F5 | 	andn	_var02, #64
212a0     01 02 86 F1 | 	sub	_var02, #1
212a4     0D 02 06 FD | 	qmul	_var02, #13
212a8                 | ' 
212a8                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
212a8                 | ' 
212a8                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
212a8     01 04 06 F6 | 	mov	_var03, #1
212ac     00 06 06 F6 | 	mov	_var04, #0
212b0     18 08 62 FD | 	getqx	_var05
212b4                 | LR__3470
212b4     0D 06 16 F2 | 	cmp	_var04, #13 wc
212b8     80 00 90 3D |  if_ae	jmp	#LR__3473
212bc     0A 13 02 F6 | 	mov	arg01, arg02
212c0     03 03 02 F6 | 	mov	_var02, _var04
212c4     01 00 00 FF 
212c8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
212cc     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
212d0     01 03 C2 FA | 	rdbyte	_var02, _var02
212d4     01 02 06 FA | 	mul	_var02, #1
212d8     01 13 02 F1 | 	add	arg01, _var02
212dc     01 00 00 FF 
212e0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
212e4                 | ' {
212e4                 | ' 
212e4                 | ' 	return *((WORD*)ptr);
212e4     09 FB E1 FA | 	rdword	result1, arg01
212e8     FD 0A 02 F6 | 	mov	_var06, result1
212ec     02 03 02 F6 | 	mov	_var02, _var03
212f0     0F 02 4E F7 | 	zerox	_var02, #15 wz
212f4     28 00 90 AD |  if_e	jmp	#LR__3471
212f8     00 09 16 F2 | 	cmp	_var05, #256 wc
212fc     00 FA 05 36 |  if_ae	mov	result1, #0
21300     68 00 90 3D |  if_ae	jmp	#LR__3475
21304     04 03 02 F6 | 	mov	_var02, _var05
21308     01 02 66 F0 | 	shl	_var02, #1
2130c     00 03 02 F1 | 	add	_var02, _var01
21310     05 05 02 F6 | 	mov	_var03, _var06
21314     01 05 52 FC | 	wrword	_var03, _var02
21318     01 08 06 F1 | 	add	_var05, #1
2131c     14 00 90 FD | 	jmp	#LR__3472
21320                 | LR__3471
21320     05 0B 32 F9 | 	getword	_var06, _var06, #0
21324     7F 00 00 FF 
21328     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2132c     00 FA 05 56 |  if_ne	mov	result1, #0
21330     38 00 90 5D |  if_ne	jmp	#LR__3475
21334                 | LR__3472
21334     01 06 06 F1 | 	add	_var04, #1
21338     78 FF 9F FD | 	jmp	#LR__3470
2133c                 | LR__3473
2133c     0A 03 C2 FA | 	rdbyte	_var02, arg02
21340     40 02 CE F7 | 	test	_var02, #64 wz
21344     02 0D 02 56 |  if_ne	mov	_var07, _var03
21348     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2134c     18 00 90 AD |  if_e	jmp	#LR__3474
21350     00 09 16 F2 | 	cmp	_var05, #256 wc
21354     00 FA 05 36 |  if_ae	mov	result1, #0
21358     10 00 90 3D |  if_ae	jmp	#LR__3475
2135c     01 08 66 F0 | 	shl	_var05, #1
21360     00 09 02 F1 | 	add	_var05, _var01
21364     04 01 58 FC | 	wrword	#0, _var05
21368                 | LR__3474
21368                 | ' 		lfnbuf[i] = 0;
21368                 | ' 	}
21368                 | ' 
21368                 | ' 	return 1;
21368     01 FA 05 F6 | 	mov	result1, #1
2136c                 | LR__3475
2136c                 | _fatfs_cc_pick_lfn_ret
2136c     2D 00 64 FD | 	ret
21370                 | 
21370                 | _fatfs_cc_put_lfn
21370     0D 14 06 F1 | 	add	arg02, #13
21374     0A 19 42 FC | 	wrbyte	arg04, arg02
21378     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2137c     01 18 86 F1 | 	sub	arg04, #1
21380     0D 18 06 FD | 	qmul	arg04, #13
21384     09 01 02 F6 | 	mov	_var01, arg01
21388     02 14 86 F1 | 	sub	arg02, #2
2138c     0A 1F 48 FC | 	wrbyte	#15, arg02
21390     01 14 06 F1 | 	add	arg02, #1
21394     0A 01 48 FC | 	wrbyte	#0, arg02
21398     0C 14 86 F1 | 	sub	arg02, #12
2139c     0A 13 02 F6 | 	mov	arg01, arg02
213a0     1A 12 06 F1 | 	add	arg01, #26
213a4     09 01 58 FC | 	wrword	#0, arg01
213a8     00 02 06 F6 | 	mov	_var02, #0
213ac     00 04 06 F6 | 	mov	_var03, #0
213b0                 | ' 	BYTE* dir,
213b0                 | ' 	BYTE ord,
213b0                 | ' 	BYTE sum
213b0                 | ' )
213b0                 | ' {
213b0                 | ' 	UINT i, s;
213b0                 | ' 	WCHAR wc;
213b0                 | ' 
213b0                 | ' 
213b0                 | ' 	dir[ 13 ] = sum;
213b0                 | ' 	dir[ 11 ] =  0x0F ;
213b0                 | ' 	dir[ 12 ] = 0;
213b0                 | ' 	st_word(dir +  26 , 0);
213b0                 | ' 
213b0                 | ' 	i = (ord - 1) * 13;
213b0                 | ' 	s = wc = 0;
213b0                 | ' 	do {
213b0     01 00 00 FF 
213b4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
213b8     18 06 62 FD | 	getqx	_var04
213bc     97 2A 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
213c0                 | LR__3480
213c0     01 19 32 F9 | 	getword	arg04, _var02, #0
213c4     7F 00 00 FF 
213c8     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
213cc     03 13 02 56 |  if_ne	mov	arg01, _var04
213d0     01 06 06 51 |  if_ne	add	_var04, #1
213d4     01 12 66 50 |  if_ne	shl	arg01, #1
213d8     00 13 02 51 |  if_ne	add	arg01, _var01
213dc     09 03 E2 5A |  if_ne	rdword	_var02, arg01
213e0     0A 13 02 F6 | 	mov	arg01, arg02
213e4     02 19 02 F6 | 	mov	arg04, _var03
213e8     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
213ec     0C 19 C2 FA | 	rdbyte	arg04, arg04
213f0     01 18 06 FA | 	mul	arg04, #1
213f4     0C 13 02 F1 | 	add	arg01, arg04
213f8     09 03 52 FC | 	wrword	_var02, arg01
213fc     01 19 02 F6 | 	mov	arg04, _var02
21400     0F 18 4E F7 | 	zerox	arg04, #15 wz
21404     0F 02 CE A9 |  if_e	bmask	_var02, #15
21408     01 04 06 F1 | 	add	_var03, #1
2140c     0D 04 16 F2 | 	cmp	_var03, #13 wc
21410     AC FF 9F CD |  if_b	jmp	#LR__3480
21414                 | LR__3481
21414     01 00 00 FF 
21418     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2141c     01 03 32 F9 | 	getword	_var02, _var02, #0
21420     7F 00 00 FF 
21424     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
21428     01 06 66 50 |  if_ne	shl	_var04, #1
2142c     00 07 02 51 |  if_ne	add	_var04, _var01
21430     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
21434     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
21438     40 16 46 A5 |  if_e	or	arg03, #64
2143c     0A 17 42 FC | 	wrbyte	arg03, arg02
21440                 | _fatfs_cc_put_lfn_ret
21440     2D 00 64 FD | 	ret
21444                 | 
21444                 | _fatfs_cc_gen_numname
21444     08 4A 05 F6 | 	mov	COUNT_, #8
21448     A8 00 A0 FD | 	call	#pushregs_
2144c     2C F0 07 F1 | 	add	ptra, #44
21450     09 1F 02 F6 | 	mov	local01, arg01
21454     0A 21 02 F6 | 	mov	local02, arg02
21458     0B 23 02 F6 | 	mov	local03, arg03
2145c     0C 25 02 F6 | 	mov	local04, arg04
21460     0F 13 02 F6 | 	mov	arg01, local01
21464     10 15 02 F6 | 	mov	arg02, local02
21468     0B 16 06 F6 | 	mov	arg03, #11
2146c     88 78 BF FD | 	call	#__system____builtin_memmove
21470     06 24 16 F2 | 	cmp	local04, #6 wc
21474     48 00 90 CD |  if_b	jmp	#LR__3495
21478     12 27 02 F6 | 	mov	local05, local04
2147c     97 1E 48 FB | 	callpa	#(@LR__3493-@LR__3490)>>2,fcache_load_ptr_
21480                 | ' 		sreg = seq;
21480                 | ' 		while (*lfn) {
21480                 | LR__3490
21480     11 29 EA FA | 	rdword	local06, local03 wz
21484     34 00 90 AD |  if_e	jmp	#LR__3494
21488     11 2B E2 FA | 	rdword	local07, local03
2148c                 | ' 			wc = *lfn++;
2148c                 | ' 			for (i = 0; i < 16; i++) {
2148c     02 22 06 F1 | 	add	local03, #2
21490     10 12 DC FC | 	rep	@LR__3492, #16
21494                 | LR__3491
21494     01 26 66 F0 | 	shl	local05, #1
21498     15 29 32 F9 | 	getword	local06, local07, #0
2149c     01 28 06 F5 | 	and	local06, #1
214a0     14 27 02 F1 | 	add	local05, local06
214a4     15 2B 32 F9 | 	getword	local07, local07, #0
214a8     01 2A 46 F0 | 	shr	local07, #1
214ac     10 26 2E F4 | 	testbn	local05, #16 wz
214b0     88 00 00 5F 
214b4     21 26 66 55 |  if_ne	xor	local05, ##69665
214b8                 | LR__3492
214b8     C4 FF 9F FD | 	jmp	#LR__3490
214bc                 | LR__3493
214bc                 | LR__3494
214bc     13 25 02 F6 | 	mov	local04, local05
214c0                 | LR__3495
214c0     07 2A 06 F6 | 	mov	local07, #7
214c4                 | ' 			}
214c4                 | ' 		}
214c4                 | ' 		seq = (UINT)sreg;
214c4                 | ' 	}
214c4                 | ' 
214c4                 | ' 
214c4                 | ' 	i = 7;
214c4                 | ' 	do {
214c4     10 4E 05 F1 | 	add	fp, #16
214c8     97 1A 48 FB | 	callpa	#(@LR__3497-@LR__3496)>>2,fcache_load_ptr_
214cc                 | LR__3496
214cc     12 27 42 F8 | 	getnib	local05, local04, #0
214d0     30 26 06 F1 | 	add	local05, #48
214d4     04 24 46 F0 | 	shr	local04, #4
214d8     13 29 E2 F8 | 	getbyte	local06, local05, #0
214dc     3A 28 16 F2 | 	cmp	local06, #58 wc
214e0     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
214e4     07 26 06 31 |  if_ae	add	local05, #7
214e8     15 29 02 F6 | 	mov	local06, local07
214ec     01 2A 8E F1 | 	sub	local07, #1 wz
214f0     A7 28 02 F1 | 	add	local06, fp
214f4     14 27 42 FC | 	wrbyte	local05, local06
214f8     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
214fc     CC FF 9F 5D |  if_ne	jmp	#LR__3496
21500                 | LR__3497
21500     15 29 02 F6 | 	mov	local06, local07
21504     A7 28 02 F1 | 	add	local06, fp
21508     14 FD 48 FC | 	wrbyte	#126, local06
2150c                 | ' 	ns[i] = '~';
2150c                 | ' 
2150c                 | ' 
2150c                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2150c     00 26 06 F6 | 	mov	local05, #0
21510     10 4E 85 F1 | 	sub	fp, #16
21514     97 2A 48 FB | 	callpa	#(@LR__3500-@LR__3498)>>2,fcache_load_ptr_
21518                 | LR__3498
21518     15 27 12 F2 | 	cmp	local05, local07 wc
2151c     4C 00 90 3D |  if_ae	jmp	#LR__3501
21520     13 29 02 F6 | 	mov	local06, local05
21524     0F 29 02 F1 | 	add	local06, local01
21528     14 29 C2 FA | 	rdbyte	local06, local06
2152c     20 28 0E F2 | 	cmp	local06, #32 wz
21530     38 00 90 AD |  if_e	jmp	#LR__3501
21534     13 13 02 F6 | 	mov	arg01, local05
21538     0F 13 02 F1 | 	add	arg01, local01
2153c     09 13 CA FA | 	rdbyte	arg01, arg01 wz
21540     00 FA 05 56 |  if_ne	mov	result1, #0
21544                 | ' 
21544                 | ' 	return 0;
21544     00 FA 05 A6 |  if_e	mov	result1, #0
21548     00 FA 0D F2 | 	cmp	result1, #0 wz
2154c     14 00 90 AD |  if_e	jmp	#LR__3499
21550     15 29 02 F6 | 	mov	local06, local07
21554     01 28 86 F1 | 	sub	local06, #1
21558     14 27 0A F2 | 	cmp	local05, local06 wz
2155c     0C 00 90 AD |  if_e	jmp	#LR__3501
21560     01 26 06 F1 | 	add	local05, #1
21564                 | LR__3499
21564     01 26 06 F1 | 	add	local05, #1
21568     AC FF 9F FD | 	jmp	#LR__3498
2156c                 | LR__3500
2156c                 | LR__3501
2156c     97 20 48 FB | 	callpa	#(@LR__3505-@LR__3502)>>2,fcache_load_ptr_
21570                 | ' 			j++;
21570                 | ' 		}
21570                 | ' 	}
21570                 | ' 	do {
21570                 | LR__3502
21570     13 29 02 F6 | 	mov	local06, local05
21574     0F 29 02 F1 | 	add	local06, local01
21578     08 2A 16 F2 | 	cmp	local07, #8 wc
2157c     01 26 06 F1 | 	add	local05, #1
21580     1C 00 90 3D |  if_ae	jmp	#LR__3503
21584     15 25 02 F6 | 	mov	local04, local07
21588     10 4E 05 F1 | 	add	fp, #16
2158c     A7 24 02 F1 | 	add	local04, fp
21590     12 2D C2 FA | 	rdbyte	local08, local04
21594     01 2A 06 F1 | 	add	local07, #1
21598     10 4E 85 F1 | 	sub	fp, #16
2159c     04 00 90 FD | 	jmp	#LR__3504
215a0                 | LR__3503
215a0     20 2C 06 F6 | 	mov	local08, #32
215a4                 | LR__3504
215a4     14 2D 42 FC | 	wrbyte	local08, local06
215a8     08 26 16 F2 | 	cmp	local05, #8 wc
215ac     C0 FF 9F CD |  if_b	jmp	#LR__3502
215b0                 | LR__3505
215b0     A7 F0 03 F6 | 	mov	ptra, fp
215b4     B2 00 A0 FD | 	call	#popregs_
215b8                 | _fatfs_cc_gen_numname_ret
215b8     2D 00 64 FD | 	ret
215bc                 | 
215bc                 | _fatfs_cc_sum_sfn
215bc     00 00 06 F6 | 	mov	_var01, #0
215c0                 | ' )
215c0                 | ' {
215c0                 | ' 	BYTE sum = 0;
215c0                 | ' 	UINT n = 11;
215c0                 | ' 
215c0                 | ' 	do {
215c0     97 12 48 FB | 	callpa	#(@LR__3512-@LR__3510)>>2,fcache_load_ptr_
215c4                 | LR__3510
215c4     0B 10 DC FC | 	rep	@LR__3513, #11
215c8                 | LR__3511
215c8     00 FB E1 F8 | 	getbyte	result1, _var01, #0
215cc     01 FA 45 F0 | 	shr	result1, #1
215d0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
215d4     07 00 66 F0 | 	shl	_var01, #7
215d8     00 FB 01 F1 | 	add	result1, _var01
215dc     09 01 C2 FA | 	rdbyte	_var01, arg01
215e0     FD 00 02 F1 | 	add	_var01, result1
215e4     01 12 06 F1 | 	add	arg01, #1
215e8                 | LR__3512
215e8                 | LR__3513
215e8                 | ' 	return sum;
215e8     00 FB 01 F6 | 	mov	result1, _var01
215ec                 | _fatfs_cc_sum_sfn_ret
215ec     2D 00 64 FD | 	ret
215f0                 | 
215f0                 | _fatfs_cc_dir_read
215f0     0C 4A 05 F6 | 	mov	COUNT_, #12
215f4     A8 00 A0 FD | 	call	#pushregs_
215f8     09 1F 02 F6 | 	mov	local01, arg01
215fc     0A 21 02 F6 | 	mov	local02, arg02
21600     04 22 06 F6 | 	mov	local03, #4
21604     0F 25 02 FB | 	rdlong	local04, local01
21608     FF 26 06 F6 | 	mov	local05, #255
2160c     FF 28 06 F6 | 	mov	local06, #255
21610                 | ' )
21610                 | ' {
21610                 | ' 	FRESULT res = FR_NO_FILE;
21610                 | ' 	FATFS *fs = dp->obj.fs;
21610                 | ' 	BYTE attr, b;
21610                 | ' 
21610                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
21610                 | ' 
21610                 | ' 
21610                 | ' 	while (dp->sect) {
21610                 | LR__3520
21610     18 1E 06 F1 | 	add	local01, #24
21614     0F FB 09 FB | 	rdlong	result1, local01 wz
21618     18 1E 86 F1 | 	sub	local01, #24
2161c     AC 01 90 AD |  if_e	jmp	#LR__3530
21620     18 1E 06 F1 | 	add	local01, #24
21624     0F 15 02 FB | 	rdlong	arg02, local01
21628     18 1E 86 F1 | 	sub	local01, #24
2162c     12 13 02 F6 | 	mov	arg01, local04
21630     AC ED BF FD | 	call	#_fatfs_cc_move_window
21634     FD 22 0A F6 | 	mov	local03, result1 wz
21638     90 01 90 5D |  if_ne	jmp	#LR__3530
2163c     1C 1E 06 F1 | 	add	local01, #28
21640     0F FB 01 FB | 	rdlong	result1, local01
21644     1C 1E 86 F1 | 	sub	local01, #28
21648     FD 2A C2 FA | 	rdbyte	local07, result1
2164c     15 FB 01 F6 | 	mov	result1, local07
21650     07 FA 4D F7 | 	zerox	result1, #7 wz
21654     04 22 06 A6 |  if_e	mov	local03, #4
21658                 | ' 			res = FR_NO_FILE; break;
21658     70 01 90 AD |  if_e	jmp	#LR__3530
2165c     1C 1E 06 F1 | 	add	local01, #28
21660     0F 2D 02 FB | 	rdlong	local08, local01
21664     0B 2C 06 F1 | 	add	local08, #11
21668     16 2F C2 FA | 	rdbyte	local09, local08
2166c     3F 2E 06 F5 | 	and	local09, #63
21670     16 1E 86 F1 | 	sub	local01, #22
21674     0F 2F 42 FC | 	wrbyte	local09, local01
21678     06 1E 86 F1 | 	sub	local01, #6
2167c     15 FB E1 F8 | 	getbyte	result1, local07, #0
21680     E5 FA 0D F2 | 	cmp	result1, #229 wz
21684     15 2D 02 56 |  if_ne	mov	local08, local07
21688     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
2168c     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
21690     1C 00 90 AD |  if_e	jmp	#LR__3521
21694     00 30 06 F6 | 	mov	local10, #0
21698     17 2D E2 F8 | 	getbyte	local08, local09, #0
2169c     20 2C 26 F5 | 	andn	local08, #32
216a0     08 2C 0E F2 | 	cmp	local08, #8 wz
216a4     01 30 06 A6 |  if_e	mov	local10, #1
216a8     10 31 0A F2 | 	cmp	local10, local02 wz
216ac     08 00 90 AD |  if_e	jmp	#LR__3522
216b0                 | LR__3521
216b0     FF 26 06 F6 | 	mov	local05, #255
216b4     00 01 90 FD | 	jmp	#LR__3529
216b8                 | LR__3522
216b8     17 2F E2 F8 | 	getbyte	local09, local09, #0
216bc     0F 2E 0E F2 | 	cmp	local09, #15 wz
216c0     B4 00 90 5D |  if_ne	jmp	#LR__3526
216c4     15 33 E2 F8 | 	getbyte	local11, local07, #0
216c8     40 32 CE F7 | 	test	local11, #64 wz
216cc     30 00 90 AD |  if_e	jmp	#LR__3523
216d0     1C 1E 06 F1 | 	add	local01, #28
216d4     0F 33 02 FB | 	rdlong	local11, local01
216d8     0D 32 06 F1 | 	add	local11, #13
216dc     19 29 C2 FA | 	rdbyte	local06, local11
216e0     15 2B E2 F8 | 	getbyte	local07, local07, #0
216e4     BF 2A 06 F5 | 	and	local07, #191
216e8     15 27 02 F6 | 	mov	local05, local07
216ec     0C 1E 86 F1 | 	sub	local01, #12
216f0     0F 33 02 FB | 	rdlong	local11, local01
216f4     1C 1E 06 F1 | 	add	local01, #28
216f8     0F 33 62 FC | 	wrlong	local11, local01
216fc     2C 1E 86 F1 | 	sub	local01, #44
21700                 | LR__3523
21700     15 2D E2 F8 | 	getbyte	local08, local07, #0
21704     13 31 E2 F8 | 	getbyte	local10, local05, #0
21708     18 2D 0A F2 | 	cmp	local08, local10 wz
2170c     5C 00 90 5D |  if_ne	jmp	#LR__3524
21710     14 31 E2 F8 | 	getbyte	local10, local06, #0
21714     1C 1E 06 F1 | 	add	local01, #28
21718     0F 2F 02 FB | 	rdlong	local09, local01
2171c     1C 1E 86 F1 | 	sub	local01, #28
21720     0D 2E 06 F1 | 	add	local09, #13
21724     17 2D C2 FA | 	rdbyte	local08, local09
21728     16 2F E2 F8 | 	getbyte	local09, local08, #0
2172c     17 31 0A F2 | 	cmp	local10, local09 wz
21730     38 00 90 5D |  if_ne	jmp	#LR__3524
21734     0C 24 06 F1 | 	add	local04, #12
21738     12 13 02 FB | 	rdlong	arg01, local04
2173c     0C 24 86 F1 | 	sub	local04, #12
21740     1C 1E 06 F1 | 	add	local01, #28
21744     0F 35 02 FB | 	rdlong	local12, local01
21748     1C 1E 86 F1 | 	sub	local01, #28
2174c     1A 15 02 F6 | 	mov	arg02, local12
21750     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
21754     00 FA 4D F2 | 	cmps	result1, #0 wz
21758     13 35 02 56 |  if_ne	mov	local12, local05
2175c     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
21760     01 34 86 51 |  if_ne	sub	local12, #1
21764     1A 33 02 56 |  if_ne	mov	local11, local12
21768     04 00 90 5D |  if_ne	jmp	#LR__3525
2176c                 | LR__3524
2176c     FF 32 06 F6 | 	mov	local11, #255
21770                 | LR__3525
21770     19 27 02 F6 | 	mov	local05, local11
21774     40 00 90 FD | 	jmp	#LR__3528
21778                 | LR__3526
21778     13 33 02 F6 | 	mov	local11, local05
2177c     07 32 4E F7 | 	zerox	local11, #7 wz
21780     20 00 90 5D |  if_ne	jmp	#LR__3527
21784     14 29 E2 F8 | 	getbyte	local06, local06, #0
21788     1C 1E 06 F1 | 	add	local01, #28
2178c     0F 13 02 FB | 	rdlong	arg01, local01
21790     1C 1E 86 F1 | 	sub	local01, #28
21794     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
21798     FD FA E1 F8 | 	getbyte	result1, result1, #0
2179c     FD 28 0A F2 | 	cmp	local06, result1 wz
217a0     28 00 90 AD |  if_e	jmp	#LR__3530
217a4                 | LR__3527
217a4     2C 1E 06 F1 | 	add	local01, #44
217a8     FF FF FF FF 
217ac     0F FF 6B FC | 	wrlong	##-1, local01
217b0     2C 1E 86 F1 | 	sub	local01, #44
217b4                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
217b4                 | ' 					}
217b4                 | ' 					break;
217b4     14 00 90 FD | 	jmp	#LR__3530
217b8                 | LR__3528
217b8                 | LR__3529
217b8     0F 13 02 F6 | 	mov	arg01, local01
217bc     00 14 06 F6 | 	mov	arg02, #0
217c0     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
217c4     FD 22 0A F6 | 	mov	local03, result1 wz
217c8     44 FE 9F AD |  if_e	jmp	#LR__3520
217cc                 | LR__3530
217cc     00 22 0E F2 | 	cmp	local03, #0 wz
217d0     18 1E 06 51 |  if_ne	add	local01, #24
217d4     0F 01 68 5C |  if_ne	wrlong	#0, local01
217d8                 | ' 	return res;
217d8     11 FB 01 F6 | 	mov	result1, local03
217dc     A7 F0 03 F6 | 	mov	ptra, fp
217e0     B2 00 A0 FD | 	call	#popregs_
217e4                 | _fatfs_cc_dir_read_ret
217e4     2D 00 64 FD | 	ret
217e8                 | 
217e8                 | _fatfs_cc_dir_find
217e8     0B 4A 05 F6 | 	mov	COUNT_, #11
217ec     A8 00 A0 FD | 	call	#pushregs_
217f0     09 1F 02 F6 | 	mov	local01, arg01
217f4     0F 21 02 FB | 	rdlong	local02, local01
217f8     0F 13 02 F6 | 	mov	arg01, local01
217fc     00 14 06 F6 | 	mov	arg02, #0
21800     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
21804     00 FA 0D F2 | 	cmp	result1, #0 wz
21808     18 02 90 5D |  if_ne	jmp	#LR__3552
2180c     FF 22 06 F6 | 	mov	local03, #255
21810     FF 24 06 F6 | 	mov	local04, #255
21814     2C 1E 06 F1 | 	add	local01, #44
21818     FF FF FF FF 
2181c     0F FF 6B FC | 	wrlong	##-1, local01
21820     2C 1E 86 F1 | 	sub	local01, #44
21824                 | ' #line 2404 "ff.c"
21824                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
21824                 | ' 
21824                 | ' 	do {
21824                 | LR__3540
21824     18 1E 06 F1 | 	add	local01, #24
21828     0F 15 02 FB | 	rdlong	arg02, local01
2182c     18 1E 86 F1 | 	sub	local01, #24
21830     10 13 02 F6 | 	mov	arg01, local02
21834     A8 EB BF FD | 	call	#_fatfs_cc_move_window
21838     FD 26 0A F6 | 	mov	local05, result1 wz
2183c     E0 01 90 5D |  if_ne	jmp	#LR__3551
21840     1C 1E 06 F1 | 	add	local01, #28
21844     0F 17 02 FB | 	rdlong	arg03, local01
21848     1C 1E 86 F1 | 	sub	local01, #28
2184c     0B 29 C2 FA | 	rdbyte	local06, arg03
21850     14 17 02 F6 | 	mov	arg03, local06
21854     07 16 4E F7 | 	zerox	arg03, #7 wz
21858     04 26 06 A6 |  if_e	mov	local05, #4
2185c     C0 01 90 AD |  if_e	jmp	#LR__3551
21860     1C 1E 06 F1 | 	add	local01, #28
21864     0F 2B 02 FB | 	rdlong	local07, local01
21868     15 17 02 F6 | 	mov	arg03, local07
2186c     0B 16 06 F1 | 	add	arg03, #11
21870     0B 2D C2 FA | 	rdbyte	local08, arg03
21874     3F 2C 06 F5 | 	and	local08, #63
21878     16 1E 86 F1 | 	sub	local01, #22
2187c     0F 2D 42 FC | 	wrbyte	local08, local01
21880     06 1E 86 F1 | 	sub	local01, #6
21884     14 17 E2 F8 | 	getbyte	arg03, local06, #0
21888     E5 16 0E F2 | 	cmp	arg03, #229 wz
2188c     18 00 90 AD |  if_e	jmp	#LR__3541
21890     16 17 E2 F8 | 	getbyte	arg03, local08, #0
21894     08 16 CE F7 | 	test	arg03, #8 wz
21898     16 2B 02 56 |  if_ne	mov	local07, local08
2189c     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
218a0     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
218a4     18 00 90 AD |  if_e	jmp	#LR__3542
218a8                 | LR__3541
218a8     FF 24 06 F6 | 	mov	local04, #255
218ac     2C 1E 06 F1 | 	add	local01, #44
218b0     FF FF FF FF 
218b4     0F FF 6B FC | 	wrlong	##-1, local01
218b8     2C 1E 86 F1 | 	sub	local01, #44
218bc     4C 01 90 FD | 	jmp	#LR__3550
218c0                 | LR__3542
218c0     16 2D E2 F8 | 	getbyte	local08, local08, #0
218c4     0F 2C 0E F2 | 	cmp	local08, #15 wz
218c8     C8 00 90 5D |  if_ne	jmp	#LR__3546
218cc     2B 1E 06 F1 | 	add	local01, #43
218d0     0F 2D C2 FA | 	rdbyte	local08, local01
218d4     2B 1E 86 F1 | 	sub	local01, #43
218d8     40 2C CE F7 | 	test	local08, #64 wz
218dc     2C 01 90 5D |  if_ne	jmp	#LR__3549
218e0     14 2F E2 F8 | 	getbyte	local09, local06, #0
218e4     40 2E CE F7 | 	test	local09, #64 wz
218e8     30 00 90 AD |  if_e	jmp	#LR__3543
218ec     1C 1E 06 F1 | 	add	local01, #28
218f0     0F 2F 02 FB | 	rdlong	local09, local01
218f4     0D 2E 06 F1 | 	add	local09, #13
218f8     17 23 C2 FA | 	rdbyte	local03, local09
218fc     14 29 E2 F8 | 	getbyte	local06, local06, #0
21900     BF 28 06 F5 | 	and	local06, #191
21904     14 25 02 F6 | 	mov	local04, local06
21908     0C 1E 86 F1 | 	sub	local01, #12
2190c     0F 2F 02 FB | 	rdlong	local09, local01
21910     1C 1E 06 F1 | 	add	local01, #28
21914     0F 2F 62 FC | 	wrlong	local09, local01
21918     2C 1E 86 F1 | 	sub	local01, #44
2191c                 | LR__3543
2191c     14 31 E2 F8 | 	getbyte	local10, local06, #0
21920     12 2B E2 F8 | 	getbyte	local07, local04, #0
21924     15 31 0A F2 | 	cmp	local10, local07 wz
21928     5C 00 90 5D |  if_ne	jmp	#LR__3544
2192c     11 2D E2 F8 | 	getbyte	local08, local03, #0
21930     1C 1E 06 F1 | 	add	local01, #28
21934     0F 2B 02 FB | 	rdlong	local07, local01
21938     1C 1E 86 F1 | 	sub	local01, #28
2193c     0D 2A 06 F1 | 	add	local07, #13
21940     15 29 C2 FA | 	rdbyte	local06, local07
21944     14 2B E2 F8 | 	getbyte	local07, local06, #0
21948     15 2D 0A F2 | 	cmp	local08, local07 wz
2194c     38 00 90 5D |  if_ne	jmp	#LR__3544
21950     0C 20 06 F1 | 	add	local02, #12
21954     10 13 02 FB | 	rdlong	arg01, local02
21958     0C 20 86 F1 | 	sub	local02, #12
2195c     1C 1E 06 F1 | 	add	local01, #28
21960     0F 33 02 FB | 	rdlong	local11, local01
21964     1C 1E 86 F1 | 	sub	local01, #28
21968     19 15 02 F6 | 	mov	arg02, local11
2196c     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
21970     00 FA 4D F2 | 	cmps	result1, #0 wz
21974     12 33 02 56 |  if_ne	mov	local11, local04
21978     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
2197c     01 32 86 51 |  if_ne	sub	local11, #1
21980     19 2F 02 56 |  if_ne	mov	local09, local11
21984     04 00 90 5D |  if_ne	jmp	#LR__3545
21988                 | LR__3544
21988     FF 2E 06 F6 | 	mov	local09, #255
2198c                 | LR__3545
2198c     17 25 02 F6 | 	mov	local04, local09
21990     78 00 90 FD | 	jmp	#LR__3549
21994                 | LR__3546
21994     12 2F 02 F6 | 	mov	local09, local04
21998     07 2E 4E F7 | 	zerox	local09, #7 wz
2199c     20 00 90 5D |  if_ne	jmp	#LR__3547
219a0     11 31 E2 F8 | 	getbyte	local10, local03, #0
219a4     1C 1E 06 F1 | 	add	local01, #28
219a8     0F 13 02 FB | 	rdlong	arg01, local01
219ac     1C 1E 86 F1 | 	sub	local01, #28
219b0     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
219b4     FD FA E1 F8 | 	getbyte	result1, result1, #0
219b8     FD 30 0A F2 | 	cmp	local10, result1 wz
219bc     60 00 90 AD |  if_e	jmp	#LR__3551
219c0                 | LR__3547
219c0     2B 1E 06 F1 | 	add	local01, #43
219c4     0F 2F C2 FA | 	rdbyte	local09, local01
219c8     2B 1E 86 F1 | 	sub	local01, #43
219cc     01 2E CE F7 | 	test	local09, #1 wz
219d0     24 00 90 5D |  if_ne	jmp	#LR__3548
219d4     1C 1E 06 F1 | 	add	local01, #28
219d8     0F 13 02 FB | 	rdlong	arg01, local01
219dc     04 1E 06 F1 | 	add	local01, #4
219e0     0F 15 02 F6 | 	mov	arg02, local01
219e4     20 1E 86 F1 | 	sub	local01, #32
219e8     0B 16 06 F6 | 	mov	arg03, #11
219ec     88 DA BF FD | 	call	#_fatfs_cc_memcmp
219f0     00 FA 0D F2 | 	cmp	result1, #0 wz
219f4     28 00 90 AD |  if_e	jmp	#LR__3551
219f8                 | LR__3548
219f8     FF 24 06 F6 | 	mov	local04, #255
219fc     2C 1E 06 F1 | 	add	local01, #44
21a00     FF FF FF FF 
21a04     0F FF 6B FC | 	wrlong	##-1, local01
21a08     2C 1E 86 F1 | 	sub	local01, #44
21a0c                 | LR__3549
21a0c                 | LR__3550
21a0c     0F 13 02 F6 | 	mov	arg01, local01
21a10     00 14 06 F6 | 	mov	arg02, #0
21a14     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
21a18     FD 26 0A F6 | 	mov	local05, result1 wz
21a1c     04 FE 9F AD |  if_e	jmp	#LR__3540
21a20                 | LR__3551
21a20                 | ' 
21a20                 | ' 	return res;
21a20     13 FB 01 F6 | 	mov	result1, local05
21a24                 | LR__3552
21a24     A7 F0 03 F6 | 	mov	ptra, fp
21a28     B2 00 A0 FD | 	call	#popregs_
21a2c                 | _fatfs_cc_dir_find_ret
21a2c     2D 00 64 FD | 	ret
21a30                 | 
21a30                 | _fatfs_cc_dir_register
21a30     0A 4A 05 F6 | 	mov	COUNT_, #10
21a34     A8 00 A0 FD | 	call	#pushregs_
21a38     2C F0 07 F1 | 	add	ptra, #44
21a3c     04 4E 05 F1 | 	add	fp, #4
21a40     A7 12 62 FC | 	wrlong	arg01, fp
21a44     09 1F 02 FB | 	rdlong	local01, arg01
21a48     08 4E 05 F1 | 	add	fp, #8
21a4c     A7 1E 62 FC | 	wrlong	local01, fp
21a50     08 4E 85 F1 | 	sub	fp, #8
21a54     A7 20 02 FB | 	rdlong	local02, fp
21a58     04 4E 85 F1 | 	sub	fp, #4
21a5c     2B 20 06 F1 | 	add	local02, #43
21a60     10 21 C2 FA | 	rdbyte	local02, local02
21a64     A0 20 CE F7 | 	test	local02, #160 wz
21a68     06 FA 05 56 |  if_ne	mov	result1, #6
21a6c     F8 03 90 5D |  if_ne	jmp	#LR__3575
21a70                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
21a70     14 4E 05 F1 | 	add	fp, #20
21a74     A7 00 68 FC | 	wrlong	#0, fp
21a78     14 4E 85 F1 | 	sub	fp, #20
21a7c     97 28 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
21a80                 | LR__3560
21a80     0C 4E 05 F1 | 	add	fp, #12
21a84     A7 20 02 FB | 	rdlong	local02, fp
21a88     0C 20 06 F1 | 	add	local02, #12
21a8c     10 23 02 FB | 	rdlong	local03, local02
21a90     08 4E 05 F1 | 	add	fp, #8
21a94     A7 24 02 FB | 	rdlong	local04, fp
21a98     14 4E 85 F1 | 	sub	fp, #20
21a9c     01 24 66 F0 | 	shl	local04, #1
21aa0     11 25 02 F1 | 	add	local04, local03
21aa4     12 21 EA FA | 	rdword	local02, local04 wz
21aa8     24 00 90 AD |  if_e	jmp	#LR__3562
21aac     14 4E 05 F1 | 	add	fp, #20
21ab0     A7 26 02 FB | 	rdlong	local05, fp
21ab4     13 29 02 F6 | 	mov	local06, local05
21ab8     13 2B 02 F6 | 	mov	local07, local05
21abc     15 2D 02 F6 | 	mov	local08, local07
21ac0     01 2C 06 F1 | 	add	local08, #1
21ac4     A7 2C 62 FC | 	wrlong	local08, fp
21ac8     14 4E 85 F1 | 	sub	fp, #20
21acc     B0 FF 9F FD | 	jmp	#LR__3560
21ad0                 | LR__3561
21ad0                 | LR__3562
21ad0     1C 4E 05 F1 | 	add	fp, #28
21ad4     A7 12 02 F6 | 	mov	arg01, fp
21ad8     18 4E 85 F1 | 	sub	fp, #24
21adc     A7 14 02 FB | 	rdlong	arg02, fp
21ae0     04 4E 85 F1 | 	sub	fp, #4
21ae4     20 14 06 F1 | 	add	arg02, #32
21ae8     0C 16 06 F6 | 	mov	arg03, #12
21aec     08 72 BF FD | 	call	#__system____builtin_memmove
21af0     27 4E 05 F1 | 	add	fp, #39
21af4     A7 2E C2 FA | 	rdbyte	local09, fp
21af8     27 4E 85 F1 | 	sub	fp, #39
21afc     01 2E CE F7 | 	test	local09, #1 wz
21b00     F4 00 90 AD |  if_e	jmp	#LR__3565
21b04     04 4E 05 F1 | 	add	fp, #4
21b08     A7 30 02 FB | 	rdlong	local10, fp
21b0c     2B 30 06 F1 | 	add	local10, #43
21b10     18 81 48 FC | 	wrbyte	#64, local10
21b14                 | ' 		dp->fn[ 11 ] =  0x40 ;
21b14                 | ' 		for (n = 1; n < 100; n++) {
21b14     0C 4E 05 F1 | 	add	fp, #12
21b18     A7 02 68 FC | 	wrlong	#1, fp
21b1c     10 4E 85 F1 | 	sub	fp, #16
21b20                 | LR__3563
21b20     10 4E 05 F1 | 	add	fp, #16
21b24     A7 20 02 FB | 	rdlong	local02, fp
21b28     10 4E 85 F1 | 	sub	fp, #16
21b2c     64 20 16 F2 | 	cmp	local02, #100 wc
21b30     70 00 90 3D |  if_ae	jmp	#LR__3564
21b34     04 4E 05 F1 | 	add	fp, #4
21b38     A7 12 02 FB | 	rdlong	arg01, fp
21b3c     20 12 06 F1 | 	add	arg01, #32
21b40     18 4E 05 F1 | 	add	fp, #24
21b44     A7 14 02 F6 | 	mov	arg02, fp
21b48     10 4E 85 F1 | 	sub	fp, #16
21b4c     A7 30 02 FB | 	rdlong	local10, fp
21b50     0C 30 06 F1 | 	add	local10, #12
21b54     18 17 02 FB | 	rdlong	arg03, local10
21b58     04 4E 05 F1 | 	add	fp, #4
21b5c     A7 18 02 FB | 	rdlong	arg04, fp
21b60     10 4E 85 F1 | 	sub	fp, #16
21b64     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
21b68     04 4E 05 F1 | 	add	fp, #4
21b6c     A7 12 02 FB | 	rdlong	arg01, fp
21b70     04 4E 85 F1 | 	sub	fp, #4
21b74     70 FC BF FD | 	call	#_fatfs_cc_dir_find
21b78     08 4E 05 F1 | 	add	fp, #8
21b7c     A7 FA 61 FC | 	wrlong	result1, fp
21b80     00 FA 4D F2 | 	cmps	result1, #0 wz
21b84     08 4E 85 F1 | 	sub	fp, #8
21b88     18 00 90 5D |  if_ne	jmp	#LR__3564
21b8c     10 4E 05 F1 | 	add	fp, #16
21b90     A7 30 02 FB | 	rdlong	local10, fp
21b94     01 30 06 F1 | 	add	local10, #1
21b98     A7 30 62 FC | 	wrlong	local10, fp
21b9c     10 4E 85 F1 | 	sub	fp, #16
21ba0     7C FF 9F FD | 	jmp	#LR__3563
21ba4                 | LR__3564
21ba4     10 4E 05 F1 | 	add	fp, #16
21ba8     A7 30 02 FB | 	rdlong	local10, fp
21bac     10 4E 85 F1 | 	sub	fp, #16
21bb0     64 30 0E F2 | 	cmp	local10, #100 wz
21bb4     07 FA 05 A6 |  if_e	mov	result1, #7
21bb8     AC 02 90 AD |  if_e	jmp	#LR__3575
21bbc     08 4E 05 F1 | 	add	fp, #8
21bc0     A7 30 02 FB | 	rdlong	local10, fp
21bc4     08 4E 85 F1 | 	sub	fp, #8
21bc8     04 30 0E F2 | 	cmp	local10, #4 wz
21bcc     08 4E 05 51 |  if_ne	add	fp, #8
21bd0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
21bd4     08 4E 85 51 |  if_ne	sub	fp, #8
21bd8     8C 02 90 5D |  if_ne	jmp	#LR__3575
21bdc     04 4E 05 F1 | 	add	fp, #4
21be0     A7 30 02 FB | 	rdlong	local10, fp
21be4     23 4E 05 F1 | 	add	fp, #35
21be8     A7 1E C2 FA | 	rdbyte	local01, fp
21bec     27 4E 85 F1 | 	sub	fp, #39
21bf0     2B 30 06 F1 | 	add	local10, #43
21bf4     18 1F 42 FC | 	wrbyte	local01, local10
21bf8                 | LR__3565
21bf8     27 4E 05 F1 | 	add	fp, #39
21bfc     A7 20 C2 FA | 	rdbyte	local02, fp
21c00     27 4E 85 F1 | 	sub	fp, #39
21c04     02 20 CE F7 | 	test	local02, #2 wz
21c08     20 00 90 AD |  if_e	jmp	#LR__3566
21c0c     14 4E 05 F1 | 	add	fp, #20
21c10     A7 30 02 FB | 	rdlong	local10, fp
21c14     0C 30 06 F1 | 	add	local10, #12
21c18     0D 30 16 FD | 	qdiv	local10, #13
21c1c     14 4E 85 F1 | 	sub	fp, #20
21c20     18 30 62 FD | 	getqx	local10
21c24     01 30 06 F1 | 	add	local10, #1
21c28     04 00 90 FD | 	jmp	#LR__3567
21c2c                 | LR__3566
21c2c     01 30 06 F6 | 	mov	local10, #1
21c30                 | LR__3567
21c30     18 4E 05 F1 | 	add	fp, #24
21c34     A7 30 62 FC | 	wrlong	local10, fp
21c38     14 4E 85 F1 | 	sub	fp, #20
21c3c     A7 12 02 FB | 	rdlong	arg01, fp
21c40     18 15 02 F6 | 	mov	arg02, local10
21c44     04 4E 85 F1 | 	sub	fp, #4
21c48     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
21c4c     08 4E 05 F1 | 	add	fp, #8
21c50     A7 FA 61 FC | 	wrlong	result1, fp
21c54     08 4E 85 F1 | 	sub	fp, #8
21c58     00 FA 0D F2 | 	cmp	result1, #0 wz
21c5c     38 01 90 5D |  if_ne	jmp	#LR__3572
21c60     18 4E 05 F1 | 	add	fp, #24
21c64     A7 30 02 FB | 	rdlong	local10, fp
21c68     01 30 8E F1 | 	sub	local10, #1 wz
21c6c     A7 30 62 FC | 	wrlong	local10, fp
21c70     18 4E 85 F1 | 	sub	fp, #24
21c74     20 01 90 AD |  if_e	jmp	#LR__3572
21c78     04 4E 05 F1 | 	add	fp, #4
21c7c     A7 30 02 FB | 	rdlong	local10, fp
21c80     18 13 02 F6 | 	mov	arg01, local10
21c84     14 4E 05 F1 | 	add	fp, #20
21c88     A7 18 02 FB | 	rdlong	arg04, fp
21c8c     18 4E 85 F1 | 	sub	fp, #24
21c90     05 18 66 F0 | 	shl	arg04, #5
21c94     10 30 06 F1 | 	add	local10, #16
21c98     18 15 02 FB | 	rdlong	arg02, local10
21c9c     0C 15 82 F1 | 	sub	arg02, arg04
21ca0     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
21ca4     08 4E 05 F1 | 	add	fp, #8
21ca8     A7 FA 61 FC | 	wrlong	result1, fp
21cac     08 4E 85 F1 | 	sub	fp, #8
21cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
21cb4     E0 00 90 5D |  if_ne	jmp	#LR__3571
21cb8     04 4E 05 F1 | 	add	fp, #4
21cbc     A7 12 02 FB | 	rdlong	arg01, fp
21cc0     04 4E 85 F1 | 	sub	fp, #4
21cc4     20 12 06 F1 | 	add	arg01, #32
21cc8     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
21ccc     FD 30 02 F6 | 	mov	local10, result1
21cd0     28 4E 05 F1 | 	add	fp, #40
21cd4     A7 30 42 FC | 	wrbyte	local10, fp
21cd8     28 4E 85 F1 | 	sub	fp, #40
21cdc                 | ' 			sum = sum_sfn(dp->fn);
21cdc                 | ' 			do {
21cdc                 | LR__3568
21cdc     0C 4E 05 F1 | 	add	fp, #12
21ce0     A7 12 02 FB | 	rdlong	arg01, fp
21ce4     08 4E 85 F1 | 	sub	fp, #8
21ce8     A7 1E 02 FB | 	rdlong	local01, fp
21cec     04 4E 85 F1 | 	sub	fp, #4
21cf0     18 1E 06 F1 | 	add	local01, #24
21cf4     0F 15 02 FB | 	rdlong	arg02, local01
21cf8     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
21cfc     08 4E 05 F1 | 	add	fp, #8
21d00     A7 FA 61 FC | 	wrlong	result1, fp
21d04     00 FA 4D F2 | 	cmps	result1, #0 wz
21d08     08 4E 85 F1 | 	sub	fp, #8
21d0c     88 00 90 5D |  if_ne	jmp	#LR__3570
21d10     0C 4E 05 F1 | 	add	fp, #12
21d14     A7 20 02 FB | 	rdlong	local02, fp
21d18     0C 20 06 F1 | 	add	local02, #12
21d1c     10 13 02 FB | 	rdlong	arg01, local02
21d20     08 4E 85 F1 | 	sub	fp, #8
21d24     A7 1E 02 FB | 	rdlong	local01, fp
21d28     1C 1E 06 F1 | 	add	local01, #28
21d2c     0F 15 02 FB | 	rdlong	arg02, local01
21d30     14 4E 05 F1 | 	add	fp, #20
21d34     A7 16 02 FB | 	rdlong	arg03, fp
21d38     10 4E 05 F1 | 	add	fp, #16
21d3c     A7 18 C2 FA | 	rdbyte	arg04, fp
21d40     28 4E 85 F1 | 	sub	fp, #40
21d44     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
21d48     0C 4E 05 F1 | 	add	fp, #12
21d4c     A7 30 02 FB | 	rdlong	local10, fp
21d50     03 30 06 F1 | 	add	local10, #3
21d54     18 03 48 FC | 	wrbyte	#1, local10
21d58     08 4E 85 F1 | 	sub	fp, #8
21d5c     A7 12 02 FB | 	rdlong	arg01, fp
21d60     04 4E 85 F1 | 	sub	fp, #4
21d64     00 14 06 F6 | 	mov	arg02, #0
21d68     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
21d6c     08 4E 05 F1 | 	add	fp, #8
21d70     A7 FA 61 FC | 	wrlong	result1, fp
21d74     00 FA 4D F2 | 	cmps	result1, #0 wz
21d78     08 4E 85 F1 | 	sub	fp, #8
21d7c     18 00 90 5D |  if_ne	jmp	#LR__3569
21d80     18 4E 05 F1 | 	add	fp, #24
21d84     A7 30 02 FB | 	rdlong	local10, fp
21d88     01 30 8E F1 | 	sub	local10, #1 wz
21d8c     A7 30 62 FC | 	wrlong	local10, fp
21d90     18 4E 85 F1 | 	sub	fp, #24
21d94     44 FF 9F 5D |  if_ne	jmp	#LR__3568
21d98                 | LR__3569
21d98                 | LR__3570
21d98                 | LR__3571
21d98                 | LR__3572
21d98     08 4E 05 F1 | 	add	fp, #8
21d9c     A7 30 0A FB | 	rdlong	local10, fp wz
21da0     08 4E 85 F1 | 	sub	fp, #8
21da4     B4 00 90 5D |  if_ne	jmp	#LR__3574
21da8     0C 4E 05 F1 | 	add	fp, #12
21dac     A7 12 02 FB | 	rdlong	arg01, fp
21db0     08 4E 85 F1 | 	sub	fp, #8
21db4     A7 1E 02 FB | 	rdlong	local01, fp
21db8     04 4E 85 F1 | 	sub	fp, #4
21dbc     18 1E 06 F1 | 	add	local01, #24
21dc0     0F 15 02 FB | 	rdlong	arg02, local01
21dc4     18 E6 BF FD | 	call	#_fatfs_cc_move_window
21dc8     08 4E 05 F1 | 	add	fp, #8
21dcc     A7 FA 61 FC | 	wrlong	result1, fp
21dd0     08 4E 85 F1 | 	sub	fp, #8
21dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
21dd8     80 00 90 5D |  if_ne	jmp	#LR__3573
21ddc     04 4E 05 F1 | 	add	fp, #4
21de0     A7 20 02 FB | 	rdlong	local02, fp
21de4     04 4E 85 F1 | 	sub	fp, #4
21de8     1C 20 06 F1 | 	add	local02, #28
21dec     10 13 02 FB | 	rdlong	arg01, local02
21df0     00 14 06 F6 | 	mov	arg02, #0
21df4     20 16 06 F6 | 	mov	arg03, #32
21df8     98 00 A0 FD | 	call	#\builtin_bytefill_
21dfc     04 4E 05 F1 | 	add	fp, #4
21e00     A7 14 02 FB | 	rdlong	arg02, fp
21e04     0A 1F 02 F6 | 	mov	local01, arg02
21e08     1C 1E 06 F1 | 	add	local01, #28
21e0c     0F 13 02 FB | 	rdlong	arg01, local01
21e10     04 4E 85 F1 | 	sub	fp, #4
21e14     20 14 06 F1 | 	add	arg02, #32
21e18     0B 16 06 F6 | 	mov	arg03, #11
21e1c     D8 6E BF FD | 	call	#__system____builtin_memmove
21e20     04 4E 05 F1 | 	add	fp, #4
21e24     A7 2E 02 FB | 	rdlong	local09, fp
21e28     17 31 02 F6 | 	mov	local10, local09
21e2c     1C 30 06 F1 | 	add	local10, #28
21e30     18 1F 02 FB | 	rdlong	local01, local10
21e34     2B 2E 06 F1 | 	add	local09, #43
21e38     17 31 C2 FA | 	rdbyte	local10, local09
21e3c     18 30 06 F5 | 	and	local10, #24
21e40     0C 1E 06 F1 | 	add	local01, #12
21e44     0F 31 42 FC | 	wrbyte	local10, local01
21e48     08 4E 05 F1 | 	add	fp, #8
21e4c     A7 30 02 FB | 	rdlong	local10, fp
21e50     0C 4E 85 F1 | 	sub	fp, #12
21e54     03 30 06 F1 | 	add	local10, #3
21e58     18 03 48 FC | 	wrbyte	#1, local10
21e5c                 | LR__3573
21e5c                 | LR__3574
21e5c                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
21e5c                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
21e5c                 | ' 
21e5c                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
21e5c                 | ' 
21e5c                 | ' 			fs->wflag = 1;
21e5c                 | ' 		}
21e5c                 | ' 	}
21e5c                 | ' 
21e5c                 | ' 	return res;
21e5c     08 4E 05 F1 | 	add	fp, #8
21e60     A7 FA 01 FB | 	rdlong	result1, fp
21e64     08 4E 85 F1 | 	sub	fp, #8
21e68                 | LR__3575
21e68     A7 F0 03 F6 | 	mov	ptra, fp
21e6c     B2 00 A0 FD | 	call	#popregs_
21e70                 | _fatfs_cc_dir_register_ret
21e70     2D 00 64 FD | 	ret
21e74                 | 
21e74                 | _fatfs_cc_dir_remove
21e74     05 4A 05 F6 | 	mov	COUNT_, #5
21e78     A8 00 A0 FD | 	call	#pushregs_
21e7c     09 1F 02 F6 | 	mov	local01, arg01
21e80     0F 21 02 FB | 	rdlong	local02, local01
21e84     10 1E 06 F1 | 	add	local01, #16
21e88     0F 23 02 FB | 	rdlong	local03, local01
21e8c     1C 1E 06 F1 | 	add	local01, #28
21e90     0F 15 02 FB | 	rdlong	arg02, local01
21e94     2C 1E 86 F1 | 	sub	local01, #44
21e98     FF FF 7F FF 
21e9c     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
21ea0     00 24 06 A6 |  if_e	mov	local04, #0
21ea4     18 00 90 AD |  if_e	jmp	#LR__3580
21ea8     0F 13 02 F6 | 	mov	arg01, local01
21eac     2C 1E 06 F1 | 	add	local01, #44
21eb0     0F 15 02 FB | 	rdlong	arg02, local01
21eb4     2C 1E 86 F1 | 	sub	local01, #44
21eb8     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
21ebc     FD 24 02 F6 | 	mov	local04, result1
21ec0                 | LR__3580
21ec0     12 27 0A F6 | 	mov	local05, local04 wz
21ec4     64 00 90 5D |  if_ne	jmp	#LR__3583
21ec8                 | ' 		do {
21ec8                 | LR__3581
21ec8     18 1E 06 F1 | 	add	local01, #24
21ecc     0F 15 02 FB | 	rdlong	arg02, local01
21ed0     18 1E 86 F1 | 	sub	local01, #24
21ed4     10 13 02 F6 | 	mov	arg01, local02
21ed8     04 E5 BF FD | 	call	#_fatfs_cc_move_window
21edc     FD 26 0A F6 | 	mov	local05, result1 wz
21ee0     40 00 90 5D |  if_ne	jmp	#LR__3582
21ee4     1C 1E 06 F1 | 	add	local01, #28
21ee8     0F 25 02 FB | 	rdlong	local04, local01
21eec     12 CB 49 FC | 	wrbyte	#229, local04
21ef0     03 20 06 F1 | 	add	local02, #3
21ef4     10 03 48 FC | 	wrbyte	#1, local02
21ef8     03 20 86 F1 | 	sub	local02, #3
21efc     0C 1E 86 F1 | 	sub	local01, #12
21f00     0F 25 02 FB | 	rdlong	local04, local01
21f04     10 1E 86 F1 | 	sub	local01, #16
21f08     11 25 12 F2 | 	cmp	local04, local03 wc
21f0c     14 00 90 3D |  if_ae	jmp	#LR__3582
21f10     0F 13 02 F6 | 	mov	arg01, local01
21f14     00 14 06 F6 | 	mov	arg02, #0
21f18     90 EF BF FD | 	call	#_fatfs_cc_dir_next
21f1c     FD 26 0A F6 | 	mov	local05, result1 wz
21f20     A4 FF 9F AD |  if_e	jmp	#LR__3581
21f24                 | LR__3582
21f24     04 26 0E F2 | 	cmp	local05, #4 wz
21f28     02 26 06 A6 |  if_e	mov	local05, #2
21f2c                 | LR__3583
21f2c                 | ' 	}
21f2c                 | ' #line 2590 "ff.c"
21f2c                 | ' 	return res;
21f2c     13 FB 01 F6 | 	mov	result1, local05
21f30     A7 F0 03 F6 | 	mov	ptra, fp
21f34     B2 00 A0 FD | 	call	#popregs_
21f38                 | _fatfs_cc_dir_remove_ret
21f38     2D 00 64 FD | 	ret
21f3c                 | 
21f3c                 | _fatfs_cc_get_fileinfo
21f3c     0F 4A 05 F6 | 	mov	COUNT_, #15
21f40     A8 00 A0 FD | 	call	#pushregs_
21f44     09 1F 02 F6 | 	mov	local01, arg01
21f48     0A 21 02 F6 | 	mov	local02, arg02
21f4c     0F 23 02 FB | 	rdlong	local03, local01
21f50     1C 20 06 F1 | 	add	local02, #28
21f54     10 01 48 FC | 	wrbyte	#0, local02
21f58     1C 20 86 F1 | 	sub	local02, #28
21f5c     18 1E 06 F1 | 	add	local01, #24
21f60     0F 25 0A FB | 	rdlong	local04, local01 wz
21f64     18 1E 86 F1 | 	sub	local01, #24
21f68     90 03 90 AD |  if_e	jmp	#LR__3604
21f6c     2C 1E 06 F1 | 	add	local01, #44
21f70     0F 25 02 FB | 	rdlong	local04, local01
21f74     2C 1E 86 F1 | 	sub	local01, #44
21f78     FF FF 7F FF 
21f7c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
21f80     D8 00 90 AD |  if_e	jmp	#LR__3593
21f84     00 26 06 F6 | 	mov	local05, #0
21f88     00 28 06 F6 | 	mov	local06, #0
21f8c     00 2A 06 F6 | 	mov	local07, #0
21f90                 | ' 			si = di = 0;
21f90                 | ' 			hs = 0;
21f90                 | ' 			while (fs->lfnbuf[si] != 0) {
21f90                 | LR__3590
21f90     0C 22 06 F1 | 	add	local03, #12
21f94     11 25 02 FB | 	rdlong	local04, local03
21f98     0C 22 86 F1 | 	sub	local03, #12
21f9c     14 2D 02 F6 | 	mov	local08, local06
21fa0     01 2C 66 F0 | 	shl	local08, #1
21fa4     12 2D 02 F1 | 	add	local08, local04
21fa8     16 25 EA FA | 	rdword	local04, local08 wz
21fac     90 00 90 AD |  if_e	jmp	#LR__3592
21fb0     0C 22 06 F1 | 	add	local03, #12
21fb4     11 2F 02 FB | 	rdlong	local09, local03
21fb8     0C 22 86 F1 | 	sub	local03, #12
21fbc     14 31 02 F6 | 	mov	local10, local06
21fc0     01 30 66 F0 | 	shl	local10, #1
21fc4     17 31 02 F1 | 	add	local10, local09
21fc8     18 33 E2 FA | 	rdword	local11, local10
21fcc     15 25 02 F6 | 	mov	local04, local07
21fd0     0F 24 4E F7 | 	zerox	local04, #15 wz
21fd4     01 28 06 F1 | 	add	local06, #1
21fd8     24 00 90 5D |  if_ne	jmp	#LR__3591
21fdc     19 35 32 F9 | 	getword	local12, local11, #0
21fe0     6C 00 00 FF 
21fe4     00 34 16 F2 | 	cmp	local12, ##55296 wc
21fe8     14 00 90 CD |  if_b	jmp	#LR__3591
21fec     19 37 32 F9 | 	getword	local13, local11, #0
21ff0     70 00 00 FF 
21ff4     00 36 16 F2 | 	cmp	local13, ##57344 wc
21ff8     19 2B 02 C6 |  if_b	mov	local07, local11
21ffc                 | ' 					hs = wc; continue;
21ffc     90 FF 9F CD |  if_b	jmp	#LR__3590
22000                 | LR__3591
22000     15 13 32 F9 | 	getword	arg01, local07, #0
22004     10 12 66 F0 | 	shl	arg01, #16
22008     19 33 32 F9 | 	getword	local11, local11, #0
2200c     19 13 42 F5 | 	or	arg01, local11
22010     13 15 02 F6 | 	mov	arg02, local05
22014     1C 20 06 F1 | 	add	local02, #28
22018     10 15 02 F1 | 	add	arg02, local02
2201c     FF 16 06 F6 | 	mov	arg03, #255
22020     13 17 82 F1 | 	sub	arg03, local05
22024     1C 20 86 F1 | 	sub	local02, #28
22028     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2202c     FD 38 0A F6 | 	mov	local14, result1 wz
22030     00 26 06 A6 |  if_e	mov	local05, #0
22034     1C 27 02 51 |  if_ne	add	local05, local14
22038     00 2A 06 56 |  if_ne	mov	local07, #0
2203c     50 FF 9F 5D |  if_ne	jmp	#LR__3590
22040                 | LR__3592
22040     15 25 02 F6 | 	mov	local04, local07
22044     0F 24 4E F7 | 	zerox	local04, #15 wz
22048     00 26 06 56 |  if_ne	mov	local05, #0
2204c     1C 20 06 F1 | 	add	local02, #28
22050     10 27 02 F1 | 	add	local05, local02
22054     13 01 48 FC | 	wrbyte	#0, local05
22058     1C 20 86 F1 | 	sub	local02, #28
2205c                 | LR__3593
2205c     00 26 06 F6 | 	mov	local05, #0
22060     00 28 06 F6 | 	mov	local06, #0
22064                 | ' 			fno->fname[di] = 0;
22064                 | ' 		}
22064                 | ' 	}
22064                 | ' 
22064                 | ' 	si = di = 0;
22064                 | ' 	while (si < 11) {
22064                 | LR__3594
22064     0B 28 16 F2 | 	cmp	local06, #11 wc
22068     20 01 90 3D |  if_ae	jmp	#LR__3597
2206c     1C 1E 06 F1 | 	add	local01, #28
22070     0F 2F 02 FB | 	rdlong	local09, local01
22074     1C 1E 86 F1 | 	sub	local01, #28
22078     14 31 02 F6 | 	mov	local10, local06
2207c     17 31 02 F1 | 	add	local10, local09
22080     18 33 C2 FA | 	rdbyte	local11, local10
22084     19 25 32 F9 | 	getword	local04, local11, #0
22088     20 24 0E F2 | 	cmp	local04, #32 wz
2208c     01 28 06 F1 | 	add	local06, #1
22090     D0 FF 9F AD |  if_e	jmp	#LR__3594
22094     19 25 32 F9 | 	getword	local04, local11, #0
22098     05 24 0E F2 | 	cmp	local04, #5 wz
2209c     E5 32 06 A6 |  if_e	mov	local11, #229
220a0     09 28 0E F2 | 	cmp	local06, #9 wz
220a4     20 00 90 5D |  if_ne	jmp	#LR__3595
220a8     0C 26 16 F2 | 	cmp	local05, #12 wc
220ac     18 00 90 3D |  if_ae	jmp	#LR__3595
220b0     13 37 02 F6 | 	mov	local13, local05
220b4     0C 20 06 F1 | 	add	local02, #12
220b8     10 37 02 F1 | 	add	local13, local02
220bc     1B 5D 48 FC | 	wrbyte	#46, local13
220c0     01 26 06 F1 | 	add	local05, #1
220c4     0C 20 86 F1 | 	sub	local02, #12
220c8                 | LR__3595
220c8     19 13 32 F9 | 	getword	arg01, local11, #0
220cc     07 12 4E F7 | 	zerox	arg01, #7 wz
220d0     00 FA 05 56 |  if_ne	mov	result1, #0
220d4                 | ' 
220d4                 | ' 	return 0;
220d4     00 FA 05 A6 |  if_e	mov	result1, #0
220d8     00 FA 0D F2 | 	cmp	result1, #0 wz
220dc     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
220e0     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
220e4     50 00 90 AD |  if_e	jmp	#LR__3596
220e8     1C 1E 06 F1 | 	add	local01, #28
220ec     0F 31 02 FB | 	rdlong	local10, local01
220f0     1C 1E 86 F1 | 	sub	local01, #28
220f4     14 2D 02 F6 | 	mov	local08, local06
220f8     18 2D 02 F1 | 	add	local08, local10
220fc     16 13 CA FA | 	rdbyte	arg01, local08 wz
22100     00 FA 05 56 |  if_ne	mov	result1, #0
22104                 | ' 
22104                 | ' 	return 0;
22104     00 FA 05 A6 |  if_e	mov	result1, #0
22108     00 FA 0D F2 | 	cmp	result1, #0 wz
2210c     28 00 90 AD |  if_e	jmp	#LR__3596
22110     19 33 32 F9 | 	getword	local11, local11, #0
22114     08 32 66 F0 | 	shl	local11, #8
22118     1C 1E 06 F1 | 	add	local01, #28
2211c     0F 39 02 FB | 	rdlong	local14, local01
22120     1C 1E 86 F1 | 	sub	local01, #28
22124     14 2F 02 F6 | 	mov	local09, local06
22128     1C 2F 02 F1 | 	add	local09, local14
2212c     17 35 C2 FA | 	rdbyte	local12, local09
22130     1A 33 42 F5 | 	or	local11, local12
22134     01 28 06 F1 | 	add	local06, #1
22138                 | LR__3596
22138     19 13 02 F6 | 	mov	arg01, local11
2213c     01 00 00 FF 
22140     52 15 06 F6 | 	mov	arg02, ##850
22144     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
22148     FD 32 02 F6 | 	mov	local11, result1
2214c     19 25 02 F6 | 	mov	local04, local11
22150     0F 24 4E F7 | 	zerox	local04, #15 wz
22154     00 26 06 A6 |  if_e	mov	local05, #0
22158     30 00 90 AD |  if_e	jmp	#LR__3597
2215c     19 13 32 F9 | 	getword	arg01, local11, #0
22160     13 15 02 F6 | 	mov	arg02, local05
22164     0C 20 06 F1 | 	add	local02, #12
22168     10 15 02 F1 | 	add	arg02, local02
2216c     0C 16 06 F6 | 	mov	arg03, #12
22170     13 17 82 F1 | 	sub	arg03, local05
22174     0C 20 86 F1 | 	sub	local02, #12
22178     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2217c     FD 38 0A F6 | 	mov	local14, result1 wz
22180     00 26 06 A6 |  if_e	mov	local05, #0
22184     1C 27 02 51 |  if_ne	add	local05, local14
22188     D8 FE 9F 5D |  if_ne	jmp	#LR__3594
2218c                 | LR__3597
2218c     13 25 02 F6 | 	mov	local04, local05
22190     0C 20 06 F1 | 	add	local02, #12
22194     10 25 02 F1 | 	add	local04, local02
22198     12 01 48 FC | 	wrbyte	#0, local04
2219c     10 20 06 F1 | 	add	local02, #16
221a0     10 25 CA FA | 	rdbyte	local04, local02 wz
221a4     1C 20 86 F1 | 	sub	local02, #28
221a8     F8 00 90 5D |  if_ne	jmp	#LR__3603
221ac     00 26 0E F2 | 	cmp	local05, #0 wz
221b0     1C 00 90 5D |  if_ne	jmp	#LR__3598
221b4     13 37 02 F6 | 	mov	local13, local05
221b8     1C 20 06 F1 | 	add	local02, #28
221bc     10 37 02 F1 | 	add	local13, local02
221c0     1B 7F 48 FC | 	wrbyte	#63, local13
221c4     01 26 06 F1 | 	add	local05, #1
221c8     1C 20 86 F1 | 	sub	local02, #28
221cc     A4 00 90 FD | 	jmp	#LR__3602
221d0                 | LR__3598
221d0                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
221d0     00 26 06 F6 | 	mov	local05, #0
221d4     00 28 06 F6 | 	mov	local06, #0
221d8     08 3A 06 F6 | 	mov	local15, #8
221dc                 | LR__3599
221dc     14 25 02 F6 | 	mov	local04, local06
221e0     0C 20 06 F1 | 	add	local02, #12
221e4     10 25 02 F1 | 	add	local04, local02
221e8     12 37 CA FA | 	rdbyte	local13, local04 wz
221ec     0C 20 86 F1 | 	sub	local02, #12
221f0     80 00 90 AD |  if_e	jmp	#LR__3601
221f4     14 2D 02 F6 | 	mov	local08, local06
221f8     0C 20 06 F1 | 	add	local02, #12
221fc     10 2D 02 F1 | 	add	local08, local02
22200     16 33 C2 FA | 	rdbyte	local11, local08
22204     19 39 32 F9 | 	getword	local14, local11, #0
22208     2E 38 0E F2 | 	cmp	local14, #46 wz
2220c     0C 20 86 F1 | 	sub	local02, #12
22210     10 3A 06 A6 |  if_e	mov	local15, #16
22214     19 39 32 F9 | 	getword	local14, local11, #0
22218     41 38 16 F2 | 	cmp	local14, #65 wc
2221c     30 00 90 CD |  if_b	jmp	#LR__3600
22220     19 2D 32 F9 | 	getword	local08, local11, #0
22224     5B 2C 16 F2 | 	cmp	local08, #91 wc
22228     24 00 90 3D |  if_ae	jmp	#LR__3600
2222c     1C 1E 06 F1 | 	add	local01, #28
22230     0F 2F 02 FB | 	rdlong	local09, local01
22234     1C 1E 86 F1 | 	sub	local01, #28
22238     0C 2E 06 F1 | 	add	local09, #12
2223c     17 31 C2 FA | 	rdbyte	local10, local09
22240     1D 39 E2 F8 | 	getbyte	local14, local15, #0
22244     1C 31 CA F7 | 	test	local10, local14 wz
22248     19 33 32 59 |  if_ne	getword	local11, local11, #0
2224c     20 32 06 51 |  if_ne	add	local11, #32
22250                 | LR__3600
22250     13 39 02 F6 | 	mov	local14, local05
22254     1C 20 06 F1 | 	add	local02, #28
22258     10 39 02 F1 | 	add	local14, local02
2225c     19 33 32 F9 | 	getword	local11, local11, #0
22260     1C 33 42 FC | 	wrbyte	local11, local14
22264     01 28 06 F1 | 	add	local06, #1
22268     01 26 06 F1 | 	add	local05, #1
2226c     1C 20 86 F1 | 	sub	local02, #28
22270     68 FF 9F FD | 	jmp	#LR__3599
22274                 | LR__3601
22274                 | LR__3602
22274     1C 20 06 F1 | 	add	local02, #28
22278     10 27 02 F1 | 	add	local05, local02
2227c     13 01 48 FC | 	wrbyte	#0, local05
22280     1C 1E 06 F1 | 	add	local01, #28
22284     0F 25 02 FB | 	rdlong	local04, local01
22288     1C 1E 86 F1 | 	sub	local01, #28
2228c     0C 24 06 F1 | 	add	local04, #12
22290     12 37 CA FA | 	rdbyte	local13, local04 wz
22294     1C 20 86 F1 | 	sub	local02, #28
22298     0C 20 06 A1 |  if_e	add	local02, #12
2229c     10 01 48 AC |  if_e	wrbyte	#0, local02
222a0     0C 20 86 A1 |  if_e	sub	local02, #12
222a4                 | LR__3603
222a4     1C 1E 06 F1 | 	add	local01, #28
222a8     0F 35 02 FB | 	rdlong	local12, local01
222ac     0B 34 06 F1 | 	add	local12, #11
222b0     1A 25 C2 FA | 	rdbyte	local04, local12
222b4     3F 24 06 F5 | 	and	local04, #63
222b8     08 20 06 F1 | 	add	local02, #8
222bc     10 25 42 FC | 	wrbyte	local04, local02
222c0     08 20 86 F1 | 	sub	local02, #8
222c4     0F 13 02 FB | 	rdlong	arg01, local01
222c8     1C 12 06 F1 | 	add	arg01, #28
222cc                 | ' {
222cc                 | ' 
222cc                 | ' 	return *((DWORD*)ptr);
222cc     09 FB 01 FB | 	rdlong	result1, arg01
222d0     10 FB 61 FC | 	wrlong	result1, local02
222d4     0F 13 02 FB | 	rdlong	arg01, local01
222d8     16 12 06 F1 | 	add	arg01, #22
222dc                 | ' {
222dc                 | ' 
222dc                 | ' 	return *((WORD*)ptr);
222dc     09 FB E1 FA | 	rdword	result1, arg01
222e0     06 20 06 F1 | 	add	local02, #6
222e4     10 FB 51 FC | 	wrword	result1, local02
222e8     0F 13 02 FB | 	rdlong	arg01, local01
222ec     18 12 06 F1 | 	add	arg01, #24
222f0                 | ' {
222f0                 | ' 
222f0                 | ' 	return *((WORD*)ptr);
222f0     09 FB E1 FA | 	rdword	result1, arg01
222f4     02 20 86 F1 | 	sub	local02, #2
222f8     10 FB 51 FC | 	wrword	result1, local02
222fc                 | LR__3604
222fc     A7 F0 03 F6 | 	mov	ptra, fp
22300     B2 00 A0 FD | 	call	#popregs_
22304                 | _fatfs_cc_get_fileinfo_ret
22304     2D 00 64 FD | 	ret
22308                 | 
22308                 | _fatfs_cc_create_name
22308     0D 4A 05 F6 | 	mov	COUNT_, #13
2230c     A8 00 A0 FD | 	call	#pushregs_
22310     34 F0 07 F1 | 	add	ptra, #52
22314     04 4E 05 F1 | 	add	fp, #4
22318     A7 12 62 FC | 	wrlong	arg01, fp
2231c     04 4E 05 F1 | 	add	fp, #4
22320     A7 14 62 FC | 	wrlong	arg02, fp
22324     0A FB 01 FB | 	rdlong	result1, arg02
22328     28 4E 05 F1 | 	add	fp, #40
2232c     A7 FA 61 FC | 	wrlong	result1, fp
22330     2C 4E 85 F1 | 	sub	fp, #44
22334     A7 FA 01 FB | 	rdlong	result1, fp
22338     FD 1E 02 FB | 	rdlong	local01, result1
2233c     0C 1E 06 F1 | 	add	local01, #12
22340     0F 21 02 FB | 	rdlong	local02, local01
22344     14 4E 05 F1 | 	add	fp, #20
22348     A7 20 62 FC | 	wrlong	local02, fp
2234c     14 4E 05 F1 | 	add	fp, #20
22350     A7 00 68 FC | 	wrlong	#0, fp
22354     2C 4E 85 F1 | 	sub	fp, #44
22358                 | ' 
22358                 | ' 
22358                 | ' 
22358                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
22358                 | ' 	for (;;) {
22358                 | LR__3610
22358     30 4E 05 F1 | 	add	fp, #48
2235c     A7 12 02 F6 | 	mov	arg01, fp
22360     30 4E 85 F1 | 	sub	fp, #48
22364     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
22368     1C 4E 05 F1 | 	add	fp, #28
2236c     A7 FA 61 FC | 	wrlong	result1, fp
22370     1C 4E 85 F1 | 	sub	fp, #28
22374     FF FF 7F FF 
22378     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2237c     06 FA 05 A6 |  if_e	mov	result1, #6
22380     74 08 90 AD |  if_e	jmp	#LR__3650
22384     1C 4E 05 F1 | 	add	fp, #28
22388     A7 1E 02 FB | 	rdlong	local01, fp
2238c     1C 4E 85 F1 | 	sub	fp, #28
22390     80 00 00 FF 
22394     00 1E 16 F2 | 	cmp	local01, ##65536 wc
22398     3C 00 90 CD |  if_b	jmp	#LR__3611
2239c     18 4E 05 F1 | 	add	fp, #24
223a0     A7 22 02 FB | 	rdlong	local03, fp
223a4     14 4E 05 F1 | 	add	fp, #20
223a8     A7 1E 02 FB | 	rdlong	local01, fp
223ac     0F 25 02 F6 | 	mov	local04, local01
223b0     01 24 06 F1 | 	add	local04, #1
223b4     A7 24 62 FC | 	wrlong	local04, fp
223b8     01 1E 66 F0 | 	shl	local01, #1
223bc     11 1F 02 F1 | 	add	local01, local03
223c0     10 4E 85 F1 | 	sub	fp, #16
223c4     A7 26 02 FB | 	rdlong	local05, fp
223c8     1C 4E 85 F1 | 	sub	fp, #28
223cc     13 29 02 F6 | 	mov	local06, local05
223d0     10 28 46 F0 | 	shr	local06, #16
223d4     0F 29 52 FC | 	wrword	local06, local01
223d8                 | LR__3611
223d8     1C 4E 05 F1 | 	add	fp, #28
223dc     A7 1E 02 FB | 	rdlong	local01, fp
223e0     08 4E 85 F1 | 	sub	fp, #8
223e4     A7 1E 52 FC | 	wrword	local01, fp
223e8     A7 1E E2 FA | 	rdword	local01, fp
223ec     14 4E 85 F1 | 	sub	fp, #20
223f0     20 1E 16 F2 | 	cmp	local01, #32 wc
223f4     B0 00 90 CD |  if_b	jmp	#LR__3613
223f8     14 4E 05 F1 | 	add	fp, #20
223fc     A7 1E E2 FA | 	rdword	local01, fp
22400     14 4E 85 F1 | 	sub	fp, #20
22404     2F 1E 0E F2 | 	cmp	local01, #47 wz
22408     14 4E 05 51 |  if_ne	add	fp, #20
2240c     A7 24 E2 5A |  if_ne	rdword	local04, fp
22410     14 4E 85 51 |  if_ne	sub	fp, #20
22414     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
22418     8C 00 90 AD |  if_e	jmp	#LR__3613
2241c     14 4E 05 F1 | 	add	fp, #20
22420     A7 12 E2 FA | 	rdword	arg01, fp
22424     14 4E 85 F1 | 	sub	fp, #20
22428     80 12 16 F2 | 	cmp	arg01, #128 wc
2242c     24 00 90 3D |  if_ae	jmp	#LR__3612
22430     41 01 00 FF 
22434     58 13 06 F6 | 	mov	arg01, ##@LR__4272
22438     14 4E 05 F1 | 	add	fp, #20
2243c     A7 14 E2 FA | 	rdword	arg02, fp
22440     14 4E 85 F1 | 	sub	fp, #20
22444     FC D0 BF FD | 	call	#_fatfs_cc_strchr
22448     00 FA 0D F2 | 	cmp	result1, #0 wz
2244c     06 FA 05 56 |  if_ne	mov	result1, #6
22450     A4 07 90 5D |  if_ne	jmp	#LR__3650
22454                 | LR__3612
22454     2C 4E 05 F1 | 	add	fp, #44
22458     A7 28 02 FB | 	rdlong	local06, fp
2245c     2C 4E 85 F1 | 	sub	fp, #44
22460     FF 28 16 F2 | 	cmp	local06, #255 wc
22464     06 FA 05 36 |  if_ae	mov	result1, #6
22468     8C 07 90 3D |  if_ae	jmp	#LR__3650
2246c     18 4E 05 F1 | 	add	fp, #24
22470     A7 22 02 FB | 	rdlong	local03, fp
22474     14 4E 05 F1 | 	add	fp, #20
22478     A7 20 02 FB | 	rdlong	local02, fp
2247c     10 25 02 F6 | 	mov	local04, local02
22480     01 24 06 F1 | 	add	local04, #1
22484     A7 24 62 FC | 	wrlong	local04, fp
22488     10 1F 02 F6 | 	mov	local01, local02
2248c     01 1E 66 F0 | 	shl	local01, #1
22490     11 1F 02 F1 | 	add	local01, local03
22494     18 4E 85 F1 | 	sub	fp, #24
22498     A7 28 E2 FA | 	rdword	local06, fp
2249c     14 4E 85 F1 | 	sub	fp, #20
224a0     0F 29 52 FC | 	wrword	local06, local01
224a4     B0 FE 9F FD | 	jmp	#LR__3610
224a8                 | LR__3613
224a8     14 4E 05 F1 | 	add	fp, #20
224ac     A7 2A E2 FA | 	rdword	local07, fp
224b0     14 4E 85 F1 | 	sub	fp, #20
224b4     20 2A 16 F2 | 	cmp	local07, #32 wc
224b8     10 4E 05 C1 |  if_b	add	fp, #16
224bc     A7 08 48 CC |  if_b	wrbyte	#4, fp
224c0     10 4E 85 C1 |  if_b	sub	fp, #16
224c4     74 00 90 CD |  if_b	jmp	#LR__3618
224c8     97 24 48 FB | 	callpa	#(@LR__3616-@LR__3614)>>2,fcache_load_ptr_
224cc                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
224cc                 | LR__3614
224cc     30 4E 05 F1 | 	add	fp, #48
224d0     A7 24 02 FB | 	rdlong	local04, fp
224d4     30 4E 85 F1 | 	sub	fp, #48
224d8     12 2B C2 FA | 	rdbyte	local07, local04
224dc     2F 2A 0E F2 | 	cmp	local07, #47 wz
224e0     18 00 90 AD |  if_e	jmp	#LR__3615
224e4     30 4E 05 F1 | 	add	fp, #48
224e8     A7 24 02 FB | 	rdlong	local04, fp
224ec     30 4E 85 F1 | 	sub	fp, #48
224f0     12 21 C2 FA | 	rdbyte	local02, local04
224f4     5C 20 0E F2 | 	cmp	local02, #92 wz
224f8     18 00 90 5D |  if_ne	jmp	#LR__3617
224fc                 | LR__3615
224fc     30 4E 05 F1 | 	add	fp, #48
22500     A7 1E 02 FB | 	rdlong	local01, fp
22504     01 1E 06 F1 | 	add	local01, #1
22508     A7 1E 62 FC | 	wrlong	local01, fp
2250c     30 4E 85 F1 | 	sub	fp, #48
22510     B8 FF 9F FD | 	jmp	#LR__3614
22514                 | LR__3616
22514                 | LR__3617
22514     10 4E 05 F1 | 	add	fp, #16
22518     A7 00 48 FC | 	wrbyte	#0, fp
2251c     20 4E 05 F1 | 	add	fp, #32
22520     A7 28 02 FB | 	rdlong	local06, fp
22524     30 4E 85 F1 | 	sub	fp, #48
22528     14 2B C2 FA | 	rdbyte	local07, local06
2252c     20 2A 16 F2 | 	cmp	local07, #32 wc
22530     10 4E 05 C1 |  if_b	add	fp, #16
22534     A7 08 48 CC |  if_b	wrbyte	#4, fp
22538     10 4E 85 C1 |  if_b	sub	fp, #16
2253c                 | LR__3618
2253c     08 4E 05 F1 | 	add	fp, #8
22540     A7 2A 02 FB | 	rdlong	local07, fp
22544     28 4E 05 F1 | 	add	fp, #40
22548     A7 1E 02 FB | 	rdlong	local01, fp
2254c     30 4E 85 F1 | 	sub	fp, #48
22550     15 1F 62 FC | 	wrlong	local01, local07
22554     97 38 48 FB | 	callpa	#(@LR__3620-@LR__3619)>>2,fcache_load_ptr_
22558                 | ' 	}
22558                 | ' 	*path = p;
22558                 | ' #line 2862 "ff.c"
22558                 | ' 	while (di) {
22558                 | LR__3619
22558     2C 4E 05 F1 | 	add	fp, #44
2255c     A7 2A 0A FB | 	rdlong	local07, fp wz
22560     2C 4E 85 F1 | 	sub	fp, #44
22564     60 00 90 AD |  if_e	jmp	#LR__3621
22568     18 4E 05 F1 | 	add	fp, #24
2256c     A7 28 02 FB | 	rdlong	local06, fp
22570     14 4E 05 F1 | 	add	fp, #20
22574     A7 24 02 FB | 	rdlong	local04, fp
22578     01 24 86 F1 | 	sub	local04, #1
2257c     01 24 66 F0 | 	shl	local04, #1
22580     14 25 02 F1 | 	add	local04, local06
22584     12 29 E2 FA | 	rdword	local06, local04
22588     18 4E 85 F1 | 	sub	fp, #24
2258c     A7 28 52 FC | 	wrword	local06, fp
22590     A7 2A E2 FA | 	rdword	local07, fp
22594     14 4E 85 F1 | 	sub	fp, #20
22598     20 2A 0E F2 | 	cmp	local07, #32 wz
2259c     14 4E 05 51 |  if_ne	add	fp, #20
225a0     A7 1E E2 5A |  if_ne	rdword	local01, fp
225a4     14 4E 85 51 |  if_ne	sub	fp, #20
225a8     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
225ac     18 00 90 5D |  if_ne	jmp	#LR__3621
225b0     2C 4E 05 F1 | 	add	fp, #44
225b4     A7 1E 02 FB | 	rdlong	local01, fp
225b8     01 1E 86 F1 | 	sub	local01, #1
225bc     A7 1E 62 FC | 	wrlong	local01, fp
225c0     2C 4E 85 F1 | 	sub	fp, #44
225c4     90 FF 9F FD | 	jmp	#LR__3619
225c8                 | LR__3620
225c8                 | LR__3621
225c8     18 4E 05 F1 | 	add	fp, #24
225cc     A7 2C 02 FB | 	rdlong	local08, fp
225d0     14 4E 05 F1 | 	add	fp, #20
225d4     A7 24 02 FB | 	rdlong	local04, fp
225d8     01 24 66 F0 | 	shl	local04, #1
225dc     16 25 02 F1 | 	add	local04, local08
225e0     12 01 58 FC | 	wrword	#0, local04
225e4     A7 2A 0A FB | 	rdlong	local07, fp wz
225e8     2C 4E 85 F1 | 	sub	fp, #44
225ec     06 FA 05 A6 |  if_e	mov	result1, #6
225f0     04 06 90 AD |  if_e	jmp	#LR__3650
225f4                 | ' 
225f4                 | ' 
225f4                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
225f4     28 4E 05 F1 | 	add	fp, #40
225f8     A7 00 68 FC | 	wrlong	#0, fp
225fc     28 4E 85 F1 | 	sub	fp, #40
22600     97 22 48 FB | 	callpa	#(@LR__3623-@LR__3622)>>2,fcache_load_ptr_
22604                 | LR__3622
22604     18 4E 05 F1 | 	add	fp, #24
22608     A7 2E 02 FB | 	rdlong	local09, fp
2260c     10 4E 05 F1 | 	add	fp, #16
22610     A7 30 02 FB | 	rdlong	local10, fp
22614     28 4E 85 F1 | 	sub	fp, #40
22618     01 30 66 F0 | 	shl	local10, #1
2261c     17 31 02 F1 | 	add	local10, local09
22620     18 33 E2 FA | 	rdword	local11, local10
22624     20 32 0E F2 | 	cmp	local11, #32 wz
22628     1C 00 90 5D |  if_ne	jmp	#LR__3624
2262c     28 4E 05 F1 | 	add	fp, #40
22630     A7 34 02 FB | 	rdlong	local12, fp
22634     1A 27 02 F6 | 	mov	local05, local12
22638     01 26 06 F1 | 	add	local05, #1
2263c     A7 26 62 FC | 	wrlong	local05, fp
22640     28 4E 85 F1 | 	sub	fp, #40
22644     BC FF 9F FD | 	jmp	#LR__3622
22648                 | LR__3623
22648                 | LR__3624
22648     28 4E 05 F1 | 	add	fp, #40
2264c     A7 2A 02 FB | 	rdlong	local07, fp
22650     28 4E 85 F1 | 	sub	fp, #40
22654     01 2A 16 F2 | 	cmp	local07, #1 wc
22658     28 00 90 3D |  if_ae	jmp	#LR__3625
2265c     18 4E 05 F1 | 	add	fp, #24
22660     A7 22 02 FB | 	rdlong	local03, fp
22664     10 4E 05 F1 | 	add	fp, #16
22668     A7 2E 02 FB | 	rdlong	local09, fp
2266c     28 4E 85 F1 | 	sub	fp, #40
22670     01 2E 66 F0 | 	shl	local09, #1
22674     11 2F 02 F1 | 	add	local09, local03
22678     17 1F E2 FA | 	rdword	local01, local09
2267c     2E 1E 0E F2 | 	cmp	local01, #46 wz
22680     14 00 90 5D |  if_ne	jmp	#LR__3626
22684                 | LR__3625
22684     10 4E 05 F1 | 	add	fp, #16
22688     A7 2A C2 FA | 	rdbyte	local07, fp
2268c     03 2A 46 F5 | 	or	local07, #3
22690     A7 2A 42 FC | 	wrbyte	local07, fp
22694     10 4E 85 F1 | 	sub	fp, #16
22698                 | LR__3626
22698     97 2C 48 FB | 	callpa	#(@LR__3628-@LR__3627)>>2,fcache_load_ptr_
2269c                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2269c                 | LR__3627
2269c     2C 4E 05 F1 | 	add	fp, #44
226a0     A7 2A 02 FB | 	rdlong	local07, fp
226a4     2C 4E 85 F1 | 	sub	fp, #44
226a8     01 2A 16 F2 | 	cmp	local07, #1 wc
226ac     44 00 90 CD |  if_b	jmp	#LR__3629
226b0     18 4E 05 F1 | 	add	fp, #24
226b4     A7 28 02 FB | 	rdlong	local06, fp
226b8     14 4E 05 F1 | 	add	fp, #20
226bc     A7 22 02 FB | 	rdlong	local03, fp
226c0     2C 4E 85 F1 | 	sub	fp, #44
226c4     01 22 86 F1 | 	sub	local03, #1
226c8     01 22 66 F0 | 	shl	local03, #1
226cc     14 23 02 F1 | 	add	local03, local06
226d0     11 1F E2 FA | 	rdword	local01, local03
226d4     2E 1E 0E F2 | 	cmp	local01, #46 wz
226d8     18 00 90 AD |  if_e	jmp	#LR__3629
226dc     2C 4E 05 F1 | 	add	fp, #44
226e0     A7 1E 02 FB | 	rdlong	local01, fp
226e4     01 1E 86 F1 | 	sub	local01, #1
226e8     A7 1E 62 FC | 	wrlong	local01, fp
226ec     2C 4E 85 F1 | 	sub	fp, #44
226f0     A8 FF 9F FD | 	jmp	#LR__3627
226f4                 | LR__3628
226f4                 | LR__3629
226f4     04 4E 05 F1 | 	add	fp, #4
226f8     A7 12 02 FB | 	rdlong	arg01, fp
226fc     04 4E 85 F1 | 	sub	fp, #4
22700     20 12 06 F1 | 	add	arg01, #32
22704     20 14 06 F6 | 	mov	arg02, #32
22708     0B 16 06 F6 | 	mov	arg03, #11
2270c     09 37 02 F6 | 	mov	local13, arg01
22710     98 00 A0 FD | 	call	#\builtin_bytefill_
22714     1B FB 01 F6 | 	mov	result1, local13
22718     0C 4E 05 F1 | 	add	fp, #12
2271c     A7 00 48 FC | 	wrbyte	#0, fp
22720     A7 2A C2 FA | 	rdbyte	local07, fp
22724     14 4E 05 F1 | 	add	fp, #20
22728     A7 2A 62 FC | 	wrlong	local07, fp
2272c     04 4E 05 F1 | 	add	fp, #4
22730     A7 10 68 FC | 	wrlong	#8, fp
22734     24 4E 85 F1 | 	sub	fp, #36
22738                 | ' 
22738                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
22738                 | ' 	i = b = 0; ni = 8;
22738                 | ' 	for (;;) {
22738                 | LR__3630
22738     18 4E 05 F1 | 	add	fp, #24
2273c     A7 22 02 FB | 	rdlong	local03, fp
22740     10 4E 05 F1 | 	add	fp, #16
22744     A7 2E 02 FB | 	rdlong	local09, fp
22748     17 25 02 F6 | 	mov	local04, local09
2274c     01 24 06 F1 | 	add	local04, #1
22750     A7 24 62 FC | 	wrlong	local04, fp
22754     01 2E 66 F0 | 	shl	local09, #1
22758     11 2F 02 F1 | 	add	local09, local03
2275c     17 29 E2 FA | 	rdword	local06, local09
22760     14 4E 85 F1 | 	sub	fp, #20
22764     A7 28 52 FC | 	wrword	local06, fp
22768     A7 2A EA FA | 	rdword	local07, fp wz
2276c     14 4E 85 F1 | 	sub	fp, #20
22770     74 03 90 AD |  if_e	jmp	#LR__3646
22774     14 4E 05 F1 | 	add	fp, #20
22778     A7 2A E2 FA | 	rdword	local07, fp
2277c     14 4E 85 F1 | 	sub	fp, #20
22780     20 2A 0E F2 | 	cmp	local07, #32 wz
22784     30 00 90 AD |  if_e	jmp	#LR__3631
22788     14 4E 05 F1 | 	add	fp, #20
2278c     A7 1E E2 FA | 	rdword	local01, fp
22790     14 4E 85 F1 | 	sub	fp, #20
22794     2E 1E 0E F2 | 	cmp	local01, #46 wz
22798     34 00 90 5D |  if_ne	jmp	#LR__3632
2279c     28 4E 05 F1 | 	add	fp, #40
227a0     A7 24 02 FB | 	rdlong	local04, fp
227a4     04 4E 05 F1 | 	add	fp, #4
227a8     A7 30 02 FB | 	rdlong	local10, fp
227ac     2C 4E 85 F1 | 	sub	fp, #44
227b0     18 25 0A F2 | 	cmp	local04, local10 wz
227b4     18 00 90 AD |  if_e	jmp	#LR__3632
227b8                 | LR__3631
227b8     10 4E 05 F1 | 	add	fp, #16
227bc     A7 2A C2 FA | 	rdbyte	local07, fp
227c0     03 2A 46 F5 | 	or	local07, #3
227c4     A7 2A 42 FC | 	wrbyte	local07, fp
227c8     10 4E 85 F1 | 	sub	fp, #16
227cc                 | ' 			cf |=  0x01  |  0x02 ;
227cc                 | ' 			continue;
227cc     68 FF 9F FD | 	jmp	#LR__3630
227d0                 | LR__3632
227d0     20 4E 05 F1 | 	add	fp, #32
227d4     A7 2A 02 FB | 	rdlong	local07, fp
227d8     04 4E 05 F1 | 	add	fp, #4
227dc     A7 1E 02 FB | 	rdlong	local01, fp
227e0     24 4E 85 F1 | 	sub	fp, #36
227e4     0F 2B 12 F2 | 	cmp	local07, local01 wc
227e8     1C 00 90 3D |  if_ae	jmp	#LR__3633
227ec     28 4E 05 F1 | 	add	fp, #40
227f0     A7 2C 02 FB | 	rdlong	local08, fp
227f4     04 4E 05 F1 | 	add	fp, #4
227f8     A7 30 02 FB | 	rdlong	local10, fp
227fc     2C 4E 85 F1 | 	sub	fp, #44
22800     18 2D 0A F2 | 	cmp	local08, local10 wz
22804     B0 00 90 5D |  if_ne	jmp	#LR__3635
22808                 | LR__3633
22808     24 4E 05 F1 | 	add	fp, #36
2280c     A7 2A 02 FB | 	rdlong	local07, fp
22810     24 4E 85 F1 | 	sub	fp, #36
22814     0B 2A 0E F2 | 	cmp	local07, #11 wz
22818     18 00 90 5D |  if_ne	jmp	#LR__3634
2281c     10 4E 05 F1 | 	add	fp, #16
22820     A7 2A C2 FA | 	rdbyte	local07, fp
22824     03 2A 46 F5 | 	or	local07, #3
22828     A7 2A 42 FC | 	wrbyte	local07, fp
2282c     10 4E 85 F1 | 	sub	fp, #16
22830                 | ' 				cf |=  0x01  |  0x02 ;
22830                 | ' 				break;
22830     B4 02 90 FD | 	jmp	#LR__3646
22834                 | LR__3634
22834     28 4E 05 F1 | 	add	fp, #40
22838     A7 2A 02 FB | 	rdlong	local07, fp
2283c     04 4E 05 F1 | 	add	fp, #4
22840     A7 1E 02 FB | 	rdlong	local01, fp
22844     2C 4E 85 F1 | 	sub	fp, #44
22848     0F 2B 0A F2 | 	cmp	local07, local01 wz
2284c     10 4E 05 51 |  if_ne	add	fp, #16
22850     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
22854     03 2A 46 55 |  if_ne	or	local07, #3
22858     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2285c     10 4E 85 51 |  if_ne	sub	fp, #16
22860     28 4E 05 F1 | 	add	fp, #40
22864     A7 2A 02 FB | 	rdlong	local07, fp
22868     04 4E 05 F1 | 	add	fp, #4
2286c     A7 20 02 FB | 	rdlong	local02, fp
22870     2C 4E 85 F1 | 	sub	fp, #44
22874     10 2B 1A F2 | 	cmp	local07, local02 wcz
22878     6C 02 90 1D |  if_a	jmp	#LR__3646
2287c     2C 4E 05 F1 | 	add	fp, #44
22880     A7 2A 02 FB | 	rdlong	local07, fp
22884     04 4E 85 F1 | 	sub	fp, #4
22888     A7 2A 62 FC | 	wrlong	local07, fp
2288c     08 4E 85 F1 | 	sub	fp, #8
22890     A7 10 68 FC | 	wrlong	#8, fp
22894     04 4E 05 F1 | 	add	fp, #4
22898     A7 16 68 FC | 	wrlong	#11, fp
2289c     18 4E 85 F1 | 	sub	fp, #24
228a0     A7 32 C2 FA | 	rdbyte	local11, fp
228a4     19 2B E2 F8 | 	getbyte	local07, local11, #0
228a8     02 2A 66 F0 | 	shl	local07, #2
228ac     A7 2A 42 FC | 	wrbyte	local07, fp
228b0     0C 4E 85 F1 | 	sub	fp, #12
228b4                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
228b4                 | ' 			continue;
228b4     80 FE 9F FD | 	jmp	#LR__3630
228b8                 | LR__3635
228b8     14 4E 05 F1 | 	add	fp, #20
228bc     A7 2A E2 FA | 	rdword	local07, fp
228c0     14 4E 85 F1 | 	sub	fp, #20
228c4     80 2A 16 F2 | 	cmp	local07, #128 wc
228c8     6C 00 90 CD |  if_b	jmp	#LR__3637
228cc     10 4E 05 F1 | 	add	fp, #16
228d0     A7 2A C2 FA | 	rdbyte	local07, fp
228d4     02 2A 46 F5 | 	or	local07, #2
228d8     A7 2A 42 FC | 	wrbyte	local07, fp
228dc     04 4E 05 F1 | 	add	fp, #4
228e0     A7 12 E2 FA | 	rdword	arg01, fp
228e4     14 4E 85 F1 | 	sub	fp, #20
228e8     01 00 00 FF 
228ec     52 15 06 F6 | 	mov	arg02, ##850
228f0     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
228f4     14 4E 05 F1 | 	add	fp, #20
228f8     A7 FA 51 FC | 	wrword	result1, fp
228fc     A7 2A E2 FA | 	rdword	local07, fp
22900     14 4E 85 F1 | 	sub	fp, #20
22904     80 2A CE F7 | 	test	local07, #128 wz
22908     2C 00 90 AD |  if_e	jmp	#LR__3636
2290c     14 4E 05 F1 | 	add	fp, #20
22910     A7 20 E2 FA | 	rdword	local02, fp
22914     7F 20 06 F5 | 	and	local02, #127
22918     01 00 00 FF 
2291c     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
22920     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
22924     10 2B C2 FA | 	rdbyte	local07, local02
22928     A7 2A 52 FC | 	wrword	local07, fp
2292c     14 4E 85 F1 | 	sub	fp, #20
22930     01 00 00 FF 
22934     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
22938                 | LR__3636
22938                 | LR__3637
22938     14 4E 05 F1 | 	add	fp, #20
2293c     A7 2A E2 FA | 	rdword	local07, fp
22940     14 4E 85 F1 | 	sub	fp, #20
22944     00 2B 16 F2 | 	cmp	local07, #256 wc
22948     88 00 90 CD |  if_b	jmp	#LR__3639
2294c     24 4E 05 F1 | 	add	fp, #36
22950     A7 2A 02 FB | 	rdlong	local07, fp
22954     01 2A 86 F1 | 	sub	local07, #1
22958     04 4E 85 F1 | 	sub	fp, #4
2295c     A7 20 02 FB | 	rdlong	local02, fp
22960     20 4E 85 F1 | 	sub	fp, #32
22964     15 21 12 F2 | 	cmp	local02, local07 wc
22968     2C 00 90 CD |  if_b	jmp	#LR__3638
2296c     10 4E 05 F1 | 	add	fp, #16
22970     A7 32 C2 FA | 	rdbyte	local11, fp
22974     19 2B E2 F8 | 	getbyte	local07, local11, #0
22978     03 2A 46 F5 | 	or	local07, #3
2297c     A7 2A 42 FC | 	wrbyte	local07, fp
22980     14 4E 05 F1 | 	add	fp, #20
22984     A7 2A 02 FB | 	rdlong	local07, fp
22988     04 4E 85 F1 | 	sub	fp, #4
2298c     A7 2A 62 FC | 	wrlong	local07, fp
22990     20 4E 85 F1 | 	sub	fp, #32
22994                 | ' 				cf |=  0x01  |  0x02 ;
22994                 | ' 				i = ni; continue;
22994     A0 FD 9F FD | 	jmp	#LR__3630
22998                 | LR__3638
22998     04 4E 05 F1 | 	add	fp, #4
2299c     A7 2E 02 FB | 	rdlong	local09, fp
229a0     1C 4E 05 F1 | 	add	fp, #28
229a4     A7 30 02 FB | 	rdlong	local10, fp
229a8     18 25 02 F6 | 	mov	local04, local10
229ac     01 24 06 F1 | 	add	local04, #1
229b0     A7 24 62 FC | 	wrlong	local04, fp
229b4     20 2E 06 F1 | 	add	local09, #32
229b8     17 31 02 F1 | 	add	local10, local09
229bc     0C 4E 85 F1 | 	sub	fp, #12
229c0     A7 22 E2 FA | 	rdword	local03, fp
229c4     14 4E 85 F1 | 	sub	fp, #20
229c8     08 22 46 F0 | 	shr	local03, #8
229cc     18 23 42 FC | 	wrbyte	local03, local10
229d0     D4 00 90 FD | 	jmp	#LR__3645
229d4                 | LR__3639
229d4     14 4E 05 F1 | 	add	fp, #20
229d8     A7 2A EA FA | 	rdword	local07, fp wz
229dc     14 4E 85 F1 | 	sub	fp, #20
229e0     20 00 90 AD |  if_e	jmp	#LR__3640
229e4     41 01 00 FF 
229e8     61 13 06 F6 | 	mov	arg01, ##@LR__4273
229ec     14 4E 05 F1 | 	add	fp, #20
229f0     A7 14 E2 FA | 	rdword	arg02, fp
229f4     14 4E 85 F1 | 	sub	fp, #20
229f8     48 CB BF FD | 	call	#_fatfs_cc_strchr
229fc     00 FA 0D F2 | 	cmp	result1, #0 wz
22a00     20 00 90 AD |  if_e	jmp	#LR__3641
22a04                 | LR__3640
22a04     14 4E 05 F1 | 	add	fp, #20
22a08     A7 BE 58 FC | 	wrword	#95, fp
22a0c     04 4E 85 F1 | 	sub	fp, #4
22a10     A7 2A C2 FA | 	rdbyte	local07, fp
22a14     03 2A 46 F5 | 	or	local07, #3
22a18     A7 2A 42 FC | 	wrbyte	local07, fp
22a1c     10 4E 85 F1 | 	sub	fp, #16
22a20     84 00 90 FD | 	jmp	#LR__3644
22a24                 | LR__3641
22a24     14 4E 05 F1 | 	add	fp, #20
22a28     A7 2A E2 FA | 	rdword	local07, fp
22a2c     14 4E 85 F1 | 	sub	fp, #20
22a30     41 2A 16 F2 | 	cmp	local07, #65 wc
22a34     24 00 90 CD |  if_b	jmp	#LR__3642
22a38     14 4E 05 F1 | 	add	fp, #20
22a3c     A7 1E E2 FA | 	rdword	local01, fp
22a40     14 4E 85 F1 | 	sub	fp, #20
22a44     5B 1E 16 F2 | 	cmp	local01, #91 wc
22a48     0C 4E 05 C1 |  if_b	add	fp, #12
22a4c     A7 2A C2 CA |  if_b	rdbyte	local07, fp
22a50     02 2A 46 C5 |  if_b	or	local07, #2
22a54     A7 2A 42 CC |  if_b	wrbyte	local07, fp
22a58     0C 4E 85 C1 |  if_b	sub	fp, #12
22a5c                 | LR__3642
22a5c     14 4E 05 F1 | 	add	fp, #20
22a60     A7 2A E2 FA | 	rdword	local07, fp
22a64     14 4E 85 F1 | 	sub	fp, #20
22a68     61 2A 16 F2 | 	cmp	local07, #97 wc
22a6c     38 00 90 CD |  if_b	jmp	#LR__3643
22a70     14 4E 05 F1 | 	add	fp, #20
22a74     A7 1E E2 FA | 	rdword	local01, fp
22a78     14 4E 85 F1 | 	sub	fp, #20
22a7c     7B 1E 16 F2 | 	cmp	local01, #123 wc
22a80     24 00 90 3D |  if_ae	jmp	#LR__3643
22a84     0C 4E 05 F1 | 	add	fp, #12
22a88     A7 2A C2 FA | 	rdbyte	local07, fp
22a8c     01 2A 46 F5 | 	or	local07, #1
22a90     A7 2A 42 FC | 	wrbyte	local07, fp
22a94     08 4E 05 F1 | 	add	fp, #8
22a98     A7 2A E2 FA | 	rdword	local07, fp
22a9c     20 2A 86 F1 | 	sub	local07, #32
22aa0     A7 2A 52 FC | 	wrword	local07, fp
22aa4     14 4E 85 F1 | 	sub	fp, #20
22aa8                 | LR__3643
22aa8                 | LR__3644
22aa8                 | LR__3645
22aa8     04 4E 05 F1 | 	add	fp, #4
22aac     A7 32 02 FB | 	rdlong	local11, fp
22ab0     19 2F 02 F6 | 	mov	local09, local11
22ab4     1C 4E 05 F1 | 	add	fp, #28
22ab8     A7 20 02 FB | 	rdlong	local02, fp
22abc     10 25 02 F6 | 	mov	local04, local02
22ac0     01 24 06 F1 | 	add	local04, #1
22ac4     A7 24 62 FC | 	wrlong	local04, fp
22ac8     10 31 02 F6 | 	mov	local10, local02
22acc     20 2E 06 F1 | 	add	local09, #32
22ad0     17 31 02 F1 | 	add	local10, local09
22ad4     0C 4E 85 F1 | 	sub	fp, #12
22ad8     A7 22 E2 FA | 	rdword	local03, fp
22adc     14 4E 85 F1 | 	sub	fp, #20
22ae0     18 23 42 FC | 	wrbyte	local03, local10
22ae4     50 FC 9F FD | 	jmp	#LR__3630
22ae8                 | LR__3646
22ae8     04 4E 05 F1 | 	add	fp, #4
22aec     A7 32 02 FB | 	rdlong	local11, fp
22af0     04 4E 85 F1 | 	sub	fp, #4
22af4     20 32 06 F1 | 	add	local11, #32
22af8     19 2B C2 FA | 	rdbyte	local07, local11
22afc     E5 2A 0E F2 | 	cmp	local07, #229 wz
22b00     04 4E 05 A1 |  if_e	add	fp, #4
22b04     A7 2A 02 AB |  if_e	rdlong	local07, fp
22b08     04 4E 85 A1 |  if_e	sub	fp, #4
22b0c     20 2A 06 A1 |  if_e	add	local07, #32
22b10     15 0B 48 AC |  if_e	wrbyte	#5, local07
22b14     24 4E 05 F1 | 	add	fp, #36
22b18     A7 2A 02 FB | 	rdlong	local07, fp
22b1c     24 4E 85 F1 | 	sub	fp, #36
22b20     08 2A 0E F2 | 	cmp	local07, #8 wz
22b24     0C 4E 05 A1 |  if_e	add	fp, #12
22b28     A7 2A C2 AA |  if_e	rdbyte	local07, fp
22b2c     02 2A 66 A0 |  if_e	shl	local07, #2
22b30     A7 2A 42 AC |  if_e	wrbyte	local07, fp
22b34     0C 4E 85 A1 |  if_e	sub	fp, #12
22b38     0C 4E 05 F1 | 	add	fp, #12
22b3c     A7 2A C2 FA | 	rdbyte	local07, fp
22b40     0C 4E 85 F1 | 	sub	fp, #12
22b44     0C 2A 06 F5 | 	and	local07, #12
22b48     0C 2A 0E F2 | 	cmp	local07, #12 wz
22b4c     18 00 90 AD |  if_e	jmp	#LR__3647
22b50     0C 4E 05 F1 | 	add	fp, #12
22b54     A7 1E C2 FA | 	rdbyte	local01, fp
22b58     0C 4E 85 F1 | 	sub	fp, #12
22b5c     03 1E 06 F5 | 	and	local01, #3
22b60     03 1E 0E F2 | 	cmp	local01, #3 wz
22b64     14 00 90 5D |  if_ne	jmp	#LR__3648
22b68                 | LR__3647
22b68     10 4E 05 F1 | 	add	fp, #16
22b6c     A7 2A C2 FA | 	rdbyte	local07, fp
22b70     02 2A 46 F5 | 	or	local07, #2
22b74     A7 2A 42 FC | 	wrbyte	local07, fp
22b78     10 4E 85 F1 | 	sub	fp, #16
22b7c                 | LR__3648
22b7c     10 4E 05 F1 | 	add	fp, #16
22b80     A7 2A C2 FA | 	rdbyte	local07, fp
22b84     10 4E 85 F1 | 	sub	fp, #16
22b88     02 2A CE F7 | 	test	local07, #2 wz
22b8c     48 00 90 5D |  if_ne	jmp	#LR__3649
22b90     0C 4E 05 F1 | 	add	fp, #12
22b94     A7 2A C2 FA | 	rdbyte	local07, fp
22b98     0C 4E 85 F1 | 	sub	fp, #12
22b9c     01 2A CE F7 | 	test	local07, #1 wz
22ba0     10 4E 05 51 |  if_ne	add	fp, #16
22ba4     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
22ba8     10 2A 46 55 |  if_ne	or	local07, #16
22bac     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22bb0     10 4E 85 51 |  if_ne	sub	fp, #16
22bb4     0C 4E 05 F1 | 	add	fp, #12
22bb8     A7 2A C2 FA | 	rdbyte	local07, fp
22bbc     0C 4E 85 F1 | 	sub	fp, #12
22bc0     04 2A CE F7 | 	test	local07, #4 wz
22bc4     10 4E 05 51 |  if_ne	add	fp, #16
22bc8     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
22bcc     08 2A 46 55 |  if_ne	or	local07, #8
22bd0     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22bd4     10 4E 85 51 |  if_ne	sub	fp, #16
22bd8                 | LR__3649
22bd8     04 4E 05 F1 | 	add	fp, #4
22bdc     A7 2A 02 FB | 	rdlong	local07, fp
22be0     0C 4E 05 F1 | 	add	fp, #12
22be4     A7 1E C2 FA | 	rdbyte	local01, fp
22be8     10 4E 85 F1 | 	sub	fp, #16
22bec     2B 2A 06 F1 | 	add	local07, #43
22bf0     15 1F 42 FC | 	wrbyte	local01, local07
22bf4                 | ' 	}
22bf4                 | ' 
22bf4                 | ' 	dp->fn[ 11 ] = cf;
22bf4                 | ' 
22bf4                 | ' 	return FR_OK;
22bf4     00 FA 05 F6 | 	mov	result1, #0
22bf8                 | LR__3650
22bf8     A7 F0 03 F6 | 	mov	ptra, fp
22bfc     B2 00 A0 FD | 	call	#popregs_
22c00                 | _fatfs_cc_create_name_ret
22c00     2D 00 64 FD | 	ret
22c04                 | 
22c04                 | _fatfs_cc_follow_path
22c04     02 4A 05 F6 | 	mov	COUNT_, #2
22c08     A8 00 A0 FD | 	call	#pushregs_
22c0c     18 F0 07 F1 | 	add	ptra, #24
22c10     04 4E 05 F1 | 	add	fp, #4
22c14     A7 12 62 FC | 	wrlong	arg01, fp
22c18     04 4E 05 F1 | 	add	fp, #4
22c1c     A7 14 62 FC | 	wrlong	arg02, fp
22c20     04 4E 85 F1 | 	sub	fp, #4
22c24     A7 FA 01 FB | 	rdlong	result1, fp
22c28     FD 1E 02 FB | 	rdlong	local01, result1
22c2c     10 4E 05 F1 | 	add	fp, #16
22c30     A7 1E 62 FC | 	wrlong	local01, fp
22c34     14 4E 85 F1 | 	sub	fp, #20
22c38     97 24 48 FB | 	callpa	#(@LR__3662-@LR__3660)>>2,fcache_load_ptr_
22c3c                 | ' )
22c3c                 | ' {
22c3c                 | ' 	FRESULT res;
22c3c                 | ' 	BYTE ns;
22c3c                 | ' 	FATFS *fs = dp->obj.fs;
22c3c                 | ' #line 3034 "ff.c"
22c3c                 | ' 	{
22c3c                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
22c3c                 | LR__3660
22c3c     08 4E 05 F1 | 	add	fp, #8
22c40     A7 1E 02 FB | 	rdlong	local01, fp
22c44     08 4E 85 F1 | 	sub	fp, #8
22c48     0F 1F C2 FA | 	rdbyte	local01, local01
22c4c     2F 1E 0E F2 | 	cmp	local01, #47 wz
22c50     18 00 90 AD |  if_e	jmp	#LR__3661
22c54     08 4E 05 F1 | 	add	fp, #8
22c58     A7 1E 02 FB | 	rdlong	local01, fp
22c5c     08 4E 85 F1 | 	sub	fp, #8
22c60     0F 1F C2 FA | 	rdbyte	local01, local01
22c64     5C 1E 0E F2 | 	cmp	local01, #92 wz
22c68     18 00 90 5D |  if_ne	jmp	#LR__3663
22c6c                 | LR__3661
22c6c     08 4E 05 F1 | 	add	fp, #8
22c70     A7 1E 02 FB | 	rdlong	local01, fp
22c74     01 1E 06 F1 | 	add	local01, #1
22c78     A7 1E 62 FC | 	wrlong	local01, fp
22c7c     08 4E 85 F1 | 	sub	fp, #8
22c80     B8 FF 9F FD | 	jmp	#LR__3660
22c84                 | LR__3662
22c84                 | LR__3663
22c84     04 4E 05 F1 | 	add	fp, #4
22c88     A7 1E 02 FB | 	rdlong	local01, fp
22c8c     08 1E 06 F1 | 	add	local01, #8
22c90     0F 01 68 FC | 	wrlong	#0, local01
22c94     04 4E 05 F1 | 	add	fp, #4
22c98     A7 1E 02 FB | 	rdlong	local01, fp
22c9c     08 4E 85 F1 | 	sub	fp, #8
22ca0     0F 1F C2 FA | 	rdbyte	local01, local01
22ca4     20 1E 16 F2 | 	cmp	local01, #32 wc
22ca8     30 00 90 3D |  if_ae	jmp	#LR__3664
22cac     04 4E 05 F1 | 	add	fp, #4
22cb0     A7 1E 02 FB | 	rdlong	local01, fp
22cb4     2B 1E 06 F1 | 	add	local01, #43
22cb8     0F 01 49 FC | 	wrbyte	#128, local01
22cbc     A7 12 02 FB | 	rdlong	arg01, fp
22cc0     04 4E 85 F1 | 	sub	fp, #4
22cc4     00 14 06 F6 | 	mov	arg02, #0
22cc8     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
22ccc     0C 4E 05 F1 | 	add	fp, #12
22cd0     A7 FA 61 FC | 	wrlong	result1, fp
22cd4     0C 4E 85 F1 | 	sub	fp, #12
22cd8     1C 01 90 FD | 	jmp	#LR__3668
22cdc                 | LR__3664
22cdc                 | ' 		for (;;) {
22cdc                 | LR__3665
22cdc     04 4E 05 F1 | 	add	fp, #4
22ce0     A7 12 02 FB | 	rdlong	arg01, fp
22ce4     04 4E 05 F1 | 	add	fp, #4
22ce8     A7 14 02 F6 | 	mov	arg02, fp
22cec     08 4E 85 F1 | 	sub	fp, #8
22cf0     14 F6 BF FD | 	call	#_fatfs_cc_create_name
22cf4     0C 4E 05 F1 | 	add	fp, #12
22cf8     A7 FA 61 FC | 	wrlong	result1, fp
22cfc     00 FA 4D F2 | 	cmps	result1, #0 wz
22d00     0C 4E 85 F1 | 	sub	fp, #12
22d04     F0 00 90 5D |  if_ne	jmp	#LR__3667
22d08     04 4E 05 F1 | 	add	fp, #4
22d0c     A7 12 02 FB | 	rdlong	arg01, fp
22d10     04 4E 85 F1 | 	sub	fp, #4
22d14     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
22d18     0C 4E 05 F1 | 	add	fp, #12
22d1c     A7 FA 61 FC | 	wrlong	result1, fp
22d20     08 4E 85 F1 | 	sub	fp, #8
22d24     A7 1E 02 FB | 	rdlong	local01, fp
22d28     2B 1E 06 F1 | 	add	local01, #43
22d2c     0F 1F C2 FA | 	rdbyte	local01, local01
22d30     0C 4E 05 F1 | 	add	fp, #12
22d34     A7 1E 42 FC | 	wrbyte	local01, fp
22d38     04 4E 85 F1 | 	sub	fp, #4
22d3c     A7 1E 0A FB | 	rdlong	local01, fp wz
22d40     0C 4E 85 F1 | 	sub	fp, #12
22d44     34 00 90 AD |  if_e	jmp	#LR__3666
22d48     0C 4E 05 F1 | 	add	fp, #12
22d4c     A7 1E 02 FB | 	rdlong	local01, fp
22d50     0C 4E 85 F1 | 	sub	fp, #12
22d54     04 1E 0E F2 | 	cmp	local01, #4 wz
22d58     9C 00 90 5D |  if_ne	jmp	#LR__3667
22d5c     10 4E 05 F1 | 	add	fp, #16
22d60     A7 1E C2 FA | 	rdbyte	local01, fp
22d64     10 4E 85 F1 | 	sub	fp, #16
22d68     04 1E CE F7 | 	test	local01, #4 wz
22d6c     0C 4E 05 A1 |  if_e	add	fp, #12
22d70     A7 0A 68 AC |  if_e	wrlong	#5, fp
22d74     0C 4E 85 A1 |  if_e	sub	fp, #12
22d78                 | ' 					}
22d78                 | ' 				}
22d78                 | ' 				break;
22d78     7C 00 90 FD | 	jmp	#LR__3667
22d7c                 | LR__3666
22d7c     10 4E 05 F1 | 	add	fp, #16
22d80     A7 1E C2 FA | 	rdbyte	local01, fp
22d84     10 4E 85 F1 | 	sub	fp, #16
22d88     04 1E CE F7 | 	test	local01, #4 wz
22d8c     68 00 90 5D |  if_ne	jmp	#LR__3667
22d90     04 4E 05 F1 | 	add	fp, #4
22d94     A7 1E 02 FB | 	rdlong	local01, fp
22d98     04 4E 85 F1 | 	sub	fp, #4
22d9c     06 1E 06 F1 | 	add	local01, #6
22da0     0F 1F C2 FA | 	rdbyte	local01, local01
22da4     10 1E CE F7 | 	test	local01, #16 wz
22da8     0C 4E 05 A1 |  if_e	add	fp, #12
22dac     A7 0A 68 AC |  if_e	wrlong	#5, fp
22db0     0C 4E 85 A1 |  if_e	sub	fp, #12
22db4                 | ' 				res = FR_NO_PATH; break;
22db4     40 00 90 AD |  if_e	jmp	#LR__3667
22db8     04 4E 05 F1 | 	add	fp, #4
22dbc     A7 20 02 FB | 	rdlong	local02, fp
22dc0     10 1F 02 F6 | 	mov	local01, local02
22dc4     10 4E 05 F1 | 	add	fp, #16
22dc8     A7 14 02 FB | 	rdlong	arg02, fp
22dcc     0A 13 02 F6 | 	mov	arg01, arg02
22dd0     34 14 06 F1 | 	add	arg02, #52
22dd4     14 4E 85 F1 | 	sub	fp, #20
22dd8     10 20 06 F1 | 	add	local02, #16
22ddc     10 21 02 FB | 	rdlong	local02, local02
22de0     FF 21 06 F5 | 	and	local02, #511
22de4     10 15 02 F1 | 	add	arg02, local02
22de8     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
22dec     08 1E 06 F1 | 	add	local01, #8
22df0     0F FB 61 FC | 	wrlong	result1, local01
22df4     E4 FE 9F FD | 	jmp	#LR__3665
22df8                 | LR__3667
22df8                 | LR__3668
22df8                 | ' 			}
22df8                 | ' #line 3090 "ff.c"
22df8                 | ' 			{
22df8                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
22df8                 | ' 			}
22df8                 | ' 		}
22df8                 | ' 	}
22df8                 | ' 
22df8                 | ' 	return res;
22df8     0C 4E 05 F1 | 	add	fp, #12
22dfc     A7 FA 01 FB | 	rdlong	result1, fp
22e00     0C 4E 85 F1 | 	sub	fp, #12
22e04     A7 F0 03 F6 | 	mov	ptra, fp
22e08     B2 00 A0 FD | 	call	#popregs_
22e0c                 | _fatfs_cc_follow_path_ret
22e0c     2D 00 64 FD | 	ret
22e10                 | 
22e10                 | _fatfs_cc_get_ldnumber
22e10     01 00 66 F6 | 	neg	_var01, #1
22e14     09 03 0A FB | 	rdlong	_var02, arg01 wz
22e18     01 05 02 F6 | 	mov	_var03, _var02
22e1c     01 FA 65 A6 |  if_e	neg	result1, #1
22e20     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
22e24     97 10 48 FB | 	callpa	#(@LR__3671-@LR__3670)>>2,fcache_load_ptr_
22e28                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
22e28                 | LR__3670
22e28     02 07 C2 FA | 	rdbyte	_var04, _var03
22e2c     03 FB E1 F8 | 	getbyte	result1, _var04, #0
22e30     20 FA 15 F2 | 	cmp	result1, #32 wc
22e34     01 04 06 F1 | 	add	_var03, #1
22e38     03 09 02 36 |  if_ae	mov	_var05, _var04
22e3c     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
22e40     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
22e44     E0 FF 9F 1D |  if_a	jmp	#LR__3670
22e48                 | LR__3671
22e48     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
22e4c     3A 06 0E F2 | 	cmp	_var04, #58 wz
22e50     40 00 90 5D |  if_ne	jmp	#LR__3673
22e54     01 0A 06 F6 | 	mov	_var06, #1
22e58     01 09 C2 FA | 	rdbyte	_var05, _var02
22e5c     30 08 16 F2 | 	cmp	_var05, #48 wc
22e60     1C 00 90 CD |  if_b	jmp	#LR__3672
22e64     01 09 C2 FA | 	rdbyte	_var05, _var02
22e68     3A 08 16 F2 | 	cmp	_var05, #58 wc
22e6c     01 0D 02 C6 |  if_b	mov	_var07, _var02
22e70     02 0C 06 C1 |  if_b	add	_var07, #2
22e74     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
22e78     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
22e7c     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
22e80                 | LR__3672
22e80     01 0A 56 F2 | 	cmps	_var06, #1 wc
22e84     05 01 02 C6 |  if_b	mov	_var01, _var06
22e88     09 05 62 CC |  if_b	wrlong	_var03, arg01
22e8c                 | ' 			vol = i;
22e8c                 | ' 			*path = tt;
22e8c                 | ' 		}
22e8c                 | ' 		return vol;
22e8c     00 FB 01 F6 | 	mov	result1, _var01
22e90     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
22e94                 | LR__3673
22e94                 | ' 	}
22e94                 | ' #line 3170 "ff.c"
22e94                 | ' 	vol = 0;
22e94                 | ' 
22e94                 | ' 	return vol;
22e94     00 FA 05 F6 | 	mov	result1, #0
22e98                 | _fatfs_cc_get_ldnumber_ret
22e98     2D 00 64 FD | 	ret
22e9c                 | 
22e9c                 | _fatfs_cc_check_fs
22e9c     04 4A 05 F6 | 	mov	COUNT_, #4
22ea0     A8 00 A0 FD | 	call	#pushregs_
22ea4     09 1F 02 F6 | 	mov	local01, arg01
22ea8     03 1E 06 F1 | 	add	local01, #3
22eac     0F 01 48 FC | 	wrbyte	#0, local01
22eb0     2D 1E 06 F1 | 	add	local01, #45
22eb4     FF FF FF FF 
22eb8     0F FF 6B FC | 	wrlong	##-1, local01
22ebc     30 1E 86 F1 | 	sub	local01, #48
22ec0     0F 13 02 F6 | 	mov	arg01, local01
22ec4     18 D5 BF FD | 	call	#_fatfs_cc_move_window
22ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
22ecc     04 FA 05 56 |  if_ne	mov	result1, #4
22ed0     94 01 90 5D |  if_ne	jmp	#LR__3684
22ed4     34 1E 06 F1 | 	add	local01, #52
22ed8     0F 13 02 F6 | 	mov	arg01, local01
22edc     FE 13 06 F1 | 	add	arg01, #510
22ee0                 | ' {
22ee0                 | ' 
22ee0                 | ' 	return *((WORD*)ptr);
22ee0     09 21 E2 FA | 	rdword	local02, arg01
22ee4     0F 23 C2 FA | 	rdbyte	local03, local01
22ee8     34 1E 86 F1 | 	sub	local01, #52
22eec     11 25 E2 F8 | 	getbyte	local04, local03, #0
22ef0     EB 24 0E F2 | 	cmp	local04, #235 wz
22ef4     11 17 02 56 |  if_ne	mov	arg03, local03
22ef8     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
22efc     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
22f00     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
22f04     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
22f08     44 01 90 5D |  if_ne	jmp	#LR__3683
22f0c     10 25 32 F9 | 	getword	local04, local02, #0
22f10     55 00 00 FF 
22f14     55 24 0E F2 | 	cmp	local04, ##43605 wz
22f18     2C 00 90 5D |  if_ne	jmp	#LR__3680
22f1c     34 1E 06 F1 | 	add	local01, #52
22f20     0F 13 02 F6 | 	mov	arg01, local01
22f24     34 1E 86 F1 | 	sub	local01, #52
22f28     52 12 06 F1 | 	add	arg01, #82
22f2c     41 01 00 FF 
22f30     68 15 06 F6 | 	mov	arg02, ##@LR__4274
22f34     08 16 06 F6 | 	mov	arg03, #8
22f38     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
22f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
22f40                 | ' 			return 0;
22f40     00 FA 05 A6 |  if_e	mov	result1, #0
22f44     20 01 90 AD |  if_e	jmp	#LR__3684
22f48                 | LR__3680
22f48     34 1E 06 F1 | 	add	local01, #52
22f4c     0F 13 02 F6 | 	mov	arg01, local01
22f50     0B 12 06 F1 | 	add	arg01, #11
22f54                 | ' {
22f54                 | ' 
22f54                 | ' 	return *((WORD*)ptr);
22f54     09 FB E1 FA | 	rdword	result1, arg01
22f58     0D 1E 06 F1 | 	add	local01, #13
22f5c     0F 23 C2 FA | 	rdbyte	local03, local01
22f60     41 1E 86 F1 | 	sub	local01, #65
22f64     FD 24 32 F9 | 	getword	local04, result1, #0
22f68     FD 14 32 F9 | 	getword	arg02, result1, #0
22f6c     01 14 86 F1 | 	sub	arg02, #1
22f70     0A 25 CA F7 | 	test	local04, arg02 wz
22f74     D8 00 90 5D |  if_ne	jmp	#LR__3682
22f78     FD 14 32 F9 | 	getword	arg02, result1, #0
22f7c     01 00 00 FF 
22f80     00 14 16 F2 | 	cmp	arg02, ##512 wc
22f84     C8 00 90 CD |  if_b	jmp	#LR__3682
22f88     FD 14 32 F9 | 	getword	arg02, result1, #0
22f8c     01 00 00 FF 
22f90     01 14 16 F2 | 	cmp	arg02, ##513 wc
22f94     B8 00 90 3D |  if_ae	jmp	#LR__3682
22f98     11 13 02 F6 | 	mov	arg01, local03
22f9c     07 12 4E F7 | 	zerox	arg01, #7 wz
22fa0     AC 00 90 AD |  if_e	jmp	#LR__3682
22fa4     11 13 E2 F8 | 	getbyte	arg01, local03, #0
22fa8     11 23 E2 F8 | 	getbyte	local03, local03, #0
22fac     01 22 86 F1 | 	sub	local03, #1
22fb0     11 13 CA F7 | 	test	arg01, local03 wz
22fb4     98 00 90 5D |  if_ne	jmp	#LR__3682
22fb8     34 1E 06 F1 | 	add	local01, #52
22fbc     0F 13 02 F6 | 	mov	arg01, local01
22fc0     34 1E 86 F1 | 	sub	local01, #52
22fc4     0E 12 06 F1 | 	add	arg01, #14
22fc8                 | ' {
22fc8                 | ' 
22fc8                 | ' 	return *((WORD*)ptr);
22fc8     09 FB E9 FA | 	rdword	result1, arg01 wz
22fcc     80 00 90 AD |  if_e	jmp	#LR__3682
22fd0     44 1E 06 F1 | 	add	local01, #68
22fd4     0F 13 C2 FA | 	rdbyte	arg01, local01
22fd8     44 1E 86 F1 | 	sub	local01, #68
22fdc     01 12 86 F1 | 	sub	arg01, #1
22fe0     02 12 16 F2 | 	cmp	arg01, #2 wc
22fe4     68 00 90 3D |  if_ae	jmp	#LR__3682
22fe8     34 1E 06 F1 | 	add	local01, #52
22fec     0F 13 02 F6 | 	mov	arg01, local01
22ff0     34 1E 86 F1 | 	sub	local01, #52
22ff4     11 12 06 F1 | 	add	arg01, #17
22ff8                 | ' {
22ff8                 | ' 
22ff8                 | ' 	return *((WORD*)ptr);
22ff8     09 FB E9 FA | 	rdword	result1, arg01 wz
22ffc     50 00 90 AD |  if_e	jmp	#LR__3682
23000     34 1E 06 F1 | 	add	local01, #52
23004     0F 13 02 F6 | 	mov	arg01, local01
23008     34 1E 86 F1 | 	sub	local01, #52
2300c     13 12 06 F1 | 	add	arg01, #19
23010                 | ' {
23010                 | ' 
23010                 | ' 	return *((WORD*)ptr);
23010     09 FB E1 FA | 	rdword	result1, arg01
23014     FD 22 32 F9 | 	getword	local03, result1, #0
23018     80 22 16 F2 | 	cmp	local03, #128 wc
2301c     20 00 90 3D |  if_ae	jmp	#LR__3681
23020     34 1E 06 F1 | 	add	local01, #52
23024     0F 13 02 F6 | 	mov	arg01, local01
23028     34 1E 86 F1 | 	sub	local01, #52
2302c     20 12 06 F1 | 	add	arg01, #32
23030                 | ' {
23030                 | ' 
23030                 | ' 	return *((DWORD*)ptr);
23030     09 FB 01 FB | 	rdlong	result1, arg01
23034     80 00 00 FF 
23038     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2303c     10 00 90 CD |  if_b	jmp	#LR__3682
23040                 | LR__3681
23040     4A 1E 06 F1 | 	add	local01, #74
23044                 | ' {
23044                 | ' 
23044                 | ' 	return *((WORD*)ptr);
23044     0F FB E9 FA | 	rdword	result1, local01 wz
23048                 | ' 			&& b != 0 && (b & (b - 1)) == 0
23048                 | ' 			&& ld_word(fs->win +  14 ) != 0
23048                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
23048                 | ' 			&& ld_word(fs->win +  17 ) != 0
23048                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
23048                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
23048                 | ' 				return 0;
23048     00 FA 05 56 |  if_ne	mov	result1, #0
2304c     18 00 90 5D |  if_ne	jmp	#LR__3684
23050                 | LR__3682
23050                 | LR__3683
23050                 | ' 		}
23050                 | ' 	}
23050                 | ' 	return sign == 0xAA55 ? 2 : 3;
23050     10 23 32 F9 | 	getword	local03, local02, #0
23054     55 00 00 FF 
23058     55 22 0E F2 | 	cmp	local03, ##43605 wz
2305c     02 24 06 A6 |  if_e	mov	local04, #2
23060     03 24 06 56 |  if_ne	mov	local04, #3
23064     12 FB 01 F6 | 	mov	result1, local04
23068                 | LR__3684
23068     A7 F0 03 F6 | 	mov	ptra, fp
2306c     B2 00 A0 FD | 	call	#popregs_
23070                 | _fatfs_cc_check_fs_ret
23070     2D 00 64 FD | 	ret
23074                 | 
23074                 | _fatfs_cc_find_volume
23074     05 4A 05 F6 | 	mov	COUNT_, #5
23078     A8 00 A0 FD | 	call	#pushregs_
2307c     24 F0 07 F1 | 	add	ptra, #36
23080     09 1F 02 F6 | 	mov	local01, arg01
23084     0A 21 02 F6 | 	mov	local02, arg02
23088     0F 13 02 F6 | 	mov	arg01, local01
2308c     00 14 06 F6 | 	mov	arg02, #0
23090     08 FE BF FD | 	call	#_fatfs_cc_check_fs
23094     02 FA 0D F2 | 	cmp	result1, #2 wz
23098     0C 00 90 AD |  if_e	jmp	#LR__3690
2309c     03 FA 15 F2 | 	cmp	result1, #3 wc
230a0     00 20 0E C2 |  if_b	cmp	local02, #0 wz
230a4     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3698
230a8                 | LR__3690
230a8                 | ' 	for (i = 0; i < 4; i++) {
230a8     00 22 06 F6 | 	mov	local03, #0
230ac     97 26 48 FB | 	callpa	#(@LR__3692-@LR__3691)>>2,fcache_load_ptr_
230b0                 | LR__3691
230b0     04 22 16 F2 | 	cmp	local03, #4 wc
230b4     44 00 90 3D |  if_ae	jmp	#LR__3693
230b8     11 25 02 F6 | 	mov	local04, local03
230bc     02 24 66 F0 | 	shl	local04, #2
230c0     14 4E 05 F1 | 	add	fp, #20
230c4     A7 24 02 F1 | 	add	local04, fp
230c8     34 1E 06 F1 | 	add	local01, #52
230cc     0F 13 02 F6 | 	mov	arg01, local01
230d0     34 1E 86 F1 | 	sub	local01, #52
230d4     BE 13 06 F1 | 	add	arg01, #446
230d8     11 15 02 F6 | 	mov	arg02, local03
230dc     04 14 66 F0 | 	shl	arg02, #4
230e0     0A 13 02 F1 | 	add	arg01, arg02
230e4     08 12 06 F1 | 	add	arg01, #8
230e8                 | ' {
230e8                 | ' 
230e8                 | ' 	return *((DWORD*)ptr);
230e8     09 FB 01 FB | 	rdlong	result1, arg01
230ec     14 4E 85 F1 | 	sub	fp, #20
230f0     12 FB 61 FC | 	wrlong	result1, local04
230f4     01 22 06 F1 | 	add	local03, #1
230f8     B4 FF 9F FD | 	jmp	#LR__3691
230fc                 | LR__3692
230fc                 | LR__3693
230fc     00 20 0E F2 | 	cmp	local02, #0 wz
23100     10 25 02 56 |  if_ne	mov	local04, local02
23104     01 24 86 51 |  if_ne	sub	local04, #1
23108     00 24 06 A6 |  if_e	mov	local04, #0
2310c     12 23 02 F6 | 	mov	local03, local04
23110                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
23110                 | ' 	}
23110                 | ' 	i = part ? part - 1 : 0;
23110                 | ' 	do {
23110                 | LR__3694
23110     11 25 02 F6 | 	mov	local04, local03
23114     02 24 66 F0 | 	shl	local04, #2
23118     14 4E 05 F1 | 	add	fp, #20
2311c     A7 24 02 F1 | 	add	local04, fp
23120     12 25 0A FB | 	rdlong	local04, local04 wz
23124     14 4E 85 F1 | 	sub	fp, #20
23128     28 00 90 AD |  if_e	jmp	#LR__3695
2312c     11 25 02 F6 | 	mov	local04, local03
23130     02 24 66 F0 | 	shl	local04, #2
23134     14 4E 05 F1 | 	add	fp, #20
23138     A7 24 02 F1 | 	add	local04, fp
2313c     12 15 02 FB | 	rdlong	arg02, local04
23140     0F 13 02 F6 | 	mov	arg01, local01
23144     14 4E 85 F1 | 	sub	fp, #20
23148     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2314c     FD 24 02 F6 | 	mov	local04, result1
23150     04 00 90 FD | 	jmp	#LR__3696
23154                 | LR__3695
23154     03 24 06 F6 | 	mov	local04, #3
23158                 | LR__3696
23158     12 27 02 F6 | 	mov	local05, local04
2315c     00 20 0E F2 | 	cmp	local02, #0 wz
23160     02 26 16 A2 |  if_e	cmp	local05, #2 wc
23164     0C 00 90 8D |  if_c_and_z	jmp	#LR__3697
23168     01 22 06 A1 |  if_e	add	local03, #1
2316c     04 22 16 A2 |  if_e	cmp	local03, #4 wc
23170     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3694
23174                 | LR__3697
23174                 | ' 	return fmt;
23174     13 FB 01 F6 | 	mov	result1, local05
23178                 | LR__3698
23178     A7 F0 03 F6 | 	mov	ptra, fp
2317c     B2 00 A0 FD | 	call	#popregs_
23180                 | _fatfs_cc_find_volume_ret
23180     2D 00 64 FD | 	ret
23184                 | 
23184                 | _fatfs_cc_mount_volume
23184     0B 4A 05 F6 | 	mov	COUNT_, #11
23188     A8 00 A0 FD | 	call	#pushregs_
2318c     0A 1F 02 F6 | 	mov	local01, arg02
23190     0B 21 02 F6 | 	mov	local02, arg03
23194     0F 01 68 FC | 	wrlong	#0, local01
23198     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2319c     FD 22 02 F6 | 	mov	local03, result1
231a0     00 22 56 F2 | 	cmps	local03, #0 wc
231a4     0B FA 05 C6 |  if_b	mov	result1, #11
231a8     3C 05 90 CD |  if_b	jmp	#LR__3710
231ac     11 17 02 F6 | 	mov	arg03, local03
231b0     02 16 66 F0 | 	shl	arg03, #2
231b4     F2 16 02 F1 | 	add	arg03, objptr
231b8     0B 25 0A FB | 	rdlong	local04, arg03 wz
231bc     0C FA 05 A6 |  if_e	mov	result1, #12
231c0     24 05 90 AD |  if_e	jmp	#LR__3710
231c4     0F 25 62 FC | 	wrlong	local04, local01
231c8     10 21 E2 F8 | 	getbyte	local02, local02, #0
231cc     FE 20 06 F5 | 	and	local02, #254
231d0     12 17 CA FA | 	rdbyte	arg03, local04 wz
231d4     4C 00 90 AD |  if_e	jmp	#LR__3701
231d8     01 24 06 F1 | 	add	local04, #1
231dc     12 13 CA FA | 	rdbyte	arg01, local04 wz
231e0     01 24 86 F1 | 	sub	local04, #1
231e4     01 FA 05 56 |  if_ne	mov	result1, #1
231e8                 | ' 
231e8                 | ' 	return Stat;
231e8     01 00 00 AF 
231ec     20 E4 05 A1 |  if_e	add	objptr, ##544
231f0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
231f4     01 00 00 AF 
231f8     20 E4 85 A1 |  if_e	sub	objptr, ##544
231fc     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
23200     01 16 CE F7 | 	test	arg03, #1 wz
23204     1C 00 90 5D |  if_ne	jmp	#LR__3700
23208     00 20 0E F2 | 	cmp	local02, #0 wz
2320c     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
23210     04 FA CD 57 |  if_ne	test	result1, #4 wz
23214                 | ' 				return FR_WRITE_PROTECTED;
23214     0A FA 05 56 |  if_ne	mov	result1, #10
23218     CC 04 90 5D |  if_ne	jmp	#LR__3710
2321c                 | ' 			}
2321c                 | ' 			return FR_OK;
2321c     00 FA 05 F6 | 	mov	result1, #0
23220     C4 04 90 FD | 	jmp	#LR__3710
23224                 | LR__3700
23224                 | LR__3701
23224     12 01 48 FC | 	wrbyte	#0, local04
23228     01 24 06 F1 | 	add	local04, #1
2322c     12 23 42 FC | 	wrbyte	local03, local04
23230     12 13 C2 FA | 	rdbyte	arg01, local04
23234     01 24 86 F1 | 	sub	local04, #1
23238     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2323c     FD 16 02 F6 | 	mov	arg03, result1
23240     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
23244     01 26 CE F7 | 	test	local05, #1 wz
23248                 | ' 		return FR_NOT_READY;
23248     03 FA 05 56 |  if_ne	mov	result1, #3
2324c     98 04 90 5D |  if_ne	jmp	#LR__3710
23250     00 20 0E F2 | 	cmp	local02, #0 wz
23254     0B 27 02 56 |  if_ne	mov	local05, arg03
23258     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2325c     04 26 CE 57 |  if_ne	test	local05, #4 wz
23260                 | ' 		return FR_WRITE_PROTECTED;
23260     0A FA 05 56 |  if_ne	mov	result1, #10
23264     80 04 90 5D |  if_ne	jmp	#LR__3710
23268     12 13 02 F6 | 	mov	arg01, local04
2326c     00 14 06 F6 | 	mov	arg02, #0
23270     00 FE BF FD | 	call	#_fatfs_cc_find_volume
23274     FD 12 02 F6 | 	mov	arg01, result1
23278     04 12 0E F2 | 	cmp	arg01, #4 wz
2327c     01 FA 05 A6 |  if_e	mov	result1, #1
23280     64 04 90 AD |  if_e	jmp	#LR__3710
23284     02 12 16 F2 | 	cmp	arg01, #2 wc
23288     0D FA 05 36 |  if_ae	mov	result1, #13
2328c     58 04 90 3D |  if_ae	jmp	#LR__3710
23290     30 24 06 F1 | 	add	local04, #48
23294     12 29 02 FB | 	rdlong	local06, local04
23298     04 24 06 F1 | 	add	local04, #4
2329c     12 13 02 F6 | 	mov	arg01, local04
232a0     34 24 86 F1 | 	sub	local04, #52
232a4     0B 12 06 F1 | 	add	arg01, #11
232a8                 | ' {
232a8                 | ' 
232a8                 | ' 	return *((WORD*)ptr);
232a8     09 FB E1 FA | 	rdword	result1, arg01
232ac     01 00 00 FF 
232b0     00 FA 0D F2 | 	cmp	result1, ##512 wz
232b4     0D FA 05 56 |  if_ne	mov	result1, #13
232b8     2C 04 90 5D |  if_ne	jmp	#LR__3710
232bc     34 24 06 F1 | 	add	local04, #52
232c0     12 13 02 F6 | 	mov	arg01, local04
232c4     34 24 86 F1 | 	sub	local04, #52
232c8     16 12 06 F1 | 	add	arg01, #22
232cc                 | ' {
232cc                 | ' 
232cc                 | ' 	return *((WORD*)ptr);
232cc     09 FB E1 FA | 	rdword	result1, arg01
232d0     FD 2A 0A F6 | 	mov	local07, result1 wz
232d4     18 00 90 5D |  if_ne	jmp	#LR__3702
232d8     34 24 06 F1 | 	add	local04, #52
232dc     12 13 02 F6 | 	mov	arg01, local04
232e0     34 24 86 F1 | 	sub	local04, #52
232e4     24 12 06 F1 | 	add	arg01, #36
232e8                 | ' {
232e8                 | ' 
232e8                 | ' 	return *((DWORD*)ptr);
232e8     09 FB 01 FB | 	rdlong	result1, arg01
232ec     FD 2A 02 F6 | 	mov	local07, result1
232f0                 | LR__3702
232f0     1C 24 06 F1 | 	add	local04, #28
232f4     12 2B 62 FC | 	wrlong	local07, local04
232f8     28 24 06 F1 | 	add	local04, #40
232fc     12 27 C2 FA | 	rdbyte	local05, local04
23300     42 24 86 F1 | 	sub	local04, #66
23304     12 27 42 FC | 	wrbyte	local05, local04
23308     12 27 C2 FA | 	rdbyte	local05, local04
2330c     02 24 86 F1 | 	sub	local04, #2
23310     01 26 0E F2 | 	cmp	local05, #1 wz
23314     02 24 06 51 |  if_ne	add	local04, #2
23318     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2331c     02 24 86 51 |  if_ne	sub	local04, #2
23320     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
23324     0D FA 05 56 |  if_ne	mov	result1, #13
23328     BC 03 90 5D |  if_ne	jmp	#LR__3710
2332c     02 24 06 F1 | 	add	local04, #2
23330     12 27 C2 FA | 	rdbyte	local05, local04
23334     13 2B 02 FD | 	qmul	local07, local05
23338     3F 24 06 F1 | 	add	local04, #63
2333c     12 27 C2 FA | 	rdbyte	local05, local04
23340     37 24 86 F1 | 	sub	local04, #55
23344     12 27 52 FC | 	wrword	local05, local04
23348     12 27 EA FA | 	rdword	local05, local04 wz
2334c     0A 24 86 F1 | 	sub	local04, #10
23350     18 2A 62 FD | 	getqx	local07
23354     20 00 90 AD |  if_e	jmp	#LR__3703
23358     0A 24 06 F1 | 	add	local04, #10
2335c     12 27 E2 FA | 	rdword	local05, local04
23360     13 23 32 F9 | 	getword	local03, local05, #0
23364     0A 24 86 F1 | 	sub	local04, #10
23368     13 27 32 F9 | 	getword	local05, local05, #0
2336c     01 26 86 F1 | 	sub	local05, #1
23370     13 23 CA F7 | 	test	local03, local05 wz
23374     08 00 90 AD |  if_e	jmp	#LR__3704
23378                 | LR__3703
23378     0D FA 05 F6 | 	mov	result1, #13
2337c     68 03 90 FD | 	jmp	#LR__3710
23380                 | LR__3704
23380     34 24 06 F1 | 	add	local04, #52
23384     12 13 02 F6 | 	mov	arg01, local04
23388     11 12 06 F1 | 	add	arg01, #17
2338c                 | ' {
2338c                 | ' 
2338c                 | ' 	return *((WORD*)ptr);
2338c     09 FB E1 FA | 	rdword	result1, arg01
23390     2C 24 86 F1 | 	sub	local04, #44
23394     12 FB 51 FC | 	wrword	result1, local04
23398     12 27 E2 FA | 	rdword	local05, local04
2339c     08 24 86 F1 | 	sub	local04, #8
233a0     13 13 52 F6 | 	abs	arg01, local05 wc
233a4     09 13 42 F8 | 	getnib	arg01, arg01, #0
233a8     09 13 8A F6 | 	negc	arg01, arg01 wz
233ac     0D FA 05 56 |  if_ne	mov	result1, #13
233b0     34 03 90 5D |  if_ne	jmp	#LR__3710
233b4     34 24 06 F1 | 	add	local04, #52
233b8     12 13 02 F6 | 	mov	arg01, local04
233bc     34 24 86 F1 | 	sub	local04, #52
233c0     13 12 06 F1 | 	add	arg01, #19
233c4                 | ' {
233c4                 | ' 
233c4                 | ' 	return *((WORD*)ptr);
233c4     09 FB E1 FA | 	rdword	result1, arg01
233c8     FD 2C 0A F6 | 	mov	local08, result1 wz
233cc     34 24 06 A1 |  if_e	add	local04, #52
233d0     12 13 02 A6 |  if_e	mov	arg01, local04
233d4     34 24 86 A1 |  if_e	sub	local04, #52
233d8     20 12 06 A1 |  if_e	add	arg01, #32
233dc                 | ' {
233dc                 | ' 
233dc                 | ' 	return *((DWORD*)ptr);
233dc     09 2D 02 AB |  if_e	rdlong	local08, arg01
233e0     34 24 06 F1 | 	add	local04, #52
233e4     12 13 02 F6 | 	mov	arg01, local04
233e8     34 24 86 F1 | 	sub	local04, #52
233ec     0E 12 06 F1 | 	add	arg01, #14
233f0                 | ' {
233f0                 | ' 
233f0                 | ' 	return *((WORD*)ptr);
233f0     09 FB E1 FA | 	rdword	result1, arg01
233f4     FD 12 02 F6 | 	mov	arg01, result1
233f8     09 27 02 F6 | 	mov	local05, arg01
233fc     0F 26 4E F7 | 	zerox	local05, #15 wz
23400     0D FA 05 A6 |  if_e	mov	result1, #13
23404     E0 02 90 AD |  if_e	jmp	#LR__3710
23408     09 2F 32 F9 | 	getword	local09, arg01, #0
2340c     15 2F 02 F1 | 	add	local09, local07
23410     08 24 06 F1 | 	add	local04, #8
23414     12 27 E2 FA | 	rdword	local05, local04
23418     08 24 86 F1 | 	sub	local04, #8
2341c     13 27 52 F6 | 	abs	local05, local05 wc
23420     04 26 46 F0 | 	shr	local05, #4
23424     13 2F 82 F3 | 	sumc	local09, local05
23428     17 2D 12 F2 | 	cmp	local08, local09 wc
2342c     0D FA 05 C6 |  if_b	mov	result1, #13
23430     B4 02 90 CD |  if_b	jmp	#LR__3710
23434     17 2D 82 F1 | 	sub	local08, local09
23438     0A 24 06 F1 | 	add	local04, #10
2343c     12 27 E2 FA | 	rdword	local05, local04
23440     13 2D 12 FD | 	qdiv	local08, local05
23444     0A 24 86 F1 | 	sub	local04, #10
23448     18 26 62 FD | 	getqx	local05
2344c     00 26 0E F2 | 	cmp	local05, #0 wz
23450     0D FA 05 A6 |  if_e	mov	result1, #13
23454     90 02 90 AD |  if_e	jmp	#LR__3710
23458     00 30 06 F6 | 	mov	local10, #0
2345c     FF FF 07 FF 
23460     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
23464     03 30 06 C6 |  if_b	mov	local10, #3
23468     7F 00 00 FF 
2346c     F6 27 16 F2 | 	cmp	local05, ##65526 wc
23470     02 30 06 C6 |  if_b	mov	local10, #2
23474     07 00 00 FF 
23478     F6 27 16 F2 | 	cmp	local05, ##4086 wc
2347c     01 30 06 C6 |  if_b	mov	local10, #1
23480     00 30 0E F2 | 	cmp	local10, #0 wz
23484     0D FA 05 A6 |  if_e	mov	result1, #13
23488     5C 02 90 AD |  if_e	jmp	#LR__3710
2348c     02 26 06 F1 | 	add	local05, #2
23490     18 24 06 F1 | 	add	local04, #24
23494     12 27 62 FC | 	wrlong	local05, local04
23498     08 24 06 F1 | 	add	local04, #8
2349c     12 29 62 FC | 	wrlong	local06, local04
234a0     14 27 02 F6 | 	mov	local05, local06
234a4     09 13 32 F9 | 	getword	arg01, arg01, #0
234a8     09 27 02 F1 | 	add	local05, arg01
234ac     04 24 06 F1 | 	add	local04, #4
234b0     12 27 62 FC | 	wrlong	local05, local04
234b4     14 27 02 F6 | 	mov	local05, local06
234b8     17 27 02 F1 | 	add	local05, local09
234bc     08 24 06 F1 | 	add	local04, #8
234c0     12 27 62 FC | 	wrlong	local05, local04
234c4     2C 24 86 F1 | 	sub	local04, #44
234c8     03 30 0E F2 | 	cmp	local10, #3 wz
234cc     5C 00 90 5D |  if_ne	jmp	#LR__3705
234d0     34 24 06 F1 | 	add	local04, #52
234d4     12 13 02 F6 | 	mov	arg01, local04
234d8     34 24 86 F1 | 	sub	local04, #52
234dc     2A 12 06 F1 | 	add	arg01, #42
234e0                 | ' {
234e0                 | ' 
234e0                 | ' 	return *((WORD*)ptr);
234e0     09 FB E9 FA | 	rdword	result1, arg01 wz
234e4     0D FA 05 56 |  if_ne	mov	result1, #13
234e8     FC 01 90 5D |  if_ne	jmp	#LR__3710
234ec     08 24 06 F1 | 	add	local04, #8
234f0     12 27 EA FA | 	rdword	local05, local04 wz
234f4     08 24 86 F1 | 	sub	local04, #8
234f8     0D FA 05 56 |  if_ne	mov	result1, #13
234fc     E8 01 90 5D |  if_ne	jmp	#LR__3710
23500     34 24 06 F1 | 	add	local04, #52
23504     12 13 02 F6 | 	mov	arg01, local04
23508     2C 12 06 F1 | 	add	arg01, #44
2350c                 | ' {
2350c                 | ' 
2350c                 | ' 	return *((DWORD*)ptr);
2350c     09 FB 01 FB | 	rdlong	result1, arg01
23510     0C 24 86 F1 | 	sub	local04, #12
23514     12 FB 61 FC | 	wrlong	result1, local04
23518     10 24 86 F1 | 	sub	local04, #16
2351c     12 33 02 FB | 	rdlong	local11, local04
23520     18 24 86 F1 | 	sub	local04, #24
23524     02 32 66 F0 | 	shl	local11, #2
23528     6C 00 90 FD | 	jmp	#LR__3707
2352c                 | LR__3705
2352c     08 24 06 F1 | 	add	local04, #8
23530     12 27 EA FA | 	rdword	local05, local04 wz
23534     08 24 86 F1 | 	sub	local04, #8
23538     0D FA 05 A6 |  if_e	mov	result1, #13
2353c     A8 01 90 AD |  if_e	jmp	#LR__3710
23540     24 24 06 F1 | 	add	local04, #36
23544     12 27 02 FB | 	rdlong	local05, local04
23548     15 27 02 F1 | 	add	local05, local07
2354c     04 24 06 F1 | 	add	local04, #4
23550     12 27 62 FC | 	wrlong	local05, local04
23554     28 24 86 F1 | 	sub	local04, #40
23558     02 30 0E F2 | 	cmp	local10, #2 wz
2355c     18 24 06 A1 |  if_e	add	local04, #24
23560     12 27 02 AB |  if_e	rdlong	local05, local04
23564     18 24 86 A1 |  if_e	sub	local04, #24
23568     01 26 66 A0 |  if_e	shl	local05, #1
2356c     24 00 90 AD |  if_e	jmp	#LR__3706
23570     18 24 06 F1 | 	add	local04, #24
23574     12 33 02 FB | 	rdlong	local11, local04
23578     19 27 02 F6 | 	mov	local05, local11
2357c     01 26 66 F0 | 	shl	local05, #1
23580     19 27 02 F1 | 	add	local05, local11
23584     01 26 46 F0 | 	shr	local05, #1
23588     18 24 86 F1 | 	sub	local04, #24
2358c     01 32 06 F5 | 	and	local11, #1
23590     19 27 02 F1 | 	add	local05, local11
23594                 | LR__3706
23594     13 33 02 F6 | 	mov	local11, local05
23598                 | LR__3707
23598     FF 33 06 F1 | 	add	local11, #511
2359c     09 32 46 F0 | 	shr	local11, #9
235a0     1C 24 06 F1 | 	add	local04, #28
235a4     12 17 02 FB | 	rdlong	arg03, local04
235a8     1C 24 86 F1 | 	sub	local04, #28
235ac     19 17 12 F2 | 	cmp	arg03, local11 wc
235b0     0D FA 05 C6 |  if_b	mov	result1, #13
235b4     30 01 90 CD |  if_b	jmp	#LR__3710
235b8     14 24 06 F1 | 	add	local04, #20
235bc     FF FF FF FF 
235c0     12 FF 6B FC | 	wrlong	##-1, local04
235c4     04 24 86 F1 | 	sub	local04, #4
235c8     FF FF FF FF 
235cc     12 FF 6B FC | 	wrlong	##-1, local04
235d0     0C 24 86 F1 | 	sub	local04, #12
235d4     12 01 49 FC | 	wrbyte	#128, local04
235d8     04 24 86 F1 | 	sub	local04, #4
235dc     03 30 0E F2 | 	cmp	local10, #3 wz
235e0     D0 00 90 5D |  if_ne	jmp	#LR__3709
235e4     34 24 06 F1 | 	add	local04, #52
235e8     12 13 02 F6 | 	mov	arg01, local04
235ec     34 24 86 F1 | 	sub	local04, #52
235f0     30 12 06 F1 | 	add	arg01, #48
235f4                 | ' {
235f4                 | ' 
235f4                 | ' 	return *((WORD*)ptr);
235f4     09 FB E1 FA | 	rdword	result1, arg01
235f8     FD 26 32 F9 | 	getword	local05, result1, #0
235fc     01 26 0E F2 | 	cmp	local05, #1 wz
23600     B0 00 90 5D |  if_ne	jmp	#LR__3709
23604     01 28 06 F1 | 	add	local06, #1
23608     12 13 02 F6 | 	mov	arg01, local04
2360c     14 15 02 F6 | 	mov	arg02, local06
23610     CC CD BF FD | 	call	#_fatfs_cc_move_window
23614     00 FA 0D F2 | 	cmp	result1, #0 wz
23618     98 00 90 5D |  if_ne	jmp	#LR__3709
2361c     04 24 06 F1 | 	add	local04, #4
23620     12 01 48 FC | 	wrbyte	#0, local04
23624     30 24 06 F1 | 	add	local04, #48
23628     12 13 02 F6 | 	mov	arg01, local04
2362c     34 24 86 F1 | 	sub	local04, #52
23630     FE 13 06 F1 | 	add	arg01, #510
23634                 | ' {
23634                 | ' 
23634                 | ' 	return *((WORD*)ptr);
23634     09 FB E1 FA | 	rdword	result1, arg01
23638     FD 26 32 F9 | 	getword	local05, result1, #0
2363c     55 00 00 FF 
23640     55 26 0E F2 | 	cmp	local05, ##43605 wz
23644     34 24 06 A1 |  if_e	add	local04, #52
23648     12 13 02 A6 |  if_e	mov	arg01, local04
2364c     34 24 86 A1 |  if_e	sub	local04, #52
23650                 | ' {
23650                 | ' 
23650                 | ' 	return *((DWORD*)ptr);
23650     09 FB 01 AB |  if_e	rdlong	result1, arg01
23654     A9 B0 20 AF 
23658     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2365c     54 00 90 5D |  if_ne	jmp	#LR__3708
23660     34 24 06 F1 | 	add	local04, #52
23664     12 13 02 F6 | 	mov	arg01, local04
23668     34 24 86 F1 | 	sub	local04, #52
2366c     E4 13 06 F1 | 	add	arg01, #484
23670                 | ' {
23670                 | ' 
23670                 | ' 	return *((DWORD*)ptr);
23670     09 FB 01 FB | 	rdlong	result1, arg01
23674     B9 A0 30 FF 
23678     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2367c     34 00 90 5D |  if_ne	jmp	#LR__3708
23680     34 24 06 F1 | 	add	local04, #52
23684     12 13 02 F6 | 	mov	arg01, local04
23688     E8 13 06 F1 | 	add	arg01, #488
2368c                 | ' {
2368c                 | ' 
2368c                 | ' 	return *((DWORD*)ptr);
2368c     09 FB 01 FB | 	rdlong	result1, arg01
23690     20 24 86 F1 | 	sub	local04, #32
23694     12 FB 61 FC | 	wrlong	result1, local04
23698     20 24 06 F1 | 	add	local04, #32
2369c     12 13 02 F6 | 	mov	arg01, local04
236a0     EC 13 06 F1 | 	add	arg01, #492
236a4                 | ' {
236a4                 | ' 
236a4                 | ' 	return *((DWORD*)ptr);
236a4     09 FB 01 FB | 	rdlong	result1, arg01
236a8     24 24 86 F1 | 	sub	local04, #36
236ac     12 FB 61 FC | 	wrlong	result1, local04
236b0     10 24 86 F1 | 	sub	local04, #16
236b4                 | LR__3708
236b4                 | LR__3709
236b4     12 31 42 FC | 	wrbyte	local10, local04
236b8     04 E4 05 F1 | 	add	objptr, #4
236bc     F2 26 E2 FA | 	rdword	local05, objptr
236c0     01 26 06 F1 | 	add	local05, #1
236c4     F2 26 52 FC | 	wrword	local05, objptr
236c8     F2 32 E2 FA | 	rdword	local11, objptr
236cc     06 24 06 F1 | 	add	local04, #6
236d0     12 33 52 FC | 	wrword	local11, local04
236d4     04 E4 05 F1 | 	add	objptr, #4
236d8     06 24 06 F1 | 	add	local04, #6
236dc     12 E5 61 FC | 	wrlong	objptr, local04
236e0                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
236e0                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
236e0                 | ' 			{
236e0                 | ' 
236e0                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
236e0                 | ' 
236e0                 | ' 
236e0                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
236e0                 | ' 
236e0                 | ' 			}
236e0                 | ' 		}
236e0                 | ' 
236e0                 | ' 
236e0                 | ' 	}
236e0                 | ' 
236e0                 | ' 	fs->fs_type = (BYTE)fmt;
236e0                 | ' 	fs->id = ++Fsid;
236e0                 | ' 
236e0                 | ' 	fs->lfnbuf = LfnBuf;
236e0                 | ' #line 3567 "ff.c"
236e0                 | ' 	return FR_OK;
236e0     00 FA 05 F6 | 	mov	result1, #0
236e4     08 E4 85 F1 | 	sub	objptr, #8
236e8                 | LR__3710
236e8     A7 F0 03 F6 | 	mov	ptra, fp
236ec     B2 00 A0 FD | 	call	#popregs_
236f0                 | _fatfs_cc_mount_volume_ret
236f0     2D 00 64 FD | 	ret
236f4                 | 
236f4                 | _fatfs_cc_validate
236f4     09 01 0A F6 | 	mov	_var01, arg01 wz
236f8     09 02 06 F6 | 	mov	_var02, #9
236fc     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
23700     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
23704     50 00 90 AD |  if_e	jmp	#LR__3720
23708     04 00 06 F1 | 	add	_var01, #4
2370c     00 07 E2 FA | 	rdword	_var04, _var01
23710     04 00 86 F1 | 	sub	_var01, #4
23714     00 13 02 FB | 	rdlong	arg01, _var01
23718     06 12 06 F1 | 	add	arg01, #6
2371c     09 FB E1 FA | 	rdword	result1, arg01
23720     FD 06 0A F2 | 	cmp	_var04, result1 wz
23724     30 00 90 5D |  if_ne	jmp	#LR__3720
23728     00 07 02 FB | 	rdlong	_var04, _var01
2372c     01 06 06 F1 | 	add	_var04, #1
23730     03 13 CA FA | 	rdbyte	arg01, _var04 wz
23734     01 FA 05 56 |  if_ne	mov	result1, #1
23738                 | ' 
23738                 | ' 	return Stat;
23738     01 00 00 AF 
2373c     20 E4 05 A1 |  if_e	add	objptr, ##544
23740     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
23744     01 00 00 AF 
23748     20 E4 85 A1 |  if_e	sub	objptr, ##544
2374c     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
23750     01 04 CE F7 | 	test	_var03, #1 wz
23754     00 02 06 A6 |  if_e	mov	_var02, #0
23758                 | LR__3720
23758     00 02 0E F2 | 	cmp	_var02, #0 wz
2375c     00 05 02 AB |  if_e	rdlong	_var03, _var01
23760     00 04 06 56 |  if_ne	mov	_var03, #0
23764     0A 05 62 FC | 	wrlong	_var03, arg02
23768                 | ' 			res = FR_OK;
23768                 | ' 		}
23768                 | ' 
23768                 | ' 	}
23768                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
23768                 | ' 	return res;
23768     01 FB 01 F6 | 	mov	result1, _var02
2376c                 | _fatfs_cc_validate_ret
2376c     2D 00 64 FD | 	ret
23770                 | 
23770                 | _fatfs_cc_f_mount
23770     01 4A 05 F6 | 	mov	COUNT_, #1
23774     A8 00 A0 FD | 	call	#pushregs_
23778     20 F0 07 F1 | 	add	ptra, #32
2377c     04 4E 05 F1 | 	add	fp, #4
23780     A7 12 62 FC | 	wrlong	arg01, fp
23784     04 4E 05 F1 | 	add	fp, #4
23788     A7 14 62 FC | 	wrlong	arg02, fp
2378c     04 4E 05 F1 | 	add	fp, #4
23790     A7 16 42 FC | 	wrbyte	arg03, fp
23794     04 4E 85 F1 | 	sub	fp, #4
23798     A7 16 02 FB | 	rdlong	arg03, fp
2379c     14 4E 05 F1 | 	add	fp, #20
237a0     A7 16 62 FC | 	wrlong	arg03, fp
237a4     A7 12 02 F6 | 	mov	arg01, fp
237a8     1C 4E 85 F1 | 	sub	fp, #28
237ac     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
237b0     14 4E 05 F1 | 	add	fp, #20
237b4     A7 FA 61 FC | 	wrlong	result1, fp
237b8     14 4E 85 F1 | 	sub	fp, #20
237bc     00 FA 55 F2 | 	cmps	result1, #0 wc
237c0     0B FA 05 C6 |  if_b	mov	result1, #11
237c4     C0 00 90 CD |  if_b	jmp	#LR__3731
237c8     14 4E 05 F1 | 	add	fp, #20
237cc     A7 16 02 FB | 	rdlong	arg03, fp
237d0     02 16 66 F0 | 	shl	arg03, #2
237d4     F2 16 02 F1 | 	add	arg03, objptr
237d8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
237dc     04 4E 85 F1 | 	sub	fp, #4
237e0     A7 16 62 FC | 	wrlong	arg03, fp
237e4     10 4E 85 F1 | 	sub	fp, #16
237e8     28 00 90 AD |  if_e	jmp	#LR__3730
237ec     10 4E 05 F1 | 	add	fp, #16
237f0     A7 16 02 FB | 	rdlong	arg03, fp
237f4     10 4E 85 F1 | 	sub	fp, #16
237f8     01 16 06 F1 | 	add	arg03, #1
237fc     0B 13 C2 FA | 	rdbyte	arg01, arg03
23800     20 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
23804     10 4E 05 F1 | 	add	fp, #16
23808     A7 16 02 FB | 	rdlong	arg03, fp
2380c     10 4E 85 F1 | 	sub	fp, #16
23810     0B 01 48 FC | 	wrbyte	#0, arg03
23814                 | LR__3730
23814     04 4E 05 F1 | 	add	fp, #4
23818     A7 1E 0A FB | 	rdlong	local01, fp wz
2381c     04 4E 85 F1 | 	sub	fp, #4
23820     04 4E 05 51 |  if_ne	add	fp, #4
23824     A7 1E 02 5B |  if_ne	rdlong	local01, fp
23828     04 4E 85 51 |  if_ne	sub	fp, #4
2382c     0F 01 48 5C |  if_ne	wrbyte	#0, local01
23830     14 4E 05 F1 | 	add	fp, #20
23834     A7 1E 02 FB | 	rdlong	local01, fp
23838     02 1E 66 F0 | 	shl	local01, #2
2383c     F2 1E 02 F1 | 	add	local01, objptr
23840     10 4E 85 F1 | 	sub	fp, #16
23844     A7 16 02 FB | 	rdlong	arg03, fp
23848     0F 17 62 FC | 	wrlong	arg03, local01
2384c     08 4E 05 F1 | 	add	fp, #8
23850     A7 1E CA FA | 	rdbyte	local01, fp wz
23854     0C 4E 85 F1 | 	sub	fp, #12
23858     00 FA 05 A6 |  if_e	mov	result1, #0
2385c     28 00 90 AD |  if_e	jmp	#LR__3731
23860     08 4E 05 F1 | 	add	fp, #8
23864     A7 12 02 F6 | 	mov	arg01, fp
23868     04 4E 85 F1 | 	sub	fp, #4
2386c     A7 14 02 F6 | 	mov	arg02, fp
23870     04 4E 85 F1 | 	sub	fp, #4
23874     00 16 06 F6 | 	mov	arg03, #0
23878     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2387c     18 4E 05 F1 | 	add	fp, #24
23880     A7 FA 61 FC | 	wrlong	result1, fp
23884                 | ' 
23884                 | ' 	res = mount_volume(&path, &fs, 0);
23884                 | ' 	return res ;
23884     18 4E 85 F1 | 	sub	fp, #24
23888                 | LR__3731
23888     A7 F0 03 F6 | 	mov	ptra, fp
2388c     B2 00 A0 FD | 	call	#popregs_
23890                 | _fatfs_cc_f_mount_ret
23890     2D 00 64 FD | 	ret
23894                 | 
23894                 | _fatfs_cc_f_open
23894     02 4A 05 F6 | 	mov	COUNT_, #2
23898     A8 00 A0 FD | 	call	#pushregs_
2389c     60 F0 07 F1 | 	add	ptra, #96
238a0     04 4E 05 F1 | 	add	fp, #4
238a4     A7 12 62 FC | 	wrlong	arg01, fp
238a8     04 4E 05 F1 | 	add	fp, #4
238ac     A7 14 62 FC | 	wrlong	arg02, fp
238b0     04 4E 05 F1 | 	add	fp, #4
238b4     A7 16 42 FC | 	wrbyte	arg03, fp
238b8     08 4E 85 F1 | 	sub	fp, #8
238bc     A7 18 0A FB | 	rdlong	arg04, fp wz
238c0     04 4E 85 F1 | 	sub	fp, #4
238c4     09 FA 05 A6 |  if_e	mov	result1, #9
238c8     98 06 90 AD |  if_e	jmp	#LR__3757
238cc     0C 4E 05 F1 | 	add	fp, #12
238d0     A7 18 C2 FA | 	rdbyte	arg04, fp
238d4     3F 18 06 F5 | 	and	arg04, #63
238d8     A7 18 42 FC | 	wrbyte	arg04, fp
238dc     04 4E 85 F1 | 	sub	fp, #4
238e0     A7 12 02 F6 | 	mov	arg01, fp
238e4     3C 4E 05 F1 | 	add	fp, #60
238e8     A7 14 02 F6 | 	mov	arg02, fp
238ec     38 4E 85 F1 | 	sub	fp, #56
238f0     A7 16 C2 FA | 	rdbyte	arg03, fp
238f4     0C 4E 85 F1 | 	sub	fp, #12
238f8     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
238fc     10 4E 05 F1 | 	add	fp, #16
23900     A7 FA 61 FC | 	wrlong	result1, fp
23904     10 4E 85 F1 | 	sub	fp, #16
23908     00 FA 0D F2 | 	cmp	result1, #0 wz
2390c     2C 06 90 5D |  if_ne	jmp	#LR__3756
23910     44 4E 05 F1 | 	add	fp, #68
23914     A7 18 02 FB | 	rdlong	arg04, fp
23918     30 4E 85 F1 | 	sub	fp, #48
2391c     A7 18 62 FC | 	wrlong	arg04, fp
23920     A7 12 02 F6 | 	mov	arg01, fp
23924     0C 4E 85 F1 | 	sub	fp, #12
23928     A7 1E 02 FB | 	rdlong	local01, fp
2392c     08 4E 85 F1 | 	sub	fp, #8
23930     0F 15 02 F6 | 	mov	arg02, local01
23934     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
23938     10 4E 05 F1 | 	add	fp, #16
2393c     A7 FA 61 FC | 	wrlong	result1, fp
23940     10 4E 85 F1 | 	sub	fp, #16
23944     00 FA 0D F2 | 	cmp	result1, #0 wz
23948     1C 00 90 5D |  if_ne	jmp	#LR__3740
2394c     3F 4E 05 F1 | 	add	fp, #63
23950     A7 18 C2 FA | 	rdbyte	arg04, fp
23954     3F 4E 85 F1 | 	sub	fp, #63
23958     80 18 CE F7 | 	test	arg04, #128 wz
2395c     10 4E 05 51 |  if_ne	add	fp, #16
23960     A7 0C 68 5C |  if_ne	wrlong	#6, fp
23964     10 4E 85 51 |  if_ne	sub	fp, #16
23968                 | LR__3740
23968     0C 4E 05 F1 | 	add	fp, #12
2396c     A7 18 C2 FA | 	rdbyte	arg04, fp
23970     0C 4E 85 F1 | 	sub	fp, #12
23974     1C 18 CE F7 | 	test	arg04, #28 wz
23978     F0 01 90 AD |  if_e	jmp	#LR__3745
2397c     10 4E 05 F1 | 	add	fp, #16
23980     A7 1E 0A FB | 	rdlong	local01, fp wz
23984     10 4E 85 F1 | 	sub	fp, #16
23988     48 00 90 AD |  if_e	jmp	#LR__3742
2398c     10 4E 05 F1 | 	add	fp, #16
23990     A7 18 02 FB | 	rdlong	arg04, fp
23994     10 4E 85 F1 | 	sub	fp, #16
23998     04 18 0E F2 | 	cmp	arg04, #4 wz
2399c     1C 00 90 5D |  if_ne	jmp	#LR__3741
239a0     14 4E 05 F1 | 	add	fp, #20
239a4     A7 12 02 F6 | 	mov	arg01, fp
239a8     14 4E 85 F1 | 	sub	fp, #20
239ac     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
239b0     10 4E 05 F1 | 	add	fp, #16
239b4     A7 FA 61 FC | 	wrlong	result1, fp
239b8     10 4E 85 F1 | 	sub	fp, #16
239bc                 | LR__3741
239bc     0C 4E 05 F1 | 	add	fp, #12
239c0     A7 1E C2 FA | 	rdbyte	local01, fp
239c4     08 1E 46 F5 | 	or	local01, #8
239c8     A7 1E 42 FC | 	wrbyte	local01, fp
239cc     0C 4E 85 F1 | 	sub	fp, #12
239d0     3C 00 90 FD | 	jmp	#LR__3744
239d4                 | LR__3742
239d4     1A 4E 05 F1 | 	add	fp, #26
239d8     A7 1E C2 FA | 	rdbyte	local01, fp
239dc     1A 4E 85 F1 | 	sub	fp, #26
239e0     11 1E CE F7 | 	test	local01, #17 wz
239e4     10 4E 05 51 |  if_ne	add	fp, #16
239e8     A7 0E 68 5C |  if_ne	wrlong	#7, fp
239ec     10 4E 85 51 |  if_ne	sub	fp, #16
239f0     1C 00 90 5D |  if_ne	jmp	#LR__3743
239f4     0C 4E 05 F1 | 	add	fp, #12
239f8     A7 1E C2 FA | 	rdbyte	local01, fp
239fc     0C 4E 85 F1 | 	sub	fp, #12
23a00     04 1E CE F7 | 	test	local01, #4 wz
23a04     10 4E 05 51 |  if_ne	add	fp, #16
23a08     A7 10 68 5C |  if_ne	wrlong	#8, fp
23a0c     10 4E 85 51 |  if_ne	sub	fp, #16
23a10                 | LR__3743
23a10                 | LR__3744
23a10     10 4E 05 F1 | 	add	fp, #16
23a14     A7 1E 0A FB | 	rdlong	local01, fp wz
23a18     10 4E 85 F1 | 	sub	fp, #16
23a1c     A8 01 90 5D |  if_ne	jmp	#LR__3748
23a20     0C 4E 05 F1 | 	add	fp, #12
23a24     A7 1E C2 FA | 	rdbyte	local01, fp
23a28     0C 4E 85 F1 | 	sub	fp, #12
23a2c     08 1E CE F7 | 	test	local01, #8 wz
23a30     94 01 90 AD |  if_e	jmp	#LR__3748
23a34     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
23a38     54 4E 05 F1 | 	add	fp, #84
23a3c     A7 FA 61 FC | 	wrlong	result1, fp
23a40     24 4E 85 F1 | 	sub	fp, #36
23a44     A7 12 02 FB | 	rdlong	arg01, fp
23a48     0E 12 06 F1 | 	add	arg01, #14
23a4c     09 FB 61 FC | 	wrlong	result1, arg01
23a50     A7 12 02 FB | 	rdlong	arg01, fp
23a54     16 12 06 F1 | 	add	arg01, #22
23a58     24 4E 05 F1 | 	add	fp, #36
23a5c     A7 14 02 FB | 	rdlong	arg02, fp
23a60     09 15 62 FC | 	wrlong	arg02, arg01
23a64     10 4E 85 F1 | 	sub	fp, #16
23a68     A7 12 02 FB | 	rdlong	arg01, fp
23a6c     14 4E 85 F1 | 	sub	fp, #20
23a70     A7 14 02 FB | 	rdlong	arg02, fp
23a74     30 4E 85 F1 | 	sub	fp, #48
23a78     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
23a7c     48 4E 05 F1 | 	add	fp, #72
23a80     A7 FA 61 FC | 	wrlong	result1, fp
23a84     18 4E 85 F1 | 	sub	fp, #24
23a88     A7 1E 02 FB | 	rdlong	local01, fp
23a8c     0B 1E 06 F1 | 	add	local01, #11
23a90     0F 41 48 FC | 	wrbyte	#32, local01
23a94     14 4E 05 F1 | 	add	fp, #20
23a98     A7 12 02 FB | 	rdlong	arg01, fp
23a9c     14 4E 85 F1 | 	sub	fp, #20
23aa0     A7 14 02 FB | 	rdlong	arg02, fp
23aa4     30 4E 85 F1 | 	sub	fp, #48
23aa8     00 16 06 F6 | 	mov	arg03, #0
23aac     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
23ab0     30 4E 05 F1 | 	add	fp, #48
23ab4     A7 12 02 FB | 	rdlong	arg01, fp
23ab8     1C 12 06 F1 | 	add	arg01, #28
23abc     09 01 68 FC | 	wrlong	#0, arg01
23ac0     14 4E 05 F1 | 	add	fp, #20
23ac4     A7 1E 02 FB | 	rdlong	local01, fp
23ac8     03 1E 06 F1 | 	add	local01, #3
23acc     0F 03 48 FC | 	wrbyte	#1, local01
23ad0     04 4E 05 F1 | 	add	fp, #4
23ad4     A7 1E 0A FB | 	rdlong	local01, fp wz
23ad8     48 4E 85 F1 | 	sub	fp, #72
23adc     E8 00 90 AD |  if_e	jmp	#LR__3748
23ae0     44 4E 05 F1 | 	add	fp, #68
23ae4     A7 1E 02 FB | 	rdlong	local01, fp
23ae8     30 1E 06 F1 | 	add	local01, #48
23aec     0F 1F 02 FB | 	rdlong	local01, local01
23af0     14 4E 05 F1 | 	add	fp, #20
23af4     A7 1E 62 FC | 	wrlong	local01, fp
23af8     44 4E 85 F1 | 	sub	fp, #68
23afc     A7 12 02 F6 | 	mov	arg01, fp
23b00     34 4E 05 F1 | 	add	fp, #52
23b04     A7 14 02 FB | 	rdlong	arg02, fp
23b08     48 4E 85 F1 | 	sub	fp, #72
23b0c     00 16 06 F6 | 	mov	arg03, #0
23b10     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
23b14     10 4E 05 F1 | 	add	fp, #16
23b18     A7 FA 61 FC | 	wrlong	result1, fp
23b1c     10 4E 85 F1 | 	sub	fp, #16
23b20     00 FA 0D F2 | 	cmp	result1, #0 wz
23b24     A0 00 90 5D |  if_ne	jmp	#LR__3748
23b28     44 4E 05 F1 | 	add	fp, #68
23b2c     A7 12 02 FB | 	rdlong	arg01, fp
23b30     14 4E 05 F1 | 	add	fp, #20
23b34     A7 14 02 FB | 	rdlong	arg02, fp
23b38     58 4E 85 F1 | 	sub	fp, #88
23b3c     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
23b40     10 4E 05 F1 | 	add	fp, #16
23b44     A7 FA 61 FC | 	wrlong	result1, fp
23b48     34 4E 05 F1 | 	add	fp, #52
23b4c     A7 18 02 FB | 	rdlong	arg04, fp
23b50     04 4E 05 F1 | 	add	fp, #4
23b54     A7 1E 02 FB | 	rdlong	local01, fp
23b58     48 4E 85 F1 | 	sub	fp, #72
23b5c     01 1E 86 F1 | 	sub	local01, #1
23b60     10 18 06 F1 | 	add	arg04, #16
23b64     0C 1F 62 FC | 	wrlong	local01, arg04
23b68     5C 00 90 FD | 	jmp	#LR__3748
23b6c                 | LR__3745
23b6c     10 4E 05 F1 | 	add	fp, #16
23b70     A7 18 0A FB | 	rdlong	arg04, fp wz
23b74     10 4E 85 F1 | 	sub	fp, #16
23b78     4C 00 90 5D |  if_ne	jmp	#LR__3747
23b7c     1A 4E 05 F1 | 	add	fp, #26
23b80     A7 18 C2 FA | 	rdbyte	arg04, fp
23b84     1A 4E 85 F1 | 	sub	fp, #26
23b88     10 18 CE F7 | 	test	arg04, #16 wz
23b8c     10 4E 05 51 |  if_ne	add	fp, #16
23b90     A7 08 68 5C |  if_ne	wrlong	#4, fp
23b94     10 4E 85 51 |  if_ne	sub	fp, #16
23b98     2C 00 90 5D |  if_ne	jmp	#LR__3746
23b9c     0C 4E 05 F1 | 	add	fp, #12
23ba0     A7 18 C2 FA | 	rdbyte	arg04, fp
23ba4     0C 4E 85 F1 | 	sub	fp, #12
23ba8     02 18 CE F7 | 	test	arg04, #2 wz
23bac     1A 4E 05 51 |  if_ne	add	fp, #26
23bb0     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
23bb4     1A 4E 85 51 |  if_ne	sub	fp, #26
23bb8     01 1E CE 57 |  if_ne	test	local01, #1 wz
23bbc     10 4E 05 51 |  if_ne	add	fp, #16
23bc0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
23bc4     10 4E 85 51 |  if_ne	sub	fp, #16
23bc8                 | LR__3746
23bc8                 | LR__3747
23bc8                 | LR__3748
23bc8     10 4E 05 F1 | 	add	fp, #16
23bcc     A7 1E 0A FB | 	rdlong	local01, fp wz
23bd0     10 4E 85 F1 | 	sub	fp, #16
23bd4     60 00 90 5D |  if_ne	jmp	#LR__3749
23bd8     0C 4E 05 F1 | 	add	fp, #12
23bdc     A7 20 C2 FA | 	rdbyte	local02, fp
23be0     0C 4E 85 F1 | 	sub	fp, #12
23be4     08 20 CE F7 | 	test	local02, #8 wz
23be8     0C 4E 05 51 |  if_ne	add	fp, #12
23bec     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
23bf0     40 20 46 55 |  if_ne	or	local02, #64
23bf4     A7 20 42 5C |  if_ne	wrbyte	local02, fp
23bf8     0C 4E 85 51 |  if_ne	sub	fp, #12
23bfc     04 4E 05 F1 | 	add	fp, #4
23c00     A7 20 02 FB | 	rdlong	local02, fp
23c04     40 4E 05 F1 | 	add	fp, #64
23c08     A7 1E 02 FB | 	rdlong	local01, fp
23c0c     30 1E 06 F1 | 	add	local01, #48
23c10     0F 1F 02 FB | 	rdlong	local01, local01
23c14     20 20 06 F1 | 	add	local02, #32
23c18     10 1F 62 FC | 	wrlong	local01, local02
23c1c     40 4E 85 F1 | 	sub	fp, #64
23c20     A7 20 02 FB | 	rdlong	local02, fp
23c24     2C 4E 05 F1 | 	add	fp, #44
23c28     A7 1E 02 FB | 	rdlong	local01, fp
23c2c     30 4E 85 F1 | 	sub	fp, #48
23c30     24 20 06 F1 | 	add	local02, #36
23c34     10 1F 62 FC | 	wrlong	local01, local02
23c38                 | LR__3749
23c38     10 4E 05 F1 | 	add	fp, #16
23c3c     A7 20 0A FB | 	rdlong	local02, fp wz
23c40     10 4E 85 F1 | 	sub	fp, #16
23c44     F4 02 90 5D |  if_ne	jmp	#LR__3755
23c48     04 4E 05 F1 | 	add	fp, #4
23c4c     A7 20 02 FB | 	rdlong	local02, fp
23c50     40 4E 05 F1 | 	add	fp, #64
23c54     A7 12 02 FB | 	rdlong	arg01, fp
23c58     14 4E 85 F1 | 	sub	fp, #20
23c5c     A7 14 02 FB | 	rdlong	arg02, fp
23c60     30 4E 85 F1 | 	sub	fp, #48
23c64     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
23c68     08 20 06 F1 | 	add	local02, #8
23c6c     10 FB 61 FC | 	wrlong	result1, local02
23c70     04 4E 05 F1 | 	add	fp, #4
23c74     A7 20 02 FB | 	rdlong	local02, fp
23c78     2C 4E 05 F1 | 	add	fp, #44
23c7c     A7 12 02 FB | 	rdlong	arg01, fp
23c80     1C 12 06 F1 | 	add	arg01, #28
23c84                 | ' {
23c84                 | ' 
23c84                 | ' 	return *((DWORD*)ptr);
23c84     09 FB 01 FB | 	rdlong	result1, arg01
23c88     0C 20 06 F1 | 	add	local02, #12
23c8c     10 FB 61 FC | 	wrlong	result1, local02
23c90     2C 4E 85 F1 | 	sub	fp, #44
23c94     A7 20 02 FB | 	rdlong	local02, fp
23c98     40 4E 05 F1 | 	add	fp, #64
23c9c     A7 1E 02 FB | 	rdlong	local01, fp
23ca0     10 1F 62 FC | 	wrlong	local01, local02
23ca4     40 4E 85 F1 | 	sub	fp, #64
23ca8     A7 20 02 FB | 	rdlong	local02, fp
23cac     40 4E 05 F1 | 	add	fp, #64
23cb0     A7 1E 02 FB | 	rdlong	local01, fp
23cb4     06 1E 06 F1 | 	add	local01, #6
23cb8     0F 1F E2 FA | 	rdword	local01, local01
23cbc     04 20 06 F1 | 	add	local02, #4
23cc0     10 1F 52 FC | 	wrword	local01, local02
23cc4     40 4E 85 F1 | 	sub	fp, #64
23cc8     A7 20 02 FB | 	rdlong	local02, fp
23ccc     08 4E 05 F1 | 	add	fp, #8
23cd0     A7 1E C2 FA | 	rdbyte	local01, fp
23cd4     10 20 06 F1 | 	add	local02, #16
23cd8     10 1F 42 FC | 	wrbyte	local01, local02
23cdc     08 4E 85 F1 | 	sub	fp, #8
23ce0     A7 20 02 FB | 	rdlong	local02, fp
23ce4     11 20 06 F1 | 	add	local02, #17
23ce8     10 01 48 FC | 	wrbyte	#0, local02
23cec     A7 20 02 FB | 	rdlong	local02, fp
23cf0     1C 20 06 F1 | 	add	local02, #28
23cf4     10 01 68 FC | 	wrlong	#0, local02
23cf8     A7 20 02 FB | 	rdlong	local02, fp
23cfc     14 20 06 F1 | 	add	local02, #20
23d00     10 01 68 FC | 	wrlong	#0, local02
23d04     A7 12 02 FB | 	rdlong	arg01, fp
23d08     04 4E 85 F1 | 	sub	fp, #4
23d0c     28 12 06 F1 | 	add	arg01, #40
23d10     00 14 06 F6 | 	mov	arg02, #0
23d14     09 16 C6 F9 | 	decod	arg03, #9
23d18     98 00 A0 FD | 	call	#\builtin_bytefill_
23d1c     0C 4E 05 F1 | 	add	fp, #12
23d20     A7 20 C2 FA | 	rdbyte	local02, fp
23d24     0C 4E 85 F1 | 	sub	fp, #12
23d28     20 20 CE F7 | 	test	local02, #32 wz
23d2c     0C 02 90 AD |  if_e	jmp	#LR__3754
23d30     04 4E 05 F1 | 	add	fp, #4
23d34     A7 1E 02 FB | 	rdlong	local01, fp
23d38     04 4E 85 F1 | 	sub	fp, #4
23d3c     0C 1E 06 F1 | 	add	local01, #12
23d40     0F 21 02 FB | 	rdlong	local02, local01
23d44     01 20 16 F2 | 	cmp	local02, #1 wc
23d48     F0 01 90 CD |  if_b	jmp	#LR__3754
23d4c     04 4E 05 F1 | 	add	fp, #4
23d50     A7 1E 02 FB | 	rdlong	local01, fp
23d54     0F 21 02 F6 | 	mov	local02, local01
23d58     0C 1E 06 F1 | 	add	local01, #12
23d5c     0F 1F 02 FB | 	rdlong	local01, local01
23d60     14 20 06 F1 | 	add	local02, #20
23d64     10 1F 62 FC | 	wrlong	local01, local02
23d68     40 4E 05 F1 | 	add	fp, #64
23d6c     A7 20 02 FB | 	rdlong	local02, fp
23d70     0A 20 06 F1 | 	add	local02, #10
23d74     10 21 E2 FA | 	rdword	local02, local02
23d78     09 20 66 F0 | 	shl	local02, #9
23d7c     08 4E 05 F1 | 	add	fp, #8
23d80     A7 20 62 FC | 	wrlong	local02, fp
23d84     48 4E 85 F1 | 	sub	fp, #72
23d88     A7 20 02 FB | 	rdlong	local02, fp
23d8c     08 20 06 F1 | 	add	local02, #8
23d90     10 1F 02 FB | 	rdlong	local01, local02
23d94     4C 4E 05 F1 | 	add	fp, #76
23d98     A7 1E 62 FC | 	wrlong	local01, fp
23d9c                 | ' 				fp->fptr = fp->obj.objsize;
23d9c                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
23d9c                 | ' 				clst = fp->obj.sclust;
23d9c                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
23d9c     4C 4E 85 F1 | 	sub	fp, #76
23da0     A7 20 02 FB | 	rdlong	local02, fp
23da4     0C 20 06 F1 | 	add	local02, #12
23da8     10 1F 02 FB | 	rdlong	local01, local02
23dac     58 4E 05 F1 | 	add	fp, #88
23db0     A7 1E 62 FC | 	wrlong	local01, fp
23db4     5C 4E 85 F1 | 	sub	fp, #92
23db8                 | LR__3750
23db8     10 4E 05 F1 | 	add	fp, #16
23dbc     A7 20 0A FB | 	rdlong	local02, fp wz
23dc0     10 4E 85 F1 | 	sub	fp, #16
23dc4     94 00 90 5D |  if_ne	jmp	#LR__3751
23dc8     5C 4E 05 F1 | 	add	fp, #92
23dcc     A7 20 02 FB | 	rdlong	local02, fp
23dd0     10 4E 85 F1 | 	sub	fp, #16
23dd4     A7 1E 02 FB | 	rdlong	local01, fp
23dd8     4C 4E 85 F1 | 	sub	fp, #76
23ddc     0F 21 1A F2 | 	cmp	local02, local01 wcz
23de0     78 00 90 ED |  if_be	jmp	#LR__3751
23de4     04 4E 05 F1 | 	add	fp, #4
23de8     A7 12 02 FB | 	rdlong	arg01, fp
23dec     4C 4E 05 F1 | 	add	fp, #76
23df0     A7 14 02 FB | 	rdlong	arg02, fp
23df4     50 4E 85 F1 | 	sub	fp, #80
23df8     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
23dfc     50 4E 05 F1 | 	add	fp, #80
23e00     A7 FA 61 FC | 	wrlong	result1, fp
23e04     50 4E 85 F1 | 	sub	fp, #80
23e08     02 FA 15 F2 | 	cmp	result1, #2 wc
23e0c     10 4E 05 C1 |  if_b	add	fp, #16
23e10     A7 04 68 CC |  if_b	wrlong	#2, fp
23e14     10 4E 85 C1 |  if_b	sub	fp, #16
23e18     50 4E 05 F1 | 	add	fp, #80
23e1c     A7 20 02 FB | 	rdlong	local02, fp
23e20     50 4E 85 F1 | 	sub	fp, #80
23e24     FF FF 7F FF 
23e28     FF 21 0E F2 | 	cmp	local02, ##-1 wz
23e2c     10 4E 05 A1 |  if_e	add	fp, #16
23e30     A7 02 68 AC |  if_e	wrlong	#1, fp
23e34     10 4E 85 A1 |  if_e	sub	fp, #16
23e38     5C 4E 05 F1 | 	add	fp, #92
23e3c     A7 20 02 FB | 	rdlong	local02, fp
23e40     10 4E 85 F1 | 	sub	fp, #16
23e44     A7 1E 02 FB | 	rdlong	local01, fp
23e48     0F 21 82 F1 | 	sub	local02, local01
23e4c     10 4E 05 F1 | 	add	fp, #16
23e50     A7 20 62 FC | 	wrlong	local02, fp
23e54     5C 4E 85 F1 | 	sub	fp, #92
23e58     5C FF 9F FD | 	jmp	#LR__3750
23e5c                 | LR__3751
23e5c     04 4E 05 F1 | 	add	fp, #4
23e60     A7 20 02 FB | 	rdlong	local02, fp
23e64     4C 4E 05 F1 | 	add	fp, #76
23e68     A7 1E 02 FB | 	rdlong	local01, fp
23e6c     18 20 06 F1 | 	add	local02, #24
23e70     10 1F 62 FC | 	wrlong	local01, local02
23e74     40 4E 85 F1 | 	sub	fp, #64
23e78     A7 20 0A FB | 	rdlong	local02, fp wz
23e7c     10 4E 85 F1 | 	sub	fp, #16
23e80     B8 00 90 5D |  if_ne	jmp	#LR__3753
23e84     5C 4E 05 F1 | 	add	fp, #92
23e88     A7 1E 02 FB | 	rdlong	local01, fp
23e8c     5C 4E 85 F1 | 	sub	fp, #92
23e90     FF 1F CE F7 | 	test	local01, #511 wz
23e94     A4 00 90 AD |  if_e	jmp	#LR__3753
23e98     44 4E 05 F1 | 	add	fp, #68
23e9c     A7 12 02 FB | 	rdlong	arg01, fp
23ea0     0C 4E 05 F1 | 	add	fp, #12
23ea4     A7 14 02 FB | 	rdlong	arg02, fp
23ea8     50 4E 85 F1 | 	sub	fp, #80
23eac     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
23eb0     58 4E 05 F1 | 	add	fp, #88
23eb4     A7 FA 61 FC | 	wrlong	result1, fp
23eb8     00 FA 4D F2 | 	cmps	result1, #0 wz
23ebc     58 4E 85 F1 | 	sub	fp, #88
23ec0     10 4E 05 A1 |  if_e	add	fp, #16
23ec4     A7 04 68 AC |  if_e	wrlong	#2, fp
23ec8     10 4E 85 A1 |  if_e	sub	fp, #16
23ecc     6C 00 90 AD |  if_e	jmp	#LR__3752
23ed0     04 4E 05 F1 | 	add	fp, #4
23ed4     A7 20 02 FB | 	rdlong	local02, fp
23ed8     54 4E 05 F1 | 	add	fp, #84
23edc     A7 1E 02 FB | 	rdlong	local01, fp
23ee0     04 4E 05 F1 | 	add	fp, #4
23ee4     A7 18 02 FB | 	rdlong	arg04, fp
23ee8     09 18 46 F0 | 	shr	arg04, #9
23eec     0C 1F 02 F1 | 	add	local01, arg04
23ef0     1C 20 06 F1 | 	add	local02, #28
23ef4     10 1F 62 FC | 	wrlong	local01, local02
23ef8     18 4E 85 F1 | 	sub	fp, #24
23efc     A7 20 02 FB | 	rdlong	local02, fp
23f00     01 20 06 F1 | 	add	local02, #1
23f04     10 13 C2 FA | 	rdbyte	arg01, local02
23f08     40 4E 85 F1 | 	sub	fp, #64
23f0c     A7 20 02 FB | 	rdlong	local02, fp
23f10     10 15 02 F6 | 	mov	arg02, local02
23f14     28 14 06 F1 | 	add	arg02, #40
23f18     04 4E 85 F1 | 	sub	fp, #4
23f1c     1C 20 06 F1 | 	add	local02, #28
23f20     10 17 02 FB | 	rdlong	arg03, local02
23f24     01 18 06 F6 | 	mov	arg04, #1
23f28     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
23f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
23f30     10 4E 05 51 |  if_ne	add	fp, #16
23f34     A7 02 68 5C |  if_ne	wrlong	#1, fp
23f38     10 4E 85 51 |  if_ne	sub	fp, #16
23f3c                 | LR__3752
23f3c                 | LR__3753
23f3c                 | LR__3754
23f3c                 | LR__3755
23f3c                 | LR__3756
23f3c     10 4E 05 F1 | 	add	fp, #16
23f40     A7 20 0A FB | 	rdlong	local02, fp wz
23f44     10 4E 85 F1 | 	sub	fp, #16
23f48     04 4E 05 51 |  if_ne	add	fp, #4
23f4c     A7 20 02 5B |  if_ne	rdlong	local02, fp
23f50     04 4E 85 51 |  if_ne	sub	fp, #4
23f54     10 01 68 5C |  if_ne	wrlong	#0, local02
23f58                 | ' 
23f58                 | ' 	return res ;
23f58     10 4E 05 F1 | 	add	fp, #16
23f5c     A7 FA 01 FB | 	rdlong	result1, fp
23f60     10 4E 85 F1 | 	sub	fp, #16
23f64                 | LR__3757
23f64     A7 F0 03 F6 | 	mov	ptra, fp
23f68     B2 00 A0 FD | 	call	#popregs_
23f6c                 | _fatfs_cc_f_open_ret
23f6c     2D 00 64 FD | 	ret
23f70                 | 
23f70                 | _fatfs_cc_f_read
23f70     0E 4A 05 F6 | 	mov	COUNT_, #14
23f74     A8 00 A0 FD | 	call	#pushregs_
23f78     38 F0 07 F1 | 	add	ptra, #56
23f7c     04 4E 05 F1 | 	add	fp, #4
23f80     A7 12 62 FC | 	wrlong	arg01, fp
23f84     04 4E 05 F1 | 	add	fp, #4
23f88     A7 14 62 FC | 	wrlong	arg02, fp
23f8c     04 4E 05 F1 | 	add	fp, #4
23f90     A7 16 62 FC | 	wrlong	arg03, fp
23f94     04 4E 05 F1 | 	add	fp, #4
23f98     A7 18 62 FC | 	wrlong	arg04, fp
23f9c     08 4E 85 F1 | 	sub	fp, #8
23fa0     A7 FA 01 FB | 	rdlong	result1, fp
23fa4     2C 4E 05 F1 | 	add	fp, #44
23fa8     A7 FA 61 FC | 	wrlong	result1, fp
23fac     24 4E 85 F1 | 	sub	fp, #36
23fb0     A7 FA 01 FB | 	rdlong	result1, fp
23fb4     FD 00 68 FC | 	wrlong	#0, result1
23fb8     0C 4E 85 F1 | 	sub	fp, #12
23fbc     A7 12 02 FB | 	rdlong	arg01, fp
23fc0     14 4E 05 F1 | 	add	fp, #20
23fc4     A7 14 02 F6 | 	mov	arg02, fp
23fc8     18 4E 85 F1 | 	sub	fp, #24
23fcc     24 F7 BF FD | 	call	#_fatfs_cc_validate
23fd0     14 4E 05 F1 | 	add	fp, #20
23fd4     A7 FA 61 FC | 	wrlong	result1, fp
23fd8     00 FA 4D F2 | 	cmps	result1, #0 wz
23fdc     14 4E 85 F1 | 	sub	fp, #20
23fe0     20 00 90 5D |  if_ne	jmp	#LR__3760
23fe4     04 4E 05 F1 | 	add	fp, #4
23fe8     A7 14 02 FB | 	rdlong	arg02, fp
23fec     11 14 06 F1 | 	add	arg02, #17
23ff0     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
23ff4     10 4E 05 F1 | 	add	fp, #16
23ff8     A7 14 62 FC | 	wrlong	arg02, fp
23ffc     14 4E 85 F1 | 	sub	fp, #20
24000     10 00 90 AD |  if_e	jmp	#LR__3761
24004                 | LR__3760
24004     14 4E 05 F1 | 	add	fp, #20
24008     A7 FA 01 FB | 	rdlong	result1, fp
2400c     14 4E 85 F1 | 	sub	fp, #20
24010     EC 05 90 FD | 	jmp	#LR__3780
24014                 | LR__3761
24014     04 4E 05 F1 | 	add	fp, #4
24018     A7 18 02 FB | 	rdlong	arg04, fp
2401c     04 4E 85 F1 | 	sub	fp, #4
24020     10 18 06 F1 | 	add	arg04, #16
24024     0C 19 C2 FA | 	rdbyte	arg04, arg04
24028     01 18 CE F7 | 	test	arg04, #1 wz
2402c     07 FA 05 A6 |  if_e	mov	result1, #7
24030     CC 05 90 AD |  if_e	jmp	#LR__3780
24034     04 4E 05 F1 | 	add	fp, #4
24038     A7 1E 02 FB | 	rdlong	local01, fp
2403c     0F 21 02 F6 | 	mov	local02, local01
24040     0C 20 06 F1 | 	add	local02, #12
24044     10 23 02 FB | 	rdlong	local03, local02
24048     14 1E 06 F1 | 	add	local01, #20
2404c     0F 1F 02 FB | 	rdlong	local01, local01
24050     0F 23 82 F1 | 	sub	local03, local01
24054     20 4E 05 F1 | 	add	fp, #32
24058     A7 22 62 FC | 	wrlong	local03, fp
2405c     18 4E 85 F1 | 	sub	fp, #24
24060     A7 24 02 FB | 	rdlong	local04, fp
24064     0C 4E 85 F1 | 	sub	fp, #12
24068     11 25 1A F2 | 	cmp	local04, local03 wcz
2406c     24 4E 05 11 |  if_a	add	fp, #36
24070     A7 24 02 1B |  if_a	rdlong	local04, fp
24074     18 4E 85 11 |  if_a	sub	fp, #24
24078     A7 24 62 1C |  if_a	wrlong	local04, fp
2407c     0C 4E 85 11 |  if_a	sub	fp, #12
24080                 | ' 
24080                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
24080                 | LR__3762
24080     0C 4E 05 F1 | 	add	fp, #12
24084     A7 20 02 FB | 	rdlong	local02, fp
24088     0C 4E 85 F1 | 	sub	fp, #12
2408c     10 25 02 F6 | 	mov	local04, local02
24090     01 24 16 F2 | 	cmp	local04, #1 wc
24094     64 05 90 CD |  if_b	jmp	#LR__3779
24098     04 4E 05 F1 | 	add	fp, #4
2409c     A7 22 02 FB | 	rdlong	local03, fp
240a0     04 4E 85 F1 | 	sub	fp, #4
240a4     14 22 06 F1 | 	add	local03, #20
240a8     11 23 02 FB | 	rdlong	local03, local03
240ac     FF 23 CE F7 | 	test	local03, #511 wz
240b0     3C 04 90 5D |  if_ne	jmp	#LR__3777
240b4     04 4E 05 F1 | 	add	fp, #4
240b8     A7 1E 02 FB | 	rdlong	local01, fp
240bc     14 1E 06 F1 | 	add	local01, #20
240c0     0F 23 02 FB | 	rdlong	local03, local01
240c4     09 22 46 F0 | 	shr	local03, #9
240c8     14 4E 05 F1 | 	add	fp, #20
240cc     A7 26 02 FB | 	rdlong	local05, fp
240d0     13 29 02 F6 | 	mov	local06, local05
240d4     0A 28 06 F1 | 	add	local06, #10
240d8     14 2B E2 FA | 	rdword	local07, local06
240dc     0A 28 86 F1 | 	sub	local06, #10
240e0     15 2D 32 F9 | 	getword	local08, local07, #0
240e4     01 2C 86 F1 | 	sub	local08, #1
240e8     16 23 0A F5 | 	and	local03, local08 wz
240ec     18 4E 05 F1 | 	add	fp, #24
240f0     A7 22 62 FC | 	wrlong	local03, fp
240f4     30 4E 85 F1 | 	sub	fp, #48
240f8     E0 00 90 5D |  if_ne	jmp	#LR__3767
240fc     04 4E 05 F1 | 	add	fp, #4
24100     A7 22 02 FB | 	rdlong	local03, fp
24104     04 4E 85 F1 | 	sub	fp, #4
24108     14 22 06 F1 | 	add	local03, #20
2410c     11 23 0A FB | 	rdlong	local03, local03 wz
24110     20 00 90 5D |  if_ne	jmp	#LR__3763
24114     04 4E 05 F1 | 	add	fp, #4
24118     A7 22 02 FB | 	rdlong	local03, fp
2411c     08 22 06 F1 | 	add	local03, #8
24120     11 23 02 FB | 	rdlong	local03, local03
24124     18 4E 05 F1 | 	add	fp, #24
24128     A7 22 62 FC | 	wrlong	local03, fp
2412c     1C 4E 85 F1 | 	sub	fp, #28
24130     28 00 90 FD | 	jmp	#LR__3764
24134                 | LR__3763
24134     04 4E 05 F1 | 	add	fp, #4
24138     A7 2C 02 FB | 	rdlong	local08, fp
2413c     16 13 02 F6 | 	mov	arg01, local08
24140     04 4E 85 F1 | 	sub	fp, #4
24144     18 2C 06 F1 | 	add	local08, #24
24148     16 15 02 FB | 	rdlong	arg02, local08
2414c     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
24150     1C 4E 05 F1 | 	add	fp, #28
24154     A7 FA 61 FC | 	wrlong	result1, fp
24158     1C 4E 85 F1 | 	sub	fp, #28
2415c                 | LR__3764
2415c     1C 4E 05 F1 | 	add	fp, #28
24160     A7 22 02 FB | 	rdlong	local03, fp
24164     1C 4E 85 F1 | 	sub	fp, #28
24168     02 22 16 F2 | 	cmp	local03, #2 wc
2416c     1C 00 90 3D |  if_ae	jmp	#LR__3765
24170     04 4E 05 F1 | 	add	fp, #4
24174     A7 22 02 FB | 	rdlong	local03, fp
24178     04 4E 85 F1 | 	sub	fp, #4
2417c     11 22 06 F1 | 	add	local03, #17
24180     11 05 48 FC | 	wrbyte	#2, local03
24184     02 FA 05 F6 | 	mov	result1, #2
24188     74 04 90 FD | 	jmp	#LR__3780
2418c                 | LR__3765
2418c     1C 4E 05 F1 | 	add	fp, #28
24190     A7 22 02 FB | 	rdlong	local03, fp
24194     1C 4E 85 F1 | 	sub	fp, #28
24198     FF FF 7F FF 
2419c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
241a0     1C 00 90 5D |  if_ne	jmp	#LR__3766
241a4     04 4E 05 F1 | 	add	fp, #4
241a8     A7 22 02 FB | 	rdlong	local03, fp
241ac     04 4E 85 F1 | 	sub	fp, #4
241b0     11 22 06 F1 | 	add	local03, #17
241b4     11 03 48 FC | 	wrbyte	#1, local03
241b8     01 FA 05 F6 | 	mov	result1, #1
241bc     40 04 90 FD | 	jmp	#LR__3780
241c0                 | LR__3766
241c0     04 4E 05 F1 | 	add	fp, #4
241c4     A7 22 02 FB | 	rdlong	local03, fp
241c8     18 4E 05 F1 | 	add	fp, #24
241cc     A7 2C 02 FB | 	rdlong	local08, fp
241d0     1C 4E 85 F1 | 	sub	fp, #28
241d4     18 22 06 F1 | 	add	local03, #24
241d8     11 2D 62 FC | 	wrlong	local08, local03
241dc                 | LR__3767
241dc     18 4E 05 F1 | 	add	fp, #24
241e0     A7 12 02 FB | 	rdlong	arg01, fp
241e4     14 4E 85 F1 | 	sub	fp, #20
241e8     A7 22 02 FB | 	rdlong	local03, fp
241ec     04 4E 85 F1 | 	sub	fp, #4
241f0     18 22 06 F1 | 	add	local03, #24
241f4     11 15 02 FB | 	rdlong	arg02, local03
241f8     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
241fc     20 4E 05 F1 | 	add	fp, #32
24200     A7 FA 61 FC | 	wrlong	result1, fp
24204     20 4E 85 F1 | 	sub	fp, #32
24208     00 FA 0D F2 | 	cmp	result1, #0 wz
2420c     1C 00 90 5D |  if_ne	jmp	#LR__3768
24210     04 4E 05 F1 | 	add	fp, #4
24214     A7 22 02 FB | 	rdlong	local03, fp
24218     04 4E 85 F1 | 	sub	fp, #4
2421c     11 22 06 F1 | 	add	local03, #17
24220     11 05 48 FC | 	wrbyte	#2, local03
24224     02 FA 05 F6 | 	mov	result1, #2
24228     D4 03 90 FD | 	jmp	#LR__3780
2422c                 | LR__3768
2422c     20 4E 05 F1 | 	add	fp, #32
24230     A7 22 02 FB | 	rdlong	local03, fp
24234     10 4E 05 F1 | 	add	fp, #16
24238     A7 2C 02 FB | 	rdlong	local08, fp
2423c     16 23 02 F1 | 	add	local03, local08
24240     10 4E 85 F1 | 	sub	fp, #16
24244     A7 22 62 FC | 	wrlong	local03, fp
24248     14 4E 85 F1 | 	sub	fp, #20
2424c     A7 22 02 FB | 	rdlong	local03, fp
24250     09 22 46 F0 | 	shr	local03, #9
24254     20 4E 05 F1 | 	add	fp, #32
24258     A7 22 62 FC | 	wrlong	local03, fp
2425c     2C 4E 85 F1 | 	sub	fp, #44
24260     01 22 16 F2 | 	cmp	local03, #1 wc
24264     5C 01 90 CD |  if_b	jmp	#LR__3772
24268     30 4E 05 F1 | 	add	fp, #48
2426c     A7 22 02 FB | 	rdlong	local03, fp
24270     04 4E 85 F1 | 	sub	fp, #4
24274     A7 2C 02 FB | 	rdlong	local08, fp
24278     16 23 02 F1 | 	add	local03, local08
2427c     14 4E 85 F1 | 	sub	fp, #20
24280     A7 2C 02 FB | 	rdlong	local08, fp
24284     18 4E 85 F1 | 	sub	fp, #24
24288     0A 2C 06 F1 | 	add	local08, #10
2428c     16 2D E2 FA | 	rdword	local08, local08
24290     16 23 1A F2 | 	cmp	local03, local08 wcz
24294     28 00 90 ED |  if_be	jmp	#LR__3769
24298     18 4E 05 F1 | 	add	fp, #24
2429c     A7 1E 02 FB | 	rdlong	local01, fp
242a0     0A 1E 06 F1 | 	add	local01, #10
242a4     0F 23 E2 FA | 	rdword	local03, local01
242a8     18 4E 05 F1 | 	add	fp, #24
242ac     A7 2C 02 FB | 	rdlong	local08, fp
242b0     16 23 82 F1 | 	sub	local03, local08
242b4     04 4E 85 F1 | 	sub	fp, #4
242b8     A7 22 62 FC | 	wrlong	local03, fp
242bc     2C 4E 85 F1 | 	sub	fp, #44
242c0                 | LR__3769
242c0     18 4E 05 F1 | 	add	fp, #24
242c4     A7 1E 02 FB | 	rdlong	local01, fp
242c8     01 1E 06 F1 | 	add	local01, #1
242cc     0F 13 C2 FA | 	rdbyte	arg01, local01
242d0     1C 4E 05 F1 | 	add	fp, #28
242d4     A7 14 02 FB | 	rdlong	arg02, fp
242d8     14 4E 85 F1 | 	sub	fp, #20
242dc     A7 16 02 FB | 	rdlong	arg03, fp
242e0     0C 4E 05 F1 | 	add	fp, #12
242e4     A7 18 02 FB | 	rdlong	arg04, fp
242e8     2C 4E 85 F1 | 	sub	fp, #44
242ec     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
242f0     00 FA 0D F2 | 	cmp	result1, #0 wz
242f4     1C 00 90 AD |  if_e	jmp	#LR__3770
242f8     04 4E 05 F1 | 	add	fp, #4
242fc     A7 22 02 FB | 	rdlong	local03, fp
24300     04 4E 85 F1 | 	sub	fp, #4
24304     11 22 06 F1 | 	add	local03, #17
24308     11 03 48 FC | 	wrbyte	#1, local03
2430c     01 FA 05 F6 | 	mov	result1, #1
24310     EC 02 90 FD | 	jmp	#LR__3780
24314                 | LR__3770
24314     04 4E 05 F1 | 	add	fp, #4
24318     A7 1E 02 FB | 	rdlong	local01, fp
2431c     04 4E 85 F1 | 	sub	fp, #4
24320     10 1E 06 F1 | 	add	local01, #16
24324     0F 23 C2 FA | 	rdbyte	local03, local01
24328     80 22 CE F7 | 	test	local03, #128 wz
2432c     78 00 90 AD |  if_e	jmp	#LR__3771
24330     04 4E 05 F1 | 	add	fp, #4
24334     A7 2C 02 FB | 	rdlong	local08, fp
24338     1C 2C 06 F1 | 	add	local08, #28
2433c     16 2D 02 FB | 	rdlong	local08, local08
24340     1C 4E 05 F1 | 	add	fp, #28
24344     A7 2E 02 FB | 	rdlong	local09, fp
24348     17 2D 82 F1 | 	sub	local08, local09
2434c     0C 4E 05 F1 | 	add	fp, #12
24350     A7 30 02 FB | 	rdlong	local10, fp
24354     2C 4E 85 F1 | 	sub	fp, #44
24358     18 33 02 F6 | 	mov	local11, local10
2435c     19 2D 12 F2 | 	cmp	local08, local11 wc
24360     44 00 90 3D |  if_ae	jmp	#LR__3771
24364     34 4E 05 F1 | 	add	fp, #52
24368     A7 12 02 FB | 	rdlong	arg01, fp
2436c     30 4E 85 F1 | 	sub	fp, #48
24370     A7 14 02 FB | 	rdlong	arg02, fp
24374     0A 33 02 F6 | 	mov	local11, arg02
24378     1C 32 06 F1 | 	add	local11, #28
2437c     19 2F 02 FB | 	rdlong	local09, local11
24380     1C 4E 05 F1 | 	add	fp, #28
24384     A7 26 02 FB | 	rdlong	local05, fp
24388     13 2F 82 F1 | 	sub	local09, local05
2438c     09 2E 66 F0 | 	shl	local09, #9
24390     17 33 02 F6 | 	mov	local11, local09
24394     17 13 02 F1 | 	add	arg01, local09
24398     20 4E 85 F1 | 	sub	fp, #32
2439c     28 14 06 F1 | 	add	arg02, #40
243a0     09 16 C6 F9 | 	decod	arg03, #9
243a4     50 49 BF FD | 	call	#__system____builtin_memmove
243a8                 | LR__3771
243a8     2C 4E 05 F1 | 	add	fp, #44
243ac     A7 22 02 FB | 	rdlong	local03, fp
243b0     09 22 66 F0 | 	shl	local03, #9
243b4     04 4E 85 F1 | 	sub	fp, #4
243b8     A7 22 62 FC | 	wrlong	local03, fp
243bc     28 4E 85 F1 | 	sub	fp, #40
243c0                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
243c0                 | ' 				}
243c0                 | ' 
243c0                 | ' 
243c0                 | ' 				rcnt =  ((UINT) 512 )  * cc;
243c0                 | ' 				continue;
243c0     B4 01 90 FD | 	jmp	#LR__3778
243c4                 | LR__3772
243c4     04 4E 05 F1 | 	add	fp, #4
243c8     A7 22 02 FB | 	rdlong	local03, fp
243cc     1C 22 06 F1 | 	add	local03, #28
243d0     11 23 02 FB | 	rdlong	local03, local03
243d4     1C 4E 05 F1 | 	add	fp, #28
243d8     A7 1E 02 FB | 	rdlong	local01, fp
243dc     20 4E 85 F1 | 	sub	fp, #32
243e0     0F 23 0A F2 | 	cmp	local03, local01 wz
243e4     EC 00 90 AD |  if_e	jmp	#LR__3776
243e8     04 4E 05 F1 | 	add	fp, #4
243ec     A7 1E 02 FB | 	rdlong	local01, fp
243f0     04 4E 85 F1 | 	sub	fp, #4
243f4     10 1E 06 F1 | 	add	local01, #16
243f8     0F 23 C2 FA | 	rdbyte	local03, local01
243fc     80 22 CE F7 | 	test	local03, #128 wz
24400     7C 00 90 AD |  if_e	jmp	#LR__3774
24404     18 4E 05 F1 | 	add	fp, #24
24408     A7 1E 02 FB | 	rdlong	local01, fp
2440c     01 1E 06 F1 | 	add	local01, #1
24410     0F 13 C2 FA | 	rdbyte	arg01, local01
24414     14 4E 85 F1 | 	sub	fp, #20
24418     A7 22 02 FB | 	rdlong	local03, fp
2441c     11 15 02 F6 | 	mov	arg02, local03
24420     28 14 06 F1 | 	add	arg02, #40
24424     04 4E 85 F1 | 	sub	fp, #4
24428     1C 22 06 F1 | 	add	local03, #28
2442c     11 17 02 FB | 	rdlong	arg03, local03
24430     01 18 06 F6 | 	mov	arg04, #1
24434     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
24438     00 FA 0D F2 | 	cmp	result1, #0 wz
2443c     1C 00 90 AD |  if_e	jmp	#LR__3773
24440     04 4E 05 F1 | 	add	fp, #4
24444     A7 22 02 FB | 	rdlong	local03, fp
24448     04 4E 85 F1 | 	sub	fp, #4
2444c     11 22 06 F1 | 	add	local03, #17
24450     11 03 48 FC | 	wrbyte	#1, local03
24454     01 FA 05 F6 | 	mov	result1, #1
24458     A4 01 90 FD | 	jmp	#LR__3780
2445c                 | LR__3773
2445c     04 4E 05 F1 | 	add	fp, #4
24460     A7 32 02 FB | 	rdlong	local11, fp
24464     19 23 02 F6 | 	mov	local03, local11
24468     04 4E 85 F1 | 	sub	fp, #4
2446c     10 32 06 F1 | 	add	local11, #16
24470     19 33 C2 FA | 	rdbyte	local11, local11
24474     7F 32 06 F5 | 	and	local11, #127
24478     10 22 06 F1 | 	add	local03, #16
2447c     11 33 42 FC | 	wrbyte	local11, local03
24480                 | LR__3774
24480     18 4E 05 F1 | 	add	fp, #24
24484     A7 1E 02 FB | 	rdlong	local01, fp
24488     01 1E 06 F1 | 	add	local01, #1
2448c     0F 13 C2 FA | 	rdbyte	arg01, local01
24490     14 4E 85 F1 | 	sub	fp, #20
24494     A7 14 02 FB | 	rdlong	arg02, fp
24498     28 14 06 F1 | 	add	arg02, #40
2449c     1C 4E 05 F1 | 	add	fp, #28
244a0     A7 16 02 FB | 	rdlong	arg03, fp
244a4     20 4E 85 F1 | 	sub	fp, #32
244a8     01 18 06 F6 | 	mov	arg04, #1
244ac     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
244b0     00 FA 0D F2 | 	cmp	result1, #0 wz
244b4     1C 00 90 AD |  if_e	jmp	#LR__3775
244b8     04 4E 05 F1 | 	add	fp, #4
244bc     A7 22 02 FB | 	rdlong	local03, fp
244c0     04 4E 85 F1 | 	sub	fp, #4
244c4     11 22 06 F1 | 	add	local03, #17
244c8     11 03 48 FC | 	wrbyte	#1, local03
244cc     01 FA 05 F6 | 	mov	result1, #1
244d0     2C 01 90 FD | 	jmp	#LR__3780
244d4                 | LR__3775
244d4                 | LR__3776
244d4     04 4E 05 F1 | 	add	fp, #4
244d8     A7 22 02 FB | 	rdlong	local03, fp
244dc     1C 4E 05 F1 | 	add	fp, #28
244e0     A7 32 02 FB | 	rdlong	local11, fp
244e4     20 4E 85 F1 | 	sub	fp, #32
244e8     1C 22 06 F1 | 	add	local03, #28
244ec     11 33 62 FC | 	wrlong	local11, local03
244f0                 | LR__3777
244f0     04 4E 05 F1 | 	add	fp, #4
244f4     A7 1E 02 FB | 	rdlong	local01, fp
244f8     14 1E 06 F1 | 	add	local01, #20
244fc     0F 33 02 FB | 	rdlong	local11, local01
24500     FF 33 06 F5 | 	and	local11, #511
24504     09 22 C6 F9 | 	decod	local03, #9
24508     19 23 82 F1 | 	sub	local03, local11
2450c     24 4E 05 F1 | 	add	fp, #36
24510     A7 22 62 FC | 	wrlong	local03, fp
24514     1C 4E 85 F1 | 	sub	fp, #28
24518     A7 32 02 FB | 	rdlong	local11, fp
2451c     0C 4E 85 F1 | 	sub	fp, #12
24520     19 23 1A F2 | 	cmp	local03, local11 wcz
24524     0C 4E 05 11 |  if_a	add	fp, #12
24528     A7 22 02 1B |  if_a	rdlong	local03, fp
2452c     1C 4E 05 11 |  if_a	add	fp, #28
24530     A7 22 62 1C |  if_a	wrlong	local03, fp
24534     28 4E 85 11 |  if_a	sub	fp, #40
24538     34 4E 05 F1 | 	add	fp, #52
2453c     A7 12 02 FB | 	rdlong	arg01, fp
24540     30 4E 85 F1 | 	sub	fp, #48
24544     A7 28 02 FB | 	rdlong	local06, fp
24548     14 15 02 F6 | 	mov	arg02, local06
2454c     28 14 06 F1 | 	add	arg02, #40
24550     14 28 06 F1 | 	add	local06, #20
24554     14 33 02 FB | 	rdlong	local11, local06
24558     19 2F 02 F6 | 	mov	local09, local11
2455c     17 31 02 F6 | 	mov	local10, local09
24560     FF 31 06 F5 | 	and	local10, #511
24564     18 15 02 F1 | 	add	arg02, local10
24568     24 4E 05 F1 | 	add	fp, #36
2456c     A7 16 02 FB | 	rdlong	arg03, fp
24570     28 4E 85 F1 | 	sub	fp, #40
24574     80 47 BF FD | 	call	#__system____builtin_memmove
24578                 | LR__3778
24578     0C 4E 05 F1 | 	add	fp, #12
2457c     A7 22 02 FB | 	rdlong	local03, fp
24580     1C 4E 05 F1 | 	add	fp, #28
24584     A7 2C 02 FB | 	rdlong	local08, fp
24588     16 23 82 F1 | 	sub	local03, local08
2458c     1C 4E 85 F1 | 	sub	fp, #28
24590     A7 22 62 FC | 	wrlong	local03, fp
24594     04 4E 05 F1 | 	add	fp, #4
24598     A7 1E 02 FB | 	rdlong	local01, fp
2459c     0F 2B 02 FB | 	rdlong	local07, local01
245a0     18 4E 05 F1 | 	add	fp, #24
245a4     A7 2C 02 FB | 	rdlong	local08, fp
245a8     16 2B 02 F1 | 	add	local07, local08
245ac     0F 2B 62 FC | 	wrlong	local07, local01
245b0     0C 4E 05 F1 | 	add	fp, #12
245b4     A7 22 02 FB | 	rdlong	local03, fp
245b8     0C 4E 85 F1 | 	sub	fp, #12
245bc     A7 34 02 FB | 	rdlong	local12, fp
245c0     1A 23 02 F1 | 	add	local03, local12
245c4     0C 4E 05 F1 | 	add	fp, #12
245c8     A7 22 62 FC | 	wrlong	local03, fp
245cc     30 4E 85 F1 | 	sub	fp, #48
245d0     A7 36 02 FB | 	rdlong	local13, fp
245d4     1B 23 02 F6 | 	mov	local03, local13
245d8     14 36 06 F1 | 	add	local13, #20
245dc     1B 39 02 FB | 	rdlong	local14, local13
245e0     24 4E 05 F1 | 	add	fp, #36
245e4     A7 28 02 FB | 	rdlong	local06, fp
245e8     28 4E 85 F1 | 	sub	fp, #40
245ec     14 39 02 F1 | 	add	local14, local06
245f0     14 22 06 F1 | 	add	local03, #20
245f4     11 39 62 FC | 	wrlong	local14, local03
245f8     84 FA 9F FD | 	jmp	#LR__3762
245fc                 | LR__3779
245fc                 | ' 
245fc                 | ' 
245fc                 | ' 
245fc                 | ' 
245fc                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
245fc                 | ' 
245fc                 | ' 	}
245fc                 | ' 
245fc                 | ' 	return FR_OK ;
245fc     00 FA 05 F6 | 	mov	result1, #0
24600                 | LR__3780
24600     A7 F0 03 F6 | 	mov	ptra, fp
24604     B2 00 A0 FD | 	call	#popregs_
24608                 | _fatfs_cc_f_read_ret
24608     2D 00 64 FD | 	ret
2460c                 | 
2460c                 | _fatfs_cc_f_write
2460c     15 4A 05 F6 | 	mov	COUNT_, #21
24610     A8 00 A0 FD | 	call	#pushregs_
24614     34 F0 07 F1 | 	add	ptra, #52
24618     04 4E 05 F1 | 	add	fp, #4
2461c     A7 12 62 FC | 	wrlong	arg01, fp
24620     04 4E 05 F1 | 	add	fp, #4
24624     A7 14 62 FC | 	wrlong	arg02, fp
24628     04 4E 05 F1 | 	add	fp, #4
2462c     A7 16 62 FC | 	wrlong	arg03, fp
24630     04 4E 05 F1 | 	add	fp, #4
24634     A7 18 62 FC | 	wrlong	arg04, fp
24638     08 4E 85 F1 | 	sub	fp, #8
2463c     A7 FA 01 FB | 	rdlong	result1, fp
24640     28 4E 05 F1 | 	add	fp, #40
24644     A7 FA 61 FC | 	wrlong	result1, fp
24648     20 4E 85 F1 | 	sub	fp, #32
2464c     A7 FA 01 FB | 	rdlong	result1, fp
24650     FD 00 68 FC | 	wrlong	#0, result1
24654     0C 4E 85 F1 | 	sub	fp, #12
24658     A7 12 02 FB | 	rdlong	arg01, fp
2465c     14 4E 05 F1 | 	add	fp, #20
24660     A7 14 02 F6 | 	mov	arg02, fp
24664     18 4E 85 F1 | 	sub	fp, #24
24668     88 F0 BF FD | 	call	#_fatfs_cc_validate
2466c     14 4E 05 F1 | 	add	fp, #20
24670     A7 FA 61 FC | 	wrlong	result1, fp
24674     00 FA 4D F2 | 	cmps	result1, #0 wz
24678     14 4E 85 F1 | 	sub	fp, #20
2467c     20 00 90 5D |  if_ne	jmp	#LR__3790
24680     04 4E 05 F1 | 	add	fp, #4
24684     A7 14 02 FB | 	rdlong	arg02, fp
24688     11 14 06 F1 | 	add	arg02, #17
2468c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
24690     10 4E 05 F1 | 	add	fp, #16
24694     A7 14 62 FC | 	wrlong	arg02, fp
24698     14 4E 85 F1 | 	sub	fp, #20
2469c     10 00 90 AD |  if_e	jmp	#LR__3791
246a0                 | LR__3790
246a0     14 4E 05 F1 | 	add	fp, #20
246a4     A7 FA 01 FB | 	rdlong	result1, fp
246a8     14 4E 85 F1 | 	sub	fp, #20
246ac     44 07 90 FD | 	jmp	#LR__3813
246b0                 | LR__3791
246b0     04 4E 05 F1 | 	add	fp, #4
246b4     A7 14 02 FB | 	rdlong	arg02, fp
246b8     04 4E 85 F1 | 	sub	fp, #4
246bc     10 14 06 F1 | 	add	arg02, #16
246c0     0A 15 C2 FA | 	rdbyte	arg02, arg02
246c4     02 14 CE F7 | 	test	arg02, #2 wz
246c8     07 FA 05 A6 |  if_e	mov	result1, #7
246cc     24 07 90 AD |  if_e	jmp	#LR__3813
246d0     04 4E 05 F1 | 	add	fp, #4
246d4     A7 14 02 FB | 	rdlong	arg02, fp
246d8     0A 13 02 F6 | 	mov	arg01, arg02
246dc     14 12 06 F1 | 	add	arg01, #20
246e0     09 13 02 FB | 	rdlong	arg01, arg01
246e4     08 4E 05 F1 | 	add	fp, #8
246e8     A7 FA 01 FB | 	rdlong	result1, fp
246ec     FD 12 02 F1 | 	add	arg01, result1
246f0     0C 4E 85 F1 | 	sub	fp, #12
246f4     14 14 06 F1 | 	add	arg02, #20
246f8     0A FB 01 FB | 	rdlong	result1, arg02
246fc     FD 12 12 F2 | 	cmp	arg01, result1 wc
24700     24 00 90 3D |  if_ae	jmp	#LR__3792
24704     04 4E 05 F1 | 	add	fp, #4
24708     A7 14 02 FB | 	rdlong	arg02, fp
2470c     01 FA 65 F6 | 	neg	result1, #1
24710     14 14 06 F1 | 	add	arg02, #20
24714     0A 15 02 FB | 	rdlong	arg02, arg02
24718     0A FB 81 F1 | 	sub	result1, arg02
2471c     08 4E 05 F1 | 	add	fp, #8
24720     A7 FA 61 FC | 	wrlong	result1, fp
24724     0C 4E 85 F1 | 	sub	fp, #12
24728                 | LR__3792
24728                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
24728                 | ' 	}
24728                 | ' 
24728                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
24728                 | LR__3793
24728     0C 4E 05 F1 | 	add	fp, #12
2472c     A7 FA 01 FB | 	rdlong	result1, fp
24730     0C 4E 85 F1 | 	sub	fp, #12
24734     01 FA 15 F2 | 	cmp	result1, #1 wc
24738     90 06 90 CD |  if_b	jmp	#LR__3812
2473c     04 4E 05 F1 | 	add	fp, #4
24740     A7 FA 01 FB | 	rdlong	result1, fp
24744     04 4E 85 F1 | 	sub	fp, #4
24748     14 FA 05 F1 | 	add	result1, #20
2474c     FD FA 01 FB | 	rdlong	result1, result1
24750     FF FB CD F7 | 	test	result1, #511 wz
24754     D8 04 90 5D |  if_ne	jmp	#LR__3808
24758     04 4E 05 F1 | 	add	fp, #4
2475c     A7 FA 01 FB | 	rdlong	result1, fp
24760     14 FA 05 F1 | 	add	result1, #20
24764     FD FA 01 FB | 	rdlong	result1, result1
24768     09 FA 45 F0 | 	shr	result1, #9
2476c     14 4E 05 F1 | 	add	fp, #20
24770     A7 14 02 FB | 	rdlong	arg02, fp
24774     0A 14 06 F1 | 	add	arg02, #10
24778     0A 19 E2 FA | 	rdword	arg04, arg02
2477c     0C 15 32 F9 | 	getword	arg02, arg04, #0
24780     01 14 86 F1 | 	sub	arg02, #1
24784     0A FB 09 F5 | 	and	result1, arg02 wz
24788     14 4E 05 F1 | 	add	fp, #20
2478c     A7 FA 61 FC | 	wrlong	result1, fp
24790     2C 4E 85 F1 | 	sub	fp, #44
24794     44 01 90 5D |  if_ne	jmp	#LR__3799
24798     04 4E 05 F1 | 	add	fp, #4
2479c     A7 FA 01 FB | 	rdlong	result1, fp
247a0     04 4E 85 F1 | 	sub	fp, #4
247a4     14 FA 05 F1 | 	add	result1, #20
247a8     FD 14 0A FB | 	rdlong	arg02, result1 wz
247ac     44 00 90 5D |  if_ne	jmp	#LR__3794
247b0     04 4E 05 F1 | 	add	fp, #4
247b4     A7 14 02 FB | 	rdlong	arg02, fp
247b8     08 14 06 F1 | 	add	arg02, #8
247bc     0A 15 0A FB | 	rdlong	arg02, arg02 wz
247c0     18 4E 05 F1 | 	add	fp, #24
247c4     A7 14 62 FC | 	wrlong	arg02, fp
247c8     1C 4E 85 F1 | 	sub	fp, #28
247cc     4C 00 90 5D |  if_ne	jmp	#LR__3795
247d0     04 4E 05 F1 | 	add	fp, #4
247d4     A7 12 02 FB | 	rdlong	arg01, fp
247d8     04 4E 85 F1 | 	sub	fp, #4
247dc     00 14 06 F6 | 	mov	arg02, #0
247e0     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
247e4     1C 4E 05 F1 | 	add	fp, #28
247e8     A7 FA 61 FC | 	wrlong	result1, fp
247ec     1C 4E 85 F1 | 	sub	fp, #28
247f0     28 00 90 FD | 	jmp	#LR__3795
247f4                 | LR__3794
247f4     04 4E 05 F1 | 	add	fp, #4
247f8     A7 18 02 FB | 	rdlong	arg04, fp
247fc     0C 13 02 F6 | 	mov	arg01, arg04
24800     04 4E 85 F1 | 	sub	fp, #4
24804     18 18 06 F1 | 	add	arg04, #24
24808     0C 15 02 FB | 	rdlong	arg02, arg04
2480c     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
24810     1C 4E 05 F1 | 	add	fp, #28
24814     A7 FA 61 FC | 	wrlong	result1, fp
24818     1C 4E 85 F1 | 	sub	fp, #28
2481c                 | LR__3795
2481c     1C 4E 05 F1 | 	add	fp, #28
24820     A7 FA 09 FB | 	rdlong	result1, fp wz
24824     1C 4E 85 F1 | 	sub	fp, #28
24828     A0 05 90 AD |  if_e	jmp	#LR__3812
2482c     1C 4E 05 F1 | 	add	fp, #28
24830     A7 FA 01 FB | 	rdlong	result1, fp
24834     1C 4E 85 F1 | 	sub	fp, #28
24838     01 FA 0D F2 | 	cmp	result1, #1 wz
2483c     1C 00 90 5D |  if_ne	jmp	#LR__3796
24840     04 4E 05 F1 | 	add	fp, #4
24844     A7 FA 01 FB | 	rdlong	result1, fp
24848     04 4E 85 F1 | 	sub	fp, #4
2484c     11 FA 05 F1 | 	add	result1, #17
24850     FD 04 48 FC | 	wrbyte	#2, result1
24854     02 FA 05 F6 | 	mov	result1, #2
24858     98 05 90 FD | 	jmp	#LR__3813
2485c                 | LR__3796
2485c     1C 4E 05 F1 | 	add	fp, #28
24860     A7 FA 01 FB | 	rdlong	result1, fp
24864     1C 4E 85 F1 | 	sub	fp, #28
24868     FF FF 7F FF 
2486c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
24870     1C 00 90 5D |  if_ne	jmp	#LR__3797
24874     04 4E 05 F1 | 	add	fp, #4
24878     A7 FA 01 FB | 	rdlong	result1, fp
2487c     04 4E 85 F1 | 	sub	fp, #4
24880     11 FA 05 F1 | 	add	result1, #17
24884     FD 02 48 FC | 	wrbyte	#1, result1
24888     01 FA 05 F6 | 	mov	result1, #1
2488c     64 05 90 FD | 	jmp	#LR__3813
24890                 | LR__3797
24890     04 4E 05 F1 | 	add	fp, #4
24894     A7 FA 01 FB | 	rdlong	result1, fp
24898     18 4E 05 F1 | 	add	fp, #24
2489c     A7 18 02 FB | 	rdlong	arg04, fp
248a0     18 FA 05 F1 | 	add	result1, #24
248a4     FD 18 62 FC | 	wrlong	arg04, result1
248a8     18 4E 85 F1 | 	sub	fp, #24
248ac     A7 FA 01 FB | 	rdlong	result1, fp
248b0     04 4E 85 F1 | 	sub	fp, #4
248b4     08 FA 05 F1 | 	add	result1, #8
248b8     FD FA 09 FB | 	rdlong	result1, result1 wz
248bc     1C 00 90 5D |  if_ne	jmp	#LR__3798
248c0     04 4E 05 F1 | 	add	fp, #4
248c4     A7 18 02 FB | 	rdlong	arg04, fp
248c8     18 4E 05 F1 | 	add	fp, #24
248cc     A7 FA 01 FB | 	rdlong	result1, fp
248d0     1C 4E 85 F1 | 	sub	fp, #28
248d4     08 18 06 F1 | 	add	arg04, #8
248d8     0C FB 61 FC | 	wrlong	result1, arg04
248dc                 | LR__3798
248dc                 | LR__3799
248dc     04 4E 05 F1 | 	add	fp, #4
248e0     A7 18 02 FB | 	rdlong	arg04, fp
248e4     04 4E 85 F1 | 	sub	fp, #4
248e8     10 18 06 F1 | 	add	arg04, #16
248ec     0C 19 C2 FA | 	rdbyte	arg04, arg04
248f0     80 18 CE F7 | 	test	arg04, #128 wz
248f4     7C 00 90 AD |  if_e	jmp	#LR__3801
248f8     18 4E 05 F1 | 	add	fp, #24
248fc     A7 18 02 FB | 	rdlong	arg04, fp
24900     01 18 06 F1 | 	add	arg04, #1
24904     0C 13 C2 FA | 	rdbyte	arg01, arg04
24908     14 4E 85 F1 | 	sub	fp, #20
2490c     A7 18 02 FB | 	rdlong	arg04, fp
24910     0C 15 02 F6 | 	mov	arg02, arg04
24914     28 14 06 F1 | 	add	arg02, #40
24918     04 4E 85 F1 | 	sub	fp, #4
2491c     1C 18 06 F1 | 	add	arg04, #28
24920     0C 17 02 FB | 	rdlong	arg03, arg04
24924     01 18 06 F6 | 	mov	arg04, #1
24928     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2492c     00 FA 0D F2 | 	cmp	result1, #0 wz
24930     1C 00 90 AD |  if_e	jmp	#LR__3800
24934     04 4E 05 F1 | 	add	fp, #4
24938     A7 FA 01 FB | 	rdlong	result1, fp
2493c     04 4E 85 F1 | 	sub	fp, #4
24940     11 FA 05 F1 | 	add	result1, #17
24944     FD 02 48 FC | 	wrbyte	#1, result1
24948     01 FA 05 F6 | 	mov	result1, #1
2494c     A4 04 90 FD | 	jmp	#LR__3813
24950                 | LR__3800
24950     04 4E 05 F1 | 	add	fp, #4
24954     A7 18 02 FB | 	rdlong	arg04, fp
24958     0C FB 01 F6 | 	mov	result1, arg04
2495c     04 4E 85 F1 | 	sub	fp, #4
24960     10 18 06 F1 | 	add	arg04, #16
24964     0C 19 C2 FA | 	rdbyte	arg04, arg04
24968     7F 18 06 F5 | 	and	arg04, #127
2496c     10 FA 05 F1 | 	add	result1, #16
24970     FD 18 42 FC | 	wrbyte	arg04, result1
24974                 | LR__3801
24974     18 4E 05 F1 | 	add	fp, #24
24978     A7 12 02 FB | 	rdlong	arg01, fp
2497c     14 4E 85 F1 | 	sub	fp, #20
24980     A7 14 02 FB | 	rdlong	arg02, fp
24984     04 4E 85 F1 | 	sub	fp, #4
24988     18 14 06 F1 | 	add	arg02, #24
2498c     0A 15 02 FB | 	rdlong	arg02, arg02
24990     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
24994     20 4E 05 F1 | 	add	fp, #32
24998     A7 FA 61 FC | 	wrlong	result1, fp
2499c     20 4E 85 F1 | 	sub	fp, #32
249a0     00 FA 0D F2 | 	cmp	result1, #0 wz
249a4     1C 00 90 5D |  if_ne	jmp	#LR__3802
249a8     04 4E 05 F1 | 	add	fp, #4
249ac     A7 FA 01 FB | 	rdlong	result1, fp
249b0     04 4E 85 F1 | 	sub	fp, #4
249b4     11 FA 05 F1 | 	add	result1, #17
249b8     FD 04 48 FC | 	wrbyte	#2, result1
249bc     02 FA 05 F6 | 	mov	result1, #2
249c0     30 04 90 FD | 	jmp	#LR__3813
249c4                 | LR__3802
249c4     20 4E 05 F1 | 	add	fp, #32
249c8     A7 FA 01 FB | 	rdlong	result1, fp
249cc     0C 4E 05 F1 | 	add	fp, #12
249d0     A7 1E 02 FB | 	rdlong	local01, fp
249d4     0F FB 01 F1 | 	add	result1, local01
249d8     0C 4E 85 F1 | 	sub	fp, #12
249dc     A7 FA 61 FC | 	wrlong	result1, fp
249e0     14 4E 85 F1 | 	sub	fp, #20
249e4     A7 FA 01 FB | 	rdlong	result1, fp
249e8     09 FA 45 F0 | 	shr	result1, #9
249ec     1C 4E 05 F1 | 	add	fp, #28
249f0     A7 FA 61 FC | 	wrlong	result1, fp
249f4     28 4E 85 F1 | 	sub	fp, #40
249f8     01 FA 15 F2 | 	cmp	result1, #1 wc
249fc     60 01 90 CD |  if_b	jmp	#LR__3806
24a00     2C 4E 05 F1 | 	add	fp, #44
24a04     A7 FA 01 FB | 	rdlong	result1, fp
24a08     04 4E 85 F1 | 	sub	fp, #4
24a0c     A7 18 02 FB | 	rdlong	arg04, fp
24a10     0C FB 01 F1 | 	add	result1, arg04
24a14     10 4E 85 F1 | 	sub	fp, #16
24a18     A7 18 02 FB | 	rdlong	arg04, fp
24a1c     18 4E 85 F1 | 	sub	fp, #24
24a20     0A 18 06 F1 | 	add	arg04, #10
24a24     0C 19 E2 FA | 	rdword	arg04, arg04
24a28     0C FB 19 F2 | 	cmp	result1, arg04 wcz
24a2c     28 00 90 ED |  if_be	jmp	#LR__3803
24a30     18 4E 05 F1 | 	add	fp, #24
24a34     A7 FA 01 FB | 	rdlong	result1, fp
24a38     0A FA 05 F1 | 	add	result1, #10
24a3c     FD FA E1 FA | 	rdword	result1, result1
24a40     14 4E 05 F1 | 	add	fp, #20
24a44     A7 18 02 FB | 	rdlong	arg04, fp
24a48     0C FB 81 F1 | 	sub	result1, arg04
24a4c     04 4E 85 F1 | 	sub	fp, #4
24a50     A7 FA 61 FC | 	wrlong	result1, fp
24a54     28 4E 85 F1 | 	sub	fp, #40
24a58                 | LR__3803
24a58     18 4E 05 F1 | 	add	fp, #24
24a5c     A7 18 02 FB | 	rdlong	arg04, fp
24a60     01 18 06 F1 | 	add	arg04, #1
24a64     0C 13 C2 FA | 	rdbyte	arg01, arg04
24a68     18 4E 05 F1 | 	add	fp, #24
24a6c     A7 14 02 FB | 	rdlong	arg02, fp
24a70     10 4E 85 F1 | 	sub	fp, #16
24a74     A7 16 02 FB | 	rdlong	arg03, fp
24a78     08 4E 05 F1 | 	add	fp, #8
24a7c     A7 18 02 FB | 	rdlong	arg04, fp
24a80     28 4E 85 F1 | 	sub	fp, #40
24a84     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
24a88     00 FA 0D F2 | 	cmp	result1, #0 wz
24a8c     1C 00 90 AD |  if_e	jmp	#LR__3804
24a90     04 4E 05 F1 | 	add	fp, #4
24a94     A7 1E 02 FB | 	rdlong	local01, fp
24a98     04 4E 85 F1 | 	sub	fp, #4
24a9c     11 1E 06 F1 | 	add	local01, #17
24aa0     0F 03 48 FC | 	wrbyte	#1, local01
24aa4     01 FA 05 F6 | 	mov	result1, #1
24aa8     48 03 90 FD | 	jmp	#LR__3813
24aac                 | LR__3804
24aac     04 4E 05 F1 | 	add	fp, #4
24ab0     A7 FA 01 FB | 	rdlong	result1, fp
24ab4     1C FA 05 F1 | 	add	result1, #28
24ab8     FD FA 01 FB | 	rdlong	result1, result1
24abc     1C 4E 05 F1 | 	add	fp, #28
24ac0     A7 20 02 FB | 	rdlong	local02, fp
24ac4     10 FB 81 F1 | 	sub	result1, local02
24ac8     08 4E 05 F1 | 	add	fp, #8
24acc     A7 18 02 FB | 	rdlong	arg04, fp
24ad0     28 4E 85 F1 | 	sub	fp, #40
24ad4     0C FB 11 F2 | 	cmp	result1, arg04 wc
24ad8     68 00 90 3D |  if_ae	jmp	#LR__3805
24adc     04 4E 05 F1 | 	add	fp, #4
24ae0     A7 12 02 FB | 	rdlong	arg01, fp
24ae4     28 12 06 F1 | 	add	arg01, #40
24ae8     2C 4E 05 F1 | 	add	fp, #44
24aec     A7 14 02 FB | 	rdlong	arg02, fp
24af0     2C 4E 85 F1 | 	sub	fp, #44
24af4     A7 FA 01 FB | 	rdlong	result1, fp
24af8     1C FA 05 F1 | 	add	result1, #28
24afc     FD 22 02 FB | 	rdlong	local03, result1
24b00     1C 4E 05 F1 | 	add	fp, #28
24b04     A7 18 02 FB | 	rdlong	arg04, fp
24b08     20 4E 85 F1 | 	sub	fp, #32
24b0c     0C 23 82 F1 | 	sub	local03, arg04
24b10     09 22 66 F0 | 	shl	local03, #9
24b14     11 15 02 F1 | 	add	arg02, local03
24b18     09 16 C6 F9 | 	decod	arg03, #9
24b1c     D8 41 BF FD | 	call	#__system____builtin_memmove
24b20     04 4E 05 F1 | 	add	fp, #4
24b24     A7 18 02 FB | 	rdlong	arg04, fp
24b28     0C FB 01 F6 | 	mov	result1, arg04
24b2c     04 4E 85 F1 | 	sub	fp, #4
24b30     10 18 06 F1 | 	add	arg04, #16
24b34     0C 19 C2 FA | 	rdbyte	arg04, arg04
24b38     7F 18 06 F5 | 	and	arg04, #127
24b3c     10 FA 05 F1 | 	add	result1, #16
24b40     FD 18 42 FC | 	wrbyte	arg04, result1
24b44                 | LR__3805
24b44     28 4E 05 F1 | 	add	fp, #40
24b48     A7 FA 01 FB | 	rdlong	result1, fp
24b4c     09 FA 65 F0 | 	shl	result1, #9
24b50     04 4E 85 F1 | 	sub	fp, #4
24b54     A7 FA 61 FC | 	wrlong	result1, fp
24b58     24 4E 85 F1 | 	sub	fp, #36
24b5c                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
24b5c                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
24b5c                 | ' 				}
24b5c                 | ' 
24b5c                 | ' 
24b5c                 | ' 				wcnt =  ((UINT) 512 )  * cc;
24b5c                 | ' 				continue;
24b5c     74 01 90 FD | 	jmp	#LR__3809
24b60                 | LR__3806
24b60     04 4E 05 F1 | 	add	fp, #4
24b64     A7 20 02 FB | 	rdlong	local02, fp
24b68     1C 20 06 F1 | 	add	local02, #28
24b6c     10 FB 01 FB | 	rdlong	result1, local02
24b70     1C 4E 05 F1 | 	add	fp, #28
24b74     A7 20 02 FB | 	rdlong	local02, fp
24b78     20 4E 85 F1 | 	sub	fp, #32
24b7c     10 FB 09 F2 | 	cmp	result1, local02 wz
24b80     90 00 90 AD |  if_e	jmp	#LR__3807
24b84     04 4E 05 F1 | 	add	fp, #4
24b88     A7 FA 01 FB | 	rdlong	result1, fp
24b8c     FD 22 02 F6 | 	mov	local03, result1
24b90     04 4E 85 F1 | 	sub	fp, #4
24b94     14 22 06 F1 | 	add	local03, #20
24b98     11 23 02 FB | 	rdlong	local03, local03
24b9c     0C FA 05 F1 | 	add	result1, #12
24ba0     FD 24 02 FB | 	rdlong	local04, result1
24ba4     12 27 02 F6 | 	mov	local05, local04
24ba8     13 23 12 F2 | 	cmp	local03, local05 wc
24bac     64 00 90 3D |  if_ae	jmp	#LR__3807
24bb0     18 4E 05 F1 | 	add	fp, #24
24bb4     A7 18 02 FB | 	rdlong	arg04, fp
24bb8     01 18 06 F1 | 	add	arg04, #1
24bbc     0C 13 C2 FA | 	rdbyte	arg01, arg04
24bc0     14 4E 85 F1 | 	sub	fp, #20
24bc4     A7 28 02 FB | 	rdlong	local06, fp
24bc8     28 28 06 F1 | 	add	local06, #40
24bcc     14 2B 02 F6 | 	mov	local07, local06
24bd0     1C 4E 05 F1 | 	add	fp, #28
24bd4     A7 2C 02 FB | 	rdlong	local08, fp
24bd8     20 4E 85 F1 | 	sub	fp, #32
24bdc     01 2E 06 F6 | 	mov	local09, #1
24be0     15 15 02 F6 | 	mov	arg02, local07
24be4     16 17 02 F6 | 	mov	arg03, local08
24be8     01 18 06 F6 | 	mov	arg04, #1
24bec     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
24bf0     FD 30 0A F6 | 	mov	local10, result1 wz
24bf4     1C 00 90 AD |  if_e	jmp	#LR__3807
24bf8     04 4E 05 F1 | 	add	fp, #4
24bfc     A7 30 02 FB | 	rdlong	local10, fp
24c00     04 4E 85 F1 | 	sub	fp, #4
24c04     11 30 06 F1 | 	add	local10, #17
24c08     18 03 48 FC | 	wrbyte	#1, local10
24c0c                 | ' 				fp->fptr < fp->obj.objsize &&
24c0c                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
24c0c                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
24c0c     01 FA 05 F6 | 	mov	result1, #1
24c10     E0 01 90 FD | 	jmp	#LR__3813
24c14                 | LR__3807
24c14     04 4E 05 F1 | 	add	fp, #4
24c18     A7 18 02 FB | 	rdlong	arg04, fp
24c1c     1C 4E 05 F1 | 	add	fp, #28
24c20     A7 FA 01 FB | 	rdlong	result1, fp
24c24     20 4E 85 F1 | 	sub	fp, #32
24c28     1C 18 06 F1 | 	add	arg04, #28
24c2c     0C FB 61 FC | 	wrlong	result1, arg04
24c30                 | LR__3808
24c30     04 4E 05 F1 | 	add	fp, #4
24c34     A7 FA 01 FB | 	rdlong	result1, fp
24c38     14 FA 05 F1 | 	add	result1, #20
24c3c     FD FA 01 FB | 	rdlong	result1, result1
24c40     FF FB 05 F5 | 	and	result1, #511
24c44     09 32 C6 F9 | 	decod	local11, #9
24c48     FD 32 82 F1 | 	sub	local11, result1
24c4c     20 4E 05 F1 | 	add	fp, #32
24c50     A7 32 62 FC | 	wrlong	local11, fp
24c54     18 4E 85 F1 | 	sub	fp, #24
24c58     A7 FA 01 FB | 	rdlong	result1, fp
24c5c     0C 4E 85 F1 | 	sub	fp, #12
24c60     FD 32 1A F2 | 	cmp	local11, result1 wcz
24c64     0C 4E 05 11 |  if_a	add	fp, #12
24c68     A7 32 02 1B |  if_a	rdlong	local11, fp
24c6c     18 4E 05 11 |  if_a	add	fp, #24
24c70     A7 32 62 1C |  if_a	wrlong	local11, fp
24c74     24 4E 85 11 |  if_a	sub	fp, #36
24c78     04 4E 05 F1 | 	add	fp, #4
24c7c     A7 32 02 FB | 	rdlong	local11, fp
24c80     19 13 02 F6 | 	mov	arg01, local11
24c84     28 12 06 F1 | 	add	arg01, #40
24c88     14 32 06 F1 | 	add	local11, #20
24c8c     19 33 02 FB | 	rdlong	local11, local11
24c90     FF 33 06 F5 | 	and	local11, #511
24c94     19 13 02 F1 | 	add	arg01, local11
24c98     2C 4E 05 F1 | 	add	fp, #44
24c9c     A7 14 02 FB | 	rdlong	arg02, fp
24ca0     0C 4E 85 F1 | 	sub	fp, #12
24ca4     A7 16 02 FB | 	rdlong	arg03, fp
24ca8     24 4E 85 F1 | 	sub	fp, #36
24cac     48 40 BF FD | 	call	#__system____builtin_memmove
24cb0     04 4E 05 F1 | 	add	fp, #4
24cb4     A7 FA 01 FB | 	rdlong	result1, fp
24cb8     FD 32 02 F6 | 	mov	local11, result1
24cbc     04 4E 85 F1 | 	sub	fp, #4
24cc0     10 FA 05 F1 | 	add	result1, #16
24cc4     FD FA C1 FA | 	rdbyte	result1, result1
24cc8     80 FA 45 F5 | 	or	result1, #128
24ccc     10 32 06 F1 | 	add	local11, #16
24cd0     19 FB 41 FC | 	wrbyte	result1, local11
24cd4                 | LR__3809
24cd4     0C 4E 05 F1 | 	add	fp, #12
24cd8     A7 32 02 FB | 	rdlong	local11, fp
24cdc     18 4E 05 F1 | 	add	fp, #24
24ce0     A7 FA 01 FB | 	rdlong	result1, fp
24ce4     FD 32 82 F1 | 	sub	local11, result1
24ce8     18 4E 85 F1 | 	sub	fp, #24
24cec     A7 32 62 FC | 	wrlong	local11, fp
24cf0     04 4E 05 F1 | 	add	fp, #4
24cf4     A7 34 02 FB | 	rdlong	local12, fp
24cf8     1A 33 02 FB | 	rdlong	local11, local12
24cfc     14 4E 05 F1 | 	add	fp, #20
24d00     A7 36 02 FB | 	rdlong	local13, fp
24d04     1B 33 02 F1 | 	add	local11, local13
24d08     1A 33 62 FC | 	wrlong	local11, local12
24d0c     0C 4E 05 F1 | 	add	fp, #12
24d10     A7 32 02 FB | 	rdlong	local11, fp
24d14     0C 4E 85 F1 | 	sub	fp, #12
24d18     A7 38 02 FB | 	rdlong	local14, fp
24d1c     1C 33 02 F1 | 	add	local11, local14
24d20     0C 4E 05 F1 | 	add	fp, #12
24d24     A7 32 62 FC | 	wrlong	local11, fp
24d28     2C 4E 85 F1 | 	sub	fp, #44
24d2c     A7 3A 02 FB | 	rdlong	local15, fp
24d30     1D 33 02 F6 | 	mov	local11, local15
24d34     14 3A 06 F1 | 	add	local15, #20
24d38     1D 3B 02 FB | 	rdlong	local15, local15
24d3c     20 4E 05 F1 | 	add	fp, #32
24d40     A7 3C 02 FB | 	rdlong	local16, fp
24d44     1E 3B 02 F1 | 	add	local15, local16
24d48     14 32 06 F1 | 	add	local11, #20
24d4c     19 3B 62 FC | 	wrlong	local15, local11
24d50     20 4E 85 F1 | 	sub	fp, #32
24d54     A7 3E 02 FB | 	rdlong	local17, fp
24d58     1F 33 02 F6 | 	mov	local11, local17
24d5c     1F 41 02 F6 | 	mov	local18, local17
24d60     04 4E 85 F1 | 	sub	fp, #4
24d64     14 3E 06 F1 | 	add	local17, #20
24d68     1F 43 02 FB | 	rdlong	local19, local17
24d6c     0C 40 06 F1 | 	add	local18, #12
24d70     20 45 02 FB | 	rdlong	local20, local18
24d74     22 43 1A F2 | 	cmp	local19, local20 wcz
24d78     24 00 90 ED |  if_be	jmp	#LR__3810
24d7c     04 4E 05 F1 | 	add	fp, #4
24d80     A7 26 02 FB | 	rdlong	local05, fp
24d84     04 4E 85 F1 | 	sub	fp, #4
24d88     13 23 02 F6 | 	mov	local03, local05
24d8c     14 22 06 F1 | 	add	local03, #20
24d90     11 25 02 FB | 	rdlong	local04, local03
24d94     14 22 86 F1 | 	sub	local03, #20
24d98     12 47 02 F6 | 	mov	local21, local04
24d9c     20 00 90 FD | 	jmp	#LR__3811
24da0                 | LR__3810
24da0     04 4E 05 F1 | 	add	fp, #4
24da4     A7 2A 02 FB | 	rdlong	local07, fp
24da8     04 4E 85 F1 | 	sub	fp, #4
24dac     15 31 02 F6 | 	mov	local10, local07
24db0     0C 30 06 F1 | 	add	local10, #12
24db4     18 2D 02 FB | 	rdlong	local08, local10
24db8     0C 30 86 F1 | 	sub	local10, #12
24dbc     16 47 02 F6 | 	mov	local21, local08
24dc0                 | LR__3811
24dc0     0C 32 06 F1 | 	add	local11, #12
24dc4     19 47 62 FC | 	wrlong	local21, local11
24dc8     5C F9 9F FD | 	jmp	#LR__3793
24dcc                 | LR__3812
24dcc     04 4E 05 F1 | 	add	fp, #4
24dd0     A7 34 02 FB | 	rdlong	local12, fp
24dd4     1A 1F 02 F6 | 	mov	local01, local12
24dd8     04 4E 85 F1 | 	sub	fp, #4
24ddc     10 34 06 F1 | 	add	local12, #16
24de0     1A 33 C2 FA | 	rdbyte	local11, local12
24de4     40 32 46 F5 | 	or	local11, #64
24de8     10 1E 06 F1 | 	add	local01, #16
24dec     0F 33 42 FC | 	wrbyte	local11, local01
24df0                 | ' 
24df0                 | ' 
24df0                 | ' 
24df0                 | ' 
24df0                 | ' 
24df0                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
24df0                 | ' 		fp->flag |=  0x80 ;
24df0                 | ' 
24df0                 | ' 	}
24df0                 | ' 
24df0                 | ' 	fp->flag |=  0x40 ;
24df0                 | ' 
24df0                 | ' 	return FR_OK ;
24df0     00 FA 05 F6 | 	mov	result1, #0
24df4                 | LR__3813
24df4     A7 F0 03 F6 | 	mov	ptra, fp
24df8     B2 00 A0 FD | 	call	#popregs_
24dfc                 | _fatfs_cc_f_write_ret
24dfc     2D 00 64 FD | 	ret
24e00                 | 
24e00                 | _fatfs_cc_f_sync
24e00     00 4A 05 F6 | 	mov	COUNT_, #0
24e04     A8 00 A0 FD | 	call	#pushregs_
24e08     18 F0 07 F1 | 	add	ptra, #24
24e0c     04 4E 05 F1 | 	add	fp, #4
24e10     A7 12 62 FC | 	wrlong	arg01, fp
24e14     08 4E 05 F1 | 	add	fp, #8
24e18     A7 14 02 F6 | 	mov	arg02, fp
24e1c     0C 4E 85 F1 | 	sub	fp, #12
24e20     D0 E8 BF FD | 	call	#_fatfs_cc_validate
24e24     08 4E 05 F1 | 	add	fp, #8
24e28     A7 FA 61 FC | 	wrlong	result1, fp
24e2c     08 4E 85 F1 | 	sub	fp, #8
24e30     00 FA 0D F2 | 	cmp	result1, #0 wz
24e34     C0 01 90 5D |  if_ne	jmp	#LR__3823
24e38     04 4E 05 F1 | 	add	fp, #4
24e3c     A7 18 02 FB | 	rdlong	arg04, fp
24e40     04 4E 85 F1 | 	sub	fp, #4
24e44     10 18 06 F1 | 	add	arg04, #16
24e48     0C 19 C2 FA | 	rdbyte	arg04, arg04
24e4c     40 18 CE F7 | 	test	arg04, #64 wz
24e50     A4 01 90 AD |  if_e	jmp	#LR__3822
24e54     04 4E 05 F1 | 	add	fp, #4
24e58     A7 18 02 FB | 	rdlong	arg04, fp
24e5c     04 4E 85 F1 | 	sub	fp, #4
24e60     10 18 06 F1 | 	add	arg04, #16
24e64     0C 19 C2 FA | 	rdbyte	arg04, arg04
24e68     80 18 CE F7 | 	test	arg04, #128 wz
24e6c     64 00 90 AD |  if_e	jmp	#LR__3820
24e70     0C 4E 05 F1 | 	add	fp, #12
24e74     A7 18 02 FB | 	rdlong	arg04, fp
24e78     01 18 06 F1 | 	add	arg04, #1
24e7c     0C 13 C2 FA | 	rdbyte	arg01, arg04
24e80     08 4E 85 F1 | 	sub	fp, #8
24e84     A7 18 02 FB | 	rdlong	arg04, fp
24e88     0C 15 02 F6 | 	mov	arg02, arg04
24e8c     28 14 06 F1 | 	add	arg02, #40
24e90     04 4E 85 F1 | 	sub	fp, #4
24e94     1C 18 06 F1 | 	add	arg04, #28
24e98     0C 17 02 FB | 	rdlong	arg03, arg04
24e9c     01 18 06 F6 | 	mov	arg04, #1
24ea0     0C AE BF FD | 	call	#_fatfs_cc_disk_write
24ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
24ea8     01 FA 05 56 |  if_ne	mov	result1, #1
24eac     54 01 90 5D |  if_ne	jmp	#LR__3824
24eb0     04 4E 05 F1 | 	add	fp, #4
24eb4     A7 18 02 FB | 	rdlong	arg04, fp
24eb8     0C 17 02 F6 | 	mov	arg03, arg04
24ebc     04 4E 85 F1 | 	sub	fp, #4
24ec0     10 18 06 F1 | 	add	arg04, #16
24ec4     0C 19 C2 FA | 	rdbyte	arg04, arg04
24ec8     7F 18 06 F5 | 	and	arg04, #127
24ecc     10 16 06 F1 | 	add	arg03, #16
24ed0     0B 19 42 FC | 	wrbyte	arg04, arg03
24ed4                 | LR__3820
24ed4     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
24ed8     10 4E 05 F1 | 	add	fp, #16
24edc     A7 FA 61 FC | 	wrlong	result1, fp
24ee0     04 4E 85 F1 | 	sub	fp, #4
24ee4     A7 12 02 FB | 	rdlong	arg01, fp
24ee8     08 4E 85 F1 | 	sub	fp, #8
24eec     A7 18 02 FB | 	rdlong	arg04, fp
24ef0     04 4E 85 F1 | 	sub	fp, #4
24ef4     20 18 06 F1 | 	add	arg04, #32
24ef8     0C 15 02 FB | 	rdlong	arg02, arg04
24efc     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
24f00     08 4E 05 F1 | 	add	fp, #8
24f04     A7 FA 61 FC | 	wrlong	result1, fp
24f08     08 4E 85 F1 | 	sub	fp, #8
24f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
24f10     E4 00 90 5D |  if_ne	jmp	#LR__3821
24f14     04 4E 05 F1 | 	add	fp, #4
24f18     A7 18 02 FB | 	rdlong	arg04, fp
24f1c     24 18 06 F1 | 	add	arg04, #36
24f20     0C 19 02 FB | 	rdlong	arg04, arg04
24f24     10 4E 05 F1 | 	add	fp, #16
24f28     A7 18 62 FC | 	wrlong	arg04, fp
24f2c     0C 17 02 F6 | 	mov	arg03, arg04
24f30     0B 16 06 F1 | 	add	arg03, #11
24f34     0B 17 C2 FA | 	rdbyte	arg03, arg03
24f38     20 16 46 F5 | 	or	arg03, #32
24f3c     0B 18 06 F1 | 	add	arg04, #11
24f40     0C 17 42 FC | 	wrbyte	arg03, arg04
24f44     10 4E 85 F1 | 	sub	fp, #16
24f48     A7 18 02 FB | 	rdlong	arg04, fp
24f4c     0C 13 02 FB | 	rdlong	arg01, arg04
24f50     10 4E 05 F1 | 	add	fp, #16
24f54     A7 14 02 FB | 	rdlong	arg02, fp
24f58     14 4E 85 F1 | 	sub	fp, #20
24f5c     08 18 06 F1 | 	add	arg04, #8
24f60     0C 17 02 FB | 	rdlong	arg03, arg04
24f64     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
24f68     14 4E 05 F1 | 	add	fp, #20
24f6c     A7 12 02 FB | 	rdlong	arg01, fp
24f70     1C 12 06 F1 | 	add	arg01, #28
24f74     10 4E 85 F1 | 	sub	fp, #16
24f78     A7 18 02 FB | 	rdlong	arg04, fp
24f7c     0C 18 06 F1 | 	add	arg04, #12
24f80     0C 15 02 FB | 	rdlong	arg02, arg04
24f84     09 15 62 FC | 	wrlong	arg02, arg01
24f88     10 4E 05 F1 | 	add	fp, #16
24f8c     A7 12 02 FB | 	rdlong	arg01, fp
24f90     16 12 06 F1 | 	add	arg01, #22
24f94     04 4E 85 F1 | 	sub	fp, #4
24f98     A7 14 02 FB | 	rdlong	arg02, fp
24f9c     09 15 62 FC | 	wrlong	arg02, arg01
24fa0     04 4E 05 F1 | 	add	fp, #4
24fa4     A7 12 02 FB | 	rdlong	arg01, fp
24fa8     12 12 06 F1 | 	add	arg01, #18
24fac     09 01 58 FC | 	wrword	#0, arg01
24fb0     08 4E 85 F1 | 	sub	fp, #8
24fb4     A7 18 02 FB | 	rdlong	arg04, fp
24fb8     03 18 06 F1 | 	add	arg04, #3
24fbc     0C 03 48 FC | 	wrbyte	#1, arg04
24fc0     A7 12 02 FB | 	rdlong	arg01, fp
24fc4     0C 4E 85 F1 | 	sub	fp, #12
24fc8     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
24fcc     08 4E 05 F1 | 	add	fp, #8
24fd0     A7 FA 61 FC | 	wrlong	result1, fp
24fd4     04 4E 85 F1 | 	sub	fp, #4
24fd8     A7 18 02 FB | 	rdlong	arg04, fp
24fdc     0C 17 02 F6 | 	mov	arg03, arg04
24fe0     04 4E 85 F1 | 	sub	fp, #4
24fe4     10 18 06 F1 | 	add	arg04, #16
24fe8     0C 19 C2 FA | 	rdbyte	arg04, arg04
24fec     BF 18 06 F5 | 	and	arg04, #191
24ff0     10 16 06 F1 | 	add	arg03, #16
24ff4     0B 19 42 FC | 	wrbyte	arg04, arg03
24ff8                 | LR__3821
24ff8                 | LR__3822
24ff8                 | LR__3823
24ff8                 | ' 					dir = fp->dir_ptr;
24ff8                 | ' 					dir[ 11 ] |=  0x20 ;
24ff8                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
24ff8                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
24ff8                 | ' 					st_dword(dir +  22 , tm);
24ff8                 | ' 					st_word(dir +  18 , 0);
24ff8                 | ' 					fs->wflag = 1;
24ff8                 | ' 					res = sync_fs(fs);
24ff8                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
24ff8                 | ' 				}
24ff8                 | ' 			}
24ff8                 | ' 		}
24ff8                 | ' 	}
24ff8                 | ' 
24ff8                 | ' 	return res ;
24ff8     08 4E 05 F1 | 	add	fp, #8
24ffc     A7 FA 01 FB | 	rdlong	result1, fp
25000     08 4E 85 F1 | 	sub	fp, #8
25004                 | LR__3824
25004     A7 F0 03 F6 | 	mov	ptra, fp
25008     B2 00 A0 FD | 	call	#popregs_
2500c                 | _fatfs_cc_f_sync_ret
2500c     2D 00 64 FD | 	ret
25010                 | 
25010                 | _fatfs_cc_f_close
25010     01 4A 05 F6 | 	mov	COUNT_, #1
25014     A8 00 A0 FD | 	call	#pushregs_
25018     10 F0 07 F1 | 	add	ptra, #16
2501c     04 4E 05 F1 | 	add	fp, #4
25020     A7 12 62 FC | 	wrlong	arg01, fp
25024     04 4E 85 F1 | 	sub	fp, #4
25028     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2502c     08 4E 05 F1 | 	add	fp, #8
25030     A7 FA 61 FC | 	wrlong	result1, fp
25034     08 4E 85 F1 | 	sub	fp, #8
25038     00 FA 0D F2 | 	cmp	result1, #0 wz
2503c     38 00 90 5D |  if_ne	jmp	#LR__3830
25040     04 4E 05 F1 | 	add	fp, #4
25044     A7 12 02 FB | 	rdlong	arg01, fp
25048     08 4E 05 F1 | 	add	fp, #8
2504c     A7 14 02 F6 | 	mov	arg02, fp
25050     0C 4E 85 F1 | 	sub	fp, #12
25054     9C E6 BF FD | 	call	#_fatfs_cc_validate
25058     08 4E 05 F1 | 	add	fp, #8
2505c     A7 FA 61 FC | 	wrlong	result1, fp
25060     08 4E 85 F1 | 	sub	fp, #8
25064     00 FA 0D F2 | 	cmp	result1, #0 wz
25068     04 4E 05 A1 |  if_e	add	fp, #4
2506c     A7 1E 02 AB |  if_e	rdlong	local01, fp
25070     04 4E 85 A1 |  if_e	sub	fp, #4
25074     0F 01 68 AC |  if_e	wrlong	#0, local01
25078                 | LR__3830
25078                 | ' 
25078                 | ' 
25078                 | ' 
25078                 | ' 
25078                 | ' 			fp->obj.fs = 0;
25078                 | ' #line 4192 "ff.c"
25078                 | ' 		}
25078                 | ' 	}
25078                 | ' 	return res;
25078     08 4E 05 F1 | 	add	fp, #8
2507c     A7 FA 01 FB | 	rdlong	result1, fp
25080     08 4E 85 F1 | 	sub	fp, #8
25084     A7 F0 03 F6 | 	mov	ptra, fp
25088     B2 00 A0 FD | 	call	#popregs_
2508c                 | _fatfs_cc_f_close_ret
2508c     2D 00 64 FD | 	ret
25090                 | 
25090                 | _fatfs_cc_f_lseek
25090     00 4A 05 F6 | 	mov	COUNT_, #0
25094     A8 00 A0 FD | 	call	#pushregs_
25098     24 F0 07 F1 | 	add	ptra, #36
2509c     04 4E 05 F1 | 	add	fp, #4
250a0     A7 12 62 FC | 	wrlong	arg01, fp
250a4     04 4E 05 F1 | 	add	fp, #4
250a8     A7 14 62 FC | 	wrlong	arg02, fp
250ac     04 4E 85 F1 | 	sub	fp, #4
250b0     A7 12 02 FB | 	rdlong	arg01, fp
250b4     0C 4E 05 F1 | 	add	fp, #12
250b8     A7 14 02 F6 | 	mov	arg02, fp
250bc     10 4E 85 F1 | 	sub	fp, #16
250c0     30 E6 BF FD | 	call	#_fatfs_cc_validate
250c4     0C 4E 05 F1 | 	add	fp, #12
250c8     A7 FA 61 FC | 	wrlong	result1, fp
250cc     0C 4E 85 F1 | 	sub	fp, #12
250d0     00 FA 0D F2 | 	cmp	result1, #0 wz
250d4     1C 00 90 5D |  if_ne	jmp	#LR__3840
250d8     04 4E 05 F1 | 	add	fp, #4
250dc     A7 18 02 FB | 	rdlong	arg04, fp
250e0     11 18 06 F1 | 	add	arg04, #17
250e4     0C 19 C2 FA | 	rdbyte	arg04, arg04
250e8     08 4E 05 F1 | 	add	fp, #8
250ec     A7 18 62 FC | 	wrlong	arg04, fp
250f0     0C 4E 85 F1 | 	sub	fp, #12
250f4                 | LR__3840
250f4     0C 4E 05 F1 | 	add	fp, #12
250f8     A7 18 0A FB | 	rdlong	arg04, fp wz
250fc     0C 4E 85 F1 | 	sub	fp, #12
25100     0C 4E 05 51 |  if_ne	add	fp, #12
25104     A7 FA 01 5B |  if_ne	rdlong	result1, fp
25108     0C 4E 85 51 |  if_ne	sub	fp, #12
2510c     40 06 90 5D |  if_ne	jmp	#LR__3863
25110     04 4E 05 F1 | 	add	fp, #4
25114     A7 18 02 FB | 	rdlong	arg04, fp
25118     04 4E 05 F1 | 	add	fp, #4
2511c     A7 16 02 FB | 	rdlong	arg03, fp
25120     08 4E 85 F1 | 	sub	fp, #8
25124     0C 18 06 F1 | 	add	arg04, #12
25128     0C 19 02 FB | 	rdlong	arg04, arg04
2512c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
25130     3C 00 90 ED |  if_be	jmp	#LR__3841
25134     04 4E 05 F1 | 	add	fp, #4
25138     A7 16 02 FB | 	rdlong	arg03, fp
2513c     04 4E 85 F1 | 	sub	fp, #4
25140     10 16 06 F1 | 	add	arg03, #16
25144     0B 17 C2 FA | 	rdbyte	arg03, arg03
25148     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2514c     02 16 CE F7 | 	test	arg03, #2 wz
25150     1C 00 90 5D |  if_ne	jmp	#LR__3841
25154     04 4E 05 F1 | 	add	fp, #4
25158     A7 16 02 FB | 	rdlong	arg03, fp
2515c     0C 16 06 F1 | 	add	arg03, #12
25160     0B 17 02 FB | 	rdlong	arg03, arg03
25164     04 4E 05 F1 | 	add	fp, #4
25168     A7 16 62 FC | 	wrlong	arg03, fp
2516c     08 4E 85 F1 | 	sub	fp, #8
25170                 | LR__3841
25170     04 4E 05 F1 | 	add	fp, #4
25174     A7 16 02 FB | 	rdlong	arg03, fp
25178     14 16 06 F1 | 	add	arg03, #20
2517c     0B 17 02 FB | 	rdlong	arg03, arg03
25180     1C 4E 05 F1 | 	add	fp, #28
25184     A7 16 62 FC | 	wrlong	arg03, fp
25188     1C 4E 85 F1 | 	sub	fp, #28
2518c     A7 16 02 FB | 	rdlong	arg03, fp
25190     18 4E 05 F1 | 	add	fp, #24
25194     A7 00 68 FC | 	wrlong	#0, fp
25198     14 16 06 F1 | 	add	arg03, #20
2519c     0B 01 68 FC | 	wrlong	#0, arg03
251a0     14 4E 85 F1 | 	sub	fp, #20
251a4     A7 16 02 FB | 	rdlong	arg03, fp
251a8     08 4E 85 F1 | 	sub	fp, #8
251ac     01 16 16 F2 | 	cmp	arg03, #1 wc
251b0     E4 03 90 CD |  if_b	jmp	#LR__3857
251b4     10 4E 05 F1 | 	add	fp, #16
251b8     A7 16 02 FB | 	rdlong	arg03, fp
251bc     0A 16 06 F1 | 	add	arg03, #10
251c0     0B 19 E2 FA | 	rdword	arg04, arg03
251c4     09 18 66 F0 | 	shl	arg04, #9
251c8     08 4E 05 F1 | 	add	fp, #8
251cc     A7 18 62 FC | 	wrlong	arg04, fp
251d0     08 4E 05 F1 | 	add	fp, #8
251d4     A7 18 02 FB | 	rdlong	arg04, fp
251d8     20 4E 85 F1 | 	sub	fp, #32
251dc     01 18 16 F2 | 	cmp	arg04, #1 wc
251e0     AC 00 90 CD |  if_b	jmp	#LR__3842
251e4     08 4E 05 F1 | 	add	fp, #8
251e8     A7 18 02 FB | 	rdlong	arg04, fp
251ec     01 18 86 F1 | 	sub	arg04, #1
251f0     10 4E 05 F1 | 	add	fp, #16
251f4     A7 16 02 FB | 	rdlong	arg03, fp
251f8     0B 19 12 FD | 	qdiv	arg04, arg03
251fc     08 4E 05 F1 | 	add	fp, #8
25200     A7 FA 01 FB | 	rdlong	result1, fp
25204     01 FA 85 F1 | 	sub	result1, #1
25208     18 18 62 FD | 	getqx	arg04
2520c     0B FB 11 FD | 	qdiv	result1, arg03
25210     20 4E 85 F1 | 	sub	fp, #32
25214     18 16 62 FD | 	getqx	arg03
25218     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2521c     70 00 90 CD |  if_b	jmp	#LR__3842
25220     04 4E 05 F1 | 	add	fp, #4
25224     A7 16 02 FB | 	rdlong	arg03, fp
25228     1C 4E 05 F1 | 	add	fp, #28
2522c     A7 FA 01 FB | 	rdlong	result1, fp
25230     01 FA 85 F1 | 	sub	result1, #1
25234     08 4E 85 F1 | 	sub	fp, #8
25238     A7 18 02 FB | 	rdlong	arg04, fp
2523c     01 18 86 F1 | 	sub	arg04, #1
25240     0C FB 21 F5 | 	andn	result1, arg04
25244     14 16 06 F1 | 	add	arg03, #20
25248     0B FB 61 FC | 	wrlong	result1, arg03
2524c     10 4E 85 F1 | 	sub	fp, #16
25250     A7 16 02 FB | 	rdlong	arg03, fp
25254     04 4E 85 F1 | 	sub	fp, #4
25258     A7 18 02 FB | 	rdlong	arg04, fp
2525c     14 18 06 F1 | 	add	arg04, #20
25260     0C 19 02 FB | 	rdlong	arg04, arg04
25264     0C 17 82 F1 | 	sub	arg03, arg04
25268     04 4E 05 F1 | 	add	fp, #4
2526c     A7 16 62 FC | 	wrlong	arg03, fp
25270     04 4E 85 F1 | 	sub	fp, #4
25274     A7 16 02 FB | 	rdlong	arg03, fp
25278     18 16 06 F1 | 	add	arg03, #24
2527c     0B 17 02 FB | 	rdlong	arg03, arg03
25280     10 4E 05 F1 | 	add	fp, #16
25284     A7 16 62 FC | 	wrlong	arg03, fp
25288     14 4E 85 F1 | 	sub	fp, #20
2528c     D0 00 90 FD | 	jmp	#LR__3846
25290                 | LR__3842
25290     04 4E 05 F1 | 	add	fp, #4
25294     A7 16 02 FB | 	rdlong	arg03, fp
25298     08 16 06 F1 | 	add	arg03, #8
2529c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
252a0     10 4E 05 F1 | 	add	fp, #16
252a4     A7 16 62 FC | 	wrlong	arg03, fp
252a8     14 4E 85 F1 | 	sub	fp, #20
252ac     94 00 90 5D |  if_ne	jmp	#LR__3845
252b0     04 4E 05 F1 | 	add	fp, #4
252b4     A7 12 02 FB | 	rdlong	arg01, fp
252b8     04 4E 85 F1 | 	sub	fp, #4
252bc     00 14 06 F6 | 	mov	arg02, #0
252c0     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
252c4     14 4E 05 F1 | 	add	fp, #20
252c8     A7 FA 61 FC | 	wrlong	result1, fp
252cc     14 4E 85 F1 | 	sub	fp, #20
252d0     01 FA 0D F2 | 	cmp	result1, #1 wz
252d4     1C 00 90 5D |  if_ne	jmp	#LR__3843
252d8     04 4E 05 F1 | 	add	fp, #4
252dc     A7 16 02 FB | 	rdlong	arg03, fp
252e0     04 4E 85 F1 | 	sub	fp, #4
252e4     11 16 06 F1 | 	add	arg03, #17
252e8     0B 05 48 FC | 	wrbyte	#2, arg03
252ec     02 FA 05 F6 | 	mov	result1, #2
252f0     5C 04 90 FD | 	jmp	#LR__3863
252f4                 | LR__3843
252f4     14 4E 05 F1 | 	add	fp, #20
252f8     A7 FA 01 FB | 	rdlong	result1, fp
252fc     14 4E 85 F1 | 	sub	fp, #20
25300     FF FF 7F FF 
25304     FF FB 0D F2 | 	cmp	result1, ##-1 wz
25308     1C 00 90 5D |  if_ne	jmp	#LR__3844
2530c     04 4E 05 F1 | 	add	fp, #4
25310     A7 16 02 FB | 	rdlong	arg03, fp
25314     04 4E 85 F1 | 	sub	fp, #4
25318     11 16 06 F1 | 	add	arg03, #17
2531c     0B 03 48 FC | 	wrbyte	#1, arg03
25320     01 FA 05 F6 | 	mov	result1, #1
25324     28 04 90 FD | 	jmp	#LR__3863
25328                 | LR__3844
25328     04 4E 05 F1 | 	add	fp, #4
2532c     A7 16 02 FB | 	rdlong	arg03, fp
25330     10 4E 05 F1 | 	add	fp, #16
25334     A7 18 02 FB | 	rdlong	arg04, fp
25338     14 4E 85 F1 | 	sub	fp, #20
2533c     08 16 06 F1 | 	add	arg03, #8
25340     0B 19 62 FC | 	wrlong	arg04, arg03
25344                 | LR__3845
25344     04 4E 05 F1 | 	add	fp, #4
25348     A7 16 02 FB | 	rdlong	arg03, fp
2534c     10 4E 05 F1 | 	add	fp, #16
25350     A7 18 02 FB | 	rdlong	arg04, fp
25354     14 4E 85 F1 | 	sub	fp, #20
25358     18 16 06 F1 | 	add	arg03, #24
2535c     0B 19 62 FC | 	wrlong	arg04, arg03
25360                 | LR__3846
25360     14 4E 05 F1 | 	add	fp, #20
25364     A7 16 0A FB | 	rdlong	arg03, fp wz
25368     14 4E 85 F1 | 	sub	fp, #20
2536c     28 02 90 AD |  if_e	jmp	#LR__3856
25370                 | ' 				while (ofs > bcs) {
25370                 | LR__3847
25370     08 4E 05 F1 | 	add	fp, #8
25374     A7 18 02 FB | 	rdlong	arg04, fp
25378     10 4E 05 F1 | 	add	fp, #16
2537c     A7 16 02 FB | 	rdlong	arg03, fp
25380     18 4E 85 F1 | 	sub	fp, #24
25384     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
25388     68 01 90 ED |  if_be	jmp	#LR__3853
2538c     08 4E 05 F1 | 	add	fp, #8
25390     A7 18 02 FB | 	rdlong	arg04, fp
25394     10 4E 05 F1 | 	add	fp, #16
25398     A7 16 02 FB | 	rdlong	arg03, fp
2539c     0B 19 82 F1 | 	sub	arg04, arg03
253a0     10 4E 85 F1 | 	sub	fp, #16
253a4     A7 18 62 FC | 	wrlong	arg04, fp
253a8     04 4E 85 F1 | 	sub	fp, #4
253ac     A7 18 02 FB | 	rdlong	arg04, fp
253b0     0C FB 01 F6 | 	mov	result1, arg04
253b4     14 18 06 F1 | 	add	arg04, #20
253b8     0C 19 02 FB | 	rdlong	arg04, arg04
253bc     14 4E 05 F1 | 	add	fp, #20
253c0     A7 16 02 FB | 	rdlong	arg03, fp
253c4     0B 19 02 F1 | 	add	arg04, arg03
253c8     14 FA 05 F1 | 	add	result1, #20
253cc     FD 18 62 FC | 	wrlong	arg04, result1
253d0     14 4E 85 F1 | 	sub	fp, #20
253d4     A7 16 02 FB | 	rdlong	arg03, fp
253d8     04 4E 85 F1 | 	sub	fp, #4
253dc     10 16 06 F1 | 	add	arg03, #16
253e0     0B 17 C2 FA | 	rdbyte	arg03, arg03
253e4     02 16 CE F7 | 	test	arg03, #2 wz
253e8     3C 00 90 AD |  if_e	jmp	#LR__3848
253ec     04 4E 05 F1 | 	add	fp, #4
253f0     A7 12 02 FB | 	rdlong	arg01, fp
253f4     10 4E 05 F1 | 	add	fp, #16
253f8     A7 14 02 FB | 	rdlong	arg02, fp
253fc     14 4E 85 F1 | 	sub	fp, #20
25400     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
25404     14 4E 05 F1 | 	add	fp, #20
25408     A7 FA 61 FC | 	wrlong	result1, fp
2540c     00 FA 4D F2 | 	cmps	result1, #0 wz
25410     14 4E 85 F1 | 	sub	fp, #20
25414     08 4E 05 A1 |  if_e	add	fp, #8
25418     A7 00 68 AC |  if_e	wrlong	#0, fp
2541c     08 4E 85 A1 |  if_e	sub	fp, #8
25420                 | ' 							ofs = 0; break;
25420     D0 00 90 AD |  if_e	jmp	#LR__3853
25424     24 00 90 FD | 	jmp	#LR__3849
25428                 | LR__3848
25428     04 4E 05 F1 | 	add	fp, #4
2542c     A7 12 02 FB | 	rdlong	arg01, fp
25430     10 4E 05 F1 | 	add	fp, #16
25434     A7 14 02 FB | 	rdlong	arg02, fp
25438     14 4E 85 F1 | 	sub	fp, #20
2543c     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
25440     14 4E 05 F1 | 	add	fp, #20
25444     A7 FA 61 FC | 	wrlong	result1, fp
25448     14 4E 85 F1 | 	sub	fp, #20
2544c                 | LR__3849
2544c     14 4E 05 F1 | 	add	fp, #20
25450     A7 16 02 FB | 	rdlong	arg03, fp
25454     14 4E 85 F1 | 	sub	fp, #20
25458     FF FF 7F FF 
2545c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
25460     1C 00 90 5D |  if_ne	jmp	#LR__3850
25464     04 4E 05 F1 | 	add	fp, #4
25468     A7 16 02 FB | 	rdlong	arg03, fp
2546c     04 4E 85 F1 | 	sub	fp, #4
25470     11 16 06 F1 | 	add	arg03, #17
25474     0B 03 48 FC | 	wrbyte	#1, arg03
25478     01 FA 05 F6 | 	mov	result1, #1
2547c     D0 02 90 FD | 	jmp	#LR__3863
25480                 | LR__3850
25480     14 4E 05 F1 | 	add	fp, #20
25484     A7 16 02 FB | 	rdlong	arg03, fp
25488     14 4E 85 F1 | 	sub	fp, #20
2548c     02 16 16 F2 | 	cmp	arg03, #2 wc
25490     24 00 90 CD |  if_b	jmp	#LR__3851
25494     10 4E 05 F1 | 	add	fp, #16
25498     A7 18 02 FB | 	rdlong	arg04, fp
2549c     04 4E 05 F1 | 	add	fp, #4
254a0     A7 16 02 FB | 	rdlong	arg03, fp
254a4     14 4E 85 F1 | 	sub	fp, #20
254a8     18 18 06 F1 | 	add	arg04, #24
254ac     0C 19 02 FB | 	rdlong	arg04, arg04
254b0     0C 17 12 F2 | 	cmp	arg03, arg04 wc
254b4     1C 00 90 CD |  if_b	jmp	#LR__3852
254b8                 | LR__3851
254b8     04 4E 05 F1 | 	add	fp, #4
254bc     A7 16 02 FB | 	rdlong	arg03, fp
254c0     04 4E 85 F1 | 	sub	fp, #4
254c4     11 16 06 F1 | 	add	arg03, #17
254c8     0B 05 48 FC | 	wrbyte	#2, arg03
254cc     02 FA 05 F6 | 	mov	result1, #2
254d0     7C 02 90 FD | 	jmp	#LR__3863
254d4                 | LR__3852
254d4     04 4E 05 F1 | 	add	fp, #4
254d8     A7 18 02 FB | 	rdlong	arg04, fp
254dc     10 4E 05 F1 | 	add	fp, #16
254e0     A7 16 02 FB | 	rdlong	arg03, fp
254e4     14 4E 85 F1 | 	sub	fp, #20
254e8     18 18 06 F1 | 	add	arg04, #24
254ec     0C 17 62 FC | 	wrlong	arg03, arg04
254f0     7C FE 9F FD | 	jmp	#LR__3847
254f4                 | LR__3853
254f4     04 4E 05 F1 | 	add	fp, #4
254f8     A7 16 02 FB | 	rdlong	arg03, fp
254fc     0B 13 02 F6 | 	mov	arg01, arg03
25500     14 16 06 F1 | 	add	arg03, #20
25504     0B 15 02 FB | 	rdlong	arg02, arg03
25508     04 4E 05 F1 | 	add	fp, #4
2550c     A7 16 02 FB | 	rdlong	arg03, fp
25510     0B 15 02 F1 | 	add	arg02, arg03
25514     14 12 06 F1 | 	add	arg01, #20
25518     09 15 62 FC | 	wrlong	arg02, arg01
2551c     A7 16 02 FB | 	rdlong	arg03, fp
25520     08 4E 85 F1 | 	sub	fp, #8
25524     FF 17 CE F7 | 	test	arg03, #511 wz
25528     6C 00 90 AD |  if_e	jmp	#LR__3855
2552c     10 4E 05 F1 | 	add	fp, #16
25530     A7 12 02 FB | 	rdlong	arg01, fp
25534     04 4E 05 F1 | 	add	fp, #4
25538     A7 14 02 FB | 	rdlong	arg02, fp
2553c     14 4E 85 F1 | 	sub	fp, #20
25540     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
25544     1C 4E 05 F1 | 	add	fp, #28
25548     A7 FA 61 FC | 	wrlong	result1, fp
2554c     1C 4E 85 F1 | 	sub	fp, #28
25550     00 FA 0D F2 | 	cmp	result1, #0 wz
25554     1C 00 90 5D |  if_ne	jmp	#LR__3854
25558     04 4E 05 F1 | 	add	fp, #4
2555c     A7 16 02 FB | 	rdlong	arg03, fp
25560     04 4E 85 F1 | 	sub	fp, #4
25564     11 16 06 F1 | 	add	arg03, #17
25568     0B 05 48 FC | 	wrbyte	#2, arg03
2556c     02 FA 05 F6 | 	mov	result1, #2
25570     DC 01 90 FD | 	jmp	#LR__3863
25574                 | LR__3854
25574     1C 4E 05 F1 | 	add	fp, #28
25578     A7 18 02 FB | 	rdlong	arg04, fp
2557c     14 4E 85 F1 | 	sub	fp, #20
25580     A7 16 02 FB | 	rdlong	arg03, fp
25584     09 16 46 F0 | 	shr	arg03, #9
25588     0B 19 02 F1 | 	add	arg04, arg03
2558c     14 4E 05 F1 | 	add	fp, #20
25590     A7 18 62 FC | 	wrlong	arg04, fp
25594     1C 4E 85 F1 | 	sub	fp, #28
25598                 | LR__3855
25598                 | LR__3856
25598                 | LR__3857
25598     04 4E 05 F1 | 	add	fp, #4
2559c     A7 18 02 FB | 	rdlong	arg04, fp
255a0     0C 17 02 F6 | 	mov	arg03, arg04
255a4     04 4E 85 F1 | 	sub	fp, #4
255a8     14 16 06 F1 | 	add	arg03, #20
255ac     0B 17 02 FB | 	rdlong	arg03, arg03
255b0     0C 18 06 F1 | 	add	arg04, #12
255b4     0C 19 02 FB | 	rdlong	arg04, arg04
255b8     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
255bc     3C 00 90 ED |  if_be	jmp	#LR__3858
255c0     04 4E 05 F1 | 	add	fp, #4
255c4     A7 18 02 FB | 	rdlong	arg04, fp
255c8     0C 17 02 F6 | 	mov	arg03, arg04
255cc     14 18 06 F1 | 	add	arg04, #20
255d0     0C 19 02 FB | 	rdlong	arg04, arg04
255d4     0C 16 06 F1 | 	add	arg03, #12
255d8     0B 19 62 FC | 	wrlong	arg04, arg03
255dc     A7 18 02 FB | 	rdlong	arg04, fp
255e0     0C 17 02 F6 | 	mov	arg03, arg04
255e4     04 4E 85 F1 | 	sub	fp, #4
255e8     10 18 06 F1 | 	add	arg04, #16
255ec     0C 19 C2 FA | 	rdbyte	arg04, arg04
255f0     40 18 46 F5 | 	or	arg04, #64
255f4     10 16 06 F1 | 	add	arg03, #16
255f8     0B 19 42 FC | 	wrbyte	arg04, arg03
255fc                 | LR__3858
255fc     04 4E 05 F1 | 	add	fp, #4
25600     A7 16 02 FB | 	rdlong	arg03, fp
25604     04 4E 85 F1 | 	sub	fp, #4
25608     14 16 06 F1 | 	add	arg03, #20
2560c     0B 17 02 FB | 	rdlong	arg03, arg03
25610     FF 17 CE F7 | 	test	arg03, #511 wz
25614     2C 01 90 AD |  if_e	jmp	#LR__3862
25618     04 4E 05 F1 | 	add	fp, #4
2561c     A7 18 02 FB | 	rdlong	arg04, fp
25620     18 4E 05 F1 | 	add	fp, #24
25624     A7 16 02 FB | 	rdlong	arg03, fp
25628     1C 4E 85 F1 | 	sub	fp, #28
2562c     1C 18 06 F1 | 	add	arg04, #28
25630     0C 19 02 FB | 	rdlong	arg04, arg04
25634     0C 17 0A F2 | 	cmp	arg03, arg04 wz
25638     08 01 90 AD |  if_e	jmp	#LR__3862
2563c     04 4E 05 F1 | 	add	fp, #4
25640     A7 16 02 FB | 	rdlong	arg03, fp
25644     04 4E 85 F1 | 	sub	fp, #4
25648     10 16 06 F1 | 	add	arg03, #16
2564c     0B 17 C2 FA | 	rdbyte	arg03, arg03
25650     80 16 CE F7 | 	test	arg03, #128 wz
25654     7C 00 90 AD |  if_e	jmp	#LR__3860
25658     10 4E 05 F1 | 	add	fp, #16
2565c     A7 16 02 FB | 	rdlong	arg03, fp
25660     01 16 06 F1 | 	add	arg03, #1
25664     0B 13 C2 FA | 	rdbyte	arg01, arg03
25668     0C 4E 85 F1 | 	sub	fp, #12
2566c     A7 16 02 FB | 	rdlong	arg03, fp
25670     0B 15 02 F6 | 	mov	arg02, arg03
25674     28 14 06 F1 | 	add	arg02, #40
25678     04 4E 85 F1 | 	sub	fp, #4
2567c     1C 16 06 F1 | 	add	arg03, #28
25680     0B 17 02 FB | 	rdlong	arg03, arg03
25684     01 18 06 F6 | 	mov	arg04, #1
25688     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2568c     00 FA 0D F2 | 	cmp	result1, #0 wz
25690     1C 00 90 AD |  if_e	jmp	#LR__3859
25694     04 4E 05 F1 | 	add	fp, #4
25698     A7 16 02 FB | 	rdlong	arg03, fp
2569c     04 4E 85 F1 | 	sub	fp, #4
256a0     11 16 06 F1 | 	add	arg03, #17
256a4     0B 03 48 FC | 	wrbyte	#1, arg03
256a8     01 FA 05 F6 | 	mov	result1, #1
256ac     A0 00 90 FD | 	jmp	#LR__3863
256b0                 | LR__3859
256b0     04 4E 05 F1 | 	add	fp, #4
256b4     A7 18 02 FB | 	rdlong	arg04, fp
256b8     0C 17 02 F6 | 	mov	arg03, arg04
256bc     04 4E 85 F1 | 	sub	fp, #4
256c0     10 18 06 F1 | 	add	arg04, #16
256c4     0C 19 C2 FA | 	rdbyte	arg04, arg04
256c8     7F 18 06 F5 | 	and	arg04, #127
256cc     10 16 06 F1 | 	add	arg03, #16
256d0     0B 19 42 FC | 	wrbyte	arg04, arg03
256d4                 | LR__3860
256d4     10 4E 05 F1 | 	add	fp, #16
256d8     A7 16 02 FB | 	rdlong	arg03, fp
256dc     01 16 06 F1 | 	add	arg03, #1
256e0     0B 13 C2 FA | 	rdbyte	arg01, arg03
256e4     0C 4E 85 F1 | 	sub	fp, #12
256e8     A7 14 02 FB | 	rdlong	arg02, fp
256ec     28 14 06 F1 | 	add	arg02, #40
256f0     18 4E 05 F1 | 	add	fp, #24
256f4     A7 16 02 FB | 	rdlong	arg03, fp
256f8     1C 4E 85 F1 | 	sub	fp, #28
256fc     01 18 06 F6 | 	mov	arg04, #1
25700     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
25704     00 FA 0D F2 | 	cmp	result1, #0 wz
25708     1C 00 90 AD |  if_e	jmp	#LR__3861
2570c     04 4E 05 F1 | 	add	fp, #4
25710     A7 16 02 FB | 	rdlong	arg03, fp
25714     04 4E 85 F1 | 	sub	fp, #4
25718     11 16 06 F1 | 	add	arg03, #17
2571c     0B 03 48 FC | 	wrbyte	#1, arg03
25720     01 FA 05 F6 | 	mov	result1, #1
25724     28 00 90 FD | 	jmp	#LR__3863
25728                 | LR__3861
25728     04 4E 05 F1 | 	add	fp, #4
2572c     A7 18 02 FB | 	rdlong	arg04, fp
25730     18 4E 05 F1 | 	add	fp, #24
25734     A7 16 02 FB | 	rdlong	arg03, fp
25738     1C 4E 85 F1 | 	sub	fp, #28
2573c     1C 18 06 F1 | 	add	arg04, #28
25740     0C 17 62 FC | 	wrlong	arg03, arg04
25744                 | LR__3862
25744                 | ' 
25744                 | ' 			fp->sect = nsect;
25744                 | ' 		}
25744                 | ' 	}
25744                 | ' 
25744                 | ' 	return res ;
25744     0C 4E 05 F1 | 	add	fp, #12
25748     A7 FA 01 FB | 	rdlong	result1, fp
2574c     0C 4E 85 F1 | 	sub	fp, #12
25750                 | LR__3863
25750     A7 F0 03 F6 | 	mov	ptra, fp
25754     B2 00 A0 FD | 	call	#popregs_
25758                 | _fatfs_cc_f_lseek_ret
25758     2D 00 64 FD | 	ret
2575c                 | 
2575c                 | _fatfs_cc_f_opendir
2575c     01 4A 05 F6 | 	mov	COUNT_, #1
25760     A8 00 A0 FD | 	call	#pushregs_
25764     14 F0 07 F1 | 	add	ptra, #20
25768     04 4E 05 F1 | 	add	fp, #4
2576c     A7 12 62 FC | 	wrlong	arg01, fp
25770     04 4E 05 F1 | 	add	fp, #4
25774     A7 14 62 FC | 	wrlong	arg02, fp
25778     04 4E 85 F1 | 	sub	fp, #4
2577c     A7 16 0A FB | 	rdlong	arg03, fp wz
25780     04 4E 85 F1 | 	sub	fp, #4
25784     09 FA 05 A6 |  if_e	mov	result1, #9
25788     78 01 90 AD |  if_e	jmp	#LR__3876
2578c     08 4E 05 F1 | 	add	fp, #8
25790     A7 12 02 F6 | 	mov	arg01, fp
25794     08 4E 05 F1 | 	add	fp, #8
25798     A7 14 02 F6 | 	mov	arg02, fp
2579c     10 4E 85 F1 | 	sub	fp, #16
257a0     00 16 06 F6 | 	mov	arg03, #0
257a4     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
257a8     0C 4E 05 F1 | 	add	fp, #12
257ac     A7 FA 61 FC | 	wrlong	result1, fp
257b0     0C 4E 85 F1 | 	sub	fp, #12
257b4     00 FA 0D F2 | 	cmp	result1, #0 wz
257b8     20 01 90 5D |  if_ne	jmp	#LR__3875
257bc     04 4E 05 F1 | 	add	fp, #4
257c0     A7 16 02 FB | 	rdlong	arg03, fp
257c4     0C 4E 05 F1 | 	add	fp, #12
257c8     A7 FA 01 FB | 	rdlong	result1, fp
257cc     0B FB 61 FC | 	wrlong	result1, arg03
257d0     0C 4E 85 F1 | 	sub	fp, #12
257d4     A7 12 02 FB | 	rdlong	arg01, fp
257d8     04 4E 05 F1 | 	add	fp, #4
257dc     A7 14 02 FB | 	rdlong	arg02, fp
257e0     08 4E 85 F1 | 	sub	fp, #8
257e4     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
257e8     0C 4E 05 F1 | 	add	fp, #12
257ec     A7 FA 61 FC | 	wrlong	result1, fp
257f0     0C 4E 85 F1 | 	sub	fp, #12
257f4     00 FA 0D F2 | 	cmp	result1, #0 wz
257f8     C4 00 90 5D |  if_ne	jmp	#LR__3874
257fc     04 4E 05 F1 | 	add	fp, #4
25800     A7 16 02 FB | 	rdlong	arg03, fp
25804     04 4E 85 F1 | 	sub	fp, #4
25808     2B 16 06 F1 | 	add	arg03, #43
2580c     0B 17 C2 FA | 	rdbyte	arg03, arg03
25810     80 16 CE F7 | 	test	arg03, #128 wz
25814     58 00 90 5D |  if_ne	jmp	#LR__3872
25818     04 4E 05 F1 | 	add	fp, #4
2581c     A7 16 02 FB | 	rdlong	arg03, fp
25820     04 4E 85 F1 | 	sub	fp, #4
25824     06 16 06 F1 | 	add	arg03, #6
25828     0B 17 C2 FA | 	rdbyte	arg03, arg03
2582c     10 16 CE F7 | 	test	arg03, #16 wz
25830     30 00 90 AD |  if_e	jmp	#LR__3870
25834     04 4E 05 F1 | 	add	fp, #4
25838     A7 16 02 FB | 	rdlong	arg03, fp
2583c     0B 1F 02 F6 | 	mov	local01, arg03
25840     0C 4E 05 F1 | 	add	fp, #12
25844     A7 12 02 FB | 	rdlong	arg01, fp
25848     10 4E 85 F1 | 	sub	fp, #16
2584c     1C 16 06 F1 | 	add	arg03, #28
25850     0B 15 02 FB | 	rdlong	arg02, arg03
25854     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
25858     08 1E 06 F1 | 	add	local01, #8
2585c     0F FB 61 FC | 	wrlong	result1, local01
25860     0C 00 90 FD | 	jmp	#LR__3871
25864                 | LR__3870
25864     0C 4E 05 F1 | 	add	fp, #12
25868     A7 0A 68 FC | 	wrlong	#5, fp
2586c     0C 4E 85 F1 | 	sub	fp, #12
25870                 | LR__3871
25870                 | LR__3872
25870     0C 4E 05 F1 | 	add	fp, #12
25874     A7 1E 0A FB | 	rdlong	local01, fp wz
25878     0C 4E 85 F1 | 	sub	fp, #12
2587c     40 00 90 5D |  if_ne	jmp	#LR__3873
25880     04 4E 05 F1 | 	add	fp, #4
25884     A7 1E 02 FB | 	rdlong	local01, fp
25888     0C 4E 05 F1 | 	add	fp, #12
2588c     A7 16 02 FB | 	rdlong	arg03, fp
25890     06 16 06 F1 | 	add	arg03, #6
25894     0B 17 E2 FA | 	rdword	arg03, arg03
25898     04 1E 06 F1 | 	add	local01, #4
2589c     0F 17 52 FC | 	wrword	arg03, local01
258a0     0C 4E 85 F1 | 	sub	fp, #12
258a4     A7 12 02 FB | 	rdlong	arg01, fp
258a8     04 4E 85 F1 | 	sub	fp, #4
258ac     00 14 06 F6 | 	mov	arg02, #0
258b0     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
258b4     0C 4E 05 F1 | 	add	fp, #12
258b8     A7 FA 61 FC | 	wrlong	result1, fp
258bc     0C 4E 85 F1 | 	sub	fp, #12
258c0                 | LR__3873
258c0                 | LR__3874
258c0     0C 4E 05 F1 | 	add	fp, #12
258c4     A7 1E 02 FB | 	rdlong	local01, fp
258c8     0C 4E 85 F1 | 	sub	fp, #12
258cc     04 1E 0E F2 | 	cmp	local01, #4 wz
258d0     0C 4E 05 A1 |  if_e	add	fp, #12
258d4     A7 0A 68 AC |  if_e	wrlong	#5, fp
258d8     0C 4E 85 A1 |  if_e	sub	fp, #12
258dc                 | LR__3875
258dc     0C 4E 05 F1 | 	add	fp, #12
258e0     A7 1E 0A FB | 	rdlong	local01, fp wz
258e4     0C 4E 85 F1 | 	sub	fp, #12
258e8     04 4E 05 51 |  if_ne	add	fp, #4
258ec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
258f0     04 4E 85 51 |  if_ne	sub	fp, #4
258f4     0F 01 68 5C |  if_ne	wrlong	#0, local01
258f8                 | ' 
258f8                 | ' 	return res ;
258f8     0C 4E 05 F1 | 	add	fp, #12
258fc     A7 FA 01 FB | 	rdlong	result1, fp
25900     0C 4E 85 F1 | 	sub	fp, #12
25904                 | LR__3876
25904     A7 F0 03 F6 | 	mov	ptra, fp
25908     B2 00 A0 FD | 	call	#popregs_
2590c                 | _fatfs_cc_f_opendir_ret
2590c     2D 00 64 FD | 	ret
25910                 | 
25910                 | _fatfs_cc_f_closedir
25910     00 4A 05 F6 | 	mov	COUNT_, #0
25914     A8 00 A0 FD | 	call	#pushregs_
25918     10 F0 07 F1 | 	add	ptra, #16
2591c     04 4E 05 F1 | 	add	fp, #4
25920     A7 12 62 FC | 	wrlong	arg01, fp
25924     08 4E 05 F1 | 	add	fp, #8
25928     A7 14 02 F6 | 	mov	arg02, fp
2592c     0C 4E 85 F1 | 	sub	fp, #12
25930     C0 DD BF FD | 	call	#_fatfs_cc_validate
25934     08 4E 05 F1 | 	add	fp, #8
25938     A7 FA 61 FC | 	wrlong	result1, fp
2593c     08 4E 85 F1 | 	sub	fp, #8
25940     00 FA 0D F2 | 	cmp	result1, #0 wz
25944     04 4E 05 A1 |  if_e	add	fp, #4
25948     A7 FA 01 AB |  if_e	rdlong	result1, fp
2594c     04 4E 85 A1 |  if_e	sub	fp, #4
25950     FD 00 68 AC |  if_e	wrlong	#0, result1
25954                 | ' 
25954                 | ' 
25954                 | ' 
25954                 | ' 
25954                 | ' 		dp->obj.fs = 0;
25954                 | ' #line 4633 "ff.c"
25954                 | ' 	}
25954                 | ' 	return res;
25954     08 4E 05 F1 | 	add	fp, #8
25958     A7 FA 01 FB | 	rdlong	result1, fp
2595c     08 4E 85 F1 | 	sub	fp, #8
25960     A7 F0 03 F6 | 	mov	ptra, fp
25964     B2 00 A0 FD | 	call	#popregs_
25968                 | _fatfs_cc_f_closedir_ret
25968     2D 00 64 FD | 	ret
2596c                 | 
2596c                 | _fatfs_cc_f_readdir
2596c     00 4A 05 F6 | 	mov	COUNT_, #0
25970     A8 00 A0 FD | 	call	#pushregs_
25974     14 F0 07 F1 | 	add	ptra, #20
25978     04 4E 05 F1 | 	add	fp, #4
2597c     A7 12 62 FC | 	wrlong	arg01, fp
25980     04 4E 05 F1 | 	add	fp, #4
25984     A7 14 62 FC | 	wrlong	arg02, fp
25988     04 4E 85 F1 | 	sub	fp, #4
2598c     A7 12 02 FB | 	rdlong	arg01, fp
25990     0C 4E 05 F1 | 	add	fp, #12
25994     A7 14 02 F6 | 	mov	arg02, fp
25998     10 4E 85 F1 | 	sub	fp, #16
2599c     54 DD BF FD | 	call	#_fatfs_cc_validate
259a0     0C 4E 05 F1 | 	add	fp, #12
259a4     A7 FA 61 FC | 	wrlong	result1, fp
259a8     0C 4E 85 F1 | 	sub	fp, #12
259ac     00 FA 0D F2 | 	cmp	result1, #0 wz
259b0     BC 00 90 5D |  if_ne	jmp	#LR__3883
259b4     08 4E 05 F1 | 	add	fp, #8
259b8     A7 FA 09 FB | 	rdlong	result1, fp wz
259bc     08 4E 85 F1 | 	sub	fp, #8
259c0     24 00 90 5D |  if_ne	jmp	#LR__3880
259c4     04 4E 05 F1 | 	add	fp, #4
259c8     A7 12 02 FB | 	rdlong	arg01, fp
259cc     04 4E 85 F1 | 	sub	fp, #4
259d0     00 14 06 F6 | 	mov	arg02, #0
259d4     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
259d8     0C 4E 05 F1 | 	add	fp, #12
259dc     A7 FA 61 FC | 	wrlong	result1, fp
259e0     0C 4E 85 F1 | 	sub	fp, #12
259e4     88 00 90 FD | 	jmp	#LR__3882
259e8                 | LR__3880
259e8     04 4E 05 F1 | 	add	fp, #4
259ec     A7 12 02 FB | 	rdlong	arg01, fp
259f0     04 4E 85 F1 | 	sub	fp, #4
259f4     00 14 06 F6 | 	mov	arg02, #0
259f8     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
259fc     0C 4E 05 F1 | 	add	fp, #12
25a00     A7 FA 61 FC | 	wrlong	result1, fp
25a04     0C 4E 85 F1 | 	sub	fp, #12
25a08     04 FA 0D F2 | 	cmp	result1, #4 wz
25a0c     0C 4E 05 A1 |  if_e	add	fp, #12
25a10     A7 00 68 AC |  if_e	wrlong	#0, fp
25a14     0C 4E 85 A1 |  if_e	sub	fp, #12
25a18     0C 4E 05 F1 | 	add	fp, #12
25a1c     A7 FA 09 FB | 	rdlong	result1, fp wz
25a20     0C 4E 85 F1 | 	sub	fp, #12
25a24     48 00 90 5D |  if_ne	jmp	#LR__3881
25a28     04 4E 05 F1 | 	add	fp, #4
25a2c     A7 12 02 FB | 	rdlong	arg01, fp
25a30     04 4E 05 F1 | 	add	fp, #4
25a34     A7 14 02 FB | 	rdlong	arg02, fp
25a38     08 4E 85 F1 | 	sub	fp, #8
25a3c     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
25a40     04 4E 05 F1 | 	add	fp, #4
25a44     A7 12 02 FB | 	rdlong	arg01, fp
25a48     04 4E 85 F1 | 	sub	fp, #4
25a4c     00 14 06 F6 | 	mov	arg02, #0
25a50     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
25a54     0C 4E 05 F1 | 	add	fp, #12
25a58     A7 FA 61 FC | 	wrlong	result1, fp
25a5c     0C 4E 85 F1 | 	sub	fp, #12
25a60     04 FA 0D F2 | 	cmp	result1, #4 wz
25a64     0C 4E 05 A1 |  if_e	add	fp, #12
25a68     A7 00 68 AC |  if_e	wrlong	#0, fp
25a6c     0C 4E 85 A1 |  if_e	sub	fp, #12
25a70                 | LR__3881
25a70                 | LR__3882
25a70                 | LR__3883
25a70                 | ' 			}
25a70                 | ' 			;
25a70                 | ' 		}
25a70                 | ' 	}
25a70                 | ' 	return res ;
25a70     0C 4E 05 F1 | 	add	fp, #12
25a74     A7 FA 01 FB | 	rdlong	result1, fp
25a78     0C 4E 85 F1 | 	sub	fp, #12
25a7c     A7 F0 03 F6 | 	mov	ptra, fp
25a80     B2 00 A0 FD | 	call	#popregs_
25a84                 | _fatfs_cc_f_readdir_ret
25a84     2D 00 64 FD | 	ret
25a88                 | 
25a88                 | _fatfs_cc_f_stat
25a88     00 4A 05 F6 | 	mov	COUNT_, #0
25a8c     A8 00 A0 FD | 	call	#pushregs_
25a90     40 F0 07 F1 | 	add	ptra, #64
25a94     04 4E 05 F1 | 	add	fp, #4
25a98     A7 12 62 FC | 	wrlong	arg01, fp
25a9c     04 4E 05 F1 | 	add	fp, #4
25aa0     A7 14 62 FC | 	wrlong	arg02, fp
25aa4     04 4E 85 F1 | 	sub	fp, #4
25aa8     A7 12 02 F6 | 	mov	arg01, fp
25aac     0C 4E 05 F1 | 	add	fp, #12
25ab0     A7 14 02 F6 | 	mov	arg02, fp
25ab4     10 4E 85 F1 | 	sub	fp, #16
25ab8     00 16 06 F6 | 	mov	arg03, #0
25abc     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
25ac0     0C 4E 05 F1 | 	add	fp, #12
25ac4     A7 FA 61 FC | 	wrlong	result1, fp
25ac8     0C 4E 85 F1 | 	sub	fp, #12
25acc     00 FA 0D F2 | 	cmp	result1, #0 wz
25ad0     74 00 90 5D |  if_ne	jmp	#LR__3893
25ad4     10 4E 05 F1 | 	add	fp, #16
25ad8     A7 12 02 F6 | 	mov	arg01, fp
25adc     0C 4E 85 F1 | 	sub	fp, #12
25ae0     A7 14 02 FB | 	rdlong	arg02, fp
25ae4     04 4E 85 F1 | 	sub	fp, #4
25ae8     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
25aec     0C 4E 05 F1 | 	add	fp, #12
25af0     A7 FA 61 FC | 	wrlong	result1, fp
25af4     0C 4E 85 F1 | 	sub	fp, #12
25af8     00 FA 0D F2 | 	cmp	result1, #0 wz
25afc     48 00 90 5D |  if_ne	jmp	#LR__3892
25b00     3B 4E 05 F1 | 	add	fp, #59
25b04     A7 FA C1 FA | 	rdbyte	result1, fp
25b08     3B 4E 85 F1 | 	sub	fp, #59
25b0c     80 FA CD F7 | 	test	result1, #128 wz
25b10     0C 4E 05 51 |  if_ne	add	fp, #12
25b14     A7 0C 68 5C |  if_ne	wrlong	#6, fp
25b18     0C 4E 85 51 |  if_ne	sub	fp, #12
25b1c     28 00 90 5D |  if_ne	jmp	#LR__3891
25b20     08 4E 05 F1 | 	add	fp, #8
25b24     A7 FA 09 FB | 	rdlong	result1, fp wz
25b28     08 4E 85 F1 | 	sub	fp, #8
25b2c     18 00 90 AD |  if_e	jmp	#LR__3890
25b30     10 4E 05 F1 | 	add	fp, #16
25b34     A7 12 02 F6 | 	mov	arg01, fp
25b38     08 4E 85 F1 | 	sub	fp, #8
25b3c     A7 14 02 FB | 	rdlong	arg02, fp
25b40     08 4E 85 F1 | 	sub	fp, #8
25b44     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
25b48                 | LR__3890
25b48                 | LR__3891
25b48                 | LR__3892
25b48                 | LR__3893
25b48                 | ' 			}
25b48                 | ' 		}
25b48                 | ' 		;
25b48                 | ' 	}
25b48                 | ' 
25b48                 | ' 	return res ;
25b48     0C 4E 05 F1 | 	add	fp, #12
25b4c     A7 FA 01 FB | 	rdlong	result1, fp
25b50     0C 4E 85 F1 | 	sub	fp, #12
25b54     A7 F0 03 F6 | 	mov	ptra, fp
25b58     B2 00 A0 FD | 	call	#popregs_
25b5c                 | _fatfs_cc_f_stat_ret
25b5c     2D 00 64 FD | 	ret
25b60                 | 
25b60                 | _fatfs_cc_f_unlink
25b60     00 4A 05 F6 | 	mov	COUNT_, #0
25b64     A8 00 A0 FD | 	call	#pushregs_
25b68     74 F0 07 F1 | 	add	ptra, #116
25b6c     04 4E 05 F1 | 	add	fp, #4
25b70     A7 12 62 FC | 	wrlong	arg01, fp
25b74     68 4E 05 F1 | 	add	fp, #104
25b78     A7 00 68 FC | 	wrlong	#0, fp
25b7c     68 4E 85 F1 | 	sub	fp, #104
25b80     A7 12 02 F6 | 	mov	arg01, fp
25b84     6C 4E 05 F1 | 	add	fp, #108
25b88     A7 14 02 F6 | 	mov	arg02, fp
25b8c     70 4E 85 F1 | 	sub	fp, #112
25b90     02 16 06 F6 | 	mov	arg03, #2
25b94     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
25b98     08 4E 05 F1 | 	add	fp, #8
25b9c     A7 FA 61 FC | 	wrlong	result1, fp
25ba0     08 4E 85 F1 | 	sub	fp, #8
25ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
25ba8     E4 01 90 5D |  if_ne	jmp	#LR__3908
25bac     70 4E 05 F1 | 	add	fp, #112
25bb0     A7 16 02 FB | 	rdlong	arg03, fp
25bb4     64 4E 85 F1 | 	sub	fp, #100
25bb8     A7 16 62 FC | 	wrlong	arg03, fp
25bbc     A7 12 02 F6 | 	mov	arg01, fp
25bc0     08 4E 85 F1 | 	sub	fp, #8
25bc4     A7 14 02 FB | 	rdlong	arg02, fp
25bc8     04 4E 85 F1 | 	sub	fp, #4
25bcc     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
25bd0     08 4E 05 F1 | 	add	fp, #8
25bd4     A7 FA 61 FC | 	wrlong	result1, fp
25bd8     00 FA 4D F2 | 	cmps	result1, #0 wz
25bdc     08 4E 85 F1 | 	sub	fp, #8
25be0     AC 01 90 5D |  if_ne	jmp	#LR__3907
25be4     37 4E 05 F1 | 	add	fp, #55
25be8     A7 FA C1 FA | 	rdbyte	result1, fp
25bec     37 4E 85 F1 | 	sub	fp, #55
25bf0     80 FA CD F7 | 	test	result1, #128 wz
25bf4     08 4E 05 51 |  if_ne	add	fp, #8
25bf8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
25bfc     08 4E 85 51 |  if_ne	sub	fp, #8
25c00     1C 00 90 5D |  if_ne	jmp	#LR__3900
25c04     12 4E 05 F1 | 	add	fp, #18
25c08     A7 FA C1 FA | 	rdbyte	result1, fp
25c0c     12 4E 85 F1 | 	sub	fp, #18
25c10     01 FA CD F7 | 	test	result1, #1 wz
25c14     08 4E 05 51 |  if_ne	add	fp, #8
25c18     A7 0E 68 5C |  if_ne	wrlong	#7, fp
25c1c     08 4E 85 51 |  if_ne	sub	fp, #8
25c20                 | LR__3900
25c20     08 4E 05 F1 | 	add	fp, #8
25c24     A7 FA 09 FB | 	rdlong	result1, fp wz
25c28     08 4E 85 F1 | 	sub	fp, #8
25c2c     C8 00 90 5D |  if_ne	jmp	#LR__3903
25c30     70 4E 05 F1 | 	add	fp, #112
25c34     A7 12 02 FB | 	rdlong	arg01, fp
25c38     48 4E 85 F1 | 	sub	fp, #72
25c3c     A7 14 02 FB | 	rdlong	arg02, fp
25c40     28 4E 85 F1 | 	sub	fp, #40
25c44     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
25c48     6C 4E 05 F1 | 	add	fp, #108
25c4c     A7 FA 61 FC | 	wrlong	result1, fp
25c50     5A 4E 85 F1 | 	sub	fp, #90
25c54     A7 FA C1 FA | 	rdbyte	result1, fp
25c58     12 4E 85 F1 | 	sub	fp, #18
25c5c     10 FA CD F7 | 	test	result1, #16 wz
25c60     94 00 90 AD |  if_e	jmp	#LR__3902
25c64     70 4E 05 F1 | 	add	fp, #112
25c68     A7 FA 01 FB | 	rdlong	result1, fp
25c6c     34 4E 85 F1 | 	sub	fp, #52
25c70     A7 FA 61 FC | 	wrlong	result1, fp
25c74     30 4E 05 F1 | 	add	fp, #48
25c78     A7 16 02 FB | 	rdlong	arg03, fp
25c7c     28 4E 85 F1 | 	sub	fp, #40
25c80     A7 16 62 FC | 	wrlong	arg03, fp
25c84     08 4E 85 F1 | 	sub	fp, #8
25c88     A7 12 02 F6 | 	mov	arg01, fp
25c8c     3C 4E 85 F1 | 	sub	fp, #60
25c90     00 14 06 F6 | 	mov	arg02, #0
25c94     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
25c98     08 4E 05 F1 | 	add	fp, #8
25c9c     A7 FA 61 FC | 	wrlong	result1, fp
25ca0     08 4E 85 F1 | 	sub	fp, #8
25ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
25ca8     4C 00 90 5D |  if_ne	jmp	#LR__3901
25cac     3C 4E 05 F1 | 	add	fp, #60
25cb0     A7 12 02 F6 | 	mov	arg01, fp
25cb4     3C 4E 85 F1 | 	sub	fp, #60
25cb8     00 14 06 F6 | 	mov	arg02, #0
25cbc     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
25cc0     08 4E 05 F1 | 	add	fp, #8
25cc4     A7 FA 61 FC | 	wrlong	result1, fp
25cc8     00 FA 4D F2 | 	cmps	result1, #0 wz
25ccc     08 4E 85 F1 | 	sub	fp, #8
25cd0     08 4E 05 A1 |  if_e	add	fp, #8
25cd4     A7 0E 68 AC |  if_e	wrlong	#7, fp
25cd8     08 4E 85 A1 |  if_e	sub	fp, #8
25cdc     08 4E 05 F1 | 	add	fp, #8
25ce0     A7 FA 01 FB | 	rdlong	result1, fp
25ce4     08 4E 85 F1 | 	sub	fp, #8
25ce8     04 FA 0D F2 | 	cmp	result1, #4 wz
25cec     08 4E 05 A1 |  if_e	add	fp, #8
25cf0     A7 00 68 AC |  if_e	wrlong	#0, fp
25cf4     08 4E 85 A1 |  if_e	sub	fp, #8
25cf8                 | LR__3901
25cf8                 | LR__3902
25cf8                 | LR__3903
25cf8     08 4E 05 F1 | 	add	fp, #8
25cfc     A7 FA 09 FB | 	rdlong	result1, fp wz
25d00     08 4E 85 F1 | 	sub	fp, #8
25d04     88 00 90 5D |  if_ne	jmp	#LR__3906
25d08     0C 4E 05 F1 | 	add	fp, #12
25d0c     A7 12 02 F6 | 	mov	arg01, fp
25d10     0C 4E 85 F1 | 	sub	fp, #12
25d14     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
25d18     08 4E 05 F1 | 	add	fp, #8
25d1c     A7 FA 61 FC | 	wrlong	result1, fp
25d20     08 4E 85 F1 | 	sub	fp, #8
25d24     00 FA 0D F2 | 	cmp	result1, #0 wz
25d28     38 00 90 5D |  if_ne	jmp	#LR__3904
25d2c     6C 4E 05 F1 | 	add	fp, #108
25d30     A7 FA 09 FB | 	rdlong	result1, fp wz
25d34     6C 4E 85 F1 | 	sub	fp, #108
25d38     28 00 90 AD |  if_e	jmp	#LR__3904
25d3c     0C 4E 05 F1 | 	add	fp, #12
25d40     A7 12 02 F6 | 	mov	arg01, fp
25d44     60 4E 05 F1 | 	add	fp, #96
25d48     A7 14 02 FB | 	rdlong	arg02, fp
25d4c     6C 4E 85 F1 | 	sub	fp, #108
25d50     00 16 06 F6 | 	mov	arg03, #0
25d54     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
25d58     08 4E 05 F1 | 	add	fp, #8
25d5c     A7 FA 61 FC | 	wrlong	result1, fp
25d60     08 4E 85 F1 | 	sub	fp, #8
25d64                 | LR__3904
25d64     08 4E 05 F1 | 	add	fp, #8
25d68     A7 FA 09 FB | 	rdlong	result1, fp wz
25d6c     08 4E 85 F1 | 	sub	fp, #8
25d70     1C 00 90 5D |  if_ne	jmp	#LR__3905
25d74     70 4E 05 F1 | 	add	fp, #112
25d78     A7 12 02 FB | 	rdlong	arg01, fp
25d7c     70 4E 85 F1 | 	sub	fp, #112
25d80     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
25d84     08 4E 05 F1 | 	add	fp, #8
25d88     A7 FA 61 FC | 	wrlong	result1, fp
25d8c     08 4E 85 F1 | 	sub	fp, #8
25d90                 | LR__3905
25d90                 | LR__3906
25d90                 | LR__3907
25d90                 | LR__3908
25d90                 | ' 			}
25d90                 | ' 		}
25d90                 | ' 		;
25d90                 | ' 	}
25d90                 | ' 
25d90                 | ' 	return res ;
25d90     08 4E 05 F1 | 	add	fp, #8
25d94     A7 FA 01 FB | 	rdlong	result1, fp
25d98     08 4E 85 F1 | 	sub	fp, #8
25d9c     A7 F0 03 F6 | 	mov	ptra, fp
25da0     B2 00 A0 FD | 	call	#popregs_
25da4                 | _fatfs_cc_f_unlink_ret
25da4     2D 00 64 FD | 	ret
25da8                 | 
25da8                 | _fatfs_cc_f_mkdir
25da8     00 4A 05 F6 | 	mov	COUNT_, #0
25dac     A8 00 A0 FD | 	call	#pushregs_
25db0     5C F0 07 F1 | 	add	ptra, #92
25db4     04 4E 05 F1 | 	add	fp, #4
25db8     A7 12 62 FC | 	wrlong	arg01, fp
25dbc     A7 12 02 F6 | 	mov	arg01, fp
25dc0     48 4E 05 F1 | 	add	fp, #72
25dc4     A7 14 02 F6 | 	mov	arg02, fp
25dc8     4C 4E 85 F1 | 	sub	fp, #76
25dcc     02 16 06 F6 | 	mov	arg03, #2
25dd0     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
25dd4     08 4E 05 F1 | 	add	fp, #8
25dd8     A7 FA 61 FC | 	wrlong	result1, fp
25ddc     08 4E 85 F1 | 	sub	fp, #8
25de0     00 FA 0D F2 | 	cmp	result1, #0 wz
25de4     C4 02 90 5D |  if_ne	jmp	#LR__3915
25de8     4C 4E 05 F1 | 	add	fp, #76
25dec     A7 16 02 FB | 	rdlong	arg03, fp
25df0     40 4E 85 F1 | 	sub	fp, #64
25df4     A7 16 62 FC | 	wrlong	arg03, fp
25df8     A7 12 02 F6 | 	mov	arg01, fp
25dfc     08 4E 85 F1 | 	sub	fp, #8
25e00     A7 14 02 FB | 	rdlong	arg02, fp
25e04     04 4E 85 F1 | 	sub	fp, #4
25e08     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
25e0c     08 4E 05 F1 | 	add	fp, #8
25e10     A7 FA 61 FC | 	wrlong	result1, fp
25e14     00 FA 4D F2 | 	cmps	result1, #0 wz
25e18     08 4E 85 F1 | 	sub	fp, #8
25e1c     08 4E 05 A1 |  if_e	add	fp, #8
25e20     A7 10 68 AC |  if_e	wrlong	#8, fp
25e24     08 4E 85 A1 |  if_e	sub	fp, #8
25e28     08 4E 05 F1 | 	add	fp, #8
25e2c     A7 FA 01 FB | 	rdlong	result1, fp
25e30     08 4E 85 F1 | 	sub	fp, #8
25e34     04 FA 0D F2 | 	cmp	result1, #4 wz
25e38     70 02 90 5D |  if_ne	jmp	#LR__3914
25e3c     4C 4E 05 F1 | 	add	fp, #76
25e40     A7 16 02 FB | 	rdlong	arg03, fp
25e44     10 4E 85 F1 | 	sub	fp, #16
25e48     A7 16 62 FC | 	wrlong	arg03, fp
25e4c     A7 12 02 F6 | 	mov	arg01, fp
25e50     3C 4E 85 F1 | 	sub	fp, #60
25e54     00 14 06 F6 | 	mov	arg02, #0
25e58     04 AC BF FD | 	call	#_fatfs_cc_create_chain
25e5c     50 4E 05 F1 | 	add	fp, #80
25e60     A7 FA 61 FC | 	wrlong	result1, fp
25e64     48 4E 85 F1 | 	sub	fp, #72
25e68     A7 00 68 FC | 	wrlong	#0, fp
25e6c     48 4E 05 F1 | 	add	fp, #72
25e70     A7 FA 09 FB | 	rdlong	result1, fp wz
25e74     50 4E 85 F1 | 	sub	fp, #80
25e78     08 4E 05 A1 |  if_e	add	fp, #8
25e7c     A7 0E 68 AC |  if_e	wrlong	#7, fp
25e80     08 4E 85 A1 |  if_e	sub	fp, #8
25e84     50 4E 05 F1 | 	add	fp, #80
25e88     A7 FA 01 FB | 	rdlong	result1, fp
25e8c     50 4E 85 F1 | 	sub	fp, #80
25e90     01 FA 0D F2 | 	cmp	result1, #1 wz
25e94     08 4E 05 A1 |  if_e	add	fp, #8
25e98     A7 04 68 AC |  if_e	wrlong	#2, fp
25e9c     08 4E 85 A1 |  if_e	sub	fp, #8
25ea0     50 4E 05 F1 | 	add	fp, #80
25ea4     A7 16 02 FB | 	rdlong	arg03, fp
25ea8     50 4E 85 F1 | 	sub	fp, #80
25eac     FF FF 7F FF 
25eb0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
25eb4     08 4E 05 A1 |  if_e	add	fp, #8
25eb8     A7 02 68 AC |  if_e	wrlong	#1, fp
25ebc     08 4E 85 A1 |  if_e	sub	fp, #8
25ec0     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
25ec4     58 4E 05 F1 | 	add	fp, #88
25ec8     A7 FA 61 FC | 	wrlong	result1, fp
25ecc     50 4E 85 F1 | 	sub	fp, #80
25ed0     A7 FA 09 FB | 	rdlong	result1, fp wz
25ed4     08 4E 85 F1 | 	sub	fp, #8
25ed8     1C 01 90 5D |  if_ne	jmp	#LR__3911
25edc     4C 4E 05 F1 | 	add	fp, #76
25ee0     A7 12 02 FB | 	rdlong	arg01, fp
25ee4     04 4E 05 F1 | 	add	fp, #4
25ee8     A7 14 02 FB | 	rdlong	arg02, fp
25eec     50 4E 85 F1 | 	sub	fp, #80
25ef0     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
25ef4     08 4E 05 F1 | 	add	fp, #8
25ef8     A7 FA 61 FC | 	wrlong	result1, fp
25efc     00 FA 4D F2 | 	cmps	result1, #0 wz
25f00     08 4E 85 F1 | 	sub	fp, #8
25f04     F0 00 90 5D |  if_ne	jmp	#LR__3910
25f08     4C 4E 05 F1 | 	add	fp, #76
25f0c     A7 12 02 FB | 	rdlong	arg01, fp
25f10     4C 4E 85 F1 | 	sub	fp, #76
25f14     34 12 06 F1 | 	add	arg01, #52
25f18     20 14 06 F6 | 	mov	arg02, #32
25f1c     0B 16 06 F6 | 	mov	arg03, #11
25f20     98 00 A0 FD | 	call	#\builtin_bytefill_
25f24     4C 4E 05 F1 | 	add	fp, #76
25f28     A7 FA 01 FB | 	rdlong	result1, fp
25f2c     34 FA 05 F1 | 	add	result1, #52
25f30     FD 5C 48 FC | 	wrbyte	#46, result1
25f34     A7 16 02 FB | 	rdlong	arg03, fp
25f38     3F 16 06 F1 | 	add	arg03, #63
25f3c     0B 21 48 FC | 	wrbyte	#16, arg03
25f40     A7 12 02 FB | 	rdlong	arg01, fp
25f44     4A 12 06 F1 | 	add	arg01, #74
25f48     0C 4E 05 F1 | 	add	fp, #12
25f4c     A7 14 02 FB | 	rdlong	arg02, fp
25f50     09 15 62 FC | 	wrlong	arg02, arg01
25f54     0C 4E 85 F1 | 	sub	fp, #12
25f58     A7 14 02 FB | 	rdlong	arg02, fp
25f5c     0A 13 02 F6 | 	mov	arg01, arg02
25f60     34 14 06 F1 | 	add	arg02, #52
25f64     04 4E 05 F1 | 	add	fp, #4
25f68     A7 16 02 FB | 	rdlong	arg03, fp
25f6c     50 4E 85 F1 | 	sub	fp, #80
25f70     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
25f74     4C 4E 05 F1 | 	add	fp, #76
25f78     A7 14 02 FB | 	rdlong	arg02, fp
25f7c     0A 13 02 F6 | 	mov	arg01, arg02
25f80     54 12 06 F1 | 	add	arg01, #84
25f84     4C 4E 85 F1 | 	sub	fp, #76
25f88     34 14 06 F1 | 	add	arg02, #52
25f8c     20 16 06 F6 | 	mov	arg03, #32
25f90     64 2D BF FD | 	call	#__system____builtin_memmove
25f94     4C 4E 05 F1 | 	add	fp, #76
25f98     A7 16 02 FB | 	rdlong	arg03, fp
25f9c     55 16 06 F1 | 	add	arg03, #85
25fa0     0B 5D 48 FC | 	wrbyte	#46, arg03
25fa4     38 4E 85 F1 | 	sub	fp, #56
25fa8     A7 16 02 FB | 	rdlong	arg03, fp
25fac     40 4E 05 F1 | 	add	fp, #64
25fb0     A7 16 62 FC | 	wrlong	arg03, fp
25fb4     08 4E 85 F1 | 	sub	fp, #8
25fb8     A7 14 02 FB | 	rdlong	arg02, fp
25fbc     0A 13 02 F6 | 	mov	arg01, arg02
25fc0     54 14 06 F1 | 	add	arg02, #84
25fc4     4C 4E 85 F1 | 	sub	fp, #76
25fc8     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
25fcc     4C 4E 05 F1 | 	add	fp, #76
25fd0     A7 16 02 FB | 	rdlong	arg03, fp
25fd4     03 16 06 F1 | 	add	arg03, #3
25fd8     0B 03 48 FC | 	wrbyte	#1, arg03
25fdc     40 4E 85 F1 | 	sub	fp, #64
25fe0     A7 12 02 F6 | 	mov	arg01, fp
25fe4     0C 4E 85 F1 | 	sub	fp, #12
25fe8     44 BA BF FD | 	call	#_fatfs_cc_dir_register
25fec     08 4E 05 F1 | 	add	fp, #8
25ff0     A7 FA 61 FC | 	wrlong	result1, fp
25ff4     08 4E 85 F1 | 	sub	fp, #8
25ff8                 | LR__3910
25ff8                 | LR__3911
25ff8     08 4E 05 F1 | 	add	fp, #8
25ffc     A7 FA 09 FB | 	rdlong	result1, fp wz
26000     08 4E 85 F1 | 	sub	fp, #8
26004     88 00 90 5D |  if_ne	jmp	#LR__3912
26008     28 4E 05 F1 | 	add	fp, #40
2600c     A7 12 02 FB | 	rdlong	arg01, fp
26010     16 12 06 F1 | 	add	arg01, #22
26014     30 4E 05 F1 | 	add	fp, #48
26018     A7 14 02 FB | 	rdlong	arg02, fp
2601c     09 15 62 FC | 	wrlong	arg02, arg01
26020     0C 4E 85 F1 | 	sub	fp, #12
26024     A7 12 02 FB | 	rdlong	arg01, fp
26028     24 4E 85 F1 | 	sub	fp, #36
2602c     A7 14 02 FB | 	rdlong	arg02, fp
26030     28 4E 05 F1 | 	add	fp, #40
26034     A7 16 02 FB | 	rdlong	arg03, fp
26038     50 4E 85 F1 | 	sub	fp, #80
2603c     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
26040     28 4E 05 F1 | 	add	fp, #40
26044     A7 FA 01 FB | 	rdlong	result1, fp
26048     0B FA 05 F1 | 	add	result1, #11
2604c     FD 20 48 FC | 	wrbyte	#16, result1
26050     24 4E 05 F1 | 	add	fp, #36
26054     A7 FA 01 FB | 	rdlong	result1, fp
26058     03 FA 05 F1 | 	add	result1, #3
2605c     FD 02 48 FC | 	wrbyte	#1, result1
26060     44 4E 85 F1 | 	sub	fp, #68
26064     A7 FA 09 FB | 	rdlong	result1, fp wz
26068     08 4E 85 F1 | 	sub	fp, #8
2606c     3C 00 90 5D |  if_ne	jmp	#LR__3913
26070     4C 4E 05 F1 | 	add	fp, #76
26074     A7 12 02 FB | 	rdlong	arg01, fp
26078     4C 4E 85 F1 | 	sub	fp, #76
2607c     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
26080     08 4E 05 F1 | 	add	fp, #8
26084     A7 FA 61 FC | 	wrlong	result1, fp
26088     08 4E 85 F1 | 	sub	fp, #8
2608c     1C 00 90 FD | 	jmp	#LR__3913
26090                 | LR__3912
26090     3C 4E 05 F1 | 	add	fp, #60
26094     A7 12 02 F6 | 	mov	arg01, fp
26098     14 4E 05 F1 | 	add	fp, #20
2609c     A7 14 02 FB | 	rdlong	arg02, fp
260a0     50 4E 85 F1 | 	sub	fp, #80
260a4     00 16 06 F6 | 	mov	arg03, #0
260a8     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
260ac                 | LR__3913
260ac                 | LR__3914
260ac                 | LR__3915
260ac                 | ' 				remove_chain(&sobj, dcl, 0);
260ac                 | ' 			}
260ac                 | ' 		}
260ac                 | ' 		;
260ac                 | ' 	}
260ac                 | ' 
260ac                 | ' 	return res ;
260ac     08 4E 05 F1 | 	add	fp, #8
260b0     A7 FA 01 FB | 	rdlong	result1, fp
260b4     08 4E 85 F1 | 	sub	fp, #8
260b8     A7 F0 03 F6 | 	mov	ptra, fp
260bc     B2 00 A0 FD | 	call	#popregs_
260c0                 | _fatfs_cc_f_mkdir_ret
260c0     2D 00 64 FD | 	ret
260c4                 | 
260c4                 | _fatfs_cc_f_rename
260c4     01 4A 05 F6 | 	mov	COUNT_, #1
260c8     A8 00 A0 FD | 	call	#pushregs_
260cc     9C F0 07 F1 | 	add	ptra, #156
260d0     04 4E 05 F1 | 	add	fp, #4
260d4     A7 12 62 FC | 	wrlong	arg01, fp
260d8     04 4E 05 F1 | 	add	fp, #4
260dc     A7 14 62 FC | 	wrlong	arg02, fp
260e0     A7 12 02 F6 | 	mov	arg01, fp
260e4     08 4E 85 F1 | 	sub	fp, #8
260e8     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
260ec     04 4E 05 F1 | 	add	fp, #4
260f0     A7 12 02 F6 | 	mov	arg01, fp
260f4     6C 4E 05 F1 | 	add	fp, #108
260f8     A7 14 02 F6 | 	mov	arg02, fp
260fc     70 4E 85 F1 | 	sub	fp, #112
26100     02 16 06 F6 | 	mov	arg03, #2
26104     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
26108     0C 4E 05 F1 | 	add	fp, #12
2610c     A7 FA 61 FC | 	wrlong	result1, fp
26110     0C 4E 85 F1 | 	sub	fp, #12
26114     00 FA 0D F2 | 	cmp	result1, #0 wz
26118     44 03 90 5D |  if_ne	jmp	#LR__3933
2611c     70 4E 05 F1 | 	add	fp, #112
26120     A7 16 02 FB | 	rdlong	arg03, fp
26124     60 4E 85 F1 | 	sub	fp, #96
26128     A7 16 62 FC | 	wrlong	arg03, fp
2612c     A7 12 02 F6 | 	mov	arg01, fp
26130     0C 4E 85 F1 | 	sub	fp, #12
26134     A7 14 02 FB | 	rdlong	arg02, fp
26138     04 4E 85 F1 | 	sub	fp, #4
2613c     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
26140     0C 4E 05 F1 | 	add	fp, #12
26144     A7 FA 61 FC | 	wrlong	result1, fp
26148     00 FA 4D F2 | 	cmps	result1, #0 wz
2614c     0C 4E 85 F1 | 	sub	fp, #12
26150     1C 00 90 5D |  if_ne	jmp	#LR__3920
26154     3B 4E 05 F1 | 	add	fp, #59
26158     A7 FA C1 FA | 	rdbyte	result1, fp
2615c     3B 4E 85 F1 | 	sub	fp, #59
26160     A0 FA CD F7 | 	test	result1, #160 wz
26164     0C 4E 05 51 |  if_ne	add	fp, #12
26168     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2616c     0C 4E 85 51 |  if_ne	sub	fp, #12
26170                 | LR__3920
26170     0C 4E 05 F1 | 	add	fp, #12
26174     A7 1E 0A FB | 	rdlong	local01, fp wz
26178     0C 4E 85 F1 | 	sub	fp, #12
2617c     E0 02 90 5D |  if_ne	jmp	#LR__3932
26180     74 4E 05 F1 | 	add	fp, #116
26184     A7 12 02 F6 | 	mov	arg01, fp
26188     48 4E 85 F1 | 	sub	fp, #72
2618c     A7 14 02 FB | 	rdlong	arg02, fp
26190     2C 4E 85 F1 | 	sub	fp, #44
26194     20 16 06 F6 | 	mov	arg03, #32
26198     5C 2B BF FD | 	call	#__system____builtin_memmove
2619c     40 4E 05 F1 | 	add	fp, #64
261a0     A7 12 02 F6 | 	mov	arg01, fp
261a4     30 4E 85 F1 | 	sub	fp, #48
261a8     A7 14 02 F6 | 	mov	arg02, fp
261ac     10 4E 85 F1 | 	sub	fp, #16
261b0     30 16 06 F6 | 	mov	arg03, #48
261b4     40 2B BF FD | 	call	#__system____builtin_memmove
261b8     40 4E 05 F1 | 	add	fp, #64
261bc     A7 12 02 F6 | 	mov	arg01, fp
261c0     38 4E 85 F1 | 	sub	fp, #56
261c4     A7 14 02 FB | 	rdlong	arg02, fp
261c8     08 4E 85 F1 | 	sub	fp, #8
261cc     34 CA BF FD | 	call	#_fatfs_cc_follow_path
261d0     0C 4E 05 F1 | 	add	fp, #12
261d4     A7 FA 61 FC | 	wrlong	result1, fp
261d8     0C 4E 85 F1 | 	sub	fp, #12
261dc     00 FA 0D F2 | 	cmp	result1, #0 wz
261e0     4C 00 90 5D |  if_ne	jmp	#LR__3923
261e4     48 4E 05 F1 | 	add	fp, #72
261e8     A7 FA 01 FB | 	rdlong	result1, fp
261ec     30 4E 85 F1 | 	sub	fp, #48
261f0     A7 16 02 FB | 	rdlong	arg03, fp
261f4     18 4E 85 F1 | 	sub	fp, #24
261f8     0B FB 09 F2 | 	cmp	result1, arg03 wz
261fc     20 00 90 5D |  if_ne	jmp	#LR__3921
26200     50 4E 05 F1 | 	add	fp, #80
26204     A7 FA 01 FB | 	rdlong	result1, fp
26208     30 4E 85 F1 | 	sub	fp, #48
2620c     A7 16 02 FB | 	rdlong	arg03, fp
26210     20 4E 85 F1 | 	sub	fp, #32
26214     0B FB 09 F2 | 	cmp	result1, arg03 wz
26218     04 1E 06 A6 |  if_e	mov	local01, #4
2621c     04 00 90 AD |  if_e	jmp	#LR__3922
26220                 | LR__3921
26220     08 1E 06 F6 | 	mov	local01, #8
26224                 | LR__3922
26224     0C 4E 05 F1 | 	add	fp, #12
26228     A7 1E 62 FC | 	wrlong	local01, fp
2622c     0C 4E 85 F1 | 	sub	fp, #12
26230                 | LR__3923
26230     0C 4E 05 F1 | 	add	fp, #12
26234     A7 1E 02 FB | 	rdlong	local01, fp
26238     0C 4E 85 F1 | 	sub	fp, #12
2623c     04 1E 0E F2 | 	cmp	local01, #4 wz
26240     CC 01 90 5D |  if_ne	jmp	#LR__3929
26244     40 4E 05 F1 | 	add	fp, #64
26248     A7 12 02 F6 | 	mov	arg01, fp
2624c     40 4E 85 F1 | 	sub	fp, #64
26250     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
26254     0C 4E 05 F1 | 	add	fp, #12
26258     A7 FA 61 FC | 	wrlong	result1, fp
2625c     0C 4E 85 F1 | 	sub	fp, #12
26260     00 FA 0D F2 | 	cmp	result1, #0 wz
26264     A8 01 90 5D |  if_ne	jmp	#LR__3928
26268     5C 4E 05 F1 | 	add	fp, #92
2626c     A7 12 02 FB | 	rdlong	arg01, fp
26270     38 4E 05 F1 | 	add	fp, #56
26274     A7 12 62 FC | 	wrlong	arg01, fp
26278     0D 12 06 F1 | 	add	arg01, #13
2627c     20 4E 85 F1 | 	sub	fp, #32
26280     A7 14 02 F6 | 	mov	arg02, fp
26284     74 4E 85 F1 | 	sub	fp, #116
26288     0D 14 06 F1 | 	add	arg02, #13
2628c     13 16 06 F6 | 	mov	arg03, #19
26290     64 2A BF FD | 	call	#__system____builtin_memmove
26294     94 4E 05 F1 | 	add	fp, #148
26298     A7 1E 02 FB | 	rdlong	local01, fp
2629c     15 4E 85 F1 | 	sub	fp, #21
262a0     A7 FA C1 FA | 	rdbyte	result1, fp
262a4     0B 1E 06 F1 | 	add	local01, #11
262a8     0F FB 41 FC | 	wrbyte	result1, local01
262ac     15 4E 05 F1 | 	add	fp, #21
262b0     A7 1E 02 FB | 	rdlong	local01, fp
262b4     94 4E 85 F1 | 	sub	fp, #148
262b8     0B 1E 06 F1 | 	add	local01, #11
262bc     0F 1F C2 FA | 	rdbyte	local01, local01
262c0     10 1E CE F7 | 	test	local01, #16 wz
262c4     24 00 90 5D |  if_ne	jmp	#LR__3924
262c8     94 4E 05 F1 | 	add	fp, #148
262cc     A7 FA 01 FB | 	rdlong	result1, fp
262d0     FD 1E 02 F6 | 	mov	local01, result1
262d4     94 4E 85 F1 | 	sub	fp, #148
262d8     0B FA 05 F1 | 	add	result1, #11
262dc     FD FA C1 FA | 	rdbyte	result1, result1
262e0     20 FA 45 F5 | 	or	result1, #32
262e4     0B 1E 06 F1 | 	add	local01, #11
262e8     0F FB 41 FC | 	wrbyte	result1, local01
262ec                 | LR__3924
262ec     70 4E 05 F1 | 	add	fp, #112
262f0     A7 1E 02 FB | 	rdlong	local01, fp
262f4     03 1E 06 F1 | 	add	local01, #3
262f8     0F 03 48 FC | 	wrbyte	#1, local01
262fc     24 4E 05 F1 | 	add	fp, #36
26300     A7 1E 02 FB | 	rdlong	local01, fp
26304     94 4E 85 F1 | 	sub	fp, #148
26308     0B 1E 06 F1 | 	add	local01, #11
2630c     0F 1F C2 FA | 	rdbyte	local01, local01
26310     10 1E CE F7 | 	test	local01, #16 wz
26314     F8 00 90 AD |  if_e	jmp	#LR__3927
26318     18 4E 05 F1 | 	add	fp, #24
2631c     A7 16 02 FB | 	rdlong	arg03, fp
26320     30 4E 05 F1 | 	add	fp, #48
26324     A7 1E 02 FB | 	rdlong	local01, fp
26328     48 4E 85 F1 | 	sub	fp, #72
2632c     0F 17 0A F2 | 	cmp	arg03, local01 wz
26330     DC 00 90 AD |  if_e	jmp	#LR__3927
26334     70 4E 05 F1 | 	add	fp, #112
26338     A7 12 02 FB | 	rdlong	arg01, fp
2633c     09 1F 02 F6 | 	mov	local01, arg01
26340     24 4E 05 F1 | 	add	fp, #36
26344     A7 14 02 FB | 	rdlong	arg02, fp
26348     94 4E 85 F1 | 	sub	fp, #148
2634c     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
26350     FD 14 02 F6 | 	mov	arg02, result1
26354     0F 13 02 F6 | 	mov	arg01, local01
26358     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2635c     98 4E 05 F1 | 	add	fp, #152
26360     A7 FA 61 FC | 	wrlong	result1, fp
26364     00 FA 4D F2 | 	cmps	result1, #0 wz
26368     98 4E 85 F1 | 	sub	fp, #152
2636c     0C 4E 05 A1 |  if_e	add	fp, #12
26370     A7 04 68 AC |  if_e	wrlong	#2, fp
26374     0C 4E 85 A1 |  if_e	sub	fp, #12
26378     94 00 90 AD |  if_e	jmp	#LR__3926
2637c     70 4E 05 F1 | 	add	fp, #112
26380     A7 12 02 FB | 	rdlong	arg01, fp
26384     28 4E 05 F1 | 	add	fp, #40
26388     A7 14 02 FB | 	rdlong	arg02, fp
2638c     98 4E 85 F1 | 	sub	fp, #152
26390     4C A0 BF FD | 	call	#_fatfs_cc_move_window
26394     0C 4E 05 F1 | 	add	fp, #12
26398     A7 FA 61 FC | 	wrlong	result1, fp
2639c     64 4E 05 F1 | 	add	fp, #100
263a0     A7 1E 02 FB | 	rdlong	local01, fp
263a4     54 1E 06 F1 | 	add	local01, #84
263a8     24 4E 05 F1 | 	add	fp, #36
263ac     A7 1E 62 FC | 	wrlong	local01, fp
263b0     88 4E 85 F1 | 	sub	fp, #136
263b4     A7 1E 0A FB | 	rdlong	local01, fp wz
263b8     0C 4E 85 F1 | 	sub	fp, #12
263bc     50 00 90 5D |  if_ne	jmp	#LR__3925
263c0     94 4E 05 F1 | 	add	fp, #148
263c4     A7 1E 02 FB | 	rdlong	local01, fp
263c8     94 4E 85 F1 | 	sub	fp, #148
263cc     01 1E 06 F1 | 	add	local01, #1
263d0     0F 1F C2 FA | 	rdbyte	local01, local01
263d4     2E 1E 0E F2 | 	cmp	local01, #46 wz
263d8     34 00 90 5D |  if_ne	jmp	#LR__3925
263dc     70 4E 05 F1 | 	add	fp, #112
263e0     A7 12 02 FB | 	rdlong	arg01, fp
263e4     24 4E 05 F1 | 	add	fp, #36
263e8     A7 14 02 FB | 	rdlong	arg02, fp
263ec     4C 4E 85 F1 | 	sub	fp, #76
263f0     A7 16 02 FB | 	rdlong	arg03, fp
263f4     48 4E 85 F1 | 	sub	fp, #72
263f8     50 AD BF FD | 	call	#_fatfs_cc_st_clust
263fc     70 4E 05 F1 | 	add	fp, #112
26400     A7 1E 02 FB | 	rdlong	local01, fp
26404     70 4E 85 F1 | 	sub	fp, #112
26408     03 1E 06 F1 | 	add	local01, #3
2640c     0F 03 48 FC | 	wrbyte	#1, local01
26410                 | LR__3925
26410                 | LR__3926
26410                 | LR__3927
26410                 | LR__3928
26410                 | LR__3929
26410     0C 4E 05 F1 | 	add	fp, #12
26414     A7 1E 0A FB | 	rdlong	local01, fp wz
26418     0C 4E 85 F1 | 	sub	fp, #12
2641c     40 00 90 5D |  if_ne	jmp	#LR__3931
26420     10 4E 05 F1 | 	add	fp, #16
26424     A7 12 02 F6 | 	mov	arg01, fp
26428     10 4E 85 F1 | 	sub	fp, #16
2642c     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
26430     0C 4E 05 F1 | 	add	fp, #12
26434     A7 FA 61 FC | 	wrlong	result1, fp
26438     0C 4E 85 F1 | 	sub	fp, #12
2643c     00 FA 0D F2 | 	cmp	result1, #0 wz
26440     1C 00 90 5D |  if_ne	jmp	#LR__3930
26444     70 4E 05 F1 | 	add	fp, #112
26448     A7 12 02 FB | 	rdlong	arg01, fp
2644c     70 4E 85 F1 | 	sub	fp, #112
26450     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
26454     0C 4E 05 F1 | 	add	fp, #12
26458     A7 FA 61 FC | 	wrlong	result1, fp
2645c     0C 4E 85 F1 | 	sub	fp, #12
26460                 | LR__3930
26460                 | LR__3931
26460                 | LR__3932
26460                 | LR__3933
26460                 | ' 					res = sync_fs(fs);
26460                 | ' 				}
26460                 | ' 			}
26460                 | ' 
26460                 | ' 		}
26460                 | ' 		;
26460                 | ' 	}
26460                 | ' 
26460                 | ' 	return res ;
26460     0C 4E 05 F1 | 	add	fp, #12
26464     A7 FA 01 FB | 	rdlong	result1, fp
26468     0C 4E 85 F1 | 	sub	fp, #12
2646c     A7 F0 03 F6 | 	mov	ptra, fp
26470     B2 00 A0 FD | 	call	#popregs_
26474                 | _fatfs_cc_f_rename_ret
26474     2D 00 64 FD | 	ret
26478                 | 
26478                 | _fatfs_cc_time
26478     00 4A 05 F6 | 	mov	COUNT_, #0
2647c     A8 00 A0 FD | 	call	#pushregs_
26480     14 F0 07 F1 | 	add	ptra, #20
26484     04 4E 05 F1 | 	add	fp, #4
26488     A7 12 62 FC | 	wrlong	arg01, fp
2648c     04 4E 05 F1 | 	add	fp, #4
26490     A7 12 02 F6 | 	mov	arg01, fp
26494     08 4E 85 F1 | 	sub	fp, #8
26498     00 14 06 F6 | 	mov	arg02, #0
2649c     FC 17 B0 FD | 	call	#_fatfs_cc_gettimeofday
264a0     08 4E 05 F1 | 	add	fp, #8
264a4     A7 FA 01 FB | 	rdlong	result1, fp
264a8     08 4E 05 F1 | 	add	fp, #8
264ac     A7 FA 61 FC | 	wrlong	result1, fp
264b0     0C 4E 85 F1 | 	sub	fp, #12
264b4     A7 FA 09 FB | 	rdlong	result1, fp wz
264b8     04 4E 85 F1 | 	sub	fp, #4
264bc     18 00 90 AD |  if_e	jmp	#LR__3940
264c0     04 4E 05 F1 | 	add	fp, #4
264c4     A7 FA 01 FB | 	rdlong	result1, fp
264c8     0C 4E 05 F1 | 	add	fp, #12
264cc     A7 14 02 FB | 	rdlong	arg02, fp
264d0     10 4E 85 F1 | 	sub	fp, #16
264d4     FD 14 62 FC | 	wrlong	arg02, result1
264d8                 | LR__3940
264d8                 | '         *tp = now;
264d8                 | '     return now;
264d8     10 4E 05 F1 | 	add	fp, #16
264dc     A7 FA 01 FB | 	rdlong	result1, fp
264e0     10 4E 85 F1 | 	sub	fp, #16
264e4     A7 F0 03 F6 | 	mov	ptra, fp
264e8     B2 00 A0 FD | 	call	#popregs_
264ec                 | _fatfs_cc_time_ret
264ec     2D 00 64 FD | 	ret
264f0                 | 
264f0                 | _fatfs_cc_mktime
264f0     06 4A 05 F6 | 	mov	COUNT_, #6
264f4     A8 00 A0 FD | 	call	#pushregs_
264f8     09 1F 02 F6 | 	mov	local01, arg01
264fc     14 1E 06 F1 | 	add	local01, #20
26500     0F 13 02 FB | 	rdlong	arg01, local01
26504     14 1E 86 F1 | 	sub	local01, #20
26508     46 12 56 F2 | 	cmps	arg01, #70 wc
2650c                 | '                 return (time_t) -1;
2650c     01 FA 65 C6 |  if_b	neg	result1, #1
26510     7C 01 90 CD |  if_b	jmp	#LR__3954
26514     03 00 00 FF 
26518     6C 21 06 F6 | 	mov	local02, ##1900
2651c     14 1E 06 F1 | 	add	local01, #20
26520     0F FB 01 FB | 	rdlong	result1, local01
26524     FD 20 02 F1 | 	add	local02, result1
26528     08 1E 86 F1 | 	sub	local01, #8
2652c     0F 23 02 FB | 	rdlong	local03, local01
26530     01 22 86 F1 | 	sub	local03, #1
26534     04 1E 06 F1 | 	add	local01, #4
26538     0F 13 02 FB | 	rdlong	arg01, local01
2653c     10 1E 86 F1 | 	sub	local01, #16
26540     02 12 66 F0 | 	shl	arg01, #2
26544     02 00 00 FF 
26548     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2654c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
26550     09 FB 01 FB | 	rdlong	result1, arg01
26554     FD 22 02 F1 | 	add	local03, result1
26558     10 13 02 F6 | 	mov	arg01, local02
2655c     02 00 00 FF 
26560     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
26564     DC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
26568     00 FA 0D F2 | 	cmp	result1, #0 wz
2656c     1C 00 90 AD |  if_e	jmp	#LR__3950
26570     00 24 06 F6 | 	mov	local04, #0
26574     10 1E 06 F1 | 	add	local01, #16
26578     0F FB 01 FB | 	rdlong	result1, local01
2657c     10 1E 86 F1 | 	sub	local01, #16
26580     02 FA 55 F2 | 	cmps	result1, #2 wc
26584     01 24 06 36 |  if_ae	mov	local04, #1
26588     04 00 90 FD | 	jmp	#LR__3951
2658c                 | LR__3950
2658c     00 24 06 F6 | 	mov	local04, #0
26590                 | LR__3951
26590     04 1E 06 F1 | 	add	local01, #4
26594     0F FB 01 FB | 	rdlong	result1, local01
26598     04 1E 86 F1 | 	sub	local01, #4
2659c     0F 27 02 FB | 	rdlong	local05, local01
265a0     08 1E 06 F1 | 	add	local01, #8
265a4     0F 13 02 FB | 	rdlong	arg01, local01
265a8     07 00 00 FF 
265ac     10 12 06 FD | 	qmul	arg01, ##3600
265b0     12 23 02 F1 | 	add	local03, local04
265b4     FD 24 02 F6 | 	mov	local04, result1
265b8     04 24 66 F0 | 	shl	local04, #4
265bc     FD 24 82 F1 | 	sub	local04, result1
265c0     02 24 66 F0 | 	shl	local04, #2
265c4     12 27 02 F1 | 	add	local05, local04
265c8     08 1E 86 F1 | 	sub	local01, #8
265cc     18 24 62 FD | 	getqx	local04
265d0     A8 00 00 FF 
265d4     80 23 06 FD | 	qmul	local03, ##86400
265d8     12 27 02 F1 | 	add	local05, local04
265dc     10 23 02 F6 | 	mov	local03, local02
265e0     03 00 00 FF 
265e4     B2 23 86 F1 | 	sub	local03, ##1970
265e8     18 24 62 FD | 	getqx	local04
265ec     99 F0 00 FF 
265f0     80 23 06 FD | 	qmul	local03, ##31536000
265f4     12 27 02 F1 | 	add	local05, local04
265f8     10 23 02 F6 | 	mov	local03, local02
265fc     03 00 00 FF 
26600     B1 23 86 F1 | 	sub	local03, ##1969
26604     11 29 52 F6 | 	abs	local06, local03 wc
26608     02 28 46 F0 | 	shr	local06, #2
2660c     14 29 82 F6 | 	negc	local06, local06
26610     03 00 00 FF 
26614     D1 21 56 F2 | 	cmps	local02, ##2001 wc
26618     18 24 62 FD | 	getqx	local04
2661c     12 27 02 F1 | 	add	local05, local04
26620     18 00 90 CD |  if_b	jmp	#LR__3952
26624     03 00 00 FF 
26628     D0 21 86 F1 | 	sub	local02, ##2000
2662c     10 25 52 F6 | 	abs	local04, local02 wc
26630     64 24 16 FD | 	qdiv	local04, #100
26634     18 24 62 FD | 	getqx	local04
26638     12 29 A2 F3 | 	sumnc	local06, local04
2663c                 | LR__3952
2663c     A8 00 00 FF 
26640     80 29 06 FD | 	qmul	local06, ##86400
26644     18 28 62 FD | 	getqx	local06
26648     14 27 02 F1 | 	add	local05, local06
2664c     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
26650     02 00 00 FF 
26654     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
26658     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2665c     14 27 02 F1 | 	add	local05, local06
26660     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
26664     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
26668     02 00 00 FF 
2666c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
26670     01 22 0E F2 | 	cmp	local03, #1 wz
26674     14 00 90 5D |  if_ne	jmp	#LR__3953
26678     0F 13 02 F6 | 	mov	arg01, local01
2667c     C8 19 B0 FD | 	call	#_fatfs_cc___indst
26680     00 FA 0D F2 | 	cmp	result1, #0 wz
26684     07 00 00 5F 
26688     10 26 86 51 |  if_ne	sub	local05, ##3600
2668c                 | LR__3953
2668c                 | '                 s -=  (3600L) ;
2668c                 | ' 
2668c                 | '         return s;
2668c     13 FB 01 F6 | 	mov	result1, local05
26690                 | LR__3954
26690     A7 F0 03 F6 | 	mov	ptra, fp
26694     B2 00 A0 FD | 	call	#popregs_
26698                 | _fatfs_cc_mktime_ret
26698     2D 00 64 FD | 	ret
2669c                 | 
2669c                 | _fatfs_cc__gmtime_r
2669c     03 4A 05 F6 | 	mov	COUNT_, #3
266a0     A8 00 A0 FD | 	call	#pushregs_
266a4     09 1F 02 FB | 	rdlong	local01, arg01
266a8     A8 00 00 FF 
266ac     80 1F 16 FD | 	qdiv	local01, ##86400
266b0     18 FA 61 FD | 	getqx	result1
266b4     04 FA 05 F1 | 	add	result1, #4
266b8     07 FA 15 FD | 	qdiv	result1, #7
266bc     18 14 06 F1 | 	add	arg02, #24
266c0     D1 7F 27 FF 
266c4     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
266c8     D1 7F 27 3F 
266cc     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
266d0     03 00 00 3F 
266d4     DC 21 06 36 |  if_ae	mov	local02, ##2012
266d8     03 00 00 CF 
266dc     B2 21 06 C6 |  if_b	mov	local02, ##1970
266e0                 | ' 	  year = 1970;
266e0                 | ' 	}
266e0                 | ' 
266e0                 | ' 	for(;;) {
266e0     19 FA 61 FD | 	getqy	result1
266e4     0A FB 61 FC | 	wrlong	result1, arg02
266e8     18 14 86 F1 | 	sub	arg02, #24
266ec                 | LR__3960
266ec     10 13 02 F6 | 	mov	arg01, local02
266f0     50 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
266f4     00 FA 0D F2 | 	cmp	result1, #0 wz
266f8     42 F1 00 5F 
266fc     00 23 06 56 |  if_ne	mov	local03, ##31622400
26700     99 F0 00 AF 
26704     80 23 06 A6 |  if_e	mov	local03, ##31536000
26708     11 1F 12 F2 | 	cmp	local01, local03 wc
2670c                 | ' 	    break;
2670c     01 20 06 31 |  if_ae	add	local02, #1
26710     11 1F 82 31 |  if_ae	sub	local01, local03
26714     D4 FF 9F 3D |  if_ae	jmp	#LR__3960
26718     A8 00 00 FF 
2671c     80 1F 16 FD | 	qdiv	local01, ##86400
26720     10 23 02 F6 | 	mov	local03, local02
26724     03 00 00 FF 
26728     6C 23 86 F1 | 	sub	local03, ##1900
2672c     14 14 06 F1 | 	add	arg02, #20
26730     0A 23 62 FC | 	wrlong	local03, arg02
26734     08 14 06 F1 | 	add	arg02, #8
26738     10 13 02 F6 | 	mov	arg01, local02
2673c     18 20 62 FD | 	getqx	local02
26740     0A 21 62 FC | 	wrlong	local02, arg02
26744     1C 14 86 F1 | 	sub	arg02, #28
26748     F8 15 B0 FD | 	call	#_fatfs_cc__is_leap_year
2674c     00 FA 0D F2 | 	cmp	result1, #0 wz
26750     1D 22 06 56 |  if_ne	mov	local03, #29
26754     1C 22 06 A6 |  if_e	mov	local03, #28
26758     02 00 00 FF 
2675c     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
26760     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
26764     02 00 00 FF 
26768     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2676c                 | ' 
2676c                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2676c                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2676c     00 12 06 F6 | 	mov	arg01, #0
26770     97 2A 48 FB | 	callpa	#(@LR__3962-@LR__3961)>>2,fcache_load_ptr_
26774                 | LR__3961
26774     09 23 02 F6 | 	mov	local03, arg01
26778     02 22 66 F0 | 	shl	local03, #2
2677c     02 00 00 FF 
26780     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
26784     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
26788     11 23 02 FB | 	rdlong	local03, local03
2678c     11 21 52 F2 | 	cmps	local02, local03 wc
26790     02 00 00 FF 
26794     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
26798     2C 00 90 CD |  if_b	jmp	#LR__3963
2679c     09 23 02 F6 | 	mov	local03, arg01
267a0     02 22 66 F0 | 	shl	local03, #2
267a4     02 00 00 FF 
267a8     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
267ac     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
267b0     11 23 02 FB | 	rdlong	local03, local03
267b4     11 21 82 F1 | 	sub	local02, local03
267b8     01 12 06 F1 | 	add	arg01, #1
267bc     02 00 00 FF 
267c0     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
267c4     AC FF 9F FD | 	jmp	#LR__3961
267c8                 | LR__3962
267c8                 | LR__3963
267c8     A8 00 00 FF 
267cc     80 1F 16 FD | 	qdiv	local01, ##86400
267d0     10 14 06 F1 | 	add	arg02, #16
267d4     0A 13 62 FC | 	wrlong	arg01, arg02
267d8     01 20 06 F1 | 	add	local02, #1
267dc     04 14 86 F1 | 	sub	arg02, #4
267e0     0A 21 62 FC | 	wrlong	local02, arg02
267e4     19 1E 62 FD | 	getqy	local01
267e8     07 00 00 FF 
267ec     10 1E 16 FD | 	qdiv	local01, ##3600
267f0     18 22 62 FD | 	getqx	local03
267f4     07 00 00 FF 
267f8     10 1E 16 FD | 	qdiv	local01, ##3600
267fc     04 14 86 F1 | 	sub	arg02, #4
26800     0A 23 62 FC | 	wrlong	local03, arg02
26804     19 1E 62 FD | 	getqy	local01
26808     3C 1E 16 FD | 	qdiv	local01, #60
2680c     18 22 62 FD | 	getqx	local03
26810     3C 1E 16 FD | 	qdiv	local01, #60
26814     04 14 86 F1 | 	sub	arg02, #4
26818     0A 23 62 FC | 	wrlong	local03, arg02
2681c     04 14 86 F1 | 	sub	arg02, #4
26820                 | '         stm->tm_isdst = 0;
26820                 | ' 
26820                 | ' ;
26820                 | '         return stm;
26820     0A FB 01 F6 | 	mov	result1, arg02
26824     19 22 62 FD | 	getqy	local03
26828     0A 23 62 FC | 	wrlong	local03, arg02
2682c     20 14 06 F1 | 	add	arg02, #32
26830     0A 01 68 FC | 	wrlong	#0, arg02
26834     A7 F0 03 F6 | 	mov	ptra, fp
26838     B2 00 A0 FD | 	call	#popregs_
2683c                 | _fatfs_cc__gmtime_r_ret
2683c     2D 00 64 FD | 	ret
26840                 | 
26840                 | _fatfs_cc__tzset
26840     41 01 00 FF 
26844     71 13 06 F6 | 	mov	arg01, ##@LR__4275
26848     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2684c     FD 12 02 F6 | 	mov	arg01, result1
26850     02 00 00 FF 
26854     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
26858     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2685c     02 00 00 FF 
26860     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
26864     2C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
26868     02 00 00 FF 
2686c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
26870     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
26874     02 00 00 FF 
26878     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2687c                 | _fatfs_cc__tzset_ret
2687c     2D 00 64 FD | 	ret
26880                 | 
26880                 | _fatfs_cc_getenv
26880     06 4A 05 F6 | 	mov	COUNT_, #6
26884     A8 00 A0 FD | 	call	#pushregs_
26888     09 1F 02 F6 | 	mov	local01, arg01
2688c     09 21 02 F6 | 	mov	local02, arg01
26890     97 06 48 FB | 	callpa	#(@LR__3971-@LR__3970)>>2,fcache_load_ptr_
26894                 | LR__3970
26894     10 FB C9 FA | 	rdbyte	result1, local02 wz
26898     01 20 06 51 |  if_ne	add	local02, #1
2689c     F4 FF 9F 5D |  if_ne	jmp	#LR__3970
268a0                 | LR__3971
268a0     09 21 82 F1 | 	sub	local02, arg01
268a4     10 FB 01 F6 | 	mov	result1, local02
268a8     02 00 00 FF 
268ac     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
268b0     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
268b4     02 00 00 FF 
268b8     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
268bc                 | '             return 0;
268bc     00 FA 05 A6 |  if_e	mov	result1, #0
268c0     5C 00 90 AD |  if_e	jmp	#LR__3974
268c4                 | ' 
268c4                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
268c4     02 00 00 FF 
268c8     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
268cc     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
268d0     02 00 00 FF 
268d4     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
268d8                 | LR__3972
268d8     11 25 0A FB | 	rdlong	local04, local03 wz
268dc     3C 00 90 AD |  if_e	jmp	#LR__3973
268e0     12 13 02 F6 | 	mov	arg01, local04
268e4     0F 15 02 F6 | 	mov	arg02, local01
268e8     10 17 02 F6 | 	mov	arg03, local02
268ec     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
268f0     00 FA 0D F2 | 	cmp	result1, #0 wz
268f4     10 27 02 A6 |  if_e	mov	local05, local02
268f8     12 27 02 A1 |  if_e	add	local05, local04
268fc     13 29 C2 AA |  if_e	rdbyte	local06, local05
26900     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
26904                 | ' 			return name+len+1;
26904     10 25 02 A1 |  if_e	add	local04, local02
26908     01 24 06 A1 |  if_e	add	local04, #1
2690c     12 FB 01 A6 |  if_e	mov	result1, local04
26910     0C 00 90 AD |  if_e	jmp	#LR__3974
26914     04 22 06 F1 | 	add	local03, #4
26918     BC FF 9F FD | 	jmp	#LR__3972
2691c                 | LR__3973
2691c                 | ' 	}
2691c                 | ' 	return 0;
2691c     00 FA 05 F6 | 	mov	result1, #0
26920                 | LR__3974
26920     A7 F0 03 F6 | 	mov	ptra, fp
26924     B2 00 A0 FD | 	call	#popregs_
26928                 | _fatfs_cc_getenv_ret
26928     2D 00 64 FD | 	ret
2692c                 | 
2692c                 | _fatfs_cc__get_fattime
2692c     00 4A 05 F6 | 	mov	COUNT_, #0
26930     A8 00 A0 FD | 	call	#pushregs_
26934     34 F0 07 F1 | 	add	ptra, #52
26938     00 12 06 F6 | 	mov	arg01, #0
2693c     38 FB BF FD | 	call	#_fatfs_cc_time
26940     04 4E 05 F1 | 	add	fp, #4
26944     A7 FA 61 FC | 	wrlong	result1, fp
26948     A7 12 02 F6 | 	mov	arg01, fp
2694c     0C 4E 05 F1 | 	add	fp, #12
26950     A7 14 02 F6 | 	mov	arg02, fp
26954     10 4E 85 F1 | 	sub	fp, #16
26958     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2695c     24 4E 05 F1 | 	add	fp, #36
26960     A7 14 02 FB | 	rdlong	arg02, fp
26964     50 14 86 F1 | 	sub	arg02, #80
26968     09 14 66 F0 | 	shl	arg02, #9
2696c     04 4E 85 F1 | 	sub	fp, #4
26970     A7 FA 01 FB | 	rdlong	result1, fp
26974     01 FA 05 F1 | 	add	result1, #1
26978     05 FA 65 F0 | 	shl	result1, #5
2697c     FD 14 42 F5 | 	or	arg02, result1
26980     04 4E 85 F1 | 	sub	fp, #4
26984     A7 FA 01 FB | 	rdlong	result1, fp
26988     FD 14 42 F5 | 	or	arg02, result1
2698c     14 4E 85 F1 | 	sub	fp, #20
26990     A7 14 62 FC | 	wrlong	arg02, fp
26994     10 4E 05 F1 | 	add	fp, #16
26998     A7 14 02 FB | 	rdlong	arg02, fp
2699c     0B 14 66 F0 | 	shl	arg02, #11
269a0     04 4E 85 F1 | 	sub	fp, #4
269a4     A7 FA 01 FB | 	rdlong	result1, fp
269a8     05 FA 65 F0 | 	shl	result1, #5
269ac     FD 14 42 F5 | 	or	arg02, result1
269b0     04 4E 85 F1 | 	sub	fp, #4
269b4     A7 FA 01 FB | 	rdlong	result1, fp
269b8     FD 14 42 F5 | 	or	arg02, result1
269bc     04 4E 85 F1 | 	sub	fp, #4
269c0     A7 14 62 FC | 	wrlong	arg02, fp
269c4                 | ' 
269c4                 | '     now = time(0);
269c4                 | '     _gmtime_r (&now, &date);
269c4                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
269c4                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
269c4                 | '     return (ffdate << 16) | fftime;
269c4     04 4E 85 F1 | 	sub	fp, #4
269c8     A7 FA 01 FB | 	rdlong	result1, fp
269cc     10 FA 65 F0 | 	shl	result1, #16
269d0     08 4E 85 F1 | 	sub	fp, #8
269d4     0A FB 41 F5 | 	or	result1, arg02
269d8     A7 F0 03 F6 | 	mov	ptra, fp
269dc     B2 00 A0 FD | 	call	#popregs_
269e0                 | _fatfs_cc__get_fattime_ret
269e0     2D 00 64 FD | 	ret
269e4                 | 
269e4                 | _fatfs_cc_unixtime_0843
269e4     00 4A 05 F6 | 	mov	COUNT_, #0
269e8     A8 00 A0 FD | 	call	#pushregs_
269ec     34 F0 07 F1 | 	add	ptra, #52
269f0     04 4E 05 F1 | 	add	fp, #4
269f4     A7 12 62 FC | 	wrlong	arg01, fp
269f8     04 4E 05 F1 | 	add	fp, #4
269fc     A7 14 62 FC | 	wrlong	arg02, fp
26a00     04 4E 85 F1 | 	sub	fp, #4
26a04     A7 14 02 FB | 	rdlong	arg02, fp
26a08     09 14 46 F0 | 	shr	arg02, #9
26a0c     7F 14 06 F5 | 	and	arg02, #127
26a10     50 FA 05 F6 | 	mov	result1, #80
26a14     0A FB 01 F1 | 	add	result1, arg02
26a18     20 4E 05 F1 | 	add	fp, #32
26a1c     A7 FA 61 FC | 	wrlong	result1, fp
26a20     20 4E 85 F1 | 	sub	fp, #32
26a24     A7 FA 01 FB | 	rdlong	result1, fp
26a28     05 FA 45 F0 | 	shr	result1, #5
26a2c     FD FA 41 F8 | 	getnib	result1, result1, #0
26a30     01 FA 85 F1 | 	sub	result1, #1
26a34     1C 4E 05 F1 | 	add	fp, #28
26a38     A7 FA 61 FC | 	wrlong	result1, fp
26a3c     1C 4E 85 F1 | 	sub	fp, #28
26a40     A7 FA 01 FB | 	rdlong	result1, fp
26a44     1F FA 05 F5 | 	and	result1, #31
26a48     18 4E 05 F1 | 	add	fp, #24
26a4c     A7 FA 61 FC | 	wrlong	result1, fp
26a50     14 4E 85 F1 | 	sub	fp, #20
26a54     A7 FA 01 FB | 	rdlong	result1, fp
26a58     0B FA 45 F0 | 	shr	result1, #11
26a5c     1F FA 05 F5 | 	and	result1, #31
26a60     10 4E 05 F1 | 	add	fp, #16
26a64     A7 FA 61 FC | 	wrlong	result1, fp
26a68     10 4E 85 F1 | 	sub	fp, #16
26a6c     A7 FA 01 FB | 	rdlong	result1, fp
26a70     05 FA 45 F0 | 	shr	result1, #5
26a74     3F FA 05 F5 | 	and	result1, #63
26a78     0C 4E 05 F1 | 	add	fp, #12
26a7c     A7 FA 61 FC | 	wrlong	result1, fp
26a80     0C 4E 85 F1 | 	sub	fp, #12
26a84     A7 14 02 FB | 	rdlong	arg02, fp
26a88     1F 14 06 F5 | 	and	arg02, #31
26a8c     01 14 66 F0 | 	shl	arg02, #1
26a90     08 4E 05 F1 | 	add	fp, #8
26a94     A7 14 62 FC | 	wrlong	arg02, fp
26a98     A7 12 02 F6 | 	mov	arg01, fp
26a9c     10 4E 85 F1 | 	sub	fp, #16
26aa0     4C FA BF FD | 	call	#_fatfs_cc_mktime
26aa4     0C 4E 05 F1 | 	add	fp, #12
26aa8     A7 FA 61 FC | 	wrlong	result1, fp
26aac                 | ' 
26aac                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
26aac                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
26aac                 | '     date.tm_mday = (dosdate & 0x1f);
26aac                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
26aac                 | '     date.tm_min = (dostime >> 5) & 0x3f;
26aac                 | '     date.tm_sec = (dostime & 0x1f) << 1;
26aac                 | ' 
26aac                 | '     t = mktime(&date);
26aac                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26aac                 | '     return t;
26aac     0C 4E 85 F1 | 	sub	fp, #12
26ab0     A7 F0 03 F6 | 	mov	ptra, fp
26ab4     B2 00 A0 FD | 	call	#popregs_
26ab8                 | _fatfs_cc_unixtime_0843_ret
26ab8     2D 00 64 FD | 	ret
26abc                 | 
26abc                 | _fatfs_cc__set_dos_error_0845
26abc     09 01 02 F6 | 	mov	_var01, arg01
26ac0                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26ac0                 | '     switch (derr) {
26ac0     14 00 26 F3 | 	fle	_var01, #20
26ac4     30 00 62 FD | 	jmprel	_var01
26ac8                 | LR__3980
26ac8     50 00 90 FD | 	jmp	#LR__3981
26acc     84 00 90 FD | 	jmp	#LR__3995
26ad0     80 00 90 FD | 	jmp	#LR__3996
26ad4     7C 00 90 FD | 	jmp	#LR__3997
26ad8     48 00 90 FD | 	jmp	#LR__3982
26adc     44 00 90 FD | 	jmp	#LR__3983
26ae0     40 00 90 FD | 	jmp	#LR__3984
26ae4     44 00 90 FD | 	jmp	#LR__3985
26ae8     48 00 90 FD | 	jmp	#LR__3987
26aec     54 00 90 FD | 	jmp	#LR__3990
26af0     38 00 90 FD | 	jmp	#LR__3986
26af4     4C 00 90 FD | 	jmp	#LR__3991
26af8     48 00 90 FD | 	jmp	#LR__3992
26afc     44 00 90 FD | 	jmp	#LR__3993
26b00     50 00 90 FD | 	jmp	#LR__3998
26b04     4C 00 90 FD | 	jmp	#LR__3998
26b08     48 00 90 FD | 	jmp	#LR__3998
26b0c     2C 00 90 FD | 	jmp	#LR__3988
26b10     38 00 90 FD | 	jmp	#LR__3994
26b14     2C 00 90 FD | 	jmp	#LR__3989
26b18     38 00 90 FD | 	jmp	#LR__3998
26b1c                 | LR__3981
26b1c     00 02 06 F6 | 	mov	_var02, #0
26b20                 | '         r = 0;
26b20                 | '         break;
26b20     34 00 90 FD | 	jmp	#LR__3999
26b24                 | LR__3982
26b24                 | LR__3983
26b24                 | LR__3984
26b24     04 02 06 F6 | 	mov	_var02, #4
26b28                 | '         r =  4 ;
26b28                 | '         break;
26b28     2C 00 90 FD | 	jmp	#LR__3999
26b2c                 | LR__3985
26b2c                 | LR__3986
26b2c     06 02 06 F6 | 	mov	_var02, #6
26b30                 | '         r =  6 ;
26b30                 | '         break;
26b30     24 00 90 FD | 	jmp	#LR__3999
26b34                 | LR__3987
26b34     09 02 06 F6 | 	mov	_var02, #9
26b38                 | '         r =  9 ;
26b38                 | '         break;
26b38     1C 00 90 FD | 	jmp	#LR__3999
26b3c                 | LR__3988
26b3c     07 02 06 F6 | 	mov	_var02, #7
26b40                 | '         r =  7 ;
26b40                 | '         break;
26b40     14 00 90 FD | 	jmp	#LR__3999
26b44                 | LR__3989
26b44                 | LR__3990
26b44                 | LR__3991
26b44                 | LR__3992
26b44                 | LR__3993
26b44     0A 02 06 F6 | 	mov	_var02, #10
26b48                 | '         r =  10 ;
26b48                 | '         break;
26b48     0C 00 90 FD | 	jmp	#LR__3999
26b4c                 | LR__3994
26b4c     0B 02 06 F6 | 	mov	_var02, #11
26b50                 | '         r =  11 ;
26b50                 | '         break;
26b50     04 00 90 FD | 	jmp	#LR__3999
26b54                 | LR__3995
26b54                 | LR__3996
26b54                 | LR__3997
26b54                 | LR__3998
26b54     0C 02 06 F6 | 	mov	_var02, #12
26b58                 | '         r =  12 ;
26b58                 | '         break;
26b58                 | LR__3999
26b58                 | '     }
26b58                 | '     return _seterror(r);
26b58     00 02 4E F2 | 	cmps	_var02, #0 wz
26b5c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
26b60     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
26b64     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
26b68     01 FA 65 56 |  if_ne	neg	result1, #1
26b6c     00 FA 05 A6 |  if_e	mov	result1, #0
26b70                 | _fatfs_cc__set_dos_error_0845_ret
26b70     2D 00 64 FD | 	ret
26b74                 | 
26b74                 | _fatfs_cc_v_creat
26b74     04 4A 05 F6 | 	mov	COUNT_, #4
26b78     A8 00 A0 FD | 	call	#pushregs_
26b7c     09 1F 02 F6 | 	mov	local01, arg01
26b80     0A 21 02 F6 | 	mov	local02, arg02
26b84     03 00 00 FF 
26b88     3C 12 06 F6 | 	mov	arg01, ##1596
26b8c                 | '     return _gc_alloc(size);
26b8c     10 14 06 F6 | 	mov	arg02, #16
26b90     2C 60 BF FD | 	call	#__system___gc_doalloc
26b94     FD 22 0A F6 | 	mov	local03, result1 wz
26b98                 | '       return _seterror( 7 );
26b98     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26b9c     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26ba0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26ba4     01 FA 65 A6 |  if_e	neg	result1, #1
26ba8     58 00 90 AD |  if_e	jmp	#LR__4001
26bac     11 13 02 F6 | 	mov	arg01, local03
26bb0     00 14 06 F6 | 	mov	arg02, #0
26bb4     03 00 00 FF 
26bb8     3C 16 06 F6 | 	mov	arg03, ##1596
26bbc     98 00 A0 FD | 	call	#\builtin_bytefill_
26bc0     02 00 00 FF 
26bc4     14 22 06 F1 | 	add	local03, ##1044
26bc8     11 13 02 F6 | 	mov	arg01, local03
26bcc     02 00 00 FF 
26bd0     14 22 86 F1 | 	sub	local03, ##1044
26bd4     10 15 02 F6 | 	mov	arg02, local02
26bd8     07 16 06 F6 | 	mov	arg03, #7
26bdc     B4 CC BF FD | 	call	#_fatfs_cc_f_open
26be0     FD 24 0A F6 | 	mov	local04, result1 wz
26be4     14 00 90 AD |  if_e	jmp	#LR__4000
26be8     11 13 02 F6 | 	mov	arg01, local03
26bec                 | '     return _gc_free(ptr);
26bec     DC 60 BF FD | 	call	#__system___gc_free
26bf0                 | '     free(f);
26bf0                 | '     return _set_dos_error(r);
26bf0     12 13 02 F6 | 	mov	arg01, local04
26bf4     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26bf8     08 00 90 FD | 	jmp	#LR__4001
26bfc                 | LR__4000
26bfc     0F 23 62 FC | 	wrlong	local03, local01
26c00                 | '   }
26c00                 | '   fil->vfsdata = f;
26c00                 | '   return 0;
26c00     00 FA 05 F6 | 	mov	result1, #0
26c04                 | LR__4001
26c04     A7 F0 03 F6 | 	mov	ptra, fp
26c08     B2 00 A0 FD | 	call	#popregs_
26c0c                 | _fatfs_cc_v_creat_ret
26c0c     2D 00 64 FD | 	ret
26c10                 | 
26c10                 | _fatfs_cc_v_close
26c10     02 4A 05 F6 | 	mov	COUNT_, #2
26c14     A8 00 A0 FD | 	call	#pushregs_
26c18     09 1F 02 FB | 	rdlong	local01, arg01
26c1c     02 00 00 FF 
26c20     14 1E 06 F1 | 	add	local01, ##1044
26c24     0F 13 02 F6 | 	mov	arg01, local01
26c28     02 00 00 FF 
26c2c     14 1E 86 F1 | 	sub	local01, ##1044
26c30     DC E3 BF FD | 	call	#_fatfs_cc_f_close
26c34     FD 20 02 F6 | 	mov	local02, result1
26c38     0F 13 02 F6 | 	mov	arg01, local01
26c3c                 | '     return _gc_free(ptr);
26c3c     8C 60 BF FD | 	call	#__system___gc_free
26c40                 | '     FAT_FIL *f = fil->vfsdata;
26c40                 | '     r=f_close(&f->fil);
26c40                 | '     free(f);
26c40                 | '     return _set_dos_error(r);
26c40     10 13 02 F6 | 	mov	arg01, local02
26c44     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26c48     A7 F0 03 F6 | 	mov	ptra, fp
26c4c     B2 00 A0 FD | 	call	#popregs_
26c50                 | _fatfs_cc_v_close_ret
26c50     2D 00 64 FD | 	ret
26c54                 | 
26c54                 | _fatfs_cc_v_opendir
26c54     04 4A 05 F6 | 	mov	COUNT_, #4
26c58     A8 00 A0 FD | 	call	#pushregs_
26c5c     09 1F 02 F6 | 	mov	local01, arg01
26c60     0A 21 02 F6 | 	mov	local02, arg02
26c64     30 12 06 F6 | 	mov	arg01, #48
26c68                 | '     return _gc_alloc(size);
26c68     10 14 06 F6 | 	mov	arg02, #16
26c6c     50 5F BF FD | 	call	#__system___gc_doalloc
26c70     FD 22 0A F6 | 	mov	local03, result1 wz
26c74                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26c74                 | '       return _seterror( 7 );
26c74     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26c78     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26c7c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26c80     01 FA 65 A6 |  if_e	neg	result1, #1
26c84     34 00 90 AD |  if_e	jmp	#LR__4011
26c88     10 15 02 F6 | 	mov	arg02, local02
26c8c     11 13 02 F6 | 	mov	arg01, local03
26c90     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
26c94     FD 24 0A F6 | 	mov	local04, result1 wz
26c98     14 00 90 AD |  if_e	jmp	#LR__4010
26c9c     11 13 02 F6 | 	mov	arg01, local03
26ca0                 | '     return _gc_free(ptr);
26ca0     28 60 BF FD | 	call	#__system___gc_free
26ca4                 | '         free(f);
26ca4                 | '         return _set_dos_error(r);
26ca4     12 13 02 F6 | 	mov	arg01, local04
26ca8     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26cac     0C 00 90 FD | 	jmp	#LR__4011
26cb0                 | LR__4010
26cb0     04 1E 06 F1 | 	add	local01, #4
26cb4     0F 23 62 FC | 	wrlong	local03, local01
26cb8                 | '     }
26cb8                 | '     dir->vfsdata = f;
26cb8                 | '     return 0;
26cb8     00 FA 05 F6 | 	mov	result1, #0
26cbc                 | LR__4011
26cbc     A7 F0 03 F6 | 	mov	ptra, fp
26cc0     B2 00 A0 FD | 	call	#popregs_
26cc4                 | _fatfs_cc_v_opendir_ret
26cc4     2D 00 64 FD | 	ret
26cc8                 | 
26cc8                 | _fatfs_cc_v_closedir
26cc8     02 4A 05 F6 | 	mov	COUNT_, #2
26ccc     A8 00 A0 FD | 	call	#pushregs_
26cd0     04 12 06 F1 | 	add	arg01, #4
26cd4     09 1F 02 FB | 	rdlong	local01, arg01
26cd8     0F 13 02 F6 | 	mov	arg01, local01
26cdc     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
26ce0     FD 20 02 F6 | 	mov	local02, result1
26ce4     0F 13 02 F6 | 	mov	arg01, local01
26ce8                 | '     return _gc_free(ptr);
26ce8     E0 5F BF FD | 	call	#__system___gc_free
26cec     00 20 0E F2 | 	cmp	local02, #0 wz
26cf0     10 13 02 56 |  if_ne	mov	arg01, local02
26cf4     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0845
26cf8                 | '     return r;
26cf8     10 FB 01 F6 | 	mov	result1, local02
26cfc     A7 F0 03 F6 | 	mov	ptra, fp
26d00     B2 00 A0 FD | 	call	#popregs_
26d04                 | _fatfs_cc_v_closedir_ret
26d04     2D 00 64 FD | 	ret
26d08                 | 
26d08                 | _fatfs_cc_v_readdir
26d08     01 4A 05 F6 | 	mov	COUNT_, #1
26d0c     A8 00 A0 FD | 	call	#pushregs_
26d10     2C F1 07 F1 | 	add	ptra, #300
26d14     04 4E 05 F1 | 	add	fp, #4
26d18     A7 12 62 FC | 	wrlong	arg01, fp
26d1c     04 4E 05 F1 | 	add	fp, #4
26d20     A7 14 62 FC | 	wrlong	arg02, fp
26d24     04 4E 85 F1 | 	sub	fp, #4
26d28     A7 16 02 FB | 	rdlong	arg03, fp
26d2c     04 16 06 F1 | 	add	arg03, #4
26d30     0B 13 02 FB | 	rdlong	arg01, arg03
26d34     08 4E 05 F1 | 	add	fp, #8
26d38     A7 14 02 F6 | 	mov	arg02, fp
26d3c     0C 4E 85 F1 | 	sub	fp, #12
26d40     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
26d44     28 4F 05 F1 | 	add	fp, #296
26d48     A7 FA 61 FC | 	wrlong	result1, fp
26d4c     28 4F 85 F1 | 	sub	fp, #296
26d50     00 FA 0D F2 | 	cmp	result1, #0 wz
26d54     14 00 90 AD |  if_e	jmp	#LR__4020
26d58                 | '         return _set_dos_error(r);
26d58     28 4F 05 F1 | 	add	fp, #296
26d5c     A7 12 02 FB | 	rdlong	arg01, fp
26d60     28 4F 85 F1 | 	sub	fp, #296
26d64     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26d68     C4 00 90 FD | 	jmp	#LR__4023
26d6c                 | LR__4020
26d6c     28 4E 05 F1 | 	add	fp, #40
26d70     A7 16 CA FA | 	rdbyte	arg03, fp wz
26d74     28 4E 85 F1 | 	sub	fp, #40
26d78                 | '         return -1;
26d78     01 FA 65 A6 |  if_e	neg	result1, #1
26d7c     B0 00 90 AD |  if_e	jmp	#LR__4023
26d80     08 4E 05 F1 | 	add	fp, #8
26d84     A7 12 02 FB | 	rdlong	arg01, fp
26d88     20 4E 05 F1 | 	add	fp, #32
26d8c     A7 14 02 F6 | 	mov	arg02, fp
26d90     28 4E 85 F1 | 	sub	fp, #40
26d94     3F 16 06 F6 | 	mov	arg03, #63
26d98     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
26d9c     08 4E 05 F1 | 	add	fp, #8
26da0     A7 16 02 FB | 	rdlong	arg03, fp
26da4     3F 16 06 F1 | 	add	arg03, #63
26da8     0B 01 48 FC | 	wrbyte	#0, arg03
26dac     0C 4E 05 F1 | 	add	fp, #12
26db0     A7 16 C2 FA | 	rdbyte	arg03, fp
26db4     14 4E 85 F1 | 	sub	fp, #20
26db8     10 16 CE F7 | 	test	arg03, #16 wz
26dbc     18 00 90 AD |  if_e	jmp	#LR__4021
26dc0     08 4E 05 F1 | 	add	fp, #8
26dc4     A7 16 02 FB | 	rdlong	arg03, fp
26dc8     08 4E 85 F1 | 	sub	fp, #8
26dcc     50 16 06 F1 | 	add	arg03, #80
26dd0     0B 03 48 FC | 	wrbyte	#1, arg03
26dd4     14 00 90 FD | 	jmp	#LR__4022
26dd8                 | LR__4021
26dd8     08 4E 05 F1 | 	add	fp, #8
26ddc     A7 16 02 FB | 	rdlong	arg03, fp
26de0     08 4E 85 F1 | 	sub	fp, #8
26de4     50 16 06 F1 | 	add	arg03, #80
26de8     0B 01 48 FC | 	wrbyte	#0, arg03
26dec                 | LR__4022
26dec     08 4E 05 F1 | 	add	fp, #8
26df0     A7 16 02 FB | 	rdlong	arg03, fp
26df4     04 4E 05 F1 | 	add	fp, #4
26df8     A7 14 02 FB | 	rdlong	arg02, fp
26dfc     48 16 06 F1 | 	add	arg03, #72
26e00     0B 15 62 FC | 	wrlong	arg02, arg03
26e04     04 4E 85 F1 | 	sub	fp, #4
26e08     A7 1E 02 FB | 	rdlong	local01, fp
26e0c     08 4E 05 F1 | 	add	fp, #8
26e10     A7 12 E2 FA | 	rdword	arg01, fp
26e14     02 4E 05 F1 | 	add	fp, #2
26e18     A7 14 E2 FA | 	rdword	arg02, fp
26e1c     12 4E 85 F1 | 	sub	fp, #18
26e20     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0843
26e24     4C 1E 06 F1 | 	add	local01, #76
26e28     0F FB 61 FC | 	wrlong	result1, local01
26e2c                 | '         ent->d_type =  (0) ;
26e2c                 | '     }
26e2c                 | '     ent->d_size = finfo.fsize;
26e2c                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
26e2c                 | '     return 0;
26e2c     00 FA 05 F6 | 	mov	result1, #0
26e30                 | LR__4023
26e30     A7 F0 03 F6 | 	mov	ptra, fp
26e34     B2 00 A0 FD | 	call	#popregs_
26e38                 | _fatfs_cc_v_readdir_ret
26e38     2D 00 64 FD | 	ret
26e3c                 | 
26e3c                 | _fatfs_cc_v_stat
26e3c     03 4A 05 F6 | 	mov	COUNT_, #3
26e40     A8 00 A0 FD | 	call	#pushregs_
26e44     30 F1 07 F1 | 	add	ptra, #304
26e48     04 4E 05 F1 | 	add	fp, #4
26e4c     A7 12 62 FC | 	wrlong	arg01, fp
26e50     04 4E 05 F1 | 	add	fp, #4
26e54     A7 14 62 FC | 	wrlong	arg02, fp
26e58     08 4E 85 F1 | 	sub	fp, #8
26e5c     0A 13 02 F6 | 	mov	arg01, arg02
26e60     00 14 06 F6 | 	mov	arg02, #0
26e64     30 16 06 F6 | 	mov	arg03, #48
26e68     98 00 A0 FD | 	call	#\builtin_bytefill_
26e6c     04 4E 05 F1 | 	add	fp, #4
26e70     A7 FA 01 FB | 	rdlong	result1, fp
26e74     04 4E 85 F1 | 	sub	fp, #4
26e78     FD FA C9 FA | 	rdbyte	result1, result1 wz
26e7c     2C 00 90 AD |  if_e	jmp	#LR__4030
26e80     04 4E 05 F1 | 	add	fp, #4
26e84     A7 FA 01 FB | 	rdlong	result1, fp
26e88     04 4E 85 F1 | 	sub	fp, #4
26e8c     FD FA C1 FA | 	rdbyte	result1, result1
26e90     2E FA 0D F2 | 	cmp	result1, #46 wz
26e94     04 4E 05 A1 |  if_e	add	fp, #4
26e98     A7 1E 02 AB |  if_e	rdlong	local01, fp
26e9c     04 4E 85 A1 |  if_e	sub	fp, #4
26ea0     01 1E 06 A1 |  if_e	add	local01, #1
26ea4     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
26ea8     18 00 90 5D |  if_ne	jmp	#LR__4031
26eac                 | LR__4030
26eac     18 4E 05 F1 | 	add	fp, #24
26eb0     A7 20 48 FC | 	wrbyte	#16, fp
26eb4     0C 4E 85 F1 | 	sub	fp, #12
26eb8     A7 00 68 FC | 	wrlong	#0, fp
26ebc     0C 4E 85 F1 | 	sub	fp, #12
26ec0     24 00 90 FD | 	jmp	#LR__4032
26ec4                 | LR__4031
26ec4     04 4E 05 F1 | 	add	fp, #4
26ec8     A7 12 02 FB | 	rdlong	arg01, fp
26ecc     0C 4E 05 F1 | 	add	fp, #12
26ed0     A7 14 02 F6 | 	mov	arg02, fp
26ed4     10 4E 85 F1 | 	sub	fp, #16
26ed8     AC EB BF FD | 	call	#_fatfs_cc_f_stat
26edc     0C 4E 05 F1 | 	add	fp, #12
26ee0     A7 FA 61 FC | 	wrlong	result1, fp
26ee4     0C 4E 85 F1 | 	sub	fp, #12
26ee8                 | LR__4032
26ee8     0C 4E 05 F1 | 	add	fp, #12
26eec     A7 20 0A FB | 	rdlong	local02, fp wz
26ef0     0C 4E 85 F1 | 	sub	fp, #12
26ef4     14 00 90 AD |  if_e	jmp	#LR__4033
26ef8                 | '         return _set_dos_error(r);
26ef8     0C 4E 05 F1 | 	add	fp, #12
26efc     A7 12 02 FB | 	rdlong	arg01, fp
26f00     0C 4E 85 F1 | 	sub	fp, #12
26f04     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26f08     14 01 90 FD | 	jmp	#LR__4034
26f0c                 | LR__4033
26f0c     2C 4F 05 F1 | 	add	fp, #300
26f10     A7 48 6A FC | 	wrlong	#292, fp
26f14     14 4F 85 F1 | 	sub	fp, #276
26f18     A7 22 C2 FA | 	rdbyte	local03, fp
26f1c     18 4E 85 F1 | 	sub	fp, #24
26f20     01 22 CE F7 | 	test	local03, #1 wz
26f24     2C 4F 05 A1 |  if_e	add	fp, #300
26f28     A7 22 02 AB |  if_e	rdlong	local03, fp
26f2c     92 22 46 A5 |  if_e	or	local03, #146
26f30     A7 22 62 AC |  if_e	wrlong	local03, fp
26f34     2C 4F 85 A1 |  if_e	sub	fp, #300
26f38     18 4E 05 F1 | 	add	fp, #24
26f3c     A7 22 C2 FA | 	rdbyte	local03, fp
26f40     18 4E 85 F1 | 	sub	fp, #24
26f44     10 22 CE F7 | 	test	local03, #16 wz
26f48     2C 4F 05 51 |  if_ne	add	fp, #300
26f4c     A7 22 02 5B |  if_ne	rdlong	local03, fp
26f50     08 00 00 5F 
26f54     49 22 46 55 |  if_ne	or	local03, ##4169
26f58     A7 22 62 5C |  if_ne	wrlong	local03, fp
26f5c     2C 4F 85 51 |  if_ne	sub	fp, #300
26f60     08 4E 05 F1 | 	add	fp, #8
26f64     A7 22 02 FB | 	rdlong	local03, fp
26f68     24 4F 05 F1 | 	add	fp, #292
26f6c     A7 20 02 FB | 	rdlong	local02, fp
26f70     08 22 06 F1 | 	add	local03, #8
26f74     11 21 62 FC | 	wrlong	local02, local03
26f78     24 4F 85 F1 | 	sub	fp, #292
26f7c     A7 22 02 FB | 	rdlong	local03, fp
26f80     0C 22 06 F1 | 	add	local03, #12
26f84     11 03 68 FC | 	wrlong	#1, local03
26f88     A7 22 02 FB | 	rdlong	local03, fp
26f8c     08 4E 05 F1 | 	add	fp, #8
26f90     A7 20 02 FB | 	rdlong	local02, fp
26f94     18 22 06 F1 | 	add	local03, #24
26f98     11 21 62 FC | 	wrlong	local02, local03
26f9c     08 4E 85 F1 | 	sub	fp, #8
26fa0     A7 22 02 FB | 	rdlong	local03, fp
26fa4     1C 22 06 F1 | 	add	local03, #28
26fa8     01 00 80 FF 
26fac     11 01 68 FC | 	wrlong	##512, local03
26fb0     A7 20 02 FB | 	rdlong	local02, fp
26fb4     10 23 02 F6 | 	mov	local03, local02
26fb8     18 20 06 F1 | 	add	local02, #24
26fbc     10 21 02 FB | 	rdlong	local02, local02
26fc0     FF 21 06 F1 | 	add	local02, #511
26fc4     10 21 52 F6 | 	abs	local02, local02 wc
26fc8     09 20 46 F0 | 	shr	local02, #9
26fcc     10 21 82 F6 | 	negc	local02, local02
26fd0     20 22 06 F1 | 	add	local03, #32
26fd4     11 21 62 FC | 	wrlong	local02, local03
26fd8     A7 20 02 FB | 	rdlong	local02, fp
26fdc     10 23 02 F6 | 	mov	local03, local02
26fe0     10 1F 02 F6 | 	mov	local01, local02
26fe4     0C 4E 05 F1 | 	add	fp, #12
26fe8     A7 12 E2 FA | 	rdword	arg01, fp
26fec     02 4E 05 F1 | 	add	fp, #2
26ff0     A7 14 E2 FA | 	rdword	arg02, fp
26ff4     16 4E 85 F1 | 	sub	fp, #22
26ff8     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0843
26ffc     2C 1E 06 F1 | 	add	local01, #44
27000     0F FB 61 FC | 	wrlong	result1, local01
27004     28 20 06 F1 | 	add	local02, #40
27008     10 FB 61 FC | 	wrlong	result1, local02
2700c     24 22 06 F1 | 	add	local03, #36
27010     11 FB 61 FC | 	wrlong	result1, local03
27014                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
27014                 | '     }
27014                 | '     buf->st_mode = mode;
27014                 | '     buf->st_nlink = 1;
27014                 | '     buf->st_size = finfo.fsize;
27014                 | '     buf->st_blksize = 512;
27014                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
27014                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
27014                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27014                 | '     return r;
27014     0C 4E 05 F1 | 	add	fp, #12
27018     A7 FA 01 FB | 	rdlong	result1, fp
2701c     0C 4E 85 F1 | 	sub	fp, #12
27020                 | LR__4034
27020     A7 F0 03 F6 | 	mov	ptra, fp
27024     B2 00 A0 FD | 	call	#popregs_
27028                 | _fatfs_cc_v_stat_ret
27028     2D 00 64 FD | 	ret
2702c                 | 
2702c                 | _fatfs_cc_v_read
2702c     00 4A 05 F6 | 	mov	COUNT_, #0
27030     A8 00 A0 FD | 	call	#pushregs_
27034     1C F0 07 F1 | 	add	ptra, #28
27038     04 4E 05 F1 | 	add	fp, #4
2703c     A7 12 62 FC | 	wrlong	arg01, fp
27040     04 4E 05 F1 | 	add	fp, #4
27044     A7 14 62 FC | 	wrlong	arg02, fp
27048     04 4E 05 F1 | 	add	fp, #4
2704c     A7 16 62 FC | 	wrlong	arg03, fp
27050     08 4E 85 F1 | 	sub	fp, #8
27054     A7 12 02 FB | 	rdlong	arg01, fp
27058     09 13 0A FB | 	rdlong	arg01, arg01 wz
2705c     0C 4E 05 F1 | 	add	fp, #12
27060     A7 12 62 FC | 	wrlong	arg01, fp
27064     10 4E 85 F1 | 	sub	fp, #16
27068                 | '         return _seterror( 5 );
27068     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
2706c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
27070     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27074     01 FA 65 A6 |  if_e	neg	result1, #1
27078     B8 00 90 AD |  if_e	jmp	#LR__4042
2707c     10 4E 05 F1 | 	add	fp, #16
27080     A7 12 02 FB | 	rdlong	arg01, fp
27084     02 00 00 FF 
27088     14 12 06 F1 | 	add	arg01, ##1044
2708c     08 4E 85 F1 | 	sub	fp, #8
27090     A7 14 02 FB | 	rdlong	arg02, fp
27094     04 4E 05 F1 | 	add	fp, #4
27098     A7 16 02 FB | 	rdlong	arg03, fp
2709c     0C 4E 05 F1 | 	add	fp, #12
270a0     A7 18 02 F6 | 	mov	arg04, fp
270a4     18 4E 85 F1 | 	sub	fp, #24
270a8     C4 CE BF FD | 	call	#_fatfs_cc_f_read
270ac     14 4E 05 F1 | 	add	fp, #20
270b0     A7 FA 61 FC | 	wrlong	result1, fp
270b4     14 4E 85 F1 | 	sub	fp, #20
270b8     00 FA 0D F2 | 	cmp	result1, #0 wz
270bc     34 00 90 AD |  if_e	jmp	#LR__4040
270c0     04 4E 05 F1 | 	add	fp, #4
270c4     A7 18 02 FB | 	rdlong	arg04, fp
270c8     0C 17 02 F6 | 	mov	arg03, arg04
270cc     08 18 06 F1 | 	add	arg04, #8
270d0     0C 19 02 FB | 	rdlong	arg04, arg04
270d4     20 18 46 F5 | 	or	arg04, #32
270d8     08 16 06 F1 | 	add	arg03, #8
270dc     0B 19 62 FC | 	wrlong	arg04, arg03
270e0                 | '         fil->state |=  (0x20) ;
270e0                 | '         return _set_dos_error(r);
270e0     10 4E 05 F1 | 	add	fp, #16
270e4     A7 12 02 FB | 	rdlong	arg01, fp
270e8     14 4E 85 F1 | 	sub	fp, #20
270ec     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
270f0     40 00 90 FD | 	jmp	#LR__4042
270f4                 | LR__4040
270f4     18 4E 05 F1 | 	add	fp, #24
270f8     A7 FA 09 FB | 	rdlong	result1, fp wz
270fc     18 4E 85 F1 | 	sub	fp, #24
27100     24 00 90 5D |  if_ne	jmp	#LR__4041
27104     04 4E 05 F1 | 	add	fp, #4
27108     A7 FA 01 FB | 	rdlong	result1, fp
2710c     FD 18 02 F6 | 	mov	arg04, result1
27110     04 4E 85 F1 | 	sub	fp, #4
27114     08 FA 05 F1 | 	add	result1, #8
27118     FD FA 01 FB | 	rdlong	result1, result1
2711c     10 FA 45 F5 | 	or	result1, #16
27120     08 18 06 F1 | 	add	arg04, #8
27124     0C FB 61 FC | 	wrlong	result1, arg04
27128                 | LR__4041
27128                 | '         fil->state |=  (0x10) ;
27128                 | '     }
27128                 | '     return x;
27128     18 4E 05 F1 | 	add	fp, #24
2712c     A7 FA 01 FB | 	rdlong	result1, fp
27130     18 4E 85 F1 | 	sub	fp, #24
27134                 | LR__4042
27134     A7 F0 03 F6 | 	mov	ptra, fp
27138     B2 00 A0 FD | 	call	#popregs_
2713c                 | _fatfs_cc_v_read_ret
2713c     2D 00 64 FD | 	ret
27140                 | 
27140                 | _fatfs_cc_v_write
27140     00 4A 05 F6 | 	mov	COUNT_, #0
27144     A8 00 A0 FD | 	call	#pushregs_
27148     1C F0 07 F1 | 	add	ptra, #28
2714c     04 4E 05 F1 | 	add	fp, #4
27150     A7 12 62 FC | 	wrlong	arg01, fp
27154     04 4E 05 F1 | 	add	fp, #4
27158     A7 14 62 FC | 	wrlong	arg02, fp
2715c     04 4E 05 F1 | 	add	fp, #4
27160     A7 16 62 FC | 	wrlong	arg03, fp
27164     08 4E 85 F1 | 	sub	fp, #8
27168     A7 12 02 FB | 	rdlong	arg01, fp
2716c     09 13 0A FB | 	rdlong	arg01, arg01 wz
27170     0C 4E 05 F1 | 	add	fp, #12
27174     A7 12 62 FC | 	wrlong	arg01, fp
27178     10 4E 85 F1 | 	sub	fp, #16
2717c                 | '         return _seterror( 5 );
2717c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
27180     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
27184     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27188     01 FA 65 A6 |  if_e	neg	result1, #1
2718c     84 00 90 AD |  if_e	jmp	#LR__4051
27190     10 4E 05 F1 | 	add	fp, #16
27194     A7 12 02 FB | 	rdlong	arg01, fp
27198     02 00 00 FF 
2719c     14 12 06 F1 | 	add	arg01, ##1044
271a0     08 4E 85 F1 | 	sub	fp, #8
271a4     A7 14 02 FB | 	rdlong	arg02, fp
271a8     04 4E 05 F1 | 	add	fp, #4
271ac     A7 16 02 FB | 	rdlong	arg03, fp
271b0     0C 4E 05 F1 | 	add	fp, #12
271b4     A7 18 02 F6 | 	mov	arg04, fp
271b8     18 4E 85 F1 | 	sub	fp, #24
271bc     4C D4 BF FD | 	call	#_fatfs_cc_f_write
271c0     14 4E 05 F1 | 	add	fp, #20
271c4     A7 FA 61 FC | 	wrlong	result1, fp
271c8     14 4E 85 F1 | 	sub	fp, #20
271cc     00 FA 0D F2 | 	cmp	result1, #0 wz
271d0     34 00 90 AD |  if_e	jmp	#LR__4050
271d4     04 4E 05 F1 | 	add	fp, #4
271d8     A7 18 02 FB | 	rdlong	arg04, fp
271dc     0C 17 02 F6 | 	mov	arg03, arg04
271e0     08 18 06 F1 | 	add	arg04, #8
271e4     0C 19 02 FB | 	rdlong	arg04, arg04
271e8     20 18 46 F5 | 	or	arg04, #32
271ec     08 16 06 F1 | 	add	arg03, #8
271f0     0B 19 62 FC | 	wrlong	arg04, arg03
271f4                 | '         fil->state |=  (0x20) ;
271f4                 | '         return _set_dos_error(r);
271f4     10 4E 05 F1 | 	add	fp, #16
271f8     A7 12 02 FB | 	rdlong	arg01, fp
271fc     14 4E 85 F1 | 	sub	fp, #20
27200     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
27204     0C 00 90 FD | 	jmp	#LR__4051
27208                 | LR__4050
27208                 | '     }
27208                 | '     return x;
27208     18 4E 05 F1 | 	add	fp, #24
2720c     A7 FA 01 FB | 	rdlong	result1, fp
27210     18 4E 85 F1 | 	sub	fp, #24
27214                 | LR__4051
27214     A7 F0 03 F6 | 	mov	ptra, fp
27218     B2 00 A0 FD | 	call	#popregs_
2721c                 | _fatfs_cc_v_write_ret
2721c     2D 00 64 FD | 	ret
27220                 | 
27220                 | _fatfs_cc_v_lseek
27220     04 4A 05 F6 | 	mov	COUNT_, #4
27224     A8 00 A0 FD | 	call	#pushregs_
27228     0A 1F 02 F6 | 	mov	local01, arg02
2722c     0B 21 02 F6 | 	mov	local02, arg03
27230     09 23 02 FB | 	rdlong	local03, arg01
27234     02 00 00 FF 
27238     14 22 0E F1 | 	add	local03, ##1044 wz
2723c                 | '         return _seterror( 5 );
2723c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
27240     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
27244     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27248     01 FA 65 A6 |  if_e	neg	result1, #1
2724c     4C 00 90 AD |  if_e	jmp	#LR__4062
27250     00 20 0E F2 | 	cmp	local02, #0 wz
27254     24 00 90 AD |  if_e	jmp	#LR__4060
27258     01 20 0E F2 | 	cmp	local02, #1 wz
2725c     14 22 06 A1 |  if_e	add	local03, #20
27260     11 25 02 AB |  if_e	rdlong	local04, local03
27264     14 22 86 A1 |  if_e	sub	local03, #20
27268     12 1F 02 A1 |  if_e	add	local01, local04
2726c     0C 22 06 51 |  if_ne	add	local03, #12
27270     11 25 02 5B |  if_ne	rdlong	local04, local03
27274     0C 22 86 51 |  if_ne	sub	local03, #12
27278     12 1F 02 51 |  if_ne	add	local01, local04
2727c                 | LR__4060
2727c     0F 15 02 F6 | 	mov	arg02, local01
27280     11 13 02 F6 | 	mov	arg01, local03
27284     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
27288     FD 12 0A F6 | 	mov	arg01, result1 wz
2728c     08 00 90 AD |  if_e	jmp	#LR__4061
27290                 | '         return _set_dos_error(result);
27290     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
27294     04 00 90 FD | 	jmp	#LR__4062
27298                 | LR__4061
27298                 | '     }
27298                 | '     return offset;
27298     0F FB 01 F6 | 	mov	result1, local01
2729c                 | LR__4062
2729c     A7 F0 03 F6 | 	mov	ptra, fp
272a0     B2 00 A0 FD | 	call	#popregs_
272a4                 | _fatfs_cc_v_lseek_ret
272a4     2D 00 64 FD | 	ret
272a8                 | 
272a8                 | _fatfs_cc_v_ioctl
272a8                 | ' {
272a8                 | '     return _seterror( 10 );
272a8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
272ac     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
272b0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
272b4     01 FA 65 F6 | 	neg	result1, #1
272b8                 | _fatfs_cc_v_ioctl_ret
272b8     2D 00 64 FD | 	ret
272bc                 | 
272bc                 | _fatfs_cc_v_mkdir
272bc     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
272c0     FD 12 02 F6 | 	mov	arg01, result1
272c4                 | ' 
272c4                 | '     r = f_mkdir(name);
272c4                 | '     return _set_dos_error(r);
272c4     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
272c8                 | _fatfs_cc_v_mkdir_ret
272c8     2D 00 64 FD | 	ret
272cc                 | 
272cc                 | _fatfs_cc_v_remove
272cc     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
272d0     FD 12 02 F6 | 	mov	arg01, result1
272d4                 | ' 
272d4                 | '     r = f_unlink(name);
272d4                 | '     return _set_dos_error(r);
272d4     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
272d8                 | _fatfs_cc_v_remove_ret
272d8     2D 00 64 FD | 	ret
272dc                 | 
272dc                 | _fatfs_cc_v_rmdir
272dc     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
272e0     FD 12 02 F6 | 	mov	arg01, result1
272e4                 | ' 
272e4                 | '     r = f_unlink(name);
272e4                 | '     return _set_dos_error(r);
272e4     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
272e8                 | _fatfs_cc_v_rmdir_ret
272e8     2D 00 64 FD | 	ret
272ec                 | 
272ec                 | _fatfs_cc_v_rename
272ec     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
272f0     FD 12 02 F6 | 	mov	arg01, result1
272f4                 | '     return _set_dos_error(r);
272f4     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
272f8                 | _fatfs_cc_v_rename_ret
272f8     2D 00 64 FD | 	ret
272fc                 | 
272fc                 | _fatfs_cc_v_open
272fc     07 4A 05 F6 | 	mov	COUNT_, #7
27300     A8 00 A0 FD | 	call	#pushregs_
27304     09 1F 02 F6 | 	mov	local01, arg01
27308     0A 21 02 F6 | 	mov	local02, arg02
2730c     0B 23 02 F6 | 	mov	local03, arg03
27310     03 00 00 FF 
27314     3C 12 06 F6 | 	mov	arg01, ##1596
27318                 | '     return _gc_alloc(size);
27318     10 14 06 F6 | 	mov	arg02, #16
2731c     A0 58 BF FD | 	call	#__system___gc_doalloc
27320     FD 24 0A F6 | 	mov	local04, result1 wz
27324                 | '       return _seterror( 7 );
27324     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
27328     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2732c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27330     01 FA 65 A6 |  if_e	neg	result1, #1
27334     98 00 90 AD |  if_e	jmp	#LR__4076
27338     12 13 02 F6 | 	mov	arg01, local04
2733c     00 14 06 F6 | 	mov	arg02, #0
27340     03 00 00 FF 
27344     3C 16 06 F6 | 	mov	arg03, ##1596
27348     98 00 A0 FD | 	call	#\builtin_bytefill_
2734c                 | '   switch (flags & 3) {
2734c     11 27 02 F6 | 	mov	local05, local03
27350     03 26 0E F5 | 	and	local05, #3 wz
27354     0C 00 90 AD |  if_e	jmp	#LR__4070
27358     01 26 0E F2 | 	cmp	local05, #1 wz
2735c     0C 00 90 AD |  if_e	jmp	#LR__4071
27360     10 00 90 FD | 	jmp	#LR__4072
27364                 | LR__4070
27364     01 28 06 F6 | 	mov	local06, #1
27368                 | '       fs_flags =  0x01 ;
27368                 | '       break;
27368     0C 00 90 FD | 	jmp	#LR__4073
2736c                 | LR__4071
2736c     02 28 06 F6 | 	mov	local06, #2
27370                 | '       fs_flags =  0x02 ;
27370                 | '       break;
27370     04 00 90 FD | 	jmp	#LR__4073
27374                 | LR__4072
27374     03 28 06 F6 | 	mov	local06, #3
27378                 | '       fs_flags =  0x01  |  0x02 ;
27378                 | '       break;
27378                 | LR__4073
27378     08 22 CE F7 | 	test	local03, #8 wz
2737c     18 28 46 55 |  if_ne	or	local06, #24
27380     08 00 90 5D |  if_ne	jmp	#LR__4074
27384     20 22 CE F7 | 	test	local03, #32 wz
27388     30 28 46 55 |  if_ne	or	local06, #48
2738c                 | LR__4074
2738c     02 00 00 FF 
27390     14 24 06 F1 | 	add	local04, ##1044
27394     12 13 02 F6 | 	mov	arg01, local04
27398     02 00 00 FF 
2739c     14 24 86 F1 | 	sub	local04, ##1044
273a0     10 15 02 F6 | 	mov	arg02, local02
273a4     14 17 02 F6 | 	mov	arg03, local06
273a8     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
273ac     FD 2A 0A F6 | 	mov	local07, result1 wz
273b0     14 00 90 AD |  if_e	jmp	#LR__4075
273b4     12 13 02 F6 | 	mov	arg01, local04
273b8                 | '     return _gc_free(ptr);
273b8     10 59 BF FD | 	call	#__system___gc_free
273bc                 | '     free(f);
273bc                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
273bc                 | '     return _set_dos_error(r);
273bc     15 13 02 F6 | 	mov	arg01, local07
273c0     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
273c4     08 00 90 FD | 	jmp	#LR__4076
273c8                 | LR__4075
273c8     0F 25 62 FC | 	wrlong	local04, local01
273cc                 | '   }
273cc                 | '   fil->vfsdata = f;
273cc                 | '   return 0;
273cc     00 FA 05 F6 | 	mov	result1, #0
273d0                 | LR__4076
273d0     A7 F0 03 F6 | 	mov	ptra, fp
273d4     B2 00 A0 FD | 	call	#popregs_
273d8                 | _fatfs_cc_v_open_ret
273d8     2D 00 64 FD | 	ret
273dc                 | 
273dc                 | _fatfs_cc_v_flush
273dc     09 13 02 FB | 	rdlong	arg01, arg01
273e0     02 00 00 FF 
273e4     14 12 0E F1 | 	add	arg01, ##1044 wz
273e8                 | '         return _seterror( 5 );
273e8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
273ec     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
273f0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
273f4     01 FA 65 A6 |  if_e	neg	result1, #1
273f8     0C 00 90 AD |  if_e	jmp	#LR__4080
273fc     00 DA BF FD | 	call	#_fatfs_cc_f_sync
27400     FD 12 02 F6 | 	mov	arg01, result1
27404                 | '     }
27404                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27404                 | '     result = f_sync(f);
27404                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27404                 | '     return _set_dos_error(result);
27404     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
27408                 | LR__4080
27408                 | _fatfs_cc_v_flush_ret
27408     2D 00 64 FD | 	ret
2740c                 | 
2740c                 | _fatfs_cc_v_init
2740c                 | ' {
2740c                 | '     return 0;
2740c     00 FA 05 F6 | 	mov	result1, #0
27410                 | _fatfs_cc_v_init_ret
27410     2D 00 64 FD | 	ret
27414                 | 
27414                 | _fatfs_cc_v_deinit
27414     41 01 00 FF 
27418     74 15 06 F6 | 	mov	arg02, ##@LR__4276
2741c     00 12 06 F6 | 	mov	arg01, #0
27420     00 16 06 F6 | 	mov	arg03, #0
27424     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
27428     01 00 00 FF 
2742c     08 E4 05 F1 | 	add	objptr, ##520
27430     F2 12 02 FB | 	rdlong	arg01, objptr
27434     04 E4 05 F1 | 	add	objptr, #4
27438     F2 14 02 FB | 	rdlong	arg02, objptr
2743c     01 00 00 FF 
27440     0C E4 85 F1 | 	sub	objptr, ##524
27444     50 40 BF FD | 	call	#__system___freepins
27448                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27448                 | '     _freepins(f_pinmask);
27448                 | '     return 0;
27448     00 FA 05 F6 | 	mov	result1, #0
2744c                 | _fatfs_cc_v_deinit_ret
2744c     2D 00 64 FD | 	ret
27450                 | 
27450                 | _fatfs_cc_get_vfs
27450     01 4A 05 F6 | 	mov	COUNT_, #1
27454     A8 00 A0 FD | 	call	#pushregs_
27458     09 1F 02 F6 | 	mov	local01, arg01
2745c     50 12 06 F6 | 	mov	arg01, #80
27460     2C 57 BF FD | 	call	#__system___gc_alloc_managed
27464     FD 12 02 F6 | 	mov	arg01, result1
27468     F2 FA 01 F6 | 	mov	result1, objptr
2746c     00 78 03 FF 
27470     00 FA 45 F5 | 	or	result1, ##116391936
27474     09 FB 61 FC | 	wrlong	result1, arg01
27478     F2 FA 01 F6 | 	mov	result1, objptr
2747c     58 FA 25 F4 | 	bith	result1, #88
27480     04 12 06 F1 | 	add	arg01, #4
27484     09 FB 61 FC | 	wrlong	result1, arg01
27488     F2 FA 01 F6 | 	mov	result1, objptr
2748c     00 88 03 FF 
27490     00 FA 45 F5 | 	or	result1, ##118489088
27494     04 12 06 F1 | 	add	arg01, #4
27498     09 FB 61 FC | 	wrlong	result1, arg01
2749c     F2 FA 01 F6 | 	mov	result1, objptr
274a0     00 90 03 FF 
274a4     00 FA 45 F5 | 	or	result1, ##119537664
274a8     04 12 06 F1 | 	add	arg01, #4
274ac     09 FB 61 FC | 	wrlong	result1, arg01
274b0     F2 FA 01 F6 | 	mov	result1, objptr
274b4     00 98 03 FF 
274b8     00 FA 45 F5 | 	or	result1, ##120586240
274bc     04 12 06 F1 | 	add	arg01, #4
274c0     09 FB 61 FC | 	wrlong	result1, arg01
274c4     04 12 06 F1 | 	add	arg01, #4
274c8     09 01 68 FC | 	wrlong	#0, arg01
274cc     04 12 06 F1 | 	add	arg01, #4
274d0     09 1F 62 FC | 	wrlong	local01, arg01
274d4     04 12 06 F1 | 	add	arg01, #4
274d8     09 01 68 FC | 	wrlong	#0, arg01
274dc     F2 FA 01 F6 | 	mov	result1, objptr
274e0     00 A0 03 FF 
274e4     00 FA 45 F5 | 	or	result1, ##121634816
274e8     04 12 06 F1 | 	add	arg01, #4
274ec     09 FB 61 FC | 	wrlong	result1, arg01
274f0     F2 FA 01 F6 | 	mov	result1, objptr
274f4     00 A8 03 FF 
274f8     00 FA 45 F5 | 	or	result1, ##122683392
274fc     04 12 06 F1 | 	add	arg01, #4
27500     09 FB 61 FC | 	wrlong	result1, arg01
27504     F2 FA 01 F6 | 	mov	result1, objptr
27508     00 B0 03 FF 
2750c     00 FA 45 F5 | 	or	result1, ##123731968
27510     04 12 06 F1 | 	add	arg01, #4
27514     09 FB 61 FC | 	wrlong	result1, arg01
27518     F2 FA 01 F6 | 	mov	result1, objptr
2751c     00 B8 03 FF 
27520     00 FA 45 F5 | 	or	result1, ##124780544
27524     04 12 06 F1 | 	add	arg01, #4
27528     09 FB 61 FC | 	wrlong	result1, arg01
2752c     F2 FA 01 F6 | 	mov	result1, objptr
27530     77 FA 25 F4 | 	bith	result1, #119
27534     04 12 06 F1 | 	add	arg01, #4
27538     09 FB 61 FC | 	wrlong	result1, arg01
2753c     F2 FA 01 F6 | 	mov	result1, objptr
27540     00 C8 03 FF 
27544     00 FA 45 F5 | 	or	result1, ##126877696
27548     04 12 06 F1 | 	add	arg01, #4
2754c     09 FB 61 FC | 	wrlong	result1, arg01
27550     F2 FA 01 F6 | 	mov	result1, objptr
27554     00 D0 03 FF 
27558     00 FA 45 F5 | 	or	result1, ##127926272
2755c     04 12 06 F1 | 	add	arg01, #4
27560     09 FB 61 FC | 	wrlong	result1, arg01
27564     F2 FA 01 F6 | 	mov	result1, objptr
27568     00 D8 03 FF 
2756c     00 FA 45 F5 | 	or	result1, ##128974848
27570     04 12 06 F1 | 	add	arg01, #4
27574     09 FB 61 FC | 	wrlong	result1, arg01
27578     F2 FA 01 F6 | 	mov	result1, objptr
2757c     96 FA 25 F4 | 	bith	result1, #150
27580     04 12 06 F1 | 	add	arg01, #4
27584     09 FB 61 FC | 	wrlong	result1, arg01
27588     F2 FA 01 F6 | 	mov	result1, objptr
2758c     00 E8 03 FF 
27590     00 FA 45 F5 | 	or	result1, ##131072000
27594     04 12 06 F1 | 	add	arg01, #4
27598     09 FB 61 FC | 	wrlong	result1, arg01
2759c     F2 FA 01 F6 | 	mov	result1, objptr
275a0     B5 FA 25 F4 | 	bith	result1, #181
275a4     04 12 06 F1 | 	add	arg01, #4
275a8     09 FB 61 FC | 	wrlong	result1, arg01
275ac     F2 FA 01 F6 | 	mov	result1, objptr
275b0     D4 FA 25 F4 | 	bith	result1, #212
275b4     04 12 06 F1 | 	add	arg01, #4
275b8     09 FB 61 FC | 	wrlong	result1, arg01
275bc     4C 12 86 F1 | 	sub	arg01, #76
275c0                 | ' 
275c0                 | '     v->close = &v_close;
275c0                 | '     v->read = &v_read;
275c0                 | '     v->write = &v_write;
275c0                 | '     v->lseek = &v_lseek;
275c0                 | '     v->ioctl = &v_ioctl;
275c0                 | '     v->flush = 0;
275c0                 | '     v->vfs_data = ptr;
275c0                 | '     v->reserved = 0;
275c0                 | ' 
275c0                 | '     v->open = &v_open;
275c0                 | '     v->creat = &v_creat;
275c0                 | '     v->opendir = &v_opendir;
275c0                 | '     v->closedir = &v_closedir;
275c0                 | '     v->readdir = &v_readdir;
275c0                 | '     v->stat = &v_stat;
275c0                 | ' 
275c0                 | '     v->mkdir = &v_mkdir;
275c0                 | '     v->rmdir = &v_rmdir;
275c0                 | ' 
275c0                 | '     v->remove = &v_remove;
275c0                 | '     v->rename = &v_rename;
275c0                 | ' 
275c0                 | '     v->init = &v_init;
275c0                 | '     v->deinit = &v_deinit;
275c0                 | ' 
275c0                 | '     return v;
275c0     09 FB 01 F6 | 	mov	result1, arg01
275c4     A7 F0 03 F6 | 	mov	ptra, fp
275c8     B2 00 A0 FD | 	call	#popregs_
275cc                 | _fatfs_cc_get_vfs_ret
275cc     2D 00 64 FD | 	ret
275d0                 | 
275d0                 | _fatfs_cc_xmit_mmc_0992
275d0     01 00 00 FF 
275d4     10 E4 05 F1 | 	add	objptr, ##528
275d8     F2 00 02 FB | 	rdlong	_var01, objptr
275dc     08 E4 05 F1 | 	add	objptr, #8
275e0     F2 02 02 FB | 	rdlong	_var02, objptr
275e4     01 00 00 FF 
275e8     18 E4 85 F1 | 	sub	objptr, ##536
275ec     40 02 62 FD | 	dirl	_var02
275f0     28 02 64 FD | 	setq	#1
275f4     09 05 02 FB | 	rdlong	_var03, arg01
275f8     69 04 62 FD | 	rev	_var03
275fc     1B 04 FE F9 | 	movbyts	_var03, #27
27600     01 05 22 FC | 	wypin	_var03, _var02
27604     0A 05 02 F6 | 	mov	_var03, arg02
27608     02 14 4E F0 | 	shr	arg02, #2 wz
2760c     03 04 66 F0 | 	shl	_var03, #3
27610     00 05 22 FC | 	wypin	_var03, _var01
27614     41 02 62 FD | 	dirh	_var02
27618     08 12 06 F1 | 	add	arg01, #8
2761c     69 06 62 FD | 	rev	_var04
27620     1B 06 FE F9 | 	movbyts	_var04, #27
27624                 | LR__4090
27624     01 07 22 5C |  if_ne	wypin	_var04, _var02
27628     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2762c     04 12 06 51 |  if_ne	add	arg01, #4
27630     69 06 62 5D |  if_ne	rev	_var04
27634     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
27638                 | LR__4091
27638     40 02 72 5D |  if_ne	testp	_var02 wc
2763c     F8 FF 9F 1D |  if_a	jmp	#LR__4091
27640     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4090
27644                 | LR__4092
27644     40 00 72 FD | 	testp	_var01 wc
27648     F8 FF 9F 3D |  if_ae	jmp	#LR__4092
2764c     40 02 62 FD | 	dirl	_var02
27650     FF FF FF FF 
27654     01 FF 2B FC | 	wypin	##-1, _var02
27658     41 02 62 FD | 	dirh	_var02
2765c                 | _fatfs_cc_xmit_mmc_0992_ret
2765c     2D 00 64 FD | 	ret
27660                 | 
27660                 | _fatfs_cc_rcvr_mmc_0999
27660     01 00 00 FF 
27664     10 E4 05 F1 | 	add	objptr, ##528
27668     F2 00 02 FB | 	rdlong	_var01, objptr
2766c     0C E4 05 F1 | 	add	objptr, #12
27670     F2 02 02 FB | 	rdlong	_var02, objptr
27674     01 00 00 FF 
27678     1C E4 85 F1 | 	sub	objptr, ##540
2767c     01 03 08 FC | 	akpin	_var02
27680     0A 05 0A F6 | 	mov	_var03, arg02 wz
27684     02 04 4E F0 | 	shr	_var03, #2 wz
27688     30 00 90 AD |  if_e	jmp	#LR__4102
2768c     02 07 02 F6 | 	mov	_var04, _var03
27690     05 06 66 F0 | 	shl	_var04, #5
27694     00 07 22 FC | 	wypin	_var04, _var01
27698     01 7F 18 FC | 	wxpin	#63, _var02
2769c                 | LR__4100
2769c                 | LR__4101
2769c     40 02 72 FD | 	testp	_var02 wc
276a0     F8 FF 9F 3D |  if_ae	jmp	#LR__4101
276a4     01 07 8A FA | 	rdpin	_var04, _var02
276a8     69 06 62 FD | 	rev	_var04
276ac     1B 06 FE F9 | 	movbyts	_var04, #27
276b0     09 07 62 FC | 	wrlong	_var04, arg01
276b4     04 12 06 F1 | 	add	arg01, #4
276b8     F8 05 6E FB | 	djnz	_var03, #LR__4100
276bc                 | LR__4102
276bc     03 14 0E F5 | 	and	arg02, #3 wz
276c0     24 00 90 AD |  if_e	jmp	#LR__4105
276c4     01 4F 18 FC | 	wxpin	#39, _var02
276c8                 | LR__4103
276c8     00 11 28 FC | 	wypin	#8, _var01
276cc                 | LR__4104
276cc     40 02 72 FD | 	testp	_var02 wc
276d0     F8 FF 9F 3D |  if_ae	jmp	#LR__4104
276d4     01 07 8A FA | 	rdpin	_var04, _var02
276d8     69 06 62 FD | 	rev	_var04
276dc     09 07 42 FC | 	wrbyte	_var04, arg01
276e0     01 12 06 F1 | 	add	arg01, #1
276e4     F8 15 6E FB | 	djnz	arg02, #LR__4103
276e8                 | LR__4105
276e8                 | _fatfs_cc_rcvr_mmc_0999_ret
276e8     2D 00 64 FD | 	ret
276ec                 | 
276ec                 | _fatfs_cc_wait_ready_1003
276ec     01 4A 05 F6 | 	mov	COUNT_, #1
276f0     A8 00 A0 FD | 	call	#pushregs_
276f4     10 F0 07 F1 | 	add	ptra, #16
276f8     1A FA 61 FD | 	getct	result1
276fc     08 4E 05 F1 | 	add	fp, #8
27700     A7 FA 61 FC | 	wrlong	result1, fp
27704     14 1E 06 FB | 	rdlong	local01, #20
27708     01 1E 46 F0 | 	shr	local01, #1
2770c     04 4E 05 F1 | 	add	fp, #4
27710     A7 1E 62 FC | 	wrlong	local01, fp
27714     0C 4E 85 F1 | 	sub	fp, #12
27718                 | ' {
27718                 | ' 	BYTE d;
27718                 | ' 	UINT tmr, tmout;
27718                 | ' 
27718                 | ' 	tmr = _cnt();
27718                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
27718                 | ' 	for(;;) {
27718                 | LR__4110
27718     04 4E 05 F1 | 	add	fp, #4
2771c     A7 12 02 F6 | 	mov	arg01, fp
27720     04 4E 85 F1 | 	sub	fp, #4
27724     01 14 06 F6 | 	mov	arg02, #1
27728     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
2772c     04 4E 05 F1 | 	add	fp, #4
27730     A7 1E C2 FA | 	rdbyte	local01, fp
27734     04 4E 85 F1 | 	sub	fp, #4
27738     FF 1E 0E F2 | 	cmp	local01, #255 wz
2773c     01 FA 05 A6 |  if_e	mov	result1, #1
27740     28 00 90 AD |  if_e	jmp	#LR__4111
27744     1A FA 61 FD | 	getct	result1
27748     08 4E 05 F1 | 	add	fp, #8
2774c     A7 1E 02 FB | 	rdlong	local01, fp
27750     0F FB 81 F1 | 	sub	result1, local01
27754     04 4E 05 F1 | 	add	fp, #4
27758     A7 1E 02 FB | 	rdlong	local01, fp
2775c     0C 4E 85 F1 | 	sub	fp, #12
27760     0F FB 11 F2 | 	cmp	result1, local01 wc
27764     00 FA 05 36 |  if_ae	mov	result1, #0
27768     AC FF 9F CD |  if_b	jmp	#LR__4110
2776c                 | LR__4111
2776c     A7 F0 03 F6 | 	mov	ptra, fp
27770     B2 00 A0 FD | 	call	#popregs_
27774                 | _fatfs_cc_wait_ready_1003_ret
27774     2D 00 64 FD | 	ret
27778                 | 
27778                 | _fatfs_cc_deselect_1009
27778     00 4A 05 F6 | 	mov	COUNT_, #0
2777c     A8 00 A0 FD | 	call	#pushregs_
27780     14 F0 07 F1 | 	add	ptra, #20
27784     01 00 00 FF 
27788     14 E4 05 F1 | 	add	objptr, ##532
2778c     F2 14 02 FB | 	rdlong	arg02, objptr
27790     04 4E 05 F1 | 	add	fp, #4
27794     A7 14 62 FC | 	wrlong	arg02, fp
27798     04 E4 85 F1 | 	sub	objptr, #4
2779c     F2 14 02 FB | 	rdlong	arg02, objptr
277a0     04 4E 05 F1 | 	add	fp, #4
277a4     A7 14 62 FC | 	wrlong	arg02, fp
277a8     08 E4 05 F1 | 	add	objptr, #8
277ac     F2 14 02 FB | 	rdlong	arg02, objptr
277b0     04 4E 05 F1 | 	add	fp, #4
277b4     A7 14 62 FC | 	wrlong	arg02, fp
277b8     04 E4 05 F1 | 	add	objptr, #4
277bc     F2 14 02 FB | 	rdlong	arg02, objptr
277c0     01 00 00 FF 
277c4     1C E4 85 F1 | 	sub	objptr, ##540
277c8     04 4E 05 F1 | 	add	fp, #4
277cc     A7 14 62 FC | 	wrlong	arg02, fp
277d0     0C 4E 85 F1 | 	sub	fp, #12
277d4     A7 12 02 FB | 	rdlong	arg01, fp
277d8     04 4E 85 F1 | 	sub	fp, #4
277dc     59 12 62 FD | 	drvh	arg01
277e0     1F 20 64 FD | 	waitx	#16
277e4     A7 12 02 F6 | 	mov	arg01, fp
277e8     01 14 06 F6 | 	mov	arg02, #1
277ec     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
277f0     A7 F0 03 F6 | 	mov	ptra, fp
277f4     B2 00 A0 FD | 	call	#popregs_
277f8                 | _fatfs_cc_deselect_1009_ret
277f8     2D 00 64 FD | 	ret
277fc                 | 
277fc                 | _fatfs_cc_select_1013
277fc     00 4A 05 F6 | 	mov	COUNT_, #0
27800     A8 00 A0 FD | 	call	#pushregs_
27804     10 F0 07 F1 | 	add	ptra, #16
27808     01 00 00 FF 
2780c     14 E4 05 F1 | 	add	objptr, ##532
27810     F2 14 02 FB | 	rdlong	arg02, objptr
27814     08 4E 05 F1 | 	add	fp, #8
27818     A7 14 62 FC | 	wrlong	arg02, fp
2781c     08 E4 05 F1 | 	add	objptr, #8
27820     F2 12 02 FB | 	rdlong	arg01, objptr
27824     01 00 00 FF 
27828     1C E4 85 F1 | 	sub	objptr, ##540
2782c     04 4E 05 F1 | 	add	fp, #4
27830     A7 12 62 FC | 	wrlong	arg01, fp
27834     50 12 62 FD | 	fltl	arg01
27838     04 4E 85 F1 | 	sub	fp, #4
2783c     A7 12 02 FB | 	rdlong	arg01, fp
27840     58 12 62 FD | 	drvl	arg01
27844     1F 20 64 FD | 	waitx	#16
27848     04 4E 05 F1 | 	add	fp, #4
2784c     A7 12 02 FB | 	rdlong	arg01, fp
27850     41 12 62 FD | 	dirh	arg01
27854     08 4E 85 F1 | 	sub	fp, #8
27858     A7 12 02 F6 | 	mov	arg01, fp
2785c     04 4E 85 F1 | 	sub	fp, #4
27860     01 14 06 F6 | 	mov	arg02, #1
27864     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27868     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1003
2786c     00 FA 0D F2 | 	cmp	result1, #0 wz
27870     01 FA 05 56 |  if_ne	mov	result1, #1
27874     08 00 90 5D |  if_ne	jmp	#LR__4120
27878     FC FE BF FD | 	call	#_fatfs_cc_deselect_1009
2787c                 | ' 
2787c                 | ' 	deselect();
2787c                 | ' 	return 0;
2787c     00 FA 05 F6 | 	mov	result1, #0
27880                 | LR__4120
27880     A7 F0 03 F6 | 	mov	ptra, fp
27884     B2 00 A0 FD | 	call	#popregs_
27888                 | _fatfs_cc_select_1013_ret
27888     2D 00 64 FD | 	ret
2788c                 | 
2788c                 | _fatfs_cc_rcvr_datablock_1017
2788c     01 4A 05 F6 | 	mov	COUNT_, #1
27890     A8 00 A0 FD | 	call	#pushregs_
27894     18 F0 07 F1 | 	add	ptra, #24
27898     04 4E 05 F1 | 	add	fp, #4
2789c     A7 12 62 FC | 	wrlong	arg01, fp
278a0     04 4E 05 F1 | 	add	fp, #4
278a4     A7 14 62 FC | 	wrlong	arg02, fp
278a8     1A FA 61 FD | 	getct	result1
278ac     08 4E 05 F1 | 	add	fp, #8
278b0     A7 FA 61 FC | 	wrlong	result1, fp
278b4     14 1E 06 FB | 	rdlong	local01, #20
278b8     03 1E 46 F0 | 	shr	local01, #3
278bc     04 4E 05 F1 | 	add	fp, #4
278c0     A7 1E 62 FC | 	wrlong	local01, fp
278c4     14 4E 85 F1 | 	sub	fp, #20
278c8                 | ' 	BYTE *buff,
278c8                 | ' 	UINT btr
278c8                 | ' )
278c8                 | ' {
278c8                 | ' 	BYTE d[2];
278c8                 | ' 	UINT tmr, tmout;
278c8                 | ' 
278c8                 | ' 	tmr = _cnt();
278c8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
278c8                 | ' 	for(;;) {
278c8                 | LR__4130
278c8     0C 4E 05 F1 | 	add	fp, #12
278cc     A7 12 02 F6 | 	mov	arg01, fp
278d0     0C 4E 85 F1 | 	sub	fp, #12
278d4     01 14 06 F6 | 	mov	arg02, #1
278d8     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
278dc     0C 4E 05 F1 | 	add	fp, #12
278e0     A7 1E C2 FA | 	rdbyte	local01, fp
278e4     0C 4E 85 F1 | 	sub	fp, #12
278e8     FF 1E 0E F2 | 	cmp	local01, #255 wz
278ec     28 00 90 5D |  if_ne	jmp	#LR__4131
278f0     1A FA 61 FD | 	getct	result1
278f4     FD 1E 02 F6 | 	mov	local01, result1
278f8     10 4E 05 F1 | 	add	fp, #16
278fc     A7 14 02 FB | 	rdlong	arg02, fp
27900     0A 1F 82 F1 | 	sub	local01, arg02
27904     04 4E 05 F1 | 	add	fp, #4
27908     A7 14 02 FB | 	rdlong	arg02, fp
2790c     14 4E 85 F1 | 	sub	fp, #20
27910     0A 1F 12 F2 | 	cmp	local01, arg02 wc
27914     B0 FF 9F CD |  if_b	jmp	#LR__4130
27918                 | LR__4131
27918     0C 4E 05 F1 | 	add	fp, #12
2791c     A7 1E C2 FA | 	rdbyte	local01, fp
27920     0C 4E 85 F1 | 	sub	fp, #12
27924     FE 1E 0E F2 | 	cmp	local01, #254 wz
27928     00 FA 05 56 |  if_ne	mov	result1, #0
2792c     30 00 90 5D |  if_ne	jmp	#LR__4132
27930     04 4E 05 F1 | 	add	fp, #4
27934     A7 12 02 FB | 	rdlong	arg01, fp
27938     04 4E 05 F1 | 	add	fp, #4
2793c     A7 14 02 FB | 	rdlong	arg02, fp
27940     08 4E 85 F1 | 	sub	fp, #8
27944     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27948     0C 4E 05 F1 | 	add	fp, #12
2794c     A7 12 02 F6 | 	mov	arg01, fp
27950     0C 4E 85 F1 | 	sub	fp, #12
27954     02 14 06 F6 | 	mov	arg02, #2
27958     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
2795c                 | ' 
2795c                 | ' 	rcvr_mmc(buff, btr);
2795c                 | ' 	rcvr_mmc(d, 2);
2795c                 | ' 
2795c                 | ' 	return 1;
2795c     01 FA 05 F6 | 	mov	result1, #1
27960                 | LR__4132
27960     A7 F0 03 F6 | 	mov	ptra, fp
27964     B2 00 A0 FD | 	call	#popregs_
27968                 | _fatfs_cc_rcvr_datablock_1017_ret
27968     2D 00 64 FD | 	ret
2796c                 | 
2796c                 | _fatfs_cc_xmit_datablock_1019
2796c     00 4A 05 F6 | 	mov	COUNT_, #0
27970     A8 00 A0 FD | 	call	#pushregs_
27974     10 F0 07 F1 | 	add	ptra, #16
27978     04 4E 05 F1 | 	add	fp, #4
2797c     A7 12 62 FC | 	wrlong	arg01, fp
27980     04 4E 05 F1 | 	add	fp, #4
27984     A7 14 42 FC | 	wrbyte	arg02, fp
27988     08 4E 85 F1 | 	sub	fp, #8
2798c     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1003
27990     00 FA 0D F2 | 	cmp	result1, #0 wz
27994     00 FA 05 A6 |  if_e	mov	result1, #0
27998     90 00 90 AD |  if_e	jmp	#LR__4141
2799c     08 4E 05 F1 | 	add	fp, #8
279a0     A7 14 C2 FA | 	rdbyte	arg02, fp
279a4     04 4E 05 F1 | 	add	fp, #4
279a8     A7 14 42 FC | 	wrbyte	arg02, fp
279ac     A7 12 02 F6 | 	mov	arg01, fp
279b0     0C 4E 85 F1 | 	sub	fp, #12
279b4     01 14 06 F6 | 	mov	arg02, #1
279b8     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0992
279bc     08 4E 05 F1 | 	add	fp, #8
279c0     A7 14 C2 FA | 	rdbyte	arg02, fp
279c4     08 4E 85 F1 | 	sub	fp, #8
279c8     FD 14 0E F2 | 	cmp	arg02, #253 wz
279cc     58 00 90 AD |  if_e	jmp	#LR__4140
279d0     04 4E 05 F1 | 	add	fp, #4
279d4     A7 12 02 FB | 	rdlong	arg01, fp
279d8     04 4E 85 F1 | 	sub	fp, #4
279dc     09 14 C6 F9 | 	decod	arg02, #9
279e0     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0992
279e4     0C 4E 05 F1 | 	add	fp, #12
279e8     A7 12 02 F6 | 	mov	arg01, fp
279ec     0C 4E 85 F1 | 	sub	fp, #12
279f0     02 14 06 F6 | 	mov	arg02, #2
279f4     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
279f8     0C 4E 05 F1 | 	add	fp, #12
279fc     A7 12 02 F6 | 	mov	arg01, fp
27a00     0C 4E 85 F1 | 	sub	fp, #12
27a04     01 14 06 F6 | 	mov	arg02, #1
27a08     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27a0c     0C 4E 05 F1 | 	add	fp, #12
27a10     A7 14 C2 FA | 	rdbyte	arg02, fp
27a14     0C 4E 85 F1 | 	sub	fp, #12
27a18     1F 14 06 F5 | 	and	arg02, #31
27a1c     05 14 0E F2 | 	cmp	arg02, #5 wz
27a20                 | ' 			return 0;
27a20     00 FA 05 56 |  if_ne	mov	result1, #0
27a24     04 00 90 5D |  if_ne	jmp	#LR__4141
27a28                 | LR__4140
27a28                 | ' 	}
27a28                 | ' 
27a28                 | ' 	return 1;
27a28     01 FA 05 F6 | 	mov	result1, #1
27a2c                 | LR__4141
27a2c     A7 F0 03 F6 | 	mov	ptra, fp
27a30     B2 00 A0 FD | 	call	#popregs_
27a34                 | _fatfs_cc_xmit_datablock_1019_ret
27a34     2D 00 64 FD | 	ret
27a38                 | 
27a38                 | _fatfs_cc_send_cmd_1023
27a38     01 4A 05 F6 | 	mov	COUNT_, #1
27a3c     A8 00 A0 FD | 	call	#pushregs_
27a40     1C F0 07 F1 | 	add	ptra, #28
27a44                 | _fatfs_cc_send_cmd_1023_enter
27a44     04 4E 05 F1 | 	add	fp, #4
27a48     A7 12 42 FC | 	wrbyte	arg01, fp
27a4c     04 4E 05 F1 | 	add	fp, #4
27a50     A7 14 62 FC | 	wrlong	arg02, fp
27a54     04 4E 85 F1 | 	sub	fp, #4
27a58     A7 FA C1 FA | 	rdbyte	result1, fp
27a5c     04 4E 85 F1 | 	sub	fp, #4
27a60     80 FA CD F7 | 	test	result1, #128 wz
27a64     44 00 90 AD |  if_e	jmp	#LR__4150
27a68     04 4E 05 F1 | 	add	fp, #4
27a6c     A7 14 C2 FA | 	rdbyte	arg02, fp
27a70     7F 14 06 F5 | 	and	arg02, #127
27a74     A7 14 42 FC | 	wrbyte	arg02, fp
27a78     04 4E 85 F1 | 	sub	fp, #4
27a7c     37 12 06 F6 | 	mov	arg01, #55
27a80     00 14 06 F6 | 	mov	arg02, #0
27a84     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1023
27a88     0C 4E 05 F1 | 	add	fp, #12
27a8c     A7 FA 41 FC | 	wrbyte	result1, fp
27a90     A7 14 C2 FA | 	rdbyte	arg02, fp
27a94     0C 4E 85 F1 | 	sub	fp, #12
27a98     02 14 16 F2 | 	cmp	arg02, #2 wc
27a9c     0C 4E 05 31 |  if_ae	add	fp, #12
27aa0     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
27aa4     0C 4E 85 31 |  if_ae	sub	fp, #12
27aa8     6C 01 90 3D |  if_ae	jmp	#LR__4154
27aac                 | LR__4150
27aac     04 4E 05 F1 | 	add	fp, #4
27ab0     A7 14 C2 FA | 	rdbyte	arg02, fp
27ab4     04 4E 85 F1 | 	sub	fp, #4
27ab8     0C 14 0E F2 | 	cmp	arg02, #12 wz
27abc     14 00 90 AD |  if_e	jmp	#LR__4151
27ac0     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1009
27ac4     34 FD BF FD | 	call	#_fatfs_cc_select_1013
27ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
27acc     FF FA 05 A6 |  if_e	mov	result1, #255
27ad0     44 01 90 AD |  if_e	jmp	#LR__4154
27ad4                 | LR__4151
27ad4     04 4E 05 F1 | 	add	fp, #4
27ad8     A7 14 C2 FA | 	rdbyte	arg02, fp
27adc     40 FA 05 F6 | 	mov	result1, #64
27ae0     0A FB 41 F5 | 	or	result1, arg02
27ae4     10 4E 05 F1 | 	add	fp, #16
27ae8     A7 FA 41 FC | 	wrbyte	result1, fp
27aec     0C 4E 85 F1 | 	sub	fp, #12
27af0     A7 FA 01 FB | 	rdlong	result1, fp
27af4     18 FA 45 F0 | 	shr	result1, #24
27af8     0D 4E 05 F1 | 	add	fp, #13
27afc     A7 FA 41 FC | 	wrbyte	result1, fp
27b00     0D 4E 85 F1 | 	sub	fp, #13
27b04     A7 FA 01 FB | 	rdlong	result1, fp
27b08     10 FA 45 F0 | 	shr	result1, #16
27b0c     0E 4E 05 F1 | 	add	fp, #14
27b10     A7 FA 41 FC | 	wrbyte	result1, fp
27b14     0E 4E 85 F1 | 	sub	fp, #14
27b18     A7 FA 01 FB | 	rdlong	result1, fp
27b1c     08 FA 45 F0 | 	shr	result1, #8
27b20     0F 4E 05 F1 | 	add	fp, #15
27b24     A7 FA 41 FC | 	wrbyte	result1, fp
27b28     0F 4E 85 F1 | 	sub	fp, #15
27b2c     A7 FA 01 FB | 	rdlong	result1, fp
27b30     10 4E 05 F1 | 	add	fp, #16
27b34     A7 FA 41 FC | 	wrbyte	result1, fp
27b38     0C 4E 85 F1 | 	sub	fp, #12
27b3c     A7 02 48 FC | 	wrbyte	#1, fp
27b40     08 4E 85 F1 | 	sub	fp, #8
27b44     A7 FA C9 FA | 	rdbyte	result1, fp wz
27b48     04 4E 85 F1 | 	sub	fp, #4
27b4c     0C 4E 05 A1 |  if_e	add	fp, #12
27b50     A7 2A 49 AC |  if_e	wrbyte	#149, fp
27b54     0C 4E 85 A1 |  if_e	sub	fp, #12
27b58     04 4E 05 F1 | 	add	fp, #4
27b5c     A7 FA C1 FA | 	rdbyte	result1, fp
27b60     04 4E 85 F1 | 	sub	fp, #4
27b64     08 FA 0D F2 | 	cmp	result1, #8 wz
27b68     0C 4E 05 A1 |  if_e	add	fp, #12
27b6c     A7 0E 49 AC |  if_e	wrbyte	#135, fp
27b70     0C 4E 85 A1 |  if_e	sub	fp, #12
27b74     0C 4E 05 F1 | 	add	fp, #12
27b78     A7 14 C2 FA | 	rdbyte	arg02, fp
27b7c     0D 4E 05 F1 | 	add	fp, #13
27b80     A7 14 42 FC | 	wrbyte	arg02, fp
27b84     05 4E 85 F1 | 	sub	fp, #5
27b88     A7 12 02 F6 | 	mov	arg01, fp
27b8c     14 4E 85 F1 | 	sub	fp, #20
27b90     06 14 06 F6 | 	mov	arg02, #6
27b94     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0992
27b98     04 4E 05 F1 | 	add	fp, #4
27b9c     A7 1E C2 FA | 	rdbyte	local01, fp
27ba0     04 4E 85 F1 | 	sub	fp, #4
27ba4     0C 1E 0E F2 | 	cmp	local01, #12 wz
27ba8     10 4E 05 A1 |  if_e	add	fp, #16
27bac     A7 12 02 A6 |  if_e	mov	arg01, fp
27bb0     10 4E 85 A1 |  if_e	sub	fp, #16
27bb4     01 14 06 A6 |  if_e	mov	arg02, #1
27bb8     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0999
27bbc     0C 4E 05 F1 | 	add	fp, #12
27bc0     A7 14 48 FC | 	wrbyte	#10, fp
27bc4     0C 4E 85 F1 | 	sub	fp, #12
27bc8                 | ' 	n = 10;
27bc8                 | ' 	do
27bc8                 | LR__4152
27bc8     10 4E 05 F1 | 	add	fp, #16
27bcc     A7 12 02 F6 | 	mov	arg01, fp
27bd0     10 4E 85 F1 | 	sub	fp, #16
27bd4     01 14 06 F6 | 	mov	arg02, #1
27bd8     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27bdc     10 4E 05 F1 | 	add	fp, #16
27be0     A7 1E C2 FA | 	rdbyte	local01, fp
27be4     10 4E 85 F1 | 	sub	fp, #16
27be8     80 1E CE F7 | 	test	local01, #128 wz
27bec     1C 00 90 AD |  if_e	jmp	#LR__4153
27bf0     0C 4E 05 F1 | 	add	fp, #12
27bf4     A7 1E C2 FA | 	rdbyte	local01, fp
27bf8     01 1E 86 F1 | 	sub	local01, #1
27bfc     A7 1E 42 FC | 	wrbyte	local01, fp
27c00     A7 1E CA FA | 	rdbyte	local01, fp wz
27c04     0C 4E 85 F1 | 	sub	fp, #12
27c08     BC FF 9F 5D |  if_ne	jmp	#LR__4152
27c0c                 | LR__4153
27c0c                 | ' 
27c0c                 | ' 	return d;
27c0c     10 4E 05 F1 | 	add	fp, #16
27c10     A7 FA C1 FA | 	rdbyte	result1, fp
27c14     10 4E 85 F1 | 	sub	fp, #16
27c18                 | LR__4154
27c18     A7 F0 03 F6 | 	mov	ptra, fp
27c1c     B2 00 A0 FD | 	call	#popregs_
27c20                 | _fatfs_cc_send_cmd_1023_ret
27c20     2D 00 64 FD | 	ret
27c24                 | 
27c24                 | _fatfs_cc_disk_deinitialize
27c24     03 4A 05 F6 | 	mov	COUNT_, #3
27c28     A8 00 A0 FD | 	call	#pushregs_
27c2c     00 12 4E F2 | 	cmps	arg01, #0 wz
27c30     01 00 00 FF 
27c34     14 E4 05 F1 | 	add	objptr, ##532
27c38     F2 12 02 FB | 	rdlong	arg01, objptr
27c3c     04 E4 85 F1 | 	sub	objptr, #4
27c40     F2 1E 02 FB | 	rdlong	local01, objptr
27c44     08 E4 05 F1 | 	add	objptr, #8
27c48     F2 20 02 FB | 	rdlong	local02, objptr
27c4c     04 E4 05 F1 | 	add	objptr, #4
27c50     F2 22 02 FB | 	rdlong	local03, objptr
27c54     01 00 00 FF 
27c58     1C E4 85 F1 | 	sub	objptr, ##540
27c5c                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27c5c                 | '         return RES_NOTRDY;
27c5c     03 FA 05 56 |  if_ne	mov	result1, #3
27c60     2C 00 90 5D |  if_ne	jmp	#LR__4160
27c64     50 12 62 FD | 	fltl	arg01
27c68     09 01 08 FC | 	wrpin	#0, arg01
27c6c     50 1E 62 FD | 	fltl	local01
27c70     0F 01 08 FC | 	wrpin	#0, local01
27c74     50 20 62 FD | 	fltl	local02
27c78     10 01 08 FC | 	wrpin	#0, local02
27c7c     50 22 62 FD | 	fltl	local03
27c80     11 01 08 FC | 	wrpin	#0, local03
27c84     0A 12 06 F6 | 	mov	arg01, #10
27c88     40 14 BF FD | 	call	#__system___waitms
27c8c                 | '     }
27c8c                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27c8c                 | '     _pinclear(PIN_SS);
27c8c                 | '     _pinclear(PIN_CLK);
27c8c                 | '     _pinclear(PIN_DI);
27c8c                 | '     _pinclear(PIN_DO);
27c8c                 | ' 
27c8c                 | '     _waitms(10);
27c8c                 | ' 
27c8c                 | '     return 0;
27c8c     00 FA 05 F6 | 	mov	result1, #0
27c90                 | LR__4160
27c90     A7 F0 03 F6 | 	mov	ptra, fp
27c94     B2 00 A0 FD | 	call	#popregs_
27c98                 | _fatfs_cc_disk_deinitialize_ret
27c98     2D 00 64 FD | 	ret
27c9c                 | 
27c9c                 | _fatfs_cc_gettimeofday
27c9c     04 4A 05 F6 | 	mov	COUNT_, #4
27ca0     A8 00 A0 FD | 	call	#pushregs_
27ca4     09 1F 02 F6 | 	mov	local01, arg01
27ca8     FC 0F BF FD | 	call	#__system___getus
27cac     FD 12 02 F6 | 	mov	arg01, result1
27cb0     02 00 00 FF 
27cb4     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
27cb8     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
27cbc     09 FB 01 F6 | 	mov	result1, arg01
27cc0     10 FB 81 F1 | 	sub	result1, local02
27cc4     A1 07 00 FF 
27cc8     40 FA 15 FD | 	qdiv	result1, ##1000000
27ccc     02 00 00 FF 
27cd0     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
27cd4     18 20 62 FD | 	getqx	local02
27cd8     A1 07 00 FF 
27cdc     40 FA 15 FD | 	qdiv	result1, ##1000000
27ce0     00 20 0E F2 | 	cmp	local02, #0 wz
27ce4     19 22 62 FD | 	getqy	local03
27ce8     28 00 90 AD |  if_e	jmp	#LR__4170
27cec     02 00 00 FF 
27cf0     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
27cf4     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
27cf8     10 25 02 F1 | 	add	local04, local02
27cfc     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
27d00     11 13 82 F1 | 	sub	arg01, local03
27d04     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
27d08     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
27d0c     02 00 00 FF 
27d10     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
27d14                 | LR__4170
27d14     02 00 00 FF 
27d18     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
27d1c     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
27d20     02 00 00 FF 
27d24     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
27d28     0F 25 62 FC | 	wrlong	local04, local01
27d2c     04 1E 06 F1 | 	add	local01, #4
27d30     0F 23 62 FC | 	wrlong	local03, local01
27d34                 | '         lastsec += secs;
27d34                 | '         lastus = now - leftover;
27d34                 | '     }
27d34                 | '     tv->tv_sec = lastsec;
27d34                 | '     tv->tv_usec = leftover;
27d34                 | '     return 0;
27d34     00 FA 05 F6 | 	mov	result1, #0
27d38     A7 F0 03 F6 | 	mov	ptra, fp
27d3c     B2 00 A0 FD | 	call	#popregs_
27d40                 | _fatfs_cc_gettimeofday_ret
27d40     2D 00 64 FD | 	ret
27d44                 | 
27d44                 | _fatfs_cc__is_leap_year
27d44     09 FB 51 F6 | 	abs	result1, arg01 wc
27d48     03 FA 05 F5 | 	and	result1, #3
27d4c     FD FA 89 F6 | 	negc	result1, result1 wz
27d50     38 00 90 5D |  if_ne	jmp	#LR__4181
27d54     09 FB 51 F6 | 	abs	result1, arg01 wc
27d58     64 FA 15 FD | 	qdiv	result1, #100
27d5c     19 FA 61 FD | 	getqy	result1
27d60     FD FA 89 F6 | 	negc	result1, result1 wz
27d64     1C 00 90 5D |  if_ne	jmp	#LR__4180
27d68     09 FB 51 F6 | 	abs	result1, arg01 wc
27d6c     90 FB 15 FD | 	qdiv	result1, #400
27d70                 | '       return (0 == y % 400);
27d70     00 FA 05 F6 | 	mov	result1, #0
27d74     19 00 62 FD | 	getqy	_var01
27d78     00 01 8A F6 | 	negc	_var01, _var01 wz
27d7c     01 FA 05 A6 |  if_e	mov	result1, #1
27d80     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
27d84                 | LR__4180
27d84                 | '     return 1;
27d84     01 FA 05 F6 | 	mov	result1, #1
27d88     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
27d8c                 | LR__4181
27d8c                 | '   }
27d8c                 | '   return 0;
27d8c     00 FA 05 F6 | 	mov	result1, #0
27d90                 | _fatfs_cc__is_leap_year_ret
27d90     2D 00 64 FD | 	ret
27d94                 | 
27d94                 | _fatfs_cc___tzoffset
27d94     09 01 0A F6 | 	mov	_var01, arg01 wz
27d98     FF FF FF FF 
27d9c     0A FF 6B FC | 	wrlong	##-1, arg02
27da0     01 02 06 F6 | 	mov	_var02, #1
27da4     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
27da8                 | '                 return 0;
27da8     00 FA 05 A6 |  if_e	mov	result1, #0
27dac     94 02 90 AD |  if_e	jmp	#LR__4207
27db0     0A 01 68 FC | 	wrlong	#0, arg02
27db4     02 00 00 FF 
27db8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27dbc     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
27dc0                 | ' 
27dc0                 | '        *hasdst = 0;
27dc0                 | ' 
27dc0                 | ' 	n = stdname;
27dc0                 | '         while (*s && isalpha(*s)) {
27dc0     02 00 00 FF 
27dc4     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
27dc8     97 28 48 FB | 	callpa	#(@LR__4191-@LR__4190)>>2,fcache_load_ptr_
27dcc                 | LR__4190
27dcc     00 05 CA FA | 	rdbyte	_var03, _var01 wz
27dd0     48 00 90 AD |  if_e	jmp	#LR__4192
27dd4     00 13 C2 FA | 	rdbyte	arg01, _var01
27dd8                 | ' {
27dd8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27dd8     80 12 36 F3 | 	fle	arg01, #128 wc
27ddc                 | '     return __ctype[c];
27ddc     02 00 00 FF 
27de0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27de4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27de8     09 FB C1 FA | 	rdbyte	result1, arg01
27dec     02 00 00 FF 
27df0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27df4     0C FA CD F7 | 	test	result1, #12 wz
27df8     20 00 90 AD |  if_e	jmp	#LR__4192
27dfc     00 09 02 F6 | 	mov	_var05, _var01
27e00     00 0B 02 F6 | 	mov	_var06, _var01
27e04     01 0A 06 F1 | 	add	_var06, #1
27e08     04 0D C2 FA | 	rdbyte	_var07, _var05
27e0c     05 01 02 F6 | 	mov	_var01, _var06
27e10     03 0D 42 FC | 	wrbyte	_var07, _var04
27e14     01 06 06 F1 | 	add	_var04, #1
27e18     B0 FF 9F FD | 	jmp	#LR__4190
27e1c                 | LR__4191
27e1c                 | LR__4192
27e1c     03 01 48 FC | 	wrbyte	#0, _var04
27e20     00 0E 06 F6 | 	mov	_var08, #0
27e24     00 05 C2 FA | 	rdbyte	_var03, _var01
27e28     2D 04 0E F2 | 	cmp	_var03, #45 wz
27e2c     01 02 66 A6 |  if_e	neg	_var02, #1
27e30     01 00 06 A1 |  if_e	add	_var01, #1
27e34     97 28 48 FB | 	callpa	#(@LR__4194-@LR__4193)>>2,fcache_load_ptr_
27e38                 | '                 sgn = -1;
27e38                 | '                 s++;
27e38                 | '         }
27e38                 | '         while (isdigit(*s)) {
27e38                 | LR__4193
27e38     00 13 C2 FA | 	rdbyte	arg01, _var01
27e3c                 | ' {
27e3c                 | '   return  (__ctype_get(c) & 0x02 ) ;
27e3c     80 12 36 F3 | 	fle	arg01, #128 wc
27e40                 | '     return __ctype[c];
27e40     02 00 00 FF 
27e44     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27e48     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27e4c     09 FB C1 FA | 	rdbyte	result1, arg01
27e50     02 00 00 FF 
27e54     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27e58     02 FA CD F7 | 	test	result1, #2 wz
27e5c     28 00 90 AD |  if_e	jmp	#LR__4195
27e60     07 05 02 F6 | 	mov	_var03, _var08
27e64     02 04 66 F0 | 	shl	_var03, #2
27e68     07 05 02 F1 | 	add	_var03, _var08
27e6c     01 04 66 F0 | 	shl	_var03, #1
27e70     00 09 C2 FA | 	rdbyte	_var05, _var01
27e74     30 08 86 F1 | 	sub	_var05, #48
27e78     04 05 02 F1 | 	add	_var03, _var05
27e7c     02 0F 02 F6 | 	mov	_var08, _var03
27e80     01 00 06 F1 | 	add	_var01, #1
27e84     B0 FF 9F FD | 	jmp	#LR__4193
27e88                 | LR__4194
27e88                 | LR__4195
27e88     07 00 00 FF 
27e8c     10 0E 06 FD | 	qmul	_var08, ##3600
27e90     00 05 C2 FA | 	rdbyte	_var03, _var01
27e94     3A 04 0E F2 | 	cmp	_var03, #58 wz
27e98     18 10 62 FD | 	getqx	_var09
27e9c     70 00 90 5D |  if_ne	jmp	#LR__4199
27ea0     00 0E 06 F6 | 	mov	_var08, #0
27ea4     01 00 06 F1 | 	add	_var01, #1
27ea8     97 28 48 FB | 	callpa	#(@LR__4197-@LR__4196)>>2,fcache_load_ptr_
27eac                 | '                 x = 0;
27eac                 | '                 s++;
27eac                 | '                 while (isdigit(*s)) {
27eac                 | LR__4196
27eac     00 13 C2 FA | 	rdbyte	arg01, _var01
27eb0                 | ' {
27eb0                 | '   return  (__ctype_get(c) & 0x02 ) ;
27eb0     80 12 36 F3 | 	fle	arg01, #128 wc
27eb4                 | '     return __ctype[c];
27eb4     02 00 00 FF 
27eb8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27ebc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27ec0     09 FB C1 FA | 	rdbyte	result1, arg01
27ec4     02 00 00 FF 
27ec8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27ecc     02 FA CD F7 | 	test	result1, #2 wz
27ed0     28 00 90 AD |  if_e	jmp	#LR__4198
27ed4     07 05 02 F6 | 	mov	_var03, _var08
27ed8     02 04 66 F0 | 	shl	_var03, #2
27edc     07 05 02 F1 | 	add	_var03, _var08
27ee0     01 04 66 F0 | 	shl	_var03, #1
27ee4     00 09 C2 FA | 	rdbyte	_var05, _var01
27ee8     30 08 86 F1 | 	sub	_var05, #48
27eec     04 05 02 F1 | 	add	_var03, _var05
27ef0     02 0F 02 F6 | 	mov	_var08, _var03
27ef4     01 00 06 F1 | 	add	_var01, #1
27ef8     B0 FF 9F FD | 	jmp	#LR__4196
27efc                 | LR__4197
27efc                 | LR__4198
27efc     07 0D 02 F6 | 	mov	_var07, _var08
27f00     04 0C 66 F0 | 	shl	_var07, #4
27f04     07 0D 82 F1 | 	sub	_var07, _var08
27f08     02 0C 66 F0 | 	shl	_var07, #2
27f0c     06 11 02 F1 | 	add	_var09, _var07
27f10                 | LR__4199
27f10     02 00 00 FF 
27f14     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
27f18     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
27f1c     00 13 C2 FA | 	rdbyte	arg01, _var01
27f20                 | ' {
27f20                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27f20     80 12 36 F3 | 	fle	arg01, #128 wc
27f24                 | '     return __ctype[c];
27f24     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
27f28     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27f2c     09 FB C1 FA | 	rdbyte	result1, arg01
27f30     02 00 00 FF 
27f34     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27f38     0C FA CD F7 | 	test	result1, #12 wz
27f3c     50 00 90 AD |  if_e	jmp	#LR__4202
27f40     0A 03 68 FC | 	wrlong	#1, arg02
27f44                 | '                 *hasdst = 1;
27f44                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
27f44                 | LR__4200
27f44     00 05 CA FA | 	rdbyte	_var03, _var01 wz
27f48     44 00 90 AD |  if_e	jmp	#LR__4201
27f4c     00 13 C2 FA | 	rdbyte	arg01, _var01
27f50                 | ' {
27f50                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27f50     80 12 36 F3 | 	fle	arg01, #128 wc
27f54                 | '     return __ctype[c];
27f54     02 00 00 FF 
27f58     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27f5c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27f60     09 FB C1 FA | 	rdbyte	result1, arg01
27f64     02 00 00 FF 
27f68     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27f6c     0C FA CD F7 | 	test	result1, #12 wz
27f70     1C 00 90 AD |  if_e	jmp	#LR__4201
27f74     00 0B 02 F6 | 	mov	_var06, _var01
27f78     01 0A 06 F1 | 	add	_var06, #1
27f7c     00 0D C2 FA | 	rdbyte	_var07, _var01
27f80     05 01 02 F6 | 	mov	_var01, _var06
27f84     03 0D 42 FC | 	wrbyte	_var07, _var04
27f88     01 06 06 F1 | 	add	_var04, #1
27f8c     B4 FF 9F FD | 	jmp	#LR__4200
27f90                 | LR__4201
27f90                 | LR__4202
27f90     03 01 48 FC | 	wrbyte	#0, _var04
27f94     02 00 00 FF 
27f98     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27f9c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
27fa0     02 00 00 FF 
27fa4     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
27fa8     20 00 90 AD |  if_e	jmp	#LR__4203
27fac     02 00 00 FF 
27fb0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27fb4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27fb8     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
27fbc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27fc0     02 00 00 FF 
27fc4     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
27fc8     1C 00 90 FD | 	jmp	#LR__4204
27fcc                 | LR__4203
27fcc     02 00 00 FF 
27fd0     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
27fd4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27fd8     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
27fdc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27fe0     02 00 00 FF 
27fe4     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
27fe8                 | LR__4204
27fe8     02 00 00 FF 
27fec     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
27ff0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
27ff4     02 00 00 FF 
27ff8     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
27ffc     20 00 90 AD |  if_e	jmp	#LR__4205
28000     02 00 00 FF 
28004     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
28008     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2800c     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
28010     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
28014     02 00 00 FF 
28018     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2801c     1C 00 90 FD | 	jmp	#LR__4206
28020                 | LR__4205
28020     02 00 00 FF 
28024     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
28028     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2802c     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
28030     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
28034     02 00 00 FF 
28038     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2803c                 | LR__4206
2803c     08 03 02 FD | 	qmul	_var02, _var09
28040                 | ' 		_tzname[1] = stdname;
28040                 | ' 
28040                 | '         return sgn * off;
28040     18 FA 61 FD | 	getqx	result1
28044                 | LR__4207
28044                 | _fatfs_cc___tzoffset_ret
28044     2D 00 64 FD | 	ret
28048                 | 
28048                 | _fatfs_cc___indst
28048     10 12 06 F1 | 	add	arg01, #16
2804c     09 01 02 FB | 	rdlong	_var01, arg01
28050     10 12 86 F1 | 	sub	arg01, #16
28054     02 00 0E F2 | 	cmp	_var01, #2 wz
28058     30 00 90 5D |  if_ne	jmp	#LR__4210
2805c     07 00 06 F6 | 	mov	_var01, #7
28060     18 12 06 F1 | 	add	arg01, #24
28064     09 03 02 FB | 	rdlong	_var02, arg01
28068     01 01 02 F1 | 	add	_var01, _var02
2806c     0C 12 86 F1 | 	sub	arg01, #12
28070     09 05 02 FB | 	rdlong	_var03, arg01
28074     02 01 82 F1 | 	sub	_var01, _var03
28078     00 00 56 F2 | 	cmps	_var01, #0 wc
2807c                 | '                         return 1;
2807c     01 FA 05 C6 |  if_b	mov	result1, #1
28080     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
28084                 | '                 return 0;
28084     00 FA 05 F6 | 	mov	result1, #0
28088     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2808c                 | LR__4210
2808c     10 12 06 F1 | 	add	arg01, #16
28090     09 01 02 FB | 	rdlong	_var01, arg01
28094     10 12 86 F1 | 	sub	arg01, #16
28098     0A 00 0E F2 | 	cmp	_var01, #10 wz
2809c     28 00 90 5D |  if_ne	jmp	#LR__4211
280a0     18 12 06 F1 | 	add	arg01, #24
280a4     09 01 02 FB | 	rdlong	_var01, arg01
280a8     0C 12 86 F1 | 	sub	arg01, #12
280ac     09 07 02 FB | 	rdlong	_var04, arg01
280b0     03 01 82 F1 | 	sub	_var01, _var04
280b4     00 00 56 F2 | 	cmps	_var01, #0 wc
280b8                 | '                         return 0;
280b8     00 FA 05 C6 |  if_b	mov	result1, #0
280bc     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
280c0                 | '                 return 1;
280c0     01 FA 05 F6 | 	mov	result1, #1
280c4     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
280c8                 | LR__4211
280c8                 | '         }
280c8                 | ' 
280c8                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
280c8     00 00 06 F6 | 	mov	_var01, #0
280cc     10 12 06 F1 | 	add	arg01, #16
280d0     09 03 02 FB | 	rdlong	_var02, arg01
280d4     10 12 86 F1 | 	sub	arg01, #16
280d8     03 02 56 F2 | 	cmps	_var02, #3 wc
280dc     10 00 90 CD |  if_b	jmp	#LR__4212
280e0     10 12 06 F1 | 	add	arg01, #16
280e4     09 05 02 FB | 	rdlong	_var03, arg01
280e8     0A 04 56 F2 | 	cmps	_var03, #10 wc
280ec     01 00 06 C6 |  if_b	mov	_var01, #1
280f0                 | LR__4212
280f0     00 FB 01 F6 | 	mov	result1, _var01
280f4                 | _fatfs_cc___indst_ret
280f4     2D 00 64 FD | 	ret
280f8                 | 
280f8                 | ' 	
280f8                 | ' 	FUNCTION pfunc(c as integer) as integer
280f8                 | ___strs_cl_pfunc
280f8                 | ' 		if (i < 16) then
280f8     04 E4 05 F1 | 	add	objptr, #4
280fc     F2 FA 01 FB | 	rdlong	result1, objptr
28100     04 E4 85 F1 | 	sub	objptr, #4
28104     10 FA 55 F2 | 	cmps	result1, #16 wc
28108     2C 00 90 3D |  if_ae	jmp	#LR__4220
2810c     F2 FA 01 FB | 	rdlong	result1, objptr
28110     04 E4 05 F1 | 	add	objptr, #4
28114     F2 00 02 FB | 	rdlong	_var01, objptr
28118     FD 00 02 F1 | 	add	_var01, result1
2811c     00 13 42 FC | 	wrbyte	arg01, _var01
28120     F2 FA 01 FB | 	rdlong	result1, objptr
28124     01 FA 05 F1 | 	add	result1, #1
28128     F2 FA 61 FC | 	wrlong	result1, objptr
2812c     04 E4 85 F1 | 	sub	objptr, #4
28130                 | ' 			p(i) = c
28130                 | ' 			i = i+1
28130                 | ' 			return 1
28130     01 FA 05 F6 | 	mov	result1, #1
28134     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
28138                 | LR__4220
28138                 | ' 			return -1
28138     01 FA 65 F6 | 	neg	result1, #1
2813c                 | ___strs_cl_pfunc_ret
2813c     2D 00 64 FD | 	ret
28140                 | 
28140                 | __struct__s_vfs_file_t_putchar
28140     04 4A 05 F6 | 	mov	COUNT_, #4
28144     A8 00 A0 FD | 	call	#pushregs_
28148     1C E4 05 F1 | 	add	objptr, #28
2814c     F2 1E 0A FB | 	rdlong	local01, objptr wz
28150     1C E4 85 F1 | 	sub	objptr, #28
28154     00 FA 05 A6 |  if_e	mov	result1, #0
28158     48 00 90 AD |  if_e	jmp	#LR__4230
2815c     1C E4 05 F1 | 	add	objptr, #28
28160     F2 20 02 FB | 	rdlong	local02, objptr
28164     10 23 02 F6 | 	mov	local03, local02
28168     1C E4 85 F1 | 	sub	objptr, #28
2816c     13 22 46 F7 | 	zerox	local03, #19
28170     14 20 46 F0 | 	shr	local02, #20
28174     02 20 66 F0 | 	shl	local02, #2
28178     ED 20 02 F1 | 	add	local02, __methods__
2817c     10 21 02 FB | 	rdlong	local02, local02
28180     F2 14 02 F6 | 	mov	arg02, objptr
28184     F2 24 02 F6 | 	mov	local04, objptr
28188     11 E5 01 F6 | 	mov	objptr, local03
2818c     2D 20 62 FD | 	call	local02
28190     12 E5 01 F6 | 	mov	objptr, local04
28194                 | '     return (i < 0) ? 0 : 1;
28194     00 FA 55 F2 | 	cmps	result1, #0 wc
28198     00 1E 06 C6 |  if_b	mov	local01, #0
2819c     01 1E 06 36 |  if_ae	mov	local01, #1
281a0     0F FB 01 F6 | 	mov	result1, local01
281a4                 | LR__4230
281a4     A7 F0 03 F6 | 	mov	ptra, fp
281a8     B2 00 A0 FD | 	call	#popregs_
281ac                 | __struct__s_vfs_file_t_putchar_ret
281ac     2D 00 64 FD | 	ret
281b0                 | 
281b0                 | __struct__s_vfs_file_t_getchar
281b0     03 4A 05 F6 | 	mov	COUNT_, #3
281b4     A8 00 A0 FD | 	call	#pushregs_
281b8     20 E4 05 F1 | 	add	objptr, #32
281bc     F2 12 0A FB | 	rdlong	arg01, objptr wz
281c0     20 E4 85 F1 | 	sub	objptr, #32
281c4     01 FA 65 A6 |  if_e	neg	result1, #1
281c8     38 00 90 AD |  if_e	jmp	#LR__4240
281cc                 | '     return getcf(__this);
281cc     20 E4 05 F1 | 	add	objptr, #32
281d0     F2 1E 02 FB | 	rdlong	local01, objptr
281d4     0F 21 02 F6 | 	mov	local02, local01
281d8     20 E4 85 F1 | 	sub	objptr, #32
281dc     13 20 46 F7 | 	zerox	local02, #19
281e0     14 1E 46 F0 | 	shr	local01, #20
281e4     02 1E 66 F0 | 	shl	local01, #2
281e8     ED 1E 02 F1 | 	add	local01, __methods__
281ec     0F 1F 02 FB | 	rdlong	local01, local01
281f0     F2 12 02 F6 | 	mov	arg01, objptr
281f4     F2 22 02 F6 | 	mov	local03, objptr
281f8     10 E5 01 F6 | 	mov	objptr, local02
281fc     2D 1E 62 FD | 	call	local01
28200     11 E5 01 F6 | 	mov	objptr, local03
28204                 | LR__4240
28204     A7 F0 03 F6 | 	mov	ptra, fp
28208     B2 00 A0 FD | 	call	#popregs_
2820c                 | __struct__s_vfs_file_t_getchar_ret
2820c     2D 00 64 FD | 	ret
28210                 | 
28210                 | __struct___bas_wrap_sender_tx
28210     03 4A 05 F6 | 	mov	COUNT_, #3
28214     A8 00 A0 FD | 	call	#pushregs_
28218     F2 1E 02 FB | 	rdlong	local01, objptr
2821c     0F 21 02 F6 | 	mov	local02, local01
28220     13 1E 46 F7 | 	zerox	local01, #19
28224     14 20 46 F0 | 	shr	local02, #20
28228     02 20 66 F0 | 	shl	local02, #2
2822c     ED 20 02 F1 | 	add	local02, __methods__
28230     10 21 02 FB | 	rdlong	local02, local02
28234     F2 22 02 F6 | 	mov	local03, objptr
28238     0F E5 01 F6 | 	mov	objptr, local01
2823c     2D 20 62 FD | 	call	local02
28240     11 E5 01 F6 | 	mov	objptr, local03
28244     01 FA 05 F6 | 	mov	result1, #1
28248     A7 F0 03 F6 | 	mov	ptra, fp
2824c     B2 00 A0 FD | 	call	#popregs_
28250                 | __struct___bas_wrap_sender_tx_ret
28250     2D 00 64 FD | 	ret
28254                 | 
28254                 | __struct___bas_wrap_sender_rx
28254     03 4A 05 F6 | 	mov	COUNT_, #3
28258     A8 00 A0 FD | 	call	#pushregs_
2825c     04 E4 05 F1 | 	add	objptr, #4
28260     F2 1E 02 FB | 	rdlong	local01, objptr
28264     0F 21 02 F6 | 	mov	local02, local01
28268     04 E4 85 F1 | 	sub	objptr, #4
2826c     13 20 46 F7 | 	zerox	local02, #19
28270     14 1E 46 F0 | 	shr	local01, #20
28274     02 1E 66 F0 | 	shl	local01, #2
28278     ED 1E 02 F1 | 	add	local01, __methods__
2827c     0F 1F 02 FB | 	rdlong	local01, local01
28280     F2 22 02 F6 | 	mov	local03, objptr
28284     10 E5 01 F6 | 	mov	objptr, local02
28288     2D 1E 62 FD | 	call	local01
2828c     11 E5 01 F6 | 	mov	objptr, local03
28290     A7 F0 03 F6 | 	mov	ptra, fp
28294     B2 00 A0 FD | 	call	#popregs_
28298                 | __struct___bas_wrap_sender_rx_ret
28298     2D 00 64 FD | 	ret
2829c                 | 
2829c                 | __struct___bas_wrap_sender_close
2829c     03 4A 05 F6 | 	mov	COUNT_, #3
282a0     A8 00 A0 FD | 	call	#pushregs_
282a4     08 E4 05 F1 | 	add	objptr, #8
282a8     F2 1E 02 FB | 	rdlong	local01, objptr
282ac     0F 21 02 F6 | 	mov	local02, local01
282b0     08 E4 85 F1 | 	sub	objptr, #8
282b4     13 20 46 F7 | 	zerox	local02, #19
282b8     14 1E 46 F0 | 	shr	local01, #20
282bc     02 1E 66 F0 | 	shl	local01, #2
282c0     ED 1E 02 F1 | 	add	local01, __methods__
282c4     0F 1F 02 FB | 	rdlong	local01, local01
282c8     F2 22 02 F6 | 	mov	local03, objptr
282cc     10 E5 01 F6 | 	mov	objptr, local02
282d0     2D 1E 62 FD | 	call	local01
282d4     11 E5 01 F6 | 	mov	objptr, local03
282d8     A7 F0 03 F6 | 	mov	ptra, fp
282dc     B2 00 A0 FD | 	call	#popregs_
282e0                 | __struct___bas_wrap_sender_close_ret
282e0     2D 00 64 FD | 	ret
282e4                 | 
282e4                 | LR__4250
282e4     2F          | 	byte	"/"
282e5     00          | 	byte	0
282e6                 | LR__4251
282e6     69 6E 66    | 	byte	"inf"
282e9     00          | 	byte	0
282ea                 | LR__4252
282ea     6E 61 6E    | 	byte	"nan"
282ed     00          | 	byte	0
282ee                 | LR__4253
282ee                 | 	byte	
282ee     00          | 	byte	0
282ef                 | LR__4254
282ef                 | 	byte	
282ef     00          | 	byte	0
282f0                 | LR__4255
282f0                 | 	byte	
282f0     00          | 	byte	0
282f1                 | LR__4256
282f1                 | 	byte	
282f1     00          | 	byte	0
282f2                 | LR__4257
282f2                 | 	byte	
282f2     00          | 	byte	0
282f3                 | LR__4258
282f3                 | 	byte	
282f3     00          | 	byte	0
282f4                 | LR__4259
282f4                 | 	byte	
282f4     00          | 	byte	0
282f5                 | LR__4260
282f5                 | 	byte	
282f5     00          | 	byte	0
282f6                 | LR__4261
282f6     00          | 	byte	0
282f7     00          | 	byte	0
282f8                 | LR__4262
282f8     00          | 	byte	0
282f9     00          | 	byte	0
282fa                 | LR__4263
282fa     00          | 	byte	0
282fb     00          | 	byte	0
282fc                 | LR__4264
282fc     20 21 21 21 
28300     20 63 6F 72 
28304     72 75 70 74 
28308     65 64 20 68 
2830c     65 61 70 3F 
28310     3F 3F 20 21 
28314     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
28317     00          | 	byte	0
28318                 | LR__4265
28318     20 21 21 21 
2831c     20 6F 75 74 
28320     20 6F 66 20 
28324     68 65 61 70 
28328     20 6D 65 6D 
2832c     6F 72 79 20 
28330     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
28334     00          | 	byte	0
28335                 | LR__4266
28335     20 21 21 21 
28339     20 63 6F 72 
2833d     72 75 70 74 
28341     65 64 20 68 
28345     65 61 70 20 
28349     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2834d     00          | 	byte	0
2834e                 | LR__4267
2834e     00          | 	byte	0
2834f     00          | 	byte	0
28350                 | LR__4268
28350     2E          | 	byte	"."
28351     00          | 	byte	0
28352                 | LR__4269
28352     00          | 	byte	0
28353     00          | 	byte	0
28354                 | LR__4270
28354     00          | 	byte	0
28355     00          | 	byte	0
28356                 | LR__4271
28356     00          | 	byte	0
28357     00          | 	byte	0
28358                 | LR__4272
28358     2A 3A 3C 3E 
2835c     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
28360     00          | 	byte	0
28361                 | LR__4273
28361     2B 2C 3B 3D 
28365     5B 5D       | 	byte	"+,;=[]"
28367     00          | 	byte	0
28368                 | LR__4274
28368     46 41 54 33 
2836c     32 20 20 20 | 	byte	"FAT32   "
28370     00          | 	byte	0
28371                 | LR__4275
28371     54 5A       | 	byte	"TZ"
28373     00          | 	byte	0
28374                 | LR__4276
28374     00          | 	byte	0
28375     00          | 	byte	0
28376                 | LR__4277
28376                 | 	byte	
28376     00          | 	byte	0
28377                 | LR__4278
28377                 | 	byte	
28377     00          | 	byte	0
28378                 | LR__4279
28378     22          | 	byte	34
28379     00          | 	byte	0
2837a                 | LR__4280
2837a     22          | 	byte	34
2837b     00          | 	byte	0
2837c                 | LR__4281
2837c     3A          | 	byte	":"
2837d     00          | 	byte	0
2837e                 | LR__4282
2837e                 | 	byte	
2837e     00          | 	byte	0
2837f                 | LR__4283
2837f                 | 	byte	
2837f     00          | 	byte	0
28380                 | LR__4284
28380                 | 	byte	
28380     00          | 	byte	0
28381                 | LR__4285
28381                 | 	byte	
28381     00          | 	byte	0
28382                 | LR__4286
28382                 | 	byte	
28382     00          | 	byte	0
28383                 | LR__4287
28383                 | 	byte	
28383     00          | 	byte	0
28384                 | LR__4288
28384                 | 	byte	
28384     00          | 	byte	0
28385                 | LR__4289
28385     22          | 	byte	34
28386     00          | 	byte	0
28387                 | LR__4290
28387     22          | 	byte	34
28388     00          | 	byte	0
28389                 | LR__4291
28389     22          | 	byte	34
2838a     00          | 	byte	0
2838b                 | LR__4292
2838b     22          | 	byte	34
2838c     00          | 	byte	0
2838d                 | LR__4293
2838d     22          | 	byte	34
2838e     00          | 	byte	0
2838f                 | LR__4294
2838f     3E          | 	byte	">"
28390     00          | 	byte	0
28391                 | LR__4295
28391     3E          | 	byte	">"
28392     00          | 	byte	0
28393                 | LR__4296
28393     2B          | 	byte	"+"
28394     00          | 	byte	0
28395                 | LR__4297
28395     2D          | 	byte	"-"
28396     00          | 	byte	0
28397                 | LR__4298
28397     2A          | 	byte	"*"
28398     00          | 	byte	0
28399                 | LR__4299
28399     2F          | 	byte	"/"
2839a     00          | 	byte	0
2839b                 | LR__4300
2839b     5E          | 	byte	"^"
2839c     00          | 	byte	0
2839d                 | LR__4301
2839d     3D          | 	byte	"="
2839e     00          | 	byte	0
2839f                 | LR__4302
2839f     2B          | 	byte	"+"
283a0     00          | 	byte	0
283a1                 | LR__4303
283a1     2B          | 	byte	"+"
283a2     00          | 	byte	0
283a3                 | LR__4304
283a3     2D          | 	byte	"-"
283a4     00          | 	byte	0
283a5                 | LR__4305
283a5     2D          | 	byte	"-"
283a6     00          | 	byte	0
283a7                 | LR__4306
283a7     3C          | 	byte	"<"
283a8     00          | 	byte	0
283a9                 | LR__4307
283a9     3E          | 	byte	">"
283aa     00          | 	byte	0
283ab                 | LR__4308
283ab     22          | 	byte	34
283ac     00          | 	byte	0
283ad                 | LR__4309
283ad     22          | 	byte	34
283ae     00          | 	byte	0
283af                 | LR__4310
283af     2E          | 	byte	"."
283b0     00          | 	byte	0
283b1                 | LR__4311
283b1     3F          | 	byte	"?"
283b2     00          | 	byte	0
283b3                 | LR__4312
283b3     3F          | 	byte	"?"
283b4     00          | 	byte	0
283b5                 | LR__4313
283b5     6D 6F 75 73 
283b9     65          | 	byte	"mouse"
283ba     00          | 	byte	0
283bb                 | LR__4314
283bb     63 75 72 73 
283bf     6F 72       | 	byte	"cursor"
283c1     00          | 	byte	0
283c2                 | LR__4315
283c2     63 6C 69 63 
283c6     6B          | 	byte	"click"
283c7     00          | 	byte	0
283c8                 | LR__4316
283c8     6F 6E       | 	byte	"on"
283ca     00          | 	byte	0
283cb                 | LR__4317
283cb     31          | 	byte	"1"
283cc     00          | 	byte	0
283cd                 | LR__4318
283cd     6F 66 66    | 	byte	"off"
283d0     00          | 	byte	0
283d1                 | LR__4319
283d1     30          | 	byte	"0"
283d2     00          | 	byte	0
283d3                 | LR__4320
283d3     6D 6F 64 65 | 	byte	"mode"
283d7     00          | 	byte	0
283d8                 | LR__4321
283d8     6D 2E       | 	byte	"m."
283da     00          | 	byte	0
283db                 | LR__4322
283db     61 74 61 72 
283df     69          | 	byte	"atari"
283e0     00          | 	byte	0
283e1                 | LR__4323
283e1     30          | 	byte	"0"
283e2     00          | 	byte	0
283e3                 | LR__4324
283e3     70 63 5F 61 
283e7     6D 62 65 72 | 	byte	"pc_amber"
283eb     00          | 	byte	0
283ec                 | LR__4325
283ec     31          | 	byte	"1"
283ed     00          | 	byte	0
283ee                 | LR__4326
283ee     70 63 5F 67 
283f2     72 65 65 6E | 	byte	"pc_green"
283f6     00          | 	byte	0
283f7                 | LR__4327
283f7     32          | 	byte	"2"
283f8     00          | 	byte	0
283f9                 | LR__4328
283f9     70 63 5F 77 
283fd     68 69 74 65 | 	byte	"pc_white"
28401     00          | 	byte	0
28402                 | LR__4329
28402     33          | 	byte	"3"
28403     00          | 	byte	0
28404                 | LR__4330
28404     73 74       | 	byte	"st"
28406     00          | 	byte	0
28407                 | LR__4331
28407     34          | 	byte	"4"
28408     00          | 	byte	0
28409                 | LR__4332
28409                 | 	byte	
28409     00          | 	byte	0
2840a                 | LR__4333
2840a     6C 6F 61 64 | 	byte	"load"
2840e     00          | 	byte	0
2840f                 | LR__4334
2840f     73 61 76 65 | 	byte	"save"
28413     00          | 	byte	0
28414                 | LR__4335
28414     62 72 75 6E | 	byte	"brun"
28418     00          | 	byte	0
28419                 | LR__4336
28419     6C 6F 2E    | 	byte	"lo."
2841c     00          | 	byte	0
2841d                 | LR__4337
2841d     73 2E       | 	byte	"s."
2841f     00          | 	byte	0
28420                 | LR__4338
28420     62 72 2E    | 	byte	"br."
28423     00          | 	byte	0
28424                 | LR__4339
28424                 | 	byte	
28424     00          | 	byte	0
28425                 | LR__4340
28425                 | 	byte	
28425     00          | 	byte	0
28426                 | LR__4341
28426                 | 	byte	
28426     00          | 	byte	0
28427                 | LR__4342
28427                 | 	byte	
28427     00          | 	byte	0
28428                 | LR__4343
28428     20 55 73 65 
2842c     72 20 66 75 
28430     6E 63 74 69 
28434     6F 6E 73 20 
28438     61 6E 64 20 
2843c     61 72 72 61 
28440     79 73 20 6E 
28444     6F 74 20 79 
28448     65 74 20 69 
2844c     6D 70 6C 65 
28450     6D 65 6E 74 
28454     65 64       | 	byte	" User functions and arrays not yet implemented"
28456     00          | 	byte	0
28457                 | LR__4344
28457                 | 	byte	
28457     00          | 	byte	0
28458                 | LR__4345
28458                 | 	byte	
28458     00          | 	byte	0
28459                 | LR__4346
28459     52 65 61 64 
2845d     79          | 	byte	"Ready"
2845e     00          | 	byte	0
2845f                 | LR__4347
2845f     2B          | 	byte	"+"
28460     00          | 	byte	0
28461                 | LR__4348
28461     2D          | 	byte	"-"
28462     00          | 	byte	0
28463                 | LR__4349
28463     6F 72       | 	byte	"or"
28465     00          | 	byte	0
28466                 | LR__4350
28466     78 6F 72    | 	byte	"xor"
28469     00          | 	byte	0
2846a                 | LR__4351
2846a     2A          | 	byte	"*"
2846b     00          | 	byte	0
2846c                 | LR__4352
2846c     2F          | 	byte	"/"
2846d     00          | 	byte	0
2846e                 | LR__4353
2846e     61 6E 64    | 	byte	"and"
28471     00          | 	byte	0
28472                 | LR__4354
28472     64 69 76    | 	byte	"div"
28475     00          | 	byte	0
28476                 | LR__4355
28476     6D 6F 64    | 	byte	"mod"
28479     00          | 	byte	0
2847a                 | LR__4356
2847a     73 68 6C    | 	byte	"shl"
2847d     00          | 	byte	0
2847e                 | LR__4357
2847e     73 68 72    | 	byte	"shr"
28481     00          | 	byte	0
28482                 | LR__4358
28482     5E          | 	byte	"^"
28483     00          | 	byte	0
28484                 | LR__4359
28484     6E 6F 74    | 	byte	"not"
28487     00          | 	byte	0
28488                 | LR__4360
28488     40          | 	byte	"@"
28489     00          | 	byte	0
2848a                 | LR__4361
2848a     3D          | 	byte	"="
2848b     00          | 	byte	0
2848c                 | LR__4362
2848c     3E 3D       | 	byte	">="
2848e     00          | 	byte	0
2848f                 | LR__4363
2848f     3C 3D       | 	byte	"<="
28491     00          | 	byte	0
28492                 | LR__4364
28492     3C          | 	byte	"<"
28493     00          | 	byte	0
28494                 | LR__4365
28494     3E          | 	byte	">"
28495     00          | 	byte	0
28496                 | LR__4366
28496     3C 3E       | 	byte	"<>"
28498     00          | 	byte	0
28499                 | LR__4367
28499     2B 2B       | 	byte	"++"
2849b     00          | 	byte	0
2849c                 | LR__4368
2849c     2D 2D       | 	byte	"--"
2849e     00          | 	byte	0
2849f                 | LR__4369
2849f     2B          | 	byte	"+"
284a0     00          | 	byte	0
284a1                 | LR__4370
284a1     2D          | 	byte	"-"
284a2     00          | 	byte	0
284a3                 | LR__4371
284a3     3D          | 	byte	"="
284a4     00          | 	byte	0
284a5                 | LR__4372
284a5     2C          | 	byte	","
284a6     00          | 	byte	0
284a7                 | LR__4373
284a7     2A          | 	byte	"*"
284a8     00          | 	byte	0
284a9                 | LR__4374
284a9     2F          | 	byte	"/"
284aa     00          | 	byte	0
284ab                 | LR__4375
284ab     3B          | 	byte	";"
284ac     00          | 	byte	0
284ad                 | LR__4376
284ad     22          | 	byte	34
284ae     00          | 	byte	0
284af                 | LR__4377
284af     5E          | 	byte	"^"
284b0     00          | 	byte	0
284b1                 | LR__4378
284b1     29          | 	byte	")"
284b2     00          | 	byte	0
284b3                 | LR__4379
284b3     28          | 	byte	"("
284b4     00          | 	byte	0
284b5                 | LR__4380
284b5     3A          | 	byte	":"
284b6     00          | 	byte	0
284b7                 | LR__4381
284b7     20          | 	byte	" "
284b8     00          | 	byte	0
284b9                 | LR__4382
284b9     3E          | 	byte	">"
284ba     00          | 	byte	0
284bb                 | LR__4383
284bb     3C          | 	byte	"<"
284bc     00          | 	byte	0
284bd                 | LR__4384
284bd     3D          | 	byte	"="
284be     00          | 	byte	0
284bf                 | LR__4385
284bf     62 65 65 70 | 	byte	"beep"
284c3     00          | 	byte	0
284c4                 | LR__4386
284c4     62 2E       | 	byte	"b."
284c6     00          | 	byte	0
284c7                 | LR__4387
284c7     62 6F 78    | 	byte	"box"
284ca     00          | 	byte	0
284cb                 | LR__4388
284cb     62 72 75 6E | 	byte	"brun"
284cf     00          | 	byte	0
284d0                 | LR__4389
284d0     62 72 2E    | 	byte	"br."
284d3     00          | 	byte	0
284d4                 | LR__4390
284d4     63 69 72 63 
284d8     6C 65       | 	byte	"circle"
284da     00          | 	byte	0
284db                 | LR__4391
284db     63 69 2E    | 	byte	"ci."
284de     00          | 	byte	0
284df                 | LR__4392
284df     63 6C 69 63 
284e3     6B          | 	byte	"click"
284e4     00          | 	byte	0
284e5                 | LR__4393
284e5     63 6C 73    | 	byte	"cls"
284e8     00          | 	byte	0
284e9                 | LR__4394
284e9     63 6F 6C 6F 
284ed     72          | 	byte	"color"
284ee     00          | 	byte	0
284ef                 | LR__4395
284ef     63 2E       | 	byte	"c."
284f1     00          | 	byte	0
284f2                 | LR__4396
284f2     63 73 61 76 
284f6     65          | 	byte	"csave"
284f7     00          | 	byte	0
284f8                 | LR__4397
284f8     63 73 2E    | 	byte	"cs."
284fb     00          | 	byte	0
284fc                 | LR__4398
284fc     63 75 72 73 
28500     6F 72       | 	byte	"cursor"
28502     00          | 	byte	0
28503                 | LR__4399
28503     64 65 66 73 
28507     6E 64       | 	byte	"defsnd"
28509     00          | 	byte	0
2850a                 | LR__4400
2850a     64 65 66 65 
2850e     6E 76       | 	byte	"defenv"
28510     00          | 	byte	0
28511                 | LR__4401
28511     64 65 66 73 
28515     70 72 69 74 
28519     65          | 	byte	"defsprite"
2851a     00          | 	byte	0
2851b                 | LR__4402
2851b     64 73 2E    | 	byte	"ds."
2851e     00          | 	byte	0
2851f                 | LR__4403
2851f     64 65 67    | 	byte	"deg"
28522     00          | 	byte	0
28523                 | LR__4404
28523     64 69 6D    | 	byte	"dim"
28526     00          | 	byte	0
28527                 | LR__4405
28527     64 69 72    | 	byte	"dir"
2852a     00          | 	byte	0
2852b                 | LR__4406
2852b     64 72 61 77 | 	byte	"draw"
2852f     00          | 	byte	0
28530                 | LR__4407
28530     64 72 2E    | 	byte	"dr."
28533     00          | 	byte	0
28534                 | LR__4408
28534     65 6C 73 65 | 	byte	"else"
28538     00          | 	byte	0
28539                 | LR__4409
28539     66 63 69 72 
2853d     63 6C 65    | 	byte	"fcircle"
28540     00          | 	byte	0
28541                 | LR__4410
28541     66 63 2E    | 	byte	"fc."
28544     00          | 	byte	0
28545                 | LR__4411
28545     66 69 6C 6C | 	byte	"fill"
28549     00          | 	byte	0
2854a                 | LR__4412
2854a     66 69 2E    | 	byte	"fi."
2854d     00          | 	byte	0
2854e                 | LR__4413
2854e     66 6F 6E 74 | 	byte	"font"
28552     00          | 	byte	0
28553                 | LR__4414
28553     66 6F 72    | 	byte	"for"
28556     00          | 	byte	0
28557                 | LR__4415
28557     66 2E       | 	byte	"f."
28559     00          | 	byte	0
2855a                 | LR__4416
2855a     66 72 61 6D 
2855e     65          | 	byte	"frame"
2855f     00          | 	byte	0
28560                 | LR__4417
28560     66 72 2E    | 	byte	"fr."
28563     00          | 	byte	0
28564                 | LR__4418
28564     67 6F 74 6F | 	byte	"goto"
28568     00          | 	byte	0
28569                 | LR__4419
28569     67 2E       | 	byte	"g."
2856b     00          | 	byte	0
2856c                 | LR__4420
2856c     69 66       | 	byte	"if"
2856e     00          | 	byte	0
2856f                 | LR__4421
2856f     69 6E 6B    | 	byte	"ink"
28572     00          | 	byte	0
28573                 | LR__4422
28573     69 2E       | 	byte	"i."
28575     00          | 	byte	0
28576                 | LR__4423
28576     69 6E 74    | 	byte	"int"
28579     00          | 	byte	0
2857a                 | LR__4424
2857a     6C 69 73 74 | 	byte	"list"
2857e     00          | 	byte	0
2857f                 | LR__4425
2857f     6C 2E       | 	byte	"l."
28581     00          | 	byte	0
28582                 | LR__4426
28582     6C 6F 61 64 | 	byte	"load"
28586     00          | 	byte	0
28587                 | LR__4427
28587     6C 6F 2E    | 	byte	"lo."
2858a     00          | 	byte	0
2858b                 | LR__4428
2858b     6D 6F 64 65 | 	byte	"mode"
2858f     00          | 	byte	0
28590                 | LR__4429
28590     6D 2E       | 	byte	"m."
28592     00          | 	byte	0
28593                 | LR__4430
28593     6D 6F 75 73 
28597     65          | 	byte	"mouse"
28598     00          | 	byte	0
28599                 | LR__4431
28599     6E 65 77    | 	byte	"new"
2859c     00          | 	byte	0
2859d                 | LR__4432
2859d     6E 65 78 74 | 	byte	"next"
285a1     00          | 	byte	0
285a2                 | LR__4433
285a2     6E 2E       | 	byte	"n."
285a4     00          | 	byte	0
285a5                 | LR__4434
285a5     70 61 70 65 
285a9     72          | 	byte	"paper"
285aa     00          | 	byte	0
285ab                 | LR__4435
285ab     70 2E       | 	byte	"p."
285ad     00          | 	byte	0
285ae                 | LR__4436
285ae     70 69 6E 66 
285b2     6C 6F 61 74 | 	byte	"pinfloat"
285b6     00          | 	byte	0
285b7                 | LR__4437
285b7     70 69 6E 68 
285bb     69          | 	byte	"pinhi"
285bc     00          | 	byte	0
285bd                 | LR__4438
285bd     70 69 6E 6C 
285c1     6F          | 	byte	"pinlo"
285c2     00          | 	byte	0
285c3                 | LR__4439
285c3     70 69 6E 73 
285c7     74 61 72 74 | 	byte	"pinstart"
285cb     00          | 	byte	0
285cc                 | LR__4440
285cc     70 69 6E 74 
285d0     6F 67 67 6C 
285d4     65          | 	byte	"pintoggle"
285d5     00          | 	byte	0
285d6                 | LR__4441
285d6     70 69 6E 77 
285da     72 69 74 65 | 	byte	"pinwrite"
285de     00          | 	byte	0
285df                 | LR__4442
285df     70 6C 61 79 | 	byte	"play"
285e3     00          | 	byte	0
285e4                 | LR__4443
285e4     70 6C 6F 74 | 	byte	"plot"
285e8     00          | 	byte	0
285e9                 | LR__4444
285e9     70 6C 2E    | 	byte	"pl."
285ec     00          | 	byte	0
285ed                 | LR__4445
285ed     70 6F 73 69 
285f1     74 69 6F 6E | 	byte	"position"
285f5     00          | 	byte	0
285f6                 | LR__4446
285f6     70 6F 73 2E | 	byte	"pos."
285fa     00          | 	byte	0
285fb                 | LR__4447
285fb     70 72 69 6E 
285ff     74          | 	byte	"print"
28600     00          | 	byte	0
28601                 | LR__4448
28601     3F          | 	byte	"?"
28602     00          | 	byte	0
28603                 | LR__4449
28603     72 61 64    | 	byte	"rad"
28606     00          | 	byte	0
28607                 | LR__4450
28607     72 75 6E    | 	byte	"run"
2860a     00          | 	byte	0
2860b                 | LR__4451
2860b     73 61 76 65 | 	byte	"save"
2860f     00          | 	byte	0
28610                 | LR__4452
28610     73 2E       | 	byte	"s."
28612     00          | 	byte	0
28613                 | LR__4453
28613     73 70 72 69 
28617     74 65       | 	byte	"sprite"
28619     00          | 	byte	0
2861a                 | LR__4454
2861a     73 70 2E    | 	byte	"sp."
2861d     00          | 	byte	0
2861e                 | LR__4455
2861e     74 68 65 6E | 	byte	"then"
28622     00          | 	byte	0
28623                 | LR__4456
28623     77 61 69 74 
28627     6D 73       | 	byte	"waitms"
28629     00          | 	byte	0
2862a                 | LR__4457
2862a     77 61 69 74 
2862e     63 6C 6F 63 
28632     6B          | 	byte	"waitclock"
28633     00          | 	byte	0
28634                 | LR__4458
28634     77 63 2E    | 	byte	"wc."
28637     00          | 	byte	0
28638                 | LR__4459
28638     77 61 69 74 
2863c     76 62 6C    | 	byte	"waitvbl"
2863f     00          | 	byte	0
28640                 | LR__4460
28640     77 76 2E    | 	byte	"wv."
28643     00          | 	byte	0
28644                 | LR__4461
28644     77 78 70 69 
28648     6E          | 	byte	"wxpin"
28649     00          | 	byte	0
2864a                 | LR__4462
2864a     77 79 70 69 
2864e     6E          | 	byte	"wypin"
2864f     00          | 	byte	0
28650                 | LR__4463
28650     61 63 6F 73 | 	byte	"acos"
28654     00          | 	byte	0
28655                 | LR__4464
28655     61 73 69 6E | 	byte	"asin"
28659     00          | 	byte	0
2865a                 | LR__4465
2865a     61 74 6E    | 	byte	"atn"
2865d     00          | 	byte	0
2865e                 | LR__4466
2865e     63 6F 73    | 	byte	"cos"
28661     00          | 	byte	0
28662                 | LR__4467
28662     67 65 74 70 
28666     69 78 65 6C | 	byte	"getpixel"
2866a     00          | 	byte	0
2866b                 | LR__4468
2866b     67 65 2E    | 	byte	"ge."
2866e     00          | 	byte	0
2866f                 | LR__4469
2866f     67 65 74 74 
28673     69 6D 65    | 	byte	"gettime"
28676     00          | 	byte	0
28677                 | LR__4470
28677     6D 6F 75 73 
2867b     65 6B       | 	byte	"mousek"
2867d     00          | 	byte	0
2867e                 | LR__4471
2867e     6D 6F 75 73 
28682     65 77       | 	byte	"mousew"
28684     00          | 	byte	0
28685                 | LR__4472
28685     6D 6F 75 73 
28689     65 78       | 	byte	"mousex"
2868b     00          | 	byte	0
2868c                 | LR__4473
2868c     6D 6F 75 73 
28690     65 79       | 	byte	"mousey"
28692     00          | 	byte	0
28693                 | LR__4474
28693     70 69 6E 72 
28697     65 61 64    | 	byte	"pinread"
2869a     00          | 	byte	0
2869b                 | LR__4475
2869b     72 64 70 69 
2869f     6E          | 	byte	"rdpin"
286a0     00          | 	byte	0
286a1                 | LR__4476
286a1     72 71 70 69 
286a5     6E          | 	byte	"rqpin"
286a6     00          | 	byte	0
286a7                 | LR__4477
286a7     72 6E 64    | 	byte	"rnd"
286aa     00          | 	byte	0
286ab                 | LR__4478
286ab     73 69 6E    | 	byte	"sin"
286ae     00          | 	byte	0
286af                 | LR__4479
286af     73 71 72    | 	byte	"sqr"
286b2     00          | 	byte	0
286b3                 | LR__4480
286b3     73 74 69 63 
286b7     6B          | 	byte	"stick"
286b8     00          | 	byte	0
286b9                 | LR__4481
286b9     73 74 72 69 
286bd     67          | 	byte	"strig"
286be     00          | 	byte	0
286bf                 | LR__4482
286bf     74 61 6E    | 	byte	"tan"
286c2     00          | 	byte	0
286c3                 | LR__4483
286c3     61          | 	byte	"a"
286c4     00          | 	byte	0
286c5                 | LR__4484
286c5     7A          | 	byte	"z"
286c6     00          | 	byte	0
286c7                 | LR__4485
286c7     5F          | 	byte	"_"
286c8     00          | 	byte	0
286c9                 | LR__4486
286c9     61          | 	byte	"a"
286ca     00          | 	byte	0
286cb                 | LR__4487
286cb     7A          | 	byte	"z"
286cc     00          | 	byte	0
286cd                 | LR__4488
286cd     30          | 	byte	"0"
286ce     00          | 	byte	0
286cf                 | LR__4489
286cf     39          | 	byte	"9"
286d0     00          | 	byte	0
286d1                 | LR__4490
286d1     5F          | 	byte	"_"
286d2     00          | 	byte	0
286d3                 | LR__4491
286d3     2E          | 	byte	"."
286d4     00          | 	byte	0
286d5                 | LR__4492
286d5     61          | 	byte	"a"
286d6     00          | 	byte	0
286d7                 | LR__4493
286d7     7A          | 	byte	"z"
286d8     00          | 	byte	0
286d9                 | LR__4494
286d9     30          | 	byte	"0"
286da     00          | 	byte	0
286db                 | LR__4495
286db     39          | 	byte	"9"
286dc     00          | 	byte	0
286dd                 | LR__4496
286dd     5F          | 	byte	"_"
286de     00          | 	byte	0
286df                 | LR__4497
286df     24          | 	byte	"$"
286e0     00          | 	byte	0
286e1                 | LR__4498
286e1     25          | 	byte	"%"
286e2     00          | 	byte	0
286e3                 | LR__4499
286e3     21          | 	byte	"!"
286e4     00          | 	byte	0
286e5                 | LR__4500
286e5     30          | 	byte	"0"
286e6     00          | 	byte	0
286e7                 | LR__4501
286e7     39          | 	byte	"9"
286e8     00          | 	byte	0
286e9                 | LR__4502
286e9     2E          | 	byte	"."
286ea     00          | 	byte	0
286eb                 | LR__4503
286eb     24          | 	byte	"$"
286ec     00          | 	byte	0
286ed                 | LR__4504
286ed     25          | 	byte	"%"
286ee     00          | 	byte	0
286ef                 | LR__4505
286ef     2D          | 	byte	"-"
286f0     00          | 	byte	0
286f1                 | LR__4506
286f1     2E          | 	byte	"."
286f2     00          | 	byte	0
286f3                 | LR__4507
286f3     30          | 	byte	"0"
286f4     00          | 	byte	0
286f5                 | LR__4508
286f5     39          | 	byte	"9"
286f6     00          | 	byte	0
286f7                 | LR__4509
286f7     5F          | 	byte	"_"
286f8     00          | 	byte	0
286f9                 | LR__4510
286f9     2E          | 	byte	"."
286fa     00          | 	byte	0
286fb                 | LR__4511
286fb     45          | 	byte	"E"
286fc     00          | 	byte	0
286fd                 | LR__4512
286fd     65          | 	byte	"e"
286fe     00          | 	byte	0
286ff                 | LR__4513
286ff     2D          | 	byte	"-"
28700     00          | 	byte	0
28701                 | LR__4514
28701     2D          | 	byte	"-"
28702     00          | 	byte	0
28703                 | LR__4515
28703     65          | 	byte	"e"
28704     00          | 	byte	0
28705                 | LR__4516
28705     2E          | 	byte	"."
28706     00          | 	byte	0
28707                 | LR__4517
28707     45          | 	byte	"E"
28708     00          | 	byte	0
28709                 | LR__4518
28709     65          | 	byte	"e"
2870a     00          | 	byte	0
2870b                 | LR__4519
2870b     30          | 	byte	"0"
2870c     00          | 	byte	0
2870d                 | LR__4520
2870d     39          | 	byte	"9"
2870e     00          | 	byte	0
2870f                 | LR__4521
2870f     24          | 	byte	"$"
28710     00          | 	byte	0
28711                 | LR__4522
28711     25          | 	byte	"%"
28712     00          | 	byte	0
28713                 | LR__4523
28713     2D          | 	byte	"-"
28714     00          | 	byte	0
28715                 | LR__4524
28715     30          | 	byte	"0"
28716     00          | 	byte	0
28717                 | LR__4525
28717     39          | 	byte	"9"
28718     00          | 	byte	0
28719                 | LR__4526
28719     5F          | 	byte	"_"
2871a     00          | 	byte	0
2871b                 | LR__4527
2871b     30          | 	byte	"0"
2871c     00          | 	byte	0
2871d                 | LR__4528
2871d     39          | 	byte	"9"
2871e     00          | 	byte	0
2871f                 | LR__4529
2871f     5F          | 	byte	"_"
28720     00          | 	byte	0
28721                 | LR__4530
28721     22          | 	byte	34
28722     00          | 	byte	0
28723                 | LR__4531
28723     22          | 	byte	34
28724     00          | 	byte	0
28725                 | LR__4532
28725     44 69 6D 3A 
28729     20 61 74 20 
2872d     6C 69 6E 65 
28731     20          | 	byte	"Dim: at line "
28732     00          | 	byte	0
28733                 | LR__4533
28733     3A 20 77 61 
28737     72 6E 69 6E 
2873b     67 3A 20 74 
2873f     68 65 20 76 
28743     61 72 69 61 
28747     62 6C 65 20 
2874b     65 78 69 73 
2874f     74 65 64 2E | 	byte	": warning: the variable existed."
28753     00          | 	byte	0
28754                 | LR__4534
28754     28          | 	byte	"("
28755     00          | 	byte	0
28756                 | LR__4535
28756     61 73       | 	byte	"as"
28758     00          | 	byte	0
28759                 | LR__4536
28759     61 73       | 	byte	"as"
2875b     00          | 	byte	0
2875c                 | LR__4537
2875c     2C          | 	byte	","
2875d     00          | 	byte	0
2875e                 | LR__4538
2875e     29          | 	byte	")"
2875f     00          | 	byte	0
28760                 | LR__4539
28760     29          | 	byte	")"
28761     00          | 	byte	0
28762                 | LR__4540
28762     61 73       | 	byte	"as"
28764     00          | 	byte	0
28765                 | LR__4541
28765     62 79 74 65 | 	byte	"byte"
28769     00          | 	byte	0
2876a                 | LR__4542
2876a     75 62 79 74 
2876e     65          | 	byte	"ubyte"
2876f     00          | 	byte	0
28770                 | LR__4543
28770     73 68 6F 72 
28774     74          | 	byte	"short"
28775     00          | 	byte	0
28776                 | LR__4544
28776     75 73 68 6F 
2877a     72 74       | 	byte	"ushort"
2877c     00          | 	byte	0
2877d                 | LR__4545
2877d     6C 6F 6E 67 | 	byte	"long"
28781     00          | 	byte	0
28782                 | LR__4546
28782     69 6E 74 65 
28786     67 65 72    | 	byte	"integer"
28789     00          | 	byte	0
2878a                 | LR__4547
2878a     75 6C 6F 6E 
2878e     67          | 	byte	"ulong"
2878f     00          | 	byte	0
28790                 | LR__4548
28790     69 6E 74 36 
28794     34          | 	byte	"int64"
28795     00          | 	byte	0
28796                 | LR__4549
28796     75 69 6E 74 
2879a     36 34       | 	byte	"uint64"
2879c     00          | 	byte	0
2879d                 | LR__4550
2879d     73 69 6E 67 
287a1     6C 65       | 	byte	"single"
287a3     00          | 	byte	0
287a4                 | LR__4551
287a4     64 6F 75 62 
287a8     6C 65       | 	byte	"double"
287aa     00          | 	byte	0
287ab                 | LR__4552
287ab     73 74 72 69 
287af     6E 67       | 	byte	"string"
287b1     00          | 	byte	0
287b2                 | LR__4553
287b2     74 6F       | 	byte	"to"
287b4     00          | 	byte	0
287b5                 | LR__4554
287b5     73 74 65 70 | 	byte	"step"
287b9     00          | 	byte	0
287ba                 | LR__4555
287ba     73 2E       | 	byte	"s."
287bc     00          | 	byte	0
287bd                 | LR__4556
287bd     57 65 20 68 
287c1     61 76 65 20 
287c5     61 20 73 6C 
287c9     6F 77 20 67 
287cd     6F 74 6F 2C 
287d1     20 74 6F 64 
287d5     6F 20 20    | 	byte	"We have a slow goto, todo  "
287d8     00          | 	byte	0
287d9                 | LR__4557
287d9     6E 6F 6E 61 
287dd     6D 65 2E 62 
287e1     61 73       | 	byte	"noname.bas"
287e3     00          | 	byte	0
287e4                 | LR__4558
287e4                 | 	byte	
287e4     00          | 	byte	0
287e5                 | LR__4559
287e5     6E 6F 6E 61 
287e9     6D 65 2E 62 
287ed     61 73       | 	byte	"noname.bas"
287ef     00          | 	byte	0
287f0                 | LR__4560
287f0     2F          | 	byte	"/"
287f1     00          | 	byte	0
287f2                 | LR__4561
287f2                 | 	byte	
287f2     00          | 	byte	0
287f3                 | LR__4562
287f3                 | 	byte	
287f3     00          | 	byte	0
287f4                 | LR__4563
287f4     6E 6F 6E 61 
287f8     6D 65 2E 62 
287fc     61 73       | 	byte	"noname.bas"
287fe     00          | 	byte	0
287ff                 | LR__4564
287ff     2F          | 	byte	"/"
28800     00          | 	byte	0
28801                 | LR__4565
28801     53 79 73 74 
28805     65 6D 20 65 
28809     72 72 6F 72 
2880d     20          | 	byte	"System error "
2880e     00          | 	byte	0
2880f                 | LR__4566
2880f     3A 20       | 	byte	": "
28811     00          | 	byte	0
28812                 | LR__4567
28812     2F          | 	byte	"/"
28813     00          | 	byte	0
28814                 | LR__4568
28814     30          | 	byte	"0"
28815     00          | 	byte	0
28816                 | LR__4569
28816     39          | 	byte	"9"
28817     00          | 	byte	0
28818                 | LR__4570
28818                 | 	byte	
28818     00          | 	byte	0
28819                 | LR__4571
28819     53 74 6F 70 
2881d     70 65 64 20 
28821     61 74 20 6C 
28825     69 6E 65 20 | 	byte	"Stopped at line "
28829     00          | 	byte	0
2882a                 | LR__4572
2882a                 | 	byte	
2882a     00          | 	byte	0
2882b                 | LR__4573
2882b                 | 	byte	
2882b     00          | 	byte	0
2882c                 | LR__4574
2882c     2F 73 64 2F 
28830     6D 65 64 69 
28834     61 2F 68 2F | 	byte	"/sd/media/h/"
28838     00          | 	byte	0
28839                 | LR__4575
28839     53 79 73 74 
2883d     65 6D 20 65 
28841     72 72 6F 72 
28845     20          | 	byte	"System error "
28846     00          | 	byte	0
28847                 | LR__4576
28847     3A 20       | 	byte	": "
28849     00          | 	byte	0
2884a                 | LR__4577
2884a                 | 	byte	
2884a     00          | 	byte	0
2884b                 | LR__4578
2884b                 | 	byte	
2884b     00          | 	byte	0
2884c                 | LR__4579
2884c     2F 73 64 2F 
28850     6D 65 64 69 
28854     61 2F 73 2F | 	byte	"/sd/media/s/"
28858     00          | 	byte	0
28859                 | LR__4580
28859     53 79 73 74 
2885d     65 6D 20 65 
28861     72 72 6F 72 
28865     20          | 	byte	"System error "
28866     00          | 	byte	0
28867                 | LR__4581
28867     3A 20       | 	byte	": "
28869     00          | 	byte	0
2886a                 | LR__4582
2886a     45 72 72 6F 
2886e     72 20       | 	byte	"Error "
28870     00          | 	byte	0
28871                 | LR__4583
28871     3A 20       | 	byte	": "
28873     00          | 	byte	0
28874                 | LR__4584
28874                 | 	byte	
28874     00          | 	byte	0
28875                 | LR__4585
28875     72 6E 64 3A 
28879     20          | 	byte	"rnd: "
2887a     00          | 	byte	0
2887b                 | LR__4586
2887b     72 6E 64 3A 
2887f     20          | 	byte	"rnd: "
28880     00          | 	byte	0
28881                 | LR__4587
28881     73 69 6E 3A 
28885     20          | 	byte	"sin: "
28886     00          | 	byte	0
28887                 | LR__4588
28887     63 6F 73 3A 
2888b     20          | 	byte	"cos: "
2888c     00          | 	byte	0
2888d                 | LR__4589
2888d     74 61 6E 3A 
28891     20          | 	byte	"tan: "
28892     00          | 	byte	0
28893                 | LR__4590
28893     61 73 69 6E 
28897     3A 20       | 	byte	"asin: "
28899     00          | 	byte	0
2889a                 | LR__4591
2889a     61 63 6F 73 
2889e     3A 20       | 	byte	"acos: "
288a0     00          | 	byte	0
288a1                 | LR__4592
288a1     61 74 6E 3A 
288a5     20          | 	byte	"atn: "
288a6     00          | 	byte	0
288a7                 | LR__4593
288a7     73 71 72 3A 
288ab     20          | 	byte	"sqr: "
288ac     00          | 	byte	0
288ad                 | LR__4594
288ad     73 74 69 63 
288b1     6B 3A 20    | 	byte	"stick: "
288b4     00          | 	byte	0
288b5                 | LR__4595
288b5     73 74 72 69 
288b9     67 3A 20    | 	byte	"strig: "
288bc     00          | 	byte	0
288bd                 | LR__4596
288bd     67 65 74 70 
288c1     69 78 65 6C 
288c5     3A 20       | 	byte	"getpixel: "
288c7     00          | 	byte	0
288c8                 | LR__4597
288c8                 | 	byte	
288c8     00          | 	byte	0
288c9                 | LR__4598
288c9     2F 73 64 2F 
288cd     62 61 73    | 	byte	"/sd/bas"
288d0     00          | 	byte	0
288d1                 | LR__4599
288d1     57 6F 72 6B 
288d5     69 6E 67 20 
288d9     64 69 72 65 
288dd     63 74 6F 72 
288e1     79 3A 20    | 	byte	"Working directory: "
288e4     00          | 	byte	0
288e5                 | LR__4600
288e5     2A          | 	byte	"*"
288e6     00          | 	byte	0
288e7                 | LR__4601
288e7                 | 	byte	
288e7     00          | 	byte	0
288e8                 | LR__4602
288e8     5B 64 69 72 
288ec     5D 20       | 	byte	"[dir] "
288ee     00          | 	byte	0
288ef                 | LR__4603
288ef     2A          | 	byte	"*"
288f0     00          | 	byte	0
288f1                 | LR__4604
288f1                 | 	byte	
288f1     00          | 	byte	0
288f2                 | LR__4605
288f2     2D 2D 2D 2D 
288f6     2D 6D 6F 72 
288fa     65 2C 20 70 
288fe     72 65 73 73 
28902     20 61 6E 79 
28906     20 6B 65 79 | 	byte	"-----more, press any key"
2890a     00          | 	byte	0
2890b                 | LR__4606
2890b     20 20 20 20 
      ...             
28923     20 20 20 20 
28927     20          | 	byte	"                             "
28928     00          | 	byte	0
28929                 | LR__4607
28929     2F          | 	byte	"/"
2892a     00          | 	byte	0
2892b                 | LR__4608
2892b     2F 73 64 2F 
2892f     62 69 6E 2F | 	byte	"/sd/bin/"
28933     00          | 	byte	0
28934                 | LR__4609
28934     53 79 73 74 
28938     65 6D 20 65 
2893c     72 72 6F 72 
28940     20          | 	byte	"System error "
28941     00          | 	byte	0
28942                 | LR__4610
28942     3A 20       | 	byte	": "
28944     00          | 	byte	0
28945                 | LR__4611
28945                 | 	byte	
28945     00          | 	byte	0
28946                 | LR__4612
28946     45 78 70 65 
2894a     63 74 65 64 
2894e     20 6E 75 6D 
28952     62 65 72 2C 
28956     20 67 6F 74 
2895a     20 73 6F 6D 
2895e     65 74 68 69 
28962     6E 67 20 65 
28966     6C 73 65 2E | 	byte	"Expected number, got something else."
2896a     00          | 	byte	0
2896b                 | LR__4613
2896b     43 61 6E 6E 
2896f     6F 74 20 61 
28973     64 64 20 61 
28977     20 6E 75 6D 
2897b     62 65 72 20 
2897f     74 6F 20 61 
28983     20 73 74 72 
28987     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2898b     00          | 	byte	0
2898c                 | LR__4614
2898c     43 61 6E 6E 
28990     6F 74 20 73 
28994     75 62 73 74 
28998     72 61 63 74 
2899c     20 73 74 72 
289a0     69 6E 67 73 
289a4     2E          | 	byte	"Cannot substract strings."
289a5     00          | 	byte	0
289a6                 | LR__4615
289a6     55 6E 6B 6E 
289aa     6F 77 6E 20 
289ae     65 72 72 6F 
289b2     72 20 77 68 
289b6     69 6C 65 20 
289ba     61 64 64 69 
289be     6E 67 2E    | 	byte	"Unknown error while adding."
289c1     00          | 	byte	0
289c2                 | LR__4616
289c2     55 6E 6B 6E 
289c6     6F 77 6E 20 
289ca     65 72 72 6F 
289ce     72 20 77 68 
289d2     69 6C 65 20 
289d6     73 75 62 73 
289da     74 72 61 63 
289de     74 69 6E 67 
289e2     2E          | 	byte	"Unknown error while substracting."
289e3     00          | 	byte	0
289e4                 | LR__4617
289e4     43 61 6E 6E 
289e8     6F 74 20 64 
289ec     6F 20 6C 6F 
289f0     67 69 63 20 
289f4     6F 70 65 72 
289f8     61 74 69 6F 
289fc     6E 20 6F 6E 
28a00     20 73 74 72 
28a04     69 6E 67 20 
28a08     6F 72 20 66 
28a0c     6C 6F 61 74 
28a10     2E          | 	byte	"Cannot do logic operation on string or float."
28a11     00          | 	byte	0
28a12                 | LR__4618
28a12     55 6E 6B 6E 
28a16     6F 77 6E 20 
28a1a     65 72 72 6F 
28a1e     72 20 77 68 
28a22     69 6C 65 20 
28a26     64 6F 69 6E 
28a2a     67 20 6C 6F 
28a2e     67 69 63 20 
28a32     6F 70 65 72 
28a36     61 74 69 6F 
28a3a     6E 2E       | 	byte	"Unknown error while doing logic operation."
28a3c     00          | 	byte	0
28a3d                 | LR__4619
28a3d     43 61 6E 6E 
28a41     6F 74 20 6D 
28a45     75 6C 74 69 
28a49     70 6C 79 20 
28a4d     73 74 72 69 
28a51     6E 67 73 2E | 	byte	"Cannot multiply strings."
28a55     00          | 	byte	0
28a56                 | LR__4620
28a56     55 6E 6B 6E 
28a5a     6F 77 6E 20 
28a5e     65 72 72 6F 
28a62     72 20 77 68 
28a66     69 6C 65 20 
28a6a     6D 75 6C 74 
28a6e     69 70 6C 79 
28a72     69 6E 67 2E | 	byte	"Unknown error while multiplying."
28a76     00          | 	byte	0
28a77                 | LR__4621
28a77     43 61 6E 6E 
28a7b     6F 74 20 64 
28a7f     69 76 69 64 
28a83     65 20 73 74 
28a87     72 69 6E 67 
28a8b     73 2E       | 	byte	"Cannot divide strings."
28a8d     00          | 	byte	0
28a8e                 | LR__4622
28a8e     55 6E 6B 6E 
28a92     6F 77 6E 20 
28a96     65 72 72 6F 
28a9a     72 20 77 68 
28a9e     69 6C 65 20 
28aa2     64 69 76 69 
28aa6     64 69 6E 67 
28aaa     2E          | 	byte	"Unknown error while dividing."
28aab     00          | 	byte	0
28aac                 | LR__4623
28aac     43 61 6E 6E 
28ab0     6F 74 20 63 
28ab4     6F 6D 70 75 
28ab8     74 65 20 61 
28abc     20 70 6F 77 
28ac0     65 72 20 6F 
28ac4     66 20 61 20 
28ac8     73 74 72 69 
28acc     6E 67 2E    | 	byte	"Cannot compute a power of a string."
28acf     00          | 	byte	0
28ad0                 | LR__4624
28ad0     55 6E 6B 6E 
28ad4     6F 77 6E 20 
28ad8     65 72 72 6F 
28adc     72 20 77 68 
28ae0     69 6C 65 20 
28ae4     63 6F 6D 70 
28ae8     75 74 69 6E 
28aec     67 20 61 20 
28af0     70 6F 77 65 
28af4     72 2E       | 	byte	"Unknown error while computing a power."
28af6     00          | 	byte	0
28af7                 | LR__4625
28af7     52 69 67 68 
28afb     74 20 70 61 
28aff     72 65 6E 74 
28b03     68 65 73 69 
28b07     73 20 65 78 
28b0b     70 65 63 74 
28b0f     65 64 2E    | 	byte	"Right parenthesis expected."
28b12     00          | 	byte	0
28b13                 | LR__4626
28b13     45 78 70 65 
28b17     63 74 65 64 
28b1b     20 73 74 72 
28b1f     69 6E 67 2E | 	byte	"Expected string."
28b23     00          | 	byte	0
28b24                 | LR__4627
28b24     45 78 70 65 
28b28     63 74 65 64 
28b2c     20 66 6C 6F 
28b30     61 74 2E    | 	byte	"Expected float."
28b33     00          | 	byte	0
28b34                 | LR__4628
28b34     45 78 70 65 
28b38     63 74 65 64 
28b3c     20 75 6E 73 
28b40     69 67 6E 65 
28b44     64 20 69 6E 
28b48     74 65 67 65 
28b4c     72 2E       | 	byte	"Expected unsigned integer."
28b4e     00          | 	byte	0
28b4f                 | LR__4629
28b4f     45 78 70 65 
28b53     63 74 65 64 
28b57     20 69 6E 74 
28b5b     65 67 65 72 
28b5f     2E          | 	byte	"Expected integer."
28b60     00          | 	byte	0
28b61                 | LR__4630
28b61     4E 6F 20 6D 
28b65     6F 72 65 20 
28b69     76 61 72 69 
28b6d     61 62 6C 65 
28b71     20 73 6C 6F 
28b75     74 73 2E    | 	byte	"No more variable slots."
28b78     00          | 	byte	0
28b79                 | LR__4631
28b79     56 61 72 69 
28b7d     61 62 6C 65 
28b81     20 6E 6F 74 
28b85     20 66 6F 75 
28b89     6E 64 2E    | 	byte	"Variable not found."
28b8c     00          | 	byte	0
28b8d                 | LR__4632
28b8d     43 6F 6D 6D 
28b91     61 20 65 78 
28b95     70 65 63 74 
28b99     65 64 2E    | 	byte	"Comma expected."
28b9c     00          | 	byte	0
28b9d                 | LR__4633
28b9d     43 6F 6D 6D 
28ba1     61 20 6F 72 
28ba5     20 73 65 6D 
28ba9     69 63 6F 6C 
28bad     6F 6E 20 65 
28bb1     78 70 65 63 
28bb5     74 65 64 2E | 	byte	"Comma or semicolon expected."
28bb9     00          | 	byte	0
28bba                 | LR__4634
28bba     55 6E 6B 6E 
28bbe     6F 77 6E 20 
28bc2     63 6F 6D 6D 
28bc6     61 6E 64 2E | 	byte	"Unknown command."
28bca     00          | 	byte	0
28bcb                 | LR__4635
28bcb     53 74 61 63 
28bcf     6B 20 75 6E 
28bd3     64 65 72 66 
28bd7     6C 6F 77 2E | 	byte	"Stack underflow."
28bdb     00          | 	byte	0
28bdc                 | LR__4636
28bdc     43 61 6E 6E 
28be0     6F 74 20 65 
28be4     78 65 63 75 
28be8     74 65 20 67 
28bec     6F 74 6F 20 
28bf0     69 6E 20 74 
28bf4     68 65 20 69 
28bf8     6D 6D 65 64 
28bfc     69 61 74 65 
28c00     20 6D 6F 64 
28c04     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
28c06     00          | 	byte	0
28c07                 | LR__4637
28c07     43 61 6E 6E 
28c0b     6F 74 20 6C 
28c0f     6F 61 64 20 
28c13     66 72 6F 6D 
28c17     20 74 68 69 
28c1b     73 20 66 69 
28c1f     6C 65 2E    | 	byte	"Cannot load from this file."
28c22     00          | 	byte	0
28c23                 | LR__4638
28c23     54 68 65 20 
28c27     70 72 6F 67 
28c2b     72 61 6D 20 
28c2f     69 73 20 65 
28c33     6D 70 74 79 
28c37     2E          | 	byte	"The program is empty."
28c38     00          | 	byte	0
28c39                 | LR__4639
28c39     49 66 20 61 
28c3d     66 74 65 72 
28c41     20 69 66 2E | 	byte	"If after if."
28c45     00          | 	byte	0
28c46                 | LR__4640
28c46     45 6D 70 74 
28c4a     79 20 65 78 
28c4e     70 72 65 73 
28c52     73 69 6F 6E 
28c56     2E          | 	byte	"Empty expression."
28c57     00          | 	byte	0
28c58                 | LR__4641
28c58     53 74 72 69 
28c5c     6E 67 20 65 
28c60     78 70 65 63 
28c64     74 65 64 2E | 	byte	"String expected."
28c68     00          | 	byte	0
28c69                 | LR__4642
28c69     49 6E 74 65 
28c6d     72 70 72 65 
28c71     74 65 72 20 
28c75     69 6E 74 65 
28c79     72 6E 61 6C 
28c7d     20 65 72 72 
28c81     6F 72 2E    | 	byte	"Interpreter internal error."
28c84     00          | 	byte	0
28c85                 | LR__4643
28c85     45 78 70 65 
28c89     63 74 65 64 
28c8d     20 61 73 73 
28c91     69 67 6E 2E | 	byte	"Expected assign."
28c95     00          | 	byte	0
28c96                 | LR__4644
28c96     45 78 70 65 
28c9a     63 74 65 64 
28c9e     20 27 74 6F 
28ca2     27 2E       | 	byte	"Expected 'to'."
28ca4     00          | 	byte	0
28ca5                 | LR__4645
28ca5     45 78 70 65 
28ca9     63 74 65 64 
28cad     20 69 6E 74 
28cb1     65 67 65 72 
28cb5     20 76 61 72 
28cb9     69 61 62 6C 
28cbd     65 2E       | 	byte	"Expected integer variable."
28cbf     00          | 	byte	0
28cc0                 | LR__4646
28cc0     55 6E 69 6E 
28cc4     69 74 69 61 
28cc8     6C 69 7A 65 
28ccc     64 20 76 61 
28cd0     72 69 61 62 
28cd4     6C 65 20 69 
28cd8     6E 20 27 6E 
28cdc     65 78 74 27 
28ce0     2C 20 75 73 
28ce4     65 20 27 66 
28ce8     6F 72 27 20 
28cec     62 65 66 6F 
28cf0     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
28cf3     00          | 	byte	0
28cf4                 | LR__4647
28cf4     4E 6F 20 6D 
28cf8     6F 72 65 20 
28cfc     73 6C 6F 74 
28d00     73 20 66 6F 
28d04     72 20 27 66 
28d08     6F 72 27 2E | 	byte	"No more slots for 'for'."
28d0c     00          | 	byte	0
28d0d                 | LR__4648
28d0d     27 4E 65 78 
28d11     74 27 20 64 
28d15     6F 65 73 6E 
28d19     27 74 20 6D 
28d1d     61 74 63 68 
28d21     20 27 66 6F 
28d25     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
28d28     00          | 	byte	0
28d29                 | LR__4649
28d29     27 47 6F 74 
28d2d     6F 27 20 74 
28d31     61 72 67 65 
28d35     74 20 6C 69 
28d39     6E 65 20 6E 
28d3d     6F 74 20 66 
28d41     6F 75 6E 64 
28d45     2E          | 	byte	"'Goto' target line not found."
28d46     00          | 	byte	0
28d47                 | LR__4650
28d47     42 61 64 20 
28d4b     6E 75 6D 62 
28d4f     65 72 20 6F 
28d53     66 20 70 61 
28d57     72 61 6D 65 
28d5b     74 65 72 73 | 	byte	"Bad number of parameters"
28d5f     00          | 	byte	0
28d60                 | LR__4651
28d60     46 75 6E 63 
28d64     74 69 6F 6E 
28d68     20 75 6E 64 
28d6c     65 66 69 6E 
28d70     65 64 20 66 
28d74     6F 72 20 73 
28d78     74 72 69 6E 
28d7c     67 73       | 	byte	"Function undefined for strings"
28d7e     00          | 	byte	0
28d7f                 | LR__4652
28d7f     42 61 64 20 
28d83     70 61 72 61 
28d87     6D 65 74 65 
28d8b     72 2E       | 	byte	"Bad parameter."
28d8d     00          | 	byte	0
28d8e                 | LR__4653
28d8e     43 61 6E 6E 
28d92     6F 74 20 64 
28d96     65 63 6C 61 
28d9a     72 65 20 61 
28d9e     6E 20 61 72 
28da2     72 61 79 3A 
28da6     20 74 68 65 
28daa     20 76 61 72 
28dae     69 61 62 6C 
28db2     65 20 65 78 
28db6     69 73 74 73 
28dba     2E          | 	byte	"Cannot declare an array: the variable exists."
28dbb     00          | 	byte	0
28dbc                 | LR__4654
28dbc     45 78 70 65 
28dc0     63 74 65 64 
28dc4     20 27 28 27 
28dc8     2E          | 	byte	"Expected '('."
28dc9     00          | 	byte	0
28dca                 | LR__4655
28dca     45 78 70 65 
28dce     63 74 65 64 
28dd2     20 27 29 27 
28dd6     20 6F 72 20 
28dda     27 2C 27 2E | 	byte	"Expected ')' or ','."
28dde     00          | 	byte	0
28ddf                 | LR__4656
28ddf     4E 6F 20 6D 
28de3     6F 72 65 20 
28de7     74 68 61 6E 
28deb     20 33 20 64 
28def     69 6D 65 6E 
28df3     73 69 6F 6E 
28df7     73 20 73 75 
28dfb     70 70 6F 72 
28dff     74 65 64    | 	byte	"No more than 3 dimensions supported"
28e02     00          | 	byte	0
28e03                 | LR__4657
28e03     56 61 72 69 
28e07     61 62 6C 65 
28e0b     20 6E 61 6D 
28e0f     65 20 65 78 
28e13     70 65 63 74 
28e17     65 64       | 	byte	"Variable name expected"
28e19     00          | 	byte	0
28e1a                 | LR__4658
28e1a     54 79 70 65 
28e1e     20 6E 61 6D 
28e22     65 20 65 78 
28e26     70 65 63 74 
28e2a     65 64       | 	byte	"Type name expected"
28e2c     00          | 	byte	0
28e2d                 | LR__4659
28e2d     54 79 70 65 
28e31     20 6E 6F 74 
28e35     20 73 75 70 
28e39     70 6F 72 74 
28e3d     65 64 20 79 
28e41     65 74       | 	byte	"Type not supported yet"
28e43     00          | 	byte	0
28e44                 | LR__4660
28e44     41 72 72 61 
28e48     79 20 69 6E 
28e4c     64 65 78 20 
28e50     6F 75 74 20 
28e54     6F 66 20 62 
28e58     6F 75 6E 64 | 	byte	"Array index out of bound"
28e5c     00          | 	byte	0
28e5d                 | LR__4661
28e5d     45 72 72 6F 
28e61     72 20       | 	byte	"Error "
28e63     00          | 	byte	0
28e64                 | LR__4662
28e64     3A 20       | 	byte	": "
28e66     00          | 	byte	0
28e67                 | LR__4663
28e67     2F 73 64    | 	byte	"/sd"
28e6a     00          | 	byte	0
28e6b                 | LR__4664
28e6b     2F 73 64 2F 
28e6f     62 61 73    | 	byte	"/sd/bas"
28e72     00          | 	byte	0
28e73                 | LR__4665
28e73     2F 73 64 2F 
28e77     62 61 73    | 	byte	"/sd/bas"
28e7a     00          | 	byte	0
28e7b                 | LR__4666
28e7b     20 42 41 53 
28e7f     49 43 20 62 
28e83     79 74 65 73 
28e87     20 66 72 65 
28e8b     65          | 	byte	" BASIC bytes free"
28e8c     00          | 	byte	0
28e8d                 | LR__4667
28e8d     52 65 61 64 
28e91     79          | 	byte	"Ready"
28e92     00          | 	byte	0
28e93                 | LR__4668
28e93     20          | 	byte	" "
28e94     00          | 	byte	0
28e95                 | LR__4669
28e95     20          | 	byte	" "
28e96     00          | 	byte	0
28e97                 | LR__4670
28e97                 | 	byte	
28e97     00          | 	byte	0
28e98                 | LR__4671
28e98                 | 	byte	
28e98     00          | 	byte	0
28e99     00 00 00    | 	alignl
28e9c                 | _dat_
28e9c     00 00 00 00 
28ea0     00 00 00 00 
28ea4     00 00 00 00 
28ea8     00 00 00 00 | 	byte	$00[16]
28eac     61 41 17 0E 
28eb0     62 42 00 00 
28eb4     63 43 19 10 
28eb8     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
28ebc     65 45 18 0F 
28ec0     66 46 00 00 
28ec4     67 47 00 00 
28ec8     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
28ecc     69 49 00 00 
28ed0     6A 4A 00 00 
28ed4     6B 4B 00 00 
28ed8     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
28edc     6D 4D 00 00 
28ee0     6E 4E 1A 11 
28ee4     6F 4F 1E 15 
28ee8     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
28eec     71 51 00 00 
28ef0     72 52 00 00 
28ef4     73 53 1B 12 
28ef8     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
28efc     75 55 00 00 
28f00     76 56 00 00 
28f04     77 57 00 00 
28f08     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
28f0c     79 59 00 00 
28f10     7A 5A 1D 14 
28f14     31 21 04 00 
28f18     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
28f1c     33 23 06 00 
28f20     34 24 07 00 
28f24     35 25 08 00 
28f28     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
28f2c     37 26 0A 00 
28f30     38 2A 0B 00 
28f34     39 28 0C 00 
28f38     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
28f3c     8D 8D 00 00 
28f40     9B 9B 00 00 
28f44     88 88 00 00 
28f48     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
28f4c     20 20 00 00 
28f50     2D 5F 00 00 
28f54     3D 2B 00 00 
28f58     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
28f5c     5D 7D 00 00 
28f60     5C 7C 00 00 
28f64     23 7E 00 00 
28f68     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
28f6c     27 22 00 00 
28f70     60 7E 03 00 
28f74     2C 3C 00 00 
28f78     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
28f7c     2F 3F 00 00 
28f80     B9 B9 00 00 
28f84     BA 00 00 00 
28f88     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
28f8c     BC 00 00 00 
28f90     BD 00 00 00 
28f94     BE 00 00 00 
28f98     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
28f9c     C0 00 00 00 
28fa0     C1 00 00 00 
28fa4     C2 00 00 00 
28fa8     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
28fac     C4 00 00 00 
28fb0     C5 00 00 00 
28fb4     C6 00 00 00 
28fb8     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
28fbc     C8 00 00 00 
28fc0     C9 00 00 00 
28fc4     CA 00 00 00 
28fc8     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
28fcc     7F 7F 00 00 
28fd0     CC 00 00 00 
28fd4     CD 00 00 00 
28fd8     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
28fdc     CF 00 00 00 
28fe0     D0 00 00 00 
28fe4     D1 00 00 00 
28fe8     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
28fec     2F 2F 00 00 
28ff0     2A 2A 00 00 
28ff4     2D 2D 00 00 
28ff8     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
28ffc     8D 8D 00 00 
29000     31 31 00 00 
29004     32 32 00 00 
29008     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2900c     34 34 00 00 
29010     35 35 00 00 
29014     36 36 00 00 
29018     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2901c     38 38 00 00 
29020     39 39 00 00 
29024     30 30 00 00 
29028     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2902c     5C 7C 00 00 
29030     00 00 00 00 
29034     00 00 00 00 
29038     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2903c     00 00 00 00 
      ...             
29094     00 00 00 00 
29098     00 00 00 00 | 	byte	$00[96]
2909c     2B 00 A6 F2 
290a0     24 A7 09 80 
290a4     5B 88 4D 89 
290a8     80 88 A5 88 | atari_spl file "atari.spl"
290ac     6D 88 B8 88 
290b0     80 88 CB 88 
290b4     92 88 A5 88 
290b8     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
290bc     A5 88 CA 88 
290c0     A6 88 DD 88 
290c4     B8 88 AB 89 
290c8     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
290cc     C8 AD C6 F1 
290d0     91 06 B6 FF 
290d4     13 00 4A 00 
290d8     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
290dc     5D 00 5E 00 
290e0     5D 00 5E 00 
290e4     5E 00 5D 00 
290e8     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
290ec     38 00 83 00 
290f0     25 00 83 00 
290f4     C3 FE D1 04 
290f8     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
290fc     48 88 38 85 
29100     41 8A CB 88 
29104     28 89 B8 88 
29108     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
2910c     15 89 03 89 
29110     02 89 15 89 
29114     16 89 15 89 
29118     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
2911c     15 89 3A 89 
29120     72 89 E3 89 
29124     52 83 AD 97 
29128     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
2912c     0C 02 B6 FF 
29130     E1 00 A8 00 
29134     F3 00 A8 00 
29138     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
2913c     CE 00 CD 00 
29140     CD 00 BA 00 
29144     E1 00 BB 00 
29148     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2914c     DF 00 C9 FF 
29150     E6 01 B6 06 
29154     EE DD 8D 98 
29158     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2915c     97 89 73 89 
29160     3B 89 60 89 
29164     60 89 60 89 
29168     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2916c     73 89 72 89 
29170     85 89 73 89 
29174     AA 89 60 89 
29178     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2917c     E8 8A 18 86 
29180     92 88 A5 C2 
29184     E0 00 C3 05 
29188     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2918c     F2 00 64 01 
29190     06 01 3E 01 
29194     2B 01 2B 01 
29198     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2919c     2B 01 2A 01 
291a0     2B 01 2B 01 
291a4     2B 01 18 01 
291a8     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
291ac     39 07 61 F3 
291b0     C0 AF 37 85 
291b4     0F 88 8B 8A 
291b8     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
291bc     AB 89 D0 89 
291c0     AB 89 D0 89 
291c4     D0 89 CF 89 
291c8     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
291cc     D0 89 F5 89 
291d0     BD 89 08 8A 
291d4     CF 89 E8 8A 
291d8     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
291dc     53 B3 0D F8 
291e0     F4 07 38 00 
291e4     63 01 63 01 
291e8     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
291ec     88 01 88 01 
291f0     76 01 88 01 
291f4     88 01 89 01 
291f8     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
291fc     75 01 AE 01 
29200     76 01 88 01 
29204     4A 00 46 06 
29208     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
2920c     08 8A 9A 86 
29210     33 8B 08 8A 
29214     2D 8A F5 89 
29218     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
2921c     2D 8A 2D 8A 
29220     2E 8A 1B 8A 
29224     40 8A 2D 8A 
29228     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
2922c     2E 8A 79 8A 
29230     66 8A C8 8B 
29234     72 82 2B 97 
29238     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
2923c     1D 02 05 01 
29240     F8 01 C0 01 
29244     0B 02 C0 01 
29248     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
2924c     F9 01 D3 01 
29250     F8 01 D3 01 
29254     F8 01 D2 01 
29258     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
2925c     E6 01 2B 01 
29260     8E 02 5F 07 
29264     F7 E2 ED 9C 
29268     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2926c     E8 8A 78 8A 
29270     78 8A 65 8A 
29274     8B 8A 78 8A 
29278     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2927c     8B 8A 9D 8A 
29280     9D 8A 8B 8A 
29284     C2 8A 78 8A 
29288     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2928c     70 8C 18 86 
29290     8B 8A 23 C9 
29294     CB 03 C4 05 
29298     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2929c     0B 02 7B 02 
292a0     1E 02 55 02 
292a4     30 02 43 02 
292a8     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
292ac     43 02 44 02 
292b0     43 02 30 02 
292b4     68 02 31 02 
292b8     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
292bc     07 08 3F F7 
292c0     73 B2 13 85 
292c4     15 89 ED 8B 
292c8     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
292cc     B0 8A FB 8A 
292d0     D5 8A FA 8A 
292d4     E8 8A FB 8A 
292d8     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
292dc     E8 8A 21 8B 
292e0     E7 8A 33 8B 
292e4     E8 8A 26 8C 
292e8     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
292ec     8D B0 27 F6 
292f0     9C 08 AD 01 
292f4     7B 02 8D 02 
292f8     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
292fc     A1 02 A0 02 
29300     A1 02 A0 02 
29304     A0 02 A0 02 
29308     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
2930c     7B 02 D8 02 
29310     7B 02 C6 02 
29314     3E 01 C3 05 
29318     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
2931c     00 8C 2A 86 
29320     E0 8C FA 8A 
29324     6A 8B FB 8A 
29328     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
2932c     45 8B 45 8B 
29330     45 8B 6B 8B 
29334     46 8B 59 8B 
29338     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
2933c     6B 8B 6B 8B 
29340     6B 8B 6B 8B 
29344     7D 8B 7D 8B 
29348     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
2934c     90 8B 91 8B 
29350     90 8B 90 8B 
29354     A3 8B A3 8B 
29358     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
2935c     B5 8B B6 8B 
29360     B5 8B B5 8B 
29364     B6 8B C8 8B 
29368     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
2936c     C8 8B DA 8B 
29370     DB 8B DB 8B 
29374     DB 8B DC 8B 
29378     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2937c     EE 8B EE 8B 
29380     00 8C 01 8C 
29384     00 8C 01 8C 
29388     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2938c     12 8C 13 8C 
29390     13 8C 26 8C 
29394     26 8C 26 8C 
29398     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2939c     38 8C 38 8C 
293a0     38 8C 38 8C 
293a4     4B 8C 4B 8C 
293a8     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
293ac     5E 8C 5E 8C 
293b0     5E 8C 5E 8C 
293b4     70 8C 70 8C 
293b8     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
293bc     70 8C 83 8C 
293c0     83 8C 83 8C 
293c4     83 8C 96 8C 
293c8     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
293cc     95 8C A9 8C 
293d0     A9 8C A8 8C 
293d4     A8 8C A8 8C 
293d8     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
293dc     BB 8C BB 8C 
293e0     BB 8C CE 8C 
293e4     CE 8C CE 8C 
293e8     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
293ec     E0 8C E1 8C 
293f0     E1 8C E0 8C 
293f4     F4 8C F2 8C 
293f8     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
293fc     05 8D 05 8D 
29400     06 8D 06 8D 
29404     19 8D 19 8D 
29408     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
2940c     18 8D 2B 8D 
29410     2B 8D 2B 8D 
29414     2A 8D 3E 8D 
29418     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
2941c     3E 8D 51 8D 
29420     50 8D 50 8D 
29424     50 8D 51 8D 
29428     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
2942c     63 8D 64 8D 
29430     76 8D 75 8D 
29434     75 8D 76 8D 
29438     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
2943c     88 8D 88 8D 
29440     89 8D 9B 8D 
29444     9A 8D 9B 8D 
29448     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
2944c     AD 8D AE 8D 
29450     AD 8D AE 8D 
29454     C1 8D C1 8D 
29458     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
2945c     D3 8D D3 8D 
29460     D3 8D D3 8D 
29464     D3 8D E6 8D 
29468     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
2946c     E6 8D E6 8D 
29470     F9 8D F9 8D 
29474     F9 8D F8 8D 
29478     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2947c     0B 8E 0B 8E 
29480     1D 8E 1D 8E 
29484     1E 8E 1E 8E 
29488     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2948c     31 8E 31 8E 
29490     31 8E 42 8E 
29494     43 8E 43 8E 
29498     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2949c     56 8E 56 8E 
294a0     55 8E 56 8E 
294a4     68 8E 69 8E 
294a8     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
294ac     69 8E 7B 8E 
294b0     7C 8E 7B 8E 
294b4     7B 8E 8D 8E 
294b8     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
294bc     8D 8E A1 8E 
294c0     A0 8E A1 8E 
294c4     A1 8E A0 8E 
294c8     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
294cc     B3 8E B3 8E 
294d0     C6 8E C5 8E 
294d4     C6 8E C6 8E 
294d8     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
294dc     D8 8E D9 8E 
294e0     D8 8E EC 8E 
294e4     EB 8E EC 8E 
294e8     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
294ec     FE 8E FE 8E 
294f0     FE 8E FE 8E 
294f4     10 8F 10 8F 
294f8     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
294fc     11 8F 23 8F 
29500     24 8F 23 8F 
29504     24 8F 37 8F 
29508     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
2950c     36 8F 36 8F 
29510     48 8F 49 8F 
29514     49 8F 49 8F 
29518     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
2951c     5B 8F 5C 8F 
29520     5B 8F 6E 8F 
29524     6E 8F 6E 8F 
29528     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
2952c     81 8F 81 8F 
29530     81 8F 81 8F 
29534     93 8F 93 8F 
29538     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
2953c     93 8F A6 8F 
29540     A6 8F A6 8F 
29544     A6 8F B9 8F 
29548     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
2954c     B9 8F B9 8F 
29550     CC 8F CB 8F 
29554     CB 8F CC 8F 
29558     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
2955c     DF 8F DE 8F 
29560     DE 8F F1 8F 
29564     F1 8F F1 8F 
29568     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
2956c     03 90 04 90 
29570     04 90 04 90 
29574     16 90 17 90 
29578     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2957c     29 90 28 90 
29580     29 90 28 90 
29584     29 90 3C 90 
29588     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2958c     3C 90 4F 90 
29590     4E 90 4E 90 
29594     4E 90 4E 90 
29598     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2959c     61 90 61 90 
295a0     73 90 74 90 
295a4     74 90 74 90 
295a8     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
295ac     87 90 86 90 
295b0     87 90 86 90 
295b4     99 90 99 90 
295b8     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
295bc     AB 90 AB 90 
295c0     AC 90 AB 90 
295c4     AB 90 BF 90 
295c8     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
295cc     BE 90 D1 90 
295d0     D0 90 D1 90 
295d4     D1 90 D1 90 
295d8     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
295dc     E3 90 E4 90 
295e0     F6 90 F6 90 
295e4     F6 90 F6 90 
295e8     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
295ec     09 91 0A 91 
295f0     0A 91 1C 91 
295f4     1C 91 1C 91 
295f8     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
295fc     2F 91 2E 91 
29600     2F 91 2F 91 
29604     2E 91 41 91 
29608     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
2960c     41 91 53 91 
29610     54 91 54 91 
29614     53 91 54 91 
29618     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
2961c     67 91 67 91 
29620     79 91 7A 91 
29624     79 91 78 91 
29628     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
2962c     8C 91 8B 91 
29630     8C 91 8C 91 
29634     9E 91 9E 91 
29638     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
2963c     B1 91 B1 91 
29640     B2 91 B1 91 
29644     B1 91 C4 91 
29648     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
2964c     C4 91 D6 91 
29650     D7 91 D7 91 
29654     D7 91 D6 91 
29658     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
2965c     EA 91 EA 91 
29660     EA 91 FC 91 
29664     FC 91 FB 91 
29668     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
2966c     0E 92 0F 92 
29670     0F 92 0E 92 
29674     21 92 21 92 
29678     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2967c     21 92 34 92 
29680     33 92 34 92 
29684     34 92 47 92 
29688     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2968c     46 92 47 92 
29690     59 92 59 92 
29694     59 92 59 92 
29698     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2969c     6C 92 6C 92 
296a0     6B 92 7E 92 
296a4     7E 92 7E 92 
296a8     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
296ac     92 92 91 92 
296b0     91 92 90 92 
296b4     91 92 A4 92 
296b8     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
296bc     A3 92 B6 92 
296c0     B6 92 B7 92 
296c4     B7 92 B6 92 
296c8     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
296cc     CA 92 C9 92 
296d0     CA 92 DC 92 
296d4     DC 92 DC 92 
296d8     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
296dc     EF 92 EF 92 
296e0     EF 92 EF 92 
296e4     01 93 01 93 
296e8     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
296ec     15 93 14 93 
296f0     14 93 14 93 
296f4     14 93 27 93 
296f8     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
296fc     27 93 39 93 
29700     3A 93 39 93 
29704     39 93 39 93 
29708     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
2970c     4B 93 4C 93 
29710     5F 93 5F 93 
29714     5F 93 5E 93 
29718     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
2971c     5F 93 84 93 
29720     4C 93 96 93 
29724     5F 93 AE 94 
29728     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
2972c     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
29730     7A D7 00 80 
29734     87 8A 48 8F 
29738     EC 8C 76 8D 
2973c     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
29740     3C 8D 82 8D 
29744     42 8D 88 8D 
29748     8C 8D 8E 8D 
2974c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
29750     97 8D DE 8D 
29754     E1 8D F1 8E 
29758     D8 8C A3 83 
2975c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
29760     65 71 C9 65 
29764     FC 64 C4 65 
29768     C1 65 BF 65 
2976c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
29770     B6 65 B4 65 
29774     B2 65 AE 65 
29778     AC 65 ED 65 
2977c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
29780     5E 65 25 66 
29784     FA 62 23 6B 
29788     B5 6C 61 0A 
2978c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
29790     5D 90 BE 8D 
29794     47 8E C3 8D 
29798     09 8E C9 8D 
2979c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
297a0     15 8E 19 8E 
297a4     1B 8E 62 8E 
297a8     64 8E 68 8E 
297ac     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
297b0     B5 8E 4C 90 
297b4     FA 84 3C 9D 
297b8     98 13 79 6D 
297bc     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
297c0     D9 66 50 66 
297c4     D4 66 4B 66 
297c8     8C 66 46 66 
297cc     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
297d0     81 66 3A 66 
297d4     7C 66 36 66 
297d8     76 66 30 66 
297dc     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
297e0     6B 66 88 72 
297e4     BF 37 E7 B7 
297e8     75 83 8B 8E 
297ec     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
297f0     94 8E 96 8E 
297f4     DD 8E 9C 8E 
297f8     E2 8E A2 8E 
297fc     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
29800     EE 8E AE 8E 
29804     38 8F B5 8E 
29808     3F 8F FD 8E 
2980c     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
29810     A5 87 1E E3 
29814     6D 5D FA 71 
29818     41 64 25 67 
2981c     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
29820     D9 66 1A 67 
29824     18 67 15 67 
29828     12 67 0F 67 
2982c     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
29830     07 67 C0 66 
29834     01 67 BC 66 
29838     B8 66 DE 64 
2983c     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
29840     43 E5 1F 8B 
29844     14 8A F1 90 
29848     1C 8F 63 8F 
2984c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
29850     29 8F 6E 8F 
29854     72 8F 75 8F 
29858     34 8F BE 8F 
2985c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
29860     84 8F 87 8F 
29864     CC 8F 56 90 
29868     67 91 49 80 
2986c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
29870     46 77 A6 66 
29874     E8 66 B0 67 
29878     AD 67 ED 67 
2987c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
29880     A2 67 E3 67 
29884     9D 67 9A 67 
29888     98 67 94 67 
2988c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
29890     49 67 CD 67 
29894     28 65 5F 6E 
29898     82 67 3A 01 
2989c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
298a0     C2 91 A9 8F 
298a4     EF 8F AE 8F 
298a8     F4 8F B5 8F 
298ac     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
298b0     01 90 03 90 
298b4     07 90 09 90 
298b8     0C 90 53 90 
298bc     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
298c0     18 90 44 93 
298c4     85 84 D6 9D 
298c8     87 1F 2F 75 
298cc     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
298d0     C4 68 F6 67 
298d4     BE 68 F1 67 
298d8     76 68 2E 68 
298dc     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
298e0     27 68 24 68 
298e4     64 68 1E 68 
298e8     5F 68 19 68 
298ec     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
298f0     DC 68 56 72 
298f4     7E 36 C2 B8 
298f8     D7 84 73 90 
298fc     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
29900     7B 90 7F 90 
29904     82 90 84 90 
29908     CB 90 8B 90 
2990c     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
29910     D7 90 96 90 
29914     20 91 59 90 
29918     25 91 A2 90 
2991c     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
29920     D0 89 40 EE 
29924     12 64 C4 71 
29928     29 66 0C 69 
2992c     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
29930     C0 68 02 69 
29934     FE 68 FB 68 
29938     F9 68 F6 68 
2993c     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
29940     EE 68 A8 68 
29944     2C 69 5F 68 
29948     E2 68 81 66 
2994c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
29950     1E EB A6 8A 
29954     73 8B 5E 93 
29958     7B 90 48 91 
2995c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
29960     0D 91 11 91 
29964     14 91 16 91 
29968     5C 91 1C 91 
2996c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
29970     68 91 AF 91 
29974     2A 91 B5 91 
29978     75 91 1A 94 
2997c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
29980     70 0E CB 6C 
29984     5D 6E C4 67 
29988     99 69 54 69 
2998c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
29990     D2 69 49 69 
29994     89 69 86 69 
29998     40 69 C4 69 
2999c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
299a0     35 69 76 69 
299a4     58 67 EB 6D 
299a8     E9 6D 89 0F 
299ac     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
299b0     33 94 94 91 
299b4     D9 91 56 91 
299b8     E0 91 9F 91 
299bc     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
299c0     EC 91 EE 91 
299c4     F1 91 F4 91 
299c8     F7 91 3D 92 
299cc     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
299d0     46 92 21 94 
299d4     11 89 A4 9D 
299d8     FD 0E 8F 6C 
299dc     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
299e0     28 6A E1 69 
299e4     65 6A 1F 6A 
299e8     5F 6A 1A 6A 
299ec     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
299f0     54 6A 0F 6A 
299f4     4F 6A 09 6A 
299f8     06 6A 03 6A 
299fc     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
29a00     23 68 69 77 
29a04     3A 4D 38 CA 
29a08     38 86 4E 91 
29a0c     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
29a10     64 92 24 92 
29a14     6A 92 2A 92 
29a18     70 92 30 92 
29a1c     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
29a20     7B 92 7E 92 
29a24     C5 92 84 92 
29a28     CB 92 8A 92 
29a2c     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
29a30     4D 8D F9 E2 
29a34     97 59 FE 74 
29a38     DB 68 6D 6A 
29a3c     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
29a40     A8 6A A5 6A 
29a44     A3 6A 9F 6A 
29a48     9D 6A 9B 6A 
29a4c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
29a50     D6 6A 8F 6A 
29a54     CF 6A 46 6A 
29a58     CA 6A E1 67 
29a5c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
29a60     D3 F7 15 92 
29a64     90 8C BF 94 
29a68     A6 92 EB 92 
29a6c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
29a70     B1 92 F7 92 
29a74     FA 92 FD 92 
29a78     00 93 02 93 
29a7c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
29a80     4F 93 52 93 
29a84     54 93 22 94 
29a88     5A 93 8F 88 
29a8c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
29a90     1C 77 07 6C 
29a94     E8 69 7A 6B 
29a98     34 6B 75 6B 
29a9c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
29aa0     29 6B 26 6B 
29aa4     24 6B 21 6B 
29aa8     1D 6B 5E 6B 
29aac     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
29ab0     12 6B 52 6B 
29ab4     34 69 34 6E 
29ab8     BA 73 A4 24 
29abc     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
29ac0     7A 94 B3 93 
29ac4     72 93 31 93 
29ac8     78 93 7A 93 
29acc     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
29ad0     83 93 86 93 
29ad4     89 93 D0 93 
29ad8     D2 93 D5 93 
29adc     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
29ae0     DD 93 40 96 
29ae4     30 8B 99 9C 
29ae8     52 10 94 71 
29aec     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
29af0     46 6C 79 6B 
29af4     40 6C B7 6B 
29af8     F7 6B B1 6B 
29afc     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
29b00     EC 6B A5 6B 
29b04     A2 6B 9F 6B 
29b08     9D 6B 9A 6B 
29b0c     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
29b10     C8 6A E4 76 
29b14     20 4B F9 CE 
29b18     2E 8A 1A 92 
29b1c     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
29b20     FB 93 BA 93 
29b24     01 94 03 94 
29b28     4A 94 09 94 
29b2c     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
29b30     55 94 14 94 
29b34     9E 94 1A 94 
29b38     61 94 20 94 
29b3c     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
29b40     3E 87 E5 CD 
29b44     5F 50 6C 78 
29b48     B5 6A 04 6C 
29b4c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
29b50     83 6C 7F 6C 
29b54     7C 6C 36 6C 
29b58     76 6C 74 6C 
29b5c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
29b60     6B 6C 25 6C 
29b64     66 6C 1F 6C 
29b68     1D 6C 41 6A 
29b6c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
29b70     BA FA FC 94 
29b74     5B 8D 97 96 
29b78     3B 94 C5 94 
29b7c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
29b80     89 94 8C 94 
29b84     8F 94 92 94 
29b88     94 94 DB 94 
29b8c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
29b90     E4 94 E7 94 
29b94     2D 95 74 95 
29b98     C8 96 15 89 
29b9c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
29ba0     CB 75 31 6F 
29ba4     7E 6B 10 6D 
29ba8     C9 6C 0A 6D 
29bac     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
29bb0     BD 6C FF 6C 
29bb4     FB 6C F9 6C 
29bb8     B2 6C F3 6C 
29bbc     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
29bc0     A7 6C E8 6C 
29bc4     0D 6B 85 6F 
29bc8     C7 74 10 28 
29bcc     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
29bd0     96 96 47 95 
29bd4     06 95 0A 95 
29bd8     0C 95 0F 95 
29bdc     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
29be0     17 95 5E 95 
29be4     61 95 63 95 
29be8     22 95 AC 95 
29bec     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
29bf0     72 95 17 98 
29bf4     59 8E 01 96 
29bf8     CF FC 5A 68 
29bfc     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
29c00     96 6D 50 6D 
29c04     D5 6D 4A 6D 
29c08     8C 6D 89 6D 
29c0c     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
29c10     80 6D 3A 6D 
29c14     7A 6D 77 6D 
29c18     75 6D 71 6D 
29c1c     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
29c20     18 6C BC 78 
29c24     9A 4F 7E CF 
29c28     1F 89 F1 93 
29c2c     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
29c30     D2 95 4E 95 
29c34     D7 95 53 95 
29c38     DD 95 E0 95 
29c3c     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
29c40     A5 95 EB 95 
29c44     EE 95 F0 95 
29c48     37 96 B3 95 
29c4c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
29c50     1A 98 D5 8D 
29c54     C5 9F CD 0F 
29c58     0F 71 F3 73 
29c5c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
29c60     D9 6D 5E 6E 
29c64     D3 6D 58 6E 
29c68     12 6E 0F 6E 
29c6c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
29c70     49 6E BF 6D 
29c74     87 6E 76 6D 
29c78     81 6E 11 6B 
29c7c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
29c80     3F 09 44 95 
29c84     E5 8D 3F 99 
29c88     D4 95 A2 96 
29c8c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
29c90     23 96 69 96 
29c94     6B 96 6E 96 
29c98     71 96 74 96 
29c9c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
29ca0     BF 96 3C 96 
29ca4     C6 96 C8 96 
29ca8     A3 98 51 8D 
29cac     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
29cb0     CF 75 29 73 
29cb4     90 6C EC 6E 
29cb8     62 6E E7 6E 
29cbc     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
29cc0     9A 6E 98 6E 
29cc4     95 6E 91 6E 
29cc8     8E 6E CF 6E 
29ccc     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
29cd0     40 6E C3 6E 
29cd4     E8 6C 45 6F 
29cd8     A5 7B C9 35 
29cdc     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
29ce0     2D 98 23 97 
29ce4     E1 96 A0 96 
29ce8     A4 96 EA 96 
29cec     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
29cf0     AF 96 F4 96 
29cf4     F8 96 3E 97 
29cf8     FD 96 43 97 
29cfc     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
29d00     08 97 6B 99 
29d04     D6 92 88 91 
29d08     D8 EE 84 66 
29d0c     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
29d10     2E 6F E7 6E 
29d14     6C 6F 24 6F 
29d18     21 6F 1F 6F 
29d1c     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
29d20     17 6F 13 6F 
29d24     54 6F 0E 6F 
29d28     0B 6F 4B 6F 
29d2c     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
29d30     27 6D 1C 7B 
29d34     19 59 9F DB 
29d38     66 8E BC 94 
29d3c     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
29d40     67 97 26 97 
29d44     6D 97 2B 97 
29d48     72 97 32 97 
29d4c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
29d50     C1 97 7F 97 
29d54     C6 97 85 97 
29d58     CB 97 CE 97 
29d5c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
29d60     EC 8A C4 C6 
29d64     68 4C F4 7D 
29d68     63 6E E8 6E 
29d6c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
29d70     ED 6F A7 6F 
29d74     E7 6F A0 6F 
29d78     E1 6F 9B 6F 
29d7c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
29d80     D5 6F 8F 6F 
29d84     CE 6F 45 6F 
29d88     86 6F 68 6D 
29d8c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
29d90     C0 13 AD A2 
29d94     A7 8E 79 99 
29d98     E6 97 E8 97 
29d9c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
29da0     F1 97 F3 97 
29da4     F6 97 F9 97 
29da8     FB 97 FE 97 
29dac     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
29db0     4A 98 0A 98 
29db4     93 98 0F 98 
29db8     7F 9B BF 8C 
29dbc     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
29dc0     91 7B 62 73 
29dc4     1A 6E B9 70 
29dc8     EB 6F B3 70 
29dcc     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
29dd0     25 70 20 70 
29dd4     1E 70 1B 70 
29dd8     18 70 15 70 
29ddc     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
29de0     0D 70 09 70 
29de4     07 70 03 70 
29de8     01 70 FD 6F 
29dec     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
29df0     F6 6F F2 6F 
29df4     EF 6F EC 6F 
29df8     2C 70 E6 6F 
29dfc     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
29e00     DD 6F 97 6F 
29e04     D7 6F 84 6E 
29e08     8F 6F 3F 7D 
29e0c     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
29e0e     FF FF FF FF 
29e12     FF FF       | atarist_spl file "atarist.spl" '512
29e14     00 00 00 00 
29e18     00 00 00 00 
29e1c     00 00       | 	byte	$00[10]
29e1e     17 7F F2 7F 
29e22     B2 7F 72 7F 
29e26     33 7F F4 7E 
29e2a     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
29e2e     36 7E F5 7D 
29e32     E9 51 F2 0D 
29e36     8E 00 F3 FD 
29e3a     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
29e3e     57 FD 58 FD 
29e42     5B FD 5C FD 
29e46     5C FD 60 7D 
29e4a     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
29e4e     D6 7C 98 7C 
29e52     59 7C 1A 7C 
29e56     DC 7B 9E 7B 
29e5a     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
29e5e     F3 05 00 FD 
29e62     41 FB EA FA 
29e66     D9 FA DB FA 
29e6a     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
29e6e     E4 FA 9B 36 
29e72     F8 7A C0 7A 
29e76     84 7A 45 7A 
29e7a     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
29e7e     8E 79 51 79 
29e82     15 79 D7 78 
29e86     3C 1F EB FF 
29e8a     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
29e8e     6D F8 65 F8 
29e92     68 F8 6D F8 
29e96     70 F8 74 F8 
29e9a     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
29e9e     AB 60 79 60 
29ea2     4B 60 1A 60 
29ea6     E9 5F B9 5F 
29eaa     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
29eae     FB 59 B2 0B 
29eb2     92 FA 3A F7 
29eb6     96 F6 79 F6 
29eba     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
29ebe     82 F6 86 F6 
29ec2     8C F6 DB 5D 
29ec6     F1 5E C1 5E 
29eca     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
29ece     34 5E 04 5E 
29ed2     D6 5D A6 5D 
29ed6     78 5D D4 3E 
29eda     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
29ede     27 F5 BA F4 
29ee2     AB F4 AD F4 
29ee6     B2 F4 B8 F4 
29eea     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
29eee     26 5D 2B 5D 
29ef2     FC 5C CD 5C 
29ef6     9F 5C 70 5C 
29efa     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
29efe     E5 5B B8 5B 
29f02     DB 24 A7 FC 
29f06     D1 F4 4D F3 
29f0a     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
29f0e     04 F3 0B F3 
29f12     11 F3 16 F3 
29f16     DE 18 98 5B 
29f1a     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
29f1e     4E 4A 29 48 
29f22     A0 47 6A 47 
29f26     43 47 20 47 
29f2a     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
29f2e     E2 F6 98 F2 
29f32     C5 F1 A3 F1 
29f36     A3 F1 A8 F1 
29f3a     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
29f3e     BF F1 00 3D 
29f42     EF 46 CD 46 
29f46     AA 46 86 46 
29f4a     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
29f4e     1C 46 F9 45 
29f52     D7 45 EE 43 
29f56     DE 02 E8 F3 
29f5a     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
29f5e     61 F0 65 F0 
29f62     6D F0 74 F0 
29f66     7C F0 84 F0 
29f6a     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
29f6e     8E 45 6D 45 
29f72     49 45 27 45 
29f76     05 45 E1 44 
29f7a     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
29f7e     F1 2F A9 FB 
29f82     8B F1 9B EF 
29f86     40 EF 36 EF 
29f8a     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
29f8e     4D EF 56 EF 
29f92     5E EF 7B 44 
29f96     8C 44 69 44 
29f9a     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
29f9e     03 44 E1 43 
29fa2     C0 43 F5 37 
29fa6     69 33 0F 11 
29faa     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
29fae     66 EE 37 EE 
29fb2     38 EE 40 EE 
29fb6     48 EE 51 EE 
29fba     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
29fbe     7D 32 6A 32 
29fc2     51 32 37 32 
29fc6     1F 32 05 32 
29fca     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
29fce     B9 31 A1 31 
29fd2     F1 04 F4 F1 
29fd6     50 EE A0 ED 
29fda     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
29fde     93 ED 9A ED 
29fe2     A4 ED AD ED 
29fe6     F4 27 C1 31 
29fea     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
29fee     78 31 5F 31 
29ff2     46 31 2E 31 
29ff6     15 31 FC 30 
29ffa     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
29ffe     C4 EF 4A ED 
2a002     DC EC CB EC 
2a006     D2 EC DA EC 
2a00a     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2a00e     F9 EC 64 2F 
2a012     0A 31 F1 30 
2a016     D9 30 C0 30 
2a01a     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
2a01e     78 30 5F 30 
2a022     46 30 38 23 
2a026     A6 F6 19 EE 
2a02a     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
2a02e     20 EC 28 EC 
2a032     32 EC 3C EC 
2a036     47 EC 51 EC 
2a03a     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
2a03e     A3 22 93 22 
2a042     7F 22 6E 22 
2a046     5D 22 4C 22 
2a04a     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
2a04e     77 09 76 F1 
2a052     CC EC F0 EB 
2a056     CD EB CE EB 
2a05a     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
2a05e     ED EB F5 EB 
2a062     3E F6 6B 22 
2a066     5F 22 4E 22 
2a06a     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
2a06e     1B 22 0B 22 
2a072     FA 21 E9 21 
2a076     D8 21 4D FF 
2a07a     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
2a07e     92 EB 7B EB 
2a082     82 EB 8C EB 
2a086     97 EB A1 EB 
2a08a     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
2a08e     15 22 04 22 
2a092     F3 21 E3 21 
2a096     D2 21 C0 21 
2a09a     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
2a09e     8E 21 7D 21 
2a0a2     9A F8 A4 ED 
2a0a6     8E EB 2F EB 
2a0aa     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
2a0ae     37 EB 42 EB 
2a0b2     4C EB 57 EB 
2a0b6     B2 17 22 19 
2a0ba     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
2a0be     FD 18 EF 18 
2a0c2     E3 18 D6 18 
2a0c6     CA 18 BD 18 
2a0ca     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
2a0ce     60 EC 35 EB 
2a0d2     01 EB 01 EB 
2a0d6     0C EB 16 EB 
2a0da     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
2a0de     34 EB D0 18 
2a0e2     00 19 F4 18 
2a0e6     E8 18 DA 18 
2a0ea     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
2a0ee     B6 18 A9 18 
2a0f2     9D 18 91 05 
2a0f6     F0 EF CA EB 
2a0fa     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
2a0fe     E8 EA F2 EA 
2a102     FE EA 07 EB 
2a106     12 EB C2 EF 
2a10a     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
2a10e     D9 18 CD 18 
2a112     C0 18 B3 18 
2a116     A7 18 9B 18 
2a11a     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
2a11e     B8 FC 30 EE 
2a122     61 EB DC EA 
2a126     CD EA D2 EA 
2a12a     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
2a12e     F3 EA FE EA 
2a132     D2 09 D1 18 
2a136     C3 18 17 18 
2a13a     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
2a13e     66 11 52 11 
2a142     49 11 41 11 
2a146     38 11 E0 F4 
2a14a     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
2a14e     C9 EA C5 EA 
2a152     CF EA DB EA 
2a156     E6 EA EF EA 
2a15a     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
2a15e     89 11 80 11 
2a162     78 11 6E 11 
2a166     67 11 5D 11 
2a16a     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
2a16e     43 11 32 0D 
2a172     9C F1 07 EC 
2a176     F8 EA CD EA 
2a17a     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
2a17e     E4 EA ED EA 
2a182     F8 EA 02 EB 
2a186     55 11 91 11 
2a18a     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
2a18e     75 11 6E 11 
2a192     64 11 5E 11 
2a196     54 11 4A 11 
2a19a     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
2a19e     A8 EB F1 EA 
2a1a2     D9 EA DC EA 
2a1a6     E8 EA F1 EA 
2a1aa     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
2a1ae     A6 EB 9E 11 
2a1b2     A0 11 96 11 
2a1b6     8D 11 85 11 
2a1ba     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
2a1be     6A 11 CA 0D 
2a1c2     36 0B 57 F8 
2a1c6     6C ED 57 EB 
2a1ca     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
2a1ce     F4 EA FF EA 
2a1d2     09 EB 15 EB 
2a1d6     1E EB 1A FD 
2a1da     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
2a1de     ED 0A E8 0A 
2a1e2     E2 0A DC 0A 
2a1e6     D6 0A D1 0A 
2a1ea     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
2a1ee     F8 F3 BC EC 
2a1f2     57 EB 1E EB 
2a1f6     18 EB 24 EB 
2a1fa     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
2a1fe     42 EB 4D EB 
2a202     08 09 20 0B 
2a206     1A 0B 14 0B 
2a20a     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
2a20e     04 0B FE 0A 
2a212     F9 0A F2 0A 
2a216     84 08 3A F1 
2a21a     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
2a21e     42 EB 42 EB 
2a222     4E EB 57 EB 
2a226     62 EB 6B EB 
2a22a     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
2a22e     48 0B 43 0B 
2a232     3C 0B 36 0B 
2a236     31 0B 2C 0B 
2a23a     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
2a23e     1B 0B 5C 00 
2a242     6A EF 1B EC 
2a246     81 EB 6A EB 
2a24a     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
2a24e     85 EB 8E EB 
2a252     99 EB A3 EB 
2a256     DD 05 E5 05 
2a25a     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
2a25e     DB 05 D8 05 
2a262     D5 05 D1 05 
2a266     D0 05 CB 05 
2a26a     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
2a26e     0C EC BB EB 
2a272     B3 EB BB EB 
2a276     C5 EB D0 EB 
2a27a     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2a27e     E4 F7 2C 06 
2a282     28 06 24 06 
2a286     22 06 1F 06 
2a28a     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2a28e     16 06 14 06 
2a292     0F 06 D0 F3 
2a296     65 ED 2D EC 
2a29a     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2a29e     01 EC 0A EC 
2a2a2     14 EC 1E EC 
2a2a6     29 EC FB 03 
2a2aa     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2a2ae     63 06 60 06 
2a2b2     5E 06 59 06 
2a2b6     58 06 54 06 
2a2ba     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2a2be     69 F1 21 ED 
2a2c2     55 EC 33 EC 
2a2c6     36 EC 40 EC 
2a2ca     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2a2ce     5C EC 68 EC 
2a2d2     92 02 D9 02 
2a2d6     D7 02 D7 02 
2a2da     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2a2de     D1 02 D1 02 
2a2e2     CE 02 CD 02 
2a2e6     5D FC 80 EF 
2a2ea     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2a2ee     83 EC 8A EC 
2a2f2     93 EC 9C EC 
2a2f6     A5 EC B1 EC 
2a2fa     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2a2fe     2B 03 2A 03 
2a302     29 03 26 03 
2a306     25 03 24 03 
2a30a     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2a30e     1F 03 70 F7 
2a312     D0 EE 27 ED 
2a316     DB EC D4 EC 
2a31a     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2a31e     F0 EC FA EC 
2a322     02 ED F9 F4 
2a326     7B 03 7C 03 
2a32a     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2a32e     75 03 73 03 
2a332     72 03 70 03 
2a336     6D 03 6C 03 
2a33a     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2a33e     54 ED 22 ED 
2a342     22 ED 2C ED 
2a346     35 ED 3F ED 
2a34a     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2a34e     14 01 C3 03 
2a352     C1 03 C0 03 
2a356     5F 01 A5 00 
2a35a     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2a35e     7B 00 7C 00 
2a362     20 00 85 F1 
2a366     2A EE 89 ED 
2a36a     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
2a36e     80 ED 87 ED 
2a372     90 ED 9A ED 
2a376     A3 ED 73 00 
2a37a     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2a37e     D0 00 D0 00 
2a382     D0 00 D0 00 
2a386     D0 00 CF 00 
2a38a     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2a38e     80 F0 3D EE 
2a392     D5 ED C7 ED 
2a396     CD ED D6 ED 
2a39a     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2a39e     F2 ED FA ED 
2a3a2     1D 01 29 01 
2a3a6     27 01 27 01 
2a3aa     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2a3ae     25 01 26 01 
2a3b2     26 01 23 01 
2a3b6     D0 F7 EC EF 
2a3ba     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2a3be     1C EE 24 EE 
2a3c2     2D EE 37 EE 
2a3c6     40 EE 47 EE 
2a3ca     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2a3ce     7D 01 7B 01 
2a3d2     7A 01 7A 01 
2a3d6     79 01 78 01 
2a3da     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2a3de     84 FE DE F3 
2a3e2     6C EF 93 EE 
2a3e6     72 EE 72 EE 
2a3ea     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2a3ee     8B EE 95 EE 
2a3f2     9E EE 15 FC 
2a3f6     67 FE 67 FE 
2a3fa     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2a3fe     6B FE 6B FE 
2a402     6D FE 6D FE 
2a406     6D FE 6F FE 
2a40a     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2a40e     DF EE CC EE 
2a412     CF EE D9 EE 
2a416     E1 EE EA EE 
2a41a     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2a41e     5A FE C4 FE 
2a422     C3 FE C5 FE 
2a426     C6 FE C6 FE 
2a42a     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2a42e     C8 FE C7 FE 
2a432     DA FB 85 F1 
2a436     8D EF 31 EF 
2a43a     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2a43e     34 EF 3E EF 
2a442     46 EF 4F EF 
2a446     57 EF 0D FF 
2a44a     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2a44e     1F FF 1F FF 
2a452     21 FF 21 FF 
2a456     21 FF 21 FF 
2a45a     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2a45e     15 F1 BE EF 
2a462     84 EF 7E EF 
2a466     88 EF 8F EF 
2a46a     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
2a46e     A9 EF 06 F2 
2a472     A6 FC AB FC 
2a476     AD FC AE FC 
2a47a     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2a47e     B2 FC B4 FC 
2a482     B6 FC B7 FC 
2a486     8B F4 BD F0 
2a48a     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2a48e     E4 EF EE EF 
2a492     F6 EF FD EF 
2a496     04 F0 0E F0 
2a49a     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2a49e     0B FD 0D FD 
2a4a2     0F FD 11 FD 
2a4a6     11 FD 13 FD 
2a4aa     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2a4ae     17 FD 64 F3 
2a4b2     CD F0 52 F0 
2a4b6     41 F0 45 F0 
2a4ba     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2a4be     5B F0 64 F0 
2a4c2     6D F0 FB FC 
2a4c6     65 FD 68 FD 
2a4ca     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2a4ce     6C FD 6D FD 
2a4d2     6F FD 70 FD 
2a4d6     72 FD B3 FB 
2a4da     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2a4de     A4 F0 99 F0 
2a4e2     A0 F0 A8 F0 
2a4e6     AE F0 B9 F0 
2a4ea     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2a4ee     CB FB DD FB 
2a4f2     DE FB E0 FB 
2a4f6     E3 FB E3 FB 
2a4fa     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2a4fe     E9 FB EC FB 
2a502     62 F7 27 F2 
2a506     2A F1 FF F0 
2a50a     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2a50e     0C F1 13 F1 
2a512     1B F1 23 F1 
2a516     33 F2 3C FC 
2a51a     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
2a51e     42 FC 45 FC 
2a522     47 FC 48 FC 
2a526     4A FC 4C FC 
2a52a     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
2a52e     20 F2 77 F1 
2a532     5C F1 5F F1 
2a536     64 F1 6C F1 
2a53a     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
2a53e     83 F1 DC F8 
2a542     9A FC 9A FC 
2a546     9B FC 9E FC 
2a54a     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
2a54e     A3 FC A4 FC 
2a552     A6 FC A9 FC 
2a556     90 F4 33 F2 
2a55a     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
2a55e     BA F1 BF F1 
2a562     C7 F1 CE F1 
2a566     D6 F1 DC F1 
2a56a     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
2a56e     F3 FC F5 FC 
2a572     FE FB 79 FB 
2a576     62 FB 5F FB 
2a57a     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
2a57e     6F FA AF F3 
2a582     53 F2 12 F2 
2a586     0F F2 15 F2 
2a58a     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
2a58e     2A F2 32 F2 
2a592     38 F2 9A FB 
2a596     AF FB B1 FB 
2a59a     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2a59e     B7 FB B8 FB 
2a5a2     BA FB BC FB 
2a5a6     C1 FB 3B F8 
2a5aa     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
2a5ae     6E F2 6C F2 
2a5b2     74 F2 7A F2 
2a5b6     81 F2 87 F2 
2a5ba     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
2a5be     06 FC 09 FC 
2a5c2     0C FC 0E FC 
2a5c6     0F FC 12 FC 
2a5ca     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
2a5ce     17 FC 1A FC 
2a5d2     B2 F6 7B F3 
2a5d6     DD F2 C5 F2 
2a5da     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
2a5de     D4 F2 DB F2 
2a5e2     E0 F2 E8 F2 
2a5e6     28 F8 60 FC 
2a5ea     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
2a5ee     64 FC 66 FC 
2a5f2     68 FC 6A FC 
2a5f6     6D FC 52 FC 
2a5fa     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
2a5fe     78 F3 24 F3 
2a602     1A F3 1E F3 
2a606     24 F3 2A F3 
2a60a     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
2a60e     3D F3 80 FA 
2a612     0C FB 0F FB 
2a616     10 FB 14 FB 
2a61a     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
2a61e     1B FB 1D FB 
2a622     1F FB 92 FA 
2a626     DE F4 AE F3 
2a62a     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
2a62e     79 F3 7E F3 
2a632     84 F3 8C F3 
2a636     92 F3 97 F3 
2a63a     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
2a63e     67 FB 69 FB 
2a642     6B FB 6F FB 
2a646     71 FB 72 FB 
2a64a     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
2a64e     E3 F8 BA F4 
2a652     EE F3 CC F3 
2a656     CA F3 CF F3 
2a65a     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
2a65e     E2 F3 E8 F3 
2a662     ED F3 B7 FB 
2a666     BC FB BE FB 
2a66a     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
2a66e     C4 FB C6 FB 
2a672     C8 FB C9 FB 
2a676     CC FB 8F F7 
2a67a     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
2a67e     1E F4 1E F4 
2a682     24 F4 2A F4 
2a686     30 F4 38 F4 
2a68a     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
2a68e     AD FA B1 FA 
2a692     B4 FA B6 FA 
2a696     BA FA BB FA 
2a69a     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
2a69e     C2 FA C6 FA 
2a6a2     55 F6 C6 F4 
2a6a6     7D F4 72 F4 
2a6aa     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
2a6ae     83 F4 89 F4 
2a6b2     8F F4 94 F4 
2a6b6     66 FA 03 FB 
2a6ba     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
2a6be     0A FB 0E FB 
2a6c2     10 FB 11 FB 
2a6c6     16 FB 18 FB 
2a6ca     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
2a6ce     F9 F4 CA F4 
2a6d2     C5 F4 CB F4 
2a6d6     D1 F4 D7 F4 
2a6da     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
2a6de     E8 F4 3F FB 
2a6e2     56 FB 58 FB 
2a6e6     5A FB 5E FB 
2a6ea     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
2a6ee     64 FB 64 FB 
2a6f2     69 FB 99 F9 
2a6f6     E9 F5 33 F5 
2a6fa     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
2a6fe     1D F5 22 F5 
2a702     27 F5 2E F5 
2a706     32 F5 37 F5 
2a70a     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
2a70e     BC FA BC FA 
2a712     C1 FA C2 FA 
2a716     C4 FA C8 FA 
2a71a     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
2a71e     F9 F7 DB F5 
2a722     78 F5 69 F5 
2a726     6A F5 70 F5 
2a72a     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
2a72e     7F F5 85 F5 
2a732     6E F7 06 FB 
2a736     0A FB 0B FB 
2a73a     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
2a73e     14 FB 15 FB 
2a742     18 FB 1B FB 
2a746     1D FB 70 F7 
2a74a     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
2a74e     B6 F5 BB F5 
2a752     C0 F5 C6 F5 
2a756     CA F5 CF F5 
2a75a     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
2a75e     54 FB 56 FB 
2a762     5A FB 5B FB 
2a766     5E FB 5F FB 
2a76a     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
2a76e     67 FB 52 FB 
2a772     29 F7 33 F6 
2a776     06 F6 02 F6 
2a77a     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
2a77e     10 F6 16 F6 
2a782     1A F6 1F F6 
2a786     81 FB 9F FB 
2a78a     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
2a78e     51 FB F2 FA 
2a792     E3 FA E3 FA 
2a796     E5 FA E9 FA 
2a79a     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
2a79e     64 F6 4D F6 
2a7a2     4D F6 53 F6 
2a7a6     57 F6 5C F6 
2a7aa     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
2a7ae     6A F6 19 FB 
2a7b2     1E FB 22 FB 
2a7b6     23 FB 24 FB 
2a7ba     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
2a7be     2C FB 2E FB 
2a7c2     32 FB F0 F8 
2a7c6     01 F7 A5 F6 
2a7ca     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
2a7ce     9F F6 A3 F6 
2a7d2     A6 F6 AC F6 
2a7d6     B0 F6 EB F7 
2a7da     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
2a7de     68 FB 6C FB 
2a7e2     6E FB 71 FB 
2a7e6     72 FB 74 FB 
2a7ea     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
2a7ee     71 F8 21 F7 
2a7f2     E5 F6 DD F6 
2a7f6     E1 F6 E6 F6 
2a7fa     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
2a7fe     F5 F6 F7 F6 
2a802     F7 FA AB FB 
2a806     AD FB AF FB 
2a80a     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
2a80e     B6 FB B9 FB 
2a812     BB FB BC FB 
2a816     21 FB 07 F8 
2a81a     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
2a81e     22 F7 26 F7 
2a822     2B F7 2E F7 
2a826     34 F7 38 F7 
2a82a     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
2a82e     13 FB 16 FB 
2a832     17 FB 1B FB 
2a836     1E FB 20 FB 
2a83a     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
2a83e     26 FB 77 FA 
2a842     F3 F7 7C F7 
2a846     67 F7 6A F7 
2a84a     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
2a84e     74 F7 7A F7 
2a852     7E F7 82 F7 
2a856     53 FB 5A FB 
2a85a     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
2a85e     5F FB 63 FB 
2a862     65 FB 67 FB 
2a866     69 FB 6A FB 
2a86a     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
2a86e     B5 F7 A9 F7 
2a872     AD F7 B0 F7 
2a876     B5 F7 B8 F7 
2a87a     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
2a87e     6E F8 99 FB 
2a882     9C FB 9D FB 
2a886     9F FB A4 FB 
2a88a     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
2a88e     A9 FB AB FB 
2a892     AD FB 46 F9 
2a896     26 F8 F0 F7 
2a89a     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
2a89e     F4 F7 F8 F7 
2a8a2     FB F7 FF F7 
2a8a6     03 F8 65 FA 
2a8aa     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
2a8ae     2B FB 2F FB 
2a8b2     30 FB 32 FB 
2a8b6     34 FB 38 FB 
2a8ba     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
2a8be     E9 F8 4A F8 
2a8c2     2E F8 2C F8 
2a8c6     2F F8 36 F8 
2a8ca     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
2a8ce     41 F8 44 F8 
2a8d2     4A FB 67 FB 
2a8d6     68 FB 6B FB 
2a8da     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
2a8de     73 FB 74 FB 
2a8e2     78 FB 7A FB 
2a8e6     14 FB E7 F8 
2a8ea     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
2a8ee     6D F8 70 F8 
2a8f2     73 F8 78 F8 
2a8f6     7C F8 80 F8 
2a8fa     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
2a8fe     A6 FB A7 FB 
2a902     A9 FB AC FB 
2a906     AF FB B1 FB 
2a90a     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2a90e     B7 FB 73 FA 
2a912     F8 F8 B4 F8 
2a916     A9 F8 AB F8 
2a91a     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
2a91e     B4 F8 B8 F8 
2a922     BB F8 FA F8 
2a926     64 FB 65 FB 
2a92a     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
2a92e     6D FB 6F FB 
2a932     70 FB 74 FB 
2a936     77 FB 77 FB 
2a93a     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
2a93e     E9 F8 E4 F8 
2a942     E8 F8 EB F8 
2a946     EE F8 F2 F8 
2a94a     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
2a94e     B5 FA 9F FB 
2a952     A1 FB A4 FB 
2a956     A5 FB A9 FB 
2a95a     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
2a95e     AE FB B1 FB 
2a962     B2 FB C7 F9 
2a966     39 F9 22 F9 
2a96a     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
2a96e     26 F9 2A F9 
2a972     2E F9 32 F9 
2a976     33 F9 BA FB 
2a97a     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
2a97e     DE FB E1 FB 
2a982     E2 FB E4 FB 
2a986     E5 FB E7 FB 
2a98a     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
2a98e     C5 F9 67 F9 
2a992     57 F9 56 F9 
2a996     5B F9 5F F9 
2a99a     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
2a99e     68 F9 6C F9 
2a9a2     0B FC 11 FC 
2a9a6     14 FC 15 FC 
2a9aa     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
2a9ae     B5 FB B5 FB 
2a9b2     B6 FB B8 FB 
2a9b6     E9 FA C8 F9 
2a9ba     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
2a9be     90 F9 94 F9 
2a9c2     95 F9 99 F9 
2a9c6     9D F9 9F F9 
2a9ca     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
2a9ce     DE FB DF FB 
2a9d2     E2 FB E4 FB 
2a9d6     E6 FB E8 FB 
2a9da     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
2a9de     EF FB AC FA 
2a9e2     E9 F9 C7 F9 
2a9e6     C3 F9 C8 F9 
2a9ea     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
2a9ee     D0 F9 D4 F9 
2a9f2     D6 F9 0E FB 
2a9f6     11 FC 13 FC 
2a9fa     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
2a9fe     19 FC 1B FC 
2aa02     1D FC 1E FC 
2aa06     21 FC 22 FC 
2aa0a     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
2aa0e     F7 F9 F7 F9 
2aa12     FB F9 FE F9 
2aa16     00 FA 03 FA 
2aa1a     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
2aa1e     1B FC 45 FC 
2aa22     46 FC 48 FC 
2aa26     4A FC 4B FC 
2aa2a     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
2aa2e     52 FC 54 FC 
2aa32     F3 FB 82 FA 
2aa36     35 FA 28 FA 
2aa3a     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
2aa3e     31 FA 32 FA 
2aa42     37 FA 37 FA 
2aa46     3C FA 00 FC 
2aa4a     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
2aa4e     09 FC 0B FC 
2aa52     0F FC 12 FC 
2aa56     12 FC 15 FC 
2aa5a     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
2aa5e     8D FA 60 FA 
2aa62     5B FA 5C FA 
2aa66     60 FA 61 FA 
2aa6a     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
2aa6e     6C FA 6D FA 
2aa72     37 FC 3A FC 
2aa76     3B FC 3D FC 
2aa7a     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
2aa7e     43 FC 44 FC 
2aa82     45 FC 47 FC 
2aa86     51 FB AB FA 
2aa8a     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
2aa8e     8E FA 91 FA 
2aa92     93 FA 95 FA 
2aa96     98 FA 9B FA 
2aa9a     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
2aa9e     68 FC 6A FC 
2aaa2     6C FC 6E FC 
2aaa6     70 FC 72 FC 
2aaaa     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
2aaae     76 FC 3B FB 
2aab2     D0 FA BB FA 
2aab6     B9 FA BD FA 
2aaba     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
2aabe     C4 FA C6 FA 
2aac2     CA FA 13 FC 
2aac6     3A FC 3A FC 
2aaca     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2aace     41 FC 43 FC 
2aad2     44 FC 47 FC 
2aad6     48 FC 3C FC 
2aada     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2aade     E6 FA E8 FA 
2aae2     EB FA EE FA 
2aae6     F0 FA F2 FA 
2aaea     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2aaee     61 FC 66 FC 
2aaf2     68 FC 6B FC 
2aaf6     6C FC 6E FC 
2aafa     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2aafe     73 FC 75 FC 
2ab02     13 FC 3F FB 
2ab06     17 FB 12 FB 
2ab0a     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2ab0e     1A FB 1D FB 
2ab12     1F FB 20 FB 
2ab16     23 FB 92 FC 
2ab1a     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2ab1e     96 FC 97 FC 
2ab22     9A FC 9C FC 
2ab26     9E FC 9F FC 
2ab2a     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2ab2e     5A FB 41 FB 
2ab32     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2ab36     01 00 00 00 
2ab3a     00 00 00 00 
2ab3e     00 00 00 00 
2ab42     00 00 00 00 | mouse  file "mouse2.def"
2ab46     00 00 00 00 
2ab4a     00 00 00 00 
2ab4e     00 00 00 00 
2ab52     00 00 00 00 | 	byte	$00[16]
2ab56     01 01 00 00 
2ab5a     00 00 00 00 
2ab5e     00 00 00 00 
2ab62     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ab66     00 00 00 00 
2ab6a     00 00 00 00 
2ab6e     00 00 00 00 
2ab72     00 00 00 00 | 	byte	$00[16]
2ab76     01 0D 01 00 
2ab7a     00 00 00 00 
2ab7e     00 00 00 00 
2ab82     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ab86     00 00 00 00 
2ab8a     00 00 00 00 
2ab8e     00 00 00 00 
2ab92     00 00 00 00 | 	byte	$00[16]
2ab96     01 0D 0D 01 
2ab9a     00 00 00 00 
2ab9e     00 00 00 00 
2aba2     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2aba6     00 00 00 00 
2abaa     00 00 00 00 
2abae     00 00 00 00 
2abb2     00 00 00 00 | 	byte	$00[16]
2abb6     01 0D 0D 0D 
2abba     01 00 00 00 
2abbe     00 00 00 00 
2abc2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2abc6     00 00 00 00 
2abca     00 00 00 00 
2abce     00 00 00 00 
2abd2     00 00 00 00 | 	byte	$00[16]
2abd6     01 0D 0D 0D 
2abda     0D 01 00 00 
2abde     00 00 00 00 
2abe2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2abe6     00 00 00 00 
2abea     00 00 00 00 
2abee     00 00 00 00 
2abf2     00 00 00 00 | 	byte	$00[16]
2abf6     01 0D 0D 0D 
2abfa     0D 0D 01 00 
2abfe     00 00 00 00 
2ac02     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ac06     00 00 00 00 
2ac0a     00 00 00 00 
2ac0e     00 00 00 00 
2ac12     00 00 00 00 | 	byte	$00[16]
2ac16     01 0D 0D 0D 
2ac1a     0D 0D 0D 01 
2ac1e     00 00 00 00 
2ac22     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2ac26     00 00 00 00 
2ac2a     00 00 00 00 
2ac2e     00 00 00 00 
2ac32     00 00 00 00 | 	byte	$00[16]
2ac36     01 0D 0D 0D 
2ac3a     0D 0D 0D 0C 
2ac3e     01 00 00 00 
2ac42     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2ac46     00 00 00 00 
2ac4a     00 00 00 00 
2ac4e     00 00 00 00 
2ac52     00 00 00 00 | 	byte	$00[16]
2ac56     01 0D 0D 0D 
2ac5a     0D 0D 0D 0D 
2ac5e     0C 01 00 00 
2ac62     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2ac66     00 00 00 00 
2ac6a     00 00 00 00 
2ac6e     00 00 00 00 
2ac72     00 00 00 00 | 	byte	$00[16]
2ac76     01 0D 0D 0D 
2ac7a     0D 0D 0D 0D 
2ac7e     0D 0C 01 00 
2ac82     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2ac86     00 00 00 00 
2ac8a     00 00 00 00 
2ac8e     00 00 00 00 
2ac92     00 00 00 00 | 	byte	$00[16]
2ac96     01 0D 0D 0D 
2ac9a     0D 0D 0D 0D 
2ac9e     0D 0D 0B 01 
2aca2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2aca6     00 00 00 00 
2acaa     00 00 00 00 
2acae     00 00 00 00 
2acb2     00 00 00 00 | 	byte	$00[16]
2acb6     01 0D 0D 0D 
2acba     0C 0D 0D 03 
2acbe     01 01 01 01 
2acc2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2acc6     00 00 00 00 
2acca     00 00 00 00 
2acce     00 00 00 00 
2acd2     00 00 00 00 | 	byte	$00[16]
2acd6     01 0D 0D 0C 
2acda     01 09 0D 03 
2acde     00 00 00 00 
2ace2     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2ace6     00 00 00 00 
2acea     00 00 00 00 
2acee     00 00 00 00 
2acf2     00 00 00 00 | 	byte	$00[16]
2acf6     01 0D 0C 01 
2acfa     00 01 0D 0B 
2acfe     01 00 00 00 
2ad02     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2ad06     00 00 00 00 
2ad0a     00 00 00 00 
2ad0e     00 00 00 00 
2ad12     00 00 00 00 | 	byte	$00[16]
2ad16     01 0C 01 00 
2ad1a     00 01 0A 0D 
2ad1e     01 00 00 00 
2ad22     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2ad26     00 00 00 00 
2ad2a     00 00 00 00 
2ad2e     00 00 00 00 
2ad32     00 00 00 00 | 	byte	$00[16]
2ad36     01 01 00 00 
2ad3a     00 00 01 0D 
2ad3e     0B 01 00 00 
2ad42     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2ad46     00 00 00 00 
2ad4a     00 00 00 00 
2ad4e     00 00 00 00 
2ad52     00 00 00 00 
2ad56     00 00 00 00 
2ad5a     00 00       | 	byte	$00[22]
2ad5c     01 0B 0D 01 
2ad60     00 00 00 00 
2ad64     00 00 00 00 
2ad68     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ad6c     00 00 00 00 
2ad70     00 00 00 00 
2ad74     00 00 00 00 
2ad78     00 00 00 00 
2ad7c     00          | 	byte	$00[17]
2ad7d     01 01 00 00 
2ad81     00 00 00 00 
2ad85     00 00 00 00 
2ad89     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ad8d     00 00 00 00 
      ...             
2af31     00 00 00 00 
2af35     00          | 	byte	$00[425]
2af36                 | 
2af36     00 00       |              	org
2af38 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
2af3c 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
2af40 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
2af44 003             | 
2af44 003 00 30 04 F6 |                 mov     psramaddr,#0
2af48 004             | 
2af48 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
2af4c 005 20 00 00 FF 
2af50 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
2af54 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
2af58 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
2af5c 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
2af60 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
2af64 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
2af68 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2af6c 00d             | 
2af6c 00d 20 00 00 FF 
2af70 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2af74 00f E0 03 00 FF 
2af78 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2af7c 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2af80 012             | 
2af80 012             |                 
2af80 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2af84 013             |     
2af84 013 01 2C 60 FD |                 cogid 	t11				' get id
2af88 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2af8c 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2af90 016             | 
2af90 016 00 00 00 00 | t11 		long 	0
2af94 017 00 FF 07 00 | mailbox 	long 	$7FF00
2af98 018 00 00 00 00 | psramaddr 	long 	0
2af9c 019 00 00 00 00 | pslockval	long 	0
2afa0 01a 00 00 00 00 | cmd             long    0
2afa4 01b 00 00 00 00 | buf1            long    0
2afa8 01c 00 40 00 00 | buf2            long    16384
2afac 01d B0 AF 02 00 | 	long	@@@_dat_ + 8468
2afb0 01e 50 32 20 52 
2afb4 01f 65 74 72 6F 
2afb8 020 6D 61 63 68 
2afbc 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2afc0 022 42 41 53 49 
2afc4 023 43 20 76 65 
2afc8 024 72 73 69 6F 
2afcc 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2afd0 026 32 35 00 00 | 	byte	$32, $35, $00, $00
2afd4 027             | 	alignl
2afd4 027             | _hg010b_spin2_dat_
2afd4 027             | 
2afd4 027 00 00 00 00 
2afd8 028 00 00 00 00 
2afdc 029 00 00 00 00 
2afe0 02a 00 00 00 00 
2afe4 02b 00 00 00    | vga_font       file "vgafont.def"
2afe7 02b 7E 81 A5 81 
2afeb 02c 81 BD 99 81 
2afef 02d 81 7E 00 00 
2aff3 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
2aff7 02f 7E FF DB FF 
2affb 030 FF C3 E7 FF 
2afff 031 FF 7E 00 00 
2b003 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
2b007 033 00 36 7F 7F 
2b00b 034 7F 7F 3E 1C 
2b00f 035 08 00 00 00 
2b013 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
2b017 037 00 08 1C 3E 
2b01b 038 7F 3E 1C 08 
2b01f 039 00 00 00 00 
2b023 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
2b027 03b 18 3C 3C E7 
2b02b 03c E7 E7 18 18 
2b02f 03d 3C 00 00 00 
2b033 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2b037 03f 18 3C 7E FF 
2b03b 040 FF 7E 18 18 
2b03f 041 3C 00 00 00 
2b043 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2b047 043 00 00 00 18 
2b04b 044 3C 3C 18 00 
2b04f 045 00 00 00 00 
2b053 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
2b057 047 FF FF FF E7 
2b05b 048 C3 C3 E7 FF 
2b05f 049 FF FF FF FF 
2b063 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2b067 04b 00 00 3C 66 
2b06b 04c 42 42 66 3C 
2b06f 04d 00 00 00 00 
2b073 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2b077 04f FF FF C3 99 
2b07b 050 BD BD 99 C3 
2b07f 051 FF FF FF FF 
2b083 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2b087 053 78 70 58 4C 
2b08b 054 1E 33 33 33 
2b08f 055 33 1E 00 00 
2b093 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2b097 057 3C 66 66 66 
2b09b 058 66 3C 18 7E 
2b09f 059 18 18 00 00 
2b0a3 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2b0a7 05b FC CC FC 0C 
2b0ab 05c 0C 0C 0C 0E 
2b0af 05d 0F 07 00 00 
2b0b3 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2b0b7 05f FE C6 FE C6 
2b0bb 060 C6 C6 C6 E6 
2b0bf 061 E7 67 03 00 
2b0c3 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2b0c7 063 18 18 DB 3C 
2b0cb 064 E7 3C DB 18 
2b0cf 065 18 00 00 00 
2b0d3 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2b0d7 067 03 07 0F 1F 
2b0db 068 7F 1F 0F 07 
2b0df 069 03 01 00 00 
2b0e3 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
2b0e7 06b 60 70 78 7C 
2b0eb 06c 7F 7C 78 70 
2b0ef 06d 60 40 00 00 
2b0f3 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
2b0f7 06f 18 3C 7E 18 
2b0fb 070 18 18 7E 3C 
2b0ff 071 18 00 00 00 
2b103 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
2b107 073 66 66 66 66 
2b10b 074 66 66 66    | 	byte	$66[7]
2b10e 075 00 66 66 00 
2b112 076 00 00 00 00 
2b116 077 00 FE DB DB 
2b11a 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2b11e 079 D8 D8 D8 00 
2b122 07a 00 00 00 3E 
2b126 07b 63 06 1C 36 
2b12a 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2b12e 07d 30 63 3E 00 
2b132 07e 00 00 00 00 
2b136 07f 00 00 00 00 
2b13a 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2b13e 081 7F 7F 7F 00 
2b142 082 00 00 00 00 
2b146 083 00 18 3C 7E 
2b14a 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2b14e 085 3C 18 7E 00 
2b152 086 00 00 00 00 
2b156 087 00 18 3C 7E 
2b15a 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2b15e 089 18 18 18 00 
2b162 08a 00 00 00 00 
2b166 08b 00 18 18 18 
2b16a 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2b16e 08d 7E 3C 18 00 
2b172 08e 00 00 00 00 
2b176 08f 00 00 00 18 
2b17a 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2b17e 091 00 00 00 00 
2b182 092 00 00 00 00 
2b186 093 00 00 00    | 	byte	$00[11]
2b189 094 0C 06 7F 06 
2b18d 095 0C 00 00 00 
2b191 096 00 00 00 00 
2b195 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b199 098 00 03 03 03 
2b19d 099 7F 00 00 00 
2b1a1 09a 00 00 00 00 
2b1a5 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b1a9 09c 14 36 7F 36 
2b1ad 09d 14 00 00 00 
2b1b1 09e 00 00 00 00 
2b1b5 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
2b1b9 0a0 1C 1C 3E 3E 
2b1bd 0a1 7F 7F 00 00 
2b1c1 0a2 00 00 00 00 
2b1c5 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2b1c9 0a4 7F 3E 3E 1C 
2b1cd 0a5 1C 08 00 00 
2b1d1 0a6 00 00 00 00 
2b1d5 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b1d9 0a8 00 00 00 00 
2b1dd 0a9 00 00 00 00 
2b1e1 0aa 00 00 00 00 
2b1e5 0ab 00 00       | 	byte	$00[14]
2b1e7 0ab 18 3C 3C 3C 
2b1eb 0ac 18 18 18 00 
2b1ef 0ad 18 18 00 00 
2b1f3 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2b1f7 0af 66 24 00 00 
2b1fb 0b0 00 00 00 00 
2b1ff 0b1 00 00 00 00 
2b203 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b207 0b3 00 36 36 7F 
2b20b 0b4 36 36 36 7F 
2b20f 0b5 36 36 00 00 
2b213 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
2b217 0b7 3E 63 43 03 
2b21b 0b8 3E 60 60 61 
2b21f 0b9 63 3E 18 18 
2b223 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
2b227 0bb 00 00 43 63 
2b22b 0bc 30 18 0C 06 
2b22f 0bd 63 61 00 00 
2b233 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
2b237 0bf 1C 36 36 1C 
2b23b 0c0 6E 3B 33 33 
2b23f 0c1 33 6E 00 00 
2b243 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
2b247 0c3 0C 0C 0C 06 
2b24b 0c4 00 00 00 00 
2b24f 0c5 00 00 00 00 
2b253 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b257 0c7 30 18 0C 0C 
2b25b 0c8 0C 0C 0C 0C 
2b25f 0c9 18 30 00 00 
2b263 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
2b267 0cb 0C 18 30 30 
2b26b 0cc 30 30 30 30 
2b26f 0cd 18 0C 00 00 
2b273 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2b277 0cf 00 00 00 66 
2b27b 0d0 3C FF 3C 66 
2b27f 0d1 00 00 00 00 
2b283 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2b287 0d3 00 00 00 18 
2b28b 0d4 18 7E 18 18 
2b28f 0d5 00 00 00 00 
2b293 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2b297 0d7 00 00 00 00 
2b29b 0d8 00 00 00 00 | 	byte	$00[8]
2b29f 0d9 18 18 18 0C 
2b2a3 0da 00 00 00 00 
2b2a7 0db 00 00 00 00 
2b2ab 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2b2af 0dd 00 00 00 00 
2b2b3 0de 00 00 00 00 
2b2b7 0df 00 00 00 00 
2b2bb 0e0 00 00 00 00 | 	byte	$00[16]
2b2bf 0e1 18 18 00 00 
2b2c3 0e2 00 00 00 00 
2b2c7 0e3 00 00 40 60 
2b2cb 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2b2cf 0e5 03 01 00 00 
2b2d3 0e6 00 00 00 00 
2b2d7 0e7 1C 36 63 63 
2b2db 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2b2df 0e9 36 1C 00 00 
2b2e3 0ea 00 00 00 00 
2b2e7 0eb 18 1C 1E 18 
2b2eb 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
2b2ef 0ed 18 7E 00 00 
2b2f3 0ee 00 00 00 00 
2b2f7 0ef 3E 63 60 30 
2b2fb 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
2b2ff 0f1 63 7F 00 00 
2b303 0f2 00 00 00 00 
2b307 0f3 3E 63 60 60 
2b30b 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2b30f 0f5 63 3E 00 00 
2b313 0f6 00 00 00 00 
2b317 0f7 30 38 3C 36 
2b31b 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
2b31f 0f9 30 78 00 00 
2b323 0fa 00 00 00 00 
2b327 0fb 7F 03 03 03 
2b32b 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
2b32f 0fd 63 3E 00 00 
2b333 0fe 00 00 00 00 
2b337 0ff 1C 06 03 03 
2b33b 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
2b33f 101 63 3E 00 00 
2b343 102 00 00 00 00 
2b347 103 7F 63 60 60 
2b34b 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2b34f 105 0C 0C 00 00 
2b353 106 00 00 00 00 
2b357 107 3E 63 63 63 
2b35b 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2b35f 109 63 3E 00 00 
2b363 10a 00 00 00 00 
2b367 10b 3E 63 63 63 
2b36b 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2b36f 10d 30 1E 00 00 
2b373 10e 00 00 00 00 
2b377 10f 00 00 00 18 
2b37b 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2b37f 111 18 18 00 00 
2b383 112 00 00 00 00 
2b387 113 00 00 00 18 
2b38b 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2b38f 115 18 18 0C 00 
2b393 116 00 00 00 00 
2b397 117 00 60 30 18 
2b39b 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2b39f 119 30 60 00 00 
2b3a3 11a 00 00 00 00 
2b3a7 11b 00 00 00 7E 
2b3ab 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2b3af 11d 00 00 00 00 
2b3b3 11e 00 00 00 00 
2b3b7 11f 00          | 	byte	$00[9]
2b3b8 120 06 0C 18 30 
2b3bc 121 60 30 18 0C 
2b3c0 122 06 00 00 00 
2b3c4 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
2b3c8 124 63 63 30 18 
2b3cc 125 18 18 00 18 
2b3d0 126 18 00 00 00 
2b3d4 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
2b3d8 128 3E 63 63 7B 
2b3dc 129 7B 7B 3B 03 
2b3e0 12a 3E 00 00 00 
2b3e4 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
2b3e8 12c 1C 36 63 63 
2b3ec 12d 7F 63 63 63 
2b3f0 12e 63 00 00 00 
2b3f4 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
2b3f8 130 66 66 66 3E 
2b3fc 131 66 66 66 66 
2b400 132 3F 00 00 00 
2b404 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
2b408 134 66 43 03 03 
2b40c 135 03 03 43 66 
2b410 136 3C 00 00 00 
2b414 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
2b418 138 36 66 66 66 
2b41c 139 66 66 66 36 
2b420 13a 1F 00 00 00 
2b424 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
2b428 13c 66 46 16 1E 
2b42c 13d 16 06 46 66 
2b430 13e 7F 00 00 00 
2b434 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
2b438 140 66 46 16 1E 
2b43c 141 16 06 06 06 
2b440 142 0F 00 00 00 
2b444 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
2b448 144 66 43 03 03 
2b44c 145 7B 63 63 66 
2b450 146 5C 00 00 00 
2b454 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
2b458 148 63 63 63 7F 
2b45c 149 63 63 63 63 
2b460 14a 63 00 00 00 
2b464 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
2b468 14c 18 18 18 18 
2b46c 14d 18 18 18 18 | 	byte	$18[8]
2b470 14e 3C 00 00 00 
2b474 14f 00 00 00 78 
2b478 150 30 30 30 30 
2b47c 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2b480 152 1E 00 00 00 
2b484 153 00 00 00 67 
2b488 154 66 66 36 1E 
2b48c 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2b490 156 67 00 00 00 
2b494 157 00 00 00 0F 
2b498 158 06 06 06 06 
2b49c 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2b4a0 15a 7F 00 00 00 
2b4a4 15b 00 00 00 63 
2b4a8 15c 77 7F 7F 6B 
2b4ac 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
2b4b0 15e 63 00 00 00 
2b4b4 15f 00 00 00 63 
2b4b8 160 67 6F 7F 7B 
2b4bc 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
2b4c0 162 63 00 00 00 
2b4c4 163 00 00 00 3E 
2b4c8 164 63 63 63 63 
2b4cc 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b4d0 166 3E 00 00 00 
2b4d4 167 00 00 00 3F 
2b4d8 168 66 66 66 3E 
2b4dc 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
2b4e0 16a 0F 00 00 00 
2b4e4 16b 00 00 00 3E 
2b4e8 16c 63 63 63 63 
2b4ec 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
2b4f0 16e 3E 30 70 00 
2b4f4 16f 00 00 00 3F 
2b4f8 170 66 66 66 3E 
2b4fc 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
2b500 172 67 00 00 00 
2b504 173 00 00 00 3E 
2b508 174 63 63 06 1C 
2b50c 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2b510 176 3E 00 00 00 
2b514 177 00 00 00 7E 
2b518 178 7E 5A 18 18 
2b51c 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2b520 17a 3C 00 00 00 
2b524 17b 00 00 00 63 
2b528 17c 63 63 63 63 
2b52c 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2b530 17e 3E 00 00 00 
2b534 17f 00 00 00 63 
2b538 180 63 63 63 63 
2b53c 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
2b540 182 08 00 00 00 
2b544 183 00 00 00 63 
2b548 184 63 63 63 6B 
2b54c 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
2b550 186 36 00 00 00 
2b554 187 00 00 00 63 
2b558 188 63 36 3E 1C 
2b55c 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
2b560 18a 63 00 00 00 
2b564 18b 00 00 00 66 
2b568 18c 66 66 66 3C 
2b56c 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
2b570 18e 3C 00 00 00 
2b574 18f 00 00 00 7F 
2b578 190 63 61 30 18 
2b57c 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2b580 192 7F 00 00 00 
2b584 193 00 00 00 3C 
2b588 194 0C 0C 0C 0C 
2b58c 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
2b590 196 3C 00 00 00 
2b594 197 00 00 00 00 
2b598 198 01 03 07 0E 
2b59c 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
2b5a0 19a 40 00 00 00 
2b5a4 19b 00 00 00 3C 
2b5a8 19c 30 30 30 30 
2b5ac 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
2b5b0 19e 3C 00 00 00 
2b5b4 19f 1C 36 00 00 
2b5b8 1a0 00 00 00 00 
2b5bc 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b5c0 1a2 00 00 00 00 
2b5c4 1a3 00 00 00 00 
2b5c8 1a4 00 00 00 00 
2b5cc 1a5 00 00 00 00 
2b5d0 1a6 00          | 	byte	$00[17]
2b5d1 1a6 FF 00 00 0C 
2b5d5 1a7 18 00 00 00 
2b5d9 1a8 00 00 00 00 
2b5dd 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b5e1 1aa 00 00 00 00 
2b5e5 1ab 00 00 00 00 
2b5e9 1ac 00          | 	byte	$00[9]
2b5ea 1ac 1E 30 3E 33 
2b5ee 1ad 33 33 6E 00 
2b5f2 1ae 00 00 00 00 
2b5f6 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
2b5fa 1b0 1E 36 66 66 
2b5fe 1b1 66 66 3E 00 
2b602 1b2 00 00 00 00 
2b606 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b60a 1b4 3E 63 03 03 
2b60e 1b5 03 63 3E 00 
2b612 1b6 00 00 00 00 
2b616 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
2b61a 1b8 3C 36 33 33 
2b61e 1b9 33 33 6E 00 
2b622 1ba 00 00 00 00 
2b626 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b62a 1bc 3E 63 7F 03 
2b62e 1bd 03 63 3E 00 
2b632 1be 00 00 00 00 
2b636 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
2b63a 1c0 0C 1E 0C 0C 
2b63e 1c1 0C 0C 1E 00 
2b642 1c2 00 00 00 00 
2b646 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b64a 1c4 6E 33 33 33 
2b64e 1c5 33 33 3E 30 
2b652 1c6 33 1E 00 00 
2b656 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
2b65a 1c8 36 6E 66 66 
2b65e 1c9 66 66 67 00 
2b662 1ca 00 00 00 00 
2b666 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
2b66a 1cc 1C 18 18 18 
2b66e 1cd 18 18 3C 00 
2b672 1ce 00 00 00 00 
2b676 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
2b67a 1d0 70 60 60 60 
2b67e 1d1 60 60 60 66 
2b682 1d2 66 3C 00 00 
2b686 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
2b68a 1d4 66 36 1E 1E 
2b68e 1d5 36 66 67 00 
2b692 1d6 00 00 00 00 
2b696 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
2b69a 1d8 18 18 18 18 
2b69e 1d9 18 18       | 	byte	$18[6]
2b6a0 1da 3C 00 00 00 
2b6a4 1db 00 00 00 00 
2b6a8 1dc 00 00 37 7F 
2b6ac 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
2b6b0 1de 63 00 00 00 
2b6b4 1df 00 00 00 00 
2b6b8 1e0 00 00 3B 66 
2b6bc 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2b6c0 1e2 66 00 00 00 
2b6c4 1e3 00 00 00 00 
2b6c8 1e4 00 00 3E 63 
2b6cc 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
2b6d0 1e6 3E 00 00 00 
2b6d4 1e7 00 00 00 00 
2b6d8 1e8 00 00 3B 66 
2b6dc 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2b6e0 1ea 3E 06 06 0F 
2b6e4 1eb 00 00 00 00 
2b6e8 1ec 00 00 6E 33 
2b6ec 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
2b6f0 1ee 3E 30 30 78 
2b6f4 1ef 00 00 00 00 
2b6f8 1f0 00 00 3B 6E 
2b6fc 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
2b700 1f2 0F 00 00 00 
2b704 1f3 00 00 00 00 
2b708 1f4 00 00 3E 63 
2b70c 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
2b710 1f6 3E 00 00 00 
2b714 1f7 00 00 00 08 
2b718 1f8 0C 0C 3F 0C 
2b71c 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2b720 1fa 38 00 00 00 
2b724 1fb 00 00 00 00 
2b728 1fc 00 00 33 33 
2b72c 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
2b730 1fe 6E 00 00 00 
2b734 1ff 00 00 00 00 
2b738 200 00 00 63 63 
2b73c 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
2b740 202 1C 00 00 00 
2b744 203 00 00 00 00 
2b748 204 00 00 63 63 
2b74c 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
2b750 206 36 00 00 00 
2b754 207 00 00 00 00 
2b758 208 00 00 63 36 
2b75c 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
2b760 20a 63 00 00 00 
2b764 20b 00 00 00 00 
2b768 20c 00 00 63 63 
2b76c 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
2b770 20e 7E 60 30 1F 
2b774 20f 00 00 00 00 
2b778 210 00 00 7F 33 
2b77c 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
2b780 212 7F 00 00 00 
2b784 213 00 00 00 70 
2b788 214 18 18 18 0E 
2b78c 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
2b790 216 70 00 00 00 
2b794 217 00 00 00 18 
2b798 218 18 18 18 18 
2b79c 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b7a0 21a 18 00 00 00 
2b7a4 21b 00 00 00 0E 
2b7a8 21c 18 18 18 70 
2b7ac 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
2b7b0 21e 0E 00 00 00 
2b7b4 21f 6E 3B 00 00 
2b7b8 220 00 00 00 00 
2b7bc 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b7c0 222 00 00 00 00 
2b7c4 223 00 00 00 00 
2b7c8 224 00 00       | 	byte	$00[10]
2b7ca 224 08 1C 36 63 
2b7ce 225 63 63 7F 00 
2b7d2 226 00 00 00 00 
2b7d6 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
2b7da 228 03 03 03 03 
2b7de 229 43 66 3C 18 
2b7e2 22a 30 1E 00 00 
2b7e6 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
2b7ea 22c 33 33 33 33 
2b7ee 22d 33 33       | 	byte	$33[6]
2b7f0 22e 6E 00 00 00 
2b7f4 22f 00 00 60 30 
2b7f8 230 18 00 3E 63 
2b7fc 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
2b800 232 3E 00 00 00 
2b804 233 00 00 08 1C 
2b808 234 36 00 1E 30 
2b80c 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
2b810 236 6E 00 00 00 
2b814 237 00 00 00 00 
2b818 238 33 00 1E 30 
2b81c 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
2b820 23a 6E 00 00 00 
2b824 23b 00 00 1C 36 
2b828 23c 1C 00 33 33 
2b82c 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
2b830 23e 6E 00 00 00 
2b834 23f 00 00 60 30 
2b838 240 18 00 3E 63 
2b83c 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
2b840 242 3E 00 00 00 
2b844 243 00 00 00 00 
2b848 244 00 00 3E 63 
2b84c 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
2b850 246 3E 18 30 1E 
2b854 247 00 00 00 1C 
2b858 248 58 78 38 18 
2b85c 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
2b860 24a 3C 00 00 00 
2b864 24b 00 00 00 00 
2b868 24c 63 00 3E 63 
2b86c 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
2b870 24e 3E 00 00 00 
2b874 24f 66 33 00 3E 
2b878 250 63 63 63 63 
2b87c 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b880 252 3E 00 00 00 
2b884 253 00 00 CC 66 
2b888 254 33 00 3E 63 
2b88c 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
2b890 256 3E 00 00 00 
2b894 257 00 00 18 3C 
2b898 258 66 00 1C 18 
2b89c 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
2b8a0 25a 3C 00 00 00 
2b8a4 25b 30 18 00 7F 
2b8a8 25c 63 61 30 18 
2b8ac 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2b8b0 25e 7F 00 00 00 
2b8b4 25f 00 63 00 08 
2b8b8 260 1C 36 63 63 
2b8bc 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
2b8c0 262 63 00 00 00 
2b8c4 263 30 18 00 3C 
2b8c8 264 66 43 03 03 
2b8cc 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
2b8d0 266 3C 00 00 00 
2b8d4 267 30 18 00 7F 
2b8d8 268 66 46 16 1E 
2b8dc 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
2b8e0 26a 7F 00 00 00 
2b8e4 26b 0C 06 00 0F 
2b8e8 26c 06 06 06 06 
2b8ec 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2b8f0 26e 7F 00 00 00 
2b8f4 26f 30 18 00 1C 
2b8f8 270 18 18 18 18 
2b8fc 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
2b900 272 3C 00 00 00 
2b904 273 00 00 08 1C 
2b908 274 36 00 3E 63 
2b90c 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
2b910 276 3E 00 00 00 
2b914 277 00 00 00 00 
2b918 278 63 00 3E 63 
2b91c 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
2b920 27a 3E 00 00 00 
2b924 27b 00 00 00 6F 
2b928 27c 46 26 06 06 
2b92c 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
2b930 27e 7F 00 00 00 
2b934 27f 00 00 00 6E 
2b938 280 4C 2C 0C 0C 
2b93c 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
2b940 282 1E 00 00 00 
2b944 283 30 18 00 3E 
2b948 284 63 63 06 1C 
2b94c 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2b950 286 3E 00 00 00 
2b954 287 00 00 60 30 
2b958 288 18 00 3E 63 
2b95c 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
2b960 28a 3E 00 00 00 
2b964 28b 00 63 00 3E 
2b968 28c 63 63 63 63 
2b96c 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b970 28e 3E 00 00 00 
2b974 28f 00 63 00 63 
2b978 290 63 63 63 63 
2b97c 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2b980 292 3E 00 00 00 
2b984 293 6C 38 00 7E 
2b988 294 7E 5A 18 18 
2b98c 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2b990 296 3C 00 00 00 
2b994 297 00 00 60 48 
2b998 298 2C 0C 3F 0C 
2b99c 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2b9a0 29a 38 00 00 00 
2b9a4 29b 00 00 00 0F 
2b9a8 29c 26 36 1E 0E 
2b9ac 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
2b9b0 29e 7F 00 00 00 
2b9b4 29f 00 00 00 00 
2b9b8 2a0 00 63 36 1C 
2b9bc 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
2b9c0 2a2 00 00 00 00 
2b9c4 2a3 00 00       | 	byte	$00[6]
2b9c6 2a3 36 1C 08 00 
2b9ca 2a4 3E 63 03 03 
2b9ce 2a5 03 63 3E 00 
2b9d2 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
2b9d6 2a7 30 18 0C 00 
2b9da 2a8 1E 30 3E 33 
2b9de 2a9 33 33 6E 00 
2b9e2 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2b9e6 2ab 60 30 18 00 
2b9ea 2ac 1C 18 18 18 
2b9ee 2ad 18 18 3C 00 
2b9f2 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
2b9f6 2af 60 30 18 00 
2b9fa 2b0 3E 63 63 63 
2b9fe 2b1 63 63 3E 00 
2ba02 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
2ba06 2b3 30 18 0C 00 
2ba0a 2b4 33 33 33 33 
2ba0e 2b5 33 33 6E 00 
2ba12 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2ba16 2b7 00 08 1C 36 
2ba1a 2b8 63 63 7F 63 
2ba1e 2b9 63 63 63 18 
2ba22 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
2ba26 2bb 00 00 00 00 
2ba2a 2bc 1E 30 3E 33 
2ba2e 2bd 33 33 6E 18 
2ba32 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
2ba36 2bf 00 7F 63 61 
2ba3a 2c0 30 18 0C 06 
2ba3e 2c1 43 63 7F 00 
2ba42 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
2ba46 2c3 36 1C 08 00 
2ba4a 2c4 7F 33 18 0C 
2ba4e 2c5 06 63 7F 00 
2ba52 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
2ba56 2c7 00 7F 66 46 
2ba5a 2c8 16 1E 16 06 
2ba5e 2c9 46 66 7F 18 
2ba62 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
2ba66 2cb 00 00 00 00 
2ba6a 2cc 3E 63 7F 03 
2ba6e 2cd 03 63 3E 18 
2ba72 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
2ba76 2cf 00 3C 66 03 
2ba7a 2d0 1F 03 0F 03 
2ba7e 2d1 03 66 3C 00 
2ba82 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
2ba86 2d3 60 30 18 00 
2ba8a 2d4 7F 33 18 0C 
2ba8e 2d5 06 63 7F 00 
2ba92 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
2ba96 2d7 00 3C 66 43 
2ba9a 2d8 03 03 03 03 
2ba9e 2d9 43 66 3C 00 
2baa2 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
2baa6 2db 00 00 00 00 
2baaa 2dc 3E 63 06 1C 
2baae 2dd 30 63 3E 18 
2bab2 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
2bab6 2df 00 00 00 00 
2baba 2e0 00 00       | 	byte	$00[6]
2babc 2e1 6C 36 1B 36 
2bac0 2e2 6C 00 00 00 
2bac4 2e3 00 00 00 00 
2bac8 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bacc 2e5 1B 36 6C 36 
2bad0 2e6 1B 00 00 00 
2bad4 2e7 88 22 88 22 
2bad8 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
2badc 2e9 88 22 88 22 
2bae0 2ea 88 22 88 22 
2bae4 2eb AA 55 AA 55 
2bae8 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
2baec 2ed AA 55 AA 55 
2baf0 2ee AA 55 AA 55 
2baf4 2ef BB EE BB EE 
2baf8 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
2bafc 2f1 BB EE BB EE 
2bb00 2f2 BB EE BB EE 
2bb04 2f3 18 18 18 18 
2bb08 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
2bb0c 2f5 18 18 18 18 
2bb10 2f6 18 18 18 18 
2bb14 2f7 18 18 18 18 
2bb18 2f8 18 18 18    | 	byte	$18[15]
2bb1b 2f8 1F 18 18 18 
2bb1f 2f9 18 18 18 18 
2bb23 2fa 18 30 18 00 
2bb27 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
2bb2b 2fc 63 7F 63 63 
2bb2f 2fd 63 63 00 00 
2bb33 2fe 00 1C 36 00 
2bb37 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
2bb3b 300 63 7F 63 63 
2bb3f 301 63 63 00 00 
2bb43 302 00 36 1C 00 
2bb47 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
2bb4b 304 1E 16 06 46 
2bb4f 305 66 7F 00 00 
2bb53 306 00 00 00 00 
2bb57 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
2bb5b 308 1C 30 60 63 
2bb5f 309 63 3E 18 30 
2bb63 30a 1E 6C 6C 6C 
2bb67 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
2bb6b 30c 6F 6C 6C 6C 
2bb6f 30d 6C 6C 6C 6C 
2bb73 30e 6C 6C 6C 6C 
2bb77 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2bb7b 310 6C 6C 6C 6C 
2bb7f 311 6C 6C 6C 6C 
2bb83 312 6C          | 	byte	$6c[9]
2bb84 313 00 00 00 00 
2bb88 314 00          | 	byte	$00[5]
2bb89 314 7F 60 6F 6C 
2bb8d 315 6C 6C 6C 6C 
2bb91 316 6C 6C 6C 6C 
2bb95 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2bb99 318 6F 60 7F 00 
2bb9d 319 00 00 00 00 
2bba1 31a 00 00 00 18 
2bba5 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
2bba9 31c 61 30 18 0C 
2bbad 31d 06 43 63 7F 
2bbb1 31e 00 00 00 00 
2bbb5 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
2bbb9 320 00 7F 33 18 
2bbbd 321 0C 06 63 7F 
2bbc1 322 00 00 00 00 
2bbc5 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
2bbc9 324 00 00 1F 18 
2bbcd 325 18 18 18 18 
2bbd1 326 18 18 18 18 
2bbd5 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2bbd9 328 18 18 F8 00 
2bbdd 329 00 00 00 00 
2bbe1 32a 00 00 00 18 
2bbe5 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2bbe9 32c 18 18 FF 00 
2bbed 32d 00 00 00 00 
2bbf1 32e 00 00 00 00 
2bbf5 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bbf9 330 00 00 FF 18 
2bbfd 331 18 18 18 18 
2bc01 332 18 18 18 18 
2bc05 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2bc09 334 18 18 F8 18 
2bc0d 335 18 18 18 18 
2bc11 336 18 18 18 00 
2bc15 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2bc19 338 00 00 FF 00 
2bc1d 339 00 00 00 00 
2bc21 33a 00 00 00 18 
2bc25 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2bc29 33c 18 18 FF 18 
2bc2d 33d 18 18 18 18 
2bc31 33e 18 18 18 63 
2bc35 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
2bc39 340 36 63 63 7F 
2bc3d 341 63 63 63 63 
2bc41 342 00 00 00 00 
2bc45 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
2bc49 344 00 1E 30 3E 
2bc4d 345 33 33 33 6E 
2bc51 346 00 00 00 6C 
2bc55 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2bc59 348 EC 0C FC 00 
2bc5d 349 00 00 00 00 
2bc61 34a 00 00 00 00 
2bc65 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bc69 34c FC 0C EC 6C 
2bc6d 34d 6C 6C 6C 6C 
2bc71 34e 6C 6C 6C 6C 
2bc75 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2bc79 350 EF 00 FF 00 
2bc7d 351 00 00 00 00 
2bc81 352 00 00 00 00 
2bc85 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bc89 354 FF 00 EF 6C 
2bc8d 355 6C 6C 6C 6C 
2bc91 356 6C 6C 6C 6C 
2bc95 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2bc99 358 EC 0C EC 6C 
2bc9d 359 6C 6C 6C 6C 
2bca1 35a 6C 6C 6C 00 
2bca5 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2bca9 35c FF 00 FF 00 
2bcad 35d 00 00 00 00 
2bcb1 35e 00 00 00 6C 
2bcb5 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2bcb9 360 EF 00 EF 6C 
2bcbd 361 6C 6C 6C 6C 
2bcc1 362 6C 6C 6C 00 
2bcc5 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2bcc9 364 63 3E 63 63 
2bccd 365 63 63 3E 63 
2bcd1 366 00 00 00 00 
2bcd5 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
2bcd9 368 30 3C 36 33 
2bcdd 369 33 33 33 6E 
2bce1 36a 00 00 00 00 
2bce5 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
2bce9 36c 66 66 6F 66 
2bced 36d 66 66 36 1F 
2bcf1 36e 00 00 00 36 
2bcf5 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
2bcf9 370 66 66 66 66 
2bcfd 371 66 66       | 	byte	$66[6]
2bcff 371 36 1F 00 00 
2bd03 372 00 00 63 00 
2bd07 373 7F 66 46 16 
2bd0b 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
2bd0f 375 66 7F 00 00 
2bd13 376 00 6C 38 00 
2bd17 377 38 30 30 3C 
2bd1b 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
2bd1f 379 33 6E 00 00 
2bd23 37a 00 36 1C 00 
2bd27 37b 63 67 6F 7F 
2bd2b 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
2bd2f 37d 63 63 00 00 
2bd33 37e 00 30 18 00 
2bd37 37f 3C 18 18 18 
2bd3b 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2bd3f 381 18 3C 00 00 
2bd43 382 00 3C 66 00 
2bd47 383 3C 18 18 18 
2bd4b 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2bd4f 385 18 3C 00 00 
2bd53 386 00 00 00 36 
2bd57 387 1C 08 00 3E 
2bd5b 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
2bd5f 389 63 3E 00 00 
2bd63 38a 00 18 18 18 
2bd67 38b 18 18 18 18 
2bd6b 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
2bd6f 38d 00 00 00 00 
2bd73 38e 00 00 00 00 
2bd77 38f 00 00 00 00 | 	byte	$00[12]
2bd7b 390 F8 18 18 18 
2bd7f 391 18 18 18 18 
2bd83 392 18 FF FF FF 
2bd87 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
2bd8b 394 FF FF FF FF 
2bd8f 395 FF FF FF FF 
2bd93 396 FF          | 	byte	$ff[9]
2bd94 397 00 00 00 00 
2bd98 398 00 00 00    | 	byte	$00[7]
2bd9b 398 FF FF FF FF 
2bd9f 399 FF FF FF FF 
2bda3 39a FF          | 	byte	$ff[9]
2bda4 39b 00 00 00 7E 
2bda8 39c 7E 5A 18 18 
2bdac 39d 18 18 18 18 
2bdb0 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
2bdb4 39f 1C 36 1C 63 
2bdb8 3a0 63 63 63 63 
2bdbc 3a1 63 63 63 63 
2bdc0 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bdc4 3a3 FF FF FF FF 
2bdc8 3a4 FF FF FF    | 	byte	$ff[7]
2bdcb 3a4 00 00 00 00 
2bdcf 3a5 00 00 00 00 
2bdd3 3a6 00          | 	byte	$00[9]
2bdd4 3a7 30 18 00 3E 
2bdd8 3a8 63 63 63 63 
2bddc 3a9 63 63 63 63 
2bde0 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bde4 3ab 00 00 00 1E 
2bde8 3ac 33 33 33 1B 
2bdec 3ad 33 63 63 63 
2bdf0 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
2bdf4 3af 1C 36 00 3E 
2bdf8 3b0 63 63 63 63 
2bdfc 3b1 63 63 63 63 
2be00 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2be04 3b3 30 18 00 63 
2be08 3b4 67 6F 7F 7B 
2be0c 3b5 73 63 63 63 
2be10 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
2be14 3b7 00 00 60 30 
2be18 3b8 18 00 3B 66 
2be1c 3b9 66 66 66 66 
2be20 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2be24 3bb 00 00 36 1C 
2be28 3bc 08 00 3B 66 
2be2c 3bd 66 66 66 66 
2be30 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2be34 3bf 36 1C 00 3E 
2be38 3c0 63 63 06 1C 
2be3c 3c1 30 60 63 63 
2be40 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
2be44 3c3 00 00 36 1C 
2be48 3c4 08 00 3E 63 
2be4c 3c5 06 1C 30 63 
2be50 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
2be54 3c7 30 18 00 3F 
2be58 3c8 66 66 66 3E 
2be5c 3c9 36 66 66 66 
2be60 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
2be64 3cb 30 18 00 63 
2be68 3cc 63 63 63 63 
2be6c 3cd 63 63 63 63 
2be70 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2be74 3cf 00 00 60 30 
2be78 3d0 18 00 3B 6E 
2be7c 3d1 66 06 06 06 
2be80 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
2be84 3d3 66 33 00 63 
2be88 3d4 63 63 63 63 
2be8c 3d5 63 63 63 63 
2be90 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2be94 3d7 00 00 60 30 
2be98 3d8 18 00 63 63 
2be9c 3d9 63 63 63 63 
2bea0 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
2bea4 3db 30 18 00 66 
2bea8 3dc 66 66 66 3C 
2beac 3dd 18 18 18 18 
2beb0 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
2beb4 3df 00 00 00 08 
2beb8 3e0 0C 0C 3F 0C 
2bebc 3e1 0C 0C 0C 6C 
2bec0 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
2bec4 3e3 30 18 00 00 
2bec8 3e4 00 00 00 00 
2becc 3e5 00 00 00 00 
2bed0 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bed4 3e7 00 00 00 00 
2bed8 3e8 00 00 00 00 | 	byte	$00[8]
2bedc 3e9 7F 00 00 00 
2bee0 3ea 00 00 00 00 
2bee4 3eb 66 33 00 00 
2bee8 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
2beec 3ed 00 00 00 00 
2bef0 3ee 00 00 00 00 
2bef4 3ef 00 00 00 00 
2bef8 3f0 00 00 00 00 
2befc 3f1 00 00 00 00 
2bf00 3f2 00          | 	byte	$00[21]
2bf01 3f2 0C 06 3C 36 
2bf05 3f3 1C 00 00 00 
2bf09 3f4 00 00 00 00 
2bf0d 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bf11 3f6 00 00 00 63 
2bf15 3f7 3E 00 00 00 
2bf19 3f8 00 00 00 00 
2bf1d 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bf21 3fa 00 00 00 00 
2bf25 3fb 3E 63 06 1C 
2bf29 3fc 36 63 63 36 
2bf2d 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
2bf31 3fe 00 00 00 00 
2bf35 3ff 00 00 00 00 | 	byte	$00[8]
2bf39 400 18 00 7E 00 
2bf3d 401 18 00 00 00 
2bf41 402 00 00 00 00 
2bf45 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bf49 404 00 00 00 00 
2bf4d 405 00 00 00 00 | 	byte	$00[8]
2bf51 406 18 30 1E 00 
2bf55 407 00 00 1C 36 
2bf59 408 36 1C 00 00 
2bf5d 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
2bf61 40a 00 00 00 00 
2bf65 40b 63 00 00 00 
2bf69 40c 00 00 00 00 
2bf6d 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bf71 40e 00 00 00 18 
2bf75 40f 18 00 00 00 
2bf79 410 00 00 00 00 
2bf7d 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bf81 412 00 00 00 00 
2bf85 413 00          | 	byte	$00[5]
2bf86 413 CC 66 33 00 
2bf8a 414 33 33 33 33 
2bf8e 415 33 33 6E 00 
2bf92 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
2bf96 417 00 3F 66 66 
2bf9a 418 66 3E 36 66 
2bf9e 419 66 66 6F 00 
2bfa2 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
2bfa6 41b 36 1C 08 00 
2bfaa 41c 3B 6E 66 06 
2bfae 41d 06 06 0F 00 
2bfb2 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
2bfb6 41f 00 00 00 7E 
2bfba 420 7E 7E 7E 7E 
2bfbe 421 7E 7E 00 00 
2bfc2 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
2bfc6 423 00 00 00 00 
2bfca 424 00 00 00 00 
2bfce 425 00 00 00 00 
2bfd2 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bfd4 427             | 'vga_font       file "vgafont.def"
2bfd4 427 00 00 00 00 
      ...             
2c004 433 00 00 00 00 
2c008 434 00 00 00    | st_font        file "st4font.def"
2c00b 434 FF FF 00 00 
2c00f 435 00 00 00 00 
2c013 436 00 18 18 18 
2c017 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2c01b 438 18 18 18 18 
2c01f 439 18 18 18 18 
2c023 43a 18          | 	byte	$18[9]
2c024 43b 00 00 00 00 
2c028 43c 00 00 00    | 	byte	$00[7]
2c02b 43c FF FF 18 18 
2c02f 43d 18 18 18 18 
2c033 43e 18 18 18 18 
2c037 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c03b 440 FF FF 00 00 
2c03f 441 00 00 00 00 
2c043 442 00 18 18 18 
2c047 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2c04b 444 1F 1F 18 18 
2c04f 445 18 18 18 18 
2c053 446 18 18 18 18 
2c057 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c05b 448 F8 F8 18 18 
2c05f 449 18 18 18 18 
2c063 44a 18 00 00 00 
2c067 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c06b 44c 1F 1F 18 18 
2c06f 44d 18 18 18 18 
2c073 44e 18 00 00 00 
2c077 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c07b 450 F8 F8 18 18 
2c07f 451 18 18 18 18 
2c083 452 18 18 18 18 
2c087 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c08b 454 1F 1F 00 00 
2c08f 455 00 00 00 00 
2c093 456 00 18 18 18 
2c097 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2c09b 458 F8 F8 00 00 
2c09f 459 00 00 00 00 
2c0a3 45a 00 18 18 18 
2c0a7 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2c0ab 45c FF FF 18 18 
2c0af 45d 18 18 18 18 
2c0b3 45e 18 00 00 18 
2c0b7 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
2c0bb 460 66 7E 7E 66 
2c0bf 461 66 66 66 30 
2c0c3 462 18 00 00 7E 
2c0c7 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
2c0cb 464 3E 06 06 06 
2c0cf 465 06 7E 7E 18 
2c0d3 466 0C 30 18 3C 
2c0d7 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
2c0db 468 06 06 06 66 
2c0df 469 66 7E 3C 00 
2c0e3 46a 00 30 18 66 
2c0e7 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
2c0eb 46c 7E 7E 76 76 
2c0ef 46d 66 66 66 00 
2c0f3 46e 00 30 18 7C 
2c0f7 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
2c0fb 470 1C 38 70 60 
2c0ff 471 60 7E 3E 00 
2c103 472 00 30 18 7E 
2c107 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
2c10b 474 18 0C 0C 06 
2c10f 475 06 7E 7E 00 
2c113 476 00 18 18 00 
2c117 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
2c11b 478 18 18 0C 0C 
2c11f 479 06 7E 7E 00 
2c123 47a 00 30 18 3C 
2c127 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
2c12b 47c 66 66 66 66 
2c12f 47d 66          | 	byte	$66[5]
2c130 47e 7E 3C 00 00 
2c134 47f 00 00 06 06 
2c138 480 06 06 16 1E 
2c13c 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
2c140 482 7E 7E 00 00 
2c144 483 00 00 00 00 
2c148 484 00 3C 7C 60 
2c14c 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
2c150 486 7E 7C 30 18 
2c154 487 00 00 00 00 
2c158 488 00 3C 7E 66 
2c15c 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
2c160 48a 7E 7C 18 0C 
2c164 48b 00 00 30 18 
2c168 48c 00 3C 3E 06 
2c16c 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
2c170 48e 7E 7C 00 00 
2c174 48f 00 00 30 18 
2c178 490 00 3E 7E 66 
2c17c 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
2c180 492 66 66 00 00 
2c184 493 00 00 30 18 
2c188 494 00 7C 7E 06 
2c18c 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
2c190 496 7E 3E 00 00 
2c194 497 00 00 30 18 
2c198 498 00 7E 7E 30 
2c19c 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c1a0 49a 7E 7E 00 00 
2c1a4 49b 00 00 18 18 
2c1a8 49c 00 7E 7E 30 
2c1ac 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c1b0 49e 7E 7E 00 00 
2c1b4 49f 00 00 30 18 
2c1b8 4a0 00 3C 7E 66 
2c1bc 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
2c1c0 4a2 7E 3C 00 00 
2c1c4 4a3 00 00 1C 1C 
2c1c8 4a4 18 18 38 3C 
2c1cc 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
2c1d0 4a6 3C 3C 00 00 
2c1d4 4a7 00 00 00 00 
2c1d8 4a8 00 00 00 00 
2c1dc 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c1e0 4aa 00 00 00 00 
2c1e4 4ab 00 00       | 	byte	$00[6]
2c1e6 4ab 18 18 18 18 
2c1ea 4ac 18 18 18 18 | 	byte	$18[8]
2c1ee 4ad 00 00 18 18 
2c1f2 4ae 00 00 00 00 
2c1f6 4af 66 66 66 66 
2c1fa 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
2c1fe 4b1 00 00 00 00 
2c202 4b2 00 00 00 00 
2c206 4b3 00          | 	byte	$00[9]
2c207 4b3 66 66 FF FF 
2c20b 4b4 66 66 FF FF 
2c20f 4b5 66 66 00 00 
2c213 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
2c217 4b7 7C 7E 06 06 
2c21b 4b8 3E 7C 60 60 
2c21f 4b9 7E 3E 18 18 
2c223 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
2c227 4bb 66 30 30 18 
2c22b 4bc 18 0C 0C 66 
2c22f 4bd 66 00 00 00 
2c233 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
2c237 4bf 66 66 3C 1C 
2c23b 4c0 1C FC FE 66 
2c23f 4c1 66 FE FC 00 
2c243 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
2c247 4c3 18 18 18 18 
2c24b 4c4 00 00 00 00 
2c24f 4c5 00 00 00 00 
2c253 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
2c257 4c7 18 1C 0C 0C 
2c25b 4c8 0C 0C 0C 0C 
2c25f 4c9 1C 18 30 00 
2c263 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
2c267 4cb 18 38 30 30 
2c26b 4cc 30 30 30 30 
2c26f 4cd 38 18 0C 00 
2c273 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
2c277 4cf 66 66 3C 3C 
2c27b 4d0 FF FF 3C 3C 
2c27f 4d1 66 66 00 00 
2c283 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
2c287 4d3 00 18 18 18 
2c28b 4d4 7E 7E 18 18 
2c28f 4d5 18 00 00 00 
2c293 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c297 4d7 00 00 00 00 
2c29b 4d8 00 00       | 	byte	$00[6]
2c29d 4d9 18 18 18 18 
2c2a1 4da 18          | 	byte	$18[5]
2c2a2 4da 0C 04 00 00 
2c2a6 4db 00 00 00 00 
2c2aa 4dc 7E 7E 00 00 
2c2ae 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
2c2b2 4de 00 00 00 00 
2c2b6 4df 00 00 00 00 
2c2ba 4e0 00 00 00 00 
2c2be 4e1 00          | 	byte	$00[13]
2c2bf 4e1 18 18 18 00 
2c2c3 4e2 00 00 00 60 
2c2c7 4e3 60 60 30 30 
2c2cb 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
2c2cf 4e5 06 06 06 00 
2c2d3 4e6 00 00 00 3C 
2c2d7 4e7 7E 66 66 66 
2c2db 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
2c2df 4e9 66 7E 3C 00 
2c2e3 4ea 00 00 00 18 
2c2e7 4eb 18 1C 1C 18 
2c2eb 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
2c2ef 4ed 18 7E 7E 00 
2c2f3 4ee 00 00 00 3C 
2c2f7 4ef 7E 66 66 30 
2c2fb 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
2c2ff 4f1 0C 7E 7E 00 
2c303 4f2 00 00 00 7E 
2c307 4f3 7E 30 30 18 
2c30b 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
2c30f 4f5 66 7E 3C 00 
2c313 4f6 00 00 00 30 
2c317 4f7 30 38 38 3C 
2c31b 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
2c31f 4f9 7E 30 30 00 
2c323 4fa 00 00 00 7E 
2c327 4fb 7E 06 06 3E 
2c32b 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
2c32f 4fd 66 7E 3C 00 
2c333 4fe 00 00 00 38 
2c337 4ff 3C 0E 06 06 
2c33b 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
2c33f 501 66 7E 3C 00 
2c343 502 00 00 00 7E 
2c347 503 7E 60 60 30 
2c34b 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
2c34f 505 0C 0C 0C 00 
2c353 506 00 00 00 3C 
2c357 507 7E 66 66 3C 
2c35b 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
2c35f 509 66 7E 3C 00 
2c363 50a 00 00 00 3C 
2c367 50b 7E 66 66 7E 
2c36b 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
2c36f 50d 70 3C 1C 00 
2c373 50e 00 00 00 00 
2c377 50f 00 00 18 18 
2c37b 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
2c37f 511 18 18 18 00 
2c383 512 00 00 00 00 
2c387 513 00 00 18 18 
2c38b 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
2c38f 515 18 18 18 0C 
2c393 516 04 00 00 00 
2c397 517 70 38 1C 0E 
2c39b 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
2c39f 519 70 00 00 00 
2c3a3 51a 00 00 00 00 
2c3a7 51b 00 00 7E 7E 
2c3ab 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
2c3af 51d 00 00 00 00 
2c3b3 51e 00 00 00 00 | 	byte	$00[8]
2c3b7 51f 0E 1C 38 70 
2c3bb 520 E0 70 38 1C 
2c3bf 521 0E 00 00 00 
2c3c3 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
2c3c7 523 7E 66 66 30 
2c3cb 524 30 18 18 18 
2c3cf 525 00 18 18 00 
2c3d3 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
2c3d7 527 7E 66 66 66 
2c3db 528 66 36 06 66 
2c3df 529 66 7E 3C 00 
2c3e3 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
2c3e7 52b 3C 7E 66 66 
2c3eb 52c 66 7E 7E 66 
2c3ef 52d 66 66 66 00 
2c3f3 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
2c3f7 52f 7E 66 66 7E 
2c3fb 530 3E 66 66 66 
2c3ff 531 66 7E 3E 00 
2c403 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
2c407 533 7E 66 66 06 
2c40b 534 06 06 06 66 
2c40f 535 66 7E 3C 00 
2c413 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
2c417 537 7E 66 66 66 
2c41b 538 66 66 66 66 
2c41f 539 66 7E 3E 00 
2c423 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
2c427 53b 7E 06 06 3E 
2c42b 53c 3E 06 06 06 
2c42f 53d 06 7E 7E 00 
2c433 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
2c437 53f 7E 06 06 3E 
2c43b 540 3E 06 06 06 
2c43f 541 06 06 06 00 
2c443 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
2c447 543 7E 06 06 76 
2c44b 544 76 66 66 66 
2c44f 545 66 7E 3C 00 
2c453 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
2c457 547 66 66 66 7E 
2c45b 548 7E 66 66 66 
2c45f 549 66 66 66 00 
2c463 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
2c467 54b 7E 18 18 18 
2c46b 54c 18 18 18 18 
2c46f 54d 18 7E 7E 00 
2c473 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
2c477 54f 60 60 60 60 
2c47b 550 60 60 60    | 	byte	$60[7]
2c47e 551 66 66 7E 3C 
2c482 552 00 00 00 00 
2c486 553 66 66 36 36 
2c48a 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
2c48e 555 66 66 C6 C6 
2c492 556 00 00 00 00 
2c496 557 06 06 06 06 
2c49a 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
2c49e 559 06 06 7E 7E 
2c4a2 55a 00 00 00 00 
2c4a6 55b C6 C6 EE EE 
2c4aa 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
2c4ae 55d C6 C6 C6 C6 
2c4b2 55e 00 00 00 00 
2c4b6 55f 66 66 66 6E 
2c4ba 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
2c4be 561 76 66 66 66 
2c4c2 562 00 00 00 00 
2c4c6 563 3C 7E 66 66 
2c4ca 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2c4ce 565 66 66 7E 3C 
2c4d2 566 00 00 00 00 
2c4d6 567 3E 7E 66 66 
2c4da 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
2c4de 569 06 06 06 06 
2c4e2 56a 00 00 00 00 
2c4e6 56b 3C 7E 66 66 
2c4ea 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2c4ee 56d 66 56 3E 6C 
2c4f2 56e 00 00 00 00 
2c4f6 56f 3E 7E 66 66 
2c4fa 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
2c4fe 571 66 66 C6 C6 
2c502 572 00 00 00 00 
2c506 573 7C 7E 06 06 
2c50a 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
2c50e 575 60 60 7E 3E 
2c512 576 00 00 00 00 
2c516 577 7E 7E 18 18 
2c51a 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
2c51e 579 18 18 18 18 
2c522 57a 00 00 00 00 
2c526 57b 66 66 66 66 
2c52a 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2c52e 57d 66 66 7E 3C 
2c532 57e 00 00 00 00 
2c536 57f 66 66 66 66 
2c53a 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2c53e 581 3C 3C 18 18 
2c542 582 00 00 00 00 
2c546 583 C6 C6 C6 C6 
2c54a 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
2c54e 585 FE EE C6 82 
2c552 586 00 00 00 00 
2c556 587 66 66 66 3C 
2c55a 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
2c55e 589 3C 66 66 66 
2c562 58a 00 00 00 00 
2c566 58b 66 66 66 66 
2c56a 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
2c56e 58d 18 18 18 18 
2c572 58e 00 00 00 00 
2c576 58f 7E 7E 30 30 
2c57a 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
2c57e 591 06 06 7E 7E 
2c582 592 00 00 00 00 
2c586 593 3C 3C 0C 0C 
2c58a 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
2c58e 595 0C 0C 3C 3C 
2c592 596 00 00 00 00 
2c596 597 06 06 0C 0C 
2c59a 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
2c59e 599 60 60 C0 C0 
2c5a2 59a 00 00 00 00 
2c5a6 59b 3C 3C 30 30 
2c5aa 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
2c5ae 59d 30 30 3C 3C 
2c5b2 59e 00 00 00 00 
2c5b6 59f 18 18 3C 3C 
2c5ba 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
2c5be 5a1 00 00 00 00 
2c5c2 5a2 00 00 00 00 
2c5c6 5a3 00 00 00 00 
2c5ca 5a4 00 00 00 00 
2c5ce 5a5 00 00       | 	byte	$00[18]
2c5d0 5a6 FE FE 00 00 
2c5d4 5a7 00 00 0C 0C 
2c5d8 5a8 18 18 00 00 
2c5dc 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
2c5e0 5aa 00 00 00 00 
2c5e4 5ab 00 00 00 00 
2c5e8 5ac 00          | 	byte	$00[9]
2c5e9 5ac 3C 7C 60 7C 
2c5ed 5ad 7E 66 66 7E 
2c5f1 5ae 7C 00 00 00 
2c5f5 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
2c5f9 5b0 3E 7E 66 66 
2c5fd 5b1 66 66 66 7E 
2c601 5b2 3E 00 00 00 
2c605 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
2c609 5b4 3C 3E 06 06 
2c60d 5b5 06 06 06 7E 
2c611 5b6 7C 00 00 00 
2c615 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
2c619 5b8 7C 7E 66 66 
2c61d 5b9 66 66 66 7E 
2c621 5ba 7C 00 00 00 
2c625 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
2c629 5bc 3C 7E 66 66 
2c62d 5bd 7E 06 06 7E 
2c631 5be 7C 00 00 00 
2c635 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
2c639 5c0 18 7E 7E 18 
2c63d 5c1 18 18 18 18 
2c641 5c2 18 00 00 00 
2c645 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c649 5c4 7C 7E 66 66 
2c64d 5c5 66 66 7E 7C 
2c651 5c6 60 7E 3E 00 
2c655 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
2c659 5c8 3E 7E 66 66 
2c65d 5c9 66 66 66 66 
2c661 5ca 66 00 00 00 
2c665 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
2c669 5cc 1C 1C 18 18 
2c66d 5cd 18 18 18 3C 
2c671 5ce 3C 00 00 00 
2c675 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
2c679 5d0 30 30 30 30 
2c67d 5d1 30 30 30 30 
2c681 5d2 30          | 	byte	$30[9]
2c682 5d2 3E 1E 00 00 
2c686 5d3 06 06 06 36 
2c68a 5d4 36 1E 1E 1E 
2c68e 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
2c692 5d6 00 00 00 00 
2c696 5d7 1C 1C 18 18 
2c69a 5d8 18 18 18 18 
2c69e 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
2c6a2 5da 00 00 00 00 
2c6a6 5db 00 00 00    | 	byte	$00[7]
2c6a9 5dc 6C FE FE D6 
2c6ad 5dd D6 C6 C6 C6 
2c6b1 5de C6 00 00 00 
2c6b5 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
2c6b9 5e0 3E 7E 66 66 
2c6bd 5e1 66 66 66 66 
2c6c1 5e2 66 00 00 00 
2c6c5 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
2c6c9 5e4 3C 7E 66 66 
2c6cd 5e5 66 66 66 7E 
2c6d1 5e6 3C 00 00 00 
2c6d5 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
2c6d9 5e8 3E 7E 66 66 
2c6dd 5e9 66 66 66 7E 
2c6e1 5ea 3E 06 06 00 
2c6e5 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
2c6e9 5ec 7C 7E 66 66 
2c6ed 5ed 66 66 66 7E 
2c6f1 5ee 7C 60 60 00 
2c6f5 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
2c6f9 5f0 3E 7E 66 06 
2c6fd 5f1 06 06 06 06 
2c701 5f2 06 00 00 00 
2c705 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
2c709 5f4 7C 7E 06 0E 
2c70d 5f5 3C 70 60 7E 
2c711 5f6 3E 00 00 00 
2c715 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
2c719 5f8 7E 7E 18 18 
2c71d 5f9 18 18 18 78 
2c721 5fa 70 00 00 00 
2c725 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
2c729 5fc 66 66 66 66 
2c72d 5fd 66 66 66    | 	byte	$66[7]
2c730 5fe 7E 7C 00 00 
2c734 5ff 00 00 00 00 
2c738 600 00 66 66 66 
2c73c 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
2c740 602 18 18 00 00 
2c744 603 00 00 00 00 
2c748 604 00 C6 C6 D6 
2c74c 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
2c750 606 C6 82 00 00 
2c754 607 00 00 00 00 
2c758 608 00 66 66 3C 
2c75c 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
2c760 60a 66 66 00 00 
2c764 60b 00 00 00 00 
2c768 60c 00 66 66 66 
2c76c 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
2c770 60e 7C 60 7E 3E 
2c774 60f 00 00 00 00 
2c778 610 00 7E 7E 30 
2c77c 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c780 612 7E 7E 00 00 
2c784 613 00 00 30 18 
2c788 614 18 18 18 0C 
2c78c 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
2c790 616 18 30 00 00 
2c794 617 00 00 18 18 
2c798 618 18 18 18 18 
2c79c 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c7a0 61a 18 18 00 00 
2c7a4 61b 00 00 0C 18 
2c7a8 61c 18 18 18 30 
2c7ac 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
2c7b0 61e 18 0C 00 00 
2c7b4 61f 00 00 6C 7E 
2c7b8 620 36 00 00 00 
2c7bc 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
2c7c0 622 00 00 00 00 
2c7c4 623 00 00 00 00 
2c7c8 624 00          | 	byte	$00[9]
2c7c9 624 18 18 18 18 
2c7cd 625 18 18 00 00 
2c7d1 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2c7d4 627             | 'amiga_font     file "amigafont.def"
2c7d4 627 00 6C FE FE 
2c7d8 628 7C 38 10 00 
2c7dc 629 18 18 18 F8 
2c7e0 62a F8 18 18 18 | a8_font        file "atari8.fnt"
2c7e4 62b C0 C0 C0 C0 
2c7e8 62c C0 C0 C0 C0 | 	byte	$c0[8]
2c7ec 62d 18 18 18 1F 
2c7f0 62e 1F 00 00 00 
2c7f4 62f 18 18 18 1F 
2c7f8 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
2c7fc 631 00 00 00 1F 
2c800 632 1F 18 18 18 
2c804 633 C0 E0 70 38 
2c808 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
2c80c 635 03 07 0E 1C 
2c810 636 38 70 E0 C0 
2c814 637 80 C0 E0 F0 
2c818 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
2c81c 639 00 00 00 00 
2c820 63a F0 F0 F0 F0 
2c824 63b 01 03 07 0F 
2c828 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
2c82c 63d F0 F0 F0 F0 
2c830 63e 00 00 00 00 
2c834 63f 0F 0F 0F 0F 
2c838 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
2c83c 641 FF FF 00 00 
2c840 642 00 00 00 00 
2c844 643 00 00 00 00 
2c848 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
2c84c 645 00 00 00 00 
2c850 646 0F 0F 0F 0F 
2c854 647 00 38 38 EE 
2c858 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
2c85c 649 00 00 00 F8 
2c860 64a F8 18 18 18 
2c864 64b 00 00 00 FF 
2c868 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
2c86c 64d 18 18 18 FF 
2c870 64e FF 18 18 18 
2c874 64f 00 00 3C 7E 
2c878 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
2c87c 651 00 00 00 00 
2c880 652 FF FF FF FF 
2c884 653 03 03 03 03 
2c888 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
2c88c 655 00 00 00 FF 
2c890 656 FF 18 18 18 
2c894 657 18 18 18 FF 
2c898 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
2c89c 659 0F 0F 0F 0F 
2c8a0 65a 0F 0F 0F 0F | 	byte	$0f[8]
2c8a4 65b 18 18 18 F8 
2c8a8 65c F8 00 00 00 
2c8ac 65d 1E 06 1E 06 
2c8b0 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
2c8b4 65f 00 18 3C 7E 
2c8b8 660 18 18 18 00 
2c8bc 661 00 18 18 18 
2c8c0 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
2c8c4 663 00 18 0C 7E 
2c8c8 664 0C 18 00 00 
2c8cc 665 00 18 30 7E 
2c8d0 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
2c8d4 667 00 00 00 00 
2c8d8 668 00 00 00 00 
2c8dc 669 00          | 	byte	$00[9]
2c8dd 669 18 18 18 18 
2c8e1 66a 00 18 00 00 
2c8e5 66b 66 66 66 00 
2c8e9 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
2c8ed 66d 66 FF 66 66 
2c8f1 66e FF 66 00 18 
2c8f5 66f 7C 06 3C 60 
2c8f9 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
2c8fd 671 66 36 18 0C 
2c901 672 66 62 00 38 
2c905 673 6C 38 1C F6 
2c909 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
2c90d 675 18 18 18 00 
2c911 676 00 00 00 00 
2c915 677 70 38 18 18 
2c919 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
2c91d 679 0E 1C 18 18 
2c921 67a 1C 0E 00 00 
2c925 67b 66 3C FF 3C 
2c929 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
2c92d 67d 18 18 7E 18 
2c931 67e 18 00 00 00 
2c935 67f 00 00 00 00 
2c939 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
2c93d 681 00 00 7E 00 
2c941 682 00 00 00 00 
2c945 683 00 00 00 00 
2c949 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
2c94d 685 60 30 18 0C 
2c951 686 06 02 00 00 
2c955 687 3C 66 76 6E 
2c959 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
2c95d 689 18 1C 18 18 
2c961 68a 18 7E 00 00 
2c965 68b 3C 66 30 18 
2c969 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
2c96d 68d 7E 30 18 30 
2c971 68e 66 3C 00 00 
2c975 68f 30 38 3C 36 
2c979 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
2c97d 691 7E 06 3E 60 
2c981 692 66 3C 00 00 
2c985 693 3C 06 3E 66 
2c989 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
2c98d 695 7E 60 30 18 
2c991 696 0C 0C 00 00 
2c995 697 3C 66 3C 66 
2c999 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
2c99d 699 3C 66 7C 60 
2c9a1 69a 30 1C 00 00 
2c9a5 69b 00 18 18 00 
2c9a9 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
2c9ad 69d 00 18 18 00 
2c9b1 69e 18 18 0C 60 
2c9b5 69f 30 18 0C 18 
2c9b9 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
2c9bd 6a1 00 7E 00 00 
2c9c1 6a2 7E 00 00 06 
2c9c5 6a3 0C 18 30 18 
2c9c9 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
2c9cd 6a5 3C 66 30 18 
2c9d1 6a6 00 18 00 00 
2c9d5 6a7 3C 66 76 76 
2c9d9 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
2c9dd 6a9 18 3C 66 66 
2c9e1 6aa 7E 66 00 00 
2c9e5 6ab 3E 66 3E 66 
2c9e9 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
2c9ed 6ad 3C 66 06 06 
2c9f1 6ae 66 3C 00 00 
2c9f5 6af 1E 36 66 66 
2c9f9 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
2c9fd 6b1 7E 06 3E 06 
2ca01 6b2 06 7E 00 00 
2ca05 6b3 7E 06 3E 06 
2ca09 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
2ca0d 6b5 7C 06 06 76 
2ca11 6b6 66 7C 00 00 
2ca15 6b7 66 66 7E 66 
2ca19 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
2ca1d 6b9 7E 18 18 18 
2ca21 6ba 18 7E 00 00 
2ca25 6bb 60 60 60 60 
2ca29 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
2ca2d 6bd 66 36 1E 1E 
2ca31 6be 36 66 00 00 
2ca35 6bf 06 06 06 06 
2ca39 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
2ca3d 6c1 C6 EE FE D6 
2ca41 6c2 C6 C6 00 00 
2ca45 6c3 66 6E 7E 7E 
2ca49 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
2ca4d 6c5 3C 66 66 66 
2ca51 6c6 66 3C 00 00 
2ca55 6c7 3E 66 66 3E 
2ca59 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
2ca5d 6c9 3C 66 66 66 
2ca61 6ca 36 6C 00 00 
2ca65 6cb 3E 66 66 3E 
2ca69 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
2ca6d 6cd 3C 06 3C 60 
2ca71 6ce 60 3C 00 00 
2ca75 6cf 7E 18 18 18 
2ca79 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
2ca7d 6d1 66 66 66 66 
2ca81 6d2 66          | 	byte	$66[5]
2ca82 6d2 7E 00 00 66 
2ca86 6d3 66 66 66 3C 
2ca8a 6d4 18 00 00 C6 
2ca8e 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2ca92 6d6 C6 00 00 66 
2ca96 6d7 66 3C 3C 66 
2ca9a 6d8 66 00 00 66 
2ca9e 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2caa2 6da 18 00 00 7E 
2caa6 6db 30 18 0C 06 
2caaa 6dc 7E 00 00 78 
2caae 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
2cab2 6de 78 00 00 02 
2cab6 6df 06 0C 18 30 
2caba 6e0 60 00 00 1E 
2cabe 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
2cac2 6e2 1E 00 00 10 
2cac6 6e3 38 6C C6 00 
2caca 6e4 00 00 00 00 
2cace 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cad2 6e6 FF 00 00 18 
2cad6 6e7 3C 7E 7E 3C 
2cada 6e8 18 00 00 00 
2cade 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
2cae2 6ea 7C 00 00 06 
2cae6 6eb 06 3E 66 66 
2caea 6ec 3E 00 00 00 
2caee 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
2caf2 6ee 3C 00 00 60 
2caf6 6ef 60 7C 66 66 
2cafa 6f0 7C 00 00 00 
2cafe 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
2cb02 6f2 3C 00 00 70 
2cb06 6f3 18 7C 18 18 
2cb0a 6f4 18 00 00 00 
2cb0e 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
2cb12 6f6 60 3E 00 06 
2cb16 6f7 06 3E 66 66 
2cb1a 6f8 66 00 00 18 
2cb1e 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
2cb22 6fa 3C 00 00 60 
2cb26 6fb 00 60 60 60 
2cb2a 6fc 60 3C 00 06 
2cb2e 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
2cb32 6fe 66 00 00 1C 
2cb36 6ff 18 18 18 18 
2cb3a 700 3C 00 00 00 
2cb3e 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
2cb42 702 C6 00 00 00 
2cb46 703 3E 66 66 66 
2cb4a 704 66 00 00 00 
2cb4e 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
2cb52 706 3C 00 00 00 
2cb56 707 3E 66 66 3E 
2cb5a 708 06 06 00 00 
2cb5e 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
2cb62 70a 60 60 00 00 
2cb66 70b 3E 66 06 06 
2cb6a 70c 06 00 00 00 
2cb6e 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
2cb72 70e 3E 00 00 18 
2cb76 70f 7E 18 18 18 
2cb7a 710 70 00 00 00 
2cb7e 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
2cb82 712 7C 00 00 00 
2cb86 713 66 66 66 3C 
2cb8a 714 18 00 00 00 
2cb8e 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
2cb92 716 6C 00 00 00 
2cb96 717 66 3C 18 3C 
2cb9a 718 66 00 00 00 
2cb9e 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
2cba2 71a 30 1E 00 00 
2cba6 71b 7E 30 18 0C 
2cbaa 71c 7E 00 00 18 
2cbae 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
2cbb2 71e 3C 00 18 18 
2cbb6 71f 18 18 18 18 
2cbba 720 18 18 00 7E 
2cbbe 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
2cbc2 722 60 00 10 18 
2cbc6 723 1C 1E 1C 18 
2cbca 724 10 00 08 18 
2cbce 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
2cbd2 726 08 00       | 	byte	$08, $00
2cbd4 727 00 00 00 00 
2cbd8 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
2cbd9 728 80 00 00 00 
2cbdd 729 00 80 00 00 
2cbe1 72a 80 80 00 00 
2cbe5 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
2cbe9 72c 80 00 80 00 
2cbed 72d 00 40 80 00 
2cbf1 72e AA AA AA 00 
2cbf5 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
2cbf9 730 FF 00 00 00 
2cbfd 731 00 FF 00 00 
2cc01 732 FF FF 00 00 
2cc05 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
2cc09 734 FF 00 FF 00 
2cc0d 735 00 FF FF 00 
2cc11 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
2cc14 737 00 00 00 00 
2cc18 738 00          | ataripalette   file "ataripalettep2.def"
2cc19 738 11 11 11 00 
2cc1d 739 22 22 22 00 
2cc21 73a 33 33 33 00 
2cc25 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
2cc29 73c 55 55 55 00 
2cc2d 73d 66 66 66 00 
2cc31 73e 77 77 77 00 
2cc35 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
2cc39 740 99 99 99 00 
2cc3d 741 AA AA AA 00 
2cc41 742 BB BB BB 00 
2cc45 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
2cc49 744 DD DD DD 00 
2cc4d 745 EE EE EE 00 
2cc51 746 FF FF FF 00 
2cc55 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
2cc59 748 00 14 40 00 
2cc5d 749 00 1E 60 00 
2cc61 74a 00 28 80 00 
2cc65 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
2cc69 74c 00 3C BF 00 
2cc6d 74d 00 46 DF 00 
2cc71 74e 00 50 FF 00 
2cc75 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
2cc79 750 39 77 FF 00 
2cc7d 751 55 8A FF 00 
2cc81 752 71 9E FF 00 
2cc85 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
2cc89 754 AA C5 FF 00 
2cc8d 755 C6 D8 FF 00 
2cc91 756 E3 EC FF 00 
2cc95 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
2cc99 758 00 00 40 00 
2cc9d 759 00 00 60 00 
2cca1 75a 00 00 80 00 
2cca5 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
2cca9 75c 00 00 BF 00 
2ccad 75d 00 00 DF 00 
2ccb1 75e 00 00 FF 00 
2ccb5 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
2ccb9 760 39 39 FF 00 
2ccbd 761 55 55 FF 00 
2ccc1 762 71 71 FF 00 
2ccc5 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
2ccc9 764 AA AA FF 00 
2cccd 765 C6 C6 FF 00 
2ccd1 766 E3 E3 FF 00 
2ccd5 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
2ccd9 768 20 00 40 00 
2ccdd 769 30 00 60 00 
2cce1 76a 40 00 80 00 
2cce5 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
2cce9 76c 60 00 BF 00 
2cced 76d 70 00 DF 00 
2ccf1 76e 80 00 FF 00 
2ccf5 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
2ccf9 770 9C 39 FF 00 
2ccfd 771 AA 55 FF 00 
2cd01 772 B8 71 FF 00 
2cd05 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
2cd09 774 D5 AA FF 00 
2cd0d 775 E3 C6 FF 00 
2cd11 776 F1 E3 FF 00 
2cd15 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
2cd19 778 40 00 40 00 
2cd1d 779 60 00 60 00 
2cd21 77a 80 00 80 00 
2cd25 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
2cd29 77c BF 00 BF 00 
2cd2d 77d DF 00 DF 00 
2cd31 77e FF 00 FF 00 
2cd35 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
2cd39 780 FF 39 FF 00 
2cd3d 781 FF 55 FF 00 
2cd41 782 FF 71 FF 00 
2cd45 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
2cd49 784 FF AA FF 00 
2cd4d 785 FF C6 FF 00 
2cd51 786 FF E3 FF 00 
2cd55 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
2cd59 788 40 00 20 00 
2cd5d 789 60 00 30 00 
2cd61 78a 80 00 40 00 
2cd65 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
2cd69 78c BF 00 60 00 
2cd6d 78d DF 00 70 00 
2cd71 78e FF 00 80 00 
2cd75 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
2cd79 790 FF 39 9C 00 
2cd7d 791 FF 55 AA 00 
2cd81 792 FF 71 B8 00 
2cd85 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
2cd89 794 FF AA D5 00 
2cd8d 795 FF C6 E3 00 
2cd91 796 FF E3 F1 00 
2cd95 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
2cd99 798 40 00 00 00 
2cd9d 799 60 00 00 00 
2cda1 79a 80 00 00 00 
2cda5 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
2cda9 79c BF 00 00 00 
2cdad 79d DF 00 00 00 
2cdb1 79e FF 00 00 00 
2cdb5 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
2cdb9 7a0 FF 39 39 00 
2cdbd 7a1 FF 55 55 00 
2cdc1 7a2 FF 71 71 00 
2cdc5 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
2cdc9 7a4 FF AA AA 00 
2cdcd 7a5 FF C6 C6 00 
2cdd1 7a6 FF E3 E3 00 
2cdd5 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
2cdd9 7a8 40 10 00 00 
2cddd 7a9 60 18 00 00 
2cde1 7aa 80 20 00 00 
2cde5 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
2cde9 7ac BF 30 00 00 
2cded 7ad DF 38 00 00 
2cdf1 7ae FF 40 00 00 
2cdf5 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
2cdf9 7b0 FF 6A 39 00 
2cdfd 7b1 FF 80 55 00 
2ce01 7b2 FF 95 71 00 
2ce05 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
2ce09 7b4 FF BF AA 00 
2ce0d 7b5 FF D5 C6 00 
2ce11 7b6 FF EA E3 00 
2ce15 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
2ce19 7b8 40 20 00 00 
2ce1d 7b9 60 30 00 00 
2ce21 7ba 80 40 00 00 
2ce25 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
2ce29 7bc BF 60 00 00 
2ce2d 7bd DF 70 00 00 
2ce31 7be FF 80 00 00 
2ce35 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
2ce39 7c0 FF 9C 39 00 
2ce3d 7c1 FF AA 55 00 
2ce41 7c2 FF B8 71 00 
2ce45 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
2ce49 7c4 FF D5 AA 00 
2ce4d 7c5 FF E3 C6 00 
2ce51 7c6 FF F1 E3 00 
2ce55 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
2ce59 7c8 40 30 00 00 
2ce5d 7c9 60 48 00 00 
2ce61 7ca 80 60 00 00 
2ce65 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
2ce69 7cc BF 90 00 00 
2ce6d 7cd DF A8 00 00 
2ce71 7ce FF C0 00 00 
2ce75 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
2ce79 7d0 FF CE 39 00 
2ce7d 7d1 FF D5 55 00 
2ce81 7d2 FF DC 71 00 
2ce85 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
2ce89 7d4 FF EA AA 00 
2ce8d 7d5 FF F1 C6 00 
2ce91 7d6 FF F8 E3 00 
2ce95 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
2ce99 7d8 30 40 00 00 
2ce9d 7d9 48 60 00 00 
2cea1 7da 60 80 00 00 
2cea5 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
2cea9 7dc 90 BF 00 00 
2cead 7dd A8 DF 00 00 
2ceb1 7de C0 FF 00 00 
2ceb5 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
2ceb9 7e0 CE FF 39 00 
2cebd 7e1 D5 FF 55 00 
2cec1 7e2 DC FF 71 00 
2cec5 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
2cec9 7e4 EA FF AA 00 
2cecd 7e5 F1 FF C6 00 
2ced1 7e6 F8 FF E3 00 
2ced5 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
2ced9 7e8 00 40 00 00 
2cedd 7e9 00 60 00 00 
2cee1 7ea 00 80 00 00 
2cee5 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
2cee9 7ec 00 BF 00 00 
2ceed 7ed 00 DF 00 00 
2cef1 7ee 00 FF 00 00 
2cef5 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
2cef9 7f0 39 FF 39 00 
2cefd 7f1 55 FF 55 00 
2cf01 7f2 71 FF 71 00 
2cf05 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
2cf09 7f4 AA FF AA 00 
2cf0d 7f5 C6 FF C6 00 
2cf11 7f6 E3 FF E3 00 
2cf15 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
2cf19 7f8 00 40 14 00 
2cf1d 7f9 00 60 1E 00 
2cf21 7fa 00 80 28 00 
2cf25 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
2cf29 7fc 00 BF 3C 00 
2cf2d 7fd 00 DF 46 00 
2cf31 7fe 00 FF 50 00 
2cf35 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
2cf39 800 39 FF 77 00 
2cf3d 801 55 FF 8A 00 
2cf41 802 71 FF 9E 00 
2cf45 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
2cf49 804 AA FF C5 00 
2cf4d 805 C6 FF D8 00 
2cf51 806 E3 FF EC 00 
2cf55 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
2cf59 808 00 40 28 00 
2cf5d 809 00 60 3C 00 
2cf61 80a 00 80 50 00 
2cf65 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
2cf69 80c 00 BF 78 00 
2cf6d 80d 00 DF 8C 00 
2cf71 80e 00 FF A0 00 
2cf75 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
2cf79 810 39 FF B5 00 
2cf7d 811 55 FF C0 00 
2cf81 812 71 FF CA 00 
2cf85 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
2cf89 814 AA FF DF 00 
2cf8d 815 C6 FF EA 00 
2cf91 816 E3 FF F4 00 
2cf95 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
2cf99 818 00 40 40 00 
2cf9d 819 00 60 60 00 
2cfa1 81a 00 80 80 00 
2cfa5 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
2cfa9 81c 00 BF BF 00 
2cfad 81d 00 DF DF 00 
2cfb1 81e 00 FF FF 00 
2cfb5 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
2cfb9 820 39 FF FF 00 
2cfbd 821 55 FF FF 00 
2cfc1 822 71 FF FF 00 
2cfc5 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
2cfc9 824 AA FF FF 00 
2cfcd 825 C6 FF FF 00 
2cfd1 826 E3 FF FF 00 
2cfd5 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
2cfd9 828 00 28 40 00 
2cfdd 829 00 3C 60 00 
2cfe1 82a 00 50 80 00 
2cfe5 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
2cfe9 82c 00 78 BF 00 
2cfed 82d 00 8C DF 00 
2cff1 82e 00 A0 FF 00 
2cff5 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
2cff9 830 39 B5 FF 00 
2cffd 831 55 C0 FF 00 
2d001 832 71 CA FF 00 
2d005 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
2d009 834 AA DF FF 00 
2d00d 835 C6 EA FF 00 
2d011 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
2d014 837             | 
2d014 837             | '**********************************************************************************
2d014 837             | '
2d014 837             | '        Timings and colors definitions
2d014 837             | '
2d014 837             | '**********************************************************************************
2d014 837             | 
2d014 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
2d014 837 10 00 00 00 
2d018 838 50 00 00 00 
2d01c 839 0C 00 00 00 
2d020 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
2d024 83b 08 00 00 00 
2d028 83c 04 00 00 00 
2d02c 83d 08 00 00 00 
2d030 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
2d034 83f 40 02 00 00 
2d038 840 6A 8C 15 14 
2d03c 841 FB 06 B7 01 
2d040 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
2d044 843 00 00 00 00 
2d048 844 C0 00 00 00 
2d04c 845 00 00 00 00 
2d050 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d054 847 00 75 C7 97 
2d058 848 27 47 F6 0A 
2d05c 849 05 79 CB 9B 
2d060 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
2d064 84b             | 
2d064 84b             | ''--------  Initialization  ----------------------------------------------------------------
2d064 84b             | 
2d064 84b 28 0C 64 FD | hdmi            setq    #6
2d068 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
2d06c 84d 28 10 64 FD |                 setq    #8
2d070 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
2d074 84f             | 
2d074 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
2d078 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
2d07c 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
2d080 852 D6 C6 01 F1 |                 add     t1,hbase
2d084 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
2d088 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
2d08c 855 7B 0B 80 5F 
2d090 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
2d094 857 66 66 86 FF 
2d098 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
2d09c 859             | '
2d09c 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
2d0a0 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
2d0a4 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
2d0a8 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
2d0ac 85d             | 
2d0ac 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
2d0b0 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
2d0b4 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
2d0b8 860             | 
2d0b8 860             | ''--------  frame rendering main loop  ---------------------------------------------------
2d0b8 860             | 
2d0b8 860 28 06 64 FD | p101            setq 	#3
2d0bc 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
2d0c0 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
2d0c4 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
2d0c8 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
2d0cc 865 00 A0 05 F6 |                 mov     dlinum, #0
2d0d0 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
2d0d4 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
2d0d8 868             | 
2d0d8 868             | 
2d0d8 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
2d0dc 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
2d0e0 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
2d0e4 86b             |                 
2d0e4 86b             | 
2d0e4 86b             | 
2d0e4 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
2d0e4 86b             |   
2d0e4 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
2d0e8 86c 29 FE 65 3D |          if_nc  setq2   #255
2d0ec 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
2d0f0 86e             | 
2d0f0 86e             | '' -----   up porch (before the picture)
2d0f0 86e             | 
2d0f0 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
2d0f4 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
2d0f8 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
2d0fc 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
2d100 872             |  
2d100 872             |    
2d100 872             |  
2d100 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2d104 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
2d108 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
2d10c 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2d110 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
2d114 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
2d118 878             | 
2d118 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2d11c 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
2d120 87a 48 00 B0 FD | 		call    #dli
2d124 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
2d128 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
2d12c 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
2d130 87e             |                 	
2d130 87e             |                 
2d130 87e             | 
2d130 87e             |  
2d130 87e             | '' ------- the main screen drawing starts here
2d130 87e             | 
2d130 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
2d134 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
2d138 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
2d13c 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
2d140 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
2d144 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
2d148 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
2d14c 885             |               
2d14c 885             | 
2d14c 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
2d150 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
2d154 887             | 
2d154 887             | ' ---------------- All visible lines displayed now, start vblank  
2d154 887             | 
2d154 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
2d158 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
2d15c 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
2d160 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
2d164 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
2d168 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
2d16c 88d             | 
2d16c 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
2d16c 88d             | 
2d16c 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
2d16c 88d             | 
2d16c 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
2d170 88e             | 
2d170 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
2d174 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
2d178 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
2d17c 891             | 
2d17c 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
2d180 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
2d184 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
2d188 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
2d18c 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
2d190 896             | 
2d190 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
2d194 897 DD C6 41 F8 |                 getnib  t1,dl,#0
2d198 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
2d19c 899 70 00 90 AD |     if_z        jmp     #preload
2d1a0 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
2d1a4 89b 94 00 90 AD |     if_z        jmp     #preload2
2d1a8 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
2d1ac 89d 0C 00 90 AD |     if_z        jmp     #p390
2d1b0 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
2d1b4 89f 28 00 90 AD |     if_z        jmp     #p391  
2d1b8 8a0             | 
2d1b8 8a0 2D 00 64 FD | p308            ret
2d1bc 8a1             |    
2d1bc 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
2d1c0 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
2d1c4 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
2d1c8 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
2d1cc 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
2d1d0 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
2d1d4 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
2d1d8 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
2d1dc 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
2d1e0 8aa             |  
2d1e0 8aa             | '' --------  Reload palette. To do 
2d1e0 8aa             | 
2d1e0 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
2d1e4 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
2d1e8 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
2d1ec 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
2d1f0 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
2d1f4 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
2d1f8 8b0 70 FF 9F FD |         	jmp     #dli                
2d1fc 8b1             |       
2d1fc 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
2d1fc 8b1             | 
2d1fc 8b1             | 
2d1fc 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
2d1fc 8b1             | 
2d1fc 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
2d200 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
2d204 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2d208 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
2d20c 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
2d210 8b6             |         
2d210 8b6             | '' -------------- Preload a line from PSRAM        
2d210 8b6             |         
2d210 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
2d214 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
2d218 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
2d21c 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
2d220 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
2d224 8bb             | 
2d224 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
2d228 8bc 32 B7 01 F6 |                 mov     buf2,a1024
2d22c 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
2d230 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
2d234 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
2d238 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
2d23c 8c1             |  
2d23c 8c1             |  
2d23c 8c1             | preload2      '  incmod  dlinum,#3
2d23c 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
2d240 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
2d244 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
2d248 8c4 28 02 64 FD |                 setq	#1
2d24c 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
2d250 8c6             |                 
2d250 8c6             | 
2d250 8c6             | '' -------------- Draw sprites
2d250 8c6             | 
2d250 8c6 CF 5C 02 F6 | sprite          mov t8,frames
2d254 8c7 10 5C 0E F5 | 		and t8,#16 wz
2d258 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
2d25c 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
2d260 8ca             | 		
2d260 8ca             | 
2d260 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
2d264 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
2d268 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
2d26c 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
2d270 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
2d274 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
2d278 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
2d27c 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
2d280 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
2d284 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
2d288 8d4 01 52 86 F1 |                 sub     sprite_h,#1
2d28c 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
2d290 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
2d294 8d7             | 
2d294 8d7             | 
2d294 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
2d298 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
2d29c 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
2d2a0 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
2d2a4 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
2d2a8 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
2d2ac 8dd 00 5E 06 F6 |                 mov 	t9,#0
2d2b0 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
2d2b4 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
2d2b8 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
2d2bc 8e1             |      
2d2bc 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
2d2c0 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
2d2c4 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
2d2c8 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
2d2cc 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
2d2d0 8e6             |                 
2d2d0 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
2d2d4 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
2d2d8 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
2d2dc 8e9             |   		
2d2dc 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
2d2e0 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
2d2e4 8eb             | 
2d2e4 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
2d2e8 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
2d2ec 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
2d2f0 8ee             |  
2d2f0 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
2d2f4 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
2d2f8 8f0 10 00 90 CD |      if_c 	jmp     #p899		
2d2fc 8f1             | 	
2d2fc 8f1             | 	
2d2fc 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
2d300 8f2 28 CD 01 F1 | 		add	t4,sprite_w
2d304 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
2d308 8f4             | 
2d308 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
2d30c 8f5             | 
2d30c 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
2d310 8f6 01 58 86 F1 | 	 	sub     t6,#1
2d314 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
2d318 8f8             | 
2d318 8f8 28 58 62 FD |                 setq   	t6
2d31c 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
2d320 8fa 28 5D 02 F6 |                 mov t8,sprite_w
2d324 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
2d328 8fc 24 00 90 AD |         if_z    jmp #p898
2d32c 8fd             |          
2d32c 8fd             |         
2d32c 8fd 70 5F 06 F6 |                 mov  t9,#368
2d330 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
2d334 8ff             | 
2d334 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
2d338 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
2d33c 901 FF FF 7F FF 
2d340 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
2d344 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
2d348 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
2d34c 905 2D 01 00 F5 |                 and 0-0, t7
2d350 906             |                
2d350 906             | 
2d350 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
2d354 907 E5 E0 7A FA |                 wmlong 368,t3				
2d358 908             |                 
2d358 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
2d35c 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
2d360 90a 2D 00 64 FD |                 ret
2d364 90b             | 	
2d364 90b             | 	
2d364 90b             |                
2d364 90b             |  
2d364 90b             | '' -------------- Graphics line ------------------------------------------------------------
2d364 90b             |  
2d364 90b             | 
2d364 90b             | '' consts and vars
2d364 90b             | 
2d364 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
2d368 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
2d36c 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
2d370 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
2d374 90f             | 
2d374 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
2d378 910             | 
2d378 910             | '------ these longs will be set by setmode function
2d378 910             | 
2d378 910 00 00 00 00 | m_bs            long    0        'blanks before sync
2d37c 911 00 00 00 00 | m_sn            long    0        'sync
2d380 912 00 00 00 00 | m_bv            long    0        'blanks before visible
2d384 913 00 00 00 00 | m_vi            long    0        'visible pixels #
2d388 914             | 'm_border        long    0        'left/right borders
2d388 914 00 00 00 00 | i_upporch       long    0        'up porch lines
2d38c 915 00 00 00 00 | i_vsync         long    0        'vsync lines
2d390 916 00 00 00 00 | i_downporch     long    0        'down porch lines
2d394 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
2d398 918 00 00 00 00 | i_totalvis      long    0
2d39c 919             | 
2d39c 919             | '-------------------------------------
2d39c 919             |  
2d39c 919 00 00 00 00 | linenum         long    0
2d3a0 91a 00 00 00 00 | frames          long    0
2d3a4 91b 00 00 00 00 | dlinum long 0
2d3a8 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
2d3ac 91d             | 
2d3ac 91d 00 00 00 00 | vblankptr       long    0
2d3b0 91e 00 00 00 00 | modeptr         long    0
2d3b4 91f 00 00 00 00 | paletteptr      long    0
2d3b8 920 00 00 00 00 | dlptr           long    0
2d3bc 921 01 00 00 00 | hbase           long    1
2d3c0 922 00 00 00 00 | mailbox         long    0
2d3c4 923 00 00 00 00 | spriteptr          long 0
2d3c8 924             | 
2d3c8 924 00 00 00 00 | cmd             long    0
2d3cc 925 00 B0 07 00 | buf1            long    $80000-16384-4096
2d3d0 926 00 04 00 00 | buf2            long    1024
2d3d4 927 01 00 00 00 | dlptr2          long    1
2d3d8 928 01 00 00 00 | dl              long    1
2d3dc 929             | 
2d3dc 929 00 00 00 00 | buf1c long 0
2d3e0 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
2d3e4 92b 01 00 00 00 | framebuf2       long    1
2d3e8 92c 01 00 00 00 | hsync0          long    1
2d3ec 92d 01 00 00 00 | hsync1          long    1
2d3f0 92e             | 
2d3f0 92e 01 00 00 00 | t1              long    1
2d3f4 92f 00 00 00 00 | t2 long 0
2d3f8 930 00 00 00 00 | t3 long 0
2d3fc 931 00 00 00 00 | t4 long 0
2d400 932             | 
2d400 932 00 00 00 00 | rcnt            long    0  'dl repeat count
2d404 933 00 00 00 00 | rcnt2           long    0
2d408 934 00 00 00 00 | rcnt2a          long    0
2d40c 935 00 00 00 00 | roffset         long    0
2d410 936 00 00 00 00 | rdl             long    0  'dl repeat line
2d414 937 00 00 00 00 | dlc             long    0  'dl command
2d418 938             | 
2d418 938 FF FF FF FF | affffffff       long    $ffffffff
2d41c 939 00 00 00 00 | sprite1pointer long 0
2d420 93a 00 00 00 00 | sprite1xy      long 0
2d424 93b 00 00 00 00 | sprite1wh      long 0
2d428 93c 00 00 00 00 | sprite2pointer long 0
2d42c 93d 00 00 00 00 | sprite2xy      long 0
2d430 93e 00 00 00 00 | sprite2wh      long 0
2d434 93f 00 00 00 00 | sprite3pointer long 0
2d438 940 00 00 00 00 | sprite3xy      long 0
2d43c 941 00 00 00 00 | sprite3wh      long 0
2d440 942 00 00 00 00 | sprite4pointer long 0
2d444 943 00 00 00 00 | sprite4xy      long 0
2d448 944 00 00 00 00 | sprite4wh      long 0
2d44c 945 00 00 00 00 | sprite5pointer long 0
2d450 946 00 00 00 00 | sprite5xy      long 0
2d454 947 00 00 00 00 | sprite5wh      long 0
2d458 948 00 00 00 00 | sprite6pointer long 0
2d45c 949 00 00 00 00 | sprite6xy      long 0
2d460 94a 00 00 00 00 | sprite6wh      long 0
2d464 94b 00 00 00 00 | sprite7pointer long 0
2d468 94c 00 00 00 00 | sprite7xy      long 0
2d46c 94d 00 00 00 00 | sprite7wh      long 0
2d470 94e 00 00 00 00 | sprite8pointer long 0
2d474 94f 00 00 00 00 | sprite8xy      long 0
2d478 950 00 00 00 00 | sprite8wh      long 0
2d47c 951 00 00 00 00 | sprite9pointer long 0
2d480 952 00 00 00 00 | sprite9xy      long 0
2d484 953 00 00 00 00 | sprite9wh      long 0
2d488 954 00 00 00 00 | sprite10pointer long 0
2d48c 955 00 00 00 00 | sprite10xy      long 0
2d490 956 00 00 00 00 | sprite10wh      long 0
2d494 957 00 00 00 00 | sprite11pointer long 0
2d498 958 00 00 00 00 | sprite11xy      long 0
2d49c 959 00 00 00 00 | sprite11wh      long 0
2d4a0 95a 00 00 00 00 | sprite12pointer long 0
2d4a4 95b 00 00 00 00 | sprite12xy      long 0
2d4a8 95c 00 00 00 00 | sprite12wh      long 0
2d4ac 95d 00 00 00 00 | sprite13pointer long 0
2d4b0 95e 00 00 00 00 | sprite13xy      long 0
2d4b4 95f 00 00 00 00 | sprite13wh      long 0
2d4b8 960 00 00 00 00 | sprite14pointer long 0
2d4bc 961 00 00 00 00 | sprite14xy      long 0
2d4c0 962 00 00 00 00 | sprite14wh      long 0
2d4c4 963 00 00 00 00 | sprite15pointer long 0
2d4c8 964 00 00 00 00 | sprite15xy      long 0
2d4cc 965 00 00 00 00 | sprite15wh      long 0
2d4d0 966 00 00 00 00 | sprite16pointer long 0
2d4d4 967 00 00 00 00 | sprite16xy      long 0
2d4d8 968 00 00 00 00 | sprite16wh      long 0
2d4dc 969 00 00 00 00 | sprite17pointer long 0
2d4e0 96a 00 00 00 00 | sprite17xy      long 0
2d4e4 96b 00 00 00 00 | sprite17wh      long 0
2d4e8 96c 00 00 00 00 | sprite18pointer long 0
2d4ec 96d 00 00 00 00 | sprite18xy      long 0
2d4f0 96e 00 00 00 00 | sprite18wh      long 0
2d4f4 96f 00 00 00 00 | spritenum long 0
2d4f8 970             | 
2d4f8 970 00 00 00 00 | spriteline long 0
2d4fc 971 84 03 00 00 | sprite_x long 900
2d500 972 00 00 00 00 | sprite_y long 0
2d504 973 10 00 00 00 | sprite_w long 16
2d508 974 40 00 00 00 | sprite_h long 64
2d50c 975 00 00 00 00 | l2 long 0
2d510 976 00 00 00 00 | t5 long 0
2d514 977 00 00 00 00 | t6 long 0
2d518 978 00 00 00 00 | t7 long 0
2d51c 979 00 00 00 00 | t8 long 0
2d520 97a 00 00 00 00 | t9 long 0
2d524 97b 00 00 00 00 | preloadaddr long 0
2d528 97c 00 00 00 00 | preloadlineaddr long 0
2d52c 97d 00 04 00 00 | a1024 long 1024
2d530 97e             | 
2d530 97e E0 03 00 00 | aa long 992
2d534 97f FF 03 00 00 | a1023 long 1023
2d538 980 00 10 00 00 | a4096 long 4096
2d53c 981             |  fit 368
2d53c 981             | _psram_spin2_dat_
2d53c 981 00 00 00 00 
      ...             
2d634 9bf 00 00 00 00 
2d638 9c0 00 00 00 00 |     listdata long 0[8*8]
2d63c 9c1             |             orgh
2d63c                 | 
2d63c                 | ' driver state
2d63c     FF FF FF FF | drivercog   long    -1  ' COG id of driver
2d640     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
2d644                 | 
2d644                 | ' delay profile
2d644     07 00 00 00 
2d648     00 CF 7B 05 
2d64c     80 D1 F0 08 
2d650     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
2d654     80 C4 60 0F 
2d658     80 39 7A 12 
2d65c     40 2D D9 13 
2d660     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
2d664                 | 
2d664                 | ' data to be passed to driver when starting it
2d664                 | startupData
2d664     00 00 00 00 |     long    0           ' current frequency
2d668     00 00 00 00 |     long    FLAGS       ' optional flags for driver
2d66c     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
2d670     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
2d674     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
2d678     84 D6 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
2d67c     04 D7 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
2d680     24 D7 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
2d684                 | 
2d684                 | ' data for memory
2d684                 | deviceData
2d684                 |     ' 16 bank parameters follow (16MB per bank)
2d684     00 00 00 00 
      ...             
2d6bc     00 00 00 00 
2d6c0     00 00 00 00 |     long    0[16]                               ' banks 0-15
2d6c4                 |     ' 16 banks of pin parameters follow
2d6c4     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
2d6c8     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
2d6cc     FF FF FF FF 
      ...             
2d6fc     FF FF FF FF 
2d700     FF FF FF FF |     long    -1[14]                              ' banks 2-15
2d704                 | 
2d704                 | ' data for COG polling
2d704                 | qosData 
2d704     00 00 FF FF 
2d708     00 00 FF FF 
2d70c     00 00 FF FF 
2d710     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
2d714     00 00 FF FF 
2d718     00 00 FF FF 
2d71c     00 00 FF FF 
2d720     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
2d724                 |     
2d724                 | ' mailbox storage
2d724                 | 
2d724                 | mailboxes
2d724     00 00 00 00 
      ...             
2d77c     00 00 00 00 
2d780     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
2d784                 | 	alignl
2d784                 | _psram16drv_spin2_dat_
2d784                 |                             orgh
2d784     00 00 00 00 
      ...             
2d79c     00 00 00 00 
2d7a0     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
2d7a4                 | 
2d7a4                 | driver_start
2d7a4                 |                             org
2d7a4 000             | '..................................................................................................
2d7a4 000             | ' Memory layout for COG RAM once operational:
2d7a4 000             | '
2d7a4 000             | '  COG RAM address      Usage
2d7a4 000             | '  ---------------      ----
2d7a4 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
2d7a4 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
2d7a4 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
2d7a4 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
2d7a4 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
2d7a4 000             | '  ~$198-$1F3           State and register variables
2d7a4 000             | '
2d7a4 000             | ' Also during driver COG startup:
2d7a4 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
2d7a4 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
2d7a4 000             | '..................................................................................................
2d7a4 000             |                             
2d7a4 000             | ' Mailbox storage after vector initialization
2d7a4 000             | 
2d7a4 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
2d7a8 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
2d7ac 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
2d7b0 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
2d7b4 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
2d7b8 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
2d7bc 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
2d7c0 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
2d7c4 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
2d7c8 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
2d7cc 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
2d7d0 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
2d7d4 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
2d7d8 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
2d7dc 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
2d7e0 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
2d7e4 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
2d7e8 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
2d7ec 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
2d7f0 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
2d7f4 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
2d7f8 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
2d7fc 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
2d800 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
2d804 018             | 
2d804 018             | ' Mailbox parameter addresses per COG once patched
2d804 018             |                             
2d804 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
2d808 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
2d80c 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
2d810 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
2d814 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
2d818 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
2d81c 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
2d820 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
2d824 020             | 
2d824 020             | '..................................................................................................
2d824 020             | ' Per COG request and state setup and service branching
2d824 020             |         
2d824 020             | cog0                 
2d824 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
2d828 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
2d82c 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
2d830 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
2d834 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d838 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d83c 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
2d840 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
2d844 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
2d848 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d84c 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d850 02b 33 CA 63 FD |                             execf   request-0               'jump to service
2d854 02c             | cog1                        
2d854 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
2d858 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
2d85c 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
2d860 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
2d864 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d868 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d86c 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
2d870 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
2d874 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
2d878 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d87c 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d880 037 33 CA 63 FD |                             execf   request-0               'jump to service
2d884 038             | cog2                         
2d884 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
2d888 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
2d88c 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
2d890 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
2d894 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d898 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d89c 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
2d8a0 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
2d8a4 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
2d8a8 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d8ac 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d8b0 043 33 CA 63 FD |                             execf   request-0               'jump to service
2d8b4 044             | cog3                        
2d8b4 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
2d8b8 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
2d8bc 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
2d8c0 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
2d8c4 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d8c8 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d8cc 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
2d8d0 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
2d8d4 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
2d8d8 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d8dc 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d8e0 04f 33 CA 63 FD |                             execf   request-0               'jump to service
2d8e4 050             | cog4                        
2d8e4 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
2d8e8 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
2d8ec 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
2d8f0 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
2d8f4 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d8f8 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d8fc 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
2d900 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
2d904 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
2d908 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d90c 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d910 05b 33 CA 63 FD |                             execf   request-0               'jump to service
2d914 05c             | cog5                        
2d914 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
2d918 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
2d91c 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
2d920 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
2d924 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d928 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d92c 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
2d930 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
2d934 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
2d938 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d93c 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d940 067 33 CA 63 FD |                             execf   request-0               'jump to service
2d944 068             | cog6                        
2d944 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
2d948 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
2d94c 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
2d950 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
2d954 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d958 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d95c 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
2d960 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
2d964 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
2d968 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d96c 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d970 073 33 CA 63 FD |                             execf   request-0               'jump to service
2d974 074             | cog7                        
2d974 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
2d978 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
2d97c 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
2d980 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
2d984 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d988 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d98c 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
2d990 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
2d994 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
2d998 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d99c 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d9a0 07f 33 CA 63 FD |                             execf   request-0               'jump to service
2d9a4 080             |                             fit     128
2d9a4 080             | 
2d9a4 080             |                             fit     128
2d9a4 080             | pad                         long    0[128-$]                'align init code to $80
2d9a4 080             | 
2d9a4 080             | '..................................................................................................
2d9a4 080             | 
2d9a4 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
2d9a4 080             | 
2d9a4 080             | init                        
2d9a4 080             |                             ' get driver scratch long address in hub
2d9a4 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
2d9a8 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
2d9ac 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
2d9b0 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
2d9b4 084             |                     
2d9b4 084             |                             ' read in the additional LUT RAM code
2d9b4 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
2d9b8 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
2d9bc 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
2d9c0 087             | 
2d9c0 087             |                             ' read the startup parameters
2d9c0 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
2d9c4 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
2d9c8 089             | 
2d9c8 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
2d9c8 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
2d9cc 08a             | 
2d9cc 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
2d9d0 08b 01 00 00 5F 
2d9d4 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
2d9d8 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
2d9dc 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
2d9e0 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
2d9e4 090             | 
2d9e4 090             |                             ' setup data pin modes and data bus pin group in streamer commands
2d9e4 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
2d9e8 091 01 00 00 FF 
2d9ec 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
2d9f0 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
2d9f4 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
2d9f8 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
2d9fc 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
2da00 097 08 DE 47 F5 |                             or      a, #8
2da04 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
2da08 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
2da0c 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
2da10 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
2da14 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
2da18 09d 01 DE 07 F1 |                             add     a, #1
2da1c 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
2da20 09f             |  
2da20 09f             |                             ' setup device control pin states
2da20 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
2da24 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
2da28 0a1 01 00 00 FF 
2da2c 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
2da30 0a3             | 
2da30 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
2da34 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
2da38 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
2da3c 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
2da40 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
2da44 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
2da48 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
2da4c 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
2da50 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
2da54 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
2da58 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
2da5c 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
2da60 0af             | pinloop
2da60 0af             |                             ' generate minimum CE high time before access
2da60 0af A1 07 00 FF 
2da64 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
2da68 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
2da6c 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
2da70 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
2da74 0b4 1F DE 63 FD |                             waitx   a                       'delay
2da78 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
2da7c 0b6             | 
2da7c 0b6             |                             ' setup the COG mailboxes and addresses 
2da7c 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
2da80 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
2da84 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
2da88 0b9             | 
2da88 0b9 28 2E 64 FD |                             setq    #24-1
2da8c 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
2da90 0bb             | 
2da90 0bb             |                             ' setup the polling loop for active COGs 
2da90 0bb 01 C2 63 FD |                             cogid   id
2da94 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
2da98 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
2da9c 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
2daa0 0bf 0A F0 07 F6 |                             mov     ptra, #10
2daa4 0c0 E1 F1 03 FA |                             mul     ptra, id
2daa8 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
2daac 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
2dab0 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
2dab4 0c4 03 C2 07 FA |                             mul     id, #3
2dab8 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
2dabc 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
2dac0 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
2dac4 0c8 D8 01 B0 FD |                             call    #reloadcogs
2dac8 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
2dacc 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
2dad0 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
2dad0 0cb D8 E5 B7 F9 |                             setd    d, #addr1
2dad4 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
2dad8 0cd 08 04 DC FC |                             rep     #2, #8
2dadc 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
2dae0 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
2dae4 0d0             | 
2dae4 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
2dae4 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
2dae4 0d0 01 C2 63 FD |                             cogid   id
2dae8 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
2daec 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
2daf0 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
2daf4 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
2daf8 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
2dafc 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
2db00 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
2db04 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
2db08 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
2db0c 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2db10 0db 3F E4 A7 F9 |                             alti    d, #%111_111
2db14 0dc 00 00 00 F6 |                             mov     0-0, 0-0
2db18 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
2db1c 0de A5 E5 03 F1 |                             add     d, const512
2db20 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2db24 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
2db28 0e1 00 00 00 F6 |                             mov     0-0, 0-0
2db2c 0e2             |                             
2db2c 0e2             |                             ' setup register values for control vector loop setup after we return
2db2c 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
2db30 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
2db34 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
2db38 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
2db3c 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
2db40 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
2db44 0e8 D0 C3 8F F9 |                             altd    id, #id0
2db48 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
2db4c 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
2db50 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
2db54 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
2db58 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
2db5c 0ee             |  
2db5c 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
2db60 0ef 07 CA 07 F5 |                             and     request, #7
2db64 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
2db68 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
2db6c 0f2             |                             fit     $100                    'ensure all init code fits this space
2db6c 0f2             | 
2db6c 0f2             |                             fit     $100                    'ensure all init code fits this space
2db6c 0f2             | 
2db6c 0f2 00 00 00 00 
      ...             
2db9c 0fe 00 00 00 00 
2dba0 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
2dba4 100             | 
2dba4 100             | '..................................................................................................
2dba4 100             | ' Error result handling and COG notification of request completion
2dba4 100             | 
2dba4 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
2dba8 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
2dbac 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
2dbb0 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
2dbb4 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
2dbb8 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
2dbbc 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
2dbc0 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
2dbc4 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
2dbc8 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
2dbcc 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
2dbd0 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
2dbd4 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
2dbd8 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
2dbdc 10e             | ' Poller re-starts here after a COG is serviced
2dbdc 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
2dbe0 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
2dbe4 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
2dbe8 111             | ' Main dynamic polling loop repeats until a request arrives
2dbe8 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
2dbec 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
2dbf0 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
2dbf4 114             | 
2dbf4 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
2dbf8 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
2dbfc 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
2dc00 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
2dc04 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
2dc08 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
2dc0c 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
2dc10 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
2dc14 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
2dc18 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
2dc1c 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
2dc20 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
2dc24 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
2dc28 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
2dc2c 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
2dc30 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
2dc34 124             | 
2dc34 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
2dc38 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
2dc3c 126             |  
2dc3c 126             | '..................................................................................................
2dc3c 126             | ' List handler                               
2dc3c 126             | 
2dc3c 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
2dc40 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
2dc44 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
2dc48 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
2dc4c 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
2dc50 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
2dc54 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
2dc58 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
2dc5c 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
2dc60 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
2dc64 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
2dc68 131 33 00 60 FD |                             execf   0-0                     'process the request 
2dc6c 132             | 
2dc6c 132             | '..................................................................................................
2dc6c 132             | ' Restoring per COG state and resuming where we left off
2dc6c 132             | 
2dc6c 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
2dc70 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
2dc74 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
2dc78 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
2dc7c 136 D8 CB FB F8 |                             getbyte request, addr1, #3
2dc80 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
2dc84 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
2dc88 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
2dc8c 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
2dc90 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
2dc94 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
2dc98 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
2dc9c 13e             |                    
2dc9c 13e             | '..................................................................................................
2dc9c 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
2dc9c 13e             | 
2dc9c 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
2dca0 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
2dca4 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
2dca8 141 D0 DF B7 F9 |                             setd    a, #id0
2dcac 142 D8 DF BF F9 |                             sets    a, #addr1
2dcb0 143 FE FF FF FF 
2dcb4 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
2dcb8 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
2dcbc 146 3F DE A7 F9 |                             alti    a, #%111_111 
2dcc0 147 00 00 F0 F9 |                             muxq    0-0, 0-0
2dcc4 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
2dcc8 149 01 E2 63 FD |                             cogid   c
2dccc 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
2dcd0 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
2dcd4 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
2dcd8 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
2dcdc 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
2dce0 14f 00 E0 03 F6 |                             mov     b, 0-0
2dce4 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
2dce8 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
2dcec 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
2dcf0 153 0C 00 90 AD |             if_z            jmp     #excluded               
2dcf4 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
2dcf8 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
2dcfc 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
2dd00 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
2dd04 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
2dd08 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
2dd0c 15a             | 
2dd0c 15a             | 'determine priority cogs and build instructions for the polling sequence
2dd0c 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
2dd10 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
2dd14 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
2dd18 15d             | 
2dd18 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
2dd1c 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
2dd20 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
2dd24 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
2dd28 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
2dd2c 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
2dd30 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
2dd34 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
2dd38 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
2dd3c 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
2dd40 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
2dd44 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
2dd48 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
2dd4c 16a             | endprioloop
2dd4c 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
2dd50 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
2dd54 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
2dd58 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
2dd5c 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
2dd60 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
2dd64 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
2dd68 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
2dd6c 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
2dd70 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
2dd74 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
2dd78 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
2dd7c 176             | 
2dd7c 176             | ' populate the round robin COG polling instructions
2dd7c 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
2dd80 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
2dd84 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
2dd88 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
2dd8c 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
2dd90 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
2dd94 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
2dd98 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
2dd9c 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
2dda0 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
2dda4 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
2dda8 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
2ddac 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
2ddb0 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
2ddb4 184             | '..................................................................................................
2ddb4 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
2ddb4 184             | 
2ddb4 184             | set_latency                                                 '            (a) set latency
2ddb4 184             | get_latency                                                 '            (b) get latency
2ddb4 184             | set_burst                                                   '            (c) set burst size of bank
2ddb4 184             | get_burst                                                   '            (d) get burst size of bank
2ddb4 184             |                                                             '            (e) dump state
2ddb4 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
2ddb8 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
2ddbc 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
2ddc0 187             |                                                             ' | | | | e  account for following AUGS
2ddc0 187 04 00 00 FF 
2ddc4 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
2ddc8 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
2ddcc 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
2ddd0 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
2ddd4 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
2ddd8 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
2dddc 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
2dde0 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
2dde4 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
2dde8 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
2ddec 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
2ddf0 193             | 
2ddf0 193             | '..................................................................................................
2ddf0 193             | ' Misc EXECF code
2ddf0 193             | 
2ddf0 193 33 72 63 FD | start_read_exec             execf   newburstr
2ddf4 194 33 7C 63 FD | start_write_exec            execf   resumewrites
2ddf8 195 33 78 63 FD | continue_read_exec          execf   lockedreads
2ddfc 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
2de00 197             | 
2de00 197             | '..................................................................................................
2de00 197             | ' Variables
2de00 197             | 
2de00 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
2de04 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
2de08 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
2de0c 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
2de10 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
2de14 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
2de18 19d             | 
2de18 19d 00 00 00 80 | xfreq1          long    $80000000
2de1c 19e 00 00 00 40 | xfreq2          long    $40000000
2de20 19f 03 00 00 00 | delay           long    3
2de24 1a0             | 
2de24 1a0             | lutcodeaddr                 
2de24 1a0             | startupparams
2de24 1a0             | excludedcogs                                    'careful: shared register use!
2de24 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
2de28 1a1 00 00 00 00 | flags           long    0
2de2c 1a2             | mask                                            'careful: shared register use!
2de2c 1a2 00 00 00 00 | resetmaskA      long    0
2de30 1a3             | limit                                           'careful: shared register use!
2de30 1a3 00 00 00 00 | resetmaskB      long    0
2de34 1a4 00 00 00 00 | datapins        long    0
2de38 1a5             | const512                                        'careful: shared register use!
2de38 1a5 00 00 00 00 | devicelist      long    0
2de3c 1a6 00 00 00 00 | coglist         long    0
2de40 1a7 00 00 00 00 | mbox            long    0 
2de44 1a8             | 
2de44 1a8             | clkpin                                          'shared with code patched during init
2de44 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
2de48 1a9             | cspin                                           'shared with code patched during init
2de48 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
2de4c 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
2de50 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
2de54 1ac 01 00 00 00 | clkdelay        long    1
2de58 1ad 00 00 00 00 | regdatabus      long    0
2de5c 1ae             | 
2de5c 1ae 10 00 00 00 | deviceaddr      long    $10
2de60 1af             | rrcounter
2de60 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
2de64 1b0             | 
2de64 1b0             | ' jump addresses for the per COG handlers
2de64 1b0 20 00 00 00 | cog0_handler    long    cog0
2de68 1b1 2C 00 00 00 | cog1_handler    long    cog1
2de6c 1b2 38 00 00 00 | cog2_handler    long    cog2
2de70 1b3 44 00 00 00 | cog3_handler    long    cog3
2de74 1b4 50 00 00 00 | cog4_handler    long    cog4
2de78 1b5 5C 00 00 00 | cog5_handler    long    cog5
2de7c 1b6 68 00 00 00 | cog6_handler    long    cog6
2de80 1b7 74 00 00 00 | cog7_handler    long    cog7
2de84 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
2de88 1b9             | 
2de88 1b9             | ' EXECF sequences
2de88 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
2de8c 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
2de90 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
2de94 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
2de98 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
2de9c 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
2dea0 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
2dea4 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
2dea4 1c0             | 
2dea4 1c0             | 
2dea4 1c0             | ' SKIPF sequences
2dea4 1c0             | skiptable
2dea4 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
2dea8 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
2deac 1c2 00 00 00 00 |                 long    0                      ' read modify write long
2deb0 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
2deb4 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
2deb8 1c5 00 00 00 00 | pattern2        long    0
2debc 1c6 00 00 00 00 | pattern3        long    0
2dec0 1c7 77 02 00 00 | singlelong      long    %1001110111  
2dec4 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
2dec8 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
2decc 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
2ded0 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
2ded4 1cc             | 
2ded4 1cc             | ' LUT RAM address values
2ded4 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
2ded8 1cd DD 02 00 00 | continue_read   long    continue_read_lut
2dedc 1ce DB 02 00 00 | continue_write  long    continue_write_lut
2dee0 1cf F6 02 00 00 | noread          long    noread_lut
2dee4 1d0             | 
2dee4 1d0 00 00 00 00 | id0             long    0
2dee8 1d1 01 00 00 00 | id1             long    1
2deec 1d2 02 00 00 00 | id2             long    2
2def0 1d3 03 00 00 00 | id3             long    3
2def4 1d4 04 00 00 00 | id4             long    4
2def8 1d5 05 00 00 00 | id5             long    5
2defc 1d6 06 00 00 00 | id6             long    6
2df00 1d7 07 00 00 00 | id7             long    7
2df04 1d8             | 
2df04 1d8             | 'These next 10 request registers below are also temporarily reused during init 
2df04 1d8             | 'and COG updates and need to follow immediately after id0-id7
2df04 1d8 00 00 00 00 | addr1           long    0
2df08 1d9 00 00 00 00 | hubdata         long    0
2df0c 1da 00 00 00 00 | count           long    0
2df10 1db 00 00 00 00 | addr2           long    0
2df14 1dc 00 00 00 00 | total           long    0
2df18 1dd 00 00 00 00 | offset1         long    0
2df1c 1de 00 00 00 00 | offset2         long    0
2df20 1df 00 00 00 00 | link            long    0
2df24 1e0             | 
2df24 1e0             | burstwrite                                      'note shared register use during init
2df24 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
2df28 1e1 00 00 00 00 | id              long    0
2df2c 1e2             | 
2df2c 1e2 00 00 00 00 | header          long    0
2df30 1e3 00 00 00 00 | trailer         long    0
2df34 1e4 00 00 00 00 | cmdaddr         long    0
2df38 1e5 00 00 00 00 | request         long    0
2df3c 1e6 00 00 00 00 | rrlimit         long    0
2df40 1e7 00 00 00 00 | pinconfig       long    0
2df44 1e8 00 00 00 00 | clks            long    0
2df48 1e9 00 00 00 00 | resume          long    0
2df4c 1ea 00 00 00 00 | orighubsize     long    0
2df50 1eb 00 00 00 00 | wrclks          long    0
2df54 1ec             | 
2df54 1ec 00 00 00 00 | pattern         long    0
2df58 1ed 00 00 00 00 | hubscratch      long    0
2df5c 1ee 00 10 00 00 | val4k           long    4096
2df60 1ef             | 
2df60 1ef             | ' temporary general purpose regs
2df60 1ef 00 00 00 00 | a               long    0
2df64 1f0 00 00 00 00 | b               long    0
2df68 1f1 00 00 00 00 | c               long    0
2df6c 1f2 00 00 00 00 | d               long    0
2df70 1f3             |                 fit     502
2df70 1f3             | 
2df70 1f3             |                 fit     502
2df70 1f3             | 
2df70 1f3             | '..................................................................................................
2df70 1f3             | 
2df70 1f3             |             orgh
2df70                 | 
2df70                 | lut_code
2df70                 | 'HW init code up to 80 longs
2df70                 | 
2df70                 | '..................................................................................................
2df70                 | ' Memory layout for LUT RAM once operational:
2df70                 | '
2df70                 | '  LUT RAM address      Usage
2df70                 | '  ---------------      ----
2df70                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
2df70                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
2df70                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
2df70                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
2df70                 | '
2df70                 | ' Also during driver COG startup:
2df70                 | ' $230-$24F is used for HW init setup
2df70                 | ' $250-$26F is used as temporary vector storage 
2df70                 | '..................................................................................................
2df70                 | 
2df70                 |                 org $230    
2df70 230             | 
2df70 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
2df70 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
2df74 231 24 16 60 FD |                             pollxfi
2df78 232 FF AA 2A FF 
2df7c 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
2df80 234 28 00 B0 FD |                             call    #sendqspi
2df84 235 07 F8 07 FF 
2df88 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
2df8c 237 28 00 B0 FD |                             call    #sendspi
2df90 238 F8 07 78 FF 
2df94 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
2df98 23a 1C 00 B0 FD |                             call    #sendspi
2df9c 23b 7F 78 78 FF 
2dfa0 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
2dfa4 23d 10 00 B0 FD |                             call    #sendspi 
2dfa8 23e 2D 00 64 FD |                             ret
2dfac 23f             | 
2dfac 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
2dfb0 240 32 0C 64 FD |                             skipf   #%110
2dfb4 241 9C EF 03 F6 |                             mov     pb, xsendimm
2dfb8 242             | 
2dfb8 242 10 D0 07 F6 | sendspi                     mov     clks, #16
2dfbc 243 97 EF 03 F6 |                             mov     pb, ximm8lut
2dfc0 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
2dfc4 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2dfc8 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
2dfcc 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
2dfd0 248 24 36 60 FD |                             waitxfi                         'wait for the completion
2dfd4 249 50 48 63 FD |                             fltl    datapins                'float data bus
2dfd8 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
2dfdc 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
2dfe0 24c             | 
2dfe0 24c 00 00 00 00 
2dfe4 24d 00 00 00 00 
2dfe8 24e 00 00 00 00 
2dfec 24f 00 00 00 00 |                 long    0[$270-32-$]
2dff0 250             |                 fit     $270-32  ' keep room for 32 vector longs
2dff0 250             |     
2dff0 250             |                 fit     $270-32  ' keep room for 32 vector longs
2dff0 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
2dff0 250             | rw_vect ' PSRAM jump vectors
2dff0 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2dff4 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2dff8 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2dffc 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2e000 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
2e004 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
2e008 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
2e00c 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
2e010 258             | ro_vect ' R/O PSRAM jump vectors
2e010 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2e014 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2e018 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2e01c 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2e020 25c 00 01 00 00 |                 long    unsupported
2e024 25d 00 01 00 00 |                 long    unsupported
2e028 25e 00 01 00 00 |                 long    unsupported
2e02c 25f 00 01 00 00 |                 long    unsupported
2e030 260             | ctrl_vect ' Control jump vectors
2e030 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
2e034 261 00 01 00 00 |                 long    unsupported
2e038 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
2e03c 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
2e040 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
2e044 265 00 01 00 00 |                 long    unsupported
2e048 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
2e04c 267 3E 01 00 00 |                 long    reconfig 
2e050 268             | no_vect ' Invalid bank jump vectors
2e050 268 01 01 00 00 |                 long    invalidbank
2e054 269 01 01 00 00 |                 long    invalidbank
2e058 26a 01 01 00 00 |                 long    invalidbank
2e05c 26b 01 01 00 00 |                 long    invalidbank
2e060 26c 01 01 00 00 |                 long    invalidbank
2e064 26d 01 01 00 00 |                 long    invalidbank
2e068 26e 01 01 00 00 |                 long    invalidbank
2e06c 26f 01 01 00 00 |                 long    invalidbank
2e070 270             |                 fit     $270
2e070 270             | 
2e070 270             |                 fit     $270
2e070 270             | '..................................................................................................
2e070 270             | ' PSRAM READS
2e070 270             |                                                             ' a b c d e f
2e070 270             |                                                             ' B W L B R L  (a) byte read
2e070 270             |                                                             ' Y O O U E O  (b) word read
2e070 270             |                                                             ' T R N R S C  (c) long read
2e070 270             |                                                             ' E D G S U K  (d) new burst read
2e070 270             |                                                             '       T M E  (e) resumed sub-burst
2e070 270             |                                                             '         E D  (f) locked sub-burst
2e070 270             | 
2e070 270             | 
2e070 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
2e074 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
2e078 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
2e07c 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
2e080 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
2e084 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
2e088 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
2e08c 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
2e090 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
2e094 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
2e098 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
2e09c 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
2e0a0 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
2e0a4 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
2e0a8 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
2e0ac 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
2e0b0 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
2e0b4 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
2e0b8 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
2e0bc 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
2e0c0 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
2e0c4 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
2e0c8 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
2e0cc 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
2e0d0 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
2e0d4 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
2e0d8 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
2e0dc 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
2e0e0 28c             | 
2e0e0 28c             |                             ' fall through to read bursts
2e0e0 28c             |                         
2e0e0 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
2e0e0 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
2e0e4 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2e0e8 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2e0ec 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2e0f0 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
2e0f4 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
2e0f8 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
2e0fc 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
2e100 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
2e104 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
2e108 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
2e10c 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
2e110 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
2e114 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
2e118 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
2e11c 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
2e120 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
2e124 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
2e128 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
2e12c 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
2e130 2a0 E8 D1 03 F1 |                             add     clks, clks
2e134 2a1             | readcommon
2e134 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
2e138 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2e13c 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
2e140 2a4             | 
2e140 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2e144 2a5 69 C8 63 FD |                             rev     cmdaddr
2e148 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2e14c 2a7 61 C8 63 FD |                             mergeb  cmdaddr
2e150 2a8             | 
2e150 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
2e154 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
2e158 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
2e158 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
2e15c 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
2e160 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
2e164 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
2e168 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
2e168 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
2e16c 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
2e170 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
2e174 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
2e178 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
2e17c 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
2e180 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
2e180 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
2e184 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
2e188 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
2e18c 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
2e190 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
2e194 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
2e198 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
2e19c 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
2e1a0 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
2e1a4 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
2e1a8 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
2e1ac 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
2e1b0 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
2e1b4 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
2e1b8 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
2e1b8 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
2e1bc 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
2e1c0 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
2e1c4 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
2e1c8 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
2e1cc 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
2e1d0 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
2e1d4 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
2e1d8 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
2e1dc 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
2e1e0 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
2e1e4 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
2e1e8 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
2e1ec 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
2e1f0 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
2e1f4 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
2e1f8 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
2e1fc 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
2e200 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
2e204 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
2e208 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
2e20c 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
2e210 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
2e214 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
2e218 2da 10 03 90 FD |                             jmp     #writecommon
2e21c 2db             | 
2e21c 2db             | '..................................................................................................
2e21c 2db             | ' Burst continuation testing
2e21c 2db             | 
2e21c 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
2e220 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
2e224 2dd             | continue_read_lut          
2e224 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
2e228 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
2e22c 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
2e230 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
2e234 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
2e238 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
2e23c 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
2e240 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
2e244 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
2e248 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
2e24c 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
2e250 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
2e254 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
2e258 2ea             | 
2e258 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
2e25c 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
2e260 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
2e264 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
2e268 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
2e26c 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
2e270 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
2e274 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
2e278 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
2e27c 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
2e280 2f4 2A 1C 66 0D |             _ret_           push    #poller
2e284 2f5             | 
2e284 2f5             | 
2e284 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
2e288 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
2e288 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
2e28c 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
2e290 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
2e294 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
2e298 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
2e29c 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
2e2a0 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
2e2a4 2fd 2D 00 64 FD |                             ret                             ' | continue processing
2e2a8 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
2e2ac 2ff             | '..................................................................................................
2e2ac 2ff             | ' Completion of requests
2e2ac 2ff             | 
2e2ac 2ff             | complete_rw_lut             
2e2ac 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
2e2b0 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
2e2b4 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
2e2b8 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
2e2bc 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
2e2c0 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
2e2c4 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
2e2c8 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
2e2cc 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
2e2d0 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
2e2d4 309 32 62 64 AD |             if_z            skipf   #%110001
2e2d8 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
2e2dc 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
2e2e0 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
2e2e4 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
2e2e8 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
2e2ec 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
2e2f0 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
2e2f4 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
2e2f8 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
2e2fc 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
2e300 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
2e304 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
2e308 316             |                                                             ' skipcase (a) gfx copy to/from hub
2e308 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
2e308 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
2e308 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
2e30c 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
2e310 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
2e314 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
2e318 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
2e31c 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
2e320 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
2e324 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
2e328 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
2e32c 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
2e330 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
2e334 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
2e338 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
2e33c 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
2e340 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
2e344 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
2e348 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
2e34c 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
2e350 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
2e354 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
2e358 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
2e35c 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
2e360 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
2e364 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
2e368 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
2e36c 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
2e370 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
2e374 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
2e378 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
2e37c 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
2e380 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
2e384 335 DF B7 03 A6 |             if_z            mov     addr2, link
2e388 336 34 FF 9F AD |             if_z            jmp     #checknext
2e38c 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
2e390 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2e394 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
2e398 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
2e39c 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
2e3a0 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
2e3a4 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
2e3a8 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
2e3ac 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
2e3b0 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
2e3b4 341             | 
2e3b4 341             | '..................................................................................................
2e3b4 341             | ' PSRAM WRITES
2e3b4 341             |                                                             '  a b c d e f g h
2e3b4 341             | 
2e3b4 341             |                                                             '  B W L F B R L L (a) byte write(s)
2e3b4 341             |                                                             '  Y O O I U E O O (b) word write(s)
2e3b4 341             |                                                             '  T R N L R S C C (c) long write(s)
2e3b4 341             |                                                             '  E D G L S U K K (d) resumed fill
2e3b4 341             |                                                             '          T M E E (e) new burst write
2e3b4 341             |                                                             '            E D D (f) resumed burst
2e3b4 341             |                                                             '              F B (g) locked fill
2e3b4 341             |                                                             '              I U (h) locked burst write
2e3b4 341             |                                                             '              L R 
2e3b4 341             |                                                             '              L S 
2e3b4 341             |                                                             '                T 
2e3b4 341             | 
2e3b4 341             | w_single                   
2e3b4 341             | w_fill_cont           
2e3b4 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
2e3b8 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
2e3bc 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
2e3c0 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
2e3c4 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
2e3c8 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
2e3cc 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
2e3d0 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
2e3d4 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
2e3d8 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
2e3dc 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
2e3e0 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
2e3e4 34d             |                ' disable call to r_resume_burst for single longs when z=0
2e3e4 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
2e3e8 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
2e3ec 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
2e3f0 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
2e3f4 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
2e3f8 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
2e3fc 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
2e400 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
2e404 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
2e408 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
2e40c 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
2e410 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
2e414 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
2e418 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
2e41c 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
2e420 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
2e424 35d             |         
2e424 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
2e424 35d             |             '
2e424 35d             |             '  At least one of these 3 optional components will be sent
2e424 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
2e424 35d             |             '     body - N x full longs of data
2e424 35d             |             '     trailer - last partial long of data
2e424 35d             |             '
2e424 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
2e424 35d             |             '
2e424 35d             |             'Case    Type                           Sends
2e424 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
2e424 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
2e424 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
2e424 35d             |             ' 4)     Multiple long fill             body only
2e424 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
2e424 35d             | 
2e424 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
2e424 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
2e428 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2e42c 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2e430 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2e434 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
2e438 362 13 8C 07 F6 |                             mov     pattern3, #%10011
2e43c 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
2e440 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
2e444 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
2e448 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
2e44c 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
2e450 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
2e454 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
2e458 36a             |                             
2e458 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2e45c 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
2e460 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
2e464 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
2e468 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
2e46c 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
2e470 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
2e474 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
2e478 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
2e47c 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
2e480 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
2e484 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
2e488 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
2e48c 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
2e490 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
2e494 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
2e498 37a             | 
2e498 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2e49c 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
2e4a0 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
2e4a4 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
2e4a8 37e             |                  
2e4a8 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
2e4ac 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
2e4b0 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
2e4b4 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
2e4b8 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
2e4bc 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
2e4c0 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
2e4c4 385             | 
2e4c4 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
2e4c8 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
2e4cc 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
2e4d0 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
2e4d4 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
2e4d8 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
2e4dc 38b             | 
2e4dc 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
2e4dc 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
2e4e0 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
2e4e4 38d 2A B0 63 FD |                             push    addr1                   'save address
2e4e8 38e             | 
2e4e8 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
2e4e8 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
2e4ec 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
2e4f0 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
2e4f4 391             |             
2e4f4 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
2e4f8 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
2e4fc 393 2B B0 63 FD |                             pop     addr1                   'restore address
2e500 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
2e504 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
2e508 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
2e50c 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
2e510 398             | 
2e510 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
2e514 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
2e518 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
2e51c 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
2e520 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
2e524 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
2e528 39e             | 
2e528 39e             |                             'trailer is done
2e528 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
2e52c 39f             | 
2e52c 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
2e530 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2e534 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
2e538 3a2             | 
2e538 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2e53c 3a3 69 C8 63 FD |                             rev     cmdaddr                 
2e540 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2e544 3a5 61 C8 63 FD |                             mergeb  cmdaddr
2e548 3a6             |                             
2e548 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
2e54c 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2e550 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
2e554 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
2e558 3aa             |                                                          
2e558 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
2e55c 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
2e560 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
2e564 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
2e568 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
2e56c 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
2e570 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
2e574 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
2e578 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
2e57c 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
2e580 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
2e584 3b5             |  
2e584 3b5 59 52 63 FD |                             drvh    cspin
2e588 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
2e58c 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
2e590 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
2e594 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
2e598 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
2e59c 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
2e5a0 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
2e5a4 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
2e5a8 3be EA E5 03 F6 |                             mov     d, orighubsize
2e5ac 3bf EF E5 63 F0 |                             shl     d, a
2e5b0 3c0 F2 E3 83 F1 |                             sub     c, d
2e5b4 3c1 DD E3 03 F1 |                             add     c, offset1
2e5b8 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
2e5bc 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
2e5c0 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
2e5c4 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
2e5c8 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
2e5cc 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
2e5d0 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
2e5d4 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2e5d8 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
2e5dc 3cb BB D3 03 F6 |                             mov     resume, restorefill
2e5e0 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
2e5e4 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
2e5e8 3ce 6C FC BF CD |             if_c            call    #yield
2e5ec 3cf 2D 00 64 FD |                             ret
2e5f0 3d0             |                            
2e5f0 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
2e5f0 3d0             |                       '     rczl    pa                      'rotate left into address offset
2e5f0 3d0             |                       '     rczl    c wcz                   'restore count and flags
2e5f0 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
2e5f4 3d1 02 EC 67 F0 |                             shl     pa, #2
2e5f8 3d2 28 06 64 AD |             if_z            setq    #3
2e5fc 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
2e600 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
2e604 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
2e608 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
2e60c 3d7             | 
2e60c 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
2e610 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
2e614 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
2e618 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
2e61c 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
2e620 3dc             |                 fit 1024-32
2e620 3dc             |         
2e620 3dc             | 
2e620 3dc             | '..................................................................................................
2e620 3dc             | 
2e620 3dc             |                 fit 1024-32
2e620 3dc 00 00 00 00 
2e624 3dd 00 00 00 00 
2e628 3de 00 00 00 00 
2e62c 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
2e630 3e0             |                 org 1024-32
2e630 000             | 
2e630 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
2e630 000 00 00 00 00 |                 long $0000
2e634 001 11 11 00 00 |                 long $1111
2e638 002 22 22 00 00 |                 long $2222
2e63c 003 33 33 00 00 |                 long $3333
2e640 004 44 44 00 00 |                 long $4444
2e644 005 55 55 00 00 |                 long $5555
2e648 006 66 66 00 00 |                 long $6666
2e64c 007 77 77 00 00 |                 long $7777
2e650 008 88 88 00 00 |                 long $8888
2e654 009 99 99 00 00 |                 long $9999
2e658 00a AA AA 00 00 |                 long $aaaa
2e65c 00b BB BB 00 00 |                 long $bbbb
2e660 00c CC CC 00 00 |                 long $cccc
2e664 00d DD DD 00 00 |                 long $dddd
2e668 00e EE EE 00 00 |                 long $eeee
2e66c 00f FF FF 00 00 |                 long $ffff
2e670 010             | 
2e670 010             | 'masks
2e670 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
2e674 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
2e678 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
2e67c 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
2e680 014             | 
2e680 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
2e684 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
2e688 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
2e68c 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
2e690 018             | 
2e690 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
2e694 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
2e698 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
2e69c 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
2e6a0 01c             | 
2e6a0 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
2e6a4 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
2e6a8 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
2e6ac 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
2e6b0 020             |         fit 1024
2e6b0 020             | 
2e6b0 020             |         fit 1024
2e6b0 020             | 
2e6b0 020             | '--------------------------------------------------------------------------------------------------
2e6b0 020             |         orgh
2e6b0                 | 
2e6b0                 | gfxexpansion
2e6b0                 |                             'simple line drawing graphics expansion of memory driver
2e6b0                 |                             'jmp     #donerepeats                'just return for now
2e6b0                 | 
2e6b0     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
2e6b4     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
2e6b8     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
2e6bc     DD E1 03 F6 |                             mov     b, offset1              'get error term
2e6c0     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
2e6c4     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
2e6c8     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
2e6cc     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
2e6d0     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
2e6d4     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
2e6d8     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
2e6dc     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
2e6e0     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
2e6e4     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
2e6e8     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
2e6ec     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
2e6f0     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
2e6f4     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
2e6f8     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
2e6fc     DC E5 33 F9 |                             getword d, total, #0            'get line width
2e700     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
2e704     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
2e708     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
2e70c     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
2e710     C3 03 80 FD |                             jmp     #readmask               'continue filling
2e714                 | 	alignl
2e714                 | _usbnew_spin2_dat_
2e714                 |                 org     $000
2e714 000             | 
2e714 000             | usb_host_start
2e714 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
2e718 001             | 
2e718 001 03 00 00 FF 
2e71c 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
2e720 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
2e724 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
2e728 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
2e72c 006 29 70 63 FD |                 setq2   htmp
2e730 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
2e734 008             | 
2e734 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
2e738 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
2e73c 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
2e740 00b             | 
2e740 00b             | '------------------------------------------------------------------------------
2e740 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
2e740 00b             | ' special because the receiving function must not respond with either STALL or
2e740 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
2e740 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
2e740 00b             | ' corrupt packet, it must ignore the transaction
2e740 00b             | '------------------------------------------------------------------------------
2e740 00b             | ' On entry:
2e740 00b             | '   PTRA - start address of the SETUP data struct.
2e740 00b             | ' On exit:
2e740 00b             | '   retval - PID_ACK on success, otherwise error code.
2e740 00b             | '------------------------------------------------------------------------------
2e740 00b             | txn_setup
2e740 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
2e744 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
2e748 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
2e74c 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
2e750 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
2e754 010             | .setup
2e754 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
2e758 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e75c 012 2D 00 64 AD |         if_z    ret
2e760 013 7C 0B B0 FD |                 call    #retry_wait
2e764 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2e768 015 2D 00 64 AD |         if_z    ret
2e76c 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
2e770 017 E0 FF 9F FD |                 jmp     #.setup
2e774 018             | 
2e774 018             | '------------------------------------------------------------------------------
2e774 018             | ' IN/INTERRUPT transaction.
2e774 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
2e774 018             | '------------------------------------------------------------------------------
2e774 018             | ' On entry:
2e774 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
2e774 018             | '     CRC(b19..23).
2e774 018             | ' On exit:
2e774 018             | '------------------------------------------------------------------------------
2e774 018             | txn_in
2e774 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2e778 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
2e77c 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
2e780 01b             | 
2e780 01b             |                 ' Fall through to urx_packet
2e780 01b             | 
2e780 01b             | '------------------------------------------------------------------------------
2e780 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
2e780 01b             | ' received are handshakes and IN DATAx.
2e780 01b             | '------------------------------------------------------------------------------
2e780 01b             | ' On entry:
2e780 01b             | ' On exit:
2e780 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
2e780 01b             | '     returned.
2e780 01b             | '------------------------------------------------------------------------------
2e780 01b             | urx_packet
2e780 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
2e784 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e788 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
2e78c 01e 1A 92 63 FD |                 getct   hct2
2e790 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
2e794 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
2e798 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
2e79c 022             | .wait_sop
2e79c 022 22 A7 8A FA |                 rdpin   urx, dm
2e7a0 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e7a4 024 08 00 90 CD |         if_c    jmp     #.get_pid
2e7a8 025 FC 25 CC FB |                 jnct2   #.wait_sop
2e7ac 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
2e7b0 027             | .get_pid
2e7b0 027 28 02 B0 FD |                 call    #urx_next
2e7b4 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
2e7b8 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
2e7bc 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
2e7c0 02b             | .chk_pid
2e7c0 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e7c4 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
2e7c8 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
2e7cc 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
2e7d0 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
2e7d4 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
2e7d8 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
2e7dc 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
2e7e0 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
2e7e4 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
2e7e8 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
2e7ec 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
2e7f0 037             | .ack_resend
2e7f0 037 22 A7 82 FA |                 rqpin   urx, dm
2e7f4 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2e7f8 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
2e7fc 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
2e800 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
2e804 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
2e808 03d             | .chk_eop
2e808 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2e80c 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
2e810 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
2e814 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
2e818 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
2e81c 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2e820 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
2e824 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
2e828 045 2D 00 64 FD |                 ret
2e82c 046             | .idle
2e82c 046 22 A7 82 FA |                 rqpin   urx, dm
2e830 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e834 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
2e838 049 2D 00 64 FD |                 ret
2e83c 04a             | 
2e83c 04a             | '------------------------------------------------------------------------------
2e83c 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
2e83c 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
2e83c 04a             | ' if one is required.
2e83c 04a             | '------------------------------------------------------------------------------
2e83c 04a             | ' On entry:
2e83c 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
2e83c 04a             | ' On exit:
2e83c 04a             | '------------------------------------------------------------------------------
2e83c 04a             | utx_token
2e83c 04a 22 A7 82 FA |                 rqpin   urx, dm
2e840 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e844 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
2e848 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e84c 04e 34 0D B0 CD |         if_c    call    #utx_pre
2e850 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e854 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
2e858 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
2e85c 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
2e860 053             | .next_byte
2e860 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
2e864 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
2e868 055             | .wait
2e868 055 40 46 72 FD |                 testp   dp                      wc
2e86c 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
2e870 057 23 03 08 FC |                 akpin   dp
2e874 058 22 A5 22 FC |                 wypin   utx, dm
2e878 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
2e87c 05a             | 
2e87c 05a             | '------------------------------------------------------------------------------
2e87c 05a             | ' SETUP/OUT/INTERRUPT transaction.
2e87c 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
2e87c 05a             | '------------------------------------------------------------------------------
2e87c 05a             | ' On entry:
2e87c 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
2e87c 05a             | '     CRC(b19..23).
2e87c 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
2e87c 05a             | '   pkt_data - count of DATAx payload bytes to send.
2e87c 05a             | ' On exit:
2e87c 05a             | '------------------------------------------------------------------------------
2e87c 05a             | txn_out
2e87c 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2e880 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
2e884 05c 00 00 C0 FF 
2e888 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
2e88c 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
2e890 05f             | 
2e890 05f             |                 ' Fall through to utx_data
2e890 05f             | 
2e890 05f             | '------------------------------------------------------------------------------
2e890 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
2e890 05f             | ' calculated while the data byte is being shifted out. Since data stage
2e890 05f             | ' success/fail is not determined until the status stage of the transaction,
2e890 05f             | ' this routine is only concerned about the current DATAx packet.
2e890 05f             | '------------------------------------------------------------------------------
2e890 05f             | ' On entry:
2e890 05f             | '   PTRA - hub start address of the data to read.
2e890 05f             | '   pkt_cnt - data payload size.
2e890 05f             | ' On exit:
2e890 05f             | '------------------------------------------------------------------------------
2e890 05f             | utx_data
2e890 05f 22 A7 82 FA |                 rqpin   urx, dm
2e894 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e898 061 F4 FF 9F CD |         if_c    jmp     #utx_data
2e89c 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
2e8a0 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
2e8a4 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e8a8 065 D8 0C B0 CD |         if_c    call    #utx_pre
2e8ac 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e8b0 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
2e8b4 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2e8b8 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
2e8bc 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
2e8c0 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
2e8c4 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
2e8c8 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
2e8cc 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
2e8d0 06f             | .read_byte
2e8d0 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
2e8d4 070 F0 00 B0 FD |                 call    #utx_byte
2e8d8 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
2e8dc 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
2e8e0 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2e8e4 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2e8e8 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
2e8ec 076             | .send_crc
2e8ec 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
2e8f0 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
2e8f4 078 D0 00 B0 FD |                 call    #utx_byte
2e8f8 079 5D A5 EA F8 |                 getbyte utx, crc, #1
2e8fc 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
2e900 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
2e904 07c             | 
2e904 07c             | '------------------------------------------------------------------------------
2e904 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
2e904 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
2e904 07c             | ' expects that the packet includes at least the CRC word.
2e904 07c             | '
2e904 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
2e904 07c             | ' was requested, which makes it difficult to determine where the data stops
2e904 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
2e904 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
2e904 07c             | ' USB-16 expected residual value of 0xB001.
2e904 07c             | '
2e904 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
2e904 07c             | ' so the caller can verify IN success before writing the data to its final
2e904 07c             | ' destination.
2e904 07c             | '------------------------------------------------------------------------------
2e904 07c             | ' On entry:
2e904 07c             | '   pkt_data - max byte count expected to be in the packet.
2e904 07c             | '   newb_flg - signals new byte ready when toggled.
2e904 07c             | ' On exit:
2e904 07c             | '   pkt_cnt - actual number of bytes read.
2e904 07c             | '------------------------------------------------------------------------------
2e904 07c             | urx_data
2e904 07c F7 75 03 F6 |                 mov     htmp2, pb
2e908 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
2e90c 07e 00 00 C0 FF 
2e910 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
2e914 080 BA EF 03 F6 |                 mov     pb, htmp2
2e918 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2e91c 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
2e920 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
2e924 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
2e928 085             | .wait_byte
2e928 085             | ' In-line rx for max speed
2e928 085 22 A7 82 FA |                 rqpin   urx, dm
2e92c 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2e930 087 53 A5 02 F5 |                 and     utx, urx
2e934 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2e938 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2e93c 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
2e940 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2e944 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
2e948 08d DC FF 9F FD |                 jmp     #.wait_byte
2e94c 08e             | .get_byte
2e94c 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
2e950 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
2e954 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
2e958 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
2e95c 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2e960 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2e964 094             | .end_crc
2e964 094 01 B8 06 F1 |                 add     pkt_cnt, #1
2e968 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
2e96c 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
2e970 097 2D 00 64 1D |         if_a    ret
2e974 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
2e974 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
2e974 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
2e974 098             | ' to miss it, so cheat a bit and look for SOP clear here.
2e974 098 22 A7 82 FA |                 rqpin   urx, dm
2e978 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
2e97c 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
2e980 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
2e980 09b             | .chk_crc
2e980 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
2e984 09c 58 00 00 FF 
2e988 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
2e98c 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
2e990 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
2e994 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
2e998 0a1 34 09 B0 FD |                 call    #poll_waitx
2e99c 0a2             | 
2e99c 0a2             |                 ' Fall through to utx_handshake
2e99c 0a2             | 
2e99c 0a2             | '------------------------------------------------------------------------------
2e99c 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
2e99c 0a2             | ' the appropriate IP delay has been inserted.
2e99c 0a2             | '------------------------------------------------------------------------------
2e99c 0a2             | ' On entry:
2e99c 0a2             | '   retval - handshake PID to send.
2e99c 0a2             | ' On exit:
2e99c 0a2             | '   retval unchanged.
2e99c 0a2             | '------------------------------------------------------------------------------
2e99c 0a2             | utx_handshake
2e99c 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e9a0 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
2e9a4 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e9a8 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
2e9ac 0a6 5F A5 02 F6 |                 mov     utx, retval
2e9b0 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
2e9b4 0a8             | .idle
2e9b4 0a8 22 A7 82 FA |                 rqpin   urx, dm
2e9b8 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e9bc 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
2e9c0 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
2e9c4 0ac 08 09 90 FD |                 jmp     #poll_waitx
2e9c8 0ad             | 
2e9c8 0ad             | '------------------------------------------------------------------------------
2e9c8 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
2e9c8 0ad             | '------------------------------------------------------------------------------
2e9c8 0ad             | ' On entry:
2e9c8 0ad             | '   utx - byte to transmit.
2e9c8 0ad             | ' On exit:
2e9c8 0ad             | '------------------------------------------------------------------------------
2e9c8 0ad             | utx_byte
2e9c8 0ad 40 46 72 FD |                 testp   dp                      wc
2e9cc 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
2e9d0 0af 23 03 08 FC |                 akpin   dp
2e9d4 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
2e9d8 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
2e9dc 0b2             | 
2e9dc 0b2             | '------------------------------------------------------------------------------
2e9dc 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
2e9dc 0b2             | '------------------------------------------------------------------------------
2e9dc 0b2             | ' On entry:
2e9dc 0b2             | ' On exit:
2e9dc 0b2             | '   retval - the byte read.
2e9dc 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
2e9dc 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
2e9dc 0b2             | '     received.
2e9dc 0b2             | '------------------------------------------------------------------------------
2e9dc 0b2             | urx_next
2e9dc 0b2 22 A7 8A FA |                 rdpin   urx, dm
2e9e0 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2e9e4 0b4 53 A5 02 F5 |                 and     utx, urx
2e9e8 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2e9ec 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2e9f0 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
2e9f4 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
2e9f8 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e9fc 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2ea00 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
2ea04 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
2ea08 0bd 2D 00 64 FD |                 ret
2ea0c 0be             | 
2ea0c 0be             | '------------------------------------------------------------------------------
2ea0c 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
2ea0c 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
2ea0c 0be             | ' length, and the PID is not included in the CRC calculation:
2ea0c 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
2ea0c 0be             | '  CRC5  ENDP ADDRESS PID
2ea0c 0be             | ' %00000_1111_1111111_xxxxxxxx
2ea0c 0be             | '------------------------------------------------------------------------------
2ea0c 0be             | ' On entry:
2ea0c 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
2ea0c 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
2ea0c 0be             | ' On exit:
2ea0c 0be             | '   ep_addr_pid - CRC value appended to the packet.
2ea0c 0be             | '------------------------------------------------------------------------------
2ea0c 0be             | calc_crc5
2ea0c 0be FF 03 00 FF 
2ea10 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
2ea14 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
2ea18 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
2ea1c 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
2ea20 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
2ea24 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
2ea28 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
2ea2c 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
2ea30 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
2ea34 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
2ea38 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
2ea3c 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2ea40 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
2ea44 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2ea48 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
2ea4c 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
2ea50 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
2ea54 0d0             | 
2ea54 0d0             | '------------------------------------------------------------------------------
2ea54 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
2ea54 0d0             | '------------------------------------------------------------------------------
2ea54 0d0             | isr1_fsframe
2ea54 0d0 1A 92 62 FD |                 getct   iframe_ct_base
2ea58 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2ea5c 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2ea60 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2ea64 0d4             | .wait
2ea64 0d4 40 46 72 FD |                 testp   dp                      wc
2ea68 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
2ea6c 0d6 23 03 08 FC |                 akpin   dp
2ea70 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2ea74 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
2ea78 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
2ea7c 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
2ea80 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
2ea84 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
2ea88 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
2ea8c 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
2ea90 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
2ea94 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
2ea98 0e1 2C FF BF FD |                 call    #utx_byte
2ea9c 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
2eaa0 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
2eaa4 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
2eaa8 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
2eaac 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
2eab0 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
2eab4 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
2eab8 0e9 5B A5 42 F5 |                 or      utx, icrc
2eabc 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
2eac0 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
2eac4 0ec 20 00 90 FD |                 jmp     #isr1_wait
2eac8 0ed             | isr1_lsframe
2eac8 0ed 1A 92 62 FD |                 getct   iframe_ct_base
2eacc 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2ead0 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2ead4 0f0             | .wait
2ead4 0f0 40 46 72 FD |                 testp   dp                      wc
2ead8 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
2eadc 0f2 23 03 08 FC |                 akpin   dp
2eae0 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
2eae4 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
2eae8 0f5             | isr1_wait
2eae8 0f5 22 A5 82 FA |                 rqpin   utx, dm
2eaec 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
2eaf0 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
2eaf4 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
2eaf8 0f9 03 00 00 FF 
2eafc 0fa FF B3 06 F5 |                 and     frame, ##$7ff
2eb00 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
2eb04 0fc F5 FF 3B FB |                 reti1
2eb08 0fd             | 
2eb08 0fd             | '------------------------------------------------------------------------------
2eb08 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
2eb08 0fd             | ' transaction will complete before the next frame is triggered.
2eb08 0fd             | '------------------------------------------------------------------------------
2eb08 0fd             | ' On entry:
2eb08 0fd             | ' On exit:
2eb08 0fd             | '------------------------------------------------------------------------------
2eb08 0fd             | wait_txn_ok
2eb08 0fd 1A 74 63 FD |                 getct   htmp2
2eb0c 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
2eb10 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2eb14 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
2eb18 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
2eb1c 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
2eb20 103 2D 00 64 FD |                 ret
2eb24 104             | 
2eb24 104             | '------------------------------------------------------------------------------
2eb24 104             | ' A device connection was detected, or a bus reset was requested by the USB
2eb24 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
2eb24 104             | ' and perform a reset sequence prior to device enumeration.
2eb24 104             | '------------------------------------------------------------------------------
2eb24 104             | dev_reset
2eb24 104 22 A7 82 FA |                 rqpin   urx, dm
2eb28 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
2eb2c 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
2eb30 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2eb34 108             | reset
2eb34 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
2eb38 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
2eb3c 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
2eb40 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2eb44 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
2eb48 10d 1A 92 62 FD |                 getct   iframe_ct_base
2eb4c 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2eb50 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2eb54 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
2eb58 111 24 70 07 F1 |                 add     htmp, #36
2eb5c 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
2eb60 113             | .framewait
2eb60 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2eb64 114 F8 FF 9F CD |         if_b    jmp     #.framewait
2eb68 115 2D 00 64 FD |                 ret
2eb6c 116             | 
2eb6c 116             | '------------------------------------------------------------------------------
2eb6c 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
2eb6c 116             | '------------------------------------------------------------------------------
2eb6c 116             | ' On entry:
2eb6c 116             | '   PTRA - source address.
2eb6c 116             | '   PB - destination address.
2eb6c 116             | '   hr0 - length of copy, in bytes.
2eb6c 116             | ' On exit:
2eb6c 116             | '------------------------------------------------------------------------------
2eb6c 116             | hmemcpy
2eb6c 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
2eb70 117 F7 71 43 FC |                 wrbyte  htmp, pb
2eb74 118 01 EE 07 F1 |                 add     pb, #1
2eb78 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
2eb7c 11a             | 
2eb7c 11a             | '------------------------------------------------------------------------------
2eb7c 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
2eb7c 11a             | ' loop until the errant device is disconnected.
2eb7c 11a             | '------------------------------------------------------------------------------
2eb7c 11a             | ' On entry:
2eb7c 11a             | ' On exit:
2eb7c 11a             | '------------------------------------------------------------------------------
2eb7c 11a             | host_error
2eb7c 11a             |           if ERROR_LED >= 0
2eb7c 11a             |           end
2eb7c 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
2eb80 11b             | 
2eb80 11b             | '------------------------------------------------------------------------------
2eb80 11b             | ' Get HID descriptor buffer for current port
2eb80 11b             | '------------------------------------------------------------------------------
2eb80 11b             | ' On entry:
2eb80 11b             | ' On exit:
2eb80 11b             | '   PB - HID descriptor buffer pointer
2eb80 11b             | '------------------------------------------------------------------------------
2eb80 11b             | get_hid_descr_buffer
2eb80 11b 2D EF 03 F6 |                 mov     pb, hdev_port
2eb84 11c 01 EE E7 F2 |                 cmpsub  pb, #1
2eb88 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
2eb8c 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
2eb90 11f             | 
2eb90 11f             | 
2eb90 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
2eb94 120             | 
2eb94 120             | ' USB commands and error codes
2eb94 120 00 00 00 00 | cmd_data        long    0
2eb98 121 00 00 00 00 | usb_err_code    long    ERR_NONE
2eb9c 122             | 
2eb9c 122             | ' Parameters block assigned at cog startup
2eb9c 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
2eba0 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
2eba4 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
2eba8 125             | if ACTIVITY_LED >= 0
2eba8 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
2eba8 125             | end
2eba8 125             | if ERROR_LED >= 0
2eba8 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
2eba8 125             | end
2eba8 125 00 00 00 00 | hid_descr_p     long    0
2ebac 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
2ebac 126             | 'hkbd_report_p   long    0
2ebac 126 00 00 00 00 | hub_descr_p     long    0
2ebb0 127 00 00 00 00 | urx_buff_p      long    0
2ebb4 128 00 00 00 00 | dev_desc_buff_p long    0
2ebb8 129 00 00 00 00 | con_desc_buff_p long    0
2ebbc 12a 00 00 00 00 | cache_start_p   long    0
2ebc0 12b 00 00 00 00 | cache_end_p     long    0
2ebc4 12c             | if EMUPAD_MAX_PLAYER > 0
2ebc4 12c             | emupad_out_ptr  long    0
2ebc4 12c             | end
2ebc4 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
2ebc8 12d             | 
2ebc8 12d             | hdev_init_start
2ebc8 12d             | hdev_port       res     1
2ebc8 12d             | hdev_port       res     1
2ebc8 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2ebc8 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2ebc8 12d             | kbm_next_datax  res     1
2ebc8 12d             | kbm_next_datax  res     1
2ebc8 12d             | hub_intf_num    res     1
2ebc8 12d             | hub_intf_num    res     1
2ebc8 12d             | hub_next_datax  res     1
2ebc8 12d             | hub_next_datax  res     1
2ebc8 12d             | hub_status_chg  res     1
2ebc8 12d             | hub_status_chg  res     1
2ebc8 12d             | hub_port_status res     1
2ebc8 12d             | hub_port_status res     1
2ebc8 12d             | if HAVE_MOUSE
2ebc8 12d             | ms_intf_num     res     1
2ebc8 12d             | ms_intf_num     res     1
2ebc8 12d             | ms_in_max_pkt   res     1
2ebc8 12d             | ms_in_max_pkt   res     1
2ebc8 12d             | end
2ebc8 12d             | kb_intf_num     res     1
2ebc8 12d             | kb_intf_num     res     1
2ebc8 12d             | kb_interval     res     1
2ebc8 12d             | kb_interval     res     1
2ebc8 12d             | kb_in_max_pkt   res     1
2ebc8 12d             | kb_in_max_pkt   res     1
2ebc8 12d             | kb_max_index    res     1
2ebc8 12d             | kb_max_index    res     1
2ebc8 12d             | kb_led_states   res     1
2ebc8 12d             | kb_led_states   res     1
2ebc8 12d             | gp_intf_num     res     1
2ebc8 12d             | gp_intf_num     res     1
2ebc8 12d             | gp_interval     res     1
2ebc8 12d             | gp_interval     res     1
2ebc8 12d             | gp_max_index    res     1
2ebc8 12d             | gp_max_index    res     1
2ebc8 12d             | gp_descr_len    res     1+MAX_DEVICES
2ebc8 12d             | gp_descr_len    res     1+MAX_DEVICES
2ebc8 12d             | hdev_init_end
2ebc8 12d             | 
2ebc8 12d             | ' Initialized at cog startup:
2ebc8 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2ebc8 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2ebc8 12d             | iframe_ct_new   res     1
2ebc8 12d             | iframe_ct_new   res     1
2ebc8 12d             | iframe_ct_base  res     1
2ebc8 12d             | iframe_ct_base  res     1
2ebc8 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2ebc8 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2ebc8 12d             | 
2ebc8 12d             | ' This register block is reset to zero when a USB device connects
2ebc8 12d             | hreg_init_start
2ebc8 12d             | hstatus         res     1         ' Host status flags
2ebc8 12d             | hstatus         res     1         ' Host status flags
2ebc8 12d             | hctwait         res     1         ' Poll-based wait clocks
2ebc8 12d             | hctwait         res     1         ' Poll-based wait clocks
2ebc8 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2ebc8 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2ebc8 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2ebc8 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2ebc8 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2ebc8 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2ebc8 12d             | xfer_retry      res     1         ' Control transfer retry count
2ebc8 12d             | xfer_retry      res     1         ' Control transfer retry count
2ebc8 12d             | retry           res     1         ' Transaction retry count
2ebc8 12d             | retry           res     1         ' Transaction retry count
2ebc8 12d             | utx             res     1         ' Byte to transmit on USB
2ebc8 12d             | utx             res     1         ' Byte to transmit on USB
2ebc8 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2ebc8 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2ebc8 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2ebc8 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2ebc8 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2ebc8 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2ebc8 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2ebc8 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2ebc8 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2ebc8 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2ebc8 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2ebc8 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2ebc8 12d             | frame           res     1         ' USB 1ms frame counter value
2ebc8 12d             | frame           res     1         ' USB 1ms frame counter value
2ebc8 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2ebc8 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2ebc8 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2ebc8 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2ebc8 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2ebc8 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2ebc8 12d             | crc             res     1         ' Used for CRC16 calculation
2ebc8 12d             | crc             res     1         ' Used for CRC16 calculation
2ebc8 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2ebc8 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2ebc8 12d             | retval          res     1         ' Global success/fail return parameter
2ebc8 12d             | retval          res     1         ' Global success/fail return parameter
2ebc8 12d             | context_retval  res     1         ' Operation contextual return parameter
2ebc8 12d             | context_retval  res     1         ' Operation contextual return parameter
2ebc8 12d             | ' Device stuff
2ebc8 12d             | hdev_id         res     1+MAX_DEVICES
2ebc8 12d             | hdev_id         res     1+MAX_DEVICES
2ebc8 12d             | hdev_bcd        res     1
2ebc8 12d             | hdev_bcd        res     1
2ebc8 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2ebc8 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2ebc8 12d             | ' Keyboard/mouse stuff
2ebc8 12d             | hctrl_ep_addr   res     1
2ebc8 12d             | hctrl_ep_addr   res     1
2ebc8 12d             | hctrl_max_pkt   res     1
2ebc8 12d             | hctrl_max_pkt   res     1
2ebc8 12d             | hconfig_base    res     1
2ebc8 12d             | hconfig_base    res     1
2ebc8 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2ebc8 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2ebc8 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2ebc8 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2ebc8 12d             | hdev_class      res     1
2ebc8 12d             | hdev_class      res     1
2ebc8 12d             | hdev_subclass   res     1
2ebc8 12d             | hdev_subclass   res     1
2ebc8 12d             | hdev_protocol   res     1
2ebc8 12d             | hdev_protocol   res     1
2ebc8 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2ebc8 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2ebc8 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2ebc8 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2ebc8 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2ebc8 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2ebc8 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2ebc8 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2ebc8 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2ebc8 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2ebc8 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2ebc8 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2ebc8 12d             | if HAVE_MOUSE
2ebc8 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2ebc8 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2ebc8 12d             | end
2ebc8 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2ebc8 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2ebc8 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2ebc8 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2ebc8 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2ebc8 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2ebc8 12d             | hdev_out_addr   res     1
2ebc8 12d             | hdev_out_addr   res     1
2ebc8 12d             | 
2ebc8 12d             | if EMUPAD_MAX_PLAYER > 0
2ebc8 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
2ebc8 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
2ebc8 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
2ebc8 12d             | end
2ebc8 12d             | 
2ebc8 12d             | hreg_init_end
2ebc8 12d             | 
2ebc8 12d             | hidr_start
2ebc8 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2ebc8 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2ebc8 12d             | hidr_flags      res     1
2ebc8 12d             | hidr_flags      res     1
2ebc8 12d             | hidr_axis       res     3
2ebc8 12d             | hidr_axis       res     3
2ebc8 12d             | hidr_buttons    res     1
2ebc8 12d             | hidr_buttons    res     1
2ebc8 12d             | hidr_hats       res     1
2ebc8 12d             | hidr_hats       res     1
2ebc8 12d             | '' Above are actually useful values, 6 longs
2ebc8 12d             | hidr_id         res     1
2ebc8 12d             | hidr_id         res     1
2ebc8 12d             | hidr_state      res     1
2ebc8 12d             | hidr_state      res     1
2ebc8 12d             | hidr_size       res     1
2ebc8 12d             | hidr_size       res     1
2ebc8 12d             | hidr_count      res     1
2ebc8 12d             | hidr_count      res     1
2ebc8 12d             | hidr_offset     res     1
2ebc8 12d             | hidr_offset     res     1
2ebc8 12d             | hidr_usage_idx  res     1
2ebc8 12d             | hidr_usage_idx  res     1
2ebc8 12d             | hidr_lminmax    res     1
2ebc8 12d             | hidr_lminmax    res     1
2ebc8 12d             | hidr_pminmax    res     1
2ebc8 12d             | hidr_pminmax    res     1
2ebc8 12d             | hidr_type       res     1
2ebc8 12d             | hidr_type       res     1
2ebc8 12d             | hidr_end
2ebc8 12d             | 
2ebc8 12d             | ' Variables dependent on the system freqency
2ebc8 12d             | _var_64_lower_  res     1
2ebc8 12d             | _var_64_lower_  res     1
2ebc8 12d             | _var_64_upper_  res     1
2ebc8 12d             | _var_64_upper_  res     1
2ebc8 12d             | _12Mbps_        res     1
2ebc8 12d             | _12Mbps_        res     1
2ebc8 12d             | _1_5Mbps_       res     1
2ebc8 12d             | _1_5Mbps_       res     1
2ebc8 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2ebc8 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2ebc8 12d             | _1us_           res     1         ' 1us
2ebc8 12d             | _1us_           res     1         ' 1us
2ebc8 12d             | _10us_          res     1         ' 10us
2ebc8 12d             | _10us_          res     1         ' 10us
2ebc8 12d             | _33us_          res     1         ' 33us
2ebc8 12d             | _33us_          res     1         ' 33us
2ebc8 12d             | _txn_err_       res     1         ' 250us
2ebc8 12d             | _txn_err_       res     1         ' 250us
2ebc8 12d             | _500us_         res     1         ' 500us
2ebc8 12d             | _500us_         res     1         ' 500us
2ebc8 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2ebc8 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2ebc8 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2ebc8 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2ebc8 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2ebc8 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2ebc8 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2ebc8 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2ebc8 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2ebc8 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2ebc8 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2ebc8 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2ebc8 12d             | _preamble_wait_ res     1
2ebc8 12d             | _preamble_wait_ res     1
2ebc8 12d             | _1ms_           res     1         ' 1ms
2ebc8 12d             | _1ms_           res     1         ' 1ms
2ebc8 12d             | _2ms_           res     1         ' 2ms
2ebc8 12d             | _2ms_           res     1         ' 2ms
2ebc8 12d             | _suspend_wait_  res     1         ' 3ms
2ebc8 12d             | _suspend_wait_  res     1         ' 3ms
2ebc8 12d             | _4ms_           res     1         ' 4ms
2ebc8 12d             | _4ms_           res     1         ' 4ms
2ebc8 12d             | _xfer_wait_     res     1         ' 5ms
2ebc8 12d             | _xfer_wait_     res     1         ' 5ms
2ebc8 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2ebc8 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2ebc8 12d             | _reset_hold_    res     1         ' 15ms
2ebc8 12d             | _reset_hold_    res     1         ' 15ms
2ebc8 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2ebc8 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2ebc8 12d             | _21ms_          res     1         ' 21ms
2ebc8 12d             | _21ms_          res     1         ' 21ms
2ebc8 12d             | _100ms_         res     1         ' 100ms
2ebc8 12d             | _100ms_         res     1         ' 100ms
2ebc8 12d             | _500ms_         res     1         ' 500ms
2ebc8 12d             | _500ms_         res     1         ' 500ms
2ebc8 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2ebc8 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2ebc8 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2ebc8 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2ebc8 12d             | '------------------------------------------------------------------------------
2ebc8 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2ebc8 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2ebc8 12d             | _usb_d_ls_nco_  res     1
2ebc8 12d             | _usb_d_ls_nco_  res     1
2ebc8 12d             | _usb_h_fs_nco_  res     1
2ebc8 12d             | _usb_h_fs_nco_  res     1
2ebc8 12d             | _usb_d_fs_nco_  res     1
2ebc8 12d             | _usb_d_fs_nco_  res     1
2ebc8 12d             | '------------------------------------------------------------------------------
2ebc8 12d             | ' Scratch registers
2ebc8 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2ebc8 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2ebc8 12d             | htmp1           res     1
2ebc8 12d             | htmp1           res     1
2ebc8 12d             | htmp2           res     1
2ebc8 12d             | htmp2           res     1
2ebc8 12d             | htmp3           res     1
2ebc8 12d             | htmp3           res     1
2ebc8 12d             | hrep            res     1         ' Repeat count
2ebc8 12d             | hrep            res     1         ' Repeat count
2ebc8 12d             | hsave0          res     1         ' Subroutine parameter saves
2ebc8 12d             | hsave0          res     1         ' Subroutine parameter saves
2ebc8 12d             | hsave1          res     1
2ebc8 12d             | hsave1          res     1
2ebc8 12d             | hsave2          res     1
2ebc8 12d             | hsave2          res     1
2ebc8 12d             | isrtmp1         res     1
2ebc8 12d             | isrtmp1         res     1
2ebc8 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2ebc8 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2ebc8 12d             | hr0             res     1         ' Multi-purpose registers
2ebc8 12d             | hr0             res     1         ' Multi-purpose registers
2ebc8 12d             | hr1             res     1
2ebc8 12d             | hr1             res     1
2ebc8 12d             | hr2             res     1
2ebc8 12d             | hr2             res     1
2ebc8 12d             | hr3             res     1
2ebc8 12d             | hr3             res     1
2ebc8 12d             | hpar1           res     1         ' Routine entry/exit parameters
2ebc8 12d             | hpar1           res     1         ' Routine entry/exit parameters
2ebc8 12d             | hpar2           res     1
2ebc8 12d             | hpar2           res     1
2ebc8 12d             | hpar3           res     1
2ebc8 12d             | hpar3           res     1
2ebc8 12d             | hct2            res     1         ' Function response bus turn-around timer
2ebc8 12d             | hct2            res     1         ' Function response bus turn-around timer
2ebc8 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2ebc8 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2ebc8 12d             | mod_cnt         res     1         ' Used in idle loops
2ebc8 12d             | mod_cnt         res     1         ' Used in idle loops
2ebc8 12d             |                 fit     $1F0
2ebc8 12d             |                 org     $200
2ebc8 200             | hlut_start
2ebc8 200             | 
2ebc8 200             | '------------------------------------------------------------------------------
2ebc8 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
2ebc8 200             | ' settings to startup defaults.
2ebc8 200             | '------------------------------------------------------------------------------
2ebc8 200             | ' On entry:
2ebc8 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
2ebc8 200             | '------------------------------------------------------------------------------
2ebc8 200             | set_speed_full
2ebc8 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
2ebcc 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2ebd0 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
2ebd4 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
2ebd8 204             | '                ret                             wcz     ' Restore caller flags on exit
2ebd8 204             | 
2ebd8 204             | '------------------------------------------------------------------------------
2ebd8 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
2ebd8 204             | ' is a downstream hub connected (not yet implemented), the baud generator
2ebd8 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
2ebd8 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
2ebd8 204             | ' putting the smart pins into reset.
2ebd8 204             | '------------------------------------------------------------------------------
2ebd8 204             | ' On entry:
2ebd8 204             | ' On exit: CZ flags restored to caller states
2ebd8 204             | '------------------------------------------------------------------------------
2ebd8 204             | set_speed_low
2ebd8 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
2ebdc 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
2ebe0 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
2ebe4 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2ebe8 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2ebec 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2ebf0 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
2ebf4 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
2ebf8 20c             | 
2ebf8 20c             | '------------------------------------------------------------------------------
2ebf8 20c             | ' Perform configuration stuff required when a device intitially connects.
2ebf8 20c             | '------------------------------------------------------------------------------
2ebf8 20c             | ' On entry:
2ebf8 20c             | ' On exit:
2ebf8 20c             | '------------------------------------------------------------------------------
2ebf8 20c             | on_connect
2ebf8 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
2ebfc 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
2ec00 20e             | .retry
2ec00 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2ec04 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
2ec08 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
2ec0c 211 00 08 00 FF 
2ec10 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2ec14 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
2ec18 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2ec1c 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2ec20 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2ec24 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2ec28 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ec2c 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
2ec30 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2ec34 21b 4C 03 B0 FD |                 call    #poll_waitx
2ec38 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
2ec3c 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
2ec40 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2ec44 21f B8 FF 9F FD |                 jmp     #.retry
2ec48 220             | .get_dev_desc
2ec48 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2ec4c 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2ec50 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2ec54 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
2ec58 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
2ec5c 225 88 FB BF FD |                 call    #reset
2ec60 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2ec64 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2ec68 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
2ec6c 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
2ec70 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ec74 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2ec78 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
2ec7c 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2ec80 22e 04 00 00 FF 
2ec84 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
2ec88 230 34 FA BF FD |                 call    #calc_crc5
2ec8c 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
2ec90 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2ec94 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2ec98 234 F7 AD C2 FA |                 rdbyte  total_data, pb
2ec9c 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2eca0 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2eca4 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2eca8 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2ecac 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2ecb0 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2ecb4 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2ecb8 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2ecbc 23d C4 02 B0 FD |                 call    #poll_waitx
2ecc0 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2ecc4 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2ecc8 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2eccc 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2ecd0 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2ecd4 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ecd8 244 2D 00 64 5D |         if_nz   ret
2ecdc 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2ece0 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2ece4 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2ece8 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2ecec 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2ecf0 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2ecf4 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2ecf8 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2ecfc 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2ed00 24e 2C FB 9F CD |         if_b    jmp     #host_error
2ed04 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
2ed08 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2ed0c 251 2D EC 63 FD |                 call    pa
2ed10 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2ed14 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
2ed18 254 2C EC 63 FD |                 jmp     pa
2ed1c 255             | 
2ed1c 255             | '------------------------------------------------------------------------------
2ed1c 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2ed1c 255             | ' Status reporting is always in the function-to-host direction.
2ed1c 255             | '------------------------------------------------------------------------------
2ed1c 255             | ' On entry:
2ed1c 255             | '   PTRA - start address of the SETUP data in hub.
2ed1c 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2ed1c 255             | '     stage.
2ed1c 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2ed1c 255             | ' On exit:
2ed1c 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2ed1c 255             | '     contains the count of data stage bytes actually received, which must
2ed1c 255             | '     always be <= the count requested.
2ed1c 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2ed1c 255             | '     more specific USB operation error code.
2ed1c 255             | '------------------------------------------------------------------------------
2ed1c 255             | control_read
2ed1c 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2ed20 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2ed24 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
2ed28 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2ed2c 259             | .xfer_start
2ed2c 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2ed30 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2ed34 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ed38 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2ed3c 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
2ed40 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2ed44 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2ed48 260 61 00 00 FF 
2ed4c 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
2ed50 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2ed54 263             | .data
2ed54 263 56 B1 02 F6 |                 mov     pkt_data, total_data
2ed58 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
2ed5c 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2ed60 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2ed64 267             | .nak_retry
2ed64 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
2ed68 268             | .in_retry
2ed68 268 BC F6 BF FD |                 call    #txn_in
2ed6c 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
2ed70 26a 28 00 90 AD |         if_z    jmp     #.commit
2ed74 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2ed78 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2ed7c 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2ed80 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2ed84 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
2ed88 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2ed8c 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2ed90 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ed94 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
2ed98 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
2ed9c 275             | .commit
2ed9c 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
2eda0 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2eda4 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
2eda8 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
2edac 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
2edb0 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2edb4 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
2edb8 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2edbc 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
2edc0 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2edc4 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
2edc8 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2edcc 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
2edd0 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
2edd4 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2edd8 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2eddc 285             | .pre_status
2eddc 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
2ede0 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
2ede4 287 00 B0 06 F6 |                 mov     pkt_data, #0
2ede8 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2edec 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2edf0 28a 61 00 00 FF 
2edf4 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
2edf8 28c             | .out_retry
2edf8 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2edfc 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ee00 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
2ee04 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2ee08 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2ee0c 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2ee10 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2ee14 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2ee18 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ee1c 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
2ee20 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
2ee24 297             | ' I've encountered transfer STALL, even though the data looks correct, and
2ee24 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
2ee24 297             | ' ControlRead() transfer gets things unstuck most of the time...
2ee24 297             | .xfer_retry
2ee24 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
2ee28 298 58 01 B0 FD |                 call    #poll_waitx
2ee2c 299 8C F9 BF FD |                 call    #wait_txn_ok
2ee30 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2ee34 29b C7 F1 03 F6 |                 mov     ptra, hpar2
2ee38 29c C8 EF 03 F6 |                 mov     pb, hpar3
2ee3c 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
2ee40 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2ee44 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
2ee48 2a0             | 
2ee48 2a0             | '------------------------------------------------------------------------------
2ee48 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
2ee48 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
2ee48 2a0             | ' the SETUP data struct is filled with the required values.
2ee48 2a0             | '------------------------------------------------------------------------------
2ee48 2a0             | ' On entry:
2ee48 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
2ee48 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
2ee48 2a0             | '     stage.
2ee48 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
2ee48 2a0             | ' On exit:
2ee48 2a0             | '   retval - used to convey the success/failure of each stage.
2ee48 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2ee48 2a0             | '     more specific USB operation error code.
2ee48 2a0             | '------------------------------------------------------------------------------
2ee48 2a0             | control_write
2ee48 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2ee4c 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2ee50 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2ee54 2a3             | 
2ee54 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2ee58 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
2ee5c 2a5 F7 91 03 F6 |                 mov     hpar3, pb
2ee60 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2ee64 2a7             | .xfer_start
2ee64 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
2ee68 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2ee6c 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2ee70 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ee74 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
2ee78 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
2ee7c 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2ee80 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2ee84 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
2ee88 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2ee8c 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2ee90 2b2             | .data
2ee90 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2ee94 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
2ee98 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2ee9c 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
2eea0 2b6             | .out_retry
2eea0 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2eea4 2b7 88 F6 BF FD |                 call    #txn_out
2eea8 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2eeac 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
2eeb0 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2eeb4 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
2eeb8 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
2eebc 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
2eec0 2be             | .commit
2eec0 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2eec4 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
2eec8 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
2eecc 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2eed0 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
2eed4 2c3             | pre_status_in
2eed4 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
2eed8 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2eedc 2c5             | .status_retry
2eedc 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
2eee0 2c6 44 F5 BF FD |                 call    #txn_in
2eee4 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
2eee8 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
2eeec 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
2eef0 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
2eef4 2cb 2D 00 64 AD |         if_z    ret
2eef8 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
2eefc 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ef00 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
2ef04 2cf             | '               ret                                     ' Caller must handle transfer retirement
2ef04 2cf             | 
2ef04 2cf             | '------------------------------------------------------------------------------
2ef04 2cf             | ' Execute an IN interrupt transaction.
2ef04 2cf             | '------------------------------------------------------------------------------
2ef04 2cf             | ' On entry:
2ef04 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
2ef04 2cf             | '   hpar2 - Address of the IN data buffer
2ef04 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
2ef04 2cf             | ' On exit:
2ef04 2cf             | '   retval - the result of the operation.
2ef04 2cf             | '   hpar3 - the count of IN data bytes actually received.
2ef04 2cf             | '------------------------------------------------------------------------------
2ef04 2cf             | do_int_in
2ef04 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2ef08 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2ef0c 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2ef10 2d2             | 
2ef10 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
2ef14 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
2ef18 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
2ef1c 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
2ef20 2d6             | .retry
2ef20 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
2ef24 2d7 00 F5 BF FD |                 call    #txn_in
2ef28 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
2ef2c 2d9 1C 00 90 AD |         if_z    jmp     #.commit
2ef30 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
2ef34 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
2ef38 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
2ef3c 2dd 54 00 B0 FD |                 call    #retry_wait
2ef40 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ef44 2df 18 00 90 AD |         if_z    jmp     #.post_ret
2ef48 2e0 D4 FF 9F FD |                 jmp     #.retry
2ef4c 2e1             | .commit
2ef4c 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
2ef50 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
2ef54 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
2ef58 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
2ef5c 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2ef60 2e6             | .post_ret
2ef60 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
2ef64 2e7             | 
2ef64 2e7             | 
2ef64 2e7             | '------------------------------------------------------------------------------
2ef64 2e7             | ' Resets the downstream hub port to FS
2ef64 2e7             | '------------------------------------------------------------------------------
2ef64 2e7             | dwnstream_reset
2ef64 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2ef68 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
2ef6c 2e9             | 
2ef6c 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
2ef70 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2ef74 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2ef78 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2ef7c 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2ef80 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2ef84 2ef             | 
2ef84 2ef             | '------------------------------------------------------------------------------
2ef84 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
2ef84 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
2ef84 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
2ef84 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
2ef84 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
2ef84 2ef             | '------------------------------------------------------------------------------
2ef84 2ef             | ' On entry:
2ef84 2ef             | '   hctwait - wait interval in sysclocks.
2ef84 2ef             | ' On exit:
2ef84 2ef             | '------------------------------------------------------------------------------
2ef84 2ef             | poll_waitx
2ef84 2ef 1A 92 63 FD |                 getct   hct2
2ef88 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
2ef8c 2f1             | .wait
2ef8c 2f1 FF 25 CC FB |                 jnct2   #.wait
2ef90 2f2 2D 00 64 FD |                 ret
2ef94 2f3             | 
2ef94 2f3             | '------------------------------------------------------------------------------
2ef94 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
2ef94 2f3             | '------------------------------------------------------------------------------
2ef94 2f3             | ' On entry:
2ef94 2f3             | '   retval - transaction response PID or error code.
2ef94 2f3             | ' On exit:
2ef94 2f3             | '------------------------------------------------------------------------------
2ef94 2f3             | retry_wait
2ef94 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2ef98 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
2ef9c 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2efa0 2f6 14 00 90 AD |         if_z    jmp     #.nak
2efa4 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
2efa8 2f8 D8 FF BF FD |                 call    #poll_waitx
2efac 2f9             | .dec
2efac 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
2efb0 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
2efb4 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
2efb8 2fc             | .nak
2efb8 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
2efbc 2fd C4 FF BF FD |                 call    #poll_waitx
2efc0 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
2efc4 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
2efc8 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
2efcc 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
2efd0 302 2D 00 64 FD |                 ret
2efd4 303             | 
2efd4 303             | host_reset
2efd4 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
2efd8 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
2efdc 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
2efdc 305 BD 01 05 FF 
2efe0 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
2efe4 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
2efe8 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
2efec 309             | ' Check to see if the system clock has been changed.
2efec 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2eff0 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
2eff4 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
2eff8 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
2effc 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2f000 30e 40 46 62 FD |                 dirl    dp
2f004 30f             | 
2f004 30f 28 02 64 FD |                 setq    #1
2f008 310 80 00 80 FF 
2f00c 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2f010 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
2f014 313             | .enable
2f014 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2f018 314 41 46 62 FD |                 dirh    dp
2f01c 315 1F 36 63 FD |                 waitx   _1us_
2f020 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f024 317             | 
2f024 317             |                 ' Handle Port protection enable and startup delay
2f024 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
2f028 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
2f02c 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
2f030 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
2f034 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
2f038 31c             | 
2f038 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
2f03c 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
2f040 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
2f044 31f 00 00 04 F6 |                 mov     0-0, #0
2f048 320             | .regloop
2f048 320             | 
2f048 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
2f048 320             | 
2f048 320             | discon_entry
2f048 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
2f04c 321             | 
2f04c 321             |               
2f04c 321             |         if HAVE_HIDPAD
2f04c 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
2f050 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
2f054 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
2f058 324 F7 01 68 FC |                 wrlong  #0,pb
2f05c 325             |         end
2f05c 325             |         if EMUPAD_MAX_PLAYER > 0
2f05c 325             |         end
2f05c 325             | 
2f05c 325             |                 ' Fall through to disconnected loop
2f05c 325             | 
2f05c 325             | '-----------------------------------------------------------------------------------------------------------------
2f05c 325             | ' Device connect handling (Section 7.1.7.3).
2f05c 325             | '-----------------------------------------------------------------------------------------------------------------
2f05c 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
2f05c 325             | ' device to connect (Section 7.1.7.3).
2f05c 325             | '-----------------------------------------------------------------------------------------------------------------
2f05c 325             | disconnected
2f05c 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
2f060 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
2f064 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
2f068 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
2f06c 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
2f070 32a             |         if ACTIVITY_LED >= 0
2f070 32a             |         end
2f070 32a 22 A7 82 FA |                 rqpin   urx, dm
2f074 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
2f078 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
2f07c 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
2f080 32e             | .se1_test
2f080 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
2f084 32f FC FE BF FD |                 call    #poll_waitx
2f088 330 22 A7 82 FA |                 rqpin   urx, dm
2f08c 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2f090 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
2f094 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
2f098 334             | .se1            'SE1 is a fatal error condition
2f098 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
2f09c 335 E4 FE BF FD |                 call    #poll_waitx
2f0a0 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
2f0a4 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
2f0a8 338             | .connect_test                                           ' Test lines until stable J/K state seen
2f0a8 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
2f0ac 339 22 A7 82 FA |                 rqpin   urx, dm
2f0b0 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2f0b4 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
2f0b8 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
2f0bc 33d             | connected
2f0bc 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
2f0c0 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
2f0c4 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
2f0c8 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
2f0cc 341             | .set_pulse
2f0cc 341 1A 64 63 FD |                 getct   _pulse_time_
2f0d0 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
2f0d4 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
2f0d4 343             | ' of 1ms and make a correction, if necessary.
2f0d4 343             | '                mov     htmp, _1ms_
2f0d4 343             | '                subs    htmp, iframe_delta
2f0d4 343             | '                adds    _frame1ms_clks_, htmp
2f0d4 343             | '                debug(udec(_frame1ms_clks_))
2f0d4 343             | 
2f0d4 343             |                 ' Fall through to idle/processing loop
2f0d4 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
2f0d8 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
2f0dc 345             | 
2f0dc 345             | hidle
2f0dc 345 22 A7 82 FA |                 rqpin   urx, dm
2f0e0 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2f0e4 347 98 00 90 CD |         if_c    jmp     #.se0_test
2f0e8 348 24 06 70 FD |                 pollct3                         wc
2f0ec 349 68 00 90 3D |         if_nc   jmp     #.nopoll
2f0f0 34a 1A 94 63 FD |                 getct   hct3
2f0f4 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
2f0f8 34c             | 
2f0f8 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2f0fc 34d 00 70 E3 F8 |                 getbyte htmp
2f100 34e             | 
2f100 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2f104 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2f108 350 40 00 90 AD |         if_z    jmp     #.poll
2f10c 351             | 
2f10c 351             |         if _HAVE_GAMEPAD
2f10c 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2f110 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2f114 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2f118 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2f11c 355 2C 00 90 AD |         if_z    jmp     #.poll
2f120 356             |         end
2f120 356             | 
2f120 356             |         if HAVE_MOUSE
2f120 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2f124 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2f128 358 20 00 90 AD |         if_z    jmp     #.poll
2f12c 359             |         end
2f12c 359             | 
2f12c 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2f130 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2f134 35b 14 00 90 AD |         if_z    jmp     #.poll
2f138 35c             | 
2f138 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2f13c 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2f140 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2f144 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2f148 360             |         if HAVE_MOUSE
2f148 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2f14c 361             |         else
2f14c 361             |         end
2f14c 361             | 
2f14c 361             | .poll
2f14c 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2f150 362 2D EC 63 FD |                 call    pa
2f154 363             | .skip_poll
2f154 363             | 
2f154 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2f158 364             | 
2f158 364             | .nopoll
2f158 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2f15c 365 44 00 90 AD |         if_z    jmp     #hsuspend
2f160 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2f164 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2f168 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2f16c 369 1A 84 63 FD |                 getct   hr0
2f170 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2f174 36b             |         if ACTIVITY_LED >= 0
2f174 36b             |         end
2f174 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2f178 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2f17c 36d 5C FF 9F FD |                 jmp     #hidle
2f180 36e             | ' Check for extended SE0 state on the bus
2f180 36e             | .se0_test
2f180 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2f184 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2f188 370 22 A7 82 FA |                 rqpin   urx, dm
2f18c 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2f190 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2f194 373 24 F6 BF FD |                 call    #wait_txn_ok
2f198 374 00 00 80 FF 
2f19c 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2f1a0 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2f1a0 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2f1a4 377             | 
2f1a4 377             | hsuspend
2f1a4 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2f1a8 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2f1ac 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2f1b0 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2f1b4 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2f1b8 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2f1bc 37d             | 
2f1bc 37d             |                 ' Fall through to resume wait loop
2f1bc 37d             | 
2f1bc 37d             | hwait_resume
2f1bc 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2f1c0 37e 02 86 47 F0 |                 shr     hr1, #2
2f1c4 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2f1c8 380             |         if ACTIVITY_LED >= 0
2f1c8 380             |         end
2f1c8 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2f1cc 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2f1d0 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2f1d4 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2f1d8 384 18 00 90 AD |         if_z    jmp     #.resume
2f1dc 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2f1e0 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2f1e4 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2f1e8 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2f1ec 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2f1f0 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2f1f4 38b             | .resume
2f1f4 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2f1f8 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2f1fc 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2f200 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2f204 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2f208 390 1F 70 63 FD |                 waitx   htmp
2f20c 391 22 07 28 FC |                 wypin   #OUT_J, dm
2f210 392 01 70 47 F0 |                 shr     htmp, #1
2f214 393 1F 70 63 FD |                 waitx   htmp
2f218 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f21c 395 1A 92 62 FD |                 getct   iframe_ct_base
2f220 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2f224 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2f228 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2f22c 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2f230 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2f234 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2f238 39c             | 
2f238 39c             | '------------------------------------------------------------------------------
2f238 39c             | ' Send preamble to enable low-speed HUB ports
2f238 39c             | '------------------------------------------------------------------------------
2f238 39c             | ' On entry:
2f238 39c             | ' On exit:
2f238 39c             | '   USB baud rate set to low-speed
2f238 39c             | '------------------------------------------------------------------------------
2f238 39c             | utx_pre
2f238 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2f23c 39d 40 46 62 FD |                 dirl    dp
2f240 39e 28 02 64 FD |                 setq    #1
2f244 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2f248 3a0 58 44 62 FD |                 drvl    dm
2f24c 3a1 59 46 62 FD |                 drvh    dp
2f250 3a2             | 
2f250 3a2 1E 00 00 FF 
2f254 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2f258 3a4             | 
2f258 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2f25c 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2f260 3a6 28 02 64 3D |         if_nc   setq    #1
2f264 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2f268 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2f26c 3a9             | .l1
2f26c 3a9             | 
2f26c 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2f270 3aa 40 46 62 FD |                 dirl    dp
2f274 3ab 28 02 64 FD |                 setq    #1
2f278 3ac 80 00 80 FF 
2f27c 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2f280 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2f284 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2f288 3b0 41 46 62 FD |                 dirh    dp
2f28c 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f290 3b2             | 
2f290 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2f294 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2f298 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2f29c 3b5             | 
2f29c 3b5             | hlut_end
2f29c 3b5             |                 fit     $400
2f29c 3b5             |                 orgh
2f29c                 | if OVERLAP_MEMORY
2f29c                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2f29c                 | end
2f29c                 | '------------------------------------------------------------------------------
2f29c                 | ' Routines called from cog space.
2f29c                 | '------------------------------------------------------------------------------
2f29c                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2f29c                 | '------------------------------------------------------------------------------
2f29c                 | 
2f29c                 | '------------------------------------------------------------------------------
2f29c                 | ' USB host cog initialization.
2f29c                 | '------------------------------------------------------------------------------
2f29c                 | usb_host_init
2f29c                 |                 ' Initialize buffer pointers
2f29c                 |         if OVERLAP_MEMORY
2f29c                 |         else
2f29c     40 15 B0 FE |                 loc     pb, #hid_descr
2f2a0                 |         end
2f2a0     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2f2a4                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2f2a4                 |                 {
2f2a4                 |                 }
2f2a4                 |         
2f2a4                 |                 {
2f2a4                 |                 }
2f2a4                 |                 'loc     pb,#hkbd_report
2f2a4                 |                 'mov     hkbd_report_p,pb
2f2a4                 | 
2f2a4     08 1D B0 FE |                 loc     pb, #hub_descr
2f2a8     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2f2ac     1D 1D B0 FE |                 loc     pb, #urx_buff
2f2b0     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2f2b4     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2f2b8     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2f2bc     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2f2c0     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2f2c4     18 15 B0 FE |                 loc     pb, #usb_cache_start
2f2c8     F7 55 02 F6 |                 mov     cache_start_p, pb
2f2cc     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2f2d0     F7 57 02 F6 |                 mov     cache_end_p, pb
2f2d4                 | 
2f2d4                 |         if ERROR_LED >= 0
2f2d4                 |         end
2f2d4                 | 
2f2d4                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2f2d4                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2f2d4                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2f2d4                 | ' Configure and enable the Serial Host USB port.
2f2d4     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2f2d8                 | 
2f2d8                 | '------------------------------------------------------------------------------
2f2d8                 | ' Timing calculations happen before any interrupt(s) are enabled.
2f2d8                 | '------------------------------------------------------------------------------
2f2d8                 | ' On entry:
2f2d8                 | '   htmp - current CLKFREQ value.
2f2d8                 | '------------------------------------------------------------------------------
2f2d8                 | hinit_usb_timings
2f2d8                 | '                getct   htmp2
2f2d8     B8 59 02 F6 |                 mov     save_sysclk, htmp
2f2dc     8D 5B 80 FF 
2f2e0     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2f2e4     18 30 63 FD |                 getqx   _12Mbps_
2f2e8     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2f2ec     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2f2f0     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2f2f4     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2f2f8     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2f2fc     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2f300     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2f304     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2f308     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2f30c     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2f310     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2f314     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2f318     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2f31c     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2f320     80 00 00 FF 
2f324     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2f328     18 2C 63 FD |                 getqx   _var_64_lower_
2f32c     19 2E 63 FD |                 getqy   _var_64_upper_
2f330     28 2C 63 FD |                 setq    _var_64_lower_
2f334     65 CD 1D FF 
2f338     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2f33c     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2f340     01 00 00 FF 
2f344     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2f348     18 2C 63 FD |                 getqx   _var_64_lower_
2f34c     19 2E 63 FD |                 getqy   _var_64_upper_
2f350     28 2C 63 FD |                 setq    _var_64_lower_
2f354     A1 07 00 FF 
2f358     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2f35c     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2f360     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2f364     09 36 57 F0 |                 shr     _1us_, #9               wc
2f368     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2f36c     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2f370     18 38 63 FD |                 getqx   _10us_
2f374     09 38 57 F0 |                 shr     _10us_, #9              wc
2f378     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2f37c     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2f380     18 3A 63 FD |                 getqx   _33us_
2f384     09 3A 57 F0 |                 shr     _33us_, #9              wc
2f388     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2f38c     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2f390     18 3C 63 FD |                 getqx   _txn_err_
2f394     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2f398     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2f39c     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2f3a0     18 3E 63 FD |                 getqx   _500us_
2f3a4     09 3E 57 F0 |                 shr     _500us_, #9             wc
2f3a8     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2f3ac     01 00 00 FF 
2f3b0     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2f3b4     18 40 63 FD |                 getqx   _txn_ok_ls_
2f3b8     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2f3bc     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2f3c0     01 00 00 FF 
2f3c4     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2f3c8     18 42 63 FD |                 getqx   _txn_ok_fs_
2f3cc     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2f3d0     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2f3d4     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2f3d8     05 00 00 FF 
2f3dc     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2f3e0     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2f3e4     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2f3e8     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2f3ec     1C 00 00 FF 
2f3f0     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2f3f4     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2f3f8     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2f3fc     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2f400     00 00 00 FF 
2f404     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2f408     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2f40c     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2f410     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2f414     04 00 00 FF 
2f418     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2f41c     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2f420     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2f424     8D 5B 00 FF 
2f428     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2f42c     18 4C 63 FD |                 getqx   _preamble_wait_
2f430     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2f434     01 00 00 FF 
2f438     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2f43c     18 2C 63 FD |                 getqx   _var_64_lower_
2f440     19 2E 63 FD |                 getqy   _var_64_upper_
2f444     28 2C 63 FD |                 setq    _var_64_lower_
2f448     01 00 00 FF 
2f44c     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2f450     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2f454     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2f458     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2f45c     FF FF 7F FF 
2f460     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2f464     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2f468     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2f46c     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2f470     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2f474     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2f478     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2f47c     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2f480     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2f484     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2f488     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2f48c     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2f490     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2f494     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2f498     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2f49c     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2f4a0     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2f4a4     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2f4a8     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2f4ac     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2f4b0     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2f4b4     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2f4b8     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2f4bc     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2f4c0     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2f4c4     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2f4c8     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2f4cc                 | '        _ret_   mov     _1sec_, save_sysclk
2f4cc                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2f4cc                 | '                ret
2f4cc                 | {
2f4cc                 | }
2f4cc                 | 
2f4cc                 | '------------------------------------------------------------------------------
2f4cc                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2f4cc                 | ' one. If it is, start the task progression that will configure the device for
2f4cc                 | ' use.
2f4cc                 | '------------------------------------------------------------------------------
2f4cc                 | ' On entry:
2f4cc                 | '   hconfig_base - start address of the cached config descriptor chain.
2f4cc                 | ' On exit:
2f4cc                 | '------------------------------------------------------------------------------
2f4cc                 | hparse_con_desc
2f4cc     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2f4d0     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2f4d4     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2f4d8     4E 70 FF F9 |                 movbyts htmp,#%%1032
2f4dc     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2f4e0                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2f4e0                 | 
2f4e0     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2f4e4     6E ED 03 F1 |                 add     pa, hconfig_base
2f4e8     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2f4ec                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2f4ec                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2f4ec                 | ' that defines a keyboard and/or mouse.
2f4ec     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2f4f0                 | .next_intf
2f4f0     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2f4f4     BC 01 90 3D |         if_ae   jmp     #hset_config
2f4f8     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2f4fc     75 F3 03 F1 |                 add     ptrb, hnext_desc
2f500     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2f504     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2f508     0C 00 90 AD |         if_z    jmp     #.intf
2f50c     80 71 C7 FA |                 rdbyte  htmp, ptrb
2f510     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2f514     D8 FF 9F FD |                 jmp     #.next_intf
2f518                 | .intf
2f518     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2f51c     00 90 07 F6 |                 mov     hpar3, #0
2f520     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2f524     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2f528     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2f52c     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2f530                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2f530                 | 
2f530                 | .endp
2f530     80 71 C7 FA |                 rdbyte  htmp, ptrb
2f534     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2f538     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2f53c     78 00 90 3D |         if_ae   jmp     #.get_device
2f540     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2f544     75 F3 03 F1 |                 add     ptrb, hnext_desc
2f548     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2f54c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2f550     64 00 90 AD |         if_z    jmp     #.get_device
2f554     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2f558     04 00 90 AD |         if_z    jmp     #.get_ep
2f55c     D0 FF 9F FD |                 jmp     #.endp
2f560                 | .get_ep
2f560     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2f564     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2f568     0F 86 67 F0 |                 shl     hr1, #8 + 7
2f56c     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2f570     3F 00 00 FF 
2f574     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2f578     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2f57c     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2f580     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2f584     00 90 0F F2 |                 cmp     hpar3, #0               wz
2f588     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2f58c     A0 FF 9F FD |                 jmp     #.endp
2f590                 | .in_ep
2f590     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2f594     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2f598                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2f598     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2f59c     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2f5a0     8C FF 9F FD |                 jmp     #.endp
2f5a4                 | .out_ep
2f5a4     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2f5a8     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2f5ac                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2f5ac     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2f5b0     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2f5b4     78 FF 9F FD |                 jmp     #.endp
2f5b8                 | 
2f5b8                 | .get_device
2f5b8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2f5bc     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2f5c0     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2f5c4     68 00 90 AD |         if_z    jmp     #.gamepad
2f5c8     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2f5cc     AC 00 90 AD |         if_z    jmp     #.hub
2f5d0     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2f5d4     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2f5d8     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2f5dc     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2f5e0     4C 00 90 AD |         if_z    jmp     #.gamepad
2f5e4     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2f5e8     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2f5ec                 | .keyboard
2f5ec     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2f5f0                 |         if HAVE_MOUSE
2f5f0     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2f5f4                 |         else
2f5f4                 |         end
2f5f4     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2f5f8     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2f5fc     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f600     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2f604     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2f608     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2f60c                 |                 'debug(udec(kb_intf_num))
2f60c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2f60c     E0 FE 9F FD |                 jmp     #.next_intf
2f610                 | if HAVE_MOUSE
2f610                 | .mouse
2f610     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2f614     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2f618     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2f61c     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2f620     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f624                 |                 'getbyte ms_interval, hr2, #3
2f624     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2f628     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2f62c                 |                 'debug(udec(kb_intf_num))
2f62c                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2f62c     C0 FE 9F FD |                 jmp     #.next_intf
2f630                 | end
2f630                 | .gamepad
2f630     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2f634     C7 71 63 F5 |                 xor     htmp, hpar2
2f638     3F 00 00 FF 
2f63c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f640     AC FE 9F AD |         if_z    jmp     #.next_intf
2f644                 |         if HAVE_MOUSE
2f644     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2f648     C7 71 63 F5 |                 xor     htmp, hpar2
2f64c     3F 00 00 FF 
2f650     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f654     98 FE 9F AD |         if_z    jmp     #.next_intf
2f658                 |         end
2f658     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2f65c     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2f660     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2f664                 | 
2f664     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f668     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2f66c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f670     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2f674     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2f678                 |                 'debug(udec(gp_intf_num))
2f678                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2f678     74 FE 9F FD |                 jmp     #.next_intf
2f67c                 | .hub
2f67c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2f680     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2f684     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2f688     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2f68c     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2f690     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2f694     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2f698     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2f69c     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2f6a0     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2f6a4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f6a8     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2f6ac     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2f6b0                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2f6b0     3C FE 9F FD |                 jmp     #.next_intf
2f6b4                 | 
2f6b4                 | '------------------------------------------------------------------------------
2f6b4                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2f6b4                 | ' it according to its function, or functions. In the case of this boot protocol
2f6b4                 | ' keyboard/mouse class driver:
2f6b4                 | ' - SetConfiguration(config_num)
2f6b4                 | ' - SetProtocol(boot)
2f6b4                 | ' - SetIdle(indefinite)
2f6b4                 | ' - Enter the device interrupt IN polling task stage.
2f6b4                 | '------------------------------------------------------------------------------
2f6b4                 | ' On entry:
2f6b4                 | ' On exit:
2f6b4                 | '------------------------------------------------------------------------------
2f6b4                 | hset_config
2f6b4                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2f6b4                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2f6b4     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2f6b8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f6bc     00 00 0C F2 |                 cmp     0-0, #0                 wz
2f6c0     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2f6c4                 |         if HAVE_MOUSE
2f6c4     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2f6c8                 |         end
2f6c8     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2f6cc     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2f6d0                 | .set_config
2f6d0     6C 0E D0 FE |                 loc     ptra, #set_config
2f6d4     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2f6d8     6E ED 03 F1 |                 add     pa, hconfig_base
2f6dc     F6 8D C3 FA |                 rdbyte  hpar1, pa
2f6e0     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2f6e4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2f6e8     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2f6ec     A0 02 A0 FD |                 call    #control_write
2f6f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f6f4     2D 00 64 5D |         if_nz   ret
2f6f8                 | .kbd_config
2f6f8     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2f6fc     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2f700                 | 
2f700     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2f704     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f708     3F 00 00 FF 
2f70c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f710     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2f714                 | 
2f714     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2f718     34 0E D0 FE |                 loc     ptra, #set_protocol
2f71c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2f720     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f724     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2f728     A0 02 A0 FD |                 call    #control_write
2f72c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f730     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2f734     E4 02 90 5D |         if_nz   jmp     #.notify_client
2f738     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2f73c     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2f740     30 03 B0 FD |                 call    #hset_idle
2f744                 |                 'cmp     retval, #PID_ACK        wz
2f744                 |         'if_nz   mov     hkbd_ep_addr, #0
2f744                 |         'if_nz   jmp     #.notify_client
2f744     A8 99 02 F6 |                 mov     hctwait, _2ms_
2f748     EF 02 A0 FD |                 call    #poll_waitx
2f74c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2f750     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2f754     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2f758     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2f75c     2C 03 B0 FD |                 call    #hset_kbdled_report
2f760     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f764     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2f768     B0 02 90 5D |         if_nz   jmp     #.notify_client
2f76c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2f770     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f774     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f778     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f77c     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2f780     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2f784     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2f788     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f78c     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2f790     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2f794     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2f798                 |         if !!HAVE_MOUSE
2f798                 |         end
2f798                 | 
2f798                 | .mouse_config
2f798                 | if HAVE_MOUSE
2f798     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2f79c     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2f7a0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2f7a4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f7a8     3F 00 00 FF 
2f7ac     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f7b0     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2f7b4                 | 
2f7b4                 |                 debug("mouse passed addr check")
2f7b4                 | 
2f7b4     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2f7b8     00 00 80 FF 
2f7bc     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2f7c0     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2f7c4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f7c8     55 02 A0 FD |                 call    #control_read
2f7cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f7d0     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2f7d4     44 02 90 5D |         if_nz   jmp     #.notify_client
2f7d8     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2f7dc     56 01 00 F6 |                 mov     0-0, total_data
2f7e0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f7e4                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2f7e4                 | 
2f7e4     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2f7e8     64 0D D0 FE |                 loc     ptra, #set_protocol
2f7ec     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2f7f0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f7f4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2f7f8     A0 02 A0 FD |                 call    #control_write
2f7fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f800     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2f804     14 02 90 5D |         if_nz   jmp     #.notify_client
2f808                 |                 debug("mouse passed SetProtocol")
2f808     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2f80c     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2f810     60 02 B0 FD |                 call    #hset_idle
2f814                 |                 'cmp     retval, #PID_ACK        wz
2f814                 |         'if_nz   mov     hmouse_ep_addr, #0
2f814                 |         'if_nz   jmp     #.notify_client
2f814                 |                 debug("mouse passed SetIdle")
2f814     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2f818     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f81c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f820     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f824     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2f828     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f82c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2f830     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2f834     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2f838     3F 00 00 FF 
2f83c     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2f840     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2f844     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2f848     D0 01 90 FD |                 jmp     #.notify_client
2f84c                 | end
2f84c                 | .gamepad_config
2f84c                 | if _HAVE_GAMEPAD
2f84c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f850     00 00 0C F2 |                 cmp     0-0, #0                 wz
2f854     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2f858     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2f85c     00 70 03 F6 |                 mov     htmp, 0-0
2f860     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f864     3F 00 00 FF 
2f868     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f86c     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2f870                 | 
2f870     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2f874     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2f878     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f87c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f880     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f884     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f888     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2f88c     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2f890     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2f894     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f898     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f89c     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2f8a0     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2f8a4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f8a8                 | 
2f8a8                 |                 if EMUPAD_MAX_PLAYER > 0
2f8a8                 |                 
2f8a8                 | .rule_loop           
2f8a8                 |                 end
2f8a8                 | 
2f8a8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2f8ac     5C 00 90 AD |         if_e    jmp     #.xinput
2f8b0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2f8b4     00 70 03 F6 |                 mov     htmp,0-0
2f8b8     01 A6 02 FF 
2f8bc     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2f8c0     7C 00 90 AD |         if_e    jmp     #.ps3
2f8c4                 | 
2f8c4     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2f8c8     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2f8cc     00 00 80 5F 
2f8d0     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2f8d4     03 00 80 AF 
2f8d8     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2f8dc     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2f8e0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f8e4     55 02 A0 FD |                 call    #control_read
2f8e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f8ec     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2f8f0     00 00 04 56 |         if_nz   mov     0-0, #0
2f8f4     24 01 90 5D |         if_nz   jmp     #.notify_client
2f8f8     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2f8fc     56 01 00 F6 |                 mov     0-0, total_data
2f900     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f904                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2f904                 | 
2f904     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2f908     10 01 90 FD |                 jmp     #.notify_client
2f90c                 | .xinput
2f90c     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2f910     2D EF 03 F6 |                 mov     pb,hdev_port
2f914     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2f918     03 EE 27 F3 |                 fle     pb,#3
2f91c     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2f920     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2f924                 | 
2f924     03 B0 06 F6 |                 mov     pkt_data, #3
2f928     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2f92c     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2f930     5A 00 A0 FD |                 call    #txn_out
2f934     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2f938                 | 
2f938     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2f93c     DC 00 90 FD |                 jmp     #.notify_client
2f940                 | .ps3
2f940     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2f944     2D EF 03 F6 |                 mov     pb,hdev_port
2f948     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2f94c     04 EE 27 F3 |                 fle     pb,#4
2f950     F7 EF C3 F9 |                 decod   pb
2f954     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2f958                 | 
2f958     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2f95c     00 0C D0 FE |                 loc     ptra, #set_report
2f960     01 00 80 FF 
2f964     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2f968     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f96c     03 61 5C FC |                 wrword  #48, ptra[wLength]
2f970     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2f974     A0 02 A0 FD |                 call    #control_write
2f978                 | 
2f978     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2f97c     E0 0B D0 FE |                 loc     ptra, #set_report
2f980     01 00 80 FF 
2f984     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2f988     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f98c     03 09 5C FC |                 wrword  #4, ptra[wLength]
2f990     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2f994     A0 02 A0 FD |                 call    #control_write
2f998     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2f99c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2f9a0     00 00 04 56 |         if_nz   mov     0-0, #0
2f9a4     74 00 90 5D |         if_nz   jmp     #.notify_client
2f9a8                 | 
2f9a8     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2f9ac     6C 00 90 FD |                 jmp     #.notify_client
2f9b0                 | end
2f9b0                 | 
2f9b0                 | .hub_config
2f9b0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2f9b4     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2f9b8     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2f9bc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f9c0     3F 00 00 FF 
2f9c4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f9c8     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2f9cc                 | 
2f9cc     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2f9d0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2f9d4     26 EF 03 F6 |                 mov     pb, hub_descr_p
2f9d8     55 02 A0 FD |                 call    #control_read
2f9dc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f9e0     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2f9e4     34 00 90 5D |         if_nz   jmp     #.notify_client
2f9e8                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2f9e8                 | 
2f9e8     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2f9ec     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2f9f0     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2f9f4                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2f9f4                 | .pwr_loop
2f9f4     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2f9f8     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2f9fc     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2fa00     A0 02 A0 FD |                 call    #control_write
2fa04     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2fa08                 | 
2fa08     B1 99 02 F6 |                 mov     hctwait, _500ms_
2fa0c     B0 99 02 F1 |                 add     hctwait, _100ms_
2fa10     EF 02 A0 FD |                 call    #poll_waitx
2fa14                 | 
2fa14     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2fa18     00 00 90 FD |                 jmp     #.notify_client
2fa1c                 | 
2fa1c                 | .notify_client
2fa1c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2fa20     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2fa24                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2fa24                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2fa24     2D 00 64 FD |                 ret
2fa28                 | 
2fa28                 | '------------------------------------------------------------------------------
2fa28                 | ' Initialize the keyboard/mouse data area to start-up values.
2fa28                 | '------------------------------------------------------------------------------
2fa28                 | ' On entry:
2fa28                 | ' On exit:
2fa28                 | '------------------------------------------------------------------------------
2fa28                 | init_kbdm_data
2fa28     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2fa2c     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2fa30                 | 
2fa30     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2fa34     2B ED 03 F6 |                 mov     pa, cache_end_p
2fa38                 | .loop
2fa38     61 01 4C FC |                 wrbyte  #0, ptra++
2fa3c     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2fa40     F4 FF 9F CD |         if_b    jmp     #.loop
2fa44                 |         
2fa44                 |         if EMUPAD_MAX_PLAYER > 0
2fa44                 |         end
2fa44                 | 
2fa44                 | 
2fa44     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2fa48                 | .regloop
2fa48     00 EC 8F F9 |                 altd    pa
2fa4c     00 00 04 F6 |                 mov     0-0, #0
2fa50     01 EC 07 F1 |                 add     pa, #1
2fa54     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2fa58     EC FF 9F 5D |         if_nz   jmp     #.regloop
2fa5c                 | 
2fa5c     E1 E1 61 FF 
2fa60     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2fa64     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2fa68     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2fa6c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2fa70                 | 
2fa70     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2fa74                 | 
2fa74                 | '------------------------------------------------------------------------------
2fa74                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2fa74                 | ' function.
2fa74                 | '------------------------------------------------------------------------------
2fa74                 | ' On entry:
2fa74                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2fa74                 | '   hpar2 - index number of the target interface.
2fa74                 | ' On exit:
2fa74                 | '------------------------------------------------------------------------------
2fa74                 | hset_idle
2fa74     A8 99 02 F6 |                 mov     hctwait, _2ms_
2fa78     EF 02 A0 FD |                 call    #poll_waitx
2fa7c     D8 0A D0 FE |                 loc     ptra, #set_idle
2fa80     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2fa84     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2fa88     A0 02 80 FD |                 jmp     #control_write
2fa8c                 | 
2fa8c                 | '------------------------------------------------------------------------------
2fa8c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2fa8c                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2fa8c                 | '------------------------------------------------------------------------------
2fa8c                 | ' On entry:
2fa8c                 | '   ep_addr_pid - device address and enpoint for the request.
2fa8c                 | ' On exit:
2fa8c                 | '   retval - transaction result.
2fa8c                 | '------------------------------------------------------------------------------
2fa8c                 | hset_kbdled_report
2fa8c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2fa90     CC 0A D0 FE |                 loc     ptra, #set_report
2fa94     01 00 80 FF 
2fa98     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2fa9c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2faa0     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2faa4     27 EF 03 F6 |                 mov     pb, urx_buff_p
2faa8     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2faac     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2fab0                 | 
2fab0                 | '------------------------------------------------------------------------------
2fab0                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2fab0                 | '------------------------------------------------------------------------------
2fab0                 | ' On entry:
2fab0                 | ' On exit:
2fab0                 | '------------------------------------------------------------------------------
2fab0                 | hget_kbd_in_report
2fab0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2fab4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2fab8     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2fabc     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2fac0     CF 02 A0 FD |                 call    #do_int_in
2fac4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fac8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2facc                 | 
2facc     00 90 0F F2 |                 cmp     hpar3, #0               wz
2fad0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2fad4                 | 
2fad4     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2fad8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2fadc     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2fae0     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2fae4                 | 
2fae4     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2fae8     18 00 B0 FD |                 call    #hkbd_compare
2faec                 |         if EMUPAD_MAX_PLAYER > 0
2faec                 |         end
2faec                 | 
2faec                 | .led_check
2faec     3B 71 03 F6 |                 mov     htmp, kb_led_states
2faf0     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2faf4     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2faf8     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2fafc     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2fb00     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2fb04                 | 
2fb04                 | '------------------------------------------------------------------------------
2fb04                 | ' Compare current and previous keyboard data buffers for keypress changes.
2fb04                 | '------------------------------------------------------------------------------
2fb04                 | hkbd_compare
2fb04     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2fb08     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2fb0c     61 73 07 FB |                 rdlong  htmp1, ptra++
2fb10     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2fb14     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2fb18     61 73 07 FB |                 rdlong  htmp1, ptra++
2fb1c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2fb20     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2fb24     2D 00 64 AD |         if_z    ret
2fb28                 | 
2fb28     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2fb2c                 | 
2fb2c                 |                 ' Handle modifiers
2fb2c     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2fb30     00 87 C7 FA |                 rdbyte  hr1, ptra
2fb34     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2fb38     63 86 63 FD |                 mergew  hr1
2fb3c     08 EC 07 F6 |                 mov     pa,#8
2fb40                 | .modloop
2fb40     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2fb44     E8 8C 07 F6 |                 mov     hpar1,#$E8
2fb48     F6 8D 83 F1 |                 sub     hpar1,pa
2fb4c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2fb50     FB ED 6F FB |                 djnz    pa,#.modloop
2fb54                 | 
2fb54     6F E0 75 FD | .release        modc    _set    wc
2fb58                 |                 'alts    hdev_port, #hid_report_p
2fb58                 |                 'mov     ptra, hid_report_p
2fb58     02 F0 07 F1 |                 add     ptra, #2
2fb5c     06 EC 07 F6 |                 mov     pa, #6
2fb60     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2fb64     20 00 90 AD |         if_z    jmp     #.rl3
2fb68     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2fb6c     02 F2 07 F1 |                 add     ptrb, #2
2fb70     06 EE 07 F6 |                 mov     pb, #6
2fb74     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2fb78     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2fb7c     08 00 90 AD |         if_z    jmp     #.rl3
2fb80     FC EF 6F FB |                 djnz    pb, #.rl2
2fb84     68 00 B0 FD |                 call    #hkbd_translate
2fb88     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2fb8c                 | 
2fb8c     00 90 07 F6 |                 mov     hpar3, #0
2fb90     1F 90 27 F4 |                 bith    hpar3, #31
2fb94                 | 
2fb94     6F 00 74 FD | .press          modc    _clr    wc
2fb98     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2fb9c     02 F0 07 F1 |                 add     ptra, #2
2fba0     06 EC 07 F6 |                 mov     pa, #6
2fba4     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2fba8     20 00 90 AD |         if_z    jmp     #.pl3
2fbac     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2fbb0     02 F2 07 F1 |                 add     ptrb, #2
2fbb4     06 EE 07 F6 |                 mov     pb, #6
2fbb8     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2fbbc     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2fbc0     08 00 90 AD |         if_z    jmp     #.pl3
2fbc4     FC EF 6F FB |                 djnz    pb, #.pl2
2fbc8     24 00 B0 FD |                 call    #hkbd_translate
2fbcc     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2fbd0                 | 
2fbd0     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2fbd4     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2fbd8     28 02 64 FD |                 setq #1
2fbdc     61 73 07 FB |                 rdlong  htmp1, ptra++
2fbe0     28 02 64 FD |                 setq #1
2fbe4     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2fbe8     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2fbec                 | 
2fbec     2D 00 64 FD |                 ret
2fbf0                 | 
2fbf0                 | '------------------------------------------------------------------------------
2fbf0                 | ' Translate keyboard scancode to ASCII
2fbf0                 | '------------------------------------------------------------------------------
2fbf0                 | ' On entry:
2fbf0                 | '   hpar1 - scancode
2fbf0                 | '   hpar2 - key modifiers state
2fbf0                 | '       c - pressed (0) or released (1) flag
2fbf0                 | ' On exit:
2fbf0                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2fbf0                 | '               30..17 = unused
2fbf0                 | '                   18 = scroll-lock state 
2fbf0                 | '                   17 = caps-lock state
2fbf0                 | '                   16 = num-lock state 
2fbf0                 | '                15..8 = key modifiers state
2fbf0                 | '                 7..0 = scancode
2fbf0                 | '------------------------------------------------------------------------------
2fbf0                 | hkbd_translate
2fbf0     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2fbf4     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2fbf8     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2fbfc     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2fc00     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2fc04     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2fc08                 | 
2fc08                 |         if EMUPAD_MAX_PLAYER > 0
2fc08                 | 
2fc08                 |         if EMUPAD_BT0_BIT >= 0
2fc08                 |         end
2fc08                 |         if EMUPAD_BT1_BIT >= 0
2fc08                 |         end
2fc08                 |         if EMUPAD_BT2_BIT >= 0
2fc08                 |         end
2fc08                 |         if EMUPAD_BT3_BIT >= 0
2fc08                 |         end
2fc08                 |         if EMUPAD_BT4_BIT >= 0
2fc08                 |         end
2fc08                 |         if EMUPAD_BT5_BIT >= 0
2fc08                 |         end
2fc08                 |         if EMUPAD_BT6_BIT >= 0
2fc08                 |         end
2fc08                 |         if EMUPAD_BT7_BIT >= 0
2fc08                 |         end
2fc08                 |         if EMUPAD_BT8_BIT >= 0
2fc08                 |         end
2fc08                 |         if EMUPAD_BT9_BIT >= 0
2fc08                 |         end
2fc08                 | 
2fc08                 |         end
2fc08     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2fc0c     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2fc10     1F 8C 47 F4 |                 bitc    hpar1, #31
2fc14                 |         if KEYQUEUE_SIZE > 0
2fc14     C4 09 B0 FE |                 loc pb,#keyq_head
2fc18     F7 71 E3 FA |                 rdword htmp,pb
2fc1c     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2fc20     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2fc24     B8 75 03 F6 |                 mov htmp2,htmp
2fc28     04 74 07 FA |                 mul htmp2,#4
2fc2c     F7 75 03 F1 |                 add htmp2,pb
2fc30     02 74 07 F1 |                 add htmp2,#2
2fc34     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
2fc38     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2fc3c     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
2fc40     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2fc44                 |         end
2fc44     2D 00 7C FD |                 ret wcz
2fc48                 | 
2fc48                 | if HAVE_MOUSE
2fc48                 | '------------------------------------------------------------------------------
2fc48                 | ' Execute an IN interrupt transaction to poll for mouse activity.
2fc48                 | '------------------------------------------------------------------------------
2fc48                 | ' On entry:
2fc48                 | ' On exit:
2fc48                 | '------------------------------------------------------------------------------
2fc48                 | hget_mouse_in_report
2fc48     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2fc4c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2fc50     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2fc54     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
2fc58     CF 02 A0 FD |                 call    #do_int_in
2fc5c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fc60     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2fc64                 | 
2fc64     00 90 0F F2 |                 cmp     hpar3, #0               wz
2fc68     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2fc6c                 | 
2fc6c     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
2fc70     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2fc74     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
2fc78     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
2fc7c                 | 
2fc7c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2fc80     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2fc84     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
2fc88     01 90 87 31 |         if_ae   sub     hpar3, #1
2fc8c                 | 
2fc8c     40 09 90 FE |                 loc     pa, #mouse_limits
2fc90     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2fc94                 | 
2fc94                 |                 ' load xacc,yacc,zacc
2fc94     28 04 64 FD |                 setq    #3-1
2fc98     80 87 07 FB |                 rdlong  hr1,ptrb
2fc9c                 |                 ' load limits and outptr
2fc9c     28 04 64 FD |                 setq    #3-1
2fca0     F6 73 03 FB |                 rdlong  htmp1,pa
2fca4                 | 
2fca4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
2fca8     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
2fcac     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
2fcb0     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2fcb4     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
2fcb8     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2fcbc     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
2fcc0     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2fcc4                 |               
2fcc4                 | 
2fcc4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
2fcc8     07 70 67 F7 |                 signx   htmp, #7
2fccc     B8 87 03 F1 |                 add     hr1,htmp
2fcd0     00 72 0F F2 |                 cmp     htmp1,#0 wz
2fcd4     B9 87 63 53 |         if_ne   fles    hr1,htmp1
2fcd8     00 86 47 53 |         if_ne   fges    hr1,#0
2fcdc                 | 
2fcdc     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
2fce0     07 70 67 F7 |                 signx   htmp, #7
2fce4     B8 89 03 F1 |                 add     hr2,htmp
2fce8     00 74 0F F2 |                 cmp     htmp2,#0 wz
2fcec     BA 89 63 53 |         if_ne   fles    hr2,htmp2
2fcf0     00 88 47 53 |         if_ne   fges    hr2,#0
2fcf4                 |                 
2fcf4                 | 
2fcf4     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
2fcf8     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2fcfc     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
2fd00     B8 8B 03 A1 |         if_z    add     hr3,htmp
2fd04                 | 
2fd04     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
2fd08     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2fd0c                 | 
2fd0c                 |                 ' write back accumulators
2fd0c     28 04 64 FD |                 setq    #3-1
2fd10     80 87 67 FC |                 wrlong  hr1,ptrb
2fd14                 |                 ' if outptr set, write X/Y words
2fd14     00 76 0F F2 |                 cmp htmp3,#0                    wz
2fd18     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2fd1c     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
2fd20     2D 00 64 FD |                 ret
2fd24                 | end
2fd24                 | 
2fd24                 | '------------------------------------------------------------------------------
2fd24                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2fd24                 | '------------------------------------------------------------------------------
2fd24                 | ' On entry:
2fd24                 | ' On exit:
2fd24                 | '------------------------------------------------------------------------------
2fd24                 | if _HAVE_GAMEPAD
2fd24                 | hget_gp_in_report
2fd24     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2fd28     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2fd2c                 | 
2fd2c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2fd30     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2fd34     00 90 E3 F8 |                 getbyte hpar3
2fd38     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2fd3c     CF 02 A0 FD |                 call    #do_int_in
2fd40     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fd44     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2fd48                 | 
2fd48     00 90 0F F2 |                 cmp     hpar3, #0               wz
2fd4c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2fd50                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
2fd50                 | 
2fd50     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2fd54     00 70 E3 F8 |                 getbyte htmp                            ' |
2fd58     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2fd5c     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
2fd60     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2fd64     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
2fd68     B8 01 C0 F8 |                 setbyte htmp                            ' |
2fd6c                 | 
2fd6c                 | ' Note: the following code compares the current and previous reports
2fd6c                 | ' and process the data if there are changes to ease the debug output.
2fd6c                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
2fd6c                 | ' gpPreReport buffer.
2fd6c                 | 
2fd6c                 |                 ' ----- start of block to remove
2fd6c                 |                 {
2fd6c                 |                 }
2fd6c                 |                 ' ----- end of block to remove
2fd6c     F4 04 90 FE |                 loc pa,#hpad_translate
2fd70     2A EC 63 FD |                 push pa
2fd74                 | 
2fd74                 |                 ' FALL THROUGH !!!!
2fd74                 | 
2fd74                 | '------------------------------------------------------------------------------
2fd74                 | ' Decode controller report
2fd74                 | '------------------------------------------------------------------------------
2fd74                 | hid_decode
2fd74                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2fd74     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
2fd78     00 04 00 FF 
2fd7c     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
2fd80                 | 
2fd80     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2fd84                 | 
2fd84     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2fd88     00 2A E3 F8 |                 getbyte hidr_type
2fd8c     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
2fd90     34 02 90 AD |         if_z    jmp     #hpad_xinput
2fd94     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
2fd98     1C 03 90 AD |         if_z    jmp     #hpad_ps3
2fd9c     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
2fda0     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2fda4     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
2fda8                 |                 
2fda8                 | 
2fda8                 | '------------------------------------------------------------------------------
2fda8                 | ' Handle HID controller (or mouse now
2fda8                 | ' On entry:
2fda8                 | '   ptrb - controller report
2fda8                 | '------------------------------------------------------------------------------
2fda8                 | hpad_hid
2fda8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2fdac     F7 F1 03 F6 |                 mov     ptra, pb
2fdb0     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2fdb4     00 EC 03 F6 |                 mov     pa, 0-0
2fdb8                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
2fdb8     19 2A 3B FF 
2fdbc     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
2fdc0                 | 
2fdc0                 | .next
2fdc0     00 EC 5F F2 |                 cmps    pa, #0      wcz
2fdc4     2D 00 7C ED |         if_be   ret     wcz
2fdc8                 | 
2fdc8     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2fdcc     01 EC 87 F1 |                 sub     pa, #1
2fdd0     00 8E 07 F6 |                 mov     hpar2, #0
2fdd4                 | 
2fdd4     C6 71 03 F6 |                 mov     htmp, hpar1
2fdd8     03 70 07 F5 |                 and     htmp, #$03
2fddc     01 70 0F F2 |                 cmp     htmp, #1    wz
2fde0     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
2fde4     07 8E 67 A7 |         if_z    signx   hpar2,#7
2fde8     01 EC 87 A1 |         if_z    sub     pa, #1
2fdec     02 70 0F F2 |                 cmp     htmp, #2    wz
2fdf0     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
2fdf4     0F 8E 67 A7 |         if_z    signx   hpar2,#15
2fdf8     02 EC 87 A1 |         if_z    sub     pa, #2
2fdfc     03 70 0F F2 |                 cmp     htmp, #3    wz
2fe00     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
2fe04     04 EC 87 A1 |         if_z    sub     pa, #4
2fe08                 | 
2fe08     FC 8C 07 F5 |                 and     hpar1, #$FC
2fe0c                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2fe0c                 | 
2fe0c     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
2fe10     0C 01 90 AD |         if_z    jmp     #.report_id
2fe14     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
2fe18     24 01 90 AD |         if_z    jmp     #.usage_page
2fe1c     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
2fe20     2C 01 90 AD |         if_z    jmp     #.usage
2fe24     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
2fe28     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2fe2c     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
2fe30     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2fe34     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
2fe38     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2fe3c     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
2fe40     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2fe44     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
2fe48     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2fe4c     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
2fe50     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2fe54     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
2fe58     64 FF 9F 5D |         if_nz   jmp     #.next
2fe5c                 | 
2fe5c     D8 1D A7 FB |                 tjf     hidr_state,#.next
2fe60                 | 
2fe60     03 8E 07 F5 |                 and     hpar2, #$03
2fe64     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
2fe68     18 00 90 5D |         if_nz   jmp     #.skip
2fe6c                 | 
2fe6c     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
2fe70     20 00 90 AD |         if_z    jmp     #.axes
2fe74     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
2fe78     5C 00 90 AD |         if_z    jmp     #.hats
2fe7c     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
2fe80     70 00 90 AD |         if_z    jmp     #.buttons
2fe84                 | .skip
2fe84     8F 71 03 F6 |                 mov     htmp, hidr_size
2fe88     90 71 03 FA |                 mul     htmp, hidr_count
2fe8c     B8 23 03 F1 |                 add     hidr_offset, htmp
2fe90     2C FF 9F FD |                 jmp     #.next
2fe94                 | .axes
2fe94                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2fe94     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
2fe98     90 87 03 F6 |                 mov     hr1, hidr_count
2fe9c                 | .l1
2fe9c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2fea0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2fea4     04 03 B0 FD |                 call    #hpad_getbits
2fea8     64 03 B0 FD |                 call    #hpad_normalize
2feac     06 84 1F F2 |                 cmp     hr0, #6         wcz
2feb0     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2feb4     00 88 43 C8 |         if_b    getnib  hr2
2feb8     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
2febc     5F 01 20 C9 |         if_b    setword retval
2fec0     01 84 07 C1 |         if_b    add     hr0, #1
2fec4     8F 23 03 F1 |                 add     hidr_offset, hidr_size
2fec8     F4 87 6F FB |                 djnz    hr1, #.l1
2fecc                 | 
2fecc     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
2fed0     01 1C 07 F6 |                 mov     hidr_state, #1
2fed4     E8 FE 9F FD |                 jmp     #.next
2fed8                 | .hats
2fed8                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
2fed8     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2fedc     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2fee0     C8 02 B0 FD |                 call    #hpad_getbits
2fee4     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
2fee8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2feec     01 1C 07 F6 |                 mov     hidr_state, #1
2fef0     90 FF 9F FD |                 jmp     #.skip
2fef4                 | .buttons
2fef4                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
2fef4     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2fef8     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2fefc     90 8F 03 FA |                 mul     hpar2, hidr_count
2ff00     A8 02 B0 FD |                 call    #hpad_getbits
2ff04     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
2ff08     B8 BF 62 F0 |                 shl     retval, htmp
2ff0c     5F 17 43 F5 |                 or      hidr_buttons, retval
2ff10     90 71 03 F1 |                 add     htmp, hidr_count
2ff14     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
2ff18     01 1C 07 F6 |                 mov     hidr_state, #1
2ff1c     64 FF 9F FD |                 jmp     #.skip
2ff20                 | .report_id
2ff20     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
2ff24     2D 00 7C 5D |         if_nz   ret     wcz
2ff28     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2ff2c     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
2ff30     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
2ff34     01 1C 67 56 |         if_nz   neg     hidr_state,#1
2ff38     01 F2 87 51 |         if_nz   sub     ptrb,#1
2ff3c     80 FE 9F FD |                 jmp     #.next
2ff40                 | .usage_page
2ff40     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
2ff44     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
2ff48     04 1C 07 A6 |         if_z    mov     hidr_state, #4
2ff4c     70 FE 9F FD |                 jmp     #.next
2ff50                 | .usage
2ff50     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
2ff54     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
2ff58     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
2ff5c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2ff60     5C FE 9F AD |         if_z    jmp     #.next
2ff64     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
2ff68     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
2ff6c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2ff70     4C FE 9F AD |         if_z    jmp     #.next
2ff74     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
2ff78     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
2ff7c     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
2ff80     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
2ff84     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
2ff88     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
2ff8c     10 00 90 AD |         if_z    jmp     #.usage_axis
2ff90     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
2ff94     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
2ff98     03 1C 07 A6 |         if_z    mov     hidr_state, #3
2ff9c     20 FE 9F FD |                 jmp     #.next
2ffa0                 | .usage_axis
2ffa0     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
2ffa4     18 FE 9F CD |         if_b    jmp     #.next
2ffa8     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
2ffac     C7 01 00 F8 |                 setnib  hpar2
2ffb0                 | 
2ffb0     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
2ffb4     C7 8F C3 F9 |                 decod   hpar2
2ffb8     C7 0F 43 F5 |                 or      hidr_flags, hpar2
2ffbc                 | 
2ffbc     01 24 07 F1 |                 add     hidr_usage_idx, #1
2ffc0     02 1C 07 F6 |                 mov     hidr_state, #2
2ffc4     F8 FD 9F FD |                 jmp     #.next
2ffc8                 | 
2ffc8                 | '------------------------------------------------------------------------------
2ffc8                 | ' Handle XInput controller
2ffc8                 | ' On entry:
2ffc8                 | '   ptrb - controller report
2ffc8                 | '------------------------------------------------------------------------------
2ffc8                 | '   Default implementation translates the report to a pseudo-defacto hid
2ffc8                 | '   standard and jumps to hpad_translate for actions.
2ffc8                 | '   Implementors may take specific actions for this kind of controller.
2ffc8                 | '------------------------------------------------------------------------------
2ffc8                 | hpad_xinput
2ffc8     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
2ffcc     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
2ffd0     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
2ffd4     14 70 0F F2 |                 cmp     htmp, #$14      wz
2ffd8     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
2ffdc                 | 
2ffdc                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2ffdc                 | 
2ffdc     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
2ffe0     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
2ffe4                 | 
2ffe4     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
2ffe8     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
2ffec     5F BF 22 F6 |                 not     retval
2fff0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2fff4     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
2fff8     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
2fffc     5F BF 22 F6 |                 not     retval
30000     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
30004                 | 
30004     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
30008     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3000c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
30010     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
30014     F8 01 B0 FD |                 call    #hpad_normalize
30018     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3001c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
30020     C0 BE 1E F2 |                 cmp     retval, #192    wcz
30024     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
30028     E4 01 B0 FD |                 call    #hpad_normalize
3002c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
30030                 | 
30030     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
30034     81 BF E6 FA |                 rdword  retval, ptrb[1]
30038     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3003c     00 16 47 F4 |                 bitc    hidr_buttons, #0
30040     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
30044     01 16 47 F4 |                 bitc    hidr_buttons, #1
30048     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3004c     02 16 47 F4 |                 bitc    hidr_buttons, #2
30050     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
30054     03 16 47 F4 |                 bitc    hidr_buttons, #3
30058     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3005c     04 16 47 F4 |                 bitc    hidr_buttons, #4
30060     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
30064     05 16 47 F4 |                 bitc    hidr_buttons, #5
30068     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3006c     08 16 47 F4 |                 bitc    hidr_buttons, #8
30070     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
30074     09 16 47 F4 |                 bitc    hidr_buttons, #9
30078     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3007c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
30080     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
30084     0B 16 47 F4 |                 bitc    hidr_buttons, #11
30088     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3008c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
30090                 | 
30090     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
30094     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
30098     7A BB 7A FF 
3009c     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
300a0     F9 FF 7F FF 
300a4     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
300a8     B9 71 5F F9 |                 altgn   htmp, #htmp1
300ac     00 70 43 F8 |                 getnib  htmp
300b0     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
300b4                 | 
300b4     AC 01 90 FD |                 jmp     #hpad_translate
300b8                 | 
300b8                 | '------------------------------------------------------------------------------
300b8                 | ' Handle PS3 controller
300b8                 | ' On entry:
300b8                 | '   ptrb - controller report
300b8                 | '------------------------------------------------------------------------------
300b8                 | '   Default implementation translates the report to a pseudo-defacto hid
300b8                 | '   standard and jumps to hpad_translate for actions.
300b8                 | '   Implementors may take specific actions for this kind of controller.
300b8                 | '------------------------------------------------------------------------------
300b8                 | hpad_ps3
300b8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
300bc     01 70 0F F2 |                 cmp     htmp, #$01      wz
300c0     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
300c4                 | 
300c4                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
300c4                 | 
300c4     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
300c8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
300cc     40 01 B0 FD |                 call    #hpad_normalize
300d0     5F 11 23 F9 |                 setword hidr_axis, retval, #0
300d4     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
300d8     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
300dc     30 01 B0 FD |                 call    #hpad_normalize
300e0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
300e4     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
300e8     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
300ec     20 01 B0 FD |                 call    #hpad_normalize
300f0     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
300f4     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
300f8     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
300fc     10 01 B0 FD |                 call    #hpad_normalize
30100     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
30104     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
30108     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3010c                 | 
3010c     08 8C 07 F6 |                 mov     hpar1, #8
30110     13 8E 07 F6 |                 mov     hpar2, #19
30114     94 00 B0 FD |                 call    #hpad_getbits
30118                 | 
30118     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3011c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
30120     00 16 47 F4 |                 bitc    hidr_buttons, #0
30124     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
30128     01 16 47 F4 |                 bitc    hidr_buttons, #1
3012c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
30130     02 16 47 F4 |                 bitc    hidr_buttons, #2
30134     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
30138     03 16 47 F4 |                 bitc    hidr_buttons, #3
3013c     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
30140     04 16 47 F4 |                 bitc    hidr_buttons, #4
30144     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
30148     05 16 47 F4 |                 bitc    hidr_buttons, #5
3014c     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
30150     06 16 47 F4 |                 bitc    hidr_buttons, #6
30154     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
30158     07 16 47 F4 |                 bitc    hidr_buttons, #7
3015c     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
30160     08 16 47 F4 |                 bitc    hidr_buttons, #8
30164     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
30168     09 16 47 F4 |                 bitc    hidr_buttons, #9
3016c     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
30170     0A 16 47 F4 |                 bitc    hidr_buttons, #10
30174     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
30178     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3017c     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
30180     0C 16 47 F4 |                 bitc    hidr_buttons, #12
30184                 | 
30184     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
30188     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3018c     09 FA 79 FF 
30190     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
30194     FF FA 7F FF 
30198     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3019c     B9 71 5F F9 |                 altgn   htmp, #htmp1
301a0     00 70 43 F8 |                 getnib  htmp
301a4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
301a8                 | 
301a8     B8 00 90 FD |                 jmp     #hpad_translate
301ac                 | 
301ac                 | '------------------------------------------------------------------------------
301ac                 | ' Read bits from report data buffer
301ac                 | '------------------------------------------------------------------------------
301ac                 | ' On entry:
301ac                 | '   PTRB - report buffer
301ac                 | '   hpar1 - start bit
301ac                 | '   hpar2 - number of bits
301ac                 | ' On exit:
301ac                 | '   retval - bits
301ac                 | '------------------------------------------------------------------------------
301ac                 | hpad_getbits
301ac     C6 71 03 F6 |                 mov     htmp, hpar1
301b0     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
301b4     F9 71 03 F1 |                 add     htmp, ptrb
301b8     B8 BF 02 FB |                 rdlong  retval, htmp
301bc                 | 
301bc     C6 73 03 F6 |                 mov     htmp1, hpar1
301c0     07 72 07 F5 |                 and     htmp1, #$07     ' shift
301c4     B9 BF 42 F0 |                 shr     retval, htmp1
301c8                 | 
301c8     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
301cc     10 00 90 1D |         if_a    jmp     #.l1
301d0                 | 
301d0     C7 8F C3 F9 |                 decod   hpar2
301d4     01 8E 87 F1 |                 sub     hpar2, #1
301d8     C7 BF 02 F5 |                 and     retval, hpar2
301dc     2D 00 64 FD |                 ret
301e0                 | .l1
301e0     FF 7F 00 FF 
301e4     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
301e8     03 70 07 F1 |                 add     htmp, #3
301ec     B8 75 03 FB |                 rdlong  htmp2, htmp
301f0     18 8E 87 F1 |                 sub     hpar2, #24
301f4     C7 8F C3 F9 |                 decod   hpar2
301f8     01 8E 87 F1 |                 sub     hpar2, #1
301fc     B9 75 43 F0 |                 shr     htmp2, htmp1
30200     C7 75 03 F5 |                 and     htmp2, hpar2
30204     18 74 67 F0 |                 shl     htmp2, #24
30208     BA BF 42 F5 |                 or      retval, htmp2
3020c     2D 00 64 FD |                 ret
30210                 | 
30210                 | '------------------------------------------------------------------------------
30210                 | ' Normalize value to signed word (-32768 / 32767)
30210                 | '------------------------------------------------------------------------------
30210                 | ' On entry:
30210                 | '   retval - value to normalize
30210                 | '   hidr_lminmax - min (word 1) max (word 0) value range
30210                 | '   - or -
30210                 | '   hidr_pminmax - min (word 1) max (word 0) value range
30210                 | '   hidr_size - value bits length
30210                 | ' On exit:
30210                 | '   retval - normalized value
30210                 | '------------------------------------------------------------------------------
30210                 | hpad_normalize
30210     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
30214     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
30218     2D 00 64 AD |         if_z    ret
3021c     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
30220     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
30224     0F 72 77 F7 |                 signx   htmp1, #15      wc
30228     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3022c     00 BE 66 C7 |         if_c    signx   retval, #0-0
30230     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
30234     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
30238     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3023c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
30240     B8 71 53 F6 |                 abs     htmp            wc
30244     1F BE 0E F4 |                 testb   retval, #31     wz
30248     5F BF 42 F6 |                 abs     retval
3024c     B8 BF 12 FD |                 qdiv    retval, htmp
30250     18 BE 62 FD |                 getqx   retval
30254     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
30258     C0 FF 7F FF 
3025c     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
30260     2D 00 64 FD |                 ret
30264                 | 
30264                 | '------------------------------------------------------------------------------
30264                 | ' Perform controller actions
30264                 | ' On entry:
30264                 | '    hidr_id        report id
30264                 | '    hidr_axis      axis value (signed word, 2 axes per long)
30264                 | '                      X = hidr_axis+0, #0
30264                 | '                      Y = hidr_axis+0, #1
30264                 | '                      Z = hidr_axis+1, #0
30264                 | '                     RX = hidr_axis+1, #1
30264                 | '                     RY = hidr_axis+2, #0
30264                 | '                     RZ = hidr_axis+2, #1
30264                 | '    hidr_buttons   buttons state (bits 0 to 31)
30264                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
30264                 | '
30264                 | '                     -------3 -------2 -------1 -------0 byte
30264                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
30264                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
30264                 | '                                zyx||| |||||||| ++++++++ n. buttons
30264                 | '                                |||||| ||||++++--------- n. axes
30264                 | '                                |||||| ++++------------- n. hats
30264                 | '                                ++++++------------------ valid axes
30264                 | '------------------------------------------------------------------------------
30264                 | hpad_translate
30264                 | 
30264                 | 
30264                 |         if HAVE_HIDPAD
30264     84 0C F0 FE |                 loc     ptrb,#hidpad_report
30268     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3026c     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
30270     01 70 E7 F2 |                 cmpsub  htmp,#1
30274     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
30278     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3027c     2D 00 7C 3D |         if_ae   ret     wcz
30280     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
30284     B8 F3 03 F1 |                 add     ptrb,htmp
30288     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3028c     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
30290     28 0C 64 FD |                 setq    #7-1
30294     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
30298                 |         end
30298                 | 
30298                 | 
30298                 |         if EMUPAD_MAX_PLAYER > 0
30298                 | .emupad_no_hat
30298                 |         if EMUPAD_BT0_BIT >= 0
30298                 |         end
30298                 |         if EMUPAD_BT1_BIT >= 0
30298                 |         end
30298                 |         if EMUPAD_BT2_BIT >= 0
30298                 |         end
30298                 |         if EMUPAD_BT3_BIT >= 0
30298                 |         end
30298                 |         if EMUPAD_BT4_BIT >= 0
30298                 |         end
30298                 |         if EMUPAD_BT5_BIT >= 0
30298                 |         end
30298                 |         if EMUPAD_BT6_BIT >= 0
30298                 |         end
30298                 |         if EMUPAD_BT7_BIT >= 0
30298                 |         end
30298                 |         if EMUPAD_BT8_BIT >= 0
30298                 |         end
30298                 |         if EMUPAD_BT9_BIT >= 0
30298                 |         end
30298                 | .emupad_slot_over
30298                 |         end
30298                 | 
30298                 |         if 0
30298                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
30298                 | 
30298                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
30298                 | 
30298                 |         end
30298     2D 00 64 FD |                 ret
3029c                 | end
3029c                 | 
3029c                 | if EMUPAD_MAX_PLAYER > 0
3029c                 | '------------------------------------------------------------------------------
3029c                 | ' Clear EmuPad state
3029c                 | '------------------------------------------------------------------------------
3029c                 | emupad_reset
3029c                 | 
3029c                 | '------------------------------------------------------------------------------
3029c                 | ' Get EmuPad Player number for current device (into retval)
3029c                 | ' Z flag is also set if current device is valid
3029c                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3029c                 | '------------------------------------------------------------------------------
3029c                 | emupad_getnum
3029c                 | .loop
3029c                 | '------------------------------------------------------------------------------
3029c                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3029c                 | '------------------------------------------------------------------------------
3029c                 | emupad_discon
3029c                 | .loop         
3029c                 |         
3029c                 |         ' FALL THROUGH!!!
3029c                 | 
3029c                 | '------------------------------------------------------------------------------
3029c                 | ' Update EmuPad reports (all of them...)
3029c                 | '------------------------------------------------------------------------------
3029c                 | emupad_write_reports
3029c                 | .devloop
3029c                 | 
3029c                 | end
3029c                 | 
3029c                 | 
3029c                 | '------------------------------------------------------------------------------
3029c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3029c                 | '------------------------------------------------------------------------------
3029c                 | ' On entry:
3029c                 | ' On exit:
3029c                 | '------------------------------------------------------------------------------
3029c                 | hget_hub_status
3029c     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
302a0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
302a4     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
302a8     01 90 2F F9 |                 setword hpar3, #1, #1
302ac     CF 02 A0 FD |                 call    #do_int_in
302b0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
302b4     0C 00 90 AD |         if_z    jmp     #.data
302b8     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
302bc     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
302c0     2D 00 64 FD |                 ret
302c4                 | .data
302c4     00 90 0F F2 |                 cmp     hpar3, #0               wz
302c8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
302cc                 | 
302cc     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
302d0     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
302d4     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
302d8     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
302dc                 |                 debug(ubin_long(hub_status_chg))
302dc                 | 
302dc     01 5A 06 F6 |                 mov     hdev_port, #1
302e0                 | .loop
302e0     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
302e4     0C 00 B0 AD |         if_x1   call    #hub_port_handler
302e8     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
302ec     F0 FF 9F 3D |         if_nc   jmp     #.loop
302f0     2D 00 64 FD |                 ret
302f4                 | 
302f4                 | hub_port_handler
302f4     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
302f8     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
302fc     27 EF 03 F6 |                 mov     pb, urx_buff_p
30300     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30304     55 02 A0 FD |                 call    #control_read
30308     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3030c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3030c                 | 
3030c     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
30310     50 01 90 5D |         if_x0   jmp     #.other
30314     68 02 D0 FE |                 loc     ptra, #clr_port_feat
30318     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3031c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30320     A0 02 A0 FD |                 call    #control_write
30324     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
30328     7C 01 90 5D |         if_x0   jmp     #.disconnect
3032c     B0 99 02 F6 |                 mov     hctwait, _100ms_
30330     EF 02 A0 FD |                 call    #poll_waitx
30334                 | 
30334     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
30338     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3033c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30340     A0 02 A0 FD |                 call    #control_write
30344                 | 
30344     02 76 07 F6 |                 mov     htmp3, #2
30348                 | .wait_reset
30348     AC 99 02 F6 |                 mov     hctwait, _8ms_
3034c     EF 02 A0 FD |                 call    #poll_waitx
30350     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
30354     27 EF 03 F6 |                 mov     pb, urx_buff_p
30358     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3035c     55 02 A0 FD |                 call    #control_read
30360     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
30364     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
30368     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3036c                 | 
3036c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
30370     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
30374     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30378     A0 02 A0 FD |                 call    #control_write
3037c                 | 
3037c     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
30380                 | .wait_recover
30380     A7 99 02 F6 |                 mov     hctwait, _1ms_
30384     EF 02 A0 FD |                 call    #poll_waitx
30388     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3038c                 | 
3038c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
30390     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
30394     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
30398                 | 
30398     00 08 00 FF 
3039c     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
303a0     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
303a4     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
303a8     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
303ac     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
303b0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
303b4     48 01 90 5D |         if_nz   jmp     #.done
303b8                 | .get_dev_desc
303b8     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
303bc     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
303c0     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
303c4     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
303c8     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
303cc     01 71 57 FC |                 wrword  htmp, ptra[wValue]
303d0     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
303d4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
303d8     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
303dc     AC 99 02 F6 |                 mov     hctwait, _8ms_
303e0     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
303e4     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
303e8     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
303ec     BE 00 A0 FD |                 call    #calc_crc5
303f0     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
303f4     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
303f8     F7 AD C2 FA |                 rdbyte  total_data, pb
303fc     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
30400     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
30404     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30408     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3040c     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
30410     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
30414                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
30414     9F 99 02 F6 |                 mov     hctwait, _500us_
30418     EF 02 A0 FD |                 call    #poll_waitx
3041c     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
30420     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
30424     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
30428     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3042c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30430     CC 00 90 5D |         if_nz   jmp     #.done
30434     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
30438     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3043c     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
30440     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
30444     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
30448     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3044c     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
30450     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
30454     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
30458     A4 00 90 CD |         if_b    jmp     #.done
3045c     6C F0 BF FD |                 call    #hparse_con_desc
30460     9C 00 90 FD |                 jmp     #.done
30464                 | 
30464                 | .other
30464     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
30468     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3046c     28 00 90 AD |         if_x1   jmp     #.reset_feature
30470     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
30474     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
30478     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3047c     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
30480     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
30484     10 00 90 AD |         if_x1   jmp     #.reset_feature
30488     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3048c     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
30490     04 00 90 AD |         if_x1   jmp     #.reset_feature
30494     68 00 90 FD |                 jmp     #.done
30498                 | .reset_feature
30498     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3049c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
304a0     A0 02 A0 FD |                 call    #control_write
304a4     58 00 90 FD |                 jmp     #.done
304a8                 | .disconnect
304a8                 | 
304a8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
304ac     00 70 E3 F8 |                 getbyte htmp
304b0     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
304b4     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
304b8     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
304bc     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
304c0     00 76 06 A6 |         if_z    mov     kb_led_states, #0
304c4     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
304c8                 |         if EMUPAD_MAX_PLAYER > 0
304c8                 |         end
304c8                 |         if HAVE_MOUSE
304c8     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
304cc     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
304d0     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
304d4                 |         end
304d4                 |         if HAVE_HIDPAD
304d4     14 0A F0 FE |                 loc ptrb,#hidpad_report
304d8     2D 71 03 F6 |                 mov htmp,hdev_port
304dc     01 70 E7 F2 |                 cmpsub htmp,#1
304e0     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
304e4     B8 F3 03 F1 |                 add ptrb,htmp
304e8     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
304ec     80 01 6C FC |                 wrlong #0,ptrb
304f0                 |         end
304f0                 | 
304f0     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
304f4     00 00 C4 F8 |                 setbyte #0
304f8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
304fc     00 00 04 F6 |                 mov     0-0, #0
30500                 | 
30500                 | .done
30500     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
30504     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
30508     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3050c     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
30510     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
30514     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
30518                 | 
30518     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3051c     27 EF 03 F6 |                 mov     pb, urx_buff_p
30520     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30524     55 02 A0 FD |                 call    #control_read
30528     00 69 06 FB |                 rdlong  hub_port_status, ptra
3052c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3052c     2D 00 64 FD |                 ret
30530                 | 
30530                 | '------------------------------------------------------------------------------
30530                 | ' Partially populated SETUP packets
30530                 | '------------------------------------------------------------------------------
30530     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
30531     06          |                 byte    REQ_GET_DESC
30532     00 01       |                 word    TYPE_DEVICE << 8
30534     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
30536     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30538     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
30539     06          |                 byte    REQ_GET_DESC
3053a     00 02       |                 word    TYPE_CONFIG << 8
3053c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3053e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30540     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
30541     09          |                 byte    REQ_SET_CONFIG
30542     00 00       |                 word    0       ' Configuration value
30544     00 00       |                 word    0       ' Zero
30546     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
30548     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
30549     05          |                 byte    REQ_SET_ADDR
3054a     00 00       |                 word    0       ' Zero
3054c     00 00       |                 word    0       ' Zero
3054e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
30550                 | '------------------------------------------------------------------------------
30550                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
30550                 | ' wValue field dictates which protocol should be used.
30550                 | '
30550                 | ' When initialized, all devices default to report protocol. However the host
30550                 | ' should not make any assumptions about the device state and should set the
30550                 | ' desired protocol whenever initializing a device.
30550                 | '------------------------------------------------------------------------------
30550     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
30551     0B          |                 byte    HID_SET_PROTO
30552     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
30554                 |                                                 ' (HID 1.11 Section 7.2.6).
30554     00 00       |                 word    0               ' Interface index number.
30556     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
30558                 | '------------------------------------------------------------------------------
30558     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
30559     0A          |                 byte    HID_SET_IDLE
3055a     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3055c                 |                                         ' reporting until a change is detected in the report data
3055c                 | 
3055c                 |                                         ' (HID 1.11 Section 7.2.4).
3055c     00 00       |                 word    0       ' Interface index number.
3055e     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
30560     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
30561     09          |                 byte    HID_SET_REPORT
30562     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
30564                 |                                         ' (HID 1.11 Section 7.2.2).
30564     00 00       |                 word    0       ' Interface index number.
30566     00 00       |                 word    0       ' Size of the report, in bytes.
30568     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
30569     06          |                 byte    REQ_GET_DESC
3056a     00 22       |                 word    TYPE_REPORT << 8
3056c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3056e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30570                 | '------------------------------------------------------------------------------
30570     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
30571     06          |                 byte    REQ_GET_DESC
30572     00 29       |                 word    TYPE_HUB << 8
30574     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
30576     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30578     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
30579     03          |                 byte    REQ_SET_FEATURE
3057a     00 00       |                 word    0       ' port power
3057c     01 00       |                 word    1       ' Port index number (1+)
3057e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30580     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
30581     01          |                 byte    REQ_CLEAR_FEATURE
30582     00 00       |                 word    0       ' port power
30584     01 00       |                 word    1       ' Port index number (1+)
30586     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30588     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
30589     00          |                 byte    REQ_GET_STATUS
3058a     00 00       |                 word    0
3058c     01 00       |                 word    1       ' Port index number (1+)
3058e     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
30590                 | '------------------------------------------------------------------------------
30590                 | if _HAVE_GAMEPAD
30590     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
30594                 | ps3_command_buff
30594     00 00 00 00 
30598     00          |                 byte    $00, $00, $00, $00, $00
30599     00 00 00 00 
3059d     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3059e     FF 27 10 00 
305a2     32          |                 byte    $FF, $27, $10, $00, $32
305a3     FF 27 10 00 
305a7     32          |                 byte    $FF, $27, $10, $00, $32
305a8     FF 27 10 00 
305ac     32          |                 byte    $FF, $27, $10, $00, $32
305ad     FF 27 10 00 
305b1     32          |                 byte    $FF, $27, $10, $00, $32
305b2     00 00 00 00 
305b6     00          |                 byte    $00, $00, $00, $00, $00
305b7     00 00 00 00 
305bb     00          |                 byte    $00, $00, $00, $00, $00
305bc     00 00 00 00 
305c0     00          |                 byte    $00, $00, $00, $00, $00
305c1     00 00 00    |                 byte    $00, $00, $00
305c4                 | '------------------------------------------------------------------------------
305c4     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
305c7                 |                                         ' 0x01 All blinking
305c7                 |                                         ' 0x02 1 flashes, then on
305c7                 |                                         ' 0x03 2 flashes, then on
305c7                 |                                         ' 0x04 3 flashes, then on
305c7                 |                                         ' 0x05 4 flashes, then on
305c7                 |                                         ' 0x06 1 on
305c7                 |                                         ' 0x07 2 on
305c7                 |                                         ' 0x08 3 on
305c7                 |                                         ' 0x09 4 on
305c7                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
305c7                 |                                         ' 0x0B Blinking*
305c7                 |                                         ' 0x0C Slow blinking*
305c7                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
305c7     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
305ca     00          |                 byte    $00             ' Left rumble
305cb     00          |                 byte    $00             ' Right rumble
305cc     00 00 00    |                 byte    $00, $00, $00
305cf     00          | end
305d0                 | alignl
305d0                 | 
305d0                 | if HAVE_MOUSE
305d0     00 00 00 00 
305d4     00 00 00 00 | mouse_limits long 0[2]
305d8     00 00 00 00 | mouse_outptr long 0
305dc                 | end
305dc                 | 
305dc                 | if KEYQUEUE_SIZE > 0
305dc     00          | keyq_head byte 0
305dd     00          | keyq_tail byte 0
305de     00 00 00 00 
      ...             
307da     00 00 00 00 
307de     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
307e0                 | alignl
307e0                 | end
307e0                 | 
307e0                 | if EMUPAD_MAX_PLAYER > 0
307e0                 | emupad_rule_buffer
307e0                 | if EMUPAD_BUILTIN_RULES
307e0                 | file "padmap_builtin.dat"
307e0                 | end
307e0                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
307e0                 | '' Default rule directly follows!
307e0                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
307e0                 | end
307e0                 | 
307e0                 | '------------------------------------------------------------------------------
307e0                 | ' The USB data cache area gets zero-filled at every device disconnect
307e0                 | '------------------------------------------------------------------------------
307e0                 | usb_cache_start
307e0                 | 
307e0                 | ' HID descriptor and report buffers
307e0                 | if !!OVERLAP_MEMORY
307e0     00 00 00 00 
      ...             
30ed8     00 00 00 00 
30edc     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
30ee0                 | end
30ee0     00 00 00 00 
30ee4     00 00 00 00 | hkbd_report     byte    0[8]
30ee8     00 00 00 00 | hkbd_led_rep    byte    0
30eec                 | alignl
30eec                 | 
30eec                 | if HAVE_HIDPAD
30eec     00 00 00 00 
      ...             
30fa8     00 00 00 00 
30fac     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
30fb0                 | end
30fb0                 | 
30fb0                 | ' HUB descriptor
30fb0     00          | hub_descr       byte    0   ' bDescLength
30fb1     00          |                 byte    0   ' bDescriptorType
30fb2     00          |                 byte    0   ' bNbrPorts
30fb3     00 00       |                 word    0   ' wHubCharacteristics
30fb5     00          |                 byte    0   ' bPwrOn2PwrGood
30fb6     00          |                 byte    0   ' bHubContrCurrent
30fb7     00          |                 byte    0   ' DeviceRemoveable
30fb8     00          |                 byte    0   ' PortPwrCtrlMask
30fb9                 | 
30fb9                 | usb_cache_end
30fb9                 | 
30fb9                 | if HAVE_MOUSE
30fb9     00 00 00 00 | mouse_xacc      long 0
30fbd     00 00 00 00 | mouse_yacc      long 0
30fc1     00 00 00 00 | mouse_zacc      long 0
30fc5     00          | mouse_bstate    byte 0
30fc6     00          | mouse_lpending  byte 0
30fc7     00          | mouse_rpending  byte 0
30fc8     00          | mouse_mpending  byte 0
30fc9     00          | mouse_lock      byte 0
30fca     00 00 00    |                 byte 0[3] ' padding
30fcd                 | end
30fcd                 | 
30fcd     00 00 00 00 
      ...             
31045     00 00 00 00 
31049     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3104d     00 00 00 00 
31051     00 00 00 00 
31055     00 00 00 00 
31059     00 00 00 00 
3105d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3105f     00 00 00 00 
      ...             
31157     00 00 00 00 
3115b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3115f                 | 
3115f     00          | driver_cog      byte    0                       ' Current driver cog + 1
31160                 | 	alignl
31160                 | _Audio093b_8_sc_spin2_dat_
31160                 | 
31160                 | audio       org     0
31160                 | 
31160     61 BD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
31164     61 0B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
31168     61 17 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3116c                 | 
3116c     01 EC 63 FD |             cogid   pa                   ' compute cogid
31170     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
31174     F6 BD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
31178     DE BA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3117c                 | 
3117c     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
31180     0E 12 06 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/95
31184     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
31188     0F 12 06 FC |             wrpin   dac,#right
3118c     0F BE 1C FC |             wxpin   #95,#right    
31190     41 9C 64 FD |             dirh    #left addpins 1
31194     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
31198     C5 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3119c     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
311a0                 |             
311a0                 | '---------------------------------------------------------------------------------        
311a0                 | '----------------- The main loop -------------------------------------------------
311a0                 | '---------------------------------------------------------------------------------
311a0                 | 
311a0     CE 9E 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
311a4     10 00 90 CD |       if_c  jmp     #loop1
311a8                 |   
311a8     09 F0 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
311ac     CE F0 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
311b0     CD 00 80 F1 |             sub     0-0,a40000000
311b4     FD F1 6D FB |             djnz    cn,#p402
311b8                 |     
311b8     00 F0 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
311bc     D0 F2 01 F6 |             mov     ct,time1            ' with the lowest next sample time
311c0     D1 F2 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
311c4     01 F0 05 C6 |     if_c    mov     cn,#1
311c8     D2 F2 39 F3 |             fle     ct,time3 wcz
311cc     02 F0 05 C6 |     if_c    mov     cn,#2     
311d0     D3 F2 39 F3 |             fle     ct,time4 wcz
311d4     03 F0 05 C6 |     if_c    mov     cn,#3
311d8     D4 F2 39 F3 |             fle     ct,time5 wcz
311dc     04 F0 05 C6 |     if_c    mov     cn,#4
311e0     D5 F2 39 F3 |             fle     ct,time6 wcz
311e4     05 F0 05 C6 |     if_c    mov     cn,#5
311e8     D6 F2 39 F3 |             fle     ct,time7 wcz
311ec     06 F0 05 C6 |     if_c    mov     cn,#6
311f0     D7 F2 39 F3 |             fle     ct,time8 wcz
311f4     07 F0 05 C6 |     if_c    mov     cn,#7
311f8                 | 
311f8                 | 
311f8                 | '----------------------------------------------------------------------------------
311f8                 | '------------- Compute channel samples --------------------------------------------
311f8                 | '----------------------------------------------------------------------------------
311f8                 | 
311f8                 | 
311f8     F8 B0 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
311fc     06 B0 65 F0 |             shl     channeladd,#6
31200     D8 F0 03 F1 |             add     ptra,channeladd
31204                 | 
31204     28 16 64 FD |             setq    #11                        ' read parameters
31208     00 C7 05 FB |             rdlong  pointer0,ptra
3120c                 |     	    
3120c     1F D4 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
31210     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
31214     EA B4 31 F9 |             getword qq,command0,#0            ' get the new rate
31218     4E B4 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
3121c     DA B4 E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
31220     00 B4 0D F2 |             cmp     qq,#0 wz                         
31224     4E 14 06 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
31228     4E 12 06 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
3122c                 |             
3122c     1E D4 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
31230     DE BA 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
31234     00 BA 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
31238                 | 
31238                 | 
31238     E4 F6 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3123c     E4 F8 39 F9 |             getword oldrs,sample0,#1
31240     E8 EC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
31244     E8 EA 31 F9 |     	    getword avol0,volpan0,#0
31248     E9 E8 39 F9 |             getword askip0,freqskip0,#1    	    
3124c     E9 E6 31 F9 |             getword afreq0,freqskip0,#0
31250                 | 
31250     D0 F0 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
31254     00 F4 01 F6 |             mov     dt0,0-0    
31258     CF F4 81 F1 |             sub     dt0,time0
3125c                 |             
3125c     D0 F0 8D F9 |             altd    cn, #time1                ' add channel period to channel time
31260     F3 00 00 F1 |             add     0-0,afreq0  	
31264                 | 
31264     00 D8 05 F2 |             cmp envptr0,#0
31268     20 00 00 AF 
3126c     00 38 06 A6 |             if_z mov envs1,##$4000
31270     50 00 90 AD |             if_z jmp #p410
31274     EB 34 02 F6 |       	    mov     envhi, envph0
31278     06 34 46 F0 | 	    shr     envhi,#6
3127c     1A 37 32 F9 | 	    getword envlo,envhi, #0
31280     10 34 46 F0 | 	    shr     envhi,#16
31284     EE 34 1A F2 | 	    cmp     envhi, envlen0 wcz
31288     EE 34 02 36 |     if_ge   mov     envhi,envlen0
3128c     F3 38 02 C6 |     if_lt   mov envs1,afreq0
31290     ED 38 02 CA |     if_lt  mul envs1,envspd0
31294     1C D7 01 C1 |     if_lt   add	    envph0,envs1
31298     1A 39 02 F6 |             mov envs1,envhi
3129c     01 38 66 F0 |             shl envs1,#1
312a0     EC 38 02 F1 |             add envs1,envptr0
312a4     1C 39 02 FB |             rdlong envs1,envs1
312a8     1C 3B 3A F9 |             getword envs2,envs1,#1
312ac     1C 39 32 F9 |             getword envs1,envs1,#0
312b0                 |             
312b0     1B 3B 02 FA |             mul envs2,envlo
312b4     1B 37 22 F6 |             not envlo
312b8     1B 39 02 FA |             mul envs1,envlo
312bc     1D 39 02 F1 |             add envs1,envs2
312c0     12 38 46 F0 |             shr envs1,#18
312c4                 |             
312c4                 | 	    
312c4                 | 
312c4     F4 C6 01 F1 | p410              add     pointer0,askip0           ' compute the pointer to the next sample       
312c8     E3 32 C2 F8 |          setbyte pointer00,pointer0,#0
312cc     08 C6 45 F0 |             shr     pointer0,#8
312d0                 |          
312d0     1F CA 0D F4 |             testb   sstart0,#31 wz            
312d4     01 C6 65 A0 |     if_z    shl     pointer0,#1        
312d8     1C CA 0D F4 |             testb   sstart0,#28 wz            
312dc     01 C6 65 A0 |     if_z    shl     pointer0,#1        
312e0                 |             
312e0     E7 C6 19 F2 |             cmp     pointer0,lend0 wcz
312e4     E7 C6 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
312e8     E6 C6 01 31 |     if_ge   add     pointer0,lstart0       
312ec                 |             
312ec     E3 B4 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
312f0     E5 B4 01 F1 |             add     qq,sstart0            
312f4                 | 
312f4                 | 
312f4                 | 
312f4     FF BB 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
312f8     DA B6 E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
312fc     14 01 B0 1D |     if_gt   call    #cache_read
31300                 |          
31300                 |          
31300                 |  
31300                 |          
31300     1F CA 0D F4 |             testb   sstart0,#31 wz 
31304     08 B6 65 50 |     if_nz   shl     spl,#8
31308     08 C6 65 50 |     if_nz   shl     pointer0,#8
3130c     07 C6 65 A0 |     if_z    shl     pointer0,#7
31310     1C CA 0D F4 |             testb   sstart0,#28 wz            
31314     01 C6 45 A0 |     if_z    shr     pointer0,#1    
31318     19 C7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3131c                 |     
3131c                 | 
3131c                 | p406        
3131c     1C B7 31 FA |             scas spl, envs1
31320     00 B6 01 F6 |             mov spl,0-0
31324     F5 B6 31 FA |             scas    spl,avol0                 ' apply volume
31328     00 B6 01 F6 |             mov     spl,0-0
3132c                 |  
3132c     F6 B6 31 FA |             scas    spl,apan0                 ' apply pan
31330     00 FA 01 F6 |             mov     ls0,0-0
31334     20 00 00 FF 
31338     00 B4 05 F6 |             mov     qq,##16384
3133c     F6 B4 81 F1 |             sub     qq,apan0
31340     DA B6 31 FA |             scas    spl,qq
31344     00 FC 01 F6 |             mov     rs0, 0-0
31348                 | 
31348     FC 00 82 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
3134c     FE 00 02 F1 |             add     rs,rs0
31350     FB FE 81 F1 |             sub     ls,oldls
31354     FD FE 01 F1 |             add     ls,ls0
31358                 |    
31358     FE C8 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
3135c     FD C8 21 F9 |             setword sample0,ls0,#0
31360                 |             
31360     1E CA 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointers needs resetting  
31364     00 C6 05 A6 |     if_z    mov     pointer0, #0  
31368     00 D6 05 A6 |     if_z    mov     envph0, #0  
3136c     02 CB 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
31370     1D CA 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
31374     04 00 00 AF 
31378     00 A0 05 A1 |     if_z    add     time1,##2048
3137c     D0 A2 01 A6 |     if_z    mov     time2,time1
31380     02 CB 65 AC |     if_z    wrlong  sstart0,ptra[2]
31384                 |             
31384     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
31388     00 C7 65 FC |             wrlong  pointer0,ptra
3138c     08 D7 65 FC |             wrlong  envph0,ptra[8]
31390     D8 F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
31394                 |                       
31394     CF EE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
31398     FF B3 25 A7 |     if_z    decmod  front, #511          
3139c                 |          
3139c     FF F6 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
313a0     00 F9 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
313a4     0F F6 E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
313a8     0F F8 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
313ac                 | 	    
313ac                 | 		    
313ac     FB F8 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
313b0     02 03 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
313b4     FC 04 02 F6 |             mov     newsample, oldrs       
313b8                 | 
313b8     CF EE 01 F6 |             mov     oldt0,time0              ' update global time
313bc     FA 9E 01 F1 |             add     time0,dt0    
313c0                 |                                      
313c0     00 F4 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
313c4     F0 FD 9F AD |     if_z    jmp     #loop1
313c8     FA B4 01 F6 |             mov     qq,dt0
313cc                 |   
313cc     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
313d0     00 B2 9D F2 |             cmpr    front, #0-0 wcz
313d4     F4 FF 9F AD |     if_e    jmp     #p301    
313d8                 | 		
313d8     00 0A 0E F2 | 	    cmp     scbase,#0 wz
313dc     20 00 90 AD |     if_z    jmp #p302	   
313e0                 |  
313e0                 |  
313e0     3F 10 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
313e4     06 0F 02 C6 |     if_c    mov scptr2,scptr
313e8     02 0E 66 C0 |     if_c    shl scptr2,#2
313ec     05 0F 02 C1 |     if_c    add scptr2,scbase     
313f0     60 0E 66 FC |             wrlong scptr2,#$60
313f4     07 03 62 CC |     if_c    wrlong oldsample,scptr2
313f8     01 00 00 CF 
313fc     7F 0C 06 C7 |     if_c    incmod scptr,##639
31400                 | 			    
31400     D9 02 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
31404     00 00 00 FF 
31408     FF B3 05 F7 |             incmod  front, ##511
3140c     EF B5 6D FB |             djnz    qq,#p301
31410                 |             
31410     8C FD 9F FD |             jmp     #loop            'loop
31414                 | 
31414                 | '----------------------------------------------------------------------------------
31414                 | '------------- This is the end of the main loop -----------------------------------
31414                 | '----------------------------------------------------------------------------------
31414                 | 
31414                 | '----------------------------------------------------------------------------------
31414                 | '------------- PSRAM cache ----------- --------------------------------------------
31414                 | '----------------------------------------------------------------------------------
31414                 | 
31414                 | ' There are 8 cache pointers for 8 channels
31414                 | ' if 24 higher bits of address=cache, then get a word from the cache
31414                 | ' else load the cache from PSRAM, update the pointer, then read a sample
31414                 | 
31414                 | 
31414     DA 2E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
31418                 |             
31418     DA 30 02 F6 | 	    mov     addrhi,qq		
3141c     08 30 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
31420     0C F1 95 F9 | 	    alts    cn,#cache1            
31424     00 30 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
31428     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3142c                 | 	
3142c     0C F1 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
31430     18 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
31434     18 29 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
31438     08 28 66 F0 | 	    shl     cmd,#8
3143c     0B 28 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
31440     F8 2A 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
31444     08 2A 66 F0 |             shl     hubaddr,#8                  '
31448     0B 2B 02 F1 |             add     hubaddr,hubptr 
3144c     00 2D 06 F6 |             mov     count,#256                  ' 256 bytes
31450     28 04 64 FD |             setq    #2                          ' write 3 longs
31454     DD 28 62 FC |             wrlong  cmd, mailbox                ' run it
31458     DD 28 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3145c     FE 29 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
31460                 |             
31460                 | 	
31460     F8 B4 01 F6 | p701	    mov     qq,cn			' cache hit
31464     08 B4 65 F0 | 	    shl     qq,#8			' compute the cache start
31468     0B B5 01 F1 | 	    add     qq,hubptr
3146c     17 B5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
31470     DA B6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
31474                 |           
31474                 | 
31474                 | '--------------------------------------------------------------------------
31474                 | '------ Interrupt service -------------------------------------------------
31474                 | '------ Output the sample, get the next one if exists ---------------------
31474                 | '--------------------------------------------------------------------------
31474                 | 
31474     0E BE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
31478     0F C0 25 FC |             wypin   rsample,#right       '4
3147c     D9 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
31480     80 C3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
31484     FF F3 07 57 |     if_ne   incmod  ptrb,#511
31488     E1 C0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3148c     E1 BE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
31490                 |     
31490     F5 FF 3B FB |             reti1                        '17/19 
31494                 |           
31494                 | '---------------------------------------------------------------------------
31494                 | '-------- End of interrupt -------------------------------------------------
31494                 | '---------------------------------------------------------------------------    
31494                 | 
31494                 | 
31494                 | '---------------------------------------------------------------------------
31494                 | '------- Variables ---------------------------------------------------------
31494                 | '---------------------------------------------------------------------------
31494                 | 
31494                 | ' constants
31494                 | 
31494     00 00 00 40 | a40000000   long $40000000
31498     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3149c                 | 
3149c                 | ' Time variables
3149c                 | 
3149c     00 00 00 00 | time0       long 0    ' Global sample computing time
314a0     01 00 00 00 | time1       long 1    ' Local channels time
314a4     02 00 00 00 | time2       long 2
314a8     03 00 00 00 | time3       long 3
314ac     04 00 00 00 | time4       long 4
314b0     05 00 00 00 | time5       long 5
314b4     06 00 00 00 | time6       long 6
314b8     07 00 00 00 | time7       long 7
314bc     08 00 00 00 | time8       long 8
314c0                 | 
314c0     00 00 00 00 | channeladd long 0
314c4                 | 
314c4     00 00 00 00 | front       long 0
314c8                 | 
314c8                 | ' temporary variables 
314c8     00 00 00 00 | qq          long 0
314cc     00 00 00 00 | spl         long 0
314d0     00 00 00 00 | zero        long 0
314d4     00 00 00 00 | mailbox     long 0
314d8     00 00 00 00 | mailbox2 long 0
314dc                 | 
314dc                 | ' Interrupt ISR variables
314dc                 | 
314dc     00 00 00 00 | lsample     long 0
314e0     00 00 00 00 | rsample     long 0
314e4     00 00 00 00 | lsnext      long 0
314e8     00 00 00 00 | rsnext      long 0 
314ec                 | 
314ec                 | ' channel parameter block
314ec                 | 
314ec     00 00 00 00 | pointer0    long 0     
314f0     00 00 00 00 | sample0     long 0
314f4     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
314f8     00 00 00 00 | lstart0     long 0
314fc     00 00 00 00 | lend0       long 0
31500     00 00 00 00 | volpan0     long 0
31504     00 00 00 00 | freqskip0   long 0
31508     00 00 00 00 | command0    long 0
3150c     00 00 00 00 | envph0	    long 0
31510     00 00 00 00 | envptr0	    long 0
31514     00 00 00 00 | envspd0	    long 0
31518     00 00 00 00 | envlen0	    long 0
3151c     00 00 00 00 | res5	    long 0
31520     00 00 00 00 | res6	    long 0
31524     00 00 00 00 | res7	    long 0
31528     00 00 00 00 | res8	    long 0
3152c                 | 
3152c     00 00 00 00 | afreq0      long 0
31530     00 00 00 00 | askip0      long 0
31534     00 00 00 00 | avol0       long 0
31538     00 00 00 00 | apan0       long 0
3153c                 | 
3153c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
31540     00 00 00 00 | cn          long 0
31544     00 00 00 00 | ct          long 0
31548     00 00 00 00 | dt0         long 0
3154c                 | 
3154c                 | ' Samples
3154c     00 00 00 00 | oldls       long 0
31550     00 00 00 00 | oldrs       long 0
31554                 | 
31554     00 00 00 00 | ls0         long 0
31558     00 00 00 00 | rs0         long 0
3155c                 | 
3155c     00 00 00 00 | ls          long 0    
31560     00 00 00 00 | rs          long 0
31564                 | 
31564     00 00 00 00 | oldsample   long 0
31568     00 00 00 00 | newsample   long 0
3156c                 | 
3156c     00 00 00 00 | nrsample    long 0
31570     00 00 00 00 | nlsample    long 0
31574                 | 
31574     00 00 00 00 | scbase long 0
31578     00 00 00 00 | scptr long 0
3157c     00 00 00 00 | scptr2 long 0
31580     00 00 00 00 | scope long 0
31584                 | 
31584     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
31588     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3158c                 | 
3158c     00 18 07 00 | hubptr      long $71800
31590     00 00 00 00 | cache1      long 0
31594     00 00 00 00 | cache2      long 0
31598     00 00 00 00 | cache3      long 0
3159c     00 00 00 00 | cache4      long 0
315a0     00 00 00 00 | cache5      long 0
315a4     00 00 00 00 | cache6      long 0
315a8     00 00 00 00 | cache7      long 0
315ac     00 00 00 00 | cache8      long 0
315b0                 | 
315b0                 | 
315b0     00 00 00 00 | cmd         long 0
315b4     00 00 00 00 | hubaddr     long 0
315b8     00 01 00 00 | count       long 256
315bc     00 00 00 00 | addrlo long 0
315c0     00 00 00 00 | addrhi long 0
315c4     00 00 00 00 | pointer00 long 0
315c8     00 00 00 00 | envhi long 0
315cc     00 00 00 00 | envlo long 0
315d0     00 00 00 00 | envs1 long 0
315d4     00 00 00 00 | envs2 long 0
315d8     00 00 00 00 
315dc     00 00 00 00 | null  			long 	0,0           ' for channel reset
315e0                 | 	alignl
315e0                 | __system__dat_
315e0     00 00 00 00 
315e4     00 00 00 00 | 	byte	$00[8]
315e8     03 00 00 00 
315ec     00 00 00 00 
315f0     00 00 00 00 
315f4     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
315f8     00 00 00 00 
      ...             
31884     00 00 00 00 
31888     00 00 00 00 | 	byte	$00[660]
3188c     00 00 80 06 | 	long	(104 {__system____root_opendir})<<20
31890     00 00 90 06 | 	long	(105 {__system____root_closedir})<<20
31894     00 00 A0 06 | 	long	(106 {__system____root_readdir})<<20
31898     00 00 B0 06 | 	long	(107 {__system____root_stat})<<20
3189c     00 00 00 00 
318a0     00 00 00 00 
318a4     00 00 00 00 
318a8     00 00 00 00 
318ac     00 00 00 00 
318b0     00 00 00 00 
318b4     00 00 00 00 | 	byte	$00[28]
318b8     20 19 03 00 | 	long	@@@__system__dat_ + 832
318bc     23 19 03 00 | 	long	@@@__system__dat_ + 835
318c0     44 19 03 00 | 	long	@@@__system__dat_ + 868
318c4     5D 19 03 00 | 	long	@@@__system__dat_ + 893
318c8     78 19 03 00 | 	long	@@@__system__dat_ + 920
318cc     92 19 03 00 | 	long	@@@__system__dat_ + 946
318d0     A2 19 03 00 | 	long	@@@__system__dat_ + 962
318d4     B4 19 03 00 | 	long	@@@__system__dat_ + 980
318d8     C6 19 03 00 | 	long	@@@__system__dat_ + 998
318dc     D8 19 03 00 | 	long	@@@__system__dat_ + 1016
318e0     E4 19 03 00 | 	long	@@@__system__dat_ + 1028
318e4     F5 19 03 00 | 	long	@@@__system__dat_ + 1045
318e8     09 1A 03 00 | 	long	@@@__system__dat_ + 1065
318ec     13 1A 03 00 | 	long	@@@__system__dat_ + 1075
318f0     23 1A 03 00 | 	long	@@@__system__dat_ + 1091
318f4     32 1A 03 00 | 	long	@@@__system__dat_ + 1106
318f8     48 1A 03 00 | 	long	@@@__system__dat_ + 1128
318fc     61 1A 03 00 | 	long	@@@__system__dat_ + 1153
31900     75 1A 03 00 | 	long	@@@__system__dat_ + 1173
31904     83 1A 03 00 | 	long	@@@__system__dat_ + 1187
31908     97 1A 03 00 | 	long	@@@__system__dat_ + 1207
3190c     A3 1A 03 00 | 	long	@@@__system__dat_ + 1219
31910     B5 1A 03 00 | 	long	@@@__system__dat_ + 1237
31914     CD 1A 03 00 | 	long	@@@__system__dat_ + 1261
31918     DF 1A 03 00 | 	long	@@@__system__dat_ + 1279
3191c     F2 1A 03 00 | 	long	@@@__system__dat_ + 1298
31920     4F 4B 00 4E 
31924     75 6D 65 72 
31928     69 63 61 6C 
3192c     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
31930     75 6D 65 6E 
31934     74 20 6F 75 
31938     74 20 6F 66 
3193c     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
31940     61 69 6E 00 
31944     52 65 73 75 
31948     6C 74 20 6E 
3194c     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
31950     65 70 72 65 
31954     73 65 6E 74 
31958     61 62 6C 65 
3195c     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
31960     65 67 61 6C 
31964     20 6D 75 6C 
31968     74 69 62 79 
3196c     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
31970     65 71 75 65 
31974     6E 63 65 00 
31978     4E 6F 20 73 
3197c     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
31980     66 69 6C 65 
31984     20 6F 72 20 
31988     64 69 72 65 
3198c     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
31990     79 00 42 61 
31994     64 20 66 69 
31998     6C 65 20 6E 
3199c     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
319a0     72 00 50 65 
319a4     72 6D 69 73 
319a8     73 69 6F 6E 
319ac     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
319b0     69 65 64 00 
319b4     4E 6F 74 20 
319b8     65 6E 6F 75 
319bc     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
319c0     65 6D 6F 72 
319c4     79 00 54 65 
319c8     6D 70 6F 72 
319cc     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
319d0     66 61 69 6C 
319d4     75 72 65 00 
319d8     46 69 6C 65 
319dc     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
319e0     73 74 73 00 
319e4     49 6E 76 61 
319e8     6C 69 64 20 
319ec     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
319f0     6D 65 6E 74 
319f4     00 54 6F 6F 
319f8     20 6D 61 6E 
319fc     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
31a00     65 6E 20 66 
31a04     69 6C 65 73 
31a08     00 49 2F 4F 
31a0c     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
31a10     6F 72 00 4E 
31a14     6F 74 20 61 
31a18     20 64 69 72 
31a1c     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
31a20     72 79 00 49 
31a24     73 20 61 20 
31a28     64 69 72 65 
31a2c     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
31a30     79 00 52 65 
31a34     61 64 20 6F 
31a38     6E 6C 79 20 
31a3c     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
31a40     20 73 79 73 
31a44     74 65 6D 00 
31a48     46 75 6E 63 
31a4c     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
31a50     20 6E 6F 74 
31a54     20 69 6D 70 
31a58     6C 65 6D 65 
31a5c     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
31a60     00 44 69 72 
31a64     65 63 74 6F 
31a68     72 79 20 6E 
31a6c     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
31a70     6D 70 74 79 
31a74     00 4E 61 6D 
31a78     65 20 74 6F 
31a7c     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
31a80     6E 67 00 44 
31a84     65 76 69 63 
31a88     65 20 6E 6F 
31a8c     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
31a90     65 6B 61 62 
31a94     6C 65 00 42 
31a98     61 64 20 61 
31a9c     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
31aa0     73 73 00 42 
31aa4     72 6F 6B 65 
31aa8     6E 20 63 6F 
31aac     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
31ab0     74 69 6F 6E 
31ab4     00 44 65 76 
31ab8     69 63 65 20 
31abc     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
31ac0     65 73 6F 75 
31ac4     72 63 65 20 
31ac8     62 75 73 79 
31acc     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
31ad0     73 73 20 64 
31ad4     65 76 69 63 
31ad8     65 20 6C 69 
31adc     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
31ae0     6F 20 73 70 
31ae4     61 63 65 20 
31ae8     6F 6E 20 64 
31aec     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
31af0     65 00 55 6E 
31af4     6B 6E 6F 77 
31af8     6E 20 65 72 
31afc     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
31b00     00 00 00 00 
31b04     00 00 00 00 | 	byte	$00[8]
31b08     05 00 00 00 
31b0c     00 00 00 00 
31b10     00 00 00 00 
31b14     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31b18     00 00 00 00 | 	byte	$00, $00, $00, $00
31b1c     00 00 00 08 | 	long	(128 {__system___tx})<<20
31b20     00 00 10 08 | 	long	(129 {__system___rx})<<20
31b24     00 00 00 00 | 	byte	$00, $00, $00, $00
31b28     00 00 20 08 | 	long	(130 {__system___rxtxioctl_0579})<<20
31b2c     00 00 30 08 | 	long	(131 {__system____dummy_flush_0580})<<20
31b30     00 00 00 00 
31b34     00 00 00 00 | 	byte	$00[8]
31b38     01 00 00 00 
31b3c     06 00 00 00 
31b40     00 00 00 00 
31b44     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31b48     00 00 00 00 
31b4c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31b50     00 00 00 08 | 	long	(128 {__system___tx})<<20
31b54     00 00 10 08 | 	long	(129 {__system___rx})<<20
31b58     00 00 00 00 | 	byte	$00, $00, $00, $00
31b5c     00 00 20 08 | 	long	(130 {__system___rxtxioctl_0579})<<20
31b60     00 00 30 08 | 	long	(131 {__system____dummy_flush_0580})<<20
31b64     00 00 00 00 
31b68     00 00 00 00 | 	byte	$00[8]
31b6c     01 00 00 00 
31b70     06 00 00 00 
31b74     00 00 00 00 
31b78     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31b7c     00 00 00 00 
31b80     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31b84     00 00 00 08 | 	long	(128 {__system___tx})<<20
31b88     00 00 10 08 | 	long	(129 {__system___rx})<<20
31b8c     00 00 00 00 | 	byte	$00, $00, $00, $00
31b90     00 00 20 08 | 	long	(130 {__system___rxtxioctl_0579})<<20
31b94     00 00 30 08 | 	long	(131 {__system____dummy_flush_0580})<<20
31b98     00 00 00 00 
      ...             
31d08     00 00 00 00 
31d0c     00 00 00 00 | 	byte	$00[376]
31d10     14 1D 03 00 | 	long	@@@__system__dat_ + 1844
31d14     00 00 00 00 
31d18     00 00 00 00 
31d1c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31d20                 | 	alignl
31d20                 | _fatfs_cc_dat_
31d20     C7 00 FC 00 
31d24     E9 00 E2 00 
31d28     E4 00 E0 00 
31d2c     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
31d30     EA 00 EB 00 
31d34     E8 00 EF 00 
31d38     EE 00 EC 00 
31d3c     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
31d40     C9 00 E6 00 
31d44     C6 00 F4 00 
31d48     F6 00 F2 00 
31d4c     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
31d50     FF 00 D6 00 
31d54     DC 00 F8 00 
31d58     A3 00 D8 00 
31d5c     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
31d60     E1 00 ED 00 
31d64     F3 00 FA 00 
31d68     F1 00 D1 00 
31d6c     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
31d70     BF 00 AE 00 
31d74     AC 00 BD 00 
31d78     BC 00 A1 00 
31d7c     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
31d80     91 25 92 25 
31d84     93 25 02 25 
31d88     24 25 C1 00 
31d8c     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
31d90     A9 00 63 25 
31d94     51 25 57 25 
31d98     5D 25 A2 00 
31d9c     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
31da0     14 25 34 25 
31da4     2C 25 1C 25 
31da8     00 25 3C 25 
31dac     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
31db0     5A 25 54 25 
31db4     69 25 66 25 
31db8     60 25 50 25 
31dbc     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
31dc0     F0 00 D0 00 
31dc4     CA 00 CB 00 
31dc8     C8 00 31 01 
31dcc     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
31dd0     CF 00 18 25 
31dd4     0C 25 88 25 
31dd8     84 25 A6 00 
31ddc     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
31de0     D3 00 DF 00 
31de4     D4 00 D2 00 
31de8     F5 00 D5 00 
31dec     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
31df0     DE 00 DA 00 
31df4     DB 00 D9 00 
31df8     FD 00 DD 00 
31dfc     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
31e00     AD 00 B1 00 
31e04     17 20 BE 00 
31e08     B6 00 A7 00 
31e0c     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
31e10     B0 00 A8 00 
31e14     B7 00 B9 00 
31e18     B3 00 B2 00 
31e1c     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
31e20     61 00 1A 03 
31e24     E0 00 17 03 
31e28     F8 00 07 03 
31e2c     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
31e30     78 01 00 01 
31e34     30 01 32 01 
31e38     06 01 39 01 
31e3c     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
31e40     2E 01 79 01 
31e44     06 01 80 01 
31e48     4D 00 43 02 
31e4c     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
31e50     82 01 84 01 
31e54     84 01 86 01 
31e58     87 01 87 01 
31e5c     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
31e60     8B 01 8B 01 
31e64     8D 01 8E 01 
31e68     8F 01 90 01 
31e6c     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
31e70     93 01 94 01 
31e74     F6 01 96 01 
31e78     97 01 98 01 
31e7c     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
31e80     9B 01 9C 01 
31e84     9D 01 20 02 
31e88     9F 01 A0 01 
31e8c     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
31e90     A2 01 A4 01 
31e94     A4 01 A6 01 
31e98     A7 01 A7 01 
31e9c     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
31ea0     AB 01 AC 01 
31ea4     AC 01 AE 01 
31ea8     AF 01 AF 01 
31eac     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
31eb0     B3 01 B3 01 
31eb4     B5 01 B5 01 
31eb8     B7 01 B8 01 
31ebc     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
31ec0     BB 01 BC 01 
31ec4     BC 01 BE 01 
31ec8     F7 01 C0 01 
31ecc     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
31ed0     C3 01 C4 01 
31ed4     C5 01 C4 01 
31ed8     C7 01 C8 01 
31edc     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
31ee0     CB 01 CA 01 
31ee4     CD 01 10 01 
31ee8     DD 01 01 00 
31eec     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
31ef0     12 01 F3 01 
31ef4     03 00 F1 01 
31ef8     F4 01 F4 01 
31efc     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
31f00     22 02 12 01 
31f04     3A 02 09 00 
31f08     65 2C 3B 02 
31f0c     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
31f10     66 2C 3F 02 
31f14     40 02 41 02 
31f18     41 02 46 02 
31f1c     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
31f20     40 00 81 01 
31f24     86 01 55 02 
31f28     89 01 8A 01 
31f2c     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
31f30     5A 02 90 01 
31f34     5C 02 5D 02 
31f38     5E 02 5F 02 
31f3c     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
31f40     62 02 94 01 
31f44     64 02 65 02 
31f48     66 02 67 02 
31f4c     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
31f50     6A 02 62 2C 
31f54     6C 02 6D 02 
31f58     6E 02 9C 01 
31f5c     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
31f60     9D 01 73 02 
31f64     74 02 9F 01 
31f68     76 02 77 02 
31f6c     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
31f70     7A 02 7B 02 
31f74     7C 02 64 2C 
31f78     7E 02 7F 02 
31f7c     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
31f80     82 02 A9 01 
31f84     84 02 85 02 
31f88     86 02 87 02 
31f8c     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
31f90     B1 01 B2 01 
31f94     45 02 8D 02 
31f98     8E 02 8F 02 
31f9c     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
31fa0     B7 01 7B 03 
31fa4     03 00 FD 03 
31fa8     FE 03 FF 03 
31fac     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
31fb0     86 03 88 03 
31fb4     89 03 8A 03 
31fb8     B1 03 11 03 
31fbc     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
31fc0     A3 03 A3 03 
31fc4     C4 03 08 03 
31fc8     CC 03 03 00 
31fcc     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
31fd0     8F 03 D8 03 
31fd4     18 01 F2 03 
31fd8     0A 00 F9 03 
31fdc     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
31fe0     F5 03 F6 03 
31fe4     F7 03 F7 03 
31fe8     F9 03 FA 03 
31fec     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
31ff0     20 03 50 04 
31ff4     10 07 60 04 
31ff8     22 01 8A 04 
31ffc     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
32000     0E 01 CF 04 
32004     01 00 C0 04 
32008     D0 04 44 01 
3200c     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
32010     00 00 7D 1D 
32014     01 00 63 2C 
32018     00 1E 96 01 
3201c     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
32020     00 1F 08 06 
32024     10 1F 06 06 
32028     20 1F 08 06 
3202c     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
32030     40 1F 06 06 
32034     51 1F 07 00 
32038     59 1F 52 1F 
3203c     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
32040     5D 1F 56 1F 
32044     5F 1F 60 1F 
32048     08 06 70 1F 
3204c     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
32050     BB 1F C8 1F 
32054     C9 1F CA 1F 
32058     CB 1F DA 1F 
3205c     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
32060     F9 1F EA 1F 
32064     EB 1F FA 1F 
32068     FB 1F 80 1F 
3206c     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
32070     08 06 A0 1F 
32074     08 06 B0 1F 
32078     04 00 B8 1F 
3207c     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
32080     BC 1F CC 1F 
32084     01 00 C3 1F 
32088     D0 1F 02 06 
3208c     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
32090     E5 1F 01 00 
32094     EC 1F F3 1F 
32098     01 00 FC 1F 
3209c     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
320a0     32 21 70 21 
320a4     10 02 84 21 
320a8     01 00 83 21 
320ac     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
320b0     30 2C 2F 04 
320b4     60 2C 02 01 
320b8     67 2C 06 01 
320bc     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
320c0     80 2C 64 01 
320c4     00 2D 26 08 
320c8     41 FF 1A 03 
320cc     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
320d0     05 07 09 0E 
320d4     10 12 14 16 
320d8     18 1C 1E 43 
320dc     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
320e0     41 41 43 45 
320e4     45 45 49 49 
320e8     49 41 41 45 
320ec     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
320f0     4F 55 55 59 
320f4     4F 55 4F 9C 
320f8     4F 9E 9F 41 
320fc     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
32100     A5 A6 A7 A8 
32104     A9 AA AB AC 
32108     AD AE AF B0 
3210c     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
32110     41 41 41 B8 
32114     B9 BA BB BC 
32118     BD BE BF C0 
3211c     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
32120     C5 41 41 C8 
32124     C9 CA CB CC 
32128     CD CE CF D1 
3212c     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
32130     49 49 49 49 
32134     D9 DA DB DC 
32138     DD 49 DF 4F 
3213c     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
32140     4F E6 E8 E8 
32144     55 55 55 59 
32148     59 EE EF F0 
3214c     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
32150     F5 F6 F7 F8 
32154     F9 FA FB FC 
32158     FD FE FF 00 
3215c     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
32160     00 00 00 00 | 	byte	$00, $00, $00, $00
32164     00 00 F0 06 | 	long	(111 {_fatfs_cc_v_close})<<20
32168     00 00 00 07 | 	long	(112 {_fatfs_cc_v_read})<<20
3216c     00 00 10 07 | 	long	(113 {_fatfs_cc_v_write})<<20
32170     00 00 20 07 | 	long	(114 {_fatfs_cc_v_lseek})<<20
32174     00 00 30 07 | 	long	(115 {_fatfs_cc_v_ioctl})<<20
32178     00 00 40 08 | 	long	(132 {_fatfs_cc_v_flush})<<20
3217c     00 00 00 00 
32180     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
32184     00 00 40 07 | 	long	(116 {_fatfs_cc_v_open})<<20
32188     00 00 50 07 | 	long	(117 {_fatfs_cc_v_creat})<<20
3218c     00 00 60 07 | 	long	(118 {_fatfs_cc_v_opendir})<<20
32190     00 00 70 07 | 	long	(119 {_fatfs_cc_v_closedir})<<20
32194     00 00 80 07 | 	long	(120 {_fatfs_cc_v_readdir})<<20
32198     00 00 90 07 | 	long	(121 {_fatfs_cc_v_stat})<<20
3219c     00 00 A0 07 | 	long	(122 {_fatfs_cc_v_mkdir})<<20
321a0     00 00 B0 07 | 	long	(123 {_fatfs_cc_v_rmdir})<<20
321a4     00 00 C0 07 | 	long	(124 {_fatfs_cc_v_remove})<<20
321a8     00 00 D0 07 | 	long	(125 {_fatfs_cc_v_rename})<<20
321ac     00 00 E0 07 | 	long	(126 {_fatfs_cc_v_init})<<20
321b0     00 00 F0 07 | 	long	(127 {_fatfs_cc_v_deinit})<<20
321b4     FF FF FF FF 
321b8     1F 00 00 00 
321bc     1C 00 00 00 
321c0     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
321c4     1E 00 00 00 
321c8     1F 00 00 00 
321cc     1E 00 00 00 
321d0     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
321d4     1F 00 00 00 
321d8     1E 00 00 00 
321dc     1F 00 00 00 
321e0     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
321e4     1F 00 00 00 
321e8     00 00 00 00 
321ec     1F 00 00 00 
321f0     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
321f4     5A 00 00 00 
321f8     78 00 00 00 
321fc     97 00 00 00 
32200     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
32204     D4 00 00 00 
32208     F3 00 00 00 
3220c     11 01 00 00 
32210     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
32214     4E 01 00 00 
32218     6D 01 00 00 
3221c     FF FF FF FF 
32220     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
32224     00 00 00 00 
      ...             
3223c     00 00 00 00 
32240     00 00 00 00 | 	byte	$00[32]
32244     62 22 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
32248     66 22 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3224c     00 00 00 00 
32250     00 00 00 00 
32254     00 00 00 00 
32258     00 00 00 00 
3225c     00 00       | 	byte	$00[18]
3225e     3F 3F 3F 00 
32262     55 43 54 00 
32266     55 43 54 00 
3226a     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3226e     00 00 00 00 
32272     00 00 00    | 	byte	$00[7]
32275     CA 9A 3B 00 
32279     00 00 00 01 
3227d     01 01 01 01 
32281     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
32285     91 11 11 11 
32289     11 01 01 01 
3228d     01 01 01 01 
32291     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
32295     01 01 01 01 
32299     01 01 01    | 	byte	$01[7]
3229c     90 20 20 20 
322a0     20 20 20 20 
322a4     20 20 20 20 
322a8     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
322ac     42 42 42 42 
322b0     42 42 42 42 
322b4     42 42       | 	byte	$42[10]
322b6     20 20 20 20 
322ba     20 20 20    | 	byte	$20[7]
322bd     44 44 44 44 
322c1     44 44       | 	byte	$44[6]
322c3     04 04 04 04 
322c7     04 04 04 04 
322cb     04 04 04 04 
322cf     04 04 04 04 
322d3     04 04 04 04 | 	byte	$04[20]
322d7     20 20 20 20 
322db     20 20       | 	byte	$20[6]
322dd     48 48 48 48 
322e1     48 48       | 	byte	$48[6]
322e3     08 08 08 08 
322e7     08 08 08 08 
322eb     08 08 08 08 
322ef     08 08 08 08 
322f3     08 08 08 08 | 	byte	$08[20]
322f7     20 20 20 20 
322fb     01 00 00 00 
322ff     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
32300                 | __methodtable__
32300     90 47 01 00 | 	long	@_do_no_command
32304     90 D7 00 00 | 	long	@_do_plus
32308     7C DC 00 00 | 	long	@_do_minus
3230c     44 E1 00 00 | 	long	@_do_or
32310     5C E2 00 00 | 	long	@_do_mul
32314     E8 E7 00 00 | 	long	@_do_fdiv
32318     2C E0 00 00 | 	long	@_do_and
3231c     C8 E5 00 00 | 	long	@_do_div
32320     B0 E9 00 00 | 	long	@_do_mod
32324     D0 EB 00 00 | 	long	@_do_shl
32328     E8 EC 00 00 | 	long	@_do_shr
3232c     00 EE 00 00 | 	long	@_do_power
32330     D8 D1 00 00 | 	long	@_do_getvar
32334     5C 9A 00 00 | 	long	@_do_push
32338     8C CA 00 00 | 	long	@_do_assign
3233c     70 24 01 00 | 	long	@_do_cls
32340     88 C4 00 00 | 	long	@_do_new
32344     14 25 01 00 | 	long	@_do_plot
32348     E4 25 01 00 | 	long	@_do_draw
3234c     58 2F 01 00 | 	long	@_do_print
32350     50 28 01 00 | 	long	@_do_circle
32354     D8 26 01 00 | 	long	@_do_fcircle
32358     C8 29 01 00 | 	long	@_do_box
3235c     70 2D 01 00 | 	long	@_do_frame
32360     DC 24 01 00 | 	long	@_do_color
32364     60 7A 00 00 | 	long	@_do_for
32368     8C 7C 00 00 | 	long	@_do_next
3236c     EC C1 00 00 | 	long	@_do_list
32370     AC AA 00 00 | 	long	@_do_run
32374     48 C9 00 00 | 	long	@_do_error
32378     44 C6 00 00 | 	long	@_do_fast_goto
3237c     34 C7 00 00 | 	long	@_do_find_goto
32380     44 C9 00 00 | 	long	@_do_slow_goto
32384     C8 0C 01 00 | 	long	@_do_converttoint
32388     A0 A0 00 00 | 	long	@_test_csave
3238c     F4 A3 00 00 | 	long	@_do_save
32390     E0 A6 00 00 | 	long	@_do_load
32394     24 39 01 00 | 	long	@_do_pinwrite
32398     C4 3D 01 00 | 	long	@_do_waitms
3239c     00 3F 01 00 | 	long	@_do_waitvbl
323a0     00 42 01 00 | 	long	@_do_if
323a4     E4 42 01 00 | 	long	@_do_else
323a8     AC 43 01 00 | 	long	@_do_nothing
323ac     C8 EF 00 00 | 	long	@_do_eq
323b0     40 FE 00 00 | 	long	@_do_ge
323b4     18 03 01 00 | 	long	@_do_le
323b8     A0 F4 00 00 | 	long	@_do_gt
323bc     78 F9 00 00 | 	long	@_do_lt
323c0     F0 07 01 00 | 	long	@_do_ne
323c4     A4 0F 01 00 | 	long	@_do_rnd
323c8     B0 43 01 00 | 	long	@_do_brun
323cc     7C 46 01 00 | 	long	@_do_beep
323d0     30 3F 01 00 | 	long	@_do_dir
323d4     20 34 01 00 | 	long	@_do_paper
323d8     A8 34 01 00 | 	long	@_do_ink
323dc     44 35 01 00 | 	long	@_do_font
323e0     C0 35 01 00 | 	long	@_do_mode
323e4     E8 45 01 00 | 	long	@_do_mouse
323e8     08 24 01 00 | 	long	@_do_gettime
323ec     1C 46 01 00 | 	long	@_do_cursor
323f0     50 46 01 00 | 	long	@_do_click
323f4     94 21 01 00 | 	long	@_do_mousex
323f8     D8 21 01 00 | 	long	@_do_mousey
323fc     60 22 01 00 | 	long	@_do_mousek
32400     1C 22 01 00 | 	long	@_do_mousew
32404     6C 11 01 00 | 	long	@_do_sin
32408     C0 18 01 00 | 	long	@_do_stick
3240c     44 1A 01 00 | 	long	@_do_strig
32410     A8 20 01 00 | 	long	@_do_sprite
32414     18 1D 01 00 | 	long	@_do_defsprite
32418     C8 1B 01 00 | 	long	@_do_getpixel
3241c     0C 3F 01 00 | 	long	@_do_waitclock
32420     9C 47 01 00 | 	long	@_do_negative
32424     A4 22 01 00 | 	long	@_do_rdpin
32428     10 23 01 00 | 	long	@_do_rqpin
3242c     84 23 01 00 | 	long	@_do_pinread
32430     BC 3B 01 00 | 	long	@_do_wrpin
32434     3C 3C 01 00 | 	long	@_do_wxpin
32438     BC 3C 01 00 | 	long	@_do_wypin
3243c     AC 39 01 00 | 	long	@_do_pinfloat
32440     EC 39 01 00 | 	long	@_do_pinlo
32444     2C 3A 01 00 | 	long	@_do_pinhi
32448     AC 3A 01 00 | 	long	@_do_pinstart
3244c     6C 3A 01 00 | 	long	@_do_pintoggle
32450     3C 3D 01 00 | 	long	@_do_position
32454     78 12 01 00 | 	long	@_do_cos
32458     98 13 01 00 | 	long	@_do_tan
3245c     BC 16 01 00 | 	long	@_do_atn
32460     A4 14 01 00 | 	long	@_do_asin
32464     B0 15 01 00 | 	long	@_do_acos
32468     D0 17 01 00 | 	long	@_do_sqr
3246c     B0 2B 01 00 | 	long	@_do_fill
32470     68 B8 00 00 | 	long	@_do_defsnd
32474     D0 AD 00 00 | 	long	@_do_defenv
32478     08 43 01 00 | 	long	@_do_rad
3247c     30 43 01 00 | 	long	@_do_deg
32480     58 43 01 00 | 	long	@_do_int
32484     34 7B 01 00 | 	long	@_hg010b_spin2_putchar
32488     10 82 02 00 | 	long	@__struct___bas_wrap_sender_tx
3248c     54 82 02 00 | 	long	@__struct___bas_wrap_sender_rx
32490     9C 82 02 00 | 	long	@__struct___bas_wrap_sender_close
32494     40 81 02 00 | 	long	@__struct__s_vfs_file_t_putchar
32498     B0 81 02 00 | 	long	@__struct__s_vfs_file_t_getchar
3249c     F8 80 02 00 | 	long	@___strs_cl_pfunc
324a0     68 E0 01 00 | 	long	@__system____root_opendir
324a4     04 E1 01 00 | 	long	@__system____root_closedir
324a8     80 E0 01 00 | 	long	@__system____root_readdir
324ac     0C E1 01 00 | 	long	@__system____root_stat
324b0     94 D9 01 00 | 	long	@__system____default_putc
324b4     18 D9 01 00 | 	long	@__system____default_getc
324b8     3C DA 01 00 | 	long	@__system____default_flush
324bc     10 6C 02 00 | 	long	@_fatfs_cc_v_close
324c0     2C 70 02 00 | 	long	@_fatfs_cc_v_read
324c4     40 71 02 00 | 	long	@_fatfs_cc_v_write
324c8     20 72 02 00 | 	long	@_fatfs_cc_v_lseek
324cc     A8 72 02 00 | 	long	@_fatfs_cc_v_ioctl
324d0     FC 72 02 00 | 	long	@_fatfs_cc_v_open
324d4     74 6B 02 00 | 	long	@_fatfs_cc_v_creat
324d8     54 6C 02 00 | 	long	@_fatfs_cc_v_opendir
324dc     C8 6C 02 00 | 	long	@_fatfs_cc_v_closedir
324e0     08 6D 02 00 | 	long	@_fatfs_cc_v_readdir
324e4     3C 6E 02 00 | 	long	@_fatfs_cc_v_stat
324e8     BC 72 02 00 | 	long	@_fatfs_cc_v_mkdir
324ec     DC 72 02 00 | 	long	@_fatfs_cc_v_rmdir
324f0     CC 72 02 00 | 	long	@_fatfs_cc_v_remove
324f4     EC 72 02 00 | 	long	@_fatfs_cc_v_rename
324f8     0C 74 02 00 | 	long	@_fatfs_cc_v_init
324fc     14 74 02 00 | 	long	@_fatfs_cc_v_deinit
32500     D0 8E 01 00 | 	long	@__system___tx
32504     10 8F 01 00 | 	long	@__system___rx
32508     78 EC 01 00 | 	long	@__system___rxtxioctl_0579
3250c     D0 EC 01 00 | 	long	@__system____dummy_flush_0580
32510     DC 73 02 00 | 	long	@_fatfs_cc_v_flush
32514                 | __heap_base
32514     00 00 00 00 
      ...             
61314     00 00 00 00 
61318     00 00 00 00 | 	long	0[48002]
6131c                 | objmem
6131c     00 00 00 00 
      ...             
708f4     00 00 00 00 
708f8     00 00 00 00 | 	long	0[15736]
708fc                 | stackspace
708fc     00 00 00 00 | 	long	0[1]
70900 100             | 	org	COG_BSS_START
70900 100             | _var01
70900 100             | 	res	1
70900 101             | _var02
70900 101             | 	res	1
70900 102             | _var03
70900 102             | 	res	1
70900 103             | _var04
70900 103             | 	res	1
70900 104             | _var05
70900 104             | 	res	1
70900 105             | _var06
70900 105             | 	res	1
70900 106             | _var07
70900 106             | 	res	1
70900 107             | _var08
70900 107             | 	res	1
70900 108             | _var09
70900 108             | 	res	1
70900 109             | arg01
70900 109             | 	res	1
70900 10a             | arg02
70900 10a             | 	res	1
70900 10b             | arg03
70900 10b             | 	res	1
70900 10c             | arg04
70900 10c             | 	res	1
70900 10d             | arg05
70900 10d             | 	res	1
70900 10e             | arg06
70900 10e             | 	res	1
70900 10f             | local01
70900 10f             | 	res	1
70900 110             | local02
70900 110             | 	res	1
70900 111             | local03
70900 111             | 	res	1
70900 112             | local04
70900 112             | 	res	1
70900 113             | local05
70900 113             | 	res	1
70900 114             | local06
70900 114             | 	res	1
70900 115             | local07
70900 115             | 	res	1
70900 116             | local08
70900 116             | 	res	1
70900 117             | local09
70900 117             | 	res	1
70900 118             | local10
70900 118             | 	res	1
70900 119             | local11
70900 119             | 	res	1
70900 11a             | local12
70900 11a             | 	res	1
70900 11b             | local13
70900 11b             | 	res	1
70900 11c             | local14
70900 11c             | 	res	1
70900 11d             | local15
70900 11d             | 	res	1
70900 11e             | local16
70900 11e             | 	res	1
70900 11f             | local17
70900 11f             | 	res	1
70900 120             | local18
70900 120             | 	res	1
70900 121             | local19
70900 121             | 	res	1
70900 122             | local20
70900 122             | 	res	1
70900 123             | local21
70900 123             | 	res	1
70900 124             | local22
70900 124             | 	res	1
70900 125             | local23
70900 125             | 	res	1
70900 126             | local24
70900 126             | 	res	1
70900 127             | local25
70900 127             | 	res	1
70900 128             | local26
70900 128             | 	res	1
70900 129             | local27
70900 129             | 	res	1
70900 12a             | local28
70900 12a             | 	res	1
70900 12b             | local29
70900 12b             | 	res	1
70900 12c             | local30
70900 12c             | 	res	1
70900 12d             | local31
70900 12d             | 	res	1
70900 12e             | local32
70900 12e             | 	res	1
70900 12f             | local33
70900 12f             | 	res	1
70900 130             | local34
70900 130             | 	res	1
70900 131             | muldiva_
70900 131             | 	res	1
70900 132             | muldivb_
70900 132             | 	res	1
70900 133             | 	fit	480
70900 133             | 
