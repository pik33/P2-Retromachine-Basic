00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic025.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 24
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 44 59 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 04 22 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed F0 1F 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 0C 10 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 F0 0E 03 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 D0 12 03 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 2C 8C 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 10 1A 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 64 AD 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 14 D5 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa CC D2 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb A4 E4 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc E8 04 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7A 00 00 FF 
00818     03 E4 05 F1 | 	add	objptr, ##62467
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7A 00 00 FF 
0082c     48 E4 85 F1 | 	sub	objptr, ##62536
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     68 86 B1 FD | 	call	#__system___waitms
0083c     7A 00 00 FF 
00840     48 E4 05 F1 | 	add	objptr, ##62536
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7A 00 00 FF 
00854     48 E4 85 F1 | 	sub	objptr, ##62536
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     40 86 B1 FD | 	call	#__system___waitms
00864     7A 00 00 FF 
00868     48 E4 05 F1 | 	add	objptr, ##62536
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7A 00 00 FF 
0087c     48 E4 85 F1 | 	sub	objptr, ##62536
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     18 86 B1 FD | 	call	#__system___waitms
0088c     7A 00 00 FF 
00890     48 E4 05 F1 | 	add	objptr, ##62536
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7A 00 00 FF 
008a4     48 E4 85 F1 | 	sub	objptr, ##62536
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     79 00 00 FF 
008d4     C0 E5 05 F1 | 	add	objptr, ##62400
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     79 00 00 FF 
00914     C8 E5 85 F1 | 	sub	objptr, ##62408
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     24 7C B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     74 7C B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     64 7C B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     79 00 00 FF 
00980     D0 E5 05 F1 | 	add	objptr, ##62416
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     79 00 00 FF 
009ac     EC E5 85 F1 | 	sub	objptr, ##62444
009b0     C8 7B B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     79 00 00 FF 
009e0     D0 E5 05 F1 | 	add	objptr, ##62416
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     79 00 00 FF 
00a08     EC E5 85 F1 | 	sub	objptr, ##62444
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     23 4A 05 F6 | 	mov	COUNT_, #35
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     50 F0 07 F1 | 	add	ptra, ##592
00a2c     55 00 00 FF 
00a30     F0 E5 05 F1 | 	add	objptr, ##44016
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     00 20 06 F6 | 	mov	local02, #0
00a50     13 00 00 FF 
00a54     58 E4 05 F1 | 	add	objptr, ##9816
00a58     F2 00 68 FC | 	wrlong	#0, objptr
00a5c     69 00 00 FF 
00a60     50 E4 85 F1 | 	sub	objptr, ##53840
00a64     00 22 06 F6 | 	mov	local03, #0
00a68                 | LR__0020
00a68                 | ' 
00a68                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a68                 | ' 
00a68                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a68                 | ' 
00a68                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a68     00 24 06 F6 | 	mov	local04, #0
00a6c     20 4E 05 F1 | 	add	fp, #32
00a70     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a74                 | LR__0021
00a74     12 27 02 F6 | 	mov	local05, local04
00a78     02 26 66 F0 | 	shl	local05, #2
00a7c     A7 26 02 F1 | 	add	local05, fp
00a80     13 01 68 FC | 	wrlong	#0, local05
00a84     01 24 06 F1 | 	add	local04, #1
00a88     7E 24 56 F2 | 	cmps	local04, #126 wc
00a8c     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a90                 | LR__0022
00a90     20 4E 85 F1 | 	sub	fp, #32
00a94                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a94     00 24 06 F6 | 	mov	local04, #0
00a98     53 00 00 FF 
00a9c     E0 E5 05 F1 | 	add	objptr, ##42976
00aa0     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aa4                 | LR__0023
00aa4     12 1F 02 F6 | 	mov	local01, local04
00aa8     03 1E 66 F0 | 	shl	local01, #3
00aac     F2 1E 02 F1 | 	add	local01, objptr
00ab0     40 01 00 FF 
00ab4     4E 17 06 F6 | 	mov	arg03, ##@LR__4277
00ab8     0F 17 62 FC | 	wrlong	arg03, local01
00abc     12 1F 02 F6 | 	mov	local01, local04
00ac0     03 1E 66 F0 | 	shl	local01, #3
00ac4     F2 28 02 F6 | 	mov	local06, objptr
00ac8     F2 1E 02 F1 | 	add	local01, objptr
00acc     00 2A 06 F6 | 	mov	local07, #0
00ad0     04 1E 06 F1 | 	add	local01, #4
00ad4     0F 01 68 FC | 	wrlong	#0, local01
00ad8     01 24 06 F1 | 	add	local04, #1
00adc     7E 24 56 F2 | 	cmps	local04, #126 wc
00ae0     C0 FF 9F CD |  if_b	jmp	#LR__0023
00ae4                 | LR__0024
00ae4     02 00 00 FF 
00ae8     10 E4 05 F1 | 	add	objptr, ##1040
00aec     F2 12 02 FB | 	rdlong	arg01, objptr
00af0     55 00 00 FF 
00af4     F0 E5 85 F1 | 	sub	objptr, ##44016
00af8     F8 A4 B1 FD | 	call	#__system__RTrim_S
00afc     FD 12 02 F6 | 	mov	arg01, result1
00b00     30 A4 B1 FD | 	call	#__system__LTrim_S
00b04     55 00 00 FF 
00b08     F0 E5 05 F1 | 	add	objptr, ##44016
00b0c     F2 FA 61 FC | 	wrlong	result1, objptr
00b10     40 01 00 FF 
00b14     4F 1F 06 F6 | 	mov	local01, ##@LR__4278
00b18     24 00 00 FF 
00b1c     90 E4 05 F1 | 	add	objptr, ##18576
00b20     F2 1E 62 FC | 	wrlong	local01, objptr
00b24     24 00 00 FF 
00b28     90 E4 85 F1 | 	sub	objptr, ##18576
00b2c     F2 12 02 FB | 	rdlong	arg01, objptr
00b30     55 00 00 FF 
00b34     F0 E5 85 F1 | 	sub	objptr, ##44016
00b38     09 2D 02 F6 | 	mov	local08, arg01
00b3c     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b40                 | LR__0025
00b40     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b44     01 2C 06 51 |  if_ne	add	local08, #1
00b48     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b4c                 | LR__0026
00b4c     09 2D 8A F1 | 	sub	local08, arg01 wz
00b50     7A 00 00 FF 
00b54     84 E4 05 F1 | 	add	objptr, ##62596
00b58     F2 2C 62 FC | 	wrlong	local08, objptr
00b5c                 | ' if l=0 then goto 101
00b5c     7A 00 00 FF 
00b60     84 E4 85 F1 | 	sub	objptr, ##62596
00b64     1C 26 90 AD |  if_e	jmp	#LR__0147
00b68     7A 00 00 FF 
00b6c     88 E4 05 F1 | 	add	objptr, ##62600
00b70     F2 00 68 FC | 	wrlong	#0, objptr
00b74                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b74                 | ' for i=1 to len(line$)
00b74     01 24 06 F6 | 	mov	local04, #1
00b78     24 00 00 FF 
00b7c     98 E4 85 F1 | 	sub	objptr, ##18584
00b80     F2 12 02 FB | 	rdlong	arg01, objptr
00b84     55 00 00 FF 
00b88     F0 E5 85 F1 | 	sub	objptr, ##44016
00b8c     09 2D 02 F6 | 	mov	local08, arg01
00b90     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b94                 | LR__0027
00b94     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b98     01 2C 06 51 |  if_ne	add	local08, #1
00b9c     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba0                 | LR__0028
00ba0     09 2D 82 F1 | 	sub	local08, arg01
00ba4     16 2F 02 F6 | 	mov	local09, local08
00ba8     01 2E 06 F1 | 	add	local09, #1
00bac                 | LR__0029
00bac     17 25 52 F2 | 	cmps	local04, local09 wc
00bb0     00 01 90 3D |  if_ae	jmp	#LR__0032
00bb4                 | ' 
00bb4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bb4     55 00 00 FF 
00bb8     F0 E5 05 F1 | 	add	objptr, ##44016
00bbc     F2 12 02 FB | 	rdlong	arg01, objptr
00bc0     55 00 00 FF 
00bc4     F0 E5 85 F1 | 	sub	objptr, ##44016
00bc8     12 15 02 F6 | 	mov	arg02, local04
00bcc     01 16 06 F6 | 	mov	arg03, #1
00bd0     04 A1 B1 FD | 	call	#__system__Mid_S
00bd4     FD 12 02 F6 | 	mov	arg01, result1
00bd8     40 01 00 FF 
00bdc     50 15 06 F6 | 	mov	arg02, ##@LR__4279
00be0     F4 7F B1 FD | 	call	#__system___string_cmp
00be4     00 FA 0D F2 | 	cmp	result1, #0 wz
00be8     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bec     7A 00 00 FF 
00bf0     88 E4 05 F1 | 	add	objptr, ##62600
00bf4     F2 26 0A FB | 	rdlong	local05, objptr wz
00bf8     7A 00 00 FF 
00bfc     88 E4 85 F1 | 	sub	objptr, ##62600
00c00     7A 00 00 AF 
00c04     88 E4 05 A1 |  if_e	add	objptr, ##62600
00c08     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c0c     7A 00 00 AF 
00c10     88 E4 85 A1 |  if_e	sub	objptr, ##62600
00c14     60 00 90 AD |  if_e	jmp	#LR__0031
00c18                 | LR__0030
00c18     55 00 00 FF 
00c1c     F0 E5 05 F1 | 	add	objptr, ##44016
00c20     F2 12 02 FB | 	rdlong	arg01, objptr
00c24     55 00 00 FF 
00c28     F0 E5 85 F1 | 	sub	objptr, ##44016
00c2c     12 15 02 F6 | 	mov	arg02, local04
00c30     01 16 06 F6 | 	mov	arg03, #1
00c34     A0 A0 B1 FD | 	call	#__system__Mid_S
00c38     FD 12 02 F6 | 	mov	arg01, result1
00c3c     40 01 00 FF 
00c40     52 15 06 F6 | 	mov	arg02, ##@LR__4280
00c44     90 7F B1 FD | 	call	#__system___string_cmp
00c48     00 FA 0D F2 | 	cmp	result1, #0 wz
00c4c     7A 00 00 AF 
00c50     88 E4 05 A1 |  if_e	add	objptr, ##62600
00c54     F2 26 02 AB |  if_e	rdlong	local05, objptr
00c58     7A 00 00 AF 
00c5c     88 E4 85 A1 |  if_e	sub	objptr, ##62600
00c60     01 26 0E A2 |  if_e	cmp	local05, #1 wz
00c64     7A 00 00 AF 
00c68     88 E4 05 A1 |  if_e	add	objptr, ##62600
00c6c     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c70     7A 00 00 AF 
00c74     88 E4 85 A1 |  if_e	sub	objptr, ##62600
00c78                 | LR__0031
00c78     12 1F 02 F6 | 	mov	local01, local04
00c7c     03 1E 66 F0 | 	shl	local01, #3
00c80     53 00 00 FF 
00c84     E0 E5 05 F1 | 	add	objptr, ##42976
00c88     F2 28 02 F6 | 	mov	local06, objptr
00c8c     F2 1E 02 F1 | 	add	local01, objptr
00c90     26 00 00 FF 
00c94     A8 E4 05 F1 | 	add	objptr, ##19624
00c98     F2 2A 02 FB | 	rdlong	local07, objptr
00c9c     7A 00 00 FF 
00ca0     88 E4 85 F1 | 	sub	objptr, ##62600
00ca4     04 1E 06 F1 | 	add	local01, #4
00ca8     0F 2B 62 FC | 	wrlong	local07, local01
00cac     01 24 06 F1 | 	add	local04, #1
00cb0     F8 FE 9F FD | 	jmp	#LR__0029
00cb4                 | LR__0032
00cb4     01 24 06 F6 | 	mov	local04, #1
00cb8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cb8                 | LR__0033
00cb8     55 00 00 FF 
00cbc     F0 E5 05 F1 | 	add	objptr, ##44016
00cc0     F2 12 02 FB | 	rdlong	arg01, objptr
00cc4     55 00 00 FF 
00cc8     F0 E5 85 F1 | 	sub	objptr, ##44016
00ccc     12 15 02 F6 | 	mov	arg02, local04
00cd0     01 16 06 F6 | 	mov	arg03, #1
00cd4     00 A0 B1 FD | 	call	#__system__Mid_S
00cd8     FD 12 02 F6 | 	mov	arg01, result1
00cdc     40 01 00 FF 
00ce0     54 31 06 F6 | 	mov	local10, ##@LR__4281
00ce4     18 15 02 F6 | 	mov	arg02, local10
00ce8     EC 7E B1 FD | 	call	#__system___string_cmp
00cec     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf0     34 00 90 5D |  if_ne	jmp	#LR__0034
00cf4     12 29 02 F6 | 	mov	local06, local04
00cf8     03 28 66 F0 | 	shl	local06, #3
00cfc     53 00 00 FF 
00d00     E0 E5 05 F1 | 	add	objptr, ##42976
00d04     F2 2A 02 F6 | 	mov	local07, objptr
00d08     F2 28 02 F1 | 	add	local06, objptr
00d0c     04 28 06 F1 | 	add	local06, #4
00d10     14 33 02 FB | 	rdlong	local11, local06
00d14     04 28 86 F1 | 	sub	local06, #4
00d18     19 35 0A F6 | 	mov	local12, local11 wz
00d1c     53 00 00 FF 
00d20     E0 E5 85 F1 | 	sub	objptr, ##42976
00d24     24 00 90 AD |  if_e	jmp	#LR__0035
00d28                 | LR__0034
00d28     7A 00 00 FF 
00d2c     84 E4 05 F1 | 	add	objptr, ##62596
00d30     F2 36 02 FB | 	rdlong	local13, objptr
00d34     7A 00 00 FF 
00d38     84 E4 85 F1 | 	sub	objptr, ##62596
00d3c     1B 39 02 F6 | 	mov	local14, local13
00d40     1C 25 52 F2 | 	cmps	local04, local14 wc
00d44     01 24 06 C1 |  if_b	add	local04, #1
00d48     6C FF 9F CD |  if_b	jmp	#LR__0033
00d4c                 | LR__0035
00d4c                 | ' 
00d4c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d4c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d4c     7A 00 00 FF 
00d50     84 E4 05 F1 | 	add	objptr, ##62596
00d54     F2 1E 02 FB | 	rdlong	local01, objptr
00d58     7A 00 00 FF 
00d5c     84 E4 85 F1 | 	sub	objptr, ##62596
00d60     0F 25 52 F2 | 	cmps	local04, local01 wc
00d64     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d68     55 00 00 FF 
00d6c     F0 E5 05 F1 | 	add	objptr, ##44016
00d70     F2 2A 02 FB | 	rdlong	local07, objptr
00d74     55 00 00 FF 
00d78     F0 E5 85 F1 | 	sub	objptr, ##44016
00d7c     15 13 02 F6 | 	mov	arg01, local07
00d80     09 2D 02 F6 | 	mov	local08, arg01
00d84     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d88                 | LR__0036
00d88     16 FB C9 FA | 	rdbyte	result1, local08 wz
00d8c     01 2C 06 51 |  if_ne	add	local08, #1
00d90     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d94                 | LR__0037
00d94     09 2D 82 F1 | 	sub	local08, arg01
00d98     16 15 02 F6 | 	mov	arg02, local08
00d9c     12 15 82 F1 | 	sub	arg02, local04
00da0     15 13 02 F6 | 	mov	arg01, local07
00da4     A0 9E B1 FD | 	call	#__system__Right_S
00da8     FD 12 02 F6 | 	mov	arg01, result1
00dac     44 A2 B1 FD | 	call	#__system__RTrim_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     7C A1 B1 FD | 	call	#__system__LTrim_S
00db8     7A 00 00 FF 
00dbc     8C E4 05 F1 | 	add	objptr, ##62604
00dc0     F2 FA 61 FC | 	wrlong	result1, objptr
00dc4     24 00 00 FF 
00dc8     9C E4 85 F1 | 	sub	objptr, ##18588
00dcc     F2 12 02 FB | 	rdlong	arg01, objptr
00dd0     55 00 00 FF 
00dd4     F0 E5 85 F1 | 	sub	objptr, ##44016
00dd8     01 24 86 F1 | 	sub	local04, #1
00ddc     12 15 02 F6 | 	mov	arg02, local04
00de0     DC 9D B1 FD | 	call	#__system__Left_S
00de4     FD 12 02 F6 | 	mov	arg01, result1
00de8     08 A2 B1 FD | 	call	#__system__RTrim_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     40 A1 B1 FD | 	call	#__system__LTrim_S
00df4     55 00 00 FF 
00df8     F0 E5 05 F1 | 	add	objptr, ##44016
00dfc     F2 FA 61 FC | 	wrlong	result1, objptr
00e00     55 00 00 FF 
00e04     F0 E5 85 F1 | 	sub	objptr, ##44016
00e08     1C 00 90 FD | 	jmp	#LR__0039
00e0c                 | LR__0038
00e0c     40 01 00 FF 
00e10     56 1F 06 F6 | 	mov	local01, ##@LR__4282
00e14     7A 00 00 FF 
00e18     8C E4 05 F1 | 	add	objptr, ##62604
00e1c     F2 1E 62 FC | 	wrlong	local01, objptr
00e20     7A 00 00 FF 
00e24     8C E4 85 F1 | 	sub	objptr, ##62604
00e28                 | LR__0039
00e28                 | ' 'print "line$=";line$
00e28                 | ' 'print "rest$=";rest$
00e28                 | ' 
00e28                 | ' 
00e28                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e28     55 00 00 FF 
00e2c     F8 E5 05 F1 | 	add	objptr, ##44024
00e30     F2 1E 02 FB | 	rdlong	local01, objptr
00e34     55 00 00 FF 
00e38     F8 E5 85 F1 | 	sub	objptr, ##44024
00e3c     FF FF 7F FF 
00e40     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e44     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e48     7A 00 00 FF 
00e4c     8C E4 05 F1 | 	add	objptr, ##62604
00e50     F2 12 02 FB | 	rdlong	arg01, objptr
00e54     7A 00 00 FF 
00e58     8C E4 85 F1 | 	sub	objptr, ##62604
00e5c     40 01 00 FF 
00e60     57 15 06 F6 | 	mov	arg02, ##@LR__4283
00e64     70 7D B1 FD | 	call	#__system___string_cmp
00e68     00 FA 0D F2 | 	cmp	result1, #0 wz
00e6c     55 00 00 5F 
00e70     F8 E5 05 51 |  if_ne	add	objptr, ##44024
00e74     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e78     55 00 00 5F 
00e7c     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
00e80     08 01 90 5D |  if_ne	jmp	#LR__0044
00e84                 | LR__0040
00e84                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e84     55 00 00 FF 
00e88     F8 E5 05 F1 | 	add	objptr, ##44024
00e8c     F2 1E 02 FB | 	rdlong	local01, objptr
00e90     55 00 00 FF 
00e94     F8 E5 85 F1 | 	sub	objptr, ##44024
00e98     FF FF 7F FF 
00e9c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea0     3C 00 90 5D |  if_ne	jmp	#LR__0041
00ea4     7A 00 00 FF 
00ea8     8C E4 05 F1 | 	add	objptr, ##62604
00eac     F2 12 02 FB | 	rdlong	arg01, objptr
00eb0     7A 00 00 FF 
00eb4     8C E4 85 F1 | 	sub	objptr, ##62604
00eb8     40 01 00 FF 
00ebc     58 15 06 F6 | 	mov	arg02, ##@LR__4284
00ec0     14 7D B1 FD | 	call	#__system___string_cmp
00ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
00ec8     55 00 00 AF 
00ecc     F8 E5 05 A1 |  if_e	add	objptr, ##44024
00ed0     F2 06 68 AC |  if_e	wrlong	#3, objptr
00ed4     55 00 00 AF 
00ed8     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
00edc     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee0                 | LR__0041
00ee0                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee0     55 00 00 FF 
00ee4     F8 E5 05 F1 | 	add	objptr, ##44024
00ee8     F2 1E 02 FB | 	rdlong	local01, objptr
00eec     55 00 00 FF 
00ef0     F8 E5 85 F1 | 	sub	objptr, ##44024
00ef4     04 1E 0E F2 | 	cmp	local01, #4 wz
00ef8     3C 00 90 5D |  if_ne	jmp	#LR__0042
00efc     7A 00 00 FF 
00f00     8C E4 05 F1 | 	add	objptr, ##62604
00f04     F2 12 02 FB | 	rdlong	arg01, objptr
00f08     7A 00 00 FF 
00f0c     8C E4 85 F1 | 	sub	objptr, ##62604
00f10     40 01 00 FF 
00f14     59 15 06 F6 | 	mov	arg02, ##@LR__4285
00f18     BC 7C B1 FD | 	call	#__system___string_cmp
00f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f20     55 00 00 5F 
00f24     F8 E5 05 51 |  if_ne	add	objptr, ##44024
00f28     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f2c     55 00 00 5F 
00f30     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
00f34     54 00 90 5D |  if_ne	jmp	#LR__0044
00f38                 | LR__0042
00f38                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f38     55 00 00 FF 
00f3c     F8 E5 05 F1 | 	add	objptr, ##44024
00f40     F2 1E 02 FB | 	rdlong	local01, objptr
00f44     55 00 00 FF 
00f48     F8 E5 85 F1 | 	sub	objptr, ##44024
00f4c     04 1E 0E F2 | 	cmp	local01, #4 wz
00f50     38 00 90 5D |  if_ne	jmp	#LR__0043
00f54     7A 00 00 FF 
00f58     8C E4 05 F1 | 	add	objptr, ##62604
00f5c     F2 12 02 FB | 	rdlong	arg01, objptr
00f60     7A 00 00 FF 
00f64     8C E4 85 F1 | 	sub	objptr, ##62604
00f68     40 01 00 FF 
00f6c     5A 15 06 F6 | 	mov	arg02, ##@LR__4286
00f70     64 7C B1 FD | 	call	#__system___string_cmp
00f74     00 FA 0D F2 | 	cmp	result1, #0 wz
00f78     55 00 00 AF 
00f7c     F8 E5 05 A1 |  if_e	add	objptr, ##44024
00f80     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f84     55 00 00 AF 
00f88     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
00f8c                 | LR__0043
00f8c                 | LR__0044
00f8c     20 4E 05 F1 | 	add	fp, #32
00f90     A7 00 68 FC | 	wrlong	#0, fp
00f94     20 4E 85 F1 | 	sub	fp, #32
00f98     00 24 06 F6 | 	mov	local04, #0
00f9c     01 3A 06 F6 | 	mov	local15, #1
00fa0                 | ' 
00fa0                 | ' ' 1b: find separators
00fa0                 | ' 
00fa0                 | ' 107
00fa0                 | ' separators(0)=0
00fa0                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa0                 | LR__0045
00fa0     01 24 06 F1 | 	add	local04, #1
00fa4     55 00 00 FF 
00fa8     F0 E5 05 F1 | 	add	objptr, ##44016
00fac     F2 12 02 FB | 	rdlong	arg01, objptr
00fb0     55 00 00 FF 
00fb4     F0 E5 85 F1 | 	sub	objptr, ##44016
00fb8     12 15 02 F6 | 	mov	arg02, local04
00fbc     01 16 06 F6 | 	mov	arg03, #1
00fc0     14 9D B1 FD | 	call	#__system__Mid_S
00fc4     7A 00 00 FF 
00fc8     90 E4 05 F1 | 	add	objptr, ##62608
00fcc     F2 FA 61 FC | 	wrlong	result1, objptr
00fd0                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd0     FD 12 02 F6 | 	mov	arg01, result1
00fd4     7A 00 00 FF 
00fd8     90 E4 85 F1 | 	sub	objptr, ##62608
00fdc     B0 24 B0 FD | 	call	#_isseparator
00fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
00fe4     1C 00 90 AD |  if_e	jmp	#LR__0046
00fe8     1D 27 02 F6 | 	mov	local05, local15
00fec     02 26 66 F0 | 	shl	local05, #2
00ff0     20 4E 05 F1 | 	add	fp, #32
00ff4     A7 26 02 F1 | 	add	local05, fp
00ff8     13 25 62 FC | 	wrlong	local04, local05
00ffc     01 3A 06 F1 | 	add	local15, #1
01000     20 4E 85 F1 | 	sub	fp, #32
01004                 | LR__0046
01004     7A 00 00 FF 
01008     84 E4 05 F1 | 	add	objptr, ##62596
0100c     F2 1E 02 FB | 	rdlong	local01, objptr
01010     7A 00 00 FF 
01014     84 E4 85 F1 | 	sub	objptr, ##62596
01018     0F 25 5A F2 | 	cmps	local04, local01 wcz
0101c     80 FF 9F ED |  if_be	jmp	#LR__0045
01020     1D 27 02 F6 | 	mov	local05, local15
01024     02 26 66 F0 | 	shl	local05, #2
01028     20 4E 05 F1 | 	add	fp, #32
0102c     A7 26 02 F1 | 	add	local05, fp
01030     13 25 62 FC | 	wrlong	local04, local05
01034     00 3C 06 F6 | 	mov	local16, #0
01038                 | ' for i=0 to j-1 
01038     00 24 06 F6 | 	mov	local04, #0
0103c     1D 3F 02 F6 | 	mov	local17, local15
01040     20 4E 85 F1 | 	sub	fp, #32
01044                 | LR__0047
01044     1F 25 52 F2 | 	cmps	local04, local17 wc
01048     88 01 90 3D |  if_ae	jmp	#LR__0051
0104c     12 27 02 F6 | 	mov	local05, local04
01050     02 26 66 F0 | 	shl	local05, #2
01054     20 4E 05 F1 | 	add	fp, #32
01058     A7 26 02 F1 | 	add	local05, fp
0105c     13 29 02 FB | 	rdlong	local06, local05
01060     7A 00 00 FF 
01064     98 E4 05 F1 | 	add	objptr, ##62616
01068     F2 28 62 FC | 	wrlong	local06, objptr
0106c     12 27 02 F6 | 	mov	local05, local04
01070     01 26 06 F1 | 	add	local05, #1
01074     02 26 66 F0 | 	shl	local05, #2
01078     A7 30 02 F6 | 	mov	local10, fp
0107c     A7 26 02 F1 | 	add	local05, fp
01080     13 29 02 FB | 	rdlong	local06, local05
01084     04 E4 05 F1 | 	add	objptr, #4
01088     F2 28 62 FC | 	wrlong	local06, objptr
0108c                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
0108c     04 E4 85 F1 | 	sub	objptr, #4
01090     F2 1E 02 FB | 	rdlong	local01, objptr
01094     7A 00 00 FF 
01098     98 E4 85 F1 | 	sub	objptr, ##62616
0109c     01 1E 56 F2 | 	cmps	local01, #1 wc
010a0     20 4E 85 F1 | 	sub	fp, #32
010a4     84 00 90 CD |  if_b	jmp	#LR__0049
010a8     55 00 00 FF 
010ac     F0 E5 05 F1 | 	add	objptr, ##44016
010b0     F2 12 02 FB | 	rdlong	arg01, objptr
010b4     24 00 00 FF 
010b8     A8 E4 05 F1 | 	add	objptr, ##18600
010bc     F2 14 02 FB | 	rdlong	arg02, objptr
010c0     7A 00 00 FF 
010c4     98 E4 85 F1 | 	sub	objptr, ##62616
010c8     01 16 06 F6 | 	mov	arg03, #1
010cc     08 9C B1 FD | 	call	#__system__Mid_S
010d0     7A 00 00 FF 
010d4     A0 E4 05 F1 | 	add	objptr, ##62624
010d8     F2 FA 61 FC | 	wrlong	result1, objptr
010dc     7A 00 00 FF 
010e0     A0 E4 85 F1 | 	sub	objptr, ##62624
010e4     FD 12 02 F6 | 	mov	arg01, result1
010e8     40 01 00 FF 
010ec     5B 15 06 F6 | 	mov	arg02, ##@LR__4287
010f0     E4 7A B1 FD | 	call	#__system___string_cmp
010f4     00 FA 0D F2 | 	cmp	result1, #0 wz
010f8     30 00 90 AD |  if_e	jmp	#LR__0048
010fc     1E 31 02 F6 | 	mov	local10, local16
01100     03 30 66 F0 | 	shl	local10, #3
01104     53 00 00 FF 
01108     E0 E5 05 F1 | 	add	objptr, ##42976
0110c     F2 30 02 F1 | 	add	local10, objptr
01110     26 00 00 FF 
01114     C0 E4 05 F1 | 	add	objptr, ##19648
01118     F2 2A 02 FB | 	rdlong	local07, objptr
0111c     7A 00 00 FF 
01120     A0 E4 85 F1 | 	sub	objptr, ##62624
01124     18 2B 62 FC | 	wrlong	local07, local10
01128     01 3C 06 F1 | 	add	local16, #1
0112c                 | LR__0048
0112c                 | LR__0049
0112c     55 00 00 FF 
01130     F0 E5 05 F1 | 	add	objptr, ##44016
01134     F2 12 02 FB | 	rdlong	arg01, objptr
01138     24 00 00 FF 
0113c     A8 E4 05 F1 | 	add	objptr, ##18600
01140     F2 14 02 FB | 	rdlong	arg02, objptr
01144     01 14 06 F1 | 	add	arg02, #1
01148     04 E4 05 F1 | 	add	objptr, #4
0114c     F2 16 02 FB | 	rdlong	arg03, objptr
01150     04 E4 85 F1 | 	sub	objptr, #4
01154     F2 32 02 FB | 	rdlong	local11, objptr
01158     7A 00 00 FF 
0115c     98 E4 85 F1 | 	sub	objptr, ##62616
01160     19 35 02 F6 | 	mov	local12, local11
01164     1A 17 82 F1 | 	sub	arg03, local12
01168     01 16 86 F1 | 	sub	arg03, #1
0116c     68 9B B1 FD | 	call	#__system__Mid_S
01170     7A 00 00 FF 
01174     A0 E4 05 F1 | 	add	objptr, ##62624
01178     F2 FA 61 FC | 	wrlong	result1, objptr
0117c     7A 00 00 FF 
01180     A0 E4 85 F1 | 	sub	objptr, ##62624
01184     FD 12 02 F6 | 	mov	arg01, result1
01188     40 01 00 FF 
0118c     5C 15 06 F6 | 	mov	arg02, ##@LR__4288
01190     44 7A B1 FD | 	call	#__system___string_cmp
01194     00 FA 0D F2 | 	cmp	result1, #0 wz
01198     30 00 90 AD |  if_e	jmp	#LR__0050
0119c     1E 31 02 F6 | 	mov	local10, local16
011a0     03 30 66 F0 | 	shl	local10, #3
011a4     53 00 00 FF 
011a8     E0 E5 05 F1 | 	add	objptr, ##42976
011ac     F2 30 02 F1 | 	add	local10, objptr
011b0     26 00 00 FF 
011b4     C0 E4 05 F1 | 	add	objptr, ##19648
011b8     F2 2A 02 FB | 	rdlong	local07, objptr
011bc     7A 00 00 FF 
011c0     A0 E4 85 F1 | 	sub	objptr, ##62624
011c4     18 2B 62 FC | 	wrlong	local07, local10
011c8     01 3C 06 F1 | 	add	local16, #1
011cc                 | LR__0050
011cc     01 24 06 F1 | 	add	local04, #1
011d0     70 FE 9F FD | 	jmp	#LR__0047
011d4                 | LR__0051
011d4     00 24 06 F6 | 	mov	local04, #0
011d8                 | ' 
011d8                 | ' ' 1d : find strings
011d8                 | ' 
011d8                 | ' i=0
011d8                 | ' do
011d8                 | LR__0052
011d8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011d8     12 29 02 F6 | 	mov	local06, local04
011dc     03 28 66 F0 | 	shl	local06, #3
011e0     53 00 00 FF 
011e4     E0 E5 05 F1 | 	add	objptr, ##42976
011e8     F2 28 02 F1 | 	add	local06, objptr
011ec     14 13 02 FB | 	rdlong	arg01, local06
011f0     40 01 00 FF 
011f4     5D 15 06 F6 | 	mov	arg02, ##@LR__4289
011f8     53 00 00 FF 
011fc     E0 E5 85 F1 | 	sub	objptr, ##42976
01200     D4 79 B1 FD | 	call	#__system___string_cmp
01204     00 FA 0D F2 | 	cmp	result1, #0 wz
01208     01 24 06 51 |  if_ne	add	local04, #1
0120c     50 01 90 5D |  if_ne	jmp	#LR__0057
01210     12 41 02 F6 | 	mov	local18, local04
01214                 | LR__0053
01214     12 31 02 F6 | 	mov	local10, local04
01218     01 30 06 F1 | 	add	local10, #1
0121c     03 30 66 F0 | 	shl	local10, #3
01220     53 00 00 FF 
01224     E0 E5 05 F1 | 	add	objptr, ##42976
01228     F2 30 02 F1 | 	add	local10, objptr
0122c     18 33 02 FB | 	rdlong	local11, local10
01230     26 00 00 FF 
01234     C0 E4 05 F1 | 	add	objptr, ##19648
01238     F2 32 62 FC | 	wrlong	local11, objptr
0123c     20 31 02 F6 | 	mov	local10, local18
01240     03 30 66 F0 | 	shl	local10, #3
01244     26 00 00 FF 
01248     C0 E4 85 F1 | 	sub	objptr, ##19648
0124c     F2 30 02 F1 | 	add	local10, objptr
01250     20 39 02 F6 | 	mov	local14, local18
01254     03 38 66 F0 | 	shl	local14, #3
01258     F2 38 02 F1 | 	add	local14, objptr
0125c     1C 13 02 FB | 	rdlong	arg01, local14
01260     53 00 00 FF 
01264     E0 E5 85 F1 | 	sub	objptr, ##42976
01268     19 35 02 F6 | 	mov	local12, local11
0126c     1A 15 02 F6 | 	mov	arg02, local12
01270     98 79 B1 FD | 	call	#__system___string_concat
01274     18 FB 61 FC | 	wrlong	result1, local10
01278     12 3B 02 F6 | 	mov	local15, local04
0127c     01 3A 06 F1 | 	add	local15, #1
01280     1E 43 02 F6 | 	mov	local19, local16
01284     01 42 06 F1 | 	add	local19, #1
01288     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
0128c                 | LR__0054
0128c     21 3B 52 F2 | 	cmps	local15, local19 wc
01290     70 00 90 3D |  if_ae	jmp	#LR__0056
01294     1D 29 02 F6 | 	mov	local06, local15
01298     01 28 06 F1 | 	add	local06, #1
0129c     03 28 66 F0 | 	shl	local06, #3
012a0     53 00 00 FF 
012a4     E0 E5 05 F1 | 	add	objptr, ##42976
012a8     F2 28 02 F1 | 	add	local06, objptr
012ac     14 1F 02 FB | 	rdlong	local01, local06
012b0     1D 2B 02 F6 | 	mov	local07, local15
012b4     01 2A 06 F1 | 	add	local07, #1
012b8     03 2A 66 F0 | 	shl	local07, #3
012bc     F2 2A 02 F1 | 	add	local07, objptr
012c0     04 2A 06 F1 | 	add	local07, #4
012c4     15 27 02 FB | 	rdlong	local05, local07
012c8     1D 2B 02 F6 | 	mov	local07, local15
012cc     03 2A 66 F0 | 	shl	local07, #3
012d0     F2 34 02 F6 | 	mov	local12, objptr
012d4     F2 2A 02 F1 | 	add	local07, objptr
012d8     15 1F 62 FC | 	wrlong	local01, local07
012dc     1D 33 02 F6 | 	mov	local11, local15
012e0     19 37 02 F6 | 	mov	local13, local11
012e4     03 36 66 F0 | 	shl	local13, #3
012e8     F2 36 02 F1 | 	add	local13, objptr
012ec     04 36 06 F1 | 	add	local13, #4
012f0     1B 27 62 FC | 	wrlong	local05, local13
012f4     01 3A 06 F1 | 	add	local15, #1
012f8     53 00 00 FF 
012fc     E0 E5 85 F1 | 	sub	objptr, ##42976
01300     88 FF 9F FD | 	jmp	#LR__0054
01304                 | LR__0055
01304                 | LR__0056
01304     01 3C 86 F1 | 	sub	local16, #1
01308     7A 00 00 FF 
0130c     A0 E4 05 F1 | 	add	objptr, ##62624
01310     F2 12 02 FB | 	rdlong	arg01, objptr
01314     7A 00 00 FF 
01318     A0 E4 85 F1 | 	sub	objptr, ##62624
0131c     40 01 00 FF 
01320     5F 15 06 F6 | 	mov	arg02, ##@LR__4290
01324     B0 78 B1 FD | 	call	#__system___string_cmp
01328     00 FA 0D F2 | 	cmp	result1, #0 wz
0132c     1E 25 52 52 |  if_ne	cmps	local04, local16 wc
01330     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
01334                 | '   if p$<>"""" then k+=1:i+=1
01334     7A 00 00 FF 
01338     A0 E4 05 F1 | 	add	objptr, ##62624
0133c     F2 12 02 FB | 	rdlong	arg01, objptr
01340     7A 00 00 FF 
01344     A0 E4 85 F1 | 	sub	objptr, ##62624
01348     40 01 00 FF 
0134c     61 15 06 F6 | 	mov	arg02, ##@LR__4291
01350     84 78 B1 FD | 	call	#__system___string_cmp
01354     00 FA 0D F2 | 	cmp	result1, #0 wz
01358     01 3C 06 51 |  if_ne	add	local16, #1
0135c     01 24 06 51 |  if_ne	add	local04, #1
01360                 | LR__0057
01360     1E 25 52 F2 | 	cmps	local04, local16 wc
01364     70 FE 9F CD |  if_b	jmp	#LR__0052
01368     00 24 06 F6 | 	mov	local04, #0
0136c                 | ' 
0136c                 | ' ' 1e : concatenate strings if "" detected between
0136c                 | '  
0136c                 | ' i=0 : do
0136c                 | LR__0058
0136c                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0136c     12 29 02 F6 | 	mov	local06, local04
01370     03 28 66 F0 | 	shl	local06, #3
01374     53 00 00 FF 
01378     E0 E5 05 F1 | 	add	objptr, ##42976
0137c     F2 28 02 F1 | 	add	local06, objptr
01380     14 13 02 FB | 	rdlong	arg01, local06
01384     01 14 06 F6 | 	mov	arg02, #1
01388     53 00 00 FF 
0138c     E0 E5 85 F1 | 	sub	objptr, ##42976
01390     B4 98 B1 FD | 	call	#__system__Right_S
01394     FD 12 02 F6 | 	mov	arg01, result1
01398     40 01 00 FF 
0139c     63 15 06 F6 | 	mov	arg02, ##@LR__4292
013a0     34 78 B1 FD | 	call	#__system___string_cmp
013a4     00 FA 0D F2 | 	cmp	result1, #0 wz
013a8     78 01 90 5D |  if_ne	jmp	#LR__0064
013ac     12 2B 02 F6 | 	mov	local07, local04
013b0     01 2A 06 F1 | 	add	local07, #1
013b4     03 2A 66 F0 | 	shl	local07, #3
013b8     53 00 00 FF 
013bc     E0 E5 05 F1 | 	add	objptr, ##42976
013c0     F2 34 02 F6 | 	mov	local12, objptr
013c4     F2 2A 02 F1 | 	add	local07, objptr
013c8     15 13 02 FB | 	rdlong	arg01, local07
013cc     01 14 06 F6 | 	mov	arg02, #1
013d0     53 00 00 FF 
013d4     E0 E5 85 F1 | 	sub	objptr, ##42976
013d8     E4 97 B1 FD | 	call	#__system__Left_S
013dc     FD 12 02 F6 | 	mov	arg01, result1
013e0     40 01 00 FF 
013e4     65 15 06 F6 | 	mov	arg02, ##@LR__4293
013e8     EC 77 B1 FD | 	call	#__system___string_cmp
013ec     00 FA 0D F2 | 	cmp	result1, #0 wz
013f0     30 01 90 5D |  if_ne	jmp	#LR__0064
013f4     12 31 02 F6 | 	mov	local10, local04
013f8     03 30 66 F0 | 	shl	local10, #3
013fc     53 00 00 FF 
01400     E0 E5 05 F1 | 	add	objptr, ##42976
01404     F2 30 02 F1 | 	add	local10, objptr
01408     12 39 02 F6 | 	mov	local14, local04
0140c     03 38 66 F0 | 	shl	local14, #3
01410     F2 38 02 F1 | 	add	local14, objptr
01414     1C 2B 02 FB | 	rdlong	local07, local14
01418     12 37 02 F6 | 	mov	local13, local04
0141c     01 36 06 F1 | 	add	local13, #1
01420     03 36 66 F0 | 	shl	local13, #3
01424     F2 36 02 F1 | 	add	local13, objptr
01428     1B 35 02 FB | 	rdlong	local12, local13
0142c     12 45 02 F6 | 	mov	local20, local04
01430     01 44 06 F1 | 	add	local20, #1
01434     22 47 02 F6 | 	mov	local21, local20
01438     03 46 66 F0 | 	shl	local21, #3
0143c     F2 48 02 F6 | 	mov	local22, objptr
01440     F2 46 02 F1 | 	add	local21, objptr
01444     23 13 02 FB | 	rdlong	arg01, local21
01448     53 00 00 FF 
0144c     E0 E5 85 F1 | 	sub	objptr, ##42976
01450     09 2D 02 F6 | 	mov	local08, arg01
01454     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01458                 | LR__0059
01458     16 FB C9 FA | 	rdbyte	result1, local08 wz
0145c     01 2C 06 51 |  if_ne	add	local08, #1
01460     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
01464                 | LR__0060
01464     09 2D 82 F1 | 	sub	local08, arg01
01468     16 33 02 F6 | 	mov	local11, local08
0146c     01 32 86 F1 | 	sub	local11, #1
01470     1A 13 02 F6 | 	mov	arg01, local12
01474     19 15 02 F6 | 	mov	arg02, local11
01478     CC 97 B1 FD | 	call	#__system__Right_S
0147c     FD 34 02 F6 | 	mov	local12, result1
01480     15 13 02 F6 | 	mov	arg01, local07
01484     1A 15 02 F6 | 	mov	arg02, local12
01488     80 77 B1 FD | 	call	#__system___string_concat
0148c     18 FB 61 FC | 	wrlong	result1, local10
01490                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01490     12 3B 02 F6 | 	mov	local15, local04
01494     01 3A 06 F1 | 	add	local15, #1
01498     1E 4B 02 F6 | 	mov	local23, local16
0149c     01 4A 06 F1 | 	add	local23, #1
014a0     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014a4                 | LR__0061
014a4     25 3B 52 F2 | 	cmps	local15, local23 wc
014a8     70 00 90 3D |  if_ae	jmp	#LR__0063
014ac     1D 29 02 F6 | 	mov	local06, local15
014b0     01 28 06 F1 | 	add	local06, #1
014b4     03 28 66 F0 | 	shl	local06, #3
014b8     53 00 00 FF 
014bc     E0 E5 05 F1 | 	add	objptr, ##42976
014c0     F2 28 02 F1 | 	add	local06, objptr
014c4     14 1F 02 FB | 	rdlong	local01, local06
014c8     1D 2B 02 F6 | 	mov	local07, local15
014cc     01 2A 06 F1 | 	add	local07, #1
014d0     03 2A 66 F0 | 	shl	local07, #3
014d4     F2 2A 02 F1 | 	add	local07, objptr
014d8     04 2A 06 F1 | 	add	local07, #4
014dc     15 27 02 FB | 	rdlong	local05, local07
014e0     1D 2B 02 F6 | 	mov	local07, local15
014e4     03 2A 66 F0 | 	shl	local07, #3
014e8     F2 34 02 F6 | 	mov	local12, objptr
014ec     F2 2A 02 F1 | 	add	local07, objptr
014f0     15 1F 62 FC | 	wrlong	local01, local07
014f4     1D 33 02 F6 | 	mov	local11, local15
014f8     19 37 02 F6 | 	mov	local13, local11
014fc     03 36 66 F0 | 	shl	local13, #3
01500     F2 36 02 F1 | 	add	local13, objptr
01504     04 36 06 F1 | 	add	local13, #4
01508     1B 27 62 FC | 	wrlong	local05, local13
0150c     01 3A 06 F1 | 	add	local15, #1
01510     53 00 00 FF 
01514     E0 E5 85 F1 | 	sub	objptr, ##42976
01518     88 FF 9F FD | 	jmp	#LR__0061
0151c                 | LR__0062
0151c                 | LR__0063
0151c     01 24 86 F1 | 	sub	local04, #1
01520     01 3C 86 F1 | 	sub	local16, #1
01524                 | LR__0064
01524     01 24 06 F1 | 	add	local04, #1
01528     1E 25 52 F2 | 	cmps	local04, local16 wc
0152c     3C FE 9F CD |  if_b	jmp	#LR__0058
01530     00 24 06 F6 | 	mov	local04, #0
01534                 | '  
01534                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
01534                 | '  
01534                 | ' i=0 : do
01534                 | LR__0065
01534     12 31 02 F6 | 	mov	local10, local04
01538     03 30 66 F0 | 	shl	local10, #3
0153c     53 00 00 FF 
01540     E0 E5 05 F1 | 	add	objptr, ##42976
01544     F2 30 02 F1 | 	add	local10, objptr
01548     18 2B 02 FB | 	rdlong	local07, local10
0154c     26 00 00 FF 
01550     C8 E4 05 F1 | 	add	objptr, ##19656
01554     F2 2A 62 FC | 	wrlong	local07, objptr
01558     12 31 02 F6 | 	mov	local10, local04
0155c     01 30 06 F1 | 	add	local10, #1
01560     03 30 66 F0 | 	shl	local10, #3
01564     26 00 00 FF 
01568     C8 E4 85 F1 | 	sub	objptr, ##19656
0156c     F2 30 02 F1 | 	add	local10, objptr
01570     18 2B 02 FB | 	rdlong	local07, local10
01574     26 00 00 FF 
01578     CC E4 05 F1 | 	add	objptr, ##19660
0157c     F2 2A 62 FC | 	wrlong	local07, objptr
01580                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01580     04 E4 85 F1 | 	sub	objptr, #4
01584     F2 12 02 FB | 	rdlong	arg01, objptr
01588     7A 00 00 FF 
0158c     A8 E4 85 F1 | 	sub	objptr, ##62632
01590     40 01 00 FF 
01594     67 15 06 F6 | 	mov	arg02, ##@LR__4294
01598     3C 76 B1 FD | 	call	#__system___string_cmp
0159c     00 FA 0D F2 | 	cmp	result1, #0 wz
015a0     04 01 90 AD |  if_e	jmp	#LR__0066
015a4     7A 00 00 FF 
015a8     A8 E4 05 F1 | 	add	objptr, ##62632
015ac     F2 12 02 FB | 	rdlong	arg01, objptr
015b0     7A 00 00 FF 
015b4     A8 E4 85 F1 | 	sub	objptr, ##62632
015b8     40 01 00 FF 
015bc     69 15 06 F6 | 	mov	arg02, ##@LR__4295
015c0     14 76 B1 FD | 	call	#__system___string_cmp
015c4     FD 26 0A F6 | 	mov	local05, result1 wz
015c8     DC 00 90 AD |  if_e	jmp	#LR__0066
015cc     7A 00 00 FF 
015d0     A8 E4 05 F1 | 	add	objptr, ##62632
015d4     F2 12 02 FB | 	rdlong	arg01, objptr
015d8     7A 00 00 FF 
015dc     A8 E4 85 F1 | 	sub	objptr, ##62632
015e0     40 01 00 FF 
015e4     6B 15 06 F6 | 	mov	arg02, ##@LR__4296
015e8     EC 75 B1 FD | 	call	#__system___string_cmp
015ec     00 FA 0D F2 | 	cmp	result1, #0 wz
015f0     B4 00 90 AD |  if_e	jmp	#LR__0066
015f4     7A 00 00 FF 
015f8     A8 E4 05 F1 | 	add	objptr, ##62632
015fc     F2 12 02 FB | 	rdlong	arg01, objptr
01600     7A 00 00 FF 
01604     A8 E4 85 F1 | 	sub	objptr, ##62632
01608     40 01 00 FF 
0160c     6D 35 06 F6 | 	mov	local12, ##@LR__4297
01610     1A 15 02 F6 | 	mov	arg02, local12
01614     C0 75 B1 FD | 	call	#__system___string_cmp
01618     00 FA 0D F2 | 	cmp	result1, #0 wz
0161c     88 00 90 AD |  if_e	jmp	#LR__0066
01620     7A 00 00 FF 
01624     A8 E4 05 F1 | 	add	objptr, ##62632
01628     F2 12 02 FB | 	rdlong	arg01, objptr
0162c     7A 00 00 FF 
01630     A8 E4 85 F1 | 	sub	objptr, ##62632
01634     40 01 00 FF 
01638     6F 33 06 F6 | 	mov	local11, ##@LR__4298
0163c     19 35 02 F6 | 	mov	local12, local11
01640     1A 15 02 F6 | 	mov	arg02, local12
01644     90 75 B1 FD | 	call	#__system___string_cmp
01648     00 FA 0D F2 | 	cmp	result1, #0 wz
0164c     58 00 90 AD |  if_e	jmp	#LR__0066
01650     7A 00 00 FF 
01654     A8 E4 05 F1 | 	add	objptr, ##62632
01658     F2 12 02 FB | 	rdlong	arg01, objptr
0165c     7A 00 00 FF 
01660     A8 E4 85 F1 | 	sub	objptr, ##62632
01664     40 01 00 FF 
01668     71 33 06 F6 | 	mov	local11, ##@LR__4299
0166c     19 15 02 F6 | 	mov	arg02, local11
01670     64 75 B1 FD | 	call	#__system___string_cmp
01674     FD 34 0A F6 | 	mov	local12, result1 wz
01678     2C 00 90 AD |  if_e	jmp	#LR__0066
0167c     7A 00 00 FF 
01680     A8 E4 05 F1 | 	add	objptr, ##62632
01684     F2 12 02 FB | 	rdlong	arg01, objptr
01688     7A 00 00 FF 
0168c     A8 E4 85 F1 | 	sub	objptr, ##62632
01690     40 01 00 FF 
01694     73 39 06 F6 | 	mov	local14, ##@LR__4300
01698     1C 15 02 F6 | 	mov	arg02, local14
0169c     38 75 B1 FD | 	call	#__system___string_cmp
016a0     FD 32 0A F6 | 	mov	local11, result1 wz
016a4     30 00 90 5D |  if_ne	jmp	#LR__0067
016a8                 | LR__0066
016a8     7A 00 00 FF 
016ac     AC E4 05 F1 | 	add	objptr, ##62636
016b0     F2 12 02 FB | 	rdlong	arg01, objptr
016b4     7A 00 00 FF 
016b8     AC E4 85 F1 | 	sub	objptr, ##62636
016bc     40 01 00 FF 
016c0     75 4D 06 F6 | 	mov	local24, ##@LR__4301
016c4     26 37 02 F6 | 	mov	local13, local24
016c8     1B 15 02 F6 | 	mov	arg02, local13
016cc     08 75 B1 FD | 	call	#__system___string_cmp
016d0     FD 38 0A F6 | 	mov	local14, result1 wz
016d4     18 01 90 AD |  if_e	jmp	#LR__0070
016d8                 | LR__0067
016d8     7A 00 00 FF 
016dc     A8 E4 05 F1 | 	add	objptr, ##62632
016e0     F2 12 02 FB | 	rdlong	arg01, objptr
016e4     7A 00 00 FF 
016e8     A8 E4 85 F1 | 	sub	objptr, ##62632
016ec     40 01 00 FF 
016f0     77 4D 06 F6 | 	mov	local24, ##@LR__4302
016f4     26 15 02 F6 | 	mov	arg02, local24
016f8     DC 74 B1 FD | 	call	#__system___string_cmp
016fc     FD 36 0A F6 | 	mov	local13, result1 wz
01700     30 00 90 5D |  if_ne	jmp	#LR__0068
01704     7A 00 00 FF 
01708     AC E4 05 F1 | 	add	objptr, ##62636
0170c     F2 12 02 FB | 	rdlong	arg01, objptr
01710     7A 00 00 FF 
01714     AC E4 85 F1 | 	sub	objptr, ##62636
01718     40 01 00 FF 
0171c     79 47 06 F6 | 	mov	local21, ##@LR__4303
01720     23 45 02 F6 | 	mov	local20, local21
01724     22 15 02 F6 | 	mov	arg02, local20
01728     AC 74 B1 FD | 	call	#__system___string_cmp
0172c     FD 4C 0A F6 | 	mov	local24, result1 wz
01730     BC 00 90 AD |  if_e	jmp	#LR__0070
01734                 | LR__0068
01734     7A 00 00 FF 
01738     A8 E4 05 F1 | 	add	objptr, ##62632
0173c     F2 12 02 FB | 	rdlong	arg01, objptr
01740     7A 00 00 FF 
01744     A8 E4 85 F1 | 	sub	objptr, ##62632
01748     40 01 00 FF 
0174c     7B 47 06 F6 | 	mov	local21, ##@LR__4304
01750     23 15 02 F6 | 	mov	arg02, local21
01754     80 74 B1 FD | 	call	#__system___string_cmp
01758     FD 44 0A F6 | 	mov	local20, result1 wz
0175c     30 00 90 5D |  if_ne	jmp	#LR__0069
01760     7A 00 00 FF 
01764     AC E4 05 F1 | 	add	objptr, ##62636
01768     F2 12 02 FB | 	rdlong	arg01, objptr
0176c     7A 00 00 FF 
01770     AC E4 85 F1 | 	sub	objptr, ##62636
01774     40 01 00 FF 
01778     7D 4F 06 F6 | 	mov	local25, ##@LR__4305
0177c     27 49 02 F6 | 	mov	local22, local25
01780     24 15 02 F6 | 	mov	arg02, local22
01784     50 74 B1 FD | 	call	#__system___string_cmp
01788     FD 46 0A F6 | 	mov	local21, result1 wz
0178c     60 00 90 AD |  if_e	jmp	#LR__0070
01790                 | LR__0069
01790     7A 00 00 FF 
01794     A8 E4 05 F1 | 	add	objptr, ##62632
01798     F2 12 02 FB | 	rdlong	arg01, objptr
0179c     7A 00 00 FF 
017a0     A8 E4 85 F1 | 	sub	objptr, ##62632
017a4     40 01 00 FF 
017a8     7F 51 06 F6 | 	mov	local26, ##@LR__4306
017ac     28 4F 02 F6 | 	mov	local25, local26
017b0     27 15 02 F6 | 	mov	arg02, local25
017b4     20 74 B1 FD | 	call	#__system___string_cmp
017b8     FD 48 0A F6 | 	mov	local22, result1 wz
017bc     10 01 90 5D |  if_ne	jmp	#LR__0074
017c0     7A 00 00 FF 
017c4     AC E4 05 F1 | 	add	objptr, ##62636
017c8     F2 12 02 FB | 	rdlong	arg01, objptr
017cc     7A 00 00 FF 
017d0     AC E4 85 F1 | 	sub	objptr, ##62636
017d4     40 01 00 FF 
017d8     81 53 06 F6 | 	mov	local27, ##@LR__4307
017dc     29 51 02 F6 | 	mov	local26, local27
017e0     28 15 02 F6 | 	mov	arg02, local26
017e4     F0 73 B1 FD | 	call	#__system___string_cmp
017e8     FD 4E 0A F6 | 	mov	local25, result1 wz
017ec     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f0                 | LR__0070
017f0     12 31 02 F6 | 	mov	local10, local04
017f4     03 30 66 F0 | 	shl	local10, #3
017f8     53 00 00 FF 
017fc     E0 E5 05 F1 | 	add	objptr, ##42976
01800     F2 30 02 F1 | 	add	local10, objptr
01804     26 00 00 FF 
01808     C8 E4 05 F1 | 	add	objptr, ##19656
0180c     F2 12 02 FB | 	rdlong	arg01, objptr
01810     04 E4 05 F1 | 	add	objptr, #4
01814     F2 32 02 FB | 	rdlong	local11, objptr
01818     7A 00 00 FF 
0181c     AC E4 85 F1 | 	sub	objptr, ##62636
01820     19 35 02 F6 | 	mov	local12, local11
01824     1A 15 02 F6 | 	mov	arg02, local12
01828     E0 73 B1 FD | 	call	#__system___string_concat
0182c     18 FB 61 FC | 	wrlong	result1, local10
01830                 | '     lparts(i).part$=s1$+s2$
01830                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01830     12 3B 02 F6 | 	mov	local15, local04
01834     01 3A 06 F1 | 	add	local15, #1
01838     1E 55 02 F6 | 	mov	local28, local16
0183c     01 54 06 F1 | 	add	local28, #1
01840     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01844                 | LR__0071
01844     2A 3B 52 F2 | 	cmps	local15, local28 wc
01848     7C 00 90 3D |  if_ae	jmp	#LR__0073
0184c     1D 29 02 F6 | 	mov	local06, local15
01850     01 28 06 F1 | 	add	local06, #1
01854     03 28 66 F0 | 	shl	local06, #3
01858     53 00 00 FF 
0185c     E0 E5 05 F1 | 	add	objptr, ##42976
01860     F2 28 02 F1 | 	add	local06, objptr
01864     14 1F 02 FB | 	rdlong	local01, local06
01868     1D 2B 02 F6 | 	mov	local07, local15
0186c     01 2A 06 F1 | 	add	local07, #1
01870     03 2A 66 F0 | 	shl	local07, #3
01874     F2 2A 02 F1 | 	add	local07, objptr
01878     04 2A 06 F1 | 	add	local07, #4
0187c     15 27 02 FB | 	rdlong	local05, local07
01880     1D 2B 02 F6 | 	mov	local07, local15
01884     03 2A 66 F0 | 	shl	local07, #3
01888     F2 34 02 F6 | 	mov	local12, objptr
0188c     F2 2A 02 F1 | 	add	local07, objptr
01890     15 1F 62 FC | 	wrlong	local01, local07
01894     1D 33 02 F6 | 	mov	local11, local15
01898     19 39 02 F6 | 	mov	local14, local11
0189c     1C 37 02 F6 | 	mov	local13, local14
018a0     03 36 66 F0 | 	shl	local13, #3
018a4     F2 4C 02 F6 | 	mov	local24, objptr
018a8     F2 36 02 F1 | 	add	local13, objptr
018ac     04 36 06 F1 | 	add	local13, #4
018b0     1B 27 62 FC | 	wrlong	local05, local13
018b4     04 36 86 F1 | 	sub	local13, #4
018b8     01 3A 06 F1 | 	add	local15, #1
018bc     53 00 00 FF 
018c0     E0 E5 85 F1 | 	sub	objptr, ##42976
018c4     7C FF 9F FD | 	jmp	#LR__0071
018c8                 | LR__0072
018c8                 | LR__0073
018c8     01 24 86 F1 | 	sub	local04, #1
018cc     01 3C 86 F1 | 	sub	local16, #1
018d0                 | LR__0074
018d0     01 24 06 F1 | 	add	local04, #1
018d4     1E 25 52 F2 | 	cmps	local04, local16 wc
018d8     58 FC 9F CD |  if_b	jmp	#LR__0065
018dc                 | '  
018dc                 | ' ' 1f : now remove parts that are spaces
018dc                 | ' 
018dc                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018dc     00 24 06 F6 | 	mov	local04, #0
018e0     1E 57 02 F6 | 	mov	local29, local16
018e4     01 56 06 F1 | 	add	local29, #1
018e8                 | LR__0075
018e8     2B 25 52 F2 | 	cmps	local04, local29 wc
018ec     50 00 90 3D |  if_ae	jmp	#LR__0076
018f0     12 31 02 F6 | 	mov	local10, local04
018f4     03 30 66 F0 | 	shl	local10, #3
018f8     53 00 00 FF 
018fc     E0 E5 05 F1 | 	add	objptr, ##42976
01900     F2 30 02 F1 | 	add	local10, objptr
01904     12 35 02 F6 | 	mov	local12, local04
01908     1A 33 02 F6 | 	mov	local11, local12
0190c     19 39 02 F6 | 	mov	local14, local11
01910     03 38 66 F0 | 	shl	local14, #3
01914     F2 36 02 F6 | 	mov	local13, objptr
01918     F2 38 02 F1 | 	add	local14, objptr
0191c     1C 13 02 FB | 	rdlong	arg01, local14
01920     53 00 00 FF 
01924     E0 E5 85 F1 | 	sub	objptr, ##42976
01928     C8 96 B1 FD | 	call	#__system__RTrim_S
0192c     FD 12 02 F6 | 	mov	arg01, result1
01930     00 96 B1 FD | 	call	#__system__LTrim_S
01934     18 FB 61 FC | 	wrlong	result1, local10
01938     01 24 06 F1 | 	add	local04, #1
0193c     A8 FF 9F FD | 	jmp	#LR__0075
01940                 | LR__0076
01940     00 24 06 F6 | 	mov	local04, #0
01944     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01948                 | ' 
01948                 | ' i=0
01948                 | ' do 
01948                 | LR__0077
01948                 | '   if len(lparts(i).part$)=0 then 
01948     12 31 02 F6 | 	mov	local10, local04
0194c     18 29 02 F6 | 	mov	local06, local10
01950     03 28 66 F0 | 	shl	local06, #3
01954     53 00 00 FF 
01958     E0 E5 05 F1 | 	add	objptr, ##42976
0195c     F2 28 02 F1 | 	add	local06, objptr
01960     14 13 02 FB | 	rdlong	arg01, local06
01964     53 00 00 FF 
01968     E0 E5 85 F1 | 	sub	objptr, ##42976
0196c     09 2D 02 F6 | 	mov	local08, arg01
01970                 | LR__0078
01970     16 FB C9 FA | 	rdbyte	result1, local08 wz
01974     01 2C 06 51 |  if_ne	add	local08, #1
01978     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
0197c     09 2D 8A F1 | 	sub	local08, arg01 wz
01980     C4 00 90 5D |  if_ne	jmp	#LR__0082
01984                 | '     if i=k-1 then k-=1  :  exit
01984     1E 1F 02 F6 | 	mov	local01, local16
01988     01 1E 86 F1 | 	sub	local01, #1
0198c     0F 25 0A F2 | 	cmp	local04, local01 wz
01990     01 3C 86 A1 |  if_e	sub	local16, #1
01994     C4 00 90 AD |  if_e	jmp	#LR__0084
01998                 | '     if i<k-1 then 
01998     1E 1F 02 F6 | 	mov	local01, local16
0199c     01 1E 86 F1 | 	sub	local01, #1
019a0     0F 25 52 F2 | 	cmps	local04, local01 wc
019a4     A0 00 90 3D |  if_ae	jmp	#LR__0081
019a8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019a8     12 3B 02 F6 | 	mov	local15, local04
019ac     1E 59 02 F6 | 	mov	local30, local16
019b0     01 58 86 F1 | 	sub	local30, #1
019b4                 | LR__0079
019b4     2C 3B 52 F2 | 	cmps	local15, local30 wc
019b8     80 00 90 3D |  if_ae	jmp	#LR__0080
019bc     1D 29 02 F6 | 	mov	local06, local15
019c0     01 28 06 F1 | 	add	local06, #1
019c4     03 28 66 F0 | 	shl	local06, #3
019c8     53 00 00 FF 
019cc     E0 E5 05 F1 | 	add	objptr, ##42976
019d0     F2 28 02 F1 | 	add	local06, objptr
019d4     14 1F 02 FB | 	rdlong	local01, local06
019d8     1D 2B 02 F6 | 	mov	local07, local15
019dc     01 2A 06 F1 | 	add	local07, #1
019e0     03 2A 66 F0 | 	shl	local07, #3
019e4     F2 2A 02 F1 | 	add	local07, objptr
019e8     04 2A 06 F1 | 	add	local07, #4
019ec     15 27 02 FB | 	rdlong	local05, local07
019f0     1D 31 02 F6 | 	mov	local10, local15
019f4     18 2B 02 F6 | 	mov	local07, local10
019f8     03 2A 66 F0 | 	shl	local07, #3
019fc     F2 34 02 F6 | 	mov	local12, objptr
01a00     F2 2A 02 F1 | 	add	local07, objptr
01a04     15 1F 62 FC | 	wrlong	local01, local07
01a08     1D 33 02 F6 | 	mov	local11, local15
01a0c     19 39 02 F6 | 	mov	local14, local11
01a10     1C 37 02 F6 | 	mov	local13, local14
01a14     03 36 66 F0 | 	shl	local13, #3
01a18     F2 4C 02 F6 | 	mov	local24, objptr
01a1c     F2 36 02 F1 | 	add	local13, objptr
01a20     04 36 06 F1 | 	add	local13, #4
01a24     1B 27 62 FC | 	wrlong	local05, local13
01a28     04 36 86 F1 | 	sub	local13, #4
01a2c     01 3A 06 F1 | 	add	local15, #1
01a30     53 00 00 FF 
01a34     E0 E5 85 F1 | 	sub	objptr, ##42976
01a38     78 FF 9F FD | 	jmp	#LR__0079
01a3c                 | LR__0080
01a3c     01 3C 86 F1 | 	sub	local16, #1
01a40                 | '       if i>0 then i-=1 
01a40     01 24 56 F2 | 	cmps	local04, #1 wc
01a44     01 24 86 31 |  if_ae	sub	local04, #1
01a48                 | LR__0081
01a48                 | LR__0082
01a48     01 24 06 F1 | 	add	local04, #1
01a4c     1E 1F 02 F6 | 	mov	local01, local16
01a50     01 1E 86 F1 | 	sub	local01, #1
01a54     0F 25 5A F2 | 	cmps	local04, local01 wcz
01a58     EC FE 9F ED |  if_be	jmp	#LR__0077
01a5c                 | LR__0083
01a5c                 | LR__0084
01a5c                 | ' 
01a5c                 | ' ' 1g: lowercase all that is not a string
01a5c                 | ' 
01a5c                 | ' for j=0 to k-1
01a5c     00 3A 06 F6 | 	mov	local15, #0
01a60     1E 5B 02 F6 | 	mov	local31, local16
01a64                 | LR__0085
01a64     2D 3B 52 F2 | 	cmps	local15, local31 wc
01a68     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a6c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a6c     1D 29 02 F6 | 	mov	local06, local15
01a70     03 28 66 F0 | 	shl	local06, #3
01a74     53 00 00 FF 
01a78     E0 E5 05 F1 | 	add	objptr, ##42976
01a7c     F2 28 02 F1 | 	add	local06, objptr
01a80     14 13 02 FB | 	rdlong	arg01, local06
01a84     01 14 06 F6 | 	mov	arg02, #1
01a88     53 00 00 FF 
01a8c     E0 E5 85 F1 | 	sub	objptr, ##42976
01a90     2C 91 B1 FD | 	call	#__system__Left_S
01a94     FD 12 02 F6 | 	mov	arg01, result1
01a98     40 01 00 FF 
01a9c     83 15 06 F6 | 	mov	arg02, ##@LR__4308
01aa0     34 71 B1 FD | 	call	#__system___string_cmp
01aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
01aa8     40 00 90 5D |  if_ne	jmp	#LR__0086
01aac     1D 2B 02 F6 | 	mov	local07, local15
01ab0     03 2A 66 F0 | 	shl	local07, #3
01ab4     53 00 00 FF 
01ab8     E0 E5 05 F1 | 	add	objptr, ##42976
01abc     F2 2A 02 F1 | 	add	local07, objptr
01ac0     15 13 02 FB | 	rdlong	arg01, local07
01ac4     01 14 06 F6 | 	mov	arg02, #1
01ac8     53 00 00 FF 
01acc     E0 E5 85 F1 | 	sub	objptr, ##42976
01ad0     74 91 B1 FD | 	call	#__system__Right_S
01ad4     FD 12 02 F6 | 	mov	arg01, result1
01ad8     40 01 00 FF 
01adc     85 15 06 F6 | 	mov	arg02, ##@LR__4309
01ae0     F4 70 B1 FD | 	call	#__system___string_cmp
01ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ae8     38 00 90 AD |  if_e	jmp	#LR__0087
01aec                 | LR__0086
01aec     1D 31 02 F6 | 	mov	local10, local15
01af0     03 30 66 F0 | 	shl	local10, #3
01af4     53 00 00 FF 
01af8     E0 E5 05 F1 | 	add	objptr, ##42976
01afc     F2 30 02 F1 | 	add	local10, objptr
01b00     1D 39 02 F6 | 	mov	local14, local15
01b04     03 38 66 F0 | 	shl	local14, #3
01b08     F2 36 02 F6 | 	mov	local13, objptr
01b0c     F2 38 02 F1 | 	add	local14, objptr
01b10     1C 13 02 FB | 	rdlong	arg01, local14
01b14     53 00 00 FF 
01b18     E0 E5 85 F1 | 	sub	objptr, ##42976
01b1c     54 93 B1 FD | 	call	#__system__LCase_S
01b20     18 FB 61 FC | 	wrlong	result1, local10
01b24                 | LR__0087
01b24     01 3A 06 F1 | 	add	local15, #1
01b28     38 FF 9F FD | 	jmp	#LR__0085
01b2c                 | LR__0088
01b2c                 | ' 
01b2c                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b2c                 | ' 
01b2c                 | ' for i=0 to k: lparts(i).token=-1: next i
01b2c     00 24 06 F6 | 	mov	local04, #0
01b30     1E 5D 02 F6 | 	mov	local32, local16
01b34     01 5C 06 F1 | 	add	local32, #1
01b38     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b3c                 | LR__0089
01b3c     2E 25 52 F2 | 	cmps	local04, local32 wc
01b40     30 00 90 3D |  if_ae	jmp	#LR__0091
01b44     12 31 02 F6 | 	mov	local10, local04
01b48     03 30 66 F0 | 	shl	local10, #3
01b4c     53 00 00 FF 
01b50     E0 E5 05 F1 | 	add	objptr, ##42976
01b54     F2 30 02 F1 | 	add	local10, objptr
01b58     04 30 06 F1 | 	add	local10, #4
01b5c     FF FF FF FF 
01b60     18 FF 6B FC | 	wrlong	##-1, local10
01b64     01 24 06 F1 | 	add	local04, #1
01b68     53 00 00 FF 
01b6c     E0 E5 85 F1 | 	sub	objptr, ##42976
01b70     C8 FF 9F FD | 	jmp	#LR__0089
01b74                 | LR__0090
01b74                 | LR__0091
01b74                 | ' 
01b74                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b74                 | ' 
01b74                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b74     53 00 00 FF 
01b78     E0 E5 05 F1 | 	add	objptr, ##42976
01b7c     F2 12 02 FB | 	rdlong	arg01, objptr
01b80     53 00 00 FF 
01b84     E0 E5 85 F1 | 	sub	objptr, ##42976
01b88     09 2D 02 F6 | 	mov	local08, arg01
01b8c     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01b90                 | LR__0092
01b90     16 FB C9 FA | 	rdbyte	result1, local08 wz
01b94     01 2C 06 51 |  if_ne	add	local08, #1
01b98     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01b9c                 | LR__0093
01b9c     09 2D 8A F1 | 	sub	local08, arg01 wz
01ba0     E0 15 90 AD |  if_e	jmp	#LR__0147
01ba4                 | ' 
01ba4                 | ' 
01ba4                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01ba4     53 00 00 FF 
01ba8     E0 E5 05 F1 | 	add	objptr, ##42976
01bac     F2 12 02 FB | 	rdlong	arg01, objptr
01bb0     53 00 00 FF 
01bb4     E0 E5 85 F1 | 	sub	objptr, ##42976
01bb8     F8 2D B0 FD | 	call	#_isdec
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     7A 00 00 5F 
01bc4     B0 E4 05 51 |  if_ne	add	objptr, ##62640
01bc8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bcc     7A 00 00 FF 
01bd0     B0 E4 E5 F3 | 	sumnz	objptr, ##62640
01bd4     F2 00 68 AC |  if_e	wrlong	#0, objptr
01bd8     7A 00 00 AF 
01bdc     B0 E4 85 A1 |  if_e	sub	objptr, ##62640
01be0     7A 00 00 FF 
01be4     B0 E4 05 F1 | 	add	objptr, ##62640
01be8     F2 28 02 FB | 	rdlong	local06, objptr
01bec     03 28 66 F0 | 	shl	local06, #3
01bf0     26 00 00 FF 
01bf4     D0 E4 85 F1 | 	sub	objptr, ##19664
01bf8     F2 28 02 F1 | 	add	local06, objptr
01bfc     14 35 02 FB | 	rdlong	local12, local06
01c00     26 00 00 FF 
01c04     D4 E4 05 F1 | 	add	objptr, ##19668
01c08     F2 34 62 FC | 	wrlong	local12, objptr
01c0c     04 E4 85 F1 | 	sub	objptr, #4
01c10     F2 34 02 FB | 	rdlong	local12, objptr
01c14     03 34 66 F0 | 	shl	local12, #3
01c18     26 00 00 FF 
01c1c     D0 E4 85 F1 | 	sub	objptr, ##19664
01c20     F2 32 02 F6 | 	mov	local11, objptr
01c24     F2 34 02 F1 | 	add	local12, objptr
01c28     1A 15 02 FB | 	rdlong	arg02, local12
01c2c     40 01 00 FF 
01c30     87 17 06 F6 | 	mov	arg03, ##@LR__4310
01c34     01 12 06 F6 | 	mov	arg01, #1
01c38     53 00 00 FF 
01c3c     E0 E5 85 F1 | 	sub	objptr, ##42976
01c40     68 94 B1 FD | 	call	#__system__Instr
01c44     7A 00 00 FF 
01c48     B8 E4 05 F1 | 	add	objptr, ##62648
01c4c     F2 FA 61 FC | 	wrlong	result1, objptr
01c50                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c50     FD 1E 02 F6 | 	mov	local01, result1
01c54     7A 00 00 FF 
01c58     B8 E4 85 F1 | 	sub	objptr, ##62648
01c5c     01 1E 56 F2 | 	cmps	local01, #1 wc
01c60     DC 01 90 CD |  if_b	jmp	#LR__0100
01c64     7A 00 00 FF 
01c68     B0 E4 05 F1 | 	add	objptr, ##62640
01c6c     F2 32 02 FB | 	rdlong	local11, objptr
01c70     03 32 66 F0 | 	shl	local11, #3
01c74     26 00 00 FF 
01c78     D0 E4 85 F1 | 	sub	objptr, ##19664
01c7c     F2 38 02 F6 | 	mov	local14, objptr
01c80     F2 32 02 F1 | 	add	local11, objptr
01c84     19 13 02 FB | 	rdlong	arg01, local11
01c88     53 00 00 FF 
01c8c     E0 E5 85 F1 | 	sub	objptr, ##42976
01c90     09 2D 02 F6 | 	mov	local08, arg01
01c94     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01c98                 | LR__0094
01c98     16 FB C9 FA | 	rdbyte	result1, local08 wz
01c9c     01 2C 06 51 |  if_ne	add	local08, #1
01ca0     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01ca4                 | LR__0095
01ca4     09 2D 82 F1 | 	sub	local08, arg01
01ca8     16 31 02 F6 | 	mov	local10, local08
01cac     7A 00 00 FF 
01cb0     B8 E4 05 F1 | 	add	objptr, ##62648
01cb4     F2 28 02 FB | 	rdlong	local06, objptr
01cb8     7A 00 00 FF 
01cbc     B8 E4 85 F1 | 	sub	objptr, ##62648
01cc0     18 29 52 F2 | 	cmps	local06, local10 wc
01cc4     78 01 90 3D |  if_ae	jmp	#LR__0100
01cc8     01 3C 06 F1 | 	add	local16, #1
01ccc                 | '   k+=1
01ccc                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ccc     1E 25 02 F6 | 	mov	local04, local16
01cd0     7A 00 00 FF 
01cd4     B0 E4 05 F1 | 	add	objptr, ##62640
01cd8     F2 5E 02 FB | 	rdlong	local33, objptr
01cdc     01 5E 06 F1 | 	add	local33, #1
01ce0     26 00 00 FF 
01ce4     D0 E4 85 F1 | 	sub	objptr, ##19664
01ce8     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01cec                 | LR__0096
01cec     12 2B 02 F6 | 	mov	local07, local04
01cf0     01 2A 86 F1 | 	sub	local07, #1
01cf4     03 2A 66 F0 | 	shl	local07, #3
01cf8     F2 2A 02 F1 | 	add	local07, objptr
01cfc     15 27 02 FB | 	rdlong	local05, local07
01d00     12 35 02 F6 | 	mov	local12, local04
01d04     01 34 86 F1 | 	sub	local12, #1
01d08     03 34 66 F0 | 	shl	local12, #3
01d0c     F2 34 02 F1 | 	add	local12, objptr
01d10     04 34 06 F1 | 	add	local12, #4
01d14     1A 31 02 FB | 	rdlong	local10, local12
01d18     12 35 02 F6 | 	mov	local12, local04
01d1c     03 34 66 F0 | 	shl	local12, #3
01d20     F2 34 02 F1 | 	add	local12, objptr
01d24     1A 27 62 FC | 	wrlong	local05, local12
01d28     12 4D 02 F6 | 	mov	local24, local04
01d2c     03 4C 66 F0 | 	shl	local24, #3
01d30     F2 4C 02 F1 | 	add	local24, objptr
01d34     04 4C 06 F1 | 	add	local24, #4
01d38     26 31 62 FC | 	wrlong	local10, local24
01d3c     01 24 86 F1 | 	sub	local04, #1
01d40     2F 25 52 F2 | 	cmps	local04, local33 wc
01d44     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d48                 | LR__0097
01d48     26 00 00 FF 
01d4c     D0 E4 05 F1 | 	add	objptr, ##19664
01d50     F2 4C 02 FB | 	rdlong	local24, objptr
01d54     26 29 02 F6 | 	mov	local06, local24
01d58     01 28 06 F1 | 	add	local06, #1
01d5c     03 28 66 F0 | 	shl	local06, #3
01d60     26 00 00 FF 
01d64     D0 E4 85 F1 | 	sub	objptr, ##19664
01d68     F2 28 02 F1 | 	add	local06, objptr
01d6c     03 4C 66 F0 | 	shl	local24, #3
01d70     F2 4C 02 F1 | 	add	local24, objptr
01d74     26 35 02 FB | 	rdlong	local12, local24
01d78     26 00 00 FF 
01d7c     D0 E4 05 F1 | 	add	objptr, ##19664
01d80     F2 46 02 FB | 	rdlong	local21, objptr
01d84     23 49 02 F6 | 	mov	local22, local21
01d88     03 48 66 F0 | 	shl	local22, #3
01d8c     26 00 00 FF 
01d90     D0 E4 85 F1 | 	sub	objptr, ##19664
01d94     F2 4E 02 F6 | 	mov	local25, objptr
01d98     F2 48 02 F1 | 	add	local22, objptr
01d9c     24 13 02 FB | 	rdlong	arg01, local22
01da0     53 00 00 FF 
01da4     E0 E5 85 F1 | 	sub	objptr, ##42976
01da8     09 2D 02 F6 | 	mov	local08, arg01
01dac     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01db0                 | LR__0098
01db0     16 FB C9 FA | 	rdbyte	result1, local08 wz
01db4     01 2C 06 51 |  if_ne	add	local08, #1
01db8     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01dbc                 | LR__0099
01dbc     09 2D 82 F1 | 	sub	local08, arg01
01dc0     16 15 02 F6 | 	mov	arg02, local08
01dc4     7A 00 00 FF 
01dc8     B8 E4 05 F1 | 	add	objptr, ##62648
01dcc     F2 4C 02 FB | 	rdlong	local24, objptr
01dd0     7A 00 00 FF 
01dd4     B8 E4 85 F1 | 	sub	objptr, ##62648
01dd8     26 15 82 F1 | 	sub	arg02, local24
01ddc     1A 13 02 F6 | 	mov	arg01, local12
01de0     64 8E B1 FD | 	call	#__system__Right_S
01de4     14 FB 61 FC | 	wrlong	result1, local06
01de8     7A 00 00 FF 
01dec     B0 E4 05 F1 | 	add	objptr, ##62640
01df0     F2 36 02 FB | 	rdlong	local13, objptr
01df4     1B 29 02 F6 | 	mov	local06, local13
01df8     03 28 66 F0 | 	shl	local06, #3
01dfc     26 00 00 FF 
01e00     D0 E4 85 F1 | 	sub	objptr, ##19664
01e04     F2 28 02 F1 | 	add	local06, objptr
01e08     1B 4D 02 F6 | 	mov	local24, local13
01e0c     03 4C 66 F0 | 	shl	local24, #3
01e10     F2 44 02 F6 | 	mov	local20, objptr
01e14     F2 4C 02 F1 | 	add	local24, objptr
01e18     26 13 02 FB | 	rdlong	arg01, local24
01e1c     26 00 00 FF 
01e20     D8 E4 05 F1 | 	add	objptr, ##19672
01e24     F2 38 02 FB | 	rdlong	local14, objptr
01e28     7A 00 00 FF 
01e2c     B8 E4 85 F1 | 	sub	objptr, ##62648
01e30     1C 33 02 F6 | 	mov	local11, local14
01e34     19 15 02 F6 | 	mov	arg02, local11
01e38     84 8D B1 FD | 	call	#__system__Left_S
01e3c     14 FB 61 FC | 	wrlong	result1, local06
01e40                 | LR__0100
01e40                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e40     7A 00 00 FF 
01e44     B0 E4 05 F1 | 	add	objptr, ##62640
01e48     F2 2A 02 FB | 	rdlong	local07, objptr
01e4c     03 2A 66 F0 | 	shl	local07, #3
01e50     26 00 00 FF 
01e54     D0 E4 85 F1 | 	sub	objptr, ##19664
01e58     F2 2A 02 F1 | 	add	local07, objptr
01e5c     15 13 02 FB | 	rdlong	arg01, local07
01e60     01 14 06 F6 | 	mov	arg02, #1
01e64     53 00 00 FF 
01e68     E0 E5 85 F1 | 	sub	objptr, ##42976
01e6c     50 8D B1 FD | 	call	#__system__Left_S
01e70     FD 12 02 F6 | 	mov	arg01, result1
01e74     40 01 00 FF 
01e78     89 15 06 F6 | 	mov	arg02, ##@LR__4311
01e7c     58 6D B1 FD | 	call	#__system___string_cmp
01e80     00 FA 0D F2 | 	cmp	result1, #0 wz
01e84     9C 01 90 5D |  if_ne	jmp	#LR__0107
01e88     7A 00 00 FF 
01e8c     B0 E4 05 F1 | 	add	objptr, ##62640
01e90     F2 34 02 FB | 	rdlong	local12, objptr
01e94     03 34 66 F0 | 	shl	local12, #3
01e98     26 00 00 FF 
01e9c     D0 E4 85 F1 | 	sub	objptr, ##19664
01ea0     F2 32 02 F6 | 	mov	local11, objptr
01ea4     F2 34 02 F1 | 	add	local12, objptr
01ea8     1A 13 02 FB | 	rdlong	arg01, local12
01eac     53 00 00 FF 
01eb0     E0 E5 85 F1 | 	sub	objptr, ##42976
01eb4     09 2D 02 F6 | 	mov	local08, arg01
01eb8     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ebc                 | LR__0101
01ebc     16 FB C9 FA | 	rdbyte	result1, local08 wz
01ec0     01 2C 06 51 |  if_ne	add	local08, #1
01ec4     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ec8                 | LR__0102
01ec8     09 2D 82 F1 | 	sub	local08, arg01
01ecc     02 2C 56 F2 | 	cmps	local08, #2 wc
01ed0     50 01 90 CD |  if_b	jmp	#LR__0107
01ed4     01 3C 06 F1 | 	add	local16, #1
01ed8                 | '   k+=1
01ed8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ed8     1E 25 02 F6 | 	mov	local04, local16
01edc     7A 00 00 FF 
01ee0     B0 E4 05 F1 | 	add	objptr, ##62640
01ee4     F2 60 02 FB | 	rdlong	local34, objptr
01ee8     01 60 06 F1 | 	add	local34, #1
01eec     26 00 00 FF 
01ef0     D0 E4 85 F1 | 	sub	objptr, ##19664
01ef4     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01ef8                 | LR__0103
01ef8     12 2B 02 F6 | 	mov	local07, local04
01efc     01 2A 86 F1 | 	sub	local07, #1
01f00     03 2A 66 F0 | 	shl	local07, #3
01f04     F2 2A 02 F1 | 	add	local07, objptr
01f08     15 27 02 FB | 	rdlong	local05, local07
01f0c     12 35 02 F6 | 	mov	local12, local04
01f10     01 34 86 F1 | 	sub	local12, #1
01f14     03 34 66 F0 | 	shl	local12, #3
01f18     F2 34 02 F1 | 	add	local12, objptr
01f1c     04 34 06 F1 | 	add	local12, #4
01f20     1A 31 02 FB | 	rdlong	local10, local12
01f24     12 35 02 F6 | 	mov	local12, local04
01f28     03 34 66 F0 | 	shl	local12, #3
01f2c     F2 34 02 F1 | 	add	local12, objptr
01f30     1A 27 62 FC | 	wrlong	local05, local12
01f34     12 4D 02 F6 | 	mov	local24, local04
01f38     03 4C 66 F0 | 	shl	local24, #3
01f3c     F2 4C 02 F1 | 	add	local24, objptr
01f40     04 4C 06 F1 | 	add	local24, #4
01f44     26 31 62 FC | 	wrlong	local10, local24
01f48     01 24 86 F1 | 	sub	local04, #1
01f4c     30 25 52 F2 | 	cmps	local04, local34 wc
01f50     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f54                 | LR__0104
01f54     26 00 00 FF 
01f58     D0 E4 05 F1 | 	add	objptr, ##19664
01f5c     F2 4C 02 FB | 	rdlong	local24, objptr
01f60     26 29 02 F6 | 	mov	local06, local24
01f64     01 28 06 F1 | 	add	local06, #1
01f68     03 28 66 F0 | 	shl	local06, #3
01f6c     26 00 00 FF 
01f70     D0 E4 85 F1 | 	sub	objptr, ##19664
01f74     F2 28 02 F1 | 	add	local06, objptr
01f78     03 4C 66 F0 | 	shl	local24, #3
01f7c     F2 4C 02 F1 | 	add	local24, objptr
01f80     26 35 02 FB | 	rdlong	local12, local24
01f84     26 00 00 FF 
01f88     D0 E4 05 F1 | 	add	objptr, ##19664
01f8c     F2 44 02 FB | 	rdlong	local20, objptr
01f90     22 4D 02 F6 | 	mov	local24, local20
01f94     26 47 02 F6 | 	mov	local21, local24
01f98     23 49 02 F6 | 	mov	local22, local21
01f9c     03 48 66 F0 | 	shl	local22, #3
01fa0     26 00 00 FF 
01fa4     D0 E4 85 F1 | 	sub	objptr, ##19664
01fa8     F2 4E 02 F6 | 	mov	local25, objptr
01fac     F2 48 02 F1 | 	add	local22, objptr
01fb0     24 13 02 FB | 	rdlong	arg01, local22
01fb4     53 00 00 FF 
01fb8     E0 E5 85 F1 | 	sub	objptr, ##42976
01fbc     09 2D 02 F6 | 	mov	local08, arg01
01fc0     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fc4                 | LR__0105
01fc4     16 FB C9 FA | 	rdbyte	result1, local08 wz
01fc8     01 2C 06 51 |  if_ne	add	local08, #1
01fcc     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01fd0                 | LR__0106
01fd0     09 2D 82 F1 | 	sub	local08, arg01
01fd4     16 37 02 F6 | 	mov	local13, local08
01fd8     1B 39 02 F6 | 	mov	local14, local13
01fdc     01 38 86 F1 | 	sub	local14, #1
01fe0     1C 33 02 F6 | 	mov	local11, local14
01fe4     1A 13 02 F6 | 	mov	arg01, local12
01fe8     19 15 02 F6 | 	mov	arg02, local11
01fec     58 8C B1 FD | 	call	#__system__Right_S
01ff0     14 FB 61 FC | 	wrlong	result1, local06
01ff4     7A 00 00 FF 
01ff8     B0 E4 05 F1 | 	add	objptr, ##62640
01ffc     F2 28 02 FB | 	rdlong	local06, objptr
02000     03 28 66 F0 | 	shl	local06, #3
02004     26 00 00 FF 
02008     D0 E4 85 F1 | 	sub	objptr, ##19664
0200c     F2 28 02 F1 | 	add	local06, objptr
02010     40 01 00 FF 
02014     8B 35 06 F6 | 	mov	local12, ##@LR__4312
02018     14 35 62 FC | 	wrlong	local12, local06
0201c     53 00 00 FF 
02020     E0 E5 85 F1 | 	sub	objptr, ##42976
02024                 | LR__0107
02024     7A 00 00 FF 
02028     B0 E4 05 F1 | 	add	objptr, ##62640
0202c     F2 28 02 FB | 	rdlong	local06, objptr
02030     03 28 66 F0 | 	shl	local06, #3
02034     26 00 00 FF 
02038     D0 E4 85 F1 | 	sub	objptr, ##19664
0203c     F2 28 02 F1 | 	add	local06, objptr
02040     14 35 02 FB | 	rdlong	local12, local06
02044     26 00 00 FF 
02048     D4 E4 05 F1 | 	add	objptr, ##19668
0204c     F2 34 62 FC | 	wrlong	local12, objptr
02050                 | ' 
02050                 | ' ' process the case when simple load or save is called without ""
02050                 | ' 
02050                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") andalso lparts(addptr+1).token=token_name then 
02050     7A 00 00 FF 
02054     B4 E4 85 F1 | 	sub	objptr, ##62644
02058     40 01 00 FF 
0205c     8D 15 06 F6 | 	mov	arg02, ##@LR__4313
02060     1A 13 02 F6 | 	mov	arg01, local12
02064     70 6B B1 FD | 	call	#__system___string_cmp
02068     00 FA 0D F2 | 	cmp	result1, #0 wz
0206c     50 00 90 AD |  if_e	jmp	#LR__0108
02070     7A 00 00 FF 
02074     B4 E4 05 F1 | 	add	objptr, ##62644
02078     F2 12 02 FB | 	rdlong	arg01, objptr
0207c     7A 00 00 FF 
02080     B4 E4 85 F1 | 	sub	objptr, ##62644
02084     40 01 00 FF 
02088     93 15 06 F6 | 	mov	arg02, ##@LR__4314
0208c     48 6B B1 FD | 	call	#__system___string_cmp
02090     00 FA 0D F2 | 	cmp	result1, #0 wz
02094     28 00 90 AD |  if_e	jmp	#LR__0108
02098     7A 00 00 FF 
0209c     B4 E4 05 F1 | 	add	objptr, ##62644
020a0     F2 12 02 FB | 	rdlong	arg01, objptr
020a4     7A 00 00 FF 
020a8     B4 E4 85 F1 | 	sub	objptr, ##62644
020ac     40 01 00 FF 
020b0     9A 15 06 F6 | 	mov	arg02, ##@LR__4315
020b4     20 6B B1 FD | 	call	#__system___string_cmp
020b8     00 FA 0D F2 | 	cmp	result1, #0 wz
020bc     94 01 90 5D |  if_ne	jmp	#LR__0111
020c0                 | LR__0108
020c0     7A 00 00 FF 
020c4     B0 E4 05 F1 | 	add	objptr, ##62640
020c8     F2 34 02 FB | 	rdlong	local12, objptr
020cc     01 34 06 F1 | 	add	local12, #1
020d0     1A 33 02 F6 | 	mov	local11, local12
020d4     03 32 66 F0 | 	shl	local11, #3
020d8     26 00 00 FF 
020dc     D0 E4 85 F1 | 	sub	objptr, ##19664
020e0     F2 38 02 F6 | 	mov	local14, objptr
020e4     F2 32 02 F1 | 	add	local11, objptr
020e8     04 32 06 F1 | 	add	local11, #4
020ec     19 4D 02 FB | 	rdlong	local24, local11
020f0     04 32 86 F1 | 	sub	local11, #4
020f4     26 37 02 F6 | 	mov	local13, local24
020f8     01 00 00 FF 
020fc     04 36 0E F2 | 	cmp	local13, ##516 wz
02100     53 00 00 FF 
02104     E0 E5 85 F1 | 	sub	objptr, ##42976
02108     48 01 90 5D |  if_ne	jmp	#LR__0111
0210c                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
0210c     7A 00 00 FF 
02110     B0 E4 05 F1 | 	add	objptr, ##62640
02114     F2 2A 02 FB | 	rdlong	local07, objptr
02118     01 2A 06 F1 | 	add	local07, #1
0211c     03 2A 66 F0 | 	shl	local07, #3
02120     26 00 00 FF 
02124     D0 E4 85 F1 | 	sub	objptr, ##19664
02128     F2 2A 02 F1 | 	add	local07, objptr
0212c     15 13 02 FB | 	rdlong	arg01, local07
02130     40 01 00 FF 
02134     A0 15 06 F6 | 	mov	arg02, ##@LR__4316
02138     53 00 00 FF 
0213c     E0 E5 85 F1 | 	sub	objptr, ##42976
02140     94 6A B1 FD | 	call	#__system___string_cmp
02144     00 FA 0D F2 | 	cmp	result1, #0 wz
02148     60 00 90 5D |  if_ne	jmp	#LR__0109
0214c     7A 00 00 FF 
02150     B0 E4 05 F1 | 	add	objptr, ##62640
02154     F2 28 02 FB | 	rdlong	local06, objptr
02158     01 28 06 F1 | 	add	local06, #1
0215c     03 28 66 F0 | 	shl	local06, #3
02160     26 00 00 FF 
02164     D0 E4 85 F1 | 	sub	objptr, ##19664
02168     F2 28 02 F1 | 	add	local06, objptr
0216c     40 01 00 FF 
02170     A3 35 06 F6 | 	mov	local12, ##@LR__4317
02174     14 35 62 FC | 	wrlong	local12, local06
02178     26 00 00 FF 
0217c     D0 E4 05 F1 | 	add	objptr, ##19664
02180     F2 28 02 FB | 	rdlong	local06, objptr
02184     01 28 06 F1 | 	add	local06, #1
02188     03 28 66 F0 | 	shl	local06, #3
0218c     26 00 00 FF 
02190     D0 E4 85 F1 | 	sub	objptr, ##19664
02194     F2 28 02 F1 | 	add	local06, objptr
02198     04 28 06 F1 | 	add	local06, #4
0219c     01 00 80 FF 
021a0     14 01 68 FC | 	wrlong	##512, local06
021a4     53 00 00 FF 
021a8     E0 E5 85 F1 | 	sub	objptr, ##42976
021ac                 | LR__0109
021ac                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
021ac     7A 00 00 FF 
021b0     B0 E4 05 F1 | 	add	objptr, ##62640
021b4     F2 2A 02 FB | 	rdlong	local07, objptr
021b8     01 2A 06 F1 | 	add	local07, #1
021bc     03 2A 66 F0 | 	shl	local07, #3
021c0     26 00 00 FF 
021c4     D0 E4 85 F1 | 	sub	objptr, ##19664
021c8     F2 34 02 F6 | 	mov	local12, objptr
021cc     F2 2A 02 F1 | 	add	local07, objptr
021d0     15 13 02 FB | 	rdlong	arg01, local07
021d4     40 01 00 FF 
021d8     A5 15 06 F6 | 	mov	arg02, ##@LR__4318
021dc     53 00 00 FF 
021e0     E0 E5 85 F1 | 	sub	objptr, ##42976
021e4     F0 69 B1 FD | 	call	#__system___string_cmp
021e8     00 FA 0D F2 | 	cmp	result1, #0 wz
021ec     64 00 90 5D |  if_ne	jmp	#LR__0110
021f0     7A 00 00 FF 
021f4     B0 E4 05 F1 | 	add	objptr, ##62640
021f8     F2 28 02 FB | 	rdlong	local06, objptr
021fc     01 28 06 F1 | 	add	local06, #1
02200     03 28 66 F0 | 	shl	local06, #3
02204     26 00 00 FF 
02208     D0 E4 85 F1 | 	sub	objptr, ##19664
0220c     F2 28 02 F1 | 	add	local06, objptr
02210     40 01 00 FF 
02214     A9 35 06 F6 | 	mov	local12, ##@LR__4319
02218     14 35 62 FC | 	wrlong	local12, local06
0221c     26 00 00 FF 
02220     D0 E4 05 F1 | 	add	objptr, ##19664
02224     F2 28 02 FB | 	rdlong	local06, objptr
02228     01 28 06 F1 | 	add	local06, #1
0222c     03 28 66 F0 | 	shl	local06, #3
02230     26 00 00 FF 
02234     D0 E4 85 F1 | 	sub	objptr, ##19664
02238     F2 28 02 F1 | 	add	local06, objptr
0223c     09 34 C6 F9 | 	decod	local12, #9
02240     04 28 06 F1 | 	add	local06, #4
02244     01 00 80 FF 
02248     14 01 68 FC | 	wrlong	##512, local06
0224c     53 00 00 FF 
02250     E0 E5 85 F1 | 	sub	objptr, ##42976
02254                 | LR__0110
02254                 | LR__0111
02254                 | ' if (lp$="mode" orelse lp$="m.") then 
02254     7A 00 00 FF 
02258     B4 E4 05 F1 | 	add	objptr, ##62644
0225c     F2 12 02 FB | 	rdlong	arg01, objptr
02260     7A 00 00 FF 
02264     B4 E4 85 F1 | 	sub	objptr, ##62644
02268     40 01 00 FF 
0226c     AB 15 06 F6 | 	mov	arg02, ##@LR__4320
02270     64 69 B1 FD | 	call	#__system___string_cmp
02274     00 FA 0D F2 | 	cmp	result1, #0 wz
02278     28 00 90 AD |  if_e	jmp	#LR__0112
0227c     7A 00 00 FF 
02280     B4 E4 05 F1 | 	add	objptr, ##62644
02284     F2 12 02 FB | 	rdlong	arg01, objptr
02288     7A 00 00 FF 
0228c     B4 E4 85 F1 | 	sub	objptr, ##62644
02290     40 01 00 FF 
02294     B0 15 06 F6 | 	mov	arg02, ##@LR__4321
02298     3C 69 B1 FD | 	call	#__system___string_cmp
0229c     00 FA 0D F2 | 	cmp	result1, #0 wz
022a0     48 02 90 5D |  if_ne	jmp	#LR__0118
022a4                 | LR__0112
022a4                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
022a4     7A 00 00 FF 
022a8     B0 E4 05 F1 | 	add	objptr, ##62640
022ac     F2 2A 02 FB | 	rdlong	local07, objptr
022b0     01 2A 06 F1 | 	add	local07, #1
022b4     03 2A 66 F0 | 	shl	local07, #3
022b8     26 00 00 FF 
022bc     D0 E4 85 F1 | 	sub	objptr, ##19664
022c0     F2 2A 02 F1 | 	add	local07, objptr
022c4     15 13 02 FB | 	rdlong	arg01, local07
022c8     40 01 00 FF 
022cc     B3 15 06 F6 | 	mov	arg02, ##@LR__4322
022d0     53 00 00 FF 
022d4     E0 E5 85 F1 | 	sub	objptr, ##42976
022d8     FC 68 B1 FD | 	call	#__system___string_cmp
022dc     00 FA 0D F2 | 	cmp	result1, #0 wz
022e0     34 00 90 5D |  if_ne	jmp	#LR__0113
022e4     7A 00 00 FF 
022e8     B0 E4 05 F1 | 	add	objptr, ##62640
022ec     F2 28 02 FB | 	rdlong	local06, objptr
022f0     01 28 06 F1 | 	add	local06, #1
022f4     03 28 66 F0 | 	shl	local06, #3
022f8     26 00 00 FF 
022fc     D0 E4 85 F1 | 	sub	objptr, ##19664
02300     F2 28 02 F1 | 	add	local06, objptr
02304     40 01 00 FF 
02308     B9 35 06 F6 | 	mov	local12, ##@LR__4323
0230c     14 35 62 FC | 	wrlong	local12, local06
02310     53 00 00 FF 
02314     E0 E5 85 F1 | 	sub	objptr, ##42976
02318                 | LR__0113
02318                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02318     7A 00 00 FF 
0231c     B0 E4 05 F1 | 	add	objptr, ##62640
02320     F2 2A 02 FB | 	rdlong	local07, objptr
02324     01 2A 06 F1 | 	add	local07, #1
02328     03 2A 66 F0 | 	shl	local07, #3
0232c     26 00 00 FF 
02330     D0 E4 85 F1 | 	sub	objptr, ##19664
02334     F2 2A 02 F1 | 	add	local07, objptr
02338     15 13 02 FB | 	rdlong	arg01, local07
0233c     40 01 00 FF 
02340     BB 15 06 F6 | 	mov	arg02, ##@LR__4324
02344     53 00 00 FF 
02348     E0 E5 85 F1 | 	sub	objptr, ##42976
0234c     88 68 B1 FD | 	call	#__system___string_cmp
02350     00 FA 0D F2 | 	cmp	result1, #0 wz
02354     34 00 90 5D |  if_ne	jmp	#LR__0114
02358     7A 00 00 FF 
0235c     B0 E4 05 F1 | 	add	objptr, ##62640
02360     F2 28 02 FB | 	rdlong	local06, objptr
02364     01 28 06 F1 | 	add	local06, #1
02368     03 28 66 F0 | 	shl	local06, #3
0236c     26 00 00 FF 
02370     D0 E4 85 F1 | 	sub	objptr, ##19664
02374     F2 28 02 F1 | 	add	local06, objptr
02378     40 01 00 FF 
0237c     C4 35 06 F6 | 	mov	local12, ##@LR__4325
02380     14 35 62 FC | 	wrlong	local12, local06
02384     53 00 00 FF 
02388     E0 E5 85 F1 | 	sub	objptr, ##42976
0238c                 | LR__0114
0238c                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
0238c     7A 00 00 FF 
02390     B0 E4 05 F1 | 	add	objptr, ##62640
02394     F2 2A 02 FB | 	rdlong	local07, objptr
02398     01 2A 06 F1 | 	add	local07, #1
0239c     03 2A 66 F0 | 	shl	local07, #3
023a0     26 00 00 FF 
023a4     D0 E4 85 F1 | 	sub	objptr, ##19664
023a8     F2 2A 02 F1 | 	add	local07, objptr
023ac     15 13 02 FB | 	rdlong	arg01, local07
023b0     40 01 00 FF 
023b4     C6 15 06 F6 | 	mov	arg02, ##@LR__4326
023b8     53 00 00 FF 
023bc     E0 E5 85 F1 | 	sub	objptr, ##42976
023c0     14 68 B1 FD | 	call	#__system___string_cmp
023c4     00 FA 0D F2 | 	cmp	result1, #0 wz
023c8     34 00 90 5D |  if_ne	jmp	#LR__0115
023cc     7A 00 00 FF 
023d0     B0 E4 05 F1 | 	add	objptr, ##62640
023d4     F2 28 02 FB | 	rdlong	local06, objptr
023d8     01 28 06 F1 | 	add	local06, #1
023dc     03 28 66 F0 | 	shl	local06, #3
023e0     26 00 00 FF 
023e4     D0 E4 85 F1 | 	sub	objptr, ##19664
023e8     F2 28 02 F1 | 	add	local06, objptr
023ec     40 01 00 FF 
023f0     CF 35 06 F6 | 	mov	local12, ##@LR__4327
023f4     14 35 62 FC | 	wrlong	local12, local06
023f8     53 00 00 FF 
023fc     E0 E5 85 F1 | 	sub	objptr, ##42976
02400                 | LR__0115
02400                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02400     7A 00 00 FF 
02404     B0 E4 05 F1 | 	add	objptr, ##62640
02408     F2 2A 02 FB | 	rdlong	local07, objptr
0240c     01 2A 06 F1 | 	add	local07, #1
02410     03 2A 66 F0 | 	shl	local07, #3
02414     26 00 00 FF 
02418     D0 E4 85 F1 | 	sub	objptr, ##19664
0241c     F2 2A 02 F1 | 	add	local07, objptr
02420     15 13 02 FB | 	rdlong	arg01, local07
02424     40 01 00 FF 
02428     D1 15 06 F6 | 	mov	arg02, ##@LR__4328
0242c     53 00 00 FF 
02430     E0 E5 85 F1 | 	sub	objptr, ##42976
02434     A0 67 B1 FD | 	call	#__system___string_cmp
02438     00 FA 0D F2 | 	cmp	result1, #0 wz
0243c     34 00 90 5D |  if_ne	jmp	#LR__0116
02440     7A 00 00 FF 
02444     B0 E4 05 F1 | 	add	objptr, ##62640
02448     F2 28 02 FB | 	rdlong	local06, objptr
0244c     01 28 06 F1 | 	add	local06, #1
02450     03 28 66 F0 | 	shl	local06, #3
02454     26 00 00 FF 
02458     D0 E4 85 F1 | 	sub	objptr, ##19664
0245c     F2 28 02 F1 | 	add	local06, objptr
02460     40 01 00 FF 
02464     DA 35 06 F6 | 	mov	local12, ##@LR__4329
02468     14 35 62 FC | 	wrlong	local12, local06
0246c     53 00 00 FF 
02470     E0 E5 85 F1 | 	sub	objptr, ##42976
02474                 | LR__0116
02474                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02474     7A 00 00 FF 
02478     B0 E4 05 F1 | 	add	objptr, ##62640
0247c     F2 2A 02 FB | 	rdlong	local07, objptr
02480     01 2A 06 F1 | 	add	local07, #1
02484     03 2A 66 F0 | 	shl	local07, #3
02488     26 00 00 FF 
0248c     D0 E4 85 F1 | 	sub	objptr, ##19664
02490     F2 34 02 F6 | 	mov	local12, objptr
02494     F2 2A 02 F1 | 	add	local07, objptr
02498     15 13 02 FB | 	rdlong	arg01, local07
0249c     40 01 00 FF 
024a0     DC 15 06 F6 | 	mov	arg02, ##@LR__4330
024a4     53 00 00 FF 
024a8     E0 E5 85 F1 | 	sub	objptr, ##42976
024ac     28 67 B1 FD | 	call	#__system___string_cmp
024b0     00 FA 0D F2 | 	cmp	result1, #0 wz
024b4     34 00 90 5D |  if_ne	jmp	#LR__0117
024b8     7A 00 00 FF 
024bc     B0 E4 05 F1 | 	add	objptr, ##62640
024c0     F2 28 02 FB | 	rdlong	local06, objptr
024c4     01 28 06 F1 | 	add	local06, #1
024c8     03 28 66 F0 | 	shl	local06, #3
024cc     26 00 00 FF 
024d0     D0 E4 85 F1 | 	sub	objptr, ##19664
024d4     F2 28 02 F1 | 	add	local06, objptr
024d8     40 01 00 FF 
024dc     DF 35 06 F6 | 	mov	local12, ##@LR__4331
024e0     14 35 62 FC | 	wrlong	local12, local06
024e4     53 00 00 FF 
024e8     E0 E5 85 F1 | 	sub	objptr, ##42976
024ec                 | LR__0117
024ec                 | LR__0118
024ec                 | ' 
024ec                 | ' 
024ec                 | ' 
024ec                 | ' 
024ec                 | ' 
024ec                 | ' 
024ec                 | ' ' 2a find part types 
024ec                 | ' 
024ec                 | ' for i=0 to k-1
024ec     00 24 06 F6 | 	mov	local04, #0
024f0     1E 63 02 F6 | 	mov	local35, local16
024f4                 | LR__0119
024f4     31 25 52 F2 | 	cmps	local04, local35 wc
024f8     74 05 90 3D |  if_ae	jmp	#LR__0128
024fc     12 31 02 F6 | 	mov	local10, local04
02500     03 30 66 F0 | 	shl	local10, #3
02504     53 00 00 FF 
02508     E0 E5 05 F1 | 	add	objptr, ##42976
0250c     F2 30 02 F1 | 	add	local10, objptr
02510     12 37 02 F6 | 	mov	local13, local04
02514     03 36 66 F0 | 	shl	local13, #3
02518     F2 4C 02 F6 | 	mov	local24, objptr
0251c     F2 36 02 F1 | 	add	local13, objptr
02520     1B 13 02 FB | 	rdlong	arg01, local13
02524     53 00 00 FF 
02528     E0 E5 85 F1 | 	sub	objptr, ##42976
0252c     60 0F B0 FD | 	call	#_isseparator
02530     FD FA E1 F8 | 	getbyte	result1, result1, #0
02534     04 30 06 F1 | 	add	local10, #4
02538     18 FB 61 FC | 	wrlong	result1, local10
0253c                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
0253c     12 31 02 F6 | 	mov	local10, local04
02540     03 30 66 F0 | 	shl	local10, #3
02544     53 00 00 FF 
02548     E0 E5 05 F1 | 	add	objptr, ##42976
0254c     F2 30 02 F1 | 	add	local10, objptr
02550     04 30 06 F1 | 	add	local10, #4
02554     18 35 02 FB | 	rdlong	local12, local10
02558     01 34 56 F2 | 	cmps	local12, #1 wc
0255c     53 00 00 FF 
02560     E0 E5 85 F1 | 	sub	objptr, ##42976
02564     00 05 90 3D |  if_ae	jmp	#LR__0127
02568     12 31 02 F6 | 	mov	local10, local04
0256c     03 30 66 F0 | 	shl	local10, #3
02570     53 00 00 FF 
02574     E0 E5 05 F1 | 	add	objptr, ##42976
02578     F2 30 02 F1 | 	add	local10, objptr
0257c     12 37 02 F6 | 	mov	local13, local04
02580     03 36 66 F0 | 	shl	local13, #3
02584     F2 4C 02 F6 | 	mov	local24, objptr
02588     F2 36 02 F1 | 	add	local13, objptr
0258c     1B 13 02 FB | 	rdlong	arg01, local13
02590     53 00 00 FF 
02594     E0 E5 85 F1 | 	sub	objptr, ##42976
02598     14 0C B0 FD | 	call	#_isoperator
0259c     FD FA E1 F8 | 	getbyte	result1, result1, #0
025a0     04 30 06 F1 | 	add	local10, #4
025a4     18 FB 61 FC | 	wrlong	result1, local10
025a8                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
025a8     12 31 02 F6 | 	mov	local10, local04
025ac     03 30 66 F0 | 	shl	local10, #3
025b0     53 00 00 FF 
025b4     E0 E5 05 F1 | 	add	objptr, ##42976
025b8     F2 30 02 F1 | 	add	local10, objptr
025bc     04 30 06 F1 | 	add	local10, #4
025c0     18 35 02 FB | 	rdlong	local12, local10
025c4     01 34 56 F2 | 	cmps	local12, #1 wc
025c8     53 00 00 FF 
025cc     E0 E5 85 F1 | 	sub	objptr, ##42976
025d0     94 04 90 3D |  if_ae	jmp	#LR__0127
025d4     12 31 02 F6 | 	mov	local10, local04
025d8     03 30 66 F0 | 	shl	local10, #3
025dc     53 00 00 FF 
025e0     E0 E5 05 F1 | 	add	objptr, ##42976
025e4     F2 30 02 F1 | 	add	local10, objptr
025e8     12 37 02 F6 | 	mov	local13, local04
025ec     03 36 66 F0 | 	shl	local13, #3
025f0     F2 4C 02 F6 | 	mov	local24, objptr
025f4     F2 36 02 F1 | 	add	local13, objptr
025f8     1B 13 02 FB | 	rdlong	arg01, local13
025fc     53 00 00 FF 
02600     E0 E5 85 F1 | 	sub	objptr, ##42976
02604                 | ' 
02604                 | ' select case s
02604     41 01 00 FF 
02608     95 14 06 F6 | 	mov	arg02, ##@LR__4384
0260c     C8 65 B1 FD | 	call	#__system___string_cmp
02610     00 FA 0D F2 | 	cmp	result1, #0 wz
02614     1B FA 05 A6 |  if_e	mov	result1, #27
02618     00 FA 05 56 |  if_ne	mov	result1, #0
0261c     FD FA E1 F8 | 	getbyte	result1, result1, #0
02620     04 30 06 F1 | 	add	local10, #4
02624     18 FB 61 FC | 	wrlong	result1, local10
02628                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02628     12 31 02 F6 | 	mov	local10, local04
0262c     03 30 66 F0 | 	shl	local10, #3
02630     53 00 00 FF 
02634     E0 E5 05 F1 | 	add	objptr, ##42976
02638     F2 30 02 F1 | 	add	local10, objptr
0263c     04 30 06 F1 | 	add	local10, #4
02640     18 35 02 FB | 	rdlong	local12, local10
02644     01 34 56 F2 | 	cmps	local12, #1 wc
02648     53 00 00 FF 
0264c     E0 E5 85 F1 | 	sub	objptr, ##42976
02650     14 04 90 3D |  if_ae	jmp	#LR__0127
02654     12 31 02 F6 | 	mov	local10, local04
02658     03 30 66 F0 | 	shl	local10, #3
0265c     53 00 00 FF 
02660     E0 E5 05 F1 | 	add	objptr, ##42976
02664     F2 30 02 F1 | 	add	local10, objptr
02668     12 37 02 F6 | 	mov	local13, local04
0266c     03 36 66 F0 | 	shl	local13, #3
02670     F2 4C 02 F6 | 	mov	local24, objptr
02674     F2 36 02 F1 | 	add	local13, objptr
02678     1B 13 02 FB | 	rdlong	arg01, local13
0267c     53 00 00 FF 
02680     E0 E5 85 F1 | 	sub	objptr, ##42976
02684     08 10 B0 FD | 	call	#_iscommand
02688     FD FA E1 F8 | 	getbyte	result1, result1, #0
0268c     04 30 06 F1 | 	add	local10, #4
02690     18 FB 61 FC | 	wrlong	result1, local10
02694                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
02694     12 31 02 F6 | 	mov	local10, local04
02698     03 30 66 F0 | 	shl	local10, #3
0269c     53 00 00 FF 
026a0     E0 E5 05 F1 | 	add	objptr, ##42976
026a4     F2 30 02 F1 | 	add	local10, objptr
026a8     04 30 06 F1 | 	add	local10, #4
026ac     18 35 02 FB | 	rdlong	local12, local10
026b0     01 34 56 F2 | 	cmps	local12, #1 wc
026b4     53 00 00 FF 
026b8     E0 E5 85 F1 | 	sub	objptr, ##42976
026bc     A8 03 90 3D |  if_ae	jmp	#LR__0127
026c0     12 31 02 F6 | 	mov	local10, local04
026c4     03 30 66 F0 | 	shl	local10, #3
026c8     53 00 00 FF 
026cc     E0 E5 05 F1 | 	add	objptr, ##42976
026d0     F2 30 02 F1 | 	add	local10, objptr
026d4     12 33 02 F6 | 	mov	local11, local04
026d8     19 39 02 F6 | 	mov	local14, local11
026dc     1C 37 02 F6 | 	mov	local13, local14
026e0     03 36 66 F0 | 	shl	local13, #3
026e4     F2 4C 02 F6 | 	mov	local24, objptr
026e8     F2 36 02 F1 | 	add	local13, objptr
026ec     1B 13 02 FB | 	rdlong	arg01, local13
026f0     53 00 00 FF 
026f4     E0 E5 85 F1 | 	sub	objptr, ##42976
026f8     74 19 B0 FD | 	call	#_isfunction
026fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
02700     04 30 06 F1 | 	add	local10, #4
02704     18 FB 61 FC | 	wrlong	result1, local10
02708                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
02708     12 31 02 F6 | 	mov	local10, local04
0270c     03 30 66 F0 | 	shl	local10, #3
02710     53 00 00 FF 
02714     E0 E5 05 F1 | 	add	objptr, ##42976
02718     F2 30 02 F1 | 	add	local10, objptr
0271c     04 30 06 F1 | 	add	local10, #4
02720     18 35 02 FB | 	rdlong	local12, local10
02724     01 34 56 F2 | 	cmps	local12, #1 wc
02728     53 00 00 FF 
0272c     E0 E5 85 F1 | 	sub	objptr, ##42976
02730     34 03 90 3D |  if_ae	jmp	#LR__0127
02734     12 29 02 F6 | 	mov	local06, local04
02738     03 28 66 F0 | 	shl	local06, #3
0273c     53 00 00 FF 
02740     E0 E5 05 F1 | 	add	objptr, ##42976
02744     F2 28 02 F1 | 	add	local06, objptr
02748     14 13 02 FB | 	rdlong	arg01, local06
0274c     53 00 00 FF 
02750     E0 E5 85 F1 | 	sub	objptr, ##42976
02754     2C 1E B0 FD | 	call	#_isnum
02758     FD 1E 02 F6 | 	mov	local01, result1
0275c     7A 00 00 FF 
02760     BC E4 05 F1 | 	add	objptr, ##62652
02764     F2 1E 62 FC | 	wrlong	local01, objptr
02768     12 29 02 F6 | 	mov	local06, local04
0276c     03 28 66 F0 | 	shl	local06, #3
02770     26 00 00 FF 
02774     DC E4 85 F1 | 	sub	objptr, ##19676
02778     F2 28 02 F1 | 	add	local06, objptr
0277c     14 13 02 FB | 	rdlong	arg01, local06
02780     53 00 00 FF 
02784     E0 E5 85 F1 | 	sub	objptr, ##42976
02788     D0 20 B0 FD | 	call	#_isint
0278c     FD 1E 02 F6 | 	mov	local01, result1
02790     7A 00 00 FF 
02794     C0 E4 05 F1 | 	add	objptr, ##62656
02798     F2 1E 62 FC | 	wrlong	local01, objptr
0279c     12 29 02 F6 | 	mov	local06, local04
027a0     03 28 66 F0 | 	shl	local06, #3
027a4     26 00 00 FF 
027a8     E0 E4 85 F1 | 	sub	objptr, ##19680
027ac     F2 2A 02 F6 | 	mov	local07, objptr
027b0     F2 28 02 F1 | 	add	local06, objptr
027b4     14 13 02 FB | 	rdlong	arg01, local06
027b8     53 00 00 FF 
027bc     E0 E5 85 F1 | 	sub	objptr, ##42976
027c0     F0 21 B0 FD | 	call	#_isdec
027c4     7A 00 00 FF 
027c8     C4 E4 05 F1 | 	add	objptr, ##62660
027cc     F2 FA 61 FC | 	wrlong	result1, objptr
027d0                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
027d0     08 E4 85 F1 | 	sub	objptr, #8
027d4     F2 1E 0A FB | 	rdlong	local01, objptr wz
027d8     7A 00 00 FF 
027dc     BC E4 85 F1 | 	sub	objptr, ##62652
027e0     60 00 90 AD |  if_e	jmp	#LR__0120
027e4     7A 00 00 FF 
027e8     C0 E4 05 F1 | 	add	objptr, ##62656
027ec     F2 30 0A FB | 	rdlong	local10, objptr wz
027f0     7A 00 00 FF 
027f4     C0 E4 85 F1 | 	sub	objptr, ##62656
027f8     48 00 90 AD |  if_e	jmp	#LR__0120
027fc     7A 00 00 FF 
02800     C4 E4 05 F1 | 	add	objptr, ##62660
02804     F2 34 0A FB | 	rdlong	local12, objptr wz
02808     7A 00 00 FF 
0280c     C4 E4 85 F1 | 	sub	objptr, ##62660
02810     30 00 90 AD |  if_e	jmp	#LR__0120
02814     12 27 02 F6 | 	mov	local05, local04
02818     13 31 02 F6 | 	mov	local10, local05
0281c     03 30 66 F0 | 	shl	local10, #3
02820     53 00 00 FF 
02824     E0 E5 05 F1 | 	add	objptr, ##42976
02828     F2 30 02 F1 | 	add	local10, objptr
0282c     04 30 06 F1 | 	add	local10, #4
02830     01 00 80 FF 
02834     18 01 68 FC | 	wrlong	##512, local10
02838     53 00 00 FF 
0283c     E0 E5 85 F1 | 	sub	objptr, ##42976
02840     24 02 90 FD | 	jmp	#LR__0127
02844                 | LR__0120
02844                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
02844     7A 00 00 FF 
02848     BC E4 05 F1 | 	add	objptr, ##62652
0284c     F2 1E 0A FB | 	rdlong	local01, objptr wz
02850     7A 00 00 FF 
02854     BC E4 85 F1 | 	sub	objptr, ##62652
02858     64 00 90 AD |  if_e	jmp	#LR__0121
0285c     7A 00 00 FF 
02860     C0 E4 05 F1 | 	add	objptr, ##62656
02864     F2 30 0A FB | 	rdlong	local10, objptr wz
02868     7A 00 00 FF 
0286c     C0 E4 85 F1 | 	sub	objptr, ##62656
02870     7A 00 00 5F 
02874     C4 E4 05 51 |  if_ne	add	objptr, ##62660
02878     F2 34 02 5B |  if_ne	rdlong	local12, objptr
0287c     7A 00 00 5F 
02880     C4 E4 85 51 |  if_ne	sub	objptr, ##62660
02884     1A 2B 22 56 |  if_ne	not	local07, local12
02888     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
0288c     30 00 90 AD |  if_e	jmp	#LR__0121
02890     12 27 02 F6 | 	mov	local05, local04
02894     13 31 02 F6 | 	mov	local10, local05
02898     03 30 66 F0 | 	shl	local10, #3
0289c     53 00 00 FF 
028a0     E0 E5 05 F1 | 	add	objptr, ##42976
028a4     F2 30 02 F1 | 	add	local10, objptr
028a8     04 30 06 F1 | 	add	local10, #4
028ac     01 00 80 FF 
028b0     18 03 68 FC | 	wrlong	##513, local10
028b4     53 00 00 FF 
028b8     E0 E5 85 F1 | 	sub	objptr, ##42976
028bc     A8 01 90 FD | 	jmp	#LR__0127
028c0                 | LR__0121
028c0                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
028c0     7A 00 00 FF 
028c4     BC E4 05 F1 | 	add	objptr, ##62652
028c8     F2 1E 0A FB | 	rdlong	local01, objptr wz
028cc     7A 00 00 FF 
028d0     BC E4 85 F1 | 	sub	objptr, ##62652
028d4     7A 00 00 5F 
028d8     C0 E4 05 51 |  if_ne	add	objptr, ##62656
028dc     F2 30 02 5B |  if_ne	rdlong	local10, objptr
028e0     7A 00 00 5F 
028e4     C0 E4 85 51 |  if_ne	sub	objptr, ##62656
028e8     18 31 22 56 |  if_ne	not	local10, local10
028ec     00 30 0E 52 |  if_ne	cmp	local10, #0 wz
028f0     7A 00 00 5F 
028f4     C4 E4 05 51 |  if_ne	add	objptr, ##62660
028f8     F2 34 02 5B |  if_ne	rdlong	local12, objptr
028fc     7A 00 00 5F 
02900     C4 E4 85 51 |  if_ne	sub	objptr, ##62660
02904     1A 2B 22 56 |  if_ne	not	local07, local12
02908     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
0290c     30 00 90 AD |  if_e	jmp	#LR__0122
02910     12 27 02 F6 | 	mov	local05, local04
02914     13 31 02 F6 | 	mov	local10, local05
02918     03 30 66 F0 | 	shl	local10, #3
0291c     53 00 00 FF 
02920     E0 E5 05 F1 | 	add	objptr, ##42976
02924     F2 30 02 F1 | 	add	local10, objptr
02928     04 30 06 F1 | 	add	local10, #4
0292c     01 00 80 FF 
02930     18 05 68 FC | 	wrlong	##514, local10
02934     53 00 00 FF 
02938     E0 E5 85 F1 | 	sub	objptr, ##42976
0293c     28 01 90 FD | 	jmp	#LR__0127
02940                 | LR__0122
02940                 | ' 
02940                 | ' if isstring(lparts(i).part$) then 
02940     12 29 02 F6 | 	mov	local06, local04
02944     03 28 66 F0 | 	shl	local06, #3
02948     53 00 00 FF 
0294c     E0 E5 05 F1 | 	add	objptr, ##42976
02950     F2 28 02 F1 | 	add	local06, objptr
02954     14 13 02 FB | 	rdlong	arg01, local06
02958     53 00 00 FF 
0295c     E0 E5 85 F1 | 	sub	objptr, ##42976
02960     10 21 B0 FD | 	call	#_isstring
02964     00 FA 0D F2 | 	cmp	result1, #0 wz
02968     A0 00 90 AD |  if_e	jmp	#LR__0125
0296c     12 31 02 F6 | 	mov	local10, local04
02970     03 30 66 F0 | 	shl	local10, #3
02974     53 00 00 FF 
02978     E0 E5 05 F1 | 	add	objptr, ##42976
0297c     F2 30 02 F1 | 	add	local10, objptr
02980     04 30 06 F1 | 	add	local10, #4
02984     01 00 80 FF 
02988     18 07 68 FC | 	wrlong	##515, local10
0298c     12 27 02 F6 | 	mov	local05, local04
02990     13 31 02 F6 | 	mov	local10, local05
02994     03 30 66 F0 | 	shl	local10, #3
02998     F2 30 02 F1 | 	add	local10, objptr
0299c     12 39 02 F6 | 	mov	local14, local04
029a0     03 38 66 F0 | 	shl	local14, #3
029a4     F2 38 02 F1 | 	add	local14, objptr
029a8     1C 2B 02 FB | 	rdlong	local07, local14
029ac     02 34 06 F6 | 	mov	local12, #2
029b0     12 4D 02 F6 | 	mov	local24, local04
029b4     26 45 02 F6 | 	mov	local20, local24
029b8     22 47 02 F6 | 	mov	local21, local20
029bc     03 46 66 F0 | 	shl	local21, #3
029c0     F2 48 02 F6 | 	mov	local22, objptr
029c4     F2 46 02 F1 | 	add	local21, objptr
029c8     23 13 02 FB | 	rdlong	arg01, local21
029cc     53 00 00 FF 
029d0     E0 E5 85 F1 | 	sub	objptr, ##42976
029d4     09 2D 02 F6 | 	mov	local08, arg01
029d8     97 06 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
029dc                 | LR__0123
029dc     16 FB C9 FA | 	rdbyte	result1, local08 wz
029e0     01 2C 06 51 |  if_ne	add	local08, #1
029e4     F4 FF 9F 5D |  if_ne	jmp	#LR__0123
029e8                 | LR__0124
029e8     09 2D 82 F1 | 	sub	local08, arg01
029ec     16 37 02 F6 | 	mov	local13, local08
029f0     1B 17 02 F6 | 	mov	arg03, local13
029f4     02 16 86 F1 | 	sub	arg03, #2
029f8     15 13 02 F6 | 	mov	arg01, local07
029fc     1A 15 02 F6 | 	mov	arg02, local12
02a00     D4 82 B1 FD | 	call	#__system__Mid_S
02a04     18 FB 61 FC | 	wrlong	result1, local10
02a08     5C 00 90 FD | 	jmp	#LR__0127
02a0c                 | LR__0125
02a0c                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02a0c     12 27 02 F6 | 	mov	local05, local04
02a10     13 29 02 F6 | 	mov	local06, local05
02a14     03 28 66 F0 | 	shl	local06, #3
02a18     53 00 00 FF 
02a1c     E0 E5 05 F1 | 	add	objptr, ##42976
02a20     F2 28 02 F1 | 	add	local06, objptr
02a24     14 13 02 FB | 	rdlong	arg01, local06
02a28     53 00 00 FF 
02a2c     E0 E5 85 F1 | 	sub	objptr, ##42976
02a30     DC 18 B0 FD | 	call	#_isname
02a34     00 FA 0D F2 | 	cmp	result1, #0 wz
02a38     2C 00 90 AD |  if_e	jmp	#LR__0126
02a3c     12 27 02 F6 | 	mov	local05, local04
02a40     13 31 02 F6 | 	mov	local10, local05
02a44     03 30 66 F0 | 	shl	local10, #3
02a48     53 00 00 FF 
02a4c     E0 E5 05 F1 | 	add	objptr, ##42976
02a50     F2 30 02 F1 | 	add	local10, objptr
02a54     04 30 06 F1 | 	add	local10, #4
02a58     01 00 80 FF 
02a5c     18 09 68 FC | 	wrlong	##516, local10
02a60     53 00 00 FF 
02a64     E0 E5 85 F1 | 	sub	objptr, ##42976
02a68                 | LR__0126
02a68                 | LR__0127
02a68     01 24 06 F1 | 	add	local04, #1
02a6c     84 FA 9F FD | 	jmp	#LR__0119
02a70                 | LR__0128
02a70     1E 31 02 F6 | 	mov	local10, local16
02a74     03 30 66 F0 | 	shl	local10, #3
02a78     53 00 00 FF 
02a7c     E0 E5 05 F1 | 	add	objptr, ##42976
02a80     F2 30 02 F1 | 	add	local10, objptr
02a84     04 30 06 F1 | 	add	local10, #4
02a88     18 FD 6B FC | 	wrlong	#510, local10
02a8c     1E 31 02 F6 | 	mov	local10, local16
02a90     03 30 66 F0 | 	shl	local10, #3
02a94     F2 28 02 F6 | 	mov	local06, objptr
02a98     F2 30 02 F1 | 	add	local10, objptr
02a9c     40 01 00 FF 
02aa0     E1 2B 06 F6 | 	mov	local07, ##@LR__4332
02aa4     18 2B 62 FC | 	wrlong	local07, local10
02aa8     10 00 00 FF 
02aac     54 E4 05 F1 | 	add	objptr, ##8276
02ab0     F2 3C 62 FC | 	wrlong	local16, objptr
02ab4                 | ' 
02ab4                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02ab4                 | ' 
02ab4                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02ab4                 | '  
02ab4                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02ab4     16 00 00 FF 
02ab8     80 E4 05 F1 | 	add	objptr, ##11392
02abc     F2 12 02 FB | 	rdlong	arg01, objptr
02ac0     7A 00 00 FF 
02ac4     B4 E4 85 F1 | 	sub	objptr, ##62644
02ac8     40 01 00 FF 
02acc     E2 31 06 F6 | 	mov	local10, ##@LR__4333
02ad0     18 15 02 F6 | 	mov	arg02, local10
02ad4     00 61 B1 FD | 	call	#__system___string_cmp
02ad8     00 FA 0D F2 | 	cmp	result1, #0 wz
02adc     EC 00 90 AD |  if_e	jmp	#LR__0129
02ae0     7A 00 00 FF 
02ae4     B4 E4 05 F1 | 	add	objptr, ##62644
02ae8     F2 12 02 FB | 	rdlong	arg01, objptr
02aec     7A 00 00 FF 
02af0     B4 E4 85 F1 | 	sub	objptr, ##62644
02af4     40 01 00 FF 
02af8     E7 29 06 F6 | 	mov	local06, ##@LR__4334
02afc     14 31 02 F6 | 	mov	local10, local06
02b00     18 15 02 F6 | 	mov	arg02, local10
02b04     D0 60 B1 FD | 	call	#__system___string_cmp
02b08     00 FA 0D F2 | 	cmp	result1, #0 wz
02b0c     BC 00 90 AD |  if_e	jmp	#LR__0129
02b10     7A 00 00 FF 
02b14     B4 E4 05 F1 | 	add	objptr, ##62644
02b18     F2 12 02 FB | 	rdlong	arg01, objptr
02b1c     7A 00 00 FF 
02b20     B4 E4 85 F1 | 	sub	objptr, ##62644
02b24     40 01 00 FF 
02b28     EC 2B 06 F6 | 	mov	local07, ##@LR__4335
02b2c     15 29 02 F6 | 	mov	local06, local07
02b30     14 15 02 F6 | 	mov	arg02, local06
02b34     A0 60 B1 FD | 	call	#__system___string_cmp
02b38     FD 30 0A F6 | 	mov	local10, result1 wz
02b3c     8C 00 90 AD |  if_e	jmp	#LR__0129
02b40     7A 00 00 FF 
02b44     B4 E4 05 F1 | 	add	objptr, ##62644
02b48     F2 12 02 FB | 	rdlong	arg01, objptr
02b4c     7A 00 00 FF 
02b50     B4 E4 85 F1 | 	sub	objptr, ##62644
02b54     40 01 00 FF 
02b58     F1 35 06 F6 | 	mov	local12, ##@LR__4336
02b5c     1A 2B 02 F6 | 	mov	local07, local12
02b60     15 15 02 F6 | 	mov	arg02, local07
02b64     70 60 B1 FD | 	call	#__system___string_cmp
02b68     FD 28 0A F6 | 	mov	local06, result1 wz
02b6c     5C 00 90 AD |  if_e	jmp	#LR__0129
02b70     7A 00 00 FF 
02b74     B4 E4 05 F1 | 	add	objptr, ##62644
02b78     F2 12 02 FB | 	rdlong	arg01, objptr
02b7c     7A 00 00 FF 
02b80     B4 E4 85 F1 | 	sub	objptr, ##62644
02b84     40 01 00 FF 
02b88     F5 35 06 F6 | 	mov	local12, ##@LR__4337
02b8c     1A 15 02 F6 | 	mov	arg02, local12
02b90     44 60 B1 FD | 	call	#__system___string_cmp
02b94     FD 2A 0A F6 | 	mov	local07, result1 wz
02b98     30 00 90 AD |  if_e	jmp	#LR__0129
02b9c     7A 00 00 FF 
02ba0     B4 E4 05 F1 | 	add	objptr, ##62644
02ba4     F2 12 02 FB | 	rdlong	arg01, objptr
02ba8     7A 00 00 FF 
02bac     B4 E4 85 F1 | 	sub	objptr, ##62644
02bb0     40 01 00 FF 
02bb4     F8 39 06 F6 | 	mov	local14, ##@LR__4338
02bb8     1C 33 02 F6 | 	mov	local11, local14
02bbc     19 15 02 F6 | 	mov	arg02, local11
02bc0     14 60 B1 FD | 	call	#__system___string_cmp
02bc4     FD 34 0A F6 | 	mov	local12, result1 wz
02bc8     9C 00 90 5D |  if_ne	jmp	#LR__0130
02bcc                 | LR__0129
02bcc     7A 00 00 FF 
02bd0     B0 E4 05 F1 | 	add	objptr, ##62640
02bd4     F2 38 02 FB | 	rdlong	local14, objptr
02bd8     1C 33 02 F6 | 	mov	local11, local14
02bdc     01 32 06 F1 | 	add	local11, #1
02be0     19 37 02 F6 | 	mov	local13, local11
02be4     1B 4D 02 F6 | 	mov	local24, local13
02be8     03 4C 66 F0 | 	shl	local24, #3
02bec     26 00 00 FF 
02bf0     D0 E4 85 F1 | 	sub	objptr, ##19664
02bf4     F2 44 02 F6 | 	mov	local20, objptr
02bf8     F2 4C 02 F1 | 	add	local24, objptr
02bfc     04 4C 06 F1 | 	add	local24, #4
02c00     26 49 02 FB | 	rdlong	local22, local24
02c04     04 4C 86 F1 | 	sub	local24, #4
02c08     24 47 02 F6 | 	mov	local21, local22
02c0c     01 00 00 FF 
02c10     04 46 0E F2 | 	cmp	local21, ##516 wz
02c14     53 00 00 FF 
02c18     E0 E5 85 F1 | 	sub	objptr, ##42976
02c1c     48 00 90 5D |  if_ne	jmp	#LR__0130
02c20     7A 00 00 FF 
02c24     B0 E4 05 F1 | 	add	objptr, ##62640
02c28     F2 30 02 FB | 	rdlong	local10, objptr
02c2c     01 30 06 F1 | 	add	local10, #1
02c30     18 29 02 F6 | 	mov	local06, local10
02c34     03 28 66 F0 | 	shl	local06, #3
02c38     26 00 00 FF 
02c3c     D0 E4 85 F1 | 	sub	objptr, ##19664
02c40     F2 2A 02 F6 | 	mov	local07, objptr
02c44     F2 28 02 F1 | 	add	local06, objptr
02c48     01 00 00 FF 
02c4c     03 34 06 F6 | 	mov	local12, ##515
02c50     04 28 06 F1 | 	add	local06, #4
02c54     01 00 80 FF 
02c58     14 07 68 FC | 	wrlong	##515, local06
02c5c     04 28 86 F1 | 	sub	local06, #4
02c60     53 00 00 FF 
02c64     E0 E5 85 F1 | 	sub	objptr, ##42976
02c68                 | LR__0130
02c68                 | ' 
02c68                 | ' ' abbreviated command has to be at the position addptr
02c68                 | ' 
02c68                 | ' 
02c68                 | ' 
02c68                 | ' '2b determine a type of the line
02c68                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02c68     53 00 00 FF 
02c6c     E0 E5 05 F1 | 	add	objptr, ##42976
02c70     F2 12 02 FB | 	rdlong	arg01, objptr
02c74     53 00 00 FF 
02c78     E0 E5 85 F1 | 	sub	objptr, ##42976
02c7c     34 1D B0 FD | 	call	#_isdec
02c80     00 FA 0D F2 | 	cmp	result1, #0 wz
02c84     20 00 90 AD |  if_e	jmp	#LR__0131
02c88     53 00 00 FF 
02c8c     E0 E5 05 F1 | 	add	objptr, ##42976
02c90     F2 12 02 FB | 	rdlong	arg01, objptr
02c94     53 00 00 FF 
02c98     E0 E5 85 F1 | 	sub	objptr, ##42976
02c9c     00 14 06 F6 | 	mov	arg02, #0
02ca0     70 90 B1 FD | 	call	#__system____builtin_atoi
02ca4     FD 20 02 F6 | 	mov	local02, result1
02ca8                 | LR__0131
02ca8                 | ' 
02ca8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02ca8     01 20 16 F2 | 	cmp	local02, #1 wc
02cac     2C 00 90 CD |  if_b	jmp	#LR__0132
02cb0     01 3C 0E F2 | 	cmp	local16, #1 wz
02cb4     55 00 00 AF 
02cb8     F8 E5 05 A1 |  if_e	add	objptr, ##44024
02cbc     F2 1E 02 AB |  if_e	rdlong	local01, objptr
02cc0     55 00 00 AF 
02cc4     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
02cc8     03 1E 0E A2 |  if_e	cmp	local01, #3 wz
02ccc     0C 00 90 5D |  if_ne	jmp	#LR__0132
02cd0     10 13 02 F6 | 	mov	arg01, local02
02cd4     00 1E B0 FD | 	call	#_deleteline
02cd8     C8 04 90 FD | 	jmp	#LR__0148
02cdc                 | LR__0132
02cdc                 | ' 
02cdc                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02cdc     01 20 16 F2 | 	cmp	local02, #1 wc
02ce0     E0 00 90 CD |  if_b	jmp	#LR__0135
02ce4     55 00 00 FF 
02ce8     F8 E5 05 F1 | 	add	objptr, ##44024
02cec     F2 1E 0A FB | 	rdlong	local01, objptr wz
02cf0     55 00 00 FF 
02cf4     F8 E5 85 F1 | 	sub	objptr, ##44024
02cf8     20 00 90 AD |  if_e	jmp	#LR__0133
02cfc     55 00 00 FF 
02d00     F8 E5 05 F1 | 	add	objptr, ##44024
02d04     F2 28 02 FB | 	rdlong	local06, objptr
02d08     55 00 00 FF 
02d0c     F8 E5 85 F1 | 	sub	objptr, ##44024
02d10     14 31 02 F6 | 	mov	local10, local06
02d14     03 30 0E F2 | 	cmp	local10, #3 wz
02d18     A8 00 90 5D |  if_ne	jmp	#LR__0135
02d1c                 | LR__0133
02d1c     53 00 00 FF 
02d20     F4 E5 05 F1 | 	add	objptr, ##42996
02d24     F2 34 02 FB | 	rdlong	local12, objptr
02d28     53 00 00 FF 
02d2c     F4 E5 85 F1 | 	sub	objptr, ##42996
02d30     1A 2B 02 F6 | 	mov	local07, local12
02d34     1B 2A 0E F2 | 	cmp	local07, #27 wz
02d38     88 00 90 AD |  if_e	jmp	#LR__0135
02d3c     55 00 00 FF 
02d40     F8 E5 05 F1 | 	add	objptr, ##44024
02d44     F2 16 02 FB | 	rdlong	arg03, objptr
02d48     55 00 00 FF 
02d4c     F8 E5 85 F1 | 	sub	objptr, ##44024
02d50     10 13 02 F6 | 	mov	arg01, local02
02d54     00 14 06 F6 | 	mov	arg02, #0
02d58     C4 30 B0 FD | 	call	#_compile
02d5c     FD 22 0A F6 | 	mov	local03, result1 wz
02d60                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02d60                 | '   if err<>0 then printerror(err): goto 104
02d60     0C 00 90 AD |  if_e	jmp	#LR__0134
02d64     11 13 02 F6 | 	mov	arg01, local03
02d68     20 29 B1 FD | 	call	#_printerror
02d6c     34 04 90 FD | 	jmp	#LR__0148
02d70                 | LR__0134
02d70                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02d70     7A 00 00 FF 
02d74     8C E4 05 F1 | 	add	objptr, ##62604
02d78     F2 12 02 FB | 	rdlong	arg01, objptr
02d7c     7A 00 00 FF 
02d80     8C E4 85 F1 | 	sub	objptr, ##62604
02d84     40 01 00 FF 
02d88     FC 15 06 F6 | 	mov	arg02, ##@LR__4339
02d8c     48 5E B1 FD | 	call	#__system___string_cmp
02d90     00 FA 0D F2 | 	cmp	result1, #0 wz
02d94     0C 04 90 AD |  if_e	jmp	#LR__0148
02d98     7A 00 00 FF 
02d9c     8C E4 05 F1 | 	add	objptr, ##62604
02da0     F2 1E 02 FB | 	rdlong	local01, objptr
02da4     24 00 00 FF 
02da8     9C E4 85 F1 | 	sub	objptr, ##18588
02dac     F2 1E 62 FC | 	wrlong	local01, objptr
02db0     08 E4 05 F1 | 	add	objptr, #8
02db4     F2 08 68 FC | 	wrlong	#4, objptr
02db8     55 00 00 FF 
02dbc     F8 E5 85 F1 | 	sub	objptr, ##44024
02dc0     A4 DC 9F FD | 	jmp	#LR__0020
02dc4                 | LR__0135
02dc4                 | '       							
02dc4                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02dc4     01 20 16 F2 | 	cmp	local02, #1 wc
02dc8     E4 00 90 CD |  if_b	jmp	#LR__0138
02dcc     55 00 00 FF 
02dd0     F8 E5 05 F1 | 	add	objptr, ##44024
02dd4     F2 1E 02 FB | 	rdlong	local01, objptr
02dd8     55 00 00 FF 
02ddc     F8 E5 85 F1 | 	sub	objptr, ##44024
02de0     01 1E 0E F2 | 	cmp	local01, #1 wz
02de4     20 00 90 AD |  if_e	jmp	#LR__0136
02de8     55 00 00 FF 
02dec     F8 E5 05 F1 | 	add	objptr, ##44024
02df0     F2 28 02 FB | 	rdlong	local06, objptr
02df4     55 00 00 FF 
02df8     F8 E5 85 F1 | 	sub	objptr, ##44024
02dfc     14 31 02 F6 | 	mov	local10, local06
02e00     02 30 0E F2 | 	cmp	local10, #2 wz
02e04     A8 00 90 5D |  if_ne	jmp	#LR__0138
02e08                 | LR__0136
02e08     53 00 00 FF 
02e0c     EC E5 05 F1 | 	add	objptr, ##42988
02e10     F2 34 02 FB | 	rdlong	local12, objptr
02e14     53 00 00 FF 
02e18     EC E5 85 F1 | 	sub	objptr, ##42988
02e1c     1A 2B 02 F6 | 	mov	local07, local12
02e20     1B 2A 0E F2 | 	cmp	local07, #27 wz
02e24     88 00 90 AD |  if_e	jmp	#LR__0138
02e28     55 00 00 FF 
02e2c     F8 E5 05 F1 | 	add	objptr, ##44024
02e30     F2 16 02 FB | 	rdlong	arg03, objptr
02e34     55 00 00 FF 
02e38     F8 E5 85 F1 | 	sub	objptr, ##44024
02e3c     10 13 02 F6 | 	mov	arg01, local02
02e40     00 14 06 F6 | 	mov	arg02, #0
02e44     D8 2F B0 FD | 	call	#_compile
02e48     FD 22 0A F6 | 	mov	local03, result1 wz
02e4c                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02e4c                 | '   if err<>0 then printerror(err): goto 104
02e4c     0C 00 90 AD |  if_e	jmp	#LR__0137
02e50     11 13 02 F6 | 	mov	arg01, local03
02e54     34 28 B1 FD | 	call	#_printerror
02e58     48 03 90 FD | 	jmp	#LR__0148
02e5c                 | LR__0137
02e5c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02e5c     7A 00 00 FF 
02e60     8C E4 05 F1 | 	add	objptr, ##62604
02e64     F2 12 02 FB | 	rdlong	arg01, objptr
02e68     7A 00 00 FF 
02e6c     8C E4 85 F1 | 	sub	objptr, ##62604
02e70     40 01 00 FF 
02e74     FD 15 06 F6 | 	mov	arg02, ##@LR__4340
02e78     5C 5D B1 FD | 	call	#__system___string_cmp
02e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e80     20 03 90 AD |  if_e	jmp	#LR__0148
02e84     7A 00 00 FF 
02e88     8C E4 05 F1 | 	add	objptr, ##62604
02e8c     F2 1E 02 FB | 	rdlong	local01, objptr
02e90     24 00 00 FF 
02e94     9C E4 85 F1 | 	sub	objptr, ##18588
02e98     F2 1E 62 FC | 	wrlong	local01, objptr
02e9c     08 E4 05 F1 | 	add	objptr, #8
02ea0     F2 08 68 FC | 	wrlong	#4, objptr
02ea4     55 00 00 FF 
02ea8     F8 E5 85 F1 | 	sub	objptr, ##44024
02eac     B8 DB 9F FD | 	jmp	#LR__0020
02eb0                 | LR__0138
02eb0                 | ' 							 
02eb0                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
02eb0     01 20 16 F2 | 	cmp	local02, #1 wc
02eb4     C0 00 90 CD |  if_b	jmp	#LR__0139
02eb8     55 00 00 FF 
02ebc     F8 E5 05 F1 | 	add	objptr, ##44024
02ec0     F2 1E 0A FB | 	rdlong	local01, objptr wz
02ec4     55 00 00 FF 
02ec8     F8 E5 85 F1 | 	sub	objptr, ##44024
02ecc     55 00 00 5F 
02ed0     F8 E5 05 51 |  if_ne	add	objptr, ##44024
02ed4     F2 28 02 5B |  if_ne	rdlong	local06, objptr
02ed8     55 00 00 5F 
02edc     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
02ee0     03 28 0E 52 |  if_ne	cmp	local06, #3 wz
02ee4     53 00 00 AF 
02ee8     F4 E5 05 A1 |  if_e	add	objptr, ##42996
02eec     F2 34 02 AB |  if_e	rdlong	local12, objptr
02ef0     53 00 00 AF 
02ef4     F4 E5 85 A1 |  if_e	sub	objptr, ##42996
02ef8     1A 2B 02 A6 |  if_e	mov	local07, local12
02efc     1B 2A 0E A2 |  if_e	cmp	local07, #27 wz
02f00     74 00 90 5D |  if_ne	jmp	#LR__0139
02f04     55 00 00 FF 
02f08     F8 E5 05 F1 | 	add	objptr, ##44024
02f0c     F2 16 02 FB | 	rdlong	arg03, objptr
02f10     55 00 00 FF 
02f14     F8 E5 85 F1 | 	sub	objptr, ##44024
02f18     10 13 02 F6 | 	mov	arg01, local02
02f1c     00 14 06 F6 | 	mov	arg02, #0
02f20     CC 2F B0 FD | 	call	#_compile_assign
02f24                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02f24                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02f24     7A 00 00 FF 
02f28     8C E4 05 F1 | 	add	objptr, ##62604
02f2c     F2 12 02 FB | 	rdlong	arg01, objptr
02f30     7A 00 00 FF 
02f34     8C E4 85 F1 | 	sub	objptr, ##62604
02f38     40 01 00 FF 
02f3c     FE 15 06 F6 | 	mov	arg02, ##@LR__4341
02f40     94 5C B1 FD | 	call	#__system___string_cmp
02f44     00 FA 0D F2 | 	cmp	result1, #0 wz
02f48     58 02 90 AD |  if_e	jmp	#LR__0148
02f4c     7A 00 00 FF 
02f50     8C E4 05 F1 | 	add	objptr, ##62604
02f54     F2 1E 02 FB | 	rdlong	local01, objptr
02f58     24 00 00 FF 
02f5c     9C E4 85 F1 | 	sub	objptr, ##18588
02f60     F2 1E 62 FC | 	wrlong	local01, objptr
02f64     08 E4 05 F1 | 	add	objptr, #8
02f68     F2 08 68 FC | 	wrlong	#4, objptr
02f6c     55 00 00 FF 
02f70     F8 E5 85 F1 | 	sub	objptr, ##44024
02f74     F0 DA 9F FD | 	jmp	#LR__0020
02f78                 | LR__0139
02f78                 | '     							 
02f78                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
02f78     01 20 16 F2 | 	cmp	local02, #1 wc
02f7c     C0 00 90 CD |  if_b	jmp	#LR__0140
02f80     55 00 00 FF 
02f84     F8 E5 05 F1 | 	add	objptr, ##44024
02f88     F2 1E 02 FB | 	rdlong	local01, objptr
02f8c     55 00 00 FF 
02f90     F8 E5 85 F1 | 	sub	objptr, ##44024
02f94     01 1E 0E F2 | 	cmp	local01, #1 wz
02f98     55 00 00 5F 
02f9c     F8 E5 05 51 |  if_ne	add	objptr, ##44024
02fa0     F2 30 02 5B |  if_ne	rdlong	local10, objptr
02fa4     55 00 00 5F 
02fa8     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
02fac     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
02fb0     53 00 00 AF 
02fb4     EC E5 05 A1 |  if_e	add	objptr, ##42988
02fb8     F2 34 02 AB |  if_e	rdlong	local12, objptr
02fbc     53 00 00 AF 
02fc0     EC E5 85 A1 |  if_e	sub	objptr, ##42988
02fc4     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
02fc8     74 00 90 5D |  if_ne	jmp	#LR__0140
02fcc     55 00 00 FF 
02fd0     F8 E5 05 F1 | 	add	objptr, ##44024
02fd4     F2 16 02 FB | 	rdlong	arg03, objptr
02fd8     55 00 00 FF 
02fdc     F8 E5 85 F1 | 	sub	objptr, ##44024
02fe0     10 13 02 F6 | 	mov	arg01, local02
02fe4     00 14 06 F6 | 	mov	arg02, #0
02fe8     04 2F B0 FD | 	call	#_compile_assign
02fec                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
02fec                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
02fec     7A 00 00 FF 
02ff0     8C E4 05 F1 | 	add	objptr, ##62604
02ff4     F2 12 02 FB | 	rdlong	arg01, objptr
02ff8     7A 00 00 FF 
02ffc     8C E4 85 F1 | 	sub	objptr, ##62604
03000     40 01 00 FF 
03004     FF 15 06 F6 | 	mov	arg02, ##@LR__4342
03008     CC 5B B1 FD | 	call	#__system___string_cmp
0300c     00 FA 0D F2 | 	cmp	result1, #0 wz
03010     90 01 90 AD |  if_e	jmp	#LR__0148
03014     7A 00 00 FF 
03018     8C E4 05 F1 | 	add	objptr, ##62604
0301c     F2 1E 02 FB | 	rdlong	local01, objptr
03020     24 00 00 FF 
03024     9C E4 85 F1 | 	sub	objptr, ##18588
03028     F2 1E 62 FC | 	wrlong	local01, objptr
0302c     08 E4 05 F1 | 	add	objptr, #8
03030     F2 08 68 FC | 	wrlong	#4, objptr
03034     55 00 00 FF 
03038     F8 E5 85 F1 | 	sub	objptr, ##44024
0303c     28 DA 9F FD | 	jmp	#LR__0020
03040                 | LR__0140
03040                 | ' 
03040                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
03040     53 00 00 FF 
03044     E4 E5 05 F1 | 	add	objptr, ##42980
03048     F2 1E 02 FB | 	rdlong	local01, objptr
0304c     53 00 00 FF 
03050     E4 E5 85 F1 | 	sub	objptr, ##42980
03054     01 00 00 FF 
03058     04 1E 0E F2 | 	cmp	local01, ##516 wz
0305c     53 00 00 AF 
03060     EC E5 05 A1 |  if_e	add	objptr, ##42988
03064     F2 30 02 AB |  if_e	rdlong	local10, objptr
03068     53 00 00 AF 
0306c     EC E5 85 A1 |  if_e	sub	objptr, ##42988
03070     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
03074     14 00 90 5D |  if_ne	jmp	#LR__0141
03078     00 12 06 F6 | 	mov	arg01, #0
0307c     00 14 06 F6 | 	mov	arg02, #0
03080     00 16 06 F6 | 	mov	arg03, #0
03084     68 2E B0 FD | 	call	#_compile_assign
03088     90 00 90 FD | 	jmp	#LR__0143
0308c                 | LR__0141
0308c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0308c     53 00 00 FF 
03090     E4 E5 05 F1 | 	add	objptr, ##42980
03094     F2 1E 02 FB | 	rdlong	local01, objptr
03098     53 00 00 FF 
0309c     E4 E5 85 F1 | 	sub	objptr, ##42980
030a0     01 00 00 FF 
030a4     04 1E 0E F2 | 	cmp	local01, ##516 wz
030a8     53 00 00 AF 
030ac     EC E5 05 A1 |  if_e	add	objptr, ##42988
030b0     F2 30 02 AB |  if_e	rdlong	local10, objptr
030b4     53 00 00 AF 
030b8     EC E5 85 A1 |  if_e	sub	objptr, ##42988
030bc     14 30 0E A2 |  if_e	cmp	local10, #20 wz
030c0     44 00 90 5D |  if_ne	jmp	#LR__0142
030c4     00 12 06 F6 | 	mov	arg01, #0
030c8     E8 B3 B1 FD | 	call	#__system___getiolock_0423
030cc     FD 12 02 F6 | 	mov	arg01, result1
030d0     DC 5A B1 FD | 	call	#__system___lockmem
030d4     41 01 00 FF 
030d8     00 14 06 F6 | 	mov	arg02, ##@LR__4343
030dc     00 12 06 F6 | 	mov	arg01, #0
030e0     00 16 06 F6 | 	mov	arg03, #0
030e4     BC 67 B1 FD | 	call	#__system___basic_print_string
030e8     00 12 06 F6 | 	mov	arg01, #0
030ec     0A 14 06 F6 | 	mov	arg02, #10
030f0     00 16 06 F6 | 	mov	arg03, #0
030f4     54 67 B1 FD | 	call	#__system___basic_print_char
030f8     00 12 06 F6 | 	mov	arg01, #0
030fc     B4 B3 B1 FD | 	call	#__system___getiolock_0423
03100     FD 00 68 FC | 	wrlong	#0, result1
03104     7C 00 90 FD | 	jmp	#LR__0147
03108                 | LR__0142
03108     00 12 06 F6 | 	mov	arg01, #0
0310c     00 14 06 F6 | 	mov	arg02, #0
03110     00 16 06 F6 | 	mov	arg03, #0
03114     08 2D B0 FD | 	call	#_compile
03118     FD 22 02 F6 | 	mov	local03, result1
0311c                 | LR__0143
0311c                 | ' 
0311c                 | ' ' if we are here, this is not a program line to add, so try to execute this
0311c                 | ' 
0311c                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
0311c                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
0311c                 | ' if err=0 then execute_line() else printerror(err)
0311c     00 22 0E F2 | 	cmp	local03, #0 wz
03120     0C 00 90 5D |  if_ne	jmp	#LR__0144
03124     00 12 06 F6 | 	mov	arg01, #0
03128     88 65 B0 FD | 	call	#_execute_line
0312c     08 00 90 FD | 	jmp	#LR__0145
03130                 | LR__0144
03130     11 13 02 F6 | 	mov	arg01, local03
03134     54 25 B1 FD | 	call	#_printerror
03138                 | LR__0145
03138                 | ' if rest$<>"" then line$=rest$:  goto 108 
03138     7A 00 00 FF 
0313c     8C E4 05 F1 | 	add	objptr, ##62604
03140     F2 12 02 FB | 	rdlong	arg01, objptr
03144     7A 00 00 FF 
03148     8C E4 85 F1 | 	sub	objptr, ##62604
0314c     41 01 00 FF 
03150     2F 14 06 F6 | 	mov	arg02, ##@LR__4344
03154     80 5A B1 FD | 	call	#__system___string_cmp
03158     00 FA 0D F2 | 	cmp	result1, #0 wz
0315c     24 00 90 AD |  if_e	jmp	#LR__0146
03160     7A 00 00 FF 
03164     8C E4 05 F1 | 	add	objptr, ##62604
03168     F2 1E 02 FB | 	rdlong	local01, objptr
0316c     24 00 00 FF 
03170     9C E4 85 F1 | 	sub	objptr, ##18588
03174     F2 1E 62 FC | 	wrlong	local01, objptr
03178     55 00 00 FF 
0317c     F0 E5 85 F1 | 	sub	objptr, ##44016
03180     E4 D8 9F FD | 	jmp	#LR__0020
03184                 | LR__0146
03184                 | LR__0147
03184     41 01 00 FF 
03188     30 12 06 F6 | 	mov	arg01, ##@LR__4345
0318c                 | ' 
0318c                 | ' write(text)
0318c     F8 49 B1 FD | 	call	#_hg010b_spin2_write
03190                 | ' crlf
03190     54 4B B1 FD | 	call	#_hg010b_spin2_crlf
03194     41 01 00 FF 
03198     31 12 06 F6 | 	mov	arg01, ##@LR__4346
0319c                 | ' 
0319c                 | ' write(text)
0319c     E8 49 B1 FD | 	call	#_hg010b_spin2_write
031a0                 | ' crlf
031a0     44 4B B1 FD | 	call	#_hg010b_spin2_crlf
031a4                 | LR__0148
031a4     A7 F0 03 F6 | 	mov	ptra, fp
031a8     B2 00 A0 FD | 	call	#popregs_
031ac                 | _interpret_ret
031ac     2D 00 64 FD | 	ret
031b0                 | 
031b0                 | ' 
031b0                 | ' 
031b0                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
031b0                 | ' 
031b0                 | ' function isoperator(s as string) as ubyte
031b0                 | _isoperator
031b0     01 4A 05 F6 | 	mov	COUNT_, #1
031b4     A8 00 A0 FD | 	call	#pushregs_
031b8                 | ' 
031b8                 | ' select case s
031b8     09 1F 02 F6 | 	mov	local01, arg01
031bc     41 01 00 FF 
031c0     37 14 06 F6 | 	mov	arg02, ##@LR__4347
031c4     0F 13 02 F6 | 	mov	arg01, local01
031c8     0C 5A B1 FD | 	call	#__system___string_cmp
031cc     00 FA 0D F2 | 	cmp	result1, #0 wz
031d0     FC 01 90 AD |  if_e	jmp	#LR__0150
031d4     41 01 00 FF 
031d8     39 14 06 F6 | 	mov	arg02, ##@LR__4348
031dc     0F 13 02 F6 | 	mov	arg01, local01
031e0     F4 59 B1 FD | 	call	#__system___string_cmp
031e4     00 FA 0D F2 | 	cmp	result1, #0 wz
031e8     EC 01 90 AD |  if_e	jmp	#LR__0151
031ec     41 01 00 FF 
031f0     3B 14 06 F6 | 	mov	arg02, ##@LR__4349
031f4     0F 13 02 F6 | 	mov	arg01, local01
031f8     DC 59 B1 FD | 	call	#__system___string_cmp
031fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03200     DC 01 90 AD |  if_e	jmp	#LR__0152
03204     41 01 00 FF 
03208     3E 14 06 F6 | 	mov	arg02, ##@LR__4350
0320c     0F 13 02 F6 | 	mov	arg01, local01
03210     C4 59 B1 FD | 	call	#__system___string_cmp
03214     00 FA 0D F2 | 	cmp	result1, #0 wz
03218     CC 01 90 AD |  if_e	jmp	#LR__0153
0321c     41 01 00 FF 
03220     42 14 06 F6 | 	mov	arg02, ##@LR__4351
03224     0F 13 02 F6 | 	mov	arg01, local01
03228     AC 59 B1 FD | 	call	#__system___string_cmp
0322c     00 FA 0D F2 | 	cmp	result1, #0 wz
03230     BC 01 90 AD |  if_e	jmp	#LR__0154
03234     41 01 00 FF 
03238     44 14 06 F6 | 	mov	arg02, ##@LR__4352
0323c     0F 13 02 F6 | 	mov	arg01, local01
03240     94 59 B1 FD | 	call	#__system___string_cmp
03244     00 FA 0D F2 | 	cmp	result1, #0 wz
03248     AC 01 90 AD |  if_e	jmp	#LR__0155
0324c     41 01 00 FF 
03250     46 14 06 F6 | 	mov	arg02, ##@LR__4353
03254     0F 13 02 F6 | 	mov	arg01, local01
03258     7C 59 B1 FD | 	call	#__system___string_cmp
0325c     00 FA 0D F2 | 	cmp	result1, #0 wz
03260     9C 01 90 AD |  if_e	jmp	#LR__0156
03264     41 01 00 FF 
03268     4A 14 06 F6 | 	mov	arg02, ##@LR__4354
0326c     0F 13 02 F6 | 	mov	arg01, local01
03270     64 59 B1 FD | 	call	#__system___string_cmp
03274     00 FA 0D F2 | 	cmp	result1, #0 wz
03278     8C 01 90 AD |  if_e	jmp	#LR__0157
0327c     41 01 00 FF 
03280     4E 14 06 F6 | 	mov	arg02, ##@LR__4355
03284     0F 13 02 F6 | 	mov	arg01, local01
03288     4C 59 B1 FD | 	call	#__system___string_cmp
0328c     00 FA 0D F2 | 	cmp	result1, #0 wz
03290     7C 01 90 AD |  if_e	jmp	#LR__0158
03294     41 01 00 FF 
03298     52 14 06 F6 | 	mov	arg02, ##@LR__4356
0329c     0F 13 02 F6 | 	mov	arg01, local01
032a0     34 59 B1 FD | 	call	#__system___string_cmp
032a4     00 FA 0D F2 | 	cmp	result1, #0 wz
032a8     6C 01 90 AD |  if_e	jmp	#LR__0159
032ac     41 01 00 FF 
032b0     56 14 06 F6 | 	mov	arg02, ##@LR__4357
032b4     0F 13 02 F6 | 	mov	arg01, local01
032b8     1C 59 B1 FD | 	call	#__system___string_cmp
032bc     00 FA 0D F2 | 	cmp	result1, #0 wz
032c0     5C 01 90 AD |  if_e	jmp	#LR__0160
032c4     41 01 00 FF 
032c8     5A 14 06 F6 | 	mov	arg02, ##@LR__4358
032cc     0F 13 02 F6 | 	mov	arg01, local01
032d0     04 59 B1 FD | 	call	#__system___string_cmp
032d4     00 FA 0D F2 | 	cmp	result1, #0 wz
032d8     4C 01 90 AD |  if_e	jmp	#LR__0161
032dc     41 01 00 FF 
032e0     5C 14 06 F6 | 	mov	arg02, ##@LR__4359
032e4     0F 13 02 F6 | 	mov	arg01, local01
032e8     EC 58 B1 FD | 	call	#__system___string_cmp
032ec     00 FA 0D F2 | 	cmp	result1, #0 wz
032f0     3C 01 90 AD |  if_e	jmp	#LR__0162
032f4     41 01 00 FF 
032f8     60 14 06 F6 | 	mov	arg02, ##@LR__4360
032fc     0F 13 02 F6 | 	mov	arg01, local01
03300     D4 58 B1 FD | 	call	#__system___string_cmp
03304     00 FA 0D F2 | 	cmp	result1, #0 wz
03308     2C 01 90 AD |  if_e	jmp	#LR__0163
0330c     41 01 00 FF 
03310     62 14 06 F6 | 	mov	arg02, ##@LR__4361
03314     0F 13 02 F6 | 	mov	arg01, local01
03318     BC 58 B1 FD | 	call	#__system___string_cmp
0331c     00 FA 0D F2 | 	cmp	result1, #0 wz
03320     1C 01 90 AD |  if_e	jmp	#LR__0164
03324     41 01 00 FF 
03328     64 14 06 F6 | 	mov	arg02, ##@LR__4362
0332c     0F 13 02 F6 | 	mov	arg01, local01
03330     A4 58 B1 FD | 	call	#__system___string_cmp
03334     00 FA 0D F2 | 	cmp	result1, #0 wz
03338     0C 01 90 AD |  if_e	jmp	#LR__0165
0333c     41 01 00 FF 
03340     67 14 06 F6 | 	mov	arg02, ##@LR__4363
03344     0F 13 02 F6 | 	mov	arg01, local01
03348     8C 58 B1 FD | 	call	#__system___string_cmp
0334c     00 FA 0D F2 | 	cmp	result1, #0 wz
03350     FC 00 90 AD |  if_e	jmp	#LR__0166
03354     41 01 00 FF 
03358     6A 14 06 F6 | 	mov	arg02, ##@LR__4364
0335c     0F 13 02 F6 | 	mov	arg01, local01
03360     74 58 B1 FD | 	call	#__system___string_cmp
03364     00 FA 0D F2 | 	cmp	result1, #0 wz
03368     EC 00 90 AD |  if_e	jmp	#LR__0167
0336c     41 01 00 FF 
03370     6C 14 06 F6 | 	mov	arg02, ##@LR__4365
03374     0F 13 02 F6 | 	mov	arg01, local01
03378     5C 58 B1 FD | 	call	#__system___string_cmp
0337c     00 FA 0D F2 | 	cmp	result1, #0 wz
03380     DC 00 90 AD |  if_e	jmp	#LR__0168
03384     41 01 00 FF 
03388     6E 14 06 F6 | 	mov	arg02, ##@LR__4366
0338c     0F 13 02 F6 | 	mov	arg01, local01
03390     44 58 B1 FD | 	call	#__system___string_cmp
03394     00 FA 0D F2 | 	cmp	result1, #0 wz
03398     CC 00 90 AD |  if_e	jmp	#LR__0169
0339c     41 01 00 FF 
033a0     71 14 06 F6 | 	mov	arg02, ##@LR__4367
033a4     0F 13 02 F6 | 	mov	arg01, local01
033a8     2C 58 B1 FD | 	call	#__system___string_cmp
033ac     00 FA 0D F2 | 	cmp	result1, #0 wz
033b0     BC 00 90 AD |  if_e	jmp	#LR__0170
033b4     41 01 00 FF 
033b8     74 14 06 F6 | 	mov	arg02, ##@LR__4368
033bc     0F 13 02 F6 | 	mov	arg01, local01
033c0     14 58 B1 FD | 	call	#__system___string_cmp
033c4     00 FA 0D F2 | 	cmp	result1, #0 wz
033c8     AC 00 90 AD |  if_e	jmp	#LR__0171
033cc     B0 00 90 FD | 	jmp	#LR__0172
033d0                 | LR__0150
033d0     01 FA 05 F6 | 	mov	result1, #1
033d4     AC 00 90 FD | 	jmp	#LR__0173
033d8                 | LR__0151
033d8     02 FA 05 F6 | 	mov	result1, #2
033dc     A4 00 90 FD | 	jmp	#LR__0173
033e0                 | LR__0152
033e0     03 FA 05 F6 | 	mov	result1, #3
033e4     9C 00 90 FD | 	jmp	#LR__0173
033e8                 | LR__0153
033e8     04 FA 05 F6 | 	mov	result1, #4
033ec     94 00 90 FD | 	jmp	#LR__0173
033f0                 | LR__0154
033f0     05 FA 05 F6 | 	mov	result1, #5
033f4     8C 00 90 FD | 	jmp	#LR__0173
033f8                 | LR__0155
033f8     06 FA 05 F6 | 	mov	result1, #6
033fc     84 00 90 FD | 	jmp	#LR__0173
03400                 | LR__0156
03400     07 FA 05 F6 | 	mov	result1, #7
03404     7C 00 90 FD | 	jmp	#LR__0173
03408                 | LR__0157
03408     08 FA 05 F6 | 	mov	result1, #8
0340c     74 00 90 FD | 	jmp	#LR__0173
03410                 | LR__0158
03410     09 FA 05 F6 | 	mov	result1, #9
03414     6C 00 90 FD | 	jmp	#LR__0173
03418                 | LR__0159
03418     0A FA 05 F6 | 	mov	result1, #10
0341c     64 00 90 FD | 	jmp	#LR__0173
03420                 | LR__0160
03420     0B FA 05 F6 | 	mov	result1, #11
03424     5C 00 90 FD | 	jmp	#LR__0173
03428                 | LR__0161
03428     0C FA 05 F6 | 	mov	result1, #12
0342c     54 00 90 FD | 	jmp	#LR__0173
03430                 | LR__0162
03430     0D FA 05 F6 | 	mov	result1, #13
03434     4C 00 90 FD | 	jmp	#LR__0173
03438                 | LR__0163
03438     0E FA 05 F6 | 	mov	result1, #14
0343c     44 00 90 FD | 	jmp	#LR__0173
03440                 | LR__0164
03440     1B FA 05 F6 | 	mov	result1, #27
03444     3C 00 90 FD | 	jmp	#LR__0173
03448                 | LR__0165
03448     27 FA 05 F6 | 	mov	result1, #39
0344c     34 00 90 FD | 	jmp	#LR__0173
03450                 | LR__0166
03450     26 FA 05 F6 | 	mov	result1, #38
03454     2C 00 90 FD | 	jmp	#LR__0173
03458                 | LR__0167
03458     10 FA 05 F6 | 	mov	result1, #16
0345c     24 00 90 FD | 	jmp	#LR__0173
03460                 | LR__0168
03460     0F FA 05 F6 | 	mov	result1, #15
03464     1C 00 90 FD | 	jmp	#LR__0173
03468                 | LR__0169
03468     2A FA 05 F6 | 	mov	result1, #42
0346c     14 00 90 FD | 	jmp	#LR__0173
03470                 | LR__0170
03470     28 FA 05 F6 | 	mov	result1, #40
03474     0C 00 90 FD | 	jmp	#LR__0173
03478                 | LR__0171
03478     29 FA 05 F6 | 	mov	result1, #41
0347c     04 00 90 FD | 	jmp	#LR__0173
03480                 | LR__0172
03480     00 FA 05 F6 | 	mov	result1, #0
03484                 | LR__0173
03484     A7 F0 03 F6 | 	mov	ptra, fp
03488     B2 00 A0 FD | 	call	#popregs_
0348c                 | _isoperator_ret
0348c     2D 00 64 FD | 	ret
03490                 | 
03490                 | ' 
03490                 | ' function isseparator(s as string) as ubyte
03490                 | _isseparator
03490     01 4A 05 F6 | 	mov	COUNT_, #1
03494     A8 00 A0 FD | 	call	#pushregs_
03498                 | ' 
03498                 | ' select case s
03498     09 1F 02 F6 | 	mov	local01, arg01
0349c     41 01 00 FF 
034a0     77 14 06 F6 | 	mov	arg02, ##@LR__4369
034a4     0F 13 02 F6 | 	mov	arg01, local01
034a8     2C 57 B1 FD | 	call	#__system___string_cmp
034ac     00 FA 0D F2 | 	cmp	result1, #0 wz
034b0     54 01 90 AD |  if_e	jmp	#LR__0180
034b4     41 01 00 FF 
034b8     79 14 06 F6 | 	mov	arg02, ##@LR__4370
034bc     0F 13 02 F6 | 	mov	arg01, local01
034c0     14 57 B1 FD | 	call	#__system___string_cmp
034c4     00 FA 0D F2 | 	cmp	result1, #0 wz
034c8     44 01 90 AD |  if_e	jmp	#LR__0181
034cc     41 01 00 FF 
034d0     7B 14 06 F6 | 	mov	arg02, ##@LR__4371
034d4     0F 13 02 F6 | 	mov	arg01, local01
034d8     FC 56 B1 FD | 	call	#__system___string_cmp
034dc     00 FA 0D F2 | 	cmp	result1, #0 wz
034e0     34 01 90 AD |  if_e	jmp	#LR__0182
034e4     41 01 00 FF 
034e8     7D 14 06 F6 | 	mov	arg02, ##@LR__4372
034ec     0F 13 02 F6 | 	mov	arg01, local01
034f0     E4 56 B1 FD | 	call	#__system___string_cmp
034f4     00 FA 0D F2 | 	cmp	result1, #0 wz
034f8     24 01 90 AD |  if_e	jmp	#LR__0183
034fc     41 01 00 FF 
03500     7F 14 06 F6 | 	mov	arg02, ##@LR__4373
03504     0F 13 02 F6 | 	mov	arg01, local01
03508     CC 56 B1 FD | 	call	#__system___string_cmp
0350c     00 FA 0D F2 | 	cmp	result1, #0 wz
03510     14 01 90 AD |  if_e	jmp	#LR__0184
03514     41 01 00 FF 
03518     81 14 06 F6 | 	mov	arg02, ##@LR__4374
0351c     0F 13 02 F6 | 	mov	arg01, local01
03520     B4 56 B1 FD | 	call	#__system___string_cmp
03524     00 FA 0D F2 | 	cmp	result1, #0 wz
03528     04 01 90 AD |  if_e	jmp	#LR__0185
0352c     41 01 00 FF 
03530     83 14 06 F6 | 	mov	arg02, ##@LR__4375
03534     0F 13 02 F6 | 	mov	arg01, local01
03538     9C 56 B1 FD | 	call	#__system___string_cmp
0353c     00 FA 0D F2 | 	cmp	result1, #0 wz
03540     F4 00 90 AD |  if_e	jmp	#LR__0186
03544     41 01 00 FF 
03548     85 14 06 F6 | 	mov	arg02, ##@LR__4376
0354c     0F 13 02 F6 | 	mov	arg01, local01
03550     84 56 B1 FD | 	call	#__system___string_cmp
03554     00 FA 0D F2 | 	cmp	result1, #0 wz
03558     E4 00 90 AD |  if_e	jmp	#LR__0187
0355c     41 01 00 FF 
03560     87 14 06 F6 | 	mov	arg02, ##@LR__4377
03564     0F 13 02 F6 | 	mov	arg01, local01
03568     6C 56 B1 FD | 	call	#__system___string_cmp
0356c     00 FA 0D F2 | 	cmp	result1, #0 wz
03570     D4 00 90 AD |  if_e	jmp	#LR__0188
03574     41 01 00 FF 
03578     89 14 06 F6 | 	mov	arg02, ##@LR__4378
0357c     0F 13 02 F6 | 	mov	arg01, local01
03580     54 56 B1 FD | 	call	#__system___string_cmp
03584     00 FA 0D F2 | 	cmp	result1, #0 wz
03588     C4 00 90 AD |  if_e	jmp	#LR__0189
0358c     41 01 00 FF 
03590     8B 14 06 F6 | 	mov	arg02, ##@LR__4379
03594     0F 13 02 F6 | 	mov	arg01, local01
03598     3C 56 B1 FD | 	call	#__system___string_cmp
0359c     00 FA 0D F2 | 	cmp	result1, #0 wz
035a0     B4 00 90 AD |  if_e	jmp	#LR__0190
035a4     41 01 00 FF 
035a8     8D 14 06 F6 | 	mov	arg02, ##@LR__4380
035ac     0F 13 02 F6 | 	mov	arg01, local01
035b0     24 56 B1 FD | 	call	#__system___string_cmp
035b4     00 FA 0D F2 | 	cmp	result1, #0 wz
035b8     A4 00 90 AD |  if_e	jmp	#LR__0191
035bc     41 01 00 FF 
035c0     8F 14 06 F6 | 	mov	arg02, ##@LR__4381
035c4     0F 13 02 F6 | 	mov	arg01, local01
035c8     0C 56 B1 FD | 	call	#__system___string_cmp
035cc     00 FA 0D F2 | 	cmp	result1, #0 wz
035d0     94 00 90 AD |  if_e	jmp	#LR__0192
035d4     41 01 00 FF 
035d8     91 14 06 F6 | 	mov	arg02, ##@LR__4382
035dc     0F 13 02 F6 | 	mov	arg01, local01
035e0     F4 55 B1 FD | 	call	#__system___string_cmp
035e4     00 FA 0D F2 | 	cmp	result1, #0 wz
035e8     84 00 90 AD |  if_e	jmp	#LR__0193
035ec     41 01 00 FF 
035f0     93 14 06 F6 | 	mov	arg02, ##@LR__4383
035f4     0F 13 02 F6 | 	mov	arg01, local01
035f8     DC 55 B1 FD | 	call	#__system___string_cmp
035fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03600     74 00 90 AD |  if_e	jmp	#LR__0194
03604     78 00 90 FD | 	jmp	#LR__0195
03608                 | LR__0180
03608     01 FA 05 F6 | 	mov	result1, #1
0360c     74 00 90 FD | 	jmp	#LR__0196
03610                 | LR__0181
03610     02 FA 05 F6 | 	mov	result1, #2
03614     6C 00 90 FD | 	jmp	#LR__0196
03618                 | LR__0182
03618     1B FA 05 F6 | 	mov	result1, #27
0361c     64 00 90 FD | 	jmp	#LR__0196
03620                 | LR__0183
03620     11 FA 05 F6 | 	mov	result1, #17
03624     5C 00 90 FD | 	jmp	#LR__0196
03628                 | LR__0184
03628     05 FA 05 F6 | 	mov	result1, #5
0362c     54 00 90 FD | 	jmp	#LR__0196
03630                 | LR__0185
03630     06 FA 05 F6 | 	mov	result1, #6
03634     4C 00 90 FD | 	jmp	#LR__0196
03638                 | LR__0186
03638     12 FA 05 F6 | 	mov	result1, #18
0363c     44 00 90 FD | 	jmp	#LR__0196
03640                 | LR__0187
03640     13 FA 05 F6 | 	mov	result1, #19
03644     3C 00 90 FD | 	jmp	#LR__0196
03648                 | LR__0188
03648     0C FA 05 F6 | 	mov	result1, #12
0364c     34 00 90 FD | 	jmp	#LR__0196
03650                 | LR__0189
03650     14 FA 05 F6 | 	mov	result1, #20
03654     2C 00 90 FD | 	jmp	#LR__0196
03658                 | LR__0190
03658     15 FA 05 F6 | 	mov	result1, #21
0365c     24 00 90 FD | 	jmp	#LR__0196
03660                 | LR__0191
03660     16 FA 05 F6 | 	mov	result1, #22
03664     1C 00 90 FD | 	jmp	#LR__0196
03668                 | LR__0192
03668     FF FB 05 F6 | 	mov	result1, #511
0366c     14 00 90 FD | 	jmp	#LR__0196
03670                 | LR__0193
03670     0F FA 05 F6 | 	mov	result1, #15
03674     0C 00 90 FD | 	jmp	#LR__0196
03678                 | LR__0194
03678     10 FA 05 F6 | 	mov	result1, #16
0367c     04 00 90 FD | 	jmp	#LR__0196
03680                 | LR__0195
03680     00 FA 05 F6 | 	mov	result1, #0
03684                 | LR__0196
03684     A7 F0 03 F6 | 	mov	ptra, fp
03688     B2 00 A0 FD | 	call	#popregs_
0368c                 | _isseparator_ret
0368c     2D 00 64 FD | 	ret
03690                 | 
03690                 | ' 
03690                 | ' 
03690                 | ' function iscommand(s as string) as ubyte
03690                 | _iscommand
03690     01 4A 05 F6 | 	mov	COUNT_, #1
03694     A8 00 A0 FD | 	call	#pushregs_
03698                 | ' 
03698                 | ' select case s
03698     09 1F 02 F6 | 	mov	local01, arg01
0369c     41 01 00 FF 
036a0     97 14 06 F6 | 	mov	arg02, ##@LR__4385
036a4     0F 13 02 F6 | 	mov	arg01, local01
036a8     2C 55 B1 FD | 	call	#__system___string_cmp
036ac     00 FA 0D F2 | 	cmp	result1, #0 wz
036b0     3C 07 90 AD |  if_e	jmp	#LR__0200
036b4     41 01 00 FF 
036b8     9C 14 06 F6 | 	mov	arg02, ##@LR__4386
036bc     0F 13 02 F6 | 	mov	arg01, local01
036c0     14 55 B1 FD | 	call	#__system___string_cmp
036c4     00 FA 0D F2 | 	cmp	result1, #0 wz
036c8     2C 07 90 AD |  if_e	jmp	#LR__0201
036cc     41 01 00 FF 
036d0     9F 14 06 F6 | 	mov	arg02, ##@LR__4387
036d4     0F 13 02 F6 | 	mov	arg01, local01
036d8     FC 54 B1 FD | 	call	#__system___string_cmp
036dc     00 FA 0D F2 | 	cmp	result1, #0 wz
036e0     1C 07 90 AD |  if_e	jmp	#LR__0202
036e4     41 01 00 FF 
036e8     A3 14 06 F6 | 	mov	arg02, ##@LR__4388
036ec     0F 13 02 F6 | 	mov	arg01, local01
036f0     E4 54 B1 FD | 	call	#__system___string_cmp
036f4     00 FA 0D F2 | 	cmp	result1, #0 wz
036f8     0C 07 90 AD |  if_e	jmp	#LR__0203
036fc     41 01 00 FF 
03700     A8 14 06 F6 | 	mov	arg02, ##@LR__4389
03704     0F 13 02 F6 | 	mov	arg01, local01
03708     CC 54 B1 FD | 	call	#__system___string_cmp
0370c     00 FA 0D F2 | 	cmp	result1, #0 wz
03710     FC 06 90 AD |  if_e	jmp	#LR__0204
03714     41 01 00 FF 
03718     AC 14 06 F6 | 	mov	arg02, ##@LR__4390
0371c     0F 13 02 F6 | 	mov	arg01, local01
03720     B4 54 B1 FD | 	call	#__system___string_cmp
03724     00 FA 0D F2 | 	cmp	result1, #0 wz
03728     EC 06 90 AD |  if_e	jmp	#LR__0205
0372c     41 01 00 FF 
03730     B3 14 06 F6 | 	mov	arg02, ##@LR__4391
03734     0F 13 02 F6 | 	mov	arg01, local01
03738     9C 54 B1 FD | 	call	#__system___string_cmp
0373c     00 FA 0D F2 | 	cmp	result1, #0 wz
03740     DC 06 90 AD |  if_e	jmp	#LR__0206
03744     41 01 00 FF 
03748     B7 14 06 F6 | 	mov	arg02, ##@LR__4392
0374c     0F 13 02 F6 | 	mov	arg01, local01
03750     84 54 B1 FD | 	call	#__system___string_cmp
03754     00 FA 0D F2 | 	cmp	result1, #0 wz
03758     CC 06 90 AD |  if_e	jmp	#LR__0207
0375c     41 01 00 FF 
03760     BD 14 06 F6 | 	mov	arg02, ##@LR__4393
03764     0F 13 02 F6 | 	mov	arg01, local01
03768     6C 54 B1 FD | 	call	#__system___string_cmp
0376c     00 FA 0D F2 | 	cmp	result1, #0 wz
03770     BC 06 90 AD |  if_e	jmp	#LR__0208
03774     41 01 00 FF 
03778     C1 14 06 F6 | 	mov	arg02, ##@LR__4394
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     54 54 B1 FD | 	call	#__system___string_cmp
03784     00 FA 0D F2 | 	cmp	result1, #0 wz
03788     AC 06 90 AD |  if_e	jmp	#LR__0209
0378c     41 01 00 FF 
03790     C7 14 06 F6 | 	mov	arg02, ##@LR__4395
03794     0F 13 02 F6 | 	mov	arg01, local01
03798     3C 54 B1 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     9C 06 90 AD |  if_e	jmp	#LR__0210
037a4     41 01 00 FF 
037a8     CA 14 06 F6 | 	mov	arg02, ##@LR__4396
037ac     0F 13 02 F6 | 	mov	arg01, local01
037b0     24 54 B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     8C 06 90 AD |  if_e	jmp	#LR__0211
037bc     41 01 00 FF 
037c0     D0 14 06 F6 | 	mov	arg02, ##@LR__4397
037c4     0F 13 02 F6 | 	mov	arg01, local01
037c8     0C 54 B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     7C 06 90 AD |  if_e	jmp	#LR__0212
037d4     41 01 00 FF 
037d8     D4 14 06 F6 | 	mov	arg02, ##@LR__4398
037dc     0F 13 02 F6 | 	mov	arg01, local01
037e0     F4 53 B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     6C 06 90 AD |  if_e	jmp	#LR__0213
037ec     41 01 00 FF 
037f0     DB 14 06 F6 | 	mov	arg02, ##@LR__4399
037f4     0F 13 02 F6 | 	mov	arg01, local01
037f8     DC 53 B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     5C 06 90 AD |  if_e	jmp	#LR__0214
03804     41 01 00 FF 
03808     E2 14 06 F6 | 	mov	arg02, ##@LR__4400
0380c     0F 13 02 F6 | 	mov	arg01, local01
03810     C4 53 B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     4C 06 90 AD |  if_e	jmp	#LR__0215
0381c     41 01 00 FF 
03820     E9 14 06 F6 | 	mov	arg02, ##@LR__4401
03824     0F 13 02 F6 | 	mov	arg01, local01
03828     AC 53 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     3C 06 90 AD |  if_e	jmp	#LR__0216
03834     41 01 00 FF 
03838     F3 14 06 F6 | 	mov	arg02, ##@LR__4402
0383c     0F 13 02 F6 | 	mov	arg01, local01
03840     94 53 B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     2C 06 90 AD |  if_e	jmp	#LR__0217
0384c     41 01 00 FF 
03850     F7 14 06 F6 | 	mov	arg02, ##@LR__4403
03854     0F 13 02 F6 | 	mov	arg01, local01
03858     7C 53 B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     1C 06 90 AD |  if_e	jmp	#LR__0218
03864     41 01 00 FF 
03868     FB 14 06 F6 | 	mov	arg02, ##@LR__4404
0386c     0F 13 02 F6 | 	mov	arg01, local01
03870     64 53 B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     0C 06 90 AD |  if_e	jmp	#LR__0219
0387c     41 01 00 FF 
03880     FF 14 06 F6 | 	mov	arg02, ##@LR__4405
03884     0F 13 02 F6 | 	mov	arg01, local01
03888     4C 53 B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     FC 05 90 AD |  if_e	jmp	#LR__0220
03894     41 01 00 FF 
03898     03 15 06 F6 | 	mov	arg02, ##@LR__4406
0389c     0F 13 02 F6 | 	mov	arg01, local01
038a0     34 53 B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     EC 05 90 AD |  if_e	jmp	#LR__0221
038ac     41 01 00 FF 
038b0     08 15 06 F6 | 	mov	arg02, ##@LR__4407
038b4     0F 13 02 F6 | 	mov	arg01, local01
038b8     1C 53 B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     DC 05 90 AD |  if_e	jmp	#LR__0222
038c4     41 01 00 FF 
038c8     0C 15 06 F6 | 	mov	arg02, ##@LR__4408
038cc     0F 13 02 F6 | 	mov	arg01, local01
038d0     04 53 B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     CC 05 90 AD |  if_e	jmp	#LR__0223
038dc     41 01 00 FF 
038e0     11 15 06 F6 | 	mov	arg02, ##@LR__4409
038e4     0F 13 02 F6 | 	mov	arg01, local01
038e8     EC 52 B1 FD | 	call	#__system___string_cmp
038ec     00 FA 0D F2 | 	cmp	result1, #0 wz
038f0     BC 05 90 AD |  if_e	jmp	#LR__0224
038f4     41 01 00 FF 
038f8     19 15 06 F6 | 	mov	arg02, ##@LR__4410
038fc     0F 13 02 F6 | 	mov	arg01, local01
03900     D4 52 B1 FD | 	call	#__system___string_cmp
03904     00 FA 0D F2 | 	cmp	result1, #0 wz
03908     AC 05 90 AD |  if_e	jmp	#LR__0225
0390c     41 01 00 FF 
03910     1D 15 06 F6 | 	mov	arg02, ##@LR__4411
03914     0F 13 02 F6 | 	mov	arg01, local01
03918     BC 52 B1 FD | 	call	#__system___string_cmp
0391c     00 FA 0D F2 | 	cmp	result1, #0 wz
03920     9C 05 90 AD |  if_e	jmp	#LR__0226
03924     41 01 00 FF 
03928     22 15 06 F6 | 	mov	arg02, ##@LR__4412
0392c     0F 13 02 F6 | 	mov	arg01, local01
03930     A4 52 B1 FD | 	call	#__system___string_cmp
03934     00 FA 0D F2 | 	cmp	result1, #0 wz
03938     8C 05 90 AD |  if_e	jmp	#LR__0227
0393c     41 01 00 FF 
03940     26 15 06 F6 | 	mov	arg02, ##@LR__4413
03944     0F 13 02 F6 | 	mov	arg01, local01
03948     8C 52 B1 FD | 	call	#__system___string_cmp
0394c     00 FA 0D F2 | 	cmp	result1, #0 wz
03950     7C 05 90 AD |  if_e	jmp	#LR__0228
03954     41 01 00 FF 
03958     2B 15 06 F6 | 	mov	arg02, ##@LR__4414
0395c     0F 13 02 F6 | 	mov	arg01, local01
03960     74 52 B1 FD | 	call	#__system___string_cmp
03964     00 FA 0D F2 | 	cmp	result1, #0 wz
03968     6C 05 90 AD |  if_e	jmp	#LR__0229
0396c     41 01 00 FF 
03970     2F 15 06 F6 | 	mov	arg02, ##@LR__4415
03974     0F 13 02 F6 | 	mov	arg01, local01
03978     5C 52 B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     5C 05 90 AD |  if_e	jmp	#LR__0230
03984     41 01 00 FF 
03988     32 15 06 F6 | 	mov	arg02, ##@LR__4416
0398c     0F 13 02 F6 | 	mov	arg01, local01
03990     44 52 B1 FD | 	call	#__system___string_cmp
03994     00 FA 0D F2 | 	cmp	result1, #0 wz
03998     4C 05 90 AD |  if_e	jmp	#LR__0231
0399c     41 01 00 FF 
039a0     38 15 06 F6 | 	mov	arg02, ##@LR__4417
039a4     0F 13 02 F6 | 	mov	arg01, local01
039a8     2C 52 B1 FD | 	call	#__system___string_cmp
039ac     00 FA 0D F2 | 	cmp	result1, #0 wz
039b0     3C 05 90 AD |  if_e	jmp	#LR__0232
039b4     41 01 00 FF 
039b8     3C 15 06 F6 | 	mov	arg02, ##@LR__4418
039bc     0F 13 02 F6 | 	mov	arg01, local01
039c0     14 52 B1 FD | 	call	#__system___string_cmp
039c4     00 FA 0D F2 | 	cmp	result1, #0 wz
039c8     2C 05 90 AD |  if_e	jmp	#LR__0233
039cc     41 01 00 FF 
039d0     41 15 06 F6 | 	mov	arg02, ##@LR__4419
039d4     0F 13 02 F6 | 	mov	arg01, local01
039d8     FC 51 B1 FD | 	call	#__system___string_cmp
039dc     00 FA 0D F2 | 	cmp	result1, #0 wz
039e0     1C 05 90 AD |  if_e	jmp	#LR__0234
039e4     41 01 00 FF 
039e8     44 15 06 F6 | 	mov	arg02, ##@LR__4420
039ec     0F 13 02 F6 | 	mov	arg01, local01
039f0     E4 51 B1 FD | 	call	#__system___string_cmp
039f4     00 FA 0D F2 | 	cmp	result1, #0 wz
039f8     0C 05 90 AD |  if_e	jmp	#LR__0235
039fc     41 01 00 FF 
03a00     47 15 06 F6 | 	mov	arg02, ##@LR__4421
03a04     0F 13 02 F6 | 	mov	arg01, local01
03a08     CC 51 B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     FC 04 90 AD |  if_e	jmp	#LR__0236
03a14     41 01 00 FF 
03a18     4B 15 06 F6 | 	mov	arg02, ##@LR__4422
03a1c     0F 13 02 F6 | 	mov	arg01, local01
03a20     B4 51 B1 FD | 	call	#__system___string_cmp
03a24     00 FA 0D F2 | 	cmp	result1, #0 wz
03a28     EC 04 90 AD |  if_e	jmp	#LR__0237
03a2c     41 01 00 FF 
03a30     4E 15 06 F6 | 	mov	arg02, ##@LR__4423
03a34     0F 13 02 F6 | 	mov	arg01, local01
03a38     9C 51 B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     DC 04 90 AD |  if_e	jmp	#LR__0238
03a44     41 01 00 FF 
03a48     52 15 06 F6 | 	mov	arg02, ##@LR__4424
03a4c     0F 13 02 F6 | 	mov	arg01, local01
03a50     84 51 B1 FD | 	call	#__system___string_cmp
03a54     00 FA 0D F2 | 	cmp	result1, #0 wz
03a58     CC 04 90 AD |  if_e	jmp	#LR__0239
03a5c     41 01 00 FF 
03a60     57 15 06 F6 | 	mov	arg02, ##@LR__4425
03a64     0F 13 02 F6 | 	mov	arg01, local01
03a68     6C 51 B1 FD | 	call	#__system___string_cmp
03a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a70     BC 04 90 AD |  if_e	jmp	#LR__0240
03a74     41 01 00 FF 
03a78     5A 15 06 F6 | 	mov	arg02, ##@LR__4426
03a7c     0F 13 02 F6 | 	mov	arg01, local01
03a80     54 51 B1 FD | 	call	#__system___string_cmp
03a84     00 FA 0D F2 | 	cmp	result1, #0 wz
03a88     AC 04 90 AD |  if_e	jmp	#LR__0241
03a8c     41 01 00 FF 
03a90     5F 15 06 F6 | 	mov	arg02, ##@LR__4427
03a94     0F 13 02 F6 | 	mov	arg01, local01
03a98     3C 51 B1 FD | 	call	#__system___string_cmp
03a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03aa0     9C 04 90 AD |  if_e	jmp	#LR__0242
03aa4     41 01 00 FF 
03aa8     63 15 06 F6 | 	mov	arg02, ##@LR__4428
03aac     0F 13 02 F6 | 	mov	arg01, local01
03ab0     24 51 B1 FD | 	call	#__system___string_cmp
03ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab8     8C 04 90 AD |  if_e	jmp	#LR__0243
03abc     41 01 00 FF 
03ac0     68 15 06 F6 | 	mov	arg02, ##@LR__4429
03ac4     0F 13 02 F6 | 	mov	arg01, local01
03ac8     0C 51 B1 FD | 	call	#__system___string_cmp
03acc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad0     7C 04 90 AD |  if_e	jmp	#LR__0244
03ad4     41 01 00 FF 
03ad8     6B 15 06 F6 | 	mov	arg02, ##@LR__4430
03adc     0F 13 02 F6 | 	mov	arg01, local01
03ae0     F4 50 B1 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     6C 04 90 AD |  if_e	jmp	#LR__0245
03aec     41 01 00 FF 
03af0     71 15 06 F6 | 	mov	arg02, ##@LR__4431
03af4     0F 13 02 F6 | 	mov	arg01, local01
03af8     DC 50 B1 FD | 	call	#__system___string_cmp
03afc     00 FA 0D F2 | 	cmp	result1, #0 wz
03b00     5C 04 90 AD |  if_e	jmp	#LR__0246
03b04     41 01 00 FF 
03b08     75 15 06 F6 | 	mov	arg02, ##@LR__4432
03b0c     0F 13 02 F6 | 	mov	arg01, local01
03b10     C4 50 B1 FD | 	call	#__system___string_cmp
03b14     00 FA 0D F2 | 	cmp	result1, #0 wz
03b18     4C 04 90 AD |  if_e	jmp	#LR__0247
03b1c     41 01 00 FF 
03b20     7A 15 06 F6 | 	mov	arg02, ##@LR__4433
03b24     0F 13 02 F6 | 	mov	arg01, local01
03b28     AC 50 B1 FD | 	call	#__system___string_cmp
03b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b30     3C 04 90 AD |  if_e	jmp	#LR__0248
03b34     41 01 00 FF 
03b38     7D 15 06 F6 | 	mov	arg02, ##@LR__4434
03b3c     0F 13 02 F6 | 	mov	arg01, local01
03b40     94 50 B1 FD | 	call	#__system___string_cmp
03b44     00 FA 0D F2 | 	cmp	result1, #0 wz
03b48     2C 04 90 AD |  if_e	jmp	#LR__0249
03b4c     41 01 00 FF 
03b50     83 15 06 F6 | 	mov	arg02, ##@LR__4435
03b54     0F 13 02 F6 | 	mov	arg01, local01
03b58     7C 50 B1 FD | 	call	#__system___string_cmp
03b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b60     1C 04 90 AD |  if_e	jmp	#LR__0250
03b64     41 01 00 FF 
03b68     86 15 06 F6 | 	mov	arg02, ##@LR__4436
03b6c     0F 13 02 F6 | 	mov	arg01, local01
03b70     64 50 B1 FD | 	call	#__system___string_cmp
03b74     00 FA 0D F2 | 	cmp	result1, #0 wz
03b78     0C 04 90 AD |  if_e	jmp	#LR__0251
03b7c     41 01 00 FF 
03b80     8F 15 06 F6 | 	mov	arg02, ##@LR__4437
03b84     0F 13 02 F6 | 	mov	arg01, local01
03b88     4C 50 B1 FD | 	call	#__system___string_cmp
03b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b90     FC 03 90 AD |  if_e	jmp	#LR__0252
03b94     41 01 00 FF 
03b98     95 15 06 F6 | 	mov	arg02, ##@LR__4438
03b9c     0F 13 02 F6 | 	mov	arg01, local01
03ba0     34 50 B1 FD | 	call	#__system___string_cmp
03ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ba8     EC 03 90 AD |  if_e	jmp	#LR__0253
03bac     41 01 00 FF 
03bb0     9B 15 06 F6 | 	mov	arg02, ##@LR__4439
03bb4     0F 13 02 F6 | 	mov	arg01, local01
03bb8     1C 50 B1 FD | 	call	#__system___string_cmp
03bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03bc0     DC 03 90 AD |  if_e	jmp	#LR__0254
03bc4     41 01 00 FF 
03bc8     A4 15 06 F6 | 	mov	arg02, ##@LR__4440
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     04 50 B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     CC 03 90 AD |  if_e	jmp	#LR__0255
03bdc     41 01 00 FF 
03be0     AE 15 06 F6 | 	mov	arg02, ##@LR__4441
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     EC 4F B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     BC 03 90 AD |  if_e	jmp	#LR__0256
03bf4     41 01 00 FF 
03bf8     B7 15 06 F6 | 	mov	arg02, ##@LR__4442
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     D4 4F B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     AC 03 90 AD |  if_e	jmp	#LR__0257
03c0c     41 01 00 FF 
03c10     BC 15 06 F6 | 	mov	arg02, ##@LR__4443
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     BC 4F B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     9C 03 90 AD |  if_e	jmp	#LR__0258
03c24     41 01 00 FF 
03c28     C1 15 06 F6 | 	mov	arg02, ##@LR__4444
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     A4 4F B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     8C 03 90 AD |  if_e	jmp	#LR__0259
03c3c     41 01 00 FF 
03c40     C5 15 06 F6 | 	mov	arg02, ##@LR__4445
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     8C 4F B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     7C 03 90 AD |  if_e	jmp	#LR__0260
03c54     41 01 00 FF 
03c58     CE 15 06 F6 | 	mov	arg02, ##@LR__4446
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     74 4F B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     6C 03 90 AD |  if_e	jmp	#LR__0261
03c6c     41 01 00 FF 
03c70     D3 15 06 F6 | 	mov	arg02, ##@LR__4447
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     5C 4F B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     5C 03 90 AD |  if_e	jmp	#LR__0262
03c84     41 01 00 FF 
03c88     D9 15 06 F6 | 	mov	arg02, ##@LR__4448
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     44 4F B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     4C 03 90 AD |  if_e	jmp	#LR__0263
03c9c     41 01 00 FF 
03ca0     DB 15 06 F6 | 	mov	arg02, ##@LR__4449
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     2C 4F B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     3C 03 90 AD |  if_e	jmp	#LR__0264
03cb4     41 01 00 FF 
03cb8     DF 15 06 F6 | 	mov	arg02, ##@LR__4450
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     14 4F B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     2C 03 90 AD |  if_e	jmp	#LR__0265
03ccc     41 01 00 FF 
03cd0     E3 15 06 F6 | 	mov	arg02, ##@LR__4451
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     FC 4E B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     1C 03 90 AD |  if_e	jmp	#LR__0266
03ce4     41 01 00 FF 
03ce8     E8 15 06 F6 | 	mov	arg02, ##@LR__4452
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     E4 4E B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     0C 03 90 AD |  if_e	jmp	#LR__0267
03cfc     41 01 00 FF 
03d00     EB 15 06 F6 | 	mov	arg02, ##@LR__4453
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     CC 4E B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     FC 02 90 AD |  if_e	jmp	#LR__0268
03d14     41 01 00 FF 
03d18     F2 15 06 F6 | 	mov	arg02, ##@LR__4454
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     B4 4E B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     EC 02 90 AD |  if_e	jmp	#LR__0269
03d2c     41 01 00 FF 
03d30     F6 15 06 F6 | 	mov	arg02, ##@LR__4455
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     9C 4E B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     DC 02 90 AD |  if_e	jmp	#LR__0270
03d44     41 01 00 FF 
03d48     FB 15 06 F6 | 	mov	arg02, ##@LR__4456
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     84 4E B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     CC 02 90 AD |  if_e	jmp	#LR__0271
03d5c     42 01 00 FF 
03d60     02 14 06 F6 | 	mov	arg02, ##@LR__4457
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     6C 4E B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     BC 02 90 AD |  if_e	jmp	#LR__0272
03d74     42 01 00 FF 
03d78     0C 14 06 F6 | 	mov	arg02, ##@LR__4458
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     54 4E B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     AC 02 90 AD |  if_e	jmp	#LR__0273
03d8c     42 01 00 FF 
03d90     10 14 06 F6 | 	mov	arg02, ##@LR__4459
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     3C 4E B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     9C 02 90 AD |  if_e	jmp	#LR__0274
03da4     42 01 00 FF 
03da8     18 14 06 F6 | 	mov	arg02, ##@LR__4460
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     24 4E B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     8C 02 90 AD |  if_e	jmp	#LR__0275
03dbc     42 01 00 FF 
03dc0     1C 14 06 F6 | 	mov	arg02, ##@LR__4461
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     0C 4E B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     7C 02 90 AD |  if_e	jmp	#LR__0276
03dd4     42 01 00 FF 
03dd8     22 14 06 F6 | 	mov	arg02, ##@LR__4462
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     F4 4D B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     6C 02 90 AD |  if_e	jmp	#LR__0277
03dec     70 02 90 FD | 	jmp	#LR__0278
03df0                 | LR__0200
03df0     5C FA 05 F6 | 	mov	result1, #92
03df4     6C 02 90 FD | 	jmp	#LR__0279
03df8                 | LR__0201
03df8     5C FA 05 F6 | 	mov	result1, #92
03dfc     64 02 90 FD | 	jmp	#LR__0279
03e00                 | LR__0202
03e00     47 FA 05 F6 | 	mov	result1, #71
03e04     5C 02 90 FD | 	jmp	#LR__0279
03e08                 | LR__0203
03e08     59 FA 05 F6 | 	mov	result1, #89
03e0c     54 02 90 FD | 	jmp	#LR__0279
03e10                 | LR__0204
03e10     59 FA 05 F6 | 	mov	result1, #89
03e14     4C 02 90 FD | 	jmp	#LR__0279
03e18                 | LR__0205
03e18     45 FA 05 F6 | 	mov	result1, #69
03e1c     44 02 90 FD | 	jmp	#LR__0279
03e20                 | LR__0206
03e20     45 FA 05 F6 | 	mov	result1, #69
03e24     3C 02 90 FD | 	jmp	#LR__0279
03e28                 | LR__0207
03e28     69 FA 05 F6 | 	mov	result1, #105
03e2c     34 02 90 FD | 	jmp	#LR__0279
03e30                 | LR__0208
03e30     40 FA 05 F6 | 	mov	result1, #64
03e34     2C 02 90 FD | 	jmp	#LR__0279
03e38                 | LR__0209
03e38     49 FA 05 F6 | 	mov	result1, #73
03e3c     24 02 90 FD | 	jmp	#LR__0279
03e40                 | LR__0210
03e40     49 FA 05 F6 | 	mov	result1, #73
03e44     1C 02 90 FD | 	jmp	#LR__0279
03e48                 | LR__0211
03e48     50 FA 05 F6 | 	mov	result1, #80
03e4c     14 02 90 FD | 	jmp	#LR__0279
03e50                 | LR__0212
03e50     50 FA 05 F6 | 	mov	result1, #80
03e54     0C 02 90 FD | 	jmp	#LR__0279
03e58                 | LR__0213
03e58     68 FA 05 F6 | 	mov	result1, #104
03e5c     04 02 90 FD | 	jmp	#LR__0279
03e60                 | LR__0214
03e60     73 FA 05 F6 | 	mov	result1, #115
03e64     FC 01 90 FD | 	jmp	#LR__0279
03e68                 | LR__0215
03e68     74 FA 05 F6 | 	mov	result1, #116
03e6c     F4 01 90 FD | 	jmp	#LR__0279
03e70                 | LR__0216
03e70     6C FA 05 F6 | 	mov	result1, #108
03e74     EC 01 90 FD | 	jmp	#LR__0279
03e78                 | LR__0217
03e78     6C FA 05 F6 | 	mov	result1, #108
03e7c     E4 01 90 FD | 	jmp	#LR__0279
03e80                 | LR__0218
03e80     89 FA 05 F6 | 	mov	result1, #137
03e84     DC 01 90 FD | 	jmp	#LR__0279
03e88                 | LR__0219
03e88     72 FA 05 F6 | 	mov	result1, #114
03e8c     D4 01 90 FD | 	jmp	#LR__0279
03e90                 | LR__0220
03e90     5D FA 05 F6 | 	mov	result1, #93
03e94     CC 01 90 FD | 	jmp	#LR__0279
03e98                 | LR__0221
03e98     43 FA 05 F6 | 	mov	result1, #67
03e9c     C4 01 90 FD | 	jmp	#LR__0279
03ea0                 | LR__0222
03ea0     43 FA 05 F6 | 	mov	result1, #67
03ea4     BC 01 90 FD | 	jmp	#LR__0279
03ea8                 | LR__0223
03ea8     5A FA 05 F6 | 	mov	result1, #90
03eac     B4 01 90 FD | 	jmp	#LR__0279
03eb0                 | LR__0224
03eb0     46 FA 05 F6 | 	mov	result1, #70
03eb4     AC 01 90 FD | 	jmp	#LR__0279
03eb8                 | LR__0225
03eb8     46 FA 05 F6 | 	mov	result1, #70
03ebc     A4 01 90 FD | 	jmp	#LR__0279
03ec0                 | LR__0226
03ec0     71 FA 05 F6 | 	mov	result1, #113
03ec4     9C 01 90 FD | 	jmp	#LR__0279
03ec8                 | LR__0227
03ec8     71 FA 05 F6 | 	mov	result1, #113
03ecc     94 01 90 FD | 	jmp	#LR__0279
03ed0                 | LR__0228
03ed0     60 FA 05 F6 | 	mov	result1, #96
03ed4     8C 01 90 FD | 	jmp	#LR__0279
03ed8                 | LR__0229
03ed8     4A FA 05 F6 | 	mov	result1, #74
03edc     84 01 90 FD | 	jmp	#LR__0279
03ee0                 | LR__0230
03ee0     4A FA 05 F6 | 	mov	result1, #74
03ee4     7C 01 90 FD | 	jmp	#LR__0279
03ee8                 | LR__0231
03ee8     48 FA 05 F6 | 	mov	result1, #72
03eec     74 01 90 FD | 	jmp	#LR__0279
03ef0                 | LR__0232
03ef0     48 FA 05 F6 | 	mov	result1, #72
03ef4     6C 01 90 FD | 	jmp	#LR__0279
03ef8                 | LR__0233
03ef8     4E FA 05 F6 | 	mov	result1, #78
03efc     64 01 90 FD | 	jmp	#LR__0279
03f00                 | LR__0234
03f00     4E FA 05 F6 | 	mov	result1, #78
03f04     5C 01 90 FD | 	jmp	#LR__0279
03f08                 | LR__0235
03f08     58 FA 05 F6 | 	mov	result1, #88
03f0c     54 01 90 FD | 	jmp	#LR__0279
03f10                 | LR__0236
03f10     5F FA 05 F6 | 	mov	result1, #95
03f14     4C 01 90 FD | 	jmp	#LR__0279
03f18                 | LR__0237
03f18     5F FA 05 F6 | 	mov	result1, #95
03f1c     44 01 90 FD | 	jmp	#LR__0279
03f20                 | LR__0238
03f20     8A FA 05 F6 | 	mov	result1, #138
03f24     3C 01 90 FD | 	jmp	#LR__0279
03f28                 | LR__0239
03f28     4C FA 05 F6 | 	mov	result1, #76
03f2c     34 01 90 FD | 	jmp	#LR__0279
03f30                 | LR__0240
03f30     4C FA 05 F6 | 	mov	result1, #76
03f34     2C 01 90 FD | 	jmp	#LR__0279
03f38                 | LR__0241
03f38     52 FA 05 F6 | 	mov	result1, #82
03f3c     24 01 90 FD | 	jmp	#LR__0279
03f40                 | LR__0242
03f40     52 FA 05 F6 | 	mov	result1, #82
03f44     1C 01 90 FD | 	jmp	#LR__0279
03f48                 | LR__0243
03f48     61 FA 05 F6 | 	mov	result1, #97
03f4c     14 01 90 FD | 	jmp	#LR__0279
03f50                 | LR__0244
03f50     61 FA 05 F6 | 	mov	result1, #97
03f54     0C 01 90 FD | 	jmp	#LR__0279
03f58                 | LR__0245
03f58     63 FA 05 F6 | 	mov	result1, #99
03f5c     04 01 90 FD | 	jmp	#LR__0279
03f60                 | LR__0246
03f60     41 FA 05 F6 | 	mov	result1, #65
03f64     FC 00 90 FD | 	jmp	#LR__0279
03f68                 | LR__0247
03f68     4B FA 05 F6 | 	mov	result1, #75
03f6c     F4 00 90 FD | 	jmp	#LR__0279
03f70                 | LR__0248
03f70     4B FA 05 F6 | 	mov	result1, #75
03f74     EC 00 90 FD | 	jmp	#LR__0279
03f78                 | LR__0249
03f78     5E FA 05 F6 | 	mov	result1, #94
03f7c     E4 00 90 FD | 	jmp	#LR__0279
03f80                 | LR__0250
03f80     5E FA 05 F6 | 	mov	result1, #94
03f84     DC 00 90 FD | 	jmp	#LR__0279
03f88                 | LR__0251
03f88     7C FA 05 F6 | 	mov	result1, #124
03f8c     D4 00 90 FD | 	jmp	#LR__0279
03f90                 | LR__0252
03f90     7E FA 05 F6 | 	mov	result1, #126
03f94     CC 00 90 FD | 	jmp	#LR__0279
03f98                 | LR__0253
03f98     7D FA 05 F6 | 	mov	result1, #125
03f9c     C4 00 90 FD | 	jmp	#LR__0279
03fa0                 | LR__0254
03fa0     7F FA 05 F6 | 	mov	result1, #127
03fa4     BC 00 90 FD | 	jmp	#LR__0279
03fa8                 | LR__0255
03fa8     80 FA 05 F6 | 	mov	result1, #128
03fac     B4 00 90 FD | 	jmp	#LR__0279
03fb0                 | LR__0256
03fb0     55 FA 05 F6 | 	mov	result1, #85
03fb4     AC 00 90 FD | 	jmp	#LR__0279
03fb8                 | LR__0257
03fb8     75 FA 05 F6 | 	mov	result1, #117
03fbc     A4 00 90 FD | 	jmp	#LR__0279
03fc0                 | LR__0258
03fc0     42 FA 05 F6 | 	mov	result1, #66
03fc4     9C 00 90 FD | 	jmp	#LR__0279
03fc8                 | LR__0259
03fc8     42 FA 05 F6 | 	mov	result1, #66
03fcc     94 00 90 FD | 	jmp	#LR__0279
03fd0                 | LR__0260
03fd0     81 FA 05 F6 | 	mov	result1, #129
03fd4     8C 00 90 FD | 	jmp	#LR__0279
03fd8                 | LR__0261
03fd8     81 FA 05 F6 | 	mov	result1, #129
03fdc     84 00 90 FD | 	jmp	#LR__0279
03fe0                 | LR__0262
03fe0     44 FA 05 F6 | 	mov	result1, #68
03fe4     7C 00 90 FD | 	jmp	#LR__0279
03fe8                 | LR__0263
03fe8     44 FA 05 F6 | 	mov	result1, #68
03fec     74 00 90 FD | 	jmp	#LR__0279
03ff0                 | LR__0264
03ff0     88 FA 05 F6 | 	mov	result1, #136
03ff4     6C 00 90 FD | 	jmp	#LR__0279
03ff8                 | LR__0265
03ff8     4D FA 05 F6 | 	mov	result1, #77
03ffc     64 00 90 FD | 	jmp	#LR__0279
04000                 | LR__0266
04000     51 FA 05 F6 | 	mov	result1, #81
04004     5C 00 90 FD | 	jmp	#LR__0279
04008                 | LR__0267
04008     51 FA 05 F6 | 	mov	result1, #81
0400c     54 00 90 FD | 	jmp	#LR__0279
04010                 | LR__0268
04010     6D FA 05 F6 | 	mov	result1, #109
04014     4C 00 90 FD | 	jmp	#LR__0279
04018                 | LR__0269
04018     6D FA 05 F6 | 	mov	result1, #109
0401c     44 00 90 FD | 	jmp	#LR__0279
04020                 | LR__0270
04020     5B FA 05 F6 | 	mov	result1, #91
04024     3C 00 90 FD | 	jmp	#LR__0279
04028                 | LR__0271
04028     56 FA 05 F6 | 	mov	result1, #86
0402c     34 00 90 FD | 	jmp	#LR__0279
04030                 | LR__0272
04030     70 FA 05 F6 | 	mov	result1, #112
04034     2C 00 90 FD | 	jmp	#LR__0279
04038                 | LR__0273
04038     70 FA 05 F6 | 	mov	result1, #112
0403c     24 00 90 FD | 	jmp	#LR__0279
04040                 | LR__0274
04040     57 FA 05 F6 | 	mov	result1, #87
04044     1C 00 90 FD | 	jmp	#LR__0279
04048                 | LR__0275
04048     57 FA 05 F6 | 	mov	result1, #87
0404c     14 00 90 FD | 	jmp	#LR__0279
04050                 | LR__0276
04050     77 FA 05 F6 | 	mov	result1, #119
04054     0C 00 90 FD | 	jmp	#LR__0279
04058                 | LR__0277
04058     78 FA 05 F6 | 	mov	result1, #120
0405c     04 00 90 FD | 	jmp	#LR__0279
04060                 | LR__0278
04060     00 FA 05 F6 | 	mov	result1, #0
04064                 | LR__0279
04064     A7 F0 03 F6 | 	mov	ptra, fp
04068     B2 00 A0 FD | 	call	#popregs_
0406c                 | _iscommand_ret
0406c     2D 00 64 FD | 	ret
04070                 | 
04070                 | ' 
04070                 | ' function isfunction(s as string) as ubyte
04070                 | _isfunction
04070     01 4A 05 F6 | 	mov	COUNT_, #1
04074     A8 00 A0 FD | 	call	#pushregs_
04078                 | ' 
04078                 | ' select case s
04078     09 1F 02 F6 | 	mov	local01, arg01
0407c     42 01 00 FF 
04080     28 14 06 F6 | 	mov	arg02, ##@LR__4463
04084     0F 13 02 F6 | 	mov	arg01, local01
04088     4C 4B B1 FD | 	call	#__system___string_cmp
0408c     00 FA 0D F2 | 	cmp	result1, #0 wz
04090     CC 01 90 AD |  if_e	jmp	#LR__0280
04094     42 01 00 FF 
04098     2D 14 06 F6 | 	mov	arg02, ##@LR__4464
0409c     0F 13 02 F6 | 	mov	arg01, local01
040a0     34 4B B1 FD | 	call	#__system___string_cmp
040a4     00 FA 0D F2 | 	cmp	result1, #0 wz
040a8     BC 01 90 AD |  if_e	jmp	#LR__0281
040ac     42 01 00 FF 
040b0     32 14 06 F6 | 	mov	arg02, ##@LR__4465
040b4     0F 13 02 F6 | 	mov	arg01, local01
040b8     1C 4B B1 FD | 	call	#__system___string_cmp
040bc     00 FA 0D F2 | 	cmp	result1, #0 wz
040c0     AC 01 90 AD |  if_e	jmp	#LR__0282
040c4     42 01 00 FF 
040c8     36 14 06 F6 | 	mov	arg02, ##@LR__4466
040cc     0F 13 02 F6 | 	mov	arg01, local01
040d0     04 4B B1 FD | 	call	#__system___string_cmp
040d4     00 FA 0D F2 | 	cmp	result1, #0 wz
040d8     9C 01 90 AD |  if_e	jmp	#LR__0283
040dc     42 01 00 FF 
040e0     3A 14 06 F6 | 	mov	arg02, ##@LR__4467
040e4     0F 13 02 F6 | 	mov	arg01, local01
040e8     EC 4A B1 FD | 	call	#__system___string_cmp
040ec     00 FA 0D F2 | 	cmp	result1, #0 wz
040f0     8C 01 90 AD |  if_e	jmp	#LR__0284
040f4     42 01 00 FF 
040f8     43 14 06 F6 | 	mov	arg02, ##@LR__4468
040fc     0F 13 02 F6 | 	mov	arg01, local01
04100     D4 4A B1 FD | 	call	#__system___string_cmp
04104     00 FA 0D F2 | 	cmp	result1, #0 wz
04108     7C 01 90 AD |  if_e	jmp	#LR__0285
0410c     42 01 00 FF 
04110     47 14 06 F6 | 	mov	arg02, ##@LR__4469
04114     0F 13 02 F6 | 	mov	arg01, local01
04118     BC 4A B1 FD | 	call	#__system___string_cmp
0411c     00 FA 0D F2 | 	cmp	result1, #0 wz
04120     6C 01 90 AD |  if_e	jmp	#LR__0286
04124     42 01 00 FF 
04128     4F 14 06 F6 | 	mov	arg02, ##@LR__4470
0412c     0F 13 02 F6 | 	mov	arg01, local01
04130     A4 4A B1 FD | 	call	#__system___string_cmp
04134     00 FA 0D F2 | 	cmp	result1, #0 wz
04138     5C 01 90 AD |  if_e	jmp	#LR__0287
0413c     42 01 00 FF 
04140     56 14 06 F6 | 	mov	arg02, ##@LR__4471
04144     0F 13 02 F6 | 	mov	arg01, local01
04148     8C 4A B1 FD | 	call	#__system___string_cmp
0414c     00 FA 0D F2 | 	cmp	result1, #0 wz
04150     4C 01 90 AD |  if_e	jmp	#LR__0288
04154     42 01 00 FF 
04158     5D 14 06 F6 | 	mov	arg02, ##@LR__4472
0415c     0F 13 02 F6 | 	mov	arg01, local01
04160     74 4A B1 FD | 	call	#__system___string_cmp
04164     00 FA 0D F2 | 	cmp	result1, #0 wz
04168     3C 01 90 AD |  if_e	jmp	#LR__0289
0416c     42 01 00 FF 
04170     64 14 06 F6 | 	mov	arg02, ##@LR__4473
04174     0F 13 02 F6 | 	mov	arg01, local01
04178     5C 4A B1 FD | 	call	#__system___string_cmp
0417c     00 FA 0D F2 | 	cmp	result1, #0 wz
04180     2C 01 90 AD |  if_e	jmp	#LR__0290
04184     42 01 00 FF 
04188     6B 14 06 F6 | 	mov	arg02, ##@LR__4474
0418c     0F 13 02 F6 | 	mov	arg01, local01
04190     44 4A B1 FD | 	call	#__system___string_cmp
04194     00 FA 0D F2 | 	cmp	result1, #0 wz
04198     1C 01 90 AD |  if_e	jmp	#LR__0291
0419c     42 01 00 FF 
041a0     73 14 06 F6 | 	mov	arg02, ##@LR__4475
041a4     0F 13 02 F6 | 	mov	arg01, local01
041a8     2C 4A B1 FD | 	call	#__system___string_cmp
041ac     00 FA 0D F2 | 	cmp	result1, #0 wz
041b0     0C 01 90 AD |  if_e	jmp	#LR__0292
041b4     42 01 00 FF 
041b8     79 14 06 F6 | 	mov	arg02, ##@LR__4476
041bc     0F 13 02 F6 | 	mov	arg01, local01
041c0     14 4A B1 FD | 	call	#__system___string_cmp
041c4     00 FA 0D F2 | 	cmp	result1, #0 wz
041c8     FC 00 90 AD |  if_e	jmp	#LR__0293
041cc     42 01 00 FF 
041d0     7F 14 06 F6 | 	mov	arg02, ##@LR__4477
041d4     0F 13 02 F6 | 	mov	arg01, local01
041d8     FC 49 B1 FD | 	call	#__system___string_cmp
041dc     00 FA 0D F2 | 	cmp	result1, #0 wz
041e0     EC 00 90 AD |  if_e	jmp	#LR__0294
041e4     42 01 00 FF 
041e8     83 14 06 F6 | 	mov	arg02, ##@LR__4478
041ec     0F 13 02 F6 | 	mov	arg01, local01
041f0     E4 49 B1 FD | 	call	#__system___string_cmp
041f4     00 FA 0D F2 | 	cmp	result1, #0 wz
041f8     DC 00 90 AD |  if_e	jmp	#LR__0295
041fc     42 01 00 FF 
04200     87 14 06 F6 | 	mov	arg02, ##@LR__4479
04204     0F 13 02 F6 | 	mov	arg01, local01
04208     CC 49 B1 FD | 	call	#__system___string_cmp
0420c     00 FA 0D F2 | 	cmp	result1, #0 wz
04210     CC 00 90 AD |  if_e	jmp	#LR__0296
04214     42 01 00 FF 
04218     8B 14 06 F6 | 	mov	arg02, ##@LR__4480
0421c     0F 13 02 F6 | 	mov	arg01, local01
04220     B4 49 B1 FD | 	call	#__system___string_cmp
04224     00 FA 0D F2 | 	cmp	result1, #0 wz
04228     BC 00 90 AD |  if_e	jmp	#LR__0297
0422c     42 01 00 FF 
04230     91 14 06 F6 | 	mov	arg02, ##@LR__4481
04234     0F 13 02 F6 | 	mov	arg01, local01
04238     9C 49 B1 FD | 	call	#__system___string_cmp
0423c     00 FA 0D F2 | 	cmp	result1, #0 wz
04240     AC 00 90 AD |  if_e	jmp	#LR__0298
04244     42 01 00 FF 
04248     97 14 06 F6 | 	mov	arg02, ##@LR__4482
0424c     0F 13 02 F6 | 	mov	arg01, local01
04250     84 49 B1 FD | 	call	#__system___string_cmp
04254     00 FA 0D F2 | 	cmp	result1, #0 wz
04258     9C 00 90 AD |  if_e	jmp	#LR__0299
0425c     A0 00 90 FD | 	jmp	#LR__0300
04260                 | LR__0280
04260     85 FA 05 F6 | 	mov	result1, #133
04264     9C 00 90 FD | 	jmp	#LR__0301
04268                 | LR__0281
04268     84 FA 05 F6 | 	mov	result1, #132
0426c     94 00 90 FD | 	jmp	#LR__0301
04270                 | LR__0282
04270     86 FA 05 F6 | 	mov	result1, #134
04274     8C 00 90 FD | 	jmp	#LR__0301
04278                 | LR__0283
04278     82 FA 05 F6 | 	mov	result1, #130
0427c     84 00 90 FD | 	jmp	#LR__0301
04280                 | LR__0284
04280     6F FA 05 F6 | 	mov	result1, #111
04284     7C 00 90 FD | 	jmp	#LR__0301
04288                 | LR__0285
04288     6F FA 05 F6 | 	mov	result1, #111
0428c     74 00 90 FD | 	jmp	#LR__0301
04290                 | LR__0286
04290     62 FA 05 F6 | 	mov	result1, #98
04294     6C 00 90 FD | 	jmp	#LR__0301
04298                 | LR__0287
04298     66 FA 05 F6 | 	mov	result1, #102
0429c     64 00 90 FD | 	jmp	#LR__0301
042a0                 | LR__0288
042a0     67 FA 05 F6 | 	mov	result1, #103
042a4     5C 00 90 FD | 	jmp	#LR__0301
042a8                 | LR__0289
042a8     64 FA 05 F6 | 	mov	result1, #100
042ac     54 00 90 FD | 	jmp	#LR__0301
042b0                 | LR__0290
042b0     65 FA 05 F6 | 	mov	result1, #101
042b4     4C 00 90 FD | 	jmp	#LR__0301
042b8                 | LR__0291
042b8     7B FA 05 F6 | 	mov	result1, #123
042bc     44 00 90 FD | 	jmp	#LR__0301
042c0                 | LR__0292
042c0     76 FA 05 F6 | 	mov	result1, #118
042c4     3C 00 90 FD | 	jmp	#LR__0301
042c8                 | LR__0293
042c8     7A FA 05 F6 | 	mov	result1, #122
042cc     34 00 90 FD | 	jmp	#LR__0301
042d0                 | LR__0294
042d0     54 FA 05 F6 | 	mov	result1, #84
042d4     2C 00 90 FD | 	jmp	#LR__0301
042d8                 | LR__0295
042d8     6B FA 05 F6 | 	mov	result1, #107
042dc     24 00 90 FD | 	jmp	#LR__0301
042e0                 | LR__0296
042e0     87 FA 05 F6 | 	mov	result1, #135
042e4     1C 00 90 FD | 	jmp	#LR__0301
042e8                 | LR__0297
042e8     6A FA 05 F6 | 	mov	result1, #106
042ec     14 00 90 FD | 	jmp	#LR__0301
042f0                 | LR__0298
042f0     6E FA 05 F6 | 	mov	result1, #110
042f4     0C 00 90 FD | 	jmp	#LR__0301
042f8                 | LR__0299
042f8     83 FA 05 F6 | 	mov	result1, #131
042fc     04 00 90 FD | 	jmp	#LR__0301
04300                 | LR__0300
04300     00 FA 05 F6 | 	mov	result1, #0
04304                 | LR__0301
04304     A7 F0 03 F6 | 	mov	ptra, fp
04308     B2 00 A0 FD | 	call	#popregs_
0430c                 | _isfunction_ret
0430c     2D 00 64 FD | 	ret
04310                 | 
04310                 | ' 
04310                 | ' function isname(s as string) as boolean
04310                 | _isname
04310     0D 4A 05 F6 | 	mov	COUNT_, #13
04314     A8 00 A0 FD | 	call	#pushregs_
04318     09 1F 02 F6 | 	mov	local01, arg01
0431c     09 21 02 F6 | 	mov	local02, arg01
04320     97 06 48 FB | 	callpa	#(@LR__0311-@LR__0310)>>2,fcache_load_ptr_
04324                 | LR__0310
04324     10 FB C9 FA | 	rdbyte	result1, local02 wz
04328     01 20 06 51 |  if_ne	add	local02, #1
0432c     F4 FF 9F 5D |  if_ne	jmp	#LR__0310
04330                 | LR__0311
04330     09 21 82 F1 | 	sub	local02, arg01
04334     10 FB 01 F6 | 	mov	result1, local02
04338     FD 22 0A F6 | 	mov	local03, result1 wz
0433c     00 FA 05 A6 |  if_e	mov	result1, #0
04340     34 02 90 AD |  if_e	jmp	#LR__0323
04344     0F 13 02 F6 | 	mov	arg01, local01
04348     01 14 06 F6 | 	mov	arg02, #1
0434c     01 16 06 F6 | 	mov	arg03, #1
04350     84 69 B1 FD | 	call	#__system__Mid_S
04354     FD 24 02 F6 | 	mov	local04, result1
04358                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04358     42 01 00 FF 
0435c     9B 14 06 F6 | 	mov	arg02, ##@LR__4483
04360     12 13 02 F6 | 	mov	arg01, local04
04364     70 48 B1 FD | 	call	#__system___string_cmp
04368     00 FA 55 F2 | 	cmps	result1, #0 wc
0436c     18 00 90 CD |  if_b	jmp	#LR__0312
04370     42 01 00 FF 
04374     9D 14 06 F6 | 	mov	arg02, ##@LR__4484
04378     12 13 02 F6 | 	mov	arg01, local04
0437c     58 48 B1 FD | 	call	#__system___string_cmp
04380     01 FA 55 F2 | 	cmps	result1, #1 wc
04384     1C 00 90 CD |  if_b	jmp	#LR__0313
04388                 | LR__0312
04388     42 01 00 FF 
0438c     9F 14 06 F6 | 	mov	arg02, ##@LR__4485
04390     12 13 02 F6 | 	mov	arg01, local04
04394     40 48 B1 FD | 	call	#__system___string_cmp
04398     00 FA 0D F2 | 	cmp	result1, #0 wz
0439c     00 FA 05 56 |  if_ne	mov	result1, #0
043a0     D4 01 90 5D |  if_ne	jmp	#LR__0323
043a4                 | LR__0313
043a4                 | ' if l>2 then 
043a4     03 22 56 F2 | 	cmps	local03, #3 wc
043a8     C8 01 90 CD |  if_b	jmp	#LR__0322
043ac                 | '   for i=2 to l
043ac     02 26 06 F6 | 	mov	local05, #2
043b0     11 29 02 F6 | 	mov	local06, local03
043b4     01 28 06 F1 | 	add	local06, #1
043b8                 | LR__0314
043b8     14 27 52 F2 | 	cmps	local05, local06 wc
043bc     B4 01 90 3D |  if_ae	jmp	#LR__0321
043c0     0F 13 02 F6 | 	mov	arg01, local01
043c4     13 15 02 F6 | 	mov	arg02, local05
043c8     01 16 06 F6 | 	mov	arg03, #1
043cc     08 69 B1 FD | 	call	#__system__Mid_S
043d0     FD 24 02 F6 | 	mov	local04, result1
043d4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
043d4     11 27 52 F2 | 	cmps	local05, local03 wc
043d8     9C 00 90 3D |  if_ae	jmp	#LR__0317
043dc     42 01 00 FF 
043e0     A1 14 06 F6 | 	mov	arg02, ##@LR__4486
043e4     12 13 02 F6 | 	mov	arg01, local04
043e8     EC 47 B1 FD | 	call	#__system___string_cmp
043ec     00 FA 55 F2 | 	cmps	result1, #0 wc
043f0     18 00 90 CD |  if_b	jmp	#LR__0315
043f4     42 01 00 FF 
043f8     A3 14 06 F6 | 	mov	arg02, ##@LR__4487
043fc     12 13 02 F6 | 	mov	arg01, local04
04400     D4 47 B1 FD | 	call	#__system___string_cmp
04404     01 FA 55 F2 | 	cmps	result1, #1 wc
04408     6C 00 90 CD |  if_b	jmp	#LR__0317
0440c                 | LR__0315
0440c     42 01 00 FF 
04410     A5 14 06 F6 | 	mov	arg02, ##@LR__4488
04414     12 13 02 F6 | 	mov	arg01, local04
04418     BC 47 B1 FD | 	call	#__system___string_cmp
0441c     00 FA 55 F2 | 	cmps	result1, #0 wc
04420     18 00 90 CD |  if_b	jmp	#LR__0316
04424     42 01 00 FF 
04428     A7 14 06 F6 | 	mov	arg02, ##@LR__4489
0442c     12 13 02 F6 | 	mov	arg01, local04
04430     A4 47 B1 FD | 	call	#__system___string_cmp
04434     01 FA 55 F2 | 	cmps	result1, #1 wc
04438     3C 00 90 CD |  if_b	jmp	#LR__0317
0443c                 | LR__0316
0443c     42 01 00 FF 
04440     A9 2A 06 F6 | 	mov	local07, ##@LR__4490
04444     12 13 02 F6 | 	mov	arg01, local04
04448     15 15 02 F6 | 	mov	arg02, local07
0444c     88 47 B1 FD | 	call	#__system___string_cmp
04450     00 FA 0D F2 | 	cmp	result1, #0 wz
04454     20 00 90 AD |  if_e	jmp	#LR__0317
04458     42 01 00 FF 
0445c     AB 2C 06 F6 | 	mov	local08, ##@LR__4491
04460     12 13 02 F6 | 	mov	arg01, local04
04464     16 15 02 F6 | 	mov	arg02, local08
04468     6C 47 B1 FD | 	call	#__system___string_cmp
0446c     FD 2E 0A F6 | 	mov	local09, result1 wz
04470     00 FA 05 56 |  if_ne	mov	result1, #0
04474     00 01 90 5D |  if_ne	jmp	#LR__0323
04478                 | LR__0317
04478                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04478     11 27 0A F2 | 	cmp	local05, local03 wz
0447c     EC 00 90 5D |  if_ne	jmp	#LR__0320
04480     42 01 00 FF 
04484     AD 30 06 F6 | 	mov	local10, ##@LR__4492
04488     12 13 02 F6 | 	mov	arg01, local04
0448c     18 15 02 F6 | 	mov	arg02, local10
04490     44 47 B1 FD | 	call	#__system___string_cmp
04494     FD 32 02 F6 | 	mov	local11, result1
04498     00 32 56 F2 | 	cmps	local11, #0 wc
0449c     1C 00 90 CD |  if_b	jmp	#LR__0318
044a0     42 01 00 FF 
044a4     AF 14 06 F6 | 	mov	arg02, ##@LR__4493
044a8     12 13 02 F6 | 	mov	arg01, local04
044ac     28 47 B1 FD | 	call	#__system___string_cmp
044b0     FD 30 02 F6 | 	mov	local10, result1
044b4     01 30 56 F2 | 	cmps	local10, #1 wc
044b8     B0 00 90 CD |  if_b	jmp	#LR__0320
044bc                 | LR__0318
044bc     42 01 00 FF 
044c0     B1 14 06 F6 | 	mov	arg02, ##@LR__4494
044c4     12 13 02 F6 | 	mov	arg01, local04
044c8     0C 47 B1 FD | 	call	#__system___string_cmp
044cc     00 FA 55 F2 | 	cmps	result1, #0 wc
044d0     1C 00 90 CD |  if_b	jmp	#LR__0319
044d4     42 01 00 FF 
044d8     B3 2E 06 F6 | 	mov	local09, ##@LR__4495
044dc     12 13 02 F6 | 	mov	arg01, local04
044e0     17 15 02 F6 | 	mov	arg02, local09
044e4     F0 46 B1 FD | 	call	#__system___string_cmp
044e8     01 FA 55 F2 | 	cmps	result1, #1 wc
044ec     7C 00 90 CD |  if_b	jmp	#LR__0320
044f0                 | LR__0319
044f0     42 01 00 FF 
044f4     B5 2E 06 F6 | 	mov	local09, ##@LR__4496
044f8     12 13 02 F6 | 	mov	arg01, local04
044fc     17 15 02 F6 | 	mov	arg02, local09
04500     D4 46 B1 FD | 	call	#__system___string_cmp
04504     00 FA 4D F2 | 	cmps	result1, #0 wz
04508     60 00 90 AD |  if_e	jmp	#LR__0320
0450c     42 01 00 FF 
04510     B7 2C 06 F6 | 	mov	local08, ##@LR__4497
04514     12 13 02 F6 | 	mov	arg01, local04
04518     16 15 02 F6 | 	mov	arg02, local08
0451c     B8 46 B1 FD | 	call	#__system___string_cmp
04520     FD 2E 0A F6 | 	mov	local09, result1 wz
04524     44 00 90 AD |  if_e	jmp	#LR__0320
04528     42 01 00 FF 
0452c     B9 34 06 F6 | 	mov	local12, ##@LR__4498
04530     1A 2D 02 F6 | 	mov	local08, local12
04534     12 13 02 F6 | 	mov	arg01, local04
04538     16 15 02 F6 | 	mov	arg02, local08
0453c     98 46 B1 FD | 	call	#__system___string_cmp
04540     FD 2A 0A F6 | 	mov	local07, result1 wz
04544     24 00 90 AD |  if_e	jmp	#LR__0320
04548     42 01 00 FF 
0454c     BB 36 06 F6 | 	mov	local13, ##@LR__4499
04550     1B 35 02 F6 | 	mov	local12, local13
04554     12 13 02 F6 | 	mov	arg01, local04
04558     1A 15 02 F6 | 	mov	arg02, local12
0455c     78 46 B1 FD | 	call	#__system___string_cmp
04560     FD 2C 0A F6 | 	mov	local08, result1 wz
04564     00 FA 05 56 |  if_ne	mov	result1, #0
04568     0C 00 90 5D |  if_ne	jmp	#LR__0323
0456c                 | LR__0320
0456c     01 26 06 F1 | 	add	local05, #1
04570     44 FE 9F FD | 	jmp	#LR__0314
04574                 | LR__0321
04574                 | LR__0322
04574                 | ' return true
04574     01 FA 65 F6 | 	neg	result1, #1
04578                 | LR__0323
04578     A7 F0 03 F6 | 	mov	ptra, fp
0457c     B2 00 A0 FD | 	call	#popregs_
04580                 | _isname_ret
04580     2D 00 64 FD | 	ret
04584                 | 
04584                 | ' 
04584                 | ' function isnum(s as string) as boolean
04584                 | _isnum
04584     0D 4A 05 F6 | 	mov	COUNT_, #13
04588     A8 00 A0 FD | 	call	#pushregs_
0458c     09 1F 02 F6 | 	mov	local01, arg01
04590     00 20 06 F6 | 	mov	local02, #0
04594     00 22 06 F6 | 	mov	local03, #0
04598     0F 13 02 F6 | 	mov	arg01, local01
0459c     09 25 02 F6 | 	mov	local04, arg01
045a0     97 06 48 FB | 	callpa	#(@LR__0331-@LR__0330)>>2,fcache_load_ptr_
045a4                 | LR__0330
045a4     12 FB C9 FA | 	rdbyte	result1, local04 wz
045a8     01 24 06 51 |  if_ne	add	local04, #1
045ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0330
045b0                 | LR__0331
045b0     09 25 82 F1 | 	sub	local04, arg01
045b4     12 FB 01 F6 | 	mov	result1, local04
045b8     FD 26 0A F6 | 	mov	local05, result1 wz
045bc     00 FA 05 A6 |  if_e	mov	result1, #0
045c0     8C 02 90 AD |  if_e	jmp	#LR__0342
045c4     0F 13 02 F6 | 	mov	arg01, local01
045c8     01 14 06 F6 | 	mov	arg02, #1
045cc     01 16 06 F6 | 	mov	arg03, #1
045d0     04 67 B1 FD | 	call	#__system__Mid_S
045d4     FD 28 02 F6 | 	mov	local06, result1
045d8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
045d8     42 01 00 FF 
045dc     BD 14 06 F6 | 	mov	arg02, ##@LR__4500
045e0     14 13 02 F6 | 	mov	arg01, local06
045e4     F0 45 B1 FD | 	call	#__system___string_cmp
045e8     00 FA 55 F2 | 	cmps	result1, #0 wc
045ec     18 00 90 CD |  if_b	jmp	#LR__0332
045f0     42 01 00 FF 
045f4     BF 14 06 F6 | 	mov	arg02, ##@LR__4501
045f8     14 13 02 F6 | 	mov	arg01, local06
045fc     D8 45 B1 FD | 	call	#__system___string_cmp
04600     01 FA 55 F2 | 	cmps	result1, #1 wc
04604     78 00 90 CD |  if_b	jmp	#LR__0333
04608                 | LR__0332
04608     42 01 00 FF 
0460c     C1 14 06 F6 | 	mov	arg02, ##@LR__4502
04610     14 13 02 F6 | 	mov	arg01, local06
04614     C0 45 B1 FD | 	call	#__system___string_cmp
04618     00 FA 0D F2 | 	cmp	result1, #0 wz
0461c     60 00 90 AD |  if_e	jmp	#LR__0333
04620     42 01 00 FF 
04624     C3 2A 06 F6 | 	mov	local07, ##@LR__4503
04628     14 13 02 F6 | 	mov	arg01, local06
0462c     15 15 02 F6 | 	mov	arg02, local07
04630     A4 45 B1 FD | 	call	#__system___string_cmp
04634     00 FA 0D F2 | 	cmp	result1, #0 wz
04638     44 00 90 AD |  if_e	jmp	#LR__0333
0463c     42 01 00 FF 
04640     C5 2C 06 F6 | 	mov	local08, ##@LR__4504
04644     16 2B 02 F6 | 	mov	local07, local08
04648     14 13 02 F6 | 	mov	arg01, local06
0464c     15 15 02 F6 | 	mov	arg02, local07
04650     84 45 B1 FD | 	call	#__system___string_cmp
04654     00 FA 4D F2 | 	cmps	result1, #0 wz
04658     24 00 90 AD |  if_e	jmp	#LR__0333
0465c     42 01 00 FF 
04660     C7 2E 06 F6 | 	mov	local09, ##@LR__4505
04664     17 2D 02 F6 | 	mov	local08, local09
04668     14 13 02 F6 | 	mov	arg01, local06
0466c     16 15 02 F6 | 	mov	arg02, local08
04670     64 45 B1 FD | 	call	#__system___string_cmp
04674     FD 2A 0A F6 | 	mov	local07, result1 wz
04678     00 FA 05 56 |  if_ne	mov	result1, #0
0467c     D0 01 90 5D |  if_ne	jmp	#LR__0342
04680                 | LR__0333
04680                 | ' if m$="." then ds=1
04680     42 01 00 FF 
04684     C9 14 06 F6 | 	mov	arg02, ##@LR__4506
04688     14 13 02 F6 | 	mov	arg01, local06
0468c     48 45 B1 FD | 	call	#__system___string_cmp
04690     00 FA 0D F2 | 	cmp	result1, #0 wz
04694     01 20 06 A6 |  if_e	mov	local02, #1
04698                 | ' if l>1 then 
04698     02 26 56 F2 | 	cmps	local05, #2 wc
0469c     AC 01 90 CD |  if_b	jmp	#LR__0341
046a0                 | '   for i=2 to l
046a0     02 30 06 F6 | 	mov	local10, #2
046a4     13 33 02 F6 | 	mov	local11, local05
046a8     01 32 06 F1 | 	add	local11, #1
046ac                 | LR__0334
046ac     19 31 52 F2 | 	cmps	local10, local11 wc
046b0     98 01 90 3D |  if_ae	jmp	#LR__0340
046b4     0F 13 02 F6 | 	mov	arg01, local01
046b8     18 15 02 F6 | 	mov	arg02, local10
046bc     01 16 06 F6 | 	mov	arg03, #1
046c0     14 66 B1 FD | 	call	#__system__Mid_S
046c4     FD 28 02 F6 | 	mov	local06, result1
046c8                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
046c8     42 01 00 FF 
046cc     CB 14 06 F6 | 	mov	arg02, ##@LR__4507
046d0     14 13 02 F6 | 	mov	arg01, local06
046d4     00 45 B1 FD | 	call	#__system___string_cmp
046d8     00 FA 55 F2 | 	cmps	result1, #0 wc
046dc     18 00 90 CD |  if_b	jmp	#LR__0335
046e0     42 01 00 FF 
046e4     CD 14 06 F6 | 	mov	arg02, ##@LR__4508
046e8     14 13 02 F6 | 	mov	arg01, local06
046ec     E8 44 B1 FD | 	call	#__system___string_cmp
046f0     01 FA 55 F2 | 	cmps	result1, #1 wc
046f4     98 00 90 CD |  if_b	jmp	#LR__0336
046f8                 | LR__0335
046f8     42 01 00 FF 
046fc     CF 14 06 F6 | 	mov	arg02, ##@LR__4509
04700     14 13 02 F6 | 	mov	arg01, local06
04704     D0 44 B1 FD | 	call	#__system___string_cmp
04708     00 FA 0D F2 | 	cmp	result1, #0 wz
0470c     80 00 90 AD |  if_e	jmp	#LR__0336
04710     42 01 00 FF 
04714     D1 2A 06 F6 | 	mov	local07, ##@LR__4510
04718     14 13 02 F6 | 	mov	arg01, local06
0471c     15 15 02 F6 | 	mov	arg02, local07
04720     B4 44 B1 FD | 	call	#__system___string_cmp
04724     00 FA 4D F2 | 	cmps	result1, #0 wz
04728     64 00 90 AD |  if_e	jmp	#LR__0336
0472c     42 01 00 FF 
04730     D3 2C 06 F6 | 	mov	local08, ##@LR__4511
04734     16 2B 02 F6 | 	mov	local07, local08
04738     14 13 02 F6 | 	mov	arg01, local06
0473c     15 15 02 F6 | 	mov	arg02, local07
04740     94 44 B1 FD | 	call	#__system___string_cmp
04744     FD 34 0A F6 | 	mov	local12, result1 wz
04748     44 00 90 AD |  if_e	jmp	#LR__0336
0474c     42 01 00 FF 
04750     D5 2E 06 F6 | 	mov	local09, ##@LR__4512
04754     17 2D 02 F6 | 	mov	local08, local09
04758     14 13 02 F6 | 	mov	arg01, local06
0475c     16 15 02 F6 | 	mov	arg02, local08
04760     74 44 B1 FD | 	call	#__system___string_cmp
04764     FD 2A 0A F6 | 	mov	local07, result1 wz
04768     24 00 90 AD |  if_e	jmp	#LR__0336
0476c     42 01 00 FF 
04770     D7 36 06 F6 | 	mov	local13, ##@LR__4513
04774     1B 2F 02 F6 | 	mov	local09, local13
04778     14 13 02 F6 | 	mov	arg01, local06
0477c     17 15 02 F6 | 	mov	arg02, local09
04780     54 44 B1 FD | 	call	#__system___string_cmp
04784     FD 2C 0A F6 | 	mov	local08, result1 wz
04788     00 FA 05 56 |  if_ne	mov	result1, #0
0478c     C0 00 90 5D |  if_ne	jmp	#LR__0342
04790                 | LR__0336
04790                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
04790     42 01 00 FF 
04794     D9 14 06 F6 | 	mov	arg02, ##@LR__4514
04798     14 13 02 F6 | 	mov	arg01, local06
0479c     38 44 B1 FD | 	call	#__system___string_cmp
047a0     00 FA 0D F2 | 	cmp	result1, #0 wz
047a4     38 00 90 5D |  if_ne	jmp	#LR__0337
047a8     18 15 02 F6 | 	mov	arg02, local10
047ac     01 14 86 F1 | 	sub	arg02, #1
047b0     0F 13 02 F6 | 	mov	arg01, local01
047b4     01 16 06 F6 | 	mov	arg03, #1
047b8     1C 65 B1 FD | 	call	#__system__Mid_S
047bc     FD 12 02 F6 | 	mov	arg01, result1
047c0     B0 66 B1 FD | 	call	#__system__LCase_S
047c4     FD 12 02 F6 | 	mov	arg01, result1
047c8     42 01 00 FF 
047cc     DB 14 06 F6 | 	mov	arg02, ##@LR__4515
047d0     04 44 B1 FD | 	call	#__system___string_cmp
047d4     00 FA 0D F2 | 	cmp	result1, #0 wz
047d8     00 FA 05 56 |  if_ne	mov	result1, #0
047dc     70 00 90 5D |  if_ne	jmp	#LR__0342
047e0                 | LR__0337
047e0                 | '     if m$="." then ds+=1: if ds>1 then return false
047e0     42 01 00 FF 
047e4     DD 14 06 F6 | 	mov	arg02, ##@LR__4516
047e8     14 13 02 F6 | 	mov	arg01, local06
047ec     E8 43 B1 FD | 	call	#__system___string_cmp
047f0     00 FA 0D F2 | 	cmp	result1, #0 wz
047f4     01 20 06 A1 |  if_e	add	local02, #1
047f8     02 20 56 A2 |  if_e	cmps	local02, #2 wc
047fc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
04800     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0342
04804                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
04804     42 01 00 FF 
04808     DF 14 06 F6 | 	mov	arg02, ##@LR__4517
0480c     14 13 02 F6 | 	mov	arg01, local06
04810     C4 43 B1 FD | 	call	#__system___string_cmp
04814     00 FA 4D F2 | 	cmps	result1, #0 wz
04818     18 00 90 AD |  if_e	jmp	#LR__0338
0481c     42 01 00 FF 
04820     E1 14 06 F6 | 	mov	arg02, ##@LR__4518
04824     14 13 02 F6 | 	mov	arg01, local06
04828     AC 43 B1 FD | 	call	#__system___string_cmp
0482c     00 FA 4D F2 | 	cmps	result1, #0 wz
04830     10 00 90 5D |  if_ne	jmp	#LR__0339
04834                 | LR__0338
04834     01 22 06 F1 | 	add	local03, #1
04838     02 22 56 F2 | 	cmps	local03, #2 wc
0483c     00 FA 05 36 |  if_ae	mov	result1, #0
04840     0C 00 90 3D |  if_ae	jmp	#LR__0342
04844                 | LR__0339
04844     01 30 06 F1 | 	add	local10, #1
04848     60 FE 9F FD | 	jmp	#LR__0334
0484c                 | LR__0340
0484c                 | LR__0341
0484c                 | ' return true
0484c     01 FA 65 F6 | 	neg	result1, #1
04850                 | LR__0342
04850     A7 F0 03 F6 | 	mov	ptra, fp
04854     B2 00 A0 FD | 	call	#popregs_
04858                 | _isnum_ret
04858     2D 00 64 FD | 	ret
0485c                 | 
0485c                 | '   
0485c                 | ' function isint(s as string) as boolean
0485c                 | _isint
0485c     05 4A 05 F6 | 	mov	COUNT_, #5
04860     A8 00 A0 FD | 	call	#pushregs_
04864     09 1F 02 F6 | 	mov	local01, arg01
04868     09 21 02 F6 | 	mov	local02, arg01
0486c     97 06 48 FB | 	callpa	#(@LR__0351-@LR__0350)>>2,fcache_load_ptr_
04870                 | LR__0350
04870     10 FB C9 FA | 	rdbyte	result1, local02 wz
04874     01 20 06 51 |  if_ne	add	local02, #1
04878     F4 FF 9F 5D |  if_ne	jmp	#LR__0350
0487c                 | LR__0351
0487c     09 21 82 F1 | 	sub	local02, arg01
04880     10 FB 01 F6 | 	mov	result1, local02
04884     FD 20 0A F6 | 	mov	local02, result1 wz
04888     00 FA 05 A6 |  if_e	mov	result1, #0
0488c     18 01 90 AD |  if_e	jmp	#LR__0359
04890     0F 13 02 F6 | 	mov	arg01, local01
04894     01 14 06 F6 | 	mov	arg02, #1
04898     01 16 06 F6 | 	mov	arg03, #1
0489c     38 64 B1 FD | 	call	#__system__Mid_S
048a0     FD 22 02 F6 | 	mov	local03, result1
048a4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
048a4     42 01 00 FF 
048a8     E3 14 06 F6 | 	mov	arg02, ##@LR__4519
048ac     11 13 02 F6 | 	mov	arg01, local03
048b0     24 43 B1 FD | 	call	#__system___string_cmp
048b4     00 FA 55 F2 | 	cmps	result1, #0 wc
048b8     18 00 90 CD |  if_b	jmp	#LR__0352
048bc     42 01 00 FF 
048c0     E5 14 06 F6 | 	mov	arg02, ##@LR__4520
048c4     11 13 02 F6 | 	mov	arg01, local03
048c8     0C 43 B1 FD | 	call	#__system___string_cmp
048cc     01 FA 55 F2 | 	cmps	result1, #1 wc
048d0     4C 00 90 CD |  if_b	jmp	#LR__0353
048d4                 | LR__0352
048d4     42 01 00 FF 
048d8     E7 14 06 F6 | 	mov	arg02, ##@LR__4521
048dc     11 13 02 F6 | 	mov	arg01, local03
048e0     F4 42 B1 FD | 	call	#__system___string_cmp
048e4     00 FA 0D F2 | 	cmp	result1, #0 wz
048e8     34 00 90 AD |  if_e	jmp	#LR__0353
048ec     42 01 00 FF 
048f0     E9 14 06 F6 | 	mov	arg02, ##@LR__4522
048f4     11 13 02 F6 | 	mov	arg01, local03
048f8     DC 42 B1 FD | 	call	#__system___string_cmp
048fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04900     1C 00 90 AD |  if_e	jmp	#LR__0353
04904     42 01 00 FF 
04908     EB 14 06 F6 | 	mov	arg02, ##@LR__4523
0490c     11 13 02 F6 | 	mov	arg01, local03
04910     C4 42 B1 FD | 	call	#__system___string_cmp
04914     00 FA 0D F2 | 	cmp	result1, #0 wz
04918     00 FA 05 56 |  if_ne	mov	result1, #0
0491c     88 00 90 5D |  if_ne	jmp	#LR__0359
04920                 | LR__0353
04920                 | ' 
04920                 | ' if l>1 then 
04920     02 20 56 F2 | 	cmps	local02, #2 wc
04924     7C 00 90 CD |  if_b	jmp	#LR__0358
04928                 | '   for i=2 to l
04928     02 24 06 F6 | 	mov	local04, #2
0492c     10 27 02 F6 | 	mov	local05, local02
04930     01 26 06 F1 | 	add	local05, #1
04934                 | LR__0354
04934     13 25 52 F2 | 	cmps	local04, local05 wc
04938     68 00 90 3D |  if_ae	jmp	#LR__0357
0493c     0F 13 02 F6 | 	mov	arg01, local01
04940     12 15 02 F6 | 	mov	arg02, local04
04944     01 16 06 F6 | 	mov	arg03, #1
04948     8C 63 B1 FD | 	call	#__system__Mid_S
0494c     FD 22 02 F6 | 	mov	local03, result1
04950                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04950     42 01 00 FF 
04954     ED 14 06 F6 | 	mov	arg02, ##@LR__4524
04958     11 13 02 F6 | 	mov	arg01, local03
0495c     78 42 B1 FD | 	call	#__system___string_cmp
04960     00 FA 55 F2 | 	cmps	result1, #0 wc
04964     18 00 90 CD |  if_b	jmp	#LR__0355
04968     42 01 00 FF 
0496c     EF 14 06 F6 | 	mov	arg02, ##@LR__4525
04970     11 13 02 F6 | 	mov	arg01, local03
04974     60 42 B1 FD | 	call	#__system___string_cmp
04978     01 FA 55 F2 | 	cmps	result1, #1 wc
0497c     1C 00 90 CD |  if_b	jmp	#LR__0356
04980                 | LR__0355
04980     42 01 00 FF 
04984     F1 14 06 F6 | 	mov	arg02, ##@LR__4526
04988     11 13 02 F6 | 	mov	arg01, local03
0498c     48 42 B1 FD | 	call	#__system___string_cmp
04990     00 FA 0D F2 | 	cmp	result1, #0 wz
04994     00 FA 05 56 |  if_ne	mov	result1, #0
04998     0C 00 90 5D |  if_ne	jmp	#LR__0359
0499c                 | LR__0356
0499c     01 24 06 F1 | 	add	local04, #1
049a0     90 FF 9F FD | 	jmp	#LR__0354
049a4                 | LR__0357
049a4                 | LR__0358
049a4                 | ' return true
049a4     01 FA 65 F6 | 	neg	result1, #1
049a8                 | LR__0359
049a8     A7 F0 03 F6 | 	mov	ptra, fp
049ac     B2 00 A0 FD | 	call	#popregs_
049b0                 | _isint_ret
049b0     2D 00 64 FD | 	ret
049b4                 | 
049b4                 | ' 
049b4                 | ' function isdec(s as string) as boolean
049b4                 | _isdec
049b4     05 4A 05 F6 | 	mov	COUNT_, #5
049b8     A8 00 A0 FD | 	call	#pushregs_
049bc     09 1F 02 F6 | 	mov	local01, arg01
049c0     09 21 02 F6 | 	mov	local02, arg01
049c4     97 06 48 FB | 	callpa	#(@LR__0361-@LR__0360)>>2,fcache_load_ptr_
049c8                 | LR__0360
049c8     10 FB C9 FA | 	rdbyte	result1, local02 wz
049cc     01 20 06 51 |  if_ne	add	local02, #1
049d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0360
049d4                 | LR__0361
049d4     09 21 82 F1 | 	sub	local02, arg01
049d8     10 FB 01 F6 | 	mov	result1, local02
049dc     FD 20 0A F6 | 	mov	local02, result1 wz
049e0     00 FA 05 A6 |  if_e	mov	result1, #0
049e4     80 00 90 AD |  if_e	jmp	#LR__0366
049e8                 | ' for i=1 to l
049e8     01 22 06 F6 | 	mov	local03, #1
049ec     10 25 02 F6 | 	mov	local04, local02
049f0     01 24 06 F1 | 	add	local04, #1
049f4                 | LR__0362
049f4     12 23 52 F2 | 	cmps	local03, local04 wc
049f8     68 00 90 3D |  if_ae	jmp	#LR__0365
049fc     0F 13 02 F6 | 	mov	arg01, local01
04a00     11 15 02 F6 | 	mov	arg02, local03
04a04     01 16 06 F6 | 	mov	arg03, #1
04a08     CC 62 B1 FD | 	call	#__system__Mid_S
04a0c     FD 26 02 F6 | 	mov	local05, result1
04a10                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04a10     42 01 00 FF 
04a14     F3 14 06 F6 | 	mov	arg02, ##@LR__4527
04a18     13 13 02 F6 | 	mov	arg01, local05
04a1c     B8 41 B1 FD | 	call	#__system___string_cmp
04a20     00 FA 55 F2 | 	cmps	result1, #0 wc
04a24     18 00 90 CD |  if_b	jmp	#LR__0363
04a28     42 01 00 FF 
04a2c     F5 14 06 F6 | 	mov	arg02, ##@LR__4528
04a30     13 13 02 F6 | 	mov	arg01, local05
04a34     A0 41 B1 FD | 	call	#__system___string_cmp
04a38     01 FA 55 F2 | 	cmps	result1, #1 wc
04a3c     1C 00 90 CD |  if_b	jmp	#LR__0364
04a40                 | LR__0363
04a40     42 01 00 FF 
04a44     F7 14 06 F6 | 	mov	arg02, ##@LR__4529
04a48     13 13 02 F6 | 	mov	arg01, local05
04a4c     88 41 B1 FD | 	call	#__system___string_cmp
04a50     00 FA 0D F2 | 	cmp	result1, #0 wz
04a54     00 FA 05 56 |  if_ne	mov	result1, #0
04a58     0C 00 90 5D |  if_ne	jmp	#LR__0366
04a5c                 | LR__0364
04a5c     01 22 06 F1 | 	add	local03, #1
04a60     90 FF 9F FD | 	jmp	#LR__0362
04a64                 | LR__0365
04a64                 | ' return true
04a64     01 FA 65 F6 | 	neg	result1, #1
04a68                 | LR__0366
04a68     A7 F0 03 F6 | 	mov	ptra, fp
04a6c     B2 00 A0 FD | 	call	#popregs_
04a70                 | _isdec_ret
04a70     2D 00 64 FD | 	ret
04a74                 | 
04a74                 | ' 
04a74                 | ' function isstring(s as string) as boolean
04a74                 | _isstring
04a74     01 4A 05 F6 | 	mov	COUNT_, #1
04a78     A8 00 A0 FD | 	call	#pushregs_
04a7c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
04a7c     09 1F 02 F6 | 	mov	local01, arg01
04a80     01 14 06 F6 | 	mov	arg02, #1
04a84     38 61 B1 FD | 	call	#__system__Left_S
04a88     FD 12 02 F6 | 	mov	arg01, result1
04a8c     42 01 00 FF 
04a90     F9 14 06 F6 | 	mov	arg02, ##@LR__4530
04a94     40 41 B1 FD | 	call	#__system___string_cmp
04a98     00 FA 4D F2 | 	cmps	result1, #0 wz
04a9c     28 00 90 5D |  if_ne	jmp	#LR__0370
04aa0     0F 13 02 F6 | 	mov	arg01, local01
04aa4     01 14 06 F6 | 	mov	arg02, #1
04aa8     9C 61 B1 FD | 	call	#__system__Right_S
04aac     FD 12 02 F6 | 	mov	arg01, result1
04ab0     42 01 00 FF 
04ab4     FB 14 06 F6 | 	mov	arg02, ##@LR__4531
04ab8     1C 41 B1 FD | 	call	#__system___string_cmp
04abc     00 FA 4D F2 | 	cmps	result1, #0 wz
04ac0     01 FA 65 A6 |  if_e	neg	result1, #1
04ac4     04 00 90 AD |  if_e	jmp	#LR__0371
04ac8                 | LR__0370
04ac8     00 FA 05 F6 | 	mov	result1, #0
04acc                 | LR__0371
04acc     A7 F0 03 F6 | 	mov	ptra, fp
04ad0     B2 00 A0 FD | 	call	#popregs_
04ad4                 | _isstring_ret
04ad4     2D 00 64 FD | 	ret
04ad8                 | 
04ad8                 | ' 
04ad8                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
04ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04ad8                 | ' 
04ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04ad8                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
04ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04ad8                 | ' 
04ad8                 | ' '----- delete a line from a program
04ad8                 | ' 
04ad8                 | ' function deleteline(aline as ulong) as integer
04ad8                 | _deleteline
04ad8     03 4A 05 F6 | 	mov	COUNT_, #3
04adc     A8 00 A0 FD | 	call	#pushregs_
04ae0     2C F0 07 F1 | 	add	ptra, #44
04ae4     04 4E 05 F1 | 	add	fp, #4
04ae8     A7 12 62 FC | 	wrlong	arg01, fp
04aec     69 00 00 FF 
04af0     58 E4 05 F1 | 	add	objptr, ##53848
04af4     F2 1E 02 FB | 	rdlong	local01, objptr
04af8     0C 4E 05 F1 | 	add	fp, #12
04afc     A7 1E 62 FC | 	wrlong	local01, fp
04b00     10 4E 85 F1 | 	sub	fp, #16
04b04                 | ' 
04b04                 | ' 
04b04                 | ' searchptr=programstart
04b04                 | ' 
04b04                 | ' do
04b04     5D 00 00 FF 
04b08     98 E5 85 F1 | 	sub	objptr, ##48024
04b0c                 | LR__0380
04b0c     14 4E 05 F1 | 	add	fp, #20
04b10     A7 12 02 F6 | 	mov	arg01, fp
04b14     04 4E 85 F1 | 	sub	fp, #4
04b18     A7 14 02 FB | 	rdlong	arg02, fp
04b1c     10 4E 85 F1 | 	sub	fp, #16
04b20     18 16 06 F6 | 	mov	arg03, #24
04b24     98 35 B1 FD | 	call	#_psram_spin2_read1
04b28     10 4E 05 F1 | 	add	fp, #16
04b2c     A7 1E 02 FB | 	rdlong	local01, fp
04b30     08 4E 85 F1 | 	sub	fp, #8
04b34     A7 1E 62 FC | 	wrlong	local01, fp
04b38     20 4E 05 F1 | 	add	fp, #32
04b3c     A7 1E 02 FB | 	rdlong	local01, fp
04b40     18 4E 85 F1 | 	sub	fp, #24
04b44     A7 1E 62 FC | 	wrlong	local01, fp
04b48     04 4E 05 F1 | 	add	fp, #4
04b4c     A7 1E 02 FB | 	rdlong	local01, fp
04b50     10 4E 85 F1 | 	sub	fp, #16
04b54     A7 16 02 FB | 	rdlong	arg03, fp
04b58     04 4E 85 F1 | 	sub	fp, #4
04b5c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04b60     28 4E 05 C1 |  if_b	add	fp, #40
04b64     A7 20 02 CB |  if_b	rdlong	local02, fp
04b68     28 4E 85 C1 |  if_b	sub	fp, #40
04b6c     FF FF 3F CF 
04b70     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04b74     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0380
04b78     0B 00 00 FF 
04b7c     C0 E4 85 F1 | 	sub	objptr, ##5824
04b80                 | ' 
04b80                 | ' 
04b80                 | ' if header(0)<>aline then return -1
04b80     14 4E 05 F1 | 	add	fp, #20
04b84     A7 1E 02 FB | 	rdlong	local01, fp
04b88     10 4E 85 F1 | 	sub	fp, #16
04b8c     A7 22 02 FB | 	rdlong	local03, fp
04b90     04 4E 85 F1 | 	sub	fp, #4
04b94     11 1F 0A F2 | 	cmp	local01, local03 wz
04b98     01 FA 65 56 |  if_ne	neg	result1, #1
04b9c     4C 03 90 5D |  if_ne	jmp	#LR__0386
04ba0     08 4E 05 F1 | 	add	fp, #8
04ba4     A7 12 02 FB | 	rdlong	arg01, fp
04ba8     08 4E 85 F1 | 	sub	fp, #8
04bac     01 14 66 F6 | 	neg	arg02, #1
04bb0     01 16 06 F6 | 	mov	arg03, #1
04bb4     00 18 06 F6 | 	mov	arg04, #0
04bb8     0B 00 00 FF 
04bbc     C0 E4 05 F1 | 	add	objptr, ##5824
04bc0                 | '     return fill(addr, pattern, count, listPtr, 4)
04bc0     04 1A 06 F6 | 	mov	arg05, #4
04bc4     30 36 B1 FD | 	call	#_psram_spin2_fill
04bc8     0B 00 00 FF 
04bcc     C0 E4 85 F1 | 	sub	objptr, ##5824
04bd0                 | ' 
04bd0                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
04bd0                 | ' 
04bd0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
04bd0     28 4E 05 F1 | 	add	fp, #40
04bd4     A7 1E 02 FB | 	rdlong	local01, fp
04bd8     28 4E 85 F1 | 	sub	fp, #40
04bdc     FF FF 3F FF 
04be0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04be4     24 4E 05 A1 |  if_e	add	fp, #36
04be8     A7 22 02 AB |  if_e	rdlong	local03, fp
04bec     24 4E 85 A1 |  if_e	sub	fp, #36
04bf0     FF FF 7F AF 
04bf4     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
04bf8     90 00 90 5D |  if_ne	jmp	#LR__0381
04bfc     69 00 00 FF 
04c00     58 E4 05 F1 | 	add	objptr, ##53848
04c04     F2 00 68 FC | 	wrlong	#0, objptr
04c08     07 00 00 FF 
04c0c     28 E4 85 F1 | 	sub	objptr, ##3624
04c10     F2 00 68 FC | 	wrlong	#0, objptr
04c14     07 00 00 FF 
04c18     2C E4 05 F1 | 	add	objptr, ##3628
04c1c     F2 00 68 FC | 	wrlong	#0, objptr
04c20     04 E4 05 F1 | 	add	objptr, #4
04c24     FF FF FF FF 
04c28     F2 FE 6B FC | 	wrlong	##-1, objptr
04c2c     00 12 06 F6 | 	mov	arg01, #0
04c30     10 E4 85 F1 | 	sub	objptr, #16
04c34     F2 00 68 FC | 	wrlong	#0, objptr
04c38     01 14 66 F6 | 	neg	arg02, #1
04c3c     01 16 06 F6 | 	mov	arg03, #1
04c40     00 18 06 F6 | 	mov	arg04, #0
04c44     5D 00 00 FF 
04c48     90 E5 85 F1 | 	sub	objptr, ##48016
04c4c                 | '     return fill(addr, pattern, count, listPtr, 4)
04c4c     04 1A 06 F6 | 	mov	arg05, #4
04c50     A4 35 B1 FD | 	call	#_psram_spin2_fill
04c54     10 12 06 F6 | 	mov	arg01, #16
04c58     01 14 66 F6 | 	neg	arg02, #1
04c5c     01 16 06 F6 | 	mov	arg03, #1
04c60     00 18 06 F6 | 	mov	arg04, #0
04c64                 | '     return fill(addr, pattern, count, listPtr, 4)
04c64     04 1A 06 F6 | 	mov	arg05, #4
04c68     8C 35 B1 FD | 	call	#_psram_spin2_fill
04c6c     14 12 06 F6 | 	mov	arg01, #20
04c70     1E 14 CE F9 | 	bmask	arg02, #30
04c74     01 16 06 F6 | 	mov	arg03, #1
04c78     00 18 06 F6 | 	mov	arg04, #0
04c7c                 | '     return fill(addr, pattern, count, listPtr, 4)
04c7c     04 1A 06 F6 | 	mov	arg05, #4
04c80     74 35 B1 FD | 	call	#_psram_spin2_fill
04c84     0B 00 00 FF 
04c88     C0 E4 85 F1 | 	sub	objptr, ##5824
04c8c                 | LR__0381
04c8c                 | ' 
04c8c                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
04c8c     28 4E 05 F1 | 	add	fp, #40
04c90     A7 1E 02 FB | 	rdlong	local01, fp
04c94     28 4E 85 F1 | 	sub	fp, #40
04c98     FF FF 3F FF 
04c9c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04ca0     88 00 90 5D |  if_ne	jmp	#LR__0382
04ca4     24 4E 05 F1 | 	add	fp, #36
04ca8     A7 22 02 FB | 	rdlong	local03, fp
04cac     24 4E 85 F1 | 	sub	fp, #36
04cb0     FF FF 7F FF 
04cb4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04cb8     70 00 90 AD |  if_e	jmp	#LR__0382
04cbc     24 4E 05 F1 | 	add	fp, #36
04cc0     A7 12 02 FB | 	rdlong	arg01, fp
04cc4     24 4E 85 F1 | 	sub	fp, #36
04cc8     14 12 06 F1 | 	add	arg01, #20
04ccc     1E 14 CE F9 | 	bmask	arg02, #30
04cd0     01 16 06 F6 | 	mov	arg03, #1
04cd4     00 18 06 F6 | 	mov	arg04, #0
04cd8     0B 00 00 FF 
04cdc     C0 E4 05 F1 | 	add	objptr, ##5824
04ce0                 | '     return fill(addr, pattern, count, listPtr, 4)
04ce0     04 1A 06 F6 | 	mov	arg05, #4
04ce4     10 35 B1 FD | 	call	#_psram_spin2_fill
04ce8     24 4E 05 F1 | 	add	fp, #36
04cec     A7 1E 02 FB | 	rdlong	local01, fp
04cf0     5D 00 00 FF 
04cf4     A0 E5 05 F1 | 	add	objptr, ##48032
04cf8     F2 1E 62 FC | 	wrlong	local01, objptr
04cfc     69 00 00 FF 
04d00     60 E4 85 F1 | 	sub	objptr, ##53856
04d04     A7 12 02 FB | 	rdlong	arg01, fp
04d08     24 4E 85 F1 | 	sub	fp, #36
04d0c     38 0B B1 FD | 	call	#_pslpeek
04d10     69 00 00 FF 
04d14     5C E4 05 F1 | 	add	objptr, ##53852
04d18     F2 FA 61 FC | 	wrlong	result1, objptr
04d1c     69 00 00 FF 
04d20     5C E4 85 F1 | 	sub	objptr, ##53852
04d24                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
04d24                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
04d24                 | '   lastline=pslpeek(header(4))
04d24                 | '   return 0
04d24     00 FA 05 F6 | 	mov	result1, #0
04d28     C0 01 90 FD | 	jmp	#LR__0386
04d2c                 | LR__0382
04d2c                 | ' 
04d2c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
04d2c     28 4E 05 F1 | 	add	fp, #40
04d30     A7 1E 02 FB | 	rdlong	local01, fp
04d34     28 4E 85 F1 | 	sub	fp, #40
04d38     FF FF 3F FF 
04d3c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04d40     6C 00 90 AD |  if_e	jmp	#LR__0383
04d44     24 4E 05 F1 | 	add	fp, #36
04d48     A7 22 02 FB | 	rdlong	local03, fp
04d4c     24 4E 85 F1 | 	sub	fp, #36
04d50     FF FF 7F FF 
04d54     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04d58     54 00 90 5D |  if_ne	jmp	#LR__0383
04d5c     28 4E 05 F1 | 	add	fp, #40
04d60     A7 12 02 FB | 	rdlong	arg01, fp
04d64     28 4E 85 F1 | 	sub	fp, #40
04d68     10 12 06 F1 | 	add	arg01, #16
04d6c     01 14 66 F6 | 	neg	arg02, #1
04d70     01 16 06 F6 | 	mov	arg03, #1
04d74     00 18 06 F6 | 	mov	arg04, #0
04d78     0B 00 00 FF 
04d7c     C0 E4 05 F1 | 	add	objptr, ##5824
04d80                 | '     return fill(addr, pattern, count, listPtr, 4)
04d80     04 1A 06 F6 | 	mov	arg05, #4
04d84     70 34 B1 FD | 	call	#_psram_spin2_fill
04d88     28 4E 05 F1 | 	add	fp, #40
04d8c     A7 1E 02 FB | 	rdlong	local01, fp
04d90     28 4E 85 F1 | 	sub	fp, #40
04d94     5D 00 00 FF 
04d98     98 E5 05 F1 | 	add	objptr, ##48024
04d9c     F2 1E 62 FC | 	wrlong	local01, objptr
04da0     69 00 00 FF 
04da4     58 E4 85 F1 | 	sub	objptr, ##53848
04da8                 | ' '   print "deleted first line"
04da8                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
04da8                 | '   programstart=header(5) ' adjust the program start to point on the first new line
04da8                 | '   return 0
04da8     00 FA 05 F6 | 	mov	result1, #0
04dac     3C 01 90 FD | 	jmp	#LR__0386
04db0                 | LR__0383
04db0                 | ' 
04db0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
04db0     28 4E 05 F1 | 	add	fp, #40
04db4     A7 1E 02 FB | 	rdlong	local01, fp
04db8     28 4E 85 F1 | 	sub	fp, #40
04dbc     FF FF 3F FF 
04dc0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04dc4     24 4E 05 51 |  if_ne	add	fp, #36
04dc8     A7 22 02 5B |  if_ne	rdlong	local03, fp
04dcc     24 4E 85 51 |  if_ne	sub	fp, #36
04dd0     FF FF 7F 5F 
04dd4     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
04dd8     68 00 90 AD |  if_e	jmp	#LR__0384
04ddc     28 4E 05 F1 | 	add	fp, #40
04de0     A7 12 02 FB | 	rdlong	arg01, fp
04de4     10 12 06 F1 | 	add	arg01, #16
04de8     04 4E 85 F1 | 	sub	fp, #4
04dec     A7 14 02 FB | 	rdlong	arg02, fp
04df0     24 4E 85 F1 | 	sub	fp, #36
04df4     01 16 06 F6 | 	mov	arg03, #1
04df8     00 18 06 F6 | 	mov	arg04, #0
04dfc     0B 00 00 FF 
04e00     C0 E4 05 F1 | 	add	objptr, ##5824
04e04                 | '     return fill(addr, pattern, count, listPtr, 4)
04e04     04 1A 06 F6 | 	mov	arg05, #4
04e08     EC 33 B1 FD | 	call	#_psram_spin2_fill
04e0c     24 4E 05 F1 | 	add	fp, #36
04e10     A7 12 02 FB | 	rdlong	arg01, fp
04e14     14 12 06 F1 | 	add	arg01, #20
04e18     04 4E 05 F1 | 	add	fp, #4
04e1c     A7 14 02 FB | 	rdlong	arg02, fp
04e20     28 4E 85 F1 | 	sub	fp, #40
04e24     01 16 06 F6 | 	mov	arg03, #1
04e28     00 18 06 F6 | 	mov	arg04, #0
04e2c                 | '     return fill(addr, pattern, count, listPtr, 4)
04e2c     04 1A 06 F6 | 	mov	arg05, #4
04e30     C4 33 B1 FD | 	call	#_psram_spin2_fill
04e34     0B 00 00 FF 
04e38     C0 E4 85 F1 | 	sub	objptr, ##5824
04e3c                 | '    pslpoke(header(5)+16,header(4))  
04e3c                 | '    pslpoke(header(4)+20, header(5))
04e3c                 | '    return 0
04e3c     00 FA 05 F6 | 	mov	result1, #0
04e40     A8 00 90 FD | 	jmp	#LR__0386
04e44                 | LR__0384
04e44     10 4E 05 F1 | 	add	fp, #16
04e48     A7 1E 02 FB | 	rdlong	local01, fp
04e4c     08 4E 85 F1 | 	sub	fp, #8
04e50     A7 1E 62 FC | 	wrlong	local01, fp
04e54     69 00 00 FF 
04e58     58 E4 05 F1 | 	add	objptr, ##53848
04e5c     F2 1E 02 FB | 	rdlong	local01, objptr
04e60     08 4E 05 F1 | 	add	fp, #8
04e64     A7 1E 62 FC | 	wrlong	local01, fp
04e68     10 4E 85 F1 | 	sub	fp, #16
04e6c                 | ' 
04e6c                 | ' 
04e6c                 | ' 
04e6c                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
04e6c                 | ' 
04e6c                 | ' lineptr2=searchptr
04e6c                 | ' searchptr=programstart
04e6c                 | ' 
04e6c                 | ' do
04e6c     5D 00 00 FF 
04e70     98 E5 85 F1 | 	sub	objptr, ##48024
04e74                 | LR__0385
04e74     14 4E 05 F1 | 	add	fp, #20
04e78     A7 12 02 F6 | 	mov	arg01, fp
04e7c     04 4E 85 F1 | 	sub	fp, #4
04e80     A7 14 02 FB | 	rdlong	arg02, fp
04e84     10 4E 85 F1 | 	sub	fp, #16
04e88     18 16 06 F6 | 	mov	arg03, #24
04e8c     30 32 B1 FD | 	call	#_psram_spin2_read1
04e90     10 4E 05 F1 | 	add	fp, #16
04e94     A7 1E 02 FB | 	rdlong	local01, fp
04e98     08 4E 85 F1 | 	sub	fp, #8
04e9c     A7 1E 62 FC | 	wrlong	local01, fp
04ea0     20 4E 05 F1 | 	add	fp, #32
04ea4     A7 1E 02 FB | 	rdlong	local01, fp
04ea8     18 4E 85 F1 | 	sub	fp, #24
04eac     A7 1E 62 FC | 	wrlong	local01, fp
04eb0     04 4E 05 F1 | 	add	fp, #4
04eb4     A7 1E 02 FB | 	rdlong	local01, fp
04eb8     10 4E 85 F1 | 	sub	fp, #16
04ebc     A7 22 02 FB | 	rdlong	local03, fp
04ec0     04 4E 85 F1 | 	sub	fp, #4
04ec4     11 1F 12 F2 | 	cmp	local01, local03 wc
04ec8     28 4E 05 C1 |  if_b	add	fp, #40
04ecc     A7 20 02 CB |  if_b	rdlong	local02, fp
04ed0     28 4E 85 C1 |  if_b	sub	fp, #40
04ed4     FF FF 3F CF 
04ed8     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04edc     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0385
04ee0     0B 00 00 FF 
04ee4     C0 E4 85 F1 | 	sub	objptr, ##5824
04ee8     00 FA 05 F6 | 	mov	result1, #0
04eec                 | LR__0386
04eec     A7 F0 03 F6 | 	mov	ptra, fp
04ef0     B2 00 A0 FD | 	call	#popregs_
04ef4                 | _deleteline_ret
04ef4     2D 00 64 FD | 	ret
04ef8                 | 
04ef8                 | ' 
04ef8                 | ' sub save_line
04ef8                 | _save_line
04ef8     03 4A 05 F6 | 	mov	COUNT_, #3
04efc     A8 00 A0 FD | 	call	#pushregs_
04f00     69 00 00 FF 
04f04     50 E4 05 F1 | 	add	objptr, ##53840
04f08     F2 16 02 FB | 	rdlong	arg03, objptr
04f0c     01 16 06 F1 | 	add	arg03, #1
04f10     05 00 00 FF 
04f14     18 E4 85 F1 | 	sub	objptr, ##2584
04f18     F2 14 02 FB | 	rdlong	arg02, objptr
04f1c     0B 15 02 FD | 	qmul	arg02, arg03
04f20     0E 00 00 FF 
04f24     44 E4 85 F1 | 	sub	objptr, ##7236
04f28     F2 12 02 FB | 	rdlong	arg01, objptr
04f2c     55 00 00 FF 
04f30     F4 E5 85 F1 | 	sub	objptr, ##44020
04f34     09 1F 02 F6 | 	mov	local01, arg01
04f38     18 20 62 FD | 	getqx	local02
04f3c     97 06 48 FB | 	callpa	#(@LR__0391-@LR__0390)>>2,fcache_load_ptr_
04f40                 | LR__0390
04f40     0F FB C9 FA | 	rdbyte	result1, local01 wz
04f44     01 1E 06 51 |  if_ne	add	local01, #1
04f48     F4 FF 9F 5D |  if_ne	jmp	#LR__0390
04f4c                 | LR__0391
04f4c     09 1F 82 F1 | 	sub	local01, arg01
04f50     03 1E CE F7 | 	test	local01, #3 wz
04f54     02 1E 46 50 |  if_ne	shr	local01, #2
04f58     01 1E 06 51 |  if_ne	add	local01, #1
04f5c     02 1E 66 50 |  if_ne	shl	local01, #2
04f60     10 23 02 F6 | 	mov	local03, local02
04f64     0F 23 02 F1 | 	add	local03, local01
04f68     62 00 00 FF 
04f6c     30 E4 05 F1 | 	add	objptr, ##50224
04f70     F2 16 02 FB | 	rdlong	arg03, objptr
04f74     10 17 02 F1 | 	add	arg03, local02
04f78     04 00 00 FF 
04f7c     28 E4 05 F1 | 	add	objptr, ##2088
04f80     F2 16 62 FC | 	wrlong	arg03, objptr
04f84     04 E4 05 F1 | 	add	objptr, #4
04f88     F2 1E 62 FC | 	wrlong	local01, objptr
04f8c     0C E4 85 F1 | 	sub	objptr, #12
04f90     F2 12 02 F6 | 	mov	arg01, objptr
04f94     04 00 00 FF 
04f98     20 E4 85 F1 | 	sub	objptr, ##2080
04f9c     F2 14 02 FB | 	rdlong	arg02, objptr
04fa0     10 17 02 F6 | 	mov	arg03, local02
04fa4     56 00 00 FF 
04fa8     70 E5 85 F1 | 	sub	objptr, ##44400
04fac     AC 31 B1 FD | 	call	#_psram_spin2_write
04fb0     4A 00 00 FF 
04fb4     34 E5 05 F1 | 	add	objptr, ##38196
04fb8     F2 12 02 FB | 	rdlong	arg01, objptr
04fbc     0C 00 00 FF 
04fc0     3C E4 05 F1 | 	add	objptr, ##6204
04fc4     F2 14 02 FB | 	rdlong	arg02, objptr
04fc8     10 15 02 F1 | 	add	arg02, local02
04fcc     0F 17 02 F6 | 	mov	arg03, local01
04fd0     56 00 00 FF 
04fd4     70 E5 85 F1 | 	sub	objptr, ##44400
04fd8     80 31 B1 FD | 	call	#_psram_spin2_write
04fdc     56 00 00 FF 
04fe0     70 E5 05 F1 | 	add	objptr, ##44400
04fe4     F2 1E 02 FB | 	rdlong	local01, objptr
04fe8     11 1F 02 F1 | 	add	local01, local03
04fec     F2 1E 62 FC | 	wrlong	local01, objptr
04ff0     62 00 00 FF 
04ff4     30 E4 85 F1 | 	sub	objptr, ##50224
04ff8     A7 F0 03 F6 | 	mov	ptra, fp
04ffc     B2 00 A0 FD | 	call	#popregs_
05000                 | _save_line_ret
05000     2D 00 64 FD | 	ret
05004                 | 
05004                 | ' 
05004                 | ' 
05004                 | ' function insertline(aline as ulong) as integer
05004                 | _insertline
05004     02 4A 05 F6 | 	mov	COUNT_, #2
05008     A8 00 A0 FD | 	call	#pushregs_
0500c     28 F0 07 F1 | 	add	ptra, #40
05010     04 4E 05 F1 | 	add	fp, #4
05014     A7 12 62 FC | 	wrlong	arg01, fp
05018     69 00 00 FF 
0501c     58 E4 05 F1 | 	add	objptr, ##53848
05020     F2 1E 02 FB | 	rdlong	local01, objptr
05024     04 4E 05 F1 | 	add	fp, #4
05028     A7 1E 62 FC | 	wrlong	local01, fp
0502c     08 4E 85 F1 | 	sub	fp, #8
05030                 | ' 
05030                 | ' do
05030     5D 00 00 FF 
05034     98 E5 85 F1 | 	sub	objptr, ##48024
05038                 | LR__0400
05038     10 4E 05 F1 | 	add	fp, #16
0503c     A7 12 02 F6 | 	mov	arg01, fp
05040     08 4E 85 F1 | 	sub	fp, #8
05044     A7 14 02 FB | 	rdlong	arg02, fp
05048     08 4E 85 F1 | 	sub	fp, #8
0504c     18 16 06 F6 | 	mov	arg03, #24
05050     6C 30 B1 FD | 	call	#_psram_spin2_read1
05054     08 4E 05 F1 | 	add	fp, #8
05058     A7 1E 02 FB | 	rdlong	local01, fp
0505c     04 4E 05 F1 | 	add	fp, #4
05060     A7 1E 62 FC | 	wrlong	local01, fp
05064     18 4E 05 F1 | 	add	fp, #24
05068     A7 1E 02 FB | 	rdlong	local01, fp
0506c     1C 4E 85 F1 | 	sub	fp, #28
05070     A7 1E 62 FC | 	wrlong	local01, fp
05074     08 4E 05 F1 | 	add	fp, #8
05078     A7 1E 02 FB | 	rdlong	local01, fp
0507c     0C 4E 85 F1 | 	sub	fp, #12
05080     A7 16 02 FB | 	rdlong	arg03, fp
05084     04 4E 85 F1 | 	sub	fp, #4
05088     0B 1F 12 F2 | 	cmp	local01, arg03 wc
0508c     24 4E 05 C1 |  if_b	add	fp, #36
05090     A7 20 02 CB |  if_b	rdlong	local02, fp
05094     24 4E 85 C1 |  if_b	sub	fp, #36
05098     FF FF 3F CF 
0509c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
050a0     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0400
050a4     0B 00 00 FF 
050a8     C0 E4 85 F1 | 	sub	objptr, ##5824
050ac                 | ' 
050ac                 | ' if header(0)=aline then return -1 ' delete it first
050ac     10 4E 05 F1 | 	add	fp, #16
050b0     A7 1E 02 FB | 	rdlong	local01, fp
050b4     0C 4E 85 F1 | 	sub	fp, #12
050b8     A7 20 02 FB | 	rdlong	local02, fp
050bc     04 4E 85 F1 | 	sub	fp, #4
050c0     10 1F 0A F2 | 	cmp	local01, local02 wz
050c4     01 FA 65 A6 |  if_e	neg	result1, #1
050c8     74 01 90 AD |  if_e	jmp	#LR__0403
050cc                 | ' if header(0)<aline then return -2 ' end of program reached
050cc     10 4E 05 F1 | 	add	fp, #16
050d0     A7 1E 02 FB | 	rdlong	local01, fp
050d4     0C 4E 85 F1 | 	sub	fp, #12
050d8     A7 16 02 FB | 	rdlong	arg03, fp
050dc     04 4E 85 F1 | 	sub	fp, #4
050e0     0B 1F 12 F2 | 	cmp	local01, arg03 wc
050e4     02 FA 65 C6 |  if_b	neg	result1, #2
050e8     54 01 90 CD |  if_b	jmp	#LR__0403
050ec                 | ' 
050ec                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
050ec     20 4E 05 F1 | 	add	fp, #32
050f0     A7 1E 02 FB | 	rdlong	local01, fp
050f4     20 4E 85 F1 | 	sub	fp, #32
050f8     FF FF 7F FF 
050fc     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05100     84 00 90 5D |  if_ne	jmp	#LR__0401
05104     62 00 00 FF 
05108     30 E4 05 F1 | 	add	objptr, ##50224
0510c     F2 1E 02 FB | 	rdlong	local01, objptr
05110     07 00 00 FF 
05114     28 E4 05 F1 | 	add	objptr, ##3624
05118     F2 1E 62 FC | 	wrlong	local01, objptr
0511c     0C 4E 05 F1 | 	add	fp, #12
05120     A7 12 02 FB | 	rdlong	arg01, fp
05124     0C 4E 85 F1 | 	sub	fp, #12
05128     10 12 06 F1 | 	add	arg01, #16
0512c     07 00 00 FF 
05130     28 E4 85 F1 | 	sub	objptr, ##3624
05134     F2 14 02 FB | 	rdlong	arg02, objptr
05138     01 16 06 F6 | 	mov	arg03, #1
0513c     00 18 06 F6 | 	mov	arg04, #0
05140     56 00 00 FF 
05144     70 E5 85 F1 | 	sub	objptr, ##44400
05148                 | '     return fill(addr, pattern, count, listPtr, 4)
05148     04 1A 06 F6 | 	mov	arg05, #4
0514c     A8 30 B1 FD | 	call	#_psram_spin2_fill
05150     5A 00 00 FF 
05154     A0 E5 05 F1 | 	add	objptr, ##46496
05158     FF FF FF FF 
0515c     F2 FE 6B FC | 	wrlong	##-1, objptr
05160     0C 4E 05 F1 | 	add	fp, #12
05164     A7 1E 02 FB | 	rdlong	local01, fp
05168     0C 4E 85 F1 | 	sub	fp, #12
0516c     04 E4 05 F1 | 	add	objptr, #4
05170     F2 1E 62 FC | 	wrlong	local01, objptr
05174     66 00 00 FF 
05178     64 E4 85 F1 | 	sub	objptr, ##52324
0517c     78 FD BF FD | 	call	#_save_line
05180                 | '   programstart=programptr
05180                 | '   pslpoke(lineptr2+16,programptr)
05180                 | '   ucompiledline(4)=$FFFF_FFFF
05180                 | '   ucompiledline(5)=lineptr2
05180                 | '   save_line
05180                 | '   return 0
05180     00 FA 05 F6 | 	mov	result1, #0
05184     B8 00 90 FD | 	jmp	#LR__0403
05188                 | LR__0401
05188                 | ' 
05188                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05188     20 4E 05 F1 | 	add	fp, #32
0518c     A7 1E 02 FB | 	rdlong	local01, fp
05190     20 4E 85 F1 | 	sub	fp, #32
05194     FF FF 7F FF 
05198     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0519c     9C 00 90 AD |  if_e	jmp	#LR__0402
051a0     20 4E 05 F1 | 	add	fp, #32
051a4     A7 1E 02 FB | 	rdlong	local01, fp
051a8     66 00 00 FF 
051ac     60 E4 05 F1 | 	add	objptr, ##52320
051b0     F2 1E 62 FC | 	wrlong	local01, objptr
051b4     14 4E 85 F1 | 	sub	fp, #20
051b8     A7 1E 02 FB | 	rdlong	local01, fp
051bc     04 E4 05 F1 | 	add	objptr, #4
051c0     F2 1E 62 FC | 	wrlong	local01, objptr
051c4     A7 12 02 FB | 	rdlong	arg01, fp
051c8     0C 4E 85 F1 | 	sub	fp, #12
051cc     10 12 06 F1 | 	add	arg01, #16
051d0     04 00 00 FF 
051d4     34 E4 85 F1 | 	sub	objptr, ##2100
051d8     F2 14 02 FB | 	rdlong	arg02, objptr
051dc     01 16 06 F6 | 	mov	arg03, #1
051e0     00 18 06 F6 | 	mov	arg04, #0
051e4     56 00 00 FF 
051e8     70 E5 85 F1 | 	sub	objptr, ##44400
051ec                 | '     return fill(addr, pattern, count, listPtr, 4)
051ec     04 1A 06 F6 | 	mov	arg05, #4
051f0     04 30 B1 FD | 	call	#_psram_spin2_fill
051f4     20 4E 05 F1 | 	add	fp, #32
051f8     A7 12 02 FB | 	rdlong	arg01, fp
051fc     20 4E 85 F1 | 	sub	fp, #32
05200     14 12 06 F1 | 	add	arg01, #20
05204     56 00 00 FF 
05208     70 E5 05 F1 | 	add	objptr, ##44400
0520c     F2 14 02 FB | 	rdlong	arg02, objptr
05210     01 16 06 F6 | 	mov	arg03, #1
05214     00 18 06 F6 | 	mov	arg04, #0
05218     56 00 00 FF 
0521c     70 E5 85 F1 | 	sub	objptr, ##44400
05220                 | '     return fill(addr, pattern, count, listPtr, 4)
05220     04 1A 06 F6 | 	mov	arg05, #4
05224     D0 2F B1 FD | 	call	#_psram_spin2_fill
05228     0B 00 00 FF 
0522c     C0 E4 85 F1 | 	sub	objptr, ##5824
05230     C4 FC BF FD | 	call	#_save_line
05234                 | '   ucompiledline(4)=header(4)
05234                 | '   ucompiledline(5)=lineptr2
05234                 | '   pslpoke(lineptr2+16,programptr)
05234                 | '   pslpoke(header(4)+20,programptr)
05234                 | '   save_line
05234                 | '   return 0
05234     00 FA 05 F6 | 	mov	result1, #0
05238     04 00 90 FD | 	jmp	#LR__0403
0523c                 | LR__0402
0523c     00 FA 05 F6 | 	mov	result1, #0
05240                 | LR__0403
05240     A7 F0 03 F6 | 	mov	ptra, fp
05244     B2 00 A0 FD | 	call	#popregs_
05248                 | _insertline_ret
05248     2D 00 64 FD | 	ret
0524c                 | 
0524c                 | ' 
0524c                 | ' sub add_line_at_end(aline) 
0524c                 | _add_line_at_end
0524c     69 00 00 FF 
05250     5C E4 05 F1 | 	add	objptr, ##53852
05254     F2 12 62 FC | 	wrlong	arg01, objptr
05258     04 E4 05 F1 | 	add	objptr, #4
0525c     F2 14 02 FB | 	rdlong	arg02, objptr
05260     03 00 00 FF 
05264     00 E4 85 F1 | 	sub	objptr, ##1536
05268     F2 14 62 FC | 	wrlong	arg02, objptr
0526c     03 00 00 FF 
05270     00 E4 05 F1 | 	add	objptr, ##1536
05274     F2 12 02 FB | 	rdlong	arg01, objptr
05278     14 12 06 F1 | 	add	arg01, #20
0527c     07 00 00 FF 
05280     30 E4 85 F1 | 	sub	objptr, ##3632
05284     F2 14 02 FB | 	rdlong	arg02, objptr
05288     01 16 06 F6 | 	mov	arg03, #1
0528c     00 18 06 F6 | 	mov	arg04, #0
05290     56 00 00 FF 
05294     70 E5 85 F1 | 	sub	objptr, ##44400
05298                 | '     return fill(addr, pattern, count, listPtr, 4)
05298     04 1A 06 F6 | 	mov	arg05, #4
0529c     58 2F B1 FD | 	call	#_psram_spin2_fill
052a0     56 00 00 FF 
052a4     70 E5 05 F1 | 	add	objptr, ##44400
052a8     F2 14 02 FB | 	rdlong	arg02, objptr
052ac     07 00 00 FF 
052b0     30 E4 05 F1 | 	add	objptr, ##3632
052b4     F2 14 62 FC | 	wrlong	arg02, objptr
052b8     02 00 00 FF 
052bc     FC E5 85 F1 | 	sub	objptr, ##1532
052c0     FF FF BF FF 
052c4     F2 FE 6B FC | 	wrlong	##2147483647, objptr
052c8                 | ' 
052c8                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
052c8                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
052c8     04 00 00 FF 
052cc     34 E4 85 F1 | 	sub	objptr, ##2100
052d0     F2 14 0A FB | 	rdlong	arg02, objptr wz
052d4     62 00 00 FF 
052d8     30 E4 85 F1 | 	sub	objptr, ##50224
052dc     66 00 00 AF 
052e0     60 E4 05 A1 |  if_e	add	objptr, ##52320
052e4     FF FF FF AF 
052e8     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
052ec     66 00 00 AF 
052f0     60 E4 85 A1 |  if_e	sub	objptr, ##52320
052f4     00 FC BF FD | 	call	#_save_line
052f8     62 00 00 FF 
052fc     30 E4 05 F1 | 	add	objptr, ##50224
05300     F2 12 02 FB | 	rdlong	arg01, objptr
05304     01 14 66 F6 | 	neg	arg02, #1
05308     01 16 06 F6 | 	mov	arg03, #1
0530c     00 18 06 F6 | 	mov	arg04, #0
05310     56 00 00 FF 
05314     70 E5 85 F1 | 	sub	objptr, ##44400
05318                 | '     return fill(addr, pattern, count, listPtr, 4)
05318     04 1A 06 F6 | 	mov	arg05, #4
0531c     D8 2E B1 FD | 	call	#_psram_spin2_fill
05320     0B 00 00 FF 
05324     C0 E4 85 F1 | 	sub	objptr, ##5824
05328                 | _add_line_at_end_ret
05328     2D 00 64 FD | 	ret
0532c                 | 
0532c                 | ' 
0532c                 | ' function compile_immediate(linetype as ulong) as integer
0532c                 | _compile_immediate
0532c     09 4A 05 F6 | 	mov	COUNT_, #9
05330     A8 00 A0 FD | 	call	#pushregs_
05334                 | _compile_immediate_enter
05334     09 25 0A F6 | 	mov	local04, arg01 wz
05338     00 26 06 F6 | 	mov	local05, #0
0533c     00 28 06 F6 | 	mov	local06, #0
05340                 | ' 
05340                 | ' ' linetype=cont+1, linetype=0 immediate
05340                 | ' '  : 1: this is the first part of the line that will continue
05340                 | ' ' 2 - this is the continuation of the line
05340                 | ' ' 3 - this is the last continued line
05340                 | ' ' 4 - this is the one and only part
05340                 | ' 
05340                 | ' err=0
05340                 | ' cmd=0
05340                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
05340     2C 00 90 5D |  if_ne	jmp	#LR__0410
05344     53 00 00 FF 
05348     E4 E5 05 F1 | 	add	objptr, ##42980
0534c     F2 28 02 FB | 	rdlong	local06, objptr
05350     02 00 00 FF 
05354     34 E4 05 F1 | 	add	objptr, ##1076
05358     F2 02 68 FC | 	wrlong	#1, objptr
0535c     13 00 00 FF 
05360     38 E4 05 F1 | 	add	objptr, ##9784
05364     F2 00 68 FC | 	wrlong	#0, objptr
05368     69 00 00 FF 
0536c     50 E4 85 F1 | 	sub	objptr, ##53840
05370                 | LR__0410
05370                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05370     02 24 0E F2 | 	cmp	local04, #2 wz
05374     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05378     53 00 00 AF 
0537c     E4 E5 05 A1 |  if_e	add	objptr, ##42980
05380     F2 28 02 AB |  if_e	rdlong	local06, objptr
05384     02 00 00 AF 
05388     34 E4 05 A1 |  if_e	add	objptr, ##1076
0538c     F2 02 68 AC |  if_e	wrlong	#1, objptr
05390     56 00 00 AF 
05394     18 E4 85 A1 |  if_e	sub	objptr, ##44056
05398                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05398     04 24 0E F2 | 	cmp	local04, #4 wz
0539c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
053a0     2C 00 90 5D |  if_ne	jmp	#LR__0411
053a4     53 00 00 FF 
053a8     EC E5 05 F1 | 	add	objptr, ##42988
053ac     F2 28 02 FB | 	rdlong	local06, objptr
053b0     02 00 00 FF 
053b4     2C E4 05 F1 | 	add	objptr, ##1068
053b8     F2 04 68 FC | 	wrlong	#2, objptr
053bc     13 00 00 FF 
053c0     38 E4 05 F1 | 	add	objptr, ##9784
053c4     F2 04 68 FC | 	wrlong	#2, objptr
053c8     69 00 00 FF 
053cc     50 E4 85 F1 | 	sub	objptr, ##53840
053d0                 | LR__0411
053d0                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
053d0     05 24 0E F2 | 	cmp	local04, #5 wz
053d4     40 00 90 5D |  if_ne	jmp	#LR__0412
053d8     56 00 00 FF 
053dc     18 E4 05 F1 | 	add	objptr, ##44056
053e0     F2 2A 02 FB | 	rdlong	local07, objptr
053e4     15 29 02 F6 | 	mov	local06, local07
053e8     03 28 66 F0 | 	shl	local06, #3
053ec     02 00 00 FF 
053f0     38 E4 85 F1 | 	sub	objptr, ##1080
053f4     F2 28 02 F1 | 	add	local06, objptr
053f8     04 28 06 F1 | 	add	local06, #4
053fc     14 29 02 FB | 	rdlong	local06, local06
05400     01 2A 06 F1 | 	add	local07, #1
05404     02 00 00 FF 
05408     38 E4 05 F1 | 	add	objptr, ##1080
0540c     F2 2A 62 FC | 	wrlong	local07, objptr
05410     56 00 00 FF 
05414     18 E4 85 F1 | 	sub	objptr, ##44056
05418                 | LR__0412
05418     00 2C 06 F6 | 	mov	local08, #0
0541c                 | ' vars=0
0541c                 | ' 'print  "In compile_immediate cmd=:", cmd
0541c                 | ' 451 select case cmd
0541c     40 28 0E F2 | 	cmp	local06, #64 wz
05420     41 28 0E 52 |  if_ne	cmp	local06, #65 wz
05424     C8 03 90 AD |  if_e	jmp	#LR__0461
05428     4C 28 0E F2 | 	cmp	local06, #76 wz
0542c     98 01 90 AD |  if_e	jmp	#LR__0413
05430     73 28 0E F2 | 	cmp	local06, #115 wz
05434     9C 01 90 AD |  if_e	jmp	#LR__0414
05438     74 28 0E F2 | 	cmp	local06, #116 wz
0543c     A0 01 90 AD |  if_e	jmp	#LR__0415
05440     75 28 0E F2 | 	cmp	local06, #117 wz
05444     A4 01 90 AD |  if_e	jmp	#LR__0416
05448     4D 28 0E F2 | 	cmp	local06, #77 wz
0544c     A0 03 90 AD |  if_e	jmp	#LR__0461
05450     42 28 0E F2 | 	cmp	local06, #66 wz
05454     A0 01 90 AD |  if_e	jmp	#LR__0417
05458     43 28 0E F2 | 	cmp	local06, #67 wz
0545c     A4 01 90 AD |  if_e	jmp	#LR__0418
05460     45 28 0E F2 | 	cmp	local06, #69 wz
05464     A8 01 90 AD |  if_e	jmp	#LR__0419
05468     46 28 0E F2 | 	cmp	local06, #70 wz
0546c     AC 01 90 AD |  if_e	jmp	#LR__0420
05470     47 28 0E F2 | 	cmp	local06, #71 wz
05474     B0 01 90 AD |  if_e	jmp	#LR__0421
05478     48 28 0E F2 | 	cmp	local06, #72 wz
0547c     B4 01 90 AD |  if_e	jmp	#LR__0422
05480     49 28 0E F2 | 	cmp	local06, #73 wz
05484     B8 01 90 AD |  if_e	jmp	#LR__0423
05488     44 28 0E F2 | 	cmp	local06, #68 wz
0548c     BC 01 90 AD |  if_e	jmp	#LR__0424
05490     4E 28 0E F2 | 	cmp	local06, #78 wz
05494     C0 01 90 AD |  if_e	jmp	#LR__0425
05498     50 28 0E F2 | 	cmp	local06, #80 wz
0549c     D4 01 90 AD |  if_e	jmp	#LR__0427
054a0     51 28 0E F2 | 	cmp	local06, #81 wz
054a4     D8 01 90 AD |  if_e	jmp	#LR__0428
054a8     52 28 0E F2 | 	cmp	local06, #82 wz
054ac     DC 01 90 AD |  if_e	jmp	#LR__0429
054b0     59 28 0E F2 | 	cmp	local06, #89 wz
054b4     E0 01 90 AD |  if_e	jmp	#LR__0430
054b8     55 28 0E F2 | 	cmp	local06, #85 wz
054bc     E4 01 90 AD |  if_e	jmp	#LR__0431
054c0     56 28 0E F2 | 	cmp	local06, #86 wz
054c4     E8 01 90 AD |  if_e	jmp	#LR__0432
054c8     57 28 0E F2 | 	cmp	local06, #87 wz
054cc     70 28 0E 52 |  if_ne	cmp	local06, #112 wz
054d0     1C 03 90 AD |  if_e	jmp	#LR__0461
054d4     58 28 0E F2 | 	cmp	local06, #88 wz
054d8     E0 01 90 AD |  if_e	jmp	#LR__0433
054dc     4A 28 0E F2 | 	cmp	local06, #74 wz
054e0     E0 01 90 AD |  if_e	jmp	#LR__0434
054e4     4B 28 0E F2 | 	cmp	local06, #75 wz
054e8     E0 01 90 AD |  if_e	jmp	#LR__0435
054ec     89 28 0E F2 | 	cmp	local06, #137 wz
054f0     88 28 0E 52 |  if_ne	cmp	local06, #136 wz
054f4     F8 02 90 AD |  if_e	jmp	#LR__0461
054f8     8A 28 0E F2 | 	cmp	local06, #138 wz
054fc     D4 01 90 AD |  if_e	jmp	#LR__0436
05500     5A 28 0E F2 | 	cmp	local06, #90 wz
05504     D8 01 90 AD |  if_e	jmp	#LR__0437
05508     5C 28 0E F2 | 	cmp	local06, #92 wz
0550c     D8 01 90 AD |  if_e	jmp	#LR__0438
05510     5D 28 0E F2 | 	cmp	local06, #93 wz
05514     D8 02 90 AD |  if_e	jmp	#LR__0461
05518     5E 28 0E F2 | 	cmp	local06, #94 wz
0551c     D4 01 90 AD |  if_e	jmp	#LR__0439
05520     5F 28 0E F2 | 	cmp	local06, #95 wz
05524     D8 01 90 AD |  if_e	jmp	#LR__0440
05528     60 28 0E F2 | 	cmp	local06, #96 wz
0552c     DC 01 90 AD |  if_e	jmp	#LR__0441
05530     61 28 0E F2 | 	cmp	local06, #97 wz
05534     E0 01 90 AD |  if_e	jmp	#LR__0442
05538     63 28 0E F2 | 	cmp	local06, #99 wz
0553c     E4 01 90 AD |  if_e	jmp	#LR__0443
05540     68 28 0E F2 | 	cmp	local06, #104 wz
05544     E8 01 90 AD |  if_e	jmp	#LR__0444
05548     69 28 0E F2 | 	cmp	local06, #105 wz
0554c     EC 01 90 AD |  if_e	jmp	#LR__0445
05550     6D 28 0E F2 | 	cmp	local06, #109 wz
05554     F0 01 90 AD |  if_e	jmp	#LR__0446
05558     6C 28 0E F2 | 	cmp	local06, #108 wz
0555c     F4 01 90 AD |  if_e	jmp	#LR__0447
05560     71 28 0E F2 | 	cmp	local06, #113 wz
05564     F8 01 90 AD |  if_e	jmp	#LR__0448
05568     79 28 0E F2 | 	cmp	local06, #121 wz
0556c     FC 01 90 AD |  if_e	jmp	#LR__0449
05570     77 28 0E F2 | 	cmp	local06, #119 wz
05574     00 02 90 AD |  if_e	jmp	#LR__0450
05578     78 28 0E F2 | 	cmp	local06, #120 wz
0557c     04 02 90 AD |  if_e	jmp	#LR__0451
05580     7C 28 0E F2 | 	cmp	local06, #124 wz
05584     08 02 90 AD |  if_e	jmp	#LR__0452
05588     7D 28 0E F2 | 	cmp	local06, #125 wz
0558c     0C 02 90 AD |  if_e	jmp	#LR__0453
05590     7E 28 0E F2 | 	cmp	local06, #126 wz
05594     10 02 90 AD |  if_e	jmp	#LR__0454
05598     7F 28 0E F2 | 	cmp	local06, #127 wz
0559c     14 02 90 AD |  if_e	jmp	#LR__0455
055a0     80 28 0E F2 | 	cmp	local06, #128 wz
055a4     18 02 90 AD |  if_e	jmp	#LR__0456
055a8     72 28 0E F2 | 	cmp	local06, #114 wz
055ac     1C 02 90 AD |  if_e	jmp	#LR__0457
055b0     81 28 0E F2 | 	cmp	local06, #129 wz
055b4     1C 02 90 AD |  if_e	jmp	#LR__0458
055b8     01 00 00 FF 
055bc     04 28 0E F2 | 	cmp	local06, ##516 wz
055c0     1C 02 90 AD |  if_e	jmp	#LR__0459
055c4     20 02 90 FD | 	jmp	#LR__0460
055c8                 | LR__0413
055c8     3C 0F B0 FD | 	call	#_compile_fun_varp
055cc     FD 2C 02 F6 | 	mov	local08, result1
055d0     1C 02 90 FD | 	jmp	#LR__0461
055d4                 | LR__0414
055d4     30 0F B0 FD | 	call	#_compile_fun_varp
055d8     FD 2C 02 F6 | 	mov	local08, result1
055dc     10 02 90 FD | 	jmp	#LR__0461
055e0                 | LR__0415
055e0     24 0F B0 FD | 	call	#_compile_fun_varp
055e4     FD 2C 02 F6 | 	mov	local08, result1
055e8     04 02 90 FD | 	jmp	#LR__0461
055ec                 | LR__0416
055ec     18 0F B0 FD | 	call	#_compile_fun_varp
055f0     FD 2C 02 F6 | 	mov	local08, result1
055f4     F8 01 90 FD | 	jmp	#LR__0461
055f8                 | LR__0417
055f8     2C 0B B0 FD | 	call	#_compile_fun_2p
055fc     FD 26 02 F6 | 	mov	local05, result1
05600     EC 01 90 FD | 	jmp	#LR__0461
05604                 | LR__0418
05604     20 0B B0 FD | 	call	#_compile_fun_2p
05608     FD 26 02 F6 | 	mov	local05, result1
0560c     E0 01 90 FD | 	jmp	#LR__0461
05610                 | LR__0419
05610     88 0B B0 FD | 	call	#_compile_fun_3p
05614     FD 26 02 F6 | 	mov	local05, result1
05618     D4 01 90 FD | 	jmp	#LR__0461
0561c                 | LR__0420
0561c     7C 0B B0 FD | 	call	#_compile_fun_3p
05620     FD 26 02 F6 | 	mov	local05, result1
05624     C8 01 90 FD | 	jmp	#LR__0461
05628                 | LR__0421
05628     3C 0C B0 FD | 	call	#_compile_fun_4p
0562c     FD 26 02 F6 | 	mov	local05, result1
05630     BC 01 90 FD | 	jmp	#LR__0461
05634                 | LR__0422
05634     30 0C B0 FD | 	call	#_compile_fun_4p
05638     FD 26 02 F6 | 	mov	local05, result1
0563c     B0 01 90 FD | 	jmp	#LR__0461
05640                 | LR__0423
05640     C4 2C B0 FD | 	call	#_expr
05644                 | ' expr()
05644                 | ' return 0
05644     00 26 06 F6 | 	mov	local05, #0
05648     A4 01 90 FD | 	jmp	#LR__0461
0564c                 | LR__0424
0564c     64 0F B0 FD | 	call	#_compile_print
05650     FD 26 02 F6 | 	mov	local05, result1
05654     54 02 90 FD | 	jmp	#LR__0462
05658                 | LR__0425
05658     01 24 16 F2 | 	cmp	local04, #1 wc
0565c     08 00 90 CD |  if_b	jmp	#LR__0426
05660     44 29 B0 FD | 	call	#_compile_goto
05664     44 02 90 FD | 	jmp	#LR__0462
05668                 | LR__0426
05668     19 12 06 F6 | 	mov	arg01, #25
0566c     1C 00 B1 FD | 	call	#_printerror
05670     38 02 90 FD | 	jmp	#LR__0462
05674                 | LR__0427
05674     90 2C B0 FD | 	call	#_expr
05678                 | ' expr()
05678                 | ' return 0
05678     00 26 06 F6 | 	mov	local05, #0
0567c     70 01 90 FD | 	jmp	#LR__0461
05680                 | LR__0428
05680     84 2C B0 FD | 	call	#_expr
05684                 | ' expr()
05684                 | ' return 0
05684     00 26 06 F6 | 	mov	local05, #0
05688     64 01 90 FD | 	jmp	#LR__0461
0568c                 | LR__0429
0568c     78 2C B0 FD | 	call	#_expr
05690                 | ' expr()
05690                 | ' return 0
05690     00 26 06 F6 | 	mov	local05, #0
05694     58 01 90 FD | 	jmp	#LR__0461
05698                 | LR__0430
05698     6C 2C B0 FD | 	call	#_expr
0569c                 | ' expr()
0569c                 | ' return 0
0569c     00 26 06 F6 | 	mov	local05, #0
056a0     4C 01 90 FD | 	jmp	#LR__0461
056a4                 | LR__0431
056a4     80 0A B0 FD | 	call	#_compile_fun_2p
056a8     FD 26 02 F6 | 	mov	local05, result1
056ac     40 01 90 FD | 	jmp	#LR__0461
056b0                 | LR__0432
056b0     54 2C B0 FD | 	call	#_expr
056b4                 | ' expr()
056b4                 | ' return 0
056b4     00 26 06 F6 | 	mov	local05, #0
056b8     34 01 90 FD | 	jmp	#LR__0461
056bc                 | LR__0433
056bc     CC 15 B0 FD | 	call	#_compile_if
056c0     E8 01 90 FD | 	jmp	#LR__0462
056c4                 | LR__0434
056c4     08 1F B0 FD | 	call	#_compile_for
056c8     E0 01 90 FD | 	jmp	#LR__0462
056cc                 | LR__0435
056cc     28 27 B0 FD | 	call	#_compile_next
056d0     D8 01 90 FD | 	jmp	#LR__0462
056d4                 | LR__0436
056d4     30 2C B0 FD | 	call	#_expr
056d8                 | ' expr()
056d8                 | ' return 0
056d8     00 26 06 F6 | 	mov	local05, #0
056dc     10 01 90 FD | 	jmp	#LR__0461
056e0                 | LR__0437
056e0     E8 16 B0 FD | 	call	#_compile_else
056e4     C4 01 90 FD | 	jmp	#LR__0462
056e8                 | LR__0438
056e8     3C 0A B0 FD | 	call	#_compile_fun_2p
056ec     FD 26 02 F6 | 	mov	local05, result1
056f0     FC 00 90 FD | 	jmp	#LR__0461
056f4                 | LR__0439
056f4     10 2C B0 FD | 	call	#_expr
056f8                 | ' expr()
056f8                 | ' return 0
056f8     00 26 06 F6 | 	mov	local05, #0
056fc     F0 00 90 FD | 	jmp	#LR__0461
05700                 | LR__0440
05700     04 2C B0 FD | 	call	#_expr
05704                 | ' expr()
05704                 | ' return 0
05704     00 26 06 F6 | 	mov	local05, #0
05708     E4 00 90 FD | 	jmp	#LR__0461
0570c                 | LR__0441
0570c     F8 2B B0 FD | 	call	#_expr
05710                 | ' expr()
05710                 | ' return 0
05710     00 26 06 F6 | 	mov	local05, #0
05714     D8 00 90 FD | 	jmp	#LR__0461
05718                 | LR__0442
05718     EC 2B B0 FD | 	call	#_expr
0571c                 | ' expr()
0571c                 | ' return 0
0571c     00 26 06 F6 | 	mov	local05, #0
05720     CC 00 90 FD | 	jmp	#LR__0461
05724                 | LR__0443
05724     E0 2B B0 FD | 	call	#_expr
05728                 | ' expr()
05728                 | ' return 0
05728     00 26 06 F6 | 	mov	local05, #0
0572c     C0 00 90 FD | 	jmp	#LR__0461
05730                 | LR__0444
05730     D4 2B B0 FD | 	call	#_expr
05734                 | ' expr()
05734                 | ' return 0
05734     00 26 06 F6 | 	mov	local05, #0
05738     B4 00 90 FD | 	jmp	#LR__0461
0573c                 | LR__0445
0573c     C8 2B B0 FD | 	call	#_expr
05740                 | ' expr()
05740                 | ' return 0
05740     00 26 06 F6 | 	mov	local05, #0
05744     A8 00 90 FD | 	jmp	#LR__0461
05748                 | LR__0446
05748     50 0A B0 FD | 	call	#_compile_fun_3p
0574c     FD 26 02 F6 | 	mov	local05, result1
05750     9C 00 90 FD | 	jmp	#LR__0461
05754                 | LR__0447
05754     34 0C B0 FD | 	call	#_compile_fun_5p
05758     FD 26 02 F6 | 	mov	local05, result1
0575c     90 00 90 FD | 	jmp	#LR__0461
05760                 | LR__0448
05760     04 0B B0 FD | 	call	#_compile_fun_4p
05764     FD 26 02 F6 | 	mov	local05, result1
05768     84 00 90 FD | 	jmp	#LR__0461
0576c                 | LR__0449
0576c     B8 09 B0 FD | 	call	#_compile_fun_2p
05770     FD 26 02 F6 | 	mov	local05, result1
05774     78 00 90 FD | 	jmp	#LR__0461
05778                 | LR__0450
05778     AC 09 B0 FD | 	call	#_compile_fun_2p
0577c     FD 26 02 F6 | 	mov	local05, result1
05780     6C 00 90 FD | 	jmp	#LR__0461
05784                 | LR__0451
05784     A0 09 B0 FD | 	call	#_compile_fun_2p
05788     FD 26 02 F6 | 	mov	local05, result1
0578c     60 00 90 FD | 	jmp	#LR__0461
05790                 | LR__0452
05790     74 2B B0 FD | 	call	#_expr
05794                 | ' expr()
05794                 | ' return 0
05794     00 26 06 F6 | 	mov	local05, #0
05798     54 00 90 FD | 	jmp	#LR__0461
0579c                 | LR__0453
0579c     68 2B B0 FD | 	call	#_expr
057a0                 | ' expr()
057a0                 | ' return 0
057a0     00 26 06 F6 | 	mov	local05, #0
057a4     48 00 90 FD | 	jmp	#LR__0461
057a8                 | LR__0454
057a8     5C 2B B0 FD | 	call	#_expr
057ac                 | ' expr()
057ac                 | ' return 0
057ac     00 26 06 F6 | 	mov	local05, #0
057b0     3C 00 90 FD | 	jmp	#LR__0461
057b4                 | LR__0455
057b4     B0 0A B0 FD | 	call	#_compile_fun_4p
057b8     FD 26 02 F6 | 	mov	local05, result1
057bc     30 00 90 FD | 	jmp	#LR__0461
057c0                 | LR__0456
057c0     44 2B B0 FD | 	call	#_expr
057c4                 | ' expr()
057c4                 | ' return 0
057c4     00 26 06 F6 | 	mov	local05, #0
057c8     24 00 90 FD | 	jmp	#LR__0461
057cc                 | LR__0457
057cc     24 17 B0 FD | 	call	#_compile_dim
057d0     D8 00 90 FD | 	jmp	#LR__0462
057d4                 | LR__0458
057d4     50 09 B0 FD | 	call	#_compile_fun_2p
057d8     FD 26 02 F6 | 	mov	local05, result1
057dc     10 00 90 FD | 	jmp	#LR__0461
057e0                 | LR__0459
057e0     20 01 B0 FD | 	call	#_compile_array_assign
057e4     C4 00 90 FD | 	jmp	#LR__0462
057e8                 | LR__0460
057e8     80 08 B0 FD | 	call	#_compile_unknown
057ec     BC 00 90 FD | 	jmp	#LR__0462
057f0                 | LR__0461
057f0     14 23 02 F6 | 	mov	local03, local06
057f4     16 1F 02 F6 | 	mov	local01, local08
057f8     0F 2B 02 F6 | 	mov	local07, local01
057fc     10 2F 02 F6 | 	mov	local09, local02
05800     11 1F 02 F6 | 	mov	local01, local03
05804     69 00 00 FF 
05808     50 E4 05 F1 | 	add	objptr, ##53840
0580c     F2 2C 02 FB | 	rdlong	local08, objptr
05810     16 29 02 F6 | 	mov	local06, local08
05814     01 28 66 F0 | 	shl	local06, #1
05818     16 29 02 F1 | 	add	local06, local08
0581c     02 28 66 F0 | 	shl	local06, #2
05820     03 00 00 FF 
05824     00 E4 85 F1 | 	sub	objptr, ##1536
05828     F2 28 02 F1 | 	add	local06, objptr
0582c     14 2B 62 FC | 	wrlong	local07, local06
05830     03 00 00 FF 
05834     00 E4 05 F1 | 	add	objptr, ##1536
05838     F2 2C 02 FB | 	rdlong	local08, objptr
0583c     16 2B 02 F6 | 	mov	local07, local08
05840     01 2A 66 F0 | 	shl	local07, #1
05844     16 2B 02 F1 | 	add	local07, local08
05848     02 2A 66 F0 | 	shl	local07, #2
0584c     03 00 00 FF 
05850     00 E4 85 F1 | 	sub	objptr, ##1536
05854     F2 2A 02 F1 | 	add	local07, objptr
05858     04 2A 06 F1 | 	add	local07, #4
0585c     15 2F 62 FC | 	wrlong	local09, local07
05860     03 00 00 FF 
05864     00 E4 05 F1 | 	add	objptr, ##1536
05868     F2 2E 02 FB | 	rdlong	local09, objptr
0586c     17 2D 02 F6 | 	mov	local08, local09
05870     01 2C 66 F0 | 	shl	local08, #1
05874     17 2D 02 F1 | 	add	local08, local09
05878     02 2C 66 F0 | 	shl	local08, #2
0587c     03 00 00 FF 
05880     00 E4 85 F1 | 	sub	objptr, ##1536
05884     F2 2C 02 F1 | 	add	local08, objptr
05888     08 2C 06 F1 | 	add	local08, #8
0588c     16 1F 62 FC | 	wrlong	local01, local08
05890     03 00 00 FF 
05894     00 E4 05 F1 | 	add	objptr, ##1536
05898     F2 2A 02 FB | 	rdlong	local07, objptr
0589c     01 2A 06 F1 | 	add	local07, #1
058a0     F2 2A 62 FC | 	wrlong	local07, objptr
058a4     69 00 00 FF 
058a8     50 E4 85 F1 | 	sub	objptr, ##53840
058ac                 | LR__0462
058ac                 | ' 
058ac                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
058ac                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
058ac     00 24 0E F2 | 	cmp	local04, #0 wz
058b0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
058b4     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
058b8     38 00 90 5D |  if_ne	jmp	#LR__0463
058bc     69 00 00 FF 
058c0     50 E4 05 F1 | 	add	objptr, ##53840
058c4     F2 2E 02 FB | 	rdlong	local09, objptr
058c8     17 1F 02 F6 | 	mov	local01, local09
058cc     01 1E 66 F0 | 	shl	local01, #1
058d0     17 1F 02 F1 | 	add	local01, local09
058d4     02 1E 66 F0 | 	shl	local01, #2
058d8     03 00 00 FF 
058dc     00 E4 85 F1 | 	sub	objptr, ##1536
058e0     F2 1E 02 F1 | 	add	local01, objptr
058e4     08 1E 06 F1 | 	add	local01, #8
058e8     0F FD 6B FC | 	wrlong	#510, local01
058ec     66 00 00 FF 
058f0     50 E4 85 F1 | 	sub	objptr, ##52304
058f4                 | LR__0463
058f4                 | ' 
058f4                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
058f4                 | ' return err
058f4     13 FB 01 F6 | 	mov	result1, local05
058f8     A7 F0 03 F6 | 	mov	ptra, fp
058fc     B2 00 A0 FD | 	call	#popregs_
05900                 | _compile_immediate_ret
05900     2D 00 64 FD | 	ret
05904                 | 
05904                 | ' 
05904                 | ' sub compile_array_assign
05904                 | _compile_array_assign
05904     0A 4A 05 F6 | 	mov	COUNT_, #10
05908     A8 00 A0 FD | 	call	#pushregs_
0590c     00 24 06 F6 | 	mov	local04, #0
05910     56 00 00 FF 
05914     18 E4 05 F1 | 	add	objptr, ##44056
05918     F2 26 02 FB | 	rdlong	local05, objptr
0591c     13 FB 01 F6 | 	mov	result1, local05
05920     01 FA 85 F1 | 	sub	result1, #1
05924     03 FA 65 F0 | 	shl	result1, #3
05928     02 00 00 FF 
0592c     38 E4 85 F1 | 	sub	objptr, ##1080
05930     F2 FA 01 F1 | 	add	result1, objptr
05934     FD 28 02 FB | 	rdlong	local06, result1
05938                 | ' numpar=0
05938                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
05938                 | ' ' todo here: recognize params and t1.result.twowords=numpar
05938                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
05938                 | ' if lparts(ct).token=token_lpar then
05938     03 26 66 F0 | 	shl	local05, #3
0593c     F2 26 02 F1 | 	add	local05, objptr
05940     04 26 06 F1 | 	add	local05, #4
05944     13 27 02 FB | 	rdlong	local05, local05
05948     15 26 0E F2 | 	cmp	local05, #21 wz
0594c     53 00 00 FF 
05950     E0 E5 85 F1 | 	sub	objptr, ##42976
05954     D4 01 90 5D |  if_ne	jmp	#LR__0474
05958     56 00 00 FF 
0595c     18 E4 05 F1 | 	add	objptr, ##44056
05960     F2 2A 02 FB | 	rdlong	local07, objptr
05964     01 2A 06 F1 | 	add	local07, #1
05968     F2 2A 62 FC | 	wrlong	local07, objptr
0596c     56 00 00 FF 
05970     18 E4 85 F1 | 	sub	objptr, ##44056
05974                 | '   ct+=1 											' omit this lpar, this is for expr list
05974                 | '   do
05974                 | LR__0470
05974     90 29 B0 FD | 	call	#_expr
05978     56 00 00 FF 
0597c     18 E4 05 F1 | 	add	objptr, ##44056
05980     F2 26 02 FB | 	rdlong	local05, objptr
05984     01 26 06 F1 | 	add	local05, #1
05988     F2 26 62 FC | 	wrlong	local05, objptr
0598c     01 24 06 F1 | 	add	local04, #1
05990     01 26 86 F1 | 	sub	local05, #1
05994     03 26 66 F0 | 	shl	local05, #3
05998     02 00 00 FF 
0599c     38 E4 85 F1 | 	sub	objptr, ##1080
059a0     F2 26 02 F1 | 	add	local05, objptr
059a4     04 26 06 F1 | 	add	local05, #4
059a8     13 2B 02 FB | 	rdlong	local07, local05
059ac     14 2A 0E F2 | 	cmp	local07, #20 wz
059b0     53 00 00 FF 
059b4     E0 E5 85 F1 | 	sub	objptr, ##42976
059b8     34 00 90 AD |  if_e	jmp	#LR__0471
059bc     56 00 00 FF 
059c0     18 E4 05 F1 | 	add	objptr, ##44056
059c4     F2 2A 02 FB | 	rdlong	local07, objptr
059c8     03 2A 66 F0 | 	shl	local07, #3
059cc     02 00 00 FF 
059d0     38 E4 85 F1 | 	sub	objptr, ##1080
059d4     F2 2A 02 F1 | 	add	local07, objptr
059d8     04 2A 06 F1 | 	add	local07, #4
059dc     15 2B 02 FB | 	rdlong	local07, local07
059e0     FE 2B 0E F2 | 	cmp	local07, #510 wz
059e4     53 00 00 FF 
059e8     E0 E5 85 F1 | 	sub	objptr, ##42976
059ec     84 FF 9F 5D |  if_ne	jmp	#LR__0470
059f0                 | LR__0471
059f0     56 00 00 FF 
059f4     18 E4 05 F1 | 	add	objptr, ##44056
059f8     F2 2A 02 FB | 	rdlong	local07, objptr
059fc     01 2A 06 F1 | 	add	local07, #1
05a00     F2 2A 62 FC | 	wrlong	local07, objptr
05a04     56 00 00 FF 
05a08     18 E4 85 F1 | 	sub	objptr, ##44056
05a0c     F8 28 B0 FD | 	call	#_expr
05a10     01 2C 66 F6 | 	neg	local08, #1
05a14     00 2E 06 F6 | 	mov	local09, #0
05a18                 | ' '   print "in array_assign, rpar found, numpar=",numpar
05a18                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
05a18                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
05a18                 | ' ct+=1 : expr()
05a18                 | ' ' now find the vae
05a18                 | ' 
05a18                 | ' j=-1 : i=0 : do : 
05a18                 | LR__0472
05a18                 | '   if variables(i).name=varname$ then j=i: exit loop
05a18     17 27 02 F6 | 	mov	local05, local09
05a1c     04 26 66 F0 | 	shl	local05, #4
05a20     33 00 00 FF 
05a24     DC E5 05 F1 | 	add	objptr, ##26588
05a28     F2 26 02 F1 | 	add	local05, objptr
05a2c     13 13 02 FB | 	rdlong	arg01, local05
05a30     14 15 02 F6 | 	mov	arg02, local06
05a34     33 00 00 FF 
05a38     DC E5 85 F1 | 	sub	objptr, ##26588
05a3c     98 31 B1 FD | 	call	#__system___string_cmp
05a40     00 FA 0D F2 | 	cmp	result1, #0 wz
05a44     17 2D 02 A6 |  if_e	mov	local08, local09
05a48     20 00 90 AD |  if_e	jmp	#LR__0473
05a4c     01 2E 06 F1 | 	add	local09, #1
05a50     53 00 00 FF 
05a54     DC E5 05 F1 | 	add	objptr, ##42972
05a58     F2 2A 02 FB | 	rdlong	local07, objptr
05a5c     53 00 00 FF 
05a60     DC E5 85 F1 | 	sub	objptr, ##42972
05a64     15 2F 5A F2 | 	cmps	local09, local07 wcz
05a68     AC FF 9F ED |  if_be	jmp	#LR__0472
05a6c                 | LR__0473
05a6c     16 1F 02 F6 | 	mov	local01, local08
05a70     12 21 02 F6 | 	mov	local02, local04
05a74     17 22 06 F6 | 	mov	local03, #23
05a78     0F 2B 02 F6 | 	mov	local07, local01
05a7c     10 31 02 F6 | 	mov	local10, local02
05a80     11 2D 02 F6 | 	mov	local08, local03
05a84     69 00 00 FF 
05a88     50 E4 05 F1 | 	add	objptr, ##53840
05a8c     F2 1E 02 FB | 	rdlong	local01, objptr
05a90     0F 2F 02 F6 | 	mov	local09, local01
05a94     01 2E 66 F0 | 	shl	local09, #1
05a98     0F 2F 02 F1 | 	add	local09, local01
05a9c     02 2E 66 F0 | 	shl	local09, #2
05aa0     03 00 00 FF 
05aa4     00 E4 85 F1 | 	sub	objptr, ##1536
05aa8     F2 2E 02 F1 | 	add	local09, objptr
05aac     17 2B 62 FC | 	wrlong	local07, local09
05ab0     03 00 00 FF 
05ab4     00 E4 05 F1 | 	add	objptr, ##1536
05ab8     F2 1E 02 FB | 	rdlong	local01, objptr
05abc     0F 2F 02 F6 | 	mov	local09, local01
05ac0     01 2E 66 F0 | 	shl	local09, #1
05ac4     0F 2F 02 F1 | 	add	local09, local01
05ac8     02 2E 66 F0 | 	shl	local09, #2
05acc     03 00 00 FF 
05ad0     00 E4 85 F1 | 	sub	objptr, ##1536
05ad4     F2 2E 02 F1 | 	add	local09, objptr
05ad8     04 2E 06 F1 | 	add	local09, #4
05adc     17 31 62 FC | 	wrlong	local10, local09
05ae0     03 00 00 FF 
05ae4     00 E4 05 F1 | 	add	objptr, ##1536
05ae8     F2 30 02 FB | 	rdlong	local10, objptr
05aec     18 1F 02 F6 | 	mov	local01, local10
05af0     01 1E 66 F0 | 	shl	local01, #1
05af4     18 1F 02 F1 | 	add	local01, local10
05af8     02 1E 66 F0 | 	shl	local01, #2
05afc     03 00 00 FF 
05b00     00 E4 85 F1 | 	sub	objptr, ##1536
05b04     F2 1E 02 F1 | 	add	local01, objptr
05b08     08 1E 06 F1 | 	add	local01, #8
05b0c     0F 2D 62 FC | 	wrlong	local08, local01
05b10     03 00 00 FF 
05b14     00 E4 05 F1 | 	add	objptr, ##1536
05b18     F2 2A 02 FB | 	rdlong	local07, objptr
05b1c     01 2A 06 F1 | 	add	local07, #1
05b20     F2 2A 62 FC | 	wrlong	local07, objptr
05b24     69 00 00 FF 
05b28     50 E4 85 F1 | 	sub	objptr, ##53840
05b2c                 | LR__0474
05b2c     A7 F0 03 F6 | 	mov	ptra, fp
05b30     B2 00 A0 FD | 	call	#popregs_
05b34                 | _compile_array_assign_ret
05b34     2D 00 64 FD | 	ret
05b38                 | 
05b38                 | ' 
05b38                 | ' 
05b38                 | ' sub compile_immediate_assign(linetype as ulong)
05b38                 | _compile_immediate_assign
05b38     09 4A 05 F6 | 	mov	COUNT_, #9
05b3c     A8 00 A0 FD | 	call	#pushregs_
05b40     09 25 0A F6 | 	mov	local04, arg01 wz
05b44     FF 22 06 F6 | 	mov	local03, #255
05b48     01 26 66 F6 | 	neg	local05, #1
05b4c                 | ' 
05b4c                 | ' t1.result_type=result_error : t1.result.uresult=0
05b4c                 | ' i=-1: j=-1
05b4c                 | ' 
05b4c                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
05b4c     2C 00 90 5D |  if_ne	jmp	#LR__0480
05b50     53 00 00 FF 
05b54     E0 E5 05 F1 | 	add	objptr, ##42976
05b58     F2 28 02 FB | 	rdlong	local06, objptr
05b5c     02 00 00 FF 
05b60     38 E4 05 F1 | 	add	objptr, ##1080
05b64     F2 04 68 FC | 	wrlong	#2, objptr
05b68     13 00 00 FF 
05b6c     38 E4 05 F1 | 	add	objptr, ##9784
05b70     F2 00 68 FC | 	wrlong	#0, objptr
05b74     69 00 00 FF 
05b78     50 E4 85 F1 | 	sub	objptr, ##53840
05b7c                 | LR__0480
05b7c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
05b7c     02 24 0E F2 | 	cmp	local04, #2 wz
05b80     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05b84     53 00 00 AF 
05b88     E0 E5 05 A1 |  if_e	add	objptr, ##42976
05b8c     F2 28 02 AB |  if_e	rdlong	local06, objptr
05b90     02 00 00 AF 
05b94     38 E4 05 A1 |  if_e	add	objptr, ##1080
05b98     F2 04 68 AC |  if_e	wrlong	#2, objptr
05b9c     56 00 00 AF 
05ba0     18 E4 85 A1 |  if_e	sub	objptr, ##44056
05ba4                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
05ba4     04 24 0E F2 | 	cmp	local04, #4 wz
05ba8     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05bac     2C 00 90 5D |  if_ne	jmp	#LR__0481
05bb0     53 00 00 FF 
05bb4     E8 E5 05 F1 | 	add	objptr, ##42984
05bb8     F2 28 02 FB | 	rdlong	local06, objptr
05bbc     02 00 00 FF 
05bc0     30 E4 05 F1 | 	add	objptr, ##1072
05bc4     F2 06 68 FC | 	wrlong	#3, objptr
05bc8     13 00 00 FF 
05bcc     38 E4 05 F1 | 	add	objptr, ##9784
05bd0     F2 04 68 FC | 	wrlong	#2, objptr
05bd4     69 00 00 FF 
05bd8     50 E4 85 F1 | 	sub	objptr, ##53840
05bdc                 | LR__0481
05bdc                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
05bdc     05 24 0E F2 | 	cmp	local04, #5 wz
05be0     3C 00 90 5D |  if_ne	jmp	#LR__0482
05be4     56 00 00 FF 
05be8     18 E4 05 F1 | 	add	objptr, ##44056
05bec     F2 FA 01 FB | 	rdlong	result1, objptr
05bf0     FD 28 02 F6 | 	mov	local06, result1
05bf4     03 28 66 F0 | 	shl	local06, #3
05bf8     02 00 00 FF 
05bfc     38 E4 85 F1 | 	sub	objptr, ##1080
05c00     F2 28 02 F1 | 	add	local06, objptr
05c04     14 29 02 FB | 	rdlong	local06, local06
05c08     02 FA 05 F1 | 	add	result1, #2
05c0c     02 00 00 FF 
05c10     38 E4 05 F1 | 	add	objptr, ##1080
05c14     F2 FA 61 FC | 	wrlong	result1, objptr
05c18     56 00 00 FF 
05c1c     18 E4 85 F1 | 	sub	objptr, ##44056
05c20                 | LR__0482
05c20     14 13 02 F6 | 	mov	arg01, local06
05c24     01 14 06 F6 | 	mov	arg02, #1
05c28     1C 50 B1 FD | 	call	#__system__Right_S
05c2c     D8 26 B0 FD | 	call	#_expr
05c30                 | '  
05c30                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
05c30                 | ' 
05c30                 | ' suffix2$=right$(varname2$,1)
05c30                 | ' expr()
05c30                 | ' 
05c30                 | ' 
05c30                 | ' if varnum>0 then
05c30     53 00 00 FF 
05c34     DC E5 05 F1 | 	add	objptr, ##42972
05c38     F2 2A 02 FB | 	rdlong	local07, objptr
05c3c     53 00 00 FF 
05c40     DC E5 85 F1 | 	sub	objptr, ##42972
05c44     01 2A 56 F2 | 	cmps	local07, #1 wc
05c48     58 00 90 CD |  if_b	jmp	#LR__0485
05c4c                 | '   for i=0 to varnum-1
05c4c     00 2C 06 F6 | 	mov	local08, #0
05c50     53 00 00 FF 
05c54     DC E5 05 F1 | 	add	objptr, ##42972
05c58     F2 2E 02 FB | 	rdlong	local09, objptr
05c5c     53 00 00 FF 
05c60     DC E5 85 F1 | 	sub	objptr, ##42972
05c64                 | LR__0483
05c64     17 2D 52 F2 | 	cmps	local08, local09 wc
05c68     38 00 90 3D |  if_ae	jmp	#LR__0484
05c6c                 | '     if variables(i).name=varname2$ then j=i : exit
05c6c     16 2B 02 F6 | 	mov	local07, local08
05c70     04 2A 66 F0 | 	shl	local07, #4
05c74     33 00 00 FF 
05c78     DC E5 05 F1 | 	add	objptr, ##26588
05c7c     F2 2A 02 F1 | 	add	local07, objptr
05c80     15 13 02 FB | 	rdlong	arg01, local07
05c84     14 15 02 F6 | 	mov	arg02, local06
05c88     33 00 00 FF 
05c8c     DC E5 85 F1 | 	sub	objptr, ##26588
05c90     44 2F B1 FD | 	call	#__system___string_cmp
05c94     00 FA 0D F2 | 	cmp	result1, #0 wz
05c98     16 27 02 A6 |  if_e	mov	local05, local08
05c9c     01 2C 06 51 |  if_ne	add	local08, #1
05ca0     C0 FF 9F 5D |  if_ne	jmp	#LR__0483
05ca4                 | LR__0484
05ca4                 | LR__0485
05ca4                 | ' if  j=-1 andalso varnum<maxvars then   
05ca4     FF FF 7F FF 
05ca8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
05cac     60 00 90 5D |  if_ne	jmp	#LR__0486
05cb0     53 00 00 FF 
05cb4     DC E5 05 F1 | 	add	objptr, ##42972
05cb8     F2 2A 02 FB | 	rdlong	local07, objptr
05cbc     53 00 00 FF 
05cc0     DC E5 85 F1 | 	sub	objptr, ##42972
05cc4     01 00 00 FF 
05cc8     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
05ccc     40 00 90 3D |  if_ae	jmp	#LR__0486
05cd0     53 00 00 FF 
05cd4     DC E5 05 F1 | 	add	objptr, ##42972
05cd8     F2 2E 02 FB | 	rdlong	local09, objptr
05cdc     04 2E 66 F0 | 	shl	local09, #4
05ce0     20 00 00 FF 
05ce4     00 E4 85 F1 | 	sub	objptr, ##16384
05ce8     F2 2E 02 F1 | 	add	local09, objptr
05cec     17 29 62 FC | 	wrlong	local06, local09
05cf0     20 00 00 FF 
05cf4     00 E4 05 F1 | 	add	objptr, ##16384
05cf8     F2 2A 02 FB | 	rdlong	local07, objptr
05cfc     15 27 02 F6 | 	mov	local05, local07
05d00     01 2A 06 F1 | 	add	local07, #1
05d04     F2 2A 62 FC | 	wrlong	local07, objptr
05d08     53 00 00 FF 
05d0c     DC E5 85 F1 | 	sub	objptr, ##42972
05d10                 | LR__0486
05d10     13 1F 02 F6 | 	mov	local01, local05
05d14     17 22 06 F6 | 	mov	local03, #23
05d18     0F 2B 02 F6 | 	mov	local07, local01
05d1c     10 2F 02 F6 | 	mov	local09, local02
05d20     11 1F 02 F6 | 	mov	local01, local03
05d24     69 00 00 FF 
05d28     50 E4 05 F1 | 	add	objptr, ##53840
05d2c     F2 2C 02 FB | 	rdlong	local08, objptr
05d30     16 29 02 F6 | 	mov	local06, local08
05d34     01 28 66 F0 | 	shl	local06, #1
05d38     16 29 02 F1 | 	add	local06, local08
05d3c     02 28 66 F0 | 	shl	local06, #2
05d40     03 00 00 FF 
05d44     00 E4 85 F1 | 	sub	objptr, ##1536
05d48     F2 28 02 F1 | 	add	local06, objptr
05d4c     14 2B 62 FC | 	wrlong	local07, local06
05d50     03 00 00 FF 
05d54     00 E4 05 F1 | 	add	objptr, ##1536
05d58     F2 2C 02 FB | 	rdlong	local08, objptr
05d5c     16 2B 02 F6 | 	mov	local07, local08
05d60     01 2A 66 F0 | 	shl	local07, #1
05d64     16 2B 02 F1 | 	add	local07, local08
05d68     02 2A 66 F0 | 	shl	local07, #2
05d6c     03 00 00 FF 
05d70     00 E4 85 F1 | 	sub	objptr, ##1536
05d74     F2 2A 02 F1 | 	add	local07, objptr
05d78     04 2A 06 F1 | 	add	local07, #4
05d7c     15 2F 62 FC | 	wrlong	local09, local07
05d80     03 00 00 FF 
05d84     00 E4 05 F1 | 	add	objptr, ##1536
05d88     F2 2E 02 FB | 	rdlong	local09, objptr
05d8c     17 2D 02 F6 | 	mov	local08, local09
05d90     01 2C 66 F0 | 	shl	local08, #1
05d94     17 2D 02 F1 | 	add	local08, local09
05d98     02 2C 66 F0 | 	shl	local08, #2
05d9c     03 00 00 FF 
05da0     00 E4 85 F1 | 	sub	objptr, ##1536
05da4     F2 2C 02 F1 | 	add	local08, objptr
05da8     08 2C 06 F1 | 	add	local08, #8
05dac     16 1F 62 FC | 	wrlong	local01, local08
05db0     03 00 00 FF 
05db4     00 E4 05 F1 | 	add	objptr, ##1536
05db8     F2 2A 02 FB | 	rdlong	local07, objptr
05dbc     01 2A 06 F1 | 	add	local07, #1
05dc0     F2 2A 62 FC | 	wrlong	local07, objptr
05dc4     69 00 00 FF 
05dc8     50 E4 85 F1 | 	sub	objptr, ##53840
05dcc                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
05dcc                 | ' 
05dcc                 | ' 
05dcc                 | ' 
05dcc                 | ' 
05dcc                 | ' 
05dcc                 | ' 
05dcc                 | ' compiledline(lineptr)=t1:  lineptr+=1 
05dcc                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
05dcc     00 24 0E F2 | 	cmp	local04, #0 wz
05dd0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05dd4     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
05dd8     38 00 90 5D |  if_ne	jmp	#LR__0487
05ddc     69 00 00 FF 
05de0     50 E4 05 F1 | 	add	objptr, ##53840
05de4     F2 1E 02 FB | 	rdlong	local01, objptr
05de8     0F 2F 02 F6 | 	mov	local09, local01
05dec     01 2E 66 F0 | 	shl	local09, #1
05df0     0F 2F 02 F1 | 	add	local09, local01
05df4     02 2E 66 F0 | 	shl	local09, #2
05df8     03 00 00 FF 
05dfc     00 E4 85 F1 | 	sub	objptr, ##1536
05e00     F2 2E 02 F1 | 	add	local09, objptr
05e04     08 2E 06 F1 | 	add	local09, #8
05e08     17 FD 6B FC | 	wrlong	#510, local09
05e0c     66 00 00 FF 
05e10     50 E4 85 F1 | 	sub	objptr, ##52304
05e14                 | LR__0487
05e14     A7 F0 03 F6 | 	mov	ptra, fp
05e18     B2 00 A0 FD | 	call	#popregs_
05e1c                 | _compile_immediate_assign_ret
05e1c     2D 00 64 FD | 	ret
05e20                 | 
05e20                 | ' 
05e20                 | ' ' ------------------ compile the line that is calling a command 
05e20                 | ' 
05e20                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
05e20                 | _compile
05e20     04 4A 05 F6 | 	mov	COUNT_, #4
05e24     A8 00 A0 FD | 	call	#pushregs_
05e28     09 1F 0A F6 | 	mov	local01, arg01 wz
05e2c     0A 21 02 F6 | 	mov	local02, arg02
05e30     0B 23 02 F6 | 	mov	local03, arg03
05e34                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
05e34                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
05e34                 | '  
05e34                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
05e34                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
05e34     0C 00 90 5D |  if_ne	jmp	#LR__0490
05e38     00 12 06 F6 | 	mov	arg01, #0
05e3c     EC F4 BF FD | 	call	#_compile_immediate
05e40     A0 00 90 FD | 	jmp	#LR__0497
05e44                 | LR__0490
05e44     66 00 00 FF 
05e48     50 E4 05 F1 | 	add	objptr, ##52304
05e4c     F2 1E 62 FC | 	wrlong	local01, objptr
05e50     04 E4 05 F1 | 	add	objptr, #4
05e54     F2 20 62 FC | 	wrlong	local02, objptr
05e58     66 00 00 FF 
05e5c     54 E4 85 F1 | 	sub	objptr, ##52308
05e60     11 13 02 F6 | 	mov	arg01, local03
05e64     01 12 06 F1 | 	add	arg01, #1
05e68     C0 F4 BF FD | 	call	#_compile_immediate
05e6c     FD 24 0A F6 | 	mov	local04, result1 wz
05e70                 | ' 
05e70                 | ' ucompiledline(0)=alinemajor
05e70                 | ' ucompiledline(1)=alineminor
05e70                 | ' 
05e70                 | ' 
05e70                 | ' ' cont: 0: this is the first part of the line that will continue
05e70                 | ' ' 1 - this is the continuation of the line
05e70                 | ' ' 2 - this is the last continued line
05e70                 | ' ' 3 - this is the ome and only part
05e70                 | ' 
05e70                 | ' 
05e70                 | ' err=compile_immediate(cont+1) 
05e70                 | ' if err=0 then
05e70     6C 00 90 5D |  if_ne	jmp	#LR__0496
05e74                 | '   if cont=3 orelse cont=2 then 
05e74     03 22 0E F2 | 	cmp	local03, #3 wz
05e78     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05e7c     60 00 90 5D |  if_ne	jmp	#LR__0495
05e80                 | '     if alinemajor >lastline then 
05e80     69 00 00 FF 
05e84     5C E4 05 F1 | 	add	objptr, ##53852
05e88     F2 16 02 FB | 	rdlong	arg03, objptr
05e8c     69 00 00 FF 
05e90     5C E4 85 F1 | 	sub	objptr, ##53852
05e94     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05e98     0C 00 90 ED |  if_be	jmp	#LR__0491
05e9c     0F 13 02 F6 | 	mov	arg01, local01
05ea0     A8 F3 BF FD | 	call	#_add_line_at_end
05ea4     38 00 90 FD | 	jmp	#LR__0494
05ea8                 | LR__0491
05ea8     0F 13 02 F6 | 	mov	arg01, local01
05eac     28 EC BF FD | 	call	#_deleteline
05eb0                 | '       deleteline(alinemajor)  
05eb0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
05eb0     69 00 00 FF 
05eb4     5C E4 05 F1 | 	add	objptr, ##53852
05eb8     F2 16 02 FB | 	rdlong	arg03, objptr
05ebc     69 00 00 FF 
05ec0     5C E4 85 F1 | 	sub	objptr, ##53852
05ec4     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05ec8     0C 00 90 ED |  if_be	jmp	#LR__0492
05ecc     0F 13 02 F6 | 	mov	arg01, local01
05ed0     78 F3 BF FD | 	call	#_add_line_at_end
05ed4     08 00 90 FD | 	jmp	#LR__0493
05ed8                 | LR__0492
05ed8     0F 13 02 F6 | 	mov	arg01, local01
05edc     24 F1 BF FD | 	call	#_insertline
05ee0                 | LR__0493
05ee0                 | LR__0494
05ee0                 | LR__0495
05ee0                 | LR__0496
05ee0                 | ' return err
05ee0     12 FB 01 F6 | 	mov	result1, local04
05ee4                 | LR__0497
05ee4     A7 F0 03 F6 | 	mov	ptra, fp
05ee8     B2 00 A0 FD | 	call	#popregs_
05eec                 | _compile_ret
05eec     2D 00 64 FD | 	ret
05ef0                 | 
05ef0                 | ' 
05ef0                 | ' ' ------------------ compile the line that is assigning to a variable
05ef0                 | ' 
05ef0                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
05ef0                 | _compile_assign
05ef0     03 4A 05 F6 | 	mov	COUNT_, #3
05ef4     A8 00 A0 FD | 	call	#pushregs_
05ef8     09 1F 0A F6 | 	mov	local01, arg01 wz
05efc     0A 21 02 F6 | 	mov	local02, arg02
05f00     0B 23 02 F6 | 	mov	local03, arg03
05f04                 | ' 
05f04                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
05f04                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
05f04     0C 00 90 5D |  if_ne	jmp	#LR__0500
05f08     00 12 06 F6 | 	mov	arg01, #0
05f0c     28 FC BF FD | 	call	#_compile_immediate_assign
05f10     94 00 90 FD | 	jmp	#LR__0506
05f14                 | LR__0500
05f14     66 00 00 FF 
05f18     50 E4 05 F1 | 	add	objptr, ##52304
05f1c     F2 1E 62 FC | 	wrlong	local01, objptr
05f20     04 E4 05 F1 | 	add	objptr, #4
05f24     F2 20 62 FC | 	wrlong	local02, objptr
05f28     66 00 00 FF 
05f2c     54 E4 85 F1 | 	sub	objptr, ##52308
05f30     11 13 02 F6 | 	mov	arg01, local03
05f34     01 12 06 F1 | 	add	arg01, #1
05f38     FC FB BF FD | 	call	#_compile_immediate_assign
05f3c                 | ' 
05f3c                 | ' ucompiledline(0)=alinemajor
05f3c                 | ' ucompiledline(1)=alineminor
05f3c                 | ' 
05f3c                 | ' compile_immediate_assign(cont+1) 
05f3c                 | ' 
05f3c                 | ' if cont=3 orelse cont=2 then 
05f3c     03 22 0E F2 | 	cmp	local03, #3 wz
05f40     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05f44     60 00 90 5D |  if_ne	jmp	#LR__0505
05f48                 | '   if alinemajor >lastline then 
05f48     69 00 00 FF 
05f4c     5C E4 05 F1 | 	add	objptr, ##53852
05f50     F2 16 02 FB | 	rdlong	arg03, objptr
05f54     69 00 00 FF 
05f58     5C E4 85 F1 | 	sub	objptr, ##53852
05f5c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05f60     0C 00 90 ED |  if_be	jmp	#LR__0501
05f64     0F 13 02 F6 | 	mov	arg01, local01
05f68     E0 F2 BF FD | 	call	#_add_line_at_end
05f6c     38 00 90 FD | 	jmp	#LR__0504
05f70                 | LR__0501
05f70     0F 13 02 F6 | 	mov	arg01, local01
05f74     60 EB BF FD | 	call	#_deleteline
05f78                 | '     deleteline(alinemajor)  
05f78                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
05f78     69 00 00 FF 
05f7c     5C E4 05 F1 | 	add	objptr, ##53852
05f80     F2 16 02 FB | 	rdlong	arg03, objptr
05f84     69 00 00 FF 
05f88     5C E4 85 F1 | 	sub	objptr, ##53852
05f8c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05f90     0C 00 90 ED |  if_be	jmp	#LR__0502
05f94     0F 13 02 F6 | 	mov	arg01, local01
05f98     B0 F2 BF FD | 	call	#_add_line_at_end
05f9c     08 00 90 FD | 	jmp	#LR__0503
05fa0                 | LR__0502
05fa0     0F 13 02 F6 | 	mov	arg01, local01
05fa4     5C F0 BF FD | 	call	#_insertline
05fa8                 | LR__0503
05fa8                 | LR__0504
05fa8                 | LR__0505
05fa8                 | LR__0506
05fa8     A7 F0 03 F6 | 	mov	ptra, fp
05fac     B2 00 A0 FD | 	call	#popregs_
05fb0                 | _compile_assign_ret
05fb0     2D 00 64 FD | 	ret
05fb4                 | 
05fb4                 | ' 
05fb4                 | ' sub compile_error(errno)
05fb4                 | _compile_error
05fb4     FF 04 06 F6 | 	mov	_var03, #255
05fb8     01 07 02 F6 | 	mov	_var04, _var02
05fbc     02 09 02 F6 | 	mov	_var05, _var03
05fc0     69 00 00 FF 
05fc4     50 E4 05 F1 | 	add	objptr, ##53840
05fc8     F2 0A 02 FB | 	rdlong	_var06, objptr
05fcc     05 0D 02 F6 | 	mov	_var07, _var06
05fd0     01 0C 66 F0 | 	shl	_var07, #1
05fd4     05 0D 02 F1 | 	add	_var07, _var06
05fd8     02 0C 66 F0 | 	shl	_var07, #2
05fdc     03 00 00 FF 
05fe0     00 E4 85 F1 | 	sub	objptr, ##1536
05fe4     F2 0C 02 F1 | 	add	_var07, objptr
05fe8     06 13 62 FC | 	wrlong	arg01, _var07
05fec     03 00 00 FF 
05ff0     00 E4 05 F1 | 	add	objptr, ##1536
05ff4     F2 0C 02 FB | 	rdlong	_var07, objptr
05ff8     06 0B 02 F6 | 	mov	_var06, _var07
05ffc     01 0A 66 F0 | 	shl	_var06, #1
06000     06 0B 02 F1 | 	add	_var06, _var07
06004     02 0A 66 F0 | 	shl	_var06, #2
06008     03 00 00 FF 
0600c     00 E4 85 F1 | 	sub	objptr, ##1536
06010     F2 0A 02 F1 | 	add	_var06, objptr
06014     04 0A 06 F1 | 	add	_var06, #4
06018     05 07 62 FC | 	wrlong	_var04, _var06
0601c     03 00 00 FF 
06020     00 E4 05 F1 | 	add	objptr, ##1536
06024     F2 0C 02 FB | 	rdlong	_var07, objptr
06028     06 0B 02 F6 | 	mov	_var06, _var07
0602c     01 0A 66 F0 | 	shl	_var06, #1
06030     06 0B 02 F1 | 	add	_var06, _var07
06034     02 0A 66 F0 | 	shl	_var06, #2
06038     03 00 00 FF 
0603c     00 E4 85 F1 | 	sub	objptr, ##1536
06040     F2 0A 02 F1 | 	add	_var06, objptr
06044     08 0A 06 F1 | 	add	_var06, #8
06048     05 09 62 FC | 	wrlong	_var05, _var06
0604c     03 00 00 FF 
06050     00 E4 05 F1 | 	add	objptr, ##1536
06054     F2 12 02 FB | 	rdlong	arg01, objptr
06058     01 12 06 F1 | 	add	arg01, #1
0605c     F2 12 62 FC | 	wrlong	arg01, objptr
06060     69 00 00 FF 
06064     50 E4 85 F1 | 	sub	objptr, ##53840
06068                 | _compile_error_ret
06068     2D 00 64 FD | 	ret
0606c                 | 
0606c                 | ' 
0606c                 | ' sub compile_unknown() 
0606c                 | _compile_unknown
0606c     FF 04 06 F6 | 	mov	_var03, #255
06070     17 00 06 F6 | 	mov	_var01, #23
06074     01 07 02 F6 | 	mov	_var04, _var02
06078     02 01 02 F6 | 	mov	_var01, _var03
0607c     69 00 00 FF 
06080     50 E4 05 F1 | 	add	objptr, ##53840
06084     F2 08 02 FB | 	rdlong	_var05, objptr
06088     04 0B 02 F6 | 	mov	_var06, _var05
0608c     01 0A 66 F0 | 	shl	_var06, #1
06090     04 0B 02 F1 | 	add	_var06, _var05
06094     02 0A 66 F0 | 	shl	_var06, #2
06098     03 00 00 FF 
0609c     00 E4 85 F1 | 	sub	objptr, ##1536
060a0     F2 0A 02 F1 | 	add	_var06, objptr
060a4     05 2F 68 FC | 	wrlong	#23, _var06
060a8     03 00 00 FF 
060ac     00 E4 05 F1 | 	add	objptr, ##1536
060b0     F2 0A 02 FB | 	rdlong	_var06, objptr
060b4     05 09 02 F6 | 	mov	_var05, _var06
060b8     01 08 66 F0 | 	shl	_var05, #1
060bc     05 09 02 F1 | 	add	_var05, _var06
060c0     02 08 66 F0 | 	shl	_var05, #2
060c4     03 00 00 FF 
060c8     00 E4 85 F1 | 	sub	objptr, ##1536
060cc     F2 08 02 F1 | 	add	_var05, objptr
060d0     04 08 06 F1 | 	add	_var05, #4
060d4     04 07 62 FC | 	wrlong	_var04, _var05
060d8     03 00 00 FF 
060dc     00 E4 05 F1 | 	add	objptr, ##1536
060e0     F2 0A 02 FB | 	rdlong	_var06, objptr
060e4     05 09 02 F6 | 	mov	_var05, _var06
060e8     01 08 66 F0 | 	shl	_var05, #1
060ec     05 09 02 F1 | 	add	_var05, _var06
060f0     02 08 66 F0 | 	shl	_var05, #2
060f4     03 00 00 FF 
060f8     00 E4 85 F1 | 	sub	objptr, ##1536
060fc     F2 08 02 F1 | 	add	_var05, objptr
06100     08 08 06 F1 | 	add	_var05, #8
06104     04 01 62 FC | 	wrlong	_var01, _var05
06108     03 00 00 FF 
0610c     00 E4 05 F1 | 	add	objptr, ##1536
06110     F2 0A 02 FB | 	rdlong	_var06, objptr
06114     01 0A 06 F1 | 	add	_var06, #1
06118     F2 0A 62 FC | 	wrlong	_var06, objptr
0611c     69 00 00 FF 
06120     50 E4 85 F1 | 	sub	objptr, ##53840
06124                 | _compile_unknown_ret
06124     2D 00 64 FD | 	ret
06128                 | 
06128                 | ' 
06128                 | ' function compile_fun_2p() as ulong
06128                 | _compile_fun_2p
06128     01 4A 05 F6 | 	mov	COUNT_, #1
0612c     A8 00 A0 FD | 	call	#pushregs_
06130     D4 21 B0 FD | 	call	#_expr
06134                 | ' 
06134                 | ' expr()
06134                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06134     56 00 00 FF 
06138     18 E4 05 F1 | 	add	objptr, ##44056
0613c     F2 1E 02 FB | 	rdlong	local01, objptr
06140     03 1E 66 F0 | 	shl	local01, #3
06144     02 00 00 FF 
06148     38 E4 85 F1 | 	sub	objptr, ##1080
0614c     F2 1E 02 F1 | 	add	local01, objptr
06150     04 1E 06 F1 | 	add	local01, #4
06154     0F 1F 02 FB | 	rdlong	local01, local01
06158     11 1E 0E F2 | 	cmp	local01, #17 wz
0615c     53 00 00 FF 
06160     E0 E5 85 F1 | 	sub	objptr, ##42976
06164     15 FA 05 56 |  if_ne	mov	result1, #21
06168     24 00 90 5D |  if_ne	jmp	#LR__0510
0616c     56 00 00 FF 
06170     18 E4 05 F1 | 	add	objptr, ##44056
06174     F2 1E 02 FB | 	rdlong	local01, objptr
06178     01 1E 06 F1 | 	add	local01, #1
0617c     F2 1E 62 FC | 	wrlong	local01, objptr
06180     56 00 00 FF 
06184     18 E4 85 F1 | 	sub	objptr, ##44056
06188     7C 21 B0 FD | 	call	#_expr
0618c     00 FA 05 F6 | 	mov	result1, #0
06190                 | LR__0510
06190     A7 F0 03 F6 | 	mov	ptra, fp
06194     B2 00 A0 FD | 	call	#popregs_
06198                 | _compile_fun_2p_ret
06198     2D 00 64 FD | 	ret
0619c                 | 
0619c                 | ' 
0619c                 | ' function compile_fun_3p() as ulong
0619c                 | _compile_fun_3p
0619c     01 4A 05 F6 | 	mov	COUNT_, #1
061a0     A8 00 A0 FD | 	call	#pushregs_
061a4     60 21 B0 FD | 	call	#_expr
061a8                 | ' 
061a8                 | ' expr()
061a8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
061a8     56 00 00 FF 
061ac     18 E4 05 F1 | 	add	objptr, ##44056
061b0     F2 1E 02 FB | 	rdlong	local01, objptr
061b4     03 1E 66 F0 | 	shl	local01, #3
061b8     02 00 00 FF 
061bc     38 E4 85 F1 | 	sub	objptr, ##1080
061c0     F2 1E 02 F1 | 	add	local01, objptr
061c4     04 1E 06 F1 | 	add	local01, #4
061c8     0F 1F 02 FB | 	rdlong	local01, local01
061cc     11 1E 0E F2 | 	cmp	local01, #17 wz
061d0     53 00 00 FF 
061d4     E0 E5 85 F1 | 	sub	objptr, ##42976
061d8     15 FA 05 56 |  if_ne	mov	result1, #21
061dc     7C 00 90 5D |  if_ne	jmp	#LR__0520
061e0     56 00 00 FF 
061e4     18 E4 05 F1 | 	add	objptr, ##44056
061e8     F2 1E 02 FB | 	rdlong	local01, objptr
061ec     01 1E 06 F1 | 	add	local01, #1
061f0     F2 1E 62 FC | 	wrlong	local01, objptr
061f4     56 00 00 FF 
061f8     18 E4 85 F1 | 	sub	objptr, ##44056
061fc     08 21 B0 FD | 	call	#_expr
06200                 | ' expr()
06200                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06200     56 00 00 FF 
06204     18 E4 05 F1 | 	add	objptr, ##44056
06208     F2 1E 02 FB | 	rdlong	local01, objptr
0620c     03 1E 66 F0 | 	shl	local01, #3
06210     02 00 00 FF 
06214     38 E4 85 F1 | 	sub	objptr, ##1080
06218     F2 1E 02 F1 | 	add	local01, objptr
0621c     04 1E 06 F1 | 	add	local01, #4
06220     0F 1F 02 FB | 	rdlong	local01, local01
06224     11 1E 0E F2 | 	cmp	local01, #17 wz
06228     53 00 00 FF 
0622c     E0 E5 85 F1 | 	sub	objptr, ##42976
06230     15 FA 05 56 |  if_ne	mov	result1, #21
06234     24 00 90 5D |  if_ne	jmp	#LR__0520
06238     56 00 00 FF 
0623c     18 E4 05 F1 | 	add	objptr, ##44056
06240     F2 1E 02 FB | 	rdlong	local01, objptr
06244     01 1E 06 F1 | 	add	local01, #1
06248     F2 1E 62 FC | 	wrlong	local01, objptr
0624c     56 00 00 FF 
06250     18 E4 85 F1 | 	sub	objptr, ##44056
06254     B0 20 B0 FD | 	call	#_expr
06258     00 FA 05 F6 | 	mov	result1, #0
0625c                 | LR__0520
0625c     A7 F0 03 F6 | 	mov	ptra, fp
06260     B2 00 A0 FD | 	call	#popregs_
06264                 | _compile_fun_3p_ret
06264     2D 00 64 FD | 	ret
06268                 | 
06268                 | ' 
06268                 | ' function compile_fun_4p() as ulong
06268                 | _compile_fun_4p
06268     01 4A 05 F6 | 	mov	COUNT_, #1
0626c     A8 00 A0 FD | 	call	#pushregs_
06270     94 20 B0 FD | 	call	#_expr
06274                 | ' 
06274                 | ' expr()
06274                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06274     56 00 00 FF 
06278     18 E4 05 F1 | 	add	objptr, ##44056
0627c     F2 1E 02 FB | 	rdlong	local01, objptr
06280     03 1E 66 F0 | 	shl	local01, #3
06284     02 00 00 FF 
06288     38 E4 85 F1 | 	sub	objptr, ##1080
0628c     F2 1E 02 F1 | 	add	local01, objptr
06290     04 1E 06 F1 | 	add	local01, #4
06294     0F 1F 02 FB | 	rdlong	local01, local01
06298     11 1E 0E F2 | 	cmp	local01, #17 wz
0629c     53 00 00 FF 
062a0     E0 E5 85 F1 | 	sub	objptr, ##42976
062a4     15 FA 05 56 |  if_ne	mov	result1, #21
062a8     D4 00 90 5D |  if_ne	jmp	#LR__0530
062ac     56 00 00 FF 
062b0     18 E4 05 F1 | 	add	objptr, ##44056
062b4     F2 1E 02 FB | 	rdlong	local01, objptr
062b8     01 1E 06 F1 | 	add	local01, #1
062bc     F2 1E 62 FC | 	wrlong	local01, objptr
062c0     56 00 00 FF 
062c4     18 E4 85 F1 | 	sub	objptr, ##44056
062c8     3C 20 B0 FD | 	call	#_expr
062cc                 | ' expr()
062cc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
062cc     56 00 00 FF 
062d0     18 E4 05 F1 | 	add	objptr, ##44056
062d4     F2 1E 02 FB | 	rdlong	local01, objptr
062d8     03 1E 66 F0 | 	shl	local01, #3
062dc     02 00 00 FF 
062e0     38 E4 85 F1 | 	sub	objptr, ##1080
062e4     F2 1E 02 F1 | 	add	local01, objptr
062e8     04 1E 06 F1 | 	add	local01, #4
062ec     0F 1F 02 FB | 	rdlong	local01, local01
062f0     11 1E 0E F2 | 	cmp	local01, #17 wz
062f4     53 00 00 FF 
062f8     E0 E5 85 F1 | 	sub	objptr, ##42976
062fc     15 FA 05 56 |  if_ne	mov	result1, #21
06300     7C 00 90 5D |  if_ne	jmp	#LR__0530
06304     56 00 00 FF 
06308     18 E4 05 F1 | 	add	objptr, ##44056
0630c     F2 1E 02 FB | 	rdlong	local01, objptr
06310     01 1E 06 F1 | 	add	local01, #1
06314     F2 1E 62 FC | 	wrlong	local01, objptr
06318     56 00 00 FF 
0631c     18 E4 85 F1 | 	sub	objptr, ##44056
06320     E4 1F B0 FD | 	call	#_expr
06324                 | ' expr()
06324                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06324     56 00 00 FF 
06328     18 E4 05 F1 | 	add	objptr, ##44056
0632c     F2 1E 02 FB | 	rdlong	local01, objptr
06330     03 1E 66 F0 | 	shl	local01, #3
06334     02 00 00 FF 
06338     38 E4 85 F1 | 	sub	objptr, ##1080
0633c     F2 1E 02 F1 | 	add	local01, objptr
06340     04 1E 06 F1 | 	add	local01, #4
06344     0F 1F 02 FB | 	rdlong	local01, local01
06348     11 1E 0E F2 | 	cmp	local01, #17 wz
0634c     53 00 00 FF 
06350     E0 E5 85 F1 | 	sub	objptr, ##42976
06354     15 FA 05 56 |  if_ne	mov	result1, #21
06358     24 00 90 5D |  if_ne	jmp	#LR__0530
0635c     56 00 00 FF 
06360     18 E4 05 F1 | 	add	objptr, ##44056
06364     F2 1E 02 FB | 	rdlong	local01, objptr
06368     01 1E 06 F1 | 	add	local01, #1
0636c     F2 1E 62 FC | 	wrlong	local01, objptr
06370     56 00 00 FF 
06374     18 E4 85 F1 | 	sub	objptr, ##44056
06378     8C 1F B0 FD | 	call	#_expr
0637c     00 FA 05 F6 | 	mov	result1, #0
06380                 | LR__0530
06380     A7 F0 03 F6 | 	mov	ptra, fp
06384     B2 00 A0 FD | 	call	#popregs_
06388                 | _compile_fun_4p_ret
06388     2D 00 64 FD | 	ret
0638c                 | 
0638c                 | ' 
0638c                 | ' 
0638c                 | ' function compile_fun_5p() as ulong
0638c                 | _compile_fun_5p
0638c     01 4A 05 F6 | 	mov	COUNT_, #1
06390     A8 00 A0 FD | 	call	#pushregs_
06394     70 1F B0 FD | 	call	#_expr
06398                 | ' 
06398                 | ' expr()
06398                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06398     56 00 00 FF 
0639c     18 E4 05 F1 | 	add	objptr, ##44056
063a0     F2 1E 02 FB | 	rdlong	local01, objptr
063a4     03 1E 66 F0 | 	shl	local01, #3
063a8     02 00 00 FF 
063ac     38 E4 85 F1 | 	sub	objptr, ##1080
063b0     F2 1E 02 F1 | 	add	local01, objptr
063b4     04 1E 06 F1 | 	add	local01, #4
063b8     0F 1F 02 FB | 	rdlong	local01, local01
063bc     11 1E 0E F2 | 	cmp	local01, #17 wz
063c0     53 00 00 FF 
063c4     E0 E5 85 F1 | 	sub	objptr, ##42976
063c8     15 FA 05 56 |  if_ne	mov	result1, #21
063cc     2C 01 90 5D |  if_ne	jmp	#LR__0540
063d0     56 00 00 FF 
063d4     18 E4 05 F1 | 	add	objptr, ##44056
063d8     F2 1E 02 FB | 	rdlong	local01, objptr
063dc     01 1E 06 F1 | 	add	local01, #1
063e0     F2 1E 62 FC | 	wrlong	local01, objptr
063e4     56 00 00 FF 
063e8     18 E4 85 F1 | 	sub	objptr, ##44056
063ec     18 1F B0 FD | 	call	#_expr
063f0                 | ' expr()
063f0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
063f0     56 00 00 FF 
063f4     18 E4 05 F1 | 	add	objptr, ##44056
063f8     F2 1E 02 FB | 	rdlong	local01, objptr
063fc     03 1E 66 F0 | 	shl	local01, #3
06400     02 00 00 FF 
06404     38 E4 85 F1 | 	sub	objptr, ##1080
06408     F2 1E 02 F1 | 	add	local01, objptr
0640c     04 1E 06 F1 | 	add	local01, #4
06410     0F 1F 02 FB | 	rdlong	local01, local01
06414     11 1E 0E F2 | 	cmp	local01, #17 wz
06418     53 00 00 FF 
0641c     E0 E5 85 F1 | 	sub	objptr, ##42976
06420     15 FA 05 56 |  if_ne	mov	result1, #21
06424     D4 00 90 5D |  if_ne	jmp	#LR__0540
06428     56 00 00 FF 
0642c     18 E4 05 F1 | 	add	objptr, ##44056
06430     F2 1E 02 FB | 	rdlong	local01, objptr
06434     01 1E 06 F1 | 	add	local01, #1
06438     F2 1E 62 FC | 	wrlong	local01, objptr
0643c     56 00 00 FF 
06440     18 E4 85 F1 | 	sub	objptr, ##44056
06444     C0 1E B0 FD | 	call	#_expr
06448                 | ' expr()
06448                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06448     56 00 00 FF 
0644c     18 E4 05 F1 | 	add	objptr, ##44056
06450     F2 1E 02 FB | 	rdlong	local01, objptr
06454     03 1E 66 F0 | 	shl	local01, #3
06458     02 00 00 FF 
0645c     38 E4 85 F1 | 	sub	objptr, ##1080
06460     F2 1E 02 F1 | 	add	local01, objptr
06464     04 1E 06 F1 | 	add	local01, #4
06468     0F 1F 02 FB | 	rdlong	local01, local01
0646c     11 1E 0E F2 | 	cmp	local01, #17 wz
06470     53 00 00 FF 
06474     E0 E5 85 F1 | 	sub	objptr, ##42976
06478     15 FA 05 56 |  if_ne	mov	result1, #21
0647c     7C 00 90 5D |  if_ne	jmp	#LR__0540
06480     56 00 00 FF 
06484     18 E4 05 F1 | 	add	objptr, ##44056
06488     F2 1E 02 FB | 	rdlong	local01, objptr
0648c     01 1E 06 F1 | 	add	local01, #1
06490     F2 1E 62 FC | 	wrlong	local01, objptr
06494     56 00 00 FF 
06498     18 E4 85 F1 | 	sub	objptr, ##44056
0649c     68 1E B0 FD | 	call	#_expr
064a0                 | ' expr()
064a0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
064a0     56 00 00 FF 
064a4     18 E4 05 F1 | 	add	objptr, ##44056
064a8     F2 1E 02 FB | 	rdlong	local01, objptr
064ac     03 1E 66 F0 | 	shl	local01, #3
064b0     02 00 00 FF 
064b4     38 E4 85 F1 | 	sub	objptr, ##1080
064b8     F2 1E 02 F1 | 	add	local01, objptr
064bc     04 1E 06 F1 | 	add	local01, #4
064c0     0F 1F 02 FB | 	rdlong	local01, local01
064c4     11 1E 0E F2 | 	cmp	local01, #17 wz
064c8     53 00 00 FF 
064cc     E0 E5 85 F1 | 	sub	objptr, ##42976
064d0     15 FA 05 56 |  if_ne	mov	result1, #21
064d4     24 00 90 5D |  if_ne	jmp	#LR__0540
064d8     56 00 00 FF 
064dc     18 E4 05 F1 | 	add	objptr, ##44056
064e0     F2 1E 02 FB | 	rdlong	local01, objptr
064e4     01 1E 06 F1 | 	add	local01, #1
064e8     F2 1E 62 FC | 	wrlong	local01, objptr
064ec     56 00 00 FF 
064f0     18 E4 85 F1 | 	sub	objptr, ##44056
064f4     10 1E B0 FD | 	call	#_expr
064f8     00 FA 05 F6 | 	mov	result1, #0
064fc                 | LR__0540
064fc     A7 F0 03 F6 | 	mov	ptra, fp
06500     B2 00 A0 FD | 	call	#popregs_
06504                 | _compile_fun_5p_ret
06504     2D 00 64 FD | 	ret
06508                 | 
06508                 | ' 
06508                 | ' function compile_fun_varp() as ulong 
06508                 | _compile_fun_varp
06508     02 4A 05 F6 | 	mov	COUNT_, #2
0650c     A8 00 A0 FD | 	call	#pushregs_
06510     00 1E 06 F6 | 	mov	local01, #0
06514                 | ' i=0
06514                 | ' if lparts(ct).token<>token_end then
06514     56 00 00 FF 
06518     18 E4 05 F1 | 	add	objptr, ##44056
0651c     F2 20 02 FB | 	rdlong	local02, objptr
06520     03 20 66 F0 | 	shl	local02, #3
06524     02 00 00 FF 
06528     38 E4 85 F1 | 	sub	objptr, ##1080
0652c     F2 20 02 F1 | 	add	local02, objptr
06530     04 20 06 F1 | 	add	local02, #4
06534     10 21 02 FB | 	rdlong	local02, local02
06538     FE 21 0E F2 | 	cmp	local02, #510 wz
0653c     53 00 00 FF 
06540     E0 E5 85 F1 | 	sub	objptr, ##42976
06544     5C 00 90 AD |  if_e	jmp	#LR__0552
06548                 | '   do
06548                 | LR__0550
06548     BC 1D B0 FD | 	call	#_expr
0654c     01 1E 06 F1 | 	add	local01, #1
06550                 | '   expr()
06550                 | '    i+=1
06550                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
06550     56 00 00 FF 
06554     18 E4 05 F1 | 	add	objptr, ##44056
06558     F2 20 02 FB | 	rdlong	local02, objptr
0655c     03 20 66 F0 | 	shl	local02, #3
06560     02 00 00 FF 
06564     38 E4 85 F1 | 	sub	objptr, ##1080
06568     F2 20 02 F1 | 	add	local02, objptr
0656c     04 20 06 F1 | 	add	local02, #4
06570     10 21 02 FB | 	rdlong	local02, local02
06574     11 20 0E F2 | 	cmp	local02, #17 wz
06578     53 00 00 FF 
0657c     E0 E5 85 F1 | 	sub	objptr, ##42976
06580     20 00 90 5D |  if_ne	jmp	#LR__0551
06584     56 00 00 FF 
06588     18 E4 05 F1 | 	add	objptr, ##44056
0658c     F2 20 02 FB | 	rdlong	local02, objptr
06590     01 20 06 F1 | 	add	local02, #1
06594     F2 20 62 FC | 	wrlong	local02, objptr
06598     56 00 00 FF 
0659c     18 E4 85 F1 | 	sub	objptr, ##44056
065a0     A4 FF 9F FD | 	jmp	#LR__0550
065a4                 | LR__0551
065a4                 | LR__0552
065a4                 | ' return i
065a4     0F FB 01 F6 | 	mov	result1, local01
065a8     A7 F0 03 F6 | 	mov	ptra, fp
065ac     B2 00 A0 FD | 	call	#popregs_
065b0                 | _compile_fun_varp_ret
065b0     2D 00 64 FD | 	ret
065b4                 | 
065b4                 | ' 
065b4                 | ' 
065b4                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
065b4                 | _compile_print
065b4     0B 4A 05 F6 | 	mov	COUNT_, #11
065b8     A8 00 A0 FD | 	call	#pushregs_
065bc     00 1E 06 F6 | 	mov	local01, #0
065c0     1D 22 06 F6 | 	mov	local03, #29
065c4                 | ' t1.result.uresult=0 : t1.result_type=result_uint
065c4                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
065c4     56 00 00 FF 
065c8     18 E4 05 F1 | 	add	objptr, ##44056
065cc     F2 24 02 FB | 	rdlong	local04, objptr
065d0     03 24 66 F0 | 	shl	local04, #3
065d4     02 00 00 FF 
065d8     38 E4 85 F1 | 	sub	objptr, ##1080
065dc     F2 24 02 F1 | 	add	local04, objptr
065e0     04 24 06 F1 | 	add	local04, #4
065e4     12 25 02 FB | 	rdlong	local04, local04
065e8     FE 25 0E F2 | 	cmp	local04, #510 wz
065ec     53 00 00 FF 
065f0     E0 E5 85 F1 | 	sub	objptr, ##42976
065f4     68 01 90 5D |  if_ne	jmp	#LR__0560
065f8     20 22 06 F6 | 	mov	local03, #32
065fc     0F 27 02 F6 | 	mov	local05, local01
06600     10 29 02 F6 | 	mov	local06, local02
06604     11 2B 02 F6 | 	mov	local07, local03
06608     69 00 00 FF 
0660c     50 E4 05 F1 | 	add	objptr, ##53840
06610     F2 2C 02 FB | 	rdlong	local08, objptr
06614     16 2F 02 F6 | 	mov	local09, local08
06618     01 2E 66 F0 | 	shl	local09, #1
0661c     16 2F 02 F1 | 	add	local09, local08
06620     02 2E 66 F0 | 	shl	local09, #2
06624     03 00 00 FF 
06628     00 E4 85 F1 | 	sub	objptr, ##1536
0662c     F2 2E 02 F1 | 	add	local09, objptr
06630     17 27 62 FC | 	wrlong	local05, local09
06634     03 00 00 FF 
06638     00 E4 05 F1 | 	add	objptr, ##1536
0663c     F2 26 02 FB | 	rdlong	local05, objptr
06640     13 31 02 F6 | 	mov	local10, local05
06644     01 30 66 F0 | 	shl	local10, #1
06648     13 31 02 F1 | 	add	local10, local05
0664c     02 30 66 F0 | 	shl	local10, #2
06650     03 00 00 FF 
06654     00 E4 85 F1 | 	sub	objptr, ##1536
06658     F2 30 02 F1 | 	add	local10, objptr
0665c     04 30 06 F1 | 	add	local10, #4
06660     18 29 62 FC | 	wrlong	local06, local10
06664     03 00 00 FF 
06668     00 E4 05 F1 | 	add	objptr, ##1536
0666c     F2 26 02 FB | 	rdlong	local05, objptr
06670     13 33 02 F6 | 	mov	local11, local05
06674     01 32 66 F0 | 	shl	local11, #1
06678     13 33 02 F1 | 	add	local11, local05
0667c     02 32 66 F0 | 	shl	local11, #2
06680     03 00 00 FF 
06684     00 E4 85 F1 | 	sub	objptr, ##1536
06688     F2 32 02 F1 | 	add	local11, objptr
0668c     08 32 06 F1 | 	add	local11, #8
06690     19 2B 62 FC | 	wrlong	local07, local11
06694     03 00 00 FF 
06698     00 E4 05 F1 | 	add	objptr, ##1536
0669c     F2 26 02 FB | 	rdlong	local05, objptr
066a0     01 26 06 F1 | 	add	local05, #1
066a4     F2 26 62 FC | 	wrlong	local05, objptr
066a8     44 22 06 F6 | 	mov	local03, #68
066ac     0F 27 02 F6 | 	mov	local05, local01
066b0     10 29 02 F6 | 	mov	local06, local02
066b4     11 2B 02 F6 | 	mov	local07, local03
066b8     F2 2C 02 FB | 	rdlong	local08, objptr
066bc     16 2F 02 F6 | 	mov	local09, local08
066c0     01 2E 66 F0 | 	shl	local09, #1
066c4     16 2F 02 F1 | 	add	local09, local08
066c8     02 2E 66 F0 | 	shl	local09, #2
066cc     03 00 00 FF 
066d0     00 E4 85 F1 | 	sub	objptr, ##1536
066d4     F2 2E 02 F1 | 	add	local09, objptr
066d8     17 27 62 FC | 	wrlong	local05, local09
066dc     03 00 00 FF 
066e0     00 E4 05 F1 | 	add	objptr, ##1536
066e4     F2 32 02 FB | 	rdlong	local11, objptr
066e8     19 31 02 F6 | 	mov	local10, local11
066ec     01 30 66 F0 | 	shl	local10, #1
066f0     19 31 02 F1 | 	add	local10, local11
066f4     02 30 66 F0 | 	shl	local10, #2
066f8     03 00 00 FF 
066fc     00 E4 85 F1 | 	sub	objptr, ##1536
06700     F2 30 02 F1 | 	add	local10, objptr
06704     04 30 06 F1 | 	add	local10, #4
06708     18 29 62 FC | 	wrlong	local06, local10
0670c     03 00 00 FF 
06710     00 E4 05 F1 | 	add	objptr, ##1536
06714     F2 30 02 FB | 	rdlong	local10, objptr
06718     18 33 02 F6 | 	mov	local11, local10
0671c     01 32 66 F0 | 	shl	local11, #1
06720     18 33 02 F1 | 	add	local11, local10
06724     02 32 66 F0 | 	shl	local11, #2
06728     03 00 00 FF 
0672c     00 E4 85 F1 | 	sub	objptr, ##1536
06730     F2 32 02 F1 | 	add	local11, objptr
06734     08 32 06 F1 | 	add	local11, #8
06738     19 2B 62 FC | 	wrlong	local07, local11
0673c     03 00 00 FF 
06740     00 E4 05 F1 | 	add	objptr, ##1536
06744     F2 26 02 FB | 	rdlong	local05, objptr
06748     01 26 06 F1 | 	add	local05, #1
0674c     F2 26 62 FC | 	wrlong	local05, objptr
06750     69 00 00 FF 
06754     50 E4 85 F1 | 	sub	objptr, ##53840
06758     00 FA 05 F6 | 	mov	result1, #0
0675c     20 05 90 FD | 	jmp	#LR__0567
06760                 | LR__0560
06760                 | ' do
06760                 | LR__0561
06760     A4 1B B0 FD | 	call	#_expr
06764                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
06764                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06764     56 00 00 FF 
06768     18 E4 05 F1 | 	add	objptr, ##44056
0676c     F2 24 02 FB | 	rdlong	local04, objptr
06770     03 24 66 F0 | 	shl	local04, #3
06774     02 00 00 FF 
06778     38 E4 85 F1 | 	sub	objptr, ##1080
0677c     F2 24 02 F1 | 	add	local04, objptr
06780     04 24 06 F1 | 	add	local04, #4
06784     12 2D 02 FB | 	rdlong	local08, local04
06788     11 2C 0E F2 | 	cmp	local08, #17 wz
0678c     53 00 00 FF 
06790     E0 E5 85 F1 | 	sub	objptr, ##42976
06794     60 01 90 5D |  if_ne	jmp	#LR__0562
06798     21 22 06 F6 | 	mov	local03, #33
0679c     0F 27 02 F6 | 	mov	local05, local01
067a0     10 29 02 F6 | 	mov	local06, local02
067a4     11 2B 02 F6 | 	mov	local07, local03
067a8     69 00 00 FF 
067ac     50 E4 05 F1 | 	add	objptr, ##53840
067b0     F2 2C 02 FB | 	rdlong	local08, objptr
067b4     16 2F 02 F6 | 	mov	local09, local08
067b8     01 2E 66 F0 | 	shl	local09, #1
067bc     16 2F 02 F1 | 	add	local09, local08
067c0     02 2E 66 F0 | 	shl	local09, #2
067c4     03 00 00 FF 
067c8     00 E4 85 F1 | 	sub	objptr, ##1536
067cc     F2 2E 02 F1 | 	add	local09, objptr
067d0     17 27 62 FC | 	wrlong	local05, local09
067d4     03 00 00 FF 
067d8     00 E4 05 F1 | 	add	objptr, ##1536
067dc     F2 32 02 FB | 	rdlong	local11, objptr
067e0     19 31 02 F6 | 	mov	local10, local11
067e4     01 30 66 F0 | 	shl	local10, #1
067e8     19 31 02 F1 | 	add	local10, local11
067ec     02 30 66 F0 | 	shl	local10, #2
067f0     03 00 00 FF 
067f4     00 E4 85 F1 | 	sub	objptr, ##1536
067f8     F2 30 02 F1 | 	add	local10, objptr
067fc     04 30 06 F1 | 	add	local10, #4
06800     18 29 62 FC | 	wrlong	local06, local10
06804     03 00 00 FF 
06808     00 E4 05 F1 | 	add	objptr, ##1536
0680c     F2 26 02 FB | 	rdlong	local05, objptr
06810     13 33 02 F6 | 	mov	local11, local05
06814     01 32 66 F0 | 	shl	local11, #1
06818     13 33 02 F1 | 	add	local11, local05
0681c     02 32 66 F0 | 	shl	local11, #2
06820     03 00 00 FF 
06824     00 E4 85 F1 | 	sub	objptr, ##1536
06828     F2 32 02 F1 | 	add	local11, objptr
0682c     08 32 06 F1 | 	add	local11, #8
06830     19 2B 62 FC | 	wrlong	local07, local11
06834     03 00 00 FF 
06838     00 E4 05 F1 | 	add	objptr, ##1536
0683c     F2 26 02 FB | 	rdlong	local05, objptr
06840     01 26 06 F1 | 	add	local05, #1
06844     F2 26 62 FC | 	wrlong	local05, objptr
06848     44 22 06 F6 | 	mov	local03, #68
0684c     0F 27 02 F6 | 	mov	local05, local01
06850     10 29 02 F6 | 	mov	local06, local02
06854     11 2B 02 F6 | 	mov	local07, local03
06858     F2 2C 02 FB | 	rdlong	local08, objptr
0685c     16 2F 02 F6 | 	mov	local09, local08
06860     01 2E 66 F0 | 	shl	local09, #1
06864     16 2F 02 F1 | 	add	local09, local08
06868     02 2E 66 F0 | 	shl	local09, #2
0686c     03 00 00 FF 
06870     00 E4 85 F1 | 	sub	objptr, ##1536
06874     F2 2E 02 F1 | 	add	local09, objptr
06878     17 27 62 FC | 	wrlong	local05, local09
0687c     03 00 00 FF 
06880     00 E4 05 F1 | 	add	objptr, ##1536
06884     F2 32 02 FB | 	rdlong	local11, objptr
06888     19 31 02 F6 | 	mov	local10, local11
0688c     01 30 66 F0 | 	shl	local10, #1
06890     19 31 02 F1 | 	add	local10, local11
06894     02 30 66 F0 | 	shl	local10, #2
06898     03 00 00 FF 
0689c     00 E4 85 F1 | 	sub	objptr, ##1536
068a0     F2 30 02 F1 | 	add	local10, objptr
068a4     04 30 06 F1 | 	add	local10, #4
068a8     18 29 62 FC | 	wrlong	local06, local10
068ac     03 00 00 FF 
068b0     00 E4 05 F1 | 	add	objptr, ##1536
068b4     F2 30 02 FB | 	rdlong	local10, objptr
068b8     18 33 02 F6 | 	mov	local11, local10
068bc     01 32 66 F0 | 	shl	local11, #1
068c0     18 33 02 F1 | 	add	local11, local10
068c4     02 32 66 F0 | 	shl	local11, #2
068c8     03 00 00 FF 
068cc     00 E4 85 F1 | 	sub	objptr, ##1536
068d0     F2 32 02 F1 | 	add	local11, objptr
068d4     08 32 06 F1 | 	add	local11, #8
068d8     19 2B 62 FC | 	wrlong	local07, local11
068dc     03 00 00 FF 
068e0     00 E4 05 F1 | 	add	objptr, ##1536
068e4     F2 26 02 FB | 	rdlong	local05, objptr
068e8     01 26 06 F1 | 	add	local05, #1
068ec     F2 26 62 FC | 	wrlong	local05, objptr
068f0     69 00 00 FF 
068f4     50 E4 85 F1 | 	sub	objptr, ##53840
068f8                 | LR__0562
068f8                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
068f8     56 00 00 FF 
068fc     18 E4 05 F1 | 	add	objptr, ##44056
06900     F2 24 02 FB | 	rdlong	local04, objptr
06904     03 24 66 F0 | 	shl	local04, #3
06908     02 00 00 FF 
0690c     38 E4 85 F1 | 	sub	objptr, ##1080
06910     F2 24 02 F1 | 	add	local04, objptr
06914     04 24 06 F1 | 	add	local04, #4
06918     12 2D 02 FB | 	rdlong	local08, local04
0691c     12 2C 0E F2 | 	cmp	local08, #18 wz
06920     53 00 00 FF 
06924     E0 E5 85 F1 | 	sub	objptr, ##42976
06928     60 01 90 5D |  if_ne	jmp	#LR__0563
0692c     22 22 06 F6 | 	mov	local03, #34
06930     0F 27 02 F6 | 	mov	local05, local01
06934     10 29 02 F6 | 	mov	local06, local02
06938     11 2B 02 F6 | 	mov	local07, local03
0693c     69 00 00 FF 
06940     50 E4 05 F1 | 	add	objptr, ##53840
06944     F2 2C 02 FB | 	rdlong	local08, objptr
06948     16 2F 02 F6 | 	mov	local09, local08
0694c     01 2E 66 F0 | 	shl	local09, #1
06950     16 2F 02 F1 | 	add	local09, local08
06954     02 2E 66 F0 | 	shl	local09, #2
06958     03 00 00 FF 
0695c     00 E4 85 F1 | 	sub	objptr, ##1536
06960     F2 2E 02 F1 | 	add	local09, objptr
06964     17 27 62 FC | 	wrlong	local05, local09
06968     03 00 00 FF 
0696c     00 E4 05 F1 | 	add	objptr, ##1536
06970     F2 32 02 FB | 	rdlong	local11, objptr
06974     19 31 02 F6 | 	mov	local10, local11
06978     01 30 66 F0 | 	shl	local10, #1
0697c     19 31 02 F1 | 	add	local10, local11
06980     02 30 66 F0 | 	shl	local10, #2
06984     03 00 00 FF 
06988     00 E4 85 F1 | 	sub	objptr, ##1536
0698c     F2 30 02 F1 | 	add	local10, objptr
06990     04 30 06 F1 | 	add	local10, #4
06994     18 29 62 FC | 	wrlong	local06, local10
06998     03 00 00 FF 
0699c     00 E4 05 F1 | 	add	objptr, ##1536
069a0     F2 26 02 FB | 	rdlong	local05, objptr
069a4     13 33 02 F6 | 	mov	local11, local05
069a8     01 32 66 F0 | 	shl	local11, #1
069ac     13 33 02 F1 | 	add	local11, local05
069b0     02 32 66 F0 | 	shl	local11, #2
069b4     03 00 00 FF 
069b8     00 E4 85 F1 | 	sub	objptr, ##1536
069bc     F2 32 02 F1 | 	add	local11, objptr
069c0     08 32 06 F1 | 	add	local11, #8
069c4     19 2B 62 FC | 	wrlong	local07, local11
069c8     03 00 00 FF 
069cc     00 E4 05 F1 | 	add	objptr, ##1536
069d0     F2 26 02 FB | 	rdlong	local05, objptr
069d4     01 26 06 F1 | 	add	local05, #1
069d8     F2 26 62 FC | 	wrlong	local05, objptr
069dc     44 22 06 F6 | 	mov	local03, #68
069e0     0F 27 02 F6 | 	mov	local05, local01
069e4     10 29 02 F6 | 	mov	local06, local02
069e8     11 2B 02 F6 | 	mov	local07, local03
069ec     F2 2C 02 FB | 	rdlong	local08, objptr
069f0     16 2F 02 F6 | 	mov	local09, local08
069f4     01 2E 66 F0 | 	shl	local09, #1
069f8     16 2F 02 F1 | 	add	local09, local08
069fc     02 2E 66 F0 | 	shl	local09, #2
06a00     03 00 00 FF 
06a04     00 E4 85 F1 | 	sub	objptr, ##1536
06a08     F2 2E 02 F1 | 	add	local09, objptr
06a0c     17 27 62 FC | 	wrlong	local05, local09
06a10     03 00 00 FF 
06a14     00 E4 05 F1 | 	add	objptr, ##1536
06a18     F2 32 02 FB | 	rdlong	local11, objptr
06a1c     19 31 02 F6 | 	mov	local10, local11
06a20     01 30 66 F0 | 	shl	local10, #1
06a24     19 31 02 F1 | 	add	local10, local11
06a28     02 30 66 F0 | 	shl	local10, #2
06a2c     03 00 00 FF 
06a30     00 E4 85 F1 | 	sub	objptr, ##1536
06a34     F2 30 02 F1 | 	add	local10, objptr
06a38     04 30 06 F1 | 	add	local10, #4
06a3c     18 29 62 FC | 	wrlong	local06, local10
06a40     03 00 00 FF 
06a44     00 E4 05 F1 | 	add	objptr, ##1536
06a48     F2 30 02 FB | 	rdlong	local10, objptr
06a4c     18 33 02 F6 | 	mov	local11, local10
06a50     01 32 66 F0 | 	shl	local11, #1
06a54     18 33 02 F1 | 	add	local11, local10
06a58     02 32 66 F0 | 	shl	local11, #2
06a5c     03 00 00 FF 
06a60     00 E4 85 F1 | 	sub	objptr, ##1536
06a64     F2 32 02 F1 | 	add	local11, objptr
06a68     08 32 06 F1 | 	add	local11, #8
06a6c     19 2B 62 FC | 	wrlong	local07, local11
06a70     03 00 00 FF 
06a74     00 E4 05 F1 | 	add	objptr, ##1536
06a78     F2 26 02 FB | 	rdlong	local05, objptr
06a7c     01 26 06 F1 | 	add	local05, #1
06a80     F2 26 62 FC | 	wrlong	local05, objptr
06a84     69 00 00 FF 
06a88     50 E4 85 F1 | 	sub	objptr, ##53840
06a8c                 | LR__0563
06a8c                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06a8c     56 00 00 FF 
06a90     18 E4 05 F1 | 	add	objptr, ##44056
06a94     F2 24 02 FB | 	rdlong	local04, objptr
06a98     03 24 66 F0 | 	shl	local04, #3
06a9c     02 00 00 FF 
06aa0     38 E4 85 F1 | 	sub	objptr, ##1080
06aa4     F2 24 02 F1 | 	add	local04, objptr
06aa8     04 24 06 F1 | 	add	local04, #4
06aac     12 2D 02 FB | 	rdlong	local08, local04
06ab0     FE 2D 0E F2 | 	cmp	local08, #510 wz
06ab4     53 00 00 FF 
06ab8     E0 E5 85 F1 | 	sub	objptr, ##42976
06abc     B8 00 90 5D |  if_ne	jmp	#LR__0564
06ac0     44 22 06 F6 | 	mov	local03, #68
06ac4     0F 27 02 F6 | 	mov	local05, local01
06ac8     10 29 02 F6 | 	mov	local06, local02
06acc     11 2B 02 F6 | 	mov	local07, local03
06ad0     69 00 00 FF 
06ad4     50 E4 05 F1 | 	add	objptr, ##53840
06ad8     F2 2C 02 FB | 	rdlong	local08, objptr
06adc     16 2F 02 F6 | 	mov	local09, local08
06ae0     01 2E 66 F0 | 	shl	local09, #1
06ae4     16 2F 02 F1 | 	add	local09, local08
06ae8     02 2E 66 F0 | 	shl	local09, #2
06aec     03 00 00 FF 
06af0     00 E4 85 F1 | 	sub	objptr, ##1536
06af4     F2 2E 02 F1 | 	add	local09, objptr
06af8     17 27 62 FC | 	wrlong	local05, local09
06afc     03 00 00 FF 
06b00     00 E4 05 F1 | 	add	objptr, ##1536
06b04     F2 32 02 FB | 	rdlong	local11, objptr
06b08     19 31 02 F6 | 	mov	local10, local11
06b0c     01 30 66 F0 | 	shl	local10, #1
06b10     19 31 02 F1 | 	add	local10, local11
06b14     02 30 66 F0 | 	shl	local10, #2
06b18     03 00 00 FF 
06b1c     00 E4 85 F1 | 	sub	objptr, ##1536
06b20     F2 30 02 F1 | 	add	local10, objptr
06b24     04 30 06 F1 | 	add	local10, #4
06b28     18 29 62 FC | 	wrlong	local06, local10
06b2c     03 00 00 FF 
06b30     00 E4 05 F1 | 	add	objptr, ##1536
06b34     F2 30 02 FB | 	rdlong	local10, objptr
06b38     18 33 02 F6 | 	mov	local11, local10
06b3c     01 32 66 F0 | 	shl	local11, #1
06b40     18 33 02 F1 | 	add	local11, local10
06b44     02 32 66 F0 | 	shl	local11, #2
06b48     03 00 00 FF 
06b4c     00 E4 85 F1 | 	sub	objptr, ##1536
06b50     F2 32 02 F1 | 	add	local11, objptr
06b54     08 32 06 F1 | 	add	local11, #8
06b58     19 2B 62 FC | 	wrlong	local07, local11
06b5c     03 00 00 FF 
06b60     00 E4 05 F1 | 	add	objptr, ##1536
06b64     F2 26 02 FB | 	rdlong	local05, objptr
06b68     01 26 06 F1 | 	add	local05, #1
06b6c     F2 26 62 FC | 	wrlong	local05, objptr
06b70     69 00 00 FF 
06b74     50 E4 85 F1 | 	sub	objptr, ##53840
06b78                 | LR__0564
06b78                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
06b78     56 00 00 FF 
06b7c     18 E4 05 F1 | 	add	objptr, ##44056
06b80     F2 24 02 FB | 	rdlong	local04, objptr
06b84     03 24 66 F0 | 	shl	local04, #3
06b88     02 00 00 FF 
06b8c     38 E4 85 F1 | 	sub	objptr, ##1080
06b90     F2 24 02 F1 | 	add	local04, objptr
06b94     04 24 06 F1 | 	add	local04, #4
06b98     12 2D 02 FB | 	rdlong	local08, local04
06b9c     11 2C 0E F2 | 	cmp	local08, #17 wz
06ba0     53 00 00 FF 
06ba4     E0 E5 85 F1 | 	sub	objptr, ##42976
06ba8     6C 00 90 AD |  if_e	jmp	#LR__0565
06bac     56 00 00 FF 
06bb0     18 E4 05 F1 | 	add	objptr, ##44056
06bb4     F2 2C 02 FB | 	rdlong	local08, objptr
06bb8     03 2C 66 F0 | 	shl	local08, #3
06bbc     02 00 00 FF 
06bc0     38 E4 85 F1 | 	sub	objptr, ##1080
06bc4     F2 2C 02 F1 | 	add	local08, objptr
06bc8     04 2C 06 F1 | 	add	local08, #4
06bcc     16 2D 02 FB | 	rdlong	local08, local08
06bd0     12 2C 0E F2 | 	cmp	local08, #18 wz
06bd4     53 00 00 FF 
06bd8     E0 E5 85 F1 | 	sub	objptr, ##42976
06bdc     38 00 90 AD |  if_e	jmp	#LR__0565
06be0     56 00 00 FF 
06be4     18 E4 05 F1 | 	add	objptr, ##44056
06be8     F2 32 02 FB | 	rdlong	local11, objptr
06bec     03 32 66 F0 | 	shl	local11, #3
06bf0     02 00 00 FF 
06bf4     38 E4 85 F1 | 	sub	objptr, ##1080
06bf8     F2 32 02 F1 | 	add	local11, objptr
06bfc     04 32 06 F1 | 	add	local11, #4
06c00     19 33 02 FB | 	rdlong	local11, local11
06c04     FE 33 0E F2 | 	cmp	local11, #510 wz
06c08     53 00 00 FF 
06c0c     E0 E5 85 F1 | 	sub	objptr, ##42976
06c10     16 FA 05 56 |  if_ne	mov	result1, #22
06c14     68 00 90 5D |  if_ne	jmp	#LR__0567
06c18                 | LR__0565
06c18     56 00 00 FF 
06c1c     18 E4 05 F1 | 	add	objptr, ##44056
06c20     F2 24 02 FB | 	rdlong	local04, objptr
06c24     01 24 06 F1 | 	add	local04, #1
06c28     F2 24 62 FC | 	wrlong	local04, objptr
06c2c     03 24 66 F0 | 	shl	local04, #3
06c30     02 00 00 FF 
06c34     38 E4 85 F1 | 	sub	objptr, ##1080
06c38     F2 24 02 F1 | 	add	local04, objptr
06c3c     04 24 06 F1 | 	add	local04, #4
06c40     12 2D 02 FB | 	rdlong	local08, local04
06c44     FE 2D 0E F2 | 	cmp	local08, #510 wz
06c48     53 00 00 FF 
06c4c     E0 E5 85 F1 | 	sub	objptr, ##42976
06c50     28 00 90 AD |  if_e	jmp	#LR__0566
06c54     56 00 00 FF 
06c58     18 E4 05 F1 | 	add	objptr, ##44056
06c5c     F2 32 02 FB | 	rdlong	local11, objptr
06c60     0E 00 00 FF 
06c64     1C E4 05 F1 | 	add	objptr, ##7196
06c68     F2 30 02 FB | 	rdlong	local10, objptr
06c6c     64 00 00 FF 
06c70     34 E4 85 F1 | 	sub	objptr, ##51252
06c74     18 33 52 F2 | 	cmps	local11, local10 wc
06c78     E4 FA 9F CD |  if_b	jmp	#LR__0561
06c7c                 | LR__0566
06c7c                 | ' return 0
06c7c     00 FA 05 F6 | 	mov	result1, #0
06c80                 | LR__0567
06c80     A7 F0 03 F6 | 	mov	ptra, fp
06c84     B2 00 A0 FD | 	call	#popregs_
06c88                 | _compile_print_ret
06c88     2D 00 64 FD | 	ret
06c8c                 | 
06c8c                 | ' 
06c8c                 | ' function compile_if() as ulong  
06c8c                 | _compile_if
06c8c     05 4A 05 F6 | 	mov	COUNT_, #5
06c90     A8 00 A0 FD | 	call	#pushregs_
06c94                 | _compile_if_enter
06c94     70 16 B0 FD | 	call	#_expr
06c98                 | ' expr()
06c98                 | ' return 0
06c98     56 00 00 FF 
06c9c     18 E4 05 F1 | 	add	objptr, ##44056
06ca0     F2 FA 01 FB | 	rdlong	result1, objptr
06ca4     01 FA 05 F1 | 	add	result1, #1
06ca8     F2 FA 61 FC | 	wrlong	result1, objptr
06cac     58 22 06 F6 | 	mov	local03, #88
06cb0     0F 25 02 F6 | 	mov	local04, local01
06cb4     10 27 02 F6 | 	mov	local05, local02
06cb8     11 1F 02 F6 | 	mov	local01, local03
06cbc     13 00 00 FF 
06cc0     38 E4 05 F1 | 	add	objptr, ##9784
06cc4     F2 12 02 FB | 	rdlong	arg01, objptr
06cc8     09 FB 01 F6 | 	mov	result1, arg01
06ccc     01 FA 65 F0 | 	shl	result1, #1
06cd0     09 FB 01 F1 | 	add	result1, arg01
06cd4     02 FA 65 F0 | 	shl	result1, #2
06cd8     03 00 00 FF 
06cdc     00 E4 85 F1 | 	sub	objptr, ##1536
06ce0     F2 FA 01 F1 | 	add	result1, objptr
06ce4     FD 24 62 FC | 	wrlong	local04, result1
06ce8     03 00 00 FF 
06cec     00 E4 05 F1 | 	add	objptr, ##1536
06cf0     F2 12 02 FB | 	rdlong	arg01, objptr
06cf4     09 25 02 F6 | 	mov	local04, arg01
06cf8     01 24 66 F0 | 	shl	local04, #1
06cfc     09 25 02 F1 | 	add	local04, arg01
06d00     02 24 66 F0 | 	shl	local04, #2
06d04     03 00 00 FF 
06d08     00 E4 85 F1 | 	sub	objptr, ##1536
06d0c     F2 24 02 F1 | 	add	local04, objptr
06d10     04 24 06 F1 | 	add	local04, #4
06d14     12 27 62 FC | 	wrlong	local05, local04
06d18     03 00 00 FF 
06d1c     00 E4 05 F1 | 	add	objptr, ##1536
06d20     F2 24 02 FB | 	rdlong	local04, objptr
06d24     12 27 02 F6 | 	mov	local05, local04
06d28     01 26 66 F0 | 	shl	local05, #1
06d2c     12 27 02 F1 | 	add	local05, local04
06d30     02 26 66 F0 | 	shl	local05, #2
06d34     03 00 00 FF 
06d38     00 E4 85 F1 | 	sub	objptr, ##1536
06d3c     F2 26 02 F1 | 	add	local05, objptr
06d40     08 26 06 F1 | 	add	local05, #8
06d44     13 1F 62 FC | 	wrlong	local01, local05
06d48     03 00 00 FF 
06d4c     00 E4 05 F1 | 	add	objptr, ##1536
06d50     F2 24 02 FB | 	rdlong	local04, objptr
06d54     01 24 06 F1 | 	add	local04, #1
06d58     F2 24 62 FC | 	wrlong	local04, objptr
06d5c                 | ' 
06d5c                 | ' 'print "In compile_if"
06d5c                 | ' compile_fun_1p()
06d5c                 | ' cmd=lparts(ct).token : ct+=1
06d5c                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
06d5c                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
06d5c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06d5c     13 00 00 FF 
06d60     38 E4 85 F1 | 	sub	objptr, ##9784
06d64     F2 26 02 FB | 	rdlong	local05, objptr
06d68     01 26 06 F1 | 	add	local05, #1
06d6c     03 26 66 F0 | 	shl	local05, #3
06d70     02 00 00 FF 
06d74     38 E4 85 F1 | 	sub	objptr, ##1080
06d78     F2 26 02 F1 | 	add	local05, objptr
06d7c     13 13 02 FB | 	rdlong	arg01, local05
06d80     53 00 00 FF 
06d84     E0 E5 85 F1 | 	sub	objptr, ##42976
06d88                 | ' 
06d88                 | ' select case s
06d88     41 01 00 FF 
06d8c     95 14 06 F6 | 	mov	arg02, ##@LR__4384
06d90     44 1E B1 FD | 	call	#__system___string_cmp
06d94     00 FA 0D F2 | 	cmp	result1, #0 wz
06d98     1B FA 05 A6 |  if_e	mov	result1, #27
06d9c     00 FA 05 56 |  if_ne	mov	result1, #0
06da0     00 FA 0D F2 | 	cmp	result1, #0 wz
06da4     0C 00 90 AD |  if_e	jmp	#LR__0570
06da8     05 12 06 F6 | 	mov	arg01, #5
06dac     88 ED BF FD | 	call	#_compile_immediate_assign
06db0     08 00 90 FD | 	jmp	#LR__0571
06db4                 | LR__0570
06db4     05 12 06 F6 | 	mov	arg01, #5
06db8     70 E5 BF FD | 	call	#_compile_immediate
06dbc                 | LR__0571
06dbc                 | ' 
06dbc                 | ' 
06dbc                 | ' return 0
06dbc     00 FA 05 F6 | 	mov	result1, #0
06dc0     A7 F0 03 F6 | 	mov	ptra, fp
06dc4     B2 00 A0 FD | 	call	#popregs_
06dc8                 | _compile_if_ret
06dc8     2D 00 64 FD | 	ret
06dcc                 | 
06dcc                 | ' 
06dcc                 | ' function compile_else() as ulong  
06dcc                 | _compile_else
06dcc     05 4A 05 F6 | 	mov	COUNT_, #5
06dd0     A8 00 A0 FD | 	call	#pushregs_
06dd4                 | _compile_else_enter
06dd4     5A 22 06 F6 | 	mov	local03, #90
06dd8     0F 25 02 F6 | 	mov	local04, local01
06ddc     10 27 02 F6 | 	mov	local05, local02
06de0     11 1F 02 F6 | 	mov	local01, local03
06de4     69 00 00 FF 
06de8     50 E4 05 F1 | 	add	objptr, ##53840
06dec     F2 12 02 FB | 	rdlong	arg01, objptr
06df0     09 FB 01 F6 | 	mov	result1, arg01
06df4     01 FA 65 F0 | 	shl	result1, #1
06df8     09 FB 01 F1 | 	add	result1, arg01
06dfc     02 FA 65 F0 | 	shl	result1, #2
06e00     03 00 00 FF 
06e04     00 E4 85 F1 | 	sub	objptr, ##1536
06e08     F2 FA 01 F1 | 	add	result1, objptr
06e0c     FD 24 62 FC | 	wrlong	local04, result1
06e10     03 00 00 FF 
06e14     00 E4 05 F1 | 	add	objptr, ##1536
06e18     F2 FA 01 FB | 	rdlong	result1, objptr
06e1c     FD 24 02 F6 | 	mov	local04, result1
06e20     01 24 66 F0 | 	shl	local04, #1
06e24     FD 24 02 F1 | 	add	local04, result1
06e28     02 24 66 F0 | 	shl	local04, #2
06e2c     03 00 00 FF 
06e30     00 E4 85 F1 | 	sub	objptr, ##1536
06e34     F2 24 02 F1 | 	add	local04, objptr
06e38     04 24 06 F1 | 	add	local04, #4
06e3c     12 27 62 FC | 	wrlong	local05, local04
06e40     03 00 00 FF 
06e44     00 E4 05 F1 | 	add	objptr, ##1536
06e48     F2 24 02 FB | 	rdlong	local04, objptr
06e4c     12 27 02 F6 | 	mov	local05, local04
06e50     01 26 66 F0 | 	shl	local05, #1
06e54     12 27 02 F1 | 	add	local05, local04
06e58     02 26 66 F0 | 	shl	local05, #2
06e5c     03 00 00 FF 
06e60     00 E4 85 F1 | 	sub	objptr, ##1536
06e64     F2 26 02 F1 | 	add	local05, objptr
06e68     08 26 06 F1 | 	add	local05, #8
06e6c     13 1F 62 FC | 	wrlong	local01, local05
06e70     03 00 00 FF 
06e74     00 E4 05 F1 | 	add	objptr, ##1536
06e78     F2 24 02 FB | 	rdlong	local04, objptr
06e7c     01 24 06 F1 | 	add	local04, #1
06e80     F2 24 62 FC | 	wrlong	local04, objptr
06e84                 | ' 
06e84                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
06e84                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06e84     13 00 00 FF 
06e88     38 E4 85 F1 | 	sub	objptr, ##9784
06e8c     F2 26 02 FB | 	rdlong	local05, objptr
06e90     01 26 06 F1 | 	add	local05, #1
06e94     03 26 66 F0 | 	shl	local05, #3
06e98     02 00 00 FF 
06e9c     38 E4 85 F1 | 	sub	objptr, ##1080
06ea0     F2 26 02 F1 | 	add	local05, objptr
06ea4     13 13 02 FB | 	rdlong	arg01, local05
06ea8     53 00 00 FF 
06eac     E0 E5 85 F1 | 	sub	objptr, ##42976
06eb0                 | ' 
06eb0                 | ' select case s
06eb0     41 01 00 FF 
06eb4     95 14 06 F6 | 	mov	arg02, ##@LR__4384
06eb8     1C 1D B1 FD | 	call	#__system___string_cmp
06ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
06ec0     1B FA 05 A6 |  if_e	mov	result1, #27
06ec4     00 FA 05 56 |  if_ne	mov	result1, #0
06ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
06ecc     0C 00 90 AD |  if_e	jmp	#LR__0580
06ed0     05 12 06 F6 | 	mov	arg01, #5
06ed4     60 EC BF FD | 	call	#_compile_immediate_assign
06ed8     08 00 90 FD | 	jmp	#LR__0581
06edc                 | LR__0580
06edc     05 12 06 F6 | 	mov	arg01, #5
06ee0     48 E4 BF FD | 	call	#_compile_immediate
06ee4                 | LR__0581
06ee4                 | ' 
06ee4                 | ' 
06ee4                 | ' return 0
06ee4     00 FA 05 F6 | 	mov	result1, #0
06ee8     A7 F0 03 F6 | 	mov	ptra, fp
06eec     B2 00 A0 FD | 	call	#popregs_
06ef0                 | _compile_else_ret
06ef0     2D 00 64 FD | 	ret
06ef4                 | 
06ef4                 | ' 
06ef4                 | ' 
06ef4                 | ' function compile_dim() as ulong  
06ef4                 | _compile_dim
06ef4     11 4A 05 F6 | 	mov	COUNT_, #17
06ef8     A8 00 A0 FD | 	call	#pushregs_
06efc     01 1E 06 F6 | 	mov	local01, #1
06f00     01 20 06 F6 | 	mov	local02, #1
06f04     01 22 06 F6 | 	mov	local03, #1
06f08                 | ' 
06f08                 | ' dims(0)=1: dims(1)=1: dims(2)=1
06f08                 | ' 
06f08                 | ' if isname(lparts(ct).part$) then 
06f08     56 00 00 FF 
06f0c     18 E4 05 F1 | 	add	objptr, ##44056
06f10     F2 14 02 FB | 	rdlong	arg02, objptr
06f14     03 14 66 F0 | 	shl	arg02, #3
06f18     02 00 00 FF 
06f1c     38 E4 85 F1 | 	sub	objptr, ##1080
06f20     F2 14 02 F1 | 	add	arg02, objptr
06f24     0A 13 02 FB | 	rdlong	arg01, arg02
06f28     53 00 00 FF 
06f2c     E0 E5 85 F1 | 	sub	objptr, ##42976
06f30     DC D3 BF FD | 	call	#_isname
06f34     00 FA 0D F2 | 	cmp	result1, #0 wz
06f38     30 05 90 AD |  if_e	jmp	#LR__0614
06f3c     56 00 00 FF 
06f40     18 E4 05 F1 | 	add	objptr, ##44056
06f44     F2 24 02 FB | 	rdlong	local04, objptr
06f48     03 24 66 F0 | 	shl	local04, #3
06f4c     02 00 00 FF 
06f50     38 E4 85 F1 | 	sub	objptr, ##1080
06f54     F2 24 02 F1 | 	add	local04, objptr
06f58     12 27 02 FB | 	rdlong	local05, local04
06f5c     01 28 66 F6 | 	neg	local06, #1
06f60                 | '   varname2$=lparts(ct).part$ 
06f60                 | '   j=-1
06f60                 | '   if varnum>0 then
06f60     04 E4 85 F1 | 	sub	objptr, #4
06f64     F2 2A 02 FB | 	rdlong	local07, objptr
06f68     53 00 00 FF 
06f6c     DC E5 85 F1 | 	sub	objptr, ##42972
06f70     01 2A 56 F2 | 	cmps	local07, #1 wc
06f74     58 00 90 CD |  if_b	jmp	#LR__0592
06f78                 | '  '   print "in dim, varnum=";varnum
06f78                 | '     for i=0 to varnum-1
06f78     00 2C 06 F6 | 	mov	local08, #0
06f7c     53 00 00 FF 
06f80     DC E5 05 F1 | 	add	objptr, ##42972
06f84     F2 2E 02 FB | 	rdlong	local09, objptr
06f88     53 00 00 FF 
06f8c     DC E5 85 F1 | 	sub	objptr, ##42972
06f90                 | LR__0590
06f90     17 2D 52 F2 | 	cmps	local08, local09 wc
06f94     38 00 90 3D |  if_ae	jmp	#LR__0591
06f98                 | '       if variables(i).name=varname2$ then j=i : exit
06f98     16 25 02 F6 | 	mov	local04, local08
06f9c     04 24 66 F0 | 	shl	local04, #4
06fa0     33 00 00 FF 
06fa4     DC E5 05 F1 | 	add	objptr, ##26588
06fa8     F2 24 02 F1 | 	add	local04, objptr
06fac     12 13 02 FB | 	rdlong	arg01, local04
06fb0     13 15 02 F6 | 	mov	arg02, local05
06fb4     33 00 00 FF 
06fb8     DC E5 85 F1 | 	sub	objptr, ##26588
06fbc     18 1C B1 FD | 	call	#__system___string_cmp
06fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
06fc4     16 29 02 A6 |  if_e	mov	local06, local08
06fc8     01 2C 06 51 |  if_ne	add	local08, #1
06fcc     C0 FF 9F 5D |  if_ne	jmp	#LR__0590
06fd0                 | LR__0591
06fd0                 | LR__0592
06fd0                 | '   if j<>-1 then printerror (42) : return 42
06fd0     FF FF 7F FF 
06fd4     FF 29 0E F2 | 	cmp	local06, ##-1 wz
06fd8     10 00 90 AD |  if_e	jmp	#LR__0593
06fdc     2A 12 06 F6 | 	mov	arg01, #42
06fe0     A8 E6 B0 FD | 	call	#_printerror
06fe4     2A FA 05 F6 | 	mov	result1, #42
06fe8     D8 05 90 FD | 	jmp	#LR__0616
06fec                 | LR__0593
06fec                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
06fec     56 00 00 FF 
06ff0     18 E4 05 F1 | 	add	objptr, ##44056
06ff4     F2 14 02 FB | 	rdlong	arg02, objptr
06ff8     01 14 06 F1 | 	add	arg02, #1
06ffc     03 14 66 F0 | 	shl	arg02, #3
07000     02 00 00 FF 
07004     38 E4 85 F1 | 	sub	objptr, ##1080
07008     F2 14 02 F1 | 	add	arg02, objptr
0700c     0A 13 02 FB | 	rdlong	arg01, arg02
07010     42 01 00 FF 
07014     FD 14 06 F6 | 	mov	arg02, ##@LR__4532
07018     53 00 00 FF 
0701c     E0 E5 85 F1 | 	sub	objptr, ##42976
07020     B4 1B B1 FD | 	call	#__system___string_cmp
07024     00 FA 0D F2 | 	cmp	result1, #0 wz
07028     50 00 90 AD |  if_e	jmp	#LR__0594
0702c     56 00 00 FF 
07030     18 E4 05 F1 | 	add	objptr, ##44056
07034     F2 2E 02 FB | 	rdlong	local09, objptr
07038     01 2E 06 F1 | 	add	local09, #1
0703c     03 2E 66 F0 | 	shl	local09, #3
07040     02 00 00 FF 
07044     38 E4 85 F1 | 	sub	objptr, ##1080
07048     F2 2E 02 F1 | 	add	local09, objptr
0704c     17 13 02 FB | 	rdlong	arg01, local09
07050     42 01 00 FF 
07054     FF 14 06 F6 | 	mov	arg02, ##@LR__4533
07058     53 00 00 FF 
0705c     E0 E5 85 F1 | 	sub	objptr, ##42976
07060     74 1B B1 FD | 	call	#__system___string_cmp
07064     00 FA 0D F2 | 	cmp	result1, #0 wz
07068     10 00 90 AD |  if_e	jmp	#LR__0594
0706c     2B 12 06 F6 | 	mov	arg01, #43
07070     18 E6 B0 FD | 	call	#_printerror
07074     2B FA 05 F6 | 	mov	result1, #43
07078     48 05 90 FD | 	jmp	#LR__0616
0707c                 | LR__0594
0707c                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
0707c     56 00 00 FF 
07080     18 E4 05 F1 | 	add	objptr, ##44056
07084     F2 14 02 FB | 	rdlong	arg02, objptr
07088     01 14 06 F1 | 	add	arg02, #1
0708c     03 14 66 F0 | 	shl	arg02, #3
07090     02 00 00 FF 
07094     38 E4 85 F1 | 	sub	objptr, ##1080
07098     F2 14 02 F1 | 	add	arg02, objptr
0709c     0A 13 02 FB | 	rdlong	arg01, arg02
070a0     42 01 00 FF 
070a4     02 15 06 F6 | 	mov	arg02, ##@LR__4534
070a8     53 00 00 FF 
070ac     E0 E5 85 F1 | 	sub	objptr, ##42976
070b0     24 1B B1 FD | 	call	#__system___string_cmp
070b4     00 FA 0D F2 | 	cmp	result1, #0 wz
070b8     56 00 00 AF 
070bc     18 E4 05 A1 |  if_e	add	objptr, ##44056
070c0     F2 30 02 AB |  if_e	rdlong	local10, objptr
070c4     56 00 00 AF 
070c8     18 E4 85 A1 |  if_e	sub	objptr, ##44056
070cc     01 30 06 A1 |  if_e	add	local10, #1
070d0     7C 01 90 AD |  if_e	jmp	#LR__0600
070d4     56 00 00 FF 
070d8     18 E4 05 F1 | 	add	objptr, ##44056
070dc     F2 30 02 FB | 	rdlong	local10, objptr
070e0     56 00 00 FF 
070e4     18 E4 85 F1 | 	sub	objptr, ##44056
070e8     02 30 06 F1 | 	add	local10, #2
070ec     00 32 06 F6 | 	mov	local11, #0
070f0                 | '   l=ct+2 : m=0 : do
070f0                 | LR__0595
070f0                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
070f0                 | '     if isdec(lparts(l).part$) then 
070f0     18 25 02 F6 | 	mov	local04, local10
070f4     03 24 66 F0 | 	shl	local04, #3
070f8     53 00 00 FF 
070fc     E0 E5 05 F1 | 	add	objptr, ##42976
07100     F2 24 02 F1 | 	add	local04, objptr
07104     12 13 02 FB | 	rdlong	arg01, local04
07108     53 00 00 FF 
0710c     E0 E5 85 F1 | 	sub	objptr, ##42976
07110     A0 D8 BF FD | 	call	#_isdec
07114     00 FA 0D F2 | 	cmp	result1, #0 wz
07118     44 00 90 AD |  if_e	jmp	#LR__0596
0711c     19 35 02 F6 | 	mov	local12, local11
07120     0F 35 06 F1 | 	add	local12, #local01
07124     18 2F 02 F6 | 	mov	local09, local10
07128     03 2E 66 F0 | 	shl	local09, #3
0712c     53 00 00 FF 
07130     E0 E5 05 F1 | 	add	objptr, ##42976
07134     F2 2E 02 F1 | 	add	local09, objptr
07138     17 13 02 FB | 	rdlong	arg01, local09
0713c     00 14 06 F6 | 	mov	arg02, #0
07140     53 00 00 FF 
07144     E0 E5 85 F1 | 	sub	objptr, ##42976
07148     C8 4B B1 FD | 	call	#__system____builtin_atoi
0714c     FD 36 02 F6 | 	mov	local13, result1
07150                 | 	'.live	local13
07150                 | 	'.live	local12
07150     00 34 8E F9 | 	altd	local12, #0
07154     1B 35 02 F6 | 	mov	local12, local13
07158     01 32 06 F1 | 	add	local11, #1
0715c     10 00 90 FD | 	jmp	#LR__0597
07160                 | LR__0596
07160     11 12 06 F6 | 	mov	arg01, #17
07164     24 E5 B0 FD | 	call	#_printerror
07168                 | '       printerror (17)  : return(17)
07168     11 FA 05 F6 | 	mov	result1, #17
0716c     54 04 90 FD | 	jmp	#LR__0616
07170                 | LR__0597
07170                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
07170     18 25 02 F6 | 	mov	local04, local10
07174     01 24 06 F1 | 	add	local04, #1
07178     03 24 66 F0 | 	shl	local04, #3
0717c     53 00 00 FF 
07180     E0 E5 05 F1 | 	add	objptr, ##42976
07184     F2 24 02 F1 | 	add	local04, objptr
07188     12 13 02 FB | 	rdlong	arg01, local04
0718c     42 01 00 FF 
07190     05 15 06 F6 | 	mov	arg02, ##@LR__4535
07194     53 00 00 FF 
07198     E0 E5 85 F1 | 	sub	objptr, ##42976
0719c     38 1A B1 FD | 	call	#__system___string_cmp
071a0     00 FA 0D F2 | 	cmp	result1, #0 wz
071a4     48 00 90 AD |  if_e	jmp	#LR__0598
071a8     18 37 02 F6 | 	mov	local13, local10
071ac     01 36 06 F1 | 	add	local13, #1
071b0     03 36 66 F0 | 	shl	local13, #3
071b4     53 00 00 FF 
071b8     E0 E5 05 F1 | 	add	objptr, ##42976
071bc     F2 36 02 F1 | 	add	local13, objptr
071c0     1B 13 02 FB | 	rdlong	arg01, local13
071c4     42 01 00 FF 
071c8     07 15 06 F6 | 	mov	arg02, ##@LR__4536
071cc     53 00 00 FF 
071d0     E0 E5 85 F1 | 	sub	objptr, ##42976
071d4     00 1A B1 FD | 	call	#__system___string_cmp
071d8     00 FA 0D F2 | 	cmp	result1, #0 wz
071dc     10 00 90 AD |  if_e	jmp	#LR__0598
071e0     2C 12 06 F6 | 	mov	arg01, #44
071e4     A4 E4 B0 FD | 	call	#_printerror
071e8     2C FA 05 F6 | 	mov	result1, #44
071ec     D4 03 90 FD | 	jmp	#LR__0616
071f0                 | LR__0598
071f0     02 30 06 F1 | 	add	local10, #2
071f4     18 25 02 F6 | 	mov	local04, local10
071f8     01 24 86 F1 | 	sub	local04, #1
071fc     03 24 66 F0 | 	shl	local04, #3
07200     53 00 00 FF 
07204     E0 E5 05 F1 | 	add	objptr, ##42976
07208     F2 24 02 F1 | 	add	local04, objptr
0720c     12 13 02 FB | 	rdlong	arg01, local04
07210     42 01 00 FF 
07214     09 15 06 F6 | 	mov	arg02, ##@LR__4537
07218     53 00 00 FF 
0721c     E0 E5 85 F1 | 	sub	objptr, ##42976
07220     B4 19 B1 FD | 	call	#__system___string_cmp
07224     00 FA 0D F2 | 	cmp	result1, #0 wz
07228     03 32 56 52 |  if_ne	cmps	local11, #3 wc
0722c     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0595
07230                 | '   if m>3 then printerror(45): return(45)
07230     04 32 56 F2 | 	cmps	local11, #4 wc
07234     10 00 90 CD |  if_b	jmp	#LR__0599
07238     2D 12 06 F6 | 	mov	arg01, #45
0723c     4C E4 B0 FD | 	call	#_printerror
07240     2D FA 05 F6 | 	mov	result1, #45
07244     7C 03 90 FD | 	jmp	#LR__0616
07248                 | LR__0599
07248     00 39 06 F6 | 	mov	local14, #256
0724c     0C 3A 06 F6 | 	mov	local15, #12
07250                 | LR__0600
07250                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
07250                 | '   arraytype=array_no_type : esize=12
07250                 | ' 1350 
07250                 | '   if lparts(l).part$="as" then
07250     18 25 02 F6 | 	mov	local04, local10
07254     03 24 66 F0 | 	shl	local04, #3
07258     53 00 00 FF 
0725c     E0 E5 05 F1 | 	add	objptr, ##42976
07260     F2 24 02 F1 | 	add	local04, objptr
07264     12 13 02 FB | 	rdlong	arg01, local04
07268     42 01 00 FF 
0726c     0B 15 06 F6 | 	mov	arg02, ##@LR__4538
07270     53 00 00 FF 
07274     E0 E5 85 F1 | 	sub	objptr, ##42976
07278     5C 19 B1 FD | 	call	#__system___string_cmp
0727c     00 FA 0D F2 | 	cmp	result1, #0 wz
07280     F8 01 90 5D |  if_ne	jmp	#LR__0615
07284                 | '     select case lparts(l+1).part$
07284     18 35 02 F6 | 	mov	local12, local10
07288     01 34 06 F1 | 	add	local12, #1
0728c     03 34 66 F0 | 	shl	local12, #3
07290     53 00 00 FF 
07294     E0 E5 05 F1 | 	add	objptr, ##42976
07298     F2 34 02 F1 | 	add	local12, objptr
0729c     1A 3D 02 FB | 	rdlong	local16, local12
072a0     42 01 00 FF 
072a4     0E 15 06 F6 | 	mov	arg02, ##@LR__4539
072a8     1E 13 02 F6 | 	mov	arg01, local16
072ac     53 00 00 FF 
072b0     E0 E5 85 F1 | 	sub	objptr, ##42976
072b4     20 19 B1 FD | 	call	#__system___string_cmp
072b8     00 FA 0D F2 | 	cmp	result1, #0 wz
072bc     0C 01 90 AD |  if_e	jmp	#LR__0601
072c0     42 01 00 FF 
072c4     13 15 06 F6 | 	mov	arg02, ##@LR__4540
072c8     1E 13 02 F6 | 	mov	arg01, local16
072cc     08 19 B1 FD | 	call	#__system___string_cmp
072d0     00 FA 0D F2 | 	cmp	result1, #0 wz
072d4     00 01 90 AD |  if_e	jmp	#LR__0602
072d8     42 01 00 FF 
072dc     19 15 06 F6 | 	mov	arg02, ##@LR__4541
072e0     1E 13 02 F6 | 	mov	arg01, local16
072e4     F0 18 B1 FD | 	call	#__system___string_cmp
072e8     00 FA 0D F2 | 	cmp	result1, #0 wz
072ec     F4 00 90 AD |  if_e	jmp	#LR__0603
072f0     42 01 00 FF 
072f4     1F 15 06 F6 | 	mov	arg02, ##@LR__4542
072f8     1E 13 02 F6 | 	mov	arg01, local16
072fc     D8 18 B1 FD | 	call	#__system___string_cmp
07300     00 FA 0D F2 | 	cmp	result1, #0 wz
07304     E8 00 90 AD |  if_e	jmp	#LR__0604
07308     42 01 00 FF 
0730c     26 15 06 F6 | 	mov	arg02, ##@LR__4543
07310     1E 13 02 F6 | 	mov	arg01, local16
07314     C0 18 B1 FD | 	call	#__system___string_cmp
07318     00 FA 0D F2 | 	cmp	result1, #0 wz
0731c     DC 00 90 AD |  if_e	jmp	#LR__0605
07320     42 01 00 FF 
07324     2B 15 06 F6 | 	mov	arg02, ##@LR__4544
07328     1E 13 02 F6 | 	mov	arg01, local16
0732c     A8 18 B1 FD | 	call	#__system___string_cmp
07330     00 FA 0D F2 | 	cmp	result1, #0 wz
07334     D0 00 90 AD |  if_e	jmp	#LR__0606
07338     42 01 00 FF 
0733c     33 15 06 F6 | 	mov	arg02, ##@LR__4545
07340     1E 13 02 F6 | 	mov	arg01, local16
07344     90 18 B1 FD | 	call	#__system___string_cmp
07348     00 FA 0D F2 | 	cmp	result1, #0 wz
0734c     C4 00 90 AD |  if_e	jmp	#LR__0607
07350     42 01 00 FF 
07354     39 15 06 F6 | 	mov	arg02, ##@LR__4546
07358     1E 13 02 F6 | 	mov	arg01, local16
0735c     78 18 B1 FD | 	call	#__system___string_cmp
07360     00 FA 0D F2 | 	cmp	result1, #0 wz
07364     B8 00 90 AD |  if_e	jmp	#LR__0608
07368     42 01 00 FF 
0736c     3F 15 06 F6 | 	mov	arg02, ##@LR__4547
07370     1E 13 02 F6 | 	mov	arg01, local16
07374     60 18 B1 FD | 	call	#__system___string_cmp
07378     00 FA 0D F2 | 	cmp	result1, #0 wz
0737c     AC 00 90 AD |  if_e	jmp	#LR__0609
07380     42 01 00 FF 
07384     46 15 06 F6 | 	mov	arg02, ##@LR__4548
07388     1E 13 02 F6 | 	mov	arg01, local16
0738c     48 18 B1 FD | 	call	#__system___string_cmp
07390     00 FA 0D F2 | 	cmp	result1, #0 wz
07394     A0 00 90 AD |  if_e	jmp	#LR__0610
07398     42 01 00 FF 
0739c     4D 15 06 F6 | 	mov	arg02, ##@LR__4549
073a0     1E 13 02 F6 | 	mov	arg01, local16
073a4     30 18 B1 FD | 	call	#__system___string_cmp
073a8     00 FA 0D F2 | 	cmp	result1, #0 wz
073ac     94 00 90 AD |  if_e	jmp	#LR__0611
073b0     42 01 00 FF 
073b4     54 15 06 F6 | 	mov	arg02, ##@LR__4550
073b8     1E 13 02 F6 | 	mov	arg01, local16
073bc     18 18 B1 FD | 	call	#__system___string_cmp
073c0     00 FA 0D F2 | 	cmp	result1, #0 wz
073c4     88 00 90 AD |  if_e	jmp	#LR__0612
073c8     90 00 90 FD | 	jmp	#LR__0613
073cc                 | LR__0601
073cc     01 39 06 F6 | 	mov	local14, #257
073d0     01 3A 06 F6 | 	mov	local15, #1
073d4     A4 00 90 FD | 	jmp	#LR__0615
073d8                 | LR__0602
073d8     02 39 06 F6 | 	mov	local14, #258
073dc     01 3A 06 F6 | 	mov	local15, #1
073e0     98 00 90 FD | 	jmp	#LR__0615
073e4                 | LR__0603
073e4     03 39 06 F6 | 	mov	local14, #259
073e8     02 3A 06 F6 | 	mov	local15, #2
073ec     8C 00 90 FD | 	jmp	#LR__0615
073f0                 | LR__0604
073f0     04 39 06 F6 | 	mov	local14, #260
073f4     02 3A 06 F6 | 	mov	local15, #2
073f8     80 00 90 FD | 	jmp	#LR__0615
073fc                 | LR__0605
073fc     05 39 06 F6 | 	mov	local14, #261
07400     04 3A 06 F6 | 	mov	local15, #4
07404     74 00 90 FD | 	jmp	#LR__0615
07408                 | LR__0606
07408     05 39 06 F6 | 	mov	local14, #261
0740c     04 3A 06 F6 | 	mov	local15, #4
07410     68 00 90 FD | 	jmp	#LR__0615
07414                 | LR__0607
07414     06 39 06 F6 | 	mov	local14, #262
07418     04 3A 06 F6 | 	mov	local15, #4
0741c     5C 00 90 FD | 	jmp	#LR__0615
07420                 | LR__0608
07420     07 39 06 F6 | 	mov	local14, #263
07424     08 3A 06 F6 | 	mov	local15, #8
07428     50 00 90 FD | 	jmp	#LR__0615
0742c                 | LR__0609
0742c     08 39 06 F6 | 	mov	local14, #264
07430     08 3A 06 F6 | 	mov	local15, #8
07434     44 00 90 FD | 	jmp	#LR__0615
07438                 | LR__0610
07438     09 39 06 F6 | 	mov	local14, #265
0743c     04 3A 06 F6 | 	mov	local15, #4
07440     38 00 90 FD | 	jmp	#LR__0615
07444                 | LR__0611
07444     0A 39 06 F6 | 	mov	local14, #266
07448     08 3A 06 F6 | 	mov	local15, #8
0744c     2C 00 90 FD | 	jmp	#LR__0615
07450                 | LR__0612
07450     0B 39 06 F6 | 	mov	local14, #267
07454     04 3A 06 F6 | 	mov	local15, #4
07458     20 00 90 FD | 	jmp	#LR__0615
0745c                 | LR__0613
0745c     2F 12 06 F6 | 	mov	arg01, #47
07460     28 E2 B0 FD | 	call	#_printerror
07464     2F FA 05 F6 | 	mov	result1, #47
07468     58 01 90 FD | 	jmp	#LR__0616
0746c                 | LR__0614
0746c     2E 12 06 F6 | 	mov	arg01, #46
07470     18 E2 B0 FD | 	call	#_printerror
07474                 | '   printerror(46): return 46
07474     2E FA 05 F6 | 	mov	result1, #46
07478     48 01 90 FD | 	jmp	#LR__0616
0747c                 | LR__0615
0747c     0F 3B 02 FD | 	qmul	local15, local01
07480     18 2A 62 FD | 	getqx	local07
07484     10 2B 02 FD | 	qmul	local07, local02
07488     18 3C 62 FD | 	getqx	local16
0748c     11 3D 02 FD | 	qmul	local16, local03
07490     7A 00 00 FF 
07494     4C E4 05 F1 | 	add	objptr, ##62540
07498     F2 3E 02 FB | 	rdlong	local17, objptr
0749c     1C 15 02 F6 | 	mov	arg02, local14
074a0     01 16 06 F6 | 	mov	arg03, #1
074a4     00 18 06 F6 | 	mov	arg04, #0
074a8                 | '     return fill(addr, pattern, count, listPtr, 4)
074a8     04 1A 06 F6 | 	mov	arg05, #4
074ac     18 3C 62 FD | 	getqx	local16
074b0     1E 3F 82 F1 | 	sub	local17, local16
074b4     10 3E 86 F1 | 	sub	local17, #16
074b8     F2 3E 62 FC | 	wrlong	local17, objptr
074bc     1F 13 02 F6 | 	mov	arg01, local17
074c0     6E 00 00 FF 
074c4     8C E5 85 F1 | 	sub	objptr, ##56716
074c8     2C 0D B1 FD | 	call	#_psram_spin2_fill
074cc     1F 13 02 F6 | 	mov	arg01, local17
074d0     02 12 06 F1 | 	add	arg01, #2
074d4     1D 15 02 F6 | 	mov	arg02, local15
074d8     01 16 06 F6 | 	mov	arg03, #1
074dc     00 18 06 F6 | 	mov	arg04, #0
074e0                 | '     return fill(addr, pattern, count, listPtr, 1)
074e0     01 1A 06 F6 | 	mov	arg05, #1
074e4     10 0D B1 FD | 	call	#_psram_spin2_fill
074e8     1F 13 02 F6 | 	mov	arg01, local17
074ec     04 12 06 F1 | 	add	arg01, #4
074f0     0F 15 02 F6 | 	mov	arg02, local01
074f4     01 16 06 F6 | 	mov	arg03, #1
074f8     00 18 06 F6 | 	mov	arg04, #0
074fc                 | '     return fill(addr, pattern, count, listPtr, 4)
074fc     04 1A 06 F6 | 	mov	arg05, #4
07500     F4 0C B1 FD | 	call	#_psram_spin2_fill
07504     1F 13 02 F6 | 	mov	arg01, local17
07508     08 12 06 F1 | 	add	arg01, #8
0750c     10 15 02 F6 | 	mov	arg02, local02
07510     01 16 06 F6 | 	mov	arg03, #1
07514     00 18 06 F6 | 	mov	arg04, #0
07518                 | '     return fill(addr, pattern, count, listPtr, 4)
07518     04 1A 06 F6 | 	mov	arg05, #4
0751c     D8 0C B1 FD | 	call	#_psram_spin2_fill
07520     1F 13 02 F6 | 	mov	arg01, local17
07524     0C 12 06 F1 | 	add	arg01, #12
07528     11 15 02 F6 | 	mov	arg02, local03
0752c     01 16 06 F6 | 	mov	arg03, #1
07530     00 18 06 F6 | 	mov	arg04, #0
07534                 | '     return fill(addr, pattern, count, listPtr, 4)
07534     04 1A 06 F6 | 	mov	arg05, #4
07538     BC 0C B1 FD | 	call	#_psram_spin2_fill
0753c     48 00 00 FF 
07540     1C E5 05 F1 | 	add	objptr, ##37148
07544     F2 24 02 FB | 	rdlong	local04, objptr
07548     04 24 66 F0 | 	shl	local04, #4
0754c     20 00 00 FF 
07550     00 E4 85 F1 | 	sub	objptr, ##16384
07554     F2 24 02 F1 | 	add	local04, objptr
07558     12 27 62 FC | 	wrlong	local05, local04
0755c     20 00 00 FF 
07560     00 E4 05 F1 | 	add	objptr, ##16384
07564     F2 24 02 FB | 	rdlong	local04, objptr
07568     04 24 66 F0 | 	shl	local04, #4
0756c     20 00 00 FF 
07570     00 E4 85 F1 | 	sub	objptr, ##16384
07574     F2 24 02 F1 | 	add	local04, objptr
07578     04 24 06 F1 | 	add	local04, #4
0757c     12 3F 62 FC | 	wrlong	local17, local04
07580     20 00 00 FF 
07584     00 E4 05 F1 | 	add	objptr, ##16384
07588     F2 24 02 FB | 	rdlong	local04, objptr
0758c     04 24 66 F0 | 	shl	local04, #4
07590     20 00 00 FF 
07594     00 E4 85 F1 | 	sub	objptr, ##16384
07598     F2 24 02 F1 | 	add	local04, objptr
0759c     0C 24 06 F1 | 	add	local04, #12
075a0     12 39 62 FC | 	wrlong	local14, local04
075a4     20 00 00 FF 
075a8     00 E4 05 F1 | 	add	objptr, ##16384
075ac     F2 2A 02 FB | 	rdlong	local07, objptr
075b0     01 2A 06 F1 | 	add	local07, #1
075b4     F2 2A 62 FC | 	wrlong	local07, objptr
075b8     53 00 00 FF 
075bc     DC E5 85 F1 | 	sub	objptr, ##42972
075c0                 | ' 'print dims(0),dims(1),dims(2),arraytype
075c0                 | ' 
075c0                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
075c0                 | ' arrayptr=memtop-arraysize-16
075c0                 | ' memtop=arrayptr
075c0                 | ' 
075c0                 | ' pslpoke arrayptr,arraytype
075c0                 | ' pspoke arrayptr+2,esize
075c0                 | ' pslpoke arrayptr+4,dims(0)
075c0                 | ' pslpoke arrayptr+8,dims(1)
075c0                 | ' pslpoke arrayptr+12,dims(2)
075c0                 | ' 
075c0                 | ' variables(varnum).name=varname2$
075c0                 | ' variables(varnum).value.uresult=arrayptr
075c0                 | ' variables(varnum).vartype=arraytype
075c0                 | ' varnum+=1
075c0                 | ' 
075c0                 | ' return 0
075c0     00 FA 05 F6 | 	mov	result1, #0
075c4                 | LR__0616
075c4     A7 F0 03 F6 | 	mov	ptra, fp
075c8     B2 00 A0 FD | 	call	#popregs_
075cc                 | _compile_dim_ret
075cc     2D 00 64 FD | 	ret
075d0                 | 
075d0                 | ' 
075d0                 | ' 
075d0                 | ' function compile_for() as ulong  
075d0                 | _compile_for
075d0     07 4A 05 F6 | 	mov	COUNT_, #7
075d4     A8 00 A0 FD | 	call	#pushregs_
075d8                 | ' 
075d8                 | ' 
075d8                 | ' 
075d8                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
075d8     56 00 00 FF 
075dc     18 E4 05 F1 | 	add	objptr, ##44056
075e0     F2 14 02 FB | 	rdlong	arg02, objptr
075e4     01 14 06 F1 | 	add	arg02, #1
075e8     03 14 66 F0 | 	shl	arg02, #3
075ec     02 00 00 FF 
075f0     38 E4 85 F1 | 	sub	objptr, ##1080
075f4     F2 14 02 F1 | 	add	arg02, objptr
075f8     0A 13 02 FB | 	rdlong	arg01, arg02
075fc     53 00 00 FF 
07600     E0 E5 85 F1 | 	sub	objptr, ##42976
07604                 | ' 
07604                 | ' select case s
07604     41 01 00 FF 
07608     95 14 06 F6 | 	mov	arg02, ##@LR__4384
0760c     C8 15 B1 FD | 	call	#__system___string_cmp
07610     00 FA 0D F2 | 	cmp	result1, #0 wz
07614     1B FA 05 A6 |  if_e	mov	result1, #27
07618     00 FA 05 56 |  if_ne	mov	result1, #0
0761c     00 FA 0D F2 | 	cmp	result1, #0 wz
07620     0C 00 90 AD |  if_e	jmp	#LR__0620
07624     05 12 06 F6 | 	mov	arg01, #5
07628     0C E5 BF FD | 	call	#_compile_immediate_assign
0762c     10 00 90 FD | 	jmp	#LR__0621
07630                 | LR__0620
07630     20 12 06 F6 | 	mov	arg01, #32
07634     7C E9 BF FD | 	call	#_compile_error
07638     20 FA 05 F6 | 	mov	result1, #32
0763c     E8 02 90 FD | 	jmp	#LR__0627
07640                 | LR__0621
07640     69 00 00 FF 
07644     50 E4 05 F1 | 	add	objptr, ##53840
07648     F2 12 02 FB | 	rdlong	arg01, objptr
0764c     09 25 02 F6 | 	mov	local04, arg01
07650     01 24 86 F1 | 	sub	local04, #1
07654     12 15 02 F6 | 	mov	arg02, local04
07658     01 14 66 F0 | 	shl	arg02, #1
0765c     12 15 02 F1 | 	add	arg02, local04
07660     02 14 66 F0 | 	shl	arg02, #2
07664     03 00 00 FF 
07668     00 E4 85 F1 | 	sub	objptr, ##1536
0766c     F2 14 02 F1 | 	add	arg02, objptr
07670     0A 1F 02 FB | 	rdlong	local01, arg02
07674     04 14 06 F1 | 	add	arg02, #4
07678     0A 27 02 FB | 	rdlong	local05, arg02
0767c     01 12 86 F1 | 	sub	arg01, #1
07680     09 29 02 F6 | 	mov	local06, arg01
07684     01 28 66 F0 | 	shl	local06, #1
07688     09 29 02 F1 | 	add	local06, arg01
0768c     02 28 66 F0 | 	shl	local06, #2
07690     F2 28 02 F1 | 	add	local06, objptr
07694     08 28 06 F1 | 	add	local06, #8
07698     14 13 02 FB | 	rdlong	arg01, local06
0769c     13 21 02 F6 | 	mov	local02, local05
076a0     09 23 02 F6 | 	mov	local03, arg01
076a4                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
076a4                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
076a4     17 22 0E F2 | 	cmp	local03, #23 wz
076a8     66 00 00 FF 
076ac     50 E4 85 F1 | 	sub	objptr, ##52304
076b0     10 00 90 AD |  if_e	jmp	#LR__0622
076b4     22 12 06 F6 | 	mov	arg01, #34
076b8     F8 E8 BF FD | 	call	#_compile_error
076bc     22 FA 05 F6 | 	mov	result1, #34
076c0     64 02 90 FD | 	jmp	#LR__0627
076c4                 | LR__0622
076c4     0F 2B 02 F6 | 	mov	local07, local01
076c8                 | ' varnum=t1.result.uresult
076c8                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
076c8     56 00 00 FF 
076cc     18 E4 05 F1 | 	add	objptr, ##44056
076d0     F2 24 02 FB | 	rdlong	local04, objptr
076d4     03 24 66 F0 | 	shl	local04, #3
076d8     02 00 00 FF 
076dc     38 E4 85 F1 | 	sub	objptr, ##1080
076e0     F2 24 02 F1 | 	add	local04, objptr
076e4     12 13 02 FB | 	rdlong	arg01, local04
076e8     42 01 00 FF 
076ec     5B 15 06 F6 | 	mov	arg02, ##@LR__4551
076f0     53 00 00 FF 
076f4     E0 E5 85 F1 | 	sub	objptr, ##42976
076f8     DC 14 B1 FD | 	call	#__system___string_cmp
076fc     00 FA 0D F2 | 	cmp	result1, #0 wz
07700     10 00 90 AD |  if_e	jmp	#LR__0623
07704     21 12 06 F6 | 	mov	arg01, #33
07708     A8 E8 BF FD | 	call	#_compile_error
0770c     21 FA 05 F6 | 	mov	result1, #33
07710     14 02 90 FD | 	jmp	#LR__0627
07714                 | LR__0623
07714     56 00 00 FF 
07718     18 E4 05 F1 | 	add	objptr, ##44056
0771c     F2 24 02 FB | 	rdlong	local04, objptr
07720     01 24 06 F1 | 	add	local04, #1
07724     F2 24 62 FC | 	wrlong	local04, objptr
07728     56 00 00 FF 
0772c     18 E4 85 F1 | 	sub	objptr, ##44056
07730     D4 0B B0 FD | 	call	#_expr
07734                 | ' ct+=1
07734                 | ' expr()  ' there is "to" value pushed on the stack
07734                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
07734     56 00 00 FF 
07738     18 E4 05 F1 | 	add	objptr, ##44056
0773c     F2 24 02 FB | 	rdlong	local04, objptr
07740     03 24 66 F0 | 	shl	local04, #3
07744     02 00 00 FF 
07748     38 E4 85 F1 | 	sub	objptr, ##1080
0774c     F2 24 02 F1 | 	add	local04, objptr
07750     12 13 02 FB | 	rdlong	arg01, local04
07754     42 01 00 FF 
07758     5E 15 06 F6 | 	mov	arg02, ##@LR__4552
0775c     53 00 00 FF 
07760     E0 E5 85 F1 | 	sub	objptr, ##42976
07764     70 14 B1 FD | 	call	#__system___string_cmp
07768     00 FA 0D F2 | 	cmp	result1, #0 wz
0776c     3C 00 90 AD |  if_e	jmp	#LR__0624
07770     56 00 00 FF 
07774     18 E4 05 F1 | 	add	objptr, ##44056
07778     F2 28 02 FB | 	rdlong	local06, objptr
0777c     03 28 66 F0 | 	shl	local06, #3
07780     02 00 00 FF 
07784     38 E4 85 F1 | 	sub	objptr, ##1080
07788     F2 28 02 F1 | 	add	local06, objptr
0778c     14 13 02 FB | 	rdlong	arg01, local06
07790     42 01 00 FF 
07794     63 15 06 F6 | 	mov	arg02, ##@LR__4553
07798     53 00 00 FF 
0779c     E0 E5 85 F1 | 	sub	objptr, ##42976
077a0     34 14 B1 FD | 	call	#__system___string_cmp
077a4     00 FA 0D F2 | 	cmp	result1, #0 wz
077a8     24 00 90 5D |  if_ne	jmp	#LR__0625
077ac                 | LR__0624
077ac     56 00 00 FF 
077b0     18 E4 05 F1 | 	add	objptr, ##44056
077b4     F2 28 02 FB | 	rdlong	local06, objptr
077b8     01 28 06 F1 | 	add	local06, #1
077bc     F2 28 62 FC | 	wrlong	local06, objptr
077c0     56 00 00 FF 
077c4     18 E4 85 F1 | 	sub	objptr, ##44056
077c8     3C 0B B0 FD | 	call	#_expr
077cc     78 00 90 FD | 	jmp	#LR__0626
077d0                 | LR__0625
077d0     69 00 00 FF 
077d4     50 E4 05 F1 | 	add	objptr, ##53840
077d8     F2 28 02 FB | 	rdlong	local06, objptr
077dc     14 27 02 F6 | 	mov	local05, local06
077e0     01 26 66 F0 | 	shl	local05, #1
077e4     14 27 02 F1 | 	add	local05, local06
077e8     02 26 66 F0 | 	shl	local05, #2
077ec     03 00 00 FF 
077f0     00 E4 85 F1 | 	sub	objptr, ##1536
077f4     F2 26 02 F1 | 	add	local05, objptr
077f8     08 26 06 F1 | 	add	local05, #8
077fc     13 39 68 FC | 	wrlong	#28, local05
07800     03 00 00 FF 
07804     00 E4 05 F1 | 	add	objptr, ##1536
07808     F2 28 02 FB | 	rdlong	local06, objptr
0780c     14 27 02 F6 | 	mov	local05, local06
07810     01 26 66 F0 | 	shl	local05, #1
07814     14 27 02 F1 | 	add	local05, local06
07818     02 26 66 F0 | 	shl	local05, #2
0781c     03 00 00 FF 
07820     00 E4 85 F1 | 	sub	objptr, ##1536
07824     F2 26 02 F1 | 	add	local05, objptr
07828     13 03 68 FC | 	wrlong	#1, local05
0782c     03 00 00 FF 
07830     00 E4 05 F1 | 	add	objptr, ##1536
07834     F2 28 02 FB | 	rdlong	local06, objptr
07838     01 28 06 F1 | 	add	local06, #1
0783c     F2 28 62 FC | 	wrlong	local06, objptr
07840     69 00 00 FF 
07844     50 E4 85 F1 | 	sub	objptr, ##53840
07848                 | LR__0626
07848     69 00 00 FF 
0784c     50 E4 05 F1 | 	add	objptr, ##53840
07850     F2 28 02 FB | 	rdlong	local06, objptr
07854     14 27 02 F6 | 	mov	local05, local06
07858     01 26 66 F0 | 	shl	local05, #1
0785c     14 27 02 F1 | 	add	local05, local06
07860     02 26 66 F0 | 	shl	local05, #2
07864     03 00 00 FF 
07868     00 E4 85 F1 | 	sub	objptr, ##1536
0786c     F2 26 02 F1 | 	add	local05, objptr
07870     08 26 06 F1 | 	add	local05, #8
07874     13 39 68 FC | 	wrlong	#28, local05
07878     03 00 00 FF 
0787c     00 E4 05 F1 | 	add	objptr, ##1536
07880     F2 28 02 FB | 	rdlong	local06, objptr
07884     14 27 02 F6 | 	mov	local05, local06
07888     01 26 66 F0 | 	shl	local05, #1
0788c     14 27 02 F1 | 	add	local05, local06
07890     02 26 66 F0 | 	shl	local05, #2
07894     03 00 00 FF 
07898     00 E4 85 F1 | 	sub	objptr, ##1536
0789c     F2 26 02 F1 | 	add	local05, objptr
078a0     13 2B 62 FC | 	wrlong	local07, local05
078a4     03 00 00 FF 
078a8     00 E4 05 F1 | 	add	objptr, ##1536
078ac     F2 2A 02 FB | 	rdlong	local07, objptr
078b0     01 2A 06 F1 | 	add	local07, #1
078b4     F2 2A 62 FC | 	wrlong	local07, objptr
078b8     15 29 02 F6 | 	mov	local06, local07
078bc     01 28 66 F0 | 	shl	local06, #1
078c0     15 29 02 F1 | 	add	local06, local07
078c4     02 28 66 F0 | 	shl	local06, #2
078c8     03 00 00 FF 
078cc     00 E4 85 F1 | 	sub	objptr, ##1536
078d0     F2 28 02 F1 | 	add	local06, objptr
078d4     08 28 06 F1 | 	add	local06, #8
078d8     14 95 68 FC | 	wrlong	#74, local06
078dc     03 00 00 FF 
078e0     00 E4 05 F1 | 	add	objptr, ##1536
078e4     F2 2A 02 FB | 	rdlong	local07, objptr
078e8     15 29 02 F6 | 	mov	local06, local07
078ec     01 28 66 F0 | 	shl	local06, #1
078f0     15 29 02 F1 | 	add	local06, local07
078f4     02 28 66 F0 | 	shl	local06, #2
078f8     03 00 00 FF 
078fc     00 E4 85 F1 | 	sub	objptr, ##1536
07900     F2 28 02 F1 | 	add	local06, objptr
07904     14 01 68 FC | 	wrlong	#0, local06
07908     03 00 00 FF 
0790c     00 E4 05 F1 | 	add	objptr, ##1536
07910     F2 2A 02 FB | 	rdlong	local07, objptr
07914     01 2A 06 F1 | 	add	local07, #1
07918     F2 2A 62 FC | 	wrlong	local07, objptr
0791c     69 00 00 FF 
07920     50 E4 85 F1 | 	sub	objptr, ##53840
07924                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
07924                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
07924                 | ' 
07924                 | ' 
07924                 | ' return 0
07924     00 FA 05 F6 | 	mov	result1, #0
07928                 | LR__0627
07928     A7 F0 03 F6 | 	mov	ptra, fp
0792c     B2 00 A0 FD | 	call	#popregs_
07930                 | _compile_for_ret
07930     2D 00 64 FD | 	ret
07934                 | 
07934                 | ' 
07934                 | ' 
07934                 | ' sub do_for()
07934                 | _do_for
07934     05 4A 05 F6 | 	mov	COUNT_, #5
07938     A8 00 A0 FD | 	call	#pushregs_
0793c     78 00 00 FF 
07940     AC E5 05 F1 | 	add	objptr, ##61868
07944     F2 24 02 FB | 	rdlong	local04, objptr
07948     01 24 06 F1 | 	add	local04, #1
0794c     F2 24 62 FC | 	wrlong	local04, objptr
07950     78 00 00 FF 
07954     AC E5 85 F1 | 	sub	objptr, ##61868
07958     5C 1E B0 FD | 	call	#_pop
0795c     FD 1E 02 F6 | 	mov	local01, result1
07960     FE 20 02 F6 | 	mov	local02, result2
07964     FF 22 02 F6 | 	mov	local03, result3
07968     78 00 00 FF 
0796c     AC E5 05 F1 | 	add	objptr, ##61868
07970     F2 24 02 FB | 	rdlong	local04, objptr
07974     12 27 02 F6 | 	mov	local05, local04
07978     02 26 66 F0 | 	shl	local05, #2
0797c     12 27 02 F1 | 	add	local05, local04
07980     02 26 66 F0 | 	shl	local05, #2
07984     07 00 00 FF 
07988     40 E5 85 F1 | 	sub	objptr, ##3904
0798c     F2 26 02 F1 | 	add	local05, objptr
07990     08 26 06 F1 | 	add	local05, #8
07994     13 1F 62 FC | 	wrlong	local01, local05
07998     71 00 00 FF 
0799c     6C E4 85 F1 | 	sub	objptr, ##57964
079a0     14 1E B0 FD | 	call	#_pop
079a4     FD 1E 02 F6 | 	mov	local01, result1
079a8     FE 20 02 F6 | 	mov	local02, result2
079ac     FF 22 02 F6 | 	mov	local03, result3
079b0     78 00 00 FF 
079b4     AC E5 05 F1 | 	add	objptr, ##61868
079b8     F2 24 02 FB | 	rdlong	local04, objptr
079bc     12 27 02 F6 | 	mov	local05, local04
079c0     02 26 66 F0 | 	shl	local05, #2
079c4     12 27 02 F1 | 	add	local05, local04
079c8     02 26 66 F0 | 	shl	local05, #2
079cc     07 00 00 FF 
079d0     40 E5 85 F1 | 	sub	objptr, ##3904
079d4     F2 26 02 F1 | 	add	local05, objptr
079d8     0C 26 06 F1 | 	add	local05, #12
079dc     13 1F 62 FC | 	wrlong	local01, local05
079e0     71 00 00 FF 
079e4     6C E4 85 F1 | 	sub	objptr, ##57964
079e8     CC 1D B0 FD | 	call	#_pop
079ec     FD 1E 02 F6 | 	mov	local01, result1
079f0     FE 20 02 F6 | 	mov	local02, result2
079f4     FF 22 02 F6 | 	mov	local03, result3
079f8     78 00 00 FF 
079fc     AC E5 05 F1 | 	add	objptr, ##61868
07a00     F2 24 02 FB | 	rdlong	local04, objptr
07a04     12 27 02 F6 | 	mov	local05, local04
07a08     02 26 66 F0 | 	shl	local05, #2
07a0c     12 27 02 F1 | 	add	local05, local04
07a10     02 26 66 F0 | 	shl	local05, #2
07a14     07 00 00 FF 
07a18     40 E5 85 F1 | 	sub	objptr, ##3904
07a1c     F2 26 02 F1 | 	add	local05, objptr
07a20     10 26 06 F1 | 	add	local05, #16
07a24     13 1F 62 FC | 	wrlong	local01, local05
07a28                 | ' fortop+=1
07a28                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
07a28                 | ' 'if i> maxfor then printerror(36) : return
07a28                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
07a28                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
07a28                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
07a28                 | ' if compiledline(lineptr_e).result_type=token_end then
07a28     08 00 00 FF 
07a2c     18 E4 85 F1 | 	sub	objptr, ##4120
07a30     F2 1E 02 FB | 	rdlong	local01, objptr
07a34     0F 27 02 F6 | 	mov	local05, local01
07a38     01 26 66 F0 | 	shl	local05, #1
07a3c     0F 27 02 F1 | 	add	local05, local01
07a40     02 26 66 F0 | 	shl	local05, #2
07a44     03 00 00 FF 
07a48     04 E4 85 F1 | 	sub	objptr, ##1540
07a4c     F2 26 02 F1 | 	add	local05, objptr
07a50     08 26 06 F1 | 	add	local05, #8
07a54     13 27 02 FB | 	rdlong	local05, local05
07a58     FE 27 0E F2 | 	cmp	local05, #510 wz
07a5c     66 00 00 FF 
07a60     50 E4 85 F1 | 	sub	objptr, ##52304
07a64     70 00 90 5D |  if_ne	jmp	#LR__0630
07a68     78 00 00 FF 
07a6c     AC E5 05 F1 | 	add	objptr, ##61868
07a70     F2 1E 02 FB | 	rdlong	local01, objptr
07a74     0F 27 02 F6 | 	mov	local05, local01
07a78     02 26 66 F0 | 	shl	local05, #2
07a7c     0F 27 02 F1 | 	add	local05, local01
07a80     02 26 66 F0 | 	shl	local05, #2
07a84     07 00 00 FF 
07a88     40 E5 85 F1 | 	sub	objptr, ##3904
07a8c     F2 26 02 F1 | 	add	local05, objptr
07a90     07 00 00 FF 
07a94     18 E5 05 F1 | 	add	objptr, ##3864
07a98     F2 1E 02 FB | 	rdlong	local01, objptr
07a9c     13 1F 62 FC | 	wrlong	local01, local05
07aa0     28 E4 05 F1 | 	add	objptr, #40
07aa4     F2 1E 02 FB | 	rdlong	local01, objptr
07aa8     0F 27 02 F6 | 	mov	local05, local01
07aac     02 26 66 F0 | 	shl	local05, #2
07ab0     0F 27 02 F1 | 	add	local05, local01
07ab4     02 26 66 F0 | 	shl	local05, #2
07ab8     07 00 00 FF 
07abc     40 E5 85 F1 | 	sub	objptr, ##3904
07ac0     F2 26 02 F1 | 	add	local05, objptr
07ac4     04 26 06 F1 | 	add	local05, #4
07ac8     13 01 68 FC | 	wrlong	#0, local05
07acc     71 00 00 FF 
07ad0     6C E4 85 F1 | 	sub	objptr, ##57964
07ad4     7C 00 90 FD | 	jmp	#LR__0631
07ad8                 | LR__0630
07ad8     78 00 00 FF 
07adc     AC E5 05 F1 | 	add	objptr, ##61868
07ae0     F2 1E 02 FB | 	rdlong	local01, objptr
07ae4     0F 27 02 F6 | 	mov	local05, local01
07ae8     02 26 66 F0 | 	shl	local05, #2
07aec     0F 27 02 F1 | 	add	local05, local01
07af0     02 26 66 F0 | 	shl	local05, #2
07af4     07 00 00 FF 
07af8     40 E5 85 F1 | 	sub	objptr, ##3904
07afc     F2 26 02 F1 | 	add	local05, objptr
07b00     07 00 00 FF 
07b04     20 E5 05 F1 | 	add	objptr, ##3872
07b08     F2 1E 02 FB | 	rdlong	local01, objptr
07b0c     13 1F 62 FC | 	wrlong	local01, local05
07b10     20 E4 05 F1 | 	add	objptr, #32
07b14     F2 1E 02 FB | 	rdlong	local01, objptr
07b18     0F 27 02 F6 | 	mov	local05, local01
07b1c     02 26 66 F0 | 	shl	local05, #2
07b20     0F 27 02 F1 | 	add	local05, local01
07b24     02 26 66 F0 | 	shl	local05, #2
07b28     07 00 00 FF 
07b2c     40 E5 85 F1 | 	sub	objptr, ##3904
07b30     F2 26 02 F1 | 	add	local05, objptr
07b34     08 00 00 FF 
07b38     18 E4 85 F1 | 	sub	objptr, ##4120
07b3c     F2 1E 02 FB | 	rdlong	local01, objptr
07b40     69 00 00 FF 
07b44     54 E4 85 F1 | 	sub	objptr, ##53844
07b48     01 1E 06 F1 | 	add	local01, #1
07b4c     04 26 06 F1 | 	add	local05, #4
07b50     13 1F 62 FC | 	wrlong	local01, local05
07b54                 | LR__0631
07b54     A7 F0 03 F6 | 	mov	ptra, fp
07b58     B2 00 A0 FD | 	call	#popregs_
07b5c                 | _do_for_ret
07b5c     2D 00 64 FD | 	ret
07b60                 | 
07b60                 | ' 
07b60                 | ' ' now do_next todo
07b60                 | ' 
07b60                 | ' sub do_next()
07b60                 | _do_next
07b60     04 4A 05 F6 | 	mov	COUNT_, #4
07b64     A8 00 A0 FD | 	call	#pushregs_
07b68     4C 1C B0 FD | 	call	#_pop
07b6c     FD 1E 02 F6 | 	mov	local01, result1
07b70     FE 20 02 F6 | 	mov	local02, result2
07b74     FF 22 02 F6 | 	mov	local03, result3
07b78                 | ' 
07b78                 | ' t1=pop() :varnum=t1.result.uresult
07b78                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
07b78     78 00 00 FF 
07b7c     AC E5 05 F1 | 	add	objptr, ##61868
07b80     F2 12 02 FB | 	rdlong	arg01, objptr
07b84     09 25 02 F6 | 	mov	local04, arg01
07b88     02 24 66 F0 | 	shl	local04, #2
07b8c     09 25 02 F1 | 	add	local04, arg01
07b90     02 24 66 F0 | 	shl	local04, #2
07b94     07 00 00 FF 
07b98     40 E5 85 F1 | 	sub	objptr, ##3904
07b9c     F2 24 02 F1 | 	add	local04, objptr
07ba0     08 24 06 F1 | 	add	local04, #8
07ba4     12 25 02 FB | 	rdlong	local04, local04
07ba8     0F 25 0A F2 | 	cmp	local04, local01 wz
07bac     71 00 00 FF 
07bb0     6C E4 85 F1 | 	sub	objptr, ##57964
07bb4     0C 00 90 AD |  if_e	jmp	#LR__0640
07bb8     25 12 06 F6 | 	mov	arg01, #37
07bbc     CC DA B0 FD | 	call	#_printerror
07bc0     28 02 90 FD | 	jmp	#LR__0644
07bc4                 | LR__0640
07bc4     78 00 00 FF 
07bc8     AC E5 05 F1 | 	add	objptr, ##61868
07bcc     F2 12 02 FB | 	rdlong	arg01, objptr
07bd0     09 25 02 F6 | 	mov	local04, arg01
07bd4     02 24 66 F0 | 	shl	local04, #2
07bd8     09 25 02 F1 | 	add	local04, arg01
07bdc     02 24 66 F0 | 	shl	local04, #2
07be0     07 00 00 FF 
07be4     40 E5 85 F1 | 	sub	objptr, ##3904
07be8     F2 24 02 F1 | 	add	local04, objptr
07bec     0C 24 06 F1 | 	add	local04, #12
07bf0     12 25 02 FB | 	rdlong	local04, local04
07bf4     0F 13 02 F6 | 	mov	arg01, local01
07bf8     04 12 66 F0 | 	shl	arg01, #4
07bfc     3D 00 00 FF 
07c00     90 E4 85 F1 | 	sub	objptr, ##31376
07c04     F2 12 02 F1 | 	add	arg01, objptr
07c08     0F FF 01 F6 | 	mov	result3, local01
07c0c     04 FE 65 F0 | 	shl	result3, #4
07c10     F2 FE 01 F1 | 	add	result3, objptr
07c14     04 FE 05 F1 | 	add	result3, #4
07c18     FF FE 01 FB | 	rdlong	result3, result3
07c1c     12 FF 01 F1 | 	add	result3, local04
07c20     04 12 06 F1 | 	add	arg01, #4
07c24     09 FF 61 FC | 	wrlong	result3, arg01
07c28                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
07c28                 | ' if fortable(fortop).stepval>=0 then
07c28     44 00 00 FF 
07c2c     D0 E5 05 F1 | 	add	objptr, ##35280
07c30     F2 12 02 FB | 	rdlong	arg01, objptr
07c34     09 25 02 F6 | 	mov	local04, arg01
07c38     02 24 66 F0 | 	shl	local04, #2
07c3c     09 25 02 F1 | 	add	local04, arg01
07c40     02 24 66 F0 | 	shl	local04, #2
07c44     07 00 00 FF 
07c48     40 E5 85 F1 | 	sub	objptr, ##3904
07c4c     F2 24 02 F1 | 	add	local04, objptr
07c50     0C 24 06 F1 | 	add	local04, #12
07c54     12 25 02 FB | 	rdlong	local04, local04
07c58     00 24 56 F2 | 	cmps	local04, #0 wc
07c5c     71 00 00 FF 
07c60     6C E4 85 F1 | 	sub	objptr, ##57964
07c64     78 00 90 CD |  if_b	jmp	#LR__0641
07c68                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
07c68     04 1E 66 F0 | 	shl	local01, #4
07c6c     33 00 00 FF 
07c70     DC E5 05 F1 | 	add	objptr, ##26588
07c74     F2 1E 02 F1 | 	add	local01, objptr
07c78     44 00 00 FF 
07c7c     D0 E5 05 F1 | 	add	objptr, ##35280
07c80     F2 24 02 FB | 	rdlong	local04, objptr
07c84     12 13 02 F6 | 	mov	arg01, local04
07c88     02 12 66 F0 | 	shl	arg01, #2
07c8c     12 13 02 F1 | 	add	arg01, local04
07c90     02 12 66 F0 | 	shl	arg01, #2
07c94     07 00 00 FF 
07c98     40 E5 85 F1 | 	sub	objptr, ##3904
07c9c     F2 12 02 F1 | 	add	arg01, objptr
07ca0     04 1E 06 F1 | 	add	local01, #4
07ca4     0F 25 02 FB | 	rdlong	local04, local01
07ca8     10 12 06 F1 | 	add	arg01, #16
07cac     09 13 02 FB | 	rdlong	arg01, arg01
07cb0     09 25 5A F2 | 	cmps	local04, arg01 wcz
07cb4     71 00 00 FF 
07cb8     6C E4 85 F1 | 	sub	objptr, ##57964
07cbc     9C 00 90 ED |  if_be	jmp	#LR__0643
07cc0     78 00 00 FF 
07cc4     AC E5 05 F1 | 	add	objptr, ##61868
07cc8     F2 24 02 FB | 	rdlong	local04, objptr
07ccc     01 24 86 F1 | 	sub	local04, #1
07cd0     F2 24 62 FC | 	wrlong	local04, objptr
07cd4     78 00 00 FF 
07cd8     AC E5 85 F1 | 	sub	objptr, ##61868
07cdc     0C 01 90 FD | 	jmp	#LR__0644
07ce0                 | LR__0641
07ce0                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
07ce0     0F 13 02 F6 | 	mov	arg01, local01
07ce4     04 12 66 F0 | 	shl	arg01, #4
07ce8     33 00 00 FF 
07cec     DC E5 05 F1 | 	add	objptr, ##26588
07cf0     F2 12 02 F1 | 	add	arg01, objptr
07cf4     44 00 00 FF 
07cf8     D0 E5 05 F1 | 	add	objptr, ##35280
07cfc     F2 24 02 FB | 	rdlong	local04, objptr
07d00     12 1F 02 F6 | 	mov	local01, local04
07d04     02 1E 66 F0 | 	shl	local01, #2
07d08     12 1F 02 F1 | 	add	local01, local04
07d0c     02 1E 66 F0 | 	shl	local01, #2
07d10     07 00 00 FF 
07d14     40 E5 85 F1 | 	sub	objptr, ##3904
07d18     F2 1E 02 F1 | 	add	local01, objptr
07d1c     04 12 06 F1 | 	add	arg01, #4
07d20     09 13 02 FB | 	rdlong	arg01, arg01
07d24     10 1E 06 F1 | 	add	local01, #16
07d28     0F 1F 02 FB | 	rdlong	local01, local01
07d2c     0F 13 52 F2 | 	cmps	arg01, local01 wc
07d30     71 00 00 FF 
07d34     6C E4 85 F1 | 	sub	objptr, ##57964
07d38     20 00 90 3D |  if_ae	jmp	#LR__0642
07d3c     78 00 00 FF 
07d40     AC E5 05 F1 | 	add	objptr, ##61868
07d44     F2 24 02 FB | 	rdlong	local04, objptr
07d48     01 24 86 F1 | 	sub	local04, #1
07d4c     F2 24 62 FC | 	wrlong	local04, objptr
07d50     78 00 00 FF 
07d54     AC E5 85 F1 | 	sub	objptr, ##61868
07d58     90 00 90 FD | 	jmp	#LR__0644
07d5c                 | LR__0642
07d5c                 | LR__0643
07d5c     78 00 00 FF 
07d60     AC E5 05 F1 | 	add	objptr, ##61868
07d64     F2 1E 02 FB | 	rdlong	local01, objptr
07d68     0F 25 02 F6 | 	mov	local04, local01
07d6c     02 24 66 F0 | 	shl	local04, #2
07d70     0F 25 02 F1 | 	add	local04, local01
07d74     02 24 66 F0 | 	shl	local04, #2
07d78     07 00 00 FF 
07d7c     40 E5 85 F1 | 	sub	objptr, ##3904
07d80     F2 24 02 F1 | 	add	local04, objptr
07d84     12 25 02 FB | 	rdlong	local04, local04
07d88     07 00 00 FF 
07d8c     18 E5 05 F1 | 	add	objptr, ##3864
07d90     F2 24 62 FC | 	wrlong	local04, objptr
07d94     28 E4 05 F1 | 	add	objptr, #40
07d98     F2 1E 02 FB | 	rdlong	local01, objptr
07d9c     0F 25 02 F6 | 	mov	local04, local01
07da0     02 24 66 F0 | 	shl	local04, #2
07da4     0F 25 02 F1 | 	add	local04, local01
07da8     02 24 66 F0 | 	shl	local04, #2
07dac     07 00 00 FF 
07db0     40 E5 85 F1 | 	sub	objptr, ##3904
07db4     F2 24 02 F1 | 	add	local04, objptr
07db8     04 24 06 F1 | 	add	local04, #4
07dbc     12 25 02 FB | 	rdlong	local04, local04
07dc0     07 00 00 FF 
07dc4     1C E5 05 F1 | 	add	objptr, ##3868
07dc8     F2 24 62 FC | 	wrlong	local04, objptr
07dcc     0F 00 00 FF 
07dd0     38 E5 85 F1 | 	sub	objptr, ##7992
07dd4     F2 24 02 FB | 	rdlong	local04, objptr
07dd8     01 24 86 F1 | 	sub	local04, #1
07ddc     04 E4 05 F1 | 	add	objptr, #4
07de0     F2 24 62 FC | 	wrlong	local04, objptr
07de4     69 00 00 FF 
07de8     54 E4 85 F1 | 	sub	objptr, ##53844
07dec                 | LR__0644
07dec     A7 F0 03 F6 | 	mov	ptra, fp
07df0     B2 00 A0 FD | 	call	#popregs_
07df4                 | _do_next_ret
07df4     2D 00 64 FD | 	ret
07df8                 | 
07df8                 | ' 
07df8                 | ' 
07df8                 | ' function compile_next() as ulong
07df8                 | _compile_next
07df8     04 4A 05 F6 | 	mov	COUNT_, #4
07dfc     A8 00 A0 FD | 	call	#pushregs_
07e00     56 00 00 FF 
07e04     18 E4 05 F1 | 	add	objptr, ##44056
07e08     F2 12 02 FB | 	rdlong	arg01, objptr
07e0c     03 12 66 F0 | 	shl	arg01, #3
07e10     02 00 00 FF 
07e14     38 E4 85 F1 | 	sub	objptr, ##1080
07e18     F2 12 02 F1 | 	add	arg01, objptr
07e1c     09 1F 02 FB | 	rdlong	local01, arg01
07e20                 | ' 
07e20                 | ' varname$=lparts(ct).part$ 
07e20                 | ' 'suffix$=right$(varname$,1)
07e20                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
07e20                 | ' if varnum=0 then compile_error(35)  : return 35
07e20     04 E4 85 F1 | 	sub	objptr, #4
07e24     F2 14 0A FB | 	rdlong	arg02, objptr wz
07e28     53 00 00 FF 
07e2c     DC E5 85 F1 | 	sub	objptr, ##42972
07e30     10 00 90 5D |  if_ne	jmp	#LR__0650
07e34     23 12 06 F6 | 	mov	arg01, #35
07e38     78 E1 BF FD | 	call	#_compile_error
07e3c     23 FA 05 F6 | 	mov	result1, #35
07e40     58 01 90 FD | 	jmp	#LR__0654
07e44                 | LR__0650
07e44     01 20 66 F6 | 	neg	local02, #1
07e48                 | ' j=-1
07e48                 | ' for i=0 to varnum-1
07e48     00 22 06 F6 | 	mov	local03, #0
07e4c     53 00 00 FF 
07e50     DC E5 05 F1 | 	add	objptr, ##42972
07e54     F2 24 02 FB | 	rdlong	local04, objptr
07e58     53 00 00 FF 
07e5c     DC E5 85 F1 | 	sub	objptr, ##42972
07e60                 | LR__0651
07e60     12 23 12 F2 | 	cmp	local03, local04 wc
07e64     38 00 90 3D |  if_ae	jmp	#LR__0652
07e68                 | '   if variables(i).name=varname$ then j=i : exit
07e68     11 15 02 F6 | 	mov	arg02, local03
07e6c     04 14 66 F0 | 	shl	arg02, #4
07e70     33 00 00 FF 
07e74     DC E5 05 F1 | 	add	objptr, ##26588
07e78     F2 14 02 F1 | 	add	arg02, objptr
07e7c     0A 13 02 FB | 	rdlong	arg01, arg02
07e80     0F 15 02 F6 | 	mov	arg02, local01
07e84     33 00 00 FF 
07e88     DC E5 85 F1 | 	sub	objptr, ##26588
07e8c     48 0D B1 FD | 	call	#__system___string_cmp
07e90     00 FA 0D F2 | 	cmp	result1, #0 wz
07e94     11 21 02 A6 |  if_e	mov	local02, local03
07e98     01 22 06 51 |  if_ne	add	local03, #1
07e9c     C0 FF 9F 5D |  if_ne	jmp	#LR__0651
07ea0                 | LR__0652
07ea0                 | ' if j=-1 then compile_error(35) : return 35
07ea0     FF FF 7F FF 
07ea4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
07ea8     10 00 90 5D |  if_ne	jmp	#LR__0653
07eac     23 12 06 F6 | 	mov	arg01, #35
07eb0     00 E1 BF FD | 	call	#_compile_error
07eb4     23 FA 05 F6 | 	mov	result1, #35
07eb8     E0 00 90 FD | 	jmp	#LR__0654
07ebc                 | LR__0653
07ebc     69 00 00 FF 
07ec0     50 E4 05 F1 | 	add	objptr, ##53840
07ec4     F2 24 02 FB | 	rdlong	local04, objptr
07ec8     12 23 02 F6 | 	mov	local03, local04
07ecc     01 22 66 F0 | 	shl	local03, #1
07ed0     12 23 02 F1 | 	add	local03, local04
07ed4     02 22 66 F0 | 	shl	local03, #2
07ed8     03 00 00 FF 
07edc     00 E4 85 F1 | 	sub	objptr, ##1536
07ee0     F2 22 02 F1 | 	add	local03, objptr
07ee4     08 22 06 F1 | 	add	local03, #8
07ee8     11 39 68 FC | 	wrlong	#28, local03
07eec     03 00 00 FF 
07ef0     00 E4 05 F1 | 	add	objptr, ##1536
07ef4     F2 24 02 FB | 	rdlong	local04, objptr
07ef8     12 23 02 F6 | 	mov	local03, local04
07efc     01 22 66 F0 | 	shl	local03, #1
07f00     12 23 02 F1 | 	add	local03, local04
07f04     02 22 66 F0 | 	shl	local03, #2
07f08     03 00 00 FF 
07f0c     00 E4 85 F1 | 	sub	objptr, ##1536
07f10     F2 22 02 F1 | 	add	local03, objptr
07f14     11 21 62 FC | 	wrlong	local02, local03
07f18     03 00 00 FF 
07f1c     00 E4 05 F1 | 	add	objptr, ##1536
07f20     F2 24 02 FB | 	rdlong	local04, objptr
07f24     01 24 06 F1 | 	add	local04, #1
07f28     F2 24 62 FC | 	wrlong	local04, objptr
07f2c     12 23 02 F6 | 	mov	local03, local04
07f30     01 22 66 F0 | 	shl	local03, #1
07f34     12 23 02 F1 | 	add	local03, local04
07f38     02 22 66 F0 | 	shl	local03, #2
07f3c     03 00 00 FF 
07f40     00 E4 85 F1 | 	sub	objptr, ##1536
07f44     F2 22 02 F1 | 	add	local03, objptr
07f48     08 22 06 F1 | 	add	local03, #8
07f4c     11 97 68 FC | 	wrlong	#75, local03
07f50     03 00 00 FF 
07f54     00 E4 05 F1 | 	add	objptr, ##1536
07f58     F2 24 02 FB | 	rdlong	local04, objptr
07f5c     12 23 02 F6 | 	mov	local03, local04
07f60     01 22 66 F0 | 	shl	local03, #1
07f64     12 23 02 F1 | 	add	local03, local04
07f68     02 22 66 F0 | 	shl	local03, #2
07f6c     03 00 00 FF 
07f70     00 E4 85 F1 | 	sub	objptr, ##1536
07f74     F2 22 02 F1 | 	add	local03, objptr
07f78     11 01 68 FC | 	wrlong	#0, local03
07f7c     03 00 00 FF 
07f80     00 E4 05 F1 | 	add	objptr, ##1536
07f84     F2 24 02 FB | 	rdlong	local04, objptr
07f88     01 24 06 F1 | 	add	local04, #1
07f8c     F2 24 62 FC | 	wrlong	local04, objptr
07f90     69 00 00 FF 
07f94     50 E4 85 F1 | 	sub	objptr, ##53840
07f98                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
07f98                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
07f98                 | ' return 0
07f98     00 FA 05 F6 | 	mov	result1, #0
07f9c                 | LR__0654
07f9c     A7 F0 03 F6 | 	mov	ptra, fp
07fa0     B2 00 A0 FD | 	call	#popregs_
07fa4                 | _compile_next_ret
07fa4     2D 00 64 FD | 	ret
07fa8                 | 
07fa8                 | ' 
07fa8                 | ' 
07fa8                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
07fa8                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
07fa8                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
07fa8                 | ' 
07fa8                 | ' 
07fa8                 | ' function compile_goto( ) as ulong
07fa8                 | _compile_goto
07fa8     03 4A 05 F6 | 	mov	COUNT_, #3
07fac     A8 00 A0 FD | 	call	#pushregs_
07fb0     28 F0 07 F1 | 	add	ptra, #40
07fb4                 | ' 
07fb4                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
07fb4     56 00 00 FF 
07fb8     18 E4 05 F1 | 	add	objptr, ##44056
07fbc     F2 16 02 FB | 	rdlong	arg03, objptr
07fc0     03 16 66 F0 | 	shl	arg03, #3
07fc4     02 00 00 FF 
07fc8     38 E4 85 F1 | 	sub	objptr, ##1080
07fcc     F2 16 02 F1 | 	add	arg03, objptr
07fd0     04 16 06 F1 | 	add	arg03, #4
07fd4     0B 17 02 FB | 	rdlong	arg03, arg03
07fd8     01 00 00 FF 
07fdc     00 16 0E F2 | 	cmp	arg03, ##512 wz
07fe0     53 00 00 FF 
07fe4     E0 E5 85 F1 | 	sub	objptr, ##42976
07fe8     CC 02 90 5D |  if_ne	jmp	#LR__0665
07fec     56 00 00 FF 
07ff0     18 E4 05 F1 | 	add	objptr, ##44056
07ff4     F2 16 02 FB | 	rdlong	arg03, objptr
07ff8     01 16 06 F1 | 	add	arg03, #1
07ffc     03 16 66 F0 | 	shl	arg03, #3
08000     02 00 00 FF 
08004     38 E4 85 F1 | 	sub	objptr, ##1080
08008     F2 16 02 F1 | 	add	arg03, objptr
0800c     04 16 06 F1 | 	add	arg03, #4
08010     0B 17 02 FB | 	rdlong	arg03, arg03
08014     FE 17 0E F2 | 	cmp	arg03, #510 wz
08018     53 00 00 FF 
0801c     E0 E5 85 F1 | 	sub	objptr, ##42976
08020     94 02 90 5D |  if_ne	jmp	#LR__0665
08024     56 00 00 FF 
08028     18 E4 05 F1 | 	add	objptr, ##44056
0802c     F2 16 02 FB | 	rdlong	arg03, objptr
08030     03 16 66 F0 | 	shl	arg03, #3
08034     02 00 00 FF 
08038     38 E4 85 F1 | 	sub	objptr, ##1080
0803c     F2 16 02 F1 | 	add	arg03, objptr
08040     0B 13 02 FB | 	rdlong	arg01, arg03
08044     00 14 06 F6 | 	mov	arg02, #0
08048     53 00 00 FF 
0804c     E0 E5 85 F1 | 	sub	objptr, ##42976
08050     C0 3C B1 FD | 	call	#__system____builtin_atoi
08054     04 4E 05 F1 | 	add	fp, #4
08058     A7 FA 61 FC | 	wrlong	result1, fp
0805c     69 00 00 FF 
08060     50 E4 05 F1 | 	add	objptr, ##53840
08064     F2 1E 02 FB | 	rdlong	local01, objptr
08068     0F 21 02 F6 | 	mov	local02, local01
0806c     01 20 66 F0 | 	shl	local02, #1
08070     0F 21 02 F1 | 	add	local02, local01
08074     02 20 66 F0 | 	shl	local02, #2
08078     03 00 00 FF 
0807c     00 E4 85 F1 | 	sub	objptr, ##1536
08080     F2 20 02 F1 | 	add	local02, objptr
08084     08 20 06 F1 | 	add	local02, #8
08088     10 9D 68 FC | 	wrlong	#78, local02
0808c     03 00 00 FF 
08090     08 E4 05 F1 | 	add	objptr, ##1544
08094     F2 22 02 FB | 	rdlong	local03, objptr
08098     69 00 00 FF 
0809c     58 E4 85 F1 | 	sub	objptr, ##53848
080a0     04 4E 05 F1 | 	add	fp, #4
080a4     A7 22 62 FC | 	wrlong	local03, fp
080a8     08 4E 85 F1 | 	sub	fp, #8
080ac                 | ' 
080ac                 | '   gotoline=val%(lparts(ct).part$) 
080ac                 | '   compiledline(lineptr).result_type=token_fast_goto
080ac                 | ' ' now find a pointer to goto
080ac                 | '   gotoptr=programstart
080ac                 | '   do
080ac                 | LR__0660
080ac     10 4E 05 F1 | 	add	fp, #16
080b0     A7 12 02 F6 | 	mov	arg01, fp
080b4     08 4E 85 F1 | 	sub	fp, #8
080b8     A7 14 02 FB | 	rdlong	arg02, fp
080bc     08 4E 85 F1 | 	sub	fp, #8
080c0     18 16 06 F6 | 	mov	arg03, #24
080c4     0B 00 00 FF 
080c8     C0 E4 05 F1 | 	add	objptr, ##5824
080cc     F0 FF B0 FD | 	call	#_psram_spin2_read1
080d0     0B 00 00 FF 
080d4     C0 E4 85 F1 | 	sub	objptr, ##5824
080d8                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
080d8                 | '     if gotoheader(0)<>$FFFFFFFF then
080d8     10 4E 05 F1 | 	add	fp, #16
080dc     A7 22 02 FB | 	rdlong	local03, fp
080e0     10 4E 85 F1 | 	sub	fp, #16
080e4     FF FF 7F FF 
080e8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
080ec     24 00 90 AD |  if_e	jmp	#LR__0661
080f0     08 4E 05 F1 | 	add	fp, #8
080f4     A7 22 02 FB | 	rdlong	local03, fp
080f8     04 4E 05 F1 | 	add	fp, #4
080fc     A7 22 62 FC | 	wrlong	local03, fp
08100     18 4E 05 F1 | 	add	fp, #24
08104     A7 22 02 FB | 	rdlong	local03, fp
08108     1C 4E 85 F1 | 	sub	fp, #28
0810c     A7 22 62 FC | 	wrlong	local03, fp
08110     08 4E 85 F1 | 	sub	fp, #8
08114                 | LR__0661
08114     24 4E 05 F1 | 	add	fp, #36
08118     A7 22 02 FB | 	rdlong	local03, fp
0811c     24 4E 85 F1 | 	sub	fp, #36
08120     FF FF 3F FF 
08124     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08128     10 4E 05 51 |  if_ne	add	fp, #16
0812c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
08130     10 4E 85 51 |  if_ne	sub	fp, #16
08134     FF FF 7F 5F 
08138     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0813c     1C 00 90 AD |  if_e	jmp	#LR__0662
08140     10 4E 05 F1 | 	add	fp, #16
08144     A7 22 02 FB | 	rdlong	local03, fp
08148     0C 4E 85 F1 | 	sub	fp, #12
0814c     A7 20 02 FB | 	rdlong	local02, fp
08150     04 4E 85 F1 | 	sub	fp, #4
08154     10 23 0A F2 | 	cmp	local03, local02 wz
08158     50 FF 9F 5D |  if_ne	jmp	#LR__0660
0815c                 | LR__0662
0815c                 | '   if gotoheader(0)=gotoline then
0815c     10 4E 05 F1 | 	add	fp, #16
08160     A7 22 02 FB | 	rdlong	local03, fp
08164     0C 4E 85 F1 | 	sub	fp, #12
08168     A7 1E 02 FB | 	rdlong	local01, fp
0816c     04 4E 85 F1 | 	sub	fp, #4
08170     0F 23 0A F2 | 	cmp	local03, local01 wz
08174     7C 00 90 5D |  if_ne	jmp	#LR__0663
08178     69 00 00 FF 
0817c     50 E4 05 F1 | 	add	objptr, ##53840
08180     F2 1E 02 FB | 	rdlong	local01, objptr
08184     0F 21 02 F6 | 	mov	local02, local01
08188     01 20 66 F0 | 	shl	local02, #1
0818c     0F 21 02 F1 | 	add	local02, local01
08190     02 20 66 F0 | 	shl	local02, #2
08194     03 00 00 FF 
08198     00 E4 85 F1 | 	sub	objptr, ##1536
0819c     F2 20 02 F1 | 	add	local02, objptr
081a0     0C 4E 05 F1 | 	add	fp, #12
081a4     A7 22 02 FB | 	rdlong	local03, fp
081a8     10 23 62 FC | 	wrlong	local03, local02
081ac     03 00 00 FF 
081b0     00 E4 05 F1 | 	add	objptr, ##1536
081b4     F2 1E 02 FB | 	rdlong	local01, objptr
081b8     0F 21 02 F6 | 	mov	local02, local01
081bc     01 20 66 F0 | 	shl	local02, #1
081c0     0F 21 02 F1 | 	add	local02, local01
081c4     02 20 66 F0 | 	shl	local02, #2
081c8     03 00 00 FF 
081cc     00 E4 85 F1 | 	sub	objptr, ##1536
081d0     F2 20 02 F1 | 	add	local02, objptr
081d4     08 4E 85 F1 | 	sub	fp, #8
081d8     A7 22 02 FB | 	rdlong	local03, fp
081dc     04 4E 85 F1 | 	sub	fp, #4
081e0     04 20 06 F1 | 	add	local02, #4
081e4     10 23 62 FC | 	wrlong	local03, local02
081e8     66 00 00 FF 
081ec     50 E4 85 F1 | 	sub	objptr, ##52304
081f0     A4 00 90 FD | 	jmp	#LR__0664
081f4                 | LR__0663
081f4     69 00 00 FF 
081f8     50 E4 05 F1 | 	add	objptr, ##53840
081fc     F2 1E 02 FB | 	rdlong	local01, objptr
08200     0F 21 02 F6 | 	mov	local02, local01
08204     01 20 66 F0 | 	shl	local02, #1
08208     0F 21 02 F1 | 	add	local02, local01
0820c     02 20 66 F0 | 	shl	local02, #2
08210     03 00 00 FF 
08214     00 E4 85 F1 | 	sub	objptr, ##1536
08218     F2 20 02 F1 | 	add	local02, objptr
0821c     00 00 C0 FF 
08220     10 01 68 FC | 	wrlong	##-2147483648, local02
08224     03 00 00 FF 
08228     00 E4 05 F1 | 	add	objptr, ##1536
0822c     F2 1E 02 FB | 	rdlong	local01, objptr
08230     0F 21 02 F6 | 	mov	local02, local01
08234     01 20 66 F0 | 	shl	local02, #1
08238     0F 21 02 F1 | 	add	local02, local01
0823c     02 20 66 F0 | 	shl	local02, #2
08240     03 00 00 FF 
08244     00 E4 85 F1 | 	sub	objptr, ##1536
08248     F2 20 02 F1 | 	add	local02, objptr
0824c     04 4E 05 F1 | 	add	fp, #4
08250     A7 22 02 FB | 	rdlong	local03, fp
08254     04 4E 85 F1 | 	sub	fp, #4
08258     04 20 06 F1 | 	add	local02, #4
0825c     10 23 62 FC | 	wrlong	local03, local02
08260     03 00 00 FF 
08264     00 E4 05 F1 | 	add	objptr, ##1536
08268     F2 1E 02 FB | 	rdlong	local01, objptr
0826c     0F 21 02 F6 | 	mov	local02, local01
08270     01 20 66 F0 | 	shl	local02, #1
08274     0F 21 02 F1 | 	add	local02, local01
08278     02 20 66 F0 | 	shl	local02, #2
0827c     03 00 00 FF 
08280     00 E4 85 F1 | 	sub	objptr, ##1536
08284     F2 20 02 F1 | 	add	local02, objptr
08288     08 20 06 F1 | 	add	local02, #8
0828c     10 A7 68 FC | 	wrlong	#83, local02
08290     66 00 00 FF 
08294     50 E4 85 F1 | 	sub	objptr, ##52304
08298                 | LR__0664
08298     69 00 00 FF 
0829c     50 E4 05 F1 | 	add	objptr, ##53840
082a0     F2 22 02 FB | 	rdlong	local03, objptr
082a4     01 22 06 F1 | 	add	local03, #1
082a8     F2 22 62 FC | 	wrlong	local03, objptr
082ac     69 00 00 FF 
082b0     50 E4 85 F1 | 	sub	objptr, ##53840
082b4     40 00 90 FD | 	jmp	#LR__0666
082b8                 | LR__0665
082b8                 | '    print "We have a slow goto, todo  "
082b8     00 12 06 F6 | 	mov	arg01, #0
082bc     F4 61 B1 FD | 	call	#__system___getiolock_0423
082c0     FD 12 02 F6 | 	mov	arg01, result1
082c4     E8 08 B1 FD | 	call	#__system___lockmem
082c8     42 01 00 FF 
082cc     66 15 06 F6 | 	mov	arg02, ##@LR__4554
082d0     00 12 06 F6 | 	mov	arg01, #0
082d4     00 16 06 F6 | 	mov	arg03, #0
082d8     C8 15 B1 FD | 	call	#__system___basic_print_string
082dc     00 12 06 F6 | 	mov	arg01, #0
082e0     0A 14 06 F6 | 	mov	arg02, #10
082e4     00 16 06 F6 | 	mov	arg03, #0
082e8     60 15 B1 FD | 	call	#__system___basic_print_char
082ec     00 12 06 F6 | 	mov	arg01, #0
082f0     C0 61 B1 FD | 	call	#__system___getiolock_0423
082f4     FD 00 68 FC | 	wrlong	#0, result1
082f8                 | LR__0666
082f8                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
082f8                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
082f8                 | ' return 0
082f8     00 FA 05 F6 | 	mov	result1, #0
082fc     A7 F0 03 F6 | 	mov	ptra, fp
08300     B2 00 A0 FD | 	call	#popregs_
08304                 | _compile_goto_ret
08304     2D 00 64 FD | 	ret
08308                 | 
08308                 | ' 
08308                 | ' 
08308                 | ' 
08308                 | ' 
08308                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08308                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
08308                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08308                 | ' 
08308                 | ' 
08308                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08308                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
08308                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08308                 | ' 
08308                 | ' 
08308                 | ' function expr() as integer 
08308                 | _expr
08308     07 4A 05 F6 | 	mov	COUNT_, #7
0830c     A8 00 A0 FD | 	call	#pushregs_
08310                 | _expr_enter
08310     56 00 00 FF 
08314     18 E4 05 F1 | 	add	objptr, ##44056
08318     F2 24 02 FB | 	rdlong	local04, objptr
0831c     03 24 66 F0 | 	shl	local04, #3
08320     02 00 00 FF 
08324     38 E4 85 F1 | 	sub	objptr, ##1080
08328     F2 24 02 F1 | 	add	local04, objptr
0832c     04 24 06 F1 | 	add	local04, #4
08330     12 27 02 FB | 	rdlong	local05, local04
08334                 | ' 
08334                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
08334     FE 27 0E F2 | 	cmp	local05, #510 wz
08338     53 00 00 FF 
0833c     E0 E5 85 F1 | 	sub	objptr, ##42976
08340     C4 00 90 5D |  if_ne	jmp	#LR__0670
08344     1D 1E 06 F6 | 	mov	local01, #29
08348     FF 22 06 F6 | 	mov	local03, #255
0834c     0F 29 02 F6 | 	mov	local06, local01
08350     10 2B 02 F6 | 	mov	local07, local02
08354     11 1F 02 F6 | 	mov	local01, local03
08358     69 00 00 FF 
0835c     50 E4 05 F1 | 	add	objptr, ##53840
08360     F2 26 02 FB | 	rdlong	local05, objptr
08364     13 25 02 F6 | 	mov	local04, local05
08368     01 24 66 F0 | 	shl	local04, #1
0836c     13 25 02 F1 | 	add	local04, local05
08370     02 24 66 F0 | 	shl	local04, #2
08374     03 00 00 FF 
08378     00 E4 85 F1 | 	sub	objptr, ##1536
0837c     F2 24 02 F1 | 	add	local04, objptr
08380     12 29 62 FC | 	wrlong	local06, local04
08384     03 00 00 FF 
08388     00 E4 05 F1 | 	add	objptr, ##1536
0838c     F2 28 02 FB | 	rdlong	local06, objptr
08390     14 27 02 F6 | 	mov	local05, local06
08394     01 26 66 F0 | 	shl	local05, #1
08398     14 27 02 F1 | 	add	local05, local06
0839c     02 26 66 F0 | 	shl	local05, #2
083a0     03 00 00 FF 
083a4     00 E4 85 F1 | 	sub	objptr, ##1536
083a8     F2 26 02 F1 | 	add	local05, objptr
083ac     04 26 06 F1 | 	add	local05, #4
083b0     13 2B 62 FC | 	wrlong	local07, local05
083b4     03 00 00 FF 
083b8     00 E4 05 F1 | 	add	objptr, ##1536
083bc     F2 2A 02 FB | 	rdlong	local07, objptr
083c0     15 29 02 F6 | 	mov	local06, local07
083c4     01 28 66 F0 | 	shl	local06, #1
083c8     15 29 02 F1 | 	add	local06, local07
083cc     02 28 66 F0 | 	shl	local06, #2
083d0     03 00 00 FF 
083d4     00 E4 85 F1 | 	sub	objptr, ##1536
083d8     F2 28 02 F1 | 	add	local06, objptr
083dc     08 28 06 F1 | 	add	local06, #8
083e0     14 1F 62 FC | 	wrlong	local01, local06
083e4     03 00 00 FF 
083e8     00 E4 05 F1 | 	add	objptr, ##1536
083ec     F2 28 02 FB | 	rdlong	local06, objptr
083f0     01 28 06 F1 | 	add	local06, #1
083f4     F2 28 62 FC | 	wrlong	local06, objptr
083f8     69 00 00 FF 
083fc     50 E4 85 F1 | 	sub	objptr, ##53840
08400     1D FA 05 F6 | 	mov	result1, #29
08404     54 01 90 FD | 	jmp	#LR__0673
08408                 | LR__0670
08408     00 1E 06 F6 | 	mov	local01, #0
0840c     58 01 B0 FD | 	call	#_addsub
08410     56 00 00 FF 
08414     18 E4 05 F1 | 	add	objptr, ##44056
08418     F2 24 02 FB | 	rdlong	local04, objptr
0841c     03 24 66 F0 | 	shl	local04, #3
08420     02 00 00 FF 
08424     38 E4 85 F1 | 	sub	objptr, ##1080
08428     F2 24 02 F1 | 	add	local04, objptr
0842c     04 24 06 F1 | 	add	local04, #4
08430     12 27 02 FB | 	rdlong	local05, local04
08434                 | ' t3.result.uresult=0
08434                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08434                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08434                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
08434     53 00 00 FF 
08438     E0 E5 85 F1 | 	sub	objptr, ##42976
0843c                 | LR__0671
0843c     1B 26 0E F2 | 	cmp	local05, #27 wz
08440     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
08444     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
08448     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
0844c     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
08450     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
08454     00 01 90 5D |  if_ne	jmp	#LR__0672
08458     56 00 00 FF 
0845c     18 E4 05 F1 | 	add	objptr, ##44056
08460     F2 28 02 FB | 	rdlong	local06, objptr
08464     01 28 06 F1 | 	add	local06, #1
08468     F2 28 62 FC | 	wrlong	local06, objptr
0846c     56 00 00 FF 
08470     18 E4 85 F1 | 	sub	objptr, ##44056
08474     F0 00 B0 FD | 	call	#_addsub
08478     13 23 02 F6 | 	mov	local03, local05
0847c     0F 29 02 F6 | 	mov	local06, local01
08480     10 2B 02 F6 | 	mov	local07, local02
08484     11 27 02 F6 | 	mov	local05, local03
08488     69 00 00 FF 
0848c     50 E4 05 F1 | 	add	objptr, ##53840
08490     F2 24 02 FB | 	rdlong	local04, objptr
08494     12 FB 01 F6 | 	mov	result1, local04
08498     01 FA 65 F0 | 	shl	result1, #1
0849c     12 FB 01 F1 | 	add	result1, local04
084a0     02 FA 65 F0 | 	shl	result1, #2
084a4     03 00 00 FF 
084a8     00 E4 85 F1 | 	sub	objptr, ##1536
084ac     F2 FA 01 F1 | 	add	result1, objptr
084b0     FD 28 62 FC | 	wrlong	local06, result1
084b4     03 00 00 FF 
084b8     00 E4 05 F1 | 	add	objptr, ##1536
084bc     F2 28 02 FB | 	rdlong	local06, objptr
084c0     14 25 02 F6 | 	mov	local04, local06
084c4     01 24 66 F0 | 	shl	local04, #1
084c8     14 25 02 F1 | 	add	local04, local06
084cc     02 24 66 F0 | 	shl	local04, #2
084d0     03 00 00 FF 
084d4     00 E4 85 F1 | 	sub	objptr, ##1536
084d8     F2 24 02 F1 | 	add	local04, objptr
084dc     04 24 06 F1 | 	add	local04, #4
084e0     12 2B 62 FC | 	wrlong	local07, local04
084e4     03 00 00 FF 
084e8     00 E4 05 F1 | 	add	objptr, ##1536
084ec     F2 2A 02 FB | 	rdlong	local07, objptr
084f0     15 29 02 F6 | 	mov	local06, local07
084f4     01 28 66 F0 | 	shl	local06, #1
084f8     15 29 02 F1 | 	add	local06, local07
084fc     02 28 66 F0 | 	shl	local06, #2
08500     03 00 00 FF 
08504     00 E4 85 F1 | 	sub	objptr, ##1536
08508     F2 28 02 F1 | 	add	local06, objptr
0850c     08 28 06 F1 | 	add	local06, #8
08510     14 27 62 FC | 	wrlong	local05, local06
08514     03 00 00 FF 
08518     00 E4 05 F1 | 	add	objptr, ##1536
0851c     F2 28 02 FB | 	rdlong	local06, objptr
08520     01 28 06 F1 | 	add	local06, #1
08524     F2 28 62 FC | 	wrlong	local06, objptr
08528     13 00 00 FF 
0852c     38 E4 85 F1 | 	sub	objptr, ##9784
08530     F2 24 02 FB | 	rdlong	local04, objptr
08534     03 24 66 F0 | 	shl	local04, #3
08538     02 00 00 FF 
0853c     38 E4 85 F1 | 	sub	objptr, ##1080
08540     F2 24 02 F1 | 	add	local04, objptr
08544     04 24 06 F1 | 	add	local04, #4
08548     12 27 02 FB | 	rdlong	local05, local04
0854c     53 00 00 FF 
08550     E0 E5 85 F1 | 	sub	objptr, ##42976
08554     E4 FE 9F FD | 	jmp	#LR__0671
08558                 | LR__0672
08558                 | ' return 0  
08558     00 FA 05 F6 | 	mov	result1, #0
0855c                 | LR__0673
0855c     A7 F0 03 F6 | 	mov	ptra, fp
08560     B2 00 A0 FD | 	call	#popregs_
08564                 | _expr_ret
08564     2D 00 64 FD | 	ret
08568                 | 
08568                 | ' 
08568                 | ' 
08568                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
08568                 | ' 
08568                 | ' function addsub() as integer 
08568                 | _addsub
08568     07 4A 05 F6 | 	mov	COUNT_, #7
0856c     A8 00 A0 FD | 	call	#pushregs_
08570                 | _addsub_enter
08570     00 1E 06 F6 | 	mov	local01, #0
08574     50 01 B0 FD | 	call	#_muldiv
08578     56 00 00 FF 
0857c     18 E4 05 F1 | 	add	objptr, ##44056
08580     F2 24 02 FB | 	rdlong	local04, objptr
08584     03 24 66 F0 | 	shl	local04, #3
08588     02 00 00 FF 
0858c     38 E4 85 F1 | 	sub	objptr, ##1080
08590     F2 24 02 F1 | 	add	local04, objptr
08594     04 24 06 F1 | 	add	local04, #4
08598     12 27 02 FB | 	rdlong	local05, local04
0859c                 | ' t3.result.uresult=0
0859c                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0859c                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0859c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0859c     53 00 00 FF 
085a0     E0 E5 85 F1 | 	sub	objptr, ##42976
085a4                 | LR__0680
085a4     01 26 0E F2 | 	cmp	local05, #1 wz
085a8     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
085ac     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
085b0     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
085b4     00 01 90 5D |  if_ne	jmp	#LR__0681
085b8     56 00 00 FF 
085bc     18 E4 05 F1 | 	add	objptr, ##44056
085c0     F2 24 02 FB | 	rdlong	local04, objptr
085c4     01 24 06 F1 | 	add	local04, #1
085c8     F2 24 62 FC | 	wrlong	local04, objptr
085cc     56 00 00 FF 
085d0     18 E4 85 F1 | 	sub	objptr, ##44056
085d4     F0 00 B0 FD | 	call	#_muldiv
085d8     13 23 02 F6 | 	mov	local03, local05
085dc     0F 29 02 F6 | 	mov	local06, local01
085e0     10 2B 02 F6 | 	mov	local07, local02
085e4     11 27 02 F6 | 	mov	local05, local03
085e8     69 00 00 FF 
085ec     50 E4 05 F1 | 	add	objptr, ##53840
085f0     F2 24 02 FB | 	rdlong	local04, objptr
085f4     12 FB 01 F6 | 	mov	result1, local04
085f8     01 FA 65 F0 | 	shl	result1, #1
085fc     12 FB 01 F1 | 	add	result1, local04
08600     02 FA 65 F0 | 	shl	result1, #2
08604     03 00 00 FF 
08608     00 E4 85 F1 | 	sub	objptr, ##1536
0860c     F2 FA 01 F1 | 	add	result1, objptr
08610     FD 28 62 FC | 	wrlong	local06, result1
08614     03 00 00 FF 
08618     00 E4 05 F1 | 	add	objptr, ##1536
0861c     F2 28 02 FB | 	rdlong	local06, objptr
08620     14 25 02 F6 | 	mov	local04, local06
08624     01 24 66 F0 | 	shl	local04, #1
08628     14 25 02 F1 | 	add	local04, local06
0862c     02 24 66 F0 | 	shl	local04, #2
08630     03 00 00 FF 
08634     00 E4 85 F1 | 	sub	objptr, ##1536
08638     F2 24 02 F1 | 	add	local04, objptr
0863c     04 24 06 F1 | 	add	local04, #4
08640     12 2B 62 FC | 	wrlong	local07, local04
08644     03 00 00 FF 
08648     00 E4 05 F1 | 	add	objptr, ##1536
0864c     F2 2A 02 FB | 	rdlong	local07, objptr
08650     15 29 02 F6 | 	mov	local06, local07
08654     01 28 66 F0 | 	shl	local06, #1
08658     15 29 02 F1 | 	add	local06, local07
0865c     02 28 66 F0 | 	shl	local06, #2
08660     03 00 00 FF 
08664     00 E4 85 F1 | 	sub	objptr, ##1536
08668     F2 28 02 F1 | 	add	local06, objptr
0866c     08 28 06 F1 | 	add	local06, #8
08670     14 27 62 FC | 	wrlong	local05, local06
08674     03 00 00 FF 
08678     00 E4 05 F1 | 	add	objptr, ##1536
0867c     F2 28 02 FB | 	rdlong	local06, objptr
08680     01 28 06 F1 | 	add	local06, #1
08684     F2 28 62 FC | 	wrlong	local06, objptr
08688     13 00 00 FF 
0868c     38 E4 85 F1 | 	sub	objptr, ##9784
08690     F2 24 02 FB | 	rdlong	local04, objptr
08694     03 24 66 F0 | 	shl	local04, #3
08698     02 00 00 FF 
0869c     38 E4 85 F1 | 	sub	objptr, ##1080
086a0     F2 24 02 F1 | 	add	local04, objptr
086a4     04 24 06 F1 | 	add	local04, #4
086a8     12 27 02 FB | 	rdlong	local05, local04
086ac     53 00 00 FF 
086b0     E0 E5 85 F1 | 	sub	objptr, ##42976
086b4     EC FE 9F FD | 	jmp	#LR__0680
086b8                 | LR__0681
086b8                 | '   return 0
086b8     00 FA 05 F6 | 	mov	result1, #0
086bc     A7 F0 03 F6 | 	mov	ptra, fp
086c0     B2 00 A0 FD | 	call	#popregs_
086c4                 | _addsub_ret
086c4     2D 00 64 FD | 	ret
086c8                 | 
086c8                 | ' 
086c8                 | ' sub muldiv()
086c8                 | _muldiv
086c8     08 4A 05 F6 | 	mov	COUNT_, #8
086cc     A8 00 A0 FD | 	call	#pushregs_
086d0                 | _muldiv_enter
086d0     00 1E 06 F6 | 	mov	local01, #0
086d4     58 01 B0 FD | 	call	#_getvalue
086d8     56 00 00 FF 
086dc     18 E4 05 F1 | 	add	objptr, ##44056
086e0     F2 24 02 FB | 	rdlong	local04, objptr
086e4     03 24 66 F0 | 	shl	local04, #3
086e8     02 00 00 FF 
086ec     38 E4 85 F1 | 	sub	objptr, ##1080
086f0     F2 24 02 F1 | 	add	local04, objptr
086f4     04 24 06 F1 | 	add	local04, #4
086f8     12 27 02 FB | 	rdlong	local05, local04
086fc                 | ' t3.result.uresult=0
086fc                 | ' getvalue()    
086fc                 | ' op = lparts(ct).token
086fc                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
086fc     53 00 00 FF 
08700     E0 E5 85 F1 | 	sub	objptr, ##42976
08704                 | LR__0690
08704     05 26 0E F2 | 	cmp	local05, #5 wz
08708     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
0870c     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
08710     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
08714     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
08718     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
0871c     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
08720     00 01 90 5D |  if_ne	jmp	#LR__0691
08724     56 00 00 FF 
08728     18 E4 05 F1 | 	add	objptr, ##44056
0872c     F2 24 02 FB | 	rdlong	local04, objptr
08730     01 24 06 F1 | 	add	local04, #1
08734     F2 24 62 FC | 	wrlong	local04, objptr
08738     56 00 00 FF 
0873c     18 E4 85 F1 | 	sub	objptr, ##44056
08740     EC 00 B0 FD | 	call	#_getvalue
08744     13 23 02 F6 | 	mov	local03, local05
08748     0F 29 02 F6 | 	mov	local06, local01
0874c     10 2B 02 F6 | 	mov	local07, local02
08750     11 27 02 F6 | 	mov	local05, local03
08754     69 00 00 FF 
08758     50 E4 05 F1 | 	add	objptr, ##53840
0875c     F2 24 02 FB | 	rdlong	local04, objptr
08760     12 2D 02 F6 | 	mov	local08, local04
08764     01 2C 66 F0 | 	shl	local08, #1
08768     12 2D 02 F1 | 	add	local08, local04
0876c     02 2C 66 F0 | 	shl	local08, #2
08770     03 00 00 FF 
08774     00 E4 85 F1 | 	sub	objptr, ##1536
08778     F2 2C 02 F1 | 	add	local08, objptr
0877c     16 29 62 FC | 	wrlong	local06, local08
08780     03 00 00 FF 
08784     00 E4 05 F1 | 	add	objptr, ##1536
08788     F2 2C 02 FB | 	rdlong	local08, objptr
0878c     16 29 02 F6 | 	mov	local06, local08
08790     01 28 66 F0 | 	shl	local06, #1
08794     16 29 02 F1 | 	add	local06, local08
08798     02 28 66 F0 | 	shl	local06, #2
0879c     03 00 00 FF 
087a0     00 E4 85 F1 | 	sub	objptr, ##1536
087a4     F2 28 02 F1 | 	add	local06, objptr
087a8     04 28 06 F1 | 	add	local06, #4
087ac     14 2B 62 FC | 	wrlong	local07, local06
087b0     03 00 00 FF 
087b4     00 E4 05 F1 | 	add	objptr, ##1536
087b8     F2 2C 02 FB | 	rdlong	local08, objptr
087bc     16 2B 02 F6 | 	mov	local07, local08
087c0     01 2A 66 F0 | 	shl	local07, #1
087c4     16 2B 02 F1 | 	add	local07, local08
087c8     02 2A 66 F0 | 	shl	local07, #2
087cc     03 00 00 FF 
087d0     00 E4 85 F1 | 	sub	objptr, ##1536
087d4     F2 2A 02 F1 | 	add	local07, objptr
087d8     08 2A 06 F1 | 	add	local07, #8
087dc     15 27 62 FC | 	wrlong	local05, local07
087e0     03 00 00 FF 
087e4     00 E4 05 F1 | 	add	objptr, ##1536
087e8     F2 28 02 FB | 	rdlong	local06, objptr
087ec     01 28 06 F1 | 	add	local06, #1
087f0     F2 28 62 FC | 	wrlong	local06, objptr
087f4     13 00 00 FF 
087f8     38 E4 85 F1 | 	sub	objptr, ##9784
087fc     F2 24 02 FB | 	rdlong	local04, objptr
08800     03 24 66 F0 | 	shl	local04, #3
08804     02 00 00 FF 
08808     38 E4 85 F1 | 	sub	objptr, ##1080
0880c     F2 24 02 F1 | 	add	local04, objptr
08810     04 24 06 F1 | 	add	local04, #4
08814     12 27 02 FB | 	rdlong	local05, local04
08818     53 00 00 FF 
0881c     E0 E5 85 F1 | 	sub	objptr, ##42976
08820     E0 FE 9F FD | 	jmp	#LR__0690
08824                 | LR__0691
08824     A7 F0 03 F6 | 	mov	ptra, fp
08828     B2 00 A0 FD | 	call	#popregs_
0882c                 | _muldiv_ret
0882c     2D 00 64 FD | 	ret
08830                 | 
08830                 | ' 
08830                 | ' sub getvalue() 
08830                 | _getvalue
08830     0B 4A 05 F6 | 	mov	COUNT_, #11
08834     A8 00 A0 FD | 	call	#pushregs_
08838                 | _getvalue_enter
08838     01 24 06 F6 | 	mov	local04, #1
0883c     00 1E 06 F6 | 	mov	local01, #0
08840     1D 22 06 F6 | 	mov	local03, #29
08844     56 00 00 FF 
08848     18 E4 05 F1 | 	add	objptr, ##44056
0884c     F2 16 02 FB | 	rdlong	arg03, objptr
08850     03 16 66 F0 | 	shl	arg03, #3
08854     02 00 00 FF 
08858     38 E4 85 F1 | 	sub	objptr, ##1080
0885c     F2 16 02 F1 | 	add	arg03, objptr
08860     04 16 06 F1 | 	add	arg03, #4
08864     0B 27 02 FB | 	rdlong	local05, arg03
08868                 | ' m=1
08868                 | ' t1.result.uresult=0: t1.result_type=result_uint
08868                 | ' op=lparts(ct).token
08868                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
08868     02 26 0E F2 | 	cmp	local05, #2 wz
0886c     53 00 00 FF 
08870     E0 E5 85 F1 | 	sub	objptr, ##42976
08874     38 00 90 5D |  if_ne	jmp	#LR__0700
08878     01 24 66 F6 | 	neg	local04, #1
0887c     56 00 00 FF 
08880     18 E4 05 F1 | 	add	objptr, ##44056
08884     F2 26 02 FB | 	rdlong	local05, objptr
08888     01 26 06 F1 | 	add	local05, #1
0888c     F2 26 62 FC | 	wrlong	local05, objptr
08890     03 26 66 F0 | 	shl	local05, #3
08894     02 00 00 FF 
08898     38 E4 85 F1 | 	sub	objptr, ##1080
0889c     F2 26 02 F1 | 	add	local05, objptr
088a0     04 26 06 F1 | 	add	local05, #4
088a4     13 27 02 FB | 	rdlong	local05, local05
088a8     53 00 00 FF 
088ac     E0 E5 85 F1 | 	sub	objptr, ##42976
088b0                 | LR__0700
088b0                 | ' select case op
088b0     01 00 00 FF 
088b4     00 26 0E F2 | 	cmp	local05, ##512 wz
088b8     3C 00 90 AD |  if_e	jmp	#LR__0701
088bc     01 00 00 FF 
088c0     01 26 0E F2 | 	cmp	local05, ##513 wz
088c4     88 01 90 AD |  if_e	jmp	#LR__0704
088c8     01 00 00 FF 
088cc     02 26 0E F2 | 	cmp	local05, ##514 wz
088d0     84 02 90 AD |  if_e	jmp	#LR__0705
088d4     01 00 00 FF 
088d8     03 26 0E F2 | 	cmp	local05, ##515 wz
088dc     E8 03 90 AD |  if_e	jmp	#LR__0708
088e0     01 00 00 FF 
088e4     04 26 0E F2 | 	cmp	local05, ##516 wz
088e8     E0 05 90 AD |  if_e	jmp	#LR__0713
088ec     15 26 0E F2 | 	cmp	local05, #21 wz
088f0     00 06 90 AD |  if_e	jmp	#LR__0714
088f4     70 06 90 FD | 	jmp	#LR__0715
088f8                 | LR__0701
088f8                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
088f8     01 24 0E F2 | 	cmp	local04, #1 wz
088fc     3C 00 90 5D |  if_ne	jmp	#LR__0702
08900     56 00 00 FF 
08904     18 E4 05 F1 | 	add	objptr, ##44056
08908     F2 26 02 FB | 	rdlong	local05, objptr
0890c     03 26 66 F0 | 	shl	local05, #3
08910     02 00 00 FF 
08914     38 E4 85 F1 | 	sub	objptr, ##1080
08918     F2 26 02 F1 | 	add	local05, objptr
0891c     13 13 02 FB | 	rdlong	arg01, local05
08920     00 14 06 F6 | 	mov	arg02, #0
08924     53 00 00 FF 
08928     E0 E5 85 F1 | 	sub	objptr, ##42976
0892c     E4 33 B1 FD | 	call	#__system____builtin_atoi
08930     FD 24 02 FD | 	qmul	local04, result1
08934     18 1E 62 FD | 	getqx	local01
08938     1C 22 06 F6 | 	mov	local03, #28
0893c                 | LR__0702
0893c                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
0893c     FF FF 7F FF 
08940     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08944     3C 00 90 5D |  if_ne	jmp	#LR__0703
08948     56 00 00 FF 
0894c     18 E4 05 F1 | 	add	objptr, ##44056
08950     F2 26 02 FB | 	rdlong	local05, objptr
08954     03 26 66 F0 | 	shl	local05, #3
08958     02 00 00 FF 
0895c     38 E4 85 F1 | 	sub	objptr, ##1080
08960     F2 26 02 F1 | 	add	local05, objptr
08964     13 13 02 FB | 	rdlong	arg01, local05
08968     00 14 06 F6 | 	mov	arg02, #0
0896c     53 00 00 FF 
08970     E0 E5 85 F1 | 	sub	objptr, ##42976
08974     9C 33 B1 FD | 	call	#__system____builtin_atoi
08978     FD 24 02 FD | 	qmul	local04, result1
0897c     18 1E 62 FD | 	getqx	local01
08980     1C 22 06 F6 | 	mov	local03, #28
08984                 | LR__0703
08984     0F 29 02 F6 | 	mov	local06, local01
08988     10 2B 02 F6 | 	mov	local07, local02
0898c     11 27 02 F6 | 	mov	local05, local03
08990     69 00 00 FF 
08994     50 E4 05 F1 | 	add	objptr, ##53840
08998     F2 1E 02 FB | 	rdlong	local01, objptr
0899c     0F 25 02 F6 | 	mov	local04, local01
089a0     01 24 66 F0 | 	shl	local04, #1
089a4     0F 25 02 F1 | 	add	local04, local01
089a8     02 24 66 F0 | 	shl	local04, #2
089ac     03 00 00 FF 
089b0     00 E4 85 F1 | 	sub	objptr, ##1536
089b4     F2 24 02 F1 | 	add	local04, objptr
089b8     12 29 62 FC | 	wrlong	local06, local04
089bc     03 00 00 FF 
089c0     00 E4 05 F1 | 	add	objptr, ##1536
089c4     F2 28 02 FB | 	rdlong	local06, objptr
089c8     14 1F 02 F6 | 	mov	local01, local06
089cc     01 1E 66 F0 | 	shl	local01, #1
089d0     14 1F 02 F1 | 	add	local01, local06
089d4     02 1E 66 F0 | 	shl	local01, #2
089d8     03 00 00 FF 
089dc     00 E4 85 F1 | 	sub	objptr, ##1536
089e0     F2 1E 02 F1 | 	add	local01, objptr
089e4     04 1E 06 F1 | 	add	local01, #4
089e8     0F 2B 62 FC | 	wrlong	local07, local01
089ec     03 00 00 FF 
089f0     00 E4 05 F1 | 	add	objptr, ##1536
089f4     F2 2A 02 FB | 	rdlong	local07, objptr
089f8     15 29 02 F6 | 	mov	local06, local07
089fc     01 28 66 F0 | 	shl	local06, #1
08a00     15 29 02 F1 | 	add	local06, local07
08a04     02 28 66 F0 | 	shl	local06, #2
08a08     03 00 00 FF 
08a0c     00 E4 85 F1 | 	sub	objptr, ##1536
08a10     F2 28 02 F1 | 	add	local06, objptr
08a14     08 28 06 F1 | 	add	local06, #8
08a18     14 27 62 FC | 	wrlong	local05, local06
08a1c     03 00 00 FF 
08a20     00 E4 05 F1 | 	add	objptr, ##1536
08a24     F2 28 02 FB | 	rdlong	local06, objptr
08a28     01 28 06 F1 | 	add	local06, #1
08a2c     F2 28 62 FC | 	wrlong	local06, objptr
08a30     13 00 00 FF 
08a34     38 E4 85 F1 | 	sub	objptr, ##9784
08a38     F2 28 02 FB | 	rdlong	local06, objptr
08a3c     01 28 06 F1 | 	add	local06, #1
08a40     F2 28 62 FC | 	wrlong	local06, objptr
08a44     56 00 00 FF 
08a48     18 E4 85 F1 | 	sub	objptr, ##44056
08a4c     3C 05 90 FD | 	jmp	#LR__0716
08a50                 | LR__0704
08a50     56 00 00 FF 
08a54     18 E4 05 F1 | 	add	objptr, ##44056
08a58     F2 28 02 FB | 	rdlong	local06, objptr
08a5c     03 28 66 F0 | 	shl	local06, #3
08a60     02 00 00 FF 
08a64     38 E4 85 F1 | 	sub	objptr, ##1080
08a68     F2 28 02 F1 | 	add	local06, objptr
08a6c     14 13 02 FB | 	rdlong	arg01, local06
08a70     00 14 06 F6 | 	mov	arg02, #0
08a74     53 00 00 FF 
08a78     E0 E5 85 F1 | 	sub	objptr, ##42976
08a7c     94 32 B1 FD | 	call	#__system____builtin_atoi
08a80     FD 24 02 FD | 	qmul	local04, result1
08a84     69 00 00 FF 
08a88     50 E4 05 F1 | 	add	objptr, ##53840
08a8c     F2 28 02 FB | 	rdlong	local06, objptr
08a90     14 2D 02 F6 | 	mov	local08, local06
08a94     01 2C 66 F0 | 	shl	local08, #1
08a98     14 2D 02 F1 | 	add	local08, local06
08a9c     02 2C 66 F0 | 	shl	local08, #2
08aa0     03 00 00 FF 
08aa4     00 E4 85 F1 | 	sub	objptr, ##1536
08aa8     F2 2C 02 F1 | 	add	local08, objptr
08aac     03 00 00 FF 
08ab0     00 E4 05 F1 | 	add	objptr, ##1536
08ab4     18 1E 62 FD | 	getqx	local01
08ab8     1C 22 06 F6 | 	mov	local03, #28
08abc     0F 29 02 F6 | 	mov	local06, local01
08ac0     10 2B 02 F6 | 	mov	local07, local02
08ac4     16 29 62 FC | 	wrlong	local06, local08
08ac8     11 2D 02 F6 | 	mov	local08, local03
08acc     F2 28 02 FB | 	rdlong	local06, objptr
08ad0     14 27 02 F6 | 	mov	local05, local06
08ad4     01 26 66 F0 | 	shl	local05, #1
08ad8     14 27 02 F1 | 	add	local05, local06
08adc     02 26 66 F0 | 	shl	local05, #2
08ae0     03 00 00 FF 
08ae4     00 E4 85 F1 | 	sub	objptr, ##1536
08ae8     F2 26 02 F1 | 	add	local05, objptr
08aec     04 26 06 F1 | 	add	local05, #4
08af0     13 2B 62 FC | 	wrlong	local07, local05
08af4     03 00 00 FF 
08af8     00 E4 05 F1 | 	add	objptr, ##1536
08afc     F2 2A 02 FB | 	rdlong	local07, objptr
08b00     15 29 02 F6 | 	mov	local06, local07
08b04     01 28 66 F0 | 	shl	local06, #1
08b08     15 29 02 F1 | 	add	local06, local07
08b0c     02 28 66 F0 | 	shl	local06, #2
08b10     03 00 00 FF 
08b14     00 E4 85 F1 | 	sub	objptr, ##1536
08b18     F2 28 02 F1 | 	add	local06, objptr
08b1c     08 28 06 F1 | 	add	local06, #8
08b20     14 2D 62 FC | 	wrlong	local08, local06
08b24     03 00 00 FF 
08b28     00 E4 05 F1 | 	add	objptr, ##1536
08b2c     F2 28 02 FB | 	rdlong	local06, objptr
08b30     01 28 06 F1 | 	add	local06, #1
08b34     F2 28 62 FC | 	wrlong	local06, objptr
08b38     13 00 00 FF 
08b3c     38 E4 85 F1 | 	sub	objptr, ##9784
08b40     F2 28 02 FB | 	rdlong	local06, objptr
08b44     01 28 06 F1 | 	add	local06, #1
08b48     F2 28 62 FC | 	wrlong	local06, objptr
08b4c     56 00 00 FF 
08b50     18 E4 85 F1 | 	sub	objptr, ##44056
08b54     34 04 90 FD | 	jmp	#LR__0716
08b58                 | LR__0705
08b58                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
08b58     01 24 0E F2 | 	cmp	local04, #1 wz
08b5c     48 00 90 5D |  if_ne	jmp	#LR__0706
08b60     00 C0 1F FF 
08b64     00 28 06 F6 | 	mov	local06, ##1065353216
08b68     56 00 00 FF 
08b6c     18 E4 05 F1 | 	add	objptr, ##44056
08b70     F2 2C 02 FB | 	rdlong	local08, objptr
08b74     03 2C 66 F0 | 	shl	local08, #3
08b78     02 00 00 FF 
08b7c     38 E4 85 F1 | 	sub	objptr, ##1080
08b80     F2 2C 02 F1 | 	add	local08, objptr
08b84     16 13 02 FB | 	rdlong	arg01, local08
08b88     53 00 00 FF 
08b8c     E0 E5 85 F1 | 	sub	objptr, ##42976
08b90     F0 32 B1 FD | 	call	#__system____builtin_atof
08b94     FD 14 02 F6 | 	mov	arg02, result1
08b98     14 13 02 F6 | 	mov	arg01, local06
08b9c     FC 2A B1 FD | 	call	#__system___float_mul
08ba0     FD 1E 02 F6 | 	mov	local01, result1
08ba4     1E 22 06 F6 | 	mov	local03, #30
08ba8                 | LR__0706
08ba8                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
08ba8     FF FF 7F FF 
08bac     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08bb0     48 00 90 5D |  if_ne	jmp	#LR__0707
08bb4     00 C0 5F FF 
08bb8     00 28 06 F6 | 	mov	local06, ##-1082130432
08bbc     56 00 00 FF 
08bc0     18 E4 05 F1 | 	add	objptr, ##44056
08bc4     F2 2C 02 FB | 	rdlong	local08, objptr
08bc8     03 2C 66 F0 | 	shl	local08, #3
08bcc     02 00 00 FF 
08bd0     38 E4 85 F1 | 	sub	objptr, ##1080
08bd4     F2 2C 02 F1 | 	add	local08, objptr
08bd8     16 13 02 FB | 	rdlong	arg01, local08
08bdc     53 00 00 FF 
08be0     E0 E5 85 F1 | 	sub	objptr, ##42976
08be4     9C 32 B1 FD | 	call	#__system____builtin_atof
08be8     FD 14 02 F6 | 	mov	arg02, result1
08bec     14 13 02 F6 | 	mov	arg01, local06
08bf0     A8 2A B1 FD | 	call	#__system___float_mul
08bf4     FD 1E 02 F6 | 	mov	local01, result1
08bf8     1E 22 06 F6 | 	mov	local03, #30
08bfc                 | LR__0707
08bfc     0F 29 02 F6 | 	mov	local06, local01
08c00     10 2B 02 F6 | 	mov	local07, local02
08c04     11 27 02 F6 | 	mov	local05, local03
08c08     69 00 00 FF 
08c0c     50 E4 05 F1 | 	add	objptr, ##53840
08c10     F2 1E 02 FB | 	rdlong	local01, objptr
08c14     0F 2D 02 F6 | 	mov	local08, local01
08c18     01 2C 66 F0 | 	shl	local08, #1
08c1c     0F 2D 02 F1 | 	add	local08, local01
08c20     02 2C 66 F0 | 	shl	local08, #2
08c24     03 00 00 FF 
08c28     00 E4 85 F1 | 	sub	objptr, ##1536
08c2c     F2 2C 02 F1 | 	add	local08, objptr
08c30     16 29 62 FC | 	wrlong	local06, local08
08c34     03 00 00 FF 
08c38     00 E4 05 F1 | 	add	objptr, ##1536
08c3c     F2 2C 02 FB | 	rdlong	local08, objptr
08c40     16 29 02 F6 | 	mov	local06, local08
08c44     01 28 66 F0 | 	shl	local06, #1
08c48     16 29 02 F1 | 	add	local06, local08
08c4c     02 28 66 F0 | 	shl	local06, #2
08c50     03 00 00 FF 
08c54     00 E4 85 F1 | 	sub	objptr, ##1536
08c58     F2 28 02 F1 | 	add	local06, objptr
08c5c     04 28 06 F1 | 	add	local06, #4
08c60     14 2B 62 FC | 	wrlong	local07, local06
08c64     03 00 00 FF 
08c68     00 E4 05 F1 | 	add	objptr, ##1536
08c6c     F2 2C 02 FB | 	rdlong	local08, objptr
08c70     16 2B 02 F6 | 	mov	local07, local08
08c74     01 2A 66 F0 | 	shl	local07, #1
08c78     16 2B 02 F1 | 	add	local07, local08
08c7c     02 2A 66 F0 | 	shl	local07, #2
08c80     03 00 00 FF 
08c84     00 E4 85 F1 | 	sub	objptr, ##1536
08c88     F2 2A 02 F1 | 	add	local07, objptr
08c8c     08 2A 06 F1 | 	add	local07, #8
08c90     15 27 62 FC | 	wrlong	local05, local07
08c94     03 00 00 FF 
08c98     00 E4 05 F1 | 	add	objptr, ##1536
08c9c     F2 28 02 FB | 	rdlong	local06, objptr
08ca0     01 28 06 F1 | 	add	local06, #1
08ca4     F2 28 62 FC | 	wrlong	local06, objptr
08ca8     13 00 00 FF 
08cac     38 E4 85 F1 | 	sub	objptr, ##9784
08cb0     F2 28 02 FB | 	rdlong	local06, objptr
08cb4     01 28 06 F1 | 	add	local06, #1
08cb8     F2 28 62 FC | 	wrlong	local06, objptr
08cbc     56 00 00 FF 
08cc0     18 E4 85 F1 | 	sub	objptr, ##44056
08cc4     C4 02 90 FD | 	jmp	#LR__0716
08cc8                 | LR__0708
08cc8     1F 22 06 F6 | 	mov	local03, #31
08ccc     56 00 00 FF 
08cd0     18 E4 05 F1 | 	add	objptr, ##44056
08cd4     F2 16 02 FB | 	rdlong	arg03, objptr
08cd8     03 16 66 F0 | 	shl	arg03, #3
08cdc     02 00 00 FF 
08ce0     38 E4 85 F1 | 	sub	objptr, ##1080
08ce4     F2 16 02 F1 | 	add	arg03, objptr
08ce8     0B 13 02 FB | 	rdlong	arg01, arg03
08cec     53 00 00 FF 
08cf0     E0 E5 85 F1 | 	sub	objptr, ##42976
08cf4     09 2F 02 F6 | 	mov	local09, arg01
08cf8     97 06 48 FB | 	callpa	#(@LR__0710-@LR__0709)>>2,fcache_load_ptr_
08cfc                 | LR__0709
08cfc     17 FB C9 FA | 	rdbyte	result1, local09 wz
08d00     01 2E 06 51 |  if_ne	add	local09, #1
08d04     F4 FF 9F 5D |  if_ne	jmp	#LR__0709
08d08                 | LR__0710
08d08     09 2F 82 F1 | 	sub	local09, arg01
08d0c     17 FB 01 F6 | 	mov	result1, local09
08d10     7A 00 00 FF 
08d14     84 E4 05 F1 | 	add	objptr, ##62596
08d18     F2 FA 61 FC | 	wrlong	result1, objptr
08d1c     38 E4 85 F1 | 	sub	objptr, #56
08d20     F2 12 02 FB | 	rdlong	arg01, objptr
08d24     FD 12 82 F1 | 	sub	arg01, result1
08d28     04 12 86 F1 | 	sub	arg01, #4
08d2c     03 12 26 F5 | 	andn	arg01, #3
08d30     F2 12 62 FC | 	wrlong	arg01, objptr
08d34     38 E4 05 F1 | 	add	objptr, #56
08d38     F2 14 02 FB | 	rdlong	arg02, objptr
08d3c     01 16 06 F6 | 	mov	arg03, #1
08d40     00 18 06 F6 | 	mov	arg04, #0
08d44     6E 00 00 FF 
08d48     C4 E5 85 F1 | 	sub	objptr, ##56772
08d4c                 | '     return fill(addr, pattern, count, listPtr, 4)
08d4c     04 1A 06 F6 | 	mov	arg05, #4
08d50     A4 F4 B0 FD | 	call	#_psram_spin2_fill
08d54                 | '     pslpoke memtop,l
08d54                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08d54     01 30 06 F6 | 	mov	local10, #1
08d58     6E 00 00 FF 
08d5c     C4 E5 05 F1 | 	add	objptr, ##56772
08d60     F2 32 02 FB | 	rdlong	local11, objptr
08d64     7A 00 00 FF 
08d68     84 E4 85 F1 | 	sub	objptr, ##62596
08d6c     01 32 06 F1 | 	add	local11, #1
08d70                 | LR__0711
08d70     19 31 52 F2 | 	cmps	local10, local11 wc
08d74     78 00 90 3D |  if_ae	jmp	#LR__0712
08d78     7A 00 00 FF 
08d7c     4C E4 05 F1 | 	add	objptr, ##62540
08d80     F2 2A 02 FB | 	rdlong	local07, objptr
08d84     03 2A 06 F1 | 	add	local07, #3
08d88     18 2B 02 F1 | 	add	local07, local10
08d8c     24 00 00 FF 
08d90     34 E4 85 F1 | 	sub	objptr, ##18484
08d94     F2 2C 02 FB | 	rdlong	local08, objptr
08d98     03 2C 66 F0 | 	shl	local08, #3
08d9c     02 00 00 FF 
08da0     38 E4 85 F1 | 	sub	objptr, ##1080
08da4     F2 2C 02 F1 | 	add	local08, objptr
08da8     16 13 02 FB | 	rdlong	arg01, local08
08dac     18 15 02 F6 | 	mov	arg02, local10
08db0     01 16 06 F6 | 	mov	arg03, #1
08db4     53 00 00 FF 
08db8     E0 E5 85 F1 | 	sub	objptr, ##42976
08dbc     18 1F B1 FD | 	call	#__system__Mid_S
08dc0     FD 14 C2 FA | 	rdbyte	arg02, result1
08dc4     15 13 02 F6 | 	mov	arg01, local07
08dc8     01 16 06 F6 | 	mov	arg03, #1
08dcc     00 18 06 F6 | 	mov	arg04, #0
08dd0     0B 00 00 FF 
08dd4     C0 E4 05 F1 | 	add	objptr, ##5824
08dd8                 | '     return fill(addr, pattern, count, listPtr, 1)
08dd8     01 1A 06 F6 | 	mov	arg05, #1
08ddc     18 F4 B0 FD | 	call	#_psram_spin2_fill
08de0     0B 00 00 FF 
08de4     C0 E4 85 F1 | 	sub	objptr, ##5824
08de8     01 30 06 F1 | 	add	local10, #1
08dec     80 FF 9F FD | 	jmp	#LR__0711
08df0                 | LR__0712
08df0     7A 00 00 FF 
08df4     4C E4 05 F1 | 	add	objptr, ##62540
08df8     F2 1E 02 FB | 	rdlong	local01, objptr
08dfc     2B 22 06 F6 | 	mov	local03, #43
08e00     0F 29 02 F6 | 	mov	local06, local01
08e04     10 2B 02 F6 | 	mov	local07, local02
08e08     11 33 02 F6 | 	mov	local11, local03
08e0c     10 00 00 FF 
08e10     FC E5 85 F1 | 	sub	objptr, ##8700
08e14     F2 30 02 FB | 	rdlong	local10, objptr
08e18     18 2D 02 F6 | 	mov	local08, local10
08e1c     01 2C 66 F0 | 	shl	local08, #1
08e20     18 2D 02 F1 | 	add	local08, local10
08e24     02 2C 66 F0 | 	shl	local08, #2
08e28     03 00 00 FF 
08e2c     00 E4 85 F1 | 	sub	objptr, ##1536
08e30     F2 2C 02 F1 | 	add	local08, objptr
08e34     16 29 62 FC | 	wrlong	local06, local08
08e38     03 00 00 FF 
08e3c     00 E4 05 F1 | 	add	objptr, ##1536
08e40     F2 30 02 FB | 	rdlong	local10, objptr
08e44     18 2D 02 F6 | 	mov	local08, local10
08e48     01 2C 66 F0 | 	shl	local08, #1
08e4c     18 2D 02 F1 | 	add	local08, local10
08e50     02 2C 66 F0 | 	shl	local08, #2
08e54     03 00 00 FF 
08e58     00 E4 85 F1 | 	sub	objptr, ##1536
08e5c     F2 2C 02 F1 | 	add	local08, objptr
08e60     04 2C 06 F1 | 	add	local08, #4
08e64     16 2B 62 FC | 	wrlong	local07, local08
08e68     03 00 00 FF 
08e6c     00 E4 05 F1 | 	add	objptr, ##1536
08e70     F2 30 02 FB | 	rdlong	local10, objptr
08e74     18 2D 02 F6 | 	mov	local08, local10
08e78     01 2C 66 F0 | 	shl	local08, #1
08e7c     18 2D 02 F1 | 	add	local08, local10
08e80     02 2C 66 F0 | 	shl	local08, #2
08e84     03 00 00 FF 
08e88     00 E4 85 F1 | 	sub	objptr, ##1536
08e8c     F2 2C 02 F1 | 	add	local08, objptr
08e90     08 2C 06 F1 | 	add	local08, #8
08e94     16 33 62 FC | 	wrlong	local11, local08
08e98     03 00 00 FF 
08e9c     00 E4 05 F1 | 	add	objptr, ##1536
08ea0     F2 28 02 FB | 	rdlong	local06, objptr
08ea4     01 28 06 F1 | 	add	local06, #1
08ea8     F2 28 62 FC | 	wrlong	local06, objptr
08eac     13 00 00 FF 
08eb0     38 E4 85 F1 | 	sub	objptr, ##9784
08eb4     F2 28 02 FB | 	rdlong	local06, objptr
08eb8     01 28 06 F1 | 	add	local06, #1
08ebc     F2 28 62 FC | 	wrlong	local06, objptr
08ec0     56 00 00 FF 
08ec4     18 E4 85 F1 | 	sub	objptr, ##44056
08ec8     C0 00 90 FD | 	jmp	#LR__0716
08ecc                 | LR__0713
08ecc     12 13 02 F6 | 	mov	arg01, local04
08ed0     B8 03 B0 FD | 	call	#_getvar
08ed4     56 00 00 FF 
08ed8     18 E4 05 F1 | 	add	objptr, ##44056
08edc     F2 28 02 FB | 	rdlong	local06, objptr
08ee0     01 28 06 F1 | 	add	local06, #1
08ee4     F2 28 62 FC | 	wrlong	local06, objptr
08ee8     56 00 00 FF 
08eec     18 E4 85 F1 | 	sub	objptr, ##44056
08ef0     98 00 90 FD | 	jmp	#LR__0716
08ef4                 | LR__0714
08ef4     56 00 00 FF 
08ef8     18 E4 05 F1 | 	add	objptr, ##44056
08efc     F2 28 02 FB | 	rdlong	local06, objptr
08f00     01 28 06 F1 | 	add	local06, #1
08f04     F2 28 62 FC | 	wrlong	local06, objptr
08f08     56 00 00 FF 
08f0c     18 E4 85 F1 | 	sub	objptr, ##44056
08f10     F4 F3 BF FD | 	call	#_expr
08f14                 | '     ct+=1
08f14                 | '     expr() 
08f14                 | '     if lparts(ct).token=token_rpar then ct+=1
08f14     56 00 00 FF 
08f18     18 E4 05 F1 | 	add	objptr, ##44056
08f1c     F2 32 02 FB | 	rdlong	local11, objptr
08f20     03 32 66 F0 | 	shl	local11, #3
08f24     02 00 00 FF 
08f28     38 E4 85 F1 | 	sub	objptr, ##1080
08f2c     F2 32 02 F1 | 	add	local11, objptr
08f30     04 32 06 F1 | 	add	local11, #4
08f34     19 33 02 FB | 	rdlong	local11, local11
08f38     14 32 0E F2 | 	cmp	local11, #20 wz
08f3c     53 00 00 FF 
08f40     E0 E5 85 F1 | 	sub	objptr, ##42976
08f44     44 00 90 5D |  if_ne	jmp	#LR__0716
08f48     56 00 00 FF 
08f4c     18 E4 05 F1 | 	add	objptr, ##44056
08f50     F2 28 02 FB | 	rdlong	local06, objptr
08f54     01 28 06 F1 | 	add	local06, #1
08f58     F2 28 62 FC | 	wrlong	local06, objptr
08f5c     56 00 00 FF 
08f60     18 E4 85 F1 | 	sub	objptr, ##44056
08f64     24 00 90 FD | 	jmp	#LR__0716
08f68                 | LR__0715
08f68     12 13 02 F6 | 	mov	arg01, local04
08f6c     28 00 B0 FD | 	call	#_getfun
08f70     56 00 00 FF 
08f74     18 E4 05 F1 | 	add	objptr, ##44056
08f78     F2 28 02 FB | 	rdlong	local06, objptr
08f7c     01 28 06 F1 | 	add	local06, #1
08f80     F2 28 62 FC | 	wrlong	local06, objptr
08f84     56 00 00 FF 
08f88     18 E4 85 F1 | 	sub	objptr, ##44056
08f8c                 | LR__0716
08f8c     A7 F0 03 F6 | 	mov	ptra, fp
08f90     B2 00 A0 FD | 	call	#popregs_
08f94                 | _getvalue_ret
08f94     2D 00 64 FD | 	ret
08f98                 | 
08f98                 | ' 
08f98                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
08f98                 | _getfun
08f98     0A 4A 05 F6 | 	mov	COUNT_, #10
08f9c     A8 00 A0 FD | 	call	#pushregs_
08fa0                 | _getfun_enter
08fa0     09 25 02 F6 | 	mov	local04, arg01
08fa4     56 00 00 FF 
08fa8     18 E4 05 F1 | 	add	objptr, ##44056
08fac     F2 26 02 FB | 	rdlong	local05, objptr
08fb0     13 29 02 F6 | 	mov	local06, local05
08fb4     00 2A 06 F6 | 	mov	local07, #0
08fb8                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
08fb8                 | ' oldct=ct
08fb8                 | ' numpar=0
08fb8                 | '   
08fb8                 | ' if lparts(ct+1).token=token_lpar then
08fb8     01 26 06 F1 | 	add	local05, #1
08fbc     03 26 66 F0 | 	shl	local05, #3
08fc0     02 00 00 FF 
08fc4     38 E4 85 F1 | 	sub	objptr, ##1080
08fc8     F2 26 02 F1 | 	add	local05, objptr
08fcc     04 26 06 F1 | 	add	local05, #4
08fd0     13 27 02 FB | 	rdlong	local05, local05
08fd4     15 26 0E F2 | 	cmp	local05, #21 wz
08fd8     53 00 00 FF 
08fdc     E0 E5 85 F1 | 	sub	objptr, ##42976
08fe0     08 01 90 5D |  if_ne	jmp	#LR__0724
08fe4     56 00 00 FF 
08fe8     18 E4 05 F1 | 	add	objptr, ##44056
08fec     F2 2C 02 FB | 	rdlong	local08, objptr
08ff0     01 2C 06 F1 | 	add	local08, #1
08ff4     F2 2C 62 FC | 	wrlong	local08, objptr
08ff8     56 00 00 FF 
08ffc     18 E4 85 F1 | 	sub	objptr, ##44056
09000                 | '   ct+=1 											' omit this lpar, this is for expr list
09000                 | '   do
09000                 | LR__0720
09000     56 00 00 FF 
09004     18 E4 05 F1 | 	add	objptr, ##44056
09008     F2 26 02 FB | 	rdlong	local05, objptr
0900c     01 26 06 F1 | 	add	local05, #1
09010     F2 26 62 FC | 	wrlong	local05, objptr
09014                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09014                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09014     03 26 66 F0 | 	shl	local05, #3
09018     02 00 00 FF 
0901c     38 E4 85 F1 | 	sub	objptr, ##1080
09020     F2 26 02 F1 | 	add	local05, objptr
09024     04 26 06 F1 | 	add	local05, #4
09028     13 2D 02 FB | 	rdlong	local08, local05
0902c     15 2C 0E F2 | 	cmp	local08, #21 wz
09030     53 00 00 FF 
09034     E0 E5 85 F1 | 	sub	objptr, ##42976
09038     40 00 90 5D |  if_ne	jmp	#LR__0721
0903c     56 00 00 FF 
09040     18 E4 05 F1 | 	add	objptr, ##44056
09044     F2 2C 02 FB | 	rdlong	local08, objptr
09048     01 2C 06 F1 | 	add	local08, #1
0904c     F2 2C 62 FC | 	wrlong	local08, objptr
09050     56 00 00 FF 
09054     18 E4 85 F1 | 	sub	objptr, ##44056
09058     AC F2 BF FD | 	call	#_expr
0905c     56 00 00 FF 
09060     18 E4 05 F1 | 	add	objptr, ##44056
09064     F2 2C 02 FB | 	rdlong	local08, objptr
09068     01 2C 06 F1 | 	add	local08, #1
0906c     F2 2C 62 FC | 	wrlong	local08, objptr
09070     56 00 00 FF 
09074     18 E4 85 F1 | 	sub	objptr, ##44056
09078     04 00 90 FD | 	jmp	#LR__0722
0907c                 | LR__0721
0907c     88 F2 BF FD | 	call	#_expr
09080                 | LR__0722
09080     01 2A 06 F1 | 	add	local07, #1
09084     56 00 00 FF 
09088     18 E4 05 F1 | 	add	objptr, ##44056
0908c     F2 26 02 FB | 	rdlong	local05, objptr
09090     03 26 66 F0 | 	shl	local05, #3
09094     02 00 00 FF 
09098     38 E4 85 F1 | 	sub	objptr, ##1080
0909c     F2 26 02 F1 | 	add	local05, objptr
090a0     04 26 06 F1 | 	add	local05, #4
090a4     13 2D 02 FB | 	rdlong	local08, local05
090a8     14 2C 0E F2 | 	cmp	local08, #20 wz
090ac     53 00 00 FF 
090b0     E0 E5 85 F1 | 	sub	objptr, ##42976
090b4     34 00 90 AD |  if_e	jmp	#LR__0723
090b8     56 00 00 FF 
090bc     18 E4 05 F1 | 	add	objptr, ##44056
090c0     F2 2C 02 FB | 	rdlong	local08, objptr
090c4     03 2C 66 F0 | 	shl	local08, #3
090c8     02 00 00 FF 
090cc     38 E4 85 F1 | 	sub	objptr, ##1080
090d0     F2 2C 02 F1 | 	add	local08, objptr
090d4     04 2C 06 F1 | 	add	local08, #4
090d8     16 2D 02 FB | 	rdlong	local08, local08
090dc     FE 2D 0E F2 | 	cmp	local08, #510 wz
090e0     53 00 00 FF 
090e4     E0 E5 85 F1 | 	sub	objptr, ##42976
090e8     14 FF 9F 5D |  if_ne	jmp	#LR__0720
090ec                 | LR__0723
090ec                 | LR__0724
090ec     15 1F 02 F6 | 	mov	local01, local07
090f0     03 28 66 F0 | 	shl	local06, #3
090f4     53 00 00 FF 
090f8     E0 E5 05 F1 | 	add	objptr, ##42976
090fc     F2 28 02 F1 | 	add	local06, objptr
09100     04 28 06 F1 | 	add	local06, #4
09104     14 23 02 FB | 	rdlong	local03, local06
09108     0F 2D 02 F6 | 	mov	local08, local01
0910c     10 2B 02 F6 | 	mov	local07, local02
09110     11 29 02 F6 | 	mov	local06, local03
09114     15 00 00 FF 
09118     70 E4 05 F1 | 	add	objptr, ##10864
0911c     F2 26 02 FB | 	rdlong	local05, objptr
09120     13 13 02 F6 | 	mov	arg01, local05
09124     01 12 66 F0 | 	shl	arg01, #1
09128     13 13 02 F1 | 	add	arg01, local05
0912c     02 12 66 F0 | 	shl	arg01, #2
09130     03 00 00 FF 
09134     00 E4 85 F1 | 	sub	objptr, ##1536
09138     F2 12 02 F1 | 	add	arg01, objptr
0913c     09 2D 62 FC | 	wrlong	local08, arg01
09140     03 00 00 FF 
09144     00 E4 05 F1 | 	add	objptr, ##1536
09148     F2 2C 02 FB | 	rdlong	local08, objptr
0914c     16 2F 02 F6 | 	mov	local09, local08
09150     01 2E 66 F0 | 	shl	local09, #1
09154     16 2F 02 F1 | 	add	local09, local08
09158     02 2E 66 F0 | 	shl	local09, #2
0915c     03 00 00 FF 
09160     00 E4 85 F1 | 	sub	objptr, ##1536
09164     F2 2E 02 F1 | 	add	local09, objptr
09168     04 2E 06 F1 | 	add	local09, #4
0916c     17 2B 62 FC | 	wrlong	local07, local09
09170     03 00 00 FF 
09174     00 E4 05 F1 | 	add	objptr, ##1536
09178     F2 2C 02 FB | 	rdlong	local08, objptr
0917c     16 31 02 F6 | 	mov	local10, local08
09180     01 30 66 F0 | 	shl	local10, #1
09184     16 31 02 F1 | 	add	local10, local08
09188     02 30 66 F0 | 	shl	local10, #2
0918c     03 00 00 FF 
09190     00 E4 85 F1 | 	sub	objptr, ##1536
09194     F2 30 02 F1 | 	add	local10, objptr
09198     08 30 06 F1 | 	add	local10, #8
0919c     18 29 62 FC | 	wrlong	local06, local10
091a0     03 00 00 FF 
091a4     00 E4 05 F1 | 	add	objptr, ##1536
091a8     F2 2C 02 FB | 	rdlong	local08, objptr
091ac     01 2C 06 F1 | 	add	local08, #1
091b0     F2 2C 62 FC | 	wrlong	local08, objptr
091b4     69 00 00 FF 
091b8     50 E4 85 F1 | 	sub	objptr, ##53840
091bc                 | ' 
091bc                 | ' t2.result.uresult=numpar
091bc                 | ' 
091bc                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
091bc                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
091bc                 | ' 
091bc                 | '   
091bc                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
091bc     FF FF 7F FF 
091c0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
091c4     B8 00 90 5D |  if_ne	jmp	#LR__0725
091c8     15 22 06 F6 | 	mov	local03, #21
091cc     0F 2D 02 F6 | 	mov	local08, local01
091d0     10 2B 02 F6 | 	mov	local07, local02
091d4     11 29 02 F6 | 	mov	local06, local03
091d8     69 00 00 FF 
091dc     50 E4 05 F1 | 	add	objptr, ##53840
091e0     F2 26 02 FB | 	rdlong	local05, objptr
091e4     13 13 02 F6 | 	mov	arg01, local05
091e8     01 12 66 F0 | 	shl	arg01, #1
091ec     13 13 02 F1 | 	add	arg01, local05
091f0     02 12 66 F0 | 	shl	arg01, #2
091f4     03 00 00 FF 
091f8     00 E4 85 F1 | 	sub	objptr, ##1536
091fc     F2 12 02 F1 | 	add	arg01, objptr
09200     09 2D 62 FC | 	wrlong	local08, arg01
09204     03 00 00 FF 
09208     00 E4 05 F1 | 	add	objptr, ##1536
0920c     F2 30 02 FB | 	rdlong	local10, objptr
09210     18 2F 02 F6 | 	mov	local09, local10
09214     01 2E 66 F0 | 	shl	local09, #1
09218     18 2F 02 F1 | 	add	local09, local10
0921c     02 2E 66 F0 | 	shl	local09, #2
09220     03 00 00 FF 
09224     00 E4 85 F1 | 	sub	objptr, ##1536
09228     F2 2E 02 F1 | 	add	local09, objptr
0922c     04 2E 06 F1 | 	add	local09, #4
09230     17 2B 62 FC | 	wrlong	local07, local09
09234     03 00 00 FF 
09238     00 E4 05 F1 | 	add	objptr, ##1536
0923c     F2 2E 02 FB | 	rdlong	local09, objptr
09240     17 31 02 F6 | 	mov	local10, local09
09244     01 30 66 F0 | 	shl	local10, #1
09248     17 31 02 F1 | 	add	local10, local09
0924c     02 30 66 F0 | 	shl	local10, #2
09250     03 00 00 FF 
09254     00 E4 85 F1 | 	sub	objptr, ##1536
09258     F2 30 02 F1 | 	add	local10, objptr
0925c     08 30 06 F1 | 	add	local10, #8
09260     18 29 62 FC | 	wrlong	local06, local10
09264     03 00 00 FF 
09268     00 E4 05 F1 | 	add	objptr, ##1536
0926c     F2 2C 02 FB | 	rdlong	local08, objptr
09270     01 2C 06 F1 | 	add	local08, #1
09274     F2 2C 62 FC | 	wrlong	local08, objptr
09278     69 00 00 FF 
0927c     50 E4 85 F1 | 	sub	objptr, ##53840
09280                 | LR__0725
09280     A7 F0 03 F6 | 	mov	ptra, fp
09284     B2 00 A0 FD | 	call	#popregs_
09288                 | _getfun_ret
09288     2D 00 64 FD | 	ret
0928c                 | 
0928c                 | '   
0928c                 | '   
0928c                 | ' sub getvar(m as integer) 
0928c                 | _getvar
0928c     0A 4A 05 F6 | 	mov	COUNT_, #10
09290     A8 00 A0 FD | 	call	#pushregs_
09294                 | _getvar_enter
09294     09 25 02 F6 | 	mov	local04, arg01
09298     56 00 00 FF 
0929c     18 E4 05 F1 | 	add	objptr, ##44056
092a0     F2 14 02 FB | 	rdlong	arg02, objptr
092a4     03 14 66 F0 | 	shl	arg02, #3
092a8     02 00 00 FF 
092ac     38 E4 85 F1 | 	sub	objptr, ##1080
092b0     F2 14 02 F1 | 	add	arg02, objptr
092b4     0A 27 02 FB | 	rdlong	local05, arg02
092b8     13 13 02 F6 | 	mov	arg01, local05
092bc     01 14 06 F6 | 	mov	arg02, #1
092c0     53 00 00 FF 
092c4     E0 E5 85 F1 | 	sub	objptr, ##42976
092c8     7C 19 B1 FD | 	call	#__system__Right_S
092cc     FD 28 02 F6 | 	mov	local06, result1
092d0     01 2A 66 F6 | 	neg	local07, #1
092d4                 | ' 
092d4                 | ' varname$=lparts(ct).part$
092d4                 | ' suffix$=right$(varname$,1)
092d4                 | ' j=-1
092d4                 | ' 
092d4                 | ' for i=0 to varnum-1
092d4     00 2C 06 F6 | 	mov	local08, #0
092d8     53 00 00 FF 
092dc     DC E5 05 F1 | 	add	objptr, ##42972
092e0     F2 2E 02 FB | 	rdlong	local09, objptr
092e4     53 00 00 FF 
092e8     DC E5 85 F1 | 	sub	objptr, ##42972
092ec                 | LR__0730
092ec     17 2D 52 F2 | 	cmps	local08, local09 wc
092f0     38 00 90 3D |  if_ae	jmp	#LR__0731
092f4                 | '   if variables(i).name=varname$ then j=i : exit
092f4     16 15 02 F6 | 	mov	arg02, local08
092f8     04 14 66 F0 | 	shl	arg02, #4
092fc     33 00 00 FF 
09300     DC E5 05 F1 | 	add	objptr, ##26588
09304     F2 14 02 F1 | 	add	arg02, objptr
09308     0A 13 02 FB | 	rdlong	arg01, arg02
0930c     13 15 02 F6 | 	mov	arg02, local05
09310     33 00 00 FF 
09314     DC E5 85 F1 | 	sub	objptr, ##26588
09318     BC F8 B0 FD | 	call	#__system___string_cmp
0931c     00 FA 0D F2 | 	cmp	result1, #0 wz
09320     16 2B 02 A6 |  if_e	mov	local07, local08
09324     01 2C 06 51 |  if_ne	add	local08, #1
09328     C0 FF 9F 5D |  if_ne	jmp	#LR__0730
0932c                 | LR__0731
0932c                 | ' if  j=-1 andalso varnum<maxvars then   
0932c     FF FF 7F FF 
09330     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
09334     A8 00 90 5D |  if_ne	jmp	#LR__0732
09338     53 00 00 FF 
0933c     DC E5 05 F1 | 	add	objptr, ##42972
09340     F2 2E 02 FB | 	rdlong	local09, objptr
09344     53 00 00 FF 
09348     DC E5 85 F1 | 	sub	objptr, ##42972
0934c     01 00 00 FF 
09350     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
09354     88 00 90 3D |  if_ae	jmp	#LR__0732
09358     53 00 00 FF 
0935c     DC E5 05 F1 | 	add	objptr, ##42972
09360     F2 2E 02 FB | 	rdlong	local09, objptr
09364     04 2E 66 F0 | 	shl	local09, #4
09368     20 00 00 FF 
0936c     00 E4 85 F1 | 	sub	objptr, ##16384
09370     F2 2E 02 F1 | 	add	local09, objptr
09374     17 27 62 FC | 	wrlong	local05, local09
09378     20 00 00 FF 
0937c     00 E4 05 F1 | 	add	objptr, ##16384
09380     F2 2E 02 FB | 	rdlong	local09, objptr
09384     04 2E 66 F0 | 	shl	local09, #4
09388     20 00 00 FF 
0938c     00 E4 85 F1 | 	sub	objptr, ##16384
09390     F2 2E 02 F1 | 	add	local09, objptr
09394     04 2E 06 F1 | 	add	local09, #4
09398     17 01 68 FC | 	wrlong	#0, local09
0939c     20 00 00 FF 
093a0     00 E4 05 F1 | 	add	objptr, ##16384
093a4     F2 2E 02 FB | 	rdlong	local09, objptr
093a8     04 2E 66 F0 | 	shl	local09, #4
093ac     20 00 00 FF 
093b0     00 E4 85 F1 | 	sub	objptr, ##16384
093b4     F2 2E 02 F1 | 	add	local09, objptr
093b8     0C 2E 06 F1 | 	add	local09, #12
093bc     17 39 68 FC | 	wrlong	#28, local09
093c0     20 00 00 FF 
093c4     00 E4 05 F1 | 	add	objptr, ##16384
093c8     F2 2E 02 FB | 	rdlong	local09, objptr
093cc     17 2B 02 F6 | 	mov	local07, local09
093d0     01 2E 06 F1 | 	add	local09, #1
093d4     F2 2E 62 FC | 	wrlong	local09, objptr
093d8     53 00 00 FF 
093dc     DC E5 85 F1 | 	sub	objptr, ##42972
093e0                 | LR__0732
093e0     00 2E 06 F6 | 	mov	local09, #0
093e4                 | ' numpar=0
093e4                 | ' ' check if it is an array
093e4                 | ' 
093e4                 | ' if lparts(ct+1).token=token_lpar then
093e4     56 00 00 FF 
093e8     18 E4 05 F1 | 	add	objptr, ##44056
093ec     F2 2C 02 FB | 	rdlong	local08, objptr
093f0     01 2C 06 F1 | 	add	local08, #1
093f4     03 2C 66 F0 | 	shl	local08, #3
093f8     02 00 00 FF 
093fc     38 E4 85 F1 | 	sub	objptr, ##1080
09400     F2 2C 02 F1 | 	add	local08, objptr
09404     04 2C 06 F1 | 	add	local08, #4
09408     16 2D 02 FB | 	rdlong	local08, local08
0940c     15 2C 0E F2 | 	cmp	local08, #21 wz
09410     53 00 00 FF 
09414     E0 E5 85 F1 | 	sub	objptr, ##42976
09418     08 01 90 5D |  if_ne	jmp	#LR__0737
0941c     56 00 00 FF 
09420     18 E4 05 F1 | 	add	objptr, ##44056
09424     F2 30 02 FB | 	rdlong	local10, objptr
09428     01 30 06 F1 | 	add	local10, #1
0942c     F2 30 62 FC | 	wrlong	local10, objptr
09430     56 00 00 FF 
09434     18 E4 85 F1 | 	sub	objptr, ##44056
09438                 | '   ct+=1 											' omit this lpar, this is for expr list
09438                 | '   do
09438                 | LR__0733
09438     56 00 00 FF 
0943c     18 E4 05 F1 | 	add	objptr, ##44056
09440     F2 2C 02 FB | 	rdlong	local08, objptr
09444     01 2C 06 F1 | 	add	local08, #1
09448     F2 2C 62 FC | 	wrlong	local08, objptr
0944c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0944c                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0944c     03 2C 66 F0 | 	shl	local08, #3
09450     02 00 00 FF 
09454     38 E4 85 F1 | 	sub	objptr, ##1080
09458     F2 2C 02 F1 | 	add	local08, objptr
0945c     04 2C 06 F1 | 	add	local08, #4
09460     16 31 02 FB | 	rdlong	local10, local08
09464     15 30 0E F2 | 	cmp	local10, #21 wz
09468     53 00 00 FF 
0946c     E0 E5 85 F1 | 	sub	objptr, ##42976
09470     40 00 90 5D |  if_ne	jmp	#LR__0734
09474     56 00 00 FF 
09478     18 E4 05 F1 | 	add	objptr, ##44056
0947c     F2 30 02 FB | 	rdlong	local10, objptr
09480     01 30 06 F1 | 	add	local10, #1
09484     F2 30 62 FC | 	wrlong	local10, objptr
09488     56 00 00 FF 
0948c     18 E4 85 F1 | 	sub	objptr, ##44056
09490     74 EE BF FD | 	call	#_expr
09494     56 00 00 FF 
09498     18 E4 05 F1 | 	add	objptr, ##44056
0949c     F2 30 02 FB | 	rdlong	local10, objptr
094a0     01 30 06 F1 | 	add	local10, #1
094a4     F2 30 62 FC | 	wrlong	local10, objptr
094a8     56 00 00 FF 
094ac     18 E4 85 F1 | 	sub	objptr, ##44056
094b0     04 00 90 FD | 	jmp	#LR__0735
094b4                 | LR__0734
094b4     50 EE BF FD | 	call	#_expr
094b8                 | LR__0735
094b8     01 2E 06 F1 | 	add	local09, #1
094bc     56 00 00 FF 
094c0     18 E4 05 F1 | 	add	objptr, ##44056
094c4     F2 2C 02 FB | 	rdlong	local08, objptr
094c8     03 2C 66 F0 | 	shl	local08, #3
094cc     02 00 00 FF 
094d0     38 E4 85 F1 | 	sub	objptr, ##1080
094d4     F2 2C 02 F1 | 	add	local08, objptr
094d8     04 2C 06 F1 | 	add	local08, #4
094dc     16 31 02 FB | 	rdlong	local10, local08
094e0     14 30 0E F2 | 	cmp	local10, #20 wz
094e4     53 00 00 FF 
094e8     E0 E5 85 F1 | 	sub	objptr, ##42976
094ec     34 00 90 AD |  if_e	jmp	#LR__0736
094f0     56 00 00 FF 
094f4     18 E4 05 F1 | 	add	objptr, ##44056
094f8     F2 30 02 FB | 	rdlong	local10, objptr
094fc     03 30 66 F0 | 	shl	local10, #3
09500     02 00 00 FF 
09504     38 E4 85 F1 | 	sub	objptr, ##1080
09508     F2 30 02 F1 | 	add	local10, objptr
0950c     04 30 06 F1 | 	add	local10, #4
09510     18 31 02 FB | 	rdlong	local10, local10
09514     FE 31 0E F2 | 	cmp	local10, #510 wz
09518     53 00 00 FF 
0951c     E0 E5 85 F1 | 	sub	objptr, ##42976
09520     14 FF 9F 5D |  if_ne	jmp	#LR__0733
09524                 | LR__0736
09524                 | LR__0737
09524     17 21 02 F6 | 	mov	local02, local09
09528     11 22 06 F6 | 	mov	local03, #17
0952c     15 1F 02 F6 | 	mov	local01, local07
09530     0F 31 02 F6 | 	mov	local10, local01
09534     10 2F 02 F6 | 	mov	local09, local02
09538     11 2D 02 F6 | 	mov	local08, local03
0953c     69 00 00 FF 
09540     50 E4 05 F1 | 	add	objptr, ##53840
09544     F2 2A 02 FB | 	rdlong	local07, objptr
09548     15 29 02 F6 | 	mov	local06, local07
0954c     01 28 66 F0 | 	shl	local06, #1
09550     15 29 02 F1 | 	add	local06, local07
09554     02 28 66 F0 | 	shl	local06, #2
09558     03 00 00 FF 
0955c     00 E4 85 F1 | 	sub	objptr, ##1536
09560     F2 28 02 F1 | 	add	local06, objptr
09564     14 31 62 FC | 	wrlong	local10, local06
09568     03 00 00 FF 
0956c     00 E4 05 F1 | 	add	objptr, ##1536
09570     F2 30 02 FB | 	rdlong	local10, objptr
09574     18 27 02 F6 | 	mov	local05, local10
09578     01 26 66 F0 | 	shl	local05, #1
0957c     18 27 02 F1 | 	add	local05, local10
09580     02 26 66 F0 | 	shl	local05, #2
09584     03 00 00 FF 
09588     00 E4 85 F1 | 	sub	objptr, ##1536
0958c     F2 26 02 F1 | 	add	local05, objptr
09590     04 26 06 F1 | 	add	local05, #4
09594     13 2F 62 FC | 	wrlong	local09, local05
09598     03 00 00 FF 
0959c     00 E4 05 F1 | 	add	objptr, ##1536
095a0     F2 30 02 FB | 	rdlong	local10, objptr
095a4     18 FB 01 F6 | 	mov	result1, local10
095a8     01 FA 65 F0 | 	shl	result1, #1
095ac     18 FB 01 F1 | 	add	result1, local10
095b0     02 FA 65 F0 | 	shl	result1, #2
095b4     03 00 00 FF 
095b8     00 E4 85 F1 | 	sub	objptr, ##1536
095bc     F2 FA 01 F1 | 	add	result1, objptr
095c0     08 FA 05 F1 | 	add	result1, #8
095c4     FD 2C 62 FC | 	wrlong	local08, result1
095c8     03 00 00 FF 
095cc     00 E4 05 F1 | 	add	objptr, ##1536
095d0     F2 30 02 FB | 	rdlong	local10, objptr
095d4     01 30 06 F1 | 	add	local10, #1
095d8     F2 30 62 FC | 	wrlong	local10, objptr
095dc     69 00 00 FF 
095e0     50 E4 85 F1 | 	sub	objptr, ##53840
095e4                 | ' 
095e4                 | ' t2.result.twowords(1)=numpar
095e4                 | ' 
095e4                 | ' 
095e4                 | ' 
095e4                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
095e4                 | ' 
095e4                 | ' 
095e4                 | '  
095e4                 | ' 
095e4                 | ' 701 
095e4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
095e4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
095e4     FF FF 7F FF 
095e8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
095ec     B8 00 90 5D |  if_ne	jmp	#LR__0738
095f0     15 22 06 F6 | 	mov	local03, #21
095f4     0F 31 02 F6 | 	mov	local10, local01
095f8     10 2F 02 F6 | 	mov	local09, local02
095fc     11 2D 02 F6 | 	mov	local08, local03
09600     69 00 00 FF 
09604     50 E4 05 F1 | 	add	objptr, ##53840
09608     F2 2A 02 FB | 	rdlong	local07, objptr
0960c     15 29 02 F6 | 	mov	local06, local07
09610     01 28 66 F0 | 	shl	local06, #1
09614     15 29 02 F1 | 	add	local06, local07
09618     02 28 66 F0 | 	shl	local06, #2
0961c     03 00 00 FF 
09620     00 E4 85 F1 | 	sub	objptr, ##1536
09624     F2 28 02 F1 | 	add	local06, objptr
09628     14 31 62 FC | 	wrlong	local10, local06
0962c     03 00 00 FF 
09630     00 E4 05 F1 | 	add	objptr, ##1536
09634     F2 1E 02 FB | 	rdlong	local01, objptr
09638     0F 27 02 F6 | 	mov	local05, local01
0963c     01 26 66 F0 | 	shl	local05, #1
09640     0F 27 02 F1 | 	add	local05, local01
09644     02 26 66 F0 | 	shl	local05, #2
09648     03 00 00 FF 
0964c     00 E4 85 F1 | 	sub	objptr, ##1536
09650     F2 26 02 F1 | 	add	local05, objptr
09654     04 26 06 F1 | 	add	local05, #4
09658     13 2F 62 FC | 	wrlong	local09, local05
0965c     03 00 00 FF 
09660     00 E4 05 F1 | 	add	objptr, ##1536
09664     F2 1E 02 FB | 	rdlong	local01, objptr
09668     0F FB 01 F6 | 	mov	result1, local01
0966c     01 FA 65 F0 | 	shl	result1, #1
09670     0F FB 01 F1 | 	add	result1, local01
09674     02 FA 65 F0 | 	shl	result1, #2
09678     03 00 00 FF 
0967c     00 E4 85 F1 | 	sub	objptr, ##1536
09680     F2 FA 01 F1 | 	add	result1, objptr
09684     08 FA 05 F1 | 	add	result1, #8
09688     FD 2C 62 FC | 	wrlong	local08, result1
0968c     03 00 00 FF 
09690     00 E4 05 F1 | 	add	objptr, ##1536
09694     F2 30 02 FB | 	rdlong	local10, objptr
09698     01 30 06 F1 | 	add	local10, #1
0969c     F2 30 62 FC | 	wrlong	local10, objptr
096a0     69 00 00 FF 
096a4     50 E4 85 F1 | 	sub	objptr, ##53840
096a8                 | LR__0738
096a8     A7 F0 03 F6 | 	mov	ptra, fp
096ac     B2 00 A0 FD | 	call	#popregs_
096b0                 | _getvar_ret
096b0     2D 00 64 FD | 	ret
096b4                 | 
096b4                 | ' 
096b4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
096b4                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
096b4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
096b4                 | ' 
096b4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
096b4                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
096b4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
096b4                 | ' 
096b4                 | ' function execute_line (astart=0 as integer) as integer
096b4                 | _execute_line
096b4     04 4A 05 F6 | 	mov	COUNT_, #4
096b8     A8 00 A0 FD | 	call	#pushregs_
096bc     78 00 00 FF 
096c0     88 E5 05 F1 | 	add	objptr, ##61832
096c4     F2 00 68 FC | 	wrlong	#0, objptr
096c8                 | ' runptr2=0
096c8                 | ' for lineptr_e=astart to lineptr-1
096c8     0F 00 00 FF 
096cc     34 E5 85 F1 | 	sub	objptr, ##7988
096d0     F2 12 62 FC | 	wrlong	arg01, objptr
096d4     04 E4 85 F1 | 	sub	objptr, #4
096d8     F2 1E 02 FB | 	rdlong	local01, objptr
096dc     69 00 00 FF 
096e0     50 E4 85 F1 | 	sub	objptr, ##53840
096e4                 | LR__0740
096e4     69 00 00 FF 
096e8     54 E4 05 F1 | 	add	objptr, ##53844
096ec     F2 FA 01 FB | 	rdlong	result1, objptr
096f0     69 00 00 FF 
096f4     54 E4 85 F1 | 	sub	objptr, ##53844
096f8     0F FB 51 F2 | 	cmps	result1, local01 wc
096fc     98 00 90 3D |  if_ae	jmp	#LR__0741
09700     69 00 00 FF 
09704     54 E4 05 F1 | 	add	objptr, ##53844
09708     F2 FA 01 FB | 	rdlong	result1, objptr
0970c     FD 20 02 F6 | 	mov	local02, result1
09710     01 20 66 F0 | 	shl	local02, #1
09714     FD 20 02 F1 | 	add	local02, result1
09718     02 20 66 F0 | 	shl	local02, #2
0971c     03 00 00 FF 
09720     04 E4 85 F1 | 	sub	objptr, ##1540
09724     F2 20 02 F1 | 	add	local02, objptr
09728     08 20 06 F1 | 	add	local02, #8
0972c     10 21 02 FB | 	rdlong	local02, local02
09730     10 21 E2 F8 | 	getbyte	local02, local02, #0
09734     02 20 66 F0 | 	shl	local02, #2
09738     04 00 00 FF 
0973c     1C E4 85 F1 | 	sub	objptr, ##2076
09740     F2 20 02 F1 | 	add	local02, objptr
09744     10 21 02 FB | 	rdlong	local02, local02
09748     10 23 02 F6 | 	mov	local03, local02
0974c     13 20 46 F7 | 	zerox	local02, #19
09750     14 22 46 F0 | 	shr	local03, #20
09754     02 22 66 F0 | 	shl	local03, #2
09758     ED 22 02 F1 | 	add	local03, __methods__
0975c     11 23 02 FB | 	rdlong	local03, local03
09760     62 00 00 FF 
09764     34 E4 85 F1 | 	sub	objptr, ##50228
09768     F2 24 02 F6 | 	mov	local04, objptr
0976c     10 E5 01 F6 | 	mov	objptr, local02
09770     2D 22 62 FD | 	call	local03
09774     12 E5 01 F6 | 	mov	objptr, local04
09778     69 00 00 FF 
0977c     54 E4 05 F1 | 	add	objptr, ##53844
09780     F2 24 02 FB | 	rdlong	local04, objptr
09784     01 24 06 F1 | 	add	local04, #1
09788     F2 24 62 FC | 	wrlong	local04, objptr
0978c     69 00 00 FF 
09790     54 E4 85 F1 | 	sub	objptr, ##53844
09794     4C FF 9F FD | 	jmp	#LR__0740
09798                 | LR__0741
09798                 | ' return runptr2
09798     78 00 00 FF 
0979c     88 E5 05 F1 | 	add	objptr, ##61832
097a0     F2 FA 01 FB | 	rdlong	result1, objptr
097a4     78 00 00 FF 
097a8     88 E5 85 F1 | 	sub	objptr, ##61832
097ac     A7 F0 03 F6 | 	mov	ptra, fp
097b0     B2 00 A0 FD | 	call	#popregs_
097b4                 | _execute_line_ret
097b4     2D 00 64 FD | 	ret
097b8                 | 
097b8                 | ' 
097b8                 | ' 
097b8                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
097b8                 | ' 
097b8                 | ' function pop() as expr_result
097b8                 | _pop
097b8                 | ' 
097b8                 | ' if stackpointer=0 then
097b8     62 00 00 FF 
097bc     2C E4 05 F1 | 	add	objptr, ##50220
097c0     F2 FA 09 FB | 	rdlong	result1, objptr wz
097c4     62 00 00 FF 
097c8     2C E4 85 F1 | 	sub	objptr, ##50220
097cc     FF 04 06 A6 |  if_e	mov	_var03, #255
097d0     18 00 06 A6 |  if_e	mov	_var01, #24
097d4     68 00 90 AD |  if_e	jmp	#LR__0750
097d8     62 00 00 FF 
097dc     2C E4 05 F1 | 	add	objptr, ##50220
097e0     F2 FA 01 FB | 	rdlong	result1, objptr
097e4     01 FA 85 F1 | 	sub	result1, #1
097e8     F2 FA 61 FC | 	wrlong	result1, objptr
097ec     FD FE 01 F6 | 	mov	result3, result1
097f0     01 FE 65 F0 | 	shl	result3, #1
097f4     FD FE 01 F1 | 	add	result3, result1
097f8     02 FE 65 F0 | 	shl	result3, #2
097fc     0C 00 00 FF 
09800     0C E4 85 F1 | 	sub	objptr, ##6156
09804     F2 FE 01 F1 | 	add	result3, objptr
09808     FF 00 02 FB | 	rdlong	_var01, result3
0980c     04 FE 05 F1 | 	add	result3, #4
09810     FF FE 01 FB | 	rdlong	result3, result3
09814     FD FC 01 F6 | 	mov	result2, result1
09818     01 FC 65 F0 | 	shl	result2, #1
0981c     FD FC 01 F1 | 	add	result2, result1
09820     02 FC 65 F0 | 	shl	result2, #2
09824     F2 FC 01 F1 | 	add	result2, objptr
09828     08 FC 05 F1 | 	add	result2, #8
0982c     FE FA 01 FB | 	rdlong	result1, result2
09830     FF 02 02 F6 | 	mov	_var02, result3
09834     FD 04 02 F6 | 	mov	_var03, result1
09838     56 00 00 FF 
0983c     20 E4 85 F1 | 	sub	objptr, ##44064
09840                 | LR__0750
09840                 | ' return t1
09840     01 FD 01 F6 | 	mov	result2, _var02
09844     02 FF 01 F6 | 	mov	result3, _var03
09848     00 FB 01 F6 | 	mov	result1, _var01
0984c                 | _pop_ret
0984c     2D 00 64 FD | 	ret
09850                 | 
09850                 | ' 
09850                 | ' sub push(t1 as expr_result )
09850                 | _push
09850                 | ' 
09850                 | ' 'print "In push: "; t1.result_type
09850                 | ' 'print "In push: "; t1.result.uresult
09850                 | ' 
09850                 | ' if stackpointer<maxstack then 
09850     62 00 00 FF 
09854     2C E4 05 F1 | 	add	objptr, ##50220
09858     F2 00 02 FB | 	rdlong	_var01, objptr
0985c     62 00 00 FF 
09860     2C E4 85 F1 | 	sub	objptr, ##50220
09864     01 00 00 FF 
09868     00 00 56 F2 | 	cmps	_var01, ##512 wc
0986c     BC 00 90 3D |  if_ae	jmp	#LR__0760
09870     09 01 02 FB | 	rdlong	_var01, arg01
09874     04 12 06 F1 | 	add	arg01, #4
09878     09 03 02 FB | 	rdlong	_var02, arg01
0987c     04 12 06 F1 | 	add	arg01, #4
09880     09 13 02 FB | 	rdlong	arg01, arg01
09884     62 00 00 FF 
09888     2C E4 05 F1 | 	add	objptr, ##50220
0988c     F2 04 02 FB | 	rdlong	_var03, objptr
09890     02 07 02 F6 | 	mov	_var04, _var03
09894     01 06 66 F0 | 	shl	_var04, #1
09898     02 07 02 F1 | 	add	_var04, _var03
0989c     02 06 66 F0 | 	shl	_var04, #2
098a0     0C 00 00 FF 
098a4     0C E4 85 F1 | 	sub	objptr, ##6156
098a8     F2 06 02 F1 | 	add	_var04, objptr
098ac     03 01 62 FC | 	wrlong	_var01, _var04
098b0     0C 00 00 FF 
098b4     0C E4 05 F1 | 	add	objptr, ##6156
098b8     F2 06 02 FB | 	rdlong	_var04, objptr
098bc     03 05 02 F6 | 	mov	_var03, _var04
098c0     01 04 66 F0 | 	shl	_var03, #1
098c4     03 05 02 F1 | 	add	_var03, _var04
098c8     02 04 66 F0 | 	shl	_var03, #2
098cc     0C 00 00 FF 
098d0     0C E4 85 F1 | 	sub	objptr, ##6156
098d4     F2 04 02 F1 | 	add	_var03, objptr
098d8     04 04 06 F1 | 	add	_var03, #4
098dc     02 03 62 FC | 	wrlong	_var02, _var03
098e0     0C 00 00 FF 
098e4     0C E4 05 F1 | 	add	objptr, ##6156
098e8     F2 06 02 FB | 	rdlong	_var04, objptr
098ec     03 05 02 F6 | 	mov	_var03, _var04
098f0     01 04 66 F0 | 	shl	_var03, #1
098f4     03 05 02 F1 | 	add	_var03, _var04
098f8     02 04 66 F0 | 	shl	_var03, #2
098fc     0C 00 00 FF 
09900     0C E4 85 F1 | 	sub	objptr, ##6156
09904     F2 04 02 F1 | 	add	_var03, objptr
09908     08 04 06 F1 | 	add	_var03, #8
0990c     02 13 62 FC | 	wrlong	arg01, _var03
09910     0C 00 00 FF 
09914     0C E4 05 F1 | 	add	objptr, ##6156
09918     F2 00 02 FB | 	rdlong	_var01, objptr
0991c     01 00 06 F1 | 	add	_var01, #1
09920     F2 00 62 FC | 	wrlong	_var01, objptr
09924     62 00 00 FF 
09928     2C E4 85 F1 | 	sub	objptr, ##50220
0992c                 | LR__0760
0992c                 | _push_ret
0992c     2D 00 64 FD | 	ret
09930                 | 
09930                 | ' 
09930                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
09930                 | ' 
09930                 | ' sub do_push
09930                 | _do_push
09930                 | ' if stackpointer<maxstack then 
09930     62 00 00 FF 
09934     2C E4 05 F1 | 	add	objptr, ##50220
09938     F2 00 02 FB | 	rdlong	_var01, objptr
0993c     62 00 00 FF 
09940     2C E4 85 F1 | 	sub	objptr, ##50220
09944     01 00 00 FF 
09948     00 00 56 F2 | 	cmps	_var01, ##512 wc
0994c     F8 00 90 3D |  if_ae	jmp	#LR__0770
09950     69 00 00 FF 
09954     54 E4 05 F1 | 	add	objptr, ##53844
09958     F2 02 02 FB | 	rdlong	_var02, objptr
0995c     01 05 02 F6 | 	mov	_var03, _var02
09960     01 04 66 F0 | 	shl	_var03, #1
09964     01 05 02 F1 | 	add	_var03, _var02
09968     02 04 66 F0 | 	shl	_var03, #2
0996c     03 00 00 FF 
09970     04 E4 85 F1 | 	sub	objptr, ##1540
09974     F2 04 02 F1 | 	add	_var03, objptr
09978     02 01 02 FB | 	rdlong	_var01, _var03
0997c     04 04 06 F1 | 	add	_var03, #4
09980     02 07 02 FB | 	rdlong	_var04, _var03
09984     01 05 02 F6 | 	mov	_var03, _var02
09988     01 04 66 F0 | 	shl	_var03, #1
0998c     01 05 02 F1 | 	add	_var03, _var02
09990     02 04 66 F0 | 	shl	_var03, #2
09994     F2 04 02 F1 | 	add	_var03, objptr
09998     08 04 06 F1 | 	add	_var03, #8
0999c     02 03 02 FB | 	rdlong	_var02, _var03
099a0     04 00 00 FF 
099a4     24 E4 85 F1 | 	sub	objptr, ##2084
099a8     F2 04 02 FB | 	rdlong	_var03, objptr
099ac     02 09 02 F6 | 	mov	_var05, _var03
099b0     01 08 66 F0 | 	shl	_var05, #1
099b4     02 09 02 F1 | 	add	_var05, _var03
099b8     02 08 66 F0 | 	shl	_var05, #2
099bc     0C 00 00 FF 
099c0     0C E4 85 F1 | 	sub	objptr, ##6156
099c4     F2 08 02 F1 | 	add	_var05, objptr
099c8     04 01 62 FC | 	wrlong	_var01, _var05
099cc     0C 00 00 FF 
099d0     0C E4 05 F1 | 	add	objptr, ##6156
099d4     F2 08 02 FB | 	rdlong	_var05, objptr
099d8     04 05 02 F6 | 	mov	_var03, _var05
099dc     01 04 66 F0 | 	shl	_var03, #1
099e0     04 05 02 F1 | 	add	_var03, _var05
099e4     02 04 66 F0 | 	shl	_var03, #2
099e8     0C 00 00 FF 
099ec     0C E4 85 F1 | 	sub	objptr, ##6156
099f0     F2 04 02 F1 | 	add	_var03, objptr
099f4     04 04 06 F1 | 	add	_var03, #4
099f8     02 07 62 FC | 	wrlong	_var04, _var03
099fc     0C 00 00 FF 
09a00     0C E4 05 F1 | 	add	objptr, ##6156
09a04     F2 08 02 FB | 	rdlong	_var05, objptr
09a08     04 07 02 F6 | 	mov	_var04, _var05
09a0c     01 06 66 F0 | 	shl	_var04, #1
09a10     04 07 02 F1 | 	add	_var04, _var05
09a14     02 06 66 F0 | 	shl	_var04, #2
09a18     0C 00 00 FF 
09a1c     0C E4 85 F1 | 	sub	objptr, ##6156
09a20     F2 06 02 F1 | 	add	_var04, objptr
09a24     08 06 06 F1 | 	add	_var04, #8
09a28     03 03 62 FC | 	wrlong	_var02, _var04
09a2c     0C 00 00 FF 
09a30     0C E4 05 F1 | 	add	objptr, ##6156
09a34     F2 00 02 FB | 	rdlong	_var01, objptr
09a38     01 00 06 F1 | 	add	_var01, #1
09a3c     F2 00 62 FC | 	wrlong	_var01, objptr
09a40     62 00 00 FF 
09a44     2C E4 85 F1 | 	sub	objptr, ##50220
09a48                 | LR__0770
09a48                 | _do_push_ret
09a48     2D 00 64 FD | 	ret
09a4c                 | 
09a4c                 | ' 
09a4c                 | '   
09a4c                 | ' sub csave_block(address as ulong)
09a4c                 | _csave_block
09a4c     09 01 02 F6 | 	mov	_var01, arg01
09a50                 | ' 
09a50                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
09a50                 | ' ' we enter it at the state of playing 1 kHz header tone
09a50                 | ' 
09a50                 | ' for i=0 to 63 step 2
09a50     00 02 06 F6 | 	mov	_var02, #0
09a54                 | LR__0780
09a54                 | '   do: loop until lpeek(base+32*7)>32768
09a54     55 00 00 FF 
09a58     E4 E5 05 F1 | 	add	objptr, ##44004
09a5c     97 0C 48 FB | 	callpa	#(@LR__0782-@LR__0781)>>2,fcache_load_ptr_
09a60                 | LR__0781
09a60     F2 12 02 FB | 	rdlong	arg01, objptr
09a64     E0 12 06 F1 | 	add	arg01, #224
09a68     09 FB 01 FB | 	rdlong	result1, arg01
09a6c     40 00 00 FF 
09a70     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09a74     E8 FF 9F CD |  if_b	jmp	#LR__0781
09a78                 | LR__0782
09a78     00 13 02 F6 | 	mov	arg01, _var01
09a7c     01 05 02 F6 | 	mov	_var03, _var02
09a80     02 04 66 F0 | 	shl	_var03, #2
09a84     02 13 02 F1 | 	add	arg01, _var03
09a88     09 07 02 FB | 	rdlong	_var04, arg01
09a8c     24 00 00 FF 
09a90     C0 E4 05 F1 | 	add	objptr, ##18624
09a94     F2 06 62 FC | 	wrlong	_var04, objptr
09a98     7A 00 00 FF 
09a9c     A4 E4 85 F1 | 	sub	objptr, ##62628
09aa0                 | '   q=lpeek(address+4*i)
09aa0                 | '      for bit=0 to 31
09aa0     00 08 06 F6 | 	mov	_var05, #0
09aa4     97 84 48 FB | 	callpa	#(@LR__0787-@LR__0783)>>2,fcache_load_ptr_
09aa8                 | LR__0783
09aa8                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
09aa8     7A 00 00 FF 
09aac     A4 E4 05 F1 | 	add	objptr, ##62628
09ab0     F2 06 02 FB | 	rdlong	_var04, objptr
09ab4     7A 00 00 FF 
09ab8     A4 E4 85 F1 | 	sub	objptr, ##62628
09abc     04 05 C2 F9 | 	decod	_var03, _var05
09ac0     02 07 CA F7 | 	test	_var04, _var03 wz
09ac4     60 00 90 AD |  if_e	jmp	#LR__0784
09ac8     04 05 02 F6 | 	mov	_var03, _var05
09acc     02 04 66 F0 | 	shl	_var03, #2
09ad0     76 00 00 FF 
09ad4     80 E4 05 F1 | 	add	objptr, ##60544
09ad8     F2 04 02 F1 | 	add	_var03, objptr
09adc     02 FF 48 FC | 	wrbyte	#127, _var03
09ae0     04 05 02 F6 | 	mov	_var03, _var05
09ae4     02 04 66 F0 | 	shl	_var03, #2
09ae8     01 04 06 F1 | 	add	_var03, #1
09aec     F2 04 02 F1 | 	add	_var03, objptr
09af0     02 01 49 FC | 	wrbyte	#128, _var03
09af4     04 05 02 F6 | 	mov	_var03, _var05
09af8     02 04 66 F0 | 	shl	_var03, #2
09afc     02 04 06 F1 | 	add	_var03, #2
09b00     F2 04 02 F1 | 	add	_var03, objptr
09b04     02 FF 48 FC | 	wrbyte	#127, _var03
09b08     04 05 02 F6 | 	mov	_var03, _var05
09b0c     02 04 66 F0 | 	shl	_var03, #2
09b10     03 04 06 F1 | 	add	_var03, #3
09b14     F2 04 02 F1 | 	add	_var03, objptr
09b18     02 01 49 FC | 	wrbyte	#128, _var03
09b1c     76 00 00 FF 
09b20     80 E4 85 F1 | 	sub	objptr, ##60544
09b24     5C 00 90 FD | 	jmp	#LR__0785
09b28                 | LR__0784
09b28     04 05 02 F6 | 	mov	_var03, _var05
09b2c     02 04 66 F0 | 	shl	_var03, #2
09b30     76 00 00 FF 
09b34     80 E4 05 F1 | 	add	objptr, ##60544
09b38     F2 04 02 F1 | 	add	_var03, objptr
09b3c     02 01 49 FC | 	wrbyte	#128, _var03
09b40     04 05 02 F6 | 	mov	_var03, _var05
09b44     02 04 66 F0 | 	shl	_var03, #2
09b48     01 04 06 F1 | 	add	_var03, #1
09b4c     F2 04 02 F1 | 	add	_var03, objptr
09b50     02 01 49 FC | 	wrbyte	#128, _var03
09b54     04 05 02 F6 | 	mov	_var03, _var05
09b58     02 04 66 F0 | 	shl	_var03, #2
09b5c     02 04 06 F1 | 	add	_var03, #2
09b60     F2 04 02 F1 | 	add	_var03, objptr
09b64     02 FF 48 FC | 	wrbyte	#127, _var03
09b68     04 05 02 F6 | 	mov	_var03, _var05
09b6c     02 04 66 F0 | 	shl	_var03, #2
09b70     03 04 06 F1 | 	add	_var03, #3
09b74     F2 04 02 F1 | 	add	_var03, objptr
09b78     02 FF 48 FC | 	wrbyte	#127, _var03
09b7c     76 00 00 FF 
09b80     80 E4 85 F1 | 	sub	objptr, ##60544
09b84                 | LR__0785
09b84     01 08 06 F1 | 	add	_var05, #1
09b88     20 08 56 F2 | 	cmps	_var05, #32 wc
09b8c     18 FF 9F CD |  if_b	jmp	#LR__0783
09b90                 | '   do: loop until lpeek(base+32*7)<32768
09b90     55 00 00 FF 
09b94     E4 E5 05 F1 | 	add	objptr, ##44004
09b98                 | LR__0786
09b98     F2 12 02 FB | 	rdlong	arg01, objptr
09b9c     E0 12 06 F1 | 	add	arg01, #224
09ba0     09 FB 01 FB | 	rdlong	result1, arg01
09ba4     40 00 00 FF 
09ba8     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09bac     E8 FF 9F 3D |  if_ae	jmp	#LR__0786
09bb0                 | LR__0787
09bb0     00 13 02 F6 | 	mov	arg01, _var01
09bb4     04 12 06 F1 | 	add	arg01, #4
09bb8     01 05 02 F6 | 	mov	_var03, _var02
09bbc     02 04 66 F0 | 	shl	_var03, #2
09bc0     02 13 02 F1 | 	add	arg01, _var03
09bc4     09 07 02 FB | 	rdlong	_var04, arg01
09bc8     24 00 00 FF 
09bcc     C0 E4 05 F1 | 	add	objptr, ##18624
09bd0     F2 06 62 FC | 	wrlong	_var04, objptr
09bd4     7A 00 00 FF 
09bd8     A4 E4 85 F1 | 	sub	objptr, ##62628
09bdc                 | '   q=lpeek(address+4+4*i)
09bdc                 | '      for bit=0 to 31
09bdc     00 08 06 F6 | 	mov	_var05, #0
09be0     97 94 48 FB | 	callpa	#(@LR__0791-@LR__0788)>>2,fcache_load_ptr_
09be4                 | LR__0788
09be4                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
09be4     7A 00 00 FF 
09be8     A4 E4 05 F1 | 	add	objptr, ##62628
09bec     F2 06 02 FB | 	rdlong	_var04, objptr
09bf0     7A 00 00 FF 
09bf4     A4 E4 85 F1 | 	sub	objptr, ##62628
09bf8     04 05 C2 F9 | 	decod	_var03, _var05
09bfc     02 07 CA F7 | 	test	_var04, _var03 wz
09c00     80 00 90 AD |  if_e	jmp	#LR__0789
09c04     04 0B 02 F6 | 	mov	_var06, _var05
09c08     02 0A 66 F0 | 	shl	_var06, #2
09c0c     80 04 06 F6 | 	mov	_var03, #128
09c10     05 05 02 F1 | 	add	_var03, _var06
09c14     76 00 00 FF 
09c18     80 E4 05 F1 | 	add	objptr, ##60544
09c1c     F2 04 02 F1 | 	add	_var03, objptr
09c20     02 FF 48 FC | 	wrbyte	#127, _var03
09c24     04 0B 02 F6 | 	mov	_var06, _var05
09c28     02 0A 66 F0 | 	shl	_var06, #2
09c2c     80 04 06 F6 | 	mov	_var03, #128
09c30     05 05 02 F1 | 	add	_var03, _var06
09c34     01 04 06 F1 | 	add	_var03, #1
09c38     F2 04 02 F1 | 	add	_var03, objptr
09c3c     02 01 49 FC | 	wrbyte	#128, _var03
09c40     04 0B 02 F6 | 	mov	_var06, _var05
09c44     02 0A 66 F0 | 	shl	_var06, #2
09c48     80 04 06 F6 | 	mov	_var03, #128
09c4c     05 05 02 F1 | 	add	_var03, _var06
09c50     02 04 06 F1 | 	add	_var03, #2
09c54     F2 04 02 F1 | 	add	_var03, objptr
09c58     02 FF 48 FC | 	wrbyte	#127, _var03
09c5c     04 0B 02 F6 | 	mov	_var06, _var05
09c60     02 0A 66 F0 | 	shl	_var06, #2
09c64     80 04 06 F6 | 	mov	_var03, #128
09c68     05 05 02 F1 | 	add	_var03, _var06
09c6c     03 04 06 F1 | 	add	_var03, #3
09c70     F2 04 02 F1 | 	add	_var03, objptr
09c74     02 01 49 FC | 	wrbyte	#128, _var03
09c78     76 00 00 FF 
09c7c     80 E4 85 F1 | 	sub	objptr, ##60544
09c80     7C 00 90 FD | 	jmp	#LR__0790
09c84                 | LR__0789
09c84     04 0B 02 F6 | 	mov	_var06, _var05
09c88     02 0A 66 F0 | 	shl	_var06, #2
09c8c     80 04 06 F6 | 	mov	_var03, #128
09c90     05 05 02 F1 | 	add	_var03, _var06
09c94     76 00 00 FF 
09c98     80 E4 05 F1 | 	add	objptr, ##60544
09c9c     F2 04 02 F1 | 	add	_var03, objptr
09ca0     02 01 49 FC | 	wrbyte	#128, _var03
09ca4     04 0B 02 F6 | 	mov	_var06, _var05
09ca8     02 0A 66 F0 | 	shl	_var06, #2
09cac     80 04 06 F6 | 	mov	_var03, #128
09cb0     05 05 02 F1 | 	add	_var03, _var06
09cb4     01 04 06 F1 | 	add	_var03, #1
09cb8     F2 04 02 F1 | 	add	_var03, objptr
09cbc     02 01 49 FC | 	wrbyte	#128, _var03
09cc0     04 0B 02 F6 | 	mov	_var06, _var05
09cc4     02 0A 66 F0 | 	shl	_var06, #2
09cc8     80 04 06 F6 | 	mov	_var03, #128
09ccc     05 05 02 F1 | 	add	_var03, _var06
09cd0     02 04 06 F1 | 	add	_var03, #2
09cd4     F2 04 02 F1 | 	add	_var03, objptr
09cd8     02 FF 48 FC | 	wrbyte	#127, _var03
09cdc     04 0B 02 F6 | 	mov	_var06, _var05
09ce0     02 0A 66 F0 | 	shl	_var06, #2
09ce4     80 04 06 F6 | 	mov	_var03, #128
09ce8     05 05 02 F1 | 	add	_var03, _var06
09cec     03 04 06 F1 | 	add	_var03, #3
09cf0     F2 04 02 F1 | 	add	_var03, objptr
09cf4     02 FF 48 FC | 	wrbyte	#127, _var03
09cf8     76 00 00 FF 
09cfc     80 E4 85 F1 | 	sub	objptr, ##60544
09d00                 | LR__0790
09d00     01 08 06 F1 | 	add	_var05, #1
09d04     20 08 56 F2 | 	cmps	_var05, #32 wc
09d08     D8 FE 9F CD |  if_b	jmp	#LR__0788
09d0c                 | LR__0791
09d0c     02 02 06 F1 | 	add	_var02, #2
09d10     40 02 56 F2 | 	cmps	_var02, #64 wc
09d14     3C FD 9F CD |  if_b	jmp	#LR__0780
09d18                 | ' do: loop until lpeek(base+32*7)>32768
09d18     55 00 00 FF 
09d1c     E4 E5 05 F1 | 	add	objptr, ##44004
09d20     97 84 48 FB | 	callpa	#(@LR__0800-@LR__0792)>>2,fcache_load_ptr_
09d24                 | LR__0792
09d24     F2 12 02 FB | 	rdlong	arg01, objptr
09d28     E0 12 06 F1 | 	add	arg01, #224
09d2c     09 FB 01 FB | 	rdlong	result1, arg01
09d30     40 00 00 FF 
09d34     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09d38     E8 FF 9F CD |  if_b	jmp	#LR__0792
09d3c     55 00 00 FF 
09d40     E4 E5 85 F1 | 	sub	objptr, ##44004
09d44                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09d44     00 02 06 F6 | 	mov	_var02, #0
09d48                 | LR__0793
09d48     01 07 52 F6 | 	abs	_var04, _var02 wc
09d4c     07 06 06 F5 | 	and	_var04, #7
09d50     03 07 82 F6 | 	negc	_var04, _var04
09d54     04 06 56 F2 | 	cmps	_var04, #4 wc
09d58     20 00 90 3D |  if_ae	jmp	#LR__0794
09d5c     01 0B 02 F6 | 	mov	_var06, _var02
09d60     76 00 00 FF 
09d64     80 E4 05 F1 | 	add	objptr, ##60544
09d68     F2 0A 02 F1 | 	add	_var06, objptr
09d6c     05 FF 48 FC | 	wrbyte	#127, _var06
09d70     76 00 00 FF 
09d74     80 E4 85 F1 | 	sub	objptr, ##60544
09d78     1C 00 90 FD | 	jmp	#LR__0795
09d7c                 | LR__0794
09d7c     01 0B 02 F6 | 	mov	_var06, _var02
09d80     76 00 00 FF 
09d84     80 E4 05 F1 | 	add	objptr, ##60544
09d88     F2 0A 02 F1 | 	add	_var06, objptr
09d8c     05 01 49 FC | 	wrbyte	#128, _var06
09d90     76 00 00 FF 
09d94     80 E4 85 F1 | 	sub	objptr, ##60544
09d98                 | LR__0795
09d98     01 02 06 F1 | 	add	_var02, #1
09d9c     80 02 56 F2 | 	cmps	_var02, #128 wc
09da0     A4 FF 9F CD |  if_b	jmp	#LR__0793
09da4                 | ' 
09da4                 | ' do: loop until lpeek(base+32*7)<32768
09da4     55 00 00 FF 
09da8     E4 E5 05 F1 | 	add	objptr, ##44004
09dac                 | LR__0796
09dac     F2 12 02 FB | 	rdlong	arg01, objptr
09db0     E0 12 06 F1 | 	add	arg01, #224
09db4     09 FB 01 FB | 	rdlong	result1, arg01
09db8     40 00 00 FF 
09dbc     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09dc0     E8 FF 9F 3D |  if_ae	jmp	#LR__0796
09dc4     55 00 00 FF 
09dc8     E4 E5 85 F1 | 	sub	objptr, ##44004
09dcc                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09dcc     80 02 06 F6 | 	mov	_var02, #128
09dd0                 | LR__0797
09dd0     01 07 52 F6 | 	abs	_var04, _var02 wc
09dd4     07 06 06 F5 | 	and	_var04, #7
09dd8     03 07 82 F6 | 	negc	_var04, _var04
09ddc     04 06 56 F2 | 	cmps	_var04, #4 wc
09de0     20 00 90 3D |  if_ae	jmp	#LR__0798
09de4     01 0B 02 F6 | 	mov	_var06, _var02
09de8     76 00 00 FF 
09dec     80 E4 05 F1 | 	add	objptr, ##60544
09df0     F2 0A 02 F1 | 	add	_var06, objptr
09df4     05 FF 48 FC | 	wrbyte	#127, _var06
09df8     76 00 00 FF 
09dfc     80 E4 85 F1 | 	sub	objptr, ##60544
09e00     1C 00 90 FD | 	jmp	#LR__0799
09e04                 | LR__0798
09e04     01 0B 02 F6 | 	mov	_var06, _var02
09e08     76 00 00 FF 
09e0c     80 E4 05 F1 | 	add	objptr, ##60544
09e10     F2 0A 02 F1 | 	add	_var06, objptr
09e14     05 01 49 FC | 	wrbyte	#128, _var06
09e18     76 00 00 FF 
09e1c     80 E4 85 F1 | 	sub	objptr, ##60544
09e20                 | LR__0799
09e20     01 02 06 F1 | 	add	_var02, #1
09e24     00 03 16 F2 | 	cmp	_var02, #256 wc
09e28     A4 FF 9F CD |  if_b	jmp	#LR__0797
09e2c                 | LR__0800
09e2c                 | _csave_block_ret
09e2c     2D 00 64 FD | 	ret
09e30                 | 
09e30                 | ' 
09e30                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
09e30                 | _csave_addtoblock
09e30     04 4A 05 F6 | 	mov	COUNT_, #4
09e34     A8 00 A0 FD | 	call	#pushregs_
09e38     09 1F 02 F6 | 	mov	local01, arg01
09e3c                 | ' 
09e3c                 | ' 
09e3c                 | ' if force=0 then
09e3c     07 14 4E F7 | 	zerox	arg02, #7 wz
09e40     78 00 90 5D |  if_ne	jmp	#LR__0810
09e44     78 00 00 FF 
09e48     80 E5 05 F1 | 	add	objptr, ##61824
09e4c     F2 14 02 FB | 	rdlong	arg02, objptr
09e50     02 00 00 FF 
09e54     00 E4 85 F1 | 	sub	objptr, ##1024
09e58     F2 14 02 F1 | 	add	arg02, objptr
09e5c     0A 1F 42 FC | 	wrbyte	local01, arg02
09e60     02 00 00 FF 
09e64     00 E4 05 F1 | 	add	objptr, ##1024
09e68     F2 1E 02 FB | 	rdlong	local01, objptr
09e6c     01 1E 06 F1 | 	add	local01, #1
09e70     F2 1E 62 FC | 	wrlong	local01, objptr
09e74                 | '   block(blockptr)=d
09e74                 | '   blockptr+=1
09e74                 | '   if blockptr>=255 then
09e74     78 00 00 FF 
09e78     80 E5 85 F1 | 	sub	objptr, ##61824
09e7c     FF 1E 16 F2 | 	cmp	local01, #255 wc
09e80     E4 00 90 CD |  if_b	jmp	#LR__0814
09e84     76 00 00 FF 
09e88     80 E5 05 F1 | 	add	objptr, ##60800
09e8c     F2 12 02 F6 | 	mov	arg01, objptr
09e90     76 00 00 FF 
09e94     80 E5 85 F1 | 	sub	objptr, ##60800
09e98     B0 FB BF FD | 	call	#_csave_block
09e9c     78 00 00 FF 
09ea0     80 E5 05 F1 | 	add	objptr, ##61824
09ea4     F2 00 68 FC | 	wrlong	#0, objptr
09ea8     78 00 00 FF 
09eac     80 E5 85 F1 | 	sub	objptr, ##61824
09eb0     2C 13 06 F6 | 	mov	arg01, #300
09eb4     EC EF B0 FD | 	call	#__system___waitms
09eb8     AC 00 90 FD | 	jmp	#LR__0814
09ebc                 | LR__0810
09ebc     78 00 00 FF 
09ec0     80 E5 05 F1 | 	add	objptr, ##61824
09ec4     F2 20 02 FB | 	rdlong	local02, objptr
09ec8     02 00 00 FF 
09ecc     00 E4 85 F1 | 	sub	objptr, ##1024
09ed0     F2 20 02 F1 | 	add	local02, objptr
09ed4     10 1F 42 FC | 	wrbyte	local01, local02
09ed8                 | '   block(blockptr)=d
09ed8                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
09ed8     02 00 00 FF 
09edc     00 E4 05 F1 | 	add	objptr, ##1024
09ee0     F2 22 02 FB | 	rdlong	local03, objptr
09ee4     78 00 00 FF 
09ee8     80 E5 85 F1 | 	sub	objptr, ##61824
09eec     FF 22 16 F2 | 	cmp	local03, #255 wc
09ef0     40 00 90 3D |  if_ae	jmp	#LR__0813
09ef4     78 00 00 FF 
09ef8     80 E5 05 F1 | 	add	objptr, ##61824
09efc     F2 24 02 FB | 	rdlong	local04, objptr
09f00     78 00 00 FF 
09f04     80 E5 85 F1 | 	sub	objptr, ##61824
09f08                 | LR__0811
09f08     00 25 56 F2 | 	cmps	local04, #256 wc
09f0c     24 00 90 3D |  if_ae	jmp	#LR__0812
09f10     12 21 02 F6 | 	mov	local02, local04
09f14     76 00 00 FF 
09f18     80 E5 05 F1 | 	add	objptr, ##60800
09f1c     F2 20 02 F1 | 	add	local02, objptr
09f20     10 01 48 FC | 	wrbyte	#0, local02
09f24     01 24 06 F1 | 	add	local04, #1
09f28     76 00 00 FF 
09f2c     80 E5 85 F1 | 	sub	objptr, ##60800
09f30     D4 FF 9F FD | 	jmp	#LR__0811
09f34                 | LR__0812
09f34                 | LR__0813
09f34     76 00 00 FF 
09f38     80 E5 05 F1 | 	add	objptr, ##60800
09f3c     F2 12 02 F6 | 	mov	arg01, objptr
09f40     76 00 00 FF 
09f44     80 E5 85 F1 | 	sub	objptr, ##60800
09f48     00 FB BF FD | 	call	#_csave_block
09f4c     78 00 00 FF 
09f50     80 E5 05 F1 | 	add	objptr, ##61824
09f54     F2 00 68 FC | 	wrlong	#0, objptr
09f58     78 00 00 FF 
09f5c     80 E5 85 F1 | 	sub	objptr, ##61824
09f60     2C 13 06 F6 | 	mov	arg01, #300
09f64     3C EF B0 FD | 	call	#__system___waitms
09f68                 | LR__0814
09f68     A7 F0 03 F6 | 	mov	ptra, fp
09f6c     B2 00 A0 FD | 	call	#popregs_
09f70                 | _csave_addtoblock_ret
09f70     2D 00 64 FD | 	ret
09f74                 | 
09f74                 | ' 
09f74                 | ' sub test_csave
09f74                 | _test_csave
09f74     04 4A 05 F6 | 	mov	COUNT_, #4
09f78     A8 00 A0 FD | 	call	#pushregs_
09f7c     C0 F0 07 F1 | 	add	ptra, #192
09f80                 | ' 'dim fileheader,savestart, saveptr as ulong
09f80                 | ' 
09f80                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
09f80     69 00 00 FF 
09f84     58 E4 05 F1 | 	add	objptr, ##53848
09f88     F2 12 02 FB | 	rdlong	arg01, objptr
09f8c     69 00 00 FF 
09f90     58 E4 85 F1 | 	sub	objptr, ##53848
09f94     B0 B8 B0 FD | 	call	#_pslpeek
09f98     FF FF 7F FF 
09f9c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
09fa0     0C 00 90 5D |  if_ne	jmp	#LR__0820
09fa4     1B 12 06 F6 | 	mov	arg01, #27
09fa8     E0 B6 B0 FD | 	call	#_printerror
09fac     0C 03 90 FD | 	jmp	#LR__0832
09fb0                 | LR__0820
09fb0     04 F8 BF FD | 	call	#_pop
09fb4     FF 1E 02 F6 | 	mov	local01, result3
09fb8     90 4E 05 F1 | 	add	fp, #144
09fbc     A7 FA 61 FC | 	wrlong	result1, fp
09fc0     04 4E 05 F1 | 	add	fp, #4
09fc4     A7 FC 61 FC | 	wrlong	result2, fp
09fc8     04 4E 05 F1 | 	add	fp, #4
09fcc     A7 1E 62 FC | 	wrlong	local01, fp
09fd0                 | ' t1=pop()
09fd0                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
09fd0     98 4E 85 F1 | 	sub	fp, #152
09fd4     1F 1E 0E F2 | 	cmp	local01, #31 wz
09fd8     42 01 00 5F 
09fdc     82 1F 06 56 |  if_ne	mov	local01, ##@LR__4555
09fe0     8C 4E 05 51 |  if_ne	add	fp, #140
09fe4     A7 1E 62 5C |  if_ne	wrlong	local01, fp
09fe8     8C 4E 85 51 |  if_ne	sub	fp, #140
09fec     90 4E 05 A1 |  if_e	add	fp, #144
09ff0     A7 1E 02 AB |  if_e	rdlong	local01, fp
09ff4     04 4E 85 A1 |  if_e	sub	fp, #4
09ff8     A7 1E 62 AC |  if_e	wrlong	local01, fp
09ffc     8C 4E 85 A1 |  if_e	sub	fp, #140
0a000                 | ' 
0a000                 | ' ' prepare 1 kHz header wave
0a000                 | ' 
0a000                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a000     A7 00 68 FC | 	wrlong	#0, fp
0a004     97 34 48 FB | 	callpa	#(@LR__0824-@LR__0821)>>2,fcache_load_ptr_
0a008                 | LR__0821
0a008     A7 1E 02 FB | 	rdlong	local01, fp
0a00c     0F 1F 52 F6 | 	abs	local01, local01 wc
0a010     07 1E 06 F5 | 	and	local01, #7
0a014     0F 1F 82 F6 | 	negc	local01, local01
0a018     04 1E 56 F2 | 	cmps	local01, #4 wc
0a01c     20 00 90 3D |  if_ae	jmp	#LR__0822
0a020     A7 1E 02 FB | 	rdlong	local01, fp
0a024     76 00 00 FF 
0a028     80 E4 05 F1 | 	add	objptr, ##60544
0a02c     F2 1E 02 F1 | 	add	local01, objptr
0a030     0F FF 48 FC | 	wrbyte	#127, local01
0a034     76 00 00 FF 
0a038     80 E4 85 F1 | 	sub	objptr, ##60544
0a03c     1C 00 90 FD | 	jmp	#LR__0823
0a040                 | LR__0822
0a040     A7 1E 02 FB | 	rdlong	local01, fp
0a044     76 00 00 FF 
0a048     80 E4 05 F1 | 	add	objptr, ##60544
0a04c     F2 1E 02 F1 | 	add	local01, objptr
0a050     0F 01 49 FC | 	wrbyte	#128, local01
0a054     76 00 00 FF 
0a058     80 E4 85 F1 | 	sub	objptr, ##60544
0a05c                 | LR__0823
0a05c     A7 1E 02 FB | 	rdlong	local01, fp
0a060     01 1E 06 F1 | 	add	local01, #1
0a064     A7 1E 62 FC | 	wrlong	local01, fp
0a068     00 1F 56 F2 | 	cmps	local01, #256 wc
0a06c     98 FF 9F CD |  if_b	jmp	#LR__0821
0a070                 | LR__0824
0a070     76 00 00 FF 
0a074     80 E4 05 F1 | 	add	objptr, ##60544
0a078     F2 14 02 F6 | 	mov	arg02, objptr
0a07c     07 12 06 F6 | 	mov	arg01, #7
0a080     0F 00 00 FF 
0a084     40 17 06 F6 | 	mov	arg03, ##8000
0a088     0E 18 C6 F9 | 	decod	arg04, #14
0a08c     00 1B 06 F6 | 	mov	arg05, #256
0a090     00 1C 06 F6 | 	mov	arg06, #0
0a094     6A 00 00 FF 
0a098     C0 E5 85 F1 | 	sub	objptr, ##54720
0a09c     74 E7 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
0a0a0     0B 00 00 FF 
0a0a4     C0 E4 85 F1 | 	sub	objptr, ##5824
0a0a8     05 00 00 FF 
0a0ac     B8 13 06 F6 | 	mov	arg01, ##3000
0a0b0     F0 ED B0 FD | 	call	#__system___waitms
0a0b4     78 00 00 FF 
0a0b8     80 E5 05 F1 | 	add	objptr, ##61824
0a0bc     F2 00 68 FC | 	wrlong	#0, objptr
0a0c0     78 00 00 FF 
0a0c4     80 E5 85 F1 | 	sub	objptr, ##61824
0a0c8     72 12 06 F6 | 	mov	arg01, #114
0a0cc     00 14 06 F6 | 	mov	arg02, #0
0a0d0     5C FD BF FD | 	call	#_csave_addtoblock
0a0d4     62 12 06 F6 | 	mov	arg01, #98
0a0d8     00 14 06 F6 | 	mov	arg02, #0
0a0dc     50 FD BF FD | 	call	#_csave_addtoblock
0a0e0     61 12 06 F6 | 	mov	arg01, #97
0a0e4     00 14 06 F6 | 	mov	arg02, #0
0a0e8     44 FD BF FD | 	call	#_csave_addtoblock
0a0ec     0D 12 06 F6 | 	mov	arg01, #13
0a0f0     00 14 06 F6 | 	mov	arg02, #0
0a0f4     38 FD BF FD | 	call	#_csave_addtoblock
0a0f8                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0a0f8                 | ' waitms 3000 
0a0f8                 | ' 
0a0f8                 | ' blockptr=0
0a0f8                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0a0f8                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0a0f8     A7 02 68 FC | 	wrlong	#1, fp
0a0fc     8C 4E 05 F1 | 	add	fp, #140
0a100     A7 12 02 FB | 	rdlong	arg01, fp
0a104     8C 4E 85 F1 | 	sub	fp, #140
0a108     09 21 02 F6 | 	mov	local02, arg01
0a10c     97 06 48 FB | 	callpa	#(@LR__0826-@LR__0825)>>2,fcache_load_ptr_
0a110                 | LR__0825
0a110     10 FB C9 FA | 	rdbyte	result1, local02 wz
0a114     01 20 06 51 |  if_ne	add	local02, #1
0a118     F4 FF 9F 5D |  if_ne	jmp	#LR__0825
0a11c                 | LR__0826
0a11c     09 21 82 F1 | 	sub	local02, arg01
0a120     10 23 02 F6 | 	mov	local03, local02
0a124     01 22 06 F1 | 	add	local03, #1
0a128                 | LR__0827
0a128     A7 1E 02 FB | 	rdlong	local01, fp
0a12c     11 1F 52 F2 | 	cmps	local01, local03 wc
0a130     34 00 90 3D |  if_ae	jmp	#LR__0828
0a134     8C 4E 05 F1 | 	add	fp, #140
0a138     A7 12 02 FB | 	rdlong	arg01, fp
0a13c     8C 4E 85 F1 | 	sub	fp, #140
0a140     A7 14 02 FB | 	rdlong	arg02, fp
0a144     01 16 06 F6 | 	mov	arg03, #1
0a148     8C 0B B1 FD | 	call	#__system__Mid_S
0a14c     FD 12 C2 FA | 	rdbyte	arg01, result1
0a150     00 14 06 F6 | 	mov	arg02, #0
0a154     D8 FC BF FD | 	call	#_csave_addtoblock
0a158     A7 1E 02 FB | 	rdlong	local01, fp
0a15c     01 1E 06 F1 | 	add	local01, #1
0a160     A7 1E 62 FC | 	wrlong	local01, fp
0a164     C0 FF 9F FD | 	jmp	#LR__0827
0a168                 | LR__0828
0a168     00 12 06 F6 | 	mov	arg01, #0
0a16c     00 14 06 F6 | 	mov	arg02, #0
0a170     BC FC BF FD | 	call	#_csave_addtoblock
0a174     72 12 06 F6 | 	mov	arg01, #114
0a178     00 14 06 F6 | 	mov	arg02, #0
0a17c     B0 FC BF FD | 	call	#_csave_addtoblock
0a180     62 12 06 F6 | 	mov	arg01, #98
0a184     00 14 06 F6 | 	mov	arg02, #0
0a188     A4 FC BF FD | 	call	#_csave_addtoblock
0a18c     73 12 06 F6 | 	mov	arg01, #115
0a190     00 14 06 F6 | 	mov	arg02, #0
0a194     98 FC BF FD | 	call	#_csave_addtoblock
0a198     0D 12 06 F6 | 	mov	arg01, #13
0a19c     00 14 06 F6 | 	mov	arg02, #0
0a1a0     8C FC BF FD | 	call	#_csave_addtoblock
0a1a4     69 00 00 FF 
0a1a8     58 E4 05 F1 | 	add	objptr, ##53848
0a1ac     F2 1E 02 FB | 	rdlong	local01, objptr
0a1b0     69 00 00 FF 
0a1b4     58 E4 85 F1 | 	sub	objptr, ##53848
0a1b8     9C 4E 05 F1 | 	add	fp, #156
0a1bc     A7 1E 62 FC | 	wrlong	local01, fp
0a1c0     9C 4E 85 F1 | 	sub	fp, #156
0a1c4                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0a1c4                 | ' 
0a1c4                 | ' saveptr=programstart
0a1c4                 | ' do
0a1c4                 | LR__0829
0a1c4     A0 4E 05 F1 | 	add	fp, #160
0a1c8     A7 12 02 F6 | 	mov	arg01, fp
0a1cc     04 4E 85 F1 | 	sub	fp, #4
0a1d0     A7 14 02 FB | 	rdlong	arg02, fp
0a1d4     9C 4E 85 F1 | 	sub	fp, #156
0a1d8     18 16 06 F6 | 	mov	arg03, #24
0a1dc     0B 00 00 FF 
0a1e0     C0 E4 05 F1 | 	add	objptr, ##5824
0a1e4     D8 DE B0 FD | 	call	#_psram_spin2_read1
0a1e8     0C 4E 05 F1 | 	add	fp, #12
0a1ec     A7 12 02 F6 | 	mov	arg01, fp
0a1f0     9C 4E 05 F1 | 	add	fp, #156
0a1f4     A7 14 02 FB | 	rdlong	arg02, fp
0a1f8     04 4E 05 F1 | 	add	fp, #4
0a1fc     A7 16 02 FB | 	rdlong	arg03, fp
0a200     AC 4E 85 F1 | 	sub	fp, #172
0a204     B8 DE B0 FD | 	call	#_psram_spin2_read1
0a208     0B 00 00 FF 
0a20c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a210     AC 4E 05 F1 | 	add	fp, #172
0a214     A7 12 02 FB | 	rdlong	arg01, fp
0a218     AC 4E 85 F1 | 	sub	fp, #172
0a21c     00 14 06 F6 | 	mov	arg02, #0
0a220     0C FC BF FD | 	call	#_csave_addtoblock
0a224                 | '   psram.read1(varptr(header(0)),saveptr,24)
0a224                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0a224                 | '   csave_addtoblock(header(3),0) ' that's always <255
0a224                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0a224     A7 00 68 FC | 	wrlong	#0, fp
0a228     AC 4E 05 F1 | 	add	fp, #172
0a22c     A7 24 02 FB | 	rdlong	local04, fp
0a230     AC 4E 85 F1 | 	sub	fp, #172
0a234                 | LR__0830
0a234     A7 1E 02 FB | 	rdlong	local01, fp
0a238     12 1F 52 F2 | 	cmps	local01, local04 wc
0a23c     2C 00 90 3D |  if_ae	jmp	#LR__0831
0a240     A7 22 02 FB | 	rdlong	local03, fp
0a244     0C 4E 05 F1 | 	add	fp, #12
0a248     A7 22 02 F1 | 	add	local03, fp
0a24c     11 13 C2 FA | 	rdbyte	arg01, local03
0a250     00 14 06 F6 | 	mov	arg02, #0
0a254     0C 4E 85 F1 | 	sub	fp, #12
0a258     D4 FB BF FD | 	call	#_csave_addtoblock
0a25c     A7 22 02 FB | 	rdlong	local03, fp
0a260     01 22 06 F1 | 	add	local03, #1
0a264     A7 22 62 FC | 	wrlong	local03, fp
0a268     C8 FF 9F FD | 	jmp	#LR__0830
0a26c                 | LR__0831
0a26c     B4 4E 05 F1 | 	add	fp, #180
0a270     A7 1E 02 FB | 	rdlong	local01, fp
0a274     18 4E 85 F1 | 	sub	fp, #24
0a278     A7 1E 62 FC | 	wrlong	local01, fp
0a27c     18 4E 05 F1 | 	add	fp, #24
0a280     A7 1E 02 FB | 	rdlong	local01, fp
0a284     B4 4E 85 F1 | 	sub	fp, #180
0a288     FF FF 3F FF 
0a28c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a290     30 FF 9F 5D |  if_ne	jmp	#LR__0829
0a294     00 12 06 F6 | 	mov	arg01, #0
0a298     01 14 06 F6 | 	mov	arg02, #1
0a29c     90 FB BF FD | 	call	#_csave_addtoblock
0a2a0     55 00 00 FF 
0a2a4     E4 E5 05 F1 | 	add	objptr, ##44004
0a2a8     F2 12 02 FB | 	rdlong	arg01, objptr
0a2ac     55 00 00 FF 
0a2b0     E4 E5 85 F1 | 	sub	objptr, ##44004
0a2b4     F4 12 06 F1 | 	add	arg01, #244
0a2b8     09 01 58 FC | 	wrword	#0, arg01
0a2bc                 | LR__0832
0a2bc     A7 F0 03 F6 | 	mov	ptra, fp
0a2c0     B2 00 A0 FD | 	call	#popregs_
0a2c4                 | _test_csave_ret
0a2c4     2D 00 64 FD | 	ret
0a2c8                 | 
0a2c8                 | ' 
0a2c8                 | ' ' ----------------- Save the program
0a2c8                 | ' 
0a2c8                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0a2c8                 | _do_save
0a2c8     02 4A 05 F6 | 	mov	COUNT_, #2
0a2cc     A8 00 A0 FD | 	call	#pushregs_
0a2d0     01 00 00 FF 
0a2d4     BC F0 07 F1 | 	add	ptra, ##700
0a2d8     01 00 00 FF 
0a2dc     10 4E 05 F1 | 	add	fp, ##528
0a2e0     B1 B0 86 FF 
0a2e4     A7 E4 68 FC | 	wrlong	##224486002, fp
0a2e8     01 00 00 FF 
0a2ec     10 4E 85 F1 | 	sub	fp, ##528
0a2f0     C4 F4 BF FD | 	call	#_pop
0a2f4     FF 16 02 F6 | 	mov	arg03, result3
0a2f8     A7 FA 61 FC | 	wrlong	result1, fp
0a2fc     04 4E 05 F1 | 	add	fp, #4
0a300     A7 FC 61 FC | 	wrlong	result2, fp
0a304     04 4E 05 F1 | 	add	fp, #4
0a308     A7 16 62 FC | 	wrlong	arg03, fp
0a30c     08 4E 85 F1 | 	sub	fp, #8
0a310                 | ' 
0a310                 | ' fileheader=$0D616272' rba+ver'
0a310                 | ' 
0a310                 | ' t1=pop() 
0a310                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a310     69 00 00 FF 
0a314     58 E4 05 F1 | 	add	objptr, ##53848
0a318     F2 12 02 FB | 	rdlong	arg01, objptr
0a31c     69 00 00 FF 
0a320     58 E4 85 F1 | 	sub	objptr, ##53848
0a324     20 B5 B0 FD | 	call	#_pslpeek
0a328     FF FF 7F FF 
0a32c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a330     0C 00 90 5D |  if_ne	jmp	#LR__0840
0a334     1B 12 06 F6 | 	mov	arg01, #27
0a338     50 B3 B0 FD | 	call	#_printerror
0a33c     68 02 90 FD | 	jmp	#LR__0846
0a340                 | LR__0840
0a340                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0a340     08 4E 05 F1 | 	add	fp, #8
0a344     A7 16 02 FB | 	rdlong	arg03, fp
0a348     08 4E 85 F1 | 	sub	fp, #8
0a34c     2B 16 0E F2 | 	cmp	arg03, #43 wz
0a350     18 00 90 5D |  if_ne	jmp	#LR__0841
0a354     A7 12 02 FB | 	rdlong	arg01, fp
0a358     98 25 B0 FD | 	call	#_convertstring
0a35c     A7 FA 61 FC | 	wrlong	result1, fp
0a360     08 4E 05 F1 | 	add	fp, #8
0a364     A7 3E 68 FC | 	wrlong	#31, fp
0a368     08 4E 85 F1 | 	sub	fp, #8
0a36c                 | LR__0841
0a36c                 | ' if t1.result_type=result_string then
0a36c     08 4E 05 F1 | 	add	fp, #8
0a370     A7 1E 02 FB | 	rdlong	local01, fp
0a374     08 4E 85 F1 | 	sub	fp, #8
0a378     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a37c     28 02 90 5D |  if_ne	jmp	#LR__0845
0a380                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0a380     A7 12 02 FB | 	rdlong	arg01, fp
0a384     42 01 00 FF 
0a388     8D 15 06 F6 | 	mov	arg02, ##@LR__4556
0a38c     48 E8 B0 FD | 	call	#__system___string_cmp
0a390     00 FA 0D F2 | 	cmp	result1, #0 wz
0a394     42 01 00 AF 
0a398     8E 1F 06 A6 |  if_e	mov	local01, ##@LR__4557
0a39c     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a3a0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0a3a0     09 12 06 F6 | 	mov	arg01, #9
0a3a4     3C 37 B1 FD | 	call	#__system__close
0a3a8     09 1E 06 F6 | 	mov	local01, #9
0a3ac     71 00 00 FF 
0a3b0     68 E4 05 F1 | 	add	objptr, ##57960
0a3b4     F2 12 02 FB | 	rdlong	arg01, objptr
0a3b8     71 00 00 FF 
0a3bc     68 E4 85 F1 | 	sub	objptr, ##57960
0a3c0     42 01 00 FF 
0a3c4     99 15 06 F6 | 	mov	arg02, ##@LR__4558
0a3c8     40 E8 B0 FD | 	call	#__system___string_concat
0a3cc     FD 12 02 F6 | 	mov	arg01, result1
0a3d0     A7 14 02 FB | 	rdlong	arg02, fp
0a3d4     34 E8 B0 FD | 	call	#__system___string_concat
0a3d8     FD 14 02 F6 | 	mov	arg02, result1
0a3dc     0F 13 02 F6 | 	mov	arg01, local01
0a3e0     0D 16 06 F6 | 	mov	arg03, #13
0a3e4     CC F3 B0 FD | 	call	#__system___basic_open_string
0a3e8     01 00 00 FF 
0a3ec     0C 4E 05 F1 | 	add	fp, ##524
0a3f0     A7 0A 68 FC | 	wrlong	#5, fp
0a3f4     69 00 00 FF 
0a3f8     58 E4 05 F1 | 	add	objptr, ##53848
0a3fc     F2 1E 02 FB | 	rdlong	local01, objptr
0a400     69 00 00 FF 
0a404     58 E4 85 F1 | 	sub	objptr, ##53848
0a408     0C 4E 05 F1 | 	add	fp, #12
0a40c     A7 1E 62 FC | 	wrlong	local01, fp
0a410     01 00 00 FF 
0a414     18 4E 85 F1 | 	sub	fp, ##536
0a418                 | ' '  put #9,1,fileheader,1
0a418                 | '   i=5
0a418                 | '   saveptr=programstart
0a418                 | '   do
0a418                 | LR__0842
0a418     01 00 00 FF 
0a41c     1C 4E 05 F1 | 	add	fp, ##540
0a420     A7 12 02 F6 | 	mov	arg01, fp
0a424     04 4E 85 F1 | 	sub	fp, #4
0a428     A7 14 02 FB | 	rdlong	arg02, fp
0a42c     01 00 00 FF 
0a430     18 4E 85 F1 | 	sub	fp, ##536
0a434     18 16 06 F6 | 	mov	arg03, #24
0a438     0B 00 00 FF 
0a43c     C0 E4 05 F1 | 	add	objptr, ##5824
0a440     7C DC B0 FD | 	call	#_psram_spin2_read1
0a444     01 00 00 FF 
0a448     34 4E 05 F1 | 	add	fp, ##564
0a44c     A7 12 02 F6 | 	mov	arg01, fp
0a450     10 4E 85 F1 | 	sub	fp, #16
0a454     A7 14 02 FB | 	rdlong	arg02, fp
0a458     04 4E 05 F1 | 	add	fp, #4
0a45c     A7 16 02 FB | 	rdlong	arg03, fp
0a460     01 00 00 FF 
0a464     28 4E 85 F1 | 	sub	fp, ##552
0a468     54 DC B0 FD | 	call	#_psram_spin2_read1
0a46c     0B 00 00 FF 
0a470     C0 E4 85 F1 | 	sub	objptr, ##5824
0a474     42 01 00 FF 
0a478     9B 1F 06 F6 | 	mov	local01, ##@LR__4559
0a47c     01 00 00 FF 
0a480     B4 4E 05 F1 | 	add	fp, ##692
0a484     A7 1E 62 FC | 	wrlong	local01, fp
0a488                 | '     psram.read1(varptr(header(0)),saveptr,24)
0a488                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0a488                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0a488     A8 4E 85 F1 | 	sub	fp, #168
0a48c     A7 02 68 FC | 	wrlong	#1, fp
0a490     1C 4E 05 F1 | 	add	fp, #28
0a494     A7 20 02 FB | 	rdlong	local02, fp
0a498     01 00 00 FF 
0a49c     28 4E 85 F1 | 	sub	fp, ##552
0a4a0     01 20 06 F1 | 	add	local02, #1
0a4a4                 | LR__0843
0a4a4     01 00 00 FF 
0a4a8     0C 4E 05 F1 | 	add	fp, ##524
0a4ac     A7 1E 02 FB | 	rdlong	local01, fp
0a4b0     01 00 00 FF 
0a4b4     0C 4E 85 F1 | 	sub	fp, ##524
0a4b8     10 1F 52 F2 | 	cmps	local01, local02 wc
0a4bc     64 00 90 3D |  if_ae	jmp	#LR__0844
0a4c0     01 00 00 FF 
0a4c4     B4 4E 05 F1 | 	add	fp, ##692
0a4c8     A7 1E 02 FB | 	rdlong	local01, fp
0a4cc     A8 4E 85 F1 | 	sub	fp, #168
0a4d0     A7 16 02 FB | 	rdlong	arg03, fp
0a4d4     01 16 86 F1 | 	sub	arg03, #1
0a4d8     28 4E 05 F1 | 	add	fp, #40
0a4dc     A7 16 02 F1 | 	add	arg03, fp
0a4e0     0B 13 C2 FA | 	rdbyte	arg01, arg03
0a4e4     01 00 00 FF 
0a4e8     34 4E 85 F1 | 	sub	fp, ##564
0a4ec     94 08 B1 FD | 	call	#__system__Chr_S
0a4f0     FD 14 02 F6 | 	mov	arg02, result1
0a4f4     0F 13 02 F6 | 	mov	arg01, local01
0a4f8     10 E7 B0 FD | 	call	#__system___string_concat
0a4fc     01 00 00 FF 
0a500     B4 4E 05 F1 | 	add	fp, ##692
0a504     A7 FA 61 FC | 	wrlong	result1, fp
0a508     A8 4E 85 F1 | 	sub	fp, #168
0a50c     A7 1E 02 FB | 	rdlong	local01, fp
0a510     01 1E 06 F1 | 	add	local01, #1
0a514     A7 1E 62 FC | 	wrlong	local01, fp
0a518     01 00 00 FF 
0a51c     0C 4E 85 F1 | 	sub	fp, ##524
0a520     80 FF 9F FD | 	jmp	#LR__0843
0a524                 | LR__0844
0a524                 | '  '   put #9,i,header(3),1 : i+=4
0a524                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0a524                 | '      print #9, saveline$
0a524     09 12 06 F6 | 	mov	arg01, #9
0a528     88 3F B1 FD | 	call	#__system___getiolock_0423
0a52c     FD 12 02 F6 | 	mov	arg01, result1
0a530     7C E6 B0 FD | 	call	#__system___lockmem
0a534     01 00 00 FF 
0a538     B4 4E 05 F1 | 	add	fp, ##692
0a53c     A7 14 02 FB | 	rdlong	arg02, fp
0a540     01 00 00 FF 
0a544     B4 4E 85 F1 | 	sub	fp, ##692
0a548     09 12 06 F6 | 	mov	arg01, #9
0a54c     00 16 06 F6 | 	mov	arg03, #0
0a550     50 F3 B0 FD | 	call	#__system___basic_print_string
0a554     09 12 06 F6 | 	mov	arg01, #9
0a558     0A 14 06 F6 | 	mov	arg02, #10
0a55c     00 16 06 F6 | 	mov	arg03, #0
0a560     E8 F2 B0 FD | 	call	#__system___basic_print_char
0a564     09 12 06 F6 | 	mov	arg01, #9
0a568     48 3F B1 FD | 	call	#__system___getiolock_0423
0a56c     FD 00 68 FC | 	wrlong	#0, result1
0a570     01 00 00 FF 
0a574     30 4E 05 F1 | 	add	fp, ##560
0a578     A7 1E 02 FB | 	rdlong	local01, fp
0a57c     18 4E 85 F1 | 	sub	fp, #24
0a580     A7 1E 62 FC | 	wrlong	local01, fp
0a584     18 4E 05 F1 | 	add	fp, #24
0a588     A7 1E 02 FB | 	rdlong	local01, fp
0a58c     01 00 00 FF 
0a590     30 4E 85 F1 | 	sub	fp, ##560
0a594     FF FF 3F FF 
0a598     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a59c     78 FE 9F 5D |  if_ne	jmp	#LR__0842
0a5a0                 | '   close #9  
0a5a0     09 12 06 F6 | 	mov	arg01, #9
0a5a4     3C 35 B1 FD | 	call	#__system__close
0a5a8                 | LR__0845
0a5a8                 | LR__0846
0a5a8     A7 F0 03 F6 | 	mov	ptra, fp
0a5ac     B2 00 A0 FD | 	call	#popregs_
0a5b0                 | _do_save_ret
0a5b0     2D 00 64 FD | 	ret
0a5b4                 | 
0a5b4                 | ' 
0a5b4                 | ' '----------------- Load the program
0a5b4                 | ' 'lo todo: errors while loading
0a5b4                 | ' sub do_load
0a5b4                 | _do_load
0a5b4     01 4A 05 F6 | 	mov	COUNT_, #1
0a5b8     A8 00 A0 FD | 	call	#pushregs_
0a5bc     A4 F0 07 F1 | 	add	ptra, #164
0a5c0     A0 4E 05 F1 | 	add	fp, #160
0a5c4     A7 12 02 F6 | 	mov	arg01, fp
0a5c8     80 4E 85 F1 | 	sub	fp, #128
0a5cc     A7 14 02 F6 | 	mov	arg02, fp
0a5d0     20 4E 85 F1 | 	sub	fp, #32
0a5d4     09 15 62 FC | 	wrlong	arg02, arg01
0a5d8     DC F1 BF FD | 	call	#_pop
0a5dc     FF 1A 02 F6 | 	mov	arg05, result3
0a5e0     A7 FA 61 FC | 	wrlong	result1, fp
0a5e4     04 4E 05 F1 | 	add	fp, #4
0a5e8     A7 FC 61 FC | 	wrlong	result2, fp
0a5ec     04 4E 05 F1 | 	add	fp, #4
0a5f0     A7 1A 62 FC | 	wrlong	arg05, fp
0a5f4                 | ' 
0a5f4                 | ' lpoke varptr(line2$),varptr(line2)
0a5f4                 | ' t1=pop() 
0a5f4                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0a5f4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0a5f4     08 4E 85 F1 | 	sub	fp, #8
0a5f8     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0a5fc     18 00 90 5D |  if_ne	jmp	#LR__0850
0a600     A7 12 02 FB | 	rdlong	arg01, fp
0a604     EC 22 B0 FD | 	call	#_convertstring
0a608     A7 FA 61 FC | 	wrlong	result1, fp
0a60c     08 4E 05 F1 | 	add	fp, #8
0a610     A7 3E 68 FC | 	wrlong	#31, fp
0a614     08 4E 85 F1 | 	sub	fp, #8
0a618                 | LR__0850
0a618                 | ' if t1.result_type=result_string then
0a618     08 4E 05 F1 | 	add	fp, #8
0a61c     A7 1E 02 FB | 	rdlong	local01, fp
0a620     08 4E 85 F1 | 	sub	fp, #8
0a624     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a628     40 03 90 5D |  if_ne	jmp	#LR__0857
0a62c     2C 1D B0 FD | 	call	#_do_new
0a630                 | '   do_new
0a630                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
0a630     A7 12 02 FB | 	rdlong	arg01, fp
0a634     42 01 00 FF 
0a638     9C 15 06 F6 | 	mov	arg02, ##@LR__4560
0a63c     98 E5 B0 FD | 	call	#__system___string_cmp
0a640     00 FA 0D F2 | 	cmp	result1, #0 wz
0a644     42 01 00 AF 
0a648     9D 1F 06 A6 |  if_e	mov	local01, ##@LR__4561
0a64c     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a650                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a650     09 12 06 F6 | 	mov	arg01, #9
0a654     8C 34 B1 FD | 	call	#__system__close
0a658     09 1E 06 F6 | 	mov	local01, #9
0a65c     71 00 00 FF 
0a660     68 E4 05 F1 | 	add	objptr, ##57960
0a664     F2 12 02 FB | 	rdlong	arg01, objptr
0a668     71 00 00 FF 
0a66c     68 E4 85 F1 | 	sub	objptr, ##57960
0a670     42 01 00 FF 
0a674     A8 15 06 F6 | 	mov	arg02, ##@LR__4562
0a678     90 E5 B0 FD | 	call	#__system___string_concat
0a67c     FD 12 02 F6 | 	mov	arg01, result1
0a680     A7 14 02 FB | 	rdlong	arg02, fp
0a684     84 E5 B0 FD | 	call	#__system___string_concat
0a688     FD 14 02 F6 | 	mov	arg02, result1
0a68c     0F 13 02 F6 | 	mov	arg01, local01
0a690     00 16 06 F6 | 	mov	arg03, #0
0a694     1C F1 B0 FD | 	call	#__system___basic_open_string
0a698     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0a69c     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0a6a0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0a6a4     10 4E 05 F1 | 	add	fp, #16
0a6a8     A7 FA 61 FC | 	wrlong	result1, fp
0a6ac                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0a6ac     10 4E 85 F1 | 	sub	fp, #16
0a6b0     9C 00 90 AD |  if_e	jmp	#LR__0851
0a6b4     00 12 06 F6 | 	mov	arg01, #0
0a6b8     F8 3D B1 FD | 	call	#__system___getiolock_0423
0a6bc     FD 12 02 F6 | 	mov	arg01, result1
0a6c0     EC E4 B0 FD | 	call	#__system___lockmem
0a6c4     42 01 00 FF 
0a6c8     AA 15 06 F6 | 	mov	arg02, ##@LR__4563
0a6cc     00 12 06 F6 | 	mov	arg01, #0
0a6d0     00 16 06 F6 | 	mov	arg03, #0
0a6d4     CC F1 B0 FD | 	call	#__system___basic_print_string
0a6d8     10 4E 05 F1 | 	add	fp, #16
0a6dc     A7 14 02 FB | 	rdlong	arg02, fp
0a6e0     10 4E 85 F1 | 	sub	fp, #16
0a6e4     00 12 06 F6 | 	mov	arg01, #0
0a6e8     00 16 06 F6 | 	mov	arg03, #0
0a6ec     0A 18 06 F6 | 	mov	arg04, #10
0a6f0     F4 F1 B0 FD | 	call	#__system___basic_print_integer
0a6f4     42 01 00 FF 
0a6f8     B8 15 06 F6 | 	mov	arg02, ##@LR__4564
0a6fc     00 12 06 F6 | 	mov	arg01, #0
0a700     00 16 06 F6 | 	mov	arg03, #0
0a704     9C F1 B0 FD | 	call	#__system___basic_print_string
0a708     10 4E 05 F1 | 	add	fp, #16
0a70c     A7 12 02 FB | 	rdlong	arg01, fp
0a710     10 4E 85 F1 | 	sub	fp, #16
0a714     98 0A B1 FD | 	call	#__system___strerror
0a718     FD 14 02 F6 | 	mov	arg02, result1
0a71c     00 12 06 F6 | 	mov	arg01, #0
0a720     00 16 06 F6 | 	mov	arg03, #0
0a724     7C F1 B0 FD | 	call	#__system___basic_print_string
0a728     00 12 06 F6 | 	mov	arg01, #0
0a72c     0A 14 06 F6 | 	mov	arg02, #10
0a730     00 16 06 F6 | 	mov	arg03, #0
0a734     14 F1 B0 FD | 	call	#__system___basic_print_char
0a738     00 12 06 F6 | 	mov	arg01, #0
0a73c     74 3D B1 FD | 	call	#__system___getiolock_0423
0a740     FD 00 68 FC | 	wrlong	#0, result1
0a744     09 12 06 F6 | 	mov	arg01, #9
0a748     98 33 B1 FD | 	call	#__system__close
0a74c     24 02 90 FD | 	jmp	#LR__0859
0a750                 | LR__0851
0a750     0C 4E 05 F1 | 	add	fp, #12
0a754     A7 0A 68 FC | 	wrlong	#5, fp
0a758                 | '   i=5
0a758                 | '   get #9,1,header,1
0a758     0C 4E 05 F1 | 	add	fp, #12
0a75c     A7 16 02 F6 | 	mov	arg03, fp
0a760     18 4E 85 F1 | 	sub	fp, #24
0a764     09 12 06 F6 | 	mov	arg01, #9
0a768     01 14 06 F6 | 	mov	arg02, #1
0a76c     01 18 06 F6 | 	mov	arg04, #1
0a770     04 1A 06 F6 | 	mov	arg05, #4
0a774     3C F2 B0 FD | 	call	#__system___basic_get
0a778                 | '   
0a778                 | '   if header<>$0D616272 then 
0a778     18 4E 05 F1 | 	add	fp, #24
0a77c     A7 1E 02 FB | 	rdlong	local01, fp
0a780     18 4E 85 F1 | 	sub	fp, #24
0a784     B1 B0 06 FF 
0a788     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0a78c     F0 00 90 AD |  if_e	jmp	#LR__0854
0a790                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a790     09 12 06 F6 | 	mov	arg01, #9
0a794     4C 33 B1 FD | 	call	#__system__close
0a798     09 1E 06 F6 | 	mov	local01, #9
0a79c     71 00 00 FF 
0a7a0     68 E4 05 F1 | 	add	objptr, ##57960
0a7a4     F2 12 02 FB | 	rdlong	arg01, objptr
0a7a8     71 00 00 FF 
0a7ac     68 E4 85 F1 | 	sub	objptr, ##57960
0a7b0     42 01 00 FF 
0a7b4     BB 15 06 F6 | 	mov	arg02, ##@LR__4565
0a7b8     50 E4 B0 FD | 	call	#__system___string_concat
0a7bc     FD 12 02 F6 | 	mov	arg01, result1
0a7c0     A7 14 02 FB | 	rdlong	arg02, fp
0a7c4     44 E4 B0 FD | 	call	#__system___string_concat
0a7c8     FD 14 02 F6 | 	mov	arg02, result1
0a7cc     0F 13 02 F6 | 	mov	arg01, local01
0a7d0     00 16 06 F6 | 	mov	arg03, #0
0a7d4     DC EF B0 FD | 	call	#__system___basic_open_string
0a7d8                 | '     do
0a7d8                 | LR__0852
0a7d8     09 12 06 F6 | 	mov	arg01, #9
0a7dc     DC E5 B0 FD | 	call	#__system___basic_read_line
0a7e0     55 00 00 FF 
0a7e4     F0 E5 05 F1 | 	add	objptr, ##44016
0a7e8     F2 FA 61 FC | 	wrlong	result1, objptr
0a7ec                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0a7ec     55 00 00 FF 
0a7f0     F0 E5 85 F1 | 	sub	objptr, ##44016
0a7f4     FD 12 02 F6 | 	mov	arg01, result1
0a7f8     01 14 06 F6 | 	mov	arg02, #1
0a7fc     C0 03 B1 FD | 	call	#__system__Left_S
0a800     FD 12 02 F6 | 	mov	arg01, result1
0a804     42 01 00 FF 
0a808     BD 15 06 F6 | 	mov	arg02, ##@LR__4566
0a80c     C8 E3 B0 FD | 	call	#__system___string_cmp
0a810     00 FA 55 F2 | 	cmps	result1, #0 wc
0a814     34 00 90 CD |  if_b	jmp	#LR__0853
0a818     55 00 00 FF 
0a81c     F0 E5 05 F1 | 	add	objptr, ##44016
0a820     F2 12 02 FB | 	rdlong	arg01, objptr
0a824     55 00 00 FF 
0a828     F0 E5 85 F1 | 	sub	objptr, ##44016
0a82c     01 14 06 F6 | 	mov	arg02, #1
0a830     8C 03 B1 FD | 	call	#__system__Left_S
0a834     FD 12 02 F6 | 	mov	arg01, result1
0a838     42 01 00 FF 
0a83c     BF 15 06 F6 | 	mov	arg02, ##@LR__4567
0a840     94 E3 B0 FD | 	call	#__system___string_cmp
0a844     01 FA 55 F2 | 	cmps	result1, #1 wc
0a848     D0 61 BF CD |  if_b	call	#_interpret
0a84c                 | LR__0853
0a84c     55 00 00 FF 
0a850     F0 E5 05 F1 | 	add	objptr, ##44016
0a854     F2 12 02 FB | 	rdlong	arg01, objptr
0a858     55 00 00 FF 
0a85c     F0 E5 85 F1 | 	sub	objptr, ##44016
0a860     42 01 00 FF 
0a864     C1 15 06 F6 | 	mov	arg02, ##@LR__4568
0a868     6C E3 B0 FD | 	call	#__system___string_cmp
0a86c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a870     64 FF 9F 5D |  if_ne	jmp	#LR__0852
0a874                 | '     close #9
0a874     09 12 06 F6 | 	mov	arg01, #9
0a878     68 32 B1 FD | 	call	#__system__close
0a87c     F4 00 90 FD | 	jmp	#LR__0858
0a880                 | LR__0854
0a880                 | '   'printerror(26) : close #9 : return
0a880                 | '     do
0a880                 | LR__0855
0a880                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0a880     0C 4E 05 F1 | 	add	fp, #12
0a884     A7 14 02 FB | 	rdlong	arg02, fp
0a888     10 4E 05 F1 | 	add	fp, #16
0a88c     A7 16 02 F6 | 	mov	arg03, fp
0a890     1C 4E 85 F1 | 	sub	fp, #28
0a894     09 12 06 F6 | 	mov	arg01, #9
0a898     01 18 06 F6 | 	mov	arg04, #1
0a89c     04 1A 06 F6 | 	mov	arg05, #4
0a8a0     10 F1 B0 FD | 	call	#__system___basic_get
0a8a4     14 4E 05 F1 | 	add	fp, #20
0a8a8     A7 FA 61 FC | 	wrlong	result1, fp
0a8ac     08 4E 85 F1 | 	sub	fp, #8
0a8b0     A7 1E 02 FB | 	rdlong	local01, fp
0a8b4     04 1E 06 F1 | 	add	local01, #4
0a8b8     A7 1E 62 FC | 	wrlong	local01, fp
0a8bc     10 4E 05 F1 | 	add	fp, #16
0a8c0     A7 1E 02 FB | 	rdlong	local01, fp
0a8c4     04 4E 05 F1 | 	add	fp, #4
0a8c8     A7 1E 02 F1 | 	add	local01, fp
0a8cc     0F 01 48 FC | 	wrbyte	#0, local01
0a8d0                 | '       if amount=1 then  
0a8d0     0C 4E 85 F1 | 	sub	fp, #12
0a8d4     A7 1E 02 FB | 	rdlong	local01, fp
0a8d8     14 4E 85 F1 | 	sub	fp, #20
0a8dc     01 1E 0E F2 | 	cmp	local01, #1 wz
0a8e0     68 00 90 5D |  if_ne	jmp	#LR__0856
0a8e4                 | '         get #9,i,line2(0),linelength : i+=linelength
0a8e4     0C 4E 05 F1 | 	add	fp, #12
0a8e8     A7 14 02 FB | 	rdlong	arg02, fp
0a8ec     14 4E 05 F1 | 	add	fp, #20
0a8f0     A7 16 02 F6 | 	mov	arg03, fp
0a8f4     04 4E 85 F1 | 	sub	fp, #4
0a8f8     A7 18 02 FB | 	rdlong	arg04, fp
0a8fc     1C 4E 85 F1 | 	sub	fp, #28
0a900     09 12 06 F6 | 	mov	arg01, #9
0a904     01 1A 06 F6 | 	mov	arg05, #1
0a908     A8 F0 B0 FD | 	call	#__system___basic_get
0a90c     0C 4E 05 F1 | 	add	fp, #12
0a910     A7 1E 02 FB | 	rdlong	local01, fp
0a914     10 4E 05 F1 | 	add	fp, #16
0a918     A7 1A 02 FB | 	rdlong	arg05, fp
0a91c     0D 1F 02 F1 | 	add	local01, arg05
0a920     10 4E 85 F1 | 	sub	fp, #16
0a924     A7 1E 62 FC | 	wrlong	local01, fp
0a928     94 4E 05 F1 | 	add	fp, #148
0a92c     A7 1E 02 FB | 	rdlong	local01, fp
0a930     A0 4E 85 F1 | 	sub	fp, #160
0a934     55 00 00 FF 
0a938     F0 E5 05 F1 | 	add	objptr, ##44016
0a93c     F2 1E 62 FC | 	wrlong	local01, objptr
0a940     55 00 00 FF 
0a944     F0 E5 85 F1 | 	sub	objptr, ##44016
0a948     D0 60 BF FD | 	call	#_interpret
0a94c                 | LR__0856
0a94c     14 4E 05 F1 | 	add	fp, #20
0a950     A7 1E 02 FB | 	rdlong	local01, fp
0a954     14 4E 85 F1 | 	sub	fp, #20
0a958     01 1E 56 F2 | 	cmps	local01, #1 wc
0a95c     20 FF 9F 3D |  if_ae	jmp	#LR__0855
0a960                 | '     close #9 
0a960     09 12 06 F6 | 	mov	arg01, #9
0a964     7C 31 B1 FD | 	call	#__system__close
0a968     08 00 90 FD | 	jmp	#LR__0858
0a96c                 | LR__0857
0a96c     1E 12 06 F6 | 	mov	arg01, #30
0a970     18 AD B0 FD | 	call	#_printerror
0a974                 | LR__0858
0a974                 | LR__0859
0a974     A7 F0 03 F6 | 	mov	ptra, fp
0a978     B2 00 A0 FD | 	call	#popregs_
0a97c                 | _do_load_ret
0a97c     2D 00 64 FD | 	ret
0a980                 | 
0a980                 | ' 
0a980                 | ' '----------------- Run the program 
0a980                 | ' 
0a980                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0a980                 | ' 
0a980                 | ' sub do_run
0a980                 | _do_run
0a980     01 4A 05 F6 | 	mov	COUNT_, #1
0a984     A8 00 A0 FD | 	call	#pushregs_
0a988     69 00 00 FF 
0a98c     58 E4 05 F1 | 	add	objptr, ##53848
0a990     F2 1C 02 FB | 	rdlong	arg06, objptr
0a994     0F 00 00 FF 
0a998     2C E5 05 F1 | 	add	objptr, ##7980
0a99c     F2 1C 62 FC | 	wrlong	arg06, objptr
0a9a0     04 E4 05 F1 | 	add	objptr, #4
0a9a4     F2 00 68 FC | 	wrlong	#0, objptr
0a9a8     04 E4 05 F1 | 	add	objptr, #4
0a9ac     FF FF FF FF 
0a9b0     F2 FE 6B FC | 	wrlong	##-1, objptr
0a9b4                 | ' if inrun>0 then 
0a9b4     04 E4 05 F1 | 	add	objptr, #4
0a9b8     F2 1C 02 FB | 	rdlong	arg06, objptr
0a9bc     78 00 00 FF 
0a9c0     90 E5 85 F1 | 	sub	objptr, ##61840
0a9c4     01 1C 16 F2 | 	cmp	arg06, #1 wc
0a9c8     30 00 90 CD |  if_b	jmp	#LR__0860
0a9cc     78 00 00 FF 
0a9d0     94 E5 05 F1 | 	add	objptr, ##61844
0a9d4     F2 12 02 F6 | 	mov	arg01, objptr
0a9d8     10 E4 85 F1 | 	sub	objptr, #16
0a9dc     F2 14 02 FB | 	rdlong	arg02, objptr
0a9e0     18 16 06 F6 | 	mov	arg03, #24
0a9e4     6D 00 00 FF 
0a9e8     C4 E4 85 F1 | 	sub	objptr, ##56004
0a9ec     D0 D6 B0 FD | 	call	#_psram_spin2_read1
0a9f0     0B 00 00 FF 
0a9f4     C0 E4 85 F1 | 	sub	objptr, ##5824
0a9f8                 | '   psram.read1(varptr(runheader),runptr,24)  
0a9f8                 | '   return
0a9f8     9C 02 90 FD | 	jmp	#LR__0866
0a9fc                 | LR__0860
0a9fc     78 00 00 FF 
0aa00     90 E5 05 F1 | 	add	objptr, ##61840
0aa04     F2 02 68 FC | 	wrlong	#1, objptr
0aa08     04 E4 05 F1 | 	add	objptr, #4
0aa0c     F2 12 02 F6 | 	mov	arg01, objptr
0aa10     10 E4 85 F1 | 	sub	objptr, #16
0aa14     F2 14 02 FB | 	rdlong	arg02, objptr
0aa18     18 16 06 F6 | 	mov	arg03, #24
0aa1c     6D 00 00 FF 
0aa20     C4 E4 85 F1 | 	sub	objptr, ##56004
0aa24     98 D6 B0 FD | 	call	#_psram_spin2_read1
0aa28                 | ' inrun=1
0aa28                 | ' psram.read1(varptr(runheader),runptr,24) 
0aa28                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0aa28     6D 00 00 FF 
0aa2c     D4 E4 05 F1 | 	add	objptr, ##56020
0aa30     F2 1E 02 FB | 	rdlong	local01, objptr
0aa34     78 00 00 FF 
0aa38     94 E5 85 F1 | 	sub	objptr, ##61844
0aa3c     FF FF 7F FF 
0aa40     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0aa44     78 00 00 AF 
0aa48     90 E5 05 A1 |  if_e	add	objptr, ##61840
0aa4c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0aa50     78 00 00 AF 
0aa54     90 E5 85 A1 |  if_e	sub	objptr, ##61840
0aa58     3C 02 90 AD |  if_e	jmp	#LR__0866
0aa5c                 | ' do 
0aa5c                 | LR__0861
0aa5c                 | '   if runptr<>oldrunptr then
0aa5c     78 00 00 FF 
0aa60     84 E5 05 F1 | 	add	objptr, ##61828
0aa64     F2 1E 02 FB | 	rdlong	local01, objptr
0aa68     08 E4 05 F1 | 	add	objptr, #8
0aa6c     F2 1C 02 FB | 	rdlong	arg06, objptr
0aa70     78 00 00 FF 
0aa74     8C E5 85 F1 | 	sub	objptr, ##61836
0aa78     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0aa7c     CC 00 90 AD |  if_e	jmp	#LR__0862
0aa80     78 00 00 FF 
0aa84     94 E5 05 F1 | 	add	objptr, ##61844
0aa88     F2 12 02 F6 | 	mov	arg01, objptr
0aa8c     10 E4 85 F1 | 	sub	objptr, #16
0aa90     F2 14 02 FB | 	rdlong	arg02, objptr
0aa94     18 16 06 F6 | 	mov	arg03, #24
0aa98     6D 00 00 FF 
0aa9c     C4 E4 85 F1 | 	sub	objptr, ##56004
0aaa0     1C D6 B0 FD | 	call	#_psram_spin2_read1
0aaa4     5A 00 00 FF 
0aaa8     90 E5 05 F1 | 	add	objptr, ##46480
0aaac     F2 12 02 F6 | 	mov	arg01, objptr
0aab0     12 00 00 FF 
0aab4     34 E5 05 F1 | 	add	objptr, ##9524
0aab8     F2 14 02 FB | 	rdlong	arg02, objptr
0aabc     14 00 00 FF 
0aac0     4C E5 85 F1 | 	sub	objptr, ##10572
0aac4     F2 1E 02 FB | 	rdlong	local01, objptr
0aac8     01 1E 66 F0 | 	shl	local01, #1
0aacc     0F 15 02 F1 | 	add	arg02, local01
0aad0     14 00 00 FF 
0aad4     64 E5 05 F1 | 	add	objptr, ##10596
0aad8     F2 16 02 FB | 	rdlong	arg03, objptr
0aadc     18 E4 85 F1 | 	sub	objptr, #24
0aae0     F2 1E 02 FB | 	rdlong	local01, objptr
0aae4     0F 17 82 F1 | 	sub	arg03, local01
0aae8     6D 00 00 FF 
0aaec     C4 E4 85 F1 | 	sub	objptr, ##56004
0aaf0     CC D5 B0 FD | 	call	#_psram_spin2_read1
0aaf4     6D 00 00 FF 
0aaf8     DC E4 05 F1 | 	add	objptr, ##56028
0aafc     F2 1E 02 FB | 	rdlong	local01, objptr
0ab00     18 E4 85 F1 | 	sub	objptr, #24
0ab04     F2 1C 02 FB | 	rdlong	arg06, objptr
0ab08     0E 1F 82 F1 | 	sub	local01, arg06
0ab0c     14 00 00 FF 
0ab10     4C E5 85 F1 | 	sub	objptr, ##10572
0ab14     F2 1C 02 FB | 	rdlong	arg06, objptr
0ab18     0E 1F 12 FD | 	qdiv	local01, arg06
0ab1c     05 00 00 FF 
0ab20     18 E4 05 F1 | 	add	objptr, ##2584
0ab24     18 1E 62 FD | 	getqx	local01
0ab28     03 1E 86 F1 | 	sub	local01, #3
0ab2c     F2 1E 62 FC | 	wrlong	local01, objptr
0ab30     0F 00 00 FF 
0ab34     34 E5 05 F1 | 	add	objptr, ##7988
0ab38     F2 1E 02 FB | 	rdlong	local01, objptr
0ab3c     08 E4 05 F1 | 	add	objptr, #8
0ab40     F2 1E 62 FC | 	wrlong	local01, objptr
0ab44     78 00 00 FF 
0ab48     8C E5 85 F1 | 	sub	objptr, ##61836
0ab4c                 | LR__0862
0ab4c     78 00 00 FF 
0ab50     A8 E5 05 F1 | 	add	objptr, ##61864
0ab54     F2 1E 02 FB | 	rdlong	local01, objptr
0ab58     24 E4 85 F1 | 	sub	objptr, #36
0ab5c     F2 1E 62 FC | 	wrlong	local01, objptr
0ab60     04 E4 05 F1 | 	add	objptr, #4
0ab64     F2 12 02 FB | 	rdlong	arg01, objptr
0ab68     78 00 00 FF 
0ab6c     88 E5 85 F1 | 	sub	objptr, ##61832
0ab70     40 EB BF FD | 	call	#_execute_line
0ab74     78 00 00 FF 
0ab78     88 E5 05 F1 | 	add	objptr, ##61832
0ab7c     F2 FA 61 FC | 	wrlong	result1, objptr
0ab80     04 E4 85 F1 | 	sub	objptr, #4
0ab84     F2 1E 02 FB | 	rdlong	local01, objptr
0ab88     78 00 00 FF 
0ab8c     84 E5 85 F1 | 	sub	objptr, ##61828
0ab90     FF FF 3F FF 
0ab94     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0ab98     0C 00 90 AD |  if_e	jmp	#LR__0863
0ab9c     B0 D8 B0 FD | 	call	#_usbnew_spin2_get_key
0aba0     06 FB 0D F2 | 	cmp	result1, #262 wz
0aba4     B4 FE 9F 5D |  if_ne	jmp	#LR__0861
0aba8                 | LR__0863
0aba8                 | ' if runheader(5)<>$7FFF_FFFF then 
0aba8     78 00 00 FF 
0abac     A8 E5 05 F1 | 	add	objptr, ##61864
0abb0     F2 1E 02 FB | 	rdlong	local01, objptr
0abb4     78 00 00 FF 
0abb8     A8 E5 85 F1 | 	sub	objptr, ##61864
0abbc     FF FF 3F FF 
0abc0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0abc4     BC 00 90 AD |  if_e	jmp	#LR__0865
0abc8                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len)  
0abc8     78 00 00 FF 
0abcc     B4 E5 05 F1 | 	add	objptr, ##61876
0abd0     F2 1E 02 FB | 	rdlong	local01, objptr
0abd4     78 00 00 FF 
0abd8     B4 E5 85 F1 | 	sub	objptr, ##61876
0abdc     01 1E 0E F2 | 	cmp	local01, #1 wz
0abe0     3C 00 90 5D |  if_ne	jmp	#LR__0864
0abe4     7A 00 00 FF 
0abe8     58 E4 05 F1 | 	add	objptr, ##62552
0abec     F2 14 02 FB | 	rdlong	arg02, objptr
0abf0     04 E4 85 F1 | 	sub	objptr, #4
0abf4     F2 1A 02 FB | 	rdlong	arg05, objptr
0abf8     07 12 06 F6 | 	mov	arg01, #7
0abfc     56 00 00 FF 
0ac00     44 16 06 F6 | 	mov	arg03, ##44100
0ac04     0E 18 C6 F9 | 	decod	arg04, #14
0ac08     01 1C 66 F6 | 	neg	arg06, #1
0ac0c     6E 00 00 FF 
0ac10     94 E5 85 F1 | 	sub	objptr, ##56724
0ac14     60 DB B0 FD | 	call	#_Audio093b_8_sc_spin2_play
0ac18     0B 00 00 FF 
0ac1c     C0 E4 85 F1 | 	sub	objptr, ##5824
0ac20                 | LR__0864
0ac20                 | '   print "Stopped at line ";runheader(0)
0ac20     00 12 06 F6 | 	mov	arg01, #0
0ac24     8C 38 B1 FD | 	call	#__system___getiolock_0423
0ac28     FD 12 02 F6 | 	mov	arg01, result1
0ac2c     80 DF B0 FD | 	call	#__system___lockmem
0ac30     42 01 00 FF 
0ac34     C2 15 06 F6 | 	mov	arg02, ##@LR__4569
0ac38     00 12 06 F6 | 	mov	arg01, #0
0ac3c     00 16 06 F6 | 	mov	arg03, #0
0ac40     60 EC B0 FD | 	call	#__system___basic_print_string
0ac44     78 00 00 FF 
0ac48     94 E5 05 F1 | 	add	objptr, ##61844
0ac4c     F2 14 02 FB | 	rdlong	arg02, objptr
0ac50     78 00 00 FF 
0ac54     94 E5 85 F1 | 	sub	objptr, ##61844
0ac58     00 12 06 F6 | 	mov	arg01, #0
0ac5c     00 16 06 F6 | 	mov	arg03, #0
0ac60     0A 18 06 F6 | 	mov	arg04, #10
0ac64     C0 EC B0 FD | 	call	#__system___basic_print_unsigned
0ac68     00 12 06 F6 | 	mov	arg01, #0
0ac6c     0A 14 06 F6 | 	mov	arg02, #10
0ac70     00 16 06 F6 | 	mov	arg03, #0
0ac74     D4 EB B0 FD | 	call	#__system___basic_print_char
0ac78     00 12 06 F6 | 	mov	arg01, #0
0ac7c     34 38 B1 FD | 	call	#__system___getiolock_0423
0ac80     FD 00 68 FC | 	wrlong	#0, result1
0ac84                 | LR__0865
0ac84     78 00 00 FF 
0ac88     90 E5 05 F1 | 	add	objptr, ##61840
0ac8c     F2 00 68 FC | 	wrlong	#0, objptr
0ac90     78 00 00 FF 
0ac94     90 E5 85 F1 | 	sub	objptr, ##61840
0ac98                 | LR__0866
0ac98     A7 F0 03 F6 | 	mov	ptra, fp
0ac9c     B2 00 A0 FD | 	call	#popregs_
0aca0                 | _do_run_ret
0aca0     2D 00 64 FD | 	ret
0aca4                 | 
0aca4                 | ' 
0aca4                 | ' sub do_defenv
0aca4                 | _do_defenv
0aca4     05 4A 05 F6 | 	mov	COUNT_, #5
0aca8     A8 00 A0 FD | 	call	#pushregs_
0acac     84 F0 07 F1 | 	add	ptra, #132
0acb0     69 00 00 FF 
0acb4     54 E4 05 F1 | 	add	objptr, ##53844
0acb8     F2 1A 02 FB | 	rdlong	arg05, objptr
0acbc     0D 19 02 F6 | 	mov	arg04, arg05
0acc0     01 18 66 F0 | 	shl	arg04, #1
0acc4     0D 19 02 F1 | 	add	arg04, arg05
0acc8     02 18 66 F0 | 	shl	arg04, #2
0accc     03 00 00 FF 
0acd0     04 E4 85 F1 | 	sub	objptr, ##1540
0acd4     F2 18 02 F1 | 	add	arg04, objptr
0acd8     0C 1B 02 FB | 	rdlong	arg05, arg04
0acdc     A7 1A 62 FC | 	wrlong	arg05, fp
0ace0                 | ' 
0ace0                 | ' numpar=compiledline(lineptr_e).result.uresult
0ace0                 | ' 
0ace0                 | ' 
0ace0                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0ace0                 | ' ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0ace0                 | ' ' Every 5 ms added 
0ace0                 | ' ' defsnd channel, a,d,s,r - defines ADSR as in SID 
0ace0                 | ' 
0ace0                 | ' 
0ace0                 | ' if numpar<2 then return
0ace0     02 1A 56 F2 | 	cmps	arg05, #2 wc
0ace4     66 00 00 FF 
0ace8     50 E4 85 F1 | 	sub	objptr, ##52304
0acec     40 0A 90 CD |  if_b	jmp	#LR__0897
0acf0                 | ' 
0acf0                 | '  
0acf0                 | ' if numpar=2 then
0acf0     A7 1A 02 FB | 	rdlong	arg05, fp
0acf4     02 1A 0E F2 | 	cmp	arg05, #2 wz
0acf8     AC 04 90 5D |  if_ne	jmp	#LR__0880
0acfc     B8 EA BF FD | 	call	#_pop
0ad00     FF 1A 02 F6 | 	mov	arg05, result3
0ad04     28 4E 05 F1 | 	add	fp, #40
0ad08     A7 FA 61 FC | 	wrlong	result1, fp
0ad0c     04 4E 05 F1 | 	add	fp, #4
0ad10     A7 FC 61 FC | 	wrlong	result2, fp
0ad14     04 4E 05 F1 | 	add	fp, #4
0ad18     A7 1A 62 FC | 	wrlong	arg05, fp
0ad1c                 | '   t1=pop()
0ad1c                 | '   if t1.result_type=result_string2 then 
0ad1c     30 4E 85 F1 | 	sub	fp, #48
0ad20     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0ad24     20 00 90 5D |  if_ne	jmp	#LR__0870
0ad28     28 4E 05 F1 | 	add	fp, #40
0ad2c     A7 12 02 FB | 	rdlong	arg01, fp
0ad30     28 4E 85 F1 | 	sub	fp, #40
0ad34     BC 1B B0 FD | 	call	#_convertstring
0ad38     34 4E 05 F1 | 	add	fp, #52
0ad3c     A7 FA 61 FC | 	wrlong	result1, fp
0ad40     34 4E 85 F1 | 	sub	fp, #52
0ad44     40 00 90 FD | 	jmp	#LR__0873
0ad48                 | LR__0870
0ad48     30 4E 05 F1 | 	add	fp, #48
0ad4c     A7 1A 02 FB | 	rdlong	arg05, fp
0ad50     30 4E 85 F1 | 	sub	fp, #48
0ad54     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0ad58     18 00 90 5D |  if_ne	jmp	#LR__0871
0ad5c     28 4E 05 F1 | 	add	fp, #40
0ad60     A7 1A 02 FB | 	rdlong	arg05, fp
0ad64     0C 4E 05 F1 | 	add	fp, #12
0ad68     A7 1A 62 FC | 	wrlong	arg05, fp
0ad6c     34 4E 85 F1 | 	sub	fp, #52
0ad70     14 00 90 FD | 	jmp	#LR__0872
0ad74                 | LR__0871
0ad74     42 01 00 FF 
0ad78     D3 1B 06 F6 | 	mov	arg05, ##@LR__4570
0ad7c     34 4E 05 F1 | 	add	fp, #52
0ad80     A7 1A 62 FC | 	wrlong	arg05, fp
0ad84     34 4E 85 F1 | 	sub	fp, #52
0ad88                 | LR__0872
0ad88                 | LR__0873
0ad88                 | ' 
0ad88                 | '     
0ad88                 | '   if s<>"" then 
0ad88     34 4E 05 F1 | 	add	fp, #52
0ad8c     A7 12 02 FB | 	rdlong	arg01, fp
0ad90     34 4E 85 F1 | 	sub	fp, #52
0ad94     42 01 00 FF 
0ad98     D4 15 06 F6 | 	mov	arg02, ##@LR__4571
0ad9c     38 DE B0 FD | 	call	#__system___string_cmp
0ada0     00 FA 0D F2 | 	cmp	result1, #0 wz
0ada4     9C 02 90 AD |  if_e	jmp	#LR__0878
0ada8     0C EA BF FD | 	call	#_pop
0adac     FF 1A 02 F6 | 	mov	arg05, result3
0adb0     28 4E 05 F1 | 	add	fp, #40
0adb4     A7 FA 61 FC | 	wrlong	result1, fp
0adb8     04 4E 05 F1 | 	add	fp, #4
0adbc     A7 FC 61 FC | 	wrlong	result2, fp
0adc0     04 4E 05 F1 | 	add	fp, #4
0adc4     A7 1A 62 FC | 	wrlong	arg05, fp
0adc8     08 4E 85 F1 | 	sub	fp, #8
0adcc     A7 12 02 F6 | 	mov	arg01, fp
0add0     28 4E 85 F1 | 	sub	fp, #40
0add4     C4 5E B0 FD | 	call	#_converttoint
0add8     10 4E 05 F1 | 	add	fp, #16
0addc     A7 FA 61 FC | 	wrlong	result1, fp
0ade0     10 4E 85 F1 | 	sub	fp, #16
0ade4                 | '     t1=pop()
0ade4                 | '     channel=converttoint(t1) 
0ade4                 | '     close #9 : open "/sd/media/h/"+s for input as #9
0ade4     09 12 06 F6 | 	mov	arg01, #9
0ade8     F8 2C B1 FD | 	call	#__system__close
0adec     09 1E 06 F6 | 	mov	local01, #9
0adf0     42 01 00 FF 
0adf4     D5 13 06 F6 | 	mov	arg01, ##@LR__4572
0adf8     34 4E 05 F1 | 	add	fp, #52
0adfc     A7 14 02 FB | 	rdlong	arg02, fp
0ae00     34 4E 85 F1 | 	sub	fp, #52
0ae04     04 DE B0 FD | 	call	#__system___string_concat
0ae08     FD 14 02 F6 | 	mov	arg02, result1
0ae0c     0F 13 02 F6 | 	mov	arg01, local01
0ae10     00 16 06 F6 | 	mov	arg03, #0
0ae14     9C E9 B0 FD | 	call	#__system___basic_open_string
0ae18     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0ae1c     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0ae20     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0ae24     7A 00 00 FF 
0ae28     D0 E4 05 F1 | 	add	objptr, ##62672
0ae2c     F2 FA 61 FC | 	wrlong	result1, objptr
0ae30                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0ae30     7A 00 00 FF 
0ae34     D0 E4 85 F1 | 	sub	objptr, ##62672
0ae38     B0 00 90 AD |  if_e	jmp	#LR__0874
0ae3c     00 12 06 F6 | 	mov	arg01, #0
0ae40     70 36 B1 FD | 	call	#__system___getiolock_0423
0ae44     FD 12 02 F6 | 	mov	arg01, result1
0ae48     64 DD B0 FD | 	call	#__system___lockmem
0ae4c     42 01 00 FF 
0ae50     E2 15 06 F6 | 	mov	arg02, ##@LR__4573
0ae54     00 12 06 F6 | 	mov	arg01, #0
0ae58     00 16 06 F6 | 	mov	arg03, #0
0ae5c     44 EA B0 FD | 	call	#__system___basic_print_string
0ae60     7A 00 00 FF 
0ae64     D0 E4 05 F1 | 	add	objptr, ##62672
0ae68     F2 14 02 FB | 	rdlong	arg02, objptr
0ae6c     7A 00 00 FF 
0ae70     D0 E4 85 F1 | 	sub	objptr, ##62672
0ae74     00 12 06 F6 | 	mov	arg01, #0
0ae78     00 16 06 F6 | 	mov	arg03, #0
0ae7c     0A 18 06 F6 | 	mov	arg04, #10
0ae80     64 EA B0 FD | 	call	#__system___basic_print_integer
0ae84     42 01 00 FF 
0ae88     F0 15 06 F6 | 	mov	arg02, ##@LR__4574
0ae8c     00 12 06 F6 | 	mov	arg01, #0
0ae90     00 16 06 F6 | 	mov	arg03, #0
0ae94     0C EA B0 FD | 	call	#__system___basic_print_string
0ae98     00 1E 06 F6 | 	mov	local01, #0
0ae9c     7A 00 00 FF 
0aea0     D0 E4 05 F1 | 	add	objptr, ##62672
0aea4     F2 12 02 FB | 	rdlong	arg01, objptr
0aea8     7A 00 00 FF 
0aeac     D0 E4 85 F1 | 	sub	objptr, ##62672
0aeb0     FC 02 B1 FD | 	call	#__system___strerror
0aeb4     FD 14 02 F6 | 	mov	arg02, result1
0aeb8     0F 13 02 F6 | 	mov	arg01, local01
0aebc     00 16 06 F6 | 	mov	arg03, #0
0aec0     E0 E9 B0 FD | 	call	#__system___basic_print_string
0aec4     00 12 06 F6 | 	mov	arg01, #0
0aec8     0A 14 06 F6 | 	mov	arg02, #10
0aecc     00 16 06 F6 | 	mov	arg03, #0
0aed0     78 E9 B0 FD | 	call	#__system___basic_print_char
0aed4     00 12 06 F6 | 	mov	arg01, #0
0aed8     D8 35 B1 FD | 	call	#__system___getiolock_0423
0aedc     FD 00 68 FC | 	wrlong	#0, result1
0aee0     09 12 06 F6 | 	mov	arg01, #9
0aee4     FC 2B B1 FD | 	call	#__system__close
0aee8     44 08 90 FD | 	jmp	#LR__0897
0aeec                 | LR__0874
0aeec                 | '     get #9,17,envbuf8(channel,0),256
0aeec     10 4E 05 F1 | 	add	fp, #16
0aef0     A7 1A 02 FB | 	rdlong	arg05, fp
0aef4     10 4E 85 F1 | 	sub	fp, #16
0aef8     0D 17 02 F6 | 	mov	arg03, arg05
0aefc     09 16 66 F0 | 	shl	arg03, #9
0af00     0D 17 02 F1 | 	add	arg03, arg05
0af04     2B 00 00 FF 
0af08     CC E5 05 F1 | 	add	objptr, ##22476
0af0c     F2 16 02 F1 | 	add	arg03, objptr
0af10     09 12 06 F6 | 	mov	arg01, #9
0af14     11 14 06 F6 | 	mov	arg02, #17
0af18     00 19 06 F6 | 	mov	arg04, #256
0af1c     01 1A 06 F6 | 	mov	arg05, #1
0af20     2B 00 00 FF 
0af24     CC E5 85 F1 | 	sub	objptr, ##22476
0af28     88 EA B0 FD | 	call	#__system___basic_get
0af2c                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0af2c     04 4E 05 F1 | 	add	fp, #4
0af30     A7 FE 69 FC | 	wrlong	#255, fp
0af34     04 4E 85 F1 | 	sub	fp, #4
0af38     2B 00 00 FF 
0af3c     CC E5 05 F1 | 	add	objptr, ##22476
0af40     97 34 48 FB | 	callpa	#(@LR__0876-@LR__0875)>>2,fcache_load_ptr_
0af44                 | LR__0875
0af44     10 4E 05 F1 | 	add	fp, #16
0af48     A7 1A 02 FB | 	rdlong	arg05, fp
0af4c     0D 19 02 F6 | 	mov	arg04, arg05
0af50     08 18 66 F0 | 	shl	arg04, #8
0af54     0D 19 02 F1 | 	add	arg04, arg05
0af58     01 18 66 F0 | 	shl	arg04, #1
0af5c     F2 18 02 F1 | 	add	arg04, objptr
0af60     0C 4E 85 F1 | 	sub	fp, #12
0af64     A7 16 02 FB | 	rdlong	arg03, fp
0af68     0B 15 02 F6 | 	mov	arg02, arg03
0af6c     01 14 66 F0 | 	shl	arg02, #1
0af70     0C 15 02 F1 | 	add	arg02, arg04
0af74     0D 19 02 F6 | 	mov	arg04, arg05
0af78     09 18 66 F0 | 	shl	arg04, #9
0af7c     0D 19 02 F1 | 	add	arg04, arg05
0af80     F2 18 02 F1 | 	add	arg04, objptr
0af84     0C 17 02 F1 | 	add	arg03, arg04
0af88     0B 1B C2 FA | 	rdbyte	arg05, arg03
0af8c     00 1B 06 FA | 	mul	arg05, #256
0af90     0A 1B 52 FC | 	wrword	arg05, arg02
0af94     A7 1A 02 FB | 	rdlong	arg05, fp
0af98     01 1A 86 F1 | 	sub	arg05, #1
0af9c     A7 1A 62 FC | 	wrlong	arg05, fp
0afa0     04 4E 85 F1 | 	sub	fp, #4
0afa4     00 1A 56 F2 | 	cmps	arg05, #0 wc
0afa8     98 FF 9F 3D |  if_ae	jmp	#LR__0875
0afac                 | LR__0876
0afac     2B 00 00 FF 
0afb0     CC E5 85 F1 | 	sub	objptr, ##22476
0afb4                 | '     close #9
0afb4     09 12 06 F6 | 	mov	arg01, #9
0afb8     28 2B B1 FD | 	call	#__system__close
0afbc                 | '                                                                       for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0afbc     04 4E 05 F1 | 	add	fp, #4
0afc0     A7 00 68 FC | 	wrlong	#0, fp
0afc4                 | LR__0877
0afc4     A7 1E 02 FB | 	rdlong	local01, fp
0afc8     0F 13 02 F6 | 	mov	arg01, local01
0afcc     0C 4E 05 F1 | 	add	fp, #12
0afd0     A7 1A 02 FB | 	rdlong	arg05, fp
0afd4     0D 19 02 F6 | 	mov	arg04, arg05
0afd8     08 18 66 F0 | 	shl	arg04, #8
0afdc     0D 19 02 F1 | 	add	arg04, arg05
0afe0     01 18 66 F0 | 	shl	arg04, #1
0afe4     2B 00 00 FF 
0afe8     CC E5 05 F1 | 	add	objptr, ##22476
0afec     F2 18 02 F1 | 	add	arg04, objptr
0aff0     01 1E 66 F0 | 	shl	local01, #1
0aff4     0C 1F 02 F1 | 	add	local01, arg04
0aff8     0F 1F E2 FA | 	rdword	local01, local01
0affc     0F 1F 52 F6 | 	abs	local01, local01 wc
0b000     90 1F 16 FD | 	qdiv	local01, #400
0b004     10 4E 85 F1 | 	sub	fp, #16
0b008     2B 00 00 FF 
0b00c     CC E5 85 F1 | 	sub	objptr, ##22476
0b010     20 15 06 F6 | 	mov	arg02, #288
0b014     28 16 06 F6 | 	mov	arg03, #40
0b018     18 1E 62 FD | 	getqx	local01
0b01c     0F 15 A2 F3 | 	sumnc	arg02, local01
0b020     3C BC B0 FD | 	call	#_hg010b_spin2_putpixel
0b024     04 4E 05 F1 | 	add	fp, #4
0b028     A7 1E 02 FB | 	rdlong	local01, fp
0b02c     01 1E 06 F1 | 	add	local01, #1
0b030     A7 1E 62 FC | 	wrlong	local01, fp
0b034     00 1F 56 F2 | 	cmps	local01, #256 wc
0b038     88 FF 9F CD |  if_b	jmp	#LR__0877
0b03c     04 4E 85 F1 | 	sub	fp, #4
0b040                 | '     return
0b040     EC 06 90 FD | 	jmp	#LR__0897
0b044                 | LR__0878
0b044     28 4E 05 F1 | 	add	fp, #40
0b048     A7 12 02 F6 | 	mov	arg01, fp
0b04c     28 4E 85 F1 | 	sub	fp, #40
0b050     48 5C B0 FD | 	call	#_converttoint
0b054     FD 1E 02 F6 | 	mov	local01, result1
0b058     0C 4E 05 F1 | 	add	fp, #12
0b05c     A7 1E 62 FC | 	wrlong	local01, fp
0b060     0C 4E 85 F1 | 	sub	fp, #12
0b064                 | '   
0b064                 | '   par=converttoint(t1)  : print par
0b064     00 12 06 F6 | 	mov	arg01, #0
0b068     48 34 B1 FD | 	call	#__system___getiolock_0423
0b06c     FD 12 02 F6 | 	mov	arg01, result1
0b070     3C DB B0 FD | 	call	#__system___lockmem
0b074     0C 4E 05 F1 | 	add	fp, #12
0b078     A7 14 02 FB | 	rdlong	arg02, fp
0b07c     0C 4E 85 F1 | 	sub	fp, #12
0b080     00 12 06 F6 | 	mov	arg01, #0
0b084     00 16 06 F6 | 	mov	arg03, #0
0b088     0A 18 06 F6 | 	mov	arg04, #10
0b08c     58 E8 B0 FD | 	call	#__system___basic_print_integer
0b090     00 12 06 F6 | 	mov	arg01, #0
0b094     0A 14 06 F6 | 	mov	arg02, #10
0b098     00 16 06 F6 | 	mov	arg03, #0
0b09c     AC E7 B0 FD | 	call	#__system___basic_print_char
0b0a0     00 12 06 F6 | 	mov	arg01, #0
0b0a4     0C 34 B1 FD | 	call	#__system___getiolock_0423
0b0a8     FD 00 68 FC | 	wrlong	#0, result1
0b0ac     08 E7 BF FD | 	call	#_pop
0b0b0     FF 1E 02 F6 | 	mov	local01, result3
0b0b4     28 4E 05 F1 | 	add	fp, #40
0b0b8     A7 FA 61 FC | 	wrlong	result1, fp
0b0bc     04 4E 05 F1 | 	add	fp, #4
0b0c0     A7 FC 61 FC | 	wrlong	result2, fp
0b0c4     04 4E 05 F1 | 	add	fp, #4
0b0c8     A7 1E 62 FC | 	wrlong	local01, fp
0b0cc     08 4E 85 F1 | 	sub	fp, #8
0b0d0     A7 12 02 F6 | 	mov	arg01, fp
0b0d4     28 4E 85 F1 | 	sub	fp, #40
0b0d8     C0 5B B0 FD | 	call	#_converttoint
0b0dc     10 4E 05 F1 | 	add	fp, #16
0b0e0     A7 FA 61 FC | 	wrlong	result1, fp
0b0e4                 | '   t1=pop()
0b0e4                 | '   channel=converttoint(t1)  
0b0e4                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0b0e4     04 4E 85 F1 | 	sub	fp, #4
0b0e8     A7 1E 0A FB | 	rdlong	local01, fp wz
0b0ec     0C 4E 85 F1 | 	sub	fp, #12
0b0f0     3C 06 90 5D |  if_ne	jmp	#LR__0897
0b0f4     04 4E 05 F1 | 	add	fp, #4
0b0f8     A7 00 68 FC | 	wrlong	#0, fp
0b0fc     04 4E 85 F1 | 	sub	fp, #4
0b100                 | LR__0879
0b100     10 4E 05 F1 | 	add	fp, #16
0b104     A7 1E 02 FB | 	rdlong	local01, fp
0b108     0B 1E 66 F0 | 	shl	local01, #11
0b10c     0B 00 00 FF 
0b110     CC E5 05 F1 | 	add	objptr, ##6092
0b114     F2 1E 02 F1 | 	add	local01, objptr
0b118     0C 4E 85 F1 | 	sub	fp, #12
0b11c     A7 12 02 FB | 	rdlong	arg01, fp
0b120     09 21 02 F6 | 	mov	local02, arg01
0b124     01 20 66 F0 | 	shl	local02, #1
0b128     0F 21 02 F1 | 	add	local02, local01
0b12c     04 4E 85 F1 | 	sub	fp, #4
0b130     0B 00 00 FF 
0b134     CC E5 85 F1 | 	sub	objptr, ##6092
0b138     09 13 52 F6 | 	abs	arg01, arg01 wc
0b13c     1F 22 C6 C9 |  if_b	decod	local03, #31
0b140     00 22 06 36 |  if_ae	mov	local03, #0
0b144     50 01 B1 FD | 	call	#__system___float_fromuns
0b148     11 FB 61 F5 | 	xor	result1, local03
0b14c     FD 14 02 F6 | 	mov	arg02, result1
0b150     87 E4 1D FF 
0b154     DB 13 06 F6 | 	mov	arg01, ##1003032539
0b158     40 05 B1 FD | 	call	#__system___float_mul
0b15c     FD 12 02 F6 | 	mov	arg01, result1
0b160     74 0E B1 FD | 	call	#__system____builtin_sinf
0b164     FD 14 02 F6 | 	mov	arg02, result1
0b168     58 7F 23 FF 
0b16c     00 12 06 F6 | 	mov	arg01, ##1191096320
0b170     28 05 B1 FD | 	call	#__system___float_mul
0b174     FD 12 02 F6 | 	mov	arg01, result1
0b178     01 14 06 F6 | 	mov	arg02, #1
0b17c     E4 09 B1 FD | 	call	#__system___float_tointeger
0b180     10 FB 51 FC | 	wrword	result1, local02
0b184     04 4E 05 F1 | 	add	fp, #4
0b188     A7 20 02 FB | 	rdlong	local02, fp
0b18c     01 20 06 F1 | 	add	local02, #1
0b190     A7 20 62 FC | 	wrlong	local02, fp
0b194     04 4E 85 F1 | 	sub	fp, #4
0b198     02 00 00 FF 
0b19c     00 20 56 F2 | 	cmps	local02, ##1024 wc
0b1a0     5C FF 9F CD |  if_b	jmp	#LR__0879
0b1a4                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0b1a4                 | '   return
0b1a4     88 05 90 FD | 	jmp	#LR__0897
0b1a8                 | LR__0880
0b1a8                 | ' for i=0 to 15 : harm(i)=0: next i  
0b1a8     04 4E 05 F1 | 	add	fp, #4
0b1ac     A7 00 68 FC | 	wrlong	#0, fp
0b1b0     97 16 48 FB | 	callpa	#(@LR__0882-@LR__0881)>>2,fcache_load_ptr_
0b1b4                 | LR__0881
0b1b4     A7 1E 02 FB | 	rdlong	local01, fp
0b1b8     02 1E 66 F0 | 	shl	local01, #2
0b1bc     34 4E 05 F1 | 	add	fp, #52
0b1c0     A7 1E 02 F1 | 	add	local01, fp
0b1c4     0F 01 68 FC | 	wrlong	#0, local01
0b1c8     34 4E 85 F1 | 	sub	fp, #52
0b1cc     A7 1E 02 FB | 	rdlong	local01, fp
0b1d0     01 1E 06 F1 | 	add	local01, #1
0b1d4     A7 1E 62 FC | 	wrlong	local01, fp
0b1d8     10 1E 56 F2 | 	cmps	local01, #16 wc
0b1dc     D4 FF 9F CD |  if_b	jmp	#LR__0881
0b1e0                 | LR__0882
0b1e0     04 4E 85 F1 | 	sub	fp, #4
0b1e4                 | ' for i=numpar to 2 step -1 
0b1e4     A7 1E 02 FB | 	rdlong	local01, fp
0b1e8     04 4E 05 F1 | 	add	fp, #4
0b1ec     A7 1E 62 FC | 	wrlong	local01, fp
0b1f0     04 4E 85 F1 | 	sub	fp, #4
0b1f4                 | LR__0883
0b1f4     C0 E5 BF FD | 	call	#_pop
0b1f8     28 4E 05 F1 | 	add	fp, #40
0b1fc     A7 FA 61 FC | 	wrlong	result1, fp
0b200     04 4E 05 F1 | 	add	fp, #4
0b204     A7 FC 61 FC | 	wrlong	result2, fp
0b208     04 4E 05 F1 | 	add	fp, #4
0b20c     A7 FE 61 FC | 	wrlong	result3, fp
0b210     2C 4E 85 F1 | 	sub	fp, #44
0b214     A7 1E 02 FB | 	rdlong	local01, fp
0b218     02 1E 86 F1 | 	sub	local01, #2
0b21c     02 1E 66 F0 | 	shl	local01, #2
0b220     34 4E 05 F1 | 	add	fp, #52
0b224     A7 1E 02 F1 | 	add	local01, fp
0b228     10 4E 85 F1 | 	sub	fp, #16
0b22c     A7 12 02 F6 | 	mov	arg01, fp
0b230     28 4E 85 F1 | 	sub	fp, #40
0b234     10 5B B0 FD | 	call	#_converttofloat
0b238     0F FB 61 FC | 	wrlong	result1, local01
0b23c     04 4E 05 F1 | 	add	fp, #4
0b240     A7 1E 02 FB | 	rdlong	local01, fp
0b244     01 1E 86 F1 | 	sub	local01, #1
0b248     A7 1E 62 FC | 	wrlong	local01, fp
0b24c     04 4E 85 F1 | 	sub	fp, #4
0b250     02 1E 56 F2 | 	cmps	local01, #2 wc
0b254     9C FF 9F 3D |  if_ae	jmp	#LR__0883
0b258     5C E5 BF FD | 	call	#_pop
0b25c     FF 1E 02 F6 | 	mov	local01, result3
0b260     28 4E 05 F1 | 	add	fp, #40
0b264     A7 FA 61 FC | 	wrlong	result1, fp
0b268     04 4E 05 F1 | 	add	fp, #4
0b26c     A7 FC 61 FC | 	wrlong	result2, fp
0b270     04 4E 05 F1 | 	add	fp, #4
0b274     A7 1E 62 FC | 	wrlong	local01, fp
0b278     08 4E 85 F1 | 	sub	fp, #8
0b27c     A7 12 02 F6 | 	mov	arg01, fp
0b280     28 4E 85 F1 | 	sub	fp, #40
0b284     14 5A B0 FD | 	call	#_converttoint
0b288     FD 1E 02 F6 | 	mov	local01, result1
0b28c     10 4E 05 F1 | 	add	fp, #16
0b290     A7 1E 62 FC | 	wrlong	local01, fp
0b294     10 4E 85 F1 | 	sub	fp, #16
0b298                 | ' t1=pop()
0b298                 | ' channel=converttoint(t1) : print channel
0b298     00 12 06 F6 | 	mov	arg01, #0
0b29c     14 32 B1 FD | 	call	#__system___getiolock_0423
0b2a0     FD 12 02 F6 | 	mov	arg01, result1
0b2a4     08 D9 B0 FD | 	call	#__system___lockmem
0b2a8     10 4E 05 F1 | 	add	fp, #16
0b2ac     A7 14 02 FB | 	rdlong	arg02, fp
0b2b0     10 4E 85 F1 | 	sub	fp, #16
0b2b4     00 12 06 F6 | 	mov	arg01, #0
0b2b8     00 16 06 F6 | 	mov	arg03, #0
0b2bc     0A 18 06 F6 | 	mov	arg04, #10
0b2c0     24 E6 B0 FD | 	call	#__system___basic_print_integer
0b2c4     00 12 06 F6 | 	mov	arg01, #0
0b2c8     0A 14 06 F6 | 	mov	arg02, #10
0b2cc     00 16 06 F6 | 	mov	arg03, #0
0b2d0     78 E5 B0 FD | 	call	#__system___basic_print_char
0b2d4     00 12 06 F6 | 	mov	arg01, #0
0b2d8     D8 31 B1 FD | 	call	#__system___getiolock_0423
0b2dc     FD 00 68 FC | 	wrlong	#0, result1
0b2e0                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0b2e0     08 4E 05 F1 | 	add	fp, #8
0b2e4     02 00 80 FF 
0b2e8     A7 00 68 FC | 	wrlong	##1024, fp
0b2ec     08 4E 85 F1 | 	sub	fp, #8
0b2f0     0B 00 00 FF 
0b2f4     CC E5 05 F1 | 	add	objptr, ##6092
0b2f8     97 18 48 FB | 	callpa	#(@LR__0886-@LR__0884)>>2,fcache_load_ptr_
0b2fc                 | LR__0884
0b2fc     02 00 00 FF 
0b300     00 14 DC FC | 	rep	@LR__0887, ##1024
0b304                 | LR__0885
0b304     10 4E 05 F1 | 	add	fp, #16
0b308     A7 20 02 FB | 	rdlong	local02, fp
0b30c     0B 20 66 F0 | 	shl	local02, #11
0b310     F2 20 02 F1 | 	add	local02, objptr
0b314     0C 4E 85 F1 | 	sub	fp, #12
0b318     A7 1E 02 FB | 	rdlong	local01, fp
0b31c     04 4E 85 F1 | 	sub	fp, #4
0b320     01 1E 66 F0 | 	shl	local01, #1
0b324     10 1F 02 F1 | 	add	local01, local02
0b328     0F 01 58 FC | 	wrword	#0, local01
0b32c                 | LR__0886
0b32c                 | LR__0887
0b32c     0B 00 00 FF 
0b330     CC E5 85 F1 | 	sub	objptr, ##6092
0b334     1C 4E 05 F1 | 	add	fp, #28
0b338     A7 00 68 FC | 	wrlong	#0, fp
0b33c                 | ' max=0
0b33c                 | ' if harm(0)<0 then
0b33c     1C 4E 05 F1 | 	add	fp, #28
0b340     A7 12 02 FB | 	rdlong	arg01, fp
0b344     38 4E 85 F1 | 	sub	fp, #56
0b348     00 14 06 F6 | 	mov	arg02, #0
0b34c     01 16 06 F6 | 	mov	arg03, #1
0b350     7C 07 B1 FD | 	call	#__system___float_cmp
0b354     00 FA 55 F2 | 	cmps	result1, #0 wc
0b358     04 01 90 3D |  if_ae	jmp	#LR__0890
0b35c     38 4E 05 F1 | 	add	fp, #56
0b360     A7 FA 01 FB | 	rdlong	result1, fp
0b364     1F FA 05 F4 | 	bitl	result1, #31
0b368     24 4E 85 F1 | 	sub	fp, #36
0b36c     A7 FA 61 FC | 	wrlong	result1, fp
0b370     28 4E 05 F1 | 	add	fp, #40
0b374     A7 FA 01 FB | 	rdlong	result1, fp
0b378     1F FA 05 F4 | 	bitl	result1, #31
0b37c     24 4E 85 F1 | 	sub	fp, #36
0b380     A7 FA 61 FC | 	wrlong	result1, fp
0b384     20 4E 05 F1 | 	add	fp, #32
0b388     00 C0 9F FF 
0b38c     A7 00 68 FC | 	wrlong	##1065353216, fp
0b390     24 4E 85 F1 | 	sub	fp, #36
0b394     A7 1E 02 FB | 	rdlong	local01, fp
0b398     28 4E 05 F1 | 	add	fp, #40
0b39c     A7 1E 62 FC | 	wrlong	local01, fp
0b3a0     24 4E 85 F1 | 	sub	fp, #36
0b3a4     A7 1E 02 FB | 	rdlong	local01, fp
0b3a8     28 4E 05 F1 | 	add	fp, #40
0b3ac     A7 1E 62 FC | 	wrlong	local01, fp
0b3b0                 | '   harm(0)=1
0b3b0                 | '   harm(1)=even
0b3b0                 | '   harm(2)=odd
0b3b0                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0b3b0     3C 4E 85 F1 | 	sub	fp, #60
0b3b4     A7 06 68 FC | 	wrlong	#3, fp
0b3b8                 | LR__0888
0b3b8     A7 1A 02 FB | 	rdlong	arg05, fp
0b3bc     0D 25 02 F6 | 	mov	local04, arg05
0b3c0     02 24 66 F0 | 	shl	local04, #2
0b3c4     34 4E 05 F1 | 	add	fp, #52
0b3c8     A7 24 02 F1 | 	add	local04, fp
0b3cc     02 1A 86 F1 | 	sub	arg05, #2
0b3d0     02 1A 66 F0 | 	shl	arg05, #2
0b3d4     A7 1A 02 F1 | 	add	arg05, fp
0b3d8     0D 13 02 FB | 	rdlong	arg01, arg05
0b3dc     24 4E 85 F1 | 	sub	fp, #36
0b3e0     A7 14 02 FB | 	rdlong	arg02, fp
0b3e4     14 4E 85 F1 | 	sub	fp, #20
0b3e8     B0 02 B1 FD | 	call	#__system___float_mul
0b3ec     12 FB 61 FC | 	wrlong	result1, local04
0b3f0     04 4E 05 F1 | 	add	fp, #4
0b3f4     A7 26 02 FB | 	rdlong	local05, fp
0b3f8     02 26 06 F1 | 	add	local05, #2
0b3fc     A7 26 62 FC | 	wrlong	local05, fp
0b400     10 26 56 F2 | 	cmps	local05, #16 wc
0b404     B0 FF 9F CD |  if_b	jmp	#LR__0888
0b408                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0b408     A7 08 68 FC | 	wrlong	#4, fp
0b40c                 | LR__0889
0b40c     A7 26 02 FB | 	rdlong	local05, fp
0b410     13 25 02 F6 | 	mov	local04, local05
0b414     02 24 66 F0 | 	shl	local04, #2
0b418     34 4E 05 F1 | 	add	fp, #52
0b41c     A7 24 02 F1 | 	add	local04, fp
0b420     02 26 86 F1 | 	sub	local05, #2
0b424     02 26 66 F0 | 	shl	local05, #2
0b428     A7 26 02 F1 | 	add	local05, fp
0b42c     13 13 02 FB | 	rdlong	arg01, local05
0b430     20 4E 85 F1 | 	sub	fp, #32
0b434     A7 14 02 FB | 	rdlong	arg02, fp
0b438     18 4E 85 F1 | 	sub	fp, #24
0b43c     5C 02 B1 FD | 	call	#__system___float_mul
0b440     12 FB 61 FC | 	wrlong	result1, local04
0b444     04 4E 05 F1 | 	add	fp, #4
0b448     A7 26 02 FB | 	rdlong	local05, fp
0b44c     02 26 06 F1 | 	add	local05, #2
0b450     A7 26 62 FC | 	wrlong	local05, fp
0b454     0F 26 56 F2 | 	cmps	local05, #15 wc
0b458     B0 FF 9F CD |  if_b	jmp	#LR__0889
0b45c     04 4E 85 F1 | 	sub	fp, #4
0b460                 | LR__0890
0b460                 | ' if harm(0)>=0 then ' synthesize with harmonics
0b460     38 4E 05 F1 | 	add	fp, #56
0b464     A7 12 02 FB | 	rdlong	arg01, fp
0b468     38 4E 85 F1 | 	sub	fp, #56
0b46c     00 14 06 F6 | 	mov	arg02, #0
0b470     01 16 66 F6 | 	neg	arg03, #1
0b474     58 06 B1 FD | 	call	#__system___float_cmp
0b478     00 FA 55 F2 | 	cmps	result1, #0 wc
0b47c     B0 02 90 CD |  if_b	jmp	#LR__0896
0b480                 | '   for i=0 to 1023
0b480     04 4E 05 F1 | 	add	fp, #4
0b484     A7 00 68 FC | 	wrlong	#0, fp
0b488     04 4E 85 F1 | 	sub	fp, #4
0b48c                 | LR__0891
0b48c     20 4E 05 F1 | 	add	fp, #32
0b490     A7 00 68 FC | 	wrlong	#0, fp
0b494                 | '     spl=0
0b494                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0b494     18 4E 85 F1 | 	sub	fp, #24
0b498     A7 00 68 FC | 	wrlong	#0, fp
0b49c                 | LR__0892
0b49c     A7 24 02 FB | 	rdlong	local04, fp
0b4a0     02 24 66 F0 | 	shl	local04, #2
0b4a4     30 4E 05 F1 | 	add	fp, #48
0b4a8     A7 24 02 F1 | 	add	local04, fp
0b4ac     12 27 02 FB | 	rdlong	local05, local04
0b4b0     87 E4 1D FF 
0b4b4     DB 25 06 F6 | 	mov	local04, ##1003032539
0b4b8     34 4E 85 F1 | 	sub	fp, #52
0b4bc     A7 12 02 FB | 	rdlong	arg01, fp
0b4c0     04 4E 85 F1 | 	sub	fp, #4
0b4c4     09 13 52 F6 | 	abs	arg01, arg01 wc
0b4c8     1F 22 C6 C9 |  if_b	decod	local03, #31
0b4cc     00 22 06 36 |  if_ae	mov	local03, #0
0b4d0     C4 FD B0 FD | 	call	#__system___float_fromuns
0b4d4     11 FB 61 F5 | 	xor	result1, local03
0b4d8     FD 14 02 F6 | 	mov	arg02, result1
0b4dc     12 13 02 F6 | 	mov	arg01, local04
0b4e0     B8 01 B1 FD | 	call	#__system___float_mul
0b4e4     FD 24 02 F6 | 	mov	local04, result1
0b4e8     08 4E 05 F1 | 	add	fp, #8
0b4ec     A7 12 02 FB | 	rdlong	arg01, fp
0b4f0     08 4E 85 F1 | 	sub	fp, #8
0b4f4     01 12 06 F1 | 	add	arg01, #1
0b4f8     09 13 52 F6 | 	abs	arg01, arg01 wc
0b4fc     1F 22 C6 C9 |  if_b	decod	local03, #31
0b500     00 22 06 36 |  if_ae	mov	local03, #0
0b504     90 FD B0 FD | 	call	#__system___float_fromuns
0b508     11 FB 61 F5 | 	xor	result1, local03
0b50c     FD 14 02 F6 | 	mov	arg02, result1
0b510     12 13 02 F6 | 	mov	arg01, local04
0b514     84 01 B1 FD | 	call	#__system___float_mul
0b518     FD 12 02 F6 | 	mov	arg01, result1
0b51c     B8 0A B1 FD | 	call	#__system____builtin_sinf
0b520     FD 14 02 F6 | 	mov	arg02, result1
0b524     13 13 02 F6 | 	mov	arg01, local05
0b528     70 01 B1 FD | 	call	#__system___float_mul
0b52c     FD 14 02 F6 | 	mov	arg02, result1
0b530     20 4E 05 F1 | 	add	fp, #32
0b534     A7 12 02 FB | 	rdlong	arg01, fp
0b538     20 4E 85 F1 | 	sub	fp, #32
0b53c     8C FD B0 FD | 	call	#__system___float_add
0b540     20 4E 05 F1 | 	add	fp, #32
0b544     A7 FA 61 FC | 	wrlong	result1, fp
0b548     18 4E 85 F1 | 	sub	fp, #24
0b54c     A7 16 02 FB | 	rdlong	arg03, fp
0b550     01 16 06 F1 | 	add	arg03, #1
0b554     A7 16 62 FC | 	wrlong	arg03, fp
0b558     10 16 56 F2 | 	cmps	arg03, #16 wc
0b55c     3C FF 9F CD |  if_b	jmp	#LR__0892
0b560                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0b560     18 4E 05 F1 | 	add	fp, #24
0b564     A7 12 02 FB | 	rdlong	arg01, fp
0b568     1F 12 06 F4 | 	bitl	arg01, #31
0b56c     04 4E 85 F1 | 	sub	fp, #4
0b570     A7 14 02 FB | 	rdlong	arg02, fp
0b574     1C 4E 85 F1 | 	sub	fp, #28
0b578     01 16 66 F6 | 	neg	arg03, #1
0b57c     50 05 B1 FD | 	call	#__system___float_cmp
0b580     01 FA 55 F2 | 	cmps	result1, #1 wc
0b584     18 00 90 CD |  if_b	jmp	#LR__0893
0b588     20 4E 05 F1 | 	add	fp, #32
0b58c     A7 FA 01 FB | 	rdlong	result1, fp
0b590     1F FA 05 F4 | 	bitl	result1, #31
0b594     04 4E 85 F1 | 	sub	fp, #4
0b598     A7 FA 61 FC | 	wrlong	result1, fp
0b59c     1C 4E 85 F1 | 	sub	fp, #28
0b5a0                 | LR__0893
0b5a0     04 4E 05 F1 | 	add	fp, #4
0b5a4     A7 26 02 FB | 	rdlong	local05, fp
0b5a8     01 26 06 F1 | 	add	local05, #1
0b5ac     A7 26 62 FC | 	wrlong	local05, fp
0b5b0     04 4E 85 F1 | 	sub	fp, #4
0b5b4     02 00 00 FF 
0b5b8     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b5bc     CC FE 9F CD |  if_b	jmp	#LR__0891
0b5c0                 | '   for i=0 to 1023
0b5c0     04 4E 05 F1 | 	add	fp, #4
0b5c4     A7 00 68 FC | 	wrlong	#0, fp
0b5c8     04 4E 85 F1 | 	sub	fp, #4
0b5cc                 | LR__0894
0b5cc     20 4E 05 F1 | 	add	fp, #32
0b5d0     A7 00 68 FC | 	wrlong	#0, fp
0b5d4                 | '     spl=0
0b5d4                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0b5d4     18 4E 85 F1 | 	sub	fp, #24
0b5d8     A7 00 68 FC | 	wrlong	#0, fp
0b5dc                 | LR__0895
0b5dc     A7 26 02 FB | 	rdlong	local05, fp
0b5e0     02 26 66 F0 | 	shl	local05, #2
0b5e4     30 4E 05 F1 | 	add	fp, #48
0b5e8     A7 26 02 F1 | 	add	local05, fp
0b5ec     13 27 02 FB | 	rdlong	local05, local05
0b5f0     1C 4E 85 F1 | 	sub	fp, #28
0b5f4     A7 14 02 FB | 	rdlong	arg02, fp
0b5f8     1C 4E 85 F1 | 	sub	fp, #28
0b5fc     58 7F 23 FF 
0b600     00 12 06 F6 | 	mov	arg01, ##1191096320
0b604     98 02 B1 FD | 	call	#__system___float_div
0b608     FD 14 02 F6 | 	mov	arg02, result1
0b60c     13 13 02 F6 | 	mov	arg01, local05
0b610     88 00 B1 FD | 	call	#__system___float_mul
0b614     FD 26 02 F6 | 	mov	local05, result1
0b618     87 E4 1D FF 
0b61c     DB 25 06 F6 | 	mov	local04, ##1003032539
0b620     04 4E 05 F1 | 	add	fp, #4
0b624     A7 12 02 FB | 	rdlong	arg01, fp
0b628     04 4E 85 F1 | 	sub	fp, #4
0b62c     09 13 52 F6 | 	abs	arg01, arg01 wc
0b630     1F 22 C6 C9 |  if_b	decod	local03, #31
0b634     00 22 06 36 |  if_ae	mov	local03, #0
0b638     5C FC B0 FD | 	call	#__system___float_fromuns
0b63c     11 FB 61 F5 | 	xor	result1, local03
0b640     FD 14 02 F6 | 	mov	arg02, result1
0b644     12 13 02 F6 | 	mov	arg01, local04
0b648     50 00 B1 FD | 	call	#__system___float_mul
0b64c     FD 24 02 F6 | 	mov	local04, result1
0b650     08 4E 05 F1 | 	add	fp, #8
0b654     A7 12 02 FB | 	rdlong	arg01, fp
0b658     08 4E 85 F1 | 	sub	fp, #8
0b65c     01 12 06 F1 | 	add	arg01, #1
0b660     09 13 52 F6 | 	abs	arg01, arg01 wc
0b664     1F 22 C6 C9 |  if_b	decod	local03, #31
0b668     00 22 06 36 |  if_ae	mov	local03, #0
0b66c     28 FC B0 FD | 	call	#__system___float_fromuns
0b670     11 FB 61 F5 | 	xor	result1, local03
0b674     FD 14 02 F6 | 	mov	arg02, result1
0b678     12 13 02 F6 | 	mov	arg01, local04
0b67c     1C 00 B1 FD | 	call	#__system___float_mul
0b680     FD 12 02 F6 | 	mov	arg01, result1
0b684     50 09 B1 FD | 	call	#__system____builtin_sinf
0b688     FD 14 02 F6 | 	mov	arg02, result1
0b68c     13 13 02 F6 | 	mov	arg01, local05
0b690     08 00 B1 FD | 	call	#__system___float_mul
0b694     FD 14 02 F6 | 	mov	arg02, result1
0b698     20 4E 05 F1 | 	add	fp, #32
0b69c     A7 12 02 FB | 	rdlong	arg01, fp
0b6a0     20 4E 85 F1 | 	sub	fp, #32
0b6a4     24 FC B0 FD | 	call	#__system___float_add
0b6a8     20 4E 05 F1 | 	add	fp, #32
0b6ac     A7 FA 61 FC | 	wrlong	result1, fp
0b6b0     18 4E 85 F1 | 	sub	fp, #24
0b6b4     A7 26 02 FB | 	rdlong	local05, fp
0b6b8     01 26 06 F1 | 	add	local05, #1
0b6bc     A7 26 62 FC | 	wrlong	local05, fp
0b6c0     10 26 56 F2 | 	cmps	local05, #16 wc
0b6c4     14 FF 9F CD |  if_b	jmp	#LR__0895
0b6c8     08 4E 05 F1 | 	add	fp, #8
0b6cc     A7 26 02 FB | 	rdlong	local05, fp
0b6d0     0B 26 66 F0 | 	shl	local05, #11
0b6d4     0B 00 00 FF 
0b6d8     CC E5 05 F1 | 	add	objptr, ##6092
0b6dc     F2 26 02 F1 | 	add	local05, objptr
0b6e0     0C 4E 85 F1 | 	sub	fp, #12
0b6e4     A7 20 02 FB | 	rdlong	local02, fp
0b6e8     01 20 66 F0 | 	shl	local02, #1
0b6ec     13 21 02 F1 | 	add	local02, local05
0b6f0     1C 4E 05 F1 | 	add	fp, #28
0b6f4     A7 12 02 FB | 	rdlong	arg01, fp
0b6f8     20 4E 85 F1 | 	sub	fp, #32
0b6fc     0B 00 00 FF 
0b700     CC E5 85 F1 | 	sub	objptr, ##6092
0b704     01 14 06 F6 | 	mov	arg02, #1
0b708     58 04 B1 FD | 	call	#__system___float_tointeger
0b70c     10 FB 51 FC | 	wrword	result1, local02
0b710     04 4E 05 F1 | 	add	fp, #4
0b714     A7 26 02 FB | 	rdlong	local05, fp
0b718     01 26 06 F1 | 	add	local05, #1
0b71c     A7 26 62 FC | 	wrlong	local05, fp
0b720     04 4E 85 F1 | 	sub	fp, #4
0b724     02 00 00 FF 
0b728     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b72c     9C FE 9F CD |  if_b	jmp	#LR__0894
0b730                 | LR__0896
0b730                 | LR__0897
0b730     A7 F0 03 F6 | 	mov	ptra, fp
0b734     B2 00 A0 FD | 	call	#popregs_
0b738                 | _do_defenv_ret
0b738     2D 00 64 FD | 	ret
0b73c                 | 
0b73c                 | ' 
0b73c                 | ' sub do_defsnd
0b73c                 | _do_defsnd
0b73c     05 4A 05 F6 | 	mov	COUNT_, #5
0b740     A8 00 A0 FD | 	call	#pushregs_
0b744     84 F0 07 F1 | 	add	ptra, #132
0b748     69 00 00 FF 
0b74c     54 E4 05 F1 | 	add	objptr, ##53844
0b750     F2 1A 02 FB | 	rdlong	arg05, objptr
0b754     0D 19 02 F6 | 	mov	arg04, arg05
0b758     01 18 66 F0 | 	shl	arg04, #1
0b75c     0D 19 02 F1 | 	add	arg04, arg05
0b760     02 18 66 F0 | 	shl	arg04, #2
0b764     03 00 00 FF 
0b768     04 E4 85 F1 | 	sub	objptr, ##1540
0b76c     F2 18 02 F1 | 	add	arg04, objptr
0b770     0C 1B 02 FB | 	rdlong	arg05, arg04
0b774     A7 1A 62 FC | 	wrlong	arg05, fp
0b778                 | ' 
0b778                 | ' numpar=compiledline(lineptr_e).result.uresult
0b778                 | ' 
0b778                 | ' 
0b778                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0b778                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0b778                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0b778                 | ' ' defsnd channel, oneint - defines waveshape as in SID and 0=sinewave
0b778                 | ' 
0b778                 | ' if numpar<2 then return
0b778     02 1A 56 F2 | 	cmps	arg05, #2 wc
0b77c     66 00 00 FF 
0b780     50 E4 85 F1 | 	sub	objptr, ##52304
0b784     2C 09 90 CD |  if_b	jmp	#LR__0924
0b788                 | ' 
0b788                 | '  
0b788                 | ' if numpar=2 then
0b788     A7 1A 02 FB | 	rdlong	arg05, fp
0b78c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0b790     98 03 90 5D |  if_ne	jmp	#LR__0907
0b794     20 E0 BF FD | 	call	#_pop
0b798     FF 1A 02 F6 | 	mov	arg05, result3
0b79c     28 4E 05 F1 | 	add	fp, #40
0b7a0     A7 FA 61 FC | 	wrlong	result1, fp
0b7a4     04 4E 05 F1 | 	add	fp, #4
0b7a8     A7 FC 61 FC | 	wrlong	result2, fp
0b7ac     04 4E 05 F1 | 	add	fp, #4
0b7b0     A7 1A 62 FC | 	wrlong	arg05, fp
0b7b4                 | '   t1=pop()
0b7b4                 | '   if t1.result_type=result_string2 then 
0b7b4     30 4E 85 F1 | 	sub	fp, #48
0b7b8     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0b7bc     20 00 90 5D |  if_ne	jmp	#LR__0900
0b7c0     28 4E 05 F1 | 	add	fp, #40
0b7c4     A7 12 02 FB | 	rdlong	arg01, fp
0b7c8     28 4E 85 F1 | 	sub	fp, #40
0b7cc     24 11 B0 FD | 	call	#_convertstring
0b7d0     34 4E 05 F1 | 	add	fp, #52
0b7d4     A7 FA 61 FC | 	wrlong	result1, fp
0b7d8     34 4E 85 F1 | 	sub	fp, #52
0b7dc     40 00 90 FD | 	jmp	#LR__0903
0b7e0                 | LR__0900
0b7e0     30 4E 05 F1 | 	add	fp, #48
0b7e4     A7 1A 02 FB | 	rdlong	arg05, fp
0b7e8     30 4E 85 F1 | 	sub	fp, #48
0b7ec     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0b7f0     18 00 90 5D |  if_ne	jmp	#LR__0901
0b7f4     28 4E 05 F1 | 	add	fp, #40
0b7f8     A7 1A 02 FB | 	rdlong	arg05, fp
0b7fc     0C 4E 05 F1 | 	add	fp, #12
0b800     A7 1A 62 FC | 	wrlong	arg05, fp
0b804     34 4E 85 F1 | 	sub	fp, #52
0b808     14 00 90 FD | 	jmp	#LR__0902
0b80c                 | LR__0901
0b80c     42 01 00 FF 
0b810     F3 1B 06 F6 | 	mov	arg05, ##@LR__4575
0b814     34 4E 05 F1 | 	add	fp, #52
0b818     A7 1A 62 FC | 	wrlong	arg05, fp
0b81c     34 4E 85 F1 | 	sub	fp, #52
0b820                 | LR__0902
0b820                 | LR__0903
0b820                 | ' 
0b820                 | '     
0b820                 | '   if s<>"" then 
0b820     34 4E 05 F1 | 	add	fp, #52
0b824     A7 12 02 FB | 	rdlong	arg01, fp
0b828     34 4E 85 F1 | 	sub	fp, #52
0b82c     42 01 00 FF 
0b830     F4 15 06 F6 | 	mov	arg02, ##@LR__4576
0b834     A0 D3 B0 FD | 	call	#__system___string_cmp
0b838     00 FA 0D F2 | 	cmp	result1, #0 wz
0b83c     88 01 90 AD |  if_e	jmp	#LR__0905
0b840     74 DF BF FD | 	call	#_pop
0b844     FF 1A 02 F6 | 	mov	arg05, result3
0b848     28 4E 05 F1 | 	add	fp, #40
0b84c     A7 FA 61 FC | 	wrlong	result1, fp
0b850     04 4E 05 F1 | 	add	fp, #4
0b854     A7 FC 61 FC | 	wrlong	result2, fp
0b858     04 4E 05 F1 | 	add	fp, #4
0b85c     A7 1A 62 FC | 	wrlong	arg05, fp
0b860     08 4E 85 F1 | 	sub	fp, #8
0b864     A7 12 02 F6 | 	mov	arg01, fp
0b868     28 4E 85 F1 | 	sub	fp, #40
0b86c     2C 54 B0 FD | 	call	#_converttoint
0b870     10 4E 05 F1 | 	add	fp, #16
0b874     A7 FA 61 FC | 	wrlong	result1, fp
0b878     10 4E 85 F1 | 	sub	fp, #16
0b87c                 | '     t1=pop()
0b87c                 | '     channel=converttoint(t1) 
0b87c                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0b87c     09 12 06 F6 | 	mov	arg01, #9
0b880     60 22 B1 FD | 	call	#__system__close
0b884     09 1E 06 F6 | 	mov	local01, #9
0b888     42 01 00 FF 
0b88c     F5 13 06 F6 | 	mov	arg01, ##@LR__4577
0b890     34 4E 05 F1 | 	add	fp, #52
0b894     A7 14 02 FB | 	rdlong	arg02, fp
0b898     34 4E 85 F1 | 	sub	fp, #52
0b89c     6C D3 B0 FD | 	call	#__system___string_concat
0b8a0     FD 14 02 F6 | 	mov	arg02, result1
0b8a4     0F 13 02 F6 | 	mov	arg01, local01
0b8a8     00 16 06 F6 | 	mov	arg03, #0
0b8ac     04 DF B0 FD | 	call	#__system___basic_open_string
0b8b0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0b8b4     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b8b8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0b8bc     7A 00 00 FF 
0b8c0     D0 E4 05 F1 | 	add	objptr, ##62672
0b8c4     F2 FA 61 FC | 	wrlong	result1, objptr
0b8c8                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0b8c8     7A 00 00 FF 
0b8cc     D0 E4 85 F1 | 	sub	objptr, ##62672
0b8d0     B0 00 90 AD |  if_e	jmp	#LR__0904
0b8d4     00 12 06 F6 | 	mov	arg01, #0
0b8d8     D8 2B B1 FD | 	call	#__system___getiolock_0423
0b8dc     FD 12 02 F6 | 	mov	arg01, result1
0b8e0     CC D2 B0 FD | 	call	#__system___lockmem
0b8e4     43 01 00 FF 
0b8e8     02 14 06 F6 | 	mov	arg02, ##@LR__4578
0b8ec     00 12 06 F6 | 	mov	arg01, #0
0b8f0     00 16 06 F6 | 	mov	arg03, #0
0b8f4     AC DF B0 FD | 	call	#__system___basic_print_string
0b8f8     7A 00 00 FF 
0b8fc     D0 E4 05 F1 | 	add	objptr, ##62672
0b900     F2 14 02 FB | 	rdlong	arg02, objptr
0b904     7A 00 00 FF 
0b908     D0 E4 85 F1 | 	sub	objptr, ##62672
0b90c     00 12 06 F6 | 	mov	arg01, #0
0b910     00 16 06 F6 | 	mov	arg03, #0
0b914     0A 18 06 F6 | 	mov	arg04, #10
0b918     CC DF B0 FD | 	call	#__system___basic_print_integer
0b91c     43 01 00 FF 
0b920     10 14 06 F6 | 	mov	arg02, ##@LR__4579
0b924     00 12 06 F6 | 	mov	arg01, #0
0b928     00 16 06 F6 | 	mov	arg03, #0
0b92c     74 DF B0 FD | 	call	#__system___basic_print_string
0b930     00 1E 06 F6 | 	mov	local01, #0
0b934     7A 00 00 FF 
0b938     D0 E4 05 F1 | 	add	objptr, ##62672
0b93c     F2 12 02 FB | 	rdlong	arg01, objptr
0b940     7A 00 00 FF 
0b944     D0 E4 85 F1 | 	sub	objptr, ##62672
0b948     64 F8 B0 FD | 	call	#__system___strerror
0b94c     FD 14 02 F6 | 	mov	arg02, result1
0b950     0F 13 02 F6 | 	mov	arg01, local01
0b954     00 16 06 F6 | 	mov	arg03, #0
0b958     48 DF B0 FD | 	call	#__system___basic_print_string
0b95c     00 12 06 F6 | 	mov	arg01, #0
0b960     0A 14 06 F6 | 	mov	arg02, #10
0b964     00 16 06 F6 | 	mov	arg03, #0
0b968     E0 DE B0 FD | 	call	#__system___basic_print_char
0b96c     00 12 06 F6 | 	mov	arg01, #0
0b970     40 2B B1 FD | 	call	#__system___getiolock_0423
0b974     FD 00 68 FC | 	wrlong	#0, result1
0b978     09 12 06 F6 | 	mov	arg01, #9
0b97c     64 21 B1 FD | 	call	#__system__close
0b980     30 07 90 FD | 	jmp	#LR__0924
0b984                 | LR__0904
0b984                 | '     get #9,17,samplebuf(channel,0),1024
0b984     10 4E 05 F1 | 	add	fp, #16
0b988     A7 16 02 FB | 	rdlong	arg03, fp
0b98c     10 4E 85 F1 | 	sub	fp, #16
0b990     0B 16 66 F0 | 	shl	arg03, #11
0b994     0B 00 00 FF 
0b998     CC E5 05 F1 | 	add	objptr, ##6092
0b99c     F2 16 02 F1 | 	add	arg03, objptr
0b9a0     09 12 06 F6 | 	mov	arg01, #9
0b9a4     11 14 06 F6 | 	mov	arg02, #17
0b9a8     0A 18 C6 F9 | 	decod	arg04, #10
0b9ac     02 1A 06 F6 | 	mov	arg05, #2
0b9b0     0B 00 00 FF 
0b9b4     CC E5 85 F1 | 	sub	objptr, ##6092
0b9b8     F8 DF B0 FD | 	call	#__system___basic_get
0b9bc                 | '     close #9
0b9bc     09 12 06 F6 | 	mov	arg01, #9
0b9c0     20 21 B1 FD | 	call	#__system__close
0b9c4                 | '                                                                       '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0b9c4                 | '     return
0b9c4     EC 06 90 FD | 	jmp	#LR__0924
0b9c8                 | LR__0905
0b9c8     28 4E 05 F1 | 	add	fp, #40
0b9cc     A7 12 02 F6 | 	mov	arg01, fp
0b9d0     28 4E 85 F1 | 	sub	fp, #40
0b9d4     C4 52 B0 FD | 	call	#_converttoint
0b9d8     FD 1E 02 F6 | 	mov	local01, result1
0b9dc     0C 4E 05 F1 | 	add	fp, #12
0b9e0     A7 1E 62 FC | 	wrlong	local01, fp
0b9e4     0C 4E 85 F1 | 	sub	fp, #12
0b9e8                 | '   
0b9e8                 | '   par=converttoint(t1)  : print par
0b9e8     00 12 06 F6 | 	mov	arg01, #0
0b9ec     C4 2A B1 FD | 	call	#__system___getiolock_0423
0b9f0     FD 12 02 F6 | 	mov	arg01, result1
0b9f4     B8 D1 B0 FD | 	call	#__system___lockmem
0b9f8     0C 4E 05 F1 | 	add	fp, #12
0b9fc     A7 14 02 FB | 	rdlong	arg02, fp
0ba00     0C 4E 85 F1 | 	sub	fp, #12
0ba04     00 12 06 F6 | 	mov	arg01, #0
0ba08     00 16 06 F6 | 	mov	arg03, #0
0ba0c     0A 18 06 F6 | 	mov	arg04, #10
0ba10     D4 DE B0 FD | 	call	#__system___basic_print_integer
0ba14     00 12 06 F6 | 	mov	arg01, #0
0ba18     0A 14 06 F6 | 	mov	arg02, #10
0ba1c     00 16 06 F6 | 	mov	arg03, #0
0ba20     28 DE B0 FD | 	call	#__system___basic_print_char
0ba24     00 12 06 F6 | 	mov	arg01, #0
0ba28     88 2A B1 FD | 	call	#__system___getiolock_0423
0ba2c     FD 00 68 FC | 	wrlong	#0, result1
0ba30     84 DD BF FD | 	call	#_pop
0ba34     FF 1E 02 F6 | 	mov	local01, result3
0ba38     28 4E 05 F1 | 	add	fp, #40
0ba3c     A7 FA 61 FC | 	wrlong	result1, fp
0ba40     04 4E 05 F1 | 	add	fp, #4
0ba44     A7 FC 61 FC | 	wrlong	result2, fp
0ba48     04 4E 05 F1 | 	add	fp, #4
0ba4c     A7 1E 62 FC | 	wrlong	local01, fp
0ba50     08 4E 85 F1 | 	sub	fp, #8
0ba54     A7 12 02 F6 | 	mov	arg01, fp
0ba58     28 4E 85 F1 | 	sub	fp, #40
0ba5c     3C 52 B0 FD | 	call	#_converttoint
0ba60     10 4E 05 F1 | 	add	fp, #16
0ba64     A7 FA 61 FC | 	wrlong	result1, fp
0ba68                 | '   t1=pop()
0ba68                 | '   channel=converttoint(t1)  
0ba68                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0ba68     04 4E 85 F1 | 	sub	fp, #4
0ba6c     A7 1E 0A FB | 	rdlong	local01, fp wz
0ba70     0C 4E 85 F1 | 	sub	fp, #12
0ba74     3C 06 90 5D |  if_ne	jmp	#LR__0924
0ba78     04 4E 05 F1 | 	add	fp, #4
0ba7c     A7 00 68 FC | 	wrlong	#0, fp
0ba80     04 4E 85 F1 | 	sub	fp, #4
0ba84                 | LR__0906
0ba84     10 4E 05 F1 | 	add	fp, #16
0ba88     A7 1E 02 FB | 	rdlong	local01, fp
0ba8c     0B 1E 66 F0 | 	shl	local01, #11
0ba90     0B 00 00 FF 
0ba94     CC E5 05 F1 | 	add	objptr, ##6092
0ba98     F2 1E 02 F1 | 	add	local01, objptr
0ba9c     0C 4E 85 F1 | 	sub	fp, #12
0baa0     A7 12 02 FB | 	rdlong	arg01, fp
0baa4     09 21 02 F6 | 	mov	local02, arg01
0baa8     01 20 66 F0 | 	shl	local02, #1
0baac     0F 21 02 F1 | 	add	local02, local01
0bab0     04 4E 85 F1 | 	sub	fp, #4
0bab4     0B 00 00 FF 
0bab8     CC E5 85 F1 | 	sub	objptr, ##6092
0babc     09 13 52 F6 | 	abs	arg01, arg01 wc
0bac0     1F 22 C6 C9 |  if_b	decod	local03, #31
0bac4     00 22 06 36 |  if_ae	mov	local03, #0
0bac8     CC F7 B0 FD | 	call	#__system___float_fromuns
0bacc     11 FB 61 F5 | 	xor	result1, local03
0bad0     FD 14 02 F6 | 	mov	arg02, result1
0bad4     87 E4 1D FF 
0bad8     DB 13 06 F6 | 	mov	arg01, ##1003032539
0badc     BC FB B0 FD | 	call	#__system___float_mul
0bae0     FD 12 02 F6 | 	mov	arg01, result1
0bae4     F0 04 B1 FD | 	call	#__system____builtin_sinf
0bae8     FD 14 02 F6 | 	mov	arg02, result1
0baec     58 7F 23 FF 
0baf0     00 12 06 F6 | 	mov	arg01, ##1191096320
0baf4     A4 FB B0 FD | 	call	#__system___float_mul
0baf8     FD 12 02 F6 | 	mov	arg01, result1
0bafc     01 14 06 F6 | 	mov	arg02, #1
0bb00     60 00 B1 FD | 	call	#__system___float_tointeger
0bb04     10 FB 51 FC | 	wrword	result1, local02
0bb08     04 4E 05 F1 | 	add	fp, #4
0bb0c     A7 20 02 FB | 	rdlong	local02, fp
0bb10     01 20 06 F1 | 	add	local02, #1
0bb14     A7 20 62 FC | 	wrlong	local02, fp
0bb18     04 4E 85 F1 | 	sub	fp, #4
0bb1c     02 00 00 FF 
0bb20     00 20 56 F2 | 	cmps	local02, ##1024 wc
0bb24     5C FF 9F CD |  if_b	jmp	#LR__0906
0bb28                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0bb28                 | '   return
0bb28     88 05 90 FD | 	jmp	#LR__0924
0bb2c                 | LR__0907
0bb2c                 | ' for i=0 to 15 : harm(i)=0: next i  
0bb2c     04 4E 05 F1 | 	add	fp, #4
0bb30     A7 00 68 FC | 	wrlong	#0, fp
0bb34     97 16 48 FB | 	callpa	#(@LR__0909-@LR__0908)>>2,fcache_load_ptr_
0bb38                 | LR__0908
0bb38     A7 1E 02 FB | 	rdlong	local01, fp
0bb3c     02 1E 66 F0 | 	shl	local01, #2
0bb40     34 4E 05 F1 | 	add	fp, #52
0bb44     A7 1E 02 F1 | 	add	local01, fp
0bb48     0F 01 68 FC | 	wrlong	#0, local01
0bb4c     34 4E 85 F1 | 	sub	fp, #52
0bb50     A7 1E 02 FB | 	rdlong	local01, fp
0bb54     01 1E 06 F1 | 	add	local01, #1
0bb58     A7 1E 62 FC | 	wrlong	local01, fp
0bb5c     10 1E 56 F2 | 	cmps	local01, #16 wc
0bb60     D4 FF 9F CD |  if_b	jmp	#LR__0908
0bb64                 | LR__0909
0bb64     04 4E 85 F1 | 	sub	fp, #4
0bb68                 | ' for i=numpar to 2 step -1 
0bb68     A7 1E 02 FB | 	rdlong	local01, fp
0bb6c     04 4E 05 F1 | 	add	fp, #4
0bb70     A7 1E 62 FC | 	wrlong	local01, fp
0bb74     04 4E 85 F1 | 	sub	fp, #4
0bb78                 | LR__0910
0bb78     3C DC BF FD | 	call	#_pop
0bb7c     28 4E 05 F1 | 	add	fp, #40
0bb80     A7 FA 61 FC | 	wrlong	result1, fp
0bb84     04 4E 05 F1 | 	add	fp, #4
0bb88     A7 FC 61 FC | 	wrlong	result2, fp
0bb8c     04 4E 05 F1 | 	add	fp, #4
0bb90     A7 FE 61 FC | 	wrlong	result3, fp
0bb94     2C 4E 85 F1 | 	sub	fp, #44
0bb98     A7 1E 02 FB | 	rdlong	local01, fp
0bb9c     02 1E 86 F1 | 	sub	local01, #2
0bba0     02 1E 66 F0 | 	shl	local01, #2
0bba4     34 4E 05 F1 | 	add	fp, #52
0bba8     A7 1E 02 F1 | 	add	local01, fp
0bbac     10 4E 85 F1 | 	sub	fp, #16
0bbb0     A7 12 02 F6 | 	mov	arg01, fp
0bbb4     28 4E 85 F1 | 	sub	fp, #40
0bbb8     8C 51 B0 FD | 	call	#_converttofloat
0bbbc     0F FB 61 FC | 	wrlong	result1, local01
0bbc0     04 4E 05 F1 | 	add	fp, #4
0bbc4     A7 1E 02 FB | 	rdlong	local01, fp
0bbc8     01 1E 86 F1 | 	sub	local01, #1
0bbcc     A7 1E 62 FC | 	wrlong	local01, fp
0bbd0     04 4E 85 F1 | 	sub	fp, #4
0bbd4     02 1E 56 F2 | 	cmps	local01, #2 wc
0bbd8     9C FF 9F 3D |  if_ae	jmp	#LR__0910
0bbdc     D8 DB BF FD | 	call	#_pop
0bbe0     FF 1E 02 F6 | 	mov	local01, result3
0bbe4     28 4E 05 F1 | 	add	fp, #40
0bbe8     A7 FA 61 FC | 	wrlong	result1, fp
0bbec     04 4E 05 F1 | 	add	fp, #4
0bbf0     A7 FC 61 FC | 	wrlong	result2, fp
0bbf4     04 4E 05 F1 | 	add	fp, #4
0bbf8     A7 1E 62 FC | 	wrlong	local01, fp
0bbfc     08 4E 85 F1 | 	sub	fp, #8
0bc00     A7 12 02 F6 | 	mov	arg01, fp
0bc04     28 4E 85 F1 | 	sub	fp, #40
0bc08     90 50 B0 FD | 	call	#_converttoint
0bc0c     FD 1E 02 F6 | 	mov	local01, result1
0bc10     10 4E 05 F1 | 	add	fp, #16
0bc14     A7 1E 62 FC | 	wrlong	local01, fp
0bc18     10 4E 85 F1 | 	sub	fp, #16
0bc1c                 | ' t1=pop()
0bc1c                 | ' channel=converttoint(t1) : print channel
0bc1c     00 12 06 F6 | 	mov	arg01, #0
0bc20     90 28 B1 FD | 	call	#__system___getiolock_0423
0bc24     FD 12 02 F6 | 	mov	arg01, result1
0bc28     84 CF B0 FD | 	call	#__system___lockmem
0bc2c     10 4E 05 F1 | 	add	fp, #16
0bc30     A7 14 02 FB | 	rdlong	arg02, fp
0bc34     10 4E 85 F1 | 	sub	fp, #16
0bc38     00 12 06 F6 | 	mov	arg01, #0
0bc3c     00 16 06 F6 | 	mov	arg03, #0
0bc40     0A 18 06 F6 | 	mov	arg04, #10
0bc44     A0 DC B0 FD | 	call	#__system___basic_print_integer
0bc48     00 12 06 F6 | 	mov	arg01, #0
0bc4c     0A 14 06 F6 | 	mov	arg02, #10
0bc50     00 16 06 F6 | 	mov	arg03, #0
0bc54     F4 DB B0 FD | 	call	#__system___basic_print_char
0bc58     00 12 06 F6 | 	mov	arg01, #0
0bc5c     54 28 B1 FD | 	call	#__system___getiolock_0423
0bc60     FD 00 68 FC | 	wrlong	#0, result1
0bc64                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0bc64     08 4E 05 F1 | 	add	fp, #8
0bc68     02 00 80 FF 
0bc6c     A7 00 68 FC | 	wrlong	##1024, fp
0bc70     08 4E 85 F1 | 	sub	fp, #8
0bc74     0B 00 00 FF 
0bc78     CC E5 05 F1 | 	add	objptr, ##6092
0bc7c     97 18 48 FB | 	callpa	#(@LR__0913-@LR__0911)>>2,fcache_load_ptr_
0bc80                 | LR__0911
0bc80     02 00 00 FF 
0bc84     00 14 DC FC | 	rep	@LR__0914, ##1024
0bc88                 | LR__0912
0bc88     10 4E 05 F1 | 	add	fp, #16
0bc8c     A7 20 02 FB | 	rdlong	local02, fp
0bc90     0B 20 66 F0 | 	shl	local02, #11
0bc94     F2 20 02 F1 | 	add	local02, objptr
0bc98     0C 4E 85 F1 | 	sub	fp, #12
0bc9c     A7 1E 02 FB | 	rdlong	local01, fp
0bca0     04 4E 85 F1 | 	sub	fp, #4
0bca4     01 1E 66 F0 | 	shl	local01, #1
0bca8     10 1F 02 F1 | 	add	local01, local02
0bcac     0F 01 58 FC | 	wrword	#0, local01
0bcb0                 | LR__0913
0bcb0                 | LR__0914
0bcb0     0B 00 00 FF 
0bcb4     CC E5 85 F1 | 	sub	objptr, ##6092
0bcb8     1C 4E 05 F1 | 	add	fp, #28
0bcbc     A7 00 68 FC | 	wrlong	#0, fp
0bcc0                 | ' max=0
0bcc0                 | ' if harm(0)<0 then
0bcc0     1C 4E 05 F1 | 	add	fp, #28
0bcc4     A7 12 02 FB | 	rdlong	arg01, fp
0bcc8     38 4E 85 F1 | 	sub	fp, #56
0bccc     00 14 06 F6 | 	mov	arg02, #0
0bcd0     01 16 06 F6 | 	mov	arg03, #1
0bcd4     F8 FD B0 FD | 	call	#__system___float_cmp
0bcd8     00 FA 55 F2 | 	cmps	result1, #0 wc
0bcdc     04 01 90 3D |  if_ae	jmp	#LR__0917
0bce0     38 4E 05 F1 | 	add	fp, #56
0bce4     A7 FA 01 FB | 	rdlong	result1, fp
0bce8     1F FA 05 F4 | 	bitl	result1, #31
0bcec     24 4E 85 F1 | 	sub	fp, #36
0bcf0     A7 FA 61 FC | 	wrlong	result1, fp
0bcf4     28 4E 05 F1 | 	add	fp, #40
0bcf8     A7 FA 01 FB | 	rdlong	result1, fp
0bcfc     1F FA 05 F4 | 	bitl	result1, #31
0bd00     24 4E 85 F1 | 	sub	fp, #36
0bd04     A7 FA 61 FC | 	wrlong	result1, fp
0bd08     20 4E 05 F1 | 	add	fp, #32
0bd0c     00 C0 9F FF 
0bd10     A7 00 68 FC | 	wrlong	##1065353216, fp
0bd14     24 4E 85 F1 | 	sub	fp, #36
0bd18     A7 1E 02 FB | 	rdlong	local01, fp
0bd1c     28 4E 05 F1 | 	add	fp, #40
0bd20     A7 1E 62 FC | 	wrlong	local01, fp
0bd24     24 4E 85 F1 | 	sub	fp, #36
0bd28     A7 1E 02 FB | 	rdlong	local01, fp
0bd2c     28 4E 05 F1 | 	add	fp, #40
0bd30     A7 1E 62 FC | 	wrlong	local01, fp
0bd34                 | '   harm(0)=1
0bd34                 | '   harm(1)=even
0bd34                 | '   harm(2)=odd
0bd34                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0bd34     3C 4E 85 F1 | 	sub	fp, #60
0bd38     A7 06 68 FC | 	wrlong	#3, fp
0bd3c                 | LR__0915
0bd3c     A7 1A 02 FB | 	rdlong	arg05, fp
0bd40     0D 25 02 F6 | 	mov	local04, arg05
0bd44     02 24 66 F0 | 	shl	local04, #2
0bd48     34 4E 05 F1 | 	add	fp, #52
0bd4c     A7 24 02 F1 | 	add	local04, fp
0bd50     02 1A 86 F1 | 	sub	arg05, #2
0bd54     02 1A 66 F0 | 	shl	arg05, #2
0bd58     A7 1A 02 F1 | 	add	arg05, fp
0bd5c     0D 13 02 FB | 	rdlong	arg01, arg05
0bd60     24 4E 85 F1 | 	sub	fp, #36
0bd64     A7 14 02 FB | 	rdlong	arg02, fp
0bd68     14 4E 85 F1 | 	sub	fp, #20
0bd6c     2C F9 B0 FD | 	call	#__system___float_mul
0bd70     12 FB 61 FC | 	wrlong	result1, local04
0bd74     04 4E 05 F1 | 	add	fp, #4
0bd78     A7 26 02 FB | 	rdlong	local05, fp
0bd7c     02 26 06 F1 | 	add	local05, #2
0bd80     A7 26 62 FC | 	wrlong	local05, fp
0bd84     10 26 56 F2 | 	cmps	local05, #16 wc
0bd88     B0 FF 9F CD |  if_b	jmp	#LR__0915
0bd8c                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0bd8c     A7 08 68 FC | 	wrlong	#4, fp
0bd90                 | LR__0916
0bd90     A7 26 02 FB | 	rdlong	local05, fp
0bd94     13 25 02 F6 | 	mov	local04, local05
0bd98     02 24 66 F0 | 	shl	local04, #2
0bd9c     34 4E 05 F1 | 	add	fp, #52
0bda0     A7 24 02 F1 | 	add	local04, fp
0bda4     02 26 86 F1 | 	sub	local05, #2
0bda8     02 26 66 F0 | 	shl	local05, #2
0bdac     A7 26 02 F1 | 	add	local05, fp
0bdb0     13 13 02 FB | 	rdlong	arg01, local05
0bdb4     20 4E 85 F1 | 	sub	fp, #32
0bdb8     A7 14 02 FB | 	rdlong	arg02, fp
0bdbc     18 4E 85 F1 | 	sub	fp, #24
0bdc0     D8 F8 B0 FD | 	call	#__system___float_mul
0bdc4     12 FB 61 FC | 	wrlong	result1, local04
0bdc8     04 4E 05 F1 | 	add	fp, #4
0bdcc     A7 26 02 FB | 	rdlong	local05, fp
0bdd0     02 26 06 F1 | 	add	local05, #2
0bdd4     A7 26 62 FC | 	wrlong	local05, fp
0bdd8     0F 26 56 F2 | 	cmps	local05, #15 wc
0bddc     B0 FF 9F CD |  if_b	jmp	#LR__0916
0bde0     04 4E 85 F1 | 	sub	fp, #4
0bde4                 | LR__0917
0bde4                 | ' if harm(0)>=0 then ' synthesize with harmonics
0bde4     38 4E 05 F1 | 	add	fp, #56
0bde8     A7 12 02 FB | 	rdlong	arg01, fp
0bdec     38 4E 85 F1 | 	sub	fp, #56
0bdf0     00 14 06 F6 | 	mov	arg02, #0
0bdf4     01 16 66 F6 | 	neg	arg03, #1
0bdf8     D4 FC B0 FD | 	call	#__system___float_cmp
0bdfc     00 FA 55 F2 | 	cmps	result1, #0 wc
0be00     B0 02 90 CD |  if_b	jmp	#LR__0923
0be04                 | '   for i=0 to 1023
0be04     04 4E 05 F1 | 	add	fp, #4
0be08     A7 00 68 FC | 	wrlong	#0, fp
0be0c     04 4E 85 F1 | 	sub	fp, #4
0be10                 | LR__0918
0be10     20 4E 05 F1 | 	add	fp, #32
0be14     A7 00 68 FC | 	wrlong	#0, fp
0be18                 | '     spl=0
0be18                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0be18     18 4E 85 F1 | 	sub	fp, #24
0be1c     A7 00 68 FC | 	wrlong	#0, fp
0be20                 | LR__0919
0be20     A7 24 02 FB | 	rdlong	local04, fp
0be24     02 24 66 F0 | 	shl	local04, #2
0be28     30 4E 05 F1 | 	add	fp, #48
0be2c     A7 24 02 F1 | 	add	local04, fp
0be30     12 27 02 FB | 	rdlong	local05, local04
0be34     87 E4 1D FF 
0be38     DB 25 06 F6 | 	mov	local04, ##1003032539
0be3c     34 4E 85 F1 | 	sub	fp, #52
0be40     A7 12 02 FB | 	rdlong	arg01, fp
0be44     04 4E 85 F1 | 	sub	fp, #4
0be48     09 13 52 F6 | 	abs	arg01, arg01 wc
0be4c     1F 22 C6 C9 |  if_b	decod	local03, #31
0be50     00 22 06 36 |  if_ae	mov	local03, #0
0be54     40 F4 B0 FD | 	call	#__system___float_fromuns
0be58     11 FB 61 F5 | 	xor	result1, local03
0be5c     FD 14 02 F6 | 	mov	arg02, result1
0be60     12 13 02 F6 | 	mov	arg01, local04
0be64     34 F8 B0 FD | 	call	#__system___float_mul
0be68     FD 24 02 F6 | 	mov	local04, result1
0be6c     08 4E 05 F1 | 	add	fp, #8
0be70     A7 12 02 FB | 	rdlong	arg01, fp
0be74     08 4E 85 F1 | 	sub	fp, #8
0be78     01 12 06 F1 | 	add	arg01, #1
0be7c     09 13 52 F6 | 	abs	arg01, arg01 wc
0be80     1F 22 C6 C9 |  if_b	decod	local03, #31
0be84     00 22 06 36 |  if_ae	mov	local03, #0
0be88     0C F4 B0 FD | 	call	#__system___float_fromuns
0be8c     11 FB 61 F5 | 	xor	result1, local03
0be90     FD 14 02 F6 | 	mov	arg02, result1
0be94     12 13 02 F6 | 	mov	arg01, local04
0be98     00 F8 B0 FD | 	call	#__system___float_mul
0be9c     FD 12 02 F6 | 	mov	arg01, result1
0bea0     34 01 B1 FD | 	call	#__system____builtin_sinf
0bea4     FD 14 02 F6 | 	mov	arg02, result1
0bea8     13 13 02 F6 | 	mov	arg01, local05
0beac     EC F7 B0 FD | 	call	#__system___float_mul
0beb0     FD 14 02 F6 | 	mov	arg02, result1
0beb4     20 4E 05 F1 | 	add	fp, #32
0beb8     A7 12 02 FB | 	rdlong	arg01, fp
0bebc     20 4E 85 F1 | 	sub	fp, #32
0bec0     08 F4 B0 FD | 	call	#__system___float_add
0bec4     20 4E 05 F1 | 	add	fp, #32
0bec8     A7 FA 61 FC | 	wrlong	result1, fp
0becc     18 4E 85 F1 | 	sub	fp, #24
0bed0     A7 16 02 FB | 	rdlong	arg03, fp
0bed4     01 16 06 F1 | 	add	arg03, #1
0bed8     A7 16 62 FC | 	wrlong	arg03, fp
0bedc     10 16 56 F2 | 	cmps	arg03, #16 wc
0bee0     3C FF 9F CD |  if_b	jmp	#LR__0919
0bee4                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0bee4     18 4E 05 F1 | 	add	fp, #24
0bee8     A7 12 02 FB | 	rdlong	arg01, fp
0beec     1F 12 06 F4 | 	bitl	arg01, #31
0bef0     04 4E 85 F1 | 	sub	fp, #4
0bef4     A7 14 02 FB | 	rdlong	arg02, fp
0bef8     1C 4E 85 F1 | 	sub	fp, #28
0befc     01 16 66 F6 | 	neg	arg03, #1
0bf00     CC FB B0 FD | 	call	#__system___float_cmp
0bf04     01 FA 55 F2 | 	cmps	result1, #1 wc
0bf08     18 00 90 CD |  if_b	jmp	#LR__0920
0bf0c     20 4E 05 F1 | 	add	fp, #32
0bf10     A7 FA 01 FB | 	rdlong	result1, fp
0bf14     1F FA 05 F4 | 	bitl	result1, #31
0bf18     04 4E 85 F1 | 	sub	fp, #4
0bf1c     A7 FA 61 FC | 	wrlong	result1, fp
0bf20     1C 4E 85 F1 | 	sub	fp, #28
0bf24                 | LR__0920
0bf24     04 4E 05 F1 | 	add	fp, #4
0bf28     A7 26 02 FB | 	rdlong	local05, fp
0bf2c     01 26 06 F1 | 	add	local05, #1
0bf30     A7 26 62 FC | 	wrlong	local05, fp
0bf34     04 4E 85 F1 | 	sub	fp, #4
0bf38     02 00 00 FF 
0bf3c     00 26 56 F2 | 	cmps	local05, ##1024 wc
0bf40     CC FE 9F CD |  if_b	jmp	#LR__0918
0bf44                 | '   for i=0 to 1023
0bf44     04 4E 05 F1 | 	add	fp, #4
0bf48     A7 00 68 FC | 	wrlong	#0, fp
0bf4c     04 4E 85 F1 | 	sub	fp, #4
0bf50                 | LR__0921
0bf50     20 4E 05 F1 | 	add	fp, #32
0bf54     A7 00 68 FC | 	wrlong	#0, fp
0bf58                 | '     spl=0
0bf58                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0bf58     18 4E 85 F1 | 	sub	fp, #24
0bf5c     A7 00 68 FC | 	wrlong	#0, fp
0bf60                 | LR__0922
0bf60     A7 26 02 FB | 	rdlong	local05, fp
0bf64     02 26 66 F0 | 	shl	local05, #2
0bf68     30 4E 05 F1 | 	add	fp, #48
0bf6c     A7 26 02 F1 | 	add	local05, fp
0bf70     13 27 02 FB | 	rdlong	local05, local05
0bf74     1C 4E 85 F1 | 	sub	fp, #28
0bf78     A7 14 02 FB | 	rdlong	arg02, fp
0bf7c     1C 4E 85 F1 | 	sub	fp, #28
0bf80     58 7F 23 FF 
0bf84     00 12 06 F6 | 	mov	arg01, ##1191096320
0bf88     14 F9 B0 FD | 	call	#__system___float_div
0bf8c     FD 14 02 F6 | 	mov	arg02, result1
0bf90     13 13 02 F6 | 	mov	arg01, local05
0bf94     04 F7 B0 FD | 	call	#__system___float_mul
0bf98     FD 26 02 F6 | 	mov	local05, result1
0bf9c     87 E4 1D FF 
0bfa0     DB 25 06 F6 | 	mov	local04, ##1003032539
0bfa4     04 4E 05 F1 | 	add	fp, #4
0bfa8     A7 12 02 FB | 	rdlong	arg01, fp
0bfac     04 4E 85 F1 | 	sub	fp, #4
0bfb0     09 13 52 F6 | 	abs	arg01, arg01 wc
0bfb4     1F 22 C6 C9 |  if_b	decod	local03, #31
0bfb8     00 22 06 36 |  if_ae	mov	local03, #0
0bfbc     D8 F2 B0 FD | 	call	#__system___float_fromuns
0bfc0     11 FB 61 F5 | 	xor	result1, local03
0bfc4     FD 14 02 F6 | 	mov	arg02, result1
0bfc8     12 13 02 F6 | 	mov	arg01, local04
0bfcc     CC F6 B0 FD | 	call	#__system___float_mul
0bfd0     FD 24 02 F6 | 	mov	local04, result1
0bfd4     08 4E 05 F1 | 	add	fp, #8
0bfd8     A7 12 02 FB | 	rdlong	arg01, fp
0bfdc     08 4E 85 F1 | 	sub	fp, #8
0bfe0     01 12 06 F1 | 	add	arg01, #1
0bfe4     09 13 52 F6 | 	abs	arg01, arg01 wc
0bfe8     1F 22 C6 C9 |  if_b	decod	local03, #31
0bfec     00 22 06 36 |  if_ae	mov	local03, #0
0bff0     A4 F2 B0 FD | 	call	#__system___float_fromuns
0bff4     11 FB 61 F5 | 	xor	result1, local03
0bff8     FD 14 02 F6 | 	mov	arg02, result1
0bffc     12 13 02 F6 | 	mov	arg01, local04
0c000     98 F6 B0 FD | 	call	#__system___float_mul
0c004     FD 12 02 F6 | 	mov	arg01, result1
0c008     CC FF B0 FD | 	call	#__system____builtin_sinf
0c00c     FD 14 02 F6 | 	mov	arg02, result1
0c010     13 13 02 F6 | 	mov	arg01, local05
0c014     84 F6 B0 FD | 	call	#__system___float_mul
0c018     FD 14 02 F6 | 	mov	arg02, result1
0c01c     20 4E 05 F1 | 	add	fp, #32
0c020     A7 12 02 FB | 	rdlong	arg01, fp
0c024     20 4E 85 F1 | 	sub	fp, #32
0c028     A0 F2 B0 FD | 	call	#__system___float_add
0c02c     20 4E 05 F1 | 	add	fp, #32
0c030     A7 FA 61 FC | 	wrlong	result1, fp
0c034     18 4E 85 F1 | 	sub	fp, #24
0c038     A7 26 02 FB | 	rdlong	local05, fp
0c03c     01 26 06 F1 | 	add	local05, #1
0c040     A7 26 62 FC | 	wrlong	local05, fp
0c044     10 26 56 F2 | 	cmps	local05, #16 wc
0c048     14 FF 9F CD |  if_b	jmp	#LR__0922
0c04c     08 4E 05 F1 | 	add	fp, #8
0c050     A7 26 02 FB | 	rdlong	local05, fp
0c054     0B 26 66 F0 | 	shl	local05, #11
0c058     0B 00 00 FF 
0c05c     CC E5 05 F1 | 	add	objptr, ##6092
0c060     F2 26 02 F1 | 	add	local05, objptr
0c064     0C 4E 85 F1 | 	sub	fp, #12
0c068     A7 20 02 FB | 	rdlong	local02, fp
0c06c     01 20 66 F0 | 	shl	local02, #1
0c070     13 21 02 F1 | 	add	local02, local05
0c074     1C 4E 05 F1 | 	add	fp, #28
0c078     A7 12 02 FB | 	rdlong	arg01, fp
0c07c     20 4E 85 F1 | 	sub	fp, #32
0c080     0B 00 00 FF 
0c084     CC E5 85 F1 | 	sub	objptr, ##6092
0c088     01 14 06 F6 | 	mov	arg02, #1
0c08c     D4 FA B0 FD | 	call	#__system___float_tointeger
0c090     10 FB 51 FC | 	wrword	result1, local02
0c094     04 4E 05 F1 | 	add	fp, #4
0c098     A7 26 02 FB | 	rdlong	local05, fp
0c09c     01 26 06 F1 | 	add	local05, #1
0c0a0     A7 26 62 FC | 	wrlong	local05, fp
0c0a4     04 4E 85 F1 | 	sub	fp, #4
0c0a8     02 00 00 FF 
0c0ac     00 26 56 F2 | 	cmps	local05, ##1024 wc
0c0b0     9C FE 9F CD |  if_b	jmp	#LR__0921
0c0b4                 | LR__0923
0c0b4                 | LR__0924
0c0b4     A7 F0 03 F6 | 	mov	ptra, fp
0c0b8     B2 00 A0 FD | 	call	#popregs_
0c0bc                 | _do_defsnd_ret
0c0bc     2D 00 64 FD | 	ret
0c0c0                 | 
0c0c0                 | ' 
0c0c0                 | ' ' ---------------  List the program. 
0c0c0                 | ' 
0c0c0                 | ' sub do_list
0c0c0                 | _do_list
0c0c0     02 4A 05 F6 | 	mov	COUNT_, #2
0c0c4     A8 00 A0 FD | 	call	#pushregs_
0c0c8     B8 F0 07 F1 | 	add	ptra, #184
0c0cc     04 4E 05 F1 | 	add	fp, #4
0c0d0     A7 00 68 FC | 	wrlong	#0, fp
0c0d4     04 4E 05 F1 | 	add	fp, #4
0c0d8     FF FF BF FF 
0c0dc     A7 FE 6B FC | 	wrlong	##2147483647, fp
0c0e0     08 4E 85 F1 | 	sub	fp, #8
0c0e4     69 00 00 FF 
0c0e8     54 E4 05 F1 | 	add	objptr, ##53844
0c0ec     F2 1E 02 FB | 	rdlong	local01, objptr
0c0f0     0F 17 02 F6 | 	mov	arg03, local01
0c0f4     01 16 66 F0 | 	shl	arg03, #1
0c0f8     0F 17 02 F1 | 	add	arg03, local01
0c0fc     02 16 66 F0 | 	shl	arg03, #2
0c100     03 00 00 FF 
0c104     04 E4 85 F1 | 	sub	objptr, ##1540
0c108     F2 16 02 F1 | 	add	arg03, objptr
0c10c     0B 17 02 FB | 	rdlong	arg03, arg03
0c110     A7 16 62 FC | 	wrlong	arg03, fp
0c114                 | ' 
0c114                 | ' startline=0 : endline=$7FFFFFFF
0c114                 | ' numpar=compiledline(lineptr_e).result.uresult
0c114                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0c114     01 16 0E F2 | 	cmp	arg03, #1 wz
0c118     66 00 00 FF 
0c11c     50 E4 85 F1 | 	sub	objptr, ##52304
0c120     3C 00 90 5D |  if_ne	jmp	#LR__0930
0c124     90 D6 BF FD | 	call	#_pop
0c128     FF 1E 02 F6 | 	mov	local01, result3
0c12c     0C 4E 05 F1 | 	add	fp, #12
0c130     A7 FA 61 FC | 	wrlong	result1, fp
0c134     04 4E 05 F1 | 	add	fp, #4
0c138     A7 FC 61 FC | 	wrlong	result2, fp
0c13c     04 4E 05 F1 | 	add	fp, #4
0c140     A7 1E 62 FC | 	wrlong	local01, fp
0c144     08 4E 85 F1 | 	sub	fp, #8
0c148     A7 12 02 F6 | 	mov	arg01, fp
0c14c     0C 4E 85 F1 | 	sub	fp, #12
0c150     48 4B B0 FD | 	call	#_converttoint
0c154     04 4E 05 F1 | 	add	fp, #4
0c158     A7 FA 61 FC | 	wrlong	result1, fp
0c15c     04 4E 85 F1 | 	sub	fp, #4
0c160                 | LR__0930
0c160                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0c160     A7 16 02 FB | 	rdlong	arg03, fp
0c164     02 16 0E F2 | 	cmp	arg03, #2 wz
0c168     7C 00 90 5D |  if_ne	jmp	#LR__0931
0c16c     48 D6 BF FD | 	call	#_pop
0c170     FF 1E 02 F6 | 	mov	local01, result3
0c174     0C 4E 05 F1 | 	add	fp, #12
0c178     A7 FA 61 FC | 	wrlong	result1, fp
0c17c     04 4E 05 F1 | 	add	fp, #4
0c180     A7 FC 61 FC | 	wrlong	result2, fp
0c184     04 4E 05 F1 | 	add	fp, #4
0c188     A7 1E 62 FC | 	wrlong	local01, fp
0c18c     08 4E 85 F1 | 	sub	fp, #8
0c190     A7 12 02 F6 | 	mov	arg01, fp
0c194     0C 4E 85 F1 | 	sub	fp, #12
0c198     00 4B B0 FD | 	call	#_converttoint
0c19c     FD 1E 02 F6 | 	mov	local01, result1
0c1a0     08 4E 05 F1 | 	add	fp, #8
0c1a4     A7 1E 62 FC | 	wrlong	local01, fp
0c1a8     08 4E 85 F1 | 	sub	fp, #8
0c1ac     08 D6 BF FD | 	call	#_pop
0c1b0     FF 1E 02 F6 | 	mov	local01, result3
0c1b4     0C 4E 05 F1 | 	add	fp, #12
0c1b8     A7 FA 61 FC | 	wrlong	result1, fp
0c1bc     04 4E 05 F1 | 	add	fp, #4
0c1c0     A7 FC 61 FC | 	wrlong	result2, fp
0c1c4     04 4E 05 F1 | 	add	fp, #4
0c1c8     A7 1E 62 FC | 	wrlong	local01, fp
0c1cc     08 4E 85 F1 | 	sub	fp, #8
0c1d0     A7 12 02 F6 | 	mov	arg01, fp
0c1d4     0C 4E 85 F1 | 	sub	fp, #12
0c1d8     C0 4A B0 FD | 	call	#_converttoint
0c1dc     04 4E 05 F1 | 	add	fp, #4
0c1e0     A7 FA 61 FC | 	wrlong	result1, fp
0c1e4     04 4E 85 F1 | 	sub	fp, #4
0c1e8                 | LR__0931
0c1e8                 | ' 
0c1e8                 | ' 
0c1e8                 | ' print
0c1e8     00 12 06 F6 | 	mov	arg01, #0
0c1ec     C4 22 B1 FD | 	call	#__system___getiolock_0423
0c1f0     FD 12 02 F6 | 	mov	arg01, result1
0c1f4     B8 C9 B0 FD | 	call	#__system___lockmem
0c1f8     00 12 06 F6 | 	mov	arg01, #0
0c1fc     0A 14 06 F6 | 	mov	arg02, #10
0c200     00 16 06 F6 | 	mov	arg03, #0
0c204     44 D6 B0 FD | 	call	#__system___basic_print_char
0c208     00 12 06 F6 | 	mov	arg01, #0
0c20c     A4 22 B1 FD | 	call	#__system___getiolock_0423
0c210     FD 00 68 FC | 	wrlong	#0, result1
0c214     69 00 00 FF 
0c218     58 E4 05 F1 | 	add	objptr, ##53848
0c21c     F2 20 02 FB | 	rdlong	local02, objptr
0c220     11 00 00 FF 
0c224     70 E4 05 F1 | 	add	objptr, ##8816
0c228     F2 20 62 FC | 	wrlong	local02, objptr
0c22c     7A 00 00 FF 
0c230     C8 E4 85 F1 | 	sub	objptr, ##62664
0c234                 | ' do 
0c234                 | LR__0932
0c234     20 4E 05 F1 | 	add	fp, #32
0c238     A7 12 02 F6 | 	mov	arg01, fp
0c23c     20 4E 85 F1 | 	sub	fp, #32
0c240     7A 00 00 FF 
0c244     C8 E4 05 F1 | 	add	objptr, ##62664
0c248     F2 14 02 FB | 	rdlong	arg02, objptr
0c24c     18 16 06 F6 | 	mov	arg03, #24
0c250     6F 00 00 FF 
0c254     08 E4 85 F1 | 	sub	objptr, ##56840
0c258     64 BE B0 FD | 	call	#_psram_spin2_read1
0c25c     0B 00 00 FF 
0c260     C0 E4 85 F1 | 	sub	objptr, ##5824
0c264                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
0c264                 | '   if header(0)<> $FFFFFFFF then
0c264     20 4E 05 F1 | 	add	fp, #32
0c268     A7 20 02 FB | 	rdlong	local02, fp
0c26c     20 4E 85 F1 | 	sub	fp, #32
0c270     FF FF 7F FF 
0c274     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0c278     A8 00 90 AD |  if_e	jmp	#LR__0934
0c27c     38 4E 05 F1 | 	add	fp, #56
0c280     3F 16 06 F6 | 	mov	arg03, #63
0c284     28 16 62 FD | 	setq	arg03
0c288     A7 00 68 FC | 	wrlong	#0, fp
0c28c     A7 12 02 F6 | 	mov	arg01, fp
0c290     10 4E 85 F1 | 	sub	fp, #16
0c294     A7 14 02 FB | 	rdlong	arg02, fp
0c298     04 4E 05 F1 | 	add	fp, #4
0c29c     A7 16 02 FB | 	rdlong	arg03, fp
0c2a0     2C 4E 85 F1 | 	sub	fp, #44
0c2a4     0B 00 00 FF 
0c2a8     C0 E4 05 F1 | 	add	objptr, ##5824
0c2ac     10 BE B0 FD | 	call	#_psram_spin2_read1
0c2b0     0B 00 00 FF 
0c2b4     C0 E4 85 F1 | 	sub	objptr, ##5824
0c2b8                 | '     longfill(linebuf,0,64)
0c2b8                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0c2b8                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0c2b8     20 4E 05 F1 | 	add	fp, #32
0c2bc     A7 20 02 FB | 	rdlong	local02, fp
0c2c0     1C 4E 85 F1 | 	sub	fp, #28
0c2c4     A7 1E 02 FB | 	rdlong	local01, fp
0c2c8     04 4E 85 F1 | 	sub	fp, #4
0c2cc     0F 21 52 F2 | 	cmps	local02, local01 wc
0c2d0     30 00 90 CD |  if_b	jmp	#LR__0933
0c2d4     20 4E 05 F1 | 	add	fp, #32
0c2d8     A7 20 02 FB | 	rdlong	local02, fp
0c2dc     18 4E 85 F1 | 	sub	fp, #24
0c2e0     A7 16 02 FB | 	rdlong	arg03, fp
0c2e4     08 4E 85 F1 | 	sub	fp, #8
0c2e8     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0c2ec     14 00 90 1D |  if_a	jmp	#LR__0933
0c2f0     38 4E 05 F1 | 	add	fp, #56
0c2f4     A7 12 02 F6 | 	mov	arg01, fp
0c2f8     38 4E 85 F1 | 	sub	fp, #56
0c2fc                 | ' 
0c2fc                 | ' write(text)
0c2fc     88 B8 B0 FD | 	call	#_hg010b_spin2_write
0c300                 | ' crlf
0c300     E4 B9 B0 FD | 	call	#_hg010b_spin2_crlf
0c304                 | LR__0933
0c304     34 4E 05 F1 | 	add	fp, #52
0c308     A7 20 02 FB | 	rdlong	local02, fp
0c30c     34 4E 85 F1 | 	sub	fp, #52
0c310     7A 00 00 FF 
0c314     C8 E4 05 F1 | 	add	objptr, ##62664
0c318     F2 20 62 FC | 	wrlong	local02, objptr
0c31c     7A 00 00 FF 
0c320     C8 E4 85 F1 | 	sub	objptr, ##62664
0c324                 | LR__0934
0c324     34 4E 05 F1 | 	add	fp, #52
0c328     A7 20 02 FB | 	rdlong	local02, fp
0c32c     34 4E 85 F1 | 	sub	fp, #52
0c330     FF FF 3F FF 
0c334     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0c338     20 4E 05 51 |  if_ne	add	fp, #32
0c33c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c340     20 4E 85 51 |  if_ne	sub	fp, #32
0c344     FF FF 7F 5F 
0c348     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0c34c     E4 FE 9F 5D |  if_ne	jmp	#LR__0932
0c350     A7 F0 03 F6 | 	mov	ptra, fp
0c354     B2 00 A0 FD | 	call	#popregs_
0c358                 | _do_list_ret
0c358     2D 00 64 FD | 	ret
0c35c                 | 
0c35c                 | ' 
0c35c                 | ' '---------------- Clear the program
0c35c                 | ' 
0c35c                 | ' sub do_new
0c35c                 | _do_new
0c35c     03 4A 05 F6 | 	mov	COUNT_, #3
0c360     A8 00 A0 FD | 	call	#pushregs_
0c364     00 12 06 F6 | 	mov	arg01, #0
0c368     01 14 66 F6 | 	neg	arg02, #1
0c36c     01 16 06 F6 | 	mov	arg03, #1
0c370     00 18 06 F6 | 	mov	arg04, #0
0c374     0B 00 00 FF 
0c378     C0 E4 05 F1 | 	add	objptr, ##5824
0c37c                 | '     return fill(addr, pattern, count, listPtr, 4)
0c37c     04 1A 06 F6 | 	mov	arg05, #4
0c380     74 BE B0 FD | 	call	#_psram_spin2_fill
0c384     48 00 00 FF 
0c388     1C E5 05 F1 | 	add	objptr, ##37148
0c38c     F2 00 68 FC | 	wrlong	#0, objptr
0c390     15 00 00 FF 
0c394     7C E4 05 F1 | 	add	objptr, ##10876
0c398     F2 00 68 FC | 	wrlong	#0, objptr
0c39c     0F 00 00 FF 
0c3a0     2C E5 05 F1 | 	add	objptr, ##7980
0c3a4     F2 00 68 FC | 	wrlong	#0, objptr
0c3a8     04 E4 05 F1 | 	add	objptr, #4
0c3ac     F2 00 68 FC | 	wrlong	#0, objptr
0c3b0     16 00 00 FF 
0c3b4     5C E5 85 F1 | 	sub	objptr, ##11612
0c3b8     F2 00 68 FC | 	wrlong	#0, objptr
0c3bc     07 00 00 FF 
0c3c0     24 E4 05 F1 | 	add	objptr, ##3620
0c3c4     F2 00 68 FC | 	wrlong	#0, objptr
0c3c8     07 00 00 FF 
0c3cc     20 E4 85 F1 | 	sub	objptr, ##3616
0c3d0     F2 00 68 FC | 	wrlong	#0, objptr
0c3d4     0F 00 00 FF 
0c3d8     34 E4 05 F1 | 	add	objptr, ##7732
0c3dc     F2 00 68 FC | 	wrlong	#0, objptr
0c3e0     08 00 00 FF 
0c3e4     08 E4 85 F1 | 	sub	objptr, ##4104
0c3e8     F2 00 68 FC | 	wrlong	#0, objptr
0c3ec     04 E4 05 F1 | 	add	objptr, #4
0c3f0     FF FF FF FF 
0c3f4     F2 FE 6B FC | 	wrlong	##-1, objptr
0c3f8     0F 00 00 FF 
0c3fc     4C E5 05 F1 | 	add	objptr, ##8012
0c400     F2 00 68 FC | 	wrlong	#0, objptr
0c404                 | ' 
0c404                 | ' pslpoke(0,$FFFFFFFF)
0c404                 | ' varnum=0
0c404                 | ' programstart=0 :runptr=0 : runptr2=0
0c404                 | ' stackpointer=0
0c404                 | ' lineptr=0 
0c404                 | ' programptr=0 : stringptr=0
0c404                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0c404                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0c404     00 1E 06 F6 | 	mov	local01, #0
0c408     07 00 00 FF 
0c40c     40 E5 85 F1 | 	sub	objptr, ##3904
0c410     97 16 48 FB | 	callpa	#(@LR__0941-@LR__0940)>>2,fcache_load_ptr_
0c414                 | LR__0940
0c414     0F 21 02 F6 | 	mov	local02, local01
0c418     02 20 66 F0 | 	shl	local02, #2
0c41c     0F 21 02 F1 | 	add	local02, local01
0c420     02 20 66 F0 | 	shl	local02, #2
0c424     F2 20 02 F1 | 	add	local02, objptr
0c428     08 20 06 F1 | 	add	local02, #8
0c42c     FF FF FF FF 
0c430     10 FF 6B FC | 	wrlong	##-1, local02
0c434     01 1E 06 F1 | 	add	local01, #1
0c438     81 1E 56 F2 | 	cmps	local01, #129 wc
0c43c     D4 FF 9F CD |  if_b	jmp	#LR__0940
0c440                 | LR__0941
0c440     71 00 00 FF 
0c444     6C E4 85 F1 | 	sub	objptr, ##57964
0c448                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0c448     00 1E 06 F6 | 	mov	local01, #0
0c44c                 | LR__0942
0c44c     0F 21 02 F6 | 	mov	local02, local01
0c450     02 20 66 F0 | 	shl	local02, #2
0c454     7A 00 00 FF 
0c458     08 E4 05 F1 | 	add	objptr, ##62472
0c45c     F2 20 02 F1 | 	add	local02, objptr
0c460     10 21 0A FB | 	rdlong	local02, local02 wz
0c464     7A 00 00 FF 
0c468     08 E4 85 F1 | 	sub	objptr, ##62472
0c46c     34 00 90 AD |  if_e	jmp	#LR__0943
0c470     0F 13 02 F6 | 	mov	arg01, local01
0c474     00 14 06 F6 | 	mov	arg02, #0
0c478     00 16 06 F6 | 	mov	arg03, #0
0c47c     94 A7 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c480     0F 21 02 F6 | 	mov	local02, local01
0c484     02 20 66 F0 | 	shl	local02, #2
0c488     7A 00 00 FF 
0c48c     08 E4 05 F1 | 	add	objptr, ##62472
0c490     F2 20 02 F1 | 	add	local02, objptr
0c494     10 13 02 FB | 	rdlong	arg01, local02
0c498     7A 00 00 FF 
0c49c     08 E4 85 F1 | 	sub	objptr, ##62472
0c4a0     00 06 B1 FD | 	call	#__system___gc_free
0c4a4                 | LR__0943
0c4a4     7A 00 00 FF 
0c4a8     5C E4 05 F1 | 	add	objptr, ##62556
0c4ac     00 C0 9F FF 
0c4b0     F2 00 68 FC | 	wrlong	##1065353216, objptr
0c4b4     04 E4 05 F1 | 	add	objptr, #4
0c4b8     00 C0 9F FF 
0c4bc     F2 00 68 FC | 	wrlong	##1065353216, objptr
0c4c0     7A 00 00 FF 
0c4c4     60 E4 85 F1 | 	sub	objptr, ##62560
0c4c8     F2 22 02 FB | 	rdlong	local03, objptr
0c4cc     7A 00 00 FF 
0c4d0     4C E4 05 F1 | 	add	objptr, ##62540
0c4d4     F2 22 62 FC | 	wrlong	local03, objptr
0c4d8     7A 00 00 FF 
0c4dc     4C E4 85 F1 | 	sub	objptr, ##62540
0c4e0     11 12 06 F6 | 	mov	arg01, #17
0c4e4     08 14 06 F6 | 	mov	arg02, #8
0c4e8     10 16 06 F6 | 	mov	arg03, #16
0c4ec     24 A7 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c4f0     10 12 06 F6 | 	mov	arg01, #16
0c4f4     20 14 06 F6 | 	mov	arg02, #32
0c4f8     20 16 06 F6 | 	mov	arg03, #32
0c4fc     14 A7 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c500     01 1E 06 F1 | 	add	local01, #1
0c504     10 1E 56 F2 | 	cmps	local01, #16 wc
0c508     40 FF 9F CD |  if_b	jmp	#LR__0942
0c50c     A7 F0 03 F6 | 	mov	ptra, fp
0c510     B2 00 A0 FD | 	call	#popregs_
0c514                 | _do_new_ret
0c514     2D 00 64 FD | 	ret
0c518                 | 
0c518                 | ' 
0c518                 | ' '----------------------- goto
0c518                 | ' sub do_fast_goto
0c518                 | _do_fast_goto
0c518     02 4A 05 F6 | 	mov	COUNT_, #2
0c51c     A8 00 A0 FD | 	call	#pushregs_
0c520                 | _do_fast_goto_enter
0c520     69 00 00 FF 
0c524     54 E4 05 F1 | 	add	objptr, ##53844
0c528     F2 12 02 FB | 	rdlong	arg01, objptr
0c52c     09 1F 02 F6 | 	mov	local01, arg01
0c530     01 1E 66 F0 | 	shl	local01, #1
0c534     09 1F 02 F1 | 	add	local01, arg01
0c538     02 1E 66 F0 | 	shl	local01, #2
0c53c     03 00 00 FF 
0c540     04 E4 85 F1 | 	sub	objptr, ##1540
0c544     F2 1E 02 F1 | 	add	local01, objptr
0c548     0F 21 02 FB | 	rdlong	local02, local01
0c54c     10 13 02 F6 | 	mov	arg01, local02
0c550     66 00 00 FF 
0c554     50 E4 85 F1 | 	sub	objptr, ##52304
0c558     EC 92 B0 FD | 	call	#_pslpeek
0c55c     FD 12 02 F6 | 	mov	arg01, result1
0c560                 | ' 
0c560                 | ' testptr=compiledline(lineptr_e).result.uresult
0c560                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0c560                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0c560     69 00 00 FF 
0c564     54 E4 05 F1 | 	add	objptr, ##53844
0c568     F2 FA 01 FB | 	rdlong	result1, objptr
0c56c     FD 1E 02 F6 | 	mov	local01, result1
0c570     01 1E 66 F0 | 	shl	local01, #1
0c574     FD 1E 02 F1 | 	add	local01, result1
0c578     02 1E 66 F0 | 	shl	local01, #2
0c57c     03 00 00 FF 
0c580     04 E4 85 F1 | 	sub	objptr, ##1540
0c584     F2 1E 02 F1 | 	add	local01, objptr
0c588     04 1E 06 F1 | 	add	local01, #4
0c58c     0F 1F 02 FB | 	rdlong	local01, local01
0c590     0F 13 0A F2 | 	cmp	arg01, local01 wz
0c594     66 00 00 FF 
0c598     50 E4 85 F1 | 	sub	objptr, ##52304
0c59c     58 00 90 5D |  if_ne	jmp	#LR__0950
0c5a0     78 00 00 FF 
0c5a4     84 E5 05 F1 | 	add	objptr, ##61828
0c5a8     F2 20 62 FC | 	wrlong	local02, objptr
0c5ac     0F 00 00 FF 
0c5b0     34 E5 85 F1 | 	sub	objptr, ##7988
0c5b4     F2 20 02 FB | 	rdlong	local02, objptr
0c5b8     01 20 86 F1 | 	sub	local02, #1
0c5bc     04 E4 05 F1 | 	add	objptr, #4
0c5c0     F2 20 62 FC | 	wrlong	local02, objptr
0c5c4                 | '   runptr=testptr
0c5c4                 | '   lineptr_e=lineptr-1
0c5c4                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0c5c4     0F 00 00 FF 
0c5c8     54 E5 05 F1 | 	add	objptr, ##8020
0c5cc     F2 20 02 FB | 	rdlong	local02, objptr
0c5d0     78 00 00 FF 
0c5d4     A8 E5 85 F1 | 	sub	objptr, ##61864
0c5d8     FF FF 3F FF 
0c5dc     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0c5e0     78 00 00 AF 
0c5e4     A8 E5 05 A1 |  if_e	add	objptr, ##61864
0c5e8     F2 00 68 AC |  if_e	wrlong	#0, objptr
0c5ec     78 00 00 AF 
0c5f0     A8 E5 85 A1 |  if_e	sub	objptr, ##61864
0c5f4     04 00 90 FD | 	jmp	#LR__0951
0c5f8                 | LR__0950
0c5f8     0C 00 B0 FD | 	call	#_do_find_goto
0c5fc                 | LR__0951
0c5fc     A7 F0 03 F6 | 	mov	ptra, fp
0c600     B2 00 A0 FD | 	call	#popregs_
0c604                 | _do_fast_goto_ret
0c604     2D 00 64 FD | 	ret
0c608                 | 
0c608                 | ' 
0c608                 | ' 
0c608                 | ' 
0c608                 | ' 
0c608                 | ' sub do_find_goto
0c608                 | _do_find_goto
0c608     03 4A 05 F6 | 	mov	COUNT_, #3
0c60c     A8 00 A0 FD | 	call	#pushregs_
0c610     24 F0 07 F1 | 	add	ptra, #36
0c614                 | _do_find_goto_enter
0c614     69 00 00 FF 
0c618     54 E4 05 F1 | 	add	objptr, ##53844
0c61c     F2 1E 02 FB | 	rdlong	local01, objptr
0c620     0F 21 02 F6 | 	mov	local02, local01
0c624     01 20 66 F0 | 	shl	local02, #1
0c628     0F 21 02 F1 | 	add	local02, local01
0c62c     02 20 66 F0 | 	shl	local02, #2
0c630     03 00 00 FF 
0c634     04 E4 85 F1 | 	sub	objptr, ##1540
0c638     F2 20 02 F1 | 	add	local02, objptr
0c63c     04 20 06 F1 | 	add	local02, #4
0c640     10 21 02 FB | 	rdlong	local02, local02
0c644     A7 20 62 FC | 	wrlong	local02, fp
0c648     03 00 00 FF 
0c64c     08 E4 05 F1 | 	add	objptr, ##1544
0c650     F2 22 02 FB | 	rdlong	local03, objptr
0c654     69 00 00 FF 
0c658     58 E4 85 F1 | 	sub	objptr, ##53848
0c65c     04 4E 05 F1 | 	add	fp, #4
0c660     A7 22 62 FC | 	wrlong	local03, fp
0c664     04 4E 85 F1 | 	sub	fp, #4
0c668                 | ' 
0c668                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0c668                 | '  ' print "find goto"                                                                     'print gotoline 
0c668                 | ' gotoptr=programstart
0c668                 | ' do
0c668                 | LR__0960
0c668     0C 4E 05 F1 | 	add	fp, #12
0c66c     A7 12 02 F6 | 	mov	arg01, fp
0c670     08 4E 85 F1 | 	sub	fp, #8
0c674     A7 14 02 FB | 	rdlong	arg02, fp
0c678     04 4E 85 F1 | 	sub	fp, #4
0c67c     18 16 06 F6 | 	mov	arg03, #24
0c680     0B 00 00 FF 
0c684     C0 E4 05 F1 | 	add	objptr, ##5824
0c688     34 BA B0 FD | 	call	#_psram_spin2_read1
0c68c     0B 00 00 FF 
0c690     C0 E4 85 F1 | 	sub	objptr, ##5824
0c694                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0c694                 | '   if gotoheader(0)<>$FFFFFFFF then
0c694     0C 4E 05 F1 | 	add	fp, #12
0c698     A7 22 02 FB | 	rdlong	local03, fp
0c69c     0C 4E 85 F1 | 	sub	fp, #12
0c6a0     FF FF 7F FF 
0c6a4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0c6a8     24 00 90 AD |  if_e	jmp	#LR__0961
0c6ac     04 4E 05 F1 | 	add	fp, #4
0c6b0     A7 22 02 FB | 	rdlong	local03, fp
0c6b4     04 4E 05 F1 | 	add	fp, #4
0c6b8     A7 22 62 FC | 	wrlong	local03, fp
0c6bc     18 4E 05 F1 | 	add	fp, #24
0c6c0     A7 22 02 FB | 	rdlong	local03, fp
0c6c4     1C 4E 85 F1 | 	sub	fp, #28
0c6c8     A7 22 62 FC | 	wrlong	local03, fp
0c6cc     04 4E 85 F1 | 	sub	fp, #4
0c6d0                 | LR__0961
0c6d0     20 4E 05 F1 | 	add	fp, #32
0c6d4     A7 22 02 FB | 	rdlong	local03, fp
0c6d8     20 4E 85 F1 | 	sub	fp, #32
0c6dc     FF FF 3F FF 
0c6e0     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c6e4     0C 4E 05 51 |  if_ne	add	fp, #12
0c6e8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c6ec     0C 4E 85 51 |  if_ne	sub	fp, #12
0c6f0     FF FF 7F 5F 
0c6f4     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0c6f8     18 00 90 AD |  if_e	jmp	#LR__0962
0c6fc     0C 4E 05 F1 | 	add	fp, #12
0c700     A7 22 02 FB | 	rdlong	local03, fp
0c704     0C 4E 85 F1 | 	sub	fp, #12
0c708     A7 20 02 FB | 	rdlong	local02, fp
0c70c     10 23 0A F2 | 	cmp	local03, local02 wz
0c710     54 FF 9F 5D |  if_ne	jmp	#LR__0960
0c714                 | LR__0962
0c714                 | ' 
0c714                 | ' if gotoheader(0)=gotoline then
0c714     0C 4E 05 F1 | 	add	fp, #12
0c718     A7 22 02 FB | 	rdlong	local03, fp
0c71c     0C 4E 85 F1 | 	sub	fp, #12
0c720     A7 1E 02 FB | 	rdlong	local01, fp
0c724     0F 23 0A F2 | 	cmp	local03, local01 wz
0c728     D8 00 90 5D |  if_ne	jmp	#LR__0963
0c72c     69 00 00 FF 
0c730     54 E4 05 F1 | 	add	objptr, ##53844
0c734     F2 1E 02 FB | 	rdlong	local01, objptr
0c738     0F 21 02 F6 | 	mov	local02, local01
0c73c     01 20 66 F0 | 	shl	local02, #1
0c740     0F 21 02 F1 | 	add	local02, local01
0c744     02 20 66 F0 | 	shl	local02, #2
0c748     03 00 00 FF 
0c74c     04 E4 85 F1 | 	sub	objptr, ##1540
0c750     F2 20 02 F1 | 	add	local02, objptr
0c754     08 4E 05 F1 | 	add	fp, #8
0c758     A7 22 02 FB | 	rdlong	local03, fp
0c75c     10 23 62 FC | 	wrlong	local03, local02
0c760     03 00 00 FF 
0c764     04 E4 05 F1 | 	add	objptr, ##1540
0c768     F2 1E 02 FB | 	rdlong	local01, objptr
0c76c     0F 21 02 F6 | 	mov	local02, local01
0c770     01 20 66 F0 | 	shl	local02, #1
0c774     0F 21 02 F1 | 	add	local02, local01
0c778     02 20 66 F0 | 	shl	local02, #2
0c77c     03 00 00 FF 
0c780     04 E4 85 F1 | 	sub	objptr, ##1540
0c784     F2 20 02 F1 | 	add	local02, objptr
0c788     08 20 06 F1 | 	add	local02, #8
0c78c     10 9D 68 FC | 	wrlong	#78, local02
0c790     03 00 00 FF 
0c794     04 E4 05 F1 | 	add	objptr, ##1540
0c798     F2 20 02 FB | 	rdlong	local02, objptr
0c79c     10 13 02 F6 | 	mov	arg01, local02
0c7a0     01 12 66 F0 | 	shl	arg01, #1
0c7a4     10 13 02 F1 | 	add	arg01, local02
0c7a8     02 12 66 F0 | 	shl	arg01, #2
0c7ac     03 00 00 FF 
0c7b0     04 E4 85 F1 | 	sub	objptr, ##1540
0c7b4     F2 12 02 F1 | 	add	arg01, objptr
0c7b8     12 00 00 FF 
0c7bc     3C E5 05 F1 | 	add	objptr, ##9532
0c7c0     F2 14 02 FB | 	rdlong	arg02, objptr
0c7c4     02 22 06 F6 | 	mov	local03, #2
0c7c8     10 23 02 F1 | 	add	local03, local02
0c7cc     14 00 00 FF 
0c7d0     54 E5 85 F1 | 	sub	objptr, ##10580
0c7d4     F2 16 02 FB | 	rdlong	arg03, objptr
0c7d8     0B 23 02 FD | 	qmul	local03, arg03
0c7dc     08 4E 85 F1 | 	sub	fp, #8
0c7e0     58 00 00 FF 
0c7e4     78 E5 85 F1 | 	sub	objptr, ##45432
0c7e8     18 22 62 FD | 	getqx	local03
0c7ec     11 15 02 F1 | 	add	arg02, local03
0c7f0     68 B9 B0 FD | 	call	#_psram_spin2_write
0c7f4     0B 00 00 FF 
0c7f8     C0 E4 85 F1 | 	sub	objptr, ##5824
0c7fc     18 FD BF FD | 	call	#_do_fast_goto
0c800     08 00 90 FD | 	jmp	#LR__0964
0c804                 | LR__0963
0c804     26 12 06 F6 | 	mov	arg01, #38
0c808     80 8E B0 FD | 	call	#_printerror
0c80c                 | LR__0964
0c80c     A7 F0 03 F6 | 	mov	ptra, fp
0c810     B2 00 A0 FD | 	call	#popregs_
0c814                 | _do_find_goto_ret
0c814     2D 00 64 FD | 	ret
0c818                 | 
0c818                 | ' 
0c818                 | ' sub do_slow_goto
0c818                 | _do_slow_goto
0c818                 | _do_slow_goto_ret
0c818     2D 00 64 FD | 	ret
0c81c                 | 
0c81c                 | ' 
0c81c                 | ' '----------------------- Error processing
0c81c                 | ' 
0c81c                 | ' sub do_error
0c81c                 | _do_error
0c81c     01 4A 05 F6 | 	mov	COUNT_, #1
0c820     A8 00 A0 FD | 	call	#pushregs_
0c824     69 00 00 FF 
0c828     54 E4 05 F1 | 	add	objptr, ##53844
0c82c     F2 18 02 FB | 	rdlong	arg04, objptr
0c830     0C 17 02 F6 | 	mov	arg03, arg04
0c834     01 16 66 F0 | 	shl	arg03, #1
0c838     0C 17 02 F1 | 	add	arg03, arg04
0c83c     02 16 66 F0 | 	shl	arg03, #2
0c840     03 00 00 FF 
0c844     04 E4 85 F1 | 	sub	objptr, ##1540
0c848     F2 16 02 F1 | 	add	arg03, objptr
0c84c     0B 1F 02 FB | 	rdlong	local01, arg03
0c850                 | ' r=compiledline(lineptr_e).result.uresult
0c850                 | ' print "Error ";r;": ";errors$(r)
0c850     00 12 06 F6 | 	mov	arg01, #0
0c854     66 00 00 FF 
0c858     50 E4 85 F1 | 	sub	objptr, ##52304
0c85c     54 1C B1 FD | 	call	#__system___getiolock_0423
0c860     FD 12 02 F6 | 	mov	arg01, result1
0c864     48 C3 B0 FD | 	call	#__system___lockmem
0c868     43 01 00 FF 
0c86c     13 14 06 F6 | 	mov	arg02, ##@LR__4580
0c870     00 12 06 F6 | 	mov	arg01, #0
0c874     00 16 06 F6 | 	mov	arg03, #0
0c878     28 D0 B0 FD | 	call	#__system___basic_print_string
0c87c     00 12 06 F6 | 	mov	arg01, #0
0c880     0F 15 02 F6 | 	mov	arg02, local01
0c884     00 16 06 F6 | 	mov	arg03, #0
0c888     0A 18 06 F6 | 	mov	arg04, #10
0c88c     98 D0 B0 FD | 	call	#__system___basic_print_unsigned
0c890     43 01 00 FF 
0c894     1A 14 06 F6 | 	mov	arg02, ##@LR__4581
0c898     00 12 06 F6 | 	mov	arg01, #0
0c89c     00 16 06 F6 | 	mov	arg03, #0
0c8a0     00 D0 B0 FD | 	call	#__system___basic_print_string
0c8a4     02 1E 66 F0 | 	shl	local01, #2
0c8a8     64 00 00 FF 
0c8ac     50 E4 05 F1 | 	add	objptr, ##51280
0c8b0     F2 1E 02 F1 | 	add	local01, objptr
0c8b4     0F 15 02 FB | 	rdlong	arg02, local01
0c8b8     00 12 06 F6 | 	mov	arg01, #0
0c8bc     00 16 06 F6 | 	mov	arg03, #0
0c8c0     64 00 00 FF 
0c8c4     50 E4 85 F1 | 	sub	objptr, ##51280
0c8c8     D8 CF B0 FD | 	call	#__system___basic_print_string
0c8cc     00 12 06 F6 | 	mov	arg01, #0
0c8d0     0A 14 06 F6 | 	mov	arg02, #10
0c8d4     00 16 06 F6 | 	mov	arg03, #0
0c8d8     70 CF B0 FD | 	call	#__system___basic_print_char
0c8dc     00 12 06 F6 | 	mov	arg01, #0
0c8e0     D0 1B B1 FD | 	call	#__system___getiolock_0423
0c8e4     FD 00 68 FC | 	wrlong	#0, result1
0c8e8     A7 F0 03 F6 | 	mov	ptra, fp
0c8ec     B2 00 A0 FD | 	call	#popregs_
0c8f0                 | _do_error_ret
0c8f0     2D 00 64 FD | 	ret
0c8f4                 | 
0c8f4                 | ' 
0c8f4                 | ' 
0c8f4                 | ' '------------------ Assigning to a variable  
0c8f4                 | ' 
0c8f4                 | ' function  convertstring(psaddr as ulong) as string
0c8f4                 | _convertstring
0c8f4     04 4A 05 F6 | 	mov	COUNT_, #4
0c8f8     A8 00 A0 FD | 	call	#pushregs_
0c8fc     09 1F 02 F6 | 	mov	local01, arg01
0c900     44 8F B0 FD | 	call	#_pslpeek
0c904     FD 20 02 F6 | 	mov	local02, result1
0c908     43 01 00 FF 
0c90c     1D 22 06 F6 | 	mov	local03, ##@LR__4582
0c910                 | ' 'print "in convertstring: psaddr=";psaddr
0c910                 | ' l=pslpeek(psaddr)
0c910                 | ' 'print "in convertstring: len=";l
0c910                 | ' s="" 
0c910                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0c910     01 24 06 F6 | 	mov	local04, #1
0c914     01 20 06 F1 | 	add	local02, #1
0c918                 | LR__0970
0c918     10 25 52 F2 | 	cmps	local04, local02 wc
0c91c     30 00 90 3D |  if_ae	jmp	#LR__0971
0c920     0F 13 02 F6 | 	mov	arg01, local01
0c924     03 12 06 F1 | 	add	arg01, #3
0c928     12 13 02 F1 | 	add	arg01, local04
0c92c     C0 8E B0 FD | 	call	#_pspeek
0c930     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0c934     4C E4 B0 FD | 	call	#__system__Chr_S
0c938     FD 14 02 F6 | 	mov	arg02, result1
0c93c     11 13 02 F6 | 	mov	arg01, local03
0c940     C8 C2 B0 FD | 	call	#__system___string_concat
0c944     FD 22 02 F6 | 	mov	local03, result1
0c948     01 24 06 F1 | 	add	local04, #1
0c94c     C8 FF 9F FD | 	jmp	#LR__0970
0c950                 | LR__0971
0c950                 | ' 'print "in convertstring: str=";s
0c950                 | ' return s
0c950     11 FB 01 F6 | 	mov	result1, local03
0c954     A7 F0 03 F6 | 	mov	ptra, fp
0c958     B2 00 A0 FD | 	call	#popregs_
0c95c                 | _convertstring_ret
0c95c     2D 00 64 FD | 	ret
0c960                 | 
0c960                 | ' 
0c960                 | ' sub do_assign
0c960                 | _do_assign
0c960     05 4A 05 F6 | 	mov	COUNT_, #5
0c964     A8 00 A0 FD | 	call	#pushregs_
0c968     44 F0 07 F1 | 	add	ptra, #68
0c96c     69 00 00 FF 
0c970     54 E4 05 F1 | 	add	objptr, ##53844
0c974     F2 16 02 FB | 	rdlong	arg03, objptr
0c978     0B 15 02 F6 | 	mov	arg02, arg03
0c97c     01 14 66 F0 | 	shl	arg02, #1
0c980     0B 15 02 F1 | 	add	arg02, arg03
0c984     02 14 66 F0 | 	shl	arg02, #2
0c988     03 00 00 FF 
0c98c     04 E4 85 F1 | 	sub	objptr, ##1540
0c990     F2 14 02 F1 | 	add	arg02, objptr
0c994     0A 15 02 FB | 	rdlong	arg02, arg02
0c998     18 4E 05 F1 | 	add	fp, #24
0c99c     A7 14 62 FC | 	wrlong	arg02, fp
0c9a0                 | ' 
0c9a0                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0c9a0                 | ' 
0c9a0                 | ' if variables(varnum).vartype<array_no_type then 
0c9a0     18 4E 85 F1 | 	sub	fp, #24
0c9a4     04 14 66 F0 | 	shl	arg02, #4
0c9a8     32 00 00 FF 
0c9ac     74 E4 85 F1 | 	sub	objptr, ##25716
0c9b0     F2 14 02 F1 | 	add	arg02, objptr
0c9b4     0C 14 06 F1 | 	add	arg02, #12
0c9b8     0A 17 02 FB | 	rdlong	arg03, arg02
0c9bc     00 17 16 F2 | 	cmp	arg03, #256 wc
0c9c0     33 00 00 FF 
0c9c4     DC E5 85 F1 | 	sub	objptr, ##26588
0c9c8     18 01 90 3D |  if_ae	jmp	#LR__0980
0c9cc     E8 CD BF FD | 	call	#_pop
0c9d0     A7 FA 61 FC | 	wrlong	result1, fp
0c9d4     04 4E 05 F1 | 	add	fp, #4
0c9d8     A7 FC 61 FC | 	wrlong	result2, fp
0c9dc     04 4E 05 F1 | 	add	fp, #4
0c9e0     A7 FE 61 FC | 	wrlong	result3, fp
0c9e4     08 4E 85 F1 | 	sub	fp, #8
0c9e8     A7 16 02 FB | 	rdlong	arg03, fp
0c9ec     04 4E 05 F1 | 	add	fp, #4
0c9f0     A7 14 02 FB | 	rdlong	arg02, fp
0c9f4     14 4E 05 F1 | 	add	fp, #20
0c9f8     A7 12 02 FB | 	rdlong	arg01, fp
0c9fc     04 12 66 F0 | 	shl	arg01, #4
0ca00     33 00 00 FF 
0ca04     DC E5 05 F1 | 	add	objptr, ##26588
0ca08     F2 12 02 F1 | 	add	arg01, objptr
0ca0c     04 12 06 F1 | 	add	arg01, #4
0ca10     09 17 62 FC | 	wrlong	arg03, arg01
0ca14     A7 16 02 FB | 	rdlong	arg03, fp
0ca18     04 16 66 F0 | 	shl	arg03, #4
0ca1c     F2 16 02 F1 | 	add	arg03, objptr
0ca20     08 16 06 F1 | 	add	arg03, #8
0ca24     0B 15 62 FC | 	wrlong	arg02, arg03
0ca28     A7 16 02 FB | 	rdlong	arg03, fp
0ca2c     04 16 66 F0 | 	shl	arg03, #4
0ca30     F2 16 02 F1 | 	add	arg03, objptr
0ca34     10 4E 85 F1 | 	sub	fp, #16
0ca38     A7 14 02 FB | 	rdlong	arg02, fp
0ca3c     0C 16 06 F1 | 	add	arg03, #12
0ca40     0B 15 62 FC | 	wrlong	arg02, arg03
0ca44                 | '   t1=pop() 
0ca44                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0ca44                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0ca44                 | '   if variables(varnum).vartype<>result_string2 then return
0ca44     10 4E 05 F1 | 	add	fp, #16
0ca48     A7 16 02 FB | 	rdlong	arg03, fp
0ca4c     18 4E 85 F1 | 	sub	fp, #24
0ca50     04 16 66 F0 | 	shl	arg03, #4
0ca54     F2 16 02 F1 | 	add	arg03, objptr
0ca58     0C 16 06 F1 | 	add	arg03, #12
0ca5c     0B 17 02 FB | 	rdlong	arg03, arg03
0ca60     2B 16 0E F2 | 	cmp	arg03, #43 wz
0ca64     33 00 00 FF 
0ca68     DC E5 85 F1 | 	sub	objptr, ##26588
0ca6c     A4 05 90 5D |  if_ne	jmp	#LR__1001
0ca70     18 4E 05 F1 | 	add	fp, #24
0ca74     A7 16 02 FB | 	rdlong	arg03, fp
0ca78     0B 1F 02 F6 | 	mov	local01, arg03
0ca7c     04 1E 66 F0 | 	shl	local01, #4
0ca80     33 00 00 FF 
0ca84     DC E5 05 F1 | 	add	objptr, ##26588
0ca88     F2 1E 02 F1 | 	add	local01, objptr
0ca8c     18 4E 85 F1 | 	sub	fp, #24
0ca90     04 16 66 F0 | 	shl	arg03, #4
0ca94     F2 16 02 F1 | 	add	arg03, objptr
0ca98     04 16 06 F1 | 	add	arg03, #4
0ca9c     0B 13 02 FB | 	rdlong	arg01, arg03
0caa0     33 00 00 FF 
0caa4     DC E5 85 F1 | 	sub	objptr, ##26588
0caa8     48 FE BF FD | 	call	#_convertstring
0caac     04 1E 06 F1 | 	add	local01, #4
0cab0     0F FB 61 FC | 	wrlong	result1, local01
0cab4     18 4E 05 F1 | 	add	fp, #24
0cab8     A7 1E 02 FB | 	rdlong	local01, fp
0cabc     18 4E 85 F1 | 	sub	fp, #24
0cac0     04 1E 66 F0 | 	shl	local01, #4
0cac4     33 00 00 FF 
0cac8     DC E5 05 F1 | 	add	objptr, ##26588
0cacc     F2 1E 02 F1 | 	add	local01, objptr
0cad0     0C 1E 06 F1 | 	add	local01, #12
0cad4     0F 3F 68 FC | 	wrlong	#31, local01
0cad8                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0cad8                 | '   variables(varnum).vartype=result_string
0cad8                 | '   return
0cad8     33 00 00 FF 
0cadc     DC E5 85 F1 | 	sub	objptr, ##26588
0cae0     30 05 90 FD | 	jmp	#LR__1001
0cae4                 | LR__0980
0cae4                 | ' for i=0 to 2 : arrid(i)=0 : next i
0cae4     1C 4E 05 F1 | 	add	fp, #28
0cae8     A7 00 68 FC | 	wrlong	#0, fp
0caec     97 16 48 FB | 	callpa	#(@LR__0982-@LR__0981)>>2,fcache_load_ptr_
0caf0                 | LR__0981
0caf0     A7 1E 02 FB | 	rdlong	local01, fp
0caf4     02 1E 66 F0 | 	shl	local01, #2
0caf8     18 4E 05 F1 | 	add	fp, #24
0cafc     A7 1E 02 F1 | 	add	local01, fp
0cb00     0F 01 68 FC | 	wrlong	#0, local01
0cb04     18 4E 85 F1 | 	sub	fp, #24
0cb08     A7 1E 02 FB | 	rdlong	local01, fp
0cb0c     01 1E 06 F1 | 	add	local01, #1
0cb10     A7 1E 62 FC | 	wrlong	local01, fp
0cb14     03 1E 16 F2 | 	cmp	local01, #3 wc
0cb18     D4 FF 9F CD |  if_b	jmp	#LR__0981
0cb1c                 | LR__0982
0cb1c     69 00 00 FF 
0cb20     54 E4 05 F1 | 	add	objptr, ##53844
0cb24     F2 16 02 FB | 	rdlong	arg03, objptr
0cb28     0B 1F 02 F6 | 	mov	local01, arg03
0cb2c     01 1E 66 F0 | 	shl	local01, #1
0cb30     0B 1F 02 F1 | 	add	local01, arg03
0cb34     02 1E 66 F0 | 	shl	local01, #2
0cb38     03 00 00 FF 
0cb3c     04 E4 85 F1 | 	sub	objptr, ##1540
0cb40     F2 1E 02 F1 | 	add	local01, objptr
0cb44     04 1E 06 F1 | 	add	local01, #4
0cb48     0F 21 02 FB | 	rdlong	local02, local01
0cb4c     04 4E 05 F1 | 	add	fp, #4
0cb50     A7 20 62 FC | 	wrlong	local02, fp
0cb54     20 4E 85 F1 | 	sub	fp, #32
0cb58     66 00 00 FF 
0cb5c     50 E4 85 F1 | 	sub	objptr, ##52304
0cb60     54 CC BF FD | 	call	#_pop
0cb64     A7 FA 61 FC | 	wrlong	result1, fp
0cb68     04 4E 05 F1 | 	add	fp, #4
0cb6c     A7 FC 61 FC | 	wrlong	result2, fp
0cb70     04 4E 05 F1 | 	add	fp, #4
0cb74     A7 FE 61 FC | 	wrlong	result3, fp
0cb78                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0cb78                 | ' t1=pop() ' var value
0cb78                 | ' if numpar>0 then
0cb78     18 4E 05 F1 | 	add	fp, #24
0cb7c     A7 22 02 FB | 	rdlong	local03, fp
0cb80     20 4E 85 F1 | 	sub	fp, #32
0cb84     01 22 16 F2 | 	cmp	local03, #1 wc
0cb88     78 00 90 CD |  if_b	jmp	#LR__0985
0cb8c                 | '   for i=numpar to 1 step -1
0cb8c     20 4E 05 F1 | 	add	fp, #32
0cb90     A7 24 0A FB | 	rdlong	local04, fp wz
0cb94     04 4E 85 F1 | 	sub	fp, #4
0cb98     A7 24 62 FC | 	wrlong	local04, fp
0cb9c     1C 4E 85 F1 | 	sub	fp, #28
0cba0     60 00 90 AD |  if_e	jmp	#LR__0984
0cba4                 | LR__0983
0cba4     10 CC BF FD | 	call	#_pop
0cba8     0C 4E 05 F1 | 	add	fp, #12
0cbac     A7 FA 61 FC | 	wrlong	result1, fp
0cbb0     04 4E 05 F1 | 	add	fp, #4
0cbb4     A7 FC 61 FC | 	wrlong	result2, fp
0cbb8     04 4E 05 F1 | 	add	fp, #4
0cbbc     A7 FE 61 FC | 	wrlong	result3, fp
0cbc0     08 4E 05 F1 | 	add	fp, #8
0cbc4     A7 22 02 FB | 	rdlong	local03, fp
0cbc8     01 22 86 F1 | 	sub	local03, #1
0cbcc     02 22 66 F0 | 	shl	local03, #2
0cbd0     18 4E 05 F1 | 	add	fp, #24
0cbd4     A7 22 02 F1 | 	add	local03, fp
0cbd8     28 4E 85 F1 | 	sub	fp, #40
0cbdc     A7 12 02 F6 | 	mov	arg01, fp
0cbe0     0C 4E 85 F1 | 	sub	fp, #12
0cbe4     B4 40 B0 FD | 	call	#_converttoint
0cbe8     11 FB 61 FC | 	wrlong	result1, local03
0cbec     1C 4E 05 F1 | 	add	fp, #28
0cbf0     A7 24 02 FB | 	rdlong	local04, fp
0cbf4     01 24 8E F1 | 	sub	local04, #1 wz
0cbf8     A7 24 62 FC | 	wrlong	local04, fp
0cbfc     1C 4E 85 F1 | 	sub	fp, #28
0cc00     A0 FF 9F 5D |  if_ne	jmp	#LR__0983
0cc04                 | LR__0984
0cc04                 | LR__0985
0cc04     18 4E 05 F1 | 	add	fp, #24
0cc08     A7 1E 02 FB | 	rdlong	local01, fp
0cc0c     04 1E 66 F0 | 	shl	local01, #4
0cc10     33 00 00 FF 
0cc14     DC E5 05 F1 | 	add	objptr, ##26588
0cc18     F2 1E 02 F1 | 	add	local01, objptr
0cc1c     04 1E 06 F1 | 	add	local01, #4
0cc20     0F 13 02 FB | 	rdlong	arg01, local01
0cc24     0C 4E 05 F1 | 	add	fp, #12
0cc28     A7 12 62 FC | 	wrlong	arg01, fp
0cc2c     24 4E 85 F1 | 	sub	fp, #36
0cc30     33 00 00 FF 
0cc34     DC E5 85 F1 | 	sub	objptr, ##26588
0cc38     0C 8C B0 FD | 	call	#_pslpeek
0cc3c     FD 24 32 F9 | 	getword	local04, result1, #0
0cc40     28 4E 05 F1 | 	add	fp, #40
0cc44     A7 24 62 FC | 	wrlong	local04, fp
0cc48     04 4E 85 F1 | 	sub	fp, #4
0cc4c     A7 12 02 FB | 	rdlong	arg01, fp
0cc50     24 4E 85 F1 | 	sub	fp, #36
0cc54     02 12 06 F1 | 	add	arg01, #2
0cc58     94 8B B0 FD | 	call	#_pspeek
0cc5c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0cc60     2C 4E 05 F1 | 	add	fp, #44
0cc64     A7 FA 61 FC | 	wrlong	result1, fp
0cc68     08 4E 85 F1 | 	sub	fp, #8
0cc6c     A7 12 02 FB | 	rdlong	arg01, fp
0cc70     09 25 02 F6 | 	mov	local04, arg01
0cc74     10 24 06 F1 | 	add	local04, #16
0cc78     24 4E 85 F1 | 	sub	fp, #36
0cc7c     04 12 06 F1 | 	add	arg01, #4
0cc80     C4 8B B0 FD | 	call	#_pslpeek
0cc84     FD 1E 02 F6 | 	mov	local01, result1
0cc88     38 4E 05 F1 | 	add	fp, #56
0cc8c     A7 20 02 FB | 	rdlong	local02, fp
0cc90     10 1F 02 FD | 	qmul	local01, local02
0cc94     04 4E 85 F1 | 	sub	fp, #4
0cc98     A7 22 02 FB | 	rdlong	local03, fp
0cc9c     10 4E 85 F1 | 	sub	fp, #16
0cca0     A7 12 02 FB | 	rdlong	arg01, fp
0cca4     24 4E 85 F1 | 	sub	fp, #36
0cca8     08 12 06 F1 | 	add	arg01, #8
0ccac     18 20 62 FD | 	getqx	local02
0ccb0     10 23 02 F1 | 	add	local03, local02
0ccb4     90 8B B0 FD | 	call	#_pslpeek
0ccb8     FD 20 02 F6 | 	mov	local02, result1
0ccbc     24 4E 05 F1 | 	add	fp, #36
0ccc0     A7 12 02 FB | 	rdlong	arg01, fp
0ccc4     24 4E 85 F1 | 	sub	fp, #36
0ccc8     04 12 06 F1 | 	add	arg01, #4
0cccc     78 8B B0 FD | 	call	#_pslpeek
0ccd0     FD 20 02 FD | 	qmul	local02, result1
0ccd4     3C 4E 05 F1 | 	add	fp, #60
0ccd8     A7 20 02 FB | 	rdlong	local02, fp
0ccdc     18 1E 62 FD | 	getqx	local01
0cce0     10 1F 02 FD | 	qmul	local01, local02
0cce4     10 4E 85 F1 | 	sub	fp, #16
0cce8     A7 20 02 FB | 	rdlong	local02, fp
0ccec     18 1E 62 FD | 	getqx	local01
0ccf0     0F 23 02 F1 | 	add	local03, local01
0ccf4     11 21 02 FD | 	qmul	local02, local03
0ccf8     04 4E 05 F1 | 	add	fp, #4
0ccfc                 | ' esize=pspeek(arrptr+2)
0ccfc                 | ' 'print " in do_assign, pslpeek(arrptr+4)="; pslpeek(arrptr+4)
0ccfc                 | ' 'print " in do_assign, pslpeek(arrptr+8)="; pslpeek(arrptr+8)
0ccfc                 | ' 'print " in do_assign, pslpeek(arrptr+12)="; pslpeek(arrptr+12)
0ccfc                 | ' 
0ccfc                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0ccfc                 | ' select case arrtype
0ccfc     18 22 62 FD | 	getqx	local03
0cd00     11 25 02 F1 | 	add	local04, local03
0cd04     A7 24 62 FC | 	wrlong	local04, fp
0cd08     08 4E 85 F1 | 	sub	fp, #8
0cd0c     A7 26 02 FB | 	rdlong	local05, fp
0cd10     28 4E 85 F1 | 	sub	fp, #40
0cd14     00 27 86 F1 | 	sub	local05, #256
0cd18     0C 26 26 F3 | 	fle	local05, #12
0cd1c     30 26 62 FD | 	jmprel	local05
0cd20                 | LR__0986
0cd20     30 00 90 FD | 	jmp	#LR__0987
0cd24     58 00 90 FD | 	jmp	#LR__0988
0cd28     88 00 90 FD | 	jmp	#LR__0989
0cd2c     B8 00 90 FD | 	jmp	#LR__0990
0cd30     10 01 90 FD | 	jmp	#LR__0991
0cd34     68 01 90 FD | 	jmp	#LR__0992
0cd38     98 01 90 FD | 	jmp	#LR__0993
0cd3c     C8 01 90 FD | 	jmp	#LR__0994
0cd40     F8 01 90 FD | 	jmp	#LR__0995
0cd44     28 02 90 FD | 	jmp	#LR__0996
0cd48     58 02 90 FD | 	jmp	#LR__0997
0cd4c     88 02 90 FD | 	jmp	#LR__0998
0cd50     B8 02 90 FD | 	jmp	#LR__0999
0cd54                 | LR__0987
0cd54     A7 12 02 F6 | 	mov	arg01, fp
0cd58     30 4E 05 F1 | 	add	fp, #48
0cd5c     A7 14 02 FB | 	rdlong	arg02, fp
0cd60     30 4E 85 F1 | 	sub	fp, #48
0cd64     0C 16 06 F6 | 	mov	arg03, #12
0cd68     0B 00 00 FF 
0cd6c     C0 E4 05 F1 | 	add	objptr, ##5824
0cd70     E8 B3 B0 FD | 	call	#_psram_spin2_write
0cd74     0B 00 00 FF 
0cd78     C0 E4 85 F1 | 	sub	objptr, ##5824
0cd7c     94 02 90 FD | 	jmp	#LR__1000
0cd80                 | LR__0988
0cd80     30 4E 05 F1 | 	add	fp, #48
0cd84     A7 12 02 FB | 	rdlong	arg01, fp
0cd88     30 4E 85 F1 | 	sub	fp, #48
0cd8c     A7 14 02 FB | 	rdlong	arg02, fp
0cd90     01 16 06 F6 | 	mov	arg03, #1
0cd94     00 18 06 F6 | 	mov	arg04, #0
0cd98     0B 00 00 FF 
0cd9c     C0 E4 05 F1 | 	add	objptr, ##5824
0cda0                 | '     return fill(addr, pattern, count, listPtr, 1)
0cda0     01 1A 06 F6 | 	mov	arg05, #1
0cda4     50 B4 B0 FD | 	call	#_psram_spin2_fill
0cda8     0B 00 00 FF 
0cdac     C0 E4 85 F1 | 	sub	objptr, ##5824
0cdb0     60 02 90 FD | 	jmp	#LR__1000
0cdb4                 | LR__0989
0cdb4     30 4E 05 F1 | 	add	fp, #48
0cdb8     A7 12 02 FB | 	rdlong	arg01, fp
0cdbc     30 4E 85 F1 | 	sub	fp, #48
0cdc0     A7 14 02 FB | 	rdlong	arg02, fp
0cdc4     01 16 06 F6 | 	mov	arg03, #1
0cdc8     00 18 06 F6 | 	mov	arg04, #0
0cdcc     0B 00 00 FF 
0cdd0     C0 E4 05 F1 | 	add	objptr, ##5824
0cdd4                 | '     return fill(addr, pattern, count, listPtr, 1)
0cdd4     01 1A 06 F6 | 	mov	arg05, #1
0cdd8     1C B4 B0 FD | 	call	#_psram_spin2_fill
0cddc     0B 00 00 FF 
0cde0     C0 E4 85 F1 | 	sub	objptr, ##5824
0cde4     2C 02 90 FD | 	jmp	#LR__1000
0cde8                 | LR__0990
0cde8     30 4E 05 F1 | 	add	fp, #48
0cdec     A7 12 02 FB | 	rdlong	arg01, fp
0cdf0     30 4E 85 F1 | 	sub	fp, #48
0cdf4     A7 14 02 FB | 	rdlong	arg02, fp
0cdf8     01 16 06 F6 | 	mov	arg03, #1
0cdfc     00 18 06 F6 | 	mov	arg04, #0
0ce00     0B 00 00 FF 
0ce04     C0 E4 05 F1 | 	add	objptr, ##5824
0ce08                 | '     return fill(addr, pattern, count, listPtr, 1)
0ce08     01 1A 06 F6 | 	mov	arg05, #1
0ce0c     E8 B3 B0 FD | 	call	#_psram_spin2_fill
0ce10     30 4E 05 F1 | 	add	fp, #48
0ce14     A7 12 02 FB | 	rdlong	arg01, fp
0ce18     30 4E 85 F1 | 	sub	fp, #48
0ce1c     01 12 06 F1 | 	add	arg01, #1
0ce20     A7 14 02 FB | 	rdlong	arg02, fp
0ce24     08 14 46 F0 | 	shr	arg02, #8
0ce28     01 16 06 F6 | 	mov	arg03, #1
0ce2c     00 18 06 F6 | 	mov	arg04, #0
0ce30                 | '     return fill(addr, pattern, count, listPtr, 1)
0ce30     01 1A 06 F6 | 	mov	arg05, #1
0ce34     C0 B3 B0 FD | 	call	#_psram_spin2_fill
0ce38     0B 00 00 FF 
0ce3c     C0 E4 85 F1 | 	sub	objptr, ##5824
0ce40     D0 01 90 FD | 	jmp	#LR__1000
0ce44                 | LR__0991
0ce44     30 4E 05 F1 | 	add	fp, #48
0ce48     A7 12 02 FB | 	rdlong	arg01, fp
0ce4c     30 4E 85 F1 | 	sub	fp, #48
0ce50     A7 14 02 FB | 	rdlong	arg02, fp
0ce54     01 16 06 F6 | 	mov	arg03, #1
0ce58     00 18 06 F6 | 	mov	arg04, #0
0ce5c     0B 00 00 FF 
0ce60     C0 E4 05 F1 | 	add	objptr, ##5824
0ce64                 | '     return fill(addr, pattern, count, listPtr, 1)
0ce64     01 1A 06 F6 | 	mov	arg05, #1
0ce68     8C B3 B0 FD | 	call	#_psram_spin2_fill
0ce6c     30 4E 05 F1 | 	add	fp, #48
0ce70     A7 12 02 FB | 	rdlong	arg01, fp
0ce74     30 4E 85 F1 | 	sub	fp, #48
0ce78     01 12 06 F1 | 	add	arg01, #1
0ce7c     A7 14 02 FB | 	rdlong	arg02, fp
0ce80     08 14 46 F0 | 	shr	arg02, #8
0ce84     01 16 06 F6 | 	mov	arg03, #1
0ce88     00 18 06 F6 | 	mov	arg04, #0
0ce8c                 | '     return fill(addr, pattern, count, listPtr, 1)
0ce8c     01 1A 06 F6 | 	mov	arg05, #1
0ce90     64 B3 B0 FD | 	call	#_psram_spin2_fill
0ce94     0B 00 00 FF 
0ce98     C0 E4 85 F1 | 	sub	objptr, ##5824
0ce9c     74 01 90 FD | 	jmp	#LR__1000
0cea0                 | LR__0992
0cea0     30 4E 05 F1 | 	add	fp, #48
0cea4     A7 12 02 FB | 	rdlong	arg01, fp
0cea8     30 4E 85 F1 | 	sub	fp, #48
0ceac     A7 14 02 FB | 	rdlong	arg02, fp
0ceb0     01 16 06 F6 | 	mov	arg03, #1
0ceb4     00 18 06 F6 | 	mov	arg04, #0
0ceb8     0B 00 00 FF 
0cebc     C0 E4 05 F1 | 	add	objptr, ##5824
0cec0                 | '     return fill(addr, pattern, count, listPtr, 4)
0cec0     04 1A 06 F6 | 	mov	arg05, #4
0cec4     30 B3 B0 FD | 	call	#_psram_spin2_fill
0cec8     0B 00 00 FF 
0cecc     C0 E4 85 F1 | 	sub	objptr, ##5824
0ced0     40 01 90 FD | 	jmp	#LR__1000
0ced4                 | LR__0993
0ced4     30 4E 05 F1 | 	add	fp, #48
0ced8     A7 12 02 FB | 	rdlong	arg01, fp
0cedc     30 4E 85 F1 | 	sub	fp, #48
0cee0     A7 14 02 FB | 	rdlong	arg02, fp
0cee4     01 16 06 F6 | 	mov	arg03, #1
0cee8     00 18 06 F6 | 	mov	arg04, #0
0ceec     0B 00 00 FF 
0cef0     C0 E4 05 F1 | 	add	objptr, ##5824
0cef4                 | '     return fill(addr, pattern, count, listPtr, 4)
0cef4     04 1A 06 F6 | 	mov	arg05, #4
0cef8     FC B2 B0 FD | 	call	#_psram_spin2_fill
0cefc     0B 00 00 FF 
0cf00     C0 E4 85 F1 | 	sub	objptr, ##5824
0cf04     0C 01 90 FD | 	jmp	#LR__1000
0cf08                 | LR__0994
0cf08     30 4E 05 F1 | 	add	fp, #48
0cf0c     A7 12 02 FB | 	rdlong	arg01, fp
0cf10     30 4E 85 F1 | 	sub	fp, #48
0cf14     A7 14 02 FB | 	rdlong	arg02, fp
0cf18     01 16 06 F6 | 	mov	arg03, #1
0cf1c     00 18 06 F6 | 	mov	arg04, #0
0cf20     0B 00 00 FF 
0cf24     C0 E4 05 F1 | 	add	objptr, ##5824
0cf28                 | '     return fill(addr, pattern, count, listPtr, 4)
0cf28     04 1A 06 F6 | 	mov	arg05, #4
0cf2c     C8 B2 B0 FD | 	call	#_psram_spin2_fill
0cf30     0B 00 00 FF 
0cf34     C0 E4 85 F1 | 	sub	objptr, ##5824
0cf38     D8 00 90 FD | 	jmp	#LR__1000
0cf3c                 | LR__0995
0cf3c     30 4E 05 F1 | 	add	fp, #48
0cf40     A7 12 02 FB | 	rdlong	arg01, fp
0cf44     30 4E 85 F1 | 	sub	fp, #48
0cf48     A7 14 02 FB | 	rdlong	arg02, fp
0cf4c     01 16 06 F6 | 	mov	arg03, #1
0cf50     00 18 06 F6 | 	mov	arg04, #0
0cf54     0B 00 00 FF 
0cf58     C0 E4 05 F1 | 	add	objptr, ##5824
0cf5c                 | '     return fill(addr, pattern, count, listPtr, 4)
0cf5c     04 1A 06 F6 | 	mov	arg05, #4
0cf60     94 B2 B0 FD | 	call	#_psram_spin2_fill
0cf64     0B 00 00 FF 
0cf68     C0 E4 85 F1 | 	sub	objptr, ##5824
0cf6c     A4 00 90 FD | 	jmp	#LR__1000
0cf70                 | LR__0996
0cf70     30 4E 05 F1 | 	add	fp, #48
0cf74     A7 12 02 FB | 	rdlong	arg01, fp
0cf78     30 4E 85 F1 | 	sub	fp, #48
0cf7c     A7 14 02 FB | 	rdlong	arg02, fp
0cf80     01 16 06 F6 | 	mov	arg03, #1
0cf84     00 18 06 F6 | 	mov	arg04, #0
0cf88     0B 00 00 FF 
0cf8c     C0 E4 05 F1 | 	add	objptr, ##5824
0cf90                 | '     return fill(addr, pattern, count, listPtr, 4)
0cf90     04 1A 06 F6 | 	mov	arg05, #4
0cf94     60 B2 B0 FD | 	call	#_psram_spin2_fill
0cf98     0B 00 00 FF 
0cf9c     C0 E4 85 F1 | 	sub	objptr, ##5824
0cfa0     70 00 90 FD | 	jmp	#LR__1000
0cfa4                 | LR__0997
0cfa4     30 4E 05 F1 | 	add	fp, #48
0cfa8     A7 12 02 FB | 	rdlong	arg01, fp
0cfac     30 4E 85 F1 | 	sub	fp, #48
0cfb0     A7 14 02 FB | 	rdlong	arg02, fp
0cfb4     01 16 06 F6 | 	mov	arg03, #1
0cfb8     00 18 06 F6 | 	mov	arg04, #0
0cfbc     0B 00 00 FF 
0cfc0     C0 E4 05 F1 | 	add	objptr, ##5824
0cfc4                 | '     return fill(addr, pattern, count, listPtr, 4)
0cfc4     04 1A 06 F6 | 	mov	arg05, #4
0cfc8     2C B2 B0 FD | 	call	#_psram_spin2_fill
0cfcc     0B 00 00 FF 
0cfd0     C0 E4 85 F1 | 	sub	objptr, ##5824
0cfd4     3C 00 90 FD | 	jmp	#LR__1000
0cfd8                 | LR__0998
0cfd8     30 4E 05 F1 | 	add	fp, #48
0cfdc     A7 12 02 FB | 	rdlong	arg01, fp
0cfe0     30 4E 85 F1 | 	sub	fp, #48
0cfe4     A7 14 02 FB | 	rdlong	arg02, fp
0cfe8     01 16 06 F6 | 	mov	arg03, #1
0cfec     00 18 06 F6 | 	mov	arg04, #0
0cff0     0B 00 00 FF 
0cff4     C0 E4 05 F1 | 	add	objptr, ##5824
0cff8                 | '     return fill(addr, pattern, count, listPtr, 4)
0cff8     04 1A 06 F6 | 	mov	arg05, #4
0cffc     F8 B1 B0 FD | 	call	#_psram_spin2_fill
0d000     0B 00 00 FF 
0d004     C0 E4 85 F1 | 	sub	objptr, ##5824
0d008     08 00 90 FD | 	jmp	#LR__1000
0d00c                 | LR__0999
0d00c     2F 12 06 F6 | 	mov	arg01, #47
0d010     78 86 B0 FD | 	call	#_printerror
0d014                 | LR__1000
0d014                 | LR__1001
0d014     A7 F0 03 F6 | 	mov	ptra, fp
0d018     B2 00 A0 FD | 	call	#popregs_
0d01c                 | _do_assign_ret
0d01c     2D 00 64 FD | 	ret
0d020                 | 
0d020                 | ' 
0d020                 | ' 
0d020                 | ' ' --------------------- Read a variable and push to the stack
0d020                 | ' 
0d020                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0d020                 | ' 
0d020                 | ' sub do_getvar
0d020                 | _do_getvar
0d020     04 4A 05 F6 | 	mov	COUNT_, #4
0d024     A8 00 A0 FD | 	call	#pushregs_
0d028     3C F0 07 F1 | 	add	ptra, #60
0d02c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0d02c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0d02c     69 00 00 FF 
0d030     54 E4 05 F1 | 	add	objptr, ##53844
0d034     F2 1E 02 FB | 	rdlong	local01, objptr
0d038     0F 17 02 F6 | 	mov	arg03, local01
0d03c     01 16 66 F0 | 	shl	arg03, #1
0d040     0F 17 02 F1 | 	add	arg03, local01
0d044     02 16 66 F0 | 	shl	arg03, #2
0d048     03 00 00 FF 
0d04c     04 E4 85 F1 | 	sub	objptr, ##1540
0d050     F2 16 02 F1 | 	add	arg03, objptr
0d054     04 16 06 F1 | 	add	arg03, #4
0d058     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0d05c     66 00 00 FF 
0d060     50 E4 85 F1 | 	sub	objptr, ##52304
0d064     C4 00 90 5D |  if_ne	jmp	#LR__1011
0d068     69 00 00 FF 
0d06c     54 E4 05 F1 | 	add	objptr, ##53844
0d070     F2 1E 02 FB | 	rdlong	local01, objptr
0d074     0F 13 02 F6 | 	mov	arg01, local01
0d078     01 12 66 F0 | 	shl	arg01, #1
0d07c     0F 13 02 F1 | 	add	arg01, local01
0d080     02 12 66 F0 | 	shl	arg01, #2
0d084     03 00 00 FF 
0d088     04 E4 85 F1 | 	sub	objptr, ##1540
0d08c     F2 12 02 F1 | 	add	arg01, objptr
0d090     09 1F 02 FB | 	rdlong	local01, arg01
0d094     04 1E 66 F0 | 	shl	local01, #4
0d098     32 00 00 FF 
0d09c     74 E4 85 F1 | 	sub	objptr, ##25716
0d0a0     F2 1E 02 F1 | 	add	local01, objptr
0d0a4     04 1E 06 F1 | 	add	local01, #4
0d0a8     0F 13 02 FB | 	rdlong	arg01, local01
0d0ac     04 1E 06 F1 | 	add	local01, #4
0d0b0     0F 1F 02 FB | 	rdlong	local01, local01
0d0b4     A7 12 62 FC | 	wrlong	arg01, fp
0d0b8     04 4E 05 F1 | 	add	fp, #4
0d0bc     A7 1E 62 FC | 	wrlong	local01, fp
0d0c0     35 00 00 FF 
0d0c4     78 E4 05 F1 | 	add	objptr, ##27256
0d0c8     F2 1E 02 FB | 	rdlong	local01, objptr
0d0cc     0F 13 02 F6 | 	mov	arg01, local01
0d0d0     01 12 66 F0 | 	shl	arg01, #1
0d0d4     0F 13 02 F1 | 	add	arg01, local01
0d0d8     02 12 66 F0 | 	shl	arg01, #2
0d0dc     03 00 00 FF 
0d0e0     04 E4 85 F1 | 	sub	objptr, ##1540
0d0e4     F2 12 02 F1 | 	add	arg01, objptr
0d0e8     09 1F 02 FB | 	rdlong	local01, arg01
0d0ec     04 1E 66 F0 | 	shl	local01, #4
0d0f0     32 00 00 FF 
0d0f4     74 E4 85 F1 | 	sub	objptr, ##25716
0d0f8     F2 1E 02 F1 | 	add	local01, objptr
0d0fc     0C 1E 06 F1 | 	add	local01, #12
0d100     0F 1F 02 FB | 	rdlong	local01, local01
0d104     04 4E 05 F1 | 	add	fp, #4
0d108     A7 1E 62 FC | 	wrlong	local01, fp
0d10c                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0d10c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0d10c                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0d10c     08 4E 85 F1 | 	sub	fp, #8
0d110     00 1F 16 F2 | 	cmp	local01, #256 wc
0d114     33 00 00 FF 
0d118     DC E5 85 F1 | 	sub	objptr, ##26588
0d11c     0C 00 90 3D |  if_ae	jmp	#LR__1010
0d120     A7 12 02 F6 | 	mov	arg01, fp
0d124     28 C7 BF FD | 	call	#_push
0d128     A0 04 90 FD | 	jmp	#LR__1032
0d12c                 | LR__1010
0d12c                 | LR__1011
0d12c     69 00 00 FF 
0d130     54 E4 05 F1 | 	add	objptr, ##53844
0d134     F2 16 02 FB | 	rdlong	arg03, objptr
0d138     0B 15 02 F6 | 	mov	arg02, arg03
0d13c     01 14 66 F0 | 	shl	arg02, #1
0d140     0B 15 02 F1 | 	add	arg02, arg03
0d144     02 14 66 F0 | 	shl	arg02, #2
0d148     03 00 00 FF 
0d14c     04 E4 85 F1 | 	sub	objptr, ##1540
0d150     F2 14 02 F1 | 	add	arg02, objptr
0d154     0A 17 02 FB | 	rdlong	arg03, arg02
0d158     04 16 66 F0 | 	shl	arg03, #4
0d15c     32 00 00 FF 
0d160     74 E4 85 F1 | 	sub	objptr, ##25716
0d164     F2 16 02 F1 | 	add	arg03, objptr
0d168     04 16 06 F1 | 	add	arg03, #4
0d16c     0B 13 02 FB | 	rdlong	arg01, arg03
0d170     0C 4E 05 F1 | 	add	fp, #12
0d174     A7 12 62 FC | 	wrlong	arg01, fp
0d178     0C 4E 85 F1 | 	sub	fp, #12
0d17c     33 00 00 FF 
0d180     DC E5 85 F1 | 	sub	objptr, ##26588
0d184     C0 86 B0 FD | 	call	#_pslpeek
0d188     FD FA 31 F9 | 	getword	result1, result1, #0
0d18c     10 4E 05 F1 | 	add	fp, #16
0d190     A7 FA 61 FC | 	wrlong	result1, fp
0d194     69 00 00 FF 
0d198     54 E4 05 F1 | 	add	objptr, ##53844
0d19c     F2 16 02 FB | 	rdlong	arg03, objptr
0d1a0     0B 15 02 F6 | 	mov	arg02, arg03
0d1a4     01 14 66 F0 | 	shl	arg02, #1
0d1a8     0B 15 02 F1 | 	add	arg02, arg03
0d1ac     02 14 66 F0 | 	shl	arg02, #2
0d1b0     03 00 00 FF 
0d1b4     04 E4 85 F1 | 	sub	objptr, ##1540
0d1b8     F2 14 02 F1 | 	add	arg02, objptr
0d1bc     04 14 06 F1 | 	add	arg02, #4
0d1c0     0A 17 02 FB | 	rdlong	arg03, arg02
0d1c4     04 4E 05 F1 | 	add	fp, #4
0d1c8     A7 16 62 FC | 	wrlong	arg03, fp
0d1cc     08 4E 85 F1 | 	sub	fp, #8
0d1d0     A7 12 02 FB | 	rdlong	arg01, fp
0d1d4     0C 4E 85 F1 | 	sub	fp, #12
0d1d8     02 12 06 F1 | 	add	arg01, #2
0d1dc     66 00 00 FF 
0d1e0     50 E4 85 F1 | 	sub	objptr, ##52304
0d1e4     08 86 B0 FD | 	call	#_pspeek
0d1e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d1ec     18 4E 05 F1 | 	add	fp, #24
0d1f0     A7 FA 61 FC | 	wrlong	result1, fp
0d1f4     0C 4E 85 F1 | 	sub	fp, #12
0d1f8     A7 12 02 FB | 	rdlong	arg01, fp
0d1fc     0C 4E 85 F1 | 	sub	fp, #12
0d200     04 12 06 F1 | 	add	arg01, #4
0d204     40 86 B0 FD | 	call	#_pslpeek
0d208     1C 4E 05 F1 | 	add	fp, #28
0d20c     A7 FA 61 FC | 	wrlong	result1, fp
0d210     10 4E 85 F1 | 	sub	fp, #16
0d214     A7 12 02 FB | 	rdlong	arg01, fp
0d218     0C 4E 85 F1 | 	sub	fp, #12
0d21c     08 12 06 F1 | 	add	arg01, #8
0d220     24 86 B0 FD | 	call	#_pslpeek
0d224     20 4E 05 F1 | 	add	fp, #32
0d228     A7 FA 61 FC | 	wrlong	result1, fp
0d22c     14 4E 85 F1 | 	sub	fp, #20
0d230     A7 12 02 FB | 	rdlong	arg01, fp
0d234     0C 4E 85 F1 | 	sub	fp, #12
0d238     0C 12 06 F1 | 	add	arg01, #12
0d23c     08 86 B0 FD | 	call	#_pslpeek
0d240     24 4E 05 F1 | 	add	fp, #36
0d244     A7 FA 61 FC | 	wrlong	result1, fp
0d248                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0d248                 | ' esize=pspeek(arrptr+2)
0d248                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0d248                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0d248                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0d248                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0d248     10 4E 85 F1 | 	sub	fp, #16
0d24c     A7 16 02 FB | 	rdlong	arg03, fp
0d250     14 4E 85 F1 | 	sub	fp, #20
0d254     03 16 16 F2 | 	cmp	arg03, #3 wc
0d258     38 00 90 CD |  if_b	jmp	#LR__1012
0d25c     58 C5 BF FD | 	call	#_pop
0d260     FF 16 02 F6 | 	mov	arg03, result3
0d264     A7 FA 61 FC | 	wrlong	result1, fp
0d268     04 4E 05 F1 | 	add	fp, #4
0d26c     A7 FC 61 FC | 	wrlong	result2, fp
0d270     04 4E 05 F1 | 	add	fp, #4
0d274     A7 16 62 FC | 	wrlong	arg03, fp
0d278     08 4E 85 F1 | 	sub	fp, #8
0d27c     A7 12 02 F6 | 	mov	arg01, fp
0d280     18 3A B0 FD | 	call	#_converttoint
0d284     30 4E 05 F1 | 	add	fp, #48
0d288     A7 FA 61 FC | 	wrlong	result1, fp
0d28c     30 4E 85 F1 | 	sub	fp, #48
0d290     0C 00 90 FD | 	jmp	#LR__1013
0d294                 | LR__1012
0d294     30 4E 05 F1 | 	add	fp, #48
0d298     A7 00 68 FC | 	wrlong	#0, fp
0d29c     30 4E 85 F1 | 	sub	fp, #48
0d2a0                 | LR__1013
0d2a0                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0d2a0     14 4E 05 F1 | 	add	fp, #20
0d2a4     A7 16 02 FB | 	rdlong	arg03, fp
0d2a8     14 4E 85 F1 | 	sub	fp, #20
0d2ac     02 16 16 F2 | 	cmp	arg03, #2 wc
0d2b0     38 00 90 CD |  if_b	jmp	#LR__1014
0d2b4     00 C5 BF FD | 	call	#_pop
0d2b8     FF 16 02 F6 | 	mov	arg03, result3
0d2bc     A7 FA 61 FC | 	wrlong	result1, fp
0d2c0     04 4E 05 F1 | 	add	fp, #4
0d2c4     A7 FC 61 FC | 	wrlong	result2, fp
0d2c8     04 4E 05 F1 | 	add	fp, #4
0d2cc     A7 16 62 FC | 	wrlong	arg03, fp
0d2d0     08 4E 85 F1 | 	sub	fp, #8
0d2d4     A7 12 02 F6 | 	mov	arg01, fp
0d2d8     C0 39 B0 FD | 	call	#_converttoint
0d2dc     2C 4E 05 F1 | 	add	fp, #44
0d2e0     A7 FA 61 FC | 	wrlong	result1, fp
0d2e4     2C 4E 85 F1 | 	sub	fp, #44
0d2e8     0C 00 90 FD | 	jmp	#LR__1015
0d2ec                 | LR__1014
0d2ec     2C 4E 05 F1 | 	add	fp, #44
0d2f0     A7 00 68 FC | 	wrlong	#0, fp
0d2f4     2C 4E 85 F1 | 	sub	fp, #44
0d2f8                 | LR__1015
0d2f8                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0d2f8     14 4E 05 F1 | 	add	fp, #20
0d2fc     A7 16 02 FB | 	rdlong	arg03, fp
0d300     14 4E 85 F1 | 	sub	fp, #20
0d304     01 16 16 F2 | 	cmp	arg03, #1 wc
0d308     38 00 90 CD |  if_b	jmp	#LR__1016
0d30c     A8 C4 BF FD | 	call	#_pop
0d310     FF 16 02 F6 | 	mov	arg03, result3
0d314     A7 FA 61 FC | 	wrlong	result1, fp
0d318     04 4E 05 F1 | 	add	fp, #4
0d31c     A7 FC 61 FC | 	wrlong	result2, fp
0d320     04 4E 05 F1 | 	add	fp, #4
0d324     A7 16 62 FC | 	wrlong	arg03, fp
0d328     08 4E 85 F1 | 	sub	fp, #8
0d32c     A7 12 02 F6 | 	mov	arg01, fp
0d330     68 39 B0 FD | 	call	#_converttoint
0d334     28 4E 05 F1 | 	add	fp, #40
0d338     A7 FA 61 FC | 	wrlong	result1, fp
0d33c     28 4E 85 F1 | 	sub	fp, #40
0d340     0C 00 90 FD | 	jmp	#LR__1017
0d344                 | LR__1016
0d344     28 4E 05 F1 | 	add	fp, #40
0d348     A7 00 68 FC | 	wrlong	#0, fp
0d34c     28 4E 85 F1 | 	sub	fp, #40
0d350                 | LR__1017
0d350     0C 4E 05 F1 | 	add	fp, #12
0d354     A7 20 02 FB | 	rdlong	local02, fp
0d358     1C 4E 05 F1 | 	add	fp, #28
0d35c     A7 22 02 FB | 	rdlong	local03, fp
0d360     04 4E 05 F1 | 	add	fp, #4
0d364     A7 FC 01 FB | 	rdlong	result2, fp
0d368     10 4E 85 F1 | 	sub	fp, #16
0d36c     A7 FE 01 FB | 	rdlong	result3, fp
0d370     FF FC 01 FD | 	qmul	result2, result3
0d374     10 20 06 F1 | 	add	local02, #16
0d378     14 4E 05 F1 | 	add	fp, #20
0d37c     A7 FC 01 FB | 	rdlong	result2, fp
0d380     18 FA 61 FD | 	getqx	result1
0d384     FF FC 01 FD | 	qmul	result2, result3
0d388     FD 22 02 F1 | 	add	local03, result1
0d38c     10 4E 85 F1 | 	sub	fp, #16
0d390     A7 FE 01 FB | 	rdlong	result3, fp
0d394     18 FC 61 FD | 	getqx	result2
0d398     FF FC 01 FD | 	qmul	result2, result3
0d39c     08 4E 85 F1 | 	sub	fp, #8
0d3a0     A7 FE 01 FB | 	rdlong	result3, fp
0d3a4     18 FC 61 FD | 	getqx	result2
0d3a8     FE 22 02 F1 | 	add	local03, result2
0d3ac     FF 22 02 FD | 	qmul	local03, result3
0d3b0     1C 4E 05 F1 | 	add	fp, #28
0d3b4                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0d3b4                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0d3b4                 | ' 
0d3b4                 | ' select case vartype
0d3b4     18 FC 61 FD | 	getqx	result2
0d3b8     FE 20 02 F1 | 	add	local02, result2
0d3bc     A7 20 62 FC | 	wrlong	local02, fp
0d3c0     24 4E 85 F1 | 	sub	fp, #36
0d3c4     A7 24 02 FB | 	rdlong	local04, fp
0d3c8     10 4E 85 F1 | 	sub	fp, #16
0d3cc     00 25 86 F1 | 	sub	local04, #256
0d3d0     0C 24 26 F3 | 	fle	local04, #12
0d3d4     30 24 62 FD | 	jmprel	local04
0d3d8                 | LR__1018
0d3d8     30 00 90 FD | 	jmp	#LR__1019
0d3dc     58 00 90 FD | 	jmp	#LR__1020
0d3e0     8C 00 90 FD | 	jmp	#LR__1021
0d3e4     AC 00 90 FD | 	jmp	#LR__1022
0d3e8     E8 00 90 FD | 	jmp	#LR__1023
0d3ec     08 01 90 FD | 	jmp	#LR__1024
0d3f0     24 01 90 FD | 	jmp	#LR__1025
0d3f4     40 01 90 FD | 	jmp	#LR__1026
0d3f8     50 01 90 FD | 	jmp	#LR__1027
0d3fc     60 01 90 FD | 	jmp	#LR__1028
0d400     7C 01 90 FD | 	jmp	#LR__1029
0d404     8C 01 90 FD | 	jmp	#LR__1030
0d408     B8 01 90 FD | 	jmp	#LR__1031
0d40c                 | LR__1019
0d40c     A7 12 02 F6 | 	mov	arg01, fp
0d410     34 4E 05 F1 | 	add	fp, #52
0d414     A7 14 02 FB | 	rdlong	arg02, fp
0d418     34 4E 85 F1 | 	sub	fp, #52
0d41c     0C 16 06 F6 | 	mov	arg03, #12
0d420     0B 00 00 FF 
0d424     C0 E4 05 F1 | 	add	objptr, ##5824
0d428     94 AC B0 FD | 	call	#_psram_spin2_read1
0d42c     0B 00 00 FF 
0d430     C0 E4 85 F1 | 	sub	objptr, ##5824
0d434     8C 01 90 FD | 	jmp	#LR__1031
0d438                 | LR__1020
0d438     08 4E 05 F1 | 	add	fp, #8
0d43c     A7 38 68 FC | 	wrlong	#28, fp
0d440     2C 4E 05 F1 | 	add	fp, #44
0d444     A7 12 02 FB | 	rdlong	arg01, fp
0d448     34 4E 85 F1 | 	sub	fp, #52
0d44c     A0 83 B0 FD | 	call	#_pspeek
0d450     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d454     A7 FA 61 FC | 	wrlong	result1, fp
0d458     80 FA 15 F2 | 	cmp	result1, #128 wc
0d45c     00 1F 66 36 |  if_ae	neg	local01, #256
0d460     A7 22 02 3B |  if_ae	rdlong	local03, fp
0d464     11 1F 42 35 |  if_ae	or	local01, local03
0d468     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0d46c     54 01 90 FD | 	jmp	#LR__1031
0d470                 | LR__1021
0d470     08 4E 05 F1 | 	add	fp, #8
0d474     A7 3A 68 FC | 	wrlong	#29, fp
0d478     2C 4E 05 F1 | 	add	fp, #44
0d47c     A7 12 02 FB | 	rdlong	arg01, fp
0d480     34 4E 85 F1 | 	sub	fp, #52
0d484     68 83 B0 FD | 	call	#_pspeek
0d488     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d48c     A7 FA 61 FC | 	wrlong	result1, fp
0d490     30 01 90 FD | 	jmp	#LR__1031
0d494                 | LR__1022
0d494     08 4E 05 F1 | 	add	fp, #8
0d498     A7 38 68 FC | 	wrlong	#28, fp
0d49c     2C 4E 05 F1 | 	add	fp, #44
0d4a0     A7 12 02 FB | 	rdlong	arg01, fp
0d4a4     34 4E 85 F1 | 	sub	fp, #52
0d4a8     9C 83 B0 FD | 	call	#_pslpeek
0d4ac     FD FA 31 F9 | 	getword	result1, result1, #0
0d4b0     A7 FA 61 FC | 	wrlong	result1, fp
0d4b4     40 00 00 FF 
0d4b8     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0d4bc     FF 7F 00 3F 
0d4c0     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0d4c4     A7 22 02 3B |  if_ae	rdlong	local03, fp
0d4c8     11 1F 42 35 |  if_ae	or	local01, local03
0d4cc     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0d4d0     F0 00 90 FD | 	jmp	#LR__1031
0d4d4                 | LR__1023
0d4d4     08 4E 05 F1 | 	add	fp, #8
0d4d8     A7 3A 68 FC | 	wrlong	#29, fp
0d4dc     2C 4E 05 F1 | 	add	fp, #44
0d4e0     A7 12 02 FB | 	rdlong	arg01, fp
0d4e4     34 4E 85 F1 | 	sub	fp, #52
0d4e8     5C 83 B0 FD | 	call	#_pslpeek
0d4ec     FD FA 31 F9 | 	getword	result1, result1, #0
0d4f0     A7 FA 61 FC | 	wrlong	result1, fp
0d4f4     CC 00 90 FD | 	jmp	#LR__1031
0d4f8                 | LR__1024
0d4f8     08 4E 05 F1 | 	add	fp, #8
0d4fc     A7 38 68 FC | 	wrlong	#28, fp
0d500     2C 4E 05 F1 | 	add	fp, #44
0d504     A7 12 02 FB | 	rdlong	arg01, fp
0d508     34 4E 85 F1 | 	sub	fp, #52
0d50c     38 83 B0 FD | 	call	#_pslpeek
0d510     A7 FA 61 FC | 	wrlong	result1, fp
0d514     AC 00 90 FD | 	jmp	#LR__1031
0d518                 | LR__1025
0d518     08 4E 05 F1 | 	add	fp, #8
0d51c     A7 3A 68 FC | 	wrlong	#29, fp
0d520     2C 4E 05 F1 | 	add	fp, #44
0d524     A7 12 02 FB | 	rdlong	arg01, fp
0d528     34 4E 85 F1 | 	sub	fp, #52
0d52c     18 83 B0 FD | 	call	#_pslpeek
0d530     A7 FA 61 FC | 	wrlong	result1, fp
0d534     8C 00 90 FD | 	jmp	#LR__1031
0d538                 | LR__1026
0d538     08 4E 05 F1 | 	add	fp, #8
0d53c     A7 FE 69 FC | 	wrlong	#255, fp
0d540     08 4E 85 F1 | 	sub	fp, #8
0d544     A7 60 68 FC | 	wrlong	#48, fp
0d548     78 00 90 FD | 	jmp	#LR__1031
0d54c                 | LR__1027
0d54c     08 4E 05 F1 | 	add	fp, #8
0d550     A7 FE 69 FC | 	wrlong	#255, fp
0d554     08 4E 85 F1 | 	sub	fp, #8
0d558     A7 60 68 FC | 	wrlong	#48, fp
0d55c     64 00 90 FD | 	jmp	#LR__1031
0d560                 | LR__1028
0d560     08 4E 05 F1 | 	add	fp, #8
0d564     A7 3C 68 FC | 	wrlong	#30, fp
0d568     2C 4E 05 F1 | 	add	fp, #44
0d56c     A7 12 02 FB | 	rdlong	arg01, fp
0d570     34 4E 85 F1 | 	sub	fp, #52
0d574     D0 82 B0 FD | 	call	#_pslpeek
0d578     A7 FA 61 FC | 	wrlong	result1, fp
0d57c     44 00 90 FD | 	jmp	#LR__1031
0d580                 | LR__1029
0d580     08 4E 05 F1 | 	add	fp, #8
0d584     A7 FE 69 FC | 	wrlong	#255, fp
0d588     08 4E 85 F1 | 	sub	fp, #8
0d58c     A7 60 68 FC | 	wrlong	#48, fp
0d590     30 00 90 FD | 	jmp	#LR__1031
0d594                 | LR__1030
0d594     08 4E 05 F1 | 	add	fp, #8
0d598     A7 3E 68 FC | 	wrlong	#31, fp
0d59c     2C 4E 05 F1 | 	add	fp, #44
0d5a0     A7 12 02 FB | 	rdlong	arg01, fp
0d5a4     34 4E 85 F1 | 	sub	fp, #52
0d5a8     9C 82 B0 FD | 	call	#_pslpeek
0d5ac     A7 FA 61 FC | 	wrlong	result1, fp
0d5b0     00 04 00 FF 
0d5b4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0d5b8     08 4E 05 31 |  if_ae	add	fp, #8
0d5bc     A7 56 68 3C |  if_ae	wrlong	#43, fp
0d5c0     08 4E 85 31 |  if_ae	sub	fp, #8
0d5c4                 | LR__1031
0d5c4     A7 12 02 F6 | 	mov	arg01, fp
0d5c8     84 C2 BF FD | 	call	#_push
0d5cc                 | LR__1032
0d5cc     A7 F0 03 F6 | 	mov	ptra, fp
0d5d0     B2 00 A0 FD | 	call	#popregs_
0d5d4                 | _do_getvar_ret
0d5d4     2D 00 64 FD | 	ret
0d5d8                 | 
0d5d8                 | ' 
0d5d8                 | ' '------------------------ Operators 
0d5d8                 | ' 
0d5d8                 | ' sub do_plus 
0d5d8                 | _do_plus
0d5d8     05 4A 05 F6 | 	mov	COUNT_, #5
0d5dc     A8 00 A0 FD | 	call	#pushregs_
0d5e0     18 F0 07 F1 | 	add	ptra, #24
0d5e4     D0 C1 BF FD | 	call	#_pop
0d5e8     FD 1E 02 F6 | 	mov	local01, result1
0d5ec     FE 20 02 F6 | 	mov	local02, result2
0d5f0     FF 22 02 F6 | 	mov	local03, result3
0d5f4     0C 4E 05 F1 | 	add	fp, #12
0d5f8     A7 1E 62 FC | 	wrlong	local01, fp
0d5fc     04 4E 05 F1 | 	add	fp, #4
0d600     A7 20 62 FC | 	wrlong	local02, fp
0d604     04 4E 05 F1 | 	add	fp, #4
0d608     A7 22 62 FC | 	wrlong	local03, fp
0d60c     14 4E 85 F1 | 	sub	fp, #20
0d610     A4 C1 BF FD | 	call	#_pop
0d614     FF 22 02 F6 | 	mov	local03, result3
0d618     A7 FA 61 FC | 	wrlong	result1, fp
0d61c     04 4E 05 F1 | 	add	fp, #4
0d620     A7 FC 61 FC | 	wrlong	result2, fp
0d624     04 4E 05 F1 | 	add	fp, #4
0d628     A7 22 62 FC | 	wrlong	local03, fp
0d62c                 | ' 
0d62c                 | ' t2=pop()
0d62c                 | ' t1=pop()
0d62c                 | ' 
0d62c                 | ' 
0d62c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0d62c     08 4E 85 F1 | 	sub	fp, #8
0d630     1D 22 0E F2 | 	cmp	local03, #29 wz
0d634     14 4E 05 A1 |  if_e	add	fp, #20
0d638     A7 24 02 AB |  if_e	rdlong	local04, fp
0d63c     14 4E 85 A1 |  if_e	sub	fp, #20
0d640     12 23 02 A6 |  if_e	mov	local03, local04
0d644     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d648     1C 00 90 5D |  if_ne	jmp	#LR__1040
0d64c     A7 1E 02 FB | 	rdlong	local01, fp
0d650     0C 4E 05 F1 | 	add	fp, #12
0d654     A7 20 02 FB | 	rdlong	local02, fp
0d658     0C 4E 85 F1 | 	sub	fp, #12
0d65c     10 1F 02 F1 | 	add	local01, local02
0d660     A7 1E 62 FC | 	wrlong	local01, fp
0d664     48 04 90 FD | 	jmp	#LR__1055
0d668                 | LR__1040
0d668                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0d668     08 4E 05 F1 | 	add	fp, #8
0d66c     A7 1E 02 FB | 	rdlong	local01, fp
0d670     08 4E 85 F1 | 	sub	fp, #8
0d674     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d678     14 4E 05 A1 |  if_e	add	fp, #20
0d67c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d680     14 4E 85 A1 |  if_e	sub	fp, #20
0d684     12 23 02 A6 |  if_e	mov	local03, local04
0d688     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d68c     28 00 90 5D |  if_ne	jmp	#LR__1041
0d690     A7 1E 02 FB | 	rdlong	local01, fp
0d694     0C 4E 05 F1 | 	add	fp, #12
0d698     A7 20 02 FB | 	rdlong	local02, fp
0d69c     0C 4E 85 F1 | 	sub	fp, #12
0d6a0     10 1F 02 F1 | 	add	local01, local02
0d6a4     A7 1E 62 FC | 	wrlong	local01, fp
0d6a8     08 4E 05 F1 | 	add	fp, #8
0d6ac     A7 38 68 FC | 	wrlong	#28, fp
0d6b0     08 4E 85 F1 | 	sub	fp, #8
0d6b4     F8 03 90 FD | 	jmp	#LR__1055
0d6b8                 | LR__1041
0d6b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0d6b8     08 4E 05 F1 | 	add	fp, #8
0d6bc     A7 1E 02 FB | 	rdlong	local01, fp
0d6c0     08 4E 85 F1 | 	sub	fp, #8
0d6c4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d6c8     14 4E 05 A1 |  if_e	add	fp, #20
0d6cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0d6d0     14 4E 85 A1 |  if_e	sub	fp, #20
0d6d4     12 23 02 A6 |  if_e	mov	local03, local04
0d6d8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d6dc     30 00 90 5D |  if_ne	jmp	#LR__1042
0d6e0     A7 12 02 FB | 	rdlong	arg01, fp
0d6e4     B0 DB B0 FD | 	call	#__system___float_fromuns
0d6e8     FD 12 02 F6 | 	mov	arg01, result1
0d6ec     0C 4E 05 F1 | 	add	fp, #12
0d6f0     A7 14 02 FB | 	rdlong	arg02, fp
0d6f4     0C 4E 85 F1 | 	sub	fp, #12
0d6f8     D0 DB B0 FD | 	call	#__system___float_add
0d6fc     A7 FA 61 FC | 	wrlong	result1, fp
0d700     08 4E 05 F1 | 	add	fp, #8
0d704     A7 3C 68 FC | 	wrlong	#30, fp
0d708     08 4E 85 F1 | 	sub	fp, #8
0d70c     A0 03 90 FD | 	jmp	#LR__1055
0d710                 | LR__1042
0d710                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0d710     08 4E 05 F1 | 	add	fp, #8
0d714     A7 1E 02 FB | 	rdlong	local01, fp
0d718     08 4E 85 F1 | 	sub	fp, #8
0d71c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d720     14 4E 05 A1 |  if_e	add	fp, #20
0d724     A7 24 02 AB |  if_e	rdlong	local04, fp
0d728     14 4E 85 A1 |  if_e	sub	fp, #20
0d72c     12 23 02 A6 |  if_e	mov	local03, local04
0d730     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d734     1C 00 90 5D |  if_ne	jmp	#LR__1043
0d738     A7 1E 02 FB | 	rdlong	local01, fp
0d73c     0C 4E 05 F1 | 	add	fp, #12
0d740     A7 20 02 FB | 	rdlong	local02, fp
0d744     0C 4E 85 F1 | 	sub	fp, #12
0d748     10 1F 02 F1 | 	add	local01, local02
0d74c     A7 1E 62 FC | 	wrlong	local01, fp
0d750     5C 03 90 FD | 	jmp	#LR__1055
0d754                 | LR__1043
0d754                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0d754     08 4E 05 F1 | 	add	fp, #8
0d758     A7 1E 02 FB | 	rdlong	local01, fp
0d75c     08 4E 85 F1 | 	sub	fp, #8
0d760     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d764     14 4E 05 A1 |  if_e	add	fp, #20
0d768     A7 24 02 AB |  if_e	rdlong	local04, fp
0d76c     14 4E 85 A1 |  if_e	sub	fp, #20
0d770     12 23 02 A6 |  if_e	mov	local03, local04
0d774     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d778     1C 00 90 5D |  if_ne	jmp	#LR__1044
0d77c     A7 1E 02 FB | 	rdlong	local01, fp
0d780     0C 4E 05 F1 | 	add	fp, #12
0d784     A7 20 02 FB | 	rdlong	local02, fp
0d788     0C 4E 85 F1 | 	sub	fp, #12
0d78c     10 1F 02 F1 | 	add	local01, local02
0d790     A7 1E 62 FC | 	wrlong	local01, fp
0d794     18 03 90 FD | 	jmp	#LR__1055
0d798                 | LR__1044
0d798                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0d798     08 4E 05 F1 | 	add	fp, #8
0d79c     A7 1E 02 FB | 	rdlong	local01, fp
0d7a0     08 4E 85 F1 | 	sub	fp, #8
0d7a4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d7a8     14 4E 05 A1 |  if_e	add	fp, #20
0d7ac     A7 24 02 AB |  if_e	rdlong	local04, fp
0d7b0     14 4E 85 A1 |  if_e	sub	fp, #20
0d7b4     12 23 02 A6 |  if_e	mov	local03, local04
0d7b8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d7bc     40 00 90 5D |  if_ne	jmp	#LR__1045
0d7c0     A7 12 02 FB | 	rdlong	arg01, fp
0d7c4     09 13 52 F6 | 	abs	arg01, arg01 wc
0d7c8     1F 26 C6 C9 |  if_b	decod	local05, #31
0d7cc     00 26 06 36 |  if_ae	mov	local05, #0
0d7d0     C4 DA B0 FD | 	call	#__system___float_fromuns
0d7d4     13 FB 61 F5 | 	xor	result1, local05
0d7d8     FD 12 02 F6 | 	mov	arg01, result1
0d7dc     0C 4E 05 F1 | 	add	fp, #12
0d7e0     A7 14 02 FB | 	rdlong	arg02, fp
0d7e4     0C 4E 85 F1 | 	sub	fp, #12
0d7e8     E0 DA B0 FD | 	call	#__system___float_add
0d7ec     A7 FA 61 FC | 	wrlong	result1, fp
0d7f0     08 4E 05 F1 | 	add	fp, #8
0d7f4     A7 3C 68 FC | 	wrlong	#30, fp
0d7f8     08 4E 85 F1 | 	sub	fp, #8
0d7fc     B0 02 90 FD | 	jmp	#LR__1055
0d800                 | LR__1045
0d800                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0d800     08 4E 05 F1 | 	add	fp, #8
0d804     A7 1E 02 FB | 	rdlong	local01, fp
0d808     08 4E 85 F1 | 	sub	fp, #8
0d80c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d810     14 4E 05 A1 |  if_e	add	fp, #20
0d814     A7 24 02 AB |  if_e	rdlong	local04, fp
0d818     14 4E 85 A1 |  if_e	sub	fp, #20
0d81c     12 23 02 A6 |  if_e	mov	local03, local04
0d820     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d824     28 00 90 5D |  if_ne	jmp	#LR__1046
0d828     A7 1E 02 FB | 	rdlong	local01, fp
0d82c     0C 4E 05 F1 | 	add	fp, #12
0d830     A7 12 02 FB | 	rdlong	arg01, fp
0d834     0C 4E 85 F1 | 	sub	fp, #12
0d838     5C DA B0 FD | 	call	#__system___float_fromuns
0d83c     FD 14 02 F6 | 	mov	arg02, result1
0d840     0F 13 02 F6 | 	mov	arg01, local01
0d844     84 DA B0 FD | 	call	#__system___float_add
0d848     A7 FA 61 FC | 	wrlong	result1, fp
0d84c     60 02 90 FD | 	jmp	#LR__1055
0d850                 | LR__1046
0d850                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0d850     08 4E 05 F1 | 	add	fp, #8
0d854     A7 1E 02 FB | 	rdlong	local01, fp
0d858     08 4E 85 F1 | 	sub	fp, #8
0d85c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d860     14 4E 05 A1 |  if_e	add	fp, #20
0d864     A7 24 02 AB |  if_e	rdlong	local04, fp
0d868     14 4E 85 A1 |  if_e	sub	fp, #20
0d86c     12 23 02 A6 |  if_e	mov	local03, local04
0d870     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d874     38 00 90 5D |  if_ne	jmp	#LR__1047
0d878     A7 1E 02 FB | 	rdlong	local01, fp
0d87c     0C 4E 05 F1 | 	add	fp, #12
0d880     A7 12 02 FB | 	rdlong	arg01, fp
0d884     0C 4E 85 F1 | 	sub	fp, #12
0d888     09 13 52 F6 | 	abs	arg01, arg01 wc
0d88c     1F 26 C6 C9 |  if_b	decod	local05, #31
0d890     00 26 06 36 |  if_ae	mov	local05, #0
0d894     00 DA B0 FD | 	call	#__system___float_fromuns
0d898     13 FB 61 F5 | 	xor	result1, local05
0d89c     FD 14 02 F6 | 	mov	arg02, result1
0d8a0     0F 13 02 F6 | 	mov	arg01, local01
0d8a4     24 DA B0 FD | 	call	#__system___float_add
0d8a8     A7 FA 61 FC | 	wrlong	result1, fp
0d8ac     00 02 90 FD | 	jmp	#LR__1055
0d8b0                 | LR__1047
0d8b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0d8b0     08 4E 05 F1 | 	add	fp, #8
0d8b4     A7 1E 02 FB | 	rdlong	local01, fp
0d8b8     08 4E 85 F1 | 	sub	fp, #8
0d8bc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d8c0     14 4E 05 A1 |  if_e	add	fp, #20
0d8c4     A7 24 02 AB |  if_e	rdlong	local04, fp
0d8c8     14 4E 85 A1 |  if_e	sub	fp, #20
0d8cc     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0d8d0     1C 00 90 5D |  if_ne	jmp	#LR__1048
0d8d4     A7 12 02 FB | 	rdlong	arg01, fp
0d8d8     0C 4E 05 F1 | 	add	fp, #12
0d8dc     A7 14 02 FB | 	rdlong	arg02, fp
0d8e0     0C 4E 85 F1 | 	sub	fp, #12
0d8e4     E4 D9 B0 FD | 	call	#__system___float_add
0d8e8     A7 FA 61 FC | 	wrlong	result1, fp
0d8ec     C0 01 90 FD | 	jmp	#LR__1055
0d8f0                 | LR__1048
0d8f0                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0d8f0     08 4E 05 F1 | 	add	fp, #8
0d8f4     A7 1E 02 FB | 	rdlong	local01, fp
0d8f8     08 4E 85 F1 | 	sub	fp, #8
0d8fc     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d900     24 00 90 5D |  if_ne	jmp	#LR__1049
0d904     14 4E 05 F1 | 	add	fp, #20
0d908     A7 22 02 FB | 	rdlong	local03, fp
0d90c     14 4E 85 F1 | 	sub	fp, #20
0d910     1F 22 0E F2 | 	cmp	local03, #31 wz
0d914     A7 04 68 5C |  if_ne	wrlong	#2, fp
0d918     08 4E 05 51 |  if_ne	add	fp, #8
0d91c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d920     08 4E 85 51 |  if_ne	sub	fp, #8
0d924     88 01 90 5D |  if_ne	jmp	#LR__1055
0d928                 | LR__1049
0d928                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0d928     14 4E 05 F1 | 	add	fp, #20
0d92c     A7 1E 02 FB | 	rdlong	local01, fp
0d930     14 4E 85 F1 | 	sub	fp, #20
0d934     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d938     24 00 90 5D |  if_ne	jmp	#LR__1050
0d93c     08 4E 05 F1 | 	add	fp, #8
0d940     A7 22 02 FB | 	rdlong	local03, fp
0d944     08 4E 85 F1 | 	sub	fp, #8
0d948     1F 22 0E F2 | 	cmp	local03, #31 wz
0d94c     A7 04 68 5C |  if_ne	wrlong	#2, fp
0d950     08 4E 05 51 |  if_ne	add	fp, #8
0d954     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d958     08 4E 85 51 |  if_ne	sub	fp, #8
0d95c     50 01 90 5D |  if_ne	jmp	#LR__1055
0d960                 | LR__1050
0d960                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0d960     08 4E 05 F1 | 	add	fp, #8
0d964     A7 1E 02 FB | 	rdlong	local01, fp
0d968     08 4E 85 F1 | 	sub	fp, #8
0d96c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d970     14 4E 05 A1 |  if_e	add	fp, #20
0d974     A7 22 02 AB |  if_e	rdlong	local03, fp
0d978     14 4E 85 A1 |  if_e	sub	fp, #20
0d97c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d980     1C 00 90 5D |  if_ne	jmp	#LR__1051
0d984     A7 12 02 FB | 	rdlong	arg01, fp
0d988     0C 4E 05 F1 | 	add	fp, #12
0d98c     A7 14 02 FB | 	rdlong	arg02, fp
0d990     0C 4E 85 F1 | 	sub	fp, #12
0d994     74 B2 B0 FD | 	call	#__system___string_concat
0d998     A7 FA 61 FC | 	wrlong	result1, fp
0d99c     10 01 90 FD | 	jmp	#LR__1055
0d9a0                 | LR__1051
0d9a0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0d9a0     08 4E 05 F1 | 	add	fp, #8
0d9a4     A7 1E 02 FB | 	rdlong	local01, fp
0d9a8     08 4E 85 F1 | 	sub	fp, #8
0d9ac     2B 1E 0E F2 | 	cmp	local01, #43 wz
0d9b0     14 4E 05 A1 |  if_e	add	fp, #20
0d9b4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d9b8     14 4E 85 A1 |  if_e	sub	fp, #20
0d9bc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d9c0     30 00 90 5D |  if_ne	jmp	#LR__1052
0d9c4     A7 12 02 FB | 	rdlong	arg01, fp
0d9c8     28 EF BF FD | 	call	#_convertstring
0d9cc     FD 12 02 F6 | 	mov	arg01, result1
0d9d0     0C 4E 05 F1 | 	add	fp, #12
0d9d4     A7 14 02 FB | 	rdlong	arg02, fp
0d9d8     0C 4E 85 F1 | 	sub	fp, #12
0d9dc     2C B2 B0 FD | 	call	#__system___string_concat
0d9e0     A7 FA 61 FC | 	wrlong	result1, fp
0d9e4     08 4E 05 F1 | 	add	fp, #8
0d9e8     A7 3E 68 FC | 	wrlong	#31, fp
0d9ec     08 4E 85 F1 | 	sub	fp, #8
0d9f0     BC 00 90 FD | 	jmp	#LR__1055
0d9f4                 | LR__1052
0d9f4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0d9f4     08 4E 05 F1 | 	add	fp, #8
0d9f8     A7 1E 02 FB | 	rdlong	local01, fp
0d9fc     08 4E 85 F1 | 	sub	fp, #8
0da00     1F 1E 0E F2 | 	cmp	local01, #31 wz
0da04     14 4E 05 A1 |  if_e	add	fp, #20
0da08     A7 22 02 AB |  if_e	rdlong	local03, fp
0da0c     14 4E 85 A1 |  if_e	sub	fp, #20
0da10     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0da14     28 00 90 5D |  if_ne	jmp	#LR__1053
0da18     A7 1E 02 FB | 	rdlong	local01, fp
0da1c     0C 4E 05 F1 | 	add	fp, #12
0da20     A7 12 02 FB | 	rdlong	arg01, fp
0da24     0C 4E 85 F1 | 	sub	fp, #12
0da28     C8 EE BF FD | 	call	#_convertstring
0da2c     FD 14 02 F6 | 	mov	arg02, result1
0da30     0F 13 02 F6 | 	mov	arg01, local01
0da34     D4 B1 B0 FD | 	call	#__system___string_concat
0da38     A7 FA 61 FC | 	wrlong	result1, fp
0da3c     70 00 90 FD | 	jmp	#LR__1055
0da40                 | LR__1053
0da40                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0da40     08 4E 05 F1 | 	add	fp, #8
0da44     A7 1E 02 FB | 	rdlong	local01, fp
0da48     08 4E 85 F1 | 	sub	fp, #8
0da4c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0da50     14 4E 05 A1 |  if_e	add	fp, #20
0da54     A7 22 02 AB |  if_e	rdlong	local03, fp
0da58     14 4E 85 A1 |  if_e	sub	fp, #20
0da5c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0da60     3C 00 90 5D |  if_ne	jmp	#LR__1054
0da64     A7 12 02 FB | 	rdlong	arg01, fp
0da68     88 EE BF FD | 	call	#_convertstring
0da6c     FD 1E 02 F6 | 	mov	local01, result1
0da70     0C 4E 05 F1 | 	add	fp, #12
0da74     A7 12 02 FB | 	rdlong	arg01, fp
0da78     0C 4E 85 F1 | 	sub	fp, #12
0da7c     74 EE BF FD | 	call	#_convertstring
0da80     FD 14 02 F6 | 	mov	arg02, result1
0da84     0F 13 02 F6 | 	mov	arg01, local01
0da88     80 B1 B0 FD | 	call	#__system___string_concat
0da8c     A7 FA 61 FC | 	wrlong	result1, fp
0da90     08 4E 05 F1 | 	add	fp, #8
0da94     A7 3E 68 FC | 	wrlong	#31, fp
0da98     08 4E 85 F1 | 	sub	fp, #8
0da9c     10 00 90 FD | 	jmp	#LR__1055
0daa0                 | LR__1054
0daa0     A7 08 68 FC | 	wrlong	#4, fp
0daa4     08 4E 05 F1 | 	add	fp, #8
0daa8     A7 FE 69 FC | 	wrlong	#255, fp
0daac     08 4E 85 F1 | 	sub	fp, #8
0dab0                 | LR__1055
0dab0     A7 12 02 F6 | 	mov	arg01, fp
0dab4     98 BD BF FD | 	call	#_push
0dab8     A7 F0 03 F6 | 	mov	ptra, fp
0dabc     B2 00 A0 FD | 	call	#popregs_
0dac0                 | _do_plus_ret
0dac0     2D 00 64 FD | 	ret
0dac4                 | 
0dac4                 | ' 
0dac4                 | ' sub do_minus
0dac4                 | _do_minus
0dac4     05 4A 05 F6 | 	mov	COUNT_, #5
0dac8     A8 00 A0 FD | 	call	#pushregs_
0dacc     18 F0 07 F1 | 	add	ptra, #24
0dad0     E4 BC BF FD | 	call	#_pop
0dad4     FD 1E 02 F6 | 	mov	local01, result1
0dad8     FE 20 02 F6 | 	mov	local02, result2
0dadc     FF 22 02 F6 | 	mov	local03, result3
0dae0     0C 4E 05 F1 | 	add	fp, #12
0dae4     A7 1E 62 FC | 	wrlong	local01, fp
0dae8     04 4E 05 F1 | 	add	fp, #4
0daec     A7 20 62 FC | 	wrlong	local02, fp
0daf0     04 4E 05 F1 | 	add	fp, #4
0daf4     A7 22 62 FC | 	wrlong	local03, fp
0daf8     14 4E 85 F1 | 	sub	fp, #20
0dafc     B8 BC BF FD | 	call	#_pop
0db00     FF 22 02 F6 | 	mov	local03, result3
0db04     A7 FA 61 FC | 	wrlong	result1, fp
0db08     04 4E 05 F1 | 	add	fp, #4
0db0c     A7 FC 61 FC | 	wrlong	result2, fp
0db10     04 4E 05 F1 | 	add	fp, #4
0db14     A7 22 62 FC | 	wrlong	local03, fp
0db18                 | ' 
0db18                 | ' t2=pop()
0db18                 | ' t1=pop()
0db18                 | ' 
0db18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0db18     08 4E 85 F1 | 	sub	fp, #8
0db1c     1D 22 0E F2 | 	cmp	local03, #29 wz
0db20     14 4E 05 A1 |  if_e	add	fp, #20
0db24     A7 24 02 AB |  if_e	rdlong	local04, fp
0db28     14 4E 85 A1 |  if_e	sub	fp, #20
0db2c     12 23 02 A6 |  if_e	mov	local03, local04
0db30     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0db34     5C 00 90 5D |  if_ne	jmp	#LR__1061
0db38                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0db38     0C 4E 05 F1 | 	add	fp, #12
0db3c     A7 1E 02 FB | 	rdlong	local01, fp
0db40     0C 4E 85 F1 | 	sub	fp, #12
0db44     A7 22 02 FB | 	rdlong	local03, fp
0db48     11 1F 12 F2 | 	cmp	local01, local03 wc
0db4c     1C 00 90 3D |  if_ae	jmp	#LR__1060
0db50     A7 1E 02 FB | 	rdlong	local01, fp
0db54     0C 4E 05 F1 | 	add	fp, #12
0db58     A7 20 02 FB | 	rdlong	local02, fp
0db5c     0C 4E 85 F1 | 	sub	fp, #12
0db60     10 1F 82 F1 | 	sub	local01, local02
0db64     A7 1E 62 FC | 	wrlong	local01, fp
0db68     F4 02 90 FD | 	jmp	#LR__1070
0db6c                 | LR__1060
0db6c     A7 1E 02 FB | 	rdlong	local01, fp
0db70     0C 4E 05 F1 | 	add	fp, #12
0db74     A7 20 02 FB | 	rdlong	local02, fp
0db78     0C 4E 85 F1 | 	sub	fp, #12
0db7c     10 1F 82 F1 | 	sub	local01, local02
0db80     A7 1E 62 FC | 	wrlong	local01, fp
0db84     08 4E 05 F1 | 	add	fp, #8
0db88     A7 38 68 FC | 	wrlong	#28, fp
0db8c     08 4E 85 F1 | 	sub	fp, #8
0db90     CC 02 90 FD | 	jmp	#LR__1070
0db94                 | LR__1061
0db94                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0db94     08 4E 05 F1 | 	add	fp, #8
0db98     A7 1E 02 FB | 	rdlong	local01, fp
0db9c     08 4E 85 F1 | 	sub	fp, #8
0dba0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dba4     14 4E 05 A1 |  if_e	add	fp, #20
0dba8     A7 24 02 AB |  if_e	rdlong	local04, fp
0dbac     14 4E 85 A1 |  if_e	sub	fp, #20
0dbb0     12 23 02 A6 |  if_e	mov	local03, local04
0dbb4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dbb8     28 00 90 5D |  if_ne	jmp	#LR__1062
0dbbc     A7 1E 02 FB | 	rdlong	local01, fp
0dbc0     0C 4E 05 F1 | 	add	fp, #12
0dbc4     A7 20 02 FB | 	rdlong	local02, fp
0dbc8     0C 4E 85 F1 | 	sub	fp, #12
0dbcc     10 1F 82 F1 | 	sub	local01, local02
0dbd0     A7 1E 62 FC | 	wrlong	local01, fp
0dbd4     08 4E 05 F1 | 	add	fp, #8
0dbd8     A7 38 68 FC | 	wrlong	#28, fp
0dbdc     08 4E 85 F1 | 	sub	fp, #8
0dbe0     7C 02 90 FD | 	jmp	#LR__1070
0dbe4                 | LR__1062
0dbe4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0dbe4     08 4E 05 F1 | 	add	fp, #8
0dbe8     A7 1E 02 FB | 	rdlong	local01, fp
0dbec     08 4E 85 F1 | 	sub	fp, #8
0dbf0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dbf4     14 4E 05 A1 |  if_e	add	fp, #20
0dbf8     A7 24 02 AB |  if_e	rdlong	local04, fp
0dbfc     14 4E 85 A1 |  if_e	sub	fp, #20
0dc00     12 23 02 A6 |  if_e	mov	local03, local04
0dc04     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dc08     34 00 90 5D |  if_ne	jmp	#LR__1063
0dc0c     A7 12 02 FB | 	rdlong	arg01, fp
0dc10     84 D6 B0 FD | 	call	#__system___float_fromuns
0dc14     FD 12 02 F6 | 	mov	arg01, result1
0dc18     0C 4E 05 F1 | 	add	fp, #12
0dc1c     A7 14 02 FB | 	rdlong	arg02, fp
0dc20     0C 4E 85 F1 | 	sub	fp, #12
0dc24     1F 14 E6 F4 | 	bitnot	arg02, #31
0dc28     A0 D6 B0 FD | 	call	#__system___float_add
0dc2c     A7 FA 61 FC | 	wrlong	result1, fp
0dc30     08 4E 05 F1 | 	add	fp, #8
0dc34     A7 3C 68 FC | 	wrlong	#30, fp
0dc38     08 4E 85 F1 | 	sub	fp, #8
0dc3c     20 02 90 FD | 	jmp	#LR__1070
0dc40                 | LR__1063
0dc40                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0dc40     08 4E 05 F1 | 	add	fp, #8
0dc44     A7 1E 02 FB | 	rdlong	local01, fp
0dc48     08 4E 85 F1 | 	sub	fp, #8
0dc4c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dc50     14 4E 05 A1 |  if_e	add	fp, #20
0dc54     A7 24 02 AB |  if_e	rdlong	local04, fp
0dc58     14 4E 85 A1 |  if_e	sub	fp, #20
0dc5c     12 23 02 A6 |  if_e	mov	local03, local04
0dc60     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dc64     1C 00 90 5D |  if_ne	jmp	#LR__1064
0dc68     A7 1E 02 FB | 	rdlong	local01, fp
0dc6c     0C 4E 05 F1 | 	add	fp, #12
0dc70     A7 20 02 FB | 	rdlong	local02, fp
0dc74     0C 4E 85 F1 | 	sub	fp, #12
0dc78     10 1F 82 F1 | 	sub	local01, local02
0dc7c     A7 1E 62 FC | 	wrlong	local01, fp
0dc80     DC 01 90 FD | 	jmp	#LR__1070
0dc84                 | LR__1064
0dc84                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0dc84     08 4E 05 F1 | 	add	fp, #8
0dc88     A7 1E 02 FB | 	rdlong	local01, fp
0dc8c     08 4E 85 F1 | 	sub	fp, #8
0dc90     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dc94     14 4E 05 A1 |  if_e	add	fp, #20
0dc98     A7 24 02 AB |  if_e	rdlong	local04, fp
0dc9c     14 4E 85 A1 |  if_e	sub	fp, #20
0dca0     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0dca4     1C 00 90 5D |  if_ne	jmp	#LR__1065
0dca8     A7 1E 02 FB | 	rdlong	local01, fp
0dcac     0C 4E 05 F1 | 	add	fp, #12
0dcb0     A7 20 02 FB | 	rdlong	local02, fp
0dcb4     0C 4E 85 F1 | 	sub	fp, #12
0dcb8     10 1F 82 F1 | 	sub	local01, local02
0dcbc     A7 1E 62 FC | 	wrlong	local01, fp
0dcc0     9C 01 90 FD | 	jmp	#LR__1070
0dcc4                 | LR__1065
0dcc4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0dcc4     08 4E 05 F1 | 	add	fp, #8
0dcc8     A7 1E 02 FB | 	rdlong	local01, fp
0dccc     08 4E 85 F1 | 	sub	fp, #8
0dcd0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dcd4     14 4E 05 A1 |  if_e	add	fp, #20
0dcd8     A7 22 02 AB |  if_e	rdlong	local03, fp
0dcdc     14 4E 85 A1 |  if_e	sub	fp, #20
0dce0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dce4     44 00 90 5D |  if_ne	jmp	#LR__1066
0dce8     A7 12 02 FB | 	rdlong	arg01, fp
0dcec     09 13 52 F6 | 	abs	arg01, arg01 wc
0dcf0     1F 26 C6 C9 |  if_b	decod	local05, #31
0dcf4     00 26 06 36 |  if_ae	mov	local05, #0
0dcf8     9C D5 B0 FD | 	call	#__system___float_fromuns
0dcfc     13 FB 61 F5 | 	xor	result1, local05
0dd00     FD 12 02 F6 | 	mov	arg01, result1
0dd04     0C 4E 05 F1 | 	add	fp, #12
0dd08     A7 14 02 FB | 	rdlong	arg02, fp
0dd0c     0C 4E 85 F1 | 	sub	fp, #12
0dd10     1F 14 E6 F4 | 	bitnot	arg02, #31
0dd14     B4 D5 B0 FD | 	call	#__system___float_add
0dd18     A7 FA 61 FC | 	wrlong	result1, fp
0dd1c     08 4E 05 F1 | 	add	fp, #8
0dd20     A7 3C 68 FC | 	wrlong	#30, fp
0dd24     08 4E 85 F1 | 	sub	fp, #8
0dd28     34 01 90 FD | 	jmp	#LR__1070
0dd2c                 | LR__1066
0dd2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0dd2c     08 4E 05 F1 | 	add	fp, #8
0dd30     A7 1E 02 FB | 	rdlong	local01, fp
0dd34     08 4E 85 F1 | 	sub	fp, #8
0dd38     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dd3c     14 4E 05 A1 |  if_e	add	fp, #20
0dd40     A7 22 02 AB |  if_e	rdlong	local03, fp
0dd44     14 4E 85 A1 |  if_e	sub	fp, #20
0dd48     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dd4c     2C 00 90 5D |  if_ne	jmp	#LR__1067
0dd50     A7 1E 02 FB | 	rdlong	local01, fp
0dd54     0C 4E 05 F1 | 	add	fp, #12
0dd58     A7 12 02 FB | 	rdlong	arg01, fp
0dd5c     0C 4E 85 F1 | 	sub	fp, #12
0dd60     34 D5 B0 FD | 	call	#__system___float_fromuns
0dd64     FD 14 02 F6 | 	mov	arg02, result1
0dd68     0F 13 02 F6 | 	mov	arg01, local01
0dd6c     1F 14 E6 F4 | 	bitnot	arg02, #31
0dd70     58 D5 B0 FD | 	call	#__system___float_add
0dd74     A7 FA 61 FC | 	wrlong	result1, fp
0dd78     E4 00 90 FD | 	jmp	#LR__1070
0dd7c                 | LR__1067
0dd7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0dd7c     08 4E 05 F1 | 	add	fp, #8
0dd80     A7 1E 02 FB | 	rdlong	local01, fp
0dd84     08 4E 85 F1 | 	sub	fp, #8
0dd88     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dd8c     14 4E 05 A1 |  if_e	add	fp, #20
0dd90     A7 22 02 AB |  if_e	rdlong	local03, fp
0dd94     14 4E 85 A1 |  if_e	sub	fp, #20
0dd98     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dd9c     3C 00 90 5D |  if_ne	jmp	#LR__1068
0dda0     A7 1E 02 FB | 	rdlong	local01, fp
0dda4     0C 4E 05 F1 | 	add	fp, #12
0dda8     A7 12 02 FB | 	rdlong	arg01, fp
0ddac     0C 4E 85 F1 | 	sub	fp, #12
0ddb0     09 13 52 F6 | 	abs	arg01, arg01 wc
0ddb4     1F 26 C6 C9 |  if_b	decod	local05, #31
0ddb8     00 26 06 36 |  if_ae	mov	local05, #0
0ddbc     D8 D4 B0 FD | 	call	#__system___float_fromuns
0ddc0     13 FB 61 F5 | 	xor	result1, local05
0ddc4     FD 14 02 F6 | 	mov	arg02, result1
0ddc8     0F 13 02 F6 | 	mov	arg01, local01
0ddcc     1F 14 E6 F4 | 	bitnot	arg02, #31
0ddd0     F8 D4 B0 FD | 	call	#__system___float_add
0ddd4     A7 FA 61 FC | 	wrlong	result1, fp
0ddd8     84 00 90 FD | 	jmp	#LR__1070
0dddc                 | LR__1068
0dddc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0dddc     08 4E 05 F1 | 	add	fp, #8
0dde0     A7 1E 02 FB | 	rdlong	local01, fp
0dde4     08 4E 85 F1 | 	sub	fp, #8
0dde8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ddec     14 4E 05 A1 |  if_e	add	fp, #20
0ddf0     A7 22 02 AB |  if_e	rdlong	local03, fp
0ddf4     14 4E 85 A1 |  if_e	sub	fp, #20
0ddf8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ddfc     20 00 90 5D |  if_ne	jmp	#LR__1069
0de00     A7 12 02 FB | 	rdlong	arg01, fp
0de04     0C 4E 05 F1 | 	add	fp, #12
0de08     A7 14 02 FB | 	rdlong	arg02, fp
0de0c     0C 4E 85 F1 | 	sub	fp, #12
0de10     1F 14 E6 F4 | 	bitnot	arg02, #31
0de14     B4 D4 B0 FD | 	call	#__system___float_add
0de18     A7 FA 61 FC | 	wrlong	result1, fp
0de1c     40 00 90 FD | 	jmp	#LR__1070
0de20                 | LR__1069
0de20                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0de20     08 4E 05 F1 | 	add	fp, #8
0de24     A7 1E 02 FB | 	rdlong	local01, fp
0de28     08 4E 85 F1 | 	sub	fp, #8
0de2c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0de30     14 4E 05 51 |  if_ne	add	fp, #20
0de34     A7 22 02 5B |  if_ne	rdlong	local03, fp
0de38     14 4E 85 51 |  if_ne	sub	fp, #20
0de3c     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0de40     A7 06 68 AC |  if_e	wrlong	#3, fp
0de44     08 4E 05 A1 |  if_e	add	fp, #8
0de48     A7 FE 69 AC |  if_e	wrlong	#255, fp
0de4c     08 4E 85 A1 |  if_e	sub	fp, #8
0de50     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0de54     08 4E 05 51 |  if_ne	add	fp, #8
0de58     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0de5c     08 4E 85 51 |  if_ne	sub	fp, #8
0de60                 | LR__1070
0de60     A7 12 02 F6 | 	mov	arg01, fp
0de64     E8 B9 BF FD | 	call	#_push
0de68     A7 F0 03 F6 | 	mov	ptra, fp
0de6c     B2 00 A0 FD | 	call	#popregs_
0de70                 | _do_minus_ret
0de70     2D 00 64 FD | 	ret
0de74                 | 
0de74                 | ' 
0de74                 | ' sub do_and 
0de74                 | _do_and
0de74     03 4A 05 F6 | 	mov	COUNT_, #3
0de78     A8 00 A0 FD | 	call	#pushregs_
0de7c     18 F0 07 F1 | 	add	ptra, #24
0de80     34 B9 BF FD | 	call	#_pop
0de84     FD 12 02 F6 | 	mov	arg01, result1
0de88     FE 1E 02 F6 | 	mov	local01, result2
0de8c     FF 20 02 F6 | 	mov	local02, result3
0de90     0C 4E 05 F1 | 	add	fp, #12
0de94     A7 12 62 FC | 	wrlong	arg01, fp
0de98     04 4E 05 F1 | 	add	fp, #4
0de9c     A7 1E 62 FC | 	wrlong	local01, fp
0dea0     04 4E 05 F1 | 	add	fp, #4
0dea4     A7 20 62 FC | 	wrlong	local02, fp
0dea8     14 4E 85 F1 | 	sub	fp, #20
0deac     08 B9 BF FD | 	call	#_pop
0deb0     FF 22 02 F6 | 	mov	local03, result3
0deb4     A7 FA 61 FC | 	wrlong	result1, fp
0deb8     04 4E 05 F1 | 	add	fp, #4
0debc     A7 FC 61 FC | 	wrlong	result2, fp
0dec0     04 4E 05 F1 | 	add	fp, #4
0dec4     A7 22 62 FC | 	wrlong	local03, fp
0dec8                 | ' 
0dec8                 | ' t2=pop()
0dec8                 | ' t1=pop()
0dec8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0dec8     08 4E 85 F1 | 	sub	fp, #8
0decc     1C 22 0E F2 | 	cmp	local03, #28 wz
0ded0     A7 22 02 AB |  if_e	rdlong	local03, fp
0ded4     A7 22 62 AC |  if_e	wrlong	local03, fp
0ded8     08 4E 05 A1 |  if_e	add	fp, #8
0dedc     A7 3A 68 AC |  if_e	wrlong	#29, fp
0dee0     08 4E 85 A1 |  if_e	sub	fp, #8
0dee4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0dee4     14 4E 05 F1 | 	add	fp, #20
0dee8     A7 22 02 FB | 	rdlong	local03, fp
0deec     14 4E 85 F1 | 	sub	fp, #20
0def0     1C 22 0E F2 | 	cmp	local03, #28 wz
0def4     18 00 90 5D |  if_ne	jmp	#LR__1080
0def8     0C 4E 05 F1 | 	add	fp, #12
0defc     A7 22 02 FB | 	rdlong	local03, fp
0df00     A7 22 62 FC | 	wrlong	local03, fp
0df04     08 4E 05 F1 | 	add	fp, #8
0df08     A7 3A 68 FC | 	wrlong	#29, fp
0df0c     14 4E 85 F1 | 	sub	fp, #20
0df10                 | LR__1080
0df10                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0df10     08 4E 05 F1 | 	add	fp, #8
0df14     A7 22 02 FB | 	rdlong	local03, fp
0df18     08 4E 85 F1 | 	sub	fp, #8
0df1c     1F 22 0E F2 | 	cmp	local03, #31 wz
0df20     14 4E 05 51 |  if_ne	add	fp, #20
0df24     A7 20 02 5B |  if_ne	rdlong	local02, fp
0df28     14 4E 85 51 |  if_ne	sub	fp, #20
0df2c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0df30     08 4E 05 51 |  if_ne	add	fp, #8
0df34     A7 22 02 5B |  if_ne	rdlong	local03, fp
0df38     08 4E 85 51 |  if_ne	sub	fp, #8
0df3c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0df40     14 4E 05 51 |  if_ne	add	fp, #20
0df44     14 4E 85 51 |  if_ne	sub	fp, #20
0df48     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0df4c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0df50     08 4E 05 A1 |  if_e	add	fp, #8
0df54     A7 FE 69 AC |  if_e	wrlong	#255, fp
0df58     08 4E 85 A1 |  if_e	sub	fp, #8
0df5c     18 00 90 AD |  if_e	jmp	#LR__1081
0df60     A7 22 02 FB | 	rdlong	local03, fp
0df64     0C 4E 05 F1 | 	add	fp, #12
0df68     A7 1E 02 FB | 	rdlong	local01, fp
0df6c     0C 4E 85 F1 | 	sub	fp, #12
0df70     0F 23 02 F5 | 	and	local03, local01
0df74     A7 22 62 FC | 	wrlong	local03, fp
0df78                 | LR__1081
0df78     A7 12 02 F6 | 	mov	arg01, fp
0df7c     D0 B8 BF FD | 	call	#_push
0df80     A7 F0 03 F6 | 	mov	ptra, fp
0df84     B2 00 A0 FD | 	call	#popregs_
0df88                 | _do_and_ret
0df88     2D 00 64 FD | 	ret
0df8c                 | 
0df8c                 | ' 
0df8c                 | ' sub do_or 
0df8c                 | _do_or
0df8c     03 4A 05 F6 | 	mov	COUNT_, #3
0df90     A8 00 A0 FD | 	call	#pushregs_
0df94     18 F0 07 F1 | 	add	ptra, #24
0df98     1C B8 BF FD | 	call	#_pop
0df9c     FD 12 02 F6 | 	mov	arg01, result1
0dfa0     FE 1E 02 F6 | 	mov	local01, result2
0dfa4     FF 20 02 F6 | 	mov	local02, result3
0dfa8     0C 4E 05 F1 | 	add	fp, #12
0dfac     A7 12 62 FC | 	wrlong	arg01, fp
0dfb0     04 4E 05 F1 | 	add	fp, #4
0dfb4     A7 1E 62 FC | 	wrlong	local01, fp
0dfb8     04 4E 05 F1 | 	add	fp, #4
0dfbc     A7 20 62 FC | 	wrlong	local02, fp
0dfc0     14 4E 85 F1 | 	sub	fp, #20
0dfc4     F0 B7 BF FD | 	call	#_pop
0dfc8     FF 22 02 F6 | 	mov	local03, result3
0dfcc     A7 FA 61 FC | 	wrlong	result1, fp
0dfd0     04 4E 05 F1 | 	add	fp, #4
0dfd4     A7 FC 61 FC | 	wrlong	result2, fp
0dfd8     04 4E 05 F1 | 	add	fp, #4
0dfdc     A7 22 62 FC | 	wrlong	local03, fp
0dfe0                 | ' 
0dfe0                 | ' t2=pop()
0dfe0                 | ' t1=pop()
0dfe0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0dfe0     08 4E 85 F1 | 	sub	fp, #8
0dfe4     1C 22 0E F2 | 	cmp	local03, #28 wz
0dfe8     A7 22 02 AB |  if_e	rdlong	local03, fp
0dfec     A7 22 62 AC |  if_e	wrlong	local03, fp
0dff0     08 4E 05 A1 |  if_e	add	fp, #8
0dff4     A7 3A 68 AC |  if_e	wrlong	#29, fp
0dff8     08 4E 85 A1 |  if_e	sub	fp, #8
0dffc                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0dffc     14 4E 05 F1 | 	add	fp, #20
0e000     A7 22 02 FB | 	rdlong	local03, fp
0e004     14 4E 85 F1 | 	sub	fp, #20
0e008     1C 22 0E F2 | 	cmp	local03, #28 wz
0e00c     18 00 90 5D |  if_ne	jmp	#LR__1090
0e010     0C 4E 05 F1 | 	add	fp, #12
0e014     A7 22 02 FB | 	rdlong	local03, fp
0e018     A7 22 62 FC | 	wrlong	local03, fp
0e01c     08 4E 05 F1 | 	add	fp, #8
0e020     A7 3A 68 FC | 	wrlong	#29, fp
0e024     14 4E 85 F1 | 	sub	fp, #20
0e028                 | LR__1090
0e028                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0e028     08 4E 05 F1 | 	add	fp, #8
0e02c     A7 22 02 FB | 	rdlong	local03, fp
0e030     08 4E 85 F1 | 	sub	fp, #8
0e034     1F 22 0E F2 | 	cmp	local03, #31 wz
0e038     14 4E 05 51 |  if_ne	add	fp, #20
0e03c     A7 20 02 5B |  if_ne	rdlong	local02, fp
0e040     14 4E 85 51 |  if_ne	sub	fp, #20
0e044     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0e048     08 4E 05 51 |  if_ne	add	fp, #8
0e04c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e050     08 4E 85 51 |  if_ne	sub	fp, #8
0e054     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0e058     14 4E 05 51 |  if_ne	add	fp, #20
0e05c     14 4E 85 51 |  if_ne	sub	fp, #20
0e060     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0e064     A7 0C 68 AC |  if_e	wrlong	#6, fp
0e068     08 4E 05 A1 |  if_e	add	fp, #8
0e06c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e070     08 4E 85 A1 |  if_e	sub	fp, #8
0e074     18 00 90 AD |  if_e	jmp	#LR__1091
0e078     A7 22 02 FB | 	rdlong	local03, fp
0e07c     0C 4E 05 F1 | 	add	fp, #12
0e080     A7 1E 02 FB | 	rdlong	local01, fp
0e084     0C 4E 85 F1 | 	sub	fp, #12
0e088     0F 23 42 F5 | 	or	local03, local01
0e08c     A7 22 62 FC | 	wrlong	local03, fp
0e090                 | LR__1091
0e090     A7 12 02 F6 | 	mov	arg01, fp
0e094     B8 B7 BF FD | 	call	#_push
0e098     A7 F0 03 F6 | 	mov	ptra, fp
0e09c     B2 00 A0 FD | 	call	#popregs_
0e0a0                 | _do_or_ret
0e0a0     2D 00 64 FD | 	ret
0e0a4                 | 
0e0a4                 | ' 
0e0a4                 | ' sub do_mul
0e0a4                 | _do_mul
0e0a4     05 4A 05 F6 | 	mov	COUNT_, #5
0e0a8     A8 00 A0 FD | 	call	#pushregs_
0e0ac     18 F0 07 F1 | 	add	ptra, #24
0e0b0     04 B7 BF FD | 	call	#_pop
0e0b4     FD 1E 02 F6 | 	mov	local01, result1
0e0b8     FE 20 02 F6 | 	mov	local02, result2
0e0bc     FF 22 02 F6 | 	mov	local03, result3
0e0c0     0C 4E 05 F1 | 	add	fp, #12
0e0c4     A7 1E 62 FC | 	wrlong	local01, fp
0e0c8     04 4E 05 F1 | 	add	fp, #4
0e0cc     A7 20 62 FC | 	wrlong	local02, fp
0e0d0     04 4E 05 F1 | 	add	fp, #4
0e0d4     A7 22 62 FC | 	wrlong	local03, fp
0e0d8     14 4E 85 F1 | 	sub	fp, #20
0e0dc     D8 B6 BF FD | 	call	#_pop
0e0e0     FF 22 02 F6 | 	mov	local03, result3
0e0e4     A7 FA 61 FC | 	wrlong	result1, fp
0e0e8     04 4E 05 F1 | 	add	fp, #4
0e0ec     A7 FC 61 FC | 	wrlong	result2, fp
0e0f0     04 4E 05 F1 | 	add	fp, #4
0e0f4     A7 22 62 FC | 	wrlong	local03, fp
0e0f8                 | ' 
0e0f8                 | ' t2=pop()
0e0f8                 | ' t1=pop()
0e0f8                 | ' 
0e0f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0e0f8     08 4E 85 F1 | 	sub	fp, #8
0e0fc     1D 22 0E F2 | 	cmp	local03, #29 wz
0e100     14 4E 05 A1 |  if_e	add	fp, #20
0e104     A7 24 02 AB |  if_e	rdlong	local04, fp
0e108     14 4E 85 A1 |  if_e	sub	fp, #20
0e10c     12 23 02 A6 |  if_e	mov	local03, local04
0e110     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e114     20 00 90 5D |  if_ne	jmp	#LR__1100
0e118     A7 20 02 FB | 	rdlong	local02, fp
0e11c     0C 4E 05 F1 | 	add	fp, #12
0e120     A7 22 02 FB | 	rdlong	local03, fp
0e124     11 21 02 FD | 	qmul	local02, local03
0e128     0C 4E 85 F1 | 	sub	fp, #12
0e12c     18 1E 62 FD | 	getqx	local01
0e130     A7 1E 62 FC | 	wrlong	local01, fp
0e134     C4 02 90 FD | 	jmp	#LR__1109
0e138                 | LR__1100
0e138                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0e138     08 4E 05 F1 | 	add	fp, #8
0e13c     A7 1E 02 FB | 	rdlong	local01, fp
0e140     08 4E 85 F1 | 	sub	fp, #8
0e144     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e148     14 4E 05 A1 |  if_e	add	fp, #20
0e14c     A7 24 02 AB |  if_e	rdlong	local04, fp
0e150     14 4E 85 A1 |  if_e	sub	fp, #20
0e154     12 23 02 A6 |  if_e	mov	local03, local04
0e158     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e15c     2C 00 90 5D |  if_ne	jmp	#LR__1101
0e160     A7 20 02 FB | 	rdlong	local02, fp
0e164     0C 4E 05 F1 | 	add	fp, #12
0e168     A7 22 02 FB | 	rdlong	local03, fp
0e16c     11 21 02 FD | 	qmul	local02, local03
0e170     0C 4E 85 F1 | 	sub	fp, #12
0e174     18 1E 62 FD | 	getqx	local01
0e178     A7 1E 62 FC | 	wrlong	local01, fp
0e17c     08 4E 05 F1 | 	add	fp, #8
0e180     A7 38 68 FC | 	wrlong	#28, fp
0e184     08 4E 85 F1 | 	sub	fp, #8
0e188     70 02 90 FD | 	jmp	#LR__1109
0e18c                 | LR__1101
0e18c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0e18c     08 4E 05 F1 | 	add	fp, #8
0e190     A7 1E 02 FB | 	rdlong	local01, fp
0e194     08 4E 85 F1 | 	sub	fp, #8
0e198     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e19c     14 4E 05 A1 |  if_e	add	fp, #20
0e1a0     A7 24 02 AB |  if_e	rdlong	local04, fp
0e1a4     14 4E 85 A1 |  if_e	sub	fp, #20
0e1a8     12 23 02 A6 |  if_e	mov	local03, local04
0e1ac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e1b0     30 00 90 5D |  if_ne	jmp	#LR__1102
0e1b4     A7 12 02 FB | 	rdlong	arg01, fp
0e1b8     DC D0 B0 FD | 	call	#__system___float_fromuns
0e1bc     FD 12 02 F6 | 	mov	arg01, result1
0e1c0     0C 4E 05 F1 | 	add	fp, #12
0e1c4     A7 14 02 FB | 	rdlong	arg02, fp
0e1c8     0C 4E 85 F1 | 	sub	fp, #12
0e1cc     CC D4 B0 FD | 	call	#__system___float_mul
0e1d0     A7 FA 61 FC | 	wrlong	result1, fp
0e1d4     08 4E 05 F1 | 	add	fp, #8
0e1d8     A7 3C 68 FC | 	wrlong	#30, fp
0e1dc     08 4E 85 F1 | 	sub	fp, #8
0e1e0     18 02 90 FD | 	jmp	#LR__1109
0e1e4                 | LR__1102
0e1e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0e1e4     08 4E 05 F1 | 	add	fp, #8
0e1e8     A7 1E 02 FB | 	rdlong	local01, fp
0e1ec     08 4E 85 F1 | 	sub	fp, #8
0e1f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e1f4     14 4E 05 A1 |  if_e	add	fp, #20
0e1f8     A7 24 02 AB |  if_e	rdlong	local04, fp
0e1fc     14 4E 85 A1 |  if_e	sub	fp, #20
0e200     12 23 02 A6 |  if_e	mov	local03, local04
0e204     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e208     20 00 90 5D |  if_ne	jmp	#LR__1103
0e20c     A7 20 02 FB | 	rdlong	local02, fp
0e210     0C 4E 05 F1 | 	add	fp, #12
0e214     A7 22 02 FB | 	rdlong	local03, fp
0e218     11 21 02 FD | 	qmul	local02, local03
0e21c     0C 4E 85 F1 | 	sub	fp, #12
0e220     18 1E 62 FD | 	getqx	local01
0e224     A7 1E 62 FC | 	wrlong	local01, fp
0e228     D0 01 90 FD | 	jmp	#LR__1109
0e22c                 | LR__1103
0e22c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0e22c     08 4E 05 F1 | 	add	fp, #8
0e230     A7 1E 02 FB | 	rdlong	local01, fp
0e234     08 4E 85 F1 | 	sub	fp, #8
0e238     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e23c     14 4E 05 A1 |  if_e	add	fp, #20
0e240     A7 24 02 AB |  if_e	rdlong	local04, fp
0e244     14 4E 85 A1 |  if_e	sub	fp, #20
0e248     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0e24c     20 00 90 5D |  if_ne	jmp	#LR__1104
0e250     A7 20 02 FB | 	rdlong	local02, fp
0e254     0C 4E 05 F1 | 	add	fp, #12
0e258     A7 22 02 FB | 	rdlong	local03, fp
0e25c     11 21 02 FD | 	qmul	local02, local03
0e260     0C 4E 85 F1 | 	sub	fp, #12
0e264     18 1E 62 FD | 	getqx	local01
0e268     A7 1E 62 FC | 	wrlong	local01, fp
0e26c     8C 01 90 FD | 	jmp	#LR__1109
0e270                 | LR__1104
0e270                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0e270     08 4E 05 F1 | 	add	fp, #8
0e274     A7 1E 02 FB | 	rdlong	local01, fp
0e278     08 4E 85 F1 | 	sub	fp, #8
0e27c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e280     14 4E 05 A1 |  if_e	add	fp, #20
0e284     A7 22 02 AB |  if_e	rdlong	local03, fp
0e288     14 4E 85 A1 |  if_e	sub	fp, #20
0e28c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e290     40 00 90 5D |  if_ne	jmp	#LR__1105
0e294     A7 12 02 FB | 	rdlong	arg01, fp
0e298     09 13 52 F6 | 	abs	arg01, arg01 wc
0e29c     1F 26 C6 C9 |  if_b	decod	local05, #31
0e2a0     00 26 06 36 |  if_ae	mov	local05, #0
0e2a4     F0 CF B0 FD | 	call	#__system___float_fromuns
0e2a8     13 FB 61 F5 | 	xor	result1, local05
0e2ac     FD 12 02 F6 | 	mov	arg01, result1
0e2b0     0C 4E 05 F1 | 	add	fp, #12
0e2b4     A7 14 02 FB | 	rdlong	arg02, fp
0e2b8     0C 4E 85 F1 | 	sub	fp, #12
0e2bc     DC D3 B0 FD | 	call	#__system___float_mul
0e2c0     A7 FA 61 FC | 	wrlong	result1, fp
0e2c4     08 4E 05 F1 | 	add	fp, #8
0e2c8     A7 3C 68 FC | 	wrlong	#30, fp
0e2cc     08 4E 85 F1 | 	sub	fp, #8
0e2d0     28 01 90 FD | 	jmp	#LR__1109
0e2d4                 | LR__1105
0e2d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0e2d4     08 4E 05 F1 | 	add	fp, #8
0e2d8     A7 1E 02 FB | 	rdlong	local01, fp
0e2dc     08 4E 85 F1 | 	sub	fp, #8
0e2e0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e2e4     14 4E 05 A1 |  if_e	add	fp, #20
0e2e8     A7 22 02 AB |  if_e	rdlong	local03, fp
0e2ec     14 4E 85 A1 |  if_e	sub	fp, #20
0e2f0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e2f4     28 00 90 5D |  if_ne	jmp	#LR__1106
0e2f8     A7 1E 02 FB | 	rdlong	local01, fp
0e2fc     0C 4E 05 F1 | 	add	fp, #12
0e300     A7 12 02 FB | 	rdlong	arg01, fp
0e304     0C 4E 85 F1 | 	sub	fp, #12
0e308     8C CF B0 FD | 	call	#__system___float_fromuns
0e30c     FD 14 02 F6 | 	mov	arg02, result1
0e310     0F 13 02 F6 | 	mov	arg01, local01
0e314     84 D3 B0 FD | 	call	#__system___float_mul
0e318     A7 FA 61 FC | 	wrlong	result1, fp
0e31c     DC 00 90 FD | 	jmp	#LR__1109
0e320                 | LR__1106
0e320                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0e320     08 4E 05 F1 | 	add	fp, #8
0e324     A7 1E 02 FB | 	rdlong	local01, fp
0e328     08 4E 85 F1 | 	sub	fp, #8
0e32c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e330     14 4E 05 A1 |  if_e	add	fp, #20
0e334     A7 22 02 AB |  if_e	rdlong	local03, fp
0e338     14 4E 85 A1 |  if_e	sub	fp, #20
0e33c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e340     38 00 90 5D |  if_ne	jmp	#LR__1107
0e344     A7 1E 02 FB | 	rdlong	local01, fp
0e348     0C 4E 05 F1 | 	add	fp, #12
0e34c     A7 12 02 FB | 	rdlong	arg01, fp
0e350     0C 4E 85 F1 | 	sub	fp, #12
0e354     09 13 52 F6 | 	abs	arg01, arg01 wc
0e358     1F 26 C6 C9 |  if_b	decod	local05, #31
0e35c     00 26 06 36 |  if_ae	mov	local05, #0
0e360     34 CF B0 FD | 	call	#__system___float_fromuns
0e364     13 FB 61 F5 | 	xor	result1, local05
0e368     FD 14 02 F6 | 	mov	arg02, result1
0e36c     0F 13 02 F6 | 	mov	arg01, local01
0e370     28 D3 B0 FD | 	call	#__system___float_mul
0e374     A7 FA 61 FC | 	wrlong	result1, fp
0e378     80 00 90 FD | 	jmp	#LR__1109
0e37c                 | LR__1107
0e37c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0e37c     08 4E 05 F1 | 	add	fp, #8
0e380     A7 1E 02 FB | 	rdlong	local01, fp
0e384     08 4E 85 F1 | 	sub	fp, #8
0e388     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e38c     14 4E 05 A1 |  if_e	add	fp, #20
0e390     A7 22 02 AB |  if_e	rdlong	local03, fp
0e394     14 4E 85 A1 |  if_e	sub	fp, #20
0e398     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e39c     1C 00 90 5D |  if_ne	jmp	#LR__1108
0e3a0     A7 12 02 FB | 	rdlong	arg01, fp
0e3a4     0C 4E 05 F1 | 	add	fp, #12
0e3a8     A7 14 02 FB | 	rdlong	arg02, fp
0e3ac     0C 4E 85 F1 | 	sub	fp, #12
0e3b0     E8 D2 B0 FD | 	call	#__system___float_mul
0e3b4     A7 FA 61 FC | 	wrlong	result1, fp
0e3b8     40 00 90 FD | 	jmp	#LR__1109
0e3bc                 | LR__1108
0e3bc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0e3bc     08 4E 05 F1 | 	add	fp, #8
0e3c0     A7 1E 02 FB | 	rdlong	local01, fp
0e3c4     08 4E 85 F1 | 	sub	fp, #8
0e3c8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0e3cc     14 4E 05 51 |  if_ne	add	fp, #20
0e3d0     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e3d4     14 4E 85 51 |  if_ne	sub	fp, #20
0e3d8     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0e3dc     A7 10 68 AC |  if_e	wrlong	#8, fp
0e3e0     08 4E 05 A1 |  if_e	add	fp, #8
0e3e4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e3e8     08 4E 85 A1 |  if_e	sub	fp, #8
0e3ec     A7 12 68 5C |  if_ne	wrlong	#9, fp
0e3f0     08 4E 05 51 |  if_ne	add	fp, #8
0e3f4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0e3f8     08 4E 85 51 |  if_ne	sub	fp, #8
0e3fc                 | LR__1109
0e3fc     A7 12 02 F6 | 	mov	arg01, fp
0e400     4C B4 BF FD | 	call	#_push
0e404     A7 F0 03 F6 | 	mov	ptra, fp
0e408     B2 00 A0 FD | 	call	#popregs_
0e40c                 | _do_mul_ret
0e40c     2D 00 64 FD | 	ret
0e410                 | 
0e410                 | ' 
0e410                 | ' sub do_div 
0e410                 | _do_div
0e410     01 4A 05 F6 | 	mov	COUNT_, #1
0e414     A8 00 A0 FD | 	call	#pushregs_
0e418     18 F0 07 F1 | 	add	ptra, #24
0e41c     98 B3 BF FD | 	call	#_pop
0e420     FD 66 02 F6 | 	mov	muldivb_, result1
0e424     FE 64 02 F6 | 	mov	muldiva_, result2
0e428     FF 1E 02 F6 | 	mov	local01, result3
0e42c     0C 4E 05 F1 | 	add	fp, #12
0e430     A7 66 62 FC | 	wrlong	muldivb_, fp
0e434     04 4E 05 F1 | 	add	fp, #4
0e438     A7 64 62 FC | 	wrlong	muldiva_, fp
0e43c     04 4E 05 F1 | 	add	fp, #4
0e440     A7 1E 62 FC | 	wrlong	local01, fp
0e444     14 4E 85 F1 | 	sub	fp, #20
0e448     6C B3 BF FD | 	call	#_pop
0e44c     A7 FA 61 FC | 	wrlong	result1, fp
0e450     04 4E 05 F1 | 	add	fp, #4
0e454     A7 FC 61 FC | 	wrlong	result2, fp
0e458     04 4E 05 F1 | 	add	fp, #4
0e45c     A7 FE 61 FC | 	wrlong	result3, fp
0e460                 | ' 
0e460                 | ' t2=pop()
0e460                 | ' t1=pop()
0e460                 | ' 
0e460                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0e460     08 4E 85 F1 | 	sub	fp, #8
0e464     1F FE 0D F2 | 	cmp	result3, #31 wz
0e468     14 4E 05 51 |  if_ne	add	fp, #20
0e46c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0e470     14 4E 85 51 |  if_ne	sub	fp, #20
0e474     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0e478     A7 14 68 AC |  if_e	wrlong	#10, fp
0e47c     08 4E 05 A1 |  if_e	add	fp, #8
0e480     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e484     08 4E 85 A1 |  if_e	sub	fp, #8
0e488     90 01 90 AD |  if_e	jmp	#LR__1116
0e48c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0e48c     08 4E 05 F1 | 	add	fp, #8
0e490     A7 66 02 FB | 	rdlong	muldivb_, fp
0e494     08 4E 85 F1 | 	sub	fp, #8
0e498     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
0e49c     1C 00 90 5D |  if_ne	jmp	#LR__1110
0e4a0     08 4E 05 F1 | 	add	fp, #8
0e4a4     A7 38 68 FC | 	wrlong	#28, fp
0e4a8     08 4E 85 F1 | 	sub	fp, #8
0e4ac     A7 12 02 FB | 	rdlong	arg01, fp
0e4b0     00 14 06 F6 | 	mov	arg02, #0
0e4b4     AC D6 B0 FD | 	call	#__system___float_tointeger
0e4b8     A7 FA 61 FC | 	wrlong	result1, fp
0e4bc                 | LR__1110
0e4bc                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0e4bc     14 4E 05 F1 | 	add	fp, #20
0e4c0     A7 66 02 FB | 	rdlong	muldivb_, fp
0e4c4     14 4E 85 F1 | 	sub	fp, #20
0e4c8     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
0e4cc     28 00 90 5D |  if_ne	jmp	#LR__1111
0e4d0     14 4E 05 F1 | 	add	fp, #20
0e4d4     A7 38 68 FC | 	wrlong	#28, fp
0e4d8     08 4E 85 F1 | 	sub	fp, #8
0e4dc     A7 12 02 FB | 	rdlong	arg01, fp
0e4e0     0C 4E 85 F1 | 	sub	fp, #12
0e4e4     00 14 06 F6 | 	mov	arg02, #0
0e4e8     78 D6 B0 FD | 	call	#__system___float_tointeger
0e4ec     0C 4E 05 F1 | 	add	fp, #12
0e4f0     A7 FA 61 FC | 	wrlong	result1, fp
0e4f4     0C 4E 85 F1 | 	sub	fp, #12
0e4f8                 | LR__1111
0e4f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0e4f8     08 4E 05 F1 | 	add	fp, #8
0e4fc     A7 66 02 FB | 	rdlong	muldivb_, fp
0e500     08 4E 85 F1 | 	sub	fp, #8
0e504     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
0e508     14 4E 05 A1 |  if_e	add	fp, #20
0e50c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e510     14 4E 85 A1 |  if_e	sub	fp, #20
0e514     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e518     20 00 90 5D |  if_ne	jmp	#LR__1112
0e51c     0C 4E 05 F1 | 	add	fp, #12
0e520     A7 1E 02 FB | 	rdlong	local01, fp
0e524     0C 4E 85 F1 | 	sub	fp, #12
0e528     A7 66 02 FB | 	rdlong	muldivb_, fp
0e52c     0F 67 12 FD | 	qdiv	muldivb_, local01
0e530     18 1E 62 FD | 	getqx	local01
0e534     A7 1E 62 FC | 	wrlong	local01, fp
0e538     E0 00 90 FD | 	jmp	#LR__1116
0e53c                 | LR__1112
0e53c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0e53c     08 4E 05 F1 | 	add	fp, #8
0e540     A7 66 02 FB | 	rdlong	muldivb_, fp
0e544     08 4E 85 F1 | 	sub	fp, #8
0e548     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
0e54c     14 4E 05 A1 |  if_e	add	fp, #20
0e550     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e554     14 4E 85 A1 |  if_e	sub	fp, #20
0e558     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e55c     2C 00 90 5D |  if_ne	jmp	#LR__1113
0e560     0C 4E 05 F1 | 	add	fp, #12
0e564     A7 1E 02 FB | 	rdlong	local01, fp
0e568     0C 4E 85 F1 | 	sub	fp, #12
0e56c     A7 66 02 FB | 	rdlong	muldivb_, fp
0e570     0F 67 12 FD | 	qdiv	muldivb_, local01
0e574     18 1E 62 FD | 	getqx	local01
0e578     A7 1E 62 FC | 	wrlong	local01, fp
0e57c     08 4E 05 F1 | 	add	fp, #8
0e580     A7 38 68 FC | 	wrlong	#28, fp
0e584     08 4E 85 F1 | 	sub	fp, #8
0e588     90 00 90 FD | 	jmp	#LR__1116
0e58c                 | LR__1113
0e58c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0e58c     08 4E 05 F1 | 	add	fp, #8
0e590     A7 66 02 FB | 	rdlong	muldivb_, fp
0e594     08 4E 85 F1 | 	sub	fp, #8
0e598     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
0e59c     14 4E 05 A1 |  if_e	add	fp, #20
0e5a0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e5a4     14 4E 85 A1 |  if_e	sub	fp, #20
0e5a8     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e5ac     1C 00 90 5D |  if_ne	jmp	#LR__1114
0e5b0     A7 64 02 FB | 	rdlong	muldiva_, fp
0e5b4     0C 4E 05 F1 | 	add	fp, #12
0e5b8     A7 66 02 FB | 	rdlong	muldivb_, fp
0e5bc     0C 4E 85 F1 | 	sub	fp, #12
0e5c0     BA 00 A0 FD | 	call	#divide_
0e5c4     A7 66 62 FC | 	wrlong	muldivb_, fp
0e5c8     50 00 90 FD | 	jmp	#LR__1116
0e5cc                 | LR__1114
0e5cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0e5cc     08 4E 05 F1 | 	add	fp, #8
0e5d0     A7 66 02 FB | 	rdlong	muldivb_, fp
0e5d4     08 4E 85 F1 | 	sub	fp, #8
0e5d8     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
0e5dc     14 4E 05 A1 |  if_e	add	fp, #20
0e5e0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e5e4     14 4E 85 A1 |  if_e	sub	fp, #20
0e5e8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e5ec     1C 00 90 5D |  if_ne	jmp	#LR__1115
0e5f0     A7 64 02 FB | 	rdlong	muldiva_, fp
0e5f4     0C 4E 05 F1 | 	add	fp, #12
0e5f8     A7 66 02 FB | 	rdlong	muldivb_, fp
0e5fc     0C 4E 85 F1 | 	sub	fp, #12
0e600     BA 00 A0 FD | 	call	#divide_
0e604     A7 66 62 FC | 	wrlong	muldivb_, fp
0e608     10 00 90 FD | 	jmp	#LR__1116
0e60c                 | LR__1115
0e60c     A7 16 68 FC | 	wrlong	#11, fp
0e610     08 4E 05 F1 | 	add	fp, #8
0e614     A7 FE 69 FC | 	wrlong	#255, fp
0e618     08 4E 85 F1 | 	sub	fp, #8
0e61c                 | LR__1116
0e61c     A7 12 02 F6 | 	mov	arg01, fp
0e620     2C B2 BF FD | 	call	#_push
0e624     A7 F0 03 F6 | 	mov	ptra, fp
0e628     B2 00 A0 FD | 	call	#popregs_
0e62c                 | _do_div_ret
0e62c     2D 00 64 FD | 	ret
0e630                 | 
0e630                 | ' 
0e630                 | ' sub do_fdiv 
0e630                 | _do_fdiv
0e630     02 4A 05 F6 | 	mov	COUNT_, #2
0e634     A8 00 A0 FD | 	call	#pushregs_
0e638     18 F0 07 F1 | 	add	ptra, #24
0e63c     78 B1 BF FD | 	call	#_pop
0e640     FD 14 02 F6 | 	mov	arg02, result1
0e644     FE 12 02 F6 | 	mov	arg01, result2
0e648     FF 1E 02 F6 | 	mov	local01, result3
0e64c     0C 4E 05 F1 | 	add	fp, #12
0e650     A7 14 62 FC | 	wrlong	arg02, fp
0e654     04 4E 05 F1 | 	add	fp, #4
0e658     A7 12 62 FC | 	wrlong	arg01, fp
0e65c     04 4E 05 F1 | 	add	fp, #4
0e660     A7 1E 62 FC | 	wrlong	local01, fp
0e664     14 4E 85 F1 | 	sub	fp, #20
0e668     4C B1 BF FD | 	call	#_pop
0e66c     A7 FA 61 FC | 	wrlong	result1, fp
0e670     04 4E 05 F1 | 	add	fp, #4
0e674     A7 FC 61 FC | 	wrlong	result2, fp
0e678     04 4E 05 F1 | 	add	fp, #4
0e67c     A7 FE 61 FC | 	wrlong	result3, fp
0e680                 | ' 
0e680                 | ' t2=pop()
0e680                 | ' t1=pop()
0e680                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0e680     08 4E 85 F1 | 	sub	fp, #8
0e684     1F FE 0D F2 | 	cmp	result3, #31 wz
0e688     14 4E 05 51 |  if_ne	add	fp, #20
0e68c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e690     14 4E 85 51 |  if_ne	sub	fp, #20
0e694     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0e698     A7 14 68 AC |  if_e	wrlong	#10, fp
0e69c     08 4E 05 A1 |  if_e	add	fp, #8
0e6a0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e6a4     08 4E 85 A1 |  if_e	sub	fp, #8
0e6a8     38 01 90 AD |  if_e	jmp	#LR__1125
0e6ac                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0e6ac     08 4E 05 F1 | 	add	fp, #8
0e6b0     A7 14 02 FB | 	rdlong	arg02, fp
0e6b4     08 4E 85 F1 | 	sub	fp, #8
0e6b8     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e6bc     28 00 90 5D |  if_ne	jmp	#LR__1120
0e6c0     08 4E 05 F1 | 	add	fp, #8
0e6c4     A7 3C 68 FC | 	wrlong	#30, fp
0e6c8     08 4E 85 F1 | 	sub	fp, #8
0e6cc     A7 12 02 FB | 	rdlong	arg01, fp
0e6d0     09 13 52 F6 | 	abs	arg01, arg01 wc
0e6d4     1F 20 C6 C9 |  if_b	decod	local02, #31
0e6d8     00 20 06 36 |  if_ae	mov	local02, #0
0e6dc     B8 CB B0 FD | 	call	#__system___float_fromuns
0e6e0     10 FB 61 F5 | 	xor	result1, local02
0e6e4     A7 FA 61 FC | 	wrlong	result1, fp
0e6e8                 | LR__1120
0e6e8                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0e6e8     08 4E 05 F1 | 	add	fp, #8
0e6ec     A7 14 02 FB | 	rdlong	arg02, fp
0e6f0     08 4E 85 F1 | 	sub	fp, #8
0e6f4     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e6f8     18 00 90 5D |  if_ne	jmp	#LR__1121
0e6fc     08 4E 05 F1 | 	add	fp, #8
0e700     A7 3C 68 FC | 	wrlong	#30, fp
0e704     08 4E 85 F1 | 	sub	fp, #8
0e708     A7 12 02 FB | 	rdlong	arg01, fp
0e70c     88 CB B0 FD | 	call	#__system___float_fromuns
0e710     A7 FA 61 FC | 	wrlong	result1, fp
0e714                 | LR__1121
0e714                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0e714     14 4E 05 F1 | 	add	fp, #20
0e718     A7 14 02 FB | 	rdlong	arg02, fp
0e71c     14 4E 85 F1 | 	sub	fp, #20
0e720     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e724     34 00 90 5D |  if_ne	jmp	#LR__1122
0e728     14 4E 05 F1 | 	add	fp, #20
0e72c     A7 3C 68 FC | 	wrlong	#30, fp
0e730     08 4E 85 F1 | 	sub	fp, #8
0e734     A7 12 02 FB | 	rdlong	arg01, fp
0e738     0C 4E 85 F1 | 	sub	fp, #12
0e73c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e740     1F 20 C6 C9 |  if_b	decod	local02, #31
0e744     00 20 06 36 |  if_ae	mov	local02, #0
0e748     4C CB B0 FD | 	call	#__system___float_fromuns
0e74c     10 FB 61 F5 | 	xor	result1, local02
0e750     0C 4E 05 F1 | 	add	fp, #12
0e754     A7 FA 61 FC | 	wrlong	result1, fp
0e758     0C 4E 85 F1 | 	sub	fp, #12
0e75c                 | LR__1122
0e75c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0e75c     14 4E 05 F1 | 	add	fp, #20
0e760     A7 14 02 FB | 	rdlong	arg02, fp
0e764     14 4E 85 F1 | 	sub	fp, #20
0e768     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e76c     24 00 90 5D |  if_ne	jmp	#LR__1123
0e770     14 4E 05 F1 | 	add	fp, #20
0e774     A7 3C 68 FC | 	wrlong	#30, fp
0e778     08 4E 85 F1 | 	sub	fp, #8
0e77c     A7 12 02 FB | 	rdlong	arg01, fp
0e780     0C 4E 85 F1 | 	sub	fp, #12
0e784     10 CB B0 FD | 	call	#__system___float_fromuns
0e788     0C 4E 05 F1 | 	add	fp, #12
0e78c     A7 FA 61 FC | 	wrlong	result1, fp
0e790     0C 4E 85 F1 | 	sub	fp, #12
0e794                 | LR__1123
0e794                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0e794     08 4E 05 F1 | 	add	fp, #8
0e798     A7 14 02 FB | 	rdlong	arg02, fp
0e79c     08 4E 85 F1 | 	sub	fp, #8
0e7a0     1E 14 0E F2 | 	cmp	arg02, #30 wz
0e7a4     14 4E 05 A1 |  if_e	add	fp, #20
0e7a8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e7ac     14 4E 85 A1 |  if_e	sub	fp, #20
0e7b0     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0e7b4     1C 00 90 5D |  if_ne	jmp	#LR__1124
0e7b8     A7 12 02 FB | 	rdlong	arg01, fp
0e7bc     0C 4E 05 F1 | 	add	fp, #12
0e7c0     A7 14 02 FB | 	rdlong	arg02, fp
0e7c4     0C 4E 85 F1 | 	sub	fp, #12
0e7c8     D4 D0 B0 FD | 	call	#__system___float_div
0e7cc     A7 FA 61 FC | 	wrlong	result1, fp
0e7d0     10 00 90 FD | 	jmp	#LR__1125
0e7d4                 | LR__1124
0e7d4     A7 16 68 FC | 	wrlong	#11, fp
0e7d8     08 4E 05 F1 | 	add	fp, #8
0e7dc     A7 FE 69 FC | 	wrlong	#255, fp
0e7e0     08 4E 85 F1 | 	sub	fp, #8
0e7e4                 | LR__1125
0e7e4     A7 12 02 F6 | 	mov	arg01, fp
0e7e8     64 B0 BF FD | 	call	#_push
0e7ec     A7 F0 03 F6 | 	mov	ptra, fp
0e7f0     B2 00 A0 FD | 	call	#popregs_
0e7f4                 | _do_fdiv_ret
0e7f4     2D 00 64 FD | 	ret
0e7f8                 | 
0e7f8                 | ' 
0e7f8                 | ' 
0e7f8                 | ' sub do_mod 
0e7f8                 | _do_mod
0e7f8     01 4A 05 F6 | 	mov	COUNT_, #1
0e7fc     A8 00 A0 FD | 	call	#pushregs_
0e800     18 F0 07 F1 | 	add	ptra, #24
0e804     B0 AF BF FD | 	call	#_pop
0e808     FD 66 02 F6 | 	mov	muldivb_, result1
0e80c     FE 64 02 F6 | 	mov	muldiva_, result2
0e810     FF 1E 02 F6 | 	mov	local01, result3
0e814     0C 4E 05 F1 | 	add	fp, #12
0e818     A7 66 62 FC | 	wrlong	muldivb_, fp
0e81c     04 4E 05 F1 | 	add	fp, #4
0e820     A7 64 62 FC | 	wrlong	muldiva_, fp
0e824     04 4E 05 F1 | 	add	fp, #4
0e828     A7 1E 62 FC | 	wrlong	local01, fp
0e82c     14 4E 85 F1 | 	sub	fp, #20
0e830     84 AF BF FD | 	call	#_pop
0e834     A7 FA 61 FC | 	wrlong	result1, fp
0e838     04 4E 05 F1 | 	add	fp, #4
0e83c     A7 FC 61 FC | 	wrlong	result2, fp
0e840     04 4E 05 F1 | 	add	fp, #4
0e844     A7 FE 61 FC | 	wrlong	result3, fp
0e848                 | ' 
0e848                 | ' t2=pop()
0e848                 | ' t1=pop()
0e848                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0e848     08 4E 85 F1 | 	sub	fp, #8
0e84c     1F FE 0D F2 | 	cmp	result3, #31 wz
0e850     14 4E 05 51 |  if_ne	add	fp, #20
0e854     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0e858     14 4E 85 51 |  if_ne	sub	fp, #20
0e85c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0e860     A7 14 68 AC |  if_e	wrlong	#10, fp
0e864     08 4E 05 A1 |  if_e	add	fp, #8
0e868     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e86c     08 4E 85 A1 |  if_e	sub	fp, #8
0e870     90 01 90 AD |  if_e	jmp	#LR__1136
0e874                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0e874     08 4E 05 F1 | 	add	fp, #8
0e878     A7 66 02 FB | 	rdlong	muldivb_, fp
0e87c     08 4E 85 F1 | 	sub	fp, #8
0e880     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
0e884     1C 00 90 5D |  if_ne	jmp	#LR__1130
0e888     08 4E 05 F1 | 	add	fp, #8
0e88c     A7 38 68 FC | 	wrlong	#28, fp
0e890     08 4E 85 F1 | 	sub	fp, #8
0e894     A7 12 02 FB | 	rdlong	arg01, fp
0e898     00 14 06 F6 | 	mov	arg02, #0
0e89c     C4 D2 B0 FD | 	call	#__system___float_tointeger
0e8a0     A7 FA 61 FC | 	wrlong	result1, fp
0e8a4                 | LR__1130
0e8a4                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0e8a4     14 4E 05 F1 | 	add	fp, #20
0e8a8     A7 66 02 FB | 	rdlong	muldivb_, fp
0e8ac     14 4E 85 F1 | 	sub	fp, #20
0e8b0     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
0e8b4     28 00 90 5D |  if_ne	jmp	#LR__1131
0e8b8     14 4E 05 F1 | 	add	fp, #20
0e8bc     A7 38 68 FC | 	wrlong	#28, fp
0e8c0     08 4E 85 F1 | 	sub	fp, #8
0e8c4     A7 12 02 FB | 	rdlong	arg01, fp
0e8c8     0C 4E 85 F1 | 	sub	fp, #12
0e8cc     00 14 06 F6 | 	mov	arg02, #0
0e8d0     90 D2 B0 FD | 	call	#__system___float_tointeger
0e8d4     0C 4E 05 F1 | 	add	fp, #12
0e8d8     A7 FA 61 FC | 	wrlong	result1, fp
0e8dc     0C 4E 85 F1 | 	sub	fp, #12
0e8e0                 | LR__1131
0e8e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0e8e0     08 4E 05 F1 | 	add	fp, #8
0e8e4     A7 66 02 FB | 	rdlong	muldivb_, fp
0e8e8     08 4E 85 F1 | 	sub	fp, #8
0e8ec     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
0e8f0     14 4E 05 A1 |  if_e	add	fp, #20
0e8f4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e8f8     14 4E 85 A1 |  if_e	sub	fp, #20
0e8fc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e900     20 00 90 5D |  if_ne	jmp	#LR__1132
0e904     0C 4E 05 F1 | 	add	fp, #12
0e908     A7 1E 02 FB | 	rdlong	local01, fp
0e90c     0C 4E 85 F1 | 	sub	fp, #12
0e910     A7 66 02 FB | 	rdlong	muldivb_, fp
0e914     0F 67 12 FD | 	qdiv	muldivb_, local01
0e918     19 1E 62 FD | 	getqy	local01
0e91c     A7 1E 62 FC | 	wrlong	local01, fp
0e920     E0 00 90 FD | 	jmp	#LR__1136
0e924                 | LR__1132
0e924                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0e924     08 4E 05 F1 | 	add	fp, #8
0e928     A7 66 02 FB | 	rdlong	muldivb_, fp
0e92c     08 4E 85 F1 | 	sub	fp, #8
0e930     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
0e934     14 4E 05 A1 |  if_e	add	fp, #20
0e938     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e93c     14 4E 85 A1 |  if_e	sub	fp, #20
0e940     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e944     2C 00 90 5D |  if_ne	jmp	#LR__1133
0e948     0C 4E 05 F1 | 	add	fp, #12
0e94c     A7 1E 02 FB | 	rdlong	local01, fp
0e950     0C 4E 85 F1 | 	sub	fp, #12
0e954     A7 66 02 FB | 	rdlong	muldivb_, fp
0e958     0F 67 12 FD | 	qdiv	muldivb_, local01
0e95c     19 1E 62 FD | 	getqy	local01
0e960     A7 1E 62 FC | 	wrlong	local01, fp
0e964     08 4E 05 F1 | 	add	fp, #8
0e968     A7 38 68 FC | 	wrlong	#28, fp
0e96c     08 4E 85 F1 | 	sub	fp, #8
0e970     90 00 90 FD | 	jmp	#LR__1136
0e974                 | LR__1133
0e974                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0e974     08 4E 05 F1 | 	add	fp, #8
0e978     A7 66 02 FB | 	rdlong	muldivb_, fp
0e97c     08 4E 85 F1 | 	sub	fp, #8
0e980     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
0e984     14 4E 05 A1 |  if_e	add	fp, #20
0e988     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e98c     14 4E 85 A1 |  if_e	sub	fp, #20
0e990     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e994     1C 00 90 5D |  if_ne	jmp	#LR__1134
0e998     A7 64 02 FB | 	rdlong	muldiva_, fp
0e99c     0C 4E 05 F1 | 	add	fp, #12
0e9a0     A7 66 02 FB | 	rdlong	muldivb_, fp
0e9a4     0C 4E 85 F1 | 	sub	fp, #12
0e9a8     BA 00 A0 FD | 	call	#divide_
0e9ac     A7 64 62 FC | 	wrlong	muldiva_, fp
0e9b0     50 00 90 FD | 	jmp	#LR__1136
0e9b4                 | LR__1134
0e9b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0e9b4     08 4E 05 F1 | 	add	fp, #8
0e9b8     A7 66 02 FB | 	rdlong	muldivb_, fp
0e9bc     08 4E 85 F1 | 	sub	fp, #8
0e9c0     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
0e9c4     14 4E 05 A1 |  if_e	add	fp, #20
0e9c8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e9cc     14 4E 85 A1 |  if_e	sub	fp, #20
0e9d0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e9d4     1C 00 90 5D |  if_ne	jmp	#LR__1135
0e9d8     A7 64 02 FB | 	rdlong	muldiva_, fp
0e9dc     0C 4E 05 F1 | 	add	fp, #12
0e9e0     A7 66 02 FB | 	rdlong	muldivb_, fp
0e9e4     0C 4E 85 F1 | 	sub	fp, #12
0e9e8     BA 00 A0 FD | 	call	#divide_
0e9ec     A7 64 62 FC | 	wrlong	muldiva_, fp
0e9f0     10 00 90 FD | 	jmp	#LR__1136
0e9f4                 | LR__1135
0e9f4     A7 16 68 FC | 	wrlong	#11, fp
0e9f8     08 4E 05 F1 | 	add	fp, #8
0e9fc     A7 FE 69 FC | 	wrlong	#255, fp
0ea00     08 4E 85 F1 | 	sub	fp, #8
0ea04                 | LR__1136
0ea04     A7 12 02 F6 | 	mov	arg01, fp
0ea08     44 AE BF FD | 	call	#_push
0ea0c     A7 F0 03 F6 | 	mov	ptra, fp
0ea10     B2 00 A0 FD | 	call	#popregs_
0ea14                 | _do_mod_ret
0ea14     2D 00 64 FD | 	ret
0ea18                 | 
0ea18                 | ' 
0ea18                 | ' sub do_shl 
0ea18                 | _do_shl
0ea18     03 4A 05 F6 | 	mov	COUNT_, #3
0ea1c     A8 00 A0 FD | 	call	#pushregs_
0ea20     18 F0 07 F1 | 	add	ptra, #24
0ea24     90 AD BF FD | 	call	#_pop
0ea28     FD 12 02 F6 | 	mov	arg01, result1
0ea2c     FE 1E 02 F6 | 	mov	local01, result2
0ea30     FF 20 02 F6 | 	mov	local02, result3
0ea34     0C 4E 05 F1 | 	add	fp, #12
0ea38     A7 12 62 FC | 	wrlong	arg01, fp
0ea3c     04 4E 05 F1 | 	add	fp, #4
0ea40     A7 1E 62 FC | 	wrlong	local01, fp
0ea44     04 4E 05 F1 | 	add	fp, #4
0ea48     A7 20 62 FC | 	wrlong	local02, fp
0ea4c     14 4E 85 F1 | 	sub	fp, #20
0ea50     64 AD BF FD | 	call	#_pop
0ea54     FF 22 02 F6 | 	mov	local03, result3
0ea58     A7 FA 61 FC | 	wrlong	result1, fp
0ea5c     04 4E 05 F1 | 	add	fp, #4
0ea60     A7 FC 61 FC | 	wrlong	result2, fp
0ea64     04 4E 05 F1 | 	add	fp, #4
0ea68     A7 22 62 FC | 	wrlong	local03, fp
0ea6c                 | ' 
0ea6c                 | ' t2=pop()
0ea6c                 | ' t1=pop()
0ea6c                 | ' 
0ea6c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0ea6c     08 4E 85 F1 | 	sub	fp, #8
0ea70     1C 22 0E F2 | 	cmp	local03, #28 wz
0ea74     A7 22 02 AB |  if_e	rdlong	local03, fp
0ea78     A7 22 62 AC |  if_e	wrlong	local03, fp
0ea7c     08 4E 05 A1 |  if_e	add	fp, #8
0ea80     A7 3A 68 AC |  if_e	wrlong	#29, fp
0ea84     08 4E 85 A1 |  if_e	sub	fp, #8
0ea88                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0ea88     14 4E 05 F1 | 	add	fp, #20
0ea8c     A7 22 02 FB | 	rdlong	local03, fp
0ea90     14 4E 85 F1 | 	sub	fp, #20
0ea94     1C 22 0E F2 | 	cmp	local03, #28 wz
0ea98     18 00 90 5D |  if_ne	jmp	#LR__1140
0ea9c     0C 4E 05 F1 | 	add	fp, #12
0eaa0     A7 22 02 FB | 	rdlong	local03, fp
0eaa4     A7 22 62 FC | 	wrlong	local03, fp
0eaa8     08 4E 05 F1 | 	add	fp, #8
0eaac     A7 3A 68 FC | 	wrlong	#29, fp
0eab0     14 4E 85 F1 | 	sub	fp, #20
0eab4                 | LR__1140
0eab4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0eab4     08 4E 05 F1 | 	add	fp, #8
0eab8     A7 22 02 FB | 	rdlong	local03, fp
0eabc     08 4E 85 F1 | 	sub	fp, #8
0eac0     1F 22 0E F2 | 	cmp	local03, #31 wz
0eac4     14 4E 05 51 |  if_ne	add	fp, #20
0eac8     A7 20 02 5B |  if_ne	rdlong	local02, fp
0eacc     14 4E 85 51 |  if_ne	sub	fp, #20
0ead0     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0ead4     08 4E 05 51 |  if_ne	add	fp, #8
0ead8     A7 22 02 5B |  if_ne	rdlong	local03, fp
0eadc     08 4E 85 51 |  if_ne	sub	fp, #8
0eae0     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0eae4     14 4E 05 51 |  if_ne	add	fp, #20
0eae8     14 4E 85 51 |  if_ne	sub	fp, #20
0eaec     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0eaf0     A7 0C 68 AC |  if_e	wrlong	#6, fp
0eaf4     08 4E 05 A1 |  if_e	add	fp, #8
0eaf8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0eafc     08 4E 85 A1 |  if_e	sub	fp, #8
0eb00     18 00 90 AD |  if_e	jmp	#LR__1141
0eb04     A7 22 02 FB | 	rdlong	local03, fp
0eb08     0C 4E 05 F1 | 	add	fp, #12
0eb0c     A7 1E 02 FB | 	rdlong	local01, fp
0eb10     0C 4E 85 F1 | 	sub	fp, #12
0eb14     0F 23 62 F0 | 	shl	local03, local01
0eb18     A7 22 62 FC | 	wrlong	local03, fp
0eb1c                 | LR__1141
0eb1c     A7 12 02 F6 | 	mov	arg01, fp
0eb20     2C AD BF FD | 	call	#_push
0eb24     A7 F0 03 F6 | 	mov	ptra, fp
0eb28     B2 00 A0 FD | 	call	#popregs_
0eb2c                 | _do_shl_ret
0eb2c     2D 00 64 FD | 	ret
0eb30                 | 
0eb30                 | ' 
0eb30                 | ' sub do_shr 
0eb30                 | _do_shr
0eb30     03 4A 05 F6 | 	mov	COUNT_, #3
0eb34     A8 00 A0 FD | 	call	#pushregs_
0eb38     18 F0 07 F1 | 	add	ptra, #24
0eb3c     78 AC BF FD | 	call	#_pop
0eb40     FD 12 02 F6 | 	mov	arg01, result1
0eb44     FE 1E 02 F6 | 	mov	local01, result2
0eb48     FF 20 02 F6 | 	mov	local02, result3
0eb4c     0C 4E 05 F1 | 	add	fp, #12
0eb50     A7 12 62 FC | 	wrlong	arg01, fp
0eb54     04 4E 05 F1 | 	add	fp, #4
0eb58     A7 1E 62 FC | 	wrlong	local01, fp
0eb5c     04 4E 05 F1 | 	add	fp, #4
0eb60     A7 20 62 FC | 	wrlong	local02, fp
0eb64     14 4E 85 F1 | 	sub	fp, #20
0eb68     4C AC BF FD | 	call	#_pop
0eb6c     FF 22 02 F6 | 	mov	local03, result3
0eb70     A7 FA 61 FC | 	wrlong	result1, fp
0eb74     04 4E 05 F1 | 	add	fp, #4
0eb78     A7 FC 61 FC | 	wrlong	result2, fp
0eb7c     04 4E 05 F1 | 	add	fp, #4
0eb80     A7 22 62 FC | 	wrlong	local03, fp
0eb84                 | ' t2=pop()
0eb84                 | ' t1=pop()
0eb84                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0eb84     08 4E 85 F1 | 	sub	fp, #8
0eb88     1C 22 0E F2 | 	cmp	local03, #28 wz
0eb8c     A7 22 02 AB |  if_e	rdlong	local03, fp
0eb90     A7 22 62 AC |  if_e	wrlong	local03, fp
0eb94     08 4E 05 A1 |  if_e	add	fp, #8
0eb98     A7 3A 68 AC |  if_e	wrlong	#29, fp
0eb9c     08 4E 85 A1 |  if_e	sub	fp, #8
0eba0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0eba0     14 4E 05 F1 | 	add	fp, #20
0eba4     A7 22 02 FB | 	rdlong	local03, fp
0eba8     14 4E 85 F1 | 	sub	fp, #20
0ebac     1C 22 0E F2 | 	cmp	local03, #28 wz
0ebb0     18 00 90 5D |  if_ne	jmp	#LR__1150
0ebb4     0C 4E 05 F1 | 	add	fp, #12
0ebb8     A7 22 02 FB | 	rdlong	local03, fp
0ebbc     A7 22 62 FC | 	wrlong	local03, fp
0ebc0     08 4E 05 F1 | 	add	fp, #8
0ebc4     A7 3A 68 FC | 	wrlong	#29, fp
0ebc8     14 4E 85 F1 | 	sub	fp, #20
0ebcc                 | LR__1150
0ebcc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0ebcc     08 4E 05 F1 | 	add	fp, #8
0ebd0     A7 22 02 FB | 	rdlong	local03, fp
0ebd4     08 4E 85 F1 | 	sub	fp, #8
0ebd8     1F 22 0E F2 | 	cmp	local03, #31 wz
0ebdc     14 4E 05 51 |  if_ne	add	fp, #20
0ebe0     A7 20 02 5B |  if_ne	rdlong	local02, fp
0ebe4     14 4E 85 51 |  if_ne	sub	fp, #20
0ebe8     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0ebec     08 4E 05 51 |  if_ne	add	fp, #8
0ebf0     A7 22 02 5B |  if_ne	rdlong	local03, fp
0ebf4     08 4E 85 51 |  if_ne	sub	fp, #8
0ebf8     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0ebfc     14 4E 05 51 |  if_ne	add	fp, #20
0ec00     14 4E 85 51 |  if_ne	sub	fp, #20
0ec04     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0ec08     A7 0C 68 AC |  if_e	wrlong	#6, fp
0ec0c     08 4E 05 A1 |  if_e	add	fp, #8
0ec10     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ec14     08 4E 85 A1 |  if_e	sub	fp, #8
0ec18     18 00 90 AD |  if_e	jmp	#LR__1151
0ec1c     A7 22 02 FB | 	rdlong	local03, fp
0ec20     0C 4E 05 F1 | 	add	fp, #12
0ec24     A7 1E 02 FB | 	rdlong	local01, fp
0ec28     0C 4E 85 F1 | 	sub	fp, #12
0ec2c     0F 23 42 F0 | 	shr	local03, local01
0ec30     A7 22 62 FC | 	wrlong	local03, fp
0ec34                 | LR__1151
0ec34     A7 12 02 F6 | 	mov	arg01, fp
0ec38     14 AC BF FD | 	call	#_push
0ec3c     A7 F0 03 F6 | 	mov	ptra, fp
0ec40     B2 00 A0 FD | 	call	#popregs_
0ec44                 | _do_shr_ret
0ec44     2D 00 64 FD | 	ret
0ec48                 | 
0ec48                 | ' 
0ec48                 | ' sub do_power 
0ec48                 | _do_power
0ec48     02 4A 05 F6 | 	mov	COUNT_, #2
0ec4c     A8 00 A0 FD | 	call	#pushregs_
0ec50     18 F0 07 F1 | 	add	ptra, #24
0ec54     60 AB BF FD | 	call	#_pop
0ec58     FD 14 02 F6 | 	mov	arg02, result1
0ec5c     FE 12 02 F6 | 	mov	arg01, result2
0ec60     FF 1E 02 F6 | 	mov	local01, result3
0ec64     0C 4E 05 F1 | 	add	fp, #12
0ec68     A7 14 62 FC | 	wrlong	arg02, fp
0ec6c     04 4E 05 F1 | 	add	fp, #4
0ec70     A7 12 62 FC | 	wrlong	arg01, fp
0ec74     04 4E 05 F1 | 	add	fp, #4
0ec78     A7 1E 62 FC | 	wrlong	local01, fp
0ec7c     14 4E 85 F1 | 	sub	fp, #20
0ec80     34 AB BF FD | 	call	#_pop
0ec84     A7 FA 61 FC | 	wrlong	result1, fp
0ec88     04 4E 05 F1 | 	add	fp, #4
0ec8c     A7 FC 61 FC | 	wrlong	result2, fp
0ec90     04 4E 05 F1 | 	add	fp, #4
0ec94     A7 FE 61 FC | 	wrlong	result3, fp
0ec98                 | ' t2=pop()
0ec98                 | ' t1=pop()
0ec98                 | ' 
0ec98                 | ' 
0ec98                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0ec98     08 4E 85 F1 | 	sub	fp, #8
0ec9c     1F FE 0D F2 | 	cmp	result3, #31 wz
0eca0     14 4E 05 51 |  if_ne	add	fp, #20
0eca4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0eca8     14 4E 85 51 |  if_ne	sub	fp, #20
0ecac     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0ecb0     A7 18 68 AC |  if_e	wrlong	#12, fp
0ecb4     08 4E 05 A1 |  if_e	add	fp, #8
0ecb8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ecbc     08 4E 85 A1 |  if_e	sub	fp, #8
0ecc0     38 01 90 AD |  if_e	jmp	#LR__1165
0ecc4                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0ecc4     08 4E 05 F1 | 	add	fp, #8
0ecc8     A7 14 02 FB | 	rdlong	arg02, fp
0eccc     08 4E 85 F1 | 	sub	fp, #8
0ecd0     1C 14 0E F2 | 	cmp	arg02, #28 wz
0ecd4     28 00 90 5D |  if_ne	jmp	#LR__1160
0ecd8     08 4E 05 F1 | 	add	fp, #8
0ecdc     A7 3C 68 FC | 	wrlong	#30, fp
0ece0     08 4E 85 F1 | 	sub	fp, #8
0ece4     A7 12 02 FB | 	rdlong	arg01, fp
0ece8     09 13 52 F6 | 	abs	arg01, arg01 wc
0ecec     1F 20 C6 C9 |  if_b	decod	local02, #31
0ecf0     00 20 06 36 |  if_ae	mov	local02, #0
0ecf4     A0 C5 B0 FD | 	call	#__system___float_fromuns
0ecf8     10 FB 61 F5 | 	xor	result1, local02
0ecfc     A7 FA 61 FC | 	wrlong	result1, fp
0ed00                 | LR__1160
0ed00                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0ed00     08 4E 05 F1 | 	add	fp, #8
0ed04     A7 14 02 FB | 	rdlong	arg02, fp
0ed08     08 4E 85 F1 | 	sub	fp, #8
0ed0c     1D 14 0E F2 | 	cmp	arg02, #29 wz
0ed10     18 00 90 5D |  if_ne	jmp	#LR__1161
0ed14     08 4E 05 F1 | 	add	fp, #8
0ed18     A7 3C 68 FC | 	wrlong	#30, fp
0ed1c     08 4E 85 F1 | 	sub	fp, #8
0ed20     A7 12 02 FB | 	rdlong	arg01, fp
0ed24     70 C5 B0 FD | 	call	#__system___float_fromuns
0ed28     A7 FA 61 FC | 	wrlong	result1, fp
0ed2c                 | LR__1161
0ed2c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0ed2c     14 4E 05 F1 | 	add	fp, #20
0ed30     A7 14 02 FB | 	rdlong	arg02, fp
0ed34     14 4E 85 F1 | 	sub	fp, #20
0ed38     1C 14 0E F2 | 	cmp	arg02, #28 wz
0ed3c     34 00 90 5D |  if_ne	jmp	#LR__1162
0ed40     14 4E 05 F1 | 	add	fp, #20
0ed44     A7 3C 68 FC | 	wrlong	#30, fp
0ed48     08 4E 85 F1 | 	sub	fp, #8
0ed4c     A7 12 02 FB | 	rdlong	arg01, fp
0ed50     0C 4E 85 F1 | 	sub	fp, #12
0ed54     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed58     1F 20 C6 C9 |  if_b	decod	local02, #31
0ed5c     00 20 06 36 |  if_ae	mov	local02, #0
0ed60     34 C5 B0 FD | 	call	#__system___float_fromuns
0ed64     10 FB 61 F5 | 	xor	result1, local02
0ed68     0C 4E 05 F1 | 	add	fp, #12
0ed6c     A7 FA 61 FC | 	wrlong	result1, fp
0ed70     0C 4E 85 F1 | 	sub	fp, #12
0ed74                 | LR__1162
0ed74                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0ed74     14 4E 05 F1 | 	add	fp, #20
0ed78     A7 14 02 FB | 	rdlong	arg02, fp
0ed7c     14 4E 85 F1 | 	sub	fp, #20
0ed80     1D 14 0E F2 | 	cmp	arg02, #29 wz
0ed84     24 00 90 5D |  if_ne	jmp	#LR__1163
0ed88     14 4E 05 F1 | 	add	fp, #20
0ed8c     A7 3C 68 FC | 	wrlong	#30, fp
0ed90     08 4E 85 F1 | 	sub	fp, #8
0ed94     A7 12 02 FB | 	rdlong	arg01, fp
0ed98     0C 4E 85 F1 | 	sub	fp, #12
0ed9c     F8 C4 B0 FD | 	call	#__system___float_fromuns
0eda0     0C 4E 05 F1 | 	add	fp, #12
0eda4     A7 FA 61 FC | 	wrlong	result1, fp
0eda8     0C 4E 85 F1 | 	sub	fp, #12
0edac                 | LR__1163
0edac                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0edac     08 4E 05 F1 | 	add	fp, #8
0edb0     A7 14 02 FB | 	rdlong	arg02, fp
0edb4     08 4E 85 F1 | 	sub	fp, #8
0edb8     1E 14 0E F2 | 	cmp	arg02, #30 wz
0edbc     14 4E 05 A1 |  if_e	add	fp, #20
0edc0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0edc4     14 4E 85 A1 |  if_e	sub	fp, #20
0edc8     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0edcc     1C 00 90 5D |  if_ne	jmp	#LR__1164
0edd0     A7 12 02 FB | 	rdlong	arg01, fp
0edd4     0C 4E 05 F1 | 	add	fp, #12
0edd8     A7 14 02 FB | 	rdlong	arg02, fp
0eddc     0C 4E 85 F1 | 	sub	fp, #12
0ede0     9C D7 B0 FD | 	call	#__system____builtin_powf
0ede4     A7 FA 61 FC | 	wrlong	result1, fp
0ede8     10 00 90 FD | 	jmp	#LR__1165
0edec                 | LR__1164
0edec     A7 1A 68 FC | 	wrlong	#13, fp
0edf0     08 4E 05 F1 | 	add	fp, #8
0edf4     A7 FE 69 FC | 	wrlong	#255, fp
0edf8     08 4E 85 F1 | 	sub	fp, #8
0edfc                 | LR__1165
0edfc     A7 12 02 F6 | 	mov	arg01, fp
0ee00     4C AA BF FD | 	call	#_push
0ee04     A7 F0 03 F6 | 	mov	ptra, fp
0ee08     B2 00 A0 FD | 	call	#popregs_
0ee0c                 | _do_power_ret
0ee0c     2D 00 64 FD | 	ret
0ee10                 | 
0ee10                 | ' 
0ee10                 | ' 
0ee10                 | ' sub do_eq
0ee10                 | _do_eq
0ee10     05 4A 05 F6 | 	mov	COUNT_, #5
0ee14     A8 00 A0 FD | 	call	#pushregs_
0ee18     18 F0 07 F1 | 	add	ptra, #24
0ee1c     98 A9 BF FD | 	call	#_pop
0ee20     FD 1E 02 F6 | 	mov	local01, result1
0ee24     FE 20 02 F6 | 	mov	local02, result2
0ee28     FF 22 02 F6 | 	mov	local03, result3
0ee2c     0C 4E 05 F1 | 	add	fp, #12
0ee30     A7 1E 62 FC | 	wrlong	local01, fp
0ee34     04 4E 05 F1 | 	add	fp, #4
0ee38     A7 20 62 FC | 	wrlong	local02, fp
0ee3c     04 4E 05 F1 | 	add	fp, #4
0ee40     A7 22 62 FC | 	wrlong	local03, fp
0ee44     14 4E 85 F1 | 	sub	fp, #20
0ee48     6C A9 BF FD | 	call	#_pop
0ee4c     FF 22 02 F6 | 	mov	local03, result3
0ee50     A7 FA 61 FC | 	wrlong	result1, fp
0ee54     04 4E 05 F1 | 	add	fp, #4
0ee58     A7 FC 61 FC | 	wrlong	result2, fp
0ee5c     04 4E 05 F1 | 	add	fp, #4
0ee60     A7 22 62 FC | 	wrlong	local03, fp
0ee64                 | ' t2=pop()
0ee64                 | ' t1=pop()
0ee64                 | ' 
0ee64                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0ee64     08 4E 85 F1 | 	sub	fp, #8
0ee68     1F 22 0E F2 | 	cmp	local03, #31 wz
0ee6c     14 4E 05 A1 |  if_e	add	fp, #20
0ee70     A7 24 02 AB |  if_e	rdlong	local04, fp
0ee74     14 4E 85 A1 |  if_e	sub	fp, #20
0ee78     12 23 02 A6 |  if_e	mov	local03, local04
0ee7c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0ee80     28 00 90 5D |  if_ne	jmp	#LR__1170
0ee84     00 1E 06 F6 | 	mov	local01, #0
0ee88     A7 12 02 FB | 	rdlong	arg01, fp
0ee8c     0C 4E 05 F1 | 	add	fp, #12
0ee90     A7 14 02 FB | 	rdlong	arg02, fp
0ee94     0C 4E 85 F1 | 	sub	fp, #12
0ee98     3C 9D B0 FD | 	call	#__system___string_cmp
0ee9c     00 FA 0D F2 | 	cmp	result1, #0 wz
0eea0     00 1E 26 A6 |  if_e	not	local01, #0
0eea4     A7 1E 62 FC | 	wrlong	local01, fp
0eea8     1C 04 90 FD | 	jmp	#LR__1183
0eeac                 | LR__1170
0eeac                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0eeac     08 4E 05 F1 | 	add	fp, #8
0eeb0     A7 1E 02 FB | 	rdlong	local01, fp
0eeb4     08 4E 85 F1 | 	sub	fp, #8
0eeb8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0eebc     14 4E 05 A1 |  if_e	add	fp, #20
0eec0     A7 24 02 AB |  if_e	rdlong	local04, fp
0eec4     14 4E 85 A1 |  if_e	sub	fp, #20
0eec8     12 23 02 A6 |  if_e	mov	local03, local04
0eecc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0eed0     2C 00 90 5D |  if_ne	jmp	#LR__1171
0eed4     00 1E 06 F6 | 	mov	local01, #0
0eed8     A7 12 02 FB | 	rdlong	arg01, fp
0eedc     0C 4E 05 F1 | 	add	fp, #12
0eee0     A7 14 02 FB | 	rdlong	arg02, fp
0eee4     0C 4E 85 F1 | 	sub	fp, #12
0eee8     01 16 06 F6 | 	mov	arg03, #1
0eeec     E0 CB B0 FD | 	call	#__system___float_cmp
0eef0     00 FA 0D F2 | 	cmp	result1, #0 wz
0eef4     00 1E 26 A6 |  if_e	not	local01, #0
0eef8     A7 1E 62 FC | 	wrlong	local01, fp
0eefc     C8 03 90 FD | 	jmp	#LR__1183
0ef00                 | LR__1171
0ef00                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0ef00     08 4E 05 F1 | 	add	fp, #8
0ef04     A7 1E 02 FB | 	rdlong	local01, fp
0ef08     08 4E 85 F1 | 	sub	fp, #8
0ef0c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ef10     14 4E 05 A1 |  if_e	add	fp, #20
0ef14     A7 24 02 AB |  if_e	rdlong	local04, fp
0ef18     14 4E 85 A1 |  if_e	sub	fp, #20
0ef1c     12 23 02 A6 |  if_e	mov	local03, local04
0ef20     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ef24     48 00 90 5D |  if_ne	jmp	#LR__1172
0ef28     00 1E 06 F6 | 	mov	local01, #0
0ef2c     A7 20 02 FB | 	rdlong	local02, fp
0ef30     0C 4E 05 F1 | 	add	fp, #12
0ef34     A7 12 02 FB | 	rdlong	arg01, fp
0ef38     0C 4E 85 F1 | 	sub	fp, #12
0ef3c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ef40     1F 26 C6 C9 |  if_b	decod	local05, #31
0ef44     00 26 06 36 |  if_ae	mov	local05, #0
0ef48     4C C3 B0 FD | 	call	#__system___float_fromuns
0ef4c     13 FB 61 F5 | 	xor	result1, local05
0ef50     FD 14 02 F6 | 	mov	arg02, result1
0ef54     10 13 02 F6 | 	mov	arg01, local02
0ef58     01 16 06 F6 | 	mov	arg03, #1
0ef5c     70 CB B0 FD | 	call	#__system___float_cmp
0ef60     00 FA 0D F2 | 	cmp	result1, #0 wz
0ef64     00 1E 26 A6 |  if_e	not	local01, #0
0ef68     A7 1E 62 FC | 	wrlong	local01, fp
0ef6c     58 03 90 FD | 	jmp	#LR__1183
0ef70                 | LR__1172
0ef70                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0ef70     08 4E 05 F1 | 	add	fp, #8
0ef74     A7 1E 02 FB | 	rdlong	local01, fp
0ef78     08 4E 85 F1 | 	sub	fp, #8
0ef7c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ef80     14 4E 05 A1 |  if_e	add	fp, #20
0ef84     A7 24 02 AB |  if_e	rdlong	local04, fp
0ef88     14 4E 85 A1 |  if_e	sub	fp, #20
0ef8c     12 23 02 A6 |  if_e	mov	local03, local04
0ef90     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ef94     38 00 90 5D |  if_ne	jmp	#LR__1173
0ef98     00 1E 06 F6 | 	mov	local01, #0
0ef9c     A7 20 02 FB | 	rdlong	local02, fp
0efa0     0C 4E 05 F1 | 	add	fp, #12
0efa4     A7 12 02 FB | 	rdlong	arg01, fp
0efa8     0C 4E 85 F1 | 	sub	fp, #12
0efac     E8 C2 B0 FD | 	call	#__system___float_fromuns
0efb0     FD 14 02 F6 | 	mov	arg02, result1
0efb4     10 13 02 F6 | 	mov	arg01, local02
0efb8     01 16 06 F6 | 	mov	arg03, #1
0efbc     10 CB B0 FD | 	call	#__system___float_cmp
0efc0     00 FA 0D F2 | 	cmp	result1, #0 wz
0efc4     00 1E 26 A6 |  if_e	not	local01, #0
0efc8     A7 1E 62 FC | 	wrlong	local01, fp
0efcc     F8 02 90 FD | 	jmp	#LR__1183
0efd0                 | LR__1173
0efd0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0efd0     08 4E 05 F1 | 	add	fp, #8
0efd4     A7 1E 02 FB | 	rdlong	local01, fp
0efd8     08 4E 85 F1 | 	sub	fp, #8
0efdc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0efe0     14 4E 05 A1 |  if_e	add	fp, #20
0efe4     A7 24 02 AB |  if_e	rdlong	local04, fp
0efe8     14 4E 85 A1 |  if_e	sub	fp, #20
0efec     12 23 02 A6 |  if_e	mov	local03, local04
0eff0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0eff4     44 00 90 5D |  if_ne	jmp	#LR__1174
0eff8     00 1E 06 F6 | 	mov	local01, #0
0effc     A7 12 02 FB | 	rdlong	arg01, fp
0f000     09 13 52 F6 | 	abs	arg01, arg01 wc
0f004     1F 26 C6 C9 |  if_b	decod	local05, #31
0f008     00 26 06 36 |  if_ae	mov	local05, #0
0f00c     88 C2 B0 FD | 	call	#__system___float_fromuns
0f010     13 FB 61 F5 | 	xor	result1, local05
0f014     FD 12 02 F6 | 	mov	arg01, result1
0f018     0C 4E 05 F1 | 	add	fp, #12
0f01c     A7 14 02 FB | 	rdlong	arg02, fp
0f020     0C 4E 85 F1 | 	sub	fp, #12
0f024     01 16 06 F6 | 	mov	arg03, #1
0f028     A4 CA B0 FD | 	call	#__system___float_cmp
0f02c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f030     00 1E 26 A6 |  if_e	not	local01, #0
0f034     A7 1E 62 FC | 	wrlong	local01, fp
0f038     8C 02 90 FD | 	jmp	#LR__1183
0f03c                 | LR__1174
0f03c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0f03c     08 4E 05 F1 | 	add	fp, #8
0f040     A7 1E 02 FB | 	rdlong	local01, fp
0f044     08 4E 85 F1 | 	sub	fp, #8
0f048     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f04c     14 4E 05 A1 |  if_e	add	fp, #20
0f050     A7 24 02 AB |  if_e	rdlong	local04, fp
0f054     14 4E 85 A1 |  if_e	sub	fp, #20
0f058     12 23 02 A6 |  if_e	mov	local03, local04
0f05c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f060     24 00 90 5D |  if_ne	jmp	#LR__1175
0f064     00 1E 06 F6 | 	mov	local01, #0
0f068     A7 20 02 FB | 	rdlong	local02, fp
0f06c     0C 4E 05 F1 | 	add	fp, #12
0f070     A7 22 02 FB | 	rdlong	local03, fp
0f074     0C 4E 85 F1 | 	sub	fp, #12
0f078     11 21 0A F2 | 	cmp	local02, local03 wz
0f07c     01 1E 66 A6 |  if_e	neg	local01, #1
0f080     A7 1E 62 FC | 	wrlong	local01, fp
0f084     40 02 90 FD | 	jmp	#LR__1183
0f088                 | LR__1175
0f088                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0f088     08 4E 05 F1 | 	add	fp, #8
0f08c     A7 1E 02 FB | 	rdlong	local01, fp
0f090     08 4E 85 F1 | 	sub	fp, #8
0f094     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f098     14 4E 05 A1 |  if_e	add	fp, #20
0f09c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f0a0     14 4E 85 A1 |  if_e	sub	fp, #20
0f0a4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f0a8     24 00 90 5D |  if_ne	jmp	#LR__1176
0f0ac     00 1E 06 F6 | 	mov	local01, #0
0f0b0     A7 20 02 FB | 	rdlong	local02, fp
0f0b4     0C 4E 05 F1 | 	add	fp, #12
0f0b8     A7 22 02 FB | 	rdlong	local03, fp
0f0bc     0C 4E 85 F1 | 	sub	fp, #12
0f0c0     11 21 0A F2 | 	cmp	local02, local03 wz
0f0c4     01 1E 66 A6 |  if_e	neg	local01, #1
0f0c8     A7 1E 62 FC | 	wrlong	local01, fp
0f0cc     F8 01 90 FD | 	jmp	#LR__1183
0f0d0                 | LR__1176
0f0d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0f0d0     08 4E 05 F1 | 	add	fp, #8
0f0d4     A7 1E 02 FB | 	rdlong	local01, fp
0f0d8     08 4E 85 F1 | 	sub	fp, #8
0f0dc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f0e0     14 4E 05 A1 |  if_e	add	fp, #20
0f0e4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f0e8     14 4E 85 A1 |  if_e	sub	fp, #20
0f0ec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f0f0     34 00 90 5D |  if_ne	jmp	#LR__1177
0f0f4     00 1E 06 F6 | 	mov	local01, #0
0f0f8     A7 12 02 FB | 	rdlong	arg01, fp
0f0fc     98 C1 B0 FD | 	call	#__system___float_fromuns
0f100     FD 12 02 F6 | 	mov	arg01, result1
0f104     0C 4E 05 F1 | 	add	fp, #12
0f108     A7 14 02 FB | 	rdlong	arg02, fp
0f10c     0C 4E 85 F1 | 	sub	fp, #12
0f110     01 16 06 F6 | 	mov	arg03, #1
0f114     B8 C9 B0 FD | 	call	#__system___float_cmp
0f118     00 FA 0D F2 | 	cmp	result1, #0 wz
0f11c     00 1E 26 A6 |  if_e	not	local01, #0
0f120     A7 1E 62 FC | 	wrlong	local01, fp
0f124     A0 01 90 FD | 	jmp	#LR__1183
0f128                 | LR__1177
0f128                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0f128     08 4E 05 F1 | 	add	fp, #8
0f12c     A7 1E 02 FB | 	rdlong	local01, fp
0f130     08 4E 85 F1 | 	sub	fp, #8
0f134     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f138     14 4E 05 A1 |  if_e	add	fp, #20
0f13c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f140     14 4E 85 A1 |  if_e	sub	fp, #20
0f144     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f148     24 00 90 5D |  if_ne	jmp	#LR__1178
0f14c     00 1E 06 F6 | 	mov	local01, #0
0f150     A7 20 02 FB | 	rdlong	local02, fp
0f154     0C 4E 05 F1 | 	add	fp, #12
0f158     A7 22 02 FB | 	rdlong	local03, fp
0f15c     0C 4E 85 F1 | 	sub	fp, #12
0f160     11 21 0A F2 | 	cmp	local02, local03 wz
0f164     01 1E 66 A6 |  if_e	neg	local01, #1
0f168     A7 1E 62 FC | 	wrlong	local01, fp
0f16c     58 01 90 FD | 	jmp	#LR__1183
0f170                 | LR__1178
0f170                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0f170     08 4E 05 F1 | 	add	fp, #8
0f174     A7 1E 02 FB | 	rdlong	local01, fp
0f178     08 4E 85 F1 | 	sub	fp, #8
0f17c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f180     14 4E 05 A1 |  if_e	add	fp, #20
0f184     A7 22 02 AB |  if_e	rdlong	local03, fp
0f188     14 4E 85 A1 |  if_e	sub	fp, #20
0f18c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f190     24 00 90 5D |  if_ne	jmp	#LR__1179
0f194     00 1E 06 F6 | 	mov	local01, #0
0f198     A7 20 02 FB | 	rdlong	local02, fp
0f19c     0C 4E 05 F1 | 	add	fp, #12
0f1a0     A7 22 02 FB | 	rdlong	local03, fp
0f1a4     0C 4E 85 F1 | 	sub	fp, #12
0f1a8     11 21 0A F2 | 	cmp	local02, local03 wz
0f1ac     01 1E 66 A6 |  if_e	neg	local01, #1
0f1b0     A7 1E 62 FC | 	wrlong	local01, fp
0f1b4     10 01 90 FD | 	jmp	#LR__1183
0f1b8                 | LR__1179
0f1b8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
0f1b8     08 4E 05 F1 | 	add	fp, #8
0f1bc     A7 1E 02 FB | 	rdlong	local01, fp
0f1c0     08 4E 85 F1 | 	sub	fp, #8
0f1c4     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f1c8     14 4E 05 A1 |  if_e	add	fp, #20
0f1cc     A7 22 02 AB |  if_e	rdlong	local03, fp
0f1d0     14 4E 85 A1 |  if_e	sub	fp, #20
0f1d4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f1d8     30 00 90 5D |  if_ne	jmp	#LR__1180
0f1dc     00 1E 06 F6 | 	mov	local01, #0
0f1e0     A7 12 02 FB | 	rdlong	arg01, fp
0f1e4     0C D7 BF FD | 	call	#_convertstring
0f1e8     FD 12 02 F6 | 	mov	arg01, result1
0f1ec     0C 4E 05 F1 | 	add	fp, #12
0f1f0     A7 14 02 FB | 	rdlong	arg02, fp
0f1f4     0C 4E 85 F1 | 	sub	fp, #12
0f1f8     DC 99 B0 FD | 	call	#__system___string_cmp
0f1fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0f200     00 1E 26 A6 |  if_e	not	local01, #0
0f204     A7 1E 62 FC | 	wrlong	local01, fp
0f208     BC 00 90 FD | 	jmp	#LR__1183
0f20c                 | LR__1180
0f20c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
0f20c     08 4E 05 F1 | 	add	fp, #8
0f210     A7 1E 02 FB | 	rdlong	local01, fp
0f214     08 4E 85 F1 | 	sub	fp, #8
0f218     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f21c     14 4E 05 A1 |  if_e	add	fp, #20
0f220     A7 22 02 AB |  if_e	rdlong	local03, fp
0f224     14 4E 85 A1 |  if_e	sub	fp, #20
0f228     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f22c     34 00 90 5D |  if_ne	jmp	#LR__1181
0f230     00 1E 06 F6 | 	mov	local01, #0
0f234     A7 20 02 FB | 	rdlong	local02, fp
0f238     0C 4E 05 F1 | 	add	fp, #12
0f23c     A7 12 02 FB | 	rdlong	arg01, fp
0f240     0C 4E 85 F1 | 	sub	fp, #12
0f244     AC D6 BF FD | 	call	#_convertstring
0f248     FD 14 02 F6 | 	mov	arg02, result1
0f24c     10 13 02 F6 | 	mov	arg01, local02
0f250     84 99 B0 FD | 	call	#__system___string_cmp
0f254     00 FA 0D F2 | 	cmp	result1, #0 wz
0f258     00 1E 26 A6 |  if_e	not	local01, #0
0f25c     A7 1E 62 FC | 	wrlong	local01, fp
0f260     64 00 90 FD | 	jmp	#LR__1183
0f264                 | LR__1181
0f264                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
0f264     08 4E 05 F1 | 	add	fp, #8
0f268     A7 1E 02 FB | 	rdlong	local01, fp
0f26c     08 4E 85 F1 | 	sub	fp, #8
0f270     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f274     14 4E 05 A1 |  if_e	add	fp, #20
0f278     A7 22 02 AB |  if_e	rdlong	local03, fp
0f27c     14 4E 85 A1 |  if_e	sub	fp, #20
0f280     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f284     3C 00 90 5D |  if_ne	jmp	#LR__1182
0f288     00 1E 06 F6 | 	mov	local01, #0
0f28c     A7 12 02 FB | 	rdlong	arg01, fp
0f290     60 D6 BF FD | 	call	#_convertstring
0f294     FD 20 02 F6 | 	mov	local02, result1
0f298     0C 4E 05 F1 | 	add	fp, #12
0f29c     A7 12 02 FB | 	rdlong	arg01, fp
0f2a0     0C 4E 85 F1 | 	sub	fp, #12
0f2a4     4C D6 BF FD | 	call	#_convertstring
0f2a8     FD 14 02 F6 | 	mov	arg02, result1
0f2ac     10 13 02 F6 | 	mov	arg01, local02
0f2b0     24 99 B0 FD | 	call	#__system___string_cmp
0f2b4     00 FA 0D F2 | 	cmp	result1, #0 wz
0f2b8     00 1E 26 A6 |  if_e	not	local01, #0
0f2bc     A7 1E 62 FC | 	wrlong	local01, fp
0f2c0     04 00 90 FD | 	jmp	#LR__1183
0f2c4                 | LR__1182
0f2c4     A7 00 68 FC | 	wrlong	#0, fp
0f2c8                 | LR__1183
0f2c8     08 4E 05 F1 | 	add	fp, #8
0f2cc     A7 38 68 FC | 	wrlong	#28, fp
0f2d0     08 4E 85 F1 | 	sub	fp, #8
0f2d4     A7 12 02 F6 | 	mov	arg01, fp
0f2d8     74 A5 BF FD | 	call	#_push
0f2dc     A7 F0 03 F6 | 	mov	ptra, fp
0f2e0     B2 00 A0 FD | 	call	#popregs_
0f2e4                 | _do_eq_ret
0f2e4     2D 00 64 FD | 	ret
0f2e8                 | 
0f2e8                 | ' 
0f2e8                 | ' sub do_gt
0f2e8                 | _do_gt
0f2e8     05 4A 05 F6 | 	mov	COUNT_, #5
0f2ec     A8 00 A0 FD | 	call	#pushregs_
0f2f0     18 F0 07 F1 | 	add	ptra, #24
0f2f4     C0 A4 BF FD | 	call	#_pop
0f2f8     FD 1E 02 F6 | 	mov	local01, result1
0f2fc     FE 20 02 F6 | 	mov	local02, result2
0f300     FF 22 02 F6 | 	mov	local03, result3
0f304     0C 4E 05 F1 | 	add	fp, #12
0f308     A7 1E 62 FC | 	wrlong	local01, fp
0f30c     04 4E 05 F1 | 	add	fp, #4
0f310     A7 20 62 FC | 	wrlong	local02, fp
0f314     04 4E 05 F1 | 	add	fp, #4
0f318     A7 22 62 FC | 	wrlong	local03, fp
0f31c     14 4E 85 F1 | 	sub	fp, #20
0f320     94 A4 BF FD | 	call	#_pop
0f324     FF 22 02 F6 | 	mov	local03, result3
0f328     A7 FA 61 FC | 	wrlong	result1, fp
0f32c     04 4E 05 F1 | 	add	fp, #4
0f330     A7 FC 61 FC | 	wrlong	result2, fp
0f334     04 4E 05 F1 | 	add	fp, #4
0f338     A7 22 62 FC | 	wrlong	local03, fp
0f33c                 | ' t2=pop()
0f33c                 | ' t1=pop()
0f33c                 | ' 
0f33c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0f33c     08 4E 85 F1 | 	sub	fp, #8
0f340     1F 22 0E F2 | 	cmp	local03, #31 wz
0f344     14 4E 05 A1 |  if_e	add	fp, #20
0f348     A7 24 02 AB |  if_e	rdlong	local04, fp
0f34c     14 4E 85 A1 |  if_e	sub	fp, #20
0f350     12 23 02 A6 |  if_e	mov	local03, local04
0f354     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f358     28 00 90 5D |  if_ne	jmp	#LR__1190
0f35c     00 1E 06 F6 | 	mov	local01, #0
0f360     A7 12 02 FB | 	rdlong	arg01, fp
0f364     0C 4E 05 F1 | 	add	fp, #12
0f368     A7 14 02 FB | 	rdlong	arg02, fp
0f36c     0C 4E 85 F1 | 	sub	fp, #12
0f370     64 98 B0 FD | 	call	#__system___string_cmp
0f374     01 FA 55 F2 | 	cmps	result1, #1 wc
0f378     00 1E 26 36 |  if_ae	not	local01, #0
0f37c     A7 1E 62 FC | 	wrlong	local01, fp
0f380     1C 04 90 FD | 	jmp	#LR__1203
0f384                 | LR__1190
0f384                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0f384     08 4E 05 F1 | 	add	fp, #8
0f388     A7 1E 02 FB | 	rdlong	local01, fp
0f38c     08 4E 85 F1 | 	sub	fp, #8
0f390     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f394     14 4E 05 A1 |  if_e	add	fp, #20
0f398     A7 24 02 AB |  if_e	rdlong	local04, fp
0f39c     14 4E 85 A1 |  if_e	sub	fp, #20
0f3a0     12 23 02 A6 |  if_e	mov	local03, local04
0f3a4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f3a8     2C 00 90 5D |  if_ne	jmp	#LR__1191
0f3ac     00 1E 06 F6 | 	mov	local01, #0
0f3b0     A7 12 02 FB | 	rdlong	arg01, fp
0f3b4     0C 4E 05 F1 | 	add	fp, #12
0f3b8     A7 14 02 FB | 	rdlong	arg02, fp
0f3bc     0C 4E 85 F1 | 	sub	fp, #12
0f3c0     01 16 66 F6 | 	neg	arg03, #1
0f3c4     08 C7 B0 FD | 	call	#__system___float_cmp
0f3c8     01 FA 55 F2 | 	cmps	result1, #1 wc
0f3cc     00 1E 26 36 |  if_ae	not	local01, #0
0f3d0     A7 1E 62 FC | 	wrlong	local01, fp
0f3d4     C8 03 90 FD | 	jmp	#LR__1203
0f3d8                 | LR__1191
0f3d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0f3d8     08 4E 05 F1 | 	add	fp, #8
0f3dc     A7 1E 02 FB | 	rdlong	local01, fp
0f3e0     08 4E 85 F1 | 	sub	fp, #8
0f3e4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f3e8     14 4E 05 A1 |  if_e	add	fp, #20
0f3ec     A7 24 02 AB |  if_e	rdlong	local04, fp
0f3f0     14 4E 85 A1 |  if_e	sub	fp, #20
0f3f4     12 23 02 A6 |  if_e	mov	local03, local04
0f3f8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f3fc     48 00 90 5D |  if_ne	jmp	#LR__1192
0f400     00 1E 06 F6 | 	mov	local01, #0
0f404     A7 20 02 FB | 	rdlong	local02, fp
0f408     0C 4E 05 F1 | 	add	fp, #12
0f40c     A7 12 02 FB | 	rdlong	arg01, fp
0f410     0C 4E 85 F1 | 	sub	fp, #12
0f414     09 13 52 F6 | 	abs	arg01, arg01 wc
0f418     1F 26 C6 C9 |  if_b	decod	local05, #31
0f41c     00 26 06 36 |  if_ae	mov	local05, #0
0f420     74 BE B0 FD | 	call	#__system___float_fromuns
0f424     13 FB 61 F5 | 	xor	result1, local05
0f428     FD 14 02 F6 | 	mov	arg02, result1
0f42c     10 13 02 F6 | 	mov	arg01, local02
0f430     01 16 66 F6 | 	neg	arg03, #1
0f434     98 C6 B0 FD | 	call	#__system___float_cmp
0f438     01 FA 55 F2 | 	cmps	result1, #1 wc
0f43c     00 1E 26 36 |  if_ae	not	local01, #0
0f440     A7 1E 62 FC | 	wrlong	local01, fp
0f444     58 03 90 FD | 	jmp	#LR__1203
0f448                 | LR__1192
0f448                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0f448     08 4E 05 F1 | 	add	fp, #8
0f44c     A7 1E 02 FB | 	rdlong	local01, fp
0f450     08 4E 85 F1 | 	sub	fp, #8
0f454     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f458     14 4E 05 A1 |  if_e	add	fp, #20
0f45c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f460     14 4E 85 A1 |  if_e	sub	fp, #20
0f464     12 23 02 A6 |  if_e	mov	local03, local04
0f468     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f46c     38 00 90 5D |  if_ne	jmp	#LR__1193
0f470     00 1E 06 F6 | 	mov	local01, #0
0f474     A7 20 02 FB | 	rdlong	local02, fp
0f478     0C 4E 05 F1 | 	add	fp, #12
0f47c     A7 12 02 FB | 	rdlong	arg01, fp
0f480     0C 4E 85 F1 | 	sub	fp, #12
0f484     10 BE B0 FD | 	call	#__system___float_fromuns
0f488     FD 14 02 F6 | 	mov	arg02, result1
0f48c     10 13 02 F6 | 	mov	arg01, local02
0f490     01 16 66 F6 | 	neg	arg03, #1
0f494     38 C6 B0 FD | 	call	#__system___float_cmp
0f498     01 FA 55 F2 | 	cmps	result1, #1 wc
0f49c     00 1E 26 36 |  if_ae	not	local01, #0
0f4a0     A7 1E 62 FC | 	wrlong	local01, fp
0f4a4     F8 02 90 FD | 	jmp	#LR__1203
0f4a8                 | LR__1193
0f4a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0f4a8     08 4E 05 F1 | 	add	fp, #8
0f4ac     A7 1E 02 FB | 	rdlong	local01, fp
0f4b0     08 4E 85 F1 | 	sub	fp, #8
0f4b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f4b8     14 4E 05 A1 |  if_e	add	fp, #20
0f4bc     A7 24 02 AB |  if_e	rdlong	local04, fp
0f4c0     14 4E 85 A1 |  if_e	sub	fp, #20
0f4c4     12 23 02 A6 |  if_e	mov	local03, local04
0f4c8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f4cc     44 00 90 5D |  if_ne	jmp	#LR__1194
0f4d0     00 1E 06 F6 | 	mov	local01, #0
0f4d4     A7 12 02 FB | 	rdlong	arg01, fp
0f4d8     09 13 52 F6 | 	abs	arg01, arg01 wc
0f4dc     1F 26 C6 C9 |  if_b	decod	local05, #31
0f4e0     00 26 06 36 |  if_ae	mov	local05, #0
0f4e4     B0 BD B0 FD | 	call	#__system___float_fromuns
0f4e8     13 FB 61 F5 | 	xor	result1, local05
0f4ec     FD 12 02 F6 | 	mov	arg01, result1
0f4f0     0C 4E 05 F1 | 	add	fp, #12
0f4f4     A7 14 02 FB | 	rdlong	arg02, fp
0f4f8     0C 4E 85 F1 | 	sub	fp, #12
0f4fc     01 16 66 F6 | 	neg	arg03, #1
0f500     CC C5 B0 FD | 	call	#__system___float_cmp
0f504     01 FA 55 F2 | 	cmps	result1, #1 wc
0f508     00 1E 26 36 |  if_ae	not	local01, #0
0f50c     A7 1E 62 FC | 	wrlong	local01, fp
0f510     8C 02 90 FD | 	jmp	#LR__1203
0f514                 | LR__1194
0f514                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0f514     08 4E 05 F1 | 	add	fp, #8
0f518     A7 1E 02 FB | 	rdlong	local01, fp
0f51c     08 4E 85 F1 | 	sub	fp, #8
0f520     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f524     14 4E 05 A1 |  if_e	add	fp, #20
0f528     A7 24 02 AB |  if_e	rdlong	local04, fp
0f52c     14 4E 85 A1 |  if_e	sub	fp, #20
0f530     12 23 02 A6 |  if_e	mov	local03, local04
0f534     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f538     24 00 90 5D |  if_ne	jmp	#LR__1195
0f53c     00 1E 06 F6 | 	mov	local01, #0
0f540     A7 20 02 FB | 	rdlong	local02, fp
0f544     0C 4E 05 F1 | 	add	fp, #12
0f548     A7 22 02 FB | 	rdlong	local03, fp
0f54c     0C 4E 85 F1 | 	sub	fp, #12
0f550     11 21 5A F2 | 	cmps	local02, local03 wcz
0f554     01 1E 66 16 |  if_a	neg	local01, #1
0f558     A7 1E 62 FC | 	wrlong	local01, fp
0f55c     40 02 90 FD | 	jmp	#LR__1203
0f560                 | LR__1195
0f560                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0f560     08 4E 05 F1 | 	add	fp, #8
0f564     A7 1E 02 FB | 	rdlong	local01, fp
0f568     08 4E 85 F1 | 	sub	fp, #8
0f56c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f570     14 4E 05 A1 |  if_e	add	fp, #20
0f574     A7 24 02 AB |  if_e	rdlong	local04, fp
0f578     14 4E 85 A1 |  if_e	sub	fp, #20
0f57c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f580     24 00 90 5D |  if_ne	jmp	#LR__1196
0f584     00 1E 06 F6 | 	mov	local01, #0
0f588     A7 20 02 FB | 	rdlong	local02, fp
0f58c     0C 4E 05 F1 | 	add	fp, #12
0f590     A7 22 02 FB | 	rdlong	local03, fp
0f594     0C 4E 85 F1 | 	sub	fp, #12
0f598     11 21 5A F2 | 	cmps	local02, local03 wcz
0f59c     01 1E 66 16 |  if_a	neg	local01, #1
0f5a0     A7 1E 62 FC | 	wrlong	local01, fp
0f5a4     F8 01 90 FD | 	jmp	#LR__1203
0f5a8                 | LR__1196
0f5a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0f5a8     08 4E 05 F1 | 	add	fp, #8
0f5ac     A7 1E 02 FB | 	rdlong	local01, fp
0f5b0     08 4E 85 F1 | 	sub	fp, #8
0f5b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f5b8     14 4E 05 A1 |  if_e	add	fp, #20
0f5bc     A7 22 02 AB |  if_e	rdlong	local03, fp
0f5c0     14 4E 85 A1 |  if_e	sub	fp, #20
0f5c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f5c8     34 00 90 5D |  if_ne	jmp	#LR__1197
0f5cc     00 1E 06 F6 | 	mov	local01, #0
0f5d0     A7 12 02 FB | 	rdlong	arg01, fp
0f5d4     C0 BC B0 FD | 	call	#__system___float_fromuns
0f5d8     FD 12 02 F6 | 	mov	arg01, result1
0f5dc     0C 4E 05 F1 | 	add	fp, #12
0f5e0     A7 14 02 FB | 	rdlong	arg02, fp
0f5e4     0C 4E 85 F1 | 	sub	fp, #12
0f5e8     01 16 66 F6 | 	neg	arg03, #1
0f5ec     E0 C4 B0 FD | 	call	#__system___float_cmp
0f5f0     01 FA 55 F2 | 	cmps	result1, #1 wc
0f5f4     00 1E 26 36 |  if_ae	not	local01, #0
0f5f8     A7 1E 62 FC | 	wrlong	local01, fp
0f5fc     A0 01 90 FD | 	jmp	#LR__1203
0f600                 | LR__1197
0f600                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0f600     08 4E 05 F1 | 	add	fp, #8
0f604     A7 1E 02 FB | 	rdlong	local01, fp
0f608     08 4E 85 F1 | 	sub	fp, #8
0f60c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f610     14 4E 05 A1 |  if_e	add	fp, #20
0f614     A7 22 02 AB |  if_e	rdlong	local03, fp
0f618     14 4E 85 A1 |  if_e	sub	fp, #20
0f61c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f620     24 00 90 5D |  if_ne	jmp	#LR__1198
0f624     00 1E 06 F6 | 	mov	local01, #0
0f628     A7 20 02 FB | 	rdlong	local02, fp
0f62c     0C 4E 05 F1 | 	add	fp, #12
0f630     A7 22 02 FB | 	rdlong	local03, fp
0f634     0C 4E 85 F1 | 	sub	fp, #12
0f638     11 21 5A F2 | 	cmps	local02, local03 wcz
0f63c     01 1E 66 16 |  if_a	neg	local01, #1
0f640     A7 1E 62 FC | 	wrlong	local01, fp
0f644     58 01 90 FD | 	jmp	#LR__1203
0f648                 | LR__1198
0f648                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0f648     08 4E 05 F1 | 	add	fp, #8
0f64c     A7 1E 02 FB | 	rdlong	local01, fp
0f650     08 4E 85 F1 | 	sub	fp, #8
0f654     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f658     14 4E 05 A1 |  if_e	add	fp, #20
0f65c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f660     14 4E 85 A1 |  if_e	sub	fp, #20
0f664     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f668     24 00 90 5D |  if_ne	jmp	#LR__1199
0f66c     00 1E 06 F6 | 	mov	local01, #0
0f670     A7 20 02 FB | 	rdlong	local02, fp
0f674     0C 4E 05 F1 | 	add	fp, #12
0f678     A7 22 02 FB | 	rdlong	local03, fp
0f67c     0C 4E 85 F1 | 	sub	fp, #12
0f680     11 21 1A F2 | 	cmp	local02, local03 wcz
0f684     01 1E 66 16 |  if_a	neg	local01, #1
0f688     A7 1E 62 FC | 	wrlong	local01, fp
0f68c     10 01 90 FD | 	jmp	#LR__1203
0f690                 | LR__1199
0f690                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
0f690     08 4E 05 F1 | 	add	fp, #8
0f694     A7 1E 02 FB | 	rdlong	local01, fp
0f698     08 4E 85 F1 | 	sub	fp, #8
0f69c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f6a0     14 4E 05 A1 |  if_e	add	fp, #20
0f6a4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f6a8     14 4E 85 A1 |  if_e	sub	fp, #20
0f6ac     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f6b0     30 00 90 5D |  if_ne	jmp	#LR__1200
0f6b4     00 1E 06 F6 | 	mov	local01, #0
0f6b8     A7 12 02 FB | 	rdlong	arg01, fp
0f6bc     34 D2 BF FD | 	call	#_convertstring
0f6c0     FD 12 02 F6 | 	mov	arg01, result1
0f6c4     0C 4E 05 F1 | 	add	fp, #12
0f6c8     A7 14 02 FB | 	rdlong	arg02, fp
0f6cc     0C 4E 85 F1 | 	sub	fp, #12
0f6d0     04 95 B0 FD | 	call	#__system___string_cmp
0f6d4     01 FA 55 F2 | 	cmps	result1, #1 wc
0f6d8     00 1E 26 36 |  if_ae	not	local01, #0
0f6dc     A7 1E 62 FC | 	wrlong	local01, fp
0f6e0     BC 00 90 FD | 	jmp	#LR__1203
0f6e4                 | LR__1200
0f6e4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
0f6e4     08 4E 05 F1 | 	add	fp, #8
0f6e8     A7 1E 02 FB | 	rdlong	local01, fp
0f6ec     08 4E 85 F1 | 	sub	fp, #8
0f6f0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f6f4     14 4E 05 A1 |  if_e	add	fp, #20
0f6f8     A7 22 02 AB |  if_e	rdlong	local03, fp
0f6fc     14 4E 85 A1 |  if_e	sub	fp, #20
0f700     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f704     34 00 90 5D |  if_ne	jmp	#LR__1201
0f708     00 1E 06 F6 | 	mov	local01, #0
0f70c     A7 20 02 FB | 	rdlong	local02, fp
0f710     0C 4E 05 F1 | 	add	fp, #12
0f714     A7 12 02 FB | 	rdlong	arg01, fp
0f718     0C 4E 85 F1 | 	sub	fp, #12
0f71c     D4 D1 BF FD | 	call	#_convertstring
0f720     FD 14 02 F6 | 	mov	arg02, result1
0f724     10 13 02 F6 | 	mov	arg01, local02
0f728     AC 94 B0 FD | 	call	#__system___string_cmp
0f72c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f730     00 1E 26 36 |  if_ae	not	local01, #0
0f734     A7 1E 62 FC | 	wrlong	local01, fp
0f738     64 00 90 FD | 	jmp	#LR__1203
0f73c                 | LR__1201
0f73c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
0f73c     08 4E 05 F1 | 	add	fp, #8
0f740     A7 1E 02 FB | 	rdlong	local01, fp
0f744     08 4E 85 F1 | 	sub	fp, #8
0f748     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f74c     14 4E 05 A1 |  if_e	add	fp, #20
0f750     A7 22 02 AB |  if_e	rdlong	local03, fp
0f754     14 4E 85 A1 |  if_e	sub	fp, #20
0f758     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f75c     3C 00 90 5D |  if_ne	jmp	#LR__1202
0f760     00 1E 06 F6 | 	mov	local01, #0
0f764     A7 12 02 FB | 	rdlong	arg01, fp
0f768     88 D1 BF FD | 	call	#_convertstring
0f76c     FD 20 02 F6 | 	mov	local02, result1
0f770     0C 4E 05 F1 | 	add	fp, #12
0f774     A7 12 02 FB | 	rdlong	arg01, fp
0f778     0C 4E 85 F1 | 	sub	fp, #12
0f77c     74 D1 BF FD | 	call	#_convertstring
0f780     FD 14 02 F6 | 	mov	arg02, result1
0f784     10 13 02 F6 | 	mov	arg01, local02
0f788     4C 94 B0 FD | 	call	#__system___string_cmp
0f78c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f790     00 1E 26 36 |  if_ae	not	local01, #0
0f794     A7 1E 62 FC | 	wrlong	local01, fp
0f798     04 00 90 FD | 	jmp	#LR__1203
0f79c                 | LR__1202
0f79c     A7 00 68 FC | 	wrlong	#0, fp
0f7a0                 | LR__1203
0f7a0     08 4E 05 F1 | 	add	fp, #8
0f7a4     A7 38 68 FC | 	wrlong	#28, fp
0f7a8     08 4E 85 F1 | 	sub	fp, #8
0f7ac     A7 12 02 F6 | 	mov	arg01, fp
0f7b0     9C A0 BF FD | 	call	#_push
0f7b4     A7 F0 03 F6 | 	mov	ptra, fp
0f7b8     B2 00 A0 FD | 	call	#popregs_
0f7bc                 | _do_gt_ret
0f7bc     2D 00 64 FD | 	ret
0f7c0                 | 
0f7c0                 | ' 
0f7c0                 | ' sub do_lt
0f7c0                 | _do_lt
0f7c0     05 4A 05 F6 | 	mov	COUNT_, #5
0f7c4     A8 00 A0 FD | 	call	#pushregs_
0f7c8     18 F0 07 F1 | 	add	ptra, #24
0f7cc     E8 9F BF FD | 	call	#_pop
0f7d0     FD 1E 02 F6 | 	mov	local01, result1
0f7d4     FE 20 02 F6 | 	mov	local02, result2
0f7d8     FF 22 02 F6 | 	mov	local03, result3
0f7dc     0C 4E 05 F1 | 	add	fp, #12
0f7e0     A7 1E 62 FC | 	wrlong	local01, fp
0f7e4     04 4E 05 F1 | 	add	fp, #4
0f7e8     A7 20 62 FC | 	wrlong	local02, fp
0f7ec     04 4E 05 F1 | 	add	fp, #4
0f7f0     A7 22 62 FC | 	wrlong	local03, fp
0f7f4     14 4E 85 F1 | 	sub	fp, #20
0f7f8     BC 9F BF FD | 	call	#_pop
0f7fc     FF 22 02 F6 | 	mov	local03, result3
0f800     A7 FA 61 FC | 	wrlong	result1, fp
0f804     04 4E 05 F1 | 	add	fp, #4
0f808     A7 FC 61 FC | 	wrlong	result2, fp
0f80c     04 4E 05 F1 | 	add	fp, #4
0f810     A7 22 62 FC | 	wrlong	local03, fp
0f814                 | ' t2=pop()
0f814                 | ' t1=pop()
0f814                 | ' 
0f814                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0f814     08 4E 85 F1 | 	sub	fp, #8
0f818     1F 22 0E F2 | 	cmp	local03, #31 wz
0f81c     14 4E 05 A1 |  if_e	add	fp, #20
0f820     A7 24 02 AB |  if_e	rdlong	local04, fp
0f824     14 4E 85 A1 |  if_e	sub	fp, #20
0f828     12 23 02 A6 |  if_e	mov	local03, local04
0f82c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f830     28 00 90 5D |  if_ne	jmp	#LR__1210
0f834     00 1E 06 F6 | 	mov	local01, #0
0f838     A7 12 02 FB | 	rdlong	arg01, fp
0f83c     0C 4E 05 F1 | 	add	fp, #12
0f840     A7 14 02 FB | 	rdlong	arg02, fp
0f844     0C 4E 85 F1 | 	sub	fp, #12
0f848     8C 93 B0 FD | 	call	#__system___string_cmp
0f84c     00 FA 55 F2 | 	cmps	result1, #0 wc
0f850     00 1E 26 C6 |  if_b	not	local01, #0
0f854     A7 1E 62 FC | 	wrlong	local01, fp
0f858     0C 04 90 FD | 	jmp	#LR__1223
0f85c                 | LR__1210
0f85c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0f85c     08 4E 05 F1 | 	add	fp, #8
0f860     A7 1E 02 FB | 	rdlong	local01, fp
0f864     08 4E 85 F1 | 	sub	fp, #8
0f868     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f86c     14 4E 05 A1 |  if_e	add	fp, #20
0f870     A7 24 02 AB |  if_e	rdlong	local04, fp
0f874     14 4E 85 A1 |  if_e	sub	fp, #20
0f878     12 23 02 A6 |  if_e	mov	local03, local04
0f87c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f880     2C 00 90 5D |  if_ne	jmp	#LR__1211
0f884     00 1E 06 F6 | 	mov	local01, #0
0f888     A7 12 02 FB | 	rdlong	arg01, fp
0f88c     0C 4E 05 F1 | 	add	fp, #12
0f890     A7 14 02 FB | 	rdlong	arg02, fp
0f894     0C 4E 85 F1 | 	sub	fp, #12
0f898     01 16 06 F6 | 	mov	arg03, #1
0f89c     30 C2 B0 FD | 	call	#__system___float_cmp
0f8a0     00 FA 55 F2 | 	cmps	result1, #0 wc
0f8a4     00 1E 26 C6 |  if_b	not	local01, #0
0f8a8     A7 1E 62 FC | 	wrlong	local01, fp
0f8ac     B8 03 90 FD | 	jmp	#LR__1223
0f8b0                 | LR__1211
0f8b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0f8b0     08 4E 05 F1 | 	add	fp, #8
0f8b4     A7 1E 02 FB | 	rdlong	local01, fp
0f8b8     08 4E 85 F1 | 	sub	fp, #8
0f8bc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f8c0     14 4E 05 A1 |  if_e	add	fp, #20
0f8c4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f8c8     14 4E 85 A1 |  if_e	sub	fp, #20
0f8cc     12 23 02 A6 |  if_e	mov	local03, local04
0f8d0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f8d4     48 00 90 5D |  if_ne	jmp	#LR__1212
0f8d8     00 1E 06 F6 | 	mov	local01, #0
0f8dc     A7 20 02 FB | 	rdlong	local02, fp
0f8e0     0C 4E 05 F1 | 	add	fp, #12
0f8e4     A7 12 02 FB | 	rdlong	arg01, fp
0f8e8     0C 4E 85 F1 | 	sub	fp, #12
0f8ec     09 13 52 F6 | 	abs	arg01, arg01 wc
0f8f0     1F 26 C6 C9 |  if_b	decod	local05, #31
0f8f4     00 26 06 36 |  if_ae	mov	local05, #0
0f8f8     9C B9 B0 FD | 	call	#__system___float_fromuns
0f8fc     13 FB 61 F5 | 	xor	result1, local05
0f900     FD 14 02 F6 | 	mov	arg02, result1
0f904     10 13 02 F6 | 	mov	arg01, local02
0f908     01 16 06 F6 | 	mov	arg03, #1
0f90c     C0 C1 B0 FD | 	call	#__system___float_cmp
0f910     00 FA 55 F2 | 	cmps	result1, #0 wc
0f914     00 1E 26 C6 |  if_b	not	local01, #0
0f918     A7 1E 62 FC | 	wrlong	local01, fp
0f91c     48 03 90 FD | 	jmp	#LR__1223
0f920                 | LR__1212
0f920                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0f920     08 4E 05 F1 | 	add	fp, #8
0f924     A7 1E 02 FB | 	rdlong	local01, fp
0f928     08 4E 85 F1 | 	sub	fp, #8
0f92c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f930     14 4E 05 A1 |  if_e	add	fp, #20
0f934     A7 24 02 AB |  if_e	rdlong	local04, fp
0f938     14 4E 85 A1 |  if_e	sub	fp, #20
0f93c     12 23 02 A6 |  if_e	mov	local03, local04
0f940     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f944     38 00 90 5D |  if_ne	jmp	#LR__1213
0f948     00 1E 06 F6 | 	mov	local01, #0
0f94c     A7 20 02 FB | 	rdlong	local02, fp
0f950     0C 4E 05 F1 | 	add	fp, #12
0f954     A7 12 02 FB | 	rdlong	arg01, fp
0f958     0C 4E 85 F1 | 	sub	fp, #12
0f95c     38 B9 B0 FD | 	call	#__system___float_fromuns
0f960     FD 14 02 F6 | 	mov	arg02, result1
0f964     10 13 02 F6 | 	mov	arg01, local02
0f968     01 16 06 F6 | 	mov	arg03, #1
0f96c     60 C1 B0 FD | 	call	#__system___float_cmp
0f970     00 FA 55 F2 | 	cmps	result1, #0 wc
0f974     00 1E 26 C6 |  if_b	not	local01, #0
0f978     A7 1E 62 FC | 	wrlong	local01, fp
0f97c     E8 02 90 FD | 	jmp	#LR__1223
0f980                 | LR__1213
0f980                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0f980     08 4E 05 F1 | 	add	fp, #8
0f984     A7 1E 02 FB | 	rdlong	local01, fp
0f988     08 4E 85 F1 | 	sub	fp, #8
0f98c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f990     14 4E 05 A1 |  if_e	add	fp, #20
0f994     A7 24 02 AB |  if_e	rdlong	local04, fp
0f998     14 4E 85 A1 |  if_e	sub	fp, #20
0f99c     12 23 02 A6 |  if_e	mov	local03, local04
0f9a0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f9a4     44 00 90 5D |  if_ne	jmp	#LR__1214
0f9a8     00 1E 06 F6 | 	mov	local01, #0
0f9ac     A7 12 02 FB | 	rdlong	arg01, fp
0f9b0     09 13 52 F6 | 	abs	arg01, arg01 wc
0f9b4     1F 26 C6 C9 |  if_b	decod	local05, #31
0f9b8     00 26 06 36 |  if_ae	mov	local05, #0
0f9bc     D8 B8 B0 FD | 	call	#__system___float_fromuns
0f9c0     13 FB 61 F5 | 	xor	result1, local05
0f9c4     FD 12 02 F6 | 	mov	arg01, result1
0f9c8     0C 4E 05 F1 | 	add	fp, #12
0f9cc     A7 14 02 FB | 	rdlong	arg02, fp
0f9d0     0C 4E 85 F1 | 	sub	fp, #12
0f9d4     01 16 06 F6 | 	mov	arg03, #1
0f9d8     F4 C0 B0 FD | 	call	#__system___float_cmp
0f9dc     00 FA 55 F2 | 	cmps	result1, #0 wc
0f9e0     00 1E 26 C6 |  if_b	not	local01, #0
0f9e4     A7 1E 62 FC | 	wrlong	local01, fp
0f9e8     7C 02 90 FD | 	jmp	#LR__1223
0f9ec                 | LR__1214
0f9ec                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0f9ec     08 4E 05 F1 | 	add	fp, #8
0f9f0     A7 1E 02 FB | 	rdlong	local01, fp
0f9f4     08 4E 85 F1 | 	sub	fp, #8
0f9f8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f9fc     14 4E 05 A1 |  if_e	add	fp, #20
0fa00     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa04     14 4E 85 A1 |  if_e	sub	fp, #20
0fa08     12 23 02 A6 |  if_e	mov	local03, local04
0fa0c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fa10     20 00 90 5D |  if_ne	jmp	#LR__1215
0fa14     A7 20 02 FB | 	rdlong	local02, fp
0fa18     0C 4E 05 F1 | 	add	fp, #12
0fa1c     A7 22 02 FB | 	rdlong	local03, fp
0fa20     0C 4E 85 F1 | 	sub	fp, #12
0fa24     11 21 52 F2 | 	cmps	local02, local03 wc
0fa28     0F 1F A2 F1 | 	subx	local01, local01
0fa2c     A7 1E 62 FC | 	wrlong	local01, fp
0fa30     34 02 90 FD | 	jmp	#LR__1223
0fa34                 | LR__1215
0fa34                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0fa34     08 4E 05 F1 | 	add	fp, #8
0fa38     A7 1E 02 FB | 	rdlong	local01, fp
0fa3c     08 4E 85 F1 | 	sub	fp, #8
0fa40     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fa44     14 4E 05 A1 |  if_e	add	fp, #20
0fa48     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa4c     14 4E 85 A1 |  if_e	sub	fp, #20
0fa50     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0fa54     20 00 90 5D |  if_ne	jmp	#LR__1216
0fa58     A7 20 02 FB | 	rdlong	local02, fp
0fa5c     0C 4E 05 F1 | 	add	fp, #12
0fa60     A7 22 02 FB | 	rdlong	local03, fp
0fa64     0C 4E 85 F1 | 	sub	fp, #12
0fa68     11 21 52 F2 | 	cmps	local02, local03 wc
0fa6c     0F 1F A2 F1 | 	subx	local01, local01
0fa70     A7 1E 62 FC | 	wrlong	local01, fp
0fa74     F0 01 90 FD | 	jmp	#LR__1223
0fa78                 | LR__1216
0fa78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0fa78     08 4E 05 F1 | 	add	fp, #8
0fa7c     A7 1E 02 FB | 	rdlong	local01, fp
0fa80     08 4E 85 F1 | 	sub	fp, #8
0fa84     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fa88     14 4E 05 A1 |  if_e	add	fp, #20
0fa8c     A7 22 02 AB |  if_e	rdlong	local03, fp
0fa90     14 4E 85 A1 |  if_e	sub	fp, #20
0fa94     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fa98     34 00 90 5D |  if_ne	jmp	#LR__1217
0fa9c     00 1E 06 F6 | 	mov	local01, #0
0faa0     A7 12 02 FB | 	rdlong	arg01, fp
0faa4     F0 B7 B0 FD | 	call	#__system___float_fromuns
0faa8     FD 12 02 F6 | 	mov	arg01, result1
0faac     0C 4E 05 F1 | 	add	fp, #12
0fab0     A7 14 02 FB | 	rdlong	arg02, fp
0fab4     0C 4E 85 F1 | 	sub	fp, #12
0fab8     01 16 06 F6 | 	mov	arg03, #1
0fabc     10 C0 B0 FD | 	call	#__system___float_cmp
0fac0     00 FA 55 F2 | 	cmps	result1, #0 wc
0fac4     00 1E 26 C6 |  if_b	not	local01, #0
0fac8     A7 1E 62 FC | 	wrlong	local01, fp
0facc     98 01 90 FD | 	jmp	#LR__1223
0fad0                 | LR__1217
0fad0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0fad0     08 4E 05 F1 | 	add	fp, #8
0fad4     A7 1E 02 FB | 	rdlong	local01, fp
0fad8     08 4E 85 F1 | 	sub	fp, #8
0fadc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fae0     14 4E 05 A1 |  if_e	add	fp, #20
0fae4     A7 22 02 AB |  if_e	rdlong	local03, fp
0fae8     14 4E 85 A1 |  if_e	sub	fp, #20
0faec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0faf0     20 00 90 5D |  if_ne	jmp	#LR__1218
0faf4     A7 20 02 FB | 	rdlong	local02, fp
0faf8     0C 4E 05 F1 | 	add	fp, #12
0fafc     A7 22 02 FB | 	rdlong	local03, fp
0fb00     0C 4E 85 F1 | 	sub	fp, #12
0fb04     11 21 52 F2 | 	cmps	local02, local03 wc
0fb08     0F 1F A2 F1 | 	subx	local01, local01
0fb0c     A7 1E 62 FC | 	wrlong	local01, fp
0fb10     54 01 90 FD | 	jmp	#LR__1223
0fb14                 | LR__1218
0fb14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0fb14     08 4E 05 F1 | 	add	fp, #8
0fb18     A7 1E 02 FB | 	rdlong	local01, fp
0fb1c     08 4E 85 F1 | 	sub	fp, #8
0fb20     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fb24     14 4E 05 A1 |  if_e	add	fp, #20
0fb28     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb2c     14 4E 85 A1 |  if_e	sub	fp, #20
0fb30     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fb34     20 00 90 5D |  if_ne	jmp	#LR__1219
0fb38     A7 20 02 FB | 	rdlong	local02, fp
0fb3c     0C 4E 05 F1 | 	add	fp, #12
0fb40     A7 22 02 FB | 	rdlong	local03, fp
0fb44     0C 4E 85 F1 | 	sub	fp, #12
0fb48     11 21 12 F2 | 	cmp	local02, local03 wc
0fb4c     0F 1F A2 F1 | 	subx	local01, local01
0fb50     A7 1E 62 FC | 	wrlong	local01, fp
0fb54     10 01 90 FD | 	jmp	#LR__1223
0fb58                 | LR__1219
0fb58                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
0fb58     08 4E 05 F1 | 	add	fp, #8
0fb5c     A7 1E 02 FB | 	rdlong	local01, fp
0fb60     08 4E 85 F1 | 	sub	fp, #8
0fb64     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fb68     14 4E 05 A1 |  if_e	add	fp, #20
0fb6c     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb70     14 4E 85 A1 |  if_e	sub	fp, #20
0fb74     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fb78     30 00 90 5D |  if_ne	jmp	#LR__1220
0fb7c     00 1E 06 F6 | 	mov	local01, #0
0fb80     A7 12 02 FB | 	rdlong	arg01, fp
0fb84     6C CD BF FD | 	call	#_convertstring
0fb88     FD 12 02 F6 | 	mov	arg01, result1
0fb8c     0C 4E 05 F1 | 	add	fp, #12
0fb90     A7 14 02 FB | 	rdlong	arg02, fp
0fb94     0C 4E 85 F1 | 	sub	fp, #12
0fb98     3C 90 B0 FD | 	call	#__system___string_cmp
0fb9c     00 FA 55 F2 | 	cmps	result1, #0 wc
0fba0     00 1E 26 C6 |  if_b	not	local01, #0
0fba4     A7 1E 62 FC | 	wrlong	local01, fp
0fba8     BC 00 90 FD | 	jmp	#LR__1223
0fbac                 | LR__1220
0fbac                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
0fbac     08 4E 05 F1 | 	add	fp, #8
0fbb0     A7 1E 02 FB | 	rdlong	local01, fp
0fbb4     08 4E 85 F1 | 	sub	fp, #8
0fbb8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fbbc     14 4E 05 A1 |  if_e	add	fp, #20
0fbc0     A7 22 02 AB |  if_e	rdlong	local03, fp
0fbc4     14 4E 85 A1 |  if_e	sub	fp, #20
0fbc8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fbcc     34 00 90 5D |  if_ne	jmp	#LR__1221
0fbd0     00 1E 06 F6 | 	mov	local01, #0
0fbd4     A7 20 02 FB | 	rdlong	local02, fp
0fbd8     0C 4E 05 F1 | 	add	fp, #12
0fbdc     A7 12 02 FB | 	rdlong	arg01, fp
0fbe0     0C 4E 85 F1 | 	sub	fp, #12
0fbe4     0C CD BF FD | 	call	#_convertstring
0fbe8     FD 14 02 F6 | 	mov	arg02, result1
0fbec     10 13 02 F6 | 	mov	arg01, local02
0fbf0     E4 8F B0 FD | 	call	#__system___string_cmp
0fbf4     00 FA 55 F2 | 	cmps	result1, #0 wc
0fbf8     00 1E 26 C6 |  if_b	not	local01, #0
0fbfc     A7 1E 62 FC | 	wrlong	local01, fp
0fc00     64 00 90 FD | 	jmp	#LR__1223
0fc04                 | LR__1221
0fc04                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
0fc04     08 4E 05 F1 | 	add	fp, #8
0fc08     A7 1E 02 FB | 	rdlong	local01, fp
0fc0c     08 4E 85 F1 | 	sub	fp, #8
0fc10     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fc14     14 4E 05 A1 |  if_e	add	fp, #20
0fc18     A7 22 02 AB |  if_e	rdlong	local03, fp
0fc1c     14 4E 85 A1 |  if_e	sub	fp, #20
0fc20     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fc24     3C 00 90 5D |  if_ne	jmp	#LR__1222
0fc28     00 1E 06 F6 | 	mov	local01, #0
0fc2c     A7 12 02 FB | 	rdlong	arg01, fp
0fc30     C0 CC BF FD | 	call	#_convertstring
0fc34     FD 20 02 F6 | 	mov	local02, result1
0fc38     0C 4E 05 F1 | 	add	fp, #12
0fc3c     A7 12 02 FB | 	rdlong	arg01, fp
0fc40     0C 4E 85 F1 | 	sub	fp, #12
0fc44     AC CC BF FD | 	call	#_convertstring
0fc48     FD 14 02 F6 | 	mov	arg02, result1
0fc4c     10 13 02 F6 | 	mov	arg01, local02
0fc50     84 8F B0 FD | 	call	#__system___string_cmp
0fc54     00 FA 55 F2 | 	cmps	result1, #0 wc
0fc58     00 1E 26 C6 |  if_b	not	local01, #0
0fc5c     A7 1E 62 FC | 	wrlong	local01, fp
0fc60     04 00 90 FD | 	jmp	#LR__1223
0fc64                 | LR__1222
0fc64     A7 00 68 FC | 	wrlong	#0, fp
0fc68                 | LR__1223
0fc68     08 4E 05 F1 | 	add	fp, #8
0fc6c     A7 38 68 FC | 	wrlong	#28, fp
0fc70     08 4E 85 F1 | 	sub	fp, #8
0fc74     A7 12 02 F6 | 	mov	arg01, fp
0fc78     D4 9B BF FD | 	call	#_push
0fc7c     A7 F0 03 F6 | 	mov	ptra, fp
0fc80     B2 00 A0 FD | 	call	#popregs_
0fc84                 | _do_lt_ret
0fc84     2D 00 64 FD | 	ret
0fc88                 | 
0fc88                 | ' 
0fc88                 | ' sub do_ge
0fc88                 | _do_ge
0fc88     05 4A 05 F6 | 	mov	COUNT_, #5
0fc8c     A8 00 A0 FD | 	call	#pushregs_
0fc90     18 F0 07 F1 | 	add	ptra, #24
0fc94     20 9B BF FD | 	call	#_pop
0fc98     FD 1E 02 F6 | 	mov	local01, result1
0fc9c     FE 20 02 F6 | 	mov	local02, result2
0fca0     FF 22 02 F6 | 	mov	local03, result3
0fca4     0C 4E 05 F1 | 	add	fp, #12
0fca8     A7 1E 62 FC | 	wrlong	local01, fp
0fcac     04 4E 05 F1 | 	add	fp, #4
0fcb0     A7 20 62 FC | 	wrlong	local02, fp
0fcb4     04 4E 05 F1 | 	add	fp, #4
0fcb8     A7 22 62 FC | 	wrlong	local03, fp
0fcbc     14 4E 85 F1 | 	sub	fp, #20
0fcc0     F4 9A BF FD | 	call	#_pop
0fcc4     FF 22 02 F6 | 	mov	local03, result3
0fcc8     A7 FA 61 FC | 	wrlong	result1, fp
0fccc     04 4E 05 F1 | 	add	fp, #4
0fcd0     A7 FC 61 FC | 	wrlong	result2, fp
0fcd4     04 4E 05 F1 | 	add	fp, #4
0fcd8     A7 22 62 FC | 	wrlong	local03, fp
0fcdc                 | ' t2=pop()
0fcdc                 | ' t1=pop()
0fcdc                 | ' 
0fcdc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0fcdc     08 4E 85 F1 | 	sub	fp, #8
0fce0     1F 22 0E F2 | 	cmp	local03, #31 wz
0fce4     14 4E 05 A1 |  if_e	add	fp, #20
0fce8     A7 24 02 AB |  if_e	rdlong	local04, fp
0fcec     14 4E 85 A1 |  if_e	sub	fp, #20
0fcf0     12 23 02 A6 |  if_e	mov	local03, local04
0fcf4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fcf8     28 00 90 5D |  if_ne	jmp	#LR__1230
0fcfc     00 1E 06 F6 | 	mov	local01, #0
0fd00     A7 12 02 FB | 	rdlong	arg01, fp
0fd04     0C 4E 05 F1 | 	add	fp, #12
0fd08     A7 14 02 FB | 	rdlong	arg02, fp
0fd0c     0C 4E 85 F1 | 	sub	fp, #12
0fd10     C4 8E B0 FD | 	call	#__system___string_cmp
0fd14     00 FA 55 F2 | 	cmps	result1, #0 wc
0fd18     00 1E 26 36 |  if_ae	not	local01, #0
0fd1c     A7 1E 62 FC | 	wrlong	local01, fp
0fd20     1C 04 90 FD | 	jmp	#LR__1243
0fd24                 | LR__1230
0fd24                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0fd24     08 4E 05 F1 | 	add	fp, #8
0fd28     A7 1E 02 FB | 	rdlong	local01, fp
0fd2c     08 4E 85 F1 | 	sub	fp, #8
0fd30     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fd34     14 4E 05 A1 |  if_e	add	fp, #20
0fd38     A7 24 02 AB |  if_e	rdlong	local04, fp
0fd3c     14 4E 85 A1 |  if_e	sub	fp, #20
0fd40     12 23 02 A6 |  if_e	mov	local03, local04
0fd44     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fd48     2C 00 90 5D |  if_ne	jmp	#LR__1231
0fd4c     00 1E 06 F6 | 	mov	local01, #0
0fd50     A7 12 02 FB | 	rdlong	arg01, fp
0fd54     0C 4E 05 F1 | 	add	fp, #12
0fd58     A7 14 02 FB | 	rdlong	arg02, fp
0fd5c     0C 4E 85 F1 | 	sub	fp, #12
0fd60     01 16 66 F6 | 	neg	arg03, #1
0fd64     68 BD B0 FD | 	call	#__system___float_cmp
0fd68     00 FA 55 F2 | 	cmps	result1, #0 wc
0fd6c     00 1E 26 36 |  if_ae	not	local01, #0
0fd70     A7 1E 62 FC | 	wrlong	local01, fp
0fd74     C8 03 90 FD | 	jmp	#LR__1243
0fd78                 | LR__1231
0fd78                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0fd78     08 4E 05 F1 | 	add	fp, #8
0fd7c     A7 1E 02 FB | 	rdlong	local01, fp
0fd80     08 4E 85 F1 | 	sub	fp, #8
0fd84     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fd88     14 4E 05 A1 |  if_e	add	fp, #20
0fd8c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fd90     14 4E 85 A1 |  if_e	sub	fp, #20
0fd94     12 23 02 A6 |  if_e	mov	local03, local04
0fd98     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fd9c     48 00 90 5D |  if_ne	jmp	#LR__1232
0fda0     00 1E 06 F6 | 	mov	local01, #0
0fda4     A7 20 02 FB | 	rdlong	local02, fp
0fda8     0C 4E 05 F1 | 	add	fp, #12
0fdac     A7 12 02 FB | 	rdlong	arg01, fp
0fdb0     0C 4E 85 F1 | 	sub	fp, #12
0fdb4     09 13 52 F6 | 	abs	arg01, arg01 wc
0fdb8     1F 26 C6 C9 |  if_b	decod	local05, #31
0fdbc     00 26 06 36 |  if_ae	mov	local05, #0
0fdc0     D4 B4 B0 FD | 	call	#__system___float_fromuns
0fdc4     13 FB 61 F5 | 	xor	result1, local05
0fdc8     FD 14 02 F6 | 	mov	arg02, result1
0fdcc     10 13 02 F6 | 	mov	arg01, local02
0fdd0     01 16 66 F6 | 	neg	arg03, #1
0fdd4     F8 BC B0 FD | 	call	#__system___float_cmp
0fdd8     00 FA 55 F2 | 	cmps	result1, #0 wc
0fddc     00 1E 26 36 |  if_ae	not	local01, #0
0fde0     A7 1E 62 FC | 	wrlong	local01, fp
0fde4     58 03 90 FD | 	jmp	#LR__1243
0fde8                 | LR__1232
0fde8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0fde8     08 4E 05 F1 | 	add	fp, #8
0fdec     A7 1E 02 FB | 	rdlong	local01, fp
0fdf0     08 4E 85 F1 | 	sub	fp, #8
0fdf4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fdf8     14 4E 05 A1 |  if_e	add	fp, #20
0fdfc     A7 24 02 AB |  if_e	rdlong	local04, fp
0fe00     14 4E 85 A1 |  if_e	sub	fp, #20
0fe04     12 23 02 A6 |  if_e	mov	local03, local04
0fe08     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fe0c     38 00 90 5D |  if_ne	jmp	#LR__1233
0fe10     00 1E 06 F6 | 	mov	local01, #0
0fe14     A7 20 02 FB | 	rdlong	local02, fp
0fe18     0C 4E 05 F1 | 	add	fp, #12
0fe1c     A7 12 02 FB | 	rdlong	arg01, fp
0fe20     0C 4E 85 F1 | 	sub	fp, #12
0fe24     70 B4 B0 FD | 	call	#__system___float_fromuns
0fe28     FD 14 02 F6 | 	mov	arg02, result1
0fe2c     10 13 02 F6 | 	mov	arg01, local02
0fe30     01 16 66 F6 | 	neg	arg03, #1
0fe34     98 BC B0 FD | 	call	#__system___float_cmp
0fe38     00 FA 55 F2 | 	cmps	result1, #0 wc
0fe3c     00 1E 26 36 |  if_ae	not	local01, #0
0fe40     A7 1E 62 FC | 	wrlong	local01, fp
0fe44     F8 02 90 FD | 	jmp	#LR__1243
0fe48                 | LR__1233
0fe48                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
0fe48     08 4E 05 F1 | 	add	fp, #8
0fe4c     A7 1E 02 FB | 	rdlong	local01, fp
0fe50     08 4E 85 F1 | 	sub	fp, #8
0fe54     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fe58     14 4E 05 A1 |  if_e	add	fp, #20
0fe5c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fe60     14 4E 85 A1 |  if_e	sub	fp, #20
0fe64     12 23 02 A6 |  if_e	mov	local03, local04
0fe68     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fe6c     44 00 90 5D |  if_ne	jmp	#LR__1234
0fe70     00 1E 06 F6 | 	mov	local01, #0
0fe74     A7 12 02 FB | 	rdlong	arg01, fp
0fe78     09 13 52 F6 | 	abs	arg01, arg01 wc
0fe7c     1F 26 C6 C9 |  if_b	decod	local05, #31
0fe80     00 26 06 36 |  if_ae	mov	local05, #0
0fe84     10 B4 B0 FD | 	call	#__system___float_fromuns
0fe88     13 FB 61 F5 | 	xor	result1, local05
0fe8c     FD 12 02 F6 | 	mov	arg01, result1
0fe90     0C 4E 05 F1 | 	add	fp, #12
0fe94     A7 14 02 FB | 	rdlong	arg02, fp
0fe98     0C 4E 85 F1 | 	sub	fp, #12
0fe9c     01 16 66 F6 | 	neg	arg03, #1
0fea0     2C BC B0 FD | 	call	#__system___float_cmp
0fea4     00 FA 55 F2 | 	cmps	result1, #0 wc
0fea8     00 1E 26 36 |  if_ae	not	local01, #0
0feac     A7 1E 62 FC | 	wrlong	local01, fp
0feb0     8C 02 90 FD | 	jmp	#LR__1243
0feb4                 | LR__1234
0feb4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
0feb4     08 4E 05 F1 | 	add	fp, #8
0feb8     A7 1E 02 FB | 	rdlong	local01, fp
0febc     08 4E 85 F1 | 	sub	fp, #8
0fec0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fec4     14 4E 05 A1 |  if_e	add	fp, #20
0fec8     A7 24 02 AB |  if_e	rdlong	local04, fp
0fecc     14 4E 85 A1 |  if_e	sub	fp, #20
0fed0     12 23 02 A6 |  if_e	mov	local03, local04
0fed4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fed8     24 00 90 5D |  if_ne	jmp	#LR__1235
0fedc     00 1E 06 F6 | 	mov	local01, #0
0fee0     A7 20 02 FB | 	rdlong	local02, fp
0fee4     0C 4E 05 F1 | 	add	fp, #12
0fee8     A7 22 02 FB | 	rdlong	local03, fp
0feec     0C 4E 85 F1 | 	sub	fp, #12
0fef0     11 21 52 F2 | 	cmps	local02, local03 wc
0fef4     01 1E 66 36 |  if_ae	neg	local01, #1
0fef8     A7 1E 62 FC | 	wrlong	local01, fp
0fefc     40 02 90 FD | 	jmp	#LR__1243
0ff00                 | LR__1235
0ff00                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
0ff00     08 4E 05 F1 | 	add	fp, #8
0ff04     A7 1E 02 FB | 	rdlong	local01, fp
0ff08     08 4E 85 F1 | 	sub	fp, #8
0ff0c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ff10     14 4E 05 A1 |  if_e	add	fp, #20
0ff14     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff18     14 4E 85 A1 |  if_e	sub	fp, #20
0ff1c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0ff20     24 00 90 5D |  if_ne	jmp	#LR__1236
0ff24     00 1E 06 F6 | 	mov	local01, #0
0ff28     A7 20 02 FB | 	rdlong	local02, fp
0ff2c     0C 4E 05 F1 | 	add	fp, #12
0ff30     A7 22 02 FB | 	rdlong	local03, fp
0ff34     0C 4E 85 F1 | 	sub	fp, #12
0ff38     11 21 52 F2 | 	cmps	local02, local03 wc
0ff3c     01 1E 66 36 |  if_ae	neg	local01, #1
0ff40     A7 1E 62 FC | 	wrlong	local01, fp
0ff44     F8 01 90 FD | 	jmp	#LR__1243
0ff48                 | LR__1236
0ff48                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
0ff48     08 4E 05 F1 | 	add	fp, #8
0ff4c     A7 1E 02 FB | 	rdlong	local01, fp
0ff50     08 4E 85 F1 | 	sub	fp, #8
0ff54     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ff58     14 4E 05 A1 |  if_e	add	fp, #20
0ff5c     A7 22 02 AB |  if_e	rdlong	local03, fp
0ff60     14 4E 85 A1 |  if_e	sub	fp, #20
0ff64     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ff68     34 00 90 5D |  if_ne	jmp	#LR__1237
0ff6c     00 1E 06 F6 | 	mov	local01, #0
0ff70     A7 12 02 FB | 	rdlong	arg01, fp
0ff74     20 B3 B0 FD | 	call	#__system___float_fromuns
0ff78     FD 12 02 F6 | 	mov	arg01, result1
0ff7c     0C 4E 05 F1 | 	add	fp, #12
0ff80     A7 14 02 FB | 	rdlong	arg02, fp
0ff84     0C 4E 85 F1 | 	sub	fp, #12
0ff88     01 16 66 F6 | 	neg	arg03, #1
0ff8c     40 BB B0 FD | 	call	#__system___float_cmp
0ff90     00 FA 55 F2 | 	cmps	result1, #0 wc
0ff94     00 1E 26 36 |  if_ae	not	local01, #0
0ff98     A7 1E 62 FC | 	wrlong	local01, fp
0ff9c     A0 01 90 FD | 	jmp	#LR__1243
0ffa0                 | LR__1237
0ffa0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
0ffa0     08 4E 05 F1 | 	add	fp, #8
0ffa4     A7 1E 02 FB | 	rdlong	local01, fp
0ffa8     08 4E 85 F1 | 	sub	fp, #8
0ffac     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ffb0     14 4E 05 A1 |  if_e	add	fp, #20
0ffb4     A7 22 02 AB |  if_e	rdlong	local03, fp
0ffb8     14 4E 85 A1 |  if_e	sub	fp, #20
0ffbc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ffc0     24 00 90 5D |  if_ne	jmp	#LR__1238
0ffc4     00 1E 06 F6 | 	mov	local01, #0
0ffc8     A7 20 02 FB | 	rdlong	local02, fp
0ffcc     0C 4E 05 F1 | 	add	fp, #12
0ffd0     A7 22 02 FB | 	rdlong	local03, fp
0ffd4     0C 4E 85 F1 | 	sub	fp, #12
0ffd8     11 21 52 F2 | 	cmps	local02, local03 wc
0ffdc     01 1E 66 36 |  if_ae	neg	local01, #1
0ffe0     A7 1E 62 FC | 	wrlong	local01, fp
0ffe4     58 01 90 FD | 	jmp	#LR__1243
0ffe8                 | LR__1238
0ffe8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
0ffe8     08 4E 05 F1 | 	add	fp, #8
0ffec     A7 1E 02 FB | 	rdlong	local01, fp
0fff0     08 4E 85 F1 | 	sub	fp, #8
0fff4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fff8     14 4E 05 A1 |  if_e	add	fp, #20
0fffc     A7 22 02 AB |  if_e	rdlong	local03, fp
10000     14 4E 85 A1 |  if_e	sub	fp, #20
10004     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10008     24 00 90 5D |  if_ne	jmp	#LR__1239
1000c     00 1E 06 F6 | 	mov	local01, #0
10010     A7 20 02 FB | 	rdlong	local02, fp
10014     0C 4E 05 F1 | 	add	fp, #12
10018     A7 22 02 FB | 	rdlong	local03, fp
1001c     0C 4E 85 F1 | 	sub	fp, #12
10020     11 21 12 F2 | 	cmp	local02, local03 wc
10024     01 1E 66 36 |  if_ae	neg	local01, #1
10028     A7 1E 62 FC | 	wrlong	local01, fp
1002c     10 01 90 FD | 	jmp	#LR__1243
10030                 | LR__1239
10030                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
10030     08 4E 05 F1 | 	add	fp, #8
10034     A7 1E 02 FB | 	rdlong	local01, fp
10038     08 4E 85 F1 | 	sub	fp, #8
1003c     2B 1E 0E F2 | 	cmp	local01, #43 wz
10040     14 4E 05 A1 |  if_e	add	fp, #20
10044     A7 22 02 AB |  if_e	rdlong	local03, fp
10048     14 4E 85 A1 |  if_e	sub	fp, #20
1004c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10050     30 00 90 5D |  if_ne	jmp	#LR__1240
10054     00 1E 06 F6 | 	mov	local01, #0
10058     A7 12 02 FB | 	rdlong	arg01, fp
1005c     94 C8 BF FD | 	call	#_convertstring
10060     FD 12 02 F6 | 	mov	arg01, result1
10064     0C 4E 05 F1 | 	add	fp, #12
10068     A7 14 02 FB | 	rdlong	arg02, fp
1006c     0C 4E 85 F1 | 	sub	fp, #12
10070     64 8B B0 FD | 	call	#__system___string_cmp
10074     00 FA 55 F2 | 	cmps	result1, #0 wc
10078     00 1E 26 36 |  if_ae	not	local01, #0
1007c     A7 1E 62 FC | 	wrlong	local01, fp
10080     BC 00 90 FD | 	jmp	#LR__1243
10084                 | LR__1240
10084                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
10084     08 4E 05 F1 | 	add	fp, #8
10088     A7 1E 02 FB | 	rdlong	local01, fp
1008c     08 4E 85 F1 | 	sub	fp, #8
10090     1F 1E 0E F2 | 	cmp	local01, #31 wz
10094     14 4E 05 A1 |  if_e	add	fp, #20
10098     A7 22 02 AB |  if_e	rdlong	local03, fp
1009c     14 4E 85 A1 |  if_e	sub	fp, #20
100a0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
100a4     34 00 90 5D |  if_ne	jmp	#LR__1241
100a8     00 1E 06 F6 | 	mov	local01, #0
100ac     A7 20 02 FB | 	rdlong	local02, fp
100b0     0C 4E 05 F1 | 	add	fp, #12
100b4     A7 12 02 FB | 	rdlong	arg01, fp
100b8     0C 4E 85 F1 | 	sub	fp, #12
100bc     34 C8 BF FD | 	call	#_convertstring
100c0     FD 14 02 F6 | 	mov	arg02, result1
100c4     10 13 02 F6 | 	mov	arg01, local02
100c8     0C 8B B0 FD | 	call	#__system___string_cmp
100cc     00 FA 55 F2 | 	cmps	result1, #0 wc
100d0     00 1E 26 36 |  if_ae	not	local01, #0
100d4     A7 1E 62 FC | 	wrlong	local01, fp
100d8     64 00 90 FD | 	jmp	#LR__1243
100dc                 | LR__1241
100dc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
100dc     08 4E 05 F1 | 	add	fp, #8
100e0     A7 1E 02 FB | 	rdlong	local01, fp
100e4     08 4E 85 F1 | 	sub	fp, #8
100e8     2B 1E 0E F2 | 	cmp	local01, #43 wz
100ec     14 4E 05 A1 |  if_e	add	fp, #20
100f0     A7 22 02 AB |  if_e	rdlong	local03, fp
100f4     14 4E 85 A1 |  if_e	sub	fp, #20
100f8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
100fc     3C 00 90 5D |  if_ne	jmp	#LR__1242
10100     00 1E 06 F6 | 	mov	local01, #0
10104     A7 12 02 FB | 	rdlong	arg01, fp
10108     E8 C7 BF FD | 	call	#_convertstring
1010c     FD 20 02 F6 | 	mov	local02, result1
10110     0C 4E 05 F1 | 	add	fp, #12
10114     A7 12 02 FB | 	rdlong	arg01, fp
10118     0C 4E 85 F1 | 	sub	fp, #12
1011c     D4 C7 BF FD | 	call	#_convertstring
10120     FD 14 02 F6 | 	mov	arg02, result1
10124     10 13 02 F6 | 	mov	arg01, local02
10128     AC 8A B0 FD | 	call	#__system___string_cmp
1012c     00 FA 55 F2 | 	cmps	result1, #0 wc
10130     00 1E 26 36 |  if_ae	not	local01, #0
10134     A7 1E 62 FC | 	wrlong	local01, fp
10138     04 00 90 FD | 	jmp	#LR__1243
1013c                 | LR__1242
1013c     A7 00 68 FC | 	wrlong	#0, fp
10140                 | LR__1243
10140     08 4E 05 F1 | 	add	fp, #8
10144     A7 38 68 FC | 	wrlong	#28, fp
10148     08 4E 85 F1 | 	sub	fp, #8
1014c     A7 12 02 F6 | 	mov	arg01, fp
10150     FC 96 BF FD | 	call	#_push
10154     A7 F0 03 F6 | 	mov	ptra, fp
10158     B2 00 A0 FD | 	call	#popregs_
1015c                 | _do_ge_ret
1015c     2D 00 64 FD | 	ret
10160                 | 
10160                 | ' 
10160                 | ' sub do_le
10160                 | _do_le
10160     05 4A 05 F6 | 	mov	COUNT_, #5
10164     A8 00 A0 FD | 	call	#pushregs_
10168     18 F0 07 F1 | 	add	ptra, #24
1016c     48 96 BF FD | 	call	#_pop
10170     FD 1E 02 F6 | 	mov	local01, result1
10174     FE 20 02 F6 | 	mov	local02, result2
10178     FF 22 02 F6 | 	mov	local03, result3
1017c     0C 4E 05 F1 | 	add	fp, #12
10180     A7 1E 62 FC | 	wrlong	local01, fp
10184     04 4E 05 F1 | 	add	fp, #4
10188     A7 20 62 FC | 	wrlong	local02, fp
1018c     04 4E 05 F1 | 	add	fp, #4
10190     A7 22 62 FC | 	wrlong	local03, fp
10194     14 4E 85 F1 | 	sub	fp, #20
10198     1C 96 BF FD | 	call	#_pop
1019c     FF 22 02 F6 | 	mov	local03, result3
101a0     A7 FA 61 FC | 	wrlong	result1, fp
101a4     04 4E 05 F1 | 	add	fp, #4
101a8     A7 FC 61 FC | 	wrlong	result2, fp
101ac     04 4E 05 F1 | 	add	fp, #4
101b0     A7 22 62 FC | 	wrlong	local03, fp
101b4                 | ' t2=pop()
101b4                 | ' t1=pop()
101b4                 | ' 
101b4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
101b4     08 4E 85 F1 | 	sub	fp, #8
101b8     1F 22 0E F2 | 	cmp	local03, #31 wz
101bc     14 4E 05 A1 |  if_e	add	fp, #20
101c0     A7 24 02 AB |  if_e	rdlong	local04, fp
101c4     14 4E 85 A1 |  if_e	sub	fp, #20
101c8     12 23 02 A6 |  if_e	mov	local03, local04
101cc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
101d0     28 00 90 5D |  if_ne	jmp	#LR__1250
101d4     00 1E 06 F6 | 	mov	local01, #0
101d8     A7 12 02 FB | 	rdlong	arg01, fp
101dc     0C 4E 05 F1 | 	add	fp, #12
101e0     A7 14 02 FB | 	rdlong	arg02, fp
101e4     0C 4E 85 F1 | 	sub	fp, #12
101e8     EC 89 B0 FD | 	call	#__system___string_cmp
101ec     01 FA 55 F2 | 	cmps	result1, #1 wc
101f0     00 1E 26 C6 |  if_b	not	local01, #0
101f4     A7 1E 62 FC | 	wrlong	local01, fp
101f8     1C 04 90 FD | 	jmp	#LR__1263
101fc                 | LR__1250
101fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
101fc     08 4E 05 F1 | 	add	fp, #8
10200     A7 1E 02 FB | 	rdlong	local01, fp
10204     08 4E 85 F1 | 	sub	fp, #8
10208     1E 1E 0E F2 | 	cmp	local01, #30 wz
1020c     14 4E 05 A1 |  if_e	add	fp, #20
10210     A7 24 02 AB |  if_e	rdlong	local04, fp
10214     14 4E 85 A1 |  if_e	sub	fp, #20
10218     12 23 02 A6 |  if_e	mov	local03, local04
1021c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10220     2C 00 90 5D |  if_ne	jmp	#LR__1251
10224     00 1E 06 F6 | 	mov	local01, #0
10228     A7 12 02 FB | 	rdlong	arg01, fp
1022c     0C 4E 05 F1 | 	add	fp, #12
10230     A7 14 02 FB | 	rdlong	arg02, fp
10234     0C 4E 85 F1 | 	sub	fp, #12
10238     01 16 06 F6 | 	mov	arg03, #1
1023c     90 B8 B0 FD | 	call	#__system___float_cmp
10240     01 FA 55 F2 | 	cmps	result1, #1 wc
10244     00 1E 26 C6 |  if_b	not	local01, #0
10248     A7 1E 62 FC | 	wrlong	local01, fp
1024c     C8 03 90 FD | 	jmp	#LR__1263
10250                 | LR__1251
10250                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
10250     08 4E 05 F1 | 	add	fp, #8
10254     A7 1E 02 FB | 	rdlong	local01, fp
10258     08 4E 85 F1 | 	sub	fp, #8
1025c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10260     14 4E 05 A1 |  if_e	add	fp, #20
10264     A7 24 02 AB |  if_e	rdlong	local04, fp
10268     14 4E 85 A1 |  if_e	sub	fp, #20
1026c     12 23 02 A6 |  if_e	mov	local03, local04
10270     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10274     48 00 90 5D |  if_ne	jmp	#LR__1252
10278     00 1E 06 F6 | 	mov	local01, #0
1027c     A7 20 02 FB | 	rdlong	local02, fp
10280     0C 4E 05 F1 | 	add	fp, #12
10284     A7 12 02 FB | 	rdlong	arg01, fp
10288     0C 4E 85 F1 | 	sub	fp, #12
1028c     09 13 52 F6 | 	abs	arg01, arg01 wc
10290     1F 26 C6 C9 |  if_b	decod	local05, #31
10294     00 26 06 36 |  if_ae	mov	local05, #0
10298     FC AF B0 FD | 	call	#__system___float_fromuns
1029c     13 FB 61 F5 | 	xor	result1, local05
102a0     FD 14 02 F6 | 	mov	arg02, result1
102a4     10 13 02 F6 | 	mov	arg01, local02
102a8     01 16 06 F6 | 	mov	arg03, #1
102ac     20 B8 B0 FD | 	call	#__system___float_cmp
102b0     01 FA 55 F2 | 	cmps	result1, #1 wc
102b4     00 1E 26 C6 |  if_b	not	local01, #0
102b8     A7 1E 62 FC | 	wrlong	local01, fp
102bc     58 03 90 FD | 	jmp	#LR__1263
102c0                 | LR__1252
102c0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
102c0     08 4E 05 F1 | 	add	fp, #8
102c4     A7 1E 02 FB | 	rdlong	local01, fp
102c8     08 4E 85 F1 | 	sub	fp, #8
102cc     1E 1E 0E F2 | 	cmp	local01, #30 wz
102d0     14 4E 05 A1 |  if_e	add	fp, #20
102d4     A7 24 02 AB |  if_e	rdlong	local04, fp
102d8     14 4E 85 A1 |  if_e	sub	fp, #20
102dc     12 23 02 A6 |  if_e	mov	local03, local04
102e0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
102e4     38 00 90 5D |  if_ne	jmp	#LR__1253
102e8     00 1E 06 F6 | 	mov	local01, #0
102ec     A7 20 02 FB | 	rdlong	local02, fp
102f0     0C 4E 05 F1 | 	add	fp, #12
102f4     A7 12 02 FB | 	rdlong	arg01, fp
102f8     0C 4E 85 F1 | 	sub	fp, #12
102fc     98 AF B0 FD | 	call	#__system___float_fromuns
10300     FD 14 02 F6 | 	mov	arg02, result1
10304     10 13 02 F6 | 	mov	arg01, local02
10308     01 16 06 F6 | 	mov	arg03, #1
1030c     C0 B7 B0 FD | 	call	#__system___float_cmp
10310     01 FA 55 F2 | 	cmps	result1, #1 wc
10314     00 1E 26 C6 |  if_b	not	local01, #0
10318     A7 1E 62 FC | 	wrlong	local01, fp
1031c     F8 02 90 FD | 	jmp	#LR__1263
10320                 | LR__1253
10320                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
10320     08 4E 05 F1 | 	add	fp, #8
10324     A7 1E 02 FB | 	rdlong	local01, fp
10328     08 4E 85 F1 | 	sub	fp, #8
1032c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10330     14 4E 05 A1 |  if_e	add	fp, #20
10334     A7 24 02 AB |  if_e	rdlong	local04, fp
10338     14 4E 85 A1 |  if_e	sub	fp, #20
1033c     12 23 02 A6 |  if_e	mov	local03, local04
10340     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10344     44 00 90 5D |  if_ne	jmp	#LR__1254
10348     00 1E 06 F6 | 	mov	local01, #0
1034c     A7 12 02 FB | 	rdlong	arg01, fp
10350     09 13 52 F6 | 	abs	arg01, arg01 wc
10354     1F 26 C6 C9 |  if_b	decod	local05, #31
10358     00 26 06 36 |  if_ae	mov	local05, #0
1035c     38 AF B0 FD | 	call	#__system___float_fromuns
10360     13 FB 61 F5 | 	xor	result1, local05
10364     FD 12 02 F6 | 	mov	arg01, result1
10368     0C 4E 05 F1 | 	add	fp, #12
1036c     A7 14 02 FB | 	rdlong	arg02, fp
10370     0C 4E 85 F1 | 	sub	fp, #12
10374     01 16 06 F6 | 	mov	arg03, #1
10378     54 B7 B0 FD | 	call	#__system___float_cmp
1037c     01 FA 55 F2 | 	cmps	result1, #1 wc
10380     00 1E 26 C6 |  if_b	not	local01, #0
10384     A7 1E 62 FC | 	wrlong	local01, fp
10388     8C 02 90 FD | 	jmp	#LR__1263
1038c                 | LR__1254
1038c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1038c     08 4E 05 F1 | 	add	fp, #8
10390     A7 1E 02 FB | 	rdlong	local01, fp
10394     08 4E 85 F1 | 	sub	fp, #8
10398     1C 1E 0E F2 | 	cmp	local01, #28 wz
1039c     14 4E 05 A1 |  if_e	add	fp, #20
103a0     A7 24 02 AB |  if_e	rdlong	local04, fp
103a4     14 4E 85 A1 |  if_e	sub	fp, #20
103a8     12 23 02 A6 |  if_e	mov	local03, local04
103ac     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
103b0     24 00 90 5D |  if_ne	jmp	#LR__1255
103b4     00 1E 06 F6 | 	mov	local01, #0
103b8     A7 20 02 FB | 	rdlong	local02, fp
103bc     0C 4E 05 F1 | 	add	fp, #12
103c0     A7 22 02 FB | 	rdlong	local03, fp
103c4     0C 4E 85 F1 | 	sub	fp, #12
103c8     11 21 5A F2 | 	cmps	local02, local03 wcz
103cc     01 1E 66 E6 |  if_be	neg	local01, #1
103d0     A7 1E 62 FC | 	wrlong	local01, fp
103d4     40 02 90 FD | 	jmp	#LR__1263
103d8                 | LR__1255
103d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
103d8     08 4E 05 F1 | 	add	fp, #8
103dc     A7 1E 02 FB | 	rdlong	local01, fp
103e0     08 4E 85 F1 | 	sub	fp, #8
103e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
103e8     14 4E 05 A1 |  if_e	add	fp, #20
103ec     A7 24 02 AB |  if_e	rdlong	local04, fp
103f0     14 4E 85 A1 |  if_e	sub	fp, #20
103f4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
103f8     24 00 90 5D |  if_ne	jmp	#LR__1256
103fc     00 1E 06 F6 | 	mov	local01, #0
10400     A7 20 02 FB | 	rdlong	local02, fp
10404     0C 4E 05 F1 | 	add	fp, #12
10408     A7 22 02 FB | 	rdlong	local03, fp
1040c     0C 4E 85 F1 | 	sub	fp, #12
10410     11 21 5A F2 | 	cmps	local02, local03 wcz
10414     01 1E 66 E6 |  if_be	neg	local01, #1
10418     A7 1E 62 FC | 	wrlong	local01, fp
1041c     F8 01 90 FD | 	jmp	#LR__1263
10420                 | LR__1256
10420                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
10420     08 4E 05 F1 | 	add	fp, #8
10424     A7 1E 02 FB | 	rdlong	local01, fp
10428     08 4E 85 F1 | 	sub	fp, #8
1042c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10430     14 4E 05 A1 |  if_e	add	fp, #20
10434     A7 22 02 AB |  if_e	rdlong	local03, fp
10438     14 4E 85 A1 |  if_e	sub	fp, #20
1043c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10440     34 00 90 5D |  if_ne	jmp	#LR__1257
10444     00 1E 06 F6 | 	mov	local01, #0
10448     A7 12 02 FB | 	rdlong	arg01, fp
1044c     48 AE B0 FD | 	call	#__system___float_fromuns
10450     FD 12 02 F6 | 	mov	arg01, result1
10454     0C 4E 05 F1 | 	add	fp, #12
10458     A7 14 02 FB | 	rdlong	arg02, fp
1045c     0C 4E 85 F1 | 	sub	fp, #12
10460     01 16 06 F6 | 	mov	arg03, #1
10464     68 B6 B0 FD | 	call	#__system___float_cmp
10468     01 FA 55 F2 | 	cmps	result1, #1 wc
1046c     00 1E 26 C6 |  if_b	not	local01, #0
10470     A7 1E 62 FC | 	wrlong	local01, fp
10474     A0 01 90 FD | 	jmp	#LR__1263
10478                 | LR__1257
10478                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
10478     08 4E 05 F1 | 	add	fp, #8
1047c     A7 1E 02 FB | 	rdlong	local01, fp
10480     08 4E 85 F1 | 	sub	fp, #8
10484     1D 1E 0E F2 | 	cmp	local01, #29 wz
10488     14 4E 05 A1 |  if_e	add	fp, #20
1048c     A7 22 02 AB |  if_e	rdlong	local03, fp
10490     14 4E 85 A1 |  if_e	sub	fp, #20
10494     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10498     24 00 90 5D |  if_ne	jmp	#LR__1258
1049c     00 1E 06 F6 | 	mov	local01, #0
104a0     A7 20 02 FB | 	rdlong	local02, fp
104a4     0C 4E 05 F1 | 	add	fp, #12
104a8     A7 22 02 FB | 	rdlong	local03, fp
104ac     0C 4E 85 F1 | 	sub	fp, #12
104b0     11 21 5A F2 | 	cmps	local02, local03 wcz
104b4     01 1E 66 E6 |  if_be	neg	local01, #1
104b8     A7 1E 62 FC | 	wrlong	local01, fp
104bc     58 01 90 FD | 	jmp	#LR__1263
104c0                 | LR__1258
104c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
104c0     08 4E 05 F1 | 	add	fp, #8
104c4     A7 1E 02 FB | 	rdlong	local01, fp
104c8     08 4E 85 F1 | 	sub	fp, #8
104cc     1D 1E 0E F2 | 	cmp	local01, #29 wz
104d0     14 4E 05 A1 |  if_e	add	fp, #20
104d4     A7 22 02 AB |  if_e	rdlong	local03, fp
104d8     14 4E 85 A1 |  if_e	sub	fp, #20
104dc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
104e0     24 00 90 5D |  if_ne	jmp	#LR__1259
104e4     00 1E 06 F6 | 	mov	local01, #0
104e8     A7 20 02 FB | 	rdlong	local02, fp
104ec     0C 4E 05 F1 | 	add	fp, #12
104f0     A7 22 02 FB | 	rdlong	local03, fp
104f4     0C 4E 85 F1 | 	sub	fp, #12
104f8     11 21 1A F2 | 	cmp	local02, local03 wcz
104fc     01 1E 66 E6 |  if_be	neg	local01, #1
10500     A7 1E 62 FC | 	wrlong	local01, fp
10504     10 01 90 FD | 	jmp	#LR__1263
10508                 | LR__1259
10508                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
10508     08 4E 05 F1 | 	add	fp, #8
1050c     A7 1E 02 FB | 	rdlong	local01, fp
10510     08 4E 85 F1 | 	sub	fp, #8
10514     2B 1E 0E F2 | 	cmp	local01, #43 wz
10518     14 4E 05 A1 |  if_e	add	fp, #20
1051c     A7 22 02 AB |  if_e	rdlong	local03, fp
10520     14 4E 85 A1 |  if_e	sub	fp, #20
10524     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10528     30 00 90 5D |  if_ne	jmp	#LR__1260
1052c     00 1E 06 F6 | 	mov	local01, #0
10530     A7 12 02 FB | 	rdlong	arg01, fp
10534     BC C3 BF FD | 	call	#_convertstring
10538     FD 12 02 F6 | 	mov	arg01, result1
1053c     0C 4E 05 F1 | 	add	fp, #12
10540     A7 14 02 FB | 	rdlong	arg02, fp
10544     0C 4E 85 F1 | 	sub	fp, #12
10548     8C 86 B0 FD | 	call	#__system___string_cmp
1054c     01 FA 55 F2 | 	cmps	result1, #1 wc
10550     00 1E 26 C6 |  if_b	not	local01, #0
10554     A7 1E 62 FC | 	wrlong	local01, fp
10558     BC 00 90 FD | 	jmp	#LR__1263
1055c                 | LR__1260
1055c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1055c     08 4E 05 F1 | 	add	fp, #8
10560     A7 1E 02 FB | 	rdlong	local01, fp
10564     08 4E 85 F1 | 	sub	fp, #8
10568     1F 1E 0E F2 | 	cmp	local01, #31 wz
1056c     14 4E 05 A1 |  if_e	add	fp, #20
10570     A7 22 02 AB |  if_e	rdlong	local03, fp
10574     14 4E 85 A1 |  if_e	sub	fp, #20
10578     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1057c     34 00 90 5D |  if_ne	jmp	#LR__1261
10580     00 1E 06 F6 | 	mov	local01, #0
10584     A7 20 02 FB | 	rdlong	local02, fp
10588     0C 4E 05 F1 | 	add	fp, #12
1058c     A7 12 02 FB | 	rdlong	arg01, fp
10590     0C 4E 85 F1 | 	sub	fp, #12
10594     5C C3 BF FD | 	call	#_convertstring
10598     FD 14 02 F6 | 	mov	arg02, result1
1059c     10 13 02 F6 | 	mov	arg01, local02
105a0     34 86 B0 FD | 	call	#__system___string_cmp
105a4     01 FA 55 F2 | 	cmps	result1, #1 wc
105a8     00 1E 26 C6 |  if_b	not	local01, #0
105ac     A7 1E 62 FC | 	wrlong	local01, fp
105b0     64 00 90 FD | 	jmp	#LR__1263
105b4                 | LR__1261
105b4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
105b4     08 4E 05 F1 | 	add	fp, #8
105b8     A7 1E 02 FB | 	rdlong	local01, fp
105bc     08 4E 85 F1 | 	sub	fp, #8
105c0     2B 1E 0E F2 | 	cmp	local01, #43 wz
105c4     14 4E 05 A1 |  if_e	add	fp, #20
105c8     A7 22 02 AB |  if_e	rdlong	local03, fp
105cc     14 4E 85 A1 |  if_e	sub	fp, #20
105d0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
105d4     3C 00 90 5D |  if_ne	jmp	#LR__1262
105d8     00 1E 06 F6 | 	mov	local01, #0
105dc     A7 12 02 FB | 	rdlong	arg01, fp
105e0     10 C3 BF FD | 	call	#_convertstring
105e4     FD 20 02 F6 | 	mov	local02, result1
105e8     0C 4E 05 F1 | 	add	fp, #12
105ec     A7 12 02 FB | 	rdlong	arg01, fp
105f0     0C 4E 85 F1 | 	sub	fp, #12
105f4     FC C2 BF FD | 	call	#_convertstring
105f8     FD 14 02 F6 | 	mov	arg02, result1
105fc     10 13 02 F6 | 	mov	arg01, local02
10600     D4 85 B0 FD | 	call	#__system___string_cmp
10604     01 FA 55 F2 | 	cmps	result1, #1 wc
10608     00 1E 26 C6 |  if_b	not	local01, #0
1060c     A7 1E 62 FC | 	wrlong	local01, fp
10610     04 00 90 FD | 	jmp	#LR__1263
10614                 | LR__1262
10614     A7 00 68 FC | 	wrlong	#0, fp
10618                 | LR__1263
10618     08 4E 05 F1 | 	add	fp, #8
1061c     A7 38 68 FC | 	wrlong	#28, fp
10620     08 4E 85 F1 | 	sub	fp, #8
10624     A7 12 02 F6 | 	mov	arg01, fp
10628     24 92 BF FD | 	call	#_push
1062c     A7 F0 03 F6 | 	mov	ptra, fp
10630     B2 00 A0 FD | 	call	#popregs_
10634                 | _do_le_ret
10634     2D 00 64 FD | 	ret
10638                 | 
10638                 | ' 
10638                 | ' 
10638                 | ' sub do_ne
10638                 | _do_ne
10638     05 4A 05 F6 | 	mov	COUNT_, #5
1063c     A8 00 A0 FD | 	call	#pushregs_
10640     18 F0 07 F1 | 	add	ptra, #24
10644     70 91 BF FD | 	call	#_pop
10648     FD 1E 02 F6 | 	mov	local01, result1
1064c     FE 20 02 F6 | 	mov	local02, result2
10650     FF 22 02 F6 | 	mov	local03, result3
10654     0C 4E 05 F1 | 	add	fp, #12
10658     A7 1E 62 FC | 	wrlong	local01, fp
1065c     04 4E 05 F1 | 	add	fp, #4
10660     A7 20 62 FC | 	wrlong	local02, fp
10664     04 4E 05 F1 | 	add	fp, #4
10668     A7 22 62 FC | 	wrlong	local03, fp
1066c     14 4E 85 F1 | 	sub	fp, #20
10670     44 91 BF FD | 	call	#_pop
10674     FF 22 02 F6 | 	mov	local03, result3
10678     A7 FA 61 FC | 	wrlong	result1, fp
1067c     04 4E 05 F1 | 	add	fp, #4
10680     A7 FC 61 FC | 	wrlong	result2, fp
10684     04 4E 05 F1 | 	add	fp, #4
10688     A7 22 62 FC | 	wrlong	local03, fp
1068c                 | ' t2=pop()
1068c                 | ' t1=pop()
1068c                 | ' 
1068c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1068c     08 4E 85 F1 | 	sub	fp, #8
10690     1F 22 0E F2 | 	cmp	local03, #31 wz
10694     14 4E 05 A1 |  if_e	add	fp, #20
10698     A7 24 02 AB |  if_e	rdlong	local04, fp
1069c     14 4E 85 A1 |  if_e	sub	fp, #20
106a0     12 23 02 A6 |  if_e	mov	local03, local04
106a4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
106a8     28 00 90 5D |  if_ne	jmp	#LR__1270
106ac     00 1E 06 F6 | 	mov	local01, #0
106b0     A7 12 02 FB | 	rdlong	arg01, fp
106b4     0C 4E 05 F1 | 	add	fp, #12
106b8     A7 14 02 FB | 	rdlong	arg02, fp
106bc     0C 4E 85 F1 | 	sub	fp, #12
106c0     14 85 B0 FD | 	call	#__system___string_cmp
106c4     00 FA 0D F2 | 	cmp	result1, #0 wz
106c8     00 1E 26 56 |  if_ne	not	local01, #0
106cc     A7 1E 62 FC | 	wrlong	local01, fp
106d0     1C 04 90 FD | 	jmp	#LR__1283
106d4                 | LR__1270
106d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
106d4     08 4E 05 F1 | 	add	fp, #8
106d8     A7 1E 02 FB | 	rdlong	local01, fp
106dc     08 4E 85 F1 | 	sub	fp, #8
106e0     1E 1E 0E F2 | 	cmp	local01, #30 wz
106e4     14 4E 05 A1 |  if_e	add	fp, #20
106e8     A7 24 02 AB |  if_e	rdlong	local04, fp
106ec     14 4E 85 A1 |  if_e	sub	fp, #20
106f0     12 23 02 A6 |  if_e	mov	local03, local04
106f4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
106f8     2C 00 90 5D |  if_ne	jmp	#LR__1271
106fc     00 1E 06 F6 | 	mov	local01, #0
10700     A7 12 02 FB | 	rdlong	arg01, fp
10704     0C 4E 05 F1 | 	add	fp, #12
10708     A7 14 02 FB | 	rdlong	arg02, fp
1070c     0C 4E 85 F1 | 	sub	fp, #12
10710     01 16 06 F6 | 	mov	arg03, #1
10714     B8 B3 B0 FD | 	call	#__system___float_cmp
10718     00 FA 0D F2 | 	cmp	result1, #0 wz
1071c     00 1E 26 56 |  if_ne	not	local01, #0
10720     A7 1E 62 FC | 	wrlong	local01, fp
10724     C8 03 90 FD | 	jmp	#LR__1283
10728                 | LR__1271
10728                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
10728     08 4E 05 F1 | 	add	fp, #8
1072c     A7 1E 02 FB | 	rdlong	local01, fp
10730     08 4E 85 F1 | 	sub	fp, #8
10734     1E 1E 0E F2 | 	cmp	local01, #30 wz
10738     14 4E 05 A1 |  if_e	add	fp, #20
1073c     A7 24 02 AB |  if_e	rdlong	local04, fp
10740     14 4E 85 A1 |  if_e	sub	fp, #20
10744     12 23 02 A6 |  if_e	mov	local03, local04
10748     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1074c     48 00 90 5D |  if_ne	jmp	#LR__1272
10750     00 1E 06 F6 | 	mov	local01, #0
10754     A7 20 02 FB | 	rdlong	local02, fp
10758     0C 4E 05 F1 | 	add	fp, #12
1075c     A7 12 02 FB | 	rdlong	arg01, fp
10760     0C 4E 85 F1 | 	sub	fp, #12
10764     09 13 52 F6 | 	abs	arg01, arg01 wc
10768     1F 26 C6 C9 |  if_b	decod	local05, #31
1076c     00 26 06 36 |  if_ae	mov	local05, #0
10770     24 AB B0 FD | 	call	#__system___float_fromuns
10774     13 FB 61 F5 | 	xor	result1, local05
10778     FD 14 02 F6 | 	mov	arg02, result1
1077c     10 13 02 F6 | 	mov	arg01, local02
10780     01 16 06 F6 | 	mov	arg03, #1
10784     48 B3 B0 FD | 	call	#__system___float_cmp
10788     00 FA 0D F2 | 	cmp	result1, #0 wz
1078c     00 1E 26 56 |  if_ne	not	local01, #0
10790     A7 1E 62 FC | 	wrlong	local01, fp
10794     58 03 90 FD | 	jmp	#LR__1283
10798                 | LR__1272
10798                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
10798     08 4E 05 F1 | 	add	fp, #8
1079c     A7 1E 02 FB | 	rdlong	local01, fp
107a0     08 4E 85 F1 | 	sub	fp, #8
107a4     1E 1E 0E F2 | 	cmp	local01, #30 wz
107a8     14 4E 05 A1 |  if_e	add	fp, #20
107ac     A7 24 02 AB |  if_e	rdlong	local04, fp
107b0     14 4E 85 A1 |  if_e	sub	fp, #20
107b4     12 23 02 A6 |  if_e	mov	local03, local04
107b8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
107bc     38 00 90 5D |  if_ne	jmp	#LR__1273
107c0     00 1E 06 F6 | 	mov	local01, #0
107c4     A7 20 02 FB | 	rdlong	local02, fp
107c8     0C 4E 05 F1 | 	add	fp, #12
107cc     A7 12 02 FB | 	rdlong	arg01, fp
107d0     0C 4E 85 F1 | 	sub	fp, #12
107d4     C0 AA B0 FD | 	call	#__system___float_fromuns
107d8     FD 14 02 F6 | 	mov	arg02, result1
107dc     10 13 02 F6 | 	mov	arg01, local02
107e0     01 16 06 F6 | 	mov	arg03, #1
107e4     E8 B2 B0 FD | 	call	#__system___float_cmp
107e8     00 FA 0D F2 | 	cmp	result1, #0 wz
107ec     00 1E 26 56 |  if_ne	not	local01, #0
107f0     A7 1E 62 FC | 	wrlong	local01, fp
107f4     F8 02 90 FD | 	jmp	#LR__1283
107f8                 | LR__1273
107f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
107f8     08 4E 05 F1 | 	add	fp, #8
107fc     A7 1E 02 FB | 	rdlong	local01, fp
10800     08 4E 85 F1 | 	sub	fp, #8
10804     1C 1E 0E F2 | 	cmp	local01, #28 wz
10808     14 4E 05 A1 |  if_e	add	fp, #20
1080c     A7 24 02 AB |  if_e	rdlong	local04, fp
10810     14 4E 85 A1 |  if_e	sub	fp, #20
10814     12 23 02 A6 |  if_e	mov	local03, local04
10818     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1081c     44 00 90 5D |  if_ne	jmp	#LR__1274
10820     00 1E 06 F6 | 	mov	local01, #0
10824     A7 12 02 FB | 	rdlong	arg01, fp
10828     09 13 52 F6 | 	abs	arg01, arg01 wc
1082c     1F 26 C6 C9 |  if_b	decod	local05, #31
10830     00 26 06 36 |  if_ae	mov	local05, #0
10834     60 AA B0 FD | 	call	#__system___float_fromuns
10838     13 FB 61 F5 | 	xor	result1, local05
1083c     FD 12 02 F6 | 	mov	arg01, result1
10840     0C 4E 05 F1 | 	add	fp, #12
10844     A7 14 02 FB | 	rdlong	arg02, fp
10848     0C 4E 85 F1 | 	sub	fp, #12
1084c     01 16 06 F6 | 	mov	arg03, #1
10850     7C B2 B0 FD | 	call	#__system___float_cmp
10854     00 FA 0D F2 | 	cmp	result1, #0 wz
10858     00 1E 26 56 |  if_ne	not	local01, #0
1085c     A7 1E 62 FC | 	wrlong	local01, fp
10860     8C 02 90 FD | 	jmp	#LR__1283
10864                 | LR__1274
10864                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
10864     08 4E 05 F1 | 	add	fp, #8
10868     A7 1E 02 FB | 	rdlong	local01, fp
1086c     08 4E 85 F1 | 	sub	fp, #8
10870     1C 1E 0E F2 | 	cmp	local01, #28 wz
10874     14 4E 05 A1 |  if_e	add	fp, #20
10878     A7 24 02 AB |  if_e	rdlong	local04, fp
1087c     14 4E 85 A1 |  if_e	sub	fp, #20
10880     12 23 02 A6 |  if_e	mov	local03, local04
10884     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10888     24 00 90 5D |  if_ne	jmp	#LR__1275
1088c     00 1E 06 F6 | 	mov	local01, #0
10890     A7 20 02 FB | 	rdlong	local02, fp
10894     0C 4E 05 F1 | 	add	fp, #12
10898     A7 22 02 FB | 	rdlong	local03, fp
1089c     0C 4E 85 F1 | 	sub	fp, #12
108a0     11 21 0A F2 | 	cmp	local02, local03 wz
108a4     01 1E 66 56 |  if_ne	neg	local01, #1
108a8     A7 1E 62 FC | 	wrlong	local01, fp
108ac     40 02 90 FD | 	jmp	#LR__1283
108b0                 | LR__1275
108b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
108b0     08 4E 05 F1 | 	add	fp, #8
108b4     A7 1E 02 FB | 	rdlong	local01, fp
108b8     08 4E 85 F1 | 	sub	fp, #8
108bc     1C 1E 0E F2 | 	cmp	local01, #28 wz
108c0     14 4E 05 A1 |  if_e	add	fp, #20
108c4     A7 24 02 AB |  if_e	rdlong	local04, fp
108c8     14 4E 85 A1 |  if_e	sub	fp, #20
108cc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
108d0     24 00 90 5D |  if_ne	jmp	#LR__1276
108d4     00 1E 06 F6 | 	mov	local01, #0
108d8     A7 20 02 FB | 	rdlong	local02, fp
108dc     0C 4E 05 F1 | 	add	fp, #12
108e0     A7 22 02 FB | 	rdlong	local03, fp
108e4     0C 4E 85 F1 | 	sub	fp, #12
108e8     11 21 0A F2 | 	cmp	local02, local03 wz
108ec     01 1E 66 56 |  if_ne	neg	local01, #1
108f0     A7 1E 62 FC | 	wrlong	local01, fp
108f4     F8 01 90 FD | 	jmp	#LR__1283
108f8                 | LR__1276
108f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
108f8     08 4E 05 F1 | 	add	fp, #8
108fc     A7 1E 02 FB | 	rdlong	local01, fp
10900     08 4E 85 F1 | 	sub	fp, #8
10904     1D 1E 0E F2 | 	cmp	local01, #29 wz
10908     14 4E 05 A1 |  if_e	add	fp, #20
1090c     A7 22 02 AB |  if_e	rdlong	local03, fp
10910     14 4E 85 A1 |  if_e	sub	fp, #20
10914     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10918     34 00 90 5D |  if_ne	jmp	#LR__1277
1091c     00 1E 06 F6 | 	mov	local01, #0
10920     A7 12 02 FB | 	rdlong	arg01, fp
10924     70 A9 B0 FD | 	call	#__system___float_fromuns
10928     FD 12 02 F6 | 	mov	arg01, result1
1092c     0C 4E 05 F1 | 	add	fp, #12
10930     A7 14 02 FB | 	rdlong	arg02, fp
10934     0C 4E 85 F1 | 	sub	fp, #12
10938     01 16 06 F6 | 	mov	arg03, #1
1093c     90 B1 B0 FD | 	call	#__system___float_cmp
10940     00 FA 0D F2 | 	cmp	result1, #0 wz
10944     00 1E 26 56 |  if_ne	not	local01, #0
10948     A7 1E 62 FC | 	wrlong	local01, fp
1094c     A0 01 90 FD | 	jmp	#LR__1283
10950                 | LR__1277
10950                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
10950     08 4E 05 F1 | 	add	fp, #8
10954     A7 1E 02 FB | 	rdlong	local01, fp
10958     08 4E 85 F1 | 	sub	fp, #8
1095c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10960     14 4E 05 A1 |  if_e	add	fp, #20
10964     A7 22 02 AB |  if_e	rdlong	local03, fp
10968     14 4E 85 A1 |  if_e	sub	fp, #20
1096c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10970     24 00 90 5D |  if_ne	jmp	#LR__1278
10974     00 1E 06 F6 | 	mov	local01, #0
10978     A7 20 02 FB | 	rdlong	local02, fp
1097c     0C 4E 05 F1 | 	add	fp, #12
10980     A7 22 02 FB | 	rdlong	local03, fp
10984     0C 4E 85 F1 | 	sub	fp, #12
10988     11 21 0A F2 | 	cmp	local02, local03 wz
1098c     01 1E 66 56 |  if_ne	neg	local01, #1
10990     A7 1E 62 FC | 	wrlong	local01, fp
10994     58 01 90 FD | 	jmp	#LR__1283
10998                 | LR__1278
10998                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
10998     08 4E 05 F1 | 	add	fp, #8
1099c     A7 1E 02 FB | 	rdlong	local01, fp
109a0     08 4E 85 F1 | 	sub	fp, #8
109a4     1D 1E 0E F2 | 	cmp	local01, #29 wz
109a8     14 4E 05 A1 |  if_e	add	fp, #20
109ac     A7 22 02 AB |  if_e	rdlong	local03, fp
109b0     14 4E 85 A1 |  if_e	sub	fp, #20
109b4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
109b8     24 00 90 5D |  if_ne	jmp	#LR__1279
109bc     00 1E 06 F6 | 	mov	local01, #0
109c0     A7 20 02 FB | 	rdlong	local02, fp
109c4     0C 4E 05 F1 | 	add	fp, #12
109c8     A7 22 02 FB | 	rdlong	local03, fp
109cc     0C 4E 85 F1 | 	sub	fp, #12
109d0     11 21 0A F2 | 	cmp	local02, local03 wz
109d4     01 1E 66 56 |  if_ne	neg	local01, #1
109d8     A7 1E 62 FC | 	wrlong	local01, fp
109dc     10 01 90 FD | 	jmp	#LR__1283
109e0                 | LR__1279
109e0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
109e0     08 4E 05 F1 | 	add	fp, #8
109e4     A7 1E 02 FB | 	rdlong	local01, fp
109e8     08 4E 85 F1 | 	sub	fp, #8
109ec     2B 1E 0E F2 | 	cmp	local01, #43 wz
109f0     14 4E 05 A1 |  if_e	add	fp, #20
109f4     A7 22 02 AB |  if_e	rdlong	local03, fp
109f8     14 4E 85 A1 |  if_e	sub	fp, #20
109fc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10a00     30 00 90 5D |  if_ne	jmp	#LR__1280
10a04     00 1E 06 F6 | 	mov	local01, #0
10a08     A7 12 02 FB | 	rdlong	arg01, fp
10a0c     E4 BE BF FD | 	call	#_convertstring
10a10     FD 12 02 F6 | 	mov	arg01, result1
10a14     0C 4E 05 F1 | 	add	fp, #12
10a18     A7 14 02 FB | 	rdlong	arg02, fp
10a1c     0C 4E 85 F1 | 	sub	fp, #12
10a20     B4 81 B0 FD | 	call	#__system___string_cmp
10a24     00 FA 0D F2 | 	cmp	result1, #0 wz
10a28     00 1E 26 56 |  if_ne	not	local01, #0
10a2c     A7 1E 62 FC | 	wrlong	local01, fp
10a30     BC 00 90 FD | 	jmp	#LR__1283
10a34                 | LR__1280
10a34                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
10a34     08 4E 05 F1 | 	add	fp, #8
10a38     A7 1E 02 FB | 	rdlong	local01, fp
10a3c     08 4E 85 F1 | 	sub	fp, #8
10a40     1F 1E 0E F2 | 	cmp	local01, #31 wz
10a44     14 4E 05 A1 |  if_e	add	fp, #20
10a48     A7 22 02 AB |  if_e	rdlong	local03, fp
10a4c     14 4E 85 A1 |  if_e	sub	fp, #20
10a50     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10a54     34 00 90 5D |  if_ne	jmp	#LR__1281
10a58     00 1E 06 F6 | 	mov	local01, #0
10a5c     A7 20 02 FB | 	rdlong	local02, fp
10a60     0C 4E 05 F1 | 	add	fp, #12
10a64     A7 12 02 FB | 	rdlong	arg01, fp
10a68     0C 4E 85 F1 | 	sub	fp, #12
10a6c     84 BE BF FD | 	call	#_convertstring
10a70     FD 14 02 F6 | 	mov	arg02, result1
10a74     10 13 02 F6 | 	mov	arg01, local02
10a78     5C 81 B0 FD | 	call	#__system___string_cmp
10a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
10a80     00 1E 26 56 |  if_ne	not	local01, #0
10a84     A7 1E 62 FC | 	wrlong	local01, fp
10a88     64 00 90 FD | 	jmp	#LR__1283
10a8c                 | LR__1281
10a8c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
10a8c     08 4E 05 F1 | 	add	fp, #8
10a90     A7 1E 02 FB | 	rdlong	local01, fp
10a94     08 4E 85 F1 | 	sub	fp, #8
10a98     2B 1E 0E F2 | 	cmp	local01, #43 wz
10a9c     14 4E 05 A1 |  if_e	add	fp, #20
10aa0     A7 22 02 AB |  if_e	rdlong	local03, fp
10aa4     14 4E 85 A1 |  if_e	sub	fp, #20
10aa8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10aac     3C 00 90 5D |  if_ne	jmp	#LR__1282
10ab0     00 1E 06 F6 | 	mov	local01, #0
10ab4     A7 12 02 FB | 	rdlong	arg01, fp
10ab8     38 BE BF FD | 	call	#_convertstring
10abc     FD 20 02 F6 | 	mov	local02, result1
10ac0     0C 4E 05 F1 | 	add	fp, #12
10ac4     A7 12 02 FB | 	rdlong	arg01, fp
10ac8     0C 4E 85 F1 | 	sub	fp, #12
10acc     24 BE BF FD | 	call	#_convertstring
10ad0     FD 14 02 F6 | 	mov	arg02, result1
10ad4     10 13 02 F6 | 	mov	arg01, local02
10ad8     FC 80 B0 FD | 	call	#__system___string_cmp
10adc     00 FA 0D F2 | 	cmp	result1, #0 wz
10ae0     00 1E 26 56 |  if_ne	not	local01, #0
10ae4     A7 1E 62 FC | 	wrlong	local01, fp
10ae8     04 00 90 FD | 	jmp	#LR__1283
10aec                 | LR__1282
10aec     A7 00 68 FC | 	wrlong	#0, fp
10af0                 | LR__1283
10af0     08 4E 05 F1 | 	add	fp, #8
10af4     A7 38 68 FC | 	wrlong	#28, fp
10af8     08 4E 85 F1 | 	sub	fp, #8
10afc     A7 12 02 F6 | 	mov	arg01, fp
10b00     4C 8D BF FD | 	call	#_push
10b04     A7 F0 03 F6 | 	mov	ptra, fp
10b08     B2 00 A0 FD | 	call	#popregs_
10b0c                 | _do_ne_ret
10b0c     2D 00 64 FD | 	ret
10b10                 | 
10b10                 | ' 
10b10                 | ' 
10b10                 | ' 
10b10                 | ' ' -------------------   convert a variable on the top of stack to integer
10b10                 | ' 
10b10                 | ' sub do_converttoint
10b10                 | _do_converttoint
10b10     02 4A 05 F6 | 	mov	COUNT_, #2
10b14     A8 00 A0 FD | 	call	#pushregs_
10b18     18 F0 07 F1 | 	add	ptra, #24
10b1c     98 8C BF FD | 	call	#_pop
10b20     FE 1E 02 F6 | 	mov	local01, result2
10b24     FF 20 02 F6 | 	mov	local02, result3
10b28     A7 FA 61 FC | 	wrlong	result1, fp
10b2c     04 4E 05 F1 | 	add	fp, #4
10b30     A7 1E 62 FC | 	wrlong	local01, fp
10b34     04 4E 05 F1 | 	add	fp, #4
10b38     A7 20 62 FC | 	wrlong	local02, fp
10b3c                 | ' t1=pop() 
10b3c                 | ' select case t1.result_type
10b3c     08 4E 85 F1 | 	sub	fp, #8
10b40     1C 20 0E F2 | 	cmp	local02, #28 wz
10b44     2C 00 90 AD |  if_e	jmp	#LR__1290
10b48     1D 20 0E F2 | 	cmp	local02, #29 wz
10b4c     40 00 90 AD |  if_e	jmp	#LR__1291
10b50     1E 20 0E F2 | 	cmp	local02, #30 wz
10b54     54 00 90 AD |  if_e	jmp	#LR__1292
10b58     1F 20 0E F2 | 	cmp	local02, #31 wz
10b5c     70 00 90 AD |  if_e	jmp	#LR__1293
10b60     2B 20 0E F2 | 	cmp	local02, #43 wz
10b64     94 00 90 AD |  if_e	jmp	#LR__1294
10b68     FF 20 0E F2 | 	cmp	local02, #255 wz
10b6c     C0 00 90 AD |  if_e	jmp	#LR__1295
10b70     DC 00 90 FD | 	jmp	#LR__1296
10b74                 | LR__1290
10b74     A7 20 02 FB | 	rdlong	local02, fp
10b78     0C 4E 05 F1 | 	add	fp, #12
10b7c     A7 20 62 FC | 	wrlong	local02, fp
10b80     04 4E 05 F1 | 	add	fp, #4
10b84     A7 38 68 FC | 	wrlong	#28, fp
10b88     10 4E 85 F1 | 	sub	fp, #16
10b8c     D4 00 90 FD | 	jmp	#LR__1297
10b90                 | LR__1291
10b90     A7 20 02 FB | 	rdlong	local02, fp
10b94     0C 4E 05 F1 | 	add	fp, #12
10b98     A7 20 62 FC | 	wrlong	local02, fp
10b9c     04 4E 05 F1 | 	add	fp, #4
10ba0     A7 38 68 FC | 	wrlong	#28, fp
10ba4     10 4E 85 F1 | 	sub	fp, #16
10ba8     B8 00 90 FD | 	jmp	#LR__1297
10bac                 | LR__1292
10bac     A7 12 02 FB | 	rdlong	arg01, fp
10bb0     01 14 06 F6 | 	mov	arg02, #1
10bb4     AC AF B0 FD | 	call	#__system___float_tointeger
10bb8     0C 4E 05 F1 | 	add	fp, #12
10bbc     A7 FA 61 FC | 	wrlong	result1, fp
10bc0     04 4E 05 F1 | 	add	fp, #4
10bc4     A7 38 68 FC | 	wrlong	#28, fp
10bc8     10 4E 85 F1 | 	sub	fp, #16
10bcc     94 00 90 FD | 	jmp	#LR__1297
10bd0                 | LR__1293
10bd0     A7 12 02 FB | 	rdlong	arg01, fp
10bd4     AC B2 B0 FD | 	call	#__system____builtin_atof
10bd8     FD 12 02 F6 | 	mov	arg01, result1
10bdc     00 14 06 F6 | 	mov	arg02, #0
10be0     80 AF B0 FD | 	call	#__system___float_tointeger
10be4     0C 4E 05 F1 | 	add	fp, #12
10be8     A7 FA 61 FC | 	wrlong	result1, fp
10bec     04 4E 05 F1 | 	add	fp, #4
10bf0     A7 38 68 FC | 	wrlong	#28, fp
10bf4     10 4E 85 F1 | 	sub	fp, #16
10bf8     68 00 90 FD | 	jmp	#LR__1297
10bfc                 | LR__1294
10bfc     A7 12 02 FB | 	rdlong	arg01, fp
10c00     F0 BC BF FD | 	call	#_convertstring
10c04     FD 12 02 F6 | 	mov	arg01, result1
10c08     78 B2 B0 FD | 	call	#__system____builtin_atof
10c0c     FD 12 02 F6 | 	mov	arg01, result1
10c10     00 14 06 F6 | 	mov	arg02, #0
10c14     4C AF B0 FD | 	call	#__system___float_tointeger
10c18     0C 4E 05 F1 | 	add	fp, #12
10c1c     A7 FA 61 FC | 	wrlong	result1, fp
10c20     04 4E 05 F1 | 	add	fp, #4
10c24     A7 38 68 FC | 	wrlong	#28, fp
10c28     10 4E 85 F1 | 	sub	fp, #16
10c2c     34 00 90 FD | 	jmp	#LR__1297
10c30                 | LR__1295
10c30     0C 4E 05 F1 | 	add	fp, #12
10c34     A7 00 68 FC | 	wrlong	#0, fp
10c38     0C 4E 85 F1 | 	sub	fp, #12
10c3c     A7 20 02 FB | 	rdlong	local02, fp
10c40     10 4E 05 F1 | 	add	fp, #16
10c44     A7 20 62 FC | 	wrlong	local02, fp
10c48     10 4E 85 F1 | 	sub	fp, #16
10c4c     14 00 90 FD | 	jmp	#LR__1297
10c50                 | LR__1296
10c50     0C 4E 05 F1 | 	add	fp, #12
10c54     A7 00 68 FC | 	wrlong	#0, fp
10c58     04 4E 05 F1 | 	add	fp, #4
10c5c     A7 02 68 FC | 	wrlong	#1, fp
10c60     10 4E 85 F1 | 	sub	fp, #16
10c64                 | LR__1297
10c64     0C 4E 05 F1 | 	add	fp, #12
10c68     A7 20 02 FB | 	rdlong	local02, fp
10c6c     0C 4E 85 F1 | 	sub	fp, #12
10c70     A7 20 62 FC | 	wrlong	local02, fp
10c74     10 4E 05 F1 | 	add	fp, #16
10c78     A7 20 02 FB | 	rdlong	local02, fp
10c7c     08 4E 85 F1 | 	sub	fp, #8
10c80     A7 20 62 FC | 	wrlong	local02, fp
10c84     08 4E 85 F1 | 	sub	fp, #8
10c88     A7 12 02 F6 | 	mov	arg01, fp
10c8c     C0 8B BF FD | 	call	#_push
10c90     A7 F0 03 F6 | 	mov	ptra, fp
10c94     B2 00 A0 FD | 	call	#popregs_
10c98                 | _do_converttoint_ret
10c98     2D 00 64 FD | 	ret
10c9c                 | 
10c9c                 | ' 
10c9c                 | ' function converttoint (t1 as expr_result) as integer
10c9c                 | _converttoint
10c9c     02 4A 05 F6 | 	mov	COUNT_, #2
10ca0     A8 00 A0 FD | 	call	#pushregs_
10ca4     09 1F 02 F6 | 	mov	local01, arg01
10ca8                 | ' 
10ca8                 | ' select case t1.result_type
10ca8     08 1E 06 F1 | 	add	local01, #8
10cac     0F 21 02 FB | 	rdlong	local02, local01
10cb0     08 1E 86 F1 | 	sub	local01, #8
10cb4     1C 20 0E F2 | 	cmp	local02, #28 wz
10cb8     24 00 90 AD |  if_e	jmp	#LR__1300
10cbc     1D 20 0E F2 | 	cmp	local02, #29 wz
10cc0     24 00 90 AD |  if_e	jmp	#LR__1301
10cc4     1E 20 0E F2 | 	cmp	local02, #30 wz
10cc8     24 00 90 AD |  if_e	jmp	#LR__1302
10ccc     1F 20 0E F2 | 	cmp	local02, #31 wz
10cd0     2C 00 90 AD |  if_e	jmp	#LR__1303
10cd4     2B 20 0E F2 | 	cmp	local02, #43 wz
10cd8     3C 00 90 AD |  if_e	jmp	#LR__1304
10cdc     58 00 90 FD | 	jmp	#LR__1305
10ce0                 | LR__1300
10ce0     0F FB 01 FB | 	rdlong	result1, local01
10ce4     54 00 90 FD | 	jmp	#LR__1306
10ce8                 | LR__1301
10ce8     0F FB 01 FB | 	rdlong	result1, local01
10cec     4C 00 90 FD | 	jmp	#LR__1306
10cf0                 | LR__1302
10cf0     0F 13 02 FB | 	rdlong	arg01, local01
10cf4     01 14 06 F6 | 	mov	arg02, #1
10cf8     68 AE B0 FD | 	call	#__system___float_tointeger
10cfc     3C 00 90 FD | 	jmp	#LR__1306
10d00                 | LR__1303
10d00     0F 13 02 FB | 	rdlong	arg01, local01
10d04     7C B1 B0 FD | 	call	#__system____builtin_atof
10d08     FD 12 02 F6 | 	mov	arg01, result1
10d0c     00 14 06 F6 | 	mov	arg02, #0
10d10     50 AE B0 FD | 	call	#__system___float_tointeger
10d14     24 00 90 FD | 	jmp	#LR__1306
10d18                 | LR__1304
10d18     0F 13 02 FB | 	rdlong	arg01, local01
10d1c     D4 BB BF FD | 	call	#_convertstring
10d20     FD 12 02 F6 | 	mov	arg01, result1
10d24     5C B1 B0 FD | 	call	#__system____builtin_atof
10d28     FD 12 02 F6 | 	mov	arg01, result1
10d2c     00 14 06 F6 | 	mov	arg02, #0
10d30     30 AE B0 FD | 	call	#__system___float_tointeger
10d34     04 00 90 FD | 	jmp	#LR__1306
10d38                 | LR__1305
10d38     00 FA 05 F6 | 	mov	result1, #0
10d3c                 | LR__1306
10d3c     A7 F0 03 F6 | 	mov	ptra, fp
10d40     B2 00 A0 FD | 	call	#popregs_
10d44                 | _converttoint_ret
10d44     2D 00 64 FD | 	ret
10d48                 | 
10d48                 | ' 
10d48                 | ' function converttofloat (t1 as expr_result) as single
10d48                 | _converttofloat
10d48     03 4A 05 F6 | 	mov	COUNT_, #3
10d4c     A8 00 A0 FD | 	call	#pushregs_
10d50     09 1F 02 F6 | 	mov	local01, arg01
10d54                 | ' 
10d54                 | ' select case t1.result_type
10d54     08 1E 06 F1 | 	add	local01, #8
10d58     0F 21 02 FB | 	rdlong	local02, local01
10d5c     08 1E 86 F1 | 	sub	local01, #8
10d60     1C 20 0E F2 | 	cmp	local02, #28 wz
10d64     24 00 90 AD |  if_e	jmp	#LR__1310
10d68     1D 20 0E F2 | 	cmp	local02, #29 wz
10d6c     38 00 90 AD |  if_e	jmp	#LR__1311
10d70     1E 20 0E F2 | 	cmp	local02, #30 wz
10d74     3C 00 90 AD |  if_e	jmp	#LR__1312
10d78     1F 20 0E F2 | 	cmp	local02, #31 wz
10d7c     3C 00 90 AD |  if_e	jmp	#LR__1313
10d80     2B 20 0E F2 | 	cmp	local02, #43 wz
10d84     40 00 90 AD |  if_e	jmp	#LR__1314
10d88     50 00 90 FD | 	jmp	#LR__1315
10d8c                 | LR__1310
10d8c     0F 13 02 FB | 	rdlong	arg01, local01
10d90     09 13 52 F6 | 	abs	arg01, arg01 wc
10d94     1F 22 C6 C9 |  if_b	decod	local03, #31
10d98     00 22 06 36 |  if_ae	mov	local03, #0
10d9c     F8 A4 B0 FD | 	call	#__system___float_fromuns
10da0     11 FB 61 F5 | 	xor	result1, local03
10da4     38 00 90 FD | 	jmp	#LR__1316
10da8                 | LR__1311
10da8     0F 13 02 FB | 	rdlong	arg01, local01
10dac     E8 A4 B0 FD | 	call	#__system___float_fromuns
10db0     2C 00 90 FD | 	jmp	#LR__1316
10db4                 | LR__1312
10db4     0F FB 01 FB | 	rdlong	result1, local01
10db8     24 00 90 FD | 	jmp	#LR__1316
10dbc                 | LR__1313
10dbc     0F 13 02 FB | 	rdlong	arg01, local01
10dc0     C0 B0 B0 FD | 	call	#__system____builtin_atof
10dc4     18 00 90 FD | 	jmp	#LR__1316
10dc8                 | LR__1314
10dc8     0F 13 02 FB | 	rdlong	arg01, local01
10dcc     24 BB BF FD | 	call	#_convertstring
10dd0     FD 12 02 F6 | 	mov	arg01, result1
10dd4     AC B0 B0 FD | 	call	#__system____builtin_atof
10dd8     04 00 90 FD | 	jmp	#LR__1316
10ddc                 | LR__1315
10ddc     00 FA 05 F6 | 	mov	result1, #0
10de0                 | LR__1316
10de0     A7 F0 03 F6 | 	mov	ptra, fp
10de4     B2 00 A0 FD | 	call	#popregs_
10de8                 | _converttofloat_ret
10de8     2D 00 64 FD | 	ret
10dec                 | 
10dec                 | ' 
10dec                 | ' sub do_rnd
10dec                 | _do_rnd
10dec     01 4A 05 F6 | 	mov	COUNT_, #1
10df0     A8 00 A0 FD | 	call	#pushregs_
10df4     10 F0 07 F1 | 	add	ptra, #16
10df8     69 00 00 FF 
10dfc     54 E4 05 F1 | 	add	objptr, ##53844
10e00     F2 1E 02 FB | 	rdlong	local01, objptr
10e04     0F 17 02 F6 | 	mov	arg03, local01
10e08     01 16 66 F0 | 	shl	arg03, #1
10e0c     0F 17 02 F1 | 	add	arg03, local01
10e10     02 16 66 F0 | 	shl	arg03, #2
10e14     03 00 00 FF 
10e18     04 E4 85 F1 | 	sub	objptr, ##1540
10e1c     F2 16 02 F1 | 	add	arg03, objptr
10e20     0B 17 02 FB | 	rdlong	arg03, arg03
10e24     0C 4E 05 F1 | 	add	fp, #12
10e28     A7 16 62 FC | 	wrlong	arg03, fp
10e2c                 | ' 
10e2c                 | ' numpar=compiledline(lineptr_e).result.uresult
10e2c                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
10e2c     0C 4E 85 F1 | 	sub	fp, #12
10e30     02 16 16 F2 | 	cmp	arg03, #2 wc
10e34     66 00 00 FF 
10e38     50 E4 85 F1 | 	sub	objptr, ##52304
10e3c     3C 00 90 CD |  if_b	jmp	#LR__1320
10e40     00 12 06 F6 | 	mov	arg01, #0
10e44     6C D6 B0 FD | 	call	#__system___getiolock_0423
10e48     FD 12 02 F6 | 	mov	arg01, result1
10e4c     60 7D B0 FD | 	call	#__system___lockmem
10e50     43 01 00 FF 
10e54     1E 14 06 F6 | 	mov	arg02, ##@LR__4583
10e58     00 12 06 F6 | 	mov	arg01, #0
10e5c     00 16 06 F6 | 	mov	arg03, #0
10e60     40 8A B0 FD | 	call	#__system___basic_print_string
10e64     00 12 06 F6 | 	mov	arg01, #0
10e68     48 D6 B0 FD | 	call	#__system___getiolock_0423
10e6c     FD 00 68 FC | 	wrlong	#0, result1
10e70     27 12 06 F6 | 	mov	arg01, #39
10e74     14 48 B0 FD | 	call	#_printerror
10e78     2C 01 90 FD | 	jmp	#LR__1327
10e7c                 | LR__1320
10e7c                 | ' if numpar=0 then
10e7c     0C 4E 05 F1 | 	add	fp, #12
10e80     A7 FE 09 FB | 	rdlong	result3, fp wz
10e84     0C 4E 85 F1 | 	sub	fp, #12
10e88     20 00 90 5D |  if_ne	jmp	#LR__1321
10e8c     08 4E 05 F1 | 	add	fp, #8
10e90     A7 3A 68 FC | 	wrlong	#29, fp
10e94     08 4E 85 F1 | 	sub	fp, #8
10e98     1B FA 61 FD | 	getrnd	result1
10e9c     A7 FA 61 FC | 	wrlong	result1, fp
10ea0     A7 12 02 F6 | 	mov	arg01, fp
10ea4     A8 89 BF FD | 	call	#_push
10ea8     FC 00 90 FD | 	jmp	#LR__1326
10eac                 | LR__1321
10eac     08 89 BF FD | 	call	#_pop
10eb0     A7 FA 61 FC | 	wrlong	result1, fp
10eb4     04 4E 05 F1 | 	add	fp, #4
10eb8     A7 FC 61 FC | 	wrlong	result2, fp
10ebc     04 4E 05 F1 | 	add	fp, #4
10ec0     A7 FE 61 FC | 	wrlong	result3, fp
10ec4                 | '   t1=pop()
10ec4                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
10ec4     08 4E 85 F1 | 	sub	fp, #8
10ec8     1C FE 0D F2 | 	cmp	result3, #28 wz
10ecc     08 4E 05 51 |  if_ne	add	fp, #8
10ed0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10ed4     08 4E 85 51 |  if_ne	sub	fp, #8
10ed8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
10edc     2C 00 90 5D |  if_ne	jmp	#LR__1322
10ee0     1B FA 61 FD | 	getrnd	result1
10ee4     A7 1E 02 FB | 	rdlong	local01, fp
10ee8     0F FB 11 FD | 	qdiv	result1, local01
10eec     A7 12 02 F6 | 	mov	arg01, fp
10ef0     19 1E 62 FD | 	getqy	local01
10ef4     A7 1E 62 FC | 	wrlong	local01, fp
10ef8     08 4E 05 F1 | 	add	fp, #8
10efc     A7 3A 68 FC | 	wrlong	#29, fp
10f00     08 4E 85 F1 | 	sub	fp, #8
10f04     48 89 BF FD | 	call	#_push
10f08     9C 00 90 FD | 	jmp	#LR__1325
10f0c                 | LR__1322
10f0c     08 4E 05 F1 | 	add	fp, #8
10f10     A7 1E 02 FB | 	rdlong	local01, fp
10f14     08 4E 85 F1 | 	sub	fp, #8
10f18     1E 1E 0E F2 | 	cmp	local01, #30 wz
10f1c     48 00 90 5D |  if_ne	jmp	#LR__1323
10f20     A7 12 02 FB | 	rdlong	arg01, fp
10f24     00 C0 24 FF 
10f28     00 14 06 F6 | 	mov	arg02, ##1233125376
10f2c     70 A9 B0 FD | 	call	#__system___float_div
10f30     FD 1E 02 F6 | 	mov	local01, result1
10f34     1B 12 62 FD | 	getrnd	arg01
10f38     74 13 06 F4 | 	bitl	arg01, #372
10f3c     58 A3 B0 FD | 	call	#__system___float_fromuns
10f40     FD 14 02 F6 | 	mov	arg02, result1
10f44     0F 13 02 F6 | 	mov	arg01, local01
10f48     50 A7 B0 FD | 	call	#__system___float_mul
10f4c     A7 FA 61 FC | 	wrlong	result1, fp
10f50     08 4E 05 F1 | 	add	fp, #8
10f54     A7 3C 68 FC | 	wrlong	#30, fp
10f58     08 4E 85 F1 | 	sub	fp, #8
10f5c     A7 12 02 F6 | 	mov	arg01, fp
10f60     EC 88 BF FD | 	call	#_push
10f64     40 00 90 FD | 	jmp	#LR__1324
10f68                 | LR__1323
10f68                 | '     print "rnd: "; : printerror(40) 
10f68     00 12 06 F6 | 	mov	arg01, #0
10f6c     44 D5 B0 FD | 	call	#__system___getiolock_0423
10f70     FD 12 02 F6 | 	mov	arg01, result1
10f74     38 7C B0 FD | 	call	#__system___lockmem
10f78     43 01 00 FF 
10f7c     24 14 06 F6 | 	mov	arg02, ##@LR__4584
10f80     00 12 06 F6 | 	mov	arg01, #0
10f84     00 16 06 F6 | 	mov	arg03, #0
10f88     18 89 B0 FD | 	call	#__system___basic_print_string
10f8c     00 12 06 F6 | 	mov	arg01, #0
10f90     20 D5 B0 FD | 	call	#__system___getiolock_0423
10f94     FD 00 68 FC | 	wrlong	#0, result1
10f98     28 12 06 F6 | 	mov	arg01, #40
10f9c     EC 46 B0 FD | 	call	#_printerror
10fa0     A7 12 02 F6 | 	mov	arg01, fp
10fa4     A8 88 BF FD | 	call	#_push
10fa8                 | LR__1324
10fa8                 | LR__1325
10fa8                 | LR__1326
10fa8                 | LR__1327
10fa8     A7 F0 03 F6 | 	mov	ptra, fp
10fac     B2 00 A0 FD | 	call	#popregs_
10fb0                 | _do_rnd_ret
10fb0     2D 00 64 FD | 	ret
10fb4                 | 
10fb4                 | ' 
10fb4                 | ' sub do_sin
10fb4                 | _do_sin
10fb4     01 4A 05 F6 | 	mov	COUNT_, #1
10fb8     A8 00 A0 FD | 	call	#pushregs_
10fbc     10 F0 07 F1 | 	add	ptra, #16
10fc0     69 00 00 FF 
10fc4     54 E4 05 F1 | 	add	objptr, ##53844
10fc8     F2 1E 02 FB | 	rdlong	local01, objptr
10fcc     0F 17 02 F6 | 	mov	arg03, local01
10fd0     01 16 66 F0 | 	shl	arg03, #1
10fd4     0F 17 02 F1 | 	add	arg03, local01
10fd8     02 16 66 F0 | 	shl	arg03, #2
10fdc     03 00 00 FF 
10fe0     04 E4 85 F1 | 	sub	objptr, ##1540
10fe4     F2 16 02 F1 | 	add	arg03, objptr
10fe8     0B 17 02 FB | 	rdlong	arg03, arg03
10fec     0C 4E 05 F1 | 	add	fp, #12
10ff0     A7 16 62 FC | 	wrlong	arg03, fp
10ff4                 | ' 
10ff4                 | ' numpar=compiledline(lineptr_e).result.uresult
10ff4                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
10ff4     0C 4E 85 F1 | 	sub	fp, #12
10ff8     02 16 16 F2 | 	cmp	arg03, #2 wc
10ffc     66 00 00 FF 
11000     50 E4 85 F1 | 	sub	objptr, ##52304
11004     0C 4E 05 C1 |  if_b	add	fp, #12
11008     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1100c     0C 4E 85 C1 |  if_b	sub	fp, #12
11010     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1330
11014     00 12 06 F6 | 	mov	arg01, #0
11018     98 D4 B0 FD | 	call	#__system___getiolock_0423
1101c     FD 12 02 F6 | 	mov	arg01, result1
11020     8C 7B B0 FD | 	call	#__system___lockmem
11024     43 01 00 FF 
11028     2A 14 06 F6 | 	mov	arg02, ##@LR__4585
1102c     00 12 06 F6 | 	mov	arg01, #0
11030     00 16 06 F6 | 	mov	arg03, #0
11034     6C 88 B0 FD | 	call	#__system___basic_print_string
11038     00 12 06 F6 | 	mov	arg01, #0
1103c     74 D4 B0 FD | 	call	#__system___getiolock_0423
11040     FD 00 68 FC | 	wrlong	#0, result1
11044     27 12 06 F6 | 	mov	arg01, #39
11048     40 46 B0 FD | 	call	#_printerror
1104c     64 00 90 FD | 	jmp	#LR__1331
11050                 | LR__1330
11050     64 87 BF FD | 	call	#_pop
11054     A7 FA 61 FC | 	wrlong	result1, fp
11058     04 4E 05 F1 | 	add	fp, #4
1105c     A7 FC 61 FC | 	wrlong	result2, fp
11060     04 4E 05 F1 | 	add	fp, #4
11064     A7 FE 61 FC | 	wrlong	result3, fp
11068     08 4E 85 F1 | 	sub	fp, #8
1106c     7A 00 00 FF 
11070     5C E4 05 F1 | 	add	objptr, ##62556
11074     F2 1E 02 FB | 	rdlong	local01, objptr
11078     7A 00 00 FF 
1107c     5C E4 85 F1 | 	sub	objptr, ##62556
11080     A7 12 02 F6 | 	mov	arg01, fp
11084     C0 FC BF FD | 	call	#_converttofloat
11088     FD 14 02 F6 | 	mov	arg02, result1
1108c     0F 13 02 F6 | 	mov	arg01, local01
11090     08 A6 B0 FD | 	call	#__system___float_mul
11094     FD 12 02 F6 | 	mov	arg01, result1
11098     3C AF B0 FD | 	call	#__system____builtin_sinf
1109c     A7 FA 61 FC | 	wrlong	result1, fp
110a0     08 4E 05 F1 | 	add	fp, #8
110a4     A7 3C 68 FC | 	wrlong	#30, fp
110a8     08 4E 85 F1 | 	sub	fp, #8
110ac     A7 12 02 F6 | 	mov	arg01, fp
110b0     9C 87 BF FD | 	call	#_push
110b4                 | LR__1331
110b4     A7 F0 03 F6 | 	mov	ptra, fp
110b8     B2 00 A0 FD | 	call	#popregs_
110bc                 | _do_sin_ret
110bc     2D 00 64 FD | 	ret
110c0                 | 
110c0                 | ' 
110c0                 | ' sub do_cos
110c0                 | _do_cos
110c0     01 4A 05 F6 | 	mov	COUNT_, #1
110c4     A8 00 A0 FD | 	call	#pushregs_
110c8     10 F0 07 F1 | 	add	ptra, #16
110cc     69 00 00 FF 
110d0     54 E4 05 F1 | 	add	objptr, ##53844
110d4     F2 1E 02 FB | 	rdlong	local01, objptr
110d8     0F 17 02 F6 | 	mov	arg03, local01
110dc     01 16 66 F0 | 	shl	arg03, #1
110e0     0F 17 02 F1 | 	add	arg03, local01
110e4     02 16 66 F0 | 	shl	arg03, #2
110e8     03 00 00 FF 
110ec     04 E4 85 F1 | 	sub	objptr, ##1540
110f0     F2 16 02 F1 | 	add	arg03, objptr
110f4     0B 17 02 FB | 	rdlong	arg03, arg03
110f8     0C 4E 05 F1 | 	add	fp, #12
110fc     A7 16 62 FC | 	wrlong	arg03, fp
11100                 | ' 
11100                 | ' numpar=compiledline(lineptr_e).result.uresult
11100                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
11100     0C 4E 85 F1 | 	sub	fp, #12
11104     02 16 16 F2 | 	cmp	arg03, #2 wc
11108     66 00 00 FF 
1110c     50 E4 85 F1 | 	sub	objptr, ##52304
11110     0C 4E 05 C1 |  if_b	add	fp, #12
11114     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11118     0C 4E 85 C1 |  if_b	sub	fp, #12
1111c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1340
11120     00 12 06 F6 | 	mov	arg01, #0
11124     8C D3 B0 FD | 	call	#__system___getiolock_0423
11128     FD 12 02 F6 | 	mov	arg01, result1
1112c     80 7A B0 FD | 	call	#__system___lockmem
11130     43 01 00 FF 
11134     30 14 06 F6 | 	mov	arg02, ##@LR__4586
11138     00 12 06 F6 | 	mov	arg01, #0
1113c     00 16 06 F6 | 	mov	arg03, #0
11140     60 87 B0 FD | 	call	#__system___basic_print_string
11144     00 12 06 F6 | 	mov	arg01, #0
11148     68 D3 B0 FD | 	call	#__system___getiolock_0423
1114c     FD 00 68 FC | 	wrlong	#0, result1
11150     27 12 06 F6 | 	mov	arg01, #39
11154     34 45 B0 FD | 	call	#_printerror
11158     78 00 90 FD | 	jmp	#LR__1341
1115c                 | LR__1340
1115c     58 86 BF FD | 	call	#_pop
11160     A7 FA 61 FC | 	wrlong	result1, fp
11164     04 4E 05 F1 | 	add	fp, #4
11168     A7 FC 61 FC | 	wrlong	result2, fp
1116c     04 4E 05 F1 | 	add	fp, #4
11170     A7 FE 61 FC | 	wrlong	result3, fp
11174     08 4E 85 F1 | 	sub	fp, #8
11178     7A 00 00 FF 
1117c     5C E4 05 F1 | 	add	objptr, ##62556
11180     F2 1E 02 FB | 	rdlong	local01, objptr
11184     7A 00 00 FF 
11188     5C E4 85 F1 | 	sub	objptr, ##62556
1118c     A7 12 02 F6 | 	mov	arg01, fp
11190     B4 FB BF FD | 	call	#_converttofloat
11194     FD 14 02 F6 | 	mov	arg02, result1
11198     0F 13 02 F6 | 	mov	arg01, local01
1119c     FC A4 B0 FD | 	call	#__system___float_mul
111a0     FD 14 02 F6 | 	mov	arg02, result1
111a4     87 E4 1F FF 
111a8     DB 13 06 F6 | 	mov	arg01, ##1070141403
111ac     1F 14 E6 F4 | 	bitnot	arg02, #31
111b0     18 A1 B0 FD | 	call	#__system___float_add
111b4     FD 12 02 F6 | 	mov	arg01, result1
111b8     1C AE B0 FD | 	call	#__system____builtin_sinf
111bc     A7 FA 61 FC | 	wrlong	result1, fp
111c0     08 4E 05 F1 | 	add	fp, #8
111c4     A7 3C 68 FC | 	wrlong	#30, fp
111c8     08 4E 85 F1 | 	sub	fp, #8
111cc     A7 12 02 F6 | 	mov	arg01, fp
111d0     7C 86 BF FD | 	call	#_push
111d4                 | LR__1341
111d4     A7 F0 03 F6 | 	mov	ptra, fp
111d8     B2 00 A0 FD | 	call	#popregs_
111dc                 | _do_cos_ret
111dc     2D 00 64 FD | 	ret
111e0                 | 
111e0                 | ' 
111e0                 | ' sub do_tan
111e0                 | _do_tan
111e0     01 4A 05 F6 | 	mov	COUNT_, #1
111e4     A8 00 A0 FD | 	call	#pushregs_
111e8     10 F0 07 F1 | 	add	ptra, #16
111ec     69 00 00 FF 
111f0     54 E4 05 F1 | 	add	objptr, ##53844
111f4     F2 1E 02 FB | 	rdlong	local01, objptr
111f8     0F 17 02 F6 | 	mov	arg03, local01
111fc     01 16 66 F0 | 	shl	arg03, #1
11200     0F 17 02 F1 | 	add	arg03, local01
11204     02 16 66 F0 | 	shl	arg03, #2
11208     03 00 00 FF 
1120c     04 E4 85 F1 | 	sub	objptr, ##1540
11210     F2 16 02 F1 | 	add	arg03, objptr
11214     0B 17 02 FB | 	rdlong	arg03, arg03
11218     0C 4E 05 F1 | 	add	fp, #12
1121c     A7 16 62 FC | 	wrlong	arg03, fp
11220                 | ' 
11220                 | ' numpar=compiledline(lineptr_e).result.uresult
11220                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
11220     0C 4E 85 F1 | 	sub	fp, #12
11224     02 16 16 F2 | 	cmp	arg03, #2 wc
11228     66 00 00 FF 
1122c     50 E4 85 F1 | 	sub	objptr, ##52304
11230     0C 4E 05 C1 |  if_b	add	fp, #12
11234     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11238     0C 4E 85 C1 |  if_b	sub	fp, #12
1123c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1350
11240     00 12 06 F6 | 	mov	arg01, #0
11244     6C D2 B0 FD | 	call	#__system___getiolock_0423
11248     FD 12 02 F6 | 	mov	arg01, result1
1124c     60 79 B0 FD | 	call	#__system___lockmem
11250     43 01 00 FF 
11254     36 14 06 F6 | 	mov	arg02, ##@LR__4587
11258     00 12 06 F6 | 	mov	arg01, #0
1125c     00 16 06 F6 | 	mov	arg03, #0
11260     40 86 B0 FD | 	call	#__system___basic_print_string
11264     00 12 06 F6 | 	mov	arg01, #0
11268     48 D2 B0 FD | 	call	#__system___getiolock_0423
1126c     FD 00 68 FC | 	wrlong	#0, result1
11270     27 12 06 F6 | 	mov	arg01, #39
11274     14 44 B0 FD | 	call	#_printerror
11278     64 00 90 FD | 	jmp	#LR__1351
1127c                 | LR__1350
1127c     38 85 BF FD | 	call	#_pop
11280     A7 FA 61 FC | 	wrlong	result1, fp
11284     04 4E 05 F1 | 	add	fp, #4
11288     A7 FC 61 FC | 	wrlong	result2, fp
1128c     04 4E 05 F1 | 	add	fp, #4
11290     A7 FE 61 FC | 	wrlong	result3, fp
11294     08 4E 85 F1 | 	sub	fp, #8
11298     7A 00 00 FF 
1129c     5C E4 05 F1 | 	add	objptr, ##62556
112a0     F2 1E 02 FB | 	rdlong	local01, objptr
112a4     7A 00 00 FF 
112a8     5C E4 85 F1 | 	sub	objptr, ##62556
112ac     A7 12 02 F6 | 	mov	arg01, fp
112b0     94 FA BF FD | 	call	#_converttofloat
112b4     FD 14 02 F6 | 	mov	arg02, result1
112b8     0F 13 02 F6 | 	mov	arg01, local01
112bc     DC A3 B0 FD | 	call	#__system___float_mul
112c0     FD 12 02 F6 | 	mov	arg01, result1
112c4     5C AE B0 FD | 	call	#__system____builtin_tanf
112c8     A7 FA 61 FC | 	wrlong	result1, fp
112cc     08 4E 05 F1 | 	add	fp, #8
112d0     A7 3C 68 FC | 	wrlong	#30, fp
112d4     08 4E 85 F1 | 	sub	fp, #8
112d8     A7 12 02 F6 | 	mov	arg01, fp
112dc     70 85 BF FD | 	call	#_push
112e0                 | LR__1351
112e0     A7 F0 03 F6 | 	mov	ptra, fp
112e4     B2 00 A0 FD | 	call	#popregs_
112e8                 | _do_tan_ret
112e8     2D 00 64 FD | 	ret
112ec                 | 
112ec                 | ' 
112ec                 | ' sub do_asin
112ec                 | _do_asin
112ec     01 4A 05 F6 | 	mov	COUNT_, #1
112f0     A8 00 A0 FD | 	call	#pushregs_
112f4     10 F0 07 F1 | 	add	ptra, #16
112f8     69 00 00 FF 
112fc     54 E4 05 F1 | 	add	objptr, ##53844
11300     F2 1E 02 FB | 	rdlong	local01, objptr
11304     0F 17 02 F6 | 	mov	arg03, local01
11308     01 16 66 F0 | 	shl	arg03, #1
1130c     0F 17 02 F1 | 	add	arg03, local01
11310     02 16 66 F0 | 	shl	arg03, #2
11314     03 00 00 FF 
11318     04 E4 85 F1 | 	sub	objptr, ##1540
1131c     F2 16 02 F1 | 	add	arg03, objptr
11320     0B 17 02 FB | 	rdlong	arg03, arg03
11324     0C 4E 05 F1 | 	add	fp, #12
11328     A7 16 62 FC | 	wrlong	arg03, fp
1132c                 | ' 
1132c                 | ' numpar=compiledline(lineptr_e).result.uresult
1132c                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
1132c     0C 4E 85 F1 | 	sub	fp, #12
11330     02 16 16 F2 | 	cmp	arg03, #2 wc
11334     66 00 00 FF 
11338     50 E4 85 F1 | 	sub	objptr, ##52304
1133c     0C 4E 05 C1 |  if_b	add	fp, #12
11340     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11344     0C 4E 85 C1 |  if_b	sub	fp, #12
11348     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1360
1134c     00 12 06 F6 | 	mov	arg01, #0
11350     60 D1 B0 FD | 	call	#__system___getiolock_0423
11354     FD 12 02 F6 | 	mov	arg01, result1
11358     54 78 B0 FD | 	call	#__system___lockmem
1135c     43 01 00 FF 
11360     3C 14 06 F6 | 	mov	arg02, ##@LR__4588
11364     00 12 06 F6 | 	mov	arg01, #0
11368     00 16 06 F6 | 	mov	arg03, #0
1136c     34 85 B0 FD | 	call	#__system___basic_print_string
11370     00 12 06 F6 | 	mov	arg01, #0
11374     3C D1 B0 FD | 	call	#__system___getiolock_0423
11378     FD 00 68 FC | 	wrlong	#0, result1
1137c     27 12 06 F6 | 	mov	arg01, #39
11380     08 43 B0 FD | 	call	#_printerror
11384     64 00 90 FD | 	jmp	#LR__1361
11388                 | LR__1360
11388     2C 84 BF FD | 	call	#_pop
1138c     FF 1E 02 F6 | 	mov	local01, result3
11390     A7 FA 61 FC | 	wrlong	result1, fp
11394     04 4E 05 F1 | 	add	fp, #4
11398     A7 FC 61 FC | 	wrlong	result2, fp
1139c     04 4E 05 F1 | 	add	fp, #4
113a0     A7 1E 62 FC | 	wrlong	local01, fp
113a4     08 4E 85 F1 | 	sub	fp, #8
113a8     A7 12 02 F6 | 	mov	arg01, fp
113ac     98 F9 BF FD | 	call	#_converttofloat
113b0     FD 12 02 F6 | 	mov	arg01, result1
113b4     B4 AD B0 FD | 	call	#__system____builtin_asinf
113b8     FD 12 02 F6 | 	mov	arg01, result1
113bc     7A 00 00 FF 
113c0     60 E4 05 F1 | 	add	objptr, ##62560
113c4     F2 14 02 FB | 	rdlong	arg02, objptr
113c8     7A 00 00 FF 
113cc     60 E4 85 F1 | 	sub	objptr, ##62560
113d0     C8 A2 B0 FD | 	call	#__system___float_mul
113d4     A7 FA 61 FC | 	wrlong	result1, fp
113d8     08 4E 05 F1 | 	add	fp, #8
113dc     A7 3C 68 FC | 	wrlong	#30, fp
113e0     08 4E 85 F1 | 	sub	fp, #8
113e4     A7 12 02 F6 | 	mov	arg01, fp
113e8     64 84 BF FD | 	call	#_push
113ec                 | LR__1361
113ec     A7 F0 03 F6 | 	mov	ptra, fp
113f0     B2 00 A0 FD | 	call	#popregs_
113f4                 | _do_asin_ret
113f4     2D 00 64 FD | 	ret
113f8                 | 
113f8                 | ' 
113f8                 | ' sub do_acos
113f8                 | _do_acos
113f8     01 4A 05 F6 | 	mov	COUNT_, #1
113fc     A8 00 A0 FD | 	call	#pushregs_
11400     10 F0 07 F1 | 	add	ptra, #16
11404     69 00 00 FF 
11408     54 E4 05 F1 | 	add	objptr, ##53844
1140c     F2 1E 02 FB | 	rdlong	local01, objptr
11410     0F 17 02 F6 | 	mov	arg03, local01
11414     01 16 66 F0 | 	shl	arg03, #1
11418     0F 17 02 F1 | 	add	arg03, local01
1141c     02 16 66 F0 | 	shl	arg03, #2
11420     03 00 00 FF 
11424     04 E4 85 F1 | 	sub	objptr, ##1540
11428     F2 16 02 F1 | 	add	arg03, objptr
1142c     0B 17 02 FB | 	rdlong	arg03, arg03
11430     0C 4E 05 F1 | 	add	fp, #12
11434     A7 16 62 FC | 	wrlong	arg03, fp
11438                 | ' 
11438                 | ' numpar=compiledline(lineptr_e).result.uresult
11438                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
11438     0C 4E 85 F1 | 	sub	fp, #12
1143c     02 16 16 F2 | 	cmp	arg03, #2 wc
11440     66 00 00 FF 
11444     50 E4 85 F1 | 	sub	objptr, ##52304
11448     0C 4E 05 C1 |  if_b	add	fp, #12
1144c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11450     0C 4E 85 C1 |  if_b	sub	fp, #12
11454     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1370
11458     00 12 06 F6 | 	mov	arg01, #0
1145c     54 D0 B0 FD | 	call	#__system___getiolock_0423
11460     FD 12 02 F6 | 	mov	arg01, result1
11464     48 77 B0 FD | 	call	#__system___lockmem
11468     43 01 00 FF 
1146c     43 14 06 F6 | 	mov	arg02, ##@LR__4589
11470     00 12 06 F6 | 	mov	arg01, #0
11474     00 16 06 F6 | 	mov	arg03, #0
11478     28 84 B0 FD | 	call	#__system___basic_print_string
1147c     00 12 06 F6 | 	mov	arg01, #0
11480     30 D0 B0 FD | 	call	#__system___getiolock_0423
11484     FD 00 68 FC | 	wrlong	#0, result1
11488     27 12 06 F6 | 	mov	arg01, #39
1148c     FC 41 B0 FD | 	call	#_printerror
11490     64 00 90 FD | 	jmp	#LR__1371
11494                 | LR__1370
11494     20 83 BF FD | 	call	#_pop
11498     FF 1E 02 F6 | 	mov	local01, result3
1149c     A7 FA 61 FC | 	wrlong	result1, fp
114a0     04 4E 05 F1 | 	add	fp, #4
114a4     A7 FC 61 FC | 	wrlong	result2, fp
114a8     04 4E 05 F1 | 	add	fp, #4
114ac     A7 1E 62 FC | 	wrlong	local01, fp
114b0     08 4E 85 F1 | 	sub	fp, #8
114b4     A7 12 02 F6 | 	mov	arg01, fp
114b8     8C F8 BF FD | 	call	#_converttofloat
114bc     FD 12 02 F6 | 	mov	arg01, result1
114c0     F4 AC B0 FD | 	call	#__system____builtin_acosf
114c4     FD 12 02 F6 | 	mov	arg01, result1
114c8     7A 00 00 FF 
114cc     60 E4 05 F1 | 	add	objptr, ##62560
114d0     F2 14 02 FB | 	rdlong	arg02, objptr
114d4     7A 00 00 FF 
114d8     60 E4 85 F1 | 	sub	objptr, ##62560
114dc     BC A1 B0 FD | 	call	#__system___float_mul
114e0     A7 FA 61 FC | 	wrlong	result1, fp
114e4     08 4E 05 F1 | 	add	fp, #8
114e8     A7 3C 68 FC | 	wrlong	#30, fp
114ec     08 4E 85 F1 | 	sub	fp, #8
114f0     A7 12 02 F6 | 	mov	arg01, fp
114f4     58 83 BF FD | 	call	#_push
114f8                 | LR__1371
114f8     A7 F0 03 F6 | 	mov	ptra, fp
114fc     B2 00 A0 FD | 	call	#popregs_
11500                 | _do_acos_ret
11500     2D 00 64 FD | 	ret
11504                 | 
11504                 | ' 
11504                 | ' sub do_atn
11504                 | _do_atn
11504     01 4A 05 F6 | 	mov	COUNT_, #1
11508     A8 00 A0 FD | 	call	#pushregs_
1150c     10 F0 07 F1 | 	add	ptra, #16
11510     69 00 00 FF 
11514     54 E4 05 F1 | 	add	objptr, ##53844
11518     F2 1E 02 FB | 	rdlong	local01, objptr
1151c     0F 17 02 F6 | 	mov	arg03, local01
11520     01 16 66 F0 | 	shl	arg03, #1
11524     0F 17 02 F1 | 	add	arg03, local01
11528     02 16 66 F0 | 	shl	arg03, #2
1152c     03 00 00 FF 
11530     04 E4 85 F1 | 	sub	objptr, ##1540
11534     F2 16 02 F1 | 	add	arg03, objptr
11538     0B 17 02 FB | 	rdlong	arg03, arg03
1153c     0C 4E 05 F1 | 	add	fp, #12
11540     A7 16 62 FC | 	wrlong	arg03, fp
11544                 | ' 
11544                 | ' numpar=compiledline(lineptr_e).result.uresult
11544                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
11544     0C 4E 85 F1 | 	sub	fp, #12
11548     02 16 16 F2 | 	cmp	arg03, #2 wc
1154c     66 00 00 FF 
11550     50 E4 85 F1 | 	sub	objptr, ##52304
11554     0C 4E 05 C1 |  if_b	add	fp, #12
11558     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1155c     0C 4E 85 C1 |  if_b	sub	fp, #12
11560     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1380
11564     00 12 06 F6 | 	mov	arg01, #0
11568     48 CF B0 FD | 	call	#__system___getiolock_0423
1156c     FD 12 02 F6 | 	mov	arg01, result1
11570     3C 76 B0 FD | 	call	#__system___lockmem
11574     43 01 00 FF 
11578     4A 14 06 F6 | 	mov	arg02, ##@LR__4590
1157c     00 12 06 F6 | 	mov	arg01, #0
11580     00 16 06 F6 | 	mov	arg03, #0
11584     1C 83 B0 FD | 	call	#__system___basic_print_string
11588     00 12 06 F6 | 	mov	arg01, #0
1158c     24 CF B0 FD | 	call	#__system___getiolock_0423
11590     FD 00 68 FC | 	wrlong	#0, result1
11594     27 12 06 F6 | 	mov	arg01, #39
11598     F0 40 B0 FD | 	call	#_printerror
1159c     6C 00 90 FD | 	jmp	#LR__1381
115a0                 | LR__1380
115a0     14 82 BF FD | 	call	#_pop
115a4     FF 1E 02 F6 | 	mov	local01, result3
115a8     A7 FA 61 FC | 	wrlong	result1, fp
115ac     04 4E 05 F1 | 	add	fp, #4
115b0     A7 FC 61 FC | 	wrlong	result2, fp
115b4     04 4E 05 F1 | 	add	fp, #4
115b8     A7 1E 62 FC | 	wrlong	local01, fp
115bc     08 4E 85 F1 | 	sub	fp, #8
115c0     A7 12 02 F6 | 	mov	arg01, fp
115c4     80 F7 BF FD | 	call	#_converttofloat
115c8     FD 12 02 F6 | 	mov	arg01, result1
115cc     00 C0 1F FF 
115d0     00 14 06 F6 | 	mov	arg02, ##1065353216
115d4     2C AC B0 FD | 	call	#__system____builtin_atan2f
115d8     FD 12 02 F6 | 	mov	arg01, result1
115dc     7A 00 00 FF 
115e0     60 E4 05 F1 | 	add	objptr, ##62560
115e4     F2 14 02 FB | 	rdlong	arg02, objptr
115e8     7A 00 00 FF 
115ec     60 E4 85 F1 | 	sub	objptr, ##62560
115f0     A8 A0 B0 FD | 	call	#__system___float_mul
115f4     A7 FA 61 FC | 	wrlong	result1, fp
115f8     08 4E 05 F1 | 	add	fp, #8
115fc     A7 3C 68 FC | 	wrlong	#30, fp
11600     08 4E 85 F1 | 	sub	fp, #8
11604     A7 12 02 F6 | 	mov	arg01, fp
11608     44 82 BF FD | 	call	#_push
1160c                 | LR__1381
1160c     A7 F0 03 F6 | 	mov	ptra, fp
11610     B2 00 A0 FD | 	call	#popregs_
11614                 | _do_atn_ret
11614     2D 00 64 FD | 	ret
11618                 | 
11618                 | ' 
11618                 | ' sub do_sqr
11618                 | _do_sqr
11618     01 4A 05 F6 | 	mov	COUNT_, #1
1161c     A8 00 A0 FD | 	call	#pushregs_
11620     10 F0 07 F1 | 	add	ptra, #16
11624     69 00 00 FF 
11628     54 E4 05 F1 | 	add	objptr, ##53844
1162c     F2 1E 02 FB | 	rdlong	local01, objptr
11630     0F 17 02 F6 | 	mov	arg03, local01
11634     01 16 66 F0 | 	shl	arg03, #1
11638     0F 17 02 F1 | 	add	arg03, local01
1163c     02 16 66 F0 | 	shl	arg03, #2
11640     03 00 00 FF 
11644     04 E4 85 F1 | 	sub	objptr, ##1540
11648     F2 16 02 F1 | 	add	arg03, objptr
1164c     0B 17 02 FB | 	rdlong	arg03, arg03
11650     0C 4E 05 F1 | 	add	fp, #12
11654     A7 16 62 FC | 	wrlong	arg03, fp
11658                 | ' 
11658                 | ' numpar=compiledline(lineptr_e).result.uresult
11658                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
11658     0C 4E 85 F1 | 	sub	fp, #12
1165c     02 16 16 F2 | 	cmp	arg03, #2 wc
11660     66 00 00 FF 
11664     50 E4 85 F1 | 	sub	objptr, ##52304
11668     0C 4E 05 C1 |  if_b	add	fp, #12
1166c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11670     0C 4E 85 C1 |  if_b	sub	fp, #12
11674     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1390
11678     00 12 06 F6 | 	mov	arg01, #0
1167c     34 CE B0 FD | 	call	#__system___getiolock_0423
11680     FD 12 02 F6 | 	mov	arg01, result1
11684     28 75 B0 FD | 	call	#__system___lockmem
11688     43 01 00 FF 
1168c     50 14 06 F6 | 	mov	arg02, ##@LR__4591
11690     00 12 06 F6 | 	mov	arg01, #0
11694     00 16 06 F6 | 	mov	arg03, #0
11698     08 82 B0 FD | 	call	#__system___basic_print_string
1169c     00 12 06 F6 | 	mov	arg01, #0
116a0     10 CE B0 FD | 	call	#__system___getiolock_0423
116a4     FD 00 68 FC | 	wrlong	#0, result1
116a8     27 12 06 F6 | 	mov	arg01, #39
116ac     DC 3F B0 FD | 	call	#_printerror
116b0     48 00 90 FD | 	jmp	#LR__1391
116b4                 | LR__1390
116b4     00 81 BF FD | 	call	#_pop
116b8     FF 1E 02 F6 | 	mov	local01, result3
116bc     A7 FA 61 FC | 	wrlong	result1, fp
116c0     04 4E 05 F1 | 	add	fp, #4
116c4     A7 FC 61 FC | 	wrlong	result2, fp
116c8     04 4E 05 F1 | 	add	fp, #4
116cc     A7 1E 62 FC | 	wrlong	local01, fp
116d0     08 4E 85 F1 | 	sub	fp, #8
116d4     A7 12 02 F6 | 	mov	arg01, fp
116d8     6C F6 BF FD | 	call	#_converttofloat
116dc     FD 12 02 F6 | 	mov	arg01, result1
116e0     E0 9E B0 FD | 	call	#__system___float_sqrt
116e4     A7 FA 61 FC | 	wrlong	result1, fp
116e8     08 4E 05 F1 | 	add	fp, #8
116ec     A7 3C 68 FC | 	wrlong	#30, fp
116f0     08 4E 85 F1 | 	sub	fp, #8
116f4     A7 12 02 F6 | 	mov	arg01, fp
116f8     54 81 BF FD | 	call	#_push
116fc                 | LR__1391
116fc     A7 F0 03 F6 | 	mov	ptra, fp
11700     B2 00 A0 FD | 	call	#popregs_
11704                 | _do_sqr_ret
11704     2D 00 64 FD | 	ret
11708                 | 
11708                 | ' 
11708                 | ' sub do_stick
11708                 | _do_stick
11708     01 4A 05 F6 | 	mov	COUNT_, #1
1170c     A8 00 A0 FD | 	call	#pushregs_
11710     10 F0 07 F1 | 	add	ptra, #16
11714     69 00 00 FF 
11718     54 E4 05 F1 | 	add	objptr, ##53844
1171c     F2 1E 02 FB | 	rdlong	local01, objptr
11720     0F 17 02 F6 | 	mov	arg03, local01
11724     01 16 66 F0 | 	shl	arg03, #1
11728     0F 17 02 F1 | 	add	arg03, local01
1172c     02 16 66 F0 | 	shl	arg03, #2
11730     03 00 00 FF 
11734     04 E4 85 F1 | 	sub	objptr, ##1540
11738     F2 16 02 F1 | 	add	arg03, objptr
1173c     0B 17 02 FB | 	rdlong	arg03, arg03
11740     0C 4E 05 F1 | 	add	fp, #12
11744     A7 16 62 FC | 	wrlong	arg03, fp
11748                 | ' 
11748                 | ' numpar=compiledline(lineptr_e).result.uresult
11748                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
11748     0C 4E 85 F1 | 	sub	fp, #12
1174c     02 16 16 F2 | 	cmp	arg03, #2 wc
11750     66 00 00 FF 
11754     50 E4 85 F1 | 	sub	objptr, ##52304
11758     3C 00 90 CD |  if_b	jmp	#LR__1400
1175c     00 12 06 F6 | 	mov	arg01, #0
11760     50 CD B0 FD | 	call	#__system___getiolock_0423
11764     FD 12 02 F6 | 	mov	arg01, result1
11768     44 74 B0 FD | 	call	#__system___lockmem
1176c     43 01 00 FF 
11770     56 14 06 F6 | 	mov	arg02, ##@LR__4592
11774     00 12 06 F6 | 	mov	arg01, #0
11778     00 16 06 F6 | 	mov	arg03, #0
1177c     24 81 B0 FD | 	call	#__system___basic_print_string
11780     00 12 06 F6 | 	mov	arg01, #0
11784     2C CD B0 FD | 	call	#__system___getiolock_0423
11788     FD 00 68 FC | 	wrlong	#0, result1
1178c     27 12 06 F6 | 	mov	arg01, #39
11790     F8 3E B0 FD | 	call	#_printerror
11794     E8 00 90 FD | 	jmp	#LR__1404
11798                 | LR__1400
11798                 | ' 
11798                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
11798     0C 4E 05 F1 | 	add	fp, #12
1179c     A7 FE 09 FB | 	rdlong	result3, fp wz
117a0     0C 4E 85 F1 | 	sub	fp, #12
117a4     30 00 90 5D |  if_ne	jmp	#LR__1401
117a8     79 00 00 FF 
117ac     D0 E5 05 F1 | 	add	objptr, ##62416
117b0     F2 1E 02 FB | 	rdlong	local01, objptr
117b4     79 00 00 FF 
117b8     D0 E5 85 F1 | 	sub	objptr, ##62416
117bc     A7 1E 62 FC | 	wrlong	local01, fp
117c0     08 4E 05 F1 | 	add	fp, #8
117c4     A7 3A 68 FC | 	wrlong	#29, fp
117c8     08 4E 85 F1 | 	sub	fp, #8
117cc     A7 12 02 F6 | 	mov	arg01, fp
117d0     7C 80 BF FD | 	call	#_push
117d4     A8 00 90 FD | 	jmp	#LR__1404
117d8                 | LR__1401
117d8     DC 7F BF FD | 	call	#_pop
117dc     A7 FA 61 FC | 	wrlong	result1, fp
117e0     04 4E 05 F1 | 	add	fp, #4
117e4     A7 FC 61 FC | 	wrlong	result2, fp
117e8     04 4E 05 F1 | 	add	fp, #4
117ec     A7 FE 61 FC | 	wrlong	result3, fp
117f0                 | ' 
117f0                 | ' t1=pop()
117f0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
117f0     08 4E 85 F1 | 	sub	fp, #8
117f4     1C FE 0D F2 | 	cmp	result3, #28 wz
117f8     08 4E 05 51 |  if_ne	add	fp, #8
117fc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11800     08 4E 85 51 |  if_ne	sub	fp, #8
11804     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11808     6C 00 90 5D |  if_ne	jmp	#LR__1403
1180c     A7 1E 02 FB | 	rdlong	local01, fp
11810     7A 00 00 FF 
11814     A4 E4 05 F1 | 	add	objptr, ##62628
11818     F2 1E 62 FC | 	wrlong	local01, objptr
1181c                 | '   q=t1.result.uresult
1181c                 | '   if q<7 then 
1181c     7A 00 00 FF 
11820     A4 E4 85 F1 | 	sub	objptr, ##62628
11824     07 1E 56 F2 | 	cmps	local01, #7 wc
11828     40 00 90 3D |  if_ae	jmp	#LR__1402
1182c     7A 00 00 FF 
11830     A4 E4 05 F1 | 	add	objptr, ##62628
11834     F2 1E 02 FB | 	rdlong	local01, objptr
11838     02 1E 66 F0 | 	shl	local01, #2
1183c     D4 E4 85 F1 | 	sub	objptr, #212
11840     F2 1E 02 F1 | 	add	local01, objptr
11844     0F 1F 02 FB | 	rdlong	local01, local01
11848     A7 1E 62 FC | 	wrlong	local01, fp
1184c     08 4E 05 F1 | 	add	fp, #8
11850     A7 3A 68 FC | 	wrlong	#29, fp
11854     08 4E 85 F1 | 	sub	fp, #8
11858     A7 12 02 F6 | 	mov	arg01, fp
1185c     79 00 00 FF 
11860     D0 E5 85 F1 | 	sub	objptr, ##62416
11864     E8 7F BF FD | 	call	#_push
11868                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
11868     14 00 90 FD | 	jmp	#LR__1404
1186c                 | LR__1402
1186c     29 12 06 F6 | 	mov	arg01, #41
11870     18 3E B0 FD | 	call	#_printerror
11874                 | '      printerror(41) : return
11874     08 00 90 FD | 	jmp	#LR__1404
11878                 | LR__1403
11878     29 12 06 F6 | 	mov	arg01, #41
1187c     0C 3E B0 FD | 	call	#_printerror
11880                 | LR__1404
11880     A7 F0 03 F6 | 	mov	ptra, fp
11884     B2 00 A0 FD | 	call	#popregs_
11888                 | _do_stick_ret
11888     2D 00 64 FD | 	ret
1188c                 | 
1188c                 | ' 
1188c                 | ' sub do_strig
1188c                 | _do_strig
1188c     01 4A 05 F6 | 	mov	COUNT_, #1
11890     A8 00 A0 FD | 	call	#pushregs_
11894     10 F0 07 F1 | 	add	ptra, #16
11898     69 00 00 FF 
1189c     54 E4 05 F1 | 	add	objptr, ##53844
118a0     F2 1E 02 FB | 	rdlong	local01, objptr
118a4     0F 17 02 F6 | 	mov	arg03, local01
118a8     01 16 66 F0 | 	shl	arg03, #1
118ac     0F 17 02 F1 | 	add	arg03, local01
118b0     02 16 66 F0 | 	shl	arg03, #2
118b4     03 00 00 FF 
118b8     04 E4 85 F1 | 	sub	objptr, ##1540
118bc     F2 16 02 F1 | 	add	arg03, objptr
118c0     0B 17 02 FB | 	rdlong	arg03, arg03
118c4     0C 4E 05 F1 | 	add	fp, #12
118c8     A7 16 62 FC | 	wrlong	arg03, fp
118cc                 | ' 
118cc                 | ' numpar=compiledline(lineptr_e).result.uresult
118cc                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
118cc     0C 4E 85 F1 | 	sub	fp, #12
118d0     02 16 16 F2 | 	cmp	arg03, #2 wc
118d4     66 00 00 FF 
118d8     50 E4 85 F1 | 	sub	objptr, ##52304
118dc     3C 00 90 CD |  if_b	jmp	#LR__1410
118e0     00 12 06 F6 | 	mov	arg01, #0
118e4     CC CB B0 FD | 	call	#__system___getiolock_0423
118e8     FD 12 02 F6 | 	mov	arg01, result1
118ec     C0 72 B0 FD | 	call	#__system___lockmem
118f0     43 01 00 FF 
118f4     5E 14 06 F6 | 	mov	arg02, ##@LR__4593
118f8     00 12 06 F6 | 	mov	arg01, #0
118fc     00 16 06 F6 | 	mov	arg03, #0
11900     A0 7F B0 FD | 	call	#__system___basic_print_string
11904     00 12 06 F6 | 	mov	arg01, #0
11908     A8 CB B0 FD | 	call	#__system___getiolock_0423
1190c     FD 00 68 FC | 	wrlong	#0, result1
11910     27 12 06 F6 | 	mov	arg01, #39
11914     74 3D B0 FD | 	call	#_printerror
11918     E8 00 90 FD | 	jmp	#LR__1414
1191c                 | LR__1410
1191c                 | ' 
1191c                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1191c     0C 4E 05 F1 | 	add	fp, #12
11920     A7 FE 09 FB | 	rdlong	result3, fp wz
11924     0C 4E 85 F1 | 	sub	fp, #12
11928     30 00 90 5D |  if_ne	jmp	#LR__1411
1192c     79 00 00 FF 
11930     EC E5 05 F1 | 	add	objptr, ##62444
11934     F2 1E 02 FB | 	rdlong	local01, objptr
11938     79 00 00 FF 
1193c     EC E5 85 F1 | 	sub	objptr, ##62444
11940     A7 1E 62 FC | 	wrlong	local01, fp
11944     08 4E 05 F1 | 	add	fp, #8
11948     A7 3A 68 FC | 	wrlong	#29, fp
1194c     08 4E 85 F1 | 	sub	fp, #8
11950     A7 12 02 F6 | 	mov	arg01, fp
11954     F8 7E BF FD | 	call	#_push
11958     A8 00 90 FD | 	jmp	#LR__1414
1195c                 | LR__1411
1195c     58 7E BF FD | 	call	#_pop
11960     A7 FA 61 FC | 	wrlong	result1, fp
11964     04 4E 05 F1 | 	add	fp, #4
11968     A7 FC 61 FC | 	wrlong	result2, fp
1196c     04 4E 05 F1 | 	add	fp, #4
11970     A7 FE 61 FC | 	wrlong	result3, fp
11974                 | ' 
11974                 | ' t1=pop()
11974                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
11974     08 4E 85 F1 | 	sub	fp, #8
11978     1C FE 0D F2 | 	cmp	result3, #28 wz
1197c     08 4E 05 51 |  if_ne	add	fp, #8
11980     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11984     08 4E 85 51 |  if_ne	sub	fp, #8
11988     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1198c     6C 00 90 5D |  if_ne	jmp	#LR__1413
11990     A7 1E 02 FB | 	rdlong	local01, fp
11994     7A 00 00 FF 
11998     A4 E4 05 F1 | 	add	objptr, ##62628
1199c     F2 1E 62 FC | 	wrlong	local01, objptr
119a0                 | '   q=t1.result.uresult
119a0                 | '   if q<7 then 
119a0     7A 00 00 FF 
119a4     A4 E4 85 F1 | 	sub	objptr, ##62628
119a8     07 1E 56 F2 | 	cmps	local01, #7 wc
119ac     40 00 90 3D |  if_ae	jmp	#LR__1412
119b0     7A 00 00 FF 
119b4     A4 E4 05 F1 | 	add	objptr, ##62628
119b8     F2 1E 02 FB | 	rdlong	local01, objptr
119bc     02 1E 66 F0 | 	shl	local01, #2
119c0     B8 E4 85 F1 | 	sub	objptr, #184
119c4     F2 1E 02 F1 | 	add	local01, objptr
119c8     0F 1F 02 FB | 	rdlong	local01, local01
119cc     A7 1E 62 FC | 	wrlong	local01, fp
119d0     08 4E 05 F1 | 	add	fp, #8
119d4     A7 3A 68 FC | 	wrlong	#29, fp
119d8     08 4E 85 F1 | 	sub	fp, #8
119dc     A7 12 02 F6 | 	mov	arg01, fp
119e0     79 00 00 FF 
119e4     EC E5 85 F1 | 	sub	objptr, ##62444
119e8     64 7E BF FD | 	call	#_push
119ec                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
119ec     14 00 90 FD | 	jmp	#LR__1414
119f0                 | LR__1412
119f0     29 12 06 F6 | 	mov	arg01, #41
119f4     94 3C B0 FD | 	call	#_printerror
119f8                 | '      printerror(41) : return
119f8     08 00 90 FD | 	jmp	#LR__1414
119fc                 | LR__1413
119fc     29 12 06 F6 | 	mov	arg01, #41
11a00     88 3C B0 FD | 	call	#_printerror
11a04                 | LR__1414
11a04     A7 F0 03 F6 | 	mov	ptra, fp
11a08     B2 00 A0 FD | 	call	#popregs_
11a0c                 | _do_strig_ret
11a0c     2D 00 64 FD | 	ret
11a10                 | 
11a10                 | ' 
11a10                 | ' sub do_getpixel
11a10                 | _do_getpixel
11a10     00 4A 05 F6 | 	mov	COUNT_, #0
11a14     A8 00 A0 FD | 	call	#pushregs_
11a18     24 F0 07 F1 | 	add	ptra, #36
11a1c     69 00 00 FF 
11a20     54 E4 05 F1 | 	add	objptr, ##53844
11a24     F2 16 02 FB | 	rdlong	arg03, objptr
11a28     0B 15 02 F6 | 	mov	arg02, arg03
11a2c     01 14 66 F0 | 	shl	arg02, #1
11a30     0B 15 02 F1 | 	add	arg02, arg03
11a34     02 14 66 F0 | 	shl	arg02, #2
11a38     03 00 00 FF 
11a3c     04 E4 85 F1 | 	sub	objptr, ##1540
11a40     F2 14 02 F1 | 	add	arg02, objptr
11a44     0A 17 02 FB | 	rdlong	arg03, arg02
11a48     18 4E 05 F1 | 	add	fp, #24
11a4c     A7 16 62 FC | 	wrlong	arg03, fp
11a50                 | ' 
11a50                 | ' numpar=compiledline(lineptr_e).result.uresult
11a50                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
11a50     18 4E 85 F1 | 	sub	fp, #24
11a54     02 16 0E F2 | 	cmp	arg03, #2 wz
11a58     66 00 00 FF 
11a5c     50 E4 85 F1 | 	sub	objptr, ##52304
11a60     3C 00 90 AD |  if_e	jmp	#LR__1420
11a64     00 12 06 F6 | 	mov	arg01, #0
11a68     48 CA B0 FD | 	call	#__system___getiolock_0423
11a6c     FD 12 02 F6 | 	mov	arg01, result1
11a70     3C 71 B0 FD | 	call	#__system___lockmem
11a74     43 01 00 FF 
11a78     66 14 06 F6 | 	mov	arg02, ##@LR__4594
11a7c     00 12 06 F6 | 	mov	arg01, #0
11a80     00 16 06 F6 | 	mov	arg03, #0
11a84     1C 7E B0 FD | 	call	#__system___basic_print_string
11a88     00 12 06 F6 | 	mov	arg01, #0
11a8c     24 CA B0 FD | 	call	#__system___getiolock_0423
11a90     FD 00 68 FC | 	wrlong	#0, result1
11a94     27 12 06 F6 | 	mov	arg01, #39
11a98     F0 3B B0 FD | 	call	#_printerror
11a9c     B4 00 90 FD | 	jmp	#LR__1421
11aa0                 | LR__1420
11aa0     14 7D BF FD | 	call	#_pop
11aa4     FD 16 02 F6 | 	mov	arg03, result1
11aa8     FE 14 02 F6 | 	mov	arg02, result2
11aac     FF 12 02 F6 | 	mov	arg01, result3
11ab0     0C 4E 05 F1 | 	add	fp, #12
11ab4     A7 16 62 FC | 	wrlong	arg03, fp
11ab8     04 4E 05 F1 | 	add	fp, #4
11abc     A7 14 62 FC | 	wrlong	arg02, fp
11ac0     04 4E 05 F1 | 	add	fp, #4
11ac4     A7 12 62 FC | 	wrlong	arg01, fp
11ac8     14 4E 85 F1 | 	sub	fp, #20
11acc     E8 7C BF FD | 	call	#_pop
11ad0     FF 16 02 F6 | 	mov	arg03, result3
11ad4     A7 FA 61 FC | 	wrlong	result1, fp
11ad8     04 4E 05 F1 | 	add	fp, #4
11adc     A7 FC 61 FC | 	wrlong	result2, fp
11ae0     04 4E 05 F1 | 	add	fp, #4
11ae4     A7 16 62 FC | 	wrlong	arg03, fp
11ae8     08 4E 85 F1 | 	sub	fp, #8
11aec     A7 12 02 F6 | 	mov	arg01, fp
11af0     A8 F1 BF FD | 	call	#_converttoint
11af4     1C 4E 05 F1 | 	add	fp, #28
11af8     A7 FA 61 FC | 	wrlong	result1, fp
11afc     10 4E 85 F1 | 	sub	fp, #16
11b00     A7 12 02 F6 | 	mov	arg01, fp
11b04     0C 4E 85 F1 | 	sub	fp, #12
11b08     90 F1 BF FD | 	call	#_converttoint
11b0c     FD 16 02 F6 | 	mov	arg03, result1
11b10     20 4E 05 F1 | 	add	fp, #32
11b14     A7 16 62 FC | 	wrlong	arg03, fp
11b18     F2 12 02 FB | 	rdlong	arg01, objptr
11b1c     04 4E 85 F1 | 	sub	fp, #4
11b20     A7 FE 01 FB | 	rdlong	result3, fp
11b24     FF 12 02 F1 | 	add	arg01, result3
11b28     1C 4E 85 F1 | 	sub	fp, #28
11b2c     0A 16 66 F0 | 	shl	arg03, #10
11b30     0B 13 02 F1 | 	add	arg01, arg03
11b34     B8 3C B0 FD | 	call	#_pspeek
11b38     FD FA E1 F8 | 	getbyte	result1, result1, #0
11b3c     A7 FA 61 FC | 	wrlong	result1, fp
11b40     08 4E 05 F1 | 	add	fp, #8
11b44     A7 3A 68 FC | 	wrlong	#29, fp
11b48     08 4E 85 F1 | 	sub	fp, #8
11b4c     A7 12 02 F6 | 	mov	arg01, fp
11b50     FC 7C BF FD | 	call	#_push
11b54                 | LR__1421
11b54     A7 F0 03 F6 | 	mov	ptra, fp
11b58     B2 00 A0 FD | 	call	#popregs_
11b5c                 | _do_getpixel_ret
11b5c     2D 00 64 FD | 	ret
11b60                 | 
11b60                 | ' 
11b60                 | ' 
11b60                 | ' 
11b60                 | ' sub do_defsprite
11b60                 | _do_defsprite
11b60     07 4A 05 F6 | 	mov	COUNT_, #7
11b64     A8 00 A0 FD | 	call	#pushregs_
11b68     5C F0 07 F1 | 	add	ptra, #92
11b6c     48 7C BF FD | 	call	#_pop
11b70     FD 16 02 F6 | 	mov	arg03, result1
11b74     FE 14 02 F6 | 	mov	arg02, result2
11b78     FF 12 02 F6 | 	mov	arg01, result3
11b7c     30 4E 05 F1 | 	add	fp, #48
11b80     A7 16 62 FC | 	wrlong	arg03, fp
11b84     04 4E 05 F1 | 	add	fp, #4
11b88     A7 14 62 FC | 	wrlong	arg02, fp
11b8c     04 4E 05 F1 | 	add	fp, #4
11b90     A7 12 62 FC | 	wrlong	arg01, fp
11b94     38 4E 85 F1 | 	sub	fp, #56
11b98     1C 7C BF FD | 	call	#_pop
11b9c     FD 16 02 F6 | 	mov	arg03, result1
11ba0     FE 14 02 F6 | 	mov	arg02, result2
11ba4     FF 12 02 F6 | 	mov	arg01, result3
11ba8     24 4E 05 F1 | 	add	fp, #36
11bac     A7 16 62 FC | 	wrlong	arg03, fp
11bb0     04 4E 05 F1 | 	add	fp, #4
11bb4     A7 14 62 FC | 	wrlong	arg02, fp
11bb8     04 4E 05 F1 | 	add	fp, #4
11bbc     A7 12 62 FC | 	wrlong	arg01, fp
11bc0     2C 4E 85 F1 | 	sub	fp, #44
11bc4     F0 7B BF FD | 	call	#_pop
11bc8     FD 16 02 F6 | 	mov	arg03, result1
11bcc     FE 14 02 F6 | 	mov	arg02, result2
11bd0     FF 12 02 F6 | 	mov	arg01, result3
11bd4     18 4E 05 F1 | 	add	fp, #24
11bd8     A7 16 62 FC | 	wrlong	arg03, fp
11bdc     04 4E 05 F1 | 	add	fp, #4
11be0     A7 14 62 FC | 	wrlong	arg02, fp
11be4     04 4E 05 F1 | 	add	fp, #4
11be8     A7 12 62 FC | 	wrlong	arg01, fp
11bec     20 4E 85 F1 | 	sub	fp, #32
11bf0     C4 7B BF FD | 	call	#_pop
11bf4     FD 16 02 F6 | 	mov	arg03, result1
11bf8     FE 14 02 F6 | 	mov	arg02, result2
11bfc     FF 12 02 F6 | 	mov	arg01, result3
11c00     0C 4E 05 F1 | 	add	fp, #12
11c04     A7 16 62 FC | 	wrlong	arg03, fp
11c08     04 4E 05 F1 | 	add	fp, #4
11c0c     A7 14 62 FC | 	wrlong	arg02, fp
11c10     04 4E 05 F1 | 	add	fp, #4
11c14     A7 12 62 FC | 	wrlong	arg01, fp
11c18     14 4E 85 F1 | 	sub	fp, #20
11c1c     98 7B BF FD | 	call	#_pop
11c20     FF 16 02 F6 | 	mov	arg03, result3
11c24     A7 FA 61 FC | 	wrlong	result1, fp
11c28     04 4E 05 F1 | 	add	fp, #4
11c2c     A7 FC 61 FC | 	wrlong	result2, fp
11c30     04 4E 05 F1 | 	add	fp, #4
11c34     A7 16 62 FC | 	wrlong	arg03, fp
11c38     08 4E 85 F1 | 	sub	fp, #8
11c3c     A7 12 02 F6 | 	mov	arg01, fp
11c40     58 F0 BF FD | 	call	#_converttoint
11c44     3C 4E 05 F1 | 	add	fp, #60
11c48     A7 FA 61 FC | 	wrlong	result1, fp
11c4c     30 4E 85 F1 | 	sub	fp, #48
11c50     A7 12 02 F6 | 	mov	arg01, fp
11c54     0C 4E 85 F1 | 	sub	fp, #12
11c58     40 F0 BF FD | 	call	#_converttoint
11c5c     40 4E 05 F1 | 	add	fp, #64
11c60     A7 FA 61 FC | 	wrlong	result1, fp
11c64     28 4E 85 F1 | 	sub	fp, #40
11c68     A7 12 02 F6 | 	mov	arg01, fp
11c6c     18 4E 85 F1 | 	sub	fp, #24
11c70     28 F0 BF FD | 	call	#_converttoint
11c74     44 4E 05 F1 | 	add	fp, #68
11c78     A7 FA 61 FC | 	wrlong	result1, fp
11c7c     20 4E 85 F1 | 	sub	fp, #32
11c80     A7 12 02 F6 | 	mov	arg01, fp
11c84     24 4E 85 F1 | 	sub	fp, #36
11c88     10 F0 BF FD | 	call	#_converttoint
11c8c     48 4E 05 F1 | 	add	fp, #72
11c90     A7 FA 61 FC | 	wrlong	result1, fp
11c94     18 4E 85 F1 | 	sub	fp, #24
11c98     A7 12 02 F6 | 	mov	arg01, fp
11c9c     30 4E 85 F1 | 	sub	fp, #48
11ca0     F8 EF BF FD | 	call	#_converttoint
11ca4     4C 4E 05 F1 | 	add	fp, #76
11ca8     A7 FA 61 FC | 	wrlong	result1, fp
11cac                 | ' 
11cac                 | ' t5=pop()
11cac                 | ' t4=pop()
11cac                 | ' t3=pop()
11cac                 | ' t2=pop()
11cac                 | ' t1=pop()
11cac                 | ' 
11cac                 | ' ' do convert, defsprite is not a racing command
11cac                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
11cac                 | '  
11cac                 | ' ' todo: check parameters for linits
11cac                 | ' if sprite(a1)<> nil then delete(sprite(a1))
11cac     10 4E 85 F1 | 	sub	fp, #16
11cb0     A7 16 02 FB | 	rdlong	arg03, fp
11cb4     3C 4E 85 F1 | 	sub	fp, #60
11cb8     02 16 66 F0 | 	shl	arg03, #2
11cbc     7A 00 00 FF 
11cc0     08 E4 05 F1 | 	add	objptr, ##62472
11cc4     F2 16 02 F1 | 	add	arg03, objptr
11cc8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11ccc     7A 00 00 FF 
11cd0     08 E4 85 F1 | 	sub	objptr, ##62472
11cd4     2C 00 90 AD |  if_e	jmp	#LR__1430
11cd8     3C 4E 05 F1 | 	add	fp, #60
11cdc     A7 16 02 FB | 	rdlong	arg03, fp
11ce0     3C 4E 85 F1 | 	sub	fp, #60
11ce4     02 16 66 F0 | 	shl	arg03, #2
11ce8     7A 00 00 FF 
11cec     08 E4 05 F1 | 	add	objptr, ##62472
11cf0     F2 16 02 F1 | 	add	arg03, objptr
11cf4     0B 13 02 FB | 	rdlong	arg01, arg03
11cf8     7A 00 00 FF 
11cfc     08 E4 85 F1 | 	sub	objptr, ##62472
11d00     A0 AD B0 FD | 	call	#__system___gc_free
11d04                 | LR__1430
11d04     3C 4E 05 F1 | 	add	fp, #60
11d08     A7 1E 02 FB | 	rdlong	local01, fp
11d0c     0C 4E 05 F1 | 	add	fp, #12
11d10     A7 16 02 FB | 	rdlong	arg03, fp
11d14     04 4E 05 F1 | 	add	fp, #4
11d18     A7 14 02 FB | 	rdlong	arg02, fp
11d1c     0A 17 02 FD | 	qmul	arg03, arg02
11d20     02 1E 66 F0 | 	shl	local01, #2
11d24     7A 00 00 FF 
11d28     08 E4 05 F1 | 	add	objptr, ##62472
11d2c     F2 1E 02 F1 | 	add	local01, objptr
11d30     4C 4E 85 F1 | 	sub	fp, #76
11d34     7A 00 00 FF 
11d38     08 E4 85 F1 | 	sub	objptr, ##62472
11d3c     18 12 62 FD | 	getqx	arg01
11d40     24 AC B0 FD | 	call	#__system___gc_alloc_managed
11d44     0F FB 61 FC | 	wrlong	result1, local01
11d48                 | ' for y=a3 to a3+a5-1
11d48     44 4E 05 F1 | 	add	fp, #68
11d4c     A7 20 02 FB | 	rdlong	local02, fp
11d50     0C 4E 05 F1 | 	add	fp, #12
11d54     A7 20 62 FC | 	wrlong	local02, fp
11d58     0C 4E 85 F1 | 	sub	fp, #12
11d5c     A7 22 02 FB | 	rdlong	local03, fp
11d60     08 4E 05 F1 | 	add	fp, #8
11d64     A7 24 02 FB | 	rdlong	local04, fp
11d68     4C 4E 85 F1 | 	sub	fp, #76
11d6c     12 23 02 F1 | 	add	local03, local04
11d70                 | LR__1431
11d70     50 4E 05 F1 | 	add	fp, #80
11d74     A7 20 02 FB | 	rdlong	local02, fp
11d78     50 4E 85 F1 | 	sub	fp, #80
11d7c     11 21 52 F2 | 	cmps	local02, local03 wc
11d80     10 01 90 3D |  if_ae	jmp	#LR__1434
11d84                 | '   for x=a2 to a4+a2-1
11d84     40 4E 05 F1 | 	add	fp, #64
11d88     A7 1E 02 FB | 	rdlong	local01, fp
11d8c     7A 00 00 FF 
11d90     78 E4 05 F1 | 	add	objptr, ##62584
11d94     F2 1E 62 FC | 	wrlong	local01, objptr
11d98     7A 00 00 FF 
11d9c     78 E4 85 F1 | 	sub	objptr, ##62584
11da0     08 4E 05 F1 | 	add	fp, #8
11da4     A7 26 02 FB | 	rdlong	local05, fp
11da8     08 4E 85 F1 | 	sub	fp, #8
11dac     A7 28 02 FB | 	rdlong	local06, fp
11db0     40 4E 85 F1 | 	sub	fp, #64
11db4     14 27 02 F1 | 	add	local05, local06
11db8                 | LR__1432
11db8     7A 00 00 FF 
11dbc     78 E4 05 F1 | 	add	objptr, ##62584
11dc0     F2 1E 02 FB | 	rdlong	local01, objptr
11dc4     7A 00 00 FF 
11dc8     78 E4 85 F1 | 	sub	objptr, ##62584
11dcc     13 1F 52 F2 | 	cmps	local01, local05 wc
11dd0     A8 00 90 3D |  if_ae	jmp	#LR__1433
11dd4     3C 4E 05 F1 | 	add	fp, #60
11dd8     A7 28 02 FB | 	rdlong	local06, fp
11ddc     04 4E 05 F1 | 	add	fp, #4
11de0     A7 24 02 FB | 	rdlong	local04, fp
11de4     10 4E 05 F1 | 	add	fp, #16
11de8     A7 20 02 FB | 	rdlong	local02, fp
11dec     10 1F 02 F6 | 	mov	local01, local02
11df0     0C 4E 85 F1 | 	sub	fp, #12
11df4     A7 16 02 FB | 	rdlong	arg03, fp
11df8     0B 1F 82 F1 | 	sub	local01, arg03
11dfc     04 4E 05 F1 | 	add	fp, #4
11e00     A7 16 02 FB | 	rdlong	arg03, fp
11e04     0B 1F 02 FD | 	qmul	local01, arg03
11e08     02 28 66 F0 | 	shl	local06, #2
11e0c     7A 00 00 FF 
11e10     08 E4 05 F1 | 	add	objptr, ##62472
11e14     F2 28 02 F1 | 	add	local06, objptr
11e18     14 29 02 FB | 	rdlong	local06, local06
11e1c     70 E4 05 F1 | 	add	objptr, #112
11e20     F2 1E 02 FB | 	rdlong	local01, objptr
11e24     7A 00 00 FF 
11e28     78 E4 85 F1 | 	sub	objptr, ##62584
11e2c     0F 2B 02 F6 | 	mov	local07, local01
11e30     12 2B 82 F1 | 	sub	local07, local04
11e34     F2 12 02 FB | 	rdlong	arg01, objptr
11e38     0F 13 02 F1 | 	add	arg01, local01
11e3c     48 4E 85 F1 | 	sub	fp, #72
11e40     0A 20 66 F0 | 	shl	local02, #10
11e44     10 13 02 F1 | 	add	arg01, local02
11e48     18 24 62 FD | 	getqx	local04
11e4c     12 2B 02 F1 | 	add	local07, local04
11e50     14 2B 02 F1 | 	add	local07, local06
11e54     98 39 B0 FD | 	call	#_pspeek
11e58     15 FB 41 FC | 	wrbyte	result1, local07
11e5c     7A 00 00 FF 
11e60     78 E4 05 F1 | 	add	objptr, ##62584
11e64     F2 2A 02 FB | 	rdlong	local07, objptr
11e68     01 2A 06 F1 | 	add	local07, #1
11e6c     F2 2A 62 FC | 	wrlong	local07, objptr
11e70     7A 00 00 FF 
11e74     78 E4 85 F1 | 	sub	objptr, ##62584
11e78     3C FF 9F FD | 	jmp	#LR__1432
11e7c                 | LR__1433
11e7c     50 4E 05 F1 | 	add	fp, #80
11e80     A7 2A 02 FB | 	rdlong	local07, fp
11e84     01 2A 06 F1 | 	add	local07, #1
11e88     A7 2A 62 FC | 	wrlong	local07, fp
11e8c     50 4E 85 F1 | 	sub	fp, #80
11e90     DC FE 9F FD | 	jmp	#LR__1431
11e94                 | LR__1434
11e94     3C 4E 05 F1 | 	add	fp, #60
11e98     A7 2A 02 FB | 	rdlong	local07, fp
11e9c     15 13 02 F6 | 	mov	arg01, local07
11ea0     3C 4E 85 F1 | 	sub	fp, #60
11ea4     02 2A 66 F0 | 	shl	local07, #2
11ea8     7A 00 00 FF 
11eac     08 E4 05 F1 | 	add	objptr, ##62472
11eb0     F2 2A 02 F1 | 	add	local07, objptr
11eb4     15 15 02 FB | 	rdlong	arg02, local07
11eb8     7A 00 00 FF 
11ebc     08 E4 85 F1 | 	sub	objptr, ##62472
11ec0     DC 4C B0 FD | 	call	#_hg010b_spin2_setspriteptr
11ec4     3C 4E 05 F1 | 	add	fp, #60
11ec8     A7 12 02 FB | 	rdlong	arg01, fp
11ecc     0C 4E 05 F1 | 	add	fp, #12
11ed0     A7 14 02 FB | 	rdlong	arg02, fp
11ed4     04 4E 05 F1 | 	add	fp, #4
11ed8     A7 16 02 FB | 	rdlong	arg03, fp
11edc     4C 4E 85 F1 | 	sub	fp, #76
11ee0     30 4D B0 FD | 	call	#_hg010b_spin2_setspritesize
11ee4     A7 F0 03 F6 | 	mov	ptra, fp
11ee8     B2 00 A0 FD | 	call	#popregs_
11eec                 | _do_defsprite_ret
11eec     2D 00 64 FD | 	ret
11ef0                 | 
11ef0                 | ' 
11ef0                 | ' sub do_sprite
11ef0                 | _do_sprite
11ef0     00 4A 05 F6 | 	mov	COUNT_, #0
11ef4     A8 00 A0 FD | 	call	#pushregs_
11ef8     30 F0 07 F1 | 	add	ptra, #48
11efc     B8 78 BF FD | 	call	#_pop
11f00     FD 16 02 F6 | 	mov	arg03, result1
11f04     FE 14 02 F6 | 	mov	arg02, result2
11f08     FF 12 02 F6 | 	mov	arg01, result3
11f0c     18 4E 05 F1 | 	add	fp, #24
11f10     A7 16 62 FC | 	wrlong	arg03, fp
11f14     04 4E 05 F1 | 	add	fp, #4
11f18     A7 14 62 FC | 	wrlong	arg02, fp
11f1c     04 4E 05 F1 | 	add	fp, #4
11f20     A7 12 62 FC | 	wrlong	arg01, fp
11f24     20 4E 85 F1 | 	sub	fp, #32
11f28     8C 78 BF FD | 	call	#_pop
11f2c     FD 16 02 F6 | 	mov	arg03, result1
11f30     FE 14 02 F6 | 	mov	arg02, result2
11f34     FF 12 02 F6 | 	mov	arg01, result3
11f38     0C 4E 05 F1 | 	add	fp, #12
11f3c     A7 16 62 FC | 	wrlong	arg03, fp
11f40     04 4E 05 F1 | 	add	fp, #4
11f44     A7 14 62 FC | 	wrlong	arg02, fp
11f48     04 4E 05 F1 | 	add	fp, #4
11f4c     A7 12 62 FC | 	wrlong	arg01, fp
11f50     14 4E 85 F1 | 	sub	fp, #20
11f54     60 78 BF FD | 	call	#_pop
11f58     FF 16 02 F6 | 	mov	arg03, result3
11f5c     A7 FA 61 FC | 	wrlong	result1, fp
11f60     04 4E 05 F1 | 	add	fp, #4
11f64     A7 FC 61 FC | 	wrlong	result2, fp
11f68     04 4E 05 F1 | 	add	fp, #4
11f6c     A7 16 62 FC | 	wrlong	arg03, fp
11f70     08 4E 85 F1 | 	sub	fp, #8
11f74     A7 12 02 F6 | 	mov	arg01, fp
11f78     20 ED BF FD | 	call	#_converttoint
11f7c     24 4E 05 F1 | 	add	fp, #36
11f80     A7 FA 61 FC | 	wrlong	result1, fp
11f84     18 4E 85 F1 | 	sub	fp, #24
11f88     A7 12 02 F6 | 	mov	arg01, fp
11f8c     0C 4E 85 F1 | 	sub	fp, #12
11f90     08 ED BF FD | 	call	#_converttoint
11f94     28 4E 05 F1 | 	add	fp, #40
11f98     A7 FA 61 FC | 	wrlong	result1, fp
11f9c     10 4E 85 F1 | 	sub	fp, #16
11fa0     A7 12 02 F6 | 	mov	arg01, fp
11fa4     18 4E 85 F1 | 	sub	fp, #24
11fa8     F0 EC BF FD | 	call	#_converttoint
11fac     2C 4E 05 F1 | 	add	fp, #44
11fb0     A7 FA 61 FC | 	wrlong	result1, fp
11fb4     08 4E 85 F1 | 	sub	fp, #8
11fb8     A7 12 02 FB | 	rdlong	arg01, fp
11fbc     04 4E 05 F1 | 	add	fp, #4
11fc0     A7 14 02 FB | 	rdlong	arg02, fp
11fc4     FD 16 02 F6 | 	mov	arg03, result1
11fc8     28 4E 85 F1 | 	sub	fp, #40
11fcc     F8 4B B0 FD | 	call	#_hg010b_spin2_setspritepos
11fd0     A7 F0 03 F6 | 	mov	ptra, fp
11fd4     B2 00 A0 FD | 	call	#popregs_
11fd8                 | _do_sprite_ret
11fd8     2D 00 64 FD | 	ret
11fdc                 | 
11fdc                 | ' 
11fdc                 | ' sub do_mousex
11fdc                 | _do_mousex
11fdc     00 4A 05 F6 | 	mov	COUNT_, #0
11fe0     A8 00 A0 FD | 	call	#pushregs_
11fe4     0C F0 07 F1 | 	add	ptra, #12
11fe8     08 4E 05 F1 | 	add	fp, #8
11fec     A7 3A 68 FC | 	wrlong	#29, fp
11ff0     08 4E 85 F1 | 	sub	fp, #8
11ff4     79 00 00 FF 
11ff8     C0 E5 05 F1 | 	add	objptr, ##62400
11ffc     F2 12 02 FB | 	rdlong	arg01, objptr
12000     79 00 00 FF 
12004     C0 E5 85 F1 | 	sub	objptr, ##62400
12008     A7 12 62 FC | 	wrlong	arg01, fp
1200c     A7 12 02 F6 | 	mov	arg01, fp
12010     3C 78 BF FD | 	call	#_push
12014     A7 F0 03 F6 | 	mov	ptra, fp
12018     B2 00 A0 FD | 	call	#popregs_
1201c                 | _do_mousex_ret
1201c     2D 00 64 FD | 	ret
12020                 | 
12020                 | ' 
12020                 | ' sub do_mousey
12020                 | _do_mousey
12020     00 4A 05 F6 | 	mov	COUNT_, #0
12024     A8 00 A0 FD | 	call	#pushregs_
12028     0C F0 07 F1 | 	add	ptra, #12
1202c     08 4E 05 F1 | 	add	fp, #8
12030     A7 3A 68 FC | 	wrlong	#29, fp
12034     08 4E 85 F1 | 	sub	fp, #8
12038     79 00 00 FF 
1203c     C4 E5 05 F1 | 	add	objptr, ##62404
12040     F2 12 02 FB | 	rdlong	arg01, objptr
12044     79 00 00 FF 
12048     C4 E5 85 F1 | 	sub	objptr, ##62404
1204c     A7 12 62 FC | 	wrlong	arg01, fp
12050     A7 12 02 F6 | 	mov	arg01, fp
12054     F8 77 BF FD | 	call	#_push
12058     A7 F0 03 F6 | 	mov	ptra, fp
1205c     B2 00 A0 FD | 	call	#popregs_
12060                 | _do_mousey_ret
12060     2D 00 64 FD | 	ret
12064                 | 
12064                 | ' 
12064                 | ' sub do_mousew
12064                 | _do_mousew
12064     00 4A 05 F6 | 	mov	COUNT_, #0
12068     A8 00 A0 FD | 	call	#pushregs_
1206c     0C F0 07 F1 | 	add	ptra, #12
12070     08 4E 05 F1 | 	add	fp, #8
12074     A7 38 68 FC | 	wrlong	#28, fp
12078     08 4E 85 F1 | 	sub	fp, #8
1207c     79 00 00 FF 
12080     CC E5 05 F1 | 	add	objptr, ##62412
12084     F2 12 02 FB | 	rdlong	arg01, objptr
12088     79 00 00 FF 
1208c     CC E5 85 F1 | 	sub	objptr, ##62412
12090     A7 12 62 FC | 	wrlong	arg01, fp
12094     A7 12 02 F6 | 	mov	arg01, fp
12098     B4 77 BF FD | 	call	#_push
1209c     A7 F0 03 F6 | 	mov	ptra, fp
120a0     B2 00 A0 FD | 	call	#popregs_
120a4                 | _do_mousew_ret
120a4     2D 00 64 FD | 	ret
120a8                 | 
120a8                 | ' 
120a8                 | ' sub do_mousek
120a8                 | _do_mousek
120a8     00 4A 05 F6 | 	mov	COUNT_, #0
120ac     A8 00 A0 FD | 	call	#pushregs_
120b0     0C F0 07 F1 | 	add	ptra, #12
120b4     08 4E 05 F1 | 	add	fp, #8
120b8     A7 3A 68 FC | 	wrlong	#29, fp
120bc     08 4E 85 F1 | 	sub	fp, #8
120c0     79 00 00 FF 
120c4     C8 E5 05 F1 | 	add	objptr, ##62408
120c8     F2 12 02 FB | 	rdlong	arg01, objptr
120cc     79 00 00 FF 
120d0     C8 E5 85 F1 | 	sub	objptr, ##62408
120d4     A7 12 62 FC | 	wrlong	arg01, fp
120d8     A7 12 02 F6 | 	mov	arg01, fp
120dc     70 77 BF FD | 	call	#_push
120e0     A7 F0 03 F6 | 	mov	ptra, fp
120e4     B2 00 A0 FD | 	call	#popregs_
120e8                 | _do_mousek_ret
120e8     2D 00 64 FD | 	ret
120ec                 | 
120ec                 | ' 
120ec                 | ' 
120ec                 | ' sub do_rdpin
120ec                 | _do_rdpin
120ec     00 4A 05 F6 | 	mov	COUNT_, #0
120f0     A8 00 A0 FD | 	call	#pushregs_
120f4     0C F0 07 F1 | 	add	ptra, #12
120f8     BC 76 BF FD | 	call	#_pop
120fc     A7 FA 61 FC | 	wrlong	result1, fp
12100     04 4E 05 F1 | 	add	fp, #4
12104     A7 FC 61 FC | 	wrlong	result2, fp
12108     04 4E 05 F1 | 	add	fp, #4
1210c     A7 FE 61 FC | 	wrlong	result3, fp
12110     08 4E 85 F1 | 	sub	fp, #8
12114     A7 12 02 F6 | 	mov	arg01, fp
12118     80 EB BF FD | 	call	#_converttoint
1211c     FD FA 89 FA | 	rdpin	result1, result1
12120     7A 00 00 FF 
12124     D0 E4 05 F1 | 	add	objptr, ##62672
12128     F2 FA 61 FC | 	wrlong	result1, objptr
1212c     7A 00 00 FF 
12130     D0 E4 85 F1 | 	sub	objptr, ##62672
12134     08 4E 05 F1 | 	add	fp, #8
12138     A7 3A 68 FC | 	wrlong	#29, fp
1213c     08 4E 85 F1 | 	sub	fp, #8
12140     A7 08 68 FC | 	wrlong	#4, fp
12144     A7 12 02 F6 | 	mov	arg01, fp
12148     04 77 BF FD | 	call	#_push
1214c     A7 F0 03 F6 | 	mov	ptra, fp
12150     B2 00 A0 FD | 	call	#popregs_
12154                 | _do_rdpin_ret
12154     2D 00 64 FD | 	ret
12158                 | 
12158                 | ' 
12158                 | ' sub do_rqpin
12158                 | _do_rqpin
12158     00 4A 05 F6 | 	mov	COUNT_, #0
1215c     A8 00 A0 FD | 	call	#pushregs_
12160     0C F0 07 F1 | 	add	ptra, #12
12164     50 76 BF FD | 	call	#_pop
12168     A7 FA 61 FC | 	wrlong	result1, fp
1216c     04 4E 05 F1 | 	add	fp, #4
12170     A7 FC 61 FC | 	wrlong	result2, fp
12174     04 4E 05 F1 | 	add	fp, #4
12178     A7 FE 61 FC | 	wrlong	result3, fp
1217c     08 4E 85 F1 | 	sub	fp, #8
12180     A7 12 02 F6 | 	mov	arg01, fp
12184     14 EB BF FD | 	call	#_converttoint
12188     FD 12 02 F6 | 	mov	arg01, result1
1218c     00 FA 05 F6 | 	mov	result1, #0
12190     09 FB 81 FA | 	rqpin	result1, arg01
12194     7A 00 00 FF 
12198     D0 E4 05 F1 | 	add	objptr, ##62672
1219c     F2 FA 61 FC | 	wrlong	result1, objptr
121a0     7A 00 00 FF 
121a4     D0 E4 85 F1 | 	sub	objptr, ##62672
121a8     08 4E 05 F1 | 	add	fp, #8
121ac     A7 3A 68 FC | 	wrlong	#29, fp
121b0     08 4E 85 F1 | 	sub	fp, #8
121b4     A7 08 68 FC | 	wrlong	#4, fp
121b8     A7 12 02 F6 | 	mov	arg01, fp
121bc     90 76 BF FD | 	call	#_push
121c0     A7 F0 03 F6 | 	mov	ptra, fp
121c4     B2 00 A0 FD | 	call	#popregs_
121c8                 | _do_rqpin_ret
121c8     2D 00 64 FD | 	ret
121cc                 | 
121cc                 | ' 
121cc                 | ' sub do_pinread
121cc                 | _do_pinread
121cc     00 4A 05 F6 | 	mov	COUNT_, #0
121d0     A8 00 A0 FD | 	call	#pushregs_
121d4     0C F0 07 F1 | 	add	ptra, #12
121d8     DC 75 BF FD | 	call	#_pop
121dc     A7 FA 61 FC | 	wrlong	result1, fp
121e0     04 4E 05 F1 | 	add	fp, #4
121e4     A7 FC 61 FC | 	wrlong	result2, fp
121e8     04 4E 05 F1 | 	add	fp, #4
121ec     A7 FE 61 FC | 	wrlong	result3, fp
121f0     08 4E 85 F1 | 	sub	fp, #8
121f4     A7 12 02 F6 | 	mov	arg01, fp
121f8     A0 EA BF FD | 	call	#_converttoint
121fc     FD 12 02 F6 | 	mov	arg01, result1
12200     20 12 CE F7 | 	test	arg01, #32 wz
12204     FF FB 01 56 |  if_ne	mov	result1, inb
12208     FE FB 01 A6 |  if_e	mov	result1, ina
1220c     09 FB 41 F0 | 	shr	result1, arg01
12210     06 12 46 F0 | 	shr	arg01, #6
12214     09 FB 41 F7 | 	zerox	result1, arg01
12218     7A 00 00 FF 
1221c     D0 E4 05 F1 | 	add	objptr, ##62672
12220     F2 FA 61 FC | 	wrlong	result1, objptr
12224     7A 00 00 FF 
12228     D0 E4 85 F1 | 	sub	objptr, ##62672
1222c     08 4E 05 F1 | 	add	fp, #8
12230     A7 3A 68 FC | 	wrlong	#29, fp
12234     08 4E 85 F1 | 	sub	fp, #8
12238     A7 08 68 FC | 	wrlong	#4, fp
1223c     A7 12 02 F6 | 	mov	arg01, fp
12240     0C 76 BF FD | 	call	#_push
12244     A7 F0 03 F6 | 	mov	ptra, fp
12248     B2 00 A0 FD | 	call	#popregs_
1224c                 | _do_pinread_ret
1224c     2D 00 64 FD | 	ret
12250                 | 
12250                 | ' 
12250                 | ' sub do_gettime
12250                 | _do_gettime
12250     02 4A 05 F6 | 	mov	COUNT_, #2
12254     A8 00 A0 FD | 	call	#pushregs_
12258     14 F0 07 F1 | 	add	ptra, #20
1225c                 | ' 
1225c                 | ' const asm 
1225c     1A 1E 72 FD | 	getct	local01 wc
12260     1A 20 62 FD | 	getct	local02
12264                 | ' 
12264                 | ' return hi1, lo1
12264     10 FD 01 F6 | 	mov	result2, local02
12268     A7 1E 62 FC | 	wrlong	local01, fp
1226c     04 4E 05 F1 | 	add	fp, #4
12270     A7 FC 61 FC | 	wrlong	result2, fp
12274     0C 4E 05 F1 | 	add	fp, #12
12278     A7 3A 68 FC | 	wrlong	#29, fp
1227c     0C 4E 85 F1 | 	sub	fp, #12
12280     A7 12 02 FB | 	rdlong	arg01, fp
12284     04 4E 05 F1 | 	add	fp, #4
12288     A7 12 62 FC | 	wrlong	arg01, fp
1228c     08 4E 85 F1 | 	sub	fp, #8
12290     A7 12 02 FB | 	rdlong	arg01, fp
12294     0C 4E 05 F1 | 	add	fp, #12
12298     A7 12 62 FC | 	wrlong	arg01, fp
1229c     04 4E 85 F1 | 	sub	fp, #4
122a0     A7 12 02 F6 | 	mov	arg01, fp
122a4     08 4E 85 F1 | 	sub	fp, #8
122a8     A4 75 BF FD | 	call	#_push
122ac     A7 F0 03 F6 | 	mov	ptra, fp
122b0     B2 00 A0 FD | 	call	#popregs_
122b4                 | _do_gettime_ret
122b4     2D 00 64 FD | 	ret
122b8                 | 
122b8                 | '    
122b8                 | ' 
122b8                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
122b8                 | ' 
122b8                 | ' '' ----------------------------- Clear the screen
122b8                 | ' 
122b8                 | ' sub do_cls
122b8                 | _do_cls
122b8     56 00 00 FF 
122bc     10 E4 05 F1 | 	add	objptr, ##44048
122c0     F2 12 02 FB | 	rdlong	arg01, objptr
122c4     04 E4 85 F1 | 	sub	objptr, #4
122c8     F2 14 02 FB | 	rdlong	arg02, objptr
122cc     56 00 00 FF 
122d0     0C E4 85 F1 | 	sub	objptr, ##44044
122d4     F4 55 B0 FD | 	call	#_hg010b_spin2_cls
122d8     56 00 00 FF 
122dc     10 E4 05 F1 | 	add	objptr, ##44048
122e0     F2 14 02 FB | 	rdlong	arg02, objptr
122e4     14 E4 85 F1 | 	sub	objptr, #20
122e8     F2 14 62 FC | 	wrlong	arg02, objptr
122ec     55 00 00 FF 
122f0     FC E5 85 F1 | 	sub	objptr, ##44028
122f4                 | ' cls(ink,paper): plot_color=ink: print
122f4     00 12 06 F6 | 	mov	arg01, #0
122f8     B8 C1 B0 FD | 	call	#__system___getiolock_0423
122fc     FD 12 02 F6 | 	mov	arg01, result1
12300     AC 68 B0 FD | 	call	#__system___lockmem
12304     00 12 06 F6 | 	mov	arg01, #0
12308     0A 14 06 F6 | 	mov	arg02, #10
1230c     00 16 06 F6 | 	mov	arg03, #0
12310     38 75 B0 FD | 	call	#__system___basic_print_char
12314     00 12 06 F6 | 	mov	arg01, #0
12318     98 C1 B0 FD | 	call	#__system___getiolock_0423
1231c     FD 00 68 FC | 	wrlong	#0, result1
12320                 | _do_cls_ret
12320     2D 00 64 FD | 	ret
12324                 | 
12324                 | ' 
12324                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
12324                 | ' 
12324                 | ' sub do_color
12324                 | _do_color
12324     03 4A 05 F6 | 	mov	COUNT_, #3
12328     A8 00 A0 FD | 	call	#pushregs_
1232c     88 74 BF FD | 	call	#_pop
12330     FD 1E 02 F6 | 	mov	local01, result1
12334     FE 20 02 F6 | 	mov	local02, result2
12338     FF 22 02 F6 | 	mov	local03, result3
1233c     55 00 00 FF 
12340     FC E5 05 F1 | 	add	objptr, ##44028
12344     F2 1E 62 FC | 	wrlong	local01, objptr
12348     55 00 00 FF 
1234c     FC E5 85 F1 | 	sub	objptr, ##44028
12350     A7 F0 03 F6 | 	mov	ptra, fp
12354     B2 00 A0 FD | 	call	#popregs_
12358                 | _do_color_ret
12358     2D 00 64 FD | 	ret
1235c                 | 
1235c                 | ' 
1235c                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
1235c                 | ' 
1235c                 | ' sub do_plot
1235c                 | _do_plot
1235c     00 4A 05 F6 | 	mov	COUNT_, #0
12360     A8 00 A0 FD | 	call	#pushregs_
12364     20 F0 07 F1 | 	add	ptra, #32
12368     4C 74 BF FD | 	call	#_pop
1236c     FD 16 02 F6 | 	mov	arg03, result1
12370     FE 14 02 F6 | 	mov	arg02, result2
12374     FF 12 02 F6 | 	mov	arg01, result3
12378     0C 4E 05 F1 | 	add	fp, #12
1237c     A7 16 62 FC | 	wrlong	arg03, fp
12380     04 4E 05 F1 | 	add	fp, #4
12384     A7 14 62 FC | 	wrlong	arg02, fp
12388     04 4E 05 F1 | 	add	fp, #4
1238c     A7 12 62 FC | 	wrlong	arg01, fp
12390     14 4E 85 F1 | 	sub	fp, #20
12394     20 74 BF FD | 	call	#_pop
12398     FF 16 02 F6 | 	mov	arg03, result3
1239c     A7 FA 61 FC | 	wrlong	result1, fp
123a0     04 4E 05 F1 | 	add	fp, #4
123a4     A7 FC 61 FC | 	wrlong	result2, fp
123a8     04 4E 05 F1 | 	add	fp, #4
123ac     A7 16 62 FC | 	wrlong	arg03, fp
123b0     08 4E 85 F1 | 	sub	fp, #8
123b4     A7 12 02 F6 | 	mov	arg01, fp
123b8     E0 E8 BF FD | 	call	#_converttoint
123bc     18 4E 05 F1 | 	add	fp, #24
123c0     A7 FA 61 FC | 	wrlong	result1, fp
123c4     0C 4E 85 F1 | 	sub	fp, #12
123c8     A7 12 02 F6 | 	mov	arg01, fp
123cc     0C 4E 85 F1 | 	sub	fp, #12
123d0     C8 E8 BF FD | 	call	#_converttoint
123d4     1C 4E 05 F1 | 	add	fp, #28
123d8     A7 FA 61 FC | 	wrlong	result1, fp
123dc     04 4E 85 F1 | 	sub	fp, #4
123e0     A7 16 02 FB | 	rdlong	arg03, fp
123e4     56 00 00 FF 
123e8     00 E4 05 F1 | 	add	objptr, ##44032
123ec     F2 16 62 FC | 	wrlong	arg03, objptr
123f0     04 4E 05 F1 | 	add	fp, #4
123f4     A7 14 02 FB | 	rdlong	arg02, fp
123f8     1C 4E 85 F1 | 	sub	fp, #28
123fc     04 E4 05 F1 | 	add	objptr, #4
12400     F2 14 62 FC | 	wrlong	arg02, objptr
12404     04 E4 85 F1 | 	sub	objptr, #4
12408     F2 12 02 FB | 	rdlong	arg01, objptr
1240c     04 E4 85 F1 | 	sub	objptr, #4
12410     F2 16 02 FB | 	rdlong	arg03, objptr
12414     55 00 00 FF 
12418     FC E5 85 F1 | 	sub	objptr, ##44028
1241c     40 48 B0 FD | 	call	#_hg010b_spin2_putpixel
12420     A7 F0 03 F6 | 	mov	ptra, fp
12424     B2 00 A0 FD | 	call	#popregs_
12428                 | _do_plot_ret
12428     2D 00 64 FD | 	ret
1242c                 | 
1242c                 | ' 
1242c                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
1242c                 | ' 
1242c                 | ' sub do_draw
1242c                 | _do_draw
1242c     00 4A 05 F6 | 	mov	COUNT_, #0
12430     A8 00 A0 FD | 	call	#pushregs_
12434     20 F0 07 F1 | 	add	ptra, #32
12438     7C 73 BF FD | 	call	#_pop
1243c     FD 1A 02 F6 | 	mov	arg05, result1
12440     FE 18 02 F6 | 	mov	arg04, result2
12444     FF 16 02 F6 | 	mov	arg03, result3
12448     0C 4E 05 F1 | 	add	fp, #12
1244c     A7 1A 62 FC | 	wrlong	arg05, fp
12450     04 4E 05 F1 | 	add	fp, #4
12454     A7 18 62 FC | 	wrlong	arg04, fp
12458     04 4E 05 F1 | 	add	fp, #4
1245c     A7 16 62 FC | 	wrlong	arg03, fp
12460     14 4E 85 F1 | 	sub	fp, #20
12464     50 73 BF FD | 	call	#_pop
12468     FF 1A 02 F6 | 	mov	arg05, result3
1246c     A7 FA 61 FC | 	wrlong	result1, fp
12470     04 4E 05 F1 | 	add	fp, #4
12474     A7 FC 61 FC | 	wrlong	result2, fp
12478     04 4E 05 F1 | 	add	fp, #4
1247c     A7 1A 62 FC | 	wrlong	arg05, fp
12480     08 4E 85 F1 | 	sub	fp, #8
12484     A7 12 02 F6 | 	mov	arg01, fp
12488     10 E8 BF FD | 	call	#_converttoint
1248c     18 4E 05 F1 | 	add	fp, #24
12490     A7 FA 61 FC | 	wrlong	result1, fp
12494     0C 4E 85 F1 | 	sub	fp, #12
12498     A7 12 02 F6 | 	mov	arg01, fp
1249c     0C 4E 85 F1 | 	sub	fp, #12
124a0     F8 E7 BF FD | 	call	#_converttoint
124a4     1C 4E 05 F1 | 	add	fp, #28
124a8     A7 FA 61 FC | 	wrlong	result1, fp
124ac     56 00 00 FF 
124b0     00 E4 05 F1 | 	add	objptr, ##44032
124b4     F2 12 02 FB | 	rdlong	arg01, objptr
124b8     04 E4 05 F1 | 	add	objptr, #4
124bc     F2 14 02 FB | 	rdlong	arg02, objptr
124c0     04 4E 85 F1 | 	sub	fp, #4
124c4     A7 16 02 FB | 	rdlong	arg03, fp
124c8     FD 18 02 F6 | 	mov	arg04, result1
124cc     18 4E 85 F1 | 	sub	fp, #24
124d0     08 E4 85 F1 | 	sub	objptr, #8
124d4     F2 1A 02 FB | 	rdlong	arg05, objptr
124d8     55 00 00 FF 
124dc     FC E5 85 F1 | 	sub	objptr, ##44028
124e0     2C 4A B0 FD | 	call	#_hg010b_spin2_draw
124e4     18 4E 05 F1 | 	add	fp, #24
124e8     A7 1A 02 FB | 	rdlong	arg05, fp
124ec     56 00 00 FF 
124f0     00 E4 05 F1 | 	add	objptr, ##44032
124f4     F2 1A 62 FC | 	wrlong	arg05, objptr
124f8     04 4E 05 F1 | 	add	fp, #4
124fc     A7 1A 02 FB | 	rdlong	arg05, fp
12500     1C 4E 85 F1 | 	sub	fp, #28
12504     04 E4 05 F1 | 	add	objptr, #4
12508     F2 1A 62 FC | 	wrlong	arg05, objptr
1250c     56 00 00 FF 
12510     04 E4 85 F1 | 	sub	objptr, ##44036
12514     A7 F0 03 F6 | 	mov	ptra, fp
12518     B2 00 A0 FD | 	call	#popregs_
1251c                 | _do_draw_ret
1251c     2D 00 64 FD | 	ret
12520                 | 
12520                 | ' 
12520                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
12520                 | ' 
12520                 | ' sub do_fcircle
12520                 | _do_fcircle
12520     02 4A 05 F6 | 	mov	COUNT_, #2
12524     A8 00 A0 FD | 	call	#pushregs_
12528     24 F0 07 F1 | 	add	ptra, #36
1252c     88 72 BF FD | 	call	#_pop
12530     FD 18 02 F6 | 	mov	arg04, result1
12534     FE 16 02 F6 | 	mov	arg03, result2
12538     FF 14 02 F6 | 	mov	arg02, result3
1253c     18 4E 05 F1 | 	add	fp, #24
12540     A7 18 62 FC | 	wrlong	arg04, fp
12544     04 4E 05 F1 | 	add	fp, #4
12548     A7 16 62 FC | 	wrlong	arg03, fp
1254c     04 4E 05 F1 | 	add	fp, #4
12550     A7 14 62 FC | 	wrlong	arg02, fp
12554     20 4E 85 F1 | 	sub	fp, #32
12558     5C 72 BF FD | 	call	#_pop
1255c     FD 18 02 F6 | 	mov	arg04, result1
12560     FE 16 02 F6 | 	mov	arg03, result2
12564     FF 1E 02 F6 | 	mov	local01, result3
12568     0C 4E 05 F1 | 	add	fp, #12
1256c     A7 18 62 FC | 	wrlong	arg04, fp
12570     04 4E 05 F1 | 	add	fp, #4
12574     A7 16 62 FC | 	wrlong	arg03, fp
12578     04 4E 05 F1 | 	add	fp, #4
1257c     A7 1E 62 FC | 	wrlong	local01, fp
12580     14 4E 85 F1 | 	sub	fp, #20
12584     30 72 BF FD | 	call	#_pop
12588     A7 FA 61 FC | 	wrlong	result1, fp
1258c     04 4E 05 F1 | 	add	fp, #4
12590     A7 FC 61 FC | 	wrlong	result2, fp
12594     04 4E 05 F1 | 	add	fp, #4
12598     A7 FE 61 FC | 	wrlong	result3, fp
1259c                 | ' 
1259c                 | ' t3=pop()
1259c                 | ' t2=pop()
1259c                 | ' t1=pop()
1259c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
1259c     FF 18 02 F6 | 	mov	arg04, result3
125a0     08 4E 85 F1 | 	sub	fp, #8
125a4     1C 18 0E F2 | 	cmp	arg04, #28 wz
125a8     08 4E 05 51 |  if_ne	add	fp, #8
125ac     A7 1E 02 5B |  if_ne	rdlong	local01, fp
125b0     08 4E 85 51 |  if_ne	sub	fp, #8
125b4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
125b8     7C 00 90 5D |  if_ne	jmp	#LR__1440
125bc     14 4E 05 F1 | 	add	fp, #20
125c0     A7 1E 02 FB | 	rdlong	local01, fp
125c4     14 4E 85 F1 | 	sub	fp, #20
125c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
125cc     14 4E 05 51 |  if_ne	add	fp, #20
125d0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
125d4     14 4E 85 51 |  if_ne	sub	fp, #20
125d8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
125dc     58 00 90 5D |  if_ne	jmp	#LR__1440
125e0     20 4E 05 F1 | 	add	fp, #32
125e4     A7 1E 02 FB | 	rdlong	local01, fp
125e8     20 4E 85 F1 | 	sub	fp, #32
125ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
125f0     20 4E 05 51 |  if_ne	add	fp, #32
125f4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
125f8     20 4E 85 51 |  if_ne	sub	fp, #32
125fc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12600     34 00 90 5D |  if_ne	jmp	#LR__1440
12604     A7 12 02 FB | 	rdlong	arg01, fp
12608     0C 4E 05 F1 | 	add	fp, #12
1260c     A7 14 02 FB | 	rdlong	arg02, fp
12610     0C 4E 05 F1 | 	add	fp, #12
12614     A7 16 02 FB | 	rdlong	arg03, fp
12618     18 4E 85 F1 | 	sub	fp, #24
1261c     55 00 00 FF 
12620     FC E5 05 F1 | 	add	objptr, ##44028
12624     F2 18 02 FB | 	rdlong	arg04, objptr
12628     55 00 00 FF 
1262c     FC E5 85 F1 | 	sub	objptr, ##44028
12630     60 4D B0 FD | 	call	#_hg010b_spin2_fcircle
12634                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
12634     54 00 90 FD | 	jmp	#LR__1441
12638                 | LR__1440
12638     A7 12 02 F6 | 	mov	arg01, fp
1263c     5C E6 BF FD | 	call	#_converttoint
12640     FD 1E 02 F6 | 	mov	local01, result1
12644     0C 4E 05 F1 | 	add	fp, #12
12648     A7 12 02 F6 | 	mov	arg01, fp
1264c     0C 4E 85 F1 | 	sub	fp, #12
12650     48 E6 BF FD | 	call	#_converttoint
12654     FD 20 02 F6 | 	mov	local02, result1
12658     18 4E 05 F1 | 	add	fp, #24
1265c     A7 12 02 F6 | 	mov	arg01, fp
12660     18 4E 85 F1 | 	sub	fp, #24
12664     34 E6 BF FD | 	call	#_converttoint
12668     FD 16 02 F6 | 	mov	arg03, result1
1266c     55 00 00 FF 
12670     FC E5 05 F1 | 	add	objptr, ##44028
12674     F2 18 02 FB | 	rdlong	arg04, objptr
12678     55 00 00 FF 
1267c     FC E5 85 F1 | 	sub	objptr, ##44028
12680     0F 13 02 F6 | 	mov	arg01, local01
12684     10 15 02 F6 | 	mov	arg02, local02
12688     08 4D B0 FD | 	call	#_hg010b_spin2_fcircle
1268c                 | LR__1441
1268c     A7 F0 03 F6 | 	mov	ptra, fp
12690     B2 00 A0 FD | 	call	#popregs_
12694                 | _do_fcircle_ret
12694     2D 00 64 FD | 	ret
12698                 | 
12698                 | ' 
12698                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
12698                 | ' 
12698                 | ' sub do_circle
12698                 | _do_circle
12698     02 4A 05 F6 | 	mov	COUNT_, #2
1269c     A8 00 A0 FD | 	call	#pushregs_
126a0     24 F0 07 F1 | 	add	ptra, #36
126a4     10 71 BF FD | 	call	#_pop
126a8     FD 18 02 F6 | 	mov	arg04, result1
126ac     FE 16 02 F6 | 	mov	arg03, result2
126b0     FF 14 02 F6 | 	mov	arg02, result3
126b4     18 4E 05 F1 | 	add	fp, #24
126b8     A7 18 62 FC | 	wrlong	arg04, fp
126bc     04 4E 05 F1 | 	add	fp, #4
126c0     A7 16 62 FC | 	wrlong	arg03, fp
126c4     04 4E 05 F1 | 	add	fp, #4
126c8     A7 14 62 FC | 	wrlong	arg02, fp
126cc     20 4E 85 F1 | 	sub	fp, #32
126d0     E4 70 BF FD | 	call	#_pop
126d4     FD 18 02 F6 | 	mov	arg04, result1
126d8     FE 16 02 F6 | 	mov	arg03, result2
126dc     FF 1E 02 F6 | 	mov	local01, result3
126e0     0C 4E 05 F1 | 	add	fp, #12
126e4     A7 18 62 FC | 	wrlong	arg04, fp
126e8     04 4E 05 F1 | 	add	fp, #4
126ec     A7 16 62 FC | 	wrlong	arg03, fp
126f0     04 4E 05 F1 | 	add	fp, #4
126f4     A7 1E 62 FC | 	wrlong	local01, fp
126f8     14 4E 85 F1 | 	sub	fp, #20
126fc     B8 70 BF FD | 	call	#_pop
12700     A7 FA 61 FC | 	wrlong	result1, fp
12704     04 4E 05 F1 | 	add	fp, #4
12708     A7 FC 61 FC | 	wrlong	result2, fp
1270c     04 4E 05 F1 | 	add	fp, #4
12710     A7 FE 61 FC | 	wrlong	result3, fp
12714                 | ' 
12714                 | ' t3=pop()
12714                 | ' t2=pop()
12714                 | ' t1=pop()
12714                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
12714     FF 18 02 F6 | 	mov	arg04, result3
12718     08 4E 85 F1 | 	sub	fp, #8
1271c     1C 18 0E F2 | 	cmp	arg04, #28 wz
12720     08 4E 05 51 |  if_ne	add	fp, #8
12724     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12728     08 4E 85 51 |  if_ne	sub	fp, #8
1272c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12730     7C 00 90 5D |  if_ne	jmp	#LR__1450
12734     14 4E 05 F1 | 	add	fp, #20
12738     A7 1E 02 FB | 	rdlong	local01, fp
1273c     14 4E 85 F1 | 	sub	fp, #20
12740     1C 1E 0E F2 | 	cmp	local01, #28 wz
12744     14 4E 05 51 |  if_ne	add	fp, #20
12748     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1274c     14 4E 85 51 |  if_ne	sub	fp, #20
12750     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12754     58 00 90 5D |  if_ne	jmp	#LR__1450
12758     20 4E 05 F1 | 	add	fp, #32
1275c     A7 1E 02 FB | 	rdlong	local01, fp
12760     20 4E 85 F1 | 	sub	fp, #32
12764     1C 1E 0E F2 | 	cmp	local01, #28 wz
12768     20 4E 05 51 |  if_ne	add	fp, #32
1276c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12770     20 4E 85 51 |  if_ne	sub	fp, #32
12774     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12778     34 00 90 5D |  if_ne	jmp	#LR__1450
1277c     A7 12 02 FB | 	rdlong	arg01, fp
12780     0C 4E 05 F1 | 	add	fp, #12
12784     A7 14 02 FB | 	rdlong	arg02, fp
12788     0C 4E 05 F1 | 	add	fp, #12
1278c     A7 16 02 FB | 	rdlong	arg03, fp
12790     18 4E 85 F1 | 	sub	fp, #24
12794     55 00 00 FF 
12798     FC E5 05 F1 | 	add	objptr, ##44028
1279c     F2 18 02 FB | 	rdlong	arg04, objptr
127a0     55 00 00 FF 
127a4     FC E5 85 F1 | 	sub	objptr, ##44028
127a8     F4 4C B0 FD | 	call	#_hg010b_spin2_circle
127ac                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
127ac     54 00 90 FD | 	jmp	#LR__1451
127b0                 | LR__1450
127b0     A7 12 02 F6 | 	mov	arg01, fp
127b4     E4 E4 BF FD | 	call	#_converttoint
127b8     FD 1E 02 F6 | 	mov	local01, result1
127bc     0C 4E 05 F1 | 	add	fp, #12
127c0     A7 12 02 F6 | 	mov	arg01, fp
127c4     0C 4E 85 F1 | 	sub	fp, #12
127c8     D0 E4 BF FD | 	call	#_converttoint
127cc     FD 20 02 F6 | 	mov	local02, result1
127d0     18 4E 05 F1 | 	add	fp, #24
127d4     A7 12 02 F6 | 	mov	arg01, fp
127d8     18 4E 85 F1 | 	sub	fp, #24
127dc     BC E4 BF FD | 	call	#_converttoint
127e0     FD 16 02 F6 | 	mov	arg03, result1
127e4     55 00 00 FF 
127e8     FC E5 05 F1 | 	add	objptr, ##44028
127ec     F2 18 02 FB | 	rdlong	arg04, objptr
127f0     55 00 00 FF 
127f4     FC E5 85 F1 | 	sub	objptr, ##44028
127f8     0F 13 02 F6 | 	mov	arg01, local01
127fc     10 15 02 F6 | 	mov	arg02, local02
12800     9C 4C B0 FD | 	call	#_hg010b_spin2_circle
12804                 | LR__1451
12804     A7 F0 03 F6 | 	mov	ptra, fp
12808     B2 00 A0 FD | 	call	#popregs_
1280c                 | _do_circle_ret
1280c     2D 00 64 FD | 	ret
12810                 | 
12810                 | ' 
12810                 | ' ' -------------------------- Draw a rectangle
12810                 | ' 
12810                 | ' sub do_box
12810                 | _do_box
12810     03 4A 05 F6 | 	mov	COUNT_, #3
12814     A8 00 A0 FD | 	call	#pushregs_
12818     30 F0 07 F1 | 	add	ptra, #48
1281c     98 6F BF FD | 	call	#_pop
12820     FD 1A 02 F6 | 	mov	arg05, result1
12824     FE 18 02 F6 | 	mov	arg04, result2
12828     FF 16 02 F6 | 	mov	arg03, result3
1282c     24 4E 05 F1 | 	add	fp, #36
12830     A7 1A 62 FC | 	wrlong	arg05, fp
12834     04 4E 05 F1 | 	add	fp, #4
12838     A7 18 62 FC | 	wrlong	arg04, fp
1283c     04 4E 05 F1 | 	add	fp, #4
12840     A7 16 62 FC | 	wrlong	arg03, fp
12844     2C 4E 85 F1 | 	sub	fp, #44
12848     6C 6F BF FD | 	call	#_pop
1284c     FD 1A 02 F6 | 	mov	arg05, result1
12850     FE 18 02 F6 | 	mov	arg04, result2
12854     FF 16 02 F6 | 	mov	arg03, result3
12858     18 4E 05 F1 | 	add	fp, #24
1285c     A7 1A 62 FC | 	wrlong	arg05, fp
12860     04 4E 05 F1 | 	add	fp, #4
12864     A7 18 62 FC | 	wrlong	arg04, fp
12868     04 4E 05 F1 | 	add	fp, #4
1286c     A7 16 62 FC | 	wrlong	arg03, fp
12870     20 4E 85 F1 | 	sub	fp, #32
12874     40 6F BF FD | 	call	#_pop
12878     FD 1A 02 F6 | 	mov	arg05, result1
1287c     FE 18 02 F6 | 	mov	arg04, result2
12880     FF 1E 02 F6 | 	mov	local01, result3
12884     0C 4E 05 F1 | 	add	fp, #12
12888     A7 1A 62 FC | 	wrlong	arg05, fp
1288c     04 4E 05 F1 | 	add	fp, #4
12890     A7 18 62 FC | 	wrlong	arg04, fp
12894     04 4E 05 F1 | 	add	fp, #4
12898     A7 1E 62 FC | 	wrlong	local01, fp
1289c     14 4E 85 F1 | 	sub	fp, #20
128a0     14 6F BF FD | 	call	#_pop
128a4     A7 FA 61 FC | 	wrlong	result1, fp
128a8     04 4E 05 F1 | 	add	fp, #4
128ac     A7 FC 61 FC | 	wrlong	result2, fp
128b0     04 4E 05 F1 | 	add	fp, #4
128b4     A7 FE 61 FC | 	wrlong	result3, fp
128b8                 | ' 
128b8                 | ' t4=pop()
128b8                 | ' t3=pop()
128b8                 | ' t2=pop()
128b8                 | ' t1=pop()
128b8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
128b8     FF 1A 02 F6 | 	mov	arg05, result3
128bc     08 4E 85 F1 | 	sub	fp, #8
128c0     1C 1A 0E F2 | 	cmp	arg05, #28 wz
128c4     08 4E 05 51 |  if_ne	add	fp, #8
128c8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
128cc     08 4E 85 51 |  if_ne	sub	fp, #8
128d0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
128d4     A8 00 90 5D |  if_ne	jmp	#LR__1460
128d8     14 4E 05 F1 | 	add	fp, #20
128dc     A7 1E 02 FB | 	rdlong	local01, fp
128e0     14 4E 85 F1 | 	sub	fp, #20
128e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
128e8     14 4E 05 51 |  if_ne	add	fp, #20
128ec     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
128f0     14 4E 85 51 |  if_ne	sub	fp, #20
128f4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
128f8     84 00 90 5D |  if_ne	jmp	#LR__1460
128fc     20 4E 05 F1 | 	add	fp, #32
12900     A7 1E 02 FB | 	rdlong	local01, fp
12904     20 4E 85 F1 | 	sub	fp, #32
12908     1C 1E 0E F2 | 	cmp	local01, #28 wz
1290c     20 4E 05 51 |  if_ne	add	fp, #32
12910     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12914     20 4E 85 51 |  if_ne	sub	fp, #32
12918     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
1291c     60 00 90 5D |  if_ne	jmp	#LR__1460
12920     2C 4E 05 F1 | 	add	fp, #44
12924     A7 1E 02 FB | 	rdlong	local01, fp
12928     2C 4E 85 F1 | 	sub	fp, #44
1292c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12930     2C 4E 05 51 |  if_ne	add	fp, #44
12934     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12938     2C 4E 85 51 |  if_ne	sub	fp, #44
1293c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12940     3C 00 90 5D |  if_ne	jmp	#LR__1460
12944     A7 12 02 FB | 	rdlong	arg01, fp
12948     0C 4E 05 F1 | 	add	fp, #12
1294c     A7 14 02 FB | 	rdlong	arg02, fp
12950     0C 4E 05 F1 | 	add	fp, #12
12954     A7 16 02 FB | 	rdlong	arg03, fp
12958     0C 4E 05 F1 | 	add	fp, #12
1295c     A7 18 02 FB | 	rdlong	arg04, fp
12960     24 4E 85 F1 | 	sub	fp, #36
12964     55 00 00 FF 
12968     FC E5 05 F1 | 	add	objptr, ##44028
1296c     F2 1A 02 FB | 	rdlong	arg05, objptr
12970     55 00 00 FF 
12974     FC E5 85 F1 | 	sub	objptr, ##44028
12978     F0 4C B0 FD | 	call	#_hg010b_spin2_box
1297c                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
1297c     6C 00 90 FD | 	jmp	#LR__1461
12980                 | LR__1460
12980     A7 12 02 F6 | 	mov	arg01, fp
12984     14 E3 BF FD | 	call	#_converttoint
12988     FD 20 02 F6 | 	mov	local02, result1
1298c     0C 4E 05 F1 | 	add	fp, #12
12990     A7 12 02 F6 | 	mov	arg01, fp
12994     0C 4E 85 F1 | 	sub	fp, #12
12998     00 E3 BF FD | 	call	#_converttoint
1299c     FD 22 02 F6 | 	mov	local03, result1
129a0     18 4E 05 F1 | 	add	fp, #24
129a4     A7 12 02 F6 | 	mov	arg01, fp
129a8     18 4E 85 F1 | 	sub	fp, #24
129ac     EC E2 BF FD | 	call	#_converttoint
129b0     FD 1E 02 F6 | 	mov	local01, result1
129b4     24 4E 05 F1 | 	add	fp, #36
129b8     A7 12 02 F6 | 	mov	arg01, fp
129bc     24 4E 85 F1 | 	sub	fp, #36
129c0     D8 E2 BF FD | 	call	#_converttoint
129c4     FD 18 02 F6 | 	mov	arg04, result1
129c8     55 00 00 FF 
129cc     FC E5 05 F1 | 	add	objptr, ##44028
129d0     F2 1A 02 FB | 	rdlong	arg05, objptr
129d4     55 00 00 FF 
129d8     FC E5 85 F1 | 	sub	objptr, ##44028
129dc     10 13 02 F6 | 	mov	arg01, local02
129e0     11 15 02 F6 | 	mov	arg02, local03
129e4     0F 17 02 F6 | 	mov	arg03, local01
129e8     80 4C B0 FD | 	call	#_hg010b_spin2_box
129ec                 | LR__1461
129ec     A7 F0 03 F6 | 	mov	ptra, fp
129f0     B2 00 A0 FD | 	call	#popregs_
129f4                 | _do_box_ret
129f4     2D 00 64 FD | 	ret
129f8                 | 
129f8                 | ' 
129f8                 | ' sub do_fill
129f8                 | _do_fill
129f8     03 4A 05 F6 | 	mov	COUNT_, #3
129fc     A8 00 A0 FD | 	call	#pushregs_
12a00     30 F0 07 F1 | 	add	ptra, #48
12a04     B0 6D BF FD | 	call	#_pop
12a08     FD 18 02 F6 | 	mov	arg04, result1
12a0c     FE 16 02 F6 | 	mov	arg03, result2
12a10     FF 14 02 F6 | 	mov	arg02, result3
12a14     24 4E 05 F1 | 	add	fp, #36
12a18     A7 18 62 FC | 	wrlong	arg04, fp
12a1c     04 4E 05 F1 | 	add	fp, #4
12a20     A7 16 62 FC | 	wrlong	arg03, fp
12a24     04 4E 05 F1 | 	add	fp, #4
12a28     A7 14 62 FC | 	wrlong	arg02, fp
12a2c     2C 4E 85 F1 | 	sub	fp, #44
12a30     84 6D BF FD | 	call	#_pop
12a34     FD 18 02 F6 | 	mov	arg04, result1
12a38     FE 16 02 F6 | 	mov	arg03, result2
12a3c     FF 14 02 F6 | 	mov	arg02, result3
12a40     18 4E 05 F1 | 	add	fp, #24
12a44     A7 18 62 FC | 	wrlong	arg04, fp
12a48     04 4E 05 F1 | 	add	fp, #4
12a4c     A7 16 62 FC | 	wrlong	arg03, fp
12a50     04 4E 05 F1 | 	add	fp, #4
12a54     A7 14 62 FC | 	wrlong	arg02, fp
12a58     20 4E 85 F1 | 	sub	fp, #32
12a5c     58 6D BF FD | 	call	#_pop
12a60     FD 18 02 F6 | 	mov	arg04, result1
12a64     FE 16 02 F6 | 	mov	arg03, result2
12a68     FF 1E 02 F6 | 	mov	local01, result3
12a6c     0C 4E 05 F1 | 	add	fp, #12
12a70     A7 18 62 FC | 	wrlong	arg04, fp
12a74     04 4E 05 F1 | 	add	fp, #4
12a78     A7 16 62 FC | 	wrlong	arg03, fp
12a7c     04 4E 05 F1 | 	add	fp, #4
12a80     A7 1E 62 FC | 	wrlong	local01, fp
12a84     14 4E 85 F1 | 	sub	fp, #20
12a88     2C 6D BF FD | 	call	#_pop
12a8c     A7 FA 61 FC | 	wrlong	result1, fp
12a90     04 4E 05 F1 | 	add	fp, #4
12a94     A7 FC 61 FC | 	wrlong	result2, fp
12a98     04 4E 05 F1 | 	add	fp, #4
12a9c     A7 FE 61 FC | 	wrlong	result3, fp
12aa0                 | ' 
12aa0                 | ' t4=pop()
12aa0                 | ' t3=pop()
12aa0                 | ' t2=pop()
12aa0                 | ' t1=pop()
12aa0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12aa0     FF 18 02 F6 | 	mov	arg04, result3
12aa4     08 4E 85 F1 | 	sub	fp, #8
12aa8     1C 18 0E F2 | 	cmp	arg04, #28 wz
12aac     08 4E 05 51 |  if_ne	add	fp, #8
12ab0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12ab4     08 4E 85 51 |  if_ne	sub	fp, #8
12ab8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12abc     94 00 90 5D |  if_ne	jmp	#LR__1470
12ac0     14 4E 05 F1 | 	add	fp, #20
12ac4     A7 1E 02 FB | 	rdlong	local01, fp
12ac8     14 4E 85 F1 | 	sub	fp, #20
12acc     1C 1E 0E F2 | 	cmp	local01, #28 wz
12ad0     14 4E 05 51 |  if_ne	add	fp, #20
12ad4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12ad8     14 4E 85 51 |  if_ne	sub	fp, #20
12adc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12ae0     70 00 90 5D |  if_ne	jmp	#LR__1470
12ae4     20 4E 05 F1 | 	add	fp, #32
12ae8     A7 1E 02 FB | 	rdlong	local01, fp
12aec     20 4E 85 F1 | 	sub	fp, #32
12af0     1C 1E 0E F2 | 	cmp	local01, #28 wz
12af4     20 4E 05 51 |  if_ne	add	fp, #32
12af8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12afc     20 4E 85 51 |  if_ne	sub	fp, #32
12b00     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12b04     4C 00 90 5D |  if_ne	jmp	#LR__1470
12b08     2C 4E 05 F1 | 	add	fp, #44
12b0c     A7 1E 02 FB | 	rdlong	local01, fp
12b10     2C 4E 85 F1 | 	sub	fp, #44
12b14     1C 1E 0E F2 | 	cmp	local01, #28 wz
12b18     2C 4E 05 51 |  if_ne	add	fp, #44
12b1c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12b20     2C 4E 85 51 |  if_ne	sub	fp, #44
12b24     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12b28     28 00 90 5D |  if_ne	jmp	#LR__1470
12b2c     A7 12 02 FB | 	rdlong	arg01, fp
12b30     0C 4E 05 F1 | 	add	fp, #12
12b34     A7 14 02 FB | 	rdlong	arg02, fp
12b38     0C 4E 05 F1 | 	add	fp, #12
12b3c     A7 16 02 FB | 	rdlong	arg03, fp
12b40     0C 4E 05 F1 | 	add	fp, #12
12b44     A7 18 02 FB | 	rdlong	arg04, fp
12b48     24 4E 85 F1 | 	sub	fp, #36
12b4c     B0 45 B0 FD | 	call	#_hg010b_spin2_fill
12b50                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
12b50     58 00 90 FD | 	jmp	#LR__1471
12b54                 | LR__1470
12b54     A7 12 02 F6 | 	mov	arg01, fp
12b58     40 E1 BF FD | 	call	#_converttoint
12b5c     FD 20 02 F6 | 	mov	local02, result1
12b60     0C 4E 05 F1 | 	add	fp, #12
12b64     A7 12 02 F6 | 	mov	arg01, fp
12b68     0C 4E 85 F1 | 	sub	fp, #12
12b6c     2C E1 BF FD | 	call	#_converttoint
12b70     FD 22 02 F6 | 	mov	local03, result1
12b74     18 4E 05 F1 | 	add	fp, #24
12b78     A7 12 02 F6 | 	mov	arg01, fp
12b7c     18 4E 85 F1 | 	sub	fp, #24
12b80     18 E1 BF FD | 	call	#_converttoint
12b84     FD 1E 02 F6 | 	mov	local01, result1
12b88     24 4E 05 F1 | 	add	fp, #36
12b8c     A7 12 02 F6 | 	mov	arg01, fp
12b90     24 4E 85 F1 | 	sub	fp, #36
12b94     04 E1 BF FD | 	call	#_converttoint
12b98     FD 18 02 F6 | 	mov	arg04, result1
12b9c     10 13 02 F6 | 	mov	arg01, local02
12ba0     11 15 02 F6 | 	mov	arg02, local03
12ba4     0F 17 02 F6 | 	mov	arg03, local01
12ba8     54 45 B0 FD | 	call	#_hg010b_spin2_fill
12bac                 | LR__1471
12bac     A7 F0 03 F6 | 	mov	ptra, fp
12bb0     B2 00 A0 FD | 	call	#popregs_
12bb4                 | _do_fill_ret
12bb4     2D 00 64 FD | 	ret
12bb8                 | 
12bb8                 | ' 
12bb8                 | ' ' -------------------------- Draw a frane
12bb8                 | ' 
12bb8                 | ' sub do_frame
12bb8                 | _do_frame
12bb8     03 4A 05 F6 | 	mov	COUNT_, #3
12bbc     A8 00 A0 FD | 	call	#pushregs_
12bc0     30 F0 07 F1 | 	add	ptra, #48
12bc4     F0 6B BF FD | 	call	#_pop
12bc8     FD 1A 02 F6 | 	mov	arg05, result1
12bcc     FE 18 02 F6 | 	mov	arg04, result2
12bd0     FF 16 02 F6 | 	mov	arg03, result3
12bd4     24 4E 05 F1 | 	add	fp, #36
12bd8     A7 1A 62 FC | 	wrlong	arg05, fp
12bdc     04 4E 05 F1 | 	add	fp, #4
12be0     A7 18 62 FC | 	wrlong	arg04, fp
12be4     04 4E 05 F1 | 	add	fp, #4
12be8     A7 16 62 FC | 	wrlong	arg03, fp
12bec     2C 4E 85 F1 | 	sub	fp, #44
12bf0     C4 6B BF FD | 	call	#_pop
12bf4     FD 1A 02 F6 | 	mov	arg05, result1
12bf8     FE 18 02 F6 | 	mov	arg04, result2
12bfc     FF 16 02 F6 | 	mov	arg03, result3
12c00     18 4E 05 F1 | 	add	fp, #24
12c04     A7 1A 62 FC | 	wrlong	arg05, fp
12c08     04 4E 05 F1 | 	add	fp, #4
12c0c     A7 18 62 FC | 	wrlong	arg04, fp
12c10     04 4E 05 F1 | 	add	fp, #4
12c14     A7 16 62 FC | 	wrlong	arg03, fp
12c18     20 4E 85 F1 | 	sub	fp, #32
12c1c     98 6B BF FD | 	call	#_pop
12c20     FD 1A 02 F6 | 	mov	arg05, result1
12c24     FE 18 02 F6 | 	mov	arg04, result2
12c28     FF 1E 02 F6 | 	mov	local01, result3
12c2c     0C 4E 05 F1 | 	add	fp, #12
12c30     A7 1A 62 FC | 	wrlong	arg05, fp
12c34     04 4E 05 F1 | 	add	fp, #4
12c38     A7 18 62 FC | 	wrlong	arg04, fp
12c3c     04 4E 05 F1 | 	add	fp, #4
12c40     A7 1E 62 FC | 	wrlong	local01, fp
12c44     14 4E 85 F1 | 	sub	fp, #20
12c48     6C 6B BF FD | 	call	#_pop
12c4c     A7 FA 61 FC | 	wrlong	result1, fp
12c50     04 4E 05 F1 | 	add	fp, #4
12c54     A7 FC 61 FC | 	wrlong	result2, fp
12c58     04 4E 05 F1 | 	add	fp, #4
12c5c     A7 FE 61 FC | 	wrlong	result3, fp
12c60                 | ' 
12c60                 | ' t4=pop()
12c60                 | ' t3=pop()
12c60                 | ' t2=pop()
12c60                 | ' t1=pop()
12c60                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12c60     FF 1A 02 F6 | 	mov	arg05, result3
12c64     08 4E 85 F1 | 	sub	fp, #8
12c68     1C 1A 0E F2 | 	cmp	arg05, #28 wz
12c6c     08 4E 05 51 |  if_ne	add	fp, #8
12c70     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12c74     08 4E 85 51 |  if_ne	sub	fp, #8
12c78     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12c7c     A8 00 90 5D |  if_ne	jmp	#LR__1480
12c80     14 4E 05 F1 | 	add	fp, #20
12c84     A7 1E 02 FB | 	rdlong	local01, fp
12c88     14 4E 85 F1 | 	sub	fp, #20
12c8c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12c90     14 4E 05 51 |  if_ne	add	fp, #20
12c94     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12c98     14 4E 85 51 |  if_ne	sub	fp, #20
12c9c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12ca0     84 00 90 5D |  if_ne	jmp	#LR__1480
12ca4     20 4E 05 F1 | 	add	fp, #32
12ca8     A7 1E 02 FB | 	rdlong	local01, fp
12cac     20 4E 85 F1 | 	sub	fp, #32
12cb0     1C 1E 0E F2 | 	cmp	local01, #28 wz
12cb4     20 4E 05 51 |  if_ne	add	fp, #32
12cb8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12cbc     20 4E 85 51 |  if_ne	sub	fp, #32
12cc0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12cc4     60 00 90 5D |  if_ne	jmp	#LR__1480
12cc8     2C 4E 05 F1 | 	add	fp, #44
12ccc     A7 1E 02 FB | 	rdlong	local01, fp
12cd0     2C 4E 85 F1 | 	sub	fp, #44
12cd4     1C 1E 0E F2 | 	cmp	local01, #28 wz
12cd8     2C 4E 05 51 |  if_ne	add	fp, #44
12cdc     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12ce0     2C 4E 85 51 |  if_ne	sub	fp, #44
12ce4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12ce8     3C 00 90 5D |  if_ne	jmp	#LR__1480
12cec     A7 12 02 FB | 	rdlong	arg01, fp
12cf0     0C 4E 05 F1 | 	add	fp, #12
12cf4     A7 14 02 FB | 	rdlong	arg02, fp
12cf8     0C 4E 05 F1 | 	add	fp, #12
12cfc     A7 16 02 FB | 	rdlong	arg03, fp
12d00     0C 4E 05 F1 | 	add	fp, #12
12d04     A7 18 02 FB | 	rdlong	arg04, fp
12d08     24 4E 85 F1 | 	sub	fp, #36
12d0c     55 00 00 FF 
12d10     FC E5 05 F1 | 	add	objptr, ##44028
12d14     F2 1A 02 FB | 	rdlong	arg05, objptr
12d18     55 00 00 FF 
12d1c     FC E5 85 F1 | 	sub	objptr, ##44028
12d20     C8 48 B0 FD | 	call	#_hg010b_spin2_frame
12d24                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
12d24     6C 00 90 FD | 	jmp	#LR__1481
12d28                 | LR__1480
12d28     A7 12 02 F6 | 	mov	arg01, fp
12d2c     6C DF BF FD | 	call	#_converttoint
12d30     FD 20 02 F6 | 	mov	local02, result1
12d34     0C 4E 05 F1 | 	add	fp, #12
12d38     A7 12 02 F6 | 	mov	arg01, fp
12d3c     0C 4E 85 F1 | 	sub	fp, #12
12d40     58 DF BF FD | 	call	#_converttoint
12d44     FD 22 02 F6 | 	mov	local03, result1
12d48     18 4E 05 F1 | 	add	fp, #24
12d4c     A7 12 02 F6 | 	mov	arg01, fp
12d50     18 4E 85 F1 | 	sub	fp, #24
12d54     44 DF BF FD | 	call	#_converttoint
12d58     FD 1E 02 F6 | 	mov	local01, result1
12d5c     24 4E 05 F1 | 	add	fp, #36
12d60     A7 12 02 F6 | 	mov	arg01, fp
12d64     24 4E 85 F1 | 	sub	fp, #36
12d68     30 DF BF FD | 	call	#_converttoint
12d6c     FD 18 02 F6 | 	mov	arg04, result1
12d70     55 00 00 FF 
12d74     FC E5 05 F1 | 	add	objptr, ##44028
12d78     F2 1A 02 FB | 	rdlong	arg05, objptr
12d7c     55 00 00 FF 
12d80     FC E5 85 F1 | 	sub	objptr, ##44028
12d84     10 13 02 F6 | 	mov	arg01, local02
12d88     11 15 02 F6 | 	mov	arg02, local03
12d8c     0F 17 02 F6 | 	mov	arg03, local01
12d90     58 48 B0 FD | 	call	#_hg010b_spin2_frame
12d94                 | LR__1481
12d94     A7 F0 03 F6 | 	mov	ptra, fp
12d98     B2 00 A0 FD | 	call	#popregs_
12d9c                 | _do_frame_ret
12d9c     2D 00 64 FD | 	ret
12da0                 | 
12da0                 | ' 
12da0                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
12da0                 | ' 
12da0                 | ' ' ------------------------- Print to the screem
12da0                 | ' 
12da0                 | ' sub do_print  
12da0                 | _do_print
12da0     0A 4A 05 F6 | 	mov	COUNT_, #10
12da4     A8 00 A0 FD | 	call	#pushregs_
12da8     00 24 06 F6 | 	mov	local04, #0
12dac     08 6A BF FD | 	call	#_pop
12db0     FD 26 02 F6 | 	mov	local05, result1
12db4     FE 28 02 F6 | 	mov	local06, result2
12db8     FF 2A 02 F6 | 	mov	local07, result3
12dbc     13 1F 02 F6 | 	mov	local01, local05
12dc0     14 21 02 F6 | 	mov	local02, local06
12dc4     15 23 02 F6 | 	mov	local03, local07
12dc8                 | '  
12dc8                 | ' r=0
12dc8                 | ' t1=pop() 
12dc8                 | ' 'print t1.result_type,t1.result.uresult
12dc8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
12dc8     2B 22 0E F2 | 	cmp	local03, #43 wz
12dcc     14 00 90 5D |  if_ne	jmp	#LR__1490
12dd0     0F 13 02 F6 | 	mov	arg01, local01
12dd4     1C 9B BF FD | 	call	#_convertstring
12dd8     FD 26 02 F6 | 	mov	local05, result1
12ddc     13 1F 02 F6 | 	mov	local01, local05
12de0     1F 22 06 F6 | 	mov	local03, #31
12de4                 | LR__1490
12de4                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
12de4     21 22 0E F2 | 	cmp	local03, #33 wz
12de8     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
12dec     20 00 90 5D |  if_ne	jmp	#LR__1491
12df0     11 25 02 F6 | 	mov	local04, local03
12df4     C0 69 BF FD | 	call	#_pop
12df8     FD 26 02 F6 | 	mov	local05, result1
12dfc     FE 28 02 F6 | 	mov	local06, result2
12e00     FF 2A 02 F6 | 	mov	local07, result3
12e04     13 1F 02 F6 | 	mov	local01, local05
12e08     14 21 02 F6 | 	mov	local02, local06
12e0c     15 23 02 F6 | 	mov	local03, local07
12e10                 | LR__1491
12e10                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
12e10     20 22 0E F2 | 	cmp	local03, #32 wz
12e14     11 25 02 A6 |  if_e	mov	local04, local03
12e18                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
12e18     FF 22 0E F2 | 	cmp	local03, #255 wz
12e1c     0C 00 90 5D |  if_ne	jmp	#LR__1492
12e20     0F 13 02 F6 | 	mov	arg01, local01
12e24     64 28 B0 FD | 	call	#_printerror
12e28     30 04 90 FD | 	jmp	#LR__1509
12e2c                 | LR__1492
12e2c                 | ' 
12e2c                 | ' if r=print_mod_comma  then
12e2c     21 24 0E F2 | 	cmp	local04, #33 wz
12e30     AC 01 90 5D |  if_ne	jmp	#LR__1497
12e34                 | '   if t1.result_type=result_int then print t1.result.iresult,
12e34     1C 22 0E F2 | 	cmp	local03, #28 wz
12e38     64 00 90 5D |  if_ne	jmp	#LR__1493
12e3c     00 12 06 F6 | 	mov	arg01, #0
12e40     70 B6 B0 FD | 	call	#__system___getiolock_0423
12e44     FD 12 02 F6 | 	mov	arg01, result1
12e48     64 5D B0 FD | 	call	#__system___lockmem
12e4c     00 28 06 F6 | 	mov	local06, #0
12e50     00 12 06 F6 | 	mov	arg01, #0
12e54     0F 15 02 F6 | 	mov	arg02, local01
12e58     00 16 06 F6 | 	mov	arg03, #0
12e5c     0A 18 06 F6 | 	mov	arg04, #10
12e60     84 6A B0 FD | 	call	#__system___basic_print_integer
12e64     FD 2A 02 F6 | 	mov	local07, result1
12e68     14 27 02 F6 | 	mov	local05, local06
12e6c     15 27 02 F1 | 	add	local05, local07
12e70     00 2C 06 F6 | 	mov	local08, #0
12e74     00 12 06 F6 | 	mov	arg01, #0
12e78     09 14 06 F6 | 	mov	arg02, #9
12e7c     00 16 06 F6 | 	mov	arg03, #0
12e80     C8 69 B0 FD | 	call	#__system___basic_print_char
12e84     FD 2E 02 F6 | 	mov	local09, result1
12e88     FD 26 02 F1 | 	add	local05, result1
12e8c     00 12 06 F6 | 	mov	arg01, #0
12e90     20 B6 B0 FD | 	call	#__system___getiolock_0423
12e94     FD 00 68 FC | 	wrlong	#0, result1
12e98     00 FA 05 F6 | 	mov	result1, #0
12e9c     00 30 06 F6 | 	mov	local10, #0
12ea0                 | LR__1493
12ea0                 | '   if t1.result_type=result_uint then print t1.result.uresult,
12ea0     1D 22 0E F2 | 	cmp	local03, #29 wz
12ea4     64 00 90 5D |  if_ne	jmp	#LR__1494
12ea8     00 12 06 F6 | 	mov	arg01, #0
12eac     04 B6 B0 FD | 	call	#__system___getiolock_0423
12eb0     FD 12 02 F6 | 	mov	arg01, result1
12eb4     F8 5C B0 FD | 	call	#__system___lockmem
12eb8     00 28 06 F6 | 	mov	local06, #0
12ebc     00 12 06 F6 | 	mov	arg01, #0
12ec0     0F 15 02 F6 | 	mov	arg02, local01
12ec4     00 16 06 F6 | 	mov	arg03, #0
12ec8     0A 18 06 F6 | 	mov	arg04, #10
12ecc     58 6A B0 FD | 	call	#__system___basic_print_unsigned
12ed0     FD 2A 02 F6 | 	mov	local07, result1
12ed4     14 27 02 F6 | 	mov	local05, local06
12ed8     15 27 02 F1 | 	add	local05, local07
12edc     00 2C 06 F6 | 	mov	local08, #0
12ee0     00 12 06 F6 | 	mov	arg01, #0
12ee4     09 14 06 F6 | 	mov	arg02, #9
12ee8     00 16 06 F6 | 	mov	arg03, #0
12eec     5C 69 B0 FD | 	call	#__system___basic_print_char
12ef0     FD 2E 02 F6 | 	mov	local09, result1
12ef4     FD 26 02 F1 | 	add	local05, result1
12ef8     00 12 06 F6 | 	mov	arg01, #0
12efc     B4 B5 B0 FD | 	call	#__system___getiolock_0423
12f00     FD 00 68 FC | 	wrlong	#0, result1
12f04     00 FA 05 F6 | 	mov	result1, #0
12f08     00 30 06 F6 | 	mov	local10, #0
12f0c                 | LR__1494
12f0c                 | '   if t1.result_type=result_float then print t1.result.fresult,
12f0c     1E 22 0E F2 | 	cmp	local03, #30 wz
12f10     64 00 90 5D |  if_ne	jmp	#LR__1495
12f14     00 12 06 F6 | 	mov	arg01, #0
12f18     98 B5 B0 FD | 	call	#__system___getiolock_0423
12f1c     FD 12 02 F6 | 	mov	arg01, result1
12f20     8C 5C B0 FD | 	call	#__system___lockmem
12f24     00 28 06 F6 | 	mov	local06, #0
12f28     00 12 06 F6 | 	mov	arg01, #0
12f2c     0F 15 02 F6 | 	mov	arg02, local01
12f30     00 16 06 F6 | 	mov	arg03, #0
12f34     23 18 06 F6 | 	mov	arg04, #35
12f38     78 8D B0 FD | 	call	#__system___basic_print_float
12f3c     FD 2A 02 F6 | 	mov	local07, result1
12f40     14 27 02 F6 | 	mov	local05, local06
12f44     15 27 02 F1 | 	add	local05, local07
12f48     00 2C 06 F6 | 	mov	local08, #0
12f4c     00 12 06 F6 | 	mov	arg01, #0
12f50     09 14 06 F6 | 	mov	arg02, #9
12f54     00 16 06 F6 | 	mov	arg03, #0
12f58     F0 68 B0 FD | 	call	#__system___basic_print_char
12f5c     FD 2E 02 F6 | 	mov	local09, result1
12f60     FD 26 02 F1 | 	add	local05, result1
12f64     00 12 06 F6 | 	mov	arg01, #0
12f68     48 B5 B0 FD | 	call	#__system___getiolock_0423
12f6c     FD 00 68 FC | 	wrlong	#0, result1
12f70     00 FA 05 F6 | 	mov	result1, #0
12f74     00 30 06 F6 | 	mov	local10, #0
12f78                 | LR__1495
12f78                 | '   if t1.result_type=result_string then print t1.result.sresult,
12f78     1F 22 0E F2 | 	cmp	local03, #31 wz
12f7c     60 00 90 5D |  if_ne	jmp	#LR__1496
12f80     00 12 06 F6 | 	mov	arg01, #0
12f84     2C B5 B0 FD | 	call	#__system___getiolock_0423
12f88     FD 12 02 F6 | 	mov	arg01, result1
12f8c     20 5C B0 FD | 	call	#__system___lockmem
12f90     00 28 06 F6 | 	mov	local06, #0
12f94     00 12 06 F6 | 	mov	arg01, #0
12f98     0F 15 02 F6 | 	mov	arg02, local01
12f9c     00 16 06 F6 | 	mov	arg03, #0
12fa0     00 69 B0 FD | 	call	#__system___basic_print_string
12fa4     FD 2A 02 F6 | 	mov	local07, result1
12fa8     14 27 02 F6 | 	mov	local05, local06
12fac     15 27 02 F1 | 	add	local05, local07
12fb0     00 2C 06 F6 | 	mov	local08, #0
12fb4     00 12 06 F6 | 	mov	arg01, #0
12fb8     09 14 06 F6 | 	mov	arg02, #9
12fbc     00 16 06 F6 | 	mov	arg03, #0
12fc0     88 68 B0 FD | 	call	#__system___basic_print_char
12fc4     FD 2E 02 F6 | 	mov	local09, result1
12fc8     FD 26 02 F1 | 	add	local05, result1
12fcc     00 12 06 F6 | 	mov	arg01, #0
12fd0     E0 B4 B0 FD | 	call	#__system___getiolock_0423
12fd4     FD 00 68 FC | 	wrlong	#0, result1
12fd8     00 FA 05 F6 | 	mov	result1, #0
12fdc     00 30 06 F6 | 	mov	local10, #0
12fe0                 | LR__1496
12fe0                 | LR__1497
12fe0                 | ' if r=print_mod_semicolon then 
12fe0     22 24 0E F2 | 	cmp	local04, #34 wz
12fe4     1C 01 90 5D |  if_ne	jmp	#LR__1502
12fe8                 | '   if t1.result_type=result_int then print t1.result.iresult;
12fe8     1C 22 0E F2 | 	cmp	local03, #28 wz
12fec     50 00 90 5D |  if_ne	jmp	#LR__1498
12ff0     00 12 06 F6 | 	mov	arg01, #0
12ff4     BC B4 B0 FD | 	call	#__system___getiolock_0423
12ff8     FD 12 02 F6 | 	mov	arg01, result1
12ffc     B0 5B B0 FD | 	call	#__system___lockmem
13000     00 28 06 F6 | 	mov	local06, #0
13004     00 30 06 F6 | 	mov	local10, #0
13008     0A 2C 06 F6 | 	mov	local08, #10
1300c     00 12 06 F6 | 	mov	arg01, #0
13010     0F 15 02 F6 | 	mov	arg02, local01
13014     00 16 06 F6 | 	mov	arg03, #0
13018     0A 18 06 F6 | 	mov	arg04, #10
1301c     C8 68 B0 FD | 	call	#__system___basic_print_integer
13020     FD 2A 02 F6 | 	mov	local07, result1
13024     14 27 02 F6 | 	mov	local05, local06
13028     15 27 02 F1 | 	add	local05, local07
1302c     00 12 06 F6 | 	mov	arg01, #0
13030     80 B4 B0 FD | 	call	#__system___getiolock_0423
13034     FD 00 68 FC | 	wrlong	#0, result1
13038     00 FA 05 F6 | 	mov	result1, #0
1303c     00 2E 06 F6 | 	mov	local09, #0
13040                 | LR__1498
13040                 | '   if t1.result_type=result_uint then print t1.result.uresult;
13040     1D 22 0E F2 | 	cmp	local03, #29 wz
13044     50 00 90 5D |  if_ne	jmp	#LR__1499
13048     00 12 06 F6 | 	mov	arg01, #0
1304c     64 B4 B0 FD | 	call	#__system___getiolock_0423
13050     FD 12 02 F6 | 	mov	arg01, result1
13054     58 5B B0 FD | 	call	#__system___lockmem
13058     00 28 06 F6 | 	mov	local06, #0
1305c     00 30 06 F6 | 	mov	local10, #0
13060     0A 2C 06 F6 | 	mov	local08, #10
13064     00 12 06 F6 | 	mov	arg01, #0
13068     0F 15 02 F6 | 	mov	arg02, local01
1306c     00 16 06 F6 | 	mov	arg03, #0
13070     0A 18 06 F6 | 	mov	arg04, #10
13074     B0 68 B0 FD | 	call	#__system___basic_print_unsigned
13078     FD 2A 02 F6 | 	mov	local07, result1
1307c     14 27 02 F6 | 	mov	local05, local06
13080     15 27 02 F1 | 	add	local05, local07
13084     00 12 06 F6 | 	mov	arg01, #0
13088     28 B4 B0 FD | 	call	#__system___getiolock_0423
1308c     FD 00 68 FC | 	wrlong	#0, result1
13090     00 FA 05 F6 | 	mov	result1, #0
13094     00 2E 06 F6 | 	mov	local09, #0
13098                 | LR__1499
13098                 | '   if t1.result_type=result_float then print t1.result.fresult;
13098     1E 22 0E F2 | 	cmp	local03, #30 wz
1309c     30 00 90 5D |  if_ne	jmp	#LR__1500
130a0     00 12 06 F6 | 	mov	arg01, #0
130a4     0C B4 B0 FD | 	call	#__system___getiolock_0423
130a8     FD 12 02 F6 | 	mov	arg01, result1
130ac     00 5B B0 FD | 	call	#__system___lockmem
130b0     00 12 06 F6 | 	mov	arg01, #0
130b4     0F 15 02 F6 | 	mov	arg02, local01
130b8     00 16 06 F6 | 	mov	arg03, #0
130bc     23 18 06 F6 | 	mov	arg04, #35
130c0     F0 8B B0 FD | 	call	#__system___basic_print_float
130c4     00 12 06 F6 | 	mov	arg01, #0
130c8     E8 B3 B0 FD | 	call	#__system___getiolock_0423
130cc     FD 00 68 FC | 	wrlong	#0, result1
130d0                 | LR__1500
130d0                 | '   if t1.result_type=result_string then print t1.result.sresult;
130d0     1F 22 0E F2 | 	cmp	local03, #31 wz
130d4     2C 00 90 5D |  if_ne	jmp	#LR__1501
130d8     00 12 06 F6 | 	mov	arg01, #0
130dc     D4 B3 B0 FD | 	call	#__system___getiolock_0423
130e0     FD 12 02 F6 | 	mov	arg01, result1
130e4     C8 5A B0 FD | 	call	#__system___lockmem
130e8     00 12 06 F6 | 	mov	arg01, #0
130ec     0F 15 02 F6 | 	mov	arg02, local01
130f0     00 16 06 F6 | 	mov	arg03, #0
130f4     AC 67 B0 FD | 	call	#__system___basic_print_string
130f8     00 12 06 F6 | 	mov	arg01, #0
130fc     B4 B3 B0 FD | 	call	#__system___getiolock_0423
13100     FD 00 68 FC | 	wrlong	#0, result1
13104                 | LR__1501
13104                 | LR__1502
13104                 | ' if r=0 then 
13104     00 24 0E F2 | 	cmp	local04, #0 wz
13108     1C 01 90 5D |  if_ne	jmp	#LR__1507
1310c                 | '   if t1.result_type=result_int then print t1.result.iresult
1310c     1C 22 0E F2 | 	cmp	local03, #28 wz
13110     40 00 90 5D |  if_ne	jmp	#LR__1503
13114     00 12 06 F6 | 	mov	arg01, #0
13118     98 B3 B0 FD | 	call	#__system___getiolock_0423
1311c     FD 12 02 F6 | 	mov	arg01, result1
13120     8C 5A B0 FD | 	call	#__system___lockmem
13124     00 12 06 F6 | 	mov	arg01, #0
13128     0F 15 02 F6 | 	mov	arg02, local01
1312c     00 16 06 F6 | 	mov	arg03, #0
13130     0A 18 06 F6 | 	mov	arg04, #10
13134     B0 67 B0 FD | 	call	#__system___basic_print_integer
13138     00 12 06 F6 | 	mov	arg01, #0
1313c     0A 14 06 F6 | 	mov	arg02, #10
13140     00 16 06 F6 | 	mov	arg03, #0
13144     04 67 B0 FD | 	call	#__system___basic_print_char
13148     00 12 06 F6 | 	mov	arg01, #0
1314c     64 B3 B0 FD | 	call	#__system___getiolock_0423
13150     FD 00 68 FC | 	wrlong	#0, result1
13154                 | LR__1503
13154                 | '   if t1.result_type=result_uint then print t1.result.uresult
13154     1D 22 0E F2 | 	cmp	local03, #29 wz
13158     40 00 90 5D |  if_ne	jmp	#LR__1504
1315c     00 12 06 F6 | 	mov	arg01, #0
13160     50 B3 B0 FD | 	call	#__system___getiolock_0423
13164     FD 12 02 F6 | 	mov	arg01, result1
13168     44 5A B0 FD | 	call	#__system___lockmem
1316c     00 12 06 F6 | 	mov	arg01, #0
13170     0F 15 02 F6 | 	mov	arg02, local01
13174     00 16 06 F6 | 	mov	arg03, #0
13178     0A 18 06 F6 | 	mov	arg04, #10
1317c     A8 67 B0 FD | 	call	#__system___basic_print_unsigned
13180     00 12 06 F6 | 	mov	arg01, #0
13184     0A 14 06 F6 | 	mov	arg02, #10
13188     00 16 06 F6 | 	mov	arg03, #0
1318c     BC 66 B0 FD | 	call	#__system___basic_print_char
13190     00 12 06 F6 | 	mov	arg01, #0
13194     1C B3 B0 FD | 	call	#__system___getiolock_0423
13198     FD 00 68 FC | 	wrlong	#0, result1
1319c                 | LR__1504
1319c                 | '   if t1.result_type=result_float then print t1.result.fresult
1319c     1E 22 0E F2 | 	cmp	local03, #30 wz
131a0     40 00 90 5D |  if_ne	jmp	#LR__1505
131a4     00 12 06 F6 | 	mov	arg01, #0
131a8     08 B3 B0 FD | 	call	#__system___getiolock_0423
131ac     FD 12 02 F6 | 	mov	arg01, result1
131b0     FC 59 B0 FD | 	call	#__system___lockmem
131b4     00 12 06 F6 | 	mov	arg01, #0
131b8     0F 15 02 F6 | 	mov	arg02, local01
131bc     00 16 06 F6 | 	mov	arg03, #0
131c0     23 18 06 F6 | 	mov	arg04, #35
131c4     EC 8A B0 FD | 	call	#__system___basic_print_float
131c8     00 12 06 F6 | 	mov	arg01, #0
131cc     0A 14 06 F6 | 	mov	arg02, #10
131d0     00 16 06 F6 | 	mov	arg03, #0
131d4     74 66 B0 FD | 	call	#__system___basic_print_char
131d8     00 12 06 F6 | 	mov	arg01, #0
131dc     D4 B2 B0 FD | 	call	#__system___getiolock_0423
131e0     FD 00 68 FC | 	wrlong	#0, result1
131e4                 | LR__1505
131e4                 | '   if t1.result_type=result_string then print t1.result.sresult
131e4     1F 22 0E F2 | 	cmp	local03, #31 wz
131e8     3C 00 90 5D |  if_ne	jmp	#LR__1506
131ec     00 12 06 F6 | 	mov	arg01, #0
131f0     C0 B2 B0 FD | 	call	#__system___getiolock_0423
131f4     FD 12 02 F6 | 	mov	arg01, result1
131f8     B4 59 B0 FD | 	call	#__system___lockmem
131fc     00 12 06 F6 | 	mov	arg01, #0
13200     0F 15 02 F6 | 	mov	arg02, local01
13204     00 16 06 F6 | 	mov	arg03, #0
13208     98 66 B0 FD | 	call	#__system___basic_print_string
1320c     00 12 06 F6 | 	mov	arg01, #0
13210     0A 14 06 F6 | 	mov	arg02, #10
13214     00 16 06 F6 | 	mov	arg03, #0
13218     30 66 B0 FD | 	call	#__system___basic_print_char
1321c     00 12 06 F6 | 	mov	arg01, #0
13220     90 B2 B0 FD | 	call	#__system___getiolock_0423
13224     FD 00 68 FC | 	wrlong	#0, result1
13228                 | LR__1506
13228                 | LR__1507
13228                 | ' if r=print_mod_empty then print
13228     20 24 0E F2 | 	cmp	local04, #32 wz
1322c     2C 00 90 5D |  if_ne	jmp	#LR__1508
13230     00 12 06 F6 | 	mov	arg01, #0
13234     7C B2 B0 FD | 	call	#__system___getiolock_0423
13238     FD 12 02 F6 | 	mov	arg01, result1
1323c     70 59 B0 FD | 	call	#__system___lockmem
13240     00 12 06 F6 | 	mov	arg01, #0
13244     0A 14 06 F6 | 	mov	arg02, #10
13248     00 16 06 F6 | 	mov	arg03, #0
1324c     FC 65 B0 FD | 	call	#__system___basic_print_char
13250     00 12 06 F6 | 	mov	arg01, #0
13254     5C B2 B0 FD | 	call	#__system___getiolock_0423
13258     FD 00 68 FC | 	wrlong	#0, result1
1325c                 | LR__1508
1325c                 | LR__1509
1325c     A7 F0 03 F6 | 	mov	ptra, fp
13260     B2 00 A0 FD | 	call	#popregs_
13264                 | _do_print_ret
13264     2D 00 64 FD | 	ret
13268                 | 
13268                 | ' 
13268                 | ' 
13268                 | ' sub do_paper
13268                 | _do_paper
13268     03 4A 05 F6 | 	mov	COUNT_, #3
1326c     A8 00 A0 FD | 	call	#pushregs_
13270     44 65 BF FD | 	call	#_pop
13274     FD 1E 02 F6 | 	mov	local01, result1
13278     FE 20 02 F6 | 	mov	local02, result2
1327c     FF 22 02 F6 | 	mov	local03, result3
13280                 | ' t1=pop() 
13280                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13280     1E 22 0E F2 | 	cmp	local03, #30 wz
13284     10 00 90 5D |  if_ne	jmp	#LR__1510
13288     0F 13 02 F6 | 	mov	arg01, local01
1328c     00 14 06 F6 | 	mov	arg02, #0
13290     D0 88 B0 FD | 	call	#__system___float_tointeger
13294     FD 1E 02 F6 | 	mov	local01, result1
13298                 | LR__1510
13298                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13298     1F 22 0E F2 | 	cmp	local03, #31 wz
1329c     18 00 90 5D |  if_ne	jmp	#LR__1511
132a0     0F 13 02 F6 | 	mov	arg01, local01
132a4     DC 8B B0 FD | 	call	#__system____builtin_atof
132a8     FD 12 02 F6 | 	mov	arg01, result1
132ac     00 14 06 F6 | 	mov	arg02, #0
132b0     B0 88 B0 FD | 	call	#__system___float_tointeger
132b4     FD 1E 02 F6 | 	mov	local01, result1
132b8                 | LR__1511
132b8     56 00 00 FF 
132bc     0C E4 05 F1 | 	add	objptr, ##44044
132c0     F2 1E 62 FC | 	wrlong	local01, objptr
132c4     04 E4 05 F1 | 	add	objptr, #4
132c8     F2 12 02 FB | 	rdlong	arg01, objptr
132cc                 | ' 
132cc                 | ' write_color:=ff
132cc     55 00 00 FF 
132d0     D3 E5 85 F1 | 	sub	objptr, ##43987
132d4     F2 12 62 FC | 	wrlong	arg01, objptr
132d8                 | ' write_background:=bb
132d8     04 E4 05 F1 | 	add	objptr, #4
132dc     F2 1E 62 FC | 	wrlong	local01, objptr
132e0     41 E4 85 F1 | 	sub	objptr, #65
132e4     A7 F0 03 F6 | 	mov	ptra, fp
132e8     B2 00 A0 FD | 	call	#popregs_
132ec                 | _do_paper_ret
132ec     2D 00 64 FD | 	ret
132f0                 | 
132f0                 | ' 
132f0                 | ' sub do_ink
132f0                 | _do_ink
132f0     03 4A 05 F6 | 	mov	COUNT_, #3
132f4     A8 00 A0 FD | 	call	#pushregs_
132f8     BC 64 BF FD | 	call	#_pop
132fc     FD 1E 02 F6 | 	mov	local01, result1
13300     FE 20 02 F6 | 	mov	local02, result2
13304     FF 22 02 F6 | 	mov	local03, result3
13308                 | ' t1=pop() 
13308                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13308     1E 22 0E F2 | 	cmp	local03, #30 wz
1330c     10 00 90 5D |  if_ne	jmp	#LR__1520
13310     0F 13 02 F6 | 	mov	arg01, local01
13314     00 14 06 F6 | 	mov	arg02, #0
13318     48 88 B0 FD | 	call	#__system___float_tointeger
1331c     FD 1E 02 F6 | 	mov	local01, result1
13320                 | LR__1520
13320                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13320     1F 22 0E F2 | 	cmp	local03, #31 wz
13324     18 00 90 5D |  if_ne	jmp	#LR__1521
13328     0F 13 02 F6 | 	mov	arg01, local01
1332c     54 8B B0 FD | 	call	#__system____builtin_atof
13330     FD 12 02 F6 | 	mov	arg01, result1
13334     00 14 06 F6 | 	mov	arg02, #0
13338     28 88 B0 FD | 	call	#__system___float_tointeger
1333c     FD 1E 02 F6 | 	mov	local01, result1
13340                 | LR__1521
13340     56 00 00 FF 
13344     10 E4 05 F1 | 	add	objptr, ##44048
13348     F2 1E 62 FC | 	wrlong	local01, objptr
1334c     04 E4 85 F1 | 	sub	objptr, #4
13350     F2 14 02 FB | 	rdlong	arg02, objptr
13354                 | ' 
13354                 | ' write_color:=ff
13354     55 00 00 FF 
13358     CF E5 85 F1 | 	sub	objptr, ##43983
1335c     F2 1E 62 FC | 	wrlong	local01, objptr
13360                 | ' write_background:=bb
13360     04 E4 05 F1 | 	add	objptr, #4
13364     F2 14 62 FC | 	wrlong	arg02, objptr
13368     55 00 00 FF 
1336c     CF E5 05 F1 | 	add	objptr, ##43983
13370     F2 12 02 FB | 	rdlong	arg01, objptr
13374     56 00 00 FF 
13378     10 E4 85 F1 | 	sub	objptr, ##44048
1337c     04 35 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
13380     A7 F0 03 F6 | 	mov	ptra, fp
13384     B2 00 A0 FD | 	call	#popregs_
13388                 | _do_ink_ret
13388     2D 00 64 FD | 	ret
1338c                 | 
1338c                 | ' 
1338c                 | ' 
1338c                 | ' sub do_font
1338c                 | _do_font
1338c     03 4A 05 F6 | 	mov	COUNT_, #3
13390     A8 00 A0 FD | 	call	#pushregs_
13394     20 64 BF FD | 	call	#_pop
13398     FD 1E 02 F6 | 	mov	local01, result1
1339c     FE 20 02 F6 | 	mov	local02, result2
133a0     FF 22 02 F6 | 	mov	local03, result3
133a4                 | ' t1=pop() 
133a4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
133a4     1E 22 0E F2 | 	cmp	local03, #30 wz
133a8     10 00 90 5D |  if_ne	jmp	#LR__1530
133ac     0F 13 02 F6 | 	mov	arg01, local01
133b0     00 14 06 F6 | 	mov	arg02, #0
133b4     AC 87 B0 FD | 	call	#__system___float_tointeger
133b8     FD 1E 02 F6 | 	mov	local01, result1
133bc                 | LR__1530
133bc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
133bc     1F 22 0E F2 | 	cmp	local03, #31 wz
133c0     18 00 90 5D |  if_ne	jmp	#LR__1531
133c4     0F 13 02 F6 | 	mov	arg01, local01
133c8     B8 8A B0 FD | 	call	#__system____builtin_atof
133cc     FD 12 02 F6 | 	mov	arg01, result1
133d0     00 14 06 F6 | 	mov	arg02, #0
133d4     8C 87 B0 FD | 	call	#__system___float_tointeger
133d8     FD 1E 02 F6 | 	mov	local01, result1
133dc                 | LR__1531
133dc     56 00 00 FF 
133e0     14 E4 05 F1 | 	add	objptr, ##44052
133e4     F2 1E 62 FC | 	wrlong	local01, objptr
133e8     56 00 00 FF 
133ec     14 E4 85 F1 | 	sub	objptr, ##44052
133f0     02 1E 66 F0 | 	shl	local01, #2
133f4     0F 13 02 F6 | 	mov	arg01, local01
133f8     E8 43 B0 FD | 	call	#_hg010b_spin2_setfontfamily
133fc     A7 F0 03 F6 | 	mov	ptra, fp
13400     B2 00 A0 FD | 	call	#popregs_
13404                 | _do_font_ret
13404     2D 00 64 FD | 	ret
13408                 | 
13408                 | ' 
13408                 | ' sub do_mode
13408                 | _do_mode
13408     04 4A 05 F6 | 	mov	COUNT_, #4
1340c     A8 00 A0 FD | 	call	#pushregs_
13410     A4 63 BF FD | 	call	#_pop
13414     FD 1E 02 F6 | 	mov	local01, result1
13418     FE 20 02 F6 | 	mov	local02, result2
1341c     FF 22 02 F6 | 	mov	local03, result3
13420                 | ' t1=pop() 
13420                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13420     1E 22 0E F2 | 	cmp	local03, #30 wz
13424     10 00 90 5D |  if_ne	jmp	#LR__1540
13428     0F 13 02 F6 | 	mov	arg01, local01
1342c     00 14 06 F6 | 	mov	arg02, #0
13430     30 87 B0 FD | 	call	#__system___float_tointeger
13434     FD 1E 02 F6 | 	mov	local01, result1
13438                 | LR__1540
13438                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13438     1F 22 0E F2 | 	cmp	local03, #31 wz
1343c     18 00 90 5D |  if_ne	jmp	#LR__1541
13440     0F 13 02 F6 | 	mov	arg01, local01
13444     3C 8A B0 FD | 	call	#__system____builtin_atof
13448     FD 12 02 F6 | 	mov	arg01, result1
1344c     00 14 06 F6 | 	mov	arg02, #0
13450     10 87 B0 FD | 	call	#__system___float_tointeger
13454     FD 1E 02 F6 | 	mov	local01, result1
13458                 | LR__1541
13458                 | ' select case t1.result.iresult
13458     0F 25 02 F6 | 	mov	local04, local01
1345c     05 24 26 F3 | 	fle	local04, #5
13460     30 24 62 FD | 	jmprel	local04
13464                 | LR__1542
13464     14 00 90 FD | 	jmp	#LR__1543
13468     A8 00 90 FD | 	jmp	#LR__1544
1346c     10 01 90 FD | 	jmp	#LR__1545
13470     78 01 90 FD | 	jmp	#LR__1546
13474     E0 01 90 FD | 	jmp	#LR__1547
13478     70 02 90 FD | 	jmp	#LR__1548
1347c                 | LR__1543
1347c     56 00 00 FF 
13480     14 E4 05 F1 | 	add	objptr, ##44052
13484     F2 02 68 FC | 	wrlong	#1, objptr
13488     04 E4 85 F1 | 	sub	objptr, #4
1348c     F2 34 69 FC | 	wrlong	#154, objptr
13490     22 00 00 FF 
13494     A4 E5 05 F1 | 	add	objptr, ##17828
13498     F2 02 68 FC | 	wrlong	#1, objptr
1349c     22 00 00 FF 
134a0     A8 E5 85 F1 | 	sub	objptr, ##17832
134a4     F2 26 69 FC | 	wrlong	#147, objptr
134a8     56 00 00 FF 
134ac     0C E4 85 F1 | 	sub	objptr, ##44044
134b0     04 12 06 F6 | 	mov	arg01, #4
134b4     2C 43 B0 FD | 	call	#_hg010b_spin2_setfontfamily
134b8     56 00 00 FF 
134bc     10 E4 05 F1 | 	add	objptr, ##44048
134c0     F2 12 02 FB | 	rdlong	arg01, objptr
134c4     04 E4 85 F1 | 	sub	objptr, #4
134c8     F2 14 02 FB | 	rdlong	arg02, objptr
134cc                 | ' 
134cc                 | ' write_color:=ff
134cc     55 00 00 FF 
134d0     CF E5 85 F1 | 	sub	objptr, ##43983
134d4     F2 12 62 FC | 	wrlong	arg01, objptr
134d8                 | ' write_background:=bb
134d8     04 E4 05 F1 | 	add	objptr, #4
134dc     F2 14 62 FC | 	wrlong	arg02, objptr
134e0     01 00 00 FF 
134e4     00 EA 05 F1 | 	add	ptr__dat__, ##512
134e8     7A 00 00 FF 
134ec     17 E4 05 F1 | 	add	objptr, ##62487
134f0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
134f4     04 E4 85 F1 | 	sub	objptr, #4
134f8     03 00 80 FF 
134fc     F2 28 69 FC | 	wrlong	##1684, objptr
13500     7A 00 00 FF 
13504     54 E4 85 F1 | 	sub	objptr, ##62548
13508     01 00 00 FF 
1350c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
13510     D8 01 90 FD | 	jmp	#LR__1548
13514                 | LR__1544
13514     56 00 00 FF 
13518     14 E4 05 F1 | 	add	objptr, ##44052
1351c     F2 00 68 FC | 	wrlong	#0, objptr
13520     04 E4 85 F1 | 	sub	objptr, #4
13524     F2 2E 68 FC | 	wrlong	#23, objptr
13528     22 00 00 FF 
1352c     A4 E5 05 F1 | 	add	objptr, ##17828
13530     F2 00 68 FC | 	wrlong	#0, objptr
13534     22 00 00 FF 
13538     A8 E5 85 F1 | 	sub	objptr, ##17832
1353c     F2 00 68 FC | 	wrlong	#0, objptr
13540     56 00 00 FF 
13544     0C E4 85 F1 | 	sub	objptr, ##44044
13548     00 12 06 F6 | 	mov	arg01, #0
1354c     94 42 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13550     56 00 00 FF 
13554     10 E4 05 F1 | 	add	objptr, ##44048
13558     F2 12 02 FB | 	rdlong	arg01, objptr
1355c     04 E4 85 F1 | 	sub	objptr, #4
13560     F2 14 02 FB | 	rdlong	arg02, objptr
13564                 | ' 
13564                 | ' write_color:=ff
13564     55 00 00 FF 
13568     CF E5 85 F1 | 	sub	objptr, ##43983
1356c     F2 12 62 FC | 	wrlong	arg01, objptr
13570                 | ' write_background:=bb
13570     04 E4 05 F1 | 	add	objptr, #4
13574     F2 14 62 FC | 	wrlong	arg02, objptr
13578     41 E4 85 F1 | 	sub	objptr, #65
1357c     6C 01 90 FD | 	jmp	#LR__1548
13580                 | LR__1545
13580     56 00 00 FF 
13584     14 E4 05 F1 | 	add	objptr, ##44052
13588     F2 00 68 FC | 	wrlong	#0, objptr
1358c     04 E4 85 F1 | 	sub	objptr, #4
13590     F2 6A 69 FC | 	wrlong	#181, objptr
13594     22 00 00 FF 
13598     A4 E5 05 F1 | 	add	objptr, ##17828
1359c     F2 00 68 FC | 	wrlong	#0, objptr
135a0     22 00 00 FF 
135a4     A8 E5 85 F1 | 	sub	objptr, ##17832
135a8     F2 00 68 FC | 	wrlong	#0, objptr
135ac     56 00 00 FF 
135b0     0C E4 85 F1 | 	sub	objptr, ##44044
135b4     00 12 06 F6 | 	mov	arg01, #0
135b8     28 42 B0 FD | 	call	#_hg010b_spin2_setfontfamily
135bc     56 00 00 FF 
135c0     10 E4 05 F1 | 	add	objptr, ##44048
135c4     F2 12 02 FB | 	rdlong	arg01, objptr
135c8     04 E4 85 F1 | 	sub	objptr, #4
135cc     F2 14 02 FB | 	rdlong	arg02, objptr
135d0                 | ' 
135d0                 | ' write_color:=ff
135d0     55 00 00 FF 
135d4     CF E5 85 F1 | 	sub	objptr, ##43983
135d8     F2 12 62 FC | 	wrlong	arg01, objptr
135dc                 | ' write_background:=bb
135dc     04 E4 05 F1 | 	add	objptr, #4
135e0     F2 14 62 FC | 	wrlong	arg02, objptr
135e4     41 E4 85 F1 | 	sub	objptr, #65
135e8     00 01 90 FD | 	jmp	#LR__1548
135ec                 | LR__1546
135ec     56 00 00 FF 
135f0     14 E4 05 F1 | 	add	objptr, ##44052
135f4     F2 00 68 FC | 	wrlong	#0, objptr
135f8     04 E4 85 F1 | 	sub	objptr, #4
135fc     F2 1E 68 FC | 	wrlong	#15, objptr
13600     22 00 00 FF 
13604     A4 E5 05 F1 | 	add	objptr, ##17828
13608     F2 00 68 FC | 	wrlong	#0, objptr
1360c     22 00 00 FF 
13610     A8 E5 85 F1 | 	sub	objptr, ##17832
13614     F2 00 68 FC | 	wrlong	#0, objptr
13618     56 00 00 FF 
1361c     0C E4 85 F1 | 	sub	objptr, ##44044
13620     00 12 06 F6 | 	mov	arg01, #0
13624     BC 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13628     56 00 00 FF 
1362c     10 E4 05 F1 | 	add	objptr, ##44048
13630     F2 12 02 FB | 	rdlong	arg01, objptr
13634     04 E4 85 F1 | 	sub	objptr, #4
13638     F2 14 02 FB | 	rdlong	arg02, objptr
1363c                 | ' 
1363c                 | ' write_color:=ff
1363c     55 00 00 FF 
13640     CF E5 85 F1 | 	sub	objptr, ##43983
13644     F2 12 62 FC | 	wrlong	arg01, objptr
13648                 | ' write_background:=bb
13648     04 E4 05 F1 | 	add	objptr, #4
1364c     F2 14 62 FC | 	wrlong	arg02, objptr
13650     41 E4 85 F1 | 	sub	objptr, #65
13654     94 00 90 FD | 	jmp	#LR__1548
13658                 | LR__1547
13658     56 00 00 FF 
1365c     14 E4 05 F1 | 	add	objptr, ##44052
13660     F2 02 68 FC | 	wrlong	#1, objptr
13664     04 E4 85 F1 | 	sub	objptr, #4
13668     F2 02 68 FC | 	wrlong	#1, objptr
1366c     22 00 00 FF 
13670     A4 E5 05 F1 | 	add	objptr, ##17828
13674     F2 02 68 FC | 	wrlong	#1, objptr
13678     22 00 00 FF 
1367c     A8 E5 85 F1 | 	sub	objptr, ##17832
13680     F2 1C 68 FC | 	wrlong	#14, objptr
13684     56 00 00 FF 
13688     0C E4 85 F1 | 	sub	objptr, ##44044
1368c     04 12 06 F6 | 	mov	arg01, #4
13690     50 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13694     56 00 00 FF 
13698     10 E4 05 F1 | 	add	objptr, ##44048
1369c     F2 12 02 FB | 	rdlong	arg01, objptr
136a0     04 E4 85 F1 | 	sub	objptr, #4
136a4     F2 14 02 FB | 	rdlong	arg02, objptr
136a8                 | ' 
136a8                 | ' write_color:=ff
136a8     55 00 00 FF 
136ac     CF E5 85 F1 | 	sub	objptr, ##43983
136b0     F2 12 62 FC | 	wrlong	arg01, objptr
136b4                 | ' write_background:=bb
136b4     04 E4 05 F1 | 	add	objptr, #4
136b8     F2 14 62 FC | 	wrlong	arg02, objptr
136bc     07 00 00 FF 
136c0     72 EB 05 F1 | 	add	ptr__dat__, ##3954
136c4     7A 00 00 FF 
136c8     17 E4 05 F1 | 	add	objptr, ##62487
136cc     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
136d0     04 E4 85 F1 | 	sub	objptr, #4
136d4     03 00 80 FF 
136d8     F2 28 69 FC | 	wrlong	##1684, objptr
136dc     7A 00 00 FF 
136e0     54 E4 85 F1 | 	sub	objptr, ##62548
136e4     07 00 00 FF 
136e8     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
136ec                 | LR__1548
136ec     7A 00 00 FF 
136f0     50 E4 05 F1 | 	add	objptr, ##62544
136f4     F2 1E 62 FC | 	wrlong	local01, objptr
136f8     24 00 00 FF 
136fc     40 E4 85 F1 | 	sub	objptr, ##18496
13700     F2 12 02 FB | 	rdlong	arg01, objptr
13704     04 E4 85 F1 | 	sub	objptr, #4
13708     F2 14 02 FB | 	rdlong	arg02, objptr
1370c     56 00 00 FF 
13710     0C E4 85 F1 | 	sub	objptr, ##44044
13714     B4 41 B0 FD | 	call	#_hg010b_spin2_cls
13718     43 01 00 FF 
1371c     71 12 06 F6 | 	mov	arg01, ##@LR__4595
13720                 | ' 
13720                 | ' write(text)
13720     64 44 B0 FD | 	call	#_hg010b_spin2_write
13724                 | ' crlf
13724     C0 45 B0 FD | 	call	#_hg010b_spin2_crlf
13728     10 00 00 FF 
1372c     10 EB 05 F1 | 	add	ptr__dat__, ##8464
13730     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
13734     10 00 00 FF 
13738     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
1373c                 | ' 
1373c                 | ' write(text)
1373c     48 44 B0 FD | 	call	#_hg010b_spin2_write
13740                 | ' crlf
13740     A4 45 B0 FD | 	call	#_hg010b_spin2_crlf
13744     78 00 00 FF 
13748     B0 E5 05 F1 | 	add	objptr, ##61872
1374c     F2 12 02 FB | 	rdlong	arg01, objptr
13750     78 00 00 FF 
13754     B0 E5 85 F1 | 	sub	objptr, ##61872
13758                 | ' 
13758                 | ' write(text)
13758     2C 44 B0 FD | 	call	#_hg010b_spin2_write
1375c                 | ' crlf
1375c     88 45 B0 FD | 	call	#_hg010b_spin2_crlf
13760     A7 F0 03 F6 | 	mov	ptra, fp
13764     B2 00 A0 FD | 	call	#popregs_
13768                 | _do_mode_ret
13768     2D 00 64 FD | 	ret
1376c                 | 
1376c                 | ' 
1376c                 | ' 
1376c                 | ' 
1376c                 | ' sub do_pinwrite
1376c                 | _do_pinwrite
1376c     01 4A 05 F6 | 	mov	COUNT_, #1
13770     A8 00 A0 FD | 	call	#pushregs_
13774     18 F0 07 F1 | 	add	ptra, #24
13778     3C 60 BF FD | 	call	#_pop
1377c     FD 14 02 F6 | 	mov	arg02, result1
13780     FE 12 02 F6 | 	mov	arg01, result2
13784     FF 1E 02 F6 | 	mov	local01, result3
13788     A7 14 62 FC | 	wrlong	arg02, fp
1378c     04 4E 05 F1 | 	add	fp, #4
13790     A7 12 62 FC | 	wrlong	arg01, fp
13794     04 4E 05 F1 | 	add	fp, #4
13798     A7 1E 62 FC | 	wrlong	local01, fp
1379c     08 4E 85 F1 | 	sub	fp, #8
137a0     14 60 BF FD | 	call	#_pop
137a4     FF 1E 02 F6 | 	mov	local01, result3
137a8     0C 4E 05 F1 | 	add	fp, #12
137ac     A7 FA 61 FC | 	wrlong	result1, fp
137b0     04 4E 05 F1 | 	add	fp, #4
137b4     A7 FC 61 FC | 	wrlong	result2, fp
137b8     04 4E 05 F1 | 	add	fp, #4
137bc     A7 1E 62 FC | 	wrlong	local01, fp
137c0     08 4E 85 F1 | 	sub	fp, #8
137c4     A7 12 02 F6 | 	mov	arg01, fp
137c8     0C 4E 85 F1 | 	sub	fp, #12
137cc     CC D4 BF FD | 	call	#_converttoint
137d0     FD 1E 02 F6 | 	mov	local01, result1
137d4     A7 12 02 F6 | 	mov	arg01, fp
137d8     C0 D4 BF FD | 	call	#_converttoint
137dc     FD 14 02 F6 | 	mov	arg02, result1
137e0     0F 13 02 F6 | 	mov	arg01, local01
137e4     7C 55 B0 FD | 	call	#__system___pinwrite
137e8     A7 F0 03 F6 | 	mov	ptra, fp
137ec     B2 00 A0 FD | 	call	#popregs_
137f0                 | _do_pinwrite_ret
137f0     2D 00 64 FD | 	ret
137f4                 | 
137f4                 | ' 
137f4                 | ' sub do_pinfloat
137f4                 | _do_pinfloat
137f4     00 4A 05 F6 | 	mov	COUNT_, #0
137f8     A8 00 A0 FD | 	call	#pushregs_
137fc     0C F0 07 F1 | 	add	ptra, #12
13800     B4 5F BF FD | 	call	#_pop
13804     A7 FA 61 FC | 	wrlong	result1, fp
13808     04 4E 05 F1 | 	add	fp, #4
1380c     A7 FC 61 FC | 	wrlong	result2, fp
13810     04 4E 05 F1 | 	add	fp, #4
13814     A7 FE 61 FC | 	wrlong	result3, fp
13818     08 4E 85 F1 | 	sub	fp, #8
1381c     A7 12 02 F6 | 	mov	arg01, fp
13820     78 D4 BF FD | 	call	#_converttoint
13824     50 FA 61 FD | 	fltl	result1
13828     A7 F0 03 F6 | 	mov	ptra, fp
1382c     B2 00 A0 FD | 	call	#popregs_
13830                 | _do_pinfloat_ret
13830     2D 00 64 FD | 	ret
13834                 | 
13834                 | ' 
13834                 | ' sub do_pinlo
13834                 | _do_pinlo
13834     00 4A 05 F6 | 	mov	COUNT_, #0
13838     A8 00 A0 FD | 	call	#pushregs_
1383c     0C F0 07 F1 | 	add	ptra, #12
13840     74 5F BF FD | 	call	#_pop
13844     A7 FA 61 FC | 	wrlong	result1, fp
13848     04 4E 05 F1 | 	add	fp, #4
1384c     A7 FC 61 FC | 	wrlong	result2, fp
13850     04 4E 05 F1 | 	add	fp, #4
13854     A7 FE 61 FC | 	wrlong	result3, fp
13858     08 4E 85 F1 | 	sub	fp, #8
1385c     A7 12 02 F6 | 	mov	arg01, fp
13860     38 D4 BF FD | 	call	#_converttoint
13864     58 FA 61 FD | 	drvl	result1
13868     A7 F0 03 F6 | 	mov	ptra, fp
1386c     B2 00 A0 FD | 	call	#popregs_
13870                 | _do_pinlo_ret
13870     2D 00 64 FD | 	ret
13874                 | 
13874                 | ' 
13874                 | ' sub do_pinhi
13874                 | _do_pinhi
13874     00 4A 05 F6 | 	mov	COUNT_, #0
13878     A8 00 A0 FD | 	call	#pushregs_
1387c     0C F0 07 F1 | 	add	ptra, #12
13880     34 5F BF FD | 	call	#_pop
13884     A7 FA 61 FC | 	wrlong	result1, fp
13888     04 4E 05 F1 | 	add	fp, #4
1388c     A7 FC 61 FC | 	wrlong	result2, fp
13890     04 4E 05 F1 | 	add	fp, #4
13894     A7 FE 61 FC | 	wrlong	result3, fp
13898     08 4E 85 F1 | 	sub	fp, #8
1389c     A7 12 02 F6 | 	mov	arg01, fp
138a0     F8 D3 BF FD | 	call	#_converttoint
138a4     59 FA 61 FD | 	drvh	result1
138a8     A7 F0 03 F6 | 	mov	ptra, fp
138ac     B2 00 A0 FD | 	call	#popregs_
138b0                 | _do_pinhi_ret
138b0     2D 00 64 FD | 	ret
138b4                 | 
138b4                 | ' 
138b4                 | ' sub do_pintoggle
138b4                 | _do_pintoggle
138b4     00 4A 05 F6 | 	mov	COUNT_, #0
138b8     A8 00 A0 FD | 	call	#pushregs_
138bc     0C F0 07 F1 | 	add	ptra, #12
138c0     F4 5E BF FD | 	call	#_pop
138c4     A7 FA 61 FC | 	wrlong	result1, fp
138c8     04 4E 05 F1 | 	add	fp, #4
138cc     A7 FC 61 FC | 	wrlong	result2, fp
138d0     04 4E 05 F1 | 	add	fp, #4
138d4     A7 FE 61 FC | 	wrlong	result3, fp
138d8     08 4E 85 F1 | 	sub	fp, #8
138dc     A7 12 02 F6 | 	mov	arg01, fp
138e0     B8 D3 BF FD | 	call	#_converttoint
138e4     5F FA 61 FD | 	drvnot	result1
138e8     A7 F0 03 F6 | 	mov	ptra, fp
138ec     B2 00 A0 FD | 	call	#popregs_
138f0                 | _do_pintoggle_ret
138f0     2D 00 64 FD | 	ret
138f4                 | 
138f4                 | ' 
138f4                 | ' 
138f4                 | ' sub do_pinstart
138f4                 | _do_pinstart
138f4     03 4A 05 F6 | 	mov	COUNT_, #3
138f8     A8 00 A0 FD | 	call	#pushregs_
138fc     30 F0 07 F1 | 	add	ptra, #48
13900     B4 5E BF FD | 	call	#_pop
13904     FD 16 02 F6 | 	mov	arg03, result1
13908     FE 14 02 F6 | 	mov	arg02, result2
1390c     FF 18 02 F6 | 	mov	arg04, result3
13910     A7 16 62 FC | 	wrlong	arg03, fp
13914     04 4E 05 F1 | 	add	fp, #4
13918     A7 14 62 FC | 	wrlong	arg02, fp
1391c     04 4E 05 F1 | 	add	fp, #4
13920     A7 18 62 FC | 	wrlong	arg04, fp
13924     08 4E 85 F1 | 	sub	fp, #8
13928     8C 5E BF FD | 	call	#_pop
1392c     FD 16 02 F6 | 	mov	arg03, result1
13930     FE 14 02 F6 | 	mov	arg02, result2
13934     FF 18 02 F6 | 	mov	arg04, result3
13938     0C 4E 05 F1 | 	add	fp, #12
1393c     A7 16 62 FC | 	wrlong	arg03, fp
13940     04 4E 05 F1 | 	add	fp, #4
13944     A7 14 62 FC | 	wrlong	arg02, fp
13948     04 4E 05 F1 | 	add	fp, #4
1394c     A7 18 62 FC | 	wrlong	arg04, fp
13950     14 4E 85 F1 | 	sub	fp, #20
13954     60 5E BF FD | 	call	#_pop
13958     FD 16 02 F6 | 	mov	arg03, result1
1395c     FE 14 02 F6 | 	mov	arg02, result2
13960     FF 18 02 F6 | 	mov	arg04, result3
13964     18 4E 05 F1 | 	add	fp, #24
13968     A7 16 62 FC | 	wrlong	arg03, fp
1396c     04 4E 05 F1 | 	add	fp, #4
13970     A7 14 62 FC | 	wrlong	arg02, fp
13974     04 4E 05 F1 | 	add	fp, #4
13978     A7 18 62 FC | 	wrlong	arg04, fp
1397c     20 4E 85 F1 | 	sub	fp, #32
13980     34 5E BF FD | 	call	#_pop
13984     FF 16 02 F6 | 	mov	arg03, result3
13988     24 4E 05 F1 | 	add	fp, #36
1398c     A7 FA 61 FC | 	wrlong	result1, fp
13990     04 4E 05 F1 | 	add	fp, #4
13994     A7 FC 61 FC | 	wrlong	result2, fp
13998     04 4E 05 F1 | 	add	fp, #4
1399c     A7 16 62 FC | 	wrlong	arg03, fp
139a0     08 4E 85 F1 | 	sub	fp, #8
139a4     A7 12 02 F6 | 	mov	arg01, fp
139a8     24 4E 85 F1 | 	sub	fp, #36
139ac     EC D2 BF FD | 	call	#_converttoint
139b0     FD 1E 02 F6 | 	mov	local01, result1
139b4     18 4E 05 F1 | 	add	fp, #24
139b8     A7 12 02 F6 | 	mov	arg01, fp
139bc     18 4E 85 F1 | 	sub	fp, #24
139c0     D8 D2 BF FD | 	call	#_converttoint
139c4     FD 20 02 F6 | 	mov	local02, result1
139c8     0C 4E 05 F1 | 	add	fp, #12
139cc     A7 12 02 F6 | 	mov	arg01, fp
139d0     0C 4E 85 F1 | 	sub	fp, #12
139d4     C4 D2 BF FD | 	call	#_converttoint
139d8     FD 22 02 F6 | 	mov	local03, result1
139dc     A7 12 02 F6 | 	mov	arg01, fp
139e0     B8 D2 BF FD | 	call	#_converttoint
139e4     40 1E 62 FD | 	dirl	local01
139e8     0F 21 02 FC | 	wrpin	local02, local01
139ec     0F 23 12 FC | 	wxpin	local03, local01
139f0     0F FB 21 FC | 	wypin	result1, local01
139f4     41 1E 62 FD | 	dirh	local01
139f8     A7 F0 03 F6 | 	mov	ptra, fp
139fc     B2 00 A0 FD | 	call	#popregs_
13a00                 | _do_pinstart_ret
13a00     2D 00 64 FD | 	ret
13a04                 | 
13a04                 | ' 
13a04                 | ' 
13a04                 | ' sub do_wrpin
13a04                 | _do_wrpin
13a04     01 4A 05 F6 | 	mov	COUNT_, #1
13a08     A8 00 A0 FD | 	call	#pushregs_
13a0c     18 F0 07 F1 | 	add	ptra, #24
13a10     A4 5D BF FD | 	call	#_pop
13a14     FD 14 02 F6 | 	mov	arg02, result1
13a18     FE 12 02 F6 | 	mov	arg01, result2
13a1c     FF 1E 02 F6 | 	mov	local01, result3
13a20     A7 14 62 FC | 	wrlong	arg02, fp
13a24     04 4E 05 F1 | 	add	fp, #4
13a28     A7 12 62 FC | 	wrlong	arg01, fp
13a2c     04 4E 05 F1 | 	add	fp, #4
13a30     A7 1E 62 FC | 	wrlong	local01, fp
13a34     08 4E 85 F1 | 	sub	fp, #8
13a38     7C 5D BF FD | 	call	#_pop
13a3c     FF 1E 02 F6 | 	mov	local01, result3
13a40     0C 4E 05 F1 | 	add	fp, #12
13a44     A7 FA 61 FC | 	wrlong	result1, fp
13a48     04 4E 05 F1 | 	add	fp, #4
13a4c     A7 FC 61 FC | 	wrlong	result2, fp
13a50     04 4E 05 F1 | 	add	fp, #4
13a54     A7 1E 62 FC | 	wrlong	local01, fp
13a58     08 4E 85 F1 | 	sub	fp, #8
13a5c     A7 12 02 F6 | 	mov	arg01, fp
13a60     0C 4E 85 F1 | 	sub	fp, #12
13a64     34 D2 BF FD | 	call	#_converttoint
13a68     FD 1E 02 F6 | 	mov	local01, result1
13a6c     A7 12 02 F6 | 	mov	arg01, fp
13a70     28 D2 BF FD | 	call	#_converttoint
13a74     0F FB 01 FC | 	wrpin	result1, local01
13a78     A7 F0 03 F6 | 	mov	ptra, fp
13a7c     B2 00 A0 FD | 	call	#popregs_
13a80                 | _do_wrpin_ret
13a80     2D 00 64 FD | 	ret
13a84                 | 
13a84                 | ' 
13a84                 | ' sub do_wxpin
13a84                 | _do_wxpin
13a84     01 4A 05 F6 | 	mov	COUNT_, #1
13a88     A8 00 A0 FD | 	call	#pushregs_
13a8c     18 F0 07 F1 | 	add	ptra, #24
13a90     24 5D BF FD | 	call	#_pop
13a94     FD 14 02 F6 | 	mov	arg02, result1
13a98     FE 12 02 F6 | 	mov	arg01, result2
13a9c     FF 1E 02 F6 | 	mov	local01, result3
13aa0     A7 14 62 FC | 	wrlong	arg02, fp
13aa4     04 4E 05 F1 | 	add	fp, #4
13aa8     A7 12 62 FC | 	wrlong	arg01, fp
13aac     04 4E 05 F1 | 	add	fp, #4
13ab0     A7 1E 62 FC | 	wrlong	local01, fp
13ab4     08 4E 85 F1 | 	sub	fp, #8
13ab8     FC 5C BF FD | 	call	#_pop
13abc     FF 1E 02 F6 | 	mov	local01, result3
13ac0     0C 4E 05 F1 | 	add	fp, #12
13ac4     A7 FA 61 FC | 	wrlong	result1, fp
13ac8     04 4E 05 F1 | 	add	fp, #4
13acc     A7 FC 61 FC | 	wrlong	result2, fp
13ad0     04 4E 05 F1 | 	add	fp, #4
13ad4     A7 1E 62 FC | 	wrlong	local01, fp
13ad8     08 4E 85 F1 | 	sub	fp, #8
13adc     A7 12 02 F6 | 	mov	arg01, fp
13ae0     0C 4E 85 F1 | 	sub	fp, #12
13ae4     B4 D1 BF FD | 	call	#_converttoint
13ae8     FD 1E 02 F6 | 	mov	local01, result1
13aec     A7 12 02 F6 | 	mov	arg01, fp
13af0     A8 D1 BF FD | 	call	#_converttoint
13af4     0F FB 11 FC | 	wxpin	result1, local01
13af8     A7 F0 03 F6 | 	mov	ptra, fp
13afc     B2 00 A0 FD | 	call	#popregs_
13b00                 | _do_wxpin_ret
13b00     2D 00 64 FD | 	ret
13b04                 | 
13b04                 | ' 
13b04                 | ' sub do_wypin
13b04                 | _do_wypin
13b04     01 4A 05 F6 | 	mov	COUNT_, #1
13b08     A8 00 A0 FD | 	call	#pushregs_
13b0c     18 F0 07 F1 | 	add	ptra, #24
13b10     A4 5C BF FD | 	call	#_pop
13b14     FD 14 02 F6 | 	mov	arg02, result1
13b18     FE 12 02 F6 | 	mov	arg01, result2
13b1c     FF 1E 02 F6 | 	mov	local01, result3
13b20     A7 14 62 FC | 	wrlong	arg02, fp
13b24     04 4E 05 F1 | 	add	fp, #4
13b28     A7 12 62 FC | 	wrlong	arg01, fp
13b2c     04 4E 05 F1 | 	add	fp, #4
13b30     A7 1E 62 FC | 	wrlong	local01, fp
13b34     08 4E 85 F1 | 	sub	fp, #8
13b38     7C 5C BF FD | 	call	#_pop
13b3c     FF 1E 02 F6 | 	mov	local01, result3
13b40     0C 4E 05 F1 | 	add	fp, #12
13b44     A7 FA 61 FC | 	wrlong	result1, fp
13b48     04 4E 05 F1 | 	add	fp, #4
13b4c     A7 FC 61 FC | 	wrlong	result2, fp
13b50     04 4E 05 F1 | 	add	fp, #4
13b54     A7 1E 62 FC | 	wrlong	local01, fp
13b58     08 4E 85 F1 | 	sub	fp, #8
13b5c     A7 12 02 F6 | 	mov	arg01, fp
13b60     0C 4E 85 F1 | 	sub	fp, #12
13b64     34 D1 BF FD | 	call	#_converttoint
13b68     FD 1E 02 F6 | 	mov	local01, result1
13b6c     A7 12 02 F6 | 	mov	arg01, fp
13b70     28 D1 BF FD | 	call	#_converttoint
13b74     0F FB 21 FC | 	wypin	result1, local01
13b78     A7 F0 03 F6 | 	mov	ptra, fp
13b7c     B2 00 A0 FD | 	call	#popregs_
13b80                 | _do_wypin_ret
13b80     2D 00 64 FD | 	ret
13b84                 | 
13b84                 | ' 
13b84                 | ' sub do_position
13b84                 | _do_position
13b84     01 4A 05 F6 | 	mov	COUNT_, #1
13b88     A8 00 A0 FD | 	call	#pushregs_
13b8c     18 F0 07 F1 | 	add	ptra, #24
13b90     24 5C BF FD | 	call	#_pop
13b94     FD 14 02 F6 | 	mov	arg02, result1
13b98     FE 12 02 F6 | 	mov	arg01, result2
13b9c     FF 1E 02 F6 | 	mov	local01, result3
13ba0     A7 14 62 FC | 	wrlong	arg02, fp
13ba4     04 4E 05 F1 | 	add	fp, #4
13ba8     A7 12 62 FC | 	wrlong	arg01, fp
13bac     04 4E 05 F1 | 	add	fp, #4
13bb0     A7 1E 62 FC | 	wrlong	local01, fp
13bb4     08 4E 85 F1 | 	sub	fp, #8
13bb8     FC 5B BF FD | 	call	#_pop
13bbc     FF 1E 02 F6 | 	mov	local01, result3
13bc0     0C 4E 05 F1 | 	add	fp, #12
13bc4     A7 FA 61 FC | 	wrlong	result1, fp
13bc8     04 4E 05 F1 | 	add	fp, #4
13bcc     A7 FC 61 FC | 	wrlong	result2, fp
13bd0     04 4E 05 F1 | 	add	fp, #4
13bd4     A7 1E 62 FC | 	wrlong	local01, fp
13bd8     08 4E 85 F1 | 	sub	fp, #8
13bdc     A7 12 02 F6 | 	mov	arg01, fp
13be0     0C 4E 85 F1 | 	sub	fp, #12
13be4     B4 D0 BF FD | 	call	#_converttoint
13be8     FD 1E 02 F6 | 	mov	local01, result1
13bec     A7 12 02 F6 | 	mov	arg01, fp
13bf0     A8 D0 BF FD | 	call	#_converttoint
13bf4     FD 14 02 F6 | 	mov	arg02, result1
13bf8     0F 13 02 F6 | 	mov	arg01, local01
13bfc     24 3C B0 FD | 	call	#_hg010b_spin2_setcursorpos
13c00     A7 F0 03 F6 | 	mov	ptra, fp
13c04     B2 00 A0 FD | 	call	#popregs_
13c08                 | _do_position_ret
13c08     2D 00 64 FD | 	ret
13c0c                 | 
13c0c                 | ' 
13c0c                 | ' sub do_waitms
13c0c                 | _do_waitms
13c0c     01 4A 05 F6 | 	mov	COUNT_, #1
13c10     A8 00 A0 FD | 	call	#pushregs_
13c14     18 F0 07 F1 | 	add	ptra, #24
13c18     9C 5B BF FD | 	call	#_pop
13c1c     A7 FA 61 FC | 	wrlong	result1, fp
13c20     04 4E 05 F1 | 	add	fp, #4
13c24     A7 FC 61 FC | 	wrlong	result2, fp
13c28     04 4E 05 F1 | 	add	fp, #4
13c2c     A7 FE 61 FC | 	wrlong	result3, fp
13c30                 | ' 
13c30                 | ' t1=pop() 'value
13c30                 | ' 
13c30                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
13c30     08 4E 85 F1 | 	sub	fp, #8
13c34     1C FE 0D F2 | 	cmp	result3, #28 wz
13c38     08 4E 05 51 |  if_ne	add	fp, #8
13c3c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
13c40     08 4E 85 51 |  if_ne	sub	fp, #8
13c44     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
13c48     A7 12 02 AB |  if_e	rdlong	arg01, fp
13c4c     0C 4E 05 A1 |  if_e	add	fp, #12
13c50     A7 12 62 AC |  if_e	wrlong	arg01, fp
13c54     0C 4E 85 A1 |  if_e	sub	fp, #12
13c58     14 00 90 AD |  if_e	jmp	#LR__1550
13c5c     A7 12 02 F6 | 	mov	arg01, fp
13c60     38 D0 BF FD | 	call	#_converttoint
13c64     0C 4E 05 F1 | 	add	fp, #12
13c68     A7 FA 61 FC | 	wrlong	result1, fp
13c6c     0C 4E 85 F1 | 	sub	fp, #12
13c70                 | LR__1550
13c70                 | ' if t<0 then return
13c70     0C 4E 05 F1 | 	add	fp, #12
13c74     A7 12 02 FB | 	rdlong	arg01, fp
13c78     0C 4E 85 F1 | 	sub	fp, #12
13c7c     00 12 56 F2 | 	cmps	arg01, #0 wc
13c80     B8 00 90 CD |  if_b	jmp	#LR__1555
13c84                 | ' if t < 5000 then 
13c84     0C 4E 05 F1 | 	add	fp, #12
13c88     A7 12 02 FB | 	rdlong	arg01, fp
13c8c     0C 4E 85 F1 | 	sub	fp, #12
13c90     09 00 00 FF 
13c94     88 13 56 F2 | 	cmps	arg01, ##5000 wc
13c98     14 00 90 3D |  if_ae	jmp	#LR__1551
13c9c     0C 4E 05 F1 | 	add	fp, #12
13ca0     A7 12 02 FB | 	rdlong	arg01, fp
13ca4     0C 4E 85 F1 | 	sub	fp, #12
13ca8     F8 51 B0 FD | 	call	#__system___waitms
13cac     8C 00 90 FD | 	jmp	#LR__1554
13cb0                 | LR__1551
13cb0     10 4E 05 F1 | 	add	fp, #16
13cb4     A7 02 68 FC | 	wrlong	#1, fp
13cb8     04 4E 85 F1 | 	sub	fp, #4
13cbc     A7 12 02 FB | 	rdlong	arg01, fp
13cc0     09 13 52 F6 | 	abs	arg01, arg01 wc
13cc4     09 00 00 FF 
13cc8     88 13 16 FD | 	qdiv	arg01, ##5000
13ccc                 | '   for i=1 to t/5000
13ccc     0C 4E 85 F1 | 	sub	fp, #12
13cd0     18 1E 62 FD | 	getqx	local01
13cd4     0F 1F 82 F6 | 	negc	local01, local01
13cd8     01 1E 06 F1 | 	add	local01, #1
13cdc                 | LR__1552
13cdc     10 4E 05 F1 | 	add	fp, #16
13ce0     A7 12 02 FB | 	rdlong	arg01, fp
13ce4     10 4E 85 F1 | 	sub	fp, #16
13ce8     0F 13 52 F2 | 	cmps	arg01, local01 wc
13cec     28 00 90 3D |  if_ae	jmp	#LR__1553
13cf0     0C 4E 05 F1 | 	add	fp, #12
13cf4     A7 12 02 FB | 	rdlong	arg01, fp
13cf8     0C 4E 85 F1 | 	sub	fp, #12
13cfc     A4 51 B0 FD | 	call	#__system___waitms
13d00     10 4E 05 F1 | 	add	fp, #16
13d04     A7 12 02 FB | 	rdlong	arg01, fp
13d08     01 12 06 F1 | 	add	arg01, #1
13d0c     A7 12 62 FC | 	wrlong	arg01, fp
13d10     10 4E 85 F1 | 	sub	fp, #16
13d14     C4 FF 9F FD | 	jmp	#LR__1552
13d18                 | LR__1553
13d18     0C 4E 05 F1 | 	add	fp, #12
13d1c     A7 1E 02 FB | 	rdlong	local01, fp
13d20     0F 1F 52 F6 | 	abs	local01, local01 wc
13d24     09 00 00 FF 
13d28     88 1F 16 FD | 	qdiv	local01, ##5000
13d2c     0C 4E 85 F1 | 	sub	fp, #12
13d30     19 1E 62 FD | 	getqy	local01
13d34     0F 13 82 F6 | 	negc	arg01, local01
13d38     68 51 B0 FD | 	call	#__system___waitms
13d3c                 | LR__1554
13d3c                 | LR__1555
13d3c     A7 F0 03 F6 | 	mov	ptra, fp
13d40     B2 00 A0 FD | 	call	#popregs_
13d44                 | _do_waitms_ret
13d44     2D 00 64 FD | 	ret
13d48                 | 
13d48                 | ' 
13d48                 | ' sub do_waitvbl
13d48                 | _do_waitvbl
13d48     01 12 06 F6 | 	mov	arg01, #1
13d4c     0C 3B B0 FD | 	call	#_hg010b_spin2_waitvbl
13d50                 | _do_waitvbl_ret
13d50     2D 00 64 FD | 	ret
13d54                 | 
13d54                 | ' 
13d54                 | ' sub do_waitclock
13d54                 | _do_waitclock
13d54     7A 00 00 FF 
13d58     48 E4 05 F1 | 	add	objptr, ##62536
13d5c     F2 00 02 FB | 	rdlong	_var01, objptr
13d60                 | ' c=hkcnt
13d60                 | ' do: loop until hkcnt<>c
13d60                 | LR__1560
13d60     F2 02 02 FB | 	rdlong	_var02, objptr
13d64     00 03 0A F2 | 	cmp	_var02, _var01 wz
13d68     F4 FF 9F AD |  if_e	jmp	#LR__1560
13d6c     7A 00 00 FF 
13d70     48 E4 85 F1 | 	sub	objptr, ##62536
13d74                 | _do_waitclock_ret
13d74     2D 00 64 FD | 	ret
13d78                 | 
13d78                 | ' 
13d78                 | ' sub do_dir
13d78                 | _do_dir
13d78     03 4A 05 F6 | 	mov	COUNT_, #3
13d7c     A8 00 A0 FD | 	call	#pushregs_
13d80     43 01 00 FF 
13d84     72 12 06 F6 | 	mov	arg01, ##@LR__4596
13d88     B0 54 B0 FD | 	call	#__system___chdir
13d8c                 | ' chdir("/sd/bas")       ' set working directory
13d8c                 | ' print "Working directory: "; currentdir$ 
13d8c     00 12 06 F6 | 	mov	arg01, #0
13d90     20 A7 B0 FD | 	call	#__system___getiolock_0423
13d94     FD 12 02 F6 | 	mov	arg01, result1
13d98     14 4E B0 FD | 	call	#__system___lockmem
13d9c     43 01 00 FF 
13da0     7A 14 06 F6 | 	mov	arg02, ##@LR__4597
13da4     00 12 06 F6 | 	mov	arg01, #0
13da8     00 16 06 F6 | 	mov	arg03, #0
13dac     F4 5A B0 FD | 	call	#__system___basic_print_string
13db0     71 00 00 FF 
13db4     68 E4 05 F1 | 	add	objptr, ##57960
13db8     F2 14 02 FB | 	rdlong	arg02, objptr
13dbc     71 00 00 FF 
13dc0     68 E4 85 F1 | 	sub	objptr, ##57960
13dc4     00 12 06 F6 | 	mov	arg01, #0
13dc8     00 16 06 F6 | 	mov	arg03, #0
13dcc     D4 5A B0 FD | 	call	#__system___basic_print_string
13dd0     00 12 06 F6 | 	mov	arg01, #0
13dd4     0A 14 06 F6 | 	mov	arg02, #10
13dd8     00 16 06 F6 | 	mov	arg03, #0
13ddc     6C 5A B0 FD | 	call	#__system___basic_print_char
13de0     00 12 06 F6 | 	mov	arg01, #0
13de4     CC A6 B0 FD | 	call	#__system___getiolock_0423
13de8     FD 00 68 FC | 	wrlong	#0, result1
13dec     43 01 00 FF 
13df0     8E 12 06 F6 | 	mov	arg01, ##@LR__4598
13df4     10 14 06 F6 | 	mov	arg02, #16
13df8     F0 A7 B0 FD | 	call	#__system___basic_dir
13dfc     FD 1E 02 F6 | 	mov	local01, result1
13e00                 | ' 
13e00                 | ' filename=dir$("*", fbDirectory)
13e00                 | ' while filename <> "" and filename <> nil
13e00                 | LR__1570
13e00     00 20 06 F6 | 	mov	local02, #0
13e04     43 01 00 FF 
13e08     90 14 06 F6 | 	mov	arg02, ##@LR__4599
13e0c     0F 13 02 F6 | 	mov	arg01, local01
13e10     C4 4D B0 FD | 	call	#__system___string_cmp
13e14     00 FA 0D F2 | 	cmp	result1, #0 wz
13e18     00 20 26 56 |  if_ne	not	local02, #0
13e1c     00 22 06 F6 | 	mov	local03, #0
13e20     0F 13 02 F6 | 	mov	arg01, local01
13e24     00 14 06 F6 | 	mov	arg02, #0
13e28     AC 4D B0 FD | 	call	#__system___string_cmp
13e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
13e30     00 22 26 56 |  if_ne	not	local03, #0
13e34     11 21 CA F7 | 	test	local02, local03 wz
13e38     64 00 90 AD |  if_e	jmp	#LR__1571
13e3c                 | '   print "[dir] ";filename
13e3c     00 12 06 F6 | 	mov	arg01, #0
13e40     70 A6 B0 FD | 	call	#__system___getiolock_0423
13e44     FD 12 02 F6 | 	mov	arg01, result1
13e48     64 4D B0 FD | 	call	#__system___lockmem
13e4c     43 01 00 FF 
13e50     91 14 06 F6 | 	mov	arg02, ##@LR__4600
13e54     00 12 06 F6 | 	mov	arg01, #0
13e58     00 16 06 F6 | 	mov	arg03, #0
13e5c     44 5A B0 FD | 	call	#__system___basic_print_string
13e60     00 12 06 F6 | 	mov	arg01, #0
13e64     0F 15 02 F6 | 	mov	arg02, local01
13e68     00 16 06 F6 | 	mov	arg03, #0
13e6c     34 5A B0 FD | 	call	#__system___basic_print_string
13e70     00 12 06 F6 | 	mov	arg01, #0
13e74     0A 14 06 F6 | 	mov	arg02, #10
13e78     00 16 06 F6 | 	mov	arg03, #0
13e7c     CC 59 B0 FD | 	call	#__system___basic_print_char
13e80     00 12 06 F6 | 	mov	arg01, #0
13e84     2C A6 B0 FD | 	call	#__system___getiolock_0423
13e88     FD 00 68 FC | 	wrlong	#0, result1
13e8c     00 12 06 F6 | 	mov	arg01, #0
13e90     00 14 06 F6 | 	mov	arg02, #0
13e94     54 A7 B0 FD | 	call	#__system___basic_dir
13e98     FD 1E 02 F6 | 	mov	local01, result1
13e9c     60 FF 9F FD | 	jmp	#LR__1570
13ea0                 | LR__1571
13ea0     43 01 00 FF 
13ea4     98 12 06 F6 | 	mov	arg01, ##@LR__4601
13ea8     21 14 06 F6 | 	mov	arg02, #33
13eac     3C A7 B0 FD | 	call	#__system___basic_dir
13eb0     FD 1E 02 F6 | 	mov	local01, result1
13eb4                 | ' 
13eb4                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
13eb4                 | ' do while filename <> "" and filename <> nil
13eb4                 | LR__1572
13eb4     00 20 06 F6 | 	mov	local02, #0
13eb8     43 01 00 FF 
13ebc     9A 14 06 F6 | 	mov	arg02, ##@LR__4602
13ec0     0F 13 02 F6 | 	mov	arg01, local01
13ec4     10 4D B0 FD | 	call	#__system___string_cmp
13ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
13ecc     00 20 26 56 |  if_ne	not	local02, #0
13ed0     00 22 06 F6 | 	mov	local03, #0
13ed4     0F 13 02 F6 | 	mov	arg01, local01
13ed8     00 14 06 F6 | 	mov	arg02, #0
13edc     F8 4C B0 FD | 	call	#__system___string_cmp
13ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
13ee4     00 22 26 56 |  if_ne	not	local03, #0
13ee8     11 21 CA F7 | 	test	local02, local03 wz
13eec     4C 01 90 AD |  if_e	jmp	#LR__1576
13ef0                 | '   print filename
13ef0     00 12 06 F6 | 	mov	arg01, #0
13ef4     BC A5 B0 FD | 	call	#__system___getiolock_0423
13ef8     FD 12 02 F6 | 	mov	arg01, result1
13efc     B0 4C B0 FD | 	call	#__system___lockmem
13f00     00 12 06 F6 | 	mov	arg01, #0
13f04     0F 15 02 F6 | 	mov	arg02, local01
13f08     00 16 06 F6 | 	mov	arg03, #0
13f0c     94 59 B0 FD | 	call	#__system___basic_print_string
13f10     00 12 06 F6 | 	mov	arg01, #0
13f14     0A 14 06 F6 | 	mov	arg02, #10
13f18     00 16 06 F6 | 	mov	arg03, #0
13f1c     2C 59 B0 FD | 	call	#__system___basic_print_char
13f20     00 12 06 F6 | 	mov	arg01, #0
13f24     8C A5 B0 FD | 	call	#__system___getiolock_0423
13f28     FD 00 68 FC | 	wrlong	#0, result1
13f2c     00 12 06 F6 | 	mov	arg01, #0
13f30     00 14 06 F6 | 	mov	arg02, #0
13f34     B4 A6 B0 FD | 	call	#__system___basic_dir
13f38     FD 1E 02 F6 | 	mov	local01, result1
13f3c                 | '   filename = dir$()      ' continue scan
13f3c                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
13f3c                 | ' return cursor_y
13f3c     3A E4 05 F1 | 	add	objptr, #58
13f40     F2 FA C1 FA | 	rdbyte	result1, objptr
13f44     3A E4 85 F1 | 	sub	objptr, #58
13f48     22 FA 0D F2 | 	cmp	result1, #34 wz
13f4c     64 FF 9F 5D |  if_ne	jmp	#LR__1572
13f50                 | '     print "-----more, press any key";
13f50     00 12 06 F6 | 	mov	arg01, #0
13f54     5C A5 B0 FD | 	call	#__system___getiolock_0423
13f58     FD 12 02 F6 | 	mov	arg01, result1
13f5c     50 4C B0 FD | 	call	#__system___lockmem
13f60     43 01 00 FF 
13f64     9B 14 06 F6 | 	mov	arg02, ##@LR__4603
13f68     00 12 06 F6 | 	mov	arg01, #0
13f6c     00 16 06 F6 | 	mov	arg03, #0
13f70     30 59 B0 FD | 	call	#__system___basic_print_string
13f74     00 12 06 F6 | 	mov	arg01, #0
13f78     38 A5 B0 FD | 	call	#__system___getiolock_0423
13f7c     FD 00 68 FC | 	wrlong	#0, result1
13f80                 | '     do 
13f80                 | LR__1573
13f80     CC 44 B0 FD | 	call	#_usbnew_spin2_get_key
13f84     00 FA 0D F2 | 	cmp	result1, #0 wz
13f88     F4 FF 9F 5D |  if_ne	jmp	#LR__1573
13f8c                 | '     do
13f8c                 | LR__1574
13f8c     C0 44 B0 FD | 	call	#_usbnew_spin2_get_key
13f90     00 FA 0D F2 | 	cmp	result1, #0 wz
13f94     F4 FF 9F AD |  if_e	jmp	#LR__1574
13f98                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
13f98     78 00 00 FF 
13f9c     B4 E5 05 F1 | 	add	objptr, ##61876
13fa0     F2 20 02 FB | 	rdlong	local02, objptr
13fa4     78 00 00 FF 
13fa8     B4 E5 85 F1 | 	sub	objptr, ##61876
13fac     01 20 0E F2 | 	cmp	local02, #1 wz
13fb0     3C 00 90 5D |  if_ne	jmp	#LR__1575
13fb4     7A 00 00 FF 
13fb8     58 E4 05 F1 | 	add	objptr, ##62552
13fbc     F2 14 02 FB | 	rdlong	arg02, objptr
13fc0     04 E4 85 F1 | 	sub	objptr, #4
13fc4     F2 1A 02 FB | 	rdlong	arg05, objptr
13fc8     07 12 06 F6 | 	mov	arg01, #7
13fcc     56 00 00 FF 
13fd0     44 16 06 F6 | 	mov	arg03, ##44100
13fd4     0E 18 C6 F9 | 	decod	arg04, #14
13fd8     01 1C 66 F6 | 	neg	arg06, #1
13fdc     6E 00 00 FF 
13fe0     94 E5 85 F1 | 	sub	objptr, ##56724
13fe4     90 47 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
13fe8     0B 00 00 FF 
13fec     C0 E4 85 F1 | 	sub	objptr, ##5824
13ff0                 | LR__1575
13ff0     00 12 06 F6 | 	mov	arg01, #0
13ff4     23 14 06 F6 | 	mov	arg02, #35
13ff8     28 38 B0 FD | 	call	#_hg010b_spin2_setcursorpos
13ffc                 | '     position 0,35: print "                             ";: position 4,35  
13ffc     00 12 06 F6 | 	mov	arg01, #0
14000     B0 A4 B0 FD | 	call	#__system___getiolock_0423
14004     FD 12 02 F6 | 	mov	arg01, result1
14008     A4 4B B0 FD | 	call	#__system___lockmem
1400c     43 01 00 FF 
14010     B4 14 06 F6 | 	mov	arg02, ##@LR__4604
14014     00 12 06 F6 | 	mov	arg01, #0
14018     00 16 06 F6 | 	mov	arg03, #0
1401c     84 58 B0 FD | 	call	#__system___basic_print_string
14020     00 12 06 F6 | 	mov	arg01, #0
14024     8C A4 B0 FD | 	call	#__system___getiolock_0423
14028     FD 00 68 FC | 	wrlong	#0, result1
1402c     04 12 06 F6 | 	mov	arg01, #4
14030     23 14 06 F6 | 	mov	arg02, #35
14034     EC 37 B0 FD | 	call	#_hg010b_spin2_setcursorpos
14038     78 FE 9F FD | 	jmp	#LR__1572
1403c                 | LR__1576
1403c     A7 F0 03 F6 | 	mov	ptra, fp
14040     B2 00 A0 FD | 	call	#popregs_
14044                 | _do_dir_ret
14044     2D 00 64 FD | 	ret
14048                 | 
14048                 | ' 
14048                 | ' sub do_if
14048                 | _do_if
14048     05 4A 05 F6 | 	mov	COUNT_, #5
1404c     A8 00 A0 FD | 	call	#pushregs_
14050     64 57 BF FD | 	call	#_pop
14054     FD 1E 0A F6 | 	mov	local01, result1 wz
14058     FE 20 02 F6 | 	mov	local02, result2
1405c     FF 22 02 F6 | 	mov	local03, result3
14060                 | ' t1=pop()
14060                 | ' ' if uresult=0, jump over else
14060                 | ' if t1.result.uresult = 0 then 
14060     BC 00 90 5D |  if_ne	jmp	#LR__1582
14064                 | '   for i=lineptr_e to lineptr-1
14064     69 00 00 FF 
14068     54 E4 05 F1 | 	add	objptr, ##53844
1406c     F2 24 02 FB | 	rdlong	local04, objptr
14070     04 E4 85 F1 | 	sub	objptr, #4
14074     F2 26 02 FB | 	rdlong	local05, objptr
14078     69 00 00 FF 
1407c     50 E4 85 F1 | 	sub	objptr, ##53840
14080                 | LR__1580
14080     13 25 52 F2 | 	cmps	local04, local05 wc
14084     78 00 90 3D |  if_ae	jmp	#LR__1581
14088     12 FF 01 F6 | 	mov	result3, local04
1408c     01 FE 65 F0 | 	shl	result3, #1
14090     12 FF 01 F1 | 	add	result3, local04
14094     02 FE 65 F0 | 	shl	result3, #2
14098     66 00 00 FF 
1409c     50 E4 05 F1 | 	add	objptr, ##52304
140a0     F2 FE 01 F1 | 	add	result3, objptr
140a4     FF 1E 02 FB | 	rdlong	local01, result3
140a8     04 FE 05 F1 | 	add	result3, #4
140ac     FF FC 01 FB | 	rdlong	result2, result3
140b0     12 FF 01 F6 | 	mov	result3, local04
140b4     01 FE 65 F0 | 	shl	result3, #1
140b8     12 FF 01 F1 | 	add	result3, local04
140bc     02 FE 65 F0 | 	shl	result3, #2
140c0     F2 FE 01 F1 | 	add	result3, objptr
140c4     08 FE 05 F1 | 	add	result3, #8
140c8     FF FE 01 FB | 	rdlong	result3, result3
140cc     FE 20 02 F6 | 	mov	local02, result2
140d0     FF 22 02 F6 | 	mov	local03, result3
140d4                 | '     t1=compiledline(i)
140d4                 | '     if t1.result_type=token_else then lineptr_e=i : return
140d4     5A 22 0E F2 | 	cmp	local03, #90 wz
140d8     66 00 00 FF 
140dc     50 E4 85 F1 | 	sub	objptr, ##52304
140e0     69 00 00 AF 
140e4     54 E4 05 A1 |  if_e	add	objptr, ##53844
140e8     F2 24 62 AC |  if_e	wrlong	local04, objptr
140ec     69 00 00 AF 
140f0     54 E4 85 A1 |  if_e	sub	objptr, ##53844
140f4     28 00 90 AD |  if_e	jmp	#LR__1583
140f8     01 24 06 F1 | 	add	local04, #1
140fc     80 FF 9F FD | 	jmp	#LR__1580
14100                 | LR__1581
14100     69 00 00 FF 
14104     50 E4 05 F1 | 	add	objptr, ##53840
14108     F2 26 02 FB | 	rdlong	local05, objptr
1410c     01 26 86 F1 | 	sub	local05, #1
14110     04 E4 05 F1 | 	add	objptr, #4
14114     F2 26 62 FC | 	wrlong	local05, objptr
14118     69 00 00 FF 
1411c     54 E4 85 F1 | 	sub	objptr, ##53844
14120                 | LR__1582
14120                 | LR__1583
14120     A7 F0 03 F6 | 	mov	ptra, fp
14124     B2 00 A0 FD | 	call	#popregs_
14128                 | _do_if_ret
14128     2D 00 64 FD | 	ret
1412c                 | 
1412c                 | ' 
1412c                 | ' sub do_else
1412c                 | _do_else
1412c     69 00 00 FF 
14130     50 E4 05 F1 | 	add	objptr, ##53840
14134     F2 00 02 FB | 	rdlong	_var01, objptr
14138     01 00 86 F1 | 	sub	_var01, #1
1413c     04 E4 05 F1 | 	add	objptr, #4
14140     F2 00 62 FC | 	wrlong	_var01, objptr
14144     69 00 00 FF 
14148     54 E4 85 F1 | 	sub	objptr, ##53844
1414c                 | _do_else_ret
1414c     2D 00 64 FD | 	ret
14150                 | 
14150                 | ' 
14150                 | ' sub do_rad
14150                 | _do_rad
14150     7A 00 00 FF 
14154     5C E4 05 F1 | 	add	objptr, ##62556
14158     00 C0 9F FF 
1415c     F2 00 68 FC | 	wrlong	##1065353216, objptr
14160     04 E4 05 F1 | 	add	objptr, #4
14164     00 C0 9F FF 
14168     F2 00 68 FC | 	wrlong	##1065353216, objptr
1416c     7A 00 00 FF 
14170     60 E4 85 F1 | 	sub	objptr, ##62560
14174                 | _do_rad_ret
14174     2D 00 64 FD | 	ret
14178                 | 
14178                 | ' 
14178                 | ' sub do_deg
14178                 | _do_deg
14178     7A 00 00 FF 
1417c     5C E4 05 F1 | 	add	objptr, ##62556
14180     7D 47 9E FF 
14184     F2 6A 68 FC | 	wrlong	##1016003125, objptr
14188     04 E4 05 F1 | 	add	objptr, #4
1418c     97 32 A1 FF 
14190     F2 C2 69 FC | 	wrlong	##1113927393, objptr
14194     7A 00 00 FF 
14198     60 E4 85 F1 | 	sub	objptr, ##62560
1419c                 | _do_deg_ret
1419c     2D 00 64 FD | 	ret
141a0                 | 
141a0                 | ' 
141a0                 | ' sub do_int
141a0                 | _do_int
141a0     00 4A 05 F6 | 	mov	COUNT_, #0
141a4     A8 00 A0 FD | 	call	#pushregs_
141a8     0C F0 07 F1 | 	add	ptra, #12
141ac     08 56 BF FD | 	call	#_pop
141b0     A7 FA 61 FC | 	wrlong	result1, fp
141b4     04 4E 05 F1 | 	add	fp, #4
141b8     A7 FC 61 FC | 	wrlong	result2, fp
141bc     04 4E 05 F1 | 	add	fp, #4
141c0     A7 FE 61 FC | 	wrlong	result3, fp
141c4     08 4E 85 F1 | 	sub	fp, #8
141c8     A7 12 02 F6 | 	mov	arg01, fp
141cc     CC CA BF FD | 	call	#_converttoint
141d0     A7 FA 61 FC | 	wrlong	result1, fp
141d4     08 4E 05 F1 | 	add	fp, #8
141d8     A7 38 68 FC | 	wrlong	#28, fp
141dc     08 4E 85 F1 | 	sub	fp, #8
141e0     A7 12 02 F6 | 	mov	arg01, fp
141e4     68 56 BF FD | 	call	#_push
141e8     A7 F0 03 F6 | 	mov	ptra, fp
141ec     B2 00 A0 FD | 	call	#popregs_
141f0                 | _do_int_ret
141f0     2D 00 64 FD | 	ret
141f4                 | 
141f4                 | ' 
141f4                 | ' sub do_nothing
141f4                 | _do_nothing
141f4                 | _do_nothing_ret
141f4     2D 00 64 FD | 	ret
141f8                 | 
141f8                 | ' 
141f8                 | ' sub do_brun
141f8                 | _do_brun
141f8     08 4A 05 F6 | 	mov	COUNT_, #8
141fc     A8 00 A0 FD | 	call	#pushregs_
14200     B4 55 BF FD | 	call	#_pop
14204     FE 1A 02 F6 | 	mov	arg05, result2
14208     FF 18 02 F6 | 	mov	arg04, result3
1420c     FD 1E 02 F6 | 	mov	local01, result1
14210     0D 21 02 F6 | 	mov	local02, arg05
14214     0C 23 02 F6 | 	mov	local03, arg04
14218                 | ' 
14218                 | ' t1=pop() 
14218                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
14218     2B 22 0E F2 | 	cmp	local03, #43 wz
1421c     10 00 90 5D |  if_ne	jmp	#LR__1590
14220     0F 13 02 F6 | 	mov	arg01, local01
14224     CC 86 BF FD | 	call	#_convertstring
14228     FD 1E 02 F6 | 	mov	local01, result1
1422c     1F 22 06 F6 | 	mov	local03, #31
14230                 | LR__1590
14230                 | ' if t1.result_type=result_string then
14230     1F 22 0E F2 | 	cmp	local03, #31 wz
14234     EC 01 90 5D |  if_ne	jmp	#LR__1594
14238     0F 25 02 F6 | 	mov	local04, local01
1423c                 | '   filename=t1.result.sresult
1423c                 | '   if left$(filename,1)="/" then 
1423c     12 13 02 F6 | 	mov	arg01, local04
14240     01 14 06 F6 | 	mov	arg02, #1
14244     78 69 B0 FD | 	call	#__system__Left_S
14248     FD 12 02 F6 | 	mov	arg01, result1
1424c     43 01 00 FF 
14250     D2 14 06 F6 | 	mov	arg02, ##@LR__4605
14254     80 49 B0 FD | 	call	#__system___string_cmp
14258     00 FA 0D F2 | 	cmp	result1, #0 wz
1425c     12 27 02 A6 |  if_e	mov	local05, local04
14260     14 00 90 AD |  if_e	jmp	#LR__1591
14264     43 01 00 FF 
14268     D4 12 06 F6 | 	mov	arg01, ##@LR__4606
1426c     12 15 02 F6 | 	mov	arg02, local04
14270     98 49 B0 FD | 	call	#__system___string_concat
14274     FD 26 02 F6 | 	mov	local05, result1
14278                 | LR__1591
14278                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
14278                 | '   open fullfilename for input as #9
14278     09 12 06 F6 | 	mov	arg01, #9
1427c     13 15 02 F6 | 	mov	arg02, local05
14280     00 16 06 F6 | 	mov	arg03, #0
14284     2C 55 B0 FD | 	call	#__system___basic_open_string
14288     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1428c     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
14290     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
14294     FD 28 0A F6 | 	mov	local06, result1 wz
14298                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
14298     8C 00 90 AD |  if_e	jmp	#LR__1592
1429c     00 12 06 F6 | 	mov	arg01, #0
142a0     10 A2 B0 FD | 	call	#__system___getiolock_0423
142a4     FD 12 02 F6 | 	mov	arg01, result1
142a8     04 49 B0 FD | 	call	#__system___lockmem
142ac     43 01 00 FF 
142b0     DD 14 06 F6 | 	mov	arg02, ##@LR__4607
142b4     00 12 06 F6 | 	mov	arg01, #0
142b8     00 16 06 F6 | 	mov	arg03, #0
142bc     E4 55 B0 FD | 	call	#__system___basic_print_string
142c0     00 12 06 F6 | 	mov	arg01, #0
142c4     14 15 02 F6 | 	mov	arg02, local06
142c8     00 16 06 F6 | 	mov	arg03, #0
142cc     0A 18 06 F6 | 	mov	arg04, #10
142d0     14 56 B0 FD | 	call	#__system___basic_print_integer
142d4     43 01 00 FF 
142d8     EB 14 06 F6 | 	mov	arg02, ##@LR__4608
142dc     00 12 06 F6 | 	mov	arg01, #0
142e0     00 16 06 F6 | 	mov	arg03, #0
142e4     BC 55 B0 FD | 	call	#__system___basic_print_string
142e8     14 13 02 F6 | 	mov	arg01, local06
142ec     C0 6E B0 FD | 	call	#__system___strerror
142f0     FD 14 02 F6 | 	mov	arg02, result1
142f4     00 12 06 F6 | 	mov	arg01, #0
142f8     00 16 06 F6 | 	mov	arg03, #0
142fc     A4 55 B0 FD | 	call	#__system___basic_print_string
14300     00 12 06 F6 | 	mov	arg01, #0
14304     0A 14 06 F6 | 	mov	arg02, #10
14308     00 16 06 F6 | 	mov	arg03, #0
1430c     3C 55 B0 FD | 	call	#__system___basic_print_char
14310     00 12 06 F6 | 	mov	arg01, #0
14314     9C A1 B0 FD | 	call	#__system___getiolock_0423
14318     FD 00 68 FC | 	wrlong	#0, result1
1431c     09 12 06 F6 | 	mov	arg01, #9
14320     C0 97 B0 FD | 	call	#__system__close
14324     FC 00 90 FD | 	jmp	#LR__1595
14328                 | LR__1592
14328     01 2A 06 F6 | 	mov	local07, #1
1432c     00 2C 06 F6 | 	mov	local08, #0
14330                 | '   do
14330                 | LR__1593
14330                 | '     get #9,pos,block(0),1024,r : pos+=r	
14330     76 00 00 FF 
14334     80 E5 05 F1 | 	add	objptr, ##60800
14338     F2 16 02 F6 | 	mov	arg03, objptr
1433c     76 00 00 FF 
14340     80 E5 85 F1 | 	sub	objptr, ##60800
14344     09 12 06 F6 | 	mov	arg01, #9
14348     15 15 02 F6 | 	mov	arg02, local07
1434c     0A 18 C6 F9 | 	decod	arg04, #10
14350     01 1A 06 F6 | 	mov	arg05, #1
14354     5C 56 B0 FD | 	call	#__system___basic_get
14358     FD 28 02 F6 | 	mov	local06, result1
1435c     FD 2A 02 F1 | 	add	local07, result1
14360     76 00 00 FF 
14364     80 E5 05 F1 | 	add	objptr, ##60800
14368     F2 12 02 F6 | 	mov	arg01, objptr
1436c     16 15 02 F6 | 	mov	arg02, local08
14370     0A 16 C6 F9 | 	decod	arg03, #10
14374     6B 00 00 FF 
14378     C0 E4 85 F1 | 	sub	objptr, ##54976
1437c     DC 3D B0 FD | 	call	#_psram_spin2_write
14380     0B 00 00 FF 
14384     C0 E4 85 F1 | 	sub	objptr, ##5824
14388     14 2D 02 F1 | 	add	local08, local06
1438c     02 00 00 FF 
14390     00 28 0E F2 | 	cmp	local06, ##1024 wz
14394     E0 03 00 AF 
14398     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
1439c     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1593
143a0     55 00 00 FF 
143a4     D0 E5 05 F1 | 	add	objptr, ##43984
143a8     F2 12 02 FB | 	rdlong	arg01, objptr
143ac     03 12 62 FD | 	cogstop	arg01
143b0     04 E4 05 F1 | 	add	objptr, #4
143b4     F2 12 02 FB | 	rdlong	arg01, objptr
143b8     03 12 62 FD | 	cogstop	arg01
143bc     04 E4 05 F1 | 	add	objptr, #4
143c0     F2 12 02 FB | 	rdlong	arg01, objptr
143c4     03 12 62 FD | 	cogstop	arg01
143c8     22 00 00 FF 
143cc     E0 E5 05 F1 | 	add	objptr, ##17888
143d0     F2 12 02 FB | 	rdlong	arg01, objptr
143d4     03 12 62 FD | 	cogstop	arg01
143d8     10 00 00 FF 
143dc     9C EA 05 F1 | 	add	ptr__dat__, ##8348
143e0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
143e4     10 00 00 FF 
143e8     9C EA 85 F1 | 	sub	ptr__dat__, ##8348
143ec     22 00 00 FF 
143f0     D8 E5 85 F1 | 	sub	objptr, ##17880
143f4     1E 2C 06 F6 | 	mov	local08, #30
143f8     28 E4 61 FD | 	setq	objptr
143fc     0A 2D F2 FC | 	coginit	local08, arg02 wc
14400     01 2C 66 C6 |  if_b	neg	local08, #1
14404     24 00 00 FF 
14408     F8 E4 05 F1 | 	add	objptr, ##18680
1440c     F2 2C 62 FC | 	wrlong	local08, objptr
14410     7A 00 00 FF 
14414     D8 E4 85 F1 | 	sub	objptr, ##62680
14418     00 12 06 F6 | 	mov	arg01, #0
1441c     01 12 62 FD | 	cogid	arg01
14420     03 12 62 FD | 	cogstop	arg01
14424                 | LR__1594
14424                 | LR__1595
14424     A7 F0 03 F6 | 	mov	ptra, fp
14428     B2 00 A0 FD | 	call	#popregs_
1442c                 | _do_brun_ret
1442c     2D 00 64 FD | 	ret
14430                 | 
14430                 | ' 
14430                 | ' 
14430                 | ' sub do_mouse
14430                 | _do_mouse
14430     84 53 BF FD | 	call	#_pop
14434     00 FA 4D F2 | 	cmps	result1, #0 wz
14438                 | ' 
14438                 | ' t1=pop()
14438                 | ' 
14438                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
14438     14 00 90 5D |  if_ne	jmp	#LR__1600
1443c     10 12 06 F6 | 	mov	arg01, #16
14440     00 14 06 F6 | 	mov	arg02, #0
14444     00 16 06 F6 | 	mov	arg03, #0
14448     C8 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
1444c     10 00 90 FD | 	jmp	#LR__1601
14450                 | LR__1600
14450     10 12 06 F6 | 	mov	arg01, #16
14454     20 14 06 F6 | 	mov	arg02, #32
14458     20 16 06 F6 | 	mov	arg03, #32
1445c     B4 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14460                 | LR__1601
14460                 | _do_mouse_ret
14460     2D 00 64 FD | 	ret
14464                 | 
14464                 | ' 
14464                 | ' sub do_cursor
14464                 | _do_cursor
14464     50 53 BF FD | 	call	#_pop
14468     00 FA 4D F2 | 	cmps	result1, #0 wz
1446c                 | ' 
1446c                 | ' t1=pop()
1446c                 | ' 
1446c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
1446c     14 00 90 5D |  if_ne	jmp	#LR__1610
14470     11 12 06 F6 | 	mov	arg01, #17
14474     00 14 06 F6 | 	mov	arg02, #0
14478     00 16 06 F6 | 	mov	arg03, #0
1447c     94 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14480     10 00 90 FD | 	jmp	#LR__1611
14484                 | LR__1610
14484     11 12 06 F6 | 	mov	arg01, #17
14488     08 14 06 F6 | 	mov	arg02, #8
1448c     10 16 06 F6 | 	mov	arg03, #16
14490     80 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14494                 | LR__1611
14494                 | _do_cursor_ret
14494     2D 00 64 FD | 	ret
14498                 | 
14498                 | ' 
14498                 | ' 
14498                 | ' sub do_click
14498                 | _do_click
14498     1C 53 BF FD | 	call	#_pop
1449c     00 FA 4D F2 | 	cmps	result1, #0 wz
144a0                 | ' 
144a0                 | ' t1=pop()
144a0                 | ' 
144a0                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
144a0     78 00 00 AF 
144a4     B4 E5 05 A1 |  if_e	add	objptr, ##61876
144a8     F2 00 68 AC |  if_e	wrlong	#0, objptr
144ac     78 00 00 FF 
144b0     B4 E5 C5 F3 | 	sumz	objptr, ##61876
144b4     F2 02 68 5C |  if_ne	wrlong	#1, objptr
144b8     78 00 00 5F 
144bc     B4 E5 85 51 |  if_ne	sub	objptr, ##61876
144c0                 | _do_click_ret
144c0     2D 00 64 FD | 	ret
144c4                 | 
144c4                 | ' 
144c4                 | ' 
144c4                 | ' sub do_beep
144c4                 | _do_beep
144c4     02 4A 05 F6 | 	mov	COUNT_, #2
144c8     A8 00 A0 FD | 	call	#pushregs_
144cc     20 F0 07 F1 | 	add	ptra, #32
144d0     E4 52 BF FD | 	call	#_pop
144d4     FD 1E 02 F6 | 	mov	local01, result1
144d8     FE 1C 02 F6 | 	mov	arg06, result2
144dc     FF 20 02 F6 | 	mov	local02, result3
144e0     0C 4E 05 F1 | 	add	fp, #12
144e4     A7 1E 62 FC | 	wrlong	local01, fp
144e8     04 4E 05 F1 | 	add	fp, #4
144ec     A7 1C 62 FC | 	wrlong	arg06, fp
144f0     04 4E 05 F1 | 	add	fp, #4
144f4     A7 20 62 FC | 	wrlong	local02, fp
144f8     14 4E 85 F1 | 	sub	fp, #20
144fc     B8 52 BF FD | 	call	#_pop
14500     A7 FA 61 FC | 	wrlong	result1, fp
14504     04 4E 05 F1 | 	add	fp, #4
14508     A7 FC 61 FC | 	wrlong	result2, fp
1450c     04 4E 05 F1 | 	add	fp, #4
14510     A7 FE 61 FC | 	wrlong	result3, fp
14514                 | ' 
14514                 | ' 
14514                 | ' 
14514                 | ' t2=pop()
14514                 | ' t1=pop()
14514                 | ' 
14514                 | ' 
14514                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
14514     08 4E 85 F1 | 	sub	fp, #8
14518     1C FE 0D F2 | 	cmp	result3, #28 wz
1451c     08 4E 05 51 |  if_ne	add	fp, #8
14520     A7 20 02 5B |  if_ne	rdlong	local02, fp
14524     08 4E 85 51 |  if_ne	sub	fp, #8
14528     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
1452c     A7 1E 02 AB |  if_e	rdlong	local01, fp
14530     18 4E 05 A1 |  if_e	add	fp, #24
14534     A7 1E 62 AC |  if_e	wrlong	local01, fp
14538     18 4E 85 A1 |  if_e	sub	fp, #24
1453c     14 00 90 AD |  if_e	jmp	#LR__1620
14540     A7 12 02 F6 | 	mov	arg01, fp
14544     54 C7 BF FD | 	call	#_converttoint
14548     18 4E 05 F1 | 	add	fp, #24
1454c     A7 FA 61 FC | 	wrlong	result1, fp
14550     18 4E 85 F1 | 	sub	fp, #24
14554                 | LR__1620
14554     1C 4E 05 F1 | 	add	fp, #28
14558     A7 FE 48 FC | 	wrbyte	#127, fp
1455c     01 4E 05 F1 | 	add	fp, #1
14560     A7 00 49 FC | 	wrbyte	#128, fp
14564     01 4E 85 F1 | 	sub	fp, #1
14568     A7 14 02 F6 | 	mov	arg02, fp
1456c     04 4E 85 F1 | 	sub	fp, #4
14570     A7 16 02 FB | 	rdlong	arg03, fp
14574     18 4E 85 F1 | 	sub	fp, #24
14578     01 16 66 F0 | 	shl	arg03, #1
1457c     07 12 06 F6 | 	mov	arg01, #7
14580     0E 18 C6 F9 | 	decod	arg04, #14
14584     02 1A 06 F6 | 	mov	arg05, #2
14588     00 1C 06 F6 | 	mov	arg06, #0
1458c     0B 00 00 FF 
14590     C0 E4 05 F1 | 	add	objptr, ##5824
14594     7C 42 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
14598     0B 00 00 FF 
1459c     C0 E4 85 F1 | 	sub	objptr, ##5824
145a0     0C 4E 05 F1 | 	add	fp, #12
145a4     A7 12 02 F6 | 	mov	arg01, fp
145a8     0C 4E 85 F1 | 	sub	fp, #12
145ac     A0 52 BF FD | 	call	#_push
145b0     58 F6 BF FD | 	call	#_do_waitms
145b4     07 12 06 F6 | 	mov	arg01, #7
145b8     0B 00 00 FF 
145bc     C0 E4 05 F1 | 	add	objptr, ##5824
145c0     04 43 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
145c4     0B 00 00 FF 
145c8     C0 E4 85 F1 | 	sub	objptr, ##5824
145cc     A7 F0 03 F6 | 	mov	ptra, fp
145d0     B2 00 A0 FD | 	call	#popregs_
145d4                 | _do_beep_ret
145d4     2D 00 64 FD | 	ret
145d8                 | 
145d8                 | ' 
145d8                 | ' sub do_no_command
145d8                 | _do_no_command
145d8     17 12 06 F6 | 	mov	arg01, #23
145dc     AC 10 B0 FD | 	call	#_printerror
145e0                 | _do_no_command_ret
145e0     2D 00 64 FD | 	ret
145e4                 | 
145e4                 | ' 
145e4                 | ' sub do_negative
145e4                 | _do_negative
145e4     02 4A 05 F6 | 	mov	COUNT_, #2
145e8     A8 00 A0 FD | 	call	#pushregs_
145ec     0C F0 07 F1 | 	add	ptra, #12
145f0     C4 51 BF FD | 	call	#_pop
145f4     FF 1E 02 F6 | 	mov	local01, result3
145f8     A7 FA 61 FC | 	wrlong	result1, fp
145fc     04 4E 05 F1 | 	add	fp, #4
14600     A7 FC 61 FC | 	wrlong	result2, fp
14604     04 4E 05 F1 | 	add	fp, #4
14608     A7 1E 62 FC | 	wrlong	local01, fp
1460c                 | ' t1=pop()
1460c                 | ' if t1.result_type=result_int then 
1460c     08 4E 85 F1 | 	sub	fp, #8
14610     1C 1E 0E F2 | 	cmp	local01, #28 wz
14614     A7 20 02 AB |  if_e	rdlong	local02, fp
14618     10 1F 62 A6 |  if_e	neg	local01, local02
1461c     A7 1E 62 AC |  if_e	wrlong	local01, fp
14620     5C 00 90 AD |  if_e	jmp	#LR__1632
14624     08 4E 05 F1 | 	add	fp, #8
14628     A7 1E 02 FB | 	rdlong	local01, fp
1462c     08 4E 85 F1 | 	sub	fp, #8
14630     1D 1E 0E F2 | 	cmp	local01, #29 wz
14634     1C 00 90 5D |  if_ne	jmp	#LR__1630
14638     A7 20 02 FB | 	rdlong	local02, fp
1463c     10 1F 62 F6 | 	neg	local01, local02
14640     A7 1E 62 FC | 	wrlong	local01, fp
14644     08 4E 05 F1 | 	add	fp, #8
14648     A7 38 68 FC | 	wrlong	#28, fp
1464c     08 4E 85 F1 | 	sub	fp, #8
14650     2C 00 90 FD | 	jmp	#LR__1631
14654                 | LR__1630
14654     08 4E 05 F1 | 	add	fp, #8
14658     A7 1E 02 FB | 	rdlong	local01, fp
1465c     08 4E 85 F1 | 	sub	fp, #8
14660     1E 1E 0E F2 | 	cmp	local01, #30 wz
14664     A7 FA 01 AB |  if_e	rdlong	result1, fp
14668     1F FA E5 A4 |  if_e	bitnot	result1, #31
1466c     A7 FA 61 AC |  if_e	wrlong	result1, fp
14670     08 4E 05 51 |  if_ne	add	fp, #8
14674     A7 FE 69 5C |  if_ne	wrlong	#255, fp
14678     08 4E 85 51 |  if_ne	sub	fp, #8
1467c     A7 50 68 5C |  if_ne	wrlong	#40, fp
14680                 | LR__1631
14680                 | LR__1632
14680     A7 12 02 F6 | 	mov	arg01, fp
14684     C8 51 BF FD | 	call	#_push
14688     A7 F0 03 F6 | 	mov	ptra, fp
1468c     B2 00 A0 FD | 	call	#popregs_
14690                 | _do_negative_ret
14690     2D 00 64 FD | 	ret
14694                 | 
14694                 | ' 
14694                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
14694                 | ' 
14694                 | ' ''----------------------------------------------------------------------------------------------------
14694                 | ' ''------------------ Initialization procedures -------------------------------------------------------
14694                 | ' ''----------------------------------------------------------------------------------------------------
14694                 | ' 
14694                 | ' ''--------------------------- Command function pointers
14694                 | ' 
14694                 | ' sub init_commands
14694                 | _init_commands
14694                 | ' 
14694                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
14694     00 00 06 F6 | 	mov	_var01, #0
14698     97 16 48 FB | 	callpa	#(@LR__1641-@LR__1640)>>2,fcache_load_ptr_
1469c                 | LR__1640
1469c     00 FB 01 F6 | 	mov	result1, _var01
146a0     02 FA 65 F0 | 	shl	result1, #2
146a4     62 00 00 FF 
146a8     34 E4 05 F1 | 	add	objptr, ##50228
146ac     F2 FA 01 F1 | 	add	result1, objptr
146b0     62 00 00 FF 
146b4     34 E4 85 F1 | 	sub	objptr, ##50228
146b8     FD E4 61 FC | 	wrlong	objptr, result1
146bc     01 00 06 F1 | 	add	_var01, #1
146c0     00 01 56 F2 | 	cmps	_var01, #256 wc
146c4     D4 FF 9F CD |  if_b	jmp	#LR__1640
146c8                 | LR__1641
146c8     F2 FA 01 F6 | 	mov	result1, objptr
146cc     14 FA 25 F4 | 	bith	result1, #20
146d0     62 00 00 FF 
146d4     38 E4 05 F1 | 	add	objptr, ##50232
146d8     F2 FA 61 FC | 	wrlong	result1, objptr
146dc     62 00 00 FF 
146e0     38 E4 85 F1 | 	sub	objptr, ##50232
146e4     F2 FA 01 F6 | 	mov	result1, objptr
146e8     15 FA 25 F4 | 	bith	result1, #21
146ec     62 00 00 FF 
146f0     3C E4 05 F1 | 	add	objptr, ##50236
146f4     F2 FA 61 FC | 	wrlong	result1, objptr
146f8     62 00 00 FF 
146fc     3C E4 85 F1 | 	sub	objptr, ##50236
14700     F2 FA 01 F6 | 	mov	result1, objptr
14704     34 FA 25 F4 | 	bith	result1, #52
14708     62 00 00 FF 
1470c     40 E4 05 F1 | 	add	objptr, ##50240
14710     F2 FA 61 FC | 	wrlong	result1, objptr
14714     62 00 00 FF 
14718     40 E4 85 F1 | 	sub	objptr, ##50240
1471c     F2 FA 01 F6 | 	mov	result1, objptr
14720     16 FA 25 F4 | 	bith	result1, #22
14724     62 00 00 FF 
14728     48 E4 05 F1 | 	add	objptr, ##50248
1472c     F2 FA 61 FC | 	wrlong	result1, objptr
14730     62 00 00 FF 
14734     48 E4 85 F1 | 	sub	objptr, ##50248
14738     F2 FA 01 F6 | 	mov	result1, objptr
1473c     00 28 00 FF 
14740     00 FA 45 F5 | 	or	result1, ##5242880
14744     62 00 00 FF 
14748     4C E4 05 F1 | 	add	objptr, ##50252
1474c     F2 FA 61 FC | 	wrlong	result1, objptr
14750     62 00 00 FF 
14754     4C E4 85 F1 | 	sub	objptr, ##50252
14758     F2 FA 01 F6 | 	mov	result1, objptr
1475c     35 FA 25 F4 | 	bith	result1, #53
14760     62 00 00 FF 
14764     50 E4 05 F1 | 	add	objptr, ##50256
14768     F2 FA 61 FC | 	wrlong	result1, objptr
1476c     62 00 00 FF 
14770     50 E4 85 F1 | 	sub	objptr, ##50256
14774     F2 FA 01 F6 | 	mov	result1, objptr
14778     54 FA 25 F4 | 	bith	result1, #84
1477c     62 00 00 FF 
14780     54 E4 05 F1 | 	add	objptr, ##50260
14784     F2 FA 61 FC | 	wrlong	result1, objptr
14788     62 00 00 FF 
1478c     54 E4 85 F1 | 	sub	objptr, ##50260
14790     F2 FA 01 F6 | 	mov	result1, objptr
14794     17 FA 25 F4 | 	bith	result1, #23
14798     62 00 00 FF 
1479c     58 E4 05 F1 | 	add	objptr, ##50264
147a0     F2 FA 61 FC | 	wrlong	result1, objptr
147a4     62 00 00 FF 
147a8     58 E4 85 F1 | 	sub	objptr, ##50264
147ac     F2 FA 01 F6 | 	mov	result1, objptr
147b0     00 48 00 FF 
147b4     00 FA 45 F5 | 	or	result1, ##9437184
147b8     62 00 00 FF 
147bc     5C E4 05 F1 | 	add	objptr, ##50268
147c0     F2 FA 61 FC | 	wrlong	result1, objptr
147c4     62 00 00 FF 
147c8     5C E4 85 F1 | 	sub	objptr, ##50268
147cc     F2 FA 01 F6 | 	mov	result1, objptr
147d0     00 50 00 FF 
147d4     00 FA 45 F5 | 	or	result1, ##10485760
147d8     62 00 00 FF 
147dc     60 E4 05 F1 | 	add	objptr, ##50272
147e0     F2 FA 61 FC | 	wrlong	result1, objptr
147e4     62 00 00 FF 
147e8     60 E4 85 F1 | 	sub	objptr, ##50272
147ec     F2 FA 01 F6 | 	mov	result1, objptr
147f0     00 58 00 FF 
147f4     00 FA 45 F5 | 	or	result1, ##11534336
147f8     62 00 00 FF 
147fc     64 E4 05 F1 | 	add	objptr, ##50276
14800     F2 FA 61 FC | 	wrlong	result1, objptr
14804     62 00 00 FF 
14808     64 E4 85 F1 | 	sub	objptr, ##50276
1480c     F2 FA 01 F6 | 	mov	result1, objptr
14810     36 FA 25 F4 | 	bith	result1, #54
14814     62 00 00 FF 
14818     78 E4 05 F1 | 	add	objptr, ##50296
1481c     F2 FA 61 FC | 	wrlong	result1, objptr
14820     62 00 00 FF 
14824     78 E4 85 F1 | 	sub	objptr, ##50296
14828     F2 FA 01 F6 | 	mov	result1, objptr
1482c     00 68 00 FF 
14830     00 FA 45 F5 | 	or	result1, ##13631488
14834     62 00 00 FF 
14838     A8 E4 05 F1 | 	add	objptr, ##50344
1483c     F2 FA 61 FC | 	wrlong	result1, objptr
14840     62 00 00 FF 
14844     A8 E4 85 F1 | 	sub	objptr, ##50344
14848     F2 FA 01 F6 | 	mov	result1, objptr
1484c     00 68 00 FF 
14850     00 FA 45 F5 | 	or	result1, ##13631488
14854     62 00 00 FF 
14858     A4 E4 05 F1 | 	add	objptr, ##50340
1485c     F2 FA 61 FC | 	wrlong	result1, objptr
14860     62 00 00 FF 
14864     A4 E4 85 F1 | 	sub	objptr, ##50340
14868     F2 FA 01 F6 | 	mov	result1, objptr
1486c     00 68 00 FF 
14870     00 FA 45 F5 | 	or	result1, ##13631488
14874     62 00 00 FF 
14878     AC E4 05 F1 | 	add	objptr, ##50348
1487c     F2 FA 61 FC | 	wrlong	result1, objptr
14880     62 00 00 FF 
14884     AC E4 85 F1 | 	sub	objptr, ##50348
14888     F2 FA 01 F6 | 	mov	result1, objptr
1488c     00 68 00 FF 
14890     00 FA 45 F5 | 	or	result1, ##13631488
14894     62 00 00 FF 
14898     B0 E4 05 F1 | 	add	objptr, ##50352
1489c     F2 FA 61 FC | 	wrlong	result1, objptr
148a0     62 00 00 FF 
148a4     B0 E4 85 F1 | 	sub	objptr, ##50352
148a8     F2 FA 01 F6 | 	mov	result1, objptr
148ac     00 68 00 FF 
148b0     00 FA 45 F5 | 	or	result1, ##13631488
148b4     62 00 00 FF 
148b8     E0 E4 05 F1 | 	add	objptr, ##50400
148bc     F2 FA 61 FC | 	wrlong	result1, objptr
148c0     62 00 00 FF 
148c4     E0 E4 85 F1 | 	sub	objptr, ##50400
148c8     F2 FA 01 F6 | 	mov	result1, objptr
148cc     55 FA 25 F4 | 	bith	result1, #85
148d0     62 00 00 FF 
148d4     90 E4 05 F1 | 	add	objptr, ##50320
148d8     F2 FA 61 FC | 	wrlong	result1, objptr
148dc     62 00 00 FF 
148e0     90 E4 85 F1 | 	sub	objptr, ##50320
148e4     F2 FA 01 F6 | 	mov	result1, objptr
148e8     00 68 00 FF 
148ec     00 FA 45 F5 | 	or	result1, ##13631488
148f0     62 00 00 FF 
148f4     B4 E4 05 F1 | 	add	objptr, ##50356
148f8     F2 FA 61 FC | 	wrlong	result1, objptr
148fc     62 00 00 FF 
14900     B4 E4 85 F1 | 	sub	objptr, ##50356
14904     F2 FA 01 F6 | 	mov	result1, objptr
14908     00 68 00 FF 
1490c     00 FA 45 F5 | 	or	result1, ##13631488
14910     62 00 00 FF 
14914     B8 E4 05 F1 | 	add	objptr, ##50360
14918     F2 FA 61 FC | 	wrlong	result1, objptr
1491c     62 00 00 FF 
14920     B8 E4 85 F1 | 	sub	objptr, ##50360
14924     F2 FA 01 F6 | 	mov	result1, objptr
14928     00 68 00 FF 
1492c     00 FA 45 F5 | 	or	result1, ##13631488
14930     62 00 00 FF 
14934     BC E4 05 F1 | 	add	objptr, ##50364
14938     F2 FA 61 FC | 	wrlong	result1, objptr
1493c     62 00 00 FF 
14940     BC E4 85 F1 | 	sub	objptr, ##50364
14944     F2 FA 01 F6 | 	mov	result1, objptr
14948     74 FA 25 F4 | 	bith	result1, #116
1494c     62 00 00 FF 
14950     34 E5 05 F1 | 	add	objptr, ##50484
14954     F2 FA 61 FC | 	wrlong	result1, objptr
14958     62 00 00 FF 
1495c     34 E5 85 F1 | 	sub	objptr, ##50484
14960     F2 FA 01 F6 | 	mov	result1, objptr
14964     18 FA 25 F4 | 	bith	result1, #24
14968     62 00 00 FF 
1496c     38 E5 05 F1 | 	add	objptr, ##50488
14970     F2 FA 61 FC | 	wrlong	result1, objptr
14974     62 00 00 FF 
14978     38 E5 85 F1 | 	sub	objptr, ##50488
1497c     F2 FA 01 F6 | 	mov	result1, objptr
14980     00 88 00 FF 
14984     00 FA 45 F5 | 	or	result1, ##17825792
14988     62 00 00 FF 
1498c     3C E5 05 F1 | 	add	objptr, ##50492
14990     F2 FA 61 FC | 	wrlong	result1, objptr
14994     62 00 00 FF 
14998     3C E5 85 F1 | 	sub	objptr, ##50492
1499c     F2 FA 01 F6 | 	mov	result1, objptr
149a0     00 90 00 FF 
149a4     00 FA 45 F5 | 	or	result1, ##18874368
149a8     62 00 00 FF 
149ac     40 E5 05 F1 | 	add	objptr, ##50496
149b0     F2 FA 61 FC | 	wrlong	result1, objptr
149b4     62 00 00 FF 
149b8     40 E5 85 F1 | 	sub	objptr, ##50496
149bc     F2 FA 01 F6 | 	mov	result1, objptr
149c0     00 98 00 FF 
149c4     00 FA 45 F5 | 	or	result1, ##19922944
149c8     62 00 00 FF 
149cc     44 E5 05 F1 | 	add	objptr, ##50500
149d0     F2 FA 61 FC | 	wrlong	result1, objptr
149d4     62 00 00 FF 
149d8     44 E5 85 F1 | 	sub	objptr, ##50500
149dc     F2 FA 01 F6 | 	mov	result1, objptr
149e0     00 A0 00 FF 
149e4     00 FA 45 F5 | 	or	result1, ##20971520
149e8     62 00 00 FF 
149ec     48 E5 05 F1 | 	add	objptr, ##50504
149f0     F2 FA 61 FC | 	wrlong	result1, objptr
149f4     62 00 00 FF 
149f8     48 E5 85 F1 | 	sub	objptr, ##50504
149fc     F2 FA 01 F6 | 	mov	result1, objptr
14a00     00 A8 00 FF 
14a04     00 FA 45 F5 | 	or	result1, ##22020096
14a08     62 00 00 FF 
14a0c     4C E5 05 F1 | 	add	objptr, ##50508
14a10     F2 FA 61 FC | 	wrlong	result1, objptr
14a14     62 00 00 FF 
14a18     4C E5 85 F1 | 	sub	objptr, ##50508
14a1c     F2 FA 01 F6 | 	mov	result1, objptr
14a20     00 B0 00 FF 
14a24     00 FA 45 F5 | 	or	result1, ##23068672
14a28     62 00 00 FF 
14a2c     50 E5 05 F1 | 	add	objptr, ##50512
14a30     F2 FA 61 FC | 	wrlong	result1, objptr
14a34     62 00 00 FF 
14a38     50 E5 85 F1 | 	sub	objptr, ##50512
14a3c     F2 FA 01 F6 | 	mov	result1, objptr
14a40     00 B8 00 FF 
14a44     00 FA 45 F5 | 	or	result1, ##24117248
14a48     62 00 00 FF 
14a4c     54 E5 05 F1 | 	add	objptr, ##50516
14a50     F2 FA 61 FC | 	wrlong	result1, objptr
14a54     62 00 00 FF 
14a58     54 E5 85 F1 | 	sub	objptr, ##50516
14a5c     F2 FA 01 F6 | 	mov	result1, objptr
14a60     37 FA 25 F4 | 	bith	result1, #55
14a64     62 00 00 FF 
14a68     58 E5 05 F1 | 	add	objptr, ##50520
14a6c     F2 FA 61 FC | 	wrlong	result1, objptr
14a70     62 00 00 FF 
14a74     58 E5 85 F1 | 	sub	objptr, ##50520
14a78     F2 FA 01 F6 | 	mov	result1, objptr
14a7c     00 C8 00 FF 
14a80     00 FA 45 F5 | 	or	result1, ##26214400
14a84     62 00 00 FF 
14a88     5C E5 05 F1 | 	add	objptr, ##50524
14a8c     F2 FA 61 FC | 	wrlong	result1, objptr
14a90     62 00 00 FF 
14a94     5C E5 85 F1 | 	sub	objptr, ##50524
14a98     F2 FA 01 F6 | 	mov	result1, objptr
14a9c     00 D0 00 FF 
14aa0     00 FA 45 F5 | 	or	result1, ##27262976
14aa4     62 00 00 FF 
14aa8     60 E5 05 F1 | 	add	objptr, ##50528
14aac     F2 FA 61 FC | 	wrlong	result1, objptr
14ab0     62 00 00 FF 
14ab4     60 E5 85 F1 | 	sub	objptr, ##50528
14ab8     F2 FA 01 F6 | 	mov	result1, objptr
14abc     00 D8 00 FF 
14ac0     00 FA 45 F5 | 	or	result1, ##28311552
14ac4     62 00 00 FF 
14ac8     64 E5 05 F1 | 	add	objptr, ##50532
14acc     F2 FA 61 FC | 	wrlong	result1, objptr
14ad0     62 00 00 FF 
14ad4     64 E5 85 F1 | 	sub	objptr, ##50532
14ad8     F2 FA 01 F6 | 	mov	result1, objptr
14adc     56 FA 25 F4 | 	bith	result1, #86
14ae0     62 00 00 FF 
14ae4     68 E5 05 F1 | 	add	objptr, ##50536
14ae8     F2 FA 61 FC | 	wrlong	result1, objptr
14aec     62 00 00 FF 
14af0     68 E5 85 F1 | 	sub	objptr, ##50536
14af4     F2 FA 01 F6 | 	mov	result1, objptr
14af8     00 E8 00 FF 
14afc     00 FA 45 F5 | 	or	result1, ##30408704
14b00     64 00 00 FF 
14b04     30 E4 05 F1 | 	add	objptr, ##51248
14b08     F2 FA 61 FC | 	wrlong	result1, objptr
14b0c     64 00 00 FF 
14b10     30 E4 85 F1 | 	sub	objptr, ##51248
14b14     F2 FA 01 F6 | 	mov	result1, objptr
14b18     75 FA 25 F4 | 	bith	result1, #117
14b1c     62 00 00 FF 
14b20     6C E5 05 F1 | 	add	objptr, ##50540
14b24     F2 FA 61 FC | 	wrlong	result1, objptr
14b28     62 00 00 FF 
14b2c     6C E5 85 F1 | 	sub	objptr, ##50540
14b30     F2 FA 01 F6 | 	mov	result1, objptr
14b34     94 FA 25 F4 | 	bith	result1, #148
14b38     62 00 00 FF 
14b3c     80 E5 05 F1 | 	add	objptr, ##50560
14b40     F2 FA 61 FC | 	wrlong	result1, objptr
14b44     62 00 00 FF 
14b48     80 E5 85 F1 | 	sub	objptr, ##50560
14b4c     F2 FA 01 F6 | 	mov	result1, objptr
14b50     19 FA 25 F4 | 	bith	result1, #25
14b54     62 00 00 FF 
14b58     70 E5 05 F1 | 	add	objptr, ##50544
14b5c     F2 FA 61 FC | 	wrlong	result1, objptr
14b60     62 00 00 FF 
14b64     70 E5 85 F1 | 	sub	objptr, ##50544
14b68     F2 FA 01 F6 | 	mov	result1, objptr
14b6c     00 08 01 FF 
14b70     00 FA 45 F5 | 	or	result1, ##34603008
14b74     62 00 00 FF 
14b78     8C E4 05 F1 | 	add	objptr, ##50316
14b7c     F2 FA 61 FC | 	wrlong	result1, objptr
14b80     62 00 00 FF 
14b84     8C E4 85 F1 | 	sub	objptr, ##50316
14b88     F2 FA 01 F6 | 	mov	result1, objptr
14b8c     00 10 01 FF 
14b90     00 FA 45 F5 | 	or	result1, ##35651584
14b94     62 00 00 FF 
14b98     74 E5 05 F1 | 	add	objptr, ##50548
14b9c     F2 FA 61 FC | 	wrlong	result1, objptr
14ba0     62 00 00 FF 
14ba4     74 E5 85 F1 | 	sub	objptr, ##50548
14ba8     F2 FA 01 F6 | 	mov	result1, objptr
14bac     00 18 01 FF 
14bb0     00 FA 45 F5 | 	or	result1, ##36700160
14bb4     62 00 00 FF 
14bb8     78 E5 05 F1 | 	add	objptr, ##50552
14bbc     F2 FA 61 FC | 	wrlong	result1, objptr
14bc0     62 00 00 FF 
14bc4     78 E5 85 F1 | 	sub	objptr, ##50552
14bc8     F2 FA 01 F6 | 	mov	result1, objptr
14bcc     00 20 01 FF 
14bd0     00 FA 45 F5 | 	or	result1, ##37748736
14bd4     62 00 00 FF 
14bd8     7C E5 05 F1 | 	add	objptr, ##50556
14bdc     F2 FA 61 FC | 	wrlong	result1, objptr
14be0     62 00 00 FF 
14be4     7C E5 85 F1 | 	sub	objptr, ##50556
14be8     F2 FA 01 F6 | 	mov	result1, objptr
14bec     00 28 01 FF 
14bf0     00 FA 45 F5 | 	or	result1, ##38797312
14bf4     62 00 00 FF 
14bf8     88 E5 05 F1 | 	add	objptr, ##50568
14bfc     F2 FA 61 FC | 	wrlong	result1, objptr
14c00     62 00 00 FF 
14c04     88 E5 85 F1 | 	sub	objptr, ##50568
14c08     F2 FA 01 F6 | 	mov	result1, objptr
14c0c     00 30 01 FF 
14c10     00 FA 45 F5 | 	or	result1, ##39845888
14c14     62 00 00 FF 
14c18     8C E5 05 F1 | 	add	objptr, ##50572
14c1c     F2 FA 61 FC | 	wrlong	result1, objptr
14c20     62 00 00 FF 
14c24     8C E5 85 F1 | 	sub	objptr, ##50572
14c28     F2 FA 01 F6 | 	mov	result1, objptr
14c2c     00 38 01 FF 
14c30     00 FA 45 F5 | 	or	result1, ##40894464
14c34     62 00 00 FF 
14c38     90 E5 05 F1 | 	add	objptr, ##50576
14c3c     F2 FA 61 FC | 	wrlong	result1, objptr
14c40     62 00 00 FF 
14c44     90 E5 85 F1 | 	sub	objptr, ##50576
14c48     F2 FA 01 F6 | 	mov	result1, objptr
14c4c     00 40 01 FF 
14c50     00 FA 45 F5 | 	or	result1, ##41943040
14c54     62 00 00 FF 
14c58     94 E5 05 F1 | 	add	objptr, ##50580
14c5c     F2 FA 61 FC | 	wrlong	result1, objptr
14c60     62 00 00 FF 
14c64     94 E5 85 F1 | 	sub	objptr, ##50580
14c68     F2 FA 01 F6 | 	mov	result1, objptr
14c6c     00 48 01 FF 
14c70     00 FA 45 F5 | 	or	result1, ##42991616
14c74     62 00 00 FF 
14c78     9C E5 05 F1 | 	add	objptr, ##50588
14c7c     F2 FA 61 FC | 	wrlong	result1, objptr
14c80     62 00 00 FF 
14c84     9C E5 85 F1 | 	sub	objptr, ##50588
14c88     F2 FA 01 F6 | 	mov	result1, objptr
14c8c     00 50 01 FF 
14c90     00 FA 45 F5 | 	or	result1, ##44040192
14c94     62 00 00 FF 
14c98     A0 E5 05 F1 | 	add	objptr, ##50592
14c9c     F2 FA 61 FC | 	wrlong	result1, objptr
14ca0     62 00 00 FF 
14ca4     A0 E5 85 F1 | 	sub	objptr, ##50592
14ca8     F2 FA 01 F6 | 	mov	result1, objptr
14cac     00 58 01 FF 
14cb0     00 FA 45 F5 | 	or	result1, ##45088768
14cb4     62 00 00 FF 
14cb8     A0 E4 05 F1 | 	add	objptr, ##50336
14cbc     F2 FA 61 FC | 	wrlong	result1, objptr
14cc0     62 00 00 FF 
14cc4     A0 E4 85 F1 | 	sub	objptr, ##50336
14cc8     F2 FA 01 F6 | 	mov	result1, objptr
14ccc     00 60 01 FF 
14cd0     00 FA 45 F5 | 	or	result1, ##46137344
14cd4     62 00 00 FF 
14cd8     D0 E4 05 F1 | 	add	objptr, ##50384
14cdc     F2 FA 61 FC | 	wrlong	result1, objptr
14ce0     62 00 00 FF 
14ce4     D0 E4 85 F1 | 	sub	objptr, ##50384
14ce8     F2 FA 01 F6 | 	mov	result1, objptr
14cec     00 68 01 FF 
14cf0     00 FA 45 F5 | 	or	result1, ##47185920
14cf4     62 00 00 FF 
14cf8     CC E4 05 F1 | 	add	objptr, ##50380
14cfc     F2 FA 61 FC | 	wrlong	result1, objptr
14d00     62 00 00 FF 
14d04     CC E4 85 F1 | 	sub	objptr, ##50380
14d08     F2 FA 01 F6 | 	mov	result1, objptr
14d0c     00 70 01 FF 
14d10     00 FA 45 F5 | 	or	result1, ##48234496
14d14     62 00 00 FF 
14d18     70 E4 05 F1 | 	add	objptr, ##50288
14d1c     F2 FA 61 FC | 	wrlong	result1, objptr
14d20     62 00 00 FF 
14d24     70 E4 85 F1 | 	sub	objptr, ##50288
14d28     F2 FA 01 F6 | 	mov	result1, objptr
14d2c     00 78 01 FF 
14d30     00 FA 45 F5 | 	or	result1, ##49283072
14d34     62 00 00 FF 
14d38     74 E4 05 F1 | 	add	objptr, ##50292
14d3c     F2 FA 61 FC | 	wrlong	result1, objptr
14d40     62 00 00 FF 
14d44     74 E4 85 F1 | 	sub	objptr, ##50292
14d48     F2 FA 01 F6 | 	mov	result1, objptr
14d4c     38 FA 25 F4 | 	bith	result1, #56
14d50     62 00 00 FF 
14d54     DC E4 05 F1 | 	add	objptr, ##50396
14d58     F2 FA 61 FC | 	wrlong	result1, objptr
14d5c     62 00 00 FF 
14d60     DC E4 85 F1 | 	sub	objptr, ##50396
14d64     F2 FA 01 F6 | 	mov	result1, objptr
14d68     00 88 01 FF 
14d6c     00 FA 45 F5 | 	or	result1, ##51380224
14d70     62 00 00 FF 
14d74     84 E5 05 F1 | 	add	objptr, ##50564
14d78     F2 FA 61 FC | 	wrlong	result1, objptr
14d7c     62 00 00 FF 
14d80     84 E5 85 F1 | 	sub	objptr, ##50564
14d84     F2 FA 01 F6 | 	mov	result1, objptr
14d88     00 90 01 FF 
14d8c     00 FA 45 F5 | 	or	result1, ##52428800
14d90     62 00 00 FF 
14d94     98 E5 05 F1 | 	add	objptr, ##50584
14d98     F2 FA 61 FC | 	wrlong	result1, objptr
14d9c     62 00 00 FF 
14da0     98 E5 85 F1 | 	sub	objptr, ##50584
14da4     F2 FA 01 F6 | 	mov	result1, objptr
14da8     00 98 01 FF 
14dac     00 FA 45 F5 | 	or	result1, ##53477376
14db0     62 00 00 FF 
14db4     A4 E5 05 F1 | 	add	objptr, ##50596
14db8     F2 FA 61 FC | 	wrlong	result1, objptr
14dbc     62 00 00 FF 
14dc0     A4 E5 85 F1 | 	sub	objptr, ##50596
14dc4     F2 FA 01 F6 | 	mov	result1, objptr
14dc8     00 A0 01 FF 
14dcc     00 FA 45 F5 | 	or	result1, ##54525952
14dd0     62 00 00 FF 
14dd4     A8 E5 05 F1 | 	add	objptr, ##50600
14dd8     F2 FA 61 FC | 	wrlong	result1, objptr
14ddc     62 00 00 FF 
14de0     A8 E5 85 F1 | 	sub	objptr, ##50600
14de4     F2 FA 01 F6 | 	mov	result1, objptr
14de8     00 A8 01 FF 
14dec     00 FA 45 F5 | 	or	result1, ##55574528
14df0     62 00 00 FF 
14df4     AC E5 05 F1 | 	add	objptr, ##50604
14df8     F2 FA 61 FC | 	wrlong	result1, objptr
14dfc     62 00 00 FF 
14e00     AC E5 85 F1 | 	sub	objptr, ##50604
14e04     F2 FA 01 F6 | 	mov	result1, objptr
14e08     00 B0 01 FF 
14e0c     00 FA 45 F5 | 	or	result1, ##56623104
14e10     62 00 00 FF 
14e14     B0 E5 05 F1 | 	add	objptr, ##50608
14e18     F2 FA 61 FC | 	wrlong	result1, objptr
14e1c     62 00 00 FF 
14e20     B0 E5 85 F1 | 	sub	objptr, ##50608
14e24     F2 FA 01 F6 | 	mov	result1, objptr
14e28     00 B8 01 FF 
14e2c     00 FA 45 F5 | 	or	result1, ##57671680
14e30     62 00 00 FF 
14e34     B4 E5 05 F1 | 	add	objptr, ##50612
14e38     F2 FA 61 FC | 	wrlong	result1, objptr
14e3c     62 00 00 FF 
14e40     B4 E5 85 F1 | 	sub	objptr, ##50612
14e44     F2 FA 01 F6 | 	mov	result1, objptr
14e48     57 FA 25 F4 | 	bith	result1, #87
14e4c     62 00 00 FF 
14e50     B8 E5 05 F1 | 	add	objptr, ##50616
14e54     F2 FA 61 FC | 	wrlong	result1, objptr
14e58     62 00 00 FF 
14e5c     B8 E5 85 F1 | 	sub	objptr, ##50616
14e60     F2 FA 01 F6 | 	mov	result1, objptr
14e64     94 FA 25 F4 | 	bith	result1, #148
14e68     62 00 00 FF 
14e6c     80 E5 05 F1 | 	add	objptr, ##50560
14e70     F2 FA 61 FC | 	wrlong	result1, objptr
14e74     62 00 00 FF 
14e78     80 E5 85 F1 | 	sub	objptr, ##50560
14e7c     F2 FA 01 F6 | 	mov	result1, objptr
14e80     00 C8 01 FF 
14e84     00 FA 45 F5 | 	or	result1, ##59768832
14e88     62 00 00 FF 
14e8c     C0 E5 05 F1 | 	add	objptr, ##50624
14e90     F2 FA 61 FC | 	wrlong	result1, objptr
14e94     62 00 00 FF 
14e98     C0 E5 85 F1 | 	sub	objptr, ##50624
14e9c     F2 FA 01 F6 | 	mov	result1, objptr
14ea0     00 D0 01 FF 
14ea4     00 FA 45 F5 | 	or	result1, ##60817408
14ea8     62 00 00 FF 
14eac     BC E5 05 F1 | 	add	objptr, ##50620
14eb0     F2 FA 61 FC | 	wrlong	result1, objptr
14eb4     62 00 00 FF 
14eb8     BC E5 85 F1 | 	sub	objptr, ##50620
14ebc     F2 FA 01 F6 | 	mov	result1, objptr
14ec0     00 D8 01 FF 
14ec4     00 FA 45 F5 | 	or	result1, ##61865984
14ec8     62 00 00 FF 
14ecc     D4 E5 05 F1 | 	add	objptr, ##50644
14ed0     F2 FA 61 FC | 	wrlong	result1, objptr
14ed4     62 00 00 FF 
14ed8     D4 E5 85 F1 | 	sub	objptr, ##50644
14edc     F2 FA 01 F6 | 	mov	result1, objptr
14ee0     76 FA 25 F4 | 	bith	result1, #118
14ee4     62 00 00 FF 
14ee8     D8 E5 05 F1 | 	add	objptr, ##50648
14eec     F2 FA 61 FC | 	wrlong	result1, objptr
14ef0     62 00 00 FF 
14ef4     D8 E5 85 F1 | 	sub	objptr, ##50648
14ef8     F2 FA 01 F6 | 	mov	result1, objptr
14efc     00 E8 01 FF 
14f00     00 FA 45 F5 | 	or	result1, ##63963136
14f04     62 00 00 FF 
14f08     C4 E5 05 F1 | 	add	objptr, ##50628
14f0c     F2 FA 61 FC | 	wrlong	result1, objptr
14f10     62 00 00 FF 
14f14     C4 E5 85 F1 | 	sub	objptr, ##50628
14f18     F2 FA 01 F6 | 	mov	result1, objptr
14f1c     95 FA 25 F4 | 	bith	result1, #149
14f20     62 00 00 FF 
14f24     C8 E5 05 F1 | 	add	objptr, ##50632
14f28     F2 FA 61 FC | 	wrlong	result1, objptr
14f2c     62 00 00 FF 
14f30     C8 E5 85 F1 | 	sub	objptr, ##50632
14f34     F2 FA 01 F6 | 	mov	result1, objptr
14f38     B4 FA 25 F4 | 	bith	result1, #180
14f3c     62 00 00 FF 
14f40     CC E5 05 F1 | 	add	objptr, ##50636
14f44     F2 FA 61 FC | 	wrlong	result1, objptr
14f48     62 00 00 FF 
14f4c     CC E5 85 F1 | 	sub	objptr, ##50636
14f50     F2 FA 01 F6 | 	mov	result1, objptr
14f54     1A FA 25 F4 | 	bith	result1, #26
14f58     62 00 00 FF 
14f5c     D0 E5 05 F1 | 	add	objptr, ##50640
14f60     F2 FA 61 FC | 	wrlong	result1, objptr
14f64     62 00 00 FF 
14f68     D0 E5 85 F1 | 	sub	objptr, ##50640
14f6c     F2 FA 01 F6 | 	mov	result1, objptr
14f70     00 08 02 FF 
14f74     00 FA 45 F5 | 	or	result1, ##68157440
14f78     62 00 00 FF 
14f7c     E0 E5 05 F1 | 	add	objptr, ##50656
14f80     F2 FA 61 FC | 	wrlong	result1, objptr
14f84     62 00 00 FF 
14f88     E0 E5 85 F1 | 	sub	objptr, ##50656
14f8c     F2 FA 01 F6 | 	mov	result1, objptr
14f90     00 10 02 FF 
14f94     00 FA 45 F5 | 	or	result1, ##69206016
14f98     62 00 00 FF 
14f9c     DC E5 05 F1 | 	add	objptr, ##50652
14fa0     F2 FA 61 FC | 	wrlong	result1, objptr
14fa4     62 00 00 FF 
14fa8     DC E5 85 F1 | 	sub	objptr, ##50652
14fac     F2 FA 01 F6 | 	mov	result1, objptr
14fb0     00 18 02 FF 
14fb4     00 FA 45 F5 | 	or	result1, ##70254592
14fb8     62 00 00 FF 
14fbc     EC E5 05 F1 | 	add	objptr, ##50668
14fc0     F2 FA 61 FC | 	wrlong	result1, objptr
14fc4     62 00 00 FF 
14fc8     EC E5 85 F1 | 	sub	objptr, ##50668
14fcc     F2 FA 01 F6 | 	mov	result1, objptr
14fd0     00 20 02 FF 
14fd4     00 FA 45 F5 | 	or	result1, ##71303168
14fd8     62 00 00 FF 
14fdc     E8 E5 05 F1 | 	add	objptr, ##50664
14fe0     F2 FA 61 FC | 	wrlong	result1, objptr
14fe4     62 00 00 FF 
14fe8     E8 E5 85 F1 | 	sub	objptr, ##50664
14fec     F2 FA 01 F6 | 	mov	result1, objptr
14ff0     00 28 02 FF 
14ff4     00 FA 45 F5 | 	or	result1, ##72351744
14ff8     62 00 00 FF 
14ffc     E4 E5 05 F1 | 	add	objptr, ##50660
15000     F2 FA 61 FC | 	wrlong	result1, objptr
15004     62 00 00 FF 
15008     E4 E5 85 F1 | 	sub	objptr, ##50660
1500c     F2 FA 01 F6 | 	mov	result1, objptr
15010     00 30 02 FF 
15014     00 FA 45 F5 | 	or	result1, ##73400320
15018     62 00 00 FF 
1501c     F0 E5 05 F1 | 	add	objptr, ##50672
15020     F2 FA 61 FC | 	wrlong	result1, objptr
15024     62 00 00 FF 
15028     F0 E5 85 F1 | 	sub	objptr, ##50672
1502c     F2 FA 01 F6 | 	mov	result1, objptr
15030     00 38 02 FF 
15034     00 FA 45 F5 | 	or	result1, ##74448896
15038     62 00 00 FF 
1503c     F4 E5 05 F1 | 	add	objptr, ##50676
15040     F2 FA 61 FC | 	wrlong	result1, objptr
15044     62 00 00 FF 
15048     F4 E5 85 F1 | 	sub	objptr, ##50676
1504c     F2 FA 01 F6 | 	mov	result1, objptr
15050     00 40 02 FF 
15054     00 FA 45 F5 | 	or	result1, ##75497472
15058     62 00 00 FF 
1505c     88 E4 05 F1 | 	add	objptr, ##50312
15060     F2 FA 61 FC | 	wrlong	result1, objptr
15064     62 00 00 FF 
15068     88 E4 85 F1 | 	sub	objptr, ##50312
1506c     F2 FA 01 F6 | 	mov	result1, objptr
15070     00 48 02 FF 
15074     00 FA 45 F5 | 	or	result1, ##76546048
15078     63 00 00 FF 
1507c     0C E4 05 F1 | 	add	objptr, ##50700
15080     F2 FA 61 FC | 	wrlong	result1, objptr
15084     63 00 00 FF 
15088     0C E4 85 F1 | 	sub	objptr, ##50700
1508c     F2 FA 01 F6 | 	mov	result1, objptr
15090     00 50 02 FF 
15094     00 FA 45 F5 | 	or	result1, ##77594624
15098     63 00 00 FF 
1509c     1C E4 05 F1 | 	add	objptr, ##50716
150a0     F2 FA 61 FC | 	wrlong	result1, objptr
150a4     63 00 00 FF 
150a8     1C E4 85 F1 | 	sub	objptr, ##50716
150ac     F2 FA 01 F6 | 	mov	result1, objptr
150b0     00 58 02 FF 
150b4     00 FA 45 F5 | 	or	result1, ##78643200
150b8     63 00 00 FF 
150bc     20 E4 05 F1 | 	add	objptr, ##50720
150c0     F2 FA 61 FC | 	wrlong	result1, objptr
150c4     63 00 00 FF 
150c8     20 E4 85 F1 | 	sub	objptr, ##50720
150cc     F2 FA 01 F6 | 	mov	result1, objptr
150d0     00 60 02 FF 
150d4     00 FA 45 F5 | 	or	result1, ##79691776
150d8     63 00 00 FF 
150dc     18 E4 05 F1 | 	add	objptr, ##50712
150e0     F2 FA 61 FC | 	wrlong	result1, objptr
150e4     63 00 00 FF 
150e8     18 E4 85 F1 | 	sub	objptr, ##50712
150ec     F2 FA 01 F6 | 	mov	result1, objptr
150f0     00 68 02 FF 
150f4     00 FA 45 F5 | 	or	result1, ##80740352
150f8     63 00 00 FF 
150fc     10 E4 05 F1 | 	add	objptr, ##50704
15100     F2 FA 61 FC | 	wrlong	result1, objptr
15104     63 00 00 FF 
15108     10 E4 85 F1 | 	sub	objptr, ##50704
1510c     F2 FA 01 F6 | 	mov	result1, objptr
15110     00 70 02 FF 
15114     00 FA 45 F5 | 	or	result1, ##81788928
15118     63 00 00 FF 
1511c     14 E4 05 F1 | 	add	objptr, ##50708
15120     F2 FA 61 FC | 	wrlong	result1, objptr
15124     63 00 00 FF 
15128     14 E4 85 F1 | 	sub	objptr, ##50708
1512c     F2 FA 01 F6 | 	mov	result1, objptr
15130     00 78 02 FF 
15134     00 FA 45 F5 | 	or	result1, ##82837504
15138     63 00 00 FF 
1513c     24 E4 05 F1 | 	add	objptr, ##50724
15140     F2 FA 61 FC | 	wrlong	result1, objptr
15144     63 00 00 FF 
15148     24 E4 85 F1 | 	sub	objptr, ##50724
1514c     F2 FA 01 F6 | 	mov	result1, objptr
15150     00 80 02 FF 
15154     00 FA 45 F5 | 	or	result1, ##83886080
15158     63 00 00 FF 
1515c     28 E4 05 F1 | 	add	objptr, ##50728
15160     F2 FA 61 FC | 	wrlong	result1, objptr
15164     63 00 00 FF 
15168     28 E4 85 F1 | 	sub	objptr, ##50728
1516c     F2 FA 01 F6 | 	mov	result1, objptr
15170     00 88 02 FF 
15174     00 FA 45 F5 | 	or	result1, ##84934656
15178     63 00 00 FF 
1517c     2C E4 05 F1 | 	add	objptr, ##50732
15180     F2 FA 61 FC | 	wrlong	result1, objptr
15184     63 00 00 FF 
15188     2C E4 85 F1 | 	sub	objptr, ##50732
1518c     F2 FA 01 F6 | 	mov	result1, objptr
15190     00 90 02 FF 
15194     00 FA 45 F5 | 	or	result1, ##85983232
15198     63 00 00 FF 
1519c     30 E4 05 F1 | 	add	objptr, ##50736
151a0     F2 FA 61 FC | 	wrlong	result1, objptr
151a4     63 00 00 FF 
151a8     30 E4 85 F1 | 	sub	objptr, ##50736
151ac     F2 FA 01 F6 | 	mov	result1, objptr
151b0     00 98 02 FF 
151b4     00 FA 45 F5 | 	or	result1, ##87031808
151b8     63 00 00 FF 
151bc     34 E4 05 F1 | 	add	objptr, ##50740
151c0     F2 FA 61 FC | 	wrlong	result1, objptr
151c4     63 00 00 FF 
151c8     34 E4 85 F1 | 	sub	objptr, ##50740
151cc     F2 FA 01 F6 | 	mov	result1, objptr
151d0     00 A0 02 FF 
151d4     00 FA 45 F5 | 	or	result1, ##88080384
151d8     63 00 00 FF 
151dc     38 E4 05 F1 | 	add	objptr, ##50744
151e0     F2 FA 61 FC | 	wrlong	result1, objptr
151e4     63 00 00 FF 
151e8     38 E4 85 F1 | 	sub	objptr, ##50744
151ec     F2 FA 01 F6 | 	mov	result1, objptr
151f0     00 A8 02 FF 
151f4     00 FA 45 F5 | 	or	result1, ##89128960
151f8     63 00 00 FF 
151fc     3C E4 05 F1 | 	add	objptr, ##50748
15200     F2 FA 61 FC | 	wrlong	result1, objptr
15204     63 00 00 FF 
15208     3C E4 85 F1 | 	sub	objptr, ##50748
1520c     F2 FA 01 F6 | 	mov	result1, objptr
15210     00 B0 02 FF 
15214     00 FA 45 F5 | 	or	result1, ##90177536
15218     63 00 00 FF 
1521c     40 E4 05 F1 | 	add	objptr, ##50752
15220     F2 FA 61 FC | 	wrlong	result1, objptr
15224     63 00 00 FF 
15228     40 E4 85 F1 | 	sub	objptr, ##50752
1522c     F2 FA 01 F6 | 	mov	result1, objptr
15230     00 B8 02 FF 
15234     00 FA 45 F5 | 	or	result1, ##91226112
15238     63 00 00 FF 
1523c     4C E4 05 F1 | 	add	objptr, ##50764
15240     F2 FA 61 FC | 	wrlong	result1, objptr
15244     63 00 00 FF 
15248     4C E4 85 F1 | 	sub	objptr, ##50764
1524c     F2 FA 01 F6 | 	mov	result1, objptr
15250     00 C0 02 FF 
15254     00 FA 45 F5 | 	or	result1, ##92274688
15258     63 00 00 FF 
1525c     44 E4 05 F1 | 	add	objptr, ##50756
15260     F2 FA 61 FC | 	wrlong	result1, objptr
15264     63 00 00 FF 
15268     44 E4 85 F1 | 	sub	objptr, ##50756
1526c     F2 FA 01 F6 | 	mov	result1, objptr
15270     00 C8 02 FF 
15274     00 FA 45 F5 | 	or	result1, ##93323264
15278     63 00 00 FF 
1527c     48 E4 05 F1 | 	add	objptr, ##50760
15280     F2 FA 61 FC | 	wrlong	result1, objptr
15284     63 00 00 FF 
15288     48 E4 85 F1 | 	sub	objptr, ##50760
1528c     F2 FA 01 F6 | 	mov	result1, objptr
15290     00 D0 02 FF 
15294     00 FA 45 F5 | 	or	result1, ##94371840
15298     63 00 00 FF 
1529c     50 E4 05 F1 | 	add	objptr, ##50768
152a0     F2 FA 61 FC | 	wrlong	result1, objptr
152a4     63 00 00 FF 
152a8     50 E4 85 F1 | 	sub	objptr, ##50768
152ac     F2 FA 01 F6 | 	mov	result1, objptr
152b0     00 D8 02 FF 
152b4     00 FA 45 F5 | 	or	result1, ##95420416
152b8     62 00 00 FF 
152bc     F8 E5 05 F1 | 	add	objptr, ##50680
152c0     F2 FA 61 FC | 	wrlong	result1, objptr
152c4     62 00 00 FF 
152c8     F8 E5 85 F1 | 	sub	objptr, ##50680
152cc     F2 FA 01 F6 | 	mov	result1, objptr
152d0     00 E0 02 FF 
152d4     00 FA 45 F5 | 	or	result1, ##96468992
152d8     63 00 00 FF 
152dc     00 E4 05 F1 | 	add	objptr, ##50688
152e0     F2 FA 61 FC | 	wrlong	result1, objptr
152e4     63 00 00 FF 
152e8     00 E4 85 F1 | 	sub	objptr, ##50688
152ec     F2 FA 01 F6 | 	mov	result1, objptr
152f0     00 E8 02 FF 
152f4     00 FA 45 F5 | 	or	result1, ##97517568
152f8     63 00 00 FF 
152fc     04 E4 05 F1 | 	add	objptr, ##50692
15300     F2 FA 61 FC | 	wrlong	result1, objptr
15304     63 00 00 FF 
15308     04 E4 85 F1 | 	sub	objptr, ##50692
1530c     F2 FA 01 F6 | 	mov	result1, objptr
15310     00 F0 02 FF 
15314     00 FA 45 F5 | 	or	result1, ##98566144
15318     63 00 00 FF 
1531c     54 E4 05 F1 | 	add	objptr, ##50772
15320     F2 FA 61 FC | 	wrlong	result1, objptr
15324     63 00 00 FF 
15328     54 E4 85 F1 | 	sub	objptr, ##50772
1532c     F2 FA 01 F6 | 	mov	result1, objptr
15330     00 F8 02 FF 
15334     00 FA 45 F5 | 	or	result1, ##99614720
15338     63 00 00 FF 
1533c     58 E4 05 F1 | 	add	objptr, ##50776
15340     F2 FA 61 FC | 	wrlong	result1, objptr
15344     63 00 00 FF 
15348     58 E4 85 F1 | 	sub	objptr, ##50776
1534c     F2 FA 01 F6 | 	mov	result1, objptr
15350     39 FA 25 F4 | 	bith	result1, #57
15354     63 00 00 FF 
15358     5C E4 05 F1 | 	add	objptr, ##50780
1535c     F2 FA 61 FC | 	wrlong	result1, objptr
15360     63 00 00 FF 
15364     5C E4 85 F1 | 	sub	objptr, ##50780
15368                 | _init_commands_ret
15368     2D 00 64 FD | 	ret
1536c                 | 
1536c                 | ' 
1536c                 | ' ''--------------------------------Error strings -------------------------------------
1536c                 | ' 
1536c                 | ' sub init_error_strings
1536c                 | _init_error_strings
1536c     43 01 00 FF 
15370     EE 00 06 F6 | 	mov	_var01, ##@LR__4609
15374     64 00 00 FF 
15378     50 E4 05 F1 | 	add	objptr, ##51280
1537c     F2 00 62 FC | 	wrlong	_var01, objptr
15380     43 01 00 FF 
15384     EF 00 06 F6 | 	mov	_var01, ##@LR__4610
15388     04 E4 05 F1 | 	add	objptr, #4
1538c     F2 00 62 FC | 	wrlong	_var01, objptr
15390     43 01 00 FF 
15394     14 01 06 F6 | 	mov	_var01, ##@LR__4611
15398     04 E4 05 F1 | 	add	objptr, #4
1539c     F2 00 62 FC | 	wrlong	_var01, objptr
153a0     43 01 00 FF 
153a4     35 01 06 F6 | 	mov	_var01, ##@LR__4612
153a8     04 E4 05 F1 | 	add	objptr, #4
153ac     F2 00 62 FC | 	wrlong	_var01, objptr
153b0     43 01 00 FF 
153b4     4F 01 06 F6 | 	mov	_var01, ##@LR__4613
153b8     04 E4 05 F1 | 	add	objptr, #4
153bc     F2 00 62 FC | 	wrlong	_var01, objptr
153c0     43 01 00 FF 
153c4     6B 01 06 F6 | 	mov	_var01, ##@LR__4614
153c8     04 E4 05 F1 | 	add	objptr, #4
153cc     F2 00 62 FC | 	wrlong	_var01, objptr
153d0     43 01 00 FF 
153d4     8D 01 06 F6 | 	mov	_var01, ##@LR__4615
153d8     04 E4 05 F1 | 	add	objptr, #4
153dc     F2 00 62 FC | 	wrlong	_var01, objptr
153e0     43 01 00 FF 
153e4     BB 01 06 F6 | 	mov	_var01, ##@LR__4616
153e8     04 E4 05 F1 | 	add	objptr, #4
153ec     F2 00 62 FC | 	wrlong	_var01, objptr
153f0     43 01 00 FF 
153f4     E6 01 06 F6 | 	mov	_var01, ##@LR__4617
153f8     04 E4 05 F1 | 	add	objptr, #4
153fc     F2 00 62 FC | 	wrlong	_var01, objptr
15400     43 01 00 FF 
15404     FF 01 06 F6 | 	mov	_var01, ##@LR__4618
15408     04 E4 05 F1 | 	add	objptr, #4
1540c     F2 00 62 FC | 	wrlong	_var01, objptr
15410     44 01 00 FF 
15414     20 00 06 F6 | 	mov	_var01, ##@LR__4619
15418     04 E4 05 F1 | 	add	objptr, #4
1541c     F2 00 62 FC | 	wrlong	_var01, objptr
15420     44 01 00 FF 
15424     37 00 06 F6 | 	mov	_var01, ##@LR__4620
15428     04 E4 05 F1 | 	add	objptr, #4
1542c     F2 00 62 FC | 	wrlong	_var01, objptr
15430     44 01 00 FF 
15434     55 00 06 F6 | 	mov	_var01, ##@LR__4621
15438     04 E4 05 F1 | 	add	objptr, #4
1543c     F2 00 62 FC | 	wrlong	_var01, objptr
15440     44 01 00 FF 
15444     79 00 06 F6 | 	mov	_var01, ##@LR__4622
15448     04 E4 05 F1 | 	add	objptr, #4
1544c     F2 00 62 FC | 	wrlong	_var01, objptr
15450     44 01 00 FF 
15454     A0 00 06 F6 | 	mov	_var01, ##@LR__4623
15458     04 E4 05 F1 | 	add	objptr, #4
1545c     F2 00 62 FC | 	wrlong	_var01, objptr
15460     44 01 00 FF 
15464     BC 00 06 F6 | 	mov	_var01, ##@LR__4624
15468     04 E4 05 F1 | 	add	objptr, #4
1546c     F2 00 62 FC | 	wrlong	_var01, objptr
15470     44 01 00 FF 
15474     CD 00 06 F6 | 	mov	_var01, ##@LR__4625
15478     04 E4 05 F1 | 	add	objptr, #4
1547c     F2 00 62 FC | 	wrlong	_var01, objptr
15480     44 01 00 FF 
15484     DD 00 06 F6 | 	mov	_var01, ##@LR__4626
15488     04 E4 05 F1 | 	add	objptr, #4
1548c     F2 00 62 FC | 	wrlong	_var01, objptr
15490     44 01 00 FF 
15494     F8 00 06 F6 | 	mov	_var01, ##@LR__4627
15498     04 E4 05 F1 | 	add	objptr, #4
1549c     F2 00 62 FC | 	wrlong	_var01, objptr
154a0     44 01 00 FF 
154a4     0A 01 06 F6 | 	mov	_var01, ##@LR__4628
154a8     04 E4 05 F1 | 	add	objptr, #4
154ac     F2 00 62 FC | 	wrlong	_var01, objptr
154b0     44 01 00 FF 
154b4     22 01 06 F6 | 	mov	_var01, ##@LR__4629
154b8     04 E4 05 F1 | 	add	objptr, #4
154bc     F2 00 62 FC | 	wrlong	_var01, objptr
154c0     44 01 00 FF 
154c4     36 01 06 F6 | 	mov	_var01, ##@LR__4630
154c8     04 E4 05 F1 | 	add	objptr, #4
154cc     F2 00 62 FC | 	wrlong	_var01, objptr
154d0     44 01 00 FF 
154d4     46 01 06 F6 | 	mov	_var01, ##@LR__4631
154d8     04 E4 05 F1 | 	add	objptr, #4
154dc     F2 00 62 FC | 	wrlong	_var01, objptr
154e0     44 01 00 FF 
154e4     63 01 06 F6 | 	mov	_var01, ##@LR__4632
154e8     04 E4 05 F1 | 	add	objptr, #4
154ec     F2 00 62 FC | 	wrlong	_var01, objptr
154f0     44 01 00 FF 
154f4     74 01 06 F6 | 	mov	_var01, ##@LR__4633
154f8     04 E4 05 F1 | 	add	objptr, #4
154fc     F2 00 62 FC | 	wrlong	_var01, objptr
15500     44 01 00 FF 
15504     85 01 06 F6 | 	mov	_var01, ##@LR__4634
15508     04 E4 05 F1 | 	add	objptr, #4
1550c     F2 00 62 FC | 	wrlong	_var01, objptr
15510     44 01 00 FF 
15514     B0 01 06 F6 | 	mov	_var01, ##@LR__4635
15518     04 E4 05 F1 | 	add	objptr, #4
1551c     F2 00 62 FC | 	wrlong	_var01, objptr
15520     44 01 00 FF 
15524     CC 01 06 F6 | 	mov	_var01, ##@LR__4636
15528     04 E4 05 F1 | 	add	objptr, #4
1552c     F2 00 62 FC | 	wrlong	_var01, objptr
15530     44 01 00 FF 
15534     E2 01 06 F6 | 	mov	_var01, ##@LR__4637
15538     04 E4 05 F1 | 	add	objptr, #4
1553c     F2 00 62 FC | 	wrlong	_var01, objptr
15540     44 01 00 FF 
15544     EF 01 06 F6 | 	mov	_var01, ##@LR__4638
15548     04 E4 05 F1 | 	add	objptr, #4
1554c     F2 00 62 FC | 	wrlong	_var01, objptr
15550     45 01 00 FF 
15554     01 00 06 F6 | 	mov	_var01, ##@LR__4639
15558     04 E4 05 F1 | 	add	objptr, #4
1555c     F2 00 62 FC | 	wrlong	_var01, objptr
15560     45 01 00 FF 
15564     12 00 06 F6 | 	mov	_var01, ##@LR__4640
15568     04 E4 05 F1 | 	add	objptr, #4
1556c     F2 00 62 FC | 	wrlong	_var01, objptr
15570     45 01 00 FF 
15574     2E 00 06 F6 | 	mov	_var01, ##@LR__4641
15578     04 E4 05 F1 | 	add	objptr, #4
1557c     F2 00 62 FC | 	wrlong	_var01, objptr
15580     45 01 00 FF 
15584     3F 00 06 F6 | 	mov	_var01, ##@LR__4642
15588     04 E4 05 F1 | 	add	objptr, #4
1558c     F2 00 62 FC | 	wrlong	_var01, objptr
15590     45 01 00 FF 
15594     4E 00 06 F6 | 	mov	_var01, ##@LR__4643
15598     04 E4 05 F1 | 	add	objptr, #4
1559c     F2 00 62 FC | 	wrlong	_var01, objptr
155a0     45 01 00 FF 
155a4     69 00 06 F6 | 	mov	_var01, ##@LR__4644
155a8     04 E4 05 F1 | 	add	objptr, #4
155ac     F2 00 62 FC | 	wrlong	_var01, objptr
155b0     45 01 00 FF 
155b4     9D 00 06 F6 | 	mov	_var01, ##@LR__4645
155b8     04 E4 05 F1 | 	add	objptr, #4
155bc     F2 00 62 FC | 	wrlong	_var01, objptr
155c0     45 01 00 FF 
155c4     B6 00 06 F6 | 	mov	_var01, ##@LR__4646
155c8     04 E4 05 F1 | 	add	objptr, #4
155cc     F2 00 62 FC | 	wrlong	_var01, objptr
155d0     45 01 00 FF 
155d4     D2 00 06 F6 | 	mov	_var01, ##@LR__4647
155d8     04 E4 05 F1 | 	add	objptr, #4
155dc     F2 00 62 FC | 	wrlong	_var01, objptr
155e0     45 01 00 FF 
155e4     F0 00 06 F6 | 	mov	_var01, ##@LR__4648
155e8     04 E4 05 F1 | 	add	objptr, #4
155ec     F2 00 62 FC | 	wrlong	_var01, objptr
155f0     45 01 00 FF 
155f4     09 01 06 F6 | 	mov	_var01, ##@LR__4649
155f8     04 E4 05 F1 | 	add	objptr, #4
155fc     F2 00 62 FC | 	wrlong	_var01, objptr
15600     45 01 00 FF 
15604     28 01 06 F6 | 	mov	_var01, ##@LR__4650
15608     04 E4 05 F1 | 	add	objptr, #4
1560c     F2 00 62 FC | 	wrlong	_var01, objptr
15610     45 01 00 FF 
15614     37 01 06 F6 | 	mov	_var01, ##@LR__4651
15618     04 E4 05 F1 | 	add	objptr, #4
1561c     F2 00 62 FC | 	wrlong	_var01, objptr
15620     45 01 00 FF 
15624     65 01 06 F6 | 	mov	_var01, ##@LR__4652
15628     04 E4 05 F1 | 	add	objptr, #4
1562c     F2 00 62 FC | 	wrlong	_var01, objptr
15630     45 01 00 FF 
15634     73 01 06 F6 | 	mov	_var01, ##@LR__4653
15638     04 E4 05 F1 | 	add	objptr, #4
1563c     F2 00 62 FC | 	wrlong	_var01, objptr
15640     45 01 00 FF 
15644     88 01 06 F6 | 	mov	_var01, ##@LR__4654
15648     04 E4 05 F1 | 	add	objptr, #4
1564c     F2 00 62 FC | 	wrlong	_var01, objptr
15650     45 01 00 FF 
15654     AC 01 06 F6 | 	mov	_var01, ##@LR__4655
15658     04 E4 05 F1 | 	add	objptr, #4
1565c     F2 00 62 FC | 	wrlong	_var01, objptr
15660     45 01 00 FF 
15664     C3 01 06 F6 | 	mov	_var01, ##@LR__4656
15668     04 E4 05 F1 | 	add	objptr, #4
1566c     F2 00 62 FC | 	wrlong	_var01, objptr
15670     45 01 00 FF 
15674     D6 01 06 F6 | 	mov	_var01, ##@LR__4657
15678     04 E4 05 F1 | 	add	objptr, #4
1567c     F2 00 62 FC | 	wrlong	_var01, objptr
15680     64 00 00 FF 
15684     10 E5 85 F1 | 	sub	objptr, ##51472
15688                 | _init_error_strings_ret
15688     2D 00 64 FD | 	ret
1568c                 | 
1568c                 | '         
1568c                 | ' sub printerror(err as integer)
1568c                 | _printerror
1568c     01 4A 05 F6 | 	mov	COUNT_, #1
15690     A8 00 A0 FD | 	call	#pushregs_
15694     09 1F 02 F6 | 	mov	local01, arg01
15698     45 01 00 FF 
1569c     ED 13 06 F6 | 	mov	arg01, ##@LR__4658
156a0     E4 24 B0 FD | 	call	#_hg010b_spin2_write
156a4     0F 13 02 F6 | 	mov	arg01, local01
156a8     DC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
156ac     FD 12 02 F6 | 	mov	arg01, result1
156b0     D4 24 B0 FD | 	call	#_hg010b_spin2_write
156b4     45 01 00 FF 
156b8     F4 13 06 F6 | 	mov	arg01, ##@LR__4659
156bc     C8 24 B0 FD | 	call	#_hg010b_spin2_write
156c0     02 1E 66 F0 | 	shl	local01, #2
156c4     64 00 00 FF 
156c8     50 E4 05 F1 | 	add	objptr, ##51280
156cc     F2 1E 02 F1 | 	add	local01, objptr
156d0     0F 13 02 FB | 	rdlong	arg01, local01
156d4     64 00 00 FF 
156d8     50 E4 85 F1 | 	sub	objptr, ##51280
156dc                 | ' 
156dc                 | ' write(text)
156dc     A8 24 B0 FD | 	call	#_hg010b_spin2_write
156e0                 | ' crlf
156e0     04 26 B0 FD | 	call	#_hg010b_spin2_crlf
156e4     A7 F0 03 F6 | 	mov	ptra, fp
156e8     B2 00 A0 FD | 	call	#popregs_
156ec                 | _printerror_ret
156ec     2D 00 64 FD | 	ret
156f0                 | 
156f0                 | ' 
156f0                 | ' '' ------------------------------- Hardware start/stop/initialization 
156f0                 | ' 
156f0                 | ' sub startpsram
156f0                 | _startpsram
156f0     00 12 06 F6 | 	mov	arg01, #0
156f4     0A 14 C6 F9 | 	decod	arg02, #10
156f8     0B 16 06 F6 | 	mov	arg03, #11
156fc     07 18 06 F6 | 	mov	arg04, #7
15700     0B 00 00 FF 
15704     C0 E4 05 F1 | 	add	objptr, ##5824
15708     88 27 B0 FD | 	call	#_psram_spin2_startx
1570c     4A 00 00 FF 
15710     1C E5 05 F1 | 	add	objptr, ##38172
15714     F2 FA 61 FC | 	wrlong	result1, objptr
15718                 | '     return $7FF00 + cog*12
15718     0C E4 05 F1 | 	add	objptr, #12
1571c     FF 03 80 FF 
15720     F2 00 6A FC | 	wrlong	##524032, objptr
15724     55 00 00 FF 
15728     E8 E5 85 F1 | 	sub	objptr, ##44008
1572c                 | _startpsram_ret
1572c     2D 00 64 FD | 	ret
15730                 | 
15730                 | ' 
15730                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
15730                 | _startvideo
15730     01 4A 05 F6 | 	mov	COUNT_, #1
15734     A8 00 A0 FD | 	call	#pushregs_
15738     55 00 00 FF 
1573c     E8 E5 05 F1 | 	add	objptr, ##44008
15740     F2 18 02 FB | 	rdlong	arg04, objptr
15744     55 00 00 FF 
15748     E8 E5 85 F1 | 	sub	objptr, ##44008
1574c     0A 13 02 F6 | 	mov	arg01, arg02
15750     0C 15 02 F6 | 	mov	arg02, arg04
15754     50 0F B0 FD | 	call	#_hg010b_spin2_start
15758     55 00 00 FF 
1575c     D4 E5 05 F1 | 	add	objptr, ##43988
15760     F2 FA 61 FC | 	wrlong	result1, objptr
15764                 | ' 
15764                 | ' videocog=v.start(pin,mbox)
15764                 | ' 
15764                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
15764     00 1E 06 F6 | 	mov	local01, #0
15768     4A 00 00 FF 
1576c     14 E5 85 F1 | 	sub	objptr, ##38164
15770                 | LR__1650
15770     0F 13 02 F6 | 	mov	arg01, local01
15774     00 28 00 FF 
15778     00 14 06 F6 | 	mov	arg02, ##5242880
1577c     6C 2B B0 FD | 	call	#_psram_spin2_setQos
15780     01 1E 06 F1 | 	add	local01, #1
15784     08 1E 56 F2 | 	cmps	local01, #8 wc
15788     E4 FF 9F CD |  if_b	jmp	#LR__1650
1578c     4A 00 00 FF 
15790     14 E5 05 F1 | 	add	objptr, ##38164
15794     F2 12 02 FB | 	rdlong	arg01, objptr
15798     7A 00 02 FF 
1579c     00 14 06 F6 | 	mov	arg02, ##67171328
157a0     4A 00 00 FF 
157a4     14 E5 85 F1 | 	sub	objptr, ##38164
157a8     40 2B B0 FD | 	call	#_psram_spin2_setQos
157ac     0B 00 00 FF 
157b0     C0 E4 85 F1 | 	sub	objptr, ##5824
157b4                 | ' psram.setQoS(videocog, $0400f400) 
157b4                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
157b4     F2 14 02 F6 | 	mov	arg02, objptr
157b8     00 08 03 FF 
157bc     00 14 46 F5 | 	or	arg02, ##101711872
157c0     00 16 06 F6 | 	mov	arg03, #0
157c4     00 18 06 F6 | 	mov	arg04, #0
157c8     00 12 06 F6 | 	mov	arg01, #0
157cc     88 3E B0 FD | 	call	#__system___basic_open
157d0                 | ' return videocog
157d0     55 00 00 FF 
157d4     D4 E5 05 F1 | 	add	objptr, ##43988
157d8     F2 FA 01 FB | 	rdlong	result1, objptr
157dc     55 00 00 FF 
157e0     D4 E5 85 F1 | 	sub	objptr, ##43988
157e4     A7 F0 03 F6 | 	mov	ptra, fp
157e8     B2 00 A0 FD | 	call	#popregs_
157ec                 | _startvideo_ret
157ec     2D 00 64 FD | 	ret
157f0                 | 
157f0                 | ' 
157f0                 | ' function pspeek(adr as ulong) as ubyte
157f0                 | _pspeek
157f0     00 4A 05 F6 | 	mov	COUNT_, #0
157f4     A8 00 A0 FD | 	call	#pushregs_
157f8     0C F0 07 F1 | 	add	ptra, #12
157fc     04 4E 05 F1 | 	add	fp, #4
15800     A7 12 62 FC | 	wrlong	arg01, fp
15804     04 4E 05 F1 | 	add	fp, #4
15808     A7 12 02 F6 | 	mov	arg01, fp
1580c     04 4E 85 F1 | 	sub	fp, #4
15810     A7 14 02 FB | 	rdlong	arg02, fp
15814     04 4E 85 F1 | 	sub	fp, #4
15818     01 16 06 F6 | 	mov	arg03, #1
1581c     0B 00 00 FF 
15820     C0 E4 05 F1 | 	add	objptr, ##5824
15824     98 28 B0 FD | 	call	#_psram_spin2_read1
15828     0B 00 00 FF 
1582c     C0 E4 85 F1 | 	sub	objptr, ##5824
15830                 | ' psram.read1(varptr(res),adr,1)
15830                 | ' return res
15830     08 4E 05 F1 | 	add	fp, #8
15834     A7 FA C1 FA | 	rdbyte	result1, fp
15838     08 4E 85 F1 | 	sub	fp, #8
1583c     A7 F0 03 F6 | 	mov	ptra, fp
15840     B2 00 A0 FD | 	call	#popregs_
15844                 | _pspeek_ret
15844     2D 00 64 FD | 	ret
15848                 | 
15848                 | ' 
15848                 | ' function pslpeek(adr as ulong) as ulong
15848                 | _pslpeek
15848     00 4A 05 F6 | 	mov	COUNT_, #0
1584c     A8 00 A0 FD | 	call	#pushregs_
15850     0C F0 07 F1 | 	add	ptra, #12
15854     04 4E 05 F1 | 	add	fp, #4
15858     A7 12 62 FC | 	wrlong	arg01, fp
1585c     04 4E 05 F1 | 	add	fp, #4
15860     A7 12 02 F6 | 	mov	arg01, fp
15864     04 4E 85 F1 | 	sub	fp, #4
15868     A7 14 02 FB | 	rdlong	arg02, fp
1586c     04 4E 85 F1 | 	sub	fp, #4
15870     04 16 06 F6 | 	mov	arg03, #4
15874     0B 00 00 FF 
15878     C0 E4 05 F1 | 	add	objptr, ##5824
1587c     40 28 B0 FD | 	call	#_psram_spin2_read1
15880     0B 00 00 FF 
15884     C0 E4 85 F1 | 	sub	objptr, ##5824
15888                 | ' psram.read1(varptr(res),adr,4)
15888                 | ' return res
15888     08 4E 05 F1 | 	add	fp, #8
1588c     A7 FA 01 FB | 	rdlong	result1, fp
15890     08 4E 85 F1 | 	sub	fp, #8
15894     A7 F0 03 F6 | 	mov	ptra, fp
15898     B2 00 A0 FD | 	call	#popregs_
1589c                 | _pslpeek_ret
1589c     2D 00 64 FD | 	ret
158a0                 | 
158a0                 | ' 
158a0                 | ' '' ------------------------------- USB keyboard scan to char translator
158a0                 | ' 
158a0                 | ' function scantochar(key)
158a0                 | _scantochar
158a0                 | ' 
158a0                 | ' select case (key shr 8) and 255
158a0     09 01 02 F6 | 	mov	_var01, arg01
158a4     08 00 C6 F0 | 	sar	_var01, #8
158a8     FF 00 0E F5 | 	and	_var01, #255 wz
158ac     24 00 90 AD |  if_e	jmp	#LR__1660
158b0     02 00 0E F2 | 	cmp	_var01, #2 wz
158b4     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
158b8     30 00 90 AD |  if_e	jmp	#LR__1661
158bc     40 00 0E F2 | 	cmp	_var01, #64 wz
158c0     44 00 90 AD |  if_e	jmp	#LR__1662
158c4     42 00 0E F2 | 	cmp	_var01, #66 wz
158c8     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
158cc     70 00 90 5D |  if_ne	jmp	#LR__1664
158d0     50 00 90 FD | 	jmp	#LR__1663
158d4                 | LR__1660
158d4     09 FB 01 F6 | 	mov	result1, arg01
158d8     7F FA 05 F5 | 	and	result1, #127
158dc     02 FA 65 F0 | 	shl	result1, #2
158e0     F5 FA 01 F1 | 	add	result1, ptr__dat__
158e4     FD FA C1 FA | 	rdbyte	result1, result1
158e8     54 00 90 FD | 	jmp	#_scantochar_ret
158ec                 | LR__1661
158ec     09 FB 01 F6 | 	mov	result1, arg01
158f0     7F FA 05 F5 | 	and	result1, #127
158f4     02 FA 65 F0 | 	shl	result1, #2
158f8     01 FA 05 F1 | 	add	result1, #1
158fc     F5 FA 01 F1 | 	add	result1, ptr__dat__
15900     FD FA C1 FA | 	rdbyte	result1, result1
15904     38 00 90 FD | 	jmp	#_scantochar_ret
15908                 | LR__1662
15908     09 FB 01 F6 | 	mov	result1, arg01
1590c     7F FA 05 F5 | 	and	result1, #127
15910     02 FA 65 F0 | 	shl	result1, #2
15914     02 FA 05 F1 | 	add	result1, #2
15918     F5 FA 01 F1 | 	add	result1, ptr__dat__
1591c     FD FA C1 FA | 	rdbyte	result1, result1
15920     1C 00 90 FD | 	jmp	#_scantochar_ret
15924                 | LR__1663
15924     09 FB 01 F6 | 	mov	result1, arg01
15928     7F FA 05 F5 | 	and	result1, #127
1592c     02 FA 65 F0 | 	shl	result1, #2
15930     03 FA 05 F1 | 	add	result1, #3
15934     F5 FA 01 F1 | 	add	result1, ptr__dat__
15938     FD FA C1 FA | 	rdbyte	result1, result1
1593c     00 00 90 FD | 	jmp	#_scantochar_ret
15940                 | LR__1664
15940                 | _scantochar_ret
15940     2D 00 64 FD | 	ret
15944                 | 
15944                 | _program
15944     0B 4A 05 F6 | 	mov	COUNT_, #11
15948     A8 00 A0 FD | 	call	#pushregs_
1594c     A0 FD BF FD | 	call	#_startpsram
15950     40 12 06 F6 | 	mov	arg01, #64
15954     00 14 06 F6 | 	mov	arg02, #0
15958     00 16 06 F6 | 	mov	arg03, #0
1595c     D0 FD BF FD | 	call	#_startvideo
15960     00 12 06 F6 | 	mov	arg01, #0
15964     00 14 06 F6 | 	mov	arg02, #0
15968     00 16 06 F6 | 	mov	arg03, #0
1596c     0B 00 00 FF 
15970     C0 E4 05 F1 | 	add	objptr, ##5824
15974     88 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
15978     FE 1C 02 F6 | 	mov	arg06, result2
1597c     4A 00 00 FF 
15980     10 E5 05 F1 | 	add	objptr, ##38160
15984     F2 FA 61 FC | 	wrlong	result1, objptr
15988     14 E4 05 F1 | 	add	objptr, #20
1598c     F2 1C 62 FC | 	wrlong	arg06, objptr
15990     55 00 00 FF 
15994     E4 E5 85 F1 | 	sub	objptr, ##44004
15998     32 12 06 F6 | 	mov	arg01, #50
1599c     04 35 B0 FD | 	call	#__system___waitms
159a0     55 00 00 FF 
159a4     E4 E5 05 F1 | 	add	objptr, ##44004
159a8     F2 12 02 FB | 	rdlong	arg01, objptr
159ac     55 00 00 FF 
159b0     E4 E5 85 F1 | 	sub	objptr, ##44004
159b4     14 12 06 F1 | 	add	arg01, #20
159b8     20 00 80 FF 
159bc     09 01 58 FC | 	wrword	##16384, arg01
159c0     30 2A B0 FD | 	call	#_usbnew_spin2_start
159c4     55 00 00 FF 
159c8     D8 E5 05 F1 | 	add	objptr, ##43992
159cc     F2 FA 61 FC | 	wrlong	result1, objptr
159d0                 | '   mouse_limits[0] := xlim
159d0     0F 00 00 FF 
159d4     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
159d8     01 00 80 FF 
159dc     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
159e0                 | '   mouse_limits[1] := ylim
159e0     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
159e4     01 00 80 FF 
159e8     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
159ec     55 00 00 FF 
159f0     CB E4 85 F1 | 	sub	objptr, ##43723
159f4     F2 12 02 F6 | 	mov	arg01, objptr
159f8     0D E5 85 F1 | 	sub	objptr, #269
159fc     C4 12 06 F1 | 	add	arg01, #196
15a00                 | '   mouse_outptr := ptr
15a00     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
15a04     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
15a08     0F 00 00 FF 
15a0c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
15a10     0E 00 00 FF 
15a14     9A EA 05 F1 | 	add	ptr__dat__, ##7322
15a18     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15a1c     0E 00 00 FF 
15a20     9A EA 85 F1 | 	sub	ptr__dat__, ##7322
15a24     10 12 06 F6 | 	mov	arg01, #16
15a28     74 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
15a2c     10 12 06 F6 | 	mov	arg01, #16
15a30     20 14 06 F6 | 	mov	arg02, #32
15a34     20 16 06 F6 | 	mov	arg03, #32
15a38     D8 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
15a3c     09 12 C6 F9 | 	decod	arg01, #9
15a40     20 15 06 F6 | 	mov	arg02, #288
15a44     68 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
15a48     F2 1C 02 F6 | 	mov	arg06, objptr
15a4c     78 00 00 FF 
15a50     BC E5 05 F1 | 	add	objptr, ##61884
15a54     F2 1A 02 F6 | 	mov	arg05, objptr
15a58     0D 1D 62 FC | 	wrlong	arg06, arg05
15a5c     04 1A 06 F1 | 	add	arg05, #4
15a60     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
15a64     EF 14 02 F6 | 	mov	arg02, entryptr__
15a68     F2 1E 02 F6 | 	mov	local01, objptr
15a6c     1E FA 05 F6 | 	mov	result1, #30
15a70     28 1E 62 FD | 	setq	local01
15a74     0A FB F1 FC | 	coginit	result1, arg02 wc
15a78     01 FA 65 C6 |  if_b	neg	result1, #1
15a7c     04 E4 85 F1 | 	sub	objptr, #4
15a80     F2 FA 61 FC | 	wrlong	result1, objptr
15a84     01 00 00 FF 
15a88     90 E4 05 F1 | 	add	objptr, ##656
15a8c     F2 00 68 FC | 	wrlong	#0, objptr
15a90     24 00 00 FF 
15a94     40 E4 85 F1 | 	sub	objptr, ##18496
15a98     F2 04 68 FC | 	wrlong	#2, objptr
15a9c     04 E4 05 F1 | 	add	objptr, #4
15aa0     F2 26 69 FC | 	wrlong	#147, objptr
15aa4     04 E4 05 F1 | 	add	objptr, #4
15aa8     F2 34 69 FC | 	wrlong	#154, objptr
15aac     04 E4 05 F1 | 	add	objptr, #4
15ab0     F2 08 68 FC | 	wrlong	#4, objptr
15ab4     04 E4 85 F1 | 	sub	objptr, #4
15ab8     F2 1C 02 FB | 	rdlong	arg06, objptr
15abc     14 E4 85 F1 | 	sub	objptr, #20
15ac0     F2 1C 62 FC | 	wrlong	arg06, objptr
15ac4     04 E4 05 F1 | 	add	objptr, #4
15ac8     F2 00 68 FC | 	wrlong	#0, objptr
15acc     04 E4 05 F1 | 	add	objptr, #4
15ad0     F2 00 68 FC | 	wrlong	#0, objptr
15ad4     22 00 00 FF 
15ad8     B0 E5 05 F1 | 	add	objptr, ##17840
15adc     F2 02 68 FC | 	wrlong	#1, objptr
15ae0     01 00 00 FF 
15ae4     9C E4 05 F1 | 	add	objptr, ##668
15ae8     F2 00 68 FC | 	wrlong	#0, objptr
15aec     01 00 00 FF 
15af0     00 EA 05 F1 | 	add	ptr__dat__, ##512
15af4     08 E4 05 F1 | 	add	objptr, #8
15af8     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15afc     04 E4 85 F1 | 	sub	objptr, #4
15b00     03 00 80 FF 
15b04     F2 28 69 FC | 	wrlong	##1684, objptr
15b08     16 00 00 FF 
15b0c     1C E4 85 F1 | 	sub	objptr, ##11292
15b10     F2 18 68 FC | 	wrlong	#12, objptr
15b14     64 00 00 FF 
15b18     38 E4 85 F1 | 	sub	objptr, ##51256
15b1c     01 00 00 FF 
15b20     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15b24     6C EB BF FD | 	call	#_init_commands
15b28     40 F8 BF FD | 	call	#_init_error_strings
15b2c     2C 68 BF FD | 	call	#_do_new
15b30     56 00 00 FF 
15b34     10 E4 05 F1 | 	add	objptr, ##44048
15b38     F2 12 02 FB | 	rdlong	arg01, objptr
15b3c     04 E4 85 F1 | 	sub	objptr, #4
15b40     F2 14 02 FB | 	rdlong	arg02, objptr
15b44     56 00 00 FF 
15b48     0C E4 85 F1 | 	sub	objptr, ##44044
15b4c     7C 1D B0 FD | 	call	#_hg010b_spin2_cls
15b50     56 00 00 FF 
15b54     14 E4 05 F1 | 	add	objptr, ##44052
15b58     F2 12 02 FB | 	rdlong	arg01, objptr
15b5c     56 00 00 FF 
15b60     14 E4 85 F1 | 	sub	objptr, ##44052
15b64     7C 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
15b68                 | ' 
15b68                 | ' leading_spaces:=amount
15b68     01 00 00 FF 
15b6c     B2 E4 05 F1 | 	add	objptr, ##690
15b70     F2 04 68 FC | 	wrlong	#2, objptr
15b74     01 00 00 FF 
15b78     B2 E4 85 F1 | 	sub	objptr, ##690
15b7c     45 01 00 FF 
15b80     F7 21 06 F6 | 	mov	local02, ##@LR__4660
15b84     3D 12 06 F6 | 	mov	arg01, #61
15b88     3C 14 06 F6 | 	mov	arg02, #60
15b8c     3B 16 06 F6 | 	mov	arg03, #59
15b90     3A 18 06 F6 | 	mov	arg04, #58
15b94     B4 79 B0 FD | 	call	#__system___vfs_open_sdcardx
15b98     FD 14 02 F6 | 	mov	arg02, result1
15b9c     10 13 02 F6 | 	mov	arg01, local02
15ba0     D8 33 B0 FD | 	call	#__system___mount
15ba4     45 01 00 FF 
15ba8     FB 13 06 F6 | 	mov	arg01, ##@LR__4661
15bac     8C 36 B0 FD | 	call	#__system___chdir
15bb0     46 01 00 FF 
15bb4     03 20 06 F6 | 	mov	local02, ##@LR__4662
15bb8     71 00 00 FF 
15bbc     68 E4 05 F1 | 	add	objptr, ##57960
15bc0     F2 20 62 FC | 	wrlong	local02, objptr
15bc4     1B 00 00 FF 
15bc8     60 E4 85 F1 | 	sub	objptr, ##13920
15bcc     F2 12 02 FB | 	rdlong	arg01, objptr
15bd0     56 00 00 FF 
15bd4     08 E4 85 F1 | 	sub	objptr, ##44040
15bd8     01 12 66 F0 | 	shl	arg01, #1
15bdc     01 14 06 F6 | 	mov	arg02, #1
15be0     40 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
15be4                 | ' 
15be4                 | ' init_commands
15be4                 | ' init_error_strings
15be4                 | ' do_new
15be4                 | ' 
15be4                 | ' 
15be4                 | ' cls(ink, paper)
15be4                 | ' v.setfontfamily(font) 				' use ST Mono font
15be4                 | ' v.setleadingspaces(2)
15be4                 | ' mount "/sd", _vfs_open_sdcard()
15be4                 | ' chdir "/sd/bas"
15be4                 | ' 
15be4                 | ' currentdir$="/sd/bas"
15be4                 | ' 
15be4                 | ' position 2*editor_spaces,1 : print ver$
15be4     00 12 06 F6 | 	mov	arg01, #0
15be8     C8 88 B0 FD | 	call	#__system___getiolock_0423
15bec     FD 12 02 F6 | 	mov	arg01, result1
15bf0     BC 2F B0 FD | 	call	#__system___lockmem
15bf4     10 00 00 FF 
15bf8     10 EB 05 F1 | 	add	ptr__dat__, ##8464
15bfc     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
15c00     10 00 00 FF 
15c04     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
15c08     00 12 06 F6 | 	mov	arg01, #0
15c0c     00 16 06 F6 | 	mov	arg03, #0
15c10     90 3C B0 FD | 	call	#__system___basic_print_string
15c14     00 12 06 F6 | 	mov	arg01, #0
15c18     0A 14 06 F6 | 	mov	arg02, #10
15c1c     00 16 06 F6 | 	mov	arg03, #0
15c20     28 3C B0 FD | 	call	#__system___basic_print_char
15c24     00 12 06 F6 | 	mov	arg01, #0
15c28     88 88 B0 FD | 	call	#__system___getiolock_0423
15c2c     FD 00 68 FC | 	wrlong	#0, result1
15c30     F2 12 02 FB | 	rdlong	arg01, objptr
15c34     00 14 06 F6 | 	mov	arg02, #0
15c38     0A 16 06 F6 | 	mov	arg03, #10
15c3c     78 51 B0 FD | 	call	#__system__Number_S
15c40     FD 12 02 F6 | 	mov	arg01, result1
15c44     46 01 00 FF 
15c48     0B 14 06 F6 | 	mov	arg02, ##@LR__4663
15c4c     BC 2F B0 FD | 	call	#__system___string_concat
15c50     FD 20 02 F6 | 	mov	local02, result1
15c54     78 00 00 FF 
15c58     B0 E5 05 F1 | 	add	objptr, ##61872
15c5c     F2 20 62 FC | 	wrlong	local02, objptr
15c60     78 00 00 FF 
15c64     B0 E5 85 F1 | 	sub	objptr, ##61872
15c68                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
15c68     00 12 06 F6 | 	mov	arg01, #0
15c6c     44 88 B0 FD | 	call	#__system___getiolock_0423
15c70     FD 12 02 F6 | 	mov	arg01, result1
15c74     38 2F B0 FD | 	call	#__system___lockmem
15c78     78 00 00 FF 
15c7c     B0 E5 05 F1 | 	add	objptr, ##61872
15c80     F2 14 02 FB | 	rdlong	arg02, objptr
15c84     78 00 00 FF 
15c88     B0 E5 85 F1 | 	sub	objptr, ##61872
15c8c     00 12 06 F6 | 	mov	arg01, #0
15c90     00 16 06 F6 | 	mov	arg03, #0
15c94     0C 3C B0 FD | 	call	#__system___basic_print_string
15c98     00 12 06 F6 | 	mov	arg01, #0
15c9c     0A 14 06 F6 | 	mov	arg02, #10
15ca0     00 16 06 F6 | 	mov	arg03, #0
15ca4     A4 3B B0 FD | 	call	#__system___basic_print_char
15ca8     00 12 06 F6 | 	mov	arg01, #0
15cac     04 88 B0 FD | 	call	#__system___getiolock_0423
15cb0     FD 00 68 FC | 	wrlong	#0, result1
15cb4     56 00 00 FF 
15cb8     08 E4 05 F1 | 	add	objptr, ##44040
15cbc     F2 12 02 FB | 	rdlong	arg01, objptr
15cc0     56 00 00 FF 
15cc4     08 E4 85 F1 | 	sub	objptr, ##44040
15cc8     01 12 66 F0 | 	shl	arg01, #1
15ccc     04 14 06 F6 | 	mov	arg02, #4
15cd0     50 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
15cd4                 | ' position 2*editor_spaces,4 : print "Ready"
15cd4     00 12 06 F6 | 	mov	arg01, #0
15cd8     D8 87 B0 FD | 	call	#__system___getiolock_0423
15cdc     FD 12 02 F6 | 	mov	arg01, result1
15ce0     CC 2E B0 FD | 	call	#__system___lockmem
15ce4     46 01 00 FF 
15ce8     1D 14 06 F6 | 	mov	arg02, ##@LR__4664
15cec     00 12 06 F6 | 	mov	arg01, #0
15cf0     00 16 06 F6 | 	mov	arg03, #0
15cf4     AC 3B B0 FD | 	call	#__system___basic_print_string
15cf8     FD 22 02 F6 | 	mov	local03, result1
15cfc     00 12 06 F6 | 	mov	arg01, #0
15d00     0A 14 06 F6 | 	mov	arg02, #10
15d04     00 16 06 F6 | 	mov	arg03, #0
15d08     40 3B B0 FD | 	call	#__system___basic_print_char
15d0c     01 24 06 F6 | 	mov	local04, #1
15d10     00 12 06 F6 | 	mov	arg01, #0
15d14     9C 87 B0 FD | 	call	#__system___getiolock_0423
15d18     FD 00 68 FC | 	wrlong	#0, result1
15d1c     00 26 06 F6 | 	mov	local05, #0
15d20     00 14 06 F6 | 	mov	arg02, #0
15d24     01 14 D6 F7 | 	test	arg02, #1 wc
15d28     5A 4C 64 FD | 	drvc	#38
15d2c     01 14 D6 F7 | 	test	arg02, #1 wc
15d30     5A 4E 64 FD | 	drvc	#39
15d34                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
15d34                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
15d34                 | ' 
15d34                 | ' '-------------------------------------------------------------------------------------------------------- 
15d34                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
15d34                 | ' '--------------------------------------------------------------------------------------------------------
15d34                 | ' 
15d34                 | ' do
15d34                 | LR__1670
15d34     01 12 06 F6 | 	mov	arg01, #1
15d38     20 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
15d3c     10 27 B0 FD | 	call	#_usbnew_spin2_get_key
15d40     64 00 00 FF 
15d44     48 E4 05 F1 | 	add	objptr, ##51272
15d48     F2 FA 61 FC | 	wrlong	result1, objptr
15d4c                 | '   return hkbd_led_rep
15d4c     13 00 00 FF 
15d50     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
15d54     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
15d58     13 00 00 FF 
15d5c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
15d60     16 00 00 FF 
15d64     1C E4 05 F1 | 	add	objptr, ##11292
15d68     F2 FA 61 FC | 	wrlong	result1, objptr
15d6c                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
15d6c     16 00 00 FF 
15d70     1C E4 85 F1 | 	sub	objptr, ##11292
15d74     F2 20 02 FB | 	rdlong	local02, objptr
15d78     64 00 00 FF 
15d7c     48 E4 85 F1 | 	sub	objptr, ##51272
15d80     01 20 16 F2 | 	cmp	local02, #1 wc
15d84     BC 00 90 CD |  if_b	jmp	#LR__1671
15d88     64 00 00 FF 
15d8c     48 E4 05 F1 | 	add	objptr, ##51272
15d90     F2 24 02 FB | 	rdlong	local04, objptr
15d94     64 00 00 FF 
15d98     48 E4 85 F1 | 	sub	objptr, ##51272
15d9c     12 23 02 F6 | 	mov	local03, local04
15da0     04 22 16 F2 | 	cmp	local03, #4 wc
15da4     9C 00 90 3D |  if_ae	jmp	#LR__1671
15da8     78 00 00 FF 
15dac     B4 E5 05 F1 | 	add	objptr, ##61876
15db0     F2 1E 02 FB | 	rdlong	local01, objptr
15db4     78 00 00 FF 
15db8     B4 E5 85 F1 | 	sub	objptr, ##61876
15dbc     0F 27 02 F6 | 	mov	local05, local01
15dc0     01 26 0E F2 | 	cmp	local05, #1 wz
15dc4     7C 00 90 5D |  if_ne	jmp	#LR__1671
15dc8     04 00 00 FF 
15dcc     94 EA 05 F1 | 	add	ptr__dat__, ##2196
15dd0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15dd4     04 00 00 FF 
15dd8     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
15ddc     56 00 00 FF 
15de0     44 22 06 F6 | 	mov	local03, ##44100
15de4     0E 24 C6 F9 | 	decod	local04, #14
15de8     00 26 06 F6 | 	mov	local05, #0
15dec     03 00 00 FF 
15df0     DE 1E 06 F6 | 	mov	local01, ##1758
15df4     07 12 06 F6 | 	mov	arg01, #7
15df8     56 00 00 FF 
15dfc     44 16 06 F6 | 	mov	arg03, ##44100
15e00     0E 18 C6 F9 | 	decod	arg04, #14
15e04     00 1A 06 F6 | 	mov	arg05, #0
15e08     03 00 00 FF 
15e0c     DE 1C 06 F6 | 	mov	arg06, ##1758
15e10     0B 00 00 FF 
15e14     C0 E4 05 F1 | 	add	objptr, ##5824
15e18     5C 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
15e1c     0B 00 00 FF 
15e20     C0 E4 85 F1 | 	sub	objptr, ##5824
15e24     0A 12 06 F6 | 	mov	arg01, #10
15e28     78 30 B0 FD | 	call	#__system___waitms
15e2c     07 12 06 F6 | 	mov	arg01, #7
15e30     0B 00 00 FF 
15e34     C0 E4 05 F1 | 	add	objptr, ##5824
15e38     8C 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
15e3c     0B 00 00 FF 
15e40     C0 E4 85 F1 | 	sub	objptr, ##5824
15e44                 | LR__1671
15e44                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
15e44     64 00 00 FF 
15e48     48 E4 05 F1 | 	add	objptr, ##51272
15e4c     F2 20 02 FB | 	rdlong	local02, objptr
15e50     64 00 00 FF 
15e54     48 E4 85 F1 | 	sub	objptr, ##51272
15e58     04 20 16 F2 | 	cmp	local02, #4 wc
15e5c     80 00 90 CD |  if_b	jmp	#LR__1672
15e60     64 00 00 FF 
15e64     48 E4 05 F1 | 	add	objptr, ##51272
15e68     F2 24 02 FB | 	rdlong	local04, objptr
15e6c     64 00 00 FF 
15e70     48 E4 85 F1 | 	sub	objptr, ##51272
15e74     12 23 02 F6 | 	mov	local03, local04
15e78     00 00 40 FF 
15e7c     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
15e80     64 00 00 CF 
15e84     48 E4 05 C1 |  if_b	add	objptr, ##51272
15e88     F2 1E 02 CB |  if_b	rdlong	local01, objptr
15e8c     64 00 00 CF 
15e90     48 E4 85 C1 |  if_b	sub	objptr, ##51272
15e94     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
15e98     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
15e9c     40 00 90 3D |  if_ae	jmp	#LR__1672
15ea0     64 00 00 FF 
15ea4     48 E4 05 F1 | 	add	objptr, ##51272
15ea8     F2 20 02 FB | 	rdlong	local02, objptr
15eac     04 E4 05 F1 | 	add	objptr, #4
15eb0     F2 20 62 FC | 	wrlong	local02, objptr
15eb4     16 00 00 FF 
15eb8     1C E4 05 F1 | 	add	objptr, ##11292
15ebc     F2 02 68 FC | 	wrlong	#1, objptr
15ec0     16 00 00 FF 
15ec4     1C E4 85 F1 | 	sub	objptr, ##11292
15ec8     F2 20 02 FB | 	rdlong	local02, objptr
15ecc     16 00 00 FF 
15ed0     20 E4 05 F1 | 	add	objptr, ##11296
15ed4     F2 20 62 FC | 	wrlong	local02, objptr
15ed8     7A 00 00 FF 
15edc     6C E4 85 F1 | 	sub	objptr, ##62572
15ee0                 | LR__1672
15ee0                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
15ee0     64 00 00 FF 
15ee4     48 E4 05 F1 | 	add	objptr, ##51272
15ee8     F2 20 02 FB | 	rdlong	local02, objptr
15eec     64 00 00 FF 
15ef0     48 E4 85 F1 | 	sub	objptr, ##51272
15ef4     00 00 40 FF 
15ef8     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
15efc     7A 00 00 3F 
15f00     70 E4 05 31 |  if_ae	add	objptr, ##62576
15f04     F2 00 68 3C |  if_ae	wrlong	#0, objptr
15f08     08 E4 85 31 |  if_ae	sub	objptr, #8
15f0c     F2 00 68 3C |  if_ae	wrlong	#0, objptr
15f10     7A 00 00 3F 
15f14     68 E4 85 31 |  if_ae	sub	objptr, ##62568
15f18                 | ' if key=0 andalso rpt=1 then rptcnt+=1
15f18     64 00 00 FF 
15f1c     48 E4 05 F1 | 	add	objptr, ##51272
15f20     F2 20 0A FB | 	rdlong	local02, objptr wz
15f24     64 00 00 FF 
15f28     48 E4 85 F1 | 	sub	objptr, ##51272
15f2c     7A 00 00 AF 
15f30     68 E4 05 A1 |  if_e	add	objptr, ##62568
15f34     F2 24 02 AB |  if_e	rdlong	local04, objptr
15f38     7A 00 00 AF 
15f3c     68 E4 85 A1 |  if_e	sub	objptr, ##62568
15f40     12 23 02 A6 |  if_e	mov	local03, local04
15f44     01 22 0E A2 |  if_e	cmp	local03, #1 wz
15f48     7A 00 00 AF 
15f4c     70 E4 05 A1 |  if_e	add	objptr, ##62576
15f50     F2 20 02 AB |  if_e	rdlong	local02, objptr
15f54     01 20 06 A1 |  if_e	add	local02, #1
15f58     F2 20 62 AC |  if_e	wrlong	local02, objptr
15f5c     7A 00 00 AF 
15f60     70 E4 85 A1 |  if_e	sub	objptr, ##62576
15f64                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
15f64     64 00 00 FF 
15f68     48 E4 05 F1 | 	add	objptr, ##51272
15f6c     F2 20 02 FB | 	rdlong	local02, objptr
15f70     64 00 00 FF 
15f74     48 E4 85 F1 | 	sub	objptr, ##51272
15f78     00 00 40 FF 
15f7c     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
15f80     44 00 90 3D |  if_ae	jmp	#LR__1674
15f84     7A 00 00 FF 
15f88     70 E4 05 F1 | 	add	objptr, ##62576
15f8c     F2 20 02 FB | 	rdlong	local02, objptr
15f90     7A 00 00 FF 
15f94     70 E4 85 F1 | 	sub	objptr, ##62576
15f98     19 20 0E F2 | 	cmp	local02, #25 wz
15f9c     28 00 90 5D |  if_ne	jmp	#LR__1673
15fa0     64 00 00 FF 
15fa4     4C E4 05 F1 | 	add	objptr, ##51276
15fa8     F2 20 02 FB | 	rdlong	local02, objptr
15fac     16 00 00 FF 
15fb0     20 E4 05 F1 | 	add	objptr, ##11296
15fb4     F2 20 62 FC | 	wrlong	local02, objptr
15fb8     04 E4 05 F1 | 	add	objptr, #4
15fbc     F2 2A 68 FC | 	wrlong	#21, objptr
15fc0     7A 00 00 FF 
15fc4     70 E4 85 F1 | 	sub	objptr, ##62576
15fc8                 | LR__1673
15fc8                 | LR__1674
15fc8                 | ' 
15fc8                 | ' 
15fc8                 | ' if key3<>0 then
15fc8     7A 00 00 FF 
15fcc     6C E4 05 F1 | 	add	objptr, ##62572
15fd0     F2 28 0A FB | 	rdlong	local06, objptr wz
15fd4     7A 00 00 FF 
15fd8     6C E4 85 F1 | 	sub	objptr, ##62572
15fdc     54 FD 9F AD |  if_e	jmp	#LR__1670
15fe0                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
15fe0     78 00 00 FF 
15fe4     B4 E5 05 F1 | 	add	objptr, ##61876
15fe8     F2 20 02 FB | 	rdlong	local02, objptr
15fec     78 00 00 FF 
15ff0     B4 E5 85 F1 | 	sub	objptr, ##61876
15ff4     01 20 0E F2 | 	cmp	local02, #1 wz
15ff8     50 00 90 5D |  if_ne	jmp	#LR__1675
15ffc     7A 00 00 FF 
16000     58 E4 05 F1 | 	add	objptr, ##62552
16004     F2 14 02 FB | 	rdlong	arg02, objptr
16008     56 00 00 FF 
1600c     44 22 06 F6 | 	mov	local03, ##44100
16010     0E 24 C6 F9 | 	decod	local04, #14
16014     04 E4 85 F1 | 	sub	objptr, #4
16018     F2 26 02 FB | 	rdlong	local05, objptr
1601c     01 1E 66 F6 | 	neg	local01, #1
16020     07 12 06 F6 | 	mov	arg01, #7
16024     56 00 00 FF 
16028     44 16 06 F6 | 	mov	arg03, ##44100
1602c     0E 18 C6 F9 | 	decod	arg04, #14
16030     13 1B 02 F6 | 	mov	arg05, local05
16034     01 1C 66 F6 | 	neg	arg06, #1
16038     6E 00 00 FF 
1603c     94 E5 85 F1 | 	sub	objptr, ##56724
16040     34 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
16044     0B 00 00 FF 
16048     C0 E4 85 F1 | 	sub	objptr, ##5824
1604c                 | LR__1675
1604c     7A 00 00 FF 
16050     6C E4 05 F1 | 	add	objptr, ##62572
16054     F2 12 02 FB | 	rdlong	arg01, objptr
16058     7A 00 00 FF 
1605c     6C E4 85 F1 | 	sub	objptr, ##62572
16060     3C F8 BF FD | 	call	#_scantochar
16064     7A 00 00 FF 
16068     74 E4 05 F1 | 	add	objptr, ##62580
1606c     F2 FA 61 FC | 	wrlong	result1, objptr
16070                 | '   if leds and 2 = 2 then 
16070     10 E4 85 F1 | 	sub	objptr, #16
16074     F2 20 0A FB | 	rdlong	local02, objptr wz
16078     7A 00 00 FF 
1607c     64 E4 85 F1 | 	sub	objptr, ##62564
16080     68 01 90 AD |  if_e	jmp	#LR__1683
16084                 | '     if key4>96 andalso key4<123 then
16084     7A 00 00 FF 
16088     74 E4 05 F1 | 	add	objptr, ##62580
1608c     F2 20 02 FB | 	rdlong	local02, objptr
16090     7A 00 00 FF 
16094     74 E4 85 F1 | 	sub	objptr, ##62580
16098     61 20 56 F2 | 	cmps	local02, #97 wc
1609c     40 00 90 CD |  if_b	jmp	#LR__1676
160a0     7A 00 00 FF 
160a4     74 E4 05 F1 | 	add	objptr, ##62580
160a8     F2 24 02 FB | 	rdlong	local04, objptr
160ac     7A 00 00 FF 
160b0     74 E4 85 F1 | 	sub	objptr, ##62580
160b4     12 23 02 F6 | 	mov	local03, local04
160b8     7B 22 56 F2 | 	cmps	local03, #123 wc
160bc     20 00 90 3D |  if_ae	jmp	#LR__1676
160c0     7A 00 00 FF 
160c4     74 E4 05 F1 | 	add	objptr, ##62580
160c8     F2 20 02 FB | 	rdlong	local02, objptr
160cc     20 20 86 F1 | 	sub	local02, #32
160d0     F2 20 62 FC | 	wrlong	local02, objptr
160d4     7A 00 00 FF 
160d8     74 E4 85 F1 | 	sub	objptr, ##62580
160dc     0C 01 90 FD | 	jmp	#LR__1682
160e0                 | LR__1676
160e0     7A 00 00 FF 
160e4     74 E4 05 F1 | 	add	objptr, ##62580
160e8     F2 20 02 FB | 	rdlong	local02, objptr
160ec     7A 00 00 FF 
160f0     74 E4 85 F1 | 	sub	objptr, ##62580
160f4     41 20 56 F2 | 	cmps	local02, #65 wc
160f8     40 00 90 CD |  if_b	jmp	#LR__1677
160fc     7A 00 00 FF 
16100     74 E4 05 F1 | 	add	objptr, ##62580
16104     F2 24 02 FB | 	rdlong	local04, objptr
16108     7A 00 00 FF 
1610c     74 E4 85 F1 | 	sub	objptr, ##62580
16110     12 23 02 F6 | 	mov	local03, local04
16114     5B 22 56 F2 | 	cmps	local03, #91 wc
16118     20 00 90 3D |  if_ae	jmp	#LR__1677
1611c     7A 00 00 FF 
16120     74 E4 05 F1 | 	add	objptr, ##62580
16124     F2 20 02 FB | 	rdlong	local02, objptr
16128     20 20 06 F1 | 	add	local02, #32
1612c     F2 20 62 FC | 	wrlong	local02, objptr
16130     7A 00 00 FF 
16134     74 E4 85 F1 | 	sub	objptr, ##62580
16138     B0 00 90 FD | 	jmp	#LR__1681
1613c                 | LR__1677
1613c     7A 00 00 FF 
16140     74 E4 05 F1 | 	add	objptr, ##62580
16144     F2 20 02 FB | 	rdlong	local02, objptr
16148     7A 00 00 FF 
1614c     74 E4 85 F1 | 	sub	objptr, ##62580
16150     17 20 56 F2 | 	cmps	local02, #23 wc
16154     40 00 90 CD |  if_b	jmp	#LR__1678
16158     7A 00 00 FF 
1615c     74 E4 05 F1 | 	add	objptr, ##62580
16160     F2 24 02 FB | 	rdlong	local04, objptr
16164     7A 00 00 FF 
16168     74 E4 85 F1 | 	sub	objptr, ##62580
1616c     12 23 02 F6 | 	mov	local03, local04
16170     20 22 56 F2 | 	cmps	local03, #32 wc
16174     20 00 90 3D |  if_ae	jmp	#LR__1678
16178     7A 00 00 FF 
1617c     74 E4 05 F1 | 	add	objptr, ##62580
16180     F2 20 02 FB | 	rdlong	local02, objptr
16184     09 20 86 F1 | 	sub	local02, #9
16188     F2 20 62 FC | 	wrlong	local02, objptr
1618c     7A 00 00 FF 
16190     74 E4 85 F1 | 	sub	objptr, ##62580
16194     54 00 90 FD | 	jmp	#LR__1680
16198                 | LR__1678
16198     7A 00 00 FF 
1619c     74 E4 05 F1 | 	add	objptr, ##62580
161a0     F2 20 02 FB | 	rdlong	local02, objptr
161a4     7A 00 00 FF 
161a8     74 E4 85 F1 | 	sub	objptr, ##62580
161ac     0E 20 56 F2 | 	cmps	local02, #14 wc
161b0     38 00 90 CD |  if_b	jmp	#LR__1679
161b4     7A 00 00 FF 
161b8     74 E4 05 F1 | 	add	objptr, ##62580
161bc     F2 24 02 FB | 	rdlong	local04, objptr
161c0     7A 00 00 FF 
161c4     74 E4 85 F1 | 	sub	objptr, ##62580
161c8     12 23 02 F6 | 	mov	local03, local04
161cc     17 22 56 F2 | 	cmps	local03, #23 wc
161d0     7A 00 00 CF 
161d4     74 E4 05 C1 |  if_b	add	objptr, ##62580
161d8     F2 20 02 CB |  if_b	rdlong	local02, objptr
161dc     27 20 06 C1 |  if_b	add	local02, #39
161e0     F2 20 62 CC |  if_b	wrlong	local02, objptr
161e4     7A 00 00 CF 
161e8     74 E4 85 C1 |  if_b	sub	objptr, ##62580
161ec                 | LR__1679
161ec                 | LR__1680
161ec                 | LR__1681
161ec                 | LR__1682
161ec                 | LR__1683
161ec                 | '  
161ec                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
161ec     7A 00 00 FF 
161f0     74 E4 05 F1 | 	add	objptr, ##62580
161f4     F2 20 02 FB | 	rdlong	local02, objptr
161f8     7A 00 00 FF 
161fc     74 E4 85 F1 | 	sub	objptr, ##62580
16200     01 20 56 F2 | 	cmps	local02, #1 wc
16204     90 00 90 CD |  if_b	jmp	#LR__1684
16208     7A 00 00 FF 
1620c     74 E4 05 F1 | 	add	objptr, ##62580
16210     F2 24 02 FB | 	rdlong	local04, objptr
16214     7A 00 00 FF 
16218     74 E4 85 F1 | 	sub	objptr, ##62580
1621c     12 23 02 F6 | 	mov	local03, local04
16220     7F 22 56 F2 | 	cmps	local03, #127 wc
16224     38 E4 05 C1 |  if_b	add	objptr, #56
16228     F2 1E E2 CA |  if_b	rdword	local01, objptr
1622c     38 E4 85 C1 |  if_b	sub	objptr, #56
16230     0F 27 32 C9 |  if_b	getword	local05, local01, #0
16234     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
16238     5C 00 90 3D |  if_ae	jmp	#LR__1684
1623c     7A 00 00 FF 
16240     74 E4 05 F1 | 	add	objptr, ##62580
16244     F2 12 02 FB | 	rdlong	arg01, objptr
16248     7A 00 00 FF 
1624c     74 E4 85 F1 | 	sub	objptr, ##62580
16250     30 4B B0 FD | 	call	#__system__Chr_S
16254     FD 2A 02 F6 | 	mov	local07, result1
16258     55 00 00 FF 
1625c     F0 E5 05 F1 | 	add	objptr, ##44016
16260     F2 12 02 FB | 	rdlong	arg01, objptr
16264     55 00 00 FF 
16268     F0 E5 85 F1 | 	sub	objptr, ##44016
1626c     15 15 02 F6 | 	mov	arg02, local07
16270     98 29 B0 FD | 	call	#__system___string_concat
16274     55 00 00 FF 
16278     F0 E5 05 F1 | 	add	objptr, ##44016
1627c     F2 FA 61 FC | 	wrlong	result1, objptr
16280     24 00 00 FF 
16284     84 E4 05 F1 | 	add	objptr, ##18564
16288     F2 12 02 FB | 	rdlong	arg01, objptr
1628c     7A 00 00 FF 
16290     74 E4 85 F1 | 	sub	objptr, ##62580
16294     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
16298                 | LR__1684
16298                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(7) 'end of line reached
16298     7A 00 00 FF 
1629c     74 E4 05 F1 | 	add	objptr, ##62580
162a0     F2 20 02 FB | 	rdlong	local02, objptr
162a4     7A 00 00 FF 
162a8     74 E4 85 F1 | 	sub	objptr, ##62580
162ac     01 20 56 F2 | 	cmps	local02, #1 wc
162b0     D0 00 90 CD |  if_b	jmp	#LR__1685
162b4     7A 00 00 FF 
162b8     74 E4 05 F1 | 	add	objptr, ##62580
162bc     F2 24 02 FB | 	rdlong	local04, objptr
162c0     7A 00 00 FF 
162c4     74 E4 85 F1 | 	sub	objptr, ##62580
162c8     12 23 02 F6 | 	mov	local03, local04
162cc     7F 22 56 F2 | 	cmps	local03, #127 wc
162d0     B0 00 90 3D |  if_ae	jmp	#LR__1685
162d4     38 E4 05 F1 | 	add	objptr, #56
162d8     F2 1E E2 FA | 	rdword	local01, objptr
162dc     38 E4 85 F1 | 	sub	objptr, #56
162e0     0F 27 32 F9 | 	getword	local05, local01, #0
162e4     FE 26 0E F2 | 	cmp	local05, #254 wz
162e8     78 00 00 AF 
162ec     B4 E5 05 A1 |  if_e	add	objptr, ##61876
162f0     F2 2C 02 AB |  if_e	rdlong	local08, objptr
162f4     78 00 00 AF 
162f8     B4 E5 85 A1 |  if_e	sub	objptr, ##61876
162fc     16 2F 02 A6 |  if_e	mov	local09, local08
16300     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
16304     7C 00 90 5D |  if_ne	jmp	#LR__1685
16308     04 00 00 FF 
1630c     94 EA 05 F1 | 	add	ptr__dat__, ##2196
16310     F5 14 02 F6 | 	mov	arg02, ptr__dat__
16314     04 00 00 FF 
16318     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
1631c     56 00 00 FF 
16320     44 22 06 F6 | 	mov	local03, ##44100
16324     0E 24 C6 F9 | 	decod	local04, #14
16328     00 26 06 F6 | 	mov	local05, #0
1632c     03 00 00 FF 
16330     DE 1E 06 F6 | 	mov	local01, ##1758
16334     07 12 06 F6 | 	mov	arg01, #7
16338     56 00 00 FF 
1633c     44 16 06 F6 | 	mov	arg03, ##44100
16340     0E 18 C6 F9 | 	decod	arg04, #14
16344     00 1A 06 F6 | 	mov	arg05, #0
16348     03 00 00 FF 
1634c     DE 1C 06 F6 | 	mov	arg06, ##1758
16350     0B 00 00 FF 
16354     C0 E4 05 F1 | 	add	objptr, ##5824
16358     1C 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
1635c     0B 00 00 FF 
16360     C0 E4 85 F1 | 	sub	objptr, ##5824
16364     2C 13 06 F6 | 	mov	arg01, #300
16368     38 2B B0 FD | 	call	#__system___waitms
1636c     07 12 06 F6 | 	mov	arg01, #7
16370     0B 00 00 FF 
16374     C0 E4 05 F1 | 	add	objptr, ##5824
16378     4C 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
1637c     0B 00 00 FF 
16380     C0 E4 85 F1 | 	sub	objptr, ##5824
16384                 | LR__1685
16384                 | '  
16384                 | '   'tab
16384                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
16384     7A 00 00 FF 
16388     6C E4 05 F1 | 	add	objptr, ##62572
1638c     F2 20 02 FB | 	rdlong	local02, objptr
16390     7A 00 00 FF 
16394     6C E4 85 F1 | 	sub	objptr, ##62572
16398     10 21 E2 F8 | 	getbyte	local02, local02, #0
1639c     2B 20 0E F2 | 	cmp	local02, #43 wz
163a0     B4 00 90 5D |  if_ne	jmp	#LR__1686
163a4     38 E4 05 F1 | 	add	objptr, #56
163a8     F2 24 E2 FA | 	rdword	local04, objptr
163ac     38 E4 85 F1 | 	sub	objptr, #56
163b0     12 23 32 F9 | 	getword	local03, local04, #0
163b4     F0 22 16 F2 | 	cmp	local03, #240 wc
163b8     9C 00 90 CD |  if_b	jmp	#LR__1686
163bc     78 00 00 FF 
163c0     B4 E5 05 F1 | 	add	objptr, ##61876
163c4     F2 1E 02 FB | 	rdlong	local01, objptr
163c8     78 00 00 FF 
163cc     B4 E5 85 F1 | 	sub	objptr, ##61876
163d0     0F 27 02 F6 | 	mov	local05, local01
163d4     01 26 0E F2 | 	cmp	local05, #1 wz
163d8     7C 00 90 5D |  if_ne	jmp	#LR__1686
163dc     04 00 00 FF 
163e0     94 EA 05 F1 | 	add	ptr__dat__, ##2196
163e4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
163e8     04 00 00 FF 
163ec     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
163f0     56 00 00 FF 
163f4     44 22 06 F6 | 	mov	local03, ##44100
163f8     0E 24 C6 F9 | 	decod	local04, #14
163fc     00 26 06 F6 | 	mov	local05, #0
16400     03 00 00 FF 
16404     DE 1E 06 F6 | 	mov	local01, ##1758
16408     00 12 06 F6 | 	mov	arg01, #0
1640c     56 00 00 FF 
16410     44 16 06 F6 | 	mov	arg03, ##44100
16414     0E 18 C6 F9 | 	decod	arg04, #14
16418     00 1A 06 F6 | 	mov	arg05, #0
1641c     03 00 00 FF 
16420     DE 1C 06 F6 | 	mov	arg06, ##1758
16424     0B 00 00 FF 
16428     C0 E4 05 F1 | 	add	objptr, ##5824
1642c     48 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
16430     0B 00 00 FF 
16434     C0 E4 85 F1 | 	sub	objptr, ##5824
16438     2C 13 06 F6 | 	mov	arg01, #300
1643c     64 2A B0 FD | 	call	#__system___waitms
16440     00 12 06 F6 | 	mov	arg01, #0
16444     0B 00 00 FF 
16448     C0 E4 05 F1 | 	add	objptr, ##5824
1644c     78 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
16450     0B 00 00 FF 
16454     C0 E4 85 F1 | 	sub	objptr, ##5824
16458                 | LR__1686
16458                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
16458     7A 00 00 FF 
1645c     6C E4 05 F1 | 	add	objptr, ##62572
16460     F2 20 02 FB | 	rdlong	local02, objptr
16464     7A 00 00 FF 
16468     6C E4 85 F1 | 	sub	objptr, ##62572
1646c     10 21 E2 F8 | 	getbyte	local02, local02, #0
16470     2B 20 0E F2 | 	cmp	local02, #43 wz
16474     AC 00 90 5D |  if_ne	jmp	#LR__1689
16478     38 E4 05 F1 | 	add	objptr, #56
1647c     F2 24 E2 FA | 	rdword	local04, objptr
16480     38 E4 85 F1 | 	sub	objptr, #56
16484     12 23 32 F9 | 	getword	local03, local04, #0
16488     F0 22 16 F2 | 	cmp	local03, #240 wc
1648c     94 00 90 3D |  if_ae	jmp	#LR__1689
16490     38 E4 05 F1 | 	add	objptr, #56
16494     F2 20 E2 FA | 	rdword	local02, objptr
16498     10 23 52 F6 | 	abs	local03, local02 wc
1649c     11 23 42 F8 | 	getnib	local03, local03, #0
164a0     11 23 82 F6 | 	negc	local03, local03
164a4     11 25 52 F6 | 	abs	local04, local03 wc
164a8     01 24 46 F0 | 	shr	local04, #1
164ac     12 25 82 F6 | 	negc	local04, local04
164b0     7A 00 00 FF 
164b4     40 E4 05 F1 | 	add	objptr, ##62528
164b8     F2 24 62 FC | 	wrlong	local04, objptr
164bc     12 31 02 F6 | 	mov	local10, local04
164c0     7A 00 00 FF 
164c4     78 E4 85 F1 | 	sub	objptr, ##62584
164c8                 | LR__1687
164c8     08 30 56 F2 | 	cmps	local10, #8 wc
164cc     54 00 90 3D |  if_ae	jmp	#LR__1688
164d0     55 00 00 FF 
164d4     F0 E5 05 F1 | 	add	objptr, ##44016
164d8     F2 12 02 FB | 	rdlong	arg01, objptr
164dc     55 00 00 FF 
164e0     F0 E5 85 F1 | 	sub	objptr, ##44016
164e4     46 01 00 FF 
164e8     23 24 06 F6 | 	mov	local04, ##@LR__4665
164ec     12 15 02 F6 | 	mov	arg02, local04
164f0     18 27 B0 FD | 	call	#__system___string_concat
164f4     55 00 00 FF 
164f8     F0 E5 05 F1 | 	add	objptr, ##44016
164fc     F2 FA 61 FC | 	wrlong	result1, objptr
16500     55 00 00 FF 
16504     F0 E5 85 F1 | 	sub	objptr, ##44016
16508     46 01 00 FF 
1650c     25 12 06 F6 | 	mov	arg01, ##@LR__4666
16510     74 16 B0 FD | 	call	#_hg010b_spin2_write
16514     18 23 02 F6 | 	mov	local03, local10
16518     01 22 06 F1 | 	add	local03, #1
1651c     11 31 02 F6 | 	mov	local10, local03
16520     A4 FF 9F FD | 	jmp	#LR__1687
16524                 | LR__1688
16524                 | LR__1689
16524                 | '  
16524                 | '   'backspace
16524                 | '   if (key3 and 255) = 42 then 
16524     7A 00 00 FF 
16528     6C E4 05 F1 | 	add	objptr, ##62572
1652c     F2 20 02 FB | 	rdlong	local02, objptr
16530     7A 00 00 FF 
16534     6C E4 85 F1 | 	sub	objptr, ##62572
16538     10 21 E2 F8 | 	getbyte	local02, local02, #0
1653c     2A 20 0E F2 | 	cmp	local02, #42 wz
16540     D4 00 90 5D |  if_ne	jmp	#LR__1694
16544                 | '       if v.cursor_x>4 then 
16544     38 E4 05 F1 | 	add	objptr, #56
16548     F2 20 E2 FA | 	rdword	local02, objptr
1654c     38 E4 85 F1 | 	sub	objptr, #56
16550     05 20 16 F2 | 	cmp	local02, #5 wc
16554     9C 00 90 CD |  if_b	jmp	#LR__1692
16558     55 00 00 FF 
1655c     F0 E5 05 F1 | 	add	objptr, ##44016
16560     F2 26 02 FB | 	rdlong	local05, objptr
16564     55 00 00 FF 
16568     F0 E5 85 F1 | 	sub	objptr, ##44016
1656c     13 13 02 F6 | 	mov	arg01, local05
16570     09 33 02 F6 | 	mov	local11, arg01
16574     97 06 48 FB | 	callpa	#(@LR__1691-@LR__1690)>>2,fcache_load_ptr_
16578                 | LR__1690
16578     19 FB C9 FA | 	rdbyte	result1, local11 wz
1657c     01 32 06 51 |  if_ne	add	local11, #1
16580     F4 FF 9F 5D |  if_ne	jmp	#LR__1690
16584                 | LR__1691
16584     09 33 82 F1 | 	sub	local11, arg01
16588     19 15 02 F6 | 	mov	arg02, local11
1658c     01 14 86 F1 | 	sub	arg02, #1
16590     13 13 02 F6 | 	mov	arg01, local05
16594     28 46 B0 FD | 	call	#__system__Left_S
16598     55 00 00 FF 
1659c     F0 E5 05 F1 | 	add	objptr, ##44016
165a0     F2 FA 61 FC | 	wrlong	result1, objptr
165a4     55 00 00 FF 
165a8     B8 E5 85 F1 | 	sub	objptr, ##43960
165ac     F2 12 E2 FA | 	rdword	arg01, objptr
165b0     02 12 86 F1 | 	sub	arg01, #2
165b4     02 E4 05 F1 | 	add	objptr, #2
165b8     F2 14 C2 FA | 	rdbyte	arg02, objptr
165bc     3A E4 85 F1 | 	sub	objptr, #58
165c0     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
165c4     20 12 06 F6 | 	mov	arg01, #32
165c8     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
165cc     38 E4 05 F1 | 	add	objptr, #56
165d0     F2 12 E2 FA | 	rdword	arg01, objptr
165d4     02 12 86 F1 | 	sub	arg01, #2
165d8     02 E4 05 F1 | 	add	objptr, #2
165dc     F2 24 C2 FA | 	rdbyte	local04, objptr
165e0     3A E4 85 F1 | 	sub	objptr, #58
165e4     12 23 E2 F8 | 	getbyte	local03, local04, #0
165e8     11 15 02 F6 | 	mov	arg02, local03
165ec     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
165f0     24 00 90 FD | 	jmp	#LR__1693
165f4                 | LR__1692
165f4     46 01 00 FF 
165f8     27 20 06 F6 | 	mov	local02, ##@LR__4667
165fc     55 00 00 FF 
16600     F0 E5 05 F1 | 	add	objptr, ##44016
16604     F2 20 62 FC | 	wrlong	local02, objptr
16608     55 00 00 FF 
1660c     B8 E5 85 F1 | 	sub	objptr, ##43960
16610     F2 08 58 FC | 	wrword	#4, objptr
16614     38 E4 85 F1 | 	sub	objptr, #56
16618                 | LR__1693
16618                 | LR__1694
16618                 | '    
16618                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
16618                 | '  
16618                 | '   if key4=key_enter then 
16618     7A 00 00 FF 
1661c     74 E4 05 F1 | 	add	objptr, ##62580
16620     F2 28 02 FB | 	rdlong	local06, objptr
16624     7A 00 00 FF 
16628     74 E4 85 F1 | 	sub	objptr, ##62580
1662c     8D 28 0E F2 | 	cmp	local06, #141 wz
16630     50 00 90 5D |  if_ne	jmp	#LR__1695
16634     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
16638     E0 A3 BE FD | 	call	#_interpret
1663c     46 01 00 FF 
16640     28 20 06 F6 | 	mov	local02, ##@LR__4668
16644     55 00 00 FF 
16648     F0 E5 05 F1 | 	add	objptr, ##44016
1664c     F2 20 62 FC | 	wrlong	local02, objptr
16650     1A FA 61 FD | 	getct	result1
16654     24 00 00 FF 
16658     8C E4 05 F1 | 	add	objptr, ##18572
1665c     F2 24 02 FB | 	rdlong	local04, objptr
16660     12 23 02 F6 | 	mov	local03, local04
16664     11 FB 81 F1 | 	sub	result1, local03
16668     F2 FA 61 FC | 	wrlong	result1, objptr
1666c     14 E4 85 F1 | 	sub	objptr, #20
16670     F2 00 68 FC | 	wrlong	#0, objptr
16674     08 E4 05 F1 | 	add	objptr, #8
16678     F2 00 68 FC | 	wrlong	#0, objptr
1667c     7A 00 00 FF 
16680     70 E4 85 F1 | 	sub	objptr, ##62576
16684                 | LR__1695
16684     7A 00 00 FF 
16688     6C E4 05 F1 | 	add	objptr, ##62572
1668c     F2 00 68 FC | 	wrlong	#0, objptr
16690     7A 00 00 FF 
16694     6C E4 85 F1 | 	sub	objptr, ##62572
16698     98 F6 9F FD | 	jmp	#LR__1670
1669c     A7 F0 03 F6 | 	mov	ptra, fp
166a0     B2 00 A0 FD | 	call	#popregs_
166a4                 | _program_ret
166a4     2D 00 64 FD | 	ret
166a8                 | 
166a8                 | ' '' this is not a main program.
166a8                 | ' 
166a8                 | ' '****************************************************************************************************************
166a8                 | ' '                                                                                                             	*
166a8                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
166a8                 | ' '                                                                                                            	*
166a8                 | ' ' mode - mode #, see below											*
166a8                 | ' ' base - HDMI base pin												*
166a8                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
166a8                 | ' '														*
166a8                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
166a8                 | ' '' set bit #15 for custom timings														*
166a8                 | ' '' p - 1 - psram, 0 - hub											*
166a8                 | ' '' t - 1 - graphics, 0 - text											*
166a8                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
166a8                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
166a8                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
166a8                 | ' '														*
166a8                 | ' '****************************************************************************************************************
166a8                 | ' 
166a8                 | ' pub start(base,mb):result |i
166a8                 | _hg010b_spin2_start
166a8                 | ' 
166a8                 | ' '--------------------------- initialize pointers and variables
166a8                 | ' 
166a8                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
166a8     30 E4 05 F1 | 	add	objptr, #48
166ac     F2 FA 01 F6 | 	mov	result1, objptr
166b0     28 E4 85 F1 | 	sub	objptr, #40
166b4     F2 FA 61 FC | 	wrlong	result1, objptr
166b8                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
166b8                 | ' hdmibase:=base							' HDMI base pin, 8*n
166b8     18 E4 05 F1 | 	add	objptr, #24
166bc     F2 12 62 FC | 	wrlong	arg01, objptr
166c0                 | ' mailbox_ptr:=mb		
166c0     04 E4 05 F1 | 	add	objptr, #4
166c4     F2 14 62 FC | 	wrlong	arg02, objptr
166c8                 | ' mailbox0:=mb				' PSRAM mailbox pointer
166c8     C1 E5 05 F1 | 	add	objptr, #449
166cc     F2 14 62 FC | 	wrlong	arg02, objptr
166d0                 | ' sprite_ptr:=@spr1ptr
166d0     D8 E4 85 F1 | 	sub	objptr, #216
166d4     F2 FA 01 F6 | 	mov	result1, objptr
166d8     E5 E4 85 F1 | 	sub	objptr, #229
166dc     F2 FA 61 FC | 	wrlong	result1, objptr
166e0                 | ' 
166e0                 | ' 		'
166e0                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
166e0     E5 E4 05 F1 | 	add	objptr, #229
166e4     F2 FA 01 FB | 	rdlong	result1, objptr
166e8     D0 FA 05 F1 | 	add	result1, #208
166ec     FD 10 58 FC | 	wrword	#8, result1
166f0                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
166f0     F2 16 02 FB | 	rdlong	arg03, objptr
166f4     D2 16 06 F1 | 	add	arg03, #210
166f8     0B 21 58 FC | 	wrword	#16, arg03
166fc                 | ' leading_spaces:=0				'
166fc     A5 E5 05 F1 | 	add	objptr, #421
16700     F2 00 68 FC | 	wrlong	#0, objptr
16704                 | ' 
16704                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
16704     99 E4 85 F1 | 	sub	objptr, #153
16708     00 00 A0 FF 
1670c     F2 0E 68 FC | 	wrlong	##1073741831, objptr
16710                 | ' emptydl[1]:=0
16710     04 E4 05 F1 | 	add	objptr, #4
16714     F2 00 68 FC | 	wrlong	#0, objptr
16718                 | ' 
16718                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
16718                 | ' 
16718                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
16718     28 E5 85 F1 | 	sub	objptr, #296
1671c     F2 02 68 FC | 	wrlong	#1, objptr
16720                 | ' if s_debug<>0
16720                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
16720     20 00 80 FF 
16724     F2 00 68 FC | 	wrlong	##16384, objptr
16728     F5 E4 85 F1 | 	sub	objptr, #245
1672c                 | ' setmode()							' set the mode, see below
1672c     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
16730                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
16730     45 E4 05 F1 | 	add	objptr, #69
16734     F2 FA 01 F6 | 	mov	result1, objptr
16738     35 E4 85 F1 | 	sub	objptr, #53
1673c     F2 FA 61 FC | 	wrlong	result1, objptr
16740                 | ' cursor_ptr:=@cursor_x						
16740     28 E4 05 F1 | 	add	objptr, #40
16744     F2 16 02 F6 | 	mov	arg03, objptr
16748     2C E4 85 F1 | 	sub	objptr, #44
1674c     F2 16 62 FC | 	wrlong	arg03, objptr
16750                 | ' fontnum:=0  							' start with a PC type font 
16750     55 E4 05 F1 | 	add	objptr, #85
16754     F2 00 68 FC | 	wrlong	#0, objptr
16758                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
16758     1C E4 05 F1 | 	add	objptr, #28
1675c     F2 12 02 F6 | 	mov	arg01, objptr
16760     7D E4 85 F1 | 	sub	objptr, #125
16764     10 00 00 FF 
16768     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1676c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
16770     10 00 00 FF 
16774     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
16778     10 16 06 F6 | 	mov	arg03, #16
1677c     50 23 B0 FD | 	call	#__system____builtin_memmove
16780                 | ' leading_spaces:=0
16780     01 00 00 FF 
16784     B2 E4 05 F1 | 	add	objptr, ##690
16788     F2 00 68 FC | 	wrlong	#0, objptr
1678c     01 00 00 FF 
16790     B2 E4 85 F1 | 	sub	objptr, ##690
16794                 | ' '---------------------------- initialize a cursor (MSDOS type)
16794                 | ' 
16794                 | ' initcursor(154)
16794     9A 12 06 F6 | 	mov	arg01, #154
16798     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1679c                 | ' 
1679c                 | ' '---------------------------- start the cog
1679c                 | ' 
1679c                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1679c     10 00 00 FF 
167a0     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
167a4     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
167a8     10 00 00 FF 
167ac     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
167b0     10 E4 05 F1 | 	add	objptr, #16
167b4     10 FA 05 F6 | 	mov	result1, #16
167b8     28 E4 61 FD | 	setq	objptr
167bc     0A FB F1 FC | 	coginit	result1, arg02 wc
167c0     01 FA 65 C6 |  if_b	neg	result1, #1
167c4     1C E4 05 F1 | 	add	objptr, #28
167c8     F2 FA 61 FC | 	wrlong	result1, objptr
167cc     2C E4 85 F1 | 	sub	objptr, #44
167d0                 | ' waitms(40)							' wait for stabilize
167d0     28 12 06 F6 | 	mov	arg01, #40
167d4     CC 26 B0 FD | 	call	#__system___waitms
167d8                 | ' return cog							' return the driver's cog #
167d8     2C E4 05 F1 | 	add	objptr, #44
167dc     F2 FA 01 FB | 	rdlong	result1, objptr
167e0     2C E4 85 F1 | 	sub	objptr, #44
167e4                 | _hg010b_spin2_start_ret
167e4     2D 00 64 FD | 	ret
167e8                 | 
167e8                 | ' 
167e8                 | ' 
167e8                 | ' '**************************************************************************************************************** 
167e8                 | ' '                                                                                                             	*
167e8                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
167e8                 | ' '  Mode number - see start() above or bits below								*
167e8                 | ' '                                                                                                             	*
167e8                 | ' '****************************************************************************************************************
167e8                 | ' 
167e8                 | ' '---------------------------- initialize a cursor (MSDOS type)
167e8                 | ' pub initcursor(color) |i
167e8                 | _hg010b_spin2_initcursor
167e8     03 4A 05 F6 | 	mov	COUNT_, #3
167ec     A8 00 A0 FD | 	call	#pushregs_
167f0     09 1F 02 F6 | 	mov	local01, arg01
167f4                 | ' 
167f4                 | ' cursor_x:=0							' place the cursor at 0:0
167f4     38 E4 05 F1 | 	add	objptr, #56
167f8     F2 00 58 FC | 	wrword	#0, objptr
167fc                 | ' cursor_y:=0
167fc     02 E4 05 F1 | 	add	objptr, #2
16800     F2 00 48 FC | 	wrbyte	#0, objptr
16804                 | ' repeat i from 0 to 111
16804     00 20 06 F6 | 	mov	local02, #0
16808     F8 E5 05 F1 | 	add	objptr, #504
1680c     97 1A 48 FB | 	callpa	#(@LR__1702-@LR__1700)>>2,fcache_load_ptr_
16810                 | LR__1700
16810                 | '   cursor[i]:=0
16810     10 23 02 F6 | 	mov	local03, local02
16814     F2 22 02 F1 | 	add	local03, objptr
16818     11 01 48 FC | 	wrbyte	#0, local03
1681c     01 20 06 F1 | 	add	local02, #1
16820     70 20 56 F2 | 	cmps	local02, #112 wc
16824     E8 FF 9F CD |  if_b	jmp	#LR__1700
16828                 | ' repeat i from 112 to 127
16828     70 20 06 F6 | 	mov	local02, #112
1682c                 | LR__1701
1682c                 | '   cursor[i]:=color  
1682c     10 23 02 F6 | 	mov	local03, local02
16830     F2 22 02 F1 | 	add	local03, objptr
16834     11 1F 42 FC | 	wrbyte	local01, local03
16838     01 20 06 F1 | 	add	local02, #1
1683c     80 20 16 F2 | 	cmp	local02, #128 wc
16840     E8 FF 9F CD |  if_b	jmp	#LR__1701
16844                 | LR__1702
16844                 | ' 'repeat i from 0 to 127
16844                 | ' '  if ((i/8)//2)
16844                 | ' '    cursor[i]:=15
16844                 | ' '  else
16844                 | ' '    cursor[i]:=0
16844                 | ' '  if i>=120    
16844                 | ' '    cursor[i]:=40
16844                 | ' setspriteptr(17,@cursor)
16844     F2 14 02 F6 | 	mov	arg02, objptr
16848     01 00 00 FF 
1684c     32 E4 85 F1 | 	sub	objptr, ##562
16850     11 12 06 F6 | 	mov	arg01, #17
16854     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
16858                 | ' setspritesize(17,8,16)
16858     11 12 06 F6 | 	mov	arg01, #17
1685c     08 14 06 F6 | 	mov	arg02, #8
16860     10 16 06 F6 | 	mov	arg03, #16
16864     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
16868                 | ' setspritepos(17,0,0)
16868     11 12 06 F6 | 	mov	arg01, #17
1686c     00 14 06 F6 | 	mov	arg02, #0
16870     00 16 06 F6 | 	mov	arg03, #0
16874     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
16878     A7 F0 03 F6 | 	mov	ptra, fp
1687c     B2 00 A0 FD | 	call	#popregs_
16880                 | _hg010b_spin2_initcursor_ret
16880     2D 00 64 FD | 	ret
16884                 | 
16884                 | ' 
16884                 | '  
16884                 | ' pub setcursorcolor(color) |i
16884                 | _hg010b_spin2_setcursorcolor
16884                 | ' 
16884                 | ' 
16884                 | ' repeat i from 0 to 111
16884     00 00 06 F6 | 	mov	_var01, #0
16888     01 00 00 FF 
1688c     32 E4 05 F1 | 	add	objptr, ##562
16890     97 1A 48 FB | 	callpa	#(@LR__1712-@LR__1710)>>2,fcache_load_ptr_
16894                 | LR__1710
16894                 | '   cursor[i]:=0
16894     00 03 02 F6 | 	mov	_var02, _var01
16898     F2 02 02 F1 | 	add	_var02, objptr
1689c     01 01 48 FC | 	wrbyte	#0, _var02
168a0     01 00 06 F1 | 	add	_var01, #1
168a4     70 00 56 F2 | 	cmps	_var01, #112 wc
168a8     E8 FF 9F CD |  if_b	jmp	#LR__1710
168ac                 | ' repeat i from 112 to 127
168ac     70 00 06 F6 | 	mov	_var01, #112
168b0                 | LR__1711
168b0                 | '   cursor[i]:=color  
168b0     00 03 02 F6 | 	mov	_var02, _var01
168b4     F2 02 02 F1 | 	add	_var02, objptr
168b8     01 13 42 FC | 	wrbyte	arg01, _var02
168bc     01 00 06 F1 | 	add	_var01, #1
168c0     80 00 16 F2 | 	cmp	_var01, #128 wc
168c4     E8 FF 9F CD |  if_b	jmp	#LR__1711
168c8                 | LR__1712
168c8     01 00 00 FF 
168cc     32 E4 85 F1 | 	sub	objptr, ##562
168d0                 | _hg010b_spin2_setcursorcolor_ret
168d0     2D 00 64 FD | 	ret
168d4                 | 
168d4                 | '  
168d4                 | ' 
168d4                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
168d4                 | _hg010b_spin2_setmode
168d4     02 4A 05 F6 | 	mov	COUNT_, #2
168d8     A8 00 A0 FD | 	call	#pushregs_
168dc                 | ' 
168dc                 | ' 
168dc                 | ' dl_ptr:=@emptydl[0]
168dc     01 00 00 FF 
168e0     19 E4 05 F1 | 	add	objptr, ##537
168e4     F2 66 02 F6 | 	mov	muldivb_, objptr
168e8     FD E5 85 F1 | 	sub	objptr, #509
168ec     F2 66 62 FC | 	wrlong	muldivb_, objptr
168f0                 | ' 
168f0                 | ' if cog>0 
168f0     10 E4 05 F1 | 	add	objptr, #16
168f4     F2 66 02 FB | 	rdlong	muldivb_, objptr
168f8     2C E4 85 F1 | 	sub	objptr, #44
168fc     01 66 56 F2 | 	cmps	muldivb_, #1 wc
16900                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
16900     01 12 06 36 |  if_ae	mov	arg01, #1
16904     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
16908                 | ' xres:=1024
16908     01 00 00 FF 
1690c     22 E4 05 F1 | 	add	objptr, ##546
16910     02 00 80 FF 
16914     F2 00 68 FC | 	wrlong	##1024, objptr
16918                 | ' yres:=576  
16918     04 E4 05 F1 | 	add	objptr, #4
1691c     01 00 80 FF 
16920     F2 80 68 FC | 	wrlong	##576, objptr
16924                 | ' ppl:=(timings[3])
16924     10 00 00 FF 
16928     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1692c     F7 66 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
16930     51 E5 85 F1 | 	sub	objptr, #337
16934     F2 66 62 FC | 	wrlong	muldivb_, objptr
16938                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
16938     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1693c     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
16940     01 1E 66 F0 | 	shl	local01, #1
16944     80 E4 85 F1 | 	sub	objptr, #128
16948     F2 1E 62 FC | 	wrlong	local01, objptr
1694c                 | ' cpl1:=cpl '' todo remove
1694c     04 E4 05 F1 | 	add	objptr, #4
16950     F2 1E 62 FC | 	wrlong	local01, objptr
16954                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
16954     02 00 00 FF 
16958     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1695c     41 E4 85 F1 | 	sub	objptr, #65
16960     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
16964                 | ' repeat i from 0 to 3
16964     00 20 06 F6 | 	mov	local02, #0
16968     02 00 00 FF 
1696c     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
16970     08 E4 05 F1 | 	add	objptr, #8
16974     97 20 48 FB | 	callpa	#(@LR__1721-@LR__1720)>>2,fcache_load_ptr_
16978                 | LR__1720
16978                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
16978     10 1F 02 F6 | 	mov	local01, local02
1697c     02 1E 66 F0 | 	shl	local01, #2
16980     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
16984     F2 66 02 FB | 	rdlong	muldivb_, objptr
16988     11 66 66 F0 | 	shl	muldivb_, #17
1698c     0F 1F 02 FB | 	rdlong	local01, local01
16990     33 1F 02 F1 | 	add	local01, muldivb_
16994     80 40 38 FF 
16998     00 1E 06 F1 | 	add	local01, ##1887502336
1699c     10 67 02 F6 | 	mov	muldivb_, local02
169a0     02 66 66 F0 | 	shl	muldivb_, #2
169a4     F7 66 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
169a8     33 1F 62 FC | 	wrlong	local01, muldivb_
169ac     01 20 06 F1 | 	add	local02, #1
169b0     04 20 56 F2 | 	cmps	local02, #4 wc
169b4     C0 FF 9F CD |  if_b	jmp	#LR__1720
169b8                 | LR__1721
169b8     20 E4 85 F1 | 	sub	objptr, #32
169bc                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
169bc     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
169c0     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
169c4     14 1E 66 FC | 	wrlong	local01, #20
169c8                 | ' hubset(timings[10])
169c8     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
169cc     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
169d0     10 00 00 FF 
169d4     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
169d8     00 12 62 FD | 	hubset	arg01
169dc                 | ' waitms(1)                                                   	' wait for stabilization
169dc     01 12 06 F6 | 	mov	arg01, #1
169e0     C0 24 B0 FD | 	call	#__system___waitms
169e4     10 00 00 FF 
169e8     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
169ec     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
169f0     5D E4 05 F1 | 	add	objptr, #93
169f4     F2 20 62 FC | 	wrlong	local02, objptr
169f8     10 1F 52 F6 | 	abs	local01, local02 wc
169fc     04 1E 46 F0 | 	shr	local01, #4
16a00     0F 1F 82 F6 | 	negc	local01, local01
16a04     9C E4 05 F1 | 	add	objptr, #156
16a08     F2 1E 62 FC | 	wrlong	local01, objptr
16a0c     A4 E4 85 F1 | 	sub	objptr, #164
16a10     F2 20 02 FB | 	rdlong	local02, objptr
16a14     08 E4 05 F1 | 	add	objptr, #8
16a18     F2 1E 02 FB | 	rdlong	local01, objptr
16a1c     0F 21 02 FD | 	qmul	local02, local01
16a20                 | ' lines:=timings[11]
16a20                 | ' t_lines:=lines/16
16a20                 | ' buflen:=cpl*lines						' framebuffer length in longs
16a20     29 E4 85 F1 | 	sub	objptr, #41
16a24                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
16a24     19 1E C6 F9 | 	decod	local01, #25
16a28                 | ' mode_ptr:=@timings						' set pointers to timings
16a28     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
16a2c                 | ' graphmode:=1024+512+192+48							' det global variable
16a2c                 | ' makedl(graphmode)							' make a DL for the mode
16a2c     03 00 00 FF 
16a30     F0 12 06 F6 | 	mov	arg01, ##1776
16a34     18 20 62 FD | 	getqx	local02
16a38     F2 20 62 FC | 	wrlong	local02, objptr
16a3c     34 E4 85 F1 | 	sub	objptr, #52
16a40     02 20 66 F0 | 	shl	local02, #2
16a44     10 1F 82 F1 | 	sub	local01, local02
16a48     F2 1E 62 FC | 	wrlong	local01, objptr
16a4c     14 E4 05 F1 | 	add	objptr, #20
16a50     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
16a54     79 E4 05 F1 | 	add	objptr, #121
16a58     03 00 80 FF 
16a5c     F2 E0 69 FC | 	wrlong	##1776, objptr
16a60     8D E4 85 F1 | 	sub	objptr, #141
16a64     10 00 00 FF 
16a68     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
16a6c     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
16a70                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
16a70     F2 1E 02 FB | 	rdlong	local01, objptr
16a74     D9 E4 05 F1 | 	add	objptr, #217
16a78     F2 1E 62 FC | 	wrlong	local01, objptr
16a7c                 | ' s_font_ptr:=font_ptr
16a7c     D5 E4 85 F1 | 	sub	objptr, #213
16a80     F2 1E 02 FB | 	rdlong	local01, objptr
16a84     D9 E4 05 F1 | 	add	objptr, #217
16a88     F2 1E 62 FC | 	wrlong	local01, objptr
16a8c                 | ' s_lines:=lines
16a8c     80 E4 85 F1 | 	sub	objptr, #128
16a90     F2 1E 02 FB | 	rdlong	local01, objptr
16a94     84 E4 05 F1 | 	add	objptr, #132
16a98     F2 1E 62 FC | 	wrlong	local01, objptr
16a9c                 | ' s_buflen:=buflen
16a9c     AD E4 85 F1 | 	sub	objptr, #173
16aa0     F2 1E 02 FB | 	rdlong	local01, objptr
16aa4     B5 E4 05 F1 | 	add	objptr, #181
16aa8     F2 1E 62 FC | 	wrlong	local01, objptr
16aac                 | ' s_cpl:=cpl
16aac     94 E4 85 F1 | 	sub	objptr, #148
16ab0     F2 1E 02 FB | 	rdlong	local01, objptr
16ab4     90 E4 05 F1 | 	add	objptr, #144
16ab8     F2 1E 62 FC | 	wrlong	local01, objptr
16abc                 | ' s_cpl1:=cpl
16abc     90 E4 85 F1 | 	sub	objptr, #144
16ac0     F2 1E 02 FB | 	rdlong	local01, objptr
16ac4     98 E4 05 F1 | 	add	objptr, #152
16ac8     F2 1E 62 FC | 	wrlong	local01, objptr
16acc                 | ' st_lines:=t_lines
16acc     0C E4 05 F1 | 	add	objptr, #12
16ad0     F2 1E 02 FB | 	rdlong	local01, objptr
16ad4     04 E4 05 F1 | 	add	objptr, #4
16ad8     F2 1E 62 FC | 	wrlong	local01, objptr
16adc                 | ' ppl:=ppl/xzoom  
16adc     28 E4 85 F1 | 	sub	objptr, #40
16ae0     F2 64 02 FB | 	rdlong	muldiva_, objptr
16ae4     2C E4 05 F1 | 	add	objptr, #44
16ae8     F2 66 02 FB | 	rdlong	muldivb_, objptr
16aec     01 E5 85 F1 | 	sub	objptr, #257
16af0     BA 00 A0 FD | 	call	#divide_
16af4     D5 E4 05 F1 | 	add	objptr, #213
16af8     F2 66 62 FC | 	wrlong	muldivb_, objptr
16afc                 | ' s_ppl:=ppl
16afc     1C E4 05 F1 | 	add	objptr, #28
16b00     F2 66 62 FC | 	wrlong	muldivb_, objptr
16b04     F1 E4 85 F1 | 	sub	objptr, #241
16b08                 | ' waitms(20)							' wait 
16b08     14 12 06 F6 | 	mov	arg01, #20
16b0c     94 23 B0 FD | 	call	#__system___waitms
16b10     A7 F0 03 F6 | 	mov	ptra, fp
16b14     B2 00 A0 FD | 	call	#popregs_
16b18                 | _hg010b_spin2_setmode_ret
16b18     2D 00 64 FD | 	ret
16b1c                 | 
16b1c                 | ' 
16b1c                 | ' 
16b1c                 | ' '****************************************************************************************************************
16b1c                 | ' '                                                                                                             	*
16b1c                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
16b1c                 | ' '                                                                                                             	*
16b1c                 | ' '****************************************************************************************************************
16b1c                 | ' 
16b1c                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
16b1c                 | _hg010b_spin2_makedl
16b1c                 | ' 
16b1c                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
16b1c                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
16b1c                 | ' repeat i from 0 to 11                                                           ' clear DL
16b1c     00 00 06 F6 | 	mov	_var01, #0
16b20     E9 E5 05 F1 | 	add	objptr, #489
16b24     97 0E 48 FB | 	callpa	#(@LR__1731-@LR__1730)>>2,fcache_load_ptr_
16b28                 | LR__1730
16b28                 | '   displaylist[i]:=0 
16b28     00 03 02 F6 | 	mov	_var02, _var01
16b2c     02 02 66 F0 | 	shl	_var02, #2
16b30     F2 02 02 F1 | 	add	_var02, objptr
16b34     01 01 68 FC | 	wrlong	#0, _var02
16b38     01 00 06 F1 | 	add	_var01, #1
16b3c     0C 00 56 F2 | 	cmps	_var01, #12 wc
16b40     E4 FF 9F CD |  if_b	jmp	#LR__1730
16b44                 | LR__1731
16b44                 | '                         ' 
16b44                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
16b44     8C E5 85 F1 | 	sub	objptr, #396
16b48     F2 02 02 FB | 	rdlong	_var02, objptr
16b4c     14 02 66 F0 | 	shl	_var02, #20
16b50     01 02 06 F1 | 	add	_var02, #1
16b54     04 E4 85 F1 | 	sub	objptr, #4
16b58     F2 00 02 FB | 	rdlong	_var01, objptr
16b5c     02 00 66 F0 | 	shl	_var01, #2
16b60     04 00 66 F0 | 	shl	_var01, #4
16b64     00 03 02 F1 | 	add	_var02, _var01
16b68     90 E5 05 F1 | 	add	objptr, #400
16b6c     F2 02 62 FC | 	wrlong	_var02, objptr
16b70     E9 E5 85 F1 | 	sub	objptr, #489
16b74                 | ' displaylist[1]:=buf_ptr<<4+%10  
16b74     F2 02 02 FB | 	rdlong	_var02, objptr
16b78     04 02 66 F0 | 	shl	_var02, #4
16b7c     02 02 06 F1 | 	add	_var02, #2
16b80     ED E5 05 F1 | 	add	objptr, #493
16b84     F2 02 62 FC | 	wrlong	_var02, objptr
16b88                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
16b88     04 E4 85 F1 | 	sub	objptr, #4
16b8c     F2 02 02 F6 | 	mov	_var02, objptr
16b90     CD E5 85 F1 | 	sub	objptr, #461
16b94     F2 02 62 FC | 	wrlong	_var02, objptr
16b98     1C E4 85 F1 | 	sub	objptr, #28
16b9c                 | _hg010b_spin2_makedl_ret
16b9c     2D 00 64 FD | 	ret
16ba0                 | 
16ba0                 | ' 
16ba0                 | ' 
16ba0                 | ' '****************************************************************************************************************
16ba0                 | ' '                                                                        					*
16ba0                 | ' '  Graphic primitives                                                    					*
16ba0                 | ' '                                                                        					*
16ba0                 | ' '****************************************************************************************************************
16ba0                 | ' 
16ba0                 | ' pub setspriteptr(num,ptr)
16ba0                 | _hg010b_spin2_setspriteptr
16ba0                 | ' long[@spr1ptr+12*num]:=ptr
16ba0     0D E5 05 F1 | 	add	objptr, #269
16ba4     F2 00 02 F6 | 	mov	_var01, objptr
16ba8     09 03 02 F6 | 	mov	_var02, arg01
16bac     01 02 66 F0 | 	shl	_var02, #1
16bb0     09 03 02 F1 | 	add	_var02, arg01
16bb4     02 02 66 F0 | 	shl	_var02, #2
16bb8     01 01 02 F1 | 	add	_var01, _var02
16bbc     00 15 62 FC | 	wrlong	arg02, _var01
16bc0     0D E5 85 F1 | 	sub	objptr, #269
16bc4                 | _hg010b_spin2_setspriteptr_ret
16bc4     2D 00 64 FD | 	ret
16bc8                 | 
16bc8                 | ' 
16bc8                 | ' pub setspritepos(num,x,y)
16bc8                 | _hg010b_spin2_setspritepos
16bc8                 | ' word[@spr1ptr+12*num+4]:=x
16bc8     0D E5 05 F1 | 	add	objptr, #269
16bcc     F2 00 02 F6 | 	mov	_var01, objptr
16bd0     09 03 02 F6 | 	mov	_var02, arg01
16bd4     01 02 66 F0 | 	shl	_var02, #1
16bd8     09 03 02 F1 | 	add	_var02, arg01
16bdc     02 02 66 F0 | 	shl	_var02, #2
16be0     01 01 02 F1 | 	add	_var01, _var02
16be4     04 00 06 F1 | 	add	_var01, #4
16be8     00 15 52 FC | 	wrword	arg02, _var01
16bec                 | ' word[@spr1ptr+12*num+6]:=y
16bec     F2 00 02 F6 | 	mov	_var01, objptr
16bf0     09 03 02 F6 | 	mov	_var02, arg01
16bf4     01 02 66 F0 | 	shl	_var02, #1
16bf8     09 03 02 F1 | 	add	_var02, arg01
16bfc     02 02 66 F0 | 	shl	_var02, #2
16c00     01 01 02 F1 | 	add	_var01, _var02
16c04     06 00 06 F1 | 	add	_var01, #6
16c08     00 17 52 FC | 	wrword	arg03, _var01
16c0c     0D E5 85 F1 | 	sub	objptr, #269
16c10                 | _hg010b_spin2_setspritepos_ret
16c10     2D 00 64 FD | 	ret
16c14                 | 
16c14                 | ' 
16c14                 | ' pub setspritesize(num,w,h)
16c14                 | _hg010b_spin2_setspritesize
16c14                 | ' word[@spr1ptr+12*num+8]:=w
16c14     0D E5 05 F1 | 	add	objptr, #269
16c18     F2 00 02 F6 | 	mov	_var01, objptr
16c1c     09 03 02 F6 | 	mov	_var02, arg01
16c20     01 02 66 F0 | 	shl	_var02, #1
16c24     09 03 02 F1 | 	add	_var02, arg01
16c28     02 02 66 F0 | 	shl	_var02, #2
16c2c     01 01 02 F1 | 	add	_var01, _var02
16c30     08 00 06 F1 | 	add	_var01, #8
16c34     00 15 52 FC | 	wrword	arg02, _var01
16c38                 | ' word[@spr1ptr+12*num+10]:=h
16c38     F2 00 02 F6 | 	mov	_var01, objptr
16c3c     09 03 02 F6 | 	mov	_var02, arg01
16c40     01 02 66 F0 | 	shl	_var02, #1
16c44     09 03 02 F1 | 	add	_var02, arg01
16c48     02 02 66 F0 | 	shl	_var02, #2
16c4c     01 01 02 F1 | 	add	_var01, _var02
16c50     0A 00 06 F1 | 	add	_var01, #10
16c54     00 17 52 FC | 	wrword	arg03, _var01
16c58     0D E5 85 F1 | 	sub	objptr, #269
16c5c                 | _hg010b_spin2_setspritesize_ret
16c5c     2D 00 64 FD | 	ret
16c60                 | 
16c60                 | ' 
16c60                 | ' 
16c60                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
16c60                 | ' 
16c60                 | ' 
16c60                 | ' pub putpixel(x,y,c)
16c60                 | _hg010b_spin2_putpixel
16c60     04 4A 05 F6 | 	mov	COUNT_, #4
16c64     A8 00 A0 FD | 	call	#pushregs_
16c68     09 1F 02 F6 | 	mov	local01, arg01
16c6c                 | ' 
16c6c                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
16c6c     00 20 06 F6 | 	mov	local02, #0
16c70     00 1E 56 F2 | 	cmps	local01, #0 wc
16c74     01 20 66 36 |  if_ae	neg	local02, #1
16c78     E5 E4 05 F1 | 	add	objptr, #229
16c7c     F2 1A 02 FB | 	rdlong	arg05, objptr
16c80     02 1A 66 F0 | 	shl	arg05, #2
16c84     0D 1F 52 F2 | 	cmps	local01, arg05 wc
16c88     11 23 A2 F1 | 	subx	local03, local03
16c8c     11 21 02 F5 | 	and	local02, local03
16c90     00 22 06 F6 | 	mov	local03, #0
16c94     00 14 56 F2 | 	cmps	arg02, #0 wc
16c98     01 22 66 36 |  if_ae	neg	local03, #1
16c9c     11 21 02 F5 | 	and	local02, local03
16ca0     04 E4 85 F1 | 	sub	objptr, #4
16ca4     F2 22 02 FB | 	rdlong	local03, objptr
16ca8     E1 E4 85 F1 | 	sub	objptr, #225
16cac     11 15 52 F2 | 	cmps	arg02, local03 wc
16cb0     12 25 A2 F1 | 	subx	local04, local04
16cb4     12 21 CA F7 | 	test	local02, local04 wz
16cb8     48 00 90 AD |  if_e	jmp	#LR__1740
16cbc     D9 E4 05 F1 | 	add	objptr, #217
16cc0     F2 12 02 FB | 	rdlong	arg01, objptr
16cc4     14 E4 05 F1 | 	add	objptr, #20
16cc8     F2 24 02 FB | 	rdlong	local04, objptr
16ccc     02 24 66 F0 | 	shl	local04, #2
16cd0     0A 25 02 FD | 	qmul	local04, arg02
16cd4                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
16cd4     0B 15 02 F6 | 	mov	arg02, arg03
16cd8     01 16 06 F6 | 	mov	arg03, #1
16cdc     00 18 06 F6 | 	mov	arg04, #0
16ce0     01 1A 06 F6 | 	mov	arg05, #1
16ce4     0A 00 00 FF 
16ce8     D3 E5 05 F1 | 	add	objptr, ##5587
16cec     18 24 62 FD | 	getqx	local04
16cf0     0F 25 02 F1 | 	add	local04, local01
16cf4     12 13 02 F1 | 	add	arg01, local04
16cf8     FC 14 B0 FD | 	call	#_psram_spin2_fill
16cfc     0B 00 00 FF 
16d00     C0 E4 85 F1 | 	sub	objptr, ##5824
16d04                 | LR__1740
16d04     A7 F0 03 F6 | 	mov	ptra, fp
16d08     B2 00 A0 FD | 	call	#popregs_
16d0c                 | _hg010b_spin2_putpixel_ret
16d0c     2D 00 64 FD | 	ret
16d10                 | 
16d10                 | ' 
16d10                 | ' pub putpixel2(x,y,c)
16d10                 | _hg010b_spin2_putpixel2
16d10     02 4A 05 F6 | 	mov	COUNT_, #2
16d14     A8 00 A0 FD | 	call	#pushregs_
16d18     D9 E4 05 F1 | 	add	objptr, #217
16d1c     F2 1E 02 FB | 	rdlong	local01, objptr
16d20     14 E4 05 F1 | 	add	objptr, #20
16d24     F2 1A 02 FB | 	rdlong	arg05, objptr
16d28     02 1A 66 F0 | 	shl	arg05, #2
16d2c     0A 1B 02 FD | 	qmul	arg05, arg02
16d30                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
16d30     0B 15 02 F6 | 	mov	arg02, arg03
16d34     01 16 06 F6 | 	mov	arg03, #1
16d38     00 18 06 F6 | 	mov	arg04, #0
16d3c     01 1A 06 F6 | 	mov	arg05, #1
16d40     0A 00 00 FF 
16d44     D3 E5 05 F1 | 	add	objptr, ##5587
16d48     18 20 62 FD | 	getqx	local02
16d4c     09 21 02 F1 | 	add	local02, arg01
16d50     10 1F 02 F1 | 	add	local01, local02
16d54     0F 13 02 F6 | 	mov	arg01, local01
16d58     9C 14 B0 FD | 	call	#_psram_spin2_fill
16d5c     0B 00 00 FF 
16d60     C0 E4 85 F1 | 	sub	objptr, ##5824
16d64     A7 F0 03 F6 | 	mov	ptra, fp
16d68     B2 00 A0 FD | 	call	#popregs_
16d6c                 | _hg010b_spin2_putpixel2_ret
16d6c     2D 00 64 FD | 	ret
16d70                 | 
16d70                 | ' 
16d70                 | ' pub getpixel2(x,y): c 
16d70                 | _hg010b_spin2_getpixel2
16d70     02 4A 05 F6 | 	mov	COUNT_, #2
16d74     A8 00 A0 FD | 	call	#pushregs_
16d78     0C F0 07 F1 | 	add	ptra, #12
16d7c     04 4E 05 F1 | 	add	fp, #4
16d80     A7 12 62 FC | 	wrlong	arg01, fp
16d84     04 4E 05 F1 | 	add	fp, #4
16d88     A7 14 62 FC | 	wrlong	arg02, fp
16d8c     08 4E 85 F1 | 	sub	fp, #8
16d90     A7 00 68 FC | 	wrlong	#0, fp
16d94     A7 12 02 F6 | 	mov	arg01, fp
16d98     D9 E4 05 F1 | 	add	objptr, #217
16d9c     F2 14 02 FB | 	rdlong	arg02, objptr
16da0     14 E4 05 F1 | 	add	objptr, #20
16da4     F2 16 02 FB | 	rdlong	arg03, objptr
16da8     02 16 66 F0 | 	shl	arg03, #2
16dac     08 4E 05 F1 | 	add	fp, #8
16db0     A7 FA 01 FB | 	rdlong	result1, fp
16db4     FD 16 02 FD | 	qmul	arg03, result1
16db8                 | ' 
16db8                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
16db8     04 4E 85 F1 | 	sub	fp, #4
16dbc     A7 1E 02 FB | 	rdlong	local01, fp
16dc0     04 4E 85 F1 | 	sub	fp, #4
16dc4     01 16 06 F6 | 	mov	arg03, #1
16dc8     0A 00 00 FF 
16dcc     D3 E5 05 F1 | 	add	objptr, ##5587
16dd0     18 20 62 FD | 	getqx	local02
16dd4     0F 21 02 F1 | 	add	local02, local01
16dd8     10 15 02 F1 | 	add	arg02, local02
16ddc     E0 12 B0 FD | 	call	#_psram_spin2_read1
16de0     0B 00 00 FF 
16de4     C0 E4 85 F1 | 	sub	objptr, ##5824
16de8                 | ' return c
16de8     A7 FA 01 FB | 	rdlong	result1, fp
16dec     A7 F0 03 F6 | 	mov	ptra, fp
16df0     B2 00 A0 FD | 	call	#popregs_
16df4                 | _hg010b_spin2_getpixel2_ret
16df4     2D 00 64 FD | 	ret
16df8                 | 
16df8                 | '   
16df8                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
16df8                 | ' 
16df8                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
16df8                 | _hg010b_spin2_fastline
16df8     02 4A 05 F6 | 	mov	COUNT_, #2
16dfc     A8 00 A0 FD | 	call	#pushregs_
16e00     09 1F 02 F6 | 	mov	local01, arg01
16e04     0A 21 02 F6 | 	mov	local02, arg02
16e08                 | ' 
16e08                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
16e08     00 16 56 F2 | 	cmps	arg03, #0 wc
16e0c     F4 00 90 CD |  if_b	jmp	#LR__1750
16e10     01 00 00 FF 
16e14     26 E4 05 F1 | 	add	objptr, ##550
16e18     F2 1A 02 FB | 	rdlong	arg05, objptr
16e1c     01 00 00 FF 
16e20     26 E4 85 F1 | 	sub	objptr, ##550
16e24     0D 17 52 F2 | 	cmps	arg03, arg05 wc
16e28     D8 00 90 3D |  if_ae	jmp	#LR__1750
16e2c     00 1E 56 F2 | 	cmps	local01, #0 wc
16e30     00 20 56 C2 |  if_b	cmps	local02, #0 wc
16e34     CC 00 90 CD |  if_b	jmp	#LR__1750
16e38     01 00 00 FF 
16e3c     22 E4 05 F1 | 	add	objptr, ##546
16e40     F2 1A 02 FB | 	rdlong	arg05, objptr
16e44     01 00 00 FF 
16e48     22 E4 85 F1 | 	sub	objptr, ##546
16e4c     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
16e50     01 00 00 1F 
16e54     22 E4 05 11 |  if_a	add	objptr, ##546
16e58     F2 12 02 1B |  if_a	rdlong	arg01, objptr
16e5c     01 00 00 1F 
16e60     22 E4 85 11 |  if_a	sub	objptr, ##546
16e64     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
16e68                 | '   return
16e68     98 00 90 1D |  if_a	jmp	#LR__1750
16e6c     10 1F 5A F2 | 	cmps	local01, local02 wcz
16e70     0F 1B 02 16 |  if_a	mov	arg05, local01
16e74     10 1F 02 16 |  if_a	mov	local01, local02
16e78     0D 21 02 16 |  if_a	mov	local02, arg05
16e7c     00 1E 56 F2 | 	cmps	local01, #0 wc
16e80     00 1E 06 C6 |  if_b	mov	local01, #0
16e84     01 00 00 FF 
16e88     22 E4 05 F1 | 	add	objptr, ##546
16e8c     F2 1A 02 FB | 	rdlong	arg05, objptr
16e90     01 00 00 FF 
16e94     22 E4 85 F1 | 	sub	objptr, ##546
16e98     0D 21 52 F2 | 	cmps	local02, arg05 wc
16e9c     01 00 00 3F 
16ea0     22 E4 05 31 |  if_ae	add	objptr, ##546
16ea4     F2 20 02 3B |  if_ae	rdlong	local02, objptr
16ea8     01 00 00 3F 
16eac     22 E4 85 31 |  if_ae	sub	objptr, ##546
16eb0     D9 E4 05 F1 | 	add	objptr, #217
16eb4     F2 12 02 FB | 	rdlong	arg01, objptr
16eb8     14 E4 05 F1 | 	add	objptr, #20
16ebc     F2 1A 02 FB | 	rdlong	arg05, objptr
16ec0     02 1A 66 F0 | 	shl	arg05, #2
16ec4     0B 1B 02 FD | 	qmul	arg05, arg03
16ec8                 | ' if x1>x2
16ec8                 | '   x1,x2:=x2,x1
16ec8                 | ' if x1<0 
16ec8                 | '   x1:=0
16ec8                 | ' if x2>=xres
16ec8                 | '   x2:=xres-1  
16ec8     01 20 86 31 |  if_ae	sub	local02, #1
16ecc                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
16ecc     01 16 06 F6 | 	mov	arg03, #1
16ed0     10 17 02 F1 | 	add	arg03, local02
16ed4     0F 17 82 F1 | 	sub	arg03, local01
16ed8     0C 15 02 F6 | 	mov	arg02, arg04
16edc     00 18 06 F6 | 	mov	arg04, #0
16ee0     01 1A 06 F6 | 	mov	arg05, #1
16ee4     0A 00 00 FF 
16ee8     D3 E5 05 F1 | 	add	objptr, ##5587
16eec     18 20 62 FD | 	getqx	local02
16ef0     0F 21 02 F1 | 	add	local02, local01
16ef4     10 13 02 F1 | 	add	arg01, local02
16ef8     FC 12 B0 FD | 	call	#_psram_spin2_fill
16efc     0B 00 00 FF 
16f00     C0 E4 85 F1 | 	sub	objptr, ##5824
16f04                 | LR__1750
16f04     A7 F0 03 F6 | 	mov	ptra, fp
16f08     B2 00 A0 FD | 	call	#popregs_
16f0c                 | _hg010b_spin2_fastline_ret
16f0c     2D 00 64 FD | 	ret
16f10                 | 
16f10                 | ' 
16f10                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
16f10                 | _hg010b_spin2_draw
16f10     0E 4A 05 F6 | 	mov	COUNT_, #14
16f14     A8 00 A0 FD | 	call	#pushregs_
16f18     09 1F 02 F6 | 	mov	local01, arg01
16f1c     0A 21 02 F6 | 	mov	local02, arg02
16f20     0B 23 02 F6 | 	mov	local03, arg03
16f24     0C 25 02 F6 | 	mov	local04, arg04
16f28     0D 27 02 F6 | 	mov	local05, arg05
16f2c                 | ' 
16f2c                 | ' if (y1==y2)
16f2c     12 21 0A F2 | 	cmp	local02, local04 wz
16f30     18 00 90 5D |  if_ne	jmp	#LR__1760
16f34                 | '   fastline(x1,x2,y1,c)
16f34     0F 13 02 F6 | 	mov	arg01, local01
16f38     11 15 02 F6 | 	mov	arg02, local03
16f3c     10 17 02 F6 | 	mov	arg03, local02
16f40     13 19 02 F6 | 	mov	arg04, local05
16f44     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
16f48     F8 00 90 FD | 	jmp	#LR__1766
16f4c                 | LR__1760
16f4c                 | ' else  
16f4c                 | '   x:=x1
16f4c     0F 29 02 F6 | 	mov	local06, local01
16f50                 | '   y:=y1
16f50     10 2B 02 F6 | 	mov	local07, local02
16f54                 | ' 
16f54                 | '   if (x1<x2) 
16f54     11 1F 52 F2 | 	cmps	local01, local03 wc
16f58                 | '     xi:=1
16f58     01 2C 06 C6 |  if_b	mov	local08, #1
16f5c                 | '     dx:=x2-x1
16f5c     11 2F 02 C6 |  if_b	mov	local09, local03
16f60     0F 2F 82 C1 |  if_b	sub	local09, local01
16f64                 | '   else
16f64                 | '     xi:=-1
16f64     01 2C 66 36 |  if_ae	neg	local08, #1
16f68                 | '     dx:=x1-x2
16f68     11 1F 82 31 |  if_ae	sub	local01, local03
16f6c     0F 2F 02 36 |  if_ae	mov	local09, local01
16f70                 | '   
16f70                 | '   if (y1<y2) 
16f70     12 21 52 F2 | 	cmps	local02, local04 wc
16f74                 | '     yi:=1
16f74     01 30 06 C6 |  if_b	mov	local10, #1
16f78                 | '     dy:=y2-y1
16f78     12 33 02 C6 |  if_b	mov	local11, local04
16f7c     10 33 82 C1 |  if_b	sub	local11, local02
16f80                 | '   else
16f80                 | '     yi:=-1
16f80     01 30 66 36 |  if_ae	neg	local10, #1
16f84                 | '     dy:=y1-y2
16f84     12 21 82 31 |  if_ae	sub	local02, local04
16f88     10 33 02 36 |  if_ae	mov	local11, local02
16f8c                 | ' 
16f8c                 | '   putpixel(x,y,c)
16f8c     13 17 02 F6 | 	mov	arg03, local05
16f90     14 13 02 F6 | 	mov	arg01, local06
16f94     15 15 02 F6 | 	mov	arg02, local07
16f98     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
16f9c                 | ' 
16f9c                 | '   if (dx>dy)
16f9c     19 2F 5A F2 | 	cmps	local09, local11 wcz
16fa0     50 00 90 ED |  if_be	jmp	#LR__1762
16fa4                 | '     ai:=(dy-dx)*2
16fa4     19 35 02 F6 | 	mov	local12, local11
16fa8     17 35 82 F1 | 	sub	local12, local09
16fac     01 34 66 F0 | 	shl	local12, #1
16fb0                 | '     bi:=dy*2
16fb0     01 32 66 F0 | 	shl	local11, #1
16fb4     19 37 02 F6 | 	mov	local13, local11
16fb8                 | '     d:= bi-dx
16fb8     1B 39 02 F6 | 	mov	local14, local13
16fbc     17 39 82 F1 | 	sub	local14, local09
16fc0                 | '     repeat while (x<>x2) 
16fc0                 | LR__1761
16fc0     11 29 0A F2 | 	cmp	local06, local03 wz
16fc4     7C 00 90 AD |  if_e	jmp	#LR__1765
16fc8                 | '       if (d>=0) 
16fc8     00 38 56 F2 | 	cmps	local14, #0 wc
16fcc                 | '         x+=xi
16fcc     16 29 02 31 |  if_ae	add	local06, local08
16fd0                 | '         y+=yi
16fd0     18 2B 02 31 |  if_ae	add	local07, local10
16fd4                 | '         d+=ai
16fd4     1A 39 02 31 |  if_ae	add	local14, local12
16fd8                 | '       else
16fd8                 | '         d+=bi
16fd8     1B 39 02 C1 |  if_b	add	local14, local13
16fdc                 | '         x+=xi
16fdc     16 29 02 C1 |  if_b	add	local06, local08
16fe0                 | '       putpixel(x,y,c)
16fe0     14 13 02 F6 | 	mov	arg01, local06
16fe4     15 15 02 F6 | 	mov	arg02, local07
16fe8     13 17 02 F6 | 	mov	arg03, local05
16fec     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
16ff0     CC FF 9F FD | 	jmp	#LR__1761
16ff4                 | LR__1762
16ff4                 | '   else
16ff4                 | '     ai:=(dx-dy)*2
16ff4     17 35 02 F6 | 	mov	local12, local09
16ff8     19 35 82 F1 | 	sub	local12, local11
16ffc     01 34 66 F0 | 	shl	local12, #1
17000                 | '     bi:=dx*2
17000     01 2E 66 F0 | 	shl	local09, #1
17004     17 37 02 F6 | 	mov	local13, local09
17008                 | '     d:=bi-dy
17008     1B 39 02 F6 | 	mov	local14, local13
1700c     19 39 82 F1 | 	sub	local14, local11
17010                 | '     repeat while (y<>y2)
17010                 | LR__1763
17010     12 2B 0A F2 | 	cmp	local07, local04 wz
17014     2C 00 90 AD |  if_e	jmp	#LR__1764
17018                 | '       if (d>=0)
17018     00 38 56 F2 | 	cmps	local14, #0 wc
1701c                 | '         x+=xi
1701c     16 29 02 31 |  if_ae	add	local06, local08
17020                 | '         y+=yi
17020     18 2B 02 31 |  if_ae	add	local07, local10
17024                 | '         d+=ai
17024     1A 39 02 31 |  if_ae	add	local14, local12
17028                 | '       else
17028                 | '         d+=bi
17028     1B 39 02 C1 |  if_b	add	local14, local13
1702c                 | '         y+=yi
1702c     18 2B 02 C1 |  if_b	add	local07, local10
17030                 | '       putpixel(x, y,c)
17030     14 13 02 F6 | 	mov	arg01, local06
17034     15 15 02 F6 | 	mov	arg02, local07
17038     13 17 02 F6 | 	mov	arg03, local05
1703c     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
17040     CC FF 9F FD | 	jmp	#LR__1763
17044                 | LR__1764
17044                 | LR__1765
17044                 | LR__1766
17044     A7 F0 03 F6 | 	mov	ptra, fp
17048     B2 00 A0 FD | 	call	#popregs_
1704c                 | _hg010b_spin2_draw_ret
1704c     2D 00 64 FD | 	ret
17050                 | 
17050                 | '  
17050                 | ' pub fillpush(val) 
17050                 | _hg010b_spin2_fillpush
17050                 | ' fillstack[fillptr]:=val
17050     0B 00 00 FF 
17054     B6 E4 05 F1 | 	add	objptr, ##5814
17058     F2 00 02 FB | 	rdlong	_var01, objptr
1705c     02 00 66 F0 | 	shl	_var01, #2
17060     0A 00 00 FF 
17064     00 E4 85 F1 | 	sub	objptr, ##5120
17068     F2 00 02 F1 | 	add	_var01, objptr
1706c     00 13 62 FC | 	wrlong	arg01, _var01
17070                 | ' fillptr+=1   
17070     0A 00 00 FF 
17074     00 E4 05 F1 | 	add	objptr, ##5120
17078     F2 00 02 FB | 	rdlong	_var01, objptr
1707c     01 00 06 F1 | 	add	_var01, #1
17080     F2 00 62 FC | 	wrlong	_var01, objptr
17084     0B 00 00 FF 
17088     B6 E4 85 F1 | 	sub	objptr, ##5814
1708c                 | _hg010b_spin2_fillpush_ret
1708c     2D 00 64 FD | 	ret
17090                 | 
17090                 | ' 
17090                 | '     
17090                 | ' pub fillpop() : val
17090                 | _hg010b_spin2_fillpop
17090                 | ' 
17090                 | ' fillptr-=1
17090     0B 00 00 FF 
17094     B6 E4 05 F1 | 	add	objptr, ##5814
17098     F2 FA 01 FB | 	rdlong	result1, objptr
1709c     01 FA 85 F1 | 	sub	result1, #1
170a0     F2 FA 61 FC | 	wrlong	result1, objptr
170a4                 | ' if fillptr<0
170a4     0B 00 00 FF 
170a8     B6 E4 85 F1 | 	sub	objptr, ##5814
170ac     00 FA 55 F2 | 	cmps	result1, #0 wc
170b0                 | '   fillptr:=0
170b0     0B 00 00 CF 
170b4     B6 E4 05 C1 |  if_b	add	objptr, ##5814
170b8     F2 00 68 CC |  if_b	wrlong	#0, objptr
170bc     0B 00 00 CF 
170c0     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
170c4                 | '   val:=-12345
170c4     E7 FF 7F CF 
170c8     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
170cc     28 00 90 CD |  if_b	jmp	#LR__1770
170d0                 | ' else 
170d0                 | '   val:=fillstack[fillptr]
170d0     0B 00 00 FF 
170d4     B6 E4 05 F1 | 	add	objptr, ##5814
170d8     F2 00 02 FB | 	rdlong	_var01, objptr
170dc     02 00 66 F0 | 	shl	_var01, #2
170e0     0A 00 00 FF 
170e4     00 E4 85 F1 | 	sub	objptr, ##5120
170e8     F2 00 02 F1 | 	add	_var01, objptr
170ec     00 01 02 FB | 	rdlong	_var01, _var01
170f0     01 00 00 FF 
170f4     B6 E4 85 F1 | 	sub	objptr, ##694
170f8                 | LR__1770
170f8                 | ' return val
170f8     00 FB 01 F6 | 	mov	result1, _var01
170fc                 | _hg010b_spin2_fillpop_ret
170fc     2D 00 64 FD | 	ret
17100                 | 
17100                 | ' 
17100                 | '       
17100                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
17100                 | _hg010b_spin2_fill
17100     0B 4A 05 F6 | 	mov	COUNT_, #11
17104     A8 00 A0 FD | 	call	#pushregs_
17108                 | ' 
17108                 | ' newcolor:=newcolor & 255
17108     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1710c                 | ' oldcolor:=oldcolor & 255
1710c     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
17110                 | ' 
17110                 | ' if (oldcolor == newcolor) 
17110     0F 21 0A F2 | 	cmp	local02, local01 wz
17114                 | '   return
17114     70 02 90 AD |  if_e	jmp	#LR__1789
17118                 | ' 
17118                 | ' fillptr:=0
17118     0B 00 00 FF 
1711c     B6 E4 05 F1 | 	add	objptr, ##5814
17120     F2 00 68 FC | 	wrlong	#0, objptr
17124                 | ' fillmax:=0
17124     04 E4 05 F1 | 	add	objptr, #4
17128     F2 00 68 FC | 	wrlong	#0, objptr
1712c     0B 00 00 FF 
17130     BA E4 85 F1 | 	sub	objptr, ##5818
17134                 | ' fillpush(x)
17134     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
17138                 | ' fillpush(y)
17138     0A 13 02 F6 | 	mov	arg01, arg02
1713c     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
17140                 | ' y:=fillpop()
17140     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
17144     FD 22 02 F6 | 	mov	local03, result1
17148                 | ' x:=fillpop()
17148     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1714c     FD 24 02 F6 | 	mov	local04, result1
17150                 | ' 'pinhigh(38)
17150                 | ' repeat while (x>-1)       
17150                 | LR__1780
17150     00 24 56 F2 | 	cmps	local04, #0 wc
17154     30 02 90 CD |  if_b	jmp	#LR__1788
17158                 | '  ' pintoggle(39)
17158                 | '   x1 := x
17158     12 27 02 F6 | 	mov	local05, local04
1715c                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1715c                 | LR__1781
1715c     00 28 06 F6 | 	mov	local06, #0
17160     00 2A 06 F6 | 	mov	local07, #0
17164     00 26 56 F2 | 	cmps	local05, #0 wc
17168     01 2A 66 36 |  if_ae	neg	local07, #1
1716c     00 2A 0E F2 | 	cmp	local07, #0 wz
17170     00 28 26 56 |  if_ne	not	local06, #0
17174     00 2C 06 F6 | 	mov	local08, #0
17178     00 2E 06 F6 | 	mov	local09, #0
1717c     11 15 02 F6 | 	mov	arg02, local03
17180     13 13 02 F6 | 	mov	arg01, local05
17184     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
17188     10 FB 09 F2 | 	cmp	result1, local02 wz
1718c     00 2E 26 A6 |  if_e	not	local09, #0
17190     00 2E 0E F2 | 	cmp	local09, #0 wz
17194     00 2C 26 56 |  if_ne	not	local08, #0
17198     16 29 CA F7 | 	test	local06, local08 wz
1719c                 | '     x1--
1719c     01 26 86 51 |  if_ne	sub	local05, #1
171a0     B8 FF 9F 5D |  if_ne	jmp	#LR__1781
171a4                 | '   x1++
171a4     01 26 06 F1 | 	add	local05, #1
171a8                 | '   spanabove := 0
171a8     00 30 06 F6 | 	mov	local10, #0
171ac                 | '   spanbelow := 0
171ac     00 32 06 F6 | 	mov	local11, #0
171b0                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
171b0                 | LR__1782
171b0     00 28 06 F6 | 	mov	local06, #0
171b4     02 00 00 FF 
171b8     00 26 56 F2 | 	cmps	local05, ##1024 wc
171bc     00 28 26 C6 |  if_b	not	local06, #0
171c0     00 2C 06 F6 | 	mov	local08, #0
171c4     00 2E 06 F6 | 	mov	local09, #0
171c8     11 15 02 F6 | 	mov	arg02, local03
171cc     13 13 02 F6 | 	mov	arg01, local05
171d0     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
171d4     10 FB 09 F2 | 	cmp	result1, local02 wz
171d8     00 2E 26 A6 |  if_e	not	local09, #0
171dc     00 2E 0E F2 | 	cmp	local09, #0 wz
171e0     00 2C 26 56 |  if_ne	not	local08, #0
171e4     16 29 CA F7 | 	test	local06, local08 wz
171e8     88 01 90 AD |  if_e	jmp	#LR__1787
171ec                 | '     putpixel2 (x1,y, newcolor & 255)
171ec     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
171f0     13 13 02 F6 | 	mov	arg01, local05
171f4     11 15 02 F6 | 	mov	arg02, local03
171f8     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
171fc                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
171fc     00 28 06 F6 | 	mov	local06, #0
17200     00 2A 06 F6 | 	mov	local07, #0
17204     00 30 0E F2 | 	cmp	local10, #0 wz
17208     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1720c     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
17210     00 2A 0E F2 | 	cmp	local07, #0 wz
17214     00 28 26 56 |  if_ne	not	local06, #0
17218     00 2C 06 F6 | 	mov	local08, #0
1721c     00 2E 06 F6 | 	mov	local09, #0
17220     11 15 02 F6 | 	mov	arg02, local03
17224     01 14 86 F1 | 	sub	arg02, #1
17228     13 13 02 F6 | 	mov	arg01, local05
1722c     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
17230     10 FB 09 F2 | 	cmp	result1, local02 wz
17234     00 2E 26 A6 |  if_e	not	local09, #0
17238     00 2E 0E F2 | 	cmp	local09, #0 wz
1723c     00 2C 26 56 |  if_ne	not	local08, #0
17240     16 29 CA F7 | 	test	local06, local08 wz
17244     1C 00 90 AD |  if_e	jmp	#LR__1783
17248                 | '       fillpush(x1)
17248     13 13 02 F6 | 	mov	arg01, local05
1724c     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
17250                 | '       fillpush(y-1)
17250     11 13 02 F6 | 	mov	arg01, local03
17254     01 12 86 F1 | 	sub	arg01, #1
17258     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1725c                 | '       spanabove := 1 
1725c     01 30 06 F6 | 	mov	local10, #1
17260     4C 00 90 FD | 	jmp	#LR__1784
17264                 | LR__1783
17264                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
17264     00 28 06 F6 | 	mov	local06, #0
17268     00 2A 06 F6 | 	mov	local07, #0
1726c     00 30 0E F2 | 	cmp	local10, #0 wz
17270     01 22 56 52 |  if_ne	cmps	local03, #1 wc
17274     01 2A 66 16 |  if_a	neg	local07, #1
17278     00 2A 0E F2 | 	cmp	local07, #0 wz
1727c     00 28 26 56 |  if_ne	not	local06, #0
17280     00 2C 06 F6 | 	mov	local08, #0
17284     00 2E 06 F6 | 	mov	local09, #0
17288     11 15 02 F6 | 	mov	arg02, local03
1728c     01 14 86 F1 | 	sub	arg02, #1
17290     13 13 02 F6 | 	mov	arg01, local05
17294     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
17298     10 FB 09 F2 | 	cmp	result1, local02 wz
1729c     00 2E 26 56 |  if_ne	not	local09, #0
172a0     00 2E 0E F2 | 	cmp	local09, #0 wz
172a4     00 2C 26 56 |  if_ne	not	local08, #0
172a8     16 29 CA F7 | 	test	local06, local08 wz
172ac                 | '       spanabove := 0 
172ac     00 30 06 56 |  if_ne	mov	local10, #0
172b0                 | LR__1784
172b0                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
172b0     00 28 06 F6 | 	mov	local06, #0
172b4     00 2A 06 F6 | 	mov	local07, #0
172b8     00 32 0E F2 | 	cmp	local11, #0 wz
172bc     01 00 00 AF 
172c0     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
172c4     01 2A 66 86 |  if_c_and_z	neg	local07, #1
172c8     00 2A 0E F2 | 	cmp	local07, #0 wz
172cc     00 28 26 56 |  if_ne	not	local06, #0
172d0     00 2C 06 F6 | 	mov	local08, #0
172d4     00 2E 06 F6 | 	mov	local09, #0
172d8     11 15 02 F6 | 	mov	arg02, local03
172dc     01 14 06 F1 | 	add	arg02, #1
172e0     13 13 02 F6 | 	mov	arg01, local05
172e4     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
172e8     10 FB 09 F2 | 	cmp	result1, local02 wz
172ec     00 2E 26 A6 |  if_e	not	local09, #0
172f0     00 2E 0E F2 | 	cmp	local09, #0 wz
172f4     00 2C 26 56 |  if_ne	not	local08, #0
172f8     16 29 CA F7 | 	test	local06, local08 wz
172fc     1C 00 90 AD |  if_e	jmp	#LR__1785
17300                 | '       fillpush(x1)
17300     13 13 02 F6 | 	mov	arg01, local05
17304     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
17308                 | '       fillpush(y + 1)
17308     11 13 02 F6 | 	mov	arg01, local03
1730c     01 12 06 F1 | 	add	arg01, #1
17310     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
17314                 | '       spanBelow := 1
17314     01 32 06 F6 | 	mov	local11, #1
17318     50 00 90 FD | 	jmp	#LR__1786
1731c                 | LR__1785
1731c                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1731c     00 28 06 F6 | 	mov	local06, #0
17320     00 2A 06 F6 | 	mov	local07, #0
17324     00 32 0E F2 | 	cmp	local11, #0 wz
17328     01 00 00 5F 
1732c     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
17330     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
17334     00 2A 0E F2 | 	cmp	local07, #0 wz
17338     00 28 26 56 |  if_ne	not	local06, #0
1733c     00 2C 06 F6 | 	mov	local08, #0
17340     00 2E 06 F6 | 	mov	local09, #0
17344     11 15 02 F6 | 	mov	arg02, local03
17348     01 14 06 F1 | 	add	arg02, #1
1734c     13 13 02 F6 | 	mov	arg01, local05
17350     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
17354     10 FB 09 F2 | 	cmp	result1, local02 wz
17358     00 2E 26 56 |  if_ne	not	local09, #0
1735c     00 2E 0E F2 | 	cmp	local09, #0 wz
17360     00 2C 26 56 |  if_ne	not	local08, #0
17364     16 29 CA F7 | 	test	local06, local08 wz
17368                 | '       spanbelow := 0
17368     00 32 06 56 |  if_ne	mov	local11, #0
1736c                 | LR__1786
1736c                 | '     x1++
1736c     01 26 06 F1 | 	add	local05, #1
17370     3C FE 9F FD | 	jmp	#LR__1782
17374                 | LR__1787
17374                 | '   y:=fillpop()
17374     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
17378     FD 22 02 F6 | 	mov	local03, result1
1737c                 | '   x:=fillpop()
1737c     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
17380     FD 24 02 F6 | 	mov	local04, result1
17384     C8 FD 9F FD | 	jmp	#LR__1780
17388                 | LR__1788
17388                 | LR__1789
17388     A7 F0 03 F6 | 	mov	ptra, fp
1738c     B2 00 A0 FD | 	call	#popregs_
17390                 | _hg010b_spin2_fill_ret
17390     2D 00 64 FD | 	ret
17394                 | 
17394                 | ' 'pinlow(38)    
17394                 | ' 
17394                 | ' '-- A filled circle -----------------------------------------------------
17394                 | ' 
17394                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
17394                 | _hg010b_spin2_fcircle
17394     08 4A 05 F6 | 	mov	COUNT_, #8
17398     A8 00 A0 FD | 	call	#pushregs_
1739c     0B 1F 02 F6 | 	mov	local01, arg03
173a0     FF FF 7F FF 
173a4     FE 1F 06 FD | 	qmul	local01, ##-2
173a8     09 21 02 F6 | 	mov	local02, arg01
173ac     0A 23 02 F6 | 	mov	local03, arg02
173b0     0C 25 02 F6 | 	mov	local04, arg04
173b4                 | ' 
173b4                 | ' d:=5-4*r
173b4     0F 19 02 F6 | 	mov	arg04, local01
173b8     02 18 66 F0 | 	shl	arg04, #2
173bc     05 26 06 F6 | 	mov	local05, #5
173c0     0C 27 82 F1 | 	sub	local05, arg04
173c4                 | ' x:=0
173c4     00 28 06 F6 | 	mov	local06, #0
173c8                 | ' y:=r
173c8                 | ' da:=(-2*r+5)*4
173c8                 | ' db:=3*4
173c8     0C 2A 06 F6 | 	mov	local07, #12
173cc                 | ' repeat while (x<=y) 
173cc     18 2C 62 FD | 	getqx	local08
173d0     05 2C 06 F1 | 	add	local08, #5
173d4     02 2C 66 F0 | 	shl	local08, #2
173d8                 | LR__1790
173d8     0F 29 5A F2 | 	cmps	local06, local01 wcz
173dc     B4 00 90 1D |  if_a	jmp	#LR__1792
173e0                 | '   fastline(x0-x,x0+x,y0-y,c)
173e0     10 13 02 F6 | 	mov	arg01, local02
173e4     14 13 82 F1 | 	sub	arg01, local06
173e8     10 15 02 F6 | 	mov	arg02, local02
173ec     14 15 02 F1 | 	add	arg02, local06
173f0     11 17 02 F6 | 	mov	arg03, local03
173f4     0F 17 82 F1 | 	sub	arg03, local01
173f8     12 19 02 F6 | 	mov	arg04, local04
173fc     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
17400                 | '   fastline(x0-x,x0+x,y0+y,c)
17400     10 13 02 F6 | 	mov	arg01, local02
17404     14 13 82 F1 | 	sub	arg01, local06
17408     10 15 02 F6 | 	mov	arg02, local02
1740c     14 15 02 F1 | 	add	arg02, local06
17410     11 17 02 F6 | 	mov	arg03, local03
17414     0F 17 02 F1 | 	add	arg03, local01
17418     12 19 02 F6 | 	mov	arg04, local04
1741c     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
17420                 | '   fastline(x0-y,x0+y,y0-x,c)
17420     10 13 02 F6 | 	mov	arg01, local02
17424     0F 13 82 F1 | 	sub	arg01, local01
17428     10 15 02 F6 | 	mov	arg02, local02
1742c     0F 15 02 F1 | 	add	arg02, local01
17430     11 17 02 F6 | 	mov	arg03, local03
17434     14 17 82 F1 | 	sub	arg03, local06
17438     12 19 02 F6 | 	mov	arg04, local04
1743c     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
17440                 | '   fastline(x0-y,x0+y,y0+x,c)
17440     10 13 02 F6 | 	mov	arg01, local02
17444     0F 13 82 F1 | 	sub	arg01, local01
17448     10 15 02 F6 | 	mov	arg02, local02
1744c     0F 15 02 F1 | 	add	arg02, local01
17450     11 17 02 F6 | 	mov	arg03, local03
17454     14 17 02 F1 | 	add	arg03, local06
17458     12 19 02 F6 | 	mov	arg04, local04
1745c     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
17460                 | '   if d>0 
17460     01 26 56 F2 | 	cmps	local05, #1 wc
17464     18 00 90 CD |  if_b	jmp	#LR__1791
17468                 | '     d+=da
17468     16 27 02 F1 | 	add	local05, local08
1746c                 | '     y-=1
1746c     01 1E 86 F1 | 	sub	local01, #1
17470                 | '     x+=1
17470     01 28 06 F1 | 	add	local06, #1
17474                 | '     da+=4*4
17474     10 2C 06 F1 | 	add	local08, #16
17478                 | '     db+=2*4
17478     08 2A 06 F1 | 	add	local07, #8
1747c     58 FF 9F FD | 	jmp	#LR__1790
17480                 | LR__1791
17480                 | '   else
17480                 | '     d+=db
17480     15 27 02 F1 | 	add	local05, local07
17484                 | '     x+=1
17484     01 28 06 F1 | 	add	local06, #1
17488                 | '     da+=2*4
17488     08 2C 06 F1 | 	add	local08, #8
1748c                 | '     db+=2*4
1748c     08 2A 06 F1 | 	add	local07, #8
17490     44 FF 9F FD | 	jmp	#LR__1790
17494                 | LR__1792
17494     A7 F0 03 F6 | 	mov	ptra, fp
17498     B2 00 A0 FD | 	call	#popregs_
1749c                 | _hg010b_spin2_fcircle_ret
1749c     2D 00 64 FD | 	ret
174a0                 | 
174a0                 | '  
174a0                 | ' '-- A circle ------------------------------------------------------------ 
174a0                 | '  
174a0                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
174a0                 | _hg010b_spin2_circle
174a0     08 4A 05 F6 | 	mov	COUNT_, #8
174a4     A8 00 A0 FD | 	call	#pushregs_
174a8     0B 1F 02 F6 | 	mov	local01, arg03
174ac     FF FF 7F FF 
174b0     FE 1F 06 FD | 	qmul	local01, ##-2
174b4     09 21 02 F6 | 	mov	local02, arg01
174b8     0A 23 02 F6 | 	mov	local03, arg02
174bc     0C 25 02 F6 | 	mov	local04, arg04
174c0                 | ' 
174c0                 | '  
174c0                 | ' d:=5-4*r
174c0     0F 19 02 F6 | 	mov	arg04, local01
174c4     02 18 66 F0 | 	shl	arg04, #2
174c8     05 26 06 F6 | 	mov	local05, #5
174cc     0C 27 82 F1 | 	sub	local05, arg04
174d0                 | ' x:=0
174d0     00 28 06 F6 | 	mov	local06, #0
174d4                 | ' y:=r
174d4                 | ' da:=(-2*r+5)*4
174d4                 | ' db:=3*4
174d4     0C 2A 06 F6 | 	mov	local07, #12
174d8                 | ' repeat while (x<=y) 
174d8     18 2C 62 FD | 	getqx	local08
174dc     05 2C 06 F1 | 	add	local08, #5
174e0     02 2C 66 F0 | 	shl	local08, #2
174e4                 | LR__1800
174e4     0F 29 5A F2 | 	cmps	local06, local01 wcz
174e8     F4 00 90 1D |  if_a	jmp	#LR__1802
174ec                 | '   putpixel(x0-x,y0-y,c)
174ec     10 13 02 F6 | 	mov	arg01, local02
174f0     14 13 82 F1 | 	sub	arg01, local06
174f4     11 15 02 F6 | 	mov	arg02, local03
174f8     0F 15 82 F1 | 	sub	arg02, local01
174fc     12 17 02 F6 | 	mov	arg03, local04
17500     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
17504                 | '   putpixel(x0-x,y0+y,c)
17504     10 13 02 F6 | 	mov	arg01, local02
17508     14 13 82 F1 | 	sub	arg01, local06
1750c     11 15 02 F6 | 	mov	arg02, local03
17510     0F 15 02 F1 | 	add	arg02, local01
17514     12 17 02 F6 | 	mov	arg03, local04
17518     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1751c                 | '   putpixel(x0+x,y0-y,c)
1751c     10 13 02 F6 | 	mov	arg01, local02
17520     14 13 02 F1 | 	add	arg01, local06
17524     11 15 02 F6 | 	mov	arg02, local03
17528     0F 15 82 F1 | 	sub	arg02, local01
1752c     12 17 02 F6 | 	mov	arg03, local04
17530     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
17534                 | '   putpixel(x0+x,y0+y,c)
17534     10 13 02 F6 | 	mov	arg01, local02
17538     14 13 02 F1 | 	add	arg01, local06
1753c     11 15 02 F6 | 	mov	arg02, local03
17540     0F 15 02 F1 | 	add	arg02, local01
17544     12 17 02 F6 | 	mov	arg03, local04
17548     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1754c                 | '   putpixel(x0-y,y0-x,c)
1754c     10 13 02 F6 | 	mov	arg01, local02
17550     0F 13 82 F1 | 	sub	arg01, local01
17554     11 15 02 F6 | 	mov	arg02, local03
17558     14 15 82 F1 | 	sub	arg02, local06
1755c     12 17 02 F6 | 	mov	arg03, local04
17560     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
17564                 | '   putpixel(x0-y,y0+x,c)
17564     10 13 02 F6 | 	mov	arg01, local02
17568     0F 13 82 F1 | 	sub	arg01, local01
1756c     11 15 02 F6 | 	mov	arg02, local03
17570     14 15 02 F1 | 	add	arg02, local06
17574     12 17 02 F6 | 	mov	arg03, local04
17578     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1757c                 | '   putpixel(x0+y,y0-x,c)
1757c     10 13 02 F6 | 	mov	arg01, local02
17580     0F 13 02 F1 | 	add	arg01, local01
17584     11 15 02 F6 | 	mov	arg02, local03
17588     14 15 82 F1 | 	sub	arg02, local06
1758c     12 17 02 F6 | 	mov	arg03, local04
17590     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
17594                 | '   putpixel(x0+y,y0+x,c)
17594     10 13 02 F6 | 	mov	arg01, local02
17598     0F 13 02 F1 | 	add	arg01, local01
1759c     11 15 02 F6 | 	mov	arg02, local03
175a0     14 15 02 F1 | 	add	arg02, local06
175a4     12 17 02 F6 | 	mov	arg03, local04
175a8     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
175ac                 | '   if d>0 
175ac     01 26 56 F2 | 	cmps	local05, #1 wc
175b0     18 00 90 CD |  if_b	jmp	#LR__1801
175b4                 | '     d+=da
175b4     16 27 02 F1 | 	add	local05, local08
175b8                 | '     y-=1
175b8     01 1E 86 F1 | 	sub	local01, #1
175bc                 | '     x+=1
175bc     01 28 06 F1 | 	add	local06, #1
175c0                 | '     da+=4*4
175c0     10 2C 06 F1 | 	add	local08, #16
175c4                 | '     db+=2*4
175c4     08 2A 06 F1 | 	add	local07, #8
175c8     18 FF 9F FD | 	jmp	#LR__1800
175cc                 | LR__1801
175cc                 | '   else
175cc                 | '     d+=db
175cc     15 27 02 F1 | 	add	local05, local07
175d0                 | '     x+=1
175d0     01 28 06 F1 | 	add	local06, #1
175d4                 | '     da+=2*4
175d4     08 2C 06 F1 | 	add	local08, #8
175d8                 | '     db+=2*4
175d8     08 2A 06 F1 | 	add	local07, #8
175dc     04 FF 9F FD | 	jmp	#LR__1800
175e0                 | LR__1802
175e0     A7 F0 03 F6 | 	mov	ptra, fp
175e4     B2 00 A0 FD | 	call	#popregs_
175e8                 | _hg010b_spin2_circle_ret
175e8     2D 00 64 FD | 	ret
175ec                 | 
175ec                 | '     
175ec                 | ' '-- A frame (an empty rectangle) ---------------------------------------
175ec                 | ' 
175ec                 | ' pub frame(x1,y1,x2,y2,c)
175ec                 | _hg010b_spin2_frame
175ec     05 4A 05 F6 | 	mov	COUNT_, #5
175f0     A8 00 A0 FD | 	call	#pushregs_
175f4     09 1F 02 F6 | 	mov	local01, arg01
175f8     0A 21 02 F6 | 	mov	local02, arg02
175fc     0B 23 02 F6 | 	mov	local03, arg03
17600     0C 25 02 F6 | 	mov	local04, arg04
17604     0D 27 02 F6 | 	mov	local05, arg05
17608                 | ' 
17608                 | ' fastline(x1,x2,y1,c)
17608     0F 13 02 F6 | 	mov	arg01, local01
1760c     11 15 02 F6 | 	mov	arg02, local03
17610     10 17 02 F6 | 	mov	arg03, local02
17614     13 19 02 F6 | 	mov	arg04, local05
17618     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1761c                 | ' fastline(x1,x2,y2,c)
1761c     0F 13 02 F6 | 	mov	arg01, local01
17620     11 15 02 F6 | 	mov	arg02, local03
17624     12 17 02 F6 | 	mov	arg03, local04
17628     13 19 02 F6 | 	mov	arg04, local05
1762c     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
17630                 | ' line(x1,y1,x1,y2,c)
17630     0F 13 02 F6 | 	mov	arg01, local01
17634     10 15 02 F6 | 	mov	arg02, local02
17638     0F 17 02 F6 | 	mov	arg03, local01
1763c     12 19 02 F6 | 	mov	arg04, local04
17640     13 1B 02 F6 | 	mov	arg05, local05
17644                 | ' draw(x1,y1,x2,y2,c)
17644     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
17648                 | ' line(x2,y1,x2,y2,c)
17648     11 13 02 F6 | 	mov	arg01, local03
1764c     10 15 02 F6 | 	mov	arg02, local02
17650     11 17 02 F6 | 	mov	arg03, local03
17654     12 19 02 F6 | 	mov	arg04, local04
17658     13 1B 02 F6 | 	mov	arg05, local05
1765c                 | ' draw(x1,y1,x2,y2,c)
1765c     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
17660     A7 F0 03 F6 | 	mov	ptra, fp
17664     B2 00 A0 FD | 	call	#popregs_
17668                 | _hg010b_spin2_frame_ret
17668     2D 00 64 FD | 	ret
1766c                 | 
1766c                 | ' 
1766c                 | ' '-- A box (a filled rectangle) ----------------------------------------
1766c                 | ' 
1766c                 | ' pub box(x1,y1,x2,y2,c) |yy
1766c                 | _hg010b_spin2_box
1766c     06 4A 05 F6 | 	mov	COUNT_, #6
17670     A8 00 A0 FD | 	call	#pushregs_
17674     09 1F 02 F6 | 	mov	local01, arg01
17678     0A 21 02 F6 | 	mov	local02, arg02
1767c     0B 23 02 F6 | 	mov	local03, arg03
17680     0C 25 02 F6 | 	mov	local04, arg04
17684     0D 27 02 F6 | 	mov	local05, arg05
17688                 | ' 
17688                 | ' repeat yy from y1 to y2
17688     10 25 52 F2 | 	cmps	local04, local02 wc
1768c     01 28 86 F6 | 	negc	local06, #1
17690     14 25 02 F1 | 	add	local04, local06
17694                 | LR__1810
17694                 | '   fastline(x1,x2,yy,c)
17694     0F 13 02 F6 | 	mov	arg01, local01
17698     11 15 02 F6 | 	mov	arg02, local03
1769c     13 19 02 F6 | 	mov	arg04, local05
176a0     10 17 02 F6 | 	mov	arg03, local02
176a4     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
176a8     14 21 02 F1 | 	add	local02, local06
176ac     12 21 0A F2 | 	cmp	local02, local04 wz
176b0     E0 FF 9F 5D |  if_ne	jmp	#LR__1810
176b4     A7 F0 03 F6 | 	mov	ptra, fp
176b8     B2 00 A0 FD | 	call	#popregs_
176bc                 | _hg010b_spin2_box_ret
176bc     2D 00 64 FD | 	ret
176c0                 | 
176c0                 | '       
176c0                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
176c0                 | _hg010b_spin2_putcharxycgf
176c0                 | ' 
176c0                 | '  
176c0                 | ' repeat yy from 0 to 15
176c0     00 00 06 F6 | 	mov	_var01, #0
176c4     97 8C 48 FB | 	callpa	#(@LR__1822-@LR__1820)>>2,fcache_load_ptr_
176c8                 | LR__1820
176c8                 | ' 
176c8                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
176c8     91 E4 05 F1 | 	add	objptr, #145
176cc     F2 02 02 FB | 	rdlong	_var02, objptr
176d0     0A 02 66 F0 | 	shl	_var02, #10
176d4     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
176d8     01 05 02 F1 | 	add	_var03, _var02
176dc     0B 03 02 F6 | 	mov	_var02, arg03
176e0     04 02 66 F0 | 	shl	_var02, #4
176e4     01 05 02 F1 | 	add	_var03, _var02
176e8     00 05 02 F1 | 	add	_var03, _var01
176ec     02 05 C2 FA | 	rdbyte	_var03, _var03
176f0                 | '   asm
176f0     00 04 0E F4 | 	testb	_var03, #0 wz
176f4     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
176f8     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
176fc     01 04 0E F4 | 	testb	_var03, #1 wz
17700     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
17704     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
17708     02 04 0E F4 | 	testb	_var03, #2 wz
1770c     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
17710     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
17714     03 04 0E F4 | 	testb	_var03, #3 wz
17718     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1771c     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
17720     04 04 0E F4 | 	testb	_var03, #4 wz
17724     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
17728     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1772c     05 04 0E F4 | 	testb	_var03, #5 wz
17730     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
17734     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
17738     06 04 0E F4 | 	testb	_var03, #6 wz
1773c     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
17740     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
17744     07 04 0E F4 | 	testb	_var03, #7 wz
17748     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1774c     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
17750                 | '   
17750                 | '   ccc[0]:=c1
17750     99 E5 05 F1 | 	add	objptr, #409
17754     F2 06 62 FC | 	wrlong	_var04, objptr
17758                 | '   ccc[1]:=c2 
17758     04 E4 05 F1 | 	add	objptr, #4
1775c     F2 08 62 FC | 	wrlong	_var05, objptr
17760                 | '   long[mailbox0][2]:=8
17760     49 E4 85 F1 | 	sub	objptr, #73
17764     F2 04 02 FB | 	rdlong	_var03, objptr
17768     08 04 06 F1 | 	add	_var03, #8
1776c     02 11 68 FC | 	wrlong	#8, _var03
17770                 | '   long[mailbox0][1]:=@ccc
17770     45 E4 05 F1 | 	add	objptr, #69
17774     F2 04 02 F6 | 	mov	_var03, objptr
17778     45 E4 85 F1 | 	sub	objptr, #69
1777c     F2 02 02 FB | 	rdlong	_var02, objptr
17780     04 02 06 F1 | 	add	_var02, #4
17784     01 05 62 FC | 	wrlong	_var03, _var02
17788                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
17788     0C E5 85 F1 | 	sub	objptr, #268
1778c     F2 04 02 FB | 	rdlong	_var03, objptr
17790     0A 03 02 F6 | 	mov	_var02, arg02
17794     00 03 02 F1 | 	add	_var02, _var01
17798     0A 02 66 F0 | 	shl	_var02, #10
1779c     09 0B 02 F6 | 	mov	_var06, arg01
177a0     02 0A 66 F0 | 	shl	_var06, #2
177a4     05 03 02 F1 | 	add	_var02, _var06
177a8     01 05 02 F1 | 	add	_var03, _var02
177ac     00 00 78 FF 
177b0     00 04 06 F1 | 	add	_var03, ##-268435456
177b4     0C E5 05 F1 | 	add	objptr, #268
177b8     F2 0A 02 FB | 	rdlong	_var06, objptr
177bc     05 05 62 FC | 	wrlong	_var03, _var06
177c0                 | '   repeat
177c0                 | LR__1821
177c0     F2 04 02 FB | 	rdlong	_var03, objptr
177c4     02 03 02 FB | 	rdlong	_var02, _var03
177c8     00 02 56 F2 | 	cmps	_var02, #0 wc
177cc     F0 FF 9F CD |  if_b	jmp	#LR__1821
177d0     E5 E5 85 F1 | 	sub	objptr, #485
177d4     01 00 06 F1 | 	add	_var01, #1
177d8     10 00 56 F2 | 	cmps	_var01, #16 wc
177dc     E8 FE 9F CD |  if_b	jmp	#LR__1820
177e0                 | LR__1822
177e0                 | _hg010b_spin2_putcharxycgf_ret
177e0     2D 00 64 FD | 	ret
177e4                 | 
177e4                 | ' 
177e4                 | ' 
177e4                 | ' '**********************************************************************r***
177e4                 | ' '                                                                        *
177e4                 | ' ' Font related functions                                                 *
177e4                 | ' '                                                                        *
177e4                 | ' '*************************************************************************
177e4                 | ' 
177e4                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
177e4                 | ' 
177e4                 | ' pub setfontfamily(afontnum)
177e4                 | _hg010b_spin2_setfontfamily
177e4                 | ' 
177e4                 | ' font_family:=afontnum
177e4     91 E4 05 F1 | 	add	objptr, #145
177e8     F2 12 62 FC | 	wrlong	arg01, objptr
177ec     91 E4 85 F1 | 	sub	objptr, #145
177f0                 | ' 'if afontnum==8
177f0                 | ' '  font_ptr:=@amiga_font
177f0                 | ' 
177f0                 | ' if afontnum==4
177f0     04 12 0E F2 | 	cmp	arg01, #4 wz
177f4                 | '   font_ptr:=@st_font
177f4     08 00 00 AF 
177f8     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
177fc     04 E4 05 A1 |  if_e	add	objptr, #4
17800     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
17804     04 E4 85 A1 |  if_e	sub	objptr, #4
17808     08 00 00 AF 
1780c     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
17810                 | ' if afontnum==0
17810     00 12 0E F2 | 	cmp	arg01, #0 wz
17814                 | '   font_ptr:=@vga_font
17814     04 E4 05 A1 |  if_e	add	objptr, #4
17818     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1781c     04 E4 85 A1 |  if_e	sub	objptr, #4
17820                 | _hg010b_spin2_setfontfamily_ret
17820     2D 00 64 FD | 	ret
17824                 | 
17824                 | ' 
17824                 | ' '*************************************************************************
17824                 | ' '                                                                        *
17824                 | ' '  Cursor functions                                                      *
17824                 | ' '                                                                        *
17824                 | ' '*************************************************************************
17824                 | ' 
17824                 | ' 
17824                 | ' pub setcursorpos(x,y)
17824                 | _hg010b_spin2_setcursorpos
17824                 | ' 
17824                 | ' ''---------- Set the (x,y) position of cursor
17824                 | ' 
17824                 | ' cursor_x:=x
17824     38 E4 05 F1 | 	add	objptr, #56
17828     F2 12 52 FC | 	wrword	arg01, objptr
1782c                 | ' cursor_y:=y
1782c     02 E4 05 F1 | 	add	objptr, #2
17830     F2 14 42 FC | 	wrbyte	arg02, objptr
17834                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17834     02 E4 85 F1 | 	sub	objptr, #2
17838     F2 14 E2 FA | 	rdword	arg02, objptr
1783c     02 14 66 F0 | 	shl	arg02, #2
17840     02 E4 05 F1 | 	add	objptr, #2
17844     F2 16 C2 FA | 	rdbyte	arg03, objptr
17848     3A E4 85 F1 | 	sub	objptr, #58
1784c     04 16 66 F0 | 	shl	arg03, #4
17850     11 12 06 F6 | 	mov	arg01, #17
17854     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
17858                 | _hg010b_spin2_setcursorpos_ret
17858     2D 00 64 FD | 	ret
1785c                 | 
1785c                 | ' 
1785c                 | ' '*************************************************************************
1785c                 | ' '                                                                        *
1785c                 | ' '  VBlank functions                                                      *
1785c                 | ' '                                                                        *
1785c                 | ' '*************************************************************************
1785c                 | ' 
1785c                 | ' pub waitvbl(amount) | i
1785c                 | _hg010b_spin2_waitvbl
1785c     03 4A 05 F6 | 	mov	COUNT_, #3
17860     A8 00 A0 FD | 	call	#pushregs_
17864     09 1F 02 F6 | 	mov	local01, arg01
17868                 | ' 
17868                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
17868                 | ' 
17868                 | ' repeat i from 1 to amount
17868     01 20 06 F6 | 	mov	local02, #1
1786c     01 1E 56 F2 | 	cmps	local01, #1 wc
17870     01 22 86 F6 | 	negc	local03, #1
17874     11 1F 02 F1 | 	add	local01, local03
17878                 | LR__1830
17878                 | '   repeat until vblank==0
17878                 | LR__1831
17878     45 E4 05 F1 | 	add	objptr, #69
1787c     F2 12 0A FB | 	rdlong	arg01, objptr wz
17880     45 E4 85 F1 | 	sub	objptr, #69
17884     0C 00 90 AD |  if_e	jmp	#LR__1832
17888                 | '     waitus(100)
17888     64 12 06 F6 | 	mov	arg01, #100
1788c     80 16 B0 FD | 	call	#__system___waitus
17890     E4 FF 9F FD | 	jmp	#LR__1831
17894                 | LR__1832
17894                 | '   repeat until vblank==1
17894                 | LR__1833
17894     45 E4 05 F1 | 	add	objptr, #69
17898     F2 12 02 FB | 	rdlong	arg01, objptr
1789c     45 E4 85 F1 | 	sub	objptr, #69
178a0     01 12 0E F2 | 	cmp	arg01, #1 wz
178a4     0C 00 90 AD |  if_e	jmp	#LR__1834
178a8                 | '     waitus(100)
178a8     64 12 06 F6 | 	mov	arg01, #100
178ac     60 16 B0 FD | 	call	#__system___waitus
178b0     E0 FF 9F FD | 	jmp	#LR__1833
178b4                 | LR__1834
178b4     11 21 02 F1 | 	add	local02, local03
178b8     0F 21 0A F2 | 	cmp	local02, local01 wz
178bc     B8 FF 9F 5D |  if_ne	jmp	#LR__1830
178c0     A7 F0 03 F6 | 	mov	ptra, fp
178c4     B2 00 A0 FD | 	call	#popregs_
178c8                 | _hg010b_spin2_waitvbl_ret
178c8     2D 00 64 FD | 	ret
178cc                 | 
178cc                 | ' 
178cc                 | ' 
178cc                 | ' pub cls(fc,bc)   :c,i
178cc                 | _hg010b_spin2_cls
178cc     02 4A 05 F6 | 	mov	COUNT_, #2
178d0     A8 00 A0 FD | 	call	#pushregs_
178d4     09 1F 02 F6 | 	mov	local01, arg01
178d8     0A 21 02 F6 | 	mov	local02, arg02
178dc                 | ' 
178dc                 | ' c:=bc
178dc                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
178dc     D9 E4 05 F1 | 	add	objptr, #217
178e0     F2 12 02 FB | 	rdlong	arg01, objptr
178e4     A5 E4 85 F1 | 	sub	objptr, #165
178e8     F2 16 02 FB | 	rdlong	arg03, objptr
178ec     02 16 66 F0 | 	shl	arg03, #2
178f0     10 15 02 F6 | 	mov	arg02, local02
178f4     00 18 06 F6 | 	mov	arg04, #0
178f8     01 1A 06 F6 | 	mov	arg05, #1
178fc     0B 00 00 FF 
17900     8C E4 05 F1 | 	add	objptr, ##5772
17904     F0 08 B0 FD | 	call	#_psram_spin2_fill
17908                 | ' setwritecolors(fc,bc)
17908                 | ' 
17908                 | ' write_color:=ff
17908     0B 00 00 FF 
1790c     83 E4 85 F1 | 	sub	objptr, ##5763
17910     F2 1E 62 FC | 	wrlong	local01, objptr
17914                 | ' write_background:=bb
17914     04 E4 05 F1 | 	add	objptr, #4
17918     F2 20 62 FC | 	wrlong	local02, objptr
1791c                 | ' cursor_x:=0
1791c     09 E4 85 F1 | 	sub	objptr, #9
17920     F2 00 58 FC | 	wrword	#0, objptr
17924                 | ' cursor_y:=0
17924     02 E4 05 F1 | 	add	objptr, #2
17928     F2 00 48 FC | 	wrbyte	#0, objptr
1792c                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1792c     02 E4 85 F1 | 	sub	objptr, #2
17930     F2 14 E2 FA | 	rdword	arg02, objptr
17934     02 14 66 F0 | 	shl	arg02, #2
17938     02 E4 05 F1 | 	add	objptr, #2
1793c     F2 16 C2 FA | 	rdbyte	arg03, objptr
17940     3A E4 85 F1 | 	sub	objptr, #58
17944     04 16 66 F0 | 	shl	arg03, #4
17948     11 12 06 F6 | 	mov	arg01, #17
1794c     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
17950                 | ' setcursorcolor(fc)
17950     0F 13 02 F6 | 	mov	arg01, local01
17954     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
17958     10 FB 01 F6 | 	mov	result1, local02
1795c     00 FC 05 F6 | 	mov	result2, #0
17960     A7 F0 03 F6 | 	mov	ptra, fp
17964     B2 00 A0 FD | 	call	#popregs_
17968                 | _hg010b_spin2_cls_ret
17968     2D 00 64 FD | 	ret
1796c                 | 
1796c                 | ' 
1796c                 | ' ''---------- Output a char at the cursor position, move the cursor 
1796c                 | ' 
1796c                 | ' pub putchar(achar) | c,x,y,l,newcpl
1796c                 | _hg010b_spin2_putchar
1796c     01 4A 05 F6 | 	mov	COUNT_, #1
17970     A8 00 A0 FD | 	call	#pushregs_
17974     09 1F 02 F6 | 	mov	local01, arg01
17978                 | ' 
17978                 | ' if achar==10
17978     0A 1E 0E F2 | 	cmp	local01, #10 wz
1797c                 | '   crlf()
1797c     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
17980                 | ' if achar==9
17980     09 1E 0E F2 | 	cmp	local01, #9 wz
17984     18 00 90 5D |  if_ne	jmp	#LR__1840
17988                 | '   cursor_x:=(cursor_x& %11110000)+16
17988     38 E4 05 F1 | 	add	objptr, #56
1798c     F2 16 E2 FA | 	rdword	arg03, objptr
17990     F0 16 06 F5 | 	and	arg03, #240
17994     10 16 06 F1 | 	add	arg03, #16
17998     F2 16 52 FC | 	wrword	arg03, objptr
1799c     38 E4 85 F1 | 	sub	objptr, #56
179a0                 | LR__1840
179a0                 | '   
179a0                 | ' if (achar<>9) && (achar<>10) 
179a0     09 1E 0E F2 | 	cmp	local01, #9 wz
179a4     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
179a8     44 00 90 AD |  if_e	jmp	#LR__1841
179ac                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
179ac     38 E4 05 F1 | 	add	objptr, #56
179b0     F2 12 E2 FA | 	rdword	arg01, objptr
179b4     02 E4 05 F1 | 	add	objptr, #2
179b8     F2 14 C2 FA | 	rdbyte	arg02, objptr
179bc     04 14 66 F0 | 	shl	arg02, #4
179c0     03 E4 05 F1 | 	add	objptr, #3
179c4     F2 18 02 FB | 	rdlong	arg04, objptr
179c8     04 E4 05 F1 | 	add	objptr, #4
179cc     F2 1A 02 FB | 	rdlong	arg05, objptr
179d0     41 E4 85 F1 | 	sub	objptr, #65
179d4     0F 17 02 F6 | 	mov	arg03, local01
179d8     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
179dc                 | '   cursor_x+=2
179dc     38 E4 05 F1 | 	add	objptr, #56
179e0     F2 1E E2 FA | 	rdword	local01, objptr
179e4     02 1E 06 F1 | 	add	local01, #2
179e8     F2 1E 52 FC | 	wrword	local01, objptr
179ec     38 E4 85 F1 | 	sub	objptr, #56
179f0                 | LR__1841
179f0                 | ' 
179f0                 | ' if cursor_x>=256
179f0     38 E4 05 F1 | 	add	objptr, #56
179f4     F2 1E E2 FA | 	rdword	local01, objptr
179f8     38 E4 85 F1 | 	sub	objptr, #56
179fc     00 1F 56 F2 | 	cmps	local01, #256 wc
17a00     64 00 90 CD |  if_b	jmp	#LR__1843
17a04                 | '   cursor_x:=0
17a04     38 E4 05 F1 | 	add	objptr, #56
17a08     F2 00 58 FC | 	wrword	#0, objptr
17a0c                 | '   cursor_y+=1
17a0c     02 E4 05 F1 | 	add	objptr, #2
17a10     F2 1E C2 FA | 	rdbyte	local01, objptr
17a14     01 1E 06 F1 | 	add	local01, #1
17a18     F2 1E 42 FC | 	wrbyte	local01, objptr
17a1c                 | '   if cursor_y>st_lines-1
17a1c     C3 E4 05 F1 | 	add	objptr, #195
17a20     F2 1E 02 FB | 	rdlong	local01, objptr
17a24     01 1E 86 F1 | 	sub	local01, #1
17a28     C3 E4 85 F1 | 	sub	objptr, #195
17a2c     F2 16 C2 FA | 	rdbyte	arg03, objptr
17a30     3A E4 85 F1 | 	sub	objptr, #58
17a34     0F 17 5A F2 | 	cmps	arg03, local01 wcz
17a38     2C 00 90 ED |  if_be	jmp	#LR__1842
17a3c                 | '     scrollup()
17a3c     00 12 06 F6 | 	mov	arg01, #0
17a40     01 00 00 FF 
17a44     40 14 06 F6 | 	mov	arg02, ##576
17a48     10 16 06 F6 | 	mov	arg03, #16
17a4c     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
17a50                 | '     cursor_y:=st_lines-1
17a50     FD E4 05 F1 | 	add	objptr, #253
17a54     F2 1E 02 FB | 	rdlong	local01, objptr
17a58     01 1E 86 F1 | 	sub	local01, #1
17a5c     C3 E4 85 F1 | 	sub	objptr, #195
17a60     F2 1E 42 FC | 	wrbyte	local01, objptr
17a64     3A E4 85 F1 | 	sub	objptr, #58
17a68                 | LR__1842
17a68                 | LR__1843
17a68                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17a68     38 E4 05 F1 | 	add	objptr, #56
17a6c     F2 14 E2 FA | 	rdword	arg02, objptr
17a70     02 14 66 F0 | 	shl	arg02, #2
17a74     02 E4 05 F1 | 	add	objptr, #2
17a78     F2 16 C2 FA | 	rdbyte	arg03, objptr
17a7c     3A E4 85 F1 | 	sub	objptr, #58
17a80     04 16 66 F0 | 	shl	arg03, #4
17a84     11 12 06 F6 | 	mov	arg01, #17
17a88     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
17a8c     A7 F0 03 F6 | 	mov	ptra, fp
17a90     B2 00 A0 FD | 	call	#popregs_
17a94                 | _hg010b_spin2_putchar_ret
17a94     2D 00 64 FD | 	ret
17a98                 | 
17a98                 | '     
17a98                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
17a98                 | ' 
17a98                 | ' pub putchar2(achar) | c,x,y,l,newcpl
17a98                 | _hg010b_spin2_putchar2
17a98     01 4A 05 F6 | 	mov	COUNT_, #1
17a9c     A8 00 A0 FD | 	call	#pushregs_
17aa0                 | ' 
17aa0                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
17aa0     38 E4 05 F1 | 	add	objptr, #56
17aa4     F2 1E E2 FA | 	rdword	local01, objptr
17aa8     02 E4 05 F1 | 	add	objptr, #2
17aac     F2 14 C2 FA | 	rdbyte	arg02, objptr
17ab0     04 14 66 F0 | 	shl	arg02, #4
17ab4     09 17 02 F6 | 	mov	arg03, arg01
17ab8     03 E4 05 F1 | 	add	objptr, #3
17abc     F2 18 02 FB | 	rdlong	arg04, objptr
17ac0     04 E4 05 F1 | 	add	objptr, #4
17ac4     F2 1A 02 FB | 	rdlong	arg05, objptr
17ac8     41 E4 85 F1 | 	sub	objptr, #65
17acc     0F 13 02 F6 | 	mov	arg01, local01
17ad0     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
17ad4                 | ' cursor_x+=2
17ad4     38 E4 05 F1 | 	add	objptr, #56
17ad8     F2 1E E2 FA | 	rdword	local01, objptr
17adc     02 1E 06 F1 | 	add	local01, #2
17ae0     F2 1E 52 FC | 	wrword	local01, objptr
17ae4                 | ' if cursor_x>=256
17ae4     F2 1E E2 FA | 	rdword	local01, objptr
17ae8     38 E4 85 F1 | 	sub	objptr, #56
17aec     00 1F 56 F2 | 	cmps	local01, #256 wc
17af0     64 00 90 CD |  if_b	jmp	#LR__1851
17af4                 | '   cursor_x:=0
17af4     38 E4 05 F1 | 	add	objptr, #56
17af8     F2 00 58 FC | 	wrword	#0, objptr
17afc                 | '   cursor_y+=1
17afc     02 E4 05 F1 | 	add	objptr, #2
17b00     F2 1E C2 FA | 	rdbyte	local01, objptr
17b04     01 1E 06 F1 | 	add	local01, #1
17b08     F2 1E 42 FC | 	wrbyte	local01, objptr
17b0c                 | '   if cursor_y>st_lines-1
17b0c     C3 E4 05 F1 | 	add	objptr, #195
17b10     F2 1E 02 FB | 	rdlong	local01, objptr
17b14     01 1E 86 F1 | 	sub	local01, #1
17b18     C3 E4 85 F1 | 	sub	objptr, #195
17b1c     F2 1A C2 FA | 	rdbyte	arg05, objptr
17b20     3A E4 85 F1 | 	sub	objptr, #58
17b24     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
17b28     2C 00 90 ED |  if_be	jmp	#LR__1850
17b2c                 | '     scrollup()
17b2c     00 12 06 F6 | 	mov	arg01, #0
17b30     01 00 00 FF 
17b34     40 14 06 F6 | 	mov	arg02, ##576
17b38     10 16 06 F6 | 	mov	arg03, #16
17b3c     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
17b40                 | '     cursor_y:=st_lines-1
17b40     FD E4 05 F1 | 	add	objptr, #253
17b44     F2 1E 02 FB | 	rdlong	local01, objptr
17b48     01 1E 86 F1 | 	sub	local01, #1
17b4c     C3 E4 85 F1 | 	sub	objptr, #195
17b50     F2 1E 42 FC | 	wrbyte	local01, objptr
17b54     3A E4 85 F1 | 	sub	objptr, #58
17b58                 | LR__1850
17b58                 | LR__1851
17b58                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
17b58     38 E4 05 F1 | 	add	objptr, #56
17b5c     F2 14 E2 FA | 	rdword	arg02, objptr
17b60     02 14 66 F0 | 	shl	arg02, #2
17b64     02 E4 05 F1 | 	add	objptr, #2
17b68     F2 16 C2 FA | 	rdbyte	arg03, objptr
17b6c     3A E4 85 F1 | 	sub	objptr, #58
17b70     04 16 66 F0 | 	shl	arg03, #4
17b74     11 12 06 F6 | 	mov	arg01, #17
17b78     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
17b7c     A7 F0 03 F6 | 	mov	ptra, fp
17b80     B2 00 A0 FD | 	call	#popregs_
17b84                 | _hg010b_spin2_putchar2_ret
17b84     2D 00 64 FD | 	ret
17b88                 | 
17b88                 | ' ''--------- Output a string at the cursor position, move the cursor  
17b88                 | ' 
17b88                 | ' pub write(text) | iii,c,ncx,ncy
17b88                 | _hg010b_spin2_write
17b88     04 4A 05 F6 | 	mov	COUNT_, #4
17b8c     A8 00 A0 FD | 	call	#pushregs_
17b90     09 1F 02 F6 | 	mov	local01, arg01
17b94                 | ' 
17b94                 | ' repeat iii from 0 to strsize(text)-1
17b94     00 20 06 F6 | 	mov	local02, #0
17b98     0F 13 02 F6 | 	mov	arg01, local01
17b9c     09 23 02 F6 | 	mov	local03, arg01
17ba0     97 06 48 FB | 	callpa	#(@LR__1861-@LR__1860)>>2,fcache_load_ptr_
17ba4                 | LR__1860
17ba4     11 FB C9 FA | 	rdbyte	result1, local03 wz
17ba8     01 22 06 51 |  if_ne	add	local03, #1
17bac     F4 FF 9F 5D |  if_ne	jmp	#LR__1860
17bb0                 | LR__1861
17bb0     09 23 82 F1 | 	sub	local03, arg01
17bb4     01 22 86 F1 | 	sub	local03, #1
17bb8     00 22 56 F2 | 	cmps	local03, #0 wc
17bbc     01 24 86 F6 | 	negc	local04, #1
17bc0     12 23 02 F1 | 	add	local03, local04
17bc4                 | LR__1862
17bc4                 | '   putchar2(byte[text+iii])
17bc4     0F 13 02 F6 | 	mov	arg01, local01
17bc8     10 13 02 F1 | 	add	arg01, local02
17bcc     09 13 C2 FA | 	rdbyte	arg01, arg01
17bd0     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
17bd4     12 21 02 F1 | 	add	local02, local04
17bd8     11 21 0A F2 | 	cmp	local02, local03 wz
17bdc     E4 FF 9F 5D |  if_ne	jmp	#LR__1862
17be0     A7 F0 03 F6 | 	mov	ptra, fp
17be4     B2 00 A0 FD | 	call	#popregs_
17be8                 | _hg010b_spin2_write_ret
17be8     2D 00 64 FD | 	ret
17bec                 | 
17bec                 | ' 
17bec                 | ' ''-----------  Scroll the screen one line up
17bec                 | ' 
17bec                 | ' pub scrollup(start=0, end=576 , amount=16) | i
17bec                 | _hg010b_spin2_scrollup
17bec     01 4A 05 F6 | 	mov	COUNT_, #1
17bf0     A8 00 A0 FD | 	call	#pushregs_
17bf4                 | ' 	
17bf4                 | ' repeat i from 0 to 559 
17bf4     00 1E 06 F6 | 	mov	local01, #0
17bf8                 | LR__1870
17bf8     F5 E4 05 F1 | 	add	objptr, #245
17bfc     F2 18 02 FB | 	rdlong	arg04, objptr
17c00     1C E4 85 F1 | 	sub	objptr, #28
17c04     F2 14 02 FB | 	rdlong	arg02, objptr
17c08     0F 13 02 F6 | 	mov	arg01, local01
17c0c     10 12 06 F1 | 	add	arg01, #16
17c10     02 12 66 F0 | 	shl	arg01, #2
17c14     14 E4 05 F1 | 	add	objptr, #20
17c18     F2 16 02 FB | 	rdlong	arg03, objptr
17c1c     0B 13 02 FD | 	qmul	arg01, arg03
17c20                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
17c20     F6 03 00 FF 
17c24     00 12 06 F6 | 	mov	arg01, ##519168
17c28     0C 13 82 F1 | 	sub	arg01, arg04
17c2c     02 16 66 F0 | 	shl	arg03, #2
17c30     0A 00 00 FF 
17c34     D3 E5 05 F1 | 	add	objptr, ##5587
17c38     18 18 62 FD | 	getqx	arg04
17c3c     0C 15 02 F1 | 	add	arg02, arg04
17c40     7C 04 B0 FD | 	call	#_psram_spin2_read1
17c44     0A 00 00 FF 
17c48     CB E5 85 F1 | 	sub	objptr, ##5579
17c4c     F2 18 02 FB | 	rdlong	arg04, objptr
17c50     1C E4 85 F1 | 	sub	objptr, #28
17c54     F2 14 02 FB | 	rdlong	arg02, objptr
17c58     0F 13 02 F6 | 	mov	arg01, local01
17c5c     02 12 66 F0 | 	shl	arg01, #2
17c60     14 E4 05 F1 | 	add	objptr, #20
17c64     F2 16 02 FB | 	rdlong	arg03, objptr
17c68     0B 13 02 FD | 	qmul	arg01, arg03
17c6c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
17c6c     F6 03 00 FF 
17c70     00 12 06 F6 | 	mov	arg01, ##519168
17c74     0C 13 82 F1 | 	sub	arg01, arg04
17c78     02 16 66 F0 | 	shl	arg03, #2
17c7c     0A 00 00 FF 
17c80     D3 E5 05 F1 | 	add	objptr, ##5587
17c84     18 18 62 FD | 	getqx	arg04
17c88     0C 15 02 F1 | 	add	arg02, arg04
17c8c     CC 04 B0 FD | 	call	#_psram_spin2_write
17c90     0B 00 00 FF 
17c94     C0 E4 85 F1 | 	sub	objptr, ##5824
17c98     01 1E 06 F1 | 	add	local01, #1
17c9c     01 00 00 FF 
17ca0     30 1E 56 F2 | 	cmps	local01, ##560 wc
17ca4     50 FF 9F CD |  if_b	jmp	#LR__1870
17ca8                 | ' 
17ca8                 | ' repeat i from 560 to 575
17ca8     01 00 00 FF 
17cac     30 1E 06 F6 | 	mov	local01, ##560
17cb0                 | LR__1871
17cb0                 | '    fastline(0,1023,i,write_background)   
17cb0     41 E4 05 F1 | 	add	objptr, #65
17cb4     F2 18 02 FB | 	rdlong	arg04, objptr
17cb8     41 E4 85 F1 | 	sub	objptr, #65
17cbc     00 12 06 F6 | 	mov	arg01, #0
17cc0     09 14 CE F9 | 	bmask	arg02, #9
17cc4     0F 17 02 F6 | 	mov	arg03, local01
17cc8     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
17ccc     01 1E 06 F1 | 	add	local01, #1
17cd0     01 00 00 FF 
17cd4     40 1E 16 F2 | 	cmp	local01, ##576 wc
17cd8     D4 FF 9F CD |  if_b	jmp	#LR__1871
17cdc     A7 F0 03 F6 | 	mov	ptra, fp
17ce0     B2 00 A0 FD | 	call	#popregs_
17ce4                 | _hg010b_spin2_scrollup_ret
17ce4     2D 00 64 FD | 	ret
17ce8                 | 
17ce8                 | ' 
17ce8                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
17ce8                 | ' 
17ce8                 | ' pub crlf()
17ce8                 | _hg010b_spin2_crlf
17ce8                 | ' 
17ce8                 | ' cursor_x:=leading_spaces*2
17ce8     01 00 00 FF 
17cec     B2 E4 05 F1 | 	add	objptr, ##690
17cf0     F2 16 02 FB | 	rdlong	arg03, objptr
17cf4     01 16 66 F0 | 	shl	arg03, #1
17cf8     01 00 00 FF 
17cfc     7A E4 85 F1 | 	sub	objptr, ##634
17d00     F2 16 52 FC | 	wrword	arg03, objptr
17d04                 | ' cursor_y+=1
17d04     02 E4 05 F1 | 	add	objptr, #2
17d08     F2 16 C2 FA | 	rdbyte	arg03, objptr
17d0c     01 16 06 F1 | 	add	arg03, #1
17d10     F2 16 42 FC | 	wrbyte	arg03, objptr
17d14                 | ' if cursor_y>st_lines-1
17d14     C3 E4 05 F1 | 	add	objptr, #195
17d18     F2 16 02 FB | 	rdlong	arg03, objptr
17d1c     01 16 86 F1 | 	sub	arg03, #1
17d20     C3 E4 85 F1 | 	sub	objptr, #195
17d24     F2 14 C2 FA | 	rdbyte	arg02, objptr
17d28     3A E4 85 F1 | 	sub	objptr, #58
17d2c     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
17d30     2C 00 90 ED |  if_be	jmp	#LR__1880
17d34                 | '   scrollup()
17d34     00 12 06 F6 | 	mov	arg01, #0
17d38     01 00 00 FF 
17d3c     40 14 06 F6 | 	mov	arg02, ##576
17d40     10 16 06 F6 | 	mov	arg03, #16
17d44     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
17d48                 | '   cursor_y:=st_lines-1
17d48     FD E4 05 F1 | 	add	objptr, #253
17d4c     F2 16 02 FB | 	rdlong	arg03, objptr
17d50     01 16 86 F1 | 	sub	arg03, #1
17d54     C3 E4 85 F1 | 	sub	objptr, #195
17d58     F2 16 42 FC | 	wrbyte	arg03, objptr
17d5c     3A E4 85 F1 | 	sub	objptr, #58
17d60                 | LR__1880
17d60                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
17d60     38 E4 05 F1 | 	add	objptr, #56
17d64     F2 14 E2 FA | 	rdword	arg02, objptr
17d68     02 14 66 F0 | 	shl	arg02, #2
17d6c     02 E4 05 F1 | 	add	objptr, #2
17d70     F2 16 C2 FA | 	rdbyte	arg03, objptr
17d74     3A E4 85 F1 | 	sub	objptr, #58
17d78     04 16 66 F0 | 	shl	arg03, #4
17d7c     11 12 06 F6 | 	mov	arg01, #17
17d80     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
17d84                 | _hg010b_spin2_crlf_ret
17d84     2D 00 64 FD | 	ret
17d88                 | 
17d88                 | ' 
17d88                 | ' 
17d88                 | ' '*************************************************************************
17d88                 | ' '                                                                        *
17d88                 | ' '  Conversions                                                           *
17d88                 | ' '                                                                        *
17d88                 | ' '*************************************************************************
17d88                 | ' 
17d88                 | ' ''---------- Convert a integer to dec string, return a pointer
17d88                 | ' 
17d88                 | ' pub inttostr(i):result |q,pos,k,j
17d88                 | _hg010b_spin2_inttostr
17d88     03 4A 05 F6 | 	mov	COUNT_, #3
17d8c     A8 00 A0 FD | 	call	#pushregs_
17d90     09 1F 0A F6 | 	mov	local01, arg01 wz
17d94                 | ' 
17d94                 | ' j:=i
17d94                 | ' pos:=10
17d94     0A 20 06 F6 | 	mov	local02, #10
17d98                 | ' k:=0
17d98     00 22 06 F6 | 	mov	local03, #0
17d9c                 | ' 
17d9c                 | ' if (j==0)
17d9c     18 00 90 5D |  if_ne	jmp	#LR__1890
17da0                 | '   n_string[0]:=48
17da0     49 E4 05 F1 | 	add	objptr, #73
17da4     F2 60 48 FC | 	wrbyte	#48, objptr
17da8                 | '   n_string[1]:=0
17da8     01 E4 05 F1 | 	add	objptr, #1
17dac     F2 00 48 FC | 	wrbyte	#0, objptr
17db0     4A E4 85 F1 | 	sub	objptr, #74
17db4     C4 00 90 FD | 	jmp	#LR__1897
17db8                 | LR__1890
17db8                 | ' 
17db8                 | ' else
17db8                 | '   if (j<0)
17db8     0F 1F 52 F6 | 	abs	local01, local01 wc
17dbc                 | '     j:=0-j
17dbc                 | '     k:=45
17dbc     2D 22 06 C6 |  if_b	mov	local03, #45
17dc0                 | ' 
17dc0                 | '   n_string[11]:=0
17dc0     54 E4 05 F1 | 	add	objptr, #84
17dc4     F2 00 48 FC | 	wrbyte	#0, objptr
17dc8     54 E4 85 F1 | 	sub	objptr, #84
17dcc     97 24 48 FB | 	callpa	#(@LR__1892-@LR__1891)>>2,fcache_load_ptr_
17dd0                 | '   repeat while (pos>-1)
17dd0                 | LR__1891
17dd0     00 20 56 F2 | 	cmps	local02, #0 wc
17dd4     40 00 90 CD |  if_b	jmp	#LR__1893
17dd8     0F FB 51 F6 | 	abs	result1, local01 wc
17ddc     0A FA 15 FD | 	qdiv	result1, #10
17de0                 | '     q:=j//10
17de0     19 FA 61 FD | 	getqy	result1
17de4     FD FA 81 F6 | 	negc	result1, result1
17de8     0F 1F 52 F6 | 	abs	local01, local01 wc
17dec     0A 1E 16 FD | 	qdiv	local01, #10
17df0                 | '     q:=48+q
17df0     30 FA 05 F1 | 	add	result1, #48
17df4                 | '     n_string[pos]:=q
17df4     10 1F 02 F6 | 	mov	local01, local02
17df8     49 E4 05 F1 | 	add	objptr, #73
17dfc     F2 1E 02 F1 | 	add	local01, objptr
17e00     0F FB 41 FC | 	wrbyte	result1, local01
17e04                 | '     j:=j/10
17e04     49 E4 85 F1 | 	sub	objptr, #73
17e08                 | '     pos-=1
17e08     01 20 86 F1 | 	sub	local02, #1
17e0c     18 1E 62 FD | 	getqx	local01
17e10     0F 1F 82 F6 | 	negc	local01, local01
17e14     B8 FF 9F FD | 	jmp	#LR__1891
17e18                 | LR__1892
17e18                 | LR__1893
17e18                 | '   repeat while n_string[0]==48
17e18                 | LR__1894
17e18     49 E4 05 F1 | 	add	objptr, #73
17e1c     F2 16 C2 FA | 	rdbyte	arg03, objptr
17e20     49 E4 85 F1 | 	sub	objptr, #73
17e24     30 16 0E F2 | 	cmp	arg03, #48 wz
17e28     20 00 90 5D |  if_ne	jmp	#LR__1895
17e2c                 | '     bytemove(@n_string,@n_string+1,12)
17e2c     49 E4 05 F1 | 	add	objptr, #73
17e30     F2 12 02 F6 | 	mov	arg01, objptr
17e34     F2 14 02 F6 | 	mov	arg02, objptr
17e38     49 E4 85 F1 | 	sub	objptr, #73
17e3c     01 14 06 F1 | 	add	arg02, #1
17e40     0C 16 06 F6 | 	mov	arg03, #12
17e44     88 0C B0 FD | 	call	#__system____builtin_memmove
17e48     CC FF 9F FD | 	jmp	#LR__1894
17e4c                 | LR__1895
17e4c                 | ' 
17e4c                 | '   if k==45
17e4c     2D 22 0E F2 | 	cmp	local03, #45 wz
17e50     28 00 90 5D |  if_ne	jmp	#LR__1896
17e54                 | '      bytemove(@n_string+1,@n_string,12)
17e54     49 E4 05 F1 | 	add	objptr, #73
17e58     F2 12 02 F6 | 	mov	arg01, objptr
17e5c     01 12 06 F1 | 	add	arg01, #1
17e60     F2 14 02 F6 | 	mov	arg02, objptr
17e64     49 E4 85 F1 | 	sub	objptr, #73
17e68     0C 16 06 F6 | 	mov	arg03, #12
17e6c     60 0C B0 FD | 	call	#__system____builtin_memmove
17e70                 | '      n_string[0]:=k
17e70     49 E4 05 F1 | 	add	objptr, #73
17e74     F2 22 42 FC | 	wrbyte	local03, objptr
17e78     49 E4 85 F1 | 	sub	objptr, #73
17e7c                 | LR__1896
17e7c                 | LR__1897
17e7c                 | ' 
17e7c                 | ' q:=@n_string
17e7c     49 E4 05 F1 | 	add	objptr, #73
17e80     F2 FA 01 F6 | 	mov	result1, objptr
17e84     49 E4 85 F1 | 	sub	objptr, #73
17e88                 | ' return q
17e88     A7 F0 03 F6 | 	mov	ptra, fp
17e8c     B2 00 A0 FD | 	call	#popregs_
17e90                 | _hg010b_spin2_inttostr_ret
17e90     2D 00 64 FD | 	ret
17e94                 | 
17e94                 | ' 
17e94                 | ' '..............................................................................
17e94                 | ' 
17e94                 | ' {{
17e94                 | ' }}
17e94                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
17e94                 | _psram_spin2_startx
17e94     04 4A 05 F6 | 	mov	COUNT_, #4
17e98     A8 00 A0 FD | 	call	#pushregs_
17e9c     09 1F 02 F6 | 	mov	local01, arg01
17ea0     0B 21 02 F6 | 	mov	local02, arg03
17ea4     0C 23 02 F6 | 	mov	local03, arg04
17ea8                 | '     stop() ' restart driver if required
17ea8     54 01 B0 FD | 	call	#_psram_spin2_stop
17eac     00 1E 0E F2 | 	cmp	local01, #0 wz
17eb0     14 1E 06 AB |  if_e	rdlong	local01, #20
17eb4     0F 15 52 F6 | 	abs	arg02, local01 wc
17eb8     A1 07 00 FF 
17ebc     40 14 16 FD | 	qdiv	arg02, ##1000000
17ec0                 | ' 
17ec0                 | '     ' use current frequency if none specified
17ec0                 | ' 
17ec0                 | '     if freq == 0 
17ec0                 | '         freq := clkfreq 
17ec0                 | ' 
17ec0                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
17ec0                 | ' 
17ec0                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
17ec0                 | '     if burst < 0
17ec0                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
17ec0     18 14 62 FD | 	getqx	arg02
17ec4     0A 19 82 F6 | 	negc	arg04, arg02
17ec8     03 18 66 F0 | 	shl	arg04, #3
17ecc     84 18 86 F1 | 	sub	arg04, #132
17ed0     04 18 46 F0 | 	shr	arg04, #4
17ed4     04 18 66 F0 | 	shl	arg04, #4
17ed8     00 18 56 F2 | 	cmps	arg04, #0 wc
17edc     0E FA 65 C6 |  if_b	neg	result1, #14
17ee0     10 01 90 CD |  if_b	jmp	#LR__1903
17ee4                 | ' 
17ee4                 | '     ' compute the input delay
17ee4                 | ' 
17ee4                 | '     if delay <= 0
17ee4     01 20 56 F2 | 	cmps	local02, #1 wc
17ee8     10 00 90 3D |  if_ae	jmp	#LR__1900
17eec                 | '         delay := lookupDelay(freq)
17eec     0F 13 02 F6 | 	mov	arg01, local01
17ef0     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
17ef4     FD 20 02 F6 | 	mov	local02, result1
17ef8     04 00 90 FD | 	jmp	#LR__1901
17efc                 | LR__1900
17efc                 | '     else
17efc                 | '         delay <#= $f ' limit to 15
17efc     0F 20 66 F3 | 	fles	local02, #15
17f00                 | LR__1901
17f00                 | ' 
17f00                 | '     ' create our lock
17f00                 | ' 
17f00                 | '     driverlock := LOCKNEW()  
17f00     00 FA 05 F6 | 	mov	result1, #0
17f04     04 FA 61 FD | 	locknew	result1
17f08     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
17f0c     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
17f10                 | '     if driverlock == -1
17f10     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
17f14     FF FF 7F FF 
17f18     FF FB 0D F2 | 	cmp	result1, ##-1 wz
17f1c                 | '         return ERR_NO_LOCK
17f1c     1A FA 65 A6 |  if_e	neg	result1, #26
17f20     D0 00 90 AD |  if_e	jmp	#LR__1903
17f24                 | ' 
17f24                 | '     ' patch in the proper data and HUB addresses to the startup structure
17f24                 | ' 
17f24                 | '     long[@startupData][0]:=clkfreq
17f24     14 1E 06 FB | 	rdlong	local01, #20
17f28     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
17f2c     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
17f30                 | ' '    long[@startupData][1]:=$1000_0000
17f30                 | '     long[@startupData][5]:=@deviceData
17f30     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
17f34     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
17f38     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
17f3c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
17f40     14 14 06 F1 | 	add	arg02, #20
17f44     0A 1F 62 FC | 	wrlong	local01, arg02
17f48                 | '     long[@startupData][6]:=@qosData
17f48     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
17f4c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
17f50     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
17f54     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
17f58     18 14 06 F1 | 	add	arg02, #24
17f5c     0A 1F 62 FC | 	wrlong	local01, arg02
17f60                 | '     long[@startupData][7]:=$7FF00
17f60     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
17f64     1C 1E 06 F1 | 	add	local01, #28
17f68     FF 03 80 FF 
17f6c     0F 01 6A FC | 	wrlong	##524032, local01
17f70                 | ' 
17f70                 | '     ' setup some default bank and QoS parameter values
17f70                 | ' 
17f70                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
17f70     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
17f74     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
17f78     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
17f7c     10 18 66 F0 | 	shl	arg04, #16
17f80     0C 20 66 F0 | 	shl	local02, #12
17f84     10 19 42 F5 | 	or	arg04, local02
17f88     18 18 46 F5 | 	or	arg04, #24
17f8c     0C 15 02 F6 | 	mov	arg02, arg04
17f90     02 16 06 F6 | 	mov	arg03, #2
17f94     A0 00 A0 FD | 	call	#\builtin_longfill_
17f98                 | '     longfill(@qosData, $FFFF0000, 8)
17f98     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
17f9c     07 16 06 F6 | 	mov	arg03, #7
17fa0     28 16 62 FD | 	setq	arg03
17fa4     80 FF FF FF 
17fa8     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
17fac                 | ' 
17fac                 | '     ' get the address of the PSRAM memory driver so we can start it
17fac                 | ' 
17fac                 | '     driverAddr:= driver.getDriverAddr()
17fac                 | '     return @driver_start
17fac     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
17fb0     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
17fb4     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
17fb8                 | ' 
17fb8                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
17fb8                 | ' 
17fb8                 | '     if desiredcog < 0
17fb8     00 22 56 F2 | 	cmps	local03, #0 wc
17fbc                 | '         desiredcog := NEWCOG
17fbc     10 22 06 C6 |  if_b	mov	local03, #16
17fc0                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
17fc0     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
17fc4     11 25 02 F6 | 	mov	local04, local03
17fc8     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
17fcc     0A 25 F2 FC | 	coginit	local04, arg02 wc
17fd0     01 24 66 C6 |  if_b	neg	local04, #1
17fd4     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
17fd8     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
17fdc                 | '     repeat until long[@startupData] == 0 
17fdc     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
17fe0                 | LR__1902
17fe0     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
17fe4     F8 FF 9F 5D |  if_ne	jmp	#LR__1902
17fe8                 | ' 
17fe8                 | '     return drivercog
17fe8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
17fec     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
17ff0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
17ff4                 | LR__1903
17ff4     A7 F0 03 F6 | 	mov	ptra, fp
17ff8     B2 00 A0 FD | 	call	#popregs_
17ffc                 | _psram_spin2_startx_ret
17ffc     2D 00 64 FD | 	ret
18000                 | 
18000                 | ' 
18000                 | ' '..............................................................................
18000                 | ' 
18000                 | ' {{
18000                 | ' }}
18000                 | ' PUB stop() : i
18000                 | _psram_spin2_stop
18000     00 00 06 F6 | 	mov	_var01, #0
18004                 | '     if drivercog <> -1
18004     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18008     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1800c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18010     FF FF 7F FF 
18014     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
18018     70 00 90 AD |  if_e	jmp	#LR__1913
1801c                 | '         cogstop(drivercog) ' a rather brutal stop
1801c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18020     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
18024     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18028     03 12 62 FD | 	cogstop	arg01
1802c     97 26 48 FB | 	callpa	#(@LR__1912-@LR__1910)>>2,fcache_load_ptr_
18030                 | '         repeat i from 0 to 7
18030                 | LR__1910
18030                 | '             if long[$7FF00][i*3] < 0
18030     00 FB 01 F6 | 	mov	result1, _var01
18034     01 FA 65 F0 | 	shl	result1, #1
18038     00 FB 01 F1 | 	add	result1, _var01
1803c     02 FA 65 F0 | 	shl	result1, #2
18040     FF 03 00 FF 
18044     00 FB 05 F1 | 	add	result1, ##524032
18048     FD FA 01 FB | 	rdlong	result1, result1
1804c     00 FA 55 F2 | 	cmps	result1, #0 wc
18050     1C 00 90 3D |  if_ae	jmp	#LR__1911
18054                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
18054     00 FB 01 F6 | 	mov	result1, _var01
18058     01 FA 65 F0 | 	shl	result1, #1
1805c     00 FB 01 F1 | 	add	result1, _var01
18060     02 FA 65 F0 | 	shl	result1, #2
18064     FF 03 00 FF 
18068     00 FB 05 F1 | 	add	result1, ##524032
1806c     FD 20 68 FC | 	wrlong	#16, result1
18070                 | LR__1911
18070     01 00 06 F1 | 	add	_var01, #1
18074     08 00 56 F2 | 	cmps	_var01, #8 wc
18078     B4 FF 9F CD |  if_b	jmp	#LR__1910
1807c                 | LR__1912
1807c                 | '         drivercog := -1
1807c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18080     FF FF FF FF 
18084     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
18088     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1808c                 | LR__1913
1808c                 | '     if driverlock <> -1
1808c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
18090     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
18094     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
18098     FF FF 7F FF 
1809c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
180a0                 | '         LOCKRET(driverlock)
180a0     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
180a4     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
180a8     05 12 62 5D |  if_ne	lockret	arg01
180ac                 | '         driverlock := -1
180ac     FF FF FF 5F 
180b0     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
180b4     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
180b8     00 FB 01 F6 | 	mov	result1, _var01
180bc                 | _psram_spin2_stop_ret
180bc     2D 00 64 FD | 	ret
180c0                 | 
180c0                 | ' 
180c0                 | ' '..............................................................................
180c0                 | ' 
180c0                 | ' {{
180c0                 | ' }}
180c0                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
180c0                 | _psram_spin2_read1
180c0                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
180c0                 | '     if drivercog == -1 ' driver must be running
180c0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
180c4     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
180c8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
180cc     FF FF 7F FF 
180d0     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
180d4                 | '         return ERR_INACTIVE
180d4     0F FA 65 A6 |  if_e	neg	result1, #15
180d8     7C 00 90 AD |  if_e	jmp	#LR__1921
180dc                 | '     if count == 0 ' don't even bother reading
180dc     00 16 0E F2 | 	cmp	arg03, #0 wz
180e0                 | '         return 0
180e0     00 FA 05 A6 |  if_e	mov	result1, #0
180e4     70 00 90 AD |  if_e	jmp	#LR__1921
180e8                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
180e8     00 FA 05 F6 | 	mov	result1, #0
180ec     01 FA 61 FD | 	cogid	result1
180f0     FD 00 02 F6 | 	mov	_var01, result1
180f4     01 00 66 F0 | 	shl	_var01, #1
180f8     FD 00 02 F1 | 	add	_var01, result1
180fc     02 00 66 F0 | 	shl	_var01, #2
18100     FF 03 00 FF 
18104     00 03 06 F6 | 	mov	_var02, ##524032
18108     00 03 02 F1 | 	add	_var02, _var01
1810c                 | '     if long[mailbox] < 0
1810c     01 01 02 FB | 	rdlong	_var01, _var02
18110     00 00 56 F2 | 	cmps	_var01, #0 wc
18114                 | '         return ERR_MAILBOX_BUSY
18114     1C FA 65 C6 |  if_b	neg	result1, #28
18118     3C 00 90 CD |  if_b	jmp	#LR__1921
1811c                 | '     long[mailbox][2] := count
1811c     08 02 06 F1 | 	add	_var02, #8
18120     01 17 62 FC | 	wrlong	arg03, _var02
18124                 | '     long[mailbox][1] := dstHubAddr
18124     04 02 86 F1 | 	sub	_var02, #4
18128     01 13 62 FC | 	wrlong	arg01, _var02
1812c     04 02 86 F1 | 	sub	_var02, #4
18130                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
18130     0A 05 02 F6 | 	mov	_var03, arg02
18134     D9 04 06 F4 | 	bitl	_var03, #217
18138     00 00 58 FF 
1813c     00 00 06 F6 | 	mov	_var01, ##-1342177280
18140     02 01 02 F1 | 	add	_var01, _var03
18144     01 01 62 FC | 	wrlong	_var01, _var02
18148                 | '     repeat
18148                 | LR__1920
18148                 | '         result := long[mailbox]    
18148     01 05 02 FB | 	rdlong	_var03, _var02
1814c     00 04 56 F2 | 	cmps	_var03, #0 wc
18150     F4 FF 9F CD |  if_b	jmp	#LR__1920
18154                 | '     while result < 0   
18154                 | '     return -result                       'return success or error
18154     02 FB 61 F6 | 	neg	result1, _var03
18158                 | LR__1921
18158                 | _psram_spin2_read1_ret
18158     2D 00 64 FD | 	ret
1815c                 | 
1815c                 | ' 
1815c                 | ' '..............................................................................
1815c                 | ' 
1815c                 | ' {{
1815c                 | ' }}
1815c                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1815c                 | _psram_spin2_write
1815c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1815c                 | '     if drivercog == -1 ' driver must be running
1815c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18160     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
18164     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18168     FF FF 7F FF 
1816c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
18170                 | '         return ERR_INACTIVE
18170     0F FA 65 A6 |  if_e	neg	result1, #15
18174     7C 00 90 AD |  if_e	jmp	#LR__1931
18178                 | '     if count == 0 ' don't even bother writing
18178     00 16 0E F2 | 	cmp	arg03, #0 wz
1817c                 | '         return 0
1817c     00 FA 05 A6 |  if_e	mov	result1, #0
18180     70 00 90 AD |  if_e	jmp	#LR__1931
18184                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
18184     00 FA 05 F6 | 	mov	result1, #0
18188     01 FA 61 FD | 	cogid	result1
1818c     FD 00 02 F6 | 	mov	_var01, result1
18190     01 00 66 F0 | 	shl	_var01, #1
18194     FD 00 02 F1 | 	add	_var01, result1
18198     02 00 66 F0 | 	shl	_var01, #2
1819c     FF 03 00 FF 
181a0     00 03 06 F6 | 	mov	_var02, ##524032
181a4     00 03 02 F1 | 	add	_var02, _var01
181a8                 | '     if long[mailbox] < 0
181a8     01 01 02 FB | 	rdlong	_var01, _var02
181ac     00 00 56 F2 | 	cmps	_var01, #0 wc
181b0                 | '         return ERR_MAILBOX_BUSY
181b0     1C FA 65 C6 |  if_b	neg	result1, #28
181b4     3C 00 90 CD |  if_b	jmp	#LR__1931
181b8                 | '     long[mailbox][2] := count
181b8     08 02 06 F1 | 	add	_var02, #8
181bc     01 17 62 FC | 	wrlong	arg03, _var02
181c0                 | '     long[mailbox][1] := srcHubAddr
181c0     04 02 86 F1 | 	sub	_var02, #4
181c4     01 13 62 FC | 	wrlong	arg01, _var02
181c8     04 02 86 F1 | 	sub	_var02, #4
181cc                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
181cc     0A 05 02 F6 | 	mov	_var03, arg02
181d0     D9 04 06 F4 | 	bitl	_var03, #217
181d4     00 00 78 FF 
181d8     00 00 06 F6 | 	mov	_var01, ##-268435456
181dc     02 01 02 F1 | 	add	_var01, _var03
181e0     01 01 62 FC | 	wrlong	_var01, _var02
181e4                 | '     repeat
181e4                 | LR__1930
181e4                 | '         result := long[mailbox]    
181e4     01 05 02 FB | 	rdlong	_var03, _var02
181e8     00 04 56 F2 | 	cmps	_var03, #0 wc
181ec     F4 FF 9F CD |  if_b	jmp	#LR__1930
181f0                 | '     while result < 0   
181f0                 | '     return -result                       'return success or error
181f0     02 FB 61 F6 | 	neg	result1, _var03
181f4                 | LR__1931
181f4                 | _psram_spin2_write_ret
181f4     2D 00 64 FD | 	ret
181f8                 | 
181f8                 | ' 
181f8                 | ' ' generalized fill
181f8                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
181f8                 | _psram_spin2_fill
181f8     09 01 02 F6 | 	mov	_var01, arg01
181fc     0A 03 02 F6 | 	mov	_var02, arg02
18200     0B 05 02 F6 | 	mov	_var03, arg03
18204     0D 07 02 F6 | 	mov	_var04, arg05
18208                 | '     case datasize 
18208     01 06 86 F1 | 	sub	_var04, #1
1820c     04 06 26 F3 | 	fle	_var04, #4
18210     30 06 62 FD | 	jmprel	_var04
18214                 | LR__1940
18214     10 00 90 FD | 	jmp	#LR__1941
18218     18 00 90 FD | 	jmp	#LR__1942
1821c     2C 00 90 FD | 	jmp	#LR__1944
18220     1C 00 90 FD | 	jmp	#LR__1943
18224     24 00 90 FD | 	jmp	#LR__1944
18228                 | LR__1941
18228                 | '         1: req := driver.R_WRITEBYTE
18228     00 00 60 FF 
1822c     00 08 06 F6 | 	mov	_var05, ##-1073741824
18230     20 00 90 FD | 	jmp	#LR__1945
18234                 | LR__1942
18234                 | '         2: req := driver.R_WRITEWORD
18234     00 00 68 FF 
18238     00 08 06 F6 | 	mov	_var05, ##-805306368
1823c     14 00 90 FD | 	jmp	#LR__1945
18240                 | LR__1943
18240                 | '         4: req := driver.R_WRITELONG
18240     00 00 70 FF 
18244     00 08 06 F6 | 	mov	_var05, ##-536870912
18248     08 00 90 FD | 	jmp	#LR__1945
1824c                 | LR__1944
1824c                 | '         other : return ERR_INVALID
1824c     06 FA 65 F6 | 	neg	result1, #6
18250     94 00 90 FD | 	jmp	#LR__1947
18254                 | LR__1945
18254                 | '     if count == 0   ' nothing to do
18254     00 04 0E F2 | 	cmp	_var03, #0 wz
18258                 | '         return 0
18258     00 FA 05 A6 |  if_e	mov	result1, #0
1825c     88 00 90 AD |  if_e	jmp	#LR__1947
18260                 | '     if drivercog == -1
18260     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18264     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
18268     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1826c     FF FF 7F FF 
18270     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
18274                 | '         return ERR_INACTIVE
18274     0F FA 65 A6 |  if_e	neg	result1, #15
18278     6C 00 90 AD |  if_e	jmp	#LR__1947
1827c                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1827c     00 FA 05 F6 | 	mov	result1, #0
18280     01 FA 61 FD | 	cogid	result1
18284     FD 06 02 F6 | 	mov	_var04, result1
18288     01 06 66 F0 | 	shl	_var04, #1
1828c     FD 06 02 F1 | 	add	_var04, result1
18290     02 06 66 F0 | 	shl	_var04, #2
18294     FF 03 00 FF 
18298     00 0B 06 F6 | 	mov	_var06, ##524032
1829c     03 0B 02 F1 | 	add	_var06, _var04
182a0                 | '     if long[mailbox] < 0
182a0     05 07 02 FB | 	rdlong	_var04, _var06
182a4     00 06 56 F2 | 	cmps	_var04, #0 wc
182a8                 | '         return ERR_MAILBOX_BUSY
182a8     1C FA 65 C6 |  if_b	neg	result1, #28
182ac     38 00 90 CD |  if_b	jmp	#LR__1947
182b0                 | '     long[mailbox][2] := count
182b0     08 0A 06 F1 | 	add	_var06, #8
182b4     05 05 62 FC | 	wrlong	_var03, _var06
182b8                 | '     long[mailbox][1] := pattern
182b8     04 0A 86 F1 | 	sub	_var06, #4
182bc     05 03 62 FC | 	wrlong	_var02, _var06
182c0     04 0A 86 F1 | 	sub	_var06, #4
182c4                 | '     long[mailbox] := req + (addr & $fffffff)
182c4     04 0D 02 F6 | 	mov	_var07, _var05
182c8     00 0F 02 F6 | 	mov	_var08, _var01
182cc     7C 0E 06 F4 | 	bitl	_var08, #124
182d0     07 0D 02 F1 | 	add	_var07, _var08
182d4     05 0D 62 FC | 	wrlong	_var07, _var06
182d8                 | '     repeat
182d8                 | LR__1946
182d8                 | '         r := long[mailbox]
182d8     05 0F 02 FB | 	rdlong	_var08, _var06
182dc     00 0E 56 F2 | 	cmps	_var08, #0 wc
182e0     F4 FF 9F CD |  if_b	jmp	#LR__1946
182e4                 | '     while r < 0
182e4                 | '     return -r                  ' return 0 for success or negated error code
182e4     07 FB 61 F6 | 	neg	result1, _var08
182e8                 | LR__1947
182e8                 | _psram_spin2_fill_ret
182e8     2D 00 64 FD | 	ret
182ec                 | 
182ec                 | ' 
182ec                 | ' '..............................................................................
182ec                 | ' 
182ec                 | ' {{
182ec                 | ' }}
182ec                 | ' PUB setQos(cog, qos) : result | mailbox
182ec                 | _psram_spin2_setQos
182ec     09 01 02 F6 | 	mov	_var01, arg01
182f0                 | '     if drivercog == -1 ' driver must be running
182f0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
182f4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
182f8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
182fc     FF FF 7F FF 
18300     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
18304                 | '         return ERR_INACTIVE
18304     0F FA 65 A6 |  if_e	neg	result1, #15
18308     9C 00 90 AD |  if_e	jmp	#LR__1954
1830c                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1830c     00 00 56 F2 | 	cmps	_var01, #0 wc
18310     08 00 90 CD |  if_b	jmp	#LR__1950
18314     08 00 56 F2 | 	cmps	_var01, #8 wc
18318     08 00 90 CD |  if_b	jmp	#LR__1951
1831c                 | LR__1950
1831c                 | '         return ERR_INVALID
1831c     06 FA 65 F6 | 	neg	result1, #6
18320     84 00 90 FD | 	jmp	#LR__1954
18324                 | LR__1951
18324                 | '     long[@qosData][cog] := qos & !$1ff
18324     FF 15 26 F5 | 	andn	arg02, #511
18328     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1832c     02 00 66 F0 | 	shl	_var01, #2
18330     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
18334     00 15 62 FC | 	wrlong	arg02, _var01
18338                 | '     mailbox := $7FF00 + drivercog*12
18338     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1833c     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
18340     02 07 02 F6 | 	mov	_var04, _var03
18344     01 06 66 F0 | 	shl	_var04, #1
18348     02 07 02 F1 | 	add	_var04, _var03
1834c     02 06 66 F0 | 	shl	_var04, #2
18350     FF 03 00 FF 
18354     00 09 06 F6 | 	mov	_var05, ##524032
18358     03 09 02 F1 | 	add	_var05, _var04
1835c                 | '     repeat until LOCKTRY(driverlock)
1835c     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
18360                 | LR__1952
18360     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
18364     06 12 72 FD | 	locktry	arg01 wc
18368     F4 FF 9F 3D |  if_ae	jmp	#LR__1952
1836c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
18370                 | '     long[mailbox] := driver.R_CONFIG + cogid()
18370     00 06 06 F6 | 	mov	_var04, #0
18374     01 06 62 FD | 	cogid	_var04
18378     00 00 78 FF 
1837c     00 02 06 F6 | 	mov	_var02, ##-268435456
18380     03 03 02 F1 | 	add	_var02, _var04
18384     04 03 62 FC | 	wrlong	_var02, _var05
18388                 | '     repeat while long[mailbox] < 0
18388                 | LR__1953
18388     04 03 02 FB | 	rdlong	_var02, _var05
1838c     00 02 56 F2 | 	cmps	_var02, #0 wc
18390     F4 FF 9F CD |  if_b	jmp	#LR__1953
18394                 | '     LOCKREL(driverlock)
18394     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
18398     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1839c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
183a0     07 12 72 FD | 	lockrel	arg01 wc
183a4     00 FA 05 F6 | 	mov	result1, #0
183a8                 | LR__1954
183a8                 | _psram_spin2_setQos_ret
183a8     2D 00 64 FD | 	ret
183ac                 | 
183ac                 | ' 
183ac                 | ' '..............................................................................
183ac                 | ' 
183ac                 | ' {{
183ac                 | ' }}
183ac                 | ' PRI lookupDelay(freq) : delay | profile
183ac                 | _psram_spin2_lookupDelay
183ac                 | '     profile := @delayTable
183ac     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
183b0     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
183b4                 | '     delay := long[profile][0]
183b4     00 03 02 FB | 	rdlong	_var02, _var01
183b8                 | '     repeat while long[profile][1] 
183b8     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
183bc     97 16 48 FB | 	callpa	#(@LR__1961-@LR__1960)>>2,fcache_load_ptr_
183c0                 | LR__1960
183c0     04 00 06 F1 | 	add	_var01, #4
183c4     00 FB 09 FB | 	rdlong	result1, _var01 wz
183c8     04 00 86 F1 | 	sub	_var01, #4
183cc     1C 00 90 AD |  if_e	jmp	#LR__1962
183d0                 | '         if freq +< long[profile][1] 
183d0     04 00 06 F1 | 	add	_var01, #4
183d4     00 FB 01 FB | 	rdlong	result1, _var01
183d8     04 00 86 F1 | 	sub	_var01, #4
183dc     FD 12 12 F2 | 	cmp	arg01, result1 wc
183e0                 | '             quit
183e0                 | '         profile += 4
183e0     04 00 06 31 |  if_ae	add	_var01, #4
183e4                 | '         delay++
183e4     01 02 06 31 |  if_ae	add	_var02, #1
183e8     D4 FF 9F 3D |  if_ae	jmp	#LR__1960
183ec                 | LR__1961
183ec                 | LR__1962
183ec     01 FB 01 F6 | 	mov	result1, _var02
183f0                 | _psram_spin2_lookupDelay_ret
183f0     2D 00 64 FD | 	ret
183f4                 | 
183f4                 | ' 
183f4                 | ' PUB start() : r
183f4                 | _usbnew_spin2_start
183f4     00 00 06 F6 | 	mov	_var01, #0
183f8                 | '   ifnot driver_cog
183f8     15 00 00 FF 
183fc     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
18400     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
18404     15 00 00 FF 
18408     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1840c     38 00 90 5D |  if_ne	jmp	#LR__1970
18410                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
18410     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
18414     10 00 06 F6 | 	mov	_var01, #16
18418     00 16 06 F6 | 	mov	arg03, #0
1841c     28 16 62 FD | 	setq	arg03
18420     0A 01 F2 FC | 	coginit	_var01, arg02 wc
18424     01 00 66 C6 |  if_b	neg	_var01, #1
18428                 | '     if r >= 0
18428     00 00 56 F2 | 	cmps	_var01, #0 wc
1842c                 | '       driver_cog := r+1
1842c     00 03 02 36 |  if_ae	mov	_var02, _var01
18430     01 02 06 31 |  if_ae	add	_var02, #1
18434     15 00 00 3F 
18438     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1843c     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
18440     15 00 00 3F 
18444     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
18448                 | LR__1970
18448     00 FB 01 F6 | 	mov	result1, _var01
1844c                 | _usbnew_spin2_start_ret
1844c     2D 00 64 FD | 	ret
18450                 | 
18450                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
18450                 | ' 
18450                 | ' '' Return key event from buffer if there is one
18450                 | ' PUB get_key() : r | tail
18450                 | _usbnew_spin2_get_key
18450                 | '   tail := keyq_tail
18450     0F 00 00 FF 
18454     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
18458     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
1845c                 | '   if keyq_head == tail
1845c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
18460     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
18464     0F 00 00 FF 
18468     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
1846c     00 03 0A F2 | 	cmp	_var02, _var01 wz
18470                 | '     return 0 ' No event
18470     00 FA 05 A6 |  if_e	mov	result1, #0
18474     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
18478                 | '   r := keyq_data[tail]
18478     00 03 02 F6 | 	mov	_var02, _var01
1847c     02 02 66 F0 | 	shl	_var02, #2
18480     0F 00 00 FF 
18484     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
18488     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
1848c     01 FB 01 FB | 	rdlong	result1, _var02
18490                 | '   if ++tail == KEYQUEUE_SIZE
18490     01 00 06 F1 | 	add	_var01, #1
18494     80 00 0E F2 | 	cmp	_var01, #128 wz
18498                 | '     tail := 0
18498     00 00 06 A6 |  if_e	mov	_var01, #0
1849c                 | '   keyq_tail := tail
1849c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
184a0     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
184a4     0F 00 00 FF 
184a8     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
184ac                 | _usbnew_spin2_get_key_ret
184ac     2D 00 64 FD | 	ret
184b0                 | 
184b0                 | ' 
184b0                 | ' '' Emulate mouse movement
184b0                 | ' PUB mouse_move(x,y)
184b0                 | _usbnew_spin2_mouse_move
184b0     02 4A 05 F6 | 	mov	COUNT_, #2
184b4     A8 00 A0 FD | 	call	#pushregs_
184b8     09 1F 02 F6 | 	mov	local01, arg01
184bc     0A 21 02 F6 | 	mov	local02, arg02
184c0                 | '   mouse_lock := 1
184c0     14 00 00 FF 
184c4     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
184c8     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
184cc     14 00 00 FF 
184d0     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
184d4                 | '   waitus(2) ' hope driver is now done
184d4     02 12 06 F6 | 	mov	arg01, #2
184d8     34 0A B0 FD | 	call	#__system___waitus
184dc                 | '   mouse_xacc := x
184dc     14 00 00 FF 
184e0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
184e4     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
184e8                 | '   mouse_yacc := y
184e8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
184ec     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
184f0                 | '   if mouse_outptr
184f0     04 00 00 FF 
184f4     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
184f8     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
184fc     0F 00 00 FF 
18500     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
18504     24 00 90 AD |  if_e	jmp	#LR__1980
18508                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
18508     10 20 66 F0 | 	shl	local02, #16
1850c     0F 1F 32 F9 | 	getword	local01, local01, #0
18510     0F 21 42 F5 | 	or	local02, local01
18514     0F 00 00 FF 
18518     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
1851c     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
18520     0F 00 00 FF 
18524     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
18528     0F 21 62 FC | 	wrlong	local02, local01
1852c                 | LR__1980
1852c                 | '   mouse_lock := 0
1852c     14 00 00 FF 
18530     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
18534     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
18538     14 00 00 FF 
1853c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
18540     A7 F0 03 F6 | 	mov	ptra, fp
18544     B2 00 A0 FD | 	call	#popregs_
18548                 | _usbnew_spin2_mouse_move_ret
18548     2D 00 64 FD | 	ret
1854c                 | 
1854c                 | '     '' Set HAVE_HIDPAD to enable.
1854c                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
1854c                 | ' 
1854c                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
1854c                 | ' PUB hidpad_id(dev) : r
1854c                 | _usbnew_spin2_hidpad_id
1854c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
1854c     13 00 00 FF 
18550     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
18554     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
18558     09 01 02 F6 | 	mov	_var01, arg01
1855c     03 00 66 F0 | 	shl	_var01, #3
18560     09 01 82 F1 | 	sub	_var01, arg01
18564     02 00 66 F0 | 	shl	_var01, #2
18568     00 FB 01 F1 | 	add	result1, _var01
1856c     FD FA 01 FB | 	rdlong	result1, result1
18570     13 00 00 FF 
18574     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
18578                 | _usbnew_spin2_hidpad_id_ret
18578     2D 00 64 FD | 	ret
1857c                 | 
1857c                 | ' 
1857c                 | ' '' Get all button states for a device
1857c                 | ' PUB hidpad_buttons(dev) : r 
1857c                 | _usbnew_spin2_hidpad_buttons
1857c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
1857c     13 00 00 FF 
18580     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
18584     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
18588     09 01 02 F6 | 	mov	_var01, arg01
1858c     03 00 66 F0 | 	shl	_var01, #3
18590     09 01 82 F1 | 	sub	_var01, arg01
18594     02 00 66 F0 | 	shl	_var01, #2
18598     00 FB 01 F1 | 	add	result1, _var01
1859c     14 FA 05 F1 | 	add	result1, #20
185a0     FD FA 01 FB | 	rdlong	result1, result1
185a4     13 00 00 FF 
185a8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
185ac                 | _usbnew_spin2_hidpad_buttons_ret
185ac     2D 00 64 FD | 	ret
185b0                 | 
185b0                 | ' 
185b0                 | ' '' Get state of an axis (normalized between -32768 and 32767)
185b0                 | ' PUB hidpad_axis(dev,axnum) : r
185b0                 | _usbnew_spin2_hidpad_axis
185b0                 | '   if axnum +>= 6
185b0     06 14 16 F2 | 	cmp	arg02, #6 wc
185b4                 | '     return 0
185b4     00 FA 05 36 |  if_ae	mov	result1, #0
185b8     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
185bc                 | '   else 
185bc                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
185bc     13 00 00 FF 
185c0     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
185c4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
185c8     09 01 02 F6 | 	mov	_var01, arg01
185cc     03 00 66 F0 | 	shl	_var01, #3
185d0     09 01 82 F1 | 	sub	_var01, arg01
185d4     02 00 66 F0 | 	shl	_var01, #2
185d8     00 FB 01 F1 | 	add	result1, _var01
185dc     04 00 06 F6 | 	mov	_var01, #4
185e0     0A 01 02 F1 | 	add	_var01, arg02
185e4     01 00 66 F0 | 	shl	_var01, #1
185e8     FD 00 02 F1 | 	add	_var01, result1
185ec     00 FB E1 FA | 	rdword	result1, _var01
185f0     0F FA 65 F7 | 	signx	result1, #15
185f4     13 00 00 FF 
185f8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
185fc                 | _usbnew_spin2_hidpad_axis_ret
185fc     2D 00 64 FD | 	ret
18600                 | 
18600                 | ' 
18600                 | ' 
18600                 | ' '--------------------------------------------------------------
18600                 | ' '---------- Init the variables, start the cog. ----------------
18600                 | ' '--------------------------------------------------------------
18600                 | ' 
18600                 | ' pub start(mbox,scope,cache) :cog,base | iii
18600                 | _Audio093b_8_sc_spin2_start
18600     04 4A 05 F6 | 	mov	COUNT_, #4
18604     A8 00 A0 FD | 	call	#pushregs_
18608     09 1F 02 F6 | 	mov	local01, arg01
1860c                 | ' 
1860c                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
1860c                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
1860c                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
1860c                 | ' 
1860c                 | ' mailboxaddr:=mbox 
1860c     F2 1E 62 FC | 	wrlong	local01, objptr
18610                 | ' scope_ptr:=scope
18610     04 E4 05 F1 | 	add	objptr, #4
18614     F2 14 62 FC | 	wrlong	arg02, objptr
18618                 | ' cache_ptr:=cache
18618     04 E4 05 F1 | 	add	objptr, #4
1861c     F2 16 62 FC | 	wrlong	arg03, objptr
18620                 | ' base:=@channel1[0]
18620     04 E4 05 F1 | 	add	objptr, #4
18624     F2 20 02 F6 | 	mov	local02, objptr
18628                 | ' 
18628                 | ' repeat iii from 0 to 7
18628     00 22 06 F6 | 	mov	local03, #0
1862c     01 00 00 FF 
18630     D8 E7 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##984
18634     0C E4 85 F1 | 	sub	objptr, #12
18638     97 80 48 FB | 	callpa	#(@LR__1991-@LR__1990)>>2,fcache_load_ptr_
1863c                 | LR__1990
1863c                 | '   long[base+32*iii]:=0
1863c     10 1F 02 F6 | 	mov	local01, local02
18640     11 FD 01 F6 | 	mov	result2, local03
18644     05 FC 65 F0 | 	shl	result2, #5
18648     FE 1E 02 F1 | 	add	local01, result2
1864c     0F 01 68 FC | 	wrlong	#0, local01
18650                 | '   long[base+32*iii+4]:=0
18650     10 1F 02 F6 | 	mov	local01, local02
18654     11 FD 01 F6 | 	mov	result2, local03
18658     05 FC 65 F0 | 	shl	result2, #5
1865c     FE 1E 02 F1 | 	add	local01, result2
18660     04 1E 06 F1 | 	add	local01, #4
18664     0F 01 68 FC | 	wrlong	#0, local01
18668                 | '   long[base+32*iii+12]:=0
18668     10 25 02 F6 | 	mov	local04, local02
1866c     11 1F 02 F6 | 	mov	local01, local03
18670     05 1E 66 F0 | 	shl	local01, #5
18674     0F 25 02 F1 | 	add	local04, local01
18678     0C 24 06 F1 | 	add	local04, #12
1867c     12 01 68 FC | 	wrlong	#0, local04
18680                 | '   long[base+32*iii+16]:=2 
18680     10 25 02 F6 | 	mov	local04, local02
18684     11 1F 02 F6 | 	mov	local01, local03
18688     05 1E 66 F0 | 	shl	local01, #5
1868c     0F 25 02 F1 | 	add	local04, local01
18690     10 24 06 F1 | 	add	local04, #16
18694     12 05 68 FC | 	wrlong	#2, local04
18698                 | '   word[base+32*iii+20]:=0
18698     10 25 02 F6 | 	mov	local04, local02
1869c     11 1F 02 F6 | 	mov	local01, local03
186a0     05 1E 66 F0 | 	shl	local01, #5
186a4     0F 25 02 F1 | 	add	local04, local01
186a8     14 24 06 F1 | 	add	local04, #20
186ac     12 01 58 FC | 	wrword	#0, local04
186b0                 | '   word[base+32*iii+22]:=8192
186b0     10 25 02 F6 | 	mov	local04, local02
186b4     11 1F 02 F6 | 	mov	local01, local03
186b8     05 1E 66 F0 | 	shl	local01, #5
186bc     0F 25 02 F1 | 	add	local04, local01
186c0     16 24 06 F1 | 	add	local04, #22
186c4     10 00 80 FF 
186c8     12 01 58 FC | 	wrword	##8192, local04
186cc                 | '   word[base+32*iii+24]:=4000+2*iii
186cc     11 25 02 F6 | 	mov	local04, local03
186d0     01 24 66 F0 | 	shl	local04, #1
186d4     07 00 00 FF 
186d8     A0 1F 06 F6 | 	mov	local01, ##4000
186dc     12 1F 02 F1 | 	add	local01, local04
186e0     10 25 02 F6 | 	mov	local04, local02
186e4     11 FD 01 F6 | 	mov	result2, local03
186e8     05 FC 65 F0 | 	shl	result2, #5
186ec     FE 24 02 F1 | 	add	local04, result2
186f0     18 24 06 F1 | 	add	local04, #24
186f4     12 1F 52 FC | 	wrword	local01, local04
186f8                 | '   word[base+32*iii+26]:=2
186f8     10 25 02 F6 | 	mov	local04, local02
186fc     11 1F 02 F6 | 	mov	local01, local03
18700     05 1E 66 F0 | 	shl	local01, #5
18704     0F 25 02 F1 | 	add	local04, local01
18708     1A 24 06 F1 | 	add	local04, #26
1870c     12 05 58 FC | 	wrword	#2, local04
18710                 | '   long [base+32*iii+8]:=@null | $C0000000
18710     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
18714     3E 1E 26 F4 | 	bith	local01, #62
18718     10 25 02 F6 | 	mov	local04, local02
1871c     11 17 02 F6 | 	mov	arg03, local03
18720     05 16 66 F0 | 	shl	arg03, #5
18724     0B 25 02 F1 | 	add	local04, arg03
18728     08 24 06 F1 | 	add	local04, #8
1872c     12 1F 62 FC | 	wrlong	local01, local04
18730     01 22 06 F1 | 	add	local03, #1
18734     08 22 56 F2 | 	cmps	local03, #8 wc
18738     00 FF 9F CD |  if_b	jmp	#LR__1990
1873c                 | LR__1991
1873c     01 00 00 FF 
18740     D8 E7 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##984
18744                 | '   
18744                 | ' cog:=coginit(16,@audio,@mailboxaddr)
18744     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
18748     F2 16 02 F6 | 	mov	arg03, objptr
1874c     10 24 06 F6 | 	mov	local04, #16
18750     28 16 62 FD | 	setq	arg03
18754     0A 25 F2 FC | 	coginit	local04, arg02 wc
18758     01 24 66 C6 |  if_b	neg	local04, #1
1875c                 | ' waitms(100)
1875c     64 12 06 F6 | 	mov	arg01, #100
18760     40 07 B0 FD | 	call	#__system___waitms
18764                 | ' return cog,base
18764     10 FD 01 F6 | 	mov	result2, local02
18768     12 FB 01 F6 | 	mov	result1, local04
1876c     A7 F0 03 F6 | 	mov	ptra, fp
18770     B2 00 A0 FD | 	call	#popregs_
18774                 | _Audio093b_8_sc_spin2_start_ret
18774     2D 00 64 FD | 	ret
18778                 | 
18778                 | ' 
18778                 | ' ' a simple play procedure to not poke everything. 
18778                 | ' 
18778                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
18778                 | _Audio093b_8_sc_spin2_play
18778     0C E4 05 F1 | 	add	objptr, #12
1877c     F2 00 02 F6 | 	mov	_var01, objptr
18780     05 12 66 F0 | 	shl	arg01, #5
18784     09 01 02 F1 | 	add	_var01, arg01
18788     00 00 60 FF 
1878c     00 14 06 F1 | 	add	arg02, ##-1073741824
18790     00 13 02 F6 | 	mov	arg01, _var01
18794     08 12 06 F1 | 	add	arg01, #8
18798     09 15 62 FC | 	wrlong	arg02, arg01
1879c     00 15 02 F6 | 	mov	arg02, _var01
187a0     0C 14 06 F1 | 	add	arg02, #12
187a4     0A 1B 62 FC | 	wrlong	arg05, arg02
187a8     00 1C 56 F2 | 	cmps	arg06, #0 wc
187ac     00 15 02 36 |  if_ae	mov	arg02, _var01
187b0     10 14 06 31 |  if_ae	add	arg02, #16
187b4     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
187b8     02 1A 06 C1 |  if_b	add	arg05, #2
187bc     00 13 02 C6 |  if_b	mov	arg01, _var01
187c0     10 12 06 C1 |  if_b	add	arg01, #16
187c4     09 1B 62 CC |  if_b	wrlong	arg05, arg01
187c8     0B 15 52 F6 | 	abs	arg02, arg03 wc
187cc     0F 1B 80 FF 
187d0     0A 3F 1A FD | 	qdiv	##3546911, arg02
187d4                 | ' 
187d4                 | ' base2:=@channel1[0]+32*channel
187d4                 | ' long[base2+8]:=sample+$C0000000 
187d4                 | ' long[base2+12]:= len
187d4                 | ' if loop >=0 
187d4                 | '   long[base2+16]:= loop
187d4     0C E4 85 F1 | 	sub	objptr, #12
187d8                 | ' else
187d8                 | '   long[base2+16]:= len+2
187d8                 | ' word[base2+20]:=vol
187d8     00 15 02 F6 | 	mov	arg02, _var01
187dc     14 14 06 F1 | 	add	arg02, #20
187e0     0A 19 52 FC | 	wrword	arg04, arg02
187e4                 | ' word[base2+24]:= 3546911/splfreq 
187e4     00 13 02 F6 | 	mov	arg01, _var01
187e8     18 12 06 F1 | 	add	arg01, #24
187ec                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
187ec                 | ' long[base2+28]:=$40000000
187ec     18 14 62 FD | 	getqx	arg02
187f0     0A 15 82 F6 | 	negc	arg02, arg02
187f4     09 15 52 FC | 	wrword	arg02, arg01
187f8     00 15 02 F6 | 	mov	arg02, _var01
187fc     1A 14 06 F1 | 	add	arg02, #26
18800     0A 01 5A FC | 	wrword	#256, arg02
18804     1C 00 06 F1 | 	add	_var01, #28
18808     00 00 A0 FF 
1880c     00 01 68 FC | 	wrlong	##1073741824, _var01
18810                 | _Audio093b_8_sc_spin2_play_ret
18810     2D 00 64 FD | 	ret
18814                 | 
18814                 | ' until (i >>8) >=len
18814                 | ' 
18814                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
18814                 | _Audio093b_8_sc_spin2_play8
18814                 | ' 
18814                 | ' base2:=@channel1[0]+32*channel
18814     0C E4 05 F1 | 	add	objptr, #12
18818     F2 00 02 F6 | 	mov	_var01, objptr
1881c     05 12 66 F0 | 	shl	arg01, #5
18820     09 01 02 F1 | 	add	_var01, arg01
18824                 | ' long[base2]:=0
18824     00 01 68 FC | 	wrlong	#0, _var01
18828                 | ' long[base2+8]:=sample+$40000000 
18828     00 00 20 FF 
1882c     00 14 06 F1 | 	add	arg02, ##1073741824
18830     00 13 02 F6 | 	mov	arg01, _var01
18834     08 12 06 F1 | 	add	arg01, #8
18838     09 15 62 FC | 	wrlong	arg02, arg01
1883c                 | ' if loop>=0
1883c     00 1C 56 F2 | 	cmps	arg06, #0 wc
18840     0C E4 85 F1 | 	sub	objptr, #12
18844     1C 00 90 CD |  if_b	jmp	#LR__2000
18848                 | '   long[base2+12]:=loop
18848     00 15 02 F6 | 	mov	arg02, _var01
1884c     0C 14 06 F1 | 	add	arg02, #12
18850     0A 1D 62 FC | 	wrlong	arg06, arg02
18854                 | '   long[base2+16]:= len
18854     00 1D 02 F6 | 	mov	arg06, _var01
18858     10 1C 06 F1 | 	add	arg06, #16
1885c     0E 1B 62 FC | 	wrlong	arg05, arg06
18860     1C 00 90 FD | 	jmp	#LR__2001
18864                 | LR__2000
18864                 | ' else
18864                 | '   long[base2+12]:= len
18864     00 1D 02 F6 | 	mov	arg06, _var01
18868     0C 1C 06 F1 | 	add	arg06, #12
1886c     0E 1B 62 FC | 	wrlong	arg05, arg06
18870                 | '   long[base2+16]:= len+1
18870     01 1A 06 F1 | 	add	arg05, #1
18874     00 13 02 F6 | 	mov	arg01, _var01
18878     10 12 06 F1 | 	add	arg01, #16
1887c     09 1B 62 FC | 	wrlong	arg05, arg01
18880                 | LR__2001
18880     0B 17 52 F6 | 	abs	arg03, arg03 wc
18884     0F 1B 80 FF 
18888     0B 3F 1A FD | 	qdiv	##3546911, arg03
1888c                 | ' word[base2+20]:=vol
1888c     00 17 02 F6 | 	mov	arg03, _var01
18890     14 16 06 F1 | 	add	arg03, #20
18894     0B 19 52 FC | 	wrword	arg04, arg03
18898                 | ' word[base2+24]:= 3546911/splfreq 
18898     00 13 02 F6 | 	mov	arg01, _var01
1889c     18 12 06 F1 | 	add	arg01, #24
188a0                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
188a0                 | ' long[base2+28]:=$40000000
188a0     18 18 62 FD | 	getqx	arg04
188a4     0C 19 82 F6 | 	negc	arg04, arg04
188a8     09 19 52 FC | 	wrword	arg04, arg01
188ac     00 19 02 F6 | 	mov	arg04, _var01
188b0     1A 18 06 F1 | 	add	arg04, #26
188b4     0C 01 5A FC | 	wrword	#256, arg04
188b8     1C 00 06 F1 | 	add	_var01, #28
188bc     00 00 A0 FF 
188c0     00 01 68 FC | 	wrlong	##1073741824, _var01
188c4                 | _Audio093b_8_sc_spin2_play8_ret
188c4     2D 00 64 FD | 	ret
188c8                 | 
188c8                 | ' 
188c8                 | '     
188c8                 | ' pub stop(channel) 'silence it
188c8                 | _Audio093b_8_sc_spin2_stop
188c8                 | ' 
188c8                 | ' word[@channel1[0]+32*channel+20]:=0
188c8     0C E4 05 F1 | 	add	objptr, #12
188cc     F2 00 02 F6 | 	mov	_var01, objptr
188d0     05 12 66 F0 | 	shl	arg01, #5
188d4     09 01 02 F1 | 	add	_var01, arg01
188d8     14 00 06 F1 | 	add	_var01, #20
188dc     00 01 58 FC | 	wrword	#0, _var01
188e0     0C E4 85 F1 | 	sub	objptr, #12
188e4                 | _Audio093b_8_sc_spin2_stop_ret
188e4     2D 00 64 FD | 	ret
188e8                 | hubexit
188e8     81 00 80 FD | 	jmp	#cogexit
188ec                 | 
188ec                 | __system___setbaud
188ec     14 64 06 FB | 	rdlong	muldiva_, #20
188f0     09 67 02 F6 | 	mov	muldivb_, arg01
188f4     BA 00 A0 FD | 	call	#divide_
188f8     97 06 48 FB | 	callpa	#(@LR__2011-@LR__2010)>>2,fcache_load_ptr_
188fc                 | LR__2010
188fc     3E FA 9D FA | 	rdpin	result1, #62 wc
18900     FE FC A1 F1 | 	subx	result2, result2
18904     F4 FF 9F CD |  if_b	jmp	#LR__2010
18908                 | LR__2011
18908     40 7C 64 FD | 	dirl	#62
1890c     40 7E 64 FD | 	dirl	#63
18910     F4 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
18914     10 66 66 F0 | 	shl	muldivb_, #16
18918     07 14 06 F6 | 	mov	arg02, #7
1891c     33 15 02 F1 | 	add	arg02, muldivb_
18920     3E F8 0C FC | 	wrpin	#124, #62
18924     3E 14 16 FC | 	wxpin	arg02, #62
18928     3F 7C 0C FC | 	wrpin	#62, #63
1892c     14 14 06 F1 | 	add	arg02, #20
18930     3F 14 16 FC | 	wxpin	arg02, #63
18934     41 7C 64 FD | 	dirh	#62
18938     41 7E 64 FD | 	dirh	#63
1893c                 | __system___setbaud_ret
1893c     2D 00 64 FD | 	ret
18940                 | 
18940                 | __system___txraw
18940     01 4A 05 F6 | 	mov	COUNT_, #1
18944     A8 00 A0 FD | 	call	#pushregs_
18948     09 1F 02 F6 | 	mov	local01, arg01
1894c     97 06 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
18950                 | LR__2020
18950     3E FA 9D FA | 	rdpin	result1, #62 wc
18954     FE FC A1 F1 | 	subx	result2, result2
18958     F4 FF 9F CD |  if_b	jmp	#LR__2020
1895c                 | LR__2021
1895c     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
18960     C2 01 00 AF 
18964     00 12 06 A6 |  if_e	mov	arg01, ##230400
18968     80 FF BF AD |  if_e	call	#__system___setbaud
1896c     58 7C 64 FD | 	drvl	#62
18970     3E 1E 26 FC | 	wypin	local01, #62
18974     01 FA 05 F6 | 	mov	result1, #1
18978     A7 F0 03 F6 | 	mov	ptra, fp
1897c     B2 00 A0 FD | 	call	#popregs_
18980                 | __system___txraw_ret
18980     2D 00 64 FD | 	ret
18984                 | 
18984                 | __system___rxraw
18984     0D 4A 05 F6 | 	mov	COUNT_, #13
18988     A8 00 A0 FD | 	call	#pushregs_
1898c     09 1F 02 F6 | 	mov	local01, arg01
18990     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
18994     C2 01 00 AF 
18998     00 12 06 A6 |  if_e	mov	arg01, ##230400
1899c     4C FF BF AD |  if_e	call	#__system___setbaud
189a0     00 1E 0E F2 | 	cmp	local01, #0 wz
189a4     20 00 90 AD |  if_e	jmp	#LR__2030
189a8     14 22 06 FB | 	rdlong	local03, #20
189ac     0A 22 46 F0 | 	shr	local03, #10
189b0     11 1F 02 FD | 	qmul	local01, local03
189b4     1A FA 61 FD | 	getct	result1
189b8     18 24 62 FD | 	getqx	local04
189bc     12 FB 01 F1 | 	add	result1, local04
189c0     FD 26 02 F6 | 	mov	local05, result1
189c4     04 00 90 FD | 	jmp	#LR__2031
189c8                 | LR__2030
189c8     00 26 06 F6 | 	mov	local05, #0
189cc                 | LR__2031
189cc     01 28 66 F6 | 	neg	local06, #1
189d0     3F 2A 06 F6 | 	mov	local07, #63
189d4     00 2C 06 F6 | 	mov	local08, #0
189d8     04 E8 05 F1 | 	add	ptr___system__dat__, #4
189dc     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
189e0     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
189e4                 | LR__2032
189e4     08 2E 16 F4 | 	testb	local09, #8 wc
189e8     09 2E 76 F4 | 	testbn	local09, #9 andc
189ec     0A 2E 46 F0 | 	shr	local09, #10
189f0     01 2C 06 C6 |  if_b	mov	local08, #1
189f4     40 7E 6C 3D |  if_ae	testp	#63 wz
189f8     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
189fc     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
18a00     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
18a04                 | LR__2033
18a04     00 20 06 F6 | 	mov	local02, #0
18a08     00 2C 0E F2 | 	cmp	local08, #0 wz
18a0c     01 20 66 56 |  if_ne	neg	local02, #1
18a10     00 30 06 F6 | 	mov	local10, #0
18a14     00 22 06 F6 | 	mov	local03, #0
18a18     00 1E 0E F2 | 	cmp	local01, #0 wz
18a1c     01 22 66 56 |  if_ne	neg	local03, #1
18a20     00 24 06 F6 | 	mov	local04, #0
18a24     00 32 06 F6 | 	mov	local11, #0
18a28     1A FA 61 FD | 	getct	result1
18a2c     FD 34 02 F6 | 	mov	local12, result1
18a30     1A 37 02 F6 | 	mov	local13, local12
18a34     13 37 82 F1 | 	sub	local13, local05
18a38     00 36 56 F2 | 	cmps	local13, #0 wc
18a3c     00 32 26 C6 |  if_b	not	local11, #0
18a40     00 32 0E F2 | 	cmp	local11, #0 wz
18a44     00 24 26 56 |  if_ne	not	local04, #0
18a48     12 23 CA F7 | 	test	local03, local04 wz
18a4c     00 30 26 56 |  if_ne	not	local10, #0
18a50     18 21 4A F5 | 	or	local02, local10 wz
18a54     8C FF 9F AD |  if_e	jmp	#LR__2032
18a58     00 2C 0E F2 | 	cmp	local08, #0 wz
18a5c     17 29 02 56 |  if_ne	mov	local06, local09
18a60     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
18a64     04 E8 05 F1 | 	add	ptr___system__dat__, #4
18a68     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
18a6c     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
18a70     14 FB 01 F6 | 	mov	result1, local06
18a74     A7 F0 03 F6 | 	mov	ptra, fp
18a78     B2 00 A0 FD | 	call	#popregs_
18a7c                 | __system___rxraw_ret
18a7c     2D 00 64 FD | 	ret
18a80                 | 
18a80                 | __system___getus
18a80     1A FC 71 FD | 	getct	result2 wc
18a84     1A 00 62 FD | 	getct	_var01
18a88     10 E8 05 F1 | 	add	ptr___system__dat__, #16
18a8c     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
18a90     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
18a94     20 00 90 5D |  if_ne	jmp	#LR__2040
18a98     14 02 06 FB | 	rdlong	_var02, #20
18a9c     A1 07 00 FF 
18aa0     40 02 16 FD | 	qdiv	_var02, ##1000000
18aa4     10 E8 05 F1 | 	add	ptr___system__dat__, #16
18aa8     18 FA 61 FD | 	getqx	result1
18aac     FD 02 02 F6 | 	mov	_var02, result1
18ab0     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
18ab4     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
18ab8                 | LR__2040
18ab8     01 FD 11 FD | 	qdiv	result2, _var02
18abc     19 FC 61 FD | 	getqy	result2
18ac0     28 FC 61 FD | 	setq	result2
18ac4     01 01 12 FD | 	qdiv	_var01, _var02
18ac8     18 FA 61 FD | 	getqx	result1
18acc                 | __system___getus_ret
18acc     2D 00 64 FD | 	ret
18ad0                 | 
18ad0                 | __system____builtin_memmove
18ad0     09 01 02 F6 | 	mov	_var01, arg01
18ad4     0A 13 52 F2 | 	cmps	arg01, arg02 wc
18ad8     10 00 90 CD |  if_b	jmp	#LR__2050
18adc     0A 03 02 F6 | 	mov	_var02, arg02
18ae0     0B 03 02 F1 | 	add	_var02, arg03
18ae4     01 13 52 F2 | 	cmps	arg01, _var02 wc
18ae8     48 00 90 CD |  if_b	jmp	#LR__2056
18aec                 | LR__2050
18aec     0B 05 02 F6 | 	mov	_var03, arg03
18af0     02 04 4E F0 | 	shr	_var03, #2 wz
18af4     18 00 90 AD |  if_e	jmp	#LR__2055
18af8     97 0A 48 FB | 	callpa	#(@LR__2053-@LR__2051)>>2,fcache_load_ptr_
18afc                 | LR__2051
18afc     02 09 D8 FC | 	rep	@LR__2054, _var03
18b00                 | LR__2052
18b00     0A 05 02 FB | 	rdlong	_var03, arg02
18b04     09 05 62 FC | 	wrlong	_var03, arg01
18b08     04 12 06 F1 | 	add	arg01, #4
18b0c     04 14 06 F1 | 	add	arg02, #4
18b10                 | LR__2053
18b10                 | LR__2054
18b10                 | LR__2055
18b10     02 16 CE F7 | 	test	arg03, #2 wz
18b14     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
18b18     09 03 52 5C |  if_ne	wrword	_var02, arg01
18b1c     02 12 06 51 |  if_ne	add	arg01, #2
18b20     02 14 06 51 |  if_ne	add	arg02, #2
18b24     01 16 CE F7 | 	test	arg03, #1 wz
18b28     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
18b2c     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
18b30     28 00 90 FD | 	jmp	#LR__2062
18b34                 | LR__2056
18b34     0B 13 02 F1 | 	add	arg01, arg03
18b38     0B 15 02 F1 | 	add	arg02, arg03
18b3c     0B 07 0A F6 | 	mov	_var04, arg03 wz
18b40     18 00 90 AD |  if_e	jmp	#LR__2061
18b44     97 0A 48 FB | 	callpa	#(@LR__2059-@LR__2057)>>2,fcache_load_ptr_
18b48                 | LR__2057
18b48     03 09 D8 FC | 	rep	@LR__2060, _var04
18b4c                 | LR__2058
18b4c     01 12 86 F1 | 	sub	arg01, #1
18b50     01 14 86 F1 | 	sub	arg02, #1
18b54     0A 03 C2 FA | 	rdbyte	_var02, arg02
18b58     09 03 42 FC | 	wrbyte	_var02, arg01
18b5c                 | LR__2059
18b5c                 | LR__2060
18b5c                 | LR__2061
18b5c                 | LR__2062
18b5c     00 FB 01 F6 | 	mov	result1, _var01
18b60                 | __system____builtin_memmove_ret
18b60     2D 00 64 FD | 	ret
18b64                 | 
18b64                 | __system____builtin_strcpy
18b64     09 01 02 F6 | 	mov	_var01, arg01
18b68     97 0A 48 FB | 	callpa	#(@LR__2071-@LR__2070)>>2,fcache_load_ptr_
18b6c                 | LR__2070
18b6c     0A FB C9 FA | 	rdbyte	result1, arg02 wz
18b70     09 FB 41 FC | 	wrbyte	result1, arg01
18b74     01 14 06 F1 | 	add	arg02, #1
18b78     01 12 06 F1 | 	add	arg01, #1
18b7c     EC FF 9F 5D |  if_ne	jmp	#LR__2070
18b80                 | LR__2071
18b80     00 FB 01 F6 | 	mov	result1, _var01
18b84                 | __system____builtin_strcpy_ret
18b84     2D 00 64 FD | 	ret
18b88                 | 
18b88                 | __system____topofstack
18b88     00 4A 05 F6 | 	mov	COUNT_, #0
18b8c     A8 00 A0 FD | 	call	#pushregs_
18b90     08 F0 07 F1 | 	add	ptra, #8
18b94     04 4E 05 F1 | 	add	fp, #4
18b98     A7 12 62 FC | 	wrlong	arg01, fp
18b9c     A7 FA 01 F6 | 	mov	result1, fp
18ba0     04 4E 85 F1 | 	sub	fp, #4
18ba4     A7 F0 03 F6 | 	mov	ptra, fp
18ba8     B2 00 A0 FD | 	call	#popregs_
18bac                 | __system____topofstack_ret
18bac     2D 00 64 FD | 	ret
18bb0                 | 
18bb0                 | __system___lockmem
18bb0     00 FA 05 F6 | 	mov	result1, #0
18bb4     01 FA 61 FD | 	cogid	result1
18bb8     00 FB 05 F1 | 	add	result1, #256
18bbc                 | LR__2080
18bbc     09 01 0A FB | 	rdlong	_var01, arg01 wz
18bc0     09 FB 61 AC |  if_e	wrlong	result1, arg01
18bc4     09 01 02 AB |  if_e	rdlong	_var01, arg01
18bc8     09 01 02 AB |  if_e	rdlong	_var01, arg01
18bcc     FD 00 0A F2 | 	cmp	_var01, result1 wz
18bd0     E8 FF 9F 5D |  if_ne	jmp	#LR__2080
18bd4                 | __system___lockmem_ret
18bd4     2D 00 64 FD | 	ret
18bd8                 | 
18bd8                 | __system___string_cmp
18bd8     97 14 48 FB | 	callpa	#(@LR__2091-@LR__2090)>>2,fcache_load_ptr_
18bdc                 | LR__2090
18bdc     09 01 C2 FA | 	rdbyte	_var01, arg01
18be0     0A 03 C2 FA | 	rdbyte	_var02, arg02
18be4     00 05 02 F6 | 	mov	_var03, _var01
18be8     01 05 8A F1 | 	sub	_var03, _var02 wz
18bec     01 12 06 F1 | 	add	arg01, #1
18bf0     01 14 06 F1 | 	add	arg02, #1
18bf4     0C 00 90 5D |  if_ne	jmp	#LR__2092
18bf8     00 00 0E F2 | 	cmp	_var01, #0 wz
18bfc     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
18c00     D8 FF 9F 5D |  if_ne	jmp	#LR__2090
18c04                 | LR__2091
18c04                 | LR__2092
18c04     02 FB 01 F6 | 	mov	result1, _var03
18c08                 | __system___string_cmp_ret
18c08     2D 00 64 FD | 	ret
18c0c                 | 
18c0c                 | __system___string_concat
18c0c     05 4A 05 F6 | 	mov	COUNT_, #5
18c10     A8 00 A0 FD | 	call	#pushregs_
18c14     09 1F 02 F6 | 	mov	local01, arg01
18c18     0A 21 02 F6 | 	mov	local02, arg02
18c1c     0F 13 02 F6 | 	mov	arg01, local01
18c20     09 23 02 F6 | 	mov	local03, arg01
18c24     97 06 48 FB | 	callpa	#(@LR__2101-@LR__2100)>>2,fcache_load_ptr_
18c28                 | LR__2100
18c28     11 FB C9 FA | 	rdbyte	result1, local03 wz
18c2c     01 22 06 51 |  if_ne	add	local03, #1
18c30     F4 FF 9F 5D |  if_ne	jmp	#LR__2100
18c34                 | LR__2101
18c34     09 23 82 F1 | 	sub	local03, arg01
18c38     11 25 02 F6 | 	mov	local04, local03
18c3c     10 13 02 F6 | 	mov	arg01, local02
18c40     09 23 02 F6 | 	mov	local03, arg01
18c44     97 06 48 FB | 	callpa	#(@LR__2103-@LR__2102)>>2,fcache_load_ptr_
18c48                 | LR__2102
18c48     11 FB C9 FA | 	rdbyte	result1, local03 wz
18c4c     01 22 06 51 |  if_ne	add	local03, #1
18c50     F4 FF 9F 5D |  if_ne	jmp	#LR__2102
18c54                 | LR__2103
18c54     09 23 82 F1 | 	sub	local03, arg01
18c58     12 13 02 F6 | 	mov	arg01, local04
18c5c     11 13 02 F1 | 	add	arg01, local03
18c60     01 12 06 F1 | 	add	arg01, #1
18c64     00 3D B0 FD | 	call	#__system___gc_alloc_managed
18c68     FD 26 0A F6 | 	mov	local05, result1 wz
18c6c     28 00 90 AD |  if_e	jmp	#LR__2104
18c70     13 13 02 F6 | 	mov	arg01, local05
18c74     0F 15 02 F6 | 	mov	arg02, local01
18c78     12 17 02 F6 | 	mov	arg03, local04
18c7c     50 FE BF FD | 	call	#__system____builtin_memmove
18c80     13 13 02 F6 | 	mov	arg01, local05
18c84     12 13 02 F1 | 	add	arg01, local04
18c88     01 22 06 F1 | 	add	local03, #1
18c8c     10 15 02 F6 | 	mov	arg02, local02
18c90     11 17 02 F6 | 	mov	arg03, local03
18c94     38 FE BF FD | 	call	#__system____builtin_memmove
18c98                 | LR__2104
18c98     13 FB 01 F6 | 	mov	result1, local05
18c9c     A7 F0 03 F6 | 	mov	ptra, fp
18ca0     B2 00 A0 FD | 	call	#popregs_
18ca4                 | __system___string_concat_ret
18ca4     2D 00 64 FD | 	ret
18ca8                 | 
18ca8                 | __system___tx
18ca8     02 4A 05 F6 | 	mov	COUNT_, #2
18cac     A8 00 A0 FD | 	call	#pushregs_
18cb0     09 1F 02 F6 | 	mov	local01, arg01
18cb4     0A 1E 0E F2 | 	cmp	local01, #10 wz
18cb8     18 00 90 5D |  if_ne	jmp	#LR__2110
18cbc     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18cc0     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
18cc4     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18cc8     02 20 CE F7 | 	test	local02, #2 wz
18ccc     0D 12 06 56 |  if_ne	mov	arg01, #13
18cd0     6C FC BF 5D |  if_ne	call	#__system___txraw
18cd4                 | LR__2110
18cd4     0F 13 02 F6 | 	mov	arg01, local01
18cd8     64 FC BF FD | 	call	#__system___txraw
18cdc     A7 F0 03 F6 | 	mov	ptra, fp
18ce0     B2 00 A0 FD | 	call	#popregs_
18ce4                 | __system___tx_ret
18ce4     2D 00 64 FD | 	ret
18ce8                 | 
18ce8                 | __system___rx
18ce8     01 4A 05 F6 | 	mov	COUNT_, #1
18cec     A8 00 A0 FD | 	call	#pushregs_
18cf0                 | LR__2120
18cf0     00 12 06 F6 | 	mov	arg01, #0
18cf4     8C FC BF FD | 	call	#__system___rxraw
18cf8     FD 1E 02 F6 | 	mov	local01, result1
18cfc     FF FF 7F FF 
18d00     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
18d04     E8 FF 9F AD |  if_e	jmp	#LR__2120
18d08     0D 1E 0E F2 | 	cmp	local01, #13 wz
18d0c     14 00 90 5D |  if_ne	jmp	#LR__2121
18d10     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18d14     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
18d18     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18d1c     02 FA CD F7 | 	test	result1, #2 wz
18d20     0A 1E 06 56 |  if_ne	mov	local01, #10
18d24                 | LR__2121
18d24     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18d28     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
18d2c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18d30     01 12 CE F7 | 	test	arg01, #1 wz
18d34     1C 00 90 AD |  if_e	jmp	#LR__2124
18d38     7F 1E 0E F2 | 	cmp	local01, #127 wz
18d3c     0C 00 90 5D |  if_ne	jmp	#LR__2122
18d40     08 12 06 F6 | 	mov	arg01, #8
18d44     60 FF BF FD | 	call	#__system___tx
18d48     08 00 90 FD | 	jmp	#LR__2123
18d4c                 | LR__2122
18d4c     0F 13 02 F6 | 	mov	arg01, local01
18d50     54 FF BF FD | 	call	#__system___tx
18d54                 | LR__2123
18d54                 | LR__2124
18d54     0F FB 01 F6 | 	mov	result1, local01
18d58     A7 F0 03 F6 | 	mov	ptra, fp
18d5c     B2 00 A0 FD | 	call	#popregs_
18d60                 | __system___rx_ret
18d60     2D 00 64 FD | 	ret
18d64                 | 
18d64                 | __system___pinwrite
18d64     09 01 02 F6 | 	mov	_var01, arg01
18d68     1F 00 06 F5 | 	and	_var01, #31
18d6c     20 12 CE F7 | 	test	arg01, #32 wz
18d70     06 12 46 F0 | 	shr	arg01, #6
18d74     09 13 CA F9 | 	bmask	arg01, arg01
18d78     00 13 62 F0 | 	shl	arg01, _var01
18d7c     00 15 62 F0 | 	shl	arg02, _var01
18d80     1C 00 90 AD |  if_e	jmp	#LR__2130
18d84     09 F7 43 F5 | 	or	dirb, arg01
18d88     FD 01 02 F6 | 	mov	_var01, outb
18d8c     09 01 22 F5 | 	andn	_var01, arg01
18d90     09 15 02 F5 | 	and	arg02, arg01
18d94     0A 01 42 F5 | 	or	_var01, arg02
18d98     00 FB 03 F6 | 	mov	outb, _var01
18d9c     18 00 90 FD | 	jmp	#LR__2131
18da0                 | LR__2130
18da0     09 F5 43 F5 | 	or	dira, arg01
18da4     FC 01 02 F6 | 	mov	_var01, outa
18da8     09 01 22 F5 | 	andn	_var01, arg01
18dac     09 15 02 F5 | 	and	arg02, arg01
18db0     0A 01 42 F5 | 	or	_var01, arg02
18db4     00 F9 03 F6 | 	mov	outa, _var01
18db8                 | LR__2131
18db8                 | __system___pinwrite_ret
18db8     2D 00 64 FD | 	ret
18dbc                 | 
18dbc                 | __system___basic_read_line
18dbc     06 4A 05 F6 | 	mov	COUNT_, #6
18dc0     A8 00 A0 FD | 	call	#pushregs_
18dc4     09 1F 02 F6 | 	mov	local01, arg01
18dc8     00 20 06 F6 | 	mov	local02, #0
18dcc     18 22 06 F6 | 	mov	local03, #24
18dd0     00 24 06 F6 | 	mov	local04, #0
18dd4     18 12 06 F6 | 	mov	arg01, #24
18dd8     8C 3B B0 FD | 	call	#__system___gc_alloc_managed
18ddc     FD 26 0A F6 | 	mov	local05, result1 wz
18de0     13 FB 01 A6 |  if_e	mov	result1, local05
18de4     B0 00 90 AD |  if_e	jmp	#LR__2143
18de8                 | LR__2140
18de8     0F 13 02 F6 | 	mov	arg01, local01
18dec     78 0B B0 FD | 	call	#__system___basic_get_char
18df0     FD 28 02 F6 | 	mov	local06, result1
18df4     01 28 56 F2 | 	cmps	local06, #1 wc
18df8     8C 00 90 CD |  if_b	jmp	#LR__2142
18dfc     0A 28 0E F2 | 	cmp	local06, #10 wz
18e00     10 00 90 5D |  if_ne	jmp	#LR__2141
18e04     00 24 0E F2 | 	cmp	local04, #0 wz
18e08     01 20 56 52 |  if_ne	cmps	local02, #1 wc
18e0c     01 20 86 11 |  if_a	sub	local02, #1
18e10     74 00 90 FD | 	jmp	#LR__2142
18e14                 | LR__2141
18e14     0D 28 0E F2 | 	cmp	local06, #13 wz
18e18     01 24 06 A6 |  if_e	mov	local04, #1
18e1c     00 24 06 56 |  if_ne	mov	local04, #0
18e20     08 28 0E F2 | 	cmp	local06, #8 wz
18e24     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
18e28     01 20 56 A2 |  if_e	cmps	local02, #1 wc
18e2c     01 20 86 21 |  if_nc_and_z	sub	local02, #1
18e30     B4 FF 9F AD |  if_e	jmp	#LR__2140
18e34     13 17 02 F6 | 	mov	arg03, local05
18e38     10 17 02 F1 | 	add	arg03, local02
18e3c     0B 29 42 FC | 	wrbyte	local06, arg03
18e40     01 20 06 F1 | 	add	local02, #1
18e44     11 21 0A F2 | 	cmp	local02, local03 wz
18e48     9C FF 9F 5D |  if_ne	jmp	#LR__2140
18e4c     11 13 02 F6 | 	mov	arg01, local03
18e50     20 12 06 F1 | 	add	arg01, #32
18e54     10 3B B0 FD | 	call	#__system___gc_alloc_managed
18e58     FD 28 0A F6 | 	mov	local06, result1 wz
18e5c     14 FB 01 A6 |  if_e	mov	result1, local06
18e60     34 00 90 AD |  if_e	jmp	#LR__2143
18e64     14 13 02 F6 | 	mov	arg01, local06
18e68     13 15 02 F6 | 	mov	arg02, local05
18e6c     11 17 02 F6 | 	mov	arg03, local03
18e70     5C FC BF FD | 	call	#__system____builtin_memmove
18e74     20 22 06 F1 | 	add	local03, #32
18e78     13 13 02 F6 | 	mov	arg01, local05
18e7c     24 3C B0 FD | 	call	#__system___gc_free
18e80     14 27 02 F6 | 	mov	local05, local06
18e84     60 FF 9F FD | 	jmp	#LR__2140
18e88                 | LR__2142
18e88     13 29 02 F6 | 	mov	local06, local05
18e8c     10 29 02 F1 | 	add	local06, local02
18e90     14 01 48 FC | 	wrbyte	#0, local06
18e94     13 FB 01 F6 | 	mov	result1, local05
18e98                 | LR__2143
18e98     A7 F0 03 F6 | 	mov	ptra, fp
18e9c     B2 00 A0 FD | 	call	#popregs_
18ea0                 | __system___basic_read_line_ret
18ea0     2D 00 64 FD | 	ret
18ea4                 | 
18ea4                 | __system___waitms
18ea4     09 01 02 F6 | 	mov	_var01, arg01
18ea8     1A 02 62 FD | 	getct	_var02
18eac     14 04 06 FB | 	rdlong	_var03, #20
18eb0     97 14 48 FB | 	callpa	#(@LR__2151-@LR__2150)>>2,fcache_load_ptr_
18eb4                 | LR__2150
18eb4     01 00 00 FF 
18eb8     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
18ebc     1C 00 90 CD |  if_b	jmp	#LR__2152
18ec0     02 03 02 F1 | 	add	_var02, _var03
18ec4     01 13 02 F6 | 	mov	arg01, _var02
18ec8     00 12 66 FA | 	addct1	arg01, #0
18ecc     24 22 60 FD | 	waitct1
18ed0     01 00 00 FF 
18ed4     E8 01 86 F1 | 	sub	_var01, ##1000
18ed8     D8 FF 9F FD | 	jmp	#LR__2150
18edc                 | LR__2151
18edc                 | LR__2152
18edc     01 00 56 F2 | 	cmps	_var01, #1 wc
18ee0     28 00 90 CD |  if_b	jmp	#LR__2153
18ee4     02 01 02 FD | 	qmul	_var01, _var03
18ee8     01 00 00 FF 
18eec     E8 17 06 F6 | 	mov	arg03, ##1000
18ef0     19 FA 61 FD | 	getqy	result1
18ef4     18 12 62 FD | 	getqx	arg01
18ef8     28 FA 61 FD | 	setq	result1
18efc     0B 13 12 FD | 	qdiv	arg01, arg03
18f00     18 12 62 FD | 	getqx	arg01
18f04     01 13 62 FA | 	addct1	arg01, _var02
18f08     24 22 60 FD | 	waitct1
18f0c                 | LR__2153
18f0c                 | __system___waitms_ret
18f0c     2D 00 64 FD | 	ret
18f10                 | 
18f10                 | __system___waitus
18f10     09 01 02 F6 | 	mov	_var01, arg01
18f14     1A 02 62 FD | 	getct	_var02
18f18     14 04 06 FB | 	rdlong	_var03, #20
18f1c     97 14 48 FB | 	callpa	#(@LR__2161-@LR__2160)>>2,fcache_load_ptr_
18f20                 | LR__2160
18f20     A1 07 00 FF 
18f24     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
18f28     1C 00 90 CD |  if_b	jmp	#LR__2162
18f2c     02 03 02 F1 | 	add	_var02, _var03
18f30     01 13 02 F6 | 	mov	arg01, _var02
18f34     00 12 66 FA | 	addct1	arg01, #0
18f38     24 22 60 FD | 	waitct1
18f3c     A1 07 00 FF 
18f40     40 00 86 F1 | 	sub	_var01, ##1000000
18f44     D8 FF 9F FD | 	jmp	#LR__2160
18f48                 | LR__2161
18f48                 | LR__2162
18f48     01 00 56 F2 | 	cmps	_var01, #1 wc
18f4c     28 00 90 CD |  if_b	jmp	#LR__2163
18f50     02 01 02 FD | 	qmul	_var01, _var03
18f54     A1 07 00 FF 
18f58     40 16 06 F6 | 	mov	arg03, ##1000000
18f5c     19 FA 61 FD | 	getqy	result1
18f60     18 12 62 FD | 	getqx	arg01
18f64     28 FA 61 FD | 	setq	result1
18f68     0B 13 12 FD | 	qdiv	arg01, arg03
18f6c     18 FA 61 FD | 	getqx	result1
18f70     FD 02 62 FA | 	addct1	_var02, result1
18f74     24 22 60 FD | 	waitct1
18f78                 | LR__2163
18f78                 | __system___waitus_ret
18f78     2D 00 64 FD | 	ret
18f7c                 | 
18f7c                 | __system___mount
18f7c     0B 4A 05 F6 | 	mov	COUNT_, #11
18f80     A8 00 A0 FD | 	call	#pushregs_
18f84     09 1F 02 F6 | 	mov	local01, arg01
18f88     0A 21 0A F6 | 	mov	local02, arg02 wz
18f8c     01 22 66 F6 | 	neg	local03, #1
18f90     01 FA 65 A6 |  if_e	neg	result1, #1
18f94     98 02 90 AD |  if_e	jmp	#LR__2185
18f98     0F FB C1 FA | 	rdbyte	result1, local01
18f9c     2F FA 0D F2 | 	cmp	result1, #47 wz
18fa0     28 00 90 5D |  if_ne	jmp	#LR__2172
18fa4     0F 13 02 F6 | 	mov	arg01, local01
18fa8     09 25 02 F6 | 	mov	local04, arg01
18fac     97 06 48 FB | 	callpa	#(@LR__2171-@LR__2170)>>2,fcache_load_ptr_
18fb0                 | LR__2170
18fb0     12 FB C9 FA | 	rdbyte	result1, local04 wz
18fb4     01 24 06 51 |  if_ne	add	local04, #1
18fb8     F4 FF 9F 5D |  if_ne	jmp	#LR__2170
18fbc                 | LR__2171
18fbc     09 25 82 F1 | 	sub	local04, arg01
18fc0     12 FB 01 F6 | 	mov	result1, local04
18fc4     10 FA 55 F2 | 	cmps	result1, #16 wc
18fc8     14 00 90 CD |  if_b	jmp	#LR__2173
18fcc                 | LR__2172
18fcc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
18fd0     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
18fd4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
18fd8     01 FA 65 F6 | 	neg	result1, #1
18fdc     50 02 90 FD | 	jmp	#LR__2185
18fe0                 | LR__2173
18fe0     00 26 06 F6 | 	mov	local05, #0
18fe4                 | LR__2174
18fe4     04 26 56 F2 | 	cmps	local05, #4 wc
18fe8     B0 00 90 3D |  if_ae	jmp	#LR__2179
18fec     13 13 02 F6 | 	mov	arg01, local05
18ff0     02 12 66 F0 | 	shl	arg01, #2
18ff4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
18ff8     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
18ffc     09 FB 09 FB | 	rdlong	result1, arg01 wz
19000     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19004     00 22 56 A2 |  if_e	cmps	local03, #0 wc
19008     13 23 02 86 |  if_c_and_z	mov	local03, local05
1900c     84 00 90 8D |  if_c_and_z	jmp	#LR__2178
19010     13 13 02 F6 | 	mov	arg01, local05
19014     02 12 66 F0 | 	shl	arg01, #2
19018     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1901c     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
19020     09 13 02 FB | 	rdlong	arg01, arg01
19024     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19028     09 25 02 F6 | 	mov	local04, arg01
1902c     97 06 48 FB | 	callpa	#(@LR__2176-@LR__2175)>>2,fcache_load_ptr_
19030                 | LR__2175
19030     12 FB C9 FA | 	rdbyte	result1, local04 wz
19034     01 24 06 51 |  if_ne	add	local04, #1
19038     F4 FF 9F 5D |  if_ne	jmp	#LR__2175
1903c                 | LR__2176
1903c     09 25 82 F1 | 	sub	local04, arg01
19040     12 29 02 F6 | 	mov	local06, local04
19044     14 13 02 F6 | 	mov	arg01, local06
19048     0F 13 02 F1 | 	add	arg01, local01
1904c     09 FB C1 FA | 	rdbyte	result1, arg01
19050     2F FA 0D F2 | 	cmp	result1, #47 wz
19054     14 2B 02 56 |  if_ne	mov	local07, local06
19058     0F 2B 02 51 |  if_ne	add	local07, local01
1905c     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
19060     30 00 90 5D |  if_ne	jmp	#LR__2177
19064     13 17 02 F6 | 	mov	arg03, local05
19068     02 16 66 F0 | 	shl	arg03, #2
1906c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19070     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
19074     0B 15 02 FB | 	rdlong	arg02, arg03
19078     0F 13 02 F6 | 	mov	arg01, local01
1907c     14 17 02 F6 | 	mov	arg03, local06
19080     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19084     24 4D B0 FD | 	call	#__system__strncmp
19088     00 FA 0D F2 | 	cmp	result1, #0 wz
1908c     13 23 02 A6 |  if_e	mov	local03, local05
19090     08 00 90 AD |  if_e	jmp	#LR__2179
19094                 | LR__2177
19094                 | LR__2178
19094     01 26 06 F1 | 	add	local05, #1
19098     48 FF 9F FD | 	jmp	#LR__2174
1909c                 | LR__2179
1909c     FF FF 7F FF 
190a0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
190a4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
190a8     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
190ac     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
190b0     01 FA 65 A6 |  if_e	neg	result1, #1
190b4     78 01 90 AD |  if_e	jmp	#LR__2185
190b8     11 27 02 F6 | 	mov	local05, local03
190bc     13 2B 02 F6 | 	mov	local07, local05
190c0     02 2A 66 F0 | 	shl	local07, #2
190c4     74 E8 05 F1 | 	add	ptr___system__dat__, #116
190c8     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
190cc     15 29 0A FB | 	rdlong	local06, local07 wz
190d0     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
190d4     58 00 90 AD |  if_e	jmp	#LR__2180
190d8     4C 28 06 F1 | 	add	local06, #76
190dc     14 2B 0A FB | 	rdlong	local07, local06 wz
190e0     4C 28 86 F1 | 	sub	local06, #76
190e4     48 00 90 AD |  if_e	jmp	#LR__2180
190e8     4C 28 06 F1 | 	add	local06, #76
190ec     14 2B 02 FB | 	rdlong	local07, local06
190f0     15 23 02 F6 | 	mov	local03, local07
190f4     13 2A 46 F7 | 	zerox	local07, #19
190f8     14 22 46 F0 | 	shr	local03, #20
190fc     02 22 66 F0 | 	shl	local03, #2
19100     ED 22 02 F1 | 	add	local03, __methods__
19104     11 23 02 FB | 	rdlong	local03, local03
19108     13 29 02 F6 | 	mov	local06, local05
1910c     02 28 66 F0 | 	shl	local06, #2
19110     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19114     F4 28 02 F1 | 	add	local06, ptr___system__dat__
19118     14 13 02 FB | 	rdlong	arg01, local06
1911c     F2 28 02 F6 | 	mov	local06, objptr
19120     15 E5 01 F6 | 	mov	objptr, local07
19124     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19128     2D 22 62 FD | 	call	local03
1912c     14 E5 01 F6 | 	mov	objptr, local06
19130                 | LR__2180
19130     13 2D 02 F6 | 	mov	local08, local05
19134     02 2C 66 F0 | 	shl	local08, #2
19138     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1913c     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
19140     16 21 62 FC | 	wrlong	local02, local08
19144     00 20 0E F2 | 	cmp	local02, #0 wz
19148     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1914c     18 00 90 5D |  if_ne	jmp	#LR__2181
19150     02 26 66 F0 | 	shl	local05, #2
19154     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19158     F4 26 02 F1 | 	add	local05, ptr___system__dat__
1915c     13 01 68 FC | 	wrlong	#0, local05
19160     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19164     C4 00 90 FD | 	jmp	#LR__2184
19168                 | LR__2181
19168     13 2F 02 F6 | 	mov	local09, local05
1916c     04 2E 66 F0 | 	shl	local09, #4
19170     24 E8 05 F1 | 	add	ptr___system__dat__, #36
19174     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
19178     17 13 02 F6 | 	mov	arg01, local09
1917c     0F 15 02 F6 | 	mov	arg02, local01
19180     10 16 06 F6 | 	mov	arg03, #16
19184     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
19188     74 4B B0 FD | 	call	#__system__strncpy
1918c     48 20 06 F1 | 	add	local02, #72
19190     10 2D 0A FB | 	rdlong	local08, local02 wz
19194     48 20 86 F1 | 	sub	local02, #72
19198     7C 00 90 AD |  if_e	jmp	#LR__2183
1919c     48 20 06 F1 | 	add	local02, #72
191a0     10 2D 02 FB | 	rdlong	local08, local02
191a4     16 31 02 F6 | 	mov	local10, local08
191a8     13 2C 46 F7 | 	zerox	local08, #19
191ac     14 30 46 F0 | 	shr	local10, #20
191b0     02 30 66 F0 | 	shl	local10, #2
191b4     ED 30 02 F1 | 	add	local10, __methods__
191b8     18 31 02 FB | 	rdlong	local10, local10
191bc     17 13 02 F6 | 	mov	arg01, local09
191c0     F2 32 02 F6 | 	mov	local11, objptr
191c4     16 E5 01 F6 | 	mov	objptr, local08
191c8     2D 30 62 FD | 	call	local10
191cc     19 E5 01 F6 | 	mov	objptr, local11
191d0     FD 12 0A F6 | 	mov	arg01, result1 wz
191d4     40 00 90 AD |  if_e	jmp	#LR__2182
191d8     13 2D 02 F6 | 	mov	local08, local05
191dc     02 2C 66 F0 | 	shl	local08, #2
191e0     74 E8 05 F1 | 	add	ptr___system__dat__, #116
191e4     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
191e8     16 01 68 FC | 	wrlong	#0, local08
191ec     02 26 66 F0 | 	shl	local05, #2
191f0     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
191f4     F4 26 02 F1 | 	add	local05, ptr___system__dat__
191f8     13 01 68 FC | 	wrlong	#0, local05
191fc     09 13 6A F6 | 	neg	arg01, arg01 wz
19200     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
19204     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19208     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1920c     01 FA 65 56 |  if_ne	neg	result1, #1
19210     00 FA 05 A6 |  if_e	mov	result1, #0
19214     18 00 90 FD | 	jmp	#LR__2185
19218                 | LR__2182
19218                 | LR__2183
19218     02 26 66 F0 | 	shl	local05, #2
1921c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19220     F4 26 02 F1 | 	add	local05, ptr___system__dat__
19224     13 2F 62 FC | 	wrlong	local09, local05
19228     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1922c                 | LR__2184
1922c     00 FA 05 F6 | 	mov	result1, #0
19230                 | LR__2185
19230     A7 F0 03 F6 | 	mov	ptra, fp
19234     B2 00 A0 FD | 	call	#popregs_
19238                 | __system___mount_ret
19238     2D 00 64 FD | 	ret
1923c                 | 
1923c                 | __system___chdir
1923c     00 4A 05 F6 | 	mov	COUNT_, #0
19240     A8 00 A0 FD | 	call	#pushregs_
19244     40 F0 07 F1 | 	add	ptra, #64
19248     04 4E 05 F1 | 	add	fp, #4
1924c     A7 12 62 FC | 	wrlong	arg01, fp
19250     04 4E 05 F1 | 	add	fp, #4
19254     A7 14 02 F6 | 	mov	arg02, fp
19258     08 4E 85 F1 | 	sub	fp, #8
1925c     80 47 B0 FD | 	call	#__system__stat
19260     3C 4E 05 F1 | 	add	fp, #60
19264     A7 FA 61 FC | 	wrlong	result1, fp
19268     3C 4E 85 F1 | 	sub	fp, #60
1926c     00 FA 0D F2 | 	cmp	result1, #0 wz
19270     3C 4E 05 51 |  if_ne	add	fp, #60
19274     A7 FA 01 5B |  if_ne	rdlong	result1, fp
19278     3C 4E 85 51 |  if_ne	sub	fp, #60
1927c     BC 00 90 5D |  if_ne	jmp	#LR__2192
19280     10 4E 05 F1 | 	add	fp, #16
19284     A7 12 02 FB | 	rdlong	arg01, fp
19288     10 4E 85 F1 | 	sub	fp, #16
1928c     78 00 00 FF 
19290     00 12 06 F5 | 	and	arg01, ##61440
19294     08 00 00 FF 
19298     00 12 0E F2 | 	cmp	arg01, ##4096 wz
1929c     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
192a0     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
192a4     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
192a8     01 FA 65 56 |  if_ne	neg	result1, #1
192ac     8C 00 90 5D |  if_ne	jmp	#LR__2192
192b0     04 4E 05 F1 | 	add	fp, #4
192b4     A7 16 02 FB | 	rdlong	arg03, fp
192b8     04 4E 85 F1 | 	sub	fp, #4
192bc     0B 17 C2 FA | 	rdbyte	arg03, arg03
192c0     2F 16 0E F2 | 	cmp	arg03, #47 wz
192c4     24 00 90 5D |  if_ne	jmp	#LR__2190
192c8     84 E8 05 F1 | 	add	ptr___system__dat__, #132
192cc     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
192d0     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
192d4     04 4E 05 F1 | 	add	fp, #4
192d8     A7 14 02 FB | 	rdlong	arg02, fp
192dc     04 4E 85 F1 | 	sub	fp, #4
192e0     00 17 06 F6 | 	mov	arg03, #256
192e4     18 4A B0 FD | 	call	#__system__strncpy
192e8     4C 00 90 FD | 	jmp	#LR__2191
192ec                 | LR__2190
192ec     84 E9 05 F1 | 	add	ptr___system__dat__, #388
192f0     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
192f4     38 4E 05 F1 | 	add	fp, #56
192f8     A7 12 62 FC | 	wrlong	arg01, fp
192fc     38 4E 85 F1 | 	sub	fp, #56
19300     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
19304     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
19308     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
1930c     00 17 06 F6 | 	mov	arg03, #256
19310     EC 49 B0 FD | 	call	#__system__strncpy
19314     38 4E 05 F1 | 	add	fp, #56
19318     A7 12 02 FB | 	rdlong	arg01, fp
1931c     34 4E 85 F1 | 	sub	fp, #52
19320     A7 14 02 FB | 	rdlong	arg02, fp
19324     04 4E 85 F1 | 	sub	fp, #4
19328     84 E8 05 F1 | 	add	ptr___system__dat__, #132
1932c     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
19330     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
19334     10 00 B0 FD | 	call	#__system____getvfsforfile
19338                 | LR__2191
19338     00 FA 05 F6 | 	mov	result1, #0
1933c                 | LR__2192
1933c     A7 F0 03 F6 | 	mov	ptra, fp
19340     B2 00 A0 FD | 	call	#popregs_
19344                 | __system___chdir_ret
19344     2D 00 64 FD | 	ret
19348                 | 
19348                 | __system____getvfsforfile
19348     0E 4A 05 F6 | 	mov	COUNT_, #14
1934c     A8 00 A0 FD | 	call	#pushregs_
19350     09 1F 02 F6 | 	mov	local01, arg01
19354     0A 21 02 F6 | 	mov	local02, arg02
19358     0B 23 02 F6 | 	mov	local03, arg03
1935c     97 10 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
19360                 | LR__2200
19360     10 FB C1 FA | 	rdbyte	result1, local02
19364     2F FA 0D F2 | 	cmp	result1, #47 wz
19368     01 20 06 A1 |  if_e	add	local02, #1
1936c     10 25 C2 AA |  if_e	rdbyte	local04, local02
19370     01 20 86 A1 |  if_e	sub	local02, #1
19374     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
19378     01 20 06 A1 |  if_e	add	local02, #1
1937c     E0 FF 9F AD |  if_e	jmp	#LR__2200
19380                 | LR__2201
19380     10 25 C2 FA | 	rdbyte	local04, local02
19384     2F 24 0E F2 | 	cmp	local04, #47 wz
19388     14 00 90 5D |  if_ne	jmp	#LR__2202
1938c     0F 13 02 F6 | 	mov	arg01, local01
19390     10 15 02 F6 | 	mov	arg02, local02
19394     00 17 06 F6 | 	mov	arg03, #256
19398     64 49 B0 FD | 	call	#__system__strncpy
1939c     7C 00 90 FD | 	jmp	#LR__2204
193a0                 | LR__2202
193a0     84 E8 05 F1 | 	add	ptr___system__dat__, #132
193a4     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
193a8     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
193ac     0F 13 02 F6 | 	mov	arg01, local01
193b0     00 17 06 F6 | 	mov	arg03, #256
193b4     48 49 B0 FD | 	call	#__system__strncpy
193b8     10 25 CA FA | 	rdbyte	local04, local02 wz
193bc     5C 00 90 AD |  if_e	jmp	#LR__2203
193c0     10 25 C2 FA | 	rdbyte	local04, local02
193c4     2E 24 0E F2 | 	cmp	local04, #46 wz
193c8     01 20 06 A1 |  if_e	add	local02, #1
193cc     10 27 C2 AA |  if_e	rdbyte	local05, local02
193d0     01 20 86 A1 |  if_e	sub	local02, #1
193d4     13 29 02 A6 |  if_e	mov	local06, local05
193d8     07 28 4E A7 |  if_e	zerox	local06, #7 wz
193dc     3C 00 90 AD |  if_e	jmp	#LR__2203
193e0     0F 27 C2 FA | 	rdbyte	local05, local01
193e4     2F 26 0E F2 | 	cmp	local05, #47 wz
193e8     01 1E 06 A1 |  if_e	add	local01, #1
193ec     0F 25 C2 AA |  if_e	rdbyte	local04, local01
193f0     01 1E 86 A1 |  if_e	sub	local01, #1
193f4     00 24 4E A2 |  if_e	cmps	local04, #0 wz
193f8     40 01 00 5F 
193fc     BC 14 06 56 |  if_ne	mov	arg02, ##@LR__4250
19400     0F 13 02 56 |  if_ne	mov	arg01, local01
19404     00 17 06 56 |  if_ne	mov	arg03, #256
19408     40 49 B0 5D |  if_ne	call	#__system__strncat
1940c     0F 13 02 F6 | 	mov	arg01, local01
19410     10 15 02 F6 | 	mov	arg02, local02
19414     00 17 06 F6 | 	mov	arg03, #256
19418     30 49 B0 FD | 	call	#__system__strncat
1941c                 | LR__2203
1941c                 | LR__2204
1941c     0F 13 02 F6 | 	mov	arg01, local01
19420     E8 4A B0 FD | 	call	#__system___normalizeName
19424     0F 25 CA FA | 	rdbyte	local04, local01 wz
19428     1C 00 90 AD |  if_e	jmp	#LR__2205
1942c     0F 25 C2 FA | 	rdbyte	local04, local01
19430     2F 24 0E F2 | 	cmp	local04, #47 wz
19434     01 1E 06 A1 |  if_e	add	local01, #1
19438     0F 29 C2 AA |  if_e	rdbyte	local06, local01
1943c     01 1E 86 A1 |  if_e	sub	local01, #1
19440     00 28 4E A2 |  if_e	cmps	local06, #0 wz
19444     18 00 90 5D |  if_ne	jmp	#LR__2206
19448                 | LR__2205
19448     01 00 00 FF 
1944c     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
19450     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
19454     01 00 00 FF 
19458     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
1945c     EC 01 90 FD | 	jmp	#LR__2220
19460                 | LR__2206
19460     00 2A 06 F6 | 	mov	local07, #0
19464                 | LR__2207
19464     04 2A 56 F2 | 	cmps	local07, #4 wc
19468     CC 01 90 3D |  if_ae	jmp	#LR__2219
1946c     15 29 02 F6 | 	mov	local06, local07
19470     02 28 66 F0 | 	shl	local06, #2
19474     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19478     F4 28 02 F1 | 	add	local06, ptr___system__dat__
1947c     14 29 0A FB | 	rdlong	local06, local06 wz
19480     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19484     A8 01 90 AD |  if_e	jmp	#LR__2218
19488     15 25 02 F6 | 	mov	local04, local07
1948c     02 24 66 F0 | 	shl	local04, #2
19490     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19494     F4 24 02 F1 | 	add	local04, ptr___system__dat__
19498     12 13 02 FB | 	rdlong	arg01, local04
1949c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
194a0     09 2D 02 F6 | 	mov	local08, arg01
194a4     97 06 48 FB | 	callpa	#(@LR__2209-@LR__2208)>>2,fcache_load_ptr_
194a8                 | LR__2208
194a8     16 FB C9 FA | 	rdbyte	result1, local08 wz
194ac     01 2C 06 51 |  if_ne	add	local08, #1
194b0     F4 FF 9F 5D |  if_ne	jmp	#LR__2208
194b4                 | LR__2209
194b4     09 2D 82 F1 | 	sub	local08, arg01
194b8     16 2F 02 F6 | 	mov	local09, local08
194bc     17 25 02 F6 | 	mov	local04, local09
194c0     0F 25 02 F1 | 	add	local04, local01
194c4     12 29 C2 FA | 	rdbyte	local06, local04
194c8     2F 28 0E F2 | 	cmp	local06, #47 wz
194cc     17 31 02 56 |  if_ne	mov	local10, local09
194d0     0F 31 02 51 |  if_ne	add	local10, local01
194d4     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
194d8     54 01 90 5D |  if_ne	jmp	#LR__2217
194dc     15 17 02 F6 | 	mov	arg03, local07
194e0     02 16 66 F0 | 	shl	arg03, #2
194e4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
194e8     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
194ec     0B 15 02 FB | 	rdlong	arg02, arg03
194f0     17 17 02 F6 | 	mov	arg03, local09
194f4     0F 13 02 F6 | 	mov	arg01, local01
194f8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
194fc     AC 48 B0 FD | 	call	#__system__strncmp
19500     00 FA 4D F2 | 	cmps	result1, #0 wz
19504     28 01 90 5D |  if_ne	jmp	#LR__2217
19508     15 33 02 F6 | 	mov	local11, local07
1950c     02 32 66 F0 | 	shl	local11, #2
19510     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19514     F4 32 02 F1 | 	add	local11, ptr___system__dat__
19518     19 35 02 FB | 	rdlong	local12, local11
1951c     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
19520     97 22 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
19524                 | LR__2210
19524     17 29 02 F6 | 	mov	local06, local09
19528     01 28 06 F1 | 	add	local06, #1
1952c     0F 29 02 F1 | 	add	local06, local01
19530     14 33 C2 FA | 	rdbyte	local11, local06
19534     2E 32 0E F2 | 	cmp	local11, #46 wz
19538     2C 00 90 5D |  if_ne	jmp	#LR__2212
1953c     17 33 02 F6 | 	mov	local11, local09
19540     02 32 06 F1 | 	add	local11, #2
19544     0F 33 02 F1 | 	add	local11, local01
19548     19 31 C2 FA | 	rdbyte	local10, local11
1954c     2F 30 0E F2 | 	cmp	local10, #47 wz
19550     17 37 02 56 |  if_ne	mov	local13, local09
19554     02 36 06 51 |  if_ne	add	local13, #2
19558     0F 37 02 51 |  if_ne	add	local13, local01
1955c     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
19560     01 2E 06 A1 |  if_e	add	local09, #1
19564     BC FF 9F AD |  if_e	jmp	#LR__2210
19568                 | LR__2211
19568                 | LR__2212
19568     00 22 0E F2 | 	cmp	local03, #0 wz
1956c     11 13 02 56 |  if_ne	mov	arg01, local03
19570     0F 15 02 56 |  if_ne	mov	arg02, local01
19574     00 17 06 56 |  if_ne	mov	arg03, #256
19578     84 47 B0 5D |  if_ne	call	#__system__strncpy
1957c     0F 15 02 F6 | 	mov	arg02, local01
19580     17 15 02 F1 | 	add	arg02, local09
19584     01 14 06 F1 | 	add	arg02, #1
19588     0F 13 02 F6 | 	mov	arg01, local01
1958c     D4 F5 BF FD | 	call	#__system____builtin_strcpy
19590     0F 13 02 F6 | 	mov	arg01, local01
19594     09 2D 02 F6 | 	mov	local08, arg01
19598     97 06 48 FB | 	callpa	#(@LR__2214-@LR__2213)>>2,fcache_load_ptr_
1959c                 | LR__2213
1959c     16 FB C9 FA | 	rdbyte	result1, local08 wz
195a0     01 2C 06 51 |  if_ne	add	local08, #1
195a4     F4 FF 9F 5D |  if_ne	jmp	#LR__2213
195a8                 | LR__2214
195a8     09 2D 82 F1 | 	sub	local08, arg01
195ac     16 2F 02 F6 | 	mov	local09, local08
195b0                 | LR__2215
195b0     01 2E 56 F2 | 	cmps	local09, #1 wc
195b4     70 00 90 CD |  if_b	jmp	#LR__2216
195b8     17 25 02 F6 | 	mov	local04, local09
195bc     0F 25 02 F1 | 	add	local04, local01
195c0     12 33 C2 FA | 	rdbyte	local11, local04
195c4     2F 32 0E F2 | 	cmp	local11, #47 wz
195c8     17 33 02 A6 |  if_e	mov	local11, local09
195cc     0F 33 02 A1 |  if_e	add	local11, local01
195d0     19 01 48 AC |  if_e	wrbyte	#0, local11
195d4     01 2E 86 A1 |  if_e	sub	local09, #1
195d8     D4 FF 9F AD |  if_e	jmp	#LR__2215
195dc     17 25 02 F6 | 	mov	local04, local09
195e0     0F 25 02 F1 | 	add	local04, local01
195e4     12 33 C2 FA | 	rdbyte	local11, local04
195e8     2E 32 0E F2 | 	cmp	local11, #46 wz
195ec     38 00 90 5D |  if_ne	jmp	#LR__2216
195f0     02 2E 56 F2 | 	cmps	local09, #2 wc
195f4     30 00 90 CD |  if_b	jmp	#LR__2216
195f8     17 39 02 F6 | 	mov	local14, local09
195fc     01 38 86 F1 | 	sub	local14, #1
19600     0F 39 02 F1 | 	add	local14, local01
19604     1C 27 C2 FA | 	rdbyte	local05, local14
19608     2F 26 0E F2 | 	cmp	local05, #47 wz
1960c     18 00 90 5D |  if_ne	jmp	#LR__2216
19610     17 25 02 F6 | 	mov	local04, local09
19614     01 24 86 F1 | 	sub	local04, #1
19618     0F 25 02 F1 | 	add	local04, local01
1961c     12 01 48 FC | 	wrbyte	#0, local04
19620     02 2E 86 F1 | 	sub	local09, #2
19624     88 FF 9F FD | 	jmp	#LR__2215
19628                 | LR__2216
19628     1A FB 01 F6 | 	mov	result1, local12
1962c     1C 00 90 FD | 	jmp	#LR__2220
19630                 | LR__2217
19630                 | LR__2218
19630     01 2A 06 F1 | 	add	local07, #1
19634     2C FE 9F FD | 	jmp	#LR__2207
19638                 | LR__2219
19638     03 00 00 FF 
1963c     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
19640     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
19644     03 00 00 FF 
19648     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
1964c                 | LR__2220
1964c     A7 F0 03 F6 | 	mov	ptra, fp
19650     B2 00 A0 FD | 	call	#popregs_
19654                 | __system____getvfsforfile_ret
19654     2D 00 64 FD | 	ret
19658                 | 
19658                 | __system___basic_open
19658     05 4A 05 F6 | 	mov	COUNT_, #5
1965c     A8 00 A0 FD | 	call	#pushregs_
19660     0A 1F 02 F6 | 	mov	local01, arg02
19664     0B 21 02 F6 | 	mov	local02, arg03
19668     0C 23 02 F6 | 	mov	local03, arg04
1966c     00 24 06 F6 | 	mov	local04, #0
19670     64 46 B0 FD | 	call	#__system____getftab
19674     FD 26 0A F6 | 	mov	local05, result1 wz
19678     18 00 90 5D |  if_ne	jmp	#LR__2230
1967c     EE 12 02 F6 | 	mov	arg01, abortchain
19680     0C 14 06 F6 | 	mov	arg02, #12
19684     01 16 06 F6 | 	mov	arg03, #1
19688     DA 00 A0 FD | 	call	#__longjmp
1968c     01 FA 65 F6 | 	neg	result1, #1
19690     14 01 90 FD | 	jmp	#LR__2239
19694                 | LR__2230
19694     08 26 06 F1 | 	add	local05, #8
19698     13 FB 09 FB | 	rdlong	result1, local05 wz
1969c     08 26 86 F1 | 	sub	local05, #8
196a0     13 13 02 56 |  if_ne	mov	arg01, local05
196a4     C0 3D B0 5D |  if_ne	call	#__system___closeraw
196a8     00 1E 0E F2 | 	cmp	local01, #0 wz
196ac     00 20 0E A2 |  if_e	cmp	local02, #0 wz
196b0     00 22 0E A2 |  if_e	cmp	local03, #0 wz
196b4     3C 00 90 AD |  if_e	jmp	#LR__2232
196b8     0C 12 06 F6 | 	mov	arg01, #12
196bc     A8 32 B0 FD | 	call	#__system___gc_alloc_managed
196c0     FD 24 0A F6 | 	mov	local04, result1 wz
196c4     18 00 90 5D |  if_ne	jmp	#LR__2231
196c8     EE 12 02 F6 | 	mov	arg01, abortchain
196cc     07 14 06 F6 | 	mov	arg02, #7
196d0     01 16 06 F6 | 	mov	arg03, #1
196d4     DA 00 A0 FD | 	call	#__longjmp
196d8     01 FA 65 F6 | 	neg	result1, #1
196dc     C8 00 90 FD | 	jmp	#LR__2239
196e0                 | LR__2231
196e0     12 01 68 FC | 	wrlong	#0, local04
196e4     04 24 06 F1 | 	add	local04, #4
196e8     12 01 68 FC | 	wrlong	#0, local04
196ec     04 24 86 F1 | 	sub	local04, #4
196f0     13 25 62 FC | 	wrlong	local04, local05
196f4                 | LR__2232
196f4     00 1E 0E F2 | 	cmp	local01, #0 wz
196f8     20 00 90 AD |  if_e	jmp	#LR__2233
196fc     12 1F 62 FC | 	wrlong	local01, local04
19700     12 FB 01 F6 | 	mov	result1, local04
19704     00 10 03 FF 
19708     00 FA 45 F5 | 	or	result1, ##102760448
1970c     1C 26 06 F1 | 	add	local05, #28
19710     13 FB 61 FC | 	wrlong	result1, local05
19714     1C 26 86 F1 | 	sub	local05, #28
19718     0C 00 90 FD | 	jmp	#LR__2234
1971c                 | LR__2233
1971c     1C 26 06 F1 | 	add	local05, #28
19720     13 01 68 FC | 	wrlong	#0, local05
19724     1C 26 86 F1 | 	sub	local05, #28
19728                 | LR__2234
19728     00 20 0E F2 | 	cmp	local02, #0 wz
1972c     28 00 90 AD |  if_e	jmp	#LR__2235
19730     04 24 06 F1 | 	add	local04, #4
19734     12 21 62 FC | 	wrlong	local02, local04
19738     04 24 86 F1 | 	sub	local04, #4
1973c     12 FB 01 F6 | 	mov	result1, local04
19740     00 18 03 FF 
19744     00 FA 45 F5 | 	or	result1, ##103809024
19748     20 26 06 F1 | 	add	local05, #32
1974c     13 FB 61 FC | 	wrlong	result1, local05
19750     20 26 86 F1 | 	sub	local05, #32
19754     0C 00 90 FD | 	jmp	#LR__2236
19758                 | LR__2235
19758     20 26 06 F1 | 	add	local05, #32
1975c     13 01 68 FC | 	wrlong	#0, local05
19760     20 26 86 F1 | 	sub	local05, #32
19764                 | LR__2236
19764     00 22 0E F2 | 	cmp	local03, #0 wz
19768     24 00 90 AD |  if_e	jmp	#LR__2237
1976c     08 24 06 F1 | 	add	local04, #8
19770     12 23 62 FC | 	wrlong	local03, local04
19774     08 24 86 F1 | 	sub	local04, #8
19778     00 20 03 FF 
1977c     00 24 46 F5 | 	or	local04, ##104857600
19780     24 26 06 F1 | 	add	local05, #36
19784     13 25 62 FC | 	wrlong	local04, local05
19788     24 26 86 F1 | 	sub	local05, #36
1978c     0C 00 90 FD | 	jmp	#LR__2238
19790                 | LR__2237
19790     24 26 06 F1 | 	add	local05, #36
19794     13 01 68 FC | 	wrlong	#0, local05
19798     24 26 86 F1 | 	sub	local05, #36
1979c                 | LR__2238
1979c     08 26 06 F1 | 	add	local05, #8
197a0     13 0F 68 FC | 	wrlong	#7, local05
197a4     00 FA 05 F6 | 	mov	result1, #0
197a8                 | LR__2239
197a8     A7 F0 03 F6 | 	mov	ptra, fp
197ac     B2 00 A0 FD | 	call	#popregs_
197b0                 | __system___basic_open_ret
197b0     2D 00 64 FD | 	ret
197b4                 | 
197b4                 | __system___basic_open_string
197b4     04 4A 05 F6 | 	mov	COUNT_, #4
197b8     A8 00 A0 FD | 	call	#pushregs_
197bc     0A 1F 02 F6 | 	mov	local01, arg02
197c0     0B 21 02 F6 | 	mov	local02, arg03
197c4     10 45 B0 FD | 	call	#__system____getftab
197c8     FD 22 0A F6 | 	mov	local03, result1 wz
197cc     18 00 90 5D |  if_ne	jmp	#LR__2240
197d0     EE 12 02 F6 | 	mov	arg01, abortchain
197d4     0C 14 06 F6 | 	mov	arg02, #12
197d8     01 16 06 F6 | 	mov	arg03, #1
197dc     DA 00 A0 FD | 	call	#__longjmp
197e0     01 FA 65 F6 | 	neg	result1, #1
197e4     58 00 90 FD | 	jmp	#LR__2242
197e8                 | LR__2240
197e8     08 22 06 F1 | 	add	local03, #8
197ec     11 19 0A FB | 	rdlong	arg04, local03 wz
197f0     08 22 86 F1 | 	sub	local03, #8
197f4     11 13 02 56 |  if_ne	mov	arg01, local03
197f8     6C 3C B0 5D |  if_ne	call	#__system___closeraw
197fc     0F 15 02 F6 | 	mov	arg02, local01
19800     10 17 02 F6 | 	mov	arg03, local02
19804     11 13 02 F6 | 	mov	arg01, local03
19808     B6 19 06 F6 | 	mov	arg04, #438
1980c     54 39 B0 FD | 	call	#__system___openraw
19810     FD 24 02 F6 | 	mov	local04, result1
19814     00 24 56 F2 | 	cmps	local04, #0 wc
19818     20 00 90 3D |  if_ae	jmp	#LR__2241
1981c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19820     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
19824     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19828     EE 12 02 F6 | 	mov	arg01, abortchain
1982c     01 16 06 F6 | 	mov	arg03, #1
19830     DA 00 A0 FD | 	call	#__longjmp
19834     01 FA 65 F6 | 	neg	result1, #1
19838     04 00 90 FD | 	jmp	#LR__2242
1983c                 | LR__2241
1983c     12 FB 01 F6 | 	mov	result1, local04
19840                 | LR__2242
19840     A7 F0 03 F6 | 	mov	ptra, fp
19844     B2 00 A0 FD | 	call	#popregs_
19848                 | __system___basic_open_string_ret
19848     2D 00 64 FD | 	ret
1984c                 | 
1984c                 | __system___basic_print_char
1984c     03 4A 05 F6 | 	mov	COUNT_, #3
19850     A8 00 A0 FD | 	call	#pushregs_
19854     0A 1F 02 F6 | 	mov	local01, arg02
19858     D0 4B B0 FD | 	call	#__system___gettxfunc
1985c     FD 20 0A F6 | 	mov	local02, result1 wz
19860     00 FA 05 A6 |  if_e	mov	result1, #0
19864     30 00 90 AD |  if_e	jmp	#LR__2250
19868     10 23 02 F6 | 	mov	local03, local02
1986c     13 20 46 F7 | 	zerox	local02, #19
19870     14 22 46 F0 | 	shr	local03, #20
19874     02 22 66 F0 | 	shl	local03, #2
19878     ED 22 02 F1 | 	add	local03, __methods__
1987c     11 23 02 FB | 	rdlong	local03, local03
19880     0F 13 02 F6 | 	mov	arg01, local01
19884     F2 1E 02 F6 | 	mov	local01, objptr
19888     10 E5 01 F6 | 	mov	objptr, local02
1988c     2D 22 62 FD | 	call	local03
19890     0F E5 01 F6 | 	mov	objptr, local01
19894     01 FA 05 F6 | 	mov	result1, #1
19898                 | LR__2250
19898     A7 F0 03 F6 | 	mov	ptra, fp
1989c     B2 00 A0 FD | 	call	#popregs_
198a0                 | __system___basic_print_char_ret
198a0     2D 00 64 FD | 	ret
198a4                 | 
198a4                 | __system___basic_print_string
198a4     03 4A 05 F6 | 	mov	COUNT_, #3
198a8     A8 00 A0 FD | 	call	#pushregs_
198ac     0A 1F 02 F6 | 	mov	local01, arg02
198b0     0B 21 02 F6 | 	mov	local02, arg03
198b4     74 4B B0 FD | 	call	#__system___gettxfunc
198b8     FD 22 0A F6 | 	mov	local03, result1 wz
198bc     00 FA 05 A6 |  if_e	mov	result1, #0
198c0     18 00 90 AD |  if_e	jmp	#LR__2260
198c4     00 1E 0E F2 | 	cmp	local01, #0 wz
198c8     00 FA 05 A6 |  if_e	mov	result1, #0
198cc     11 13 02 56 |  if_ne	mov	arg01, local03
198d0     10 15 02 56 |  if_ne	mov	arg02, local02
198d4     0F 17 02 56 |  if_ne	mov	arg03, local01
198d8     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
198dc                 | LR__2260
198dc     A7 F0 03 F6 | 	mov	ptra, fp
198e0     B2 00 A0 FD | 	call	#popregs_
198e4                 | __system___basic_print_string_ret
198e4     2D 00 64 FD | 	ret
198e8                 | 
198e8                 | __system___basic_print_integer
198e8     04 4A 05 F6 | 	mov	COUNT_, #4
198ec     A8 00 A0 FD | 	call	#pushregs_
198f0     0A 1F 02 F6 | 	mov	local01, arg02
198f4     0B 21 02 F6 | 	mov	local02, arg03
198f8     0C 23 02 F6 | 	mov	local03, arg04
198fc     2C 4B B0 FD | 	call	#__system___gettxfunc
19900     FD 24 0A F6 | 	mov	local04, result1 wz
19904     00 FA 05 A6 |  if_e	mov	result1, #0
19908     12 13 02 56 |  if_ne	mov	arg01, local04
1990c     10 15 02 56 |  if_ne	mov	arg02, local02
19910     0F 17 02 56 |  if_ne	mov	arg03, local01
19914     11 19 02 56 |  if_ne	mov	arg04, local03
19918     48 02 B0 5D |  if_ne	call	#__system___fmtnum
1991c     A7 F0 03 F6 | 	mov	ptra, fp
19920     B2 00 A0 FD | 	call	#popregs_
19924                 | __system___basic_print_integer_ret
19924     2D 00 64 FD | 	ret
19928                 | 
19928                 | __system___basic_print_unsigned
19928     03 4A 05 F6 | 	mov	COUNT_, #3
1992c     A8 00 A0 FD | 	call	#pushregs_
19930     0A 1F 02 F6 | 	mov	local01, arg02
19934     0B 21 02 F6 | 	mov	local02, arg03
19938     0C 23 02 F6 | 	mov	local03, arg04
1993c     EC 4A B0 FD | 	call	#__system___gettxfunc
19940     FD 12 0A F6 | 	mov	arg01, result1 wz
19944     00 FA 05 A6 |  if_e	mov	result1, #0
19948     3A 20 26 54 |  if_ne	bith	local02, #58
1994c     10 15 02 56 |  if_ne	mov	arg02, local02
19950     0F 17 02 56 |  if_ne	mov	arg03, local01
19954     11 19 02 56 |  if_ne	mov	arg04, local03
19958     08 02 B0 5D |  if_ne	call	#__system___fmtnum
1995c     A7 F0 03 F6 | 	mov	ptra, fp
19960     B2 00 A0 FD | 	call	#popregs_
19964                 | __system___basic_print_unsigned_ret
19964     2D 00 64 FD | 	ret
19968                 | 
19968                 | __system___basic_get_char
19968     03 4A 05 F6 | 	mov	COUNT_, #3
1996c     A8 00 A0 FD | 	call	#pushregs_
19970     FC 4A B0 FD | 	call	#__system___getrxfunc
19974     FD 1E 0A F6 | 	mov	local01, result1 wz
19978     01 FA 65 A6 |  if_e	neg	result1, #1
1997c     28 00 90 AD |  if_e	jmp	#LR__2270
19980     0F 21 02 F6 | 	mov	local02, local01
19984     13 1E 46 F7 | 	zerox	local01, #19
19988     14 20 46 F0 | 	shr	local02, #20
1998c     02 20 66 F0 | 	shl	local02, #2
19990     ED 20 02 F1 | 	add	local02, __methods__
19994     10 21 02 FB | 	rdlong	local02, local02
19998     F2 22 02 F6 | 	mov	local03, objptr
1999c     0F E5 01 F6 | 	mov	objptr, local01
199a0     2D 20 62 FD | 	call	local02
199a4     11 E5 01 F6 | 	mov	objptr, local03
199a8                 | LR__2270
199a8     A7 F0 03 F6 | 	mov	ptra, fp
199ac     B2 00 A0 FD | 	call	#popregs_
199b0                 | __system___basic_get_char_ret
199b0     2D 00 64 FD | 	ret
199b4                 | 
199b4                 | __system___basic_get
199b4     04 4A 05 F6 | 	mov	COUNT_, #4
199b8     A8 00 A0 FD | 	call	#pushregs_
199bc     0D 1F 02 F6 | 	mov	local01, arg05
199c0     0F 19 02 FD | 	qmul	arg04, local01
199c4     09 21 02 F6 | 	mov	local02, arg01
199c8     0B 23 02 F6 | 	mov	local03, arg03
199cc     00 14 0E F2 | 	cmp	arg02, #0 wz
199d0     01 14 86 51 |  if_ne	sub	arg02, #1
199d4     10 13 02 56 |  if_ne	mov	arg01, local02
199d8     00 16 06 56 |  if_ne	mov	arg03, #0
199dc     18 24 62 FD | 	getqx	local04
199e0     3C 41 B0 5D |  if_ne	call	#__system__lseek
199e4     11 15 02 F6 | 	mov	arg02, local03
199e8     12 17 02 F6 | 	mov	arg03, local04
199ec     10 13 02 F6 | 	mov	arg01, local02
199f0     B4 40 B0 FD | 	call	#__system__read
199f4     FD 24 02 F6 | 	mov	local04, result1
199f8     01 24 56 F2 | 	cmps	local04, #1 wc
199fc     10 00 90 CD |  if_b	jmp	#LR__2280
19a00     12 65 02 F6 | 	mov	muldiva_, local04
19a04     0F 67 02 F6 | 	mov	muldivb_, local01
19a08     BA 00 A0 FD | 	call	#divide_
19a0c     33 25 02 F6 | 	mov	local04, muldivb_
19a10                 | LR__2280
19a10     12 FB 01 F6 | 	mov	result1, local04
19a14     A7 F0 03 F6 | 	mov	ptra, fp
19a18     B2 00 A0 FD | 	call	#popregs_
19a1c                 | __system___basic_get_ret
19a1c     2D 00 64 FD | 	ret
19a20                 | 
19a20                 | __system___fmtchar
19a20     00 4A 05 F6 | 	mov	COUNT_, #0
19a24     A8 00 A0 FD | 	call	#pushregs_
19a28     10 F0 07 F1 | 	add	ptra, #16
19a2c     04 4E 05 F1 | 	add	fp, #4
19a30     A7 12 62 FC | 	wrlong	arg01, fp
19a34     04 4E 05 F1 | 	add	fp, #4
19a38     A7 14 62 FC | 	wrlong	arg02, fp
19a3c     04 4E 05 F1 | 	add	fp, #4
19a40     A7 16 62 FC | 	wrlong	arg03, fp
19a44     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
19a48     A7 16 62 FC | 	wrlong	arg03, fp
19a4c     08 4E 85 F1 | 	sub	fp, #8
19a50     A7 12 02 FB | 	rdlong	arg01, fp
19a54     04 4E 05 F1 | 	add	fp, #4
19a58     A7 14 02 FB | 	rdlong	arg02, fp
19a5c     04 4E 05 F1 | 	add	fp, #4
19a60     A7 16 02 F6 | 	mov	arg03, fp
19a64     0C 4E 85 F1 | 	sub	fp, #12
19a68     0C 00 B0 FD | 	call	#__system___fmtstr
19a6c     A7 F0 03 F6 | 	mov	ptra, fp
19a70     B2 00 A0 FD | 	call	#popregs_
19a74                 | __system___fmtchar_ret
19a74     2D 00 64 FD | 	ret
19a78                 | 
19a78                 | __system___fmtstr
19a78     09 4A 05 F6 | 	mov	COUNT_, #9
19a7c     A8 00 A0 FD | 	call	#pushregs_
19a80     09 1F 02 F6 | 	mov	local01, arg01
19a84     0A 21 02 F6 | 	mov	local02, arg02
19a88     0B 23 02 F6 | 	mov	local03, arg03
19a8c     10 19 E2 F8 | 	getbyte	arg04, local02, #0
19a90     11 13 02 F6 | 	mov	arg01, local03
19a94     09 25 02 F6 | 	mov	local04, arg01
19a98     97 06 48 FB | 	callpa	#(@LR__2291-@LR__2290)>>2,fcache_load_ptr_
19a9c                 | LR__2290
19a9c     12 FB C9 FA | 	rdbyte	result1, local04 wz
19aa0     01 24 06 51 |  if_ne	add	local04, #1
19aa4     F4 FF 9F 5D |  if_ne	jmp	#LR__2290
19aa8                 | LR__2291
19aa8     09 25 82 F1 | 	sub	local04, arg01
19aac     00 18 0E F2 | 	cmp	arg04, #0 wz
19ab0     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
19ab4     10 15 02 F6 | 	mov	arg02, local02
19ab8     12 17 02 F6 | 	mov	arg03, local04
19abc     0F 13 02 F6 | 	mov	arg01, local01
19ac0     02 18 06 F6 | 	mov	arg04, #2
19ac4     04 46 B0 FD | 	call	#__system___fmtpad
19ac8     FD 26 02 F6 | 	mov	local05, result1
19acc     00 26 56 F2 | 	cmps	local05, #0 wc
19ad0     13 FB 01 C6 |  if_b	mov	result1, local05
19ad4     80 00 90 CD |  if_b	jmp	#LR__2294
19ad8     01 24 56 F2 | 	cmps	local04, #1 wc
19adc     50 00 90 CD |  if_b	jmp	#LR__2293
19ae0     12 29 02 F6 | 	mov	local06, local04
19ae4                 | LR__2292
19ae4     0F 2B 02 F6 | 	mov	local07, local01
19ae8     0F 2D 02 F6 | 	mov	local08, local01
19aec     13 2A 46 F7 | 	zerox	local07, #19
19af0     14 2C 46 F0 | 	shr	local08, #20
19af4     02 2C 66 F0 | 	shl	local08, #2
19af8     ED 2C 02 F1 | 	add	local08, __methods__
19afc     16 2D 02 FB | 	rdlong	local08, local08
19b00     11 13 C2 FA | 	rdbyte	arg01, local03
19b04     F2 2E 02 F6 | 	mov	local09, objptr
19b08     15 E5 01 F6 | 	mov	objptr, local07
19b0c     01 22 06 F1 | 	add	local03, #1
19b10     2D 2C 62 FD | 	call	local08
19b14     17 E5 01 F6 | 	mov	objptr, local09
19b18     FD 2E 02 F6 | 	mov	local09, result1
19b1c     00 2E 56 F2 | 	cmps	local09, #0 wc
19b20     17 FB 01 C6 |  if_b	mov	result1, local09
19b24     30 00 90 CD |  if_b	jmp	#LR__2294
19b28     17 27 02 F1 | 	add	local05, local09
19b2c     ED 29 6E FB | 	djnz	local06, #LR__2292
19b30                 | LR__2293
19b30     10 15 02 F6 | 	mov	arg02, local02
19b34     12 17 02 F6 | 	mov	arg03, local04
19b38     0F 13 02 F6 | 	mov	arg01, local01
19b3c     01 18 06 F6 | 	mov	arg04, #1
19b40     88 45 B0 FD | 	call	#__system___fmtpad
19b44     FD 2E 02 F6 | 	mov	local09, result1
19b48     00 2E 56 F2 | 	cmps	local09, #0 wc
19b4c     17 FB 01 C6 |  if_b	mov	result1, local09
19b50     17 27 02 31 |  if_ae	add	local05, local09
19b54     13 FB 01 36 |  if_ae	mov	result1, local05
19b58                 | LR__2294
19b58     A7 F0 03 F6 | 	mov	ptra, fp
19b5c     B2 00 A0 FD | 	call	#popregs_
19b60                 | __system___fmtstr_ret
19b60     2D 00 64 FD | 	ret
19b64                 | 
19b64                 | __system___fmtnum
19b64     0B 4A 05 F6 | 	mov	COUNT_, #11
19b68     A8 00 A0 FD | 	call	#pushregs_
19b6c     09 1F 02 F6 | 	mov	local01, arg01
19b70     0A 21 02 F6 | 	mov	local02, arg02
19b74     0B 23 02 F6 | 	mov	local03, arg03
19b78     0C 25 02 F6 | 	mov	local04, arg04
19b7c     F8 27 02 F6 | 	mov	local05, ptra
19b80     13 29 02 F6 | 	mov	local06, local05
19b84     00 2A 06 F6 | 	mov	local07, #0
19b88     10 2D 02 F6 | 	mov	local08, local02
19b8c     10 2C 46 F0 | 	shr	local08, #16
19b90     3F 2C 06 F5 | 	and	local08, #63
19b94     10 2F E2 F8 | 	getbyte	local09, local02, #0
19b98     10 31 02 F6 | 	mov	local10, local02
19b9c     1A 30 46 F0 | 	shr	local10, #26
19ba0     03 30 06 F5 | 	and	local10, #3
19ba4     18 33 02 F6 | 	mov	local11, local10
19ba8     01 2C 56 F2 | 	cmps	local08, #1 wc
19bac     44 F0 07 F1 | 	add	ptra, #68
19bb0     01 2C 86 31 |  if_ae	sub	local08, #1
19bb4     41 2E 56 F2 | 	cmps	local09, #65 wc
19bb8     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
19bbc     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
19bc0     03 32 0E F2 | 	cmp	local11, #3 wz
19bc4     00 32 06 A6 |  if_e	mov	local11, #0
19bc8     00 22 56 52 |  if_ne	cmps	local03, #0 wc
19bcc     04 32 06 46 |  if_c_and_nz	mov	local11, #4
19bd0     11 23 62 46 |  if_c_and_nz	neg	local03, local03
19bd4     00 32 0E F2 | 	cmp	local11, #0 wz
19bd8     4C 00 90 AD |  if_e	jmp	#LR__2303
19bdc     01 2A 06 F6 | 	mov	local07, #1
19be0     17 2D 0A F2 | 	cmp	local08, local09 wz
19be4     18 00 90 5D |  if_ne	jmp	#LR__2301
19be8     05 2C 6E FB | 	djnz	local08, #LR__2300
19bec     0F 13 02 F6 | 	mov	arg01, local01
19bf0     10 15 02 F6 | 	mov	arg02, local02
19bf4     23 16 06 F6 | 	mov	arg03, #35
19bf8     24 FE BF FD | 	call	#__system___fmtchar
19bfc     88 00 90 FD | 	jmp	#LR__2307
19c00                 | LR__2300
19c00                 | LR__2301
19c00     02 32 0E F2 | 	cmp	local11, #2 wz
19c04     14 31 02 A6 |  if_e	mov	local10, local06
19c08     01 28 06 A1 |  if_e	add	local06, #1
19c0c     18 41 48 AC |  if_e	wrbyte	#32, local10
19c10     14 00 90 AD |  if_e	jmp	#LR__2302
19c14     04 32 0E F2 | 	cmp	local11, #4 wz
19c18     14 5B 48 AC |  if_e	wrbyte	#45, local06
19c1c     01 28 06 A1 |  if_e	add	local06, #1
19c20     14 57 48 5C |  if_ne	wrbyte	#43, local06
19c24     01 28 06 51 |  if_ne	add	local06, #1
19c28                 | LR__2302
19c28                 | LR__2303
19c28     14 13 02 F6 | 	mov	arg01, local06
19c2c     11 15 02 F6 | 	mov	arg02, local03
19c30     12 17 02 F6 | 	mov	arg03, local04
19c34     16 19 02 F6 | 	mov	arg04, local08
19c38     00 1A 06 F6 | 	mov	arg05, #0
19c3c     1D 20 2E F4 | 	testbn	local02, #29 wz
19c40     01 1A 06 56 |  if_ne	mov	arg05, #1
19c44     4C 45 B0 FD | 	call	#__system___uitoa
19c48     FD 2A 02 F1 | 	add	local07, result1
19c4c     17 2B 5A F2 | 	cmps	local07, local09 wcz
19c50     24 00 90 ED |  if_be	jmp	#LR__2306
19c54     97 0E 48 FB | 	callpa	#(@LR__2305-@LR__2304)>>2,fcache_load_ptr_
19c58                 | LR__2304
19c58     17 31 02 F6 | 	mov	local10, local09
19c5c     01 30 56 F2 | 	cmps	local10, #1 wc
19c60     01 2E 86 F1 | 	sub	local09, #1
19c64     14 31 02 36 |  if_ae	mov	local10, local06
19c68     01 28 06 31 |  if_ae	add	local06, #1
19c6c     18 47 48 3C |  if_ae	wrbyte	#35, local10
19c70     E4 FF 9F 3D |  if_ae	jmp	#LR__2304
19c74                 | LR__2305
19c74     14 01 48 FC | 	wrbyte	#0, local06
19c78                 | LR__2306
19c78     0F 13 02 F6 | 	mov	arg01, local01
19c7c     10 15 02 F6 | 	mov	arg02, local02
19c80     13 17 02 F6 | 	mov	arg03, local05
19c84     F0 FD BF FD | 	call	#__system___fmtstr
19c88                 | LR__2307
19c88     A7 F0 03 F6 | 	mov	ptra, fp
19c8c     B2 00 A0 FD | 	call	#popregs_
19c90                 | __system___fmtnum_ret
19c90     2D 00 64 FD | 	ret
19c94                 | 
19c94                 | __system___fmtfloat
19c94     10 4A 05 F6 | 	mov	COUNT_, #16
19c98     A8 00 A0 FD | 	call	#pushregs_
19c9c     24 F1 07 F1 | 	add	ptra, #292
19ca0     04 4E 05 F1 | 	add	fp, #4
19ca4     A7 12 62 FC | 	wrlong	arg01, fp
19ca8     04 4E 05 F1 | 	add	fp, #4
19cac     A7 14 62 FC | 	wrlong	arg02, fp
19cb0     04 4E 05 F1 | 	add	fp, #4
19cb4     A7 16 62 FC | 	wrlong	arg03, fp
19cb8     04 4E 05 F1 | 	add	fp, #4
19cbc     A7 18 62 FC | 	wrlong	arg04, fp
19cc0     0C 4E 05 F1 | 	add	fp, #12
19cc4     A7 14 68 FC | 	wrlong	#10, fp
19cc8     08 4E 05 F1 | 	add	fp, #8
19ccc     A7 00 68 FC | 	wrlong	#0, fp
19cd0     08 4E 05 F1 | 	add	fp, #8
19cd4     A7 00 68 FC | 	wrlong	#0, fp
19cd8     08 4E 05 F1 | 	add	fp, #8
19cdc     A7 00 68 FC | 	wrlong	#0, fp
19ce0     04 4E 05 F1 | 	add	fp, #4
19ce4     A7 04 68 FC | 	wrlong	#2, fp
19ce8     04 4E 05 F1 | 	add	fp, #4
19cec     A7 00 68 FC | 	wrlong	#0, fp
19cf0     04 4E 05 F1 | 	add	fp, #4
19cf4     A7 00 68 FC | 	wrlong	#0, fp
19cf8     04 4E 05 F1 | 	add	fp, #4
19cfc     A7 00 68 FC | 	wrlong	#0, fp
19d00     04 4E 05 F1 | 	add	fp, #4
19d04     A7 00 68 FC | 	wrlong	#0, fp
19d08     18 4E 05 F1 | 	add	fp, #24
19d0c     A7 00 68 FC | 	wrlong	#0, fp
19d10     68 4E 05 F1 | 	add	fp, #104
19d14     A7 1E 02 F6 | 	mov	local01, fp
19d18     08 4E 85 F1 | 	sub	fp, #8
19d1c     A7 1E 62 FC | 	wrlong	local01, fp
19d20     04 4E 05 F1 | 	add	fp, #4
19d24     A7 1E 62 FC | 	wrlong	local01, fp
19d28     BC 4E 85 F1 | 	sub	fp, #188
19d2c     A7 1E 02 FB | 	rdlong	local01, fp
19d30     10 1E 46 F0 | 	shr	local01, #16
19d34     3F 1E 06 F5 | 	and	local01, #63
19d38     B0 4E 05 F1 | 	add	fp, #176
19d3c     A7 1E 62 FC | 	wrlong	local01, fp
19d40     B0 4E 85 F1 | 	sub	fp, #176
19d44     A7 1E 02 FB | 	rdlong	local01, fp
19d48     1C 1E 46 F0 | 	shr	local01, #28
19d4c     01 1E 06 F5 | 	and	local01, #1
19d50     08 4F 05 F1 | 	add	fp, #264
19d54     A7 1E 62 FC | 	wrlong	local01, fp
19d58     58 4E 85 F1 | 	sub	fp, #88
19d5c     A7 1E 0A FB | 	rdlong	local01, fp wz
19d60     B8 4E 85 F1 | 	sub	fp, #184
19d64     3C 00 90 5D |  if_ne	jmp	#LR__2311
19d68     10 4E 05 F1 | 	add	fp, #16
19d6c     A7 1E 02 FB | 	rdlong	local01, fp
19d70     10 4E 85 F1 | 	sub	fp, #16
19d74     61 1E 0E F2 | 	cmp	local01, #97 wz
19d78     18 00 90 5D |  if_ne	jmp	#LR__2310
19d7c     B8 4E 05 F1 | 	add	fp, #184
19d80     A7 1A 68 FC | 	wrlong	#13, fp
19d84     84 4E 85 F1 | 	sub	fp, #132
19d88     A7 02 68 FC | 	wrlong	#1, fp
19d8c     34 4E 85 F1 | 	sub	fp, #52
19d90     24 00 90 FD | 	jmp	#LR__2312
19d94                 | LR__2310
19d94     B8 4E 05 F1 | 	add	fp, #184
19d98     A7 0C 68 FC | 	wrlong	#6, fp
19d9c     B8 4E 85 F1 | 	sub	fp, #184
19da0     14 00 90 FD | 	jmp	#LR__2312
19da4                 | LR__2311
19da4     B8 4E 05 F1 | 	add	fp, #184
19da8     A7 1E 02 FB | 	rdlong	local01, fp
19dac     01 1E 86 F1 | 	sub	local01, #1
19db0     A7 1E 62 FC | 	wrlong	local01, fp
19db4     B8 4E 85 F1 | 	sub	fp, #184
19db8                 | LR__2312
19db8     08 4E 05 F1 | 	add	fp, #8
19dbc     A7 1E 02 FB | 	rdlong	local01, fp
19dc0     16 1E 46 F0 | 	shr	local01, #22
19dc4     03 1E 06 F5 | 	and	local01, #3
19dc8     04 4F 05 F1 | 	add	fp, #260
19dcc     A7 1E 62 FC | 	wrlong	local01, fp
19dd0     04 4F 85 F1 | 	sub	fp, #260
19dd4     A7 1E 02 FB | 	rdlong	local01, fp
19dd8     1D 1E 46 F0 | 	shr	local01, #29
19ddc     01 1E 06 F5 | 	and	local01, #1
19de0     B4 4E 05 F1 | 	add	fp, #180
19de4     A7 1E 62 FC | 	wrlong	local01, fp
19de8     B4 4E 85 F1 | 	sub	fp, #180
19dec     A7 1E 02 FB | 	rdlong	local01, fp
19df0     0F 1F EA F8 | 	getbyte	local01, local01, #1
19df4     60 4E 05 F1 | 	add	fp, #96
19df8     A7 1E 62 FC | 	wrlong	local01, fp
19dfc     60 4E 85 F1 | 	sub	fp, #96
19e00     A7 1E 02 FB | 	rdlong	local01, fp
19e04     0F 1F E2 F8 | 	getbyte	local01, local01, #0
19e08     64 4E 05 F1 | 	add	fp, #100
19e0c     A7 1E 62 FC | 	wrlong	local01, fp
19e10     00 1E 06 F6 | 	mov	local01, #0
19e14     5C 4E 85 F1 | 	sub	fp, #92
19e18     A7 1A 02 FB | 	rdlong	arg05, fp
19e1c     65 1A 0E F2 | 	cmp	arg05, #101 wz
19e20     01 1E 06 A6 |  if_e	mov	local01, #1
19e24     14 4E 05 F1 | 	add	fp, #20
19e28     A7 1E 62 FC | 	wrlong	local01, fp
19e2c     98 4E 05 F1 | 	add	fp, #152
19e30     A7 20 0A FB | 	rdlong	local02, fp wz
19e34     45 1E 06 56 |  if_ne	mov	local01, #69
19e38     65 1E 06 A6 |  if_e	mov	local01, #101
19e3c     8C 4E 85 F1 | 	sub	fp, #140
19e40     A7 1E 62 FC | 	wrlong	local01, fp
19e44     20 4E 85 F1 | 	sub	fp, #32
19e48     A7 1E 02 FB | 	rdlong	local01, fp
19e4c     10 4E 85 F1 | 	sub	fp, #16
19e50     61 1E 0E F2 | 	cmp	local01, #97 wz
19e54     4C 00 90 5D |  if_ne	jmp	#LR__2313
19e58     24 4E 05 F1 | 	add	fp, #36
19e5c     A7 02 68 FC | 	wrlong	#1, fp
19e60     98 4E 05 F1 | 	add	fp, #152
19e64     A7 20 0A FB | 	rdlong	local02, fp wz
19e68     50 1E 06 56 |  if_ne	mov	local01, #80
19e6c     70 1E 06 A6 |  if_e	mov	local01, #112
19e70     8C 4E 85 F1 | 	sub	fp, #140
19e74     A7 1E 62 FC | 	wrlong	local01, fp
19e78     14 4E 85 F1 | 	sub	fp, #20
19e7c     A7 04 68 FC | 	wrlong	#2, fp
19e80     1C 4E 05 F1 | 	add	fp, #28
19e84     A7 02 68 FC | 	wrlong	#1, fp
19e88     84 4E 05 F1 | 	add	fp, #132
19e8c     A7 20 0A FB | 	rdlong	local02, fp wz
19e90     58 1E 06 56 |  if_ne	mov	local01, #88
19e94     78 1E 06 A6 |  if_e	mov	local01, #120
19e98     7C 4E 85 F1 | 	sub	fp, #124
19e9c     A7 1E 62 FC | 	wrlong	local01, fp
19ea0     40 4E 85 F1 | 	sub	fp, #64
19ea4                 | LR__2313
19ea4     10 4E 05 F1 | 	add	fp, #16
19ea8     A7 1E 02 FB | 	rdlong	local01, fp
19eac     10 4E 85 F1 | 	sub	fp, #16
19eb0     23 1E 0E F2 | 	cmp	local01, #35 wz
19eb4     3C 00 90 5D |  if_ne	jmp	#LR__2316
19eb8     48 4E 05 F1 | 	add	fp, #72
19ebc     A7 02 68 FC | 	wrlong	#1, fp
19ec0     C8 4E 05 F1 | 	add	fp, #200
19ec4     A7 1E 0A FB | 	rdlong	local01, fp wz
19ec8     10 4F 85 F1 | 	sub	fp, #272
19ecc     18 00 90 AD |  if_e	jmp	#LR__2314
19ed0     10 4E 05 F1 | 	add	fp, #16
19ed4     A7 CC 68 FC | 	wrlong	#102, fp
19ed8     00 4F 05 F1 | 	add	fp, #256
19edc     A7 00 68 FC | 	wrlong	#0, fp
19ee0     10 4F 85 F1 | 	sub	fp, #272
19ee4     0C 00 90 FD | 	jmp	#LR__2315
19ee8                 | LR__2314
19ee8     10 4F 05 F1 | 	add	fp, #272
19eec     A7 02 68 FC | 	wrlong	#1, fp
19ef0     10 4F 85 F1 | 	sub	fp, #272
19ef4                 | LR__2315
19ef4                 | LR__2316
19ef4     08 4E 05 F1 | 	add	fp, #8
19ef8     A7 1E 02 FB | 	rdlong	local01, fp
19efc     1A 1E 46 F0 | 	shr	local01, #26
19f00     03 1E 06 F5 | 	and	local01, #3
19f04     5C 4E 05 F1 | 	add	fp, #92
19f08     A7 1E 62 FC | 	wrlong	local01, fp
19f0c     58 4E 85 F1 | 	sub	fp, #88
19f10     A7 FA 01 FB | 	rdlong	result1, fp
19f14     0C 4E 85 F1 | 	sub	fp, #12
19f18     1F FA 4D F0 | 	shr	result1, #31 wz
19f1c     20 00 90 AD |  if_e	jmp	#LR__2317
19f20     2C 4E 05 F1 | 	add	fp, #44
19f24     A7 5A 68 FC | 	wrlong	#45, fp
19f28     20 4E 85 F1 | 	sub	fp, #32
19f2c     A7 FA 01 FB | 	rdlong	result1, fp
19f30     1F FA E5 F4 | 	bitnot	result1, #31
19f34     A7 FA 61 FC | 	wrlong	result1, fp
19f38     0C 4E 85 F1 | 	sub	fp, #12
19f3c     3C 00 90 FD | 	jmp	#LR__2319
19f40                 | LR__2317
19f40     64 4E 05 F1 | 	add	fp, #100
19f44     A7 1E 02 FB | 	rdlong	local01, fp
19f48     64 4E 85 F1 | 	sub	fp, #100
19f4c     01 1E 0E F2 | 	cmp	local01, #1 wz
19f50     2C 4E 05 A1 |  if_e	add	fp, #44
19f54     A7 56 68 AC |  if_e	wrlong	#43, fp
19f58     2C 4E 85 A1 |  if_e	sub	fp, #44
19f5c     1C 00 90 AD |  if_e	jmp	#LR__2318
19f60     64 4E 05 F1 | 	add	fp, #100
19f64     A7 1E 02 FB | 	rdlong	local01, fp
19f68     64 4E 85 F1 | 	sub	fp, #100
19f6c     02 1E 0E F2 | 	cmp	local01, #2 wz
19f70     2C 4E 05 A1 |  if_e	add	fp, #44
19f74     A7 40 68 AC |  if_e	wrlong	#32, fp
19f78     2C 4E 85 A1 |  if_e	sub	fp, #44
19f7c                 | LR__2318
19f7c                 | LR__2319
19f7c     08 4E 05 F1 | 	add	fp, #8
19f80     A7 1E 02 FB | 	rdlong	local01, fp
19f84     18 1E 46 F0 | 	shr	local01, #24
19f88     03 1E 06 F5 | 	and	local01, #3
19f8c     3C 4E 05 F1 | 	add	fp, #60
19f90     A7 1E 62 FC | 	wrlong	local01, fp
19f94     00 1E 06 F6 | 	mov	local01, #0
19f98     18 4E 85 F1 | 	sub	fp, #24
19f9c     A7 22 0A FB | 	rdlong	local03, fp wz
19fa0     2C 4E 85 F1 | 	sub	fp, #44
19fa4     18 00 90 5D |  if_ne	jmp	#LR__2320
19fa8     1C 4E 05 F1 | 	add	fp, #28
19fac     A7 24 02 FB | 	rdlong	local04, fp
19fb0     1C 4E 85 F1 | 	sub	fp, #28
19fb4     12 27 02 F6 | 	mov	local05, local04
19fb8     0A 26 0E F2 | 	cmp	local05, #10 wz
19fbc     04 00 90 AD |  if_e	jmp	#LR__2321
19fc0                 | LR__2320
19fc0     01 1E 66 F5 | 	xor	local01, #1
19fc4                 | LR__2321
19fc4     3C 4E 05 F1 | 	add	fp, #60
19fc8     A7 1E 62 FC | 	wrlong	local01, fp
19fcc     3C 4E 85 F1 | 	sub	fp, #60
19fd0     00 1E 0E F2 | 	cmp	local01, #0 wz
19fd4     0C 01 90 AD |  if_e	jmp	#LR__2323
19fd8     44 4E 05 F1 | 	add	fp, #68
19fdc     A7 26 02 FB | 	rdlong	local05, fp
19fe0     44 4E 85 F1 | 	sub	fp, #68
19fe4     13 23 02 F6 | 	mov	local03, local05
19fe8     02 22 0E F2 | 	cmp	local03, #2 wz
19fec     F4 00 90 5D |  if_ne	jmp	#LR__2323
19ff0     0C 4F 05 F1 | 	add	fp, #268
19ff4     A7 28 02 FB | 	rdlong	local06, fp
19ff8     0C 4F 85 F1 | 	sub	fp, #268
19ffc     14 25 02 F6 | 	mov	local04, local06
1a000     02 24 0E F2 | 	cmp	local04, #2 wz
1a004     DC 00 90 AD |  if_e	jmp	#LR__2323
1a008     C0 4E 05 F1 | 	add	fp, #192
1a00c     A7 12 02 FB | 	rdlong	arg01, fp
1a010     94 4E 85 F1 | 	sub	fp, #148
1a014     A7 14 02 FB | 	rdlong	arg02, fp
1a018     14 4E 05 F1 | 	add	fp, #20
1a01c     A7 16 02 FB | 	rdlong	arg03, fp
1a020     40 4E 85 F1 | 	sub	fp, #64
1a024     D4 43 B0 FD | 	call	#__system__emitsign_0383
1a028     14 4F 05 F1 | 	add	fp, #276
1a02c     A7 FA 61 FC | 	wrlong	result1, fp
1a030     14 4F 85 F1 | 	sub	fp, #276
1a034     00 FA 55 F2 | 	cmps	result1, #0 wc
1a038     14 4F 05 C1 |  if_b	add	fp, #276
1a03c     A7 FA 01 CB |  if_b	rdlong	result1, fp
1a040     14 4F 85 C1 |  if_b	sub	fp, #276
1a044     6C 0B 90 CD |  if_b	jmp	#LR__2373
1a048     C0 4E 05 F1 | 	add	fp, #192
1a04c     A7 1E 02 FB | 	rdlong	local01, fp
1a050     54 4E 05 F1 | 	add	fp, #84
1a054     A7 26 02 FB | 	rdlong	local05, fp
1a058     13 23 02 F6 | 	mov	local03, local05
1a05c     13 1F 02 F1 | 	add	local01, local05
1a060     54 4E 85 F1 | 	sub	fp, #84
1a064     A7 1E 62 FC | 	wrlong	local01, fp
1a068     58 4E 85 F1 | 	sub	fp, #88
1a06c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a070     68 4E 85 F1 | 	sub	fp, #104
1a074     60 00 90 AD |  if_e	jmp	#LR__2322
1a078     68 4E 05 F1 | 	add	fp, #104
1a07c     A7 1E 02 FB | 	rdlong	local01, fp
1a080     AC 4E 05 F1 | 	add	fp, #172
1a084     A7 22 02 FB | 	rdlong	local03, fp
1a088     11 1F 82 F1 | 	sub	local01, local03
1a08c     AC 4E 85 F1 | 	sub	fp, #172
1a090     A7 1E 62 FC | 	wrlong	local01, fp
1a094     68 4E 85 F1 | 	sub	fp, #104
1a098     00 1E 56 F2 | 	cmps	local01, #0 wc
1a09c     68 4E 05 C1 |  if_b	add	fp, #104
1a0a0     A7 00 68 CC |  if_b	wrlong	#0, fp
1a0a4     68 4E 85 C1 |  if_b	sub	fp, #104
1a0a8     08 4E 05 F1 | 	add	fp, #8
1a0ac     A7 1E 02 FB | 	rdlong	local01, fp
1a0b0     E8 1E 06 F4 | 	bitl	local01, #232
1a0b4     A7 1E 62 FC | 	wrlong	local01, fp
1a0b8     60 4E 05 F1 | 	add	fp, #96
1a0bc     A7 26 02 FB | 	rdlong	local05, fp
1a0c0     13 23 02 F6 | 	mov	local03, local05
1a0c4     08 22 66 F0 | 	shl	local03, #8
1a0c8     11 1F 42 F5 | 	or	local01, local03
1a0cc     60 4E 85 F1 | 	sub	fp, #96
1a0d0     A7 1E 62 FC | 	wrlong	local01, fp
1a0d4     08 4E 85 F1 | 	sub	fp, #8
1a0d8                 | LR__2322
1a0d8     3C 4E 05 F1 | 	add	fp, #60
1a0dc     A7 00 68 FC | 	wrlong	#0, fp
1a0e0     3C 4E 85 F1 | 	sub	fp, #60
1a0e4                 | LR__2323
1a0e4     0C 4E 05 F1 | 	add	fp, #12
1a0e8     A7 12 02 FB | 	rdlong	arg01, fp
1a0ec     0C 4E 85 F1 | 	sub	fp, #12
1a0f0     A8 1E B0 FD | 	call	#__system____builtin_ilogb
1a0f4     FF FF 3F FF 
1a0f8     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1a0fc     50 00 90 5D |  if_ne	jmp	#LR__2325
1a100     2C 4E 05 F1 | 	add	fp, #44
1a104     A7 1E 0A FB | 	rdlong	local01, fp wz
1a108     2C 4E 85 F1 | 	sub	fp, #44
1a10c     24 00 90 AD |  if_e	jmp	#LR__2324
1a110     C0 4E 05 F1 | 	add	fp, #192
1a114     A7 20 02 FB | 	rdlong	local02, fp
1a118     10 23 02 F6 | 	mov	local03, local02
1a11c     01 22 06 F1 | 	add	local03, #1
1a120     A7 22 62 FC | 	wrlong	local03, fp
1a124     94 4E 85 F1 | 	sub	fp, #148
1a128     A7 24 02 FB | 	rdlong	local04, fp
1a12c     2C 4E 85 F1 | 	sub	fp, #44
1a130     10 25 42 FC | 	wrbyte	local04, local02
1a134                 | LR__2324
1a134     C0 4E 05 F1 | 	add	fp, #192
1a138     A7 12 02 FB | 	rdlong	arg01, fp
1a13c     C0 4E 85 F1 | 	sub	fp, #192
1a140     40 01 00 FF 
1a144     BE 14 06 F6 | 	mov	arg02, ##@LR__4251
1a148     18 EA BF FD | 	call	#__system____builtin_strcpy
1a14c     A4 08 90 FD | 	jmp	#LR__2361
1a150                 | LR__2325
1a150     0C 4E 05 F1 | 	add	fp, #12
1a154     A7 20 02 FB | 	rdlong	local02, fp
1a158     0C 4E 85 F1 | 	sub	fp, #12
1a15c     10 13 02 F6 | 	mov	arg01, local02
1a160     38 1E B0 FD | 	call	#__system____builtin_ilogb
1a164     00 00 40 FF 
1a168     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
1a16c     50 00 90 5D |  if_ne	jmp	#LR__2327
1a170     2C 4E 05 F1 | 	add	fp, #44
1a174     A7 1E 0A FB | 	rdlong	local01, fp wz
1a178     2C 4E 85 F1 | 	sub	fp, #44
1a17c     24 00 90 AD |  if_e	jmp	#LR__2326
1a180     C0 4E 05 F1 | 	add	fp, #192
1a184     A7 20 02 FB | 	rdlong	local02, fp
1a188     10 23 02 F6 | 	mov	local03, local02
1a18c     01 22 06 F1 | 	add	local03, #1
1a190     A7 22 62 FC | 	wrlong	local03, fp
1a194     94 4E 85 F1 | 	sub	fp, #148
1a198     A7 24 02 FB | 	rdlong	local04, fp
1a19c     2C 4E 85 F1 | 	sub	fp, #44
1a1a0     10 25 42 FC | 	wrbyte	local04, local02
1a1a4                 | LR__2326
1a1a4     C0 4E 05 F1 | 	add	fp, #192
1a1a8     A7 12 02 FB | 	rdlong	arg01, fp
1a1ac     C0 4E 85 F1 | 	sub	fp, #192
1a1b0     40 01 00 FF 
1a1b4     C2 14 06 F6 | 	mov	arg02, ##@LR__4252
1a1b8     A8 E9 BF FD | 	call	#__system____builtin_strcpy
1a1bc     34 08 90 FD | 	jmp	#LR__2361
1a1c0                 | LR__2327
1a1c0     10 4E 05 F1 | 	add	fp, #16
1a1c4     A7 1E 02 FB | 	rdlong	local01, fp
1a1c8     10 4E 85 F1 | 	sub	fp, #16
1a1cc     67 1E 0E F2 | 	cmp	local01, #103 wz
1a1d0     10 4E 05 51 |  if_ne	add	fp, #16
1a1d4     A7 22 02 5B |  if_ne	rdlong	local03, fp
1a1d8     10 4E 85 51 |  if_ne	sub	fp, #16
1a1dc     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
1a1e0     94 01 90 5D |  if_ne	jmp	#LR__2332
1a1e4     0C 4E 05 F1 | 	add	fp, #12
1a1e8     A7 12 02 FB | 	rdlong	arg01, fp
1a1ec     08 4E 05 F1 | 	add	fp, #8
1a1f0     A7 14 02 F6 | 	mov	arg02, fp
1a1f4     0C 4E 05 F1 | 	add	fp, #12
1a1f8     A7 16 02 F6 | 	mov	arg03, fp
1a1fc     98 4E 05 F1 | 	add	fp, #152
1a200     A7 18 02 FB | 	rdlong	arg04, fp
1a204     9C 4E 85 F1 | 	sub	fp, #156
1a208     A7 1A 02 FB | 	rdlong	arg05, fp
1a20c     1C 4E 85 F1 | 	sub	fp, #28
1a210     F4 3F B0 FD | 	call	#__system__disassemble_0381
1a214     10 4E 05 F1 | 	add	fp, #16
1a218     A7 1E 02 FB | 	rdlong	local01, fp
1a21c     10 4E 85 F1 | 	sub	fp, #16
1a220     23 1E 0E F2 | 	cmp	local01, #35 wz
1a224     A0 00 90 5D |  if_ne	jmp	#LR__2329
1a228     20 4E 05 F1 | 	add	fp, #32
1a22c     A7 1E 02 FB | 	rdlong	local01, fp
1a230     98 4E 05 F1 | 	add	fp, #152
1a234     A7 22 02 FB | 	rdlong	local03, fp
1a238     B8 4E 85 F1 | 	sub	fp, #184
1a23c     11 1F 5A F2 | 	cmps	local01, local03 wcz
1a240     24 4E 05 11 |  if_a	add	fp, #36
1a244     A7 02 68 1C |  if_a	wrlong	#1, fp
1a248     24 4E 85 11 |  if_a	sub	fp, #36
1a24c     A4 01 90 1D |  if_a	jmp	#LR__2335
1a250     20 4E 05 F1 | 	add	fp, #32
1a254     A7 1E 02 FB | 	rdlong	local01, fp
1a258     20 4E 85 F1 | 	sub	fp, #32
1a25c     00 1E 56 F2 | 	cmps	local01, #0 wc
1a260     2C 00 90 3D |  if_ae	jmp	#LR__2328
1a264     B8 4E 05 F1 | 	add	fp, #184
1a268     A7 1E 02 FB | 	rdlong	local01, fp
1a26c     0F 1F 62 F6 | 	neg	local01, local01
1a270     98 4E 85 F1 | 	sub	fp, #152
1a274     A7 22 02 FB | 	rdlong	local03, fp
1a278     20 4E 85 F1 | 	sub	fp, #32
1a27c     0F 23 5A F2 | 	cmps	local03, local01 wcz
1a280     24 4E 05 E1 |  if_be	add	fp, #36
1a284     A7 02 68 EC |  if_be	wrlong	#1, fp
1a288     24 4E 85 E1 |  if_be	sub	fp, #36
1a28c     64 01 90 FD | 	jmp	#LR__2335
1a290                 | LR__2328
1a290     20 4E 05 F1 | 	add	fp, #32
1a294     A7 1E 02 FB | 	rdlong	local01, fp
1a298     20 4E 85 F1 | 	sub	fp, #32
1a29c     01 1E 56 F2 | 	cmps	local01, #1 wc
1a2a0     50 01 90 CD |  if_b	jmp	#LR__2335
1a2a4     B8 4E 05 F1 | 	add	fp, #184
1a2a8     A7 1E 02 FB | 	rdlong	local01, fp
1a2ac     98 4E 85 F1 | 	sub	fp, #152
1a2b0     A7 22 02 FB | 	rdlong	local03, fp
1a2b4     11 1F 82 F1 | 	sub	local01, local03
1a2b8     98 4E 05 F1 | 	add	fp, #152
1a2bc     A7 1E 62 FC | 	wrlong	local01, fp
1a2c0     B8 4E 85 F1 | 	sub	fp, #184
1a2c4     2C 01 90 FD | 	jmp	#LR__2335
1a2c8                 | LR__2329
1a2c8     00 1E 06 F6 | 	mov	local01, #0
1a2cc     08 4E 05 F1 | 	add	fp, #8
1a2d0     A7 20 02 FB | 	rdlong	local02, fp
1a2d4     1C 20 46 F0 | 	shr	local02, #28
1a2d8     01 20 0E F5 | 	and	local02, #1 wz
1a2dc     01 1E 06 A6 |  if_e	mov	local01, #1
1a2e0     2C 4E 05 F1 | 	add	fp, #44
1a2e4     A7 1E 62 FC | 	wrlong	local01, fp
1a2e8     14 4E 85 F1 | 	sub	fp, #20
1a2ec     A7 1E 02 FB | 	rdlong	local01, fp
1a2f0     98 4E 05 F1 | 	add	fp, #152
1a2f4     A7 22 02 FB | 	rdlong	local03, fp
1a2f8     B8 4E 85 F1 | 	sub	fp, #184
1a2fc     11 1F 52 F2 | 	cmps	local01, local03 wc
1a300     18 00 90 3D |  if_ae	jmp	#LR__2330
1a304     20 4E 05 F1 | 	add	fp, #32
1a308     A7 24 02 FB | 	rdlong	local04, fp
1a30c     20 4E 85 F1 | 	sub	fp, #32
1a310     FF FF 7F FF 
1a314     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1a318     10 00 90 3D |  if_ae	jmp	#LR__2331
1a31c                 | LR__2330
1a31c     24 4E 05 F1 | 	add	fp, #36
1a320     A7 02 68 FC | 	wrlong	#1, fp
1a324     24 4E 85 F1 | 	sub	fp, #36
1a328     C8 00 90 FD | 	jmp	#LR__2335
1a32c                 | LR__2331
1a32c     B8 4E 05 F1 | 	add	fp, #184
1a330     A7 24 02 FB | 	rdlong	local04, fp
1a334     98 4E 85 F1 | 	sub	fp, #152
1a338     A7 22 02 FB | 	rdlong	local03, fp
1a33c     11 25 82 F1 | 	sub	local04, local03
1a340     98 4E 05 F1 | 	add	fp, #152
1a344     A7 24 62 FC | 	wrlong	local04, fp
1a348     AC 4E 85 F1 | 	sub	fp, #172
1a34c     A7 12 02 FB | 	rdlong	arg01, fp
1a350     08 4E 05 F1 | 	add	fp, #8
1a354     A7 14 02 F6 | 	mov	arg02, fp
1a358     0C 4E 05 F1 | 	add	fp, #12
1a35c     A7 16 02 F6 | 	mov	arg03, fp
1a360     12 19 62 F6 | 	neg	arg04, local04
1a364     04 4E 85 F1 | 	sub	fp, #4
1a368     A7 1A 02 FB | 	rdlong	arg05, fp
1a36c     1C 4E 85 F1 | 	sub	fp, #28
1a370     94 3E B0 FD | 	call	#__system__disassemble_0381
1a374     7C 00 90 FD | 	jmp	#LR__2335
1a378                 | LR__2332
1a378     24 4E 05 F1 | 	add	fp, #36
1a37c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a380     24 4E 85 F1 | 	sub	fp, #36
1a384     34 00 90 AD |  if_e	jmp	#LR__2333
1a388     0C 4E 05 F1 | 	add	fp, #12
1a38c     A7 12 02 FB | 	rdlong	arg01, fp
1a390     08 4E 05 F1 | 	add	fp, #8
1a394     A7 14 02 F6 | 	mov	arg02, fp
1a398     0C 4E 05 F1 | 	add	fp, #12
1a39c     A7 16 02 F6 | 	mov	arg03, fp
1a3a0     98 4E 05 F1 | 	add	fp, #152
1a3a4     A7 18 02 FB | 	rdlong	arg04, fp
1a3a8     9C 4E 85 F1 | 	sub	fp, #156
1a3ac     A7 1A 02 FB | 	rdlong	arg05, fp
1a3b0     1C 4E 85 F1 | 	sub	fp, #28
1a3b4     50 3E B0 FD | 	call	#__system__disassemble_0381
1a3b8     38 00 90 FD | 	jmp	#LR__2334
1a3bc                 | LR__2333
1a3bc     0C 4E 05 F1 | 	add	fp, #12
1a3c0     A7 12 02 FB | 	rdlong	arg01, fp
1a3c4     08 4E 05 F1 | 	add	fp, #8
1a3c8     A7 14 02 F6 | 	mov	arg02, fp
1a3cc     0C 4E 05 F1 | 	add	fp, #12
1a3d0     A7 16 02 F6 | 	mov	arg03, fp
1a3d4     98 4E 05 F1 | 	add	fp, #152
1a3d8     A7 24 02 FB | 	rdlong	local04, fp
1a3dc     01 24 06 F1 | 	add	local04, #1
1a3e0     12 19 62 F6 | 	neg	arg04, local04
1a3e4     9C 4E 85 F1 | 	sub	fp, #156
1a3e8     A7 1A 02 FB | 	rdlong	arg05, fp
1a3ec     1C 4E 85 F1 | 	sub	fp, #28
1a3f0     14 3E B0 FD | 	call	#__system__disassemble_0381
1a3f4                 | LR__2334
1a3f4                 | LR__2335
1a3f4     1C 4E 05 F1 | 	add	fp, #28
1a3f8     A7 1E 02 FB | 	rdlong	local01, fp
1a3fc     1C 4E 85 F1 | 	sub	fp, #28
1a400     02 1E 0E F2 | 	cmp	local01, #2 wz
1a404     4C 00 90 5D |  if_ne	jmp	#LR__2338
1a408     1C 4E 05 F1 | 	add	fp, #28
1a40c     A7 20 68 FC | 	wrlong	#16, fp
1a410     1C 4E 85 F1 | 	sub	fp, #28
1a414                 | LR__2336
1a414     14 4E 05 F1 | 	add	fp, #20
1a418     A7 1E 0A FB | 	rdlong	local01, fp wz
1a41c     14 4E 85 F1 | 	sub	fp, #20
1a420     30 00 90 AD |  if_e	jmp	#LR__2337
1a424     14 4E 05 F1 | 	add	fp, #20
1a428     A7 22 02 FB | 	rdlong	local03, fp
1a42c     14 4E 85 F1 | 	sub	fp, #20
1a430     00 80 00 FF 
1a434     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1a438     18 00 90 3D |  if_ae	jmp	#LR__2337
1a43c     14 4E 05 F1 | 	add	fp, #20
1a440     A7 1E 02 FB | 	rdlong	local01, fp
1a444     01 1E 66 F0 | 	shl	local01, #1
1a448     A7 1E 62 FC | 	wrlong	local01, fp
1a44c     14 4E 85 F1 | 	sub	fp, #20
1a450     C0 FF 9F FD | 	jmp	#LR__2336
1a454                 | LR__2337
1a454                 | LR__2338
1a454     70 4E 05 F1 | 	add	fp, #112
1a458     A7 12 02 F6 | 	mov	arg01, fp
1a45c     5C 4E 85 F1 | 	sub	fp, #92
1a460     A7 14 02 FB | 	rdlong	arg02, fp
1a464     08 4E 05 F1 | 	add	fp, #8
1a468     A7 16 02 FB | 	rdlong	arg03, fp
1a46c     A0 4E 05 F1 | 	add	fp, #160
1a470     A7 1A 02 FB | 	rdlong	arg05, fp
1a474     BC 4E 85 F1 | 	sub	fp, #188
1a478     01 18 06 F6 | 	mov	arg04, #1
1a47c     14 3D B0 FD | 	call	#__system___uitoa
1a480     58 4E 05 F1 | 	add	fp, #88
1a484     A7 FA 61 FC | 	wrlong	result1, fp
1a488     38 4E 85 F1 | 	sub	fp, #56
1a48c     A7 1E 02 FB | 	rdlong	local01, fp
1a490     20 4E 85 F1 | 	sub	fp, #32
1a494     00 1E 56 F2 | 	cmps	local01, #0 wc
1a498     50 00 90 3D |  if_ae	jmp	#LR__2339
1a49c     60 4E 05 F1 | 	add	fp, #96
1a4a0     A7 5A 68 FC | 	wrlong	#45, fp
1a4a4     50 4E 05 F1 | 	add	fp, #80
1a4a8     A7 12 02 F6 | 	mov	arg01, fp
1a4ac     90 4E 85 F1 | 	sub	fp, #144
1a4b0     A7 22 02 FB | 	rdlong	local03, fp
1a4b4     11 15 62 F6 | 	neg	arg02, local03
1a4b8     18 4E 05 F1 | 	add	fp, #24
1a4bc     A7 18 02 FB | 	rdlong	arg04, fp
1a4c0     84 4E 05 F1 | 	add	fp, #132
1a4c4     A7 28 02 FB | 	rdlong	local06, fp
1a4c8     BC 4E 85 F1 | 	sub	fp, #188
1a4cc     14 25 02 F6 | 	mov	local04, local06
1a4d0     0A 16 06 F6 | 	mov	arg03, #10
1a4d4     12 1B 02 F6 | 	mov	arg05, local04
1a4d8     B8 3C B0 FD | 	call	#__system___uitoa
1a4dc     5C 4E 05 F1 | 	add	fp, #92
1a4e0     A7 FA 61 FC | 	wrlong	result1, fp
1a4e4     5C 4E 85 F1 | 	sub	fp, #92
1a4e8     48 00 90 FD | 	jmp	#LR__2340
1a4ec                 | LR__2339
1a4ec     60 4E 05 F1 | 	add	fp, #96
1a4f0     A7 56 68 FC | 	wrlong	#43, fp
1a4f4     50 4E 05 F1 | 	add	fp, #80
1a4f8     A7 12 02 F6 | 	mov	arg01, fp
1a4fc     90 4E 85 F1 | 	sub	fp, #144
1a500     A7 14 02 FB | 	rdlong	arg02, fp
1a504     18 4E 05 F1 | 	add	fp, #24
1a508     A7 18 02 FB | 	rdlong	arg04, fp
1a50c     84 4E 05 F1 | 	add	fp, #132
1a510     A7 28 02 FB | 	rdlong	local06, fp
1a514     BC 4E 85 F1 | 	sub	fp, #188
1a518     14 25 02 F6 | 	mov	local04, local06
1a51c     0A 16 06 F6 | 	mov	arg03, #10
1a520     12 1B 02 F6 | 	mov	arg05, local04
1a524     6C 3C B0 FD | 	call	#__system___uitoa
1a528     5C 4E 05 F1 | 	add	fp, #92
1a52c     A7 FA 61 FC | 	wrlong	result1, fp
1a530     5C 4E 85 F1 | 	sub	fp, #92
1a534                 | LR__2340
1a534     24 4E 05 F1 | 	add	fp, #36
1a538     A7 1E 0A FB | 	rdlong	local01, fp wz
1a53c     24 4E 85 F1 | 	sub	fp, #36
1a540     2C 00 90 AD |  if_e	jmp	#LR__2341
1a544     50 4E 05 F1 | 	add	fp, #80
1a548     A7 00 68 FC | 	wrlong	#0, fp
1a54c     04 4E 85 F1 | 	sub	fp, #4
1a550     A7 00 68 FC | 	wrlong	#0, fp
1a554     6C 4E 05 F1 | 	add	fp, #108
1a558     A7 1E 02 FB | 	rdlong	local01, fp
1a55c     01 1E 06 F1 | 	add	local01, #1
1a560     64 4E 85 F1 | 	sub	fp, #100
1a564     A7 1E 62 FC | 	wrlong	local01, fp
1a568     54 4E 85 F1 | 	sub	fp, #84
1a56c     88 00 90 FD | 	jmp	#LR__2344
1a570                 | LR__2341
1a570     20 4E 05 F1 | 	add	fp, #32
1a574     A7 1E 02 FB | 	rdlong	local01, fp
1a578     20 4E 85 F1 | 	sub	fp, #32
1a57c     00 1E 56 F2 | 	cmps	local01, #0 wc
1a580     40 00 90 3D |  if_ae	jmp	#LR__2342
1a584     20 4E 05 F1 | 	add	fp, #32
1a588     A7 20 02 FB | 	rdlong	local02, fp
1a58c     30 4E 05 F1 | 	add	fp, #48
1a590     A7 20 62 FC | 	wrlong	local02, fp
1a594     04 4E 85 F1 | 	sub	fp, #4
1a598     A7 20 62 FC | 	wrlong	local02, fp
1a59c     2C 4E 85 F1 | 	sub	fp, #44
1a5a0     A7 1E 02 FB | 	rdlong	local01, fp
1a5a4     98 4E 05 F1 | 	add	fp, #152
1a5a8     A7 22 02 FB | 	rdlong	local03, fp
1a5ac     11 1F 02 F1 | 	add	local01, local03
1a5b0     01 1E 06 F1 | 	add	local01, #1
1a5b4     64 4E 85 F1 | 	sub	fp, #100
1a5b8     A7 1E 62 FC | 	wrlong	local01, fp
1a5bc     54 4E 85 F1 | 	sub	fp, #84
1a5c0     34 00 90 FD | 	jmp	#LR__2343
1a5c4                 | LR__2342
1a5c4     4C 4E 05 F1 | 	add	fp, #76
1a5c8     A7 00 68 FC | 	wrlong	#0, fp
1a5cc     2C 4E 85 F1 | 	sub	fp, #44
1a5d0     A7 1E 02 FB | 	rdlong	local01, fp
1a5d4     30 4E 05 F1 | 	add	fp, #48
1a5d8     A7 1E 62 FC | 	wrlong	local01, fp
1a5dc     68 4E 05 F1 | 	add	fp, #104
1a5e0     A7 22 02 FB | 	rdlong	local03, fp
1a5e4     11 1F 02 F1 | 	add	local01, local03
1a5e8     01 1E 06 F1 | 	add	local01, #1
1a5ec     64 4E 85 F1 | 	sub	fp, #100
1a5f0     A7 1E 62 FC | 	wrlong	local01, fp
1a5f4     54 4E 85 F1 | 	sub	fp, #84
1a5f8                 | LR__2343
1a5f8                 | LR__2344
1a5f8     54 4E 05 F1 | 	add	fp, #84
1a5fc     A7 1E 02 FB | 	rdlong	local01, fp
1a600     08 4E 85 F1 | 	sub	fp, #8
1a604     A7 22 02 FB | 	rdlong	local03, fp
1a608     11 1F 82 F1 | 	sub	local01, local03
1a60c     01 1E 06 F1 | 	add	local01, #1
1a610     24 4E 85 F1 | 	sub	fp, #36
1a614     A7 1E 62 FC | 	wrlong	local01, fp
1a618     04 4E 05 F1 | 	add	fp, #4
1a61c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a620     2C 4E 85 F1 | 	sub	fp, #44
1a624     28 4E 05 51 |  if_ne	add	fp, #40
1a628     A7 22 02 5B |  if_ne	rdlong	local03, fp
1a62c     01 22 06 51 |  if_ne	add	local03, #1
1a630     A7 22 62 5C |  if_ne	wrlong	local03, fp
1a634     28 4E 85 51 |  if_ne	sub	fp, #40
1a638     1C 4E 05 F1 | 	add	fp, #28
1a63c     A7 1E 02 FB | 	rdlong	local01, fp
1a640     1C 4E 85 F1 | 	sub	fp, #28
1a644     10 1E 0E F2 | 	cmp	local01, #16 wz
1a648     28 4E 05 A1 |  if_e	add	fp, #40
1a64c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a650     02 1E 06 A1 |  if_e	add	local01, #2
1a654     A7 1E 62 AC |  if_e	wrlong	local01, fp
1a658     28 4E 85 A1 |  if_e	sub	fp, #40
1a65c     24 4E 05 F1 | 	add	fp, #36
1a660     A7 1E 0A FB | 	rdlong	local01, fp wz
1a664     24 4E 85 F1 | 	sub	fp, #36
1a668     28 00 90 AD |  if_e	jmp	#LR__2345
1a66c     28 4E 05 F1 | 	add	fp, #40
1a670     A7 1E 02 FB | 	rdlong	local01, fp
1a674     02 22 06 F6 | 	mov	local03, #2
1a678     34 4E 05 F1 | 	add	fp, #52
1a67c     A7 26 02 FB | 	rdlong	local05, fp
1a680     13 23 02 F1 | 	add	local03, local05
1a684     11 1F 02 F1 | 	add	local01, local03
1a688     34 4E 85 F1 | 	sub	fp, #52
1a68c     A7 1E 62 FC | 	wrlong	local01, fp
1a690     28 4E 85 F1 | 	sub	fp, #40
1a694                 | LR__2345
1a694     28 4E 05 F1 | 	add	fp, #40
1a698     A7 1E 02 FB | 	rdlong	local01, fp
1a69c     28 4E 85 F1 | 	sub	fp, #40
1a6a0     41 1E 56 F2 | 	cmps	local01, #65 wc
1a6a4     01 FA 65 36 |  if_ae	neg	result1, #1
1a6a8     08 05 90 3D |  if_ae	jmp	#LR__2373
1a6ac     3C 4E 05 F1 | 	add	fp, #60
1a6b0     A7 1E 0A FB | 	rdlong	local01, fp wz
1a6b4     3C 4E 85 F1 | 	sub	fp, #60
1a6b8     60 00 90 AD |  if_e	jmp	#LR__2346
1a6bc     C0 4E 05 F1 | 	add	fp, #192
1a6c0     A7 12 02 FB | 	rdlong	arg01, fp
1a6c4     94 4E 85 F1 | 	sub	fp, #148
1a6c8     A7 14 02 FB | 	rdlong	arg02, fp
1a6cc     14 4E 05 F1 | 	add	fp, #20
1a6d0     A7 16 02 FB | 	rdlong	arg03, fp
1a6d4     40 4E 85 F1 | 	sub	fp, #64
1a6d8     20 3D B0 FD | 	call	#__system__emitsign_0383
1a6dc     18 4F 05 F1 | 	add	fp, #280
1a6e0     A7 FA 61 FC | 	wrlong	result1, fp
1a6e4     18 4F 85 F1 | 	sub	fp, #280
1a6e8     00 FA 55 F2 | 	cmps	result1, #0 wc
1a6ec     18 4F 05 C1 |  if_b	add	fp, #280
1a6f0     A7 FA 01 CB |  if_b	rdlong	result1, fp
1a6f4     18 4F 85 C1 |  if_b	sub	fp, #280
1a6f8     B8 04 90 CD |  if_b	jmp	#LR__2373
1a6fc     C0 4E 05 F1 | 	add	fp, #192
1a700     A7 1E 02 FB | 	rdlong	local01, fp
1a704     58 4E 05 F1 | 	add	fp, #88
1a708     A7 22 02 FB | 	rdlong	local03, fp
1a70c     11 1F 02 F1 | 	add	local01, local03
1a710     58 4E 85 F1 | 	sub	fp, #88
1a714     A7 1E 62 FC | 	wrlong	local01, fp
1a718     C0 4E 85 F1 | 	sub	fp, #192
1a71c                 | LR__2346
1a71c     4C 4E 05 F1 | 	add	fp, #76
1a720     A7 1E 02 FB | 	rdlong	local01, fp
1a724     34 4E 85 F1 | 	sub	fp, #52
1a728     A7 1E 62 FC | 	wrlong	local01, fp
1a72c     18 4E 85 F1 | 	sub	fp, #24
1a730     97 9E 48 FB | 	callpa	#(@LR__2352-@LR__2347)>>2,fcache_load_ptr_
1a734                 | LR__2347
1a734     18 4E 05 F1 | 	add	fp, #24
1a738     A7 20 02 FB | 	rdlong	local02, fp
1a73c     3C 4E 05 F1 | 	add	fp, #60
1a740     A7 26 02 FB | 	rdlong	local05, fp
1a744     54 4E 85 F1 | 	sub	fp, #84
1a748     13 21 52 F2 | 	cmps	local02, local05 wc
1a74c     20 01 90 3D |  if_ae	jmp	#LR__2353
1a750     18 4E 05 F1 | 	add	fp, #24
1a754     A7 28 02 FB | 	rdlong	local06, fp
1a758     18 4E 85 F1 | 	sub	fp, #24
1a75c     00 28 56 F2 | 	cmps	local06, #0 wc
1a760     58 00 90 CD |  if_b	jmp	#LR__2348
1a764     18 4E 05 F1 | 	add	fp, #24
1a768     A7 28 02 FB | 	rdlong	local06, fp
1a76c     40 4E 05 F1 | 	add	fp, #64
1a770     A7 2A 02 FB | 	rdlong	local07, fp
1a774     58 4E 85 F1 | 	sub	fp, #88
1a778     15 29 52 F2 | 	cmps	local06, local07 wc
1a77c     3C 00 90 3D |  if_ae	jmp	#LR__2348
1a780     C0 4E 05 F1 | 	add	fp, #192
1a784     A7 2C 02 FB | 	rdlong	local08, fp
1a788     16 2B 02 F6 | 	mov	local07, local08
1a78c     01 2A 06 F1 | 	add	local07, #1
1a790     A7 2A 62 FC | 	wrlong	local07, fp
1a794     A8 4E 85 F1 | 	sub	fp, #168
1a798     A7 2A 02 FB | 	rdlong	local07, fp
1a79c     15 2F 02 F6 | 	mov	local09, local07
1a7a0     58 4E 05 F1 | 	add	fp, #88
1a7a4     A7 30 02 F6 | 	mov	local10, fp
1a7a8     A7 2E 02 F1 | 	add	local09, fp
1a7ac     17 33 C2 FA | 	rdbyte	local11, local09
1a7b0     16 33 42 FC | 	wrbyte	local11, local08
1a7b4     70 4E 85 F1 | 	sub	fp, #112
1a7b8     20 00 90 FD | 	jmp	#LR__2349
1a7bc                 | LR__2348
1a7bc     C0 4E 05 F1 | 	add	fp, #192
1a7c0     A7 2C 02 FB | 	rdlong	local08, fp
1a7c4     16 2F 02 F6 | 	mov	local09, local08
1a7c8     01 2E 06 F1 | 	add	local09, #1
1a7cc     A7 2E 62 FC | 	wrlong	local09, fp
1a7d0     C0 4E 85 F1 | 	sub	fp, #192
1a7d4     30 2E 06 F6 | 	mov	local09, #48
1a7d8     16 61 48 FC | 	wrbyte	#48, local08
1a7dc                 | LR__2349
1a7dc     18 4E 05 F1 | 	add	fp, #24
1a7e0     A7 28 02 FB | 	rdlong	local06, fp
1a7e4     38 4E 05 F1 | 	add	fp, #56
1a7e8     A7 34 02 FB | 	rdlong	local12, fp
1a7ec     50 4E 85 F1 | 	sub	fp, #80
1a7f0     1A 29 0A F2 | 	cmp	local06, local12 wz
1a7f4     5C 00 90 5D |  if_ne	jmp	#LR__2351
1a7f8     10 4F 05 F1 | 	add	fp, #272
1a7fc     A7 2A 02 FB | 	rdlong	local07, fp
1a800     10 4F 85 F1 | 	sub	fp, #272
1a804     15 2F 0A F6 | 	mov	local09, local07 wz
1a808     28 00 90 5D |  if_ne	jmp	#LR__2350
1a80c     54 4E 05 F1 | 	add	fp, #84
1a810     A7 32 02 FB | 	rdlong	local11, fp
1a814     19 31 02 F6 | 	mov	local10, local11
1a818     01 30 86 F1 | 	sub	local10, #1
1a81c     3C 4E 85 F1 | 	sub	fp, #60
1a820     A7 36 02 FB | 	rdlong	local13, fp
1a824     18 4E 85 F1 | 	sub	fp, #24
1a828     1B 39 02 F6 | 	mov	local14, local13
1a82c     18 39 52 F2 | 	cmps	local14, local10 wc
1a830     20 00 90 3D |  if_ae	jmp	#LR__2351
1a834                 | LR__2350
1a834     C0 4E 05 F1 | 	add	fp, #192
1a838     A7 2C 02 FB | 	rdlong	local08, fp
1a83c     16 35 02 F6 | 	mov	local12, local08
1a840     01 34 06 F1 | 	add	local12, #1
1a844     A7 34 62 FC | 	wrlong	local12, fp
1a848     C0 4E 85 F1 | 	sub	fp, #192
1a84c     2E 2E 06 F6 | 	mov	local09, #46
1a850     16 5D 48 FC | 	wrbyte	#46, local08
1a854                 | LR__2351
1a854     18 4E 05 F1 | 	add	fp, #24
1a858     A7 3A 02 FB | 	rdlong	local15, fp
1a85c     1D 35 02 F6 | 	mov	local12, local15
1a860     01 34 06 F1 | 	add	local12, #1
1a864     A7 34 62 FC | 	wrlong	local12, fp
1a868     18 4E 85 F1 | 	sub	fp, #24
1a86c     C4 FE 9F FD | 	jmp	#LR__2347
1a870                 | LR__2352
1a870                 | LR__2353
1a870     34 4E 05 F1 | 	add	fp, #52
1a874     A7 1E 0A FB | 	rdlong	local01, fp wz
1a878     34 4E 85 F1 | 	sub	fp, #52
1a87c     A0 00 90 AD |  if_e	jmp	#LR__2357
1a880     C0 4E 05 F1 | 	add	fp, #192
1a884     A7 1E 02 FB | 	rdlong	local01, fp
1a888     01 1E 86 F1 | 	sub	local01, #1
1a88c     A7 1E 62 FC | 	wrlong	local01, fp
1a890     C0 4E 85 F1 | 	sub	fp, #192
1a894     97 26 48 FB | 	callpa	#(@LR__2355-@LR__2354)>>2,fcache_load_ptr_
1a898                 | LR__2354
1a898     C0 4E 05 F1 | 	add	fp, #192
1a89c     A7 1E 02 FB | 	rdlong	local01, fp
1a8a0     04 4E 05 F1 | 	add	fp, #4
1a8a4     A7 22 02 FB | 	rdlong	local03, fp
1a8a8     C4 4E 85 F1 | 	sub	fp, #196
1a8ac     11 1F 5A F2 | 	cmps	local01, local03 wcz
1a8b0     30 00 90 ED |  if_be	jmp	#LR__2356
1a8b4     C0 4E 05 F1 | 	add	fp, #192
1a8b8     A7 28 02 FB | 	rdlong	local06, fp
1a8bc     C0 4E 85 F1 | 	sub	fp, #192
1a8c0     14 25 C2 FA | 	rdbyte	local04, local06
1a8c4     30 24 0E F2 | 	cmp	local04, #48 wz
1a8c8     18 00 90 5D |  if_ne	jmp	#LR__2356
1a8cc     C0 4E 05 F1 | 	add	fp, #192
1a8d0     A7 1E 02 FB | 	rdlong	local01, fp
1a8d4     01 1E 86 F1 | 	sub	local01, #1
1a8d8     A7 1E 62 FC | 	wrlong	local01, fp
1a8dc     C0 4E 85 F1 | 	sub	fp, #192
1a8e0     B4 FF 9F FD | 	jmp	#LR__2354
1a8e4                 | LR__2355
1a8e4                 | LR__2356
1a8e4     C0 4E 05 F1 | 	add	fp, #192
1a8e8     A7 20 02 FB | 	rdlong	local02, fp
1a8ec     C0 4E 85 F1 | 	sub	fp, #192
1a8f0     10 1F C2 FA | 	rdbyte	local01, local02
1a8f4     2E 1E 0E F2 | 	cmp	local01, #46 wz
1a8f8     C0 4E 05 A1 |  if_e	add	fp, #192
1a8fc     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a900     01 1E 86 A1 |  if_e	sub	local01, #1
1a904     A7 1E 62 AC |  if_e	wrlong	local01, fp
1a908     C0 4E 85 A1 |  if_e	sub	fp, #192
1a90c     C0 4E 05 F1 | 	add	fp, #192
1a910     A7 22 02 FB | 	rdlong	local03, fp
1a914     01 22 06 F1 | 	add	local03, #1
1a918     A7 22 62 FC | 	wrlong	local03, fp
1a91c     C0 4E 85 F1 | 	sub	fp, #192
1a920                 | LR__2357
1a920     24 4E 05 F1 | 	add	fp, #36
1a924     A7 1E 0A FB | 	rdlong	local01, fp wz
1a928     24 4E 85 F1 | 	sub	fp, #36
1a92c     B4 00 90 AD |  if_e	jmp	#LR__2360
1a930     C0 4E 05 F1 | 	add	fp, #192
1a934     A7 20 02 FB | 	rdlong	local02, fp
1a938     10 23 02 F6 | 	mov	local03, local02
1a93c     01 22 06 F1 | 	add	local03, #1
1a940     A7 22 62 FC | 	wrlong	local03, fp
1a944     90 4E 85 F1 | 	sub	fp, #144
1a948     A7 24 02 FB | 	rdlong	local04, fp
1a94c     10 25 42 FC | 	wrbyte	local04, local02
1a950     90 4E 05 F1 | 	add	fp, #144
1a954     A7 20 02 FB | 	rdlong	local02, fp
1a958     10 23 02 F6 | 	mov	local03, local02
1a95c     01 22 06 F1 | 	add	local03, #1
1a960     A7 22 62 FC | 	wrlong	local03, fp
1a964     60 4E 85 F1 | 	sub	fp, #96
1a968     A7 24 02 FB | 	rdlong	local04, fp
1a96c     10 25 42 FC | 	wrbyte	local04, local02
1a970     48 4E 85 F1 | 	sub	fp, #72
1a974     A7 00 68 FC | 	wrlong	#0, fp
1a978     18 4E 85 F1 | 	sub	fp, #24
1a97c                 | LR__2358
1a97c     18 4E 05 F1 | 	add	fp, #24
1a980     A7 20 02 FB | 	rdlong	local02, fp
1a984     44 4E 05 F1 | 	add	fp, #68
1a988     A7 26 02 FB | 	rdlong	local05, fp
1a98c     5C 4E 85 F1 | 	sub	fp, #92
1a990     13 21 52 F2 | 	cmps	local02, local05 wc
1a994     4C 00 90 3D |  if_ae	jmp	#LR__2359
1a998     C0 4E 05 F1 | 	add	fp, #192
1a99c     A7 2C 02 FB | 	rdlong	local08, fp
1a9a0     16 35 02 F6 | 	mov	local12, local08
1a9a4     01 34 06 F1 | 	add	local12, #1
1a9a8     A7 34 62 FC | 	wrlong	local12, fp
1a9ac     A8 4E 85 F1 | 	sub	fp, #168
1a9b0     A7 2A 02 FB | 	rdlong	local07, fp
1a9b4     15 2F 02 F6 | 	mov	local09, local07
1a9b8     98 4E 05 F1 | 	add	fp, #152
1a9bc     A7 30 02 F6 | 	mov	local10, fp
1a9c0     A7 2E 02 F1 | 	add	local09, fp
1a9c4     17 33 C2 FA | 	rdbyte	local11, local09
1a9c8     16 33 42 FC | 	wrbyte	local11, local08
1a9cc     98 4E 85 F1 | 	sub	fp, #152
1a9d0     A7 34 02 FB | 	rdlong	local12, fp
1a9d4     01 34 06 F1 | 	add	local12, #1
1a9d8     A7 34 62 FC | 	wrlong	local12, fp
1a9dc     18 4E 85 F1 | 	sub	fp, #24
1a9e0     98 FF 9F FD | 	jmp	#LR__2358
1a9e4                 | LR__2359
1a9e4                 | LR__2360
1a9e4     C0 4E 05 F1 | 	add	fp, #192
1a9e8     A7 1E 02 FB | 	rdlong	local01, fp
1a9ec     C0 4E 85 F1 | 	sub	fp, #192
1a9f0     0F 01 48 FC | 	wrbyte	#0, local01
1a9f4                 | LR__2361
1a9f4     6C 4E 05 F1 | 	add	fp, #108
1a9f8     A7 1E 0A FB | 	rdlong	local01, fp wz
1a9fc     6C 4E 85 F1 | 	sub	fp, #108
1aa00     90 01 90 AD |  if_e	jmp	#LR__2372
1aa04     48 4E 05 F1 | 	add	fp, #72
1aa08     A7 22 0A FB | 	rdlong	local03, fp wz
1aa0c     48 4E 85 F1 | 	sub	fp, #72
1aa10     80 01 90 AD |  if_e	jmp	#LR__2372
1aa14     C4 4E 05 F1 | 	add	fp, #196
1aa18     A7 12 02 FB | 	rdlong	arg01, fp
1aa1c     C4 4E 85 F1 | 	sub	fp, #196
1aa20     09 3D 02 F6 | 	mov	local16, arg01
1aa24     97 06 48 FB | 	callpa	#(@LR__2363-@LR__2362)>>2,fcache_load_ptr_
1aa28                 | LR__2362
1aa28     1E FB C9 FA | 	rdbyte	result1, local16 wz
1aa2c     01 3C 06 51 |  if_ne	add	local16, #1
1aa30     F4 FF 9F 5D |  if_ne	jmp	#LR__2362
1aa34                 | LR__2363
1aa34     09 3D 82 F1 | 	sub	local16, arg01
1aa38     1E 25 02 F6 | 	mov	local04, local16
1aa3c     6C 4E 05 F1 | 	add	fp, #108
1aa40     A7 28 02 FB | 	rdlong	local06, fp
1aa44     6C 4E 85 F1 | 	sub	fp, #108
1aa48     14 25 5A F2 | 	cmps	local04, local06 wcz
1aa4c     44 01 90 ED |  if_be	jmp	#LR__2372
1aa50     C4 4E 05 F1 | 	add	fp, #196
1aa54     A7 1E 02 FB | 	rdlong	local01, fp
1aa58     5C 4E 05 F1 | 	add	fp, #92
1aa5c     A7 1E 62 FC | 	wrlong	local01, fp
1aa60     FC 4E 85 F1 | 	sub	fp, #252
1aa64     A7 1E 0A FB | 	rdlong	local01, fp wz
1aa68     24 4E 85 F1 | 	sub	fp, #36
1aa6c     20 00 90 AD |  if_e	jmp	#LR__2364
1aa70     B8 4E 05 F1 | 	add	fp, #184
1aa74     A7 00 68 FC | 	wrlong	#0, fp
1aa78     4C 4E 85 F1 | 	sub	fp, #76
1aa7c     A7 1E 02 FB | 	rdlong	local01, fp
1aa80     B0 4E 05 F1 | 	add	fp, #176
1aa84     A7 1E 62 FC | 	wrlong	local01, fp
1aa88     1C 4F 85 F1 | 	sub	fp, #284
1aa8c     24 00 90 FD | 	jmp	#LR__2365
1aa90                 | LR__2364
1aa90     6C 4E 05 F1 | 	add	fp, #108
1aa94     A7 1E 02 FB | 	rdlong	local01, fp
1aa98     01 1E 86 F1 | 	sub	local01, #1
1aa9c     4C 4E 05 F1 | 	add	fp, #76
1aaa0     A7 22 02 FB | 	rdlong	local03, fp
1aaa4     11 1F 82 F1 | 	sub	local01, local03
1aaa8     64 4E 05 F1 | 	add	fp, #100
1aaac     A7 1E 62 FC | 	wrlong	local01, fp
1aab0     1C 4F 85 F1 | 	sub	fp, #284
1aab4                 | LR__2365
1aab4     97 20 48 FB | 	callpa	#(@LR__2367-@LR__2366)>>2,fcache_load_ptr_
1aab8                 | LR__2366
1aab8     1C 4F 05 F1 | 	add	fp, #284
1aabc     A7 1E 0A FB | 	rdlong	local01, fp wz
1aac0     1C 4F 85 F1 | 	sub	fp, #284
1aac4     30 00 90 AD |  if_e	jmp	#LR__2368
1aac8     20 4F 05 F1 | 	add	fp, #288
1aacc     A7 20 02 FB | 	rdlong	local02, fp
1aad0     10 23 02 F6 | 	mov	local03, local02
1aad4     01 22 06 F1 | 	add	local03, #1
1aad8     A7 22 62 FC | 	wrlong	local03, fp
1aadc     10 55 48 FC | 	wrbyte	#42, local02
1aae0     04 4E 85 F1 | 	sub	fp, #4
1aae4     A7 1E 02 FB | 	rdlong	local01, fp
1aae8     01 1E 86 F1 | 	sub	local01, #1
1aaec     A7 1E 62 FC | 	wrlong	local01, fp
1aaf0     1C 4F 85 F1 | 	sub	fp, #284
1aaf4     C0 FF 9F FD | 	jmp	#LR__2366
1aaf8                 | LR__2367
1aaf8                 | LR__2368
1aaf8     B8 4E 05 F1 | 	add	fp, #184
1aafc     A7 1E 0A FB | 	rdlong	local01, fp wz
1ab00     B8 4E 85 F1 | 	sub	fp, #184
1ab04     70 00 90 AD |  if_e	jmp	#LR__2371
1ab08     20 4F 05 F1 | 	add	fp, #288
1ab0c     A7 20 02 FB | 	rdlong	local02, fp
1ab10     10 23 02 F6 | 	mov	local03, local02
1ab14     01 22 06 F1 | 	add	local03, #1
1ab18     A7 22 62 FC | 	wrlong	local03, fp
1ab1c     10 5D 48 FC | 	wrbyte	#46, local02
1ab20     04 4E 85 F1 | 	sub	fp, #4
1ab24     A7 00 68 FC | 	wrlong	#0, fp
1ab28     1C 4F 85 F1 | 	sub	fp, #284
1ab2c                 | LR__2369
1ab2c     1C 4F 05 F1 | 	add	fp, #284
1ab30     A7 20 02 FB | 	rdlong	local02, fp
1ab34     64 4E 85 F1 | 	sub	fp, #100
1ab38     A7 26 02 FB | 	rdlong	local05, fp
1ab3c     B8 4E 85 F1 | 	sub	fp, #184
1ab40     13 21 52 F2 | 	cmps	local02, local05 wc
1ab44     30 00 90 3D |  if_ae	jmp	#LR__2370
1ab48     20 4F 05 F1 | 	add	fp, #288
1ab4c     A7 2C 02 FB | 	rdlong	local08, fp
1ab50     16 35 02 F6 | 	mov	local12, local08
1ab54     01 34 06 F1 | 	add	local12, #1
1ab58     A7 34 62 FC | 	wrlong	local12, fp
1ab5c     16 55 48 FC | 	wrbyte	#42, local08
1ab60     04 4E 85 F1 | 	sub	fp, #4
1ab64     A7 34 02 FB | 	rdlong	local12, fp
1ab68     01 34 06 F1 | 	add	local12, #1
1ab6c     A7 34 62 FC | 	wrlong	local12, fp
1ab70     1C 4F 85 F1 | 	sub	fp, #284
1ab74     B4 FF 9F FD | 	jmp	#LR__2369
1ab78                 | LR__2370
1ab78                 | LR__2371
1ab78     20 4F 05 F1 | 	add	fp, #288
1ab7c     A7 20 02 FB | 	rdlong	local02, fp
1ab80     10 23 02 F6 | 	mov	local03, local02
1ab84     01 22 06 F1 | 	add	local03, #1
1ab88     A7 22 62 FC | 	wrlong	local03, fp
1ab8c     20 4F 85 F1 | 	sub	fp, #288
1ab90     10 01 48 FC | 	wrbyte	#0, local02
1ab94                 | LR__2372
1ab94     04 4E 05 F1 | 	add	fp, #4
1ab98     A7 12 02 FB | 	rdlong	arg01, fp
1ab9c     04 4E 05 F1 | 	add	fp, #4
1aba0     A7 14 02 FB | 	rdlong	arg02, fp
1aba4     BC 4E 05 F1 | 	add	fp, #188
1aba8     A7 16 02 FB | 	rdlong	arg03, fp
1abac     C4 4E 85 F1 | 	sub	fp, #196
1abb0     C4 EE BF FD | 	call	#__system___fmtstr
1abb4                 | LR__2373
1abb4     A7 F0 03 F6 | 	mov	ptra, fp
1abb8     B2 00 A0 FD | 	call	#popregs_
1abbc                 | __system___fmtfloat_ret
1abbc     2D 00 64 FD | 	ret
1abc0                 | 
1abc0                 | __system__Left_S
1abc0     04 4A 05 F6 | 	mov	COUNT_, #4
1abc4     A8 00 A0 FD | 	call	#pushregs_
1abc8     09 1F 02 F6 | 	mov	local01, arg01
1abcc     0A 21 02 F6 | 	mov	local02, arg02
1abd0     01 20 56 F2 | 	cmps	local02, #1 wc
1abd4     40 01 00 CF 
1abd8     C6 FA 05 C6 |  if_b	mov	result1, ##@LR__4253
1abdc     5C 00 90 CD |  if_b	jmp	#LR__2383
1abe0     0F 13 02 F6 | 	mov	arg01, local01
1abe4     09 23 02 F6 | 	mov	local03, arg01
1abe8     97 06 48 FB | 	callpa	#(@LR__2381-@LR__2380)>>2,fcache_load_ptr_
1abec                 | LR__2380
1abec     11 FB C9 FA | 	rdbyte	result1, local03 wz
1abf0     01 22 06 51 |  if_ne	add	local03, #1
1abf4     F4 FF 9F 5D |  if_ne	jmp	#LR__2380
1abf8                 | LR__2381
1abf8     09 23 82 F1 | 	sub	local03, arg01
1abfc     11 FB 01 F6 | 	mov	result1, local03
1ac00     10 FB 59 F2 | 	cmps	result1, local02 wcz
1ac04     0F FB 01 E6 |  if_be	mov	result1, local01
1ac08     30 00 90 ED |  if_be	jmp	#LR__2383
1ac0c     10 13 02 F6 | 	mov	arg01, local02
1ac10     02 12 06 F1 | 	add	arg01, #2
1ac14     50 1D B0 FD | 	call	#__system___gc_alloc_managed
1ac18     FD 24 0A F6 | 	mov	local04, result1 wz
1ac1c     18 00 90 AD |  if_e	jmp	#LR__2382
1ac20     12 13 02 F6 | 	mov	arg01, local04
1ac24     0F 15 02 F6 | 	mov	arg02, local01
1ac28     10 17 02 F6 | 	mov	arg03, local02
1ac2c     A0 DE BF FD | 	call	#__system____builtin_memmove
1ac30     12 21 02 F1 | 	add	local02, local04
1ac34     10 01 48 FC | 	wrbyte	#0, local02
1ac38                 | LR__2382
1ac38     12 FB 01 F6 | 	mov	result1, local04
1ac3c                 | LR__2383
1ac3c     A7 F0 03 F6 | 	mov	ptra, fp
1ac40     B2 00 A0 FD | 	call	#popregs_
1ac44                 | __system__Left_S_ret
1ac44     2D 00 64 FD | 	ret
1ac48                 | 
1ac48                 | __system__Right_S
1ac48     05 4A 05 F6 | 	mov	COUNT_, #5
1ac4c     A8 00 A0 FD | 	call	#pushregs_
1ac50     09 1F 02 F6 | 	mov	local01, arg01
1ac54     0A 21 02 F6 | 	mov	local02, arg02
1ac58     01 20 56 F2 | 	cmps	local02, #1 wc
1ac5c     40 01 00 CF 
1ac60     C7 FA 05 C6 |  if_b	mov	result1, ##@LR__4254
1ac64     64 00 90 CD |  if_b	jmp	#LR__2393
1ac68     0F 13 02 F6 | 	mov	arg01, local01
1ac6c     09 23 02 F6 | 	mov	local03, arg01
1ac70     97 06 48 FB | 	callpa	#(@LR__2391-@LR__2390)>>2,fcache_load_ptr_
1ac74                 | LR__2390
1ac74     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ac78     01 22 06 51 |  if_ne	add	local03, #1
1ac7c     F4 FF 9F 5D |  if_ne	jmp	#LR__2390
1ac80                 | LR__2391
1ac80     09 23 82 F1 | 	sub	local03, arg01
1ac84     11 FB 01 F6 | 	mov	result1, local03
1ac88     FD 24 02 F6 | 	mov	local04, result1
1ac8c     10 25 5A F2 | 	cmps	local04, local02 wcz
1ac90     0F FB 01 E6 |  if_be	mov	result1, local01
1ac94     34 00 90 ED |  if_be	jmp	#LR__2393
1ac98     10 13 02 F6 | 	mov	arg01, local02
1ac9c     02 12 06 F1 | 	add	arg01, #2
1aca0     C4 1C B0 FD | 	call	#__system___gc_alloc_managed
1aca4     FD 26 0A F6 | 	mov	local05, result1 wz
1aca8     1C 00 90 AD |  if_e	jmp	#LR__2392
1acac     10 25 82 F1 | 	sub	local04, local02
1acb0     0F 25 02 F1 | 	add	local04, local01
1acb4     01 20 06 F1 | 	add	local02, #1
1acb8     13 13 02 F6 | 	mov	arg01, local05
1acbc     12 15 02 F6 | 	mov	arg02, local04
1acc0     10 17 02 F6 | 	mov	arg03, local02
1acc4     08 DE BF FD | 	call	#__system____builtin_memmove
1acc8                 | LR__2392
1acc8     13 FB 01 F6 | 	mov	result1, local05
1accc                 | LR__2393
1accc     A7 F0 03 F6 | 	mov	ptra, fp
1acd0     B2 00 A0 FD | 	call	#popregs_
1acd4                 | __system__Right_S_ret
1acd4     2D 00 64 FD | 	ret
1acd8                 | 
1acd8                 | __system__Mid_S
1acd8     05 4A 05 F6 | 	mov	COUNT_, #5
1acdc     A8 00 A0 FD | 	call	#pushregs_
1ace0     09 1F 02 F6 | 	mov	local01, arg01
1ace4     0A 21 02 F6 | 	mov	local02, arg02
1ace8     01 16 56 F2 | 	cmps	arg03, #1 wc
1acec     40 01 00 CF 
1acf0     C8 FA 05 C6 |  if_b	mov	result1, ##@LR__4255
1acf4     80 00 90 CD |  if_b	jmp	#LR__2403
1acf8     01 20 86 F1 | 	sub	local02, #1
1acfc     00 20 56 F3 | 	fges	local02, #0 wc
1ad00     0F 13 02 F6 | 	mov	arg01, local01
1ad04     09 23 02 F6 | 	mov	local03, arg01
1ad08     97 06 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1ad0c                 | LR__2400
1ad0c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ad10     01 22 06 51 |  if_ne	add	local03, #1
1ad14     F4 FF 9F 5D |  if_ne	jmp	#LR__2400
1ad18                 | LR__2401
1ad18     09 23 82 F1 | 	sub	local03, arg01
1ad1c     11 FB 01 F6 | 	mov	result1, local03
1ad20     FD 14 02 F6 | 	mov	arg02, result1
1ad24     10 15 52 F2 | 	cmps	arg02, local02 wc
1ad28     40 01 00 CF 
1ad2c     C9 FA 05 C6 |  if_b	mov	result1, ##@LR__4256
1ad30     44 00 90 CD |  if_b	jmp	#LR__2403
1ad34     0A 25 02 F6 | 	mov	local04, arg02
1ad38     10 25 82 F1 | 	sub	local04, local02
1ad3c     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1ad40     0B 25 02 16 |  if_a	mov	local04, arg03
1ad44     12 13 02 F6 | 	mov	arg01, local04
1ad48     02 12 06 F1 | 	add	arg01, #2
1ad4c     18 1C B0 FD | 	call	#__system___gc_alloc_managed
1ad50     FD 26 0A F6 | 	mov	local05, result1 wz
1ad54     1C 00 90 AD |  if_e	jmp	#LR__2402
1ad58     0F 21 02 F1 | 	add	local02, local01
1ad5c     13 13 02 F6 | 	mov	arg01, local05
1ad60     10 15 02 F6 | 	mov	arg02, local02
1ad64     12 17 02 F6 | 	mov	arg03, local04
1ad68     64 DD BF FD | 	call	#__system____builtin_memmove
1ad6c     13 25 02 F1 | 	add	local04, local05
1ad70     12 01 48 FC | 	wrbyte	#0, local04
1ad74                 | LR__2402
1ad74     13 FB 01 F6 | 	mov	result1, local05
1ad78                 | LR__2403
1ad78     A7 F0 03 F6 | 	mov	ptra, fp
1ad7c     B2 00 A0 FD | 	call	#popregs_
1ad80                 | __system__Mid_S_ret
1ad80     2D 00 64 FD | 	ret
1ad84                 | 
1ad84                 | __system__Chr_S
1ad84     01 4A 05 F6 | 	mov	COUNT_, #1
1ad88     A8 00 A0 FD | 	call	#pushregs_
1ad8c     09 1F 02 F6 | 	mov	local01, arg01
1ad90     03 12 06 F6 | 	mov	arg01, #3
1ad94     D0 1B B0 FD | 	call	#__system___gc_alloc_managed
1ad98     00 FA 4D F2 | 	cmps	result1, #0 wz
1ad9c     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1ada0     01 FA 05 51 |  if_ne	add	result1, #1
1ada4     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1ada8     01 FA 85 51 |  if_ne	sub	result1, #1
1adac     A7 F0 03 F6 | 	mov	ptra, fp
1adb0     B2 00 A0 FD | 	call	#popregs_
1adb4                 | __system__Chr_S_ret
1adb4     2D 00 64 FD | 	ret
1adb8                 | 
1adb8                 | __system__Number_S
1adb8     08 4A 05 F6 | 	mov	COUNT_, #8
1adbc     A8 00 A0 FD | 	call	#pushregs_
1adc0     09 1F 02 F6 | 	mov	local01, arg01
1adc4     0A 21 0A F6 | 	mov	local02, arg02 wz
1adc8     0B 23 02 F6 | 	mov	local03, arg03
1adcc     3C 00 90 5D |  if_ne	jmp	#LR__2412
1add0     01 20 06 F6 | 	mov	local02, #1
1add4     11 25 02 F6 | 	mov	local04, local03
1add8     01 26 06 F6 | 	mov	local05, #1
1addc     97 16 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1ade0                 | LR__2410
1ade0     00 28 06 F6 | 	mov	local06, #0
1ade4     0F 25 1A F2 | 	cmp	local04, local01 wcz
1ade8     01 28 66 E6 |  if_be	neg	local06, #1
1adec     12 27 12 F2 | 	cmp	local05, local04 wc
1adf0     15 2B A2 F1 | 	subx	local07, local07
1adf4     15 29 CA F7 | 	test	local06, local07 wz
1adf8     11 25 02 5D |  if_ne	qmul	local04, local03
1adfc     12 27 02 56 |  if_ne	mov	local05, local04
1ae00     01 20 06 51 |  if_ne	add	local02, #1
1ae04     18 24 62 5D |  if_ne	getqx	local04
1ae08     D4 FF 9F 5D |  if_ne	jmp	#LR__2410
1ae0c                 | LR__2411
1ae0c                 | LR__2412
1ae0c     20 20 36 F3 | 	fle	local02, #32 wc
1ae10     10 13 02 F6 | 	mov	arg01, local02
1ae14     02 12 06 F1 | 	add	arg01, #2
1ae18     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
1ae1c     FD 28 02 F6 | 	mov	local06, result1
1ae20     10 2B 02 F6 | 	mov	local07, local02
1ae24     14 2B 02 F1 | 	add	local07, local06
1ae28     15 01 48 FC | 	wrbyte	#0, local07
1ae2c     97 1A 48 FB | 	callpa	#(@LR__2414-@LR__2413)>>2,fcache_load_ptr_
1ae30                 | LR__2413
1ae30     01 20 16 F2 | 	cmp	local02, #1 wc
1ae34     2C 00 90 CD |  if_b	jmp	#LR__2415
1ae38     11 1F 12 FD | 	qdiv	local01, local03
1ae3c     01 20 86 F1 | 	sub	local02, #1
1ae40     10 2B 02 F6 | 	mov	local07, local02
1ae44     14 2B 02 F1 | 	add	local07, local06
1ae48     19 2C 62 FD | 	getqy	local08
1ae4c     0A 2C 16 F2 | 	cmp	local08, #10 wc
1ae50     30 2C 06 C1 |  if_b	add	local08, #48
1ae54     37 2C 06 31 |  if_ae	add	local08, #55
1ae58     15 2D 42 FC | 	wrbyte	local08, local07
1ae5c     18 1E 62 FD | 	getqx	local01
1ae60     CC FF 9F FD | 	jmp	#LR__2413
1ae64                 | LR__2414
1ae64                 | LR__2415
1ae64     14 FB 01 F6 | 	mov	result1, local06
1ae68     A7 F0 03 F6 | 	mov	ptra, fp
1ae6c     B2 00 A0 FD | 	call	#popregs_
1ae70                 | __system__Number_S_ret
1ae70     2D 00 64 FD | 	ret
1ae74                 | 
1ae74                 | __system__LCase_S
1ae74     07 4A 05 F6 | 	mov	COUNT_, #7
1ae78     A8 00 A0 FD | 	call	#pushregs_
1ae7c     09 1F 02 F6 | 	mov	local01, arg01
1ae80     09 21 02 F6 | 	mov	local02, arg01
1ae84     97 06 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1ae88                 | LR__2420
1ae88     10 FB C9 FA | 	rdbyte	result1, local02 wz
1ae8c     01 20 06 51 |  if_ne	add	local02, #1
1ae90     F4 FF 9F 5D |  if_ne	jmp	#LR__2420
1ae94                 | LR__2421
1ae94     09 21 82 F1 | 	sub	local02, arg01
1ae98     10 FB 01 F6 | 	mov	result1, local02
1ae9c     FD 20 0A F6 | 	mov	local02, result1 wz
1aea0     40 01 00 AF 
1aea4     CA FA 05 A6 |  if_e	mov	result1, ##@LR__4257
1aea8     7C 00 90 AD |  if_e	jmp	#LR__2427
1aeac     10 13 02 F6 | 	mov	arg01, local02
1aeb0     02 12 06 F1 | 	add	arg01, #2
1aeb4     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
1aeb8     FD 22 0A F6 | 	mov	local03, result1 wz
1aebc     64 00 90 AD |  if_e	jmp	#LR__2426
1aec0     01 24 66 F6 | 	neg	local04, #1
1aec4     97 26 48 FB | 	callpa	#(@LR__2425-@LR__2422)>>2,fcache_load_ptr_
1aec8                 | LR__2422
1aec8     01 24 06 F1 | 	add	local04, #1
1aecc     12 27 02 F6 | 	mov	local05, local04
1aed0     0F 27 02 F1 | 	add	local05, local01
1aed4     13 29 C2 FA | 	rdbyte	local06, local05
1aed8     41 28 56 F2 | 	cmps	local06, #65 wc
1aedc     18 00 90 CD |  if_b	jmp	#LR__2423
1aee0     5B 28 56 F2 | 	cmps	local06, #91 wc
1aee4     12 2B 02 C6 |  if_b	mov	local07, local04
1aee8     11 2B 02 C1 |  if_b	add	local07, local03
1aeec     20 28 06 C1 |  if_b	add	local06, #32
1aef0     15 29 42 CC |  if_b	wrbyte	local06, local07
1aef4     0C 00 90 CD |  if_b	jmp	#LR__2424
1aef8                 | LR__2423
1aef8     12 2B 02 F6 | 	mov	local07, local04
1aefc     11 2B 02 F1 | 	add	local07, local03
1af00     15 29 42 FC | 	wrbyte	local06, local07
1af04                 | LR__2424
1af04     10 29 02 F6 | 	mov	local06, local02
1af08     01 28 86 F1 | 	sub	local06, #1
1af0c     14 25 0A F2 | 	cmp	local04, local06 wz
1af10     B4 FF 9F 5D |  if_ne	jmp	#LR__2422
1af14                 | LR__2425
1af14     11 21 02 F1 | 	add	local02, local03
1af18     10 01 48 FC | 	wrbyte	#0, local02
1af1c     11 FB 01 F6 | 	mov	result1, local03
1af20     04 00 90 FD | 	jmp	#LR__2427
1af24                 | LR__2426
1af24     11 FB 01 F6 | 	mov	result1, local03
1af28                 | LR__2427
1af28     A7 F0 03 F6 | 	mov	ptra, fp
1af2c     B2 00 A0 FD | 	call	#popregs_
1af30                 | __system__LCase_S_ret
1af30     2D 00 64 FD | 	ret
1af34                 | 
1af34                 | __system__LTrim_S
1af34     05 4A 05 F6 | 	mov	COUNT_, #5
1af38     A8 00 A0 FD | 	call	#pushregs_
1af3c     09 1F 02 F6 | 	mov	local01, arg01
1af40     09 21 02 F6 | 	mov	local02, arg01
1af44     97 06 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1af48                 | LR__2430
1af48     10 FB C9 FA | 	rdbyte	result1, local02 wz
1af4c     01 20 06 51 |  if_ne	add	local02, #1
1af50     F4 FF 9F 5D |  if_ne	jmp	#LR__2430
1af54                 | LR__2431
1af54     09 21 82 F1 | 	sub	local02, arg01
1af58     10 FB 01 F6 | 	mov	result1, local02
1af5c     FD 20 0A F6 | 	mov	local02, result1 wz
1af60     40 01 00 AF 
1af64     CB FA 05 A6 |  if_e	mov	result1, ##@LR__4258
1af68     7C 00 90 AD |  if_e	jmp	#LR__2436
1af6c     00 22 06 F6 | 	mov	local03, #0
1af70     10 25 02 F6 | 	mov	local04, local02
1af74                 | LR__2432
1af74     12 23 52 F2 | 	cmps	local03, local04 wc
1af78     68 00 90 3D |  if_ae	jmp	#LR__2435
1af7c     11 17 02 F6 | 	mov	arg03, local03
1af80     0F 17 02 F1 | 	add	arg03, local01
1af84     0B 17 C2 FA | 	rdbyte	arg03, arg03
1af88     20 16 0E F2 | 	cmp	arg03, #32 wz
1af8c     4C 00 90 AD |  if_e	jmp	#LR__2434
1af90     10 13 02 F6 | 	mov	arg01, local02
1af94     11 13 82 F1 | 	sub	arg01, local03
1af98     02 12 06 F1 | 	add	arg01, #2
1af9c     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
1afa0     FD 26 0A F6 | 	mov	local05, result1 wz
1afa4     2C 00 90 AD |  if_e	jmp	#LR__2433
1afa8     11 15 02 F6 | 	mov	arg02, local03
1afac     0F 15 02 F1 | 	add	arg02, local01
1afb0     10 17 02 F6 | 	mov	arg03, local02
1afb4     11 17 82 F1 | 	sub	arg03, local03
1afb8     13 13 02 F6 | 	mov	arg01, local05
1afbc     10 DB BF FD | 	call	#__system____builtin_memmove
1afc0     11 21 82 F1 | 	sub	local02, local03
1afc4     13 21 02 F1 | 	add	local02, local05
1afc8     10 01 48 FC | 	wrbyte	#0, local02
1afcc     13 FB 01 F6 | 	mov	result1, local05
1afd0     14 00 90 FD | 	jmp	#LR__2436
1afd4                 | LR__2433
1afd4     13 FB 01 F6 | 	mov	result1, local05
1afd8     0C 00 90 FD | 	jmp	#LR__2436
1afdc                 | LR__2434
1afdc     01 22 06 F1 | 	add	local03, #1
1afe0     90 FF 9F FD | 	jmp	#LR__2432
1afe4                 | LR__2435
1afe4     0F FB 01 F6 | 	mov	result1, local01
1afe8                 | LR__2436
1afe8     A7 F0 03 F6 | 	mov	ptra, fp
1afec     B2 00 A0 FD | 	call	#popregs_
1aff0                 | __system__LTrim_S_ret
1aff0     2D 00 64 FD | 	ret
1aff4                 | 
1aff4                 | __system__RTrim_S
1aff4     04 4A 05 F6 | 	mov	COUNT_, #4
1aff8     A8 00 A0 FD | 	call	#pushregs_
1affc     09 1F 02 F6 | 	mov	local01, arg01
1b000     09 21 02 F6 | 	mov	local02, arg01
1b004     97 06 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1b008                 | LR__2440
1b008     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b00c     01 20 06 51 |  if_ne	add	local02, #1
1b010     F4 FF 9F 5D |  if_ne	jmp	#LR__2440
1b014                 | LR__2441
1b014     09 21 82 F1 | 	sub	local02, arg01
1b018     10 FB 01 F6 | 	mov	result1, local02
1b01c     FD 20 0A F6 | 	mov	local02, result1 wz
1b020     40 01 00 AF 
1b024     CC FA 05 A6 |  if_e	mov	result1, ##@LR__4259
1b028     74 00 90 AD |  if_e	jmp	#LR__2445
1b02c     10 23 02 F6 | 	mov	local03, local02
1b030     01 22 86 F1 | 	sub	local03, #1
1b034                 | LR__2442
1b034     11 15 02 F6 | 	mov	arg02, local03
1b038     0F 15 02 F1 | 	add	arg02, local01
1b03c     0A 21 C2 FA | 	rdbyte	local02, arg02
1b040     20 20 0E F2 | 	cmp	local02, #32 wz
1b044     44 00 90 AD |  if_e	jmp	#LR__2444
1b048     11 13 02 F6 | 	mov	arg01, local03
1b04c     02 12 06 F1 | 	add	arg01, #2
1b050     14 19 B0 FD | 	call	#__system___gc_alloc_managed
1b054     FD 24 0A F6 | 	mov	local04, result1 wz
1b058     28 00 90 AD |  if_e	jmp	#LR__2443
1b05c     11 17 02 F6 | 	mov	arg03, local03
1b060     01 16 06 F1 | 	add	arg03, #1
1b064     12 13 02 F6 | 	mov	arg01, local04
1b068     0F 15 02 F6 | 	mov	arg02, local01
1b06c     60 DA BF FD | 	call	#__system____builtin_memmove
1b070     01 22 06 F1 | 	add	local03, #1
1b074     12 23 02 F1 | 	add	local03, local04
1b078     11 01 48 FC | 	wrbyte	#0, local03
1b07c     12 FB 01 F6 | 	mov	result1, local04
1b080     1C 00 90 FD | 	jmp	#LR__2445
1b084                 | LR__2443
1b084     12 FB 01 F6 | 	mov	result1, local04
1b088     14 00 90 FD | 	jmp	#LR__2445
1b08c                 | LR__2444
1b08c     01 22 86 F1 | 	sub	local03, #1
1b090     00 22 56 F2 | 	cmps	local03, #0 wc
1b094     9C FF 9F 3D |  if_ae	jmp	#LR__2442
1b098     40 01 00 FF 
1b09c     CD FA 05 F6 | 	mov	result1, ##@LR__4260
1b0a0                 | LR__2445
1b0a0     A7 F0 03 F6 | 	mov	ptra, fp
1b0a4     B2 00 A0 FD | 	call	#popregs_
1b0a8                 | __system__RTrim_S_ret
1b0a8     2D 00 64 FD | 	ret
1b0ac                 | 
1b0ac                 | __system__Instr
1b0ac     07 4A 05 F6 | 	mov	COUNT_, #7
1b0b0     A8 00 A0 FD | 	call	#pushregs_
1b0b4     09 1F 02 F6 | 	mov	local01, arg01
1b0b8     0A 21 02 F6 | 	mov	local02, arg02
1b0bc     0B 23 02 F6 | 	mov	local03, arg03
1b0c0     11 13 02 F6 | 	mov	arg01, local03
1b0c4     09 25 02 F6 | 	mov	local04, arg01
1b0c8     97 06 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1b0cc                 | LR__2450
1b0cc     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b0d0     01 24 06 51 |  if_ne	add	local04, #1
1b0d4     F4 FF 9F 5D |  if_ne	jmp	#LR__2450
1b0d8                 | LR__2451
1b0d8     09 25 82 F1 | 	sub	local04, arg01
1b0dc     12 27 02 F6 | 	mov	local05, local04
1b0e0     10 13 02 F6 | 	mov	arg01, local02
1b0e4     09 25 02 F6 | 	mov	local04, arg01
1b0e8     97 06 48 FB | 	callpa	#(@LR__2453-@LR__2452)>>2,fcache_load_ptr_
1b0ec                 | LR__2452
1b0ec     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b0f0     01 24 06 51 |  if_ne	add	local04, #1
1b0f4     F4 FF 9F 5D |  if_ne	jmp	#LR__2452
1b0f8                 | LR__2453
1b0f8     09 25 82 F1 | 	sub	local04, arg01
1b0fc     12 FB 01 F6 | 	mov	result1, local04
1b100     FD 18 0A F6 | 	mov	arg04, result1 wz
1b104     00 FA 05 A6 |  if_e	mov	result1, #0
1b108     98 00 90 AD |  if_e	jmp	#LR__2457
1b10c     00 26 0E F2 | 	cmp	local05, #0 wz
1b110     00 FA 05 A6 |  if_e	mov	result1, #0
1b114     8C 00 90 AD |  if_e	jmp	#LR__2457
1b118     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
1b11c     00 FA 05 16 |  if_a	mov	result1, #0
1b120     80 00 90 1D |  if_a	jmp	#LR__2457
1b124     01 1E 56 F2 | 	cmps	local01, #1 wc
1b128     01 1E 06 C6 |  if_b	mov	local01, #1
1b12c     11 29 C2 FA | 	rdbyte	local06, local03
1b130     01 26 0E F2 | 	cmp	local05, #1 wz
1b134     18 00 90 5D |  if_ne	jmp	#LR__2454
1b138     10 13 02 F6 | 	mov	arg01, local02
1b13c     14 15 02 F6 | 	mov	arg02, local06
1b140     0F 17 02 F6 | 	mov	arg03, local01
1b144     00 18 06 F6 | 	mov	arg04, #0
1b148     B8 33 B0 FD | 	call	#__system____ScanForChar
1b14c     54 00 90 FD | 	jmp	#LR__2457
1b150                 | LR__2454
1b150     0F 2B 02 F6 | 	mov	local07, local01
1b154                 | LR__2455
1b154     10 13 02 F6 | 	mov	arg01, local02
1b158     14 15 02 F6 | 	mov	arg02, local06
1b15c     15 17 02 F6 | 	mov	arg03, local07
1b160     00 18 06 F6 | 	mov	arg04, #0
1b164     9C 33 B0 FD | 	call	#__system____ScanForChar
1b168     FD 2A 0A F6 | 	mov	local07, result1 wz
1b16c     30 00 90 AD |  if_e	jmp	#LR__2456
1b170     13 17 02 F6 | 	mov	arg03, local05
1b174     10 13 02 F6 | 	mov	arg01, local02
1b178     15 15 02 F6 | 	mov	arg02, local07
1b17c     58 FB BF FD | 	call	#__system__Mid_S
1b180     FD 12 02 F6 | 	mov	arg01, result1
1b184     11 15 02 F6 | 	mov	arg02, local03
1b188     4C DA BF FD | 	call	#__system___string_cmp
1b18c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b190     15 FB 01 A6 |  if_e	mov	result1, local07
1b194     0C 00 90 AD |  if_e	jmp	#LR__2457
1b198     13 2B 02 F1 | 	add	local07, local05
1b19c     B4 FF 9F FD | 	jmp	#LR__2455
1b1a0                 | LR__2456
1b1a0     00 FA 05 F6 | 	mov	result1, #0
1b1a4                 | LR__2457
1b1a4     A7 F0 03 F6 | 	mov	ptra, fp
1b1a8     B2 00 A0 FD | 	call	#popregs_
1b1ac                 | __system__Instr_ret
1b1ac     2D 00 64 FD | 	ret
1b1b0                 | 
1b1b0                 | __system___strerror
1b1b0     00 12 56 F2 | 	cmps	arg01, #0 wc
1b1b4     08 00 90 CD |  if_b	jmp	#LR__2460
1b1b8     1A 12 56 F2 | 	cmps	arg01, #26 wc
1b1bc     04 00 90 CD |  if_b	jmp	#LR__2461
1b1c0                 | LR__2460
1b1c0     19 12 06 F6 | 	mov	arg01, #25
1b1c4                 | LR__2461
1b1c4     02 12 66 F0 | 	shl	arg01, #2
1b1c8     01 00 00 FF 
1b1cc     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
1b1d0     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1b1d4     09 FB 01 FB | 	rdlong	result1, arg01
1b1d8     01 00 00 FF 
1b1dc     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
1b1e0                 | __system___strerror_ret
1b1e0     2D 00 64 FD | 	ret
1b1e4                 | 
1b1e4                 | __system___int64_shl
1b1e4     20 16 CE F7 | 	test	arg03, #32 wz
1b1e8     09 15 02 56 |  if_ne	mov	arg02, arg01
1b1ec     00 12 06 56 |  if_ne	mov	arg01, #0
1b1f0     1F 16 CE F7 | 	test	arg03, #31 wz
1b1f4     18 00 90 AD |  if_e	jmp	#LR__2470
1b1f8     0B 15 62 F0 | 	shl	arg02, arg03
1b1fc     09 FB 01 F6 | 	mov	result1, arg01
1b200     0B FD 61 F6 | 	neg	result2, arg03
1b204     FE FA 41 F0 | 	shr	result1, result2
1b208     FD 14 42 F5 | 	or	arg02, result1
1b20c     0B 13 62 F0 | 	shl	arg01, arg03
1b210                 | LR__2470
1b210     0A FD 01 F6 | 	mov	result2, arg02
1b214     09 FB 01 F6 | 	mov	result1, arg01
1b218                 | __system___int64_shl_ret
1b218     2D 00 64 FD | 	ret
1b21c                 | 
1b21c                 | __system___usepins
1b21c     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b220     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b224     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
1b228     00 13 CA F7 | 	test	arg01, _var01 wz
1b22c     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
1b230     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1b234     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
1b238     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1b23c     00 FA 05 56 |  if_ne	mov	result1, #0
1b240     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1b244     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b248     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1b24c     09 03 42 F5 | 	or	_var02, arg01
1b250     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1b254     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b258     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1b25c     0A 03 42 F5 | 	or	_var02, arg02
1b260     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1b264     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1b268     01 FA 65 F6 | 	neg	result1, #1
1b26c                 | __system___usepins_ret
1b26c     2D 00 64 FD | 	ret
1b270                 | 
1b270                 | __system___freepins
1b270     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b274     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b278     09 01 22 F5 | 	andn	_var01, arg01
1b27c     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1b280     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b284     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b288     0A 01 22 F5 | 	andn	_var01, arg02
1b28c     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1b290     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1b294                 | __system___freepins_ret
1b294     2D 00 64 FD | 	ret
1b298                 | 
1b298                 | __system___float_fromuns
1b298     09 17 0A F6 | 	mov	arg03, arg01 wz
1b29c     0B FB 01 A6 |  if_e	mov	result1, arg03
1b2a0     24 00 90 AD |  if_e	jmp	#LR__2480
1b2a4     0B 15 92 F7 | 	encod	arg02, arg03 wc
1b2a8     01 14 06 C1 |  if_b	add	arg02, #1
1b2ac     01 14 86 F1 | 	sub	arg02, #1
1b2b0     1F 12 06 F6 | 	mov	arg01, #31
1b2b4     0A 13 82 F1 | 	sub	arg01, arg02
1b2b8     09 17 62 F0 | 	shl	arg03, arg01
1b2bc     02 16 46 F0 | 	shr	arg03, #2
1b2c0     00 12 06 F6 | 	mov	arg01, #0
1b2c4     4C 09 B0 FD | 	call	#__system___float_Pack
1b2c8                 | LR__2480
1b2c8                 | __system___float_fromuns_ret
1b2c8     2D 00 64 FD | 	ret
1b2cc                 | 
1b2cc                 | __system___float_add
1b2cc     0F 4A 05 F6 | 	mov	COUNT_, #15
1b2d0     A8 00 A0 FD | 	call	#pushregs_
1b2d4     09 1F 02 F6 | 	mov	local01, arg01
1b2d8     0A 21 02 F6 | 	mov	local02, arg02
1b2dc     00 22 06 F6 | 	mov	local03, #0
1b2e0     0F 25 02 F6 | 	mov	local04, local01
1b2e4     12 27 02 F6 | 	mov	local05, local04
1b2e8     16 26 46 F7 | 	zerox	local05, #22
1b2ec     12 29 02 F6 | 	mov	local06, local04
1b2f0     01 28 66 F0 | 	shl	local06, #1
1b2f4     18 28 46 F0 | 	shr	local06, #24
1b2f8     1F 24 46 F0 | 	shr	local04, #31
1b2fc     10 13 02 F6 | 	mov	arg01, local02
1b300     09 FB 01 F6 | 	mov	result1, arg01
1b304     FD 2A 02 F6 | 	mov	local07, result1
1b308     15 2D 02 F6 | 	mov	local08, local07
1b30c     16 2C 46 F7 | 	zerox	local08, #22
1b310     15 2F 02 F6 | 	mov	local09, local07
1b314     01 2E 66 F0 | 	shl	local09, #1
1b318     18 2E 46 F0 | 	shr	local09, #24
1b31c     17 31 02 F6 | 	mov	local10, local09
1b320     1F 2A 46 F0 | 	shr	local07, #31
1b324     00 32 06 F6 | 	mov	local11, #0
1b328     00 34 06 F6 | 	mov	local12, #0
1b32c     18 29 12 F2 | 	cmp	local06, local10 wc
1b330     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1b334     2C 00 90 1D |  if_a	jmp	#LR__2490
1b338     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1b33c     24 00 90 3D |  if_ae	jmp	#LR__2490
1b340     13 37 02 F6 | 	mov	local13, local05
1b344     16 27 02 F6 | 	mov	local05, local08
1b348     1B 2D 02 F6 | 	mov	local08, local13
1b34c     14 37 02 F6 | 	mov	local13, local06
1b350     18 29 02 F6 | 	mov	local06, local10
1b354     1B 31 02 F6 | 	mov	local10, local13
1b358     12 37 02 F6 | 	mov	local13, local04
1b35c     15 25 02 F6 | 	mov	local04, local07
1b360     1B 2B 02 F6 | 	mov	local07, local13
1b364                 | LR__2490
1b364     FF 28 0E F2 | 	cmp	local06, #255 wz
1b368     70 01 90 AD |  if_e	jmp	#LR__2505
1b36c     00 28 0E F2 | 	cmp	local06, #0 wz
1b370     AC 01 90 AD |  if_e	jmp	#LR__2507
1b374     17 26 26 F4 | 	bith	local05, #23
1b378                 | LR__2491
1b378     00 30 0E F2 | 	cmp	local10, #0 wz
1b37c     F0 01 90 AD |  if_e	jmp	#LR__2511
1b380     17 2C 26 F4 | 	bith	local08, #23
1b384                 | LR__2492
1b384     7F 28 86 F1 | 	sub	local06, #127
1b388     7F 30 86 F1 | 	sub	local10, #127
1b38c     14 39 02 F6 | 	mov	local14, local06
1b390     18 39 82 F1 | 	sub	local14, local10
1b394     97 14 48 FB | 	callpa	#(@LR__2494-@LR__2493)>>2,fcache_load_ptr_
1b398                 | LR__2493
1b398     20 38 56 F2 | 	cmps	local14, #32 wc
1b39c     20 00 90 CD |  if_b	jmp	#LR__2495
1b3a0     16 2F 02 F6 | 	mov	local09, local08
1b3a4     00 32 0E F2 | 	cmp	local11, #0 wz
1b3a8     6F 32 62 FD | 	wrnz	local11
1b3ac     19 2F 42 F5 | 	or	local09, local11
1b3b0     17 33 02 F6 | 	mov	local11, local09
1b3b4     00 2C 06 F6 | 	mov	local08, #0
1b3b8     20 38 86 F1 | 	sub	local14, #32
1b3bc     D8 FF 9F FD | 	jmp	#LR__2493
1b3c0                 | LR__2494
1b3c0                 | LR__2495
1b3c0     00 38 0E F2 | 	cmp	local14, #0 wz
1b3c4     38 00 90 AD |  if_e	jmp	#LR__2496
1b3c8     16 37 02 F6 | 	mov	local13, local08
1b3cc     20 30 06 F6 | 	mov	local10, #32
1b3d0     1C 31 82 F1 | 	sub	local10, local14
1b3d4     18 37 62 F0 | 	shl	local13, local10
1b3d8     19 31 02 F6 | 	mov	local10, local11
1b3dc     20 2E 06 F6 | 	mov	local09, #32
1b3e0     1C 2F 82 F1 | 	sub	local09, local14
1b3e4     17 31 6A F0 | 	shl	local10, local09 wz
1b3e8     1C 33 42 F0 | 	shr	local11, local14
1b3ec     1C 2D 42 F0 | 	shr	local08, local14
1b3f0     1B 33 42 F5 | 	or	local11, local13
1b3f4     00 3A 06 F6 | 	mov	local15, #0
1b3f8     01 3A 06 56 |  if_ne	mov	local15, #1
1b3fc     1D 33 42 F5 | 	or	local11, local15
1b400                 | LR__2496
1b400     12 3B 02 F6 | 	mov	local15, local04
1b404     15 3B 62 F5 | 	xor	local15, local07
1b408     01 3A CE F7 | 	test	local15, #1 wz
1b40c     18 00 90 AD |  if_e	jmp	#LR__2497
1b410     16 2D 22 F6 | 	not	local08, local08
1b414     19 33 22 F6 | 	not	local11, local11
1b418     01 32 0E F1 | 	add	local11, #1 wz
1b41c     00 3A 06 F6 | 	mov	local15, #0
1b420     01 3A 06 A6 |  if_e	mov	local15, #1
1b424     1D 2D 02 F1 | 	add	local08, local15
1b428                 | LR__2497
1b428     19 35 12 F1 | 	add	local12, local11 wc
1b42c     16 27 22 F1 | 	addx	local05, local08
1b430     00 26 56 F2 | 	cmps	local05, #0 wc
1b434     1C 00 90 3D |  if_ae	jmp	#LR__2498
1b438     01 24 66 F5 | 	xor	local04, #1
1b43c     13 27 22 F6 | 	not	local05, local05
1b440     1A 35 22 F6 | 	not	local12, local12
1b444     01 34 0E F1 | 	add	local12, #1 wz
1b448     00 3A 06 F6 | 	mov	local15, #0
1b44c     01 3A 06 A6 |  if_e	mov	local15, #1
1b450     1D 27 02 F1 | 	add	local05, local15
1b454                 | LR__2498
1b454     00 80 00 FF 
1b458     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1b45c     28 00 90 CD |  if_b	jmp	#LR__2499
1b460     01 28 06 F1 | 	add	local06, #1
1b464     1A 39 02 F6 | 	mov	local14, local12
1b468     01 38 06 F5 | 	and	local14, #1
1b46c     01 34 46 F0 | 	shr	local12, #1
1b470     13 3B 02 F6 | 	mov	local15, local05
1b474     1F 3A 66 F0 | 	shl	local15, #31
1b478     1D 35 42 F5 | 	or	local12, local15
1b47c     1C 35 42 F5 | 	or	local12, local14
1b480     01 26 46 F0 | 	shr	local05, #1
1b484     3C 00 90 FD | 	jmp	#LR__2504
1b488                 | LR__2499
1b488     00 40 00 FF 
1b48c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b490     30 00 90 3D |  if_ae	jmp	#LR__2503
1b494     00 26 0E F2 | 	cmp	local05, #0 wz
1b498     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1b49c     08 24 46 A5 |  if_e	or	local04, #8
1b4a0     01 24 26 A5 |  if_e	andn	local04, #1
1b4a4     1C 00 90 AD |  if_e	jmp	#LR__2502
1b4a8                 | LR__2500
1b4a8     00 40 00 FF 
1b4ac     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b4b0     10 00 90 3D |  if_ae	jmp	#LR__2501
1b4b4     1A 35 12 F1 | 	add	local12, local12 wc
1b4b8     13 27 22 F1 | 	addx	local05, local05
1b4bc     01 28 86 F1 | 	sub	local06, #1
1b4c0     E4 FF 9F FD | 	jmp	#LR__2500
1b4c4                 | LR__2501
1b4c4                 | LR__2502
1b4c4                 | LR__2503
1b4c4                 | LR__2504
1b4c4     13 13 02 F6 | 	mov	arg01, local05
1b4c8     1A 15 02 F6 | 	mov	arg02, local12
1b4cc     14 17 02 F6 | 	mov	arg03, local06
1b4d0     12 19 02 F6 | 	mov	arg04, local04
1b4d4     70 34 B0 FD | 	call	#__system__pack_0489
1b4d8     DC 00 90 FD | 	jmp	#LR__2515
1b4dc                 | LR__2505
1b4dc     FF 30 0E F2 | 	cmp	local10, #255 wz
1b4e0     10 00 90 5D |  if_ne	jmp	#LR__2506
1b4e4     12 2B 0A F2 | 	cmp	local07, local04 wz
1b4e8     00 F8 3F 5F 
1b4ec     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b4f0     C4 00 90 5D |  if_ne	jmp	#LR__2515
1b4f4                 | LR__2506
1b4f4     00 26 0E F2 | 	cmp	local05, #0 wz
1b4f8     00 F8 3F 5F 
1b4fc     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b500     B4 00 90 5D |  if_ne	jmp	#LR__2515
1b504     1A 15 02 F6 | 	mov	arg02, local12
1b508     14 17 02 F6 | 	mov	arg03, local06
1b50c     12 19 02 F6 | 	mov	arg04, local04
1b510     02 18 46 F5 | 	or	arg04, #2
1b514     13 13 02 F6 | 	mov	arg01, local05
1b518     2C 34 B0 FD | 	call	#__system__pack_0489
1b51c     98 00 90 FD | 	jmp	#LR__2515
1b520                 | LR__2507
1b520     00 26 0E F2 | 	cmp	local05, #0 wz
1b524     28 00 90 AD |  if_e	jmp	#LR__2510
1b528     01 26 66 F0 | 	shl	local05, #1
1b52c     97 0E 48 FB | 	callpa	#(@LR__2509-@LR__2508)>>2,fcache_load_ptr_
1b530                 | LR__2508
1b530     00 40 00 FF 
1b534     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b538     14 3B 02 C6 |  if_b	mov	local15, local06
1b53c     01 3A 86 C1 |  if_b	sub	local15, #1
1b540     1D 29 02 C6 |  if_b	mov	local06, local15
1b544     01 26 66 C0 |  if_b	shl	local05, #1
1b548     E4 FF 9F CD |  if_b	jmp	#LR__2508
1b54c                 | LR__2509
1b54c     28 FE 9F FD | 	jmp	#LR__2491
1b550                 | LR__2510
1b550     15 25 02 F5 | 	and	local04, local07
1b554     12 19 02 F6 | 	mov	arg04, local04
1b558     08 18 46 F5 | 	or	arg04, #8
1b55c     00 12 06 F6 | 	mov	arg01, #0
1b560     00 14 06 F6 | 	mov	arg02, #0
1b564     00 16 06 F6 | 	mov	arg03, #0
1b568     DC 33 B0 FD | 	call	#__system__pack_0489
1b56c     48 00 90 FD | 	jmp	#LR__2515
1b570                 | LR__2511
1b570     00 2C 0E F2 | 	cmp	local08, #0 wz
1b574     28 00 90 AD |  if_e	jmp	#LR__2514
1b578     01 2C 66 F0 | 	shl	local08, #1
1b57c     97 0E 48 FB | 	callpa	#(@LR__2513-@LR__2512)>>2,fcache_load_ptr_
1b580                 | LR__2512
1b580     00 40 00 FF 
1b584     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1b588     18 3B 02 C6 |  if_b	mov	local15, local10
1b58c     01 3A 86 C1 |  if_b	sub	local15, #1
1b590     1D 31 02 C6 |  if_b	mov	local10, local15
1b594     01 2C 66 C0 |  if_b	shl	local08, #1
1b598     E4 FF 9F CD |  if_b	jmp	#LR__2512
1b59c                 | LR__2513
1b59c     E4 FD 9F FD | 	jmp	#LR__2492
1b5a0                 | LR__2514
1b5a0     7F 28 86 F1 | 	sub	local06, #127
1b5a4     13 13 02 F6 | 	mov	arg01, local05
1b5a8     1A 15 02 F6 | 	mov	arg02, local12
1b5ac     14 17 02 F6 | 	mov	arg03, local06
1b5b0     12 19 02 F6 | 	mov	arg04, local04
1b5b4     90 33 B0 FD | 	call	#__system__pack_0489
1b5b8                 | LR__2515
1b5b8     A7 F0 03 F6 | 	mov	ptra, fp
1b5bc     B2 00 A0 FD | 	call	#popregs_
1b5c0                 | __system___float_add_ret
1b5c0     2D 00 64 FD | 	ret
1b5c4                 | 
1b5c4                 | __system___float_sqrt
1b5c4     04 4A 05 F6 | 	mov	COUNT_, #4
1b5c8     A8 00 A0 FD | 	call	#pushregs_
1b5cc     09 1F 02 F6 | 	mov	local01, arg01
1b5d0     09 FB 01 F6 | 	mov	result1, arg01
1b5d4     FD 20 02 F6 | 	mov	local02, result1
1b5d8     10 23 02 F6 | 	mov	local03, local02
1b5dc     16 22 46 F7 | 	zerox	local03, #22
1b5e0     10 25 02 F6 | 	mov	local04, local02
1b5e4     01 24 66 F0 | 	shl	local04, #1
1b5e8     18 24 4E F0 | 	shr	local04, #24 wz
1b5ec     1F 20 46 F0 | 	shr	local02, #31
1b5f0     70 00 90 AD |  if_e	jmp	#LR__2521
1b5f4     17 22 26 F4 | 	bith	local03, #23
1b5f8                 | LR__2520
1b5f8     00 20 0E F2 | 	cmp	local02, #0 wz
1b5fc     00 F8 3F 5F 
1b600     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b604     88 00 90 5D |  if_ne	jmp	#LR__2524
1b608     FF 24 0E F2 | 	cmp	local04, #255 wz
1b60c     0F FB 01 A6 |  if_e	mov	result1, local01
1b610     7C 00 90 AD |  if_e	jmp	#LR__2524
1b614     7F 24 86 F1 | 	sub	local04, #127
1b618     01 24 CE F7 | 	test	local04, #1 wz
1b61c     01 22 66 50 |  if_ne	shl	local03, #1
1b620     05 22 66 F0 | 	shl	local03, #5
1b624     11 01 38 FD | 	qsqrt	#0, local03
1b628     01 24 86 51 |  if_ne	sub	local04, #1
1b62c     12 25 52 F6 | 	abs	local04, local04 wc
1b630     01 24 46 F0 | 	shr	local04, #1
1b634     12 17 82 F6 | 	negc	arg03, local04
1b638     10 19 02 F6 | 	mov	arg04, local02
1b63c     18 12 62 FD | 	getqx	arg01
1b640     09 15 02 F6 | 	mov	arg02, arg01
1b644     19 14 66 F0 | 	shl	arg02, #25
1b648     07 12 46 F0 | 	shr	arg01, #7
1b64c     00 80 00 FF 
1b650     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1b654     01 16 06 31 |  if_ae	add	arg03, #1
1b658     01 12 46 30 |  if_ae	shr	arg01, #1
1b65c     E8 32 B0 FD | 	call	#__system__pack_0489
1b660     2C 00 90 FD | 	jmp	#LR__2524
1b664                 | LR__2521
1b664     00 22 0E F2 | 	cmp	local03, #0 wz
1b668     0F FB 01 A6 |  if_e	mov	result1, local01
1b66c     20 00 90 AD |  if_e	jmp	#LR__2524
1b670     01 22 66 F0 | 	shl	local03, #1
1b674     97 0A 48 FB | 	callpa	#(@LR__2523-@LR__2522)>>2,fcache_load_ptr_
1b678                 | LR__2522
1b678     00 40 00 FF 
1b67c     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1b680     01 24 86 C1 |  if_b	sub	local04, #1
1b684     01 22 66 C0 |  if_b	shl	local03, #1
1b688     EC FF 9F CD |  if_b	jmp	#LR__2522
1b68c                 | LR__2523
1b68c     68 FF 9F FD | 	jmp	#LR__2520
1b690                 | LR__2524
1b690     A7 F0 03 F6 | 	mov	ptra, fp
1b694     B2 00 A0 FD | 	call	#popregs_
1b698                 | __system___float_sqrt_ret
1b698     2D 00 64 FD | 	ret
1b69c                 | 
1b69c                 | __system___float_mul
1b69c     0B 4A 05 F6 | 	mov	COUNT_, #11
1b6a0     A8 00 A0 FD | 	call	#pushregs_
1b6a4     09 1F 02 F6 | 	mov	local01, arg01
1b6a8     0A 21 02 F6 | 	mov	local02, arg02
1b6ac     0F 23 02 F6 | 	mov	local03, local01
1b6b0     11 25 02 F6 | 	mov	local04, local03
1b6b4     16 24 46 F7 | 	zerox	local04, #22
1b6b8     11 27 02 F6 | 	mov	local05, local03
1b6bc     01 26 66 F0 | 	shl	local05, #1
1b6c0     18 26 46 F0 | 	shr	local05, #24
1b6c4     1F 22 46 F0 | 	shr	local03, #31
1b6c8     10 FB 01 F6 | 	mov	result1, local02
1b6cc     FD 28 02 F6 | 	mov	local06, result1
1b6d0     14 2B 02 F6 | 	mov	local07, local06
1b6d4     16 2A 46 F7 | 	zerox	local07, #22
1b6d8     14 2D 02 F6 | 	mov	local08, local06
1b6dc     01 2C 66 F0 | 	shl	local08, #1
1b6e0     18 2C 46 F0 | 	shr	local08, #24
1b6e4     1F 28 46 F0 | 	shr	local06, #31
1b6e8     14 23 62 F5 | 	xor	local03, local06
1b6ec     FF 26 0E F2 | 	cmp	local05, #255 wz
1b6f0     90 00 90 AD |  if_e	jmp	#LR__2533
1b6f4     FF 2C 0E F2 | 	cmp	local08, #255 wz
1b6f8     D8 00 90 AD |  if_e	jmp	#LR__2535
1b6fc     00 26 0E F2 | 	cmp	local05, #0 wz
1b700     0C 01 90 AD |  if_e	jmp	#LR__2536
1b704     17 24 26 F4 | 	bith	local04, #23
1b708                 | LR__2530
1b708     00 2C 0E F2 | 	cmp	local08, #0 wz
1b70c     44 01 90 AD |  if_e	jmp	#LR__2540
1b710     17 2A 26 F4 | 	bith	local07, #23
1b714                 | LR__2531
1b714     12 21 02 F6 | 	mov	local02, local04
1b718     04 20 66 F0 | 	shl	local02, #4
1b71c     15 29 02 F6 | 	mov	local06, local07
1b720     05 28 66 F0 | 	shl	local06, #5
1b724     14 21 02 FD | 	qmul	local02, local06
1b728     16 27 02 F1 | 	add	local05, local08
1b72c     FE 26 86 F1 | 	sub	local05, #254
1b730     13 2F 02 F6 | 	mov	local09, local05
1b734     04 24 66 F0 | 	shl	local04, #4
1b738     05 2A 66 F0 | 	shl	local07, #5
1b73c     18 30 62 FD | 	getqx	local10
1b740     15 25 02 FD | 	qmul	local04, local07
1b744     19 32 62 FD | 	getqy	local11
1b748     00 80 00 FF 
1b74c     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1b750     18 00 90 CD |  if_b	jmp	#LR__2532
1b754     01 2E 06 F1 | 	add	local09, #1
1b758     01 30 46 F0 | 	shr	local10, #1
1b75c     19 2D 02 F6 | 	mov	local08, local11
1b760     1F 2C 66 F0 | 	shl	local08, #31
1b764     16 31 42 F5 | 	or	local10, local08
1b768     01 32 46 F0 | 	shr	local11, #1
1b76c                 | LR__2532
1b76c     19 13 02 F6 | 	mov	arg01, local11
1b770     18 15 02 F6 | 	mov	arg02, local10
1b774     17 17 02 F6 | 	mov	arg03, local09
1b778     11 19 02 F6 | 	mov	arg04, local03
1b77c     C8 31 B0 FD | 	call	#__system__pack_0489
1b780     10 01 90 FD | 	jmp	#LR__2544
1b784                 | LR__2533
1b784     00 24 0E F2 | 	cmp	local04, #0 wz
1b788     0F FB 01 56 |  if_ne	mov	result1, local01
1b78c     04 01 90 5D |  if_ne	jmp	#LR__2544
1b790     FF 2C 56 F2 | 	cmps	local08, #255 wc
1b794     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1b798     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1b79c     18 00 90 4D |  if_c_and_nz	jmp	#LR__2534
1b7a0     00 F8 3F CF 
1b7a4     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1b7a8     E8 00 90 CD |  if_b	jmp	#LR__2544
1b7ac     00 2A 0E F2 | 	cmp	local07, #0 wz
1b7b0     10 FB 01 56 |  if_ne	mov	result1, local02
1b7b4     DC 00 90 5D |  if_ne	jmp	#LR__2544
1b7b8                 | LR__2534
1b7b8     02 22 46 F5 | 	or	local03, #2
1b7bc     00 12 06 F6 | 	mov	arg01, #0
1b7c0     00 14 06 F6 | 	mov	arg02, #0
1b7c4     13 17 02 F6 | 	mov	arg03, local05
1b7c8     11 19 02 F6 | 	mov	arg04, local03
1b7cc     78 31 B0 FD | 	call	#__system__pack_0489
1b7d0     C0 00 90 FD | 	jmp	#LR__2544
1b7d4                 | LR__2535
1b7d4     00 26 0E F2 | 	cmp	local05, #0 wz
1b7d8     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1b7dc     00 F8 3F AF 
1b7e0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1b7e4     AC 00 90 AD |  if_e	jmp	#LR__2544
1b7e8     00 2A 0E F2 | 	cmp	local07, #0 wz
1b7ec     10 FB 01 56 |  if_ne	mov	result1, local02
1b7f0     A0 00 90 5D |  if_ne	jmp	#LR__2544
1b7f4     16 17 02 F6 | 	mov	arg03, local08
1b7f8     11 19 02 F6 | 	mov	arg04, local03
1b7fc     02 18 46 F5 | 	or	arg04, #2
1b800     00 12 06 F6 | 	mov	arg01, #0
1b804     00 14 06 F6 | 	mov	arg02, #0
1b808     3C 31 B0 FD | 	call	#__system__pack_0489
1b80c     84 00 90 FD | 	jmp	#LR__2544
1b810                 | LR__2536
1b810     00 24 0E F2 | 	cmp	local04, #0 wz
1b814     20 00 90 AD |  if_e	jmp	#LR__2539
1b818     01 24 66 F0 | 	shl	local04, #1
1b81c     97 0A 48 FB | 	callpa	#(@LR__2538-@LR__2537)>>2,fcache_load_ptr_
1b820                 | LR__2537
1b820     00 40 00 FF 
1b824     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1b828     01 26 86 C1 |  if_b	sub	local05, #1
1b82c     01 24 66 C0 |  if_b	shl	local04, #1
1b830     EC FF 9F CD |  if_b	jmp	#LR__2537
1b834                 | LR__2538
1b834     D0 FE 9F FD | 	jmp	#LR__2530
1b838                 | LR__2539
1b838     08 22 46 F5 | 	or	local03, #8
1b83c     00 12 06 F6 | 	mov	arg01, #0
1b840     00 14 06 F6 | 	mov	arg02, #0
1b844     00 16 06 F6 | 	mov	arg03, #0
1b848     11 19 02 F6 | 	mov	arg04, local03
1b84c     F8 30 B0 FD | 	call	#__system__pack_0489
1b850     40 00 90 FD | 	jmp	#LR__2544
1b854                 | LR__2540
1b854     00 2A 0E F2 | 	cmp	local07, #0 wz
1b858     20 00 90 AD |  if_e	jmp	#LR__2543
1b85c     01 2A 66 F0 | 	shl	local07, #1
1b860     97 0A 48 FB | 	callpa	#(@LR__2542-@LR__2541)>>2,fcache_load_ptr_
1b864                 | LR__2541
1b864     00 40 00 FF 
1b868     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1b86c     01 2C 86 C1 |  if_b	sub	local08, #1
1b870     01 2A 66 C0 |  if_b	shl	local07, #1
1b874     EC FF 9F CD |  if_b	jmp	#LR__2541
1b878                 | LR__2542
1b878     98 FE 9F FD | 	jmp	#LR__2531
1b87c                 | LR__2543
1b87c     08 22 46 F5 | 	or	local03, #8
1b880     00 12 06 F6 | 	mov	arg01, #0
1b884     00 14 06 F6 | 	mov	arg02, #0
1b888     00 16 06 F6 | 	mov	arg03, #0
1b88c     11 19 02 F6 | 	mov	arg04, local03
1b890     B4 30 B0 FD | 	call	#__system__pack_0489
1b894                 | LR__2544
1b894     A7 F0 03 F6 | 	mov	ptra, fp
1b898     B2 00 A0 FD | 	call	#popregs_
1b89c                 | __system___float_mul_ret
1b89c     2D 00 64 FD | 	ret
1b8a0                 | 
1b8a0                 | __system___float_div
1b8a0     0E 4A 05 F6 | 	mov	COUNT_, #14
1b8a4     A8 00 A0 FD | 	call	#pushregs_
1b8a8     09 23 02 F6 | 	mov	local03, arg01
1b8ac     0A 25 02 F6 | 	mov	local04, arg02
1b8b0     11 27 02 F6 | 	mov	local05, local03
1b8b4     13 29 02 F6 | 	mov	local06, local05
1b8b8     16 28 46 F7 | 	zerox	local06, #22
1b8bc     13 2B 02 F6 | 	mov	local07, local05
1b8c0     01 2A 66 F0 | 	shl	local07, #1
1b8c4     18 2A 46 F0 | 	shr	local07, #24
1b8c8     1F 26 46 F0 | 	shr	local05, #31
1b8cc     12 FB 01 F6 | 	mov	result1, local04
1b8d0     FD 2C 02 F6 | 	mov	local08, result1
1b8d4     16 2F 02 F6 | 	mov	local09, local08
1b8d8     16 2E 46 F7 | 	zerox	local09, #22
1b8dc     16 31 02 F6 | 	mov	local10, local08
1b8e0     01 30 66 F0 | 	shl	local10, #1
1b8e4     18 30 46 F0 | 	shr	local10, #24
1b8e8     1F 2C 46 F0 | 	shr	local08, #31
1b8ec     16 27 62 F5 | 	xor	local05, local08
1b8f0     FF 2A 0E F2 | 	cmp	local07, #255 wz
1b8f4     D4 00 90 AD |  if_e	jmp	#LR__2555
1b8f8     FF 30 0E F2 | 	cmp	local10, #255 wz
1b8fc     04 01 90 AD |  if_e	jmp	#LR__2556
1b900     00 2A 0E F2 | 	cmp	local07, #0 wz
1b904     24 01 90 AD |  if_e	jmp	#LR__2557
1b908     17 28 26 F4 | 	bith	local06, #23
1b90c                 | LR__2550
1b90c     00 30 0E F2 | 	cmp	local10, #0 wz
1b910     70 01 90 AD |  if_e	jmp	#LR__2561
1b914     17 2E 26 F4 | 	bith	local09, #23
1b918                 | LR__2551
1b918     18 2B 82 F1 | 	sub	local07, local10
1b91c     15 33 02 F6 | 	mov	local11, local07
1b920     14 13 02 F6 | 	mov	arg01, local06
1b924     02 12 46 F0 | 	shr	arg01, #2
1b928     1E 28 66 F0 | 	shl	local06, #30
1b92c     14 15 02 F6 | 	mov	arg02, local06
1b930     17 17 02 F6 | 	mov	arg03, local09
1b934     28 12 62 FD | 	setq	arg01
1b938     0B 15 12 FD | 	qdiv	arg02, arg03
1b93c     00 34 06 F6 | 	mov	local12, #0
1b940     18 1E 62 FD | 	getqx	local01
1b944     19 FC 61 FD | 	getqy	result2
1b948     FE 20 02 F6 | 	mov	local02, result2
1b94c     0F 37 02 F6 | 	mov	local13, local01
1b950     00 20 4E F2 | 	cmps	local02, #0 wz
1b954     1B 39 02 F6 | 	mov	local14, local13
1b958     19 38 66 F0 | 	shl	local14, #25
1b95c     01 34 06 56 |  if_ne	mov	local12, #1
1b960     1A 39 42 F5 | 	or	local14, local12
1b964     07 36 46 F0 | 	shr	local13, #7
1b968     00 80 00 FF 
1b96c     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1b970     1C 00 90 CD |  if_b	jmp	#LR__2552
1b974     01 32 06 F1 | 	add	local11, #1
1b978     01 38 46 F0 | 	shr	local14, #1
1b97c     1B 35 02 F6 | 	mov	local12, local13
1b980     1F 34 66 F0 | 	shl	local12, #31
1b984     1A 39 42 F5 | 	or	local14, local12
1b988     01 36 46 F0 | 	shr	local13, #1
1b98c     24 00 90 FD | 	jmp	#LR__2554
1b990                 | LR__2552
1b990     00 40 00 FF 
1b994     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1b998     18 00 90 3D |  if_ae	jmp	#LR__2553
1b99c     01 32 86 F1 | 	sub	local11, #1
1b9a0     01 36 66 F0 | 	shl	local13, #1
1b9a4     1C 35 02 F6 | 	mov	local12, local14
1b9a8     1F 34 46 F0 | 	shr	local12, #31
1b9ac     1A 37 42 F5 | 	or	local13, local12
1b9b0     01 38 66 F0 | 	shl	local14, #1
1b9b4                 | LR__2553
1b9b4                 | LR__2554
1b9b4     1B 13 02 F6 | 	mov	arg01, local13
1b9b8     1C 15 02 F6 | 	mov	arg02, local14
1b9bc     19 17 02 F6 | 	mov	arg03, local11
1b9c0     13 19 02 F6 | 	mov	arg04, local05
1b9c4     80 2F B0 FD | 	call	#__system__pack_0489
1b9c8     F8 00 90 FD | 	jmp	#LR__2565
1b9cc                 | LR__2555
1b9cc     00 28 0E F2 | 	cmp	local06, #0 wz
1b9d0     11 FB 01 56 |  if_ne	mov	result1, local03
1b9d4     EC 00 90 5D |  if_ne	jmp	#LR__2565
1b9d8     FF 30 0E F2 | 	cmp	local10, #255 wz
1b9dc     00 F8 3F AF 
1b9e0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1b9e4     DC 00 90 AD |  if_e	jmp	#LR__2565
1b9e8     02 26 46 F5 | 	or	local05, #2
1b9ec     00 12 06 F6 | 	mov	arg01, #0
1b9f0     00 14 06 F6 | 	mov	arg02, #0
1b9f4     15 17 02 F6 | 	mov	arg03, local07
1b9f8     13 19 02 F6 | 	mov	arg04, local05
1b9fc     48 2F B0 FD | 	call	#__system__pack_0489
1ba00     C0 00 90 FD | 	jmp	#LR__2565
1ba04                 | LR__2556
1ba04     00 2E 0E F2 | 	cmp	local09, #0 wz
1ba08     12 FB 01 56 |  if_ne	mov	result1, local04
1ba0c     B4 00 90 5D |  if_ne	jmp	#LR__2565
1ba10     13 19 02 F6 | 	mov	arg04, local05
1ba14     08 18 46 F5 | 	or	arg04, #8
1ba18     00 12 06 F6 | 	mov	arg01, #0
1ba1c     00 14 06 F6 | 	mov	arg02, #0
1ba20     00 16 06 F6 | 	mov	arg03, #0
1ba24     20 2F B0 FD | 	call	#__system__pack_0489
1ba28     98 00 90 FD | 	jmp	#LR__2565
1ba2c                 | LR__2557
1ba2c     00 28 0E F2 | 	cmp	local06, #0 wz
1ba30     20 00 90 AD |  if_e	jmp	#LR__2560
1ba34     01 28 66 F0 | 	shl	local06, #1
1ba38     97 0A 48 FB | 	callpa	#(@LR__2559-@LR__2558)>>2,fcache_load_ptr_
1ba3c                 | LR__2558
1ba3c     00 40 00 FF 
1ba40     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1ba44     01 2A 86 C1 |  if_b	sub	local07, #1
1ba48     01 28 66 C0 |  if_b	shl	local06, #1
1ba4c     EC FF 9F CD |  if_b	jmp	#LR__2558
1ba50                 | LR__2559
1ba50     B8 FE 9F FD | 	jmp	#LR__2550
1ba54                 | LR__2560
1ba54     00 30 0E F2 | 	cmp	local10, #0 wz
1ba58     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1ba5c     00 F8 3F AF 
1ba60     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1ba64     5C 00 90 AD |  if_e	jmp	#LR__2565
1ba68     13 19 02 F6 | 	mov	arg04, local05
1ba6c     08 18 46 F5 | 	or	arg04, #8
1ba70     00 12 06 F6 | 	mov	arg01, #0
1ba74     00 14 06 F6 | 	mov	arg02, #0
1ba78     00 16 06 F6 | 	mov	arg03, #0
1ba7c     C8 2E B0 FD | 	call	#__system__pack_0489
1ba80     40 00 90 FD | 	jmp	#LR__2565
1ba84                 | LR__2561
1ba84     00 2E 0E F2 | 	cmp	local09, #0 wz
1ba88     20 00 90 AD |  if_e	jmp	#LR__2564
1ba8c     01 2E 66 F0 | 	shl	local09, #1
1ba90     97 0A 48 FB | 	callpa	#(@LR__2563-@LR__2562)>>2,fcache_load_ptr_
1ba94                 | LR__2562
1ba94     00 40 00 FF 
1ba98     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
1ba9c     01 30 86 C1 |  if_b	sub	local10, #1
1baa0     01 2E 66 C0 |  if_b	shl	local09, #1
1baa4     EC FF 9F CD |  if_b	jmp	#LR__2562
1baa8                 | LR__2563
1baa8     6C FE 9F FD | 	jmp	#LR__2551
1baac                 | LR__2564
1baac     02 26 46 F5 | 	or	local05, #2
1bab0     00 12 06 F6 | 	mov	arg01, #0
1bab4     00 14 06 F6 | 	mov	arg02, #0
1bab8     00 16 06 F6 | 	mov	arg03, #0
1babc     13 19 02 F6 | 	mov	arg04, local05
1bac0     84 2E B0 FD | 	call	#__system__pack_0489
1bac4                 | LR__2565
1bac4     A7 F0 03 F6 | 	mov	ptra, fp
1bac8     B2 00 A0 FD | 	call	#popregs_
1bacc                 | __system___float_div_ret
1bacc     2D 00 64 FD | 	ret
1bad0                 | 
1bad0                 | __system___float_cmp
1bad0     00 C0 3F FF 
1bad4     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
1bad8     00 C0 3F CF 
1badc     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1bae0     0B FB 01 36 |  if_ae	mov	result1, arg03
1bae4     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1bae8     00 C0 7F FF 
1baec     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1baf0     00 C0 7F CF 
1baf4     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
1baf8     0B FB 01 36 |  if_ae	mov	result1, arg03
1bafc     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1bb00     00 12 56 F2 | 	cmps	arg01, #0 wc
1bb04     2C 00 90 3D |  if_ae	jmp	#LR__2570
1bb08     00 14 56 F2 | 	cmps	arg02, #0 wc
1bb0c     0A FB 01 C6 |  if_b	mov	result1, arg02
1bb10     09 FB 81 C1 |  if_b	sub	result1, arg01
1bb14     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
1bb18     00 14 0E F2 | 	cmp	arg02, #0 wz
1bb1c     00 00 40 AF 
1bb20     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1bb24     00 FA 05 A6 |  if_e	mov	result1, #0
1bb28     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1bb2c     01 FA 65 F6 | 	neg	result1, #1
1bb30     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1bb34                 | LR__2570
1bb34     00 14 56 F2 | 	cmps	arg02, #0 wc
1bb38     1C 00 90 3D |  if_ae	jmp	#LR__2571
1bb3c     00 12 0E F2 | 	cmp	arg01, #0 wz
1bb40     00 00 40 AF 
1bb44     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
1bb48     00 FA 05 A6 |  if_e	mov	result1, #0
1bb4c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1bb50     01 FA 05 F6 | 	mov	result1, #1
1bb54     08 00 90 FD | 	jmp	#__system___float_cmp_ret
1bb58                 | LR__2571
1bb58     0A 13 82 F1 | 	sub	arg01, arg02
1bb5c     09 FB 01 F6 | 	mov	result1, arg01
1bb60                 | __system___float_cmp_ret
1bb60     2D 00 64 FD | 	ret
1bb64                 | 
1bb64                 | __system___float_tointeger
1bb64     02 4A 05 F6 | 	mov	COUNT_, #2
1bb68     A8 00 A0 FD | 	call	#pushregs_
1bb6c     50 00 B0 FD | 	call	#__system___float_Unpack
1bb70     FF FF 7F FF 
1bb74     FF FD 55 F2 | 	cmps	result2, ##-1 wc
1bb78     34 00 90 CD |  if_b	jmp	#LR__2580
1bb7c     1F FC 55 F2 | 	cmps	result2, #31 wc
1bb80     2C 00 90 3D |  if_ae	jmp	#LR__2580
1bb84     02 FE 65 F0 | 	shl	result3, #2
1bb88     1E 1E 06 F6 | 	mov	local01, #30
1bb8c     FE 1E 82 F1 | 	sub	local01, result2
1bb90     0F FF 41 F0 | 	shr	result3, local01
1bb94     FF 20 02 F6 | 	mov	local02, result3
1bb98     0A 21 02 F1 | 	add	local02, arg02
1bb9c     01 20 46 F0 | 	shr	local02, #1
1bba0     00 FA 0D F2 | 	cmp	result1, #0 wz
1bba4     10 21 62 56 |  if_ne	neg	local02, local02
1bba8     10 FB 01 F6 | 	mov	result1, local02
1bbac     04 00 90 FD | 	jmp	#LR__2581
1bbb0                 | LR__2580
1bbb0     00 FA 05 F6 | 	mov	result1, #0
1bbb4                 | LR__2581
1bbb4     A7 F0 03 F6 | 	mov	ptra, fp
1bbb8     B2 00 A0 FD | 	call	#popregs_
1bbbc                 | __system___float_tointeger_ret
1bbbc     2D 00 64 FD | 	ret
1bbc0                 | 
1bbc0                 | __system___float_Unpack
1bbc0     09 01 02 F6 | 	mov	_var01, arg01
1bbc4     1F 00 46 F0 | 	shr	_var01, #31
1bbc8     09 03 02 F6 | 	mov	_var02, arg01
1bbcc     01 02 66 F0 | 	shl	_var02, #1
1bbd0     18 02 4E F0 | 	shr	_var02, #24 wz
1bbd4     17 13 06 F4 | 	bitl	arg01, #279
1bbd8     06 12 66 50 |  if_ne	shl	arg01, #6
1bbdc     1D 12 26 54 |  if_ne	bith	arg01, #29
1bbe0     1C 00 90 5D |  if_ne	jmp	#LR__2590
1bbe4     09 05 92 F7 | 	encod	_var03, arg01 wc
1bbe8     01 04 06 C1 |  if_b	add	_var03, #1
1bbec     17 04 86 F1 | 	sub	_var03, #23
1bbf0     02 03 02 F6 | 	mov	_var02, _var03
1bbf4     07 FC 05 F6 | 	mov	result2, #7
1bbf8     02 FD 81 F1 | 	sub	result2, _var03
1bbfc     FE 12 62 F0 | 	shl	arg01, result2
1bc00                 | LR__2590
1bc00     7F 02 86 F1 | 	sub	_var02, #127
1bc04     09 FF 01 F6 | 	mov	result3, arg01
1bc08     00 FB 01 F6 | 	mov	result1, _var01
1bc0c     01 FD 01 F6 | 	mov	result2, _var02
1bc10                 | __system___float_Unpack_ret
1bc10     2D 00 64 FD | 	ret
1bc14                 | 
1bc14                 | __system___float_Pack
1bc14     00 00 06 F6 | 	mov	_var01, #0
1bc18     00 16 0E F2 | 	cmp	arg03, #0 wz
1bc1c     8C 00 90 AD |  if_e	jmp	#LR__2601
1bc20     0B 03 92 F7 | 	encod	_var02, arg03 wc
1bc24     01 02 06 C1 |  if_b	add	_var02, #1
1bc28     21 00 06 F6 | 	mov	_var01, #33
1bc2c     01 01 82 F1 | 	sub	_var01, _var02
1bc30     00 17 62 F0 | 	shl	arg03, _var01
1bc34     03 02 06 F6 | 	mov	_var02, #3
1bc38     00 03 82 F1 | 	sub	_var02, _var01
1bc3c     01 15 02 F1 | 	add	arg02, _var02
1bc40     0A 05 02 F6 | 	mov	_var03, arg02
1bc44     00 17 06 F1 | 	add	arg03, #256
1bc48     0B 03 02 F6 | 	mov	_var02, arg03
1bc4c     FF 02 2E F5 | 	andn	_var02, #255 wz
1bc50     01 04 06 A1 |  if_e	add	_var03, #1
1bc54     7F 04 06 F1 | 	add	_var03, #127
1bc58     FF FF 7F FF 
1bc5c     E9 05 46 F3 | 	fges	_var03, ##-23
1bc60     FF 04 66 F3 | 	fles	_var03, #255
1bc64     01 04 56 F2 | 	cmps	_var03, #1 wc
1bc68     1C 00 90 3D |  if_ae	jmp	#LR__2600
1bc6c     01 16 46 F0 | 	shr	arg03, #1
1bc70     1F 02 C6 F9 | 	decod	_var02, #31
1bc74     0B 03 02 F1 | 	add	_var02, arg03
1bc78     02 05 62 F6 | 	neg	_var03, _var03
1bc7c     02 03 42 F0 | 	shr	_var02, _var03
1bc80     01 17 02 F6 | 	mov	arg03, _var02
1bc84     00 04 06 F6 | 	mov	_var03, #0
1bc88                 | LR__2600
1bc88     09 FB 01 F6 | 	mov	result1, arg01
1bc8c     1F FA 65 F0 | 	shl	result1, #31
1bc90     02 03 02 F6 | 	mov	_var02, _var03
1bc94     17 02 66 F0 | 	shl	_var02, #23
1bc98     01 FB 41 F5 | 	or	result1, _var02
1bc9c     0B 07 02 F6 | 	mov	_var04, arg03
1bca0     09 06 46 F0 | 	shr	_var04, #9
1bca4     03 FB 41 F5 | 	or	result1, _var04
1bca8     04 00 90 FD | 	jmp	#__system___float_Pack_ret
1bcac                 | LR__2601
1bcac     00 FB 01 F6 | 	mov	result1, _var01
1bcb0                 | __system___float_Pack_ret
1bcb0     2D 00 64 FD | 	ret
1bcb4                 | 
1bcb4                 | __system___basic_print_float
1bcb4     05 4A 05 F6 | 	mov	COUNT_, #5
1bcb8     A8 00 A0 FD | 	call	#pushregs_
1bcbc     09 1F 02 F6 | 	mov	local01, arg01
1bcc0     0A 21 02 F6 | 	mov	local02, arg02
1bcc4     0B 23 0A F6 | 	mov	local03, arg03 wz
1bcc8     0C 25 02 F6 | 	mov	local04, arg04
1bccc     14 00 90 5D |  if_ne	jmp	#LR__2610
1bcd0     23 24 0E F2 | 	cmp	local04, #35 wz
1bcd4     80 02 10 AF 
1bcd8     00 26 06 A6 |  if_e	mov	local05, ##537198592
1bcdc     1D 26 C6 59 |  if_ne	decod	local05, #29
1bce0     13 23 02 F6 | 	mov	local03, local05
1bce4                 | LR__2610
1bce4     0F 13 02 F6 | 	mov	arg01, local01
1bce8     40 27 B0 FD | 	call	#__system___gettxfunc
1bcec     FD 26 0A F6 | 	mov	local05, result1 wz
1bcf0     00 FA 05 A6 |  if_e	mov	result1, #0
1bcf4     13 13 02 56 |  if_ne	mov	arg01, local05
1bcf8     11 15 02 56 |  if_ne	mov	arg02, local03
1bcfc     10 17 02 56 |  if_ne	mov	arg03, local02
1bd00     12 19 02 56 |  if_ne	mov	arg04, local04
1bd04     8C DF BF 5D |  if_ne	call	#__system___fmtfloat
1bd08     A7 F0 03 F6 | 	mov	ptra, fp
1bd0c     B2 00 A0 FD | 	call	#popregs_
1bd10                 | __system___basic_print_float_ret
1bd10     2D 00 64 FD | 	ret
1bd14                 | 
1bd14                 | __system____builtin_atoi
1bd14     07 4A 05 F6 | 	mov	COUNT_, #7
1bd18     A8 00 A0 FD | 	call	#pushregs_
1bd1c                 | __system____builtin_atoi_enter
1bd1c     09 1F 02 F6 | 	mov	local01, arg01
1bd20     0A 21 02 F6 | 	mov	local02, arg02
1bd24     00 22 06 F6 | 	mov	local03, #0
1bd28     00 24 06 F6 | 	mov	local04, #0
1bd2c     00 26 06 F6 | 	mov	local05, #0
1bd30     97 08 48 FB | 	callpa	#(@LR__2621-@LR__2620)>>2,fcache_load_ptr_
1bd34                 | LR__2620
1bd34     0F 29 C2 FA | 	rdbyte	local06, local01
1bd38     20 28 0E F2 | 	cmp	local06, #32 wz
1bd3c     01 1E 06 A1 |  if_e	add	local01, #1
1bd40     F0 FF 9F AD |  if_e	jmp	#LR__2620
1bd44                 | LR__2621
1bd44     0F 2B C2 FA | 	rdbyte	local07, local01
1bd48                 | LR__2622
1bd48     2D 2A 0E F2 | 	cmp	local07, #45 wz
1bd4c     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1bd50     18 00 90 5D |  if_ne	jmp	#LR__2623
1bd54     01 1E 06 F1 | 	add	local01, #1
1bd58     2D 2A 0E F2 | 	cmp	local07, #45 wz
1bd5c     01 28 06 A6 |  if_e	mov	local06, #1
1bd60     14 27 C2 A2 |  if_e	subr	local05, local06
1bd64     0F 2B C2 FA | 	rdbyte	local07, local01
1bd68     DC FF 9F FD | 	jmp	#LR__2622
1bd6c                 | LR__2623
1bd6c     97 48 48 FB | 	callpa	#(@LR__2631-@LR__2624)>>2,fcache_load_ptr_
1bd70                 | LR__2624
1bd70                 | LR__2625
1bd70     0F 2B C2 FA | 	rdbyte	local07, local01
1bd74     5F 2A 0E F2 | 	cmp	local07, #95 wz
1bd78     01 1E 06 F1 | 	add	local01, #1
1bd7c     F0 FF 9F AD |  if_e	jmp	#LR__2625
1bd80     30 2A 0E F2 | 	cmp	local07, #48 wz
1bd84     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
1bd88     00 24 06 A6 |  if_e	mov	local04, #0
1bd8c     60 00 90 AD |  if_e	jmp	#LR__2630
1bd90     31 2A 56 F2 | 	cmps	local07, #49 wc
1bd94     18 00 90 CD |  if_b	jmp	#LR__2626
1bd98     3A 2A 56 F2 | 	cmps	local07, #58 wc
1bd9c     15 25 02 C6 |  if_b	mov	local04, local07
1bda0     30 24 86 C1 |  if_b	sub	local04, #48
1bda4     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1bda8     0A 20 06 86 |  if_c_and_z	mov	local02, #10
1bdac     40 00 90 CD |  if_b	jmp	#LR__2629
1bdb0                 | LR__2626
1bdb0     0B 20 56 F2 | 	cmps	local02, #11 wc
1bdb4     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
1bdb8     14 00 90 CD |  if_b	jmp	#LR__2627
1bdbc     67 2A 56 F2 | 	cmps	local07, #103 wc
1bdc0     61 2A 86 C1 |  if_b	sub	local07, #97
1bdc4     0A 24 06 C6 |  if_b	mov	local04, #10
1bdc8     15 25 02 C1 |  if_b	add	local04, local07
1bdcc     20 00 90 CD |  if_b	jmp	#LR__2628
1bdd0                 | LR__2627
1bdd0     0B 20 56 F2 | 	cmps	local02, #11 wc
1bdd4     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
1bdd8     24 00 90 CD |  if_b	jmp	#LR__2632
1bddc     47 2A 56 F2 | 	cmps	local07, #71 wc
1bde0     41 2A 86 C1 |  if_b	sub	local07, #65
1bde4     0A 24 06 C6 |  if_b	mov	local04, #10
1bde8     15 25 02 C1 |  if_b	add	local04, local07
1bdec     10 00 90 3D |  if_ae	jmp	#LR__2632
1bdf0                 | LR__2628
1bdf0                 | LR__2629
1bdf0                 | LR__2630
1bdf0     11 21 02 FD | 	qmul	local02, local03
1bdf4     18 22 62 FD | 	getqx	local03
1bdf8     12 23 02 F1 | 	add	local03, local04
1bdfc     70 FF 9F FD | 	jmp	#LR__2624
1be00                 | LR__2631
1be00                 | LR__2632
1be00     00 20 0E F2 | 	cmp	local02, #0 wz
1be04     64 00 90 5D |  if_ne	jmp	#LR__2638
1be08     78 2A 0E F2 | 	cmp	local07, #120 wz
1be0c     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1be10     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1be14     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
1be18     14 00 90 5D |  if_ne	jmp	#LR__2633
1be1c     0F 13 02 F6 | 	mov	arg01, local01
1be20     10 14 06 F6 | 	mov	arg02, #16
1be24     EC FE BF FD | 	call	#__system____builtin_atoi
1be28     FD 22 02 F6 | 	mov	local03, result1
1be2c     3C 00 90 FD | 	jmp	#LR__2637
1be30                 | LR__2633
1be30     62 2A 0E F2 | 	cmp	local07, #98 wz
1be34     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
1be38     14 00 90 5D |  if_ne	jmp	#LR__2634
1be3c     0F 13 02 F6 | 	mov	arg01, local01
1be40     02 14 06 F6 | 	mov	arg02, #2
1be44     CC FE BF FD | 	call	#__system____builtin_atoi
1be48     FD 22 02 F6 | 	mov	local03, result1
1be4c     1C 00 90 FD | 	jmp	#LR__2636
1be50                 | LR__2634
1be50     6F 2A 0E F2 | 	cmp	local07, #111 wz
1be54     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
1be58     10 00 90 5D |  if_ne	jmp	#LR__2635
1be5c     0F 13 02 F6 | 	mov	arg01, local01
1be60     08 14 06 F6 | 	mov	arg02, #8
1be64     AC FE BF FD | 	call	#__system____builtin_atoi
1be68     FD 22 02 F6 | 	mov	local03, result1
1be6c                 | LR__2635
1be6c                 | LR__2636
1be6c                 | LR__2637
1be6c                 | LR__2638
1be6c     00 26 0E F2 | 	cmp	local05, #0 wz
1be70     11 23 62 56 |  if_ne	neg	local03, local03
1be74     11 FB 01 F6 | 	mov	result1, local03
1be78     A7 F0 03 F6 | 	mov	ptra, fp
1be7c     B2 00 A0 FD | 	call	#popregs_
1be80                 | __system____builtin_atoi_ret
1be80     2D 00 64 FD | 	ret
1be84                 | 
1be84                 | __system____builtin_atof
1be84     07 4A 05 F6 | 	mov	COUNT_, #7
1be88     A8 00 A0 FD | 	call	#pushregs_
1be8c     09 1F 02 F6 | 	mov	local01, arg01
1be90     00 20 06 F6 | 	mov	local02, #0
1be94     00 22 06 F6 | 	mov	local03, #0
1be98     00 24 06 F6 | 	mov	local04, #0
1be9c     00 26 06 F6 | 	mov	local05, #0
1bea0     97 08 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
1bea4                 | LR__2640
1bea4     0F 17 C2 FA | 	rdbyte	arg03, local01
1bea8     20 16 0E F2 | 	cmp	arg03, #32 wz
1beac     01 1E 06 A1 |  if_e	add	local01, #1
1beb0     F0 FF 9F AD |  if_e	jmp	#LR__2640
1beb4                 | LR__2641
1beb4     0F 29 C2 FA | 	rdbyte	local06, local01
1beb8                 | LR__2642
1beb8     2B 28 0E F2 | 	cmp	local06, #43 wz
1bebc     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1bec0     14 00 90 5D |  if_ne	jmp	#LR__2643
1bec4     2D 28 0E F2 | 	cmp	local06, #45 wz
1bec8     1F 24 E6 A4 |  if_e	bitnot	local04, #31
1becc     01 1E 06 F1 | 	add	local01, #1
1bed0     0F 29 C2 FA | 	rdbyte	local06, local01
1bed4     E0 FF 9F FD | 	jmp	#LR__2642
1bed8                 | LR__2643
1bed8                 | LR__2644
1bed8     97 08 48 FB | 	callpa	#(@LR__2646-@LR__2645)>>2,fcache_load_ptr_
1bedc                 | LR__2645
1bedc     0F 29 C2 FA | 	rdbyte	local06, local01
1bee0     5F 28 0E F2 | 	cmp	local06, #95 wz
1bee4     01 1E 06 F1 | 	add	local01, #1
1bee8     F0 FF 9F AD |  if_e	jmp	#LR__2645
1beec                 | LR__2646
1beec     00 28 0E F2 | 	cmp	local06, #0 wz
1bef0     5C 00 90 AD |  if_e	jmp	#LR__2648
1bef4     30 28 56 F2 | 	cmps	local06, #48 wc
1bef8     44 00 90 CD |  if_b	jmp	#LR__2647
1befc     3A 28 56 F2 | 	cmps	local06, #58 wc
1bf00     3C 00 90 3D |  if_ae	jmp	#LR__2647
1bf04     10 13 02 F6 | 	mov	arg01, local02
1bf08     00 90 20 FF 
1bf0c     00 14 06 F6 | 	mov	arg02, ##1092616192
1bf10     88 F7 BF FD | 	call	#__system___float_mul
1bf14     FD 20 02 F6 | 	mov	local02, result1
1bf18     30 28 86 F1 | 	sub	local06, #48
1bf1c     14 13 02 F6 | 	mov	arg01, local06
1bf20     74 F3 BF FD | 	call	#__system___float_fromuns
1bf24     FD 14 02 F6 | 	mov	arg02, result1
1bf28     10 13 02 F6 | 	mov	arg01, local02
1bf2c     9C F3 BF FD | 	call	#__system___float_add
1bf30     FD 20 02 F6 | 	mov	local02, result1
1bf34     00 26 0E F2 | 	cmp	local05, #0 wz
1bf38     01 22 86 51 |  if_ne	sub	local03, #1
1bf3c     98 FF 9F FD | 	jmp	#LR__2644
1bf40                 | LR__2647
1bf40     2E 28 0E F2 | 	cmp	local06, #46 wz
1bf44     00 26 0E A2 |  if_e	cmp	local05, #0 wz
1bf48     01 26 06 A6 |  if_e	mov	local05, #1
1bf4c     88 FF 9F AD |  if_e	jmp	#LR__2644
1bf50                 | LR__2648
1bf50     45 28 0E F2 | 	cmp	local06, #69 wz
1bf54     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
1bf58     18 00 90 5D |  if_ne	jmp	#LR__2649
1bf5c     0F 13 02 F6 | 	mov	arg01, local01
1bf60     00 14 06 F6 | 	mov	arg02, #0
1bf64     AC FD BF FD | 	call	#__system____builtin_atoi
1bf68     11 FB 01 F1 | 	add	result1, local03
1bf6c     FD 2A 02 F6 | 	mov	local07, result1
1bf70     04 00 90 FD | 	jmp	#LR__2650
1bf74                 | LR__2649
1bf74     11 2B 02 F6 | 	mov	local07, local03
1bf78                 | LR__2650
1bf78     15 17 02 F6 | 	mov	arg03, local07
1bf7c     10 13 02 F6 | 	mov	arg01, local02
1bf80     00 90 20 FF 
1bf84     00 14 06 F6 | 	mov	arg02, ##1092616192
1bf88     BC 06 B0 FD | 	call	#__system___float_pow_n
1bf8c     12 FB 61 F5 | 	xor	result1, local04
1bf90     A7 F0 03 F6 | 	mov	ptra, fp
1bf94     B2 00 A0 FD | 	call	#popregs_
1bf98                 | __system____builtin_atof_ret
1bf98     2D 00 64 FD | 	ret
1bf9c                 | 
1bf9c                 | __system____builtin_ilogb
1bf9c     20 FC BF FD | 	call	#__system___float_Unpack
1bfa0     00 FE 0D F2 | 	cmp	result3, #0 wz
1bfa4     00 00 40 AF 
1bfa8     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
1bfac     24 00 90 AD |  if_e	jmp	#LR__2661
1bfb0     80 FC 0D F2 | 	cmp	result2, #128 wz
1bfb4     18 00 90 5D |  if_ne	jmp	#LR__2660
1bfb8     00 00 10 FF 
1bfbc     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1bfc0     1E FA CD A9 |  if_e	bmask	result1, #30
1bfc4     0C 00 90 AD |  if_e	jmp	#LR__2661
1bfc8     1F FA C5 F9 | 	decod	result1, #31
1bfcc     04 00 90 FD | 	jmp	#LR__2661
1bfd0                 | LR__2660
1bfd0     FE FA 01 F6 | 	mov	result1, result2
1bfd4                 | LR__2661
1bfd4                 | __system____builtin_ilogb_ret
1bfd4     2D 00 64 FD | 	ret
1bfd8                 | 
1bfd8                 | __system____builtin_sinf
1bfd8     03 4A 05 F6 | 	mov	COUNT_, #3
1bfdc     A8 00 A0 FD | 	call	#pushregs_
1bfe0     09 1F 02 F6 | 	mov	local01, arg01
1bfe4     87 64 20 FF 
1bfe8     DB 15 06 F6 | 	mov	arg02, ##1086918619
1bfec     B0 F8 BF FD | 	call	#__system___float_div
1bff0     FD 12 02 F6 | 	mov	arg01, result1
1bff4     00 14 06 F6 | 	mov	arg02, #0
1bff8     68 FB BF FD | 	call	#__system___float_tointeger
1bffc     FD 16 0A F6 | 	mov	arg03, result1 wz
1c000     44 00 90 AD |  if_e	jmp	#LR__2670
1c004     0B 13 52 F6 | 	abs	arg01, arg03 wc
1c008     1F 20 C6 C9 |  if_b	decod	local02, #31
1c00c     00 20 06 36 |  if_ae	mov	local02, #0
1c010     84 F2 BF FD | 	call	#__system___float_fromuns
1c014     10 FB 61 F5 | 	xor	result1, local02
1c018     FD 12 02 F6 | 	mov	arg01, result1
1c01c     1E 14 C6 F9 | 	decod	arg02, #30
1c020     78 F6 BF FD | 	call	#__system___float_mul
1c024     FD 12 02 F6 | 	mov	arg01, result1
1c028     87 24 20 FF 
1c02c     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c030     68 F6 BF FD | 	call	#__system___float_mul
1c034     FD 14 02 F6 | 	mov	arg02, result1
1c038     0F 13 02 F6 | 	mov	arg01, local01
1c03c     1F 14 E6 F4 | 	bitnot	arg02, #31
1c040     88 F2 BF FD | 	call	#__system___float_add
1c044     FD 1E 02 F6 | 	mov	local01, result1
1c048                 | LR__2670
1c048     0F 13 02 F6 | 	mov	arg01, local01
1c04c     66 E6 1E FF 
1c050     CD 14 06 F6 | 	mov	arg02, ##1036831949
1c054     01 16 06 F6 | 	mov	arg03, #1
1c058     74 FA BF FD | 	call	#__system___float_cmp
1c05c     00 FA 55 F2 | 	cmps	result1, #0 wc
1c060     5C 00 90 3D |  if_ae	jmp	#LR__2671
1c064     0F 13 02 F6 | 	mov	arg01, local01
1c068     66 E6 5E FF 
1c06c     CD 14 06 F6 | 	mov	arg02, ##-1110651699
1c070     01 16 66 F6 | 	neg	arg03, #1
1c074     58 FA BF FD | 	call	#__system___float_cmp
1c078     01 FA 55 F2 | 	cmps	result1, #1 wc
1c07c     40 00 90 CD |  if_b	jmp	#LR__2671
1c080     0F 13 02 F6 | 	mov	arg01, local01
1c084     0F 15 02 F6 | 	mov	arg02, local01
1c088     10 F6 BF FD | 	call	#__system___float_mul
1c08c     FD 12 02 F6 | 	mov	arg01, result1
1c090     0F 15 02 F6 | 	mov	arg02, local01
1c094     04 F6 BF FD | 	call	#__system___float_mul
1c098     FD 12 02 F6 | 	mov	arg01, result1
1c09c     00 60 20 FF 
1c0a0     00 14 06 F6 | 	mov	arg02, ##1086324736
1c0a4     F8 F7 BF FD | 	call	#__system___float_div
1c0a8     FD 14 02 F6 | 	mov	arg02, result1
1c0ac     0F 13 02 F6 | 	mov	arg01, local01
1c0b0     1F 14 E6 F4 | 	bitnot	arg02, #31
1c0b4     14 F2 BF FD | 	call	#__system___float_add
1c0b8     FD 22 02 F6 | 	mov	local03, result1
1c0bc     54 00 90 FD | 	jmp	#LR__2672
1c0c0                 | LR__2671
1c0c0     0F 13 02 F6 | 	mov	arg01, local01
1c0c4     7C 91 26 FF 
1c0c8     83 15 06 F6 | 	mov	arg02, ##1294137731
1c0cc     CC F5 BF FD | 	call	#__system___float_mul
1c0d0     FD 12 02 F6 | 	mov	arg01, result1
1c0d4     00 14 06 F6 | 	mov	arg02, #0
1c0d8     88 FA BF FD | 	call	#__system___float_tointeger
1c0dc     02 FA 65 F0 | 	shl	result1, #2
1c0e0     00 00 A0 FF 
1c0e4     FD 00 48 FD | 	qrotate	##1073741824, result1
1c0e8     19 12 62 FD | 	getqy	arg01
1c0ec     09 13 52 F6 | 	abs	arg01, arg01 wc
1c0f0     1F 20 C6 C9 |  if_b	decod	local02, #31
1c0f4     00 20 06 36 |  if_ae	mov	local02, #0
1c0f8     9C F1 BF FD | 	call	#__system___float_fromuns
1c0fc     10 FB 61 F5 | 	xor	result1, local02
1c100     FD 12 02 F6 | 	mov	arg01, result1
1c104     00 40 27 FF 
1c108     00 14 06 F6 | 	mov	arg02, ##1317011456
1c10c     90 F7 BF FD | 	call	#__system___float_div
1c110     FD 22 02 F6 | 	mov	local03, result1
1c114                 | LR__2672
1c114     11 FB 01 F6 | 	mov	result1, local03
1c118     A7 F0 03 F6 | 	mov	ptra, fp
1c11c     B2 00 A0 FD | 	call	#popregs_
1c120                 | __system____builtin_sinf_ret
1c120     2D 00 64 FD | 	ret
1c124                 | 
1c124                 | __system____builtin_tanf
1c124     02 4A 05 F6 | 	mov	COUNT_, #2
1c128     A8 00 A0 FD | 	call	#pushregs_
1c12c     09 1F 02 F6 | 	mov	local01, arg01
1c130     A4 FE BF FD | 	call	#__system____builtin_sinf
1c134     FD 20 02 F6 | 	mov	local02, result1
1c138     0F 15 02 F6 | 	mov	arg02, local01
1c13c     87 E4 1F FF 
1c140     DB 13 06 F6 | 	mov	arg01, ##1070141403
1c144     1F 14 E6 F4 | 	bitnot	arg02, #31
1c148     80 F1 BF FD | 	call	#__system___float_add
1c14c     FD 12 02 F6 | 	mov	arg01, result1
1c150     84 FE BF FD | 	call	#__system____builtin_sinf
1c154     FD 14 02 F6 | 	mov	arg02, result1
1c158     10 13 02 F6 | 	mov	arg01, local02
1c15c     40 F7 BF FD | 	call	#__system___float_div
1c160     A7 F0 03 F6 | 	mov	ptra, fp
1c164     B2 00 A0 FD | 	call	#popregs_
1c168                 | __system____builtin_tanf_ret
1c168     2D 00 64 FD | 	ret
1c16c                 | 
1c16c                 | __system____builtin_asinf
1c16c     01 4A 05 F6 | 	mov	COUNT_, #1
1c170     A8 00 A0 FD | 	call	#pushregs_
1c174     09 1F 02 F6 | 	mov	local01, arg01
1c178     0F 15 02 F6 | 	mov	arg02, local01
1c17c     0F 13 02 F6 | 	mov	arg01, local01
1c180     18 F5 BF FD | 	call	#__system___float_mul
1c184     FD 14 02 F6 | 	mov	arg02, result1
1c188     00 C0 1F FF 
1c18c     00 12 06 F6 | 	mov	arg01, ##1065353216
1c190     1F 14 E6 F4 | 	bitnot	arg02, #31
1c194     34 F1 BF FD | 	call	#__system___float_add
1c198     FD 12 02 F6 | 	mov	arg01, result1
1c19c     24 F4 BF FD | 	call	#__system___float_sqrt
1c1a0     FD 14 02 F6 | 	mov	arg02, result1
1c1a4     0F 13 02 F6 | 	mov	arg01, local01
1c1a8     58 00 B0 FD | 	call	#__system____builtin_atan2f
1c1ac     A7 F0 03 F6 | 	mov	ptra, fp
1c1b0     B2 00 A0 FD | 	call	#popregs_
1c1b4                 | __system____builtin_asinf_ret
1c1b4     2D 00 64 FD | 	ret
1c1b8                 | 
1c1b8                 | __system____builtin_acosf
1c1b8     01 4A 05 F6 | 	mov	COUNT_, #1
1c1bc     A8 00 A0 FD | 	call	#pushregs_
1c1c0     09 1F 02 F6 | 	mov	local01, arg01
1c1c4     0F 15 02 F6 | 	mov	arg02, local01
1c1c8     0F 13 02 F6 | 	mov	arg01, local01
1c1cc     CC F4 BF FD | 	call	#__system___float_mul
1c1d0     FD 14 02 F6 | 	mov	arg02, result1
1c1d4     00 C0 1F FF 
1c1d8     00 12 06 F6 | 	mov	arg01, ##1065353216
1c1dc     1F 14 E6 F4 | 	bitnot	arg02, #31
1c1e0     E8 F0 BF FD | 	call	#__system___float_add
1c1e4     FD 12 02 F6 | 	mov	arg01, result1
1c1e8     D8 F3 BF FD | 	call	#__system___float_sqrt
1c1ec     FD 12 02 F6 | 	mov	arg01, result1
1c1f0     0F 15 02 F6 | 	mov	arg02, local01
1c1f4     0C 00 B0 FD | 	call	#__system____builtin_atan2f
1c1f8     A7 F0 03 F6 | 	mov	ptra, fp
1c1fc     B2 00 A0 FD | 	call	#popregs_
1c200                 | __system____builtin_acosf_ret
1c200     2D 00 64 FD | 	ret
1c204                 | 
1c204                 | __system____builtin_atan2f
1c204     04 4A 05 F6 | 	mov	COUNT_, #4
1c208     A8 00 A0 FD | 	call	#pushregs_
1c20c     09 1F 02 F6 | 	mov	local01, arg01
1c210     0A 21 02 F6 | 	mov	local02, arg02
1c214     0F 13 02 F6 | 	mov	arg01, local01
1c218     00 14 06 F6 | 	mov	arg02, #0
1c21c     01 16 06 F6 | 	mov	arg03, #1
1c220     AC F8 BF FD | 	call	#__system___float_cmp
1c224     00 FA 0D F2 | 	cmp	result1, #0 wz
1c228     28 00 90 5D |  if_ne	jmp	#LR__2680
1c22c     10 13 02 F6 | 	mov	arg01, local02
1c230     00 14 06 F6 | 	mov	arg02, #0
1c234     01 16 06 F6 | 	mov	arg03, #1
1c238     94 F8 BF FD | 	call	#__system___float_cmp
1c23c     00 FA 55 F2 | 	cmps	result1, #0 wc
1c240     87 24 60 CF 
1c244     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
1c248     DC 00 90 CD |  if_b	jmp	#LR__2681
1c24c     00 FA 05 F6 | 	mov	result1, #0
1c250     D4 00 90 FD | 	jmp	#LR__2681
1c254                 | LR__2680
1c254     10 13 02 F6 | 	mov	arg01, local02
1c258     10 15 02 F6 | 	mov	arg02, local02
1c25c     3C F4 BF FD | 	call	#__system___float_mul
1c260     FD 22 02 F6 | 	mov	local03, result1
1c264     0F 13 02 F6 | 	mov	arg01, local01
1c268     0F 15 02 F6 | 	mov	arg02, local01
1c26c     2C F4 BF FD | 	call	#__system___float_mul
1c270     FD 14 02 F6 | 	mov	arg02, result1
1c274     11 13 02 F6 | 	mov	arg01, local03
1c278     50 F0 BF FD | 	call	#__system___float_add
1c27c     FD 12 02 F6 | 	mov	arg01, result1
1c280     40 F3 BF FD | 	call	#__system___float_sqrt
1c284     FD 22 02 F6 | 	mov	local03, result1
1c288     10 13 02 F6 | 	mov	arg01, local02
1c28c     11 15 02 F6 | 	mov	arg02, local03
1c290     0C F6 BF FD | 	call	#__system___float_div
1c294     FD 20 02 F6 | 	mov	local02, result1
1c298     0F 13 02 F6 | 	mov	arg01, local01
1c29c     11 15 02 F6 | 	mov	arg02, local03
1c2a0     FC F5 BF FD | 	call	#__system___float_div
1c2a4     FD 1E 02 F6 | 	mov	local01, result1
1c2a8     00 40 27 FF 
1c2ac     00 12 06 F6 | 	mov	arg01, ##1317011456
1c2b0     10 15 02 F6 | 	mov	arg02, local02
1c2b4     E4 F3 BF FD | 	call	#__system___float_mul
1c2b8     FD 12 02 F6 | 	mov	arg01, result1
1c2bc     00 14 06 F6 | 	mov	arg02, #0
1c2c0     A0 F8 BF FD | 	call	#__system___float_tointeger
1c2c4     FD 22 02 F6 | 	mov	local03, result1
1c2c8     00 40 27 FF 
1c2cc     00 12 06 F6 | 	mov	arg01, ##1317011456
1c2d0     0F 15 02 F6 | 	mov	arg02, local01
1c2d4     C4 F3 BF FD | 	call	#__system___float_mul
1c2d8     FD 12 02 F6 | 	mov	arg01, result1
1c2dc     00 14 06 F6 | 	mov	arg02, #0
1c2e0     80 F8 BF FD | 	call	#__system___float_tointeger
1c2e4     FD 22 52 FD | 	qvector	local03, result1
1c2e8     87 24 20 FF 
1c2ec     DB 23 06 F6 | 	mov	local03, ##1078530011
1c2f0     19 12 62 FD | 	getqy	arg01
1c2f4     01 12 C6 F0 | 	sar	arg01, #1
1c2f8     09 13 52 F6 | 	abs	arg01, arg01 wc
1c2fc     1F 24 C6 C9 |  if_b	decod	local04, #31
1c300     00 24 06 36 |  if_ae	mov	local04, #0
1c304     90 EF BF FD | 	call	#__system___float_fromuns
1c308     12 FB 61 F5 | 	xor	result1, local04
1c30c     FD 12 02 F6 | 	mov	arg01, result1
1c310     00 40 27 FF 
1c314     00 14 06 F6 | 	mov	arg02, ##1317011456
1c318     84 F5 BF FD | 	call	#__system___float_div
1c31c     FD 14 02 F6 | 	mov	arg02, result1
1c320     11 13 02 F6 | 	mov	arg01, local03
1c324     74 F3 BF FD | 	call	#__system___float_mul
1c328                 | LR__2681
1c328     A7 F0 03 F6 | 	mov	ptra, fp
1c32c     B2 00 A0 FD | 	call	#popregs_
1c330                 | __system____builtin_atan2f_ret
1c330     2D 00 64 FD | 	ret
1c334                 | 
1c334                 | __system____builtin_exp2f
1c334     04 4A 05 F6 | 	mov	COUNT_, #4
1c338     A8 00 A0 FD | 	call	#pushregs_
1c33c     09 1F 02 F6 | 	mov	local01, arg01
1c340     00 7F 21 FF 
1c344     00 14 06 F6 | 	mov	arg02, ##1123942400
1c348     01 16 66 F6 | 	neg	arg03, #1
1c34c     80 F7 BF FD | 	call	#__system___float_cmp
1c350     00 FA 55 F2 | 	cmps	result1, #0 wc
1c354     00 C0 3F 3F 
1c358     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1c35c     DC 00 90 3D |  if_ae	jmp	#LR__2691
1c360     0F 13 02 F6 | 	mov	arg01, local01
1c364     00 7F 61 FF 
1c368     00 14 06 F6 | 	mov	arg02, ##-1023541248
1c36c     01 16 06 F6 | 	mov	arg03, #1
1c370     5C F7 BF FD | 	call	#__system___float_cmp
1c374     00 FA 55 F2 | 	cmps	result1, #0 wc
1c378     00 FA 05 C6 |  if_b	mov	result1, #0
1c37c     BC 00 90 CD |  if_b	jmp	#LR__2691
1c380     0F 13 02 F6 | 	mov	arg01, local01
1c384     00 14 06 F6 | 	mov	arg02, #0
1c388     D8 F7 BF FD | 	call	#__system___float_tointeger
1c38c     FD 20 02 F6 | 	mov	local02, result1
1c390     10 13 52 F6 | 	abs	arg01, local02 wc
1c394     1F 22 C6 C9 |  if_b	decod	local03, #31
1c398     00 22 06 36 |  if_ae	mov	local03, #0
1c39c     F8 EE BF FD | 	call	#__system___float_fromuns
1c3a0     11 FB 61 F5 | 	xor	result1, local03
1c3a4     FD 14 02 F6 | 	mov	arg02, result1
1c3a8     0F 13 02 F6 | 	mov	arg01, local01
1c3ac     1F 14 E6 F4 | 	bitnot	arg02, #31
1c3b0     18 EF BF FD | 	call	#__system___float_add
1c3b4     FD 24 02 F6 | 	mov	local04, result1
1c3b8     12 13 02 F6 | 	mov	arg01, local04
1c3bc     00 14 06 F6 | 	mov	arg02, #0
1c3c0     01 16 06 F6 | 	mov	arg03, #1
1c3c4     08 F7 BF FD | 	call	#__system___float_cmp
1c3c8     00 FA 55 F2 | 	cmps	result1, #0 wc
1c3cc     18 00 90 3D |  if_ae	jmp	#LR__2690
1c3d0     12 13 02 F6 | 	mov	arg01, local04
1c3d4     00 C0 1F FF 
1c3d8     00 14 06 F6 | 	mov	arg02, ##1065353216
1c3dc     EC EE BF FD | 	call	#__system___float_add
1c3e0     FD 24 02 F6 | 	mov	local04, result1
1c3e4     01 20 86 F1 | 	sub	local02, #1
1c3e8                 | LR__2690
1c3e8     7F 20 06 F1 | 	add	local02, #127
1c3ec     17 20 66 F0 | 	shl	local02, #23
1c3f0     12 13 02 F6 | 	mov	arg01, local04
1c3f4     00 80 26 FF 
1c3f8     00 14 06 F6 | 	mov	arg02, ##1291845632
1c3fc     9C F2 BF FD | 	call	#__system___float_mul
1c400     FD 12 02 F6 | 	mov	arg01, result1
1c404     00 14 06 F6 | 	mov	arg02, #0
1c408     58 F7 BF FD | 	call	#__system___float_tointeger
1c40c     FD 24 0A F6 | 	mov	local04, result1 wz
1c410     10 FB 01 A6 |  if_e	mov	result1, local02
1c414     24 00 90 AD |  if_e	jmp	#LR__2691
1c418     3E 24 26 F4 | 	bith	local04, #62
1c41c     0F 24 62 FD | 	qexp	local04
1c420     10 13 02 F6 | 	mov	arg01, local02
1c424     18 14 62 FD | 	getqx	arg02
1c428     01 14 06 F1 | 	add	arg02, #1
1c42c     01 14 46 F0 | 	shr	arg02, #1
1c430     00 80 1F FF 
1c434     00 14 06 F1 | 	add	arg02, ##1056964608
1c438     60 F2 BF FD | 	call	#__system___float_mul
1c43c                 | LR__2691
1c43c     A7 F0 03 F6 | 	mov	ptra, fp
1c440     B2 00 A0 FD | 	call	#popregs_
1c444                 | __system____builtin_exp2f_ret
1c444     2D 00 64 FD | 	ret
1c448                 | 
1c448                 | __system____builtin_log2f
1c448     06 4A 05 F6 | 	mov	COUNT_, #6
1c44c     A8 00 A0 FD | 	call	#pushregs_
1c450     09 1F 02 F6 | 	mov	local01, arg01
1c454     09 21 0A F6 | 	mov	local02, arg01 wz
1c458     00 00 40 5F 
1c45c     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
1c460     00 40 00 AF 
1c464     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1c468     08 01 90 AD |  if_e	jmp	#LR__2704
1c46c     00 20 56 F2 | 	cmps	local02, #0 wc
1c470     00 E0 3F CF 
1c474     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1c478     F8 00 90 CD |  if_b	jmp	#LR__2704
1c47c     0F 13 02 F6 | 	mov	arg01, local01
1c480     00 90 20 FF 
1c484     00 14 06 F6 | 	mov	arg02, ##1092616192
1c488     01 16 06 F6 | 	mov	arg03, #1
1c48c     40 F6 BF FD | 	call	#__system___float_cmp
1c490     00 FA 0D F2 | 	cmp	result1, #0 wz
1c494     4D 2A 20 AF 
1c498     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
1c49c     D4 00 90 AD |  if_e	jmp	#LR__2704
1c4a0     0F 13 02 F6 | 	mov	arg01, local01
1c4a4     FC 16 20 FF 
1c4a8     54 14 06 F6 | 	mov	arg02, ##1076754516
1c4ac     01 16 06 F6 | 	mov	arg03, #1
1c4b0     1C F6 BF FD | 	call	#__system___float_cmp
1c4b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c4b8     55 DC 1F AF 
1c4bc     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
1c4c0     B0 00 90 AD |  if_e	jmp	#LR__2704
1c4c4     10 23 02 F6 | 	mov	local03, local02
1c4c8     17 22 46 F0 | 	shr	local03, #23
1c4cc     11 23 E2 F8 | 	getbyte	local03, local03, #0
1c4d0     17 21 06 F4 | 	bitl	local02, #279
1c4d4     10 25 02 F6 | 	mov	local04, local02
1c4d8     FF 22 0E F2 | 	cmp	local03, #255 wz
1c4dc     1C 00 90 5D |  if_ne	jmp	#LR__2700
1c4e0     00 24 0E F2 | 	cmp	local04, #0 wz
1c4e4     00 C0 3F 5F 
1c4e8     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1c4ec     00 E0 3F AF 
1c4f0     00 26 06 A6 |  if_e	mov	local05, ##2143289344
1c4f4     13 FB 01 F6 | 	mov	result1, local05
1c4f8     78 00 90 FD | 	jmp	#LR__2704
1c4fc                 | LR__2700
1c4fc     00 22 0E F2 | 	cmp	local03, #0 wz
1c500     17 24 26 54 |  if_ne	bith	local04, #23
1c504     7F 22 86 51 |  if_ne	sub	local03, #127
1c508     28 00 90 5D |  if_ne	jmp	#LR__2703
1c50c     00 24 0E F2 | 	cmp	local04, #0 wz
1c510     00 40 00 AF 
1c514     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1c518     58 00 90 AD |  if_e	jmp	#LR__2704
1c51c     7E 22 66 F6 | 	neg	local03, #126
1c520     97 08 48 FB | 	callpa	#(@LR__2702-@LR__2701)>>2,fcache_load_ptr_
1c524                 | LR__2701
1c524     17 24 2E F4 | 	testbn	local04, #23 wz
1c528     01 24 66 A0 |  if_e	shl	local04, #1
1c52c     01 22 06 A1 |  if_e	add	local03, #1
1c530     F0 FF 9F AD |  if_e	jmp	#LR__2701
1c534                 | LR__2702
1c534                 | LR__2703
1c534     0E 24 62 FD | 	qlog	local04
1c538     01 22 86 F1 | 	sub	local03, #1
1c53c     11 13 52 F6 | 	abs	arg01, local03 wc
1c540     1F 28 C6 C9 |  if_b	decod	local06, #31
1c544     00 28 06 36 |  if_ae	mov	local06, #0
1c548     18 26 62 FD | 	getqx	local05
1c54c     9B 26 06 F4 | 	bitl	local05, #155
1c550     08 26 06 F1 | 	add	local05, #8
1c554     04 26 46 F0 | 	shr	local05, #4
1c558     00 C0 1F FF 
1c55c     00 26 06 F1 | 	add	local05, ##1065353216
1c560     34 ED BF FD | 	call	#__system___float_fromuns
1c564     14 FB 61 F5 | 	xor	result1, local06
1c568     FD 14 02 F6 | 	mov	arg02, result1
1c56c     13 13 02 F6 | 	mov	arg01, local05
1c570     58 ED BF FD | 	call	#__system___float_add
1c574                 | LR__2704
1c574     A7 F0 03 F6 | 	mov	ptra, fp
1c578     B2 00 A0 FD | 	call	#popregs_
1c57c                 | __system____builtin_log2f_ret
1c57c     2D 00 64 FD | 	ret
1c580                 | 
1c580                 | __system____builtin_powf
1c580     04 4A 05 F6 | 	mov	COUNT_, #4
1c584     A8 00 A0 FD | 	call	#pushregs_
1c588     09 1F 02 F6 | 	mov	local01, arg01
1c58c     0A 21 02 F6 | 	mov	local02, arg02
1c590     10 13 02 F6 | 	mov	arg01, local02
1c594     00 14 06 F6 | 	mov	arg02, #0
1c598     C8 F5 BF FD | 	call	#__system___float_tointeger
1c59c     FD 22 02 F6 | 	mov	local03, result1
1c5a0     11 13 52 F6 | 	abs	arg01, local03 wc
1c5a4     1F 24 C6 C9 |  if_b	decod	local04, #31
1c5a8     00 24 06 36 |  if_ae	mov	local04, #0
1c5ac     E8 EC BF FD | 	call	#__system___float_fromuns
1c5b0     12 FB 61 F5 | 	xor	result1, local04
1c5b4     FD 12 02 F6 | 	mov	arg01, result1
1c5b8     10 15 02 F6 | 	mov	arg02, local02
1c5bc     01 16 06 F6 | 	mov	arg03, #1
1c5c0     0C F5 BF FD | 	call	#__system___float_cmp
1c5c4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c5c8     18 00 90 5D |  if_ne	jmp	#LR__2710
1c5cc     00 C0 1F FF 
1c5d0     00 12 06 F6 | 	mov	arg01, ##1065353216
1c5d4     0F 15 02 F6 | 	mov	arg02, local01
1c5d8     11 17 02 F6 | 	mov	arg03, local03
1c5dc     68 00 B0 FD | 	call	#__system___float_pow_n
1c5e0     58 00 90 FD | 	jmp	#LR__2711
1c5e4                 | LR__2710
1c5e4     0F 13 02 F6 | 	mov	arg01, local01
1c5e8     00 14 06 F6 | 	mov	arg02, #0
1c5ec     01 16 06 F6 | 	mov	arg03, #1
1c5f0     DC F4 BF FD | 	call	#__system___float_cmp
1c5f4     00 FA 55 F2 | 	cmps	result1, #0 wc
1c5f8     00 E0 3F CF 
1c5fc     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1c600     38 00 90 CD |  if_b	jmp	#LR__2711
1c604     0F 13 02 F6 | 	mov	arg01, local01
1c608     00 14 06 F6 | 	mov	arg02, #0
1c60c     01 16 06 F6 | 	mov	arg03, #1
1c610     BC F4 BF FD | 	call	#__system___float_cmp
1c614     00 FA 0D F2 | 	cmp	result1, #0 wz
1c618     00 FA 05 A6 |  if_e	mov	result1, #0
1c61c     1C 00 90 AD |  if_e	jmp	#LR__2711
1c620     0F 13 02 F6 | 	mov	arg01, local01
1c624     20 FE BF FD | 	call	#__system____builtin_log2f
1c628     FD 12 02 F6 | 	mov	arg01, result1
1c62c     10 15 02 F6 | 	mov	arg02, local02
1c630     68 F0 BF FD | 	call	#__system___float_mul
1c634     FD 12 02 F6 | 	mov	arg01, result1
1c638     F8 FC BF FD | 	call	#__system____builtin_exp2f
1c63c                 | LR__2711
1c63c     A7 F0 03 F6 | 	mov	ptra, fp
1c640     B2 00 A0 FD | 	call	#popregs_
1c644                 | __system____builtin_powf_ret
1c644     2D 00 64 FD | 	ret
1c648                 | 
1c648                 | __system___float_pow_n
1c648     05 4A 05 F6 | 	mov	COUNT_, #5
1c64c     A8 00 A0 FD | 	call	#pushregs_
1c650     09 1F 02 F6 | 	mov	local01, arg01
1c654     0A 21 02 F6 | 	mov	local02, arg02
1c658     0B 23 02 F6 | 	mov	local03, arg03
1c65c     00 22 56 F2 | 	cmps	local03, #0 wc
1c660     18 00 90 3D |  if_ae	jmp	#LR__2720
1c664     01 24 06 F6 | 	mov	local04, #1
1c668     11 23 62 F6 | 	neg	local03, local03
1c66c     00 22 56 F2 | 	cmps	local03, #0 wc
1c670     00 FA 05 C6 |  if_b	mov	result1, #0
1c674     94 00 90 CD |  if_b	jmp	#LR__2728
1c678     04 00 90 FD | 	jmp	#LR__2721
1c67c                 | LR__2720
1c67c     00 24 06 F6 | 	mov	local04, #0
1c680                 | LR__2721
1c680     00 C0 1F FF 
1c684     00 26 06 F6 | 	mov	local05, ##1065353216
1c688                 | LR__2722
1c688     01 22 56 F2 | 	cmps	local03, #1 wc
1c68c     30 00 90 CD |  if_b	jmp	#LR__2724
1c690     01 22 CE F7 | 	test	local03, #1 wz
1c694     10 00 90 AD |  if_e	jmp	#LR__2723
1c698     13 13 02 F6 | 	mov	arg01, local05
1c69c     10 15 02 F6 | 	mov	arg02, local02
1c6a0     F8 EF BF FD | 	call	#__system___float_mul
1c6a4     FD 26 02 F6 | 	mov	local05, result1
1c6a8                 | LR__2723
1c6a8     01 22 C6 F0 | 	sar	local03, #1
1c6ac     10 13 02 F6 | 	mov	arg01, local02
1c6b0     10 15 02 F6 | 	mov	arg02, local02
1c6b4     E4 EF BF FD | 	call	#__system___float_mul
1c6b8     FD 20 02 F6 | 	mov	local02, result1
1c6bc     C8 FF 9F FD | 	jmp	#LR__2722
1c6c0                 | LR__2724
1c6c0     00 24 0E F2 | 	cmp	local04, #0 wz
1c6c4     14 00 90 AD |  if_e	jmp	#LR__2725
1c6c8     0F 13 02 F6 | 	mov	arg01, local01
1c6cc     13 15 02 F6 | 	mov	arg02, local05
1c6d0     CC F1 BF FD | 	call	#__system___float_div
1c6d4     FD 26 02 F6 | 	mov	local05, result1
1c6d8     2C 00 90 FD | 	jmp	#LR__2727
1c6dc                 | LR__2725
1c6dc     0F 13 02 F6 | 	mov	arg01, local01
1c6e0     00 C0 1F FF 
1c6e4     00 14 06 F6 | 	mov	arg02, ##1065353216
1c6e8     01 16 06 F6 | 	mov	arg03, #1
1c6ec     E0 F3 BF FD | 	call	#__system___float_cmp
1c6f0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c6f4     10 00 90 AD |  if_e	jmp	#LR__2726
1c6f8     0F 13 02 F6 | 	mov	arg01, local01
1c6fc     13 15 02 F6 | 	mov	arg02, local05
1c700     98 EF BF FD | 	call	#__system___float_mul
1c704     FD 26 02 F6 | 	mov	local05, result1
1c708                 | LR__2726
1c708                 | LR__2727
1c708     13 FB 01 F6 | 	mov	result1, local05
1c70c                 | LR__2728
1c70c     A7 F0 03 F6 | 	mov	ptra, fp
1c710     B2 00 A0 FD | 	call	#popregs_
1c714                 | __system___float_pow_n_ret
1c714     2D 00 64 FD | 	ret
1c718                 | 
1c718                 | __system___gc_ptrs
1c718     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1c71c     00 03 02 F6 | 	mov	_var02, _var01
1c720     76 01 00 FF 
1c724     F8 03 06 F1 | 	add	_var02, ##191992
1c728     00 FD 09 FB | 	rdlong	result2, _var01 wz
1c72c     74 00 90 5D |  if_ne	jmp	#LR__2730
1c730     01 FD 01 F6 | 	mov	result2, _var02
1c734     00 FD 81 F1 | 	sub	result2, _var01
1c738     00 03 58 FC | 	wrword	#1, _var01
1c73c     00 FB 01 F6 | 	mov	result1, _var01
1c740     02 FA 05 F1 | 	add	result1, #2
1c744     36 00 80 FF 
1c748     FD 20 59 FC | 	wrword	##27792, result1
1c74c     00 FB 01 F6 | 	mov	result1, _var01
1c750     04 FA 05 F1 | 	add	result1, #4
1c754     FD 00 58 FC | 	wrword	#0, result1
1c758     00 FB 01 F6 | 	mov	result1, _var01
1c75c     06 FA 05 F1 | 	add	result1, #6
1c760     FD 02 58 FC | 	wrword	#1, result1
1c764     10 00 06 F1 | 	add	_var01, #16
1c768     FE FC 51 F6 | 	abs	result2, result2 wc
1c76c     04 FC 45 F0 | 	shr	result2, #4
1c770     FE FC 81 F6 | 	negc	result2, result2
1c774     00 FD 51 FC | 	wrword	result2, _var01
1c778     00 FD 01 F6 | 	mov	result2, _var01
1c77c     02 FC 05 F1 | 	add	result2, #2
1c780     36 00 80 FF 
1c784     FE 1E 59 FC | 	wrword	##27791, result2
1c788     00 FD 01 F6 | 	mov	result2, _var01
1c78c     04 FC 05 F1 | 	add	result2, #4
1c790     FE 00 58 FC | 	wrword	#0, result2
1c794     00 FD 01 F6 | 	mov	result2, _var01
1c798     06 FC 05 F1 | 	add	result2, #6
1c79c     FE 00 58 FC | 	wrword	#0, result2
1c7a0     10 00 86 F1 | 	sub	_var01, #16
1c7a4                 | LR__2730
1c7a4     00 FB 01 F6 | 	mov	result1, _var01
1c7a8     01 FD 01 F6 | 	mov	result2, _var02
1c7ac                 | __system___gc_ptrs_ret
1c7ac     2D 00 64 FD | 	ret
1c7b0                 | 
1c7b0                 | __system___gc_tryalloc
1c7b0     0B 4A 05 F6 | 	mov	COUNT_, #11
1c7b4     A8 00 A0 FD | 	call	#pushregs_
1c7b8     09 1F 02 F6 | 	mov	local01, arg01
1c7bc     0A 21 02 F6 | 	mov	local02, arg02
1c7c0     54 FF BF FD | 	call	#__system___gc_ptrs
1c7c4     FD 22 02 F6 | 	mov	local03, result1
1c7c8     FE 24 02 F6 | 	mov	local04, result2
1c7cc     11 27 02 F6 | 	mov	local05, local03
1c7d0     00 28 06 F6 | 	mov	local06, #0
1c7d4     97 1E 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
1c7d8                 | LR__2740
1c7d8     13 2B 02 F6 | 	mov	local07, local05
1c7dc     06 26 06 F1 | 	add	local05, #6
1c7e0     13 15 EA FA | 	rdword	arg02, local05 wz
1c7e4     11 13 02 F6 | 	mov	arg01, local03
1c7e8     00 FA 05 A6 |  if_e	mov	result1, #0
1c7ec     04 14 66 50 |  if_ne	shl	arg02, #4
1c7f0     0A 13 02 51 |  if_ne	add	arg01, arg02
1c7f4     09 FB 01 56 |  if_ne	mov	result1, arg01
1c7f8     FD 26 0A F6 | 	mov	local05, result1 wz
1c7fc     13 29 E2 5A |  if_ne	rdword	local06, local05
1c800     00 26 0E F2 | 	cmp	local05, #0 wz
1c804     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1c808     08 00 90 1D |  if_a	jmp	#LR__2742
1c80c     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
1c810     C4 FF 9F 1D |  if_a	jmp	#LR__2740
1c814                 | LR__2741
1c814                 | LR__2742
1c814     00 26 0E F2 | 	cmp	local05, #0 wz
1c818     13 FB 01 A6 |  if_e	mov	result1, local05
1c81c     3C 01 90 AD |  if_e	jmp	#LR__2745
1c820     13 FD 01 F6 | 	mov	result2, local05
1c824     06 FC 05 F1 | 	add	result2, #6
1c828     FE 2C E2 FA | 	rdword	local08, result2
1c82c     14 1F 52 F2 | 	cmps	local01, local06 wc
1c830     C0 00 90 3D |  if_ae	jmp	#LR__2744
1c834     13 1F 52 FC | 	wrword	local01, local05
1c838     13 13 02 F6 | 	mov	arg01, local05
1c83c     0F 2D 02 F6 | 	mov	local08, local01
1c840     04 2C 66 F0 | 	shl	local08, #4
1c844     16 13 02 F1 | 	add	arg01, local08
1c848     0F 29 82 F1 | 	sub	local06, local01
1c84c     09 29 52 FC | 	wrword	local06, arg01
1c850     09 2D 02 F6 | 	mov	local08, arg01
1c854     02 2C 06 F1 | 	add	local08, #2
1c858     36 00 80 FF 
1c85c     16 1F 59 FC | 	wrword	##27791, local08
1c860     13 15 0A F6 | 	mov	arg02, local05 wz
1c864     00 FA 05 A6 |  if_e	mov	result1, #0
1c868     11 15 82 51 |  if_ne	sub	arg02, local03
1c86c     04 14 46 50 |  if_ne	shr	arg02, #4
1c870     0A FB 01 56 |  if_ne	mov	result1, arg02
1c874     09 2D 02 F6 | 	mov	local08, arg01
1c878     04 2C 06 F1 | 	add	local08, #4
1c87c     16 FB 51 FC | 	wrword	result1, local08
1c880     13 2D 02 F6 | 	mov	local08, local05
1c884     06 2C 06 F1 | 	add	local08, #6
1c888     09 15 02 F6 | 	mov	arg02, arg01
1c88c     16 2D E2 FA | 	rdword	local08, local08
1c890     06 14 06 F1 | 	add	arg02, #6
1c894     0A 2D 52 FC | 	wrword	local08, arg02
1c898     09 2F 02 F6 | 	mov	local09, arg01
1c89c     17 15 0A F6 | 	mov	arg02, local09 wz
1c8a0     00 FA 05 A6 |  if_e	mov	result1, #0
1c8a4     11 15 82 51 |  if_ne	sub	arg02, local03
1c8a8     04 14 46 50 |  if_ne	shr	arg02, #4
1c8ac     0A FB 01 56 |  if_ne	mov	result1, arg02
1c8b0     FD 2C 02 F6 | 	mov	local08, result1
1c8b4     09 31 EA FA | 	rdword	local10, arg01 wz
1c8b8     00 FA 05 A6 |  if_e	mov	result1, #0
1c8bc     04 30 66 50 |  if_ne	shl	local10, #4
1c8c0     18 13 02 51 |  if_ne	add	arg01, local10
1c8c4     09 FB 01 56 |  if_ne	mov	result1, arg01
1c8c8     FD 32 0A F6 | 	mov	local11, result1 wz
1c8cc     24 00 90 AD |  if_e	jmp	#LR__2743
1c8d0     12 33 52 F2 | 	cmps	local11, local04 wc
1c8d4     1C 00 90 3D |  if_ae	jmp	#LR__2743
1c8d8     17 15 0A F6 | 	mov	arg02, local09 wz
1c8dc     00 FA 05 A6 |  if_e	mov	result1, #0
1c8e0     11 15 82 51 |  if_ne	sub	arg02, local03
1c8e4     04 14 46 50 |  if_ne	shr	arg02, #4
1c8e8     0A FB 01 56 |  if_ne	mov	result1, arg02
1c8ec     04 32 06 F1 | 	add	local11, #4
1c8f0     19 FB 51 FC | 	wrword	result1, local11
1c8f4                 | LR__2743
1c8f4                 | LR__2744
1c8f4     06 2A 06 F1 | 	add	local07, #6
1c8f8     15 2D 52 FC | 	wrword	local08, local07
1c8fc     36 00 00 FF 
1c900     80 2E 06 F6 | 	mov	local09, ##27776
1c904     10 2F 42 F5 | 	or	local09, local02
1c908     00 FA 05 F6 | 	mov	result1, #0
1c90c     01 FA 61 FD | 	cogid	result1
1c910     FD 2E 42 F5 | 	or	local09, result1
1c914     13 33 02 F6 | 	mov	local11, local05
1c918     02 32 06 F1 | 	add	local11, #2
1c91c     19 2F 52 FC | 	wrword	local09, local11
1c920     11 2F 02 F6 | 	mov	local09, local03
1c924     08 2E 06 F1 | 	add	local09, #8
1c928     13 33 02 F6 | 	mov	local11, local05
1c92c     17 2F E2 FA | 	rdword	local09, local09
1c930     06 32 06 F1 | 	add	local11, #6
1c934     19 2F 52 FC | 	wrword	local09, local11
1c938     13 15 0A F6 | 	mov	arg02, local05 wz
1c93c     00 FA 05 A6 |  if_e	mov	result1, #0
1c940     11 15 82 51 |  if_ne	sub	arg02, local03
1c944     04 14 46 50 |  if_ne	shr	arg02, #4
1c948     0A FB 01 56 |  if_ne	mov	result1, arg02
1c94c     08 22 06 F1 | 	add	local03, #8
1c950     11 FB 51 FC | 	wrword	result1, local03
1c954     08 26 06 F1 | 	add	local05, #8
1c958     13 FB 01 F6 | 	mov	result1, local05
1c95c                 | LR__2745
1c95c     A7 F0 03 F6 | 	mov	ptra, fp
1c960     B2 00 A0 FD | 	call	#popregs_
1c964                 | __system___gc_tryalloc_ret
1c964     2D 00 64 FD | 	ret
1c968                 | 
1c968                 | __system___gc_alloc_managed
1c968     01 4A 05 F6 | 	mov	COUNT_, #1
1c96c     A8 00 A0 FD | 	call	#pushregs_
1c970     09 1F 02 F6 | 	mov	local01, arg01
1c974     00 14 06 F6 | 	mov	arg02, #0
1c978     1C 00 B0 FD | 	call	#__system___gc_doalloc
1c97c     FD 14 0A F6 | 	mov	arg02, result1 wz
1c980     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
1c984     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
1c988     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
1c98c     A7 F0 03 F6 | 	mov	ptra, fp
1c990     B2 00 A0 FD | 	call	#popregs_
1c994                 | __system___gc_alloc_managed_ret
1c994     2D 00 64 FD | 	ret
1c998                 | 
1c998                 | __system___gc_doalloc
1c998     06 4A 05 F6 | 	mov	COUNT_, #6
1c99c     A8 00 A0 FD | 	call	#pushregs_
1c9a0     09 1F 0A F6 | 	mov	local01, arg01 wz
1c9a4     0A 21 02 F6 | 	mov	local02, arg02
1c9a8     00 FA 05 A6 |  if_e	mov	result1, #0
1c9ac     8C 00 90 AD |  if_e	jmp	#LR__2757
1c9b0     17 1E 06 F1 | 	add	local01, #23
1c9b4     0F 1E 26 F5 | 	andn	local01, #15
1c9b8     04 1E 46 F0 | 	shr	local01, #4
1c9bc     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1c9c0     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1c9c4     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1c9c8     E4 C1 BF FD | 	call	#__system___lockmem
1c9cc     0F 13 02 F6 | 	mov	arg01, local01
1c9d0     10 15 02 F6 | 	mov	arg02, local02
1c9d4     D8 FD BF FD | 	call	#__system___gc_tryalloc
1c9d8     FD 22 0A F6 | 	mov	local03, result1 wz
1c9dc     14 00 90 5D |  if_ne	jmp	#LR__2750
1c9e0     70 03 B0 FD | 	call	#__system___gc_docollect
1c9e4     0F 13 02 F6 | 	mov	arg01, local01
1c9e8     10 15 02 F6 | 	mov	arg02, local02
1c9ec     C0 FD BF FD | 	call	#__system___gc_tryalloc
1c9f0     FD 22 02 F6 | 	mov	local03, result1
1c9f4                 | LR__2750
1c9f4     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1c9f8     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1c9fc     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1ca00     09 01 68 FC | 	wrlong	#0, arg01
1ca04     00 22 0E F2 | 	cmp	local03, #0 wz
1ca08     2C 00 90 AD |  if_e	jmp	#LR__2756
1ca0c     04 1E 66 F0 | 	shl	local01, #4
1ca10     08 1E 86 F1 | 	sub	local01, #8
1ca14     0F 25 52 F6 | 	abs	local04, local01 wc
1ca18     02 24 46 F0 | 	shr	local04, #2
1ca1c     12 27 8A F6 | 	negc	local05, local04 wz
1ca20     11 29 02 F6 | 	mov	local06, local03
1ca24     10 00 90 AD |  if_e	jmp	#LR__2755
1ca28     97 06 48 FB | 	callpa	#(@LR__2753-@LR__2751)>>2,fcache_load_ptr_
1ca2c                 | LR__2751
1ca2c     13 05 D8 FC | 	rep	@LR__2754, local05
1ca30                 | LR__2752
1ca30     14 01 68 FC | 	wrlong	#0, local06
1ca34     04 28 06 F1 | 	add	local06, #4
1ca38                 | LR__2753
1ca38                 | LR__2754
1ca38                 | LR__2755
1ca38                 | LR__2756
1ca38     11 FB 01 F6 | 	mov	result1, local03
1ca3c                 | LR__2757
1ca3c     A7 F0 03 F6 | 	mov	ptra, fp
1ca40     B2 00 A0 FD | 	call	#popregs_
1ca44                 | __system___gc_doalloc_ret
1ca44     2D 00 64 FD | 	ret
1ca48                 | 
1ca48                 | __system___gc_isvalidptr
1ca48     F8 16 06 F4 | 	bitl	arg03, #248
1ca4c     08 16 86 F1 | 	sub	arg03, #8
1ca50     09 17 52 F2 | 	cmps	arg03, arg01 wc
1ca54     08 00 90 CD |  if_b	jmp	#LR__2760
1ca58     0A 17 52 F2 | 	cmps	arg03, arg02 wc
1ca5c     08 00 90 CD |  if_b	jmp	#LR__2761
1ca60                 | LR__2760
1ca60     00 FA 05 F6 | 	mov	result1, #0
1ca64     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
1ca68                 | LR__2761
1ca68     0B 01 02 F6 | 	mov	_var01, arg03
1ca6c     09 01 62 F5 | 	xor	_var01, arg01
1ca70     0F 00 CE F7 | 	test	_var01, #15 wz
1ca74     00 FA 05 56 |  if_ne	mov	result1, #0
1ca78     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
1ca7c     0B 01 02 F6 | 	mov	_var01, arg03
1ca80     02 00 06 F1 | 	add	_var01, #2
1ca84     00 01 E2 FA | 	rdword	_var01, _var01
1ca88     7F 00 00 FF 
1ca8c     C0 01 06 F5 | 	and	_var01, ##65472
1ca90     36 00 00 FF 
1ca94     80 00 0E F2 | 	cmp	_var01, ##27776 wz
1ca98     00 FA 05 56 |  if_ne	mov	result1, #0
1ca9c     0B FB 01 A6 |  if_e	mov	result1, arg03
1caa0                 | __system___gc_isvalidptr_ret
1caa0     2D 00 64 FD | 	ret
1caa4                 | 
1caa4                 | __system___gc_free
1caa4     09 17 02 F6 | 	mov	arg03, arg01
1caa8     6C FC BF FD | 	call	#__system___gc_ptrs
1caac     FD 12 02 F6 | 	mov	arg01, result1
1cab0     FE 14 02 F6 | 	mov	arg02, result2
1cab4     90 FF BF FD | 	call	#__system___gc_isvalidptr
1cab8     FD 14 0A F6 | 	mov	arg02, result1 wz
1cabc     28 00 90 AD |  if_e	jmp	#LR__2770
1cac0     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cac4     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cac8     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cacc     E0 C0 BF FD | 	call	#__system___lockmem
1cad0     0A 13 02 F6 | 	mov	arg01, arg02
1cad4     14 00 B0 FD | 	call	#__system___gc_dofree
1cad8     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cadc     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cae0     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cae4     09 01 68 FC | 	wrlong	#0, arg01
1cae8                 | LR__2770
1cae8                 | __system___gc_free_ret
1cae8     2D 00 64 FD | 	ret
1caec                 | 
1caec                 | __system___gc_dofree
1caec     06 4A 05 F6 | 	mov	COUNT_, #6
1caf0     A8 00 A0 FD | 	call	#pushregs_
1caf4     09 1F 02 F6 | 	mov	local01, arg01
1caf8     1C FC BF FD | 	call	#__system___gc_ptrs
1cafc     FD 20 02 F6 | 	mov	local02, result1
1cb00     FE 22 02 F6 | 	mov	local03, result2
1cb04     0F 15 02 F6 | 	mov	arg02, local01
1cb08     02 14 06 F1 | 	add	arg02, #2
1cb0c     36 00 80 FF 
1cb10     0A 1F 59 FC | 	wrword	##27791, arg02
1cb14     0F 25 02 F6 | 	mov	local04, local01
1cb18     0F 13 02 F6 | 	mov	arg01, local01
1cb1c     09 27 EA FA | 	rdword	local05, arg01 wz
1cb20     00 FA 05 A6 |  if_e	mov	result1, #0
1cb24     04 26 66 50 |  if_ne	shl	local05, #4
1cb28     13 13 02 51 |  if_ne	add	arg01, local05
1cb2c     09 FB 01 56 |  if_ne	mov	result1, arg01
1cb30     FD 28 02 F6 | 	mov	local06, result1
1cb34     97 24 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
1cb38                 | LR__2780
1cb38     04 24 06 F1 | 	add	local04, #4
1cb3c     12 15 EA FA | 	rdword	arg02, local04 wz
1cb40     10 13 02 F6 | 	mov	arg01, local02
1cb44     00 FA 05 A6 |  if_e	mov	result1, #0
1cb48     04 14 66 50 |  if_ne	shl	arg02, #4
1cb4c     0A 13 02 51 |  if_ne	add	arg01, arg02
1cb50     09 FB 01 56 |  if_ne	mov	result1, arg01
1cb54     FD 24 0A F6 | 	mov	local04, result1 wz
1cb58     24 00 90 AD |  if_e	jmp	#LR__2782
1cb5c     12 13 02 F6 | 	mov	arg01, local04
1cb60     00 FA 05 F6 | 	mov	result1, #0
1cb64     02 12 06 F1 | 	add	arg01, #2
1cb68     09 13 E2 FA | 	rdword	arg01, arg01
1cb6c     36 00 00 FF 
1cb70     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1cb74     01 FA 65 A6 |  if_e	neg	result1, #1
1cb78     00 FA 0D F2 | 	cmp	result1, #0 wz
1cb7c     B8 FF 9F AD |  if_e	jmp	#LR__2780
1cb80                 | LR__2781
1cb80                 | LR__2782
1cb80     00 24 0E F2 | 	cmp	local04, #0 wz
1cb84     10 25 02 A6 |  if_e	mov	local04, local02
1cb88     12 15 02 F6 | 	mov	arg02, local04
1cb8c     06 14 06 F1 | 	add	arg02, #6
1cb90     0F 13 02 F6 | 	mov	arg01, local01
1cb94     0A 15 E2 FA | 	rdword	arg02, arg02
1cb98     06 12 06 F1 | 	add	arg01, #6
1cb9c     09 15 52 FC | 	wrword	arg02, arg01
1cba0     0F 15 0A F6 | 	mov	arg02, local01 wz
1cba4     00 FA 05 A6 |  if_e	mov	result1, #0
1cba8     10 15 82 51 |  if_ne	sub	arg02, local02
1cbac     04 14 46 50 |  if_ne	shr	arg02, #4
1cbb0     0A FB 01 56 |  if_ne	mov	result1, arg02
1cbb4     12 15 02 F6 | 	mov	arg02, local04
1cbb8     06 14 06 F1 | 	add	arg02, #6
1cbbc     0A FB 51 FC | 	wrword	result1, arg02
1cbc0     10 25 0A F2 | 	cmp	local04, local02 wz
1cbc4     A4 00 90 AD |  if_e	jmp	#LR__2785
1cbc8     12 13 02 F6 | 	mov	arg01, local04
1cbcc     09 27 EA FA | 	rdword	local05, arg01 wz
1cbd0     00 FA 05 A6 |  if_e	mov	result1, #0
1cbd4     04 26 66 50 |  if_ne	shl	local05, #4
1cbd8     13 13 02 51 |  if_ne	add	arg01, local05
1cbdc     09 FB 01 56 |  if_ne	mov	result1, arg01
1cbe0     0F FB 09 F2 | 	cmp	result1, local01 wz
1cbe4     84 00 90 5D |  if_ne	jmp	#LR__2784
1cbe8     12 29 E2 FA | 	rdword	local06, local04
1cbec     0F 15 E2 FA | 	rdword	arg02, local01
1cbf0     0A 29 02 F1 | 	add	local06, arg02
1cbf4     12 29 52 FC | 	wrword	local06, local04
1cbf8     0F 29 02 F6 | 	mov	local06, local01
1cbfc     02 28 06 F1 | 	add	local06, #2
1cc00     14 01 58 FC | 	wrword	#0, local06
1cc04     0F 13 02 F6 | 	mov	arg01, local01
1cc08     09 27 EA FA | 	rdword	local05, arg01 wz
1cc0c     00 FA 05 A6 |  if_e	mov	result1, #0
1cc10     04 26 66 50 |  if_ne	shl	local05, #4
1cc14     13 13 02 51 |  if_ne	add	arg01, local05
1cc18     09 FB 01 56 |  if_ne	mov	result1, arg01
1cc1c     FD 28 02 F6 | 	mov	local06, result1
1cc20     11 29 52 F2 | 	cmps	local06, local03 wc
1cc24     20 00 90 3D |  if_ae	jmp	#LR__2783
1cc28     12 15 0A F6 | 	mov	arg02, local04 wz
1cc2c     00 FA 05 A6 |  if_e	mov	result1, #0
1cc30     10 15 82 51 |  if_ne	sub	arg02, local02
1cc34     04 14 46 50 |  if_ne	shr	arg02, #4
1cc38     0A FB 01 56 |  if_ne	mov	result1, arg02
1cc3c     14 15 02 F6 | 	mov	arg02, local06
1cc40     04 14 06 F1 | 	add	arg02, #4
1cc44     0A FB 51 FC | 	wrword	result1, arg02
1cc48                 | LR__2783
1cc48     0F 15 02 F6 | 	mov	arg02, local01
1cc4c     06 14 06 F1 | 	add	arg02, #6
1cc50     12 FD 01 F6 | 	mov	result2, local04
1cc54     0A 15 E2 FA | 	rdword	arg02, arg02
1cc58     06 FC 05 F1 | 	add	result2, #6
1cc5c     FE 14 52 FC | 	wrword	arg02, result2
1cc60     06 1E 06 F1 | 	add	local01, #6
1cc64     0F 01 58 FC | 	wrword	#0, local01
1cc68     12 1F 02 F6 | 	mov	local01, local04
1cc6c                 | LR__2784
1cc6c                 | LR__2785
1cc6c     0F 13 02 F6 | 	mov	arg01, local01
1cc70     09 27 EA FA | 	rdword	local05, arg01 wz
1cc74     00 FA 05 A6 |  if_e	mov	result1, #0
1cc78     04 26 66 50 |  if_ne	shl	local05, #4
1cc7c     13 13 02 51 |  if_ne	add	arg01, local05
1cc80     09 FB 01 56 |  if_ne	mov	result1, arg01
1cc84     FD 14 0A F6 | 	mov	arg02, result1 wz
1cc88     B8 00 90 AD |  if_e	jmp	#LR__2787
1cc8c     11 15 52 F2 | 	cmps	arg02, local03 wc
1cc90     B0 00 90 3D |  if_ae	jmp	#LR__2787
1cc94     0A 13 02 F6 | 	mov	arg01, arg02
1cc98     00 FA 05 F6 | 	mov	result1, #0
1cc9c     02 12 06 F1 | 	add	arg01, #2
1cca0     09 13 E2 FA | 	rdword	arg01, arg01
1cca4     36 00 00 FF 
1cca8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1ccac     01 FA 65 A6 |  if_e	neg	result1, #1
1ccb0     00 FA 0D F2 | 	cmp	result1, #0 wz
1ccb4     8C 00 90 AD |  if_e	jmp	#LR__2787
1ccb8     0F 25 02 F6 | 	mov	local04, local01
1ccbc     12 29 E2 FA | 	rdword	local06, local04
1ccc0     0A 13 02 F6 | 	mov	arg01, arg02
1ccc4     09 1F E2 FA | 	rdword	local01, arg01
1ccc8     0F 29 02 F1 | 	add	local06, local01
1cccc     12 29 52 FC | 	wrword	local06, local04
1ccd0     09 29 02 F6 | 	mov	local06, arg01
1ccd4     06 28 06 F1 | 	add	local06, #6
1ccd8     12 1F 02 F6 | 	mov	local01, local04
1ccdc     14 29 E2 FA | 	rdword	local06, local06
1cce0     06 1E 06 F1 | 	add	local01, #6
1cce4     0F 29 52 FC | 	wrword	local06, local01
1cce8     09 29 02 F6 | 	mov	local06, arg01
1ccec     02 28 06 F1 | 	add	local06, #2
1ccf0     14 55 59 FC | 	wrword	#170, local06
1ccf4     09 29 02 F6 | 	mov	local06, arg01
1ccf8     06 28 06 F1 | 	add	local06, #6
1ccfc     14 01 58 FC | 	wrword	#0, local06
1cd00     09 27 EA FA | 	rdword	local05, arg01 wz
1cd04     00 FA 05 A6 |  if_e	mov	result1, #0
1cd08     04 26 66 50 |  if_ne	shl	local05, #4
1cd0c     13 13 02 51 |  if_ne	add	arg01, local05
1cd10     09 FB 01 56 |  if_ne	mov	result1, arg01
1cd14     FD 28 0A F6 | 	mov	local06, result1 wz
1cd18     28 00 90 AD |  if_e	jmp	#LR__2786
1cd1c     11 29 52 F2 | 	cmps	local06, local03 wc
1cd20     20 00 90 3D |  if_ae	jmp	#LR__2786
1cd24     12 15 0A F6 | 	mov	arg02, local04 wz
1cd28     00 FA 05 A6 |  if_e	mov	result1, #0
1cd2c     10 15 82 51 |  if_ne	sub	arg02, local02
1cd30     04 14 46 50 |  if_ne	shr	arg02, #4
1cd34     0A FB 01 56 |  if_ne	mov	result1, arg02
1cd38     14 25 02 F6 | 	mov	local04, local06
1cd3c     04 24 06 F1 | 	add	local04, #4
1cd40     12 FB 51 FC | 	wrword	result1, local04
1cd44                 | LR__2786
1cd44                 | LR__2787
1cd44     14 FB 01 F6 | 	mov	result1, local06
1cd48     A7 F0 03 F6 | 	mov	ptra, fp
1cd4c     B2 00 A0 FD | 	call	#popregs_
1cd50                 | __system___gc_dofree_ret
1cd50     2D 00 64 FD | 	ret
1cd54                 | 
1cd54                 | __system___gc_docollect
1cd54     05 4A 05 F6 | 	mov	COUNT_, #5
1cd58     A8 00 A0 FD | 	call	#pushregs_
1cd5c     B8 F9 BF FD | 	call	#__system___gc_ptrs
1cd60     FE 1E 02 F6 | 	mov	local01, result2
1cd64     FD 20 02 F6 | 	mov	local02, result1
1cd68     10 13 02 F6 | 	mov	arg01, local02
1cd6c     09 23 EA FA | 	rdword	local03, arg01 wz
1cd70     00 FA 05 A6 |  if_e	mov	result1, #0
1cd74     04 22 66 50 |  if_ne	shl	local03, #4
1cd78     11 13 02 51 |  if_ne	add	arg01, local03
1cd7c     09 FB 01 56 |  if_ne	mov	result1, arg01
1cd80     FD 24 0A F6 | 	mov	local04, result1 wz
1cd84     00 FA 05 F6 | 	mov	result1, #0
1cd88     01 FA 61 FD | 	cogid	result1
1cd8c     FD 26 02 F6 | 	mov	local05, result1
1cd90     48 00 90 AD |  if_e	jmp	#LR__2792
1cd94     97 22 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
1cd98                 | LR__2790
1cd98     0F 25 52 F2 | 	cmps	local04, local01 wc
1cd9c     3C 00 90 3D |  if_ae	jmp	#LR__2792
1cda0     12 15 02 F6 | 	mov	arg02, local04
1cda4     02 14 06 F1 | 	add	arg02, #2
1cda8     0A 15 E2 FA | 	rdword	arg02, arg02
1cdac     20 14 26 F5 | 	andn	arg02, #32
1cdb0     12 13 02 F6 | 	mov	arg01, local04
1cdb4     02 12 06 F1 | 	add	arg01, #2
1cdb8     09 15 52 FC | 	wrword	arg02, arg01
1cdbc     12 13 02 F6 | 	mov	arg01, local04
1cdc0     09 23 EA FA | 	rdword	local03, arg01 wz
1cdc4     00 FA 05 A6 |  if_e	mov	result1, #0
1cdc8     04 22 66 50 |  if_ne	shl	local03, #4
1cdcc     11 13 02 51 |  if_ne	add	arg01, local03
1cdd0     09 FB 01 56 |  if_ne	mov	result1, arg01
1cdd4     FD 24 0A F6 | 	mov	local04, result1 wz
1cdd8     BC FF 9F 5D |  if_ne	jmp	#LR__2790
1cddc                 | LR__2791
1cddc                 | LR__2792
1cddc     00 22 06 F6 | 	mov	local03, #0
1cde0     00 12 06 F6 | 	mov	arg01, #0
1cde4     A0 BD BF FD | 	call	#__system____topofstack
1cde8     FD 14 02 F6 | 	mov	arg02, result1
1cdec     11 13 02 F6 | 	mov	arg01, local03
1cdf0     90 00 B0 FD | 	call	#__system___gc_markhub
1cdf4     1C 01 B0 FD | 	call	#__system___gc_markcog
1cdf8     10 13 02 F6 | 	mov	arg01, local02
1cdfc     09 23 EA FA | 	rdword	local03, arg01 wz
1ce00     00 FA 05 A6 |  if_e	mov	result1, #0
1ce04     04 22 66 50 |  if_ne	shl	local03, #4
1ce08     11 13 02 51 |  if_ne	add	arg01, local03
1ce0c     09 FB 01 56 |  if_ne	mov	result1, arg01
1ce10     FD 20 0A F6 | 	mov	local02, result1 wz
1ce14     60 00 90 AD |  if_e	jmp	#LR__2796
1ce18                 | LR__2793
1ce18     10 25 02 F6 | 	mov	local04, local02
1ce1c     12 13 02 F6 | 	mov	arg01, local04
1ce20     09 23 EA FA | 	rdword	local03, arg01 wz
1ce24     00 FA 05 A6 |  if_e	mov	result1, #0
1ce28     04 22 66 50 |  if_ne	shl	local03, #4
1ce2c     11 13 02 51 |  if_ne	add	arg01, local03
1ce30     09 FB 01 56 |  if_ne	mov	result1, arg01
1ce34     FD 20 02 F6 | 	mov	local02, result1
1ce38     12 15 02 F6 | 	mov	arg02, local04
1ce3c     02 14 06 F1 | 	add	arg02, #2
1ce40     0A 15 E2 FA | 	rdword	arg02, arg02
1ce44     20 14 CE F7 | 	test	arg02, #32 wz
1ce48     10 14 CE A7 |  if_e	test	arg02, #16 wz
1ce4c     1C 00 90 5D |  if_ne	jmp	#LR__2795
1ce50     0A 15 42 F8 | 	getnib	arg02, arg02, #0
1ce54     13 15 0A F2 | 	cmp	arg02, local05 wz
1ce58     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
1ce5c     0C 00 90 5D |  if_ne	jmp	#LR__2794
1ce60     12 13 02 F6 | 	mov	arg01, local04
1ce64     84 FC BF FD | 	call	#__system___gc_dofree
1ce68     FD 20 02 F6 | 	mov	local02, result1
1ce6c                 | LR__2794
1ce6c                 | LR__2795
1ce6c     00 20 0E F2 | 	cmp	local02, #0 wz
1ce70     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
1ce74     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2793
1ce78                 | LR__2796
1ce78     A7 F0 03 F6 | 	mov	ptra, fp
1ce7c     B2 00 A0 FD | 	call	#popregs_
1ce80                 | __system___gc_docollect_ret
1ce80     2D 00 64 FD | 	ret
1ce84                 | 
1ce84                 | __system___gc_markhub
1ce84     04 4A 05 F6 | 	mov	COUNT_, #4
1ce88     A8 00 A0 FD | 	call	#pushregs_
1ce8c     09 1F 02 F6 | 	mov	local01, arg01
1ce90     0A 21 02 F6 | 	mov	local02, arg02
1ce94     80 F8 BF FD | 	call	#__system___gc_ptrs
1ce98     FD 22 02 F6 | 	mov	local03, result1
1ce9c     FE 24 02 F6 | 	mov	local04, result2
1cea0                 | LR__2800
1cea0     10 1F 52 F2 | 	cmps	local01, local02 wc
1cea4     60 00 90 3D |  if_ae	jmp	#LR__2801
1cea8     0F 17 02 FB | 	rdlong	arg03, local01
1ceac     04 1E 06 F1 | 	add	local01, #4
1ceb0     12 15 02 F6 | 	mov	arg02, local04
1ceb4     11 13 02 F6 | 	mov	arg01, local03
1ceb8     8C FB BF FD | 	call	#__system___gc_isvalidptr
1cebc     FD 16 0A F6 | 	mov	arg03, result1 wz
1cec0     DC FF 9F AD |  if_e	jmp	#LR__2800
1cec4     0B 13 02 F6 | 	mov	arg01, arg03
1cec8     00 FA 05 F6 | 	mov	result1, #0
1cecc     02 12 06 F1 | 	add	arg01, #2
1ced0     09 13 E2 FA | 	rdword	arg01, arg01
1ced4     36 00 00 FF 
1ced8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1cedc     01 FA 65 A6 |  if_e	neg	result1, #1
1cee0     00 FA 0D F2 | 	cmp	result1, #0 wz
1cee4     B8 FF 9F 5D |  if_ne	jmp	#LR__2800
1cee8     0B FD 01 F6 | 	mov	result2, arg03
1ceec     02 FC 05 F1 | 	add	result2, #2
1cef0     FE FC E1 FA | 	rdword	result2, result2
1cef4     0F FC 25 F5 | 	andn	result2, #15
1cef8     2E FC 45 F5 | 	or	result2, #46
1cefc     02 16 06 F1 | 	add	arg03, #2
1cf00     0B FD 51 FC | 	wrword	result2, arg03
1cf04     98 FF 9F FD | 	jmp	#LR__2800
1cf08                 | LR__2801
1cf08     A7 F0 03 F6 | 	mov	ptra, fp
1cf0c     B2 00 A0 FD | 	call	#popregs_
1cf10                 | __system___gc_markhub_ret
1cf10     2D 00 64 FD | 	ret
1cf14                 | 
1cf14                 | __system___gc_markcog
1cf14     04 4A 05 F6 | 	mov	COUNT_, #4
1cf18     A8 00 A0 FD | 	call	#pushregs_
1cf1c     F8 F7 BF FD | 	call	#__system___gc_ptrs
1cf20     FD 1E 02 F6 | 	mov	local01, result1
1cf24     FE 20 02 F6 | 	mov	local02, result2
1cf28     EF 23 06 F6 | 	mov	local03, #495
1cf2c                 | LR__2810
1cf2c                 | 	'.live	local03
1cf2c     00 22 96 F9 | 	alts	local03, #0
1cf30     11 25 02 F6 | 	mov	local04, local03
1cf34     0F 13 02 F6 | 	mov	arg01, local01
1cf38     10 15 02 F6 | 	mov	arg02, local02
1cf3c     12 17 02 F6 | 	mov	arg03, local04
1cf40     04 FB BF FD | 	call	#__system___gc_isvalidptr
1cf44     00 FA 0D F2 | 	cmp	result1, #0 wz
1cf48     18 00 90 AD |  if_e	jmp	#LR__2811
1cf4c     FD 24 02 F6 | 	mov	local04, result1
1cf50     02 24 06 F1 | 	add	local04, #2
1cf54     12 25 E2 FA | 	rdword	local04, local04
1cf58     20 24 46 F5 | 	or	local04, #32
1cf5c     02 FA 05 F1 | 	add	result1, #2
1cf60     FD 24 52 FC | 	wrword	local04, result1
1cf64                 | LR__2811
1cf64     01 22 86 F1 | 	sub	local03, #1
1cf68     00 22 56 F2 | 	cmps	local03, #0 wc
1cf6c     BC FF 9F 3D |  if_ae	jmp	#LR__2810
1cf70     A7 F0 03 F6 | 	mov	ptra, fp
1cf74     B2 00 A0 FD | 	call	#popregs_
1cf78                 | __system___gc_markcog_ret
1cf78     2D 00 64 FD | 	ret
1cf7c                 | 
1cf7c                 | __system__opendir
1cf7c     06 4A 05 F6 | 	mov	COUNT_, #6
1cf80     A8 00 A0 FD | 	call	#pushregs_
1cf84     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1cf88     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
1cf8c     09 15 02 F6 | 	mov	arg02, arg01
1cf90     0F 13 02 F6 | 	mov	arg01, local01
1cf94     00 16 06 F6 | 	mov	arg03, #0
1cf98     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1cf9c     A8 C3 BF FD | 	call	#__system____getvfsforfile
1cfa0     FD 20 0A F6 | 	mov	local02, result1 wz
1cfa4     10 00 90 AD |  if_e	jmp	#LR__2820
1cfa8     28 20 06 F1 | 	add	local02, #40
1cfac     10 17 0A FB | 	rdlong	arg03, local02 wz
1cfb0     28 20 86 F1 | 	sub	local02, #40
1cfb4     14 00 90 5D |  if_ne	jmp	#LR__2821
1cfb8                 | LR__2820
1cfb8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1cfbc     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1cfc0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1cfc4     00 FA 05 F6 | 	mov	result1, #0
1cfc8     90 00 90 FD | 	jmp	#LR__2823
1cfcc                 | LR__2821
1cfcc     5C 12 06 F6 | 	mov	arg01, #92
1cfd0     10 14 06 F6 | 	mov	arg02, #16
1cfd4     C0 F9 BF FD | 	call	#__system___gc_doalloc
1cfd8     FD 22 0A F6 | 	mov	local03, result1 wz
1cfdc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1cfe0     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
1cfe4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1cfe8     00 FA 05 A6 |  if_e	mov	result1, #0
1cfec     6C 00 90 AD |  if_e	jmp	#LR__2823
1cff0     28 20 06 F1 | 	add	local02, #40
1cff4     10 25 02 FB | 	rdlong	local04, local02
1cff8     12 27 02 F6 | 	mov	local05, local04
1cffc     28 20 86 F1 | 	sub	local02, #40
1d000     13 26 46 F7 | 	zerox	local05, #19
1d004     14 24 46 F0 | 	shr	local04, #20
1d008     02 24 66 F0 | 	shl	local04, #2
1d00c     ED 24 02 F1 | 	add	local04, __methods__
1d010     12 25 02 FB | 	rdlong	local04, local04
1d014     11 13 02 F6 | 	mov	arg01, local03
1d018     0F 15 02 F6 | 	mov	arg02, local01
1d01c     F2 28 02 F6 | 	mov	local06, objptr
1d020     13 E5 01 F6 | 	mov	objptr, local05
1d024     2D 24 62 FD | 	call	local04
1d028     14 E5 01 F6 | 	mov	objptr, local06
1d02c     FD 16 0A F6 | 	mov	arg03, result1 wz
1d030     20 00 90 AD |  if_e	jmp	#LR__2822
1d034     00 16 4E F2 | 	cmps	arg03, #0 wz
1d038     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d03c     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
1d040     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d044     11 13 02 F6 | 	mov	arg01, local03
1d048     58 FA BF FD | 	call	#__system___gc_free
1d04c     00 FA 05 F6 | 	mov	result1, #0
1d050     08 00 90 FD | 	jmp	#LR__2823
1d054                 | LR__2822
1d054     11 21 62 FC | 	wrlong	local02, local03
1d058     11 FB 01 F6 | 	mov	result1, local03
1d05c                 | LR__2823
1d05c     A7 F0 03 F6 | 	mov	ptra, fp
1d060     B2 00 A0 FD | 	call	#popregs_
1d064                 | __system__opendir_ret
1d064     2D 00 64 FD | 	ret
1d068                 | 
1d068                 | __system__closedir
1d068     04 4A 05 F6 | 	mov	COUNT_, #4
1d06c     A8 00 A0 FD | 	call	#pushregs_
1d070     09 1F 02 F6 | 	mov	local01, arg01
1d074     0F 13 02 FB | 	rdlong	arg01, local01
1d078     2C 12 06 F1 | 	add	arg01, #44
1d07c     09 21 02 FB | 	rdlong	local02, arg01
1d080     10 23 02 F6 | 	mov	local03, local02
1d084     13 22 46 F7 | 	zerox	local03, #19
1d088     14 20 46 F0 | 	shr	local02, #20
1d08c     02 20 66 F0 | 	shl	local02, #2
1d090     ED 20 02 F1 | 	add	local02, __methods__
1d094     10 21 02 FB | 	rdlong	local02, local02
1d098     0F 13 02 F6 | 	mov	arg01, local01
1d09c     F2 24 02 F6 | 	mov	local04, objptr
1d0a0     11 E5 01 F6 | 	mov	objptr, local03
1d0a4     2D 20 62 FD | 	call	local02
1d0a8     12 E5 01 F6 | 	mov	objptr, local04
1d0ac     FD 24 02 F6 | 	mov	local04, result1
1d0b0     0F 13 02 F6 | 	mov	arg01, local01
1d0b4     EC F9 BF FD | 	call	#__system___gc_free
1d0b8     00 24 4E F2 | 	cmps	local04, #0 wz
1d0bc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d0c0     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
1d0c4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d0c8     01 FA 65 56 |  if_ne	neg	result1, #1
1d0cc     00 FA 05 A6 |  if_e	mov	result1, #0
1d0d0     A7 F0 03 F6 | 	mov	ptra, fp
1d0d4     B2 00 A0 FD | 	call	#popregs_
1d0d8                 | __system__closedir_ret
1d0d8     2D 00 64 FD | 	ret
1d0dc                 | 
1d0dc                 | __system__readdir
1d0dc     04 4A 05 F6 | 	mov	COUNT_, #4
1d0e0     A8 00 A0 FD | 	call	#pushregs_
1d0e4     09 15 0A FB | 	rdlong	arg02, arg01 wz
1d0e8     08 12 06 F1 | 	add	arg01, #8
1d0ec     09 1F 02 F6 | 	mov	local01, arg01
1d0f0     08 12 86 F1 | 	sub	arg01, #8
1d0f4     00 FA 05 A6 |  if_e	mov	result1, #0
1d0f8     5C 00 90 AD |  if_e	jmp	#LR__2831
1d0fc     30 14 06 F1 | 	add	arg02, #48
1d100     0A 21 02 FB | 	rdlong	local02, arg02
1d104     10 23 02 F6 | 	mov	local03, local02
1d108     13 22 46 F7 | 	zerox	local03, #19
1d10c     14 20 46 F0 | 	shr	local02, #20
1d110     02 20 66 F0 | 	shl	local02, #2
1d114     ED 20 02 F1 | 	add	local02, __methods__
1d118     10 21 02 FB | 	rdlong	local02, local02
1d11c     0F 15 02 F6 | 	mov	arg02, local01
1d120     F2 24 02 F6 | 	mov	local04, objptr
1d124     11 E5 01 F6 | 	mov	objptr, local03
1d128     2D 20 62 FD | 	call	local02
1d12c     12 E5 01 F6 | 	mov	objptr, local04
1d130     00 FA 4D F2 | 	cmps	result1, #0 wz
1d134     1C 00 90 AD |  if_e	jmp	#LR__2830
1d138     01 FA 55 F2 | 	cmps	result1, #1 wc
1d13c     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
1d140     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1d144     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
1d148     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1d14c     00 FA 05 F6 | 	mov	result1, #0
1d150     04 00 90 FD | 	jmp	#LR__2831
1d154                 | LR__2830
1d154     0F FB 01 F6 | 	mov	result1, local01
1d158                 | LR__2831
1d158     A7 F0 03 F6 | 	mov	ptra, fp
1d15c     B2 00 A0 FD | 	call	#popregs_
1d160                 | __system__readdir_ret
1d160     2D 00 64 FD | 	ret
1d164                 | 
1d164                 | __system___openraw
1d164     15 4A 05 F6 | 	mov	COUNT_, #21
1d168     A8 00 A0 FD | 	call	#pushregs_
1d16c     09 1F 02 F6 | 	mov	local01, arg01
1d170     0A 21 02 F6 | 	mov	local02, arg02
1d174     0B 23 02 F6 | 	mov	local03, arg03
1d178     0C 25 02 F6 | 	mov	local04, arg04
1d17c     04 26 06 F6 | 	mov	local05, #4
1d180     0F 29 02 F6 | 	mov	local06, local01
1d184     00 2A 06 F6 | 	mov	local07, #0
1d188     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1d18c     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
1d190     16 13 02 F6 | 	mov	arg01, local08
1d194     10 15 02 F6 | 	mov	arg02, local02
1d198     00 16 06 F6 | 	mov	arg03, #0
1d19c     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1d1a0     A4 C1 BF FD | 	call	#__system____getvfsforfile
1d1a4     FD 2E 0A F6 | 	mov	local09, result1 wz
1d1a8     10 00 90 AD |  if_e	jmp	#LR__2840
1d1ac     20 2E 06 F1 | 	add	local09, #32
1d1b0     17 FB 09 FB | 	rdlong	result1, local09 wz
1d1b4     20 2E 86 F1 | 	sub	local09, #32
1d1b8     14 00 90 5D |  if_ne	jmp	#LR__2841
1d1bc                 | LR__2840
1d1bc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d1c0     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1d1c4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d1c8     01 FA 65 F6 | 	neg	result1, #1
1d1cc     8C 02 90 FD | 	jmp	#LR__2854
1d1d0                 | LR__2841
1d1d0     14 13 02 F6 | 	mov	arg01, local06
1d1d4     00 14 06 F6 | 	mov	arg02, #0
1d1d8     34 16 06 F6 | 	mov	arg03, #52
1d1dc     09 31 02 F6 | 	mov	local10, arg01
1d1e0     98 00 A0 FD | 	call	#\builtin_bytefill_
1d1e4     20 2E 06 F1 | 	add	local09, #32
1d1e8     17 33 02 FB | 	rdlong	local11, local09
1d1ec     19 35 02 F6 | 	mov	local12, local11
1d1f0     19 37 02 F6 | 	mov	local13, local11
1d1f4     20 2E 86 F1 | 	sub	local09, #32
1d1f8     1B 39 02 F6 | 	mov	local14, local13
1d1fc     13 34 46 F7 | 	zerox	local12, #19
1d200     14 38 46 F0 | 	shr	local14, #20
1d204     02 38 66 F0 | 	shl	local14, #2
1d208     ED 38 02 F1 | 	add	local14, __methods__
1d20c     1C 39 02 FB | 	rdlong	local14, local14
1d210     14 3B 02 F6 | 	mov	local15, local06
1d214     16 3D 02 F6 | 	mov	local16, local08
1d218     11 3F 02 F6 | 	mov	local17, local03
1d21c     1D 13 02 F6 | 	mov	arg01, local15
1d220     1E 15 02 F6 | 	mov	arg02, local16
1d224     1F 17 02 F6 | 	mov	arg03, local17
1d228     F2 40 02 F6 | 	mov	local18, objptr
1d22c     1A E5 01 F6 | 	mov	objptr, local12
1d230     2D 38 62 FD | 	call	local14
1d234     20 E5 01 F6 | 	mov	objptr, local18
1d238     FD 42 0A F6 | 	mov	local19, result1 wz
1d23c     04 22 CE 57 |  if_ne	test	local03, #4 wz
1d240     58 00 90 AD |  if_e	jmp	#LR__2842
1d244     24 2E 06 F1 | 	add	local09, #36
1d248     17 33 02 FB | 	rdlong	local11, local09
1d24c     19 35 02 F6 | 	mov	local12, local11
1d250     19 37 02 F6 | 	mov	local13, local11
1d254     24 2E 86 F1 | 	sub	local09, #36
1d258     1B 39 02 F6 | 	mov	local14, local13
1d25c     13 34 46 F7 | 	zerox	local12, #19
1d260     14 38 46 F0 | 	shr	local14, #20
1d264     02 38 66 F0 | 	shl	local14, #2
1d268     ED 38 02 F1 | 	add	local14, __methods__
1d26c     1C 39 02 FB | 	rdlong	local14, local14
1d270     14 3B 02 F6 | 	mov	local15, local06
1d274     16 3D 02 F6 | 	mov	local16, local08
1d278     12 3F 02 F6 | 	mov	local17, local04
1d27c     1D 13 02 F6 | 	mov	arg01, local15
1d280     1E 15 02 F6 | 	mov	arg02, local16
1d284     1F 17 02 F6 | 	mov	arg03, local17
1d288     F2 40 02 F6 | 	mov	local18, objptr
1d28c     1A E5 01 F6 | 	mov	objptr, local12
1d290     2D 38 62 FD | 	call	local14
1d294     20 E5 01 F6 | 	mov	objptr, local18
1d298     FD 42 02 F6 | 	mov	local19, result1
1d29c                 | LR__2842
1d29c     00 42 0E F2 | 	cmp	local19, #0 wz
1d2a0     8C 01 90 5D |  if_ne	jmp	#LR__2852
1d2a4     11 45 02 F6 | 	mov	local20, local03
1d2a8     03 44 0E F5 | 	and	local20, #3 wz
1d2ac     02 26 46 55 |  if_ne	or	local05, #2
1d2b0     01 44 0E F2 | 	cmp	local20, #1 wz
1d2b4     01 26 46 55 |  if_ne	or	local05, #1
1d2b8     20 22 CE F7 | 	test	local03, #32 wz
1d2bc     C0 26 46 55 |  if_ne	or	local05, #192
1d2c0     08 28 06 F1 | 	add	local06, #8
1d2c4     14 27 62 FC | 	wrlong	local05, local06
1d2c8     0C 28 06 F1 | 	add	local06, #12
1d2cc     14 47 0A FB | 	rdlong	local21, local06 wz
1d2d0     14 28 86 F1 | 	sub	local06, #20
1d2d4     18 00 90 5D |  if_ne	jmp	#LR__2843
1d2d8     04 2E 06 F1 | 	add	local09, #4
1d2dc     17 47 02 FB | 	rdlong	local21, local09
1d2e0     04 2E 86 F1 | 	sub	local09, #4
1d2e4     14 28 06 F1 | 	add	local06, #20
1d2e8     14 47 62 FC | 	wrlong	local21, local06
1d2ec     14 28 86 F1 | 	sub	local06, #20
1d2f0                 | LR__2843
1d2f0     18 28 06 F1 | 	add	local06, #24
1d2f4     14 47 0A FB | 	rdlong	local21, local06 wz
1d2f8     18 28 86 F1 | 	sub	local06, #24
1d2fc     18 00 90 5D |  if_ne	jmp	#LR__2844
1d300     08 2E 06 F1 | 	add	local09, #8
1d304     17 47 02 FB | 	rdlong	local21, local09
1d308     08 2E 86 F1 | 	sub	local09, #8
1d30c     18 28 06 F1 | 	add	local06, #24
1d310     14 47 62 FC | 	wrlong	local21, local06
1d314     18 28 86 F1 | 	sub	local06, #24
1d318                 | LR__2844
1d318     24 28 06 F1 | 	add	local06, #36
1d31c     14 47 0A FB | 	rdlong	local21, local06 wz
1d320     24 28 86 F1 | 	sub	local06, #36
1d324     17 47 02 AB |  if_e	rdlong	local21, local09
1d328     24 28 06 A1 |  if_e	add	local06, #36
1d32c     14 47 62 AC |  if_e	wrlong	local21, local06
1d330     24 28 86 A1 |  if_e	sub	local06, #36
1d334     28 28 06 F1 | 	add	local06, #40
1d338     14 47 0A FB | 	rdlong	local21, local06 wz
1d33c     28 28 86 F1 | 	sub	local06, #40
1d340     18 00 90 5D |  if_ne	jmp	#LR__2845
1d344     10 2E 06 F1 | 	add	local09, #16
1d348     17 47 02 FB | 	rdlong	local21, local09
1d34c     10 2E 86 F1 | 	sub	local09, #16
1d350     28 28 06 F1 | 	add	local06, #40
1d354     14 47 62 FC | 	wrlong	local21, local06
1d358     28 28 86 F1 | 	sub	local06, #40
1d35c                 | LR__2845
1d35c     30 28 06 F1 | 	add	local06, #48
1d360     14 47 0A FB | 	rdlong	local21, local06 wz
1d364     30 28 86 F1 | 	sub	local06, #48
1d368     18 00 90 5D |  if_ne	jmp	#LR__2846
1d36c     0C 2E 06 F1 | 	add	local09, #12
1d370     17 47 02 FB | 	rdlong	local21, local09
1d374     0C 2E 86 F1 | 	sub	local09, #12
1d378     30 28 06 F1 | 	add	local06, #48
1d37c     14 47 62 FC | 	wrlong	local21, local06
1d380     30 28 86 F1 | 	sub	local06, #48
1d384                 | LR__2846
1d384     1C 28 06 F1 | 	add	local06, #28
1d388     14 47 0A FB | 	rdlong	local21, local06 wz
1d38c     1C 28 86 F1 | 	sub	local06, #28
1d390     1C 00 90 5D |  if_ne	jmp	#LR__2847
1d394     01 2A 06 F6 | 	mov	local07, #1
1d398     F2 12 02 F6 | 	mov	arg01, objptr
1d39c     00 60 03 FF 
1d3a0     00 12 46 F5 | 	or	arg01, ##113246208
1d3a4     1C 28 06 F1 | 	add	local06, #28
1d3a8     14 13 62 FC | 	wrlong	arg01, local06
1d3ac     1C 28 86 F1 | 	sub	local06, #28
1d3b0                 | LR__2847
1d3b0     20 28 06 F1 | 	add	local06, #32
1d3b4     14 47 0A FB | 	rdlong	local21, local06 wz
1d3b8     20 28 86 F1 | 	sub	local06, #32
1d3bc     1C 00 90 5D |  if_ne	jmp	#LR__2848
1d3c0     01 2A 06 F6 | 	mov	local07, #1
1d3c4     F2 12 02 F6 | 	mov	arg01, objptr
1d3c8     00 68 03 FF 
1d3cc     00 12 46 F5 | 	or	arg01, ##114294784
1d3d0     20 28 06 F1 | 	add	local06, #32
1d3d4     14 13 62 FC | 	wrlong	arg01, local06
1d3d8     20 28 86 F1 | 	sub	local06, #32
1d3dc                 | LR__2848
1d3dc     2C 28 06 F1 | 	add	local06, #44
1d3e0     14 47 0A FB | 	rdlong	local21, local06 wz
1d3e4     2C 28 86 F1 | 	sub	local06, #44
1d3e8     44 00 90 5D |  if_ne	jmp	#LR__2851
1d3ec     14 2E 06 F1 | 	add	local09, #20
1d3f0     17 47 0A FB | 	rdlong	local21, local09 wz
1d3f4     14 2E 86 F1 | 	sub	local09, #20
1d3f8     18 00 90 AD |  if_e	jmp	#LR__2849
1d3fc     14 2E 06 F1 | 	add	local09, #20
1d400     17 47 02 FB | 	rdlong	local21, local09
1d404     2C 28 06 F1 | 	add	local06, #44
1d408     14 47 62 FC | 	wrlong	local21, local06
1d40c     2C 28 86 F1 | 	sub	local06, #44
1d410     1C 00 90 FD | 	jmp	#LR__2850
1d414                 | LR__2849
1d414     01 2A 06 F6 | 	mov	local07, #1
1d418     F2 12 02 F6 | 	mov	arg01, objptr
1d41c     00 70 03 FF 
1d420     00 12 46 F5 | 	or	arg01, ##115343360
1d424     2C 28 06 F1 | 	add	local06, #44
1d428     14 13 62 FC | 	wrlong	arg01, local06
1d42c     2C 28 86 F1 | 	sub	local06, #44
1d430                 | LR__2850
1d430                 | LR__2851
1d430                 | LR__2852
1d430     00 2A 0E F2 | 	cmp	local07, #0 wz
1d434     14 13 02 56 |  if_ne	mov	arg01, local06
1d438     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
1d43c     00 42 0E F2 | 	cmp	local19, #0 wz
1d440     00 12 06 A6 |  if_e	mov	arg01, #0
1d444     10 00 90 5D |  if_ne	jmp	#LR__2853
1d448     00 12 4E F2 | 	cmps	arg01, #0 wz
1d44c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d450     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d454     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d458                 | LR__2853
1d458     21 FB 01 F6 | 	mov	result1, local19
1d45c                 | LR__2854
1d45c     A7 F0 03 F6 | 	mov	ptra, fp
1d460     B2 00 A0 FD | 	call	#popregs_
1d464                 | __system___openraw_ret
1d464     2D 00 64 FD | 	ret
1d468                 | 
1d468                 | __system___closeraw
1d468     05 4A 05 F6 | 	mov	COUNT_, #5
1d46c     A8 00 A0 FD | 	call	#pushregs_
1d470     09 1F 02 F6 | 	mov	local01, arg01
1d474     00 20 06 F6 | 	mov	local02, #0
1d478     08 1E 06 F1 | 	add	local01, #8
1d47c     0F FB 09 FB | 	rdlong	result1, local01 wz
1d480     08 1E 86 F1 | 	sub	local01, #8
1d484     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d488     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1d48c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d490     01 FA 65 A6 |  if_e	neg	result1, #1
1d494     A8 00 90 AD |  if_e	jmp	#LR__2862
1d498     2C 1E 06 F1 | 	add	local01, #44
1d49c     0F FB 09 FB | 	rdlong	result1, local01 wz
1d4a0     2C 1E 86 F1 | 	sub	local01, #44
1d4a4     38 00 90 AD |  if_e	jmp	#LR__2860
1d4a8     2C 1E 06 F1 | 	add	local01, #44
1d4ac     0F 23 02 FB | 	rdlong	local03, local01
1d4b0     11 25 02 F6 | 	mov	local04, local03
1d4b4     2C 1E 86 F1 | 	sub	local01, #44
1d4b8     13 24 46 F7 | 	zerox	local04, #19
1d4bc     14 22 46 F0 | 	shr	local03, #20
1d4c0     02 22 66 F0 | 	shl	local03, #2
1d4c4     ED 22 02 F1 | 	add	local03, __methods__
1d4c8     11 23 02 FB | 	rdlong	local03, local03
1d4cc     0F 13 02 F6 | 	mov	arg01, local01
1d4d0     F2 26 02 F6 | 	mov	local05, objptr
1d4d4     12 E5 01 F6 | 	mov	objptr, local04
1d4d8     2D 22 62 FD | 	call	local03
1d4dc     13 E5 01 F6 | 	mov	objptr, local05
1d4e0                 | LR__2860
1d4e0     24 1E 06 F1 | 	add	local01, #36
1d4e4     0F 27 0A FB | 	rdlong	local05, local01 wz
1d4e8     24 1E 86 F1 | 	sub	local01, #36
1d4ec     3C 00 90 AD |  if_e	jmp	#LR__2861
1d4f0     24 1E 06 F1 | 	add	local01, #36
1d4f4     0F 23 02 FB | 	rdlong	local03, local01
1d4f8     11 25 02 F6 | 	mov	local04, local03
1d4fc     24 1E 86 F1 | 	sub	local01, #36
1d500     13 24 46 F7 | 	zerox	local04, #19
1d504     14 22 46 F0 | 	shr	local03, #20
1d508     02 22 66 F0 | 	shl	local03, #2
1d50c     ED 22 02 F1 | 	add	local03, __methods__
1d510     11 23 02 FB | 	rdlong	local03, local03
1d514     0F 13 02 F6 | 	mov	arg01, local01
1d518     F2 26 02 F6 | 	mov	local05, objptr
1d51c     12 E5 01 F6 | 	mov	objptr, local04
1d520     2D 22 62 FD | 	call	local03
1d524     13 E5 01 F6 | 	mov	objptr, local05
1d528     FD 20 02 F6 | 	mov	local02, result1
1d52c                 | LR__2861
1d52c     0F 13 02 F6 | 	mov	arg01, local01
1d530     00 14 06 F6 | 	mov	arg02, #0
1d534     34 16 06 F6 | 	mov	arg03, #52
1d538     98 00 A0 FD | 	call	#\builtin_bytefill_
1d53c     10 FB 01 F6 | 	mov	result1, local02
1d540                 | LR__2862
1d540     A7 F0 03 F6 | 	mov	ptra, fp
1d544     B2 00 A0 FD | 	call	#popregs_
1d548                 | __system___closeraw_ret
1d548     2D 00 64 FD | 	ret
1d54c                 | 
1d54c                 | __system___vfs_open_sdcardx
1d54c     0B 4A 05 F6 | 	mov	COUNT_, #11
1d550     A8 00 A0 FD | 	call	#pushregs_
1d554     09 23 02 F6 | 	mov	local03, arg01
1d558     0A 25 02 F6 | 	mov	local04, arg02
1d55c     0B 27 02 F6 | 	mov	local05, arg03
1d560     0C 29 02 F6 | 	mov	local06, arg04
1d564     01 00 00 FF 
1d568     24 12 06 F6 | 	mov	arg01, ##548
1d56c     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
1d570     FD 2A 02 F6 | 	mov	local07, result1
1d574     01 00 00 FF 
1d578     34 12 06 F6 | 	mov	arg01, ##564
1d57c     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
1d580     FD 2C 02 F6 | 	mov	local08, result1
1d584     11 19 02 F6 | 	mov	arg04, local03
1d588     1F 18 C6 F0 | 	sar	arg04, #31
1d58c     11 17 02 F6 | 	mov	arg03, local03
1d590     01 12 06 F6 | 	mov	arg01, #1
1d594     00 14 06 F6 | 	mov	arg02, #0
1d598     48 DC BF FD | 	call	#__system___int64_shl
1d59c     FD 1E 02 F6 | 	mov	local01, result1
1d5a0     FE 2E 02 F6 | 	mov	local09, result2
1d5a4     12 19 02 F6 | 	mov	arg04, local04
1d5a8     1F 18 C6 F0 | 	sar	arg04, #31
1d5ac     12 17 02 F6 | 	mov	arg03, local04
1d5b0     01 12 06 F6 | 	mov	arg01, #1
1d5b4     00 14 06 F6 | 	mov	arg02, #0
1d5b8     28 DC BF FD | 	call	#__system___int64_shl
1d5bc     FD 1E 42 F5 | 	or	local01, result1
1d5c0     FE 2E 42 F5 | 	or	local09, result2
1d5c4     13 19 02 F6 | 	mov	arg04, local05
1d5c8     1F 18 C6 F0 | 	sar	arg04, #31
1d5cc     13 17 02 F6 | 	mov	arg03, local05
1d5d0     01 12 06 F6 | 	mov	arg01, #1
1d5d4     00 14 06 F6 | 	mov	arg02, #0
1d5d8     08 DC BF FD | 	call	#__system___int64_shl
1d5dc     FD 1E 42 F5 | 	or	local01, result1
1d5e0     FE 2E 42 F5 | 	or	local09, result2
1d5e4     14 19 02 F6 | 	mov	arg04, local06
1d5e8     1F 18 C6 F0 | 	sar	arg04, #31
1d5ec     14 17 02 F6 | 	mov	arg03, local06
1d5f0     01 12 06 F6 | 	mov	arg01, #1
1d5f4     00 14 06 F6 | 	mov	arg02, #0
1d5f8     E8 DB BF FD | 	call	#__system___int64_shl
1d5fc     17 15 02 F6 | 	mov	arg02, local09
1d600     FD 1E 42 F5 | 	or	local01, result1
1d604     0A FD 41 F5 | 	or	result2, arg02
1d608     FE 20 02 F6 | 	mov	local02, result2
1d60c     0F 13 02 F6 | 	mov	arg01, local01
1d610     10 15 02 F6 | 	mov	arg02, local02
1d614     04 DC BF FD | 	call	#__system___usepins
1d618     00 FA 0D F2 | 	cmp	result1, #0 wz
1d61c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d620     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
1d624     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d628     00 FA 05 A6 |  if_e	mov	result1, #0
1d62c     B4 00 90 AD |  if_e	jmp	#LR__2872
1d630     0F 31 02 F6 | 	mov	local10, local01
1d634     10 2F 02 F6 | 	mov	local09, local02
1d638     01 00 00 FF 
1d63c     08 2A 06 F1 | 	add	local07, ##520
1d640     15 31 62 FC | 	wrlong	local10, local07
1d644     04 2A 06 F1 | 	add	local07, #4
1d648     15 2F 62 FC | 	wrlong	local09, local07
1d64c     01 00 00 FF 
1d650     0C 2A 86 F1 | 	sub	local07, ##524
1d654     14 1B 02 F6 | 	mov	arg05, local06
1d658     00 12 06 F6 | 	mov	arg01, #0
1d65c     11 15 02 F6 | 	mov	arg02, local03
1d660     12 17 02 F6 | 	mov	arg03, local04
1d664     13 19 02 F6 | 	mov	arg04, local05
1d668     F2 30 02 F6 | 	mov	local10, objptr
1d66c     15 E5 01 F6 | 	mov	objptr, local07
1d670     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
1d674     18 E5 01 F6 | 	mov	objptr, local10
1d678     FD 32 0A F6 | 	mov	local11, result1 wz
1d67c     24 00 90 5D |  if_ne	jmp	#LR__2870
1d680     40 01 00 FF 
1d684     26 15 06 F6 | 	mov	arg02, ##@LR__4267
1d688     16 13 02 F6 | 	mov	arg01, local08
1d68c     00 16 06 F6 | 	mov	arg03, #0
1d690     F2 32 02 F6 | 	mov	local11, objptr
1d694     15 E5 01 F6 | 	mov	objptr, local07
1d698     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
1d69c     19 E5 01 F6 | 	mov	objptr, local11
1d6a0     FD 32 02 F6 | 	mov	local11, result1
1d6a4                 | LR__2870
1d6a4     00 32 0E F2 | 	cmp	local11, #0 wz
1d6a8     24 00 90 AD |  if_e	jmp	#LR__2871
1d6ac     0F 13 02 F6 | 	mov	arg01, local01
1d6b0     10 15 02 F6 | 	mov	arg02, local02
1d6b4     B8 DB BF FD | 	call	#__system___freepins
1d6b8     19 13 6A F6 | 	neg	arg01, local11 wz
1d6bc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d6c0     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d6c4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d6c8     00 FA 05 F6 | 	mov	result1, #0
1d6cc     14 00 90 FD | 	jmp	#LR__2872
1d6d0                 | LR__2871
1d6d0     15 13 02 F6 | 	mov	arg01, local07
1d6d4     F2 32 02 F6 | 	mov	local11, objptr
1d6d8     15 E5 01 F6 | 	mov	objptr, local07
1d6dc     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
1d6e0     19 E5 01 F6 | 	mov	objptr, local11
1d6e4                 | LR__2872
1d6e4     A7 F0 03 F6 | 	mov	ptra, fp
1d6e8     B2 00 A0 FD | 	call	#popregs_
1d6ec                 | __system___vfs_open_sdcardx_ret
1d6ec     2D 00 64 FD | 	ret
1d6f0                 | 
1d6f0                 | __system____default_getc
1d6f0     03 4A 05 F6 | 	mov	COUNT_, #3
1d6f4     A8 00 A0 FD | 	call	#pushregs_
1d6f8     09 1F 02 F6 | 	mov	local01, arg01
1d6fc     0F 21 02 FB | 	rdlong	local02, local01
1d700     08 20 06 F1 | 	add	local02, #8
1d704     10 23 02 FB | 	rdlong	local03, local02
1d708     02 22 CE F7 | 	test	local03, #2 wz
1d70c     0F 13 02 56 |  if_ne	mov	arg01, local01
1d710     00 01 B0 5D |  if_ne	call	#__system____default_flush
1d714     10 23 02 FB | 	rdlong	local03, local02
1d718     01 22 46 F5 | 	or	local03, #1
1d71c     10 23 62 FC | 	wrlong	local03, local02
1d720     08 20 86 F1 | 	sub	local02, #8
1d724     10 23 0A FB | 	rdlong	local03, local02 wz
1d728     0C 00 90 5D |  if_ne	jmp	#LR__2880
1d72c     0F 13 02 F6 | 	mov	arg01, local01
1d730     64 16 B0 FD | 	call	#__system____default_filbuf
1d734     FD 22 02 F6 | 	mov	local03, result1
1d738                 | LR__2880
1d738     01 22 56 F2 | 	cmps	local03, #1 wc
1d73c     01 FA 65 C6 |  if_b	neg	result1, #1
1d740     1C 00 90 CD |  if_b	jmp	#LR__2881
1d744     01 22 86 F1 | 	sub	local03, #1
1d748     10 23 62 FC | 	wrlong	local03, local02
1d74c     04 20 06 F1 | 	add	local02, #4
1d750     10 23 02 FB | 	rdlong	local03, local02
1d754     11 FB C1 FA | 	rdbyte	result1, local03
1d758     01 22 06 F1 | 	add	local03, #1
1d75c     10 23 62 FC | 	wrlong	local03, local02
1d760                 | LR__2881
1d760     A7 F0 03 F6 | 	mov	ptra, fp
1d764     B2 00 A0 FD | 	call	#popregs_
1d768                 | __system____default_getc_ret
1d768     2D 00 64 FD | 	ret
1d76c                 | 
1d76c                 | __system____default_putc
1d76c     06 4A 05 F6 | 	mov	COUNT_, #6
1d770     A8 00 A0 FD | 	call	#pushregs_
1d774     09 1F 02 F6 | 	mov	local01, arg01
1d778     0A 21 02 F6 | 	mov	local02, arg02
1d77c     10 23 02 FB | 	rdlong	local03, local02
1d780     08 22 06 F1 | 	add	local03, #8
1d784     11 FB 01 FB | 	rdlong	result1, local03
1d788     01 FA CD F7 | 	test	result1, #1 wz
1d78c     10 13 02 56 |  if_ne	mov	arg01, local02
1d790     80 00 B0 5D |  if_ne	call	#__system____default_flush
1d794     11 25 02 FB | 	rdlong	local04, local03
1d798     02 24 46 F5 | 	or	local04, #2
1d79c     11 25 62 FC | 	wrlong	local04, local03
1d7a0     08 22 86 F1 | 	sub	local03, #8
1d7a4     11 27 02 FB | 	rdlong	local05, local03
1d7a8     10 22 06 F1 | 	add	local03, #16
1d7ac     11 15 02 FB | 	rdlong	arg02, local03
1d7b0     10 22 86 F1 | 	sub	local03, #16
1d7b4     13 FB 01 F6 | 	mov	result1, local05
1d7b8     0A FB 01 F1 | 	add	result1, arg02
1d7bc     FD 1E 42 FC | 	wrbyte	local01, result1
1d7c0     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1d7c4     01 26 06 F1 | 	add	local05, #1
1d7c8     11 27 62 FC | 	wrlong	local05, local03
1d7cc     06 20 06 F1 | 	add	local02, #6
1d7d0     10 29 EA FA | 	rdword	local06, local02 wz
1d7d4     06 20 86 F1 | 	sub	local02, #6
1d7d8     0C 22 06 51 |  if_ne	add	local03, #12
1d7dc     11 25 02 5B |  if_ne	rdlong	local04, local03
1d7e0     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1d7e4     0C 00 90 AD |  if_e	jmp	#LR__2890
1d7e8     0A 1E 0E F2 | 	cmp	local01, #10 wz
1d7ec     01 28 0E A2 |  if_e	cmp	local06, #1 wz
1d7f0     10 00 90 5D |  if_ne	jmp	#LR__2891
1d7f4                 | LR__2890
1d7f4     10 13 02 F6 | 	mov	arg01, local02
1d7f8     18 00 B0 FD | 	call	#__system____default_flush
1d7fc     00 FA 0D F2 | 	cmp	result1, #0 wz
1d800     01 1E 66 56 |  if_ne	neg	local01, #1
1d804                 | LR__2891
1d804     0F FB 01 F6 | 	mov	result1, local01
1d808     A7 F0 03 F6 | 	mov	ptra, fp
1d80c     B2 00 A0 FD | 	call	#popregs_
1d810                 | __system____default_putc_ret
1d810     2D 00 64 FD | 	ret
1d814                 | 
1d814                 | __system____default_flush
1d814     06 4A 05 F6 | 	mov	COUNT_, #6
1d818     A8 00 A0 FD | 	call	#pushregs_
1d81c     09 1F 02 F6 | 	mov	local01, arg01
1d820     0F 21 02 FB | 	rdlong	local02, local01
1d824     10 23 02 FB | 	rdlong	local03, local02
1d828     08 20 06 F1 | 	add	local02, #8
1d82c     10 FB 01 FB | 	rdlong	result1, local02
1d830     08 20 86 F1 | 	sub	local02, #8
1d834     02 FA CD F7 | 	test	result1, #2 wz
1d838     D0 00 90 AD |  if_e	jmp	#LR__2902
1d83c     01 22 56 F2 | 	cmps	local03, #1 wc
1d840     20 01 90 CD |  if_b	jmp	#LR__2904
1d844     08 1E 06 F1 | 	add	local01, #8
1d848     0F FB 01 FB | 	rdlong	result1, local01
1d84c     08 1E 86 F1 | 	sub	local01, #8
1d850     40 FA CD F7 | 	test	result1, #64 wz
1d854     68 00 90 AD |  if_e	jmp	#LR__2901
1d858     08 1E 06 F1 | 	add	local01, #8
1d85c     0F 17 02 FB | 	rdlong	arg03, local01
1d860     08 1E 86 F1 | 	sub	local01, #8
1d864     80 16 CE F7 | 	test	arg03, #128 wz
1d868     54 00 90 AD |  if_e	jmp	#LR__2900
1d86c     30 1E 06 F1 | 	add	local01, #48
1d870     0F 25 02 FB | 	rdlong	local04, local01
1d874     12 27 02 F6 | 	mov	local05, local04
1d878     30 1E 86 F1 | 	sub	local01, #48
1d87c     13 26 46 F7 | 	zerox	local05, #19
1d880     14 24 46 F0 | 	shr	local04, #20
1d884     02 24 66 F0 | 	shl	local04, #2
1d888     ED 24 02 F1 | 	add	local04, __methods__
1d88c     12 25 02 FB | 	rdlong	local04, local04
1d890     0F 13 02 F6 | 	mov	arg01, local01
1d894     00 14 06 F6 | 	mov	arg02, #0
1d898     02 16 06 F6 | 	mov	arg03, #2
1d89c     F2 28 02 F6 | 	mov	local06, objptr
1d8a0     13 E5 01 F6 | 	mov	objptr, local05
1d8a4     2D 24 62 FD | 	call	local04
1d8a8     14 E5 01 F6 | 	mov	objptr, local06
1d8ac     08 1E 06 F1 | 	add	local01, #8
1d8b0     0F 29 02 FB | 	rdlong	local06, local01
1d8b4     80 28 26 F5 | 	andn	local06, #128
1d8b8     0F 29 62 FC | 	wrlong	local06, local01
1d8bc     08 1E 86 F1 | 	sub	local01, #8
1d8c0                 | LR__2900
1d8c0                 | LR__2901
1d8c0     18 1E 06 F1 | 	add	local01, #24
1d8c4     0F 25 02 FB | 	rdlong	local04, local01
1d8c8     12 27 02 F6 | 	mov	local05, local04
1d8cc     18 1E 86 F1 | 	sub	local01, #24
1d8d0     13 26 46 F7 | 	zerox	local05, #19
1d8d4     14 24 46 F0 | 	shr	local04, #20
1d8d8     02 24 66 F0 | 	shl	local04, #2
1d8dc     ED 24 02 F1 | 	add	local04, __methods__
1d8e0     12 25 02 FB | 	rdlong	local04, local04
1d8e4     10 20 06 F1 | 	add	local02, #16
1d8e8     10 15 02 FB | 	rdlong	arg02, local02
1d8ec     10 20 86 F1 | 	sub	local02, #16
1d8f0     0F 13 02 F6 | 	mov	arg01, local01
1d8f4     11 17 02 F6 | 	mov	arg03, local03
1d8f8     F2 28 02 F6 | 	mov	local06, objptr
1d8fc     13 E5 01 F6 | 	mov	objptr, local05
1d900     2D 24 62 FD | 	call	local04
1d904     14 E5 01 F6 | 	mov	objptr, local06
1d908     58 00 90 FD | 	jmp	#LR__2904
1d90c                 | LR__2902
1d90c     08 20 06 F1 | 	add	local02, #8
1d910     10 29 02 FB | 	rdlong	local06, local02
1d914     08 20 86 F1 | 	sub	local02, #8
1d918     01 28 CE F7 | 	test	local06, #1 wz
1d91c     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1d920     40 00 90 AD |  if_e	jmp	#LR__2903
1d924     30 1E 06 F1 | 	add	local01, #48
1d928     0F 25 02 FB | 	rdlong	local04, local01
1d92c     12 27 02 F6 | 	mov	local05, local04
1d930     30 1E 86 F1 | 	sub	local01, #48
1d934     13 26 46 F7 | 	zerox	local05, #19
1d938     14 24 46 F0 | 	shr	local04, #20
1d93c     02 24 66 F0 | 	shl	local04, #2
1d940     ED 24 02 F1 | 	add	local04, __methods__
1d944     12 25 02 FB | 	rdlong	local04, local04
1d948     0F 13 02 F6 | 	mov	arg01, local01
1d94c     11 15 62 F6 | 	neg	arg02, local03
1d950     01 16 06 F6 | 	mov	arg03, #1
1d954     F2 28 02 F6 | 	mov	local06, objptr
1d958     13 E5 01 F6 | 	mov	objptr, local05
1d95c     2D 24 62 FD | 	call	local04
1d960     14 E5 01 F6 | 	mov	objptr, local06
1d964                 | LR__2903
1d964                 | LR__2904
1d964     10 01 68 FC | 	wrlong	#0, local02
1d968     04 20 06 F1 | 	add	local02, #4
1d96c     10 01 68 FC | 	wrlong	#0, local02
1d970     04 20 06 F1 | 	add	local02, #4
1d974     10 01 68 FC | 	wrlong	#0, local02
1d978     00 FA 05 F6 | 	mov	result1, #0
1d97c     A7 F0 03 F6 | 	mov	ptra, fp
1d980     B2 00 A0 FD | 	call	#popregs_
1d984                 | __system____default_flush_ret
1d984     2D 00 64 FD | 	ret
1d988                 | 
1d988                 | __system____default_buffer_init
1d988     02 4A 05 F6 | 	mov	COUNT_, #2
1d98c     A8 00 A0 FD | 	call	#pushregs_
1d990     09 1F 02 F6 | 	mov	local01, arg01
1d994     0F 21 02 FB | 	rdlong	local02, local01
1d998     0F 13 02 F6 | 	mov	arg01, local01
1d99c     F8 02 B0 FD | 	call	#__system___isatty
1d9a0     00 FA 0D F2 | 	cmp	result1, #0 wz
1d9a4     06 1E 06 51 |  if_ne	add	local01, #6
1d9a8     0F 0B 58 5C |  if_ne	wrword	#5, local01
1d9ac     06 1E 06 A1 |  if_e	add	local01, #6
1d9b0     0F 0D 58 AC |  if_e	wrword	#6, local01
1d9b4     14 20 06 F1 | 	add	local02, #20
1d9b8     10 1F 02 F6 | 	mov	local01, local02
1d9bc     04 20 86 F1 | 	sub	local02, #4
1d9c0     10 1F 62 FC | 	wrlong	local01, local02
1d9c4     04 20 86 F1 | 	sub	local02, #4
1d9c8     02 00 80 FF 
1d9cc     10 01 68 FC | 	wrlong	##1024, local02
1d9d0     00 FA 05 F6 | 	mov	result1, #0
1d9d4     A7 F0 03 F6 | 	mov	ptra, fp
1d9d8     B2 00 A0 FD | 	call	#popregs_
1d9dc                 | __system____default_buffer_init_ret
1d9dc     2D 00 64 FD | 	ret
1d9e0                 | 
1d9e0                 | __system__stat
1d9e0     04 4A 05 F6 | 	mov	COUNT_, #4
1d9e4     A8 00 A0 FD | 	call	#pushregs_
1d9e8     0A 1F 02 F6 | 	mov	local01, arg02
1d9ec     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1d9f0     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
1d9f4     09 15 02 F6 | 	mov	arg02, arg01
1d9f8     10 13 02 F6 | 	mov	arg01, local02
1d9fc     00 16 06 F6 | 	mov	arg03, #0
1da00     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1da04     40 B9 BF FD | 	call	#__system____getvfsforfile
1da08     FD 22 0A F6 | 	mov	local03, result1 wz
1da0c     10 00 90 AD |  if_e	jmp	#LR__2910
1da10     34 22 06 F1 | 	add	local03, #52
1da14     11 17 0A FB | 	rdlong	arg03, local03 wz
1da18     34 22 86 F1 | 	sub	local03, #52
1da1c     14 00 90 5D |  if_ne	jmp	#LR__2911
1da20                 | LR__2910
1da20     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1da24     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1da28     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1da2c     01 FA 65 F6 | 	neg	result1, #1
1da30     68 00 90 FD | 	jmp	#LR__2912
1da34                 | LR__2911
1da34     0F 13 02 F6 | 	mov	arg01, local01
1da38     00 14 06 F6 | 	mov	arg02, #0
1da3c     30 16 06 F6 | 	mov	arg03, #48
1da40     09 25 02 F6 | 	mov	local04, arg01
1da44     98 00 A0 FD | 	call	#\builtin_bytefill_
1da48     12 FB 01 F6 | 	mov	result1, local04
1da4c     10 13 CA FA | 	rdbyte	arg01, local02 wz
1da50     08 1E 06 A1 |  if_e	add	local01, #8
1da54     08 00 80 AF 
1da58     0F FF 6B AC |  if_e	wrlong	##4607, local01
1da5c     00 FA 05 A6 |  if_e	mov	result1, #0
1da60     38 00 90 AD |  if_e	jmp	#LR__2912
1da64     34 22 06 F1 | 	add	local03, #52
1da68     11 23 02 FB | 	rdlong	local03, local03
1da6c     11 25 02 F6 | 	mov	local04, local03
1da70     13 22 46 F7 | 	zerox	local03, #19
1da74     14 24 46 F0 | 	shr	local04, #20
1da78     02 24 66 F0 | 	shl	local04, #2
1da7c     ED 24 02 F1 | 	add	local04, __methods__
1da80     12 25 02 FB | 	rdlong	local04, local04
1da84     10 13 02 F6 | 	mov	arg01, local02
1da88     0F 15 02 F6 | 	mov	arg02, local01
1da8c     F2 20 02 F6 | 	mov	local02, objptr
1da90     11 E5 01 F6 | 	mov	objptr, local03
1da94     2D 24 62 FD | 	call	local04
1da98     10 E5 01 F6 | 	mov	objptr, local02
1da9c                 | LR__2912
1da9c     A7 F0 03 F6 | 	mov	ptra, fp
1daa0     B2 00 A0 FD | 	call	#popregs_
1daa4                 | __system__stat_ret
1daa4     2D 00 64 FD | 	ret
1daa8                 | 
1daa8                 | __system__read
1daa8     0A 12 16 F2 | 	cmp	arg01, #10 wc
1daac     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1dab0     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1dab4     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1dab8     01 FA 65 36 |  if_ae	neg	result1, #1
1dabc     20 00 90 3D |  if_ae	jmp	#LR__2920
1dac0     34 12 06 FD | 	qmul	arg01, #52
1dac4     02 00 00 FF 
1dac8     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1dacc     18 12 62 FD | 	getqx	arg01
1dad0     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1dad4     02 00 00 FF 
1dad8     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1dadc     D0 0F B0 FD | 	call	#__system___vfsread
1dae0                 | LR__2920
1dae0                 | __system__read_ret
1dae0     2D 00 64 FD | 	ret
1dae4                 | 
1dae4                 | __system__close
1dae4     0A 12 16 F2 | 	cmp	arg01, #10 wc
1dae8     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1daec     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1daf0     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1daf4     01 FA 65 36 |  if_ae	neg	result1, #1
1daf8     20 00 90 3D |  if_ae	jmp	#LR__2930
1dafc     34 12 06 FD | 	qmul	arg01, #52
1db00     02 00 00 FF 
1db04     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1db08     18 12 62 FD | 	getqx	arg01
1db0c     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1db10     02 00 00 FF 
1db14     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1db18     4C F9 BF FD | 	call	#__system___closeraw
1db1c                 | LR__2930
1db1c                 | __system__close_ret
1db1c     2D 00 64 FD | 	ret
1db20                 | 
1db20                 | __system__lseek
1db20     06 4A 05 F6 | 	mov	COUNT_, #6
1db24     A8 00 A0 FD | 	call	#pushregs_
1db28     0A 12 16 F2 | 	cmp	arg01, #10 wc
1db2c     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1db30     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1db34     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1db38     01 FA 65 36 |  if_ae	neg	result1, #1
1db3c     C4 00 90 3D |  if_ae	jmp	#LR__2941
1db40     34 12 06 FD | 	qmul	arg01, #52
1db44     02 00 00 FF 
1db48     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1db4c     18 1E 62 FD | 	getqx	local01
1db50     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
1db54     30 1E 06 F1 | 	add	local01, #48
1db58     0F 13 0A FB | 	rdlong	arg01, local01 wz
1db5c     30 1E 86 F1 | 	sub	local01, #48
1db60     02 00 00 FF 
1db64     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1db68     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1db6c     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1db70     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1db74     01 FA 65 A6 |  if_e	neg	result1, #1
1db78     88 00 90 AD |  if_e	jmp	#LR__2941
1db7c     08 1E 06 F1 | 	add	local01, #8
1db80     0F 21 02 FB | 	rdlong	local02, local01
1db84     08 1E 86 F1 | 	sub	local01, #8
1db88     40 20 CE F7 | 	test	local02, #64 wz
1db8c     08 1E 06 51 |  if_ne	add	local01, #8
1db90     0F 21 02 5B |  if_ne	rdlong	local02, local01
1db94     80 20 46 55 |  if_ne	or	local02, #128
1db98     0F 21 62 5C |  if_ne	wrlong	local02, local01
1db9c     08 1E 86 51 |  if_ne	sub	local01, #8
1dba0     30 1E 06 F1 | 	add	local01, #48
1dba4     0F 23 02 FB | 	rdlong	local03, local01
1dba8     11 25 02 F6 | 	mov	local04, local03
1dbac     30 1E 86 F1 | 	sub	local01, #48
1dbb0     13 24 46 F7 | 	zerox	local04, #19
1dbb4     14 22 46 F0 | 	shr	local03, #20
1dbb8     02 22 66 F0 | 	shl	local03, #2
1dbbc     ED 22 02 F1 | 	add	local03, __methods__
1dbc0     11 23 02 FB | 	rdlong	local03, local03
1dbc4     0F 13 02 F6 | 	mov	arg01, local01
1dbc8     F2 26 02 F6 | 	mov	local05, objptr
1dbcc     12 E5 01 F6 | 	mov	objptr, local04
1dbd0     2D 22 62 FD | 	call	local03
1dbd4     13 E5 01 F6 | 	mov	objptr, local05
1dbd8     FD 28 02 F6 | 	mov	local06, result1
1dbdc     00 28 56 F2 | 	cmps	local06, #0 wc
1dbe0     1C 00 90 3D |  if_ae	jmp	#LR__2940
1dbe4     14 13 6A F6 | 	neg	arg01, local06 wz
1dbe8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1dbec     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1dbf0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1dbf4     01 FA 65 56 |  if_ne	neg	result1, #1
1dbf8     00 FA 05 A6 |  if_e	mov	result1, #0
1dbfc     04 00 90 FD | 	jmp	#LR__2941
1dc00                 | LR__2940
1dc00     14 FB 01 F6 | 	mov	result1, local06
1dc04                 | LR__2941
1dc04     A7 F0 03 F6 | 	mov	ptra, fp
1dc08     B2 00 A0 FD | 	call	#popregs_
1dc0c                 | __system__lseek_ret
1dc0c     2D 00 64 FD | 	ret
1dc10                 | 
1dc10                 | __system___ioctl
1dc10     03 4A 05 F6 | 	mov	COUNT_, #3
1dc14     A8 00 A0 FD | 	call	#pushregs_
1dc18     00 12 4E F2 | 	cmps	arg01, #0 wz
1dc1c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1dc20     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1dc24     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1dc28     01 FA 65 A6 |  if_e	neg	result1, #1
1dc2c     5C 00 90 AD |  if_e	jmp	#LR__2951
1dc30     28 12 06 F1 | 	add	arg01, #40
1dc34     09 1F 02 FB | 	rdlong	local01, arg01
1dc38     0F 21 02 F6 | 	mov	local02, local01
1dc3c     28 12 86 F1 | 	sub	arg01, #40
1dc40     13 20 46 F7 | 	zerox	local02, #19
1dc44     14 1E 46 F0 | 	shr	local01, #20
1dc48     02 1E 66 F0 | 	shl	local01, #2
1dc4c     ED 1E 02 F1 | 	add	local01, __methods__
1dc50     0F 1F 02 FB | 	rdlong	local01, local01
1dc54     F2 22 02 F6 | 	mov	local03, objptr
1dc58     10 E5 01 F6 | 	mov	objptr, local02
1dc5c     2D 1E 62 FD | 	call	local01
1dc60     11 E5 01 F6 | 	mov	objptr, local03
1dc64     FD 12 0A F6 | 	mov	arg01, result1 wz
1dc68     1C 00 90 AD |  if_e	jmp	#LR__2950
1dc6c     00 12 4E F2 | 	cmps	arg01, #0 wz
1dc70     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1dc74     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1dc78     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1dc7c     01 FA 65 56 |  if_ne	neg	result1, #1
1dc80     00 FA 05 A6 |  if_e	mov	result1, #0
1dc84     04 00 90 FD | 	jmp	#LR__2951
1dc88                 | LR__2950
1dc88     00 FA 05 F6 | 	mov	result1, #0
1dc8c                 | LR__2951
1dc8c     A7 F0 03 F6 | 	mov	ptra, fp
1dc90     B2 00 A0 FD | 	call	#popregs_
1dc94                 | __system___ioctl_ret
1dc94     2D 00 64 FD | 	ret
1dc98                 | 
1dc98                 | __system___isatty
1dc98     00 4A 05 F6 | 	mov	COUNT_, #0
1dc9c     A8 00 A0 FD | 	call	#pushregs_
1dca0     0C F0 07 F1 | 	add	ptra, #12
1dca4     04 4E 05 F1 | 	add	fp, #4
1dca8     A7 12 62 FC | 	wrlong	arg01, fp
1dcac     04 4E 05 F1 | 	add	fp, #4
1dcb0     A7 16 02 F6 | 	mov	arg03, fp
1dcb4     08 4E 85 F1 | 	sub	fp, #8
1dcb8     00 15 06 F6 | 	mov	arg02, #256
1dcbc     50 FF BF FD | 	call	#__system___ioctl
1dcc0     00 FA 0D F2 | 	cmp	result1, #0 wz
1dcc4     01 FA 05 A6 |  if_e	mov	result1, #1
1dcc8     00 FA 05 56 |  if_ne	mov	result1, #0
1dccc     A7 F0 03 F6 | 	mov	ptra, fp
1dcd0     B2 00 A0 FD | 	call	#popregs_
1dcd4                 | __system___isatty_ret
1dcd4     2D 00 64 FD | 	ret
1dcd8                 | 
1dcd8                 | __system____getftab
1dcd8     0A 12 16 F2 | 	cmp	arg01, #10 wc
1dcdc     34 12 06 CD |  if_b	qmul	arg01, #52
1dce0     00 FA 05 36 |  if_ae	mov	result1, #0
1dce4     02 00 00 CF 
1dce8     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1dcec     18 FA 61 CD |  if_b	getqx	result1
1dcf0     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1dcf4     02 00 00 CF 
1dcf8     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1dcfc                 | __system____getftab_ret
1dcfc     2D 00 64 FD | 	ret
1dd00                 | 
1dd00                 | __system__strncpy
1dd00     09 01 02 F6 | 	mov	_var01, arg01
1dd04                 | LR__2960
1dd04     01 16 86 F1 | 	sub	arg03, #1
1dd08     00 16 56 F2 | 	cmps	arg03, #0 wc
1dd0c     18 00 90 CD |  if_b	jmp	#LR__2961
1dd10     0A FB C1 FA | 	rdbyte	result1, arg02
1dd14     00 FB 41 FC | 	wrbyte	result1, _var01
1dd18     01 14 06 F1 | 	add	arg02, #1
1dd1c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1dd20     01 00 06 F1 | 	add	_var01, #1
1dd24     DC FF 9F 5D |  if_ne	jmp	#LR__2960
1dd28                 | LR__2961
1dd28     97 0C 48 FB | 	callpa	#(@LR__2963-@LR__2962)>>2,fcache_load_ptr_
1dd2c                 | LR__2962
1dd2c     01 16 86 F1 | 	sub	arg03, #1
1dd30     00 16 56 F2 | 	cmps	arg03, #0 wc
1dd34     00 03 02 36 |  if_ae	mov	_var02, _var01
1dd38     01 00 06 31 |  if_ae	add	_var01, #1
1dd3c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1dd40     E8 FF 9F 3D |  if_ae	jmp	#LR__2962
1dd44                 | LR__2963
1dd44     09 FB 01 F6 | 	mov	result1, arg01
1dd48                 | __system__strncpy_ret
1dd48     2D 00 64 FD | 	ret
1dd4c                 | 
1dd4c                 | __system__strncat
1dd4c     00 14 4E F2 | 	cmps	arg02, #0 wz
1dd50     50 00 90 AD |  if_e	jmp	#LR__2974
1dd54     01 16 16 F2 | 	cmp	arg03, #1 wc
1dd58     48 00 90 CD |  if_b	jmp	#LR__2974
1dd5c     09 01 02 F6 | 	mov	_var01, arg01
1dd60     97 1E 48 FB | 	callpa	#(@LR__2972-@LR__2970)>>2,fcache_load_ptr_
1dd64                 | LR__2970
1dd64     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1dd68     01 00 06 51 |  if_ne	add	_var01, #1
1dd6c     F4 FF 9F 5D |  if_ne	jmp	#LR__2970
1dd70     0B 03 02 F6 | 	mov	_var02, arg03
1dd74                 | LR__2971
1dd74     0A 05 C2 FA | 	rdbyte	_var03, arg02
1dd78     02 07 02 F6 | 	mov	_var04, _var03
1dd7c     07 06 4E F7 | 	zerox	_var04, #7 wz
1dd80     01 14 06 F1 | 	add	arg02, #1
1dd84     18 00 90 AD |  if_e	jmp	#LR__2973
1dd88     01 02 86 F1 | 	sub	_var02, #1
1dd8c     00 02 56 F2 | 	cmps	_var02, #0 wc
1dd90     00 07 02 36 |  if_ae	mov	_var04, _var01
1dd94     01 00 06 31 |  if_ae	add	_var01, #1
1dd98     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1dd9c     D4 FF 9F 3D |  if_ae	jmp	#LR__2971
1dda0                 | LR__2972
1dda0                 | LR__2973
1dda0     00 01 48 FC | 	wrbyte	#0, _var01
1dda4                 | LR__2974
1dda4     09 FB 01 F6 | 	mov	result1, arg01
1dda8                 | __system__strncat_ret
1dda8     2D 00 64 FD | 	ret
1ddac                 | 
1ddac                 | __system__strncmp
1ddac     09 01 0A F6 | 	mov	_var01, arg01 wz
1ddb0     14 00 90 5D |  if_ne	jmp	#LR__2980
1ddb4     00 14 0E F2 | 	cmp	arg02, #0 wz
1ddb8     01 02 66 56 |  if_ne	neg	_var02, #1
1ddbc     00 02 06 A6 |  if_e	mov	_var02, #0
1ddc0     01 FB 01 F6 | 	mov	result1, _var02
1ddc4     74 00 90 FD | 	jmp	#__system__strncmp_ret
1ddc8                 | LR__2980
1ddc8     00 14 0E F2 | 	cmp	arg02, #0 wz
1ddcc     01 FA 05 A6 |  if_e	mov	result1, #1
1ddd0     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1ddd4     0B 05 02 F6 | 	mov	_var03, arg03
1ddd8     97 16 48 FB | 	callpa	#(@LR__2982-@LR__2981)>>2,fcache_load_ptr_
1dddc                 | LR__2981
1dddc     00 07 C2 FA | 	rdbyte	_var04, _var01
1dde0     0A 09 02 F6 | 	mov	_var05, arg02
1dde4     04 0B C2 FA | 	rdbyte	_var06, _var05
1dde8     01 04 86 F1 | 	sub	_var03, #1
1ddec     00 04 56 F2 | 	cmps	_var03, #0 wc
1ddf0     01 00 06 F1 | 	add	_var01, #1
1ddf4     01 14 06 F1 | 	add	arg02, #1
1ddf8     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1ddfc     08 00 90 2D |  if_nc_and_z	jmp	#LR__2983
1de00     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1de04     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__2981
1de08                 | LR__2982
1de08                 | LR__2983
1de08     00 04 56 F2 | 	cmps	_var03, #0 wc
1de0c     00 FA 05 C6 |  if_b	mov	result1, #0
1de10     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1de14     05 07 0A F2 | 	cmp	_var04, _var06 wz
1de18     00 FA 05 A6 |  if_e	mov	result1, #0
1de1c     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1de20     00 06 0E F2 | 	cmp	_var04, #0 wz
1de24     01 FA 65 A6 |  if_e	neg	result1, #1
1de28     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1de2c     00 0A 0E F2 | 	cmp	_var06, #0 wz
1de30     01 FA 05 A6 |  if_e	mov	result1, #1
1de34     03 FB 01 56 |  if_ne	mov	result1, _var04
1de38     05 FB 81 51 |  if_ne	sub	result1, _var06
1de3c                 | __system__strncmp_ret
1de3c     2D 00 64 FD | 	ret
1de40                 | 
1de40                 | __system____root_opendir
1de40     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1de44     04 12 06 F1 | 	add	arg01, #4
1de48     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
1de4c     00 FA 05 F6 | 	mov	result1, #0
1de50     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1de54                 | __system____root_opendir_ret
1de54     2D 00 64 FD | 	ret
1de58                 | 
1de58                 | __system____root_readdir
1de58     03 4A 05 F6 | 	mov	COUNT_, #3
1de5c     A8 00 A0 FD | 	call	#pushregs_
1de60     09 1F 02 F6 | 	mov	local01, arg01
1de64     0A 21 02 F6 | 	mov	local02, arg02
1de68     04 1E 06 F1 | 	add	local01, #4
1de6c     0F 23 02 FB | 	rdlong	local03, local01
1de70     04 1E 86 F1 | 	sub	local01, #4
1de74                 | LR__2990
1de74     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1de78     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1de7c     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1de80     01 FA 65 A6 |  if_e	neg	result1, #1
1de84     48 00 90 AD |  if_e	jmp	#LR__2991
1de88     11 17 0A FB | 	rdlong	arg03, local03 wz
1de8c     04 22 06 A1 |  if_e	add	local03, #4
1de90     E0 FF 9F AD |  if_e	jmp	#LR__2990
1de94     11 15 02 FB | 	rdlong	arg02, local03
1de98     01 14 06 F1 | 	add	arg02, #1
1de9c     10 13 02 F6 | 	mov	arg01, local02
1dea0     40 16 06 F6 | 	mov	arg03, #64
1dea4     58 FE BF FD | 	call	#__system__strncpy
1dea8     50 20 06 F1 | 	add	local02, #80
1deac     10 03 48 FC | 	wrbyte	#1, local02
1deb0     08 20 86 F1 | 	sub	local02, #8
1deb4     10 01 68 FC | 	wrlong	#0, local02
1deb8     04 20 06 F1 | 	add	local02, #4
1debc     10 01 68 FC | 	wrlong	#0, local02
1dec0     04 22 06 F1 | 	add	local03, #4
1dec4     04 1E 06 F1 | 	add	local01, #4
1dec8     0F 23 62 FC | 	wrlong	local03, local01
1decc     00 FA 05 F6 | 	mov	result1, #0
1ded0                 | LR__2991
1ded0     A7 F0 03 F6 | 	mov	ptra, fp
1ded4     B2 00 A0 FD | 	call	#popregs_
1ded8                 | __system____root_readdir_ret
1ded8     2D 00 64 FD | 	ret
1dedc                 | 
1dedc                 | __system____root_closedir
1dedc     00 FA 05 F6 | 	mov	result1, #0
1dee0                 | __system____root_closedir_ret
1dee0     2D 00 64 FD | 	ret
1dee4                 | 
1dee4                 | __system____root_stat
1dee4     0A 01 02 F6 | 	mov	_var01, arg02
1dee8     00 13 02 F6 | 	mov	arg01, _var01
1deec     00 14 06 F6 | 	mov	arg02, #0
1def0     30 16 06 F6 | 	mov	arg03, #48
1def4     98 00 A0 FD | 	call	#\builtin_bytefill_
1def8     08 00 06 F1 | 	add	_var01, #8
1defc     08 00 80 FF 
1df00     00 FF 6B FC | 	wrlong	##4607, _var01
1df04     00 FA 05 F6 | 	mov	result1, #0
1df08                 | __system____root_stat_ret
1df08     2D 00 64 FD | 	ret
1df0c                 | 
1df0c                 | __system___normalizeName
1df0c     00 00 06 F6 | 	mov	_var01, #0
1df10     09 03 02 F6 | 	mov	_var02, arg01
1df14     01 05 02 F6 | 	mov	_var03, _var02
1df18                 | LR__3000
1df18     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1df1c     5C 01 90 AD |  if_e	jmp	#LR__3019
1df20     00 00 0E F2 | 	cmp	_var01, #0 wz
1df24     02 07 02 56 |  if_ne	mov	_var04, _var03
1df28     01 04 06 51 |  if_ne	add	_var03, #1
1df2c     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
1df30     00 00 06 56 |  if_ne	mov	_var01, #0
1df34     01 07 C2 FA | 	rdbyte	_var04, _var02
1df38     2E 06 0E F2 | 	cmp	_var04, #46 wz
1df3c     D8 00 90 5D |  if_ne	jmp	#LR__3012
1df40     01 02 06 F1 | 	add	_var02, #1
1df44     01 07 C2 FA | 	rdbyte	_var04, _var02
1df48     01 02 86 F1 | 	sub	_var02, #1
1df4c     2F 06 0E F2 | 	cmp	_var04, #47 wz
1df50     18 00 90 AD |  if_e	jmp	#LR__3001
1df54     01 02 06 F1 | 	add	_var02, #1
1df58     01 09 C2 FA | 	rdbyte	_var05, _var02
1df5c     01 02 86 F1 | 	sub	_var02, #1
1df60     04 0B 02 F6 | 	mov	_var06, _var05
1df64     07 0A 4E F7 | 	zerox	_var06, #7 wz
1df68     10 00 90 5D |  if_ne	jmp	#LR__3002
1df6c                 | LR__3001
1df6c     01 0D 02 F6 | 	mov	_var07, _var02
1df70     01 0C 06 F1 | 	add	_var07, #1
1df74     06 03 02 F6 | 	mov	_var02, _var07
1df78     E0 00 90 FD | 	jmp	#LR__3016
1df7c                 | LR__3002
1df7c     01 02 06 F1 | 	add	_var02, #1
1df80     01 0D C2 FA | 	rdbyte	_var07, _var02
1df84     01 02 86 F1 | 	sub	_var02, #1
1df88     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1df8c     2E 06 0E F2 | 	cmp	_var04, #46 wz
1df90     84 00 90 5D |  if_ne	jmp	#LR__3011
1df94     02 02 06 F1 | 	add	_var02, #2
1df98     01 0D C2 FA | 	rdbyte	_var07, _var02
1df9c     02 02 86 F1 | 	sub	_var02, #2
1dfa0     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1dfa4     2F 06 0E F2 | 	cmp	_var04, #47 wz
1dfa8     18 00 90 AD |  if_e	jmp	#LR__3003
1dfac     02 02 06 F1 | 	add	_var02, #2
1dfb0     01 09 C2 FA | 	rdbyte	_var05, _var02
1dfb4     02 02 86 F1 | 	sub	_var02, #2
1dfb8     04 0B 02 F6 | 	mov	_var06, _var05
1dfbc     07 0A 4E F7 | 	zerox	_var06, #7 wz
1dfc0     54 00 90 5D |  if_ne	jmp	#LR__3010
1dfc4                 | LR__3003
1dfc4     02 02 06 F1 | 	add	_var02, #2
1dfc8     09 05 5A F2 | 	cmps	_var03, arg01 wcz
1dfcc     40 00 90 ED |  if_be	jmp	#LR__3009
1dfd0     02 0F 02 F6 | 	mov	_var08, _var03
1dfd4     01 0E 86 F1 | 	sub	_var08, #1
1dfd8                 | LR__3004
1dfd8     07 07 C2 FA | 	rdbyte	_var04, _var08
1dfdc     2F 06 0E F2 | 	cmp	_var04, #47 wz
1dfe0     0C 00 90 5D |  if_ne	jmp	#LR__3005
1dfe4     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1dfe8     01 0E 86 11 |  if_a	sub	_var08, #1
1dfec     E8 FF 9F 1D |  if_a	jmp	#LR__3004
1dff0                 | LR__3005
1dff0     97 0C 48 FB | 	callpa	#(@LR__3007-@LR__3006)>>2,fcache_load_ptr_
1dff4                 | LR__3006
1dff4     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1dff8     10 00 90 ED |  if_be	jmp	#LR__3008
1dffc     07 07 C2 FA | 	rdbyte	_var04, _var08
1e000     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e004     01 0E 86 51 |  if_ne	sub	_var08, #1
1e008     E8 FF 9F 5D |  if_ne	jmp	#LR__3006
1e00c                 | LR__3007
1e00c                 | LR__3008
1e00c     07 05 02 F6 | 	mov	_var03, _var08
1e010                 | LR__3009
1e010     01 00 06 F6 | 	mov	_var01, #1
1e014     44 00 90 FD | 	jmp	#LR__3016
1e018                 | LR__3010
1e018                 | LR__3011
1e018                 | LR__3012
1e018     97 18 48 FB | 	callpa	#(@LR__3014-@LR__3013)>>2,fcache_load_ptr_
1e01c                 | LR__3013
1e01c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1e020     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1e024     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1e028     20 00 90 AD |  if_e	jmp	#LR__3015
1e02c     01 0B 02 F6 | 	mov	_var06, _var02
1e030     01 09 02 F6 | 	mov	_var05, _var02
1e034     01 08 06 F1 | 	add	_var05, #1
1e038     05 11 C2 FA | 	rdbyte	_var09, _var06
1e03c     04 03 02 F6 | 	mov	_var02, _var05
1e040     02 11 42 FC | 	wrbyte	_var09, _var03
1e044     01 04 06 F1 | 	add	_var03, #1
1e048     D0 FF 9F FD | 	jmp	#LR__3013
1e04c                 | LR__3014
1e04c                 | LR__3015
1e04c     01 07 C2 FA | 	rdbyte	_var04, _var02
1e050     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e054     C0 FE 9F 5D |  if_ne	jmp	#LR__3000
1e058     01 00 06 F6 | 	mov	_var01, #1
1e05c                 | LR__3016
1e05c     97 0C 48 FB | 	callpa	#(@LR__3018-@LR__3017)>>2,fcache_load_ptr_
1e060                 | LR__3017
1e060     01 07 C2 FA | 	rdbyte	_var04, _var02
1e064     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e068     01 0D 02 A6 |  if_e	mov	_var07, _var02
1e06c     01 0C 06 A1 |  if_e	add	_var07, #1
1e070     06 03 02 A6 |  if_e	mov	_var02, _var07
1e074     E8 FF 9F AD |  if_e	jmp	#LR__3017
1e078                 | LR__3018
1e078     9C FE 9F FD | 	jmp	#LR__3000
1e07c                 | LR__3019
1e07c     02 01 48 FC | 	wrbyte	#0, _var03
1e080                 | __system___normalizeName_ret
1e080     2D 00 64 FD | 	ret
1e084                 | 
1e084                 | __system___strrev
1e084     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1e088     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1e08c     09 03 02 F6 | 	mov	_var02, arg01
1e090     97 1A 48 FB | 	callpa	#(@LR__3022-@LR__3020)>>2,fcache_load_ptr_
1e094                 | LR__3020
1e094     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1e098     01 02 06 51 |  if_ne	add	_var02, #1
1e09c     F4 FF 9F 5D |  if_ne	jmp	#LR__3020
1e0a0     01 02 86 F1 | 	sub	_var02, #1
1e0a4                 | LR__3021
1e0a4     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1e0a8     1C 00 90 ED |  if_be	jmp	#LR__3023
1e0ac     09 01 C2 FA | 	rdbyte	_var01, arg01
1e0b0     01 05 C2 FA | 	rdbyte	_var03, _var02
1e0b4     09 05 42 FC | 	wrbyte	_var03, arg01
1e0b8     01 01 42 FC | 	wrbyte	_var01, _var02
1e0bc     01 12 06 F1 | 	add	arg01, #1
1e0c0     01 02 86 F1 | 	sub	_var02, #1
1e0c4     DC FF 9F FD | 	jmp	#LR__3021
1e0c8                 | LR__3022
1e0c8                 | LR__3023
1e0c8                 | __system___strrev_ret
1e0c8     2D 00 64 FD | 	ret
1e0cc                 | 
1e0cc                 | __system___fmtpad
1e0cc     06 4A 05 F6 | 	mov	COUNT_, #6
1e0d0     A8 00 A0 FD | 	call	#pushregs_
1e0d4     09 1F 02 F6 | 	mov	local01, arg01
1e0d8     0A 21 02 F6 | 	mov	local02, arg02
1e0dc     0B 23 02 F6 | 	mov	local03, arg03
1e0e0     10 13 EA F8 | 	getbyte	arg01, local02, #1
1e0e4     16 20 46 F0 | 	shr	local02, #22
1e0e8     03 20 0E F5 | 	and	local02, #3 wz
1e0ec     00 24 06 F6 | 	mov	local04, #0
1e0f0     01 20 06 A6 |  if_e	mov	local02, #1
1e0f4     0C 21 CA F7 | 	test	local02, arg04 wz
1e0f8     00 FA 05 A6 |  if_e	mov	result1, #0
1e0fc     88 00 90 AD |  if_e	jmp	#LR__3033
1e100     09 23 C2 F2 | 	subr	local03, arg01
1e104     01 22 56 F2 | 	cmps	local03, #1 wc
1e108     00 FA 05 C6 |  if_b	mov	result1, #0
1e10c     78 00 90 CD |  if_b	jmp	#LR__3033
1e110     03 20 0E F2 | 	cmp	local02, #3 wz
1e114     18 00 90 5D |  if_ne	jmp	#LR__3030
1e118     01 18 0E F2 | 	cmp	arg04, #1 wz
1e11c     6E 20 62 FD | 	wrz	local02
1e120     10 23 02 F1 | 	add	local03, local02
1e124     11 23 52 F6 | 	abs	local03, local03 wc
1e128     01 22 46 F0 | 	shr	local03, #1
1e12c     11 23 82 F6 | 	negc	local03, local03
1e130                 | LR__3030
1e130     01 22 56 F2 | 	cmps	local03, #1 wc
1e134     4C 00 90 CD |  if_b	jmp	#LR__3032
1e138     11 27 02 F6 | 	mov	local05, local03
1e13c                 | LR__3031
1e13c     0F 21 02 F6 | 	mov	local02, local01
1e140     0F 29 02 F6 | 	mov	local06, local01
1e144     13 20 46 F7 | 	zerox	local02, #19
1e148     14 28 46 F0 | 	shr	local06, #20
1e14c     02 28 66 F0 | 	shl	local06, #2
1e150     ED 28 02 F1 | 	add	local06, __methods__
1e154     14 29 02 FB | 	rdlong	local06, local06
1e158     20 12 06 F6 | 	mov	arg01, #32
1e15c     F2 22 02 F6 | 	mov	local03, objptr
1e160     10 E5 01 F6 | 	mov	objptr, local02
1e164     2D 28 62 FD | 	call	local06
1e168     11 E5 01 F6 | 	mov	objptr, local03
1e16c     FD 28 02 F6 | 	mov	local06, result1
1e170     00 28 56 F2 | 	cmps	local06, #0 wc
1e174     14 FB 01 C6 |  if_b	mov	result1, local06
1e178     0C 00 90 CD |  if_b	jmp	#LR__3033
1e17c     14 25 02 F1 | 	add	local04, local06
1e180     EE 27 6E FB | 	djnz	local05, #LR__3031
1e184                 | LR__3032
1e184     12 FB 01 F6 | 	mov	result1, local04
1e188                 | LR__3033
1e188     A7 F0 03 F6 | 	mov	ptra, fp
1e18c     B2 00 A0 FD | 	call	#popregs_
1e190                 | __system___fmtpad_ret
1e190     2D 00 64 FD | 	ret
1e194                 | 
1e194                 | __system___uitoa
1e194     04 4A 05 F6 | 	mov	COUNT_, #4
1e198     A8 00 A0 FD | 	call	#pushregs_
1e19c     09 1F 02 F6 | 	mov	local01, arg01
1e1a0     00 1A 4E F2 | 	cmps	arg05, #0 wz
1e1a4     0F 1B 02 F6 | 	mov	arg05, local01
1e1a8     00 20 06 F6 | 	mov	local02, #0
1e1ac     37 22 06 56 |  if_ne	mov	local03, #55
1e1b0     57 22 06 A6 |  if_e	mov	local03, #87
1e1b4                 | LR__3040
1e1b4     0B 15 12 FD | 	qdiv	arg02, arg03
1e1b8     19 24 62 FD | 	getqy	local04
1e1bc     0B 15 12 FD | 	qdiv	arg02, arg03
1e1c0     0A 24 16 F2 | 	cmp	local04, #10 wc
1e1c4     30 24 06 C1 |  if_b	add	local04, #48
1e1c8     11 25 02 31 |  if_ae	add	local04, local03
1e1cc     0D 25 42 FC | 	wrbyte	local04, arg05
1e1d0     01 1A 06 F1 | 	add	arg05, #1
1e1d4     01 20 06 F1 | 	add	local02, #1
1e1d8     18 14 62 FD | 	getqx	arg02
1e1dc     00 14 0E F2 | 	cmp	arg02, #0 wz
1e1e0     D0 FF 9F 5D |  if_ne	jmp	#LR__3040
1e1e4     0C 21 12 F2 | 	cmp	local02, arg04 wc
1e1e8     C8 FF 9F CD |  if_b	jmp	#LR__3040
1e1ec     0D 01 48 FC | 	wrbyte	#0, arg05
1e1f0     0F 13 02 F6 | 	mov	arg01, local01
1e1f4     8C FE BF FD | 	call	#__system___strrev
1e1f8     10 FB 01 F6 | 	mov	result1, local02
1e1fc     A7 F0 03 F6 | 	mov	ptra, fp
1e200     B2 00 A0 FD | 	call	#popregs_
1e204                 | __system___uitoa_ret
1e204     2D 00 64 FD | 	ret
1e208                 | 
1e208                 | __system__disassemble_0381
1e208     10 4A 05 F6 | 	mov	COUNT_, #16
1e20c     A8 00 A0 FD | 	call	#pushregs_
1e210     09 1F 02 F6 | 	mov	local01, arg01
1e214     0A 21 02 F6 | 	mov	local02, arg02
1e218     0B 23 02 F6 | 	mov	local03, arg03
1e21c     0C 25 02 F6 | 	mov	local04, arg04
1e220     0D 27 02 F6 | 	mov	local05, arg05
1e224     13 13 52 F6 | 	abs	arg01, local05 wc
1e228     1F 28 C6 C9 |  if_b	decod	local06, #31
1e22c     00 28 06 36 |  if_ae	mov	local06, #0
1e230     64 D0 BF FD | 	call	#__system___float_fromuns
1e234     14 FB 61 F5 | 	xor	result1, local06
1e238     FD 2A 02 F6 | 	mov	local07, result1
1e23c     00 2C 06 F6 | 	mov	local08, #0
1e240     0F 13 02 F6 | 	mov	arg01, local01
1e244     00 14 06 F6 | 	mov	arg02, #0
1e248     01 16 06 F6 | 	mov	arg03, #1
1e24c     80 D8 BF FD | 	call	#__system___float_cmp
1e250     00 FA 0D F2 | 	cmp	result1, #0 wz
1e254     00 2E 06 A6 |  if_e	mov	local09, #0
1e258     10 01 68 AC |  if_e	wrlong	#0, local02
1e25c     11 2F 62 AC |  if_e	wrlong	local09, local03
1e260     8C 01 90 AD |  if_e	jmp	#LR__3062
1e264     0F 13 02 F6 | 	mov	arg01, local01
1e268     30 DD BF FD | 	call	#__system____builtin_ilogb
1e26c     FD 30 02 F6 | 	mov	local10, result1
1e270     0A 26 0E F2 | 	cmp	local05, #10 wz
1e274     24 00 90 5D |  if_ne	jmp	#LR__3050
1e278     18 2F 02 F6 | 	mov	local09, local10
1e27c     01 2E 66 F0 | 	shl	local09, #1
1e280     18 2F 02 F1 | 	add	local09, local10
1e284     17 31 52 F6 | 	abs	local10, local09 wc
1e288     0A 30 16 FD | 	qdiv	local10, #10
1e28c     09 32 06 F6 | 	mov	local11, #9
1e290     18 30 62 FD | 	getqx	local10
1e294     18 31 82 F6 | 	negc	local10, local10
1e298     04 00 90 FD | 	jmp	#LR__3051
1e29c                 | LR__3050
1e29c     18 32 06 F6 | 	mov	local11, #24
1e2a0                 | LR__3051
1e2a0                 | LR__3052
1e2a0     08 2C 56 F2 | 	cmps	local08, #8 wc
1e2a4     01 2C 06 F1 | 	add	local08, #1
1e2a8     60 00 90 3D |  if_ae	jmp	#LR__3053
1e2ac     00 C0 1F FF 
1e2b0     00 12 06 F6 | 	mov	arg01, ##1065353216
1e2b4     15 15 02 F6 | 	mov	arg02, local07
1e2b8     18 17 02 F6 | 	mov	arg03, local10
1e2bc     88 E3 BF FD | 	call	#__system___float_pow_n
1e2c0     FD 14 02 F6 | 	mov	arg02, result1
1e2c4     0F 13 02 F6 | 	mov	arg01, local01
1e2c8     D4 D5 BF FD | 	call	#__system___float_div
1e2cc     FD 34 02 F6 | 	mov	local12, result1
1e2d0     1A 13 02 F6 | 	mov	arg01, local12
1e2d4     00 C0 1F FF 
1e2d8     00 14 06 F6 | 	mov	arg02, ##1065353216
1e2dc     01 16 06 F6 | 	mov	arg03, #1
1e2e0     EC D7 BF FD | 	call	#__system___float_cmp
1e2e4     00 FA 55 F2 | 	cmps	result1, #0 wc
1e2e8     01 30 86 C1 |  if_b	sub	local10, #1
1e2ec     B0 FF 9F CD |  if_b	jmp	#LR__3052
1e2f0     15 15 02 F6 | 	mov	arg02, local07
1e2f4     1A 13 02 F6 | 	mov	arg01, local12
1e2f8     01 16 66 F6 | 	neg	arg03, #1
1e2fc     D0 D7 BF FD | 	call	#__system___float_cmp
1e300     00 FA 55 F2 | 	cmps	result1, #0 wc
1e304     01 30 06 31 |  if_ae	add	local10, #1
1e308     94 FF 9F 3D |  if_ae	jmp	#LR__3052
1e30c                 | LR__3053
1e30c     1A 13 02 F6 | 	mov	arg01, local12
1e310     88 DC BF FD | 	call	#__system____builtin_ilogb
1e314     FD 36 02 F6 | 	mov	local13, result1
1e318     1A 39 02 F6 | 	mov	local14, local12
1e31c     17 39 06 F4 | 	bitl	local14, #279
1e320     17 38 26 F4 | 	bith	local14, #23
1e324     1B 39 62 F0 | 	shl	local14, local13
1e328     02 26 0E F2 | 	cmp	local05, #2 wz
1e32c     02 24 66 A0 |  if_e	shl	local04, #2
1e330     00 3A 06 F6 | 	mov	local15, #0
1e334     00 24 56 F2 | 	cmps	local04, #0 wc
1e338     10 00 90 3D |  if_ae	jmp	#LR__3054
1e33c     18 25 C2 F2 | 	subr	local04, local10
1e340     00 24 56 F2 | 	cmps	local04, #0 wc
1e344     A0 00 90 CD |  if_b	jmp	#LR__3061
1e348     04 00 90 FD | 	jmp	#LR__3055
1e34c                 | LR__3054
1e34c     01 24 06 F1 | 	add	local04, #1
1e350                 | LR__3055
1e350     19 25 7A F3 | 	fles	local04, local11 wcz
1e354     01 3C 06 F6 | 	mov	local16, #1
1e358     97 22 48 FB | 	callpa	#(@LR__3057-@LR__3056)>>2,fcache_load_ptr_
1e35c                 | LR__3056
1e35c     00 40 00 FF 
1e360     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1e364     38 00 90 3D |  if_ae	jmp	#LR__3058
1e368     01 24 56 F2 | 	cmps	local04, #1 wc
1e36c     01 24 86 F1 | 	sub	local04, #1
1e370     2C 00 90 CD |  if_b	jmp	#LR__3058
1e374     13 3B 02 FD | 	qmul	local15, local05
1e378     1C 37 02 F6 | 	mov	local13, local14
1e37c     17 36 46 F0 | 	shr	local13, #23
1e380     17 39 06 F4 | 	bitl	local14, #279
1e384     18 3A 62 FD | 	getqx	local15
1e388     13 3D 02 FD | 	qmul	local16, local05
1e38c     18 3C 62 FD | 	getqx	local16
1e390     13 39 02 FD | 	qmul	local14, local05
1e394     1B 3B 02 F1 | 	add	local15, local13
1e398     18 38 62 FD | 	getqx	local14
1e39c     BC FF 9F FD | 	jmp	#LR__3056
1e3a0                 | LR__3057
1e3a0                 | LR__3058
1e3a0     13 2F 02 F6 | 	mov	local09, local05
1e3a4     17 2E 66 F0 | 	shl	local09, #23
1e3a8     17 37 52 F6 | 	abs	local13, local09 wc
1e3ac     01 36 46 F0 | 	shr	local13, #1
1e3b0     1B 37 82 F6 | 	negc	local13, local13
1e3b4     1B 39 1A F2 | 	cmp	local14, local13 wcz
1e3b8     20 00 90 1D |  if_a	jmp	#LR__3059
1e3bc     17 26 66 F0 | 	shl	local05, #23
1e3c0     13 37 52 F6 | 	abs	local13, local05 wc
1e3c4     01 36 46 F0 | 	shr	local13, #1
1e3c8     1B 37 82 F6 | 	negc	local13, local13
1e3cc     1B 39 0A F2 | 	cmp	local14, local13 wz
1e3d0     14 00 90 5D |  if_ne	jmp	#LR__3060
1e3d4     01 3A CE F7 | 	test	local15, #1 wz
1e3d8     0C 00 90 AD |  if_e	jmp	#LR__3060
1e3dc                 | LR__3059
1e3dc     01 3A 06 F1 | 	add	local15, #1
1e3e0     1E 3B 0A F2 | 	cmp	local15, local16 wz
1e3e4     01 30 06 A1 |  if_e	add	local10, #1
1e3e8                 | LR__3060
1e3e8                 | LR__3061
1e3e8     10 3B 62 FC | 	wrlong	local15, local02
1e3ec     11 31 62 FC | 	wrlong	local10, local03
1e3f0                 | LR__3062
1e3f0     A7 F0 03 F6 | 	mov	ptra, fp
1e3f4     B2 00 A0 FD | 	call	#popregs_
1e3f8                 | __system__disassemble_0381_ret
1e3f8     2D 00 64 FD | 	ret
1e3fc                 | 
1e3fc                 | __system__emitsign_0383
1e3fc     00 FA 05 F6 | 	mov	result1, #0
1e400     00 14 0E F2 | 	cmp	arg02, #0 wz
1e404     09 01 02 56 |  if_ne	mov	_var01, arg01
1e408     01 12 06 51 |  if_ne	add	arg01, #1
1e40c     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1e410     01 FA 05 56 |  if_ne	mov	result1, #1
1e414     00 16 0E F2 | 	cmp	arg03, #0 wz
1e418     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1e41c     01 12 06 51 |  if_ne	add	arg01, #1
1e420     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1e424     02 FA 05 51 |  if_ne	add	result1, #2
1e428                 | __system__emitsign_0383_ret
1e428     2D 00 64 FD | 	ret
1e42c                 | 
1e42c                 | __system___gettxfunc
1e42c     01 4A 05 F6 | 	mov	COUNT_, #1
1e430     A8 00 A0 FD | 	call	#pushregs_
1e434     A0 F8 BF FD | 	call	#__system____getftab
1e438     FD 1E 0A F6 | 	mov	local01, result1 wz
1e43c     10 00 90 AD |  if_e	jmp	#LR__3070
1e440     08 1E 06 F1 | 	add	local01, #8
1e444     0F 15 0A FB | 	rdlong	arg02, local01 wz
1e448     08 1E 86 F1 | 	sub	local01, #8
1e44c     08 00 90 5D |  if_ne	jmp	#LR__3071
1e450                 | LR__3070
1e450     00 FA 05 F6 | 	mov	result1, #0
1e454     0C 00 90 FD | 	jmp	#LR__3072
1e458                 | LR__3071
1e458     00 28 03 FF 
1e45c     00 1E 46 F5 | 	or	local01, ##105906176
1e460     0F FB 01 F6 | 	mov	result1, local01
1e464                 | LR__3072
1e464     A7 F0 03 F6 | 	mov	ptra, fp
1e468     B2 00 A0 FD | 	call	#popregs_
1e46c                 | __system___gettxfunc_ret
1e46c     2D 00 64 FD | 	ret
1e470                 | 
1e470                 | __system___getrxfunc
1e470     01 4A 05 F6 | 	mov	COUNT_, #1
1e474     A8 00 A0 FD | 	call	#pushregs_
1e478     5C F8 BF FD | 	call	#__system____getftab
1e47c     FD 1E 0A F6 | 	mov	local01, result1 wz
1e480     10 00 90 AD |  if_e	jmp	#LR__3080
1e484     08 1E 06 F1 | 	add	local01, #8
1e488     0F 15 0A FB | 	rdlong	arg02, local01 wz
1e48c     08 1E 86 F1 | 	sub	local01, #8
1e490     08 00 90 5D |  if_ne	jmp	#LR__3081
1e494                 | LR__3080
1e494     00 FA 05 F6 | 	mov	result1, #0
1e498     0C 00 90 FD | 	jmp	#LR__3082
1e49c                 | LR__3081
1e49c     00 30 03 FF 
1e4a0     00 1E 46 F5 | 	or	local01, ##106954752
1e4a4     0F FB 01 F6 | 	mov	result1, local01
1e4a8                 | LR__3082
1e4a8     A7 F0 03 F6 | 	mov	ptra, fp
1e4ac     B2 00 A0 FD | 	call	#popregs_
1e4b0                 | __system___getrxfunc_ret
1e4b0     2D 00 64 FD | 	ret
1e4b4                 | 
1e4b4                 | __system___getiolock_0423
1e4b4     01 4A 05 F6 | 	mov	COUNT_, #1
1e4b8     A8 00 A0 FD | 	call	#pushregs_
1e4bc     18 F8 BF FD | 	call	#__system____getftab
1e4c0     FD 1E 0A F6 | 	mov	local01, result1 wz
1e4c4     10 00 90 AD |  if_e	jmp	#LR__3090
1e4c8     08 1E 06 F1 | 	add	local01, #8
1e4cc     0F FB 09 FB | 	rdlong	result1, local01 wz
1e4d0     08 1E 86 F1 | 	sub	local01, #8
1e4d4     18 00 90 5D |  if_ne	jmp	#LR__3091
1e4d8                 | LR__3090
1e4d8     01 00 00 FF 
1e4dc     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1e4e0     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1e4e4     01 00 00 FF 
1e4e8     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1e4ec     08 00 90 FD | 	jmp	#LR__3092
1e4f0                 | LR__3091
1e4f0     0C 1E 06 F1 | 	add	local01, #12
1e4f4     0F FB 01 F6 | 	mov	result1, local01
1e4f8                 | LR__3092
1e4f8     A7 F0 03 F6 | 	mov	ptra, fp
1e4fc     B2 00 A0 FD | 	call	#popregs_
1e500                 | __system___getiolock_0423_ret
1e500     2D 00 64 FD | 	ret
1e504                 | 
1e504                 | __system____ScanForChar
1e504     09 01 02 F6 | 	mov	_var01, arg01
1e508     09 03 02 F6 | 	mov	_var02, arg01
1e50c     97 06 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
1e510                 | LR__3100
1e510     01 FB C9 FA | 	rdbyte	result1, _var02 wz
1e514     01 02 06 51 |  if_ne	add	_var02, #1
1e518     F4 FF 9F 5D |  if_ne	jmp	#LR__3100
1e51c                 | LR__3101
1e51c     09 03 82 F1 | 	sub	_var02, arg01
1e520     01 FB 01 F6 | 	mov	result1, _var02
1e524     FD 12 0A F6 | 	mov	arg01, result1 wz
1e528     00 FA 05 A6 |  if_e	mov	result1, #0
1e52c     B8 00 90 AD |  if_e	jmp	#LR__3108
1e530     0A 05 02 F6 | 	mov	_var03, arg02
1e534     07 04 4E F7 | 	zerox	_var03, #7 wz
1e538     00 FA 05 A6 |  if_e	mov	result1, #0
1e53c     A8 00 90 AD |  if_e	jmp	#LR__3108
1e540     01 16 16 F2 | 	cmp	arg03, #1 wc
1e544     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
1e548     01 16 06 86 |  if_c_and_z	mov	arg03, #1
1e54c     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
1e550     94 00 90 4D |  if_c_and_nz	jmp	#LR__3108
1e554     09 17 1A F2 | 	cmp	arg03, arg01 wcz
1e558     10 00 90 ED |  if_be	jmp	#LR__3102
1e55c     00 18 0E F2 | 	cmp	arg04, #0 wz
1e560     00 FA 05 A6 |  if_e	mov	result1, #0
1e564     80 00 90 AD |  if_e	jmp	#LR__3108
1e568     09 17 02 F6 | 	mov	arg03, arg01
1e56c                 | LR__3102
1e56c     01 16 86 F1 | 	sub	arg03, #1
1e570     00 18 0E F2 | 	cmp	arg04, #0 wz
1e574     38 00 90 5D |  if_ne	jmp	#LR__3104
1e578     0B 07 02 F6 | 	mov	_var04, arg03
1e57c     09 09 02 F6 | 	mov	_var05, arg01
1e580                 | LR__3103
1e580     04 07 12 F2 | 	cmp	_var04, _var05 wc
1e584     5C 00 90 3D |  if_ae	jmp	#LR__3107
1e588     03 05 02 F6 | 	mov	_var03, _var04
1e58c     00 05 02 F1 | 	add	_var03, _var01
1e590     02 05 C2 FA | 	rdbyte	_var03, _var03
1e594     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
1e598     0C 05 0A F2 | 	cmp	_var03, arg04 wz
1e59c     01 06 06 A1 |  if_e	add	_var04, #1
1e5a0     03 FB 01 A6 |  if_e	mov	result1, _var04
1e5a4     40 00 90 AD |  if_e	jmp	#LR__3108
1e5a8     01 06 06 F1 | 	add	_var04, #1
1e5ac     D0 FF 9F FD | 	jmp	#LR__3103
1e5b0                 | LR__3104
1e5b0     0B 07 02 F6 | 	mov	_var04, arg03
1e5b4                 | LR__3105
1e5b4     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
1e5b8     28 00 90 1D |  if_a	jmp	#LR__3106
1e5bc     03 09 02 F6 | 	mov	_var05, _var04
1e5c0     00 09 02 F1 | 	add	_var05, _var01
1e5c4     04 05 C2 FA | 	rdbyte	_var03, _var05
1e5c8     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
1e5cc     04 05 0A F2 | 	cmp	_var03, _var05 wz
1e5d0     01 06 06 A1 |  if_e	add	_var04, #1
1e5d4     03 FB 01 A6 |  if_e	mov	result1, _var04
1e5d8     0C 00 90 AD |  if_e	jmp	#LR__3108
1e5dc     01 06 86 F1 | 	sub	_var04, #1
1e5e0     D0 FF 9F FD | 	jmp	#LR__3105
1e5e4                 | LR__3106
1e5e4                 | LR__3107
1e5e4     00 FA 05 F6 | 	mov	result1, #0
1e5e8                 | LR__3108
1e5e8                 | __system____ScanForChar_ret
1e5e8     2D 00 64 FD | 	ret
1e5ec                 | 
1e5ec                 | __system___basic_dir
1e5ec     05 4A 05 F6 | 	mov	COUNT_, #5
1e5f0     A8 00 A0 FD | 	call	#pushregs_
1e5f4     4C F0 07 F1 | 	add	ptra, #76
1e5f8     04 4E 05 F1 | 	add	fp, #4
1e5fc     A7 12 62 FC | 	wrlong	arg01, fp
1e600     04 4E 05 F1 | 	add	fp, #4
1e604     A7 14 62 FC | 	wrlong	arg02, fp
1e608     04 4E 85 F1 | 	sub	fp, #4
1e60c     A7 14 0A FB | 	rdlong	arg02, fp wz
1e610     04 4E 85 F1 | 	sub	fp, #4
1e614     04 4E 05 51 |  if_ne	add	fp, #4
1e618     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1e61c     04 4E 85 51 |  if_ne	sub	fp, #4
1e620     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1e624     70 00 90 AD |  if_e	jmp	#LR__3110
1e628     03 00 00 FF 
1e62c     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e630     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e634     03 00 00 FF 
1e638     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e63c     03 00 00 5F 
1e640     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1e644     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1e648     03 00 00 5F 
1e64c     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1e650     14 EA BF 5D |  if_ne	call	#__system__closedir
1e654     40 01 00 FF 
1e658     28 13 06 F6 | 	mov	arg01, ##@LR__4268
1e65c     1C E9 BF FD | 	call	#__system__opendir
1e660     03 00 00 FF 
1e664     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e668     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1e66c     08 4E 05 F1 | 	add	fp, #8
1e670     A7 20 02 FB | 	rdlong	local02, fp
1e674     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1e678     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1e67c     04 4E 85 F1 | 	sub	fp, #4
1e680     A7 20 02 FB | 	rdlong	local02, fp
1e684     04 4E 85 F1 | 	sub	fp, #4
1e688     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1e68c     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1e690     03 00 00 FF 
1e694     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1e698                 | LR__3110
1e698     03 00 00 FF 
1e69c     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e6a0     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e6a4     03 00 00 FF 
1e6a8     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e6ac     40 01 00 AF 
1e6b0     2A FB 05 A6 |  if_e	mov	result1, ##@LR__4269
1e6b4     84 02 90 AD |  if_e	jmp	#LR__3123
1e6b8                 | LR__3111
1e6b8     03 00 00 FF 
1e6bc     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e6c0     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1e6c4     03 00 00 FF 
1e6c8     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e6cc     0C EA BF FD | 	call	#__system__readdir
1e6d0     0C 4E 05 F1 | 	add	fp, #12
1e6d4     A7 FA 61 FC | 	wrlong	result1, fp
1e6d8     0C 4E 85 F1 | 	sub	fp, #12
1e6dc     00 FA 0D F2 | 	cmp	result1, #0 wz
1e6e0     38 00 90 5D |  if_ne	jmp	#LR__3112
1e6e4     03 00 00 FF 
1e6e8     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e6ec     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1e6f0     03 00 00 FF 
1e6f4     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e6f8     6C E9 BF FD | 	call	#__system__closedir
1e6fc     03 00 00 FF 
1e700     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e704     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1e708     03 00 00 FF 
1e70c     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e710     40 01 00 FF 
1e714     2C FB 05 F6 | 	mov	result1, ##@LR__4270
1e718     20 02 90 FD | 	jmp	#LR__3123
1e71c                 | LR__3112
1e71c     0C 4E 05 F1 | 	add	fp, #12
1e720     A7 12 02 FB | 	rdlong	arg01, fp
1e724     0C 4E 85 F1 | 	sub	fp, #12
1e728     03 00 00 FF 
1e72c     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1e730     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1e734     03 00 00 FF 
1e738     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1e73c     48 07 B0 FD | 	call	#__system___pat_match
1e740     00 FA 0D F2 | 	cmp	result1, #0 wz
1e744     70 FF 9F AD |  if_e	jmp	#LR__3111
1e748     03 00 00 FF 
1e74c     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1e750     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e754     03 00 00 FF 
1e758     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1e75c     78 01 90 AD |  if_e	jmp	#LR__3119
1e760     0C 4E 05 F1 | 	add	fp, #12
1e764     A7 12 02 FB | 	rdlong	arg01, fp
1e768     04 4E 05 F1 | 	add	fp, #4
1e76c     A7 14 02 F6 | 	mov	arg02, fp
1e770     10 4E 85 F1 | 	sub	fp, #16
1e774     68 F2 BF FD | 	call	#__system__stat
1e778     40 4E 05 F1 | 	add	fp, #64
1e77c     A7 FA 61 FC | 	wrlong	result1, fp
1e780     40 4E 85 F1 | 	sub	fp, #64
1e784     00 FA 0D F2 | 	cmp	result1, #0 wz
1e788     40 01 00 5F 
1e78c     2E FB 05 56 |  if_ne	mov	result1, ##@LR__4271
1e790     A8 01 90 5D |  if_ne	jmp	#LR__3123
1e794     18 4E 05 F1 | 	add	fp, #24
1e798     A7 20 02 FB | 	rdlong	local02, fp
1e79c     78 00 00 FF 
1e7a0     00 20 06 F5 | 	and	local02, ##61440
1e7a4     2C 4E 05 F1 | 	add	fp, #44
1e7a8     A7 20 62 FC | 	wrlong	local02, fp
1e7ac     38 4E 85 F1 | 	sub	fp, #56
1e7b0     A7 20 02 FB | 	rdlong	local02, fp
1e7b4     0C 4E 85 F1 | 	sub	fp, #12
1e7b8     10 21 C2 FA | 	rdbyte	local02, local02
1e7bc     2E 20 0E F2 | 	cmp	local02, #46 wz
1e7c0     08 4E 05 A1 |  if_e	add	fp, #8
1e7c4     A7 04 68 AC |  if_e	wrlong	#2, fp
1e7c8     08 4E C5 F3 | 	sumz	fp, #8
1e7cc     A7 00 68 5C |  if_ne	wrlong	#0, fp
1e7d0     08 4E 85 51 |  if_ne	sub	fp, #8
1e7d4     44 4E 05 F1 | 	add	fp, #68
1e7d8     A7 20 02 FB | 	rdlong	local02, fp
1e7dc     44 4E 85 F1 | 	sub	fp, #68
1e7e0     08 00 00 FF 
1e7e4     00 20 0E F2 | 	cmp	local02, ##4096 wz
1e7e8     18 00 90 5D |  if_ne	jmp	#LR__3113
1e7ec     08 4E 05 F1 | 	add	fp, #8
1e7f0     A7 20 02 FB | 	rdlong	local02, fp
1e7f4     10 20 46 F5 | 	or	local02, #16
1e7f8     A7 20 62 FC | 	wrlong	local02, fp
1e7fc     08 4E 85 F1 | 	sub	fp, #8
1e800     AC 00 90 FD | 	jmp	#LR__3118
1e804                 | LR__3113
1e804     44 4E 05 F1 | 	add	fp, #68
1e808     A7 20 02 FB | 	rdlong	local02, fp
1e80c     44 4E 85 F1 | 	sub	fp, #68
1e810     10 00 00 FF 
1e814     00 20 0E F2 | 	cmp	local02, ##8192 wz
1e818     44 4E 05 51 |  if_ne	add	fp, #68
1e81c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1e820     44 4E 85 51 |  if_ne	sub	fp, #68
1e824     18 00 00 5F 
1e828     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1e82c     44 4E 05 51 |  if_ne	add	fp, #68
1e830     0F 23 02 56 |  if_ne	mov	local03, local01
1e834     44 4E 85 51 |  if_ne	sub	fp, #68
1e838     20 00 00 5F 
1e83c     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1e840     18 00 90 5D |  if_ne	jmp	#LR__3114
1e844     08 4E 05 F1 | 	add	fp, #8
1e848     A7 20 02 FB | 	rdlong	local02, fp
1e84c     04 20 46 F5 | 	or	local02, #4
1e850     A7 20 62 FC | 	wrlong	local02, fp
1e854     08 4E 85 F1 | 	sub	fp, #8
1e858     54 00 90 FD | 	jmp	#LR__3117
1e85c                 | LR__3114
1e85c     18 4E 05 F1 | 	add	fp, #24
1e860     A7 20 02 FB | 	rdlong	local02, fp
1e864     18 4E 85 F1 | 	sub	fp, #24
1e868     92 20 CE F7 | 	test	local02, #146 wz
1e86c     18 00 90 5D |  if_ne	jmp	#LR__3115
1e870     08 4E 05 F1 | 	add	fp, #8
1e874     A7 20 02 FB | 	rdlong	local02, fp
1e878     01 20 46 F5 | 	or	local02, #1
1e87c     A7 20 62 FC | 	wrlong	local02, fp
1e880     08 4E 85 F1 | 	sub	fp, #8
1e884     28 00 90 FD | 	jmp	#LR__3116
1e888                 | LR__3115
1e888     44 4E 05 F1 | 	add	fp, #68
1e88c     A7 24 02 FB | 	rdlong	local04, fp
1e890     44 4E 85 F1 | 	sub	fp, #68
1e894     08 00 00 FF 
1e898     00 24 0E F2 | 	cmp	local04, ##4096 wz
1e89c     08 4E 05 51 |  if_ne	add	fp, #8
1e8a0     A7 24 02 5B |  if_ne	rdlong	local04, fp
1e8a4     20 24 46 55 |  if_ne	or	local04, #32
1e8a8     A7 24 62 5C |  if_ne	wrlong	local04, fp
1e8ac     08 4E 85 51 |  if_ne	sub	fp, #8
1e8b0                 | LR__3116
1e8b0                 | LR__3117
1e8b0                 | LR__3118
1e8b0     08 4E 05 F1 | 	add	fp, #8
1e8b4     A7 24 02 FB | 	rdlong	local04, fp
1e8b8     08 4E 85 F1 | 	sub	fp, #8
1e8bc     03 00 00 FF 
1e8c0     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1e8c4     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1e8c8     03 00 00 FF 
1e8cc     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1e8d0     0F 25 CA F7 | 	test	local04, local01 wz
1e8d4     E0 FD 9F AD |  if_e	jmp	#LR__3111
1e8d8                 | LR__3119
1e8d8     0C 4E 05 F1 | 	add	fp, #12
1e8dc     A7 12 02 FB | 	rdlong	arg01, fp
1e8e0     0C 4E 85 F1 | 	sub	fp, #12
1e8e4     09 27 02 F6 | 	mov	local05, arg01
1e8e8     97 06 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
1e8ec                 | LR__3120
1e8ec     13 FB C9 FA | 	rdbyte	result1, local05 wz
1e8f0     01 26 06 51 |  if_ne	add	local05, #1
1e8f4     F4 FF 9F 5D |  if_ne	jmp	#LR__3120
1e8f8                 | LR__3121
1e8f8     13 13 C2 F2 | 	subr	arg01, local05
1e8fc     01 12 06 F1 | 	add	arg01, #1
1e900     64 E0 BF FD | 	call	#__system___gc_alloc_managed
1e904     48 4E 05 F1 | 	add	fp, #72
1e908     A7 FA 61 FC | 	wrlong	result1, fp
1e90c     48 4E 85 F1 | 	sub	fp, #72
1e910     00 FA 0D F2 | 	cmp	result1, #0 wz
1e914     18 00 90 AD |  if_e	jmp	#LR__3122
1e918     48 4E 05 F1 | 	add	fp, #72
1e91c     A7 12 02 FB | 	rdlong	arg01, fp
1e920     3C 4E 85 F1 | 	sub	fp, #60
1e924     A7 14 02 FB | 	rdlong	arg02, fp
1e928     0C 4E 85 F1 | 	sub	fp, #12
1e92c     34 A2 BF FD | 	call	#__system____builtin_strcpy
1e930                 | LR__3122
1e930     48 4E 05 F1 | 	add	fp, #72
1e934     A7 FA 01 FB | 	rdlong	result1, fp
1e938     48 4E 85 F1 | 	sub	fp, #72
1e93c                 | LR__3123
1e93c     A7 F0 03 F6 | 	mov	ptra, fp
1e940     B2 00 A0 FD | 	call	#popregs_
1e944                 | __system___basic_dir_ret
1e944     2D 00 64 FD | 	ret
1e948                 | 
1e948                 | __system__pack_0489
1e948     09 01 02 F6 | 	mov	_var01, arg01
1e94c     7F 16 06 F1 | 	add	arg03, #127
1e950     04 18 CE F7 | 	test	arg04, #4 wz
1e954     10 00 90 AD |  if_e	jmp	#LR__3130
1e958     00 00 0E F2 | 	cmp	_var01, #0 wz
1e95c     16 00 C6 A9 |  if_e	decod	_var01, #22
1e960     F7 00 26 F4 | 	bith	_var01, #247
1e964     B4 00 90 FD | 	jmp	#LR__3139
1e968                 | LR__3130
1e968     02 18 CE F7 | 	test	arg04, #2 wz
1e96c     00 C0 3F 5F 
1e970     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1e974     00 14 06 56 |  if_ne	mov	arg02, #0
1e978     A0 00 90 5D |  if_ne	jmp	#LR__3138
1e97c     08 18 CE F7 | 	test	arg04, #8 wz
1e980     00 00 06 56 |  if_ne	mov	_var01, #0
1e984     94 00 90 5D |  if_ne	jmp	#LR__3137
1e988     FF 16 56 F2 | 	cmps	arg03, #255 wc
1e98c     00 C0 3F 3F 
1e990     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1e994     00 14 06 36 |  if_ae	mov	arg02, #0
1e998     80 00 90 3D |  if_ae	jmp	#LR__3136
1e99c     01 16 56 F2 | 	cmps	arg03, #1 wc
1e9a0     6C 00 90 3D |  if_ae	jmp	#LR__3134
1e9a4     01 14 46 F0 | 	shr	arg02, #1
1e9a8     00 03 02 F6 | 	mov	_var02, _var01
1e9ac     01 02 06 F5 | 	and	_var02, #1
1e9b0     1F 02 66 F0 | 	shl	_var02, #31
1e9b4     01 15 42 F5 | 	or	arg02, _var02
1e9b8     01 00 46 F0 | 	shr	_var01, #1
1e9bc     97 1E 48 FB | 	callpa	#(@LR__3132-@LR__3131)>>2,fcache_load_ptr_
1e9c0                 | LR__3131
1e9c0     00 16 56 F2 | 	cmps	arg03, #0 wc
1e9c4     34 00 90 3D |  if_ae	jmp	#LR__3133
1e9c8     00 00 0E F2 | 	cmp	_var01, #0 wz
1e9cc     2C 00 90 AD |  if_e	jmp	#LR__3133
1e9d0     0A 13 02 F6 | 	mov	arg01, arg02
1e9d4     01 12 06 F5 | 	and	arg01, #1
1e9d8     01 16 06 F1 | 	add	arg03, #1
1e9dc     01 14 46 F0 | 	shr	arg02, #1
1e9e0     00 03 02 F6 | 	mov	_var02, _var01
1e9e4     01 02 06 F5 | 	and	_var02, #1
1e9e8     1F 02 66 F0 | 	shl	_var02, #31
1e9ec     01 15 42 F5 | 	or	arg02, _var02
1e9f0     09 15 42 F5 | 	or	arg02, arg01
1e9f4     01 00 46 F0 | 	shr	_var01, #1
1e9f8     C4 FF 9F FD | 	jmp	#LR__3131
1e9fc                 | LR__3132
1e9fc                 | LR__3133
1e9fc     00 16 56 F2 | 	cmps	arg03, #0 wc
1ea00     18 00 90 3D |  if_ae	jmp	#LR__3135
1ea04     00 14 0E F2 | 	cmp	arg02, #0 wz
1ea08     6F 14 62 FD | 	wrnz	arg02
1ea0c     0C 00 90 FD | 	jmp	#LR__3135
1ea10                 | LR__3134
1ea10     17 01 06 F4 | 	bitl	_var01, #279
1ea14     17 16 66 F0 | 	shl	arg03, #23
1ea18     0B 01 42 F5 | 	or	_var01, arg03
1ea1c                 | LR__3135
1ea1c                 | LR__3136
1ea1c                 | LR__3137
1ea1c                 | LR__3138
1ea1c                 | LR__3139
1ea1c     01 00 CE F7 | 	test	_var01, #1 wz
1ea20     01 14 46 55 |  if_ne	or	arg02, #1
1ea24     0A 17 02 F6 | 	mov	arg03, arg02
1ea28     00 02 06 F6 | 	mov	_var02, #0
1ea2c     FF FF 3F FF 
1ea30     FF 15 06 F1 | 	add	arg02, ##2147483647
1ea34     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1ea38     01 02 06 C6 |  if_b	mov	_var02, #1
1ea3c     01 01 02 F1 | 	add	_var01, _var02
1ea40     01 18 CE F7 | 	test	arg04, #1 wz
1ea44     1F 00 26 54 |  if_ne	bith	_var01, #31
1ea48     00 FB 01 F6 | 	mov	result1, _var01
1ea4c                 | __system__pack_0489_ret
1ea4c     2D 00 64 FD | 	ret
1ea50                 | 
1ea50                 | __system___rxtxioctl_0579
1ea50     00 15 0E F2 | 	cmp	arg02, #256 wz
1ea54     0C 00 90 AD |  if_e	jmp	#LR__3140
1ea58     01 15 0E F2 | 	cmp	arg02, #257 wz
1ea5c     1C 00 90 AD |  if_e	jmp	#LR__3141
1ea60     30 00 90 FD | 	jmp	#LR__3142
1ea64                 | LR__3140
1ea64     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1ea68     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1ea6c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1ea70     0B FB 61 FC | 	wrlong	result1, arg03
1ea74     00 FA 05 F6 | 	mov	result1, #0
1ea78     28 00 90 FD | 	jmp	#LR__3143
1ea7c                 | LR__3141
1ea7c     0B 13 02 FB | 	rdlong	arg01, arg03
1ea80     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1ea84     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1ea88     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1ea8c     00 FA 05 F6 | 	mov	result1, #0
1ea90     10 00 90 FD | 	jmp	#LR__3143
1ea94                 | LR__3142
1ea94     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1ea98     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1ea9c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1eaa0     01 FA 65 F6 | 	neg	result1, #1
1eaa4                 | LR__3143
1eaa4                 | __system___rxtxioctl_0579_ret
1eaa4     2D 00 64 FD | 	ret
1eaa8                 | 
1eaa8                 | __system____dummy_flush_0580
1eaa8     00 FA 05 F6 | 	mov	result1, #0
1eaac                 | __system____dummy_flush_0580_ret
1eaac     2D 00 64 FD | 	ret
1eab0                 | 
1eab0                 | __system___vfsread
1eab0     03 4A 05 F6 | 	mov	COUNT_, #3
1eab4     A8 00 A0 FD | 	call	#pushregs_
1eab8     28 F0 07 F1 | 	add	ptra, #40
1eabc     04 4E 05 F1 | 	add	fp, #4
1eac0     A7 12 62 FC | 	wrlong	arg01, fp
1eac4     04 4E 05 F1 | 	add	fp, #4
1eac8     A7 14 62 FC | 	wrlong	arg02, fp
1eacc     04 4E 05 F1 | 	add	fp, #4
1ead0     A7 16 62 FC | 	wrlong	arg03, fp
1ead4     04 4E 85 F1 | 	sub	fp, #4
1ead8     A7 FA 01 FB | 	rdlong	result1, fp
1eadc     14 4E 05 F1 | 	add	fp, #20
1eae0     A7 FA 61 FC | 	wrlong	result1, fp
1eae4     04 4E 05 F1 | 	add	fp, #4
1eae8     A7 00 68 FC | 	wrlong	#0, fp
1eaec     1C 4E 85 F1 | 	sub	fp, #28
1eaf0     A7 12 02 FB | 	rdlong	arg01, fp
1eaf4     04 4E 85 F1 | 	sub	fp, #4
1eaf8     08 12 06 F1 | 	add	arg01, #8
1eafc     09 FB 01 FB | 	rdlong	result1, arg01
1eb00     01 FA CD F7 | 	test	result1, #1 wz
1eb04     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1eb08     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1eb0c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1eb10     01 FA 65 A6 |  if_e	neg	result1, #1
1eb14     74 02 90 AD |  if_e	jmp	#LR__3156
1eb18     04 4E 05 F1 | 	add	fp, #4
1eb1c     A7 12 02 FB | 	rdlong	arg01, fp
1eb20     04 4E 85 F1 | 	sub	fp, #4
1eb24     14 12 06 F1 | 	add	arg01, #20
1eb28     09 FB 09 FB | 	rdlong	result1, arg01 wz
1eb2c     B8 00 90 AD |  if_e	jmp	#LR__3151
1eb30     04 4E 05 F1 | 	add	fp, #4
1eb34     A7 12 02 FB | 	rdlong	arg01, fp
1eb38     09 17 02 F6 | 	mov	arg03, arg01
1eb3c     14 16 06 F1 | 	add	arg03, #20
1eb40     0B 1F 02 FB | 	rdlong	local01, arg03
1eb44     0F 21 02 F6 | 	mov	local02, local01
1eb48     13 1E 46 F7 | 	zerox	local01, #19
1eb4c     14 20 46 F0 | 	shr	local02, #20
1eb50     02 20 66 F0 | 	shl	local02, #2
1eb54     ED 20 02 F1 | 	add	local02, __methods__
1eb58     10 21 02 FB | 	rdlong	local02, local02
1eb5c     04 4E 05 F1 | 	add	fp, #4
1eb60     A7 14 02 FB | 	rdlong	arg02, fp
1eb64     04 4E 05 F1 | 	add	fp, #4
1eb68     A7 16 02 FB | 	rdlong	arg03, fp
1eb6c     0C 4E 85 F1 | 	sub	fp, #12
1eb70     F2 22 02 F6 | 	mov	local03, objptr
1eb74     0F E5 01 F6 | 	mov	objptr, local01
1eb78     2D 20 62 FD | 	call	local02
1eb7c     11 E5 01 F6 | 	mov	objptr, local03
1eb80     10 4E 05 F1 | 	add	fp, #16
1eb84     A7 FA 61 FC | 	wrlong	result1, fp
1eb88     10 4E 85 F1 | 	sub	fp, #16
1eb8c     00 FA 55 F2 | 	cmps	result1, #0 wc
1eb90     44 00 90 3D |  if_ae	jmp	#LR__3150
1eb94     04 4E 05 F1 | 	add	fp, #4
1eb98     A7 22 02 FB | 	rdlong	local03, fp
1eb9c     11 1F 02 F6 | 	mov	local01, local03
1eba0     08 22 06 F1 | 	add	local03, #8
1eba4     11 21 02 FB | 	rdlong	local02, local03
1eba8     20 20 46 F5 | 	or	local02, #32
1ebac     08 1E 06 F1 | 	add	local01, #8
1ebb0     0F 21 62 FC | 	wrlong	local02, local01
1ebb4     0C 4E 05 F1 | 	add	fp, #12
1ebb8     A7 12 0A FB | 	rdlong	arg01, fp wz
1ebbc     10 4E 85 F1 | 	sub	fp, #16
1ebc0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1ebc4     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1ebc8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1ebcc     01 FA 65 56 |  if_ne	neg	result1, #1
1ebd0     00 FA 05 A6 |  if_e	mov	result1, #0
1ebd4     B4 01 90 FD | 	jmp	#LR__3156
1ebd8                 | LR__3150
1ebd8     10 4E 05 F1 | 	add	fp, #16
1ebdc     A7 FA 01 FB | 	rdlong	result1, fp
1ebe0     10 4E 85 F1 | 	sub	fp, #16
1ebe4     A4 01 90 FD | 	jmp	#LR__3156
1ebe8                 | LR__3151
1ebe8     04 4E 05 F1 | 	add	fp, #4
1ebec     A7 12 02 FB | 	rdlong	arg01, fp
1ebf0     20 12 06 F1 | 	add	arg01, #32
1ebf4     09 13 0A FB | 	rdlong	arg01, arg01 wz
1ebf8     14 4E 05 F1 | 	add	fp, #20
1ebfc     A7 12 62 FC | 	wrlong	arg01, fp
1ec00     18 4E 85 F1 | 	sub	fp, #24
1ec04     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1ec08     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1ec0c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1ec10     01 FA 65 A6 |  if_e	neg	result1, #1
1ec14     74 01 90 AD |  if_e	jmp	#LR__3156
1ec18     04 4E 05 F1 | 	add	fp, #4
1ec1c     A7 22 02 FB | 	rdlong	local03, fp
1ec20     04 4E 85 F1 | 	sub	fp, #4
1ec24     28 22 06 F1 | 	add	local03, #40
1ec28     11 21 0A FB | 	rdlong	local02, local03 wz
1ec2c     7C 00 90 AD |  if_e	jmp	#LR__3153
1ec30     04 4E 05 F1 | 	add	fp, #4
1ec34     A7 12 02 FB | 	rdlong	arg01, fp
1ec38     09 23 02 F6 | 	mov	local03, arg01
1ec3c     28 22 06 F1 | 	add	local03, #40
1ec40     11 1F 02 FB | 	rdlong	local01, local03
1ec44     0F 21 02 F6 | 	mov	local02, local01
1ec48     13 1E 46 F7 | 	zerox	local01, #19
1ec4c     14 20 46 F0 | 	shr	local02, #20
1ec50     02 20 66 F0 | 	shl	local02, #2
1ec54     ED 20 02 F1 | 	add	local02, __methods__
1ec58     10 21 02 FB | 	rdlong	local02, local02
1ec5c     20 4E 05 F1 | 	add	fp, #32
1ec60     A7 16 02 F6 | 	mov	arg03, fp
1ec64     24 4E 85 F1 | 	sub	fp, #36
1ec68     00 15 06 F6 | 	mov	arg02, #256
1ec6c     F2 22 02 F6 | 	mov	local03, objptr
1ec70     0F E5 01 F6 | 	mov	objptr, local01
1ec74     2D 20 62 FD | 	call	local02
1ec78     11 E5 01 F6 | 	mov	objptr, local03
1ec7c     10 4E 05 F1 | 	add	fp, #16
1ec80     A7 FA 61 FC | 	wrlong	result1, fp
1ec84     00 FA 4D F2 | 	cmps	result1, #0 wz
1ec88     10 4E 85 F1 | 	sub	fp, #16
1ec8c     1C 00 90 5D |  if_ne	jmp	#LR__3152
1ec90     24 4E 05 F1 | 	add	fp, #36
1ec94     A7 20 02 FB | 	rdlong	local02, fp
1ec98     24 4E 85 F1 | 	sub	fp, #36
1ec9c     02 20 CE F7 | 	test	local02, #2 wz
1eca0     20 4E 05 51 |  if_ne	add	fp, #32
1eca4     A7 02 68 5C |  if_ne	wrlong	#1, fp
1eca8     20 4E 85 51 |  if_ne	sub	fp, #32
1ecac                 | LR__3152
1ecac                 | LR__3153
1ecac     10 4E 05 F1 | 	add	fp, #16
1ecb0     A7 00 68 FC | 	wrlong	#0, fp
1ecb4     10 4E 85 F1 | 	sub	fp, #16
1ecb8                 | LR__3154
1ecb8     0C 4E 05 F1 | 	add	fp, #12
1ecbc     A7 22 02 FB | 	rdlong	local03, fp
1ecc0     0C 4E 85 F1 | 	sub	fp, #12
1ecc4     01 22 16 F2 | 	cmp	local03, #1 wc
1ecc8     B4 00 90 CD |  if_b	jmp	#LR__3155
1eccc     18 4E 05 F1 | 	add	fp, #24
1ecd0     A7 20 02 FB | 	rdlong	local02, fp
1ecd4     10 23 02 F6 | 	mov	local03, local02
1ecd8     13 22 46 F7 | 	zerox	local03, #19
1ecdc     14 20 46 F0 | 	shr	local02, #20
1ece0     02 20 66 F0 | 	shl	local02, #2
1ece4     ED 20 02 F1 | 	add	local02, __methods__
1ece8     10 21 02 FB | 	rdlong	local02, local02
1ecec     14 4E 85 F1 | 	sub	fp, #20
1ecf0     A7 12 02 FB | 	rdlong	arg01, fp
1ecf4     04 4E 85 F1 | 	sub	fp, #4
1ecf8     F2 1E 02 F6 | 	mov	local01, objptr
1ecfc     11 E5 01 F6 | 	mov	objptr, local03
1ed00     2D 20 62 FD | 	call	local02
1ed04     0F E5 01 F6 | 	mov	objptr, local01
1ed08     14 4E 05 F1 | 	add	fp, #20
1ed0c     A7 FA 61 FC | 	wrlong	result1, fp
1ed10     14 4E 85 F1 | 	sub	fp, #20
1ed14     00 FA 55 F2 | 	cmps	result1, #0 wc
1ed18     64 00 90 CD |  if_b	jmp	#LR__3155
1ed1c     1C 4E 05 F1 | 	add	fp, #28
1ed20     A7 22 02 FB | 	rdlong	local03, fp
1ed24     11 21 02 F6 | 	mov	local02, local03
1ed28     01 20 06 F1 | 	add	local02, #1
1ed2c     A7 20 62 FC | 	wrlong	local02, fp
1ed30     08 4E 85 F1 | 	sub	fp, #8
1ed34     A7 20 02 FB | 	rdlong	local02, fp
1ed38     11 21 42 FC | 	wrbyte	local02, local03
1ed3c     04 4E 85 F1 | 	sub	fp, #4
1ed40     A7 22 02 FB | 	rdlong	local03, fp
1ed44     01 22 06 F1 | 	add	local03, #1
1ed48     A7 22 62 FC | 	wrlong	local03, fp
1ed4c     04 4E 85 F1 | 	sub	fp, #4
1ed50     A7 22 02 FB | 	rdlong	local03, fp
1ed54     01 22 86 F1 | 	sub	local03, #1
1ed58     A7 22 62 FC | 	wrlong	local03, fp
1ed5c     14 4E 05 F1 | 	add	fp, #20
1ed60     A7 22 0A FB | 	rdlong	local03, fp wz
1ed64     20 4E 85 F1 | 	sub	fp, #32
1ed68     4C FF 9F AD |  if_e	jmp	#LR__3154
1ed6c     14 4E 05 F1 | 	add	fp, #20
1ed70     A7 20 02 FB | 	rdlong	local02, fp
1ed74     14 4E 85 F1 | 	sub	fp, #20
1ed78     0A 20 0E F2 | 	cmp	local02, #10 wz
1ed7c     38 FF 9F 5D |  if_ne	jmp	#LR__3154
1ed80                 | LR__3155
1ed80     10 4E 05 F1 | 	add	fp, #16
1ed84     A7 FA 01 FB | 	rdlong	result1, fp
1ed88     10 4E 85 F1 | 	sub	fp, #16
1ed8c                 | LR__3156
1ed8c     A7 F0 03 F6 | 	mov	ptra, fp
1ed90     B2 00 A0 FD | 	call	#popregs_
1ed94                 | __system___vfsread_ret
1ed94     2D 00 64 FD | 	ret
1ed98                 | 
1ed98                 | __system____default_filbuf
1ed98     04 4A 05 F6 | 	mov	COUNT_, #4
1ed9c     A8 00 A0 FD | 	call	#pushregs_
1eda0     09 1F 02 F6 | 	mov	local01, arg01
1eda4     0F 21 02 FB | 	rdlong	local02, local01
1eda8     0C 20 06 F1 | 	add	local02, #12
1edac     10 FB 09 FB | 	rdlong	result1, local02 wz
1edb0     0C 20 86 F1 | 	sub	local02, #12
1edb4     20 00 90 5D |  if_ne	jmp	#LR__3160
1edb8     14 20 06 F1 | 	add	local02, #20
1edbc     10 FB 01 F6 | 	mov	result1, local02
1edc0     04 20 86 F1 | 	sub	local02, #4
1edc4     10 FB 61 FC | 	wrlong	result1, local02
1edc8     04 20 86 F1 | 	sub	local02, #4
1edcc     02 00 80 FF 
1edd0     10 01 68 FC | 	wrlong	##1024, local02
1edd4     0C 20 86 F1 | 	sub	local02, #12
1edd8                 | LR__3160
1edd8     14 1E 06 F1 | 	add	local01, #20
1eddc     0F 23 02 FB | 	rdlong	local03, local01
1ede0     11 25 02 F6 | 	mov	local04, local03
1ede4     14 1E 86 F1 | 	sub	local01, #20
1ede8     13 24 46 F7 | 	zerox	local04, #19
1edec     14 22 46 F0 | 	shr	local03, #20
1edf0     02 22 66 F0 | 	shl	local03, #2
1edf4     ED 22 02 F1 | 	add	local03, __methods__
1edf8     11 23 02 FB | 	rdlong	local03, local03
1edfc     10 20 06 F1 | 	add	local02, #16
1ee00     10 15 02 FB | 	rdlong	arg02, local02
1ee04     04 20 86 F1 | 	sub	local02, #4
1ee08     10 17 02 FB | 	rdlong	arg03, local02
1ee0c     0C 20 86 F1 | 	sub	local02, #12
1ee10     0F 13 02 F6 | 	mov	arg01, local01
1ee14     F2 1E 02 F6 | 	mov	local01, objptr
1ee18     12 E5 01 F6 | 	mov	objptr, local04
1ee1c     2D 22 62 FD | 	call	local03
1ee20     0F E5 01 F6 | 	mov	objptr, local01
1ee24     FD 24 02 F6 | 	mov	local04, result1
1ee28     00 24 56 F2 | 	cmps	local04, #0 wc
1ee2c     01 FA 65 C6 |  if_b	neg	result1, #1
1ee30     28 00 90 CD |  if_b	jmp	#LR__3161
1ee34     10 25 62 FC | 	wrlong	local04, local02
1ee38     10 20 06 F1 | 	add	local02, #16
1ee3c     10 23 02 FB | 	rdlong	local03, local02
1ee40     0C 20 86 F1 | 	sub	local02, #12
1ee44     10 23 62 FC | 	wrlong	local03, local02
1ee48     04 20 06 F1 | 	add	local02, #4
1ee4c     10 23 02 FB | 	rdlong	local03, local02
1ee50     01 22 46 F5 | 	or	local03, #1
1ee54     10 23 62 FC | 	wrlong	local03, local02
1ee58     12 FB 01 F6 | 	mov	result1, local04
1ee5c                 | LR__3161
1ee5c     A7 F0 03 F6 | 	mov	ptra, fp
1ee60     B2 00 A0 FD | 	call	#popregs_
1ee64                 | __system____default_filbuf_ret
1ee64     2D 00 64 FD | 	ret
1ee68                 | 
1ee68                 | __system__getlower_0965
1ee68     41 12 56 F2 | 	cmps	arg01, #65 wc
1ee6c     10 00 90 CD |  if_b	jmp	#LR__3170
1ee70     5B 12 56 F2 | 	cmps	arg01, #91 wc
1ee74     09 FB 01 C6 |  if_b	mov	result1, arg01
1ee78     20 FA 05 C1 |  if_b	add	result1, #32
1ee7c     04 00 90 CD |  if_b	jmp	#__system__getlower_0965_ret
1ee80                 | LR__3170
1ee80     09 FB 01 F6 | 	mov	result1, arg01
1ee84                 | __system__getlower_0965_ret
1ee84     2D 00 64 FD | 	ret
1ee88                 | 
1ee88                 | __system___pat_match
1ee88     08 4A 05 F6 | 	mov	COUNT_, #8
1ee8c     A8 00 A0 FD | 	call	#pushregs_
1ee90     09 1F 02 F6 | 	mov	local01, arg01
1ee94                 | LR__3180
1ee94     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1ee98     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1ee9c     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1eea0     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1eea4     2C 00 90 AD |  if_e	jmp	#LR__3181
1eea8     0A 13 C2 FA | 	rdbyte	arg01, arg02
1eeac     B8 FF BF FD | 	call	#__system__getlower_0965
1eeb0     FD 22 02 F6 | 	mov	local03, result1
1eeb4     0F 13 C2 FA | 	rdbyte	arg01, local01
1eeb8     AC FF BF FD | 	call	#__system__getlower_0965
1eebc     11 FB 09 F2 | 	cmp	result1, local03 wz
1eec0     00 FA 05 56 |  if_ne	mov	result1, #0
1eec4     FC 00 90 5D |  if_ne	jmp	#LR__3189
1eec8     01 1E 06 F1 | 	add	local01, #1
1eecc     01 14 06 F1 | 	add	arg02, #1
1eed0     C0 FF 9F FD | 	jmp	#LR__3180
1eed4                 | LR__3181
1eed4     0A 23 C2 FA | 	rdbyte	local03, arg02
1eed8     2A 22 0E F2 | 	cmp	local03, #42 wz
1eedc     D4 00 90 5D |  if_ne	jmp	#LR__3188
1eee0     01 14 06 F1 | 	add	arg02, #1
1eee4     0A 21 C2 FA | 	rdbyte	local02, arg02
1eee8     01 14 86 F1 | 	sub	arg02, #1
1eeec     2E 20 0E F2 | 	cmp	local02, #46 wz
1eef0     28 00 90 5D |  if_ne	jmp	#LR__3182
1eef4     02 14 06 F1 | 	add	arg02, #2
1eef8     0A 21 C2 FA | 	rdbyte	local02, arg02
1eefc     02 14 86 F1 | 	sub	arg02, #2
1ef00     2A 20 0E F2 | 	cmp	local02, #42 wz
1ef04     03 14 06 A1 |  if_e	add	arg02, #3
1ef08     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1ef0c     03 14 86 A1 |  if_e	sub	arg02, #3
1ef10     12 27 0A A6 |  if_e	mov	local05, local04 wz
1ef14     01 FA 05 A6 |  if_e	mov	result1, #1
1ef18     A8 00 90 AD |  if_e	jmp	#LR__3189
1ef1c                 | LR__3182
1ef1c     01 14 06 F1 | 	add	arg02, #1
1ef20     00 28 06 F6 | 	mov	local06, #0
1ef24     97 1E 48 FB | 	callpa	#(@LR__3185-@LR__3183)>>2,fcache_load_ptr_
1ef28                 | LR__3183
1ef28     14 2B 02 F6 | 	mov	local07, local06
1ef2c     0A 2B 02 F1 | 	add	local07, arg02
1ef30     15 2B CA FA | 	rdbyte	local07, local07 wz
1ef34     14 27 02 56 |  if_ne	mov	local05, local06
1ef38     01 26 06 51 |  if_ne	add	local05, #1
1ef3c     13 29 02 56 |  if_ne	mov	local06, local05
1ef40     E4 FF 9F 5D |  if_ne	jmp	#LR__3183
1ef44     00 2C 06 F6 | 	mov	local08, #0
1ef48                 | LR__3184
1ef48     16 2B 02 F6 | 	mov	local07, local08
1ef4c     0F 2B 02 F1 | 	add	local07, local01
1ef50     15 2B CA FA | 	rdbyte	local07, local07 wz
1ef54     16 27 02 56 |  if_ne	mov	local05, local08
1ef58     01 26 06 51 |  if_ne	add	local05, #1
1ef5c     13 2D 02 56 |  if_ne	mov	local08, local05
1ef60     E4 FF 9F 5D |  if_ne	jmp	#LR__3184
1ef64                 | LR__3185
1ef64     14 2D 52 F2 | 	cmps	local08, local06 wc
1ef68     00 FA 05 C6 |  if_b	mov	result1, #0
1ef6c     54 00 90 CD |  if_b	jmp	#LR__3189
1ef70     16 21 02 F6 | 	mov	local02, local08
1ef74     14 21 82 F1 | 	sub	local02, local06
1ef78     10 1F 02 F1 | 	add	local01, local02
1ef7c                 | LR__3186
1ef7c     01 28 56 F2 | 	cmps	local06, #1 wc
1ef80     30 00 90 CD |  if_b	jmp	#LR__3187
1ef84     0F 13 C2 FA | 	rdbyte	arg01, local01
1ef88     DC FE BF FD | 	call	#__system__getlower_0965
1ef8c     FD 2C 02 F6 | 	mov	local08, result1
1ef90     0A 13 C2 FA | 	rdbyte	arg01, arg02
1ef94     D0 FE BF FD | 	call	#__system__getlower_0965
1ef98     FD 2C 0A F2 | 	cmp	local08, result1 wz
1ef9c     00 FA 05 56 |  if_ne	mov	result1, #0
1efa0     20 00 90 5D |  if_ne	jmp	#LR__3189
1efa4     01 1E 06 F1 | 	add	local01, #1
1efa8     01 14 06 F1 | 	add	arg02, #1
1efac     01 28 86 F1 | 	sub	local06, #1
1efb0     C8 FF 9F FD | 	jmp	#LR__3186
1efb4                 | LR__3187
1efb4                 | LR__3188
1efb4     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1efb8     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1efbc     01 FA 05 A6 |  if_e	mov	result1, #1
1efc0     00 FA 05 56 |  if_ne	mov	result1, #0
1efc4                 | LR__3189
1efc4     A7 F0 03 F6 | 	mov	ptra, fp
1efc8     B2 00 A0 FD | 	call	#popregs_
1efcc                 | __system___pat_match_ret
1efcc     2D 00 64 FD | 	ret
1efd0                 | 
1efd0                 | _fatfs_cc_ff_uni2oem
1efd0     00 00 06 F6 | 	mov	_var01, #0
1efd4     80 12 16 F2 | 	cmp	arg01, #128 wc
1efd8     09 01 02 C6 |  if_b	mov	_var01, arg01
1efdc     58 00 90 CD |  if_b	jmp	#LR__3194
1efe0     80 00 00 FF 
1efe4     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1efe8     4C 00 90 3D |  if_ae	jmp	#LR__3193
1efec     0A FB 31 F9 | 	getword	result1, arg02, #0
1eff0     01 00 00 FF 
1eff4     52 FB 0D F2 | 	cmp	result1, ##850 wz
1eff8     3C 00 90 5D |  if_ne	jmp	#LR__3193
1effc                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1effc     00 00 06 F6 | 	mov	_var01, #0
1f000     97 14 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
1f004                 | LR__3190
1f004     00 FB 31 F9 | 	getword	result1, _var01, #0
1f008     80 FA 15 F2 | 	cmp	result1, #128 wc
1f00c     1C 00 90 3D |  if_ae	jmp	#LR__3192
1f010     00 FB 31 F9 | 	getword	result1, _var01, #0
1f014     01 FA 65 F0 | 	shl	result1, #1
1f018     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1f01c     FD FA E1 FA | 	rdword	result1, result1
1f020     FD 12 0A F2 | 	cmp	arg01, result1 wz
1f024     01 00 06 51 |  if_ne	add	_var01, #1
1f028     D8 FF 9F 5D |  if_ne	jmp	#LR__3190
1f02c                 | LR__3191
1f02c                 | LR__3192
1f02c     00 01 32 F9 | 	getword	_var01, _var01, #0
1f030     80 00 06 F1 | 	add	_var01, #128
1f034     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1f038                 | LR__3193
1f038                 | LR__3194
1f038                 | ' 			c = (c + 0x80) & 0xFF;
1f038                 | ' 		}
1f038                 | ' 	}
1f038                 | ' 
1f038                 | ' 	return c;
1f038     00 FB 01 F6 | 	mov	result1, _var01
1f03c                 | _fatfs_cc_ff_uni2oem_ret
1f03c     2D 00 64 FD | 	ret
1f040                 | 
1f040                 | _fatfs_cc_ff_oem2uni
1f040     00 00 06 F6 | 	mov	_var01, #0
1f044     09 FB 31 F9 | 	getword	result1, arg01, #0
1f048     80 FA 15 F2 | 	cmp	result1, #128 wc
1f04c     09 01 02 C6 |  if_b	mov	_var01, arg01
1f050     2C 00 90 CD |  if_b	jmp	#LR__3201
1f054     0A 15 32 F9 | 	getword	arg02, arg02, #0
1f058     01 00 00 FF 
1f05c     52 15 0E F2 | 	cmp	arg02, ##850 wz
1f060     1C 00 90 5D |  if_ne	jmp	#LR__3200
1f064     09 FB 31 F9 | 	getword	result1, arg01, #0
1f068     00 FB 15 F2 | 	cmp	result1, #256 wc
1f06c     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1f070     80 12 86 C1 |  if_b	sub	arg01, #128
1f074     01 12 66 C0 |  if_b	shl	arg01, #1
1f078     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1f07c     09 01 E2 CA |  if_b	rdword	_var01, arg01
1f080                 | LR__3200
1f080                 | LR__3201
1f080                 | ' 		}
1f080                 | ' 	}
1f080                 | ' 
1f080                 | ' 	return c;
1f080     00 FB 01 F6 | 	mov	result1, _var01
1f084                 | _fatfs_cc_ff_oem2uni_ret
1f084     2D 00 64 FD | 	ret
1f088                 | 
1f088                 | _fatfs_cc_ff_wtoupper
1f088     09 01 02 F6 | 	mov	_var01, arg01
1f08c     80 00 00 FF 
1f090     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1f094     60 01 90 3D |  if_ae	jmp	#LR__3223
1f098     00 03 02 F6 | 	mov	_var02, _var01
1f09c     01 01 32 F9 | 	getword	_var01, _var02, #0
1f0a0     08 00 00 FF 
1f0a4     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1f0a8     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1f0ac     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1f0b0     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1f0b4     01 00 00 3F 
1f0b8     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1f0bc     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1f0c0     01 00 00 3F 
1f0c4     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1f0c8     02 07 02 F6 | 	mov	_var04, _var03
1f0cc                 | ' 		uc = (WORD)uni;
1f0cc                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1f0cc                 | ' 		for (;;) {
1f0cc                 | LR__3210
1f0cc     03 09 E2 FA | 	rdword	_var05, _var04
1f0d0     04 05 02 F6 | 	mov	_var03, _var05
1f0d4     0F 04 4E F7 | 	zerox	_var03, #15 wz
1f0d8     02 06 06 F1 | 	add	_var04, #2
1f0dc     14 01 90 AD |  if_e	jmp	#LR__3222
1f0e0     01 05 32 F9 | 	getword	_var03, _var02, #0
1f0e4     04 01 32 F9 | 	getword	_var01, _var05, #0
1f0e8     00 05 12 F2 | 	cmp	_var03, _var01 wc
1f0ec     04 01 90 CD |  if_b	jmp	#LR__3222
1f0f0     03 0B E2 FA | 	rdword	_var06, _var04
1f0f4     05 0D 32 F9 | 	getword	_var07, _var06, #0
1f0f8     08 0C 46 F0 | 	shr	_var07, #8
1f0fc     05 0B 32 F9 | 	getword	_var06, _var06, #0
1f100     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1f104     01 05 32 F9 | 	getword	_var03, _var02, #0
1f108     04 0F 32 F9 | 	getword	_var08, _var05, #0
1f10c     05 01 32 F9 | 	getword	_var01, _var06, #0
1f110     00 0F 02 F1 | 	add	_var08, _var01
1f114     07 05 52 F2 | 	cmps	_var03, _var08 wc
1f118     02 06 06 F1 | 	add	_var04, #2
1f11c     C4 00 90 3D |  if_ae	jmp	#LR__3221
1f120                 | ' 				switch (cmd) {
1f120     06 11 32 F9 | 	getword	_var09, _var07, #0
1f124     09 10 26 F3 | 	fle	_var09, #9
1f128     30 10 62 FD | 	jmprel	_var09
1f12c                 | LR__3211
1f12c     24 00 90 FD | 	jmp	#LR__3212
1f130     3C 00 90 FD | 	jmp	#LR__3213
1f134     54 00 90 FD | 	jmp	#LR__3214
1f138     5C 00 90 FD | 	jmp	#LR__3215
1f13c     64 00 90 FD | 	jmp	#LR__3216
1f140     6C 00 90 FD | 	jmp	#LR__3217
1f144     74 00 90 FD | 	jmp	#LR__3218
1f148     7C 00 90 FD | 	jmp	#LR__3219
1f14c     84 00 90 FD | 	jmp	#LR__3220
1f150     A0 00 90 FD | 	jmp	#LR__3222
1f154                 | LR__3212
1f154     01 03 32 F9 | 	getword	_var02, _var02, #0
1f158     04 09 32 F9 | 	getword	_var05, _var05, #0
1f15c     04 03 82 F1 | 	sub	_var02, _var05
1f160     01 02 66 F0 | 	shl	_var02, #1
1f164     03 03 02 F1 | 	add	_var02, _var04
1f168     01 03 E2 FA | 	rdword	_var02, _var02
1f16c     84 00 90 FD | 	jmp	#LR__3222
1f170                 | LR__3213
1f170     01 05 32 F9 | 	getword	_var03, _var02, #0
1f174     01 03 32 F9 | 	getword	_var02, _var02, #0
1f178     04 09 32 F9 | 	getword	_var05, _var05, #0
1f17c     04 03 82 F1 | 	sub	_var02, _var05
1f180     01 02 06 F5 | 	and	_var02, #1
1f184     02 03 C2 F2 | 	subr	_var02, _var03
1f188     68 00 90 FD | 	jmp	#LR__3222
1f18c                 | LR__3214
1f18c     01 03 32 F9 | 	getword	_var02, _var02, #0
1f190     10 02 86 F1 | 	sub	_var02, #16
1f194     5C 00 90 FD | 	jmp	#LR__3222
1f198                 | LR__3215
1f198     01 03 32 F9 | 	getword	_var02, _var02, #0
1f19c     20 02 86 F1 | 	sub	_var02, #32
1f1a0     50 00 90 FD | 	jmp	#LR__3222
1f1a4                 | LR__3216
1f1a4     01 03 32 F9 | 	getword	_var02, _var02, #0
1f1a8     30 02 86 F1 | 	sub	_var02, #48
1f1ac     44 00 90 FD | 	jmp	#LR__3222
1f1b0                 | LR__3217
1f1b0     01 03 32 F9 | 	getword	_var02, _var02, #0
1f1b4     1A 02 86 F1 | 	sub	_var02, #26
1f1b8     38 00 90 FD | 	jmp	#LR__3222
1f1bc                 | LR__3218
1f1bc     01 03 32 F9 | 	getword	_var02, _var02, #0
1f1c0     08 02 06 F1 | 	add	_var02, #8
1f1c4     2C 00 90 FD | 	jmp	#LR__3222
1f1c8                 | LR__3219
1f1c8     01 03 32 F9 | 	getword	_var02, _var02, #0
1f1cc     50 02 86 F1 | 	sub	_var02, #80
1f1d0     20 00 90 FD | 	jmp	#LR__3222
1f1d4                 | LR__3220
1f1d4     01 03 32 F9 | 	getword	_var02, _var02, #0
1f1d8     0E 00 00 FF 
1f1dc     60 02 86 F1 | 	sub	_var02, ##7264
1f1e0                 | ' 				}
1f1e0                 | ' 				break;
1f1e0     10 00 90 FD | 	jmp	#LR__3222
1f1e4                 | LR__3221
1f1e4     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1f1e8     02 0A 06 AA |  if_e	mul	_var06, #2
1f1ec     05 07 02 A1 |  if_e	add	_var04, _var06
1f1f0     D8 FE 9F FD | 	jmp	#LR__3210
1f1f4                 | LR__3222
1f1f4     01 01 32 F9 | 	getword	_var01, _var02, #0
1f1f8                 | LR__3223
1f1f8                 | ' 		}
1f1f8                 | ' 		uni = uc;
1f1f8                 | ' 	}
1f1f8                 | ' 
1f1f8                 | ' 	return uni;
1f1f8     00 FB 01 F6 | 	mov	result1, _var01
1f1fc                 | _fatfs_cc_ff_wtoupper_ret
1f1fc     2D 00 64 FD | 	ret
1f200                 | 
1f200                 | _fatfs_cc_strncpy
1f200     09 01 02 F6 | 	mov	_var01, arg01
1f204     97 12 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
1f208                 | ' 
1f208                 | ' 	dscan = dst;
1f208                 | ' 	sscan = src;
1f208                 | ' 	count = n;
1f208                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1f208                 | LR__3230
1f208     01 16 86 F1 | 	sub	arg03, #1
1f20c     00 16 56 F2 | 	cmps	arg03, #0 wc
1f210     18 00 90 CD |  if_b	jmp	#LR__3232
1f214     0A FB C1 FA | 	rdbyte	result1, arg02
1f218     00 FB 41 FC | 	wrbyte	result1, _var01
1f21c     01 14 06 F1 | 	add	arg02, #1
1f220     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1f224                 | ' 		continue;
1f224     01 00 06 F1 | 	add	_var01, #1
1f228     DC FF 9F 5D |  if_ne	jmp	#LR__3230
1f22c                 | LR__3231
1f22c                 | LR__3232
1f22c     97 0C 48 FB | 	callpa	#(@LR__3234-@LR__3233)>>2,fcache_load_ptr_
1f230                 | ' 	while (--count >= 0)
1f230                 | LR__3233
1f230     01 16 86 F1 | 	sub	arg03, #1
1f234     00 16 56 F2 | 	cmps	arg03, #0 wc
1f238     00 03 02 36 |  if_ae	mov	_var02, _var01
1f23c     01 00 06 31 |  if_ae	add	_var01, #1
1f240     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1f244     E8 FF 9F 3D |  if_ae	jmp	#LR__3233
1f248                 | LR__3234
1f248                 | ' 		*dscan++ = '\0';
1f248                 | ' 	return(dst);
1f248     09 FB 01 F6 | 	mov	result1, arg01
1f24c                 | _fatfs_cc_strncpy_ret
1f24c     2D 00 64 FD | 	ret
1f250                 | 
1f250                 | _fatfs_cc_memcmp
1f250                 | ' 	for (n = size; n > 0; n--)
1f250     00 16 0E F2 | 	cmp	arg03, #0 wz
1f254     28 00 90 AD |  if_e	jmp	#LR__3241
1f258                 | LR__3240
1f258     09 01 C2 FA | 	rdbyte	_var01, arg01
1f25c     0A 03 C2 FA | 	rdbyte	_var02, arg02
1f260     01 01 0A F2 | 	cmp	_var01, _var02 wz
1f264     01 12 06 A1 |  if_e	add	arg01, #1
1f268     01 14 06 A1 |  if_e	add	arg02, #1
1f26c                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1f26c     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1f270     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1f274     01 FB 81 51 |  if_ne	sub	result1, _var02
1f278     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1f27c     F6 17 6E FB | 	djnz	arg03, #LR__3240
1f280                 | LR__3241
1f280                 | ' 
1f280                 | ' 	return(0);
1f280     00 FA 05 F6 | 	mov	result1, #0
1f284                 | _fatfs_cc_memcmp_ret
1f284     2D 00 64 FD | 	ret
1f288                 | 
1f288                 | _fatfs_cc_strncmp
1f288     09 01 0A F6 | 	mov	_var01, arg01 wz
1f28c     14 00 90 5D |  if_ne	jmp	#LR__3250
1f290                 | ' 		return scan2 ? -1 : 0;
1f290     00 14 0E F2 | 	cmp	arg02, #0 wz
1f294     01 02 66 56 |  if_ne	neg	_var02, #1
1f298     00 02 06 A6 |  if_e	mov	_var02, #0
1f29c     01 FB 01 F6 | 	mov	result1, _var02
1f2a0     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1f2a4                 | LR__3250
1f2a4     00 14 0E F2 | 	cmp	arg02, #0 wz
1f2a8     01 FA 05 A6 |  if_e	mov	result1, #1
1f2ac     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f2b0     0B 05 02 F6 | 	mov	_var03, arg03
1f2b4     97 16 48 FB | 	callpa	#(@LR__3252-@LR__3251)>>2,fcache_load_ptr_
1f2b8                 | ' 	count = n;
1f2b8                 | ' 	do {
1f2b8                 | LR__3251
1f2b8     00 07 C2 FA | 	rdbyte	_var04, _var01
1f2bc     0A 09 02 F6 | 	mov	_var05, arg02
1f2c0     04 0B C2 FA | 	rdbyte	_var06, _var05
1f2c4     01 04 86 F1 | 	sub	_var03, #1
1f2c8     00 04 56 F2 | 	cmps	_var03, #0 wc
1f2cc     01 00 06 F1 | 	add	_var01, #1
1f2d0     01 14 06 F1 | 	add	arg02, #1
1f2d4     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1f2d8     08 00 90 2D |  if_nc_and_z	jmp	#LR__3253
1f2dc     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1f2e0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3251
1f2e4                 | LR__3252
1f2e4                 | LR__3253
1f2e4     00 04 56 F2 | 	cmps	_var03, #0 wc
1f2e8                 | ' 		return(0);
1f2e8     00 FA 05 C6 |  if_b	mov	result1, #0
1f2ec     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1f2f0     05 07 0A F2 | 	cmp	_var04, _var06 wz
1f2f4                 | ' 		return(0);
1f2f4     00 FA 05 A6 |  if_e	mov	result1, #0
1f2f8     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f2fc     00 06 0E F2 | 	cmp	_var04, #0 wz
1f300                 | ' 		return(-1);
1f300     01 FA 65 A6 |  if_e	neg	result1, #1
1f304     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f308     00 0A 0E F2 | 	cmp	_var06, #0 wz
1f30c                 | ' 		return(1);
1f30c     01 FA 05 A6 |  if_e	mov	result1, #1
1f310                 | ' 		return(c1 - c2);
1f310     03 FB 01 56 |  if_ne	mov	result1, _var04
1f314     05 FB 81 51 |  if_ne	sub	result1, _var06
1f318                 | _fatfs_cc_strncmp_ret
1f318     2D 00 64 FD | 	ret
1f31c                 | 
1f31c                 | _fatfs_cc_strchr
1f31c                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
1f31c                 | ' 	while ((c = *s++) != (char) charwanted)
1f31c                 | LR__3260
1f31c     09 01 02 F6 | 	mov	_var01, arg01
1f320     00 03 C2 FA | 	rdbyte	_var02, _var01
1f324     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1f328     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1f32c     03 05 0A F2 | 	cmp	_var03, _var04 wz
1f330     01 12 06 F1 | 	add	arg01, #1
1f334     14 00 90 AD |  if_e	jmp	#LR__3261
1f338     01 05 02 F6 | 	mov	_var03, _var02
1f33c     07 04 4E F7 | 	zerox	_var03, #7 wz
1f340     00 FA 05 A6 |  if_e	mov	result1, #0
1f344     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1f348     D0 FF 9F FD | 	jmp	#LR__3260
1f34c                 | LR__3261
1f34c                 | ' 	return((char *)--s);
1f34c     01 12 86 F1 | 	sub	arg01, #1
1f350     09 FB 01 F6 | 	mov	result1, arg01
1f354                 | _fatfs_cc_strchr_ret
1f354     2D 00 64 FD | 	ret
1f358                 | 
1f358                 | _fatfs_cc_disk_initialize
1f358     04 4A 05 F6 | 	mov	COUNT_, #4
1f35c     A8 00 A0 FD | 	call	#pushregs_
1f360     40 F0 07 F1 | 	add	ptra, #64
1f364     04 4E 05 F1 | 	add	fp, #4
1f368     A7 12 42 FC | 	wrbyte	arg01, fp
1f36c     01 00 00 FF 
1f370     14 E4 05 F1 | 	add	objptr, ##532
1f374     F2 18 02 FB | 	rdlong	arg04, objptr
1f378     2C 4E 05 F1 | 	add	fp, #44
1f37c     A7 18 62 FC | 	wrlong	arg04, fp
1f380     04 E4 85 F1 | 	sub	objptr, #4
1f384     F2 18 02 FB | 	rdlong	arg04, objptr
1f388     04 4E 05 F1 | 	add	fp, #4
1f38c     A7 18 62 FC | 	wrlong	arg04, fp
1f390     08 E4 05 F1 | 	add	objptr, #8
1f394     F2 18 02 FB | 	rdlong	arg04, objptr
1f398     04 4E 05 F1 | 	add	fp, #4
1f39c     A7 18 62 FC | 	wrlong	arg04, fp
1f3a0     04 E4 05 F1 | 	add	objptr, #4
1f3a4     F2 18 02 FB | 	rdlong	arg04, objptr
1f3a8     04 4E 05 F1 | 	add	fp, #4
1f3ac     A7 18 62 FC | 	wrlong	arg04, fp
1f3b0     04 E4 05 F1 | 	add	objptr, #4
1f3b4     F2 02 48 FC | 	wrbyte	#1, objptr
1f3b8     01 00 00 FF 
1f3bc     20 E4 85 F1 | 	sub	objptr, ##544
1f3c0     38 4E 85 F1 | 	sub	fp, #56
1f3c4     A7 18 CA FA | 	rdbyte	arg04, fp wz
1f3c8     04 4E 85 F1 | 	sub	fp, #4
1f3cc                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1f3cc                 | '             return RES_NOTRDY;
1f3cc     03 FA 05 56 |  if_ne	mov	result1, #3
1f3d0     D8 05 90 5D |  if_ne	jmp	#LR__3288
1f3d4     13 00 00 FF 
1f3d8     10 13 06 F6 | 	mov	arg01, ##10000
1f3dc     30 9B BF FD | 	call	#__system___waitus
1f3e0     30 4E 05 F1 | 	add	fp, #48
1f3e4     A7 12 02 FB | 	rdlong	arg01, fp
1f3e8     09 01 08 FC | 	wrpin	#0, arg01
1f3ec     04 4E 05 F1 | 	add	fp, #4
1f3f0     A7 12 02 FB | 	rdlong	arg01, fp
1f3f4     09 01 08 FC | 	wrpin	#0, arg01
1f3f8     04 4E 05 F1 | 	add	fp, #4
1f3fc     A7 12 02 FB | 	rdlong	arg01, fp
1f400     09 01 08 FC | 	wrpin	#0, arg01
1f404     04 4E 05 F1 | 	add	fp, #4
1f408     A7 12 02 FB | 	rdlong	arg01, fp
1f40c     09 00 80 FF 
1f410     09 01 08 FC | 	wrpin	##4608, arg01
1f414     0C 4E 85 F1 | 	sub	fp, #12
1f418     A7 12 02 FB | 	rdlong	arg01, fp
1f41c     59 12 62 FD | 	drvh	arg01
1f420     04 4E 05 F1 | 	add	fp, #4
1f424     A7 12 02 FB | 	rdlong	arg01, fp
1f428     59 12 62 FD | 	drvh	arg01
1f42c     04 4E 05 F1 | 	add	fp, #4
1f430     A7 12 02 FB | 	rdlong	arg01, fp
1f434     59 12 62 FD | 	drvh	arg01
1f438     04 4E 05 F1 | 	add	fp, #4
1f43c     A7 12 02 FB | 	rdlong	arg01, fp
1f440     59 12 62 FD | 	drvh	arg01
1f444     20 4E 85 F1 | 	sub	fp, #32
1f448     00 04 80 FF 
1f44c     A7 20 68 FC | 	wrlong	##524304, fp
1f450     04 4E 05 F1 | 	add	fp, #4
1f454     20 03 80 FF 
1f458     A7 90 68 FC | 	wrlong	##409672, fp
1f45c     14 4E 05 F1 | 	add	fp, #20
1f460     A7 1E 02 FB | 	rdlong	local01, fp
1f464     18 4E 85 F1 | 	sub	fp, #24
1f468     A7 16 02 FB | 	rdlong	arg03, fp
1f46c     40 1E 62 FD | 	dirl	local01
1f470     A0 03 80 FF 
1f474     0F 91 08 FC | 	wrpin	##475208, local01
1f478     0F 17 12 FC | 	wxpin	arg03, local01
1f47c     0F 01 28 FC | 	wypin	#0, local01
1f480     41 1E 62 FD | 	dirh	local01
1f484     1C 4E 05 F1 | 	add	fp, #28
1f488     A7 20 02 FB | 	rdlong	local02, fp
1f48c     10 1F 82 F1 | 	sub	local01, local02
1f490     07 1E 06 F5 | 	and	local01, #7
1f494     18 1E 66 F0 | 	shl	local01, #24
1f498     78 14 06 F6 | 	mov	arg02, #120
1f49c     0F 15 42 F5 | 	or	arg02, local01
1f4a0     14 4E 85 F1 | 	sub	fp, #20
1f4a4     A7 14 62 FC | 	wrlong	arg02, fp
1f4a8     14 4E 05 F1 | 	add	fp, #20
1f4ac     A7 12 02 FB | 	rdlong	arg01, fp
1f4b0     10 14 26 F4 | 	bith	arg02, #16
1f4b4     40 12 62 FD | 	dirl	arg01
1f4b8     09 15 02 FC | 	wrpin	arg02, arg01
1f4bc     09 3F 18 FC | 	wxpin	#31, arg01
1f4c0     FF FF FF FF 
1f4c4     09 FF 2B FC | 	wypin	##-1, arg01
1f4c8     41 12 62 FD | 	dirh	arg01
1f4cc     04 4E 85 F1 | 	sub	fp, #4
1f4d0     A7 14 02 FB | 	rdlong	arg02, fp
1f4d4     08 4E 05 F1 | 	add	fp, #8
1f4d8     A7 22 02 FB | 	rdlong	local03, fp
1f4dc     11 15 82 F1 | 	sub	arg02, local03
1f4e0     07 14 06 F5 | 	and	arg02, #7
1f4e4     18 14 66 F0 | 	shl	arg02, #24
1f4e8     14 4E 85 F1 | 	sub	fp, #20
1f4ec     A7 14 62 FC | 	wrlong	arg02, fp
1f4f0     29 00 00 FF 
1f4f4     7A 14 46 F5 | 	or	arg02, ##21114
1f4f8     A7 14 62 FC | 	wrlong	arg02, fp
1f4fc     14 4E 05 F1 | 	add	fp, #20
1f500     A7 12 02 FB | 	rdlong	arg01, fp
1f504     40 12 62 FD | 	dirl	arg01
1f508     09 15 02 FC | 	wrpin	arg02, arg01
1f50c     09 4F 18 FC | 	wxpin	#39, arg01
1f510     09 01 28 FC | 	wypin	#0, arg01
1f514     41 12 62 FD | 	dirh	arg01
1f518     28 4E 85 F1 | 	sub	fp, #40
1f51c     A7 12 02 F6 | 	mov	arg01, fp
1f520     14 4E 85 F1 | 	sub	fp, #20
1f524     0A 14 06 F6 | 	mov	arg02, #10
1f528     0C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f52c     00 12 06 F6 | 	mov	arg01, #0
1f530     00 14 06 F6 | 	mov	arg02, #0
1f534     D8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f538     14 80 B0 FD | 	call	#_fatfs_cc_deselect_1009
1f53c     64 12 06 F6 | 	mov	arg01, #100
1f540     CC 99 BF FD | 	call	#__system___waitus
1f544     14 4E 05 F1 | 	add	fp, #20
1f548     A7 12 02 F6 | 	mov	arg01, fp
1f54c     14 4E 85 F1 | 	sub	fp, #20
1f550     0A 14 06 F6 | 	mov	arg02, #10
1f554     E0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f558     0C 4E 05 F1 | 	add	fp, #12
1f55c     A7 00 48 FC | 	wrbyte	#0, fp
1f560     0C 4E 85 F1 | 	sub	fp, #12
1f564     00 12 06 F6 | 	mov	arg01, #0
1f568     00 14 06 F6 | 	mov	arg02, #0
1f56c     A0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f570     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1f574     01 18 0E F2 | 	cmp	arg04, #1 wz
1f578     B8 03 90 5D |  if_ne	jmp	#LR__3287
1f57c     08 12 06 F6 | 	mov	arg01, #8
1f580     AA 15 06 F6 | 	mov	arg02, #426
1f584     88 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f588     FD FA E1 F8 | 	getbyte	result1, result1, #0
1f58c     01 FA 0D F2 | 	cmp	result1, #1 wz
1f590     98 01 90 5D |  if_ne	jmp	#LR__3273
1f594     14 4E 05 F1 | 	add	fp, #20
1f598     A7 12 02 F6 | 	mov	arg01, fp
1f59c     14 4E 85 F1 | 	sub	fp, #20
1f5a0     04 14 06 F6 | 	mov	arg02, #4
1f5a4     90 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f5a8     16 4E 05 F1 | 	add	fp, #22
1f5ac     A7 24 C2 FA | 	rdbyte	local04, fp
1f5b0     16 4E 85 F1 | 	sub	fp, #22
1f5b4     01 24 0E F2 | 	cmp	local04, #1 wz
1f5b8     17 4E 05 A1 |  if_e	add	fp, #23
1f5bc     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1f5c0     17 4E 85 A1 |  if_e	sub	fp, #23
1f5c4     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1f5c8     68 03 90 5D |  if_ne	jmp	#LR__3286
1f5cc                 | ' 				for (tmr = 1000; tmr; tmr--) {
1f5cc     18 4E 05 F1 | 	add	fp, #24
1f5d0     01 00 80 FF 
1f5d4     A7 D0 6B FC | 	wrlong	##1000, fp
1f5d8     18 4E 85 F1 | 	sub	fp, #24
1f5dc                 | LR__3270
1f5dc     18 4E 05 F1 | 	add	fp, #24
1f5e0     A7 1E 0A FB | 	rdlong	local01, fp wz
1f5e4     18 4E 85 F1 | 	sub	fp, #24
1f5e8     3C 00 90 AD |  if_e	jmp	#LR__3271
1f5ec     A9 12 06 F6 | 	mov	arg01, #169
1f5f0     1E 14 C6 F9 | 	decod	arg02, #30
1f5f4     18 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f5f8     FD 24 02 F6 | 	mov	local04, result1
1f5fc     07 24 4E F7 | 	zerox	local04, #7 wz
1f600     24 00 90 AD |  if_e	jmp	#LR__3271
1f604     01 00 00 FF 
1f608     E8 13 06 F6 | 	mov	arg01, ##1000
1f60c     00 99 BF FD | 	call	#__system___waitus
1f610     18 4E 05 F1 | 	add	fp, #24
1f614     A7 24 02 FB | 	rdlong	local04, fp
1f618     01 24 86 F1 | 	sub	local04, #1
1f61c     A7 24 62 FC | 	wrlong	local04, fp
1f620     18 4E 85 F1 | 	sub	fp, #24
1f624     B4 FF 9F FD | 	jmp	#LR__3270
1f628                 | LR__3271
1f628     18 4E 05 F1 | 	add	fp, #24
1f62c     A7 24 0A FB | 	rdlong	local04, fp wz
1f630     18 4E 85 F1 | 	sub	fp, #24
1f634     4C 00 90 AD |  if_e	jmp	#LR__3272
1f638     3A 12 06 F6 | 	mov	arg01, #58
1f63c     00 14 06 F6 | 	mov	arg02, #0
1f640     CC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f644     FD 22 02 F6 | 	mov	local03, result1
1f648     07 22 4E F7 | 	zerox	local03, #7 wz
1f64c     34 00 90 5D |  if_ne	jmp	#LR__3272
1f650     14 4E 05 F1 | 	add	fp, #20
1f654     A7 12 02 F6 | 	mov	arg01, fp
1f658     14 4E 85 F1 | 	sub	fp, #20
1f65c     04 14 06 F6 | 	mov	arg02, #4
1f660     D4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0999
1f664     14 4E 05 F1 | 	add	fp, #20
1f668     A7 1E C2 FA | 	rdbyte	local01, fp
1f66c     40 1E CE F7 | 	test	local01, #64 wz
1f670     0C 24 06 56 |  if_ne	mov	local04, #12
1f674     04 24 06 A6 |  if_e	mov	local04, #4
1f678     08 4E 85 F1 | 	sub	fp, #8
1f67c     A7 24 42 FC | 	wrbyte	local04, fp
1f680     0C 4E 85 F1 | 	sub	fp, #12
1f684                 | LR__3272
1f684     14 24 06 FB | 	rdlong	local04, #20
1f688     18 4E 05 F1 | 	add	fp, #24
1f68c     A7 24 62 FC | 	wrlong	local04, fp
1f690     0C 4E 05 F1 | 	add	fp, #12
1f694     A7 24 02 FB | 	rdlong	local04, fp
1f698     1B 24 26 F4 | 	bith	local04, #27
1f69c     A7 24 62 FC | 	wrlong	local04, fp
1f6a0     0C 4E 85 F1 | 	sub	fp, #12
1f6a4     A7 24 02 FB | 	rdlong	local04, fp
1f6a8     18 4E 85 F1 | 	sub	fp, #24
1f6ac     68 78 04 FF 
1f6b0     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1f6b4     1C 4E 05 C1 |  if_b	add	fp, #28
1f6b8     00 01 80 CF 
1f6bc     A7 08 68 CC |  if_b	wrlong	##131076, fp
1f6c0     1C 4E 85 C1 |  if_b	sub	fp, #28
1f6c4     6C 02 90 CD |  if_b	jmp	#LR__3286
1f6c8     18 4E 05 F1 | 	add	fp, #24
1f6cc     A7 24 02 FB | 	rdlong	local04, fp
1f6d0     18 4E 85 F1 | 	sub	fp, #24
1f6d4     E1 F5 05 FF 
1f6d8     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1f6dc     1C 4E 05 C1 |  if_b	add	fp, #28
1f6e0     00 01 80 CF 
1f6e4     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1f6e8     1C 4E 85 C1 |  if_b	sub	fp, #28
1f6ec     44 02 90 CD |  if_b	jmp	#LR__3286
1f6f0     18 4E 05 F1 | 	add	fp, #24
1f6f4     A7 24 02 FB | 	rdlong	local04, fp
1f6f8     18 4E 85 F1 | 	sub	fp, #24
1f6fc     3B 58 08 FF 
1f700     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1f704     1C 4E 05 C1 |  if_b	add	fp, #28
1f708     00 01 80 CF 
1f70c     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1f710     1C 4E 85 C1 |  if_b	sub	fp, #28
1f714     1C 02 90 CD |  if_b	jmp	#LR__3286
1f718     1C 4E 05 F1 | 	add	fp, #28
1f71c     80 01 80 FF 
1f720     A7 10 68 FC | 	wrlong	##196616, fp
1f724     1C 4E 85 F1 | 	sub	fp, #28
1f728     08 02 90 FD | 	jmp	#LR__3286
1f72c                 | LR__3273
1f72c     A9 12 06 F6 | 	mov	arg01, #169
1f730     00 14 06 F6 | 	mov	arg02, #0
1f734     D8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f738     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1f73c     02 24 16 F2 | 	cmp	local04, #2 wc
1f740     18 00 90 3D |  if_ae	jmp	#LR__3274
1f744     0C 4E 05 F1 | 	add	fp, #12
1f748     A7 04 48 FC | 	wrbyte	#2, fp
1f74c     04 4E 05 F1 | 	add	fp, #4
1f750     A7 52 49 FC | 	wrbyte	#169, fp
1f754     10 4E 85 F1 | 	sub	fp, #16
1f758     14 00 90 FD | 	jmp	#LR__3275
1f75c                 | LR__3274
1f75c     0C 4E 05 F1 | 	add	fp, #12
1f760     A7 02 48 FC | 	wrbyte	#1, fp
1f764     04 4E 05 F1 | 	add	fp, #4
1f768     A7 02 48 FC | 	wrbyte	#1, fp
1f76c     10 4E 85 F1 | 	sub	fp, #16
1f770                 | LR__3275
1f770                 | ' 				ty =  0x01 ; cmd =  (1) ;
1f770                 | ' 			}
1f770                 | ' 			for (tmr = 1000; tmr; tmr--) {
1f770     18 4E 05 F1 | 	add	fp, #24
1f774     01 00 80 FF 
1f778     A7 D0 6B FC | 	wrlong	##1000, fp
1f77c     18 4E 85 F1 | 	sub	fp, #24
1f780                 | LR__3276
1f780     18 4E 05 F1 | 	add	fp, #24
1f784     A7 22 0A FB | 	rdlong	local03, fp wz
1f788     18 4E 85 F1 | 	sub	fp, #24
1f78c     44 00 90 AD |  if_e	jmp	#LR__3277
1f790     10 4E 05 F1 | 	add	fp, #16
1f794     A7 12 C2 FA | 	rdbyte	arg01, fp
1f798     10 4E 85 F1 | 	sub	fp, #16
1f79c     00 14 06 F6 | 	mov	arg02, #0
1f7a0     6C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f7a4     FD 24 02 F6 | 	mov	local04, result1
1f7a8     07 24 4E F7 | 	zerox	local04, #7 wz
1f7ac     24 00 90 AD |  if_e	jmp	#LR__3277
1f7b0     01 00 00 FF 
1f7b4     E8 13 06 F6 | 	mov	arg01, ##1000
1f7b8     54 97 BF FD | 	call	#__system___waitus
1f7bc     18 4E 05 F1 | 	add	fp, #24
1f7c0     A7 24 02 FB | 	rdlong	local04, fp
1f7c4     01 24 86 F1 | 	sub	local04, #1
1f7c8     A7 24 62 FC | 	wrlong	local04, fp
1f7cc     18 4E 85 F1 | 	sub	fp, #24
1f7d0     AC FF 9F FD | 	jmp	#LR__3276
1f7d4                 | LR__3277
1f7d4     18 4E 05 F1 | 	add	fp, #24
1f7d8     A7 24 0A FB | 	rdlong	local04, fp wz
1f7dc     18 4E 85 F1 | 	sub	fp, #24
1f7e0     14 00 90 AD |  if_e	jmp	#LR__3278
1f7e4     10 12 06 F6 | 	mov	arg01, #16
1f7e8     09 14 C6 F9 | 	decod	arg02, #9
1f7ec     20 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1f7f0     07 FA 4D F7 | 	zerox	result1, #7 wz
1f7f4     0C 00 90 AD |  if_e	jmp	#LR__3279
1f7f8                 | LR__3278
1f7f8     0C 4E 05 F1 | 	add	fp, #12
1f7fc     A7 00 48 FC | 	wrbyte	#0, fp
1f800     0C 4E 85 F1 | 	sub	fp, #12
1f804                 | LR__3279
1f804     14 24 06 FB | 	rdlong	local04, #20
1f808     18 4E 05 F1 | 	add	fp, #24
1f80c     A7 24 62 FC | 	wrlong	local04, fp
1f810     18 4E 85 F1 | 	sub	fp, #24
1f814     F0 FA 02 FF 
1f818     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1f81c     18 00 90 3D |  if_ae	jmp	#LR__3280
1f820     24 4E 05 F1 | 	add	fp, #36
1f824     A7 24 02 FB | 	rdlong	local04, fp
1f828     1B 24 26 F4 | 	bith	local04, #27
1f82c     A7 24 62 FC | 	wrlong	local04, fp
1f830     24 4E 85 F1 | 	sub	fp, #36
1f834     2C 00 90 FD | 	jmp	#LR__3281
1f838                 | LR__3280
1f838     18 4E 05 F1 | 	add	fp, #24
1f83c     A7 24 02 FB | 	rdlong	local04, fp
1f840     18 4E 85 F1 | 	sub	fp, #24
1f844     E1 F5 05 FF 
1f848     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1f84c     24 4E 05 C1 |  if_b	add	fp, #36
1f850     A7 24 02 CB |  if_b	rdlong	local04, fp
1f854     80 00 04 CF 
1f858     00 24 46 C5 |  if_b	or	local04, ##134283264
1f85c     A7 24 62 CC |  if_b	wrlong	local04, fp
1f860     24 4E 85 C1 |  if_b	sub	fp, #36
1f864                 | LR__3281
1f864     18 4E 05 F1 | 	add	fp, #24
1f868     A7 24 02 FB | 	rdlong	local04, fp
1f86c     18 4E 85 F1 | 	sub	fp, #24
1f870     F0 FA 02 FF 
1f874     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1f878     1C 4E 05 C1 |  if_b	add	fp, #28
1f87c     00 01 80 CF 
1f880     A7 08 68 CC |  if_b	wrlong	##131076, fp
1f884     1C 4E 85 C1 |  if_b	sub	fp, #28
1f888     A8 00 90 CD |  if_b	jmp	#LR__3285
1f88c     18 4E 05 F1 | 	add	fp, #24
1f890     A7 24 02 FB | 	rdlong	local04, fp
1f894     18 4E 85 F1 | 	sub	fp, #24
1f898     68 78 04 FF 
1f89c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1f8a0     1C 4E 05 C1 |  if_b	add	fp, #28
1f8a4     80 01 80 CF 
1f8a8     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1f8ac     1C 4E 85 C1 |  if_b	sub	fp, #28
1f8b0     80 00 90 CD |  if_b	jmp	#LR__3284
1f8b4     18 4E 05 F1 | 	add	fp, #24
1f8b8     A7 24 02 FB | 	rdlong	local04, fp
1f8bc     18 4E 85 F1 | 	sub	fp, #24
1f8c0     E1 F5 05 FF 
1f8c4     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1f8c8     1C 4E 05 C1 |  if_b	add	fp, #28
1f8cc     00 02 80 CF 
1f8d0     A7 10 68 CC |  if_b	wrlong	##262152, fp
1f8d4     1C 4E 85 C1 |  if_b	sub	fp, #28
1f8d8     58 00 90 CD |  if_b	jmp	#LR__3283
1f8dc     18 4E 05 F1 | 	add	fp, #24
1f8e0     A7 24 02 FB | 	rdlong	local04, fp
1f8e4     18 4E 85 F1 | 	sub	fp, #24
1f8e8     59 73 07 FF 
1f8ec     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1f8f0     1C 4E 05 C1 |  if_b	add	fp, #28
1f8f4     80 02 80 CF 
1f8f8     A7 14 68 CC |  if_b	wrlong	##327690, fp
1f8fc     1C 4E 85 C1 |  if_b	sub	fp, #28
1f900     30 00 90 CD |  if_b	jmp	#LR__3282
1f904     18 4E 05 F1 | 	add	fp, #24
1f908     A7 24 02 FB | 	rdlong	local04, fp
1f90c     18 4E 85 F1 | 	sub	fp, #24
1f910     D1 F0 08 FF 
1f914     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1f918     1C 4E 05 C1 |  if_b	add	fp, #28
1f91c     00 03 80 CF 
1f920     A7 18 68 CC |  if_b	wrlong	##393228, fp
1f924     1C 4E 85 F3 | 	sumc	fp, #28
1f928     80 03 80 3F 
1f92c     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1f930     1C 4E 85 31 |  if_ae	sub	fp, #28
1f934                 | LR__3282
1f934                 | LR__3283
1f934                 | LR__3284
1f934                 | LR__3285
1f934                 | LR__3286
1f934                 | LR__3287
1f934     0C 4E 05 F1 | 	add	fp, #12
1f938     A7 24 C2 FA | 	rdbyte	local04, fp
1f93c     01 00 00 FF 
1f940     21 E4 05 F1 | 	add	objptr, ##545
1f944     F2 24 42 FC | 	wrbyte	local04, objptr
1f948     A7 1E CA FA | 	rdbyte	local01, fp wz
1f94c     00 24 06 56 |  if_ne	mov	local04, #0
1f950     01 24 06 A6 |  if_e	mov	local04, #1
1f954     20 4E 05 F1 | 	add	fp, #32
1f958     A7 24 42 FC | 	wrbyte	local04, fp
1f95c     A7 24 C2 FA | 	rdbyte	local04, fp
1f960     2C 4E 85 F1 | 	sub	fp, #44
1f964     01 E4 85 F1 | 	sub	objptr, #1
1f968     F2 24 42 FC | 	wrbyte	local04, objptr
1f96c     01 00 00 FF 
1f970     20 E4 85 F1 | 	sub	objptr, ##544
1f974     D8 7B B0 FD | 	call	#_fatfs_cc_deselect_1009
1f978     34 4E 05 F1 | 	add	fp, #52
1f97c     A7 12 02 FB | 	rdlong	arg01, fp
1f980     18 4E 85 F1 | 	sub	fp, #24
1f984     A7 14 02 FB | 	rdlong	arg02, fp
1f988     09 15 12 FC | 	wxpin	arg02, arg01
1f98c     1C 4E 05 F1 | 	add	fp, #28
1f990     A7 12 02 FB | 	rdlong	arg01, fp
1f994     14 4E 85 F1 | 	sub	fp, #20
1f998     A7 14 02 FB | 	rdlong	arg02, fp
1f99c     09 15 02 FC | 	wrpin	arg02, arg01
1f9a0                 | ' 
1f9a0                 | ' 		}
1f9a0                 | ' 	}
1f9a0                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1f9a0                 | ' 	CardType = ty;
1f9a0                 | ' 	s = ty ? 0 :  0x01 ;
1f9a0                 | ' 	Stat = s;
1f9a0                 | ' 
1f9a0                 | ' 	deselect();
1f9a0                 | ' 
1f9a0                 | ' 
1f9a0                 | ' 	_wxpin( PIN_CLK, ck_div );
1f9a0                 | ' 	_wrpin( PIN_DI, spm_tx );
1f9a0                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1f9a0                 | ' 	return s;
1f9a0     08 4E 05 F1 | 	add	fp, #8
1f9a4     A7 FA C1 FA | 	rdbyte	result1, fp
1f9a8     2C 4E 85 F1 | 	sub	fp, #44
1f9ac                 | LR__3288
1f9ac     A7 F0 03 F6 | 	mov	ptra, fp
1f9b0     B2 00 A0 FD | 	call	#popregs_
1f9b4                 | _fatfs_cc_disk_initialize_ret
1f9b4     2D 00 64 FD | 	ret
1f9b8                 | 
1f9b8                 | _fatfs_cc_disk_read
1f9b8     05 4A 05 F6 | 	mov	COUNT_, #5
1f9bc     A8 00 A0 FD | 	call	#pushregs_
1f9c0     0A 1F 02 F6 | 	mov	local01, arg02
1f9c4     0B 21 02 F6 | 	mov	local02, arg03
1f9c8     0C 23 02 F6 | 	mov	local03, arg04
1f9cc     00 12 0E F2 | 	cmp	arg01, #0 wz
1f9d0     01 FA 05 56 |  if_ne	mov	result1, #1
1f9d4                 | ' 
1f9d4                 | ' 	return Stat;
1f9d4     01 00 00 AF 
1f9d8     20 E4 05 A1 |  if_e	add	objptr, ##544
1f9dc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1f9e0     01 00 00 AF 
1f9e4     20 E4 85 A1 |  if_e	sub	objptr, ##544
1f9e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1f9ec     01 FA CD F7 | 	test	result1, #1 wz
1f9f0     03 FA 05 56 |  if_ne	mov	result1, #3
1f9f4     84 00 90 5D |  if_ne	jmp	#LR__3292
1f9f8     01 00 00 FF 
1f9fc     21 E4 05 F1 | 	add	objptr, ##545
1fa00     F2 24 C2 FA | 	rdbyte	local04, objptr
1fa04     01 00 00 FF 
1fa08     21 E4 85 F1 | 	sub	objptr, ##545
1fa0c     08 24 CE F7 | 	test	local04, #8 wz
1fa10     09 20 66 A0 |  if_e	shl	local02, #9
1fa14     02 22 16 F2 | 	cmp	local03, #2 wc
1fa18     12 24 06 36 |  if_ae	mov	local04, #18
1fa1c     11 24 06 C6 |  if_b	mov	local04, #17
1fa20     10 15 02 F6 | 	mov	arg02, local02
1fa24     12 13 02 F6 | 	mov	arg01, local04
1fa28     E4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fa2c     FD 26 02 F6 | 	mov	local05, result1
1fa30     07 26 4E F7 | 	zerox	local05, #7 wz
1fa34     30 00 90 5D |  if_ne	jmp	#LR__3291
1fa38                 | ' 		do {
1fa38                 | LR__3290
1fa38     0F 13 02 F6 | 	mov	arg01, local01
1fa3c     09 14 C6 F9 | 	decod	arg02, #9
1fa40     20 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1017
1fa44     00 FA 0D F2 | 	cmp	result1, #0 wz
1fa48     01 00 00 5F 
1fa4c     00 1E 06 51 |  if_ne	add	local01, ##512
1fa50     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3290
1fa54     12 25 E2 F8 | 	getbyte	local04, local04, #0
1fa58     12 24 0E F2 | 	cmp	local04, #18 wz
1fa5c     0C 12 06 A6 |  if_e	mov	arg01, #12
1fa60     00 14 06 A6 |  if_e	mov	arg02, #0
1fa64     A8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1023
1fa68                 | LR__3291
1fa68     E4 7A B0 FD | 	call	#_fatfs_cc_deselect_1009
1fa6c                 | ' 	}
1fa6c                 | ' 	deselect();
1fa6c                 | ' 
1fa6c                 | ' 	return count ? RES_ERROR : RES_OK;
1fa6c     00 22 0E F2 | 	cmp	local03, #0 wz
1fa70     01 26 06 56 |  if_ne	mov	local05, #1
1fa74     00 26 06 A6 |  if_e	mov	local05, #0
1fa78     13 FB 01 F6 | 	mov	result1, local05
1fa7c                 | LR__3292
1fa7c     A7 F0 03 F6 | 	mov	ptra, fp
1fa80     B2 00 A0 FD | 	call	#popregs_
1fa84                 | _fatfs_cc_disk_read_ret
1fa84     2D 00 64 FD | 	ret
1fa88                 | 
1fa88                 | _fatfs_cc_disk_write
1fa88     04 4A 05 F6 | 	mov	COUNT_, #4
1fa8c     A8 00 A0 FD | 	call	#pushregs_
1fa90     0A 1F 02 F6 | 	mov	local01, arg02
1fa94     0C 21 02 F6 | 	mov	local02, arg04
1fa98     0B 23 02 F6 | 	mov	local03, arg03
1fa9c     00 12 0E F2 | 	cmp	arg01, #0 wz
1faa0     01 FA 05 56 |  if_ne	mov	result1, #1
1faa4                 | ' 
1faa4                 | ' 	return Stat;
1faa4     01 00 00 AF 
1faa8     20 E4 05 A1 |  if_e	add	objptr, ##544
1faac     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fab0     01 00 00 AF 
1fab4     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fab8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fabc     01 FA CD F7 | 	test	result1, #1 wz
1fac0     03 FA 05 56 |  if_ne	mov	result1, #3
1fac4     D4 00 90 5D |  if_ne	jmp	#LR__3304
1fac8     01 00 00 FF 
1facc     21 E4 05 F1 | 	add	objptr, ##545
1fad0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fad4     01 00 00 FF 
1fad8     21 E4 85 F1 | 	sub	objptr, ##545
1fadc     08 16 CE F7 | 	test	arg03, #8 wz
1fae0     09 22 66 A0 |  if_e	shl	local03, #9
1fae4     01 20 0E F2 | 	cmp	local02, #1 wz
1fae8     30 00 90 5D |  if_ne	jmp	#LR__3300
1faec     18 12 06 F6 | 	mov	arg01, #24
1faf0     11 15 02 F6 | 	mov	arg02, local03
1faf4     18 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1faf8     FD 24 02 F6 | 	mov	local04, result1
1fafc     07 24 4E F7 | 	zerox	local04, #7 wz
1fb00     84 00 90 5D |  if_ne	jmp	#LR__3303
1fb04     0F 13 02 F6 | 	mov	arg01, local01
1fb08     FE 14 06 F6 | 	mov	arg02, #254
1fb0c     34 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1019
1fb10     00 FA 0D F2 | 	cmp	result1, #0 wz
1fb14     00 20 06 56 |  if_ne	mov	local02, #0
1fb18     6C 00 90 FD | 	jmp	#LR__3303
1fb1c                 | LR__3300
1fb1c     01 00 00 FF 
1fb20     21 E4 05 F1 | 	add	objptr, ##545
1fb24     F2 24 C2 FA | 	rdbyte	local04, objptr
1fb28     01 00 00 FF 
1fb2c     21 E4 85 F1 | 	sub	objptr, ##545
1fb30     06 24 CE F7 | 	test	local04, #6 wz
1fb34     97 12 06 56 |  if_ne	mov	arg01, #151
1fb38     10 15 02 56 |  if_ne	mov	arg02, local02
1fb3c     D0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1023
1fb40     11 15 02 F6 | 	mov	arg02, local03
1fb44     19 12 06 F6 | 	mov	arg01, #25
1fb48     C4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fb4c     FD 24 02 F6 | 	mov	local04, result1
1fb50     07 24 4E F7 | 	zerox	local04, #7 wz
1fb54     30 00 90 5D |  if_ne	jmp	#LR__3302
1fb58                 | ' 			do {
1fb58                 | LR__3301
1fb58     0F 13 02 F6 | 	mov	arg01, local01
1fb5c     FC 14 06 F6 | 	mov	arg02, #252
1fb60     E0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1019
1fb64     00 FA 0D F2 | 	cmp	result1, #0 wz
1fb68     01 00 00 5F 
1fb6c     00 1E 06 51 |  if_ne	add	local01, ##512
1fb70     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3301
1fb74     00 12 06 F6 | 	mov	arg01, #0
1fb78     FD 14 06 F6 | 	mov	arg02, #253
1fb7c     C4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1019
1fb80     00 FA 0D F2 | 	cmp	result1, #0 wz
1fb84     01 20 06 A6 |  if_e	mov	local02, #1
1fb88                 | LR__3302
1fb88                 | LR__3303
1fb88     C4 79 B0 FD | 	call	#_fatfs_cc_deselect_1009
1fb8c                 | ' 				count = 1;
1fb8c                 | ' 		}
1fb8c                 | ' 	}
1fb8c                 | ' 	deselect();
1fb8c                 | ' 
1fb8c                 | ' 	return count ? RES_ERROR : RES_OK;
1fb8c     00 20 0E F2 | 	cmp	local02, #0 wz
1fb90     01 24 06 56 |  if_ne	mov	local04, #1
1fb94     00 24 06 A6 |  if_e	mov	local04, #0
1fb98     12 FB 01 F6 | 	mov	result1, local04
1fb9c                 | LR__3304
1fb9c     A7 F0 03 F6 | 	mov	ptra, fp
1fba0     B2 00 A0 FD | 	call	#popregs_
1fba4                 | _fatfs_cc_disk_write_ret
1fba4     2D 00 64 FD | 	ret
1fba8                 | 
1fba8                 | _fatfs_cc_disk_ioctl
1fba8     01 4A 05 F6 | 	mov	COUNT_, #1
1fbac     A8 00 A0 FD | 	call	#pushregs_
1fbb0     30 F0 07 F1 | 	add	ptra, #48
1fbb4     04 4E 05 F1 | 	add	fp, #4
1fbb8     A7 12 42 FC | 	wrbyte	arg01, fp
1fbbc     04 4E 05 F1 | 	add	fp, #4
1fbc0     A7 14 42 FC | 	wrbyte	arg02, fp
1fbc4     04 4E 05 F1 | 	add	fp, #4
1fbc8     A7 16 62 FC | 	wrlong	arg03, fp
1fbcc     08 4E 85 F1 | 	sub	fp, #8
1fbd0     A7 12 CA FA | 	rdbyte	arg01, fp wz
1fbd4     04 4E 85 F1 | 	sub	fp, #4
1fbd8     01 FA 05 56 |  if_ne	mov	result1, #1
1fbdc                 | ' 
1fbdc                 | ' 	return Stat;
1fbdc     01 00 00 AF 
1fbe0     20 E4 05 A1 |  if_e	add	objptr, ##544
1fbe4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fbe8     01 00 00 AF 
1fbec     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fbf0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fbf4     01 FA CD F7 | 	test	result1, #1 wz
1fbf8     03 FA 05 56 |  if_ne	mov	result1, #3
1fbfc     E4 01 90 5D |  if_ne	jmp	#LR__3318
1fc00     10 4E 05 F1 | 	add	fp, #16
1fc04     A7 02 68 FC | 	wrlong	#1, fp
1fc08                 | ' 
1fc08                 | ' 	res = RES_ERROR;
1fc08                 | ' 	switch (ctrl) {
1fc08     08 4E 85 F1 | 	sub	fp, #8
1fc0c     A7 1E C2 FA | 	rdbyte	local01, fp
1fc10     08 4E 85 F1 | 	sub	fp, #8
1fc14     04 1E 26 F3 | 	fle	local01, #4
1fc18     30 1E 62 FD | 	jmprel	local01
1fc1c                 | LR__3310
1fc1c     10 00 90 FD | 	jmp	#LR__3311
1fc20     24 00 90 FD | 	jmp	#LR__3312
1fc24     A0 01 90 FD | 	jmp	#LR__3316
1fc28     80 01 90 FD | 	jmp	#LR__3315
1fc2c     98 01 90 FD | 	jmp	#LR__3316
1fc30                 | LR__3311
1fc30     A0 79 B0 FD | 	call	#_fatfs_cc_select_1013
1fc34     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc38     10 4E 05 51 |  if_ne	add	fp, #16
1fc3c     A7 00 68 5C |  if_ne	wrlong	#0, fp
1fc40     10 4E 85 51 |  if_ne	sub	fp, #16
1fc44                 | ' 			break;
1fc44     8C 01 90 FD | 	jmp	#LR__3317
1fc48                 | LR__3312
1fc48     09 12 06 F6 | 	mov	arg01, #9
1fc4c     00 14 06 F6 | 	mov	arg02, #0
1fc50     BC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1023
1fc54     FD 1E 02 F6 | 	mov	local01, result1
1fc58     07 1E 4E F7 | 	zerox	local01, #7 wz
1fc5c     74 01 90 5D |  if_ne	jmp	#LR__3317
1fc60     18 4E 05 F1 | 	add	fp, #24
1fc64     A7 12 02 F6 | 	mov	arg01, fp
1fc68     18 4E 85 F1 | 	sub	fp, #24
1fc6c     10 14 06 F6 | 	mov	arg02, #16
1fc70     F0 79 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1017
1fc74     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc78     58 01 90 AD |  if_e	jmp	#LR__3317
1fc7c     18 4E 05 F1 | 	add	fp, #24
1fc80     A7 1E C2 FA | 	rdbyte	local01, fp
1fc84     18 4E 85 F1 | 	sub	fp, #24
1fc88     06 1E 46 F0 | 	shr	local01, #6
1fc8c     01 1E 0E F2 | 	cmp	local01, #1 wz
1fc90     5C 00 90 5D |  if_ne	jmp	#LR__3313
1fc94     21 4E 05 F1 | 	add	fp, #33
1fc98     A7 1E C2 FA | 	rdbyte	local01, fp
1fc9c     01 4E 85 F1 | 	sub	fp, #1
1fca0     A7 FA C1 FA | 	rdbyte	result1, fp
1fca4     FD FA 31 F9 | 	getword	result1, result1, #0
1fca8     08 FA 65 F0 | 	shl	result1, #8
1fcac     FD 1E 02 F1 | 	add	local01, result1
1fcb0     01 4E 85 F1 | 	sub	fp, #1
1fcb4     A7 FA C1 FA | 	rdbyte	result1, fp
1fcb8     3F FA 05 F5 | 	and	result1, #63
1fcbc     10 FA 65 F0 | 	shl	result1, #16
1fcc0     FD 1E 02 F1 | 	add	local01, result1
1fcc4     01 1E 06 F1 | 	add	local01, #1
1fcc8     09 4E 05 F1 | 	add	fp, #9
1fccc     A7 1E 62 FC | 	wrlong	local01, fp
1fcd0     1C 4E 85 F1 | 	sub	fp, #28
1fcd4     A7 1E 02 FB | 	rdlong	local01, fp
1fcd8     1C 4E 05 F1 | 	add	fp, #28
1fcdc     A7 FA 01 FB | 	rdlong	result1, fp
1fce0     28 4E 85 F1 | 	sub	fp, #40
1fce4     0A FA 65 F0 | 	shl	result1, #10
1fce8     0F FB 61 FC | 	wrlong	result1, local01
1fcec     AC 00 90 FD | 	jmp	#LR__3314
1fcf0                 | LR__3313
1fcf0     1D 4E 05 F1 | 	add	fp, #29
1fcf4     A7 1E C2 FA | 	rdbyte	local01, fp
1fcf8     0F 1F 42 F8 | 	getnib	local01, local01, #0
1fcfc     05 4E 05 F1 | 	add	fp, #5
1fd00     A7 FA C1 FA | 	rdbyte	result1, fp
1fd04     80 FA 05 F5 | 	and	result1, #128
1fd08     07 FA C5 F0 | 	sar	result1, #7
1fd0c     FD 1E 02 F1 | 	add	local01, result1
1fd10     01 4E 85 F1 | 	sub	fp, #1
1fd14     A7 FA C1 FA | 	rdbyte	result1, fp
1fd18     03 FA 05 F5 | 	and	result1, #3
1fd1c     01 FA 65 F0 | 	shl	result1, #1
1fd20     FD 1E 02 F1 | 	add	local01, result1
1fd24     02 1E 06 F1 | 	add	local01, #2
1fd28     0D 4E 85 F1 | 	sub	fp, #13
1fd2c     A7 1E 42 FC | 	wrbyte	local01, fp
1fd30     0C 4E 05 F1 | 	add	fp, #12
1fd34     A7 1E C2 FA | 	rdbyte	local01, fp
1fd38     06 1E 46 F0 | 	shr	local01, #6
1fd3c     01 4E 85 F1 | 	sub	fp, #1
1fd40     A7 FA C1 FA | 	rdbyte	result1, fp
1fd44     FD FA 31 F9 | 	getword	result1, result1, #0
1fd48     02 FA 65 F0 | 	shl	result1, #2
1fd4c     FD 1E 02 F1 | 	add	local01, result1
1fd50     01 4E 85 F1 | 	sub	fp, #1
1fd54     A7 FA C1 FA | 	rdbyte	result1, fp
1fd58     03 FA 05 F5 | 	and	result1, #3
1fd5c     FD FA 31 F9 | 	getword	result1, result1, #0
1fd60     0A FA 65 F0 | 	shl	result1, #10
1fd64     FD 1E 02 F1 | 	add	local01, result1
1fd68     01 1E 06 F1 | 	add	local01, #1
1fd6c     0A 4E 05 F1 | 	add	fp, #10
1fd70     A7 1E 62 FC | 	wrlong	local01, fp
1fd74     1C 4E 85 F1 | 	sub	fp, #28
1fd78     A7 1E 02 FB | 	rdlong	local01, fp
1fd7c     1C 4E 05 F1 | 	add	fp, #28
1fd80     A7 FA 01 FB | 	rdlong	result1, fp
1fd84     14 4E 85 F1 | 	sub	fp, #20
1fd88     A7 16 C2 FA | 	rdbyte	arg03, fp
1fd8c     14 4E 85 F1 | 	sub	fp, #20
1fd90     09 16 86 F1 | 	sub	arg03, #9
1fd94     0B FB 61 F0 | 	shl	result1, arg03
1fd98     0F FB 61 FC | 	wrlong	result1, local01
1fd9c                 | LR__3314
1fd9c     10 4E 05 F1 | 	add	fp, #16
1fda0     A7 00 68 FC | 	wrlong	#0, fp
1fda4     10 4E 85 F1 | 	sub	fp, #16
1fda8                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1fda8                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1fda8                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1fda8                 | ' 				}
1fda8                 | ' 				res = RES_OK;
1fda8                 | ' 			}
1fda8                 | ' 			break;
1fda8     28 00 90 FD | 	jmp	#LR__3317
1fdac                 | LR__3315
1fdac     0C 4E 05 F1 | 	add	fp, #12
1fdb0     A7 1E 02 FB | 	rdlong	local01, fp
1fdb4     0F 01 69 FC | 	wrlong	#128, local01
1fdb8     04 4E 05 F1 | 	add	fp, #4
1fdbc     A7 00 68 FC | 	wrlong	#0, fp
1fdc0     10 4E 85 F1 | 	sub	fp, #16
1fdc4                 | ' 			*(DWORD*)buff = 128;
1fdc4                 | ' 			res = RES_OK;
1fdc4                 | ' 			break;
1fdc4     0C 00 90 FD | 	jmp	#LR__3317
1fdc8                 | LR__3316
1fdc8     10 4E 05 F1 | 	add	fp, #16
1fdcc     A7 08 68 FC | 	wrlong	#4, fp
1fdd0     10 4E 85 F1 | 	sub	fp, #16
1fdd4                 | LR__3317
1fdd4     78 77 B0 FD | 	call	#_fatfs_cc_deselect_1009
1fdd8                 | ' 			res = RES_PARERR;
1fdd8                 | ' 	}
1fdd8                 | ' 
1fdd8                 | ' 	deselect();
1fdd8                 | ' 
1fdd8                 | ' 	return res;
1fdd8     10 4E 05 F1 | 	add	fp, #16
1fddc     A7 FA 01 FB | 	rdlong	result1, fp
1fde0     10 4E 85 F1 | 	sub	fp, #16
1fde4                 | LR__3318
1fde4     A7 F0 03 F6 | 	mov	ptra, fp
1fde8     B2 00 A0 FD | 	call	#popregs_
1fdec                 | _fatfs_cc_disk_ioctl_ret
1fdec     2D 00 64 FD | 	ret
1fdf0                 | 
1fdf0                 | _fatfs_cc_disk_setpins
1fdf0     00 12 0E F2 | 	cmp	arg01, #0 wz
1fdf4     01 FA 65 56 |  if_ne	neg	result1, #1
1fdf8     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1fdfc     01 00 00 FF 
1fe00     10 E4 05 F1 | 	add	objptr, ##528
1fe04     F2 14 62 FC | 	wrlong	arg02, objptr
1fe08     04 E4 05 F1 | 	add	objptr, #4
1fe0c     F2 16 62 FC | 	wrlong	arg03, objptr
1fe10     04 E4 05 F1 | 	add	objptr, #4
1fe14     F2 18 62 FC | 	wrlong	arg04, objptr
1fe18     04 E4 05 F1 | 	add	objptr, #4
1fe1c     F2 1A 62 FC | 	wrlong	arg05, objptr
1fe20     01 00 00 FF 
1fe24     1C E4 85 F1 | 	sub	objptr, ##540
1fe28     00 FA 05 F6 | 	mov	result1, #0
1fe2c                 | _fatfs_cc_disk_setpins_ret
1fe2c     2D 00 64 FD | 	ret
1fe30                 | 
1fe30                 | _fatfs_cc_tchar2uni
1fe30     09 01 02 FB | 	rdlong	_var01, arg01
1fe34     00 03 02 F6 | 	mov	_var02, _var01
1fe38     01 00 06 F1 | 	add	_var01, #1
1fe3c     00 05 02 F6 | 	mov	_var03, _var01
1fe40     01 07 C2 FA | 	rdbyte	_var04, _var02
1fe44     80 06 CE F7 | 	test	_var04, #128 wz
1fe48     E8 00 90 AD |  if_e	jmp	#LR__3327
1fe4c     03 09 02 F6 | 	mov	_var05, _var04
1fe50     E0 08 06 F5 | 	and	_var05, #224
1fe54     C0 08 0E F2 | 	cmp	_var05, #192 wz
1fe58     1F 06 06 A5 |  if_e	and	_var04, #31
1fe5c     01 0A 06 A6 |  if_e	mov	_var06, #1
1fe60     34 00 90 AD |  if_e	jmp	#LR__3321
1fe64     03 09 02 F6 | 	mov	_var05, _var04
1fe68     F0 08 06 F5 | 	and	_var05, #240
1fe6c     E0 08 0E F2 | 	cmp	_var05, #224 wz
1fe70     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
1fe74     02 0A 06 A6 |  if_e	mov	_var06, #2
1fe78     1C 00 90 AD |  if_e	jmp	#LR__3320
1fe7c     03 09 02 F6 | 	mov	_var05, _var04
1fe80     F8 08 06 F5 | 	and	_var05, #248
1fe84     F0 08 0E F2 | 	cmp	_var05, #240 wz
1fe88     07 06 06 A5 |  if_e	and	_var04, #7
1fe8c     03 0A 06 A6 |  if_e	mov	_var06, #3
1fe90                 | ' 			return 0xFFFFFFFF;
1fe90     01 FA 65 56 |  if_ne	neg	result1, #1
1fe94     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1fe98                 | LR__3320
1fe98                 | LR__3321
1fe98                 | ' 		}
1fe98                 | ' 		do {
1fe98                 | LR__3322
1fe98     02 0D C2 FA | 	rdbyte	_var07, _var03
1fe9c     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
1fea0     C0 08 06 F5 | 	and	_var05, #192
1fea4     80 08 0E F2 | 	cmp	_var05, #128 wz
1fea8     01 04 06 F1 | 	add	_var03, #1
1feac     01 FA 65 56 |  if_ne	neg	result1, #1
1feb0     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1feb4     06 06 66 F0 | 	shl	_var04, #6
1feb8     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
1febc     3F 02 06 F5 | 	and	_var02, #63
1fec0     01 07 42 F5 | 	or	_var04, _var02
1fec4     F4 0B 6E FB | 	djnz	_var06, #LR__3322
1fec8     80 06 16 F2 | 	cmp	_var04, #128 wc
1fecc     24 00 90 CD |  if_b	jmp	#LR__3324
1fed0     6C 00 00 FF 
1fed4     00 06 16 F2 | 	cmp	_var04, ##55296 wc
1fed8     0C 00 90 CD |  if_b	jmp	#LR__3323
1fedc     70 00 00 FF 
1fee0     00 06 16 F2 | 	cmp	_var04, ##57344 wc
1fee4     0C 00 90 CD |  if_b	jmp	#LR__3324
1fee8                 | LR__3323
1fee8     80 08 00 FF 
1feec     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
1fef0     08 00 90 CD |  if_b	jmp	#LR__3325
1fef4                 | LR__3324
1fef4     01 FA 65 F6 | 	neg	result1, #1
1fef8     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
1fefc                 | LR__3325
1fefc     80 00 00 FF 
1ff00     00 06 16 F2 | 	cmp	_var04, ##65536 wc
1ff04     2C 00 90 CD |  if_b	jmp	#LR__3326
1ff08     03 03 02 F6 | 	mov	_var02, _var04
1ff0c     80 00 00 FF 
1ff10     00 02 86 F1 | 	sub	_var02, ##65536
1ff14     06 02 66 F0 | 	shl	_var02, #6
1ff18     80 FF 01 FF 
1ff1c     00 02 06 F5 | 	and	_var02, ##67043328
1ff20     6E 00 6C FF 
1ff24     00 08 06 F6 | 	mov	_var05, ##-671032320
1ff28     01 09 42 F5 | 	or	_var05, _var02
1ff2c     09 06 46 F7 | 	zerox	_var04, #9
1ff30     04 07 42 F5 | 	or	_var04, _var05
1ff34                 | LR__3326
1ff34                 | LR__3327
1ff34     09 05 62 FC | 	wrlong	_var03, arg01
1ff38                 | ' 	}
1ff38                 | ' #line 811 "ff.c"
1ff38                 | ' 	*str = p;
1ff38                 | ' 	return uc;
1ff38     03 FB 01 F6 | 	mov	result1, _var04
1ff3c                 | _fatfs_cc_tchar2uni_ret
1ff3c     2D 00 64 FD | 	ret
1ff40                 | 
1ff40                 | _fatfs_cc_put_utf
1ff40     80 12 16 F2 | 	cmp	arg01, #128 wc
1ff44     18 00 90 3D |  if_ae	jmp	#LR__3330
1ff48     01 16 16 F2 | 	cmp	arg03, #1 wc
1ff4c     00 FA 05 C6 |  if_b	mov	result1, #0
1ff50     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1ff54     0A 13 42 FC | 	wrbyte	arg01, arg02
1ff58                 | ' 		*buf = (TCHAR)chr;
1ff58                 | ' 		return 1;
1ff58     01 FA 05 F6 | 	mov	result1, #1
1ff5c     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1ff60                 | LR__3330
1ff60     04 00 00 FF 
1ff64     00 12 16 F2 | 	cmp	arg01, ##2048 wc
1ff68     40 00 90 3D |  if_ae	jmp	#LR__3331
1ff6c     02 16 16 F2 | 	cmp	arg03, #2 wc
1ff70     00 FA 05 C6 |  if_b	mov	result1, #0
1ff74     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1ff78     09 FB 01 F6 | 	mov	result1, arg01
1ff7c     06 FA 45 F0 | 	shr	result1, #6
1ff80     1F FA 05 F5 | 	and	result1, #31
1ff84     C0 16 06 F6 | 	mov	arg03, #192
1ff88     FD 16 42 F5 | 	or	arg03, result1
1ff8c     0A 17 42 FC | 	wrbyte	arg03, arg02
1ff90     01 14 06 F1 | 	add	arg02, #1
1ff94     3F 12 06 F5 | 	and	arg01, #63
1ff98     80 FA 05 F6 | 	mov	result1, #128
1ff9c     09 FB 41 F5 | 	or	result1, arg01
1ffa0     0A FB 41 FC | 	wrbyte	result1, arg02
1ffa4                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
1ffa4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1ffa4                 | ' 		return 2;
1ffa4     02 FA 05 F6 | 	mov	result1, #2
1ffa8     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1ffac                 | LR__3331
1ffac     80 00 00 FF 
1ffb0     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1ffb4     70 00 90 3D |  if_ae	jmp	#LR__3334
1ffb8     03 16 16 F2 | 	cmp	arg03, #3 wc
1ffbc     18 00 90 CD |  if_b	jmp	#LR__3332
1ffc0     6C 00 00 FF 
1ffc4     00 12 16 F2 | 	cmp	arg01, ##55296 wc
1ffc8     14 00 90 CD |  if_b	jmp	#LR__3333
1ffcc     70 00 00 FF 
1ffd0     00 12 16 F2 | 	cmp	arg01, ##57344 wc
1ffd4     08 00 90 3D |  if_ae	jmp	#LR__3333
1ffd8                 | LR__3332
1ffd8     00 FA 05 F6 | 	mov	result1, #0
1ffdc     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1ffe0                 | LR__3333
1ffe0     09 FB 59 F8 | 	getnib	result1, arg01, #3
1ffe4     E0 16 06 F6 | 	mov	arg03, #224
1ffe8     FD 16 42 F5 | 	or	arg03, result1
1ffec     0A 17 42 FC | 	wrbyte	arg03, arg02
1fff0     01 14 06 F1 | 	add	arg02, #1
1fff4     09 FB 01 F6 | 	mov	result1, arg01
1fff8     06 FA 45 F0 | 	shr	result1, #6
1fffc     3F FA 05 F5 | 	and	result1, #63
20000     80 16 06 F6 | 	mov	arg03, #128
20004     FD 16 42 F5 | 	or	arg03, result1
20008     0A 17 42 FC | 	wrbyte	arg03, arg02
2000c     01 14 06 F1 | 	add	arg02, #1
20010     3F 12 06 F5 | 	and	arg01, #63
20014     80 FA 05 F6 | 	mov	result1, #128
20018     09 FB 41 F5 | 	or	result1, arg01
2001c     0A FB 41 FC | 	wrbyte	result1, arg02
20020                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
20020                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
20020                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
20020                 | ' 		return 3;
20020     03 FA 05 F6 | 	mov	result1, #3
20024     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
20028                 | LR__3334
20028     04 16 16 F2 | 	cmp	arg03, #4 wc
2002c     00 FA 05 C6 |  if_b	mov	result1, #0
20030     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
20034     09 01 02 F6 | 	mov	_var01, arg01
20038     E0 01 06 F4 | 	bitl	_var01, #480
2003c     00 00 6C FF 
20040     00 00 86 F1 | 	sub	_var01, ##-671088640
20044     06 00 46 F0 | 	shr	_var01, #6
20048     09 13 32 F9 | 	getword	arg01, arg01, #0
2004c     6E 00 00 FF 
20050     00 12 86 F1 | 	sub	arg01, ##56320
20054     00 08 00 FF 
20058     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2005c     02 00 00 CF 
20060     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
20064     00 FA 05 36 |  if_ae	mov	result1, #0
20068     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2006c     09 01 42 F5 | 	or	_var01, arg01
20070     80 00 00 FF 
20074     00 00 06 F1 | 	add	_var01, ##65536
20078     00 FB 01 F6 | 	mov	result1, _var01
2007c     12 FA 45 F0 | 	shr	result1, #18
20080     07 FA 05 F5 | 	and	result1, #7
20084     F0 16 06 F6 | 	mov	arg03, #240
20088     FD 16 42 F5 | 	or	arg03, result1
2008c     0A 17 42 FC | 	wrbyte	arg03, arg02
20090     01 14 06 F1 | 	add	arg02, #1
20094     00 FB 01 F6 | 	mov	result1, _var01
20098     0C FA 45 F0 | 	shr	result1, #12
2009c     3F FA 05 F5 | 	and	result1, #63
200a0     80 16 06 F6 | 	mov	arg03, #128
200a4     FD 16 42 F5 | 	or	arg03, result1
200a8     0A 17 42 FC | 	wrbyte	arg03, arg02
200ac     01 14 06 F1 | 	add	arg02, #1
200b0     00 FB 01 F6 | 	mov	result1, _var01
200b4     06 FA 45 F0 | 	shr	result1, #6
200b8     3F FA 05 F5 | 	and	result1, #63
200bc     80 16 06 F6 | 	mov	arg03, #128
200c0     FD 16 42 F5 | 	or	arg03, result1
200c4     0A 17 42 FC | 	wrbyte	arg03, arg02
200c8     01 14 06 F1 | 	add	arg02, #1
200cc     3F 00 06 F5 | 	and	_var01, #63
200d0     80 FA 05 F6 | 	mov	result1, #128
200d4     00 FB 41 F5 | 	or	result1, _var01
200d8     0A FB 41 FC | 	wrbyte	result1, arg02
200dc                 | ' 	chr = (hc | chr) + 0x10000;
200dc                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
200dc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
200dc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
200dc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
200dc                 | ' 	return 4;
200dc     04 FA 05 F6 | 	mov	result1, #4
200e0                 | _fatfs_cc_put_utf_ret
200e0     2D 00 64 FD | 	ret
200e4                 | 
200e4                 | _fatfs_cc_sync_window
200e4     02 4A 05 F6 | 	mov	COUNT_, #2
200e8     A8 00 A0 FD | 	call	#pushregs_
200ec     09 1F 02 F6 | 	mov	local01, arg01
200f0     00 20 06 F6 | 	mov	local02, #0
200f4     03 1E 06 F1 | 	add	local01, #3
200f8     0F FB C9 FA | 	rdbyte	result1, local01 wz
200fc     03 1E 86 F1 | 	sub	local01, #3
20100     A4 00 90 AD |  if_e	jmp	#LR__3342
20104     01 1E 06 F1 | 	add	local01, #1
20108     0F 13 C2 FA | 	rdbyte	arg01, local01
2010c     33 1E 06 F1 | 	add	local01, #51
20110     0F 15 02 F6 | 	mov	arg02, local01
20114     04 1E 86 F1 | 	sub	local01, #4
20118     0F 17 02 FB | 	rdlong	arg03, local01
2011c     30 1E 86 F1 | 	sub	local01, #48
20120     01 18 06 F6 | 	mov	arg04, #1
20124     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
20128     00 FA 0D F2 | 	cmp	result1, #0 wz
2012c     74 00 90 5D |  if_ne	jmp	#LR__3340
20130     03 1E 06 F1 | 	add	local01, #3
20134     0F 01 48 FC | 	wrbyte	#0, local01
20138     2D 1E 06 F1 | 	add	local01, #45
2013c     0F FB 01 FB | 	rdlong	result1, local01
20140     0C 1E 86 F1 | 	sub	local01, #12
20144     0F 19 02 FB | 	rdlong	arg04, local01
20148     0C FB 81 F1 | 	sub	result1, arg04
2014c     08 1E 86 F1 | 	sub	local01, #8
20150     0F 19 02 FB | 	rdlong	arg04, local01
20154     1C 1E 86 F1 | 	sub	local01, #28
20158     0C FB 11 F2 | 	cmp	result1, arg04 wc
2015c     48 00 90 3D |  if_ae	jmp	#LR__3341
20160     02 1E 06 F1 | 	add	local01, #2
20164     0F 19 C2 FA | 	rdbyte	arg04, local01
20168     02 1E 86 F1 | 	sub	local01, #2
2016c     02 18 0E F2 | 	cmp	arg04, #2 wz
20170     34 00 90 5D |  if_ne	jmp	#LR__3341
20174     01 1E 06 F1 | 	add	local01, #1
20178     0F 13 C2 FA | 	rdbyte	arg01, local01
2017c     33 1E 06 F1 | 	add	local01, #51
20180     0F 15 02 F6 | 	mov	arg02, local01
20184     04 1E 86 F1 | 	sub	local01, #4
20188     0F 17 02 FB | 	rdlong	arg03, local01
2018c     14 1E 86 F1 | 	sub	local01, #20
20190     0F 1F 02 FB | 	rdlong	local01, local01
20194     0F 17 02 F1 | 	add	arg03, local01
20198     01 18 06 F6 | 	mov	arg04, #1
2019c     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
201a0     04 00 90 FD | 	jmp	#LR__3341
201a4                 | LR__3340
201a4     01 20 06 F6 | 	mov	local02, #1
201a8                 | LR__3341
201a8                 | LR__3342
201a8                 | ' 			res = FR_DISK_ERR;
201a8                 | ' 		}
201a8                 | ' 	}
201a8                 | ' 	return res;
201a8     10 FB 01 F6 | 	mov	result1, local02
201ac     A7 F0 03 F6 | 	mov	ptra, fp
201b0     B2 00 A0 FD | 	call	#popregs_
201b4                 | _fatfs_cc_sync_window_ret
201b4     2D 00 64 FD | 	ret
201b8                 | 
201b8                 | _fatfs_cc_move_window
201b8     03 4A 05 F6 | 	mov	COUNT_, #3
201bc     A8 00 A0 FD | 	call	#pushregs_
201c0     09 1F 02 F6 | 	mov	local01, arg01
201c4     0A 21 02 F6 | 	mov	local02, arg02
201c8     00 22 06 F6 | 	mov	local03, #0
201cc     30 1E 06 F1 | 	add	local01, #48
201d0     0F 19 02 FB | 	rdlong	arg04, local01
201d4     30 1E 86 F1 | 	sub	local01, #48
201d8     0C 21 0A F2 | 	cmp	local02, arg04 wz
201dc     40 00 90 AD |  if_e	jmp	#LR__3351
201e0     0F 13 02 F6 | 	mov	arg01, local01
201e4     FC FE BF FD | 	call	#_fatfs_cc_sync_window
201e8     FD 22 0A F6 | 	mov	local03, result1 wz
201ec     30 00 90 5D |  if_ne	jmp	#LR__3350
201f0     01 1E 06 F1 | 	add	local01, #1
201f4     0F 13 C2 FA | 	rdbyte	arg01, local01
201f8     33 1E 06 F1 | 	add	local01, #51
201fc     0F 15 02 F6 | 	mov	arg02, local01
20200     10 17 02 F6 | 	mov	arg03, local02
20204     01 18 06 F6 | 	mov	arg04, #1
20208     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2020c     00 FA 0D F2 | 	cmp	result1, #0 wz
20210     01 20 66 56 |  if_ne	neg	local02, #1
20214     01 22 06 56 |  if_ne	mov	local03, #1
20218     04 1E 86 F1 | 	sub	local01, #4
2021c     0F 21 62 FC | 	wrlong	local02, local01
20220                 | LR__3350
20220                 | LR__3351
20220                 | ' 				sect = (LBA_t)0 - 1;
20220                 | ' 				res = FR_DISK_ERR;
20220                 | ' 			}
20220                 | ' 			fs->winsect = sect;
20220                 | ' 		}
20220                 | ' 	}
20220                 | ' 	return res;
20220     11 FB 01 F6 | 	mov	result1, local03
20224     A7 F0 03 F6 | 	mov	ptra, fp
20228     B2 00 A0 FD | 	call	#popregs_
2022c                 | _fatfs_cc_move_window_ret
2022c     2D 00 64 FD | 	ret
20230                 | 
20230                 | _fatfs_cc_sync_fs
20230     02 4A 05 F6 | 	mov	COUNT_, #2
20234     A8 00 A0 FD | 	call	#pushregs_
20238     09 1F 02 F6 | 	mov	local01, arg01
2023c     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
20240     FD 20 0A F6 | 	mov	local02, result1 wz
20244     D8 00 90 5D |  if_ne	jmp	#LR__3361
20248     0F 19 C2 FA | 	rdbyte	arg04, local01
2024c     03 18 0E F2 | 	cmp	arg04, #3 wz
20250     04 1E 06 A1 |  if_e	add	local01, #4
20254     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
20258     04 1E 86 A1 |  if_e	sub	local01, #4
2025c     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
20260     A0 00 90 5D |  if_ne	jmp	#LR__3360
20264     34 1E 06 F1 | 	add	local01, #52
20268     0F 13 02 F6 | 	mov	arg01, local01
2026c     00 14 06 F6 | 	mov	arg02, #0
20270     09 16 C6 F9 | 	decod	arg03, #9
20274     98 00 A0 FD | 	call	#\builtin_bytefill_
20278     0F 13 02 F6 | 	mov	arg01, local01
2027c     FE 13 06 F1 | 	add	arg01, #510
20280     55 00 80 FF 
20284     09 AB 58 FC | 	wrword	##43605, arg01
20288     A9 B0 A0 FF 
2028c     0F A5 68 FC | 	wrlong	##1096897106, local01
20290     0F 13 02 F6 | 	mov	arg01, local01
20294     E4 13 06 F1 | 	add	arg01, #484
20298     B9 A0 B0 FF 
2029c     09 E5 68 FC | 	wrlong	##1631679090, arg01
202a0     0F 13 02 F6 | 	mov	arg01, local01
202a4     E8 13 06 F1 | 	add	arg01, #488
202a8     20 1E 86 F1 | 	sub	local01, #32
202ac     0F 15 02 FB | 	rdlong	arg02, local01
202b0     09 15 62 FC | 	wrlong	arg02, arg01
202b4     20 1E 06 F1 | 	add	local01, #32
202b8     0F 13 02 F6 | 	mov	arg01, local01
202bc     EC 13 06 F1 | 	add	arg01, #492
202c0     24 1E 86 F1 | 	sub	local01, #36
202c4     0F 15 02 FB | 	rdlong	arg02, local01
202c8     09 15 62 FC | 	wrlong	arg02, arg01
202cc     10 1E 06 F1 | 	add	local01, #16
202d0     0F 17 02 FB | 	rdlong	arg03, local01
202d4     01 16 06 F1 | 	add	arg03, #1
202d8     10 1E 06 F1 | 	add	local01, #16
202dc     0F 17 62 FC | 	wrlong	arg03, local01
202e0     2F 1E 86 F1 | 	sub	local01, #47
202e4     0F 13 C2 FA | 	rdbyte	arg01, local01
202e8     33 1E 06 F1 | 	add	local01, #51
202ec     0F 15 02 F6 | 	mov	arg02, local01
202f0     01 18 06 F6 | 	mov	arg04, #1
202f4     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
202f8     30 1E 86 F1 | 	sub	local01, #48
202fc     0F 01 48 FC | 	wrbyte	#0, local01
20300     04 1E 86 F1 | 	sub	local01, #4
20304                 | LR__3360
20304     01 1E 06 F1 | 	add	local01, #1
20308     0F 13 C2 FA | 	rdbyte	arg01, local01
2030c     00 14 06 F6 | 	mov	arg02, #0
20310     00 16 06 F6 | 	mov	arg03, #0
20314     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
20318     00 FA 0D F2 | 	cmp	result1, #0 wz
2031c     01 20 06 56 |  if_ne	mov	local02, #1
20320                 | LR__3361
20320                 | ' 	}
20320                 | ' 
20320                 | ' 	return res;
20320     10 FB 01 F6 | 	mov	result1, local02
20324     A7 F0 03 F6 | 	mov	ptra, fp
20328     B2 00 A0 FD | 	call	#popregs_
2032c                 | _fatfs_cc_sync_fs_ret
2032c     2D 00 64 FD | 	ret
20330                 | 
20330                 | _fatfs_cc_clst2sect
20330     02 14 86 F1 | 	sub	arg02, #2
20334     18 12 06 F1 | 	add	arg01, #24
20338     09 01 02 FB | 	rdlong	_var01, arg01
2033c     18 12 86 F1 | 	sub	arg01, #24
20340     02 00 86 F1 | 	sub	_var01, #2
20344     00 15 12 F2 | 	cmp	arg02, _var01 wc
20348     00 FA 05 36 |  if_ae	mov	result1, #0
2034c     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
20350     0A 12 06 F1 | 	add	arg01, #10
20354     09 01 E2 FA | 	rdword	_var01, arg01
20358     0A 01 02 FD | 	qmul	_var01, arg02
2035c                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2035c     22 12 06 F1 | 	add	arg01, #34
20360     09 FB 01 FB | 	rdlong	result1, arg01
20364     18 00 62 FD | 	getqx	_var01
20368     00 FB 01 F1 | 	add	result1, _var01
2036c                 | _fatfs_cc_clst2sect_ret
2036c     2D 00 64 FD | 	ret
20370                 | 
20370                 | _fatfs_cc_get_fat
20370     07 4A 05 F6 | 	mov	COUNT_, #7
20374     A8 00 A0 FD | 	call	#pushregs_
20378     0A 1F 02 F6 | 	mov	local01, arg02
2037c     09 21 02 FB | 	rdlong	local02, arg01
20380     02 1E 16 F2 | 	cmp	local01, #2 wc
20384     14 00 90 CD |  if_b	jmp	#LR__3370
20388     18 20 06 F1 | 	add	local02, #24
2038c     10 23 02 FB | 	rdlong	local03, local02
20390     18 20 86 F1 | 	sub	local02, #24
20394     11 1F 12 F2 | 	cmp	local01, local03 wc
20398     08 00 90 CD |  if_b	jmp	#LR__3371
2039c                 | LR__3370
2039c     01 24 06 F6 | 	mov	local04, #1
203a0     60 01 90 FD | 	jmp	#LR__3378
203a4                 | LR__3371
203a4     01 24 66 F6 | 	neg	local04, #1
203a8                 | ' 		val = 0xFFFFFFFF;
203a8                 | ' 
203a8                 | ' 		switch (fs->fs_type) {
203a8     10 27 C2 FA | 	rdbyte	local05, local02
203ac     01 26 86 F1 | 	sub	local05, #1
203b0     03 26 26 F3 | 	fle	local05, #3
203b4     30 26 62 FD | 	jmprel	local05
203b8                 | LR__3372
203b8     0C 00 90 FD | 	jmp	#LR__3373
203bc     B8 00 90 FD | 	jmp	#LR__3374
203c0     F8 00 90 FD | 	jmp	#LR__3375
203c4     38 01 90 FD | 	jmp	#LR__3376
203c8                 | LR__3373
203c8     0F 27 02 F6 | 	mov	local05, local01
203cc     0F 13 02 F6 | 	mov	arg01, local01
203d0     01 12 46 F0 | 	shr	arg01, #1
203d4     09 27 02 F1 | 	add	local05, arg01
203d8     10 13 02 F6 | 	mov	arg01, local02
203dc     13 29 02 F6 | 	mov	local06, local05
203e0     09 28 46 F0 | 	shr	local06, #9
203e4     24 20 06 F1 | 	add	local02, #36
203e8     10 15 02 FB | 	rdlong	arg02, local02
203ec     24 20 86 F1 | 	sub	local02, #36
203f0     14 15 02 F1 | 	add	arg02, local06
203f4     C0 FD BF FD | 	call	#_fatfs_cc_move_window
203f8     00 FA 0D F2 | 	cmp	result1, #0 wz
203fc     04 01 90 5D |  if_ne	jmp	#LR__3377
20400     13 29 02 F6 | 	mov	local06, local05
20404     FF 29 06 F5 | 	and	local06, #511
20408     34 20 06 F1 | 	add	local02, #52
2040c     10 29 02 F1 | 	add	local06, local02
20410     14 2B C2 FA | 	rdbyte	local07, local06
20414     34 20 86 F1 | 	sub	local02, #52
20418     10 13 02 F6 | 	mov	arg01, local02
2041c     01 26 06 F1 | 	add	local05, #1
20420     13 29 02 F6 | 	mov	local06, local05
20424     09 28 46 F0 | 	shr	local06, #9
20428     24 20 06 F1 | 	add	local02, #36
2042c     10 15 02 FB | 	rdlong	arg02, local02
20430     24 20 86 F1 | 	sub	local02, #36
20434     14 15 02 F1 | 	add	arg02, local06
20438     7C FD BF FD | 	call	#_fatfs_cc_move_window
2043c     00 FA 0D F2 | 	cmp	result1, #0 wz
20440     C0 00 90 5D |  if_ne	jmp	#LR__3377
20444     FF 27 06 F5 | 	and	local05, #511
20448     34 20 06 F1 | 	add	local02, #52
2044c     10 27 02 F1 | 	add	local05, local02
20450     13 29 C2 FA | 	rdbyte	local06, local05
20454     08 28 66 F0 | 	shl	local06, #8
20458     14 2B 42 F5 | 	or	local07, local06
2045c     01 1E CE F7 | 	test	local01, #1 wz
20460     04 2A 46 50 |  if_ne	shr	local07, #4
20464     15 23 02 56 |  if_ne	mov	local03, local07
20468     0B 2A 46 A7 |  if_e	zerox	local07, #11
2046c     15 23 02 A6 |  if_e	mov	local03, local07
20470     11 25 02 F6 | 	mov	local04, local03
20474                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
20474                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
20474                 | ' 			break;
20474     8C 00 90 FD | 	jmp	#LR__3377
20478                 | LR__3374
20478     10 13 02 F6 | 	mov	arg01, local02
2047c     0F 29 02 F6 | 	mov	local06, local01
20480     08 28 46 F0 | 	shr	local06, #8
20484     24 20 06 F1 | 	add	local02, #36
20488     10 15 02 FB | 	rdlong	arg02, local02
2048c     24 20 86 F1 | 	sub	local02, #36
20490     14 15 02 F1 | 	add	arg02, local06
20494     20 FD BF FD | 	call	#_fatfs_cc_move_window
20498     00 FA 0D F2 | 	cmp	result1, #0 wz
2049c     64 00 90 5D |  if_ne	jmp	#LR__3377
204a0     34 20 06 F1 | 	add	local02, #52
204a4     01 1E 66 F0 | 	shl	local01, #1
204a8     FF 1F 06 F5 | 	and	local01, #511
204ac     0F 21 02 F1 | 	add	local02, local01
204b0                 | ' {
204b0                 | ' 
204b0                 | ' 	return *((WORD*)ptr);
204b0     10 FB E1 FA | 	rdword	result1, local02
204b4     FD 24 32 F9 | 	getword	local04, result1, #0
204b8                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
204b8                 | ' 			break;
204b8     48 00 90 FD | 	jmp	#LR__3377
204bc                 | LR__3375
204bc     10 13 02 F6 | 	mov	arg01, local02
204c0     0F 29 02 F6 | 	mov	local06, local01
204c4     07 28 46 F0 | 	shr	local06, #7
204c8     24 20 06 F1 | 	add	local02, #36
204cc     10 15 02 FB | 	rdlong	arg02, local02
204d0     24 20 86 F1 | 	sub	local02, #36
204d4     14 15 02 F1 | 	add	arg02, local06
204d8     DC FC BF FD | 	call	#_fatfs_cc_move_window
204dc     00 FA 0D F2 | 	cmp	result1, #0 wz
204e0     20 00 90 5D |  if_ne	jmp	#LR__3377
204e4     34 20 06 F1 | 	add	local02, #52
204e8     02 1E 66 F0 | 	shl	local01, #2
204ec     FF 1F 06 F5 | 	and	local01, #511
204f0     0F 21 02 F1 | 	add	local02, local01
204f4                 | ' {
204f4                 | ' 
204f4                 | ' 	return *((DWORD*)ptr);
204f4     10 25 02 FB | 	rdlong	local04, local02
204f8     7C 24 06 F4 | 	bitl	local04, #124
204fc                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
204fc                 | ' 			break;
204fc     04 00 90 FD | 	jmp	#LR__3377
20500                 | LR__3376
20500     01 24 06 F6 | 	mov	local04, #1
20504                 | LR__3377
20504                 | LR__3378
20504                 | ' 			val = 1;
20504                 | ' 		}
20504                 | ' 	}
20504                 | ' 
20504                 | ' 	return val;
20504     12 FB 01 F6 | 	mov	result1, local04
20508     A7 F0 03 F6 | 	mov	ptra, fp
2050c     B2 00 A0 FD | 	call	#popregs_
20510                 | _fatfs_cc_get_fat_ret
20510     2D 00 64 FD | 	ret
20514                 | 
20514                 | _fatfs_cc_put_fat
20514     08 4A 05 F6 | 	mov	COUNT_, #8
20518     A8 00 A0 FD | 	call	#pushregs_
2051c     09 1F 02 F6 | 	mov	local01, arg01
20520     0A 21 02 F6 | 	mov	local02, arg02
20524     0B 23 02 F6 | 	mov	local03, arg03
20528     02 24 06 F6 | 	mov	local04, #2
2052c     02 20 16 F2 | 	cmp	local02, #2 wc
20530     E0 01 90 CD |  if_b	jmp	#LR__3387
20534     18 1E 06 F1 | 	add	local01, #24
20538     0F 27 02 FB | 	rdlong	local05, local01
2053c     18 1E 86 F1 | 	sub	local01, #24
20540     13 21 12 F2 | 	cmp	local02, local05 wc
20544     CC 01 90 3D |  if_ae	jmp	#LR__3387
20548                 | ' 		switch (fs->fs_type) {
20548     0F 29 C2 FA | 	rdbyte	local06, local01
2054c     01 28 86 F1 | 	sub	local06, #1
20550     03 28 26 F3 | 	fle	local06, #3
20554     30 28 62 FD | 	jmprel	local06
20558                 | LR__3380
20558     0C 00 90 FD | 	jmp	#LR__3381
2055c     F8 00 90 FD | 	jmp	#LR__3384
20560     40 01 90 FD | 	jmp	#LR__3385
20564     AC 01 90 FD | 	jmp	#LR__3386
20568                 | LR__3381
20568     10 2B 02 F6 | 	mov	local07, local02
2056c     10 27 02 F6 | 	mov	local05, local02
20570     01 26 46 F0 | 	shr	local05, #1
20574     13 2B 02 F1 | 	add	local07, local05
20578     0F 13 02 F6 | 	mov	arg01, local01
2057c     15 29 02 F6 | 	mov	local06, local07
20580     09 28 46 F0 | 	shr	local06, #9
20584     24 1E 06 F1 | 	add	local01, #36
20588     0F 15 02 FB | 	rdlong	arg02, local01
2058c     24 1E 86 F1 | 	sub	local01, #36
20590     14 15 02 F1 | 	add	arg02, local06
20594     20 FC BF FD | 	call	#_fatfs_cc_move_window
20598     FD 24 0A F6 | 	mov	local04, result1 wz
2059c     74 01 90 5D |  if_ne	jmp	#LR__3386
205a0     34 1E 06 F1 | 	add	local01, #52
205a4     0F 2D 02 F6 | 	mov	local08, local01
205a8     15 27 02 F6 | 	mov	local05, local07
205ac     FF 27 06 F5 | 	and	local05, #511
205b0     13 2D 02 F1 | 	add	local08, local05
205b4     01 20 CE F7 | 	test	local02, #1 wz
205b8     34 1E 86 F1 | 	sub	local01, #52
205bc     01 2A 06 F1 | 	add	local07, #1
205c0     18 00 90 AD |  if_e	jmp	#LR__3382
205c4     16 27 C2 FA | 	rdbyte	local05, local08
205c8     13 27 42 F8 | 	getnib	local05, local05, #0
205cc     11 29 E2 F8 | 	getbyte	local06, local03, #0
205d0     04 28 66 F0 | 	shl	local06, #4
205d4     14 27 42 F5 | 	or	local05, local06
205d8     04 00 90 FD | 	jmp	#LR__3383
205dc                 | LR__3382
205dc     11 27 02 F6 | 	mov	local05, local03
205e0                 | LR__3383
205e0     16 27 42 FC | 	wrbyte	local05, local08
205e4     03 1E 06 F1 | 	add	local01, #3
205e8     0F 03 48 FC | 	wrbyte	#1, local01
205ec     03 1E 86 F1 | 	sub	local01, #3
205f0     0F 13 02 F6 | 	mov	arg01, local01
205f4     15 2D 02 F6 | 	mov	local08, local07
205f8     09 2C 46 F0 | 	shr	local08, #9
205fc     24 1E 06 F1 | 	add	local01, #36
20600     0F 15 02 FB | 	rdlong	arg02, local01
20604     24 1E 86 F1 | 	sub	local01, #36
20608     16 15 02 F1 | 	add	arg02, local08
2060c     A8 FB BF FD | 	call	#_fatfs_cc_move_window
20610     FD 24 0A F6 | 	mov	local04, result1 wz
20614     FC 00 90 5D |  if_ne	jmp	#LR__3386
20618     34 1E 06 F1 | 	add	local01, #52
2061c     0F 2D 02 F6 | 	mov	local08, local01
20620     FF 2B 06 F5 | 	and	local07, #511
20624     15 2D 02 F1 | 	add	local08, local07
20628     01 20 CE F7 | 	test	local02, #1 wz
2062c     04 22 46 50 |  if_ne	shr	local03, #4
20630     11 27 02 56 |  if_ne	mov	local05, local03
20634     16 27 C2 AA |  if_e	rdbyte	local05, local08
20638     F0 26 06 A5 |  if_e	and	local05, #240
2063c     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
20640     11 23 42 A8 |  if_e	getnib	local03, local03, #0
20644     11 27 42 A5 |  if_e	or	local05, local03
20648     16 27 42 FC | 	wrbyte	local05, local08
2064c     31 1E 86 F1 | 	sub	local01, #49
20650     0F 03 48 FC | 	wrbyte	#1, local01
20654                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
20654                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
20654                 | ' 			fs->wflag = 1;
20654                 | ' 			break;
20654     BC 00 90 FD | 	jmp	#LR__3386
20658                 | LR__3384
20658     0F 13 02 F6 | 	mov	arg01, local01
2065c     10 2D 02 F6 | 	mov	local08, local02
20660     08 2C 46 F0 | 	shr	local08, #8
20664     24 1E 06 F1 | 	add	local01, #36
20668     0F 15 02 FB | 	rdlong	arg02, local01
2066c     24 1E 86 F1 | 	sub	local01, #36
20670     16 15 02 F1 | 	add	arg02, local08
20674     40 FB BF FD | 	call	#_fatfs_cc_move_window
20678     FD 24 0A F6 | 	mov	local04, result1 wz
2067c     94 00 90 5D |  if_ne	jmp	#LR__3386
20680     34 1E 06 F1 | 	add	local01, #52
20684     0F 13 02 F6 | 	mov	arg01, local01
20688     01 20 66 F0 | 	shl	local02, #1
2068c     FF 21 06 F5 | 	and	local02, #511
20690     10 13 02 F1 | 	add	arg01, local02
20694     09 23 52 FC | 	wrword	local03, arg01
20698     31 1E 86 F1 | 	sub	local01, #49
2069c     0F 03 48 FC | 	wrbyte	#1, local01
206a0                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
206a0                 | ' 			fs->wflag = 1;
206a0                 | ' 			break;
206a0     70 00 90 FD | 	jmp	#LR__3386
206a4                 | LR__3385
206a4     0F 13 02 F6 | 	mov	arg01, local01
206a8     10 2D 02 F6 | 	mov	local08, local02
206ac     07 2C 46 F0 | 	shr	local08, #7
206b0     24 1E 06 F1 | 	add	local01, #36
206b4     0F 15 02 FB | 	rdlong	arg02, local01
206b8     24 1E 86 F1 | 	sub	local01, #36
206bc     16 15 02 F1 | 	add	arg02, local08
206c0     F4 FA BF FD | 	call	#_fatfs_cc_move_window
206c4     FD 24 0A F6 | 	mov	local04, result1 wz
206c8     48 00 90 5D |  if_ne	jmp	#LR__3386
206cc     7C 22 06 F4 | 	bitl	local03, #124
206d0     34 1E 06 F1 | 	add	local01, #52
206d4     10 2D 02 F6 | 	mov	local08, local02
206d8     02 2C 66 F0 | 	shl	local08, #2
206dc     FF 2D 06 F5 | 	and	local08, #511
206e0     0F 13 02 F6 | 	mov	arg01, local01
206e4     16 13 02 F1 | 	add	arg01, local08
206e8                 | ' {
206e8                 | ' 
206e8                 | ' 	return *((DWORD*)ptr);
206e8     09 2D 02 FB | 	rdlong	local08, arg01
206ec     00 00 78 FF 
206f0     00 2C 06 F5 | 	and	local08, ##-268435456
206f4     16 23 42 F5 | 	or	local03, local08
206f8     0F 13 02 F6 | 	mov	arg01, local01
206fc     02 20 66 F0 | 	shl	local02, #2
20700     FF 21 06 F5 | 	and	local02, #511
20704     10 13 02 F1 | 	add	arg01, local02
20708     09 23 62 FC | 	wrlong	local03, arg01
2070c     31 1E 86 F1 | 	sub	local01, #49
20710     0F 03 48 FC | 	wrbyte	#1, local01
20714                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
20714                 | ' 			}
20714                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
20714                 | ' 			fs->wflag = 1;
20714                 | ' 			break;
20714                 | LR__3386
20714                 | LR__3387
20714                 | ' 		}
20714                 | ' 	}
20714                 | ' 	return res;
20714     12 FB 01 F6 | 	mov	result1, local04
20718     A7 F0 03 F6 | 	mov	ptra, fp
2071c     B2 00 A0 FD | 	call	#popregs_
20720                 | _fatfs_cc_put_fat_ret
20720     2D 00 64 FD | 	ret
20724                 | 
20724                 | _fatfs_cc_remove_chain
20724     05 4A 05 F6 | 	mov	COUNT_, #5
20728     A8 00 A0 FD | 	call	#pushregs_
2072c     09 1F 02 F6 | 	mov	local01, arg01
20730     0A 21 02 F6 | 	mov	local02, arg02
20734     0B 23 02 F6 | 	mov	local03, arg03
20738     0F 25 02 FB | 	rdlong	local04, local01
2073c     02 20 16 F2 | 	cmp	local02, #2 wc
20740     14 00 90 CD |  if_b	jmp	#LR__3390
20744     18 24 06 F1 | 	add	local04, #24
20748     12 FB 01 FB | 	rdlong	result1, local04
2074c     18 24 86 F1 | 	sub	local04, #24
20750     FD 20 12 F2 | 	cmp	local02, result1 wc
20754     08 00 90 CD |  if_b	jmp	#LR__3391
20758                 | LR__3390
20758     02 FA 05 F6 | 	mov	result1, #2
2075c     CC 00 90 FD | 	jmp	#LR__3396
20760                 | LR__3391
20760     00 22 0E F2 | 	cmp	local03, #0 wz
20764     18 00 90 AD |  if_e	jmp	#LR__3392
20768     11 15 02 F6 | 	mov	arg02, local03
2076c     12 13 02 F6 | 	mov	arg01, local04
20770     01 16 66 F6 | 	neg	arg03, #1
20774     9C FD BF FD | 	call	#_fatfs_cc_put_fat
20778     00 FA 0D F2 | 	cmp	result1, #0 wz
2077c     AC 00 90 5D |  if_ne	jmp	#LR__3396
20780                 | LR__3392
20780                 | ' 	}
20780                 | ' 
20780                 | ' 
20780                 | ' 	do {
20780                 | LR__3393
20780     10 15 02 F6 | 	mov	arg02, local02
20784     0F 13 02 F6 | 	mov	arg01, local01
20788     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2078c     FD 26 0A F6 | 	mov	local05, result1 wz
20790     94 00 90 AD |  if_e	jmp	#LR__3395
20794     01 26 0E F2 | 	cmp	local05, #1 wz
20798     02 FA 05 A6 |  if_e	mov	result1, #2
2079c     8C 00 90 AD |  if_e	jmp	#LR__3396
207a0     FF FF 7F FF 
207a4     FF 27 0E F2 | 	cmp	local05, ##-1 wz
207a8     01 FA 05 A6 |  if_e	mov	result1, #1
207ac     7C 00 90 AD |  if_e	jmp	#LR__3396
207b0     10 15 02 F6 | 	mov	arg02, local02
207b4     12 13 02 F6 | 	mov	arg01, local04
207b8     00 16 06 F6 | 	mov	arg03, #0
207bc     54 FD BF FD | 	call	#_fatfs_cc_put_fat
207c0     FD 22 0A F6 | 	mov	local03, result1 wz
207c4     11 FB 01 56 |  if_ne	mov	result1, local03
207c8     60 00 90 5D |  if_ne	jmp	#LR__3396
207cc     18 24 06 F1 | 	add	local04, #24
207d0     12 23 02 FB | 	rdlong	local03, local04
207d4     02 22 86 F1 | 	sub	local03, #2
207d8     04 24 86 F1 | 	sub	local04, #4
207dc     12 21 02 FB | 	rdlong	local02, local04
207e0     14 24 86 F1 | 	sub	local04, #20
207e4     11 21 12 F2 | 	cmp	local02, local03 wc
207e8     24 00 90 3D |  if_ae	jmp	#LR__3394
207ec     14 24 06 F1 | 	add	local04, #20
207f0     12 23 02 FB | 	rdlong	local03, local04
207f4     01 22 06 F1 | 	add	local03, #1
207f8     12 23 62 FC | 	wrlong	local03, local04
207fc     10 24 86 F1 | 	sub	local04, #16
20800     12 23 C2 FA | 	rdbyte	local03, local04
20804     01 22 46 F5 | 	or	local03, #1
20808     12 23 42 FC | 	wrbyte	local03, local04
2080c     04 24 86 F1 | 	sub	local04, #4
20810                 | LR__3394
20810     13 21 02 F6 | 	mov	local02, local05
20814     18 24 06 F1 | 	add	local04, #24
20818     12 27 02 FB | 	rdlong	local05, local04
2081c     18 24 86 F1 | 	sub	local04, #24
20820     13 21 12 F2 | 	cmp	local02, local05 wc
20824     58 FF 9F CD |  if_b	jmp	#LR__3393
20828                 | LR__3395
20828                 | ' #line 1500 "ff.c"
20828                 | ' 	return FR_OK;
20828     00 FA 05 F6 | 	mov	result1, #0
2082c                 | LR__3396
2082c     A7 F0 03 F6 | 	mov	ptra, fp
20830     B2 00 A0 FD | 	call	#popregs_
20834                 | _fatfs_cc_remove_chain_ret
20834     2D 00 64 FD | 	ret
20838                 | 
20838                 | _fatfs_cc_create_chain
20838     09 4A 05 F6 | 	mov	COUNT_, #9
2083c     A8 00 A0 FD | 	call	#pushregs_
20840     09 1F 02 F6 | 	mov	local01, arg01
20844     0A 21 0A F6 | 	mov	local02, arg02 wz
20848     0F 23 02 FB | 	rdlong	local03, local01
2084c     28 00 90 5D |  if_ne	jmp	#LR__3400
20850     10 22 06 F1 | 	add	local03, #16
20854     11 25 0A FB | 	rdlong	local04, local03 wz
20858     10 22 86 F1 | 	sub	local03, #16
2085c     18 22 06 51 |  if_ne	add	local03, #24
20860     11 27 02 5B |  if_ne	rdlong	local05, local03
20864     18 22 86 51 |  if_ne	sub	local03, #24
20868     13 25 12 52 |  if_ne	cmp	local04, local05 wc
2086c     50 00 90 4D |  if_c_and_nz	jmp	#LR__3401
20870     01 24 06 F6 | 	mov	local04, #1
20874     48 00 90 FD | 	jmp	#LR__3401
20878                 | LR__3400
20878     10 15 02 F6 | 	mov	arg02, local02
2087c     0F 13 02 F6 | 	mov	arg01, local01
20880     EC FA BF FD | 	call	#_fatfs_cc_get_fat
20884     FD 24 02 F6 | 	mov	local04, result1
20888     02 24 16 F2 | 	cmp	local04, #2 wc
2088c     01 FA 05 C6 |  if_b	mov	result1, #1
20890     BC 01 90 CD |  if_b	jmp	#LR__3411
20894     FF FF 7F FF 
20898     FF 25 0E F2 | 	cmp	local04, ##-1 wz
2089c     12 FB 01 A6 |  if_e	mov	result1, local04
208a0     AC 01 90 AD |  if_e	jmp	#LR__3411
208a4     18 22 06 F1 | 	add	local03, #24
208a8     11 27 02 FB | 	rdlong	local05, local03
208ac     18 22 86 F1 | 	sub	local03, #24
208b0     13 25 12 F2 | 	cmp	local04, local05 wc
208b4     12 FB 01 C6 |  if_b	mov	result1, local04
208b8     94 01 90 CD |  if_b	jmp	#LR__3411
208bc     10 25 02 F6 | 	mov	local04, local02
208c0                 | LR__3401
208c0     14 22 06 F1 | 	add	local03, #20
208c4     11 27 0A FB | 	rdlong	local05, local03 wz
208c8     14 22 86 F1 | 	sub	local03, #20
208cc     00 FA 05 A6 |  if_e	mov	result1, #0
208d0     7C 01 90 AD |  if_e	jmp	#LR__3411
208d4     00 28 06 F6 | 	mov	local06, #0
208d8     10 25 0A F2 | 	cmp	local04, local02 wz
208dc     74 00 90 5D |  if_ne	jmp	#LR__3404
208e0     12 29 02 F6 | 	mov	local06, local04
208e4     01 28 06 F1 | 	add	local06, #1
208e8     18 22 06 F1 | 	add	local03, #24
208ec     11 27 02 FB | 	rdlong	local05, local03
208f0     18 22 86 F1 | 	sub	local03, #24
208f4     13 29 12 F2 | 	cmp	local06, local05 wc
208f8     02 28 06 36 |  if_ae	mov	local06, #2
208fc     14 15 02 F6 | 	mov	arg02, local06
20900     0F 13 02 F6 | 	mov	arg01, local01
20904     68 FA BF FD | 	call	#_fatfs_cc_get_fat
20908     FD 26 02 F6 | 	mov	local05, result1
2090c     01 26 0E F2 | 	cmp	local05, #1 wz
20910     FF FF 7F 5F 
20914     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
20918     13 FB 01 A6 |  if_e	mov	result1, local05
2091c     30 01 90 AD |  if_e	jmp	#LR__3411
20920     00 26 0E F2 | 	cmp	local05, #0 wz
20924     2C 00 90 AD |  if_e	jmp	#LR__3403
20928     10 22 06 F1 | 	add	local03, #16
2092c     11 2B 02 FB | 	rdlong	local07, local03
20930     10 22 86 F1 | 	sub	local03, #16
20934     02 2A 16 F2 | 	cmp	local07, #2 wc
20938     14 00 90 CD |  if_b	jmp	#LR__3402
2093c     18 22 06 F1 | 	add	local03, #24
20940     11 27 02 FB | 	rdlong	local05, local03
20944     18 22 86 F1 | 	sub	local03, #24
20948     13 2B 12 F2 | 	cmp	local07, local05 wc
2094c     15 25 02 C6 |  if_b	mov	local04, local07
20950                 | LR__3402
20950     00 28 06 F6 | 	mov	local06, #0
20954                 | LR__3403
20954                 | LR__3404
20954     00 28 0E F2 | 	cmp	local06, #0 wz
20958     60 00 90 5D |  if_ne	jmp	#LR__3407
2095c     12 29 02 F6 | 	mov	local06, local04
20960                 | ' 			ncl = scl;
20960                 | ' 			for (;;) {
20960                 | LR__3405
20960     01 28 06 F1 | 	add	local06, #1
20964     18 22 06 F1 | 	add	local03, #24
20968     11 27 02 FB | 	rdlong	local05, local03
2096c     18 22 86 F1 | 	sub	local03, #24
20970     13 29 12 F2 | 	cmp	local06, local05 wc
20974     02 28 06 36 |  if_ae	mov	local06, #2
20978     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
2097c     00 FA 05 16 |  if_a	mov	result1, #0
20980     CC 00 90 1D |  if_a	jmp	#LR__3411
20984     14 15 02 F6 | 	mov	arg02, local06
20988     0F 13 02 F6 | 	mov	arg01, local01
2098c     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
20990     FD 2A 0A F6 | 	mov	local07, result1 wz
20994     24 00 90 AD |  if_e	jmp	#LR__3406
20998     01 2A 0E F2 | 	cmp	local07, #1 wz
2099c     FF FF 7F 5F 
209a0     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
209a4     15 FB 01 A6 |  if_e	mov	result1, local07
209a8     A4 00 90 AD |  if_e	jmp	#LR__3411
209ac     12 29 0A F2 | 	cmp	local06, local04 wz
209b0     00 FA 05 A6 |  if_e	mov	result1, #0
209b4     98 00 90 AD |  if_e	jmp	#LR__3411
209b8     A4 FF 9F FD | 	jmp	#LR__3405
209bc                 | LR__3406
209bc                 | LR__3407
209bc     11 13 02 F6 | 	mov	arg01, local03
209c0     14 15 02 F6 | 	mov	arg02, local06
209c4     01 16 66 F6 | 	neg	arg03, #1
209c8     48 FB BF FD | 	call	#_fatfs_cc_put_fat
209cc     FD 2C 0A F6 | 	mov	local08, result1 wz
209d0     1C 00 90 5D |  if_ne	jmp	#LR__3408
209d4     00 20 0E F2 | 	cmp	local02, #0 wz
209d8     14 00 90 AD |  if_e	jmp	#LR__3408
209dc     11 13 02 F6 | 	mov	arg01, local03
209e0     10 15 02 F6 | 	mov	arg02, local02
209e4     14 17 02 F6 | 	mov	arg03, local06
209e8     28 FB BF FD | 	call	#_fatfs_cc_put_fat
209ec     FD 2C 02 F6 | 	mov	local08, result1
209f0                 | LR__3408
209f0     00 2C 0E F2 | 	cmp	local08, #0 wz
209f4     4C 00 90 5D |  if_ne	jmp	#LR__3409
209f8     10 22 06 F1 | 	add	local03, #16
209fc     11 29 62 FC | 	wrlong	local06, local03
20a00     08 22 06 F1 | 	add	local03, #8
20a04     11 27 02 FB | 	rdlong	local05, local03
20a08     02 26 86 F1 | 	sub	local05, #2
20a0c     04 22 86 F1 | 	sub	local03, #4
20a10     11 2F 02 FB | 	rdlong	local09, local03
20a14     14 22 86 F1 | 	sub	local03, #20
20a18     13 2F 1A F2 | 	cmp	local09, local05 wcz
20a1c     14 22 06 E1 |  if_be	add	local03, #20
20a20     11 2F 02 EB |  if_be	rdlong	local09, local03
20a24     01 2E 86 E1 |  if_be	sub	local09, #1
20a28     11 2F 62 EC |  if_be	wrlong	local09, local03
20a2c     14 22 86 E1 |  if_be	sub	local03, #20
20a30     04 22 06 F1 | 	add	local03, #4
20a34     11 27 C2 FA | 	rdbyte	local05, local03
20a38     01 26 46 F5 | 	or	local05, #1
20a3c     11 27 42 FC | 	wrbyte	local05, local03
20a40     08 00 90 FD | 	jmp	#LR__3410
20a44                 | LR__3409
20a44     01 2C 0E F2 | 	cmp	local08, #1 wz
20a48     01 28 C6 F6 | 	negz	local06, #1
20a4c                 | LR__3410
20a4c                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
20a4c                 | ' 	}
20a4c                 | ' 
20a4c                 | ' 	return ncl;
20a4c     14 FB 01 F6 | 	mov	result1, local06
20a50                 | LR__3411
20a50     A7 F0 03 F6 | 	mov	ptra, fp
20a54     B2 00 A0 FD | 	call	#popregs_
20a58                 | _fatfs_cc_create_chain_ret
20a58     2D 00 64 FD | 	ret
20a5c                 | 
20a5c                 | _fatfs_cc_dir_clear
20a5c     06 4A 05 F6 | 	mov	COUNT_, #6
20a60     A8 00 A0 FD | 	call	#pushregs_
20a64     09 1F 02 F6 | 	mov	local01, arg01
20a68     0A 21 02 F6 | 	mov	local02, arg02
20a6c     0F 13 02 F6 | 	mov	arg01, local01
20a70     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
20a74     00 FA 0D F2 | 	cmp	result1, #0 wz
20a78     01 FA 05 56 |  if_ne	mov	result1, #1
20a7c     90 00 90 5D |  if_ne	jmp	#LR__3422
20a80     0F 13 02 F6 | 	mov	arg01, local01
20a84     10 15 02 F6 | 	mov	arg02, local02
20a88     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
20a8c     FD 22 02 F6 | 	mov	local03, result1
20a90     30 1E 06 F1 | 	add	local01, #48
20a94     0F 23 62 FC | 	wrlong	local03, local01
20a98     04 1E 06 F1 | 	add	local01, #4
20a9c     0F 13 02 F6 | 	mov	arg01, local01
20aa0     00 14 06 F6 | 	mov	arg02, #0
20aa4     09 16 C6 F9 | 	decod	arg03, #9
20aa8     98 00 A0 FD | 	call	#\builtin_bytefill_
20aac     0F 25 02 F6 | 	mov	local04, local01
20ab0                 | ' #line 1667 "ff.c"
20ab0                 | ' 	{
20ab0                 | ' 		ibuf = fs->win; szb = 1;
20ab0                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
20ab0     00 26 06 F6 | 	mov	local05, #0
20ab4     34 1E 86 F1 | 	sub	local01, #52
20ab8                 | LR__3420
20ab8     0A 1E 06 F1 | 	add	local01, #10
20abc     0F 29 E2 FA | 	rdword	local06, local01
20ac0     0A 1E 86 F1 | 	sub	local01, #10
20ac4     14 27 12 F2 | 	cmp	local05, local06 wc
20ac8     2C 00 90 3D |  if_ae	jmp	#LR__3421
20acc     01 1E 06 F1 | 	add	local01, #1
20ad0     0F 13 C2 FA | 	rdbyte	arg01, local01
20ad4     01 1E 86 F1 | 	sub	local01, #1
20ad8     12 15 02 F6 | 	mov	arg02, local04
20adc     11 17 02 F6 | 	mov	arg03, local03
20ae0     13 17 02 F1 | 	add	arg03, local05
20ae4     01 18 06 F6 | 	mov	arg04, #1
20ae8     9C EF BF FD | 	call	#_fatfs_cc_disk_write
20aec     00 FA 0D F2 | 	cmp	result1, #0 wz
20af0     01 26 06 A1 |  if_e	add	local05, #1
20af4     C0 FF 9F AD |  if_e	jmp	#LR__3420
20af8                 | LR__3421
20af8                 | ' 	}
20af8                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
20af8     0A 1E 06 F1 | 	add	local01, #10
20afc     0F 25 E2 FA | 	rdword	local04, local01
20b00     12 27 0A F2 | 	cmp	local05, local04 wz
20b04     00 28 06 A6 |  if_e	mov	local06, #0
20b08     01 28 06 56 |  if_ne	mov	local06, #1
20b0c     14 FB 01 F6 | 	mov	result1, local06
20b10                 | LR__3422
20b10     A7 F0 03 F6 | 	mov	ptra, fp
20b14     B2 00 A0 FD | 	call	#popregs_
20b18                 | _fatfs_cc_dir_clear_ret
20b18     2D 00 64 FD | 	ret
20b1c                 | 
20b1c                 | _fatfs_cc_dir_sdi
20b1c     06 4A 05 F6 | 	mov	COUNT_, #6
20b20     A8 00 A0 FD | 	call	#pushregs_
20b24     09 1F 02 F6 | 	mov	local01, arg01
20b28     0A 21 02 F6 | 	mov	local02, arg02
20b2c     0F 23 02 FB | 	rdlong	local03, local01
20b30     00 10 00 FF 
20b34     00 20 16 F2 | 	cmp	local02, ##2097152 wc
20b38     1F 20 CE C7 |  if_b	test	local02, #31 wz
20b3c                 | ' 		return FR_INT_ERR;
20b3c     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
20b40     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3436
20b44     10 1E 06 F1 | 	add	local01, #16
20b48     0F 21 62 FC | 	wrlong	local02, local01
20b4c     08 1E 86 F1 | 	sub	local01, #8
20b50     0F 25 0A FB | 	rdlong	local04, local01 wz
20b54     08 1E 86 F1 | 	sub	local01, #8
20b58     11 27 C2 AA |  if_e	rdbyte	local05, local03
20b5c     03 26 16 A2 |  if_e	cmp	local05, #3 wc
20b60     28 22 06 21 |  if_nc_and_z	add	local03, #40
20b64     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
20b68     28 22 86 21 |  if_nc_and_z	sub	local03, #40
20b6c     00 24 0E F2 | 	cmp	local04, #0 wz
20b70     3C 00 90 5D |  if_ne	jmp	#LR__3430
20b74     10 27 02 F6 | 	mov	local05, local02
20b78     05 26 46 F0 | 	shr	local05, #5
20b7c     08 22 06 F1 | 	add	local03, #8
20b80     11 15 E2 FA | 	rdword	arg02, local03
20b84     08 22 86 F1 | 	sub	local03, #8
20b88     0A 27 12 F2 | 	cmp	local05, arg02 wc
20b8c     02 FA 05 36 |  if_ae	mov	result1, #2
20b90     E4 00 90 3D |  if_ae	jmp	#LR__3436
20b94     28 22 06 F1 | 	add	local03, #40
20b98     11 27 02 FB | 	rdlong	local05, local03
20b9c     28 22 86 F1 | 	sub	local03, #40
20ba0     18 1E 06 F1 | 	add	local01, #24
20ba4     0F 27 62 FC | 	wrlong	local05, local01
20ba8     18 1E 86 F1 | 	sub	local01, #24
20bac     7C 00 90 FD | 	jmp	#LR__3435
20bb0                 | LR__3430
20bb0     0A 22 06 F1 | 	add	local03, #10
20bb4     11 29 E2 FA | 	rdword	local06, local03
20bb8     0A 22 86 F1 | 	sub	local03, #10
20bbc     09 28 66 F0 | 	shl	local06, #9
20bc0                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
20bc0                 | ' 		while (ofs >= csz) {
20bc0                 | LR__3431
20bc0     14 21 12 F2 | 	cmp	local02, local06 wc
20bc4     4C 00 90 CD |  if_b	jmp	#LR__3434
20bc8     0F 13 02 F6 | 	mov	arg01, local01
20bcc     12 15 02 F6 | 	mov	arg02, local04
20bd0     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
20bd4     FD 24 02 F6 | 	mov	local04, result1
20bd8     FF FF 7F FF 
20bdc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
20be0     01 FA 05 A6 |  if_e	mov	result1, #1
20be4     90 00 90 AD |  if_e	jmp	#LR__3436
20be8     02 24 16 F2 | 	cmp	local04, #2 wc
20bec     14 00 90 CD |  if_b	jmp	#LR__3432
20bf0     18 22 06 F1 | 	add	local03, #24
20bf4     11 27 02 FB | 	rdlong	local05, local03
20bf8     18 22 86 F1 | 	sub	local03, #24
20bfc     13 25 12 F2 | 	cmp	local04, local05 wc
20c00     08 00 90 CD |  if_b	jmp	#LR__3433
20c04                 | LR__3432
20c04     02 FA 05 F6 | 	mov	result1, #2
20c08     6C 00 90 FD | 	jmp	#LR__3436
20c0c                 | LR__3433
20c0c     14 21 82 F1 | 	sub	local02, local06
20c10     AC FF 9F FD | 	jmp	#LR__3431
20c14                 | LR__3434
20c14     11 13 02 F6 | 	mov	arg01, local03
20c18     12 15 02 F6 | 	mov	arg02, local04
20c1c     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
20c20     18 1E 06 F1 | 	add	local01, #24
20c24     0F FB 61 FC | 	wrlong	result1, local01
20c28     18 1E 86 F1 | 	sub	local01, #24
20c2c                 | LR__3435
20c2c     14 1E 06 F1 | 	add	local01, #20
20c30     0F 25 62 FC | 	wrlong	local04, local01
20c34     04 1E 06 F1 | 	add	local01, #4
20c38     0F 27 0A FB | 	rdlong	local05, local01 wz
20c3c     18 1E 86 F1 | 	sub	local01, #24
20c40     02 FA 05 A6 |  if_e	mov	result1, #2
20c44     30 00 90 AD |  if_e	jmp	#LR__3436
20c48     10 29 02 F6 | 	mov	local06, local02
20c4c     09 28 46 F0 | 	shr	local06, #9
20c50     18 1E 06 F1 | 	add	local01, #24
20c54     0F 27 02 FB | 	rdlong	local05, local01
20c58     14 27 02 F1 | 	add	local05, local06
20c5c     0F 27 62 FC | 	wrlong	local05, local01
20c60     34 22 06 F1 | 	add	local03, #52
20c64     FF 21 06 F5 | 	and	local02, #511
20c68     10 23 02 F1 | 	add	local03, local02
20c6c     04 1E 06 F1 | 	add	local01, #4
20c70     0F 23 62 FC | 	wrlong	local03, local01
20c74                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
20c74                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
20c74                 | ' 
20c74                 | ' 	return FR_OK;
20c74     00 FA 05 F6 | 	mov	result1, #0
20c78                 | LR__3436
20c78     A7 F0 03 F6 | 	mov	ptra, fp
20c7c     B2 00 A0 FD | 	call	#popregs_
20c80                 | _fatfs_cc_dir_sdi_ret
20c80     2D 00 64 FD | 	ret
20c84                 | 
20c84                 | _fatfs_cc_dir_next
20c84     05 4A 05 F6 | 	mov	COUNT_, #5
20c88     A8 00 A0 FD | 	call	#pushregs_
20c8c     09 1F 02 F6 | 	mov	local01, arg01
20c90     0A 21 02 F6 | 	mov	local02, arg02
20c94     0F 23 02 FB | 	rdlong	local03, local01
20c98     10 1E 06 F1 | 	add	local01, #16
20c9c     0F 25 02 FB | 	rdlong	local04, local01
20ca0     10 1E 86 F1 | 	sub	local01, #16
20ca4     20 24 06 F1 | 	add	local04, #32
20ca8     00 10 00 FF 
20cac     00 24 16 F2 | 	cmp	local04, ##2097152 wc
20cb0     18 1E 06 31 |  if_ae	add	local01, #24
20cb4     0F 01 68 3C |  if_ae	wrlong	#0, local01
20cb8     18 1E 86 31 |  if_ae	sub	local01, #24
20cbc     18 1E 06 F1 | 	add	local01, #24
20cc0     0F 15 0A FB | 	rdlong	arg02, local01 wz
20cc4     18 1E 86 F1 | 	sub	local01, #24
20cc8     04 FA 05 A6 |  if_e	mov	result1, #4
20ccc     64 01 90 AD |  if_e	jmp	#LR__3445
20cd0     FF 25 CE F7 | 	test	local04, #511 wz
20cd4     3C 01 90 5D |  if_ne	jmp	#LR__3444
20cd8     18 1E 06 F1 | 	add	local01, #24
20cdc     0F 15 02 FB | 	rdlong	arg02, local01
20ce0     01 14 06 F1 | 	add	arg02, #1
20ce4     0F 15 62 FC | 	wrlong	arg02, local01
20ce8     04 1E 86 F1 | 	sub	local01, #4
20cec     0F 15 0A FB | 	rdlong	arg02, local01 wz
20cf0     14 1E 86 F1 | 	sub	local01, #20
20cf4     2C 00 90 5D |  if_ne	jmp	#LR__3440
20cf8     12 15 02 F6 | 	mov	arg02, local04
20cfc     05 14 46 F0 | 	shr	arg02, #5
20d00     08 22 06 F1 | 	add	local03, #8
20d04     11 21 E2 FA | 	rdword	local02, local03
20d08     08 22 86 F1 | 	sub	local03, #8
20d0c     10 15 12 F2 | 	cmp	arg02, local02 wc
20d10     18 1E 06 31 |  if_ae	add	local01, #24
20d14     0F 01 68 3C |  if_ae	wrlong	#0, local01
20d18                 | ' 				dp->sect = 0; return FR_NO_FILE;
20d18     04 FA 05 36 |  if_ae	mov	result1, #4
20d1c     14 01 90 3D |  if_ae	jmp	#LR__3445
20d20     F0 00 90 FD | 	jmp	#LR__3443
20d24                 | LR__3440
20d24     12 13 02 F6 | 	mov	arg01, local04
20d28     09 12 46 F0 | 	shr	arg01, #9
20d2c     0A 22 06 F1 | 	add	local03, #10
20d30     11 15 E2 FA | 	rdword	arg02, local03
20d34     0A 22 86 F1 | 	sub	local03, #10
20d38     01 14 86 F1 | 	sub	arg02, #1
20d3c     0A 13 CA F7 | 	test	arg01, arg02 wz
20d40     D0 00 90 5D |  if_ne	jmp	#LR__3442
20d44     0F 13 02 F6 | 	mov	arg01, local01
20d48     14 1E 06 F1 | 	add	local01, #20
20d4c     0F 15 02 FB | 	rdlong	arg02, local01
20d50     14 1E 86 F1 | 	sub	local01, #20
20d54     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
20d58     FD 26 02 F6 | 	mov	local05, result1
20d5c     02 26 16 F2 | 	cmp	local05, #2 wc
20d60     02 FA 05 C6 |  if_b	mov	result1, #2
20d64     CC 00 90 CD |  if_b	jmp	#LR__3445
20d68     FF FF 7F FF 
20d6c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
20d70     01 FA 05 A6 |  if_e	mov	result1, #1
20d74     BC 00 90 AD |  if_e	jmp	#LR__3445
20d78     18 22 06 F1 | 	add	local03, #24
20d7c     11 15 02 FB | 	rdlong	arg02, local03
20d80     18 22 86 F1 | 	sub	local03, #24
20d84     0A 27 12 F2 | 	cmp	local05, arg02 wc
20d88     68 00 90 CD |  if_b	jmp	#LR__3441
20d8c     00 20 0E F2 | 	cmp	local02, #0 wz
20d90     18 1E 06 A1 |  if_e	add	local01, #24
20d94     0F 01 68 AC |  if_e	wrlong	#0, local01
20d98                 | ' 						dp->sect = 0; return FR_NO_FILE;
20d98     04 FA 05 A6 |  if_e	mov	result1, #4
20d9c     94 00 90 AD |  if_e	jmp	#LR__3445
20da0     0F 13 02 F6 | 	mov	arg01, local01
20da4     14 1E 06 F1 | 	add	local01, #20
20da8     0F 15 02 FB | 	rdlong	arg02, local01
20dac     14 1E 86 F1 | 	sub	local01, #20
20db0     84 FA BF FD | 	call	#_fatfs_cc_create_chain
20db4     FD 26 0A F6 | 	mov	local05, result1 wz
20db8     07 FA 05 A6 |  if_e	mov	result1, #7
20dbc     74 00 90 AD |  if_e	jmp	#LR__3445
20dc0     01 26 0E F2 | 	cmp	local05, #1 wz
20dc4     02 FA 05 A6 |  if_e	mov	result1, #2
20dc8     68 00 90 AD |  if_e	jmp	#LR__3445
20dcc     FF FF 7F FF 
20dd0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
20dd4     01 FA 05 A6 |  if_e	mov	result1, #1
20dd8     58 00 90 AD |  if_e	jmp	#LR__3445
20ddc     13 15 02 F6 | 	mov	arg02, local05
20de0     11 13 02 F6 | 	mov	arg01, local03
20de4     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
20de8     00 FA 0D F2 | 	cmp	result1, #0 wz
20dec     01 FA 05 56 |  if_ne	mov	result1, #1
20df0     40 00 90 5D |  if_ne	jmp	#LR__3445
20df4                 | LR__3441
20df4     14 1E 06 F1 | 	add	local01, #20
20df8     0F 27 62 FC | 	wrlong	local05, local01
20dfc     11 13 02 F6 | 	mov	arg01, local03
20e00     13 15 02 F6 | 	mov	arg02, local05
20e04     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
20e08     04 1E 06 F1 | 	add	local01, #4
20e0c     0F FB 61 FC | 	wrlong	result1, local01
20e10     18 1E 86 F1 | 	sub	local01, #24
20e14                 | LR__3442
20e14                 | LR__3443
20e14                 | LR__3444
20e14     10 1E 06 F1 | 	add	local01, #16
20e18     0F 25 62 FC | 	wrlong	local04, local01
20e1c     34 22 06 F1 | 	add	local03, #52
20e20     FF 25 06 F5 | 	and	local04, #511
20e24     12 23 02 F1 | 	add	local03, local04
20e28     0C 1E 06 F1 | 	add	local01, #12
20e2c     0F 23 62 FC | 	wrlong	local03, local01
20e30                 | ' #line 1771 "ff.c"
20e30                 | ' 				}
20e30                 | ' 				dp->clust = clst;
20e30                 | ' 				dp->sect = clst2sect(fs, clst);
20e30                 | ' 			}
20e30                 | ' 		}
20e30                 | ' 	}
20e30                 | ' 	dp->dptr = ofs;
20e30                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
20e30                 | ' 
20e30                 | ' 	return FR_OK;
20e30     00 FA 05 F6 | 	mov	result1, #0
20e34                 | LR__3445
20e34     A7 F0 03 F6 | 	mov	ptra, fp
20e38     B2 00 A0 FD | 	call	#popregs_
20e3c                 | _fatfs_cc_dir_next_ret
20e3c     2D 00 64 FD | 	ret
20e40                 | 
20e40                 | _fatfs_cc_dir_alloc
20e40     08 4A 05 F6 | 	mov	COUNT_, #8
20e44     A8 00 A0 FD | 	call	#pushregs_
20e48     09 1F 02 F6 | 	mov	local01, arg01
20e4c     0A 21 02 F6 | 	mov	local02, arg02
20e50     0F 23 02 FB | 	rdlong	local03, local01
20e54     0F 13 02 F6 | 	mov	arg01, local01
20e58     00 14 06 F6 | 	mov	arg02, #0
20e5c     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
20e60     FD 24 0A F6 | 	mov	local04, result1 wz
20e64     70 00 90 5D |  if_ne	jmp	#LR__3454
20e68     00 26 06 F6 | 	mov	local05, #0
20e6c                 | ' 		n = 0;
20e6c                 | ' 		do {
20e6c                 | LR__3450
20e6c     18 1E 06 F1 | 	add	local01, #24
20e70     0F 15 02 FB | 	rdlong	arg02, local01
20e74     18 1E 86 F1 | 	sub	local01, #24
20e78     11 13 02 F6 | 	mov	arg01, local03
20e7c     38 F3 BF FD | 	call	#_fatfs_cc_move_window
20e80     FD 24 0A F6 | 	mov	local04, result1 wz
20e84     50 00 90 5D |  if_ne	jmp	#LR__3453
20e88     1C 1E 06 F1 | 	add	local01, #28
20e8c     0F 29 02 FB | 	rdlong	local06, local01
20e90     1C 1E 86 F1 | 	sub	local01, #28
20e94     14 29 C2 FA | 	rdbyte	local06, local06
20e98     E5 28 0E F2 | 	cmp	local06, #229 wz
20e9c     1C 1E 06 51 |  if_ne	add	local01, #28
20ea0     0F 2B 02 5B |  if_ne	rdlong	local07, local01
20ea4     1C 1E 86 51 |  if_ne	sub	local01, #28
20ea8     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
20eac     10 00 90 5D |  if_ne	jmp	#LR__3451
20eb0     01 26 06 F1 | 	add	local05, #1
20eb4     10 27 0A F2 | 	cmp	local05, local02 wz
20eb8     1C 00 90 AD |  if_e	jmp	#LR__3453
20ebc     04 00 90 FD | 	jmp	#LR__3452
20ec0                 | LR__3451
20ec0     00 26 06 F6 | 	mov	local05, #0
20ec4                 | LR__3452
20ec4     0F 13 02 F6 | 	mov	arg01, local01
20ec8     01 14 06 F6 | 	mov	arg02, #1
20ecc     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
20ed0     FD 24 0A F6 | 	mov	local04, result1 wz
20ed4     94 FF 9F AD |  if_e	jmp	#LR__3450
20ed8                 | LR__3453
20ed8                 | LR__3454
20ed8     04 24 0E F2 | 	cmp	local04, #4 wz
20edc     07 24 06 A6 |  if_e	mov	local04, #7
20ee0                 | ' 	return res;
20ee0     12 FB 01 F6 | 	mov	result1, local04
20ee4     A7 F0 03 F6 | 	mov	ptra, fp
20ee8     B2 00 A0 FD | 	call	#popregs_
20eec                 | _fatfs_cc_dir_alloc_ret
20eec     2D 00 64 FD | 	ret
20ef0                 | 
20ef0                 | _fatfs_cc_ld_clust
20ef0     09 01 02 F6 | 	mov	_var01, arg01
20ef4     0A 13 02 F6 | 	mov	arg01, arg02
20ef8     1A 12 06 F1 | 	add	arg01, #26
20efc                 | ' {
20efc                 | ' 
20efc                 | ' 	return *((WORD*)ptr);
20efc     09 FB E1 FA | 	rdword	result1, arg01
20f00     FD 12 32 F9 | 	getword	arg01, result1, #0
20f04     00 01 C2 FA | 	rdbyte	_var01, _var01
20f08     03 00 0E F2 | 	cmp	_var01, #3 wz
20f0c     14 14 06 A1 |  if_e	add	arg02, #20
20f10                 | ' {
20f10                 | ' 
20f10                 | ' 	return *((WORD*)ptr);
20f10     0A FB E1 AA |  if_e	rdword	result1, arg02
20f14     10 FA 65 A0 |  if_e	shl	result1, #16
20f18     FD 12 42 A5 |  if_e	or	arg01, result1
20f1c                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
20f1c                 | ' 	}
20f1c                 | ' 
20f1c                 | ' 	return cl;
20f1c     09 FB 01 F6 | 	mov	result1, arg01
20f20                 | _fatfs_cc_ld_clust_ret
20f20     2D 00 64 FD | 	ret
20f24                 | 
20f24                 | _fatfs_cc_st_clust
20f24     09 01 02 F6 | 	mov	_var01, arg01
20f28     0A 13 02 F6 | 	mov	arg01, arg02
20f2c     1A 12 06 F1 | 	add	arg01, #26
20f30     09 17 52 FC | 	wrword	arg03, arg01
20f34     00 01 C2 FA | 	rdbyte	_var01, _var01
20f38     03 00 0E F2 | 	cmp	_var01, #3 wz
20f3c     14 14 06 A1 |  if_e	add	arg02, #20
20f40     10 16 46 A0 |  if_e	shr	arg03, #16
20f44     0A 17 52 AC |  if_e	wrword	arg03, arg02
20f48                 | _fatfs_cc_st_clust_ret
20f48     2D 00 64 FD | 	ret
20f4c                 | 
20f4c                 | _fatfs_cc_cmp_lfn
20f4c     07 4A 05 F6 | 	mov	COUNT_, #7
20f50     A8 00 A0 FD | 	call	#pushregs_
20f54     09 1F 02 F6 | 	mov	local01, arg01
20f58     0A 13 02 F6 | 	mov	arg01, arg02
20f5c     1A 12 06 F1 | 	add	arg01, #26
20f60                 | ' {
20f60                 | ' 
20f60                 | ' 	return *((WORD*)ptr);
20f60     09 FB E9 FA | 	rdword	result1, arg01 wz
20f64     00 FA 05 56 |  if_ne	mov	result1, #0
20f68     E0 00 90 5D |  if_ne	jmp	#LR__3466
20f6c     0A 21 C2 FA | 	rdbyte	local02, arg02
20f70     3F 20 06 F5 | 	and	local02, #63
20f74     01 20 86 F1 | 	sub	local02, #1
20f78     0D 20 06 FD | 	qmul	local02, #13
20f7c                 | ' 
20f7c                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
20f7c                 | ' 
20f7c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
20f7c     01 22 06 F6 | 	mov	local03, #1
20f80     00 24 06 F6 | 	mov	local04, #0
20f84     18 26 62 FD | 	getqx	local05
20f88                 | LR__3460
20f88     0D 24 16 F2 | 	cmp	local04, #13 wc
20f8c     9C 00 90 3D |  if_ae	jmp	#LR__3465
20f90     0A 13 02 F6 | 	mov	arg01, arg02
20f94     12 21 02 F6 | 	mov	local02, local04
20f98     01 00 00 FF 
20f9c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
20fa0     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
20fa4     10 21 C2 FA | 	rdbyte	local02, local02
20fa8     01 20 06 FA | 	mul	local02, #1
20fac     10 13 02 F1 | 	add	arg01, local02
20fb0     01 00 00 FF 
20fb4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
20fb8                 | ' {
20fb8                 | ' 
20fb8                 | ' 	return *((WORD*)ptr);
20fb8     09 FB E1 FA | 	rdword	result1, arg01
20fbc     FD 28 02 F6 | 	mov	local06, result1
20fc0     11 21 02 F6 | 	mov	local02, local03
20fc4     0F 20 4E F7 | 	zerox	local02, #15 wz
20fc8     44 00 90 AD |  if_e	jmp	#LR__3463
20fcc     00 27 16 F2 | 	cmp	local05, #256 wc
20fd0     2C 00 90 3D |  if_ae	jmp	#LR__3461
20fd4     14 13 32 F9 | 	getword	arg01, local06, #0
20fd8     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
20fdc     FD 20 02 F6 | 	mov	local02, result1
20fe0     13 23 02 F6 | 	mov	local03, local05
20fe4     01 22 66 F0 | 	shl	local03, #1
20fe8     0F 23 02 F1 | 	add	local03, local01
20fec     11 13 E2 FA | 	rdword	arg01, local03
20ff0     01 26 06 F1 | 	add	local05, #1
20ff4     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
20ff8     FD 20 0A F2 | 	cmp	local02, result1 wz
20ffc     08 00 90 AD |  if_e	jmp	#LR__3462
21000                 | LR__3461
21000                 | ' 				return 0;
21000     00 FA 05 F6 | 	mov	result1, #0
21004     44 00 90 FD | 	jmp	#LR__3466
21008                 | LR__3462
21008     14 23 02 F6 | 	mov	local03, local06
2100c     14 00 90 FD | 	jmp	#LR__3464
21010                 | LR__3463
21010     14 29 32 F9 | 	getword	local06, local06, #0
21014     7F 00 00 FF 
21018     FF 29 0E F2 | 	cmp	local06, ##65535 wz
2101c     00 FA 05 56 |  if_ne	mov	result1, #0
21020     28 00 90 5D |  if_ne	jmp	#LR__3466
21024                 | LR__3464
21024     01 24 06 F1 | 	add	local04, #1
21028     5C FF 9F FD | 	jmp	#LR__3460
2102c                 | LR__3465
2102c     0A 21 C2 FA | 	rdbyte	local02, arg02
21030     40 20 CE F7 | 	test	local02, #64 wz
21034     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
21038     01 26 66 50 |  if_ne	shl	local05, #1
2103c     0F 27 02 51 |  if_ne	add	local05, local01
21040     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
21044     00 FA 05 56 |  if_ne	mov	result1, #0
21048                 | ' 
21048                 | ' 	return 1;
21048     01 FA 05 A6 |  if_e	mov	result1, #1
2104c                 | LR__3466
2104c     A7 F0 03 F6 | 	mov	ptra, fp
21050     B2 00 A0 FD | 	call	#popregs_
21054                 | _fatfs_cc_cmp_lfn_ret
21054     2D 00 64 FD | 	ret
21058                 | 
21058                 | _fatfs_cc_pick_lfn
21058     09 01 02 F6 | 	mov	_var01, arg01
2105c     0A 13 02 F6 | 	mov	arg01, arg02
21060     1A 12 06 F1 | 	add	arg01, #26
21064                 | ' {
21064                 | ' 
21064                 | ' 	return *((WORD*)ptr);
21064     09 FB E9 FA | 	rdword	result1, arg01 wz
21068     00 FA 05 56 |  if_ne	mov	result1, #0
2106c     D4 00 90 5D |  if_ne	jmp	#LR__3475
21070     0A 03 C2 FA | 	rdbyte	_var02, arg02
21074     40 02 26 F5 | 	andn	_var02, #64
21078     01 02 86 F1 | 	sub	_var02, #1
2107c     0D 02 06 FD | 	qmul	_var02, #13
21080                 | ' 
21080                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
21080                 | ' 
21080                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
21080     01 04 06 F6 | 	mov	_var03, #1
21084     00 06 06 F6 | 	mov	_var04, #0
21088     18 08 62 FD | 	getqx	_var05
2108c                 | LR__3470
2108c     0D 06 16 F2 | 	cmp	_var04, #13 wc
21090     80 00 90 3D |  if_ae	jmp	#LR__3473
21094     0A 13 02 F6 | 	mov	arg01, arg02
21098     03 03 02 F6 | 	mov	_var02, _var04
2109c     01 00 00 FF 
210a0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
210a4     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
210a8     01 03 C2 FA | 	rdbyte	_var02, _var02
210ac     01 02 06 FA | 	mul	_var02, #1
210b0     01 13 02 F1 | 	add	arg01, _var02
210b4     01 00 00 FF 
210b8     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
210bc                 | ' {
210bc                 | ' 
210bc                 | ' 	return *((WORD*)ptr);
210bc     09 FB E1 FA | 	rdword	result1, arg01
210c0     FD 0A 02 F6 | 	mov	_var06, result1
210c4     02 03 02 F6 | 	mov	_var02, _var03
210c8     0F 02 4E F7 | 	zerox	_var02, #15 wz
210cc     28 00 90 AD |  if_e	jmp	#LR__3471
210d0     00 09 16 F2 | 	cmp	_var05, #256 wc
210d4     00 FA 05 36 |  if_ae	mov	result1, #0
210d8     68 00 90 3D |  if_ae	jmp	#LR__3475
210dc     04 03 02 F6 | 	mov	_var02, _var05
210e0     01 02 66 F0 | 	shl	_var02, #1
210e4     00 03 02 F1 | 	add	_var02, _var01
210e8     05 05 02 F6 | 	mov	_var03, _var06
210ec     01 05 52 FC | 	wrword	_var03, _var02
210f0     01 08 06 F1 | 	add	_var05, #1
210f4     14 00 90 FD | 	jmp	#LR__3472
210f8                 | LR__3471
210f8     05 0B 32 F9 | 	getword	_var06, _var06, #0
210fc     7F 00 00 FF 
21100     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
21104     00 FA 05 56 |  if_ne	mov	result1, #0
21108     38 00 90 5D |  if_ne	jmp	#LR__3475
2110c                 | LR__3472
2110c     01 06 06 F1 | 	add	_var04, #1
21110     78 FF 9F FD | 	jmp	#LR__3470
21114                 | LR__3473
21114     0A 03 C2 FA | 	rdbyte	_var02, arg02
21118     40 02 CE F7 | 	test	_var02, #64 wz
2111c     02 0D 02 56 |  if_ne	mov	_var07, _var03
21120     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
21124     18 00 90 AD |  if_e	jmp	#LR__3474
21128     00 09 16 F2 | 	cmp	_var05, #256 wc
2112c     00 FA 05 36 |  if_ae	mov	result1, #0
21130     10 00 90 3D |  if_ae	jmp	#LR__3475
21134     01 08 66 F0 | 	shl	_var05, #1
21138     00 09 02 F1 | 	add	_var05, _var01
2113c     04 01 58 FC | 	wrword	#0, _var05
21140                 | LR__3474
21140                 | ' 		lfnbuf[i] = 0;
21140                 | ' 	}
21140                 | ' 
21140                 | ' 	return 1;
21140     01 FA 05 F6 | 	mov	result1, #1
21144                 | LR__3475
21144                 | _fatfs_cc_pick_lfn_ret
21144     2D 00 64 FD | 	ret
21148                 | 
21148                 | _fatfs_cc_put_lfn
21148     0D 14 06 F1 | 	add	arg02, #13
2114c     0A 19 42 FC | 	wrbyte	arg04, arg02
21150     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
21154     01 18 86 F1 | 	sub	arg04, #1
21158     0D 18 06 FD | 	qmul	arg04, #13
2115c     09 01 02 F6 | 	mov	_var01, arg01
21160     02 14 86 F1 | 	sub	arg02, #2
21164     0A 1F 48 FC | 	wrbyte	#15, arg02
21168     01 14 06 F1 | 	add	arg02, #1
2116c     0A 01 48 FC | 	wrbyte	#0, arg02
21170     0C 14 86 F1 | 	sub	arg02, #12
21174     0A 13 02 F6 | 	mov	arg01, arg02
21178     1A 12 06 F1 | 	add	arg01, #26
2117c     09 01 58 FC | 	wrword	#0, arg01
21180     00 02 06 F6 | 	mov	_var02, #0
21184     00 04 06 F6 | 	mov	_var03, #0
21188                 | ' 	BYTE* dir,
21188                 | ' 	BYTE ord,
21188                 | ' 	BYTE sum
21188                 | ' )
21188                 | ' {
21188                 | ' 	UINT i, s;
21188                 | ' 	WCHAR wc;
21188                 | ' 
21188                 | ' 
21188                 | ' 	dir[ 13 ] = sum;
21188                 | ' 	dir[ 11 ] =  0x0F ;
21188                 | ' 	dir[ 12 ] = 0;
21188                 | ' 	st_word(dir +  26 , 0);
21188                 | ' 
21188                 | ' 	i = (ord - 1) * 13;
21188                 | ' 	s = wc = 0;
21188                 | ' 	do {
21188     01 00 00 FF 
2118c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
21190     18 06 62 FD | 	getqx	_var04
21194     97 2A 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
21198                 | LR__3480
21198     01 19 32 F9 | 	getword	arg04, _var02, #0
2119c     7F 00 00 FF 
211a0     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
211a4     03 13 02 56 |  if_ne	mov	arg01, _var04
211a8     01 06 06 51 |  if_ne	add	_var04, #1
211ac     01 12 66 50 |  if_ne	shl	arg01, #1
211b0     00 13 02 51 |  if_ne	add	arg01, _var01
211b4     09 03 E2 5A |  if_ne	rdword	_var02, arg01
211b8     0A 13 02 F6 | 	mov	arg01, arg02
211bc     02 19 02 F6 | 	mov	arg04, _var03
211c0     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
211c4     0C 19 C2 FA | 	rdbyte	arg04, arg04
211c8     01 18 06 FA | 	mul	arg04, #1
211cc     0C 13 02 F1 | 	add	arg01, arg04
211d0     09 03 52 FC | 	wrword	_var02, arg01
211d4     01 19 02 F6 | 	mov	arg04, _var02
211d8     0F 18 4E F7 | 	zerox	arg04, #15 wz
211dc     0F 02 CE A9 |  if_e	bmask	_var02, #15
211e0     01 04 06 F1 | 	add	_var03, #1
211e4     0D 04 16 F2 | 	cmp	_var03, #13 wc
211e8     AC FF 9F CD |  if_b	jmp	#LR__3480
211ec                 | LR__3481
211ec     01 00 00 FF 
211f0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
211f4     01 03 32 F9 | 	getword	_var02, _var02, #0
211f8     7F 00 00 FF 
211fc     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
21200     01 06 66 50 |  if_ne	shl	_var04, #1
21204     00 07 02 51 |  if_ne	add	_var04, _var01
21208     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2120c     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
21210     40 16 46 A5 |  if_e	or	arg03, #64
21214     0A 17 42 FC | 	wrbyte	arg03, arg02
21218                 | _fatfs_cc_put_lfn_ret
21218     2D 00 64 FD | 	ret
2121c                 | 
2121c                 | _fatfs_cc_gen_numname
2121c     08 4A 05 F6 | 	mov	COUNT_, #8
21220     A8 00 A0 FD | 	call	#pushregs_
21224     2C F0 07 F1 | 	add	ptra, #44
21228     09 1F 02 F6 | 	mov	local01, arg01
2122c     0A 21 02 F6 | 	mov	local02, arg02
21230     0B 23 02 F6 | 	mov	local03, arg03
21234     0C 25 02 F6 | 	mov	local04, arg04
21238     0F 13 02 F6 | 	mov	arg01, local01
2123c     10 15 02 F6 | 	mov	arg02, local02
21240     0B 16 06 F6 | 	mov	arg03, #11
21244     88 78 BF FD | 	call	#__system____builtin_memmove
21248     06 24 16 F2 | 	cmp	local04, #6 wc
2124c     48 00 90 CD |  if_b	jmp	#LR__3495
21250     12 27 02 F6 | 	mov	local05, local04
21254     97 1E 48 FB | 	callpa	#(@LR__3493-@LR__3490)>>2,fcache_load_ptr_
21258                 | ' 		sreg = seq;
21258                 | ' 		while (*lfn) {
21258                 | LR__3490
21258     11 29 EA FA | 	rdword	local06, local03 wz
2125c     34 00 90 AD |  if_e	jmp	#LR__3494
21260     11 2B E2 FA | 	rdword	local07, local03
21264                 | ' 			wc = *lfn++;
21264                 | ' 			for (i = 0; i < 16; i++) {
21264     02 22 06 F1 | 	add	local03, #2
21268     10 12 DC FC | 	rep	@LR__3492, #16
2126c                 | LR__3491
2126c     01 26 66 F0 | 	shl	local05, #1
21270     15 29 32 F9 | 	getword	local06, local07, #0
21274     01 28 06 F5 | 	and	local06, #1
21278     14 27 02 F1 | 	add	local05, local06
2127c     15 2B 32 F9 | 	getword	local07, local07, #0
21280     01 2A 46 F0 | 	shr	local07, #1
21284     10 26 2E F4 | 	testbn	local05, #16 wz
21288     88 00 00 5F 
2128c     21 26 66 55 |  if_ne	xor	local05, ##69665
21290                 | LR__3492
21290     C4 FF 9F FD | 	jmp	#LR__3490
21294                 | LR__3493
21294                 | LR__3494
21294     13 25 02 F6 | 	mov	local04, local05
21298                 | LR__3495
21298     07 2A 06 F6 | 	mov	local07, #7
2129c                 | ' 			}
2129c                 | ' 		}
2129c                 | ' 		seq = (UINT)sreg;
2129c                 | ' 	}
2129c                 | ' 
2129c                 | ' 
2129c                 | ' 	i = 7;
2129c                 | ' 	do {
2129c     10 4E 05 F1 | 	add	fp, #16
212a0     97 1A 48 FB | 	callpa	#(@LR__3497-@LR__3496)>>2,fcache_load_ptr_
212a4                 | LR__3496
212a4     12 27 42 F8 | 	getnib	local05, local04, #0
212a8     30 26 06 F1 | 	add	local05, #48
212ac     04 24 46 F0 | 	shr	local04, #4
212b0     13 29 E2 F8 | 	getbyte	local06, local05, #0
212b4     3A 28 16 F2 | 	cmp	local06, #58 wc
212b8     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
212bc     07 26 06 31 |  if_ae	add	local05, #7
212c0     15 29 02 F6 | 	mov	local06, local07
212c4     01 2A 8E F1 | 	sub	local07, #1 wz
212c8     A7 28 02 F1 | 	add	local06, fp
212cc     14 27 42 FC | 	wrbyte	local05, local06
212d0     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
212d4     CC FF 9F 5D |  if_ne	jmp	#LR__3496
212d8                 | LR__3497
212d8     15 29 02 F6 | 	mov	local06, local07
212dc     A7 28 02 F1 | 	add	local06, fp
212e0     14 FD 48 FC | 	wrbyte	#126, local06
212e4                 | ' 	ns[i] = '~';
212e4                 | ' 
212e4                 | ' 
212e4                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
212e4     00 26 06 F6 | 	mov	local05, #0
212e8     10 4E 85 F1 | 	sub	fp, #16
212ec     97 2A 48 FB | 	callpa	#(@LR__3500-@LR__3498)>>2,fcache_load_ptr_
212f0                 | LR__3498
212f0     15 27 12 F2 | 	cmp	local05, local07 wc
212f4     4C 00 90 3D |  if_ae	jmp	#LR__3501
212f8     13 29 02 F6 | 	mov	local06, local05
212fc     0F 29 02 F1 | 	add	local06, local01
21300     14 29 C2 FA | 	rdbyte	local06, local06
21304     20 28 0E F2 | 	cmp	local06, #32 wz
21308     38 00 90 AD |  if_e	jmp	#LR__3501
2130c     13 13 02 F6 | 	mov	arg01, local05
21310     0F 13 02 F1 | 	add	arg01, local01
21314     09 13 CA FA | 	rdbyte	arg01, arg01 wz
21318     00 FA 05 56 |  if_ne	mov	result1, #0
2131c                 | ' 
2131c                 | ' 	return 0;
2131c     00 FA 05 A6 |  if_e	mov	result1, #0
21320     00 FA 0D F2 | 	cmp	result1, #0 wz
21324     14 00 90 AD |  if_e	jmp	#LR__3499
21328     15 29 02 F6 | 	mov	local06, local07
2132c     01 28 86 F1 | 	sub	local06, #1
21330     14 27 0A F2 | 	cmp	local05, local06 wz
21334     0C 00 90 AD |  if_e	jmp	#LR__3501
21338     01 26 06 F1 | 	add	local05, #1
2133c                 | LR__3499
2133c     01 26 06 F1 | 	add	local05, #1
21340     AC FF 9F FD | 	jmp	#LR__3498
21344                 | LR__3500
21344                 | LR__3501
21344     97 20 48 FB | 	callpa	#(@LR__3505-@LR__3502)>>2,fcache_load_ptr_
21348                 | ' 			j++;
21348                 | ' 		}
21348                 | ' 	}
21348                 | ' 	do {
21348                 | LR__3502
21348     13 29 02 F6 | 	mov	local06, local05
2134c     0F 29 02 F1 | 	add	local06, local01
21350     08 2A 16 F2 | 	cmp	local07, #8 wc
21354     01 26 06 F1 | 	add	local05, #1
21358     1C 00 90 3D |  if_ae	jmp	#LR__3503
2135c     15 25 02 F6 | 	mov	local04, local07
21360     10 4E 05 F1 | 	add	fp, #16
21364     A7 24 02 F1 | 	add	local04, fp
21368     12 2D C2 FA | 	rdbyte	local08, local04
2136c     01 2A 06 F1 | 	add	local07, #1
21370     10 4E 85 F1 | 	sub	fp, #16
21374     04 00 90 FD | 	jmp	#LR__3504
21378                 | LR__3503
21378     20 2C 06 F6 | 	mov	local08, #32
2137c                 | LR__3504
2137c     14 2D 42 FC | 	wrbyte	local08, local06
21380     08 26 16 F2 | 	cmp	local05, #8 wc
21384     C0 FF 9F CD |  if_b	jmp	#LR__3502
21388                 | LR__3505
21388     A7 F0 03 F6 | 	mov	ptra, fp
2138c     B2 00 A0 FD | 	call	#popregs_
21390                 | _fatfs_cc_gen_numname_ret
21390     2D 00 64 FD | 	ret
21394                 | 
21394                 | _fatfs_cc_sum_sfn
21394     00 00 06 F6 | 	mov	_var01, #0
21398                 | ' )
21398                 | ' {
21398                 | ' 	BYTE sum = 0;
21398                 | ' 	UINT n = 11;
21398                 | ' 
21398                 | ' 	do {
21398     97 12 48 FB | 	callpa	#(@LR__3512-@LR__3510)>>2,fcache_load_ptr_
2139c                 | LR__3510
2139c     0B 10 DC FC | 	rep	@LR__3513, #11
213a0                 | LR__3511
213a0     00 FB E1 F8 | 	getbyte	result1, _var01, #0
213a4     01 FA 45 F0 | 	shr	result1, #1
213a8     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
213ac     07 00 66 F0 | 	shl	_var01, #7
213b0     00 FB 01 F1 | 	add	result1, _var01
213b4     09 01 C2 FA | 	rdbyte	_var01, arg01
213b8     FD 00 02 F1 | 	add	_var01, result1
213bc     01 12 06 F1 | 	add	arg01, #1
213c0                 | LR__3512
213c0                 | LR__3513
213c0                 | ' 	return sum;
213c0     00 FB 01 F6 | 	mov	result1, _var01
213c4                 | _fatfs_cc_sum_sfn_ret
213c4     2D 00 64 FD | 	ret
213c8                 | 
213c8                 | _fatfs_cc_dir_read
213c8     0C 4A 05 F6 | 	mov	COUNT_, #12
213cc     A8 00 A0 FD | 	call	#pushregs_
213d0     09 1F 02 F6 | 	mov	local01, arg01
213d4     0A 21 02 F6 | 	mov	local02, arg02
213d8     04 22 06 F6 | 	mov	local03, #4
213dc     0F 25 02 FB | 	rdlong	local04, local01
213e0     FF 26 06 F6 | 	mov	local05, #255
213e4     FF 28 06 F6 | 	mov	local06, #255
213e8                 | ' )
213e8                 | ' {
213e8                 | ' 	FRESULT res = FR_NO_FILE;
213e8                 | ' 	FATFS *fs = dp->obj.fs;
213e8                 | ' 	BYTE attr, b;
213e8                 | ' 
213e8                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
213e8                 | ' 
213e8                 | ' 
213e8                 | ' 	while (dp->sect) {
213e8                 | LR__3520
213e8     18 1E 06 F1 | 	add	local01, #24
213ec     0F FB 09 FB | 	rdlong	result1, local01 wz
213f0     18 1E 86 F1 | 	sub	local01, #24
213f4     AC 01 90 AD |  if_e	jmp	#LR__3530
213f8     18 1E 06 F1 | 	add	local01, #24
213fc     0F 15 02 FB | 	rdlong	arg02, local01
21400     18 1E 86 F1 | 	sub	local01, #24
21404     12 13 02 F6 | 	mov	arg01, local04
21408     AC ED BF FD | 	call	#_fatfs_cc_move_window
2140c     FD 22 0A F6 | 	mov	local03, result1 wz
21410     90 01 90 5D |  if_ne	jmp	#LR__3530
21414     1C 1E 06 F1 | 	add	local01, #28
21418     0F FB 01 FB | 	rdlong	result1, local01
2141c     1C 1E 86 F1 | 	sub	local01, #28
21420     FD 2A C2 FA | 	rdbyte	local07, result1
21424     15 FB 01 F6 | 	mov	result1, local07
21428     07 FA 4D F7 | 	zerox	result1, #7 wz
2142c     04 22 06 A6 |  if_e	mov	local03, #4
21430                 | ' 			res = FR_NO_FILE; break;
21430     70 01 90 AD |  if_e	jmp	#LR__3530
21434     1C 1E 06 F1 | 	add	local01, #28
21438     0F 2D 02 FB | 	rdlong	local08, local01
2143c     0B 2C 06 F1 | 	add	local08, #11
21440     16 2F C2 FA | 	rdbyte	local09, local08
21444     3F 2E 06 F5 | 	and	local09, #63
21448     16 1E 86 F1 | 	sub	local01, #22
2144c     0F 2F 42 FC | 	wrbyte	local09, local01
21450     06 1E 86 F1 | 	sub	local01, #6
21454     15 FB E1 F8 | 	getbyte	result1, local07, #0
21458     E5 FA 0D F2 | 	cmp	result1, #229 wz
2145c     15 2D 02 56 |  if_ne	mov	local08, local07
21460     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
21464     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
21468     1C 00 90 AD |  if_e	jmp	#LR__3521
2146c     00 30 06 F6 | 	mov	local10, #0
21470     17 2D E2 F8 | 	getbyte	local08, local09, #0
21474     20 2C 26 F5 | 	andn	local08, #32
21478     08 2C 0E F2 | 	cmp	local08, #8 wz
2147c     01 30 06 A6 |  if_e	mov	local10, #1
21480     10 31 0A F2 | 	cmp	local10, local02 wz
21484     08 00 90 AD |  if_e	jmp	#LR__3522
21488                 | LR__3521
21488     FF 26 06 F6 | 	mov	local05, #255
2148c     00 01 90 FD | 	jmp	#LR__3529
21490                 | LR__3522
21490     17 2F E2 F8 | 	getbyte	local09, local09, #0
21494     0F 2E 0E F2 | 	cmp	local09, #15 wz
21498     B4 00 90 5D |  if_ne	jmp	#LR__3526
2149c     15 33 E2 F8 | 	getbyte	local11, local07, #0
214a0     40 32 CE F7 | 	test	local11, #64 wz
214a4     30 00 90 AD |  if_e	jmp	#LR__3523
214a8     1C 1E 06 F1 | 	add	local01, #28
214ac     0F 33 02 FB | 	rdlong	local11, local01
214b0     0D 32 06 F1 | 	add	local11, #13
214b4     19 29 C2 FA | 	rdbyte	local06, local11
214b8     15 2B E2 F8 | 	getbyte	local07, local07, #0
214bc     BF 2A 06 F5 | 	and	local07, #191
214c0     15 27 02 F6 | 	mov	local05, local07
214c4     0C 1E 86 F1 | 	sub	local01, #12
214c8     0F 33 02 FB | 	rdlong	local11, local01
214cc     1C 1E 06 F1 | 	add	local01, #28
214d0     0F 33 62 FC | 	wrlong	local11, local01
214d4     2C 1E 86 F1 | 	sub	local01, #44
214d8                 | LR__3523
214d8     15 2D E2 F8 | 	getbyte	local08, local07, #0
214dc     13 31 E2 F8 | 	getbyte	local10, local05, #0
214e0     18 2D 0A F2 | 	cmp	local08, local10 wz
214e4     5C 00 90 5D |  if_ne	jmp	#LR__3524
214e8     14 31 E2 F8 | 	getbyte	local10, local06, #0
214ec     1C 1E 06 F1 | 	add	local01, #28
214f0     0F 2F 02 FB | 	rdlong	local09, local01
214f4     1C 1E 86 F1 | 	sub	local01, #28
214f8     0D 2E 06 F1 | 	add	local09, #13
214fc     17 2D C2 FA | 	rdbyte	local08, local09
21500     16 2F E2 F8 | 	getbyte	local09, local08, #0
21504     17 31 0A F2 | 	cmp	local10, local09 wz
21508     38 00 90 5D |  if_ne	jmp	#LR__3524
2150c     0C 24 06 F1 | 	add	local04, #12
21510     12 13 02 FB | 	rdlong	arg01, local04
21514     0C 24 86 F1 | 	sub	local04, #12
21518     1C 1E 06 F1 | 	add	local01, #28
2151c     0F 35 02 FB | 	rdlong	local12, local01
21520     1C 1E 86 F1 | 	sub	local01, #28
21524     1A 15 02 F6 | 	mov	arg02, local12
21528     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2152c     00 FA 4D F2 | 	cmps	result1, #0 wz
21530     13 35 02 56 |  if_ne	mov	local12, local05
21534     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
21538     01 34 86 51 |  if_ne	sub	local12, #1
2153c     1A 33 02 56 |  if_ne	mov	local11, local12
21540     04 00 90 5D |  if_ne	jmp	#LR__3525
21544                 | LR__3524
21544     FF 32 06 F6 | 	mov	local11, #255
21548                 | LR__3525
21548     19 27 02 F6 | 	mov	local05, local11
2154c     40 00 90 FD | 	jmp	#LR__3528
21550                 | LR__3526
21550     13 33 02 F6 | 	mov	local11, local05
21554     07 32 4E F7 | 	zerox	local11, #7 wz
21558     20 00 90 5D |  if_ne	jmp	#LR__3527
2155c     14 29 E2 F8 | 	getbyte	local06, local06, #0
21560     1C 1E 06 F1 | 	add	local01, #28
21564     0F 13 02 FB | 	rdlong	arg01, local01
21568     1C 1E 86 F1 | 	sub	local01, #28
2156c     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
21570     FD FA E1 F8 | 	getbyte	result1, result1, #0
21574     FD 28 0A F2 | 	cmp	local06, result1 wz
21578     28 00 90 AD |  if_e	jmp	#LR__3530
2157c                 | LR__3527
2157c     2C 1E 06 F1 | 	add	local01, #44
21580     FF FF FF FF 
21584     0F FF 6B FC | 	wrlong	##-1, local01
21588     2C 1E 86 F1 | 	sub	local01, #44
2158c                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2158c                 | ' 					}
2158c                 | ' 					break;
2158c     14 00 90 FD | 	jmp	#LR__3530
21590                 | LR__3528
21590                 | LR__3529
21590     0F 13 02 F6 | 	mov	arg01, local01
21594     00 14 06 F6 | 	mov	arg02, #0
21598     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2159c     FD 22 0A F6 | 	mov	local03, result1 wz
215a0     44 FE 9F AD |  if_e	jmp	#LR__3520
215a4                 | LR__3530
215a4     00 22 0E F2 | 	cmp	local03, #0 wz
215a8     18 1E 06 51 |  if_ne	add	local01, #24
215ac     0F 01 68 5C |  if_ne	wrlong	#0, local01
215b0                 | ' 	return res;
215b0     11 FB 01 F6 | 	mov	result1, local03
215b4     A7 F0 03 F6 | 	mov	ptra, fp
215b8     B2 00 A0 FD | 	call	#popregs_
215bc                 | _fatfs_cc_dir_read_ret
215bc     2D 00 64 FD | 	ret
215c0                 | 
215c0                 | _fatfs_cc_dir_find
215c0     0B 4A 05 F6 | 	mov	COUNT_, #11
215c4     A8 00 A0 FD | 	call	#pushregs_
215c8     09 1F 02 F6 | 	mov	local01, arg01
215cc     0F 21 02 FB | 	rdlong	local02, local01
215d0     0F 13 02 F6 | 	mov	arg01, local01
215d4     00 14 06 F6 | 	mov	arg02, #0
215d8     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
215dc     00 FA 0D F2 | 	cmp	result1, #0 wz
215e0     18 02 90 5D |  if_ne	jmp	#LR__3552
215e4     FF 22 06 F6 | 	mov	local03, #255
215e8     FF 24 06 F6 | 	mov	local04, #255
215ec     2C 1E 06 F1 | 	add	local01, #44
215f0     FF FF FF FF 
215f4     0F FF 6B FC | 	wrlong	##-1, local01
215f8     2C 1E 86 F1 | 	sub	local01, #44
215fc                 | ' #line 2404 "ff.c"
215fc                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
215fc                 | ' 
215fc                 | ' 	do {
215fc                 | LR__3540
215fc     18 1E 06 F1 | 	add	local01, #24
21600     0F 15 02 FB | 	rdlong	arg02, local01
21604     18 1E 86 F1 | 	sub	local01, #24
21608     10 13 02 F6 | 	mov	arg01, local02
2160c     A8 EB BF FD | 	call	#_fatfs_cc_move_window
21610     FD 26 0A F6 | 	mov	local05, result1 wz
21614     E0 01 90 5D |  if_ne	jmp	#LR__3551
21618     1C 1E 06 F1 | 	add	local01, #28
2161c     0F 17 02 FB | 	rdlong	arg03, local01
21620     1C 1E 86 F1 | 	sub	local01, #28
21624     0B 29 C2 FA | 	rdbyte	local06, arg03
21628     14 17 02 F6 | 	mov	arg03, local06
2162c     07 16 4E F7 | 	zerox	arg03, #7 wz
21630     04 26 06 A6 |  if_e	mov	local05, #4
21634     C0 01 90 AD |  if_e	jmp	#LR__3551
21638     1C 1E 06 F1 | 	add	local01, #28
2163c     0F 2B 02 FB | 	rdlong	local07, local01
21640     15 17 02 F6 | 	mov	arg03, local07
21644     0B 16 06 F1 | 	add	arg03, #11
21648     0B 2D C2 FA | 	rdbyte	local08, arg03
2164c     3F 2C 06 F5 | 	and	local08, #63
21650     16 1E 86 F1 | 	sub	local01, #22
21654     0F 2D 42 FC | 	wrbyte	local08, local01
21658     06 1E 86 F1 | 	sub	local01, #6
2165c     14 17 E2 F8 | 	getbyte	arg03, local06, #0
21660     E5 16 0E F2 | 	cmp	arg03, #229 wz
21664     18 00 90 AD |  if_e	jmp	#LR__3541
21668     16 17 E2 F8 | 	getbyte	arg03, local08, #0
2166c     08 16 CE F7 | 	test	arg03, #8 wz
21670     16 2B 02 56 |  if_ne	mov	local07, local08
21674     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
21678     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
2167c     18 00 90 AD |  if_e	jmp	#LR__3542
21680                 | LR__3541
21680     FF 24 06 F6 | 	mov	local04, #255
21684     2C 1E 06 F1 | 	add	local01, #44
21688     FF FF FF FF 
2168c     0F FF 6B FC | 	wrlong	##-1, local01
21690     2C 1E 86 F1 | 	sub	local01, #44
21694     4C 01 90 FD | 	jmp	#LR__3550
21698                 | LR__3542
21698     16 2D E2 F8 | 	getbyte	local08, local08, #0
2169c     0F 2C 0E F2 | 	cmp	local08, #15 wz
216a0     C8 00 90 5D |  if_ne	jmp	#LR__3546
216a4     2B 1E 06 F1 | 	add	local01, #43
216a8     0F 2D C2 FA | 	rdbyte	local08, local01
216ac     2B 1E 86 F1 | 	sub	local01, #43
216b0     40 2C CE F7 | 	test	local08, #64 wz
216b4     2C 01 90 5D |  if_ne	jmp	#LR__3549
216b8     14 2F E2 F8 | 	getbyte	local09, local06, #0
216bc     40 2E CE F7 | 	test	local09, #64 wz
216c0     30 00 90 AD |  if_e	jmp	#LR__3543
216c4     1C 1E 06 F1 | 	add	local01, #28
216c8     0F 2F 02 FB | 	rdlong	local09, local01
216cc     0D 2E 06 F1 | 	add	local09, #13
216d0     17 23 C2 FA | 	rdbyte	local03, local09
216d4     14 29 E2 F8 | 	getbyte	local06, local06, #0
216d8     BF 28 06 F5 | 	and	local06, #191
216dc     14 25 02 F6 | 	mov	local04, local06
216e0     0C 1E 86 F1 | 	sub	local01, #12
216e4     0F 2F 02 FB | 	rdlong	local09, local01
216e8     1C 1E 06 F1 | 	add	local01, #28
216ec     0F 2F 62 FC | 	wrlong	local09, local01
216f0     2C 1E 86 F1 | 	sub	local01, #44
216f4                 | LR__3543
216f4     14 31 E2 F8 | 	getbyte	local10, local06, #0
216f8     12 2B E2 F8 | 	getbyte	local07, local04, #0
216fc     15 31 0A F2 | 	cmp	local10, local07 wz
21700     5C 00 90 5D |  if_ne	jmp	#LR__3544
21704     11 2D E2 F8 | 	getbyte	local08, local03, #0
21708     1C 1E 06 F1 | 	add	local01, #28
2170c     0F 2B 02 FB | 	rdlong	local07, local01
21710     1C 1E 86 F1 | 	sub	local01, #28
21714     0D 2A 06 F1 | 	add	local07, #13
21718     15 29 C2 FA | 	rdbyte	local06, local07
2171c     14 2B E2 F8 | 	getbyte	local07, local06, #0
21720     15 2D 0A F2 | 	cmp	local08, local07 wz
21724     38 00 90 5D |  if_ne	jmp	#LR__3544
21728     0C 20 06 F1 | 	add	local02, #12
2172c     10 13 02 FB | 	rdlong	arg01, local02
21730     0C 20 86 F1 | 	sub	local02, #12
21734     1C 1E 06 F1 | 	add	local01, #28
21738     0F 33 02 FB | 	rdlong	local11, local01
2173c     1C 1E 86 F1 | 	sub	local01, #28
21740     19 15 02 F6 | 	mov	arg02, local11
21744     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
21748     00 FA 4D F2 | 	cmps	result1, #0 wz
2174c     12 33 02 56 |  if_ne	mov	local11, local04
21750     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
21754     01 32 86 51 |  if_ne	sub	local11, #1
21758     19 2F 02 56 |  if_ne	mov	local09, local11
2175c     04 00 90 5D |  if_ne	jmp	#LR__3545
21760                 | LR__3544
21760     FF 2E 06 F6 | 	mov	local09, #255
21764                 | LR__3545
21764     17 25 02 F6 | 	mov	local04, local09
21768     78 00 90 FD | 	jmp	#LR__3549
2176c                 | LR__3546
2176c     12 2F 02 F6 | 	mov	local09, local04
21770     07 2E 4E F7 | 	zerox	local09, #7 wz
21774     20 00 90 5D |  if_ne	jmp	#LR__3547
21778     11 31 E2 F8 | 	getbyte	local10, local03, #0
2177c     1C 1E 06 F1 | 	add	local01, #28
21780     0F 13 02 FB | 	rdlong	arg01, local01
21784     1C 1E 86 F1 | 	sub	local01, #28
21788     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2178c     FD FA E1 F8 | 	getbyte	result1, result1, #0
21790     FD 30 0A F2 | 	cmp	local10, result1 wz
21794     60 00 90 AD |  if_e	jmp	#LR__3551
21798                 | LR__3547
21798     2B 1E 06 F1 | 	add	local01, #43
2179c     0F 2F C2 FA | 	rdbyte	local09, local01
217a0     2B 1E 86 F1 | 	sub	local01, #43
217a4     01 2E CE F7 | 	test	local09, #1 wz
217a8     24 00 90 5D |  if_ne	jmp	#LR__3548
217ac     1C 1E 06 F1 | 	add	local01, #28
217b0     0F 13 02 FB | 	rdlong	arg01, local01
217b4     04 1E 06 F1 | 	add	local01, #4
217b8     0F 15 02 F6 | 	mov	arg02, local01
217bc     20 1E 86 F1 | 	sub	local01, #32
217c0     0B 16 06 F6 | 	mov	arg03, #11
217c4     88 DA BF FD | 	call	#_fatfs_cc_memcmp
217c8     00 FA 0D F2 | 	cmp	result1, #0 wz
217cc     28 00 90 AD |  if_e	jmp	#LR__3551
217d0                 | LR__3548
217d0     FF 24 06 F6 | 	mov	local04, #255
217d4     2C 1E 06 F1 | 	add	local01, #44
217d8     FF FF FF FF 
217dc     0F FF 6B FC | 	wrlong	##-1, local01
217e0     2C 1E 86 F1 | 	sub	local01, #44
217e4                 | LR__3549
217e4                 | LR__3550
217e4     0F 13 02 F6 | 	mov	arg01, local01
217e8     00 14 06 F6 | 	mov	arg02, #0
217ec     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
217f0     FD 26 0A F6 | 	mov	local05, result1 wz
217f4     04 FE 9F AD |  if_e	jmp	#LR__3540
217f8                 | LR__3551
217f8                 | ' 
217f8                 | ' 	return res;
217f8     13 FB 01 F6 | 	mov	result1, local05
217fc                 | LR__3552
217fc     A7 F0 03 F6 | 	mov	ptra, fp
21800     B2 00 A0 FD | 	call	#popregs_
21804                 | _fatfs_cc_dir_find_ret
21804     2D 00 64 FD | 	ret
21808                 | 
21808                 | _fatfs_cc_dir_register
21808     0A 4A 05 F6 | 	mov	COUNT_, #10
2180c     A8 00 A0 FD | 	call	#pushregs_
21810     2C F0 07 F1 | 	add	ptra, #44
21814     04 4E 05 F1 | 	add	fp, #4
21818     A7 12 62 FC | 	wrlong	arg01, fp
2181c     09 1F 02 FB | 	rdlong	local01, arg01
21820     08 4E 05 F1 | 	add	fp, #8
21824     A7 1E 62 FC | 	wrlong	local01, fp
21828     08 4E 85 F1 | 	sub	fp, #8
2182c     A7 20 02 FB | 	rdlong	local02, fp
21830     04 4E 85 F1 | 	sub	fp, #4
21834     2B 20 06 F1 | 	add	local02, #43
21838     10 21 C2 FA | 	rdbyte	local02, local02
2183c     A0 20 CE F7 | 	test	local02, #160 wz
21840     06 FA 05 56 |  if_ne	mov	result1, #6
21844     F8 03 90 5D |  if_ne	jmp	#LR__3575
21848                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
21848     14 4E 05 F1 | 	add	fp, #20
2184c     A7 00 68 FC | 	wrlong	#0, fp
21850     14 4E 85 F1 | 	sub	fp, #20
21854     97 28 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
21858                 | LR__3560
21858     0C 4E 05 F1 | 	add	fp, #12
2185c     A7 20 02 FB | 	rdlong	local02, fp
21860     0C 20 06 F1 | 	add	local02, #12
21864     10 23 02 FB | 	rdlong	local03, local02
21868     08 4E 05 F1 | 	add	fp, #8
2186c     A7 24 02 FB | 	rdlong	local04, fp
21870     14 4E 85 F1 | 	sub	fp, #20
21874     01 24 66 F0 | 	shl	local04, #1
21878     11 25 02 F1 | 	add	local04, local03
2187c     12 21 EA FA | 	rdword	local02, local04 wz
21880     24 00 90 AD |  if_e	jmp	#LR__3562
21884     14 4E 05 F1 | 	add	fp, #20
21888     A7 26 02 FB | 	rdlong	local05, fp
2188c     13 29 02 F6 | 	mov	local06, local05
21890     13 2B 02 F6 | 	mov	local07, local05
21894     15 2D 02 F6 | 	mov	local08, local07
21898     01 2C 06 F1 | 	add	local08, #1
2189c     A7 2C 62 FC | 	wrlong	local08, fp
218a0     14 4E 85 F1 | 	sub	fp, #20
218a4     B0 FF 9F FD | 	jmp	#LR__3560
218a8                 | LR__3561
218a8                 | LR__3562
218a8     1C 4E 05 F1 | 	add	fp, #28
218ac     A7 12 02 F6 | 	mov	arg01, fp
218b0     18 4E 85 F1 | 	sub	fp, #24
218b4     A7 14 02 FB | 	rdlong	arg02, fp
218b8     04 4E 85 F1 | 	sub	fp, #4
218bc     20 14 06 F1 | 	add	arg02, #32
218c0     0C 16 06 F6 | 	mov	arg03, #12
218c4     08 72 BF FD | 	call	#__system____builtin_memmove
218c8     27 4E 05 F1 | 	add	fp, #39
218cc     A7 2E C2 FA | 	rdbyte	local09, fp
218d0     27 4E 85 F1 | 	sub	fp, #39
218d4     01 2E CE F7 | 	test	local09, #1 wz
218d8     F4 00 90 AD |  if_e	jmp	#LR__3565
218dc     04 4E 05 F1 | 	add	fp, #4
218e0     A7 30 02 FB | 	rdlong	local10, fp
218e4     2B 30 06 F1 | 	add	local10, #43
218e8     18 81 48 FC | 	wrbyte	#64, local10
218ec                 | ' 		dp->fn[ 11 ] =  0x40 ;
218ec                 | ' 		for (n = 1; n < 100; n++) {
218ec     0C 4E 05 F1 | 	add	fp, #12
218f0     A7 02 68 FC | 	wrlong	#1, fp
218f4     10 4E 85 F1 | 	sub	fp, #16
218f8                 | LR__3563
218f8     10 4E 05 F1 | 	add	fp, #16
218fc     A7 20 02 FB | 	rdlong	local02, fp
21900     10 4E 85 F1 | 	sub	fp, #16
21904     64 20 16 F2 | 	cmp	local02, #100 wc
21908     70 00 90 3D |  if_ae	jmp	#LR__3564
2190c     04 4E 05 F1 | 	add	fp, #4
21910     A7 12 02 FB | 	rdlong	arg01, fp
21914     20 12 06 F1 | 	add	arg01, #32
21918     18 4E 05 F1 | 	add	fp, #24
2191c     A7 14 02 F6 | 	mov	arg02, fp
21920     10 4E 85 F1 | 	sub	fp, #16
21924     A7 30 02 FB | 	rdlong	local10, fp
21928     0C 30 06 F1 | 	add	local10, #12
2192c     18 17 02 FB | 	rdlong	arg03, local10
21930     04 4E 05 F1 | 	add	fp, #4
21934     A7 18 02 FB | 	rdlong	arg04, fp
21938     10 4E 85 F1 | 	sub	fp, #16
2193c     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
21940     04 4E 05 F1 | 	add	fp, #4
21944     A7 12 02 FB | 	rdlong	arg01, fp
21948     04 4E 85 F1 | 	sub	fp, #4
2194c     70 FC BF FD | 	call	#_fatfs_cc_dir_find
21950     08 4E 05 F1 | 	add	fp, #8
21954     A7 FA 61 FC | 	wrlong	result1, fp
21958     00 FA 4D F2 | 	cmps	result1, #0 wz
2195c     08 4E 85 F1 | 	sub	fp, #8
21960     18 00 90 5D |  if_ne	jmp	#LR__3564
21964     10 4E 05 F1 | 	add	fp, #16
21968     A7 30 02 FB | 	rdlong	local10, fp
2196c     01 30 06 F1 | 	add	local10, #1
21970     A7 30 62 FC | 	wrlong	local10, fp
21974     10 4E 85 F1 | 	sub	fp, #16
21978     7C FF 9F FD | 	jmp	#LR__3563
2197c                 | LR__3564
2197c     10 4E 05 F1 | 	add	fp, #16
21980     A7 30 02 FB | 	rdlong	local10, fp
21984     10 4E 85 F1 | 	sub	fp, #16
21988     64 30 0E F2 | 	cmp	local10, #100 wz
2198c     07 FA 05 A6 |  if_e	mov	result1, #7
21990     AC 02 90 AD |  if_e	jmp	#LR__3575
21994     08 4E 05 F1 | 	add	fp, #8
21998     A7 30 02 FB | 	rdlong	local10, fp
2199c     08 4E 85 F1 | 	sub	fp, #8
219a0     04 30 0E F2 | 	cmp	local10, #4 wz
219a4     08 4E 05 51 |  if_ne	add	fp, #8
219a8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
219ac     08 4E 85 51 |  if_ne	sub	fp, #8
219b0     8C 02 90 5D |  if_ne	jmp	#LR__3575
219b4     04 4E 05 F1 | 	add	fp, #4
219b8     A7 30 02 FB | 	rdlong	local10, fp
219bc     23 4E 05 F1 | 	add	fp, #35
219c0     A7 1E C2 FA | 	rdbyte	local01, fp
219c4     27 4E 85 F1 | 	sub	fp, #39
219c8     2B 30 06 F1 | 	add	local10, #43
219cc     18 1F 42 FC | 	wrbyte	local01, local10
219d0                 | LR__3565
219d0     27 4E 05 F1 | 	add	fp, #39
219d4     A7 20 C2 FA | 	rdbyte	local02, fp
219d8     27 4E 85 F1 | 	sub	fp, #39
219dc     02 20 CE F7 | 	test	local02, #2 wz
219e0     20 00 90 AD |  if_e	jmp	#LR__3566
219e4     14 4E 05 F1 | 	add	fp, #20
219e8     A7 30 02 FB | 	rdlong	local10, fp
219ec     0C 30 06 F1 | 	add	local10, #12
219f0     0D 30 16 FD | 	qdiv	local10, #13
219f4     14 4E 85 F1 | 	sub	fp, #20
219f8     18 30 62 FD | 	getqx	local10
219fc     01 30 06 F1 | 	add	local10, #1
21a00     04 00 90 FD | 	jmp	#LR__3567
21a04                 | LR__3566
21a04     01 30 06 F6 | 	mov	local10, #1
21a08                 | LR__3567
21a08     18 4E 05 F1 | 	add	fp, #24
21a0c     A7 30 62 FC | 	wrlong	local10, fp
21a10     14 4E 85 F1 | 	sub	fp, #20
21a14     A7 12 02 FB | 	rdlong	arg01, fp
21a18     18 15 02 F6 | 	mov	arg02, local10
21a1c     04 4E 85 F1 | 	sub	fp, #4
21a20     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
21a24     08 4E 05 F1 | 	add	fp, #8
21a28     A7 FA 61 FC | 	wrlong	result1, fp
21a2c     08 4E 85 F1 | 	sub	fp, #8
21a30     00 FA 0D F2 | 	cmp	result1, #0 wz
21a34     38 01 90 5D |  if_ne	jmp	#LR__3572
21a38     18 4E 05 F1 | 	add	fp, #24
21a3c     A7 30 02 FB | 	rdlong	local10, fp
21a40     01 30 8E F1 | 	sub	local10, #1 wz
21a44     A7 30 62 FC | 	wrlong	local10, fp
21a48     18 4E 85 F1 | 	sub	fp, #24
21a4c     20 01 90 AD |  if_e	jmp	#LR__3572
21a50     04 4E 05 F1 | 	add	fp, #4
21a54     A7 30 02 FB | 	rdlong	local10, fp
21a58     18 13 02 F6 | 	mov	arg01, local10
21a5c     14 4E 05 F1 | 	add	fp, #20
21a60     A7 18 02 FB | 	rdlong	arg04, fp
21a64     18 4E 85 F1 | 	sub	fp, #24
21a68     05 18 66 F0 | 	shl	arg04, #5
21a6c     10 30 06 F1 | 	add	local10, #16
21a70     18 15 02 FB | 	rdlong	arg02, local10
21a74     0C 15 82 F1 | 	sub	arg02, arg04
21a78     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
21a7c     08 4E 05 F1 | 	add	fp, #8
21a80     A7 FA 61 FC | 	wrlong	result1, fp
21a84     08 4E 85 F1 | 	sub	fp, #8
21a88     00 FA 0D F2 | 	cmp	result1, #0 wz
21a8c     E0 00 90 5D |  if_ne	jmp	#LR__3571
21a90     04 4E 05 F1 | 	add	fp, #4
21a94     A7 12 02 FB | 	rdlong	arg01, fp
21a98     04 4E 85 F1 | 	sub	fp, #4
21a9c     20 12 06 F1 | 	add	arg01, #32
21aa0     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
21aa4     FD 30 02 F6 | 	mov	local10, result1
21aa8     28 4E 05 F1 | 	add	fp, #40
21aac     A7 30 42 FC | 	wrbyte	local10, fp
21ab0     28 4E 85 F1 | 	sub	fp, #40
21ab4                 | ' 			sum = sum_sfn(dp->fn);
21ab4                 | ' 			do {
21ab4                 | LR__3568
21ab4     0C 4E 05 F1 | 	add	fp, #12
21ab8     A7 12 02 FB | 	rdlong	arg01, fp
21abc     08 4E 85 F1 | 	sub	fp, #8
21ac0     A7 1E 02 FB | 	rdlong	local01, fp
21ac4     04 4E 85 F1 | 	sub	fp, #4
21ac8     18 1E 06 F1 | 	add	local01, #24
21acc     0F 15 02 FB | 	rdlong	arg02, local01
21ad0     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
21ad4     08 4E 05 F1 | 	add	fp, #8
21ad8     A7 FA 61 FC | 	wrlong	result1, fp
21adc     00 FA 4D F2 | 	cmps	result1, #0 wz
21ae0     08 4E 85 F1 | 	sub	fp, #8
21ae4     88 00 90 5D |  if_ne	jmp	#LR__3570
21ae8     0C 4E 05 F1 | 	add	fp, #12
21aec     A7 20 02 FB | 	rdlong	local02, fp
21af0     0C 20 06 F1 | 	add	local02, #12
21af4     10 13 02 FB | 	rdlong	arg01, local02
21af8     08 4E 85 F1 | 	sub	fp, #8
21afc     A7 1E 02 FB | 	rdlong	local01, fp
21b00     1C 1E 06 F1 | 	add	local01, #28
21b04     0F 15 02 FB | 	rdlong	arg02, local01
21b08     14 4E 05 F1 | 	add	fp, #20
21b0c     A7 16 02 FB | 	rdlong	arg03, fp
21b10     10 4E 05 F1 | 	add	fp, #16
21b14     A7 18 C2 FA | 	rdbyte	arg04, fp
21b18     28 4E 85 F1 | 	sub	fp, #40
21b1c     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
21b20     0C 4E 05 F1 | 	add	fp, #12
21b24     A7 30 02 FB | 	rdlong	local10, fp
21b28     03 30 06 F1 | 	add	local10, #3
21b2c     18 03 48 FC | 	wrbyte	#1, local10
21b30     08 4E 85 F1 | 	sub	fp, #8
21b34     A7 12 02 FB | 	rdlong	arg01, fp
21b38     04 4E 85 F1 | 	sub	fp, #4
21b3c     00 14 06 F6 | 	mov	arg02, #0
21b40     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
21b44     08 4E 05 F1 | 	add	fp, #8
21b48     A7 FA 61 FC | 	wrlong	result1, fp
21b4c     00 FA 4D F2 | 	cmps	result1, #0 wz
21b50     08 4E 85 F1 | 	sub	fp, #8
21b54     18 00 90 5D |  if_ne	jmp	#LR__3569
21b58     18 4E 05 F1 | 	add	fp, #24
21b5c     A7 30 02 FB | 	rdlong	local10, fp
21b60     01 30 8E F1 | 	sub	local10, #1 wz
21b64     A7 30 62 FC | 	wrlong	local10, fp
21b68     18 4E 85 F1 | 	sub	fp, #24
21b6c     44 FF 9F 5D |  if_ne	jmp	#LR__3568
21b70                 | LR__3569
21b70                 | LR__3570
21b70                 | LR__3571
21b70                 | LR__3572
21b70     08 4E 05 F1 | 	add	fp, #8
21b74     A7 30 0A FB | 	rdlong	local10, fp wz
21b78     08 4E 85 F1 | 	sub	fp, #8
21b7c     B4 00 90 5D |  if_ne	jmp	#LR__3574
21b80     0C 4E 05 F1 | 	add	fp, #12
21b84     A7 12 02 FB | 	rdlong	arg01, fp
21b88     08 4E 85 F1 | 	sub	fp, #8
21b8c     A7 1E 02 FB | 	rdlong	local01, fp
21b90     04 4E 85 F1 | 	sub	fp, #4
21b94     18 1E 06 F1 | 	add	local01, #24
21b98     0F 15 02 FB | 	rdlong	arg02, local01
21b9c     18 E6 BF FD | 	call	#_fatfs_cc_move_window
21ba0     08 4E 05 F1 | 	add	fp, #8
21ba4     A7 FA 61 FC | 	wrlong	result1, fp
21ba8     08 4E 85 F1 | 	sub	fp, #8
21bac     00 FA 0D F2 | 	cmp	result1, #0 wz
21bb0     80 00 90 5D |  if_ne	jmp	#LR__3573
21bb4     04 4E 05 F1 | 	add	fp, #4
21bb8     A7 20 02 FB | 	rdlong	local02, fp
21bbc     04 4E 85 F1 | 	sub	fp, #4
21bc0     1C 20 06 F1 | 	add	local02, #28
21bc4     10 13 02 FB | 	rdlong	arg01, local02
21bc8     00 14 06 F6 | 	mov	arg02, #0
21bcc     20 16 06 F6 | 	mov	arg03, #32
21bd0     98 00 A0 FD | 	call	#\builtin_bytefill_
21bd4     04 4E 05 F1 | 	add	fp, #4
21bd8     A7 14 02 FB | 	rdlong	arg02, fp
21bdc     0A 1F 02 F6 | 	mov	local01, arg02
21be0     1C 1E 06 F1 | 	add	local01, #28
21be4     0F 13 02 FB | 	rdlong	arg01, local01
21be8     04 4E 85 F1 | 	sub	fp, #4
21bec     20 14 06 F1 | 	add	arg02, #32
21bf0     0B 16 06 F6 | 	mov	arg03, #11
21bf4     D8 6E BF FD | 	call	#__system____builtin_memmove
21bf8     04 4E 05 F1 | 	add	fp, #4
21bfc     A7 2E 02 FB | 	rdlong	local09, fp
21c00     17 31 02 F6 | 	mov	local10, local09
21c04     1C 30 06 F1 | 	add	local10, #28
21c08     18 1F 02 FB | 	rdlong	local01, local10
21c0c     2B 2E 06 F1 | 	add	local09, #43
21c10     17 31 C2 FA | 	rdbyte	local10, local09
21c14     18 30 06 F5 | 	and	local10, #24
21c18     0C 1E 06 F1 | 	add	local01, #12
21c1c     0F 31 42 FC | 	wrbyte	local10, local01
21c20     08 4E 05 F1 | 	add	fp, #8
21c24     A7 30 02 FB | 	rdlong	local10, fp
21c28     0C 4E 85 F1 | 	sub	fp, #12
21c2c     03 30 06 F1 | 	add	local10, #3
21c30     18 03 48 FC | 	wrbyte	#1, local10
21c34                 | LR__3573
21c34                 | LR__3574
21c34                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
21c34                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
21c34                 | ' 
21c34                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
21c34                 | ' 
21c34                 | ' 			fs->wflag = 1;
21c34                 | ' 		}
21c34                 | ' 	}
21c34                 | ' 
21c34                 | ' 	return res;
21c34     08 4E 05 F1 | 	add	fp, #8
21c38     A7 FA 01 FB | 	rdlong	result1, fp
21c3c     08 4E 85 F1 | 	sub	fp, #8
21c40                 | LR__3575
21c40     A7 F0 03 F6 | 	mov	ptra, fp
21c44     B2 00 A0 FD | 	call	#popregs_
21c48                 | _fatfs_cc_dir_register_ret
21c48     2D 00 64 FD | 	ret
21c4c                 | 
21c4c                 | _fatfs_cc_dir_remove
21c4c     05 4A 05 F6 | 	mov	COUNT_, #5
21c50     A8 00 A0 FD | 	call	#pushregs_
21c54     09 1F 02 F6 | 	mov	local01, arg01
21c58     0F 21 02 FB | 	rdlong	local02, local01
21c5c     10 1E 06 F1 | 	add	local01, #16
21c60     0F 23 02 FB | 	rdlong	local03, local01
21c64     1C 1E 06 F1 | 	add	local01, #28
21c68     0F 15 02 FB | 	rdlong	arg02, local01
21c6c     2C 1E 86 F1 | 	sub	local01, #44
21c70     FF FF 7F FF 
21c74     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
21c78     00 24 06 A6 |  if_e	mov	local04, #0
21c7c     18 00 90 AD |  if_e	jmp	#LR__3580
21c80     0F 13 02 F6 | 	mov	arg01, local01
21c84     2C 1E 06 F1 | 	add	local01, #44
21c88     0F 15 02 FB | 	rdlong	arg02, local01
21c8c     2C 1E 86 F1 | 	sub	local01, #44
21c90     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
21c94     FD 24 02 F6 | 	mov	local04, result1
21c98                 | LR__3580
21c98     12 27 0A F6 | 	mov	local05, local04 wz
21c9c     64 00 90 5D |  if_ne	jmp	#LR__3583
21ca0                 | ' 		do {
21ca0                 | LR__3581
21ca0     18 1E 06 F1 | 	add	local01, #24
21ca4     0F 15 02 FB | 	rdlong	arg02, local01
21ca8     18 1E 86 F1 | 	sub	local01, #24
21cac     10 13 02 F6 | 	mov	arg01, local02
21cb0     04 E5 BF FD | 	call	#_fatfs_cc_move_window
21cb4     FD 26 0A F6 | 	mov	local05, result1 wz
21cb8     40 00 90 5D |  if_ne	jmp	#LR__3582
21cbc     1C 1E 06 F1 | 	add	local01, #28
21cc0     0F 25 02 FB | 	rdlong	local04, local01
21cc4     12 CB 49 FC | 	wrbyte	#229, local04
21cc8     03 20 06 F1 | 	add	local02, #3
21ccc     10 03 48 FC | 	wrbyte	#1, local02
21cd0     03 20 86 F1 | 	sub	local02, #3
21cd4     0C 1E 86 F1 | 	sub	local01, #12
21cd8     0F 25 02 FB | 	rdlong	local04, local01
21cdc     10 1E 86 F1 | 	sub	local01, #16
21ce0     11 25 12 F2 | 	cmp	local04, local03 wc
21ce4     14 00 90 3D |  if_ae	jmp	#LR__3582
21ce8     0F 13 02 F6 | 	mov	arg01, local01
21cec     00 14 06 F6 | 	mov	arg02, #0
21cf0     90 EF BF FD | 	call	#_fatfs_cc_dir_next
21cf4     FD 26 0A F6 | 	mov	local05, result1 wz
21cf8     A4 FF 9F AD |  if_e	jmp	#LR__3581
21cfc                 | LR__3582
21cfc     04 26 0E F2 | 	cmp	local05, #4 wz
21d00     02 26 06 A6 |  if_e	mov	local05, #2
21d04                 | LR__3583
21d04                 | ' 	}
21d04                 | ' #line 2590 "ff.c"
21d04                 | ' 	return res;
21d04     13 FB 01 F6 | 	mov	result1, local05
21d08     A7 F0 03 F6 | 	mov	ptra, fp
21d0c     B2 00 A0 FD | 	call	#popregs_
21d10                 | _fatfs_cc_dir_remove_ret
21d10     2D 00 64 FD | 	ret
21d14                 | 
21d14                 | _fatfs_cc_get_fileinfo
21d14     0F 4A 05 F6 | 	mov	COUNT_, #15
21d18     A8 00 A0 FD | 	call	#pushregs_
21d1c     09 1F 02 F6 | 	mov	local01, arg01
21d20     0A 21 02 F6 | 	mov	local02, arg02
21d24     0F 23 02 FB | 	rdlong	local03, local01
21d28     1C 20 06 F1 | 	add	local02, #28
21d2c     10 01 48 FC | 	wrbyte	#0, local02
21d30     1C 20 86 F1 | 	sub	local02, #28
21d34     18 1E 06 F1 | 	add	local01, #24
21d38     0F 25 0A FB | 	rdlong	local04, local01 wz
21d3c     18 1E 86 F1 | 	sub	local01, #24
21d40     90 03 90 AD |  if_e	jmp	#LR__3604
21d44     2C 1E 06 F1 | 	add	local01, #44
21d48     0F 25 02 FB | 	rdlong	local04, local01
21d4c     2C 1E 86 F1 | 	sub	local01, #44
21d50     FF FF 7F FF 
21d54     FF 25 0E F2 | 	cmp	local04, ##-1 wz
21d58     D8 00 90 AD |  if_e	jmp	#LR__3593
21d5c     00 26 06 F6 | 	mov	local05, #0
21d60     00 28 06 F6 | 	mov	local06, #0
21d64     00 2A 06 F6 | 	mov	local07, #0
21d68                 | ' 			si = di = 0;
21d68                 | ' 			hs = 0;
21d68                 | ' 			while (fs->lfnbuf[si] != 0) {
21d68                 | LR__3590
21d68     0C 22 06 F1 | 	add	local03, #12
21d6c     11 25 02 FB | 	rdlong	local04, local03
21d70     0C 22 86 F1 | 	sub	local03, #12
21d74     14 2D 02 F6 | 	mov	local08, local06
21d78     01 2C 66 F0 | 	shl	local08, #1
21d7c     12 2D 02 F1 | 	add	local08, local04
21d80     16 25 EA FA | 	rdword	local04, local08 wz
21d84     90 00 90 AD |  if_e	jmp	#LR__3592
21d88     0C 22 06 F1 | 	add	local03, #12
21d8c     11 2F 02 FB | 	rdlong	local09, local03
21d90     0C 22 86 F1 | 	sub	local03, #12
21d94     14 31 02 F6 | 	mov	local10, local06
21d98     01 30 66 F0 | 	shl	local10, #1
21d9c     17 31 02 F1 | 	add	local10, local09
21da0     18 33 E2 FA | 	rdword	local11, local10
21da4     15 25 02 F6 | 	mov	local04, local07
21da8     0F 24 4E F7 | 	zerox	local04, #15 wz
21dac     01 28 06 F1 | 	add	local06, #1
21db0     24 00 90 5D |  if_ne	jmp	#LR__3591
21db4     19 35 32 F9 | 	getword	local12, local11, #0
21db8     6C 00 00 FF 
21dbc     00 34 16 F2 | 	cmp	local12, ##55296 wc
21dc0     14 00 90 CD |  if_b	jmp	#LR__3591
21dc4     19 37 32 F9 | 	getword	local13, local11, #0
21dc8     70 00 00 FF 
21dcc     00 36 16 F2 | 	cmp	local13, ##57344 wc
21dd0     19 2B 02 C6 |  if_b	mov	local07, local11
21dd4                 | ' 					hs = wc; continue;
21dd4     90 FF 9F CD |  if_b	jmp	#LR__3590
21dd8                 | LR__3591
21dd8     15 13 32 F9 | 	getword	arg01, local07, #0
21ddc     10 12 66 F0 | 	shl	arg01, #16
21de0     19 33 32 F9 | 	getword	local11, local11, #0
21de4     19 13 42 F5 | 	or	arg01, local11
21de8     13 15 02 F6 | 	mov	arg02, local05
21dec     1C 20 06 F1 | 	add	local02, #28
21df0     10 15 02 F1 | 	add	arg02, local02
21df4     FF 16 06 F6 | 	mov	arg03, #255
21df8     13 17 82 F1 | 	sub	arg03, local05
21dfc     1C 20 86 F1 | 	sub	local02, #28
21e00     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
21e04     FD 38 0A F6 | 	mov	local14, result1 wz
21e08     00 26 06 A6 |  if_e	mov	local05, #0
21e0c     1C 27 02 51 |  if_ne	add	local05, local14
21e10     00 2A 06 56 |  if_ne	mov	local07, #0
21e14     50 FF 9F 5D |  if_ne	jmp	#LR__3590
21e18                 | LR__3592
21e18     15 25 02 F6 | 	mov	local04, local07
21e1c     0F 24 4E F7 | 	zerox	local04, #15 wz
21e20     00 26 06 56 |  if_ne	mov	local05, #0
21e24     1C 20 06 F1 | 	add	local02, #28
21e28     10 27 02 F1 | 	add	local05, local02
21e2c     13 01 48 FC | 	wrbyte	#0, local05
21e30     1C 20 86 F1 | 	sub	local02, #28
21e34                 | LR__3593
21e34     00 26 06 F6 | 	mov	local05, #0
21e38     00 28 06 F6 | 	mov	local06, #0
21e3c                 | ' 			fno->fname[di] = 0;
21e3c                 | ' 		}
21e3c                 | ' 	}
21e3c                 | ' 
21e3c                 | ' 	si = di = 0;
21e3c                 | ' 	while (si < 11) {
21e3c                 | LR__3594
21e3c     0B 28 16 F2 | 	cmp	local06, #11 wc
21e40     20 01 90 3D |  if_ae	jmp	#LR__3597
21e44     1C 1E 06 F1 | 	add	local01, #28
21e48     0F 2F 02 FB | 	rdlong	local09, local01
21e4c     1C 1E 86 F1 | 	sub	local01, #28
21e50     14 31 02 F6 | 	mov	local10, local06
21e54     17 31 02 F1 | 	add	local10, local09
21e58     18 33 C2 FA | 	rdbyte	local11, local10
21e5c     19 25 32 F9 | 	getword	local04, local11, #0
21e60     20 24 0E F2 | 	cmp	local04, #32 wz
21e64     01 28 06 F1 | 	add	local06, #1
21e68     D0 FF 9F AD |  if_e	jmp	#LR__3594
21e6c     19 25 32 F9 | 	getword	local04, local11, #0
21e70     05 24 0E F2 | 	cmp	local04, #5 wz
21e74     E5 32 06 A6 |  if_e	mov	local11, #229
21e78     09 28 0E F2 | 	cmp	local06, #9 wz
21e7c     20 00 90 5D |  if_ne	jmp	#LR__3595
21e80     0C 26 16 F2 | 	cmp	local05, #12 wc
21e84     18 00 90 3D |  if_ae	jmp	#LR__3595
21e88     13 37 02 F6 | 	mov	local13, local05
21e8c     0C 20 06 F1 | 	add	local02, #12
21e90     10 37 02 F1 | 	add	local13, local02
21e94     1B 5D 48 FC | 	wrbyte	#46, local13
21e98     01 26 06 F1 | 	add	local05, #1
21e9c     0C 20 86 F1 | 	sub	local02, #12
21ea0                 | LR__3595
21ea0     19 13 32 F9 | 	getword	arg01, local11, #0
21ea4     07 12 4E F7 | 	zerox	arg01, #7 wz
21ea8     00 FA 05 56 |  if_ne	mov	result1, #0
21eac                 | ' 
21eac                 | ' 	return 0;
21eac     00 FA 05 A6 |  if_e	mov	result1, #0
21eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
21eb4     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
21eb8     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
21ebc     50 00 90 AD |  if_e	jmp	#LR__3596
21ec0     1C 1E 06 F1 | 	add	local01, #28
21ec4     0F 31 02 FB | 	rdlong	local10, local01
21ec8     1C 1E 86 F1 | 	sub	local01, #28
21ecc     14 2D 02 F6 | 	mov	local08, local06
21ed0     18 2D 02 F1 | 	add	local08, local10
21ed4     16 13 CA FA | 	rdbyte	arg01, local08 wz
21ed8     00 FA 05 56 |  if_ne	mov	result1, #0
21edc                 | ' 
21edc                 | ' 	return 0;
21edc     00 FA 05 A6 |  if_e	mov	result1, #0
21ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
21ee4     28 00 90 AD |  if_e	jmp	#LR__3596
21ee8     19 33 32 F9 | 	getword	local11, local11, #0
21eec     08 32 66 F0 | 	shl	local11, #8
21ef0     1C 1E 06 F1 | 	add	local01, #28
21ef4     0F 39 02 FB | 	rdlong	local14, local01
21ef8     1C 1E 86 F1 | 	sub	local01, #28
21efc     14 2F 02 F6 | 	mov	local09, local06
21f00     1C 2F 02 F1 | 	add	local09, local14
21f04     17 35 C2 FA | 	rdbyte	local12, local09
21f08     1A 33 42 F5 | 	or	local11, local12
21f0c     01 28 06 F1 | 	add	local06, #1
21f10                 | LR__3596
21f10     19 13 02 F6 | 	mov	arg01, local11
21f14     01 00 00 FF 
21f18     52 15 06 F6 | 	mov	arg02, ##850
21f1c     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
21f20     FD 32 02 F6 | 	mov	local11, result1
21f24     19 25 02 F6 | 	mov	local04, local11
21f28     0F 24 4E F7 | 	zerox	local04, #15 wz
21f2c     00 26 06 A6 |  if_e	mov	local05, #0
21f30     30 00 90 AD |  if_e	jmp	#LR__3597
21f34     19 13 32 F9 | 	getword	arg01, local11, #0
21f38     13 15 02 F6 | 	mov	arg02, local05
21f3c     0C 20 06 F1 | 	add	local02, #12
21f40     10 15 02 F1 | 	add	arg02, local02
21f44     0C 16 06 F6 | 	mov	arg03, #12
21f48     13 17 82 F1 | 	sub	arg03, local05
21f4c     0C 20 86 F1 | 	sub	local02, #12
21f50     EC DF BF FD | 	call	#_fatfs_cc_put_utf
21f54     FD 38 0A F6 | 	mov	local14, result1 wz
21f58     00 26 06 A6 |  if_e	mov	local05, #0
21f5c     1C 27 02 51 |  if_ne	add	local05, local14
21f60     D8 FE 9F 5D |  if_ne	jmp	#LR__3594
21f64                 | LR__3597
21f64     13 25 02 F6 | 	mov	local04, local05
21f68     0C 20 06 F1 | 	add	local02, #12
21f6c     10 25 02 F1 | 	add	local04, local02
21f70     12 01 48 FC | 	wrbyte	#0, local04
21f74     10 20 06 F1 | 	add	local02, #16
21f78     10 25 CA FA | 	rdbyte	local04, local02 wz
21f7c     1C 20 86 F1 | 	sub	local02, #28
21f80     F8 00 90 5D |  if_ne	jmp	#LR__3603
21f84     00 26 0E F2 | 	cmp	local05, #0 wz
21f88     1C 00 90 5D |  if_ne	jmp	#LR__3598
21f8c     13 37 02 F6 | 	mov	local13, local05
21f90     1C 20 06 F1 | 	add	local02, #28
21f94     10 37 02 F1 | 	add	local13, local02
21f98     1B 7F 48 FC | 	wrbyte	#63, local13
21f9c     01 26 06 F1 | 	add	local05, #1
21fa0     1C 20 86 F1 | 	sub	local02, #28
21fa4     A4 00 90 FD | 	jmp	#LR__3602
21fa8                 | LR__3598
21fa8                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
21fa8     00 26 06 F6 | 	mov	local05, #0
21fac     00 28 06 F6 | 	mov	local06, #0
21fb0     08 3A 06 F6 | 	mov	local15, #8
21fb4                 | LR__3599
21fb4     14 25 02 F6 | 	mov	local04, local06
21fb8     0C 20 06 F1 | 	add	local02, #12
21fbc     10 25 02 F1 | 	add	local04, local02
21fc0     12 37 CA FA | 	rdbyte	local13, local04 wz
21fc4     0C 20 86 F1 | 	sub	local02, #12
21fc8     80 00 90 AD |  if_e	jmp	#LR__3601
21fcc     14 2D 02 F6 | 	mov	local08, local06
21fd0     0C 20 06 F1 | 	add	local02, #12
21fd4     10 2D 02 F1 | 	add	local08, local02
21fd8     16 33 C2 FA | 	rdbyte	local11, local08
21fdc     19 39 32 F9 | 	getword	local14, local11, #0
21fe0     2E 38 0E F2 | 	cmp	local14, #46 wz
21fe4     0C 20 86 F1 | 	sub	local02, #12
21fe8     10 3A 06 A6 |  if_e	mov	local15, #16
21fec     19 39 32 F9 | 	getword	local14, local11, #0
21ff0     41 38 16 F2 | 	cmp	local14, #65 wc
21ff4     30 00 90 CD |  if_b	jmp	#LR__3600
21ff8     19 2D 32 F9 | 	getword	local08, local11, #0
21ffc     5B 2C 16 F2 | 	cmp	local08, #91 wc
22000     24 00 90 3D |  if_ae	jmp	#LR__3600
22004     1C 1E 06 F1 | 	add	local01, #28
22008     0F 2F 02 FB | 	rdlong	local09, local01
2200c     1C 1E 86 F1 | 	sub	local01, #28
22010     0C 2E 06 F1 | 	add	local09, #12
22014     17 31 C2 FA | 	rdbyte	local10, local09
22018     1D 39 E2 F8 | 	getbyte	local14, local15, #0
2201c     1C 31 CA F7 | 	test	local10, local14 wz
22020     19 33 32 59 |  if_ne	getword	local11, local11, #0
22024     20 32 06 51 |  if_ne	add	local11, #32
22028                 | LR__3600
22028     13 39 02 F6 | 	mov	local14, local05
2202c     1C 20 06 F1 | 	add	local02, #28
22030     10 39 02 F1 | 	add	local14, local02
22034     19 33 32 F9 | 	getword	local11, local11, #0
22038     1C 33 42 FC | 	wrbyte	local11, local14
2203c     01 28 06 F1 | 	add	local06, #1
22040     01 26 06 F1 | 	add	local05, #1
22044     1C 20 86 F1 | 	sub	local02, #28
22048     68 FF 9F FD | 	jmp	#LR__3599
2204c                 | LR__3601
2204c                 | LR__3602
2204c     1C 20 06 F1 | 	add	local02, #28
22050     10 27 02 F1 | 	add	local05, local02
22054     13 01 48 FC | 	wrbyte	#0, local05
22058     1C 1E 06 F1 | 	add	local01, #28
2205c     0F 25 02 FB | 	rdlong	local04, local01
22060     1C 1E 86 F1 | 	sub	local01, #28
22064     0C 24 06 F1 | 	add	local04, #12
22068     12 37 CA FA | 	rdbyte	local13, local04 wz
2206c     1C 20 86 F1 | 	sub	local02, #28
22070     0C 20 06 A1 |  if_e	add	local02, #12
22074     10 01 48 AC |  if_e	wrbyte	#0, local02
22078     0C 20 86 A1 |  if_e	sub	local02, #12
2207c                 | LR__3603
2207c     1C 1E 06 F1 | 	add	local01, #28
22080     0F 35 02 FB | 	rdlong	local12, local01
22084     0B 34 06 F1 | 	add	local12, #11
22088     1A 25 C2 FA | 	rdbyte	local04, local12
2208c     3F 24 06 F5 | 	and	local04, #63
22090     08 20 06 F1 | 	add	local02, #8
22094     10 25 42 FC | 	wrbyte	local04, local02
22098     08 20 86 F1 | 	sub	local02, #8
2209c     0F 13 02 FB | 	rdlong	arg01, local01
220a0     1C 12 06 F1 | 	add	arg01, #28
220a4                 | ' {
220a4                 | ' 
220a4                 | ' 	return *((DWORD*)ptr);
220a4     09 FB 01 FB | 	rdlong	result1, arg01
220a8     10 FB 61 FC | 	wrlong	result1, local02
220ac     0F 13 02 FB | 	rdlong	arg01, local01
220b0     16 12 06 F1 | 	add	arg01, #22
220b4                 | ' {
220b4                 | ' 
220b4                 | ' 	return *((WORD*)ptr);
220b4     09 FB E1 FA | 	rdword	result1, arg01
220b8     06 20 06 F1 | 	add	local02, #6
220bc     10 FB 51 FC | 	wrword	result1, local02
220c0     0F 13 02 FB | 	rdlong	arg01, local01
220c4     18 12 06 F1 | 	add	arg01, #24
220c8                 | ' {
220c8                 | ' 
220c8                 | ' 	return *((WORD*)ptr);
220c8     09 FB E1 FA | 	rdword	result1, arg01
220cc     02 20 86 F1 | 	sub	local02, #2
220d0     10 FB 51 FC | 	wrword	result1, local02
220d4                 | LR__3604
220d4     A7 F0 03 F6 | 	mov	ptra, fp
220d8     B2 00 A0 FD | 	call	#popregs_
220dc                 | _fatfs_cc_get_fileinfo_ret
220dc     2D 00 64 FD | 	ret
220e0                 | 
220e0                 | _fatfs_cc_create_name
220e0     0D 4A 05 F6 | 	mov	COUNT_, #13
220e4     A8 00 A0 FD | 	call	#pushregs_
220e8     34 F0 07 F1 | 	add	ptra, #52
220ec     04 4E 05 F1 | 	add	fp, #4
220f0     A7 12 62 FC | 	wrlong	arg01, fp
220f4     04 4E 05 F1 | 	add	fp, #4
220f8     A7 14 62 FC | 	wrlong	arg02, fp
220fc     0A FB 01 FB | 	rdlong	result1, arg02
22100     28 4E 05 F1 | 	add	fp, #40
22104     A7 FA 61 FC | 	wrlong	result1, fp
22108     2C 4E 85 F1 | 	sub	fp, #44
2210c     A7 FA 01 FB | 	rdlong	result1, fp
22110     FD 1E 02 FB | 	rdlong	local01, result1
22114     0C 1E 06 F1 | 	add	local01, #12
22118     0F 21 02 FB | 	rdlong	local02, local01
2211c     14 4E 05 F1 | 	add	fp, #20
22120     A7 20 62 FC | 	wrlong	local02, fp
22124     14 4E 05 F1 | 	add	fp, #20
22128     A7 00 68 FC | 	wrlong	#0, fp
2212c     2C 4E 85 F1 | 	sub	fp, #44
22130                 | ' 
22130                 | ' 
22130                 | ' 
22130                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
22130                 | ' 	for (;;) {
22130                 | LR__3610
22130     30 4E 05 F1 | 	add	fp, #48
22134     A7 12 02 F6 | 	mov	arg01, fp
22138     30 4E 85 F1 | 	sub	fp, #48
2213c     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
22140     1C 4E 05 F1 | 	add	fp, #28
22144     A7 FA 61 FC | 	wrlong	result1, fp
22148     1C 4E 85 F1 | 	sub	fp, #28
2214c     FF FF 7F FF 
22150     FF FB 0D F2 | 	cmp	result1, ##-1 wz
22154     06 FA 05 A6 |  if_e	mov	result1, #6
22158     74 08 90 AD |  if_e	jmp	#LR__3650
2215c     1C 4E 05 F1 | 	add	fp, #28
22160     A7 1E 02 FB | 	rdlong	local01, fp
22164     1C 4E 85 F1 | 	sub	fp, #28
22168     80 00 00 FF 
2216c     00 1E 16 F2 | 	cmp	local01, ##65536 wc
22170     3C 00 90 CD |  if_b	jmp	#LR__3611
22174     18 4E 05 F1 | 	add	fp, #24
22178     A7 22 02 FB | 	rdlong	local03, fp
2217c     14 4E 05 F1 | 	add	fp, #20
22180     A7 1E 02 FB | 	rdlong	local01, fp
22184     0F 25 02 F6 | 	mov	local04, local01
22188     01 24 06 F1 | 	add	local04, #1
2218c     A7 24 62 FC | 	wrlong	local04, fp
22190     01 1E 66 F0 | 	shl	local01, #1
22194     11 1F 02 F1 | 	add	local01, local03
22198     10 4E 85 F1 | 	sub	fp, #16
2219c     A7 26 02 FB | 	rdlong	local05, fp
221a0     1C 4E 85 F1 | 	sub	fp, #28
221a4     13 29 02 F6 | 	mov	local06, local05
221a8     10 28 46 F0 | 	shr	local06, #16
221ac     0F 29 52 FC | 	wrword	local06, local01
221b0                 | LR__3611
221b0     1C 4E 05 F1 | 	add	fp, #28
221b4     A7 1E 02 FB | 	rdlong	local01, fp
221b8     08 4E 85 F1 | 	sub	fp, #8
221bc     A7 1E 52 FC | 	wrword	local01, fp
221c0     A7 1E E2 FA | 	rdword	local01, fp
221c4     14 4E 85 F1 | 	sub	fp, #20
221c8     20 1E 16 F2 | 	cmp	local01, #32 wc
221cc     B0 00 90 CD |  if_b	jmp	#LR__3613
221d0     14 4E 05 F1 | 	add	fp, #20
221d4     A7 1E E2 FA | 	rdword	local01, fp
221d8     14 4E 85 F1 | 	sub	fp, #20
221dc     2F 1E 0E F2 | 	cmp	local01, #47 wz
221e0     14 4E 05 51 |  if_ne	add	fp, #20
221e4     A7 24 E2 5A |  if_ne	rdword	local04, fp
221e8     14 4E 85 51 |  if_ne	sub	fp, #20
221ec     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
221f0     8C 00 90 AD |  if_e	jmp	#LR__3613
221f4     14 4E 05 F1 | 	add	fp, #20
221f8     A7 12 E2 FA | 	rdword	arg01, fp
221fc     14 4E 85 F1 | 	sub	fp, #20
22200     80 12 16 F2 | 	cmp	arg01, #128 wc
22204     24 00 90 3D |  if_ae	jmp	#LR__3612
22208     40 01 00 FF 
2220c     30 13 06 F6 | 	mov	arg01, ##@LR__4272
22210     14 4E 05 F1 | 	add	fp, #20
22214     A7 14 E2 FA | 	rdword	arg02, fp
22218     14 4E 85 F1 | 	sub	fp, #20
2221c     FC D0 BF FD | 	call	#_fatfs_cc_strchr
22220     00 FA 0D F2 | 	cmp	result1, #0 wz
22224     06 FA 05 56 |  if_ne	mov	result1, #6
22228     A4 07 90 5D |  if_ne	jmp	#LR__3650
2222c                 | LR__3612
2222c     2C 4E 05 F1 | 	add	fp, #44
22230     A7 28 02 FB | 	rdlong	local06, fp
22234     2C 4E 85 F1 | 	sub	fp, #44
22238     FF 28 16 F2 | 	cmp	local06, #255 wc
2223c     06 FA 05 36 |  if_ae	mov	result1, #6
22240     8C 07 90 3D |  if_ae	jmp	#LR__3650
22244     18 4E 05 F1 | 	add	fp, #24
22248     A7 22 02 FB | 	rdlong	local03, fp
2224c     14 4E 05 F1 | 	add	fp, #20
22250     A7 20 02 FB | 	rdlong	local02, fp
22254     10 25 02 F6 | 	mov	local04, local02
22258     01 24 06 F1 | 	add	local04, #1
2225c     A7 24 62 FC | 	wrlong	local04, fp
22260     10 1F 02 F6 | 	mov	local01, local02
22264     01 1E 66 F0 | 	shl	local01, #1
22268     11 1F 02 F1 | 	add	local01, local03
2226c     18 4E 85 F1 | 	sub	fp, #24
22270     A7 28 E2 FA | 	rdword	local06, fp
22274     14 4E 85 F1 | 	sub	fp, #20
22278     0F 29 52 FC | 	wrword	local06, local01
2227c     B0 FE 9F FD | 	jmp	#LR__3610
22280                 | LR__3613
22280     14 4E 05 F1 | 	add	fp, #20
22284     A7 2A E2 FA | 	rdword	local07, fp
22288     14 4E 85 F1 | 	sub	fp, #20
2228c     20 2A 16 F2 | 	cmp	local07, #32 wc
22290     10 4E 05 C1 |  if_b	add	fp, #16
22294     A7 08 48 CC |  if_b	wrbyte	#4, fp
22298     10 4E 85 C1 |  if_b	sub	fp, #16
2229c     74 00 90 CD |  if_b	jmp	#LR__3618
222a0     97 24 48 FB | 	callpa	#(@LR__3616-@LR__3614)>>2,fcache_load_ptr_
222a4                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
222a4                 | LR__3614
222a4     30 4E 05 F1 | 	add	fp, #48
222a8     A7 24 02 FB | 	rdlong	local04, fp
222ac     30 4E 85 F1 | 	sub	fp, #48
222b0     12 2B C2 FA | 	rdbyte	local07, local04
222b4     2F 2A 0E F2 | 	cmp	local07, #47 wz
222b8     18 00 90 AD |  if_e	jmp	#LR__3615
222bc     30 4E 05 F1 | 	add	fp, #48
222c0     A7 24 02 FB | 	rdlong	local04, fp
222c4     30 4E 85 F1 | 	sub	fp, #48
222c8     12 21 C2 FA | 	rdbyte	local02, local04
222cc     5C 20 0E F2 | 	cmp	local02, #92 wz
222d0     18 00 90 5D |  if_ne	jmp	#LR__3617
222d4                 | LR__3615
222d4     30 4E 05 F1 | 	add	fp, #48
222d8     A7 1E 02 FB | 	rdlong	local01, fp
222dc     01 1E 06 F1 | 	add	local01, #1
222e0     A7 1E 62 FC | 	wrlong	local01, fp
222e4     30 4E 85 F1 | 	sub	fp, #48
222e8     B8 FF 9F FD | 	jmp	#LR__3614
222ec                 | LR__3616
222ec                 | LR__3617
222ec     10 4E 05 F1 | 	add	fp, #16
222f0     A7 00 48 FC | 	wrbyte	#0, fp
222f4     20 4E 05 F1 | 	add	fp, #32
222f8     A7 28 02 FB | 	rdlong	local06, fp
222fc     30 4E 85 F1 | 	sub	fp, #48
22300     14 2B C2 FA | 	rdbyte	local07, local06
22304     20 2A 16 F2 | 	cmp	local07, #32 wc
22308     10 4E 05 C1 |  if_b	add	fp, #16
2230c     A7 08 48 CC |  if_b	wrbyte	#4, fp
22310     10 4E 85 C1 |  if_b	sub	fp, #16
22314                 | LR__3618
22314     08 4E 05 F1 | 	add	fp, #8
22318     A7 2A 02 FB | 	rdlong	local07, fp
2231c     28 4E 05 F1 | 	add	fp, #40
22320     A7 1E 02 FB | 	rdlong	local01, fp
22324     30 4E 85 F1 | 	sub	fp, #48
22328     15 1F 62 FC | 	wrlong	local01, local07
2232c     97 38 48 FB | 	callpa	#(@LR__3620-@LR__3619)>>2,fcache_load_ptr_
22330                 | ' 	}
22330                 | ' 	*path = p;
22330                 | ' #line 2862 "ff.c"
22330                 | ' 	while (di) {
22330                 | LR__3619
22330     2C 4E 05 F1 | 	add	fp, #44
22334     A7 2A 0A FB | 	rdlong	local07, fp wz
22338     2C 4E 85 F1 | 	sub	fp, #44
2233c     60 00 90 AD |  if_e	jmp	#LR__3621
22340     18 4E 05 F1 | 	add	fp, #24
22344     A7 28 02 FB | 	rdlong	local06, fp
22348     14 4E 05 F1 | 	add	fp, #20
2234c     A7 24 02 FB | 	rdlong	local04, fp
22350     01 24 86 F1 | 	sub	local04, #1
22354     01 24 66 F0 | 	shl	local04, #1
22358     14 25 02 F1 | 	add	local04, local06
2235c     12 29 E2 FA | 	rdword	local06, local04
22360     18 4E 85 F1 | 	sub	fp, #24
22364     A7 28 52 FC | 	wrword	local06, fp
22368     A7 2A E2 FA | 	rdword	local07, fp
2236c     14 4E 85 F1 | 	sub	fp, #20
22370     20 2A 0E F2 | 	cmp	local07, #32 wz
22374     14 4E 05 51 |  if_ne	add	fp, #20
22378     A7 1E E2 5A |  if_ne	rdword	local01, fp
2237c     14 4E 85 51 |  if_ne	sub	fp, #20
22380     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
22384     18 00 90 5D |  if_ne	jmp	#LR__3621
22388     2C 4E 05 F1 | 	add	fp, #44
2238c     A7 1E 02 FB | 	rdlong	local01, fp
22390     01 1E 86 F1 | 	sub	local01, #1
22394     A7 1E 62 FC | 	wrlong	local01, fp
22398     2C 4E 85 F1 | 	sub	fp, #44
2239c     90 FF 9F FD | 	jmp	#LR__3619
223a0                 | LR__3620
223a0                 | LR__3621
223a0     18 4E 05 F1 | 	add	fp, #24
223a4     A7 2C 02 FB | 	rdlong	local08, fp
223a8     14 4E 05 F1 | 	add	fp, #20
223ac     A7 24 02 FB | 	rdlong	local04, fp
223b0     01 24 66 F0 | 	shl	local04, #1
223b4     16 25 02 F1 | 	add	local04, local08
223b8     12 01 58 FC | 	wrword	#0, local04
223bc     A7 2A 0A FB | 	rdlong	local07, fp wz
223c0     2C 4E 85 F1 | 	sub	fp, #44
223c4     06 FA 05 A6 |  if_e	mov	result1, #6
223c8     04 06 90 AD |  if_e	jmp	#LR__3650
223cc                 | ' 
223cc                 | ' 
223cc                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
223cc     28 4E 05 F1 | 	add	fp, #40
223d0     A7 00 68 FC | 	wrlong	#0, fp
223d4     28 4E 85 F1 | 	sub	fp, #40
223d8     97 22 48 FB | 	callpa	#(@LR__3623-@LR__3622)>>2,fcache_load_ptr_
223dc                 | LR__3622
223dc     18 4E 05 F1 | 	add	fp, #24
223e0     A7 2E 02 FB | 	rdlong	local09, fp
223e4     10 4E 05 F1 | 	add	fp, #16
223e8     A7 30 02 FB | 	rdlong	local10, fp
223ec     28 4E 85 F1 | 	sub	fp, #40
223f0     01 30 66 F0 | 	shl	local10, #1
223f4     17 31 02 F1 | 	add	local10, local09
223f8     18 33 E2 FA | 	rdword	local11, local10
223fc     20 32 0E F2 | 	cmp	local11, #32 wz
22400     1C 00 90 5D |  if_ne	jmp	#LR__3624
22404     28 4E 05 F1 | 	add	fp, #40
22408     A7 34 02 FB | 	rdlong	local12, fp
2240c     1A 27 02 F6 | 	mov	local05, local12
22410     01 26 06 F1 | 	add	local05, #1
22414     A7 26 62 FC | 	wrlong	local05, fp
22418     28 4E 85 F1 | 	sub	fp, #40
2241c     BC FF 9F FD | 	jmp	#LR__3622
22420                 | LR__3623
22420                 | LR__3624
22420     28 4E 05 F1 | 	add	fp, #40
22424     A7 2A 02 FB | 	rdlong	local07, fp
22428     28 4E 85 F1 | 	sub	fp, #40
2242c     01 2A 16 F2 | 	cmp	local07, #1 wc
22430     28 00 90 3D |  if_ae	jmp	#LR__3625
22434     18 4E 05 F1 | 	add	fp, #24
22438     A7 22 02 FB | 	rdlong	local03, fp
2243c     10 4E 05 F1 | 	add	fp, #16
22440     A7 2E 02 FB | 	rdlong	local09, fp
22444     28 4E 85 F1 | 	sub	fp, #40
22448     01 2E 66 F0 | 	shl	local09, #1
2244c     11 2F 02 F1 | 	add	local09, local03
22450     17 1F E2 FA | 	rdword	local01, local09
22454     2E 1E 0E F2 | 	cmp	local01, #46 wz
22458     14 00 90 5D |  if_ne	jmp	#LR__3626
2245c                 | LR__3625
2245c     10 4E 05 F1 | 	add	fp, #16
22460     A7 2A C2 FA | 	rdbyte	local07, fp
22464     03 2A 46 F5 | 	or	local07, #3
22468     A7 2A 42 FC | 	wrbyte	local07, fp
2246c     10 4E 85 F1 | 	sub	fp, #16
22470                 | LR__3626
22470     97 2C 48 FB | 	callpa	#(@LR__3628-@LR__3627)>>2,fcache_load_ptr_
22474                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
22474                 | LR__3627
22474     2C 4E 05 F1 | 	add	fp, #44
22478     A7 2A 02 FB | 	rdlong	local07, fp
2247c     2C 4E 85 F1 | 	sub	fp, #44
22480     01 2A 16 F2 | 	cmp	local07, #1 wc
22484     44 00 90 CD |  if_b	jmp	#LR__3629
22488     18 4E 05 F1 | 	add	fp, #24
2248c     A7 28 02 FB | 	rdlong	local06, fp
22490     14 4E 05 F1 | 	add	fp, #20
22494     A7 22 02 FB | 	rdlong	local03, fp
22498     2C 4E 85 F1 | 	sub	fp, #44
2249c     01 22 86 F1 | 	sub	local03, #1
224a0     01 22 66 F0 | 	shl	local03, #1
224a4     14 23 02 F1 | 	add	local03, local06
224a8     11 1F E2 FA | 	rdword	local01, local03
224ac     2E 1E 0E F2 | 	cmp	local01, #46 wz
224b0     18 00 90 AD |  if_e	jmp	#LR__3629
224b4     2C 4E 05 F1 | 	add	fp, #44
224b8     A7 1E 02 FB | 	rdlong	local01, fp
224bc     01 1E 86 F1 | 	sub	local01, #1
224c0     A7 1E 62 FC | 	wrlong	local01, fp
224c4     2C 4E 85 F1 | 	sub	fp, #44
224c8     A8 FF 9F FD | 	jmp	#LR__3627
224cc                 | LR__3628
224cc                 | LR__3629
224cc     04 4E 05 F1 | 	add	fp, #4
224d0     A7 12 02 FB | 	rdlong	arg01, fp
224d4     04 4E 85 F1 | 	sub	fp, #4
224d8     20 12 06 F1 | 	add	arg01, #32
224dc     20 14 06 F6 | 	mov	arg02, #32
224e0     0B 16 06 F6 | 	mov	arg03, #11
224e4     09 37 02 F6 | 	mov	local13, arg01
224e8     98 00 A0 FD | 	call	#\builtin_bytefill_
224ec     1B FB 01 F6 | 	mov	result1, local13
224f0     0C 4E 05 F1 | 	add	fp, #12
224f4     A7 00 48 FC | 	wrbyte	#0, fp
224f8     A7 2A C2 FA | 	rdbyte	local07, fp
224fc     14 4E 05 F1 | 	add	fp, #20
22500     A7 2A 62 FC | 	wrlong	local07, fp
22504     04 4E 05 F1 | 	add	fp, #4
22508     A7 10 68 FC | 	wrlong	#8, fp
2250c     24 4E 85 F1 | 	sub	fp, #36
22510                 | ' 
22510                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
22510                 | ' 	i = b = 0; ni = 8;
22510                 | ' 	for (;;) {
22510                 | LR__3630
22510     18 4E 05 F1 | 	add	fp, #24
22514     A7 22 02 FB | 	rdlong	local03, fp
22518     10 4E 05 F1 | 	add	fp, #16
2251c     A7 2E 02 FB | 	rdlong	local09, fp
22520     17 25 02 F6 | 	mov	local04, local09
22524     01 24 06 F1 | 	add	local04, #1
22528     A7 24 62 FC | 	wrlong	local04, fp
2252c     01 2E 66 F0 | 	shl	local09, #1
22530     11 2F 02 F1 | 	add	local09, local03
22534     17 29 E2 FA | 	rdword	local06, local09
22538     14 4E 85 F1 | 	sub	fp, #20
2253c     A7 28 52 FC | 	wrword	local06, fp
22540     A7 2A EA FA | 	rdword	local07, fp wz
22544     14 4E 85 F1 | 	sub	fp, #20
22548     74 03 90 AD |  if_e	jmp	#LR__3646
2254c     14 4E 05 F1 | 	add	fp, #20
22550     A7 2A E2 FA | 	rdword	local07, fp
22554     14 4E 85 F1 | 	sub	fp, #20
22558     20 2A 0E F2 | 	cmp	local07, #32 wz
2255c     30 00 90 AD |  if_e	jmp	#LR__3631
22560     14 4E 05 F1 | 	add	fp, #20
22564     A7 1E E2 FA | 	rdword	local01, fp
22568     14 4E 85 F1 | 	sub	fp, #20
2256c     2E 1E 0E F2 | 	cmp	local01, #46 wz
22570     34 00 90 5D |  if_ne	jmp	#LR__3632
22574     28 4E 05 F1 | 	add	fp, #40
22578     A7 24 02 FB | 	rdlong	local04, fp
2257c     04 4E 05 F1 | 	add	fp, #4
22580     A7 30 02 FB | 	rdlong	local10, fp
22584     2C 4E 85 F1 | 	sub	fp, #44
22588     18 25 0A F2 | 	cmp	local04, local10 wz
2258c     18 00 90 AD |  if_e	jmp	#LR__3632
22590                 | LR__3631
22590     10 4E 05 F1 | 	add	fp, #16
22594     A7 2A C2 FA | 	rdbyte	local07, fp
22598     03 2A 46 F5 | 	or	local07, #3
2259c     A7 2A 42 FC | 	wrbyte	local07, fp
225a0     10 4E 85 F1 | 	sub	fp, #16
225a4                 | ' 			cf |=  0x01  |  0x02 ;
225a4                 | ' 			continue;
225a4     68 FF 9F FD | 	jmp	#LR__3630
225a8                 | LR__3632
225a8     20 4E 05 F1 | 	add	fp, #32
225ac     A7 2A 02 FB | 	rdlong	local07, fp
225b0     04 4E 05 F1 | 	add	fp, #4
225b4     A7 1E 02 FB | 	rdlong	local01, fp
225b8     24 4E 85 F1 | 	sub	fp, #36
225bc     0F 2B 12 F2 | 	cmp	local07, local01 wc
225c0     1C 00 90 3D |  if_ae	jmp	#LR__3633
225c4     28 4E 05 F1 | 	add	fp, #40
225c8     A7 2C 02 FB | 	rdlong	local08, fp
225cc     04 4E 05 F1 | 	add	fp, #4
225d0     A7 30 02 FB | 	rdlong	local10, fp
225d4     2C 4E 85 F1 | 	sub	fp, #44
225d8     18 2D 0A F2 | 	cmp	local08, local10 wz
225dc     B0 00 90 5D |  if_ne	jmp	#LR__3635
225e0                 | LR__3633
225e0     24 4E 05 F1 | 	add	fp, #36
225e4     A7 2A 02 FB | 	rdlong	local07, fp
225e8     24 4E 85 F1 | 	sub	fp, #36
225ec     0B 2A 0E F2 | 	cmp	local07, #11 wz
225f0     18 00 90 5D |  if_ne	jmp	#LR__3634
225f4     10 4E 05 F1 | 	add	fp, #16
225f8     A7 2A C2 FA | 	rdbyte	local07, fp
225fc     03 2A 46 F5 | 	or	local07, #3
22600     A7 2A 42 FC | 	wrbyte	local07, fp
22604     10 4E 85 F1 | 	sub	fp, #16
22608                 | ' 				cf |=  0x01  |  0x02 ;
22608                 | ' 				break;
22608     B4 02 90 FD | 	jmp	#LR__3646
2260c                 | LR__3634
2260c     28 4E 05 F1 | 	add	fp, #40
22610     A7 2A 02 FB | 	rdlong	local07, fp
22614     04 4E 05 F1 | 	add	fp, #4
22618     A7 1E 02 FB | 	rdlong	local01, fp
2261c     2C 4E 85 F1 | 	sub	fp, #44
22620     0F 2B 0A F2 | 	cmp	local07, local01 wz
22624     10 4E 05 51 |  if_ne	add	fp, #16
22628     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2262c     03 2A 46 55 |  if_ne	or	local07, #3
22630     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22634     10 4E 85 51 |  if_ne	sub	fp, #16
22638     28 4E 05 F1 | 	add	fp, #40
2263c     A7 2A 02 FB | 	rdlong	local07, fp
22640     04 4E 05 F1 | 	add	fp, #4
22644     A7 20 02 FB | 	rdlong	local02, fp
22648     2C 4E 85 F1 | 	sub	fp, #44
2264c     10 2B 1A F2 | 	cmp	local07, local02 wcz
22650     6C 02 90 1D |  if_a	jmp	#LR__3646
22654     2C 4E 05 F1 | 	add	fp, #44
22658     A7 2A 02 FB | 	rdlong	local07, fp
2265c     04 4E 85 F1 | 	sub	fp, #4
22660     A7 2A 62 FC | 	wrlong	local07, fp
22664     08 4E 85 F1 | 	sub	fp, #8
22668     A7 10 68 FC | 	wrlong	#8, fp
2266c     04 4E 05 F1 | 	add	fp, #4
22670     A7 16 68 FC | 	wrlong	#11, fp
22674     18 4E 85 F1 | 	sub	fp, #24
22678     A7 32 C2 FA | 	rdbyte	local11, fp
2267c     19 2B E2 F8 | 	getbyte	local07, local11, #0
22680     02 2A 66 F0 | 	shl	local07, #2
22684     A7 2A 42 FC | 	wrbyte	local07, fp
22688     0C 4E 85 F1 | 	sub	fp, #12
2268c                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2268c                 | ' 			continue;
2268c     80 FE 9F FD | 	jmp	#LR__3630
22690                 | LR__3635
22690     14 4E 05 F1 | 	add	fp, #20
22694     A7 2A E2 FA | 	rdword	local07, fp
22698     14 4E 85 F1 | 	sub	fp, #20
2269c     80 2A 16 F2 | 	cmp	local07, #128 wc
226a0     6C 00 90 CD |  if_b	jmp	#LR__3637
226a4     10 4E 05 F1 | 	add	fp, #16
226a8     A7 2A C2 FA | 	rdbyte	local07, fp
226ac     02 2A 46 F5 | 	or	local07, #2
226b0     A7 2A 42 FC | 	wrbyte	local07, fp
226b4     04 4E 05 F1 | 	add	fp, #4
226b8     A7 12 E2 FA | 	rdword	arg01, fp
226bc     14 4E 85 F1 | 	sub	fp, #20
226c0     01 00 00 FF 
226c4     52 15 06 F6 | 	mov	arg02, ##850
226c8     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
226cc     14 4E 05 F1 | 	add	fp, #20
226d0     A7 FA 51 FC | 	wrword	result1, fp
226d4     A7 2A E2 FA | 	rdword	local07, fp
226d8     14 4E 85 F1 | 	sub	fp, #20
226dc     80 2A CE F7 | 	test	local07, #128 wz
226e0     2C 00 90 AD |  if_e	jmp	#LR__3636
226e4     14 4E 05 F1 | 	add	fp, #20
226e8     A7 20 E2 FA | 	rdword	local02, fp
226ec     7F 20 06 F5 | 	and	local02, #127
226f0     01 00 00 FF 
226f4     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
226f8     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
226fc     10 2B C2 FA | 	rdbyte	local07, local02
22700     A7 2A 52 FC | 	wrword	local07, fp
22704     14 4E 85 F1 | 	sub	fp, #20
22708     01 00 00 FF 
2270c     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
22710                 | LR__3636
22710                 | LR__3637
22710     14 4E 05 F1 | 	add	fp, #20
22714     A7 2A E2 FA | 	rdword	local07, fp
22718     14 4E 85 F1 | 	sub	fp, #20
2271c     00 2B 16 F2 | 	cmp	local07, #256 wc
22720     88 00 90 CD |  if_b	jmp	#LR__3639
22724     24 4E 05 F1 | 	add	fp, #36
22728     A7 2A 02 FB | 	rdlong	local07, fp
2272c     01 2A 86 F1 | 	sub	local07, #1
22730     04 4E 85 F1 | 	sub	fp, #4
22734     A7 20 02 FB | 	rdlong	local02, fp
22738     20 4E 85 F1 | 	sub	fp, #32
2273c     15 21 12 F2 | 	cmp	local02, local07 wc
22740     2C 00 90 CD |  if_b	jmp	#LR__3638
22744     10 4E 05 F1 | 	add	fp, #16
22748     A7 32 C2 FA | 	rdbyte	local11, fp
2274c     19 2B E2 F8 | 	getbyte	local07, local11, #0
22750     03 2A 46 F5 | 	or	local07, #3
22754     A7 2A 42 FC | 	wrbyte	local07, fp
22758     14 4E 05 F1 | 	add	fp, #20
2275c     A7 2A 02 FB | 	rdlong	local07, fp
22760     04 4E 85 F1 | 	sub	fp, #4
22764     A7 2A 62 FC | 	wrlong	local07, fp
22768     20 4E 85 F1 | 	sub	fp, #32
2276c                 | ' 				cf |=  0x01  |  0x02 ;
2276c                 | ' 				i = ni; continue;
2276c     A0 FD 9F FD | 	jmp	#LR__3630
22770                 | LR__3638
22770     04 4E 05 F1 | 	add	fp, #4
22774     A7 2E 02 FB | 	rdlong	local09, fp
22778     1C 4E 05 F1 | 	add	fp, #28
2277c     A7 30 02 FB | 	rdlong	local10, fp
22780     18 25 02 F6 | 	mov	local04, local10
22784     01 24 06 F1 | 	add	local04, #1
22788     A7 24 62 FC | 	wrlong	local04, fp
2278c     20 2E 06 F1 | 	add	local09, #32
22790     17 31 02 F1 | 	add	local10, local09
22794     0C 4E 85 F1 | 	sub	fp, #12
22798     A7 22 E2 FA | 	rdword	local03, fp
2279c     14 4E 85 F1 | 	sub	fp, #20
227a0     08 22 46 F0 | 	shr	local03, #8
227a4     18 23 42 FC | 	wrbyte	local03, local10
227a8     D4 00 90 FD | 	jmp	#LR__3645
227ac                 | LR__3639
227ac     14 4E 05 F1 | 	add	fp, #20
227b0     A7 2A EA FA | 	rdword	local07, fp wz
227b4     14 4E 85 F1 | 	sub	fp, #20
227b8     20 00 90 AD |  if_e	jmp	#LR__3640
227bc     40 01 00 FF 
227c0     39 13 06 F6 | 	mov	arg01, ##@LR__4273
227c4     14 4E 05 F1 | 	add	fp, #20
227c8     A7 14 E2 FA | 	rdword	arg02, fp
227cc     14 4E 85 F1 | 	sub	fp, #20
227d0     48 CB BF FD | 	call	#_fatfs_cc_strchr
227d4     00 FA 0D F2 | 	cmp	result1, #0 wz
227d8     20 00 90 AD |  if_e	jmp	#LR__3641
227dc                 | LR__3640
227dc     14 4E 05 F1 | 	add	fp, #20
227e0     A7 BE 58 FC | 	wrword	#95, fp
227e4     04 4E 85 F1 | 	sub	fp, #4
227e8     A7 2A C2 FA | 	rdbyte	local07, fp
227ec     03 2A 46 F5 | 	or	local07, #3
227f0     A7 2A 42 FC | 	wrbyte	local07, fp
227f4     10 4E 85 F1 | 	sub	fp, #16
227f8     84 00 90 FD | 	jmp	#LR__3644
227fc                 | LR__3641
227fc     14 4E 05 F1 | 	add	fp, #20
22800     A7 2A E2 FA | 	rdword	local07, fp
22804     14 4E 85 F1 | 	sub	fp, #20
22808     41 2A 16 F2 | 	cmp	local07, #65 wc
2280c     24 00 90 CD |  if_b	jmp	#LR__3642
22810     14 4E 05 F1 | 	add	fp, #20
22814     A7 1E E2 FA | 	rdword	local01, fp
22818     14 4E 85 F1 | 	sub	fp, #20
2281c     5B 1E 16 F2 | 	cmp	local01, #91 wc
22820     0C 4E 05 C1 |  if_b	add	fp, #12
22824     A7 2A C2 CA |  if_b	rdbyte	local07, fp
22828     02 2A 46 C5 |  if_b	or	local07, #2
2282c     A7 2A 42 CC |  if_b	wrbyte	local07, fp
22830     0C 4E 85 C1 |  if_b	sub	fp, #12
22834                 | LR__3642
22834     14 4E 05 F1 | 	add	fp, #20
22838     A7 2A E2 FA | 	rdword	local07, fp
2283c     14 4E 85 F1 | 	sub	fp, #20
22840     61 2A 16 F2 | 	cmp	local07, #97 wc
22844     38 00 90 CD |  if_b	jmp	#LR__3643
22848     14 4E 05 F1 | 	add	fp, #20
2284c     A7 1E E2 FA | 	rdword	local01, fp
22850     14 4E 85 F1 | 	sub	fp, #20
22854     7B 1E 16 F2 | 	cmp	local01, #123 wc
22858     24 00 90 3D |  if_ae	jmp	#LR__3643
2285c     0C 4E 05 F1 | 	add	fp, #12
22860     A7 2A C2 FA | 	rdbyte	local07, fp
22864     01 2A 46 F5 | 	or	local07, #1
22868     A7 2A 42 FC | 	wrbyte	local07, fp
2286c     08 4E 05 F1 | 	add	fp, #8
22870     A7 2A E2 FA | 	rdword	local07, fp
22874     20 2A 86 F1 | 	sub	local07, #32
22878     A7 2A 52 FC | 	wrword	local07, fp
2287c     14 4E 85 F1 | 	sub	fp, #20
22880                 | LR__3643
22880                 | LR__3644
22880                 | LR__3645
22880     04 4E 05 F1 | 	add	fp, #4
22884     A7 32 02 FB | 	rdlong	local11, fp
22888     19 2F 02 F6 | 	mov	local09, local11
2288c     1C 4E 05 F1 | 	add	fp, #28
22890     A7 20 02 FB | 	rdlong	local02, fp
22894     10 25 02 F6 | 	mov	local04, local02
22898     01 24 06 F1 | 	add	local04, #1
2289c     A7 24 62 FC | 	wrlong	local04, fp
228a0     10 31 02 F6 | 	mov	local10, local02
228a4     20 2E 06 F1 | 	add	local09, #32
228a8     17 31 02 F1 | 	add	local10, local09
228ac     0C 4E 85 F1 | 	sub	fp, #12
228b0     A7 22 E2 FA | 	rdword	local03, fp
228b4     14 4E 85 F1 | 	sub	fp, #20
228b8     18 23 42 FC | 	wrbyte	local03, local10
228bc     50 FC 9F FD | 	jmp	#LR__3630
228c0                 | LR__3646
228c0     04 4E 05 F1 | 	add	fp, #4
228c4     A7 32 02 FB | 	rdlong	local11, fp
228c8     04 4E 85 F1 | 	sub	fp, #4
228cc     20 32 06 F1 | 	add	local11, #32
228d0     19 2B C2 FA | 	rdbyte	local07, local11
228d4     E5 2A 0E F2 | 	cmp	local07, #229 wz
228d8     04 4E 05 A1 |  if_e	add	fp, #4
228dc     A7 2A 02 AB |  if_e	rdlong	local07, fp
228e0     04 4E 85 A1 |  if_e	sub	fp, #4
228e4     20 2A 06 A1 |  if_e	add	local07, #32
228e8     15 0B 48 AC |  if_e	wrbyte	#5, local07
228ec     24 4E 05 F1 | 	add	fp, #36
228f0     A7 2A 02 FB | 	rdlong	local07, fp
228f4     24 4E 85 F1 | 	sub	fp, #36
228f8     08 2A 0E F2 | 	cmp	local07, #8 wz
228fc     0C 4E 05 A1 |  if_e	add	fp, #12
22900     A7 2A C2 AA |  if_e	rdbyte	local07, fp
22904     02 2A 66 A0 |  if_e	shl	local07, #2
22908     A7 2A 42 AC |  if_e	wrbyte	local07, fp
2290c     0C 4E 85 A1 |  if_e	sub	fp, #12
22910     0C 4E 05 F1 | 	add	fp, #12
22914     A7 2A C2 FA | 	rdbyte	local07, fp
22918     0C 4E 85 F1 | 	sub	fp, #12
2291c     0C 2A 06 F5 | 	and	local07, #12
22920     0C 2A 0E F2 | 	cmp	local07, #12 wz
22924     18 00 90 AD |  if_e	jmp	#LR__3647
22928     0C 4E 05 F1 | 	add	fp, #12
2292c     A7 1E C2 FA | 	rdbyte	local01, fp
22930     0C 4E 85 F1 | 	sub	fp, #12
22934     03 1E 06 F5 | 	and	local01, #3
22938     03 1E 0E F2 | 	cmp	local01, #3 wz
2293c     14 00 90 5D |  if_ne	jmp	#LR__3648
22940                 | LR__3647
22940     10 4E 05 F1 | 	add	fp, #16
22944     A7 2A C2 FA | 	rdbyte	local07, fp
22948     02 2A 46 F5 | 	or	local07, #2
2294c     A7 2A 42 FC | 	wrbyte	local07, fp
22950     10 4E 85 F1 | 	sub	fp, #16
22954                 | LR__3648
22954     10 4E 05 F1 | 	add	fp, #16
22958     A7 2A C2 FA | 	rdbyte	local07, fp
2295c     10 4E 85 F1 | 	sub	fp, #16
22960     02 2A CE F7 | 	test	local07, #2 wz
22964     48 00 90 5D |  if_ne	jmp	#LR__3649
22968     0C 4E 05 F1 | 	add	fp, #12
2296c     A7 2A C2 FA | 	rdbyte	local07, fp
22970     0C 4E 85 F1 | 	sub	fp, #12
22974     01 2A CE F7 | 	test	local07, #1 wz
22978     10 4E 05 51 |  if_ne	add	fp, #16
2297c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
22980     10 2A 46 55 |  if_ne	or	local07, #16
22984     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22988     10 4E 85 51 |  if_ne	sub	fp, #16
2298c     0C 4E 05 F1 | 	add	fp, #12
22990     A7 2A C2 FA | 	rdbyte	local07, fp
22994     0C 4E 85 F1 | 	sub	fp, #12
22998     04 2A CE F7 | 	test	local07, #4 wz
2299c     10 4E 05 51 |  if_ne	add	fp, #16
229a0     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
229a4     08 2A 46 55 |  if_ne	or	local07, #8
229a8     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
229ac     10 4E 85 51 |  if_ne	sub	fp, #16
229b0                 | LR__3649
229b0     04 4E 05 F1 | 	add	fp, #4
229b4     A7 2A 02 FB | 	rdlong	local07, fp
229b8     0C 4E 05 F1 | 	add	fp, #12
229bc     A7 1E C2 FA | 	rdbyte	local01, fp
229c0     10 4E 85 F1 | 	sub	fp, #16
229c4     2B 2A 06 F1 | 	add	local07, #43
229c8     15 1F 42 FC | 	wrbyte	local01, local07
229cc                 | ' 	}
229cc                 | ' 
229cc                 | ' 	dp->fn[ 11 ] = cf;
229cc                 | ' 
229cc                 | ' 	return FR_OK;
229cc     00 FA 05 F6 | 	mov	result1, #0
229d0                 | LR__3650
229d0     A7 F0 03 F6 | 	mov	ptra, fp
229d4     B2 00 A0 FD | 	call	#popregs_
229d8                 | _fatfs_cc_create_name_ret
229d8     2D 00 64 FD | 	ret
229dc                 | 
229dc                 | _fatfs_cc_follow_path
229dc     02 4A 05 F6 | 	mov	COUNT_, #2
229e0     A8 00 A0 FD | 	call	#pushregs_
229e4     18 F0 07 F1 | 	add	ptra, #24
229e8     04 4E 05 F1 | 	add	fp, #4
229ec     A7 12 62 FC | 	wrlong	arg01, fp
229f0     04 4E 05 F1 | 	add	fp, #4
229f4     A7 14 62 FC | 	wrlong	arg02, fp
229f8     04 4E 85 F1 | 	sub	fp, #4
229fc     A7 FA 01 FB | 	rdlong	result1, fp
22a00     FD 1E 02 FB | 	rdlong	local01, result1
22a04     10 4E 05 F1 | 	add	fp, #16
22a08     A7 1E 62 FC | 	wrlong	local01, fp
22a0c     14 4E 85 F1 | 	sub	fp, #20
22a10     97 24 48 FB | 	callpa	#(@LR__3662-@LR__3660)>>2,fcache_load_ptr_
22a14                 | ' )
22a14                 | ' {
22a14                 | ' 	FRESULT res;
22a14                 | ' 	BYTE ns;
22a14                 | ' 	FATFS *fs = dp->obj.fs;
22a14                 | ' #line 3034 "ff.c"
22a14                 | ' 	{
22a14                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
22a14                 | LR__3660
22a14     08 4E 05 F1 | 	add	fp, #8
22a18     A7 1E 02 FB | 	rdlong	local01, fp
22a1c     08 4E 85 F1 | 	sub	fp, #8
22a20     0F 1F C2 FA | 	rdbyte	local01, local01
22a24     2F 1E 0E F2 | 	cmp	local01, #47 wz
22a28     18 00 90 AD |  if_e	jmp	#LR__3661
22a2c     08 4E 05 F1 | 	add	fp, #8
22a30     A7 1E 02 FB | 	rdlong	local01, fp
22a34     08 4E 85 F1 | 	sub	fp, #8
22a38     0F 1F C2 FA | 	rdbyte	local01, local01
22a3c     5C 1E 0E F2 | 	cmp	local01, #92 wz
22a40     18 00 90 5D |  if_ne	jmp	#LR__3663
22a44                 | LR__3661
22a44     08 4E 05 F1 | 	add	fp, #8
22a48     A7 1E 02 FB | 	rdlong	local01, fp
22a4c     01 1E 06 F1 | 	add	local01, #1
22a50     A7 1E 62 FC | 	wrlong	local01, fp
22a54     08 4E 85 F1 | 	sub	fp, #8
22a58     B8 FF 9F FD | 	jmp	#LR__3660
22a5c                 | LR__3662
22a5c                 | LR__3663
22a5c     04 4E 05 F1 | 	add	fp, #4
22a60     A7 1E 02 FB | 	rdlong	local01, fp
22a64     08 1E 06 F1 | 	add	local01, #8
22a68     0F 01 68 FC | 	wrlong	#0, local01
22a6c     04 4E 05 F1 | 	add	fp, #4
22a70     A7 1E 02 FB | 	rdlong	local01, fp
22a74     08 4E 85 F1 | 	sub	fp, #8
22a78     0F 1F C2 FA | 	rdbyte	local01, local01
22a7c     20 1E 16 F2 | 	cmp	local01, #32 wc
22a80     30 00 90 3D |  if_ae	jmp	#LR__3664
22a84     04 4E 05 F1 | 	add	fp, #4
22a88     A7 1E 02 FB | 	rdlong	local01, fp
22a8c     2B 1E 06 F1 | 	add	local01, #43
22a90     0F 01 49 FC | 	wrbyte	#128, local01
22a94     A7 12 02 FB | 	rdlong	arg01, fp
22a98     04 4E 85 F1 | 	sub	fp, #4
22a9c     00 14 06 F6 | 	mov	arg02, #0
22aa0     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
22aa4     0C 4E 05 F1 | 	add	fp, #12
22aa8     A7 FA 61 FC | 	wrlong	result1, fp
22aac     0C 4E 85 F1 | 	sub	fp, #12
22ab0     1C 01 90 FD | 	jmp	#LR__3668
22ab4                 | LR__3664
22ab4                 | ' 		for (;;) {
22ab4                 | LR__3665
22ab4     04 4E 05 F1 | 	add	fp, #4
22ab8     A7 12 02 FB | 	rdlong	arg01, fp
22abc     04 4E 05 F1 | 	add	fp, #4
22ac0     A7 14 02 F6 | 	mov	arg02, fp
22ac4     08 4E 85 F1 | 	sub	fp, #8
22ac8     14 F6 BF FD | 	call	#_fatfs_cc_create_name
22acc     0C 4E 05 F1 | 	add	fp, #12
22ad0     A7 FA 61 FC | 	wrlong	result1, fp
22ad4     00 FA 4D F2 | 	cmps	result1, #0 wz
22ad8     0C 4E 85 F1 | 	sub	fp, #12
22adc     F0 00 90 5D |  if_ne	jmp	#LR__3667
22ae0     04 4E 05 F1 | 	add	fp, #4
22ae4     A7 12 02 FB | 	rdlong	arg01, fp
22ae8     04 4E 85 F1 | 	sub	fp, #4
22aec     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
22af0     0C 4E 05 F1 | 	add	fp, #12
22af4     A7 FA 61 FC | 	wrlong	result1, fp
22af8     08 4E 85 F1 | 	sub	fp, #8
22afc     A7 1E 02 FB | 	rdlong	local01, fp
22b00     2B 1E 06 F1 | 	add	local01, #43
22b04     0F 1F C2 FA | 	rdbyte	local01, local01
22b08     0C 4E 05 F1 | 	add	fp, #12
22b0c     A7 1E 42 FC | 	wrbyte	local01, fp
22b10     04 4E 85 F1 | 	sub	fp, #4
22b14     A7 1E 0A FB | 	rdlong	local01, fp wz
22b18     0C 4E 85 F1 | 	sub	fp, #12
22b1c     34 00 90 AD |  if_e	jmp	#LR__3666
22b20     0C 4E 05 F1 | 	add	fp, #12
22b24     A7 1E 02 FB | 	rdlong	local01, fp
22b28     0C 4E 85 F1 | 	sub	fp, #12
22b2c     04 1E 0E F2 | 	cmp	local01, #4 wz
22b30     9C 00 90 5D |  if_ne	jmp	#LR__3667
22b34     10 4E 05 F1 | 	add	fp, #16
22b38     A7 1E C2 FA | 	rdbyte	local01, fp
22b3c     10 4E 85 F1 | 	sub	fp, #16
22b40     04 1E CE F7 | 	test	local01, #4 wz
22b44     0C 4E 05 A1 |  if_e	add	fp, #12
22b48     A7 0A 68 AC |  if_e	wrlong	#5, fp
22b4c     0C 4E 85 A1 |  if_e	sub	fp, #12
22b50                 | ' 					}
22b50                 | ' 				}
22b50                 | ' 				break;
22b50     7C 00 90 FD | 	jmp	#LR__3667
22b54                 | LR__3666
22b54     10 4E 05 F1 | 	add	fp, #16
22b58     A7 1E C2 FA | 	rdbyte	local01, fp
22b5c     10 4E 85 F1 | 	sub	fp, #16
22b60     04 1E CE F7 | 	test	local01, #4 wz
22b64     68 00 90 5D |  if_ne	jmp	#LR__3667
22b68     04 4E 05 F1 | 	add	fp, #4
22b6c     A7 1E 02 FB | 	rdlong	local01, fp
22b70     04 4E 85 F1 | 	sub	fp, #4
22b74     06 1E 06 F1 | 	add	local01, #6
22b78     0F 1F C2 FA | 	rdbyte	local01, local01
22b7c     10 1E CE F7 | 	test	local01, #16 wz
22b80     0C 4E 05 A1 |  if_e	add	fp, #12
22b84     A7 0A 68 AC |  if_e	wrlong	#5, fp
22b88     0C 4E 85 A1 |  if_e	sub	fp, #12
22b8c                 | ' 				res = FR_NO_PATH; break;
22b8c     40 00 90 AD |  if_e	jmp	#LR__3667
22b90     04 4E 05 F1 | 	add	fp, #4
22b94     A7 20 02 FB | 	rdlong	local02, fp
22b98     10 1F 02 F6 | 	mov	local01, local02
22b9c     10 4E 05 F1 | 	add	fp, #16
22ba0     A7 14 02 FB | 	rdlong	arg02, fp
22ba4     0A 13 02 F6 | 	mov	arg01, arg02
22ba8     34 14 06 F1 | 	add	arg02, #52
22bac     14 4E 85 F1 | 	sub	fp, #20
22bb0     10 20 06 F1 | 	add	local02, #16
22bb4     10 21 02 FB | 	rdlong	local02, local02
22bb8     FF 21 06 F5 | 	and	local02, #511
22bbc     10 15 02 F1 | 	add	arg02, local02
22bc0     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
22bc4     08 1E 06 F1 | 	add	local01, #8
22bc8     0F FB 61 FC | 	wrlong	result1, local01
22bcc     E4 FE 9F FD | 	jmp	#LR__3665
22bd0                 | LR__3667
22bd0                 | LR__3668
22bd0                 | ' 			}
22bd0                 | ' #line 3090 "ff.c"
22bd0                 | ' 			{
22bd0                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
22bd0                 | ' 			}
22bd0                 | ' 		}
22bd0                 | ' 	}
22bd0                 | ' 
22bd0                 | ' 	return res;
22bd0     0C 4E 05 F1 | 	add	fp, #12
22bd4     A7 FA 01 FB | 	rdlong	result1, fp
22bd8     0C 4E 85 F1 | 	sub	fp, #12
22bdc     A7 F0 03 F6 | 	mov	ptra, fp
22be0     B2 00 A0 FD | 	call	#popregs_
22be4                 | _fatfs_cc_follow_path_ret
22be4     2D 00 64 FD | 	ret
22be8                 | 
22be8                 | _fatfs_cc_get_ldnumber
22be8     01 00 66 F6 | 	neg	_var01, #1
22bec     09 03 0A FB | 	rdlong	_var02, arg01 wz
22bf0     01 05 02 F6 | 	mov	_var03, _var02
22bf4     01 FA 65 A6 |  if_e	neg	result1, #1
22bf8     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
22bfc     97 10 48 FB | 	callpa	#(@LR__3671-@LR__3670)>>2,fcache_load_ptr_
22c00                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
22c00                 | LR__3670
22c00     02 07 C2 FA | 	rdbyte	_var04, _var03
22c04     03 FB E1 F8 | 	getbyte	result1, _var04, #0
22c08     20 FA 15 F2 | 	cmp	result1, #32 wc
22c0c     01 04 06 F1 | 	add	_var03, #1
22c10     03 09 02 36 |  if_ae	mov	_var05, _var04
22c14     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
22c18     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
22c1c     E0 FF 9F 1D |  if_a	jmp	#LR__3670
22c20                 | LR__3671
22c20     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
22c24     3A 06 0E F2 | 	cmp	_var04, #58 wz
22c28     40 00 90 5D |  if_ne	jmp	#LR__3673
22c2c     01 0A 06 F6 | 	mov	_var06, #1
22c30     01 09 C2 FA | 	rdbyte	_var05, _var02
22c34     30 08 16 F2 | 	cmp	_var05, #48 wc
22c38     1C 00 90 CD |  if_b	jmp	#LR__3672
22c3c     01 09 C2 FA | 	rdbyte	_var05, _var02
22c40     3A 08 16 F2 | 	cmp	_var05, #58 wc
22c44     01 0D 02 C6 |  if_b	mov	_var07, _var02
22c48     02 0C 06 C1 |  if_b	add	_var07, #2
22c4c     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
22c50     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
22c54     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
22c58                 | LR__3672
22c58     01 0A 56 F2 | 	cmps	_var06, #1 wc
22c5c     05 01 02 C6 |  if_b	mov	_var01, _var06
22c60     09 05 62 CC |  if_b	wrlong	_var03, arg01
22c64                 | ' 			vol = i;
22c64                 | ' 			*path = tt;
22c64                 | ' 		}
22c64                 | ' 		return vol;
22c64     00 FB 01 F6 | 	mov	result1, _var01
22c68     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
22c6c                 | LR__3673
22c6c                 | ' 	}
22c6c                 | ' #line 3170 "ff.c"
22c6c                 | ' 	vol = 0;
22c6c                 | ' 
22c6c                 | ' 	return vol;
22c6c     00 FA 05 F6 | 	mov	result1, #0
22c70                 | _fatfs_cc_get_ldnumber_ret
22c70     2D 00 64 FD | 	ret
22c74                 | 
22c74                 | _fatfs_cc_check_fs
22c74     04 4A 05 F6 | 	mov	COUNT_, #4
22c78     A8 00 A0 FD | 	call	#pushregs_
22c7c     09 1F 02 F6 | 	mov	local01, arg01
22c80     03 1E 06 F1 | 	add	local01, #3
22c84     0F 01 48 FC | 	wrbyte	#0, local01
22c88     2D 1E 06 F1 | 	add	local01, #45
22c8c     FF FF FF FF 
22c90     0F FF 6B FC | 	wrlong	##-1, local01
22c94     30 1E 86 F1 | 	sub	local01, #48
22c98     0F 13 02 F6 | 	mov	arg01, local01
22c9c     18 D5 BF FD | 	call	#_fatfs_cc_move_window
22ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
22ca4     04 FA 05 56 |  if_ne	mov	result1, #4
22ca8     94 01 90 5D |  if_ne	jmp	#LR__3684
22cac     34 1E 06 F1 | 	add	local01, #52
22cb0     0F 13 02 F6 | 	mov	arg01, local01
22cb4     FE 13 06 F1 | 	add	arg01, #510
22cb8                 | ' {
22cb8                 | ' 
22cb8                 | ' 	return *((WORD*)ptr);
22cb8     09 21 E2 FA | 	rdword	local02, arg01
22cbc     0F 23 C2 FA | 	rdbyte	local03, local01
22cc0     34 1E 86 F1 | 	sub	local01, #52
22cc4     11 25 E2 F8 | 	getbyte	local04, local03, #0
22cc8     EB 24 0E F2 | 	cmp	local04, #235 wz
22ccc     11 17 02 56 |  if_ne	mov	arg03, local03
22cd0     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
22cd4     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
22cd8     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
22cdc     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
22ce0     44 01 90 5D |  if_ne	jmp	#LR__3683
22ce4     10 25 32 F9 | 	getword	local04, local02, #0
22ce8     55 00 00 FF 
22cec     55 24 0E F2 | 	cmp	local04, ##43605 wz
22cf0     2C 00 90 5D |  if_ne	jmp	#LR__3680
22cf4     34 1E 06 F1 | 	add	local01, #52
22cf8     0F 13 02 F6 | 	mov	arg01, local01
22cfc     34 1E 86 F1 | 	sub	local01, #52
22d00     52 12 06 F1 | 	add	arg01, #82
22d04     40 01 00 FF 
22d08     40 15 06 F6 | 	mov	arg02, ##@LR__4274
22d0c     08 16 06 F6 | 	mov	arg03, #8
22d10     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
22d14     00 FA 0D F2 | 	cmp	result1, #0 wz
22d18                 | ' 			return 0;
22d18     00 FA 05 A6 |  if_e	mov	result1, #0
22d1c     20 01 90 AD |  if_e	jmp	#LR__3684
22d20                 | LR__3680
22d20     34 1E 06 F1 | 	add	local01, #52
22d24     0F 13 02 F6 | 	mov	arg01, local01
22d28     0B 12 06 F1 | 	add	arg01, #11
22d2c                 | ' {
22d2c                 | ' 
22d2c                 | ' 	return *((WORD*)ptr);
22d2c     09 FB E1 FA | 	rdword	result1, arg01
22d30     0D 1E 06 F1 | 	add	local01, #13
22d34     0F 23 C2 FA | 	rdbyte	local03, local01
22d38     41 1E 86 F1 | 	sub	local01, #65
22d3c     FD 24 32 F9 | 	getword	local04, result1, #0
22d40     FD 14 32 F9 | 	getword	arg02, result1, #0
22d44     01 14 86 F1 | 	sub	arg02, #1
22d48     0A 25 CA F7 | 	test	local04, arg02 wz
22d4c     D8 00 90 5D |  if_ne	jmp	#LR__3682
22d50     FD 14 32 F9 | 	getword	arg02, result1, #0
22d54     01 00 00 FF 
22d58     00 14 16 F2 | 	cmp	arg02, ##512 wc
22d5c     C8 00 90 CD |  if_b	jmp	#LR__3682
22d60     FD 14 32 F9 | 	getword	arg02, result1, #0
22d64     01 00 00 FF 
22d68     01 14 16 F2 | 	cmp	arg02, ##513 wc
22d6c     B8 00 90 3D |  if_ae	jmp	#LR__3682
22d70     11 13 02 F6 | 	mov	arg01, local03
22d74     07 12 4E F7 | 	zerox	arg01, #7 wz
22d78     AC 00 90 AD |  if_e	jmp	#LR__3682
22d7c     11 13 E2 F8 | 	getbyte	arg01, local03, #0
22d80     11 23 E2 F8 | 	getbyte	local03, local03, #0
22d84     01 22 86 F1 | 	sub	local03, #1
22d88     11 13 CA F7 | 	test	arg01, local03 wz
22d8c     98 00 90 5D |  if_ne	jmp	#LR__3682
22d90     34 1E 06 F1 | 	add	local01, #52
22d94     0F 13 02 F6 | 	mov	arg01, local01
22d98     34 1E 86 F1 | 	sub	local01, #52
22d9c     0E 12 06 F1 | 	add	arg01, #14
22da0                 | ' {
22da0                 | ' 
22da0                 | ' 	return *((WORD*)ptr);
22da0     09 FB E9 FA | 	rdword	result1, arg01 wz
22da4     80 00 90 AD |  if_e	jmp	#LR__3682
22da8     44 1E 06 F1 | 	add	local01, #68
22dac     0F 13 C2 FA | 	rdbyte	arg01, local01
22db0     44 1E 86 F1 | 	sub	local01, #68
22db4     01 12 86 F1 | 	sub	arg01, #1
22db8     02 12 16 F2 | 	cmp	arg01, #2 wc
22dbc     68 00 90 3D |  if_ae	jmp	#LR__3682
22dc0     34 1E 06 F1 | 	add	local01, #52
22dc4     0F 13 02 F6 | 	mov	arg01, local01
22dc8     34 1E 86 F1 | 	sub	local01, #52
22dcc     11 12 06 F1 | 	add	arg01, #17
22dd0                 | ' {
22dd0                 | ' 
22dd0                 | ' 	return *((WORD*)ptr);
22dd0     09 FB E9 FA | 	rdword	result1, arg01 wz
22dd4     50 00 90 AD |  if_e	jmp	#LR__3682
22dd8     34 1E 06 F1 | 	add	local01, #52
22ddc     0F 13 02 F6 | 	mov	arg01, local01
22de0     34 1E 86 F1 | 	sub	local01, #52
22de4     13 12 06 F1 | 	add	arg01, #19
22de8                 | ' {
22de8                 | ' 
22de8                 | ' 	return *((WORD*)ptr);
22de8     09 FB E1 FA | 	rdword	result1, arg01
22dec     FD 22 32 F9 | 	getword	local03, result1, #0
22df0     80 22 16 F2 | 	cmp	local03, #128 wc
22df4     20 00 90 3D |  if_ae	jmp	#LR__3681
22df8     34 1E 06 F1 | 	add	local01, #52
22dfc     0F 13 02 F6 | 	mov	arg01, local01
22e00     34 1E 86 F1 | 	sub	local01, #52
22e04     20 12 06 F1 | 	add	arg01, #32
22e08                 | ' {
22e08                 | ' 
22e08                 | ' 	return *((DWORD*)ptr);
22e08     09 FB 01 FB | 	rdlong	result1, arg01
22e0c     80 00 00 FF 
22e10     00 FA 15 F2 | 	cmp	result1, ##65536 wc
22e14     10 00 90 CD |  if_b	jmp	#LR__3682
22e18                 | LR__3681
22e18     4A 1E 06 F1 | 	add	local01, #74
22e1c                 | ' {
22e1c                 | ' 
22e1c                 | ' 	return *((WORD*)ptr);
22e1c     0F FB E9 FA | 	rdword	result1, local01 wz
22e20                 | ' 			&& b != 0 && (b & (b - 1)) == 0
22e20                 | ' 			&& ld_word(fs->win +  14 ) != 0
22e20                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
22e20                 | ' 			&& ld_word(fs->win +  17 ) != 0
22e20                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
22e20                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
22e20                 | ' 				return 0;
22e20     00 FA 05 56 |  if_ne	mov	result1, #0
22e24     18 00 90 5D |  if_ne	jmp	#LR__3684
22e28                 | LR__3682
22e28                 | LR__3683
22e28                 | ' 		}
22e28                 | ' 	}
22e28                 | ' 	return sign == 0xAA55 ? 2 : 3;
22e28     10 23 32 F9 | 	getword	local03, local02, #0
22e2c     55 00 00 FF 
22e30     55 22 0E F2 | 	cmp	local03, ##43605 wz
22e34     02 24 06 A6 |  if_e	mov	local04, #2
22e38     03 24 06 56 |  if_ne	mov	local04, #3
22e3c     12 FB 01 F6 | 	mov	result1, local04
22e40                 | LR__3684
22e40     A7 F0 03 F6 | 	mov	ptra, fp
22e44     B2 00 A0 FD | 	call	#popregs_
22e48                 | _fatfs_cc_check_fs_ret
22e48     2D 00 64 FD | 	ret
22e4c                 | 
22e4c                 | _fatfs_cc_find_volume
22e4c     05 4A 05 F6 | 	mov	COUNT_, #5
22e50     A8 00 A0 FD | 	call	#pushregs_
22e54     24 F0 07 F1 | 	add	ptra, #36
22e58     09 1F 02 F6 | 	mov	local01, arg01
22e5c     0A 21 02 F6 | 	mov	local02, arg02
22e60     0F 13 02 F6 | 	mov	arg01, local01
22e64     00 14 06 F6 | 	mov	arg02, #0
22e68     08 FE BF FD | 	call	#_fatfs_cc_check_fs
22e6c     02 FA 0D F2 | 	cmp	result1, #2 wz
22e70     0C 00 90 AD |  if_e	jmp	#LR__3690
22e74     03 FA 15 F2 | 	cmp	result1, #3 wc
22e78     00 20 0E C2 |  if_b	cmp	local02, #0 wz
22e7c     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3698
22e80                 | LR__3690
22e80                 | ' 	for (i = 0; i < 4; i++) {
22e80     00 22 06 F6 | 	mov	local03, #0
22e84     97 26 48 FB | 	callpa	#(@LR__3692-@LR__3691)>>2,fcache_load_ptr_
22e88                 | LR__3691
22e88     04 22 16 F2 | 	cmp	local03, #4 wc
22e8c     44 00 90 3D |  if_ae	jmp	#LR__3693
22e90     11 25 02 F6 | 	mov	local04, local03
22e94     02 24 66 F0 | 	shl	local04, #2
22e98     14 4E 05 F1 | 	add	fp, #20
22e9c     A7 24 02 F1 | 	add	local04, fp
22ea0     34 1E 06 F1 | 	add	local01, #52
22ea4     0F 13 02 F6 | 	mov	arg01, local01
22ea8     34 1E 86 F1 | 	sub	local01, #52
22eac     BE 13 06 F1 | 	add	arg01, #446
22eb0     11 15 02 F6 | 	mov	arg02, local03
22eb4     04 14 66 F0 | 	shl	arg02, #4
22eb8     0A 13 02 F1 | 	add	arg01, arg02
22ebc     08 12 06 F1 | 	add	arg01, #8
22ec0                 | ' {
22ec0                 | ' 
22ec0                 | ' 	return *((DWORD*)ptr);
22ec0     09 FB 01 FB | 	rdlong	result1, arg01
22ec4     14 4E 85 F1 | 	sub	fp, #20
22ec8     12 FB 61 FC | 	wrlong	result1, local04
22ecc     01 22 06 F1 | 	add	local03, #1
22ed0     B4 FF 9F FD | 	jmp	#LR__3691
22ed4                 | LR__3692
22ed4                 | LR__3693
22ed4     00 20 0E F2 | 	cmp	local02, #0 wz
22ed8     10 25 02 56 |  if_ne	mov	local04, local02
22edc     01 24 86 51 |  if_ne	sub	local04, #1
22ee0     00 24 06 A6 |  if_e	mov	local04, #0
22ee4     12 23 02 F6 | 	mov	local03, local04
22ee8                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
22ee8                 | ' 	}
22ee8                 | ' 	i = part ? part - 1 : 0;
22ee8                 | ' 	do {
22ee8                 | LR__3694
22ee8     11 25 02 F6 | 	mov	local04, local03
22eec     02 24 66 F0 | 	shl	local04, #2
22ef0     14 4E 05 F1 | 	add	fp, #20
22ef4     A7 24 02 F1 | 	add	local04, fp
22ef8     12 25 0A FB | 	rdlong	local04, local04 wz
22efc     14 4E 85 F1 | 	sub	fp, #20
22f00     28 00 90 AD |  if_e	jmp	#LR__3695
22f04     11 25 02 F6 | 	mov	local04, local03
22f08     02 24 66 F0 | 	shl	local04, #2
22f0c     14 4E 05 F1 | 	add	fp, #20
22f10     A7 24 02 F1 | 	add	local04, fp
22f14     12 15 02 FB | 	rdlong	arg02, local04
22f18     0F 13 02 F6 | 	mov	arg01, local01
22f1c     14 4E 85 F1 | 	sub	fp, #20
22f20     50 FD BF FD | 	call	#_fatfs_cc_check_fs
22f24     FD 24 02 F6 | 	mov	local04, result1
22f28     04 00 90 FD | 	jmp	#LR__3696
22f2c                 | LR__3695
22f2c     03 24 06 F6 | 	mov	local04, #3
22f30                 | LR__3696
22f30     12 27 02 F6 | 	mov	local05, local04
22f34     00 20 0E F2 | 	cmp	local02, #0 wz
22f38     02 26 16 A2 |  if_e	cmp	local05, #2 wc
22f3c     0C 00 90 8D |  if_c_and_z	jmp	#LR__3697
22f40     01 22 06 A1 |  if_e	add	local03, #1
22f44     04 22 16 A2 |  if_e	cmp	local03, #4 wc
22f48     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3694
22f4c                 | LR__3697
22f4c                 | ' 	return fmt;
22f4c     13 FB 01 F6 | 	mov	result1, local05
22f50                 | LR__3698
22f50     A7 F0 03 F6 | 	mov	ptra, fp
22f54     B2 00 A0 FD | 	call	#popregs_
22f58                 | _fatfs_cc_find_volume_ret
22f58     2D 00 64 FD | 	ret
22f5c                 | 
22f5c                 | _fatfs_cc_mount_volume
22f5c     0B 4A 05 F6 | 	mov	COUNT_, #11
22f60     A8 00 A0 FD | 	call	#pushregs_
22f64     0A 1F 02 F6 | 	mov	local01, arg02
22f68     0B 21 02 F6 | 	mov	local02, arg03
22f6c     0F 01 68 FC | 	wrlong	#0, local01
22f70     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
22f74     FD 22 02 F6 | 	mov	local03, result1
22f78     00 22 56 F2 | 	cmps	local03, #0 wc
22f7c     0B FA 05 C6 |  if_b	mov	result1, #11
22f80     3C 05 90 CD |  if_b	jmp	#LR__3710
22f84     11 17 02 F6 | 	mov	arg03, local03
22f88     02 16 66 F0 | 	shl	arg03, #2
22f8c     F2 16 02 F1 | 	add	arg03, objptr
22f90     0B 25 0A FB | 	rdlong	local04, arg03 wz
22f94     0C FA 05 A6 |  if_e	mov	result1, #12
22f98     24 05 90 AD |  if_e	jmp	#LR__3710
22f9c     0F 25 62 FC | 	wrlong	local04, local01
22fa0     10 21 E2 F8 | 	getbyte	local02, local02, #0
22fa4     FE 20 06 F5 | 	and	local02, #254
22fa8     12 17 CA FA | 	rdbyte	arg03, local04 wz
22fac     4C 00 90 AD |  if_e	jmp	#LR__3701
22fb0     01 24 06 F1 | 	add	local04, #1
22fb4     12 13 CA FA | 	rdbyte	arg01, local04 wz
22fb8     01 24 86 F1 | 	sub	local04, #1
22fbc     01 FA 05 56 |  if_ne	mov	result1, #1
22fc0                 | ' 
22fc0                 | ' 	return Stat;
22fc0     01 00 00 AF 
22fc4     20 E4 05 A1 |  if_e	add	objptr, ##544
22fc8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
22fcc     01 00 00 AF 
22fd0     20 E4 85 A1 |  if_e	sub	objptr, ##544
22fd4     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
22fd8     01 16 CE F7 | 	test	arg03, #1 wz
22fdc     1C 00 90 5D |  if_ne	jmp	#LR__3700
22fe0     00 20 0E F2 | 	cmp	local02, #0 wz
22fe4     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
22fe8     04 FA CD 57 |  if_ne	test	result1, #4 wz
22fec                 | ' 				return FR_WRITE_PROTECTED;
22fec     0A FA 05 56 |  if_ne	mov	result1, #10
22ff0     CC 04 90 5D |  if_ne	jmp	#LR__3710
22ff4                 | ' 			}
22ff4                 | ' 			return FR_OK;
22ff4     00 FA 05 F6 | 	mov	result1, #0
22ff8     C4 04 90 FD | 	jmp	#LR__3710
22ffc                 | LR__3700
22ffc                 | LR__3701
22ffc     12 01 48 FC | 	wrbyte	#0, local04
23000     01 24 06 F1 | 	add	local04, #1
23004     12 23 42 FC | 	wrbyte	local03, local04
23008     12 13 C2 FA | 	rdbyte	arg01, local04
2300c     01 24 86 F1 | 	sub	local04, #1
23010     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
23014     FD 16 02 F6 | 	mov	arg03, result1
23018     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
2301c     01 26 CE F7 | 	test	local05, #1 wz
23020                 | ' 		return FR_NOT_READY;
23020     03 FA 05 56 |  if_ne	mov	result1, #3
23024     98 04 90 5D |  if_ne	jmp	#LR__3710
23028     00 20 0E F2 | 	cmp	local02, #0 wz
2302c     0B 27 02 56 |  if_ne	mov	local05, arg03
23030     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
23034     04 26 CE 57 |  if_ne	test	local05, #4 wz
23038                 | ' 		return FR_WRITE_PROTECTED;
23038     0A FA 05 56 |  if_ne	mov	result1, #10
2303c     80 04 90 5D |  if_ne	jmp	#LR__3710
23040     12 13 02 F6 | 	mov	arg01, local04
23044     00 14 06 F6 | 	mov	arg02, #0
23048     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2304c     FD 12 02 F6 | 	mov	arg01, result1
23050     04 12 0E F2 | 	cmp	arg01, #4 wz
23054     01 FA 05 A6 |  if_e	mov	result1, #1
23058     64 04 90 AD |  if_e	jmp	#LR__3710
2305c     02 12 16 F2 | 	cmp	arg01, #2 wc
23060     0D FA 05 36 |  if_ae	mov	result1, #13
23064     58 04 90 3D |  if_ae	jmp	#LR__3710
23068     30 24 06 F1 | 	add	local04, #48
2306c     12 29 02 FB | 	rdlong	local06, local04
23070     04 24 06 F1 | 	add	local04, #4
23074     12 13 02 F6 | 	mov	arg01, local04
23078     34 24 86 F1 | 	sub	local04, #52
2307c     0B 12 06 F1 | 	add	arg01, #11
23080                 | ' {
23080                 | ' 
23080                 | ' 	return *((WORD*)ptr);
23080     09 FB E1 FA | 	rdword	result1, arg01
23084     01 00 00 FF 
23088     00 FA 0D F2 | 	cmp	result1, ##512 wz
2308c     0D FA 05 56 |  if_ne	mov	result1, #13
23090     2C 04 90 5D |  if_ne	jmp	#LR__3710
23094     34 24 06 F1 | 	add	local04, #52
23098     12 13 02 F6 | 	mov	arg01, local04
2309c     34 24 86 F1 | 	sub	local04, #52
230a0     16 12 06 F1 | 	add	arg01, #22
230a4                 | ' {
230a4                 | ' 
230a4                 | ' 	return *((WORD*)ptr);
230a4     09 FB E1 FA | 	rdword	result1, arg01
230a8     FD 2A 0A F6 | 	mov	local07, result1 wz
230ac     18 00 90 5D |  if_ne	jmp	#LR__3702
230b0     34 24 06 F1 | 	add	local04, #52
230b4     12 13 02 F6 | 	mov	arg01, local04
230b8     34 24 86 F1 | 	sub	local04, #52
230bc     24 12 06 F1 | 	add	arg01, #36
230c0                 | ' {
230c0                 | ' 
230c0                 | ' 	return *((DWORD*)ptr);
230c0     09 FB 01 FB | 	rdlong	result1, arg01
230c4     FD 2A 02 F6 | 	mov	local07, result1
230c8                 | LR__3702
230c8     1C 24 06 F1 | 	add	local04, #28
230cc     12 2B 62 FC | 	wrlong	local07, local04
230d0     28 24 06 F1 | 	add	local04, #40
230d4     12 27 C2 FA | 	rdbyte	local05, local04
230d8     42 24 86 F1 | 	sub	local04, #66
230dc     12 27 42 FC | 	wrbyte	local05, local04
230e0     12 27 C2 FA | 	rdbyte	local05, local04
230e4     02 24 86 F1 | 	sub	local04, #2
230e8     01 26 0E F2 | 	cmp	local05, #1 wz
230ec     02 24 06 51 |  if_ne	add	local04, #2
230f0     12 27 C2 5A |  if_ne	rdbyte	local05, local04
230f4     02 24 86 51 |  if_ne	sub	local04, #2
230f8     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
230fc     0D FA 05 56 |  if_ne	mov	result1, #13
23100     BC 03 90 5D |  if_ne	jmp	#LR__3710
23104     02 24 06 F1 | 	add	local04, #2
23108     12 27 C2 FA | 	rdbyte	local05, local04
2310c     13 2B 02 FD | 	qmul	local07, local05
23110     3F 24 06 F1 | 	add	local04, #63
23114     12 27 C2 FA | 	rdbyte	local05, local04
23118     37 24 86 F1 | 	sub	local04, #55
2311c     12 27 52 FC | 	wrword	local05, local04
23120     12 27 EA FA | 	rdword	local05, local04 wz
23124     0A 24 86 F1 | 	sub	local04, #10
23128     18 2A 62 FD | 	getqx	local07
2312c     20 00 90 AD |  if_e	jmp	#LR__3703
23130     0A 24 06 F1 | 	add	local04, #10
23134     12 27 E2 FA | 	rdword	local05, local04
23138     13 23 32 F9 | 	getword	local03, local05, #0
2313c     0A 24 86 F1 | 	sub	local04, #10
23140     13 27 32 F9 | 	getword	local05, local05, #0
23144     01 26 86 F1 | 	sub	local05, #1
23148     13 23 CA F7 | 	test	local03, local05 wz
2314c     08 00 90 AD |  if_e	jmp	#LR__3704
23150                 | LR__3703
23150     0D FA 05 F6 | 	mov	result1, #13
23154     68 03 90 FD | 	jmp	#LR__3710
23158                 | LR__3704
23158     34 24 06 F1 | 	add	local04, #52
2315c     12 13 02 F6 | 	mov	arg01, local04
23160     11 12 06 F1 | 	add	arg01, #17
23164                 | ' {
23164                 | ' 
23164                 | ' 	return *((WORD*)ptr);
23164     09 FB E1 FA | 	rdword	result1, arg01
23168     2C 24 86 F1 | 	sub	local04, #44
2316c     12 FB 51 FC | 	wrword	result1, local04
23170     12 27 E2 FA | 	rdword	local05, local04
23174     08 24 86 F1 | 	sub	local04, #8
23178     13 13 52 F6 | 	abs	arg01, local05 wc
2317c     09 13 42 F8 | 	getnib	arg01, arg01, #0
23180     09 13 8A F6 | 	negc	arg01, arg01 wz
23184     0D FA 05 56 |  if_ne	mov	result1, #13
23188     34 03 90 5D |  if_ne	jmp	#LR__3710
2318c     34 24 06 F1 | 	add	local04, #52
23190     12 13 02 F6 | 	mov	arg01, local04
23194     34 24 86 F1 | 	sub	local04, #52
23198     13 12 06 F1 | 	add	arg01, #19
2319c                 | ' {
2319c                 | ' 
2319c                 | ' 	return *((WORD*)ptr);
2319c     09 FB E1 FA | 	rdword	result1, arg01
231a0     FD 2C 0A F6 | 	mov	local08, result1 wz
231a4     34 24 06 A1 |  if_e	add	local04, #52
231a8     12 13 02 A6 |  if_e	mov	arg01, local04
231ac     34 24 86 A1 |  if_e	sub	local04, #52
231b0     20 12 06 A1 |  if_e	add	arg01, #32
231b4                 | ' {
231b4                 | ' 
231b4                 | ' 	return *((DWORD*)ptr);
231b4     09 2D 02 AB |  if_e	rdlong	local08, arg01
231b8     34 24 06 F1 | 	add	local04, #52
231bc     12 13 02 F6 | 	mov	arg01, local04
231c0     34 24 86 F1 | 	sub	local04, #52
231c4     0E 12 06 F1 | 	add	arg01, #14
231c8                 | ' {
231c8                 | ' 
231c8                 | ' 	return *((WORD*)ptr);
231c8     09 FB E1 FA | 	rdword	result1, arg01
231cc     FD 12 02 F6 | 	mov	arg01, result1
231d0     09 27 02 F6 | 	mov	local05, arg01
231d4     0F 26 4E F7 | 	zerox	local05, #15 wz
231d8     0D FA 05 A6 |  if_e	mov	result1, #13
231dc     E0 02 90 AD |  if_e	jmp	#LR__3710
231e0     09 2F 32 F9 | 	getword	local09, arg01, #0
231e4     15 2F 02 F1 | 	add	local09, local07
231e8     08 24 06 F1 | 	add	local04, #8
231ec     12 27 E2 FA | 	rdword	local05, local04
231f0     08 24 86 F1 | 	sub	local04, #8
231f4     13 27 52 F6 | 	abs	local05, local05 wc
231f8     04 26 46 F0 | 	shr	local05, #4
231fc     13 2F 82 F3 | 	sumc	local09, local05
23200     17 2D 12 F2 | 	cmp	local08, local09 wc
23204     0D FA 05 C6 |  if_b	mov	result1, #13
23208     B4 02 90 CD |  if_b	jmp	#LR__3710
2320c     17 2D 82 F1 | 	sub	local08, local09
23210     0A 24 06 F1 | 	add	local04, #10
23214     12 27 E2 FA | 	rdword	local05, local04
23218     13 2D 12 FD | 	qdiv	local08, local05
2321c     0A 24 86 F1 | 	sub	local04, #10
23220     18 26 62 FD | 	getqx	local05
23224     00 26 0E F2 | 	cmp	local05, #0 wz
23228     0D FA 05 A6 |  if_e	mov	result1, #13
2322c     90 02 90 AD |  if_e	jmp	#LR__3710
23230     00 30 06 F6 | 	mov	local10, #0
23234     FF FF 07 FF 
23238     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
2323c     03 30 06 C6 |  if_b	mov	local10, #3
23240     7F 00 00 FF 
23244     F6 27 16 F2 | 	cmp	local05, ##65526 wc
23248     02 30 06 C6 |  if_b	mov	local10, #2
2324c     07 00 00 FF 
23250     F6 27 16 F2 | 	cmp	local05, ##4086 wc
23254     01 30 06 C6 |  if_b	mov	local10, #1
23258     00 30 0E F2 | 	cmp	local10, #0 wz
2325c     0D FA 05 A6 |  if_e	mov	result1, #13
23260     5C 02 90 AD |  if_e	jmp	#LR__3710
23264     02 26 06 F1 | 	add	local05, #2
23268     18 24 06 F1 | 	add	local04, #24
2326c     12 27 62 FC | 	wrlong	local05, local04
23270     08 24 06 F1 | 	add	local04, #8
23274     12 29 62 FC | 	wrlong	local06, local04
23278     14 27 02 F6 | 	mov	local05, local06
2327c     09 13 32 F9 | 	getword	arg01, arg01, #0
23280     09 27 02 F1 | 	add	local05, arg01
23284     04 24 06 F1 | 	add	local04, #4
23288     12 27 62 FC | 	wrlong	local05, local04
2328c     14 27 02 F6 | 	mov	local05, local06
23290     17 27 02 F1 | 	add	local05, local09
23294     08 24 06 F1 | 	add	local04, #8
23298     12 27 62 FC | 	wrlong	local05, local04
2329c     2C 24 86 F1 | 	sub	local04, #44
232a0     03 30 0E F2 | 	cmp	local10, #3 wz
232a4     5C 00 90 5D |  if_ne	jmp	#LR__3705
232a8     34 24 06 F1 | 	add	local04, #52
232ac     12 13 02 F6 | 	mov	arg01, local04
232b0     34 24 86 F1 | 	sub	local04, #52
232b4     2A 12 06 F1 | 	add	arg01, #42
232b8                 | ' {
232b8                 | ' 
232b8                 | ' 	return *((WORD*)ptr);
232b8     09 FB E9 FA | 	rdword	result1, arg01 wz
232bc     0D FA 05 56 |  if_ne	mov	result1, #13
232c0     FC 01 90 5D |  if_ne	jmp	#LR__3710
232c4     08 24 06 F1 | 	add	local04, #8
232c8     12 27 EA FA | 	rdword	local05, local04 wz
232cc     08 24 86 F1 | 	sub	local04, #8
232d0     0D FA 05 56 |  if_ne	mov	result1, #13
232d4     E8 01 90 5D |  if_ne	jmp	#LR__3710
232d8     34 24 06 F1 | 	add	local04, #52
232dc     12 13 02 F6 | 	mov	arg01, local04
232e0     2C 12 06 F1 | 	add	arg01, #44
232e4                 | ' {
232e4                 | ' 
232e4                 | ' 	return *((DWORD*)ptr);
232e4     09 FB 01 FB | 	rdlong	result1, arg01
232e8     0C 24 86 F1 | 	sub	local04, #12
232ec     12 FB 61 FC | 	wrlong	result1, local04
232f0     10 24 86 F1 | 	sub	local04, #16
232f4     12 33 02 FB | 	rdlong	local11, local04
232f8     18 24 86 F1 | 	sub	local04, #24
232fc     02 32 66 F0 | 	shl	local11, #2
23300     6C 00 90 FD | 	jmp	#LR__3707
23304                 | LR__3705
23304     08 24 06 F1 | 	add	local04, #8
23308     12 27 EA FA | 	rdword	local05, local04 wz
2330c     08 24 86 F1 | 	sub	local04, #8
23310     0D FA 05 A6 |  if_e	mov	result1, #13
23314     A8 01 90 AD |  if_e	jmp	#LR__3710
23318     24 24 06 F1 | 	add	local04, #36
2331c     12 27 02 FB | 	rdlong	local05, local04
23320     15 27 02 F1 | 	add	local05, local07
23324     04 24 06 F1 | 	add	local04, #4
23328     12 27 62 FC | 	wrlong	local05, local04
2332c     28 24 86 F1 | 	sub	local04, #40
23330     02 30 0E F2 | 	cmp	local10, #2 wz
23334     18 24 06 A1 |  if_e	add	local04, #24
23338     12 27 02 AB |  if_e	rdlong	local05, local04
2333c     18 24 86 A1 |  if_e	sub	local04, #24
23340     01 26 66 A0 |  if_e	shl	local05, #1
23344     24 00 90 AD |  if_e	jmp	#LR__3706
23348     18 24 06 F1 | 	add	local04, #24
2334c     12 33 02 FB | 	rdlong	local11, local04
23350     19 27 02 F6 | 	mov	local05, local11
23354     01 26 66 F0 | 	shl	local05, #1
23358     19 27 02 F1 | 	add	local05, local11
2335c     01 26 46 F0 | 	shr	local05, #1
23360     18 24 86 F1 | 	sub	local04, #24
23364     01 32 06 F5 | 	and	local11, #1
23368     19 27 02 F1 | 	add	local05, local11
2336c                 | LR__3706
2336c     13 33 02 F6 | 	mov	local11, local05
23370                 | LR__3707
23370     FF 33 06 F1 | 	add	local11, #511
23374     09 32 46 F0 | 	shr	local11, #9
23378     1C 24 06 F1 | 	add	local04, #28
2337c     12 17 02 FB | 	rdlong	arg03, local04
23380     1C 24 86 F1 | 	sub	local04, #28
23384     19 17 12 F2 | 	cmp	arg03, local11 wc
23388     0D FA 05 C6 |  if_b	mov	result1, #13
2338c     30 01 90 CD |  if_b	jmp	#LR__3710
23390     14 24 06 F1 | 	add	local04, #20
23394     FF FF FF FF 
23398     12 FF 6B FC | 	wrlong	##-1, local04
2339c     04 24 86 F1 | 	sub	local04, #4
233a0     FF FF FF FF 
233a4     12 FF 6B FC | 	wrlong	##-1, local04
233a8     0C 24 86 F1 | 	sub	local04, #12
233ac     12 01 49 FC | 	wrbyte	#128, local04
233b0     04 24 86 F1 | 	sub	local04, #4
233b4     03 30 0E F2 | 	cmp	local10, #3 wz
233b8     D0 00 90 5D |  if_ne	jmp	#LR__3709
233bc     34 24 06 F1 | 	add	local04, #52
233c0     12 13 02 F6 | 	mov	arg01, local04
233c4     34 24 86 F1 | 	sub	local04, #52
233c8     30 12 06 F1 | 	add	arg01, #48
233cc                 | ' {
233cc                 | ' 
233cc                 | ' 	return *((WORD*)ptr);
233cc     09 FB E1 FA | 	rdword	result1, arg01
233d0     FD 26 32 F9 | 	getword	local05, result1, #0
233d4     01 26 0E F2 | 	cmp	local05, #1 wz
233d8     B0 00 90 5D |  if_ne	jmp	#LR__3709
233dc     01 28 06 F1 | 	add	local06, #1
233e0     12 13 02 F6 | 	mov	arg01, local04
233e4     14 15 02 F6 | 	mov	arg02, local06
233e8     CC CD BF FD | 	call	#_fatfs_cc_move_window
233ec     00 FA 0D F2 | 	cmp	result1, #0 wz
233f0     98 00 90 5D |  if_ne	jmp	#LR__3709
233f4     04 24 06 F1 | 	add	local04, #4
233f8     12 01 48 FC | 	wrbyte	#0, local04
233fc     30 24 06 F1 | 	add	local04, #48
23400     12 13 02 F6 | 	mov	arg01, local04
23404     34 24 86 F1 | 	sub	local04, #52
23408     FE 13 06 F1 | 	add	arg01, #510
2340c                 | ' {
2340c                 | ' 
2340c                 | ' 	return *((WORD*)ptr);
2340c     09 FB E1 FA | 	rdword	result1, arg01
23410     FD 26 32 F9 | 	getword	local05, result1, #0
23414     55 00 00 FF 
23418     55 26 0E F2 | 	cmp	local05, ##43605 wz
2341c     34 24 06 A1 |  if_e	add	local04, #52
23420     12 13 02 A6 |  if_e	mov	arg01, local04
23424     34 24 86 A1 |  if_e	sub	local04, #52
23428                 | ' {
23428                 | ' 
23428                 | ' 	return *((DWORD*)ptr);
23428     09 FB 01 AB |  if_e	rdlong	result1, arg01
2342c     A9 B0 20 AF 
23430     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
23434     54 00 90 5D |  if_ne	jmp	#LR__3708
23438     34 24 06 F1 | 	add	local04, #52
2343c     12 13 02 F6 | 	mov	arg01, local04
23440     34 24 86 F1 | 	sub	local04, #52
23444     E4 13 06 F1 | 	add	arg01, #484
23448                 | ' {
23448                 | ' 
23448                 | ' 	return *((DWORD*)ptr);
23448     09 FB 01 FB | 	rdlong	result1, arg01
2344c     B9 A0 30 FF 
23450     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
23454     34 00 90 5D |  if_ne	jmp	#LR__3708
23458     34 24 06 F1 | 	add	local04, #52
2345c     12 13 02 F6 | 	mov	arg01, local04
23460     E8 13 06 F1 | 	add	arg01, #488
23464                 | ' {
23464                 | ' 
23464                 | ' 	return *((DWORD*)ptr);
23464     09 FB 01 FB | 	rdlong	result1, arg01
23468     20 24 86 F1 | 	sub	local04, #32
2346c     12 FB 61 FC | 	wrlong	result1, local04
23470     20 24 06 F1 | 	add	local04, #32
23474     12 13 02 F6 | 	mov	arg01, local04
23478     EC 13 06 F1 | 	add	arg01, #492
2347c                 | ' {
2347c                 | ' 
2347c                 | ' 	return *((DWORD*)ptr);
2347c     09 FB 01 FB | 	rdlong	result1, arg01
23480     24 24 86 F1 | 	sub	local04, #36
23484     12 FB 61 FC | 	wrlong	result1, local04
23488     10 24 86 F1 | 	sub	local04, #16
2348c                 | LR__3708
2348c                 | LR__3709
2348c     12 31 42 FC | 	wrbyte	local10, local04
23490     04 E4 05 F1 | 	add	objptr, #4
23494     F2 26 E2 FA | 	rdword	local05, objptr
23498     01 26 06 F1 | 	add	local05, #1
2349c     F2 26 52 FC | 	wrword	local05, objptr
234a0     F2 32 E2 FA | 	rdword	local11, objptr
234a4     06 24 06 F1 | 	add	local04, #6
234a8     12 33 52 FC | 	wrword	local11, local04
234ac     04 E4 05 F1 | 	add	objptr, #4
234b0     06 24 06 F1 | 	add	local04, #6
234b4     12 E5 61 FC | 	wrlong	objptr, local04
234b8                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
234b8                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
234b8                 | ' 			{
234b8                 | ' 
234b8                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
234b8                 | ' 
234b8                 | ' 
234b8                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
234b8                 | ' 
234b8                 | ' 			}
234b8                 | ' 		}
234b8                 | ' 
234b8                 | ' 
234b8                 | ' 	}
234b8                 | ' 
234b8                 | ' 	fs->fs_type = (BYTE)fmt;
234b8                 | ' 	fs->id = ++Fsid;
234b8                 | ' 
234b8                 | ' 	fs->lfnbuf = LfnBuf;
234b8                 | ' #line 3567 "ff.c"
234b8                 | ' 	return FR_OK;
234b8     00 FA 05 F6 | 	mov	result1, #0
234bc     08 E4 85 F1 | 	sub	objptr, #8
234c0                 | LR__3710
234c0     A7 F0 03 F6 | 	mov	ptra, fp
234c4     B2 00 A0 FD | 	call	#popregs_
234c8                 | _fatfs_cc_mount_volume_ret
234c8     2D 00 64 FD | 	ret
234cc                 | 
234cc                 | _fatfs_cc_validate
234cc     09 01 0A F6 | 	mov	_var01, arg01 wz
234d0     09 02 06 F6 | 	mov	_var02, #9
234d4     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
234d8     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
234dc     50 00 90 AD |  if_e	jmp	#LR__3720
234e0     04 00 06 F1 | 	add	_var01, #4
234e4     00 07 E2 FA | 	rdword	_var04, _var01
234e8     04 00 86 F1 | 	sub	_var01, #4
234ec     00 13 02 FB | 	rdlong	arg01, _var01
234f0     06 12 06 F1 | 	add	arg01, #6
234f4     09 FB E1 FA | 	rdword	result1, arg01
234f8     FD 06 0A F2 | 	cmp	_var04, result1 wz
234fc     30 00 90 5D |  if_ne	jmp	#LR__3720
23500     00 07 02 FB | 	rdlong	_var04, _var01
23504     01 06 06 F1 | 	add	_var04, #1
23508     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2350c     01 FA 05 56 |  if_ne	mov	result1, #1
23510                 | ' 
23510                 | ' 	return Stat;
23510     01 00 00 AF 
23514     20 E4 05 A1 |  if_e	add	objptr, ##544
23518     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2351c     01 00 00 AF 
23520     20 E4 85 A1 |  if_e	sub	objptr, ##544
23524     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
23528     01 04 CE F7 | 	test	_var03, #1 wz
2352c     00 02 06 A6 |  if_e	mov	_var02, #0
23530                 | LR__3720
23530     00 02 0E F2 | 	cmp	_var02, #0 wz
23534     00 05 02 AB |  if_e	rdlong	_var03, _var01
23538     00 04 06 56 |  if_ne	mov	_var03, #0
2353c     0A 05 62 FC | 	wrlong	_var03, arg02
23540                 | ' 			res = FR_OK;
23540                 | ' 		}
23540                 | ' 
23540                 | ' 	}
23540                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
23540                 | ' 	return res;
23540     01 FB 01 F6 | 	mov	result1, _var02
23544                 | _fatfs_cc_validate_ret
23544     2D 00 64 FD | 	ret
23548                 | 
23548                 | _fatfs_cc_f_mount
23548     01 4A 05 F6 | 	mov	COUNT_, #1
2354c     A8 00 A0 FD | 	call	#pushregs_
23550     20 F0 07 F1 | 	add	ptra, #32
23554     04 4E 05 F1 | 	add	fp, #4
23558     A7 12 62 FC | 	wrlong	arg01, fp
2355c     04 4E 05 F1 | 	add	fp, #4
23560     A7 14 62 FC | 	wrlong	arg02, fp
23564     04 4E 05 F1 | 	add	fp, #4
23568     A7 16 42 FC | 	wrbyte	arg03, fp
2356c     04 4E 85 F1 | 	sub	fp, #4
23570     A7 16 02 FB | 	rdlong	arg03, fp
23574     14 4E 05 F1 | 	add	fp, #20
23578     A7 16 62 FC | 	wrlong	arg03, fp
2357c     A7 12 02 F6 | 	mov	arg01, fp
23580     1C 4E 85 F1 | 	sub	fp, #28
23584     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
23588     14 4E 05 F1 | 	add	fp, #20
2358c     A7 FA 61 FC | 	wrlong	result1, fp
23590     14 4E 85 F1 | 	sub	fp, #20
23594     00 FA 55 F2 | 	cmps	result1, #0 wc
23598     0B FA 05 C6 |  if_b	mov	result1, #11
2359c     C0 00 90 CD |  if_b	jmp	#LR__3731
235a0     14 4E 05 F1 | 	add	fp, #20
235a4     A7 16 02 FB | 	rdlong	arg03, fp
235a8     02 16 66 F0 | 	shl	arg03, #2
235ac     F2 16 02 F1 | 	add	arg03, objptr
235b0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
235b4     04 4E 85 F1 | 	sub	fp, #4
235b8     A7 16 62 FC | 	wrlong	arg03, fp
235bc     10 4E 85 F1 | 	sub	fp, #16
235c0     28 00 90 AD |  if_e	jmp	#LR__3730
235c4     10 4E 05 F1 | 	add	fp, #16
235c8     A7 16 02 FB | 	rdlong	arg03, fp
235cc     10 4E 85 F1 | 	sub	fp, #16
235d0     01 16 06 F1 | 	add	arg03, #1
235d4     0B 13 C2 FA | 	rdbyte	arg01, arg03
235d8     20 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
235dc     10 4E 05 F1 | 	add	fp, #16
235e0     A7 16 02 FB | 	rdlong	arg03, fp
235e4     10 4E 85 F1 | 	sub	fp, #16
235e8     0B 01 48 FC | 	wrbyte	#0, arg03
235ec                 | LR__3730
235ec     04 4E 05 F1 | 	add	fp, #4
235f0     A7 1E 0A FB | 	rdlong	local01, fp wz
235f4     04 4E 85 F1 | 	sub	fp, #4
235f8     04 4E 05 51 |  if_ne	add	fp, #4
235fc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
23600     04 4E 85 51 |  if_ne	sub	fp, #4
23604     0F 01 48 5C |  if_ne	wrbyte	#0, local01
23608     14 4E 05 F1 | 	add	fp, #20
2360c     A7 1E 02 FB | 	rdlong	local01, fp
23610     02 1E 66 F0 | 	shl	local01, #2
23614     F2 1E 02 F1 | 	add	local01, objptr
23618     10 4E 85 F1 | 	sub	fp, #16
2361c     A7 16 02 FB | 	rdlong	arg03, fp
23620     0F 17 62 FC | 	wrlong	arg03, local01
23624     08 4E 05 F1 | 	add	fp, #8
23628     A7 1E CA FA | 	rdbyte	local01, fp wz
2362c     0C 4E 85 F1 | 	sub	fp, #12
23630     00 FA 05 A6 |  if_e	mov	result1, #0
23634     28 00 90 AD |  if_e	jmp	#LR__3731
23638     08 4E 05 F1 | 	add	fp, #8
2363c     A7 12 02 F6 | 	mov	arg01, fp
23640     04 4E 85 F1 | 	sub	fp, #4
23644     A7 14 02 F6 | 	mov	arg02, fp
23648     04 4E 85 F1 | 	sub	fp, #4
2364c     00 16 06 F6 | 	mov	arg03, #0
23650     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
23654     18 4E 05 F1 | 	add	fp, #24
23658     A7 FA 61 FC | 	wrlong	result1, fp
2365c                 | ' 
2365c                 | ' 	res = mount_volume(&path, &fs, 0);
2365c                 | ' 	return res ;
2365c     18 4E 85 F1 | 	sub	fp, #24
23660                 | LR__3731
23660     A7 F0 03 F6 | 	mov	ptra, fp
23664     B2 00 A0 FD | 	call	#popregs_
23668                 | _fatfs_cc_f_mount_ret
23668     2D 00 64 FD | 	ret
2366c                 | 
2366c                 | _fatfs_cc_f_open
2366c     02 4A 05 F6 | 	mov	COUNT_, #2
23670     A8 00 A0 FD | 	call	#pushregs_
23674     60 F0 07 F1 | 	add	ptra, #96
23678     04 4E 05 F1 | 	add	fp, #4
2367c     A7 12 62 FC | 	wrlong	arg01, fp
23680     04 4E 05 F1 | 	add	fp, #4
23684     A7 14 62 FC | 	wrlong	arg02, fp
23688     04 4E 05 F1 | 	add	fp, #4
2368c     A7 16 42 FC | 	wrbyte	arg03, fp
23690     08 4E 85 F1 | 	sub	fp, #8
23694     A7 18 0A FB | 	rdlong	arg04, fp wz
23698     04 4E 85 F1 | 	sub	fp, #4
2369c     09 FA 05 A6 |  if_e	mov	result1, #9
236a0     98 06 90 AD |  if_e	jmp	#LR__3757
236a4     0C 4E 05 F1 | 	add	fp, #12
236a8     A7 18 C2 FA | 	rdbyte	arg04, fp
236ac     3F 18 06 F5 | 	and	arg04, #63
236b0     A7 18 42 FC | 	wrbyte	arg04, fp
236b4     04 4E 85 F1 | 	sub	fp, #4
236b8     A7 12 02 F6 | 	mov	arg01, fp
236bc     3C 4E 05 F1 | 	add	fp, #60
236c0     A7 14 02 F6 | 	mov	arg02, fp
236c4     38 4E 85 F1 | 	sub	fp, #56
236c8     A7 16 C2 FA | 	rdbyte	arg03, fp
236cc     0C 4E 85 F1 | 	sub	fp, #12
236d0     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
236d4     10 4E 05 F1 | 	add	fp, #16
236d8     A7 FA 61 FC | 	wrlong	result1, fp
236dc     10 4E 85 F1 | 	sub	fp, #16
236e0     00 FA 0D F2 | 	cmp	result1, #0 wz
236e4     2C 06 90 5D |  if_ne	jmp	#LR__3756
236e8     44 4E 05 F1 | 	add	fp, #68
236ec     A7 18 02 FB | 	rdlong	arg04, fp
236f0     30 4E 85 F1 | 	sub	fp, #48
236f4     A7 18 62 FC | 	wrlong	arg04, fp
236f8     A7 12 02 F6 | 	mov	arg01, fp
236fc     0C 4E 85 F1 | 	sub	fp, #12
23700     A7 1E 02 FB | 	rdlong	local01, fp
23704     08 4E 85 F1 | 	sub	fp, #8
23708     0F 15 02 F6 | 	mov	arg02, local01
2370c     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
23710     10 4E 05 F1 | 	add	fp, #16
23714     A7 FA 61 FC | 	wrlong	result1, fp
23718     10 4E 85 F1 | 	sub	fp, #16
2371c     00 FA 0D F2 | 	cmp	result1, #0 wz
23720     1C 00 90 5D |  if_ne	jmp	#LR__3740
23724     3F 4E 05 F1 | 	add	fp, #63
23728     A7 18 C2 FA | 	rdbyte	arg04, fp
2372c     3F 4E 85 F1 | 	sub	fp, #63
23730     80 18 CE F7 | 	test	arg04, #128 wz
23734     10 4E 05 51 |  if_ne	add	fp, #16
23738     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2373c     10 4E 85 51 |  if_ne	sub	fp, #16
23740                 | LR__3740
23740     0C 4E 05 F1 | 	add	fp, #12
23744     A7 18 C2 FA | 	rdbyte	arg04, fp
23748     0C 4E 85 F1 | 	sub	fp, #12
2374c     1C 18 CE F7 | 	test	arg04, #28 wz
23750     F0 01 90 AD |  if_e	jmp	#LR__3745
23754     10 4E 05 F1 | 	add	fp, #16
23758     A7 1E 0A FB | 	rdlong	local01, fp wz
2375c     10 4E 85 F1 | 	sub	fp, #16
23760     48 00 90 AD |  if_e	jmp	#LR__3742
23764     10 4E 05 F1 | 	add	fp, #16
23768     A7 18 02 FB | 	rdlong	arg04, fp
2376c     10 4E 85 F1 | 	sub	fp, #16
23770     04 18 0E F2 | 	cmp	arg04, #4 wz
23774     1C 00 90 5D |  if_ne	jmp	#LR__3741
23778     14 4E 05 F1 | 	add	fp, #20
2377c     A7 12 02 F6 | 	mov	arg01, fp
23780     14 4E 85 F1 | 	sub	fp, #20
23784     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
23788     10 4E 05 F1 | 	add	fp, #16
2378c     A7 FA 61 FC | 	wrlong	result1, fp
23790     10 4E 85 F1 | 	sub	fp, #16
23794                 | LR__3741
23794     0C 4E 05 F1 | 	add	fp, #12
23798     A7 1E C2 FA | 	rdbyte	local01, fp
2379c     08 1E 46 F5 | 	or	local01, #8
237a0     A7 1E 42 FC | 	wrbyte	local01, fp
237a4     0C 4E 85 F1 | 	sub	fp, #12
237a8     3C 00 90 FD | 	jmp	#LR__3744
237ac                 | LR__3742
237ac     1A 4E 05 F1 | 	add	fp, #26
237b0     A7 1E C2 FA | 	rdbyte	local01, fp
237b4     1A 4E 85 F1 | 	sub	fp, #26
237b8     11 1E CE F7 | 	test	local01, #17 wz
237bc     10 4E 05 51 |  if_ne	add	fp, #16
237c0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
237c4     10 4E 85 51 |  if_ne	sub	fp, #16
237c8     1C 00 90 5D |  if_ne	jmp	#LR__3743
237cc     0C 4E 05 F1 | 	add	fp, #12
237d0     A7 1E C2 FA | 	rdbyte	local01, fp
237d4     0C 4E 85 F1 | 	sub	fp, #12
237d8     04 1E CE F7 | 	test	local01, #4 wz
237dc     10 4E 05 51 |  if_ne	add	fp, #16
237e0     A7 10 68 5C |  if_ne	wrlong	#8, fp
237e4     10 4E 85 51 |  if_ne	sub	fp, #16
237e8                 | LR__3743
237e8                 | LR__3744
237e8     10 4E 05 F1 | 	add	fp, #16
237ec     A7 1E 0A FB | 	rdlong	local01, fp wz
237f0     10 4E 85 F1 | 	sub	fp, #16
237f4     A8 01 90 5D |  if_ne	jmp	#LR__3748
237f8     0C 4E 05 F1 | 	add	fp, #12
237fc     A7 1E C2 FA | 	rdbyte	local01, fp
23800     0C 4E 85 F1 | 	sub	fp, #12
23804     08 1E CE F7 | 	test	local01, #8 wz
23808     94 01 90 AD |  if_e	jmp	#LR__3748
2380c     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
23810     54 4E 05 F1 | 	add	fp, #84
23814     A7 FA 61 FC | 	wrlong	result1, fp
23818     24 4E 85 F1 | 	sub	fp, #36
2381c     A7 12 02 FB | 	rdlong	arg01, fp
23820     0E 12 06 F1 | 	add	arg01, #14
23824     09 FB 61 FC | 	wrlong	result1, arg01
23828     A7 12 02 FB | 	rdlong	arg01, fp
2382c     16 12 06 F1 | 	add	arg01, #22
23830     24 4E 05 F1 | 	add	fp, #36
23834     A7 14 02 FB | 	rdlong	arg02, fp
23838     09 15 62 FC | 	wrlong	arg02, arg01
2383c     10 4E 85 F1 | 	sub	fp, #16
23840     A7 12 02 FB | 	rdlong	arg01, fp
23844     14 4E 85 F1 | 	sub	fp, #20
23848     A7 14 02 FB | 	rdlong	arg02, fp
2384c     30 4E 85 F1 | 	sub	fp, #48
23850     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
23854     48 4E 05 F1 | 	add	fp, #72
23858     A7 FA 61 FC | 	wrlong	result1, fp
2385c     18 4E 85 F1 | 	sub	fp, #24
23860     A7 1E 02 FB | 	rdlong	local01, fp
23864     0B 1E 06 F1 | 	add	local01, #11
23868     0F 41 48 FC | 	wrbyte	#32, local01
2386c     14 4E 05 F1 | 	add	fp, #20
23870     A7 12 02 FB | 	rdlong	arg01, fp
23874     14 4E 85 F1 | 	sub	fp, #20
23878     A7 14 02 FB | 	rdlong	arg02, fp
2387c     30 4E 85 F1 | 	sub	fp, #48
23880     00 16 06 F6 | 	mov	arg03, #0
23884     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
23888     30 4E 05 F1 | 	add	fp, #48
2388c     A7 12 02 FB | 	rdlong	arg01, fp
23890     1C 12 06 F1 | 	add	arg01, #28
23894     09 01 68 FC | 	wrlong	#0, arg01
23898     14 4E 05 F1 | 	add	fp, #20
2389c     A7 1E 02 FB | 	rdlong	local01, fp
238a0     03 1E 06 F1 | 	add	local01, #3
238a4     0F 03 48 FC | 	wrbyte	#1, local01
238a8     04 4E 05 F1 | 	add	fp, #4
238ac     A7 1E 0A FB | 	rdlong	local01, fp wz
238b0     48 4E 85 F1 | 	sub	fp, #72
238b4     E8 00 90 AD |  if_e	jmp	#LR__3748
238b8     44 4E 05 F1 | 	add	fp, #68
238bc     A7 1E 02 FB | 	rdlong	local01, fp
238c0     30 1E 06 F1 | 	add	local01, #48
238c4     0F 1F 02 FB | 	rdlong	local01, local01
238c8     14 4E 05 F1 | 	add	fp, #20
238cc     A7 1E 62 FC | 	wrlong	local01, fp
238d0     44 4E 85 F1 | 	sub	fp, #68
238d4     A7 12 02 F6 | 	mov	arg01, fp
238d8     34 4E 05 F1 | 	add	fp, #52
238dc     A7 14 02 FB | 	rdlong	arg02, fp
238e0     48 4E 85 F1 | 	sub	fp, #72
238e4     00 16 06 F6 | 	mov	arg03, #0
238e8     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
238ec     10 4E 05 F1 | 	add	fp, #16
238f0     A7 FA 61 FC | 	wrlong	result1, fp
238f4     10 4E 85 F1 | 	sub	fp, #16
238f8     00 FA 0D F2 | 	cmp	result1, #0 wz
238fc     A0 00 90 5D |  if_ne	jmp	#LR__3748
23900     44 4E 05 F1 | 	add	fp, #68
23904     A7 12 02 FB | 	rdlong	arg01, fp
23908     14 4E 05 F1 | 	add	fp, #20
2390c     A7 14 02 FB | 	rdlong	arg02, fp
23910     58 4E 85 F1 | 	sub	fp, #88
23914     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
23918     10 4E 05 F1 | 	add	fp, #16
2391c     A7 FA 61 FC | 	wrlong	result1, fp
23920     34 4E 05 F1 | 	add	fp, #52
23924     A7 18 02 FB | 	rdlong	arg04, fp
23928     04 4E 05 F1 | 	add	fp, #4
2392c     A7 1E 02 FB | 	rdlong	local01, fp
23930     48 4E 85 F1 | 	sub	fp, #72
23934     01 1E 86 F1 | 	sub	local01, #1
23938     10 18 06 F1 | 	add	arg04, #16
2393c     0C 1F 62 FC | 	wrlong	local01, arg04
23940     5C 00 90 FD | 	jmp	#LR__3748
23944                 | LR__3745
23944     10 4E 05 F1 | 	add	fp, #16
23948     A7 18 0A FB | 	rdlong	arg04, fp wz
2394c     10 4E 85 F1 | 	sub	fp, #16
23950     4C 00 90 5D |  if_ne	jmp	#LR__3747
23954     1A 4E 05 F1 | 	add	fp, #26
23958     A7 18 C2 FA | 	rdbyte	arg04, fp
2395c     1A 4E 85 F1 | 	sub	fp, #26
23960     10 18 CE F7 | 	test	arg04, #16 wz
23964     10 4E 05 51 |  if_ne	add	fp, #16
23968     A7 08 68 5C |  if_ne	wrlong	#4, fp
2396c     10 4E 85 51 |  if_ne	sub	fp, #16
23970     2C 00 90 5D |  if_ne	jmp	#LR__3746
23974     0C 4E 05 F1 | 	add	fp, #12
23978     A7 18 C2 FA | 	rdbyte	arg04, fp
2397c     0C 4E 85 F1 | 	sub	fp, #12
23980     02 18 CE F7 | 	test	arg04, #2 wz
23984     1A 4E 05 51 |  if_ne	add	fp, #26
23988     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
2398c     1A 4E 85 51 |  if_ne	sub	fp, #26
23990     01 1E CE 57 |  if_ne	test	local01, #1 wz
23994     10 4E 05 51 |  if_ne	add	fp, #16
23998     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2399c     10 4E 85 51 |  if_ne	sub	fp, #16
239a0                 | LR__3746
239a0                 | LR__3747
239a0                 | LR__3748
239a0     10 4E 05 F1 | 	add	fp, #16
239a4     A7 1E 0A FB | 	rdlong	local01, fp wz
239a8     10 4E 85 F1 | 	sub	fp, #16
239ac     60 00 90 5D |  if_ne	jmp	#LR__3749
239b0     0C 4E 05 F1 | 	add	fp, #12
239b4     A7 20 C2 FA | 	rdbyte	local02, fp
239b8     0C 4E 85 F1 | 	sub	fp, #12
239bc     08 20 CE F7 | 	test	local02, #8 wz
239c0     0C 4E 05 51 |  if_ne	add	fp, #12
239c4     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
239c8     40 20 46 55 |  if_ne	or	local02, #64
239cc     A7 20 42 5C |  if_ne	wrbyte	local02, fp
239d0     0C 4E 85 51 |  if_ne	sub	fp, #12
239d4     04 4E 05 F1 | 	add	fp, #4
239d8     A7 20 02 FB | 	rdlong	local02, fp
239dc     40 4E 05 F1 | 	add	fp, #64
239e0     A7 1E 02 FB | 	rdlong	local01, fp
239e4     30 1E 06 F1 | 	add	local01, #48
239e8     0F 1F 02 FB | 	rdlong	local01, local01
239ec     20 20 06 F1 | 	add	local02, #32
239f0     10 1F 62 FC | 	wrlong	local01, local02
239f4     40 4E 85 F1 | 	sub	fp, #64
239f8     A7 20 02 FB | 	rdlong	local02, fp
239fc     2C 4E 05 F1 | 	add	fp, #44
23a00     A7 1E 02 FB | 	rdlong	local01, fp
23a04     30 4E 85 F1 | 	sub	fp, #48
23a08     24 20 06 F1 | 	add	local02, #36
23a0c     10 1F 62 FC | 	wrlong	local01, local02
23a10                 | LR__3749
23a10     10 4E 05 F1 | 	add	fp, #16
23a14     A7 20 0A FB | 	rdlong	local02, fp wz
23a18     10 4E 85 F1 | 	sub	fp, #16
23a1c     F4 02 90 5D |  if_ne	jmp	#LR__3755
23a20     04 4E 05 F1 | 	add	fp, #4
23a24     A7 20 02 FB | 	rdlong	local02, fp
23a28     40 4E 05 F1 | 	add	fp, #64
23a2c     A7 12 02 FB | 	rdlong	arg01, fp
23a30     14 4E 85 F1 | 	sub	fp, #20
23a34     A7 14 02 FB | 	rdlong	arg02, fp
23a38     30 4E 85 F1 | 	sub	fp, #48
23a3c     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
23a40     08 20 06 F1 | 	add	local02, #8
23a44     10 FB 61 FC | 	wrlong	result1, local02
23a48     04 4E 05 F1 | 	add	fp, #4
23a4c     A7 20 02 FB | 	rdlong	local02, fp
23a50     2C 4E 05 F1 | 	add	fp, #44
23a54     A7 12 02 FB | 	rdlong	arg01, fp
23a58     1C 12 06 F1 | 	add	arg01, #28
23a5c                 | ' {
23a5c                 | ' 
23a5c                 | ' 	return *((DWORD*)ptr);
23a5c     09 FB 01 FB | 	rdlong	result1, arg01
23a60     0C 20 06 F1 | 	add	local02, #12
23a64     10 FB 61 FC | 	wrlong	result1, local02
23a68     2C 4E 85 F1 | 	sub	fp, #44
23a6c     A7 20 02 FB | 	rdlong	local02, fp
23a70     40 4E 05 F1 | 	add	fp, #64
23a74     A7 1E 02 FB | 	rdlong	local01, fp
23a78     10 1F 62 FC | 	wrlong	local01, local02
23a7c     40 4E 85 F1 | 	sub	fp, #64
23a80     A7 20 02 FB | 	rdlong	local02, fp
23a84     40 4E 05 F1 | 	add	fp, #64
23a88     A7 1E 02 FB | 	rdlong	local01, fp
23a8c     06 1E 06 F1 | 	add	local01, #6
23a90     0F 1F E2 FA | 	rdword	local01, local01
23a94     04 20 06 F1 | 	add	local02, #4
23a98     10 1F 52 FC | 	wrword	local01, local02
23a9c     40 4E 85 F1 | 	sub	fp, #64
23aa0     A7 20 02 FB | 	rdlong	local02, fp
23aa4     08 4E 05 F1 | 	add	fp, #8
23aa8     A7 1E C2 FA | 	rdbyte	local01, fp
23aac     10 20 06 F1 | 	add	local02, #16
23ab0     10 1F 42 FC | 	wrbyte	local01, local02
23ab4     08 4E 85 F1 | 	sub	fp, #8
23ab8     A7 20 02 FB | 	rdlong	local02, fp
23abc     11 20 06 F1 | 	add	local02, #17
23ac0     10 01 48 FC | 	wrbyte	#0, local02
23ac4     A7 20 02 FB | 	rdlong	local02, fp
23ac8     1C 20 06 F1 | 	add	local02, #28
23acc     10 01 68 FC | 	wrlong	#0, local02
23ad0     A7 20 02 FB | 	rdlong	local02, fp
23ad4     14 20 06 F1 | 	add	local02, #20
23ad8     10 01 68 FC | 	wrlong	#0, local02
23adc     A7 12 02 FB | 	rdlong	arg01, fp
23ae0     04 4E 85 F1 | 	sub	fp, #4
23ae4     28 12 06 F1 | 	add	arg01, #40
23ae8     00 14 06 F6 | 	mov	arg02, #0
23aec     09 16 C6 F9 | 	decod	arg03, #9
23af0     98 00 A0 FD | 	call	#\builtin_bytefill_
23af4     0C 4E 05 F1 | 	add	fp, #12
23af8     A7 20 C2 FA | 	rdbyte	local02, fp
23afc     0C 4E 85 F1 | 	sub	fp, #12
23b00     20 20 CE F7 | 	test	local02, #32 wz
23b04     0C 02 90 AD |  if_e	jmp	#LR__3754
23b08     04 4E 05 F1 | 	add	fp, #4
23b0c     A7 1E 02 FB | 	rdlong	local01, fp
23b10     04 4E 85 F1 | 	sub	fp, #4
23b14     0C 1E 06 F1 | 	add	local01, #12
23b18     0F 21 02 FB | 	rdlong	local02, local01
23b1c     01 20 16 F2 | 	cmp	local02, #1 wc
23b20     F0 01 90 CD |  if_b	jmp	#LR__3754
23b24     04 4E 05 F1 | 	add	fp, #4
23b28     A7 1E 02 FB | 	rdlong	local01, fp
23b2c     0F 21 02 F6 | 	mov	local02, local01
23b30     0C 1E 06 F1 | 	add	local01, #12
23b34     0F 1F 02 FB | 	rdlong	local01, local01
23b38     14 20 06 F1 | 	add	local02, #20
23b3c     10 1F 62 FC | 	wrlong	local01, local02
23b40     40 4E 05 F1 | 	add	fp, #64
23b44     A7 20 02 FB | 	rdlong	local02, fp
23b48     0A 20 06 F1 | 	add	local02, #10
23b4c     10 21 E2 FA | 	rdword	local02, local02
23b50     09 20 66 F0 | 	shl	local02, #9
23b54     08 4E 05 F1 | 	add	fp, #8
23b58     A7 20 62 FC | 	wrlong	local02, fp
23b5c     48 4E 85 F1 | 	sub	fp, #72
23b60     A7 20 02 FB | 	rdlong	local02, fp
23b64     08 20 06 F1 | 	add	local02, #8
23b68     10 1F 02 FB | 	rdlong	local01, local02
23b6c     4C 4E 05 F1 | 	add	fp, #76
23b70     A7 1E 62 FC | 	wrlong	local01, fp
23b74                 | ' 				fp->fptr = fp->obj.objsize;
23b74                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
23b74                 | ' 				clst = fp->obj.sclust;
23b74                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
23b74     4C 4E 85 F1 | 	sub	fp, #76
23b78     A7 20 02 FB | 	rdlong	local02, fp
23b7c     0C 20 06 F1 | 	add	local02, #12
23b80     10 1F 02 FB | 	rdlong	local01, local02
23b84     58 4E 05 F1 | 	add	fp, #88
23b88     A7 1E 62 FC | 	wrlong	local01, fp
23b8c     5C 4E 85 F1 | 	sub	fp, #92
23b90                 | LR__3750
23b90     10 4E 05 F1 | 	add	fp, #16
23b94     A7 20 0A FB | 	rdlong	local02, fp wz
23b98     10 4E 85 F1 | 	sub	fp, #16
23b9c     94 00 90 5D |  if_ne	jmp	#LR__3751
23ba0     5C 4E 05 F1 | 	add	fp, #92
23ba4     A7 20 02 FB | 	rdlong	local02, fp
23ba8     10 4E 85 F1 | 	sub	fp, #16
23bac     A7 1E 02 FB | 	rdlong	local01, fp
23bb0     4C 4E 85 F1 | 	sub	fp, #76
23bb4     0F 21 1A F2 | 	cmp	local02, local01 wcz
23bb8     78 00 90 ED |  if_be	jmp	#LR__3751
23bbc     04 4E 05 F1 | 	add	fp, #4
23bc0     A7 12 02 FB | 	rdlong	arg01, fp
23bc4     4C 4E 05 F1 | 	add	fp, #76
23bc8     A7 14 02 FB | 	rdlong	arg02, fp
23bcc     50 4E 85 F1 | 	sub	fp, #80
23bd0     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
23bd4     50 4E 05 F1 | 	add	fp, #80
23bd8     A7 FA 61 FC | 	wrlong	result1, fp
23bdc     50 4E 85 F1 | 	sub	fp, #80
23be0     02 FA 15 F2 | 	cmp	result1, #2 wc
23be4     10 4E 05 C1 |  if_b	add	fp, #16
23be8     A7 04 68 CC |  if_b	wrlong	#2, fp
23bec     10 4E 85 C1 |  if_b	sub	fp, #16
23bf0     50 4E 05 F1 | 	add	fp, #80
23bf4     A7 20 02 FB | 	rdlong	local02, fp
23bf8     50 4E 85 F1 | 	sub	fp, #80
23bfc     FF FF 7F FF 
23c00     FF 21 0E F2 | 	cmp	local02, ##-1 wz
23c04     10 4E 05 A1 |  if_e	add	fp, #16
23c08     A7 02 68 AC |  if_e	wrlong	#1, fp
23c0c     10 4E 85 A1 |  if_e	sub	fp, #16
23c10     5C 4E 05 F1 | 	add	fp, #92
23c14     A7 20 02 FB | 	rdlong	local02, fp
23c18     10 4E 85 F1 | 	sub	fp, #16
23c1c     A7 1E 02 FB | 	rdlong	local01, fp
23c20     0F 21 82 F1 | 	sub	local02, local01
23c24     10 4E 05 F1 | 	add	fp, #16
23c28     A7 20 62 FC | 	wrlong	local02, fp
23c2c     5C 4E 85 F1 | 	sub	fp, #92
23c30     5C FF 9F FD | 	jmp	#LR__3750
23c34                 | LR__3751
23c34     04 4E 05 F1 | 	add	fp, #4
23c38     A7 20 02 FB | 	rdlong	local02, fp
23c3c     4C 4E 05 F1 | 	add	fp, #76
23c40     A7 1E 02 FB | 	rdlong	local01, fp
23c44     18 20 06 F1 | 	add	local02, #24
23c48     10 1F 62 FC | 	wrlong	local01, local02
23c4c     40 4E 85 F1 | 	sub	fp, #64
23c50     A7 20 0A FB | 	rdlong	local02, fp wz
23c54     10 4E 85 F1 | 	sub	fp, #16
23c58     B8 00 90 5D |  if_ne	jmp	#LR__3753
23c5c     5C 4E 05 F1 | 	add	fp, #92
23c60     A7 1E 02 FB | 	rdlong	local01, fp
23c64     5C 4E 85 F1 | 	sub	fp, #92
23c68     FF 1F CE F7 | 	test	local01, #511 wz
23c6c     A4 00 90 AD |  if_e	jmp	#LR__3753
23c70     44 4E 05 F1 | 	add	fp, #68
23c74     A7 12 02 FB | 	rdlong	arg01, fp
23c78     0C 4E 05 F1 | 	add	fp, #12
23c7c     A7 14 02 FB | 	rdlong	arg02, fp
23c80     50 4E 85 F1 | 	sub	fp, #80
23c84     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
23c88     58 4E 05 F1 | 	add	fp, #88
23c8c     A7 FA 61 FC | 	wrlong	result1, fp
23c90     00 FA 4D F2 | 	cmps	result1, #0 wz
23c94     58 4E 85 F1 | 	sub	fp, #88
23c98     10 4E 05 A1 |  if_e	add	fp, #16
23c9c     A7 04 68 AC |  if_e	wrlong	#2, fp
23ca0     10 4E 85 A1 |  if_e	sub	fp, #16
23ca4     6C 00 90 AD |  if_e	jmp	#LR__3752
23ca8     04 4E 05 F1 | 	add	fp, #4
23cac     A7 20 02 FB | 	rdlong	local02, fp
23cb0     54 4E 05 F1 | 	add	fp, #84
23cb4     A7 1E 02 FB | 	rdlong	local01, fp
23cb8     04 4E 05 F1 | 	add	fp, #4
23cbc     A7 18 02 FB | 	rdlong	arg04, fp
23cc0     09 18 46 F0 | 	shr	arg04, #9
23cc4     0C 1F 02 F1 | 	add	local01, arg04
23cc8     1C 20 06 F1 | 	add	local02, #28
23ccc     10 1F 62 FC | 	wrlong	local01, local02
23cd0     18 4E 85 F1 | 	sub	fp, #24
23cd4     A7 20 02 FB | 	rdlong	local02, fp
23cd8     01 20 06 F1 | 	add	local02, #1
23cdc     10 13 C2 FA | 	rdbyte	arg01, local02
23ce0     40 4E 85 F1 | 	sub	fp, #64
23ce4     A7 20 02 FB | 	rdlong	local02, fp
23ce8     10 15 02 F6 | 	mov	arg02, local02
23cec     28 14 06 F1 | 	add	arg02, #40
23cf0     04 4E 85 F1 | 	sub	fp, #4
23cf4     1C 20 06 F1 | 	add	local02, #28
23cf8     10 17 02 FB | 	rdlong	arg03, local02
23cfc     01 18 06 F6 | 	mov	arg04, #1
23d00     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
23d04     00 FA 0D F2 | 	cmp	result1, #0 wz
23d08     10 4E 05 51 |  if_ne	add	fp, #16
23d0c     A7 02 68 5C |  if_ne	wrlong	#1, fp
23d10     10 4E 85 51 |  if_ne	sub	fp, #16
23d14                 | LR__3752
23d14                 | LR__3753
23d14                 | LR__3754
23d14                 | LR__3755
23d14                 | LR__3756
23d14     10 4E 05 F1 | 	add	fp, #16
23d18     A7 20 0A FB | 	rdlong	local02, fp wz
23d1c     10 4E 85 F1 | 	sub	fp, #16
23d20     04 4E 05 51 |  if_ne	add	fp, #4
23d24     A7 20 02 5B |  if_ne	rdlong	local02, fp
23d28     04 4E 85 51 |  if_ne	sub	fp, #4
23d2c     10 01 68 5C |  if_ne	wrlong	#0, local02
23d30                 | ' 
23d30                 | ' 	return res ;
23d30     10 4E 05 F1 | 	add	fp, #16
23d34     A7 FA 01 FB | 	rdlong	result1, fp
23d38     10 4E 85 F1 | 	sub	fp, #16
23d3c                 | LR__3757
23d3c     A7 F0 03 F6 | 	mov	ptra, fp
23d40     B2 00 A0 FD | 	call	#popregs_
23d44                 | _fatfs_cc_f_open_ret
23d44     2D 00 64 FD | 	ret
23d48                 | 
23d48                 | _fatfs_cc_f_read
23d48     0E 4A 05 F6 | 	mov	COUNT_, #14
23d4c     A8 00 A0 FD | 	call	#pushregs_
23d50     38 F0 07 F1 | 	add	ptra, #56
23d54     04 4E 05 F1 | 	add	fp, #4
23d58     A7 12 62 FC | 	wrlong	arg01, fp
23d5c     04 4E 05 F1 | 	add	fp, #4
23d60     A7 14 62 FC | 	wrlong	arg02, fp
23d64     04 4E 05 F1 | 	add	fp, #4
23d68     A7 16 62 FC | 	wrlong	arg03, fp
23d6c     04 4E 05 F1 | 	add	fp, #4
23d70     A7 18 62 FC | 	wrlong	arg04, fp
23d74     08 4E 85 F1 | 	sub	fp, #8
23d78     A7 FA 01 FB | 	rdlong	result1, fp
23d7c     2C 4E 05 F1 | 	add	fp, #44
23d80     A7 FA 61 FC | 	wrlong	result1, fp
23d84     24 4E 85 F1 | 	sub	fp, #36
23d88     A7 FA 01 FB | 	rdlong	result1, fp
23d8c     FD 00 68 FC | 	wrlong	#0, result1
23d90     0C 4E 85 F1 | 	sub	fp, #12
23d94     A7 12 02 FB | 	rdlong	arg01, fp
23d98     14 4E 05 F1 | 	add	fp, #20
23d9c     A7 14 02 F6 | 	mov	arg02, fp
23da0     18 4E 85 F1 | 	sub	fp, #24
23da4     24 F7 BF FD | 	call	#_fatfs_cc_validate
23da8     14 4E 05 F1 | 	add	fp, #20
23dac     A7 FA 61 FC | 	wrlong	result1, fp
23db0     00 FA 4D F2 | 	cmps	result1, #0 wz
23db4     14 4E 85 F1 | 	sub	fp, #20
23db8     20 00 90 5D |  if_ne	jmp	#LR__3760
23dbc     04 4E 05 F1 | 	add	fp, #4
23dc0     A7 14 02 FB | 	rdlong	arg02, fp
23dc4     11 14 06 F1 | 	add	arg02, #17
23dc8     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
23dcc     10 4E 05 F1 | 	add	fp, #16
23dd0     A7 14 62 FC | 	wrlong	arg02, fp
23dd4     14 4E 85 F1 | 	sub	fp, #20
23dd8     10 00 90 AD |  if_e	jmp	#LR__3761
23ddc                 | LR__3760
23ddc     14 4E 05 F1 | 	add	fp, #20
23de0     A7 FA 01 FB | 	rdlong	result1, fp
23de4     14 4E 85 F1 | 	sub	fp, #20
23de8     EC 05 90 FD | 	jmp	#LR__3780
23dec                 | LR__3761
23dec     04 4E 05 F1 | 	add	fp, #4
23df0     A7 18 02 FB | 	rdlong	arg04, fp
23df4     04 4E 85 F1 | 	sub	fp, #4
23df8     10 18 06 F1 | 	add	arg04, #16
23dfc     0C 19 C2 FA | 	rdbyte	arg04, arg04
23e00     01 18 CE F7 | 	test	arg04, #1 wz
23e04     07 FA 05 A6 |  if_e	mov	result1, #7
23e08     CC 05 90 AD |  if_e	jmp	#LR__3780
23e0c     04 4E 05 F1 | 	add	fp, #4
23e10     A7 1E 02 FB | 	rdlong	local01, fp
23e14     0F 21 02 F6 | 	mov	local02, local01
23e18     0C 20 06 F1 | 	add	local02, #12
23e1c     10 23 02 FB | 	rdlong	local03, local02
23e20     14 1E 06 F1 | 	add	local01, #20
23e24     0F 1F 02 FB | 	rdlong	local01, local01
23e28     0F 23 82 F1 | 	sub	local03, local01
23e2c     20 4E 05 F1 | 	add	fp, #32
23e30     A7 22 62 FC | 	wrlong	local03, fp
23e34     18 4E 85 F1 | 	sub	fp, #24
23e38     A7 24 02 FB | 	rdlong	local04, fp
23e3c     0C 4E 85 F1 | 	sub	fp, #12
23e40     11 25 1A F2 | 	cmp	local04, local03 wcz
23e44     24 4E 05 11 |  if_a	add	fp, #36
23e48     A7 24 02 1B |  if_a	rdlong	local04, fp
23e4c     18 4E 85 11 |  if_a	sub	fp, #24
23e50     A7 24 62 1C |  if_a	wrlong	local04, fp
23e54     0C 4E 85 11 |  if_a	sub	fp, #12
23e58                 | ' 
23e58                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
23e58                 | LR__3762
23e58     0C 4E 05 F1 | 	add	fp, #12
23e5c     A7 20 02 FB | 	rdlong	local02, fp
23e60     0C 4E 85 F1 | 	sub	fp, #12
23e64     10 25 02 F6 | 	mov	local04, local02
23e68     01 24 16 F2 | 	cmp	local04, #1 wc
23e6c     64 05 90 CD |  if_b	jmp	#LR__3779
23e70     04 4E 05 F1 | 	add	fp, #4
23e74     A7 22 02 FB | 	rdlong	local03, fp
23e78     04 4E 85 F1 | 	sub	fp, #4
23e7c     14 22 06 F1 | 	add	local03, #20
23e80     11 23 02 FB | 	rdlong	local03, local03
23e84     FF 23 CE F7 | 	test	local03, #511 wz
23e88     3C 04 90 5D |  if_ne	jmp	#LR__3777
23e8c     04 4E 05 F1 | 	add	fp, #4
23e90     A7 1E 02 FB | 	rdlong	local01, fp
23e94     14 1E 06 F1 | 	add	local01, #20
23e98     0F 23 02 FB | 	rdlong	local03, local01
23e9c     09 22 46 F0 | 	shr	local03, #9
23ea0     14 4E 05 F1 | 	add	fp, #20
23ea4     A7 26 02 FB | 	rdlong	local05, fp
23ea8     13 29 02 F6 | 	mov	local06, local05
23eac     0A 28 06 F1 | 	add	local06, #10
23eb0     14 2B E2 FA | 	rdword	local07, local06
23eb4     0A 28 86 F1 | 	sub	local06, #10
23eb8     15 2D 32 F9 | 	getword	local08, local07, #0
23ebc     01 2C 86 F1 | 	sub	local08, #1
23ec0     16 23 0A F5 | 	and	local03, local08 wz
23ec4     18 4E 05 F1 | 	add	fp, #24
23ec8     A7 22 62 FC | 	wrlong	local03, fp
23ecc     30 4E 85 F1 | 	sub	fp, #48
23ed0     E0 00 90 5D |  if_ne	jmp	#LR__3767
23ed4     04 4E 05 F1 | 	add	fp, #4
23ed8     A7 22 02 FB | 	rdlong	local03, fp
23edc     04 4E 85 F1 | 	sub	fp, #4
23ee0     14 22 06 F1 | 	add	local03, #20
23ee4     11 23 0A FB | 	rdlong	local03, local03 wz
23ee8     20 00 90 5D |  if_ne	jmp	#LR__3763
23eec     04 4E 05 F1 | 	add	fp, #4
23ef0     A7 22 02 FB | 	rdlong	local03, fp
23ef4     08 22 06 F1 | 	add	local03, #8
23ef8     11 23 02 FB | 	rdlong	local03, local03
23efc     18 4E 05 F1 | 	add	fp, #24
23f00     A7 22 62 FC | 	wrlong	local03, fp
23f04     1C 4E 85 F1 | 	sub	fp, #28
23f08     28 00 90 FD | 	jmp	#LR__3764
23f0c                 | LR__3763
23f0c     04 4E 05 F1 | 	add	fp, #4
23f10     A7 2C 02 FB | 	rdlong	local08, fp
23f14     16 13 02 F6 | 	mov	arg01, local08
23f18     04 4E 85 F1 | 	sub	fp, #4
23f1c     18 2C 06 F1 | 	add	local08, #24
23f20     16 15 02 FB | 	rdlong	arg02, local08
23f24     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
23f28     1C 4E 05 F1 | 	add	fp, #28
23f2c     A7 FA 61 FC | 	wrlong	result1, fp
23f30     1C 4E 85 F1 | 	sub	fp, #28
23f34                 | LR__3764
23f34     1C 4E 05 F1 | 	add	fp, #28
23f38     A7 22 02 FB | 	rdlong	local03, fp
23f3c     1C 4E 85 F1 | 	sub	fp, #28
23f40     02 22 16 F2 | 	cmp	local03, #2 wc
23f44     1C 00 90 3D |  if_ae	jmp	#LR__3765
23f48     04 4E 05 F1 | 	add	fp, #4
23f4c     A7 22 02 FB | 	rdlong	local03, fp
23f50     04 4E 85 F1 | 	sub	fp, #4
23f54     11 22 06 F1 | 	add	local03, #17
23f58     11 05 48 FC | 	wrbyte	#2, local03
23f5c     02 FA 05 F6 | 	mov	result1, #2
23f60     74 04 90 FD | 	jmp	#LR__3780
23f64                 | LR__3765
23f64     1C 4E 05 F1 | 	add	fp, #28
23f68     A7 22 02 FB | 	rdlong	local03, fp
23f6c     1C 4E 85 F1 | 	sub	fp, #28
23f70     FF FF 7F FF 
23f74     FF 23 0E F2 | 	cmp	local03, ##-1 wz
23f78     1C 00 90 5D |  if_ne	jmp	#LR__3766
23f7c     04 4E 05 F1 | 	add	fp, #4
23f80     A7 22 02 FB | 	rdlong	local03, fp
23f84     04 4E 85 F1 | 	sub	fp, #4
23f88     11 22 06 F1 | 	add	local03, #17
23f8c     11 03 48 FC | 	wrbyte	#1, local03
23f90     01 FA 05 F6 | 	mov	result1, #1
23f94     40 04 90 FD | 	jmp	#LR__3780
23f98                 | LR__3766
23f98     04 4E 05 F1 | 	add	fp, #4
23f9c     A7 22 02 FB | 	rdlong	local03, fp
23fa0     18 4E 05 F1 | 	add	fp, #24
23fa4     A7 2C 02 FB | 	rdlong	local08, fp
23fa8     1C 4E 85 F1 | 	sub	fp, #28
23fac     18 22 06 F1 | 	add	local03, #24
23fb0     11 2D 62 FC | 	wrlong	local08, local03
23fb4                 | LR__3767
23fb4     18 4E 05 F1 | 	add	fp, #24
23fb8     A7 12 02 FB | 	rdlong	arg01, fp
23fbc     14 4E 85 F1 | 	sub	fp, #20
23fc0     A7 22 02 FB | 	rdlong	local03, fp
23fc4     04 4E 85 F1 | 	sub	fp, #4
23fc8     18 22 06 F1 | 	add	local03, #24
23fcc     11 15 02 FB | 	rdlong	arg02, local03
23fd0     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
23fd4     20 4E 05 F1 | 	add	fp, #32
23fd8     A7 FA 61 FC | 	wrlong	result1, fp
23fdc     20 4E 85 F1 | 	sub	fp, #32
23fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
23fe4     1C 00 90 5D |  if_ne	jmp	#LR__3768
23fe8     04 4E 05 F1 | 	add	fp, #4
23fec     A7 22 02 FB | 	rdlong	local03, fp
23ff0     04 4E 85 F1 | 	sub	fp, #4
23ff4     11 22 06 F1 | 	add	local03, #17
23ff8     11 05 48 FC | 	wrbyte	#2, local03
23ffc     02 FA 05 F6 | 	mov	result1, #2
24000     D4 03 90 FD | 	jmp	#LR__3780
24004                 | LR__3768
24004     20 4E 05 F1 | 	add	fp, #32
24008     A7 22 02 FB | 	rdlong	local03, fp
2400c     10 4E 05 F1 | 	add	fp, #16
24010     A7 2C 02 FB | 	rdlong	local08, fp
24014     16 23 02 F1 | 	add	local03, local08
24018     10 4E 85 F1 | 	sub	fp, #16
2401c     A7 22 62 FC | 	wrlong	local03, fp
24020     14 4E 85 F1 | 	sub	fp, #20
24024     A7 22 02 FB | 	rdlong	local03, fp
24028     09 22 46 F0 | 	shr	local03, #9
2402c     20 4E 05 F1 | 	add	fp, #32
24030     A7 22 62 FC | 	wrlong	local03, fp
24034     2C 4E 85 F1 | 	sub	fp, #44
24038     01 22 16 F2 | 	cmp	local03, #1 wc
2403c     5C 01 90 CD |  if_b	jmp	#LR__3772
24040     30 4E 05 F1 | 	add	fp, #48
24044     A7 22 02 FB | 	rdlong	local03, fp
24048     04 4E 85 F1 | 	sub	fp, #4
2404c     A7 2C 02 FB | 	rdlong	local08, fp
24050     16 23 02 F1 | 	add	local03, local08
24054     14 4E 85 F1 | 	sub	fp, #20
24058     A7 2C 02 FB | 	rdlong	local08, fp
2405c     18 4E 85 F1 | 	sub	fp, #24
24060     0A 2C 06 F1 | 	add	local08, #10
24064     16 2D E2 FA | 	rdword	local08, local08
24068     16 23 1A F2 | 	cmp	local03, local08 wcz
2406c     28 00 90 ED |  if_be	jmp	#LR__3769
24070     18 4E 05 F1 | 	add	fp, #24
24074     A7 1E 02 FB | 	rdlong	local01, fp
24078     0A 1E 06 F1 | 	add	local01, #10
2407c     0F 23 E2 FA | 	rdword	local03, local01
24080     18 4E 05 F1 | 	add	fp, #24
24084     A7 2C 02 FB | 	rdlong	local08, fp
24088     16 23 82 F1 | 	sub	local03, local08
2408c     04 4E 85 F1 | 	sub	fp, #4
24090     A7 22 62 FC | 	wrlong	local03, fp
24094     2C 4E 85 F1 | 	sub	fp, #44
24098                 | LR__3769
24098     18 4E 05 F1 | 	add	fp, #24
2409c     A7 1E 02 FB | 	rdlong	local01, fp
240a0     01 1E 06 F1 | 	add	local01, #1
240a4     0F 13 C2 FA | 	rdbyte	arg01, local01
240a8     1C 4E 05 F1 | 	add	fp, #28
240ac     A7 14 02 FB | 	rdlong	arg02, fp
240b0     14 4E 85 F1 | 	sub	fp, #20
240b4     A7 16 02 FB | 	rdlong	arg03, fp
240b8     0C 4E 05 F1 | 	add	fp, #12
240bc     A7 18 02 FB | 	rdlong	arg04, fp
240c0     2C 4E 85 F1 | 	sub	fp, #44
240c4     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
240c8     00 FA 0D F2 | 	cmp	result1, #0 wz
240cc     1C 00 90 AD |  if_e	jmp	#LR__3770
240d0     04 4E 05 F1 | 	add	fp, #4
240d4     A7 22 02 FB | 	rdlong	local03, fp
240d8     04 4E 85 F1 | 	sub	fp, #4
240dc     11 22 06 F1 | 	add	local03, #17
240e0     11 03 48 FC | 	wrbyte	#1, local03
240e4     01 FA 05 F6 | 	mov	result1, #1
240e8     EC 02 90 FD | 	jmp	#LR__3780
240ec                 | LR__3770
240ec     04 4E 05 F1 | 	add	fp, #4
240f0     A7 1E 02 FB | 	rdlong	local01, fp
240f4     04 4E 85 F1 | 	sub	fp, #4
240f8     10 1E 06 F1 | 	add	local01, #16
240fc     0F 23 C2 FA | 	rdbyte	local03, local01
24100     80 22 CE F7 | 	test	local03, #128 wz
24104     78 00 90 AD |  if_e	jmp	#LR__3771
24108     04 4E 05 F1 | 	add	fp, #4
2410c     A7 2C 02 FB | 	rdlong	local08, fp
24110     1C 2C 06 F1 | 	add	local08, #28
24114     16 2D 02 FB | 	rdlong	local08, local08
24118     1C 4E 05 F1 | 	add	fp, #28
2411c     A7 2E 02 FB | 	rdlong	local09, fp
24120     17 2D 82 F1 | 	sub	local08, local09
24124     0C 4E 05 F1 | 	add	fp, #12
24128     A7 30 02 FB | 	rdlong	local10, fp
2412c     2C 4E 85 F1 | 	sub	fp, #44
24130     18 33 02 F6 | 	mov	local11, local10
24134     19 2D 12 F2 | 	cmp	local08, local11 wc
24138     44 00 90 3D |  if_ae	jmp	#LR__3771
2413c     34 4E 05 F1 | 	add	fp, #52
24140     A7 12 02 FB | 	rdlong	arg01, fp
24144     30 4E 85 F1 | 	sub	fp, #48
24148     A7 14 02 FB | 	rdlong	arg02, fp
2414c     0A 33 02 F6 | 	mov	local11, arg02
24150     1C 32 06 F1 | 	add	local11, #28
24154     19 2F 02 FB | 	rdlong	local09, local11
24158     1C 4E 05 F1 | 	add	fp, #28
2415c     A7 26 02 FB | 	rdlong	local05, fp
24160     13 2F 82 F1 | 	sub	local09, local05
24164     09 2E 66 F0 | 	shl	local09, #9
24168     17 33 02 F6 | 	mov	local11, local09
2416c     17 13 02 F1 | 	add	arg01, local09
24170     20 4E 85 F1 | 	sub	fp, #32
24174     28 14 06 F1 | 	add	arg02, #40
24178     09 16 C6 F9 | 	decod	arg03, #9
2417c     50 49 BF FD | 	call	#__system____builtin_memmove
24180                 | LR__3771
24180     2C 4E 05 F1 | 	add	fp, #44
24184     A7 22 02 FB | 	rdlong	local03, fp
24188     09 22 66 F0 | 	shl	local03, #9
2418c     04 4E 85 F1 | 	sub	fp, #4
24190     A7 22 62 FC | 	wrlong	local03, fp
24194     28 4E 85 F1 | 	sub	fp, #40
24198                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
24198                 | ' 				}
24198                 | ' 
24198                 | ' 
24198                 | ' 				rcnt =  ((UINT) 512 )  * cc;
24198                 | ' 				continue;
24198     B4 01 90 FD | 	jmp	#LR__3778
2419c                 | LR__3772
2419c     04 4E 05 F1 | 	add	fp, #4
241a0     A7 22 02 FB | 	rdlong	local03, fp
241a4     1C 22 06 F1 | 	add	local03, #28
241a8     11 23 02 FB | 	rdlong	local03, local03
241ac     1C 4E 05 F1 | 	add	fp, #28
241b0     A7 1E 02 FB | 	rdlong	local01, fp
241b4     20 4E 85 F1 | 	sub	fp, #32
241b8     0F 23 0A F2 | 	cmp	local03, local01 wz
241bc     EC 00 90 AD |  if_e	jmp	#LR__3776
241c0     04 4E 05 F1 | 	add	fp, #4
241c4     A7 1E 02 FB | 	rdlong	local01, fp
241c8     04 4E 85 F1 | 	sub	fp, #4
241cc     10 1E 06 F1 | 	add	local01, #16
241d0     0F 23 C2 FA | 	rdbyte	local03, local01
241d4     80 22 CE F7 | 	test	local03, #128 wz
241d8     7C 00 90 AD |  if_e	jmp	#LR__3774
241dc     18 4E 05 F1 | 	add	fp, #24
241e0     A7 1E 02 FB | 	rdlong	local01, fp
241e4     01 1E 06 F1 | 	add	local01, #1
241e8     0F 13 C2 FA | 	rdbyte	arg01, local01
241ec     14 4E 85 F1 | 	sub	fp, #20
241f0     A7 22 02 FB | 	rdlong	local03, fp
241f4     11 15 02 F6 | 	mov	arg02, local03
241f8     28 14 06 F1 | 	add	arg02, #40
241fc     04 4E 85 F1 | 	sub	fp, #4
24200     1C 22 06 F1 | 	add	local03, #28
24204     11 17 02 FB | 	rdlong	arg03, local03
24208     01 18 06 F6 | 	mov	arg04, #1
2420c     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
24210     00 FA 0D F2 | 	cmp	result1, #0 wz
24214     1C 00 90 AD |  if_e	jmp	#LR__3773
24218     04 4E 05 F1 | 	add	fp, #4
2421c     A7 22 02 FB | 	rdlong	local03, fp
24220     04 4E 85 F1 | 	sub	fp, #4
24224     11 22 06 F1 | 	add	local03, #17
24228     11 03 48 FC | 	wrbyte	#1, local03
2422c     01 FA 05 F6 | 	mov	result1, #1
24230     A4 01 90 FD | 	jmp	#LR__3780
24234                 | LR__3773
24234     04 4E 05 F1 | 	add	fp, #4
24238     A7 32 02 FB | 	rdlong	local11, fp
2423c     19 23 02 F6 | 	mov	local03, local11
24240     04 4E 85 F1 | 	sub	fp, #4
24244     10 32 06 F1 | 	add	local11, #16
24248     19 33 C2 FA | 	rdbyte	local11, local11
2424c     7F 32 06 F5 | 	and	local11, #127
24250     10 22 06 F1 | 	add	local03, #16
24254     11 33 42 FC | 	wrbyte	local11, local03
24258                 | LR__3774
24258     18 4E 05 F1 | 	add	fp, #24
2425c     A7 1E 02 FB | 	rdlong	local01, fp
24260     01 1E 06 F1 | 	add	local01, #1
24264     0F 13 C2 FA | 	rdbyte	arg01, local01
24268     14 4E 85 F1 | 	sub	fp, #20
2426c     A7 14 02 FB | 	rdlong	arg02, fp
24270     28 14 06 F1 | 	add	arg02, #40
24274     1C 4E 05 F1 | 	add	fp, #28
24278     A7 16 02 FB | 	rdlong	arg03, fp
2427c     20 4E 85 F1 | 	sub	fp, #32
24280     01 18 06 F6 | 	mov	arg04, #1
24284     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
24288     00 FA 0D F2 | 	cmp	result1, #0 wz
2428c     1C 00 90 AD |  if_e	jmp	#LR__3775
24290     04 4E 05 F1 | 	add	fp, #4
24294     A7 22 02 FB | 	rdlong	local03, fp
24298     04 4E 85 F1 | 	sub	fp, #4
2429c     11 22 06 F1 | 	add	local03, #17
242a0     11 03 48 FC | 	wrbyte	#1, local03
242a4     01 FA 05 F6 | 	mov	result1, #1
242a8     2C 01 90 FD | 	jmp	#LR__3780
242ac                 | LR__3775
242ac                 | LR__3776
242ac     04 4E 05 F1 | 	add	fp, #4
242b0     A7 22 02 FB | 	rdlong	local03, fp
242b4     1C 4E 05 F1 | 	add	fp, #28
242b8     A7 32 02 FB | 	rdlong	local11, fp
242bc     20 4E 85 F1 | 	sub	fp, #32
242c0     1C 22 06 F1 | 	add	local03, #28
242c4     11 33 62 FC | 	wrlong	local11, local03
242c8                 | LR__3777
242c8     04 4E 05 F1 | 	add	fp, #4
242cc     A7 1E 02 FB | 	rdlong	local01, fp
242d0     14 1E 06 F1 | 	add	local01, #20
242d4     0F 33 02 FB | 	rdlong	local11, local01
242d8     FF 33 06 F5 | 	and	local11, #511
242dc     09 22 C6 F9 | 	decod	local03, #9
242e0     19 23 82 F1 | 	sub	local03, local11
242e4     24 4E 05 F1 | 	add	fp, #36
242e8     A7 22 62 FC | 	wrlong	local03, fp
242ec     1C 4E 85 F1 | 	sub	fp, #28
242f0     A7 32 02 FB | 	rdlong	local11, fp
242f4     0C 4E 85 F1 | 	sub	fp, #12
242f8     19 23 1A F2 | 	cmp	local03, local11 wcz
242fc     0C 4E 05 11 |  if_a	add	fp, #12
24300     A7 22 02 1B |  if_a	rdlong	local03, fp
24304     1C 4E 05 11 |  if_a	add	fp, #28
24308     A7 22 62 1C |  if_a	wrlong	local03, fp
2430c     28 4E 85 11 |  if_a	sub	fp, #40
24310     34 4E 05 F1 | 	add	fp, #52
24314     A7 12 02 FB | 	rdlong	arg01, fp
24318     30 4E 85 F1 | 	sub	fp, #48
2431c     A7 28 02 FB | 	rdlong	local06, fp
24320     14 15 02 F6 | 	mov	arg02, local06
24324     28 14 06 F1 | 	add	arg02, #40
24328     14 28 06 F1 | 	add	local06, #20
2432c     14 33 02 FB | 	rdlong	local11, local06
24330     19 2F 02 F6 | 	mov	local09, local11
24334     17 31 02 F6 | 	mov	local10, local09
24338     FF 31 06 F5 | 	and	local10, #511
2433c     18 15 02 F1 | 	add	arg02, local10
24340     24 4E 05 F1 | 	add	fp, #36
24344     A7 16 02 FB | 	rdlong	arg03, fp
24348     28 4E 85 F1 | 	sub	fp, #40
2434c     80 47 BF FD | 	call	#__system____builtin_memmove
24350                 | LR__3778
24350     0C 4E 05 F1 | 	add	fp, #12
24354     A7 22 02 FB | 	rdlong	local03, fp
24358     1C 4E 05 F1 | 	add	fp, #28
2435c     A7 2C 02 FB | 	rdlong	local08, fp
24360     16 23 82 F1 | 	sub	local03, local08
24364     1C 4E 85 F1 | 	sub	fp, #28
24368     A7 22 62 FC | 	wrlong	local03, fp
2436c     04 4E 05 F1 | 	add	fp, #4
24370     A7 1E 02 FB | 	rdlong	local01, fp
24374     0F 2B 02 FB | 	rdlong	local07, local01
24378     18 4E 05 F1 | 	add	fp, #24
2437c     A7 2C 02 FB | 	rdlong	local08, fp
24380     16 2B 02 F1 | 	add	local07, local08
24384     0F 2B 62 FC | 	wrlong	local07, local01
24388     0C 4E 05 F1 | 	add	fp, #12
2438c     A7 22 02 FB | 	rdlong	local03, fp
24390     0C 4E 85 F1 | 	sub	fp, #12
24394     A7 34 02 FB | 	rdlong	local12, fp
24398     1A 23 02 F1 | 	add	local03, local12
2439c     0C 4E 05 F1 | 	add	fp, #12
243a0     A7 22 62 FC | 	wrlong	local03, fp
243a4     30 4E 85 F1 | 	sub	fp, #48
243a8     A7 36 02 FB | 	rdlong	local13, fp
243ac     1B 23 02 F6 | 	mov	local03, local13
243b0     14 36 06 F1 | 	add	local13, #20
243b4     1B 39 02 FB | 	rdlong	local14, local13
243b8     24 4E 05 F1 | 	add	fp, #36
243bc     A7 28 02 FB | 	rdlong	local06, fp
243c0     28 4E 85 F1 | 	sub	fp, #40
243c4     14 39 02 F1 | 	add	local14, local06
243c8     14 22 06 F1 | 	add	local03, #20
243cc     11 39 62 FC | 	wrlong	local14, local03
243d0     84 FA 9F FD | 	jmp	#LR__3762
243d4                 | LR__3779
243d4                 | ' 
243d4                 | ' 
243d4                 | ' 
243d4                 | ' 
243d4                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
243d4                 | ' 
243d4                 | ' 	}
243d4                 | ' 
243d4                 | ' 	return FR_OK ;
243d4     00 FA 05 F6 | 	mov	result1, #0
243d8                 | LR__3780
243d8     A7 F0 03 F6 | 	mov	ptra, fp
243dc     B2 00 A0 FD | 	call	#popregs_
243e0                 | _fatfs_cc_f_read_ret
243e0     2D 00 64 FD | 	ret
243e4                 | 
243e4                 | _fatfs_cc_f_write
243e4     15 4A 05 F6 | 	mov	COUNT_, #21
243e8     A8 00 A0 FD | 	call	#pushregs_
243ec     34 F0 07 F1 | 	add	ptra, #52
243f0     04 4E 05 F1 | 	add	fp, #4
243f4     A7 12 62 FC | 	wrlong	arg01, fp
243f8     04 4E 05 F1 | 	add	fp, #4
243fc     A7 14 62 FC | 	wrlong	arg02, fp
24400     04 4E 05 F1 | 	add	fp, #4
24404     A7 16 62 FC | 	wrlong	arg03, fp
24408     04 4E 05 F1 | 	add	fp, #4
2440c     A7 18 62 FC | 	wrlong	arg04, fp
24410     08 4E 85 F1 | 	sub	fp, #8
24414     A7 FA 01 FB | 	rdlong	result1, fp
24418     28 4E 05 F1 | 	add	fp, #40
2441c     A7 FA 61 FC | 	wrlong	result1, fp
24420     20 4E 85 F1 | 	sub	fp, #32
24424     A7 FA 01 FB | 	rdlong	result1, fp
24428     FD 00 68 FC | 	wrlong	#0, result1
2442c     0C 4E 85 F1 | 	sub	fp, #12
24430     A7 12 02 FB | 	rdlong	arg01, fp
24434     14 4E 05 F1 | 	add	fp, #20
24438     A7 14 02 F6 | 	mov	arg02, fp
2443c     18 4E 85 F1 | 	sub	fp, #24
24440     88 F0 BF FD | 	call	#_fatfs_cc_validate
24444     14 4E 05 F1 | 	add	fp, #20
24448     A7 FA 61 FC | 	wrlong	result1, fp
2444c     00 FA 4D F2 | 	cmps	result1, #0 wz
24450     14 4E 85 F1 | 	sub	fp, #20
24454     20 00 90 5D |  if_ne	jmp	#LR__3790
24458     04 4E 05 F1 | 	add	fp, #4
2445c     A7 14 02 FB | 	rdlong	arg02, fp
24460     11 14 06 F1 | 	add	arg02, #17
24464     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
24468     10 4E 05 F1 | 	add	fp, #16
2446c     A7 14 62 FC | 	wrlong	arg02, fp
24470     14 4E 85 F1 | 	sub	fp, #20
24474     10 00 90 AD |  if_e	jmp	#LR__3791
24478                 | LR__3790
24478     14 4E 05 F1 | 	add	fp, #20
2447c     A7 FA 01 FB | 	rdlong	result1, fp
24480     14 4E 85 F1 | 	sub	fp, #20
24484     44 07 90 FD | 	jmp	#LR__3813
24488                 | LR__3791
24488     04 4E 05 F1 | 	add	fp, #4
2448c     A7 14 02 FB | 	rdlong	arg02, fp
24490     04 4E 85 F1 | 	sub	fp, #4
24494     10 14 06 F1 | 	add	arg02, #16
24498     0A 15 C2 FA | 	rdbyte	arg02, arg02
2449c     02 14 CE F7 | 	test	arg02, #2 wz
244a0     07 FA 05 A6 |  if_e	mov	result1, #7
244a4     24 07 90 AD |  if_e	jmp	#LR__3813
244a8     04 4E 05 F1 | 	add	fp, #4
244ac     A7 14 02 FB | 	rdlong	arg02, fp
244b0     0A 13 02 F6 | 	mov	arg01, arg02
244b4     14 12 06 F1 | 	add	arg01, #20
244b8     09 13 02 FB | 	rdlong	arg01, arg01
244bc     08 4E 05 F1 | 	add	fp, #8
244c0     A7 FA 01 FB | 	rdlong	result1, fp
244c4     FD 12 02 F1 | 	add	arg01, result1
244c8     0C 4E 85 F1 | 	sub	fp, #12
244cc     14 14 06 F1 | 	add	arg02, #20
244d0     0A FB 01 FB | 	rdlong	result1, arg02
244d4     FD 12 12 F2 | 	cmp	arg01, result1 wc
244d8     24 00 90 3D |  if_ae	jmp	#LR__3792
244dc     04 4E 05 F1 | 	add	fp, #4
244e0     A7 14 02 FB | 	rdlong	arg02, fp
244e4     01 FA 65 F6 | 	neg	result1, #1
244e8     14 14 06 F1 | 	add	arg02, #20
244ec     0A 15 02 FB | 	rdlong	arg02, arg02
244f0     0A FB 81 F1 | 	sub	result1, arg02
244f4     08 4E 05 F1 | 	add	fp, #8
244f8     A7 FA 61 FC | 	wrlong	result1, fp
244fc     0C 4E 85 F1 | 	sub	fp, #12
24500                 | LR__3792
24500                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
24500                 | ' 	}
24500                 | ' 
24500                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
24500                 | LR__3793
24500     0C 4E 05 F1 | 	add	fp, #12
24504     A7 FA 01 FB | 	rdlong	result1, fp
24508     0C 4E 85 F1 | 	sub	fp, #12
2450c     01 FA 15 F2 | 	cmp	result1, #1 wc
24510     90 06 90 CD |  if_b	jmp	#LR__3812
24514     04 4E 05 F1 | 	add	fp, #4
24518     A7 FA 01 FB | 	rdlong	result1, fp
2451c     04 4E 85 F1 | 	sub	fp, #4
24520     14 FA 05 F1 | 	add	result1, #20
24524     FD FA 01 FB | 	rdlong	result1, result1
24528     FF FB CD F7 | 	test	result1, #511 wz
2452c     D8 04 90 5D |  if_ne	jmp	#LR__3808
24530     04 4E 05 F1 | 	add	fp, #4
24534     A7 FA 01 FB | 	rdlong	result1, fp
24538     14 FA 05 F1 | 	add	result1, #20
2453c     FD FA 01 FB | 	rdlong	result1, result1
24540     09 FA 45 F0 | 	shr	result1, #9
24544     14 4E 05 F1 | 	add	fp, #20
24548     A7 14 02 FB | 	rdlong	arg02, fp
2454c     0A 14 06 F1 | 	add	arg02, #10
24550     0A 19 E2 FA | 	rdword	arg04, arg02
24554     0C 15 32 F9 | 	getword	arg02, arg04, #0
24558     01 14 86 F1 | 	sub	arg02, #1
2455c     0A FB 09 F5 | 	and	result1, arg02 wz
24560     14 4E 05 F1 | 	add	fp, #20
24564     A7 FA 61 FC | 	wrlong	result1, fp
24568     2C 4E 85 F1 | 	sub	fp, #44
2456c     44 01 90 5D |  if_ne	jmp	#LR__3799
24570     04 4E 05 F1 | 	add	fp, #4
24574     A7 FA 01 FB | 	rdlong	result1, fp
24578     04 4E 85 F1 | 	sub	fp, #4
2457c     14 FA 05 F1 | 	add	result1, #20
24580     FD 14 0A FB | 	rdlong	arg02, result1 wz
24584     44 00 90 5D |  if_ne	jmp	#LR__3794
24588     04 4E 05 F1 | 	add	fp, #4
2458c     A7 14 02 FB | 	rdlong	arg02, fp
24590     08 14 06 F1 | 	add	arg02, #8
24594     0A 15 0A FB | 	rdlong	arg02, arg02 wz
24598     18 4E 05 F1 | 	add	fp, #24
2459c     A7 14 62 FC | 	wrlong	arg02, fp
245a0     1C 4E 85 F1 | 	sub	fp, #28
245a4     4C 00 90 5D |  if_ne	jmp	#LR__3795
245a8     04 4E 05 F1 | 	add	fp, #4
245ac     A7 12 02 FB | 	rdlong	arg01, fp
245b0     04 4E 85 F1 | 	sub	fp, #4
245b4     00 14 06 F6 | 	mov	arg02, #0
245b8     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
245bc     1C 4E 05 F1 | 	add	fp, #28
245c0     A7 FA 61 FC | 	wrlong	result1, fp
245c4     1C 4E 85 F1 | 	sub	fp, #28
245c8     28 00 90 FD | 	jmp	#LR__3795
245cc                 | LR__3794
245cc     04 4E 05 F1 | 	add	fp, #4
245d0     A7 18 02 FB | 	rdlong	arg04, fp
245d4     0C 13 02 F6 | 	mov	arg01, arg04
245d8     04 4E 85 F1 | 	sub	fp, #4
245dc     18 18 06 F1 | 	add	arg04, #24
245e0     0C 15 02 FB | 	rdlong	arg02, arg04
245e4     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
245e8     1C 4E 05 F1 | 	add	fp, #28
245ec     A7 FA 61 FC | 	wrlong	result1, fp
245f0     1C 4E 85 F1 | 	sub	fp, #28
245f4                 | LR__3795
245f4     1C 4E 05 F1 | 	add	fp, #28
245f8     A7 FA 09 FB | 	rdlong	result1, fp wz
245fc     1C 4E 85 F1 | 	sub	fp, #28
24600     A0 05 90 AD |  if_e	jmp	#LR__3812
24604     1C 4E 05 F1 | 	add	fp, #28
24608     A7 FA 01 FB | 	rdlong	result1, fp
2460c     1C 4E 85 F1 | 	sub	fp, #28
24610     01 FA 0D F2 | 	cmp	result1, #1 wz
24614     1C 00 90 5D |  if_ne	jmp	#LR__3796
24618     04 4E 05 F1 | 	add	fp, #4
2461c     A7 FA 01 FB | 	rdlong	result1, fp
24620     04 4E 85 F1 | 	sub	fp, #4
24624     11 FA 05 F1 | 	add	result1, #17
24628     FD 04 48 FC | 	wrbyte	#2, result1
2462c     02 FA 05 F6 | 	mov	result1, #2
24630     98 05 90 FD | 	jmp	#LR__3813
24634                 | LR__3796
24634     1C 4E 05 F1 | 	add	fp, #28
24638     A7 FA 01 FB | 	rdlong	result1, fp
2463c     1C 4E 85 F1 | 	sub	fp, #28
24640     FF FF 7F FF 
24644     FF FB 0D F2 | 	cmp	result1, ##-1 wz
24648     1C 00 90 5D |  if_ne	jmp	#LR__3797
2464c     04 4E 05 F1 | 	add	fp, #4
24650     A7 FA 01 FB | 	rdlong	result1, fp
24654     04 4E 85 F1 | 	sub	fp, #4
24658     11 FA 05 F1 | 	add	result1, #17
2465c     FD 02 48 FC | 	wrbyte	#1, result1
24660     01 FA 05 F6 | 	mov	result1, #1
24664     64 05 90 FD | 	jmp	#LR__3813
24668                 | LR__3797
24668     04 4E 05 F1 | 	add	fp, #4
2466c     A7 FA 01 FB | 	rdlong	result1, fp
24670     18 4E 05 F1 | 	add	fp, #24
24674     A7 18 02 FB | 	rdlong	arg04, fp
24678     18 FA 05 F1 | 	add	result1, #24
2467c     FD 18 62 FC | 	wrlong	arg04, result1
24680     18 4E 85 F1 | 	sub	fp, #24
24684     A7 FA 01 FB | 	rdlong	result1, fp
24688     04 4E 85 F1 | 	sub	fp, #4
2468c     08 FA 05 F1 | 	add	result1, #8
24690     FD FA 09 FB | 	rdlong	result1, result1 wz
24694     1C 00 90 5D |  if_ne	jmp	#LR__3798
24698     04 4E 05 F1 | 	add	fp, #4
2469c     A7 18 02 FB | 	rdlong	arg04, fp
246a0     18 4E 05 F1 | 	add	fp, #24
246a4     A7 FA 01 FB | 	rdlong	result1, fp
246a8     1C 4E 85 F1 | 	sub	fp, #28
246ac     08 18 06 F1 | 	add	arg04, #8
246b0     0C FB 61 FC | 	wrlong	result1, arg04
246b4                 | LR__3798
246b4                 | LR__3799
246b4     04 4E 05 F1 | 	add	fp, #4
246b8     A7 18 02 FB | 	rdlong	arg04, fp
246bc     04 4E 85 F1 | 	sub	fp, #4
246c0     10 18 06 F1 | 	add	arg04, #16
246c4     0C 19 C2 FA | 	rdbyte	arg04, arg04
246c8     80 18 CE F7 | 	test	arg04, #128 wz
246cc     7C 00 90 AD |  if_e	jmp	#LR__3801
246d0     18 4E 05 F1 | 	add	fp, #24
246d4     A7 18 02 FB | 	rdlong	arg04, fp
246d8     01 18 06 F1 | 	add	arg04, #1
246dc     0C 13 C2 FA | 	rdbyte	arg01, arg04
246e0     14 4E 85 F1 | 	sub	fp, #20
246e4     A7 18 02 FB | 	rdlong	arg04, fp
246e8     0C 15 02 F6 | 	mov	arg02, arg04
246ec     28 14 06 F1 | 	add	arg02, #40
246f0     04 4E 85 F1 | 	sub	fp, #4
246f4     1C 18 06 F1 | 	add	arg04, #28
246f8     0C 17 02 FB | 	rdlong	arg03, arg04
246fc     01 18 06 F6 | 	mov	arg04, #1
24700     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
24704     00 FA 0D F2 | 	cmp	result1, #0 wz
24708     1C 00 90 AD |  if_e	jmp	#LR__3800
2470c     04 4E 05 F1 | 	add	fp, #4
24710     A7 FA 01 FB | 	rdlong	result1, fp
24714     04 4E 85 F1 | 	sub	fp, #4
24718     11 FA 05 F1 | 	add	result1, #17
2471c     FD 02 48 FC | 	wrbyte	#1, result1
24720     01 FA 05 F6 | 	mov	result1, #1
24724     A4 04 90 FD | 	jmp	#LR__3813
24728                 | LR__3800
24728     04 4E 05 F1 | 	add	fp, #4
2472c     A7 18 02 FB | 	rdlong	arg04, fp
24730     0C FB 01 F6 | 	mov	result1, arg04
24734     04 4E 85 F1 | 	sub	fp, #4
24738     10 18 06 F1 | 	add	arg04, #16
2473c     0C 19 C2 FA | 	rdbyte	arg04, arg04
24740     7F 18 06 F5 | 	and	arg04, #127
24744     10 FA 05 F1 | 	add	result1, #16
24748     FD 18 42 FC | 	wrbyte	arg04, result1
2474c                 | LR__3801
2474c     18 4E 05 F1 | 	add	fp, #24
24750     A7 12 02 FB | 	rdlong	arg01, fp
24754     14 4E 85 F1 | 	sub	fp, #20
24758     A7 14 02 FB | 	rdlong	arg02, fp
2475c     04 4E 85 F1 | 	sub	fp, #4
24760     18 14 06 F1 | 	add	arg02, #24
24764     0A 15 02 FB | 	rdlong	arg02, arg02
24768     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2476c     20 4E 05 F1 | 	add	fp, #32
24770     A7 FA 61 FC | 	wrlong	result1, fp
24774     20 4E 85 F1 | 	sub	fp, #32
24778     00 FA 0D F2 | 	cmp	result1, #0 wz
2477c     1C 00 90 5D |  if_ne	jmp	#LR__3802
24780     04 4E 05 F1 | 	add	fp, #4
24784     A7 FA 01 FB | 	rdlong	result1, fp
24788     04 4E 85 F1 | 	sub	fp, #4
2478c     11 FA 05 F1 | 	add	result1, #17
24790     FD 04 48 FC | 	wrbyte	#2, result1
24794     02 FA 05 F6 | 	mov	result1, #2
24798     30 04 90 FD | 	jmp	#LR__3813
2479c                 | LR__3802
2479c     20 4E 05 F1 | 	add	fp, #32
247a0     A7 FA 01 FB | 	rdlong	result1, fp
247a4     0C 4E 05 F1 | 	add	fp, #12
247a8     A7 1E 02 FB | 	rdlong	local01, fp
247ac     0F FB 01 F1 | 	add	result1, local01
247b0     0C 4E 85 F1 | 	sub	fp, #12
247b4     A7 FA 61 FC | 	wrlong	result1, fp
247b8     14 4E 85 F1 | 	sub	fp, #20
247bc     A7 FA 01 FB | 	rdlong	result1, fp
247c0     09 FA 45 F0 | 	shr	result1, #9
247c4     1C 4E 05 F1 | 	add	fp, #28
247c8     A7 FA 61 FC | 	wrlong	result1, fp
247cc     28 4E 85 F1 | 	sub	fp, #40
247d0     01 FA 15 F2 | 	cmp	result1, #1 wc
247d4     60 01 90 CD |  if_b	jmp	#LR__3806
247d8     2C 4E 05 F1 | 	add	fp, #44
247dc     A7 FA 01 FB | 	rdlong	result1, fp
247e0     04 4E 85 F1 | 	sub	fp, #4
247e4     A7 18 02 FB | 	rdlong	arg04, fp
247e8     0C FB 01 F1 | 	add	result1, arg04
247ec     10 4E 85 F1 | 	sub	fp, #16
247f0     A7 18 02 FB | 	rdlong	arg04, fp
247f4     18 4E 85 F1 | 	sub	fp, #24
247f8     0A 18 06 F1 | 	add	arg04, #10
247fc     0C 19 E2 FA | 	rdword	arg04, arg04
24800     0C FB 19 F2 | 	cmp	result1, arg04 wcz
24804     28 00 90 ED |  if_be	jmp	#LR__3803
24808     18 4E 05 F1 | 	add	fp, #24
2480c     A7 FA 01 FB | 	rdlong	result1, fp
24810     0A FA 05 F1 | 	add	result1, #10
24814     FD FA E1 FA | 	rdword	result1, result1
24818     14 4E 05 F1 | 	add	fp, #20
2481c     A7 18 02 FB | 	rdlong	arg04, fp
24820     0C FB 81 F1 | 	sub	result1, arg04
24824     04 4E 85 F1 | 	sub	fp, #4
24828     A7 FA 61 FC | 	wrlong	result1, fp
2482c     28 4E 85 F1 | 	sub	fp, #40
24830                 | LR__3803
24830     18 4E 05 F1 | 	add	fp, #24
24834     A7 18 02 FB | 	rdlong	arg04, fp
24838     01 18 06 F1 | 	add	arg04, #1
2483c     0C 13 C2 FA | 	rdbyte	arg01, arg04
24840     18 4E 05 F1 | 	add	fp, #24
24844     A7 14 02 FB | 	rdlong	arg02, fp
24848     10 4E 85 F1 | 	sub	fp, #16
2484c     A7 16 02 FB | 	rdlong	arg03, fp
24850     08 4E 05 F1 | 	add	fp, #8
24854     A7 18 02 FB | 	rdlong	arg04, fp
24858     28 4E 85 F1 | 	sub	fp, #40
2485c     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
24860     00 FA 0D F2 | 	cmp	result1, #0 wz
24864     1C 00 90 AD |  if_e	jmp	#LR__3804
24868     04 4E 05 F1 | 	add	fp, #4
2486c     A7 1E 02 FB | 	rdlong	local01, fp
24870     04 4E 85 F1 | 	sub	fp, #4
24874     11 1E 06 F1 | 	add	local01, #17
24878     0F 03 48 FC | 	wrbyte	#1, local01
2487c     01 FA 05 F6 | 	mov	result1, #1
24880     48 03 90 FD | 	jmp	#LR__3813
24884                 | LR__3804
24884     04 4E 05 F1 | 	add	fp, #4
24888     A7 FA 01 FB | 	rdlong	result1, fp
2488c     1C FA 05 F1 | 	add	result1, #28
24890     FD FA 01 FB | 	rdlong	result1, result1
24894     1C 4E 05 F1 | 	add	fp, #28
24898     A7 20 02 FB | 	rdlong	local02, fp
2489c     10 FB 81 F1 | 	sub	result1, local02
248a0     08 4E 05 F1 | 	add	fp, #8
248a4     A7 18 02 FB | 	rdlong	arg04, fp
248a8     28 4E 85 F1 | 	sub	fp, #40
248ac     0C FB 11 F2 | 	cmp	result1, arg04 wc
248b0     68 00 90 3D |  if_ae	jmp	#LR__3805
248b4     04 4E 05 F1 | 	add	fp, #4
248b8     A7 12 02 FB | 	rdlong	arg01, fp
248bc     28 12 06 F1 | 	add	arg01, #40
248c0     2C 4E 05 F1 | 	add	fp, #44
248c4     A7 14 02 FB | 	rdlong	arg02, fp
248c8     2C 4E 85 F1 | 	sub	fp, #44
248cc     A7 FA 01 FB | 	rdlong	result1, fp
248d0     1C FA 05 F1 | 	add	result1, #28
248d4     FD 22 02 FB | 	rdlong	local03, result1
248d8     1C 4E 05 F1 | 	add	fp, #28
248dc     A7 18 02 FB | 	rdlong	arg04, fp
248e0     20 4E 85 F1 | 	sub	fp, #32
248e4     0C 23 82 F1 | 	sub	local03, arg04
248e8     09 22 66 F0 | 	shl	local03, #9
248ec     11 15 02 F1 | 	add	arg02, local03
248f0     09 16 C6 F9 | 	decod	arg03, #9
248f4     D8 41 BF FD | 	call	#__system____builtin_memmove
248f8     04 4E 05 F1 | 	add	fp, #4
248fc     A7 18 02 FB | 	rdlong	arg04, fp
24900     0C FB 01 F6 | 	mov	result1, arg04
24904     04 4E 85 F1 | 	sub	fp, #4
24908     10 18 06 F1 | 	add	arg04, #16
2490c     0C 19 C2 FA | 	rdbyte	arg04, arg04
24910     7F 18 06 F5 | 	and	arg04, #127
24914     10 FA 05 F1 | 	add	result1, #16
24918     FD 18 42 FC | 	wrbyte	arg04, result1
2491c                 | LR__3805
2491c     28 4E 05 F1 | 	add	fp, #40
24920     A7 FA 01 FB | 	rdlong	result1, fp
24924     09 FA 65 F0 | 	shl	result1, #9
24928     04 4E 85 F1 | 	sub	fp, #4
2492c     A7 FA 61 FC | 	wrlong	result1, fp
24930     24 4E 85 F1 | 	sub	fp, #36
24934                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
24934                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
24934                 | ' 				}
24934                 | ' 
24934                 | ' 
24934                 | ' 				wcnt =  ((UINT) 512 )  * cc;
24934                 | ' 				continue;
24934     74 01 90 FD | 	jmp	#LR__3809
24938                 | LR__3806
24938     04 4E 05 F1 | 	add	fp, #4
2493c     A7 20 02 FB | 	rdlong	local02, fp
24940     1C 20 06 F1 | 	add	local02, #28
24944     10 FB 01 FB | 	rdlong	result1, local02
24948     1C 4E 05 F1 | 	add	fp, #28
2494c     A7 20 02 FB | 	rdlong	local02, fp
24950     20 4E 85 F1 | 	sub	fp, #32
24954     10 FB 09 F2 | 	cmp	result1, local02 wz
24958     90 00 90 AD |  if_e	jmp	#LR__3807
2495c     04 4E 05 F1 | 	add	fp, #4
24960     A7 FA 01 FB | 	rdlong	result1, fp
24964     FD 22 02 F6 | 	mov	local03, result1
24968     04 4E 85 F1 | 	sub	fp, #4
2496c     14 22 06 F1 | 	add	local03, #20
24970     11 23 02 FB | 	rdlong	local03, local03
24974     0C FA 05 F1 | 	add	result1, #12
24978     FD 24 02 FB | 	rdlong	local04, result1
2497c     12 27 02 F6 | 	mov	local05, local04
24980     13 23 12 F2 | 	cmp	local03, local05 wc
24984     64 00 90 3D |  if_ae	jmp	#LR__3807
24988     18 4E 05 F1 | 	add	fp, #24
2498c     A7 18 02 FB | 	rdlong	arg04, fp
24990     01 18 06 F1 | 	add	arg04, #1
24994     0C 13 C2 FA | 	rdbyte	arg01, arg04
24998     14 4E 85 F1 | 	sub	fp, #20
2499c     A7 28 02 FB | 	rdlong	local06, fp
249a0     28 28 06 F1 | 	add	local06, #40
249a4     14 2B 02 F6 | 	mov	local07, local06
249a8     1C 4E 05 F1 | 	add	fp, #28
249ac     A7 2C 02 FB | 	rdlong	local08, fp
249b0     20 4E 85 F1 | 	sub	fp, #32
249b4     01 2E 06 F6 | 	mov	local09, #1
249b8     15 15 02 F6 | 	mov	arg02, local07
249bc     16 17 02 F6 | 	mov	arg03, local08
249c0     01 18 06 F6 | 	mov	arg04, #1
249c4     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
249c8     FD 30 0A F6 | 	mov	local10, result1 wz
249cc     1C 00 90 AD |  if_e	jmp	#LR__3807
249d0     04 4E 05 F1 | 	add	fp, #4
249d4     A7 30 02 FB | 	rdlong	local10, fp
249d8     04 4E 85 F1 | 	sub	fp, #4
249dc     11 30 06 F1 | 	add	local10, #17
249e0     18 03 48 FC | 	wrbyte	#1, local10
249e4                 | ' 				fp->fptr < fp->obj.objsize &&
249e4                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
249e4                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
249e4     01 FA 05 F6 | 	mov	result1, #1
249e8     E0 01 90 FD | 	jmp	#LR__3813
249ec                 | LR__3807
249ec     04 4E 05 F1 | 	add	fp, #4
249f0     A7 18 02 FB | 	rdlong	arg04, fp
249f4     1C 4E 05 F1 | 	add	fp, #28
249f8     A7 FA 01 FB | 	rdlong	result1, fp
249fc     20 4E 85 F1 | 	sub	fp, #32
24a00     1C 18 06 F1 | 	add	arg04, #28
24a04     0C FB 61 FC | 	wrlong	result1, arg04
24a08                 | LR__3808
24a08     04 4E 05 F1 | 	add	fp, #4
24a0c     A7 FA 01 FB | 	rdlong	result1, fp
24a10     14 FA 05 F1 | 	add	result1, #20
24a14     FD FA 01 FB | 	rdlong	result1, result1
24a18     FF FB 05 F5 | 	and	result1, #511
24a1c     09 32 C6 F9 | 	decod	local11, #9
24a20     FD 32 82 F1 | 	sub	local11, result1
24a24     20 4E 05 F1 | 	add	fp, #32
24a28     A7 32 62 FC | 	wrlong	local11, fp
24a2c     18 4E 85 F1 | 	sub	fp, #24
24a30     A7 FA 01 FB | 	rdlong	result1, fp
24a34     0C 4E 85 F1 | 	sub	fp, #12
24a38     FD 32 1A F2 | 	cmp	local11, result1 wcz
24a3c     0C 4E 05 11 |  if_a	add	fp, #12
24a40     A7 32 02 1B |  if_a	rdlong	local11, fp
24a44     18 4E 05 11 |  if_a	add	fp, #24
24a48     A7 32 62 1C |  if_a	wrlong	local11, fp
24a4c     24 4E 85 11 |  if_a	sub	fp, #36
24a50     04 4E 05 F1 | 	add	fp, #4
24a54     A7 32 02 FB | 	rdlong	local11, fp
24a58     19 13 02 F6 | 	mov	arg01, local11
24a5c     28 12 06 F1 | 	add	arg01, #40
24a60     14 32 06 F1 | 	add	local11, #20
24a64     19 33 02 FB | 	rdlong	local11, local11
24a68     FF 33 06 F5 | 	and	local11, #511
24a6c     19 13 02 F1 | 	add	arg01, local11
24a70     2C 4E 05 F1 | 	add	fp, #44
24a74     A7 14 02 FB | 	rdlong	arg02, fp
24a78     0C 4E 85 F1 | 	sub	fp, #12
24a7c     A7 16 02 FB | 	rdlong	arg03, fp
24a80     24 4E 85 F1 | 	sub	fp, #36
24a84     48 40 BF FD | 	call	#__system____builtin_memmove
24a88     04 4E 05 F1 | 	add	fp, #4
24a8c     A7 FA 01 FB | 	rdlong	result1, fp
24a90     FD 32 02 F6 | 	mov	local11, result1
24a94     04 4E 85 F1 | 	sub	fp, #4
24a98     10 FA 05 F1 | 	add	result1, #16
24a9c     FD FA C1 FA | 	rdbyte	result1, result1
24aa0     80 FA 45 F5 | 	or	result1, #128
24aa4     10 32 06 F1 | 	add	local11, #16
24aa8     19 FB 41 FC | 	wrbyte	result1, local11
24aac                 | LR__3809
24aac     0C 4E 05 F1 | 	add	fp, #12
24ab0     A7 32 02 FB | 	rdlong	local11, fp
24ab4     18 4E 05 F1 | 	add	fp, #24
24ab8     A7 FA 01 FB | 	rdlong	result1, fp
24abc     FD 32 82 F1 | 	sub	local11, result1
24ac0     18 4E 85 F1 | 	sub	fp, #24
24ac4     A7 32 62 FC | 	wrlong	local11, fp
24ac8     04 4E 05 F1 | 	add	fp, #4
24acc     A7 34 02 FB | 	rdlong	local12, fp
24ad0     1A 33 02 FB | 	rdlong	local11, local12
24ad4     14 4E 05 F1 | 	add	fp, #20
24ad8     A7 36 02 FB | 	rdlong	local13, fp
24adc     1B 33 02 F1 | 	add	local11, local13
24ae0     1A 33 62 FC | 	wrlong	local11, local12
24ae4     0C 4E 05 F1 | 	add	fp, #12
24ae8     A7 32 02 FB | 	rdlong	local11, fp
24aec     0C 4E 85 F1 | 	sub	fp, #12
24af0     A7 38 02 FB | 	rdlong	local14, fp
24af4     1C 33 02 F1 | 	add	local11, local14
24af8     0C 4E 05 F1 | 	add	fp, #12
24afc     A7 32 62 FC | 	wrlong	local11, fp
24b00     2C 4E 85 F1 | 	sub	fp, #44
24b04     A7 3A 02 FB | 	rdlong	local15, fp
24b08     1D 33 02 F6 | 	mov	local11, local15
24b0c     14 3A 06 F1 | 	add	local15, #20
24b10     1D 3B 02 FB | 	rdlong	local15, local15
24b14     20 4E 05 F1 | 	add	fp, #32
24b18     A7 3C 02 FB | 	rdlong	local16, fp
24b1c     1E 3B 02 F1 | 	add	local15, local16
24b20     14 32 06 F1 | 	add	local11, #20
24b24     19 3B 62 FC | 	wrlong	local15, local11
24b28     20 4E 85 F1 | 	sub	fp, #32
24b2c     A7 3E 02 FB | 	rdlong	local17, fp
24b30     1F 33 02 F6 | 	mov	local11, local17
24b34     1F 41 02 F6 | 	mov	local18, local17
24b38     04 4E 85 F1 | 	sub	fp, #4
24b3c     14 3E 06 F1 | 	add	local17, #20
24b40     1F 43 02 FB | 	rdlong	local19, local17
24b44     0C 40 06 F1 | 	add	local18, #12
24b48     20 45 02 FB | 	rdlong	local20, local18
24b4c     22 43 1A F2 | 	cmp	local19, local20 wcz
24b50     24 00 90 ED |  if_be	jmp	#LR__3810
24b54     04 4E 05 F1 | 	add	fp, #4
24b58     A7 26 02 FB | 	rdlong	local05, fp
24b5c     04 4E 85 F1 | 	sub	fp, #4
24b60     13 23 02 F6 | 	mov	local03, local05
24b64     14 22 06 F1 | 	add	local03, #20
24b68     11 25 02 FB | 	rdlong	local04, local03
24b6c     14 22 86 F1 | 	sub	local03, #20
24b70     12 47 02 F6 | 	mov	local21, local04
24b74     20 00 90 FD | 	jmp	#LR__3811
24b78                 | LR__3810
24b78     04 4E 05 F1 | 	add	fp, #4
24b7c     A7 2A 02 FB | 	rdlong	local07, fp
24b80     04 4E 85 F1 | 	sub	fp, #4
24b84     15 31 02 F6 | 	mov	local10, local07
24b88     0C 30 06 F1 | 	add	local10, #12
24b8c     18 2D 02 FB | 	rdlong	local08, local10
24b90     0C 30 86 F1 | 	sub	local10, #12
24b94     16 47 02 F6 | 	mov	local21, local08
24b98                 | LR__3811
24b98     0C 32 06 F1 | 	add	local11, #12
24b9c     19 47 62 FC | 	wrlong	local21, local11
24ba0     5C F9 9F FD | 	jmp	#LR__3793
24ba4                 | LR__3812
24ba4     04 4E 05 F1 | 	add	fp, #4
24ba8     A7 34 02 FB | 	rdlong	local12, fp
24bac     1A 1F 02 F6 | 	mov	local01, local12
24bb0     04 4E 85 F1 | 	sub	fp, #4
24bb4     10 34 06 F1 | 	add	local12, #16
24bb8     1A 33 C2 FA | 	rdbyte	local11, local12
24bbc     40 32 46 F5 | 	or	local11, #64
24bc0     10 1E 06 F1 | 	add	local01, #16
24bc4     0F 33 42 FC | 	wrbyte	local11, local01
24bc8                 | ' 
24bc8                 | ' 
24bc8                 | ' 
24bc8                 | ' 
24bc8                 | ' 
24bc8                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
24bc8                 | ' 		fp->flag |=  0x80 ;
24bc8                 | ' 
24bc8                 | ' 	}
24bc8                 | ' 
24bc8                 | ' 	fp->flag |=  0x40 ;
24bc8                 | ' 
24bc8                 | ' 	return FR_OK ;
24bc8     00 FA 05 F6 | 	mov	result1, #0
24bcc                 | LR__3813
24bcc     A7 F0 03 F6 | 	mov	ptra, fp
24bd0     B2 00 A0 FD | 	call	#popregs_
24bd4                 | _fatfs_cc_f_write_ret
24bd4     2D 00 64 FD | 	ret
24bd8                 | 
24bd8                 | _fatfs_cc_f_sync
24bd8     00 4A 05 F6 | 	mov	COUNT_, #0
24bdc     A8 00 A0 FD | 	call	#pushregs_
24be0     18 F0 07 F1 | 	add	ptra, #24
24be4     04 4E 05 F1 | 	add	fp, #4
24be8     A7 12 62 FC | 	wrlong	arg01, fp
24bec     08 4E 05 F1 | 	add	fp, #8
24bf0     A7 14 02 F6 | 	mov	arg02, fp
24bf4     0C 4E 85 F1 | 	sub	fp, #12
24bf8     D0 E8 BF FD | 	call	#_fatfs_cc_validate
24bfc     08 4E 05 F1 | 	add	fp, #8
24c00     A7 FA 61 FC | 	wrlong	result1, fp
24c04     08 4E 85 F1 | 	sub	fp, #8
24c08     00 FA 0D F2 | 	cmp	result1, #0 wz
24c0c     C0 01 90 5D |  if_ne	jmp	#LR__3823
24c10     04 4E 05 F1 | 	add	fp, #4
24c14     A7 18 02 FB | 	rdlong	arg04, fp
24c18     04 4E 85 F1 | 	sub	fp, #4
24c1c     10 18 06 F1 | 	add	arg04, #16
24c20     0C 19 C2 FA | 	rdbyte	arg04, arg04
24c24     40 18 CE F7 | 	test	arg04, #64 wz
24c28     A4 01 90 AD |  if_e	jmp	#LR__3822
24c2c     04 4E 05 F1 | 	add	fp, #4
24c30     A7 18 02 FB | 	rdlong	arg04, fp
24c34     04 4E 85 F1 | 	sub	fp, #4
24c38     10 18 06 F1 | 	add	arg04, #16
24c3c     0C 19 C2 FA | 	rdbyte	arg04, arg04
24c40     80 18 CE F7 | 	test	arg04, #128 wz
24c44     64 00 90 AD |  if_e	jmp	#LR__3820
24c48     0C 4E 05 F1 | 	add	fp, #12
24c4c     A7 18 02 FB | 	rdlong	arg04, fp
24c50     01 18 06 F1 | 	add	arg04, #1
24c54     0C 13 C2 FA | 	rdbyte	arg01, arg04
24c58     08 4E 85 F1 | 	sub	fp, #8
24c5c     A7 18 02 FB | 	rdlong	arg04, fp
24c60     0C 15 02 F6 | 	mov	arg02, arg04
24c64     28 14 06 F1 | 	add	arg02, #40
24c68     04 4E 85 F1 | 	sub	fp, #4
24c6c     1C 18 06 F1 | 	add	arg04, #28
24c70     0C 17 02 FB | 	rdlong	arg03, arg04
24c74     01 18 06 F6 | 	mov	arg04, #1
24c78     0C AE BF FD | 	call	#_fatfs_cc_disk_write
24c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
24c80     01 FA 05 56 |  if_ne	mov	result1, #1
24c84     54 01 90 5D |  if_ne	jmp	#LR__3824
24c88     04 4E 05 F1 | 	add	fp, #4
24c8c     A7 18 02 FB | 	rdlong	arg04, fp
24c90     0C 17 02 F6 | 	mov	arg03, arg04
24c94     04 4E 85 F1 | 	sub	fp, #4
24c98     10 18 06 F1 | 	add	arg04, #16
24c9c     0C 19 C2 FA | 	rdbyte	arg04, arg04
24ca0     7F 18 06 F5 | 	and	arg04, #127
24ca4     10 16 06 F1 | 	add	arg03, #16
24ca8     0B 19 42 FC | 	wrbyte	arg04, arg03
24cac                 | LR__3820
24cac     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
24cb0     10 4E 05 F1 | 	add	fp, #16
24cb4     A7 FA 61 FC | 	wrlong	result1, fp
24cb8     04 4E 85 F1 | 	sub	fp, #4
24cbc     A7 12 02 FB | 	rdlong	arg01, fp
24cc0     08 4E 85 F1 | 	sub	fp, #8
24cc4     A7 18 02 FB | 	rdlong	arg04, fp
24cc8     04 4E 85 F1 | 	sub	fp, #4
24ccc     20 18 06 F1 | 	add	arg04, #32
24cd0     0C 15 02 FB | 	rdlong	arg02, arg04
24cd4     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
24cd8     08 4E 05 F1 | 	add	fp, #8
24cdc     A7 FA 61 FC | 	wrlong	result1, fp
24ce0     08 4E 85 F1 | 	sub	fp, #8
24ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
24ce8     E4 00 90 5D |  if_ne	jmp	#LR__3821
24cec     04 4E 05 F1 | 	add	fp, #4
24cf0     A7 18 02 FB | 	rdlong	arg04, fp
24cf4     24 18 06 F1 | 	add	arg04, #36
24cf8     0C 19 02 FB | 	rdlong	arg04, arg04
24cfc     10 4E 05 F1 | 	add	fp, #16
24d00     A7 18 62 FC | 	wrlong	arg04, fp
24d04     0C 17 02 F6 | 	mov	arg03, arg04
24d08     0B 16 06 F1 | 	add	arg03, #11
24d0c     0B 17 C2 FA | 	rdbyte	arg03, arg03
24d10     20 16 46 F5 | 	or	arg03, #32
24d14     0B 18 06 F1 | 	add	arg04, #11
24d18     0C 17 42 FC | 	wrbyte	arg03, arg04
24d1c     10 4E 85 F1 | 	sub	fp, #16
24d20     A7 18 02 FB | 	rdlong	arg04, fp
24d24     0C 13 02 FB | 	rdlong	arg01, arg04
24d28     10 4E 05 F1 | 	add	fp, #16
24d2c     A7 14 02 FB | 	rdlong	arg02, fp
24d30     14 4E 85 F1 | 	sub	fp, #20
24d34     08 18 06 F1 | 	add	arg04, #8
24d38     0C 17 02 FB | 	rdlong	arg03, arg04
24d3c     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
24d40     14 4E 05 F1 | 	add	fp, #20
24d44     A7 12 02 FB | 	rdlong	arg01, fp
24d48     1C 12 06 F1 | 	add	arg01, #28
24d4c     10 4E 85 F1 | 	sub	fp, #16
24d50     A7 18 02 FB | 	rdlong	arg04, fp
24d54     0C 18 06 F1 | 	add	arg04, #12
24d58     0C 15 02 FB | 	rdlong	arg02, arg04
24d5c     09 15 62 FC | 	wrlong	arg02, arg01
24d60     10 4E 05 F1 | 	add	fp, #16
24d64     A7 12 02 FB | 	rdlong	arg01, fp
24d68     16 12 06 F1 | 	add	arg01, #22
24d6c     04 4E 85 F1 | 	sub	fp, #4
24d70     A7 14 02 FB | 	rdlong	arg02, fp
24d74     09 15 62 FC | 	wrlong	arg02, arg01
24d78     04 4E 05 F1 | 	add	fp, #4
24d7c     A7 12 02 FB | 	rdlong	arg01, fp
24d80     12 12 06 F1 | 	add	arg01, #18
24d84     09 01 58 FC | 	wrword	#0, arg01
24d88     08 4E 85 F1 | 	sub	fp, #8
24d8c     A7 18 02 FB | 	rdlong	arg04, fp
24d90     03 18 06 F1 | 	add	arg04, #3
24d94     0C 03 48 FC | 	wrbyte	#1, arg04
24d98     A7 12 02 FB | 	rdlong	arg01, fp
24d9c     0C 4E 85 F1 | 	sub	fp, #12
24da0     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
24da4     08 4E 05 F1 | 	add	fp, #8
24da8     A7 FA 61 FC | 	wrlong	result1, fp
24dac     04 4E 85 F1 | 	sub	fp, #4
24db0     A7 18 02 FB | 	rdlong	arg04, fp
24db4     0C 17 02 F6 | 	mov	arg03, arg04
24db8     04 4E 85 F1 | 	sub	fp, #4
24dbc     10 18 06 F1 | 	add	arg04, #16
24dc0     0C 19 C2 FA | 	rdbyte	arg04, arg04
24dc4     BF 18 06 F5 | 	and	arg04, #191
24dc8     10 16 06 F1 | 	add	arg03, #16
24dcc     0B 19 42 FC | 	wrbyte	arg04, arg03
24dd0                 | LR__3821
24dd0                 | LR__3822
24dd0                 | LR__3823
24dd0                 | ' 					dir = fp->dir_ptr;
24dd0                 | ' 					dir[ 11 ] |=  0x20 ;
24dd0                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
24dd0                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
24dd0                 | ' 					st_dword(dir +  22 , tm);
24dd0                 | ' 					st_word(dir +  18 , 0);
24dd0                 | ' 					fs->wflag = 1;
24dd0                 | ' 					res = sync_fs(fs);
24dd0                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
24dd0                 | ' 				}
24dd0                 | ' 			}
24dd0                 | ' 		}
24dd0                 | ' 	}
24dd0                 | ' 
24dd0                 | ' 	return res ;
24dd0     08 4E 05 F1 | 	add	fp, #8
24dd4     A7 FA 01 FB | 	rdlong	result1, fp
24dd8     08 4E 85 F1 | 	sub	fp, #8
24ddc                 | LR__3824
24ddc     A7 F0 03 F6 | 	mov	ptra, fp
24de0     B2 00 A0 FD | 	call	#popregs_
24de4                 | _fatfs_cc_f_sync_ret
24de4     2D 00 64 FD | 	ret
24de8                 | 
24de8                 | _fatfs_cc_f_close
24de8     01 4A 05 F6 | 	mov	COUNT_, #1
24dec     A8 00 A0 FD | 	call	#pushregs_
24df0     10 F0 07 F1 | 	add	ptra, #16
24df4     04 4E 05 F1 | 	add	fp, #4
24df8     A7 12 62 FC | 	wrlong	arg01, fp
24dfc     04 4E 85 F1 | 	sub	fp, #4
24e00     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
24e04     08 4E 05 F1 | 	add	fp, #8
24e08     A7 FA 61 FC | 	wrlong	result1, fp
24e0c     08 4E 85 F1 | 	sub	fp, #8
24e10     00 FA 0D F2 | 	cmp	result1, #0 wz
24e14     38 00 90 5D |  if_ne	jmp	#LR__3830
24e18     04 4E 05 F1 | 	add	fp, #4
24e1c     A7 12 02 FB | 	rdlong	arg01, fp
24e20     08 4E 05 F1 | 	add	fp, #8
24e24     A7 14 02 F6 | 	mov	arg02, fp
24e28     0C 4E 85 F1 | 	sub	fp, #12
24e2c     9C E6 BF FD | 	call	#_fatfs_cc_validate
24e30     08 4E 05 F1 | 	add	fp, #8
24e34     A7 FA 61 FC | 	wrlong	result1, fp
24e38     08 4E 85 F1 | 	sub	fp, #8
24e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
24e40     04 4E 05 A1 |  if_e	add	fp, #4
24e44     A7 1E 02 AB |  if_e	rdlong	local01, fp
24e48     04 4E 85 A1 |  if_e	sub	fp, #4
24e4c     0F 01 68 AC |  if_e	wrlong	#0, local01
24e50                 | LR__3830
24e50                 | ' 
24e50                 | ' 
24e50                 | ' 
24e50                 | ' 
24e50                 | ' 			fp->obj.fs = 0;
24e50                 | ' #line 4192 "ff.c"
24e50                 | ' 		}
24e50                 | ' 	}
24e50                 | ' 	return res;
24e50     08 4E 05 F1 | 	add	fp, #8
24e54     A7 FA 01 FB | 	rdlong	result1, fp
24e58     08 4E 85 F1 | 	sub	fp, #8
24e5c     A7 F0 03 F6 | 	mov	ptra, fp
24e60     B2 00 A0 FD | 	call	#popregs_
24e64                 | _fatfs_cc_f_close_ret
24e64     2D 00 64 FD | 	ret
24e68                 | 
24e68                 | _fatfs_cc_f_lseek
24e68     00 4A 05 F6 | 	mov	COUNT_, #0
24e6c     A8 00 A0 FD | 	call	#pushregs_
24e70     24 F0 07 F1 | 	add	ptra, #36
24e74     04 4E 05 F1 | 	add	fp, #4
24e78     A7 12 62 FC | 	wrlong	arg01, fp
24e7c     04 4E 05 F1 | 	add	fp, #4
24e80     A7 14 62 FC | 	wrlong	arg02, fp
24e84     04 4E 85 F1 | 	sub	fp, #4
24e88     A7 12 02 FB | 	rdlong	arg01, fp
24e8c     0C 4E 05 F1 | 	add	fp, #12
24e90     A7 14 02 F6 | 	mov	arg02, fp
24e94     10 4E 85 F1 | 	sub	fp, #16
24e98     30 E6 BF FD | 	call	#_fatfs_cc_validate
24e9c     0C 4E 05 F1 | 	add	fp, #12
24ea0     A7 FA 61 FC | 	wrlong	result1, fp
24ea4     0C 4E 85 F1 | 	sub	fp, #12
24ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
24eac     1C 00 90 5D |  if_ne	jmp	#LR__3840
24eb0     04 4E 05 F1 | 	add	fp, #4
24eb4     A7 18 02 FB | 	rdlong	arg04, fp
24eb8     11 18 06 F1 | 	add	arg04, #17
24ebc     0C 19 C2 FA | 	rdbyte	arg04, arg04
24ec0     08 4E 05 F1 | 	add	fp, #8
24ec4     A7 18 62 FC | 	wrlong	arg04, fp
24ec8     0C 4E 85 F1 | 	sub	fp, #12
24ecc                 | LR__3840
24ecc     0C 4E 05 F1 | 	add	fp, #12
24ed0     A7 18 0A FB | 	rdlong	arg04, fp wz
24ed4     0C 4E 85 F1 | 	sub	fp, #12
24ed8     0C 4E 05 51 |  if_ne	add	fp, #12
24edc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
24ee0     0C 4E 85 51 |  if_ne	sub	fp, #12
24ee4     40 06 90 5D |  if_ne	jmp	#LR__3863
24ee8     04 4E 05 F1 | 	add	fp, #4
24eec     A7 18 02 FB | 	rdlong	arg04, fp
24ef0     04 4E 05 F1 | 	add	fp, #4
24ef4     A7 16 02 FB | 	rdlong	arg03, fp
24ef8     08 4E 85 F1 | 	sub	fp, #8
24efc     0C 18 06 F1 | 	add	arg04, #12
24f00     0C 19 02 FB | 	rdlong	arg04, arg04
24f04     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
24f08     3C 00 90 ED |  if_be	jmp	#LR__3841
24f0c     04 4E 05 F1 | 	add	fp, #4
24f10     A7 16 02 FB | 	rdlong	arg03, fp
24f14     04 4E 85 F1 | 	sub	fp, #4
24f18     10 16 06 F1 | 	add	arg03, #16
24f1c     0B 17 C2 FA | 	rdbyte	arg03, arg03
24f20     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
24f24     02 16 CE F7 | 	test	arg03, #2 wz
24f28     1C 00 90 5D |  if_ne	jmp	#LR__3841
24f2c     04 4E 05 F1 | 	add	fp, #4
24f30     A7 16 02 FB | 	rdlong	arg03, fp
24f34     0C 16 06 F1 | 	add	arg03, #12
24f38     0B 17 02 FB | 	rdlong	arg03, arg03
24f3c     04 4E 05 F1 | 	add	fp, #4
24f40     A7 16 62 FC | 	wrlong	arg03, fp
24f44     08 4E 85 F1 | 	sub	fp, #8
24f48                 | LR__3841
24f48     04 4E 05 F1 | 	add	fp, #4
24f4c     A7 16 02 FB | 	rdlong	arg03, fp
24f50     14 16 06 F1 | 	add	arg03, #20
24f54     0B 17 02 FB | 	rdlong	arg03, arg03
24f58     1C 4E 05 F1 | 	add	fp, #28
24f5c     A7 16 62 FC | 	wrlong	arg03, fp
24f60     1C 4E 85 F1 | 	sub	fp, #28
24f64     A7 16 02 FB | 	rdlong	arg03, fp
24f68     18 4E 05 F1 | 	add	fp, #24
24f6c     A7 00 68 FC | 	wrlong	#0, fp
24f70     14 16 06 F1 | 	add	arg03, #20
24f74     0B 01 68 FC | 	wrlong	#0, arg03
24f78     14 4E 85 F1 | 	sub	fp, #20
24f7c     A7 16 02 FB | 	rdlong	arg03, fp
24f80     08 4E 85 F1 | 	sub	fp, #8
24f84     01 16 16 F2 | 	cmp	arg03, #1 wc
24f88     E4 03 90 CD |  if_b	jmp	#LR__3857
24f8c     10 4E 05 F1 | 	add	fp, #16
24f90     A7 16 02 FB | 	rdlong	arg03, fp
24f94     0A 16 06 F1 | 	add	arg03, #10
24f98     0B 19 E2 FA | 	rdword	arg04, arg03
24f9c     09 18 66 F0 | 	shl	arg04, #9
24fa0     08 4E 05 F1 | 	add	fp, #8
24fa4     A7 18 62 FC | 	wrlong	arg04, fp
24fa8     08 4E 05 F1 | 	add	fp, #8
24fac     A7 18 02 FB | 	rdlong	arg04, fp
24fb0     20 4E 85 F1 | 	sub	fp, #32
24fb4     01 18 16 F2 | 	cmp	arg04, #1 wc
24fb8     AC 00 90 CD |  if_b	jmp	#LR__3842
24fbc     08 4E 05 F1 | 	add	fp, #8
24fc0     A7 18 02 FB | 	rdlong	arg04, fp
24fc4     01 18 86 F1 | 	sub	arg04, #1
24fc8     10 4E 05 F1 | 	add	fp, #16
24fcc     A7 16 02 FB | 	rdlong	arg03, fp
24fd0     0B 19 12 FD | 	qdiv	arg04, arg03
24fd4     08 4E 05 F1 | 	add	fp, #8
24fd8     A7 FA 01 FB | 	rdlong	result1, fp
24fdc     01 FA 85 F1 | 	sub	result1, #1
24fe0     18 18 62 FD | 	getqx	arg04
24fe4     0B FB 11 FD | 	qdiv	result1, arg03
24fe8     20 4E 85 F1 | 	sub	fp, #32
24fec     18 16 62 FD | 	getqx	arg03
24ff0     0B 19 12 F2 | 	cmp	arg04, arg03 wc
24ff4     70 00 90 CD |  if_b	jmp	#LR__3842
24ff8     04 4E 05 F1 | 	add	fp, #4
24ffc     A7 16 02 FB | 	rdlong	arg03, fp
25000     1C 4E 05 F1 | 	add	fp, #28
25004     A7 FA 01 FB | 	rdlong	result1, fp
25008     01 FA 85 F1 | 	sub	result1, #1
2500c     08 4E 85 F1 | 	sub	fp, #8
25010     A7 18 02 FB | 	rdlong	arg04, fp
25014     01 18 86 F1 | 	sub	arg04, #1
25018     0C FB 21 F5 | 	andn	result1, arg04
2501c     14 16 06 F1 | 	add	arg03, #20
25020     0B FB 61 FC | 	wrlong	result1, arg03
25024     10 4E 85 F1 | 	sub	fp, #16
25028     A7 16 02 FB | 	rdlong	arg03, fp
2502c     04 4E 85 F1 | 	sub	fp, #4
25030     A7 18 02 FB | 	rdlong	arg04, fp
25034     14 18 06 F1 | 	add	arg04, #20
25038     0C 19 02 FB | 	rdlong	arg04, arg04
2503c     0C 17 82 F1 | 	sub	arg03, arg04
25040     04 4E 05 F1 | 	add	fp, #4
25044     A7 16 62 FC | 	wrlong	arg03, fp
25048     04 4E 85 F1 | 	sub	fp, #4
2504c     A7 16 02 FB | 	rdlong	arg03, fp
25050     18 16 06 F1 | 	add	arg03, #24
25054     0B 17 02 FB | 	rdlong	arg03, arg03
25058     10 4E 05 F1 | 	add	fp, #16
2505c     A7 16 62 FC | 	wrlong	arg03, fp
25060     14 4E 85 F1 | 	sub	fp, #20
25064     D0 00 90 FD | 	jmp	#LR__3846
25068                 | LR__3842
25068     04 4E 05 F1 | 	add	fp, #4
2506c     A7 16 02 FB | 	rdlong	arg03, fp
25070     08 16 06 F1 | 	add	arg03, #8
25074     0B 17 0A FB | 	rdlong	arg03, arg03 wz
25078     10 4E 05 F1 | 	add	fp, #16
2507c     A7 16 62 FC | 	wrlong	arg03, fp
25080     14 4E 85 F1 | 	sub	fp, #20
25084     94 00 90 5D |  if_ne	jmp	#LR__3845
25088     04 4E 05 F1 | 	add	fp, #4
2508c     A7 12 02 FB | 	rdlong	arg01, fp
25090     04 4E 85 F1 | 	sub	fp, #4
25094     00 14 06 F6 | 	mov	arg02, #0
25098     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2509c     14 4E 05 F1 | 	add	fp, #20
250a0     A7 FA 61 FC | 	wrlong	result1, fp
250a4     14 4E 85 F1 | 	sub	fp, #20
250a8     01 FA 0D F2 | 	cmp	result1, #1 wz
250ac     1C 00 90 5D |  if_ne	jmp	#LR__3843
250b0     04 4E 05 F1 | 	add	fp, #4
250b4     A7 16 02 FB | 	rdlong	arg03, fp
250b8     04 4E 85 F1 | 	sub	fp, #4
250bc     11 16 06 F1 | 	add	arg03, #17
250c0     0B 05 48 FC | 	wrbyte	#2, arg03
250c4     02 FA 05 F6 | 	mov	result1, #2
250c8     5C 04 90 FD | 	jmp	#LR__3863
250cc                 | LR__3843
250cc     14 4E 05 F1 | 	add	fp, #20
250d0     A7 FA 01 FB | 	rdlong	result1, fp
250d4     14 4E 85 F1 | 	sub	fp, #20
250d8     FF FF 7F FF 
250dc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
250e0     1C 00 90 5D |  if_ne	jmp	#LR__3844
250e4     04 4E 05 F1 | 	add	fp, #4
250e8     A7 16 02 FB | 	rdlong	arg03, fp
250ec     04 4E 85 F1 | 	sub	fp, #4
250f0     11 16 06 F1 | 	add	arg03, #17
250f4     0B 03 48 FC | 	wrbyte	#1, arg03
250f8     01 FA 05 F6 | 	mov	result1, #1
250fc     28 04 90 FD | 	jmp	#LR__3863
25100                 | LR__3844
25100     04 4E 05 F1 | 	add	fp, #4
25104     A7 16 02 FB | 	rdlong	arg03, fp
25108     10 4E 05 F1 | 	add	fp, #16
2510c     A7 18 02 FB | 	rdlong	arg04, fp
25110     14 4E 85 F1 | 	sub	fp, #20
25114     08 16 06 F1 | 	add	arg03, #8
25118     0B 19 62 FC | 	wrlong	arg04, arg03
2511c                 | LR__3845
2511c     04 4E 05 F1 | 	add	fp, #4
25120     A7 16 02 FB | 	rdlong	arg03, fp
25124     10 4E 05 F1 | 	add	fp, #16
25128     A7 18 02 FB | 	rdlong	arg04, fp
2512c     14 4E 85 F1 | 	sub	fp, #20
25130     18 16 06 F1 | 	add	arg03, #24
25134     0B 19 62 FC | 	wrlong	arg04, arg03
25138                 | LR__3846
25138     14 4E 05 F1 | 	add	fp, #20
2513c     A7 16 0A FB | 	rdlong	arg03, fp wz
25140     14 4E 85 F1 | 	sub	fp, #20
25144     28 02 90 AD |  if_e	jmp	#LR__3856
25148                 | ' 				while (ofs > bcs) {
25148                 | LR__3847
25148     08 4E 05 F1 | 	add	fp, #8
2514c     A7 18 02 FB | 	rdlong	arg04, fp
25150     10 4E 05 F1 | 	add	fp, #16
25154     A7 16 02 FB | 	rdlong	arg03, fp
25158     18 4E 85 F1 | 	sub	fp, #24
2515c     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
25160     68 01 90 ED |  if_be	jmp	#LR__3853
25164     08 4E 05 F1 | 	add	fp, #8
25168     A7 18 02 FB | 	rdlong	arg04, fp
2516c     10 4E 05 F1 | 	add	fp, #16
25170     A7 16 02 FB | 	rdlong	arg03, fp
25174     0B 19 82 F1 | 	sub	arg04, arg03
25178     10 4E 85 F1 | 	sub	fp, #16
2517c     A7 18 62 FC | 	wrlong	arg04, fp
25180     04 4E 85 F1 | 	sub	fp, #4
25184     A7 18 02 FB | 	rdlong	arg04, fp
25188     0C FB 01 F6 | 	mov	result1, arg04
2518c     14 18 06 F1 | 	add	arg04, #20
25190     0C 19 02 FB | 	rdlong	arg04, arg04
25194     14 4E 05 F1 | 	add	fp, #20
25198     A7 16 02 FB | 	rdlong	arg03, fp
2519c     0B 19 02 F1 | 	add	arg04, arg03
251a0     14 FA 05 F1 | 	add	result1, #20
251a4     FD 18 62 FC | 	wrlong	arg04, result1
251a8     14 4E 85 F1 | 	sub	fp, #20
251ac     A7 16 02 FB | 	rdlong	arg03, fp
251b0     04 4E 85 F1 | 	sub	fp, #4
251b4     10 16 06 F1 | 	add	arg03, #16
251b8     0B 17 C2 FA | 	rdbyte	arg03, arg03
251bc     02 16 CE F7 | 	test	arg03, #2 wz
251c0     3C 00 90 AD |  if_e	jmp	#LR__3848
251c4     04 4E 05 F1 | 	add	fp, #4
251c8     A7 12 02 FB | 	rdlong	arg01, fp
251cc     10 4E 05 F1 | 	add	fp, #16
251d0     A7 14 02 FB | 	rdlong	arg02, fp
251d4     14 4E 85 F1 | 	sub	fp, #20
251d8     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
251dc     14 4E 05 F1 | 	add	fp, #20
251e0     A7 FA 61 FC | 	wrlong	result1, fp
251e4     00 FA 4D F2 | 	cmps	result1, #0 wz
251e8     14 4E 85 F1 | 	sub	fp, #20
251ec     08 4E 05 A1 |  if_e	add	fp, #8
251f0     A7 00 68 AC |  if_e	wrlong	#0, fp
251f4     08 4E 85 A1 |  if_e	sub	fp, #8
251f8                 | ' 							ofs = 0; break;
251f8     D0 00 90 AD |  if_e	jmp	#LR__3853
251fc     24 00 90 FD | 	jmp	#LR__3849
25200                 | LR__3848
25200     04 4E 05 F1 | 	add	fp, #4
25204     A7 12 02 FB | 	rdlong	arg01, fp
25208     10 4E 05 F1 | 	add	fp, #16
2520c     A7 14 02 FB | 	rdlong	arg02, fp
25210     14 4E 85 F1 | 	sub	fp, #20
25214     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
25218     14 4E 05 F1 | 	add	fp, #20
2521c     A7 FA 61 FC | 	wrlong	result1, fp
25220     14 4E 85 F1 | 	sub	fp, #20
25224                 | LR__3849
25224     14 4E 05 F1 | 	add	fp, #20
25228     A7 16 02 FB | 	rdlong	arg03, fp
2522c     14 4E 85 F1 | 	sub	fp, #20
25230     FF FF 7F FF 
25234     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
25238     1C 00 90 5D |  if_ne	jmp	#LR__3850
2523c     04 4E 05 F1 | 	add	fp, #4
25240     A7 16 02 FB | 	rdlong	arg03, fp
25244     04 4E 85 F1 | 	sub	fp, #4
25248     11 16 06 F1 | 	add	arg03, #17
2524c     0B 03 48 FC | 	wrbyte	#1, arg03
25250     01 FA 05 F6 | 	mov	result1, #1
25254     D0 02 90 FD | 	jmp	#LR__3863
25258                 | LR__3850
25258     14 4E 05 F1 | 	add	fp, #20
2525c     A7 16 02 FB | 	rdlong	arg03, fp
25260     14 4E 85 F1 | 	sub	fp, #20
25264     02 16 16 F2 | 	cmp	arg03, #2 wc
25268     24 00 90 CD |  if_b	jmp	#LR__3851
2526c     10 4E 05 F1 | 	add	fp, #16
25270     A7 18 02 FB | 	rdlong	arg04, fp
25274     04 4E 05 F1 | 	add	fp, #4
25278     A7 16 02 FB | 	rdlong	arg03, fp
2527c     14 4E 85 F1 | 	sub	fp, #20
25280     18 18 06 F1 | 	add	arg04, #24
25284     0C 19 02 FB | 	rdlong	arg04, arg04
25288     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2528c     1C 00 90 CD |  if_b	jmp	#LR__3852
25290                 | LR__3851
25290     04 4E 05 F1 | 	add	fp, #4
25294     A7 16 02 FB | 	rdlong	arg03, fp
25298     04 4E 85 F1 | 	sub	fp, #4
2529c     11 16 06 F1 | 	add	arg03, #17
252a0     0B 05 48 FC | 	wrbyte	#2, arg03
252a4     02 FA 05 F6 | 	mov	result1, #2
252a8     7C 02 90 FD | 	jmp	#LR__3863
252ac                 | LR__3852
252ac     04 4E 05 F1 | 	add	fp, #4
252b0     A7 18 02 FB | 	rdlong	arg04, fp
252b4     10 4E 05 F1 | 	add	fp, #16
252b8     A7 16 02 FB | 	rdlong	arg03, fp
252bc     14 4E 85 F1 | 	sub	fp, #20
252c0     18 18 06 F1 | 	add	arg04, #24
252c4     0C 17 62 FC | 	wrlong	arg03, arg04
252c8     7C FE 9F FD | 	jmp	#LR__3847
252cc                 | LR__3853
252cc     04 4E 05 F1 | 	add	fp, #4
252d0     A7 16 02 FB | 	rdlong	arg03, fp
252d4     0B 13 02 F6 | 	mov	arg01, arg03
252d8     14 16 06 F1 | 	add	arg03, #20
252dc     0B 15 02 FB | 	rdlong	arg02, arg03
252e0     04 4E 05 F1 | 	add	fp, #4
252e4     A7 16 02 FB | 	rdlong	arg03, fp
252e8     0B 15 02 F1 | 	add	arg02, arg03
252ec     14 12 06 F1 | 	add	arg01, #20
252f0     09 15 62 FC | 	wrlong	arg02, arg01
252f4     A7 16 02 FB | 	rdlong	arg03, fp
252f8     08 4E 85 F1 | 	sub	fp, #8
252fc     FF 17 CE F7 | 	test	arg03, #511 wz
25300     6C 00 90 AD |  if_e	jmp	#LR__3855
25304     10 4E 05 F1 | 	add	fp, #16
25308     A7 12 02 FB | 	rdlong	arg01, fp
2530c     04 4E 05 F1 | 	add	fp, #4
25310     A7 14 02 FB | 	rdlong	arg02, fp
25314     14 4E 85 F1 | 	sub	fp, #20
25318     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2531c     1C 4E 05 F1 | 	add	fp, #28
25320     A7 FA 61 FC | 	wrlong	result1, fp
25324     1C 4E 85 F1 | 	sub	fp, #28
25328     00 FA 0D F2 | 	cmp	result1, #0 wz
2532c     1C 00 90 5D |  if_ne	jmp	#LR__3854
25330     04 4E 05 F1 | 	add	fp, #4
25334     A7 16 02 FB | 	rdlong	arg03, fp
25338     04 4E 85 F1 | 	sub	fp, #4
2533c     11 16 06 F1 | 	add	arg03, #17
25340     0B 05 48 FC | 	wrbyte	#2, arg03
25344     02 FA 05 F6 | 	mov	result1, #2
25348     DC 01 90 FD | 	jmp	#LR__3863
2534c                 | LR__3854
2534c     1C 4E 05 F1 | 	add	fp, #28
25350     A7 18 02 FB | 	rdlong	arg04, fp
25354     14 4E 85 F1 | 	sub	fp, #20
25358     A7 16 02 FB | 	rdlong	arg03, fp
2535c     09 16 46 F0 | 	shr	arg03, #9
25360     0B 19 02 F1 | 	add	arg04, arg03
25364     14 4E 05 F1 | 	add	fp, #20
25368     A7 18 62 FC | 	wrlong	arg04, fp
2536c     1C 4E 85 F1 | 	sub	fp, #28
25370                 | LR__3855
25370                 | LR__3856
25370                 | LR__3857
25370     04 4E 05 F1 | 	add	fp, #4
25374     A7 18 02 FB | 	rdlong	arg04, fp
25378     0C 17 02 F6 | 	mov	arg03, arg04
2537c     04 4E 85 F1 | 	sub	fp, #4
25380     14 16 06 F1 | 	add	arg03, #20
25384     0B 17 02 FB | 	rdlong	arg03, arg03
25388     0C 18 06 F1 | 	add	arg04, #12
2538c     0C 19 02 FB | 	rdlong	arg04, arg04
25390     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
25394     3C 00 90 ED |  if_be	jmp	#LR__3858
25398     04 4E 05 F1 | 	add	fp, #4
2539c     A7 18 02 FB | 	rdlong	arg04, fp
253a0     0C 17 02 F6 | 	mov	arg03, arg04
253a4     14 18 06 F1 | 	add	arg04, #20
253a8     0C 19 02 FB | 	rdlong	arg04, arg04
253ac     0C 16 06 F1 | 	add	arg03, #12
253b0     0B 19 62 FC | 	wrlong	arg04, arg03
253b4     A7 18 02 FB | 	rdlong	arg04, fp
253b8     0C 17 02 F6 | 	mov	arg03, arg04
253bc     04 4E 85 F1 | 	sub	fp, #4
253c0     10 18 06 F1 | 	add	arg04, #16
253c4     0C 19 C2 FA | 	rdbyte	arg04, arg04
253c8     40 18 46 F5 | 	or	arg04, #64
253cc     10 16 06 F1 | 	add	arg03, #16
253d0     0B 19 42 FC | 	wrbyte	arg04, arg03
253d4                 | LR__3858
253d4     04 4E 05 F1 | 	add	fp, #4
253d8     A7 16 02 FB | 	rdlong	arg03, fp
253dc     04 4E 85 F1 | 	sub	fp, #4
253e0     14 16 06 F1 | 	add	arg03, #20
253e4     0B 17 02 FB | 	rdlong	arg03, arg03
253e8     FF 17 CE F7 | 	test	arg03, #511 wz
253ec     2C 01 90 AD |  if_e	jmp	#LR__3862
253f0     04 4E 05 F1 | 	add	fp, #4
253f4     A7 18 02 FB | 	rdlong	arg04, fp
253f8     18 4E 05 F1 | 	add	fp, #24
253fc     A7 16 02 FB | 	rdlong	arg03, fp
25400     1C 4E 85 F1 | 	sub	fp, #28
25404     1C 18 06 F1 | 	add	arg04, #28
25408     0C 19 02 FB | 	rdlong	arg04, arg04
2540c     0C 17 0A F2 | 	cmp	arg03, arg04 wz
25410     08 01 90 AD |  if_e	jmp	#LR__3862
25414     04 4E 05 F1 | 	add	fp, #4
25418     A7 16 02 FB | 	rdlong	arg03, fp
2541c     04 4E 85 F1 | 	sub	fp, #4
25420     10 16 06 F1 | 	add	arg03, #16
25424     0B 17 C2 FA | 	rdbyte	arg03, arg03
25428     80 16 CE F7 | 	test	arg03, #128 wz
2542c     7C 00 90 AD |  if_e	jmp	#LR__3860
25430     10 4E 05 F1 | 	add	fp, #16
25434     A7 16 02 FB | 	rdlong	arg03, fp
25438     01 16 06 F1 | 	add	arg03, #1
2543c     0B 13 C2 FA | 	rdbyte	arg01, arg03
25440     0C 4E 85 F1 | 	sub	fp, #12
25444     A7 16 02 FB | 	rdlong	arg03, fp
25448     0B 15 02 F6 | 	mov	arg02, arg03
2544c     28 14 06 F1 | 	add	arg02, #40
25450     04 4E 85 F1 | 	sub	fp, #4
25454     1C 16 06 F1 | 	add	arg03, #28
25458     0B 17 02 FB | 	rdlong	arg03, arg03
2545c     01 18 06 F6 | 	mov	arg04, #1
25460     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
25464     00 FA 0D F2 | 	cmp	result1, #0 wz
25468     1C 00 90 AD |  if_e	jmp	#LR__3859
2546c     04 4E 05 F1 | 	add	fp, #4
25470     A7 16 02 FB | 	rdlong	arg03, fp
25474     04 4E 85 F1 | 	sub	fp, #4
25478     11 16 06 F1 | 	add	arg03, #17
2547c     0B 03 48 FC | 	wrbyte	#1, arg03
25480     01 FA 05 F6 | 	mov	result1, #1
25484     A0 00 90 FD | 	jmp	#LR__3863
25488                 | LR__3859
25488     04 4E 05 F1 | 	add	fp, #4
2548c     A7 18 02 FB | 	rdlong	arg04, fp
25490     0C 17 02 F6 | 	mov	arg03, arg04
25494     04 4E 85 F1 | 	sub	fp, #4
25498     10 18 06 F1 | 	add	arg04, #16
2549c     0C 19 C2 FA | 	rdbyte	arg04, arg04
254a0     7F 18 06 F5 | 	and	arg04, #127
254a4     10 16 06 F1 | 	add	arg03, #16
254a8     0B 19 42 FC | 	wrbyte	arg04, arg03
254ac                 | LR__3860
254ac     10 4E 05 F1 | 	add	fp, #16
254b0     A7 16 02 FB | 	rdlong	arg03, fp
254b4     01 16 06 F1 | 	add	arg03, #1
254b8     0B 13 C2 FA | 	rdbyte	arg01, arg03
254bc     0C 4E 85 F1 | 	sub	fp, #12
254c0     A7 14 02 FB | 	rdlong	arg02, fp
254c4     28 14 06 F1 | 	add	arg02, #40
254c8     18 4E 05 F1 | 	add	fp, #24
254cc     A7 16 02 FB | 	rdlong	arg03, fp
254d0     1C 4E 85 F1 | 	sub	fp, #28
254d4     01 18 06 F6 | 	mov	arg04, #1
254d8     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
254dc     00 FA 0D F2 | 	cmp	result1, #0 wz
254e0     1C 00 90 AD |  if_e	jmp	#LR__3861
254e4     04 4E 05 F1 | 	add	fp, #4
254e8     A7 16 02 FB | 	rdlong	arg03, fp
254ec     04 4E 85 F1 | 	sub	fp, #4
254f0     11 16 06 F1 | 	add	arg03, #17
254f4     0B 03 48 FC | 	wrbyte	#1, arg03
254f8     01 FA 05 F6 | 	mov	result1, #1
254fc     28 00 90 FD | 	jmp	#LR__3863
25500                 | LR__3861
25500     04 4E 05 F1 | 	add	fp, #4
25504     A7 18 02 FB | 	rdlong	arg04, fp
25508     18 4E 05 F1 | 	add	fp, #24
2550c     A7 16 02 FB | 	rdlong	arg03, fp
25510     1C 4E 85 F1 | 	sub	fp, #28
25514     1C 18 06 F1 | 	add	arg04, #28
25518     0C 17 62 FC | 	wrlong	arg03, arg04
2551c                 | LR__3862
2551c                 | ' 
2551c                 | ' 			fp->sect = nsect;
2551c                 | ' 		}
2551c                 | ' 	}
2551c                 | ' 
2551c                 | ' 	return res ;
2551c     0C 4E 05 F1 | 	add	fp, #12
25520     A7 FA 01 FB | 	rdlong	result1, fp
25524     0C 4E 85 F1 | 	sub	fp, #12
25528                 | LR__3863
25528     A7 F0 03 F6 | 	mov	ptra, fp
2552c     B2 00 A0 FD | 	call	#popregs_
25530                 | _fatfs_cc_f_lseek_ret
25530     2D 00 64 FD | 	ret
25534                 | 
25534                 | _fatfs_cc_f_opendir
25534     01 4A 05 F6 | 	mov	COUNT_, #1
25538     A8 00 A0 FD | 	call	#pushregs_
2553c     14 F0 07 F1 | 	add	ptra, #20
25540     04 4E 05 F1 | 	add	fp, #4
25544     A7 12 62 FC | 	wrlong	arg01, fp
25548     04 4E 05 F1 | 	add	fp, #4
2554c     A7 14 62 FC | 	wrlong	arg02, fp
25550     04 4E 85 F1 | 	sub	fp, #4
25554     A7 16 0A FB | 	rdlong	arg03, fp wz
25558     04 4E 85 F1 | 	sub	fp, #4
2555c     09 FA 05 A6 |  if_e	mov	result1, #9
25560     78 01 90 AD |  if_e	jmp	#LR__3876
25564     08 4E 05 F1 | 	add	fp, #8
25568     A7 12 02 F6 | 	mov	arg01, fp
2556c     08 4E 05 F1 | 	add	fp, #8
25570     A7 14 02 F6 | 	mov	arg02, fp
25574     10 4E 85 F1 | 	sub	fp, #16
25578     00 16 06 F6 | 	mov	arg03, #0
2557c     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
25580     0C 4E 05 F1 | 	add	fp, #12
25584     A7 FA 61 FC | 	wrlong	result1, fp
25588     0C 4E 85 F1 | 	sub	fp, #12
2558c     00 FA 0D F2 | 	cmp	result1, #0 wz
25590     20 01 90 5D |  if_ne	jmp	#LR__3875
25594     04 4E 05 F1 | 	add	fp, #4
25598     A7 16 02 FB | 	rdlong	arg03, fp
2559c     0C 4E 05 F1 | 	add	fp, #12
255a0     A7 FA 01 FB | 	rdlong	result1, fp
255a4     0B FB 61 FC | 	wrlong	result1, arg03
255a8     0C 4E 85 F1 | 	sub	fp, #12
255ac     A7 12 02 FB | 	rdlong	arg01, fp
255b0     04 4E 05 F1 | 	add	fp, #4
255b4     A7 14 02 FB | 	rdlong	arg02, fp
255b8     08 4E 85 F1 | 	sub	fp, #8
255bc     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
255c0     0C 4E 05 F1 | 	add	fp, #12
255c4     A7 FA 61 FC | 	wrlong	result1, fp
255c8     0C 4E 85 F1 | 	sub	fp, #12
255cc     00 FA 0D F2 | 	cmp	result1, #0 wz
255d0     C4 00 90 5D |  if_ne	jmp	#LR__3874
255d4     04 4E 05 F1 | 	add	fp, #4
255d8     A7 16 02 FB | 	rdlong	arg03, fp
255dc     04 4E 85 F1 | 	sub	fp, #4
255e0     2B 16 06 F1 | 	add	arg03, #43
255e4     0B 17 C2 FA | 	rdbyte	arg03, arg03
255e8     80 16 CE F7 | 	test	arg03, #128 wz
255ec     58 00 90 5D |  if_ne	jmp	#LR__3872
255f0     04 4E 05 F1 | 	add	fp, #4
255f4     A7 16 02 FB | 	rdlong	arg03, fp
255f8     04 4E 85 F1 | 	sub	fp, #4
255fc     06 16 06 F1 | 	add	arg03, #6
25600     0B 17 C2 FA | 	rdbyte	arg03, arg03
25604     10 16 CE F7 | 	test	arg03, #16 wz
25608     30 00 90 AD |  if_e	jmp	#LR__3870
2560c     04 4E 05 F1 | 	add	fp, #4
25610     A7 16 02 FB | 	rdlong	arg03, fp
25614     0B 1F 02 F6 | 	mov	local01, arg03
25618     0C 4E 05 F1 | 	add	fp, #12
2561c     A7 12 02 FB | 	rdlong	arg01, fp
25620     10 4E 85 F1 | 	sub	fp, #16
25624     1C 16 06 F1 | 	add	arg03, #28
25628     0B 15 02 FB | 	rdlong	arg02, arg03
2562c     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
25630     08 1E 06 F1 | 	add	local01, #8
25634     0F FB 61 FC | 	wrlong	result1, local01
25638     0C 00 90 FD | 	jmp	#LR__3871
2563c                 | LR__3870
2563c     0C 4E 05 F1 | 	add	fp, #12
25640     A7 0A 68 FC | 	wrlong	#5, fp
25644     0C 4E 85 F1 | 	sub	fp, #12
25648                 | LR__3871
25648                 | LR__3872
25648     0C 4E 05 F1 | 	add	fp, #12
2564c     A7 1E 0A FB | 	rdlong	local01, fp wz
25650     0C 4E 85 F1 | 	sub	fp, #12
25654     40 00 90 5D |  if_ne	jmp	#LR__3873
25658     04 4E 05 F1 | 	add	fp, #4
2565c     A7 1E 02 FB | 	rdlong	local01, fp
25660     0C 4E 05 F1 | 	add	fp, #12
25664     A7 16 02 FB | 	rdlong	arg03, fp
25668     06 16 06 F1 | 	add	arg03, #6
2566c     0B 17 E2 FA | 	rdword	arg03, arg03
25670     04 1E 06 F1 | 	add	local01, #4
25674     0F 17 52 FC | 	wrword	arg03, local01
25678     0C 4E 85 F1 | 	sub	fp, #12
2567c     A7 12 02 FB | 	rdlong	arg01, fp
25680     04 4E 85 F1 | 	sub	fp, #4
25684     00 14 06 F6 | 	mov	arg02, #0
25688     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2568c     0C 4E 05 F1 | 	add	fp, #12
25690     A7 FA 61 FC | 	wrlong	result1, fp
25694     0C 4E 85 F1 | 	sub	fp, #12
25698                 | LR__3873
25698                 | LR__3874
25698     0C 4E 05 F1 | 	add	fp, #12
2569c     A7 1E 02 FB | 	rdlong	local01, fp
256a0     0C 4E 85 F1 | 	sub	fp, #12
256a4     04 1E 0E F2 | 	cmp	local01, #4 wz
256a8     0C 4E 05 A1 |  if_e	add	fp, #12
256ac     A7 0A 68 AC |  if_e	wrlong	#5, fp
256b0     0C 4E 85 A1 |  if_e	sub	fp, #12
256b4                 | LR__3875
256b4     0C 4E 05 F1 | 	add	fp, #12
256b8     A7 1E 0A FB | 	rdlong	local01, fp wz
256bc     0C 4E 85 F1 | 	sub	fp, #12
256c0     04 4E 05 51 |  if_ne	add	fp, #4
256c4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
256c8     04 4E 85 51 |  if_ne	sub	fp, #4
256cc     0F 01 68 5C |  if_ne	wrlong	#0, local01
256d0                 | ' 
256d0                 | ' 	return res ;
256d0     0C 4E 05 F1 | 	add	fp, #12
256d4     A7 FA 01 FB | 	rdlong	result1, fp
256d8     0C 4E 85 F1 | 	sub	fp, #12
256dc                 | LR__3876
256dc     A7 F0 03 F6 | 	mov	ptra, fp
256e0     B2 00 A0 FD | 	call	#popregs_
256e4                 | _fatfs_cc_f_opendir_ret
256e4     2D 00 64 FD | 	ret
256e8                 | 
256e8                 | _fatfs_cc_f_closedir
256e8     00 4A 05 F6 | 	mov	COUNT_, #0
256ec     A8 00 A0 FD | 	call	#pushregs_
256f0     10 F0 07 F1 | 	add	ptra, #16
256f4     04 4E 05 F1 | 	add	fp, #4
256f8     A7 12 62 FC | 	wrlong	arg01, fp
256fc     08 4E 05 F1 | 	add	fp, #8
25700     A7 14 02 F6 | 	mov	arg02, fp
25704     0C 4E 85 F1 | 	sub	fp, #12
25708     C0 DD BF FD | 	call	#_fatfs_cc_validate
2570c     08 4E 05 F1 | 	add	fp, #8
25710     A7 FA 61 FC | 	wrlong	result1, fp
25714     08 4E 85 F1 | 	sub	fp, #8
25718     00 FA 0D F2 | 	cmp	result1, #0 wz
2571c     04 4E 05 A1 |  if_e	add	fp, #4
25720     A7 FA 01 AB |  if_e	rdlong	result1, fp
25724     04 4E 85 A1 |  if_e	sub	fp, #4
25728     FD 00 68 AC |  if_e	wrlong	#0, result1
2572c                 | ' 
2572c                 | ' 
2572c                 | ' 
2572c                 | ' 
2572c                 | ' 		dp->obj.fs = 0;
2572c                 | ' #line 4633 "ff.c"
2572c                 | ' 	}
2572c                 | ' 	return res;
2572c     08 4E 05 F1 | 	add	fp, #8
25730     A7 FA 01 FB | 	rdlong	result1, fp
25734     08 4E 85 F1 | 	sub	fp, #8
25738     A7 F0 03 F6 | 	mov	ptra, fp
2573c     B2 00 A0 FD | 	call	#popregs_
25740                 | _fatfs_cc_f_closedir_ret
25740     2D 00 64 FD | 	ret
25744                 | 
25744                 | _fatfs_cc_f_readdir
25744     00 4A 05 F6 | 	mov	COUNT_, #0
25748     A8 00 A0 FD | 	call	#pushregs_
2574c     14 F0 07 F1 | 	add	ptra, #20
25750     04 4E 05 F1 | 	add	fp, #4
25754     A7 12 62 FC | 	wrlong	arg01, fp
25758     04 4E 05 F1 | 	add	fp, #4
2575c     A7 14 62 FC | 	wrlong	arg02, fp
25760     04 4E 85 F1 | 	sub	fp, #4
25764     A7 12 02 FB | 	rdlong	arg01, fp
25768     0C 4E 05 F1 | 	add	fp, #12
2576c     A7 14 02 F6 | 	mov	arg02, fp
25770     10 4E 85 F1 | 	sub	fp, #16
25774     54 DD BF FD | 	call	#_fatfs_cc_validate
25778     0C 4E 05 F1 | 	add	fp, #12
2577c     A7 FA 61 FC | 	wrlong	result1, fp
25780     0C 4E 85 F1 | 	sub	fp, #12
25784     00 FA 0D F2 | 	cmp	result1, #0 wz
25788     BC 00 90 5D |  if_ne	jmp	#LR__3883
2578c     08 4E 05 F1 | 	add	fp, #8
25790     A7 FA 09 FB | 	rdlong	result1, fp wz
25794     08 4E 85 F1 | 	sub	fp, #8
25798     24 00 90 5D |  if_ne	jmp	#LR__3880
2579c     04 4E 05 F1 | 	add	fp, #4
257a0     A7 12 02 FB | 	rdlong	arg01, fp
257a4     04 4E 85 F1 | 	sub	fp, #4
257a8     00 14 06 F6 | 	mov	arg02, #0
257ac     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
257b0     0C 4E 05 F1 | 	add	fp, #12
257b4     A7 FA 61 FC | 	wrlong	result1, fp
257b8     0C 4E 85 F1 | 	sub	fp, #12
257bc     88 00 90 FD | 	jmp	#LR__3882
257c0                 | LR__3880
257c0     04 4E 05 F1 | 	add	fp, #4
257c4     A7 12 02 FB | 	rdlong	arg01, fp
257c8     04 4E 85 F1 | 	sub	fp, #4
257cc     00 14 06 F6 | 	mov	arg02, #0
257d0     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
257d4     0C 4E 05 F1 | 	add	fp, #12
257d8     A7 FA 61 FC | 	wrlong	result1, fp
257dc     0C 4E 85 F1 | 	sub	fp, #12
257e0     04 FA 0D F2 | 	cmp	result1, #4 wz
257e4     0C 4E 05 A1 |  if_e	add	fp, #12
257e8     A7 00 68 AC |  if_e	wrlong	#0, fp
257ec     0C 4E 85 A1 |  if_e	sub	fp, #12
257f0     0C 4E 05 F1 | 	add	fp, #12
257f4     A7 FA 09 FB | 	rdlong	result1, fp wz
257f8     0C 4E 85 F1 | 	sub	fp, #12
257fc     48 00 90 5D |  if_ne	jmp	#LR__3881
25800     04 4E 05 F1 | 	add	fp, #4
25804     A7 12 02 FB | 	rdlong	arg01, fp
25808     04 4E 05 F1 | 	add	fp, #4
2580c     A7 14 02 FB | 	rdlong	arg02, fp
25810     08 4E 85 F1 | 	sub	fp, #8
25814     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
25818     04 4E 05 F1 | 	add	fp, #4
2581c     A7 12 02 FB | 	rdlong	arg01, fp
25820     04 4E 85 F1 | 	sub	fp, #4
25824     00 14 06 F6 | 	mov	arg02, #0
25828     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2582c     0C 4E 05 F1 | 	add	fp, #12
25830     A7 FA 61 FC | 	wrlong	result1, fp
25834     0C 4E 85 F1 | 	sub	fp, #12
25838     04 FA 0D F2 | 	cmp	result1, #4 wz
2583c     0C 4E 05 A1 |  if_e	add	fp, #12
25840     A7 00 68 AC |  if_e	wrlong	#0, fp
25844     0C 4E 85 A1 |  if_e	sub	fp, #12
25848                 | LR__3881
25848                 | LR__3882
25848                 | LR__3883
25848                 | ' 			}
25848                 | ' 			;
25848                 | ' 		}
25848                 | ' 	}
25848                 | ' 	return res ;
25848     0C 4E 05 F1 | 	add	fp, #12
2584c     A7 FA 01 FB | 	rdlong	result1, fp
25850     0C 4E 85 F1 | 	sub	fp, #12
25854     A7 F0 03 F6 | 	mov	ptra, fp
25858     B2 00 A0 FD | 	call	#popregs_
2585c                 | _fatfs_cc_f_readdir_ret
2585c     2D 00 64 FD | 	ret
25860                 | 
25860                 | _fatfs_cc_f_stat
25860     00 4A 05 F6 | 	mov	COUNT_, #0
25864     A8 00 A0 FD | 	call	#pushregs_
25868     40 F0 07 F1 | 	add	ptra, #64
2586c     04 4E 05 F1 | 	add	fp, #4
25870     A7 12 62 FC | 	wrlong	arg01, fp
25874     04 4E 05 F1 | 	add	fp, #4
25878     A7 14 62 FC | 	wrlong	arg02, fp
2587c     04 4E 85 F1 | 	sub	fp, #4
25880     A7 12 02 F6 | 	mov	arg01, fp
25884     0C 4E 05 F1 | 	add	fp, #12
25888     A7 14 02 F6 | 	mov	arg02, fp
2588c     10 4E 85 F1 | 	sub	fp, #16
25890     00 16 06 F6 | 	mov	arg03, #0
25894     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
25898     0C 4E 05 F1 | 	add	fp, #12
2589c     A7 FA 61 FC | 	wrlong	result1, fp
258a0     0C 4E 85 F1 | 	sub	fp, #12
258a4     00 FA 0D F2 | 	cmp	result1, #0 wz
258a8     74 00 90 5D |  if_ne	jmp	#LR__3893
258ac     10 4E 05 F1 | 	add	fp, #16
258b0     A7 12 02 F6 | 	mov	arg01, fp
258b4     0C 4E 85 F1 | 	sub	fp, #12
258b8     A7 14 02 FB | 	rdlong	arg02, fp
258bc     04 4E 85 F1 | 	sub	fp, #4
258c0     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
258c4     0C 4E 05 F1 | 	add	fp, #12
258c8     A7 FA 61 FC | 	wrlong	result1, fp
258cc     0C 4E 85 F1 | 	sub	fp, #12
258d0     00 FA 0D F2 | 	cmp	result1, #0 wz
258d4     48 00 90 5D |  if_ne	jmp	#LR__3892
258d8     3B 4E 05 F1 | 	add	fp, #59
258dc     A7 FA C1 FA | 	rdbyte	result1, fp
258e0     3B 4E 85 F1 | 	sub	fp, #59
258e4     80 FA CD F7 | 	test	result1, #128 wz
258e8     0C 4E 05 51 |  if_ne	add	fp, #12
258ec     A7 0C 68 5C |  if_ne	wrlong	#6, fp
258f0     0C 4E 85 51 |  if_ne	sub	fp, #12
258f4     28 00 90 5D |  if_ne	jmp	#LR__3891
258f8     08 4E 05 F1 | 	add	fp, #8
258fc     A7 FA 09 FB | 	rdlong	result1, fp wz
25900     08 4E 85 F1 | 	sub	fp, #8
25904     18 00 90 AD |  if_e	jmp	#LR__3890
25908     10 4E 05 F1 | 	add	fp, #16
2590c     A7 12 02 F6 | 	mov	arg01, fp
25910     08 4E 85 F1 | 	sub	fp, #8
25914     A7 14 02 FB | 	rdlong	arg02, fp
25918     08 4E 85 F1 | 	sub	fp, #8
2591c     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
25920                 | LR__3890
25920                 | LR__3891
25920                 | LR__3892
25920                 | LR__3893
25920                 | ' 			}
25920                 | ' 		}
25920                 | ' 		;
25920                 | ' 	}
25920                 | ' 
25920                 | ' 	return res ;
25920     0C 4E 05 F1 | 	add	fp, #12
25924     A7 FA 01 FB | 	rdlong	result1, fp
25928     0C 4E 85 F1 | 	sub	fp, #12
2592c     A7 F0 03 F6 | 	mov	ptra, fp
25930     B2 00 A0 FD | 	call	#popregs_
25934                 | _fatfs_cc_f_stat_ret
25934     2D 00 64 FD | 	ret
25938                 | 
25938                 | _fatfs_cc_f_unlink
25938     00 4A 05 F6 | 	mov	COUNT_, #0
2593c     A8 00 A0 FD | 	call	#pushregs_
25940     74 F0 07 F1 | 	add	ptra, #116
25944     04 4E 05 F1 | 	add	fp, #4
25948     A7 12 62 FC | 	wrlong	arg01, fp
2594c     68 4E 05 F1 | 	add	fp, #104
25950     A7 00 68 FC | 	wrlong	#0, fp
25954     68 4E 85 F1 | 	sub	fp, #104
25958     A7 12 02 F6 | 	mov	arg01, fp
2595c     6C 4E 05 F1 | 	add	fp, #108
25960     A7 14 02 F6 | 	mov	arg02, fp
25964     70 4E 85 F1 | 	sub	fp, #112
25968     02 16 06 F6 | 	mov	arg03, #2
2596c     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
25970     08 4E 05 F1 | 	add	fp, #8
25974     A7 FA 61 FC | 	wrlong	result1, fp
25978     08 4E 85 F1 | 	sub	fp, #8
2597c     00 FA 0D F2 | 	cmp	result1, #0 wz
25980     E4 01 90 5D |  if_ne	jmp	#LR__3908
25984     70 4E 05 F1 | 	add	fp, #112
25988     A7 16 02 FB | 	rdlong	arg03, fp
2598c     64 4E 85 F1 | 	sub	fp, #100
25990     A7 16 62 FC | 	wrlong	arg03, fp
25994     A7 12 02 F6 | 	mov	arg01, fp
25998     08 4E 85 F1 | 	sub	fp, #8
2599c     A7 14 02 FB | 	rdlong	arg02, fp
259a0     04 4E 85 F1 | 	sub	fp, #4
259a4     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
259a8     08 4E 05 F1 | 	add	fp, #8
259ac     A7 FA 61 FC | 	wrlong	result1, fp
259b0     00 FA 4D F2 | 	cmps	result1, #0 wz
259b4     08 4E 85 F1 | 	sub	fp, #8
259b8     AC 01 90 5D |  if_ne	jmp	#LR__3907
259bc     37 4E 05 F1 | 	add	fp, #55
259c0     A7 FA C1 FA | 	rdbyte	result1, fp
259c4     37 4E 85 F1 | 	sub	fp, #55
259c8     80 FA CD F7 | 	test	result1, #128 wz
259cc     08 4E 05 51 |  if_ne	add	fp, #8
259d0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
259d4     08 4E 85 51 |  if_ne	sub	fp, #8
259d8     1C 00 90 5D |  if_ne	jmp	#LR__3900
259dc     12 4E 05 F1 | 	add	fp, #18
259e0     A7 FA C1 FA | 	rdbyte	result1, fp
259e4     12 4E 85 F1 | 	sub	fp, #18
259e8     01 FA CD F7 | 	test	result1, #1 wz
259ec     08 4E 05 51 |  if_ne	add	fp, #8
259f0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
259f4     08 4E 85 51 |  if_ne	sub	fp, #8
259f8                 | LR__3900
259f8     08 4E 05 F1 | 	add	fp, #8
259fc     A7 FA 09 FB | 	rdlong	result1, fp wz
25a00     08 4E 85 F1 | 	sub	fp, #8
25a04     C8 00 90 5D |  if_ne	jmp	#LR__3903
25a08     70 4E 05 F1 | 	add	fp, #112
25a0c     A7 12 02 FB | 	rdlong	arg01, fp
25a10     48 4E 85 F1 | 	sub	fp, #72
25a14     A7 14 02 FB | 	rdlong	arg02, fp
25a18     28 4E 85 F1 | 	sub	fp, #40
25a1c     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
25a20     6C 4E 05 F1 | 	add	fp, #108
25a24     A7 FA 61 FC | 	wrlong	result1, fp
25a28     5A 4E 85 F1 | 	sub	fp, #90
25a2c     A7 FA C1 FA | 	rdbyte	result1, fp
25a30     12 4E 85 F1 | 	sub	fp, #18
25a34     10 FA CD F7 | 	test	result1, #16 wz
25a38     94 00 90 AD |  if_e	jmp	#LR__3902
25a3c     70 4E 05 F1 | 	add	fp, #112
25a40     A7 FA 01 FB | 	rdlong	result1, fp
25a44     34 4E 85 F1 | 	sub	fp, #52
25a48     A7 FA 61 FC | 	wrlong	result1, fp
25a4c     30 4E 05 F1 | 	add	fp, #48
25a50     A7 16 02 FB | 	rdlong	arg03, fp
25a54     28 4E 85 F1 | 	sub	fp, #40
25a58     A7 16 62 FC | 	wrlong	arg03, fp
25a5c     08 4E 85 F1 | 	sub	fp, #8
25a60     A7 12 02 F6 | 	mov	arg01, fp
25a64     3C 4E 85 F1 | 	sub	fp, #60
25a68     00 14 06 F6 | 	mov	arg02, #0
25a6c     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
25a70     08 4E 05 F1 | 	add	fp, #8
25a74     A7 FA 61 FC | 	wrlong	result1, fp
25a78     08 4E 85 F1 | 	sub	fp, #8
25a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
25a80     4C 00 90 5D |  if_ne	jmp	#LR__3901
25a84     3C 4E 05 F1 | 	add	fp, #60
25a88     A7 12 02 F6 | 	mov	arg01, fp
25a8c     3C 4E 85 F1 | 	sub	fp, #60
25a90     00 14 06 F6 | 	mov	arg02, #0
25a94     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
25a98     08 4E 05 F1 | 	add	fp, #8
25a9c     A7 FA 61 FC | 	wrlong	result1, fp
25aa0     00 FA 4D F2 | 	cmps	result1, #0 wz
25aa4     08 4E 85 F1 | 	sub	fp, #8
25aa8     08 4E 05 A1 |  if_e	add	fp, #8
25aac     A7 0E 68 AC |  if_e	wrlong	#7, fp
25ab0     08 4E 85 A1 |  if_e	sub	fp, #8
25ab4     08 4E 05 F1 | 	add	fp, #8
25ab8     A7 FA 01 FB | 	rdlong	result1, fp
25abc     08 4E 85 F1 | 	sub	fp, #8
25ac0     04 FA 0D F2 | 	cmp	result1, #4 wz
25ac4     08 4E 05 A1 |  if_e	add	fp, #8
25ac8     A7 00 68 AC |  if_e	wrlong	#0, fp
25acc     08 4E 85 A1 |  if_e	sub	fp, #8
25ad0                 | LR__3901
25ad0                 | LR__3902
25ad0                 | LR__3903
25ad0     08 4E 05 F1 | 	add	fp, #8
25ad4     A7 FA 09 FB | 	rdlong	result1, fp wz
25ad8     08 4E 85 F1 | 	sub	fp, #8
25adc     88 00 90 5D |  if_ne	jmp	#LR__3906
25ae0     0C 4E 05 F1 | 	add	fp, #12
25ae4     A7 12 02 F6 | 	mov	arg01, fp
25ae8     0C 4E 85 F1 | 	sub	fp, #12
25aec     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
25af0     08 4E 05 F1 | 	add	fp, #8
25af4     A7 FA 61 FC | 	wrlong	result1, fp
25af8     08 4E 85 F1 | 	sub	fp, #8
25afc     00 FA 0D F2 | 	cmp	result1, #0 wz
25b00     38 00 90 5D |  if_ne	jmp	#LR__3904
25b04     6C 4E 05 F1 | 	add	fp, #108
25b08     A7 FA 09 FB | 	rdlong	result1, fp wz
25b0c     6C 4E 85 F1 | 	sub	fp, #108
25b10     28 00 90 AD |  if_e	jmp	#LR__3904
25b14     0C 4E 05 F1 | 	add	fp, #12
25b18     A7 12 02 F6 | 	mov	arg01, fp
25b1c     60 4E 05 F1 | 	add	fp, #96
25b20     A7 14 02 FB | 	rdlong	arg02, fp
25b24     6C 4E 85 F1 | 	sub	fp, #108
25b28     00 16 06 F6 | 	mov	arg03, #0
25b2c     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
25b30     08 4E 05 F1 | 	add	fp, #8
25b34     A7 FA 61 FC | 	wrlong	result1, fp
25b38     08 4E 85 F1 | 	sub	fp, #8
25b3c                 | LR__3904
25b3c     08 4E 05 F1 | 	add	fp, #8
25b40     A7 FA 09 FB | 	rdlong	result1, fp wz
25b44     08 4E 85 F1 | 	sub	fp, #8
25b48     1C 00 90 5D |  if_ne	jmp	#LR__3905
25b4c     70 4E 05 F1 | 	add	fp, #112
25b50     A7 12 02 FB | 	rdlong	arg01, fp
25b54     70 4E 85 F1 | 	sub	fp, #112
25b58     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
25b5c     08 4E 05 F1 | 	add	fp, #8
25b60     A7 FA 61 FC | 	wrlong	result1, fp
25b64     08 4E 85 F1 | 	sub	fp, #8
25b68                 | LR__3905
25b68                 | LR__3906
25b68                 | LR__3907
25b68                 | LR__3908
25b68                 | ' 			}
25b68                 | ' 		}
25b68                 | ' 		;
25b68                 | ' 	}
25b68                 | ' 
25b68                 | ' 	return res ;
25b68     08 4E 05 F1 | 	add	fp, #8
25b6c     A7 FA 01 FB | 	rdlong	result1, fp
25b70     08 4E 85 F1 | 	sub	fp, #8
25b74     A7 F0 03 F6 | 	mov	ptra, fp
25b78     B2 00 A0 FD | 	call	#popregs_
25b7c                 | _fatfs_cc_f_unlink_ret
25b7c     2D 00 64 FD | 	ret
25b80                 | 
25b80                 | _fatfs_cc_f_mkdir
25b80     00 4A 05 F6 | 	mov	COUNT_, #0
25b84     A8 00 A0 FD | 	call	#pushregs_
25b88     5C F0 07 F1 | 	add	ptra, #92
25b8c     04 4E 05 F1 | 	add	fp, #4
25b90     A7 12 62 FC | 	wrlong	arg01, fp
25b94     A7 12 02 F6 | 	mov	arg01, fp
25b98     48 4E 05 F1 | 	add	fp, #72
25b9c     A7 14 02 F6 | 	mov	arg02, fp
25ba0     4C 4E 85 F1 | 	sub	fp, #76
25ba4     02 16 06 F6 | 	mov	arg03, #2
25ba8     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
25bac     08 4E 05 F1 | 	add	fp, #8
25bb0     A7 FA 61 FC | 	wrlong	result1, fp
25bb4     08 4E 85 F1 | 	sub	fp, #8
25bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
25bbc     C4 02 90 5D |  if_ne	jmp	#LR__3915
25bc0     4C 4E 05 F1 | 	add	fp, #76
25bc4     A7 16 02 FB | 	rdlong	arg03, fp
25bc8     40 4E 85 F1 | 	sub	fp, #64
25bcc     A7 16 62 FC | 	wrlong	arg03, fp
25bd0     A7 12 02 F6 | 	mov	arg01, fp
25bd4     08 4E 85 F1 | 	sub	fp, #8
25bd8     A7 14 02 FB | 	rdlong	arg02, fp
25bdc     04 4E 85 F1 | 	sub	fp, #4
25be0     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
25be4     08 4E 05 F1 | 	add	fp, #8
25be8     A7 FA 61 FC | 	wrlong	result1, fp
25bec     00 FA 4D F2 | 	cmps	result1, #0 wz
25bf0     08 4E 85 F1 | 	sub	fp, #8
25bf4     08 4E 05 A1 |  if_e	add	fp, #8
25bf8     A7 10 68 AC |  if_e	wrlong	#8, fp
25bfc     08 4E 85 A1 |  if_e	sub	fp, #8
25c00     08 4E 05 F1 | 	add	fp, #8
25c04     A7 FA 01 FB | 	rdlong	result1, fp
25c08     08 4E 85 F1 | 	sub	fp, #8
25c0c     04 FA 0D F2 | 	cmp	result1, #4 wz
25c10     70 02 90 5D |  if_ne	jmp	#LR__3914
25c14     4C 4E 05 F1 | 	add	fp, #76
25c18     A7 16 02 FB | 	rdlong	arg03, fp
25c1c     10 4E 85 F1 | 	sub	fp, #16
25c20     A7 16 62 FC | 	wrlong	arg03, fp
25c24     A7 12 02 F6 | 	mov	arg01, fp
25c28     3C 4E 85 F1 | 	sub	fp, #60
25c2c     00 14 06 F6 | 	mov	arg02, #0
25c30     04 AC BF FD | 	call	#_fatfs_cc_create_chain
25c34     50 4E 05 F1 | 	add	fp, #80
25c38     A7 FA 61 FC | 	wrlong	result1, fp
25c3c     48 4E 85 F1 | 	sub	fp, #72
25c40     A7 00 68 FC | 	wrlong	#0, fp
25c44     48 4E 05 F1 | 	add	fp, #72
25c48     A7 FA 09 FB | 	rdlong	result1, fp wz
25c4c     50 4E 85 F1 | 	sub	fp, #80
25c50     08 4E 05 A1 |  if_e	add	fp, #8
25c54     A7 0E 68 AC |  if_e	wrlong	#7, fp
25c58     08 4E 85 A1 |  if_e	sub	fp, #8
25c5c     50 4E 05 F1 | 	add	fp, #80
25c60     A7 FA 01 FB | 	rdlong	result1, fp
25c64     50 4E 85 F1 | 	sub	fp, #80
25c68     01 FA 0D F2 | 	cmp	result1, #1 wz
25c6c     08 4E 05 A1 |  if_e	add	fp, #8
25c70     A7 04 68 AC |  if_e	wrlong	#2, fp
25c74     08 4E 85 A1 |  if_e	sub	fp, #8
25c78     50 4E 05 F1 | 	add	fp, #80
25c7c     A7 16 02 FB | 	rdlong	arg03, fp
25c80     50 4E 85 F1 | 	sub	fp, #80
25c84     FF FF 7F FF 
25c88     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
25c8c     08 4E 05 A1 |  if_e	add	fp, #8
25c90     A7 02 68 AC |  if_e	wrlong	#1, fp
25c94     08 4E 85 A1 |  if_e	sub	fp, #8
25c98     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
25c9c     58 4E 05 F1 | 	add	fp, #88
25ca0     A7 FA 61 FC | 	wrlong	result1, fp
25ca4     50 4E 85 F1 | 	sub	fp, #80
25ca8     A7 FA 09 FB | 	rdlong	result1, fp wz
25cac     08 4E 85 F1 | 	sub	fp, #8
25cb0     1C 01 90 5D |  if_ne	jmp	#LR__3911
25cb4     4C 4E 05 F1 | 	add	fp, #76
25cb8     A7 12 02 FB | 	rdlong	arg01, fp
25cbc     04 4E 05 F1 | 	add	fp, #4
25cc0     A7 14 02 FB | 	rdlong	arg02, fp
25cc4     50 4E 85 F1 | 	sub	fp, #80
25cc8     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
25ccc     08 4E 05 F1 | 	add	fp, #8
25cd0     A7 FA 61 FC | 	wrlong	result1, fp
25cd4     00 FA 4D F2 | 	cmps	result1, #0 wz
25cd8     08 4E 85 F1 | 	sub	fp, #8
25cdc     F0 00 90 5D |  if_ne	jmp	#LR__3910
25ce0     4C 4E 05 F1 | 	add	fp, #76
25ce4     A7 12 02 FB | 	rdlong	arg01, fp
25ce8     4C 4E 85 F1 | 	sub	fp, #76
25cec     34 12 06 F1 | 	add	arg01, #52
25cf0     20 14 06 F6 | 	mov	arg02, #32
25cf4     0B 16 06 F6 | 	mov	arg03, #11
25cf8     98 00 A0 FD | 	call	#\builtin_bytefill_
25cfc     4C 4E 05 F1 | 	add	fp, #76
25d00     A7 FA 01 FB | 	rdlong	result1, fp
25d04     34 FA 05 F1 | 	add	result1, #52
25d08     FD 5C 48 FC | 	wrbyte	#46, result1
25d0c     A7 16 02 FB | 	rdlong	arg03, fp
25d10     3F 16 06 F1 | 	add	arg03, #63
25d14     0B 21 48 FC | 	wrbyte	#16, arg03
25d18     A7 12 02 FB | 	rdlong	arg01, fp
25d1c     4A 12 06 F1 | 	add	arg01, #74
25d20     0C 4E 05 F1 | 	add	fp, #12
25d24     A7 14 02 FB | 	rdlong	arg02, fp
25d28     09 15 62 FC | 	wrlong	arg02, arg01
25d2c     0C 4E 85 F1 | 	sub	fp, #12
25d30     A7 14 02 FB | 	rdlong	arg02, fp
25d34     0A 13 02 F6 | 	mov	arg01, arg02
25d38     34 14 06 F1 | 	add	arg02, #52
25d3c     04 4E 05 F1 | 	add	fp, #4
25d40     A7 16 02 FB | 	rdlong	arg03, fp
25d44     50 4E 85 F1 | 	sub	fp, #80
25d48     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
25d4c     4C 4E 05 F1 | 	add	fp, #76
25d50     A7 14 02 FB | 	rdlong	arg02, fp
25d54     0A 13 02 F6 | 	mov	arg01, arg02
25d58     54 12 06 F1 | 	add	arg01, #84
25d5c     4C 4E 85 F1 | 	sub	fp, #76
25d60     34 14 06 F1 | 	add	arg02, #52
25d64     20 16 06 F6 | 	mov	arg03, #32
25d68     64 2D BF FD | 	call	#__system____builtin_memmove
25d6c     4C 4E 05 F1 | 	add	fp, #76
25d70     A7 16 02 FB | 	rdlong	arg03, fp
25d74     55 16 06 F1 | 	add	arg03, #85
25d78     0B 5D 48 FC | 	wrbyte	#46, arg03
25d7c     38 4E 85 F1 | 	sub	fp, #56
25d80     A7 16 02 FB | 	rdlong	arg03, fp
25d84     40 4E 05 F1 | 	add	fp, #64
25d88     A7 16 62 FC | 	wrlong	arg03, fp
25d8c     08 4E 85 F1 | 	sub	fp, #8
25d90     A7 14 02 FB | 	rdlong	arg02, fp
25d94     0A 13 02 F6 | 	mov	arg01, arg02
25d98     54 14 06 F1 | 	add	arg02, #84
25d9c     4C 4E 85 F1 | 	sub	fp, #76
25da0     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
25da4     4C 4E 05 F1 | 	add	fp, #76
25da8     A7 16 02 FB | 	rdlong	arg03, fp
25dac     03 16 06 F1 | 	add	arg03, #3
25db0     0B 03 48 FC | 	wrbyte	#1, arg03
25db4     40 4E 85 F1 | 	sub	fp, #64
25db8     A7 12 02 F6 | 	mov	arg01, fp
25dbc     0C 4E 85 F1 | 	sub	fp, #12
25dc0     44 BA BF FD | 	call	#_fatfs_cc_dir_register
25dc4     08 4E 05 F1 | 	add	fp, #8
25dc8     A7 FA 61 FC | 	wrlong	result1, fp
25dcc     08 4E 85 F1 | 	sub	fp, #8
25dd0                 | LR__3910
25dd0                 | LR__3911
25dd0     08 4E 05 F1 | 	add	fp, #8
25dd4     A7 FA 09 FB | 	rdlong	result1, fp wz
25dd8     08 4E 85 F1 | 	sub	fp, #8
25ddc     88 00 90 5D |  if_ne	jmp	#LR__3912
25de0     28 4E 05 F1 | 	add	fp, #40
25de4     A7 12 02 FB | 	rdlong	arg01, fp
25de8     16 12 06 F1 | 	add	arg01, #22
25dec     30 4E 05 F1 | 	add	fp, #48
25df0     A7 14 02 FB | 	rdlong	arg02, fp
25df4     09 15 62 FC | 	wrlong	arg02, arg01
25df8     0C 4E 85 F1 | 	sub	fp, #12
25dfc     A7 12 02 FB | 	rdlong	arg01, fp
25e00     24 4E 85 F1 | 	sub	fp, #36
25e04     A7 14 02 FB | 	rdlong	arg02, fp
25e08     28 4E 05 F1 | 	add	fp, #40
25e0c     A7 16 02 FB | 	rdlong	arg03, fp
25e10     50 4E 85 F1 | 	sub	fp, #80
25e14     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
25e18     28 4E 05 F1 | 	add	fp, #40
25e1c     A7 FA 01 FB | 	rdlong	result1, fp
25e20     0B FA 05 F1 | 	add	result1, #11
25e24     FD 20 48 FC | 	wrbyte	#16, result1
25e28     24 4E 05 F1 | 	add	fp, #36
25e2c     A7 FA 01 FB | 	rdlong	result1, fp
25e30     03 FA 05 F1 | 	add	result1, #3
25e34     FD 02 48 FC | 	wrbyte	#1, result1
25e38     44 4E 85 F1 | 	sub	fp, #68
25e3c     A7 FA 09 FB | 	rdlong	result1, fp wz
25e40     08 4E 85 F1 | 	sub	fp, #8
25e44     3C 00 90 5D |  if_ne	jmp	#LR__3913
25e48     4C 4E 05 F1 | 	add	fp, #76
25e4c     A7 12 02 FB | 	rdlong	arg01, fp
25e50     4C 4E 85 F1 | 	sub	fp, #76
25e54     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
25e58     08 4E 05 F1 | 	add	fp, #8
25e5c     A7 FA 61 FC | 	wrlong	result1, fp
25e60     08 4E 85 F1 | 	sub	fp, #8
25e64     1C 00 90 FD | 	jmp	#LR__3913
25e68                 | LR__3912
25e68     3C 4E 05 F1 | 	add	fp, #60
25e6c     A7 12 02 F6 | 	mov	arg01, fp
25e70     14 4E 05 F1 | 	add	fp, #20
25e74     A7 14 02 FB | 	rdlong	arg02, fp
25e78     50 4E 85 F1 | 	sub	fp, #80
25e7c     00 16 06 F6 | 	mov	arg03, #0
25e80     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
25e84                 | LR__3913
25e84                 | LR__3914
25e84                 | LR__3915
25e84                 | ' 				remove_chain(&sobj, dcl, 0);
25e84                 | ' 			}
25e84                 | ' 		}
25e84                 | ' 		;
25e84                 | ' 	}
25e84                 | ' 
25e84                 | ' 	return res ;
25e84     08 4E 05 F1 | 	add	fp, #8
25e88     A7 FA 01 FB | 	rdlong	result1, fp
25e8c     08 4E 85 F1 | 	sub	fp, #8
25e90     A7 F0 03 F6 | 	mov	ptra, fp
25e94     B2 00 A0 FD | 	call	#popregs_
25e98                 | _fatfs_cc_f_mkdir_ret
25e98     2D 00 64 FD | 	ret
25e9c                 | 
25e9c                 | _fatfs_cc_f_rename
25e9c     01 4A 05 F6 | 	mov	COUNT_, #1
25ea0     A8 00 A0 FD | 	call	#pushregs_
25ea4     9C F0 07 F1 | 	add	ptra, #156
25ea8     04 4E 05 F1 | 	add	fp, #4
25eac     A7 12 62 FC | 	wrlong	arg01, fp
25eb0     04 4E 05 F1 | 	add	fp, #4
25eb4     A7 14 62 FC | 	wrlong	arg02, fp
25eb8     A7 12 02 F6 | 	mov	arg01, fp
25ebc     08 4E 85 F1 | 	sub	fp, #8
25ec0     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
25ec4     04 4E 05 F1 | 	add	fp, #4
25ec8     A7 12 02 F6 | 	mov	arg01, fp
25ecc     6C 4E 05 F1 | 	add	fp, #108
25ed0     A7 14 02 F6 | 	mov	arg02, fp
25ed4     70 4E 85 F1 | 	sub	fp, #112
25ed8     02 16 06 F6 | 	mov	arg03, #2
25edc     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
25ee0     0C 4E 05 F1 | 	add	fp, #12
25ee4     A7 FA 61 FC | 	wrlong	result1, fp
25ee8     0C 4E 85 F1 | 	sub	fp, #12
25eec     00 FA 0D F2 | 	cmp	result1, #0 wz
25ef0     44 03 90 5D |  if_ne	jmp	#LR__3933
25ef4     70 4E 05 F1 | 	add	fp, #112
25ef8     A7 16 02 FB | 	rdlong	arg03, fp
25efc     60 4E 85 F1 | 	sub	fp, #96
25f00     A7 16 62 FC | 	wrlong	arg03, fp
25f04     A7 12 02 F6 | 	mov	arg01, fp
25f08     0C 4E 85 F1 | 	sub	fp, #12
25f0c     A7 14 02 FB | 	rdlong	arg02, fp
25f10     04 4E 85 F1 | 	sub	fp, #4
25f14     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
25f18     0C 4E 05 F1 | 	add	fp, #12
25f1c     A7 FA 61 FC | 	wrlong	result1, fp
25f20     00 FA 4D F2 | 	cmps	result1, #0 wz
25f24     0C 4E 85 F1 | 	sub	fp, #12
25f28     1C 00 90 5D |  if_ne	jmp	#LR__3920
25f2c     3B 4E 05 F1 | 	add	fp, #59
25f30     A7 FA C1 FA | 	rdbyte	result1, fp
25f34     3B 4E 85 F1 | 	sub	fp, #59
25f38     A0 FA CD F7 | 	test	result1, #160 wz
25f3c     0C 4E 05 51 |  if_ne	add	fp, #12
25f40     A7 0C 68 5C |  if_ne	wrlong	#6, fp
25f44     0C 4E 85 51 |  if_ne	sub	fp, #12
25f48                 | LR__3920
25f48     0C 4E 05 F1 | 	add	fp, #12
25f4c     A7 1E 0A FB | 	rdlong	local01, fp wz
25f50     0C 4E 85 F1 | 	sub	fp, #12
25f54     E0 02 90 5D |  if_ne	jmp	#LR__3932
25f58     74 4E 05 F1 | 	add	fp, #116
25f5c     A7 12 02 F6 | 	mov	arg01, fp
25f60     48 4E 85 F1 | 	sub	fp, #72
25f64     A7 14 02 FB | 	rdlong	arg02, fp
25f68     2C 4E 85 F1 | 	sub	fp, #44
25f6c     20 16 06 F6 | 	mov	arg03, #32
25f70     5C 2B BF FD | 	call	#__system____builtin_memmove
25f74     40 4E 05 F1 | 	add	fp, #64
25f78     A7 12 02 F6 | 	mov	arg01, fp
25f7c     30 4E 85 F1 | 	sub	fp, #48
25f80     A7 14 02 F6 | 	mov	arg02, fp
25f84     10 4E 85 F1 | 	sub	fp, #16
25f88     30 16 06 F6 | 	mov	arg03, #48
25f8c     40 2B BF FD | 	call	#__system____builtin_memmove
25f90     40 4E 05 F1 | 	add	fp, #64
25f94     A7 12 02 F6 | 	mov	arg01, fp
25f98     38 4E 85 F1 | 	sub	fp, #56
25f9c     A7 14 02 FB | 	rdlong	arg02, fp
25fa0     08 4E 85 F1 | 	sub	fp, #8
25fa4     34 CA BF FD | 	call	#_fatfs_cc_follow_path
25fa8     0C 4E 05 F1 | 	add	fp, #12
25fac     A7 FA 61 FC | 	wrlong	result1, fp
25fb0     0C 4E 85 F1 | 	sub	fp, #12
25fb4     00 FA 0D F2 | 	cmp	result1, #0 wz
25fb8     4C 00 90 5D |  if_ne	jmp	#LR__3923
25fbc     48 4E 05 F1 | 	add	fp, #72
25fc0     A7 FA 01 FB | 	rdlong	result1, fp
25fc4     30 4E 85 F1 | 	sub	fp, #48
25fc8     A7 16 02 FB | 	rdlong	arg03, fp
25fcc     18 4E 85 F1 | 	sub	fp, #24
25fd0     0B FB 09 F2 | 	cmp	result1, arg03 wz
25fd4     20 00 90 5D |  if_ne	jmp	#LR__3921
25fd8     50 4E 05 F1 | 	add	fp, #80
25fdc     A7 FA 01 FB | 	rdlong	result1, fp
25fe0     30 4E 85 F1 | 	sub	fp, #48
25fe4     A7 16 02 FB | 	rdlong	arg03, fp
25fe8     20 4E 85 F1 | 	sub	fp, #32
25fec     0B FB 09 F2 | 	cmp	result1, arg03 wz
25ff0     04 1E 06 A6 |  if_e	mov	local01, #4
25ff4     04 00 90 AD |  if_e	jmp	#LR__3922
25ff8                 | LR__3921
25ff8     08 1E 06 F6 | 	mov	local01, #8
25ffc                 | LR__3922
25ffc     0C 4E 05 F1 | 	add	fp, #12
26000     A7 1E 62 FC | 	wrlong	local01, fp
26004     0C 4E 85 F1 | 	sub	fp, #12
26008                 | LR__3923
26008     0C 4E 05 F1 | 	add	fp, #12
2600c     A7 1E 02 FB | 	rdlong	local01, fp
26010     0C 4E 85 F1 | 	sub	fp, #12
26014     04 1E 0E F2 | 	cmp	local01, #4 wz
26018     CC 01 90 5D |  if_ne	jmp	#LR__3929
2601c     40 4E 05 F1 | 	add	fp, #64
26020     A7 12 02 F6 | 	mov	arg01, fp
26024     40 4E 85 F1 | 	sub	fp, #64
26028     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2602c     0C 4E 05 F1 | 	add	fp, #12
26030     A7 FA 61 FC | 	wrlong	result1, fp
26034     0C 4E 85 F1 | 	sub	fp, #12
26038     00 FA 0D F2 | 	cmp	result1, #0 wz
2603c     A8 01 90 5D |  if_ne	jmp	#LR__3928
26040     5C 4E 05 F1 | 	add	fp, #92
26044     A7 12 02 FB | 	rdlong	arg01, fp
26048     38 4E 05 F1 | 	add	fp, #56
2604c     A7 12 62 FC | 	wrlong	arg01, fp
26050     0D 12 06 F1 | 	add	arg01, #13
26054     20 4E 85 F1 | 	sub	fp, #32
26058     A7 14 02 F6 | 	mov	arg02, fp
2605c     74 4E 85 F1 | 	sub	fp, #116
26060     0D 14 06 F1 | 	add	arg02, #13
26064     13 16 06 F6 | 	mov	arg03, #19
26068     64 2A BF FD | 	call	#__system____builtin_memmove
2606c     94 4E 05 F1 | 	add	fp, #148
26070     A7 1E 02 FB | 	rdlong	local01, fp
26074     15 4E 85 F1 | 	sub	fp, #21
26078     A7 FA C1 FA | 	rdbyte	result1, fp
2607c     0B 1E 06 F1 | 	add	local01, #11
26080     0F FB 41 FC | 	wrbyte	result1, local01
26084     15 4E 05 F1 | 	add	fp, #21
26088     A7 1E 02 FB | 	rdlong	local01, fp
2608c     94 4E 85 F1 | 	sub	fp, #148
26090     0B 1E 06 F1 | 	add	local01, #11
26094     0F 1F C2 FA | 	rdbyte	local01, local01
26098     10 1E CE F7 | 	test	local01, #16 wz
2609c     24 00 90 5D |  if_ne	jmp	#LR__3924
260a0     94 4E 05 F1 | 	add	fp, #148
260a4     A7 FA 01 FB | 	rdlong	result1, fp
260a8     FD 1E 02 F6 | 	mov	local01, result1
260ac     94 4E 85 F1 | 	sub	fp, #148
260b0     0B FA 05 F1 | 	add	result1, #11
260b4     FD FA C1 FA | 	rdbyte	result1, result1
260b8     20 FA 45 F5 | 	or	result1, #32
260bc     0B 1E 06 F1 | 	add	local01, #11
260c0     0F FB 41 FC | 	wrbyte	result1, local01
260c4                 | LR__3924
260c4     70 4E 05 F1 | 	add	fp, #112
260c8     A7 1E 02 FB | 	rdlong	local01, fp
260cc     03 1E 06 F1 | 	add	local01, #3
260d0     0F 03 48 FC | 	wrbyte	#1, local01
260d4     24 4E 05 F1 | 	add	fp, #36
260d8     A7 1E 02 FB | 	rdlong	local01, fp
260dc     94 4E 85 F1 | 	sub	fp, #148
260e0     0B 1E 06 F1 | 	add	local01, #11
260e4     0F 1F C2 FA | 	rdbyte	local01, local01
260e8     10 1E CE F7 | 	test	local01, #16 wz
260ec     F8 00 90 AD |  if_e	jmp	#LR__3927
260f0     18 4E 05 F1 | 	add	fp, #24
260f4     A7 16 02 FB | 	rdlong	arg03, fp
260f8     30 4E 05 F1 | 	add	fp, #48
260fc     A7 1E 02 FB | 	rdlong	local01, fp
26100     48 4E 85 F1 | 	sub	fp, #72
26104     0F 17 0A F2 | 	cmp	arg03, local01 wz
26108     DC 00 90 AD |  if_e	jmp	#LR__3927
2610c     70 4E 05 F1 | 	add	fp, #112
26110     A7 12 02 FB | 	rdlong	arg01, fp
26114     09 1F 02 F6 | 	mov	local01, arg01
26118     24 4E 05 F1 | 	add	fp, #36
2611c     A7 14 02 FB | 	rdlong	arg02, fp
26120     94 4E 85 F1 | 	sub	fp, #148
26124     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
26128     FD 14 02 F6 | 	mov	arg02, result1
2612c     0F 13 02 F6 | 	mov	arg01, local01
26130     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
26134     98 4E 05 F1 | 	add	fp, #152
26138     A7 FA 61 FC | 	wrlong	result1, fp
2613c     00 FA 4D F2 | 	cmps	result1, #0 wz
26140     98 4E 85 F1 | 	sub	fp, #152
26144     0C 4E 05 A1 |  if_e	add	fp, #12
26148     A7 04 68 AC |  if_e	wrlong	#2, fp
2614c     0C 4E 85 A1 |  if_e	sub	fp, #12
26150     94 00 90 AD |  if_e	jmp	#LR__3926
26154     70 4E 05 F1 | 	add	fp, #112
26158     A7 12 02 FB | 	rdlong	arg01, fp
2615c     28 4E 05 F1 | 	add	fp, #40
26160     A7 14 02 FB | 	rdlong	arg02, fp
26164     98 4E 85 F1 | 	sub	fp, #152
26168     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2616c     0C 4E 05 F1 | 	add	fp, #12
26170     A7 FA 61 FC | 	wrlong	result1, fp
26174     64 4E 05 F1 | 	add	fp, #100
26178     A7 1E 02 FB | 	rdlong	local01, fp
2617c     54 1E 06 F1 | 	add	local01, #84
26180     24 4E 05 F1 | 	add	fp, #36
26184     A7 1E 62 FC | 	wrlong	local01, fp
26188     88 4E 85 F1 | 	sub	fp, #136
2618c     A7 1E 0A FB | 	rdlong	local01, fp wz
26190     0C 4E 85 F1 | 	sub	fp, #12
26194     50 00 90 5D |  if_ne	jmp	#LR__3925
26198     94 4E 05 F1 | 	add	fp, #148
2619c     A7 1E 02 FB | 	rdlong	local01, fp
261a0     94 4E 85 F1 | 	sub	fp, #148
261a4     01 1E 06 F1 | 	add	local01, #1
261a8     0F 1F C2 FA | 	rdbyte	local01, local01
261ac     2E 1E 0E F2 | 	cmp	local01, #46 wz
261b0     34 00 90 5D |  if_ne	jmp	#LR__3925
261b4     70 4E 05 F1 | 	add	fp, #112
261b8     A7 12 02 FB | 	rdlong	arg01, fp
261bc     24 4E 05 F1 | 	add	fp, #36
261c0     A7 14 02 FB | 	rdlong	arg02, fp
261c4     4C 4E 85 F1 | 	sub	fp, #76
261c8     A7 16 02 FB | 	rdlong	arg03, fp
261cc     48 4E 85 F1 | 	sub	fp, #72
261d0     50 AD BF FD | 	call	#_fatfs_cc_st_clust
261d4     70 4E 05 F1 | 	add	fp, #112
261d8     A7 1E 02 FB | 	rdlong	local01, fp
261dc     70 4E 85 F1 | 	sub	fp, #112
261e0     03 1E 06 F1 | 	add	local01, #3
261e4     0F 03 48 FC | 	wrbyte	#1, local01
261e8                 | LR__3925
261e8                 | LR__3926
261e8                 | LR__3927
261e8                 | LR__3928
261e8                 | LR__3929
261e8     0C 4E 05 F1 | 	add	fp, #12
261ec     A7 1E 0A FB | 	rdlong	local01, fp wz
261f0     0C 4E 85 F1 | 	sub	fp, #12
261f4     40 00 90 5D |  if_ne	jmp	#LR__3931
261f8     10 4E 05 F1 | 	add	fp, #16
261fc     A7 12 02 F6 | 	mov	arg01, fp
26200     10 4E 85 F1 | 	sub	fp, #16
26204     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
26208     0C 4E 05 F1 | 	add	fp, #12
2620c     A7 FA 61 FC | 	wrlong	result1, fp
26210     0C 4E 85 F1 | 	sub	fp, #12
26214     00 FA 0D F2 | 	cmp	result1, #0 wz
26218     1C 00 90 5D |  if_ne	jmp	#LR__3930
2621c     70 4E 05 F1 | 	add	fp, #112
26220     A7 12 02 FB | 	rdlong	arg01, fp
26224     70 4E 85 F1 | 	sub	fp, #112
26228     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2622c     0C 4E 05 F1 | 	add	fp, #12
26230     A7 FA 61 FC | 	wrlong	result1, fp
26234     0C 4E 85 F1 | 	sub	fp, #12
26238                 | LR__3930
26238                 | LR__3931
26238                 | LR__3932
26238                 | LR__3933
26238                 | ' 					res = sync_fs(fs);
26238                 | ' 				}
26238                 | ' 			}
26238                 | ' 
26238                 | ' 		}
26238                 | ' 		;
26238                 | ' 	}
26238                 | ' 
26238                 | ' 	return res ;
26238     0C 4E 05 F1 | 	add	fp, #12
2623c     A7 FA 01 FB | 	rdlong	result1, fp
26240     0C 4E 85 F1 | 	sub	fp, #12
26244     A7 F0 03 F6 | 	mov	ptra, fp
26248     B2 00 A0 FD | 	call	#popregs_
2624c                 | _fatfs_cc_f_rename_ret
2624c     2D 00 64 FD | 	ret
26250                 | 
26250                 | _fatfs_cc_time
26250     00 4A 05 F6 | 	mov	COUNT_, #0
26254     A8 00 A0 FD | 	call	#pushregs_
26258     14 F0 07 F1 | 	add	ptra, #20
2625c     04 4E 05 F1 | 	add	fp, #4
26260     A7 12 62 FC | 	wrlong	arg01, fp
26264     04 4E 05 F1 | 	add	fp, #4
26268     A7 12 02 F6 | 	mov	arg01, fp
2626c     08 4E 85 F1 | 	sub	fp, #8
26270     00 14 06 F6 | 	mov	arg02, #0
26274     FC 17 B0 FD | 	call	#_fatfs_cc_gettimeofday
26278     08 4E 05 F1 | 	add	fp, #8
2627c     A7 FA 01 FB | 	rdlong	result1, fp
26280     08 4E 05 F1 | 	add	fp, #8
26284     A7 FA 61 FC | 	wrlong	result1, fp
26288     0C 4E 85 F1 | 	sub	fp, #12
2628c     A7 FA 09 FB | 	rdlong	result1, fp wz
26290     04 4E 85 F1 | 	sub	fp, #4
26294     18 00 90 AD |  if_e	jmp	#LR__3940
26298     04 4E 05 F1 | 	add	fp, #4
2629c     A7 FA 01 FB | 	rdlong	result1, fp
262a0     0C 4E 05 F1 | 	add	fp, #12
262a4     A7 14 02 FB | 	rdlong	arg02, fp
262a8     10 4E 85 F1 | 	sub	fp, #16
262ac     FD 14 62 FC | 	wrlong	arg02, result1
262b0                 | LR__3940
262b0                 | '         *tp = now;
262b0                 | '     return now;
262b0     10 4E 05 F1 | 	add	fp, #16
262b4     A7 FA 01 FB | 	rdlong	result1, fp
262b8     10 4E 85 F1 | 	sub	fp, #16
262bc     A7 F0 03 F6 | 	mov	ptra, fp
262c0     B2 00 A0 FD | 	call	#popregs_
262c4                 | _fatfs_cc_time_ret
262c4     2D 00 64 FD | 	ret
262c8                 | 
262c8                 | _fatfs_cc_mktime
262c8     06 4A 05 F6 | 	mov	COUNT_, #6
262cc     A8 00 A0 FD | 	call	#pushregs_
262d0     09 1F 02 F6 | 	mov	local01, arg01
262d4     14 1E 06 F1 | 	add	local01, #20
262d8     0F 13 02 FB | 	rdlong	arg01, local01
262dc     14 1E 86 F1 | 	sub	local01, #20
262e0     46 12 56 F2 | 	cmps	arg01, #70 wc
262e4                 | '                 return (time_t) -1;
262e4     01 FA 65 C6 |  if_b	neg	result1, #1
262e8     7C 01 90 CD |  if_b	jmp	#LR__3954
262ec     03 00 00 FF 
262f0     6C 21 06 F6 | 	mov	local02, ##1900
262f4     14 1E 06 F1 | 	add	local01, #20
262f8     0F FB 01 FB | 	rdlong	result1, local01
262fc     FD 20 02 F1 | 	add	local02, result1
26300     08 1E 86 F1 | 	sub	local01, #8
26304     0F 23 02 FB | 	rdlong	local03, local01
26308     01 22 86 F1 | 	sub	local03, #1
2630c     04 1E 06 F1 | 	add	local01, #4
26310     0F 13 02 FB | 	rdlong	arg01, local01
26314     10 1E 86 F1 | 	sub	local01, #16
26318     02 12 66 F0 | 	shl	arg01, #2
2631c     02 00 00 FF 
26320     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
26324     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
26328     09 FB 01 FB | 	rdlong	result1, arg01
2632c     FD 22 02 F1 | 	add	local03, result1
26330     10 13 02 F6 | 	mov	arg01, local02
26334     02 00 00 FF 
26338     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2633c     DC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
26340     00 FA 0D F2 | 	cmp	result1, #0 wz
26344     1C 00 90 AD |  if_e	jmp	#LR__3950
26348     00 24 06 F6 | 	mov	local04, #0
2634c     10 1E 06 F1 | 	add	local01, #16
26350     0F FB 01 FB | 	rdlong	result1, local01
26354     10 1E 86 F1 | 	sub	local01, #16
26358     02 FA 55 F2 | 	cmps	result1, #2 wc
2635c     01 24 06 36 |  if_ae	mov	local04, #1
26360     04 00 90 FD | 	jmp	#LR__3951
26364                 | LR__3950
26364     00 24 06 F6 | 	mov	local04, #0
26368                 | LR__3951
26368     04 1E 06 F1 | 	add	local01, #4
2636c     0F FB 01 FB | 	rdlong	result1, local01
26370     04 1E 86 F1 | 	sub	local01, #4
26374     0F 27 02 FB | 	rdlong	local05, local01
26378     08 1E 06 F1 | 	add	local01, #8
2637c     0F 13 02 FB | 	rdlong	arg01, local01
26380     07 00 00 FF 
26384     10 12 06 FD | 	qmul	arg01, ##3600
26388     12 23 02 F1 | 	add	local03, local04
2638c     FD 24 02 F6 | 	mov	local04, result1
26390     04 24 66 F0 | 	shl	local04, #4
26394     FD 24 82 F1 | 	sub	local04, result1
26398     02 24 66 F0 | 	shl	local04, #2
2639c     12 27 02 F1 | 	add	local05, local04
263a0     08 1E 86 F1 | 	sub	local01, #8
263a4     18 24 62 FD | 	getqx	local04
263a8     A8 00 00 FF 
263ac     80 23 06 FD | 	qmul	local03, ##86400
263b0     12 27 02 F1 | 	add	local05, local04
263b4     10 23 02 F6 | 	mov	local03, local02
263b8     03 00 00 FF 
263bc     B2 23 86 F1 | 	sub	local03, ##1970
263c0     18 24 62 FD | 	getqx	local04
263c4     99 F0 00 FF 
263c8     80 23 06 FD | 	qmul	local03, ##31536000
263cc     12 27 02 F1 | 	add	local05, local04
263d0     10 23 02 F6 | 	mov	local03, local02
263d4     03 00 00 FF 
263d8     B1 23 86 F1 | 	sub	local03, ##1969
263dc     11 29 52 F6 | 	abs	local06, local03 wc
263e0     02 28 46 F0 | 	shr	local06, #2
263e4     14 29 82 F6 | 	negc	local06, local06
263e8     03 00 00 FF 
263ec     D1 21 56 F2 | 	cmps	local02, ##2001 wc
263f0     18 24 62 FD | 	getqx	local04
263f4     12 27 02 F1 | 	add	local05, local04
263f8     18 00 90 CD |  if_b	jmp	#LR__3952
263fc     03 00 00 FF 
26400     D0 21 86 F1 | 	sub	local02, ##2000
26404     10 25 52 F6 | 	abs	local04, local02 wc
26408     64 24 16 FD | 	qdiv	local04, #100
2640c     18 24 62 FD | 	getqx	local04
26410     12 29 A2 F3 | 	sumnc	local06, local04
26414                 | LR__3952
26414     A8 00 00 FF 
26418     80 29 06 FD | 	qmul	local06, ##86400
2641c     18 28 62 FD | 	getqx	local06
26420     14 27 02 F1 | 	add	local05, local06
26424     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
26428     02 00 00 FF 
2642c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
26430     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
26434     14 27 02 F1 | 	add	local05, local06
26438     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2643c     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
26440     02 00 00 FF 
26444     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
26448     01 22 0E F2 | 	cmp	local03, #1 wz
2644c     14 00 90 5D |  if_ne	jmp	#LR__3953
26450     0F 13 02 F6 | 	mov	arg01, local01
26454     C8 19 B0 FD | 	call	#_fatfs_cc___indst
26458     00 FA 0D F2 | 	cmp	result1, #0 wz
2645c     07 00 00 5F 
26460     10 26 86 51 |  if_ne	sub	local05, ##3600
26464                 | LR__3953
26464                 | '                 s -=  (3600L) ;
26464                 | ' 
26464                 | '         return s;
26464     13 FB 01 F6 | 	mov	result1, local05
26468                 | LR__3954
26468     A7 F0 03 F6 | 	mov	ptra, fp
2646c     B2 00 A0 FD | 	call	#popregs_
26470                 | _fatfs_cc_mktime_ret
26470     2D 00 64 FD | 	ret
26474                 | 
26474                 | _fatfs_cc__gmtime_r
26474     03 4A 05 F6 | 	mov	COUNT_, #3
26478     A8 00 A0 FD | 	call	#pushregs_
2647c     09 1F 02 FB | 	rdlong	local01, arg01
26480     A8 00 00 FF 
26484     80 1F 16 FD | 	qdiv	local01, ##86400
26488     18 FA 61 FD | 	getqx	result1
2648c     04 FA 05 F1 | 	add	result1, #4
26490     07 FA 15 FD | 	qdiv	result1, #7
26494     18 14 06 F1 | 	add	arg02, #24
26498     D1 7F 27 FF 
2649c     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
264a0     D1 7F 27 3F 
264a4     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
264a8     03 00 00 3F 
264ac     DC 21 06 36 |  if_ae	mov	local02, ##2012
264b0     03 00 00 CF 
264b4     B2 21 06 C6 |  if_b	mov	local02, ##1970
264b8                 | ' 	  year = 1970;
264b8                 | ' 	}
264b8                 | ' 
264b8                 | ' 	for(;;) {
264b8     19 FA 61 FD | 	getqy	result1
264bc     0A FB 61 FC | 	wrlong	result1, arg02
264c0     18 14 86 F1 | 	sub	arg02, #24
264c4                 | LR__3960
264c4     10 13 02 F6 | 	mov	arg01, local02
264c8     50 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
264cc     00 FA 0D F2 | 	cmp	result1, #0 wz
264d0     42 F1 00 5F 
264d4     00 23 06 56 |  if_ne	mov	local03, ##31622400
264d8     99 F0 00 AF 
264dc     80 23 06 A6 |  if_e	mov	local03, ##31536000
264e0     11 1F 12 F2 | 	cmp	local01, local03 wc
264e4                 | ' 	    break;
264e4     01 20 06 31 |  if_ae	add	local02, #1
264e8     11 1F 82 31 |  if_ae	sub	local01, local03
264ec     D4 FF 9F 3D |  if_ae	jmp	#LR__3960
264f0     A8 00 00 FF 
264f4     80 1F 16 FD | 	qdiv	local01, ##86400
264f8     10 23 02 F6 | 	mov	local03, local02
264fc     03 00 00 FF 
26500     6C 23 86 F1 | 	sub	local03, ##1900
26504     14 14 06 F1 | 	add	arg02, #20
26508     0A 23 62 FC | 	wrlong	local03, arg02
2650c     08 14 06 F1 | 	add	arg02, #8
26510     10 13 02 F6 | 	mov	arg01, local02
26514     18 20 62 FD | 	getqx	local02
26518     0A 21 62 FC | 	wrlong	local02, arg02
2651c     1C 14 86 F1 | 	sub	arg02, #28
26520     F8 15 B0 FD | 	call	#_fatfs_cc__is_leap_year
26524     00 FA 0D F2 | 	cmp	result1, #0 wz
26528     1D 22 06 56 |  if_ne	mov	local03, #29
2652c     1C 22 06 A6 |  if_e	mov	local03, #28
26530     02 00 00 FF 
26534     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
26538     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2653c     02 00 00 FF 
26540     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
26544                 | ' 
26544                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
26544                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
26544     00 12 06 F6 | 	mov	arg01, #0
26548     97 2A 48 FB | 	callpa	#(@LR__3962-@LR__3961)>>2,fcache_load_ptr_
2654c                 | LR__3961
2654c     09 23 02 F6 | 	mov	local03, arg01
26550     02 22 66 F0 | 	shl	local03, #2
26554     02 00 00 FF 
26558     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2655c     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
26560     11 23 02 FB | 	rdlong	local03, local03
26564     11 21 52 F2 | 	cmps	local02, local03 wc
26568     02 00 00 FF 
2656c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
26570     2C 00 90 CD |  if_b	jmp	#LR__3963
26574     09 23 02 F6 | 	mov	local03, arg01
26578     02 22 66 F0 | 	shl	local03, #2
2657c     02 00 00 FF 
26580     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
26584     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
26588     11 23 02 FB | 	rdlong	local03, local03
2658c     11 21 82 F1 | 	sub	local02, local03
26590     01 12 06 F1 | 	add	arg01, #1
26594     02 00 00 FF 
26598     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2659c     AC FF 9F FD | 	jmp	#LR__3961
265a0                 | LR__3962
265a0                 | LR__3963
265a0     A8 00 00 FF 
265a4     80 1F 16 FD | 	qdiv	local01, ##86400
265a8     10 14 06 F1 | 	add	arg02, #16
265ac     0A 13 62 FC | 	wrlong	arg01, arg02
265b0     01 20 06 F1 | 	add	local02, #1
265b4     04 14 86 F1 | 	sub	arg02, #4
265b8     0A 21 62 FC | 	wrlong	local02, arg02
265bc     19 1E 62 FD | 	getqy	local01
265c0     07 00 00 FF 
265c4     10 1E 16 FD | 	qdiv	local01, ##3600
265c8     18 22 62 FD | 	getqx	local03
265cc     07 00 00 FF 
265d0     10 1E 16 FD | 	qdiv	local01, ##3600
265d4     04 14 86 F1 | 	sub	arg02, #4
265d8     0A 23 62 FC | 	wrlong	local03, arg02
265dc     19 1E 62 FD | 	getqy	local01
265e0     3C 1E 16 FD | 	qdiv	local01, #60
265e4     18 22 62 FD | 	getqx	local03
265e8     3C 1E 16 FD | 	qdiv	local01, #60
265ec     04 14 86 F1 | 	sub	arg02, #4
265f0     0A 23 62 FC | 	wrlong	local03, arg02
265f4     04 14 86 F1 | 	sub	arg02, #4
265f8                 | '         stm->tm_isdst = 0;
265f8                 | ' 
265f8                 | ' ;
265f8                 | '         return stm;
265f8     0A FB 01 F6 | 	mov	result1, arg02
265fc     19 22 62 FD | 	getqy	local03
26600     0A 23 62 FC | 	wrlong	local03, arg02
26604     20 14 06 F1 | 	add	arg02, #32
26608     0A 01 68 FC | 	wrlong	#0, arg02
2660c     A7 F0 03 F6 | 	mov	ptra, fp
26610     B2 00 A0 FD | 	call	#popregs_
26614                 | _fatfs_cc__gmtime_r_ret
26614     2D 00 64 FD | 	ret
26618                 | 
26618                 | _fatfs_cc__tzset
26618     40 01 00 FF 
2661c     49 13 06 F6 | 	mov	arg01, ##@LR__4275
26620     34 00 B0 FD | 	call	#_fatfs_cc_getenv
26624     FD 12 02 F6 | 	mov	arg01, result1
26628     02 00 00 FF 
2662c     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
26630     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
26634     02 00 00 FF 
26638     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2663c     2C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
26640     02 00 00 FF 
26644     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
26648     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2664c     02 00 00 FF 
26650     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
26654                 | _fatfs_cc__tzset_ret
26654     2D 00 64 FD | 	ret
26658                 | 
26658                 | _fatfs_cc_getenv
26658     06 4A 05 F6 | 	mov	COUNT_, #6
2665c     A8 00 A0 FD | 	call	#pushregs_
26660     09 1F 02 F6 | 	mov	local01, arg01
26664     09 21 02 F6 | 	mov	local02, arg01
26668     97 06 48 FB | 	callpa	#(@LR__3971-@LR__3970)>>2,fcache_load_ptr_
2666c                 | LR__3970
2666c     10 FB C9 FA | 	rdbyte	result1, local02 wz
26670     01 20 06 51 |  if_ne	add	local02, #1
26674     F4 FF 9F 5D |  if_ne	jmp	#LR__3970
26678                 | LR__3971
26678     09 21 82 F1 | 	sub	local02, arg01
2667c     10 FB 01 F6 | 	mov	result1, local02
26680     02 00 00 FF 
26684     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
26688     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2668c     02 00 00 FF 
26690     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
26694                 | '             return 0;
26694     00 FA 05 A6 |  if_e	mov	result1, #0
26698     5C 00 90 AD |  if_e	jmp	#LR__3974
2669c                 | ' 
2669c                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2669c     02 00 00 FF 
266a0     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
266a4     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
266a8     02 00 00 FF 
266ac     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
266b0                 | LR__3972
266b0     11 25 0A FB | 	rdlong	local04, local03 wz
266b4     3C 00 90 AD |  if_e	jmp	#LR__3973
266b8     12 13 02 F6 | 	mov	arg01, local04
266bc     0F 15 02 F6 | 	mov	arg02, local01
266c0     10 17 02 F6 | 	mov	arg03, local02
266c4     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
266c8     00 FA 0D F2 | 	cmp	result1, #0 wz
266cc     10 27 02 A6 |  if_e	mov	local05, local02
266d0     12 27 02 A1 |  if_e	add	local05, local04
266d4     13 29 C2 AA |  if_e	rdbyte	local06, local05
266d8     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
266dc                 | ' 			return name+len+1;
266dc     10 25 02 A1 |  if_e	add	local04, local02
266e0     01 24 06 A1 |  if_e	add	local04, #1
266e4     12 FB 01 A6 |  if_e	mov	result1, local04
266e8     0C 00 90 AD |  if_e	jmp	#LR__3974
266ec     04 22 06 F1 | 	add	local03, #4
266f0     BC FF 9F FD | 	jmp	#LR__3972
266f4                 | LR__3973
266f4                 | ' 	}
266f4                 | ' 	return 0;
266f4     00 FA 05 F6 | 	mov	result1, #0
266f8                 | LR__3974
266f8     A7 F0 03 F6 | 	mov	ptra, fp
266fc     B2 00 A0 FD | 	call	#popregs_
26700                 | _fatfs_cc_getenv_ret
26700     2D 00 64 FD | 	ret
26704                 | 
26704                 | _fatfs_cc__get_fattime
26704     00 4A 05 F6 | 	mov	COUNT_, #0
26708     A8 00 A0 FD | 	call	#pushregs_
2670c     34 F0 07 F1 | 	add	ptra, #52
26710     00 12 06 F6 | 	mov	arg01, #0
26714     38 FB BF FD | 	call	#_fatfs_cc_time
26718     04 4E 05 F1 | 	add	fp, #4
2671c     A7 FA 61 FC | 	wrlong	result1, fp
26720     A7 12 02 F6 | 	mov	arg01, fp
26724     0C 4E 05 F1 | 	add	fp, #12
26728     A7 14 02 F6 | 	mov	arg02, fp
2672c     10 4E 85 F1 | 	sub	fp, #16
26730     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
26734     24 4E 05 F1 | 	add	fp, #36
26738     A7 14 02 FB | 	rdlong	arg02, fp
2673c     50 14 86 F1 | 	sub	arg02, #80
26740     09 14 66 F0 | 	shl	arg02, #9
26744     04 4E 85 F1 | 	sub	fp, #4
26748     A7 FA 01 FB | 	rdlong	result1, fp
2674c     01 FA 05 F1 | 	add	result1, #1
26750     05 FA 65 F0 | 	shl	result1, #5
26754     FD 14 42 F5 | 	or	arg02, result1
26758     04 4E 85 F1 | 	sub	fp, #4
2675c     A7 FA 01 FB | 	rdlong	result1, fp
26760     FD 14 42 F5 | 	or	arg02, result1
26764     14 4E 85 F1 | 	sub	fp, #20
26768     A7 14 62 FC | 	wrlong	arg02, fp
2676c     10 4E 05 F1 | 	add	fp, #16
26770     A7 14 02 FB | 	rdlong	arg02, fp
26774     0B 14 66 F0 | 	shl	arg02, #11
26778     04 4E 85 F1 | 	sub	fp, #4
2677c     A7 FA 01 FB | 	rdlong	result1, fp
26780     05 FA 65 F0 | 	shl	result1, #5
26784     FD 14 42 F5 | 	or	arg02, result1
26788     04 4E 85 F1 | 	sub	fp, #4
2678c     A7 FA 01 FB | 	rdlong	result1, fp
26790     FD 14 42 F5 | 	or	arg02, result1
26794     04 4E 85 F1 | 	sub	fp, #4
26798     A7 14 62 FC | 	wrlong	arg02, fp
2679c                 | ' 
2679c                 | '     now = time(0);
2679c                 | '     _gmtime_r (&now, &date);
2679c                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2679c                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2679c                 | '     return (ffdate << 16) | fftime;
2679c     04 4E 85 F1 | 	sub	fp, #4
267a0     A7 FA 01 FB | 	rdlong	result1, fp
267a4     10 FA 65 F0 | 	shl	result1, #16
267a8     08 4E 85 F1 | 	sub	fp, #8
267ac     0A FB 41 F5 | 	or	result1, arg02
267b0     A7 F0 03 F6 | 	mov	ptra, fp
267b4     B2 00 A0 FD | 	call	#popregs_
267b8                 | _fatfs_cc__get_fattime_ret
267b8     2D 00 64 FD | 	ret
267bc                 | 
267bc                 | _fatfs_cc_unixtime_0843
267bc     00 4A 05 F6 | 	mov	COUNT_, #0
267c0     A8 00 A0 FD | 	call	#pushregs_
267c4     34 F0 07 F1 | 	add	ptra, #52
267c8     04 4E 05 F1 | 	add	fp, #4
267cc     A7 12 62 FC | 	wrlong	arg01, fp
267d0     04 4E 05 F1 | 	add	fp, #4
267d4     A7 14 62 FC | 	wrlong	arg02, fp
267d8     04 4E 85 F1 | 	sub	fp, #4
267dc     A7 14 02 FB | 	rdlong	arg02, fp
267e0     09 14 46 F0 | 	shr	arg02, #9
267e4     7F 14 06 F5 | 	and	arg02, #127
267e8     50 FA 05 F6 | 	mov	result1, #80
267ec     0A FB 01 F1 | 	add	result1, arg02
267f0     20 4E 05 F1 | 	add	fp, #32
267f4     A7 FA 61 FC | 	wrlong	result1, fp
267f8     20 4E 85 F1 | 	sub	fp, #32
267fc     A7 FA 01 FB | 	rdlong	result1, fp
26800     05 FA 45 F0 | 	shr	result1, #5
26804     FD FA 41 F8 | 	getnib	result1, result1, #0
26808     01 FA 85 F1 | 	sub	result1, #1
2680c     1C 4E 05 F1 | 	add	fp, #28
26810     A7 FA 61 FC | 	wrlong	result1, fp
26814     1C 4E 85 F1 | 	sub	fp, #28
26818     A7 FA 01 FB | 	rdlong	result1, fp
2681c     1F FA 05 F5 | 	and	result1, #31
26820     18 4E 05 F1 | 	add	fp, #24
26824     A7 FA 61 FC | 	wrlong	result1, fp
26828     14 4E 85 F1 | 	sub	fp, #20
2682c     A7 FA 01 FB | 	rdlong	result1, fp
26830     0B FA 45 F0 | 	shr	result1, #11
26834     1F FA 05 F5 | 	and	result1, #31
26838     10 4E 05 F1 | 	add	fp, #16
2683c     A7 FA 61 FC | 	wrlong	result1, fp
26840     10 4E 85 F1 | 	sub	fp, #16
26844     A7 FA 01 FB | 	rdlong	result1, fp
26848     05 FA 45 F0 | 	shr	result1, #5
2684c     3F FA 05 F5 | 	and	result1, #63
26850     0C 4E 05 F1 | 	add	fp, #12
26854     A7 FA 61 FC | 	wrlong	result1, fp
26858     0C 4E 85 F1 | 	sub	fp, #12
2685c     A7 14 02 FB | 	rdlong	arg02, fp
26860     1F 14 06 F5 | 	and	arg02, #31
26864     01 14 66 F0 | 	shl	arg02, #1
26868     08 4E 05 F1 | 	add	fp, #8
2686c     A7 14 62 FC | 	wrlong	arg02, fp
26870     A7 12 02 F6 | 	mov	arg01, fp
26874     10 4E 85 F1 | 	sub	fp, #16
26878     4C FA BF FD | 	call	#_fatfs_cc_mktime
2687c     0C 4E 05 F1 | 	add	fp, #12
26880     A7 FA 61 FC | 	wrlong	result1, fp
26884                 | ' 
26884                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
26884                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
26884                 | '     date.tm_mday = (dosdate & 0x1f);
26884                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
26884                 | '     date.tm_min = (dostime >> 5) & 0x3f;
26884                 | '     date.tm_sec = (dostime & 0x1f) << 1;
26884                 | ' 
26884                 | '     t = mktime(&date);
26884                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26884                 | '     return t;
26884     0C 4E 85 F1 | 	sub	fp, #12
26888     A7 F0 03 F6 | 	mov	ptra, fp
2688c     B2 00 A0 FD | 	call	#popregs_
26890                 | _fatfs_cc_unixtime_0843_ret
26890     2D 00 64 FD | 	ret
26894                 | 
26894                 | _fatfs_cc__set_dos_error_0845
26894     09 01 02 F6 | 	mov	_var01, arg01
26898                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26898                 | '     switch (derr) {
26898     14 00 26 F3 | 	fle	_var01, #20
2689c     30 00 62 FD | 	jmprel	_var01
268a0                 | LR__3980
268a0     50 00 90 FD | 	jmp	#LR__3981
268a4     84 00 90 FD | 	jmp	#LR__3995
268a8     80 00 90 FD | 	jmp	#LR__3996
268ac     7C 00 90 FD | 	jmp	#LR__3997
268b0     48 00 90 FD | 	jmp	#LR__3982
268b4     44 00 90 FD | 	jmp	#LR__3983
268b8     40 00 90 FD | 	jmp	#LR__3984
268bc     44 00 90 FD | 	jmp	#LR__3985
268c0     48 00 90 FD | 	jmp	#LR__3987
268c4     54 00 90 FD | 	jmp	#LR__3990
268c8     38 00 90 FD | 	jmp	#LR__3986
268cc     4C 00 90 FD | 	jmp	#LR__3991
268d0     48 00 90 FD | 	jmp	#LR__3992
268d4     44 00 90 FD | 	jmp	#LR__3993
268d8     50 00 90 FD | 	jmp	#LR__3998
268dc     4C 00 90 FD | 	jmp	#LR__3998
268e0     48 00 90 FD | 	jmp	#LR__3998
268e4     2C 00 90 FD | 	jmp	#LR__3988
268e8     38 00 90 FD | 	jmp	#LR__3994
268ec     2C 00 90 FD | 	jmp	#LR__3989
268f0     38 00 90 FD | 	jmp	#LR__3998
268f4                 | LR__3981
268f4     00 02 06 F6 | 	mov	_var02, #0
268f8                 | '         r = 0;
268f8                 | '         break;
268f8     34 00 90 FD | 	jmp	#LR__3999
268fc                 | LR__3982
268fc                 | LR__3983
268fc                 | LR__3984
268fc     04 02 06 F6 | 	mov	_var02, #4
26900                 | '         r =  4 ;
26900                 | '         break;
26900     2C 00 90 FD | 	jmp	#LR__3999
26904                 | LR__3985
26904                 | LR__3986
26904     06 02 06 F6 | 	mov	_var02, #6
26908                 | '         r =  6 ;
26908                 | '         break;
26908     24 00 90 FD | 	jmp	#LR__3999
2690c                 | LR__3987
2690c     09 02 06 F6 | 	mov	_var02, #9
26910                 | '         r =  9 ;
26910                 | '         break;
26910     1C 00 90 FD | 	jmp	#LR__3999
26914                 | LR__3988
26914     07 02 06 F6 | 	mov	_var02, #7
26918                 | '         r =  7 ;
26918                 | '         break;
26918     14 00 90 FD | 	jmp	#LR__3999
2691c                 | LR__3989
2691c                 | LR__3990
2691c                 | LR__3991
2691c                 | LR__3992
2691c                 | LR__3993
2691c     0A 02 06 F6 | 	mov	_var02, #10
26920                 | '         r =  10 ;
26920                 | '         break;
26920     0C 00 90 FD | 	jmp	#LR__3999
26924                 | LR__3994
26924     0B 02 06 F6 | 	mov	_var02, #11
26928                 | '         r =  11 ;
26928                 | '         break;
26928     04 00 90 FD | 	jmp	#LR__3999
2692c                 | LR__3995
2692c                 | LR__3996
2692c                 | LR__3997
2692c                 | LR__3998
2692c     0C 02 06 F6 | 	mov	_var02, #12
26930                 | '         r =  12 ;
26930                 | '         break;
26930                 | LR__3999
26930                 | '     }
26930                 | '     return _seterror(r);
26930     00 02 4E F2 | 	cmps	_var02, #0 wz
26934     20 E8 05 F1 | 	add	ptr___system__dat__, #32
26938     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2693c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
26940     01 FA 65 56 |  if_ne	neg	result1, #1
26944     00 FA 05 A6 |  if_e	mov	result1, #0
26948                 | _fatfs_cc__set_dos_error_0845_ret
26948     2D 00 64 FD | 	ret
2694c                 | 
2694c                 | _fatfs_cc_v_creat
2694c     04 4A 05 F6 | 	mov	COUNT_, #4
26950     A8 00 A0 FD | 	call	#pushregs_
26954     09 1F 02 F6 | 	mov	local01, arg01
26958     0A 21 02 F6 | 	mov	local02, arg02
2695c     03 00 00 FF 
26960     3C 12 06 F6 | 	mov	arg01, ##1596
26964                 | '     return _gc_alloc(size);
26964     10 14 06 F6 | 	mov	arg02, #16
26968     2C 60 BF FD | 	call	#__system___gc_doalloc
2696c     FD 22 0A F6 | 	mov	local03, result1 wz
26970                 | '       return _seterror( 7 );
26970     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26974     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26978     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
2697c     01 FA 65 A6 |  if_e	neg	result1, #1
26980     58 00 90 AD |  if_e	jmp	#LR__4001
26984     11 13 02 F6 | 	mov	arg01, local03
26988     00 14 06 F6 | 	mov	arg02, #0
2698c     03 00 00 FF 
26990     3C 16 06 F6 | 	mov	arg03, ##1596
26994     98 00 A0 FD | 	call	#\builtin_bytefill_
26998     02 00 00 FF 
2699c     14 22 06 F1 | 	add	local03, ##1044
269a0     11 13 02 F6 | 	mov	arg01, local03
269a4     02 00 00 FF 
269a8     14 22 86 F1 | 	sub	local03, ##1044
269ac     10 15 02 F6 | 	mov	arg02, local02
269b0     07 16 06 F6 | 	mov	arg03, #7
269b4     B4 CC BF FD | 	call	#_fatfs_cc_f_open
269b8     FD 24 0A F6 | 	mov	local04, result1 wz
269bc     14 00 90 AD |  if_e	jmp	#LR__4000
269c0     11 13 02 F6 | 	mov	arg01, local03
269c4                 | '     return _gc_free(ptr);
269c4     DC 60 BF FD | 	call	#__system___gc_free
269c8                 | '     free(f);
269c8                 | '     return _set_dos_error(r);
269c8     12 13 02 F6 | 	mov	arg01, local04
269cc     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0845
269d0     08 00 90 FD | 	jmp	#LR__4001
269d4                 | LR__4000
269d4     0F 23 62 FC | 	wrlong	local03, local01
269d8                 | '   }
269d8                 | '   fil->vfsdata = f;
269d8                 | '   return 0;
269d8     00 FA 05 F6 | 	mov	result1, #0
269dc                 | LR__4001
269dc     A7 F0 03 F6 | 	mov	ptra, fp
269e0     B2 00 A0 FD | 	call	#popregs_
269e4                 | _fatfs_cc_v_creat_ret
269e4     2D 00 64 FD | 	ret
269e8                 | 
269e8                 | _fatfs_cc_v_close
269e8     02 4A 05 F6 | 	mov	COUNT_, #2
269ec     A8 00 A0 FD | 	call	#pushregs_
269f0     09 1F 02 FB | 	rdlong	local01, arg01
269f4     02 00 00 FF 
269f8     14 1E 06 F1 | 	add	local01, ##1044
269fc     0F 13 02 F6 | 	mov	arg01, local01
26a00     02 00 00 FF 
26a04     14 1E 86 F1 | 	sub	local01, ##1044
26a08     DC E3 BF FD | 	call	#_fatfs_cc_f_close
26a0c     FD 20 02 F6 | 	mov	local02, result1
26a10     0F 13 02 F6 | 	mov	arg01, local01
26a14                 | '     return _gc_free(ptr);
26a14     8C 60 BF FD | 	call	#__system___gc_free
26a18                 | '     FAT_FIL *f = fil->vfsdata;
26a18                 | '     r=f_close(&f->fil);
26a18                 | '     free(f);
26a18                 | '     return _set_dos_error(r);
26a18     10 13 02 F6 | 	mov	arg01, local02
26a1c     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26a20     A7 F0 03 F6 | 	mov	ptra, fp
26a24     B2 00 A0 FD | 	call	#popregs_
26a28                 | _fatfs_cc_v_close_ret
26a28     2D 00 64 FD | 	ret
26a2c                 | 
26a2c                 | _fatfs_cc_v_opendir
26a2c     04 4A 05 F6 | 	mov	COUNT_, #4
26a30     A8 00 A0 FD | 	call	#pushregs_
26a34     09 1F 02 F6 | 	mov	local01, arg01
26a38     0A 21 02 F6 | 	mov	local02, arg02
26a3c     30 12 06 F6 | 	mov	arg01, #48
26a40                 | '     return _gc_alloc(size);
26a40     10 14 06 F6 | 	mov	arg02, #16
26a44     50 5F BF FD | 	call	#__system___gc_doalloc
26a48     FD 22 0A F6 | 	mov	local03, result1 wz
26a4c                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26a4c                 | '       return _seterror( 7 );
26a4c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26a50     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26a54     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26a58     01 FA 65 A6 |  if_e	neg	result1, #1
26a5c     34 00 90 AD |  if_e	jmp	#LR__4011
26a60     10 15 02 F6 | 	mov	arg02, local02
26a64     11 13 02 F6 | 	mov	arg01, local03
26a68     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
26a6c     FD 24 0A F6 | 	mov	local04, result1 wz
26a70     14 00 90 AD |  if_e	jmp	#LR__4010
26a74     11 13 02 F6 | 	mov	arg01, local03
26a78                 | '     return _gc_free(ptr);
26a78     28 60 BF FD | 	call	#__system___gc_free
26a7c                 | '         free(f);
26a7c                 | '         return _set_dos_error(r);
26a7c     12 13 02 F6 | 	mov	arg01, local04
26a80     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26a84     0C 00 90 FD | 	jmp	#LR__4011
26a88                 | LR__4010
26a88     04 1E 06 F1 | 	add	local01, #4
26a8c     0F 23 62 FC | 	wrlong	local03, local01
26a90                 | '     }
26a90                 | '     dir->vfsdata = f;
26a90                 | '     return 0;
26a90     00 FA 05 F6 | 	mov	result1, #0
26a94                 | LR__4011
26a94     A7 F0 03 F6 | 	mov	ptra, fp
26a98     B2 00 A0 FD | 	call	#popregs_
26a9c                 | _fatfs_cc_v_opendir_ret
26a9c     2D 00 64 FD | 	ret
26aa0                 | 
26aa0                 | _fatfs_cc_v_closedir
26aa0     02 4A 05 F6 | 	mov	COUNT_, #2
26aa4     A8 00 A0 FD | 	call	#pushregs_
26aa8     04 12 06 F1 | 	add	arg01, #4
26aac     09 1F 02 FB | 	rdlong	local01, arg01
26ab0     0F 13 02 F6 | 	mov	arg01, local01
26ab4     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
26ab8     FD 20 02 F6 | 	mov	local02, result1
26abc     0F 13 02 F6 | 	mov	arg01, local01
26ac0                 | '     return _gc_free(ptr);
26ac0     E0 5F BF FD | 	call	#__system___gc_free
26ac4     00 20 0E F2 | 	cmp	local02, #0 wz
26ac8     10 13 02 56 |  if_ne	mov	arg01, local02
26acc     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0845
26ad0                 | '     return r;
26ad0     10 FB 01 F6 | 	mov	result1, local02
26ad4     A7 F0 03 F6 | 	mov	ptra, fp
26ad8     B2 00 A0 FD | 	call	#popregs_
26adc                 | _fatfs_cc_v_closedir_ret
26adc     2D 00 64 FD | 	ret
26ae0                 | 
26ae0                 | _fatfs_cc_v_readdir
26ae0     01 4A 05 F6 | 	mov	COUNT_, #1
26ae4     A8 00 A0 FD | 	call	#pushregs_
26ae8     2C F1 07 F1 | 	add	ptra, #300
26aec     04 4E 05 F1 | 	add	fp, #4
26af0     A7 12 62 FC | 	wrlong	arg01, fp
26af4     04 4E 05 F1 | 	add	fp, #4
26af8     A7 14 62 FC | 	wrlong	arg02, fp
26afc     04 4E 85 F1 | 	sub	fp, #4
26b00     A7 16 02 FB | 	rdlong	arg03, fp
26b04     04 16 06 F1 | 	add	arg03, #4
26b08     0B 13 02 FB | 	rdlong	arg01, arg03
26b0c     08 4E 05 F1 | 	add	fp, #8
26b10     A7 14 02 F6 | 	mov	arg02, fp
26b14     0C 4E 85 F1 | 	sub	fp, #12
26b18     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
26b1c     28 4F 05 F1 | 	add	fp, #296
26b20     A7 FA 61 FC | 	wrlong	result1, fp
26b24     28 4F 85 F1 | 	sub	fp, #296
26b28     00 FA 0D F2 | 	cmp	result1, #0 wz
26b2c     14 00 90 AD |  if_e	jmp	#LR__4020
26b30                 | '         return _set_dos_error(r);
26b30     28 4F 05 F1 | 	add	fp, #296
26b34     A7 12 02 FB | 	rdlong	arg01, fp
26b38     28 4F 85 F1 | 	sub	fp, #296
26b3c     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26b40     C4 00 90 FD | 	jmp	#LR__4023
26b44                 | LR__4020
26b44     28 4E 05 F1 | 	add	fp, #40
26b48     A7 16 CA FA | 	rdbyte	arg03, fp wz
26b4c     28 4E 85 F1 | 	sub	fp, #40
26b50                 | '         return -1;
26b50     01 FA 65 A6 |  if_e	neg	result1, #1
26b54     B0 00 90 AD |  if_e	jmp	#LR__4023
26b58     08 4E 05 F1 | 	add	fp, #8
26b5c     A7 12 02 FB | 	rdlong	arg01, fp
26b60     20 4E 05 F1 | 	add	fp, #32
26b64     A7 14 02 F6 | 	mov	arg02, fp
26b68     28 4E 85 F1 | 	sub	fp, #40
26b6c     3F 16 06 F6 | 	mov	arg03, #63
26b70     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
26b74     08 4E 05 F1 | 	add	fp, #8
26b78     A7 16 02 FB | 	rdlong	arg03, fp
26b7c     3F 16 06 F1 | 	add	arg03, #63
26b80     0B 01 48 FC | 	wrbyte	#0, arg03
26b84     0C 4E 05 F1 | 	add	fp, #12
26b88     A7 16 C2 FA | 	rdbyte	arg03, fp
26b8c     14 4E 85 F1 | 	sub	fp, #20
26b90     10 16 CE F7 | 	test	arg03, #16 wz
26b94     18 00 90 AD |  if_e	jmp	#LR__4021
26b98     08 4E 05 F1 | 	add	fp, #8
26b9c     A7 16 02 FB | 	rdlong	arg03, fp
26ba0     08 4E 85 F1 | 	sub	fp, #8
26ba4     50 16 06 F1 | 	add	arg03, #80
26ba8     0B 03 48 FC | 	wrbyte	#1, arg03
26bac     14 00 90 FD | 	jmp	#LR__4022
26bb0                 | LR__4021
26bb0     08 4E 05 F1 | 	add	fp, #8
26bb4     A7 16 02 FB | 	rdlong	arg03, fp
26bb8     08 4E 85 F1 | 	sub	fp, #8
26bbc     50 16 06 F1 | 	add	arg03, #80
26bc0     0B 01 48 FC | 	wrbyte	#0, arg03
26bc4                 | LR__4022
26bc4     08 4E 05 F1 | 	add	fp, #8
26bc8     A7 16 02 FB | 	rdlong	arg03, fp
26bcc     04 4E 05 F1 | 	add	fp, #4
26bd0     A7 14 02 FB | 	rdlong	arg02, fp
26bd4     48 16 06 F1 | 	add	arg03, #72
26bd8     0B 15 62 FC | 	wrlong	arg02, arg03
26bdc     04 4E 85 F1 | 	sub	fp, #4
26be0     A7 1E 02 FB | 	rdlong	local01, fp
26be4     08 4E 05 F1 | 	add	fp, #8
26be8     A7 12 E2 FA | 	rdword	arg01, fp
26bec     02 4E 05 F1 | 	add	fp, #2
26bf0     A7 14 E2 FA | 	rdword	arg02, fp
26bf4     12 4E 85 F1 | 	sub	fp, #18
26bf8     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0843
26bfc     4C 1E 06 F1 | 	add	local01, #76
26c00     0F FB 61 FC | 	wrlong	result1, local01
26c04                 | '         ent->d_type =  (0) ;
26c04                 | '     }
26c04                 | '     ent->d_size = finfo.fsize;
26c04                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
26c04                 | '     return 0;
26c04     00 FA 05 F6 | 	mov	result1, #0
26c08                 | LR__4023
26c08     A7 F0 03 F6 | 	mov	ptra, fp
26c0c     B2 00 A0 FD | 	call	#popregs_
26c10                 | _fatfs_cc_v_readdir_ret
26c10     2D 00 64 FD | 	ret
26c14                 | 
26c14                 | _fatfs_cc_v_stat
26c14     03 4A 05 F6 | 	mov	COUNT_, #3
26c18     A8 00 A0 FD | 	call	#pushregs_
26c1c     30 F1 07 F1 | 	add	ptra, #304
26c20     04 4E 05 F1 | 	add	fp, #4
26c24     A7 12 62 FC | 	wrlong	arg01, fp
26c28     04 4E 05 F1 | 	add	fp, #4
26c2c     A7 14 62 FC | 	wrlong	arg02, fp
26c30     08 4E 85 F1 | 	sub	fp, #8
26c34     0A 13 02 F6 | 	mov	arg01, arg02
26c38     00 14 06 F6 | 	mov	arg02, #0
26c3c     30 16 06 F6 | 	mov	arg03, #48
26c40     98 00 A0 FD | 	call	#\builtin_bytefill_
26c44     04 4E 05 F1 | 	add	fp, #4
26c48     A7 FA 01 FB | 	rdlong	result1, fp
26c4c     04 4E 85 F1 | 	sub	fp, #4
26c50     FD FA C9 FA | 	rdbyte	result1, result1 wz
26c54     2C 00 90 AD |  if_e	jmp	#LR__4030
26c58     04 4E 05 F1 | 	add	fp, #4
26c5c     A7 FA 01 FB | 	rdlong	result1, fp
26c60     04 4E 85 F1 | 	sub	fp, #4
26c64     FD FA C1 FA | 	rdbyte	result1, result1
26c68     2E FA 0D F2 | 	cmp	result1, #46 wz
26c6c     04 4E 05 A1 |  if_e	add	fp, #4
26c70     A7 1E 02 AB |  if_e	rdlong	local01, fp
26c74     04 4E 85 A1 |  if_e	sub	fp, #4
26c78     01 1E 06 A1 |  if_e	add	local01, #1
26c7c     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
26c80     18 00 90 5D |  if_ne	jmp	#LR__4031
26c84                 | LR__4030
26c84     18 4E 05 F1 | 	add	fp, #24
26c88     A7 20 48 FC | 	wrbyte	#16, fp
26c8c     0C 4E 85 F1 | 	sub	fp, #12
26c90     A7 00 68 FC | 	wrlong	#0, fp
26c94     0C 4E 85 F1 | 	sub	fp, #12
26c98     24 00 90 FD | 	jmp	#LR__4032
26c9c                 | LR__4031
26c9c     04 4E 05 F1 | 	add	fp, #4
26ca0     A7 12 02 FB | 	rdlong	arg01, fp
26ca4     0C 4E 05 F1 | 	add	fp, #12
26ca8     A7 14 02 F6 | 	mov	arg02, fp
26cac     10 4E 85 F1 | 	sub	fp, #16
26cb0     AC EB BF FD | 	call	#_fatfs_cc_f_stat
26cb4     0C 4E 05 F1 | 	add	fp, #12
26cb8     A7 FA 61 FC | 	wrlong	result1, fp
26cbc     0C 4E 85 F1 | 	sub	fp, #12
26cc0                 | LR__4032
26cc0     0C 4E 05 F1 | 	add	fp, #12
26cc4     A7 20 0A FB | 	rdlong	local02, fp wz
26cc8     0C 4E 85 F1 | 	sub	fp, #12
26ccc     14 00 90 AD |  if_e	jmp	#LR__4033
26cd0                 | '         return _set_dos_error(r);
26cd0     0C 4E 05 F1 | 	add	fp, #12
26cd4     A7 12 02 FB | 	rdlong	arg01, fp
26cd8     0C 4E 85 F1 | 	sub	fp, #12
26cdc     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26ce0     14 01 90 FD | 	jmp	#LR__4034
26ce4                 | LR__4033
26ce4     2C 4F 05 F1 | 	add	fp, #300
26ce8     A7 48 6A FC | 	wrlong	#292, fp
26cec     14 4F 85 F1 | 	sub	fp, #276
26cf0     A7 22 C2 FA | 	rdbyte	local03, fp
26cf4     18 4E 85 F1 | 	sub	fp, #24
26cf8     01 22 CE F7 | 	test	local03, #1 wz
26cfc     2C 4F 05 A1 |  if_e	add	fp, #300
26d00     A7 22 02 AB |  if_e	rdlong	local03, fp
26d04     92 22 46 A5 |  if_e	or	local03, #146
26d08     A7 22 62 AC |  if_e	wrlong	local03, fp
26d0c     2C 4F 85 A1 |  if_e	sub	fp, #300
26d10     18 4E 05 F1 | 	add	fp, #24
26d14     A7 22 C2 FA | 	rdbyte	local03, fp
26d18     18 4E 85 F1 | 	sub	fp, #24
26d1c     10 22 CE F7 | 	test	local03, #16 wz
26d20     2C 4F 05 51 |  if_ne	add	fp, #300
26d24     A7 22 02 5B |  if_ne	rdlong	local03, fp
26d28     08 00 00 5F 
26d2c     49 22 46 55 |  if_ne	or	local03, ##4169
26d30     A7 22 62 5C |  if_ne	wrlong	local03, fp
26d34     2C 4F 85 51 |  if_ne	sub	fp, #300
26d38     08 4E 05 F1 | 	add	fp, #8
26d3c     A7 22 02 FB | 	rdlong	local03, fp
26d40     24 4F 05 F1 | 	add	fp, #292
26d44     A7 20 02 FB | 	rdlong	local02, fp
26d48     08 22 06 F1 | 	add	local03, #8
26d4c     11 21 62 FC | 	wrlong	local02, local03
26d50     24 4F 85 F1 | 	sub	fp, #292
26d54     A7 22 02 FB | 	rdlong	local03, fp
26d58     0C 22 06 F1 | 	add	local03, #12
26d5c     11 03 68 FC | 	wrlong	#1, local03
26d60     A7 22 02 FB | 	rdlong	local03, fp
26d64     08 4E 05 F1 | 	add	fp, #8
26d68     A7 20 02 FB | 	rdlong	local02, fp
26d6c     18 22 06 F1 | 	add	local03, #24
26d70     11 21 62 FC | 	wrlong	local02, local03
26d74     08 4E 85 F1 | 	sub	fp, #8
26d78     A7 22 02 FB | 	rdlong	local03, fp
26d7c     1C 22 06 F1 | 	add	local03, #28
26d80     01 00 80 FF 
26d84     11 01 68 FC | 	wrlong	##512, local03
26d88     A7 20 02 FB | 	rdlong	local02, fp
26d8c     10 23 02 F6 | 	mov	local03, local02
26d90     18 20 06 F1 | 	add	local02, #24
26d94     10 21 02 FB | 	rdlong	local02, local02
26d98     FF 21 06 F1 | 	add	local02, #511
26d9c     10 21 52 F6 | 	abs	local02, local02 wc
26da0     09 20 46 F0 | 	shr	local02, #9
26da4     10 21 82 F6 | 	negc	local02, local02
26da8     20 22 06 F1 | 	add	local03, #32
26dac     11 21 62 FC | 	wrlong	local02, local03
26db0     A7 20 02 FB | 	rdlong	local02, fp
26db4     10 23 02 F6 | 	mov	local03, local02
26db8     10 1F 02 F6 | 	mov	local01, local02
26dbc     0C 4E 05 F1 | 	add	fp, #12
26dc0     A7 12 E2 FA | 	rdword	arg01, fp
26dc4     02 4E 05 F1 | 	add	fp, #2
26dc8     A7 14 E2 FA | 	rdword	arg02, fp
26dcc     16 4E 85 F1 | 	sub	fp, #22
26dd0     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0843
26dd4     2C 1E 06 F1 | 	add	local01, #44
26dd8     0F FB 61 FC | 	wrlong	result1, local01
26ddc     28 20 06 F1 | 	add	local02, #40
26de0     10 FB 61 FC | 	wrlong	result1, local02
26de4     24 22 06 F1 | 	add	local03, #36
26de8     11 FB 61 FC | 	wrlong	result1, local03
26dec                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
26dec                 | '     }
26dec                 | '     buf->st_mode = mode;
26dec                 | '     buf->st_nlink = 1;
26dec                 | '     buf->st_size = finfo.fsize;
26dec                 | '     buf->st_blksize = 512;
26dec                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
26dec                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
26dec                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26dec                 | '     return r;
26dec     0C 4E 05 F1 | 	add	fp, #12
26df0     A7 FA 01 FB | 	rdlong	result1, fp
26df4     0C 4E 85 F1 | 	sub	fp, #12
26df8                 | LR__4034
26df8     A7 F0 03 F6 | 	mov	ptra, fp
26dfc     B2 00 A0 FD | 	call	#popregs_
26e00                 | _fatfs_cc_v_stat_ret
26e00     2D 00 64 FD | 	ret
26e04                 | 
26e04                 | _fatfs_cc_v_read
26e04     00 4A 05 F6 | 	mov	COUNT_, #0
26e08     A8 00 A0 FD | 	call	#pushregs_
26e0c     1C F0 07 F1 | 	add	ptra, #28
26e10     04 4E 05 F1 | 	add	fp, #4
26e14     A7 12 62 FC | 	wrlong	arg01, fp
26e18     04 4E 05 F1 | 	add	fp, #4
26e1c     A7 14 62 FC | 	wrlong	arg02, fp
26e20     04 4E 05 F1 | 	add	fp, #4
26e24     A7 16 62 FC | 	wrlong	arg03, fp
26e28     08 4E 85 F1 | 	sub	fp, #8
26e2c     A7 12 02 FB | 	rdlong	arg01, fp
26e30     09 13 0A FB | 	rdlong	arg01, arg01 wz
26e34     0C 4E 05 F1 | 	add	fp, #12
26e38     A7 12 62 FC | 	wrlong	arg01, fp
26e3c     10 4E 85 F1 | 	sub	fp, #16
26e40                 | '         return _seterror( 5 );
26e40     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26e44     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
26e48     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26e4c     01 FA 65 A6 |  if_e	neg	result1, #1
26e50     B8 00 90 AD |  if_e	jmp	#LR__4042
26e54     10 4E 05 F1 | 	add	fp, #16
26e58     A7 12 02 FB | 	rdlong	arg01, fp
26e5c     02 00 00 FF 
26e60     14 12 06 F1 | 	add	arg01, ##1044
26e64     08 4E 85 F1 | 	sub	fp, #8
26e68     A7 14 02 FB | 	rdlong	arg02, fp
26e6c     04 4E 05 F1 | 	add	fp, #4
26e70     A7 16 02 FB | 	rdlong	arg03, fp
26e74     0C 4E 05 F1 | 	add	fp, #12
26e78     A7 18 02 F6 | 	mov	arg04, fp
26e7c     18 4E 85 F1 | 	sub	fp, #24
26e80     C4 CE BF FD | 	call	#_fatfs_cc_f_read
26e84     14 4E 05 F1 | 	add	fp, #20
26e88     A7 FA 61 FC | 	wrlong	result1, fp
26e8c     14 4E 85 F1 | 	sub	fp, #20
26e90     00 FA 0D F2 | 	cmp	result1, #0 wz
26e94     34 00 90 AD |  if_e	jmp	#LR__4040
26e98     04 4E 05 F1 | 	add	fp, #4
26e9c     A7 18 02 FB | 	rdlong	arg04, fp
26ea0     0C 17 02 F6 | 	mov	arg03, arg04
26ea4     08 18 06 F1 | 	add	arg04, #8
26ea8     0C 19 02 FB | 	rdlong	arg04, arg04
26eac     20 18 46 F5 | 	or	arg04, #32
26eb0     08 16 06 F1 | 	add	arg03, #8
26eb4     0B 19 62 FC | 	wrlong	arg04, arg03
26eb8                 | '         fil->state |=  (0x20) ;
26eb8                 | '         return _set_dos_error(r);
26eb8     10 4E 05 F1 | 	add	fp, #16
26ebc     A7 12 02 FB | 	rdlong	arg01, fp
26ec0     14 4E 85 F1 | 	sub	fp, #20
26ec4     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26ec8     40 00 90 FD | 	jmp	#LR__4042
26ecc                 | LR__4040
26ecc     18 4E 05 F1 | 	add	fp, #24
26ed0     A7 FA 09 FB | 	rdlong	result1, fp wz
26ed4     18 4E 85 F1 | 	sub	fp, #24
26ed8     24 00 90 5D |  if_ne	jmp	#LR__4041
26edc     04 4E 05 F1 | 	add	fp, #4
26ee0     A7 FA 01 FB | 	rdlong	result1, fp
26ee4     FD 18 02 F6 | 	mov	arg04, result1
26ee8     04 4E 85 F1 | 	sub	fp, #4
26eec     08 FA 05 F1 | 	add	result1, #8
26ef0     FD FA 01 FB | 	rdlong	result1, result1
26ef4     10 FA 45 F5 | 	or	result1, #16
26ef8     08 18 06 F1 | 	add	arg04, #8
26efc     0C FB 61 FC | 	wrlong	result1, arg04
26f00                 | LR__4041
26f00                 | '         fil->state |=  (0x10) ;
26f00                 | '     }
26f00                 | '     return x;
26f00     18 4E 05 F1 | 	add	fp, #24
26f04     A7 FA 01 FB | 	rdlong	result1, fp
26f08     18 4E 85 F1 | 	sub	fp, #24
26f0c                 | LR__4042
26f0c     A7 F0 03 F6 | 	mov	ptra, fp
26f10     B2 00 A0 FD | 	call	#popregs_
26f14                 | _fatfs_cc_v_read_ret
26f14     2D 00 64 FD | 	ret
26f18                 | 
26f18                 | _fatfs_cc_v_write
26f18     00 4A 05 F6 | 	mov	COUNT_, #0
26f1c     A8 00 A0 FD | 	call	#pushregs_
26f20     1C F0 07 F1 | 	add	ptra, #28
26f24     04 4E 05 F1 | 	add	fp, #4
26f28     A7 12 62 FC | 	wrlong	arg01, fp
26f2c     04 4E 05 F1 | 	add	fp, #4
26f30     A7 14 62 FC | 	wrlong	arg02, fp
26f34     04 4E 05 F1 | 	add	fp, #4
26f38     A7 16 62 FC | 	wrlong	arg03, fp
26f3c     08 4E 85 F1 | 	sub	fp, #8
26f40     A7 12 02 FB | 	rdlong	arg01, fp
26f44     09 13 0A FB | 	rdlong	arg01, arg01 wz
26f48     0C 4E 05 F1 | 	add	fp, #12
26f4c     A7 12 62 FC | 	wrlong	arg01, fp
26f50     10 4E 85 F1 | 	sub	fp, #16
26f54                 | '         return _seterror( 5 );
26f54     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26f58     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
26f5c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26f60     01 FA 65 A6 |  if_e	neg	result1, #1
26f64     84 00 90 AD |  if_e	jmp	#LR__4051
26f68     10 4E 05 F1 | 	add	fp, #16
26f6c     A7 12 02 FB | 	rdlong	arg01, fp
26f70     02 00 00 FF 
26f74     14 12 06 F1 | 	add	arg01, ##1044
26f78     08 4E 85 F1 | 	sub	fp, #8
26f7c     A7 14 02 FB | 	rdlong	arg02, fp
26f80     04 4E 05 F1 | 	add	fp, #4
26f84     A7 16 02 FB | 	rdlong	arg03, fp
26f88     0C 4E 05 F1 | 	add	fp, #12
26f8c     A7 18 02 F6 | 	mov	arg04, fp
26f90     18 4E 85 F1 | 	sub	fp, #24
26f94     4C D4 BF FD | 	call	#_fatfs_cc_f_write
26f98     14 4E 05 F1 | 	add	fp, #20
26f9c     A7 FA 61 FC | 	wrlong	result1, fp
26fa0     14 4E 85 F1 | 	sub	fp, #20
26fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
26fa8     34 00 90 AD |  if_e	jmp	#LR__4050
26fac     04 4E 05 F1 | 	add	fp, #4
26fb0     A7 18 02 FB | 	rdlong	arg04, fp
26fb4     0C 17 02 F6 | 	mov	arg03, arg04
26fb8     08 18 06 F1 | 	add	arg04, #8
26fbc     0C 19 02 FB | 	rdlong	arg04, arg04
26fc0     20 18 46 F5 | 	or	arg04, #32
26fc4     08 16 06 F1 | 	add	arg03, #8
26fc8     0B 19 62 FC | 	wrlong	arg04, arg03
26fcc                 | '         fil->state |=  (0x20) ;
26fcc                 | '         return _set_dos_error(r);
26fcc     10 4E 05 F1 | 	add	fp, #16
26fd0     A7 12 02 FB | 	rdlong	arg01, fp
26fd4     14 4E 85 F1 | 	sub	fp, #20
26fd8     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
26fdc     0C 00 90 FD | 	jmp	#LR__4051
26fe0                 | LR__4050
26fe0                 | '     }
26fe0                 | '     return x;
26fe0     18 4E 05 F1 | 	add	fp, #24
26fe4     A7 FA 01 FB | 	rdlong	result1, fp
26fe8     18 4E 85 F1 | 	sub	fp, #24
26fec                 | LR__4051
26fec     A7 F0 03 F6 | 	mov	ptra, fp
26ff0     B2 00 A0 FD | 	call	#popregs_
26ff4                 | _fatfs_cc_v_write_ret
26ff4     2D 00 64 FD | 	ret
26ff8                 | 
26ff8                 | _fatfs_cc_v_lseek
26ff8     04 4A 05 F6 | 	mov	COUNT_, #4
26ffc     A8 00 A0 FD | 	call	#pushregs_
27000     0A 1F 02 F6 | 	mov	local01, arg02
27004     0B 21 02 F6 | 	mov	local02, arg03
27008     09 23 02 FB | 	rdlong	local03, arg01
2700c     02 00 00 FF 
27010     14 22 0E F1 | 	add	local03, ##1044 wz
27014                 | '         return _seterror( 5 );
27014     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
27018     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2701c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27020     01 FA 65 A6 |  if_e	neg	result1, #1
27024     4C 00 90 AD |  if_e	jmp	#LR__4062
27028     00 20 0E F2 | 	cmp	local02, #0 wz
2702c     24 00 90 AD |  if_e	jmp	#LR__4060
27030     01 20 0E F2 | 	cmp	local02, #1 wz
27034     14 22 06 A1 |  if_e	add	local03, #20
27038     11 25 02 AB |  if_e	rdlong	local04, local03
2703c     14 22 86 A1 |  if_e	sub	local03, #20
27040     12 1F 02 A1 |  if_e	add	local01, local04
27044     0C 22 06 51 |  if_ne	add	local03, #12
27048     11 25 02 5B |  if_ne	rdlong	local04, local03
2704c     0C 22 86 51 |  if_ne	sub	local03, #12
27050     12 1F 02 51 |  if_ne	add	local01, local04
27054                 | LR__4060
27054     0F 15 02 F6 | 	mov	arg02, local01
27058     11 13 02 F6 | 	mov	arg01, local03
2705c     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
27060     FD 12 0A F6 | 	mov	arg01, result1 wz
27064     08 00 90 AD |  if_e	jmp	#LR__4061
27068                 | '         return _set_dos_error(result);
27068     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
2706c     04 00 90 FD | 	jmp	#LR__4062
27070                 | LR__4061
27070                 | '     }
27070                 | '     return offset;
27070     0F FB 01 F6 | 	mov	result1, local01
27074                 | LR__4062
27074     A7 F0 03 F6 | 	mov	ptra, fp
27078     B2 00 A0 FD | 	call	#popregs_
2707c                 | _fatfs_cc_v_lseek_ret
2707c     2D 00 64 FD | 	ret
27080                 | 
27080                 | _fatfs_cc_v_ioctl
27080                 | ' {
27080                 | '     return _seterror( 10 );
27080     20 E8 05 F1 | 	add	ptr___system__dat__, #32
27084     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
27088     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
2708c     01 FA 65 F6 | 	neg	result1, #1
27090                 | _fatfs_cc_v_ioctl_ret
27090     2D 00 64 FD | 	ret
27094                 | 
27094                 | _fatfs_cc_v_mkdir
27094     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
27098     FD 12 02 F6 | 	mov	arg01, result1
2709c                 | ' 
2709c                 | '     r = f_mkdir(name);
2709c                 | '     return _set_dos_error(r);
2709c     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
270a0                 | _fatfs_cc_v_mkdir_ret
270a0     2D 00 64 FD | 	ret
270a4                 | 
270a4                 | _fatfs_cc_v_remove
270a4     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
270a8     FD 12 02 F6 | 	mov	arg01, result1
270ac                 | ' 
270ac                 | '     r = f_unlink(name);
270ac                 | '     return _set_dos_error(r);
270ac     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
270b0                 | _fatfs_cc_v_remove_ret
270b0     2D 00 64 FD | 	ret
270b4                 | 
270b4                 | _fatfs_cc_v_rmdir
270b4     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
270b8     FD 12 02 F6 | 	mov	arg01, result1
270bc                 | ' 
270bc                 | '     r = f_unlink(name);
270bc                 | '     return _set_dos_error(r);
270bc     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
270c0                 | _fatfs_cc_v_rmdir_ret
270c0     2D 00 64 FD | 	ret
270c4                 | 
270c4                 | _fatfs_cc_v_rename
270c4     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
270c8     FD 12 02 F6 | 	mov	arg01, result1
270cc                 | '     return _set_dos_error(r);
270cc     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
270d0                 | _fatfs_cc_v_rename_ret
270d0     2D 00 64 FD | 	ret
270d4                 | 
270d4                 | _fatfs_cc_v_open
270d4     07 4A 05 F6 | 	mov	COUNT_, #7
270d8     A8 00 A0 FD | 	call	#pushregs_
270dc     09 1F 02 F6 | 	mov	local01, arg01
270e0     0A 21 02 F6 | 	mov	local02, arg02
270e4     0B 23 02 F6 | 	mov	local03, arg03
270e8     03 00 00 FF 
270ec     3C 12 06 F6 | 	mov	arg01, ##1596
270f0                 | '     return _gc_alloc(size);
270f0     10 14 06 F6 | 	mov	arg02, #16
270f4     A0 58 BF FD | 	call	#__system___gc_doalloc
270f8     FD 24 0A F6 | 	mov	local04, result1 wz
270fc                 | '       return _seterror( 7 );
270fc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
27100     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
27104     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27108     01 FA 65 A6 |  if_e	neg	result1, #1
2710c     98 00 90 AD |  if_e	jmp	#LR__4076
27110     12 13 02 F6 | 	mov	arg01, local04
27114     00 14 06 F6 | 	mov	arg02, #0
27118     03 00 00 FF 
2711c     3C 16 06 F6 | 	mov	arg03, ##1596
27120     98 00 A0 FD | 	call	#\builtin_bytefill_
27124                 | '   switch (flags & 3) {
27124     11 27 02 F6 | 	mov	local05, local03
27128     03 26 0E F5 | 	and	local05, #3 wz
2712c     0C 00 90 AD |  if_e	jmp	#LR__4070
27130     01 26 0E F2 | 	cmp	local05, #1 wz
27134     0C 00 90 AD |  if_e	jmp	#LR__4071
27138     10 00 90 FD | 	jmp	#LR__4072
2713c                 | LR__4070
2713c     01 28 06 F6 | 	mov	local06, #1
27140                 | '       fs_flags =  0x01 ;
27140                 | '       break;
27140     0C 00 90 FD | 	jmp	#LR__4073
27144                 | LR__4071
27144     02 28 06 F6 | 	mov	local06, #2
27148                 | '       fs_flags =  0x02 ;
27148                 | '       break;
27148     04 00 90 FD | 	jmp	#LR__4073
2714c                 | LR__4072
2714c     03 28 06 F6 | 	mov	local06, #3
27150                 | '       fs_flags =  0x01  |  0x02 ;
27150                 | '       break;
27150                 | LR__4073
27150     08 22 CE F7 | 	test	local03, #8 wz
27154     18 28 46 55 |  if_ne	or	local06, #24
27158     08 00 90 5D |  if_ne	jmp	#LR__4074
2715c     20 22 CE F7 | 	test	local03, #32 wz
27160     30 28 46 55 |  if_ne	or	local06, #48
27164                 | LR__4074
27164     02 00 00 FF 
27168     14 24 06 F1 | 	add	local04, ##1044
2716c     12 13 02 F6 | 	mov	arg01, local04
27170     02 00 00 FF 
27174     14 24 86 F1 | 	sub	local04, ##1044
27178     10 15 02 F6 | 	mov	arg02, local02
2717c     14 17 02 F6 | 	mov	arg03, local06
27180     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
27184     FD 2A 0A F6 | 	mov	local07, result1 wz
27188     14 00 90 AD |  if_e	jmp	#LR__4075
2718c     12 13 02 F6 | 	mov	arg01, local04
27190                 | '     return _gc_free(ptr);
27190     10 59 BF FD | 	call	#__system___gc_free
27194                 | '     free(f);
27194                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27194                 | '     return _set_dos_error(r);
27194     15 13 02 F6 | 	mov	arg01, local07
27198     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
2719c     08 00 90 FD | 	jmp	#LR__4076
271a0                 | LR__4075
271a0     0F 25 62 FC | 	wrlong	local04, local01
271a4                 | '   }
271a4                 | '   fil->vfsdata = f;
271a4                 | '   return 0;
271a4     00 FA 05 F6 | 	mov	result1, #0
271a8                 | LR__4076
271a8     A7 F0 03 F6 | 	mov	ptra, fp
271ac     B2 00 A0 FD | 	call	#popregs_
271b0                 | _fatfs_cc_v_open_ret
271b0     2D 00 64 FD | 	ret
271b4                 | 
271b4                 | _fatfs_cc_v_flush
271b4     09 13 02 FB | 	rdlong	arg01, arg01
271b8     02 00 00 FF 
271bc     14 12 0E F1 | 	add	arg01, ##1044 wz
271c0                 | '         return _seterror( 5 );
271c0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
271c4     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
271c8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
271cc     01 FA 65 A6 |  if_e	neg	result1, #1
271d0     0C 00 90 AD |  if_e	jmp	#LR__4080
271d4     00 DA BF FD | 	call	#_fatfs_cc_f_sync
271d8     FD 12 02 F6 | 	mov	arg01, result1
271dc                 | '     }
271dc                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
271dc                 | '     result = f_sync(f);
271dc                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
271dc                 | '     return _set_dos_error(result);
271dc     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0845
271e0                 | LR__4080
271e0                 | _fatfs_cc_v_flush_ret
271e0     2D 00 64 FD | 	ret
271e4                 | 
271e4                 | _fatfs_cc_v_init
271e4                 | ' {
271e4                 | '     return 0;
271e4     00 FA 05 F6 | 	mov	result1, #0
271e8                 | _fatfs_cc_v_init_ret
271e8     2D 00 64 FD | 	ret
271ec                 | 
271ec                 | _fatfs_cc_v_deinit
271ec     40 01 00 FF 
271f0     4C 15 06 F6 | 	mov	arg02, ##@LR__4276
271f4     00 12 06 F6 | 	mov	arg01, #0
271f8     00 16 06 F6 | 	mov	arg03, #0
271fc     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
27200     01 00 00 FF 
27204     08 E4 05 F1 | 	add	objptr, ##520
27208     F2 12 02 FB | 	rdlong	arg01, objptr
2720c     04 E4 05 F1 | 	add	objptr, #4
27210     F2 14 02 FB | 	rdlong	arg02, objptr
27214     01 00 00 FF 
27218     0C E4 85 F1 | 	sub	objptr, ##524
2721c     50 40 BF FD | 	call	#__system___freepins
27220                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27220                 | '     _freepins(f_pinmask);
27220                 | '     return 0;
27220     00 FA 05 F6 | 	mov	result1, #0
27224                 | _fatfs_cc_v_deinit_ret
27224     2D 00 64 FD | 	ret
27228                 | 
27228                 | _fatfs_cc_get_vfs
27228     01 4A 05 F6 | 	mov	COUNT_, #1
2722c     A8 00 A0 FD | 	call	#pushregs_
27230     09 1F 02 F6 | 	mov	local01, arg01
27234     50 12 06 F6 | 	mov	arg01, #80
27238     2C 57 BF FD | 	call	#__system___gc_alloc_managed
2723c     FD 12 02 F6 | 	mov	arg01, result1
27240     F2 FA 01 F6 | 	mov	result1, objptr
27244     00 78 03 FF 
27248     00 FA 45 F5 | 	or	result1, ##116391936
2724c     09 FB 61 FC | 	wrlong	result1, arg01
27250     F2 FA 01 F6 | 	mov	result1, objptr
27254     58 FA 25 F4 | 	bith	result1, #88
27258     04 12 06 F1 | 	add	arg01, #4
2725c     09 FB 61 FC | 	wrlong	result1, arg01
27260     F2 FA 01 F6 | 	mov	result1, objptr
27264     00 88 03 FF 
27268     00 FA 45 F5 | 	or	result1, ##118489088
2726c     04 12 06 F1 | 	add	arg01, #4
27270     09 FB 61 FC | 	wrlong	result1, arg01
27274     F2 FA 01 F6 | 	mov	result1, objptr
27278     00 90 03 FF 
2727c     00 FA 45 F5 | 	or	result1, ##119537664
27280     04 12 06 F1 | 	add	arg01, #4
27284     09 FB 61 FC | 	wrlong	result1, arg01
27288     F2 FA 01 F6 | 	mov	result1, objptr
2728c     00 98 03 FF 
27290     00 FA 45 F5 | 	or	result1, ##120586240
27294     04 12 06 F1 | 	add	arg01, #4
27298     09 FB 61 FC | 	wrlong	result1, arg01
2729c     04 12 06 F1 | 	add	arg01, #4
272a0     09 01 68 FC | 	wrlong	#0, arg01
272a4     04 12 06 F1 | 	add	arg01, #4
272a8     09 1F 62 FC | 	wrlong	local01, arg01
272ac     04 12 06 F1 | 	add	arg01, #4
272b0     09 01 68 FC | 	wrlong	#0, arg01
272b4     F2 FA 01 F6 | 	mov	result1, objptr
272b8     00 A0 03 FF 
272bc     00 FA 45 F5 | 	or	result1, ##121634816
272c0     04 12 06 F1 | 	add	arg01, #4
272c4     09 FB 61 FC | 	wrlong	result1, arg01
272c8     F2 FA 01 F6 | 	mov	result1, objptr
272cc     00 A8 03 FF 
272d0     00 FA 45 F5 | 	or	result1, ##122683392
272d4     04 12 06 F1 | 	add	arg01, #4
272d8     09 FB 61 FC | 	wrlong	result1, arg01
272dc     F2 FA 01 F6 | 	mov	result1, objptr
272e0     00 B0 03 FF 
272e4     00 FA 45 F5 | 	or	result1, ##123731968
272e8     04 12 06 F1 | 	add	arg01, #4
272ec     09 FB 61 FC | 	wrlong	result1, arg01
272f0     F2 FA 01 F6 | 	mov	result1, objptr
272f4     00 B8 03 FF 
272f8     00 FA 45 F5 | 	or	result1, ##124780544
272fc     04 12 06 F1 | 	add	arg01, #4
27300     09 FB 61 FC | 	wrlong	result1, arg01
27304     F2 FA 01 F6 | 	mov	result1, objptr
27308     77 FA 25 F4 | 	bith	result1, #119
2730c     04 12 06 F1 | 	add	arg01, #4
27310     09 FB 61 FC | 	wrlong	result1, arg01
27314     F2 FA 01 F6 | 	mov	result1, objptr
27318     00 C8 03 FF 
2731c     00 FA 45 F5 | 	or	result1, ##126877696
27320     04 12 06 F1 | 	add	arg01, #4
27324     09 FB 61 FC | 	wrlong	result1, arg01
27328     F2 FA 01 F6 | 	mov	result1, objptr
2732c     00 D0 03 FF 
27330     00 FA 45 F5 | 	or	result1, ##127926272
27334     04 12 06 F1 | 	add	arg01, #4
27338     09 FB 61 FC | 	wrlong	result1, arg01
2733c     F2 FA 01 F6 | 	mov	result1, objptr
27340     00 D8 03 FF 
27344     00 FA 45 F5 | 	or	result1, ##128974848
27348     04 12 06 F1 | 	add	arg01, #4
2734c     09 FB 61 FC | 	wrlong	result1, arg01
27350     F2 FA 01 F6 | 	mov	result1, objptr
27354     96 FA 25 F4 | 	bith	result1, #150
27358     04 12 06 F1 | 	add	arg01, #4
2735c     09 FB 61 FC | 	wrlong	result1, arg01
27360     F2 FA 01 F6 | 	mov	result1, objptr
27364     00 E8 03 FF 
27368     00 FA 45 F5 | 	or	result1, ##131072000
2736c     04 12 06 F1 | 	add	arg01, #4
27370     09 FB 61 FC | 	wrlong	result1, arg01
27374     F2 FA 01 F6 | 	mov	result1, objptr
27378     B5 FA 25 F4 | 	bith	result1, #181
2737c     04 12 06 F1 | 	add	arg01, #4
27380     09 FB 61 FC | 	wrlong	result1, arg01
27384     F2 FA 01 F6 | 	mov	result1, objptr
27388     D4 FA 25 F4 | 	bith	result1, #212
2738c     04 12 06 F1 | 	add	arg01, #4
27390     09 FB 61 FC | 	wrlong	result1, arg01
27394     4C 12 86 F1 | 	sub	arg01, #76
27398                 | ' 
27398                 | '     v->close = &v_close;
27398                 | '     v->read = &v_read;
27398                 | '     v->write = &v_write;
27398                 | '     v->lseek = &v_lseek;
27398                 | '     v->ioctl = &v_ioctl;
27398                 | '     v->flush = 0;
27398                 | '     v->vfs_data = ptr;
27398                 | '     v->reserved = 0;
27398                 | ' 
27398                 | '     v->open = &v_open;
27398                 | '     v->creat = &v_creat;
27398                 | '     v->opendir = &v_opendir;
27398                 | '     v->closedir = &v_closedir;
27398                 | '     v->readdir = &v_readdir;
27398                 | '     v->stat = &v_stat;
27398                 | ' 
27398                 | '     v->mkdir = &v_mkdir;
27398                 | '     v->rmdir = &v_rmdir;
27398                 | ' 
27398                 | '     v->remove = &v_remove;
27398                 | '     v->rename = &v_rename;
27398                 | ' 
27398                 | '     v->init = &v_init;
27398                 | '     v->deinit = &v_deinit;
27398                 | ' 
27398                 | '     return v;
27398     09 FB 01 F6 | 	mov	result1, arg01
2739c     A7 F0 03 F6 | 	mov	ptra, fp
273a0     B2 00 A0 FD | 	call	#popregs_
273a4                 | _fatfs_cc_get_vfs_ret
273a4     2D 00 64 FD | 	ret
273a8                 | 
273a8                 | _fatfs_cc_xmit_mmc_0992
273a8     01 00 00 FF 
273ac     10 E4 05 F1 | 	add	objptr, ##528
273b0     F2 00 02 FB | 	rdlong	_var01, objptr
273b4     08 E4 05 F1 | 	add	objptr, #8
273b8     F2 02 02 FB | 	rdlong	_var02, objptr
273bc     01 00 00 FF 
273c0     18 E4 85 F1 | 	sub	objptr, ##536
273c4     40 02 62 FD | 	dirl	_var02
273c8     28 02 64 FD | 	setq	#1
273cc     09 05 02 FB | 	rdlong	_var03, arg01
273d0     69 04 62 FD | 	rev	_var03
273d4     1B 04 FE F9 | 	movbyts	_var03, #27
273d8     01 05 22 FC | 	wypin	_var03, _var02
273dc     0A 05 02 F6 | 	mov	_var03, arg02
273e0     02 14 4E F0 | 	shr	arg02, #2 wz
273e4     03 04 66 F0 | 	shl	_var03, #3
273e8     00 05 22 FC | 	wypin	_var03, _var01
273ec     41 02 62 FD | 	dirh	_var02
273f0     08 12 06 F1 | 	add	arg01, #8
273f4     69 06 62 FD | 	rev	_var04
273f8     1B 06 FE F9 | 	movbyts	_var04, #27
273fc                 | LR__4090
273fc     01 07 22 5C |  if_ne	wypin	_var04, _var02
27400     09 07 02 5B |  if_ne	rdlong	_var04, arg01
27404     04 12 06 51 |  if_ne	add	arg01, #4
27408     69 06 62 5D |  if_ne	rev	_var04
2740c     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
27410                 | LR__4091
27410     40 02 72 5D |  if_ne	testp	_var02 wc
27414     F8 FF 9F 1D |  if_a	jmp	#LR__4091
27418     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4090
2741c                 | LR__4092
2741c     40 00 72 FD | 	testp	_var01 wc
27420     F8 FF 9F 3D |  if_ae	jmp	#LR__4092
27424     40 02 62 FD | 	dirl	_var02
27428     FF FF FF FF 
2742c     01 FF 2B FC | 	wypin	##-1, _var02
27430     41 02 62 FD | 	dirh	_var02
27434                 | _fatfs_cc_xmit_mmc_0992_ret
27434     2D 00 64 FD | 	ret
27438                 | 
27438                 | _fatfs_cc_rcvr_mmc_0999
27438     01 00 00 FF 
2743c     10 E4 05 F1 | 	add	objptr, ##528
27440     F2 00 02 FB | 	rdlong	_var01, objptr
27444     0C E4 05 F1 | 	add	objptr, #12
27448     F2 02 02 FB | 	rdlong	_var02, objptr
2744c     01 00 00 FF 
27450     1C E4 85 F1 | 	sub	objptr, ##540
27454     01 03 08 FC | 	akpin	_var02
27458     0A 05 0A F6 | 	mov	_var03, arg02 wz
2745c     02 04 4E F0 | 	shr	_var03, #2 wz
27460     30 00 90 AD |  if_e	jmp	#LR__4102
27464     02 07 02 F6 | 	mov	_var04, _var03
27468     05 06 66 F0 | 	shl	_var04, #5
2746c     00 07 22 FC | 	wypin	_var04, _var01
27470     01 7F 18 FC | 	wxpin	#63, _var02
27474                 | LR__4100
27474                 | LR__4101
27474     40 02 72 FD | 	testp	_var02 wc
27478     F8 FF 9F 3D |  if_ae	jmp	#LR__4101
2747c     01 07 8A FA | 	rdpin	_var04, _var02
27480     69 06 62 FD | 	rev	_var04
27484     1B 06 FE F9 | 	movbyts	_var04, #27
27488     09 07 62 FC | 	wrlong	_var04, arg01
2748c     04 12 06 F1 | 	add	arg01, #4
27490     F8 05 6E FB | 	djnz	_var03, #LR__4100
27494                 | LR__4102
27494     03 14 0E F5 | 	and	arg02, #3 wz
27498     24 00 90 AD |  if_e	jmp	#LR__4105
2749c     01 4F 18 FC | 	wxpin	#39, _var02
274a0                 | LR__4103
274a0     00 11 28 FC | 	wypin	#8, _var01
274a4                 | LR__4104
274a4     40 02 72 FD | 	testp	_var02 wc
274a8     F8 FF 9F 3D |  if_ae	jmp	#LR__4104
274ac     01 07 8A FA | 	rdpin	_var04, _var02
274b0     69 06 62 FD | 	rev	_var04
274b4     09 07 42 FC | 	wrbyte	_var04, arg01
274b8     01 12 06 F1 | 	add	arg01, #1
274bc     F8 15 6E FB | 	djnz	arg02, #LR__4103
274c0                 | LR__4105
274c0                 | _fatfs_cc_rcvr_mmc_0999_ret
274c0     2D 00 64 FD | 	ret
274c4                 | 
274c4                 | _fatfs_cc_wait_ready_1003
274c4     01 4A 05 F6 | 	mov	COUNT_, #1
274c8     A8 00 A0 FD | 	call	#pushregs_
274cc     10 F0 07 F1 | 	add	ptra, #16
274d0     1A FA 61 FD | 	getct	result1
274d4     08 4E 05 F1 | 	add	fp, #8
274d8     A7 FA 61 FC | 	wrlong	result1, fp
274dc     14 1E 06 FB | 	rdlong	local01, #20
274e0     01 1E 46 F0 | 	shr	local01, #1
274e4     04 4E 05 F1 | 	add	fp, #4
274e8     A7 1E 62 FC | 	wrlong	local01, fp
274ec     0C 4E 85 F1 | 	sub	fp, #12
274f0                 | ' {
274f0                 | ' 	BYTE d;
274f0                 | ' 	UINT tmr, tmout;
274f0                 | ' 
274f0                 | ' 	tmr = _cnt();
274f0                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
274f0                 | ' 	for(;;) {
274f0                 | LR__4110
274f0     04 4E 05 F1 | 	add	fp, #4
274f4     A7 12 02 F6 | 	mov	arg01, fp
274f8     04 4E 85 F1 | 	sub	fp, #4
274fc     01 14 06 F6 | 	mov	arg02, #1
27500     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27504     04 4E 05 F1 | 	add	fp, #4
27508     A7 1E C2 FA | 	rdbyte	local01, fp
2750c     04 4E 85 F1 | 	sub	fp, #4
27510     FF 1E 0E F2 | 	cmp	local01, #255 wz
27514     01 FA 05 A6 |  if_e	mov	result1, #1
27518     28 00 90 AD |  if_e	jmp	#LR__4111
2751c     1A FA 61 FD | 	getct	result1
27520     08 4E 05 F1 | 	add	fp, #8
27524     A7 1E 02 FB | 	rdlong	local01, fp
27528     0F FB 81 F1 | 	sub	result1, local01
2752c     04 4E 05 F1 | 	add	fp, #4
27530     A7 1E 02 FB | 	rdlong	local01, fp
27534     0C 4E 85 F1 | 	sub	fp, #12
27538     0F FB 11 F2 | 	cmp	result1, local01 wc
2753c     00 FA 05 36 |  if_ae	mov	result1, #0
27540     AC FF 9F CD |  if_b	jmp	#LR__4110
27544                 | LR__4111
27544     A7 F0 03 F6 | 	mov	ptra, fp
27548     B2 00 A0 FD | 	call	#popregs_
2754c                 | _fatfs_cc_wait_ready_1003_ret
2754c     2D 00 64 FD | 	ret
27550                 | 
27550                 | _fatfs_cc_deselect_1009
27550     00 4A 05 F6 | 	mov	COUNT_, #0
27554     A8 00 A0 FD | 	call	#pushregs_
27558     14 F0 07 F1 | 	add	ptra, #20
2755c     01 00 00 FF 
27560     14 E4 05 F1 | 	add	objptr, ##532
27564     F2 14 02 FB | 	rdlong	arg02, objptr
27568     04 4E 05 F1 | 	add	fp, #4
2756c     A7 14 62 FC | 	wrlong	arg02, fp
27570     04 E4 85 F1 | 	sub	objptr, #4
27574     F2 14 02 FB | 	rdlong	arg02, objptr
27578     04 4E 05 F1 | 	add	fp, #4
2757c     A7 14 62 FC | 	wrlong	arg02, fp
27580     08 E4 05 F1 | 	add	objptr, #8
27584     F2 14 02 FB | 	rdlong	arg02, objptr
27588     04 4E 05 F1 | 	add	fp, #4
2758c     A7 14 62 FC | 	wrlong	arg02, fp
27590     04 E4 05 F1 | 	add	objptr, #4
27594     F2 14 02 FB | 	rdlong	arg02, objptr
27598     01 00 00 FF 
2759c     1C E4 85 F1 | 	sub	objptr, ##540
275a0     04 4E 05 F1 | 	add	fp, #4
275a4     A7 14 62 FC | 	wrlong	arg02, fp
275a8     0C 4E 85 F1 | 	sub	fp, #12
275ac     A7 12 02 FB | 	rdlong	arg01, fp
275b0     04 4E 85 F1 | 	sub	fp, #4
275b4     59 12 62 FD | 	drvh	arg01
275b8     1F 20 64 FD | 	waitx	#16
275bc     A7 12 02 F6 | 	mov	arg01, fp
275c0     01 14 06 F6 | 	mov	arg02, #1
275c4     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
275c8     A7 F0 03 F6 | 	mov	ptra, fp
275cc     B2 00 A0 FD | 	call	#popregs_
275d0                 | _fatfs_cc_deselect_1009_ret
275d0     2D 00 64 FD | 	ret
275d4                 | 
275d4                 | _fatfs_cc_select_1013
275d4     00 4A 05 F6 | 	mov	COUNT_, #0
275d8     A8 00 A0 FD | 	call	#pushregs_
275dc     10 F0 07 F1 | 	add	ptra, #16
275e0     01 00 00 FF 
275e4     14 E4 05 F1 | 	add	objptr, ##532
275e8     F2 14 02 FB | 	rdlong	arg02, objptr
275ec     08 4E 05 F1 | 	add	fp, #8
275f0     A7 14 62 FC | 	wrlong	arg02, fp
275f4     08 E4 05 F1 | 	add	objptr, #8
275f8     F2 12 02 FB | 	rdlong	arg01, objptr
275fc     01 00 00 FF 
27600     1C E4 85 F1 | 	sub	objptr, ##540
27604     04 4E 05 F1 | 	add	fp, #4
27608     A7 12 62 FC | 	wrlong	arg01, fp
2760c     50 12 62 FD | 	fltl	arg01
27610     04 4E 85 F1 | 	sub	fp, #4
27614     A7 12 02 FB | 	rdlong	arg01, fp
27618     58 12 62 FD | 	drvl	arg01
2761c     1F 20 64 FD | 	waitx	#16
27620     04 4E 05 F1 | 	add	fp, #4
27624     A7 12 02 FB | 	rdlong	arg01, fp
27628     41 12 62 FD | 	dirh	arg01
2762c     08 4E 85 F1 | 	sub	fp, #8
27630     A7 12 02 F6 | 	mov	arg01, fp
27634     04 4E 85 F1 | 	sub	fp, #4
27638     01 14 06 F6 | 	mov	arg02, #1
2763c     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27640     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1003
27644     00 FA 0D F2 | 	cmp	result1, #0 wz
27648     01 FA 05 56 |  if_ne	mov	result1, #1
2764c     08 00 90 5D |  if_ne	jmp	#LR__4120
27650     FC FE BF FD | 	call	#_fatfs_cc_deselect_1009
27654                 | ' 
27654                 | ' 	deselect();
27654                 | ' 	return 0;
27654     00 FA 05 F6 | 	mov	result1, #0
27658                 | LR__4120
27658     A7 F0 03 F6 | 	mov	ptra, fp
2765c     B2 00 A0 FD | 	call	#popregs_
27660                 | _fatfs_cc_select_1013_ret
27660     2D 00 64 FD | 	ret
27664                 | 
27664                 | _fatfs_cc_rcvr_datablock_1017
27664     01 4A 05 F6 | 	mov	COUNT_, #1
27668     A8 00 A0 FD | 	call	#pushregs_
2766c     18 F0 07 F1 | 	add	ptra, #24
27670     04 4E 05 F1 | 	add	fp, #4
27674     A7 12 62 FC | 	wrlong	arg01, fp
27678     04 4E 05 F1 | 	add	fp, #4
2767c     A7 14 62 FC | 	wrlong	arg02, fp
27680     1A FA 61 FD | 	getct	result1
27684     08 4E 05 F1 | 	add	fp, #8
27688     A7 FA 61 FC | 	wrlong	result1, fp
2768c     14 1E 06 FB | 	rdlong	local01, #20
27690     03 1E 46 F0 | 	shr	local01, #3
27694     04 4E 05 F1 | 	add	fp, #4
27698     A7 1E 62 FC | 	wrlong	local01, fp
2769c     14 4E 85 F1 | 	sub	fp, #20
276a0                 | ' 	BYTE *buff,
276a0                 | ' 	UINT btr
276a0                 | ' )
276a0                 | ' {
276a0                 | ' 	BYTE d[2];
276a0                 | ' 	UINT tmr, tmout;
276a0                 | ' 
276a0                 | ' 	tmr = _cnt();
276a0                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
276a0                 | ' 	for(;;) {
276a0                 | LR__4130
276a0     0C 4E 05 F1 | 	add	fp, #12
276a4     A7 12 02 F6 | 	mov	arg01, fp
276a8     0C 4E 85 F1 | 	sub	fp, #12
276ac     01 14 06 F6 | 	mov	arg02, #1
276b0     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
276b4     0C 4E 05 F1 | 	add	fp, #12
276b8     A7 1E C2 FA | 	rdbyte	local01, fp
276bc     0C 4E 85 F1 | 	sub	fp, #12
276c0     FF 1E 0E F2 | 	cmp	local01, #255 wz
276c4     28 00 90 5D |  if_ne	jmp	#LR__4131
276c8     1A FA 61 FD | 	getct	result1
276cc     FD 1E 02 F6 | 	mov	local01, result1
276d0     10 4E 05 F1 | 	add	fp, #16
276d4     A7 14 02 FB | 	rdlong	arg02, fp
276d8     0A 1F 82 F1 | 	sub	local01, arg02
276dc     04 4E 05 F1 | 	add	fp, #4
276e0     A7 14 02 FB | 	rdlong	arg02, fp
276e4     14 4E 85 F1 | 	sub	fp, #20
276e8     0A 1F 12 F2 | 	cmp	local01, arg02 wc
276ec     B0 FF 9F CD |  if_b	jmp	#LR__4130
276f0                 | LR__4131
276f0     0C 4E 05 F1 | 	add	fp, #12
276f4     A7 1E C2 FA | 	rdbyte	local01, fp
276f8     0C 4E 85 F1 | 	sub	fp, #12
276fc     FE 1E 0E F2 | 	cmp	local01, #254 wz
27700     00 FA 05 56 |  if_ne	mov	result1, #0
27704     30 00 90 5D |  if_ne	jmp	#LR__4132
27708     04 4E 05 F1 | 	add	fp, #4
2770c     A7 12 02 FB | 	rdlong	arg01, fp
27710     04 4E 05 F1 | 	add	fp, #4
27714     A7 14 02 FB | 	rdlong	arg02, fp
27718     08 4E 85 F1 | 	sub	fp, #8
2771c     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27720     0C 4E 05 F1 | 	add	fp, #12
27724     A7 12 02 F6 | 	mov	arg01, fp
27728     0C 4E 85 F1 | 	sub	fp, #12
2772c     02 14 06 F6 | 	mov	arg02, #2
27730     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
27734                 | ' 
27734                 | ' 	rcvr_mmc(buff, btr);
27734                 | ' 	rcvr_mmc(d, 2);
27734                 | ' 
27734                 | ' 	return 1;
27734     01 FA 05 F6 | 	mov	result1, #1
27738                 | LR__4132
27738     A7 F0 03 F6 | 	mov	ptra, fp
2773c     B2 00 A0 FD | 	call	#popregs_
27740                 | _fatfs_cc_rcvr_datablock_1017_ret
27740     2D 00 64 FD | 	ret
27744                 | 
27744                 | _fatfs_cc_xmit_datablock_1019
27744     00 4A 05 F6 | 	mov	COUNT_, #0
27748     A8 00 A0 FD | 	call	#pushregs_
2774c     10 F0 07 F1 | 	add	ptra, #16
27750     04 4E 05 F1 | 	add	fp, #4
27754     A7 12 62 FC | 	wrlong	arg01, fp
27758     04 4E 05 F1 | 	add	fp, #4
2775c     A7 14 42 FC | 	wrbyte	arg02, fp
27760     08 4E 85 F1 | 	sub	fp, #8
27764     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1003
27768     00 FA 0D F2 | 	cmp	result1, #0 wz
2776c     00 FA 05 A6 |  if_e	mov	result1, #0
27770     90 00 90 AD |  if_e	jmp	#LR__4141
27774     08 4E 05 F1 | 	add	fp, #8
27778     A7 14 C2 FA | 	rdbyte	arg02, fp
2777c     04 4E 05 F1 | 	add	fp, #4
27780     A7 14 42 FC | 	wrbyte	arg02, fp
27784     A7 12 02 F6 | 	mov	arg01, fp
27788     0C 4E 85 F1 | 	sub	fp, #12
2778c     01 14 06 F6 | 	mov	arg02, #1
27790     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0992
27794     08 4E 05 F1 | 	add	fp, #8
27798     A7 14 C2 FA | 	rdbyte	arg02, fp
2779c     08 4E 85 F1 | 	sub	fp, #8
277a0     FD 14 0E F2 | 	cmp	arg02, #253 wz
277a4     58 00 90 AD |  if_e	jmp	#LR__4140
277a8     04 4E 05 F1 | 	add	fp, #4
277ac     A7 12 02 FB | 	rdlong	arg01, fp
277b0     04 4E 85 F1 | 	sub	fp, #4
277b4     09 14 C6 F9 | 	decod	arg02, #9
277b8     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0992
277bc     0C 4E 05 F1 | 	add	fp, #12
277c0     A7 12 02 F6 | 	mov	arg01, fp
277c4     0C 4E 85 F1 | 	sub	fp, #12
277c8     02 14 06 F6 | 	mov	arg02, #2
277cc     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
277d0     0C 4E 05 F1 | 	add	fp, #12
277d4     A7 12 02 F6 | 	mov	arg01, fp
277d8     0C 4E 85 F1 | 	sub	fp, #12
277dc     01 14 06 F6 | 	mov	arg02, #1
277e0     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
277e4     0C 4E 05 F1 | 	add	fp, #12
277e8     A7 14 C2 FA | 	rdbyte	arg02, fp
277ec     0C 4E 85 F1 | 	sub	fp, #12
277f0     1F 14 06 F5 | 	and	arg02, #31
277f4     05 14 0E F2 | 	cmp	arg02, #5 wz
277f8                 | ' 			return 0;
277f8     00 FA 05 56 |  if_ne	mov	result1, #0
277fc     04 00 90 5D |  if_ne	jmp	#LR__4141
27800                 | LR__4140
27800                 | ' 	}
27800                 | ' 
27800                 | ' 	return 1;
27800     01 FA 05 F6 | 	mov	result1, #1
27804                 | LR__4141
27804     A7 F0 03 F6 | 	mov	ptra, fp
27808     B2 00 A0 FD | 	call	#popregs_
2780c                 | _fatfs_cc_xmit_datablock_1019_ret
2780c     2D 00 64 FD | 	ret
27810                 | 
27810                 | _fatfs_cc_send_cmd_1023
27810     01 4A 05 F6 | 	mov	COUNT_, #1
27814     A8 00 A0 FD | 	call	#pushregs_
27818     1C F0 07 F1 | 	add	ptra, #28
2781c                 | _fatfs_cc_send_cmd_1023_enter
2781c     04 4E 05 F1 | 	add	fp, #4
27820     A7 12 42 FC | 	wrbyte	arg01, fp
27824     04 4E 05 F1 | 	add	fp, #4
27828     A7 14 62 FC | 	wrlong	arg02, fp
2782c     04 4E 85 F1 | 	sub	fp, #4
27830     A7 FA C1 FA | 	rdbyte	result1, fp
27834     04 4E 85 F1 | 	sub	fp, #4
27838     80 FA CD F7 | 	test	result1, #128 wz
2783c     44 00 90 AD |  if_e	jmp	#LR__4150
27840     04 4E 05 F1 | 	add	fp, #4
27844     A7 14 C2 FA | 	rdbyte	arg02, fp
27848     7F 14 06 F5 | 	and	arg02, #127
2784c     A7 14 42 FC | 	wrbyte	arg02, fp
27850     04 4E 85 F1 | 	sub	fp, #4
27854     37 12 06 F6 | 	mov	arg01, #55
27858     00 14 06 F6 | 	mov	arg02, #0
2785c     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1023
27860     0C 4E 05 F1 | 	add	fp, #12
27864     A7 FA 41 FC | 	wrbyte	result1, fp
27868     A7 14 C2 FA | 	rdbyte	arg02, fp
2786c     0C 4E 85 F1 | 	sub	fp, #12
27870     02 14 16 F2 | 	cmp	arg02, #2 wc
27874     0C 4E 05 31 |  if_ae	add	fp, #12
27878     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2787c     0C 4E 85 31 |  if_ae	sub	fp, #12
27880     6C 01 90 3D |  if_ae	jmp	#LR__4154
27884                 | LR__4150
27884     04 4E 05 F1 | 	add	fp, #4
27888     A7 14 C2 FA | 	rdbyte	arg02, fp
2788c     04 4E 85 F1 | 	sub	fp, #4
27890     0C 14 0E F2 | 	cmp	arg02, #12 wz
27894     14 00 90 AD |  if_e	jmp	#LR__4151
27898     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1009
2789c     34 FD BF FD | 	call	#_fatfs_cc_select_1013
278a0     00 FA 0D F2 | 	cmp	result1, #0 wz
278a4     FF FA 05 A6 |  if_e	mov	result1, #255
278a8     44 01 90 AD |  if_e	jmp	#LR__4154
278ac                 | LR__4151
278ac     04 4E 05 F1 | 	add	fp, #4
278b0     A7 14 C2 FA | 	rdbyte	arg02, fp
278b4     40 FA 05 F6 | 	mov	result1, #64
278b8     0A FB 41 F5 | 	or	result1, arg02
278bc     10 4E 05 F1 | 	add	fp, #16
278c0     A7 FA 41 FC | 	wrbyte	result1, fp
278c4     0C 4E 85 F1 | 	sub	fp, #12
278c8     A7 FA 01 FB | 	rdlong	result1, fp
278cc     18 FA 45 F0 | 	shr	result1, #24
278d0     0D 4E 05 F1 | 	add	fp, #13
278d4     A7 FA 41 FC | 	wrbyte	result1, fp
278d8     0D 4E 85 F1 | 	sub	fp, #13
278dc     A7 FA 01 FB | 	rdlong	result1, fp
278e0     10 FA 45 F0 | 	shr	result1, #16
278e4     0E 4E 05 F1 | 	add	fp, #14
278e8     A7 FA 41 FC | 	wrbyte	result1, fp
278ec     0E 4E 85 F1 | 	sub	fp, #14
278f0     A7 FA 01 FB | 	rdlong	result1, fp
278f4     08 FA 45 F0 | 	shr	result1, #8
278f8     0F 4E 05 F1 | 	add	fp, #15
278fc     A7 FA 41 FC | 	wrbyte	result1, fp
27900     0F 4E 85 F1 | 	sub	fp, #15
27904     A7 FA 01 FB | 	rdlong	result1, fp
27908     10 4E 05 F1 | 	add	fp, #16
2790c     A7 FA 41 FC | 	wrbyte	result1, fp
27910     0C 4E 85 F1 | 	sub	fp, #12
27914     A7 02 48 FC | 	wrbyte	#1, fp
27918     08 4E 85 F1 | 	sub	fp, #8
2791c     A7 FA C9 FA | 	rdbyte	result1, fp wz
27920     04 4E 85 F1 | 	sub	fp, #4
27924     0C 4E 05 A1 |  if_e	add	fp, #12
27928     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2792c     0C 4E 85 A1 |  if_e	sub	fp, #12
27930     04 4E 05 F1 | 	add	fp, #4
27934     A7 FA C1 FA | 	rdbyte	result1, fp
27938     04 4E 85 F1 | 	sub	fp, #4
2793c     08 FA 0D F2 | 	cmp	result1, #8 wz
27940     0C 4E 05 A1 |  if_e	add	fp, #12
27944     A7 0E 49 AC |  if_e	wrbyte	#135, fp
27948     0C 4E 85 A1 |  if_e	sub	fp, #12
2794c     0C 4E 05 F1 | 	add	fp, #12
27950     A7 14 C2 FA | 	rdbyte	arg02, fp
27954     0D 4E 05 F1 | 	add	fp, #13
27958     A7 14 42 FC | 	wrbyte	arg02, fp
2795c     05 4E 85 F1 | 	sub	fp, #5
27960     A7 12 02 F6 | 	mov	arg01, fp
27964     14 4E 85 F1 | 	sub	fp, #20
27968     06 14 06 F6 | 	mov	arg02, #6
2796c     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0992
27970     04 4E 05 F1 | 	add	fp, #4
27974     A7 1E C2 FA | 	rdbyte	local01, fp
27978     04 4E 85 F1 | 	sub	fp, #4
2797c     0C 1E 0E F2 | 	cmp	local01, #12 wz
27980     10 4E 05 A1 |  if_e	add	fp, #16
27984     A7 12 02 A6 |  if_e	mov	arg01, fp
27988     10 4E 85 A1 |  if_e	sub	fp, #16
2798c     01 14 06 A6 |  if_e	mov	arg02, #1
27990     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0999
27994     0C 4E 05 F1 | 	add	fp, #12
27998     A7 14 48 FC | 	wrbyte	#10, fp
2799c     0C 4E 85 F1 | 	sub	fp, #12
279a0                 | ' 	n = 10;
279a0                 | ' 	do
279a0                 | LR__4152
279a0     10 4E 05 F1 | 	add	fp, #16
279a4     A7 12 02 F6 | 	mov	arg01, fp
279a8     10 4E 85 F1 | 	sub	fp, #16
279ac     01 14 06 F6 | 	mov	arg02, #1
279b0     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0999
279b4     10 4E 05 F1 | 	add	fp, #16
279b8     A7 1E C2 FA | 	rdbyte	local01, fp
279bc     10 4E 85 F1 | 	sub	fp, #16
279c0     80 1E CE F7 | 	test	local01, #128 wz
279c4     1C 00 90 AD |  if_e	jmp	#LR__4153
279c8     0C 4E 05 F1 | 	add	fp, #12
279cc     A7 1E C2 FA | 	rdbyte	local01, fp
279d0     01 1E 86 F1 | 	sub	local01, #1
279d4     A7 1E 42 FC | 	wrbyte	local01, fp
279d8     A7 1E CA FA | 	rdbyte	local01, fp wz
279dc     0C 4E 85 F1 | 	sub	fp, #12
279e0     BC FF 9F 5D |  if_ne	jmp	#LR__4152
279e4                 | LR__4153
279e4                 | ' 
279e4                 | ' 	return d;
279e4     10 4E 05 F1 | 	add	fp, #16
279e8     A7 FA C1 FA | 	rdbyte	result1, fp
279ec     10 4E 85 F1 | 	sub	fp, #16
279f0                 | LR__4154
279f0     A7 F0 03 F6 | 	mov	ptra, fp
279f4     B2 00 A0 FD | 	call	#popregs_
279f8                 | _fatfs_cc_send_cmd_1023_ret
279f8     2D 00 64 FD | 	ret
279fc                 | 
279fc                 | _fatfs_cc_disk_deinitialize
279fc     03 4A 05 F6 | 	mov	COUNT_, #3
27a00     A8 00 A0 FD | 	call	#pushregs_
27a04     00 12 4E F2 | 	cmps	arg01, #0 wz
27a08     01 00 00 FF 
27a0c     14 E4 05 F1 | 	add	objptr, ##532
27a10     F2 12 02 FB | 	rdlong	arg01, objptr
27a14     04 E4 85 F1 | 	sub	objptr, #4
27a18     F2 1E 02 FB | 	rdlong	local01, objptr
27a1c     08 E4 05 F1 | 	add	objptr, #8
27a20     F2 20 02 FB | 	rdlong	local02, objptr
27a24     04 E4 05 F1 | 	add	objptr, #4
27a28     F2 22 02 FB | 	rdlong	local03, objptr
27a2c     01 00 00 FF 
27a30     1C E4 85 F1 | 	sub	objptr, ##540
27a34                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27a34                 | '         return RES_NOTRDY;
27a34     03 FA 05 56 |  if_ne	mov	result1, #3
27a38     2C 00 90 5D |  if_ne	jmp	#LR__4160
27a3c     50 12 62 FD | 	fltl	arg01
27a40     09 01 08 FC | 	wrpin	#0, arg01
27a44     50 1E 62 FD | 	fltl	local01
27a48     0F 01 08 FC | 	wrpin	#0, local01
27a4c     50 20 62 FD | 	fltl	local02
27a50     10 01 08 FC | 	wrpin	#0, local02
27a54     50 22 62 FD | 	fltl	local03
27a58     11 01 08 FC | 	wrpin	#0, local03
27a5c     0A 12 06 F6 | 	mov	arg01, #10
27a60     40 14 BF FD | 	call	#__system___waitms
27a64                 | '     }
27a64                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27a64                 | '     _pinclear(PIN_SS);
27a64                 | '     _pinclear(PIN_CLK);
27a64                 | '     _pinclear(PIN_DI);
27a64                 | '     _pinclear(PIN_DO);
27a64                 | ' 
27a64                 | '     _waitms(10);
27a64                 | ' 
27a64                 | '     return 0;
27a64     00 FA 05 F6 | 	mov	result1, #0
27a68                 | LR__4160
27a68     A7 F0 03 F6 | 	mov	ptra, fp
27a6c     B2 00 A0 FD | 	call	#popregs_
27a70                 | _fatfs_cc_disk_deinitialize_ret
27a70     2D 00 64 FD | 	ret
27a74                 | 
27a74                 | _fatfs_cc_gettimeofday
27a74     04 4A 05 F6 | 	mov	COUNT_, #4
27a78     A8 00 A0 FD | 	call	#pushregs_
27a7c     09 1F 02 F6 | 	mov	local01, arg01
27a80     FC 0F BF FD | 	call	#__system___getus
27a84     FD 12 02 F6 | 	mov	arg01, result1
27a88     02 00 00 FF 
27a8c     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
27a90     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
27a94     09 FB 01 F6 | 	mov	result1, arg01
27a98     10 FB 81 F1 | 	sub	result1, local02
27a9c     A1 07 00 FF 
27aa0     40 FA 15 FD | 	qdiv	result1, ##1000000
27aa4     02 00 00 FF 
27aa8     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
27aac     18 20 62 FD | 	getqx	local02
27ab0     A1 07 00 FF 
27ab4     40 FA 15 FD | 	qdiv	result1, ##1000000
27ab8     00 20 0E F2 | 	cmp	local02, #0 wz
27abc     19 22 62 FD | 	getqy	local03
27ac0     28 00 90 AD |  if_e	jmp	#LR__4170
27ac4     02 00 00 FF 
27ac8     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
27acc     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
27ad0     10 25 02 F1 | 	add	local04, local02
27ad4     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
27ad8     11 13 82 F1 | 	sub	arg01, local03
27adc     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
27ae0     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
27ae4     02 00 00 FF 
27ae8     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
27aec                 | LR__4170
27aec     02 00 00 FF 
27af0     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
27af4     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
27af8     02 00 00 FF 
27afc     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
27b00     0F 25 62 FC | 	wrlong	local04, local01
27b04     04 1E 06 F1 | 	add	local01, #4
27b08     0F 23 62 FC | 	wrlong	local03, local01
27b0c                 | '         lastsec += secs;
27b0c                 | '         lastus = now - leftover;
27b0c                 | '     }
27b0c                 | '     tv->tv_sec = lastsec;
27b0c                 | '     tv->tv_usec = leftover;
27b0c                 | '     return 0;
27b0c     00 FA 05 F6 | 	mov	result1, #0
27b10     A7 F0 03 F6 | 	mov	ptra, fp
27b14     B2 00 A0 FD | 	call	#popregs_
27b18                 | _fatfs_cc_gettimeofday_ret
27b18     2D 00 64 FD | 	ret
27b1c                 | 
27b1c                 | _fatfs_cc__is_leap_year
27b1c     09 FB 51 F6 | 	abs	result1, arg01 wc
27b20     03 FA 05 F5 | 	and	result1, #3
27b24     FD FA 89 F6 | 	negc	result1, result1 wz
27b28     38 00 90 5D |  if_ne	jmp	#LR__4181
27b2c     09 FB 51 F6 | 	abs	result1, arg01 wc
27b30     64 FA 15 FD | 	qdiv	result1, #100
27b34     19 FA 61 FD | 	getqy	result1
27b38     FD FA 89 F6 | 	negc	result1, result1 wz
27b3c     1C 00 90 5D |  if_ne	jmp	#LR__4180
27b40     09 FB 51 F6 | 	abs	result1, arg01 wc
27b44     90 FB 15 FD | 	qdiv	result1, #400
27b48                 | '       return (0 == y % 400);
27b48     00 FA 05 F6 | 	mov	result1, #0
27b4c     19 00 62 FD | 	getqy	_var01
27b50     00 01 8A F6 | 	negc	_var01, _var01 wz
27b54     01 FA 05 A6 |  if_e	mov	result1, #1
27b58     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
27b5c                 | LR__4180
27b5c                 | '     return 1;
27b5c     01 FA 05 F6 | 	mov	result1, #1
27b60     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
27b64                 | LR__4181
27b64                 | '   }
27b64                 | '   return 0;
27b64     00 FA 05 F6 | 	mov	result1, #0
27b68                 | _fatfs_cc__is_leap_year_ret
27b68     2D 00 64 FD | 	ret
27b6c                 | 
27b6c                 | _fatfs_cc___tzoffset
27b6c     09 01 0A F6 | 	mov	_var01, arg01 wz
27b70     FF FF FF FF 
27b74     0A FF 6B FC | 	wrlong	##-1, arg02
27b78     01 02 06 F6 | 	mov	_var02, #1
27b7c     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
27b80                 | '                 return 0;
27b80     00 FA 05 A6 |  if_e	mov	result1, #0
27b84     94 02 90 AD |  if_e	jmp	#LR__4207
27b88     0A 01 68 FC | 	wrlong	#0, arg02
27b8c     02 00 00 FF 
27b90     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27b94     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
27b98                 | ' 
27b98                 | '        *hasdst = 0;
27b98                 | ' 
27b98                 | ' 	n = stdname;
27b98                 | '         while (*s && isalpha(*s)) {
27b98     02 00 00 FF 
27b9c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
27ba0     97 28 48 FB | 	callpa	#(@LR__4191-@LR__4190)>>2,fcache_load_ptr_
27ba4                 | LR__4190
27ba4     00 05 CA FA | 	rdbyte	_var03, _var01 wz
27ba8     48 00 90 AD |  if_e	jmp	#LR__4192
27bac     00 13 C2 FA | 	rdbyte	arg01, _var01
27bb0                 | ' {
27bb0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27bb0     80 12 36 F3 | 	fle	arg01, #128 wc
27bb4                 | '     return __ctype[c];
27bb4     02 00 00 FF 
27bb8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27bbc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27bc0     09 FB C1 FA | 	rdbyte	result1, arg01
27bc4     02 00 00 FF 
27bc8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27bcc     0C FA CD F7 | 	test	result1, #12 wz
27bd0     20 00 90 AD |  if_e	jmp	#LR__4192
27bd4     00 09 02 F6 | 	mov	_var05, _var01
27bd8     00 0B 02 F6 | 	mov	_var06, _var01
27bdc     01 0A 06 F1 | 	add	_var06, #1
27be0     04 0D C2 FA | 	rdbyte	_var07, _var05
27be4     05 01 02 F6 | 	mov	_var01, _var06
27be8     03 0D 42 FC | 	wrbyte	_var07, _var04
27bec     01 06 06 F1 | 	add	_var04, #1
27bf0     B0 FF 9F FD | 	jmp	#LR__4190
27bf4                 | LR__4191
27bf4                 | LR__4192
27bf4     03 01 48 FC | 	wrbyte	#0, _var04
27bf8     00 0E 06 F6 | 	mov	_var08, #0
27bfc     00 05 C2 FA | 	rdbyte	_var03, _var01
27c00     2D 04 0E F2 | 	cmp	_var03, #45 wz
27c04     01 02 66 A6 |  if_e	neg	_var02, #1
27c08     01 00 06 A1 |  if_e	add	_var01, #1
27c0c     97 28 48 FB | 	callpa	#(@LR__4194-@LR__4193)>>2,fcache_load_ptr_
27c10                 | '                 sgn = -1;
27c10                 | '                 s++;
27c10                 | '         }
27c10                 | '         while (isdigit(*s)) {
27c10                 | LR__4193
27c10     00 13 C2 FA | 	rdbyte	arg01, _var01
27c14                 | ' {
27c14                 | '   return  (__ctype_get(c) & 0x02 ) ;
27c14     80 12 36 F3 | 	fle	arg01, #128 wc
27c18                 | '     return __ctype[c];
27c18     02 00 00 FF 
27c1c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27c20     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27c24     09 FB C1 FA | 	rdbyte	result1, arg01
27c28     02 00 00 FF 
27c2c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27c30     02 FA CD F7 | 	test	result1, #2 wz
27c34     28 00 90 AD |  if_e	jmp	#LR__4195
27c38     07 05 02 F6 | 	mov	_var03, _var08
27c3c     02 04 66 F0 | 	shl	_var03, #2
27c40     07 05 02 F1 | 	add	_var03, _var08
27c44     01 04 66 F0 | 	shl	_var03, #1
27c48     00 09 C2 FA | 	rdbyte	_var05, _var01
27c4c     30 08 86 F1 | 	sub	_var05, #48
27c50     04 05 02 F1 | 	add	_var03, _var05
27c54     02 0F 02 F6 | 	mov	_var08, _var03
27c58     01 00 06 F1 | 	add	_var01, #1
27c5c     B0 FF 9F FD | 	jmp	#LR__4193
27c60                 | LR__4194
27c60                 | LR__4195
27c60     07 00 00 FF 
27c64     10 0E 06 FD | 	qmul	_var08, ##3600
27c68     00 05 C2 FA | 	rdbyte	_var03, _var01
27c6c     3A 04 0E F2 | 	cmp	_var03, #58 wz
27c70     18 10 62 FD | 	getqx	_var09
27c74     70 00 90 5D |  if_ne	jmp	#LR__4199
27c78     00 0E 06 F6 | 	mov	_var08, #0
27c7c     01 00 06 F1 | 	add	_var01, #1
27c80     97 28 48 FB | 	callpa	#(@LR__4197-@LR__4196)>>2,fcache_load_ptr_
27c84                 | '                 x = 0;
27c84                 | '                 s++;
27c84                 | '                 while (isdigit(*s)) {
27c84                 | LR__4196
27c84     00 13 C2 FA | 	rdbyte	arg01, _var01
27c88                 | ' {
27c88                 | '   return  (__ctype_get(c) & 0x02 ) ;
27c88     80 12 36 F3 | 	fle	arg01, #128 wc
27c8c                 | '     return __ctype[c];
27c8c     02 00 00 FF 
27c90     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27c94     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27c98     09 FB C1 FA | 	rdbyte	result1, arg01
27c9c     02 00 00 FF 
27ca0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27ca4     02 FA CD F7 | 	test	result1, #2 wz
27ca8     28 00 90 AD |  if_e	jmp	#LR__4198
27cac     07 05 02 F6 | 	mov	_var03, _var08
27cb0     02 04 66 F0 | 	shl	_var03, #2
27cb4     07 05 02 F1 | 	add	_var03, _var08
27cb8     01 04 66 F0 | 	shl	_var03, #1
27cbc     00 09 C2 FA | 	rdbyte	_var05, _var01
27cc0     30 08 86 F1 | 	sub	_var05, #48
27cc4     04 05 02 F1 | 	add	_var03, _var05
27cc8     02 0F 02 F6 | 	mov	_var08, _var03
27ccc     01 00 06 F1 | 	add	_var01, #1
27cd0     B0 FF 9F FD | 	jmp	#LR__4196
27cd4                 | LR__4197
27cd4                 | LR__4198
27cd4     07 0D 02 F6 | 	mov	_var07, _var08
27cd8     04 0C 66 F0 | 	shl	_var07, #4
27cdc     07 0D 82 F1 | 	sub	_var07, _var08
27ce0     02 0C 66 F0 | 	shl	_var07, #2
27ce4     06 11 02 F1 | 	add	_var09, _var07
27ce8                 | LR__4199
27ce8     02 00 00 FF 
27cec     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
27cf0     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
27cf4     00 13 C2 FA | 	rdbyte	arg01, _var01
27cf8                 | ' {
27cf8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27cf8     80 12 36 F3 | 	fle	arg01, #128 wc
27cfc                 | '     return __ctype[c];
27cfc     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
27d00     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27d04     09 FB C1 FA | 	rdbyte	result1, arg01
27d08     02 00 00 FF 
27d0c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27d10     0C FA CD F7 | 	test	result1, #12 wz
27d14     50 00 90 AD |  if_e	jmp	#LR__4202
27d18     0A 03 68 FC | 	wrlong	#1, arg02
27d1c                 | '                 *hasdst = 1;
27d1c                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
27d1c                 | LR__4200
27d1c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
27d20     44 00 90 AD |  if_e	jmp	#LR__4201
27d24     00 13 C2 FA | 	rdbyte	arg01, _var01
27d28                 | ' {
27d28                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27d28     80 12 36 F3 | 	fle	arg01, #128 wc
27d2c                 | '     return __ctype[c];
27d2c     02 00 00 FF 
27d30     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27d34     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27d38     09 FB C1 FA | 	rdbyte	result1, arg01
27d3c     02 00 00 FF 
27d40     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27d44     0C FA CD F7 | 	test	result1, #12 wz
27d48     1C 00 90 AD |  if_e	jmp	#LR__4201
27d4c     00 0B 02 F6 | 	mov	_var06, _var01
27d50     01 0A 06 F1 | 	add	_var06, #1
27d54     00 0D C2 FA | 	rdbyte	_var07, _var01
27d58     05 01 02 F6 | 	mov	_var01, _var06
27d5c     03 0D 42 FC | 	wrbyte	_var07, _var04
27d60     01 06 06 F1 | 	add	_var04, #1
27d64     B4 FF 9F FD | 	jmp	#LR__4200
27d68                 | LR__4201
27d68                 | LR__4202
27d68     03 01 48 FC | 	wrbyte	#0, _var04
27d6c     02 00 00 FF 
27d70     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27d74     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
27d78     02 00 00 FF 
27d7c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
27d80     20 00 90 AD |  if_e	jmp	#LR__4203
27d84     02 00 00 FF 
27d88     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27d8c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27d90     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
27d94     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27d98     02 00 00 FF 
27d9c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
27da0     1C 00 90 FD | 	jmp	#LR__4204
27da4                 | LR__4203
27da4     02 00 00 FF 
27da8     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
27dac     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27db0     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
27db4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27db8     02 00 00 FF 
27dbc     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
27dc0                 | LR__4204
27dc0     02 00 00 FF 
27dc4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
27dc8     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
27dcc     02 00 00 FF 
27dd0     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
27dd4     20 00 90 AD |  if_e	jmp	#LR__4205
27dd8     02 00 00 FF 
27ddc     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
27de0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27de4     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
27de8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27dec     02 00 00 FF 
27df0     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
27df4     1C 00 90 FD | 	jmp	#LR__4206
27df8                 | LR__4205
27df8     02 00 00 FF 
27dfc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27e00     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27e04     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
27e08     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27e0c     02 00 00 FF 
27e10     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
27e14                 | LR__4206
27e14     08 03 02 FD | 	qmul	_var02, _var09
27e18                 | ' 		_tzname[1] = stdname;
27e18                 | ' 
27e18                 | '         return sgn * off;
27e18     18 FA 61 FD | 	getqx	result1
27e1c                 | LR__4207
27e1c                 | _fatfs_cc___tzoffset_ret
27e1c     2D 00 64 FD | 	ret
27e20                 | 
27e20                 | _fatfs_cc___indst
27e20     10 12 06 F1 | 	add	arg01, #16
27e24     09 01 02 FB | 	rdlong	_var01, arg01
27e28     10 12 86 F1 | 	sub	arg01, #16
27e2c     02 00 0E F2 | 	cmp	_var01, #2 wz
27e30     30 00 90 5D |  if_ne	jmp	#LR__4210
27e34     07 00 06 F6 | 	mov	_var01, #7
27e38     18 12 06 F1 | 	add	arg01, #24
27e3c     09 03 02 FB | 	rdlong	_var02, arg01
27e40     01 01 02 F1 | 	add	_var01, _var02
27e44     0C 12 86 F1 | 	sub	arg01, #12
27e48     09 05 02 FB | 	rdlong	_var03, arg01
27e4c     02 01 82 F1 | 	sub	_var01, _var03
27e50     00 00 56 F2 | 	cmps	_var01, #0 wc
27e54                 | '                         return 1;
27e54     01 FA 05 C6 |  if_b	mov	result1, #1
27e58     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
27e5c                 | '                 return 0;
27e5c     00 FA 05 F6 | 	mov	result1, #0
27e60     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
27e64                 | LR__4210
27e64     10 12 06 F1 | 	add	arg01, #16
27e68     09 01 02 FB | 	rdlong	_var01, arg01
27e6c     10 12 86 F1 | 	sub	arg01, #16
27e70     0A 00 0E F2 | 	cmp	_var01, #10 wz
27e74     28 00 90 5D |  if_ne	jmp	#LR__4211
27e78     18 12 06 F1 | 	add	arg01, #24
27e7c     09 01 02 FB | 	rdlong	_var01, arg01
27e80     0C 12 86 F1 | 	sub	arg01, #12
27e84     09 07 02 FB | 	rdlong	_var04, arg01
27e88     03 01 82 F1 | 	sub	_var01, _var04
27e8c     00 00 56 F2 | 	cmps	_var01, #0 wc
27e90                 | '                         return 0;
27e90     00 FA 05 C6 |  if_b	mov	result1, #0
27e94     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
27e98                 | '                 return 1;
27e98     01 FA 05 F6 | 	mov	result1, #1
27e9c     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
27ea0                 | LR__4211
27ea0                 | '         }
27ea0                 | ' 
27ea0                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
27ea0     00 00 06 F6 | 	mov	_var01, #0
27ea4     10 12 06 F1 | 	add	arg01, #16
27ea8     09 03 02 FB | 	rdlong	_var02, arg01
27eac     10 12 86 F1 | 	sub	arg01, #16
27eb0     03 02 56 F2 | 	cmps	_var02, #3 wc
27eb4     10 00 90 CD |  if_b	jmp	#LR__4212
27eb8     10 12 06 F1 | 	add	arg01, #16
27ebc     09 05 02 FB | 	rdlong	_var03, arg01
27ec0     0A 04 56 F2 | 	cmps	_var03, #10 wc
27ec4     01 00 06 C6 |  if_b	mov	_var01, #1
27ec8                 | LR__4212
27ec8     00 FB 01 F6 | 	mov	result1, _var01
27ecc                 | _fatfs_cc___indst_ret
27ecc     2D 00 64 FD | 	ret
27ed0                 | 
27ed0                 | ' 	
27ed0                 | ' 	FUNCTION pfunc(c as integer) as integer
27ed0                 | ___strs_cl_pfunc
27ed0                 | ' 		if (i < 16) then
27ed0     04 E4 05 F1 | 	add	objptr, #4
27ed4     F2 FA 01 FB | 	rdlong	result1, objptr
27ed8     04 E4 85 F1 | 	sub	objptr, #4
27edc     10 FA 55 F2 | 	cmps	result1, #16 wc
27ee0     2C 00 90 3D |  if_ae	jmp	#LR__4220
27ee4     F2 FA 01 FB | 	rdlong	result1, objptr
27ee8     04 E4 05 F1 | 	add	objptr, #4
27eec     F2 00 02 FB | 	rdlong	_var01, objptr
27ef0     FD 00 02 F1 | 	add	_var01, result1
27ef4     00 13 42 FC | 	wrbyte	arg01, _var01
27ef8     F2 FA 01 FB | 	rdlong	result1, objptr
27efc     01 FA 05 F1 | 	add	result1, #1
27f00     F2 FA 61 FC | 	wrlong	result1, objptr
27f04     04 E4 85 F1 | 	sub	objptr, #4
27f08                 | ' 			p(i) = c
27f08                 | ' 			i = i+1
27f08                 | ' 			return 1
27f08     01 FA 05 F6 | 	mov	result1, #1
27f0c     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
27f10                 | LR__4220
27f10                 | ' 			return -1
27f10     01 FA 65 F6 | 	neg	result1, #1
27f14                 | ___strs_cl_pfunc_ret
27f14     2D 00 64 FD | 	ret
27f18                 | 
27f18                 | __struct__s_vfs_file_t_putchar
27f18     04 4A 05 F6 | 	mov	COUNT_, #4
27f1c     A8 00 A0 FD | 	call	#pushregs_
27f20     1C E4 05 F1 | 	add	objptr, #28
27f24     F2 1E 0A FB | 	rdlong	local01, objptr wz
27f28     1C E4 85 F1 | 	sub	objptr, #28
27f2c     00 FA 05 A6 |  if_e	mov	result1, #0
27f30     48 00 90 AD |  if_e	jmp	#LR__4230
27f34     1C E4 05 F1 | 	add	objptr, #28
27f38     F2 20 02 FB | 	rdlong	local02, objptr
27f3c     10 23 02 F6 | 	mov	local03, local02
27f40     1C E4 85 F1 | 	sub	objptr, #28
27f44     13 22 46 F7 | 	zerox	local03, #19
27f48     14 20 46 F0 | 	shr	local02, #20
27f4c     02 20 66 F0 | 	shl	local02, #2
27f50     ED 20 02 F1 | 	add	local02, __methods__
27f54     10 21 02 FB | 	rdlong	local02, local02
27f58     F2 14 02 F6 | 	mov	arg02, objptr
27f5c     F2 24 02 F6 | 	mov	local04, objptr
27f60     11 E5 01 F6 | 	mov	objptr, local03
27f64     2D 20 62 FD | 	call	local02
27f68     12 E5 01 F6 | 	mov	objptr, local04
27f6c                 | '     return (i < 0) ? 0 : 1;
27f6c     00 FA 55 F2 | 	cmps	result1, #0 wc
27f70     00 1E 06 C6 |  if_b	mov	local01, #0
27f74     01 1E 06 36 |  if_ae	mov	local01, #1
27f78     0F FB 01 F6 | 	mov	result1, local01
27f7c                 | LR__4230
27f7c     A7 F0 03 F6 | 	mov	ptra, fp
27f80     B2 00 A0 FD | 	call	#popregs_
27f84                 | __struct__s_vfs_file_t_putchar_ret
27f84     2D 00 64 FD | 	ret
27f88                 | 
27f88                 | __struct__s_vfs_file_t_getchar
27f88     03 4A 05 F6 | 	mov	COUNT_, #3
27f8c     A8 00 A0 FD | 	call	#pushregs_
27f90     20 E4 05 F1 | 	add	objptr, #32
27f94     F2 12 0A FB | 	rdlong	arg01, objptr wz
27f98     20 E4 85 F1 | 	sub	objptr, #32
27f9c     01 FA 65 A6 |  if_e	neg	result1, #1
27fa0     38 00 90 AD |  if_e	jmp	#LR__4240
27fa4                 | '     return getcf(__this);
27fa4     20 E4 05 F1 | 	add	objptr, #32
27fa8     F2 1E 02 FB | 	rdlong	local01, objptr
27fac     0F 21 02 F6 | 	mov	local02, local01
27fb0     20 E4 85 F1 | 	sub	objptr, #32
27fb4     13 20 46 F7 | 	zerox	local02, #19
27fb8     14 1E 46 F0 | 	shr	local01, #20
27fbc     02 1E 66 F0 | 	shl	local01, #2
27fc0     ED 1E 02 F1 | 	add	local01, __methods__
27fc4     0F 1F 02 FB | 	rdlong	local01, local01
27fc8     F2 12 02 F6 | 	mov	arg01, objptr
27fcc     F2 22 02 F6 | 	mov	local03, objptr
27fd0     10 E5 01 F6 | 	mov	objptr, local02
27fd4     2D 1E 62 FD | 	call	local01
27fd8     11 E5 01 F6 | 	mov	objptr, local03
27fdc                 | LR__4240
27fdc     A7 F0 03 F6 | 	mov	ptra, fp
27fe0     B2 00 A0 FD | 	call	#popregs_
27fe4                 | __struct__s_vfs_file_t_getchar_ret
27fe4     2D 00 64 FD | 	ret
27fe8                 | 
27fe8                 | __struct___bas_wrap_sender_tx
27fe8     03 4A 05 F6 | 	mov	COUNT_, #3
27fec     A8 00 A0 FD | 	call	#pushregs_
27ff0     F2 1E 02 FB | 	rdlong	local01, objptr
27ff4     0F 21 02 F6 | 	mov	local02, local01
27ff8     13 1E 46 F7 | 	zerox	local01, #19
27ffc     14 20 46 F0 | 	shr	local02, #20
28000     02 20 66 F0 | 	shl	local02, #2
28004     ED 20 02 F1 | 	add	local02, __methods__
28008     10 21 02 FB | 	rdlong	local02, local02
2800c     F2 22 02 F6 | 	mov	local03, objptr
28010     0F E5 01 F6 | 	mov	objptr, local01
28014     2D 20 62 FD | 	call	local02
28018     11 E5 01 F6 | 	mov	objptr, local03
2801c     01 FA 05 F6 | 	mov	result1, #1
28020     A7 F0 03 F6 | 	mov	ptra, fp
28024     B2 00 A0 FD | 	call	#popregs_
28028                 | __struct___bas_wrap_sender_tx_ret
28028     2D 00 64 FD | 	ret
2802c                 | 
2802c                 | __struct___bas_wrap_sender_rx
2802c     03 4A 05 F6 | 	mov	COUNT_, #3
28030     A8 00 A0 FD | 	call	#pushregs_
28034     04 E4 05 F1 | 	add	objptr, #4
28038     F2 1E 02 FB | 	rdlong	local01, objptr
2803c     0F 21 02 F6 | 	mov	local02, local01
28040     04 E4 85 F1 | 	sub	objptr, #4
28044     13 20 46 F7 | 	zerox	local02, #19
28048     14 1E 46 F0 | 	shr	local01, #20
2804c     02 1E 66 F0 | 	shl	local01, #2
28050     ED 1E 02 F1 | 	add	local01, __methods__
28054     0F 1F 02 FB | 	rdlong	local01, local01
28058     F2 22 02 F6 | 	mov	local03, objptr
2805c     10 E5 01 F6 | 	mov	objptr, local02
28060     2D 1E 62 FD | 	call	local01
28064     11 E5 01 F6 | 	mov	objptr, local03
28068     A7 F0 03 F6 | 	mov	ptra, fp
2806c     B2 00 A0 FD | 	call	#popregs_
28070                 | __struct___bas_wrap_sender_rx_ret
28070     2D 00 64 FD | 	ret
28074                 | 
28074                 | __struct___bas_wrap_sender_close
28074     03 4A 05 F6 | 	mov	COUNT_, #3
28078     A8 00 A0 FD | 	call	#pushregs_
2807c     08 E4 05 F1 | 	add	objptr, #8
28080     F2 1E 02 FB | 	rdlong	local01, objptr
28084     0F 21 02 F6 | 	mov	local02, local01
28088     08 E4 85 F1 | 	sub	objptr, #8
2808c     13 20 46 F7 | 	zerox	local02, #19
28090     14 1E 46 F0 | 	shr	local01, #20
28094     02 1E 66 F0 | 	shl	local01, #2
28098     ED 1E 02 F1 | 	add	local01, __methods__
2809c     0F 1F 02 FB | 	rdlong	local01, local01
280a0     F2 22 02 F6 | 	mov	local03, objptr
280a4     10 E5 01 F6 | 	mov	objptr, local02
280a8     2D 1E 62 FD | 	call	local01
280ac     11 E5 01 F6 | 	mov	objptr, local03
280b0     A7 F0 03 F6 | 	mov	ptra, fp
280b4     B2 00 A0 FD | 	call	#popregs_
280b8                 | __struct___bas_wrap_sender_close_ret
280b8     2D 00 64 FD | 	ret
280bc                 | 
280bc                 | LR__4250
280bc     2F          | 	byte	"/"
280bd     00          | 	byte	0
280be                 | LR__4251
280be     69 6E 66    | 	byte	"inf"
280c1     00          | 	byte	0
280c2                 | LR__4252
280c2     6E 61 6E    | 	byte	"nan"
280c5     00          | 	byte	0
280c6                 | LR__4253
280c6                 | 	byte	
280c6     00          | 	byte	0
280c7                 | LR__4254
280c7                 | 	byte	
280c7     00          | 	byte	0
280c8                 | LR__4255
280c8                 | 	byte	
280c8     00          | 	byte	0
280c9                 | LR__4256
280c9                 | 	byte	
280c9     00          | 	byte	0
280ca                 | LR__4257
280ca                 | 	byte	
280ca     00          | 	byte	0
280cb                 | LR__4258
280cb                 | 	byte	
280cb     00          | 	byte	0
280cc                 | LR__4259
280cc                 | 	byte	
280cc     00          | 	byte	0
280cd                 | LR__4260
280cd                 | 	byte	
280cd     00          | 	byte	0
280ce                 | LR__4261
280ce     00          | 	byte	0
280cf     00          | 	byte	0
280d0                 | LR__4262
280d0     00          | 	byte	0
280d1     00          | 	byte	0
280d2                 | LR__4263
280d2     00          | 	byte	0
280d3     00          | 	byte	0
280d4                 | LR__4264
280d4     20 21 21 21 
280d8     20 63 6F 72 
280dc     72 75 70 74 
280e0     65 64 20 68 
280e4     65 61 70 3F 
280e8     3F 3F 20 21 
280ec     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
280ef     00          | 	byte	0
280f0                 | LR__4265
280f0     20 21 21 21 
280f4     20 6F 75 74 
280f8     20 6F 66 20 
280fc     68 65 61 70 
28100     20 6D 65 6D 
28104     6F 72 79 20 
28108     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2810c     00          | 	byte	0
2810d                 | LR__4266
2810d     20 21 21 21 
28111     20 63 6F 72 
28115     72 75 70 74 
28119     65 64 20 68 
2811d     65 61 70 20 
28121     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
28125     00          | 	byte	0
28126                 | LR__4267
28126     00          | 	byte	0
28127     00          | 	byte	0
28128                 | LR__4268
28128     2E          | 	byte	"."
28129     00          | 	byte	0
2812a                 | LR__4269
2812a     00          | 	byte	0
2812b     00          | 	byte	0
2812c                 | LR__4270
2812c     00          | 	byte	0
2812d     00          | 	byte	0
2812e                 | LR__4271
2812e     00          | 	byte	0
2812f     00          | 	byte	0
28130                 | LR__4272
28130     2A 3A 3C 3E 
28134     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
28138     00          | 	byte	0
28139                 | LR__4273
28139     2B 2C 3B 3D 
2813d     5B 5D       | 	byte	"+,;=[]"
2813f     00          | 	byte	0
28140                 | LR__4274
28140     46 41 54 33 
28144     32 20 20 20 | 	byte	"FAT32   "
28148     00          | 	byte	0
28149                 | LR__4275
28149     54 5A       | 	byte	"TZ"
2814b     00          | 	byte	0
2814c                 | LR__4276
2814c     00          | 	byte	0
2814d     00          | 	byte	0
2814e                 | LR__4277
2814e                 | 	byte	
2814e     00          | 	byte	0
2814f                 | LR__4278
2814f                 | 	byte	
2814f     00          | 	byte	0
28150                 | LR__4279
28150     22          | 	byte	34
28151     00          | 	byte	0
28152                 | LR__4280
28152     22          | 	byte	34
28153     00          | 	byte	0
28154                 | LR__4281
28154     3A          | 	byte	":"
28155     00          | 	byte	0
28156                 | LR__4282
28156                 | 	byte	
28156     00          | 	byte	0
28157                 | LR__4283
28157                 | 	byte	
28157     00          | 	byte	0
28158                 | LR__4284
28158                 | 	byte	
28158     00          | 	byte	0
28159                 | LR__4285
28159                 | 	byte	
28159     00          | 	byte	0
2815a                 | LR__4286
2815a                 | 	byte	
2815a     00          | 	byte	0
2815b                 | LR__4287
2815b                 | 	byte	
2815b     00          | 	byte	0
2815c                 | LR__4288
2815c                 | 	byte	
2815c     00          | 	byte	0
2815d                 | LR__4289
2815d     22          | 	byte	34
2815e     00          | 	byte	0
2815f                 | LR__4290
2815f     22          | 	byte	34
28160     00          | 	byte	0
28161                 | LR__4291
28161     22          | 	byte	34
28162     00          | 	byte	0
28163                 | LR__4292
28163     22          | 	byte	34
28164     00          | 	byte	0
28165                 | LR__4293
28165     22          | 	byte	34
28166     00          | 	byte	0
28167                 | LR__4294
28167     3E          | 	byte	">"
28168     00          | 	byte	0
28169                 | LR__4295
28169     3E          | 	byte	">"
2816a     00          | 	byte	0
2816b                 | LR__4296
2816b     2B          | 	byte	"+"
2816c     00          | 	byte	0
2816d                 | LR__4297
2816d     2D          | 	byte	"-"
2816e     00          | 	byte	0
2816f                 | LR__4298
2816f     2A          | 	byte	"*"
28170     00          | 	byte	0
28171                 | LR__4299
28171     2F          | 	byte	"/"
28172     00          | 	byte	0
28173                 | LR__4300
28173     5E          | 	byte	"^"
28174     00          | 	byte	0
28175                 | LR__4301
28175     3D          | 	byte	"="
28176     00          | 	byte	0
28177                 | LR__4302
28177     2B          | 	byte	"+"
28178     00          | 	byte	0
28179                 | LR__4303
28179     2B          | 	byte	"+"
2817a     00          | 	byte	0
2817b                 | LR__4304
2817b     2D          | 	byte	"-"
2817c     00          | 	byte	0
2817d                 | LR__4305
2817d     2D          | 	byte	"-"
2817e     00          | 	byte	0
2817f                 | LR__4306
2817f     3C          | 	byte	"<"
28180     00          | 	byte	0
28181                 | LR__4307
28181     3E          | 	byte	">"
28182     00          | 	byte	0
28183                 | LR__4308
28183     22          | 	byte	34
28184     00          | 	byte	0
28185                 | LR__4309
28185     22          | 	byte	34
28186     00          | 	byte	0
28187                 | LR__4310
28187     2E          | 	byte	"."
28188     00          | 	byte	0
28189                 | LR__4311
28189     3F          | 	byte	"?"
2818a     00          | 	byte	0
2818b                 | LR__4312
2818b     3F          | 	byte	"?"
2818c     00          | 	byte	0
2818d                 | LR__4313
2818d     6D 6F 75 73 
28191     65          | 	byte	"mouse"
28192     00          | 	byte	0
28193                 | LR__4314
28193     63 75 72 73 
28197     6F 72       | 	byte	"cursor"
28199     00          | 	byte	0
2819a                 | LR__4315
2819a     63 6C 69 63 
2819e     6B          | 	byte	"click"
2819f     00          | 	byte	0
281a0                 | LR__4316
281a0     6F 6E       | 	byte	"on"
281a2     00          | 	byte	0
281a3                 | LR__4317
281a3     31          | 	byte	"1"
281a4     00          | 	byte	0
281a5                 | LR__4318
281a5     6F 66 66    | 	byte	"off"
281a8     00          | 	byte	0
281a9                 | LR__4319
281a9     30          | 	byte	"0"
281aa     00          | 	byte	0
281ab                 | LR__4320
281ab     6D 6F 64 65 | 	byte	"mode"
281af     00          | 	byte	0
281b0                 | LR__4321
281b0     6D 2E       | 	byte	"m."
281b2     00          | 	byte	0
281b3                 | LR__4322
281b3     61 74 61 72 
281b7     69          | 	byte	"atari"
281b8     00          | 	byte	0
281b9                 | LR__4323
281b9     30          | 	byte	"0"
281ba     00          | 	byte	0
281bb                 | LR__4324
281bb     70 63 5F 61 
281bf     6D 62 65 72 | 	byte	"pc_amber"
281c3     00          | 	byte	0
281c4                 | LR__4325
281c4     31          | 	byte	"1"
281c5     00          | 	byte	0
281c6                 | LR__4326
281c6     70 63 5F 67 
281ca     72 65 65 6E | 	byte	"pc_green"
281ce     00          | 	byte	0
281cf                 | LR__4327
281cf     32          | 	byte	"2"
281d0     00          | 	byte	0
281d1                 | LR__4328
281d1     70 63 5F 77 
281d5     68 69 74 65 | 	byte	"pc_white"
281d9     00          | 	byte	0
281da                 | LR__4329
281da     33          | 	byte	"3"
281db     00          | 	byte	0
281dc                 | LR__4330
281dc     73 74       | 	byte	"st"
281de     00          | 	byte	0
281df                 | LR__4331
281df     34          | 	byte	"4"
281e0     00          | 	byte	0
281e1                 | LR__4332
281e1                 | 	byte	
281e1     00          | 	byte	0
281e2                 | LR__4333
281e2     6C 6F 61 64 | 	byte	"load"
281e6     00          | 	byte	0
281e7                 | LR__4334
281e7     73 61 76 65 | 	byte	"save"
281eb     00          | 	byte	0
281ec                 | LR__4335
281ec     62 72 75 6E | 	byte	"brun"
281f0     00          | 	byte	0
281f1                 | LR__4336
281f1     6C 6F 2E    | 	byte	"lo."
281f4     00          | 	byte	0
281f5                 | LR__4337
281f5     73 2E       | 	byte	"s."
281f7     00          | 	byte	0
281f8                 | LR__4338
281f8     62 72 2E    | 	byte	"br."
281fb     00          | 	byte	0
281fc                 | LR__4339
281fc                 | 	byte	
281fc     00          | 	byte	0
281fd                 | LR__4340
281fd                 | 	byte	
281fd     00          | 	byte	0
281fe                 | LR__4341
281fe                 | 	byte	
281fe     00          | 	byte	0
281ff                 | LR__4342
281ff                 | 	byte	
281ff     00          | 	byte	0
28200                 | LR__4343
28200     20 55 73 65 
28204     72 20 66 75 
28208     6E 63 74 69 
2820c     6F 6E 73 20 
28210     61 6E 64 20 
28214     61 72 72 61 
28218     79 73 20 6E 
2821c     6F 74 20 79 
28220     65 74 20 69 
28224     6D 70 6C 65 
28228     6D 65 6E 74 
2822c     65 64       | 	byte	" User functions and arrays not yet implemented"
2822e     00          | 	byte	0
2822f                 | LR__4344
2822f                 | 	byte	
2822f     00          | 	byte	0
28230                 | LR__4345
28230                 | 	byte	
28230     00          | 	byte	0
28231                 | LR__4346
28231     52 65 61 64 
28235     79          | 	byte	"Ready"
28236     00          | 	byte	0
28237                 | LR__4347
28237     2B          | 	byte	"+"
28238     00          | 	byte	0
28239                 | LR__4348
28239     2D          | 	byte	"-"
2823a     00          | 	byte	0
2823b                 | LR__4349
2823b     6F 72       | 	byte	"or"
2823d     00          | 	byte	0
2823e                 | LR__4350
2823e     78 6F 72    | 	byte	"xor"
28241     00          | 	byte	0
28242                 | LR__4351
28242     2A          | 	byte	"*"
28243     00          | 	byte	0
28244                 | LR__4352
28244     2F          | 	byte	"/"
28245     00          | 	byte	0
28246                 | LR__4353
28246     61 6E 64    | 	byte	"and"
28249     00          | 	byte	0
2824a                 | LR__4354
2824a     64 69 76    | 	byte	"div"
2824d     00          | 	byte	0
2824e                 | LR__4355
2824e     6D 6F 64    | 	byte	"mod"
28251     00          | 	byte	0
28252                 | LR__4356
28252     73 68 6C    | 	byte	"shl"
28255     00          | 	byte	0
28256                 | LR__4357
28256     73 68 72    | 	byte	"shr"
28259     00          | 	byte	0
2825a                 | LR__4358
2825a     5E          | 	byte	"^"
2825b     00          | 	byte	0
2825c                 | LR__4359
2825c     6E 6F 74    | 	byte	"not"
2825f     00          | 	byte	0
28260                 | LR__4360
28260     40          | 	byte	"@"
28261     00          | 	byte	0
28262                 | LR__4361
28262     3D          | 	byte	"="
28263     00          | 	byte	0
28264                 | LR__4362
28264     3E 3D       | 	byte	">="
28266     00          | 	byte	0
28267                 | LR__4363
28267     3C 3D       | 	byte	"<="
28269     00          | 	byte	0
2826a                 | LR__4364
2826a     3C          | 	byte	"<"
2826b     00          | 	byte	0
2826c                 | LR__4365
2826c     3E          | 	byte	">"
2826d     00          | 	byte	0
2826e                 | LR__4366
2826e     3C 3E       | 	byte	"<>"
28270     00          | 	byte	0
28271                 | LR__4367
28271     2B 2B       | 	byte	"++"
28273     00          | 	byte	0
28274                 | LR__4368
28274     2D 2D       | 	byte	"--"
28276     00          | 	byte	0
28277                 | LR__4369
28277     2B          | 	byte	"+"
28278     00          | 	byte	0
28279                 | LR__4370
28279     2D          | 	byte	"-"
2827a     00          | 	byte	0
2827b                 | LR__4371
2827b     3D          | 	byte	"="
2827c     00          | 	byte	0
2827d                 | LR__4372
2827d     2C          | 	byte	","
2827e     00          | 	byte	0
2827f                 | LR__4373
2827f     2A          | 	byte	"*"
28280     00          | 	byte	0
28281                 | LR__4374
28281     2F          | 	byte	"/"
28282     00          | 	byte	0
28283                 | LR__4375
28283     3B          | 	byte	";"
28284     00          | 	byte	0
28285                 | LR__4376
28285     22          | 	byte	34
28286     00          | 	byte	0
28287                 | LR__4377
28287     5E          | 	byte	"^"
28288     00          | 	byte	0
28289                 | LR__4378
28289     29          | 	byte	")"
2828a     00          | 	byte	0
2828b                 | LR__4379
2828b     28          | 	byte	"("
2828c     00          | 	byte	0
2828d                 | LR__4380
2828d     3A          | 	byte	":"
2828e     00          | 	byte	0
2828f                 | LR__4381
2828f     20          | 	byte	" "
28290     00          | 	byte	0
28291                 | LR__4382
28291     3E          | 	byte	">"
28292     00          | 	byte	0
28293                 | LR__4383
28293     3C          | 	byte	"<"
28294     00          | 	byte	0
28295                 | LR__4384
28295     3D          | 	byte	"="
28296     00          | 	byte	0
28297                 | LR__4385
28297     62 65 65 70 | 	byte	"beep"
2829b     00          | 	byte	0
2829c                 | LR__4386
2829c     62 2E       | 	byte	"b."
2829e     00          | 	byte	0
2829f                 | LR__4387
2829f     62 6F 78    | 	byte	"box"
282a2     00          | 	byte	0
282a3                 | LR__4388
282a3     62 72 75 6E | 	byte	"brun"
282a7     00          | 	byte	0
282a8                 | LR__4389
282a8     62 72 2E    | 	byte	"br."
282ab     00          | 	byte	0
282ac                 | LR__4390
282ac     63 69 72 63 
282b0     6C 65       | 	byte	"circle"
282b2     00          | 	byte	0
282b3                 | LR__4391
282b3     63 69 2E    | 	byte	"ci."
282b6     00          | 	byte	0
282b7                 | LR__4392
282b7     63 6C 69 63 
282bb     6B          | 	byte	"click"
282bc     00          | 	byte	0
282bd                 | LR__4393
282bd     63 6C 73    | 	byte	"cls"
282c0     00          | 	byte	0
282c1                 | LR__4394
282c1     63 6F 6C 6F 
282c5     72          | 	byte	"color"
282c6     00          | 	byte	0
282c7                 | LR__4395
282c7     63 2E       | 	byte	"c."
282c9     00          | 	byte	0
282ca                 | LR__4396
282ca     63 73 61 76 
282ce     65          | 	byte	"csave"
282cf     00          | 	byte	0
282d0                 | LR__4397
282d0     63 73 2E    | 	byte	"cs."
282d3     00          | 	byte	0
282d4                 | LR__4398
282d4     63 75 72 73 
282d8     6F 72       | 	byte	"cursor"
282da     00          | 	byte	0
282db                 | LR__4399
282db     64 65 66 73 
282df     6E 64       | 	byte	"defsnd"
282e1     00          | 	byte	0
282e2                 | LR__4400
282e2     64 65 66 65 
282e6     6E 76       | 	byte	"defenv"
282e8     00          | 	byte	0
282e9                 | LR__4401
282e9     64 65 66 73 
282ed     70 72 69 74 
282f1     65          | 	byte	"defsprite"
282f2     00          | 	byte	0
282f3                 | LR__4402
282f3     64 73 2E    | 	byte	"ds."
282f6     00          | 	byte	0
282f7                 | LR__4403
282f7     64 65 67    | 	byte	"deg"
282fa     00          | 	byte	0
282fb                 | LR__4404
282fb     64 69 6D    | 	byte	"dim"
282fe     00          | 	byte	0
282ff                 | LR__4405
282ff     64 69 72    | 	byte	"dir"
28302     00          | 	byte	0
28303                 | LR__4406
28303     64 72 61 77 | 	byte	"draw"
28307     00          | 	byte	0
28308                 | LR__4407
28308     64 72 2E    | 	byte	"dr."
2830b     00          | 	byte	0
2830c                 | LR__4408
2830c     65 6C 73 65 | 	byte	"else"
28310     00          | 	byte	0
28311                 | LR__4409
28311     66 63 69 72 
28315     63 6C 65    | 	byte	"fcircle"
28318     00          | 	byte	0
28319                 | LR__4410
28319     66 63 2E    | 	byte	"fc."
2831c     00          | 	byte	0
2831d                 | LR__4411
2831d     66 69 6C 6C | 	byte	"fill"
28321     00          | 	byte	0
28322                 | LR__4412
28322     66 69 2E    | 	byte	"fi."
28325     00          | 	byte	0
28326                 | LR__4413
28326     66 6F 6E 74 | 	byte	"font"
2832a     00          | 	byte	0
2832b                 | LR__4414
2832b     66 6F 72    | 	byte	"for"
2832e     00          | 	byte	0
2832f                 | LR__4415
2832f     66 2E       | 	byte	"f."
28331     00          | 	byte	0
28332                 | LR__4416
28332     66 72 61 6D 
28336     65          | 	byte	"frame"
28337     00          | 	byte	0
28338                 | LR__4417
28338     66 72 2E    | 	byte	"fr."
2833b     00          | 	byte	0
2833c                 | LR__4418
2833c     67 6F 74 6F | 	byte	"goto"
28340     00          | 	byte	0
28341                 | LR__4419
28341     67 2E       | 	byte	"g."
28343     00          | 	byte	0
28344                 | LR__4420
28344     69 66       | 	byte	"if"
28346     00          | 	byte	0
28347                 | LR__4421
28347     69 6E 6B    | 	byte	"ink"
2834a     00          | 	byte	0
2834b                 | LR__4422
2834b     69 2E       | 	byte	"i."
2834d     00          | 	byte	0
2834e                 | LR__4423
2834e     69 6E 74    | 	byte	"int"
28351     00          | 	byte	0
28352                 | LR__4424
28352     6C 69 73 74 | 	byte	"list"
28356     00          | 	byte	0
28357                 | LR__4425
28357     6C 2E       | 	byte	"l."
28359     00          | 	byte	0
2835a                 | LR__4426
2835a     6C 6F 61 64 | 	byte	"load"
2835e     00          | 	byte	0
2835f                 | LR__4427
2835f     6C 6F 2E    | 	byte	"lo."
28362     00          | 	byte	0
28363                 | LR__4428
28363     6D 6F 64 65 | 	byte	"mode"
28367     00          | 	byte	0
28368                 | LR__4429
28368     6D 2E       | 	byte	"m."
2836a     00          | 	byte	0
2836b                 | LR__4430
2836b     6D 6F 75 73 
2836f     65          | 	byte	"mouse"
28370     00          | 	byte	0
28371                 | LR__4431
28371     6E 65 77    | 	byte	"new"
28374     00          | 	byte	0
28375                 | LR__4432
28375     6E 65 78 74 | 	byte	"next"
28379     00          | 	byte	0
2837a                 | LR__4433
2837a     6E 2E       | 	byte	"n."
2837c     00          | 	byte	0
2837d                 | LR__4434
2837d     70 61 70 65 
28381     72          | 	byte	"paper"
28382     00          | 	byte	0
28383                 | LR__4435
28383     70 2E       | 	byte	"p."
28385     00          | 	byte	0
28386                 | LR__4436
28386     70 69 6E 66 
2838a     6C 6F 61 74 | 	byte	"pinfloat"
2838e     00          | 	byte	0
2838f                 | LR__4437
2838f     70 69 6E 68 
28393     69          | 	byte	"pinhi"
28394     00          | 	byte	0
28395                 | LR__4438
28395     70 69 6E 6C 
28399     6F          | 	byte	"pinlo"
2839a     00          | 	byte	0
2839b                 | LR__4439
2839b     70 69 6E 73 
2839f     74 61 72 74 | 	byte	"pinstart"
283a3     00          | 	byte	0
283a4                 | LR__4440
283a4     70 69 6E 74 
283a8     6F 67 67 6C 
283ac     65          | 	byte	"pintoggle"
283ad     00          | 	byte	0
283ae                 | LR__4441
283ae     70 69 6E 77 
283b2     72 69 74 65 | 	byte	"pinwrite"
283b6     00          | 	byte	0
283b7                 | LR__4442
283b7     70 6C 61 79 | 	byte	"play"
283bb     00          | 	byte	0
283bc                 | LR__4443
283bc     70 6C 6F 74 | 	byte	"plot"
283c0     00          | 	byte	0
283c1                 | LR__4444
283c1     70 6C 2E    | 	byte	"pl."
283c4     00          | 	byte	0
283c5                 | LR__4445
283c5     70 6F 73 69 
283c9     74 69 6F 6E | 	byte	"position"
283cd     00          | 	byte	0
283ce                 | LR__4446
283ce     70 6F 73 2E | 	byte	"pos."
283d2     00          | 	byte	0
283d3                 | LR__4447
283d3     70 72 69 6E 
283d7     74          | 	byte	"print"
283d8     00          | 	byte	0
283d9                 | LR__4448
283d9     3F          | 	byte	"?"
283da     00          | 	byte	0
283db                 | LR__4449
283db     72 61 64    | 	byte	"rad"
283de     00          | 	byte	0
283df                 | LR__4450
283df     72 75 6E    | 	byte	"run"
283e2     00          | 	byte	0
283e3                 | LR__4451
283e3     73 61 76 65 | 	byte	"save"
283e7     00          | 	byte	0
283e8                 | LR__4452
283e8     73 2E       | 	byte	"s."
283ea     00          | 	byte	0
283eb                 | LR__4453
283eb     73 70 72 69 
283ef     74 65       | 	byte	"sprite"
283f1     00          | 	byte	0
283f2                 | LR__4454
283f2     73 70 2E    | 	byte	"sp."
283f5     00          | 	byte	0
283f6                 | LR__4455
283f6     74 68 65 6E | 	byte	"then"
283fa     00          | 	byte	0
283fb                 | LR__4456
283fb     77 61 69 74 
283ff     6D 73       | 	byte	"waitms"
28401     00          | 	byte	0
28402                 | LR__4457
28402     77 61 69 74 
28406     63 6C 6F 63 
2840a     6B          | 	byte	"waitclock"
2840b     00          | 	byte	0
2840c                 | LR__4458
2840c     77 63 2E    | 	byte	"wc."
2840f     00          | 	byte	0
28410                 | LR__4459
28410     77 61 69 74 
28414     76 62 6C    | 	byte	"waitvbl"
28417     00          | 	byte	0
28418                 | LR__4460
28418     77 76 2E    | 	byte	"wv."
2841b     00          | 	byte	0
2841c                 | LR__4461
2841c     77 78 70 69 
28420     6E          | 	byte	"wxpin"
28421     00          | 	byte	0
28422                 | LR__4462
28422     77 79 70 69 
28426     6E          | 	byte	"wypin"
28427     00          | 	byte	0
28428                 | LR__4463
28428     61 63 6F 73 | 	byte	"acos"
2842c     00          | 	byte	0
2842d                 | LR__4464
2842d     61 73 69 6E | 	byte	"asin"
28431     00          | 	byte	0
28432                 | LR__4465
28432     61 74 6E    | 	byte	"atn"
28435     00          | 	byte	0
28436                 | LR__4466
28436     63 6F 73    | 	byte	"cos"
28439     00          | 	byte	0
2843a                 | LR__4467
2843a     67 65 74 70 
2843e     69 78 65 6C | 	byte	"getpixel"
28442     00          | 	byte	0
28443                 | LR__4468
28443     67 65 2E    | 	byte	"ge."
28446     00          | 	byte	0
28447                 | LR__4469
28447     67 65 74 74 
2844b     69 6D 65    | 	byte	"gettime"
2844e     00          | 	byte	0
2844f                 | LR__4470
2844f     6D 6F 75 73 
28453     65 6B       | 	byte	"mousek"
28455     00          | 	byte	0
28456                 | LR__4471
28456     6D 6F 75 73 
2845a     65 77       | 	byte	"mousew"
2845c     00          | 	byte	0
2845d                 | LR__4472
2845d     6D 6F 75 73 
28461     65 78       | 	byte	"mousex"
28463     00          | 	byte	0
28464                 | LR__4473
28464     6D 6F 75 73 
28468     65 79       | 	byte	"mousey"
2846a     00          | 	byte	0
2846b                 | LR__4474
2846b     70 69 6E 72 
2846f     65 61 64    | 	byte	"pinread"
28472     00          | 	byte	0
28473                 | LR__4475
28473     72 64 70 69 
28477     6E          | 	byte	"rdpin"
28478     00          | 	byte	0
28479                 | LR__4476
28479     72 71 70 69 
2847d     6E          | 	byte	"rqpin"
2847e     00          | 	byte	0
2847f                 | LR__4477
2847f     72 6E 64    | 	byte	"rnd"
28482     00          | 	byte	0
28483                 | LR__4478
28483     73 69 6E    | 	byte	"sin"
28486     00          | 	byte	0
28487                 | LR__4479
28487     73 71 72    | 	byte	"sqr"
2848a     00          | 	byte	0
2848b                 | LR__4480
2848b     73 74 69 63 
2848f     6B          | 	byte	"stick"
28490     00          | 	byte	0
28491                 | LR__4481
28491     73 74 72 69 
28495     67          | 	byte	"strig"
28496     00          | 	byte	0
28497                 | LR__4482
28497     74 61 6E    | 	byte	"tan"
2849a     00          | 	byte	0
2849b                 | LR__4483
2849b     61          | 	byte	"a"
2849c     00          | 	byte	0
2849d                 | LR__4484
2849d     7A          | 	byte	"z"
2849e     00          | 	byte	0
2849f                 | LR__4485
2849f     5F          | 	byte	"_"
284a0     00          | 	byte	0
284a1                 | LR__4486
284a1     61          | 	byte	"a"
284a2     00          | 	byte	0
284a3                 | LR__4487
284a3     7A          | 	byte	"z"
284a4     00          | 	byte	0
284a5                 | LR__4488
284a5     30          | 	byte	"0"
284a6     00          | 	byte	0
284a7                 | LR__4489
284a7     39          | 	byte	"9"
284a8     00          | 	byte	0
284a9                 | LR__4490
284a9     5F          | 	byte	"_"
284aa     00          | 	byte	0
284ab                 | LR__4491
284ab     2E          | 	byte	"."
284ac     00          | 	byte	0
284ad                 | LR__4492
284ad     61          | 	byte	"a"
284ae     00          | 	byte	0
284af                 | LR__4493
284af     7A          | 	byte	"z"
284b0     00          | 	byte	0
284b1                 | LR__4494
284b1     30          | 	byte	"0"
284b2     00          | 	byte	0
284b3                 | LR__4495
284b3     39          | 	byte	"9"
284b4     00          | 	byte	0
284b5                 | LR__4496
284b5     5F          | 	byte	"_"
284b6     00          | 	byte	0
284b7                 | LR__4497
284b7     24          | 	byte	"$"
284b8     00          | 	byte	0
284b9                 | LR__4498
284b9     25          | 	byte	"%"
284ba     00          | 	byte	0
284bb                 | LR__4499
284bb     21          | 	byte	"!"
284bc     00          | 	byte	0
284bd                 | LR__4500
284bd     30          | 	byte	"0"
284be     00          | 	byte	0
284bf                 | LR__4501
284bf     39          | 	byte	"9"
284c0     00          | 	byte	0
284c1                 | LR__4502
284c1     2E          | 	byte	"."
284c2     00          | 	byte	0
284c3                 | LR__4503
284c3     24          | 	byte	"$"
284c4     00          | 	byte	0
284c5                 | LR__4504
284c5     25          | 	byte	"%"
284c6     00          | 	byte	0
284c7                 | LR__4505
284c7     2D          | 	byte	"-"
284c8     00          | 	byte	0
284c9                 | LR__4506
284c9     2E          | 	byte	"."
284ca     00          | 	byte	0
284cb                 | LR__4507
284cb     30          | 	byte	"0"
284cc     00          | 	byte	0
284cd                 | LR__4508
284cd     39          | 	byte	"9"
284ce     00          | 	byte	0
284cf                 | LR__4509
284cf     5F          | 	byte	"_"
284d0     00          | 	byte	0
284d1                 | LR__4510
284d1     2E          | 	byte	"."
284d2     00          | 	byte	0
284d3                 | LR__4511
284d3     45          | 	byte	"E"
284d4     00          | 	byte	0
284d5                 | LR__4512
284d5     65          | 	byte	"e"
284d6     00          | 	byte	0
284d7                 | LR__4513
284d7     2D          | 	byte	"-"
284d8     00          | 	byte	0
284d9                 | LR__4514
284d9     2D          | 	byte	"-"
284da     00          | 	byte	0
284db                 | LR__4515
284db     65          | 	byte	"e"
284dc     00          | 	byte	0
284dd                 | LR__4516
284dd     2E          | 	byte	"."
284de     00          | 	byte	0
284df                 | LR__4517
284df     45          | 	byte	"E"
284e0     00          | 	byte	0
284e1                 | LR__4518
284e1     65          | 	byte	"e"
284e2     00          | 	byte	0
284e3                 | LR__4519
284e3     30          | 	byte	"0"
284e4     00          | 	byte	0
284e5                 | LR__4520
284e5     39          | 	byte	"9"
284e6     00          | 	byte	0
284e7                 | LR__4521
284e7     24          | 	byte	"$"
284e8     00          | 	byte	0
284e9                 | LR__4522
284e9     25          | 	byte	"%"
284ea     00          | 	byte	0
284eb                 | LR__4523
284eb     2D          | 	byte	"-"
284ec     00          | 	byte	0
284ed                 | LR__4524
284ed     30          | 	byte	"0"
284ee     00          | 	byte	0
284ef                 | LR__4525
284ef     39          | 	byte	"9"
284f0     00          | 	byte	0
284f1                 | LR__4526
284f1     5F          | 	byte	"_"
284f2     00          | 	byte	0
284f3                 | LR__4527
284f3     30          | 	byte	"0"
284f4     00          | 	byte	0
284f5                 | LR__4528
284f5     39          | 	byte	"9"
284f6     00          | 	byte	0
284f7                 | LR__4529
284f7     5F          | 	byte	"_"
284f8     00          | 	byte	0
284f9                 | LR__4530
284f9     22          | 	byte	34
284fa     00          | 	byte	0
284fb                 | LR__4531
284fb     22          | 	byte	34
284fc     00          | 	byte	0
284fd                 | LR__4532
284fd     28          | 	byte	"("
284fe     00          | 	byte	0
284ff                 | LR__4533
284ff     61 73       | 	byte	"as"
28501     00          | 	byte	0
28502                 | LR__4534
28502     61 73       | 	byte	"as"
28504     00          | 	byte	0
28505                 | LR__4535
28505     2C          | 	byte	","
28506     00          | 	byte	0
28507                 | LR__4536
28507     29          | 	byte	")"
28508     00          | 	byte	0
28509                 | LR__4537
28509     29          | 	byte	")"
2850a     00          | 	byte	0
2850b                 | LR__4538
2850b     61 73       | 	byte	"as"
2850d     00          | 	byte	0
2850e                 | LR__4539
2850e     62 79 74 65 | 	byte	"byte"
28512     00          | 	byte	0
28513                 | LR__4540
28513     75 62 79 74 
28517     65          | 	byte	"ubyte"
28518     00          | 	byte	0
28519                 | LR__4541
28519     73 68 6F 72 
2851d     74          | 	byte	"short"
2851e     00          | 	byte	0
2851f                 | LR__4542
2851f     75 73 68 6F 
28523     72 74       | 	byte	"ushort"
28525     00          | 	byte	0
28526                 | LR__4543
28526     6C 6F 6E 67 | 	byte	"long"
2852a     00          | 	byte	0
2852b                 | LR__4544
2852b     69 6E 74 65 
2852f     67 65 72    | 	byte	"integer"
28532     00          | 	byte	0
28533                 | LR__4545
28533     75 6C 6F 6E 
28537     67          | 	byte	"ulong"
28538     00          | 	byte	0
28539                 | LR__4546
28539     69 6E 74 36 
2853d     34          | 	byte	"int64"
2853e     00          | 	byte	0
2853f                 | LR__4547
2853f     75 69 6E 74 
28543     36 34       | 	byte	"uint64"
28545     00          | 	byte	0
28546                 | LR__4548
28546     73 69 6E 67 
2854a     6C 65       | 	byte	"single"
2854c     00          | 	byte	0
2854d                 | LR__4549
2854d     64 6F 75 62 
28551     6C 65       | 	byte	"double"
28553     00          | 	byte	0
28554                 | LR__4550
28554     73 74 72 69 
28558     6E 67       | 	byte	"string"
2855a     00          | 	byte	0
2855b                 | LR__4551
2855b     74 6F       | 	byte	"to"
2855d     00          | 	byte	0
2855e                 | LR__4552
2855e     73 74 65 70 | 	byte	"step"
28562     00          | 	byte	0
28563                 | LR__4553
28563     73 2E       | 	byte	"s."
28565     00          | 	byte	0
28566                 | LR__4554
28566     57 65 20 68 
2856a     61 76 65 20 
2856e     61 20 73 6C 
28572     6F 77 20 67 
28576     6F 74 6F 2C 
2857a     20 74 6F 64 
2857e     6F 20 20    | 	byte	"We have a slow goto, todo  "
28581     00          | 	byte	0
28582                 | LR__4555
28582     6E 6F 6E 61 
28586     6D 65 2E 62 
2858a     61 73       | 	byte	"noname.bas"
2858c     00          | 	byte	0
2858d                 | LR__4556
2858d                 | 	byte	
2858d     00          | 	byte	0
2858e                 | LR__4557
2858e     6E 6F 6E 61 
28592     6D 65 2E 62 
28596     61 73       | 	byte	"noname.bas"
28598     00          | 	byte	0
28599                 | LR__4558
28599     2F          | 	byte	"/"
2859a     00          | 	byte	0
2859b                 | LR__4559
2859b                 | 	byte	
2859b     00          | 	byte	0
2859c                 | LR__4560
2859c                 | 	byte	
2859c     00          | 	byte	0
2859d                 | LR__4561
2859d     6E 6F 6E 61 
285a1     6D 65 2E 62 
285a5     61 73       | 	byte	"noname.bas"
285a7     00          | 	byte	0
285a8                 | LR__4562
285a8     2F          | 	byte	"/"
285a9     00          | 	byte	0
285aa                 | LR__4563
285aa     53 79 73 74 
285ae     65 6D 20 65 
285b2     72 72 6F 72 
285b6     20          | 	byte	"System error "
285b7     00          | 	byte	0
285b8                 | LR__4564
285b8     3A 20       | 	byte	": "
285ba     00          | 	byte	0
285bb                 | LR__4565
285bb     2F          | 	byte	"/"
285bc     00          | 	byte	0
285bd                 | LR__4566
285bd     30          | 	byte	"0"
285be     00          | 	byte	0
285bf                 | LR__4567
285bf     39          | 	byte	"9"
285c0     00          | 	byte	0
285c1                 | LR__4568
285c1                 | 	byte	
285c1     00          | 	byte	0
285c2                 | LR__4569
285c2     53 74 6F 70 
285c6     70 65 64 20 
285ca     61 74 20 6C 
285ce     69 6E 65 20 | 	byte	"Stopped at line "
285d2     00          | 	byte	0
285d3                 | LR__4570
285d3                 | 	byte	
285d3     00          | 	byte	0
285d4                 | LR__4571
285d4                 | 	byte	
285d4     00          | 	byte	0
285d5                 | LR__4572
285d5     2F 73 64 2F 
285d9     6D 65 64 69 
285dd     61 2F 68 2F | 	byte	"/sd/media/h/"
285e1     00          | 	byte	0
285e2                 | LR__4573
285e2     53 79 73 74 
285e6     65 6D 20 65 
285ea     72 72 6F 72 
285ee     20          | 	byte	"System error "
285ef     00          | 	byte	0
285f0                 | LR__4574
285f0     3A 20       | 	byte	": "
285f2     00          | 	byte	0
285f3                 | LR__4575
285f3                 | 	byte	
285f3     00          | 	byte	0
285f4                 | LR__4576
285f4                 | 	byte	
285f4     00          | 	byte	0
285f5                 | LR__4577
285f5     2F 73 64 2F 
285f9     6D 65 64 69 
285fd     61 2F 73 2F | 	byte	"/sd/media/s/"
28601     00          | 	byte	0
28602                 | LR__4578
28602     53 79 73 74 
28606     65 6D 20 65 
2860a     72 72 6F 72 
2860e     20          | 	byte	"System error "
2860f     00          | 	byte	0
28610                 | LR__4579
28610     3A 20       | 	byte	": "
28612     00          | 	byte	0
28613                 | LR__4580
28613     45 72 72 6F 
28617     72 20       | 	byte	"Error "
28619     00          | 	byte	0
2861a                 | LR__4581
2861a     3A 20       | 	byte	": "
2861c     00          | 	byte	0
2861d                 | LR__4582
2861d                 | 	byte	
2861d     00          | 	byte	0
2861e                 | LR__4583
2861e     72 6E 64 3A 
28622     20          | 	byte	"rnd: "
28623     00          | 	byte	0
28624                 | LR__4584
28624     72 6E 64 3A 
28628     20          | 	byte	"rnd: "
28629     00          | 	byte	0
2862a                 | LR__4585
2862a     73 69 6E 3A 
2862e     20          | 	byte	"sin: "
2862f     00          | 	byte	0
28630                 | LR__4586
28630     63 6F 73 3A 
28634     20          | 	byte	"cos: "
28635     00          | 	byte	0
28636                 | LR__4587
28636     74 61 6E 3A 
2863a     20          | 	byte	"tan: "
2863b     00          | 	byte	0
2863c                 | LR__4588
2863c     61 73 69 6E 
28640     3A 20       | 	byte	"asin: "
28642     00          | 	byte	0
28643                 | LR__4589
28643     61 63 6F 73 
28647     3A 20       | 	byte	"acos: "
28649     00          | 	byte	0
2864a                 | LR__4590
2864a     61 74 6E 3A 
2864e     20          | 	byte	"atn: "
2864f     00          | 	byte	0
28650                 | LR__4591
28650     73 71 72 3A 
28654     20          | 	byte	"sqr: "
28655     00          | 	byte	0
28656                 | LR__4592
28656     73 74 69 63 
2865a     6B 3A 20    | 	byte	"stick: "
2865d     00          | 	byte	0
2865e                 | LR__4593
2865e     73 74 72 69 
28662     67 3A 20    | 	byte	"strig: "
28665     00          | 	byte	0
28666                 | LR__4594
28666     67 65 74 70 
2866a     69 78 65 6C 
2866e     3A 20       | 	byte	"getpixel: "
28670     00          | 	byte	0
28671                 | LR__4595
28671                 | 	byte	
28671     00          | 	byte	0
28672                 | LR__4596
28672     2F 73 64 2F 
28676     62 61 73    | 	byte	"/sd/bas"
28679     00          | 	byte	0
2867a                 | LR__4597
2867a     57 6F 72 6B 
2867e     69 6E 67 20 
28682     64 69 72 65 
28686     63 74 6F 72 
2868a     79 3A 20    | 	byte	"Working directory: "
2868d     00          | 	byte	0
2868e                 | LR__4598
2868e     2A          | 	byte	"*"
2868f     00          | 	byte	0
28690                 | LR__4599
28690                 | 	byte	
28690     00          | 	byte	0
28691                 | LR__4600
28691     5B 64 69 72 
28695     5D 20       | 	byte	"[dir] "
28697     00          | 	byte	0
28698                 | LR__4601
28698     2A          | 	byte	"*"
28699     00          | 	byte	0
2869a                 | LR__4602
2869a                 | 	byte	
2869a     00          | 	byte	0
2869b                 | LR__4603
2869b     2D 2D 2D 2D 
2869f     2D 6D 6F 72 
286a3     65 2C 20 70 
286a7     72 65 73 73 
286ab     20 61 6E 79 
286af     20 6B 65 79 | 	byte	"-----more, press any key"
286b3     00          | 	byte	0
286b4                 | LR__4604
286b4     20 20 20 20 
      ...             
286cc     20 20 20 20 
286d0     20          | 	byte	"                             "
286d1     00          | 	byte	0
286d2                 | LR__4605
286d2     2F          | 	byte	"/"
286d3     00          | 	byte	0
286d4                 | LR__4606
286d4     2F 73 64 2F 
286d8     62 69 6E 2F | 	byte	"/sd/bin/"
286dc     00          | 	byte	0
286dd                 | LR__4607
286dd     53 79 73 74 
286e1     65 6D 20 65 
286e5     72 72 6F 72 
286e9     20          | 	byte	"System error "
286ea     00          | 	byte	0
286eb                 | LR__4608
286eb     3A 20       | 	byte	": "
286ed     00          | 	byte	0
286ee                 | LR__4609
286ee                 | 	byte	
286ee     00          | 	byte	0
286ef                 | LR__4610
286ef     45 78 70 65 
286f3     63 74 65 64 
286f7     20 6E 75 6D 
286fb     62 65 72 2C 
286ff     20 67 6F 74 
28703     20 73 6F 6D 
28707     65 74 68 69 
2870b     6E 67 20 65 
2870f     6C 73 65 2E | 	byte	"Expected number, got something else."
28713     00          | 	byte	0
28714                 | LR__4611
28714     43 61 6E 6E 
28718     6F 74 20 61 
2871c     64 64 20 61 
28720     20 6E 75 6D 
28724     62 65 72 20 
28728     74 6F 20 61 
2872c     20 73 74 72 
28730     69 6E 67 2E | 	byte	"Cannot add a number to a string."
28734     00          | 	byte	0
28735                 | LR__4612
28735     43 61 6E 6E 
28739     6F 74 20 73 
2873d     75 62 73 74 
28741     72 61 63 74 
28745     20 73 74 72 
28749     69 6E 67 73 
2874d     2E          | 	byte	"Cannot substract strings."
2874e     00          | 	byte	0
2874f                 | LR__4613
2874f     55 6E 6B 6E 
28753     6F 77 6E 20 
28757     65 72 72 6F 
2875b     72 20 77 68 
2875f     69 6C 65 20 
28763     61 64 64 69 
28767     6E 67 2E    | 	byte	"Unknown error while adding."
2876a     00          | 	byte	0
2876b                 | LR__4614
2876b     55 6E 6B 6E 
2876f     6F 77 6E 20 
28773     65 72 72 6F 
28777     72 20 77 68 
2877b     69 6C 65 20 
2877f     73 75 62 73 
28783     74 72 61 63 
28787     74 69 6E 67 
2878b     2E          | 	byte	"Unknown error while substracting."
2878c     00          | 	byte	0
2878d                 | LR__4615
2878d     43 61 6E 6E 
28791     6F 74 20 64 
28795     6F 20 6C 6F 
28799     67 69 63 20 
2879d     6F 70 65 72 
287a1     61 74 69 6F 
287a5     6E 20 6F 6E 
287a9     20 73 74 72 
287ad     69 6E 67 20 
287b1     6F 72 20 66 
287b5     6C 6F 61 74 
287b9     2E          | 	byte	"Cannot do logic operation on string or float."
287ba     00          | 	byte	0
287bb                 | LR__4616
287bb     55 6E 6B 6E 
287bf     6F 77 6E 20 
287c3     65 72 72 6F 
287c7     72 20 77 68 
287cb     69 6C 65 20 
287cf     64 6F 69 6E 
287d3     67 20 6C 6F 
287d7     67 69 63 20 
287db     6F 70 65 72 
287df     61 74 69 6F 
287e3     6E 2E       | 	byte	"Unknown error while doing logic operation."
287e5     00          | 	byte	0
287e6                 | LR__4617
287e6     43 61 6E 6E 
287ea     6F 74 20 6D 
287ee     75 6C 74 69 
287f2     70 6C 79 20 
287f6     73 74 72 69 
287fa     6E 67 73 2E | 	byte	"Cannot multiply strings."
287fe     00          | 	byte	0
287ff                 | LR__4618
287ff     55 6E 6B 6E 
28803     6F 77 6E 20 
28807     65 72 72 6F 
2880b     72 20 77 68 
2880f     69 6C 65 20 
28813     6D 75 6C 74 
28817     69 70 6C 79 
2881b     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2881f     00          | 	byte	0
28820                 | LR__4619
28820     43 61 6E 6E 
28824     6F 74 20 64 
28828     69 76 69 64 
2882c     65 20 73 74 
28830     72 69 6E 67 
28834     73 2E       | 	byte	"Cannot divide strings."
28836     00          | 	byte	0
28837                 | LR__4620
28837     55 6E 6B 6E 
2883b     6F 77 6E 20 
2883f     65 72 72 6F 
28843     72 20 77 68 
28847     69 6C 65 20 
2884b     64 69 76 69 
2884f     64 69 6E 67 
28853     2E          | 	byte	"Unknown error while dividing."
28854     00          | 	byte	0
28855                 | LR__4621
28855     43 61 6E 6E 
28859     6F 74 20 63 
2885d     6F 6D 70 75 
28861     74 65 20 61 
28865     20 70 6F 77 
28869     65 72 20 6F 
2886d     66 20 61 20 
28871     73 74 72 69 
28875     6E 67 2E    | 	byte	"Cannot compute a power of a string."
28878     00          | 	byte	0
28879                 | LR__4622
28879     55 6E 6B 6E 
2887d     6F 77 6E 20 
28881     65 72 72 6F 
28885     72 20 77 68 
28889     69 6C 65 20 
2888d     63 6F 6D 70 
28891     75 74 69 6E 
28895     67 20 61 20 
28899     70 6F 77 65 
2889d     72 2E       | 	byte	"Unknown error while computing a power."
2889f     00          | 	byte	0
288a0                 | LR__4623
288a0     52 69 67 68 
288a4     74 20 70 61 
288a8     72 65 6E 74 
288ac     68 65 73 69 
288b0     73 20 65 78 
288b4     70 65 63 74 
288b8     65 64 2E    | 	byte	"Right parenthesis expected."
288bb     00          | 	byte	0
288bc                 | LR__4624
288bc     45 78 70 65 
288c0     63 74 65 64 
288c4     20 73 74 72 
288c8     69 6E 67 2E | 	byte	"Expected string."
288cc     00          | 	byte	0
288cd                 | LR__4625
288cd     45 78 70 65 
288d1     63 74 65 64 
288d5     20 66 6C 6F 
288d9     61 74 2E    | 	byte	"Expected float."
288dc     00          | 	byte	0
288dd                 | LR__4626
288dd     45 78 70 65 
288e1     63 74 65 64 
288e5     20 75 6E 73 
288e9     69 67 6E 65 
288ed     64 20 69 6E 
288f1     74 65 67 65 
288f5     72 2E       | 	byte	"Expected unsigned integer."
288f7     00          | 	byte	0
288f8                 | LR__4627
288f8     45 78 70 65 
288fc     63 74 65 64 
28900     20 69 6E 74 
28904     65 67 65 72 
28908     2E          | 	byte	"Expected integer."
28909     00          | 	byte	0
2890a                 | LR__4628
2890a     4E 6F 20 6D 
2890e     6F 72 65 20 
28912     76 61 72 69 
28916     61 62 6C 65 
2891a     20 73 6C 6F 
2891e     74 73 2E    | 	byte	"No more variable slots."
28921     00          | 	byte	0
28922                 | LR__4629
28922     56 61 72 69 
28926     61 62 6C 65 
2892a     20 6E 6F 74 
2892e     20 66 6F 75 
28932     6E 64 2E    | 	byte	"Variable not found."
28935     00          | 	byte	0
28936                 | LR__4630
28936     43 6F 6D 6D 
2893a     61 20 65 78 
2893e     70 65 63 74 
28942     65 64 2E    | 	byte	"Comma expected."
28945     00          | 	byte	0
28946                 | LR__4631
28946     43 6F 6D 6D 
2894a     61 20 6F 72 
2894e     20 73 65 6D 
28952     69 63 6F 6C 
28956     6F 6E 20 65 
2895a     78 70 65 63 
2895e     74 65 64 2E | 	byte	"Comma or semicolon expected."
28962     00          | 	byte	0
28963                 | LR__4632
28963     55 6E 6B 6E 
28967     6F 77 6E 20 
2896b     63 6F 6D 6D 
2896f     61 6E 64 2E | 	byte	"Unknown command."
28973     00          | 	byte	0
28974                 | LR__4633
28974     53 74 61 63 
28978     6B 20 75 6E 
2897c     64 65 72 66 
28980     6C 6F 77 2E | 	byte	"Stack underflow."
28984     00          | 	byte	0
28985                 | LR__4634
28985     43 61 6E 6E 
28989     6F 74 20 65 
2898d     78 65 63 75 
28991     74 65 20 67 
28995     6F 74 6F 20 
28999     69 6E 20 74 
2899d     68 65 20 69 
289a1     6D 6D 65 64 
289a5     69 61 74 65 
289a9     20 6D 6F 64 
289ad     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
289af     00          | 	byte	0
289b0                 | LR__4635
289b0     43 61 6E 6E 
289b4     6F 74 20 6C 
289b8     6F 61 64 20 
289bc     66 72 6F 6D 
289c0     20 74 68 69 
289c4     73 20 66 69 
289c8     6C 65 2E    | 	byte	"Cannot load from this file."
289cb     00          | 	byte	0
289cc                 | LR__4636
289cc     54 68 65 20 
289d0     70 72 6F 67 
289d4     72 61 6D 20 
289d8     69 73 20 65 
289dc     6D 70 74 79 
289e0     2E          | 	byte	"The program is empty."
289e1     00          | 	byte	0
289e2                 | LR__4637
289e2     49 66 20 61 
289e6     66 74 65 72 
289ea     20 69 66 2E | 	byte	"If after if."
289ee     00          | 	byte	0
289ef                 | LR__4638
289ef     45 6D 70 74 
289f3     79 20 65 78 
289f7     70 72 65 73 
289fb     73 69 6F 6E 
289ff     2E          | 	byte	"Empty expression."
28a00     00          | 	byte	0
28a01                 | LR__4639
28a01     53 74 72 69 
28a05     6E 67 20 65 
28a09     78 70 65 63 
28a0d     74 65 64 2E | 	byte	"String expected."
28a11     00          | 	byte	0
28a12                 | LR__4640
28a12     49 6E 74 65 
28a16     72 70 72 65 
28a1a     74 65 72 20 
28a1e     69 6E 74 65 
28a22     72 6E 61 6C 
28a26     20 65 72 72 
28a2a     6F 72 2E    | 	byte	"Interpreter internal error."
28a2d     00          | 	byte	0
28a2e                 | LR__4641
28a2e     45 78 70 65 
28a32     63 74 65 64 
28a36     20 61 73 73 
28a3a     69 67 6E 2E | 	byte	"Expected assign."
28a3e     00          | 	byte	0
28a3f                 | LR__4642
28a3f     45 78 70 65 
28a43     63 74 65 64 
28a47     20 27 74 6F 
28a4b     27 2E       | 	byte	"Expected 'to'."
28a4d     00          | 	byte	0
28a4e                 | LR__4643
28a4e     45 78 70 65 
28a52     63 74 65 64 
28a56     20 69 6E 74 
28a5a     65 67 65 72 
28a5e     20 76 61 72 
28a62     69 61 62 6C 
28a66     65 2E       | 	byte	"Expected integer variable."
28a68     00          | 	byte	0
28a69                 | LR__4644
28a69     55 6E 69 6E 
28a6d     69 74 69 61 
28a71     6C 69 7A 65 
28a75     64 20 76 61 
28a79     72 69 61 62 
28a7d     6C 65 20 69 
28a81     6E 20 27 6E 
28a85     65 78 74 27 
28a89     2C 20 75 73 
28a8d     65 20 27 66 
28a91     6F 72 27 20 
28a95     62 65 66 6F 
28a99     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
28a9c     00          | 	byte	0
28a9d                 | LR__4645
28a9d     4E 6F 20 6D 
28aa1     6F 72 65 20 
28aa5     73 6C 6F 74 
28aa9     73 20 66 6F 
28aad     72 20 27 66 
28ab1     6F 72 27 2E | 	byte	"No more slots for 'for'."
28ab5     00          | 	byte	0
28ab6                 | LR__4646
28ab6     27 4E 65 78 
28aba     74 27 20 64 
28abe     6F 65 73 6E 
28ac2     27 74 20 6D 
28ac6     61 74 63 68 
28aca     20 27 66 6F 
28ace     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
28ad1     00          | 	byte	0
28ad2                 | LR__4647
28ad2     27 47 6F 74 
28ad6     6F 27 20 74 
28ada     61 72 67 65 
28ade     74 20 6C 69 
28ae2     6E 65 20 6E 
28ae6     6F 74 20 66 
28aea     6F 75 6E 64 
28aee     2E          | 	byte	"'Goto' target line not found."
28aef     00          | 	byte	0
28af0                 | LR__4648
28af0     42 61 64 20 
28af4     6E 75 6D 62 
28af8     65 72 20 6F 
28afc     66 20 70 61 
28b00     72 61 6D 65 
28b04     74 65 72 73 | 	byte	"Bad number of parameters"
28b08     00          | 	byte	0
28b09                 | LR__4649
28b09     46 75 6E 63 
28b0d     74 69 6F 6E 
28b11     20 75 6E 64 
28b15     65 66 69 6E 
28b19     65 64 20 66 
28b1d     6F 72 20 73 
28b21     74 72 69 6E 
28b25     67 73       | 	byte	"Function undefined for strings"
28b27     00          | 	byte	0
28b28                 | LR__4650
28b28     42 61 64 20 
28b2c     70 61 72 61 
28b30     6D 65 74 65 
28b34     72 2E       | 	byte	"Bad parameter."
28b36     00          | 	byte	0
28b37                 | LR__4651
28b37     43 61 6E 6E 
28b3b     6F 74 20 64 
28b3f     65 63 6C 61 
28b43     72 65 20 61 
28b47     6E 20 61 72 
28b4b     72 61 79 3A 
28b4f     20 74 68 65 
28b53     20 76 61 72 
28b57     69 61 62 6C 
28b5b     65 20 65 78 
28b5f     69 73 74 73 
28b63     2E          | 	byte	"Cannot declare an array: the variable exists."
28b64     00          | 	byte	0
28b65                 | LR__4652
28b65     45 78 70 65 
28b69     63 74 65 64 
28b6d     20 27 28 27 
28b71     2E          | 	byte	"Expected '('."
28b72     00          | 	byte	0
28b73                 | LR__4653
28b73     45 78 70 65 
28b77     63 74 65 64 
28b7b     20 27 29 27 
28b7f     20 6F 72 20 
28b83     27 2C 27 2E | 	byte	"Expected ')' or ','."
28b87     00          | 	byte	0
28b88                 | LR__4654
28b88     4E 6F 20 6D 
28b8c     6F 72 65 20 
28b90     74 68 61 6E 
28b94     20 33 20 64 
28b98     69 6D 65 6E 
28b9c     73 69 6F 6E 
28ba0     73 20 73 75 
28ba4     70 70 6F 72 
28ba8     74 65 64    | 	byte	"No more than 3 dimensions supported"
28bab     00          | 	byte	0
28bac                 | LR__4655
28bac     56 61 72 69 
28bb0     61 62 6C 65 
28bb4     20 6E 61 6D 
28bb8     65 20 65 78 
28bbc     70 65 63 74 
28bc0     65 64       | 	byte	"Variable name expected"
28bc2     00          | 	byte	0
28bc3                 | LR__4656
28bc3     54 79 70 65 
28bc7     20 6E 61 6D 
28bcb     65 20 65 78 
28bcf     70 65 63 74 
28bd3     65 64       | 	byte	"Type name expected"
28bd5     00          | 	byte	0
28bd6                 | LR__4657
28bd6     54 79 70 65 
28bda     20 6E 6F 74 
28bde     20 73 75 70 
28be2     70 6F 72 74 
28be6     65 64 20 79 
28bea     65 74       | 	byte	"Type not supported yet"
28bec     00          | 	byte	0
28bed                 | LR__4658
28bed     45 72 72 6F 
28bf1     72 20       | 	byte	"Error "
28bf3     00          | 	byte	0
28bf4                 | LR__4659
28bf4     3A 20       | 	byte	": "
28bf6     00          | 	byte	0
28bf7                 | LR__4660
28bf7     2F 73 64    | 	byte	"/sd"
28bfa     00          | 	byte	0
28bfb                 | LR__4661
28bfb     2F 73 64 2F 
28bff     62 61 73    | 	byte	"/sd/bas"
28c02     00          | 	byte	0
28c03                 | LR__4662
28c03     2F 73 64 2F 
28c07     62 61 73    | 	byte	"/sd/bas"
28c0a     00          | 	byte	0
28c0b                 | LR__4663
28c0b     20 42 41 53 
28c0f     49 43 20 62 
28c13     79 74 65 73 
28c17     20 66 72 65 
28c1b     65          | 	byte	" BASIC bytes free"
28c1c     00          | 	byte	0
28c1d                 | LR__4664
28c1d     52 65 61 64 
28c21     79          | 	byte	"Ready"
28c22     00          | 	byte	0
28c23                 | LR__4665
28c23     20          | 	byte	" "
28c24     00          | 	byte	0
28c25                 | LR__4666
28c25     20          | 	byte	" "
28c26     00          | 	byte	0
28c27                 | LR__4667
28c27                 | 	byte	
28c27     00          | 	byte	0
28c28                 | LR__4668
28c28                 | 	byte	
28c28     00          | 	byte	0
28c29     00 00 00    | 	alignl
28c2c                 | _dat_
28c2c     00 00 00 00 
28c30     00 00 00 00 
28c34     00 00 00 00 
28c38     00 00 00 00 | 	byte	$00[16]
28c3c     61 41 17 0E 
28c40     62 42 00 00 
28c44     63 43 19 10 
28c48     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
28c4c     65 45 18 0F 
28c50     66 46 00 00 
28c54     67 47 00 00 
28c58     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
28c5c     69 49 00 00 
28c60     6A 4A 00 00 
28c64     6B 4B 00 00 
28c68     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
28c6c     6D 4D 00 00 
28c70     6E 4E 1A 11 
28c74     6F 4F 1E 15 
28c78     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
28c7c     71 51 00 00 
28c80     72 52 00 00 
28c84     73 53 1B 12 
28c88     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
28c8c     75 55 00 00 
28c90     76 56 00 00 
28c94     77 57 00 00 
28c98     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
28c9c     79 59 00 00 
28ca0     7A 5A 1D 14 
28ca4     31 21 04 00 
28ca8     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
28cac     33 23 06 00 
28cb0     34 24 07 00 
28cb4     35 25 08 00 
28cb8     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
28cbc     37 26 0A 00 
28cc0     38 2A 0B 00 
28cc4     39 28 0C 00 
28cc8     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
28ccc     8D 8D 00 00 
28cd0     9B 9B 00 00 
28cd4     88 88 00 00 
28cd8     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
28cdc     20 20 00 00 
28ce0     2D 5F 00 00 
28ce4     3D 2B 00 00 
28ce8     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
28cec     5D 7D 00 00 
28cf0     5C 7C 00 00 
28cf4     23 7E 00 00 
28cf8     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
28cfc     27 22 00 00 
28d00     60 7E 03 00 
28d04     2C 3C 00 00 
28d08     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
28d0c     2F 3F 00 00 
28d10     B9 B9 00 00 
28d14     BA 00 00 00 
28d18     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
28d1c     BC 00 00 00 
28d20     BD 00 00 00 
28d24     BE 00 00 00 
28d28     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
28d2c     C0 00 00 00 
28d30     C1 00 00 00 
28d34     C2 00 00 00 
28d38     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
28d3c     C4 00 00 00 
28d40     C5 00 00 00 
28d44     C6 00 00 00 
28d48     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
28d4c     C8 00 00 00 
28d50     C9 00 00 00 
28d54     CA 00 00 00 
28d58     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
28d5c     7F 7F 00 00 
28d60     CC 00 00 00 
28d64     CD 00 00 00 
28d68     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
28d6c     CF 00 00 00 
28d70     D0 00 00 00 
28d74     D1 00 00 00 
28d78     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
28d7c     2F 2F 00 00 
28d80     2A 2A 00 00 
28d84     2D 2D 00 00 
28d88     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
28d8c     8D 8D 00 00 
28d90     31 31 00 00 
28d94     32 32 00 00 
28d98     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
28d9c     34 34 00 00 
28da0     35 35 00 00 
28da4     36 36 00 00 
28da8     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
28dac     38 38 00 00 
28db0     39 39 00 00 
28db4     30 30 00 00 
28db8     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
28dbc     5C 7C 00 00 
28dc0     00 00 00 00 
28dc4     00 00 00 00 
28dc8     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
28dcc     00 00 00 00 
      ...             
28e24     00 00 00 00 
28e28     00 00 00 00 | 	byte	$00[96]
28e2c     2B 00 A6 F2 
28e30     24 A7 09 80 
28e34     5B 88 4D 89 
28e38     80 88 A5 88 | atari_spl file "atari.spl"
28e3c     6D 88 B8 88 
28e40     80 88 CB 88 
28e44     92 88 A5 88 
28e48     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
28e4c     A5 88 CA 88 
28e50     A6 88 DD 88 
28e54     B8 88 AB 89 
28e58     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
28e5c     C8 AD C6 F1 
28e60     91 06 B6 FF 
28e64     13 00 4A 00 
28e68     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
28e6c     5D 00 5E 00 
28e70     5D 00 5E 00 
28e74     5E 00 5D 00 
28e78     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
28e7c     38 00 83 00 
28e80     25 00 83 00 
28e84     C3 FE D1 04 
28e88     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
28e8c     48 88 38 85 
28e90     41 8A CB 88 
28e94     28 89 B8 88 
28e98     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
28e9c     15 89 03 89 
28ea0     02 89 15 89 
28ea4     16 89 15 89 
28ea8     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
28eac     15 89 3A 89 
28eb0     72 89 E3 89 
28eb4     52 83 AD 97 
28eb8     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
28ebc     0C 02 B6 FF 
28ec0     E1 00 A8 00 
28ec4     F3 00 A8 00 
28ec8     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
28ecc     CE 00 CD 00 
28ed0     CD 00 BA 00 
28ed4     E1 00 BB 00 
28ed8     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
28edc     DF 00 C9 FF 
28ee0     E6 01 B6 06 
28ee4     EE DD 8D 98 
28ee8     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
28eec     97 89 73 89 
28ef0     3B 89 60 89 
28ef4     60 89 60 89 
28ef8     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
28efc     73 89 72 89 
28f00     85 89 73 89 
28f04     AA 89 60 89 
28f08     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
28f0c     E8 8A 18 86 
28f10     92 88 A5 C2 
28f14     E0 00 C3 05 
28f18     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
28f1c     F2 00 64 01 
28f20     06 01 3E 01 
28f24     2B 01 2B 01 
28f28     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
28f2c     2B 01 2A 01 
28f30     2B 01 2B 01 
28f34     2B 01 18 01 
28f38     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
28f3c     39 07 61 F3 
28f40     C0 AF 37 85 
28f44     0F 88 8B 8A 
28f48     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
28f4c     AB 89 D0 89 
28f50     AB 89 D0 89 
28f54     D0 89 CF 89 
28f58     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
28f5c     D0 89 F5 89 
28f60     BD 89 08 8A 
28f64     CF 89 E8 8A 
28f68     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
28f6c     53 B3 0D F8 
28f70     F4 07 38 00 
28f74     63 01 63 01 
28f78     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
28f7c     88 01 88 01 
28f80     76 01 88 01 
28f84     88 01 89 01 
28f88     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
28f8c     75 01 AE 01 
28f90     76 01 88 01 
28f94     4A 00 46 06 
28f98     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
28f9c     08 8A 9A 86 
28fa0     33 8B 08 8A 
28fa4     2D 8A F5 89 
28fa8     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
28fac     2D 8A 2D 8A 
28fb0     2E 8A 1B 8A 
28fb4     40 8A 2D 8A 
28fb8     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
28fbc     2E 8A 79 8A 
28fc0     66 8A C8 8B 
28fc4     72 82 2B 97 
28fc8     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
28fcc     1D 02 05 01 
28fd0     F8 01 C0 01 
28fd4     0B 02 C0 01 
28fd8     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
28fdc     F9 01 D3 01 
28fe0     F8 01 D3 01 
28fe4     F8 01 D2 01 
28fe8     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
28fec     E6 01 2B 01 
28ff0     8E 02 5F 07 
28ff4     F7 E2 ED 9C 
28ff8     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
28ffc     E8 8A 78 8A 
29000     78 8A 65 8A 
29004     8B 8A 78 8A 
29008     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2900c     8B 8A 9D 8A 
29010     9D 8A 8B 8A 
29014     C2 8A 78 8A 
29018     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2901c     70 8C 18 86 
29020     8B 8A 23 C9 
29024     CB 03 C4 05 
29028     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2902c     0B 02 7B 02 
29030     1E 02 55 02 
29034     30 02 43 02 
29038     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2903c     43 02 44 02 
29040     43 02 30 02 
29044     68 02 31 02 
29048     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2904c     07 08 3F F7 
29050     73 B2 13 85 
29054     15 89 ED 8B 
29058     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2905c     B0 8A FB 8A 
29060     D5 8A FA 8A 
29064     E8 8A FB 8A 
29068     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2906c     E8 8A 21 8B 
29070     E7 8A 33 8B 
29074     E8 8A 26 8C 
29078     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
2907c     8D B0 27 F6 
29080     9C 08 AD 01 
29084     7B 02 8D 02 
29088     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
2908c     A1 02 A0 02 
29090     A1 02 A0 02 
29094     A0 02 A0 02 
29098     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
2909c     7B 02 D8 02 
290a0     7B 02 C6 02 
290a4     3E 01 C3 05 
290a8     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
290ac     00 8C 2A 86 
290b0     E0 8C FA 8A 
290b4     6A 8B FB 8A 
290b8     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
290bc     45 8B 45 8B 
290c0     45 8B 6B 8B 
290c4     46 8B 59 8B 
290c8     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
290cc     6B 8B 6B 8B 
290d0     6B 8B 6B 8B 
290d4     7D 8B 7D 8B 
290d8     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
290dc     90 8B 91 8B 
290e0     90 8B 90 8B 
290e4     A3 8B A3 8B 
290e8     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
290ec     B5 8B B6 8B 
290f0     B5 8B B5 8B 
290f4     B6 8B C8 8B 
290f8     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
290fc     C8 8B DA 8B 
29100     DB 8B DB 8B 
29104     DB 8B DC 8B 
29108     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2910c     EE 8B EE 8B 
29110     00 8C 01 8C 
29114     00 8C 01 8C 
29118     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2911c     12 8C 13 8C 
29120     13 8C 26 8C 
29124     26 8C 26 8C 
29128     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2912c     38 8C 38 8C 
29130     38 8C 38 8C 
29134     4B 8C 4B 8C 
29138     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
2913c     5E 8C 5E 8C 
29140     5E 8C 5E 8C 
29144     70 8C 70 8C 
29148     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
2914c     70 8C 83 8C 
29150     83 8C 83 8C 
29154     83 8C 96 8C 
29158     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
2915c     95 8C A9 8C 
29160     A9 8C A8 8C 
29164     A8 8C A8 8C 
29168     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
2916c     BB 8C BB 8C 
29170     BB 8C CE 8C 
29174     CE 8C CE 8C 
29178     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
2917c     E0 8C E1 8C 
29180     E1 8C E0 8C 
29184     F4 8C F2 8C 
29188     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
2918c     05 8D 05 8D 
29190     06 8D 06 8D 
29194     19 8D 19 8D 
29198     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
2919c     18 8D 2B 8D 
291a0     2B 8D 2B 8D 
291a4     2A 8D 3E 8D 
291a8     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
291ac     3E 8D 51 8D 
291b0     50 8D 50 8D 
291b4     50 8D 51 8D 
291b8     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
291bc     63 8D 64 8D 
291c0     76 8D 75 8D 
291c4     75 8D 76 8D 
291c8     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
291cc     88 8D 88 8D 
291d0     89 8D 9B 8D 
291d4     9A 8D 9B 8D 
291d8     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
291dc     AD 8D AE 8D 
291e0     AD 8D AE 8D 
291e4     C1 8D C1 8D 
291e8     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
291ec     D3 8D D3 8D 
291f0     D3 8D D3 8D 
291f4     D3 8D E6 8D 
291f8     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
291fc     E6 8D E6 8D 
29200     F9 8D F9 8D 
29204     F9 8D F8 8D 
29208     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2920c     0B 8E 0B 8E 
29210     1D 8E 1D 8E 
29214     1E 8E 1E 8E 
29218     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2921c     31 8E 31 8E 
29220     31 8E 42 8E 
29224     43 8E 43 8E 
29228     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2922c     56 8E 56 8E 
29230     55 8E 56 8E 
29234     68 8E 69 8E 
29238     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
2923c     69 8E 7B 8E 
29240     7C 8E 7B 8E 
29244     7B 8E 8D 8E 
29248     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
2924c     8D 8E A1 8E 
29250     A0 8E A1 8E 
29254     A1 8E A0 8E 
29258     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
2925c     B3 8E B3 8E 
29260     C6 8E C5 8E 
29264     C6 8E C6 8E 
29268     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
2926c     D8 8E D9 8E 
29270     D8 8E EC 8E 
29274     EB 8E EC 8E 
29278     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
2927c     FE 8E FE 8E 
29280     FE 8E FE 8E 
29284     10 8F 10 8F 
29288     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
2928c     11 8F 23 8F 
29290     24 8F 23 8F 
29294     24 8F 37 8F 
29298     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
2929c     36 8F 36 8F 
292a0     48 8F 49 8F 
292a4     49 8F 49 8F 
292a8     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
292ac     5B 8F 5C 8F 
292b0     5B 8F 6E 8F 
292b4     6E 8F 6E 8F 
292b8     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
292bc     81 8F 81 8F 
292c0     81 8F 81 8F 
292c4     93 8F 93 8F 
292c8     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
292cc     93 8F A6 8F 
292d0     A6 8F A6 8F 
292d4     A6 8F B9 8F 
292d8     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
292dc     B9 8F B9 8F 
292e0     CC 8F CB 8F 
292e4     CB 8F CC 8F 
292e8     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
292ec     DF 8F DE 8F 
292f0     DE 8F F1 8F 
292f4     F1 8F F1 8F 
292f8     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
292fc     03 90 04 90 
29300     04 90 04 90 
29304     16 90 17 90 
29308     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2930c     29 90 28 90 
29310     29 90 28 90 
29314     29 90 3C 90 
29318     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2931c     3C 90 4F 90 
29320     4E 90 4E 90 
29324     4E 90 4E 90 
29328     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2932c     61 90 61 90 
29330     73 90 74 90 
29334     74 90 74 90 
29338     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
2933c     87 90 86 90 
29340     87 90 86 90 
29344     99 90 99 90 
29348     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
2934c     AB 90 AB 90 
29350     AC 90 AB 90 
29354     AB 90 BF 90 
29358     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
2935c     BE 90 D1 90 
29360     D0 90 D1 90 
29364     D1 90 D1 90 
29368     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
2936c     E3 90 E4 90 
29370     F6 90 F6 90 
29374     F6 90 F6 90 
29378     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
2937c     09 91 0A 91 
29380     0A 91 1C 91 
29384     1C 91 1C 91 
29388     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
2938c     2F 91 2E 91 
29390     2F 91 2F 91 
29394     2E 91 41 91 
29398     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
2939c     41 91 53 91 
293a0     54 91 54 91 
293a4     53 91 54 91 
293a8     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
293ac     67 91 67 91 
293b0     79 91 7A 91 
293b4     79 91 78 91 
293b8     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
293bc     8C 91 8B 91 
293c0     8C 91 8C 91 
293c4     9E 91 9E 91 
293c8     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
293cc     B1 91 B1 91 
293d0     B2 91 B1 91 
293d4     B1 91 C4 91 
293d8     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
293dc     C4 91 D6 91 
293e0     D7 91 D7 91 
293e4     D7 91 D6 91 
293e8     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
293ec     EA 91 EA 91 
293f0     EA 91 FC 91 
293f4     FC 91 FB 91 
293f8     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
293fc     0E 92 0F 92 
29400     0F 92 0E 92 
29404     21 92 21 92 
29408     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2940c     21 92 34 92 
29410     33 92 34 92 
29414     34 92 47 92 
29418     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2941c     46 92 47 92 
29420     59 92 59 92 
29424     59 92 59 92 
29428     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2942c     6C 92 6C 92 
29430     6B 92 7E 92 
29434     7E 92 7E 92 
29438     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
2943c     92 92 91 92 
29440     91 92 90 92 
29444     91 92 A4 92 
29448     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2944c     A3 92 B6 92 
29450     B6 92 B7 92 
29454     B7 92 B6 92 
29458     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2945c     CA 92 C9 92 
29460     CA 92 DC 92 
29464     DC 92 DC 92 
29468     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2946c     EF 92 EF 92 
29470     EF 92 EF 92 
29474     01 93 01 93 
29478     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
2947c     15 93 14 93 
29480     14 93 14 93 
29484     14 93 27 93 
29488     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
2948c     27 93 39 93 
29490     3A 93 39 93 
29494     39 93 39 93 
29498     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
2949c     4B 93 4C 93 
294a0     5F 93 5F 93 
294a4     5F 93 5E 93 
294a8     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
294ac     5F 93 84 93 
294b0     4C 93 96 93 
294b4     5F 93 AE 94 
294b8     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
294bc     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
294c0     7A D7 00 80 
294c4     87 8A 48 8F 
294c8     EC 8C 76 8D 
294cc     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
294d0     3C 8D 82 8D 
294d4     42 8D 88 8D 
294d8     8C 8D 8E 8D 
294dc     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
294e0     97 8D DE 8D 
294e4     E1 8D F1 8E 
294e8     D8 8C A3 83 
294ec     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
294f0     65 71 C9 65 
294f4     FC 64 C4 65 
294f8     C1 65 BF 65 
294fc     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
29500     B6 65 B4 65 
29504     B2 65 AE 65 
29508     AC 65 ED 65 
2950c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
29510     5E 65 25 66 
29514     FA 62 23 6B 
29518     B5 6C 61 0A 
2951c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
29520     5D 90 BE 8D 
29524     47 8E C3 8D 
29528     09 8E C9 8D 
2952c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
29530     15 8E 19 8E 
29534     1B 8E 62 8E 
29538     64 8E 68 8E 
2953c     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
29540     B5 8E 4C 90 
29544     FA 84 3C 9D 
29548     98 13 79 6D 
2954c     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
29550     D9 66 50 66 
29554     D4 66 4B 66 
29558     8C 66 46 66 
2955c     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
29560     81 66 3A 66 
29564     7C 66 36 66 
29568     76 66 30 66 
2956c     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
29570     6B 66 88 72 
29574     BF 37 E7 B7 
29578     75 83 8B 8E 
2957c     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
29580     94 8E 96 8E 
29584     DD 8E 9C 8E 
29588     E2 8E A2 8E 
2958c     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
29590     EE 8E AE 8E 
29594     38 8F B5 8E 
29598     3F 8F FD 8E 
2959c     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
295a0     A5 87 1E E3 
295a4     6D 5D FA 71 
295a8     41 64 25 67 
295ac     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
295b0     D9 66 1A 67 
295b4     18 67 15 67 
295b8     12 67 0F 67 
295bc     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
295c0     07 67 C0 66 
295c4     01 67 BC 66 
295c8     B8 66 DE 64 
295cc     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
295d0     43 E5 1F 8B 
295d4     14 8A F1 90 
295d8     1C 8F 63 8F 
295dc     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
295e0     29 8F 6E 8F 
295e4     72 8F 75 8F 
295e8     34 8F BE 8F 
295ec     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
295f0     84 8F 87 8F 
295f4     CC 8F 56 90 
295f8     67 91 49 80 
295fc     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
29600     46 77 A6 66 
29604     E8 66 B0 67 
29608     AD 67 ED 67 
2960c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
29610     A2 67 E3 67 
29614     9D 67 9A 67 
29618     98 67 94 67 
2961c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
29620     49 67 CD 67 
29624     28 65 5F 6E 
29628     82 67 3A 01 
2962c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
29630     C2 91 A9 8F 
29634     EF 8F AE 8F 
29638     F4 8F B5 8F 
2963c     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
29640     01 90 03 90 
29644     07 90 09 90 
29648     0C 90 53 90 
2964c     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
29650     18 90 44 93 
29654     85 84 D6 9D 
29658     87 1F 2F 75 
2965c     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
29660     C4 68 F6 67 
29664     BE 68 F1 67 
29668     76 68 2E 68 
2966c     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
29670     27 68 24 68 
29674     64 68 1E 68 
29678     5F 68 19 68 
2967c     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
29680     DC 68 56 72 
29684     7E 36 C2 B8 
29688     D7 84 73 90 
2968c     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
29690     7B 90 7F 90 
29694     82 90 84 90 
29698     CB 90 8B 90 
2969c     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
296a0     D7 90 96 90 
296a4     20 91 59 90 
296a8     25 91 A2 90 
296ac     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
296b0     D0 89 40 EE 
296b4     12 64 C4 71 
296b8     29 66 0C 69 
296bc     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
296c0     C0 68 02 69 
296c4     FE 68 FB 68 
296c8     F9 68 F6 68 
296cc     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
296d0     EE 68 A8 68 
296d4     2C 69 5F 68 
296d8     E2 68 81 66 
296dc     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
296e0     1E EB A6 8A 
296e4     73 8B 5E 93 
296e8     7B 90 48 91 
296ec     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
296f0     0D 91 11 91 
296f4     14 91 16 91 
296f8     5C 91 1C 91 
296fc     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
29700     68 91 AF 91 
29704     2A 91 B5 91 
29708     75 91 1A 94 
2970c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
29710     70 0E CB 6C 
29714     5D 6E C4 67 
29718     99 69 54 69 
2971c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
29720     D2 69 49 69 
29724     89 69 86 69 
29728     40 69 C4 69 
2972c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
29730     35 69 76 69 
29734     58 67 EB 6D 
29738     E9 6D 89 0F 
2973c     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
29740     33 94 94 91 
29744     D9 91 56 91 
29748     E0 91 9F 91 
2974c     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
29750     EC 91 EE 91 
29754     F1 91 F4 91 
29758     F7 91 3D 92 
2975c     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
29760     46 92 21 94 
29764     11 89 A4 9D 
29768     FD 0E 8F 6C 
2976c     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
29770     28 6A E1 69 
29774     65 6A 1F 6A 
29778     5F 6A 1A 6A 
2977c     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
29780     54 6A 0F 6A 
29784     4F 6A 09 6A 
29788     06 6A 03 6A 
2978c     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
29790     23 68 69 77 
29794     3A 4D 38 CA 
29798     38 86 4E 91 
2979c     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
297a0     64 92 24 92 
297a4     6A 92 2A 92 
297a8     70 92 30 92 
297ac     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
297b0     7B 92 7E 92 
297b4     C5 92 84 92 
297b8     CB 92 8A 92 
297bc     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
297c0     4D 8D F9 E2 
297c4     97 59 FE 74 
297c8     DB 68 6D 6A 
297cc     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
297d0     A8 6A A5 6A 
297d4     A3 6A 9F 6A 
297d8     9D 6A 9B 6A 
297dc     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
297e0     D6 6A 8F 6A 
297e4     CF 6A 46 6A 
297e8     CA 6A E1 67 
297ec     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
297f0     D3 F7 15 92 
297f4     90 8C BF 94 
297f8     A6 92 EB 92 
297fc     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
29800     B1 92 F7 92 
29804     FA 92 FD 92 
29808     00 93 02 93 
2980c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
29810     4F 93 52 93 
29814     54 93 22 94 
29818     5A 93 8F 88 
2981c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
29820     1C 77 07 6C 
29824     E8 69 7A 6B 
29828     34 6B 75 6B 
2982c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
29830     29 6B 26 6B 
29834     24 6B 21 6B 
29838     1D 6B 5E 6B 
2983c     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
29840     12 6B 52 6B 
29844     34 69 34 6E 
29848     BA 73 A4 24 
2984c     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
29850     7A 94 B3 93 
29854     72 93 31 93 
29858     78 93 7A 93 
2985c     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
29860     83 93 86 93 
29864     89 93 D0 93 
29868     D2 93 D5 93 
2986c     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
29870     DD 93 40 96 
29874     30 8B 99 9C 
29878     52 10 94 71 
2987c     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
29880     46 6C 79 6B 
29884     40 6C B7 6B 
29888     F7 6B B1 6B 
2988c     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
29890     EC 6B A5 6B 
29894     A2 6B 9F 6B 
29898     9D 6B 9A 6B 
2989c     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
298a0     C8 6A E4 76 
298a4     20 4B F9 CE 
298a8     2E 8A 1A 92 
298ac     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
298b0     FB 93 BA 93 
298b4     01 94 03 94 
298b8     4A 94 09 94 
298bc     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
298c0     55 94 14 94 
298c4     9E 94 1A 94 
298c8     61 94 20 94 
298cc     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
298d0     3E 87 E5 CD 
298d4     5F 50 6C 78 
298d8     B5 6A 04 6C 
298dc     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
298e0     83 6C 7F 6C 
298e4     7C 6C 36 6C 
298e8     76 6C 74 6C 
298ec     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
298f0     6B 6C 25 6C 
298f4     66 6C 1F 6C 
298f8     1D 6C 41 6A 
298fc     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
29900     BA FA FC 94 
29904     5B 8D 97 96 
29908     3B 94 C5 94 
2990c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
29910     89 94 8C 94 
29914     8F 94 92 94 
29918     94 94 DB 94 
2991c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
29920     E4 94 E7 94 
29924     2D 95 74 95 
29928     C8 96 15 89 
2992c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
29930     CB 75 31 6F 
29934     7E 6B 10 6D 
29938     C9 6C 0A 6D 
2993c     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
29940     BD 6C FF 6C 
29944     FB 6C F9 6C 
29948     B2 6C F3 6C 
2994c     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
29950     A7 6C E8 6C 
29954     0D 6B 85 6F 
29958     C7 74 10 28 
2995c     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
29960     96 96 47 95 
29964     06 95 0A 95 
29968     0C 95 0F 95 
2996c     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
29970     17 95 5E 95 
29974     61 95 63 95 
29978     22 95 AC 95 
2997c     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
29980     72 95 17 98 
29984     59 8E 01 96 
29988     CF FC 5A 68 
2998c     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
29990     96 6D 50 6D 
29994     D5 6D 4A 6D 
29998     8C 6D 89 6D 
2999c     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
299a0     80 6D 3A 6D 
299a4     7A 6D 77 6D 
299a8     75 6D 71 6D 
299ac     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
299b0     18 6C BC 78 
299b4     9A 4F 7E CF 
299b8     1F 89 F1 93 
299bc     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
299c0     D2 95 4E 95 
299c4     D7 95 53 95 
299c8     DD 95 E0 95 
299cc     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
299d0     A5 95 EB 95 
299d4     EE 95 F0 95 
299d8     37 96 B3 95 
299dc     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
299e0     1A 98 D5 8D 
299e4     C5 9F CD 0F 
299e8     0F 71 F3 73 
299ec     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
299f0     D9 6D 5E 6E 
299f4     D3 6D 58 6E 
299f8     12 6E 0F 6E 
299fc     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
29a00     49 6E BF 6D 
29a04     87 6E 76 6D 
29a08     81 6E 11 6B 
29a0c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
29a10     3F 09 44 95 
29a14     E5 8D 3F 99 
29a18     D4 95 A2 96 
29a1c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
29a20     23 96 69 96 
29a24     6B 96 6E 96 
29a28     71 96 74 96 
29a2c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
29a30     BF 96 3C 96 
29a34     C6 96 C8 96 
29a38     A3 98 51 8D 
29a3c     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
29a40     CF 75 29 73 
29a44     90 6C EC 6E 
29a48     62 6E E7 6E 
29a4c     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
29a50     9A 6E 98 6E 
29a54     95 6E 91 6E 
29a58     8E 6E CF 6E 
29a5c     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
29a60     40 6E C3 6E 
29a64     E8 6C 45 6F 
29a68     A5 7B C9 35 
29a6c     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
29a70     2D 98 23 97 
29a74     E1 96 A0 96 
29a78     A4 96 EA 96 
29a7c     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
29a80     AF 96 F4 96 
29a84     F8 96 3E 97 
29a88     FD 96 43 97 
29a8c     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
29a90     08 97 6B 99 
29a94     D6 92 88 91 
29a98     D8 EE 84 66 
29a9c     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
29aa0     2E 6F E7 6E 
29aa4     6C 6F 24 6F 
29aa8     21 6F 1F 6F 
29aac     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
29ab0     17 6F 13 6F 
29ab4     54 6F 0E 6F 
29ab8     0B 6F 4B 6F 
29abc     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
29ac0     27 6D 1C 7B 
29ac4     19 59 9F DB 
29ac8     66 8E BC 94 
29acc     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
29ad0     67 97 26 97 
29ad4     6D 97 2B 97 
29ad8     72 97 32 97 
29adc     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
29ae0     C1 97 7F 97 
29ae4     C6 97 85 97 
29ae8     CB 97 CE 97 
29aec     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
29af0     EC 8A C4 C6 
29af4     68 4C F4 7D 
29af8     63 6E E8 6E 
29afc     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
29b00     ED 6F A7 6F 
29b04     E7 6F A0 6F 
29b08     E1 6F 9B 6F 
29b0c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
29b10     D5 6F 8F 6F 
29b14     CE 6F 45 6F 
29b18     86 6F 68 6D 
29b1c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
29b20     C0 13 AD A2 
29b24     A7 8E 79 99 
29b28     E6 97 E8 97 
29b2c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
29b30     F1 97 F3 97 
29b34     F6 97 F9 97 
29b38     FB 97 FE 97 
29b3c     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
29b40     4A 98 0A 98 
29b44     93 98 0F 98 
29b48     7F 9B BF 8C 
29b4c     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
29b50     91 7B 62 73 
29b54     1A 6E B9 70 
29b58     EB 6F B3 70 
29b5c     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
29b60     25 70 20 70 
29b64     1E 70 1B 70 
29b68     18 70 15 70 
29b6c     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
29b70     0D 70 09 70 
29b74     07 70 03 70 
29b78     01 70 FD 6F 
29b7c     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
29b80     F6 6F F2 6F 
29b84     EF 6F EC 6F 
29b88     2C 70 E6 6F 
29b8c     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
29b90     DD 6F 97 6F 
29b94     D7 6F 84 6E 
29b98     8F 6F 3F 7D 
29b9c     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
29b9e     FF FF FF FF 
29ba2     FF FF       | atarist_spl file "atarist.spl" '512
29ba4     00 00 00 00 
29ba8     00 00 00 00 
29bac     00 00       | 	byte	$00[10]
29bae     17 7F F2 7F 
29bb2     B2 7F 72 7F 
29bb6     33 7F F4 7E 
29bba     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
29bbe     36 7E F5 7D 
29bc2     E9 51 F2 0D 
29bc6     8E 00 F3 FD 
29bca     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
29bce     57 FD 58 FD 
29bd2     5B FD 5C FD 
29bd6     5C FD 60 7D 
29bda     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
29bde     D6 7C 98 7C 
29be2     59 7C 1A 7C 
29be6     DC 7B 9E 7B 
29bea     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
29bee     F3 05 00 FD 
29bf2     41 FB EA FA 
29bf6     D9 FA DB FA 
29bfa     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
29bfe     E4 FA 9B 36 
29c02     F8 7A C0 7A 
29c06     84 7A 45 7A 
29c0a     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
29c0e     8E 79 51 79 
29c12     15 79 D7 78 
29c16     3C 1F EB FF 
29c1a     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
29c1e     6D F8 65 F8 
29c22     68 F8 6D F8 
29c26     70 F8 74 F8 
29c2a     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
29c2e     AB 60 79 60 
29c32     4B 60 1A 60 
29c36     E9 5F B9 5F 
29c3a     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
29c3e     FB 59 B2 0B 
29c42     92 FA 3A F7 
29c46     96 F6 79 F6 
29c4a     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
29c4e     82 F6 86 F6 
29c52     8C F6 DB 5D 
29c56     F1 5E C1 5E 
29c5a     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
29c5e     34 5E 04 5E 
29c62     D6 5D A6 5D 
29c66     78 5D D4 3E 
29c6a     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
29c6e     27 F5 BA F4 
29c72     AB F4 AD F4 
29c76     B2 F4 B8 F4 
29c7a     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
29c7e     26 5D 2B 5D 
29c82     FC 5C CD 5C 
29c86     9F 5C 70 5C 
29c8a     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
29c8e     E5 5B B8 5B 
29c92     DB 24 A7 FC 
29c96     D1 F4 4D F3 
29c9a     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
29c9e     04 F3 0B F3 
29ca2     11 F3 16 F3 
29ca6     DE 18 98 5B 
29caa     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
29cae     4E 4A 29 48 
29cb2     A0 47 6A 47 
29cb6     43 47 20 47 
29cba     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
29cbe     E2 F6 98 F2 
29cc2     C5 F1 A3 F1 
29cc6     A3 F1 A8 F1 
29cca     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
29cce     BF F1 00 3D 
29cd2     EF 46 CD 46 
29cd6     AA 46 86 46 
29cda     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
29cde     1C 46 F9 45 
29ce2     D7 45 EE 43 
29ce6     DE 02 E8 F3 
29cea     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
29cee     61 F0 65 F0 
29cf2     6D F0 74 F0 
29cf6     7C F0 84 F0 
29cfa     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
29cfe     8E 45 6D 45 
29d02     49 45 27 45 
29d06     05 45 E1 44 
29d0a     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
29d0e     F1 2F A9 FB 
29d12     8B F1 9B EF 
29d16     40 EF 36 EF 
29d1a     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
29d1e     4D EF 56 EF 
29d22     5E EF 7B 44 
29d26     8C 44 69 44 
29d2a     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
29d2e     03 44 E1 43 
29d32     C0 43 F5 37 
29d36     69 33 0F 11 
29d3a     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
29d3e     66 EE 37 EE 
29d42     38 EE 40 EE 
29d46     48 EE 51 EE 
29d4a     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
29d4e     7D 32 6A 32 
29d52     51 32 37 32 
29d56     1F 32 05 32 
29d5a     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
29d5e     B9 31 A1 31 
29d62     F1 04 F4 F1 
29d66     50 EE A0 ED 
29d6a     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
29d6e     93 ED 9A ED 
29d72     A4 ED AD ED 
29d76     F4 27 C1 31 
29d7a     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
29d7e     78 31 5F 31 
29d82     46 31 2E 31 
29d86     15 31 FC 30 
29d8a     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
29d8e     C4 EF 4A ED 
29d92     DC EC CB EC 
29d96     D2 EC DA EC 
29d9a     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
29d9e     F9 EC 64 2F 
29da2     0A 31 F1 30 
29da6     D9 30 C0 30 
29daa     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
29dae     78 30 5F 30 
29db2     46 30 38 23 
29db6     A6 F6 19 EE 
29dba     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
29dbe     20 EC 28 EC 
29dc2     32 EC 3C EC 
29dc6     47 EC 51 EC 
29dca     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
29dce     A3 22 93 22 
29dd2     7F 22 6E 22 
29dd6     5D 22 4C 22 
29dda     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
29dde     77 09 76 F1 
29de2     CC EC F0 EB 
29de6     CD EB CE EB 
29dea     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
29dee     ED EB F5 EB 
29df2     3E F6 6B 22 
29df6     5F 22 4E 22 
29dfa     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
29dfe     1B 22 0B 22 
29e02     FA 21 E9 21 
29e06     D8 21 4D FF 
29e0a     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
29e0e     92 EB 7B EB 
29e12     82 EB 8C EB 
29e16     97 EB A1 EB 
29e1a     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
29e1e     15 22 04 22 
29e22     F3 21 E3 21 
29e26     D2 21 C0 21 
29e2a     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
29e2e     8E 21 7D 21 
29e32     9A F8 A4 ED 
29e36     8E EB 2F EB 
29e3a     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
29e3e     37 EB 42 EB 
29e42     4C EB 57 EB 
29e46     B2 17 22 19 
29e4a     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
29e4e     FD 18 EF 18 
29e52     E3 18 D6 18 
29e56     CA 18 BD 18 
29e5a     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
29e5e     60 EC 35 EB 
29e62     01 EB 01 EB 
29e66     0C EB 16 EB 
29e6a     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
29e6e     34 EB D0 18 
29e72     00 19 F4 18 
29e76     E8 18 DA 18 
29e7a     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
29e7e     B6 18 A9 18 
29e82     9D 18 91 05 
29e86     F0 EF CA EB 
29e8a     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
29e8e     E8 EA F2 EA 
29e92     FE EA 07 EB 
29e96     12 EB C2 EF 
29e9a     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
29e9e     D9 18 CD 18 
29ea2     C0 18 B3 18 
29ea6     A7 18 9B 18 
29eaa     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
29eae     B8 FC 30 EE 
29eb2     61 EB DC EA 
29eb6     CD EA D2 EA 
29eba     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
29ebe     F3 EA FE EA 
29ec2     D2 09 D1 18 
29ec6     C3 18 17 18 
29eca     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
29ece     66 11 52 11 
29ed2     49 11 41 11 
29ed6     38 11 E0 F4 
29eda     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
29ede     C9 EA C5 EA 
29ee2     CF EA DB EA 
29ee6     E6 EA EF EA 
29eea     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
29eee     89 11 80 11 
29ef2     78 11 6E 11 
29ef6     67 11 5D 11 
29efa     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
29efe     43 11 32 0D 
29f02     9C F1 07 EC 
29f06     F8 EA CD EA 
29f0a     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
29f0e     E4 EA ED EA 
29f12     F8 EA 02 EB 
29f16     55 11 91 11 
29f1a     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
29f1e     75 11 6E 11 
29f22     64 11 5E 11 
29f26     54 11 4A 11 
29f2a     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
29f2e     A8 EB F1 EA 
29f32     D9 EA DC EA 
29f36     E8 EA F1 EA 
29f3a     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
29f3e     A6 EB 9E 11 
29f42     A0 11 96 11 
29f46     8D 11 85 11 
29f4a     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
29f4e     6A 11 CA 0D 
29f52     36 0B 57 F8 
29f56     6C ED 57 EB 
29f5a     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
29f5e     F4 EA FF EA 
29f62     09 EB 15 EB 
29f66     1E EB 1A FD 
29f6a     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
29f6e     ED 0A E8 0A 
29f72     E2 0A DC 0A 
29f76     D6 0A D1 0A 
29f7a     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
29f7e     F8 F3 BC EC 
29f82     57 EB 1E EB 
29f86     18 EB 24 EB 
29f8a     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
29f8e     42 EB 4D EB 
29f92     08 09 20 0B 
29f96     1A 0B 14 0B 
29f9a     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
29f9e     04 0B FE 0A 
29fa2     F9 0A F2 0A 
29fa6     84 08 3A F1 
29faa     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
29fae     42 EB 42 EB 
29fb2     4E EB 57 EB 
29fb6     62 EB 6B EB 
29fba     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
29fbe     48 0B 43 0B 
29fc2     3C 0B 36 0B 
29fc6     31 0B 2C 0B 
29fca     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
29fce     1B 0B 5C 00 
29fd2     6A EF 1B EC 
29fd6     81 EB 6A EB 
29fda     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
29fde     85 EB 8E EB 
29fe2     99 EB A3 EB 
29fe6     DD 05 E5 05 
29fea     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
29fee     DB 05 D8 05 
29ff2     D5 05 D1 05 
29ff6     D0 05 CB 05 
29ffa     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
29ffe     0C EC BB EB 
2a002     B3 EB BB EB 
2a006     C5 EB D0 EB 
2a00a     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2a00e     E4 F7 2C 06 
2a012     28 06 24 06 
2a016     22 06 1F 06 
2a01a     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2a01e     16 06 14 06 
2a022     0F 06 D0 F3 
2a026     65 ED 2D EC 
2a02a     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2a02e     01 EC 0A EC 
2a032     14 EC 1E EC 
2a036     29 EC FB 03 
2a03a     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2a03e     63 06 60 06 
2a042     5E 06 59 06 
2a046     58 06 54 06 
2a04a     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2a04e     69 F1 21 ED 
2a052     55 EC 33 EC 
2a056     36 EC 40 EC 
2a05a     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2a05e     5C EC 68 EC 
2a062     92 02 D9 02 
2a066     D7 02 D7 02 
2a06a     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2a06e     D1 02 D1 02 
2a072     CE 02 CD 02 
2a076     5D FC 80 EF 
2a07a     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2a07e     83 EC 8A EC 
2a082     93 EC 9C EC 
2a086     A5 EC B1 EC 
2a08a     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2a08e     2B 03 2A 03 
2a092     29 03 26 03 
2a096     25 03 24 03 
2a09a     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2a09e     1F 03 70 F7 
2a0a2     D0 EE 27 ED 
2a0a6     DB EC D4 EC 
2a0aa     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2a0ae     F0 EC FA EC 
2a0b2     02 ED F9 F4 
2a0b6     7B 03 7C 03 
2a0ba     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2a0be     75 03 73 03 
2a0c2     72 03 70 03 
2a0c6     6D 03 6C 03 
2a0ca     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2a0ce     54 ED 22 ED 
2a0d2     22 ED 2C ED 
2a0d6     35 ED 3F ED 
2a0da     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2a0de     14 01 C3 03 
2a0e2     C1 03 C0 03 
2a0e6     5F 01 A5 00 
2a0ea     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2a0ee     7B 00 7C 00 
2a0f2     20 00 85 F1 
2a0f6     2A EE 89 ED 
2a0fa     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
2a0fe     80 ED 87 ED 
2a102     90 ED 9A ED 
2a106     A3 ED 73 00 
2a10a     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2a10e     D0 00 D0 00 
2a112     D0 00 D0 00 
2a116     D0 00 CF 00 
2a11a     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2a11e     80 F0 3D EE 
2a122     D5 ED C7 ED 
2a126     CD ED D6 ED 
2a12a     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2a12e     F2 ED FA ED 
2a132     1D 01 29 01 
2a136     27 01 27 01 
2a13a     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2a13e     25 01 26 01 
2a142     26 01 23 01 
2a146     D0 F7 EC EF 
2a14a     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2a14e     1C EE 24 EE 
2a152     2D EE 37 EE 
2a156     40 EE 47 EE 
2a15a     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2a15e     7D 01 7B 01 
2a162     7A 01 7A 01 
2a166     79 01 78 01 
2a16a     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2a16e     84 FE DE F3 
2a172     6C EF 93 EE 
2a176     72 EE 72 EE 
2a17a     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2a17e     8B EE 95 EE 
2a182     9E EE 15 FC 
2a186     67 FE 67 FE 
2a18a     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2a18e     6B FE 6B FE 
2a192     6D FE 6D FE 
2a196     6D FE 6F FE 
2a19a     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2a19e     DF EE CC EE 
2a1a2     CF EE D9 EE 
2a1a6     E1 EE EA EE 
2a1aa     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2a1ae     5A FE C4 FE 
2a1b2     C3 FE C5 FE 
2a1b6     C6 FE C6 FE 
2a1ba     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2a1be     C8 FE C7 FE 
2a1c2     DA FB 85 F1 
2a1c6     8D EF 31 EF 
2a1ca     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2a1ce     34 EF 3E EF 
2a1d2     46 EF 4F EF 
2a1d6     57 EF 0D FF 
2a1da     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2a1de     1F FF 1F FF 
2a1e2     21 FF 21 FF 
2a1e6     21 FF 21 FF 
2a1ea     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2a1ee     15 F1 BE EF 
2a1f2     84 EF 7E EF 
2a1f6     88 EF 8F EF 
2a1fa     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
2a1fe     A9 EF 06 F2 
2a202     A6 FC AB FC 
2a206     AD FC AE FC 
2a20a     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2a20e     B2 FC B4 FC 
2a212     B6 FC B7 FC 
2a216     8B F4 BD F0 
2a21a     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2a21e     E4 EF EE EF 
2a222     F6 EF FD EF 
2a226     04 F0 0E F0 
2a22a     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2a22e     0B FD 0D FD 
2a232     0F FD 11 FD 
2a236     11 FD 13 FD 
2a23a     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2a23e     17 FD 64 F3 
2a242     CD F0 52 F0 
2a246     41 F0 45 F0 
2a24a     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2a24e     5B F0 64 F0 
2a252     6D F0 FB FC 
2a256     65 FD 68 FD 
2a25a     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2a25e     6C FD 6D FD 
2a262     6F FD 70 FD 
2a266     72 FD B3 FB 
2a26a     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2a26e     A4 F0 99 F0 
2a272     A0 F0 A8 F0 
2a276     AE F0 B9 F0 
2a27a     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2a27e     CB FB DD FB 
2a282     DE FB E0 FB 
2a286     E3 FB E3 FB 
2a28a     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2a28e     E9 FB EC FB 
2a292     62 F7 27 F2 
2a296     2A F1 FF F0 
2a29a     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2a29e     0C F1 13 F1 
2a2a2     1B F1 23 F1 
2a2a6     33 F2 3C FC 
2a2aa     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
2a2ae     42 FC 45 FC 
2a2b2     47 FC 48 FC 
2a2b6     4A FC 4C FC 
2a2ba     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
2a2be     20 F2 77 F1 
2a2c2     5C F1 5F F1 
2a2c6     64 F1 6C F1 
2a2ca     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
2a2ce     83 F1 DC F8 
2a2d2     9A FC 9A FC 
2a2d6     9B FC 9E FC 
2a2da     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
2a2de     A3 FC A4 FC 
2a2e2     A6 FC A9 FC 
2a2e6     90 F4 33 F2 
2a2ea     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
2a2ee     BA F1 BF F1 
2a2f2     C7 F1 CE F1 
2a2f6     D6 F1 DC F1 
2a2fa     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
2a2fe     F3 FC F5 FC 
2a302     FE FB 79 FB 
2a306     62 FB 5F FB 
2a30a     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
2a30e     6F FA AF F3 
2a312     53 F2 12 F2 
2a316     0F F2 15 F2 
2a31a     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
2a31e     2A F2 32 F2 
2a322     38 F2 9A FB 
2a326     AF FB B1 FB 
2a32a     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2a32e     B7 FB B8 FB 
2a332     BA FB BC FB 
2a336     C1 FB 3B F8 
2a33a     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
2a33e     6E F2 6C F2 
2a342     74 F2 7A F2 
2a346     81 F2 87 F2 
2a34a     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
2a34e     06 FC 09 FC 
2a352     0C FC 0E FC 
2a356     0F FC 12 FC 
2a35a     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
2a35e     17 FC 1A FC 
2a362     B2 F6 7B F3 
2a366     DD F2 C5 F2 
2a36a     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
2a36e     D4 F2 DB F2 
2a372     E0 F2 E8 F2 
2a376     28 F8 60 FC 
2a37a     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
2a37e     64 FC 66 FC 
2a382     68 FC 6A FC 
2a386     6D FC 52 FC 
2a38a     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
2a38e     78 F3 24 F3 
2a392     1A F3 1E F3 
2a396     24 F3 2A F3 
2a39a     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
2a39e     3D F3 80 FA 
2a3a2     0C FB 0F FB 
2a3a6     10 FB 14 FB 
2a3aa     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
2a3ae     1B FB 1D FB 
2a3b2     1F FB 92 FA 
2a3b6     DE F4 AE F3 
2a3ba     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
2a3be     79 F3 7E F3 
2a3c2     84 F3 8C F3 
2a3c6     92 F3 97 F3 
2a3ca     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
2a3ce     67 FB 69 FB 
2a3d2     6B FB 6F FB 
2a3d6     71 FB 72 FB 
2a3da     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
2a3de     E3 F8 BA F4 
2a3e2     EE F3 CC F3 
2a3e6     CA F3 CF F3 
2a3ea     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
2a3ee     E2 F3 E8 F3 
2a3f2     ED F3 B7 FB 
2a3f6     BC FB BE FB 
2a3fa     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
2a3fe     C4 FB C6 FB 
2a402     C8 FB C9 FB 
2a406     CC FB 8F F7 
2a40a     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
2a40e     1E F4 1E F4 
2a412     24 F4 2A F4 
2a416     30 F4 38 F4 
2a41a     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
2a41e     AD FA B1 FA 
2a422     B4 FA B6 FA 
2a426     BA FA BB FA 
2a42a     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
2a42e     C2 FA C6 FA 
2a432     55 F6 C6 F4 
2a436     7D F4 72 F4 
2a43a     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
2a43e     83 F4 89 F4 
2a442     8F F4 94 F4 
2a446     66 FA 03 FB 
2a44a     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
2a44e     0A FB 0E FB 
2a452     10 FB 11 FB 
2a456     16 FB 18 FB 
2a45a     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
2a45e     F9 F4 CA F4 
2a462     C5 F4 CB F4 
2a466     D1 F4 D7 F4 
2a46a     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
2a46e     E8 F4 3F FB 
2a472     56 FB 58 FB 
2a476     5A FB 5E FB 
2a47a     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
2a47e     64 FB 64 FB 
2a482     69 FB 99 F9 
2a486     E9 F5 33 F5 
2a48a     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
2a48e     1D F5 22 F5 
2a492     27 F5 2E F5 
2a496     32 F5 37 F5 
2a49a     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
2a49e     BC FA BC FA 
2a4a2     C1 FA C2 FA 
2a4a6     C4 FA C8 FA 
2a4aa     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
2a4ae     F9 F7 DB F5 
2a4b2     78 F5 69 F5 
2a4b6     6A F5 70 F5 
2a4ba     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
2a4be     7F F5 85 F5 
2a4c2     6E F7 06 FB 
2a4c6     0A FB 0B FB 
2a4ca     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
2a4ce     14 FB 15 FB 
2a4d2     18 FB 1B FB 
2a4d6     1D FB 70 F7 
2a4da     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
2a4de     B6 F5 BB F5 
2a4e2     C0 F5 C6 F5 
2a4e6     CA F5 CF F5 
2a4ea     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
2a4ee     54 FB 56 FB 
2a4f2     5A FB 5B FB 
2a4f6     5E FB 5F FB 
2a4fa     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
2a4fe     67 FB 52 FB 
2a502     29 F7 33 F6 
2a506     06 F6 02 F6 
2a50a     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
2a50e     10 F6 16 F6 
2a512     1A F6 1F F6 
2a516     81 FB 9F FB 
2a51a     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
2a51e     51 FB F2 FA 
2a522     E3 FA E3 FA 
2a526     E5 FA E9 FA 
2a52a     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
2a52e     64 F6 4D F6 
2a532     4D F6 53 F6 
2a536     57 F6 5C F6 
2a53a     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
2a53e     6A F6 19 FB 
2a542     1E FB 22 FB 
2a546     23 FB 24 FB 
2a54a     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
2a54e     2C FB 2E FB 
2a552     32 FB F0 F8 
2a556     01 F7 A5 F6 
2a55a     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
2a55e     9F F6 A3 F6 
2a562     A6 F6 AC F6 
2a566     B0 F6 EB F7 
2a56a     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
2a56e     68 FB 6C FB 
2a572     6E FB 71 FB 
2a576     72 FB 74 FB 
2a57a     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
2a57e     71 F8 21 F7 
2a582     E5 F6 DD F6 
2a586     E1 F6 E6 F6 
2a58a     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
2a58e     F5 F6 F7 F6 
2a592     F7 FA AB FB 
2a596     AD FB AF FB 
2a59a     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
2a59e     B6 FB B9 FB 
2a5a2     BB FB BC FB 
2a5a6     21 FB 07 F8 
2a5aa     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
2a5ae     22 F7 26 F7 
2a5b2     2B F7 2E F7 
2a5b6     34 F7 38 F7 
2a5ba     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
2a5be     13 FB 16 FB 
2a5c2     17 FB 1B FB 
2a5c6     1E FB 20 FB 
2a5ca     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
2a5ce     26 FB 77 FA 
2a5d2     F3 F7 7C F7 
2a5d6     67 F7 6A F7 
2a5da     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
2a5de     74 F7 7A F7 
2a5e2     7E F7 82 F7 
2a5e6     53 FB 5A FB 
2a5ea     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
2a5ee     5F FB 63 FB 
2a5f2     65 FB 67 FB 
2a5f6     69 FB 6A FB 
2a5fa     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
2a5fe     B5 F7 A9 F7 
2a602     AD F7 B0 F7 
2a606     B5 F7 B8 F7 
2a60a     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
2a60e     6E F8 99 FB 
2a612     9C FB 9D FB 
2a616     9F FB A4 FB 
2a61a     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
2a61e     A9 FB AB FB 
2a622     AD FB 46 F9 
2a626     26 F8 F0 F7 
2a62a     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
2a62e     F4 F7 F8 F7 
2a632     FB F7 FF F7 
2a636     03 F8 65 FA 
2a63a     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
2a63e     2B FB 2F FB 
2a642     30 FB 32 FB 
2a646     34 FB 38 FB 
2a64a     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
2a64e     E9 F8 4A F8 
2a652     2E F8 2C F8 
2a656     2F F8 36 F8 
2a65a     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
2a65e     41 F8 44 F8 
2a662     4A FB 67 FB 
2a666     68 FB 6B FB 
2a66a     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
2a66e     73 FB 74 FB 
2a672     78 FB 7A FB 
2a676     14 FB E7 F8 
2a67a     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
2a67e     6D F8 70 F8 
2a682     73 F8 78 F8 
2a686     7C F8 80 F8 
2a68a     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
2a68e     A6 FB A7 FB 
2a692     A9 FB AC FB 
2a696     AF FB B1 FB 
2a69a     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2a69e     B7 FB 73 FA 
2a6a2     F8 F8 B4 F8 
2a6a6     A9 F8 AB F8 
2a6aa     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
2a6ae     B4 F8 B8 F8 
2a6b2     BB F8 FA F8 
2a6b6     64 FB 65 FB 
2a6ba     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
2a6be     6D FB 6F FB 
2a6c2     70 FB 74 FB 
2a6c6     77 FB 77 FB 
2a6ca     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
2a6ce     E9 F8 E4 F8 
2a6d2     E8 F8 EB F8 
2a6d6     EE F8 F2 F8 
2a6da     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
2a6de     B5 FA 9F FB 
2a6e2     A1 FB A4 FB 
2a6e6     A5 FB A9 FB 
2a6ea     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
2a6ee     AE FB B1 FB 
2a6f2     B2 FB C7 F9 
2a6f6     39 F9 22 F9 
2a6fa     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
2a6fe     26 F9 2A F9 
2a702     2E F9 32 F9 
2a706     33 F9 BA FB 
2a70a     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
2a70e     DE FB E1 FB 
2a712     E2 FB E4 FB 
2a716     E5 FB E7 FB 
2a71a     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
2a71e     C5 F9 67 F9 
2a722     57 F9 56 F9 
2a726     5B F9 5F F9 
2a72a     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
2a72e     68 F9 6C F9 
2a732     0B FC 11 FC 
2a736     14 FC 15 FC 
2a73a     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
2a73e     B5 FB B5 FB 
2a742     B6 FB B8 FB 
2a746     E9 FA C8 F9 
2a74a     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
2a74e     90 F9 94 F9 
2a752     95 F9 99 F9 
2a756     9D F9 9F F9 
2a75a     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
2a75e     DE FB DF FB 
2a762     E2 FB E4 FB 
2a766     E6 FB E8 FB 
2a76a     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
2a76e     EF FB AC FA 
2a772     E9 F9 C7 F9 
2a776     C3 F9 C8 F9 
2a77a     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
2a77e     D0 F9 D4 F9 
2a782     D6 F9 0E FB 
2a786     11 FC 13 FC 
2a78a     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
2a78e     19 FC 1B FC 
2a792     1D FC 1E FC 
2a796     21 FC 22 FC 
2a79a     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
2a79e     F7 F9 F7 F9 
2a7a2     FB F9 FE F9 
2a7a6     00 FA 03 FA 
2a7aa     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
2a7ae     1B FC 45 FC 
2a7b2     46 FC 48 FC 
2a7b6     4A FC 4B FC 
2a7ba     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
2a7be     52 FC 54 FC 
2a7c2     F3 FB 82 FA 
2a7c6     35 FA 28 FA 
2a7ca     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
2a7ce     31 FA 32 FA 
2a7d2     37 FA 37 FA 
2a7d6     3C FA 00 FC 
2a7da     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
2a7de     09 FC 0B FC 
2a7e2     0F FC 12 FC 
2a7e6     12 FC 15 FC 
2a7ea     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
2a7ee     8D FA 60 FA 
2a7f2     5B FA 5C FA 
2a7f6     60 FA 61 FA 
2a7fa     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
2a7fe     6C FA 6D FA 
2a802     37 FC 3A FC 
2a806     3B FC 3D FC 
2a80a     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
2a80e     43 FC 44 FC 
2a812     45 FC 47 FC 
2a816     51 FB AB FA 
2a81a     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
2a81e     8E FA 91 FA 
2a822     93 FA 95 FA 
2a826     98 FA 9B FA 
2a82a     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
2a82e     68 FC 6A FC 
2a832     6C FC 6E FC 
2a836     70 FC 72 FC 
2a83a     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
2a83e     76 FC 3B FB 
2a842     D0 FA BB FA 
2a846     B9 FA BD FA 
2a84a     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
2a84e     C4 FA C6 FA 
2a852     CA FA 13 FC 
2a856     3A FC 3A FC 
2a85a     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2a85e     41 FC 43 FC 
2a862     44 FC 47 FC 
2a866     48 FC 3C FC 
2a86a     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2a86e     E6 FA E8 FA 
2a872     EB FA EE FA 
2a876     F0 FA F2 FA 
2a87a     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2a87e     61 FC 66 FC 
2a882     68 FC 6B FC 
2a886     6C FC 6E FC 
2a88a     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2a88e     73 FC 75 FC 
2a892     13 FC 3F FB 
2a896     17 FB 12 FB 
2a89a     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2a89e     1A FB 1D FB 
2a8a2     1F FB 20 FB 
2a8a6     23 FB 92 FC 
2a8aa     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2a8ae     96 FC 97 FC 
2a8b2     9A FC 9C FC 
2a8b6     9E FC 9F FC 
2a8ba     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2a8be     5A FB 41 FB 
2a8c2     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2a8c6     01 00 00 00 
2a8ca     00 00 00 00 
2a8ce     00 00 00 00 
2a8d2     00 00 00 00 | mouse  file "mouse2.def"
2a8d6     00 00 00 00 
2a8da     00 00 00 00 
2a8de     00 00 00 00 
2a8e2     00 00 00 00 | 	byte	$00[16]
2a8e6     01 01 00 00 
2a8ea     00 00 00 00 
2a8ee     00 00 00 00 
2a8f2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a8f6     00 00 00 00 
2a8fa     00 00 00 00 
2a8fe     00 00 00 00 
2a902     00 00 00 00 | 	byte	$00[16]
2a906     01 0D 01 00 
2a90a     00 00 00 00 
2a90e     00 00 00 00 
2a912     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a916     00 00 00 00 
2a91a     00 00 00 00 
2a91e     00 00 00 00 
2a922     00 00 00 00 | 	byte	$00[16]
2a926     01 0D 0D 01 
2a92a     00 00 00 00 
2a92e     00 00 00 00 
2a932     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a936     00 00 00 00 
2a93a     00 00 00 00 
2a93e     00 00 00 00 
2a942     00 00 00 00 | 	byte	$00[16]
2a946     01 0D 0D 0D 
2a94a     01 00 00 00 
2a94e     00 00 00 00 
2a952     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a956     00 00 00 00 
2a95a     00 00 00 00 
2a95e     00 00 00 00 
2a962     00 00 00 00 | 	byte	$00[16]
2a966     01 0D 0D 0D 
2a96a     0D 01 00 00 
2a96e     00 00 00 00 
2a972     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a976     00 00 00 00 
2a97a     00 00 00 00 
2a97e     00 00 00 00 
2a982     00 00 00 00 | 	byte	$00[16]
2a986     01 0D 0D 0D 
2a98a     0D 0D 01 00 
2a98e     00 00 00 00 
2a992     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a996     00 00 00 00 
2a99a     00 00 00 00 
2a99e     00 00 00 00 
2a9a2     00 00 00 00 | 	byte	$00[16]
2a9a6     01 0D 0D 0D 
2a9aa     0D 0D 0D 01 
2a9ae     00 00 00 00 
2a9b2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2a9b6     00 00 00 00 
2a9ba     00 00 00 00 
2a9be     00 00 00 00 
2a9c2     00 00 00 00 | 	byte	$00[16]
2a9c6     01 0D 0D 0D 
2a9ca     0D 0D 0D 0C 
2a9ce     01 00 00 00 
2a9d2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2a9d6     00 00 00 00 
2a9da     00 00 00 00 
2a9de     00 00 00 00 
2a9e2     00 00 00 00 | 	byte	$00[16]
2a9e6     01 0D 0D 0D 
2a9ea     0D 0D 0D 0D 
2a9ee     0C 01 00 00 
2a9f2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2a9f6     00 00 00 00 
2a9fa     00 00 00 00 
2a9fe     00 00 00 00 
2aa02     00 00 00 00 | 	byte	$00[16]
2aa06     01 0D 0D 0D 
2aa0a     0D 0D 0D 0D 
2aa0e     0D 0C 01 00 
2aa12     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2aa16     00 00 00 00 
2aa1a     00 00 00 00 
2aa1e     00 00 00 00 
2aa22     00 00 00 00 | 	byte	$00[16]
2aa26     01 0D 0D 0D 
2aa2a     0D 0D 0D 0D 
2aa2e     0D 0D 0B 01 
2aa32     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2aa36     00 00 00 00 
2aa3a     00 00 00 00 
2aa3e     00 00 00 00 
2aa42     00 00 00 00 | 	byte	$00[16]
2aa46     01 0D 0D 0D 
2aa4a     0C 0D 0D 03 
2aa4e     01 01 01 01 
2aa52     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2aa56     00 00 00 00 
2aa5a     00 00 00 00 
2aa5e     00 00 00 00 
2aa62     00 00 00 00 | 	byte	$00[16]
2aa66     01 0D 0D 0C 
2aa6a     01 09 0D 03 
2aa6e     00 00 00 00 
2aa72     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2aa76     00 00 00 00 
2aa7a     00 00 00 00 
2aa7e     00 00 00 00 
2aa82     00 00 00 00 | 	byte	$00[16]
2aa86     01 0D 0C 01 
2aa8a     00 01 0D 0B 
2aa8e     01 00 00 00 
2aa92     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2aa96     00 00 00 00 
2aa9a     00 00 00 00 
2aa9e     00 00 00 00 
2aaa2     00 00 00 00 | 	byte	$00[16]
2aaa6     01 0C 01 00 
2aaaa     00 01 0A 0D 
2aaae     01 00 00 00 
2aab2     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2aab6     00 00 00 00 
2aaba     00 00 00 00 
2aabe     00 00 00 00 
2aac2     00 00 00 00 | 	byte	$00[16]
2aac6     01 01 00 00 
2aaca     00 00 01 0D 
2aace     0B 01 00 00 
2aad2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2aad6     00 00 00 00 
2aada     00 00 00 00 
2aade     00 00 00 00 
2aae2     00 00 00 00 
2aae6     00 00 00 00 
2aaea     00 00       | 	byte	$00[22]
2aaec     01 0B 0D 01 
2aaf0     00 00 00 00 
2aaf4     00 00 00 00 
2aaf8     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2aafc     00 00 00 00 
2ab00     00 00 00 00 
2ab04     00 00 00 00 
2ab08     00 00 00 00 
2ab0c     00          | 	byte	$00[17]
2ab0d     01 01 00 00 
2ab11     00 00 00 00 
2ab15     00 00 00 00 
2ab19     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ab1d     00 00 00 00 
      ...             
2acc1     00 00 00 00 
2acc5     00          | 	byte	$00[425]
2acc6                 | 
2acc6     00 00       |              	org
2acc8 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
2accc 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
2acd0 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
2acd4 003             | 
2acd4 003 00 30 04 F6 |                 mov     psramaddr,#0
2acd8 004             | 
2acd8 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
2acdc 005 20 00 00 FF 
2ace0 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
2ace4 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
2ace8 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
2acec 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
2acf0 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
2acf4 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
2acf8 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2acfc 00d             | 
2acfc 00d 20 00 00 FF 
2ad00 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2ad04 00f E0 03 00 FF 
2ad08 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2ad0c 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2ad10 012             | 
2ad10 012             |                 
2ad10 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2ad14 013             |     
2ad14 013 01 2C 60 FD |                 cogid 	t11				' get id
2ad18 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2ad1c 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2ad20 016             | 
2ad20 016 00 00 00 00 | t11 		long 	0
2ad24 017 00 FF 07 00 | mailbox 	long 	$7FF00
2ad28 018 00 00 00 00 | psramaddr 	long 	0
2ad2c 019 00 00 00 00 | pslockval	long 	0
2ad30 01a 00 00 00 00 | cmd             long    0
2ad34 01b 00 00 00 00 | buf1            long    0
2ad38 01c 00 40 00 00 | buf2            long    16384
2ad3c 01d 40 AD 02 00 | 	long	@@@_dat_ + 8468
2ad40 01e 50 32 20 52 
2ad44 01f 65 74 72 6F 
2ad48 020 6D 61 63 68 
2ad4c 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2ad50 022 42 41 53 49 
2ad54 023 43 20 76 65 
2ad58 024 72 73 69 6F 
2ad5c 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2ad60 026 32 34 00 00 | 	byte	$32, $34, $00, $00
2ad64 027             | 	alignl
2ad64 027             | _hg010b_spin2_dat_
2ad64 027             | 
2ad64 027 00 00 00 00 
2ad68 028 00 00 00 00 
2ad6c 029 00 00 00 00 
2ad70 02a 00 00 00 00 
2ad74 02b 00 00 00    | vga_font       file "vgafont.def"
2ad77 02b 7E 81 A5 81 
2ad7b 02c 81 BD 99 81 
2ad7f 02d 81 7E 00 00 
2ad83 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
2ad87 02f 7E FF DB FF 
2ad8b 030 FF C3 E7 FF 
2ad8f 031 FF 7E 00 00 
2ad93 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
2ad97 033 00 36 7F 7F 
2ad9b 034 7F 7F 3E 1C 
2ad9f 035 08 00 00 00 
2ada3 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
2ada7 037 00 08 1C 3E 
2adab 038 7F 3E 1C 08 
2adaf 039 00 00 00 00 
2adb3 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
2adb7 03b 18 3C 3C E7 
2adbb 03c E7 E7 18 18 
2adbf 03d 3C 00 00 00 
2adc3 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2adc7 03f 18 3C 7E FF 
2adcb 040 FF 7E 18 18 
2adcf 041 3C 00 00 00 
2add3 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2add7 043 00 00 00 18 
2addb 044 3C 3C 18 00 
2addf 045 00 00 00 00 
2ade3 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
2ade7 047 FF FF FF E7 
2adeb 048 C3 C3 E7 FF 
2adef 049 FF FF FF FF 
2adf3 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2adf7 04b 00 00 3C 66 
2adfb 04c 42 42 66 3C 
2adff 04d 00 00 00 00 
2ae03 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2ae07 04f FF FF C3 99 
2ae0b 050 BD BD 99 C3 
2ae0f 051 FF FF FF FF 
2ae13 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2ae17 053 78 70 58 4C 
2ae1b 054 1E 33 33 33 
2ae1f 055 33 1E 00 00 
2ae23 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2ae27 057 3C 66 66 66 
2ae2b 058 66 3C 18 7E 
2ae2f 059 18 18 00 00 
2ae33 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2ae37 05b FC CC FC 0C 
2ae3b 05c 0C 0C 0C 0E 
2ae3f 05d 0F 07 00 00 
2ae43 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2ae47 05f FE C6 FE C6 
2ae4b 060 C6 C6 C6 E6 
2ae4f 061 E7 67 03 00 
2ae53 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2ae57 063 18 18 DB 3C 
2ae5b 064 E7 3C DB 18 
2ae5f 065 18 00 00 00 
2ae63 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2ae67 067 03 07 0F 1F 
2ae6b 068 7F 1F 0F 07 
2ae6f 069 03 01 00 00 
2ae73 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
2ae77 06b 60 70 78 7C 
2ae7b 06c 7F 7C 78 70 
2ae7f 06d 60 40 00 00 
2ae83 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
2ae87 06f 18 3C 7E 18 
2ae8b 070 18 18 7E 3C 
2ae8f 071 18 00 00 00 
2ae93 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
2ae97 073 66 66 66 66 
2ae9b 074 66 66 66    | 	byte	$66[7]
2ae9e 075 00 66 66 00 
2aea2 076 00 00 00 00 
2aea6 077 00 FE DB DB 
2aeaa 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2aeae 079 D8 D8 D8 00 
2aeb2 07a 00 00 00 3E 
2aeb6 07b 63 06 1C 36 
2aeba 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2aebe 07d 30 63 3E 00 
2aec2 07e 00 00 00 00 
2aec6 07f 00 00 00 00 
2aeca 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2aece 081 7F 7F 7F 00 
2aed2 082 00 00 00 00 
2aed6 083 00 18 3C 7E 
2aeda 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2aede 085 3C 18 7E 00 
2aee2 086 00 00 00 00 
2aee6 087 00 18 3C 7E 
2aeea 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2aeee 089 18 18 18 00 
2aef2 08a 00 00 00 00 
2aef6 08b 00 18 18 18 
2aefa 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2aefe 08d 7E 3C 18 00 
2af02 08e 00 00 00 00 
2af06 08f 00 00 00 18 
2af0a 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2af0e 091 00 00 00 00 
2af12 092 00 00 00 00 
2af16 093 00 00 00    | 	byte	$00[11]
2af19 094 0C 06 7F 06 
2af1d 095 0C 00 00 00 
2af21 096 00 00 00 00 
2af25 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2af29 098 00 03 03 03 
2af2d 099 7F 00 00 00 
2af31 09a 00 00 00 00 
2af35 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2af39 09c 14 36 7F 36 
2af3d 09d 14 00 00 00 
2af41 09e 00 00 00 00 
2af45 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
2af49 0a0 1C 1C 3E 3E 
2af4d 0a1 7F 7F 00 00 
2af51 0a2 00 00 00 00 
2af55 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2af59 0a4 7F 3E 3E 1C 
2af5d 0a5 1C 08 00 00 
2af61 0a6 00 00 00 00 
2af65 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2af69 0a8 00 00 00 00 
2af6d 0a9 00 00 00 00 
2af71 0aa 00 00 00 00 
2af75 0ab 00 00       | 	byte	$00[14]
2af77 0ab 18 3C 3C 3C 
2af7b 0ac 18 18 18 00 
2af7f 0ad 18 18 00 00 
2af83 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2af87 0af 66 24 00 00 
2af8b 0b0 00 00 00 00 
2af8f 0b1 00 00 00 00 
2af93 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2af97 0b3 00 36 36 7F 
2af9b 0b4 36 36 36 7F 
2af9f 0b5 36 36 00 00 
2afa3 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
2afa7 0b7 3E 63 43 03 
2afab 0b8 3E 60 60 61 
2afaf 0b9 63 3E 18 18 
2afb3 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
2afb7 0bb 00 00 43 63 
2afbb 0bc 30 18 0C 06 
2afbf 0bd 63 61 00 00 
2afc3 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
2afc7 0bf 1C 36 36 1C 
2afcb 0c0 6E 3B 33 33 
2afcf 0c1 33 6E 00 00 
2afd3 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
2afd7 0c3 0C 0C 0C 06 
2afdb 0c4 00 00 00 00 
2afdf 0c5 00 00 00 00 
2afe3 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2afe7 0c7 30 18 0C 0C 
2afeb 0c8 0C 0C 0C 0C 
2afef 0c9 18 30 00 00 
2aff3 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
2aff7 0cb 0C 18 30 30 
2affb 0cc 30 30 30 30 
2afff 0cd 18 0C 00 00 
2b003 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2b007 0cf 00 00 00 66 
2b00b 0d0 3C FF 3C 66 
2b00f 0d1 00 00 00 00 
2b013 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2b017 0d3 00 00 00 18 
2b01b 0d4 18 7E 18 18 
2b01f 0d5 00 00 00 00 
2b023 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2b027 0d7 00 00 00 00 
2b02b 0d8 00 00 00 00 | 	byte	$00[8]
2b02f 0d9 18 18 18 0C 
2b033 0da 00 00 00 00 
2b037 0db 00 00 00 00 
2b03b 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2b03f 0dd 00 00 00 00 
2b043 0de 00 00 00 00 
2b047 0df 00 00 00 00 
2b04b 0e0 00 00 00 00 | 	byte	$00[16]
2b04f 0e1 18 18 00 00 
2b053 0e2 00 00 00 00 
2b057 0e3 00 00 40 60 
2b05b 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2b05f 0e5 03 01 00 00 
2b063 0e6 00 00 00 00 
2b067 0e7 1C 36 63 63 
2b06b 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2b06f 0e9 36 1C 00 00 
2b073 0ea 00 00 00 00 
2b077 0eb 18 1C 1E 18 
2b07b 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
2b07f 0ed 18 7E 00 00 
2b083 0ee 00 00 00 00 
2b087 0ef 3E 63 60 30 
2b08b 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
2b08f 0f1 63 7F 00 00 
2b093 0f2 00 00 00 00 
2b097 0f3 3E 63 60 60 
2b09b 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2b09f 0f5 63 3E 00 00 
2b0a3 0f6 00 00 00 00 
2b0a7 0f7 30 38 3C 36 
2b0ab 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
2b0af 0f9 30 78 00 00 
2b0b3 0fa 00 00 00 00 
2b0b7 0fb 7F 03 03 03 
2b0bb 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
2b0bf 0fd 63 3E 00 00 
2b0c3 0fe 00 00 00 00 
2b0c7 0ff 1C 06 03 03 
2b0cb 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
2b0cf 101 63 3E 00 00 
2b0d3 102 00 00 00 00 
2b0d7 103 7F 63 60 60 
2b0db 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2b0df 105 0C 0C 00 00 
2b0e3 106 00 00 00 00 
2b0e7 107 3E 63 63 63 
2b0eb 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2b0ef 109 63 3E 00 00 
2b0f3 10a 00 00 00 00 
2b0f7 10b 3E 63 63 63 
2b0fb 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2b0ff 10d 30 1E 00 00 
2b103 10e 00 00 00 00 
2b107 10f 00 00 00 18 
2b10b 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2b10f 111 18 18 00 00 
2b113 112 00 00 00 00 
2b117 113 00 00 00 18 
2b11b 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2b11f 115 18 18 0C 00 
2b123 116 00 00 00 00 
2b127 117 00 60 30 18 
2b12b 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2b12f 119 30 60 00 00 
2b133 11a 00 00 00 00 
2b137 11b 00 00 00 7E 
2b13b 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2b13f 11d 00 00 00 00 
2b143 11e 00 00 00 00 
2b147 11f 00          | 	byte	$00[9]
2b148 120 06 0C 18 30 
2b14c 121 60 30 18 0C 
2b150 122 06 00 00 00 
2b154 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
2b158 124 63 63 30 18 
2b15c 125 18 18 00 18 
2b160 126 18 00 00 00 
2b164 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
2b168 128 3E 63 63 7B 
2b16c 129 7B 7B 3B 03 
2b170 12a 3E 00 00 00 
2b174 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
2b178 12c 1C 36 63 63 
2b17c 12d 7F 63 63 63 
2b180 12e 63 00 00 00 
2b184 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
2b188 130 66 66 66 3E 
2b18c 131 66 66 66 66 
2b190 132 3F 00 00 00 
2b194 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
2b198 134 66 43 03 03 
2b19c 135 03 03 43 66 
2b1a0 136 3C 00 00 00 
2b1a4 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
2b1a8 138 36 66 66 66 
2b1ac 139 66 66 66 36 
2b1b0 13a 1F 00 00 00 
2b1b4 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
2b1b8 13c 66 46 16 1E 
2b1bc 13d 16 06 46 66 
2b1c0 13e 7F 00 00 00 
2b1c4 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
2b1c8 140 66 46 16 1E 
2b1cc 141 16 06 06 06 
2b1d0 142 0F 00 00 00 
2b1d4 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
2b1d8 144 66 43 03 03 
2b1dc 145 7B 63 63 66 
2b1e0 146 5C 00 00 00 
2b1e4 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
2b1e8 148 63 63 63 7F 
2b1ec 149 63 63 63 63 
2b1f0 14a 63 00 00 00 
2b1f4 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
2b1f8 14c 18 18 18 18 
2b1fc 14d 18 18 18 18 | 	byte	$18[8]
2b200 14e 3C 00 00 00 
2b204 14f 00 00 00 78 
2b208 150 30 30 30 30 
2b20c 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2b210 152 1E 00 00 00 
2b214 153 00 00 00 67 
2b218 154 66 66 36 1E 
2b21c 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2b220 156 67 00 00 00 
2b224 157 00 00 00 0F 
2b228 158 06 06 06 06 
2b22c 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2b230 15a 7F 00 00 00 
2b234 15b 00 00 00 63 
2b238 15c 77 7F 7F 6B 
2b23c 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
2b240 15e 63 00 00 00 
2b244 15f 00 00 00 63 
2b248 160 67 6F 7F 7B 
2b24c 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
2b250 162 63 00 00 00 
2b254 163 00 00 00 3E 
2b258 164 63 63 63 63 
2b25c 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b260 166 3E 00 00 00 
2b264 167 00 00 00 3F 
2b268 168 66 66 66 3E 
2b26c 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
2b270 16a 0F 00 00 00 
2b274 16b 00 00 00 3E 
2b278 16c 63 63 63 63 
2b27c 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
2b280 16e 3E 30 70 00 
2b284 16f 00 00 00 3F 
2b288 170 66 66 66 3E 
2b28c 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
2b290 172 67 00 00 00 
2b294 173 00 00 00 3E 
2b298 174 63 63 06 1C 
2b29c 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2b2a0 176 3E 00 00 00 
2b2a4 177 00 00 00 7E 
2b2a8 178 7E 5A 18 18 
2b2ac 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2b2b0 17a 3C 00 00 00 
2b2b4 17b 00 00 00 63 
2b2b8 17c 63 63 63 63 
2b2bc 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2b2c0 17e 3E 00 00 00 
2b2c4 17f 00 00 00 63 
2b2c8 180 63 63 63 63 
2b2cc 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
2b2d0 182 08 00 00 00 
2b2d4 183 00 00 00 63 
2b2d8 184 63 63 63 6B 
2b2dc 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
2b2e0 186 36 00 00 00 
2b2e4 187 00 00 00 63 
2b2e8 188 63 36 3E 1C 
2b2ec 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
2b2f0 18a 63 00 00 00 
2b2f4 18b 00 00 00 66 
2b2f8 18c 66 66 66 3C 
2b2fc 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
2b300 18e 3C 00 00 00 
2b304 18f 00 00 00 7F 
2b308 190 63 61 30 18 
2b30c 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2b310 192 7F 00 00 00 
2b314 193 00 00 00 3C 
2b318 194 0C 0C 0C 0C 
2b31c 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
2b320 196 3C 00 00 00 
2b324 197 00 00 00 00 
2b328 198 01 03 07 0E 
2b32c 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
2b330 19a 40 00 00 00 
2b334 19b 00 00 00 3C 
2b338 19c 30 30 30 30 
2b33c 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
2b340 19e 3C 00 00 00 
2b344 19f 1C 36 00 00 
2b348 1a0 00 00 00 00 
2b34c 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b350 1a2 00 00 00 00 
2b354 1a3 00 00 00 00 
2b358 1a4 00 00 00 00 
2b35c 1a5 00 00 00 00 
2b360 1a6 00          | 	byte	$00[17]
2b361 1a6 FF 00 00 0C 
2b365 1a7 18 00 00 00 
2b369 1a8 00 00 00 00 
2b36d 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b371 1aa 00 00 00 00 
2b375 1ab 00 00 00 00 
2b379 1ac 00          | 	byte	$00[9]
2b37a 1ac 1E 30 3E 33 
2b37e 1ad 33 33 6E 00 
2b382 1ae 00 00 00 00 
2b386 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
2b38a 1b0 1E 36 66 66 
2b38e 1b1 66 66 3E 00 
2b392 1b2 00 00 00 00 
2b396 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b39a 1b4 3E 63 03 03 
2b39e 1b5 03 63 3E 00 
2b3a2 1b6 00 00 00 00 
2b3a6 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
2b3aa 1b8 3C 36 33 33 
2b3ae 1b9 33 33 6E 00 
2b3b2 1ba 00 00 00 00 
2b3b6 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b3ba 1bc 3E 63 7F 03 
2b3be 1bd 03 63 3E 00 
2b3c2 1be 00 00 00 00 
2b3c6 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
2b3ca 1c0 0C 1E 0C 0C 
2b3ce 1c1 0C 0C 1E 00 
2b3d2 1c2 00 00 00 00 
2b3d6 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b3da 1c4 6E 33 33 33 
2b3de 1c5 33 33 3E 30 
2b3e2 1c6 33 1E 00 00 
2b3e6 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
2b3ea 1c8 36 6E 66 66 
2b3ee 1c9 66 66 67 00 
2b3f2 1ca 00 00 00 00 
2b3f6 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
2b3fa 1cc 1C 18 18 18 
2b3fe 1cd 18 18 3C 00 
2b402 1ce 00 00 00 00 
2b406 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
2b40a 1d0 70 60 60 60 
2b40e 1d1 60 60 60 66 
2b412 1d2 66 3C 00 00 
2b416 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
2b41a 1d4 66 36 1E 1E 
2b41e 1d5 36 66 67 00 
2b422 1d6 00 00 00 00 
2b426 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
2b42a 1d8 18 18 18 18 
2b42e 1d9 18 18       | 	byte	$18[6]
2b430 1da 3C 00 00 00 
2b434 1db 00 00 00 00 
2b438 1dc 00 00 37 7F 
2b43c 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
2b440 1de 63 00 00 00 
2b444 1df 00 00 00 00 
2b448 1e0 00 00 3B 66 
2b44c 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2b450 1e2 66 00 00 00 
2b454 1e3 00 00 00 00 
2b458 1e4 00 00 3E 63 
2b45c 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
2b460 1e6 3E 00 00 00 
2b464 1e7 00 00 00 00 
2b468 1e8 00 00 3B 66 
2b46c 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2b470 1ea 3E 06 06 0F 
2b474 1eb 00 00 00 00 
2b478 1ec 00 00 6E 33 
2b47c 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
2b480 1ee 3E 30 30 78 
2b484 1ef 00 00 00 00 
2b488 1f0 00 00 3B 6E 
2b48c 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
2b490 1f2 0F 00 00 00 
2b494 1f3 00 00 00 00 
2b498 1f4 00 00 3E 63 
2b49c 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
2b4a0 1f6 3E 00 00 00 
2b4a4 1f7 00 00 00 08 
2b4a8 1f8 0C 0C 3F 0C 
2b4ac 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2b4b0 1fa 38 00 00 00 
2b4b4 1fb 00 00 00 00 
2b4b8 1fc 00 00 33 33 
2b4bc 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
2b4c0 1fe 6E 00 00 00 
2b4c4 1ff 00 00 00 00 
2b4c8 200 00 00 63 63 
2b4cc 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
2b4d0 202 1C 00 00 00 
2b4d4 203 00 00 00 00 
2b4d8 204 00 00 63 63 
2b4dc 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
2b4e0 206 36 00 00 00 
2b4e4 207 00 00 00 00 
2b4e8 208 00 00 63 36 
2b4ec 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
2b4f0 20a 63 00 00 00 
2b4f4 20b 00 00 00 00 
2b4f8 20c 00 00 63 63 
2b4fc 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
2b500 20e 7E 60 30 1F 
2b504 20f 00 00 00 00 
2b508 210 00 00 7F 33 
2b50c 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
2b510 212 7F 00 00 00 
2b514 213 00 00 00 70 
2b518 214 18 18 18 0E 
2b51c 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
2b520 216 70 00 00 00 
2b524 217 00 00 00 18 
2b528 218 18 18 18 18 
2b52c 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b530 21a 18 00 00 00 
2b534 21b 00 00 00 0E 
2b538 21c 18 18 18 70 
2b53c 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
2b540 21e 0E 00 00 00 
2b544 21f 6E 3B 00 00 
2b548 220 00 00 00 00 
2b54c 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b550 222 00 00 00 00 
2b554 223 00 00 00 00 
2b558 224 00 00       | 	byte	$00[10]
2b55a 224 08 1C 36 63 
2b55e 225 63 63 7F 00 
2b562 226 00 00 00 00 
2b566 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
2b56a 228 03 03 03 03 
2b56e 229 43 66 3C 18 
2b572 22a 30 1E 00 00 
2b576 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
2b57a 22c 33 33 33 33 
2b57e 22d 33 33       | 	byte	$33[6]
2b580 22e 6E 00 00 00 
2b584 22f 00 00 60 30 
2b588 230 18 00 3E 63 
2b58c 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
2b590 232 3E 00 00 00 
2b594 233 00 00 08 1C 
2b598 234 36 00 1E 30 
2b59c 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
2b5a0 236 6E 00 00 00 
2b5a4 237 00 00 00 00 
2b5a8 238 33 00 1E 30 
2b5ac 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
2b5b0 23a 6E 00 00 00 
2b5b4 23b 00 00 1C 36 
2b5b8 23c 1C 00 33 33 
2b5bc 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
2b5c0 23e 6E 00 00 00 
2b5c4 23f 00 00 60 30 
2b5c8 240 18 00 3E 63 
2b5cc 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
2b5d0 242 3E 00 00 00 
2b5d4 243 00 00 00 00 
2b5d8 244 00 00 3E 63 
2b5dc 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
2b5e0 246 3E 18 30 1E 
2b5e4 247 00 00 00 1C 
2b5e8 248 58 78 38 18 
2b5ec 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
2b5f0 24a 3C 00 00 00 
2b5f4 24b 00 00 00 00 
2b5f8 24c 63 00 3E 63 
2b5fc 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
2b600 24e 3E 00 00 00 
2b604 24f 66 33 00 3E 
2b608 250 63 63 63 63 
2b60c 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b610 252 3E 00 00 00 
2b614 253 00 00 CC 66 
2b618 254 33 00 3E 63 
2b61c 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
2b620 256 3E 00 00 00 
2b624 257 00 00 18 3C 
2b628 258 66 00 1C 18 
2b62c 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
2b630 25a 3C 00 00 00 
2b634 25b 30 18 00 7F 
2b638 25c 63 61 30 18 
2b63c 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2b640 25e 7F 00 00 00 
2b644 25f 00 63 00 08 
2b648 260 1C 36 63 63 
2b64c 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
2b650 262 63 00 00 00 
2b654 263 30 18 00 3C 
2b658 264 66 43 03 03 
2b65c 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
2b660 266 3C 00 00 00 
2b664 267 30 18 00 7F 
2b668 268 66 46 16 1E 
2b66c 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
2b670 26a 7F 00 00 00 
2b674 26b 0C 06 00 0F 
2b678 26c 06 06 06 06 
2b67c 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2b680 26e 7F 00 00 00 
2b684 26f 30 18 00 1C 
2b688 270 18 18 18 18 
2b68c 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
2b690 272 3C 00 00 00 
2b694 273 00 00 08 1C 
2b698 274 36 00 3E 63 
2b69c 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
2b6a0 276 3E 00 00 00 
2b6a4 277 00 00 00 00 
2b6a8 278 63 00 3E 63 
2b6ac 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
2b6b0 27a 3E 00 00 00 
2b6b4 27b 00 00 00 6F 
2b6b8 27c 46 26 06 06 
2b6bc 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
2b6c0 27e 7F 00 00 00 
2b6c4 27f 00 00 00 6E 
2b6c8 280 4C 2C 0C 0C 
2b6cc 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
2b6d0 282 1E 00 00 00 
2b6d4 283 30 18 00 3E 
2b6d8 284 63 63 06 1C 
2b6dc 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2b6e0 286 3E 00 00 00 
2b6e4 287 00 00 60 30 
2b6e8 288 18 00 3E 63 
2b6ec 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
2b6f0 28a 3E 00 00 00 
2b6f4 28b 00 63 00 3E 
2b6f8 28c 63 63 63 63 
2b6fc 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b700 28e 3E 00 00 00 
2b704 28f 00 63 00 63 
2b708 290 63 63 63 63 
2b70c 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2b710 292 3E 00 00 00 
2b714 293 6C 38 00 7E 
2b718 294 7E 5A 18 18 
2b71c 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2b720 296 3C 00 00 00 
2b724 297 00 00 60 48 
2b728 298 2C 0C 3F 0C 
2b72c 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2b730 29a 38 00 00 00 
2b734 29b 00 00 00 0F 
2b738 29c 26 36 1E 0E 
2b73c 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
2b740 29e 7F 00 00 00 
2b744 29f 00 00 00 00 
2b748 2a0 00 63 36 1C 
2b74c 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
2b750 2a2 00 00 00 00 
2b754 2a3 00 00       | 	byte	$00[6]
2b756 2a3 36 1C 08 00 
2b75a 2a4 3E 63 03 03 
2b75e 2a5 03 63 3E 00 
2b762 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
2b766 2a7 30 18 0C 00 
2b76a 2a8 1E 30 3E 33 
2b76e 2a9 33 33 6E 00 
2b772 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2b776 2ab 60 30 18 00 
2b77a 2ac 1C 18 18 18 
2b77e 2ad 18 18 3C 00 
2b782 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
2b786 2af 60 30 18 00 
2b78a 2b0 3E 63 63 63 
2b78e 2b1 63 63 3E 00 
2b792 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
2b796 2b3 30 18 0C 00 
2b79a 2b4 33 33 33 33 
2b79e 2b5 33 33 6E 00 
2b7a2 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2b7a6 2b7 00 08 1C 36 
2b7aa 2b8 63 63 7F 63 
2b7ae 2b9 63 63 63 18 
2b7b2 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
2b7b6 2bb 00 00 00 00 
2b7ba 2bc 1E 30 3E 33 
2b7be 2bd 33 33 6E 18 
2b7c2 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
2b7c6 2bf 00 7F 63 61 
2b7ca 2c0 30 18 0C 06 
2b7ce 2c1 43 63 7F 00 
2b7d2 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
2b7d6 2c3 36 1C 08 00 
2b7da 2c4 7F 33 18 0C 
2b7de 2c5 06 63 7F 00 
2b7e2 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
2b7e6 2c7 00 7F 66 46 
2b7ea 2c8 16 1E 16 06 
2b7ee 2c9 46 66 7F 18 
2b7f2 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
2b7f6 2cb 00 00 00 00 
2b7fa 2cc 3E 63 7F 03 
2b7fe 2cd 03 63 3E 18 
2b802 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
2b806 2cf 00 3C 66 03 
2b80a 2d0 1F 03 0F 03 
2b80e 2d1 03 66 3C 00 
2b812 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
2b816 2d3 60 30 18 00 
2b81a 2d4 7F 33 18 0C 
2b81e 2d5 06 63 7F 00 
2b822 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
2b826 2d7 00 3C 66 43 
2b82a 2d8 03 03 03 03 
2b82e 2d9 43 66 3C 00 
2b832 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
2b836 2db 00 00 00 00 
2b83a 2dc 3E 63 06 1C 
2b83e 2dd 30 63 3E 18 
2b842 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
2b846 2df 00 00 00 00 
2b84a 2e0 00 00       | 	byte	$00[6]
2b84c 2e1 6C 36 1B 36 
2b850 2e2 6C 00 00 00 
2b854 2e3 00 00 00 00 
2b858 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b85c 2e5 1B 36 6C 36 
2b860 2e6 1B 00 00 00 
2b864 2e7 88 22 88 22 
2b868 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
2b86c 2e9 88 22 88 22 
2b870 2ea 88 22 88 22 
2b874 2eb AA 55 AA 55 
2b878 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
2b87c 2ed AA 55 AA 55 
2b880 2ee AA 55 AA 55 
2b884 2ef BB EE BB EE 
2b888 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
2b88c 2f1 BB EE BB EE 
2b890 2f2 BB EE BB EE 
2b894 2f3 18 18 18 18 
2b898 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
2b89c 2f5 18 18 18 18 
2b8a0 2f6 18 18 18 18 
2b8a4 2f7 18 18 18 18 
2b8a8 2f8 18 18 18    | 	byte	$18[15]
2b8ab 2f8 1F 18 18 18 
2b8af 2f9 18 18 18 18 
2b8b3 2fa 18 30 18 00 
2b8b7 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
2b8bb 2fc 63 7F 63 63 
2b8bf 2fd 63 63 00 00 
2b8c3 2fe 00 1C 36 00 
2b8c7 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
2b8cb 300 63 7F 63 63 
2b8cf 301 63 63 00 00 
2b8d3 302 00 36 1C 00 
2b8d7 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
2b8db 304 1E 16 06 46 
2b8df 305 66 7F 00 00 
2b8e3 306 00 00 00 00 
2b8e7 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
2b8eb 308 1C 30 60 63 
2b8ef 309 63 3E 18 30 
2b8f3 30a 1E 6C 6C 6C 
2b8f7 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
2b8fb 30c 6F 6C 6C 6C 
2b8ff 30d 6C 6C 6C 6C 
2b903 30e 6C 6C 6C 6C 
2b907 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2b90b 310 6C 6C 6C 6C 
2b90f 311 6C 6C 6C 6C 
2b913 312 6C          | 	byte	$6c[9]
2b914 313 00 00 00 00 
2b918 314 00          | 	byte	$00[5]
2b919 314 7F 60 6F 6C 
2b91d 315 6C 6C 6C 6C 
2b921 316 6C 6C 6C 6C 
2b925 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2b929 318 6F 60 7F 00 
2b92d 319 00 00 00 00 
2b931 31a 00 00 00 18 
2b935 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
2b939 31c 61 30 18 0C 
2b93d 31d 06 43 63 7F 
2b941 31e 00 00 00 00 
2b945 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
2b949 320 00 7F 33 18 
2b94d 321 0C 06 63 7F 
2b951 322 00 00 00 00 
2b955 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
2b959 324 00 00 1F 18 
2b95d 325 18 18 18 18 
2b961 326 18 18 18 18 
2b965 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b969 328 18 18 F8 00 
2b96d 329 00 00 00 00 
2b971 32a 00 00 00 18 
2b975 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2b979 32c 18 18 FF 00 
2b97d 32d 00 00 00 00 
2b981 32e 00 00 00 00 
2b985 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b989 330 00 00 FF 18 
2b98d 331 18 18 18 18 
2b991 332 18 18 18 18 
2b995 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b999 334 18 18 F8 18 
2b99d 335 18 18 18 18 
2b9a1 336 18 18 18 00 
2b9a5 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2b9a9 338 00 00 FF 00 
2b9ad 339 00 00 00 00 
2b9b1 33a 00 00 00 18 
2b9b5 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2b9b9 33c 18 18 FF 18 
2b9bd 33d 18 18 18 18 
2b9c1 33e 18 18 18 63 
2b9c5 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
2b9c9 340 36 63 63 7F 
2b9cd 341 63 63 63 63 
2b9d1 342 00 00 00 00 
2b9d5 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
2b9d9 344 00 1E 30 3E 
2b9dd 345 33 33 33 6E 
2b9e1 346 00 00 00 6C 
2b9e5 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2b9e9 348 EC 0C FC 00 
2b9ed 349 00 00 00 00 
2b9f1 34a 00 00 00 00 
2b9f5 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b9f9 34c FC 0C EC 6C 
2b9fd 34d 6C 6C 6C 6C 
2ba01 34e 6C 6C 6C 6C 
2ba05 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2ba09 350 EF 00 FF 00 
2ba0d 351 00 00 00 00 
2ba11 352 00 00 00 00 
2ba15 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ba19 354 FF 00 EF 6C 
2ba1d 355 6C 6C 6C 6C 
2ba21 356 6C 6C 6C 6C 
2ba25 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2ba29 358 EC 0C EC 6C 
2ba2d 359 6C 6C 6C 6C 
2ba31 35a 6C 6C 6C 00 
2ba35 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2ba39 35c FF 00 FF 00 
2ba3d 35d 00 00 00 00 
2ba41 35e 00 00 00 6C 
2ba45 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2ba49 360 EF 00 EF 6C 
2ba4d 361 6C 6C 6C 6C 
2ba51 362 6C 6C 6C 00 
2ba55 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2ba59 364 63 3E 63 63 
2ba5d 365 63 63 3E 63 
2ba61 366 00 00 00 00 
2ba65 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
2ba69 368 30 3C 36 33 
2ba6d 369 33 33 33 6E 
2ba71 36a 00 00 00 00 
2ba75 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
2ba79 36c 66 66 6F 66 
2ba7d 36d 66 66 36 1F 
2ba81 36e 00 00 00 36 
2ba85 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
2ba89 370 66 66 66 66 
2ba8d 371 66 66       | 	byte	$66[6]
2ba8f 371 36 1F 00 00 
2ba93 372 00 00 63 00 
2ba97 373 7F 66 46 16 
2ba9b 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
2ba9f 375 66 7F 00 00 
2baa3 376 00 6C 38 00 
2baa7 377 38 30 30 3C 
2baab 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
2baaf 379 33 6E 00 00 
2bab3 37a 00 36 1C 00 
2bab7 37b 63 67 6F 7F 
2babb 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
2babf 37d 63 63 00 00 
2bac3 37e 00 30 18 00 
2bac7 37f 3C 18 18 18 
2bacb 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2bacf 381 18 3C 00 00 
2bad3 382 00 3C 66 00 
2bad7 383 3C 18 18 18 
2badb 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2badf 385 18 3C 00 00 
2bae3 386 00 00 00 36 
2bae7 387 1C 08 00 3E 
2baeb 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
2baef 389 63 3E 00 00 
2baf3 38a 00 18 18 18 
2baf7 38b 18 18 18 18 
2bafb 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
2baff 38d 00 00 00 00 
2bb03 38e 00 00 00 00 
2bb07 38f 00 00 00 00 | 	byte	$00[12]
2bb0b 390 F8 18 18 18 
2bb0f 391 18 18 18 18 
2bb13 392 18 FF FF FF 
2bb17 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
2bb1b 394 FF FF FF FF 
2bb1f 395 FF FF FF FF 
2bb23 396 FF          | 	byte	$ff[9]
2bb24 397 00 00 00 00 
2bb28 398 00 00 00    | 	byte	$00[7]
2bb2b 398 FF FF FF FF 
2bb2f 399 FF FF FF FF 
2bb33 39a FF          | 	byte	$ff[9]
2bb34 39b 00 00 00 7E 
2bb38 39c 7E 5A 18 18 
2bb3c 39d 18 18 18 18 
2bb40 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
2bb44 39f 1C 36 1C 63 
2bb48 3a0 63 63 63 63 
2bb4c 3a1 63 63 63 63 
2bb50 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bb54 3a3 FF FF FF FF 
2bb58 3a4 FF FF FF    | 	byte	$ff[7]
2bb5b 3a4 00 00 00 00 
2bb5f 3a5 00 00 00 00 
2bb63 3a6 00          | 	byte	$00[9]
2bb64 3a7 30 18 00 3E 
2bb68 3a8 63 63 63 63 
2bb6c 3a9 63 63 63 63 
2bb70 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bb74 3ab 00 00 00 1E 
2bb78 3ac 33 33 33 1B 
2bb7c 3ad 33 63 63 63 
2bb80 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
2bb84 3af 1C 36 00 3E 
2bb88 3b0 63 63 63 63 
2bb8c 3b1 63 63 63 63 
2bb90 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bb94 3b3 30 18 00 63 
2bb98 3b4 67 6F 7F 7B 
2bb9c 3b5 73 63 63 63 
2bba0 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
2bba4 3b7 00 00 60 30 
2bba8 3b8 18 00 3B 66 
2bbac 3b9 66 66 66 66 
2bbb0 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2bbb4 3bb 00 00 36 1C 
2bbb8 3bc 08 00 3B 66 
2bbbc 3bd 66 66 66 66 
2bbc0 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2bbc4 3bf 36 1C 00 3E 
2bbc8 3c0 63 63 06 1C 
2bbcc 3c1 30 60 63 63 
2bbd0 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
2bbd4 3c3 00 00 36 1C 
2bbd8 3c4 08 00 3E 63 
2bbdc 3c5 06 1C 30 63 
2bbe0 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
2bbe4 3c7 30 18 00 3F 
2bbe8 3c8 66 66 66 3E 
2bbec 3c9 36 66 66 66 
2bbf0 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
2bbf4 3cb 30 18 00 63 
2bbf8 3cc 63 63 63 63 
2bbfc 3cd 63 63 63 63 
2bc00 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bc04 3cf 00 00 60 30 
2bc08 3d0 18 00 3B 6E 
2bc0c 3d1 66 06 06 06 
2bc10 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
2bc14 3d3 66 33 00 63 
2bc18 3d4 63 63 63 63 
2bc1c 3d5 63 63 63 63 
2bc20 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bc24 3d7 00 00 60 30 
2bc28 3d8 18 00 63 63 
2bc2c 3d9 63 63 63 63 
2bc30 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
2bc34 3db 30 18 00 66 
2bc38 3dc 66 66 66 3C 
2bc3c 3dd 18 18 18 18 
2bc40 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
2bc44 3df 00 00 00 08 
2bc48 3e0 0C 0C 3F 0C 
2bc4c 3e1 0C 0C 0C 6C 
2bc50 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
2bc54 3e3 30 18 00 00 
2bc58 3e4 00 00 00 00 
2bc5c 3e5 00 00 00 00 
2bc60 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bc64 3e7 00 00 00 00 
2bc68 3e8 00 00 00 00 | 	byte	$00[8]
2bc6c 3e9 7F 00 00 00 
2bc70 3ea 00 00 00 00 
2bc74 3eb 66 33 00 00 
2bc78 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
2bc7c 3ed 00 00 00 00 
2bc80 3ee 00 00 00 00 
2bc84 3ef 00 00 00 00 
2bc88 3f0 00 00 00 00 
2bc8c 3f1 00 00 00 00 
2bc90 3f2 00          | 	byte	$00[21]
2bc91 3f2 0C 06 3C 36 
2bc95 3f3 1C 00 00 00 
2bc99 3f4 00 00 00 00 
2bc9d 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bca1 3f6 00 00 00 63 
2bca5 3f7 3E 00 00 00 
2bca9 3f8 00 00 00 00 
2bcad 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bcb1 3fa 00 00 00 00 
2bcb5 3fb 3E 63 06 1C 
2bcb9 3fc 36 63 63 36 
2bcbd 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
2bcc1 3fe 00 00 00 00 
2bcc5 3ff 00 00 00 00 | 	byte	$00[8]
2bcc9 400 18 00 7E 00 
2bccd 401 18 00 00 00 
2bcd1 402 00 00 00 00 
2bcd5 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bcd9 404 00 00 00 00 
2bcdd 405 00 00 00 00 | 	byte	$00[8]
2bce1 406 18 30 1E 00 
2bce5 407 00 00 1C 36 
2bce9 408 36 1C 00 00 
2bced 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
2bcf1 40a 00 00 00 00 
2bcf5 40b 63 00 00 00 
2bcf9 40c 00 00 00 00 
2bcfd 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bd01 40e 00 00 00 18 
2bd05 40f 18 00 00 00 
2bd09 410 00 00 00 00 
2bd0d 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bd11 412 00 00 00 00 
2bd15 413 00          | 	byte	$00[5]
2bd16 413 CC 66 33 00 
2bd1a 414 33 33 33 33 
2bd1e 415 33 33 6E 00 
2bd22 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
2bd26 417 00 3F 66 66 
2bd2a 418 66 3E 36 66 
2bd2e 419 66 66 6F 00 
2bd32 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
2bd36 41b 36 1C 08 00 
2bd3a 41c 3B 6E 66 06 
2bd3e 41d 06 06 0F 00 
2bd42 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
2bd46 41f 00 00 00 7E 
2bd4a 420 7E 7E 7E 7E 
2bd4e 421 7E 7E 00 00 
2bd52 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
2bd56 423 00 00 00 00 
2bd5a 424 00 00 00 00 
2bd5e 425 00 00 00 00 
2bd62 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bd64 427             | 'vga_font       file "vgafont.def"
2bd64 427 00 00 00 00 
      ...             
2bd94 433 00 00 00 00 
2bd98 434 00 00 00    | st_font        file "st4font.def"
2bd9b 434 FF FF 00 00 
2bd9f 435 00 00 00 00 
2bda3 436 00 18 18 18 
2bda7 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2bdab 438 18 18 18 18 
2bdaf 439 18 18 18 18 
2bdb3 43a 18          | 	byte	$18[9]
2bdb4 43b 00 00 00 00 
2bdb8 43c 00 00 00    | 	byte	$00[7]
2bdbb 43c FF FF 18 18 
2bdbf 43d 18 18 18 18 
2bdc3 43e 18 18 18 18 
2bdc7 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2bdcb 440 FF FF 00 00 
2bdcf 441 00 00 00 00 
2bdd3 442 00 18 18 18 
2bdd7 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2bddb 444 1F 1F 18 18 
2bddf 445 18 18 18 18 
2bde3 446 18 18 18 18 
2bde7 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2bdeb 448 F8 F8 18 18 
2bdef 449 18 18 18 18 
2bdf3 44a 18 00 00 00 
2bdf7 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2bdfb 44c 1F 1F 18 18 
2bdff 44d 18 18 18 18 
2be03 44e 18 00 00 00 
2be07 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2be0b 450 F8 F8 18 18 
2be0f 451 18 18 18 18 
2be13 452 18 18 18 18 
2be17 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2be1b 454 1F 1F 00 00 
2be1f 455 00 00 00 00 
2be23 456 00 18 18 18 
2be27 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2be2b 458 F8 F8 00 00 
2be2f 459 00 00 00 00 
2be33 45a 00 18 18 18 
2be37 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2be3b 45c FF FF 18 18 
2be3f 45d 18 18 18 18 
2be43 45e 18 00 00 18 
2be47 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
2be4b 460 66 7E 7E 66 
2be4f 461 66 66 66 30 
2be53 462 18 00 00 7E 
2be57 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
2be5b 464 3E 06 06 06 
2be5f 465 06 7E 7E 18 
2be63 466 0C 30 18 3C 
2be67 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
2be6b 468 06 06 06 66 
2be6f 469 66 7E 3C 00 
2be73 46a 00 30 18 66 
2be77 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
2be7b 46c 7E 7E 76 76 
2be7f 46d 66 66 66 00 
2be83 46e 00 30 18 7C 
2be87 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
2be8b 470 1C 38 70 60 
2be8f 471 60 7E 3E 00 
2be93 472 00 30 18 7E 
2be97 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
2be9b 474 18 0C 0C 06 
2be9f 475 06 7E 7E 00 
2bea3 476 00 18 18 00 
2bea7 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
2beab 478 18 18 0C 0C 
2beaf 479 06 7E 7E 00 
2beb3 47a 00 30 18 3C 
2beb7 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
2bebb 47c 66 66 66 66 
2bebf 47d 66          | 	byte	$66[5]
2bec0 47e 7E 3C 00 00 
2bec4 47f 00 00 06 06 
2bec8 480 06 06 16 1E 
2becc 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
2bed0 482 7E 7E 00 00 
2bed4 483 00 00 00 00 
2bed8 484 00 3C 7C 60 
2bedc 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
2bee0 486 7E 7C 30 18 
2bee4 487 00 00 00 00 
2bee8 488 00 3C 7E 66 
2beec 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
2bef0 48a 7E 7C 18 0C 
2bef4 48b 00 00 30 18 
2bef8 48c 00 3C 3E 06 
2befc 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
2bf00 48e 7E 7C 00 00 
2bf04 48f 00 00 30 18 
2bf08 490 00 3E 7E 66 
2bf0c 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
2bf10 492 66 66 00 00 
2bf14 493 00 00 30 18 
2bf18 494 00 7C 7E 06 
2bf1c 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
2bf20 496 7E 3E 00 00 
2bf24 497 00 00 30 18 
2bf28 498 00 7E 7E 30 
2bf2c 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2bf30 49a 7E 7E 00 00 
2bf34 49b 00 00 18 18 
2bf38 49c 00 7E 7E 30 
2bf3c 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2bf40 49e 7E 7E 00 00 
2bf44 49f 00 00 30 18 
2bf48 4a0 00 3C 7E 66 
2bf4c 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
2bf50 4a2 7E 3C 00 00 
2bf54 4a3 00 00 1C 1C 
2bf58 4a4 18 18 38 3C 
2bf5c 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
2bf60 4a6 3C 3C 00 00 
2bf64 4a7 00 00 00 00 
2bf68 4a8 00 00 00 00 
2bf6c 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bf70 4aa 00 00 00 00 
2bf74 4ab 00 00       | 	byte	$00[6]
2bf76 4ab 18 18 18 18 
2bf7a 4ac 18 18 18 18 | 	byte	$18[8]
2bf7e 4ad 00 00 18 18 
2bf82 4ae 00 00 00 00 
2bf86 4af 66 66 66 66 
2bf8a 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
2bf8e 4b1 00 00 00 00 
2bf92 4b2 00 00 00 00 
2bf96 4b3 00          | 	byte	$00[9]
2bf97 4b3 66 66 FF FF 
2bf9b 4b4 66 66 FF FF 
2bf9f 4b5 66 66 00 00 
2bfa3 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
2bfa7 4b7 7C 7E 06 06 
2bfab 4b8 3E 7C 60 60 
2bfaf 4b9 7E 3E 18 18 
2bfb3 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
2bfb7 4bb 66 30 30 18 
2bfbb 4bc 18 0C 0C 66 
2bfbf 4bd 66 00 00 00 
2bfc3 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
2bfc7 4bf 66 66 3C 1C 
2bfcb 4c0 1C FC FE 66 
2bfcf 4c1 66 FE FC 00 
2bfd3 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
2bfd7 4c3 18 18 18 18 
2bfdb 4c4 00 00 00 00 
2bfdf 4c5 00 00 00 00 
2bfe3 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
2bfe7 4c7 18 1C 0C 0C 
2bfeb 4c8 0C 0C 0C 0C 
2bfef 4c9 1C 18 30 00 
2bff3 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
2bff7 4cb 18 38 30 30 
2bffb 4cc 30 30 30 30 
2bfff 4cd 38 18 0C 00 
2c003 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
2c007 4cf 66 66 3C 3C 
2c00b 4d0 FF FF 3C 3C 
2c00f 4d1 66 66 00 00 
2c013 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
2c017 4d3 00 18 18 18 
2c01b 4d4 7E 7E 18 18 
2c01f 4d5 18 00 00 00 
2c023 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c027 4d7 00 00 00 00 
2c02b 4d8 00 00       | 	byte	$00[6]
2c02d 4d9 18 18 18 18 
2c031 4da 18          | 	byte	$18[5]
2c032 4da 0C 04 00 00 
2c036 4db 00 00 00 00 
2c03a 4dc 7E 7E 00 00 
2c03e 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
2c042 4de 00 00 00 00 
2c046 4df 00 00 00 00 
2c04a 4e0 00 00 00 00 
2c04e 4e1 00          | 	byte	$00[13]
2c04f 4e1 18 18 18 00 
2c053 4e2 00 00 00 60 
2c057 4e3 60 60 30 30 
2c05b 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
2c05f 4e5 06 06 06 00 
2c063 4e6 00 00 00 3C 
2c067 4e7 7E 66 66 66 
2c06b 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
2c06f 4e9 66 7E 3C 00 
2c073 4ea 00 00 00 18 
2c077 4eb 18 1C 1C 18 
2c07b 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
2c07f 4ed 18 7E 7E 00 
2c083 4ee 00 00 00 3C 
2c087 4ef 7E 66 66 30 
2c08b 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
2c08f 4f1 0C 7E 7E 00 
2c093 4f2 00 00 00 7E 
2c097 4f3 7E 30 30 18 
2c09b 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
2c09f 4f5 66 7E 3C 00 
2c0a3 4f6 00 00 00 30 
2c0a7 4f7 30 38 38 3C 
2c0ab 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
2c0af 4f9 7E 30 30 00 
2c0b3 4fa 00 00 00 7E 
2c0b7 4fb 7E 06 06 3E 
2c0bb 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
2c0bf 4fd 66 7E 3C 00 
2c0c3 4fe 00 00 00 38 
2c0c7 4ff 3C 0E 06 06 
2c0cb 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
2c0cf 501 66 7E 3C 00 
2c0d3 502 00 00 00 7E 
2c0d7 503 7E 60 60 30 
2c0db 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
2c0df 505 0C 0C 0C 00 
2c0e3 506 00 00 00 3C 
2c0e7 507 7E 66 66 3C 
2c0eb 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
2c0ef 509 66 7E 3C 00 
2c0f3 50a 00 00 00 3C 
2c0f7 50b 7E 66 66 7E 
2c0fb 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
2c0ff 50d 70 3C 1C 00 
2c103 50e 00 00 00 00 
2c107 50f 00 00 18 18 
2c10b 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
2c10f 511 18 18 18 00 
2c113 512 00 00 00 00 
2c117 513 00 00 18 18 
2c11b 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
2c11f 515 18 18 18 0C 
2c123 516 04 00 00 00 
2c127 517 70 38 1C 0E 
2c12b 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
2c12f 519 70 00 00 00 
2c133 51a 00 00 00 00 
2c137 51b 00 00 7E 7E 
2c13b 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
2c13f 51d 00 00 00 00 
2c143 51e 00 00 00 00 | 	byte	$00[8]
2c147 51f 0E 1C 38 70 
2c14b 520 E0 70 38 1C 
2c14f 521 0E 00 00 00 
2c153 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
2c157 523 7E 66 66 30 
2c15b 524 30 18 18 18 
2c15f 525 00 18 18 00 
2c163 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
2c167 527 7E 66 66 66 
2c16b 528 66 36 06 66 
2c16f 529 66 7E 3C 00 
2c173 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
2c177 52b 3C 7E 66 66 
2c17b 52c 66 7E 7E 66 
2c17f 52d 66 66 66 00 
2c183 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
2c187 52f 7E 66 66 7E 
2c18b 530 3E 66 66 66 
2c18f 531 66 7E 3E 00 
2c193 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
2c197 533 7E 66 66 06 
2c19b 534 06 06 06 66 
2c19f 535 66 7E 3C 00 
2c1a3 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
2c1a7 537 7E 66 66 66 
2c1ab 538 66 66 66 66 
2c1af 539 66 7E 3E 00 
2c1b3 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
2c1b7 53b 7E 06 06 3E 
2c1bb 53c 3E 06 06 06 
2c1bf 53d 06 7E 7E 00 
2c1c3 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
2c1c7 53f 7E 06 06 3E 
2c1cb 540 3E 06 06 06 
2c1cf 541 06 06 06 00 
2c1d3 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
2c1d7 543 7E 06 06 76 
2c1db 544 76 66 66 66 
2c1df 545 66 7E 3C 00 
2c1e3 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
2c1e7 547 66 66 66 7E 
2c1eb 548 7E 66 66 66 
2c1ef 549 66 66 66 00 
2c1f3 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
2c1f7 54b 7E 18 18 18 
2c1fb 54c 18 18 18 18 
2c1ff 54d 18 7E 7E 00 
2c203 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
2c207 54f 60 60 60 60 
2c20b 550 60 60 60    | 	byte	$60[7]
2c20e 551 66 66 7E 3C 
2c212 552 00 00 00 00 
2c216 553 66 66 36 36 
2c21a 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
2c21e 555 66 66 C6 C6 
2c222 556 00 00 00 00 
2c226 557 06 06 06 06 
2c22a 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
2c22e 559 06 06 7E 7E 
2c232 55a 00 00 00 00 
2c236 55b C6 C6 EE EE 
2c23a 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
2c23e 55d C6 C6 C6 C6 
2c242 55e 00 00 00 00 
2c246 55f 66 66 66 6E 
2c24a 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
2c24e 561 76 66 66 66 
2c252 562 00 00 00 00 
2c256 563 3C 7E 66 66 
2c25a 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2c25e 565 66 66 7E 3C 
2c262 566 00 00 00 00 
2c266 567 3E 7E 66 66 
2c26a 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
2c26e 569 06 06 06 06 
2c272 56a 00 00 00 00 
2c276 56b 3C 7E 66 66 
2c27a 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2c27e 56d 66 56 3E 6C 
2c282 56e 00 00 00 00 
2c286 56f 3E 7E 66 66 
2c28a 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
2c28e 571 66 66 C6 C6 
2c292 572 00 00 00 00 
2c296 573 7C 7E 06 06 
2c29a 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
2c29e 575 60 60 7E 3E 
2c2a2 576 00 00 00 00 
2c2a6 577 7E 7E 18 18 
2c2aa 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
2c2ae 579 18 18 18 18 
2c2b2 57a 00 00 00 00 
2c2b6 57b 66 66 66 66 
2c2ba 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2c2be 57d 66 66 7E 3C 
2c2c2 57e 00 00 00 00 
2c2c6 57f 66 66 66 66 
2c2ca 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2c2ce 581 3C 3C 18 18 
2c2d2 582 00 00 00 00 
2c2d6 583 C6 C6 C6 C6 
2c2da 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
2c2de 585 FE EE C6 82 
2c2e2 586 00 00 00 00 
2c2e6 587 66 66 66 3C 
2c2ea 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
2c2ee 589 3C 66 66 66 
2c2f2 58a 00 00 00 00 
2c2f6 58b 66 66 66 66 
2c2fa 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
2c2fe 58d 18 18 18 18 
2c302 58e 00 00 00 00 
2c306 58f 7E 7E 30 30 
2c30a 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
2c30e 591 06 06 7E 7E 
2c312 592 00 00 00 00 
2c316 593 3C 3C 0C 0C 
2c31a 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
2c31e 595 0C 0C 3C 3C 
2c322 596 00 00 00 00 
2c326 597 06 06 0C 0C 
2c32a 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
2c32e 599 60 60 C0 C0 
2c332 59a 00 00 00 00 
2c336 59b 3C 3C 30 30 
2c33a 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
2c33e 59d 30 30 3C 3C 
2c342 59e 00 00 00 00 
2c346 59f 18 18 3C 3C 
2c34a 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
2c34e 5a1 00 00 00 00 
2c352 5a2 00 00 00 00 
2c356 5a3 00 00 00 00 
2c35a 5a4 00 00 00 00 
2c35e 5a5 00 00       | 	byte	$00[18]
2c360 5a6 FE FE 00 00 
2c364 5a7 00 00 0C 0C 
2c368 5a8 18 18 00 00 
2c36c 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
2c370 5aa 00 00 00 00 
2c374 5ab 00 00 00 00 
2c378 5ac 00          | 	byte	$00[9]
2c379 5ac 3C 7C 60 7C 
2c37d 5ad 7E 66 66 7E 
2c381 5ae 7C 00 00 00 
2c385 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
2c389 5b0 3E 7E 66 66 
2c38d 5b1 66 66 66 7E 
2c391 5b2 3E 00 00 00 
2c395 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
2c399 5b4 3C 3E 06 06 
2c39d 5b5 06 06 06 7E 
2c3a1 5b6 7C 00 00 00 
2c3a5 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
2c3a9 5b8 7C 7E 66 66 
2c3ad 5b9 66 66 66 7E 
2c3b1 5ba 7C 00 00 00 
2c3b5 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
2c3b9 5bc 3C 7E 66 66 
2c3bd 5bd 7E 06 06 7E 
2c3c1 5be 7C 00 00 00 
2c3c5 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
2c3c9 5c0 18 7E 7E 18 
2c3cd 5c1 18 18 18 18 
2c3d1 5c2 18 00 00 00 
2c3d5 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c3d9 5c4 7C 7E 66 66 
2c3dd 5c5 66 66 7E 7C 
2c3e1 5c6 60 7E 3E 00 
2c3e5 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
2c3e9 5c8 3E 7E 66 66 
2c3ed 5c9 66 66 66 66 
2c3f1 5ca 66 00 00 00 
2c3f5 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
2c3f9 5cc 1C 1C 18 18 
2c3fd 5cd 18 18 18 3C 
2c401 5ce 3C 00 00 00 
2c405 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
2c409 5d0 30 30 30 30 
2c40d 5d1 30 30 30 30 
2c411 5d2 30          | 	byte	$30[9]
2c412 5d2 3E 1E 00 00 
2c416 5d3 06 06 06 36 
2c41a 5d4 36 1E 1E 1E 
2c41e 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
2c422 5d6 00 00 00 00 
2c426 5d7 1C 1C 18 18 
2c42a 5d8 18 18 18 18 
2c42e 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
2c432 5da 00 00 00 00 
2c436 5db 00 00 00    | 	byte	$00[7]
2c439 5dc 6C FE FE D6 
2c43d 5dd D6 C6 C6 C6 
2c441 5de C6 00 00 00 
2c445 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
2c449 5e0 3E 7E 66 66 
2c44d 5e1 66 66 66 66 
2c451 5e2 66 00 00 00 
2c455 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
2c459 5e4 3C 7E 66 66 
2c45d 5e5 66 66 66 7E 
2c461 5e6 3C 00 00 00 
2c465 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
2c469 5e8 3E 7E 66 66 
2c46d 5e9 66 66 66 7E 
2c471 5ea 3E 06 06 00 
2c475 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
2c479 5ec 7C 7E 66 66 
2c47d 5ed 66 66 66 7E 
2c481 5ee 7C 60 60 00 
2c485 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
2c489 5f0 3E 7E 66 06 
2c48d 5f1 06 06 06 06 
2c491 5f2 06 00 00 00 
2c495 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
2c499 5f4 7C 7E 06 0E 
2c49d 5f5 3C 70 60 7E 
2c4a1 5f6 3E 00 00 00 
2c4a5 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
2c4a9 5f8 7E 7E 18 18 
2c4ad 5f9 18 18 18 78 
2c4b1 5fa 70 00 00 00 
2c4b5 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
2c4b9 5fc 66 66 66 66 
2c4bd 5fd 66 66 66    | 	byte	$66[7]
2c4c0 5fe 7E 7C 00 00 
2c4c4 5ff 00 00 00 00 
2c4c8 600 00 66 66 66 
2c4cc 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
2c4d0 602 18 18 00 00 
2c4d4 603 00 00 00 00 
2c4d8 604 00 C6 C6 D6 
2c4dc 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
2c4e0 606 C6 82 00 00 
2c4e4 607 00 00 00 00 
2c4e8 608 00 66 66 3C 
2c4ec 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
2c4f0 60a 66 66 00 00 
2c4f4 60b 00 00 00 00 
2c4f8 60c 00 66 66 66 
2c4fc 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
2c500 60e 7C 60 7E 3E 
2c504 60f 00 00 00 00 
2c508 610 00 7E 7E 30 
2c50c 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c510 612 7E 7E 00 00 
2c514 613 00 00 30 18 
2c518 614 18 18 18 0C 
2c51c 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
2c520 616 18 30 00 00 
2c524 617 00 00 18 18 
2c528 618 18 18 18 18 
2c52c 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c530 61a 18 18 00 00 
2c534 61b 00 00 0C 18 
2c538 61c 18 18 18 30 
2c53c 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
2c540 61e 18 0C 00 00 
2c544 61f 00 00 6C 7E 
2c548 620 36 00 00 00 
2c54c 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
2c550 622 00 00 00 00 
2c554 623 00 00 00 00 
2c558 624 00          | 	byte	$00[9]
2c559 624 18 18 18 18 
2c55d 625 18 18 00 00 
2c561 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2c564 627             | 'amiga_font     file "amigafont.def"
2c564 627 00 6C FE FE 
2c568 628 7C 38 10 00 
2c56c 629 18 18 18 F8 
2c570 62a F8 18 18 18 | a8_font        file "atari8.fnt"
2c574 62b C0 C0 C0 C0 
2c578 62c C0 C0 C0 C0 | 	byte	$c0[8]
2c57c 62d 18 18 18 1F 
2c580 62e 1F 00 00 00 
2c584 62f 18 18 18 1F 
2c588 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
2c58c 631 00 00 00 1F 
2c590 632 1F 18 18 18 
2c594 633 C0 E0 70 38 
2c598 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
2c59c 635 03 07 0E 1C 
2c5a0 636 38 70 E0 C0 
2c5a4 637 80 C0 E0 F0 
2c5a8 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
2c5ac 639 00 00 00 00 
2c5b0 63a F0 F0 F0 F0 
2c5b4 63b 01 03 07 0F 
2c5b8 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
2c5bc 63d F0 F0 F0 F0 
2c5c0 63e 00 00 00 00 
2c5c4 63f 0F 0F 0F 0F 
2c5c8 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
2c5cc 641 FF FF 00 00 
2c5d0 642 00 00 00 00 
2c5d4 643 00 00 00 00 
2c5d8 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
2c5dc 645 00 00 00 00 
2c5e0 646 0F 0F 0F 0F 
2c5e4 647 00 38 38 EE 
2c5e8 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
2c5ec 649 00 00 00 F8 
2c5f0 64a F8 18 18 18 
2c5f4 64b 00 00 00 FF 
2c5f8 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
2c5fc 64d 18 18 18 FF 
2c600 64e FF 18 18 18 
2c604 64f 00 00 3C 7E 
2c608 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
2c60c 651 00 00 00 00 
2c610 652 FF FF FF FF 
2c614 653 03 03 03 03 
2c618 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
2c61c 655 00 00 00 FF 
2c620 656 FF 18 18 18 
2c624 657 18 18 18 FF 
2c628 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
2c62c 659 0F 0F 0F 0F 
2c630 65a 0F 0F 0F 0F | 	byte	$0f[8]
2c634 65b 18 18 18 F8 
2c638 65c F8 00 00 00 
2c63c 65d 1E 06 1E 06 
2c640 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
2c644 65f 00 18 3C 7E 
2c648 660 18 18 18 00 
2c64c 661 00 18 18 18 
2c650 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
2c654 663 00 18 0C 7E 
2c658 664 0C 18 00 00 
2c65c 665 00 18 30 7E 
2c660 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
2c664 667 00 00 00 00 
2c668 668 00 00 00 00 
2c66c 669 00          | 	byte	$00[9]
2c66d 669 18 18 18 18 
2c671 66a 00 18 00 00 
2c675 66b 66 66 66 00 
2c679 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
2c67d 66d 66 FF 66 66 
2c681 66e FF 66 00 18 
2c685 66f 7C 06 3C 60 
2c689 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
2c68d 671 66 36 18 0C 
2c691 672 66 62 00 38 
2c695 673 6C 38 1C F6 
2c699 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
2c69d 675 18 18 18 00 
2c6a1 676 00 00 00 00 
2c6a5 677 70 38 18 18 
2c6a9 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
2c6ad 679 0E 1C 18 18 
2c6b1 67a 1C 0E 00 00 
2c6b5 67b 66 3C FF 3C 
2c6b9 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
2c6bd 67d 18 18 7E 18 
2c6c1 67e 18 00 00 00 
2c6c5 67f 00 00 00 00 
2c6c9 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
2c6cd 681 00 00 7E 00 
2c6d1 682 00 00 00 00 
2c6d5 683 00 00 00 00 
2c6d9 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
2c6dd 685 60 30 18 0C 
2c6e1 686 06 02 00 00 
2c6e5 687 3C 66 76 6E 
2c6e9 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
2c6ed 689 18 1C 18 18 
2c6f1 68a 18 7E 00 00 
2c6f5 68b 3C 66 30 18 
2c6f9 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
2c6fd 68d 7E 30 18 30 
2c701 68e 66 3C 00 00 
2c705 68f 30 38 3C 36 
2c709 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
2c70d 691 7E 06 3E 60 
2c711 692 66 3C 00 00 
2c715 693 3C 06 3E 66 
2c719 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
2c71d 695 7E 60 30 18 
2c721 696 0C 0C 00 00 
2c725 697 3C 66 3C 66 
2c729 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
2c72d 699 3C 66 7C 60 
2c731 69a 30 1C 00 00 
2c735 69b 00 18 18 00 
2c739 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
2c73d 69d 00 18 18 00 
2c741 69e 18 18 0C 60 
2c745 69f 30 18 0C 18 
2c749 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
2c74d 6a1 00 7E 00 00 
2c751 6a2 7E 00 00 06 
2c755 6a3 0C 18 30 18 
2c759 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
2c75d 6a5 3C 66 30 18 
2c761 6a6 00 18 00 00 
2c765 6a7 3C 66 76 76 
2c769 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
2c76d 6a9 18 3C 66 66 
2c771 6aa 7E 66 00 00 
2c775 6ab 3E 66 3E 66 
2c779 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
2c77d 6ad 3C 66 06 06 
2c781 6ae 66 3C 00 00 
2c785 6af 1E 36 66 66 
2c789 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
2c78d 6b1 7E 06 3E 06 
2c791 6b2 06 7E 00 00 
2c795 6b3 7E 06 3E 06 
2c799 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
2c79d 6b5 7C 06 06 76 
2c7a1 6b6 66 7C 00 00 
2c7a5 6b7 66 66 7E 66 
2c7a9 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
2c7ad 6b9 7E 18 18 18 
2c7b1 6ba 18 7E 00 00 
2c7b5 6bb 60 60 60 60 
2c7b9 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
2c7bd 6bd 66 36 1E 1E 
2c7c1 6be 36 66 00 00 
2c7c5 6bf 06 06 06 06 
2c7c9 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
2c7cd 6c1 C6 EE FE D6 
2c7d1 6c2 C6 C6 00 00 
2c7d5 6c3 66 6E 7E 7E 
2c7d9 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
2c7dd 6c5 3C 66 66 66 
2c7e1 6c6 66 3C 00 00 
2c7e5 6c7 3E 66 66 3E 
2c7e9 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
2c7ed 6c9 3C 66 66 66 
2c7f1 6ca 36 6C 00 00 
2c7f5 6cb 3E 66 66 3E 
2c7f9 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
2c7fd 6cd 3C 06 3C 60 
2c801 6ce 60 3C 00 00 
2c805 6cf 7E 18 18 18 
2c809 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
2c80d 6d1 66 66 66 66 
2c811 6d2 66          | 	byte	$66[5]
2c812 6d2 7E 00 00 66 
2c816 6d3 66 66 66 3C 
2c81a 6d4 18 00 00 C6 
2c81e 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2c822 6d6 C6 00 00 66 
2c826 6d7 66 3C 3C 66 
2c82a 6d8 66 00 00 66 
2c82e 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2c832 6da 18 00 00 7E 
2c836 6db 30 18 0C 06 
2c83a 6dc 7E 00 00 78 
2c83e 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
2c842 6de 78 00 00 02 
2c846 6df 06 0C 18 30 
2c84a 6e0 60 00 00 1E 
2c84e 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
2c852 6e2 1E 00 00 10 
2c856 6e3 38 6C C6 00 
2c85a 6e4 00 00 00 00 
2c85e 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c862 6e6 FF 00 00 18 
2c866 6e7 3C 7E 7E 3C 
2c86a 6e8 18 00 00 00 
2c86e 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
2c872 6ea 7C 00 00 06 
2c876 6eb 06 3E 66 66 
2c87a 6ec 3E 00 00 00 
2c87e 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
2c882 6ee 3C 00 00 60 
2c886 6ef 60 7C 66 66 
2c88a 6f0 7C 00 00 00 
2c88e 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
2c892 6f2 3C 00 00 70 
2c896 6f3 18 7C 18 18 
2c89a 6f4 18 00 00 00 
2c89e 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
2c8a2 6f6 60 3E 00 06 
2c8a6 6f7 06 3E 66 66 
2c8aa 6f8 66 00 00 18 
2c8ae 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
2c8b2 6fa 3C 00 00 60 
2c8b6 6fb 00 60 60 60 
2c8ba 6fc 60 3C 00 06 
2c8be 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
2c8c2 6fe 66 00 00 1C 
2c8c6 6ff 18 18 18 18 
2c8ca 700 3C 00 00 00 
2c8ce 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
2c8d2 702 C6 00 00 00 
2c8d6 703 3E 66 66 66 
2c8da 704 66 00 00 00 
2c8de 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
2c8e2 706 3C 00 00 00 
2c8e6 707 3E 66 66 3E 
2c8ea 708 06 06 00 00 
2c8ee 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
2c8f2 70a 60 60 00 00 
2c8f6 70b 3E 66 06 06 
2c8fa 70c 06 00 00 00 
2c8fe 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
2c902 70e 3E 00 00 18 
2c906 70f 7E 18 18 18 
2c90a 710 70 00 00 00 
2c90e 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
2c912 712 7C 00 00 00 
2c916 713 66 66 66 3C 
2c91a 714 18 00 00 00 
2c91e 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
2c922 716 6C 00 00 00 
2c926 717 66 3C 18 3C 
2c92a 718 66 00 00 00 
2c92e 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
2c932 71a 30 1E 00 00 
2c936 71b 7E 30 18 0C 
2c93a 71c 7E 00 00 18 
2c93e 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
2c942 71e 3C 00 18 18 
2c946 71f 18 18 18 18 
2c94a 720 18 18 00 7E 
2c94e 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
2c952 722 60 00 10 18 
2c956 723 1C 1E 1C 18 
2c95a 724 10 00 08 18 
2c95e 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
2c962 726 08 00       | 	byte	$08, $00
2c964 727 00 00 00 00 
2c968 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
2c969 728 80 00 00 00 
2c96d 729 00 80 00 00 
2c971 72a 80 80 00 00 
2c975 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
2c979 72c 80 00 80 00 
2c97d 72d 00 40 80 00 
2c981 72e AA AA AA 00 
2c985 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
2c989 730 FF 00 00 00 
2c98d 731 00 FF 00 00 
2c991 732 FF FF 00 00 
2c995 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
2c999 734 FF 00 FF 00 
2c99d 735 00 FF FF 00 
2c9a1 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
2c9a4 737 00 00 00 00 
2c9a8 738 00          | ataripalette   file "ataripalettep2.def"
2c9a9 738 11 11 11 00 
2c9ad 739 22 22 22 00 
2c9b1 73a 33 33 33 00 
2c9b5 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
2c9b9 73c 55 55 55 00 
2c9bd 73d 66 66 66 00 
2c9c1 73e 77 77 77 00 
2c9c5 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
2c9c9 740 99 99 99 00 
2c9cd 741 AA AA AA 00 
2c9d1 742 BB BB BB 00 
2c9d5 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
2c9d9 744 DD DD DD 00 
2c9dd 745 EE EE EE 00 
2c9e1 746 FF FF FF 00 
2c9e5 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
2c9e9 748 00 14 40 00 
2c9ed 749 00 1E 60 00 
2c9f1 74a 00 28 80 00 
2c9f5 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
2c9f9 74c 00 3C BF 00 
2c9fd 74d 00 46 DF 00 
2ca01 74e 00 50 FF 00 
2ca05 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
2ca09 750 39 77 FF 00 
2ca0d 751 55 8A FF 00 
2ca11 752 71 9E FF 00 
2ca15 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
2ca19 754 AA C5 FF 00 
2ca1d 755 C6 D8 FF 00 
2ca21 756 E3 EC FF 00 
2ca25 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
2ca29 758 00 00 40 00 
2ca2d 759 00 00 60 00 
2ca31 75a 00 00 80 00 
2ca35 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
2ca39 75c 00 00 BF 00 
2ca3d 75d 00 00 DF 00 
2ca41 75e 00 00 FF 00 
2ca45 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
2ca49 760 39 39 FF 00 
2ca4d 761 55 55 FF 00 
2ca51 762 71 71 FF 00 
2ca55 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
2ca59 764 AA AA FF 00 
2ca5d 765 C6 C6 FF 00 
2ca61 766 E3 E3 FF 00 
2ca65 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
2ca69 768 20 00 40 00 
2ca6d 769 30 00 60 00 
2ca71 76a 40 00 80 00 
2ca75 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
2ca79 76c 60 00 BF 00 
2ca7d 76d 70 00 DF 00 
2ca81 76e 80 00 FF 00 
2ca85 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
2ca89 770 9C 39 FF 00 
2ca8d 771 AA 55 FF 00 
2ca91 772 B8 71 FF 00 
2ca95 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
2ca99 774 D5 AA FF 00 
2ca9d 775 E3 C6 FF 00 
2caa1 776 F1 E3 FF 00 
2caa5 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
2caa9 778 40 00 40 00 
2caad 779 60 00 60 00 
2cab1 77a 80 00 80 00 
2cab5 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
2cab9 77c BF 00 BF 00 
2cabd 77d DF 00 DF 00 
2cac1 77e FF 00 FF 00 
2cac5 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
2cac9 780 FF 39 FF 00 
2cacd 781 FF 55 FF 00 
2cad1 782 FF 71 FF 00 
2cad5 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
2cad9 784 FF AA FF 00 
2cadd 785 FF C6 FF 00 
2cae1 786 FF E3 FF 00 
2cae5 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
2cae9 788 40 00 20 00 
2caed 789 60 00 30 00 
2caf1 78a 80 00 40 00 
2caf5 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
2caf9 78c BF 00 60 00 
2cafd 78d DF 00 70 00 
2cb01 78e FF 00 80 00 
2cb05 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
2cb09 790 FF 39 9C 00 
2cb0d 791 FF 55 AA 00 
2cb11 792 FF 71 B8 00 
2cb15 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
2cb19 794 FF AA D5 00 
2cb1d 795 FF C6 E3 00 
2cb21 796 FF E3 F1 00 
2cb25 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
2cb29 798 40 00 00 00 
2cb2d 799 60 00 00 00 
2cb31 79a 80 00 00 00 
2cb35 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
2cb39 79c BF 00 00 00 
2cb3d 79d DF 00 00 00 
2cb41 79e FF 00 00 00 
2cb45 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
2cb49 7a0 FF 39 39 00 
2cb4d 7a1 FF 55 55 00 
2cb51 7a2 FF 71 71 00 
2cb55 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
2cb59 7a4 FF AA AA 00 
2cb5d 7a5 FF C6 C6 00 
2cb61 7a6 FF E3 E3 00 
2cb65 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
2cb69 7a8 40 10 00 00 
2cb6d 7a9 60 18 00 00 
2cb71 7aa 80 20 00 00 
2cb75 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
2cb79 7ac BF 30 00 00 
2cb7d 7ad DF 38 00 00 
2cb81 7ae FF 40 00 00 
2cb85 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
2cb89 7b0 FF 6A 39 00 
2cb8d 7b1 FF 80 55 00 
2cb91 7b2 FF 95 71 00 
2cb95 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
2cb99 7b4 FF BF AA 00 
2cb9d 7b5 FF D5 C6 00 
2cba1 7b6 FF EA E3 00 
2cba5 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
2cba9 7b8 40 20 00 00 
2cbad 7b9 60 30 00 00 
2cbb1 7ba 80 40 00 00 
2cbb5 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
2cbb9 7bc BF 60 00 00 
2cbbd 7bd DF 70 00 00 
2cbc1 7be FF 80 00 00 
2cbc5 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
2cbc9 7c0 FF 9C 39 00 
2cbcd 7c1 FF AA 55 00 
2cbd1 7c2 FF B8 71 00 
2cbd5 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
2cbd9 7c4 FF D5 AA 00 
2cbdd 7c5 FF E3 C6 00 
2cbe1 7c6 FF F1 E3 00 
2cbe5 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
2cbe9 7c8 40 30 00 00 
2cbed 7c9 60 48 00 00 
2cbf1 7ca 80 60 00 00 
2cbf5 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
2cbf9 7cc BF 90 00 00 
2cbfd 7cd DF A8 00 00 
2cc01 7ce FF C0 00 00 
2cc05 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
2cc09 7d0 FF CE 39 00 
2cc0d 7d1 FF D5 55 00 
2cc11 7d2 FF DC 71 00 
2cc15 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
2cc19 7d4 FF EA AA 00 
2cc1d 7d5 FF F1 C6 00 
2cc21 7d6 FF F8 E3 00 
2cc25 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
2cc29 7d8 30 40 00 00 
2cc2d 7d9 48 60 00 00 
2cc31 7da 60 80 00 00 
2cc35 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
2cc39 7dc 90 BF 00 00 
2cc3d 7dd A8 DF 00 00 
2cc41 7de C0 FF 00 00 
2cc45 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
2cc49 7e0 CE FF 39 00 
2cc4d 7e1 D5 FF 55 00 
2cc51 7e2 DC FF 71 00 
2cc55 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
2cc59 7e4 EA FF AA 00 
2cc5d 7e5 F1 FF C6 00 
2cc61 7e6 F8 FF E3 00 
2cc65 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
2cc69 7e8 00 40 00 00 
2cc6d 7e9 00 60 00 00 
2cc71 7ea 00 80 00 00 
2cc75 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
2cc79 7ec 00 BF 00 00 
2cc7d 7ed 00 DF 00 00 
2cc81 7ee 00 FF 00 00 
2cc85 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
2cc89 7f0 39 FF 39 00 
2cc8d 7f1 55 FF 55 00 
2cc91 7f2 71 FF 71 00 
2cc95 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
2cc99 7f4 AA FF AA 00 
2cc9d 7f5 C6 FF C6 00 
2cca1 7f6 E3 FF E3 00 
2cca5 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
2cca9 7f8 00 40 14 00 
2ccad 7f9 00 60 1E 00 
2ccb1 7fa 00 80 28 00 
2ccb5 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
2ccb9 7fc 00 BF 3C 00 
2ccbd 7fd 00 DF 46 00 
2ccc1 7fe 00 FF 50 00 
2ccc5 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
2ccc9 800 39 FF 77 00 
2cccd 801 55 FF 8A 00 
2ccd1 802 71 FF 9E 00 
2ccd5 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
2ccd9 804 AA FF C5 00 
2ccdd 805 C6 FF D8 00 
2cce1 806 E3 FF EC 00 
2cce5 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
2cce9 808 00 40 28 00 
2cced 809 00 60 3C 00 
2ccf1 80a 00 80 50 00 
2ccf5 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
2ccf9 80c 00 BF 78 00 
2ccfd 80d 00 DF 8C 00 
2cd01 80e 00 FF A0 00 
2cd05 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
2cd09 810 39 FF B5 00 
2cd0d 811 55 FF C0 00 
2cd11 812 71 FF CA 00 
2cd15 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
2cd19 814 AA FF DF 00 
2cd1d 815 C6 FF EA 00 
2cd21 816 E3 FF F4 00 
2cd25 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
2cd29 818 00 40 40 00 
2cd2d 819 00 60 60 00 
2cd31 81a 00 80 80 00 
2cd35 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
2cd39 81c 00 BF BF 00 
2cd3d 81d 00 DF DF 00 
2cd41 81e 00 FF FF 00 
2cd45 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
2cd49 820 39 FF FF 00 
2cd4d 821 55 FF FF 00 
2cd51 822 71 FF FF 00 
2cd55 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
2cd59 824 AA FF FF 00 
2cd5d 825 C6 FF FF 00 
2cd61 826 E3 FF FF 00 
2cd65 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
2cd69 828 00 28 40 00 
2cd6d 829 00 3C 60 00 
2cd71 82a 00 50 80 00 
2cd75 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
2cd79 82c 00 78 BF 00 
2cd7d 82d 00 8C DF 00 
2cd81 82e 00 A0 FF 00 
2cd85 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
2cd89 830 39 B5 FF 00 
2cd8d 831 55 C0 FF 00 
2cd91 832 71 CA FF 00 
2cd95 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
2cd99 834 AA DF FF 00 
2cd9d 835 C6 EA FF 00 
2cda1 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
2cda4 837             | 
2cda4 837             | '**********************************************************************************
2cda4 837             | '
2cda4 837             | '        Timings and colors definitions
2cda4 837             | '
2cda4 837             | '**********************************************************************************
2cda4 837             | 
2cda4 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
2cda4 837 10 00 00 00 
2cda8 838 50 00 00 00 
2cdac 839 0C 00 00 00 
2cdb0 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
2cdb4 83b 08 00 00 00 
2cdb8 83c 04 00 00 00 
2cdbc 83d 08 00 00 00 
2cdc0 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
2cdc4 83f 40 02 00 00 
2cdc8 840 6A 8C 15 14 
2cdcc 841 FB 06 B7 01 
2cdd0 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
2cdd4 843 00 00 00 00 
2cdd8 844 C0 00 00 00 
2cddc 845 00 00 00 00 
2cde0 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cde4 847 00 75 C7 97 
2cde8 848 27 47 F6 0A 
2cdec 849 05 79 CB 9B 
2cdf0 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
2cdf4 84b             | 
2cdf4 84b             | ''--------  Initialization  ----------------------------------------------------------------
2cdf4 84b             | 
2cdf4 84b 28 0C 64 FD | hdmi            setq    #6
2cdf8 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
2cdfc 84d 28 10 64 FD |                 setq    #8
2ce00 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
2ce04 84f             | 
2ce04 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
2ce08 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
2ce0c 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
2ce10 852 D6 C6 01 F1 |                 add     t1,hbase
2ce14 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
2ce18 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
2ce1c 855 7B 0B 80 5F 
2ce20 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
2ce24 857 66 66 86 FF 
2ce28 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
2ce2c 859             | '
2ce2c 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
2ce30 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
2ce34 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
2ce38 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
2ce3c 85d             | 
2ce3c 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
2ce40 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
2ce44 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
2ce48 860             | 
2ce48 860             | ''--------  frame rendering main loop  ---------------------------------------------------
2ce48 860             | 
2ce48 860 28 06 64 FD | p101            setq 	#3
2ce4c 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
2ce50 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
2ce54 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
2ce58 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
2ce5c 865 00 A0 05 F6 |                 mov     dlinum, #0
2ce60 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
2ce64 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
2ce68 868             | 
2ce68 868             | 
2ce68 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
2ce6c 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
2ce70 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
2ce74 86b             |                 
2ce74 86b             | 
2ce74 86b             | 
2ce74 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
2ce74 86b             |   
2ce74 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
2ce78 86c 29 FE 65 3D |          if_nc  setq2   #255
2ce7c 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
2ce80 86e             | 
2ce80 86e             | '' -----   up porch (before the picture)
2ce80 86e             | 
2ce80 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
2ce84 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
2ce88 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
2ce8c 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
2ce90 872             |  
2ce90 872             |    
2ce90 872             |  
2ce90 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2ce94 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
2ce98 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
2ce9c 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2cea0 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
2cea4 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
2cea8 878             | 
2cea8 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2ceac 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
2ceb0 87a 48 00 B0 FD | 		call    #dli
2ceb4 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
2ceb8 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
2cebc 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
2cec0 87e             |                 	
2cec0 87e             |                 
2cec0 87e             | 
2cec0 87e             |  
2cec0 87e             | '' ------- the main screen drawing starts here
2cec0 87e             | 
2cec0 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
2cec4 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
2cec8 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
2cecc 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
2ced0 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
2ced4 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
2ced8 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
2cedc 885             |               
2cedc 885             | 
2cedc 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
2cee0 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
2cee4 887             | 
2cee4 887             | ' ---------------- All visible lines displayed now, start vblank  
2cee4 887             | 
2cee4 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
2cee8 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
2ceec 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
2cef0 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
2cef4 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
2cef8 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
2cefc 88d             | 
2cefc 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
2cefc 88d             | 
2cefc 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
2cefc 88d             | 
2cefc 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
2cf00 88e             | 
2cf00 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
2cf04 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
2cf08 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
2cf0c 891             | 
2cf0c 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
2cf10 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
2cf14 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
2cf18 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
2cf1c 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
2cf20 896             | 
2cf20 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
2cf24 897 DD C6 41 F8 |                 getnib  t1,dl,#0
2cf28 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
2cf2c 899 70 00 90 AD |     if_z        jmp     #preload
2cf30 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
2cf34 89b 94 00 90 AD |     if_z        jmp     #preload2
2cf38 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
2cf3c 89d 0C 00 90 AD |     if_z        jmp     #p390
2cf40 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
2cf44 89f 28 00 90 AD |     if_z        jmp     #p391  
2cf48 8a0             | 
2cf48 8a0 2D 00 64 FD | p308            ret
2cf4c 8a1             |    
2cf4c 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
2cf50 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
2cf54 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
2cf58 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
2cf5c 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
2cf60 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
2cf64 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
2cf68 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
2cf6c 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
2cf70 8aa             |  
2cf70 8aa             | '' --------  Reload palette. To do 
2cf70 8aa             | 
2cf70 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
2cf74 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
2cf78 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
2cf7c 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
2cf80 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
2cf84 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
2cf88 8b0 70 FF 9F FD |         	jmp     #dli                
2cf8c 8b1             |       
2cf8c 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
2cf8c 8b1             | 
2cf8c 8b1             | 
2cf8c 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
2cf8c 8b1             | 
2cf8c 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
2cf90 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
2cf94 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2cf98 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
2cf9c 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
2cfa0 8b6             |         
2cfa0 8b6             | '' -------------- Preload a line from PSRAM        
2cfa0 8b6             |         
2cfa0 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
2cfa4 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
2cfa8 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
2cfac 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
2cfb0 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
2cfb4 8bb             | 
2cfb4 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
2cfb8 8bc 32 B7 01 F6 |                 mov     buf2,a1024
2cfbc 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
2cfc0 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
2cfc4 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
2cfc8 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
2cfcc 8c1             |  
2cfcc 8c1             |  
2cfcc 8c1             | preload2      '  incmod  dlinum,#3
2cfcc 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
2cfd0 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
2cfd4 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
2cfd8 8c4 28 02 64 FD |                 setq	#1
2cfdc 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
2cfe0 8c6             |                 
2cfe0 8c6             | 
2cfe0 8c6             | '' -------------- Draw sprites
2cfe0 8c6             | 
2cfe0 8c6 CF 5C 02 F6 | sprite          mov t8,frames
2cfe4 8c7 10 5C 0E F5 | 		and t8,#16 wz
2cfe8 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
2cfec 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
2cff0 8ca             | 		
2cff0 8ca             | 
2cff0 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
2cff4 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
2cff8 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
2cffc 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
2d000 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
2d004 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
2d008 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
2d00c 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
2d010 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
2d014 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
2d018 8d4 01 52 86 F1 |                 sub     sprite_h,#1
2d01c 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
2d020 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
2d024 8d7             | 
2d024 8d7             | 
2d024 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
2d028 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
2d02c 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
2d030 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
2d034 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
2d038 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
2d03c 8dd 00 5E 06 F6 |                 mov 	t9,#0
2d040 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
2d044 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
2d048 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
2d04c 8e1             |      
2d04c 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
2d050 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
2d054 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
2d058 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
2d05c 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
2d060 8e6             |                 
2d060 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
2d064 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
2d068 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
2d06c 8e9             |   		
2d06c 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
2d070 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
2d074 8eb             | 
2d074 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
2d078 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
2d07c 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
2d080 8ee             |  
2d080 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
2d084 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
2d088 8f0 10 00 90 CD |      if_c 	jmp     #p899		
2d08c 8f1             | 	
2d08c 8f1             | 	
2d08c 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
2d090 8f2 28 CD 01 F1 | 		add	t4,sprite_w
2d094 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
2d098 8f4             | 
2d098 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
2d09c 8f5             | 
2d09c 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
2d0a0 8f6 01 58 86 F1 | 	 	sub     t6,#1
2d0a4 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
2d0a8 8f8             | 
2d0a8 8f8 28 58 62 FD |                 setq   	t6
2d0ac 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
2d0b0 8fa 28 5D 02 F6 |                 mov t8,sprite_w
2d0b4 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
2d0b8 8fc 24 00 90 AD |         if_z    jmp #p898
2d0bc 8fd             |          
2d0bc 8fd             |         
2d0bc 8fd 70 5F 06 F6 |                 mov  t9,#368
2d0c0 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
2d0c4 8ff             | 
2d0c4 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
2d0c8 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
2d0cc 901 FF FF 7F FF 
2d0d0 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
2d0d4 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
2d0d8 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
2d0dc 905 2D 01 00 F5 |                 and 0-0, t7
2d0e0 906             |                
2d0e0 906             | 
2d0e0 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
2d0e4 907 E5 E0 7A FA |                 wmlong 368,t3				
2d0e8 908             |                 
2d0e8 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
2d0ec 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
2d0f0 90a 2D 00 64 FD |                 ret
2d0f4 90b             | 	
2d0f4 90b             | 	
2d0f4 90b             |                
2d0f4 90b             |  
2d0f4 90b             | '' -------------- Graphics line ------------------------------------------------------------
2d0f4 90b             |  
2d0f4 90b             | 
2d0f4 90b             | '' consts and vars
2d0f4 90b             | 
2d0f4 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
2d0f8 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
2d0fc 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
2d100 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
2d104 90f             | 
2d104 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
2d108 910             | 
2d108 910             | '------ these longs will be set by setmode function
2d108 910             | 
2d108 910 00 00 00 00 | m_bs            long    0        'blanks before sync
2d10c 911 00 00 00 00 | m_sn            long    0        'sync
2d110 912 00 00 00 00 | m_bv            long    0        'blanks before visible
2d114 913 00 00 00 00 | m_vi            long    0        'visible pixels #
2d118 914             | 'm_border        long    0        'left/right borders
2d118 914 00 00 00 00 | i_upporch       long    0        'up porch lines
2d11c 915 00 00 00 00 | i_vsync         long    0        'vsync lines
2d120 916 00 00 00 00 | i_downporch     long    0        'down porch lines
2d124 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
2d128 918 00 00 00 00 | i_totalvis      long    0
2d12c 919             | 
2d12c 919             | '-------------------------------------
2d12c 919             |  
2d12c 919 00 00 00 00 | linenum         long    0
2d130 91a 00 00 00 00 | frames          long    0
2d134 91b 00 00 00 00 | dlinum long 0
2d138 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
2d13c 91d             | 
2d13c 91d 00 00 00 00 | vblankptr       long    0
2d140 91e 00 00 00 00 | modeptr         long    0
2d144 91f 00 00 00 00 | paletteptr      long    0
2d148 920 00 00 00 00 | dlptr           long    0
2d14c 921 01 00 00 00 | hbase           long    1
2d150 922 00 00 00 00 | mailbox         long    0
2d154 923 00 00 00 00 | spriteptr          long 0
2d158 924             | 
2d158 924 00 00 00 00 | cmd             long    0
2d15c 925 00 B0 07 00 | buf1            long    $80000-16384-4096
2d160 926 00 04 00 00 | buf2            long    1024
2d164 927 01 00 00 00 | dlptr2          long    1
2d168 928 01 00 00 00 | dl              long    1
2d16c 929             | 
2d16c 929 00 00 00 00 | buf1c long 0
2d170 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
2d174 92b 01 00 00 00 | framebuf2       long    1
2d178 92c 01 00 00 00 | hsync0          long    1
2d17c 92d 01 00 00 00 | hsync1          long    1
2d180 92e             | 
2d180 92e 01 00 00 00 | t1              long    1
2d184 92f 00 00 00 00 | t2 long 0
2d188 930 00 00 00 00 | t3 long 0
2d18c 931 00 00 00 00 | t4 long 0
2d190 932             | 
2d190 932 00 00 00 00 | rcnt            long    0  'dl repeat count
2d194 933 00 00 00 00 | rcnt2           long    0
2d198 934 00 00 00 00 | rcnt2a          long    0
2d19c 935 00 00 00 00 | roffset         long    0
2d1a0 936 00 00 00 00 | rdl             long    0  'dl repeat line
2d1a4 937 00 00 00 00 | dlc             long    0  'dl command
2d1a8 938             | 
2d1a8 938 FF FF FF FF | affffffff       long    $ffffffff
2d1ac 939 00 00 00 00 | sprite1pointer long 0
2d1b0 93a 00 00 00 00 | sprite1xy      long 0
2d1b4 93b 00 00 00 00 | sprite1wh      long 0
2d1b8 93c 00 00 00 00 | sprite2pointer long 0
2d1bc 93d 00 00 00 00 | sprite2xy      long 0
2d1c0 93e 00 00 00 00 | sprite2wh      long 0
2d1c4 93f 00 00 00 00 | sprite3pointer long 0
2d1c8 940 00 00 00 00 | sprite3xy      long 0
2d1cc 941 00 00 00 00 | sprite3wh      long 0
2d1d0 942 00 00 00 00 | sprite4pointer long 0
2d1d4 943 00 00 00 00 | sprite4xy      long 0
2d1d8 944 00 00 00 00 | sprite4wh      long 0
2d1dc 945 00 00 00 00 | sprite5pointer long 0
2d1e0 946 00 00 00 00 | sprite5xy      long 0
2d1e4 947 00 00 00 00 | sprite5wh      long 0
2d1e8 948 00 00 00 00 | sprite6pointer long 0
2d1ec 949 00 00 00 00 | sprite6xy      long 0
2d1f0 94a 00 00 00 00 | sprite6wh      long 0
2d1f4 94b 00 00 00 00 | sprite7pointer long 0
2d1f8 94c 00 00 00 00 | sprite7xy      long 0
2d1fc 94d 00 00 00 00 | sprite7wh      long 0
2d200 94e 00 00 00 00 | sprite8pointer long 0
2d204 94f 00 00 00 00 | sprite8xy      long 0
2d208 950 00 00 00 00 | sprite8wh      long 0
2d20c 951 00 00 00 00 | sprite9pointer long 0
2d210 952 00 00 00 00 | sprite9xy      long 0
2d214 953 00 00 00 00 | sprite9wh      long 0
2d218 954 00 00 00 00 | sprite10pointer long 0
2d21c 955 00 00 00 00 | sprite10xy      long 0
2d220 956 00 00 00 00 | sprite10wh      long 0
2d224 957 00 00 00 00 | sprite11pointer long 0
2d228 958 00 00 00 00 | sprite11xy      long 0
2d22c 959 00 00 00 00 | sprite11wh      long 0
2d230 95a 00 00 00 00 | sprite12pointer long 0
2d234 95b 00 00 00 00 | sprite12xy      long 0
2d238 95c 00 00 00 00 | sprite12wh      long 0
2d23c 95d 00 00 00 00 | sprite13pointer long 0
2d240 95e 00 00 00 00 | sprite13xy      long 0
2d244 95f 00 00 00 00 | sprite13wh      long 0
2d248 960 00 00 00 00 | sprite14pointer long 0
2d24c 961 00 00 00 00 | sprite14xy      long 0
2d250 962 00 00 00 00 | sprite14wh      long 0
2d254 963 00 00 00 00 | sprite15pointer long 0
2d258 964 00 00 00 00 | sprite15xy      long 0
2d25c 965 00 00 00 00 | sprite15wh      long 0
2d260 966 00 00 00 00 | sprite16pointer long 0
2d264 967 00 00 00 00 | sprite16xy      long 0
2d268 968 00 00 00 00 | sprite16wh      long 0
2d26c 969 00 00 00 00 | sprite17pointer long 0
2d270 96a 00 00 00 00 | sprite17xy      long 0
2d274 96b 00 00 00 00 | sprite17wh      long 0
2d278 96c 00 00 00 00 | sprite18pointer long 0
2d27c 96d 00 00 00 00 | sprite18xy      long 0
2d280 96e 00 00 00 00 | sprite18wh      long 0
2d284 96f 00 00 00 00 | spritenum long 0
2d288 970             | 
2d288 970 00 00 00 00 | spriteline long 0
2d28c 971 84 03 00 00 | sprite_x long 900
2d290 972 00 00 00 00 | sprite_y long 0
2d294 973 10 00 00 00 | sprite_w long 16
2d298 974 40 00 00 00 | sprite_h long 64
2d29c 975 00 00 00 00 | l2 long 0
2d2a0 976 00 00 00 00 | t5 long 0
2d2a4 977 00 00 00 00 | t6 long 0
2d2a8 978 00 00 00 00 | t7 long 0
2d2ac 979 00 00 00 00 | t8 long 0
2d2b0 97a 00 00 00 00 | t9 long 0
2d2b4 97b 00 00 00 00 | preloadaddr long 0
2d2b8 97c 00 00 00 00 | preloadlineaddr long 0
2d2bc 97d 00 04 00 00 | a1024 long 1024
2d2c0 97e             | 
2d2c0 97e E0 03 00 00 | aa long 992
2d2c4 97f FF 03 00 00 | a1023 long 1023
2d2c8 980 00 10 00 00 | a4096 long 4096
2d2cc 981             |  fit 368
2d2cc 981             | _psram_spin2_dat_
2d2cc 981 00 00 00 00 
      ...             
2d3c4 9bf 00 00 00 00 
2d3c8 9c0 00 00 00 00 |     listdata long 0[8*8]
2d3cc 9c1             |             orgh
2d3cc                 | 
2d3cc                 | ' driver state
2d3cc     FF FF FF FF | drivercog   long    -1  ' COG id of driver
2d3d0     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
2d3d4                 | 
2d3d4                 | ' delay profile
2d3d4     07 00 00 00 
2d3d8     00 CF 7B 05 
2d3dc     80 D1 F0 08 
2d3e0     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
2d3e4     80 C4 60 0F 
2d3e8     80 39 7A 12 
2d3ec     40 2D D9 13 
2d3f0     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
2d3f4                 | 
2d3f4                 | ' data to be passed to driver when starting it
2d3f4                 | startupData
2d3f4     00 00 00 00 |     long    0           ' current frequency
2d3f8     00 00 00 00 |     long    FLAGS       ' optional flags for driver
2d3fc     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
2d400     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
2d404     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
2d408     14 D4 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
2d40c     94 D4 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
2d410     B4 D4 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
2d414                 | 
2d414                 | ' data for memory
2d414                 | deviceData
2d414                 |     ' 16 bank parameters follow (16MB per bank)
2d414     00 00 00 00 
      ...             
2d44c     00 00 00 00 
2d450     00 00 00 00 |     long    0[16]                               ' banks 0-15
2d454                 |     ' 16 banks of pin parameters follow
2d454     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
2d458     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
2d45c     FF FF FF FF 
      ...             
2d48c     FF FF FF FF 
2d490     FF FF FF FF |     long    -1[14]                              ' banks 2-15
2d494                 | 
2d494                 | ' data for COG polling
2d494                 | qosData 
2d494     00 00 FF FF 
2d498     00 00 FF FF 
2d49c     00 00 FF FF 
2d4a0     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
2d4a4     00 00 FF FF 
2d4a8     00 00 FF FF 
2d4ac     00 00 FF FF 
2d4b0     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
2d4b4                 |     
2d4b4                 | ' mailbox storage
2d4b4                 | 
2d4b4                 | mailboxes
2d4b4     00 00 00 00 
      ...             
2d50c     00 00 00 00 
2d510     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
2d514                 | 	alignl
2d514                 | _psram16drv_spin2_dat_
2d514                 |                             orgh
2d514     00 00 00 00 
      ...             
2d52c     00 00 00 00 
2d530     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
2d534                 | 
2d534                 | driver_start
2d534                 |                             org
2d534 000             | '..................................................................................................
2d534 000             | ' Memory layout for COG RAM once operational:
2d534 000             | '
2d534 000             | '  COG RAM address      Usage
2d534 000             | '  ---------------      ----
2d534 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
2d534 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
2d534 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
2d534 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
2d534 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
2d534 000             | '  ~$198-$1F3           State and register variables
2d534 000             | '
2d534 000             | ' Also during driver COG startup:
2d534 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
2d534 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
2d534 000             | '..................................................................................................
2d534 000             |                             
2d534 000             | ' Mailbox storage after vector initialization
2d534 000             | 
2d534 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
2d538 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
2d53c 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
2d540 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
2d544 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
2d548 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
2d54c 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
2d550 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
2d554 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
2d558 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
2d55c 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
2d560 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
2d564 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
2d568 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
2d56c 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
2d570 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
2d574 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
2d578 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
2d57c 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
2d580 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
2d584 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
2d588 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
2d58c 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
2d590 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
2d594 018             | 
2d594 018             | ' Mailbox parameter addresses per COG once patched
2d594 018             |                             
2d594 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
2d598 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
2d59c 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
2d5a0 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
2d5a4 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
2d5a8 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
2d5ac 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
2d5b0 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
2d5b4 020             | 
2d5b4 020             | '..................................................................................................
2d5b4 020             | ' Per COG request and state setup and service branching
2d5b4 020             |         
2d5b4 020             | cog0                 
2d5b4 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
2d5b8 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
2d5bc 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
2d5c0 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
2d5c4 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d5c8 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d5cc 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
2d5d0 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
2d5d4 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
2d5d8 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d5dc 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d5e0 02b 33 CA 63 FD |                             execf   request-0               'jump to service
2d5e4 02c             | cog1                        
2d5e4 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
2d5e8 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
2d5ec 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
2d5f0 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
2d5f4 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d5f8 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d5fc 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
2d600 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
2d604 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
2d608 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d60c 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d610 037 33 CA 63 FD |                             execf   request-0               'jump to service
2d614 038             | cog2                         
2d614 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
2d618 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
2d61c 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
2d620 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
2d624 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d628 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d62c 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
2d630 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
2d634 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
2d638 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d63c 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d640 043 33 CA 63 FD |                             execf   request-0               'jump to service
2d644 044             | cog3                        
2d644 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
2d648 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
2d64c 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
2d650 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
2d654 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d658 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d65c 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
2d660 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
2d664 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
2d668 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d66c 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d670 04f 33 CA 63 FD |                             execf   request-0               'jump to service
2d674 050             | cog4                        
2d674 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
2d678 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
2d67c 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
2d680 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
2d684 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d688 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d68c 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
2d690 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
2d694 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
2d698 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d69c 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d6a0 05b 33 CA 63 FD |                             execf   request-0               'jump to service
2d6a4 05c             | cog5                        
2d6a4 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
2d6a8 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
2d6ac 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
2d6b0 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
2d6b4 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d6b8 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d6bc 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
2d6c0 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
2d6c4 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
2d6c8 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d6cc 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d6d0 067 33 CA 63 FD |                             execf   request-0               'jump to service
2d6d4 068             | cog6                        
2d6d4 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
2d6d8 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
2d6dc 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
2d6e0 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
2d6e4 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d6e8 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d6ec 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
2d6f0 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
2d6f4 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
2d6f8 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d6fc 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d700 073 33 CA 63 FD |                             execf   request-0               'jump to service
2d704 074             | cog7                        
2d704 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
2d708 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
2d70c 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
2d710 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
2d714 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d718 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d71c 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
2d720 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
2d724 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
2d728 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d72c 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d730 07f 33 CA 63 FD |                             execf   request-0               'jump to service
2d734 080             |                             fit     128
2d734 080             | 
2d734 080             |                             fit     128
2d734 080             | pad                         long    0[128-$]                'align init code to $80
2d734 080             | 
2d734 080             | '..................................................................................................
2d734 080             | 
2d734 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
2d734 080             | 
2d734 080             | init                        
2d734 080             |                             ' get driver scratch long address in hub
2d734 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
2d738 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
2d73c 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
2d740 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
2d744 084             |                     
2d744 084             |                             ' read in the additional LUT RAM code
2d744 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
2d748 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
2d74c 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
2d750 087             | 
2d750 087             |                             ' read the startup parameters
2d750 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
2d754 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
2d758 089             | 
2d758 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
2d758 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
2d75c 08a             | 
2d75c 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
2d760 08b 01 00 00 5F 
2d764 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
2d768 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
2d76c 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
2d770 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
2d774 090             | 
2d774 090             |                             ' setup data pin modes and data bus pin group in streamer commands
2d774 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
2d778 091 01 00 00 FF 
2d77c 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
2d780 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
2d784 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
2d788 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
2d78c 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
2d790 097 08 DE 47 F5 |                             or      a, #8
2d794 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
2d798 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
2d79c 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
2d7a0 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
2d7a4 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
2d7a8 09d 01 DE 07 F1 |                             add     a, #1
2d7ac 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
2d7b0 09f             |  
2d7b0 09f             |                             ' setup device control pin states
2d7b0 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
2d7b4 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
2d7b8 0a1 01 00 00 FF 
2d7bc 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
2d7c0 0a3             | 
2d7c0 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
2d7c4 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
2d7c8 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
2d7cc 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
2d7d0 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
2d7d4 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
2d7d8 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
2d7dc 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
2d7e0 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
2d7e4 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
2d7e8 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
2d7ec 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
2d7f0 0af             | pinloop
2d7f0 0af             |                             ' generate minimum CE high time before access
2d7f0 0af A1 07 00 FF 
2d7f4 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
2d7f8 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
2d7fc 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
2d800 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
2d804 0b4 1F DE 63 FD |                             waitx   a                       'delay
2d808 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
2d80c 0b6             | 
2d80c 0b6             |                             ' setup the COG mailboxes and addresses 
2d80c 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
2d810 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
2d814 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
2d818 0b9             | 
2d818 0b9 28 2E 64 FD |                             setq    #24-1
2d81c 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
2d820 0bb             | 
2d820 0bb             |                             ' setup the polling loop for active COGs 
2d820 0bb 01 C2 63 FD |                             cogid   id
2d824 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
2d828 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
2d82c 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
2d830 0bf 0A F0 07 F6 |                             mov     ptra, #10
2d834 0c0 E1 F1 03 FA |                             mul     ptra, id
2d838 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
2d83c 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
2d840 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
2d844 0c4 03 C2 07 FA |                             mul     id, #3
2d848 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
2d84c 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
2d850 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
2d854 0c8 D8 01 B0 FD |                             call    #reloadcogs
2d858 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
2d85c 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
2d860 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
2d860 0cb D8 E5 B7 F9 |                             setd    d, #addr1
2d864 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
2d868 0cd 08 04 DC FC |                             rep     #2, #8
2d86c 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
2d870 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
2d874 0d0             | 
2d874 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
2d874 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
2d874 0d0 01 C2 63 FD |                             cogid   id
2d878 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
2d87c 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
2d880 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
2d884 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
2d888 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
2d88c 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
2d890 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
2d894 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
2d898 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
2d89c 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2d8a0 0db 3F E4 A7 F9 |                             alti    d, #%111_111
2d8a4 0dc 00 00 00 F6 |                             mov     0-0, 0-0
2d8a8 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
2d8ac 0de A5 E5 03 F1 |                             add     d, const512
2d8b0 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2d8b4 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
2d8b8 0e1 00 00 00 F6 |                             mov     0-0, 0-0
2d8bc 0e2             |                             
2d8bc 0e2             |                             ' setup register values for control vector loop setup after we return
2d8bc 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
2d8c0 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
2d8c4 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
2d8c8 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
2d8cc 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
2d8d0 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
2d8d4 0e8 D0 C3 8F F9 |                             altd    id, #id0
2d8d8 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
2d8dc 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
2d8e0 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
2d8e4 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
2d8e8 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
2d8ec 0ee             |  
2d8ec 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
2d8f0 0ef 07 CA 07 F5 |                             and     request, #7
2d8f4 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
2d8f8 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
2d8fc 0f2             |                             fit     $100                    'ensure all init code fits this space
2d8fc 0f2             | 
2d8fc 0f2             |                             fit     $100                    'ensure all init code fits this space
2d8fc 0f2             | 
2d8fc 0f2 00 00 00 00 
      ...             
2d92c 0fe 00 00 00 00 
2d930 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
2d934 100             | 
2d934 100             | '..................................................................................................
2d934 100             | ' Error result handling and COG notification of request completion
2d934 100             | 
2d934 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
2d938 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
2d93c 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
2d940 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
2d944 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
2d948 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
2d94c 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
2d950 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
2d954 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
2d958 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
2d95c 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
2d960 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
2d964 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
2d968 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
2d96c 10e             | ' Poller re-starts here after a COG is serviced
2d96c 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
2d970 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
2d974 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
2d978 111             | ' Main dynamic polling loop repeats until a request arrives
2d978 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
2d97c 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
2d980 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
2d984 114             | 
2d984 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
2d988 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
2d98c 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
2d990 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
2d994 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
2d998 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
2d99c 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
2d9a0 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
2d9a4 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
2d9a8 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
2d9ac 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
2d9b0 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
2d9b4 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
2d9b8 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
2d9bc 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
2d9c0 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
2d9c4 124             | 
2d9c4 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
2d9c8 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
2d9cc 126             |  
2d9cc 126             | '..................................................................................................
2d9cc 126             | ' List handler                               
2d9cc 126             | 
2d9cc 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
2d9d0 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
2d9d4 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
2d9d8 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
2d9dc 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
2d9e0 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
2d9e4 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
2d9e8 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
2d9ec 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
2d9f0 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
2d9f4 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
2d9f8 131 33 00 60 FD |                             execf   0-0                     'process the request 
2d9fc 132             | 
2d9fc 132             | '..................................................................................................
2d9fc 132             | ' Restoring per COG state and resuming where we left off
2d9fc 132             | 
2d9fc 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
2da00 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
2da04 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
2da08 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
2da0c 136 D8 CB FB F8 |                             getbyte request, addr1, #3
2da10 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
2da14 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
2da18 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
2da1c 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
2da20 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
2da24 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
2da28 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
2da2c 13e             |                    
2da2c 13e             | '..................................................................................................
2da2c 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
2da2c 13e             | 
2da2c 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
2da30 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
2da34 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
2da38 141 D0 DF B7 F9 |                             setd    a, #id0
2da3c 142 D8 DF BF F9 |                             sets    a, #addr1
2da40 143 FE FF FF FF 
2da44 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
2da48 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
2da4c 146 3F DE A7 F9 |                             alti    a, #%111_111 
2da50 147 00 00 F0 F9 |                             muxq    0-0, 0-0
2da54 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
2da58 149 01 E2 63 FD |                             cogid   c
2da5c 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
2da60 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
2da64 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
2da68 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
2da6c 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
2da70 14f 00 E0 03 F6 |                             mov     b, 0-0
2da74 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
2da78 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
2da7c 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
2da80 153 0C 00 90 AD |             if_z            jmp     #excluded               
2da84 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
2da88 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
2da8c 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
2da90 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
2da94 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
2da98 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
2da9c 15a             | 
2da9c 15a             | 'determine priority cogs and build instructions for the polling sequence
2da9c 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
2daa0 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
2daa4 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
2daa8 15d             | 
2daa8 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
2daac 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
2dab0 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
2dab4 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
2dab8 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
2dabc 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
2dac0 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
2dac4 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
2dac8 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
2dacc 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
2dad0 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
2dad4 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
2dad8 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
2dadc 16a             | endprioloop
2dadc 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
2dae0 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
2dae4 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
2dae8 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
2daec 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
2daf0 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
2daf4 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
2daf8 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
2dafc 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
2db00 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
2db04 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
2db08 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
2db0c 176             | 
2db0c 176             | ' populate the round robin COG polling instructions
2db0c 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
2db10 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
2db14 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
2db18 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
2db1c 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
2db20 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
2db24 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
2db28 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
2db2c 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
2db30 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
2db34 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
2db38 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
2db3c 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
2db40 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
2db44 184             | '..................................................................................................
2db44 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
2db44 184             | 
2db44 184             | set_latency                                                 '            (a) set latency
2db44 184             | get_latency                                                 '            (b) get latency
2db44 184             | set_burst                                                   '            (c) set burst size of bank
2db44 184             | get_burst                                                   '            (d) get burst size of bank
2db44 184             |                                                             '            (e) dump state
2db44 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
2db48 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
2db4c 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
2db50 187             |                                                             ' | | | | e  account for following AUGS
2db50 187 04 00 00 FF 
2db54 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
2db58 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
2db5c 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
2db60 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
2db64 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
2db68 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
2db6c 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
2db70 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
2db74 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
2db78 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
2db7c 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
2db80 193             | 
2db80 193             | '..................................................................................................
2db80 193             | ' Misc EXECF code
2db80 193             | 
2db80 193 33 72 63 FD | start_read_exec             execf   newburstr
2db84 194 33 7C 63 FD | start_write_exec            execf   resumewrites
2db88 195 33 78 63 FD | continue_read_exec          execf   lockedreads
2db8c 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
2db90 197             | 
2db90 197             | '..................................................................................................
2db90 197             | ' Variables
2db90 197             | 
2db90 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
2db94 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
2db98 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
2db9c 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
2dba0 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
2dba4 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
2dba8 19d             | 
2dba8 19d 00 00 00 80 | xfreq1          long    $80000000
2dbac 19e 00 00 00 40 | xfreq2          long    $40000000
2dbb0 19f 03 00 00 00 | delay           long    3
2dbb4 1a0             | 
2dbb4 1a0             | lutcodeaddr                 
2dbb4 1a0             | startupparams
2dbb4 1a0             | excludedcogs                                    'careful: shared register use!
2dbb4 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
2dbb8 1a1 00 00 00 00 | flags           long    0
2dbbc 1a2             | mask                                            'careful: shared register use!
2dbbc 1a2 00 00 00 00 | resetmaskA      long    0
2dbc0 1a3             | limit                                           'careful: shared register use!
2dbc0 1a3 00 00 00 00 | resetmaskB      long    0
2dbc4 1a4 00 00 00 00 | datapins        long    0
2dbc8 1a5             | const512                                        'careful: shared register use!
2dbc8 1a5 00 00 00 00 | devicelist      long    0
2dbcc 1a6 00 00 00 00 | coglist         long    0
2dbd0 1a7 00 00 00 00 | mbox            long    0 
2dbd4 1a8             | 
2dbd4 1a8             | clkpin                                          'shared with code patched during init
2dbd4 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
2dbd8 1a9             | cspin                                           'shared with code patched during init
2dbd8 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
2dbdc 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
2dbe0 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
2dbe4 1ac 01 00 00 00 | clkdelay        long    1
2dbe8 1ad 00 00 00 00 | regdatabus      long    0
2dbec 1ae             | 
2dbec 1ae 10 00 00 00 | deviceaddr      long    $10
2dbf0 1af             | rrcounter
2dbf0 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
2dbf4 1b0             | 
2dbf4 1b0             | ' jump addresses for the per COG handlers
2dbf4 1b0 20 00 00 00 | cog0_handler    long    cog0
2dbf8 1b1 2C 00 00 00 | cog1_handler    long    cog1
2dbfc 1b2 38 00 00 00 | cog2_handler    long    cog2
2dc00 1b3 44 00 00 00 | cog3_handler    long    cog3
2dc04 1b4 50 00 00 00 | cog4_handler    long    cog4
2dc08 1b5 5C 00 00 00 | cog5_handler    long    cog5
2dc0c 1b6 68 00 00 00 | cog6_handler    long    cog6
2dc10 1b7 74 00 00 00 | cog7_handler    long    cog7
2dc14 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
2dc18 1b9             | 
2dc18 1b9             | ' EXECF sequences
2dc18 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
2dc1c 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
2dc20 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
2dc24 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
2dc28 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
2dc2c 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
2dc30 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
2dc34 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
2dc34 1c0             | 
2dc34 1c0             | 
2dc34 1c0             | ' SKIPF sequences
2dc34 1c0             | skiptable
2dc34 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
2dc38 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
2dc3c 1c2 00 00 00 00 |                 long    0                      ' read modify write long
2dc40 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
2dc44 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
2dc48 1c5 00 00 00 00 | pattern2        long    0
2dc4c 1c6 00 00 00 00 | pattern3        long    0
2dc50 1c7 77 02 00 00 | singlelong      long    %1001110111  
2dc54 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
2dc58 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
2dc5c 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
2dc60 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
2dc64 1cc             | 
2dc64 1cc             | ' LUT RAM address values
2dc64 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
2dc68 1cd DD 02 00 00 | continue_read   long    continue_read_lut
2dc6c 1ce DB 02 00 00 | continue_write  long    continue_write_lut
2dc70 1cf F6 02 00 00 | noread          long    noread_lut
2dc74 1d0             | 
2dc74 1d0 00 00 00 00 | id0             long    0
2dc78 1d1 01 00 00 00 | id1             long    1
2dc7c 1d2 02 00 00 00 | id2             long    2
2dc80 1d3 03 00 00 00 | id3             long    3
2dc84 1d4 04 00 00 00 | id4             long    4
2dc88 1d5 05 00 00 00 | id5             long    5
2dc8c 1d6 06 00 00 00 | id6             long    6
2dc90 1d7 07 00 00 00 | id7             long    7
2dc94 1d8             | 
2dc94 1d8             | 'These next 10 request registers below are also temporarily reused during init 
2dc94 1d8             | 'and COG updates and need to follow immediately after id0-id7
2dc94 1d8 00 00 00 00 | addr1           long    0
2dc98 1d9 00 00 00 00 | hubdata         long    0
2dc9c 1da 00 00 00 00 | count           long    0
2dca0 1db 00 00 00 00 | addr2           long    0
2dca4 1dc 00 00 00 00 | total           long    0
2dca8 1dd 00 00 00 00 | offset1         long    0
2dcac 1de 00 00 00 00 | offset2         long    0
2dcb0 1df 00 00 00 00 | link            long    0
2dcb4 1e0             | 
2dcb4 1e0             | burstwrite                                      'note shared register use during init
2dcb4 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
2dcb8 1e1 00 00 00 00 | id              long    0
2dcbc 1e2             | 
2dcbc 1e2 00 00 00 00 | header          long    0
2dcc0 1e3 00 00 00 00 | trailer         long    0
2dcc4 1e4 00 00 00 00 | cmdaddr         long    0
2dcc8 1e5 00 00 00 00 | request         long    0
2dccc 1e6 00 00 00 00 | rrlimit         long    0
2dcd0 1e7 00 00 00 00 | pinconfig       long    0
2dcd4 1e8 00 00 00 00 | clks            long    0
2dcd8 1e9 00 00 00 00 | resume          long    0
2dcdc 1ea 00 00 00 00 | orighubsize     long    0
2dce0 1eb 00 00 00 00 | wrclks          long    0
2dce4 1ec             | 
2dce4 1ec 00 00 00 00 | pattern         long    0
2dce8 1ed 00 00 00 00 | hubscratch      long    0
2dcec 1ee 00 10 00 00 | val4k           long    4096
2dcf0 1ef             | 
2dcf0 1ef             | ' temporary general purpose regs
2dcf0 1ef 00 00 00 00 | a               long    0
2dcf4 1f0 00 00 00 00 | b               long    0
2dcf8 1f1 00 00 00 00 | c               long    0
2dcfc 1f2 00 00 00 00 | d               long    0
2dd00 1f3             |                 fit     502
2dd00 1f3             | 
2dd00 1f3             |                 fit     502
2dd00 1f3             | 
2dd00 1f3             | '..................................................................................................
2dd00 1f3             | 
2dd00 1f3             |             orgh
2dd00                 | 
2dd00                 | lut_code
2dd00                 | 'HW init code up to 80 longs
2dd00                 | 
2dd00                 | '..................................................................................................
2dd00                 | ' Memory layout for LUT RAM once operational:
2dd00                 | '
2dd00                 | '  LUT RAM address      Usage
2dd00                 | '  ---------------      ----
2dd00                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
2dd00                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
2dd00                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
2dd00                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
2dd00                 | '
2dd00                 | ' Also during driver COG startup:
2dd00                 | ' $230-$24F is used for HW init setup
2dd00                 | ' $250-$26F is used as temporary vector storage 
2dd00                 | '..................................................................................................
2dd00                 | 
2dd00                 |                 org $230    
2dd00 230             | 
2dd00 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
2dd00 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
2dd04 231 24 16 60 FD |                             pollxfi
2dd08 232 FF AA 2A FF 
2dd0c 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
2dd10 234 28 00 B0 FD |                             call    #sendqspi
2dd14 235 07 F8 07 FF 
2dd18 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
2dd1c 237 28 00 B0 FD |                             call    #sendspi
2dd20 238 F8 07 78 FF 
2dd24 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
2dd28 23a 1C 00 B0 FD |                             call    #sendspi
2dd2c 23b 7F 78 78 FF 
2dd30 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
2dd34 23d 10 00 B0 FD |                             call    #sendspi 
2dd38 23e 2D 00 64 FD |                             ret
2dd3c 23f             | 
2dd3c 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
2dd40 240 32 0C 64 FD |                             skipf   #%110
2dd44 241 9C EF 03 F6 |                             mov     pb, xsendimm
2dd48 242             | 
2dd48 242 10 D0 07 F6 | sendspi                     mov     clks, #16
2dd4c 243 97 EF 03 F6 |                             mov     pb, ximm8lut
2dd50 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
2dd54 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2dd58 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
2dd5c 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
2dd60 248 24 36 60 FD |                             waitxfi                         'wait for the completion
2dd64 249 50 48 63 FD |                             fltl    datapins                'float data bus
2dd68 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
2dd6c 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
2dd70 24c             | 
2dd70 24c 00 00 00 00 
2dd74 24d 00 00 00 00 
2dd78 24e 00 00 00 00 
2dd7c 24f 00 00 00 00 |                 long    0[$270-32-$]
2dd80 250             |                 fit     $270-32  ' keep room for 32 vector longs
2dd80 250             |     
2dd80 250             |                 fit     $270-32  ' keep room for 32 vector longs
2dd80 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
2dd80 250             | rw_vect ' PSRAM jump vectors
2dd80 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2dd84 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2dd88 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2dd8c 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2dd90 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
2dd94 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
2dd98 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
2dd9c 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
2dda0 258             | ro_vect ' R/O PSRAM jump vectors
2dda0 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2dda4 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2dda8 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2ddac 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2ddb0 25c 00 01 00 00 |                 long    unsupported
2ddb4 25d 00 01 00 00 |                 long    unsupported
2ddb8 25e 00 01 00 00 |                 long    unsupported
2ddbc 25f 00 01 00 00 |                 long    unsupported
2ddc0 260             | ctrl_vect ' Control jump vectors
2ddc0 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
2ddc4 261 00 01 00 00 |                 long    unsupported
2ddc8 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
2ddcc 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
2ddd0 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
2ddd4 265 00 01 00 00 |                 long    unsupported
2ddd8 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
2dddc 267 3E 01 00 00 |                 long    reconfig 
2dde0 268             | no_vect ' Invalid bank jump vectors
2dde0 268 01 01 00 00 |                 long    invalidbank
2dde4 269 01 01 00 00 |                 long    invalidbank
2dde8 26a 01 01 00 00 |                 long    invalidbank
2ddec 26b 01 01 00 00 |                 long    invalidbank
2ddf0 26c 01 01 00 00 |                 long    invalidbank
2ddf4 26d 01 01 00 00 |                 long    invalidbank
2ddf8 26e 01 01 00 00 |                 long    invalidbank
2ddfc 26f 01 01 00 00 |                 long    invalidbank
2de00 270             |                 fit     $270
2de00 270             | 
2de00 270             |                 fit     $270
2de00 270             | '..................................................................................................
2de00 270             | ' PSRAM READS
2de00 270             |                                                             ' a b c d e f
2de00 270             |                                                             ' B W L B R L  (a) byte read
2de00 270             |                                                             ' Y O O U E O  (b) word read
2de00 270             |                                                             ' T R N R S C  (c) long read
2de00 270             |                                                             ' E D G S U K  (d) new burst read
2de00 270             |                                                             '       T M E  (e) resumed sub-burst
2de00 270             |                                                             '         E D  (f) locked sub-burst
2de00 270             | 
2de00 270             | 
2de00 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
2de04 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
2de08 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
2de0c 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
2de10 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
2de14 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
2de18 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
2de1c 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
2de20 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
2de24 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
2de28 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
2de2c 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
2de30 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
2de34 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
2de38 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
2de3c 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
2de40 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
2de44 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
2de48 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
2de4c 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
2de50 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
2de54 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
2de58 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
2de5c 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
2de60 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
2de64 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
2de68 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
2de6c 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
2de70 28c             | 
2de70 28c             |                             ' fall through to read bursts
2de70 28c             |                         
2de70 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
2de70 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
2de74 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2de78 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2de7c 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2de80 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
2de84 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
2de88 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
2de8c 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
2de90 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
2de94 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
2de98 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
2de9c 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
2dea0 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
2dea4 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
2dea8 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
2deac 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
2deb0 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
2deb4 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
2deb8 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
2debc 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
2dec0 2a0 E8 D1 03 F1 |                             add     clks, clks
2dec4 2a1             | readcommon
2dec4 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
2dec8 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2decc 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
2ded0 2a4             | 
2ded0 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2ded4 2a5 69 C8 63 FD |                             rev     cmdaddr
2ded8 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2dedc 2a7 61 C8 63 FD |                             mergeb  cmdaddr
2dee0 2a8             | 
2dee0 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
2dee4 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
2dee8 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
2dee8 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
2deec 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
2def0 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
2def4 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
2def8 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
2def8 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
2defc 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
2df00 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
2df04 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
2df08 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
2df0c 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
2df10 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
2df10 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
2df14 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
2df18 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
2df1c 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
2df20 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
2df24 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
2df28 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
2df2c 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
2df30 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
2df34 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
2df38 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
2df3c 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
2df40 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
2df44 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
2df48 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
2df48 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
2df4c 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
2df50 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
2df54 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
2df58 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
2df5c 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
2df60 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
2df64 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
2df68 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
2df6c 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
2df70 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
2df74 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
2df78 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
2df7c 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
2df80 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
2df84 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
2df88 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
2df8c 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
2df90 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
2df94 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
2df98 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
2df9c 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
2dfa0 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
2dfa4 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
2dfa8 2da 10 03 90 FD |                             jmp     #writecommon
2dfac 2db             | 
2dfac 2db             | '..................................................................................................
2dfac 2db             | ' Burst continuation testing
2dfac 2db             | 
2dfac 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
2dfb0 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
2dfb4 2dd             | continue_read_lut          
2dfb4 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
2dfb8 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
2dfbc 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
2dfc0 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
2dfc4 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
2dfc8 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
2dfcc 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
2dfd0 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
2dfd4 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
2dfd8 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
2dfdc 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
2dfe0 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
2dfe4 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
2dfe8 2ea             | 
2dfe8 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
2dfec 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
2dff0 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
2dff4 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
2dff8 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
2dffc 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
2e000 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
2e004 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
2e008 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
2e00c 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
2e010 2f4 2A 1C 66 0D |             _ret_           push    #poller
2e014 2f5             | 
2e014 2f5             | 
2e014 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
2e018 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
2e018 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
2e01c 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
2e020 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
2e024 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
2e028 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
2e02c 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
2e030 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
2e034 2fd 2D 00 64 FD |                             ret                             ' | continue processing
2e038 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
2e03c 2ff             | '..................................................................................................
2e03c 2ff             | ' Completion of requests
2e03c 2ff             | 
2e03c 2ff             | complete_rw_lut             
2e03c 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
2e040 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
2e044 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
2e048 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
2e04c 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
2e050 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
2e054 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
2e058 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
2e05c 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
2e060 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
2e064 309 32 62 64 AD |             if_z            skipf   #%110001
2e068 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
2e06c 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
2e070 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
2e074 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
2e078 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
2e07c 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
2e080 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
2e084 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
2e088 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
2e08c 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
2e090 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
2e094 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
2e098 316             |                                                             ' skipcase (a) gfx copy to/from hub
2e098 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
2e098 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
2e098 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
2e09c 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
2e0a0 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
2e0a4 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
2e0a8 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
2e0ac 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
2e0b0 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
2e0b4 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
2e0b8 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
2e0bc 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
2e0c0 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
2e0c4 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
2e0c8 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
2e0cc 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
2e0d0 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
2e0d4 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
2e0d8 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
2e0dc 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
2e0e0 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
2e0e4 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
2e0e8 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
2e0ec 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
2e0f0 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
2e0f4 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
2e0f8 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
2e0fc 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
2e100 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
2e104 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
2e108 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
2e10c 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
2e110 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
2e114 335 DF B7 03 A6 |             if_z            mov     addr2, link
2e118 336 34 FF 9F AD |             if_z            jmp     #checknext
2e11c 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
2e120 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2e124 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
2e128 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
2e12c 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
2e130 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
2e134 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
2e138 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
2e13c 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
2e140 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
2e144 341             | 
2e144 341             | '..................................................................................................
2e144 341             | ' PSRAM WRITES
2e144 341             |                                                             '  a b c d e f g h
2e144 341             | 
2e144 341             |                                                             '  B W L F B R L L (a) byte write(s)
2e144 341             |                                                             '  Y O O I U E O O (b) word write(s)
2e144 341             |                                                             '  T R N L R S C C (c) long write(s)
2e144 341             |                                                             '  E D G L S U K K (d) resumed fill
2e144 341             |                                                             '          T M E E (e) new burst write
2e144 341             |                                                             '            E D D (f) resumed burst
2e144 341             |                                                             '              F B (g) locked fill
2e144 341             |                                                             '              I U (h) locked burst write
2e144 341             |                                                             '              L R 
2e144 341             |                                                             '              L S 
2e144 341             |                                                             '                T 
2e144 341             | 
2e144 341             | w_single                   
2e144 341             | w_fill_cont           
2e144 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
2e148 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
2e14c 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
2e150 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
2e154 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
2e158 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
2e15c 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
2e160 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
2e164 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
2e168 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
2e16c 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
2e170 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
2e174 34d             |                ' disable call to r_resume_burst for single longs when z=0
2e174 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
2e178 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
2e17c 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
2e180 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
2e184 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
2e188 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
2e18c 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
2e190 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
2e194 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
2e198 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
2e19c 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
2e1a0 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
2e1a4 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
2e1a8 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
2e1ac 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
2e1b0 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
2e1b4 35d             |         
2e1b4 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
2e1b4 35d             |             '
2e1b4 35d             |             '  At least one of these 3 optional components will be sent
2e1b4 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
2e1b4 35d             |             '     body - N x full longs of data
2e1b4 35d             |             '     trailer - last partial long of data
2e1b4 35d             |             '
2e1b4 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
2e1b4 35d             |             '
2e1b4 35d             |             'Case    Type                           Sends
2e1b4 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
2e1b4 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
2e1b4 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
2e1b4 35d             |             ' 4)     Multiple long fill             body only
2e1b4 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
2e1b4 35d             | 
2e1b4 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
2e1b4 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
2e1b8 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2e1bc 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2e1c0 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2e1c4 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
2e1c8 362 13 8C 07 F6 |                             mov     pattern3, #%10011
2e1cc 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
2e1d0 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
2e1d4 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
2e1d8 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
2e1dc 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
2e1e0 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
2e1e4 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
2e1e8 36a             |                             
2e1e8 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2e1ec 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
2e1f0 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
2e1f4 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
2e1f8 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
2e1fc 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
2e200 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
2e204 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
2e208 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
2e20c 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
2e210 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
2e214 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
2e218 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
2e21c 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
2e220 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
2e224 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
2e228 37a             | 
2e228 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2e22c 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
2e230 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
2e234 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
2e238 37e             |                  
2e238 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
2e23c 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
2e240 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
2e244 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
2e248 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
2e24c 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
2e250 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
2e254 385             | 
2e254 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
2e258 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
2e25c 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
2e260 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
2e264 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
2e268 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
2e26c 38b             | 
2e26c 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
2e26c 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
2e270 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
2e274 38d 2A B0 63 FD |                             push    addr1                   'save address
2e278 38e             | 
2e278 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
2e278 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
2e27c 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
2e280 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
2e284 391             |             
2e284 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
2e288 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
2e28c 393 2B B0 63 FD |                             pop     addr1                   'restore address
2e290 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
2e294 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
2e298 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
2e29c 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
2e2a0 398             | 
2e2a0 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
2e2a4 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
2e2a8 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
2e2ac 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
2e2b0 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
2e2b4 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
2e2b8 39e             | 
2e2b8 39e             |                             'trailer is done
2e2b8 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
2e2bc 39f             | 
2e2bc 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
2e2c0 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2e2c4 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
2e2c8 3a2             | 
2e2c8 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2e2cc 3a3 69 C8 63 FD |                             rev     cmdaddr                 
2e2d0 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2e2d4 3a5 61 C8 63 FD |                             mergeb  cmdaddr
2e2d8 3a6             |                             
2e2d8 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
2e2dc 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2e2e0 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
2e2e4 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
2e2e8 3aa             |                                                          
2e2e8 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
2e2ec 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
2e2f0 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
2e2f4 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
2e2f8 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
2e2fc 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
2e300 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
2e304 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
2e308 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
2e30c 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
2e310 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
2e314 3b5             |  
2e314 3b5 59 52 63 FD |                             drvh    cspin
2e318 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
2e31c 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
2e320 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
2e324 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
2e328 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
2e32c 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
2e330 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
2e334 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
2e338 3be EA E5 03 F6 |                             mov     d, orighubsize
2e33c 3bf EF E5 63 F0 |                             shl     d, a
2e340 3c0 F2 E3 83 F1 |                             sub     c, d
2e344 3c1 DD E3 03 F1 |                             add     c, offset1
2e348 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
2e34c 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
2e350 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
2e354 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
2e358 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
2e35c 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
2e360 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
2e364 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2e368 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
2e36c 3cb BB D3 03 F6 |                             mov     resume, restorefill
2e370 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
2e374 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
2e378 3ce 6C FC BF CD |             if_c            call    #yield
2e37c 3cf 2D 00 64 FD |                             ret
2e380 3d0             |                            
2e380 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
2e380 3d0             |                       '     rczl    pa                      'rotate left into address offset
2e380 3d0             |                       '     rczl    c wcz                   'restore count and flags
2e380 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
2e384 3d1 02 EC 67 F0 |                             shl     pa, #2
2e388 3d2 28 06 64 AD |             if_z            setq    #3
2e38c 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
2e390 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
2e394 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
2e398 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
2e39c 3d7             | 
2e39c 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
2e3a0 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
2e3a4 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
2e3a8 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
2e3ac 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
2e3b0 3dc             |                 fit 1024-32
2e3b0 3dc             |         
2e3b0 3dc             | 
2e3b0 3dc             | '..................................................................................................
2e3b0 3dc             | 
2e3b0 3dc             |                 fit 1024-32
2e3b0 3dc 00 00 00 00 
2e3b4 3dd 00 00 00 00 
2e3b8 3de 00 00 00 00 
2e3bc 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
2e3c0 3e0             |                 org 1024-32
2e3c0 000             | 
2e3c0 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
2e3c0 000 00 00 00 00 |                 long $0000
2e3c4 001 11 11 00 00 |                 long $1111
2e3c8 002 22 22 00 00 |                 long $2222
2e3cc 003 33 33 00 00 |                 long $3333
2e3d0 004 44 44 00 00 |                 long $4444
2e3d4 005 55 55 00 00 |                 long $5555
2e3d8 006 66 66 00 00 |                 long $6666
2e3dc 007 77 77 00 00 |                 long $7777
2e3e0 008 88 88 00 00 |                 long $8888
2e3e4 009 99 99 00 00 |                 long $9999
2e3e8 00a AA AA 00 00 |                 long $aaaa
2e3ec 00b BB BB 00 00 |                 long $bbbb
2e3f0 00c CC CC 00 00 |                 long $cccc
2e3f4 00d DD DD 00 00 |                 long $dddd
2e3f8 00e EE EE 00 00 |                 long $eeee
2e3fc 00f FF FF 00 00 |                 long $ffff
2e400 010             | 
2e400 010             | 'masks
2e400 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
2e404 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
2e408 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
2e40c 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
2e410 014             | 
2e410 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
2e414 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
2e418 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
2e41c 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
2e420 018             | 
2e420 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
2e424 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
2e428 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
2e42c 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
2e430 01c             | 
2e430 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
2e434 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
2e438 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
2e43c 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
2e440 020             |         fit 1024
2e440 020             | 
2e440 020             |         fit 1024
2e440 020             | 
2e440 020             | '--------------------------------------------------------------------------------------------------
2e440 020             |         orgh
2e440                 | 
2e440                 | gfxexpansion
2e440                 |                             'simple line drawing graphics expansion of memory driver
2e440                 |                             'jmp     #donerepeats                'just return for now
2e440                 | 
2e440     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
2e444     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
2e448     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
2e44c     DD E1 03 F6 |                             mov     b, offset1              'get error term
2e450     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
2e454     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
2e458     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
2e45c     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
2e460     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
2e464     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
2e468     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
2e46c     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
2e470     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
2e474     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
2e478     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
2e47c     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
2e480     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
2e484     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
2e488     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
2e48c     DC E5 33 F9 |                             getword d, total, #0            'get line width
2e490     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
2e494     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
2e498     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
2e49c     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
2e4a0     C3 03 80 FD |                             jmp     #readmask               'continue filling
2e4a4                 | 	alignl
2e4a4                 | _usbnew_spin2_dat_
2e4a4                 |                 org     $000
2e4a4 000             | 
2e4a4 000             | usb_host_start
2e4a4 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
2e4a8 001             | 
2e4a8 001 03 00 00 FF 
2e4ac 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
2e4b0 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
2e4b4 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
2e4b8 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
2e4bc 006 29 70 63 FD |                 setq2   htmp
2e4c0 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
2e4c4 008             | 
2e4c4 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
2e4c8 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
2e4cc 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
2e4d0 00b             | 
2e4d0 00b             | '------------------------------------------------------------------------------
2e4d0 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
2e4d0 00b             | ' special because the receiving function must not respond with either STALL or
2e4d0 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
2e4d0 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
2e4d0 00b             | ' corrupt packet, it must ignore the transaction
2e4d0 00b             | '------------------------------------------------------------------------------
2e4d0 00b             | ' On entry:
2e4d0 00b             | '   PTRA - start address of the SETUP data struct.
2e4d0 00b             | ' On exit:
2e4d0 00b             | '   retval - PID_ACK on success, otherwise error code.
2e4d0 00b             | '------------------------------------------------------------------------------
2e4d0 00b             | txn_setup
2e4d0 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
2e4d4 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
2e4d8 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
2e4dc 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
2e4e0 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
2e4e4 010             | .setup
2e4e4 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
2e4e8 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e4ec 012 2D 00 64 AD |         if_z    ret
2e4f0 013 7C 0B B0 FD |                 call    #retry_wait
2e4f4 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2e4f8 015 2D 00 64 AD |         if_z    ret
2e4fc 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
2e500 017 E0 FF 9F FD |                 jmp     #.setup
2e504 018             | 
2e504 018             | '------------------------------------------------------------------------------
2e504 018             | ' IN/INTERRUPT transaction.
2e504 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
2e504 018             | '------------------------------------------------------------------------------
2e504 018             | ' On entry:
2e504 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
2e504 018             | '     CRC(b19..23).
2e504 018             | ' On exit:
2e504 018             | '------------------------------------------------------------------------------
2e504 018             | txn_in
2e504 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2e508 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
2e50c 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
2e510 01b             | 
2e510 01b             |                 ' Fall through to urx_packet
2e510 01b             | 
2e510 01b             | '------------------------------------------------------------------------------
2e510 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
2e510 01b             | ' received are handshakes and IN DATAx.
2e510 01b             | '------------------------------------------------------------------------------
2e510 01b             | ' On entry:
2e510 01b             | ' On exit:
2e510 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
2e510 01b             | '     returned.
2e510 01b             | '------------------------------------------------------------------------------
2e510 01b             | urx_packet
2e510 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
2e514 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e518 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
2e51c 01e 1A 92 63 FD |                 getct   hct2
2e520 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
2e524 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
2e528 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
2e52c 022             | .wait_sop
2e52c 022 22 A7 8A FA |                 rdpin   urx, dm
2e530 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e534 024 08 00 90 CD |         if_c    jmp     #.get_pid
2e538 025 FC 25 CC FB |                 jnct2   #.wait_sop
2e53c 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
2e540 027             | .get_pid
2e540 027 28 02 B0 FD |                 call    #urx_next
2e544 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
2e548 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
2e54c 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
2e550 02b             | .chk_pid
2e550 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e554 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
2e558 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
2e55c 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
2e560 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
2e564 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
2e568 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
2e56c 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
2e570 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
2e574 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
2e578 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
2e57c 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
2e580 037             | .ack_resend
2e580 037 22 A7 82 FA |                 rqpin   urx, dm
2e584 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2e588 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
2e58c 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
2e590 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
2e594 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
2e598 03d             | .chk_eop
2e598 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2e59c 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
2e5a0 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
2e5a4 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
2e5a8 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
2e5ac 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2e5b0 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
2e5b4 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
2e5b8 045 2D 00 64 FD |                 ret
2e5bc 046             | .idle
2e5bc 046 22 A7 82 FA |                 rqpin   urx, dm
2e5c0 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e5c4 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
2e5c8 049 2D 00 64 FD |                 ret
2e5cc 04a             | 
2e5cc 04a             | '------------------------------------------------------------------------------
2e5cc 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
2e5cc 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
2e5cc 04a             | ' if one is required.
2e5cc 04a             | '------------------------------------------------------------------------------
2e5cc 04a             | ' On entry:
2e5cc 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
2e5cc 04a             | ' On exit:
2e5cc 04a             | '------------------------------------------------------------------------------
2e5cc 04a             | utx_token
2e5cc 04a 22 A7 82 FA |                 rqpin   urx, dm
2e5d0 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e5d4 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
2e5d8 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e5dc 04e 34 0D B0 CD |         if_c    call    #utx_pre
2e5e0 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e5e4 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
2e5e8 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
2e5ec 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
2e5f0 053             | .next_byte
2e5f0 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
2e5f4 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
2e5f8 055             | .wait
2e5f8 055 40 46 72 FD |                 testp   dp                      wc
2e5fc 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
2e600 057 23 03 08 FC |                 akpin   dp
2e604 058 22 A5 22 FC |                 wypin   utx, dm
2e608 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
2e60c 05a             | 
2e60c 05a             | '------------------------------------------------------------------------------
2e60c 05a             | ' SETUP/OUT/INTERRUPT transaction.
2e60c 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
2e60c 05a             | '------------------------------------------------------------------------------
2e60c 05a             | ' On entry:
2e60c 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
2e60c 05a             | '     CRC(b19..23).
2e60c 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
2e60c 05a             | '   pkt_data - count of DATAx payload bytes to send.
2e60c 05a             | ' On exit:
2e60c 05a             | '------------------------------------------------------------------------------
2e60c 05a             | txn_out
2e60c 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2e610 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
2e614 05c 00 00 C0 FF 
2e618 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
2e61c 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
2e620 05f             | 
2e620 05f             |                 ' Fall through to utx_data
2e620 05f             | 
2e620 05f             | '------------------------------------------------------------------------------
2e620 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
2e620 05f             | ' calculated while the data byte is being shifted out. Since data stage
2e620 05f             | ' success/fail is not determined until the status stage of the transaction,
2e620 05f             | ' this routine is only concerned about the current DATAx packet.
2e620 05f             | '------------------------------------------------------------------------------
2e620 05f             | ' On entry:
2e620 05f             | '   PTRA - hub start address of the data to read.
2e620 05f             | '   pkt_cnt - data payload size.
2e620 05f             | ' On exit:
2e620 05f             | '------------------------------------------------------------------------------
2e620 05f             | utx_data
2e620 05f 22 A7 82 FA |                 rqpin   urx, dm
2e624 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e628 061 F4 FF 9F CD |         if_c    jmp     #utx_data
2e62c 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
2e630 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
2e634 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e638 065 D8 0C B0 CD |         if_c    call    #utx_pre
2e63c 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e640 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
2e644 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2e648 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
2e64c 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
2e650 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
2e654 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
2e658 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
2e65c 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
2e660 06f             | .read_byte
2e660 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
2e664 070 F0 00 B0 FD |                 call    #utx_byte
2e668 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
2e66c 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
2e670 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2e674 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2e678 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
2e67c 076             | .send_crc
2e67c 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
2e680 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
2e684 078 D0 00 B0 FD |                 call    #utx_byte
2e688 079 5D A5 EA F8 |                 getbyte utx, crc, #1
2e68c 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
2e690 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
2e694 07c             | 
2e694 07c             | '------------------------------------------------------------------------------
2e694 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
2e694 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
2e694 07c             | ' expects that the packet includes at least the CRC word.
2e694 07c             | '
2e694 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
2e694 07c             | ' was requested, which makes it difficult to determine where the data stops
2e694 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
2e694 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
2e694 07c             | ' USB-16 expected residual value of 0xB001.
2e694 07c             | '
2e694 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
2e694 07c             | ' so the caller can verify IN success before writing the data to its final
2e694 07c             | ' destination.
2e694 07c             | '------------------------------------------------------------------------------
2e694 07c             | ' On entry:
2e694 07c             | '   pkt_data - max byte count expected to be in the packet.
2e694 07c             | '   newb_flg - signals new byte ready when toggled.
2e694 07c             | ' On exit:
2e694 07c             | '   pkt_cnt - actual number of bytes read.
2e694 07c             | '------------------------------------------------------------------------------
2e694 07c             | urx_data
2e694 07c F7 75 03 F6 |                 mov     htmp2, pb
2e698 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
2e69c 07e 00 00 C0 FF 
2e6a0 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
2e6a4 080 BA EF 03 F6 |                 mov     pb, htmp2
2e6a8 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2e6ac 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
2e6b0 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
2e6b4 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
2e6b8 085             | .wait_byte
2e6b8 085             | ' In-line rx for max speed
2e6b8 085 22 A7 82 FA |                 rqpin   urx, dm
2e6bc 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2e6c0 087 53 A5 02 F5 |                 and     utx, urx
2e6c4 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2e6c8 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2e6cc 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
2e6d0 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2e6d4 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
2e6d8 08d DC FF 9F FD |                 jmp     #.wait_byte
2e6dc 08e             | .get_byte
2e6dc 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
2e6e0 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
2e6e4 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
2e6e8 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
2e6ec 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2e6f0 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2e6f4 094             | .end_crc
2e6f4 094 01 B8 06 F1 |                 add     pkt_cnt, #1
2e6f8 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
2e6fc 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
2e700 097 2D 00 64 1D |         if_a    ret
2e704 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
2e704 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
2e704 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
2e704 098             | ' to miss it, so cheat a bit and look for SOP clear here.
2e704 098 22 A7 82 FA |                 rqpin   urx, dm
2e708 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
2e70c 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
2e710 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
2e710 09b             | .chk_crc
2e710 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
2e714 09c 58 00 00 FF 
2e718 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
2e71c 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
2e720 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
2e724 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
2e728 0a1 34 09 B0 FD |                 call    #poll_waitx
2e72c 0a2             | 
2e72c 0a2             |                 ' Fall through to utx_handshake
2e72c 0a2             | 
2e72c 0a2             | '------------------------------------------------------------------------------
2e72c 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
2e72c 0a2             | ' the appropriate IP delay has been inserted.
2e72c 0a2             | '------------------------------------------------------------------------------
2e72c 0a2             | ' On entry:
2e72c 0a2             | '   retval - handshake PID to send.
2e72c 0a2             | ' On exit:
2e72c 0a2             | '   retval unchanged.
2e72c 0a2             | '------------------------------------------------------------------------------
2e72c 0a2             | utx_handshake
2e72c 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e730 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
2e734 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e738 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
2e73c 0a6 5F A5 02 F6 |                 mov     utx, retval
2e740 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
2e744 0a8             | .idle
2e744 0a8 22 A7 82 FA |                 rqpin   urx, dm
2e748 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e74c 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
2e750 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
2e754 0ac 08 09 90 FD |                 jmp     #poll_waitx
2e758 0ad             | 
2e758 0ad             | '------------------------------------------------------------------------------
2e758 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
2e758 0ad             | '------------------------------------------------------------------------------
2e758 0ad             | ' On entry:
2e758 0ad             | '   utx - byte to transmit.
2e758 0ad             | ' On exit:
2e758 0ad             | '------------------------------------------------------------------------------
2e758 0ad             | utx_byte
2e758 0ad 40 46 72 FD |                 testp   dp                      wc
2e75c 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
2e760 0af 23 03 08 FC |                 akpin   dp
2e764 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
2e768 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
2e76c 0b2             | 
2e76c 0b2             | '------------------------------------------------------------------------------
2e76c 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
2e76c 0b2             | '------------------------------------------------------------------------------
2e76c 0b2             | ' On entry:
2e76c 0b2             | ' On exit:
2e76c 0b2             | '   retval - the byte read.
2e76c 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
2e76c 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
2e76c 0b2             | '     received.
2e76c 0b2             | '------------------------------------------------------------------------------
2e76c 0b2             | urx_next
2e76c 0b2 22 A7 8A FA |                 rdpin   urx, dm
2e770 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2e774 0b4 53 A5 02 F5 |                 and     utx, urx
2e778 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2e77c 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2e780 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
2e784 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
2e788 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e78c 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2e790 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
2e794 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
2e798 0bd 2D 00 64 FD |                 ret
2e79c 0be             | 
2e79c 0be             | '------------------------------------------------------------------------------
2e79c 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
2e79c 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
2e79c 0be             | ' length, and the PID is not included in the CRC calculation:
2e79c 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
2e79c 0be             | '  CRC5  ENDP ADDRESS PID
2e79c 0be             | ' %00000_1111_1111111_xxxxxxxx
2e79c 0be             | '------------------------------------------------------------------------------
2e79c 0be             | ' On entry:
2e79c 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
2e79c 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
2e79c 0be             | ' On exit:
2e79c 0be             | '   ep_addr_pid - CRC value appended to the packet.
2e79c 0be             | '------------------------------------------------------------------------------
2e79c 0be             | calc_crc5
2e79c 0be FF 03 00 FF 
2e7a0 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
2e7a4 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
2e7a8 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
2e7ac 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
2e7b0 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
2e7b4 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
2e7b8 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
2e7bc 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
2e7c0 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
2e7c4 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
2e7c8 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
2e7cc 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2e7d0 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
2e7d4 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2e7d8 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
2e7dc 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
2e7e0 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
2e7e4 0d0             | 
2e7e4 0d0             | '------------------------------------------------------------------------------
2e7e4 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
2e7e4 0d0             | '------------------------------------------------------------------------------
2e7e4 0d0             | isr1_fsframe
2e7e4 0d0 1A 92 62 FD |                 getct   iframe_ct_base
2e7e8 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2e7ec 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2e7f0 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2e7f4 0d4             | .wait
2e7f4 0d4 40 46 72 FD |                 testp   dp                      wc
2e7f8 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
2e7fc 0d6 23 03 08 FC |                 akpin   dp
2e800 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2e804 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
2e808 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
2e80c 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
2e810 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
2e814 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
2e818 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
2e81c 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
2e820 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
2e824 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
2e828 0e1 2C FF BF FD |                 call    #utx_byte
2e82c 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
2e830 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
2e834 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
2e838 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
2e83c 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
2e840 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
2e844 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
2e848 0e9 5B A5 42 F5 |                 or      utx, icrc
2e84c 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
2e850 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
2e854 0ec 20 00 90 FD |                 jmp     #isr1_wait
2e858 0ed             | isr1_lsframe
2e858 0ed 1A 92 62 FD |                 getct   iframe_ct_base
2e85c 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2e860 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2e864 0f0             | .wait
2e864 0f0 40 46 72 FD |                 testp   dp                      wc
2e868 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
2e86c 0f2 23 03 08 FC |                 akpin   dp
2e870 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
2e874 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
2e878 0f5             | isr1_wait
2e878 0f5 22 A5 82 FA |                 rqpin   utx, dm
2e87c 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
2e880 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
2e884 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
2e888 0f9 03 00 00 FF 
2e88c 0fa FF B3 06 F5 |                 and     frame, ##$7ff
2e890 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
2e894 0fc F5 FF 3B FB |                 reti1
2e898 0fd             | 
2e898 0fd             | '------------------------------------------------------------------------------
2e898 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
2e898 0fd             | ' transaction will complete before the next frame is triggered.
2e898 0fd             | '------------------------------------------------------------------------------
2e898 0fd             | ' On entry:
2e898 0fd             | ' On exit:
2e898 0fd             | '------------------------------------------------------------------------------
2e898 0fd             | wait_txn_ok
2e898 0fd 1A 74 63 FD |                 getct   htmp2
2e89c 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
2e8a0 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2e8a4 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
2e8a8 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
2e8ac 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
2e8b0 103 2D 00 64 FD |                 ret
2e8b4 104             | 
2e8b4 104             | '------------------------------------------------------------------------------
2e8b4 104             | ' A device connection was detected, or a bus reset was requested by the USB
2e8b4 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
2e8b4 104             | ' and perform a reset sequence prior to device enumeration.
2e8b4 104             | '------------------------------------------------------------------------------
2e8b4 104             | dev_reset
2e8b4 104 22 A7 82 FA |                 rqpin   urx, dm
2e8b8 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
2e8bc 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
2e8c0 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2e8c4 108             | reset
2e8c4 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
2e8c8 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
2e8cc 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
2e8d0 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2e8d4 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
2e8d8 10d 1A 92 62 FD |                 getct   iframe_ct_base
2e8dc 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2e8e0 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2e8e4 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
2e8e8 111 24 70 07 F1 |                 add     htmp, #36
2e8ec 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
2e8f0 113             | .framewait
2e8f0 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2e8f4 114 F8 FF 9F CD |         if_b    jmp     #.framewait
2e8f8 115 2D 00 64 FD |                 ret
2e8fc 116             | 
2e8fc 116             | '------------------------------------------------------------------------------
2e8fc 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
2e8fc 116             | '------------------------------------------------------------------------------
2e8fc 116             | ' On entry:
2e8fc 116             | '   PTRA - source address.
2e8fc 116             | '   PB - destination address.
2e8fc 116             | '   hr0 - length of copy, in bytes.
2e8fc 116             | ' On exit:
2e8fc 116             | '------------------------------------------------------------------------------
2e8fc 116             | hmemcpy
2e8fc 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
2e900 117 F7 71 43 FC |                 wrbyte  htmp, pb
2e904 118 01 EE 07 F1 |                 add     pb, #1
2e908 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
2e90c 11a             | 
2e90c 11a             | '------------------------------------------------------------------------------
2e90c 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
2e90c 11a             | ' loop until the errant device is disconnected.
2e90c 11a             | '------------------------------------------------------------------------------
2e90c 11a             | ' On entry:
2e90c 11a             | ' On exit:
2e90c 11a             | '------------------------------------------------------------------------------
2e90c 11a             | host_error
2e90c 11a             |           if ERROR_LED >= 0
2e90c 11a             |           end
2e90c 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
2e910 11b             | 
2e910 11b             | '------------------------------------------------------------------------------
2e910 11b             | ' Get HID descriptor buffer for current port
2e910 11b             | '------------------------------------------------------------------------------
2e910 11b             | ' On entry:
2e910 11b             | ' On exit:
2e910 11b             | '   PB - HID descriptor buffer pointer
2e910 11b             | '------------------------------------------------------------------------------
2e910 11b             | get_hid_descr_buffer
2e910 11b 2D EF 03 F6 |                 mov     pb, hdev_port
2e914 11c 01 EE E7 F2 |                 cmpsub  pb, #1
2e918 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
2e91c 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
2e920 11f             | 
2e920 11f             | 
2e920 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
2e924 120             | 
2e924 120             | ' USB commands and error codes
2e924 120 00 00 00 00 | cmd_data        long    0
2e928 121 00 00 00 00 | usb_err_code    long    ERR_NONE
2e92c 122             | 
2e92c 122             | ' Parameters block assigned at cog startup
2e92c 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
2e930 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
2e934 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
2e938 125             | if ACTIVITY_LED >= 0
2e938 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
2e938 125             | end
2e938 125             | if ERROR_LED >= 0
2e938 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
2e938 125             | end
2e938 125 00 00 00 00 | hid_descr_p     long    0
2e93c 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
2e93c 126             | 'hkbd_report_p   long    0
2e93c 126 00 00 00 00 | hub_descr_p     long    0
2e940 127 00 00 00 00 | urx_buff_p      long    0
2e944 128 00 00 00 00 | dev_desc_buff_p long    0
2e948 129 00 00 00 00 | con_desc_buff_p long    0
2e94c 12a 00 00 00 00 | cache_start_p   long    0
2e950 12b 00 00 00 00 | cache_end_p     long    0
2e954 12c             | if EMUPAD_MAX_PLAYER > 0
2e954 12c             | emupad_out_ptr  long    0
2e954 12c             | end
2e954 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
2e958 12d             | 
2e958 12d             | hdev_init_start
2e958 12d             | hdev_port       res     1
2e958 12d             | hdev_port       res     1
2e958 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2e958 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2e958 12d             | kbm_next_datax  res     1
2e958 12d             | kbm_next_datax  res     1
2e958 12d             | hub_intf_num    res     1
2e958 12d             | hub_intf_num    res     1
2e958 12d             | hub_next_datax  res     1
2e958 12d             | hub_next_datax  res     1
2e958 12d             | hub_status_chg  res     1
2e958 12d             | hub_status_chg  res     1
2e958 12d             | hub_port_status res     1
2e958 12d             | hub_port_status res     1
2e958 12d             | if HAVE_MOUSE
2e958 12d             | ms_intf_num     res     1
2e958 12d             | ms_intf_num     res     1
2e958 12d             | ms_in_max_pkt   res     1
2e958 12d             | ms_in_max_pkt   res     1
2e958 12d             | end
2e958 12d             | kb_intf_num     res     1
2e958 12d             | kb_intf_num     res     1
2e958 12d             | kb_interval     res     1
2e958 12d             | kb_interval     res     1
2e958 12d             | kb_in_max_pkt   res     1
2e958 12d             | kb_in_max_pkt   res     1
2e958 12d             | kb_max_index    res     1
2e958 12d             | kb_max_index    res     1
2e958 12d             | kb_led_states   res     1
2e958 12d             | kb_led_states   res     1
2e958 12d             | gp_intf_num     res     1
2e958 12d             | gp_intf_num     res     1
2e958 12d             | gp_interval     res     1
2e958 12d             | gp_interval     res     1
2e958 12d             | gp_max_index    res     1
2e958 12d             | gp_max_index    res     1
2e958 12d             | gp_descr_len    res     1+MAX_DEVICES
2e958 12d             | gp_descr_len    res     1+MAX_DEVICES
2e958 12d             | hdev_init_end
2e958 12d             | 
2e958 12d             | ' Initialized at cog startup:
2e958 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2e958 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2e958 12d             | iframe_ct_new   res     1
2e958 12d             | iframe_ct_new   res     1
2e958 12d             | iframe_ct_base  res     1
2e958 12d             | iframe_ct_base  res     1
2e958 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2e958 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2e958 12d             | 
2e958 12d             | ' This register block is reset to zero when a USB device connects
2e958 12d             | hreg_init_start
2e958 12d             | hstatus         res     1         ' Host status flags
2e958 12d             | hstatus         res     1         ' Host status flags
2e958 12d             | hctwait         res     1         ' Poll-based wait clocks
2e958 12d             | hctwait         res     1         ' Poll-based wait clocks
2e958 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2e958 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2e958 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2e958 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2e958 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2e958 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2e958 12d             | xfer_retry      res     1         ' Control transfer retry count
2e958 12d             | xfer_retry      res     1         ' Control transfer retry count
2e958 12d             | retry           res     1         ' Transaction retry count
2e958 12d             | retry           res     1         ' Transaction retry count
2e958 12d             | utx             res     1         ' Byte to transmit on USB
2e958 12d             | utx             res     1         ' Byte to transmit on USB
2e958 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2e958 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2e958 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2e958 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2e958 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2e958 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2e958 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2e958 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2e958 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2e958 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2e958 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2e958 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2e958 12d             | frame           res     1         ' USB 1ms frame counter value
2e958 12d             | frame           res     1         ' USB 1ms frame counter value
2e958 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2e958 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2e958 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2e958 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2e958 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2e958 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2e958 12d             | crc             res     1         ' Used for CRC16 calculation
2e958 12d             | crc             res     1         ' Used for CRC16 calculation
2e958 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2e958 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2e958 12d             | retval          res     1         ' Global success/fail return parameter
2e958 12d             | retval          res     1         ' Global success/fail return parameter
2e958 12d             | context_retval  res     1         ' Operation contextual return parameter
2e958 12d             | context_retval  res     1         ' Operation contextual return parameter
2e958 12d             | ' Device stuff
2e958 12d             | hdev_id         res     1+MAX_DEVICES
2e958 12d             | hdev_id         res     1+MAX_DEVICES
2e958 12d             | hdev_bcd        res     1
2e958 12d             | hdev_bcd        res     1
2e958 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2e958 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2e958 12d             | ' Keyboard/mouse stuff
2e958 12d             | hctrl_ep_addr   res     1
2e958 12d             | hctrl_ep_addr   res     1
2e958 12d             | hctrl_max_pkt   res     1
2e958 12d             | hctrl_max_pkt   res     1
2e958 12d             | hconfig_base    res     1
2e958 12d             | hconfig_base    res     1
2e958 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2e958 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2e958 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2e958 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2e958 12d             | hdev_class      res     1
2e958 12d             | hdev_class      res     1
2e958 12d             | hdev_subclass   res     1
2e958 12d             | hdev_subclass   res     1
2e958 12d             | hdev_protocol   res     1
2e958 12d             | hdev_protocol   res     1
2e958 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2e958 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2e958 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2e958 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2e958 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2e958 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2e958 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2e958 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2e958 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2e958 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2e958 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2e958 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2e958 12d             | if HAVE_MOUSE
2e958 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2e958 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2e958 12d             | end
2e958 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2e958 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2e958 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2e958 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2e958 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2e958 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2e958 12d             | hdev_out_addr   res     1
2e958 12d             | hdev_out_addr   res     1
2e958 12d             | 
2e958 12d             | if EMUPAD_MAX_PLAYER > 0
2e958 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
2e958 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
2e958 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
2e958 12d             | end
2e958 12d             | 
2e958 12d             | hreg_init_end
2e958 12d             | 
2e958 12d             | hidr_start
2e958 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2e958 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2e958 12d             | hidr_flags      res     1
2e958 12d             | hidr_flags      res     1
2e958 12d             | hidr_axis       res     3
2e958 12d             | hidr_axis       res     3
2e958 12d             | hidr_buttons    res     1
2e958 12d             | hidr_buttons    res     1
2e958 12d             | hidr_hats       res     1
2e958 12d             | hidr_hats       res     1
2e958 12d             | '' Above are actually useful values, 6 longs
2e958 12d             | hidr_id         res     1
2e958 12d             | hidr_id         res     1
2e958 12d             | hidr_state      res     1
2e958 12d             | hidr_state      res     1
2e958 12d             | hidr_size       res     1
2e958 12d             | hidr_size       res     1
2e958 12d             | hidr_count      res     1
2e958 12d             | hidr_count      res     1
2e958 12d             | hidr_offset     res     1
2e958 12d             | hidr_offset     res     1
2e958 12d             | hidr_usage_idx  res     1
2e958 12d             | hidr_usage_idx  res     1
2e958 12d             | hidr_lminmax    res     1
2e958 12d             | hidr_lminmax    res     1
2e958 12d             | hidr_pminmax    res     1
2e958 12d             | hidr_pminmax    res     1
2e958 12d             | hidr_type       res     1
2e958 12d             | hidr_type       res     1
2e958 12d             | hidr_end
2e958 12d             | 
2e958 12d             | ' Variables dependent on the system freqency
2e958 12d             | _var_64_lower_  res     1
2e958 12d             | _var_64_lower_  res     1
2e958 12d             | _var_64_upper_  res     1
2e958 12d             | _var_64_upper_  res     1
2e958 12d             | _12Mbps_        res     1
2e958 12d             | _12Mbps_        res     1
2e958 12d             | _1_5Mbps_       res     1
2e958 12d             | _1_5Mbps_       res     1
2e958 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2e958 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2e958 12d             | _1us_           res     1         ' 1us
2e958 12d             | _1us_           res     1         ' 1us
2e958 12d             | _10us_          res     1         ' 10us
2e958 12d             | _10us_          res     1         ' 10us
2e958 12d             | _33us_          res     1         ' 33us
2e958 12d             | _33us_          res     1         ' 33us
2e958 12d             | _txn_err_       res     1         ' 250us
2e958 12d             | _txn_err_       res     1         ' 250us
2e958 12d             | _500us_         res     1         ' 500us
2e958 12d             | _500us_         res     1         ' 500us
2e958 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2e958 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2e958 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2e958 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2e958 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2e958 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2e958 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2e958 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2e958 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2e958 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2e958 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2e958 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2e958 12d             | _preamble_wait_ res     1
2e958 12d             | _preamble_wait_ res     1
2e958 12d             | _1ms_           res     1         ' 1ms
2e958 12d             | _1ms_           res     1         ' 1ms
2e958 12d             | _2ms_           res     1         ' 2ms
2e958 12d             | _2ms_           res     1         ' 2ms
2e958 12d             | _suspend_wait_  res     1         ' 3ms
2e958 12d             | _suspend_wait_  res     1         ' 3ms
2e958 12d             | _4ms_           res     1         ' 4ms
2e958 12d             | _4ms_           res     1         ' 4ms
2e958 12d             | _xfer_wait_     res     1         ' 5ms
2e958 12d             | _xfer_wait_     res     1         ' 5ms
2e958 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2e958 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2e958 12d             | _reset_hold_    res     1         ' 15ms
2e958 12d             | _reset_hold_    res     1         ' 15ms
2e958 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2e958 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2e958 12d             | _21ms_          res     1         ' 21ms
2e958 12d             | _21ms_          res     1         ' 21ms
2e958 12d             | _100ms_         res     1         ' 100ms
2e958 12d             | _100ms_         res     1         ' 100ms
2e958 12d             | _500ms_         res     1         ' 500ms
2e958 12d             | _500ms_         res     1         ' 500ms
2e958 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2e958 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2e958 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2e958 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2e958 12d             | '------------------------------------------------------------------------------
2e958 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2e958 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2e958 12d             | _usb_d_ls_nco_  res     1
2e958 12d             | _usb_d_ls_nco_  res     1
2e958 12d             | _usb_h_fs_nco_  res     1
2e958 12d             | _usb_h_fs_nco_  res     1
2e958 12d             | _usb_d_fs_nco_  res     1
2e958 12d             | _usb_d_fs_nco_  res     1
2e958 12d             | '------------------------------------------------------------------------------
2e958 12d             | ' Scratch registers
2e958 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2e958 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2e958 12d             | htmp1           res     1
2e958 12d             | htmp1           res     1
2e958 12d             | htmp2           res     1
2e958 12d             | htmp2           res     1
2e958 12d             | htmp3           res     1
2e958 12d             | htmp3           res     1
2e958 12d             | hrep            res     1         ' Repeat count
2e958 12d             | hrep            res     1         ' Repeat count
2e958 12d             | hsave0          res     1         ' Subroutine parameter saves
2e958 12d             | hsave0          res     1         ' Subroutine parameter saves
2e958 12d             | hsave1          res     1
2e958 12d             | hsave1          res     1
2e958 12d             | hsave2          res     1
2e958 12d             | hsave2          res     1
2e958 12d             | isrtmp1         res     1
2e958 12d             | isrtmp1         res     1
2e958 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2e958 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2e958 12d             | hr0             res     1         ' Multi-purpose registers
2e958 12d             | hr0             res     1         ' Multi-purpose registers
2e958 12d             | hr1             res     1
2e958 12d             | hr1             res     1
2e958 12d             | hr2             res     1
2e958 12d             | hr2             res     1
2e958 12d             | hr3             res     1
2e958 12d             | hr3             res     1
2e958 12d             | hpar1           res     1         ' Routine entry/exit parameters
2e958 12d             | hpar1           res     1         ' Routine entry/exit parameters
2e958 12d             | hpar2           res     1
2e958 12d             | hpar2           res     1
2e958 12d             | hpar3           res     1
2e958 12d             | hpar3           res     1
2e958 12d             | hct2            res     1         ' Function response bus turn-around timer
2e958 12d             | hct2            res     1         ' Function response bus turn-around timer
2e958 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2e958 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2e958 12d             | mod_cnt         res     1         ' Used in idle loops
2e958 12d             | mod_cnt         res     1         ' Used in idle loops
2e958 12d             |                 fit     $1F0
2e958 12d             |                 org     $200
2e958 200             | hlut_start
2e958 200             | 
2e958 200             | '------------------------------------------------------------------------------
2e958 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
2e958 200             | ' settings to startup defaults.
2e958 200             | '------------------------------------------------------------------------------
2e958 200             | ' On entry:
2e958 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
2e958 200             | '------------------------------------------------------------------------------
2e958 200             | set_speed_full
2e958 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
2e95c 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2e960 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
2e964 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
2e968 204             | '                ret                             wcz     ' Restore caller flags on exit
2e968 204             | 
2e968 204             | '------------------------------------------------------------------------------
2e968 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
2e968 204             | ' is a downstream hub connected (not yet implemented), the baud generator
2e968 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
2e968 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
2e968 204             | ' putting the smart pins into reset.
2e968 204             | '------------------------------------------------------------------------------
2e968 204             | ' On entry:
2e968 204             | ' On exit: CZ flags restored to caller states
2e968 204             | '------------------------------------------------------------------------------
2e968 204             | set_speed_low
2e968 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
2e96c 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
2e970 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
2e974 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2e978 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2e97c 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2e980 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
2e984 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
2e988 20c             | 
2e988 20c             | '------------------------------------------------------------------------------
2e988 20c             | ' Perform configuration stuff required when a device intitially connects.
2e988 20c             | '------------------------------------------------------------------------------
2e988 20c             | ' On entry:
2e988 20c             | ' On exit:
2e988 20c             | '------------------------------------------------------------------------------
2e988 20c             | on_connect
2e988 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
2e98c 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
2e990 20e             | .retry
2e990 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2e994 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
2e998 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
2e99c 211 00 08 00 FF 
2e9a0 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2e9a4 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
2e9a8 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2e9ac 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2e9b0 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2e9b4 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2e9b8 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e9bc 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
2e9c0 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2e9c4 21b 4C 03 B0 FD |                 call    #poll_waitx
2e9c8 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
2e9cc 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
2e9d0 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2e9d4 21f B8 FF 9F FD |                 jmp     #.retry
2e9d8 220             | .get_dev_desc
2e9d8 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2e9dc 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2e9e0 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2e9e4 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
2e9e8 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
2e9ec 225 88 FB BF FD |                 call    #reset
2e9f0 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2e9f4 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2e9f8 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
2e9fc 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
2ea00 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ea04 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2ea08 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
2ea0c 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2ea10 22e 04 00 00 FF 
2ea14 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
2ea18 230 34 FA BF FD |                 call    #calc_crc5
2ea1c 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
2ea20 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2ea24 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2ea28 234 F7 AD C2 FA |                 rdbyte  total_data, pb
2ea2c 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2ea30 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2ea34 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ea38 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2ea3c 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2ea40 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2ea44 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2ea48 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2ea4c 23d C4 02 B0 FD |                 call    #poll_waitx
2ea50 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2ea54 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2ea58 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2ea5c 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2ea60 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2ea64 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ea68 244 2D 00 64 5D |         if_nz   ret
2ea6c 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2ea70 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2ea74 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2ea78 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2ea7c 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2ea80 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2ea84 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2ea88 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2ea8c 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2ea90 24e 2C FB 9F CD |         if_b    jmp     #host_error
2ea94 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
2ea98 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2ea9c 251 2D EC 63 FD |                 call    pa
2eaa0 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2eaa4 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
2eaa8 254 2C EC 63 FD |                 jmp     pa
2eaac 255             | 
2eaac 255             | '------------------------------------------------------------------------------
2eaac 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2eaac 255             | ' Status reporting is always in the function-to-host direction.
2eaac 255             | '------------------------------------------------------------------------------
2eaac 255             | ' On entry:
2eaac 255             | '   PTRA - start address of the SETUP data in hub.
2eaac 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2eaac 255             | '     stage.
2eaac 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2eaac 255             | ' On exit:
2eaac 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2eaac 255             | '     contains the count of data stage bytes actually received, which must
2eaac 255             | '     always be <= the count requested.
2eaac 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2eaac 255             | '     more specific USB operation error code.
2eaac 255             | '------------------------------------------------------------------------------
2eaac 255             | control_read
2eaac 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2eab0 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2eab4 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
2eab8 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2eabc 259             | .xfer_start
2eabc 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2eac0 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2eac4 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2eac8 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2eacc 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
2ead0 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2ead4 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2ead8 260 61 00 00 FF 
2eadc 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
2eae0 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2eae4 263             | .data
2eae4 263 56 B1 02 F6 |                 mov     pkt_data, total_data
2eae8 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
2eaec 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2eaf0 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2eaf4 267             | .nak_retry
2eaf4 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
2eaf8 268             | .in_retry
2eaf8 268 BC F6 BF FD |                 call    #txn_in
2eafc 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
2eb00 26a 28 00 90 AD |         if_z    jmp     #.commit
2eb04 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2eb08 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2eb0c 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2eb10 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2eb14 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
2eb18 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2eb1c 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2eb20 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2eb24 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
2eb28 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
2eb2c 275             | .commit
2eb2c 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
2eb30 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2eb34 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
2eb38 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
2eb3c 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
2eb40 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2eb44 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
2eb48 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2eb4c 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
2eb50 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2eb54 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
2eb58 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2eb5c 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
2eb60 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
2eb64 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2eb68 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2eb6c 285             | .pre_status
2eb6c 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
2eb70 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
2eb74 287 00 B0 06 F6 |                 mov     pkt_data, #0
2eb78 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2eb7c 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2eb80 28a 61 00 00 FF 
2eb84 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
2eb88 28c             | .out_retry
2eb88 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2eb8c 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2eb90 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
2eb94 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2eb98 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2eb9c 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2eba0 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2eba4 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2eba8 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ebac 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
2ebb0 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
2ebb4 297             | ' I've encountered transfer STALL, even though the data looks correct, and
2ebb4 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
2ebb4 297             | ' ControlRead() transfer gets things unstuck most of the time...
2ebb4 297             | .xfer_retry
2ebb4 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
2ebb8 298 58 01 B0 FD |                 call    #poll_waitx
2ebbc 299 8C F9 BF FD |                 call    #wait_txn_ok
2ebc0 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2ebc4 29b C7 F1 03 F6 |                 mov     ptra, hpar2
2ebc8 29c C8 EF 03 F6 |                 mov     pb, hpar3
2ebcc 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
2ebd0 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2ebd4 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
2ebd8 2a0             | 
2ebd8 2a0             | '------------------------------------------------------------------------------
2ebd8 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
2ebd8 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
2ebd8 2a0             | ' the SETUP data struct is filled with the required values.
2ebd8 2a0             | '------------------------------------------------------------------------------
2ebd8 2a0             | ' On entry:
2ebd8 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
2ebd8 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
2ebd8 2a0             | '     stage.
2ebd8 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
2ebd8 2a0             | ' On exit:
2ebd8 2a0             | '   retval - used to convey the success/failure of each stage.
2ebd8 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2ebd8 2a0             | '     more specific USB operation error code.
2ebd8 2a0             | '------------------------------------------------------------------------------
2ebd8 2a0             | control_write
2ebd8 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2ebdc 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2ebe0 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2ebe4 2a3             | 
2ebe4 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2ebe8 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
2ebec 2a5 F7 91 03 F6 |                 mov     hpar3, pb
2ebf0 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2ebf4 2a7             | .xfer_start
2ebf4 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
2ebf8 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2ebfc 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2ec00 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ec04 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
2ec08 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
2ec0c 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2ec10 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2ec14 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
2ec18 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2ec1c 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2ec20 2b2             | .data
2ec20 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2ec24 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
2ec28 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2ec2c 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
2ec30 2b6             | .out_retry
2ec30 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2ec34 2b7 88 F6 BF FD |                 call    #txn_out
2ec38 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ec3c 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
2ec40 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2ec44 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
2ec48 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
2ec4c 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
2ec50 2be             | .commit
2ec50 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2ec54 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
2ec58 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
2ec5c 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2ec60 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
2ec64 2c3             | pre_status_in
2ec64 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
2ec68 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2ec6c 2c5             | .status_retry
2ec6c 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
2ec70 2c6 44 F5 BF FD |                 call    #txn_in
2ec74 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
2ec78 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
2ec7c 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
2ec80 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
2ec84 2cb 2D 00 64 AD |         if_z    ret
2ec88 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
2ec8c 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ec90 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
2ec94 2cf             | '               ret                                     ' Caller must handle transfer retirement
2ec94 2cf             | 
2ec94 2cf             | '------------------------------------------------------------------------------
2ec94 2cf             | ' Execute an IN interrupt transaction.
2ec94 2cf             | '------------------------------------------------------------------------------
2ec94 2cf             | ' On entry:
2ec94 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
2ec94 2cf             | '   hpar2 - Address of the IN data buffer
2ec94 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
2ec94 2cf             | ' On exit:
2ec94 2cf             | '   retval - the result of the operation.
2ec94 2cf             | '   hpar3 - the count of IN data bytes actually received.
2ec94 2cf             | '------------------------------------------------------------------------------
2ec94 2cf             | do_int_in
2ec94 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2ec98 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2ec9c 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2eca0 2d2             | 
2eca0 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
2eca4 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
2eca8 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
2ecac 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
2ecb0 2d6             | .retry
2ecb0 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
2ecb4 2d7 00 F5 BF FD |                 call    #txn_in
2ecb8 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
2ecbc 2d9 1C 00 90 AD |         if_z    jmp     #.commit
2ecc0 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
2ecc4 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
2ecc8 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
2eccc 2dd 54 00 B0 FD |                 call    #retry_wait
2ecd0 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ecd4 2df 18 00 90 AD |         if_z    jmp     #.post_ret
2ecd8 2e0 D4 FF 9F FD |                 jmp     #.retry
2ecdc 2e1             | .commit
2ecdc 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
2ece0 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
2ece4 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
2ece8 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
2ecec 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2ecf0 2e6             | .post_ret
2ecf0 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
2ecf4 2e7             | 
2ecf4 2e7             | 
2ecf4 2e7             | '------------------------------------------------------------------------------
2ecf4 2e7             | ' Resets the downstream hub port to FS
2ecf4 2e7             | '------------------------------------------------------------------------------
2ecf4 2e7             | dwnstream_reset
2ecf4 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2ecf8 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
2ecfc 2e9             | 
2ecfc 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
2ed00 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2ed04 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2ed08 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2ed0c 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2ed10 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2ed14 2ef             | 
2ed14 2ef             | '------------------------------------------------------------------------------
2ed14 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
2ed14 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
2ed14 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
2ed14 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
2ed14 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
2ed14 2ef             | '------------------------------------------------------------------------------
2ed14 2ef             | ' On entry:
2ed14 2ef             | '   hctwait - wait interval in sysclocks.
2ed14 2ef             | ' On exit:
2ed14 2ef             | '------------------------------------------------------------------------------
2ed14 2ef             | poll_waitx
2ed14 2ef 1A 92 63 FD |                 getct   hct2
2ed18 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
2ed1c 2f1             | .wait
2ed1c 2f1 FF 25 CC FB |                 jnct2   #.wait
2ed20 2f2 2D 00 64 FD |                 ret
2ed24 2f3             | 
2ed24 2f3             | '------------------------------------------------------------------------------
2ed24 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
2ed24 2f3             | '------------------------------------------------------------------------------
2ed24 2f3             | ' On entry:
2ed24 2f3             | '   retval - transaction response PID or error code.
2ed24 2f3             | ' On exit:
2ed24 2f3             | '------------------------------------------------------------------------------
2ed24 2f3             | retry_wait
2ed24 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2ed28 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
2ed2c 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2ed30 2f6 14 00 90 AD |         if_z    jmp     #.nak
2ed34 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
2ed38 2f8 D8 FF BF FD |                 call    #poll_waitx
2ed3c 2f9             | .dec
2ed3c 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
2ed40 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
2ed44 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
2ed48 2fc             | .nak
2ed48 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
2ed4c 2fd C4 FF BF FD |                 call    #poll_waitx
2ed50 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
2ed54 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
2ed58 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
2ed5c 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
2ed60 302 2D 00 64 FD |                 ret
2ed64 303             | 
2ed64 303             | host_reset
2ed64 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
2ed68 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
2ed6c 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
2ed6c 305 BD 01 05 FF 
2ed70 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
2ed74 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
2ed78 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
2ed7c 309             | ' Check to see if the system clock has been changed.
2ed7c 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2ed80 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
2ed84 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
2ed88 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
2ed8c 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2ed90 30e 40 46 62 FD |                 dirl    dp
2ed94 30f             | 
2ed94 30f 28 02 64 FD |                 setq    #1
2ed98 310 80 00 80 FF 
2ed9c 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2eda0 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
2eda4 313             | .enable
2eda4 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2eda8 314 41 46 62 FD |                 dirh    dp
2edac 315 1F 36 63 FD |                 waitx   _1us_
2edb0 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2edb4 317             | 
2edb4 317             |                 ' Handle Port protection enable and startup delay
2edb4 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
2edb8 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
2edbc 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
2edc0 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
2edc4 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
2edc8 31c             | 
2edc8 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
2edcc 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
2edd0 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
2edd4 31f 00 00 04 F6 |                 mov     0-0, #0
2edd8 320             | .regloop
2edd8 320             | 
2edd8 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
2edd8 320             | 
2edd8 320             | discon_entry
2edd8 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
2eddc 321             | 
2eddc 321             |               
2eddc 321             |         if HAVE_HIDPAD
2eddc 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
2ede0 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
2ede4 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
2ede8 324 F7 01 68 FC |                 wrlong  #0,pb
2edec 325             |         end
2edec 325             |         if EMUPAD_MAX_PLAYER > 0
2edec 325             |         end
2edec 325             | 
2edec 325             |                 ' Fall through to disconnected loop
2edec 325             | 
2edec 325             | '-----------------------------------------------------------------------------------------------------------------
2edec 325             | ' Device connect handling (Section 7.1.7.3).
2edec 325             | '-----------------------------------------------------------------------------------------------------------------
2edec 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
2edec 325             | ' device to connect (Section 7.1.7.3).
2edec 325             | '-----------------------------------------------------------------------------------------------------------------
2edec 325             | disconnected
2edec 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
2edf0 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
2edf4 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
2edf8 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
2edfc 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
2ee00 32a             |         if ACTIVITY_LED >= 0
2ee00 32a             |         end
2ee00 32a 22 A7 82 FA |                 rqpin   urx, dm
2ee04 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
2ee08 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
2ee0c 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
2ee10 32e             | .se1_test
2ee10 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
2ee14 32f FC FE BF FD |                 call    #poll_waitx
2ee18 330 22 A7 82 FA |                 rqpin   urx, dm
2ee1c 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2ee20 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
2ee24 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
2ee28 334             | .se1            'SE1 is a fatal error condition
2ee28 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
2ee2c 335 E4 FE BF FD |                 call    #poll_waitx
2ee30 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
2ee34 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
2ee38 338             | .connect_test                                           ' Test lines until stable J/K state seen
2ee38 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
2ee3c 339 22 A7 82 FA |                 rqpin   urx, dm
2ee40 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2ee44 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
2ee48 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
2ee4c 33d             | connected
2ee4c 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
2ee50 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
2ee54 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
2ee58 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
2ee5c 341             | .set_pulse
2ee5c 341 1A 64 63 FD |                 getct   _pulse_time_
2ee60 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
2ee64 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
2ee64 343             | ' of 1ms and make a correction, if necessary.
2ee64 343             | '                mov     htmp, _1ms_
2ee64 343             | '                subs    htmp, iframe_delta
2ee64 343             | '                adds    _frame1ms_clks_, htmp
2ee64 343             | '                debug(udec(_frame1ms_clks_))
2ee64 343             | 
2ee64 343             |                 ' Fall through to idle/processing loop
2ee64 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
2ee68 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
2ee6c 345             | 
2ee6c 345             | hidle
2ee6c 345 22 A7 82 FA |                 rqpin   urx, dm
2ee70 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2ee74 347 98 00 90 CD |         if_c    jmp     #.se0_test
2ee78 348 24 06 70 FD |                 pollct3                         wc
2ee7c 349 68 00 90 3D |         if_nc   jmp     #.nopoll
2ee80 34a 1A 94 63 FD |                 getct   hct3
2ee84 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
2ee88 34c             | 
2ee88 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2ee8c 34d 00 70 E3 F8 |                 getbyte htmp
2ee90 34e             | 
2ee90 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2ee94 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2ee98 350 40 00 90 AD |         if_z    jmp     #.poll
2ee9c 351             | 
2ee9c 351             |         if _HAVE_GAMEPAD
2ee9c 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2eea0 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2eea4 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2eea8 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2eeac 355 2C 00 90 AD |         if_z    jmp     #.poll
2eeb0 356             |         end
2eeb0 356             | 
2eeb0 356             |         if HAVE_MOUSE
2eeb0 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2eeb4 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2eeb8 358 20 00 90 AD |         if_z    jmp     #.poll
2eebc 359             |         end
2eebc 359             | 
2eebc 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2eec0 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2eec4 35b 14 00 90 AD |         if_z    jmp     #.poll
2eec8 35c             | 
2eec8 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2eecc 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2eed0 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2eed4 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2eed8 360             |         if HAVE_MOUSE
2eed8 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2eedc 361             |         else
2eedc 361             |         end
2eedc 361             | 
2eedc 361             | .poll
2eedc 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2eee0 362 2D EC 63 FD |                 call    pa
2eee4 363             | .skip_poll
2eee4 363             | 
2eee4 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2eee8 364             | 
2eee8 364             | .nopoll
2eee8 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2eeec 365 44 00 90 AD |         if_z    jmp     #hsuspend
2eef0 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2eef4 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2eef8 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2eefc 369 1A 84 63 FD |                 getct   hr0
2ef00 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2ef04 36b             |         if ACTIVITY_LED >= 0
2ef04 36b             |         end
2ef04 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2ef08 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2ef0c 36d 5C FF 9F FD |                 jmp     #hidle
2ef10 36e             | ' Check for extended SE0 state on the bus
2ef10 36e             | .se0_test
2ef10 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2ef14 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2ef18 370 22 A7 82 FA |                 rqpin   urx, dm
2ef1c 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2ef20 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2ef24 373 24 F6 BF FD |                 call    #wait_txn_ok
2ef28 374 00 00 80 FF 
2ef2c 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2ef30 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2ef30 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2ef34 377             | 
2ef34 377             | hsuspend
2ef34 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2ef38 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2ef3c 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2ef40 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2ef44 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2ef48 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2ef4c 37d             | 
2ef4c 37d             |                 ' Fall through to resume wait loop
2ef4c 37d             | 
2ef4c 37d             | hwait_resume
2ef4c 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2ef50 37e 02 86 47 F0 |                 shr     hr1, #2
2ef54 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2ef58 380             |         if ACTIVITY_LED >= 0
2ef58 380             |         end
2ef58 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2ef5c 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2ef60 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2ef64 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2ef68 384 18 00 90 AD |         if_z    jmp     #.resume
2ef6c 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2ef70 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2ef74 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2ef78 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2ef7c 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2ef80 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2ef84 38b             | .resume
2ef84 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2ef88 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2ef8c 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2ef90 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2ef94 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2ef98 390 1F 70 63 FD |                 waitx   htmp
2ef9c 391 22 07 28 FC |                 wypin   #OUT_J, dm
2efa0 392 01 70 47 F0 |                 shr     htmp, #1
2efa4 393 1F 70 63 FD |                 waitx   htmp
2efa8 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2efac 395 1A 92 62 FD |                 getct   iframe_ct_base
2efb0 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2efb4 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2efb8 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2efbc 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2efc0 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2efc4 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2efc8 39c             | 
2efc8 39c             | '------------------------------------------------------------------------------
2efc8 39c             | ' Send preamble to enable low-speed HUB ports
2efc8 39c             | '------------------------------------------------------------------------------
2efc8 39c             | ' On entry:
2efc8 39c             | ' On exit:
2efc8 39c             | '   USB baud rate set to low-speed
2efc8 39c             | '------------------------------------------------------------------------------
2efc8 39c             | utx_pre
2efc8 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2efcc 39d 40 46 62 FD |                 dirl    dp
2efd0 39e 28 02 64 FD |                 setq    #1
2efd4 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2efd8 3a0 58 44 62 FD |                 drvl    dm
2efdc 3a1 59 46 62 FD |                 drvh    dp
2efe0 3a2             | 
2efe0 3a2 1E 00 00 FF 
2efe4 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2efe8 3a4             | 
2efe8 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2efec 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2eff0 3a6 28 02 64 3D |         if_nc   setq    #1
2eff4 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2eff8 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2effc 3a9             | .l1
2effc 3a9             | 
2effc 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2f000 3aa 40 46 62 FD |                 dirl    dp
2f004 3ab 28 02 64 FD |                 setq    #1
2f008 3ac 80 00 80 FF 
2f00c 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2f010 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2f014 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2f018 3b0 41 46 62 FD |                 dirh    dp
2f01c 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f020 3b2             | 
2f020 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2f024 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2f028 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2f02c 3b5             | 
2f02c 3b5             | hlut_end
2f02c 3b5             |                 fit     $400
2f02c 3b5             |                 orgh
2f02c                 | if OVERLAP_MEMORY
2f02c                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2f02c                 | end
2f02c                 | '------------------------------------------------------------------------------
2f02c                 | ' Routines called from cog space.
2f02c                 | '------------------------------------------------------------------------------
2f02c                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2f02c                 | '------------------------------------------------------------------------------
2f02c                 | 
2f02c                 | '------------------------------------------------------------------------------
2f02c                 | ' USB host cog initialization.
2f02c                 | '------------------------------------------------------------------------------
2f02c                 | usb_host_init
2f02c                 |                 ' Initialize buffer pointers
2f02c                 |         if OVERLAP_MEMORY
2f02c                 |         else
2f02c     40 15 B0 FE |                 loc     pb, #hid_descr
2f030                 |         end
2f030     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2f034                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2f034                 |                 {
2f034                 |                 }
2f034                 |         
2f034                 |                 {
2f034                 |                 }
2f034                 |                 'loc     pb,#hkbd_report
2f034                 |                 'mov     hkbd_report_p,pb
2f034                 | 
2f034     08 1D B0 FE |                 loc     pb, #hub_descr
2f038     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2f03c     1D 1D B0 FE |                 loc     pb, #urx_buff
2f040     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2f044     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2f048     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2f04c     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2f050     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2f054     18 15 B0 FE |                 loc     pb, #usb_cache_start
2f058     F7 55 02 F6 |                 mov     cache_start_p, pb
2f05c     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2f060     F7 57 02 F6 |                 mov     cache_end_p, pb
2f064                 | 
2f064                 |         if ERROR_LED >= 0
2f064                 |         end
2f064                 | 
2f064                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2f064                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2f064                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2f064                 | ' Configure and enable the Serial Host USB port.
2f064     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2f068                 | 
2f068                 | '------------------------------------------------------------------------------
2f068                 | ' Timing calculations happen before any interrupt(s) are enabled.
2f068                 | '------------------------------------------------------------------------------
2f068                 | ' On entry:
2f068                 | '   htmp - current CLKFREQ value.
2f068                 | '------------------------------------------------------------------------------
2f068                 | hinit_usb_timings
2f068                 | '                getct   htmp2
2f068     B8 59 02 F6 |                 mov     save_sysclk, htmp
2f06c     8D 5B 80 FF 
2f070     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2f074     18 30 63 FD |                 getqx   _12Mbps_
2f078     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2f07c     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2f080     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2f084     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2f088     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2f08c     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2f090     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2f094     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2f098     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2f09c     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2f0a0     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2f0a4     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2f0a8     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2f0ac     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2f0b0     80 00 00 FF 
2f0b4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2f0b8     18 2C 63 FD |                 getqx   _var_64_lower_
2f0bc     19 2E 63 FD |                 getqy   _var_64_upper_
2f0c0     28 2C 63 FD |                 setq    _var_64_lower_
2f0c4     65 CD 1D FF 
2f0c8     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2f0cc     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2f0d0     01 00 00 FF 
2f0d4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2f0d8     18 2C 63 FD |                 getqx   _var_64_lower_
2f0dc     19 2E 63 FD |                 getqy   _var_64_upper_
2f0e0     28 2C 63 FD |                 setq    _var_64_lower_
2f0e4     A1 07 00 FF 
2f0e8     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2f0ec     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2f0f0     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2f0f4     09 36 57 F0 |                 shr     _1us_, #9               wc
2f0f8     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2f0fc     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2f100     18 38 63 FD |                 getqx   _10us_
2f104     09 38 57 F0 |                 shr     _10us_, #9              wc
2f108     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2f10c     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2f110     18 3A 63 FD |                 getqx   _33us_
2f114     09 3A 57 F0 |                 shr     _33us_, #9              wc
2f118     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2f11c     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2f120     18 3C 63 FD |                 getqx   _txn_err_
2f124     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2f128     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2f12c     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2f130     18 3E 63 FD |                 getqx   _500us_
2f134     09 3E 57 F0 |                 shr     _500us_, #9             wc
2f138     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2f13c     01 00 00 FF 
2f140     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2f144     18 40 63 FD |                 getqx   _txn_ok_ls_
2f148     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2f14c     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2f150     01 00 00 FF 
2f154     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2f158     18 42 63 FD |                 getqx   _txn_ok_fs_
2f15c     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2f160     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2f164     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2f168     05 00 00 FF 
2f16c     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2f170     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2f174     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2f178     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2f17c     1C 00 00 FF 
2f180     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2f184     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2f188     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2f18c     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2f190     00 00 00 FF 
2f194     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2f198     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2f19c     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2f1a0     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2f1a4     04 00 00 FF 
2f1a8     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2f1ac     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2f1b0     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2f1b4     8D 5B 00 FF 
2f1b8     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2f1bc     18 4C 63 FD |                 getqx   _preamble_wait_
2f1c0     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2f1c4     01 00 00 FF 
2f1c8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2f1cc     18 2C 63 FD |                 getqx   _var_64_lower_
2f1d0     19 2E 63 FD |                 getqy   _var_64_upper_
2f1d4     28 2C 63 FD |                 setq    _var_64_lower_
2f1d8     01 00 00 FF 
2f1dc     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2f1e0     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2f1e4     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2f1e8     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2f1ec     FF FF 7F FF 
2f1f0     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2f1f4     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2f1f8     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2f1fc     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2f200     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2f204     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2f208     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2f20c     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2f210     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2f214     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2f218     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2f21c     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2f220     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2f224     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2f228     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2f22c     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2f230     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2f234     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2f238     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2f23c     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2f240     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2f244     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2f248     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2f24c     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2f250     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2f254     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2f258     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2f25c                 | '        _ret_   mov     _1sec_, save_sysclk
2f25c                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2f25c                 | '                ret
2f25c                 | {
2f25c                 | }
2f25c                 | 
2f25c                 | '------------------------------------------------------------------------------
2f25c                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2f25c                 | ' one. If it is, start the task progression that will configure the device for
2f25c                 | ' use.
2f25c                 | '------------------------------------------------------------------------------
2f25c                 | ' On entry:
2f25c                 | '   hconfig_base - start address of the cached config descriptor chain.
2f25c                 | ' On exit:
2f25c                 | '------------------------------------------------------------------------------
2f25c                 | hparse_con_desc
2f25c     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2f260     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2f264     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2f268     4E 70 FF F9 |                 movbyts htmp,#%%1032
2f26c     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2f270                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2f270                 | 
2f270     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2f274     6E ED 03 F1 |                 add     pa, hconfig_base
2f278     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2f27c                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2f27c                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2f27c                 | ' that defines a keyboard and/or mouse.
2f27c     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2f280                 | .next_intf
2f280     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2f284     BC 01 90 3D |         if_ae   jmp     #hset_config
2f288     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2f28c     75 F3 03 F1 |                 add     ptrb, hnext_desc
2f290     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2f294     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2f298     0C 00 90 AD |         if_z    jmp     #.intf
2f29c     80 71 C7 FA |                 rdbyte  htmp, ptrb
2f2a0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2f2a4     D8 FF 9F FD |                 jmp     #.next_intf
2f2a8                 | .intf
2f2a8     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2f2ac     00 90 07 F6 |                 mov     hpar3, #0
2f2b0     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2f2b4     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2f2b8     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2f2bc     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2f2c0                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2f2c0                 | 
2f2c0                 | .endp
2f2c0     80 71 C7 FA |                 rdbyte  htmp, ptrb
2f2c4     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2f2c8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2f2cc     78 00 90 3D |         if_ae   jmp     #.get_device
2f2d0     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2f2d4     75 F3 03 F1 |                 add     ptrb, hnext_desc
2f2d8     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2f2dc     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2f2e0     64 00 90 AD |         if_z    jmp     #.get_device
2f2e4     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2f2e8     04 00 90 AD |         if_z    jmp     #.get_ep
2f2ec     D0 FF 9F FD |                 jmp     #.endp
2f2f0                 | .get_ep
2f2f0     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2f2f4     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2f2f8     0F 86 67 F0 |                 shl     hr1, #8 + 7
2f2fc     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2f300     3F 00 00 FF 
2f304     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2f308     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2f30c     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2f310     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2f314     00 90 0F F2 |                 cmp     hpar3, #0               wz
2f318     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2f31c     A0 FF 9F FD |                 jmp     #.endp
2f320                 | .in_ep
2f320     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2f324     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2f328                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2f328     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2f32c     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2f330     8C FF 9F FD |                 jmp     #.endp
2f334                 | .out_ep
2f334     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2f338     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2f33c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2f33c     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2f340     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2f344     78 FF 9F FD |                 jmp     #.endp
2f348                 | 
2f348                 | .get_device
2f348     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2f34c     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2f350     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2f354     68 00 90 AD |         if_z    jmp     #.gamepad
2f358     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2f35c     AC 00 90 AD |         if_z    jmp     #.hub
2f360     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2f364     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2f368     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2f36c     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2f370     4C 00 90 AD |         if_z    jmp     #.gamepad
2f374     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2f378     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2f37c                 | .keyboard
2f37c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2f380                 |         if HAVE_MOUSE
2f380     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2f384                 |         else
2f384                 |         end
2f384     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2f388     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2f38c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f390     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2f394     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2f398     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2f39c                 |                 'debug(udec(kb_intf_num))
2f39c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2f39c     E0 FE 9F FD |                 jmp     #.next_intf
2f3a0                 | if HAVE_MOUSE
2f3a0                 | .mouse
2f3a0     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2f3a4     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2f3a8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2f3ac     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2f3b0     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f3b4                 |                 'getbyte ms_interval, hr2, #3
2f3b4     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2f3b8     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2f3bc                 |                 'debug(udec(kb_intf_num))
2f3bc                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2f3bc     C0 FE 9F FD |                 jmp     #.next_intf
2f3c0                 | end
2f3c0                 | .gamepad
2f3c0     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2f3c4     C7 71 63 F5 |                 xor     htmp, hpar2
2f3c8     3F 00 00 FF 
2f3cc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f3d0     AC FE 9F AD |         if_z    jmp     #.next_intf
2f3d4                 |         if HAVE_MOUSE
2f3d4     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2f3d8     C7 71 63 F5 |                 xor     htmp, hpar2
2f3dc     3F 00 00 FF 
2f3e0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f3e4     98 FE 9F AD |         if_z    jmp     #.next_intf
2f3e8                 |         end
2f3e8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2f3ec     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2f3f0     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2f3f4                 | 
2f3f4     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f3f8     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2f3fc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f400     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2f404     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2f408                 |                 'debug(udec(gp_intf_num))
2f408                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2f408     74 FE 9F FD |                 jmp     #.next_intf
2f40c                 | .hub
2f40c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2f410     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2f414     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2f418     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2f41c     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2f420     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2f424     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2f428     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2f42c     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2f430     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2f434     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f438     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2f43c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2f440                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2f440     3C FE 9F FD |                 jmp     #.next_intf
2f444                 | 
2f444                 | '------------------------------------------------------------------------------
2f444                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2f444                 | ' it according to its function, or functions. In the case of this boot protocol
2f444                 | ' keyboard/mouse class driver:
2f444                 | ' - SetConfiguration(config_num)
2f444                 | ' - SetProtocol(boot)
2f444                 | ' - SetIdle(indefinite)
2f444                 | ' - Enter the device interrupt IN polling task stage.
2f444                 | '------------------------------------------------------------------------------
2f444                 | ' On entry:
2f444                 | ' On exit:
2f444                 | '------------------------------------------------------------------------------
2f444                 | hset_config
2f444                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2f444                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2f444     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2f448     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f44c     00 00 0C F2 |                 cmp     0-0, #0                 wz
2f450     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2f454                 |         if HAVE_MOUSE
2f454     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2f458                 |         end
2f458     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2f45c     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2f460                 | .set_config
2f460     6C 0E D0 FE |                 loc     ptra, #set_config
2f464     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2f468     6E ED 03 F1 |                 add     pa, hconfig_base
2f46c     F6 8D C3 FA |                 rdbyte  hpar1, pa
2f470     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2f474     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2f478     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2f47c     A0 02 A0 FD |                 call    #control_write
2f480     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f484     2D 00 64 5D |         if_nz   ret
2f488                 | .kbd_config
2f488     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2f48c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2f490                 | 
2f490     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2f494     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f498     3F 00 00 FF 
2f49c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f4a0     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2f4a4                 | 
2f4a4     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2f4a8     34 0E D0 FE |                 loc     ptra, #set_protocol
2f4ac     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2f4b0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f4b4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2f4b8     A0 02 A0 FD |                 call    #control_write
2f4bc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f4c0     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2f4c4     E4 02 90 5D |         if_nz   jmp     #.notify_client
2f4c8     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2f4cc     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2f4d0     30 03 B0 FD |                 call    #hset_idle
2f4d4                 |                 'cmp     retval, #PID_ACK        wz
2f4d4                 |         'if_nz   mov     hkbd_ep_addr, #0
2f4d4                 |         'if_nz   jmp     #.notify_client
2f4d4     A8 99 02 F6 |                 mov     hctwait, _2ms_
2f4d8     EF 02 A0 FD |                 call    #poll_waitx
2f4dc     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2f4e0     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2f4e4     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2f4e8     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2f4ec     2C 03 B0 FD |                 call    #hset_kbdled_report
2f4f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f4f4     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2f4f8     B0 02 90 5D |         if_nz   jmp     #.notify_client
2f4fc     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2f500     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f504     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f508     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f50c     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2f510     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2f514     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2f518     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f51c     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2f520     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2f524     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2f528                 |         if !!HAVE_MOUSE
2f528                 |         end
2f528                 | 
2f528                 | .mouse_config
2f528                 | if HAVE_MOUSE
2f528     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2f52c     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2f530     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2f534     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f538     3F 00 00 FF 
2f53c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f540     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2f544                 | 
2f544                 |                 debug("mouse passed addr check")
2f544                 | 
2f544     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2f548     00 00 80 FF 
2f54c     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2f550     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2f554     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f558     55 02 A0 FD |                 call    #control_read
2f55c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f560     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2f564     44 02 90 5D |         if_nz   jmp     #.notify_client
2f568     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2f56c     56 01 00 F6 |                 mov     0-0, total_data
2f570     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f574                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2f574                 | 
2f574     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2f578     64 0D D0 FE |                 loc     ptra, #set_protocol
2f57c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2f580     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f584     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2f588     A0 02 A0 FD |                 call    #control_write
2f58c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f590     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2f594     14 02 90 5D |         if_nz   jmp     #.notify_client
2f598                 |                 debug("mouse passed SetProtocol")
2f598     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2f59c     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2f5a0     60 02 B0 FD |                 call    #hset_idle
2f5a4                 |                 'cmp     retval, #PID_ACK        wz
2f5a4                 |         'if_nz   mov     hmouse_ep_addr, #0
2f5a4                 |         'if_nz   jmp     #.notify_client
2f5a4                 |                 debug("mouse passed SetIdle")
2f5a4     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2f5a8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f5ac     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f5b0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f5b4     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2f5b8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f5bc     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2f5c0     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2f5c4     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2f5c8     3F 00 00 FF 
2f5cc     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2f5d0     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2f5d4     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2f5d8     D0 01 90 FD |                 jmp     #.notify_client
2f5dc                 | end
2f5dc                 | .gamepad_config
2f5dc                 | if _HAVE_GAMEPAD
2f5dc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f5e0     00 00 0C F2 |                 cmp     0-0, #0                 wz
2f5e4     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2f5e8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2f5ec     00 70 03 F6 |                 mov     htmp, 0-0
2f5f0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f5f4     3F 00 00 FF 
2f5f8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f5fc     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2f600                 | 
2f600     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2f604     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2f608     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f60c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f610     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f614     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f618     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2f61c     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2f620     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2f624     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f628     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f62c     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2f630     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2f634     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f638                 | 
2f638                 |                 if EMUPAD_MAX_PLAYER > 0
2f638                 |                 
2f638                 | .rule_loop           
2f638                 |                 end
2f638                 | 
2f638     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2f63c     5C 00 90 AD |         if_e    jmp     #.xinput
2f640     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2f644     00 70 03 F6 |                 mov     htmp,0-0
2f648     01 A6 02 FF 
2f64c     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2f650     7C 00 90 AD |         if_e    jmp     #.ps3
2f654                 | 
2f654     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2f658     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2f65c     00 00 80 5F 
2f660     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2f664     03 00 80 AF 
2f668     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2f66c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2f670     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f674     55 02 A0 FD |                 call    #control_read
2f678     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f67c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2f680     00 00 04 56 |         if_nz   mov     0-0, #0
2f684     24 01 90 5D |         if_nz   jmp     #.notify_client
2f688     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2f68c     56 01 00 F6 |                 mov     0-0, total_data
2f690     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f694                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2f694                 | 
2f694     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2f698     10 01 90 FD |                 jmp     #.notify_client
2f69c                 | .xinput
2f69c     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2f6a0     2D EF 03 F6 |                 mov     pb,hdev_port
2f6a4     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2f6a8     03 EE 27 F3 |                 fle     pb,#3
2f6ac     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2f6b0     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2f6b4                 | 
2f6b4     03 B0 06 F6 |                 mov     pkt_data, #3
2f6b8     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2f6bc     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2f6c0     5A 00 A0 FD |                 call    #txn_out
2f6c4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2f6c8                 | 
2f6c8     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2f6cc     DC 00 90 FD |                 jmp     #.notify_client
2f6d0                 | .ps3
2f6d0     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2f6d4     2D EF 03 F6 |                 mov     pb,hdev_port
2f6d8     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2f6dc     04 EE 27 F3 |                 fle     pb,#4
2f6e0     F7 EF C3 F9 |                 decod   pb
2f6e4     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2f6e8                 | 
2f6e8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2f6ec     00 0C D0 FE |                 loc     ptra, #set_report
2f6f0     01 00 80 FF 
2f6f4     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2f6f8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f6fc     03 61 5C FC |                 wrword  #48, ptra[wLength]
2f700     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2f704     A0 02 A0 FD |                 call    #control_write
2f708                 | 
2f708     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2f70c     E0 0B D0 FE |                 loc     ptra, #set_report
2f710     01 00 80 FF 
2f714     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2f718     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f71c     03 09 5C FC |                 wrword  #4, ptra[wLength]
2f720     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2f724     A0 02 A0 FD |                 call    #control_write
2f728     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2f72c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2f730     00 00 04 56 |         if_nz   mov     0-0, #0
2f734     74 00 90 5D |         if_nz   jmp     #.notify_client
2f738                 | 
2f738     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2f73c     6C 00 90 FD |                 jmp     #.notify_client
2f740                 | end
2f740                 | 
2f740                 | .hub_config
2f740     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2f744     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2f748     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2f74c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f750     3F 00 00 FF 
2f754     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f758     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2f75c                 | 
2f75c     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2f760     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2f764     26 EF 03 F6 |                 mov     pb, hub_descr_p
2f768     55 02 A0 FD |                 call    #control_read
2f76c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f770     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2f774     34 00 90 5D |         if_nz   jmp     #.notify_client
2f778                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2f778                 | 
2f778     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2f77c     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2f780     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2f784                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2f784                 | .pwr_loop
2f784     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2f788     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2f78c     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2f790     A0 02 A0 FD |                 call    #control_write
2f794     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2f798                 | 
2f798     B1 99 02 F6 |                 mov     hctwait, _500ms_
2f79c     B0 99 02 F1 |                 add     hctwait, _100ms_
2f7a0     EF 02 A0 FD |                 call    #poll_waitx
2f7a4                 | 
2f7a4     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2f7a8     00 00 90 FD |                 jmp     #.notify_client
2f7ac                 | 
2f7ac                 | .notify_client
2f7ac     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2f7b0     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2f7b4                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2f7b4                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2f7b4     2D 00 64 FD |                 ret
2f7b8                 | 
2f7b8                 | '------------------------------------------------------------------------------
2f7b8                 | ' Initialize the keyboard/mouse data area to start-up values.
2f7b8                 | '------------------------------------------------------------------------------
2f7b8                 | ' On entry:
2f7b8                 | ' On exit:
2f7b8                 | '------------------------------------------------------------------------------
2f7b8                 | init_kbdm_data
2f7b8     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2f7bc     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2f7c0                 | 
2f7c0     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2f7c4     2B ED 03 F6 |                 mov     pa, cache_end_p
2f7c8                 | .loop
2f7c8     61 01 4C FC |                 wrbyte  #0, ptra++
2f7cc     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2f7d0     F4 FF 9F CD |         if_b    jmp     #.loop
2f7d4                 |         
2f7d4                 |         if EMUPAD_MAX_PLAYER > 0
2f7d4                 |         end
2f7d4                 | 
2f7d4                 | 
2f7d4     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2f7d8                 | .regloop
2f7d8     00 EC 8F F9 |                 altd    pa
2f7dc     00 00 04 F6 |                 mov     0-0, #0
2f7e0     01 EC 07 F1 |                 add     pa, #1
2f7e4     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2f7e8     EC FF 9F 5D |         if_nz   jmp     #.regloop
2f7ec                 | 
2f7ec     E1 E1 61 FF 
2f7f0     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2f7f4     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2f7f8     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2f7fc     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2f800                 | 
2f800     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2f804                 | 
2f804                 | '------------------------------------------------------------------------------
2f804                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2f804                 | ' function.
2f804                 | '------------------------------------------------------------------------------
2f804                 | ' On entry:
2f804                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2f804                 | '   hpar2 - index number of the target interface.
2f804                 | ' On exit:
2f804                 | '------------------------------------------------------------------------------
2f804                 | hset_idle
2f804     A8 99 02 F6 |                 mov     hctwait, _2ms_
2f808     EF 02 A0 FD |                 call    #poll_waitx
2f80c     D8 0A D0 FE |                 loc     ptra, #set_idle
2f810     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2f814     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2f818     A0 02 80 FD |                 jmp     #control_write
2f81c                 | 
2f81c                 | '------------------------------------------------------------------------------
2f81c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2f81c                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2f81c                 | '------------------------------------------------------------------------------
2f81c                 | ' On entry:
2f81c                 | '   ep_addr_pid - device address and enpoint for the request.
2f81c                 | ' On exit:
2f81c                 | '   retval - transaction result.
2f81c                 | '------------------------------------------------------------------------------
2f81c                 | hset_kbdled_report
2f81c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2f820     CC 0A D0 FE |                 loc     ptra, #set_report
2f824     01 00 80 FF 
2f828     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2f82c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f830     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2f834     27 EF 03 F6 |                 mov     pb, urx_buff_p
2f838     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2f83c     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2f840                 | 
2f840                 | '------------------------------------------------------------------------------
2f840                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2f840                 | '------------------------------------------------------------------------------
2f840                 | ' On entry:
2f840                 | ' On exit:
2f840                 | '------------------------------------------------------------------------------
2f840                 | hget_kbd_in_report
2f840     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2f844     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2f848     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2f84c     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2f850     CF 02 A0 FD |                 call    #do_int_in
2f854     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f858     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2f85c                 | 
2f85c     00 90 0F F2 |                 cmp     hpar3, #0               wz
2f860     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2f864                 | 
2f864     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2f868     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2f86c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2f870     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2f874                 | 
2f874     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2f878     18 00 B0 FD |                 call    #hkbd_compare
2f87c                 |         if EMUPAD_MAX_PLAYER > 0
2f87c                 |         end
2f87c                 | 
2f87c                 | .led_check
2f87c     3B 71 03 F6 |                 mov     htmp, kb_led_states
2f880     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2f884     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2f888     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2f88c     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2f890     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2f894                 | 
2f894                 | '------------------------------------------------------------------------------
2f894                 | ' Compare current and previous keyboard data buffers for keypress changes.
2f894                 | '------------------------------------------------------------------------------
2f894                 | hkbd_compare
2f894     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2f898     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2f89c     61 73 07 FB |                 rdlong  htmp1, ptra++
2f8a0     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2f8a4     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2f8a8     61 73 07 FB |                 rdlong  htmp1, ptra++
2f8ac     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2f8b0     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2f8b4     2D 00 64 AD |         if_z    ret
2f8b8                 | 
2f8b8     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2f8bc                 | 
2f8bc                 |                 ' Handle modifiers
2f8bc     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2f8c0     00 87 C7 FA |                 rdbyte  hr1, ptra
2f8c4     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2f8c8     63 86 63 FD |                 mergew  hr1
2f8cc     08 EC 07 F6 |                 mov     pa,#8
2f8d0                 | .modloop
2f8d0     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2f8d4     E8 8C 07 F6 |                 mov     hpar1,#$E8
2f8d8     F6 8D 83 F1 |                 sub     hpar1,pa
2f8dc     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2f8e0     FB ED 6F FB |                 djnz    pa,#.modloop
2f8e4                 | 
2f8e4     6F E0 75 FD | .release        modc    _set    wc
2f8e8                 |                 'alts    hdev_port, #hid_report_p
2f8e8                 |                 'mov     ptra, hid_report_p
2f8e8     02 F0 07 F1 |                 add     ptra, #2
2f8ec     06 EC 07 F6 |                 mov     pa, #6
2f8f0     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2f8f4     20 00 90 AD |         if_z    jmp     #.rl3
2f8f8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2f8fc     02 F2 07 F1 |                 add     ptrb, #2
2f900     06 EE 07 F6 |                 mov     pb, #6
2f904     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2f908     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2f90c     08 00 90 AD |         if_z    jmp     #.rl3
2f910     FC EF 6F FB |                 djnz    pb, #.rl2
2f914     68 00 B0 FD |                 call    #hkbd_translate
2f918     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2f91c                 | 
2f91c     00 90 07 F6 |                 mov     hpar3, #0
2f920     1F 90 27 F4 |                 bith    hpar3, #31
2f924                 | 
2f924     6F 00 74 FD | .press          modc    _clr    wc
2f928     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2f92c     02 F0 07 F1 |                 add     ptra, #2
2f930     06 EC 07 F6 |                 mov     pa, #6
2f934     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2f938     20 00 90 AD |         if_z    jmp     #.pl3
2f93c     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2f940     02 F2 07 F1 |                 add     ptrb, #2
2f944     06 EE 07 F6 |                 mov     pb, #6
2f948     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2f94c     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2f950     08 00 90 AD |         if_z    jmp     #.pl3
2f954     FC EF 6F FB |                 djnz    pb, #.pl2
2f958     24 00 B0 FD |                 call    #hkbd_translate
2f95c     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2f960                 | 
2f960     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2f964     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2f968     28 02 64 FD |                 setq #1
2f96c     61 73 07 FB |                 rdlong  htmp1, ptra++
2f970     28 02 64 FD |                 setq #1
2f974     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2f978     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2f97c                 | 
2f97c     2D 00 64 FD |                 ret
2f980                 | 
2f980                 | '------------------------------------------------------------------------------
2f980                 | ' Translate keyboard scancode to ASCII
2f980                 | '------------------------------------------------------------------------------
2f980                 | ' On entry:
2f980                 | '   hpar1 - scancode
2f980                 | '   hpar2 - key modifiers state
2f980                 | '       c - pressed (0) or released (1) flag
2f980                 | ' On exit:
2f980                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2f980                 | '               30..17 = unused
2f980                 | '                   18 = scroll-lock state 
2f980                 | '                   17 = caps-lock state
2f980                 | '                   16 = num-lock state 
2f980                 | '                15..8 = key modifiers state
2f980                 | '                 7..0 = scancode
2f980                 | '------------------------------------------------------------------------------
2f980                 | hkbd_translate
2f980     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2f984     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2f988     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2f98c     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2f990     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2f994     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2f998                 | 
2f998                 |         if EMUPAD_MAX_PLAYER > 0
2f998                 | 
2f998                 |         if EMUPAD_BT0_BIT >= 0
2f998                 |         end
2f998                 |         if EMUPAD_BT1_BIT >= 0
2f998                 |         end
2f998                 |         if EMUPAD_BT2_BIT >= 0
2f998                 |         end
2f998                 |         if EMUPAD_BT3_BIT >= 0
2f998                 |         end
2f998                 |         if EMUPAD_BT4_BIT >= 0
2f998                 |         end
2f998                 |         if EMUPAD_BT5_BIT >= 0
2f998                 |         end
2f998                 |         if EMUPAD_BT6_BIT >= 0
2f998                 |         end
2f998                 |         if EMUPAD_BT7_BIT >= 0
2f998                 |         end
2f998                 |         if EMUPAD_BT8_BIT >= 0
2f998                 |         end
2f998                 |         if EMUPAD_BT9_BIT >= 0
2f998                 |         end
2f998                 | 
2f998                 |         end
2f998     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2f99c     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2f9a0     1F 8C 47 F4 |                 bitc    hpar1, #31
2f9a4                 |         if KEYQUEUE_SIZE > 0
2f9a4     C4 09 B0 FE |                 loc pb,#keyq_head
2f9a8     F7 71 E3 FA |                 rdword htmp,pb
2f9ac     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2f9b0     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2f9b4     B8 75 03 F6 |                 mov htmp2,htmp
2f9b8     04 74 07 FA |                 mul htmp2,#4
2f9bc     F7 75 03 F1 |                 add htmp2,pb
2f9c0     02 74 07 F1 |                 add htmp2,#2
2f9c4     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
2f9c8     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2f9cc     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
2f9d0     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2f9d4                 |         end
2f9d4     2D 00 7C FD |                 ret wcz
2f9d8                 | 
2f9d8                 | if HAVE_MOUSE
2f9d8                 | '------------------------------------------------------------------------------
2f9d8                 | ' Execute an IN interrupt transaction to poll for mouse activity.
2f9d8                 | '------------------------------------------------------------------------------
2f9d8                 | ' On entry:
2f9d8                 | ' On exit:
2f9d8                 | '------------------------------------------------------------------------------
2f9d8                 | hget_mouse_in_report
2f9d8     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2f9dc     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2f9e0     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2f9e4     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
2f9e8     CF 02 A0 FD |                 call    #do_int_in
2f9ec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f9f0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2f9f4                 | 
2f9f4     00 90 0F F2 |                 cmp     hpar3, #0               wz
2f9f8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2f9fc                 | 
2f9fc     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
2fa00     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2fa04     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
2fa08     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
2fa0c                 | 
2fa0c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2fa10     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2fa14     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
2fa18     01 90 87 31 |         if_ae   sub     hpar3, #1
2fa1c                 | 
2fa1c     40 09 90 FE |                 loc     pa, #mouse_limits
2fa20     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2fa24                 | 
2fa24                 |                 ' load xacc,yacc,zacc
2fa24     28 04 64 FD |                 setq    #3-1
2fa28     80 87 07 FB |                 rdlong  hr1,ptrb
2fa2c                 |                 ' load limits and outptr
2fa2c     28 04 64 FD |                 setq    #3-1
2fa30     F6 73 03 FB |                 rdlong  htmp1,pa
2fa34                 | 
2fa34     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
2fa38     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
2fa3c     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
2fa40     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2fa44     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
2fa48     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2fa4c     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
2fa50     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2fa54                 |               
2fa54                 | 
2fa54     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
2fa58     07 70 67 F7 |                 signx   htmp, #7
2fa5c     B8 87 03 F1 |                 add     hr1,htmp
2fa60     00 72 0F F2 |                 cmp     htmp1,#0 wz
2fa64     B9 87 63 53 |         if_ne   fles    hr1,htmp1
2fa68     00 86 47 53 |         if_ne   fges    hr1,#0
2fa6c                 | 
2fa6c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
2fa70     07 70 67 F7 |                 signx   htmp, #7
2fa74     B8 89 03 F1 |                 add     hr2,htmp
2fa78     00 74 0F F2 |                 cmp     htmp2,#0 wz
2fa7c     BA 89 63 53 |         if_ne   fles    hr2,htmp2
2fa80     00 88 47 53 |         if_ne   fges    hr2,#0
2fa84                 |                 
2fa84                 | 
2fa84     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
2fa88     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2fa8c     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
2fa90     B8 8B 03 A1 |         if_z    add     hr3,htmp
2fa94                 | 
2fa94     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
2fa98     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2fa9c                 | 
2fa9c                 |                 ' write back accumulators
2fa9c     28 04 64 FD |                 setq    #3-1
2faa0     80 87 67 FC |                 wrlong  hr1,ptrb
2faa4                 |                 ' if outptr set, write X/Y words
2faa4     00 76 0F F2 |                 cmp htmp3,#0                    wz
2faa8     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2faac     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
2fab0     2D 00 64 FD |                 ret
2fab4                 | end
2fab4                 | 
2fab4                 | '------------------------------------------------------------------------------
2fab4                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2fab4                 | '------------------------------------------------------------------------------
2fab4                 | ' On entry:
2fab4                 | ' On exit:
2fab4                 | '------------------------------------------------------------------------------
2fab4                 | if _HAVE_GAMEPAD
2fab4                 | hget_gp_in_report
2fab4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2fab8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2fabc                 | 
2fabc     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2fac0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2fac4     00 90 E3 F8 |                 getbyte hpar3
2fac8     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2facc     CF 02 A0 FD |                 call    #do_int_in
2fad0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fad4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2fad8                 | 
2fad8     00 90 0F F2 |                 cmp     hpar3, #0               wz
2fadc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2fae0                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
2fae0                 | 
2fae0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2fae4     00 70 E3 F8 |                 getbyte htmp                            ' |
2fae8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2faec     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
2faf0     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2faf4     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
2faf8     B8 01 C0 F8 |                 setbyte htmp                            ' |
2fafc                 | 
2fafc                 | ' Note: the following code compares the current and previous reports
2fafc                 | ' and process the data if there are changes to ease the debug output.
2fafc                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
2fafc                 | ' gpPreReport buffer.
2fafc                 | 
2fafc                 |                 ' ----- start of block to remove
2fafc                 |                 {
2fafc                 |                 }
2fafc                 |                 ' ----- end of block to remove
2fafc     F4 04 90 FE |                 loc pa,#hpad_translate
2fb00     2A EC 63 FD |                 push pa
2fb04                 | 
2fb04                 |                 ' FALL THROUGH !!!!
2fb04                 | 
2fb04                 | '------------------------------------------------------------------------------
2fb04                 | ' Decode controller report
2fb04                 | '------------------------------------------------------------------------------
2fb04                 | hid_decode
2fb04                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2fb04     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
2fb08     00 04 00 FF 
2fb0c     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
2fb10                 | 
2fb10     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2fb14                 | 
2fb14     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2fb18     00 2A E3 F8 |                 getbyte hidr_type
2fb1c     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
2fb20     34 02 90 AD |         if_z    jmp     #hpad_xinput
2fb24     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
2fb28     1C 03 90 AD |         if_z    jmp     #hpad_ps3
2fb2c     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
2fb30     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2fb34     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
2fb38                 |                 
2fb38                 | 
2fb38                 | '------------------------------------------------------------------------------
2fb38                 | ' Handle HID controller (or mouse now
2fb38                 | ' On entry:
2fb38                 | '   ptrb - controller report
2fb38                 | '------------------------------------------------------------------------------
2fb38                 | hpad_hid
2fb38     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2fb3c     F7 F1 03 F6 |                 mov     ptra, pb
2fb40     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2fb44     00 EC 03 F6 |                 mov     pa, 0-0
2fb48                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
2fb48     19 2A 3B FF 
2fb4c     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
2fb50                 | 
2fb50                 | .next
2fb50     00 EC 5F F2 |                 cmps    pa, #0      wcz
2fb54     2D 00 7C ED |         if_be   ret     wcz
2fb58                 | 
2fb58     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2fb5c     01 EC 87 F1 |                 sub     pa, #1
2fb60     00 8E 07 F6 |                 mov     hpar2, #0
2fb64                 | 
2fb64     C6 71 03 F6 |                 mov     htmp, hpar1
2fb68     03 70 07 F5 |                 and     htmp, #$03
2fb6c     01 70 0F F2 |                 cmp     htmp, #1    wz
2fb70     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
2fb74     07 8E 67 A7 |         if_z    signx   hpar2,#7
2fb78     01 EC 87 A1 |         if_z    sub     pa, #1
2fb7c     02 70 0F F2 |                 cmp     htmp, #2    wz
2fb80     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
2fb84     0F 8E 67 A7 |         if_z    signx   hpar2,#15
2fb88     02 EC 87 A1 |         if_z    sub     pa, #2
2fb8c     03 70 0F F2 |                 cmp     htmp, #3    wz
2fb90     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
2fb94     04 EC 87 A1 |         if_z    sub     pa, #4
2fb98                 | 
2fb98     FC 8C 07 F5 |                 and     hpar1, #$FC
2fb9c                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2fb9c                 | 
2fb9c     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
2fba0     0C 01 90 AD |         if_z    jmp     #.report_id
2fba4     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
2fba8     24 01 90 AD |         if_z    jmp     #.usage_page
2fbac     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
2fbb0     2C 01 90 AD |         if_z    jmp     #.usage
2fbb4     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
2fbb8     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2fbbc     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
2fbc0     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2fbc4     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
2fbc8     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2fbcc     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
2fbd0     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2fbd4     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
2fbd8     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2fbdc     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
2fbe0     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2fbe4     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
2fbe8     64 FF 9F 5D |         if_nz   jmp     #.next
2fbec                 | 
2fbec     D8 1D A7 FB |                 tjf     hidr_state,#.next
2fbf0                 | 
2fbf0     03 8E 07 F5 |                 and     hpar2, #$03
2fbf4     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
2fbf8     18 00 90 5D |         if_nz   jmp     #.skip
2fbfc                 | 
2fbfc     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
2fc00     20 00 90 AD |         if_z    jmp     #.axes
2fc04     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
2fc08     5C 00 90 AD |         if_z    jmp     #.hats
2fc0c     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
2fc10     70 00 90 AD |         if_z    jmp     #.buttons
2fc14                 | .skip
2fc14     8F 71 03 F6 |                 mov     htmp, hidr_size
2fc18     90 71 03 FA |                 mul     htmp, hidr_count
2fc1c     B8 23 03 F1 |                 add     hidr_offset, htmp
2fc20     2C FF 9F FD |                 jmp     #.next
2fc24                 | .axes
2fc24                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2fc24     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
2fc28     90 87 03 F6 |                 mov     hr1, hidr_count
2fc2c                 | .l1
2fc2c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2fc30     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2fc34     04 03 B0 FD |                 call    #hpad_getbits
2fc38     64 03 B0 FD |                 call    #hpad_normalize
2fc3c     06 84 1F F2 |                 cmp     hr0, #6         wcz
2fc40     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2fc44     00 88 43 C8 |         if_b    getnib  hr2
2fc48     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
2fc4c     5F 01 20 C9 |         if_b    setword retval
2fc50     01 84 07 C1 |         if_b    add     hr0, #1
2fc54     8F 23 03 F1 |                 add     hidr_offset, hidr_size
2fc58     F4 87 6F FB |                 djnz    hr1, #.l1
2fc5c                 | 
2fc5c     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
2fc60     01 1C 07 F6 |                 mov     hidr_state, #1
2fc64     E8 FE 9F FD |                 jmp     #.next
2fc68                 | .hats
2fc68                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
2fc68     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2fc6c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2fc70     C8 02 B0 FD |                 call    #hpad_getbits
2fc74     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
2fc78     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2fc7c     01 1C 07 F6 |                 mov     hidr_state, #1
2fc80     90 FF 9F FD |                 jmp     #.skip
2fc84                 | .buttons
2fc84                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
2fc84     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2fc88     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2fc8c     90 8F 03 FA |                 mul     hpar2, hidr_count
2fc90     A8 02 B0 FD |                 call    #hpad_getbits
2fc94     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
2fc98     B8 BF 62 F0 |                 shl     retval, htmp
2fc9c     5F 17 43 F5 |                 or      hidr_buttons, retval
2fca0     90 71 03 F1 |                 add     htmp, hidr_count
2fca4     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
2fca8     01 1C 07 F6 |                 mov     hidr_state, #1
2fcac     64 FF 9F FD |                 jmp     #.skip
2fcb0                 | .report_id
2fcb0     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
2fcb4     2D 00 7C 5D |         if_nz   ret     wcz
2fcb8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2fcbc     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
2fcc0     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
2fcc4     01 1C 67 56 |         if_nz   neg     hidr_state,#1
2fcc8     01 F2 87 51 |         if_nz   sub     ptrb,#1
2fccc     80 FE 9F FD |                 jmp     #.next
2fcd0                 | .usage_page
2fcd0     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
2fcd4     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
2fcd8     04 1C 07 A6 |         if_z    mov     hidr_state, #4
2fcdc     70 FE 9F FD |                 jmp     #.next
2fce0                 | .usage
2fce0     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
2fce4     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
2fce8     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
2fcec     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2fcf0     5C FE 9F AD |         if_z    jmp     #.next
2fcf4     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
2fcf8     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
2fcfc     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2fd00     4C FE 9F AD |         if_z    jmp     #.next
2fd04     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
2fd08     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
2fd0c     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
2fd10     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
2fd14     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
2fd18     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
2fd1c     10 00 90 AD |         if_z    jmp     #.usage_axis
2fd20     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
2fd24     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
2fd28     03 1C 07 A6 |         if_z    mov     hidr_state, #3
2fd2c     20 FE 9F FD |                 jmp     #.next
2fd30                 | .usage_axis
2fd30     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
2fd34     18 FE 9F CD |         if_b    jmp     #.next
2fd38     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
2fd3c     C7 01 00 F8 |                 setnib  hpar2
2fd40                 | 
2fd40     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
2fd44     C7 8F C3 F9 |                 decod   hpar2
2fd48     C7 0F 43 F5 |                 or      hidr_flags, hpar2
2fd4c                 | 
2fd4c     01 24 07 F1 |                 add     hidr_usage_idx, #1
2fd50     02 1C 07 F6 |                 mov     hidr_state, #2
2fd54     F8 FD 9F FD |                 jmp     #.next
2fd58                 | 
2fd58                 | '------------------------------------------------------------------------------
2fd58                 | ' Handle XInput controller
2fd58                 | ' On entry:
2fd58                 | '   ptrb - controller report
2fd58                 | '------------------------------------------------------------------------------
2fd58                 | '   Default implementation translates the report to a pseudo-defacto hid
2fd58                 | '   standard and jumps to hpad_translate for actions.
2fd58                 | '   Implementors may take specific actions for this kind of controller.
2fd58                 | '------------------------------------------------------------------------------
2fd58                 | hpad_xinput
2fd58     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
2fd5c     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
2fd60     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
2fd64     14 70 0F F2 |                 cmp     htmp, #$14      wz
2fd68     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
2fd6c                 | 
2fd6c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2fd6c                 | 
2fd6c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
2fd70     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
2fd74                 | 
2fd74     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
2fd78     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
2fd7c     5F BF 22 F6 |                 not     retval
2fd80     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2fd84     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
2fd88     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
2fd8c     5F BF 22 F6 |                 not     retval
2fd90     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2fd94                 | 
2fd94     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2fd98     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
2fd9c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2fda0     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
2fda4     F8 01 B0 FD |                 call    #hpad_normalize
2fda8     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
2fdac     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
2fdb0     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2fdb4     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
2fdb8     E4 01 B0 FD |                 call    #hpad_normalize
2fdbc     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
2fdc0                 | 
2fdc0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2fdc4     81 BF E6 FA |                 rdword  retval, ptrb[1]
2fdc8     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2fdcc     00 16 47 F4 |                 bitc    hidr_buttons, #0
2fdd0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2fdd4     01 16 47 F4 |                 bitc    hidr_buttons, #1
2fdd8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2fddc     02 16 47 F4 |                 bitc    hidr_buttons, #2
2fde0     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2fde4     03 16 47 F4 |                 bitc    hidr_buttons, #3
2fde8     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
2fdec     04 16 47 F4 |                 bitc    hidr_buttons, #4
2fdf0     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
2fdf4     05 16 47 F4 |                 bitc    hidr_buttons, #5
2fdf8     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
2fdfc     08 16 47 F4 |                 bitc    hidr_buttons, #8
2fe00     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
2fe04     09 16 47 F4 |                 bitc    hidr_buttons, #9
2fe08     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
2fe0c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2fe10     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
2fe14     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2fe18     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
2fe1c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2fe20                 | 
2fe20     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2fe24     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
2fe28     7A BB 7A FF 
2fe2c     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
2fe30     F9 FF 7F FF 
2fe34     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
2fe38     B9 71 5F F9 |                 altgn   htmp, #htmp1
2fe3c     00 70 43 F8 |                 getnib  htmp
2fe40     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2fe44                 | 
2fe44     AC 01 90 FD |                 jmp     #hpad_translate
2fe48                 | 
2fe48                 | '------------------------------------------------------------------------------
2fe48                 | ' Handle PS3 controller
2fe48                 | ' On entry:
2fe48                 | '   ptrb - controller report
2fe48                 | '------------------------------------------------------------------------------
2fe48                 | '   Default implementation translates the report to a pseudo-defacto hid
2fe48                 | '   standard and jumps to hpad_translate for actions.
2fe48                 | '   Implementors may take specific actions for this kind of controller.
2fe48                 | '------------------------------------------------------------------------------
2fe48                 | hpad_ps3
2fe48     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2fe4c     01 70 0F F2 |                 cmp     htmp, #$01      wz
2fe50     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
2fe54                 | 
2fe54                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2fe54                 | 
2fe54     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2fe58     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
2fe5c     40 01 B0 FD |                 call    #hpad_normalize
2fe60     5F 11 23 F9 |                 setword hidr_axis, retval, #0
2fe64     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
2fe68     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
2fe6c     30 01 B0 FD |                 call    #hpad_normalize
2fe70     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2fe74     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
2fe78     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
2fe7c     20 01 B0 FD |                 call    #hpad_normalize
2fe80     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
2fe84     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
2fe88     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
2fe8c     10 01 B0 FD |                 call    #hpad_normalize
2fe90     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2fe94     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
2fe98     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
2fe9c                 | 
2fe9c     08 8C 07 F6 |                 mov     hpar1, #8
2fea0     13 8E 07 F6 |                 mov     hpar2, #19
2fea4     94 00 B0 FD |                 call    #hpad_getbits
2fea8                 | 
2fea8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2feac     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2feb0     00 16 47 F4 |                 bitc    hidr_buttons, #0
2feb4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2feb8     01 16 47 F4 |                 bitc    hidr_buttons, #1
2febc     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2fec0     02 16 47 F4 |                 bitc    hidr_buttons, #2
2fec4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2fec8     03 16 47 F4 |                 bitc    hidr_buttons, #3
2fecc     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
2fed0     04 16 47 F4 |                 bitc    hidr_buttons, #4
2fed4     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
2fed8     05 16 47 F4 |                 bitc    hidr_buttons, #5
2fedc     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
2fee0     06 16 47 F4 |                 bitc    hidr_buttons, #6
2fee4     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
2fee8     07 16 47 F4 |                 bitc    hidr_buttons, #7
2feec     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
2fef0     08 16 47 F4 |                 bitc    hidr_buttons, #8
2fef4     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
2fef8     09 16 47 F4 |                 bitc    hidr_buttons, #9
2fefc     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
2ff00     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2ff04     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
2ff08     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2ff0c     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
2ff10     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2ff14                 | 
2ff14     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2ff18     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
2ff1c     09 FA 79 FF 
2ff20     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
2ff24     FF FA 7F FF 
2ff28     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
2ff2c     B9 71 5F F9 |                 altgn   htmp, #htmp1
2ff30     00 70 43 F8 |                 getnib  htmp
2ff34     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2ff38                 | 
2ff38     B8 00 90 FD |                 jmp     #hpad_translate
2ff3c                 | 
2ff3c                 | '------------------------------------------------------------------------------
2ff3c                 | ' Read bits from report data buffer
2ff3c                 | '------------------------------------------------------------------------------
2ff3c                 | ' On entry:
2ff3c                 | '   PTRB - report buffer
2ff3c                 | '   hpar1 - start bit
2ff3c                 | '   hpar2 - number of bits
2ff3c                 | ' On exit:
2ff3c                 | '   retval - bits
2ff3c                 | '------------------------------------------------------------------------------
2ff3c                 | hpad_getbits
2ff3c     C6 71 03 F6 |                 mov     htmp, hpar1
2ff40     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
2ff44     F9 71 03 F1 |                 add     htmp, ptrb
2ff48     B8 BF 02 FB |                 rdlong  retval, htmp
2ff4c                 | 
2ff4c     C6 73 03 F6 |                 mov     htmp1, hpar1
2ff50     07 72 07 F5 |                 and     htmp1, #$07     ' shift
2ff54     B9 BF 42 F0 |                 shr     retval, htmp1
2ff58                 | 
2ff58     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
2ff5c     10 00 90 1D |         if_a    jmp     #.l1
2ff60                 | 
2ff60     C7 8F C3 F9 |                 decod   hpar2
2ff64     01 8E 87 F1 |                 sub     hpar2, #1
2ff68     C7 BF 02 F5 |                 and     retval, hpar2
2ff6c     2D 00 64 FD |                 ret
2ff70                 | .l1
2ff70     FF 7F 00 FF 
2ff74     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
2ff78     03 70 07 F1 |                 add     htmp, #3
2ff7c     B8 75 03 FB |                 rdlong  htmp2, htmp
2ff80     18 8E 87 F1 |                 sub     hpar2, #24
2ff84     C7 8F C3 F9 |                 decod   hpar2
2ff88     01 8E 87 F1 |                 sub     hpar2, #1
2ff8c     B9 75 43 F0 |                 shr     htmp2, htmp1
2ff90     C7 75 03 F5 |                 and     htmp2, hpar2
2ff94     18 74 67 F0 |                 shl     htmp2, #24
2ff98     BA BF 42 F5 |                 or      retval, htmp2
2ff9c     2D 00 64 FD |                 ret
2ffa0                 | 
2ffa0                 | '------------------------------------------------------------------------------
2ffa0                 | ' Normalize value to signed word (-32768 / 32767)
2ffa0                 | '------------------------------------------------------------------------------
2ffa0                 | ' On entry:
2ffa0                 | '   retval - value to normalize
2ffa0                 | '   hidr_lminmax - min (word 1) max (word 0) value range
2ffa0                 | '   - or -
2ffa0                 | '   hidr_pminmax - min (word 1) max (word 0) value range
2ffa0                 | '   hidr_size - value bits length
2ffa0                 | ' On exit:
2ffa0                 | '   retval - normalized value
2ffa0                 | '------------------------------------------------------------------------------
2ffa0                 | hpad_normalize
2ffa0     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
2ffa4     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
2ffa8     2D 00 64 AD |         if_z    ret
2ffac     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
2ffb0     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
2ffb4     0F 72 77 F7 |                 signx   htmp1, #15      wc
2ffb8     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
2ffbc     00 BE 66 C7 |         if_c    signx   retval, #0-0
2ffc0     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
2ffc4     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
2ffc8     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
2ffcc     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
2ffd0     B8 71 53 F6 |                 abs     htmp            wc
2ffd4     1F BE 0E F4 |                 testb   retval, #31     wz
2ffd8     5F BF 42 F6 |                 abs     retval
2ffdc     B8 BF 12 FD |                 qdiv    retval, htmp
2ffe0     18 BE 62 FD |                 getqx   retval
2ffe4     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
2ffe8     C0 FF 7F FF 
2ffec     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
2fff0     2D 00 64 FD |                 ret
2fff4                 | 
2fff4                 | '------------------------------------------------------------------------------
2fff4                 | ' Perform controller actions
2fff4                 | ' On entry:
2fff4                 | '    hidr_id        report id
2fff4                 | '    hidr_axis      axis value (signed word, 2 axes per long)
2fff4                 | '                      X = hidr_axis+0, #0
2fff4                 | '                      Y = hidr_axis+0, #1
2fff4                 | '                      Z = hidr_axis+1, #0
2fff4                 | '                     RX = hidr_axis+1, #1
2fff4                 | '                     RY = hidr_axis+2, #0
2fff4                 | '                     RZ = hidr_axis+2, #1
2fff4                 | '    hidr_buttons   buttons state (bits 0 to 31)
2fff4                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
2fff4                 | '
2fff4                 | '                     -------3 -------2 -------1 -------0 byte
2fff4                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
2fff4                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
2fff4                 | '                                zyx||| |||||||| ++++++++ n. buttons
2fff4                 | '                                |||||| ||||++++--------- n. axes
2fff4                 | '                                |||||| ++++------------- n. hats
2fff4                 | '                                ++++++------------------ valid axes
2fff4                 | '------------------------------------------------------------------------------
2fff4                 | hpad_translate
2fff4                 | 
2fff4                 | 
2fff4                 |         if HAVE_HIDPAD
2fff4     84 0C F0 FE |                 loc     ptrb,#hidpad_report
2fff8     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
2fffc     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
30000     01 70 E7 F2 |                 cmpsub  htmp,#1
30004     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
30008     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3000c     2D 00 7C 3D |         if_ae   ret     wcz
30010     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
30014     B8 F3 03 F1 |                 add     ptrb,htmp
30018     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3001c     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
30020     28 0C 64 FD |                 setq    #7-1
30024     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
30028                 |         end
30028                 | 
30028                 | 
30028                 |         if EMUPAD_MAX_PLAYER > 0
30028                 | .emupad_no_hat
30028                 |         if EMUPAD_BT0_BIT >= 0
30028                 |         end
30028                 |         if EMUPAD_BT1_BIT >= 0
30028                 |         end
30028                 |         if EMUPAD_BT2_BIT >= 0
30028                 |         end
30028                 |         if EMUPAD_BT3_BIT >= 0
30028                 |         end
30028                 |         if EMUPAD_BT4_BIT >= 0
30028                 |         end
30028                 |         if EMUPAD_BT5_BIT >= 0
30028                 |         end
30028                 |         if EMUPAD_BT6_BIT >= 0
30028                 |         end
30028                 |         if EMUPAD_BT7_BIT >= 0
30028                 |         end
30028                 |         if EMUPAD_BT8_BIT >= 0
30028                 |         end
30028                 |         if EMUPAD_BT9_BIT >= 0
30028                 |         end
30028                 | .emupad_slot_over
30028                 |         end
30028                 | 
30028                 |         if 0
30028                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
30028                 | 
30028                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
30028                 | 
30028                 |         end
30028     2D 00 64 FD |                 ret
3002c                 | end
3002c                 | 
3002c                 | if EMUPAD_MAX_PLAYER > 0
3002c                 | '------------------------------------------------------------------------------
3002c                 | ' Clear EmuPad state
3002c                 | '------------------------------------------------------------------------------
3002c                 | emupad_reset
3002c                 | 
3002c                 | '------------------------------------------------------------------------------
3002c                 | ' Get EmuPad Player number for current device (into retval)
3002c                 | ' Z flag is also set if current device is valid
3002c                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3002c                 | '------------------------------------------------------------------------------
3002c                 | emupad_getnum
3002c                 | .loop
3002c                 | '------------------------------------------------------------------------------
3002c                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3002c                 | '------------------------------------------------------------------------------
3002c                 | emupad_discon
3002c                 | .loop         
3002c                 |         
3002c                 |         ' FALL THROUGH!!!
3002c                 | 
3002c                 | '------------------------------------------------------------------------------
3002c                 | ' Update EmuPad reports (all of them...)
3002c                 | '------------------------------------------------------------------------------
3002c                 | emupad_write_reports
3002c                 | .devloop
3002c                 | 
3002c                 | end
3002c                 | 
3002c                 | 
3002c                 | '------------------------------------------------------------------------------
3002c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3002c                 | '------------------------------------------------------------------------------
3002c                 | ' On entry:
3002c                 | ' On exit:
3002c                 | '------------------------------------------------------------------------------
3002c                 | hget_hub_status
3002c     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
30030     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
30034     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
30038     01 90 2F F9 |                 setword hpar3, #1, #1
3003c     CF 02 A0 FD |                 call    #do_int_in
30040     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30044     0C 00 90 AD |         if_z    jmp     #.data
30048     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3004c     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
30050     2D 00 64 FD |                 ret
30054                 | .data
30054     00 90 0F F2 |                 cmp     hpar3, #0               wz
30058     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3005c                 | 
3005c     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
30060     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
30064     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
30068     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3006c                 |                 debug(ubin_long(hub_status_chg))
3006c                 | 
3006c     01 5A 06 F6 |                 mov     hdev_port, #1
30070                 | .loop
30070     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
30074     0C 00 B0 AD |         if_x1   call    #hub_port_handler
30078     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3007c     F0 FF 9F 3D |         if_nc   jmp     #.loop
30080     2D 00 64 FD |                 ret
30084                 | 
30084                 | hub_port_handler
30084     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
30088     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3008c     27 EF 03 F6 |                 mov     pb, urx_buff_p
30090     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30094     55 02 A0 FD |                 call    #control_read
30098     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3009c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3009c                 | 
3009c     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
300a0     50 01 90 5D |         if_x0   jmp     #.other
300a4     68 02 D0 FE |                 loc     ptra, #clr_port_feat
300a8     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
300ac     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
300b0     A0 02 A0 FD |                 call    #control_write
300b4     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
300b8     7C 01 90 5D |         if_x0   jmp     #.disconnect
300bc     B0 99 02 F6 |                 mov     hctwait, _100ms_
300c0     EF 02 A0 FD |                 call    #poll_waitx
300c4                 | 
300c4     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
300c8     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
300cc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
300d0     A0 02 A0 FD |                 call    #control_write
300d4                 | 
300d4     02 76 07 F6 |                 mov     htmp3, #2
300d8                 | .wait_reset
300d8     AC 99 02 F6 |                 mov     hctwait, _8ms_
300dc     EF 02 A0 FD |                 call    #poll_waitx
300e0     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
300e4     27 EF 03 F6 |                 mov     pb, urx_buff_p
300e8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
300ec     55 02 A0 FD |                 call    #control_read
300f0     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
300f4     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
300f8     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
300fc                 | 
300fc     10 02 D0 FE |                 loc     ptra, #clr_port_feat
30100     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
30104     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30108     A0 02 A0 FD |                 call    #control_write
3010c                 | 
3010c     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
30110                 | .wait_recover
30110     A7 99 02 F6 |                 mov     hctwait, _1ms_
30114     EF 02 A0 FD |                 call    #poll_waitx
30118     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3011c                 | 
3011c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
30120     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
30124     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
30128                 | 
30128     00 08 00 FF 
3012c     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
30130     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
30134     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
30138     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3013c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
30140     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30144     48 01 90 5D |         if_nz   jmp     #.done
30148                 | .get_dev_desc
30148     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3014c     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
30150     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
30154     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
30158     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3015c     01 71 57 FC |                 wrword  htmp, ptra[wValue]
30160     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
30164     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30168     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3016c     AC 99 02 F6 |                 mov     hctwait, _8ms_
30170     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
30174     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
30178     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3017c     BE 00 A0 FD |                 call    #calc_crc5
30180     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
30184     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
30188     F7 AD C2 FA |                 rdbyte  total_data, pb
3018c     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
30190     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
30194     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30198     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3019c     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
301a0     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
301a4                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
301a4     9F 99 02 F6 |                 mov     hctwait, _500us_
301a8     EF 02 A0 FD |                 call    #poll_waitx
301ac     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
301b0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
301b4     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
301b8     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
301bc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
301c0     CC 00 90 5D |         if_nz   jmp     #.done
301c4     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
301c8     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
301cc     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
301d0     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
301d4     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
301d8     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
301dc     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
301e0     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
301e4     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
301e8     A4 00 90 CD |         if_b    jmp     #.done
301ec     6C F0 BF FD |                 call    #hparse_con_desc
301f0     9C 00 90 FD |                 jmp     #.done
301f4                 | 
301f4                 | .other
301f4     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
301f8     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
301fc     28 00 90 AD |         if_x1   jmp     #.reset_feature
30200     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
30204     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
30208     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3020c     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
30210     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
30214     10 00 90 AD |         if_x1   jmp     #.reset_feature
30218     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3021c     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
30220     04 00 90 AD |         if_x1   jmp     #.reset_feature
30224     68 00 90 FD |                 jmp     #.done
30228                 | .reset_feature
30228     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3022c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30230     A0 02 A0 FD |                 call    #control_write
30234     58 00 90 FD |                 jmp     #.done
30238                 | .disconnect
30238                 | 
30238     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3023c     00 70 E3 F8 |                 getbyte htmp
30240     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
30244     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
30248     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3024c     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
30250     00 76 06 A6 |         if_z    mov     kb_led_states, #0
30254     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
30258                 |         if EMUPAD_MAX_PLAYER > 0
30258                 |         end
30258                 |         if HAVE_MOUSE
30258     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3025c     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
30260     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
30264                 |         end
30264                 |         if HAVE_HIDPAD
30264     14 0A F0 FE |                 loc ptrb,#hidpad_report
30268     2D 71 03 F6 |                 mov htmp,hdev_port
3026c     01 70 E7 F2 |                 cmpsub htmp,#1
30270     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
30274     B8 F3 03 F1 |                 add ptrb,htmp
30278     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3027c     80 01 6C FC |                 wrlong #0,ptrb
30280                 |         end
30280                 | 
30280     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
30284     00 00 C4 F8 |                 setbyte #0
30288     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3028c     00 00 04 F6 |                 mov     0-0, #0
30290                 | 
30290                 | .done
30290     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
30294     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
30298     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3029c     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
302a0     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
302a4     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
302a8                 | 
302a8     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
302ac     27 EF 03 F6 |                 mov     pb, urx_buff_p
302b0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
302b4     55 02 A0 FD |                 call    #control_read
302b8     00 69 06 FB |                 rdlong  hub_port_status, ptra
302bc                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
302bc     2D 00 64 FD |                 ret
302c0                 | 
302c0                 | '------------------------------------------------------------------------------
302c0                 | ' Partially populated SETUP packets
302c0                 | '------------------------------------------------------------------------------
302c0     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
302c1     06          |                 byte    REQ_GET_DESC
302c2     00 01       |                 word    TYPE_DEVICE << 8
302c4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
302c6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
302c8     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
302c9     06          |                 byte    REQ_GET_DESC
302ca     00 02       |                 word    TYPE_CONFIG << 8
302cc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
302ce     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
302d0     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
302d1     09          |                 byte    REQ_SET_CONFIG
302d2     00 00       |                 word    0       ' Configuration value
302d4     00 00       |                 word    0       ' Zero
302d6     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
302d8     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
302d9     05          |                 byte    REQ_SET_ADDR
302da     00 00       |                 word    0       ' Zero
302dc     00 00       |                 word    0       ' Zero
302de     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
302e0                 | '------------------------------------------------------------------------------
302e0                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
302e0                 | ' wValue field dictates which protocol should be used.
302e0                 | '
302e0                 | ' When initialized, all devices default to report protocol. However the host
302e0                 | ' should not make any assumptions about the device state and should set the
302e0                 | ' desired protocol whenever initializing a device.
302e0                 | '------------------------------------------------------------------------------
302e0     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
302e1     0B          |                 byte    HID_SET_PROTO
302e2     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
302e4                 |                                                 ' (HID 1.11 Section 7.2.6).
302e4     00 00       |                 word    0               ' Interface index number.
302e6     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
302e8                 | '------------------------------------------------------------------------------
302e8     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
302e9     0A          |                 byte    HID_SET_IDLE
302ea     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
302ec                 |                                         ' reporting until a change is detected in the report data
302ec                 | 
302ec                 |                                         ' (HID 1.11 Section 7.2.4).
302ec     00 00       |                 word    0       ' Interface index number.
302ee     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
302f0     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
302f1     09          |                 byte    HID_SET_REPORT
302f2     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
302f4                 |                                         ' (HID 1.11 Section 7.2.2).
302f4     00 00       |                 word    0       ' Interface index number.
302f6     00 00       |                 word    0       ' Size of the report, in bytes.
302f8     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
302f9     06          |                 byte    REQ_GET_DESC
302fa     00 22       |                 word    TYPE_REPORT << 8
302fc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
302fe     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30300                 | '------------------------------------------------------------------------------
30300     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
30301     06          |                 byte    REQ_GET_DESC
30302     00 29       |                 word    TYPE_HUB << 8
30304     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
30306     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30308     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
30309     03          |                 byte    REQ_SET_FEATURE
3030a     00 00       |                 word    0       ' port power
3030c     01 00       |                 word    1       ' Port index number (1+)
3030e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30310     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
30311     01          |                 byte    REQ_CLEAR_FEATURE
30312     00 00       |                 word    0       ' port power
30314     01 00       |                 word    1       ' Port index number (1+)
30316     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30318     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
30319     00          |                 byte    REQ_GET_STATUS
3031a     00 00       |                 word    0
3031c     01 00       |                 word    1       ' Port index number (1+)
3031e     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
30320                 | '------------------------------------------------------------------------------
30320                 | if _HAVE_GAMEPAD
30320     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
30324                 | ps3_command_buff
30324     00 00 00 00 
30328     00          |                 byte    $00, $00, $00, $00, $00
30329     00 00 00 00 
3032d     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3032e     FF 27 10 00 
30332     32          |                 byte    $FF, $27, $10, $00, $32
30333     FF 27 10 00 
30337     32          |                 byte    $FF, $27, $10, $00, $32
30338     FF 27 10 00 
3033c     32          |                 byte    $FF, $27, $10, $00, $32
3033d     FF 27 10 00 
30341     32          |                 byte    $FF, $27, $10, $00, $32
30342     00 00 00 00 
30346     00          |                 byte    $00, $00, $00, $00, $00
30347     00 00 00 00 
3034b     00          |                 byte    $00, $00, $00, $00, $00
3034c     00 00 00 00 
30350     00          |                 byte    $00, $00, $00, $00, $00
30351     00 00 00    |                 byte    $00, $00, $00
30354                 | '------------------------------------------------------------------------------
30354     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
30357                 |                                         ' 0x01 All blinking
30357                 |                                         ' 0x02 1 flashes, then on
30357                 |                                         ' 0x03 2 flashes, then on
30357                 |                                         ' 0x04 3 flashes, then on
30357                 |                                         ' 0x05 4 flashes, then on
30357                 |                                         ' 0x06 1 on
30357                 |                                         ' 0x07 2 on
30357                 |                                         ' 0x08 3 on
30357                 |                                         ' 0x09 4 on
30357                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
30357                 |                                         ' 0x0B Blinking*
30357                 |                                         ' 0x0C Slow blinking*
30357                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
30357     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3035a     00          |                 byte    $00             ' Left rumble
3035b     00          |                 byte    $00             ' Right rumble
3035c     00 00 00    |                 byte    $00, $00, $00
3035f     00          | end
30360                 | alignl
30360                 | 
30360                 | if HAVE_MOUSE
30360     00 00 00 00 
30364     00 00 00 00 | mouse_limits long 0[2]
30368     00 00 00 00 | mouse_outptr long 0
3036c                 | end
3036c                 | 
3036c                 | if KEYQUEUE_SIZE > 0
3036c     00          | keyq_head byte 0
3036d     00          | keyq_tail byte 0
3036e     00 00 00 00 
      ...             
3056a     00 00 00 00 
3056e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
30570                 | alignl
30570                 | end
30570                 | 
30570                 | if EMUPAD_MAX_PLAYER > 0
30570                 | emupad_rule_buffer
30570                 | if EMUPAD_BUILTIN_RULES
30570                 | file "padmap_builtin.dat"
30570                 | end
30570                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
30570                 | '' Default rule directly follows!
30570                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
30570                 | end
30570                 | 
30570                 | '------------------------------------------------------------------------------
30570                 | ' The USB data cache area gets zero-filled at every device disconnect
30570                 | '------------------------------------------------------------------------------
30570                 | usb_cache_start
30570                 | 
30570                 | ' HID descriptor and report buffers
30570                 | if !!OVERLAP_MEMORY
30570     00 00 00 00 
      ...             
30c68     00 00 00 00 
30c6c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
30c70                 | end
30c70     00 00 00 00 
30c74     00 00 00 00 | hkbd_report     byte    0[8]
30c78     00 00 00 00 | hkbd_led_rep    byte    0
30c7c                 | alignl
30c7c                 | 
30c7c                 | if HAVE_HIDPAD
30c7c     00 00 00 00 
      ...             
30d38     00 00 00 00 
30d3c     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
30d40                 | end
30d40                 | 
30d40                 | ' HUB descriptor
30d40     00          | hub_descr       byte    0   ' bDescLength
30d41     00          |                 byte    0   ' bDescriptorType
30d42     00          |                 byte    0   ' bNbrPorts
30d43     00 00       |                 word    0   ' wHubCharacteristics
30d45     00          |                 byte    0   ' bPwrOn2PwrGood
30d46     00          |                 byte    0   ' bHubContrCurrent
30d47     00          |                 byte    0   ' DeviceRemoveable
30d48     00          |                 byte    0   ' PortPwrCtrlMask
30d49                 | 
30d49                 | usb_cache_end
30d49                 | 
30d49                 | if HAVE_MOUSE
30d49     00 00 00 00 | mouse_xacc      long 0
30d4d     00 00 00 00 | mouse_yacc      long 0
30d51     00 00 00 00 | mouse_zacc      long 0
30d55     00          | mouse_bstate    byte 0
30d56     00          | mouse_lpending  byte 0
30d57     00          | mouse_rpending  byte 0
30d58     00          | mouse_mpending  byte 0
30d59     00          | mouse_lock      byte 0
30d5a     00 00 00    |                 byte 0[3] ' padding
30d5d                 | end
30d5d                 | 
30d5d     00 00 00 00 
      ...             
30dd5     00 00 00 00 
30dd9     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
30ddd     00 00 00 00 
30de1     00 00 00 00 
30de5     00 00 00 00 
30de9     00 00 00 00 
30ded     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
30def     00 00 00 00 
      ...             
30ee7     00 00 00 00 
30eeb     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
30eef                 | 
30eef     00          | driver_cog      byte    0                       ' Current driver cog + 1
30ef0                 | 	alignl
30ef0                 | _Audio093b_8_sc_spin2_dat_
30ef0                 | 
30ef0                 | audio       org     0
30ef0                 | 
30ef0     61 85 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
30ef4     61 C3 05 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
30ef8     61 CF 05 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
30efc                 | 
30efc     01 EC 63 FD |             cogid   pa                   ' compute cogid
30f00     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
30f04     F6 85 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
30f08     C2 82 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
30f0c                 | 
30f0c     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
30f10     0E CA 05 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/100
30f14     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
30f18     0F CA 05 FC |             wrpin   dac,#right
30f1c     0F BE 1C FC |             wxpin   #95,#right    
30f20     41 9C 64 FD |             dirh    #left addpins 1
30f24     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
30f28     A9 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
30f2c     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
30f30                 |             
30f30                 | '---------------------------------------------------------------------------------        
30f30                 | '----------------- The main loop -------------------------------------------------
30f30                 | '---------------------------------------------------------------------------------
30f30                 | 
30f30     B2 66 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
30f34     10 00 90 CD |       if_c  jmp     #loop1
30f38                 |   
30f38     09 A8 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
30f3c     B2 A8 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
30f40     B1 00 80 F1 |             sub     0-0,a40000000
30f44     FD A9 6D FB |             djnz    cn,#p402
30f48                 |     
30f48     00 A8 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
30f4c     B4 AA 01 F6 |             mov     ct,time1            ' with the lowest next sample time
30f50     B5 AA 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
30f54     01 A8 05 C6 |     if_c    mov     cn,#1
30f58     B6 AA 39 F3 |             fle     ct,time3 wcz
30f5c     02 A8 05 C6 |     if_c    mov     cn,#2     
30f60     B7 AA 39 F3 |             fle     ct,time4 wcz
30f64     03 A8 05 C6 |     if_c    mov     cn,#3
30f68     B8 AA 39 F3 |             fle     ct,time5 wcz
30f6c     04 A8 05 C6 |     if_c    mov     cn,#4
30f70     B9 AA 39 F3 |             fle     ct,time6 wcz
30f74     05 A8 05 C6 |     if_c    mov     cn,#5
30f78     BA AA 39 F3 |             fle     ct,time7 wcz
30f7c     06 A8 05 C6 |     if_c    mov     cn,#6
30f80     BB AA 39 F3 |             fle     ct,time8 wcz
30f84     07 A8 05 C6 |     if_c    mov     cn,#7
30f88                 | 
30f88                 | 
30f88                 | '----------------------------------------------------------------------------------
30f88                 | '------------- Compute channel samples --------------------------------------------
30f88                 | '----------------------------------------------------------------------------------
30f88                 | 
30f88                 | 
30f88     D4 78 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
30f8c     05 78 65 F0 |             shl     channeladd,#5
30f90     BC F0 03 F1 |             add     ptra,channeladd
30f94                 | 
30f94     28 0E 64 FD |             setq    #7                        ' read parameters
30f98     00 8F 05 FB |             rdlong  pointer0,ptra
30f9c                 | '            testb   command0,#29 wz
30f9c                 | '    if_nz   jmp     #p408
30f9c                 | '    	    getword envptr,command0,#0
30f9c                 | '    	    getbyte envspeed,command0,#2
30f9c                 | '    	    jmp     #p404                     'if envelope then no sample rate
30f9c                 |     	    
30f9c     1F 9C 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
30fa0     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
30fa4     CE 7C 31 F9 |             getword qq,command0,#0            ' get the new rate
30fa8     4E 7C 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
30fac     BE 7C E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
30fb0     00 7C 0D F2 |             cmp     qq,#0 wz                         
30fb4     4E CC 05 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
30fb8     4E CA 05 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
30fbc                 |             
30fbc     1E 9C 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
30fc0     C2 82 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
30fc4     00 82 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
30fc8                 | 
30fc8                 | 
30fc8     C8 AE 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
30fcc     C8 B0 39 F9 |             getword oldrs,sample0,#1
30fd0     CC A4 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
30fd4     CC A2 31 F9 |     	    getword avol0,volpan0,#0
30fd8     CD A0 39 F9 |             getword askip0,freqskip0,#1    	    
30fdc     CD 9E 31 F9 |             getword afreq0,freqskip0,#0
30fe0                 | 
30fe0     B4 A8 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
30fe4     00 AC 01 F6 |             mov     dt0,0-0    
30fe8     B3 AC 81 F1 |             sub     dt0,time0
30fec                 |             
30fec     B4 A8 8D F9 |             altd    cn, #time1                ' add channel period to channel time
30ff0     CF 00 00 F1 |             add     0-0,afreq0  	
30ff4                 | 
30ff4     D0 8E 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
30ff8     C7 EA C1 F8 |             setbyte pointer00,pointer0,#0
30ffc     08 8E 45 F0 |             shr     pointer0,#8
31000                 |          
31000     1F 92 0D F4 |             testb   sstart0,#31 wz            
31004     01 8E 65 A0 |     if_z    shl     pointer0,#1        
31008     1C 92 0D F4 |             testb   sstart0,#28 wz            
3100c     01 8E 65 A0 |     if_z    shl     pointer0,#1        
31010                 |             
31010     CB 8E 19 F2 |             cmp     pointer0,lend0 wcz
31014     CB 8E 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
31018     CA 8E 01 31 |     if_ge   add     pointer0,lstart0       
3101c                 |             
3101c     C7 7C 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
31020     C9 7C 01 F1 |             add     qq,sstart0            
31024                 | 
31024                 | 
31024                 | 
31024     FF 83 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
31028     BE 7E E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
3102c     04 01 B0 1D |     if_gt   call    #cache_read
31030                 |          
31030                 |          
31030                 |  
31030                 |          
31030     1F 92 0D F4 |             testb   sstart0,#31 wz 
31034     08 7E 65 50 |     if_nz   shl     spl,#8
31038     08 8E 65 50 |     if_nz   shl     pointer0,#8
3103c     07 8E 65 A0 |     if_z    shl     pointer0,#7
31040     1C 92 0D F4 |             testb   sstart0,#28 wz            
31044     01 8E 45 A0 |     if_z    shr     pointer0,#1    
31048     F5 8E C1 F8 | 	    setbyte pointer0,pointer00,#0       
3104c                 |     
3104c                 | 
3104c     D1 7E 31 FA | p406        scas    spl,avol0                 ' apply volume
31050     00 7E 01 F6 |             mov     spl,0-0
31054                 |  
31054     D2 7E 31 FA |             scas    spl,apan0                 ' apply pan
31058     00 B2 01 F6 |             mov     ls0,0-0
3105c     20 00 00 FF 
31060     00 7C 05 F6 |             mov     qq,##16384
31064     D2 7C 81 F1 |             sub     qq,apan0
31068     BE 7E 31 FA |             scas    spl,qq
3106c     00 B4 01 F6 |             mov     rs0, 0-0
31070                 | 
31070     D8 B8 81 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
31074     DA B8 01 F1 |             add     rs,rs0
31078     D7 B6 81 F1 |             sub     ls,oldls
3107c     D9 B6 01 F1 |             add     ls,ls0
31080                 |    
31080     DA 90 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
31084     D9 90 21 F9 |             setword sample0,ls0,#0
31088                 |             
31088     1E 92 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
3108c     00 8E 05 A6 |     if_z    mov     pointer0, #0  
31090     02 93 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
31094     1D 92 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
31098     04 00 00 AF 
3109c     00 68 05 A1 |     if_z    add     time1,##2048
310a0     B4 6A 01 A6 |     if_z    mov     time2,time1
310a4     02 93 65 AC |     if_z    wrlong  sstart0,ptra[2]
310a8                 |             
310a8     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
310ac     00 8F 65 FC |             wrlong  pointer0,ptra
310b0     BC F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
310b4                 |                       
310b4     B3 A6 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
310b8     FF 7B 25 A7 |     if_z    decmod  front, #511          
310bc                 |          
310bc     DB AE 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
310c0     DC B0 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
310c4     0F AE E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
310c8     0F B0 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
310cc                 | 	    
310cc                 | 		    
310cc     D7 B0 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
310d0     DE BA 01 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
310d4     D8 BC 01 F6 |             mov     newsample, oldrs       
310d8                 | 
310d8     B3 A6 01 F6 |             mov     oldt0,time0              ' update global time
310dc     D6 66 01 F1 |             add     time0,dt0    
310e0                 |                                      
310e0     00 AC 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
310e4     60 FE 9F AD |     if_z    jmp     #loop1
310e8     D6 7C 01 F6 |             mov     qq,dt0
310ec                 |   
310ec     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
310f0     00 7A 9D F2 |             cmpr    front, #0-0 wcz
310f4     F4 FF 9F AD |     if_e    jmp     #p301    
310f8                 | 		
310f8     00 C2 0D F2 | 	    cmp     scbase,#0 wz
310fc     20 00 90 AD |     if_z    jmp #p302	   
31100                 |  
31100                 |  
31100     3F C8 15 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
31104     E2 C6 01 C6 |     if_c    mov scptr2,scptr
31108     02 C6 65 C0 |     if_c    shl scptr2,#2
3110c     E1 C6 01 C1 |     if_c    add scptr2,scbase     
31110     60 C6 65 FC |             wrlong scptr2,#$60
31114     E3 BA 61 CC |     if_c    wrlong oldsample,scptr2
31118     01 00 00 CF 
3111c     7F C4 05 C7 |     if_c    incmod scptr,##639
31120                 | 			    
31120     BD BA 31 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
31124     00 00 00 FF 
31128     FF 7B 05 F7 |             incmod  front, ##511
3112c     EF 7D 6D FB |             djnz    qq,#p301
31130                 |             
31130     FC FD 9F FD |             jmp     #loop            'loop
31134                 | 
31134                 | '----------------------------------------------------------------------------------
31134                 | '------------- This is the end of the main loop -----------------------------------
31134                 | '----------------------------------------------------------------------------------
31134                 | 
31134                 | '----------------------------------------------------------------------------------
31134                 | '------------- PSRAM cache ----------- --------------------------------------------
31134                 | '----------------------------------------------------------------------------------
31134                 | 
31134                 | ' There are 8 cache pointers for 8 channels
31134                 | ' if 24 higher bits of address=cache, then ger a word from the cache
31134                 | ' else load the cache from PSRAM, update the pointer, then read a sample
31134                 | 
31134                 | 
31134     BE E6 E1 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
31138                 |             
31138     BE E8 01 F6 | 	    mov     addrhi,qq		
3113c     08 E8 45 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
31140     E8 A8 95 F9 | 	    alts    cn,#cache1            
31144     00 E8 09 F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
31148     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3114c                 | 	
3114c     E8 A8 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
31150     F4 00 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
31154     F4 E0 01 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
31158     08 E0 65 F0 | 	    shl     cmd,#8
3115c     0B E0 3D F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
31160     D4 E2 01 F6 |             mov     hubaddr,cn                  ' to the channel cache
31164     08 E2 65 F0 |             shl     hubaddr,#8                  '
31168     E7 E2 01 F1 |             add     hubaddr,hubptr 
3116c     00 E5 05 F6 |             mov     count,#256                  ' 256 bytes
31170     28 04 64 FD |             setq    #2                          ' write 3 longs
31174     C1 E0 61 FC |             wrlong  cmd, mailbox                ' run it
31178     C1 E0 01 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3117c     FE E1 B5 FB |             tjs     cmd, #poll1                 ' retry until valid 
31180                 |             
31180                 | 	
31180     D4 7C 01 F6 | p701	    mov     qq,cn			' cache hit
31184     08 7C 65 F0 | 	    shl     qq,#8			' compute the cache start
31188     E7 7C 01 F1 | 	    add     qq,hubptr
3118c     F3 7C 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
31190     BE 7E E1 0A |     _ret_   rdword  spl,qq                      ' read a word
31194                 |           
31194                 | 
31194                 | '--------------------------------------------------------------------------
31194                 | '------ Interrupt service -------------------------------------------------
31194                 | '------ Output the sample, get the next one if exists ---------------------
31194                 | '--------------------------------------------------------------------------
31194                 | 
31194     0E 86 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
31198     0F 88 25 FC |             wypin   rsample,#right       '4
3119c     BD F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
311a0     80 8B A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
311a4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
311a8     C5 88 39 59 |     if_ne   getword rsample,lsnext,#1    '13
311ac     C5 86 31 59 |     if_ne   getword lsample,lsnext,#0    '15
311b0                 |     
311b0     F5 FF 3B FB |             reti1                        '17/19 
311b4                 |           
311b4                 | '---------------------------------------------------------------------------
311b4                 | '-------- End of interrupt -------------------------------------------------
311b4                 | '---------------------------------------------------------------------------    
311b4                 | 
311b4                 | 
311b4                 | '---------------------------------------------------------------------------
311b4                 | '------- Variables ---------------------------------------------------------
311b4                 | '---------------------------------------------------------------------------
311b4                 | 
311b4                 | ' constants
311b4                 | 
311b4     00 00 00 40 | a40000000   long $40000000
311b8     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
311bc                 | 
311bc                 | ' Time variables
311bc                 | 
311bc     00 00 00 00 | time0       long 0    ' Global sample computing time
311c0     01 00 00 00 | time1       long 1    ' Local channels time
311c4     02 00 00 00 | time2       long 2
311c8     03 00 00 00 | time3       long 3
311cc     04 00 00 00 | time4       long 4
311d0     05 00 00 00 | time5       long 5
311d4     06 00 00 00 | time6       long 6
311d8     07 00 00 00 | time7       long 7
311dc     08 00 00 00 | time8       long 8
311e0                 | 
311e0     00 00 00 00 | channeladd long 0
311e4                 | 
311e4     00 00 00 00 | front       long 0
311e8                 | 
311e8                 | ' temporary variables 
311e8     00 00 00 00 | qq          long 0
311ec     00 00 00 00 | spl         long 0
311f0     00 00 00 00 | zero        long 0
311f4     00 00 00 00 | mailbox     long 0
311f8     00 00 00 00 | mailbox2 long 0
311fc                 | 
311fc                 | ' Interrupt ISR variables
311fc                 | 
311fc     00 00 00 00 | lsample     long 0
31200     00 00 00 00 | rsample     long 0
31204     00 00 00 00 | lsnext      long 0
31208     00 00 00 00 | rsnext      long 0 
3120c                 | 
3120c                 | ' channel parameter block
3120c                 | 
3120c     00 00 00 00 | pointer0    long 0     
31210     00 00 00 00 | sample0     long 0
31214     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
31218     00 00 00 00 | lstart0     long 0
3121c     00 00 00 00 | lend0       long 0
31220     00 00 00 00 | volpan0     long 0
31224     00 00 00 00 | freqskip0   long 0
31228     00 00 00 00 | command0    long 0
3122c                 | 
3122c     00 00 00 00 | afreq0      long 0
31230     00 00 00 00 | askip0      long 0
31234     00 00 00 00 | avol0       long 0
31238     00 00 00 00 | apan0       long 0
3123c                 | 
3123c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
31240     00 00 00 00 | cn          long 0
31244     00 00 00 00 | ct          long 0
31248     00 00 00 00 | dt0         long 0
3124c                 | 
3124c                 | ' Samples
3124c     00 00 00 00 | oldls       long 0
31250     00 00 00 00 | oldrs       long 0
31254                 | 
31254     00 00 00 00 | ls0         long 0
31258     00 00 00 00 | rs0         long 0
3125c                 | 
3125c     00 00 00 00 | ls          long 0    
31260     00 00 00 00 | rs          long 0
31264                 | 
31264     00 00 00 00 | oldsample   long 0
31268     00 00 00 00 | newsample   long 0
3126c                 | 
3126c     00 00 00 00 | nrsample    long 0
31270     00 00 00 00 | nlsample    long 0
31274                 | 
31274     00 00 00 00 | scbase long 0
31278     00 00 00 00 | scptr long 0
3127c     00 00 00 00 | scptr2 long 0
31280     00 00 00 00 | scope long 0
31284                 | 
31284     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
31288     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3128c                 | 
3128c     00 18 07 00 | hubptr      long $71800
31290     00 00 00 00 | cache1      long 0
31294     00 00 00 00 | cache2      long 0
31298     00 00 00 00 | cache3      long 0
3129c     00 00 00 00 | cache4      long 0
312a0     00 00 00 00 | cache5      long 0
312a4     00 00 00 00 | cache6      long 0
312a8     00 00 00 00 | cache7      long 0
312ac     00 00 00 00 | cache8      long 0
312b0                 | 
312b0                 | 
312b0     00 00 00 00 | cmd         long 0
312b4     00 00 00 00 | hubaddr     long 0
312b8     00 01 00 00 | count       long 256
312bc     00 00 00 00 | addrlo long 0
312c0     00 00 00 00 | addrhi long 0
312c4     00 00 00 00 | pointer00 long 0
312c8     00 00 00 00 
312cc     00 00 00 00 | null  			long 	0,0           ' for channel reset
312d0                 | 	alignl
312d0                 | __system__dat_
312d0     00 00 00 00 
312d4     00 00 00 00 | 	byte	$00[8]
312d8     03 00 00 00 
312dc     00 00 00 00 
312e0     00 00 00 00 
312e4     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
312e8     00 00 00 00 
      ...             
31574     00 00 00 00 
31578     00 00 00 00 | 	byte	$00[660]
3157c     00 00 80 06 | 	long	(104 {__system____root_opendir})<<20
31580     00 00 90 06 | 	long	(105 {__system____root_closedir})<<20
31584     00 00 A0 06 | 	long	(106 {__system____root_readdir})<<20
31588     00 00 B0 06 | 	long	(107 {__system____root_stat})<<20
3158c     00 00 00 00 
31590     00 00 00 00 
31594     00 00 00 00 
31598     00 00 00 00 
3159c     00 00 00 00 
315a0     00 00 00 00 
315a4     00 00 00 00 | 	byte	$00[28]
315a8     10 16 03 00 | 	long	@@@__system__dat_ + 832
315ac     13 16 03 00 | 	long	@@@__system__dat_ + 835
315b0     34 16 03 00 | 	long	@@@__system__dat_ + 868
315b4     4D 16 03 00 | 	long	@@@__system__dat_ + 893
315b8     68 16 03 00 | 	long	@@@__system__dat_ + 920
315bc     82 16 03 00 | 	long	@@@__system__dat_ + 946
315c0     92 16 03 00 | 	long	@@@__system__dat_ + 962
315c4     A4 16 03 00 | 	long	@@@__system__dat_ + 980
315c8     B6 16 03 00 | 	long	@@@__system__dat_ + 998
315cc     C8 16 03 00 | 	long	@@@__system__dat_ + 1016
315d0     D4 16 03 00 | 	long	@@@__system__dat_ + 1028
315d4     E5 16 03 00 | 	long	@@@__system__dat_ + 1045
315d8     F9 16 03 00 | 	long	@@@__system__dat_ + 1065
315dc     03 17 03 00 | 	long	@@@__system__dat_ + 1075
315e0     13 17 03 00 | 	long	@@@__system__dat_ + 1091
315e4     22 17 03 00 | 	long	@@@__system__dat_ + 1106
315e8     38 17 03 00 | 	long	@@@__system__dat_ + 1128
315ec     51 17 03 00 | 	long	@@@__system__dat_ + 1153
315f0     65 17 03 00 | 	long	@@@__system__dat_ + 1173
315f4     73 17 03 00 | 	long	@@@__system__dat_ + 1187
315f8     87 17 03 00 | 	long	@@@__system__dat_ + 1207
315fc     93 17 03 00 | 	long	@@@__system__dat_ + 1219
31600     A5 17 03 00 | 	long	@@@__system__dat_ + 1237
31604     BD 17 03 00 | 	long	@@@__system__dat_ + 1261
31608     CF 17 03 00 | 	long	@@@__system__dat_ + 1279
3160c     E2 17 03 00 | 	long	@@@__system__dat_ + 1298
31610     4F 4B 00 4E 
31614     75 6D 65 72 
31618     69 63 61 6C 
3161c     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
31620     75 6D 65 6E 
31624     74 20 6F 75 
31628     74 20 6F 66 
3162c     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
31630     61 69 6E 00 
31634     52 65 73 75 
31638     6C 74 20 6E 
3163c     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
31640     65 70 72 65 
31644     73 65 6E 74 
31648     61 62 6C 65 
3164c     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
31650     65 67 61 6C 
31654     20 6D 75 6C 
31658     74 69 62 79 
3165c     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
31660     65 71 75 65 
31664     6E 63 65 00 
31668     4E 6F 20 73 
3166c     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
31670     66 69 6C 65 
31674     20 6F 72 20 
31678     64 69 72 65 
3167c     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
31680     79 00 42 61 
31684     64 20 66 69 
31688     6C 65 20 6E 
3168c     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
31690     72 00 50 65 
31694     72 6D 69 73 
31698     73 69 6F 6E 
3169c     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
316a0     69 65 64 00 
316a4     4E 6F 74 20 
316a8     65 6E 6F 75 
316ac     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
316b0     65 6D 6F 72 
316b4     79 00 54 65 
316b8     6D 70 6F 72 
316bc     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
316c0     66 61 69 6C 
316c4     75 72 65 00 
316c8     46 69 6C 65 
316cc     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
316d0     73 74 73 00 
316d4     49 6E 76 61 
316d8     6C 69 64 20 
316dc     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
316e0     6D 65 6E 74 
316e4     00 54 6F 6F 
316e8     20 6D 61 6E 
316ec     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
316f0     65 6E 20 66 
316f4     69 6C 65 73 
316f8     00 49 2F 4F 
316fc     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
31700     6F 72 00 4E 
31704     6F 74 20 61 
31708     20 64 69 72 
3170c     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
31710     72 79 00 49 
31714     73 20 61 20 
31718     64 69 72 65 
3171c     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
31720     79 00 52 65 
31724     61 64 20 6F 
31728     6E 6C 79 20 
3172c     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
31730     20 73 79 73 
31734     74 65 6D 00 
31738     46 75 6E 63 
3173c     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
31740     20 6E 6F 74 
31744     20 69 6D 70 
31748     6C 65 6D 65 
3174c     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
31750     00 44 69 72 
31754     65 63 74 6F 
31758     72 79 20 6E 
3175c     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
31760     6D 70 74 79 
31764     00 4E 61 6D 
31768     65 20 74 6F 
3176c     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
31770     6E 67 00 44 
31774     65 76 69 63 
31778     65 20 6E 6F 
3177c     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
31780     65 6B 61 62 
31784     6C 65 00 42 
31788     61 64 20 61 
3178c     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
31790     73 73 00 42 
31794     72 6F 6B 65 
31798     6E 20 63 6F 
3179c     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
317a0     74 69 6F 6E 
317a4     00 44 65 76 
317a8     69 63 65 20 
317ac     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
317b0     65 73 6F 75 
317b4     72 63 65 20 
317b8     62 75 73 79 
317bc     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
317c0     73 73 20 64 
317c4     65 76 69 63 
317c8     65 20 6C 69 
317cc     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
317d0     6F 20 73 70 
317d4     61 63 65 20 
317d8     6F 6E 20 64 
317dc     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
317e0     65 00 55 6E 
317e4     6B 6E 6F 77 
317e8     6E 20 65 72 
317ec     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
317f0     00 00 00 00 
317f4     00 00 00 00 | 	byte	$00[8]
317f8     05 00 00 00 
317fc     00 00 00 00 
31800     00 00 00 00 
31804     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31808     00 00 00 00 | 	byte	$00, $00, $00, $00
3180c     00 00 00 08 | 	long	(128 {__system___tx})<<20
31810     00 00 10 08 | 	long	(129 {__system___rx})<<20
31814     00 00 00 00 | 	byte	$00, $00, $00, $00
31818     00 00 20 08 | 	long	(130 {__system___rxtxioctl_0579})<<20
3181c     00 00 30 08 | 	long	(131 {__system____dummy_flush_0580})<<20
31820     00 00 00 00 
31824     00 00 00 00 | 	byte	$00[8]
31828     01 00 00 00 
3182c     06 00 00 00 
31830     00 00 00 00 
31834     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31838     00 00 00 00 
3183c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31840     00 00 00 08 | 	long	(128 {__system___tx})<<20
31844     00 00 10 08 | 	long	(129 {__system___rx})<<20
31848     00 00 00 00 | 	byte	$00, $00, $00, $00
3184c     00 00 20 08 | 	long	(130 {__system___rxtxioctl_0579})<<20
31850     00 00 30 08 | 	long	(131 {__system____dummy_flush_0580})<<20
31854     00 00 00 00 
31858     00 00 00 00 | 	byte	$00[8]
3185c     01 00 00 00 
31860     06 00 00 00 
31864     00 00 00 00 
31868     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3186c     00 00 00 00 
31870     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31874     00 00 00 08 | 	long	(128 {__system___tx})<<20
31878     00 00 10 08 | 	long	(129 {__system___rx})<<20
3187c     00 00 00 00 | 	byte	$00, $00, $00, $00
31880     00 00 20 08 | 	long	(130 {__system___rxtxioctl_0579})<<20
31884     00 00 30 08 | 	long	(131 {__system____dummy_flush_0580})<<20
31888     00 00 00 00 
      ...             
319f8     00 00 00 00 
319fc     00 00 00 00 | 	byte	$00[376]
31a00     04 1A 03 00 | 	long	@@@__system__dat_ + 1844
31a04     00 00 00 00 
31a08     00 00 00 00 
31a0c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31a10                 | 	alignl
31a10                 | _fatfs_cc_dat_
31a10     C7 00 FC 00 
31a14     E9 00 E2 00 
31a18     E4 00 E0 00 
31a1c     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
31a20     EA 00 EB 00 
31a24     E8 00 EF 00 
31a28     EE 00 EC 00 
31a2c     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
31a30     C9 00 E6 00 
31a34     C6 00 F4 00 
31a38     F6 00 F2 00 
31a3c     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
31a40     FF 00 D6 00 
31a44     DC 00 F8 00 
31a48     A3 00 D8 00 
31a4c     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
31a50     E1 00 ED 00 
31a54     F3 00 FA 00 
31a58     F1 00 D1 00 
31a5c     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
31a60     BF 00 AE 00 
31a64     AC 00 BD 00 
31a68     BC 00 A1 00 
31a6c     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
31a70     91 25 92 25 
31a74     93 25 02 25 
31a78     24 25 C1 00 
31a7c     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
31a80     A9 00 63 25 
31a84     51 25 57 25 
31a88     5D 25 A2 00 
31a8c     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
31a90     14 25 34 25 
31a94     2C 25 1C 25 
31a98     00 25 3C 25 
31a9c     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
31aa0     5A 25 54 25 
31aa4     69 25 66 25 
31aa8     60 25 50 25 
31aac     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
31ab0     F0 00 D0 00 
31ab4     CA 00 CB 00 
31ab8     C8 00 31 01 
31abc     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
31ac0     CF 00 18 25 
31ac4     0C 25 88 25 
31ac8     84 25 A6 00 
31acc     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
31ad0     D3 00 DF 00 
31ad4     D4 00 D2 00 
31ad8     F5 00 D5 00 
31adc     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
31ae0     DE 00 DA 00 
31ae4     DB 00 D9 00 
31ae8     FD 00 DD 00 
31aec     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
31af0     AD 00 B1 00 
31af4     17 20 BE 00 
31af8     B6 00 A7 00 
31afc     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
31b00     B0 00 A8 00 
31b04     B7 00 B9 00 
31b08     B3 00 B2 00 
31b0c     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
31b10     61 00 1A 03 
31b14     E0 00 17 03 
31b18     F8 00 07 03 
31b1c     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
31b20     78 01 00 01 
31b24     30 01 32 01 
31b28     06 01 39 01 
31b2c     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
31b30     2E 01 79 01 
31b34     06 01 80 01 
31b38     4D 00 43 02 
31b3c     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
31b40     82 01 84 01 
31b44     84 01 86 01 
31b48     87 01 87 01 
31b4c     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
31b50     8B 01 8B 01 
31b54     8D 01 8E 01 
31b58     8F 01 90 01 
31b5c     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
31b60     93 01 94 01 
31b64     F6 01 96 01 
31b68     97 01 98 01 
31b6c     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
31b70     9B 01 9C 01 
31b74     9D 01 20 02 
31b78     9F 01 A0 01 
31b7c     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
31b80     A2 01 A4 01 
31b84     A4 01 A6 01 
31b88     A7 01 A7 01 
31b8c     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
31b90     AB 01 AC 01 
31b94     AC 01 AE 01 
31b98     AF 01 AF 01 
31b9c     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
31ba0     B3 01 B3 01 
31ba4     B5 01 B5 01 
31ba8     B7 01 B8 01 
31bac     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
31bb0     BB 01 BC 01 
31bb4     BC 01 BE 01 
31bb8     F7 01 C0 01 
31bbc     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
31bc0     C3 01 C4 01 
31bc4     C5 01 C4 01 
31bc8     C7 01 C8 01 
31bcc     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
31bd0     CB 01 CA 01 
31bd4     CD 01 10 01 
31bd8     DD 01 01 00 
31bdc     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
31be0     12 01 F3 01 
31be4     03 00 F1 01 
31be8     F4 01 F4 01 
31bec     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
31bf0     22 02 12 01 
31bf4     3A 02 09 00 
31bf8     65 2C 3B 02 
31bfc     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
31c00     66 2C 3F 02 
31c04     40 02 41 02 
31c08     41 02 46 02 
31c0c     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
31c10     40 00 81 01 
31c14     86 01 55 02 
31c18     89 01 8A 01 
31c1c     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
31c20     5A 02 90 01 
31c24     5C 02 5D 02 
31c28     5E 02 5F 02 
31c2c     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
31c30     62 02 94 01 
31c34     64 02 65 02 
31c38     66 02 67 02 
31c3c     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
31c40     6A 02 62 2C 
31c44     6C 02 6D 02 
31c48     6E 02 9C 01 
31c4c     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
31c50     9D 01 73 02 
31c54     74 02 9F 01 
31c58     76 02 77 02 
31c5c     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
31c60     7A 02 7B 02 
31c64     7C 02 64 2C 
31c68     7E 02 7F 02 
31c6c     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
31c70     82 02 A9 01 
31c74     84 02 85 02 
31c78     86 02 87 02 
31c7c     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
31c80     B1 01 B2 01 
31c84     45 02 8D 02 
31c88     8E 02 8F 02 
31c8c     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
31c90     B7 01 7B 03 
31c94     03 00 FD 03 
31c98     FE 03 FF 03 
31c9c     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
31ca0     86 03 88 03 
31ca4     89 03 8A 03 
31ca8     B1 03 11 03 
31cac     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
31cb0     A3 03 A3 03 
31cb4     C4 03 08 03 
31cb8     CC 03 03 00 
31cbc     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
31cc0     8F 03 D8 03 
31cc4     18 01 F2 03 
31cc8     0A 00 F9 03 
31ccc     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
31cd0     F5 03 F6 03 
31cd4     F7 03 F7 03 
31cd8     F9 03 FA 03 
31cdc     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
31ce0     20 03 50 04 
31ce4     10 07 60 04 
31ce8     22 01 8A 04 
31cec     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
31cf0     0E 01 CF 04 
31cf4     01 00 C0 04 
31cf8     D0 04 44 01 
31cfc     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
31d00     00 00 7D 1D 
31d04     01 00 63 2C 
31d08     00 1E 96 01 
31d0c     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
31d10     00 1F 08 06 
31d14     10 1F 06 06 
31d18     20 1F 08 06 
31d1c     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
31d20     40 1F 06 06 
31d24     51 1F 07 00 
31d28     59 1F 52 1F 
31d2c     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
31d30     5D 1F 56 1F 
31d34     5F 1F 60 1F 
31d38     08 06 70 1F 
31d3c     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
31d40     BB 1F C8 1F 
31d44     C9 1F CA 1F 
31d48     CB 1F DA 1F 
31d4c     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
31d50     F9 1F EA 1F 
31d54     EB 1F FA 1F 
31d58     FB 1F 80 1F 
31d5c     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
31d60     08 06 A0 1F 
31d64     08 06 B0 1F 
31d68     04 00 B8 1F 
31d6c     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
31d70     BC 1F CC 1F 
31d74     01 00 C3 1F 
31d78     D0 1F 02 06 
31d7c     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
31d80     E5 1F 01 00 
31d84     EC 1F F3 1F 
31d88     01 00 FC 1F 
31d8c     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
31d90     32 21 70 21 
31d94     10 02 84 21 
31d98     01 00 83 21 
31d9c     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
31da0     30 2C 2F 04 
31da4     60 2C 02 01 
31da8     67 2C 06 01 
31dac     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
31db0     80 2C 64 01 
31db4     00 2D 26 08 
31db8     41 FF 1A 03 
31dbc     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
31dc0     05 07 09 0E 
31dc4     10 12 14 16 
31dc8     18 1C 1E 43 
31dcc     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
31dd0     41 41 43 45 
31dd4     45 45 49 49 
31dd8     49 41 41 45 
31ddc     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
31de0     4F 55 55 59 
31de4     4F 55 4F 9C 
31de8     4F 9E 9F 41 
31dec     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
31df0     A5 A6 A7 A8 
31df4     A9 AA AB AC 
31df8     AD AE AF B0 
31dfc     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
31e00     41 41 41 B8 
31e04     B9 BA BB BC 
31e08     BD BE BF C0 
31e0c     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
31e10     C5 41 41 C8 
31e14     C9 CA CB CC 
31e18     CD CE CF D1 
31e1c     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
31e20     49 49 49 49 
31e24     D9 DA DB DC 
31e28     DD 49 DF 4F 
31e2c     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
31e30     4F E6 E8 E8 
31e34     55 55 55 59 
31e38     59 EE EF F0 
31e3c     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
31e40     F5 F6 F7 F8 
31e44     F9 FA FB FC 
31e48     FD FE FF 00 
31e4c     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
31e50     00 00 00 00 | 	byte	$00, $00, $00, $00
31e54     00 00 F0 06 | 	long	(111 {_fatfs_cc_v_close})<<20
31e58     00 00 00 07 | 	long	(112 {_fatfs_cc_v_read})<<20
31e5c     00 00 10 07 | 	long	(113 {_fatfs_cc_v_write})<<20
31e60     00 00 20 07 | 	long	(114 {_fatfs_cc_v_lseek})<<20
31e64     00 00 30 07 | 	long	(115 {_fatfs_cc_v_ioctl})<<20
31e68     00 00 40 08 | 	long	(132 {_fatfs_cc_v_flush})<<20
31e6c     00 00 00 00 
31e70     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31e74     00 00 40 07 | 	long	(116 {_fatfs_cc_v_open})<<20
31e78     00 00 50 07 | 	long	(117 {_fatfs_cc_v_creat})<<20
31e7c     00 00 60 07 | 	long	(118 {_fatfs_cc_v_opendir})<<20
31e80     00 00 70 07 | 	long	(119 {_fatfs_cc_v_closedir})<<20
31e84     00 00 80 07 | 	long	(120 {_fatfs_cc_v_readdir})<<20
31e88     00 00 90 07 | 	long	(121 {_fatfs_cc_v_stat})<<20
31e8c     00 00 A0 07 | 	long	(122 {_fatfs_cc_v_mkdir})<<20
31e90     00 00 B0 07 | 	long	(123 {_fatfs_cc_v_rmdir})<<20
31e94     00 00 C0 07 | 	long	(124 {_fatfs_cc_v_remove})<<20
31e98     00 00 D0 07 | 	long	(125 {_fatfs_cc_v_rename})<<20
31e9c     00 00 E0 07 | 	long	(126 {_fatfs_cc_v_init})<<20
31ea0     00 00 F0 07 | 	long	(127 {_fatfs_cc_v_deinit})<<20
31ea4     FF FF FF FF 
31ea8     1F 00 00 00 
31eac     1C 00 00 00 
31eb0     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
31eb4     1E 00 00 00 
31eb8     1F 00 00 00 
31ebc     1E 00 00 00 
31ec0     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
31ec4     1F 00 00 00 
31ec8     1E 00 00 00 
31ecc     1F 00 00 00 
31ed0     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
31ed4     1F 00 00 00 
31ed8     00 00 00 00 
31edc     1F 00 00 00 
31ee0     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
31ee4     5A 00 00 00 
31ee8     78 00 00 00 
31eec     97 00 00 00 
31ef0     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
31ef4     D4 00 00 00 
31ef8     F3 00 00 00 
31efc     11 01 00 00 
31f00     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
31f04     4E 01 00 00 
31f08     6D 01 00 00 
31f0c     FF FF FF FF 
31f10     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
31f14     00 00 00 00 
      ...             
31f2c     00 00 00 00 
31f30     00 00 00 00 | 	byte	$00[32]
31f34     52 1F 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
31f38     56 1F 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
31f3c     00 00 00 00 
31f40     00 00 00 00 
31f44     00 00 00 00 
31f48     00 00 00 00 
31f4c     00 00       | 	byte	$00[18]
31f4e     3F 3F 3F 00 
31f52     55 43 54 00 
31f56     55 43 54 00 
31f5a     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
31f5e     00 00 00 00 
31f62     00 00 00    | 	byte	$00[7]
31f65     CA 9A 3B 00 
31f69     00 00 00 01 
31f6d     01 01 01 01 
31f71     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
31f75     91 11 11 11 
31f79     11 01 01 01 
31f7d     01 01 01 01 
31f81     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
31f85     01 01 01 01 
31f89     01 01 01    | 	byte	$01[7]
31f8c     90 20 20 20 
31f90     20 20 20 20 
31f94     20 20 20 20 
31f98     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
31f9c     42 42 42 42 
31fa0     42 42 42 42 
31fa4     42 42       | 	byte	$42[10]
31fa6     20 20 20 20 
31faa     20 20 20    | 	byte	$20[7]
31fad     44 44 44 44 
31fb1     44 44       | 	byte	$44[6]
31fb3     04 04 04 04 
31fb7     04 04 04 04 
31fbb     04 04 04 04 
31fbf     04 04 04 04 
31fc3     04 04 04 04 | 	byte	$04[20]
31fc7     20 20 20 20 
31fcb     20 20       | 	byte	$20[6]
31fcd     48 48 48 48 
31fd1     48 48       | 	byte	$48[6]
31fd3     08 08 08 08 
31fd7     08 08 08 08 
31fdb     08 08 08 08 
31fdf     08 08 08 08 
31fe3     08 08 08 08 | 	byte	$08[20]
31fe7     20 20 20 20 
31feb     01 00 00 00 
31fef     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
31ff0                 | __methodtable__
31ff0     D8 45 01 00 | 	long	@_do_no_command
31ff4     D8 D5 00 00 | 	long	@_do_plus
31ff8     C4 DA 00 00 | 	long	@_do_minus
31ffc     8C DF 00 00 | 	long	@_do_or
32000     A4 E0 00 00 | 	long	@_do_mul
32004     30 E6 00 00 | 	long	@_do_fdiv
32008     74 DE 00 00 | 	long	@_do_and
3200c     10 E4 00 00 | 	long	@_do_div
32010     F8 E7 00 00 | 	long	@_do_mod
32014     18 EA 00 00 | 	long	@_do_shl
32018     30 EB 00 00 | 	long	@_do_shr
3201c     48 EC 00 00 | 	long	@_do_power
32020     20 D0 00 00 | 	long	@_do_getvar
32024     30 99 00 00 | 	long	@_do_push
32028     60 C9 00 00 | 	long	@_do_assign
3202c     B8 22 01 00 | 	long	@_do_cls
32030     5C C3 00 00 | 	long	@_do_new
32034     5C 23 01 00 | 	long	@_do_plot
32038     2C 24 01 00 | 	long	@_do_draw
3203c     A0 2D 01 00 | 	long	@_do_print
32040     98 26 01 00 | 	long	@_do_circle
32044     20 25 01 00 | 	long	@_do_fcircle
32048     10 28 01 00 | 	long	@_do_box
3204c     B8 2B 01 00 | 	long	@_do_frame
32050     24 23 01 00 | 	long	@_do_color
32054     34 79 00 00 | 	long	@_do_for
32058     60 7B 00 00 | 	long	@_do_next
3205c     C0 C0 00 00 | 	long	@_do_list
32060     80 A9 00 00 | 	long	@_do_run
32064     1C C8 00 00 | 	long	@_do_error
32068     18 C5 00 00 | 	long	@_do_fast_goto
3206c     08 C6 00 00 | 	long	@_do_find_goto
32070     18 C8 00 00 | 	long	@_do_slow_goto
32074     10 0B 01 00 | 	long	@_do_converttoint
32078     74 9F 00 00 | 	long	@_test_csave
3207c     C8 A2 00 00 | 	long	@_do_save
32080     B4 A5 00 00 | 	long	@_do_load
32084     6C 37 01 00 | 	long	@_do_pinwrite
32088     0C 3C 01 00 | 	long	@_do_waitms
3208c     48 3D 01 00 | 	long	@_do_waitvbl
32090     48 40 01 00 | 	long	@_do_if
32094     2C 41 01 00 | 	long	@_do_else
32098     F4 41 01 00 | 	long	@_do_nothing
3209c     10 EE 00 00 | 	long	@_do_eq
320a0     88 FC 00 00 | 	long	@_do_ge
320a4     60 01 01 00 | 	long	@_do_le
320a8     E8 F2 00 00 | 	long	@_do_gt
320ac     C0 F7 00 00 | 	long	@_do_lt
320b0     38 06 01 00 | 	long	@_do_ne
320b4     EC 0D 01 00 | 	long	@_do_rnd
320b8     F8 41 01 00 | 	long	@_do_brun
320bc     C4 44 01 00 | 	long	@_do_beep
320c0     78 3D 01 00 | 	long	@_do_dir
320c4     68 32 01 00 | 	long	@_do_paper
320c8     F0 32 01 00 | 	long	@_do_ink
320cc     8C 33 01 00 | 	long	@_do_font
320d0     08 34 01 00 | 	long	@_do_mode
320d4     30 44 01 00 | 	long	@_do_mouse
320d8     50 22 01 00 | 	long	@_do_gettime
320dc     64 44 01 00 | 	long	@_do_cursor
320e0     98 44 01 00 | 	long	@_do_click
320e4     DC 1F 01 00 | 	long	@_do_mousex
320e8     20 20 01 00 | 	long	@_do_mousey
320ec     A8 20 01 00 | 	long	@_do_mousek
320f0     64 20 01 00 | 	long	@_do_mousew
320f4     B4 0F 01 00 | 	long	@_do_sin
320f8     08 17 01 00 | 	long	@_do_stick
320fc     8C 18 01 00 | 	long	@_do_strig
32100     F0 1E 01 00 | 	long	@_do_sprite
32104     60 1B 01 00 | 	long	@_do_defsprite
32108     10 1A 01 00 | 	long	@_do_getpixel
3210c     54 3D 01 00 | 	long	@_do_waitclock
32110     E4 45 01 00 | 	long	@_do_negative
32114     EC 20 01 00 | 	long	@_do_rdpin
32118     58 21 01 00 | 	long	@_do_rqpin
3211c     CC 21 01 00 | 	long	@_do_pinread
32120     04 3A 01 00 | 	long	@_do_wrpin
32124     84 3A 01 00 | 	long	@_do_wxpin
32128     04 3B 01 00 | 	long	@_do_wypin
3212c     F4 37 01 00 | 	long	@_do_pinfloat
32130     34 38 01 00 | 	long	@_do_pinlo
32134     74 38 01 00 | 	long	@_do_pinhi
32138     F4 38 01 00 | 	long	@_do_pinstart
3213c     B4 38 01 00 | 	long	@_do_pintoggle
32140     84 3B 01 00 | 	long	@_do_position
32144     C0 10 01 00 | 	long	@_do_cos
32148     E0 11 01 00 | 	long	@_do_tan
3214c     04 15 01 00 | 	long	@_do_atn
32150     EC 12 01 00 | 	long	@_do_asin
32154     F8 13 01 00 | 	long	@_do_acos
32158     18 16 01 00 | 	long	@_do_sqr
3215c     F8 29 01 00 | 	long	@_do_fill
32160     3C B7 00 00 | 	long	@_do_defsnd
32164     A4 AC 00 00 | 	long	@_do_defenv
32168     50 41 01 00 | 	long	@_do_rad
3216c     78 41 01 00 | 	long	@_do_deg
32170     A0 41 01 00 | 	long	@_do_int
32174     6C 79 01 00 | 	long	@_hg010b_spin2_putchar
32178     E8 7F 02 00 | 	long	@__struct___bas_wrap_sender_tx
3217c     2C 80 02 00 | 	long	@__struct___bas_wrap_sender_rx
32180     74 80 02 00 | 	long	@__struct___bas_wrap_sender_close
32184     18 7F 02 00 | 	long	@__struct__s_vfs_file_t_putchar
32188     88 7F 02 00 | 	long	@__struct__s_vfs_file_t_getchar
3218c     D0 7E 02 00 | 	long	@___strs_cl_pfunc
32190     40 DE 01 00 | 	long	@__system____root_opendir
32194     DC DE 01 00 | 	long	@__system____root_closedir
32198     58 DE 01 00 | 	long	@__system____root_readdir
3219c     E4 DE 01 00 | 	long	@__system____root_stat
321a0     6C D7 01 00 | 	long	@__system____default_putc
321a4     F0 D6 01 00 | 	long	@__system____default_getc
321a8     14 D8 01 00 | 	long	@__system____default_flush
321ac     E8 69 02 00 | 	long	@_fatfs_cc_v_close
321b0     04 6E 02 00 | 	long	@_fatfs_cc_v_read
321b4     18 6F 02 00 | 	long	@_fatfs_cc_v_write
321b8     F8 6F 02 00 | 	long	@_fatfs_cc_v_lseek
321bc     80 70 02 00 | 	long	@_fatfs_cc_v_ioctl
321c0     D4 70 02 00 | 	long	@_fatfs_cc_v_open
321c4     4C 69 02 00 | 	long	@_fatfs_cc_v_creat
321c8     2C 6A 02 00 | 	long	@_fatfs_cc_v_opendir
321cc     A0 6A 02 00 | 	long	@_fatfs_cc_v_closedir
321d0     E0 6A 02 00 | 	long	@_fatfs_cc_v_readdir
321d4     14 6C 02 00 | 	long	@_fatfs_cc_v_stat
321d8     94 70 02 00 | 	long	@_fatfs_cc_v_mkdir
321dc     B4 70 02 00 | 	long	@_fatfs_cc_v_rmdir
321e0     A4 70 02 00 | 	long	@_fatfs_cc_v_remove
321e4     C4 70 02 00 | 	long	@_fatfs_cc_v_rename
321e8     E4 71 02 00 | 	long	@_fatfs_cc_v_init
321ec     EC 71 02 00 | 	long	@_fatfs_cc_v_deinit
321f0     A8 8C 01 00 | 	long	@__system___tx
321f4     E8 8C 01 00 | 	long	@__system___rx
321f8     50 EA 01 00 | 	long	@__system___rxtxioctl_0579
321fc     A8 EA 01 00 | 	long	@__system____dummy_flush_0580
32200     B4 71 02 00 | 	long	@_fatfs_cc_v_flush
32204                 | __heap_base
32204     00 00 00 00 
      ...             
61004     00 00 00 00 
61008     00 00 00 00 | 	long	0[48002]
6100c                 | objmem
6100c     00 00 00 00 
      ...             
704e0     00 00 00 00 
704e4     00 00 00 00 | 	long	0[15671]
704e8                 | stackspace
704e8     00 00 00 00 | 	long	0[1]
704ec 100             | 	org	COG_BSS_START
704ec 100             | _var01
704ec 100             | 	res	1
704ec 101             | _var02
704ec 101             | 	res	1
704ec 102             | _var03
704ec 102             | 	res	1
704ec 103             | _var04
704ec 103             | 	res	1
704ec 104             | _var05
704ec 104             | 	res	1
704ec 105             | _var06
704ec 105             | 	res	1
704ec 106             | _var07
704ec 106             | 	res	1
704ec 107             | _var08
704ec 107             | 	res	1
704ec 108             | _var09
704ec 108             | 	res	1
704ec 109             | arg01
704ec 109             | 	res	1
704ec 10a             | arg02
704ec 10a             | 	res	1
704ec 10b             | arg03
704ec 10b             | 	res	1
704ec 10c             | arg04
704ec 10c             | 	res	1
704ec 10d             | arg05
704ec 10d             | 	res	1
704ec 10e             | arg06
704ec 10e             | 	res	1
704ec 10f             | local01
704ec 10f             | 	res	1
704ec 110             | local02
704ec 110             | 	res	1
704ec 111             | local03
704ec 111             | 	res	1
704ec 112             | local04
704ec 112             | 	res	1
704ec 113             | local05
704ec 113             | 	res	1
704ec 114             | local06
704ec 114             | 	res	1
704ec 115             | local07
704ec 115             | 	res	1
704ec 116             | local08
704ec 116             | 	res	1
704ec 117             | local09
704ec 117             | 	res	1
704ec 118             | local10
704ec 118             | 	res	1
704ec 119             | local11
704ec 119             | 	res	1
704ec 11a             | local12
704ec 11a             | 	res	1
704ec 11b             | local13
704ec 11b             | 	res	1
704ec 11c             | local14
704ec 11c             | 	res	1
704ec 11d             | local15
704ec 11d             | 	res	1
704ec 11e             | local16
704ec 11e             | 	res	1
704ec 11f             | local17
704ec 11f             | 	res	1
704ec 120             | local18
704ec 120             | 	res	1
704ec 121             | local19
704ec 121             | 	res	1
704ec 122             | local20
704ec 122             | 	res	1
704ec 123             | local21
704ec 123             | 	res	1
704ec 124             | local22
704ec 124             | 	res	1
704ec 125             | local23
704ec 125             | 	res	1
704ec 126             | local24
704ec 126             | 	res	1
704ec 127             | local25
704ec 127             | 	res	1
704ec 128             | local26
704ec 128             | 	res	1
704ec 129             | local27
704ec 129             | 	res	1
704ec 12a             | local28
704ec 12a             | 	res	1
704ec 12b             | local29
704ec 12b             | 	res	1
704ec 12c             | local30
704ec 12c             | 	res	1
704ec 12d             | local31
704ec 12d             | 	res	1
704ec 12e             | local32
704ec 12e             | 	res	1
704ec 12f             | local33
704ec 12f             | 	res	1
704ec 130             | local34
704ec 130             | 	res	1
704ec 131             | local35
704ec 131             | 	res	1
704ec 132             | muldiva_
704ec 132             | 	res	1
704ec 133             | muldivb_
704ec 133             | 	res	1
704ec 134             | 	fit	480
704ec 134             | 
