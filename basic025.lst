00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic025.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 25
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 CC 5E A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 32 65 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 31 63 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 32 63 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 64 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 62 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 31 63 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 32 65 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec EC 28 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed D4 26 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 F4 16 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 28 15 03 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 B4 19 03 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 64 92 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 F4 20 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 9C B3 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 4C DB 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 04 D9 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb DC EA 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc C4 0C 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7A 00 00 FF 
00818     F3 E4 05 F1 | 	add	objptr, ##62707
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7A 00 00 FF 
0082c     38 E5 85 F1 | 	sub	objptr, ##62776
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     54 8C B1 FD | 	call	#__system___waitms
0083c     7A 00 00 FF 
00840     38 E5 05 F1 | 	add	objptr, ##62776
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7A 00 00 FF 
00854     38 E5 85 F1 | 	sub	objptr, ##62776
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     2C 8C B1 FD | 	call	#__system___waitms
00864     7A 00 00 FF 
00868     38 E5 05 F1 | 	add	objptr, ##62776
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7A 00 00 FF 
0087c     38 E5 85 F1 | 	sub	objptr, ##62776
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     04 8C B1 FD | 	call	#__system___waitms
0088c     7A 00 00 FF 
00890     38 E5 05 F1 | 	add	objptr, ##62776
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7A 00 00 FF 
008a4     38 E5 85 F1 | 	sub	objptr, ##62776
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     7A 00 00 FF 
008d4     B0 E4 05 F1 | 	add	objptr, ##62640
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     7A 00 00 FF 
00914     B8 E4 85 F1 | 	sub	objptr, ##62648
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     B0 81 B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     00 82 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     F0 81 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     7A 00 00 FF 
00980     C0 E4 05 F1 | 	add	objptr, ##62656
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     7A 00 00 FF 
009ac     DC E4 85 F1 | 	sub	objptr, ##62684
009b0     54 81 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     7A 00 00 FF 
009e0     C0 E4 05 F1 | 	add	objptr, ##62656
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     7A 00 00 FF 
00a08     DC E4 85 F1 | 	sub	objptr, ##62684
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     22 4A 05 F6 | 	mov	COUNT_, #34
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     4C F0 07 F1 | 	add	ptra, ##588
00a2c     56 00 00 FF 
00a30     E0 E4 05 F1 | 	add	objptr, ##44256
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     24 00 00 FF 
00a50     6C E4 05 F1 | 	add	objptr, ##18540
00a54     F2 00 68 FC | 	wrlong	#0, objptr
00a58     11 00 00 FF 
00a5c     14 E4 85 F1 | 	sub	objptr, ##8724
00a60     F2 00 68 FC | 	wrlong	#0, objptr
00a64     69 00 00 FF 
00a68     40 E5 85 F1 | 	sub	objptr, ##54080
00a6c     00 20 06 F6 | 	mov	local02, #0
00a70                 | LR__0020
00a70                 | ' 
00a70                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a70                 | ' 
00a70                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a70                 | ' 
00a70                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a70     00 22 06 F6 | 	mov	local03, #0
00a74     20 4E 05 F1 | 	add	fp, #32
00a78     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a7c                 | LR__0021
00a7c     11 25 02 F6 | 	mov	local04, local03
00a80     02 24 66 F0 | 	shl	local04, #2
00a84     A7 24 02 F1 | 	add	local04, fp
00a88     12 01 68 FC | 	wrlong	#0, local04
00a8c     01 22 06 F1 | 	add	local03, #1
00a90     7E 22 56 F2 | 	cmps	local03, #126 wc
00a94     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a98                 | LR__0022
00a98     20 4E 85 F1 | 	sub	fp, #32
00a9c                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a9c     00 22 06 F6 | 	mov	local03, #0
00aa0     54 00 00 FF 
00aa4     D0 E4 05 F1 | 	add	objptr, ##43216
00aa8     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aac                 | LR__0023
00aac     11 1F 02 F6 | 	mov	local01, local03
00ab0     03 1E 66 F0 | 	shl	local01, #3
00ab4     F2 1E 02 F1 | 	add	local01, objptr
00ab8     43 01 00 FF 
00abc     36 17 06 F6 | 	mov	arg03, ##@LR__4307
00ac0     0F 17 62 FC | 	wrlong	arg03, local01
00ac4     11 1F 02 F6 | 	mov	local01, local03
00ac8     03 1E 66 F0 | 	shl	local01, #3
00acc     F2 26 02 F6 | 	mov	local05, objptr
00ad0     F2 1E 02 F1 | 	add	local01, objptr
00ad4     00 28 06 F6 | 	mov	local06, #0
00ad8     04 1E 06 F1 | 	add	local01, #4
00adc     0F 01 68 FC | 	wrlong	#0, local01
00ae0     01 22 06 F1 | 	add	local03, #1
00ae4     7E 22 56 F2 | 	cmps	local03, #126 wc
00ae8     C0 FF 9F CD |  if_b	jmp	#LR__0023
00aec                 | LR__0024
00aec     02 00 00 FF 
00af0     10 E4 05 F1 | 	add	objptr, ##1040
00af4     F2 12 02 FB | 	rdlong	arg01, objptr
00af8     56 00 00 FF 
00afc     E0 E4 85 F1 | 	sub	objptr, ##44256
00b00     DC AA B1 FD | 	call	#__system__RTrim_S
00b04     FD 12 02 F6 | 	mov	arg01, result1
00b08     14 AA B1 FD | 	call	#__system__LTrim_S
00b0c     56 00 00 FF 
00b10     E0 E4 05 F1 | 	add	objptr, ##44256
00b14     F2 FA 61 FC | 	wrlong	result1, objptr
00b18     43 01 00 FF 
00b1c     37 1F 06 F6 | 	mov	local01, ##@LR__4308
00b20     24 00 00 FF 
00b24     94 E4 05 F1 | 	add	objptr, ##18580
00b28     F2 1E 62 FC | 	wrlong	local01, objptr
00b2c     24 00 00 FF 
00b30     94 E4 85 F1 | 	sub	objptr, ##18580
00b34     F2 12 02 FB | 	rdlong	arg01, objptr
00b38     56 00 00 FF 
00b3c     E0 E4 85 F1 | 	sub	objptr, ##44256
00b40     09 2B 02 F6 | 	mov	local07, arg01
00b44     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b48                 | LR__0025
00b48     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b4c     01 2A 06 51 |  if_ne	add	local07, #1
00b50     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b54                 | LR__0026
00b54     09 2B 8A F1 | 	sub	local07, arg01 wz
00b58     7A 00 00 FF 
00b5c     78 E5 05 F1 | 	add	objptr, ##62840
00b60     F2 2A 62 FC | 	wrlong	local07, objptr
00b64                 | ' if l=0 then goto 101
00b64     7A 00 00 FF 
00b68     78 E5 85 F1 | 	sub	objptr, ##62840
00b6c     D4 26 90 AD |  if_e	jmp	#LR__0148
00b70     7A 00 00 FF 
00b74     7C E5 05 F1 | 	add	objptr, ##62844
00b78     F2 00 68 FC | 	wrlong	#0, objptr
00b7c                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b7c                 | ' for i=1 to len(line$)
00b7c     01 22 06 F6 | 	mov	local03, #1
00b80     24 00 00 FF 
00b84     9C E4 85 F1 | 	sub	objptr, ##18588
00b88     F2 12 02 FB | 	rdlong	arg01, objptr
00b8c     56 00 00 FF 
00b90     E0 E4 85 F1 | 	sub	objptr, ##44256
00b94     09 2B 02 F6 | 	mov	local07, arg01
00b98     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b9c                 | LR__0027
00b9c     15 FB C9 FA | 	rdbyte	result1, local07 wz
00ba0     01 2A 06 51 |  if_ne	add	local07, #1
00ba4     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba8                 | LR__0028
00ba8     09 2B 82 F1 | 	sub	local07, arg01
00bac     15 2D 02 F6 | 	mov	local08, local07
00bb0     01 2C 06 F1 | 	add	local08, #1
00bb4                 | LR__0029
00bb4     16 23 52 F2 | 	cmps	local03, local08 wc
00bb8     00 01 90 3D |  if_ae	jmp	#LR__0032
00bbc                 | ' 
00bbc                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bbc     56 00 00 FF 
00bc0     E0 E4 05 F1 | 	add	objptr, ##44256
00bc4     F2 12 02 FB | 	rdlong	arg01, objptr
00bc8     56 00 00 FF 
00bcc     E0 E4 85 F1 | 	sub	objptr, ##44256
00bd0     11 15 02 F6 | 	mov	arg02, local03
00bd4     01 16 06 F6 | 	mov	arg03, #1
00bd8     E8 A6 B1 FD | 	call	#__system__Mid_S
00bdc     FD 12 02 F6 | 	mov	arg01, result1
00be0     43 01 00 FF 
00be4     38 15 06 F6 | 	mov	arg02, ##@LR__4309
00be8     D8 85 B1 FD | 	call	#__system___string_cmp
00bec     00 FA 0D F2 | 	cmp	result1, #0 wz
00bf0     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bf4     7A 00 00 FF 
00bf8     7C E5 05 F1 | 	add	objptr, ##62844
00bfc     F2 24 0A FB | 	rdlong	local04, objptr wz
00c00     7A 00 00 FF 
00c04     7C E5 85 F1 | 	sub	objptr, ##62844
00c08     7A 00 00 AF 
00c0c     7C E5 05 A1 |  if_e	add	objptr, ##62844
00c10     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c14     7A 00 00 AF 
00c18     7C E5 85 A1 |  if_e	sub	objptr, ##62844
00c1c     60 00 90 AD |  if_e	jmp	#LR__0031
00c20                 | LR__0030
00c20     56 00 00 FF 
00c24     E0 E4 05 F1 | 	add	objptr, ##44256
00c28     F2 12 02 FB | 	rdlong	arg01, objptr
00c2c     56 00 00 FF 
00c30     E0 E4 85 F1 | 	sub	objptr, ##44256
00c34     11 15 02 F6 | 	mov	arg02, local03
00c38     01 16 06 F6 | 	mov	arg03, #1
00c3c     84 A6 B1 FD | 	call	#__system__Mid_S
00c40     FD 12 02 F6 | 	mov	arg01, result1
00c44     43 01 00 FF 
00c48     3A 15 06 F6 | 	mov	arg02, ##@LR__4310
00c4c     74 85 B1 FD | 	call	#__system___string_cmp
00c50     00 FA 0D F2 | 	cmp	result1, #0 wz
00c54     7A 00 00 AF 
00c58     7C E5 05 A1 |  if_e	add	objptr, ##62844
00c5c     F2 24 02 AB |  if_e	rdlong	local04, objptr
00c60     7A 00 00 AF 
00c64     7C E5 85 A1 |  if_e	sub	objptr, ##62844
00c68     01 24 0E A2 |  if_e	cmp	local04, #1 wz
00c6c     7A 00 00 AF 
00c70     7C E5 05 A1 |  if_e	add	objptr, ##62844
00c74     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c78     7A 00 00 AF 
00c7c     7C E5 85 A1 |  if_e	sub	objptr, ##62844
00c80                 | LR__0031
00c80     11 1F 02 F6 | 	mov	local01, local03
00c84     03 1E 66 F0 | 	shl	local01, #3
00c88     54 00 00 FF 
00c8c     D0 E4 05 F1 | 	add	objptr, ##43216
00c90     F2 26 02 F6 | 	mov	local05, objptr
00c94     F2 1E 02 F1 | 	add	local01, objptr
00c98     26 00 00 FF 
00c9c     AC E4 05 F1 | 	add	objptr, ##19628
00ca0     F2 28 02 FB | 	rdlong	local06, objptr
00ca4     7A 00 00 FF 
00ca8     7C E5 85 F1 | 	sub	objptr, ##62844
00cac     04 1E 06 F1 | 	add	local01, #4
00cb0     0F 29 62 FC | 	wrlong	local06, local01
00cb4     01 22 06 F1 | 	add	local03, #1
00cb8     F8 FE 9F FD | 	jmp	#LR__0029
00cbc                 | LR__0032
00cbc     01 22 06 F6 | 	mov	local03, #1
00cc0                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cc0                 | LR__0033
00cc0     56 00 00 FF 
00cc4     E0 E4 05 F1 | 	add	objptr, ##44256
00cc8     F2 12 02 FB | 	rdlong	arg01, objptr
00ccc     56 00 00 FF 
00cd0     E0 E4 85 F1 | 	sub	objptr, ##44256
00cd4     11 15 02 F6 | 	mov	arg02, local03
00cd8     01 16 06 F6 | 	mov	arg03, #1
00cdc     E4 A5 B1 FD | 	call	#__system__Mid_S
00ce0     FD 12 02 F6 | 	mov	arg01, result1
00ce4     43 01 00 FF 
00ce8     3C 2F 06 F6 | 	mov	local09, ##@LR__4311
00cec     17 15 02 F6 | 	mov	arg02, local09
00cf0     D0 84 B1 FD | 	call	#__system___string_cmp
00cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf8     34 00 90 5D |  if_ne	jmp	#LR__0034
00cfc     11 27 02 F6 | 	mov	local05, local03
00d00     03 26 66 F0 | 	shl	local05, #3
00d04     54 00 00 FF 
00d08     D0 E4 05 F1 | 	add	objptr, ##43216
00d0c     F2 28 02 F6 | 	mov	local06, objptr
00d10     F2 26 02 F1 | 	add	local05, objptr
00d14     04 26 06 F1 | 	add	local05, #4
00d18     13 31 02 FB | 	rdlong	local10, local05
00d1c     04 26 86 F1 | 	sub	local05, #4
00d20     18 33 0A F6 | 	mov	local11, local10 wz
00d24     54 00 00 FF 
00d28     D0 E4 85 F1 | 	sub	objptr, ##43216
00d2c     24 00 90 AD |  if_e	jmp	#LR__0035
00d30                 | LR__0034
00d30     7A 00 00 FF 
00d34     78 E5 05 F1 | 	add	objptr, ##62840
00d38     F2 34 02 FB | 	rdlong	local12, objptr
00d3c     7A 00 00 FF 
00d40     78 E5 85 F1 | 	sub	objptr, ##62840
00d44     1A 37 02 F6 | 	mov	local13, local12
00d48     1B 23 52 F2 | 	cmps	local03, local13 wc
00d4c     01 22 06 C1 |  if_b	add	local03, #1
00d50     6C FF 9F CD |  if_b	jmp	#LR__0033
00d54                 | LR__0035
00d54                 | ' 
00d54                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d54                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d54     7A 00 00 FF 
00d58     78 E5 05 F1 | 	add	objptr, ##62840
00d5c     F2 1E 02 FB | 	rdlong	local01, objptr
00d60     7A 00 00 FF 
00d64     78 E5 85 F1 | 	sub	objptr, ##62840
00d68     0F 23 52 F2 | 	cmps	local03, local01 wc
00d6c     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d70     56 00 00 FF 
00d74     E0 E4 05 F1 | 	add	objptr, ##44256
00d78     F2 28 02 FB | 	rdlong	local06, objptr
00d7c     56 00 00 FF 
00d80     E0 E4 85 F1 | 	sub	objptr, ##44256
00d84     14 13 02 F6 | 	mov	arg01, local06
00d88     09 2B 02 F6 | 	mov	local07, arg01
00d8c     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d90                 | LR__0036
00d90     15 FB C9 FA | 	rdbyte	result1, local07 wz
00d94     01 2A 06 51 |  if_ne	add	local07, #1
00d98     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d9c                 | LR__0037
00d9c     09 2B 82 F1 | 	sub	local07, arg01
00da0     15 15 02 F6 | 	mov	arg02, local07
00da4     11 15 82 F1 | 	sub	arg02, local03
00da8     14 13 02 F6 | 	mov	arg01, local06
00dac     84 A4 B1 FD | 	call	#__system__Right_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     28 A8 B1 FD | 	call	#__system__RTrim_S
00db8     FD 12 02 F6 | 	mov	arg01, result1
00dbc     60 A7 B1 FD | 	call	#__system__LTrim_S
00dc0     7A 00 00 FF 
00dc4     80 E5 05 F1 | 	add	objptr, ##62848
00dc8     F2 FA 61 FC | 	wrlong	result1, objptr
00dcc     24 00 00 FF 
00dd0     A0 E4 85 F1 | 	sub	objptr, ##18592
00dd4     F2 12 02 FB | 	rdlong	arg01, objptr
00dd8     56 00 00 FF 
00ddc     E0 E4 85 F1 | 	sub	objptr, ##44256
00de0     01 22 86 F1 | 	sub	local03, #1
00de4     11 15 02 F6 | 	mov	arg02, local03
00de8     C0 A3 B1 FD | 	call	#__system__Left_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     EC A7 B1 FD | 	call	#__system__RTrim_S
00df4     FD 12 02 F6 | 	mov	arg01, result1
00df8     24 A7 B1 FD | 	call	#__system__LTrim_S
00dfc     56 00 00 FF 
00e00     E0 E4 05 F1 | 	add	objptr, ##44256
00e04     F2 FA 61 FC | 	wrlong	result1, objptr
00e08     56 00 00 FF 
00e0c     E0 E4 85 F1 | 	sub	objptr, ##44256
00e10     1C 00 90 FD | 	jmp	#LR__0039
00e14                 | LR__0038
00e14     43 01 00 FF 
00e18     3E 1F 06 F6 | 	mov	local01, ##@LR__4312
00e1c     7A 00 00 FF 
00e20     80 E5 05 F1 | 	add	objptr, ##62848
00e24     F2 1E 62 FC | 	wrlong	local01, objptr
00e28     7A 00 00 FF 
00e2c     80 E5 85 F1 | 	sub	objptr, ##62848
00e30                 | LR__0039
00e30                 | ' 'print "line$=";line$
00e30                 | ' 'print "rest$=";rest$
00e30                 | ' 
00e30                 | ' 
00e30                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e30     56 00 00 FF 
00e34     E8 E4 05 F1 | 	add	objptr, ##44264
00e38     F2 1E 02 FB | 	rdlong	local01, objptr
00e3c     56 00 00 FF 
00e40     E8 E4 85 F1 | 	sub	objptr, ##44264
00e44     FF FF 7F FF 
00e48     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e4c     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e50     7A 00 00 FF 
00e54     80 E5 05 F1 | 	add	objptr, ##62848
00e58     F2 12 02 FB | 	rdlong	arg01, objptr
00e5c     7A 00 00 FF 
00e60     80 E5 85 F1 | 	sub	objptr, ##62848
00e64     43 01 00 FF 
00e68     3F 15 06 F6 | 	mov	arg02, ##@LR__4313
00e6c     54 83 B1 FD | 	call	#__system___string_cmp
00e70     00 FA 0D F2 | 	cmp	result1, #0 wz
00e74     56 00 00 5F 
00e78     E8 E4 05 51 |  if_ne	add	objptr, ##44264
00e7c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e80     56 00 00 5F 
00e84     E8 E4 85 51 |  if_ne	sub	objptr, ##44264
00e88     08 01 90 5D |  if_ne	jmp	#LR__0044
00e8c                 | LR__0040
00e8c                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e8c     56 00 00 FF 
00e90     E8 E4 05 F1 | 	add	objptr, ##44264
00e94     F2 1E 02 FB | 	rdlong	local01, objptr
00e98     56 00 00 FF 
00e9c     E8 E4 85 F1 | 	sub	objptr, ##44264
00ea0     FF FF 7F FF 
00ea4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea8     3C 00 90 5D |  if_ne	jmp	#LR__0041
00eac     7A 00 00 FF 
00eb0     80 E5 05 F1 | 	add	objptr, ##62848
00eb4     F2 12 02 FB | 	rdlong	arg01, objptr
00eb8     7A 00 00 FF 
00ebc     80 E5 85 F1 | 	sub	objptr, ##62848
00ec0     43 01 00 FF 
00ec4     40 15 06 F6 | 	mov	arg02, ##@LR__4314
00ec8     F8 82 B1 FD | 	call	#__system___string_cmp
00ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
00ed0     56 00 00 AF 
00ed4     E8 E4 05 A1 |  if_e	add	objptr, ##44264
00ed8     F2 06 68 AC |  if_e	wrlong	#3, objptr
00edc     56 00 00 AF 
00ee0     E8 E4 85 A1 |  if_e	sub	objptr, ##44264
00ee4     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee8                 | LR__0041
00ee8                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee8     56 00 00 FF 
00eec     E8 E4 05 F1 | 	add	objptr, ##44264
00ef0     F2 1E 02 FB | 	rdlong	local01, objptr
00ef4     56 00 00 FF 
00ef8     E8 E4 85 F1 | 	sub	objptr, ##44264
00efc     04 1E 0E F2 | 	cmp	local01, #4 wz
00f00     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f04     7A 00 00 FF 
00f08     80 E5 05 F1 | 	add	objptr, ##62848
00f0c     F2 12 02 FB | 	rdlong	arg01, objptr
00f10     7A 00 00 FF 
00f14     80 E5 85 F1 | 	sub	objptr, ##62848
00f18     43 01 00 FF 
00f1c     41 15 06 F6 | 	mov	arg02, ##@LR__4315
00f20     A0 82 B1 FD | 	call	#__system___string_cmp
00f24     00 FA 0D F2 | 	cmp	result1, #0 wz
00f28     56 00 00 5F 
00f2c     E8 E4 05 51 |  if_ne	add	objptr, ##44264
00f30     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f34     56 00 00 5F 
00f38     E8 E4 85 51 |  if_ne	sub	objptr, ##44264
00f3c     54 00 90 5D |  if_ne	jmp	#LR__0044
00f40                 | LR__0042
00f40                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f40     56 00 00 FF 
00f44     E8 E4 05 F1 | 	add	objptr, ##44264
00f48     F2 1E 02 FB | 	rdlong	local01, objptr
00f4c     56 00 00 FF 
00f50     E8 E4 85 F1 | 	sub	objptr, ##44264
00f54     04 1E 0E F2 | 	cmp	local01, #4 wz
00f58     38 00 90 5D |  if_ne	jmp	#LR__0043
00f5c     7A 00 00 FF 
00f60     80 E5 05 F1 | 	add	objptr, ##62848
00f64     F2 12 02 FB | 	rdlong	arg01, objptr
00f68     7A 00 00 FF 
00f6c     80 E5 85 F1 | 	sub	objptr, ##62848
00f70     43 01 00 FF 
00f74     42 15 06 F6 | 	mov	arg02, ##@LR__4316
00f78     48 82 B1 FD | 	call	#__system___string_cmp
00f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f80     56 00 00 AF 
00f84     E8 E4 05 A1 |  if_e	add	objptr, ##44264
00f88     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f8c     56 00 00 AF 
00f90     E8 E4 85 A1 |  if_e	sub	objptr, ##44264
00f94                 | LR__0043
00f94                 | LR__0044
00f94     20 4E 05 F1 | 	add	fp, #32
00f98     A7 00 68 FC | 	wrlong	#0, fp
00f9c     20 4E 85 F1 | 	sub	fp, #32
00fa0     00 22 06 F6 | 	mov	local03, #0
00fa4     01 38 06 F6 | 	mov	local14, #1
00fa8                 | ' 
00fa8                 | ' ' 1b: find separators
00fa8                 | ' 
00fa8                 | ' 107
00fa8                 | ' separators(0)=0
00fa8                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa8                 | LR__0045
00fa8     01 22 06 F1 | 	add	local03, #1
00fac     56 00 00 FF 
00fb0     E0 E4 05 F1 | 	add	objptr, ##44256
00fb4     F2 12 02 FB | 	rdlong	arg01, objptr
00fb8     56 00 00 FF 
00fbc     E0 E4 85 F1 | 	sub	objptr, ##44256
00fc0     11 15 02 F6 | 	mov	arg02, local03
00fc4     01 16 06 F6 | 	mov	arg03, #1
00fc8     F8 A2 B1 FD | 	call	#__system__Mid_S
00fcc     7A 00 00 FF 
00fd0     84 E5 05 F1 | 	add	objptr, ##62852
00fd4     F2 FA 61 FC | 	wrlong	result1, objptr
00fd8                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd8     FD 12 02 F6 | 	mov	arg01, result1
00fdc     7A 00 00 FF 
00fe0     84 E5 85 F1 | 	sub	objptr, ##62852
00fe4     68 25 B0 FD | 	call	#_isseparator
00fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
00fec     1C 00 90 AD |  if_e	jmp	#LR__0046
00ff0     1C 25 02 F6 | 	mov	local04, local14
00ff4     02 24 66 F0 | 	shl	local04, #2
00ff8     20 4E 05 F1 | 	add	fp, #32
00ffc     A7 24 02 F1 | 	add	local04, fp
01000     12 23 62 FC | 	wrlong	local03, local04
01004     01 38 06 F1 | 	add	local14, #1
01008     20 4E 85 F1 | 	sub	fp, #32
0100c                 | LR__0046
0100c     7A 00 00 FF 
01010     78 E5 05 F1 | 	add	objptr, ##62840
01014     F2 1E 02 FB | 	rdlong	local01, objptr
01018     7A 00 00 FF 
0101c     78 E5 85 F1 | 	sub	objptr, ##62840
01020     0F 23 5A F2 | 	cmps	local03, local01 wcz
01024     80 FF 9F ED |  if_be	jmp	#LR__0045
01028     1C 25 02 F6 | 	mov	local04, local14
0102c     02 24 66 F0 | 	shl	local04, #2
01030     20 4E 05 F1 | 	add	fp, #32
01034     A7 24 02 F1 | 	add	local04, fp
01038     12 23 62 FC | 	wrlong	local03, local04
0103c     00 3A 06 F6 | 	mov	local15, #0
01040                 | ' for i=0 to j-1 
01040     00 22 06 F6 | 	mov	local03, #0
01044     1C 3D 02 F6 | 	mov	local16, local14
01048     20 4E 85 F1 | 	sub	fp, #32
0104c                 | LR__0047
0104c     1E 23 52 F2 | 	cmps	local03, local16 wc
01050     88 01 90 3D |  if_ae	jmp	#LR__0051
01054     11 25 02 F6 | 	mov	local04, local03
01058     02 24 66 F0 | 	shl	local04, #2
0105c     20 4E 05 F1 | 	add	fp, #32
01060     A7 24 02 F1 | 	add	local04, fp
01064     12 27 02 FB | 	rdlong	local05, local04
01068     7A 00 00 FF 
0106c     8C E5 05 F1 | 	add	objptr, ##62860
01070     F2 26 62 FC | 	wrlong	local05, objptr
01074     11 25 02 F6 | 	mov	local04, local03
01078     01 24 06 F1 | 	add	local04, #1
0107c     02 24 66 F0 | 	shl	local04, #2
01080     A7 2E 02 F6 | 	mov	local09, fp
01084     A7 24 02 F1 | 	add	local04, fp
01088     12 27 02 FB | 	rdlong	local05, local04
0108c     04 E4 05 F1 | 	add	objptr, #4
01090     F2 26 62 FC | 	wrlong	local05, objptr
01094                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
01094     04 E4 85 F1 | 	sub	objptr, #4
01098     F2 1E 02 FB | 	rdlong	local01, objptr
0109c     7A 00 00 FF 
010a0     8C E5 85 F1 | 	sub	objptr, ##62860
010a4     01 1E 56 F2 | 	cmps	local01, #1 wc
010a8     20 4E 85 F1 | 	sub	fp, #32
010ac     84 00 90 CD |  if_b	jmp	#LR__0049
010b0     56 00 00 FF 
010b4     E0 E4 05 F1 | 	add	objptr, ##44256
010b8     F2 12 02 FB | 	rdlong	arg01, objptr
010bc     24 00 00 FF 
010c0     AC E4 05 F1 | 	add	objptr, ##18604
010c4     F2 14 02 FB | 	rdlong	arg02, objptr
010c8     7A 00 00 FF 
010cc     8C E5 85 F1 | 	sub	objptr, ##62860
010d0     01 16 06 F6 | 	mov	arg03, #1
010d4     EC A1 B1 FD | 	call	#__system__Mid_S
010d8     7A 00 00 FF 
010dc     94 E5 05 F1 | 	add	objptr, ##62868
010e0     F2 FA 61 FC | 	wrlong	result1, objptr
010e4     7A 00 00 FF 
010e8     94 E5 85 F1 | 	sub	objptr, ##62868
010ec     FD 12 02 F6 | 	mov	arg01, result1
010f0     43 01 00 FF 
010f4     43 15 06 F6 | 	mov	arg02, ##@LR__4317
010f8     C8 80 B1 FD | 	call	#__system___string_cmp
010fc     00 FA 0D F2 | 	cmp	result1, #0 wz
01100     30 00 90 AD |  if_e	jmp	#LR__0048
01104     1D 2F 02 F6 | 	mov	local09, local15
01108     03 2E 66 F0 | 	shl	local09, #3
0110c     54 00 00 FF 
01110     D0 E4 05 F1 | 	add	objptr, ##43216
01114     F2 2E 02 F1 | 	add	local09, objptr
01118     26 00 00 FF 
0111c     C4 E4 05 F1 | 	add	objptr, ##19652
01120     F2 28 02 FB | 	rdlong	local06, objptr
01124     7A 00 00 FF 
01128     94 E5 85 F1 | 	sub	objptr, ##62868
0112c     17 29 62 FC | 	wrlong	local06, local09
01130     01 3A 06 F1 | 	add	local15, #1
01134                 | LR__0048
01134                 | LR__0049
01134     56 00 00 FF 
01138     E0 E4 05 F1 | 	add	objptr, ##44256
0113c     F2 12 02 FB | 	rdlong	arg01, objptr
01140     24 00 00 FF 
01144     AC E4 05 F1 | 	add	objptr, ##18604
01148     F2 14 02 FB | 	rdlong	arg02, objptr
0114c     01 14 06 F1 | 	add	arg02, #1
01150     04 E4 05 F1 | 	add	objptr, #4
01154     F2 16 02 FB | 	rdlong	arg03, objptr
01158     04 E4 85 F1 | 	sub	objptr, #4
0115c     F2 30 02 FB | 	rdlong	local10, objptr
01160     7A 00 00 FF 
01164     8C E5 85 F1 | 	sub	objptr, ##62860
01168     18 33 02 F6 | 	mov	local11, local10
0116c     19 17 82 F1 | 	sub	arg03, local11
01170     01 16 86 F1 | 	sub	arg03, #1
01174     4C A1 B1 FD | 	call	#__system__Mid_S
01178     7A 00 00 FF 
0117c     94 E5 05 F1 | 	add	objptr, ##62868
01180     F2 FA 61 FC | 	wrlong	result1, objptr
01184     7A 00 00 FF 
01188     94 E5 85 F1 | 	sub	objptr, ##62868
0118c     FD 12 02 F6 | 	mov	arg01, result1
01190     43 01 00 FF 
01194     44 15 06 F6 | 	mov	arg02, ##@LR__4318
01198     28 80 B1 FD | 	call	#__system___string_cmp
0119c     00 FA 0D F2 | 	cmp	result1, #0 wz
011a0     30 00 90 AD |  if_e	jmp	#LR__0050
011a4     1D 2F 02 F6 | 	mov	local09, local15
011a8     03 2E 66 F0 | 	shl	local09, #3
011ac     54 00 00 FF 
011b0     D0 E4 05 F1 | 	add	objptr, ##43216
011b4     F2 2E 02 F1 | 	add	local09, objptr
011b8     26 00 00 FF 
011bc     C4 E4 05 F1 | 	add	objptr, ##19652
011c0     F2 28 02 FB | 	rdlong	local06, objptr
011c4     7A 00 00 FF 
011c8     94 E5 85 F1 | 	sub	objptr, ##62868
011cc     17 29 62 FC | 	wrlong	local06, local09
011d0     01 3A 06 F1 | 	add	local15, #1
011d4                 | LR__0050
011d4     01 22 06 F1 | 	add	local03, #1
011d8     70 FE 9F FD | 	jmp	#LR__0047
011dc                 | LR__0051
011dc     00 22 06 F6 | 	mov	local03, #0
011e0                 | ' 
011e0                 | ' ' 1d : find strings
011e0                 | ' 
011e0                 | ' i=0
011e0                 | ' do
011e0                 | LR__0052
011e0                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011e0     11 27 02 F6 | 	mov	local05, local03
011e4     03 26 66 F0 | 	shl	local05, #3
011e8     54 00 00 FF 
011ec     D0 E4 05 F1 | 	add	objptr, ##43216
011f0     F2 26 02 F1 | 	add	local05, objptr
011f4     13 13 02 FB | 	rdlong	arg01, local05
011f8     43 01 00 FF 
011fc     45 15 06 F6 | 	mov	arg02, ##@LR__4319
01200     54 00 00 FF 
01204     D0 E4 85 F1 | 	sub	objptr, ##43216
01208     B8 7F B1 FD | 	call	#__system___string_cmp
0120c     00 FA 0D F2 | 	cmp	result1, #0 wz
01210     01 22 06 51 |  if_ne	add	local03, #1
01214     50 01 90 5D |  if_ne	jmp	#LR__0057
01218     11 3F 02 F6 | 	mov	local17, local03
0121c                 | LR__0053
0121c     11 2F 02 F6 | 	mov	local09, local03
01220     01 2E 06 F1 | 	add	local09, #1
01224     03 2E 66 F0 | 	shl	local09, #3
01228     54 00 00 FF 
0122c     D0 E4 05 F1 | 	add	objptr, ##43216
01230     F2 2E 02 F1 | 	add	local09, objptr
01234     17 31 02 FB | 	rdlong	local10, local09
01238     26 00 00 FF 
0123c     C4 E4 05 F1 | 	add	objptr, ##19652
01240     F2 30 62 FC | 	wrlong	local10, objptr
01244     1F 2F 02 F6 | 	mov	local09, local17
01248     03 2E 66 F0 | 	shl	local09, #3
0124c     26 00 00 FF 
01250     C4 E4 85 F1 | 	sub	objptr, ##19652
01254     F2 2E 02 F1 | 	add	local09, objptr
01258     1F 37 02 F6 | 	mov	local13, local17
0125c     03 36 66 F0 | 	shl	local13, #3
01260     F2 36 02 F1 | 	add	local13, objptr
01264     1B 13 02 FB | 	rdlong	arg01, local13
01268     54 00 00 FF 
0126c     D0 E4 85 F1 | 	sub	objptr, ##43216
01270     18 33 02 F6 | 	mov	local11, local10
01274     19 15 02 F6 | 	mov	arg02, local11
01278     7C 7F B1 FD | 	call	#__system___string_concat
0127c     17 FB 61 FC | 	wrlong	result1, local09
01280     11 39 02 F6 | 	mov	local14, local03
01284     01 38 06 F1 | 	add	local14, #1
01288     1D 41 02 F6 | 	mov	local18, local15
0128c     01 40 06 F1 | 	add	local18, #1
01290     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01294                 | LR__0054
01294     20 39 52 F2 | 	cmps	local14, local18 wc
01298     70 00 90 3D |  if_ae	jmp	#LR__0056
0129c     1C 27 02 F6 | 	mov	local05, local14
012a0     01 26 06 F1 | 	add	local05, #1
012a4     03 26 66 F0 | 	shl	local05, #3
012a8     54 00 00 FF 
012ac     D0 E4 05 F1 | 	add	objptr, ##43216
012b0     F2 26 02 F1 | 	add	local05, objptr
012b4     13 1F 02 FB | 	rdlong	local01, local05
012b8     1C 29 02 F6 | 	mov	local06, local14
012bc     01 28 06 F1 | 	add	local06, #1
012c0     03 28 66 F0 | 	shl	local06, #3
012c4     F2 28 02 F1 | 	add	local06, objptr
012c8     04 28 06 F1 | 	add	local06, #4
012cc     14 25 02 FB | 	rdlong	local04, local06
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     03 28 66 F0 | 	shl	local06, #3
012d8     F2 32 02 F6 | 	mov	local11, objptr
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     14 1F 62 FC | 	wrlong	local01, local06
012e4     1C 31 02 F6 | 	mov	local10, local14
012e8     18 35 02 F6 | 	mov	local12, local10
012ec     03 34 66 F0 | 	shl	local12, #3
012f0     F2 34 02 F1 | 	add	local12, objptr
012f4     04 34 06 F1 | 	add	local12, #4
012f8     1A 25 62 FC | 	wrlong	local04, local12
012fc     01 38 06 F1 | 	add	local14, #1
01300     54 00 00 FF 
01304     D0 E4 85 F1 | 	sub	objptr, ##43216
01308     88 FF 9F FD | 	jmp	#LR__0054
0130c                 | LR__0055
0130c                 | LR__0056
0130c     01 3A 86 F1 | 	sub	local15, #1
01310     7A 00 00 FF 
01314     94 E5 05 F1 | 	add	objptr, ##62868
01318     F2 12 02 FB | 	rdlong	arg01, objptr
0131c     7A 00 00 FF 
01320     94 E5 85 F1 | 	sub	objptr, ##62868
01324     43 01 00 FF 
01328     47 15 06 F6 | 	mov	arg02, ##@LR__4320
0132c     94 7E B1 FD | 	call	#__system___string_cmp
01330     00 FA 0D F2 | 	cmp	result1, #0 wz
01334     1D 23 52 52 |  if_ne	cmps	local03, local15 wc
01338     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
0133c                 | '   if p$<>"""" then k+=1:i+=1
0133c     7A 00 00 FF 
01340     94 E5 05 F1 | 	add	objptr, ##62868
01344     F2 12 02 FB | 	rdlong	arg01, objptr
01348     7A 00 00 FF 
0134c     94 E5 85 F1 | 	sub	objptr, ##62868
01350     43 01 00 FF 
01354     49 15 06 F6 | 	mov	arg02, ##@LR__4321
01358     68 7E B1 FD | 	call	#__system___string_cmp
0135c     00 FA 0D F2 | 	cmp	result1, #0 wz
01360     01 3A 06 51 |  if_ne	add	local15, #1
01364     01 22 06 51 |  if_ne	add	local03, #1
01368                 | LR__0057
01368     1D 23 52 F2 | 	cmps	local03, local15 wc
0136c     70 FE 9F CD |  if_b	jmp	#LR__0052
01370     00 22 06 F6 | 	mov	local03, #0
01374                 | ' 
01374                 | ' ' 1e : concatenate strings if "" detected between
01374                 | '  
01374                 | ' i=0 : do
01374                 | LR__0058
01374                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01374     11 27 02 F6 | 	mov	local05, local03
01378     03 26 66 F0 | 	shl	local05, #3
0137c     54 00 00 FF 
01380     D0 E4 05 F1 | 	add	objptr, ##43216
01384     F2 26 02 F1 | 	add	local05, objptr
01388     13 13 02 FB | 	rdlong	arg01, local05
0138c     01 14 06 F6 | 	mov	arg02, #1
01390     54 00 00 FF 
01394     D0 E4 85 F1 | 	sub	objptr, ##43216
01398     98 9E B1 FD | 	call	#__system__Right_S
0139c     FD 12 02 F6 | 	mov	arg01, result1
013a0     43 01 00 FF 
013a4     4B 15 06 F6 | 	mov	arg02, ##@LR__4322
013a8     18 7E B1 FD | 	call	#__system___string_cmp
013ac     00 FA 0D F2 | 	cmp	result1, #0 wz
013b0     78 01 90 5D |  if_ne	jmp	#LR__0064
013b4     11 29 02 F6 | 	mov	local06, local03
013b8     01 28 06 F1 | 	add	local06, #1
013bc     03 28 66 F0 | 	shl	local06, #3
013c0     54 00 00 FF 
013c4     D0 E4 05 F1 | 	add	objptr, ##43216
013c8     F2 32 02 F6 | 	mov	local11, objptr
013cc     F2 28 02 F1 | 	add	local06, objptr
013d0     14 13 02 FB | 	rdlong	arg01, local06
013d4     01 14 06 F6 | 	mov	arg02, #1
013d8     54 00 00 FF 
013dc     D0 E4 85 F1 | 	sub	objptr, ##43216
013e0     C8 9D B1 FD | 	call	#__system__Left_S
013e4     FD 12 02 F6 | 	mov	arg01, result1
013e8     43 01 00 FF 
013ec     4D 15 06 F6 | 	mov	arg02, ##@LR__4323
013f0     D0 7D B1 FD | 	call	#__system___string_cmp
013f4     00 FA 0D F2 | 	cmp	result1, #0 wz
013f8     30 01 90 5D |  if_ne	jmp	#LR__0064
013fc     11 2F 02 F6 | 	mov	local09, local03
01400     03 2E 66 F0 | 	shl	local09, #3
01404     54 00 00 FF 
01408     D0 E4 05 F1 | 	add	objptr, ##43216
0140c     F2 2E 02 F1 | 	add	local09, objptr
01410     11 37 02 F6 | 	mov	local13, local03
01414     03 36 66 F0 | 	shl	local13, #3
01418     F2 36 02 F1 | 	add	local13, objptr
0141c     1B 29 02 FB | 	rdlong	local06, local13
01420     11 35 02 F6 | 	mov	local12, local03
01424     01 34 06 F1 | 	add	local12, #1
01428     03 34 66 F0 | 	shl	local12, #3
0142c     F2 34 02 F1 | 	add	local12, objptr
01430     1A 33 02 FB | 	rdlong	local11, local12
01434     11 43 02 F6 | 	mov	local19, local03
01438     01 42 06 F1 | 	add	local19, #1
0143c     21 45 02 F6 | 	mov	local20, local19
01440     03 44 66 F0 | 	shl	local20, #3
01444     F2 46 02 F6 | 	mov	local21, objptr
01448     F2 44 02 F1 | 	add	local20, objptr
0144c     22 13 02 FB | 	rdlong	arg01, local20
01450     54 00 00 FF 
01454     D0 E4 85 F1 | 	sub	objptr, ##43216
01458     09 2B 02 F6 | 	mov	local07, arg01
0145c     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01460                 | LR__0059
01460     15 FB C9 FA | 	rdbyte	result1, local07 wz
01464     01 2A 06 51 |  if_ne	add	local07, #1
01468     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
0146c                 | LR__0060
0146c     09 2B 82 F1 | 	sub	local07, arg01
01470     15 31 02 F6 | 	mov	local10, local07
01474     01 30 86 F1 | 	sub	local10, #1
01478     19 13 02 F6 | 	mov	arg01, local11
0147c     18 15 02 F6 | 	mov	arg02, local10
01480     B0 9D B1 FD | 	call	#__system__Right_S
01484     FD 32 02 F6 | 	mov	local11, result1
01488     14 13 02 F6 | 	mov	arg01, local06
0148c     19 15 02 F6 | 	mov	arg02, local11
01490     64 7D B1 FD | 	call	#__system___string_concat
01494     17 FB 61 FC | 	wrlong	result1, local09
01498                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01498     11 39 02 F6 | 	mov	local14, local03
0149c     01 38 06 F1 | 	add	local14, #1
014a0     1D 49 02 F6 | 	mov	local22, local15
014a4     01 48 06 F1 | 	add	local22, #1
014a8     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014ac                 | LR__0061
014ac     24 39 52 F2 | 	cmps	local14, local22 wc
014b0     70 00 90 3D |  if_ae	jmp	#LR__0063
014b4     1C 27 02 F6 | 	mov	local05, local14
014b8     01 26 06 F1 | 	add	local05, #1
014bc     03 26 66 F0 | 	shl	local05, #3
014c0     54 00 00 FF 
014c4     D0 E4 05 F1 | 	add	objptr, ##43216
014c8     F2 26 02 F1 | 	add	local05, objptr
014cc     13 1F 02 FB | 	rdlong	local01, local05
014d0     1C 29 02 F6 | 	mov	local06, local14
014d4     01 28 06 F1 | 	add	local06, #1
014d8     03 28 66 F0 | 	shl	local06, #3
014dc     F2 28 02 F1 | 	add	local06, objptr
014e0     04 28 06 F1 | 	add	local06, #4
014e4     14 25 02 FB | 	rdlong	local04, local06
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     03 28 66 F0 | 	shl	local06, #3
014f0     F2 32 02 F6 | 	mov	local11, objptr
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     14 1F 62 FC | 	wrlong	local01, local06
014fc     1C 31 02 F6 | 	mov	local10, local14
01500     18 35 02 F6 | 	mov	local12, local10
01504     03 34 66 F0 | 	shl	local12, #3
01508     F2 34 02 F1 | 	add	local12, objptr
0150c     04 34 06 F1 | 	add	local12, #4
01510     1A 25 62 FC | 	wrlong	local04, local12
01514     01 38 06 F1 | 	add	local14, #1
01518     54 00 00 FF 
0151c     D0 E4 85 F1 | 	sub	objptr, ##43216
01520     88 FF 9F FD | 	jmp	#LR__0061
01524                 | LR__0062
01524                 | LR__0063
01524     01 22 86 F1 | 	sub	local03, #1
01528     01 3A 86 F1 | 	sub	local15, #1
0152c                 | LR__0064
0152c     01 22 06 F1 | 	add	local03, #1
01530     1D 23 52 F2 | 	cmps	local03, local15 wc
01534     3C FE 9F CD |  if_b	jmp	#LR__0058
01538     00 22 06 F6 | 	mov	local03, #0
0153c                 | '  
0153c                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
0153c                 | '  
0153c                 | ' i=0 : do
0153c                 | LR__0065
0153c     11 2F 02 F6 | 	mov	local09, local03
01540     03 2E 66 F0 | 	shl	local09, #3
01544     54 00 00 FF 
01548     D0 E4 05 F1 | 	add	objptr, ##43216
0154c     F2 2E 02 F1 | 	add	local09, objptr
01550     17 29 02 FB | 	rdlong	local06, local09
01554     26 00 00 FF 
01558     CC E4 05 F1 | 	add	objptr, ##19660
0155c     F2 28 62 FC | 	wrlong	local06, objptr
01560     11 2F 02 F6 | 	mov	local09, local03
01564     01 2E 06 F1 | 	add	local09, #1
01568     03 2E 66 F0 | 	shl	local09, #3
0156c     26 00 00 FF 
01570     CC E4 85 F1 | 	sub	objptr, ##19660
01574     F2 2E 02 F1 | 	add	local09, objptr
01578     17 29 02 FB | 	rdlong	local06, local09
0157c     26 00 00 FF 
01580     D0 E4 05 F1 | 	add	objptr, ##19664
01584     F2 28 62 FC | 	wrlong	local06, objptr
01588                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01588     04 E4 85 F1 | 	sub	objptr, #4
0158c     F2 12 02 FB | 	rdlong	arg01, objptr
01590     7A 00 00 FF 
01594     9C E5 85 F1 | 	sub	objptr, ##62876
01598     43 01 00 FF 
0159c     4F 15 06 F6 | 	mov	arg02, ##@LR__4324
015a0     20 7C B1 FD | 	call	#__system___string_cmp
015a4     00 FA 0D F2 | 	cmp	result1, #0 wz
015a8     04 01 90 AD |  if_e	jmp	#LR__0066
015ac     7A 00 00 FF 
015b0     9C E5 05 F1 | 	add	objptr, ##62876
015b4     F2 12 02 FB | 	rdlong	arg01, objptr
015b8     7A 00 00 FF 
015bc     9C E5 85 F1 | 	sub	objptr, ##62876
015c0     43 01 00 FF 
015c4     51 15 06 F6 | 	mov	arg02, ##@LR__4325
015c8     F8 7B B1 FD | 	call	#__system___string_cmp
015cc     FD 24 0A F6 | 	mov	local04, result1 wz
015d0     DC 00 90 AD |  if_e	jmp	#LR__0066
015d4     7A 00 00 FF 
015d8     9C E5 05 F1 | 	add	objptr, ##62876
015dc     F2 12 02 FB | 	rdlong	arg01, objptr
015e0     7A 00 00 FF 
015e4     9C E5 85 F1 | 	sub	objptr, ##62876
015e8     43 01 00 FF 
015ec     53 15 06 F6 | 	mov	arg02, ##@LR__4326
015f0     D0 7B B1 FD | 	call	#__system___string_cmp
015f4     00 FA 0D F2 | 	cmp	result1, #0 wz
015f8     B4 00 90 AD |  if_e	jmp	#LR__0066
015fc     7A 00 00 FF 
01600     9C E5 05 F1 | 	add	objptr, ##62876
01604     F2 12 02 FB | 	rdlong	arg01, objptr
01608     7A 00 00 FF 
0160c     9C E5 85 F1 | 	sub	objptr, ##62876
01610     43 01 00 FF 
01614     55 33 06 F6 | 	mov	local11, ##@LR__4327
01618     19 15 02 F6 | 	mov	arg02, local11
0161c     A4 7B B1 FD | 	call	#__system___string_cmp
01620     00 FA 0D F2 | 	cmp	result1, #0 wz
01624     88 00 90 AD |  if_e	jmp	#LR__0066
01628     7A 00 00 FF 
0162c     9C E5 05 F1 | 	add	objptr, ##62876
01630     F2 12 02 FB | 	rdlong	arg01, objptr
01634     7A 00 00 FF 
01638     9C E5 85 F1 | 	sub	objptr, ##62876
0163c     43 01 00 FF 
01640     57 31 06 F6 | 	mov	local10, ##@LR__4328
01644     18 33 02 F6 | 	mov	local11, local10
01648     19 15 02 F6 | 	mov	arg02, local11
0164c     74 7B B1 FD | 	call	#__system___string_cmp
01650     00 FA 0D F2 | 	cmp	result1, #0 wz
01654     58 00 90 AD |  if_e	jmp	#LR__0066
01658     7A 00 00 FF 
0165c     9C E5 05 F1 | 	add	objptr, ##62876
01660     F2 12 02 FB | 	rdlong	arg01, objptr
01664     7A 00 00 FF 
01668     9C E5 85 F1 | 	sub	objptr, ##62876
0166c     43 01 00 FF 
01670     59 31 06 F6 | 	mov	local10, ##@LR__4329
01674     18 15 02 F6 | 	mov	arg02, local10
01678     48 7B B1 FD | 	call	#__system___string_cmp
0167c     FD 32 0A F6 | 	mov	local11, result1 wz
01680     2C 00 90 AD |  if_e	jmp	#LR__0066
01684     7A 00 00 FF 
01688     9C E5 05 F1 | 	add	objptr, ##62876
0168c     F2 12 02 FB | 	rdlong	arg01, objptr
01690     7A 00 00 FF 
01694     9C E5 85 F1 | 	sub	objptr, ##62876
01698     43 01 00 FF 
0169c     5B 37 06 F6 | 	mov	local13, ##@LR__4330
016a0     1B 15 02 F6 | 	mov	arg02, local13
016a4     1C 7B B1 FD | 	call	#__system___string_cmp
016a8     FD 30 0A F6 | 	mov	local10, result1 wz
016ac     30 00 90 5D |  if_ne	jmp	#LR__0067
016b0                 | LR__0066
016b0     7A 00 00 FF 
016b4     A0 E5 05 F1 | 	add	objptr, ##62880
016b8     F2 12 02 FB | 	rdlong	arg01, objptr
016bc     7A 00 00 FF 
016c0     A0 E5 85 F1 | 	sub	objptr, ##62880
016c4     43 01 00 FF 
016c8     5D 4B 06 F6 | 	mov	local23, ##@LR__4331
016cc     25 35 02 F6 | 	mov	local12, local23
016d0     1A 15 02 F6 | 	mov	arg02, local12
016d4     EC 7A B1 FD | 	call	#__system___string_cmp
016d8     FD 36 0A F6 | 	mov	local13, result1 wz
016dc     18 01 90 AD |  if_e	jmp	#LR__0070
016e0                 | LR__0067
016e0     7A 00 00 FF 
016e4     9C E5 05 F1 | 	add	objptr, ##62876
016e8     F2 12 02 FB | 	rdlong	arg01, objptr
016ec     7A 00 00 FF 
016f0     9C E5 85 F1 | 	sub	objptr, ##62876
016f4     43 01 00 FF 
016f8     5F 4B 06 F6 | 	mov	local23, ##@LR__4332
016fc     25 15 02 F6 | 	mov	arg02, local23
01700     C0 7A B1 FD | 	call	#__system___string_cmp
01704     FD 34 0A F6 | 	mov	local12, result1 wz
01708     30 00 90 5D |  if_ne	jmp	#LR__0068
0170c     7A 00 00 FF 
01710     A0 E5 05 F1 | 	add	objptr, ##62880
01714     F2 12 02 FB | 	rdlong	arg01, objptr
01718     7A 00 00 FF 
0171c     A0 E5 85 F1 | 	sub	objptr, ##62880
01720     43 01 00 FF 
01724     61 45 06 F6 | 	mov	local20, ##@LR__4333
01728     22 43 02 F6 | 	mov	local19, local20
0172c     21 15 02 F6 | 	mov	arg02, local19
01730     90 7A B1 FD | 	call	#__system___string_cmp
01734     FD 4A 0A F6 | 	mov	local23, result1 wz
01738     BC 00 90 AD |  if_e	jmp	#LR__0070
0173c                 | LR__0068
0173c     7A 00 00 FF 
01740     9C E5 05 F1 | 	add	objptr, ##62876
01744     F2 12 02 FB | 	rdlong	arg01, objptr
01748     7A 00 00 FF 
0174c     9C E5 85 F1 | 	sub	objptr, ##62876
01750     43 01 00 FF 
01754     63 45 06 F6 | 	mov	local20, ##@LR__4334
01758     22 15 02 F6 | 	mov	arg02, local20
0175c     64 7A B1 FD | 	call	#__system___string_cmp
01760     FD 42 0A F6 | 	mov	local19, result1 wz
01764     30 00 90 5D |  if_ne	jmp	#LR__0069
01768     7A 00 00 FF 
0176c     A0 E5 05 F1 | 	add	objptr, ##62880
01770     F2 12 02 FB | 	rdlong	arg01, objptr
01774     7A 00 00 FF 
01778     A0 E5 85 F1 | 	sub	objptr, ##62880
0177c     43 01 00 FF 
01780     65 4D 06 F6 | 	mov	local24, ##@LR__4335
01784     26 47 02 F6 | 	mov	local21, local24
01788     23 15 02 F6 | 	mov	arg02, local21
0178c     34 7A B1 FD | 	call	#__system___string_cmp
01790     FD 44 0A F6 | 	mov	local20, result1 wz
01794     60 00 90 AD |  if_e	jmp	#LR__0070
01798                 | LR__0069
01798     7A 00 00 FF 
0179c     9C E5 05 F1 | 	add	objptr, ##62876
017a0     F2 12 02 FB | 	rdlong	arg01, objptr
017a4     7A 00 00 FF 
017a8     9C E5 85 F1 | 	sub	objptr, ##62876
017ac     43 01 00 FF 
017b0     67 4F 06 F6 | 	mov	local25, ##@LR__4336
017b4     27 4D 02 F6 | 	mov	local24, local25
017b8     26 15 02 F6 | 	mov	arg02, local24
017bc     04 7A B1 FD | 	call	#__system___string_cmp
017c0     FD 46 0A F6 | 	mov	local21, result1 wz
017c4     10 01 90 5D |  if_ne	jmp	#LR__0074
017c8     7A 00 00 FF 
017cc     A0 E5 05 F1 | 	add	objptr, ##62880
017d0     F2 12 02 FB | 	rdlong	arg01, objptr
017d4     7A 00 00 FF 
017d8     A0 E5 85 F1 | 	sub	objptr, ##62880
017dc     43 01 00 FF 
017e0     69 51 06 F6 | 	mov	local26, ##@LR__4337
017e4     28 4F 02 F6 | 	mov	local25, local26
017e8     27 15 02 F6 | 	mov	arg02, local25
017ec     D4 79 B1 FD | 	call	#__system___string_cmp
017f0     FD 4C 0A F6 | 	mov	local24, result1 wz
017f4     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f8                 | LR__0070
017f8     11 2F 02 F6 | 	mov	local09, local03
017fc     03 2E 66 F0 | 	shl	local09, #3
01800     54 00 00 FF 
01804     D0 E4 05 F1 | 	add	objptr, ##43216
01808     F2 2E 02 F1 | 	add	local09, objptr
0180c     26 00 00 FF 
01810     CC E4 05 F1 | 	add	objptr, ##19660
01814     F2 12 02 FB | 	rdlong	arg01, objptr
01818     04 E4 05 F1 | 	add	objptr, #4
0181c     F2 30 02 FB | 	rdlong	local10, objptr
01820     7A 00 00 FF 
01824     A0 E5 85 F1 | 	sub	objptr, ##62880
01828     18 33 02 F6 | 	mov	local11, local10
0182c     19 15 02 F6 | 	mov	arg02, local11
01830     C4 79 B1 FD | 	call	#__system___string_concat
01834     17 FB 61 FC | 	wrlong	result1, local09
01838                 | '     lparts(i).part$=s1$+s2$
01838                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01838     11 39 02 F6 | 	mov	local14, local03
0183c     01 38 06 F1 | 	add	local14, #1
01840     1D 53 02 F6 | 	mov	local27, local15
01844     01 52 06 F1 | 	add	local27, #1
01848     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
0184c                 | LR__0071
0184c     29 39 52 F2 | 	cmps	local14, local27 wc
01850     7C 00 90 3D |  if_ae	jmp	#LR__0073
01854     1C 27 02 F6 | 	mov	local05, local14
01858     01 26 06 F1 | 	add	local05, #1
0185c     03 26 66 F0 | 	shl	local05, #3
01860     54 00 00 FF 
01864     D0 E4 05 F1 | 	add	objptr, ##43216
01868     F2 26 02 F1 | 	add	local05, objptr
0186c     13 1F 02 FB | 	rdlong	local01, local05
01870     1C 29 02 F6 | 	mov	local06, local14
01874     01 28 06 F1 | 	add	local06, #1
01878     03 28 66 F0 | 	shl	local06, #3
0187c     F2 28 02 F1 | 	add	local06, objptr
01880     04 28 06 F1 | 	add	local06, #4
01884     14 25 02 FB | 	rdlong	local04, local06
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     03 28 66 F0 | 	shl	local06, #3
01890     F2 32 02 F6 | 	mov	local11, objptr
01894     F2 28 02 F1 | 	add	local06, objptr
01898     14 1F 62 FC | 	wrlong	local01, local06
0189c     1C 31 02 F6 | 	mov	local10, local14
018a0     18 37 02 F6 | 	mov	local13, local10
018a4     1B 35 02 F6 | 	mov	local12, local13
018a8     03 34 66 F0 | 	shl	local12, #3
018ac     F2 4A 02 F6 | 	mov	local23, objptr
018b0     F2 34 02 F1 | 	add	local12, objptr
018b4     04 34 06 F1 | 	add	local12, #4
018b8     1A 25 62 FC | 	wrlong	local04, local12
018bc     04 34 86 F1 | 	sub	local12, #4
018c0     01 38 06 F1 | 	add	local14, #1
018c4     54 00 00 FF 
018c8     D0 E4 85 F1 | 	sub	objptr, ##43216
018cc     7C FF 9F FD | 	jmp	#LR__0071
018d0                 | LR__0072
018d0                 | LR__0073
018d0     01 22 86 F1 | 	sub	local03, #1
018d4     01 3A 86 F1 | 	sub	local15, #1
018d8                 | LR__0074
018d8     01 22 06 F1 | 	add	local03, #1
018dc     1D 23 52 F2 | 	cmps	local03, local15 wc
018e0     58 FC 9F CD |  if_b	jmp	#LR__0065
018e4                 | '  
018e4                 | ' ' 1f : now remove parts that are spaces
018e4                 | ' 
018e4                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018e4     00 22 06 F6 | 	mov	local03, #0
018e8     1D 55 02 F6 | 	mov	local28, local15
018ec     01 54 06 F1 | 	add	local28, #1
018f0                 | LR__0075
018f0     2A 23 52 F2 | 	cmps	local03, local28 wc
018f4     50 00 90 3D |  if_ae	jmp	#LR__0076
018f8     11 2F 02 F6 | 	mov	local09, local03
018fc     03 2E 66 F0 | 	shl	local09, #3
01900     54 00 00 FF 
01904     D0 E4 05 F1 | 	add	objptr, ##43216
01908     F2 2E 02 F1 | 	add	local09, objptr
0190c     11 33 02 F6 | 	mov	local11, local03
01910     19 31 02 F6 | 	mov	local10, local11
01914     18 37 02 F6 | 	mov	local13, local10
01918     03 36 66 F0 | 	shl	local13, #3
0191c     F2 34 02 F6 | 	mov	local12, objptr
01920     F2 36 02 F1 | 	add	local13, objptr
01924     1B 13 02 FB | 	rdlong	arg01, local13
01928     54 00 00 FF 
0192c     D0 E4 85 F1 | 	sub	objptr, ##43216
01930     AC 9C B1 FD | 	call	#__system__RTrim_S
01934     FD 12 02 F6 | 	mov	arg01, result1
01938     E4 9B B1 FD | 	call	#__system__LTrim_S
0193c     17 FB 61 FC | 	wrlong	result1, local09
01940     01 22 06 F1 | 	add	local03, #1
01944     A8 FF 9F FD | 	jmp	#LR__0075
01948                 | LR__0076
01948     00 22 06 F6 | 	mov	local03, #0
0194c     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01950                 | ' 
01950                 | ' i=0
01950                 | ' do 
01950                 | LR__0077
01950                 | '   if len(lparts(i).part$)=0 then 
01950     11 2F 02 F6 | 	mov	local09, local03
01954     17 27 02 F6 | 	mov	local05, local09
01958     03 26 66 F0 | 	shl	local05, #3
0195c     54 00 00 FF 
01960     D0 E4 05 F1 | 	add	objptr, ##43216
01964     F2 26 02 F1 | 	add	local05, objptr
01968     13 13 02 FB | 	rdlong	arg01, local05
0196c     54 00 00 FF 
01970     D0 E4 85 F1 | 	sub	objptr, ##43216
01974     09 2B 02 F6 | 	mov	local07, arg01
01978                 | LR__0078
01978     15 FB C9 FA | 	rdbyte	result1, local07 wz
0197c     01 2A 06 51 |  if_ne	add	local07, #1
01980     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
01984     09 2B 8A F1 | 	sub	local07, arg01 wz
01988     C4 00 90 5D |  if_ne	jmp	#LR__0082
0198c                 | '     if i=k-1 then k-=1  :  exit
0198c     1D 1F 02 F6 | 	mov	local01, local15
01990     01 1E 86 F1 | 	sub	local01, #1
01994     0F 23 0A F2 | 	cmp	local03, local01 wz
01998     01 3A 86 A1 |  if_e	sub	local15, #1
0199c     C4 00 90 AD |  if_e	jmp	#LR__0084
019a0                 | '     if i<k-1 then 
019a0     1D 1F 02 F6 | 	mov	local01, local15
019a4     01 1E 86 F1 | 	sub	local01, #1
019a8     0F 23 52 F2 | 	cmps	local03, local01 wc
019ac     A0 00 90 3D |  if_ae	jmp	#LR__0081
019b0                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019b0     11 39 02 F6 | 	mov	local14, local03
019b4     1D 57 02 F6 | 	mov	local29, local15
019b8     01 56 86 F1 | 	sub	local29, #1
019bc                 | LR__0079
019bc     2B 39 52 F2 | 	cmps	local14, local29 wc
019c0     80 00 90 3D |  if_ae	jmp	#LR__0080
019c4     1C 27 02 F6 | 	mov	local05, local14
019c8     01 26 06 F1 | 	add	local05, #1
019cc     03 26 66 F0 | 	shl	local05, #3
019d0     54 00 00 FF 
019d4     D0 E4 05 F1 | 	add	objptr, ##43216
019d8     F2 26 02 F1 | 	add	local05, objptr
019dc     13 1F 02 FB | 	rdlong	local01, local05
019e0     1C 29 02 F6 | 	mov	local06, local14
019e4     01 28 06 F1 | 	add	local06, #1
019e8     03 28 66 F0 | 	shl	local06, #3
019ec     F2 28 02 F1 | 	add	local06, objptr
019f0     04 28 06 F1 | 	add	local06, #4
019f4     14 25 02 FB | 	rdlong	local04, local06
019f8     1C 2F 02 F6 | 	mov	local09, local14
019fc     17 29 02 F6 | 	mov	local06, local09
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 32 02 F6 | 	mov	local11, objptr
01a08     F2 28 02 F1 | 	add	local06, objptr
01a0c     14 1F 62 FC | 	wrlong	local01, local06
01a10     1C 31 02 F6 | 	mov	local10, local14
01a14     18 37 02 F6 | 	mov	local13, local10
01a18     1B 35 02 F6 | 	mov	local12, local13
01a1c     03 34 66 F0 | 	shl	local12, #3
01a20     F2 4A 02 F6 | 	mov	local23, objptr
01a24     F2 34 02 F1 | 	add	local12, objptr
01a28     04 34 06 F1 | 	add	local12, #4
01a2c     1A 25 62 FC | 	wrlong	local04, local12
01a30     04 34 86 F1 | 	sub	local12, #4
01a34     01 38 06 F1 | 	add	local14, #1
01a38     54 00 00 FF 
01a3c     D0 E4 85 F1 | 	sub	objptr, ##43216
01a40     78 FF 9F FD | 	jmp	#LR__0079
01a44                 | LR__0080
01a44     01 3A 86 F1 | 	sub	local15, #1
01a48                 | '       if i>0 then i-=1 
01a48     01 22 56 F2 | 	cmps	local03, #1 wc
01a4c     01 22 86 31 |  if_ae	sub	local03, #1
01a50                 | LR__0081
01a50                 | LR__0082
01a50     01 22 06 F1 | 	add	local03, #1
01a54     1D 1F 02 F6 | 	mov	local01, local15
01a58     01 1E 86 F1 | 	sub	local01, #1
01a5c     0F 23 5A F2 | 	cmps	local03, local01 wcz
01a60     EC FE 9F ED |  if_be	jmp	#LR__0077
01a64                 | LR__0083
01a64                 | LR__0084
01a64                 | ' 
01a64                 | ' ' 1g: lowercase all that is not a string
01a64                 | ' 
01a64                 | ' for j=0 to k-1
01a64     00 38 06 F6 | 	mov	local14, #0
01a68     1D 59 02 F6 | 	mov	local30, local15
01a6c                 | LR__0085
01a6c     2C 39 52 F2 | 	cmps	local14, local30 wc
01a70     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a74                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a74     1C 27 02 F6 | 	mov	local05, local14
01a78     03 26 66 F0 | 	shl	local05, #3
01a7c     54 00 00 FF 
01a80     D0 E4 05 F1 | 	add	objptr, ##43216
01a84     F2 26 02 F1 | 	add	local05, objptr
01a88     13 13 02 FB | 	rdlong	arg01, local05
01a8c     01 14 06 F6 | 	mov	arg02, #1
01a90     54 00 00 FF 
01a94     D0 E4 85 F1 | 	sub	objptr, ##43216
01a98     10 97 B1 FD | 	call	#__system__Left_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     43 01 00 FF 
01aa4     6B 15 06 F6 | 	mov	arg02, ##@LR__4338
01aa8     18 77 B1 FD | 	call	#__system___string_cmp
01aac     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab0     40 00 90 5D |  if_ne	jmp	#LR__0086
01ab4     1C 29 02 F6 | 	mov	local06, local14
01ab8     03 28 66 F0 | 	shl	local06, #3
01abc     54 00 00 FF 
01ac0     D0 E4 05 F1 | 	add	objptr, ##43216
01ac4     F2 28 02 F1 | 	add	local06, objptr
01ac8     14 13 02 FB | 	rdlong	arg01, local06
01acc     01 14 06 F6 | 	mov	arg02, #1
01ad0     54 00 00 FF 
01ad4     D0 E4 85 F1 | 	sub	objptr, ##43216
01ad8     58 97 B1 FD | 	call	#__system__Right_S
01adc     FD 12 02 F6 | 	mov	arg01, result1
01ae0     43 01 00 FF 
01ae4     6D 15 06 F6 | 	mov	arg02, ##@LR__4339
01ae8     D8 76 B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     38 00 90 AD |  if_e	jmp	#LR__0087
01af4                 | LR__0086
01af4     1C 2F 02 F6 | 	mov	local09, local14
01af8     03 2E 66 F0 | 	shl	local09, #3
01afc     54 00 00 FF 
01b00     D0 E4 05 F1 | 	add	objptr, ##43216
01b04     F2 2E 02 F1 | 	add	local09, objptr
01b08     1C 37 02 F6 | 	mov	local13, local14
01b0c     03 36 66 F0 | 	shl	local13, #3
01b10     F2 34 02 F6 | 	mov	local12, objptr
01b14     F2 36 02 F1 | 	add	local13, objptr
01b18     1B 13 02 FB | 	rdlong	arg01, local13
01b1c     54 00 00 FF 
01b20     D0 E4 85 F1 | 	sub	objptr, ##43216
01b24     38 99 B1 FD | 	call	#__system__LCase_S
01b28     17 FB 61 FC | 	wrlong	result1, local09
01b2c                 | LR__0087
01b2c     01 38 06 F1 | 	add	local14, #1
01b30     38 FF 9F FD | 	jmp	#LR__0085
01b34                 | LR__0088
01b34                 | ' 
01b34                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b34                 | ' 
01b34                 | ' for i=0 to k: lparts(i).token=-1: next i
01b34     00 22 06 F6 | 	mov	local03, #0
01b38     1D 5B 02 F6 | 	mov	local31, local15
01b3c     01 5A 06 F1 | 	add	local31, #1
01b40     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b44                 | LR__0089
01b44     2D 23 52 F2 | 	cmps	local03, local31 wc
01b48     30 00 90 3D |  if_ae	jmp	#LR__0091
01b4c     11 2F 02 F6 | 	mov	local09, local03
01b50     03 2E 66 F0 | 	shl	local09, #3
01b54     54 00 00 FF 
01b58     D0 E4 05 F1 | 	add	objptr, ##43216
01b5c     F2 2E 02 F1 | 	add	local09, objptr
01b60     04 2E 06 F1 | 	add	local09, #4
01b64     FF FF FF FF 
01b68     17 FF 6B FC | 	wrlong	##-1, local09
01b6c     01 22 06 F1 | 	add	local03, #1
01b70     54 00 00 FF 
01b74     D0 E4 85 F1 | 	sub	objptr, ##43216
01b78     C8 FF 9F FD | 	jmp	#LR__0089
01b7c                 | LR__0090
01b7c                 | LR__0091
01b7c                 | ' 
01b7c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b7c                 | ' 
01b7c                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b7c     54 00 00 FF 
01b80     D0 E4 05 F1 | 	add	objptr, ##43216
01b84     F2 12 02 FB | 	rdlong	arg01, objptr
01b88     54 00 00 FF 
01b8c     D0 E4 85 F1 | 	sub	objptr, ##43216
01b90     09 2B 02 F6 | 	mov	local07, arg01
01b94     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01b98                 | LR__0092
01b98     15 FB C9 FA | 	rdbyte	result1, local07 wz
01b9c     01 2A 06 51 |  if_ne	add	local07, #1
01ba0     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01ba4                 | LR__0093
01ba4     09 2B 8A F1 | 	sub	local07, arg01 wz
01ba8     98 16 90 AD |  if_e	jmp	#LR__0148
01bac                 | ' 
01bac                 | ' 
01bac                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bac     54 00 00 FF 
01bb0     D0 E4 05 F1 | 	add	objptr, ##43216
01bb4     F2 12 02 FB | 	rdlong	arg01, objptr
01bb8     54 00 00 FF 
01bbc     D0 E4 85 F1 | 	sub	objptr, ##43216
01bc0     F0 2E B0 FD | 	call	#_isdec
01bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc8     7A 00 00 5F 
01bcc     A4 E5 05 51 |  if_ne	add	objptr, ##62884
01bd0     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bd4     7A 00 00 FF 
01bd8     A4 E5 E5 F3 | 	sumnz	objptr, ##62884
01bdc     F2 00 68 AC |  if_e	wrlong	#0, objptr
01be0     7A 00 00 AF 
01be4     A4 E5 85 A1 |  if_e	sub	objptr, ##62884
01be8     7A 00 00 FF 
01bec     A4 E5 05 F1 | 	add	objptr, ##62884
01bf0     F2 26 02 FB | 	rdlong	local05, objptr
01bf4     03 26 66 F0 | 	shl	local05, #3
01bf8     26 00 00 FF 
01bfc     D4 E4 85 F1 | 	sub	objptr, ##19668
01c00     F2 26 02 F1 | 	add	local05, objptr
01c04     13 33 02 FB | 	rdlong	local11, local05
01c08     26 00 00 FF 
01c0c     D8 E4 05 F1 | 	add	objptr, ##19672
01c10     F2 32 62 FC | 	wrlong	local11, objptr
01c14     04 E4 85 F1 | 	sub	objptr, #4
01c18     F2 32 02 FB | 	rdlong	local11, objptr
01c1c     03 32 66 F0 | 	shl	local11, #3
01c20     26 00 00 FF 
01c24     D4 E4 85 F1 | 	sub	objptr, ##19668
01c28     F2 30 02 F6 | 	mov	local10, objptr
01c2c     F2 32 02 F1 | 	add	local11, objptr
01c30     19 15 02 FB | 	rdlong	arg02, local11
01c34     43 01 00 FF 
01c38     6F 17 06 F6 | 	mov	arg03, ##@LR__4340
01c3c     01 12 06 F6 | 	mov	arg01, #1
01c40     54 00 00 FF 
01c44     D0 E4 85 F1 | 	sub	objptr, ##43216
01c48     4C 9A B1 FD | 	call	#__system__Instr
01c4c     7A 00 00 FF 
01c50     AC E5 05 F1 | 	add	objptr, ##62892
01c54     F2 FA 61 FC | 	wrlong	result1, objptr
01c58                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c58     FD 1E 02 F6 | 	mov	local01, result1
01c5c     7A 00 00 FF 
01c60     AC E5 85 F1 | 	sub	objptr, ##62892
01c64     01 1E 56 F2 | 	cmps	local01, #1 wc
01c68     DC 01 90 CD |  if_b	jmp	#LR__0100
01c6c     7A 00 00 FF 
01c70     A4 E5 05 F1 | 	add	objptr, ##62884
01c74     F2 30 02 FB | 	rdlong	local10, objptr
01c78     03 30 66 F0 | 	shl	local10, #3
01c7c     26 00 00 FF 
01c80     D4 E4 85 F1 | 	sub	objptr, ##19668
01c84     F2 36 02 F6 | 	mov	local13, objptr
01c88     F2 30 02 F1 | 	add	local10, objptr
01c8c     18 13 02 FB | 	rdlong	arg01, local10
01c90     54 00 00 FF 
01c94     D0 E4 85 F1 | 	sub	objptr, ##43216
01c98     09 2B 02 F6 | 	mov	local07, arg01
01c9c     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01ca0                 | LR__0094
01ca0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ca4     01 2A 06 51 |  if_ne	add	local07, #1
01ca8     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cac                 | LR__0095
01cac     09 2B 82 F1 | 	sub	local07, arg01
01cb0     15 2F 02 F6 | 	mov	local09, local07
01cb4     7A 00 00 FF 
01cb8     AC E5 05 F1 | 	add	objptr, ##62892
01cbc     F2 26 02 FB | 	rdlong	local05, objptr
01cc0     7A 00 00 FF 
01cc4     AC E5 85 F1 | 	sub	objptr, ##62892
01cc8     17 27 52 F2 | 	cmps	local05, local09 wc
01ccc     78 01 90 3D |  if_ae	jmp	#LR__0100
01cd0     01 3A 06 F1 | 	add	local15, #1
01cd4                 | '   k+=1
01cd4                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cd4     1D 23 02 F6 | 	mov	local03, local15
01cd8     7A 00 00 FF 
01cdc     A4 E5 05 F1 | 	add	objptr, ##62884
01ce0     F2 5C 02 FB | 	rdlong	local32, objptr
01ce4     01 5C 06 F1 | 	add	local32, #1
01ce8     26 00 00 FF 
01cec     D4 E4 85 F1 | 	sub	objptr, ##19668
01cf0     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01cf4                 | LR__0096
01cf4     11 29 02 F6 | 	mov	local06, local03
01cf8     01 28 86 F1 | 	sub	local06, #1
01cfc     03 28 66 F0 | 	shl	local06, #3
01d00     F2 28 02 F1 | 	add	local06, objptr
01d04     14 25 02 FB | 	rdlong	local04, local06
01d08     11 33 02 F6 | 	mov	local11, local03
01d0c     01 32 86 F1 | 	sub	local11, #1
01d10     03 32 66 F0 | 	shl	local11, #3
01d14     F2 32 02 F1 | 	add	local11, objptr
01d18     04 32 06 F1 | 	add	local11, #4
01d1c     19 2F 02 FB | 	rdlong	local09, local11
01d20     11 33 02 F6 | 	mov	local11, local03
01d24     03 32 66 F0 | 	shl	local11, #3
01d28     F2 32 02 F1 | 	add	local11, objptr
01d2c     19 25 62 FC | 	wrlong	local04, local11
01d30     11 4B 02 F6 | 	mov	local23, local03
01d34     03 4A 66 F0 | 	shl	local23, #3
01d38     F2 4A 02 F1 | 	add	local23, objptr
01d3c     04 4A 06 F1 | 	add	local23, #4
01d40     25 2F 62 FC | 	wrlong	local09, local23
01d44     01 22 86 F1 | 	sub	local03, #1
01d48     2E 23 52 F2 | 	cmps	local03, local32 wc
01d4c     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d50                 | LR__0097
01d50     26 00 00 FF 
01d54     D4 E4 05 F1 | 	add	objptr, ##19668
01d58     F2 4A 02 FB | 	rdlong	local23, objptr
01d5c     25 27 02 F6 | 	mov	local05, local23
01d60     01 26 06 F1 | 	add	local05, #1
01d64     03 26 66 F0 | 	shl	local05, #3
01d68     26 00 00 FF 
01d6c     D4 E4 85 F1 | 	sub	objptr, ##19668
01d70     F2 26 02 F1 | 	add	local05, objptr
01d74     03 4A 66 F0 | 	shl	local23, #3
01d78     F2 4A 02 F1 | 	add	local23, objptr
01d7c     25 33 02 FB | 	rdlong	local11, local23
01d80     26 00 00 FF 
01d84     D4 E4 05 F1 | 	add	objptr, ##19668
01d88     F2 44 02 FB | 	rdlong	local20, objptr
01d8c     22 47 02 F6 | 	mov	local21, local20
01d90     03 46 66 F0 | 	shl	local21, #3
01d94     26 00 00 FF 
01d98     D4 E4 85 F1 | 	sub	objptr, ##19668
01d9c     F2 4C 02 F6 | 	mov	local24, objptr
01da0     F2 46 02 F1 | 	add	local21, objptr
01da4     23 13 02 FB | 	rdlong	arg01, local21
01da8     54 00 00 FF 
01dac     D0 E4 85 F1 | 	sub	objptr, ##43216
01db0     09 2B 02 F6 | 	mov	local07, arg01
01db4     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01db8                 | LR__0098
01db8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dbc     01 2A 06 51 |  if_ne	add	local07, #1
01dc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01dc4                 | LR__0099
01dc4     09 2B 82 F1 | 	sub	local07, arg01
01dc8     15 15 02 F6 | 	mov	arg02, local07
01dcc     7A 00 00 FF 
01dd0     AC E5 05 F1 | 	add	objptr, ##62892
01dd4     F2 4A 02 FB | 	rdlong	local23, objptr
01dd8     7A 00 00 FF 
01ddc     AC E5 85 F1 | 	sub	objptr, ##62892
01de0     25 15 82 F1 | 	sub	arg02, local23
01de4     19 13 02 F6 | 	mov	arg01, local11
01de8     48 94 B1 FD | 	call	#__system__Right_S
01dec     13 FB 61 FC | 	wrlong	result1, local05
01df0     7A 00 00 FF 
01df4     A4 E5 05 F1 | 	add	objptr, ##62884
01df8     F2 34 02 FB | 	rdlong	local12, objptr
01dfc     1A 27 02 F6 | 	mov	local05, local12
01e00     03 26 66 F0 | 	shl	local05, #3
01e04     26 00 00 FF 
01e08     D4 E4 85 F1 | 	sub	objptr, ##19668
01e0c     F2 26 02 F1 | 	add	local05, objptr
01e10     1A 4B 02 F6 | 	mov	local23, local12
01e14     03 4A 66 F0 | 	shl	local23, #3
01e18     F2 42 02 F6 | 	mov	local19, objptr
01e1c     F2 4A 02 F1 | 	add	local23, objptr
01e20     25 13 02 FB | 	rdlong	arg01, local23
01e24     26 00 00 FF 
01e28     DC E4 05 F1 | 	add	objptr, ##19676
01e2c     F2 36 02 FB | 	rdlong	local13, objptr
01e30     7A 00 00 FF 
01e34     AC E5 85 F1 | 	sub	objptr, ##62892
01e38     1B 31 02 F6 | 	mov	local10, local13
01e3c     18 15 02 F6 | 	mov	arg02, local10
01e40     68 93 B1 FD | 	call	#__system__Left_S
01e44     13 FB 61 FC | 	wrlong	result1, local05
01e48                 | LR__0100
01e48                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e48     7A 00 00 FF 
01e4c     A4 E5 05 F1 | 	add	objptr, ##62884
01e50     F2 28 02 FB | 	rdlong	local06, objptr
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     26 00 00 FF 
01e5c     D4 E4 85 F1 | 	sub	objptr, ##19668
01e60     F2 28 02 F1 | 	add	local06, objptr
01e64     14 13 02 FB | 	rdlong	arg01, local06
01e68     01 14 06 F6 | 	mov	arg02, #1
01e6c     54 00 00 FF 
01e70     D0 E4 85 F1 | 	sub	objptr, ##43216
01e74     34 93 B1 FD | 	call	#__system__Left_S
01e78     FD 12 02 F6 | 	mov	arg01, result1
01e7c     43 01 00 FF 
01e80     71 15 06 F6 | 	mov	arg02, ##@LR__4341
01e84     3C 73 B1 FD | 	call	#__system___string_cmp
01e88     00 FA 0D F2 | 	cmp	result1, #0 wz
01e8c     9C 01 90 5D |  if_ne	jmp	#LR__0107
01e90     7A 00 00 FF 
01e94     A4 E5 05 F1 | 	add	objptr, ##62884
01e98     F2 32 02 FB | 	rdlong	local11, objptr
01e9c     03 32 66 F0 | 	shl	local11, #3
01ea0     26 00 00 FF 
01ea4     D4 E4 85 F1 | 	sub	objptr, ##19668
01ea8     F2 30 02 F6 | 	mov	local10, objptr
01eac     F2 32 02 F1 | 	add	local11, objptr
01eb0     19 13 02 FB | 	rdlong	arg01, local11
01eb4     54 00 00 FF 
01eb8     D0 E4 85 F1 | 	sub	objptr, ##43216
01ebc     09 2B 02 F6 | 	mov	local07, arg01
01ec0     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ec4                 | LR__0101
01ec4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ec8     01 2A 06 51 |  if_ne	add	local07, #1
01ecc     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ed0                 | LR__0102
01ed0     09 2B 82 F1 | 	sub	local07, arg01
01ed4     02 2A 56 F2 | 	cmps	local07, #2 wc
01ed8     50 01 90 CD |  if_b	jmp	#LR__0107
01edc     01 3A 06 F1 | 	add	local15, #1
01ee0                 | '   k+=1
01ee0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ee0     1D 23 02 F6 | 	mov	local03, local15
01ee4     7A 00 00 FF 
01ee8     A4 E5 05 F1 | 	add	objptr, ##62884
01eec     F2 5E 02 FB | 	rdlong	local33, objptr
01ef0     01 5E 06 F1 | 	add	local33, #1
01ef4     26 00 00 FF 
01ef8     D4 E4 85 F1 | 	sub	objptr, ##19668
01efc     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f00                 | LR__0103
01f00     11 29 02 F6 | 	mov	local06, local03
01f04     01 28 86 F1 | 	sub	local06, #1
01f08     03 28 66 F0 | 	shl	local06, #3
01f0c     F2 28 02 F1 | 	add	local06, objptr
01f10     14 25 02 FB | 	rdlong	local04, local06
01f14     11 33 02 F6 | 	mov	local11, local03
01f18     01 32 86 F1 | 	sub	local11, #1
01f1c     03 32 66 F0 | 	shl	local11, #3
01f20     F2 32 02 F1 | 	add	local11, objptr
01f24     04 32 06 F1 | 	add	local11, #4
01f28     19 2F 02 FB | 	rdlong	local09, local11
01f2c     11 33 02 F6 | 	mov	local11, local03
01f30     03 32 66 F0 | 	shl	local11, #3
01f34     F2 32 02 F1 | 	add	local11, objptr
01f38     19 25 62 FC | 	wrlong	local04, local11
01f3c     11 4B 02 F6 | 	mov	local23, local03
01f40     03 4A 66 F0 | 	shl	local23, #3
01f44     F2 4A 02 F1 | 	add	local23, objptr
01f48     04 4A 06 F1 | 	add	local23, #4
01f4c     25 2F 62 FC | 	wrlong	local09, local23
01f50     01 22 86 F1 | 	sub	local03, #1
01f54     2F 23 52 F2 | 	cmps	local03, local33 wc
01f58     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f5c                 | LR__0104
01f5c     26 00 00 FF 
01f60     D4 E4 05 F1 | 	add	objptr, ##19668
01f64     F2 4A 02 FB | 	rdlong	local23, objptr
01f68     25 27 02 F6 | 	mov	local05, local23
01f6c     01 26 06 F1 | 	add	local05, #1
01f70     03 26 66 F0 | 	shl	local05, #3
01f74     26 00 00 FF 
01f78     D4 E4 85 F1 | 	sub	objptr, ##19668
01f7c     F2 26 02 F1 | 	add	local05, objptr
01f80     03 4A 66 F0 | 	shl	local23, #3
01f84     F2 4A 02 F1 | 	add	local23, objptr
01f88     25 33 02 FB | 	rdlong	local11, local23
01f8c     26 00 00 FF 
01f90     D4 E4 05 F1 | 	add	objptr, ##19668
01f94     F2 42 02 FB | 	rdlong	local19, objptr
01f98     21 4B 02 F6 | 	mov	local23, local19
01f9c     25 45 02 F6 | 	mov	local20, local23
01fa0     22 47 02 F6 | 	mov	local21, local20
01fa4     03 46 66 F0 | 	shl	local21, #3
01fa8     26 00 00 FF 
01fac     D4 E4 85 F1 | 	sub	objptr, ##19668
01fb0     F2 4C 02 F6 | 	mov	local24, objptr
01fb4     F2 46 02 F1 | 	add	local21, objptr
01fb8     23 13 02 FB | 	rdlong	arg01, local21
01fbc     54 00 00 FF 
01fc0     D0 E4 85 F1 | 	sub	objptr, ##43216
01fc4     09 2B 02 F6 | 	mov	local07, arg01
01fc8     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fcc                 | LR__0105
01fcc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fd0     01 2A 06 51 |  if_ne	add	local07, #1
01fd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01fd8                 | LR__0106
01fd8     09 2B 82 F1 | 	sub	local07, arg01
01fdc     15 35 02 F6 | 	mov	local12, local07
01fe0     1A 37 02 F6 | 	mov	local13, local12
01fe4     01 36 86 F1 | 	sub	local13, #1
01fe8     1B 31 02 F6 | 	mov	local10, local13
01fec     19 13 02 F6 | 	mov	arg01, local11
01ff0     18 15 02 F6 | 	mov	arg02, local10
01ff4     3C 92 B1 FD | 	call	#__system__Right_S
01ff8     13 FB 61 FC | 	wrlong	result1, local05
01ffc     7A 00 00 FF 
02000     A4 E5 05 F1 | 	add	objptr, ##62884
02004     F2 26 02 FB | 	rdlong	local05, objptr
02008     03 26 66 F0 | 	shl	local05, #3
0200c     26 00 00 FF 
02010     D4 E4 85 F1 | 	sub	objptr, ##19668
02014     F2 26 02 F1 | 	add	local05, objptr
02018     43 01 00 FF 
0201c     73 33 06 F6 | 	mov	local11, ##@LR__4342
02020     13 33 62 FC | 	wrlong	local11, local05
02024     54 00 00 FF 
02028     D0 E4 85 F1 | 	sub	objptr, ##43216
0202c                 | LR__0107
0202c     7A 00 00 FF 
02030     A4 E5 05 F1 | 	add	objptr, ##62884
02034     F2 26 02 FB | 	rdlong	local05, objptr
02038     03 26 66 F0 | 	shl	local05, #3
0203c     26 00 00 FF 
02040     D4 E4 85 F1 | 	sub	objptr, ##19668
02044     F2 26 02 F1 | 	add	local05, objptr
02048     13 33 02 FB | 	rdlong	local11, local05
0204c     26 00 00 FF 
02050     D8 E4 05 F1 | 	add	objptr, ##19672
02054     F2 32 62 FC | 	wrlong	local11, objptr
02058                 | ' 
02058                 | ' ' process the case when simple load or save is called without ""
02058                 | ' 
02058                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") andalso lparts(addptr+1).token=token_name then 
02058     7A 00 00 FF 
0205c     A8 E5 85 F1 | 	sub	objptr, ##62888
02060     43 01 00 FF 
02064     75 15 06 F6 | 	mov	arg02, ##@LR__4343
02068     19 13 02 F6 | 	mov	arg01, local11
0206c     54 71 B1 FD | 	call	#__system___string_cmp
02070     00 FA 0D F2 | 	cmp	result1, #0 wz
02074     50 00 90 AD |  if_e	jmp	#LR__0108
02078     7A 00 00 FF 
0207c     A8 E5 05 F1 | 	add	objptr, ##62888
02080     F2 12 02 FB | 	rdlong	arg01, objptr
02084     7A 00 00 FF 
02088     A8 E5 85 F1 | 	sub	objptr, ##62888
0208c     43 01 00 FF 
02090     7B 15 06 F6 | 	mov	arg02, ##@LR__4344
02094     2C 71 B1 FD | 	call	#__system___string_cmp
02098     00 FA 0D F2 | 	cmp	result1, #0 wz
0209c     28 00 90 AD |  if_e	jmp	#LR__0108
020a0     7A 00 00 FF 
020a4     A8 E5 05 F1 | 	add	objptr, ##62888
020a8     F2 12 02 FB | 	rdlong	arg01, objptr
020ac     7A 00 00 FF 
020b0     A8 E5 85 F1 | 	sub	objptr, ##62888
020b4     43 01 00 FF 
020b8     82 15 06 F6 | 	mov	arg02, ##@LR__4345
020bc     04 71 B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     94 01 90 5D |  if_ne	jmp	#LR__0111
020c8                 | LR__0108
020c8     7A 00 00 FF 
020cc     A4 E5 05 F1 | 	add	objptr, ##62884
020d0     F2 32 02 FB | 	rdlong	local11, objptr
020d4     01 32 06 F1 | 	add	local11, #1
020d8     19 31 02 F6 | 	mov	local10, local11
020dc     03 30 66 F0 | 	shl	local10, #3
020e0     26 00 00 FF 
020e4     D4 E4 85 F1 | 	sub	objptr, ##19668
020e8     F2 36 02 F6 | 	mov	local13, objptr
020ec     F2 30 02 F1 | 	add	local10, objptr
020f0     04 30 06 F1 | 	add	local10, #4
020f4     18 4B 02 FB | 	rdlong	local23, local10
020f8     04 30 86 F1 | 	sub	local10, #4
020fc     25 35 02 F6 | 	mov	local12, local23
02100     01 00 00 FF 
02104     04 34 0E F2 | 	cmp	local12, ##516 wz
02108     54 00 00 FF 
0210c     D0 E4 85 F1 | 	sub	objptr, ##43216
02110     48 01 90 5D |  if_ne	jmp	#LR__0111
02114                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
02114     7A 00 00 FF 
02118     A4 E5 05 F1 | 	add	objptr, ##62884
0211c     F2 28 02 FB | 	rdlong	local06, objptr
02120     01 28 06 F1 | 	add	local06, #1
02124     03 28 66 F0 | 	shl	local06, #3
02128     26 00 00 FF 
0212c     D4 E4 85 F1 | 	sub	objptr, ##19668
02130     F2 28 02 F1 | 	add	local06, objptr
02134     14 13 02 FB | 	rdlong	arg01, local06
02138     43 01 00 FF 
0213c     88 15 06 F6 | 	mov	arg02, ##@LR__4346
02140     54 00 00 FF 
02144     D0 E4 85 F1 | 	sub	objptr, ##43216
02148     78 70 B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     60 00 90 5D |  if_ne	jmp	#LR__0109
02154     7A 00 00 FF 
02158     A4 E5 05 F1 | 	add	objptr, ##62884
0215c     F2 26 02 FB | 	rdlong	local05, objptr
02160     01 26 06 F1 | 	add	local05, #1
02164     03 26 66 F0 | 	shl	local05, #3
02168     26 00 00 FF 
0216c     D4 E4 85 F1 | 	sub	objptr, ##19668
02170     F2 26 02 F1 | 	add	local05, objptr
02174     43 01 00 FF 
02178     8B 33 06 F6 | 	mov	local11, ##@LR__4347
0217c     13 33 62 FC | 	wrlong	local11, local05
02180     26 00 00 FF 
02184     D4 E4 05 F1 | 	add	objptr, ##19668
02188     F2 26 02 FB | 	rdlong	local05, objptr
0218c     01 26 06 F1 | 	add	local05, #1
02190     03 26 66 F0 | 	shl	local05, #3
02194     26 00 00 FF 
02198     D4 E4 85 F1 | 	sub	objptr, ##19668
0219c     F2 26 02 F1 | 	add	local05, objptr
021a0     04 26 06 F1 | 	add	local05, #4
021a4     01 00 80 FF 
021a8     13 01 68 FC | 	wrlong	##512, local05
021ac     54 00 00 FF 
021b0     D0 E4 85 F1 | 	sub	objptr, ##43216
021b4                 | LR__0109
021b4                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
021b4     7A 00 00 FF 
021b8     A4 E5 05 F1 | 	add	objptr, ##62884
021bc     F2 28 02 FB | 	rdlong	local06, objptr
021c0     01 28 06 F1 | 	add	local06, #1
021c4     03 28 66 F0 | 	shl	local06, #3
021c8     26 00 00 FF 
021cc     D4 E4 85 F1 | 	sub	objptr, ##19668
021d0     F2 32 02 F6 | 	mov	local11, objptr
021d4     F2 28 02 F1 | 	add	local06, objptr
021d8     14 13 02 FB | 	rdlong	arg01, local06
021dc     43 01 00 FF 
021e0     8D 15 06 F6 | 	mov	arg02, ##@LR__4348
021e4     54 00 00 FF 
021e8     D0 E4 85 F1 | 	sub	objptr, ##43216
021ec     D4 6F B1 FD | 	call	#__system___string_cmp
021f0     00 FA 0D F2 | 	cmp	result1, #0 wz
021f4     64 00 90 5D |  if_ne	jmp	#LR__0110
021f8     7A 00 00 FF 
021fc     A4 E5 05 F1 | 	add	objptr, ##62884
02200     F2 26 02 FB | 	rdlong	local05, objptr
02204     01 26 06 F1 | 	add	local05, #1
02208     03 26 66 F0 | 	shl	local05, #3
0220c     26 00 00 FF 
02210     D4 E4 85 F1 | 	sub	objptr, ##19668
02214     F2 26 02 F1 | 	add	local05, objptr
02218     43 01 00 FF 
0221c     91 33 06 F6 | 	mov	local11, ##@LR__4349
02220     13 33 62 FC | 	wrlong	local11, local05
02224     26 00 00 FF 
02228     D4 E4 05 F1 | 	add	objptr, ##19668
0222c     F2 26 02 FB | 	rdlong	local05, objptr
02230     01 26 06 F1 | 	add	local05, #1
02234     03 26 66 F0 | 	shl	local05, #3
02238     26 00 00 FF 
0223c     D4 E4 85 F1 | 	sub	objptr, ##19668
02240     F2 26 02 F1 | 	add	local05, objptr
02244     09 32 C6 F9 | 	decod	local11, #9
02248     04 26 06 F1 | 	add	local05, #4
0224c     01 00 80 FF 
02250     13 01 68 FC | 	wrlong	##512, local05
02254     54 00 00 FF 
02258     D0 E4 85 F1 | 	sub	objptr, ##43216
0225c                 | LR__0110
0225c                 | LR__0111
0225c                 | ' if (lp$="mode" orelse lp$="m.") then 
0225c     7A 00 00 FF 
02260     A8 E5 05 F1 | 	add	objptr, ##62888
02264     F2 12 02 FB | 	rdlong	arg01, objptr
02268     7A 00 00 FF 
0226c     A8 E5 85 F1 | 	sub	objptr, ##62888
02270     43 01 00 FF 
02274     93 15 06 F6 | 	mov	arg02, ##@LR__4350
02278     48 6F B1 FD | 	call	#__system___string_cmp
0227c     00 FA 0D F2 | 	cmp	result1, #0 wz
02280     28 00 90 AD |  if_e	jmp	#LR__0112
02284     7A 00 00 FF 
02288     A8 E5 05 F1 | 	add	objptr, ##62888
0228c     F2 12 02 FB | 	rdlong	arg01, objptr
02290     7A 00 00 FF 
02294     A8 E5 85 F1 | 	sub	objptr, ##62888
02298     43 01 00 FF 
0229c     98 15 06 F6 | 	mov	arg02, ##@LR__4351
022a0     20 6F B1 FD | 	call	#__system___string_cmp
022a4     00 FA 0D F2 | 	cmp	result1, #0 wz
022a8     48 02 90 5D |  if_ne	jmp	#LR__0118
022ac                 | LR__0112
022ac                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
022ac     7A 00 00 FF 
022b0     A4 E5 05 F1 | 	add	objptr, ##62884
022b4     F2 28 02 FB | 	rdlong	local06, objptr
022b8     01 28 06 F1 | 	add	local06, #1
022bc     03 28 66 F0 | 	shl	local06, #3
022c0     26 00 00 FF 
022c4     D4 E4 85 F1 | 	sub	objptr, ##19668
022c8     F2 28 02 F1 | 	add	local06, objptr
022cc     14 13 02 FB | 	rdlong	arg01, local06
022d0     43 01 00 FF 
022d4     9B 15 06 F6 | 	mov	arg02, ##@LR__4352
022d8     54 00 00 FF 
022dc     D0 E4 85 F1 | 	sub	objptr, ##43216
022e0     E0 6E B1 FD | 	call	#__system___string_cmp
022e4     00 FA 0D F2 | 	cmp	result1, #0 wz
022e8     34 00 90 5D |  if_ne	jmp	#LR__0113
022ec     7A 00 00 FF 
022f0     A4 E5 05 F1 | 	add	objptr, ##62884
022f4     F2 26 02 FB | 	rdlong	local05, objptr
022f8     01 26 06 F1 | 	add	local05, #1
022fc     03 26 66 F0 | 	shl	local05, #3
02300     26 00 00 FF 
02304     D4 E4 85 F1 | 	sub	objptr, ##19668
02308     F2 26 02 F1 | 	add	local05, objptr
0230c     43 01 00 FF 
02310     A1 33 06 F6 | 	mov	local11, ##@LR__4353
02314     13 33 62 FC | 	wrlong	local11, local05
02318     54 00 00 FF 
0231c     D0 E4 85 F1 | 	sub	objptr, ##43216
02320                 | LR__0113
02320                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02320     7A 00 00 FF 
02324     A4 E5 05 F1 | 	add	objptr, ##62884
02328     F2 28 02 FB | 	rdlong	local06, objptr
0232c     01 28 06 F1 | 	add	local06, #1
02330     03 28 66 F0 | 	shl	local06, #3
02334     26 00 00 FF 
02338     D4 E4 85 F1 | 	sub	objptr, ##19668
0233c     F2 28 02 F1 | 	add	local06, objptr
02340     14 13 02 FB | 	rdlong	arg01, local06
02344     43 01 00 FF 
02348     A3 15 06 F6 | 	mov	arg02, ##@LR__4354
0234c     54 00 00 FF 
02350     D0 E4 85 F1 | 	sub	objptr, ##43216
02354     6C 6E B1 FD | 	call	#__system___string_cmp
02358     00 FA 0D F2 | 	cmp	result1, #0 wz
0235c     34 00 90 5D |  if_ne	jmp	#LR__0114
02360     7A 00 00 FF 
02364     A4 E5 05 F1 | 	add	objptr, ##62884
02368     F2 26 02 FB | 	rdlong	local05, objptr
0236c     01 26 06 F1 | 	add	local05, #1
02370     03 26 66 F0 | 	shl	local05, #3
02374     26 00 00 FF 
02378     D4 E4 85 F1 | 	sub	objptr, ##19668
0237c     F2 26 02 F1 | 	add	local05, objptr
02380     43 01 00 FF 
02384     AC 33 06 F6 | 	mov	local11, ##@LR__4355
02388     13 33 62 FC | 	wrlong	local11, local05
0238c     54 00 00 FF 
02390     D0 E4 85 F1 | 	sub	objptr, ##43216
02394                 | LR__0114
02394                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02394     7A 00 00 FF 
02398     A4 E5 05 F1 | 	add	objptr, ##62884
0239c     F2 28 02 FB | 	rdlong	local06, objptr
023a0     01 28 06 F1 | 	add	local06, #1
023a4     03 28 66 F0 | 	shl	local06, #3
023a8     26 00 00 FF 
023ac     D4 E4 85 F1 | 	sub	objptr, ##19668
023b0     F2 28 02 F1 | 	add	local06, objptr
023b4     14 13 02 FB | 	rdlong	arg01, local06
023b8     43 01 00 FF 
023bc     AE 15 06 F6 | 	mov	arg02, ##@LR__4356
023c0     54 00 00 FF 
023c4     D0 E4 85 F1 | 	sub	objptr, ##43216
023c8     F8 6D B1 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     34 00 90 5D |  if_ne	jmp	#LR__0115
023d4     7A 00 00 FF 
023d8     A4 E5 05 F1 | 	add	objptr, ##62884
023dc     F2 26 02 FB | 	rdlong	local05, objptr
023e0     01 26 06 F1 | 	add	local05, #1
023e4     03 26 66 F0 | 	shl	local05, #3
023e8     26 00 00 FF 
023ec     D4 E4 85 F1 | 	sub	objptr, ##19668
023f0     F2 26 02 F1 | 	add	local05, objptr
023f4     43 01 00 FF 
023f8     B7 33 06 F6 | 	mov	local11, ##@LR__4357
023fc     13 33 62 FC | 	wrlong	local11, local05
02400     54 00 00 FF 
02404     D0 E4 85 F1 | 	sub	objptr, ##43216
02408                 | LR__0115
02408                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02408     7A 00 00 FF 
0240c     A4 E5 05 F1 | 	add	objptr, ##62884
02410     F2 28 02 FB | 	rdlong	local06, objptr
02414     01 28 06 F1 | 	add	local06, #1
02418     03 28 66 F0 | 	shl	local06, #3
0241c     26 00 00 FF 
02420     D4 E4 85 F1 | 	sub	objptr, ##19668
02424     F2 28 02 F1 | 	add	local06, objptr
02428     14 13 02 FB | 	rdlong	arg01, local06
0242c     43 01 00 FF 
02430     B9 15 06 F6 | 	mov	arg02, ##@LR__4358
02434     54 00 00 FF 
02438     D0 E4 85 F1 | 	sub	objptr, ##43216
0243c     84 6D B1 FD | 	call	#__system___string_cmp
02440     00 FA 0D F2 | 	cmp	result1, #0 wz
02444     34 00 90 5D |  if_ne	jmp	#LR__0116
02448     7A 00 00 FF 
0244c     A4 E5 05 F1 | 	add	objptr, ##62884
02450     F2 26 02 FB | 	rdlong	local05, objptr
02454     01 26 06 F1 | 	add	local05, #1
02458     03 26 66 F0 | 	shl	local05, #3
0245c     26 00 00 FF 
02460     D4 E4 85 F1 | 	sub	objptr, ##19668
02464     F2 26 02 F1 | 	add	local05, objptr
02468     43 01 00 FF 
0246c     C2 33 06 F6 | 	mov	local11, ##@LR__4359
02470     13 33 62 FC | 	wrlong	local11, local05
02474     54 00 00 FF 
02478     D0 E4 85 F1 | 	sub	objptr, ##43216
0247c                 | LR__0116
0247c                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
0247c     7A 00 00 FF 
02480     A4 E5 05 F1 | 	add	objptr, ##62884
02484     F2 28 02 FB | 	rdlong	local06, objptr
02488     01 28 06 F1 | 	add	local06, #1
0248c     03 28 66 F0 | 	shl	local06, #3
02490     26 00 00 FF 
02494     D4 E4 85 F1 | 	sub	objptr, ##19668
02498     F2 32 02 F6 | 	mov	local11, objptr
0249c     F2 28 02 F1 | 	add	local06, objptr
024a0     14 13 02 FB | 	rdlong	arg01, local06
024a4     43 01 00 FF 
024a8     C4 15 06 F6 | 	mov	arg02, ##@LR__4360
024ac     54 00 00 FF 
024b0     D0 E4 85 F1 | 	sub	objptr, ##43216
024b4     0C 6D B1 FD | 	call	#__system___string_cmp
024b8     00 FA 0D F2 | 	cmp	result1, #0 wz
024bc     34 00 90 5D |  if_ne	jmp	#LR__0117
024c0     7A 00 00 FF 
024c4     A4 E5 05 F1 | 	add	objptr, ##62884
024c8     F2 26 02 FB | 	rdlong	local05, objptr
024cc     01 26 06 F1 | 	add	local05, #1
024d0     03 26 66 F0 | 	shl	local05, #3
024d4     26 00 00 FF 
024d8     D4 E4 85 F1 | 	sub	objptr, ##19668
024dc     F2 26 02 F1 | 	add	local05, objptr
024e0     43 01 00 FF 
024e4     C7 33 06 F6 | 	mov	local11, ##@LR__4361
024e8     13 33 62 FC | 	wrlong	local11, local05
024ec     54 00 00 FF 
024f0     D0 E4 85 F1 | 	sub	objptr, ##43216
024f4                 | LR__0117
024f4                 | LR__0118
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' ' 2a find part types 
024f4                 | ' 
024f4                 | ' for i=0 to k-1
024f4     00 22 06 F6 | 	mov	local03, #0
024f8     1D 61 02 F6 | 	mov	local34, local15
024fc                 | LR__0119
024fc     30 23 52 F2 | 	cmps	local03, local34 wc
02500     74 05 90 3D |  if_ae	jmp	#LR__0128
02504     11 2F 02 F6 | 	mov	local09, local03
02508     03 2E 66 F0 | 	shl	local09, #3
0250c     54 00 00 FF 
02510     D0 E4 05 F1 | 	add	objptr, ##43216
02514     F2 2E 02 F1 | 	add	local09, objptr
02518     11 35 02 F6 | 	mov	local12, local03
0251c     03 34 66 F0 | 	shl	local12, #3
02520     F2 4A 02 F6 | 	mov	local23, objptr
02524     F2 34 02 F1 | 	add	local12, objptr
02528     1A 13 02 FB | 	rdlong	arg01, local12
0252c     54 00 00 FF 
02530     D0 E4 85 F1 | 	sub	objptr, ##43216
02534     18 10 B0 FD | 	call	#_isseparator
02538     FD FA E1 F8 | 	getbyte	result1, result1, #0
0253c     04 2E 06 F1 | 	add	local09, #4
02540     17 FB 61 FC | 	wrlong	result1, local09
02544                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02544     11 2F 02 F6 | 	mov	local09, local03
02548     03 2E 66 F0 | 	shl	local09, #3
0254c     54 00 00 FF 
02550     D0 E4 05 F1 | 	add	objptr, ##43216
02554     F2 2E 02 F1 | 	add	local09, objptr
02558     04 2E 06 F1 | 	add	local09, #4
0255c     17 33 02 FB | 	rdlong	local11, local09
02560     01 32 56 F2 | 	cmps	local11, #1 wc
02564     54 00 00 FF 
02568     D0 E4 85 F1 | 	sub	objptr, ##43216
0256c     00 05 90 3D |  if_ae	jmp	#LR__0127
02570     11 2F 02 F6 | 	mov	local09, local03
02574     03 2E 66 F0 | 	shl	local09, #3
02578     54 00 00 FF 
0257c     D0 E4 05 F1 | 	add	objptr, ##43216
02580     F2 2E 02 F1 | 	add	local09, objptr
02584     11 35 02 F6 | 	mov	local12, local03
02588     03 34 66 F0 | 	shl	local12, #3
0258c     F2 4A 02 F6 | 	mov	local23, objptr
02590     F2 34 02 F1 | 	add	local12, objptr
02594     1A 13 02 FB | 	rdlong	arg01, local12
02598     54 00 00 FF 
0259c     D0 E4 85 F1 | 	sub	objptr, ##43216
025a0     CC 0C B0 FD | 	call	#_isoperator
025a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
025a8     04 2E 06 F1 | 	add	local09, #4
025ac     17 FB 61 FC | 	wrlong	result1, local09
025b0                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
025b0     11 2F 02 F6 | 	mov	local09, local03
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     54 00 00 FF 
025bc     D0 E4 05 F1 | 	add	objptr, ##43216
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     04 2E 06 F1 | 	add	local09, #4
025c8     17 33 02 FB | 	rdlong	local11, local09
025cc     01 32 56 F2 | 	cmps	local11, #1 wc
025d0     54 00 00 FF 
025d4     D0 E4 85 F1 | 	sub	objptr, ##43216
025d8     94 04 90 3D |  if_ae	jmp	#LR__0127
025dc     11 2F 02 F6 | 	mov	local09, local03
025e0     03 2E 66 F0 | 	shl	local09, #3
025e4     54 00 00 FF 
025e8     D0 E4 05 F1 | 	add	objptr, ##43216
025ec     F2 2E 02 F1 | 	add	local09, objptr
025f0     11 35 02 F6 | 	mov	local12, local03
025f4     03 34 66 F0 | 	shl	local12, #3
025f8     F2 4A 02 F6 | 	mov	local23, objptr
025fc     F2 34 02 F1 | 	add	local12, objptr
02600     1A 13 02 FB | 	rdlong	arg01, local12
02604     54 00 00 FF 
02608     D0 E4 85 F1 | 	sub	objptr, ##43216
0260c                 | ' 
0260c                 | ' select case s
0260c     44 01 00 FF 
02610     7D 14 06 F6 | 	mov	arg02, ##@LR__4414
02614     AC 6B B1 FD | 	call	#__system___string_cmp
02618     00 FA 0D F2 | 	cmp	result1, #0 wz
0261c     1B FA 05 A6 |  if_e	mov	result1, #27
02620     00 FA 05 56 |  if_ne	mov	result1, #0
02624     FD FA E1 F8 | 	getbyte	result1, result1, #0
02628     04 2E 06 F1 | 	add	local09, #4
0262c     17 FB 61 FC | 	wrlong	result1, local09
02630                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02630     11 2F 02 F6 | 	mov	local09, local03
02634     03 2E 66 F0 | 	shl	local09, #3
02638     54 00 00 FF 
0263c     D0 E4 05 F1 | 	add	objptr, ##43216
02640     F2 2E 02 F1 | 	add	local09, objptr
02644     04 2E 06 F1 | 	add	local09, #4
02648     17 33 02 FB | 	rdlong	local11, local09
0264c     01 32 56 F2 | 	cmps	local11, #1 wc
02650     54 00 00 FF 
02654     D0 E4 85 F1 | 	sub	objptr, ##43216
02658     14 04 90 3D |  if_ae	jmp	#LR__0127
0265c     11 2F 02 F6 | 	mov	local09, local03
02660     03 2E 66 F0 | 	shl	local09, #3
02664     54 00 00 FF 
02668     D0 E4 05 F1 | 	add	objptr, ##43216
0266c     F2 2E 02 F1 | 	add	local09, objptr
02670     11 35 02 F6 | 	mov	local12, local03
02674     03 34 66 F0 | 	shl	local12, #3
02678     F2 4A 02 F6 | 	mov	local23, objptr
0267c     F2 34 02 F1 | 	add	local12, objptr
02680     1A 13 02 FB | 	rdlong	arg01, local12
02684     54 00 00 FF 
02688     D0 E4 85 F1 | 	sub	objptr, ##43216
0268c     C0 10 B0 FD | 	call	#_iscommand
02690     FD FA E1 F8 | 	getbyte	result1, result1, #0
02694     04 2E 06 F1 | 	add	local09, #4
02698     17 FB 61 FC | 	wrlong	result1, local09
0269c                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
0269c     11 2F 02 F6 | 	mov	local09, local03
026a0     03 2E 66 F0 | 	shl	local09, #3
026a4     54 00 00 FF 
026a8     D0 E4 05 F1 | 	add	objptr, ##43216
026ac     F2 2E 02 F1 | 	add	local09, objptr
026b0     04 2E 06 F1 | 	add	local09, #4
026b4     17 33 02 FB | 	rdlong	local11, local09
026b8     01 32 56 F2 | 	cmps	local11, #1 wc
026bc     54 00 00 FF 
026c0     D0 E4 85 F1 | 	sub	objptr, ##43216
026c4     A8 03 90 3D |  if_ae	jmp	#LR__0127
026c8     11 2F 02 F6 | 	mov	local09, local03
026cc     03 2E 66 F0 | 	shl	local09, #3
026d0     54 00 00 FF 
026d4     D0 E4 05 F1 | 	add	objptr, ##43216
026d8     F2 2E 02 F1 | 	add	local09, objptr
026dc     11 31 02 F6 | 	mov	local10, local03
026e0     18 37 02 F6 | 	mov	local13, local10
026e4     1B 35 02 F6 | 	mov	local12, local13
026e8     03 34 66 F0 | 	shl	local12, #3
026ec     F2 4A 02 F6 | 	mov	local23, objptr
026f0     F2 34 02 F1 | 	add	local12, objptr
026f4     1A 13 02 FB | 	rdlong	arg01, local12
026f8     54 00 00 FF 
026fc     D0 E4 85 F1 | 	sub	objptr, ##43216
02700     6C 1A B0 FD | 	call	#_isfunction
02704     FD FA E1 F8 | 	getbyte	result1, result1, #0
02708     04 2E 06 F1 | 	add	local09, #4
0270c     17 FB 61 FC | 	wrlong	result1, local09
02710                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
02710     11 2F 02 F6 | 	mov	local09, local03
02714     03 2E 66 F0 | 	shl	local09, #3
02718     54 00 00 FF 
0271c     D0 E4 05 F1 | 	add	objptr, ##43216
02720     F2 2E 02 F1 | 	add	local09, objptr
02724     04 2E 06 F1 | 	add	local09, #4
02728     17 33 02 FB | 	rdlong	local11, local09
0272c     01 32 56 F2 | 	cmps	local11, #1 wc
02730     54 00 00 FF 
02734     D0 E4 85 F1 | 	sub	objptr, ##43216
02738     34 03 90 3D |  if_ae	jmp	#LR__0127
0273c     11 27 02 F6 | 	mov	local05, local03
02740     03 26 66 F0 | 	shl	local05, #3
02744     54 00 00 FF 
02748     D0 E4 05 F1 | 	add	objptr, ##43216
0274c     F2 26 02 F1 | 	add	local05, objptr
02750     13 13 02 FB | 	rdlong	arg01, local05
02754     54 00 00 FF 
02758     D0 E4 85 F1 | 	sub	objptr, ##43216
0275c     24 1F B0 FD | 	call	#_isnum
02760     FD 1E 02 F6 | 	mov	local01, result1
02764     7A 00 00 FF 
02768     B0 E5 05 F1 | 	add	objptr, ##62896
0276c     F2 1E 62 FC | 	wrlong	local01, objptr
02770     11 27 02 F6 | 	mov	local05, local03
02774     03 26 66 F0 | 	shl	local05, #3
02778     26 00 00 FF 
0277c     E0 E4 85 F1 | 	sub	objptr, ##19680
02780     F2 26 02 F1 | 	add	local05, objptr
02784     13 13 02 FB | 	rdlong	arg01, local05
02788     54 00 00 FF 
0278c     D0 E4 85 F1 | 	sub	objptr, ##43216
02790     C8 21 B0 FD | 	call	#_isint
02794     FD 1E 02 F6 | 	mov	local01, result1
02798     7A 00 00 FF 
0279c     B4 E5 05 F1 | 	add	objptr, ##62900
027a0     F2 1E 62 FC | 	wrlong	local01, objptr
027a4     11 27 02 F6 | 	mov	local05, local03
027a8     03 26 66 F0 | 	shl	local05, #3
027ac     26 00 00 FF 
027b0     E4 E4 85 F1 | 	sub	objptr, ##19684
027b4     F2 28 02 F6 | 	mov	local06, objptr
027b8     F2 26 02 F1 | 	add	local05, objptr
027bc     13 13 02 FB | 	rdlong	arg01, local05
027c0     54 00 00 FF 
027c4     D0 E4 85 F1 | 	sub	objptr, ##43216
027c8     E8 22 B0 FD | 	call	#_isdec
027cc     7A 00 00 FF 
027d0     B8 E5 05 F1 | 	add	objptr, ##62904
027d4     F2 FA 61 FC | 	wrlong	result1, objptr
027d8                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
027d8     08 E4 85 F1 | 	sub	objptr, #8
027dc     F2 1E 0A FB | 	rdlong	local01, objptr wz
027e0     7A 00 00 FF 
027e4     B0 E5 85 F1 | 	sub	objptr, ##62896
027e8     60 00 90 AD |  if_e	jmp	#LR__0120
027ec     7A 00 00 FF 
027f0     B4 E5 05 F1 | 	add	objptr, ##62900
027f4     F2 2E 0A FB | 	rdlong	local09, objptr wz
027f8     7A 00 00 FF 
027fc     B4 E5 85 F1 | 	sub	objptr, ##62900
02800     48 00 90 AD |  if_e	jmp	#LR__0120
02804     7A 00 00 FF 
02808     B8 E5 05 F1 | 	add	objptr, ##62904
0280c     F2 32 0A FB | 	rdlong	local11, objptr wz
02810     7A 00 00 FF 
02814     B8 E5 85 F1 | 	sub	objptr, ##62904
02818     30 00 90 AD |  if_e	jmp	#LR__0120
0281c     11 25 02 F6 | 	mov	local04, local03
02820     12 2F 02 F6 | 	mov	local09, local04
02824     03 2E 66 F0 | 	shl	local09, #3
02828     54 00 00 FF 
0282c     D0 E4 05 F1 | 	add	objptr, ##43216
02830     F2 2E 02 F1 | 	add	local09, objptr
02834     04 2E 06 F1 | 	add	local09, #4
02838     01 00 80 FF 
0283c     17 01 68 FC | 	wrlong	##512, local09
02840     54 00 00 FF 
02844     D0 E4 85 F1 | 	sub	objptr, ##43216
02848     24 02 90 FD | 	jmp	#LR__0127
0284c                 | LR__0120
0284c                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
0284c     7A 00 00 FF 
02850     B0 E5 05 F1 | 	add	objptr, ##62896
02854     F2 1E 0A FB | 	rdlong	local01, objptr wz
02858     7A 00 00 FF 
0285c     B0 E5 85 F1 | 	sub	objptr, ##62896
02860     64 00 90 AD |  if_e	jmp	#LR__0121
02864     7A 00 00 FF 
02868     B4 E5 05 F1 | 	add	objptr, ##62900
0286c     F2 2E 0A FB | 	rdlong	local09, objptr wz
02870     7A 00 00 FF 
02874     B4 E5 85 F1 | 	sub	objptr, ##62900
02878     7A 00 00 5F 
0287c     B8 E5 05 51 |  if_ne	add	objptr, ##62904
02880     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02884     7A 00 00 5F 
02888     B8 E5 85 51 |  if_ne	sub	objptr, ##62904
0288c     19 29 22 56 |  if_ne	not	local06, local11
02890     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02894     30 00 90 AD |  if_e	jmp	#LR__0121
02898     11 25 02 F6 | 	mov	local04, local03
0289c     12 2F 02 F6 | 	mov	local09, local04
028a0     03 2E 66 F0 | 	shl	local09, #3
028a4     54 00 00 FF 
028a8     D0 E4 05 F1 | 	add	objptr, ##43216
028ac     F2 2E 02 F1 | 	add	local09, objptr
028b0     04 2E 06 F1 | 	add	local09, #4
028b4     01 00 80 FF 
028b8     17 03 68 FC | 	wrlong	##513, local09
028bc     54 00 00 FF 
028c0     D0 E4 85 F1 | 	sub	objptr, ##43216
028c4     A8 01 90 FD | 	jmp	#LR__0127
028c8                 | LR__0121
028c8                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
028c8     7A 00 00 FF 
028cc     B0 E5 05 F1 | 	add	objptr, ##62896
028d0     F2 1E 0A FB | 	rdlong	local01, objptr wz
028d4     7A 00 00 FF 
028d8     B0 E5 85 F1 | 	sub	objptr, ##62896
028dc     7A 00 00 5F 
028e0     B4 E5 05 51 |  if_ne	add	objptr, ##62900
028e4     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
028e8     7A 00 00 5F 
028ec     B4 E5 85 51 |  if_ne	sub	objptr, ##62900
028f0     17 2F 22 56 |  if_ne	not	local09, local09
028f4     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
028f8     7A 00 00 5F 
028fc     B8 E5 05 51 |  if_ne	add	objptr, ##62904
02900     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02904     7A 00 00 5F 
02908     B8 E5 85 51 |  if_ne	sub	objptr, ##62904
0290c     19 29 22 56 |  if_ne	not	local06, local11
02910     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02914     30 00 90 AD |  if_e	jmp	#LR__0122
02918     11 25 02 F6 | 	mov	local04, local03
0291c     12 2F 02 F6 | 	mov	local09, local04
02920     03 2E 66 F0 | 	shl	local09, #3
02924     54 00 00 FF 
02928     D0 E4 05 F1 | 	add	objptr, ##43216
0292c     F2 2E 02 F1 | 	add	local09, objptr
02930     04 2E 06 F1 | 	add	local09, #4
02934     01 00 80 FF 
02938     17 05 68 FC | 	wrlong	##514, local09
0293c     54 00 00 FF 
02940     D0 E4 85 F1 | 	sub	objptr, ##43216
02944     28 01 90 FD | 	jmp	#LR__0127
02948                 | LR__0122
02948                 | ' 
02948                 | ' if isstring(lparts(i).part$) then 
02948     11 27 02 F6 | 	mov	local05, local03
0294c     03 26 66 F0 | 	shl	local05, #3
02950     54 00 00 FF 
02954     D0 E4 05 F1 | 	add	objptr, ##43216
02958     F2 26 02 F1 | 	add	local05, objptr
0295c     13 13 02 FB | 	rdlong	arg01, local05
02960     54 00 00 FF 
02964     D0 E4 85 F1 | 	sub	objptr, ##43216
02968     08 22 B0 FD | 	call	#_isstring
0296c     00 FA 0D F2 | 	cmp	result1, #0 wz
02970     A0 00 90 AD |  if_e	jmp	#LR__0125
02974     11 2F 02 F6 | 	mov	local09, local03
02978     03 2E 66 F0 | 	shl	local09, #3
0297c     54 00 00 FF 
02980     D0 E4 05 F1 | 	add	objptr, ##43216
02984     F2 2E 02 F1 | 	add	local09, objptr
02988     04 2E 06 F1 | 	add	local09, #4
0298c     01 00 80 FF 
02990     17 07 68 FC | 	wrlong	##515, local09
02994     11 25 02 F6 | 	mov	local04, local03
02998     12 2F 02 F6 | 	mov	local09, local04
0299c     03 2E 66 F0 | 	shl	local09, #3
029a0     F2 2E 02 F1 | 	add	local09, objptr
029a4     11 37 02 F6 | 	mov	local13, local03
029a8     03 36 66 F0 | 	shl	local13, #3
029ac     F2 36 02 F1 | 	add	local13, objptr
029b0     1B 29 02 FB | 	rdlong	local06, local13
029b4     02 32 06 F6 | 	mov	local11, #2
029b8     11 4B 02 F6 | 	mov	local23, local03
029bc     25 43 02 F6 | 	mov	local19, local23
029c0     21 45 02 F6 | 	mov	local20, local19
029c4     03 44 66 F0 | 	shl	local20, #3
029c8     F2 46 02 F6 | 	mov	local21, objptr
029cc     F2 44 02 F1 | 	add	local20, objptr
029d0     22 13 02 FB | 	rdlong	arg01, local20
029d4     54 00 00 FF 
029d8     D0 E4 85 F1 | 	sub	objptr, ##43216
029dc     09 2B 02 F6 | 	mov	local07, arg01
029e0     97 06 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
029e4                 | LR__0123
029e4     15 FB C9 FA | 	rdbyte	result1, local07 wz
029e8     01 2A 06 51 |  if_ne	add	local07, #1
029ec     F4 FF 9F 5D |  if_ne	jmp	#LR__0123
029f0                 | LR__0124
029f0     09 2B 82 F1 | 	sub	local07, arg01
029f4     15 35 02 F6 | 	mov	local12, local07
029f8     1A 17 02 F6 | 	mov	arg03, local12
029fc     02 16 86 F1 | 	sub	arg03, #2
02a00     14 13 02 F6 | 	mov	arg01, local06
02a04     19 15 02 F6 | 	mov	arg02, local11
02a08     B8 88 B1 FD | 	call	#__system__Mid_S
02a0c     17 FB 61 FC | 	wrlong	result1, local09
02a10     5C 00 90 FD | 	jmp	#LR__0127
02a14                 | LR__0125
02a14                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02a14     11 25 02 F6 | 	mov	local04, local03
02a18     12 27 02 F6 | 	mov	local05, local04
02a1c     03 26 66 F0 | 	shl	local05, #3
02a20     54 00 00 FF 
02a24     D0 E4 05 F1 | 	add	objptr, ##43216
02a28     F2 26 02 F1 | 	add	local05, objptr
02a2c     13 13 02 FB | 	rdlong	arg01, local05
02a30     54 00 00 FF 
02a34     D0 E4 85 F1 | 	sub	objptr, ##43216
02a38     D4 19 B0 FD | 	call	#_isname
02a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02a40     2C 00 90 AD |  if_e	jmp	#LR__0126
02a44     11 25 02 F6 | 	mov	local04, local03
02a48     12 2F 02 F6 | 	mov	local09, local04
02a4c     03 2E 66 F0 | 	shl	local09, #3
02a50     54 00 00 FF 
02a54     D0 E4 05 F1 | 	add	objptr, ##43216
02a58     F2 2E 02 F1 | 	add	local09, objptr
02a5c     04 2E 06 F1 | 	add	local09, #4
02a60     01 00 80 FF 
02a64     17 09 68 FC | 	wrlong	##516, local09
02a68     54 00 00 FF 
02a6c     D0 E4 85 F1 | 	sub	objptr, ##43216
02a70                 | LR__0126
02a70                 | LR__0127
02a70     01 22 06 F1 | 	add	local03, #1
02a74     84 FA 9F FD | 	jmp	#LR__0119
02a78                 | LR__0128
02a78     1D 2F 02 F6 | 	mov	local09, local15
02a7c     03 2E 66 F0 | 	shl	local09, #3
02a80     54 00 00 FF 
02a84     D0 E4 05 F1 | 	add	objptr, ##43216
02a88     F2 2E 02 F1 | 	add	local09, objptr
02a8c     04 2E 06 F1 | 	add	local09, #4
02a90     17 FD 6B FC | 	wrlong	#510, local09
02a94     1D 2F 02 F6 | 	mov	local09, local15
02a98     03 2E 66 F0 | 	shl	local09, #3
02a9c     F2 26 02 F6 | 	mov	local05, objptr
02aa0     F2 2E 02 F1 | 	add	local09, objptr
02aa4     43 01 00 FF 
02aa8     C9 29 06 F6 | 	mov	local06, ##@LR__4362
02aac     17 29 62 FC | 	wrlong	local06, local09
02ab0     10 00 00 FF 
02ab4     54 E4 05 F1 | 	add	objptr, ##8276
02ab8     F2 3A 62 FC | 	wrlong	local15, objptr
02abc                 | ' 
02abc                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02abc                 | ' 
02abc                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02abc                 | '  
02abc                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02abc     16 00 00 FF 
02ac0     84 E4 05 F1 | 	add	objptr, ##11396
02ac4     F2 12 02 FB | 	rdlong	arg01, objptr
02ac8     7A 00 00 FF 
02acc     A8 E5 85 F1 | 	sub	objptr, ##62888
02ad0     43 01 00 FF 
02ad4     CA 2F 06 F6 | 	mov	local09, ##@LR__4363
02ad8     17 15 02 F6 | 	mov	arg02, local09
02adc     E4 66 B1 FD | 	call	#__system___string_cmp
02ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ae4     EC 00 90 AD |  if_e	jmp	#LR__0129
02ae8     7A 00 00 FF 
02aec     A8 E5 05 F1 | 	add	objptr, ##62888
02af0     F2 12 02 FB | 	rdlong	arg01, objptr
02af4     7A 00 00 FF 
02af8     A8 E5 85 F1 | 	sub	objptr, ##62888
02afc     43 01 00 FF 
02b00     CF 27 06 F6 | 	mov	local05, ##@LR__4364
02b04     13 2F 02 F6 | 	mov	local09, local05
02b08     17 15 02 F6 | 	mov	arg02, local09
02b0c     B4 66 B1 FD | 	call	#__system___string_cmp
02b10     00 FA 0D F2 | 	cmp	result1, #0 wz
02b14     BC 00 90 AD |  if_e	jmp	#LR__0129
02b18     7A 00 00 FF 
02b1c     A8 E5 05 F1 | 	add	objptr, ##62888
02b20     F2 12 02 FB | 	rdlong	arg01, objptr
02b24     7A 00 00 FF 
02b28     A8 E5 85 F1 | 	sub	objptr, ##62888
02b2c     43 01 00 FF 
02b30     D4 29 06 F6 | 	mov	local06, ##@LR__4365
02b34     14 27 02 F6 | 	mov	local05, local06
02b38     13 15 02 F6 | 	mov	arg02, local05
02b3c     84 66 B1 FD | 	call	#__system___string_cmp
02b40     FD 2E 0A F6 | 	mov	local09, result1 wz
02b44     8C 00 90 AD |  if_e	jmp	#LR__0129
02b48     7A 00 00 FF 
02b4c     A8 E5 05 F1 | 	add	objptr, ##62888
02b50     F2 12 02 FB | 	rdlong	arg01, objptr
02b54     7A 00 00 FF 
02b58     A8 E5 85 F1 | 	sub	objptr, ##62888
02b5c     43 01 00 FF 
02b60     D9 33 06 F6 | 	mov	local11, ##@LR__4366
02b64     19 29 02 F6 | 	mov	local06, local11
02b68     14 15 02 F6 | 	mov	arg02, local06
02b6c     54 66 B1 FD | 	call	#__system___string_cmp
02b70     FD 26 0A F6 | 	mov	local05, result1 wz
02b74     5C 00 90 AD |  if_e	jmp	#LR__0129
02b78     7A 00 00 FF 
02b7c     A8 E5 05 F1 | 	add	objptr, ##62888
02b80     F2 12 02 FB | 	rdlong	arg01, objptr
02b84     7A 00 00 FF 
02b88     A8 E5 85 F1 | 	sub	objptr, ##62888
02b8c     43 01 00 FF 
02b90     DD 33 06 F6 | 	mov	local11, ##@LR__4367
02b94     19 15 02 F6 | 	mov	arg02, local11
02b98     28 66 B1 FD | 	call	#__system___string_cmp
02b9c     FD 28 0A F6 | 	mov	local06, result1 wz
02ba0     30 00 90 AD |  if_e	jmp	#LR__0129
02ba4     7A 00 00 FF 
02ba8     A8 E5 05 F1 | 	add	objptr, ##62888
02bac     F2 12 02 FB | 	rdlong	arg01, objptr
02bb0     7A 00 00 FF 
02bb4     A8 E5 85 F1 | 	sub	objptr, ##62888
02bb8     43 01 00 FF 
02bbc     E0 37 06 F6 | 	mov	local13, ##@LR__4368
02bc0     1B 31 02 F6 | 	mov	local10, local13
02bc4     18 15 02 F6 | 	mov	arg02, local10
02bc8     F8 65 B1 FD | 	call	#__system___string_cmp
02bcc     FD 32 0A F6 | 	mov	local11, result1 wz
02bd0     9C 00 90 5D |  if_ne	jmp	#LR__0130
02bd4                 | LR__0129
02bd4     7A 00 00 FF 
02bd8     A4 E5 05 F1 | 	add	objptr, ##62884
02bdc     F2 36 02 FB | 	rdlong	local13, objptr
02be0     1B 31 02 F6 | 	mov	local10, local13
02be4     01 30 06 F1 | 	add	local10, #1
02be8     18 35 02 F6 | 	mov	local12, local10
02bec     1A 4B 02 F6 | 	mov	local23, local12
02bf0     03 4A 66 F0 | 	shl	local23, #3
02bf4     26 00 00 FF 
02bf8     D4 E4 85 F1 | 	sub	objptr, ##19668
02bfc     F2 42 02 F6 | 	mov	local19, objptr
02c00     F2 4A 02 F1 | 	add	local23, objptr
02c04     04 4A 06 F1 | 	add	local23, #4
02c08     25 47 02 FB | 	rdlong	local21, local23
02c0c     04 4A 86 F1 | 	sub	local23, #4
02c10     23 45 02 F6 | 	mov	local20, local21
02c14     01 00 00 FF 
02c18     04 44 0E F2 | 	cmp	local20, ##516 wz
02c1c     54 00 00 FF 
02c20     D0 E4 85 F1 | 	sub	objptr, ##43216
02c24     48 00 90 5D |  if_ne	jmp	#LR__0130
02c28     7A 00 00 FF 
02c2c     A4 E5 05 F1 | 	add	objptr, ##62884
02c30     F2 2E 02 FB | 	rdlong	local09, objptr
02c34     01 2E 06 F1 | 	add	local09, #1
02c38     17 27 02 F6 | 	mov	local05, local09
02c3c     03 26 66 F0 | 	shl	local05, #3
02c40     26 00 00 FF 
02c44     D4 E4 85 F1 | 	sub	objptr, ##19668
02c48     F2 28 02 F6 | 	mov	local06, objptr
02c4c     F2 26 02 F1 | 	add	local05, objptr
02c50     01 00 00 FF 
02c54     03 32 06 F6 | 	mov	local11, ##515
02c58     04 26 06 F1 | 	add	local05, #4
02c5c     01 00 80 FF 
02c60     13 07 68 FC | 	wrlong	##515, local05
02c64     04 26 86 F1 | 	sub	local05, #4
02c68     54 00 00 FF 
02c6c     D0 E4 85 F1 | 	sub	objptr, ##43216
02c70                 | LR__0130
02c70                 | ' 
02c70                 | ' ' abbreviated command has to be at the position addptr
02c70                 | ' 
02c70                 | ' 
02c70                 | ' 
02c70                 | ' '2b determine a type of the line
02c70                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02c70     54 00 00 FF 
02c74     D0 E4 05 F1 | 	add	objptr, ##43216
02c78     F2 12 02 FB | 	rdlong	arg01, objptr
02c7c     54 00 00 FF 
02c80     D0 E4 85 F1 | 	sub	objptr, ##43216
02c84     2C 1E B0 FD | 	call	#_isdec
02c88     00 FA 0D F2 | 	cmp	result1, #0 wz
02c8c     30 00 90 AD |  if_e	jmp	#LR__0131
02c90     54 00 00 FF 
02c94     D0 E4 05 F1 | 	add	objptr, ##43216
02c98     F2 12 02 FB | 	rdlong	arg01, objptr
02c9c     54 00 00 FF 
02ca0     D0 E4 85 F1 | 	sub	objptr, ##43216
02ca4     00 14 06 F6 | 	mov	arg02, #0
02ca8     54 96 B1 FD | 	call	#__system____builtin_atoi
02cac     7A 00 00 FF 
02cb0     54 E5 05 F1 | 	add	objptr, ##62804
02cb4     F2 FA 61 FC | 	wrlong	result1, objptr
02cb8     7A 00 00 FF 
02cbc     54 E5 85 F1 | 	sub	objptr, ##62804
02cc0                 | LR__0131
02cc0                 | ' 
02cc0                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02cc0     7A 00 00 FF 
02cc4     54 E5 05 F1 | 	add	objptr, ##62804
02cc8     F2 1E 02 FB | 	rdlong	local01, objptr
02ccc     7A 00 00 FF 
02cd0     54 E5 85 F1 | 	sub	objptr, ##62804
02cd4     01 1E 16 F2 | 	cmp	local01, #1 wc
02cd8     3C 00 90 CD |  if_b	jmp	#LR__0132
02cdc     01 3A 0E F2 | 	cmp	local15, #1 wz
02ce0     56 00 00 AF 
02ce4     E8 E4 05 A1 |  if_e	add	objptr, ##44264
02ce8     F2 26 02 AB |  if_e	rdlong	local05, objptr
02cec     56 00 00 AF 
02cf0     E8 E4 85 A1 |  if_e	sub	objptr, ##44264
02cf4     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02cf8     1C 00 90 5D |  if_ne	jmp	#LR__0132
02cfc     7A 00 00 FF 
02d00     54 E5 05 F1 | 	add	objptr, ##62804
02d04     F2 12 02 FB | 	rdlong	arg01, objptr
02d08     7A 00 00 FF 
02d0c     54 E5 85 F1 | 	sub	objptr, ##62804
02d10     C4 1E B0 FD | 	call	#_deleteline
02d14     4C 05 90 FD | 	jmp	#LR__0149
02d18                 | LR__0132
02d18                 | ' 
02d18                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02d18     7A 00 00 FF 
02d1c     54 E5 05 F1 | 	add	objptr, ##62804
02d20     F2 1E 02 FB | 	rdlong	local01, objptr
02d24     7A 00 00 FF 
02d28     54 E5 85 F1 | 	sub	objptr, ##62804
02d2c     01 1E 16 F2 | 	cmp	local01, #1 wc
02d30     EC 00 90 CD |  if_b	jmp	#LR__0135
02d34     56 00 00 FF 
02d38     E8 E4 05 F1 | 	add	objptr, ##44264
02d3c     F2 26 02 FB | 	rdlong	local05, objptr
02d40     56 00 00 FF 
02d44     E8 E4 85 F1 | 	sub	objptr, ##44264
02d48     13 2F 0A F6 | 	mov	local09, local05 wz
02d4c     20 00 90 AD |  if_e	jmp	#LR__0133
02d50     56 00 00 FF 
02d54     E8 E4 05 F1 | 	add	objptr, ##44264
02d58     F2 32 02 FB | 	rdlong	local11, objptr
02d5c     56 00 00 FF 
02d60     E8 E4 85 F1 | 	sub	objptr, ##44264
02d64     19 29 02 F6 | 	mov	local06, local11
02d68     03 28 0E F2 | 	cmp	local06, #3 wz
02d6c     B0 00 90 5D |  if_ne	jmp	#LR__0135
02d70                 | LR__0133
02d70     54 00 00 FF 
02d74     E4 E4 05 F1 | 	add	objptr, ##43236
02d78     F2 36 02 FB | 	rdlong	local13, objptr
02d7c     54 00 00 FF 
02d80     E4 E4 85 F1 | 	sub	objptr, ##43236
02d84     1B 31 02 F6 | 	mov	local10, local13
02d88     1B 30 0E F2 | 	cmp	local10, #27 wz
02d8c     90 00 90 AD |  if_e	jmp	#LR__0135
02d90     7A 00 00 FF 
02d94     54 E5 05 F1 | 	add	objptr, ##62804
02d98     F2 12 02 FB | 	rdlong	arg01, objptr
02d9c     24 00 00 FF 
02da0     6C E4 85 F1 | 	sub	objptr, ##18540
02da4     F2 16 02 FB | 	rdlong	arg03, objptr
02da8     56 00 00 FF 
02dac     E8 E4 85 F1 | 	sub	objptr, ##44264
02db0     00 14 06 F6 | 	mov	arg02, #0
02db4     7C 31 B0 FD | 	call	#_compile
02db8     FD 20 0A F6 | 	mov	local02, result1 wz
02dbc                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02dbc                 | '   if err<>0 then printerror(err): goto 104
02dbc     0C 00 90 AD |  if_e	jmp	#LR__0134
02dc0     10 13 02 F6 | 	mov	arg01, local02
02dc4     4C 2E B1 FD | 	call	#_printerror
02dc8     98 04 90 FD | 	jmp	#LR__0149
02dcc                 | LR__0134
02dcc                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02dcc     7A 00 00 FF 
02dd0     80 E5 05 F1 | 	add	objptr, ##62848
02dd4     F2 12 02 FB | 	rdlong	arg01, objptr
02dd8     7A 00 00 FF 
02ddc     80 E5 85 F1 | 	sub	objptr, ##62848
02de0     43 01 00 FF 
02de4     E4 15 06 F6 | 	mov	arg02, ##@LR__4369
02de8     D8 63 B1 FD | 	call	#__system___string_cmp
02dec     00 FA 0D F2 | 	cmp	result1, #0 wz
02df0     70 04 90 AD |  if_e	jmp	#LR__0149
02df4     7A 00 00 FF 
02df8     80 E5 05 F1 | 	add	objptr, ##62848
02dfc     F2 1E 02 FB | 	rdlong	local01, objptr
02e00     24 00 00 FF 
02e04     A0 E4 85 F1 | 	sub	objptr, ##18592
02e08     F2 1E 62 FC | 	wrlong	local01, objptr
02e0c     08 E4 05 F1 | 	add	objptr, #8
02e10     F2 08 68 FC | 	wrlong	#4, objptr
02e14     56 00 00 FF 
02e18     E8 E4 85 F1 | 	sub	objptr, ##44264
02e1c     50 DC 9F FD | 	jmp	#LR__0020
02e20                 | LR__0135
02e20                 | '       							
02e20                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02e20     7A 00 00 FF 
02e24     54 E5 05 F1 | 	add	objptr, ##62804
02e28     F2 1E 02 FB | 	rdlong	local01, objptr
02e2c     7A 00 00 FF 
02e30     54 E5 85 F1 | 	sub	objptr, ##62804
02e34     01 1E 16 F2 | 	cmp	local01, #1 wc
02e38     EC 00 90 CD |  if_b	jmp	#LR__0138
02e3c     56 00 00 FF 
02e40     E8 E4 05 F1 | 	add	objptr, ##44264
02e44     F2 26 02 FB | 	rdlong	local05, objptr
02e48     56 00 00 FF 
02e4c     E8 E4 85 F1 | 	sub	objptr, ##44264
02e50     01 26 0E F2 | 	cmp	local05, #1 wz
02e54     20 00 90 AD |  if_e	jmp	#LR__0136
02e58     56 00 00 FF 
02e5c     E8 E4 05 F1 | 	add	objptr, ##44264
02e60     F2 32 02 FB | 	rdlong	local11, objptr
02e64     56 00 00 FF 
02e68     E8 E4 85 F1 | 	sub	objptr, ##44264
02e6c     19 29 02 F6 | 	mov	local06, local11
02e70     02 28 0E F2 | 	cmp	local06, #2 wz
02e74     B0 00 90 5D |  if_ne	jmp	#LR__0138
02e78                 | LR__0136
02e78     54 00 00 FF 
02e7c     DC E4 05 F1 | 	add	objptr, ##43228
02e80     F2 36 02 FB | 	rdlong	local13, objptr
02e84     54 00 00 FF 
02e88     DC E4 85 F1 | 	sub	objptr, ##43228
02e8c     1B 31 02 F6 | 	mov	local10, local13
02e90     1B 30 0E F2 | 	cmp	local10, #27 wz
02e94     90 00 90 AD |  if_e	jmp	#LR__0138
02e98     7A 00 00 FF 
02e9c     54 E5 05 F1 | 	add	objptr, ##62804
02ea0     F2 12 02 FB | 	rdlong	arg01, objptr
02ea4     24 00 00 FF 
02ea8     6C E4 85 F1 | 	sub	objptr, ##18540
02eac     F2 16 02 FB | 	rdlong	arg03, objptr
02eb0     56 00 00 FF 
02eb4     E8 E4 85 F1 | 	sub	objptr, ##44264
02eb8     00 14 06 F6 | 	mov	arg02, #0
02ebc     74 30 B0 FD | 	call	#_compile
02ec0     FD 20 0A F6 | 	mov	local02, result1 wz
02ec4                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02ec4                 | '   if err<>0 then printerror(err): goto 104
02ec4     0C 00 90 AD |  if_e	jmp	#LR__0137
02ec8     10 13 02 F6 | 	mov	arg01, local02
02ecc     44 2D B1 FD | 	call	#_printerror
02ed0     90 03 90 FD | 	jmp	#LR__0149
02ed4                 | LR__0137
02ed4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02ed4     7A 00 00 FF 
02ed8     80 E5 05 F1 | 	add	objptr, ##62848
02edc     F2 12 02 FB | 	rdlong	arg01, objptr
02ee0     7A 00 00 FF 
02ee4     80 E5 85 F1 | 	sub	objptr, ##62848
02ee8     43 01 00 FF 
02eec     E5 15 06 F6 | 	mov	arg02, ##@LR__4370
02ef0     D0 62 B1 FD | 	call	#__system___string_cmp
02ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef8     68 03 90 AD |  if_e	jmp	#LR__0149
02efc     7A 00 00 FF 
02f00     80 E5 05 F1 | 	add	objptr, ##62848
02f04     F2 1E 02 FB | 	rdlong	local01, objptr
02f08     24 00 00 FF 
02f0c     A0 E4 85 F1 | 	sub	objptr, ##18592
02f10     F2 1E 62 FC | 	wrlong	local01, objptr
02f14     08 E4 05 F1 | 	add	objptr, #8
02f18     F2 08 68 FC | 	wrlong	#4, objptr
02f1c     56 00 00 FF 
02f20     E8 E4 85 F1 | 	sub	objptr, ##44264
02f24     48 DB 9F FD | 	jmp	#LR__0020
02f28                 | LR__0138
02f28                 | ' 							 
02f28                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
02f28     7A 00 00 FF 
02f2c     54 E5 05 F1 | 	add	objptr, ##62804
02f30     F2 1E 02 FB | 	rdlong	local01, objptr
02f34     7A 00 00 FF 
02f38     54 E5 85 F1 | 	sub	objptr, ##62804
02f3c     01 1E 16 F2 | 	cmp	local01, #1 wc
02f40     D4 00 90 CD |  if_b	jmp	#LR__0140
02f44     56 00 00 FF 
02f48     E8 E4 05 F1 | 	add	objptr, ##44264
02f4c     F2 26 0A FB | 	rdlong	local05, objptr wz
02f50     56 00 00 FF 
02f54     E8 E4 85 F1 | 	sub	objptr, ##44264
02f58     20 00 90 AD |  if_e	jmp	#LR__0139
02f5c     56 00 00 FF 
02f60     E8 E4 05 F1 | 	add	objptr, ##44264
02f64     F2 32 02 FB | 	rdlong	local11, objptr
02f68     56 00 00 FF 
02f6c     E8 E4 85 F1 | 	sub	objptr, ##44264
02f70     19 29 02 F6 | 	mov	local06, local11
02f74     03 28 0E F2 | 	cmp	local06, #3 wz
02f78     9C 00 90 5D |  if_ne	jmp	#LR__0140
02f7c                 | LR__0139
02f7c     54 00 00 FF 
02f80     E4 E4 05 F1 | 	add	objptr, ##43236
02f84     F2 36 02 FB | 	rdlong	local13, objptr
02f88     54 00 00 FF 
02f8c     E4 E4 85 F1 | 	sub	objptr, ##43236
02f90     1B 31 02 F6 | 	mov	local10, local13
02f94     1B 30 0E F2 | 	cmp	local10, #27 wz
02f98     7C 00 90 5D |  if_ne	jmp	#LR__0140
02f9c     7A 00 00 FF 
02fa0     54 E5 05 F1 | 	add	objptr, ##62804
02fa4     F2 12 02 FB | 	rdlong	arg01, objptr
02fa8     24 00 00 FF 
02fac     6C E4 85 F1 | 	sub	objptr, ##18540
02fb0     F2 16 02 FB | 	rdlong	arg03, objptr
02fb4     56 00 00 FF 
02fb8     E8 E4 85 F1 | 	sub	objptr, ##44264
02fbc     00 14 06 F6 | 	mov	arg02, #0
02fc0     40 30 B0 FD | 	call	#_compile_assign
02fc4                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02fc4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02fc4     7A 00 00 FF 
02fc8     80 E5 05 F1 | 	add	objptr, ##62848
02fcc     F2 12 02 FB | 	rdlong	arg01, objptr
02fd0     7A 00 00 FF 
02fd4     80 E5 85 F1 | 	sub	objptr, ##62848
02fd8     43 01 00 FF 
02fdc     E6 15 06 F6 | 	mov	arg02, ##@LR__4371
02fe0     E0 61 B1 FD | 	call	#__system___string_cmp
02fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe8     78 02 90 AD |  if_e	jmp	#LR__0149
02fec     7A 00 00 FF 
02ff0     80 E5 05 F1 | 	add	objptr, ##62848
02ff4     F2 1E 02 FB | 	rdlong	local01, objptr
02ff8     24 00 00 FF 
02ffc     A0 E4 85 F1 | 	sub	objptr, ##18592
03000     F2 1E 62 FC | 	wrlong	local01, objptr
03004     08 E4 05 F1 | 	add	objptr, #8
03008     F2 08 68 FC | 	wrlong	#4, objptr
0300c     56 00 00 FF 
03010     E8 E4 85 F1 | 	sub	objptr, ##44264
03014     58 DA 9F FD | 	jmp	#LR__0020
03018                 | LR__0140
03018                 | '     							 
03018                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03018     7A 00 00 FF 
0301c     54 E5 05 F1 | 	add	objptr, ##62804
03020     F2 1E 02 FB | 	rdlong	local01, objptr
03024     7A 00 00 FF 
03028     54 E5 85 F1 | 	sub	objptr, ##62804
0302c     01 1E 16 F2 | 	cmp	local01, #1 wc
03030     CC 00 90 CD |  if_b	jmp	#LR__0141
03034     56 00 00 FF 
03038     E8 E4 05 F1 | 	add	objptr, ##44264
0303c     F2 26 02 FB | 	rdlong	local05, objptr
03040     56 00 00 FF 
03044     E8 E4 85 F1 | 	sub	objptr, ##44264
03048     01 26 0E F2 | 	cmp	local05, #1 wz
0304c     56 00 00 5F 
03050     E8 E4 05 51 |  if_ne	add	objptr, ##44264
03054     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03058     56 00 00 5F 
0305c     E8 E4 85 51 |  if_ne	sub	objptr, ##44264
03060     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03064     54 00 00 AF 
03068     DC E4 05 A1 |  if_e	add	objptr, ##43228
0306c     F2 36 02 AB |  if_e	rdlong	local13, objptr
03070     54 00 00 AF 
03074     DC E4 85 A1 |  if_e	sub	objptr, ##43228
03078     1B 31 02 A6 |  if_e	mov	local10, local13
0307c     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
03080     7C 00 90 5D |  if_ne	jmp	#LR__0141
03084     7A 00 00 FF 
03088     54 E5 05 F1 | 	add	objptr, ##62804
0308c     F2 12 02 FB | 	rdlong	arg01, objptr
03090     24 00 00 FF 
03094     6C E4 85 F1 | 	sub	objptr, ##18540
03098     F2 16 02 FB | 	rdlong	arg03, objptr
0309c     56 00 00 FF 
030a0     E8 E4 85 F1 | 	sub	objptr, ##44264
030a4     00 14 06 F6 | 	mov	arg02, #0
030a8     58 2F B0 FD | 	call	#_compile_assign
030ac                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
030ac                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
030ac     7A 00 00 FF 
030b0     80 E5 05 F1 | 	add	objptr, ##62848
030b4     F2 12 02 FB | 	rdlong	arg01, objptr
030b8     7A 00 00 FF 
030bc     80 E5 85 F1 | 	sub	objptr, ##62848
030c0     43 01 00 FF 
030c4     E7 15 06 F6 | 	mov	arg02, ##@LR__4372
030c8     F8 60 B1 FD | 	call	#__system___string_cmp
030cc     00 FA 0D F2 | 	cmp	result1, #0 wz
030d0     90 01 90 AD |  if_e	jmp	#LR__0149
030d4     7A 00 00 FF 
030d8     80 E5 05 F1 | 	add	objptr, ##62848
030dc     F2 1E 02 FB | 	rdlong	local01, objptr
030e0     24 00 00 FF 
030e4     A0 E4 85 F1 | 	sub	objptr, ##18592
030e8     F2 1E 62 FC | 	wrlong	local01, objptr
030ec     08 E4 05 F1 | 	add	objptr, #8
030f0     F2 08 68 FC | 	wrlong	#4, objptr
030f4     56 00 00 FF 
030f8     E8 E4 85 F1 | 	sub	objptr, ##44264
030fc     70 D9 9F FD | 	jmp	#LR__0020
03100                 | LR__0141
03100                 | ' 
03100                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
03100     54 00 00 FF 
03104     D4 E4 05 F1 | 	add	objptr, ##43220
03108     F2 1E 02 FB | 	rdlong	local01, objptr
0310c     54 00 00 FF 
03110     D4 E4 85 F1 | 	sub	objptr, ##43220
03114     01 00 00 FF 
03118     04 1E 0E F2 | 	cmp	local01, ##516 wz
0311c     54 00 00 AF 
03120     DC E4 05 A1 |  if_e	add	objptr, ##43228
03124     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03128     54 00 00 AF 
0312c     DC E4 85 A1 |  if_e	sub	objptr, ##43228
03130     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03134     14 00 90 5D |  if_ne	jmp	#LR__0142
03138     00 12 06 F6 | 	mov	arg01, #0
0313c     00 14 06 F6 | 	mov	arg02, #0
03140     00 16 06 F6 | 	mov	arg03, #0
03144     BC 2E B0 FD | 	call	#_compile_assign
03148     90 00 90 FD | 	jmp	#LR__0144
0314c                 | LR__0142
0314c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0314c     54 00 00 FF 
03150     D4 E4 05 F1 | 	add	objptr, ##43220
03154     F2 1E 02 FB | 	rdlong	local01, objptr
03158     54 00 00 FF 
0315c     D4 E4 85 F1 | 	sub	objptr, ##43220
03160     01 00 00 FF 
03164     04 1E 0E F2 | 	cmp	local01, ##516 wz
03168     54 00 00 AF 
0316c     DC E4 05 A1 |  if_e	add	objptr, ##43228
03170     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03174     54 00 00 AF 
03178     DC E4 85 A1 |  if_e	sub	objptr, ##43228
0317c     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
03180     44 00 90 5D |  if_ne	jmp	#LR__0143
03184     00 12 06 F6 | 	mov	arg01, #0
03188     14 B9 B1 FD | 	call	#__system___getiolock_0425
0318c     FD 12 02 F6 | 	mov	arg01, result1
03190     08 60 B1 FD | 	call	#__system___lockmem
03194     43 01 00 FF 
03198     E8 15 06 F6 | 	mov	arg02, ##@LR__4373
0319c     00 12 06 F6 | 	mov	arg01, #0
031a0     00 16 06 F6 | 	mov	arg03, #0
031a4     E8 6C B1 FD | 	call	#__system___basic_print_string
031a8     00 12 06 F6 | 	mov	arg01, #0
031ac     0A 14 06 F6 | 	mov	arg02, #10
031b0     00 16 06 F6 | 	mov	arg03, #0
031b4     80 6C B1 FD | 	call	#__system___basic_print_char
031b8     00 12 06 F6 | 	mov	arg01, #0
031bc     E0 B8 B1 FD | 	call	#__system___getiolock_0425
031c0     FD 00 68 FC | 	wrlong	#0, result1
031c4     7C 00 90 FD | 	jmp	#LR__0148
031c8                 | LR__0143
031c8     00 12 06 F6 | 	mov	arg01, #0
031cc     00 14 06 F6 | 	mov	arg02, #0
031d0     00 16 06 F6 | 	mov	arg03, #0
031d4     5C 2D B0 FD | 	call	#_compile
031d8     FD 20 02 F6 | 	mov	local02, result1
031dc                 | LR__0144
031dc                 | ' 
031dc                 | ' ' if we are here, this is not a program line to add, so try to execute this
031dc                 | ' 
031dc                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
031dc                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
031dc                 | ' if err=0 then execute_line() else printerror(err)
031dc     00 20 0E F2 | 	cmp	local02, #0 wz
031e0     0C 00 90 5D |  if_ne	jmp	#LR__0145
031e4     00 12 06 F6 | 	mov	arg01, #0
031e8     48 66 B0 FD | 	call	#_execute_line
031ec     08 00 90 FD | 	jmp	#LR__0146
031f0                 | LR__0145
031f0     10 13 02 F6 | 	mov	arg01, local02
031f4     1C 2A B1 FD | 	call	#_printerror
031f8                 | LR__0146
031f8                 | ' if rest$<>"" then line$=rest$:  goto 108 
031f8     7A 00 00 FF 
031fc     80 E5 05 F1 | 	add	objptr, ##62848
03200     F2 12 02 FB | 	rdlong	arg01, objptr
03204     7A 00 00 FF 
03208     80 E5 85 F1 | 	sub	objptr, ##62848
0320c     44 01 00 FF 
03210     17 14 06 F6 | 	mov	arg02, ##@LR__4374
03214     AC 5F B1 FD | 	call	#__system___string_cmp
03218     00 FA 0D F2 | 	cmp	result1, #0 wz
0321c     24 00 90 AD |  if_e	jmp	#LR__0147
03220     7A 00 00 FF 
03224     80 E5 05 F1 | 	add	objptr, ##62848
03228     F2 1E 02 FB | 	rdlong	local01, objptr
0322c     24 00 00 FF 
03230     A0 E4 85 F1 | 	sub	objptr, ##18592
03234     F2 1E 62 FC | 	wrlong	local01, objptr
03238     56 00 00 FF 
0323c     E0 E4 85 F1 | 	sub	objptr, ##44256
03240     2C D8 9F FD | 	jmp	#LR__0020
03244                 | LR__0147
03244                 | LR__0148
03244     44 01 00 FF 
03248     18 12 06 F6 | 	mov	arg01, ##@LR__4375
0324c                 | ' 
0324c                 | ' write(text)
0324c     C4 4E B1 FD | 	call	#_hg010b_spin2_write
03250                 | ' crlf
03250     20 50 B1 FD | 	call	#_hg010b_spin2_crlf
03254     44 01 00 FF 
03258     19 12 06 F6 | 	mov	arg01, ##@LR__4376
0325c                 | ' 
0325c                 | ' write(text)
0325c     B4 4E B1 FD | 	call	#_hg010b_spin2_write
03260                 | ' crlf
03260     10 50 B1 FD | 	call	#_hg010b_spin2_crlf
03264                 | LR__0149
03264     A7 F0 03 F6 | 	mov	ptra, fp
03268     B2 00 A0 FD | 	call	#popregs_
0326c                 | _interpret_ret
0326c     2D 00 64 FD | 	ret
03270                 | 
03270                 | ' 
03270                 | ' 
03270                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
03270                 | ' 
03270                 | ' function isoperator(s as string) as ubyte
03270                 | _isoperator
03270     01 4A 05 F6 | 	mov	COUNT_, #1
03274     A8 00 A0 FD | 	call	#pushregs_
03278                 | ' 
03278                 | ' select case s
03278     09 1F 02 F6 | 	mov	local01, arg01
0327c     44 01 00 FF 
03280     1F 14 06 F6 | 	mov	arg02, ##@LR__4377
03284     0F 13 02 F6 | 	mov	arg01, local01
03288     38 5F B1 FD | 	call	#__system___string_cmp
0328c     00 FA 0D F2 | 	cmp	result1, #0 wz
03290     FC 01 90 AD |  if_e	jmp	#LR__0150
03294     44 01 00 FF 
03298     21 14 06 F6 | 	mov	arg02, ##@LR__4378
0329c     0F 13 02 F6 | 	mov	arg01, local01
032a0     20 5F B1 FD | 	call	#__system___string_cmp
032a4     00 FA 0D F2 | 	cmp	result1, #0 wz
032a8     EC 01 90 AD |  if_e	jmp	#LR__0151
032ac     44 01 00 FF 
032b0     23 14 06 F6 | 	mov	arg02, ##@LR__4379
032b4     0F 13 02 F6 | 	mov	arg01, local01
032b8     08 5F B1 FD | 	call	#__system___string_cmp
032bc     00 FA 0D F2 | 	cmp	result1, #0 wz
032c0     DC 01 90 AD |  if_e	jmp	#LR__0152
032c4     44 01 00 FF 
032c8     26 14 06 F6 | 	mov	arg02, ##@LR__4380
032cc     0F 13 02 F6 | 	mov	arg01, local01
032d0     F0 5E B1 FD | 	call	#__system___string_cmp
032d4     00 FA 0D F2 | 	cmp	result1, #0 wz
032d8     CC 01 90 AD |  if_e	jmp	#LR__0153
032dc     44 01 00 FF 
032e0     2A 14 06 F6 | 	mov	arg02, ##@LR__4381
032e4     0F 13 02 F6 | 	mov	arg01, local01
032e8     D8 5E B1 FD | 	call	#__system___string_cmp
032ec     00 FA 0D F2 | 	cmp	result1, #0 wz
032f0     BC 01 90 AD |  if_e	jmp	#LR__0154
032f4     44 01 00 FF 
032f8     2C 14 06 F6 | 	mov	arg02, ##@LR__4382
032fc     0F 13 02 F6 | 	mov	arg01, local01
03300     C0 5E B1 FD | 	call	#__system___string_cmp
03304     00 FA 0D F2 | 	cmp	result1, #0 wz
03308     AC 01 90 AD |  if_e	jmp	#LR__0155
0330c     44 01 00 FF 
03310     2E 14 06 F6 | 	mov	arg02, ##@LR__4383
03314     0F 13 02 F6 | 	mov	arg01, local01
03318     A8 5E B1 FD | 	call	#__system___string_cmp
0331c     00 FA 0D F2 | 	cmp	result1, #0 wz
03320     9C 01 90 AD |  if_e	jmp	#LR__0156
03324     44 01 00 FF 
03328     32 14 06 F6 | 	mov	arg02, ##@LR__4384
0332c     0F 13 02 F6 | 	mov	arg01, local01
03330     90 5E B1 FD | 	call	#__system___string_cmp
03334     00 FA 0D F2 | 	cmp	result1, #0 wz
03338     8C 01 90 AD |  if_e	jmp	#LR__0157
0333c     44 01 00 FF 
03340     36 14 06 F6 | 	mov	arg02, ##@LR__4385
03344     0F 13 02 F6 | 	mov	arg01, local01
03348     78 5E B1 FD | 	call	#__system___string_cmp
0334c     00 FA 0D F2 | 	cmp	result1, #0 wz
03350     7C 01 90 AD |  if_e	jmp	#LR__0158
03354     44 01 00 FF 
03358     3A 14 06 F6 | 	mov	arg02, ##@LR__4386
0335c     0F 13 02 F6 | 	mov	arg01, local01
03360     60 5E B1 FD | 	call	#__system___string_cmp
03364     00 FA 0D F2 | 	cmp	result1, #0 wz
03368     6C 01 90 AD |  if_e	jmp	#LR__0159
0336c     44 01 00 FF 
03370     3E 14 06 F6 | 	mov	arg02, ##@LR__4387
03374     0F 13 02 F6 | 	mov	arg01, local01
03378     48 5E B1 FD | 	call	#__system___string_cmp
0337c     00 FA 0D F2 | 	cmp	result1, #0 wz
03380     5C 01 90 AD |  if_e	jmp	#LR__0160
03384     44 01 00 FF 
03388     42 14 06 F6 | 	mov	arg02, ##@LR__4388
0338c     0F 13 02 F6 | 	mov	arg01, local01
03390     30 5E B1 FD | 	call	#__system___string_cmp
03394     00 FA 0D F2 | 	cmp	result1, #0 wz
03398     4C 01 90 AD |  if_e	jmp	#LR__0161
0339c     44 01 00 FF 
033a0     44 14 06 F6 | 	mov	arg02, ##@LR__4389
033a4     0F 13 02 F6 | 	mov	arg01, local01
033a8     18 5E B1 FD | 	call	#__system___string_cmp
033ac     00 FA 0D F2 | 	cmp	result1, #0 wz
033b0     3C 01 90 AD |  if_e	jmp	#LR__0162
033b4     44 01 00 FF 
033b8     48 14 06 F6 | 	mov	arg02, ##@LR__4390
033bc     0F 13 02 F6 | 	mov	arg01, local01
033c0     00 5E B1 FD | 	call	#__system___string_cmp
033c4     00 FA 0D F2 | 	cmp	result1, #0 wz
033c8     2C 01 90 AD |  if_e	jmp	#LR__0163
033cc     44 01 00 FF 
033d0     4A 14 06 F6 | 	mov	arg02, ##@LR__4391
033d4     0F 13 02 F6 | 	mov	arg01, local01
033d8     E8 5D B1 FD | 	call	#__system___string_cmp
033dc     00 FA 0D F2 | 	cmp	result1, #0 wz
033e0     1C 01 90 AD |  if_e	jmp	#LR__0164
033e4     44 01 00 FF 
033e8     4C 14 06 F6 | 	mov	arg02, ##@LR__4392
033ec     0F 13 02 F6 | 	mov	arg01, local01
033f0     D0 5D B1 FD | 	call	#__system___string_cmp
033f4     00 FA 0D F2 | 	cmp	result1, #0 wz
033f8     0C 01 90 AD |  if_e	jmp	#LR__0165
033fc     44 01 00 FF 
03400     4F 14 06 F6 | 	mov	arg02, ##@LR__4393
03404     0F 13 02 F6 | 	mov	arg01, local01
03408     B8 5D B1 FD | 	call	#__system___string_cmp
0340c     00 FA 0D F2 | 	cmp	result1, #0 wz
03410     FC 00 90 AD |  if_e	jmp	#LR__0166
03414     44 01 00 FF 
03418     52 14 06 F6 | 	mov	arg02, ##@LR__4394
0341c     0F 13 02 F6 | 	mov	arg01, local01
03420     A0 5D B1 FD | 	call	#__system___string_cmp
03424     00 FA 0D F2 | 	cmp	result1, #0 wz
03428     EC 00 90 AD |  if_e	jmp	#LR__0167
0342c     44 01 00 FF 
03430     54 14 06 F6 | 	mov	arg02, ##@LR__4395
03434     0F 13 02 F6 | 	mov	arg01, local01
03438     88 5D B1 FD | 	call	#__system___string_cmp
0343c     00 FA 0D F2 | 	cmp	result1, #0 wz
03440     DC 00 90 AD |  if_e	jmp	#LR__0168
03444     44 01 00 FF 
03448     56 14 06 F6 | 	mov	arg02, ##@LR__4396
0344c     0F 13 02 F6 | 	mov	arg01, local01
03450     70 5D B1 FD | 	call	#__system___string_cmp
03454     00 FA 0D F2 | 	cmp	result1, #0 wz
03458     CC 00 90 AD |  if_e	jmp	#LR__0169
0345c     44 01 00 FF 
03460     59 14 06 F6 | 	mov	arg02, ##@LR__4397
03464     0F 13 02 F6 | 	mov	arg01, local01
03468     58 5D B1 FD | 	call	#__system___string_cmp
0346c     00 FA 0D F2 | 	cmp	result1, #0 wz
03470     BC 00 90 AD |  if_e	jmp	#LR__0170
03474     44 01 00 FF 
03478     5C 14 06 F6 | 	mov	arg02, ##@LR__4398
0347c     0F 13 02 F6 | 	mov	arg01, local01
03480     40 5D B1 FD | 	call	#__system___string_cmp
03484     00 FA 0D F2 | 	cmp	result1, #0 wz
03488     AC 00 90 AD |  if_e	jmp	#LR__0171
0348c     B0 00 90 FD | 	jmp	#LR__0172
03490                 | LR__0150
03490     01 FA 05 F6 | 	mov	result1, #1
03494     AC 00 90 FD | 	jmp	#LR__0173
03498                 | LR__0151
03498     02 FA 05 F6 | 	mov	result1, #2
0349c     A4 00 90 FD | 	jmp	#LR__0173
034a0                 | LR__0152
034a0     03 FA 05 F6 | 	mov	result1, #3
034a4     9C 00 90 FD | 	jmp	#LR__0173
034a8                 | LR__0153
034a8     04 FA 05 F6 | 	mov	result1, #4
034ac     94 00 90 FD | 	jmp	#LR__0173
034b0                 | LR__0154
034b0     05 FA 05 F6 | 	mov	result1, #5
034b4     8C 00 90 FD | 	jmp	#LR__0173
034b8                 | LR__0155
034b8     06 FA 05 F6 | 	mov	result1, #6
034bc     84 00 90 FD | 	jmp	#LR__0173
034c0                 | LR__0156
034c0     07 FA 05 F6 | 	mov	result1, #7
034c4     7C 00 90 FD | 	jmp	#LR__0173
034c8                 | LR__0157
034c8     08 FA 05 F6 | 	mov	result1, #8
034cc     74 00 90 FD | 	jmp	#LR__0173
034d0                 | LR__0158
034d0     09 FA 05 F6 | 	mov	result1, #9
034d4     6C 00 90 FD | 	jmp	#LR__0173
034d8                 | LR__0159
034d8     0A FA 05 F6 | 	mov	result1, #10
034dc     64 00 90 FD | 	jmp	#LR__0173
034e0                 | LR__0160
034e0     0B FA 05 F6 | 	mov	result1, #11
034e4     5C 00 90 FD | 	jmp	#LR__0173
034e8                 | LR__0161
034e8     0C FA 05 F6 | 	mov	result1, #12
034ec     54 00 90 FD | 	jmp	#LR__0173
034f0                 | LR__0162
034f0     0D FA 05 F6 | 	mov	result1, #13
034f4     4C 00 90 FD | 	jmp	#LR__0173
034f8                 | LR__0163
034f8     0E FA 05 F6 | 	mov	result1, #14
034fc     44 00 90 FD | 	jmp	#LR__0173
03500                 | LR__0164
03500     1B FA 05 F6 | 	mov	result1, #27
03504     3C 00 90 FD | 	jmp	#LR__0173
03508                 | LR__0165
03508     27 FA 05 F6 | 	mov	result1, #39
0350c     34 00 90 FD | 	jmp	#LR__0173
03510                 | LR__0166
03510     26 FA 05 F6 | 	mov	result1, #38
03514     2C 00 90 FD | 	jmp	#LR__0173
03518                 | LR__0167
03518     10 FA 05 F6 | 	mov	result1, #16
0351c     24 00 90 FD | 	jmp	#LR__0173
03520                 | LR__0168
03520     0F FA 05 F6 | 	mov	result1, #15
03524     1C 00 90 FD | 	jmp	#LR__0173
03528                 | LR__0169
03528     2A FA 05 F6 | 	mov	result1, #42
0352c     14 00 90 FD | 	jmp	#LR__0173
03530                 | LR__0170
03530     28 FA 05 F6 | 	mov	result1, #40
03534     0C 00 90 FD | 	jmp	#LR__0173
03538                 | LR__0171
03538     29 FA 05 F6 | 	mov	result1, #41
0353c     04 00 90 FD | 	jmp	#LR__0173
03540                 | LR__0172
03540     00 FA 05 F6 | 	mov	result1, #0
03544                 | LR__0173
03544     A7 F0 03 F6 | 	mov	ptra, fp
03548     B2 00 A0 FD | 	call	#popregs_
0354c                 | _isoperator_ret
0354c     2D 00 64 FD | 	ret
03550                 | 
03550                 | ' 
03550                 | ' function isseparator(s as string) as ubyte
03550                 | _isseparator
03550     01 4A 05 F6 | 	mov	COUNT_, #1
03554     A8 00 A0 FD | 	call	#pushregs_
03558                 | ' 
03558                 | ' select case s
03558     09 1F 02 F6 | 	mov	local01, arg01
0355c     44 01 00 FF 
03560     5F 14 06 F6 | 	mov	arg02, ##@LR__4399
03564     0F 13 02 F6 | 	mov	arg01, local01
03568     58 5C B1 FD | 	call	#__system___string_cmp
0356c     00 FA 0D F2 | 	cmp	result1, #0 wz
03570     54 01 90 AD |  if_e	jmp	#LR__0180
03574     44 01 00 FF 
03578     61 14 06 F6 | 	mov	arg02, ##@LR__4400
0357c     0F 13 02 F6 | 	mov	arg01, local01
03580     40 5C B1 FD | 	call	#__system___string_cmp
03584     00 FA 0D F2 | 	cmp	result1, #0 wz
03588     44 01 90 AD |  if_e	jmp	#LR__0181
0358c     44 01 00 FF 
03590     63 14 06 F6 | 	mov	arg02, ##@LR__4401
03594     0F 13 02 F6 | 	mov	arg01, local01
03598     28 5C B1 FD | 	call	#__system___string_cmp
0359c     00 FA 0D F2 | 	cmp	result1, #0 wz
035a0     34 01 90 AD |  if_e	jmp	#LR__0182
035a4     44 01 00 FF 
035a8     65 14 06 F6 | 	mov	arg02, ##@LR__4402
035ac     0F 13 02 F6 | 	mov	arg01, local01
035b0     10 5C B1 FD | 	call	#__system___string_cmp
035b4     00 FA 0D F2 | 	cmp	result1, #0 wz
035b8     24 01 90 AD |  if_e	jmp	#LR__0183
035bc     44 01 00 FF 
035c0     67 14 06 F6 | 	mov	arg02, ##@LR__4403
035c4     0F 13 02 F6 | 	mov	arg01, local01
035c8     F8 5B B1 FD | 	call	#__system___string_cmp
035cc     00 FA 0D F2 | 	cmp	result1, #0 wz
035d0     14 01 90 AD |  if_e	jmp	#LR__0184
035d4     44 01 00 FF 
035d8     69 14 06 F6 | 	mov	arg02, ##@LR__4404
035dc     0F 13 02 F6 | 	mov	arg01, local01
035e0     E0 5B B1 FD | 	call	#__system___string_cmp
035e4     00 FA 0D F2 | 	cmp	result1, #0 wz
035e8     04 01 90 AD |  if_e	jmp	#LR__0185
035ec     44 01 00 FF 
035f0     6B 14 06 F6 | 	mov	arg02, ##@LR__4405
035f4     0F 13 02 F6 | 	mov	arg01, local01
035f8     C8 5B B1 FD | 	call	#__system___string_cmp
035fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03600     F4 00 90 AD |  if_e	jmp	#LR__0186
03604     44 01 00 FF 
03608     6D 14 06 F6 | 	mov	arg02, ##@LR__4406
0360c     0F 13 02 F6 | 	mov	arg01, local01
03610     B0 5B B1 FD | 	call	#__system___string_cmp
03614     00 FA 0D F2 | 	cmp	result1, #0 wz
03618     E4 00 90 AD |  if_e	jmp	#LR__0187
0361c     44 01 00 FF 
03620     6F 14 06 F6 | 	mov	arg02, ##@LR__4407
03624     0F 13 02 F6 | 	mov	arg01, local01
03628     98 5B B1 FD | 	call	#__system___string_cmp
0362c     00 FA 0D F2 | 	cmp	result1, #0 wz
03630     D4 00 90 AD |  if_e	jmp	#LR__0188
03634     44 01 00 FF 
03638     71 14 06 F6 | 	mov	arg02, ##@LR__4408
0363c     0F 13 02 F6 | 	mov	arg01, local01
03640     80 5B B1 FD | 	call	#__system___string_cmp
03644     00 FA 0D F2 | 	cmp	result1, #0 wz
03648     C4 00 90 AD |  if_e	jmp	#LR__0189
0364c     44 01 00 FF 
03650     73 14 06 F6 | 	mov	arg02, ##@LR__4409
03654     0F 13 02 F6 | 	mov	arg01, local01
03658     68 5B B1 FD | 	call	#__system___string_cmp
0365c     00 FA 0D F2 | 	cmp	result1, #0 wz
03660     B4 00 90 AD |  if_e	jmp	#LR__0190
03664     44 01 00 FF 
03668     75 14 06 F6 | 	mov	arg02, ##@LR__4410
0366c     0F 13 02 F6 | 	mov	arg01, local01
03670     50 5B B1 FD | 	call	#__system___string_cmp
03674     00 FA 0D F2 | 	cmp	result1, #0 wz
03678     A4 00 90 AD |  if_e	jmp	#LR__0191
0367c     44 01 00 FF 
03680     77 14 06 F6 | 	mov	arg02, ##@LR__4411
03684     0F 13 02 F6 | 	mov	arg01, local01
03688     38 5B B1 FD | 	call	#__system___string_cmp
0368c     00 FA 0D F2 | 	cmp	result1, #0 wz
03690     94 00 90 AD |  if_e	jmp	#LR__0192
03694     44 01 00 FF 
03698     79 14 06 F6 | 	mov	arg02, ##@LR__4412
0369c     0F 13 02 F6 | 	mov	arg01, local01
036a0     20 5B B1 FD | 	call	#__system___string_cmp
036a4     00 FA 0D F2 | 	cmp	result1, #0 wz
036a8     84 00 90 AD |  if_e	jmp	#LR__0193
036ac     44 01 00 FF 
036b0     7B 14 06 F6 | 	mov	arg02, ##@LR__4413
036b4     0F 13 02 F6 | 	mov	arg01, local01
036b8     08 5B B1 FD | 	call	#__system___string_cmp
036bc     00 FA 0D F2 | 	cmp	result1, #0 wz
036c0     74 00 90 AD |  if_e	jmp	#LR__0194
036c4     78 00 90 FD | 	jmp	#LR__0195
036c8                 | LR__0180
036c8     01 FA 05 F6 | 	mov	result1, #1
036cc     74 00 90 FD | 	jmp	#LR__0196
036d0                 | LR__0181
036d0     02 FA 05 F6 | 	mov	result1, #2
036d4     6C 00 90 FD | 	jmp	#LR__0196
036d8                 | LR__0182
036d8     1B FA 05 F6 | 	mov	result1, #27
036dc     64 00 90 FD | 	jmp	#LR__0196
036e0                 | LR__0183
036e0     11 FA 05 F6 | 	mov	result1, #17
036e4     5C 00 90 FD | 	jmp	#LR__0196
036e8                 | LR__0184
036e8     05 FA 05 F6 | 	mov	result1, #5
036ec     54 00 90 FD | 	jmp	#LR__0196
036f0                 | LR__0185
036f0     06 FA 05 F6 | 	mov	result1, #6
036f4     4C 00 90 FD | 	jmp	#LR__0196
036f8                 | LR__0186
036f8     12 FA 05 F6 | 	mov	result1, #18
036fc     44 00 90 FD | 	jmp	#LR__0196
03700                 | LR__0187
03700     13 FA 05 F6 | 	mov	result1, #19
03704     3C 00 90 FD | 	jmp	#LR__0196
03708                 | LR__0188
03708     0C FA 05 F6 | 	mov	result1, #12
0370c     34 00 90 FD | 	jmp	#LR__0196
03710                 | LR__0189
03710     14 FA 05 F6 | 	mov	result1, #20
03714     2C 00 90 FD | 	jmp	#LR__0196
03718                 | LR__0190
03718     15 FA 05 F6 | 	mov	result1, #21
0371c     24 00 90 FD | 	jmp	#LR__0196
03720                 | LR__0191
03720     16 FA 05 F6 | 	mov	result1, #22
03724     1C 00 90 FD | 	jmp	#LR__0196
03728                 | LR__0192
03728     FF FB 05 F6 | 	mov	result1, #511
0372c     14 00 90 FD | 	jmp	#LR__0196
03730                 | LR__0193
03730     0F FA 05 F6 | 	mov	result1, #15
03734     0C 00 90 FD | 	jmp	#LR__0196
03738                 | LR__0194
03738     10 FA 05 F6 | 	mov	result1, #16
0373c     04 00 90 FD | 	jmp	#LR__0196
03740                 | LR__0195
03740     00 FA 05 F6 | 	mov	result1, #0
03744                 | LR__0196
03744     A7 F0 03 F6 | 	mov	ptra, fp
03748     B2 00 A0 FD | 	call	#popregs_
0374c                 | _isseparator_ret
0374c     2D 00 64 FD | 	ret
03750                 | 
03750                 | ' 
03750                 | ' 
03750                 | ' function iscommand(s as string) as ubyte
03750                 | _iscommand
03750     01 4A 05 F6 | 	mov	COUNT_, #1
03754     A8 00 A0 FD | 	call	#pushregs_
03758                 | ' 
03758                 | ' select case s
03758     09 1F 02 F6 | 	mov	local01, arg01
0375c     44 01 00 FF 
03760     7F 14 06 F6 | 	mov	arg02, ##@LR__4415
03764     0F 13 02 F6 | 	mov	arg01, local01
03768     58 5A B1 FD | 	call	#__system___string_cmp
0376c     00 FA 0D F2 | 	cmp	result1, #0 wz
03770     6C 07 90 AD |  if_e	jmp	#LR__0200
03774     44 01 00 FF 
03778     84 14 06 F6 | 	mov	arg02, ##@LR__4416
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     40 5A B1 FD | 	call	#__system___string_cmp
03784     00 FA 0D F2 | 	cmp	result1, #0 wz
03788     5C 07 90 AD |  if_e	jmp	#LR__0201
0378c     44 01 00 FF 
03790     87 14 06 F6 | 	mov	arg02, ##@LR__4417
03794     0F 13 02 F6 | 	mov	arg01, local01
03798     28 5A B1 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     4C 07 90 AD |  if_e	jmp	#LR__0202
037a4     44 01 00 FF 
037a8     8B 14 06 F6 | 	mov	arg02, ##@LR__4418
037ac     0F 13 02 F6 | 	mov	arg01, local01
037b0     10 5A B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     3C 07 90 AD |  if_e	jmp	#LR__0203
037bc     44 01 00 FF 
037c0     90 14 06 F6 | 	mov	arg02, ##@LR__4419
037c4     0F 13 02 F6 | 	mov	arg01, local01
037c8     F8 59 B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     2C 07 90 AD |  if_e	jmp	#LR__0204
037d4     44 01 00 FF 
037d8     94 14 06 F6 | 	mov	arg02, ##@LR__4420
037dc     0F 13 02 F6 | 	mov	arg01, local01
037e0     E0 59 B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     1C 07 90 AD |  if_e	jmp	#LR__0205
037ec     44 01 00 FF 
037f0     9B 14 06 F6 | 	mov	arg02, ##@LR__4421
037f4     0F 13 02 F6 | 	mov	arg01, local01
037f8     C8 59 B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     0C 07 90 AD |  if_e	jmp	#LR__0206
03804     44 01 00 FF 
03808     9F 14 06 F6 | 	mov	arg02, ##@LR__4422
0380c     0F 13 02 F6 | 	mov	arg01, local01
03810     B0 59 B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     FC 06 90 AD |  if_e	jmp	#LR__0207
0381c     44 01 00 FF 
03820     A5 14 06 F6 | 	mov	arg02, ##@LR__4423
03824     0F 13 02 F6 | 	mov	arg01, local01
03828     98 59 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     EC 06 90 AD |  if_e	jmp	#LR__0208
03834     44 01 00 FF 
03838     A9 14 06 F6 | 	mov	arg02, ##@LR__4424
0383c     0F 13 02 F6 | 	mov	arg01, local01
03840     80 59 B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     DC 06 90 AD |  if_e	jmp	#LR__0209
0384c     44 01 00 FF 
03850     AF 14 06 F6 | 	mov	arg02, ##@LR__4425
03854     0F 13 02 F6 | 	mov	arg01, local01
03858     68 59 B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     CC 06 90 AD |  if_e	jmp	#LR__0210
03864     44 01 00 FF 
03868     B2 14 06 F6 | 	mov	arg02, ##@LR__4426
0386c     0F 13 02 F6 | 	mov	arg01, local01
03870     50 59 B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     BC 06 90 AD |  if_e	jmp	#LR__0211
0387c     44 01 00 FF 
03880     B8 14 06 F6 | 	mov	arg02, ##@LR__4427
03884     0F 13 02 F6 | 	mov	arg01, local01
03888     38 59 B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     AC 06 90 AD |  if_e	jmp	#LR__0212
03894     44 01 00 FF 
03898     BC 14 06 F6 | 	mov	arg02, ##@LR__4428
0389c     0F 13 02 F6 | 	mov	arg01, local01
038a0     20 59 B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     9C 06 90 AD |  if_e	jmp	#LR__0213
038ac     44 01 00 FF 
038b0     C3 14 06 F6 | 	mov	arg02, ##@LR__4429
038b4     0F 13 02 F6 | 	mov	arg01, local01
038b8     08 59 B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     8C 06 90 AD |  if_e	jmp	#LR__0214
038c4     44 01 00 FF 
038c8     CA 14 06 F6 | 	mov	arg02, ##@LR__4430
038cc     0F 13 02 F6 | 	mov	arg01, local01
038d0     F0 58 B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     7C 06 90 AD |  if_e	jmp	#LR__0215
038dc     44 01 00 FF 
038e0     D1 14 06 F6 | 	mov	arg02, ##@LR__4431
038e4     0F 13 02 F6 | 	mov	arg01, local01
038e8     D8 58 B1 FD | 	call	#__system___string_cmp
038ec     00 FA 0D F2 | 	cmp	result1, #0 wz
038f0     6C 06 90 AD |  if_e	jmp	#LR__0216
038f4     44 01 00 FF 
038f8     DB 14 06 F6 | 	mov	arg02, ##@LR__4432
038fc     0F 13 02 F6 | 	mov	arg01, local01
03900     C0 58 B1 FD | 	call	#__system___string_cmp
03904     00 FA 0D F2 | 	cmp	result1, #0 wz
03908     5C 06 90 AD |  if_e	jmp	#LR__0217
0390c     44 01 00 FF 
03910     DF 14 06 F6 | 	mov	arg02, ##@LR__4433
03914     0F 13 02 F6 | 	mov	arg01, local01
03918     A8 58 B1 FD | 	call	#__system___string_cmp
0391c     00 FA 0D F2 | 	cmp	result1, #0 wz
03920     4C 06 90 AD |  if_e	jmp	#LR__0218
03924     44 01 00 FF 
03928     E3 14 06 F6 | 	mov	arg02, ##@LR__4434
0392c     0F 13 02 F6 | 	mov	arg01, local01
03930     90 58 B1 FD | 	call	#__system___string_cmp
03934     00 FA 0D F2 | 	cmp	result1, #0 wz
03938     3C 06 90 AD |  if_e	jmp	#LR__0219
0393c     44 01 00 FF 
03940     E7 14 06 F6 | 	mov	arg02, ##@LR__4435
03944     0F 13 02 F6 | 	mov	arg01, local01
03948     78 58 B1 FD | 	call	#__system___string_cmp
0394c     00 FA 0D F2 | 	cmp	result1, #0 wz
03950     2C 06 90 AD |  if_e	jmp	#LR__0220
03954     44 01 00 FF 
03958     EB 14 06 F6 | 	mov	arg02, ##@LR__4436
0395c     0F 13 02 F6 | 	mov	arg01, local01
03960     60 58 B1 FD | 	call	#__system___string_cmp
03964     00 FA 0D F2 | 	cmp	result1, #0 wz
03968     1C 06 90 AD |  if_e	jmp	#LR__0221
0396c     44 01 00 FF 
03970     F0 14 06 F6 | 	mov	arg02, ##@LR__4437
03974     0F 13 02 F6 | 	mov	arg01, local01
03978     48 58 B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     0C 06 90 AD |  if_e	jmp	#LR__0222
03984     44 01 00 FF 
03988     F4 14 06 F6 | 	mov	arg02, ##@LR__4438
0398c     0F 13 02 F6 | 	mov	arg01, local01
03990     30 58 B1 FD | 	call	#__system___string_cmp
03994     00 FA 0D F2 | 	cmp	result1, #0 wz
03998     FC 05 90 AD |  if_e	jmp	#LR__0223
0399c     44 01 00 FF 
039a0     F9 14 06 F6 | 	mov	arg02, ##@LR__4439
039a4     0F 13 02 F6 | 	mov	arg01, local01
039a8     18 58 B1 FD | 	call	#__system___string_cmp
039ac     00 FA 0D F2 | 	cmp	result1, #0 wz
039b0     EC 05 90 AD |  if_e	jmp	#LR__0224
039b4     44 01 00 FF 
039b8     01 15 06 F6 | 	mov	arg02, ##@LR__4440
039bc     0F 13 02 F6 | 	mov	arg01, local01
039c0     00 58 B1 FD | 	call	#__system___string_cmp
039c4     00 FA 0D F2 | 	cmp	result1, #0 wz
039c8     DC 05 90 AD |  if_e	jmp	#LR__0225
039cc     44 01 00 FF 
039d0     05 15 06 F6 | 	mov	arg02, ##@LR__4441
039d4     0F 13 02 F6 | 	mov	arg01, local01
039d8     E8 57 B1 FD | 	call	#__system___string_cmp
039dc     00 FA 0D F2 | 	cmp	result1, #0 wz
039e0     CC 05 90 AD |  if_e	jmp	#LR__0226
039e4     44 01 00 FF 
039e8     0A 15 06 F6 | 	mov	arg02, ##@LR__4442
039ec     0F 13 02 F6 | 	mov	arg01, local01
039f0     D0 57 B1 FD | 	call	#__system___string_cmp
039f4     00 FA 0D F2 | 	cmp	result1, #0 wz
039f8     BC 05 90 AD |  if_e	jmp	#LR__0227
039fc     44 01 00 FF 
03a00     0E 15 06 F6 | 	mov	arg02, ##@LR__4443
03a04     0F 13 02 F6 | 	mov	arg01, local01
03a08     B8 57 B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     AC 05 90 AD |  if_e	jmp	#LR__0228
03a14     44 01 00 FF 
03a18     13 15 06 F6 | 	mov	arg02, ##@LR__4444
03a1c     0F 13 02 F6 | 	mov	arg01, local01
03a20     A0 57 B1 FD | 	call	#__system___string_cmp
03a24     00 FA 0D F2 | 	cmp	result1, #0 wz
03a28     9C 05 90 AD |  if_e	jmp	#LR__0229
03a2c     44 01 00 FF 
03a30     17 15 06 F6 | 	mov	arg02, ##@LR__4445
03a34     0F 13 02 F6 | 	mov	arg01, local01
03a38     88 57 B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     8C 05 90 AD |  if_e	jmp	#LR__0230
03a44     44 01 00 FF 
03a48     1A 15 06 F6 | 	mov	arg02, ##@LR__4446
03a4c     0F 13 02 F6 | 	mov	arg01, local01
03a50     70 57 B1 FD | 	call	#__system___string_cmp
03a54     00 FA 0D F2 | 	cmp	result1, #0 wz
03a58     7C 05 90 AD |  if_e	jmp	#LR__0231
03a5c     44 01 00 FF 
03a60     20 15 06 F6 | 	mov	arg02, ##@LR__4447
03a64     0F 13 02 F6 | 	mov	arg01, local01
03a68     58 57 B1 FD | 	call	#__system___string_cmp
03a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a70     6C 05 90 AD |  if_e	jmp	#LR__0232
03a74     44 01 00 FF 
03a78     24 15 06 F6 | 	mov	arg02, ##@LR__4448
03a7c     0F 13 02 F6 | 	mov	arg01, local01
03a80     40 57 B1 FD | 	call	#__system___string_cmp
03a84     00 FA 0D F2 | 	cmp	result1, #0 wz
03a88     5C 05 90 AD |  if_e	jmp	#LR__0233
03a8c     44 01 00 FF 
03a90     29 15 06 F6 | 	mov	arg02, ##@LR__4449
03a94     0F 13 02 F6 | 	mov	arg01, local01
03a98     28 57 B1 FD | 	call	#__system___string_cmp
03a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03aa0     4C 05 90 AD |  if_e	jmp	#LR__0234
03aa4     44 01 00 FF 
03aa8     2C 15 06 F6 | 	mov	arg02, ##@LR__4450
03aac     0F 13 02 F6 | 	mov	arg01, local01
03ab0     10 57 B1 FD | 	call	#__system___string_cmp
03ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab8     3C 05 90 AD |  if_e	jmp	#LR__0235
03abc     44 01 00 FF 
03ac0     2F 15 06 F6 | 	mov	arg02, ##@LR__4451
03ac4     0F 13 02 F6 | 	mov	arg01, local01
03ac8     F8 56 B1 FD | 	call	#__system___string_cmp
03acc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad0     2C 05 90 AD |  if_e	jmp	#LR__0236
03ad4     44 01 00 FF 
03ad8     33 15 06 F6 | 	mov	arg02, ##@LR__4452
03adc     0F 13 02 F6 | 	mov	arg01, local01
03ae0     E0 56 B1 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     1C 05 90 AD |  if_e	jmp	#LR__0237
03aec     44 01 00 FF 
03af0     36 15 06 F6 | 	mov	arg02, ##@LR__4453
03af4     0F 13 02 F6 | 	mov	arg01, local01
03af8     C8 56 B1 FD | 	call	#__system___string_cmp
03afc     00 FA 0D F2 | 	cmp	result1, #0 wz
03b00     0C 05 90 AD |  if_e	jmp	#LR__0238
03b04     44 01 00 FF 
03b08     3A 15 06 F6 | 	mov	arg02, ##@LR__4454
03b0c     0F 13 02 F6 | 	mov	arg01, local01
03b10     B0 56 B1 FD | 	call	#__system___string_cmp
03b14     00 FA 0D F2 | 	cmp	result1, #0 wz
03b18     FC 04 90 AD |  if_e	jmp	#LR__0239
03b1c     44 01 00 FF 
03b20     3F 15 06 F6 | 	mov	arg02, ##@LR__4455
03b24     0F 13 02 F6 | 	mov	arg01, local01
03b28     98 56 B1 FD | 	call	#__system___string_cmp
03b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b30     EC 04 90 AD |  if_e	jmp	#LR__0240
03b34     44 01 00 FF 
03b38     42 15 06 F6 | 	mov	arg02, ##@LR__4456
03b3c     0F 13 02 F6 | 	mov	arg01, local01
03b40     80 56 B1 FD | 	call	#__system___string_cmp
03b44     00 FA 0D F2 | 	cmp	result1, #0 wz
03b48     DC 04 90 AD |  if_e	jmp	#LR__0241
03b4c     44 01 00 FF 
03b50     47 15 06 F6 | 	mov	arg02, ##@LR__4457
03b54     0F 13 02 F6 | 	mov	arg01, local01
03b58     68 56 B1 FD | 	call	#__system___string_cmp
03b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b60     CC 04 90 AD |  if_e	jmp	#LR__0242
03b64     44 01 00 FF 
03b68     4B 15 06 F6 | 	mov	arg02, ##@LR__4458
03b6c     0F 13 02 F6 | 	mov	arg01, local01
03b70     50 56 B1 FD | 	call	#__system___string_cmp
03b74     00 FA 0D F2 | 	cmp	result1, #0 wz
03b78     BC 04 90 AD |  if_e	jmp	#LR__0243
03b7c     44 01 00 FF 
03b80     50 15 06 F6 | 	mov	arg02, ##@LR__4459
03b84     0F 13 02 F6 | 	mov	arg01, local01
03b88     38 56 B1 FD | 	call	#__system___string_cmp
03b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b90     AC 04 90 AD |  if_e	jmp	#LR__0244
03b94     44 01 00 FF 
03b98     53 15 06 F6 | 	mov	arg02, ##@LR__4460
03b9c     0F 13 02 F6 | 	mov	arg01, local01
03ba0     20 56 B1 FD | 	call	#__system___string_cmp
03ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ba8     9C 04 90 AD |  if_e	jmp	#LR__0245
03bac     44 01 00 FF 
03bb0     59 15 06 F6 | 	mov	arg02, ##@LR__4461
03bb4     0F 13 02 F6 | 	mov	arg01, local01
03bb8     08 56 B1 FD | 	call	#__system___string_cmp
03bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03bc0     8C 04 90 AD |  if_e	jmp	#LR__0246
03bc4     44 01 00 FF 
03bc8     5D 15 06 F6 | 	mov	arg02, ##@LR__4462
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     F0 55 B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     7C 04 90 AD |  if_e	jmp	#LR__0247
03bdc     44 01 00 FF 
03be0     62 15 06 F6 | 	mov	arg02, ##@LR__4463
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     D8 55 B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     6C 04 90 AD |  if_e	jmp	#LR__0248
03bf4     44 01 00 FF 
03bf8     65 15 06 F6 | 	mov	arg02, ##@LR__4464
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     C0 55 B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     5C 04 90 AD |  if_e	jmp	#LR__0249
03c0c     44 01 00 FF 
03c10     6B 15 06 F6 | 	mov	arg02, ##@LR__4465
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     A8 55 B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     4C 04 90 AD |  if_e	jmp	#LR__0250
03c24     44 01 00 FF 
03c28     6E 15 06 F6 | 	mov	arg02, ##@LR__4466
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     90 55 B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     3C 04 90 AD |  if_e	jmp	#LR__0251
03c3c     44 01 00 FF 
03c40     77 15 06 F6 | 	mov	arg02, ##@LR__4467
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     78 55 B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     2C 04 90 AD |  if_e	jmp	#LR__0252
03c54     44 01 00 FF 
03c58     7D 15 06 F6 | 	mov	arg02, ##@LR__4468
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     60 55 B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     1C 04 90 AD |  if_e	jmp	#LR__0253
03c6c     44 01 00 FF 
03c70     83 15 06 F6 | 	mov	arg02, ##@LR__4469
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     48 55 B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     0C 04 90 AD |  if_e	jmp	#LR__0254
03c84     44 01 00 FF 
03c88     8C 15 06 F6 | 	mov	arg02, ##@LR__4470
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     30 55 B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     FC 03 90 AD |  if_e	jmp	#LR__0255
03c9c     44 01 00 FF 
03ca0     96 15 06 F6 | 	mov	arg02, ##@LR__4471
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     18 55 B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     EC 03 90 AD |  if_e	jmp	#LR__0256
03cb4     44 01 00 FF 
03cb8     9F 15 06 F6 | 	mov	arg02, ##@LR__4472
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     00 55 B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     DC 03 90 AD |  if_e	jmp	#LR__0257
03ccc     44 01 00 FF 
03cd0     A4 15 06 F6 | 	mov	arg02, ##@LR__4473
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     E8 54 B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     CC 03 90 AD |  if_e	jmp	#LR__0258
03ce4     44 01 00 FF 
03ce8     A9 15 06 F6 | 	mov	arg02, ##@LR__4474
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     D0 54 B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     BC 03 90 AD |  if_e	jmp	#LR__0259
03cfc     44 01 00 FF 
03d00     AD 15 06 F6 | 	mov	arg02, ##@LR__4475
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     B8 54 B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     AC 03 90 AD |  if_e	jmp	#LR__0260
03d14     44 01 00 FF 
03d18     B6 15 06 F6 | 	mov	arg02, ##@LR__4476
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     A0 54 B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     9C 03 90 AD |  if_e	jmp	#LR__0261
03d2c     44 01 00 FF 
03d30     BB 15 06 F6 | 	mov	arg02, ##@LR__4477
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     88 54 B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     8C 03 90 AD |  if_e	jmp	#LR__0262
03d44     44 01 00 FF 
03d48     C1 15 06 F6 | 	mov	arg02, ##@LR__4478
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     70 54 B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     7C 03 90 AD |  if_e	jmp	#LR__0263
03d5c     44 01 00 FF 
03d60     C3 15 06 F6 | 	mov	arg02, ##@LR__4479
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     58 54 B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     6C 03 90 AD |  if_e	jmp	#LR__0264
03d74     44 01 00 FF 
03d78     C7 15 06 F6 | 	mov	arg02, ##@LR__4480
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     40 54 B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     5C 03 90 AD |  if_e	jmp	#LR__0265
03d8c     44 01 00 FF 
03d90     CB 15 06 F6 | 	mov	arg02, ##@LR__4481
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     28 54 B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     4C 03 90 AD |  if_e	jmp	#LR__0266
03da4     44 01 00 FF 
03da8     D0 15 06 F6 | 	mov	arg02, ##@LR__4482
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     10 54 B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     3C 03 90 AD |  if_e	jmp	#LR__0267
03dbc     44 01 00 FF 
03dc0     D3 15 06 F6 | 	mov	arg02, ##@LR__4483
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     F8 53 B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     2C 03 90 AD |  if_e	jmp	#LR__0268
03dd4     44 01 00 FF 
03dd8     D9 15 06 F6 | 	mov	arg02, ##@LR__4484
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     E0 53 B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     1C 03 90 AD |  if_e	jmp	#LR__0269
03dec     44 01 00 FF 
03df0     DD 15 06 F6 | 	mov	arg02, ##@LR__4485
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     C8 53 B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     0C 03 90 AD |  if_e	jmp	#LR__0270
03e04     44 01 00 FF 
03e08     E4 15 06 F6 | 	mov	arg02, ##@LR__4486
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     B0 53 B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     FC 02 90 AD |  if_e	jmp	#LR__0271
03e1c     44 01 00 FF 
03e20     E8 15 06 F6 | 	mov	arg02, ##@LR__4487
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     98 53 B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     EC 02 90 AD |  if_e	jmp	#LR__0272
03e34     44 01 00 FF 
03e38     ED 15 06 F6 | 	mov	arg02, ##@LR__4488
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     80 53 B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     DC 02 90 AD |  if_e	jmp	#LR__0273
03e4c     44 01 00 FF 
03e50     F4 15 06 F6 | 	mov	arg02, ##@LR__4489
03e54     0F 13 02 F6 | 	mov	arg01, local01
03e58     68 53 B1 FD | 	call	#__system___string_cmp
03e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e60     CC 02 90 AD |  if_e	jmp	#LR__0274
03e64     44 01 00 FF 
03e68     FE 15 06 F6 | 	mov	arg02, ##@LR__4490
03e6c     0F 13 02 F6 | 	mov	arg01, local01
03e70     50 53 B1 FD | 	call	#__system___string_cmp
03e74     00 FA 0D F2 | 	cmp	result1, #0 wz
03e78     BC 02 90 AD |  if_e	jmp	#LR__0275
03e7c     45 01 00 FF 
03e80     02 14 06 F6 | 	mov	arg02, ##@LR__4491
03e84     0F 13 02 F6 | 	mov	arg01, local01
03e88     38 53 B1 FD | 	call	#__system___string_cmp
03e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e90     AC 02 90 AD |  if_e	jmp	#LR__0276
03e94     45 01 00 FF 
03e98     0A 14 06 F6 | 	mov	arg02, ##@LR__4492
03e9c     0F 13 02 F6 | 	mov	arg01, local01
03ea0     20 53 B1 FD | 	call	#__system___string_cmp
03ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ea8     9C 02 90 AD |  if_e	jmp	#LR__0277
03eac     45 01 00 FF 
03eb0     0E 14 06 F6 | 	mov	arg02, ##@LR__4493
03eb4     0F 13 02 F6 | 	mov	arg01, local01
03eb8     08 53 B1 FD | 	call	#__system___string_cmp
03ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec0     8C 02 90 AD |  if_e	jmp	#LR__0278
03ec4     45 01 00 FF 
03ec8     14 14 06 F6 | 	mov	arg02, ##@LR__4494
03ecc     0F 13 02 F6 | 	mov	arg01, local01
03ed0     F0 52 B1 FD | 	call	#__system___string_cmp
03ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ed8     7C 02 90 AD |  if_e	jmp	#LR__0279
03edc     80 02 90 FD | 	jmp	#LR__0280
03ee0                 | LR__0200
03ee0     5C FA 05 F6 | 	mov	result1, #92
03ee4     7C 02 90 FD | 	jmp	#LR__0281
03ee8                 | LR__0201
03ee8     5C FA 05 F6 | 	mov	result1, #92
03eec     74 02 90 FD | 	jmp	#LR__0281
03ef0                 | LR__0202
03ef0     47 FA 05 F6 | 	mov	result1, #71
03ef4     6C 02 90 FD | 	jmp	#LR__0281
03ef8                 | LR__0203
03ef8     59 FA 05 F6 | 	mov	result1, #89
03efc     64 02 90 FD | 	jmp	#LR__0281
03f00                 | LR__0204
03f00     59 FA 05 F6 | 	mov	result1, #89
03f04     5C 02 90 FD | 	jmp	#LR__0281
03f08                 | LR__0205
03f08     45 FA 05 F6 | 	mov	result1, #69
03f0c     54 02 90 FD | 	jmp	#LR__0281
03f10                 | LR__0206
03f10     45 FA 05 F6 | 	mov	result1, #69
03f14     4C 02 90 FD | 	jmp	#LR__0281
03f18                 | LR__0207
03f18     69 FA 05 F6 | 	mov	result1, #105
03f1c     44 02 90 FD | 	jmp	#LR__0281
03f20                 | LR__0208
03f20     40 FA 05 F6 | 	mov	result1, #64
03f24     3C 02 90 FD | 	jmp	#LR__0281
03f28                 | LR__0209
03f28     49 FA 05 F6 | 	mov	result1, #73
03f2c     34 02 90 FD | 	jmp	#LR__0281
03f30                 | LR__0210
03f30     49 FA 05 F6 | 	mov	result1, #73
03f34     2C 02 90 FD | 	jmp	#LR__0281
03f38                 | LR__0211
03f38     50 FA 05 F6 | 	mov	result1, #80
03f3c     24 02 90 FD | 	jmp	#LR__0281
03f40                 | LR__0212
03f40     50 FA 05 F6 | 	mov	result1, #80
03f44     1C 02 90 FD | 	jmp	#LR__0281
03f48                 | LR__0213
03f48     68 FA 05 F6 | 	mov	result1, #104
03f4c     14 02 90 FD | 	jmp	#LR__0281
03f50                 | LR__0214
03f50     73 FA 05 F6 | 	mov	result1, #115
03f54     0C 02 90 FD | 	jmp	#LR__0281
03f58                 | LR__0215
03f58     74 FA 05 F6 | 	mov	result1, #116
03f5c     04 02 90 FD | 	jmp	#LR__0281
03f60                 | LR__0216
03f60     6C FA 05 F6 | 	mov	result1, #108
03f64     FC 01 90 FD | 	jmp	#LR__0281
03f68                 | LR__0217
03f68     6C FA 05 F6 | 	mov	result1, #108
03f6c     F4 01 90 FD | 	jmp	#LR__0281
03f70                 | LR__0218
03f70     89 FA 05 F6 | 	mov	result1, #137
03f74     EC 01 90 FD | 	jmp	#LR__0281
03f78                 | LR__0219
03f78     72 FA 05 F6 | 	mov	result1, #114
03f7c     E4 01 90 FD | 	jmp	#LR__0281
03f80                 | LR__0220
03f80     5D FA 05 F6 | 	mov	result1, #93
03f84     DC 01 90 FD | 	jmp	#LR__0281
03f88                 | LR__0221
03f88     43 FA 05 F6 | 	mov	result1, #67
03f8c     D4 01 90 FD | 	jmp	#LR__0281
03f90                 | LR__0222
03f90     43 FA 05 F6 | 	mov	result1, #67
03f94     CC 01 90 FD | 	jmp	#LR__0281
03f98                 | LR__0223
03f98     5A FA 05 F6 | 	mov	result1, #90
03f9c     C4 01 90 FD | 	jmp	#LR__0281
03fa0                 | LR__0224
03fa0     46 FA 05 F6 | 	mov	result1, #70
03fa4     BC 01 90 FD | 	jmp	#LR__0281
03fa8                 | LR__0225
03fa8     46 FA 05 F6 | 	mov	result1, #70
03fac     B4 01 90 FD | 	jmp	#LR__0281
03fb0                 | LR__0226
03fb0     71 FA 05 F6 | 	mov	result1, #113
03fb4     AC 01 90 FD | 	jmp	#LR__0281
03fb8                 | LR__0227
03fb8     71 FA 05 F6 | 	mov	result1, #113
03fbc     A4 01 90 FD | 	jmp	#LR__0281
03fc0                 | LR__0228
03fc0     60 FA 05 F6 | 	mov	result1, #96
03fc4     9C 01 90 FD | 	jmp	#LR__0281
03fc8                 | LR__0229
03fc8     4A FA 05 F6 | 	mov	result1, #74
03fcc     94 01 90 FD | 	jmp	#LR__0281
03fd0                 | LR__0230
03fd0     4A FA 05 F6 | 	mov	result1, #74
03fd4     8C 01 90 FD | 	jmp	#LR__0281
03fd8                 | LR__0231
03fd8     48 FA 05 F6 | 	mov	result1, #72
03fdc     84 01 90 FD | 	jmp	#LR__0281
03fe0                 | LR__0232
03fe0     48 FA 05 F6 | 	mov	result1, #72
03fe4     7C 01 90 FD | 	jmp	#LR__0281
03fe8                 | LR__0233
03fe8     4E FA 05 F6 | 	mov	result1, #78
03fec     74 01 90 FD | 	jmp	#LR__0281
03ff0                 | LR__0234
03ff0     4E FA 05 F6 | 	mov	result1, #78
03ff4     6C 01 90 FD | 	jmp	#LR__0281
03ff8                 | LR__0235
03ff8     58 FA 05 F6 | 	mov	result1, #88
03ffc     64 01 90 FD | 	jmp	#LR__0281
04000                 | LR__0236
04000     5F FA 05 F6 | 	mov	result1, #95
04004     5C 01 90 FD | 	jmp	#LR__0281
04008                 | LR__0237
04008     5F FA 05 F6 | 	mov	result1, #95
0400c     54 01 90 FD | 	jmp	#LR__0281
04010                 | LR__0238
04010     8A FA 05 F6 | 	mov	result1, #138
04014     4C 01 90 FD | 	jmp	#LR__0281
04018                 | LR__0239
04018     4C FA 05 F6 | 	mov	result1, #76
0401c     44 01 90 FD | 	jmp	#LR__0281
04020                 | LR__0240
04020     4C FA 05 F6 | 	mov	result1, #76
04024     3C 01 90 FD | 	jmp	#LR__0281
04028                 | LR__0241
04028     52 FA 05 F6 | 	mov	result1, #82
0402c     34 01 90 FD | 	jmp	#LR__0281
04030                 | LR__0242
04030     52 FA 05 F6 | 	mov	result1, #82
04034     2C 01 90 FD | 	jmp	#LR__0281
04038                 | LR__0243
04038     61 FA 05 F6 | 	mov	result1, #97
0403c     24 01 90 FD | 	jmp	#LR__0281
04040                 | LR__0244
04040     61 FA 05 F6 | 	mov	result1, #97
04044     1C 01 90 FD | 	jmp	#LR__0281
04048                 | LR__0245
04048     63 FA 05 F6 | 	mov	result1, #99
0404c     14 01 90 FD | 	jmp	#LR__0281
04050                 | LR__0246
04050     41 FA 05 F6 | 	mov	result1, #65
04054     0C 01 90 FD | 	jmp	#LR__0281
04058                 | LR__0247
04058     4B FA 05 F6 | 	mov	result1, #75
0405c     04 01 90 FD | 	jmp	#LR__0281
04060                 | LR__0248
04060     4B FA 05 F6 | 	mov	result1, #75
04064     FC 00 90 FD | 	jmp	#LR__0281
04068                 | LR__0249
04068     5E FA 05 F6 | 	mov	result1, #94
0406c     F4 00 90 FD | 	jmp	#LR__0281
04070                 | LR__0250
04070     5E FA 05 F6 | 	mov	result1, #94
04074     EC 00 90 FD | 	jmp	#LR__0281
04078                 | LR__0251
04078     7C FA 05 F6 | 	mov	result1, #124
0407c     E4 00 90 FD | 	jmp	#LR__0281
04080                 | LR__0252
04080     7E FA 05 F6 | 	mov	result1, #126
04084     DC 00 90 FD | 	jmp	#LR__0281
04088                 | LR__0253
04088     7D FA 05 F6 | 	mov	result1, #125
0408c     D4 00 90 FD | 	jmp	#LR__0281
04090                 | LR__0254
04090     7F FA 05 F6 | 	mov	result1, #127
04094     CC 00 90 FD | 	jmp	#LR__0281
04098                 | LR__0255
04098     80 FA 05 F6 | 	mov	result1, #128
0409c     C4 00 90 FD | 	jmp	#LR__0281
040a0                 | LR__0256
040a0     55 FA 05 F6 | 	mov	result1, #85
040a4     BC 00 90 FD | 	jmp	#LR__0281
040a8                 | LR__0257
040a8     75 FA 05 F6 | 	mov	result1, #117
040ac     B4 00 90 FD | 	jmp	#LR__0281
040b0                 | LR__0258
040b0     42 FA 05 F6 | 	mov	result1, #66
040b4     AC 00 90 FD | 	jmp	#LR__0281
040b8                 | LR__0259
040b8     42 FA 05 F6 | 	mov	result1, #66
040bc     A4 00 90 FD | 	jmp	#LR__0281
040c0                 | LR__0260
040c0     81 FA 05 F6 | 	mov	result1, #129
040c4     9C 00 90 FD | 	jmp	#LR__0281
040c8                 | LR__0261
040c8     81 FA 05 F6 | 	mov	result1, #129
040cc     94 00 90 FD | 	jmp	#LR__0281
040d0                 | LR__0262
040d0     44 FA 05 F6 | 	mov	result1, #68
040d4     8C 00 90 FD | 	jmp	#LR__0281
040d8                 | LR__0263
040d8     44 FA 05 F6 | 	mov	result1, #68
040dc     84 00 90 FD | 	jmp	#LR__0281
040e0                 | LR__0264
040e0     88 FA 05 F6 | 	mov	result1, #136
040e4     7C 00 90 FD | 	jmp	#LR__0281
040e8                 | LR__0265
040e8     4D FA 05 F6 | 	mov	result1, #77
040ec     74 00 90 FD | 	jmp	#LR__0281
040f0                 | LR__0266
040f0     51 FA 05 F6 | 	mov	result1, #81
040f4     6C 00 90 FD | 	jmp	#LR__0281
040f8                 | LR__0267
040f8     51 FA 05 F6 | 	mov	result1, #81
040fc     64 00 90 FD | 	jmp	#LR__0281
04100                 | LR__0268
04100     75 FA 05 F6 | 	mov	result1, #117
04104     5C 00 90 FD | 	jmp	#LR__0281
04108                 | LR__0269
04108     75 FA 05 F6 | 	mov	result1, #117
0410c     54 00 90 FD | 	jmp	#LR__0281
04110                 | LR__0270
04110     6D FA 05 F6 | 	mov	result1, #109
04114     4C 00 90 FD | 	jmp	#LR__0281
04118                 | LR__0271
04118     6D FA 05 F6 | 	mov	result1, #109
0411c     44 00 90 FD | 	jmp	#LR__0281
04120                 | LR__0272
04120     5B FA 05 F6 | 	mov	result1, #91
04124     3C 00 90 FD | 	jmp	#LR__0281
04128                 | LR__0273
04128     56 FA 05 F6 | 	mov	result1, #86
0412c     34 00 90 FD | 	jmp	#LR__0281
04130                 | LR__0274
04130     70 FA 05 F6 | 	mov	result1, #112
04134     2C 00 90 FD | 	jmp	#LR__0281
04138                 | LR__0275
04138     70 FA 05 F6 | 	mov	result1, #112
0413c     24 00 90 FD | 	jmp	#LR__0281
04140                 | LR__0276
04140     57 FA 05 F6 | 	mov	result1, #87
04144     1C 00 90 FD | 	jmp	#LR__0281
04148                 | LR__0277
04148     57 FA 05 F6 | 	mov	result1, #87
0414c     14 00 90 FD | 	jmp	#LR__0281
04150                 | LR__0278
04150     77 FA 05 F6 | 	mov	result1, #119
04154     0C 00 90 FD | 	jmp	#LR__0281
04158                 | LR__0279
04158     78 FA 05 F6 | 	mov	result1, #120
0415c     04 00 90 FD | 	jmp	#LR__0281
04160                 | LR__0280
04160     00 FA 05 F6 | 	mov	result1, #0
04164                 | LR__0281
04164     A7 F0 03 F6 | 	mov	ptra, fp
04168     B2 00 A0 FD | 	call	#popregs_
0416c                 | _iscommand_ret
0416c     2D 00 64 FD | 	ret
04170                 | 
04170                 | ' 
04170                 | ' function isfunction(s as string) as ubyte
04170                 | _isfunction
04170     01 4A 05 F6 | 	mov	COUNT_, #1
04174     A8 00 A0 FD | 	call	#pushregs_
04178                 | ' 
04178                 | ' select case s
04178     09 1F 02 F6 | 	mov	local01, arg01
0417c     45 01 00 FF 
04180     1A 14 06 F6 | 	mov	arg02, ##@LR__4495
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     38 50 B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     CC 01 90 AD |  if_e	jmp	#LR__0290
04194     45 01 00 FF 
04198     1F 14 06 F6 | 	mov	arg02, ##@LR__4496
0419c     0F 13 02 F6 | 	mov	arg01, local01
041a0     20 50 B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     BC 01 90 AD |  if_e	jmp	#LR__0291
041ac     45 01 00 FF 
041b0     24 14 06 F6 | 	mov	arg02, ##@LR__4497
041b4     0F 13 02 F6 | 	mov	arg01, local01
041b8     08 50 B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     AC 01 90 AD |  if_e	jmp	#LR__0292
041c4     45 01 00 FF 
041c8     28 14 06 F6 | 	mov	arg02, ##@LR__4498
041cc     0F 13 02 F6 | 	mov	arg01, local01
041d0     F0 4F B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     9C 01 90 AD |  if_e	jmp	#LR__0293
041dc     45 01 00 FF 
041e0     2C 14 06 F6 | 	mov	arg02, ##@LR__4499
041e4     0F 13 02 F6 | 	mov	arg01, local01
041e8     D8 4F B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     8C 01 90 AD |  if_e	jmp	#LR__0294
041f4     45 01 00 FF 
041f8     35 14 06 F6 | 	mov	arg02, ##@LR__4500
041fc     0F 13 02 F6 | 	mov	arg01, local01
04200     C0 4F B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     7C 01 90 AD |  if_e	jmp	#LR__0295
0420c     45 01 00 FF 
04210     39 14 06 F6 | 	mov	arg02, ##@LR__4501
04214     0F 13 02 F6 | 	mov	arg01, local01
04218     A8 4F B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     6C 01 90 AD |  if_e	jmp	#LR__0296
04224     45 01 00 FF 
04228     41 14 06 F6 | 	mov	arg02, ##@LR__4502
0422c     0F 13 02 F6 | 	mov	arg01, local01
04230     90 4F B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     5C 01 90 AD |  if_e	jmp	#LR__0297
0423c     45 01 00 FF 
04240     48 14 06 F6 | 	mov	arg02, ##@LR__4503
04244     0F 13 02 F6 | 	mov	arg01, local01
04248     78 4F B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     4C 01 90 AD |  if_e	jmp	#LR__0298
04254     45 01 00 FF 
04258     4F 14 06 F6 | 	mov	arg02, ##@LR__4504
0425c     0F 13 02 F6 | 	mov	arg01, local01
04260     60 4F B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     3C 01 90 AD |  if_e	jmp	#LR__0299
0426c     45 01 00 FF 
04270     56 14 06 F6 | 	mov	arg02, ##@LR__4505
04274     0F 13 02 F6 | 	mov	arg01, local01
04278     48 4F B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     2C 01 90 AD |  if_e	jmp	#LR__0300
04284     45 01 00 FF 
04288     5D 14 06 F6 | 	mov	arg02, ##@LR__4506
0428c     0F 13 02 F6 | 	mov	arg01, local01
04290     30 4F B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     1C 01 90 AD |  if_e	jmp	#LR__0301
0429c     45 01 00 FF 
042a0     65 14 06 F6 | 	mov	arg02, ##@LR__4507
042a4     0F 13 02 F6 | 	mov	arg01, local01
042a8     18 4F B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     0C 01 90 AD |  if_e	jmp	#LR__0302
042b4     45 01 00 FF 
042b8     6B 14 06 F6 | 	mov	arg02, ##@LR__4508
042bc     0F 13 02 F6 | 	mov	arg01, local01
042c0     00 4F B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     FC 00 90 AD |  if_e	jmp	#LR__0303
042cc     45 01 00 FF 
042d0     71 14 06 F6 | 	mov	arg02, ##@LR__4509
042d4     0F 13 02 F6 | 	mov	arg01, local01
042d8     E8 4E B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     EC 00 90 AD |  if_e	jmp	#LR__0304
042e4     45 01 00 FF 
042e8     75 14 06 F6 | 	mov	arg02, ##@LR__4510
042ec     0F 13 02 F6 | 	mov	arg01, local01
042f0     D0 4E B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     DC 00 90 AD |  if_e	jmp	#LR__0305
042fc     45 01 00 FF 
04300     79 14 06 F6 | 	mov	arg02, ##@LR__4511
04304     0F 13 02 F6 | 	mov	arg01, local01
04308     B8 4E B1 FD | 	call	#__system___string_cmp
0430c     00 FA 0D F2 | 	cmp	result1, #0 wz
04310     CC 00 90 AD |  if_e	jmp	#LR__0306
04314     45 01 00 FF 
04318     7D 14 06 F6 | 	mov	arg02, ##@LR__4512
0431c     0F 13 02 F6 | 	mov	arg01, local01
04320     A0 4E B1 FD | 	call	#__system___string_cmp
04324     00 FA 0D F2 | 	cmp	result1, #0 wz
04328     BC 00 90 AD |  if_e	jmp	#LR__0307
0432c     45 01 00 FF 
04330     83 14 06 F6 | 	mov	arg02, ##@LR__4513
04334     0F 13 02 F6 | 	mov	arg01, local01
04338     88 4E B1 FD | 	call	#__system___string_cmp
0433c     00 FA 0D F2 | 	cmp	result1, #0 wz
04340     AC 00 90 AD |  if_e	jmp	#LR__0308
04344     45 01 00 FF 
04348     89 14 06 F6 | 	mov	arg02, ##@LR__4514
0434c     0F 13 02 F6 | 	mov	arg01, local01
04350     70 4E B1 FD | 	call	#__system___string_cmp
04354     00 FA 0D F2 | 	cmp	result1, #0 wz
04358     9C 00 90 AD |  if_e	jmp	#LR__0309
0435c     A0 00 90 FD | 	jmp	#LR__0310
04360                 | LR__0290
04360     85 FA 05 F6 | 	mov	result1, #133
04364     9C 00 90 FD | 	jmp	#LR__0311
04368                 | LR__0291
04368     84 FA 05 F6 | 	mov	result1, #132
0436c     94 00 90 FD | 	jmp	#LR__0311
04370                 | LR__0292
04370     86 FA 05 F6 | 	mov	result1, #134
04374     8C 00 90 FD | 	jmp	#LR__0311
04378                 | LR__0293
04378     82 FA 05 F6 | 	mov	result1, #130
0437c     84 00 90 FD | 	jmp	#LR__0311
04380                 | LR__0294
04380     6F FA 05 F6 | 	mov	result1, #111
04384     7C 00 90 FD | 	jmp	#LR__0311
04388                 | LR__0295
04388     6F FA 05 F6 | 	mov	result1, #111
0438c     74 00 90 FD | 	jmp	#LR__0311
04390                 | LR__0296
04390     62 FA 05 F6 | 	mov	result1, #98
04394     6C 00 90 FD | 	jmp	#LR__0311
04398                 | LR__0297
04398     66 FA 05 F6 | 	mov	result1, #102
0439c     64 00 90 FD | 	jmp	#LR__0311
043a0                 | LR__0298
043a0     67 FA 05 F6 | 	mov	result1, #103
043a4     5C 00 90 FD | 	jmp	#LR__0311
043a8                 | LR__0299
043a8     64 FA 05 F6 | 	mov	result1, #100
043ac     54 00 90 FD | 	jmp	#LR__0311
043b0                 | LR__0300
043b0     65 FA 05 F6 | 	mov	result1, #101
043b4     4C 00 90 FD | 	jmp	#LR__0311
043b8                 | LR__0301
043b8     7B FA 05 F6 | 	mov	result1, #123
043bc     44 00 90 FD | 	jmp	#LR__0311
043c0                 | LR__0302
043c0     76 FA 05 F6 | 	mov	result1, #118
043c4     3C 00 90 FD | 	jmp	#LR__0311
043c8                 | LR__0303
043c8     7A FA 05 F6 | 	mov	result1, #122
043cc     34 00 90 FD | 	jmp	#LR__0311
043d0                 | LR__0304
043d0     54 FA 05 F6 | 	mov	result1, #84
043d4     2C 00 90 FD | 	jmp	#LR__0311
043d8                 | LR__0305
043d8     6B FA 05 F6 | 	mov	result1, #107
043dc     24 00 90 FD | 	jmp	#LR__0311
043e0                 | LR__0306
043e0     87 FA 05 F6 | 	mov	result1, #135
043e4     1C 00 90 FD | 	jmp	#LR__0311
043e8                 | LR__0307
043e8     6A FA 05 F6 | 	mov	result1, #106
043ec     14 00 90 FD | 	jmp	#LR__0311
043f0                 | LR__0308
043f0     6E FA 05 F6 | 	mov	result1, #110
043f4     0C 00 90 FD | 	jmp	#LR__0311
043f8                 | LR__0309
043f8     83 FA 05 F6 | 	mov	result1, #131
043fc     04 00 90 FD | 	jmp	#LR__0311
04400                 | LR__0310
04400     00 FA 05 F6 | 	mov	result1, #0
04404                 | LR__0311
04404     A7 F0 03 F6 | 	mov	ptra, fp
04408     B2 00 A0 FD | 	call	#popregs_
0440c                 | _isfunction_ret
0440c     2D 00 64 FD | 	ret
04410                 | 
04410                 | ' 
04410                 | ' function isname(s as string) as boolean
04410                 | _isname
04410     0D 4A 05 F6 | 	mov	COUNT_, #13
04414     A8 00 A0 FD | 	call	#pushregs_
04418     09 1F 02 F6 | 	mov	local01, arg01
0441c     09 21 02 F6 | 	mov	local02, arg01
04420     97 06 48 FB | 	callpa	#(@LR__0321-@LR__0320)>>2,fcache_load_ptr_
04424                 | LR__0320
04424     10 FB C9 FA | 	rdbyte	result1, local02 wz
04428     01 20 06 51 |  if_ne	add	local02, #1
0442c     F4 FF 9F 5D |  if_ne	jmp	#LR__0320
04430                 | LR__0321
04430     09 21 82 F1 | 	sub	local02, arg01
04434     10 FB 01 F6 | 	mov	result1, local02
04438     FD 22 0A F6 | 	mov	local03, result1 wz
0443c     00 FA 05 A6 |  if_e	mov	result1, #0
04440     34 02 90 AD |  if_e	jmp	#LR__0333
04444     0F 13 02 F6 | 	mov	arg01, local01
04448     01 14 06 F6 | 	mov	arg02, #1
0444c     01 16 06 F6 | 	mov	arg03, #1
04450     70 6E B1 FD | 	call	#__system__Mid_S
04454     FD 24 02 F6 | 	mov	local04, result1
04458                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04458     45 01 00 FF 
0445c     8D 14 06 F6 | 	mov	arg02, ##@LR__4515
04460     12 13 02 F6 | 	mov	arg01, local04
04464     5C 4D B1 FD | 	call	#__system___string_cmp
04468     00 FA 55 F2 | 	cmps	result1, #0 wc
0446c     18 00 90 CD |  if_b	jmp	#LR__0322
04470     45 01 00 FF 
04474     8F 14 06 F6 | 	mov	arg02, ##@LR__4516
04478     12 13 02 F6 | 	mov	arg01, local04
0447c     44 4D B1 FD | 	call	#__system___string_cmp
04480     01 FA 55 F2 | 	cmps	result1, #1 wc
04484     1C 00 90 CD |  if_b	jmp	#LR__0323
04488                 | LR__0322
04488     45 01 00 FF 
0448c     91 14 06 F6 | 	mov	arg02, ##@LR__4517
04490     12 13 02 F6 | 	mov	arg01, local04
04494     2C 4D B1 FD | 	call	#__system___string_cmp
04498     00 FA 0D F2 | 	cmp	result1, #0 wz
0449c     00 FA 05 56 |  if_ne	mov	result1, #0
044a0     D4 01 90 5D |  if_ne	jmp	#LR__0333
044a4                 | LR__0323
044a4                 | ' if l>2 then 
044a4     03 22 56 F2 | 	cmps	local03, #3 wc
044a8     C8 01 90 CD |  if_b	jmp	#LR__0332
044ac                 | '   for i=2 to l
044ac     02 26 06 F6 | 	mov	local05, #2
044b0     11 29 02 F6 | 	mov	local06, local03
044b4     01 28 06 F1 | 	add	local06, #1
044b8                 | LR__0324
044b8     14 27 52 F2 | 	cmps	local05, local06 wc
044bc     B4 01 90 3D |  if_ae	jmp	#LR__0331
044c0     0F 13 02 F6 | 	mov	arg01, local01
044c4     13 15 02 F6 | 	mov	arg02, local05
044c8     01 16 06 F6 | 	mov	arg03, #1
044cc     F4 6D B1 FD | 	call	#__system__Mid_S
044d0     FD 24 02 F6 | 	mov	local04, result1
044d4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
044d4     11 27 52 F2 | 	cmps	local05, local03 wc
044d8     9C 00 90 3D |  if_ae	jmp	#LR__0327
044dc     45 01 00 FF 
044e0     93 14 06 F6 | 	mov	arg02, ##@LR__4518
044e4     12 13 02 F6 | 	mov	arg01, local04
044e8     D8 4C B1 FD | 	call	#__system___string_cmp
044ec     00 FA 55 F2 | 	cmps	result1, #0 wc
044f0     18 00 90 CD |  if_b	jmp	#LR__0325
044f4     45 01 00 FF 
044f8     95 14 06 F6 | 	mov	arg02, ##@LR__4519
044fc     12 13 02 F6 | 	mov	arg01, local04
04500     C0 4C B1 FD | 	call	#__system___string_cmp
04504     01 FA 55 F2 | 	cmps	result1, #1 wc
04508     6C 00 90 CD |  if_b	jmp	#LR__0327
0450c                 | LR__0325
0450c     45 01 00 FF 
04510     97 14 06 F6 | 	mov	arg02, ##@LR__4520
04514     12 13 02 F6 | 	mov	arg01, local04
04518     A8 4C B1 FD | 	call	#__system___string_cmp
0451c     00 FA 55 F2 | 	cmps	result1, #0 wc
04520     18 00 90 CD |  if_b	jmp	#LR__0326
04524     45 01 00 FF 
04528     99 14 06 F6 | 	mov	arg02, ##@LR__4521
0452c     12 13 02 F6 | 	mov	arg01, local04
04530     90 4C B1 FD | 	call	#__system___string_cmp
04534     01 FA 55 F2 | 	cmps	result1, #1 wc
04538     3C 00 90 CD |  if_b	jmp	#LR__0327
0453c                 | LR__0326
0453c     45 01 00 FF 
04540     9B 2A 06 F6 | 	mov	local07, ##@LR__4522
04544     12 13 02 F6 | 	mov	arg01, local04
04548     15 15 02 F6 | 	mov	arg02, local07
0454c     74 4C B1 FD | 	call	#__system___string_cmp
04550     00 FA 0D F2 | 	cmp	result1, #0 wz
04554     20 00 90 AD |  if_e	jmp	#LR__0327
04558     45 01 00 FF 
0455c     9D 2C 06 F6 | 	mov	local08, ##@LR__4523
04560     12 13 02 F6 | 	mov	arg01, local04
04564     16 15 02 F6 | 	mov	arg02, local08
04568     58 4C B1 FD | 	call	#__system___string_cmp
0456c     FD 2E 0A F6 | 	mov	local09, result1 wz
04570     00 FA 05 56 |  if_ne	mov	result1, #0
04574     00 01 90 5D |  if_ne	jmp	#LR__0333
04578                 | LR__0327
04578                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04578     11 27 0A F2 | 	cmp	local05, local03 wz
0457c     EC 00 90 5D |  if_ne	jmp	#LR__0330
04580     45 01 00 FF 
04584     9F 30 06 F6 | 	mov	local10, ##@LR__4524
04588     12 13 02 F6 | 	mov	arg01, local04
0458c     18 15 02 F6 | 	mov	arg02, local10
04590     30 4C B1 FD | 	call	#__system___string_cmp
04594     FD 32 02 F6 | 	mov	local11, result1
04598     00 32 56 F2 | 	cmps	local11, #0 wc
0459c     1C 00 90 CD |  if_b	jmp	#LR__0328
045a0     45 01 00 FF 
045a4     A1 14 06 F6 | 	mov	arg02, ##@LR__4525
045a8     12 13 02 F6 | 	mov	arg01, local04
045ac     14 4C B1 FD | 	call	#__system___string_cmp
045b0     FD 30 02 F6 | 	mov	local10, result1
045b4     01 30 56 F2 | 	cmps	local10, #1 wc
045b8     B0 00 90 CD |  if_b	jmp	#LR__0330
045bc                 | LR__0328
045bc     45 01 00 FF 
045c0     A3 14 06 F6 | 	mov	arg02, ##@LR__4526
045c4     12 13 02 F6 | 	mov	arg01, local04
045c8     F8 4B B1 FD | 	call	#__system___string_cmp
045cc     00 FA 55 F2 | 	cmps	result1, #0 wc
045d0     1C 00 90 CD |  if_b	jmp	#LR__0329
045d4     45 01 00 FF 
045d8     A5 2E 06 F6 | 	mov	local09, ##@LR__4527
045dc     12 13 02 F6 | 	mov	arg01, local04
045e0     17 15 02 F6 | 	mov	arg02, local09
045e4     DC 4B B1 FD | 	call	#__system___string_cmp
045e8     01 FA 55 F2 | 	cmps	result1, #1 wc
045ec     7C 00 90 CD |  if_b	jmp	#LR__0330
045f0                 | LR__0329
045f0     45 01 00 FF 
045f4     A7 2E 06 F6 | 	mov	local09, ##@LR__4528
045f8     12 13 02 F6 | 	mov	arg01, local04
045fc     17 15 02 F6 | 	mov	arg02, local09
04600     C0 4B B1 FD | 	call	#__system___string_cmp
04604     00 FA 4D F2 | 	cmps	result1, #0 wz
04608     60 00 90 AD |  if_e	jmp	#LR__0330
0460c     45 01 00 FF 
04610     A9 2C 06 F6 | 	mov	local08, ##@LR__4529
04614     12 13 02 F6 | 	mov	arg01, local04
04618     16 15 02 F6 | 	mov	arg02, local08
0461c     A4 4B B1 FD | 	call	#__system___string_cmp
04620     FD 2E 0A F6 | 	mov	local09, result1 wz
04624     44 00 90 AD |  if_e	jmp	#LR__0330
04628     45 01 00 FF 
0462c     AB 34 06 F6 | 	mov	local12, ##@LR__4530
04630     1A 2D 02 F6 | 	mov	local08, local12
04634     12 13 02 F6 | 	mov	arg01, local04
04638     16 15 02 F6 | 	mov	arg02, local08
0463c     84 4B B1 FD | 	call	#__system___string_cmp
04640     FD 2A 0A F6 | 	mov	local07, result1 wz
04644     24 00 90 AD |  if_e	jmp	#LR__0330
04648     45 01 00 FF 
0464c     AD 36 06 F6 | 	mov	local13, ##@LR__4531
04650     1B 35 02 F6 | 	mov	local12, local13
04654     12 13 02 F6 | 	mov	arg01, local04
04658     1A 15 02 F6 | 	mov	arg02, local12
0465c     64 4B B1 FD | 	call	#__system___string_cmp
04660     FD 2C 0A F6 | 	mov	local08, result1 wz
04664     00 FA 05 56 |  if_ne	mov	result1, #0
04668     0C 00 90 5D |  if_ne	jmp	#LR__0333
0466c                 | LR__0330
0466c     01 26 06 F1 | 	add	local05, #1
04670     44 FE 9F FD | 	jmp	#LR__0324
04674                 | LR__0331
04674                 | LR__0332
04674                 | ' return true
04674     01 FA 65 F6 | 	neg	result1, #1
04678                 | LR__0333
04678     A7 F0 03 F6 | 	mov	ptra, fp
0467c     B2 00 A0 FD | 	call	#popregs_
04680                 | _isname_ret
04680     2D 00 64 FD | 	ret
04684                 | 
04684                 | ' 
04684                 | ' function isnum(s as string) as boolean
04684                 | _isnum
04684     0D 4A 05 F6 | 	mov	COUNT_, #13
04688     A8 00 A0 FD | 	call	#pushregs_
0468c     09 1F 02 F6 | 	mov	local01, arg01
04690     00 20 06 F6 | 	mov	local02, #0
04694     00 22 06 F6 | 	mov	local03, #0
04698     0F 13 02 F6 | 	mov	arg01, local01
0469c     09 25 02 F6 | 	mov	local04, arg01
046a0     97 06 48 FB | 	callpa	#(@LR__0341-@LR__0340)>>2,fcache_load_ptr_
046a4                 | LR__0340
046a4     12 FB C9 FA | 	rdbyte	result1, local04 wz
046a8     01 24 06 51 |  if_ne	add	local04, #1
046ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0340
046b0                 | LR__0341
046b0     09 25 82 F1 | 	sub	local04, arg01
046b4     12 FB 01 F6 | 	mov	result1, local04
046b8     FD 26 0A F6 | 	mov	local05, result1 wz
046bc     00 FA 05 A6 |  if_e	mov	result1, #0
046c0     8C 02 90 AD |  if_e	jmp	#LR__0352
046c4     0F 13 02 F6 | 	mov	arg01, local01
046c8     01 14 06 F6 | 	mov	arg02, #1
046cc     01 16 06 F6 | 	mov	arg03, #1
046d0     F0 6B B1 FD | 	call	#__system__Mid_S
046d4     FD 28 02 F6 | 	mov	local06, result1
046d8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
046d8     45 01 00 FF 
046dc     AF 14 06 F6 | 	mov	arg02, ##@LR__4532
046e0     14 13 02 F6 | 	mov	arg01, local06
046e4     DC 4A B1 FD | 	call	#__system___string_cmp
046e8     00 FA 55 F2 | 	cmps	result1, #0 wc
046ec     18 00 90 CD |  if_b	jmp	#LR__0342
046f0     45 01 00 FF 
046f4     B1 14 06 F6 | 	mov	arg02, ##@LR__4533
046f8     14 13 02 F6 | 	mov	arg01, local06
046fc     C4 4A B1 FD | 	call	#__system___string_cmp
04700     01 FA 55 F2 | 	cmps	result1, #1 wc
04704     78 00 90 CD |  if_b	jmp	#LR__0343
04708                 | LR__0342
04708     45 01 00 FF 
0470c     B3 14 06 F6 | 	mov	arg02, ##@LR__4534
04710     14 13 02 F6 | 	mov	arg01, local06
04714     AC 4A B1 FD | 	call	#__system___string_cmp
04718     00 FA 0D F2 | 	cmp	result1, #0 wz
0471c     60 00 90 AD |  if_e	jmp	#LR__0343
04720     45 01 00 FF 
04724     B5 2A 06 F6 | 	mov	local07, ##@LR__4535
04728     14 13 02 F6 | 	mov	arg01, local06
0472c     15 15 02 F6 | 	mov	arg02, local07
04730     90 4A B1 FD | 	call	#__system___string_cmp
04734     00 FA 0D F2 | 	cmp	result1, #0 wz
04738     44 00 90 AD |  if_e	jmp	#LR__0343
0473c     45 01 00 FF 
04740     B7 2C 06 F6 | 	mov	local08, ##@LR__4536
04744     16 2B 02 F6 | 	mov	local07, local08
04748     14 13 02 F6 | 	mov	arg01, local06
0474c     15 15 02 F6 | 	mov	arg02, local07
04750     70 4A B1 FD | 	call	#__system___string_cmp
04754     00 FA 4D F2 | 	cmps	result1, #0 wz
04758     24 00 90 AD |  if_e	jmp	#LR__0343
0475c     45 01 00 FF 
04760     B9 2E 06 F6 | 	mov	local09, ##@LR__4537
04764     17 2D 02 F6 | 	mov	local08, local09
04768     14 13 02 F6 | 	mov	arg01, local06
0476c     16 15 02 F6 | 	mov	arg02, local08
04770     50 4A B1 FD | 	call	#__system___string_cmp
04774     FD 2A 0A F6 | 	mov	local07, result1 wz
04778     00 FA 05 56 |  if_ne	mov	result1, #0
0477c     D0 01 90 5D |  if_ne	jmp	#LR__0352
04780                 | LR__0343
04780                 | ' if m$="." then ds=1
04780     45 01 00 FF 
04784     BB 14 06 F6 | 	mov	arg02, ##@LR__4538
04788     14 13 02 F6 | 	mov	arg01, local06
0478c     34 4A B1 FD | 	call	#__system___string_cmp
04790     00 FA 0D F2 | 	cmp	result1, #0 wz
04794     01 20 06 A6 |  if_e	mov	local02, #1
04798                 | ' if l>1 then 
04798     02 26 56 F2 | 	cmps	local05, #2 wc
0479c     AC 01 90 CD |  if_b	jmp	#LR__0351
047a0                 | '   for i=2 to l
047a0     02 30 06 F6 | 	mov	local10, #2
047a4     13 33 02 F6 | 	mov	local11, local05
047a8     01 32 06 F1 | 	add	local11, #1
047ac                 | LR__0344
047ac     19 31 52 F2 | 	cmps	local10, local11 wc
047b0     98 01 90 3D |  if_ae	jmp	#LR__0350
047b4     0F 13 02 F6 | 	mov	arg01, local01
047b8     18 15 02 F6 | 	mov	arg02, local10
047bc     01 16 06 F6 | 	mov	arg03, #1
047c0     00 6B B1 FD | 	call	#__system__Mid_S
047c4     FD 28 02 F6 | 	mov	local06, result1
047c8                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
047c8     45 01 00 FF 
047cc     BD 14 06 F6 | 	mov	arg02, ##@LR__4539
047d0     14 13 02 F6 | 	mov	arg01, local06
047d4     EC 49 B1 FD | 	call	#__system___string_cmp
047d8     00 FA 55 F2 | 	cmps	result1, #0 wc
047dc     18 00 90 CD |  if_b	jmp	#LR__0345
047e0     45 01 00 FF 
047e4     BF 14 06 F6 | 	mov	arg02, ##@LR__4540
047e8     14 13 02 F6 | 	mov	arg01, local06
047ec     D4 49 B1 FD | 	call	#__system___string_cmp
047f0     01 FA 55 F2 | 	cmps	result1, #1 wc
047f4     98 00 90 CD |  if_b	jmp	#LR__0346
047f8                 | LR__0345
047f8     45 01 00 FF 
047fc     C1 14 06 F6 | 	mov	arg02, ##@LR__4541
04800     14 13 02 F6 | 	mov	arg01, local06
04804     BC 49 B1 FD | 	call	#__system___string_cmp
04808     00 FA 0D F2 | 	cmp	result1, #0 wz
0480c     80 00 90 AD |  if_e	jmp	#LR__0346
04810     45 01 00 FF 
04814     C3 2A 06 F6 | 	mov	local07, ##@LR__4542
04818     14 13 02 F6 | 	mov	arg01, local06
0481c     15 15 02 F6 | 	mov	arg02, local07
04820     A0 49 B1 FD | 	call	#__system___string_cmp
04824     00 FA 4D F2 | 	cmps	result1, #0 wz
04828     64 00 90 AD |  if_e	jmp	#LR__0346
0482c     45 01 00 FF 
04830     C5 2C 06 F6 | 	mov	local08, ##@LR__4543
04834     16 2B 02 F6 | 	mov	local07, local08
04838     14 13 02 F6 | 	mov	arg01, local06
0483c     15 15 02 F6 | 	mov	arg02, local07
04840     80 49 B1 FD | 	call	#__system___string_cmp
04844     FD 34 0A F6 | 	mov	local12, result1 wz
04848     44 00 90 AD |  if_e	jmp	#LR__0346
0484c     45 01 00 FF 
04850     C7 2E 06 F6 | 	mov	local09, ##@LR__4544
04854     17 2D 02 F6 | 	mov	local08, local09
04858     14 13 02 F6 | 	mov	arg01, local06
0485c     16 15 02 F6 | 	mov	arg02, local08
04860     60 49 B1 FD | 	call	#__system___string_cmp
04864     FD 2A 0A F6 | 	mov	local07, result1 wz
04868     24 00 90 AD |  if_e	jmp	#LR__0346
0486c     45 01 00 FF 
04870     C9 36 06 F6 | 	mov	local13, ##@LR__4545
04874     1B 2F 02 F6 | 	mov	local09, local13
04878     14 13 02 F6 | 	mov	arg01, local06
0487c     17 15 02 F6 | 	mov	arg02, local09
04880     40 49 B1 FD | 	call	#__system___string_cmp
04884     FD 2C 0A F6 | 	mov	local08, result1 wz
04888     00 FA 05 56 |  if_ne	mov	result1, #0
0488c     C0 00 90 5D |  if_ne	jmp	#LR__0352
04890                 | LR__0346
04890                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
04890     45 01 00 FF 
04894     CB 14 06 F6 | 	mov	arg02, ##@LR__4546
04898     14 13 02 F6 | 	mov	arg01, local06
0489c     24 49 B1 FD | 	call	#__system___string_cmp
048a0     00 FA 0D F2 | 	cmp	result1, #0 wz
048a4     38 00 90 5D |  if_ne	jmp	#LR__0347
048a8     18 15 02 F6 | 	mov	arg02, local10
048ac     01 14 86 F1 | 	sub	arg02, #1
048b0     0F 13 02 F6 | 	mov	arg01, local01
048b4     01 16 06 F6 | 	mov	arg03, #1
048b8     08 6A B1 FD | 	call	#__system__Mid_S
048bc     FD 12 02 F6 | 	mov	arg01, result1
048c0     9C 6B B1 FD | 	call	#__system__LCase_S
048c4     FD 12 02 F6 | 	mov	arg01, result1
048c8     45 01 00 FF 
048cc     CD 14 06 F6 | 	mov	arg02, ##@LR__4547
048d0     F0 48 B1 FD | 	call	#__system___string_cmp
048d4     00 FA 0D F2 | 	cmp	result1, #0 wz
048d8     00 FA 05 56 |  if_ne	mov	result1, #0
048dc     70 00 90 5D |  if_ne	jmp	#LR__0352
048e0                 | LR__0347
048e0                 | '     if m$="." then ds+=1: if ds>1 then return false
048e0     45 01 00 FF 
048e4     CF 14 06 F6 | 	mov	arg02, ##@LR__4548
048e8     14 13 02 F6 | 	mov	arg01, local06
048ec     D4 48 B1 FD | 	call	#__system___string_cmp
048f0     00 FA 0D F2 | 	cmp	result1, #0 wz
048f4     01 20 06 A1 |  if_e	add	local02, #1
048f8     02 20 56 A2 |  if_e	cmps	local02, #2 wc
048fc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
04900     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0352
04904                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
04904     45 01 00 FF 
04908     D1 14 06 F6 | 	mov	arg02, ##@LR__4549
0490c     14 13 02 F6 | 	mov	arg01, local06
04910     B0 48 B1 FD | 	call	#__system___string_cmp
04914     00 FA 4D F2 | 	cmps	result1, #0 wz
04918     18 00 90 AD |  if_e	jmp	#LR__0348
0491c     45 01 00 FF 
04920     D3 14 06 F6 | 	mov	arg02, ##@LR__4550
04924     14 13 02 F6 | 	mov	arg01, local06
04928     98 48 B1 FD | 	call	#__system___string_cmp
0492c     00 FA 4D F2 | 	cmps	result1, #0 wz
04930     10 00 90 5D |  if_ne	jmp	#LR__0349
04934                 | LR__0348
04934     01 22 06 F1 | 	add	local03, #1
04938     02 22 56 F2 | 	cmps	local03, #2 wc
0493c     00 FA 05 36 |  if_ae	mov	result1, #0
04940     0C 00 90 3D |  if_ae	jmp	#LR__0352
04944                 | LR__0349
04944     01 30 06 F1 | 	add	local10, #1
04948     60 FE 9F FD | 	jmp	#LR__0344
0494c                 | LR__0350
0494c                 | LR__0351
0494c                 | ' return true
0494c     01 FA 65 F6 | 	neg	result1, #1
04950                 | LR__0352
04950     A7 F0 03 F6 | 	mov	ptra, fp
04954     B2 00 A0 FD | 	call	#popregs_
04958                 | _isnum_ret
04958     2D 00 64 FD | 	ret
0495c                 | 
0495c                 | '   
0495c                 | ' function isint(s as string) as boolean
0495c                 | _isint
0495c     05 4A 05 F6 | 	mov	COUNT_, #5
04960     A8 00 A0 FD | 	call	#pushregs_
04964     09 1F 02 F6 | 	mov	local01, arg01
04968     09 21 02 F6 | 	mov	local02, arg01
0496c     97 06 48 FB | 	callpa	#(@LR__0361-@LR__0360)>>2,fcache_load_ptr_
04970                 | LR__0360
04970     10 FB C9 FA | 	rdbyte	result1, local02 wz
04974     01 20 06 51 |  if_ne	add	local02, #1
04978     F4 FF 9F 5D |  if_ne	jmp	#LR__0360
0497c                 | LR__0361
0497c     09 21 82 F1 | 	sub	local02, arg01
04980     10 FB 01 F6 | 	mov	result1, local02
04984     FD 20 0A F6 | 	mov	local02, result1 wz
04988     00 FA 05 A6 |  if_e	mov	result1, #0
0498c     18 01 90 AD |  if_e	jmp	#LR__0369
04990     0F 13 02 F6 | 	mov	arg01, local01
04994     01 14 06 F6 | 	mov	arg02, #1
04998     01 16 06 F6 | 	mov	arg03, #1
0499c     24 69 B1 FD | 	call	#__system__Mid_S
049a0     FD 22 02 F6 | 	mov	local03, result1
049a4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
049a4     45 01 00 FF 
049a8     D5 14 06 F6 | 	mov	arg02, ##@LR__4551
049ac     11 13 02 F6 | 	mov	arg01, local03
049b0     10 48 B1 FD | 	call	#__system___string_cmp
049b4     00 FA 55 F2 | 	cmps	result1, #0 wc
049b8     18 00 90 CD |  if_b	jmp	#LR__0362
049bc     45 01 00 FF 
049c0     D7 14 06 F6 | 	mov	arg02, ##@LR__4552
049c4     11 13 02 F6 | 	mov	arg01, local03
049c8     F8 47 B1 FD | 	call	#__system___string_cmp
049cc     01 FA 55 F2 | 	cmps	result1, #1 wc
049d0     4C 00 90 CD |  if_b	jmp	#LR__0363
049d4                 | LR__0362
049d4     45 01 00 FF 
049d8     D9 14 06 F6 | 	mov	arg02, ##@LR__4553
049dc     11 13 02 F6 | 	mov	arg01, local03
049e0     E0 47 B1 FD | 	call	#__system___string_cmp
049e4     00 FA 0D F2 | 	cmp	result1, #0 wz
049e8     34 00 90 AD |  if_e	jmp	#LR__0363
049ec     45 01 00 FF 
049f0     DB 14 06 F6 | 	mov	arg02, ##@LR__4554
049f4     11 13 02 F6 | 	mov	arg01, local03
049f8     C8 47 B1 FD | 	call	#__system___string_cmp
049fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04a00     1C 00 90 AD |  if_e	jmp	#LR__0363
04a04     45 01 00 FF 
04a08     DD 14 06 F6 | 	mov	arg02, ##@LR__4555
04a0c     11 13 02 F6 | 	mov	arg01, local03
04a10     B0 47 B1 FD | 	call	#__system___string_cmp
04a14     00 FA 0D F2 | 	cmp	result1, #0 wz
04a18     00 FA 05 56 |  if_ne	mov	result1, #0
04a1c     88 00 90 5D |  if_ne	jmp	#LR__0369
04a20                 | LR__0363
04a20                 | ' 
04a20                 | ' if l>1 then 
04a20     02 20 56 F2 | 	cmps	local02, #2 wc
04a24     7C 00 90 CD |  if_b	jmp	#LR__0368
04a28                 | '   for i=2 to l
04a28     02 24 06 F6 | 	mov	local04, #2
04a2c     10 27 02 F6 | 	mov	local05, local02
04a30     01 26 06 F1 | 	add	local05, #1
04a34                 | LR__0364
04a34     13 25 52 F2 | 	cmps	local04, local05 wc
04a38     68 00 90 3D |  if_ae	jmp	#LR__0367
04a3c     0F 13 02 F6 | 	mov	arg01, local01
04a40     12 15 02 F6 | 	mov	arg02, local04
04a44     01 16 06 F6 | 	mov	arg03, #1
04a48     78 68 B1 FD | 	call	#__system__Mid_S
04a4c     FD 22 02 F6 | 	mov	local03, result1
04a50                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04a50     45 01 00 FF 
04a54     DF 14 06 F6 | 	mov	arg02, ##@LR__4556
04a58     11 13 02 F6 | 	mov	arg01, local03
04a5c     64 47 B1 FD | 	call	#__system___string_cmp
04a60     00 FA 55 F2 | 	cmps	result1, #0 wc
04a64     18 00 90 CD |  if_b	jmp	#LR__0365
04a68     45 01 00 FF 
04a6c     E1 14 06 F6 | 	mov	arg02, ##@LR__4557
04a70     11 13 02 F6 | 	mov	arg01, local03
04a74     4C 47 B1 FD | 	call	#__system___string_cmp
04a78     01 FA 55 F2 | 	cmps	result1, #1 wc
04a7c     1C 00 90 CD |  if_b	jmp	#LR__0366
04a80                 | LR__0365
04a80     45 01 00 FF 
04a84     E3 14 06 F6 | 	mov	arg02, ##@LR__4558
04a88     11 13 02 F6 | 	mov	arg01, local03
04a8c     34 47 B1 FD | 	call	#__system___string_cmp
04a90     00 FA 0D F2 | 	cmp	result1, #0 wz
04a94     00 FA 05 56 |  if_ne	mov	result1, #0
04a98     0C 00 90 5D |  if_ne	jmp	#LR__0369
04a9c                 | LR__0366
04a9c     01 24 06 F1 | 	add	local04, #1
04aa0     90 FF 9F FD | 	jmp	#LR__0364
04aa4                 | LR__0367
04aa4                 | LR__0368
04aa4                 | ' return true
04aa4     01 FA 65 F6 | 	neg	result1, #1
04aa8                 | LR__0369
04aa8     A7 F0 03 F6 | 	mov	ptra, fp
04aac     B2 00 A0 FD | 	call	#popregs_
04ab0                 | _isint_ret
04ab0     2D 00 64 FD | 	ret
04ab4                 | 
04ab4                 | ' 
04ab4                 | ' function isdec(s as string) as boolean
04ab4                 | _isdec
04ab4     05 4A 05 F6 | 	mov	COUNT_, #5
04ab8     A8 00 A0 FD | 	call	#pushregs_
04abc     09 1F 02 F6 | 	mov	local01, arg01
04ac0     09 21 02 F6 | 	mov	local02, arg01
04ac4     97 06 48 FB | 	callpa	#(@LR__0371-@LR__0370)>>2,fcache_load_ptr_
04ac8                 | LR__0370
04ac8     10 FB C9 FA | 	rdbyte	result1, local02 wz
04acc     01 20 06 51 |  if_ne	add	local02, #1
04ad0     F4 FF 9F 5D |  if_ne	jmp	#LR__0370
04ad4                 | LR__0371
04ad4     09 21 82 F1 | 	sub	local02, arg01
04ad8     10 FB 01 F6 | 	mov	result1, local02
04adc     FD 20 0A F6 | 	mov	local02, result1 wz
04ae0     00 FA 05 A6 |  if_e	mov	result1, #0
04ae4     80 00 90 AD |  if_e	jmp	#LR__0376
04ae8                 | ' for i=1 to l
04ae8     01 22 06 F6 | 	mov	local03, #1
04aec     10 25 02 F6 | 	mov	local04, local02
04af0     01 24 06 F1 | 	add	local04, #1
04af4                 | LR__0372
04af4     12 23 52 F2 | 	cmps	local03, local04 wc
04af8     68 00 90 3D |  if_ae	jmp	#LR__0375
04afc     0F 13 02 F6 | 	mov	arg01, local01
04b00     11 15 02 F6 | 	mov	arg02, local03
04b04     01 16 06 F6 | 	mov	arg03, #1
04b08     B8 67 B1 FD | 	call	#__system__Mid_S
04b0c     FD 26 02 F6 | 	mov	local05, result1
04b10                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
04b10     45 01 00 FF 
04b14     E5 14 06 F6 | 	mov	arg02, ##@LR__4559
04b18     13 13 02 F6 | 	mov	arg01, local05
04b1c     A4 46 B1 FD | 	call	#__system___string_cmp
04b20     00 FA 55 F2 | 	cmps	result1, #0 wc
04b24     18 00 90 CD |  if_b	jmp	#LR__0373
04b28     45 01 00 FF 
04b2c     E7 14 06 F6 | 	mov	arg02, ##@LR__4560
04b30     13 13 02 F6 | 	mov	arg01, local05
04b34     8C 46 B1 FD | 	call	#__system___string_cmp
04b38     01 FA 55 F2 | 	cmps	result1, #1 wc
04b3c     1C 00 90 CD |  if_b	jmp	#LR__0374
04b40                 | LR__0373
04b40     45 01 00 FF 
04b44     E9 14 06 F6 | 	mov	arg02, ##@LR__4561
04b48     13 13 02 F6 | 	mov	arg01, local05
04b4c     74 46 B1 FD | 	call	#__system___string_cmp
04b50     00 FA 0D F2 | 	cmp	result1, #0 wz
04b54     00 FA 05 56 |  if_ne	mov	result1, #0
04b58     0C 00 90 5D |  if_ne	jmp	#LR__0376
04b5c                 | LR__0374
04b5c     01 22 06 F1 | 	add	local03, #1
04b60     90 FF 9F FD | 	jmp	#LR__0372
04b64                 | LR__0375
04b64                 | ' return true
04b64     01 FA 65 F6 | 	neg	result1, #1
04b68                 | LR__0376
04b68     A7 F0 03 F6 | 	mov	ptra, fp
04b6c     B2 00 A0 FD | 	call	#popregs_
04b70                 | _isdec_ret
04b70     2D 00 64 FD | 	ret
04b74                 | 
04b74                 | ' 
04b74                 | ' function isstring(s as string) as boolean
04b74                 | _isstring
04b74     01 4A 05 F6 | 	mov	COUNT_, #1
04b78     A8 00 A0 FD | 	call	#pushregs_
04b7c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
04b7c     09 1F 02 F6 | 	mov	local01, arg01
04b80     01 14 06 F6 | 	mov	arg02, #1
04b84     24 66 B1 FD | 	call	#__system__Left_S
04b88     FD 12 02 F6 | 	mov	arg01, result1
04b8c     45 01 00 FF 
04b90     EB 14 06 F6 | 	mov	arg02, ##@LR__4562
04b94     2C 46 B1 FD | 	call	#__system___string_cmp
04b98     00 FA 4D F2 | 	cmps	result1, #0 wz
04b9c     28 00 90 5D |  if_ne	jmp	#LR__0380
04ba0     0F 13 02 F6 | 	mov	arg01, local01
04ba4     01 14 06 F6 | 	mov	arg02, #1
04ba8     88 66 B1 FD | 	call	#__system__Right_S
04bac     FD 12 02 F6 | 	mov	arg01, result1
04bb0     45 01 00 FF 
04bb4     ED 14 06 F6 | 	mov	arg02, ##@LR__4563
04bb8     08 46 B1 FD | 	call	#__system___string_cmp
04bbc     00 FA 4D F2 | 	cmps	result1, #0 wz
04bc0     01 FA 65 A6 |  if_e	neg	result1, #1
04bc4     04 00 90 AD |  if_e	jmp	#LR__0381
04bc8                 | LR__0380
04bc8     00 FA 05 F6 | 	mov	result1, #0
04bcc                 | LR__0381
04bcc     A7 F0 03 F6 | 	mov	ptra, fp
04bd0     B2 00 A0 FD | 	call	#popregs_
04bd4                 | _isstring_ret
04bd4     2D 00 64 FD | 	ret
04bd8                 | 
04bd8                 | ' 
04bd8                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
04bd8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04bd8                 | ' 
04bd8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04bd8                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
04bd8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04bd8                 | ' 
04bd8                 | ' '----- delete a line from a program
04bd8                 | ' 
04bd8                 | ' function deleteline(aline as ulong) as integer
04bd8                 | _deleteline
04bd8     03 4A 05 F6 | 	mov	COUNT_, #3
04bdc     A8 00 A0 FD | 	call	#pushregs_
04be0     2C F0 07 F1 | 	add	ptra, #44
04be4     04 4E 05 F1 | 	add	fp, #4
04be8     A7 12 62 FC | 	wrlong	arg01, fp
04bec     69 00 00 FF 
04bf0     48 E5 05 F1 | 	add	objptr, ##54088
04bf4     F2 1E 02 FB | 	rdlong	local01, objptr
04bf8     0C 4E 05 F1 | 	add	fp, #12
04bfc     A7 1E 62 FC | 	wrlong	local01, fp
04c00     10 4E 85 F1 | 	sub	fp, #16
04c04                 | ' 
04c04                 | ' 
04c04                 | ' searchptr=programstart
04c04                 | ' 
04c04                 | ' do
04c04     5E 00 00 FF 
04c08     88 E4 85 F1 | 	sub	objptr, ##48264
04c0c                 | LR__0390
04c0c     14 4E 05 F1 | 	add	fp, #20
04c10     A7 12 02 F6 | 	mov	arg01, fp
04c14     04 4E 85 F1 | 	sub	fp, #4
04c18     A7 14 02 FB | 	rdlong	arg02, fp
04c1c     10 4E 85 F1 | 	sub	fp, #16
04c20     18 16 06 F6 | 	mov	arg03, #24
04c24     24 3A B1 FD | 	call	#_psram_spin2_read1
04c28     10 4E 05 F1 | 	add	fp, #16
04c2c     A7 1E 02 FB | 	rdlong	local01, fp
04c30     08 4E 85 F1 | 	sub	fp, #8
04c34     A7 1E 62 FC | 	wrlong	local01, fp
04c38     20 4E 05 F1 | 	add	fp, #32
04c3c     A7 1E 02 FB | 	rdlong	local01, fp
04c40     18 4E 85 F1 | 	sub	fp, #24
04c44     A7 1E 62 FC | 	wrlong	local01, fp
04c48     04 4E 05 F1 | 	add	fp, #4
04c4c     A7 1E 02 FB | 	rdlong	local01, fp
04c50     10 4E 85 F1 | 	sub	fp, #16
04c54     A7 16 02 FB | 	rdlong	arg03, fp
04c58     04 4E 85 F1 | 	sub	fp, #4
04c5c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04c60     28 4E 05 C1 |  if_b	add	fp, #40
04c64     A7 20 02 CB |  if_b	rdlong	local02, fp
04c68     28 4E 85 C1 |  if_b	sub	fp, #40
04c6c     FF FF 3F CF 
04c70     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04c74     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0390
04c78     0B 00 00 FF 
04c7c     C0 E4 85 F1 | 	sub	objptr, ##5824
04c80                 | ' 
04c80                 | ' 
04c80                 | ' if header(0)<>aline then return -1
04c80     14 4E 05 F1 | 	add	fp, #20
04c84     A7 1E 02 FB | 	rdlong	local01, fp
04c88     10 4E 85 F1 | 	sub	fp, #16
04c8c     A7 22 02 FB | 	rdlong	local03, fp
04c90     04 4E 85 F1 | 	sub	fp, #4
04c94     11 1F 0A F2 | 	cmp	local01, local03 wz
04c98     01 FA 65 56 |  if_ne	neg	result1, #1
04c9c     58 03 90 5D |  if_ne	jmp	#LR__0396
04ca0     08 4E 05 F1 | 	add	fp, #8
04ca4     A7 12 02 FB | 	rdlong	arg01, fp
04ca8     08 4E 85 F1 | 	sub	fp, #8
04cac     01 14 66 F6 | 	neg	arg02, #1
04cb0     01 16 06 F6 | 	mov	arg03, #1
04cb4     00 18 06 F6 | 	mov	arg04, #0
04cb8     0B 00 00 FF 
04cbc     C0 E4 05 F1 | 	add	objptr, ##5824
04cc0                 | '     return fill(addr, pattern, count, listPtr, 4)
04cc0     04 1A 06 F6 | 	mov	arg05, #4
04cc4     BC 3A B1 FD | 	call	#_psram_spin2_fill
04cc8     0B 00 00 FF 
04ccc     C0 E4 85 F1 | 	sub	objptr, ##5824
04cd0                 | ' 
04cd0                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
04cd0                 | ' 
04cd0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
04cd0     28 4E 05 F1 | 	add	fp, #40
04cd4     A7 1E 02 FB | 	rdlong	local01, fp
04cd8     28 4E 85 F1 | 	sub	fp, #40
04cdc     FF FF 3F FF 
04ce0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04ce4     24 4E 05 A1 |  if_e	add	fp, #36
04ce8     A7 22 02 AB |  if_e	rdlong	local03, fp
04cec     24 4E 85 A1 |  if_e	sub	fp, #36
04cf0     FF FF 7F AF 
04cf4     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
04cf8     9C 00 90 5D |  if_ne	jmp	#LR__0391
04cfc     69 00 00 FF 
04d00     48 E5 05 F1 | 	add	objptr, ##54088
04d04     F2 00 68 FC | 	wrlong	#0, objptr
04d08     07 00 00 FF 
04d0c     28 E4 85 F1 | 	sub	objptr, ##3624
04d10     F2 00 68 FC | 	wrlong	#0, objptr
04d14     07 00 00 FF 
04d18     2C E4 05 F1 | 	add	objptr, ##3628
04d1c     F2 00 68 FC | 	wrlong	#0, objptr
04d20     04 E4 05 F1 | 	add	objptr, #4
04d24     FF FF FF FF 
04d28     F2 FE 6B FC | 	wrlong	##-1, objptr
04d2c     00 12 06 F6 | 	mov	arg01, #0
04d30     01 14 66 F6 | 	neg	arg02, #1
04d34     01 16 06 F6 | 	mov	arg03, #1
04d38     00 18 06 F6 | 	mov	arg04, #0
04d3c     5E 00 00 FF 
04d40     90 E4 85 F1 | 	sub	objptr, ##48272
04d44                 | '     return fill(addr, pattern, count, listPtr, 4)
04d44     04 1A 06 F6 | 	mov	arg05, #4
04d48     38 3A B1 FD | 	call	#_psram_spin2_fill
04d4c     10 12 06 F6 | 	mov	arg01, #16
04d50     01 14 66 F6 | 	neg	arg02, #1
04d54     01 16 06 F6 | 	mov	arg03, #1
04d58     00 18 06 F6 | 	mov	arg04, #0
04d5c                 | '     return fill(addr, pattern, count, listPtr, 4)
04d5c     04 1A 06 F6 | 	mov	arg05, #4
04d60     20 3A B1 FD | 	call	#_psram_spin2_fill
04d64     14 12 06 F6 | 	mov	arg01, #20
04d68     1E 14 CE F9 | 	bmask	arg02, #30
04d6c     01 16 06 F6 | 	mov	arg03, #1
04d70     00 18 06 F6 | 	mov	arg04, #0
04d74                 | '     return fill(addr, pattern, count, listPtr, 4)
04d74     04 1A 06 F6 | 	mov	arg05, #4
04d78     08 3A B1 FD | 	call	#_psram_spin2_fill
04d7c     6D 00 00 FF 
04d80     B4 E5 05 F1 | 	add	objptr, ##56244
04d84     F2 00 68 FC | 	wrlong	#0, objptr
04d88     04 E4 05 F1 | 	add	objptr, #4
04d8c     F2 00 68 FC | 	wrlong	#0, objptr
04d90     79 00 00 FF 
04d94     78 E4 85 F1 | 	sub	objptr, ##62072
04d98                 | LR__0391
04d98                 | ' 
04d98                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
04d98     28 4E 05 F1 | 	add	fp, #40
04d9c     A7 1E 02 FB | 	rdlong	local01, fp
04da0     28 4E 85 F1 | 	sub	fp, #40
04da4     FF FF 3F FF 
04da8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04dac     88 00 90 5D |  if_ne	jmp	#LR__0392
04db0     24 4E 05 F1 | 	add	fp, #36
04db4     A7 22 02 FB | 	rdlong	local03, fp
04db8     24 4E 85 F1 | 	sub	fp, #36
04dbc     FF FF 7F FF 
04dc0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04dc4     70 00 90 AD |  if_e	jmp	#LR__0392
04dc8     24 4E 05 F1 | 	add	fp, #36
04dcc     A7 12 02 FB | 	rdlong	arg01, fp
04dd0     24 4E 85 F1 | 	sub	fp, #36
04dd4     14 12 06 F1 | 	add	arg01, #20
04dd8     1E 14 CE F9 | 	bmask	arg02, #30
04ddc     01 16 06 F6 | 	mov	arg03, #1
04de0     00 18 06 F6 | 	mov	arg04, #0
04de4     0B 00 00 FF 
04de8     C0 E4 05 F1 | 	add	objptr, ##5824
04dec                 | '     return fill(addr, pattern, count, listPtr, 4)
04dec     04 1A 06 F6 | 	mov	arg05, #4
04df0     90 39 B1 FD | 	call	#_psram_spin2_fill
04df4     24 4E 05 F1 | 	add	fp, #36
04df8     A7 1E 02 FB | 	rdlong	local01, fp
04dfc     5E 00 00 FF 
04e00     90 E4 05 F1 | 	add	objptr, ##48272
04e04     F2 1E 62 FC | 	wrlong	local01, objptr
04e08     69 00 00 FF 
04e0c     50 E5 85 F1 | 	sub	objptr, ##54096
04e10     A7 12 02 FB | 	rdlong	arg01, fp
04e14     24 4E 85 F1 | 	sub	fp, #36
04e18     B4 0F B1 FD | 	call	#_pslpeek
04e1c     69 00 00 FF 
04e20     4C E5 05 F1 | 	add	objptr, ##54092
04e24     F2 FA 61 FC | 	wrlong	result1, objptr
04e28     69 00 00 FF 
04e2c     4C E5 85 F1 | 	sub	objptr, ##54092
04e30                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
04e30                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
04e30                 | '   lastline=pslpeek(header(4))
04e30                 | '   return 0
04e30     00 FA 05 F6 | 	mov	result1, #0
04e34     C0 01 90 FD | 	jmp	#LR__0396
04e38                 | LR__0392
04e38                 | ' 
04e38                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
04e38     28 4E 05 F1 | 	add	fp, #40
04e3c     A7 1E 02 FB | 	rdlong	local01, fp
04e40     28 4E 85 F1 | 	sub	fp, #40
04e44     FF FF 3F FF 
04e48     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04e4c     6C 00 90 AD |  if_e	jmp	#LR__0393
04e50     24 4E 05 F1 | 	add	fp, #36
04e54     A7 22 02 FB | 	rdlong	local03, fp
04e58     24 4E 85 F1 | 	sub	fp, #36
04e5c     FF FF 7F FF 
04e60     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04e64     54 00 90 5D |  if_ne	jmp	#LR__0393
04e68     28 4E 05 F1 | 	add	fp, #40
04e6c     A7 12 02 FB | 	rdlong	arg01, fp
04e70     28 4E 85 F1 | 	sub	fp, #40
04e74     10 12 06 F1 | 	add	arg01, #16
04e78     01 14 66 F6 | 	neg	arg02, #1
04e7c     01 16 06 F6 | 	mov	arg03, #1
04e80     00 18 06 F6 | 	mov	arg04, #0
04e84     0B 00 00 FF 
04e88     C0 E4 05 F1 | 	add	objptr, ##5824
04e8c                 | '     return fill(addr, pattern, count, listPtr, 4)
04e8c     04 1A 06 F6 | 	mov	arg05, #4
04e90     F0 38 B1 FD | 	call	#_psram_spin2_fill
04e94     28 4E 05 F1 | 	add	fp, #40
04e98     A7 1E 02 FB | 	rdlong	local01, fp
04e9c     28 4E 85 F1 | 	sub	fp, #40
04ea0     5E 00 00 FF 
04ea4     88 E4 05 F1 | 	add	objptr, ##48264
04ea8     F2 1E 62 FC | 	wrlong	local01, objptr
04eac     69 00 00 FF 
04eb0     48 E5 85 F1 | 	sub	objptr, ##54088
04eb4                 | ' '   print "deleted first line"
04eb4                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
04eb4                 | '   programstart=header(5) ' adjust the program start to point on the first new line
04eb4                 | '   return 0
04eb4     00 FA 05 F6 | 	mov	result1, #0
04eb8     3C 01 90 FD | 	jmp	#LR__0396
04ebc                 | LR__0393
04ebc                 | ' 
04ebc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
04ebc     28 4E 05 F1 | 	add	fp, #40
04ec0     A7 1E 02 FB | 	rdlong	local01, fp
04ec4     28 4E 85 F1 | 	sub	fp, #40
04ec8     FF FF 3F FF 
04ecc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04ed0     24 4E 05 51 |  if_ne	add	fp, #36
04ed4     A7 22 02 5B |  if_ne	rdlong	local03, fp
04ed8     24 4E 85 51 |  if_ne	sub	fp, #36
04edc     FF FF 7F 5F 
04ee0     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
04ee4     68 00 90 AD |  if_e	jmp	#LR__0394
04ee8     28 4E 05 F1 | 	add	fp, #40
04eec     A7 12 02 FB | 	rdlong	arg01, fp
04ef0     10 12 06 F1 | 	add	arg01, #16
04ef4     04 4E 85 F1 | 	sub	fp, #4
04ef8     A7 14 02 FB | 	rdlong	arg02, fp
04efc     24 4E 85 F1 | 	sub	fp, #36
04f00     01 16 06 F6 | 	mov	arg03, #1
04f04     00 18 06 F6 | 	mov	arg04, #0
04f08     0B 00 00 FF 
04f0c     C0 E4 05 F1 | 	add	objptr, ##5824
04f10                 | '     return fill(addr, pattern, count, listPtr, 4)
04f10     04 1A 06 F6 | 	mov	arg05, #4
04f14     6C 38 B1 FD | 	call	#_psram_spin2_fill
04f18     24 4E 05 F1 | 	add	fp, #36
04f1c     A7 12 02 FB | 	rdlong	arg01, fp
04f20     14 12 06 F1 | 	add	arg01, #20
04f24     04 4E 05 F1 | 	add	fp, #4
04f28     A7 14 02 FB | 	rdlong	arg02, fp
04f2c     28 4E 85 F1 | 	sub	fp, #40
04f30     01 16 06 F6 | 	mov	arg03, #1
04f34     00 18 06 F6 | 	mov	arg04, #0
04f38                 | '     return fill(addr, pattern, count, listPtr, 4)
04f38     04 1A 06 F6 | 	mov	arg05, #4
04f3c     44 38 B1 FD | 	call	#_psram_spin2_fill
04f40     0B 00 00 FF 
04f44     C0 E4 85 F1 | 	sub	objptr, ##5824
04f48                 | '    pslpoke(header(5)+16,header(4))  
04f48                 | '    pslpoke(header(4)+20, header(5))
04f48                 | '    return 0
04f48     00 FA 05 F6 | 	mov	result1, #0
04f4c     A8 00 90 FD | 	jmp	#LR__0396
04f50                 | LR__0394
04f50     10 4E 05 F1 | 	add	fp, #16
04f54     A7 1E 02 FB | 	rdlong	local01, fp
04f58     08 4E 85 F1 | 	sub	fp, #8
04f5c     A7 1E 62 FC | 	wrlong	local01, fp
04f60     69 00 00 FF 
04f64     48 E5 05 F1 | 	add	objptr, ##54088
04f68     F2 1E 02 FB | 	rdlong	local01, objptr
04f6c     08 4E 05 F1 | 	add	fp, #8
04f70     A7 1E 62 FC | 	wrlong	local01, fp
04f74     10 4E 85 F1 | 	sub	fp, #16
04f78                 | ' 
04f78                 | ' 
04f78                 | ' 
04f78                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
04f78                 | ' 
04f78                 | ' lineptr2=searchptr
04f78                 | ' searchptr=programstart
04f78                 | ' 
04f78                 | ' do
04f78     5E 00 00 FF 
04f7c     88 E4 85 F1 | 	sub	objptr, ##48264
04f80                 | LR__0395
04f80     14 4E 05 F1 | 	add	fp, #20
04f84     A7 12 02 F6 | 	mov	arg01, fp
04f88     04 4E 85 F1 | 	sub	fp, #4
04f8c     A7 14 02 FB | 	rdlong	arg02, fp
04f90     10 4E 85 F1 | 	sub	fp, #16
04f94     18 16 06 F6 | 	mov	arg03, #24
04f98     B0 36 B1 FD | 	call	#_psram_spin2_read1
04f9c     10 4E 05 F1 | 	add	fp, #16
04fa0     A7 1E 02 FB | 	rdlong	local01, fp
04fa4     08 4E 85 F1 | 	sub	fp, #8
04fa8     A7 1E 62 FC | 	wrlong	local01, fp
04fac     20 4E 05 F1 | 	add	fp, #32
04fb0     A7 1E 02 FB | 	rdlong	local01, fp
04fb4     18 4E 85 F1 | 	sub	fp, #24
04fb8     A7 1E 62 FC | 	wrlong	local01, fp
04fbc     04 4E 05 F1 | 	add	fp, #4
04fc0     A7 1E 02 FB | 	rdlong	local01, fp
04fc4     10 4E 85 F1 | 	sub	fp, #16
04fc8     A7 22 02 FB | 	rdlong	local03, fp
04fcc     04 4E 85 F1 | 	sub	fp, #4
04fd0     11 1F 12 F2 | 	cmp	local01, local03 wc
04fd4     28 4E 05 C1 |  if_b	add	fp, #40
04fd8     A7 20 02 CB |  if_b	rdlong	local02, fp
04fdc     28 4E 85 C1 |  if_b	sub	fp, #40
04fe0     FF FF 3F CF 
04fe4     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04fe8     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0395
04fec     0B 00 00 FF 
04ff0     C0 E4 85 F1 | 	sub	objptr, ##5824
04ff4     00 FA 05 F6 | 	mov	result1, #0
04ff8                 | LR__0396
04ff8     A7 F0 03 F6 | 	mov	ptra, fp
04ffc     B2 00 A0 FD | 	call	#popregs_
05000                 | _deleteline_ret
05000     2D 00 64 FD | 	ret
05004                 | 
05004                 | ' 
05004                 | ' sub save_line
05004                 | _save_line
05004     03 4A 05 F6 | 	mov	COUNT_, #3
05008     A8 00 A0 FD | 	call	#pushregs_
0500c     69 00 00 FF 
05010     40 E5 05 F1 | 	add	objptr, ##54080
05014     F2 16 02 FB | 	rdlong	arg03, objptr
05018     01 16 06 F1 | 	add	arg03, #1
0501c     05 00 00 FF 
05020     18 E4 85 F1 | 	sub	objptr, ##2584
05024     F2 14 02 FB | 	rdlong	arg02, objptr
05028     0B 15 02 FD | 	qmul	arg02, arg03
0502c     0E 00 00 FF 
05030     44 E4 85 F1 | 	sub	objptr, ##7236
05034     F2 12 02 FB | 	rdlong	arg01, objptr
05038     56 00 00 FF 
0503c     E4 E4 85 F1 | 	sub	objptr, ##44260
05040     09 1F 02 F6 | 	mov	local01, arg01
05044     18 20 62 FD | 	getqx	local02
05048     97 06 48 FB | 	callpa	#(@LR__0401-@LR__0400)>>2,fcache_load_ptr_
0504c                 | LR__0400
0504c     0F FB C9 FA | 	rdbyte	result1, local01 wz
05050     01 1E 06 51 |  if_ne	add	local01, #1
05054     F4 FF 9F 5D |  if_ne	jmp	#LR__0400
05058                 | LR__0401
05058     09 1F 82 F1 | 	sub	local01, arg01
0505c     03 1E CE F7 | 	test	local01, #3 wz
05060     02 1E 46 50 |  if_ne	shr	local01, #2
05064     01 1E 06 51 |  if_ne	add	local01, #1
05068     02 1E 66 50 |  if_ne	shl	local01, #2
0506c     10 23 02 F6 | 	mov	local03, local02
05070     0F 23 02 F1 | 	add	local03, local01
05074     62 00 00 FF 
05078     20 E5 05 F1 | 	add	objptr, ##50464
0507c     F2 16 02 FB | 	rdlong	arg03, objptr
05080     10 17 02 F1 | 	add	arg03, local02
05084     04 00 00 FF 
05088     28 E4 05 F1 | 	add	objptr, ##2088
0508c     F2 16 62 FC | 	wrlong	arg03, objptr
05090     04 E4 05 F1 | 	add	objptr, #4
05094     F2 1E 62 FC | 	wrlong	local01, objptr
05098     0C E4 85 F1 | 	sub	objptr, #12
0509c     F2 12 02 F6 | 	mov	arg01, objptr
050a0     04 00 00 FF 
050a4     20 E4 85 F1 | 	sub	objptr, ##2080
050a8     F2 14 02 FB | 	rdlong	arg02, objptr
050ac     10 17 02 F6 | 	mov	arg03, local02
050b0     57 00 00 FF 
050b4     60 E4 85 F1 | 	sub	objptr, ##44640
050b8     2C 36 B1 FD | 	call	#_psram_spin2_write
050bc     4B 00 00 FF 
050c0     24 E4 05 F1 | 	add	objptr, ##38436
050c4     F2 12 02 FB | 	rdlong	arg01, objptr
050c8     0C 00 00 FF 
050cc     3C E4 05 F1 | 	add	objptr, ##6204
050d0     F2 14 02 FB | 	rdlong	arg02, objptr
050d4     10 15 02 F1 | 	add	arg02, local02
050d8     0F 17 02 F6 | 	mov	arg03, local01
050dc     57 00 00 FF 
050e0     60 E4 85 F1 | 	sub	objptr, ##44640
050e4     00 36 B1 FD | 	call	#_psram_spin2_write
050e8     57 00 00 FF 
050ec     60 E4 05 F1 | 	add	objptr, ##44640
050f0     F2 1E 02 FB | 	rdlong	local01, objptr
050f4     11 1F 02 F1 | 	add	local01, local03
050f8     F2 1E 62 FC | 	wrlong	local01, objptr
050fc     62 00 00 FF 
05100     20 E5 85 F1 | 	sub	objptr, ##50464
05104     A7 F0 03 F6 | 	mov	ptra, fp
05108     B2 00 A0 FD | 	call	#popregs_
0510c                 | _save_line_ret
0510c     2D 00 64 FD | 	ret
05110                 | 
05110                 | ' 
05110                 | ' 
05110                 | ' function insertline(aline as ulong) as integer
05110                 | _insertline
05110     02 4A 05 F6 | 	mov	COUNT_, #2
05114     A8 00 A0 FD | 	call	#pushregs_
05118     28 F0 07 F1 | 	add	ptra, #40
0511c     04 4E 05 F1 | 	add	fp, #4
05120     A7 12 62 FC | 	wrlong	arg01, fp
05124     69 00 00 FF 
05128     48 E5 05 F1 | 	add	objptr, ##54088
0512c     F2 1E 02 FB | 	rdlong	local01, objptr
05130     04 4E 05 F1 | 	add	fp, #4
05134     A7 1E 62 FC | 	wrlong	local01, fp
05138     08 4E 85 F1 | 	sub	fp, #8
0513c                 | ' 
0513c                 | ' do
0513c     5E 00 00 FF 
05140     88 E4 85 F1 | 	sub	objptr, ##48264
05144                 | LR__0410
05144     10 4E 05 F1 | 	add	fp, #16
05148     A7 12 02 F6 | 	mov	arg01, fp
0514c     08 4E 85 F1 | 	sub	fp, #8
05150     A7 14 02 FB | 	rdlong	arg02, fp
05154     08 4E 85 F1 | 	sub	fp, #8
05158     18 16 06 F6 | 	mov	arg03, #24
0515c     EC 34 B1 FD | 	call	#_psram_spin2_read1
05160     08 4E 05 F1 | 	add	fp, #8
05164     A7 1E 02 FB | 	rdlong	local01, fp
05168     04 4E 05 F1 | 	add	fp, #4
0516c     A7 1E 62 FC | 	wrlong	local01, fp
05170     18 4E 05 F1 | 	add	fp, #24
05174     A7 1E 02 FB | 	rdlong	local01, fp
05178     1C 4E 85 F1 | 	sub	fp, #28
0517c     A7 1E 62 FC | 	wrlong	local01, fp
05180     08 4E 05 F1 | 	add	fp, #8
05184     A7 1E 02 FB | 	rdlong	local01, fp
05188     0C 4E 85 F1 | 	sub	fp, #12
0518c     A7 16 02 FB | 	rdlong	arg03, fp
05190     04 4E 85 F1 | 	sub	fp, #4
05194     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05198     24 4E 05 C1 |  if_b	add	fp, #36
0519c     A7 20 02 CB |  if_b	rdlong	local02, fp
051a0     24 4E 85 C1 |  if_b	sub	fp, #36
051a4     FF FF 3F CF 
051a8     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
051ac     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0410
051b0     0B 00 00 FF 
051b4     C0 E4 85 F1 | 	sub	objptr, ##5824
051b8                 | ' 
051b8                 | ' if header(0)=aline then return -1 ' delete it first
051b8     10 4E 05 F1 | 	add	fp, #16
051bc     A7 1E 02 FB | 	rdlong	local01, fp
051c0     0C 4E 85 F1 | 	sub	fp, #12
051c4     A7 20 02 FB | 	rdlong	local02, fp
051c8     04 4E 85 F1 | 	sub	fp, #4
051cc     10 1F 0A F2 | 	cmp	local01, local02 wz
051d0     01 FA 65 A6 |  if_e	neg	result1, #1
051d4     74 01 90 AD |  if_e	jmp	#LR__0413
051d8                 | ' if header(0)<aline then return -2 ' end of program reached
051d8     10 4E 05 F1 | 	add	fp, #16
051dc     A7 1E 02 FB | 	rdlong	local01, fp
051e0     0C 4E 85 F1 | 	sub	fp, #12
051e4     A7 16 02 FB | 	rdlong	arg03, fp
051e8     04 4E 85 F1 | 	sub	fp, #4
051ec     0B 1F 12 F2 | 	cmp	local01, arg03 wc
051f0     02 FA 65 C6 |  if_b	neg	result1, #2
051f4     54 01 90 CD |  if_b	jmp	#LR__0413
051f8                 | ' 
051f8                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
051f8     20 4E 05 F1 | 	add	fp, #32
051fc     A7 1E 02 FB | 	rdlong	local01, fp
05200     20 4E 85 F1 | 	sub	fp, #32
05204     FF FF 7F FF 
05208     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0520c     84 00 90 5D |  if_ne	jmp	#LR__0411
05210     62 00 00 FF 
05214     20 E5 05 F1 | 	add	objptr, ##50464
05218     F2 1E 02 FB | 	rdlong	local01, objptr
0521c     07 00 00 FF 
05220     28 E4 05 F1 | 	add	objptr, ##3624
05224     F2 1E 62 FC | 	wrlong	local01, objptr
05228     0C 4E 05 F1 | 	add	fp, #12
0522c     A7 12 02 FB | 	rdlong	arg01, fp
05230     0C 4E 85 F1 | 	sub	fp, #12
05234     10 12 06 F1 | 	add	arg01, #16
05238     07 00 00 FF 
0523c     28 E4 85 F1 | 	sub	objptr, ##3624
05240     F2 14 02 FB | 	rdlong	arg02, objptr
05244     01 16 06 F6 | 	mov	arg03, #1
05248     00 18 06 F6 | 	mov	arg04, #0
0524c     57 00 00 FF 
05250     60 E4 85 F1 | 	sub	objptr, ##44640
05254                 | '     return fill(addr, pattern, count, listPtr, 4)
05254     04 1A 06 F6 | 	mov	arg05, #4
05258     28 35 B1 FD | 	call	#_psram_spin2_fill
0525c     5B 00 00 FF 
05260     90 E4 05 F1 | 	add	objptr, ##46736
05264     FF FF FF FF 
05268     F2 FE 6B FC | 	wrlong	##-1, objptr
0526c     0C 4E 05 F1 | 	add	fp, #12
05270     A7 1E 02 FB | 	rdlong	local01, fp
05274     0C 4E 85 F1 | 	sub	fp, #12
05278     04 E4 05 F1 | 	add	objptr, #4
0527c     F2 1E 62 FC | 	wrlong	local01, objptr
05280     66 00 00 FF 
05284     54 E5 85 F1 | 	sub	objptr, ##52564
05288     78 FD BF FD | 	call	#_save_line
0528c                 | '   programstart=programptr
0528c                 | '   pslpoke(lineptr2+16,programptr)
0528c                 | '   ucompiledline(4)=$FFFF_FFFF
0528c                 | '   ucompiledline(5)=lineptr2
0528c                 | '   save_line
0528c                 | '   return 0
0528c     00 FA 05 F6 | 	mov	result1, #0
05290     B8 00 90 FD | 	jmp	#LR__0413
05294                 | LR__0411
05294                 | ' 
05294                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05294     20 4E 05 F1 | 	add	fp, #32
05298     A7 1E 02 FB | 	rdlong	local01, fp
0529c     20 4E 85 F1 | 	sub	fp, #32
052a0     FF FF 7F FF 
052a4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
052a8     9C 00 90 AD |  if_e	jmp	#LR__0412
052ac     20 4E 05 F1 | 	add	fp, #32
052b0     A7 1E 02 FB | 	rdlong	local01, fp
052b4     66 00 00 FF 
052b8     50 E5 05 F1 | 	add	objptr, ##52560
052bc     F2 1E 62 FC | 	wrlong	local01, objptr
052c0     14 4E 85 F1 | 	sub	fp, #20
052c4     A7 1E 02 FB | 	rdlong	local01, fp
052c8     04 E4 05 F1 | 	add	objptr, #4
052cc     F2 1E 62 FC | 	wrlong	local01, objptr
052d0     A7 12 02 FB | 	rdlong	arg01, fp
052d4     0C 4E 85 F1 | 	sub	fp, #12
052d8     10 12 06 F1 | 	add	arg01, #16
052dc     04 00 00 FF 
052e0     34 E4 85 F1 | 	sub	objptr, ##2100
052e4     F2 14 02 FB | 	rdlong	arg02, objptr
052e8     01 16 06 F6 | 	mov	arg03, #1
052ec     00 18 06 F6 | 	mov	arg04, #0
052f0     57 00 00 FF 
052f4     60 E4 85 F1 | 	sub	objptr, ##44640
052f8                 | '     return fill(addr, pattern, count, listPtr, 4)
052f8     04 1A 06 F6 | 	mov	arg05, #4
052fc     84 34 B1 FD | 	call	#_psram_spin2_fill
05300     20 4E 05 F1 | 	add	fp, #32
05304     A7 12 02 FB | 	rdlong	arg01, fp
05308     20 4E 85 F1 | 	sub	fp, #32
0530c     14 12 06 F1 | 	add	arg01, #20
05310     57 00 00 FF 
05314     60 E4 05 F1 | 	add	objptr, ##44640
05318     F2 14 02 FB | 	rdlong	arg02, objptr
0531c     01 16 06 F6 | 	mov	arg03, #1
05320     00 18 06 F6 | 	mov	arg04, #0
05324     57 00 00 FF 
05328     60 E4 85 F1 | 	sub	objptr, ##44640
0532c                 | '     return fill(addr, pattern, count, listPtr, 4)
0532c     04 1A 06 F6 | 	mov	arg05, #4
05330     50 34 B1 FD | 	call	#_psram_spin2_fill
05334     0B 00 00 FF 
05338     C0 E4 85 F1 | 	sub	objptr, ##5824
0533c     C4 FC BF FD | 	call	#_save_line
05340                 | '   ucompiledline(4)=header(4)
05340                 | '   ucompiledline(5)=lineptr2
05340                 | '   pslpoke(lineptr2+16,programptr)
05340                 | '   pslpoke(header(4)+20,programptr)
05340                 | '   save_line
05340                 | '   return 0
05340     00 FA 05 F6 | 	mov	result1, #0
05344     04 00 90 FD | 	jmp	#LR__0413
05348                 | LR__0412
05348     00 FA 05 F6 | 	mov	result1, #0
0534c                 | LR__0413
0534c     A7 F0 03 F6 | 	mov	ptra, fp
05350     B2 00 A0 FD | 	call	#popregs_
05354                 | _insertline_ret
05354     2D 00 64 FD | 	ret
05358                 | 
05358                 | ' 
05358                 | ' sub add_line_at_end(aline) 
05358                 | _add_line_at_end
05358     69 00 00 FF 
0535c     4C E5 05 F1 | 	add	objptr, ##54092
05360     F2 12 62 FC | 	wrlong	arg01, objptr
05364     04 E4 05 F1 | 	add	objptr, #4
05368     F2 14 02 FB | 	rdlong	arg02, objptr
0536c     03 00 00 FF 
05370     00 E4 85 F1 | 	sub	objptr, ##1536
05374     F2 14 62 FC | 	wrlong	arg02, objptr
05378     03 00 00 FF 
0537c     00 E4 05 F1 | 	add	objptr, ##1536
05380     F2 12 02 FB | 	rdlong	arg01, objptr
05384     14 12 06 F1 | 	add	arg01, #20
05388     07 00 00 FF 
0538c     30 E4 85 F1 | 	sub	objptr, ##3632
05390     F2 14 02 FB | 	rdlong	arg02, objptr
05394     01 16 06 F6 | 	mov	arg03, #1
05398     00 18 06 F6 | 	mov	arg04, #0
0539c     57 00 00 FF 
053a0     60 E4 85 F1 | 	sub	objptr, ##44640
053a4                 | '     return fill(addr, pattern, count, listPtr, 4)
053a4     04 1A 06 F6 | 	mov	arg05, #4
053a8     D8 33 B1 FD | 	call	#_psram_spin2_fill
053ac     57 00 00 FF 
053b0     60 E4 05 F1 | 	add	objptr, ##44640
053b4     F2 14 02 FB | 	rdlong	arg02, objptr
053b8     07 00 00 FF 
053bc     30 E4 05 F1 | 	add	objptr, ##3632
053c0     F2 14 62 FC | 	wrlong	arg02, objptr
053c4     02 00 00 FF 
053c8     FC E5 85 F1 | 	sub	objptr, ##1532
053cc     FF FF BF FF 
053d0     F2 FE 6B FC | 	wrlong	##2147483647, objptr
053d4                 | ' 
053d4                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
053d4                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
053d4     04 00 00 FF 
053d8     34 E4 85 F1 | 	sub	objptr, ##2100
053dc     F2 14 0A FB | 	rdlong	arg02, objptr wz
053e0     62 00 00 FF 
053e4     20 E5 85 F1 | 	sub	objptr, ##50464
053e8     66 00 00 AF 
053ec     50 E5 05 A1 |  if_e	add	objptr, ##52560
053f0     FF FF FF AF 
053f4     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
053f8     66 00 00 AF 
053fc     50 E5 85 A1 |  if_e	sub	objptr, ##52560
05400     00 FC BF FD | 	call	#_save_line
05404     62 00 00 FF 
05408     20 E5 05 F1 | 	add	objptr, ##50464
0540c     F2 12 02 FB | 	rdlong	arg01, objptr
05410     01 14 66 F6 | 	neg	arg02, #1
05414     01 16 06 F6 | 	mov	arg03, #1
05418     00 18 06 F6 | 	mov	arg04, #0
0541c     57 00 00 FF 
05420     60 E4 85 F1 | 	sub	objptr, ##44640
05424                 | '     return fill(addr, pattern, count, listPtr, 4)
05424     04 1A 06 F6 | 	mov	arg05, #4
05428     58 33 B1 FD | 	call	#_psram_spin2_fill
0542c     0B 00 00 FF 
05430     C0 E4 85 F1 | 	sub	objptr, ##5824
05434                 | _add_line_at_end_ret
05434     2D 00 64 FD | 	ret
05438                 | 
05438                 | ' 
05438                 | ' function compile_immediate(linetype as ulong) as integer
05438                 | _compile_immediate
05438     09 4A 05 F6 | 	mov	COUNT_, #9
0543c     A8 00 A0 FD | 	call	#pushregs_
05440                 | _compile_immediate_enter
05440     09 25 0A F6 | 	mov	local04, arg01 wz
05444     00 26 06 F6 | 	mov	local05, #0
05448     00 28 06 F6 | 	mov	local06, #0
0544c                 | ' 
0544c                 | ' ' linetype=cont+1, linetype=0 immediate
0544c                 | ' '  : 1: this is the first part of the line that will continue
0544c                 | ' ' 2 - this is the continuation of the line
0544c                 | ' ' 3 - this is the last continued line
0544c                 | ' ' 4 - this is the one and only part
0544c                 | ' 
0544c                 | ' err=0
0544c                 | ' cmd=0
0544c                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
0544c     2C 00 90 5D |  if_ne	jmp	#LR__0420
05450     54 00 00 FF 
05454     D4 E4 05 F1 | 	add	objptr, ##43220
05458     F2 28 02 FB | 	rdlong	local06, objptr
0545c     02 00 00 FF 
05460     34 E4 05 F1 | 	add	objptr, ##1076
05464     F2 02 68 FC | 	wrlong	#1, objptr
05468     13 00 00 FF 
0546c     38 E4 05 F1 | 	add	objptr, ##9784
05470     F2 00 68 FC | 	wrlong	#0, objptr
05474     69 00 00 FF 
05478     40 E5 85 F1 | 	sub	objptr, ##54080
0547c                 | LR__0420
0547c                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
0547c     02 24 0E F2 | 	cmp	local04, #2 wz
05480     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05484     54 00 00 AF 
05488     D4 E4 05 A1 |  if_e	add	objptr, ##43220
0548c     F2 28 02 AB |  if_e	rdlong	local06, objptr
05490     02 00 00 AF 
05494     34 E4 05 A1 |  if_e	add	objptr, ##1076
05498     F2 02 68 AC |  if_e	wrlong	#1, objptr
0549c     56 00 00 AF 
054a0     08 E5 85 A1 |  if_e	sub	objptr, ##44296
054a4                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
054a4     04 24 0E F2 | 	cmp	local04, #4 wz
054a8     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
054ac     2C 00 90 5D |  if_ne	jmp	#LR__0421
054b0     54 00 00 FF 
054b4     DC E4 05 F1 | 	add	objptr, ##43228
054b8     F2 28 02 FB | 	rdlong	local06, objptr
054bc     02 00 00 FF 
054c0     2C E4 05 F1 | 	add	objptr, ##1068
054c4     F2 04 68 FC | 	wrlong	#2, objptr
054c8     13 00 00 FF 
054cc     38 E4 05 F1 | 	add	objptr, ##9784
054d0     F2 04 68 FC | 	wrlong	#2, objptr
054d4     69 00 00 FF 
054d8     40 E5 85 F1 | 	sub	objptr, ##54080
054dc                 | LR__0421
054dc                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
054dc     05 24 0E F2 | 	cmp	local04, #5 wz
054e0     40 00 90 5D |  if_ne	jmp	#LR__0422
054e4     56 00 00 FF 
054e8     08 E5 05 F1 | 	add	objptr, ##44296
054ec     F2 2A 02 FB | 	rdlong	local07, objptr
054f0     15 29 02 F6 | 	mov	local06, local07
054f4     03 28 66 F0 | 	shl	local06, #3
054f8     02 00 00 FF 
054fc     38 E4 85 F1 | 	sub	objptr, ##1080
05500     F2 28 02 F1 | 	add	local06, objptr
05504     04 28 06 F1 | 	add	local06, #4
05508     14 29 02 FB | 	rdlong	local06, local06
0550c     01 2A 06 F1 | 	add	local07, #1
05510     02 00 00 FF 
05514     38 E4 05 F1 | 	add	objptr, ##1080
05518     F2 2A 62 FC | 	wrlong	local07, objptr
0551c     56 00 00 FF 
05520     08 E5 85 F1 | 	sub	objptr, ##44296
05524                 | LR__0422
05524     00 2C 06 F6 | 	mov	local08, #0
05528                 | ' vars=0
05528                 | ' 'print  "In compile_immediate cmd=:", cmd
05528                 | ' 451 select case cmd
05528     5C 28 0E F2 | 	cmp	local06, #92 wz
0552c     AC 01 90 AD |  if_e	jmp	#LR__0423
05530     47 28 0E F2 | 	cmp	local06, #71 wz
05534     B0 01 90 AD |  if_e	jmp	#LR__0424
05538     59 28 0E F2 | 	cmp	local06, #89 wz
0553c     B4 01 90 AD |  if_e	jmp	#LR__0425
05540     45 28 0E F2 | 	cmp	local06, #69 wz
05544     B8 01 90 AD |  if_e	jmp	#LR__0426
05548     69 28 0E F2 | 	cmp	local06, #105 wz
0554c     BC 01 90 AD |  if_e	jmp	#LR__0427
05550     40 28 0E F2 | 	cmp	local06, #64 wz
05554     AC 03 90 AD |  if_e	jmp	#LR__0471
05558     49 28 0E F2 | 	cmp	local06, #73 wz
0555c     B8 01 90 AD |  if_e	jmp	#LR__0428
05560     50 28 0E F2 | 	cmp	local06, #80 wz
05564     BC 01 90 AD |  if_e	jmp	#LR__0429
05568     68 28 0E F2 | 	cmp	local06, #104 wz
0556c     C0 01 90 AD |  if_e	jmp	#LR__0430
05570     74 28 0E F2 | 	cmp	local06, #116 wz
05574     C4 01 90 AD |  if_e	jmp	#LR__0431
05578     73 28 0E F2 | 	cmp	local06, #115 wz
0557c     C8 01 90 AD |  if_e	jmp	#LR__0432
05580     6C 28 0E F2 | 	cmp	local06, #108 wz
05584     CC 01 90 AD |  if_e	jmp	#LR__0433
05588     89 28 0E F2 | 	cmp	local06, #137 wz
0558c     74 03 90 AD |  if_e	jmp	#LR__0471
05590     72 28 0E F2 | 	cmp	local06, #114 wz
05594     C8 01 90 AD |  if_e	jmp	#LR__0434
05598     5D 28 0E F2 | 	cmp	local06, #93 wz
0559c     64 03 90 AD |  if_e	jmp	#LR__0471
055a0     43 28 0E F2 | 	cmp	local06, #67 wz
055a4     C0 01 90 AD |  if_e	jmp	#LR__0435
055a8     5A 28 0E F2 | 	cmp	local06, #90 wz
055ac     C4 01 90 AD |  if_e	jmp	#LR__0436
055b0     4E 28 0E F2 | 	cmp	local06, #78 wz
055b4     C4 01 90 AD |  if_e	jmp	#LR__0437
055b8     46 28 0E F2 | 	cmp	local06, #70 wz
055bc     D8 01 90 AD |  if_e	jmp	#LR__0439
055c0     71 28 0E F2 | 	cmp	local06, #113 wz
055c4     DC 01 90 AD |  if_e	jmp	#LR__0440
055c8     60 28 0E F2 | 	cmp	local06, #96 wz
055cc     E0 01 90 AD |  if_e	jmp	#LR__0441
055d0     4A 28 0E F2 | 	cmp	local06, #74 wz
055d4     E4 01 90 AD |  if_e	jmp	#LR__0442
055d8     48 28 0E F2 | 	cmp	local06, #72 wz
055dc     E4 01 90 AD |  if_e	jmp	#LR__0443
055e0     58 28 0E F2 | 	cmp	local06, #88 wz
055e4     E8 01 90 AD |  if_e	jmp	#LR__0444
055e8     5F 28 0E F2 | 	cmp	local06, #95 wz
055ec     E8 01 90 AD |  if_e	jmp	#LR__0445
055f0     8A 28 0E F2 | 	cmp	local06, #138 wz
055f4     EC 01 90 AD |  if_e	jmp	#LR__0446
055f8     4C 28 0E F2 | 	cmp	local06, #76 wz
055fc     F0 01 90 AD |  if_e	jmp	#LR__0447
05600     52 28 0E F2 | 	cmp	local06, #82 wz
05604     F4 01 90 AD |  if_e	jmp	#LR__0448
05608     61 28 0E F2 | 	cmp	local06, #97 wz
0560c     F8 01 90 AD |  if_e	jmp	#LR__0449
05610     63 28 0E F2 | 	cmp	local06, #99 wz
05614     FC 01 90 AD |  if_e	jmp	#LR__0450
05618     41 28 0E F2 | 	cmp	local06, #65 wz
0561c     E4 02 90 AD |  if_e	jmp	#LR__0471
05620     4B 28 0E F2 | 	cmp	local06, #75 wz
05624     F8 01 90 AD |  if_e	jmp	#LR__0451
05628     5E 28 0E F2 | 	cmp	local06, #94 wz
0562c     F8 01 90 AD |  if_e	jmp	#LR__0452
05630     7C 28 0E F2 | 	cmp	local06, #124 wz
05634     FC 01 90 AD |  if_e	jmp	#LR__0453
05638     7D 28 0E F2 | 	cmp	local06, #125 wz
0563c     00 02 90 AD |  if_e	jmp	#LR__0454
05640     7E 28 0E F2 | 	cmp	local06, #126 wz
05644     04 02 90 AD |  if_e	jmp	#LR__0455
05648     7F 28 0E F2 | 	cmp	local06, #127 wz
0564c     08 02 90 AD |  if_e	jmp	#LR__0456
05650     80 28 0E F2 | 	cmp	local06, #128 wz
05654     0C 02 90 AD |  if_e	jmp	#LR__0457
05658     55 28 0E F2 | 	cmp	local06, #85 wz
0565c     10 02 90 AD |  if_e	jmp	#LR__0458
05660     75 28 0E F2 | 	cmp	local06, #117 wz
05664     14 02 90 AD |  if_e	jmp	#LR__0459
05668     42 28 0E F2 | 	cmp	local06, #66 wz
0566c     18 02 90 AD |  if_e	jmp	#LR__0460
05670     81 28 0E F2 | 	cmp	local06, #129 wz
05674     1C 02 90 AD |  if_e	jmp	#LR__0461
05678     44 28 0E F2 | 	cmp	local06, #68 wz
0567c     20 02 90 AD |  if_e	jmp	#LR__0462
05680     88 28 0E F2 | 	cmp	local06, #136 wz
05684     4D 28 0E 52 |  if_ne	cmp	local06, #77 wz
05688     78 02 90 AD |  if_e	jmp	#LR__0471
0568c     51 28 0E F2 | 	cmp	local06, #81 wz
05690     18 02 90 AD |  if_e	jmp	#LR__0463
05694     6D 28 0E F2 | 	cmp	local06, #109 wz
05698     1C 02 90 AD |  if_e	jmp	#LR__0464
0569c     70 28 0E F2 | 	cmp	local06, #112 wz
056a0     60 02 90 AD |  if_e	jmp	#LR__0471
056a4     56 28 0E F2 | 	cmp	local06, #86 wz
056a8     18 02 90 AD |  if_e	jmp	#LR__0465
056ac     57 28 0E F2 | 	cmp	local06, #87 wz
056b0     50 02 90 AD |  if_e	jmp	#LR__0471
056b4     79 28 0E F2 | 	cmp	local06, #121 wz
056b8     14 02 90 AD |  if_e	jmp	#LR__0466
056bc     77 28 0E F2 | 	cmp	local06, #119 wz
056c0     18 02 90 AD |  if_e	jmp	#LR__0467
056c4     78 28 0E F2 | 	cmp	local06, #120 wz
056c8     1C 02 90 AD |  if_e	jmp	#LR__0468
056cc     01 00 00 FF 
056d0     04 28 0E F2 | 	cmp	local06, ##516 wz
056d4     1C 02 90 AD |  if_e	jmp	#LR__0469
056d8     20 02 90 FD | 	jmp	#LR__0470
056dc                 | LR__0423
056dc     5C 0B B0 FD | 	call	#_compile_fun_2p
056e0     FD 26 02 F6 | 	mov	local05, result1
056e4     1C 02 90 FD | 	jmp	#LR__0471
056e8                 | LR__0424
056e8     90 0C B0 FD | 	call	#_compile_fun_4p
056ec     FD 26 02 F6 | 	mov	local05, result1
056f0     10 02 90 FD | 	jmp	#LR__0471
056f4                 | LR__0425
056f4     90 2D B0 FD | 	call	#_expr
056f8                 | ' expr()
056f8                 | ' return 0
056f8     00 26 06 F6 | 	mov	local05, #0
056fc     04 02 90 FD | 	jmp	#LR__0471
05700                 | LR__0426
05700     AC 0B B0 FD | 	call	#_compile_fun_3p
05704     FD 26 02 F6 | 	mov	local05, result1
05708     F8 01 90 FD | 	jmp	#LR__0471
0570c                 | LR__0427
0570c     78 2D B0 FD | 	call	#_expr
05710                 | ' expr()
05710                 | ' return 0
05710     00 26 06 F6 | 	mov	local05, #0
05714     EC 01 90 FD | 	jmp	#LR__0471
05718                 | LR__0428
05718     6C 2D B0 FD | 	call	#_expr
0571c                 | ' expr()
0571c                 | ' return 0
0571c     00 26 06 F6 | 	mov	local05, #0
05720     E0 01 90 FD | 	jmp	#LR__0471
05724                 | LR__0429
05724     F4 0E B0 FD | 	call	#_compile_fun_varp
05728     FD 2C 02 F6 | 	mov	local08, result1
0572c     D4 01 90 FD | 	jmp	#LR__0471
05730                 | LR__0430
05730     54 2D B0 FD | 	call	#_expr
05734                 | ' expr()
05734                 | ' return 0
05734     00 26 06 F6 | 	mov	local05, #0
05738     C8 01 90 FD | 	jmp	#LR__0471
0573c                 | LR__0431
0573c     DC 0E B0 FD | 	call	#_compile_fun_varp
05740     FD 2C 02 F6 | 	mov	local08, result1
05744     BC 01 90 FD | 	jmp	#LR__0471
05748                 | LR__0432
05748     D0 0E B0 FD | 	call	#_compile_fun_varp
0574c     FD 2C 02 F6 | 	mov	local08, result1
05750     B0 01 90 FD | 	jmp	#LR__0471
05754                 | LR__0433
05754     48 0D B0 FD | 	call	#_compile_fun_5p
05758     FD 26 02 F6 | 	mov	local05, result1
0575c     A4 01 90 FD | 	jmp	#LR__0471
05760                 | LR__0434
05760     A4 18 B0 FD | 	call	#_compile_dim
05764     58 02 90 FD | 	jmp	#LR__0472
05768                 | LR__0435
05768     D0 0A B0 FD | 	call	#_compile_fun_2p
0576c     FD 26 02 F6 | 	mov	local05, result1
05770     90 01 90 FD | 	jmp	#LR__0471
05774                 | LR__0436
05774     68 17 B0 FD | 	call	#_compile_else
05778     44 02 90 FD | 	jmp	#LR__0472
0577c                 | LR__0437
0577c     01 24 16 F2 | 	cmp	local04, #1 wc
05780     08 00 90 CD |  if_b	jmp	#LR__0438
05784     A0 29 B0 FD | 	call	#_compile_goto
05788     34 02 90 FD | 	jmp	#LR__0472
0578c                 | LR__0438
0578c     19 12 06 F6 | 	mov	arg01, #25
05790     80 04 B1 FD | 	call	#_printerror
05794     28 02 90 FD | 	jmp	#LR__0472
05798                 | LR__0439
05798     14 0B B0 FD | 	call	#_compile_fun_3p
0579c     FD 26 02 F6 | 	mov	local05, result1
057a0     60 01 90 FD | 	jmp	#LR__0471
057a4                 | LR__0440
057a4     D4 0B B0 FD | 	call	#_compile_fun_4p
057a8     FD 26 02 F6 | 	mov	local05, result1
057ac     54 01 90 FD | 	jmp	#LR__0471
057b0                 | LR__0441
057b0     D4 2C B0 FD | 	call	#_expr
057b4                 | ' expr()
057b4                 | ' return 0
057b4     00 26 06 F6 | 	mov	local05, #0
057b8     48 01 90 FD | 	jmp	#LR__0471
057bc                 | LR__0442
057bc     90 1F B0 FD | 	call	#_compile_for
057c0     FC 01 90 FD | 	jmp	#LR__0472
057c4                 | LR__0443
057c4     B4 0B B0 FD | 	call	#_compile_fun_4p
057c8     FD 26 02 F6 | 	mov	local05, result1
057cc     34 01 90 FD | 	jmp	#LR__0471
057d0                 | LR__0444
057d0     CC 15 B0 FD | 	call	#_compile_if
057d4     E8 01 90 FD | 	jmp	#LR__0472
057d8                 | LR__0445
057d8     AC 2C B0 FD | 	call	#_expr
057dc                 | ' expr()
057dc                 | ' return 0
057dc     00 26 06 F6 | 	mov	local05, #0
057e0     20 01 90 FD | 	jmp	#LR__0471
057e4                 | LR__0446
057e4     A0 2C B0 FD | 	call	#_expr
057e8                 | ' expr()
057e8                 | ' return 0
057e8     00 26 06 F6 | 	mov	local05, #0
057ec     14 01 90 FD | 	jmp	#LR__0471
057f0                 | LR__0447
057f0     28 0E B0 FD | 	call	#_compile_fun_varp
057f4     FD 2C 02 F6 | 	mov	local08, result1
057f8     08 01 90 FD | 	jmp	#LR__0471
057fc                 | LR__0448
057fc     1C 0E B0 FD | 	call	#_compile_fun_varp
05800     FD 2C 02 F6 | 	mov	local08, result1
05804     FC 00 90 FD | 	jmp	#LR__0471
05808                 | LR__0449
05808     7C 2C B0 FD | 	call	#_expr
0580c                 | ' expr()
0580c                 | ' return 0
0580c     00 26 06 F6 | 	mov	local05, #0
05810     F0 00 90 FD | 	jmp	#LR__0471
05814                 | LR__0450
05814     70 2C B0 FD | 	call	#_expr
05818                 | ' expr()
05818                 | ' return 0
05818     00 26 06 F6 | 	mov	local05, #0
0581c     E4 00 90 FD | 	jmp	#LR__0471
05820                 | LR__0451
05820     54 27 B0 FD | 	call	#_compile_next
05824     98 01 90 FD | 	jmp	#LR__0472
05828                 | LR__0452
05828     5C 2C B0 FD | 	call	#_expr
0582c                 | ' expr()
0582c                 | ' return 0
0582c     00 26 06 F6 | 	mov	local05, #0
05830     D0 00 90 FD | 	jmp	#LR__0471
05834                 | LR__0453
05834     50 2C B0 FD | 	call	#_expr
05838                 | ' expr()
05838                 | ' return 0
05838     00 26 06 F6 | 	mov	local05, #0
0583c     C4 00 90 FD | 	jmp	#LR__0471
05840                 | LR__0454
05840     44 2C B0 FD | 	call	#_expr
05844                 | ' expr()
05844                 | ' return 0
05844     00 26 06 F6 | 	mov	local05, #0
05848     B8 00 90 FD | 	jmp	#LR__0471
0584c                 | LR__0455
0584c     38 2C B0 FD | 	call	#_expr
05850                 | ' expr()
05850                 | ' return 0
05850     00 26 06 F6 | 	mov	local05, #0
05854     AC 00 90 FD | 	jmp	#LR__0471
05858                 | LR__0456
05858     20 0B B0 FD | 	call	#_compile_fun_4p
0585c     FD 26 02 F6 | 	mov	local05, result1
05860     A0 00 90 FD | 	jmp	#LR__0471
05864                 | LR__0457
05864     20 2C B0 FD | 	call	#_expr
05868                 | ' expr()
05868                 | ' return 0
05868     00 26 06 F6 | 	mov	local05, #0
0586c     94 00 90 FD | 	jmp	#LR__0471
05870                 | LR__0458
05870     C8 09 B0 FD | 	call	#_compile_fun_2p
05874     FD 26 02 F6 | 	mov	local05, result1
05878     88 00 90 FD | 	jmp	#LR__0471
0587c                 | LR__0459
0587c     9C 0D B0 FD | 	call	#_compile_fun_varp
05880     FD 2C 02 F6 | 	mov	local08, result1
05884     7C 00 90 FD | 	jmp	#LR__0471
05888                 | LR__0460
05888     B0 09 B0 FD | 	call	#_compile_fun_2p
0588c     FD 26 02 F6 | 	mov	local05, result1
05890     70 00 90 FD | 	jmp	#LR__0471
05894                 | LR__0461
05894     A4 09 B0 FD | 	call	#_compile_fun_2p
05898     FD 26 02 F6 | 	mov	local05, result1
0589c     64 00 90 FD | 	jmp	#LR__0471
058a0                 | LR__0462
058a0     24 0E B0 FD | 	call	#_compile_print
058a4     FD 26 02 F6 | 	mov	local05, result1
058a8     14 01 90 FD | 	jmp	#LR__0472
058ac                 | LR__0463
058ac     6C 0D B0 FD | 	call	#_compile_fun_varp
058b0     FD 2C 02 F6 | 	mov	local08, result1
058b4     4C 00 90 FD | 	jmp	#LR__0471
058b8                 | LR__0464
058b8     F4 09 B0 FD | 	call	#_compile_fun_3p
058bc     FD 26 02 F6 | 	mov	local05, result1
058c0     40 00 90 FD | 	jmp	#LR__0471
058c4                 | LR__0465
058c4     C0 2B B0 FD | 	call	#_expr
058c8                 | ' expr()
058c8                 | ' return 0
058c8     00 26 06 F6 | 	mov	local05, #0
058cc     34 00 90 FD | 	jmp	#LR__0471
058d0                 | LR__0466
058d0     68 09 B0 FD | 	call	#_compile_fun_2p
058d4     FD 26 02 F6 | 	mov	local05, result1
058d8     28 00 90 FD | 	jmp	#LR__0471
058dc                 | LR__0467
058dc     5C 09 B0 FD | 	call	#_compile_fun_2p
058e0     FD 26 02 F6 | 	mov	local05, result1
058e4     1C 00 90 FD | 	jmp	#LR__0471
058e8                 | LR__0468
058e8     50 09 B0 FD | 	call	#_compile_fun_2p
058ec     FD 26 02 F6 | 	mov	local05, result1
058f0     10 00 90 FD | 	jmp	#LR__0471
058f4                 | LR__0469
058f4     20 01 B0 FD | 	call	#_compile_array_assign
058f8     C4 00 90 FD | 	jmp	#LR__0472
058fc                 | LR__0470
058fc     80 08 B0 FD | 	call	#_compile_unknown
05900     BC 00 90 FD | 	jmp	#LR__0472
05904                 | LR__0471
05904     14 23 02 F6 | 	mov	local03, local06
05908     16 1F 02 F6 | 	mov	local01, local08
0590c     0F 2B 02 F6 | 	mov	local07, local01
05910     10 2F 02 F6 | 	mov	local09, local02
05914     11 1F 02 F6 | 	mov	local01, local03
05918     69 00 00 FF 
0591c     40 E5 05 F1 | 	add	objptr, ##54080
05920     F2 2C 02 FB | 	rdlong	local08, objptr
05924     16 29 02 F6 | 	mov	local06, local08
05928     01 28 66 F0 | 	shl	local06, #1
0592c     16 29 02 F1 | 	add	local06, local08
05930     02 28 66 F0 | 	shl	local06, #2
05934     03 00 00 FF 
05938     00 E4 85 F1 | 	sub	objptr, ##1536
0593c     F2 28 02 F1 | 	add	local06, objptr
05940     14 2B 62 FC | 	wrlong	local07, local06
05944     03 00 00 FF 
05948     00 E4 05 F1 | 	add	objptr, ##1536
0594c     F2 2C 02 FB | 	rdlong	local08, objptr
05950     16 2B 02 F6 | 	mov	local07, local08
05954     01 2A 66 F0 | 	shl	local07, #1
05958     16 2B 02 F1 | 	add	local07, local08
0595c     02 2A 66 F0 | 	shl	local07, #2
05960     03 00 00 FF 
05964     00 E4 85 F1 | 	sub	objptr, ##1536
05968     F2 2A 02 F1 | 	add	local07, objptr
0596c     04 2A 06 F1 | 	add	local07, #4
05970     15 2F 62 FC | 	wrlong	local09, local07
05974     03 00 00 FF 
05978     00 E4 05 F1 | 	add	objptr, ##1536
0597c     F2 2E 02 FB | 	rdlong	local09, objptr
05980     17 2D 02 F6 | 	mov	local08, local09
05984     01 2C 66 F0 | 	shl	local08, #1
05988     17 2D 02 F1 | 	add	local08, local09
0598c     02 2C 66 F0 | 	shl	local08, #2
05990     03 00 00 FF 
05994     00 E4 85 F1 | 	sub	objptr, ##1536
05998     F2 2C 02 F1 | 	add	local08, objptr
0599c     08 2C 06 F1 | 	add	local08, #8
059a0     16 1F 62 FC | 	wrlong	local01, local08
059a4     03 00 00 FF 
059a8     00 E4 05 F1 | 	add	objptr, ##1536
059ac     F2 2A 02 FB | 	rdlong	local07, objptr
059b0     01 2A 06 F1 | 	add	local07, #1
059b4     F2 2A 62 FC | 	wrlong	local07, objptr
059b8     69 00 00 FF 
059bc     40 E5 85 F1 | 	sub	objptr, ##54080
059c0                 | LR__0472
059c0                 | ' 
059c0                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
059c0                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
059c0     00 24 0E F2 | 	cmp	local04, #0 wz
059c4     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
059c8     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
059cc     38 00 90 5D |  if_ne	jmp	#LR__0473
059d0     69 00 00 FF 
059d4     40 E5 05 F1 | 	add	objptr, ##54080
059d8     F2 2E 02 FB | 	rdlong	local09, objptr
059dc     17 1F 02 F6 | 	mov	local01, local09
059e0     01 1E 66 F0 | 	shl	local01, #1
059e4     17 1F 02 F1 | 	add	local01, local09
059e8     02 1E 66 F0 | 	shl	local01, #2
059ec     03 00 00 FF 
059f0     00 E4 85 F1 | 	sub	objptr, ##1536
059f4     F2 1E 02 F1 | 	add	local01, objptr
059f8     08 1E 06 F1 | 	add	local01, #8
059fc     0F FD 6B FC | 	wrlong	#510, local01
05a00     66 00 00 FF 
05a04     40 E5 85 F1 | 	sub	objptr, ##52544
05a08                 | LR__0473
05a08                 | ' 
05a08                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
05a08                 | ' return err
05a08     13 FB 01 F6 | 	mov	result1, local05
05a0c     A7 F0 03 F6 | 	mov	ptra, fp
05a10     B2 00 A0 FD | 	call	#popregs_
05a14                 | _compile_immediate_ret
05a14     2D 00 64 FD | 	ret
05a18                 | 
05a18                 | ' 
05a18                 | ' sub compile_array_assign
05a18                 | _compile_array_assign
05a18     0A 4A 05 F6 | 	mov	COUNT_, #10
05a1c     A8 00 A0 FD | 	call	#pushregs_
05a20     00 24 06 F6 | 	mov	local04, #0
05a24     56 00 00 FF 
05a28     08 E5 05 F1 | 	add	objptr, ##44296
05a2c     F2 26 02 FB | 	rdlong	local05, objptr
05a30     13 FB 01 F6 | 	mov	result1, local05
05a34     01 FA 85 F1 | 	sub	result1, #1
05a38     03 FA 65 F0 | 	shl	result1, #3
05a3c     02 00 00 FF 
05a40     38 E4 85 F1 | 	sub	objptr, ##1080
05a44     F2 FA 01 F1 | 	add	result1, objptr
05a48     FD 28 02 FB | 	rdlong	local06, result1
05a4c                 | ' numpar=0
05a4c                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
05a4c                 | ' ' todo here: recognize params and t1.result.twowords=numpar
05a4c                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
05a4c                 | ' if lparts(ct).token=token_lpar then
05a4c     03 26 66 F0 | 	shl	local05, #3
05a50     F2 26 02 F1 | 	add	local05, objptr
05a54     04 26 06 F1 | 	add	local05, #4
05a58     13 27 02 FB | 	rdlong	local05, local05
05a5c     15 26 0E F2 | 	cmp	local05, #21 wz
05a60     54 00 00 FF 
05a64     D0 E4 85 F1 | 	sub	objptr, ##43216
05a68     D4 01 90 5D |  if_ne	jmp	#LR__0484
05a6c     56 00 00 FF 
05a70     08 E5 05 F1 | 	add	objptr, ##44296
05a74     F2 2A 02 FB | 	rdlong	local07, objptr
05a78     01 2A 06 F1 | 	add	local07, #1
05a7c     F2 2A 62 FC | 	wrlong	local07, objptr
05a80     56 00 00 FF 
05a84     08 E5 85 F1 | 	sub	objptr, ##44296
05a88                 | '   ct+=1 											' omit this lpar, this is for expr list
05a88                 | '   do
05a88                 | LR__0480
05a88     FC 29 B0 FD | 	call	#_expr
05a8c     56 00 00 FF 
05a90     08 E5 05 F1 | 	add	objptr, ##44296
05a94     F2 26 02 FB | 	rdlong	local05, objptr
05a98     01 26 06 F1 | 	add	local05, #1
05a9c     F2 26 62 FC | 	wrlong	local05, objptr
05aa0     01 24 06 F1 | 	add	local04, #1
05aa4     01 26 86 F1 | 	sub	local05, #1
05aa8     03 26 66 F0 | 	shl	local05, #3
05aac     02 00 00 FF 
05ab0     38 E4 85 F1 | 	sub	objptr, ##1080
05ab4     F2 26 02 F1 | 	add	local05, objptr
05ab8     04 26 06 F1 | 	add	local05, #4
05abc     13 2B 02 FB | 	rdlong	local07, local05
05ac0     14 2A 0E F2 | 	cmp	local07, #20 wz
05ac4     54 00 00 FF 
05ac8     D0 E4 85 F1 | 	sub	objptr, ##43216
05acc     34 00 90 AD |  if_e	jmp	#LR__0481
05ad0     56 00 00 FF 
05ad4     08 E5 05 F1 | 	add	objptr, ##44296
05ad8     F2 2A 02 FB | 	rdlong	local07, objptr
05adc     03 2A 66 F0 | 	shl	local07, #3
05ae0     02 00 00 FF 
05ae4     38 E4 85 F1 | 	sub	objptr, ##1080
05ae8     F2 2A 02 F1 | 	add	local07, objptr
05aec     04 2A 06 F1 | 	add	local07, #4
05af0     15 2B 02 FB | 	rdlong	local07, local07
05af4     FE 2B 0E F2 | 	cmp	local07, #510 wz
05af8     54 00 00 FF 
05afc     D0 E4 85 F1 | 	sub	objptr, ##43216
05b00     84 FF 9F 5D |  if_ne	jmp	#LR__0480
05b04                 | LR__0481
05b04     56 00 00 FF 
05b08     08 E5 05 F1 | 	add	objptr, ##44296
05b0c     F2 2A 02 FB | 	rdlong	local07, objptr
05b10     01 2A 06 F1 | 	add	local07, #1
05b14     F2 2A 62 FC | 	wrlong	local07, objptr
05b18     56 00 00 FF 
05b1c     08 E5 85 F1 | 	sub	objptr, ##44296
05b20     64 29 B0 FD | 	call	#_expr
05b24     01 2C 66 F6 | 	neg	local08, #1
05b28     00 2E 06 F6 | 	mov	local09, #0
05b2c                 | ' '   print "in array_assign, rpar found, numpar=",numpar
05b2c                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
05b2c                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
05b2c                 | ' ct+=1 : expr()
05b2c                 | ' ' now find the vae
05b2c                 | ' 
05b2c                 | ' j=-1 : i=0 : do : 
05b2c                 | LR__0482
05b2c                 | '   if variables(i).name=varname$ then j=i: exit loop
05b2c     17 27 02 F6 | 	mov	local05, local09
05b30     04 26 66 F0 | 	shl	local05, #4
05b34     34 00 00 FF 
05b38     CC E4 05 F1 | 	add	objptr, ##26828
05b3c     F2 26 02 F1 | 	add	local05, objptr
05b40     13 13 02 FB | 	rdlong	arg01, local05
05b44     14 15 02 F6 | 	mov	arg02, local06
05b48     34 00 00 FF 
05b4c     CC E4 85 F1 | 	sub	objptr, ##26828
05b50     70 36 B1 FD | 	call	#__system___string_cmp
05b54     00 FA 0D F2 | 	cmp	result1, #0 wz
05b58     17 2D 02 A6 |  if_e	mov	local08, local09
05b5c     20 00 90 AD |  if_e	jmp	#LR__0483
05b60     01 2E 06 F1 | 	add	local09, #1
05b64     54 00 00 FF 
05b68     CC E4 05 F1 | 	add	objptr, ##43212
05b6c     F2 2A 02 FB | 	rdlong	local07, objptr
05b70     54 00 00 FF 
05b74     CC E4 85 F1 | 	sub	objptr, ##43212
05b78     15 2F 5A F2 | 	cmps	local09, local07 wcz
05b7c     AC FF 9F ED |  if_be	jmp	#LR__0482
05b80                 | LR__0483
05b80     16 1F 02 F6 | 	mov	local01, local08
05b84     12 21 02 F6 | 	mov	local02, local04
05b88     17 22 06 F6 | 	mov	local03, #23
05b8c     0F 2B 02 F6 | 	mov	local07, local01
05b90     10 31 02 F6 | 	mov	local10, local02
05b94     11 2D 02 F6 | 	mov	local08, local03
05b98     69 00 00 FF 
05b9c     40 E5 05 F1 | 	add	objptr, ##54080
05ba0     F2 1E 02 FB | 	rdlong	local01, objptr
05ba4     0F 2F 02 F6 | 	mov	local09, local01
05ba8     01 2E 66 F0 | 	shl	local09, #1
05bac     0F 2F 02 F1 | 	add	local09, local01
05bb0     02 2E 66 F0 | 	shl	local09, #2
05bb4     03 00 00 FF 
05bb8     00 E4 85 F1 | 	sub	objptr, ##1536
05bbc     F2 2E 02 F1 | 	add	local09, objptr
05bc0     17 2B 62 FC | 	wrlong	local07, local09
05bc4     03 00 00 FF 
05bc8     00 E4 05 F1 | 	add	objptr, ##1536
05bcc     F2 1E 02 FB | 	rdlong	local01, objptr
05bd0     0F 2F 02 F6 | 	mov	local09, local01
05bd4     01 2E 66 F0 | 	shl	local09, #1
05bd8     0F 2F 02 F1 | 	add	local09, local01
05bdc     02 2E 66 F0 | 	shl	local09, #2
05be0     03 00 00 FF 
05be4     00 E4 85 F1 | 	sub	objptr, ##1536
05be8     F2 2E 02 F1 | 	add	local09, objptr
05bec     04 2E 06 F1 | 	add	local09, #4
05bf0     17 31 62 FC | 	wrlong	local10, local09
05bf4     03 00 00 FF 
05bf8     00 E4 05 F1 | 	add	objptr, ##1536
05bfc     F2 30 02 FB | 	rdlong	local10, objptr
05c00     18 1F 02 F6 | 	mov	local01, local10
05c04     01 1E 66 F0 | 	shl	local01, #1
05c08     18 1F 02 F1 | 	add	local01, local10
05c0c     02 1E 66 F0 | 	shl	local01, #2
05c10     03 00 00 FF 
05c14     00 E4 85 F1 | 	sub	objptr, ##1536
05c18     F2 1E 02 F1 | 	add	local01, objptr
05c1c     08 1E 06 F1 | 	add	local01, #8
05c20     0F 2D 62 FC | 	wrlong	local08, local01
05c24     03 00 00 FF 
05c28     00 E4 05 F1 | 	add	objptr, ##1536
05c2c     F2 2A 02 FB | 	rdlong	local07, objptr
05c30     01 2A 06 F1 | 	add	local07, #1
05c34     F2 2A 62 FC | 	wrlong	local07, objptr
05c38     69 00 00 FF 
05c3c     40 E5 85 F1 | 	sub	objptr, ##54080
05c40                 | LR__0484
05c40     A7 F0 03 F6 | 	mov	ptra, fp
05c44     B2 00 A0 FD | 	call	#popregs_
05c48                 | _compile_array_assign_ret
05c48     2D 00 64 FD | 	ret
05c4c                 | 
05c4c                 | ' 
05c4c                 | ' 
05c4c                 | ' sub compile_immediate_assign(linetype as ulong)
05c4c                 | _compile_immediate_assign
05c4c     09 4A 05 F6 | 	mov	COUNT_, #9
05c50     A8 00 A0 FD | 	call	#pushregs_
05c54     09 25 0A F6 | 	mov	local04, arg01 wz
05c58     FF 22 06 F6 | 	mov	local03, #255
05c5c     01 26 66 F6 | 	neg	local05, #1
05c60                 | ' 
05c60                 | ' t1.result_type=result_error : t1.result.uresult=0
05c60                 | ' i=-1: j=-1
05c60                 | ' 
05c60                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
05c60     2C 00 90 5D |  if_ne	jmp	#LR__0490
05c64     54 00 00 FF 
05c68     D0 E4 05 F1 | 	add	objptr, ##43216
05c6c     F2 28 02 FB | 	rdlong	local06, objptr
05c70     02 00 00 FF 
05c74     38 E4 05 F1 | 	add	objptr, ##1080
05c78     F2 04 68 FC | 	wrlong	#2, objptr
05c7c     13 00 00 FF 
05c80     38 E4 05 F1 | 	add	objptr, ##9784
05c84     F2 00 68 FC | 	wrlong	#0, objptr
05c88     69 00 00 FF 
05c8c     40 E5 85 F1 | 	sub	objptr, ##54080
05c90                 | LR__0490
05c90                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
05c90     02 24 0E F2 | 	cmp	local04, #2 wz
05c94     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05c98     54 00 00 AF 
05c9c     D0 E4 05 A1 |  if_e	add	objptr, ##43216
05ca0     F2 28 02 AB |  if_e	rdlong	local06, objptr
05ca4     02 00 00 AF 
05ca8     38 E4 05 A1 |  if_e	add	objptr, ##1080
05cac     F2 04 68 AC |  if_e	wrlong	#2, objptr
05cb0     56 00 00 AF 
05cb4     08 E5 85 A1 |  if_e	sub	objptr, ##44296
05cb8                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
05cb8     04 24 0E F2 | 	cmp	local04, #4 wz
05cbc     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05cc0     2C 00 90 5D |  if_ne	jmp	#LR__0491
05cc4     54 00 00 FF 
05cc8     D8 E4 05 F1 | 	add	objptr, ##43224
05ccc     F2 28 02 FB | 	rdlong	local06, objptr
05cd0     02 00 00 FF 
05cd4     30 E4 05 F1 | 	add	objptr, ##1072
05cd8     F2 06 68 FC | 	wrlong	#3, objptr
05cdc     13 00 00 FF 
05ce0     38 E4 05 F1 | 	add	objptr, ##9784
05ce4     F2 04 68 FC | 	wrlong	#2, objptr
05ce8     69 00 00 FF 
05cec     40 E5 85 F1 | 	sub	objptr, ##54080
05cf0                 | LR__0491
05cf0                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
05cf0     05 24 0E F2 | 	cmp	local04, #5 wz
05cf4     3C 00 90 5D |  if_ne	jmp	#LR__0492
05cf8     56 00 00 FF 
05cfc     08 E5 05 F1 | 	add	objptr, ##44296
05d00     F2 FA 01 FB | 	rdlong	result1, objptr
05d04     FD 28 02 F6 | 	mov	local06, result1
05d08     03 28 66 F0 | 	shl	local06, #3
05d0c     02 00 00 FF 
05d10     38 E4 85 F1 | 	sub	objptr, ##1080
05d14     F2 28 02 F1 | 	add	local06, objptr
05d18     14 29 02 FB | 	rdlong	local06, local06
05d1c     02 FA 05 F1 | 	add	result1, #2
05d20     02 00 00 FF 
05d24     38 E4 05 F1 | 	add	objptr, ##1080
05d28     F2 FA 61 FC | 	wrlong	result1, objptr
05d2c     56 00 00 FF 
05d30     08 E5 85 F1 | 	sub	objptr, ##44296
05d34                 | LR__0492
05d34     14 13 02 F6 | 	mov	arg01, local06
05d38     01 14 06 F6 | 	mov	arg02, #1
05d3c     F4 54 B1 FD | 	call	#__system__Right_S
05d40     44 27 B0 FD | 	call	#_expr
05d44                 | '  
05d44                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
05d44                 | ' 
05d44                 | ' suffix2$=right$(varname2$,1)
05d44                 | ' expr()
05d44                 | ' 
05d44                 | ' 
05d44                 | ' if varnum>0 then
05d44     54 00 00 FF 
05d48     CC E4 05 F1 | 	add	objptr, ##43212
05d4c     F2 2A 02 FB | 	rdlong	local07, objptr
05d50     54 00 00 FF 
05d54     CC E4 85 F1 | 	sub	objptr, ##43212
05d58     01 2A 56 F2 | 	cmps	local07, #1 wc
05d5c     58 00 90 CD |  if_b	jmp	#LR__0495
05d60                 | '   for i=0 to varnum-1
05d60     00 2C 06 F6 | 	mov	local08, #0
05d64     54 00 00 FF 
05d68     CC E4 05 F1 | 	add	objptr, ##43212
05d6c     F2 2E 02 FB | 	rdlong	local09, objptr
05d70     54 00 00 FF 
05d74     CC E4 85 F1 | 	sub	objptr, ##43212
05d78                 | LR__0493
05d78     17 2D 52 F2 | 	cmps	local08, local09 wc
05d7c     38 00 90 3D |  if_ae	jmp	#LR__0494
05d80                 | '     if variables(i).name=varname2$ then j=i : exit
05d80     16 2B 02 F6 | 	mov	local07, local08
05d84     04 2A 66 F0 | 	shl	local07, #4
05d88     34 00 00 FF 
05d8c     CC E4 05 F1 | 	add	objptr, ##26828
05d90     F2 2A 02 F1 | 	add	local07, objptr
05d94     15 13 02 FB | 	rdlong	arg01, local07
05d98     14 15 02 F6 | 	mov	arg02, local06
05d9c     34 00 00 FF 
05da0     CC E4 85 F1 | 	sub	objptr, ##26828
05da4     1C 34 B1 FD | 	call	#__system___string_cmp
05da8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dac     16 27 02 A6 |  if_e	mov	local05, local08
05db0     01 2C 06 51 |  if_ne	add	local08, #1
05db4     C0 FF 9F 5D |  if_ne	jmp	#LR__0493
05db8                 | LR__0494
05db8                 | LR__0495
05db8                 | ' if  j=-1 andalso varnum<maxvars then   
05db8     FF FF 7F FF 
05dbc     FF 27 0E F2 | 	cmp	local05, ##-1 wz
05dc0     60 00 90 5D |  if_ne	jmp	#LR__0496
05dc4     54 00 00 FF 
05dc8     CC E4 05 F1 | 	add	objptr, ##43212
05dcc     F2 2A 02 FB | 	rdlong	local07, objptr
05dd0     54 00 00 FF 
05dd4     CC E4 85 F1 | 	sub	objptr, ##43212
05dd8     01 00 00 FF 
05ddc     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
05de0     40 00 90 3D |  if_ae	jmp	#LR__0496
05de4     54 00 00 FF 
05de8     CC E4 05 F1 | 	add	objptr, ##43212
05dec     F2 2E 02 FB | 	rdlong	local09, objptr
05df0     04 2E 66 F0 | 	shl	local09, #4
05df4     20 00 00 FF 
05df8     00 E4 85 F1 | 	sub	objptr, ##16384
05dfc     F2 2E 02 F1 | 	add	local09, objptr
05e00     17 29 62 FC | 	wrlong	local06, local09
05e04     20 00 00 FF 
05e08     00 E4 05 F1 | 	add	objptr, ##16384
05e0c     F2 2A 02 FB | 	rdlong	local07, objptr
05e10     15 27 02 F6 | 	mov	local05, local07
05e14     01 2A 06 F1 | 	add	local07, #1
05e18     F2 2A 62 FC | 	wrlong	local07, objptr
05e1c     54 00 00 FF 
05e20     CC E4 85 F1 | 	sub	objptr, ##43212
05e24                 | LR__0496
05e24     13 1F 02 F6 | 	mov	local01, local05
05e28     17 22 06 F6 | 	mov	local03, #23
05e2c     0F 2B 02 F6 | 	mov	local07, local01
05e30     10 2F 02 F6 | 	mov	local09, local02
05e34     11 1F 02 F6 | 	mov	local01, local03
05e38     69 00 00 FF 
05e3c     40 E5 05 F1 | 	add	objptr, ##54080
05e40     F2 2C 02 FB | 	rdlong	local08, objptr
05e44     16 29 02 F6 | 	mov	local06, local08
05e48     01 28 66 F0 | 	shl	local06, #1
05e4c     16 29 02 F1 | 	add	local06, local08
05e50     02 28 66 F0 | 	shl	local06, #2
05e54     03 00 00 FF 
05e58     00 E4 85 F1 | 	sub	objptr, ##1536
05e5c     F2 28 02 F1 | 	add	local06, objptr
05e60     14 2B 62 FC | 	wrlong	local07, local06
05e64     03 00 00 FF 
05e68     00 E4 05 F1 | 	add	objptr, ##1536
05e6c     F2 2C 02 FB | 	rdlong	local08, objptr
05e70     16 2B 02 F6 | 	mov	local07, local08
05e74     01 2A 66 F0 | 	shl	local07, #1
05e78     16 2B 02 F1 | 	add	local07, local08
05e7c     02 2A 66 F0 | 	shl	local07, #2
05e80     03 00 00 FF 
05e84     00 E4 85 F1 | 	sub	objptr, ##1536
05e88     F2 2A 02 F1 | 	add	local07, objptr
05e8c     04 2A 06 F1 | 	add	local07, #4
05e90     15 2F 62 FC | 	wrlong	local09, local07
05e94     03 00 00 FF 
05e98     00 E4 05 F1 | 	add	objptr, ##1536
05e9c     F2 2E 02 FB | 	rdlong	local09, objptr
05ea0     17 2D 02 F6 | 	mov	local08, local09
05ea4     01 2C 66 F0 | 	shl	local08, #1
05ea8     17 2D 02 F1 | 	add	local08, local09
05eac     02 2C 66 F0 | 	shl	local08, #2
05eb0     03 00 00 FF 
05eb4     00 E4 85 F1 | 	sub	objptr, ##1536
05eb8     F2 2C 02 F1 | 	add	local08, objptr
05ebc     08 2C 06 F1 | 	add	local08, #8
05ec0     16 1F 62 FC | 	wrlong	local01, local08
05ec4     03 00 00 FF 
05ec8     00 E4 05 F1 | 	add	objptr, ##1536
05ecc     F2 2A 02 FB | 	rdlong	local07, objptr
05ed0     01 2A 06 F1 | 	add	local07, #1
05ed4     F2 2A 62 FC | 	wrlong	local07, objptr
05ed8     69 00 00 FF 
05edc     40 E5 85 F1 | 	sub	objptr, ##54080
05ee0                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
05ee0                 | ' 
05ee0                 | ' 
05ee0                 | ' 
05ee0                 | ' 
05ee0                 | ' 
05ee0                 | ' 
05ee0                 | ' compiledline(lineptr)=t1:  lineptr+=1 
05ee0                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
05ee0     00 24 0E F2 | 	cmp	local04, #0 wz
05ee4     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05ee8     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
05eec     38 00 90 5D |  if_ne	jmp	#LR__0497
05ef0     69 00 00 FF 
05ef4     40 E5 05 F1 | 	add	objptr, ##54080
05ef8     F2 1E 02 FB | 	rdlong	local01, objptr
05efc     0F 2F 02 F6 | 	mov	local09, local01
05f00     01 2E 66 F0 | 	shl	local09, #1
05f04     0F 2F 02 F1 | 	add	local09, local01
05f08     02 2E 66 F0 | 	shl	local09, #2
05f0c     03 00 00 FF 
05f10     00 E4 85 F1 | 	sub	objptr, ##1536
05f14     F2 2E 02 F1 | 	add	local09, objptr
05f18     08 2E 06 F1 | 	add	local09, #8
05f1c     17 FD 6B FC | 	wrlong	#510, local09
05f20     66 00 00 FF 
05f24     40 E5 85 F1 | 	sub	objptr, ##52544
05f28                 | LR__0497
05f28     A7 F0 03 F6 | 	mov	ptra, fp
05f2c     B2 00 A0 FD | 	call	#popregs_
05f30                 | _compile_immediate_assign_ret
05f30     2D 00 64 FD | 	ret
05f34                 | 
05f34                 | ' 
05f34                 | ' ' ------------------ compile the line that is calling a command 
05f34                 | ' 
05f34                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
05f34                 | _compile
05f34     04 4A 05 F6 | 	mov	COUNT_, #4
05f38     A8 00 A0 FD | 	call	#pushregs_
05f3c     09 1F 0A F6 | 	mov	local01, arg01 wz
05f40     0A 21 02 F6 | 	mov	local02, arg02
05f44     0B 23 02 F6 | 	mov	local03, arg03
05f48                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
05f48                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
05f48                 | '  
05f48                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
05f48                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
05f48     0C 00 90 5D |  if_ne	jmp	#LR__0500
05f4c     00 12 06 F6 | 	mov	arg01, #0
05f50     E4 F4 BF FD | 	call	#_compile_immediate
05f54     A0 00 90 FD | 	jmp	#LR__0507
05f58                 | LR__0500
05f58     66 00 00 FF 
05f5c     40 E5 05 F1 | 	add	objptr, ##52544
05f60     F2 1E 62 FC | 	wrlong	local01, objptr
05f64     04 E4 05 F1 | 	add	objptr, #4
05f68     F2 20 62 FC | 	wrlong	local02, objptr
05f6c     66 00 00 FF 
05f70     44 E5 85 F1 | 	sub	objptr, ##52548
05f74     11 13 02 F6 | 	mov	arg01, local03
05f78     01 12 06 F1 | 	add	arg01, #1
05f7c     B8 F4 BF FD | 	call	#_compile_immediate
05f80     FD 24 0A F6 | 	mov	local04, result1 wz
05f84                 | ' 
05f84                 | ' ucompiledline(0)=alinemajor
05f84                 | ' ucompiledline(1)=alineminor
05f84                 | ' 
05f84                 | ' 
05f84                 | ' ' cont: 0: this is the first part of the line that will continue
05f84                 | ' ' 1 - this is the continuation of the line
05f84                 | ' ' 2 - this is the last continued line
05f84                 | ' ' 3 - this is the ome and only part
05f84                 | ' 
05f84                 | ' err=compile_immediate(cont+1) 
05f84                 | ' if err=0 then
05f84     6C 00 90 5D |  if_ne	jmp	#LR__0506
05f88                 | '   if cont=3 orelse cont=2 then 
05f88     03 22 0E F2 | 	cmp	local03, #3 wz
05f8c     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05f90     60 00 90 5D |  if_ne	jmp	#LR__0505
05f94                 | '     if alinemajor >lastline then 
05f94     69 00 00 FF 
05f98     4C E5 05 F1 | 	add	objptr, ##54092
05f9c     F2 16 02 FB | 	rdlong	arg03, objptr
05fa0     69 00 00 FF 
05fa4     4C E5 85 F1 | 	sub	objptr, ##54092
05fa8     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05fac     0C 00 90 ED |  if_be	jmp	#LR__0501
05fb0     0F 13 02 F6 | 	mov	arg01, local01
05fb4     A0 F3 BF FD | 	call	#_add_line_at_end
05fb8     38 00 90 FD | 	jmp	#LR__0504
05fbc                 | LR__0501
05fbc     0F 13 02 F6 | 	mov	arg01, local01
05fc0     14 EC BF FD | 	call	#_deleteline
05fc4                 | '       deleteline(alinemajor)  
05fc4                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
05fc4     69 00 00 FF 
05fc8     4C E5 05 F1 | 	add	objptr, ##54092
05fcc     F2 16 02 FB | 	rdlong	arg03, objptr
05fd0     69 00 00 FF 
05fd4     4C E5 85 F1 | 	sub	objptr, ##54092
05fd8     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05fdc     0C 00 90 ED |  if_be	jmp	#LR__0502
05fe0     0F 13 02 F6 | 	mov	arg01, local01
05fe4     70 F3 BF FD | 	call	#_add_line_at_end
05fe8     08 00 90 FD | 	jmp	#LR__0503
05fec                 | LR__0502
05fec     0F 13 02 F6 | 	mov	arg01, local01
05ff0     1C F1 BF FD | 	call	#_insertline
05ff4                 | LR__0503
05ff4                 | LR__0504
05ff4                 | LR__0505
05ff4                 | LR__0506
05ff4                 | ' return err
05ff4     12 FB 01 F6 | 	mov	result1, local04
05ff8                 | LR__0507
05ff8     A7 F0 03 F6 | 	mov	ptra, fp
05ffc     B2 00 A0 FD | 	call	#popregs_
06000                 | _compile_ret
06000     2D 00 64 FD | 	ret
06004                 | 
06004                 | ' 
06004                 | ' ' ------------------ compile the line that is assigning to a variable
06004                 | ' 
06004                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
06004                 | _compile_assign
06004     03 4A 05 F6 | 	mov	COUNT_, #3
06008     A8 00 A0 FD | 	call	#pushregs_
0600c     09 1F 0A F6 | 	mov	local01, arg01 wz
06010     0A 21 02 F6 | 	mov	local02, arg02
06014     0B 23 02 F6 | 	mov	local03, arg03
06018                 | ' 
06018                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
06018                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
06018     0C 00 90 5D |  if_ne	jmp	#LR__0510
0601c     00 12 06 F6 | 	mov	arg01, #0
06020     28 FC BF FD | 	call	#_compile_immediate_assign
06024     94 00 90 FD | 	jmp	#LR__0516
06028                 | LR__0510
06028     66 00 00 FF 
0602c     40 E5 05 F1 | 	add	objptr, ##52544
06030     F2 1E 62 FC | 	wrlong	local01, objptr
06034     04 E4 05 F1 | 	add	objptr, #4
06038     F2 20 62 FC | 	wrlong	local02, objptr
0603c     66 00 00 FF 
06040     44 E5 85 F1 | 	sub	objptr, ##52548
06044     11 13 02 F6 | 	mov	arg01, local03
06048     01 12 06 F1 | 	add	arg01, #1
0604c     FC FB BF FD | 	call	#_compile_immediate_assign
06050                 | ' 
06050                 | ' ucompiledline(0)=alinemajor
06050                 | ' ucompiledline(1)=alineminor
06050                 | ' 
06050                 | ' compile_immediate_assign(cont+1) 
06050                 | ' 
06050                 | ' if cont=3 orelse cont=2 then 
06050     03 22 0E F2 | 	cmp	local03, #3 wz
06054     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06058     60 00 90 5D |  if_ne	jmp	#LR__0515
0605c                 | '   if alinemajor >lastline then 
0605c     69 00 00 FF 
06060     4C E5 05 F1 | 	add	objptr, ##54092
06064     F2 16 02 FB | 	rdlong	arg03, objptr
06068     69 00 00 FF 
0606c     4C E5 85 F1 | 	sub	objptr, ##54092
06070     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06074     0C 00 90 ED |  if_be	jmp	#LR__0511
06078     0F 13 02 F6 | 	mov	arg01, local01
0607c     D8 F2 BF FD | 	call	#_add_line_at_end
06080     38 00 90 FD | 	jmp	#LR__0514
06084                 | LR__0511
06084     0F 13 02 F6 | 	mov	arg01, local01
06088     4C EB BF FD | 	call	#_deleteline
0608c                 | '     deleteline(alinemajor)  
0608c                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
0608c     69 00 00 FF 
06090     4C E5 05 F1 | 	add	objptr, ##54092
06094     F2 16 02 FB | 	rdlong	arg03, objptr
06098     69 00 00 FF 
0609c     4C E5 85 F1 | 	sub	objptr, ##54092
060a0     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
060a4     0C 00 90 ED |  if_be	jmp	#LR__0512
060a8     0F 13 02 F6 | 	mov	arg01, local01
060ac     A8 F2 BF FD | 	call	#_add_line_at_end
060b0     08 00 90 FD | 	jmp	#LR__0513
060b4                 | LR__0512
060b4     0F 13 02 F6 | 	mov	arg01, local01
060b8     54 F0 BF FD | 	call	#_insertline
060bc                 | LR__0513
060bc                 | LR__0514
060bc                 | LR__0515
060bc                 | LR__0516
060bc     A7 F0 03 F6 | 	mov	ptra, fp
060c0     B2 00 A0 FD | 	call	#popregs_
060c4                 | _compile_assign_ret
060c4     2D 00 64 FD | 	ret
060c8                 | 
060c8                 | ' 
060c8                 | ' sub compile_error(errno)
060c8                 | _compile_error
060c8     FF 04 06 F6 | 	mov	_var03, #255
060cc     01 07 02 F6 | 	mov	_var04, _var02
060d0     02 09 02 F6 | 	mov	_var05, _var03
060d4     69 00 00 FF 
060d8     40 E5 05 F1 | 	add	objptr, ##54080
060dc     F2 0A 02 FB | 	rdlong	_var06, objptr
060e0     05 0D 02 F6 | 	mov	_var07, _var06
060e4     01 0C 66 F0 | 	shl	_var07, #1
060e8     05 0D 02 F1 | 	add	_var07, _var06
060ec     02 0C 66 F0 | 	shl	_var07, #2
060f0     03 00 00 FF 
060f4     00 E4 85 F1 | 	sub	objptr, ##1536
060f8     F2 0C 02 F1 | 	add	_var07, objptr
060fc     06 13 62 FC | 	wrlong	arg01, _var07
06100     03 00 00 FF 
06104     00 E4 05 F1 | 	add	objptr, ##1536
06108     F2 0C 02 FB | 	rdlong	_var07, objptr
0610c     06 0B 02 F6 | 	mov	_var06, _var07
06110     01 0A 66 F0 | 	shl	_var06, #1
06114     06 0B 02 F1 | 	add	_var06, _var07
06118     02 0A 66 F0 | 	shl	_var06, #2
0611c     03 00 00 FF 
06120     00 E4 85 F1 | 	sub	objptr, ##1536
06124     F2 0A 02 F1 | 	add	_var06, objptr
06128     04 0A 06 F1 | 	add	_var06, #4
0612c     05 07 62 FC | 	wrlong	_var04, _var06
06130     03 00 00 FF 
06134     00 E4 05 F1 | 	add	objptr, ##1536
06138     F2 0C 02 FB | 	rdlong	_var07, objptr
0613c     06 0B 02 F6 | 	mov	_var06, _var07
06140     01 0A 66 F0 | 	shl	_var06, #1
06144     06 0B 02 F1 | 	add	_var06, _var07
06148     02 0A 66 F0 | 	shl	_var06, #2
0614c     03 00 00 FF 
06150     00 E4 85 F1 | 	sub	objptr, ##1536
06154     F2 0A 02 F1 | 	add	_var06, objptr
06158     08 0A 06 F1 | 	add	_var06, #8
0615c     05 09 62 FC | 	wrlong	_var05, _var06
06160     03 00 00 FF 
06164     00 E4 05 F1 | 	add	objptr, ##1536
06168     F2 12 02 FB | 	rdlong	arg01, objptr
0616c     01 12 06 F1 | 	add	arg01, #1
06170     F2 12 62 FC | 	wrlong	arg01, objptr
06174     69 00 00 FF 
06178     40 E5 85 F1 | 	sub	objptr, ##54080
0617c                 | _compile_error_ret
0617c     2D 00 64 FD | 	ret
06180                 | 
06180                 | ' 
06180                 | ' sub compile_unknown() 
06180                 | _compile_unknown
06180     FF 04 06 F6 | 	mov	_var03, #255
06184     17 00 06 F6 | 	mov	_var01, #23
06188     01 07 02 F6 | 	mov	_var04, _var02
0618c     02 01 02 F6 | 	mov	_var01, _var03
06190     69 00 00 FF 
06194     40 E5 05 F1 | 	add	objptr, ##54080
06198     F2 08 02 FB | 	rdlong	_var05, objptr
0619c     04 0B 02 F6 | 	mov	_var06, _var05
061a0     01 0A 66 F0 | 	shl	_var06, #1
061a4     04 0B 02 F1 | 	add	_var06, _var05
061a8     02 0A 66 F0 | 	shl	_var06, #2
061ac     03 00 00 FF 
061b0     00 E4 85 F1 | 	sub	objptr, ##1536
061b4     F2 0A 02 F1 | 	add	_var06, objptr
061b8     05 2F 68 FC | 	wrlong	#23, _var06
061bc     03 00 00 FF 
061c0     00 E4 05 F1 | 	add	objptr, ##1536
061c4     F2 0A 02 FB | 	rdlong	_var06, objptr
061c8     05 09 02 F6 | 	mov	_var05, _var06
061cc     01 08 66 F0 | 	shl	_var05, #1
061d0     05 09 02 F1 | 	add	_var05, _var06
061d4     02 08 66 F0 | 	shl	_var05, #2
061d8     03 00 00 FF 
061dc     00 E4 85 F1 | 	sub	objptr, ##1536
061e0     F2 08 02 F1 | 	add	_var05, objptr
061e4     04 08 06 F1 | 	add	_var05, #4
061e8     04 07 62 FC | 	wrlong	_var04, _var05
061ec     03 00 00 FF 
061f0     00 E4 05 F1 | 	add	objptr, ##1536
061f4     F2 0A 02 FB | 	rdlong	_var06, objptr
061f8     05 09 02 F6 | 	mov	_var05, _var06
061fc     01 08 66 F0 | 	shl	_var05, #1
06200     05 09 02 F1 | 	add	_var05, _var06
06204     02 08 66 F0 | 	shl	_var05, #2
06208     03 00 00 FF 
0620c     00 E4 85 F1 | 	sub	objptr, ##1536
06210     F2 08 02 F1 | 	add	_var05, objptr
06214     08 08 06 F1 | 	add	_var05, #8
06218     04 01 62 FC | 	wrlong	_var01, _var05
0621c     03 00 00 FF 
06220     00 E4 05 F1 | 	add	objptr, ##1536
06224     F2 0A 02 FB | 	rdlong	_var06, objptr
06228     01 0A 06 F1 | 	add	_var06, #1
0622c     F2 0A 62 FC | 	wrlong	_var06, objptr
06230     69 00 00 FF 
06234     40 E5 85 F1 | 	sub	objptr, ##54080
06238                 | _compile_unknown_ret
06238     2D 00 64 FD | 	ret
0623c                 | 
0623c                 | ' 
0623c                 | ' function compile_fun_2p() as ulong
0623c                 | _compile_fun_2p
0623c     01 4A 05 F6 | 	mov	COUNT_, #1
06240     A8 00 A0 FD | 	call	#pushregs_
06244     40 22 B0 FD | 	call	#_expr
06248                 | ' 
06248                 | ' expr()
06248                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06248     56 00 00 FF 
0624c     08 E5 05 F1 | 	add	objptr, ##44296
06250     F2 1E 02 FB | 	rdlong	local01, objptr
06254     03 1E 66 F0 | 	shl	local01, #3
06258     02 00 00 FF 
0625c     38 E4 85 F1 | 	sub	objptr, ##1080
06260     F2 1E 02 F1 | 	add	local01, objptr
06264     04 1E 06 F1 | 	add	local01, #4
06268     0F 1F 02 FB | 	rdlong	local01, local01
0626c     11 1E 0E F2 | 	cmp	local01, #17 wz
06270     54 00 00 FF 
06274     D0 E4 85 F1 | 	sub	objptr, ##43216
06278     15 FA 05 56 |  if_ne	mov	result1, #21
0627c     24 00 90 5D |  if_ne	jmp	#LR__0520
06280     56 00 00 FF 
06284     08 E5 05 F1 | 	add	objptr, ##44296
06288     F2 1E 02 FB | 	rdlong	local01, objptr
0628c     01 1E 06 F1 | 	add	local01, #1
06290     F2 1E 62 FC | 	wrlong	local01, objptr
06294     56 00 00 FF 
06298     08 E5 85 F1 | 	sub	objptr, ##44296
0629c     E8 21 B0 FD | 	call	#_expr
062a0     00 FA 05 F6 | 	mov	result1, #0
062a4                 | LR__0520
062a4     A7 F0 03 F6 | 	mov	ptra, fp
062a8     B2 00 A0 FD | 	call	#popregs_
062ac                 | _compile_fun_2p_ret
062ac     2D 00 64 FD | 	ret
062b0                 | 
062b0                 | ' 
062b0                 | ' function compile_fun_3p() as ulong
062b0                 | _compile_fun_3p
062b0     01 4A 05 F6 | 	mov	COUNT_, #1
062b4     A8 00 A0 FD | 	call	#pushregs_
062b8     CC 21 B0 FD | 	call	#_expr
062bc                 | ' 
062bc                 | ' expr()
062bc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
062bc     56 00 00 FF 
062c0     08 E5 05 F1 | 	add	objptr, ##44296
062c4     F2 1E 02 FB | 	rdlong	local01, objptr
062c8     03 1E 66 F0 | 	shl	local01, #3
062cc     02 00 00 FF 
062d0     38 E4 85 F1 | 	sub	objptr, ##1080
062d4     F2 1E 02 F1 | 	add	local01, objptr
062d8     04 1E 06 F1 | 	add	local01, #4
062dc     0F 1F 02 FB | 	rdlong	local01, local01
062e0     11 1E 0E F2 | 	cmp	local01, #17 wz
062e4     54 00 00 FF 
062e8     D0 E4 85 F1 | 	sub	objptr, ##43216
062ec     15 FA 05 56 |  if_ne	mov	result1, #21
062f0     7C 00 90 5D |  if_ne	jmp	#LR__0530
062f4     56 00 00 FF 
062f8     08 E5 05 F1 | 	add	objptr, ##44296
062fc     F2 1E 02 FB | 	rdlong	local01, objptr
06300     01 1E 06 F1 | 	add	local01, #1
06304     F2 1E 62 FC | 	wrlong	local01, objptr
06308     56 00 00 FF 
0630c     08 E5 85 F1 | 	sub	objptr, ##44296
06310     74 21 B0 FD | 	call	#_expr
06314                 | ' expr()
06314                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06314     56 00 00 FF 
06318     08 E5 05 F1 | 	add	objptr, ##44296
0631c     F2 1E 02 FB | 	rdlong	local01, objptr
06320     03 1E 66 F0 | 	shl	local01, #3
06324     02 00 00 FF 
06328     38 E4 85 F1 | 	sub	objptr, ##1080
0632c     F2 1E 02 F1 | 	add	local01, objptr
06330     04 1E 06 F1 | 	add	local01, #4
06334     0F 1F 02 FB | 	rdlong	local01, local01
06338     11 1E 0E F2 | 	cmp	local01, #17 wz
0633c     54 00 00 FF 
06340     D0 E4 85 F1 | 	sub	objptr, ##43216
06344     15 FA 05 56 |  if_ne	mov	result1, #21
06348     24 00 90 5D |  if_ne	jmp	#LR__0530
0634c     56 00 00 FF 
06350     08 E5 05 F1 | 	add	objptr, ##44296
06354     F2 1E 02 FB | 	rdlong	local01, objptr
06358     01 1E 06 F1 | 	add	local01, #1
0635c     F2 1E 62 FC | 	wrlong	local01, objptr
06360     56 00 00 FF 
06364     08 E5 85 F1 | 	sub	objptr, ##44296
06368     1C 21 B0 FD | 	call	#_expr
0636c     00 FA 05 F6 | 	mov	result1, #0
06370                 | LR__0530
06370     A7 F0 03 F6 | 	mov	ptra, fp
06374     B2 00 A0 FD | 	call	#popregs_
06378                 | _compile_fun_3p_ret
06378     2D 00 64 FD | 	ret
0637c                 | 
0637c                 | ' 
0637c                 | ' function compile_fun_4p() as ulong
0637c                 | _compile_fun_4p
0637c     01 4A 05 F6 | 	mov	COUNT_, #1
06380     A8 00 A0 FD | 	call	#pushregs_
06384     00 21 B0 FD | 	call	#_expr
06388                 | ' 
06388                 | ' expr()
06388                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06388     56 00 00 FF 
0638c     08 E5 05 F1 | 	add	objptr, ##44296
06390     F2 1E 02 FB | 	rdlong	local01, objptr
06394     03 1E 66 F0 | 	shl	local01, #3
06398     02 00 00 FF 
0639c     38 E4 85 F1 | 	sub	objptr, ##1080
063a0     F2 1E 02 F1 | 	add	local01, objptr
063a4     04 1E 06 F1 | 	add	local01, #4
063a8     0F 1F 02 FB | 	rdlong	local01, local01
063ac     11 1E 0E F2 | 	cmp	local01, #17 wz
063b0     54 00 00 FF 
063b4     D0 E4 85 F1 | 	sub	objptr, ##43216
063b8     15 FA 05 56 |  if_ne	mov	result1, #21
063bc     D4 00 90 5D |  if_ne	jmp	#LR__0540
063c0     56 00 00 FF 
063c4     08 E5 05 F1 | 	add	objptr, ##44296
063c8     F2 1E 02 FB | 	rdlong	local01, objptr
063cc     01 1E 06 F1 | 	add	local01, #1
063d0     F2 1E 62 FC | 	wrlong	local01, objptr
063d4     56 00 00 FF 
063d8     08 E5 85 F1 | 	sub	objptr, ##44296
063dc     A8 20 B0 FD | 	call	#_expr
063e0                 | ' expr()
063e0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
063e0     56 00 00 FF 
063e4     08 E5 05 F1 | 	add	objptr, ##44296
063e8     F2 1E 02 FB | 	rdlong	local01, objptr
063ec     03 1E 66 F0 | 	shl	local01, #3
063f0     02 00 00 FF 
063f4     38 E4 85 F1 | 	sub	objptr, ##1080
063f8     F2 1E 02 F1 | 	add	local01, objptr
063fc     04 1E 06 F1 | 	add	local01, #4
06400     0F 1F 02 FB | 	rdlong	local01, local01
06404     11 1E 0E F2 | 	cmp	local01, #17 wz
06408     54 00 00 FF 
0640c     D0 E4 85 F1 | 	sub	objptr, ##43216
06410     15 FA 05 56 |  if_ne	mov	result1, #21
06414     7C 00 90 5D |  if_ne	jmp	#LR__0540
06418     56 00 00 FF 
0641c     08 E5 05 F1 | 	add	objptr, ##44296
06420     F2 1E 02 FB | 	rdlong	local01, objptr
06424     01 1E 06 F1 | 	add	local01, #1
06428     F2 1E 62 FC | 	wrlong	local01, objptr
0642c     56 00 00 FF 
06430     08 E5 85 F1 | 	sub	objptr, ##44296
06434     50 20 B0 FD | 	call	#_expr
06438                 | ' expr()
06438                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06438     56 00 00 FF 
0643c     08 E5 05 F1 | 	add	objptr, ##44296
06440     F2 1E 02 FB | 	rdlong	local01, objptr
06444     03 1E 66 F0 | 	shl	local01, #3
06448     02 00 00 FF 
0644c     38 E4 85 F1 | 	sub	objptr, ##1080
06450     F2 1E 02 F1 | 	add	local01, objptr
06454     04 1E 06 F1 | 	add	local01, #4
06458     0F 1F 02 FB | 	rdlong	local01, local01
0645c     11 1E 0E F2 | 	cmp	local01, #17 wz
06460     54 00 00 FF 
06464     D0 E4 85 F1 | 	sub	objptr, ##43216
06468     15 FA 05 56 |  if_ne	mov	result1, #21
0646c     24 00 90 5D |  if_ne	jmp	#LR__0540
06470     56 00 00 FF 
06474     08 E5 05 F1 | 	add	objptr, ##44296
06478     F2 1E 02 FB | 	rdlong	local01, objptr
0647c     01 1E 06 F1 | 	add	local01, #1
06480     F2 1E 62 FC | 	wrlong	local01, objptr
06484     56 00 00 FF 
06488     08 E5 85 F1 | 	sub	objptr, ##44296
0648c     F8 1F B0 FD | 	call	#_expr
06490     00 FA 05 F6 | 	mov	result1, #0
06494                 | LR__0540
06494     A7 F0 03 F6 | 	mov	ptra, fp
06498     B2 00 A0 FD | 	call	#popregs_
0649c                 | _compile_fun_4p_ret
0649c     2D 00 64 FD | 	ret
064a0                 | 
064a0                 | ' 
064a0                 | ' 
064a0                 | ' function compile_fun_5p() as ulong
064a0                 | _compile_fun_5p
064a0     01 4A 05 F6 | 	mov	COUNT_, #1
064a4     A8 00 A0 FD | 	call	#pushregs_
064a8     DC 1F B0 FD | 	call	#_expr
064ac                 | ' 
064ac                 | ' expr()
064ac                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
064ac     56 00 00 FF 
064b0     08 E5 05 F1 | 	add	objptr, ##44296
064b4     F2 1E 02 FB | 	rdlong	local01, objptr
064b8     03 1E 66 F0 | 	shl	local01, #3
064bc     02 00 00 FF 
064c0     38 E4 85 F1 | 	sub	objptr, ##1080
064c4     F2 1E 02 F1 | 	add	local01, objptr
064c8     04 1E 06 F1 | 	add	local01, #4
064cc     0F 1F 02 FB | 	rdlong	local01, local01
064d0     11 1E 0E F2 | 	cmp	local01, #17 wz
064d4     54 00 00 FF 
064d8     D0 E4 85 F1 | 	sub	objptr, ##43216
064dc     15 FA 05 56 |  if_ne	mov	result1, #21
064e0     2C 01 90 5D |  if_ne	jmp	#LR__0550
064e4     56 00 00 FF 
064e8     08 E5 05 F1 | 	add	objptr, ##44296
064ec     F2 1E 02 FB | 	rdlong	local01, objptr
064f0     01 1E 06 F1 | 	add	local01, #1
064f4     F2 1E 62 FC | 	wrlong	local01, objptr
064f8     56 00 00 FF 
064fc     08 E5 85 F1 | 	sub	objptr, ##44296
06500     84 1F B0 FD | 	call	#_expr
06504                 | ' expr()
06504                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06504     56 00 00 FF 
06508     08 E5 05 F1 | 	add	objptr, ##44296
0650c     F2 1E 02 FB | 	rdlong	local01, objptr
06510     03 1E 66 F0 | 	shl	local01, #3
06514     02 00 00 FF 
06518     38 E4 85 F1 | 	sub	objptr, ##1080
0651c     F2 1E 02 F1 | 	add	local01, objptr
06520     04 1E 06 F1 | 	add	local01, #4
06524     0F 1F 02 FB | 	rdlong	local01, local01
06528     11 1E 0E F2 | 	cmp	local01, #17 wz
0652c     54 00 00 FF 
06530     D0 E4 85 F1 | 	sub	objptr, ##43216
06534     15 FA 05 56 |  if_ne	mov	result1, #21
06538     D4 00 90 5D |  if_ne	jmp	#LR__0550
0653c     56 00 00 FF 
06540     08 E5 05 F1 | 	add	objptr, ##44296
06544     F2 1E 02 FB | 	rdlong	local01, objptr
06548     01 1E 06 F1 | 	add	local01, #1
0654c     F2 1E 62 FC | 	wrlong	local01, objptr
06550     56 00 00 FF 
06554     08 E5 85 F1 | 	sub	objptr, ##44296
06558     2C 1F B0 FD | 	call	#_expr
0655c                 | ' expr()
0655c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0655c     56 00 00 FF 
06560     08 E5 05 F1 | 	add	objptr, ##44296
06564     F2 1E 02 FB | 	rdlong	local01, objptr
06568     03 1E 66 F0 | 	shl	local01, #3
0656c     02 00 00 FF 
06570     38 E4 85 F1 | 	sub	objptr, ##1080
06574     F2 1E 02 F1 | 	add	local01, objptr
06578     04 1E 06 F1 | 	add	local01, #4
0657c     0F 1F 02 FB | 	rdlong	local01, local01
06580     11 1E 0E F2 | 	cmp	local01, #17 wz
06584     54 00 00 FF 
06588     D0 E4 85 F1 | 	sub	objptr, ##43216
0658c     15 FA 05 56 |  if_ne	mov	result1, #21
06590     7C 00 90 5D |  if_ne	jmp	#LR__0550
06594     56 00 00 FF 
06598     08 E5 05 F1 | 	add	objptr, ##44296
0659c     F2 1E 02 FB | 	rdlong	local01, objptr
065a0     01 1E 06 F1 | 	add	local01, #1
065a4     F2 1E 62 FC | 	wrlong	local01, objptr
065a8     56 00 00 FF 
065ac     08 E5 85 F1 | 	sub	objptr, ##44296
065b0     D4 1E B0 FD | 	call	#_expr
065b4                 | ' expr()
065b4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
065b4     56 00 00 FF 
065b8     08 E5 05 F1 | 	add	objptr, ##44296
065bc     F2 1E 02 FB | 	rdlong	local01, objptr
065c0     03 1E 66 F0 | 	shl	local01, #3
065c4     02 00 00 FF 
065c8     38 E4 85 F1 | 	sub	objptr, ##1080
065cc     F2 1E 02 F1 | 	add	local01, objptr
065d0     04 1E 06 F1 | 	add	local01, #4
065d4     0F 1F 02 FB | 	rdlong	local01, local01
065d8     11 1E 0E F2 | 	cmp	local01, #17 wz
065dc     54 00 00 FF 
065e0     D0 E4 85 F1 | 	sub	objptr, ##43216
065e4     15 FA 05 56 |  if_ne	mov	result1, #21
065e8     24 00 90 5D |  if_ne	jmp	#LR__0550
065ec     56 00 00 FF 
065f0     08 E5 05 F1 | 	add	objptr, ##44296
065f4     F2 1E 02 FB | 	rdlong	local01, objptr
065f8     01 1E 06 F1 | 	add	local01, #1
065fc     F2 1E 62 FC | 	wrlong	local01, objptr
06600     56 00 00 FF 
06604     08 E5 85 F1 | 	sub	objptr, ##44296
06608     7C 1E B0 FD | 	call	#_expr
0660c     00 FA 05 F6 | 	mov	result1, #0
06610                 | LR__0550
06610     A7 F0 03 F6 | 	mov	ptra, fp
06614     B2 00 A0 FD | 	call	#popregs_
06618                 | _compile_fun_5p_ret
06618     2D 00 64 FD | 	ret
0661c                 | 
0661c                 | ' 
0661c                 | ' function compile_fun_varp() as ulong 
0661c                 | _compile_fun_varp
0661c     02 4A 05 F6 | 	mov	COUNT_, #2
06620     A8 00 A0 FD | 	call	#pushregs_
06624     00 1E 06 F6 | 	mov	local01, #0
06628                 | ' i=0
06628                 | ' if lparts(ct).token<>token_end then
06628     56 00 00 FF 
0662c     08 E5 05 F1 | 	add	objptr, ##44296
06630     F2 20 02 FB | 	rdlong	local02, objptr
06634     03 20 66 F0 | 	shl	local02, #3
06638     02 00 00 FF 
0663c     38 E4 85 F1 | 	sub	objptr, ##1080
06640     F2 20 02 F1 | 	add	local02, objptr
06644     04 20 06 F1 | 	add	local02, #4
06648     10 21 02 FB | 	rdlong	local02, local02
0664c     FE 21 0E F2 | 	cmp	local02, #510 wz
06650     54 00 00 FF 
06654     D0 E4 85 F1 | 	sub	objptr, ##43216
06658     5C 00 90 AD |  if_e	jmp	#LR__0562
0665c                 | '   do
0665c                 | LR__0560
0665c     28 1E B0 FD | 	call	#_expr
06660     01 1E 06 F1 | 	add	local01, #1
06664                 | '   expr()
06664                 | '    i+=1
06664                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
06664     56 00 00 FF 
06668     08 E5 05 F1 | 	add	objptr, ##44296
0666c     F2 20 02 FB | 	rdlong	local02, objptr
06670     03 20 66 F0 | 	shl	local02, #3
06674     02 00 00 FF 
06678     38 E4 85 F1 | 	sub	objptr, ##1080
0667c     F2 20 02 F1 | 	add	local02, objptr
06680     04 20 06 F1 | 	add	local02, #4
06684     10 21 02 FB | 	rdlong	local02, local02
06688     11 20 0E F2 | 	cmp	local02, #17 wz
0668c     54 00 00 FF 
06690     D0 E4 85 F1 | 	sub	objptr, ##43216
06694     20 00 90 5D |  if_ne	jmp	#LR__0561
06698     56 00 00 FF 
0669c     08 E5 05 F1 | 	add	objptr, ##44296
066a0     F2 20 02 FB | 	rdlong	local02, objptr
066a4     01 20 06 F1 | 	add	local02, #1
066a8     F2 20 62 FC | 	wrlong	local02, objptr
066ac     56 00 00 FF 
066b0     08 E5 85 F1 | 	sub	objptr, ##44296
066b4     A4 FF 9F FD | 	jmp	#LR__0560
066b8                 | LR__0561
066b8                 | LR__0562
066b8                 | ' return i
066b8     0F FB 01 F6 | 	mov	result1, local01
066bc     A7 F0 03 F6 | 	mov	ptra, fp
066c0     B2 00 A0 FD | 	call	#popregs_
066c4                 | _compile_fun_varp_ret
066c4     2D 00 64 FD | 	ret
066c8                 | 
066c8                 | ' 
066c8                 | ' 
066c8                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
066c8                 | _compile_print
066c8     0B 4A 05 F6 | 	mov	COUNT_, #11
066cc     A8 00 A0 FD | 	call	#pushregs_
066d0     00 1E 06 F6 | 	mov	local01, #0
066d4     1D 22 06 F6 | 	mov	local03, #29
066d8                 | ' t1.result.uresult=0 : t1.result_type=result_uint
066d8                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
066d8     56 00 00 FF 
066dc     08 E5 05 F1 | 	add	objptr, ##44296
066e0     F2 24 02 FB | 	rdlong	local04, objptr
066e4     03 24 66 F0 | 	shl	local04, #3
066e8     02 00 00 FF 
066ec     38 E4 85 F1 | 	sub	objptr, ##1080
066f0     F2 24 02 F1 | 	add	local04, objptr
066f4     04 24 06 F1 | 	add	local04, #4
066f8     12 25 02 FB | 	rdlong	local04, local04
066fc     FE 25 0E F2 | 	cmp	local04, #510 wz
06700     54 00 00 FF 
06704     D0 E4 85 F1 | 	sub	objptr, ##43216
06708     68 01 90 5D |  if_ne	jmp	#LR__0570
0670c     20 22 06 F6 | 	mov	local03, #32
06710     0F 27 02 F6 | 	mov	local05, local01
06714     10 29 02 F6 | 	mov	local06, local02
06718     11 2B 02 F6 | 	mov	local07, local03
0671c     69 00 00 FF 
06720     40 E5 05 F1 | 	add	objptr, ##54080
06724     F2 2C 02 FB | 	rdlong	local08, objptr
06728     16 2F 02 F6 | 	mov	local09, local08
0672c     01 2E 66 F0 | 	shl	local09, #1
06730     16 2F 02 F1 | 	add	local09, local08
06734     02 2E 66 F0 | 	shl	local09, #2
06738     03 00 00 FF 
0673c     00 E4 85 F1 | 	sub	objptr, ##1536
06740     F2 2E 02 F1 | 	add	local09, objptr
06744     17 27 62 FC | 	wrlong	local05, local09
06748     03 00 00 FF 
0674c     00 E4 05 F1 | 	add	objptr, ##1536
06750     F2 26 02 FB | 	rdlong	local05, objptr
06754     13 31 02 F6 | 	mov	local10, local05
06758     01 30 66 F0 | 	shl	local10, #1
0675c     13 31 02 F1 | 	add	local10, local05
06760     02 30 66 F0 | 	shl	local10, #2
06764     03 00 00 FF 
06768     00 E4 85 F1 | 	sub	objptr, ##1536
0676c     F2 30 02 F1 | 	add	local10, objptr
06770     04 30 06 F1 | 	add	local10, #4
06774     18 29 62 FC | 	wrlong	local06, local10
06778     03 00 00 FF 
0677c     00 E4 05 F1 | 	add	objptr, ##1536
06780     F2 26 02 FB | 	rdlong	local05, objptr
06784     13 33 02 F6 | 	mov	local11, local05
06788     01 32 66 F0 | 	shl	local11, #1
0678c     13 33 02 F1 | 	add	local11, local05
06790     02 32 66 F0 | 	shl	local11, #2
06794     03 00 00 FF 
06798     00 E4 85 F1 | 	sub	objptr, ##1536
0679c     F2 32 02 F1 | 	add	local11, objptr
067a0     08 32 06 F1 | 	add	local11, #8
067a4     19 2B 62 FC | 	wrlong	local07, local11
067a8     03 00 00 FF 
067ac     00 E4 05 F1 | 	add	objptr, ##1536
067b0     F2 26 02 FB | 	rdlong	local05, objptr
067b4     01 26 06 F1 | 	add	local05, #1
067b8     F2 26 62 FC | 	wrlong	local05, objptr
067bc     44 22 06 F6 | 	mov	local03, #68
067c0     0F 27 02 F6 | 	mov	local05, local01
067c4     10 29 02 F6 | 	mov	local06, local02
067c8     11 2B 02 F6 | 	mov	local07, local03
067cc     F2 2C 02 FB | 	rdlong	local08, objptr
067d0     16 2F 02 F6 | 	mov	local09, local08
067d4     01 2E 66 F0 | 	shl	local09, #1
067d8     16 2F 02 F1 | 	add	local09, local08
067dc     02 2E 66 F0 | 	shl	local09, #2
067e0     03 00 00 FF 
067e4     00 E4 85 F1 | 	sub	objptr, ##1536
067e8     F2 2E 02 F1 | 	add	local09, objptr
067ec     17 27 62 FC | 	wrlong	local05, local09
067f0     03 00 00 FF 
067f4     00 E4 05 F1 | 	add	objptr, ##1536
067f8     F2 32 02 FB | 	rdlong	local11, objptr
067fc     19 31 02 F6 | 	mov	local10, local11
06800     01 30 66 F0 | 	shl	local10, #1
06804     19 31 02 F1 | 	add	local10, local11
06808     02 30 66 F0 | 	shl	local10, #2
0680c     03 00 00 FF 
06810     00 E4 85 F1 | 	sub	objptr, ##1536
06814     F2 30 02 F1 | 	add	local10, objptr
06818     04 30 06 F1 | 	add	local10, #4
0681c     18 29 62 FC | 	wrlong	local06, local10
06820     03 00 00 FF 
06824     00 E4 05 F1 | 	add	objptr, ##1536
06828     F2 30 02 FB | 	rdlong	local10, objptr
0682c     18 33 02 F6 | 	mov	local11, local10
06830     01 32 66 F0 | 	shl	local11, #1
06834     18 33 02 F1 | 	add	local11, local10
06838     02 32 66 F0 | 	shl	local11, #2
0683c     03 00 00 FF 
06840     00 E4 85 F1 | 	sub	objptr, ##1536
06844     F2 32 02 F1 | 	add	local11, objptr
06848     08 32 06 F1 | 	add	local11, #8
0684c     19 2B 62 FC | 	wrlong	local07, local11
06850     03 00 00 FF 
06854     00 E4 05 F1 | 	add	objptr, ##1536
06858     F2 26 02 FB | 	rdlong	local05, objptr
0685c     01 26 06 F1 | 	add	local05, #1
06860     F2 26 62 FC | 	wrlong	local05, objptr
06864     69 00 00 FF 
06868     40 E5 85 F1 | 	sub	objptr, ##54080
0686c     00 FA 05 F6 | 	mov	result1, #0
06870     20 05 90 FD | 	jmp	#LR__0577
06874                 | LR__0570
06874                 | ' do
06874                 | LR__0571
06874     10 1C B0 FD | 	call	#_expr
06878                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
06878                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06878     56 00 00 FF 
0687c     08 E5 05 F1 | 	add	objptr, ##44296
06880     F2 24 02 FB | 	rdlong	local04, objptr
06884     03 24 66 F0 | 	shl	local04, #3
06888     02 00 00 FF 
0688c     38 E4 85 F1 | 	sub	objptr, ##1080
06890     F2 24 02 F1 | 	add	local04, objptr
06894     04 24 06 F1 | 	add	local04, #4
06898     12 2D 02 FB | 	rdlong	local08, local04
0689c     11 2C 0E F2 | 	cmp	local08, #17 wz
068a0     54 00 00 FF 
068a4     D0 E4 85 F1 | 	sub	objptr, ##43216
068a8     60 01 90 5D |  if_ne	jmp	#LR__0572
068ac     21 22 06 F6 | 	mov	local03, #33
068b0     0F 27 02 F6 | 	mov	local05, local01
068b4     10 29 02 F6 | 	mov	local06, local02
068b8     11 2B 02 F6 | 	mov	local07, local03
068bc     69 00 00 FF 
068c0     40 E5 05 F1 | 	add	objptr, ##54080
068c4     F2 2C 02 FB | 	rdlong	local08, objptr
068c8     16 2F 02 F6 | 	mov	local09, local08
068cc     01 2E 66 F0 | 	shl	local09, #1
068d0     16 2F 02 F1 | 	add	local09, local08
068d4     02 2E 66 F0 | 	shl	local09, #2
068d8     03 00 00 FF 
068dc     00 E4 85 F1 | 	sub	objptr, ##1536
068e0     F2 2E 02 F1 | 	add	local09, objptr
068e4     17 27 62 FC | 	wrlong	local05, local09
068e8     03 00 00 FF 
068ec     00 E4 05 F1 | 	add	objptr, ##1536
068f0     F2 32 02 FB | 	rdlong	local11, objptr
068f4     19 31 02 F6 | 	mov	local10, local11
068f8     01 30 66 F0 | 	shl	local10, #1
068fc     19 31 02 F1 | 	add	local10, local11
06900     02 30 66 F0 | 	shl	local10, #2
06904     03 00 00 FF 
06908     00 E4 85 F1 | 	sub	objptr, ##1536
0690c     F2 30 02 F1 | 	add	local10, objptr
06910     04 30 06 F1 | 	add	local10, #4
06914     18 29 62 FC | 	wrlong	local06, local10
06918     03 00 00 FF 
0691c     00 E4 05 F1 | 	add	objptr, ##1536
06920     F2 26 02 FB | 	rdlong	local05, objptr
06924     13 33 02 F6 | 	mov	local11, local05
06928     01 32 66 F0 | 	shl	local11, #1
0692c     13 33 02 F1 | 	add	local11, local05
06930     02 32 66 F0 | 	shl	local11, #2
06934     03 00 00 FF 
06938     00 E4 85 F1 | 	sub	objptr, ##1536
0693c     F2 32 02 F1 | 	add	local11, objptr
06940     08 32 06 F1 | 	add	local11, #8
06944     19 2B 62 FC | 	wrlong	local07, local11
06948     03 00 00 FF 
0694c     00 E4 05 F1 | 	add	objptr, ##1536
06950     F2 26 02 FB | 	rdlong	local05, objptr
06954     01 26 06 F1 | 	add	local05, #1
06958     F2 26 62 FC | 	wrlong	local05, objptr
0695c     44 22 06 F6 | 	mov	local03, #68
06960     0F 27 02 F6 | 	mov	local05, local01
06964     10 29 02 F6 | 	mov	local06, local02
06968     11 2B 02 F6 | 	mov	local07, local03
0696c     F2 2C 02 FB | 	rdlong	local08, objptr
06970     16 2F 02 F6 | 	mov	local09, local08
06974     01 2E 66 F0 | 	shl	local09, #1
06978     16 2F 02 F1 | 	add	local09, local08
0697c     02 2E 66 F0 | 	shl	local09, #2
06980     03 00 00 FF 
06984     00 E4 85 F1 | 	sub	objptr, ##1536
06988     F2 2E 02 F1 | 	add	local09, objptr
0698c     17 27 62 FC | 	wrlong	local05, local09
06990     03 00 00 FF 
06994     00 E4 05 F1 | 	add	objptr, ##1536
06998     F2 32 02 FB | 	rdlong	local11, objptr
0699c     19 31 02 F6 | 	mov	local10, local11
069a0     01 30 66 F0 | 	shl	local10, #1
069a4     19 31 02 F1 | 	add	local10, local11
069a8     02 30 66 F0 | 	shl	local10, #2
069ac     03 00 00 FF 
069b0     00 E4 85 F1 | 	sub	objptr, ##1536
069b4     F2 30 02 F1 | 	add	local10, objptr
069b8     04 30 06 F1 | 	add	local10, #4
069bc     18 29 62 FC | 	wrlong	local06, local10
069c0     03 00 00 FF 
069c4     00 E4 05 F1 | 	add	objptr, ##1536
069c8     F2 30 02 FB | 	rdlong	local10, objptr
069cc     18 33 02 F6 | 	mov	local11, local10
069d0     01 32 66 F0 | 	shl	local11, #1
069d4     18 33 02 F1 | 	add	local11, local10
069d8     02 32 66 F0 | 	shl	local11, #2
069dc     03 00 00 FF 
069e0     00 E4 85 F1 | 	sub	objptr, ##1536
069e4     F2 32 02 F1 | 	add	local11, objptr
069e8     08 32 06 F1 | 	add	local11, #8
069ec     19 2B 62 FC | 	wrlong	local07, local11
069f0     03 00 00 FF 
069f4     00 E4 05 F1 | 	add	objptr, ##1536
069f8     F2 26 02 FB | 	rdlong	local05, objptr
069fc     01 26 06 F1 | 	add	local05, #1
06a00     F2 26 62 FC | 	wrlong	local05, objptr
06a04     69 00 00 FF 
06a08     40 E5 85 F1 | 	sub	objptr, ##54080
06a0c                 | LR__0572
06a0c                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06a0c     56 00 00 FF 
06a10     08 E5 05 F1 | 	add	objptr, ##44296
06a14     F2 24 02 FB | 	rdlong	local04, objptr
06a18     03 24 66 F0 | 	shl	local04, #3
06a1c     02 00 00 FF 
06a20     38 E4 85 F1 | 	sub	objptr, ##1080
06a24     F2 24 02 F1 | 	add	local04, objptr
06a28     04 24 06 F1 | 	add	local04, #4
06a2c     12 2D 02 FB | 	rdlong	local08, local04
06a30     12 2C 0E F2 | 	cmp	local08, #18 wz
06a34     54 00 00 FF 
06a38     D0 E4 85 F1 | 	sub	objptr, ##43216
06a3c     60 01 90 5D |  if_ne	jmp	#LR__0573
06a40     22 22 06 F6 | 	mov	local03, #34
06a44     0F 27 02 F6 | 	mov	local05, local01
06a48     10 29 02 F6 | 	mov	local06, local02
06a4c     11 2B 02 F6 | 	mov	local07, local03
06a50     69 00 00 FF 
06a54     40 E5 05 F1 | 	add	objptr, ##54080
06a58     F2 2C 02 FB | 	rdlong	local08, objptr
06a5c     16 2F 02 F6 | 	mov	local09, local08
06a60     01 2E 66 F0 | 	shl	local09, #1
06a64     16 2F 02 F1 | 	add	local09, local08
06a68     02 2E 66 F0 | 	shl	local09, #2
06a6c     03 00 00 FF 
06a70     00 E4 85 F1 | 	sub	objptr, ##1536
06a74     F2 2E 02 F1 | 	add	local09, objptr
06a78     17 27 62 FC | 	wrlong	local05, local09
06a7c     03 00 00 FF 
06a80     00 E4 05 F1 | 	add	objptr, ##1536
06a84     F2 32 02 FB | 	rdlong	local11, objptr
06a88     19 31 02 F6 | 	mov	local10, local11
06a8c     01 30 66 F0 | 	shl	local10, #1
06a90     19 31 02 F1 | 	add	local10, local11
06a94     02 30 66 F0 | 	shl	local10, #2
06a98     03 00 00 FF 
06a9c     00 E4 85 F1 | 	sub	objptr, ##1536
06aa0     F2 30 02 F1 | 	add	local10, objptr
06aa4     04 30 06 F1 | 	add	local10, #4
06aa8     18 29 62 FC | 	wrlong	local06, local10
06aac     03 00 00 FF 
06ab0     00 E4 05 F1 | 	add	objptr, ##1536
06ab4     F2 26 02 FB | 	rdlong	local05, objptr
06ab8     13 33 02 F6 | 	mov	local11, local05
06abc     01 32 66 F0 | 	shl	local11, #1
06ac0     13 33 02 F1 | 	add	local11, local05
06ac4     02 32 66 F0 | 	shl	local11, #2
06ac8     03 00 00 FF 
06acc     00 E4 85 F1 | 	sub	objptr, ##1536
06ad0     F2 32 02 F1 | 	add	local11, objptr
06ad4     08 32 06 F1 | 	add	local11, #8
06ad8     19 2B 62 FC | 	wrlong	local07, local11
06adc     03 00 00 FF 
06ae0     00 E4 05 F1 | 	add	objptr, ##1536
06ae4     F2 26 02 FB | 	rdlong	local05, objptr
06ae8     01 26 06 F1 | 	add	local05, #1
06aec     F2 26 62 FC | 	wrlong	local05, objptr
06af0     44 22 06 F6 | 	mov	local03, #68
06af4     0F 27 02 F6 | 	mov	local05, local01
06af8     10 29 02 F6 | 	mov	local06, local02
06afc     11 2B 02 F6 | 	mov	local07, local03
06b00     F2 2C 02 FB | 	rdlong	local08, objptr
06b04     16 2F 02 F6 | 	mov	local09, local08
06b08     01 2E 66 F0 | 	shl	local09, #1
06b0c     16 2F 02 F1 | 	add	local09, local08
06b10     02 2E 66 F0 | 	shl	local09, #2
06b14     03 00 00 FF 
06b18     00 E4 85 F1 | 	sub	objptr, ##1536
06b1c     F2 2E 02 F1 | 	add	local09, objptr
06b20     17 27 62 FC | 	wrlong	local05, local09
06b24     03 00 00 FF 
06b28     00 E4 05 F1 | 	add	objptr, ##1536
06b2c     F2 32 02 FB | 	rdlong	local11, objptr
06b30     19 31 02 F6 | 	mov	local10, local11
06b34     01 30 66 F0 | 	shl	local10, #1
06b38     19 31 02 F1 | 	add	local10, local11
06b3c     02 30 66 F0 | 	shl	local10, #2
06b40     03 00 00 FF 
06b44     00 E4 85 F1 | 	sub	objptr, ##1536
06b48     F2 30 02 F1 | 	add	local10, objptr
06b4c     04 30 06 F1 | 	add	local10, #4
06b50     18 29 62 FC | 	wrlong	local06, local10
06b54     03 00 00 FF 
06b58     00 E4 05 F1 | 	add	objptr, ##1536
06b5c     F2 30 02 FB | 	rdlong	local10, objptr
06b60     18 33 02 F6 | 	mov	local11, local10
06b64     01 32 66 F0 | 	shl	local11, #1
06b68     18 33 02 F1 | 	add	local11, local10
06b6c     02 32 66 F0 | 	shl	local11, #2
06b70     03 00 00 FF 
06b74     00 E4 85 F1 | 	sub	objptr, ##1536
06b78     F2 32 02 F1 | 	add	local11, objptr
06b7c     08 32 06 F1 | 	add	local11, #8
06b80     19 2B 62 FC | 	wrlong	local07, local11
06b84     03 00 00 FF 
06b88     00 E4 05 F1 | 	add	objptr, ##1536
06b8c     F2 26 02 FB | 	rdlong	local05, objptr
06b90     01 26 06 F1 | 	add	local05, #1
06b94     F2 26 62 FC | 	wrlong	local05, objptr
06b98     69 00 00 FF 
06b9c     40 E5 85 F1 | 	sub	objptr, ##54080
06ba0                 | LR__0573
06ba0                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06ba0     56 00 00 FF 
06ba4     08 E5 05 F1 | 	add	objptr, ##44296
06ba8     F2 24 02 FB | 	rdlong	local04, objptr
06bac     03 24 66 F0 | 	shl	local04, #3
06bb0     02 00 00 FF 
06bb4     38 E4 85 F1 | 	sub	objptr, ##1080
06bb8     F2 24 02 F1 | 	add	local04, objptr
06bbc     04 24 06 F1 | 	add	local04, #4
06bc0     12 2D 02 FB | 	rdlong	local08, local04
06bc4     FE 2D 0E F2 | 	cmp	local08, #510 wz
06bc8     54 00 00 FF 
06bcc     D0 E4 85 F1 | 	sub	objptr, ##43216
06bd0     B8 00 90 5D |  if_ne	jmp	#LR__0574
06bd4     44 22 06 F6 | 	mov	local03, #68
06bd8     0F 27 02 F6 | 	mov	local05, local01
06bdc     10 29 02 F6 | 	mov	local06, local02
06be0     11 2B 02 F6 | 	mov	local07, local03
06be4     69 00 00 FF 
06be8     40 E5 05 F1 | 	add	objptr, ##54080
06bec     F2 2C 02 FB | 	rdlong	local08, objptr
06bf0     16 2F 02 F6 | 	mov	local09, local08
06bf4     01 2E 66 F0 | 	shl	local09, #1
06bf8     16 2F 02 F1 | 	add	local09, local08
06bfc     02 2E 66 F0 | 	shl	local09, #2
06c00     03 00 00 FF 
06c04     00 E4 85 F1 | 	sub	objptr, ##1536
06c08     F2 2E 02 F1 | 	add	local09, objptr
06c0c     17 27 62 FC | 	wrlong	local05, local09
06c10     03 00 00 FF 
06c14     00 E4 05 F1 | 	add	objptr, ##1536
06c18     F2 32 02 FB | 	rdlong	local11, objptr
06c1c     19 31 02 F6 | 	mov	local10, local11
06c20     01 30 66 F0 | 	shl	local10, #1
06c24     19 31 02 F1 | 	add	local10, local11
06c28     02 30 66 F0 | 	shl	local10, #2
06c2c     03 00 00 FF 
06c30     00 E4 85 F1 | 	sub	objptr, ##1536
06c34     F2 30 02 F1 | 	add	local10, objptr
06c38     04 30 06 F1 | 	add	local10, #4
06c3c     18 29 62 FC | 	wrlong	local06, local10
06c40     03 00 00 FF 
06c44     00 E4 05 F1 | 	add	objptr, ##1536
06c48     F2 30 02 FB | 	rdlong	local10, objptr
06c4c     18 33 02 F6 | 	mov	local11, local10
06c50     01 32 66 F0 | 	shl	local11, #1
06c54     18 33 02 F1 | 	add	local11, local10
06c58     02 32 66 F0 | 	shl	local11, #2
06c5c     03 00 00 FF 
06c60     00 E4 85 F1 | 	sub	objptr, ##1536
06c64     F2 32 02 F1 | 	add	local11, objptr
06c68     08 32 06 F1 | 	add	local11, #8
06c6c     19 2B 62 FC | 	wrlong	local07, local11
06c70     03 00 00 FF 
06c74     00 E4 05 F1 | 	add	objptr, ##1536
06c78     F2 26 02 FB | 	rdlong	local05, objptr
06c7c     01 26 06 F1 | 	add	local05, #1
06c80     F2 26 62 FC | 	wrlong	local05, objptr
06c84     69 00 00 FF 
06c88     40 E5 85 F1 | 	sub	objptr, ##54080
06c8c                 | LR__0574
06c8c                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
06c8c     56 00 00 FF 
06c90     08 E5 05 F1 | 	add	objptr, ##44296
06c94     F2 24 02 FB | 	rdlong	local04, objptr
06c98     03 24 66 F0 | 	shl	local04, #3
06c9c     02 00 00 FF 
06ca0     38 E4 85 F1 | 	sub	objptr, ##1080
06ca4     F2 24 02 F1 | 	add	local04, objptr
06ca8     04 24 06 F1 | 	add	local04, #4
06cac     12 2D 02 FB | 	rdlong	local08, local04
06cb0     11 2C 0E F2 | 	cmp	local08, #17 wz
06cb4     54 00 00 FF 
06cb8     D0 E4 85 F1 | 	sub	objptr, ##43216
06cbc     6C 00 90 AD |  if_e	jmp	#LR__0575
06cc0     56 00 00 FF 
06cc4     08 E5 05 F1 | 	add	objptr, ##44296
06cc8     F2 2C 02 FB | 	rdlong	local08, objptr
06ccc     03 2C 66 F0 | 	shl	local08, #3
06cd0     02 00 00 FF 
06cd4     38 E4 85 F1 | 	sub	objptr, ##1080
06cd8     F2 2C 02 F1 | 	add	local08, objptr
06cdc     04 2C 06 F1 | 	add	local08, #4
06ce0     16 2D 02 FB | 	rdlong	local08, local08
06ce4     12 2C 0E F2 | 	cmp	local08, #18 wz
06ce8     54 00 00 FF 
06cec     D0 E4 85 F1 | 	sub	objptr, ##43216
06cf0     38 00 90 AD |  if_e	jmp	#LR__0575
06cf4     56 00 00 FF 
06cf8     08 E5 05 F1 | 	add	objptr, ##44296
06cfc     F2 32 02 FB | 	rdlong	local11, objptr
06d00     03 32 66 F0 | 	shl	local11, #3
06d04     02 00 00 FF 
06d08     38 E4 85 F1 | 	sub	objptr, ##1080
06d0c     F2 32 02 F1 | 	add	local11, objptr
06d10     04 32 06 F1 | 	add	local11, #4
06d14     19 33 02 FB | 	rdlong	local11, local11
06d18     FE 33 0E F2 | 	cmp	local11, #510 wz
06d1c     54 00 00 FF 
06d20     D0 E4 85 F1 | 	sub	objptr, ##43216
06d24     16 FA 05 56 |  if_ne	mov	result1, #22
06d28     68 00 90 5D |  if_ne	jmp	#LR__0577
06d2c                 | LR__0575
06d2c     56 00 00 FF 
06d30     08 E5 05 F1 | 	add	objptr, ##44296
06d34     F2 24 02 FB | 	rdlong	local04, objptr
06d38     01 24 06 F1 | 	add	local04, #1
06d3c     F2 24 62 FC | 	wrlong	local04, objptr
06d40     03 24 66 F0 | 	shl	local04, #3
06d44     02 00 00 FF 
06d48     38 E4 85 F1 | 	sub	objptr, ##1080
06d4c     F2 24 02 F1 | 	add	local04, objptr
06d50     04 24 06 F1 | 	add	local04, #4
06d54     12 2D 02 FB | 	rdlong	local08, local04
06d58     FE 2D 0E F2 | 	cmp	local08, #510 wz
06d5c     54 00 00 FF 
06d60     D0 E4 85 F1 | 	sub	objptr, ##43216
06d64     28 00 90 AD |  if_e	jmp	#LR__0576
06d68     56 00 00 FF 
06d6c     08 E5 05 F1 | 	add	objptr, ##44296
06d70     F2 32 02 FB | 	rdlong	local11, objptr
06d74     0E 00 00 FF 
06d78     1C E4 05 F1 | 	add	objptr, ##7196
06d7c     F2 30 02 FB | 	rdlong	local10, objptr
06d80     64 00 00 FF 
06d84     24 E5 85 F1 | 	sub	objptr, ##51492
06d88     18 33 52 F2 | 	cmps	local11, local10 wc
06d8c     E4 FA 9F CD |  if_b	jmp	#LR__0571
06d90                 | LR__0576
06d90                 | ' return 0
06d90     00 FA 05 F6 | 	mov	result1, #0
06d94                 | LR__0577
06d94     A7 F0 03 F6 | 	mov	ptra, fp
06d98     B2 00 A0 FD | 	call	#popregs_
06d9c                 | _compile_print_ret
06d9c     2D 00 64 FD | 	ret
06da0                 | 
06da0                 | ' 
06da0                 | ' function compile_if() as ulong  
06da0                 | _compile_if
06da0     05 4A 05 F6 | 	mov	COUNT_, #5
06da4     A8 00 A0 FD | 	call	#pushregs_
06da8                 | _compile_if_enter
06da8     DC 16 B0 FD | 	call	#_expr
06dac                 | ' expr()
06dac                 | ' return 0
06dac     56 00 00 FF 
06db0     08 E5 05 F1 | 	add	objptr, ##44296
06db4     F2 FA 01 FB | 	rdlong	result1, objptr
06db8     01 FA 05 F1 | 	add	result1, #1
06dbc     F2 FA 61 FC | 	wrlong	result1, objptr
06dc0     58 22 06 F6 | 	mov	local03, #88
06dc4     0F 25 02 F6 | 	mov	local04, local01
06dc8     10 27 02 F6 | 	mov	local05, local02
06dcc     11 1F 02 F6 | 	mov	local01, local03
06dd0     13 00 00 FF 
06dd4     38 E4 05 F1 | 	add	objptr, ##9784
06dd8     F2 12 02 FB | 	rdlong	arg01, objptr
06ddc     09 FB 01 F6 | 	mov	result1, arg01
06de0     01 FA 65 F0 | 	shl	result1, #1
06de4     09 FB 01 F1 | 	add	result1, arg01
06de8     02 FA 65 F0 | 	shl	result1, #2
06dec     03 00 00 FF 
06df0     00 E4 85 F1 | 	sub	objptr, ##1536
06df4     F2 FA 01 F1 | 	add	result1, objptr
06df8     FD 24 62 FC | 	wrlong	local04, result1
06dfc     03 00 00 FF 
06e00     00 E4 05 F1 | 	add	objptr, ##1536
06e04     F2 12 02 FB | 	rdlong	arg01, objptr
06e08     09 25 02 F6 | 	mov	local04, arg01
06e0c     01 24 66 F0 | 	shl	local04, #1
06e10     09 25 02 F1 | 	add	local04, arg01
06e14     02 24 66 F0 | 	shl	local04, #2
06e18     03 00 00 FF 
06e1c     00 E4 85 F1 | 	sub	objptr, ##1536
06e20     F2 24 02 F1 | 	add	local04, objptr
06e24     04 24 06 F1 | 	add	local04, #4
06e28     12 27 62 FC | 	wrlong	local05, local04
06e2c     03 00 00 FF 
06e30     00 E4 05 F1 | 	add	objptr, ##1536
06e34     F2 24 02 FB | 	rdlong	local04, objptr
06e38     12 27 02 F6 | 	mov	local05, local04
06e3c     01 26 66 F0 | 	shl	local05, #1
06e40     12 27 02 F1 | 	add	local05, local04
06e44     02 26 66 F0 | 	shl	local05, #2
06e48     03 00 00 FF 
06e4c     00 E4 85 F1 | 	sub	objptr, ##1536
06e50     F2 26 02 F1 | 	add	local05, objptr
06e54     08 26 06 F1 | 	add	local05, #8
06e58     13 1F 62 FC | 	wrlong	local01, local05
06e5c     03 00 00 FF 
06e60     00 E4 05 F1 | 	add	objptr, ##1536
06e64     F2 24 02 FB | 	rdlong	local04, objptr
06e68     01 24 06 F1 | 	add	local04, #1
06e6c     F2 24 62 FC | 	wrlong	local04, objptr
06e70                 | ' 
06e70                 | ' 'print "In compile_if"
06e70                 | ' compile_fun_1p()
06e70                 | ' cmd=lparts(ct).token : ct+=1
06e70                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
06e70                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
06e70                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06e70     13 00 00 FF 
06e74     38 E4 85 F1 | 	sub	objptr, ##9784
06e78     F2 26 02 FB | 	rdlong	local05, objptr
06e7c     01 26 06 F1 | 	add	local05, #1
06e80     03 26 66 F0 | 	shl	local05, #3
06e84     02 00 00 FF 
06e88     38 E4 85 F1 | 	sub	objptr, ##1080
06e8c     F2 26 02 F1 | 	add	local05, objptr
06e90     13 13 02 FB | 	rdlong	arg01, local05
06e94     54 00 00 FF 
06e98     D0 E4 85 F1 | 	sub	objptr, ##43216
06e9c                 | ' 
06e9c                 | ' select case s
06e9c     44 01 00 FF 
06ea0     7D 14 06 F6 | 	mov	arg02, ##@LR__4414
06ea4     1C 23 B1 FD | 	call	#__system___string_cmp
06ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
06eac     1B FA 05 A6 |  if_e	mov	result1, #27
06eb0     00 FA 05 56 |  if_ne	mov	result1, #0
06eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
06eb8     0C 00 90 AD |  if_e	jmp	#LR__0580
06ebc     05 12 06 F6 | 	mov	arg01, #5
06ec0     88 ED BF FD | 	call	#_compile_immediate_assign
06ec4     08 00 90 FD | 	jmp	#LR__0581
06ec8                 | LR__0580
06ec8     05 12 06 F6 | 	mov	arg01, #5
06ecc     68 E5 BF FD | 	call	#_compile_immediate
06ed0                 | LR__0581
06ed0                 | ' 
06ed0                 | ' 
06ed0                 | ' return 0
06ed0     00 FA 05 F6 | 	mov	result1, #0
06ed4     A7 F0 03 F6 | 	mov	ptra, fp
06ed8     B2 00 A0 FD | 	call	#popregs_
06edc                 | _compile_if_ret
06edc     2D 00 64 FD | 	ret
06ee0                 | 
06ee0                 | ' 
06ee0                 | ' function compile_else() as ulong  
06ee0                 | _compile_else
06ee0     05 4A 05 F6 | 	mov	COUNT_, #5
06ee4     A8 00 A0 FD | 	call	#pushregs_
06ee8                 | _compile_else_enter
06ee8     5A 22 06 F6 | 	mov	local03, #90
06eec     0F 25 02 F6 | 	mov	local04, local01
06ef0     10 27 02 F6 | 	mov	local05, local02
06ef4     11 1F 02 F6 | 	mov	local01, local03
06ef8     69 00 00 FF 
06efc     40 E5 05 F1 | 	add	objptr, ##54080
06f00     F2 12 02 FB | 	rdlong	arg01, objptr
06f04     09 FB 01 F6 | 	mov	result1, arg01
06f08     01 FA 65 F0 | 	shl	result1, #1
06f0c     09 FB 01 F1 | 	add	result1, arg01
06f10     02 FA 65 F0 | 	shl	result1, #2
06f14     03 00 00 FF 
06f18     00 E4 85 F1 | 	sub	objptr, ##1536
06f1c     F2 FA 01 F1 | 	add	result1, objptr
06f20     FD 24 62 FC | 	wrlong	local04, result1
06f24     03 00 00 FF 
06f28     00 E4 05 F1 | 	add	objptr, ##1536
06f2c     F2 FA 01 FB | 	rdlong	result1, objptr
06f30     FD 24 02 F6 | 	mov	local04, result1
06f34     01 24 66 F0 | 	shl	local04, #1
06f38     FD 24 02 F1 | 	add	local04, result1
06f3c     02 24 66 F0 | 	shl	local04, #2
06f40     03 00 00 FF 
06f44     00 E4 85 F1 | 	sub	objptr, ##1536
06f48     F2 24 02 F1 | 	add	local04, objptr
06f4c     04 24 06 F1 | 	add	local04, #4
06f50     12 27 62 FC | 	wrlong	local05, local04
06f54     03 00 00 FF 
06f58     00 E4 05 F1 | 	add	objptr, ##1536
06f5c     F2 24 02 FB | 	rdlong	local04, objptr
06f60     12 27 02 F6 | 	mov	local05, local04
06f64     01 26 66 F0 | 	shl	local05, #1
06f68     12 27 02 F1 | 	add	local05, local04
06f6c     02 26 66 F0 | 	shl	local05, #2
06f70     03 00 00 FF 
06f74     00 E4 85 F1 | 	sub	objptr, ##1536
06f78     F2 26 02 F1 | 	add	local05, objptr
06f7c     08 26 06 F1 | 	add	local05, #8
06f80     13 1F 62 FC | 	wrlong	local01, local05
06f84     03 00 00 FF 
06f88     00 E4 05 F1 | 	add	objptr, ##1536
06f8c     F2 24 02 FB | 	rdlong	local04, objptr
06f90     01 24 06 F1 | 	add	local04, #1
06f94     F2 24 62 FC | 	wrlong	local04, objptr
06f98                 | ' 
06f98                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
06f98                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06f98     13 00 00 FF 
06f9c     38 E4 85 F1 | 	sub	objptr, ##9784
06fa0     F2 26 02 FB | 	rdlong	local05, objptr
06fa4     01 26 06 F1 | 	add	local05, #1
06fa8     03 26 66 F0 | 	shl	local05, #3
06fac     02 00 00 FF 
06fb0     38 E4 85 F1 | 	sub	objptr, ##1080
06fb4     F2 26 02 F1 | 	add	local05, objptr
06fb8     13 13 02 FB | 	rdlong	arg01, local05
06fbc     54 00 00 FF 
06fc0     D0 E4 85 F1 | 	sub	objptr, ##43216
06fc4                 | ' 
06fc4                 | ' select case s
06fc4     44 01 00 FF 
06fc8     7D 14 06 F6 | 	mov	arg02, ##@LR__4414
06fcc     F4 21 B1 FD | 	call	#__system___string_cmp
06fd0     00 FA 0D F2 | 	cmp	result1, #0 wz
06fd4     1B FA 05 A6 |  if_e	mov	result1, #27
06fd8     00 FA 05 56 |  if_ne	mov	result1, #0
06fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
06fe0     0C 00 90 AD |  if_e	jmp	#LR__0590
06fe4     05 12 06 F6 | 	mov	arg01, #5
06fe8     60 EC BF FD | 	call	#_compile_immediate_assign
06fec     08 00 90 FD | 	jmp	#LR__0591
06ff0                 | LR__0590
06ff0     05 12 06 F6 | 	mov	arg01, #5
06ff4     40 E4 BF FD | 	call	#_compile_immediate
06ff8                 | LR__0591
06ff8                 | ' 
06ff8                 | ' 
06ff8                 | ' return 0
06ff8     00 FA 05 F6 | 	mov	result1, #0
06ffc     A7 F0 03 F6 | 	mov	ptra, fp
07000     B2 00 A0 FD | 	call	#popregs_
07004                 | _compile_else_ret
07004     2D 00 64 FD | 	ret
07008                 | 
07008                 | ' 
07008                 | ' 
07008                 | ' function compile_dim() as ulong  
07008                 | _compile_dim
07008     11 4A 05 F6 | 	mov	COUNT_, #17
0700c     A8 00 A0 FD | 	call	#pushregs_
07010     01 1E 06 F6 | 	mov	local01, #1
07014     01 20 06 F6 | 	mov	local02, #1
07018     01 22 06 F6 | 	mov	local03, #1
0701c                 | ' 
0701c                 | ' dims(0)=1: dims(1)=1: dims(2)=1
0701c                 | ' 
0701c                 | ' if isname(lparts(ct).part$) then 
0701c     56 00 00 FF 
07020     08 E5 05 F1 | 	add	objptr, ##44296
07024     F2 18 02 FB | 	rdlong	arg04, objptr
07028     03 18 66 F0 | 	shl	arg04, #3
0702c     02 00 00 FF 
07030     38 E4 85 F1 | 	sub	objptr, ##1080
07034     F2 18 02 F1 | 	add	arg04, objptr
07038     0C 13 02 FB | 	rdlong	arg01, arg04
0703c     54 00 00 FF 
07040     D0 E4 85 F1 | 	sub	objptr, ##43216
07044     C8 D3 BF FD | 	call	#_isname
07048     00 FA 0D F2 | 	cmp	result1, #0 wz
0704c     AC 05 90 AD |  if_e	jmp	#LR__0624
07050     56 00 00 FF 
07054     08 E5 05 F1 | 	add	objptr, ##44296
07058     F2 24 02 FB | 	rdlong	local04, objptr
0705c     03 24 66 F0 | 	shl	local04, #3
07060     02 00 00 FF 
07064     38 E4 85 F1 | 	sub	objptr, ##1080
07068     F2 24 02 F1 | 	add	local04, objptr
0706c     12 27 02 FB | 	rdlong	local05, local04
07070     01 28 66 F6 | 	neg	local06, #1
07074                 | '   varname2$=lparts(ct).part$ 
07074                 | '   j=-1
07074                 | '   if varnum>0 then
07074     04 E4 85 F1 | 	sub	objptr, #4
07078     F2 2A 02 FB | 	rdlong	local07, objptr
0707c     54 00 00 FF 
07080     CC E4 85 F1 | 	sub	objptr, ##43212
07084     01 2A 56 F2 | 	cmps	local07, #1 wc
07088     58 00 90 CD |  if_b	jmp	#LR__0602
0708c                 | '  '   print "in dim, varnum=";varnum
0708c                 | '     for i=0 to varnum-1
0708c     00 2C 06 F6 | 	mov	local08, #0
07090     54 00 00 FF 
07094     CC E4 05 F1 | 	add	objptr, ##43212
07098     F2 2E 02 FB | 	rdlong	local09, objptr
0709c     54 00 00 FF 
070a0     CC E4 85 F1 | 	sub	objptr, ##43212
070a4                 | LR__0600
070a4     17 2D 52 F2 | 	cmps	local08, local09 wc
070a8     38 00 90 3D |  if_ae	jmp	#LR__0601
070ac                 | '       if variables(i).name=varname2$ then j=i : exit
070ac     16 25 02 F6 | 	mov	local04, local08
070b0     04 24 66 F0 | 	shl	local04, #4
070b4     34 00 00 FF 
070b8     CC E4 05 F1 | 	add	objptr, ##26828
070bc     F2 24 02 F1 | 	add	local04, objptr
070c0     12 13 02 FB | 	rdlong	arg01, local04
070c4     13 15 02 F6 | 	mov	arg02, local05
070c8     34 00 00 FF 
070cc     CC E4 85 F1 | 	sub	objptr, ##26828
070d0     F0 20 B1 FD | 	call	#__system___string_cmp
070d4     00 FA 0D F2 | 	cmp	result1, #0 wz
070d8     16 29 02 A6 |  if_e	mov	local06, local08
070dc     01 2C 06 51 |  if_ne	add	local08, #1
070e0     C0 FF 9F 5D |  if_ne	jmp	#LR__0600
070e4                 | LR__0601
070e4                 | LR__0602
070e4                 | ' '  if j<>-1 then printerror (42) : return 42
070e4                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
070e4     FF FF 7F FF 
070e8     FF 29 0E F2 | 	cmp	local06, ##-1 wz
070ec     54 00 00 AF 
070f0     CC E4 05 A1 |  if_e	add	objptr, ##43212
070f4     F2 28 02 AB |  if_e	rdlong	local06, objptr
070f8     54 00 00 AF 
070fc     CC E4 85 A1 |  if_e	sub	objptr, ##43212
07100     78 00 90 AD |  if_e	jmp	#LR__0603
07104     00 12 06 F6 | 	mov	arg01, #0
07108     94 79 B1 FD | 	call	#__system___getiolock_0425
0710c     FD 12 02 F6 | 	mov	arg01, result1
07110     88 20 B1 FD | 	call	#__system___lockmem
07114     45 01 00 FF 
07118     EF 14 06 F6 | 	mov	arg02, ##@LR__4564
0711c     00 12 06 F6 | 	mov	arg01, #0
07120     00 16 06 F6 | 	mov	arg03, #0
07124     68 2D B1 FD | 	call	#__system___basic_print_string
07128     7A 00 00 FF 
0712c     54 E5 05 F1 | 	add	objptr, ##62804
07130     F2 14 02 FB | 	rdlong	arg02, objptr
07134     7A 00 00 FF 
07138     54 E5 85 F1 | 	sub	objptr, ##62804
0713c     00 12 06 F6 | 	mov	arg01, #0
07140     00 16 06 F6 | 	mov	arg03, #0
07144     0A 18 06 F6 | 	mov	arg04, #10
07148     C8 2D B1 FD | 	call	#__system___basic_print_unsigned
0714c     45 01 00 FF 
07150     FD 14 06 F6 | 	mov	arg02, ##@LR__4565
07154     00 12 06 F6 | 	mov	arg01, #0
07158     00 16 06 F6 | 	mov	arg03, #0
0715c     30 2D B1 FD | 	call	#__system___basic_print_string
07160     00 12 06 F6 | 	mov	arg01, #0
07164     0A 14 06 F6 | 	mov	arg02, #10
07168     00 16 06 F6 | 	mov	arg03, #0
0716c     C8 2C B1 FD | 	call	#__system___basic_print_char
07170     00 12 06 F6 | 	mov	arg01, #0
07174     28 79 B1 FD | 	call	#__system___getiolock_0425
07178     FD 00 68 FC | 	wrlong	#0, result1
0717c                 | LR__0603
0717c                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
0717c     56 00 00 FF 
07180     08 E5 05 F1 | 	add	objptr, ##44296
07184     F2 18 02 FB | 	rdlong	arg04, objptr
07188     01 18 06 F1 | 	add	arg04, #1
0718c     03 18 66 F0 | 	shl	arg04, #3
07190     02 00 00 FF 
07194     38 E4 85 F1 | 	sub	objptr, ##1080
07198     F2 18 02 F1 | 	add	arg04, objptr
0719c     0C 13 02 FB | 	rdlong	arg01, arg04
071a0     45 01 00 FF 
071a4     1E 15 06 F6 | 	mov	arg02, ##@LR__4566
071a8     54 00 00 FF 
071ac     D0 E4 85 F1 | 	sub	objptr, ##43216
071b0     10 20 B1 FD | 	call	#__system___string_cmp
071b4     00 FA 0D F2 | 	cmp	result1, #0 wz
071b8     50 00 90 AD |  if_e	jmp	#LR__0604
071bc     56 00 00 FF 
071c0     08 E5 05 F1 | 	add	objptr, ##44296
071c4     F2 2E 02 FB | 	rdlong	local09, objptr
071c8     01 2E 06 F1 | 	add	local09, #1
071cc     03 2E 66 F0 | 	shl	local09, #3
071d0     02 00 00 FF 
071d4     38 E4 85 F1 | 	sub	objptr, ##1080
071d8     F2 2E 02 F1 | 	add	local09, objptr
071dc     17 13 02 FB | 	rdlong	arg01, local09
071e0     45 01 00 FF 
071e4     20 15 06 F6 | 	mov	arg02, ##@LR__4567
071e8     54 00 00 FF 
071ec     D0 E4 85 F1 | 	sub	objptr, ##43216
071f0     D0 1F B1 FD | 	call	#__system___string_cmp
071f4     00 FA 0D F2 | 	cmp	result1, #0 wz
071f8     10 00 90 AD |  if_e	jmp	#LR__0604
071fc     2B 12 06 F6 | 	mov	arg01, #43
07200     10 EA B0 FD | 	call	#_printerror
07204     2B FA 05 F6 | 	mov	result1, #43
07208     38 05 90 FD | 	jmp	#LR__0626
0720c                 | LR__0604
0720c                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
0720c     56 00 00 FF 
07210     08 E5 05 F1 | 	add	objptr, ##44296
07214     F2 14 02 FB | 	rdlong	arg02, objptr
07218     01 14 06 F1 | 	add	arg02, #1
0721c     03 14 66 F0 | 	shl	arg02, #3
07220     02 00 00 FF 
07224     38 E4 85 F1 | 	sub	objptr, ##1080
07228     F2 14 02 F1 | 	add	arg02, objptr
0722c     0A 13 02 FB | 	rdlong	arg01, arg02
07230     45 01 00 FF 
07234     23 15 06 F6 | 	mov	arg02, ##@LR__4568
07238     54 00 00 FF 
0723c     D0 E4 85 F1 | 	sub	objptr, ##43216
07240     80 1F B1 FD | 	call	#__system___string_cmp
07244     00 FA 0D F2 | 	cmp	result1, #0 wz
07248     56 00 00 AF 
0724c     08 E5 05 A1 |  if_e	add	objptr, ##44296
07250     F2 30 02 AB |  if_e	rdlong	local10, objptr
07254     56 00 00 AF 
07258     08 E5 85 A1 |  if_e	sub	objptr, ##44296
0725c     01 30 06 A1 |  if_e	add	local10, #1
07260     7C 01 90 AD |  if_e	jmp	#LR__0610
07264     56 00 00 FF 
07268     08 E5 05 F1 | 	add	objptr, ##44296
0726c     F2 30 02 FB | 	rdlong	local10, objptr
07270     56 00 00 FF 
07274     08 E5 85 F1 | 	sub	objptr, ##44296
07278     02 30 06 F1 | 	add	local10, #2
0727c     00 32 06 F6 | 	mov	local11, #0
07280                 | '   l=ct+2 : m=0 : do
07280                 | LR__0605
07280                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07280                 | '     if isdec(lparts(l).part$) then 
07280     18 25 02 F6 | 	mov	local04, local10
07284     03 24 66 F0 | 	shl	local04, #3
07288     54 00 00 FF 
0728c     D0 E4 05 F1 | 	add	objptr, ##43216
07290     F2 24 02 F1 | 	add	local04, objptr
07294     12 13 02 FB | 	rdlong	arg01, local04
07298     54 00 00 FF 
0729c     D0 E4 85 F1 | 	sub	objptr, ##43216
072a0     10 D8 BF FD | 	call	#_isdec
072a4     00 FA 0D F2 | 	cmp	result1, #0 wz
072a8     44 00 90 AD |  if_e	jmp	#LR__0606
072ac     19 35 02 F6 | 	mov	local12, local11
072b0     0F 35 06 F1 | 	add	local12, #local01
072b4     18 2F 02 F6 | 	mov	local09, local10
072b8     03 2E 66 F0 | 	shl	local09, #3
072bc     54 00 00 FF 
072c0     D0 E4 05 F1 | 	add	objptr, ##43216
072c4     F2 2E 02 F1 | 	add	local09, objptr
072c8     17 13 02 FB | 	rdlong	arg01, local09
072cc     00 14 06 F6 | 	mov	arg02, #0
072d0     54 00 00 FF 
072d4     D0 E4 85 F1 | 	sub	objptr, ##43216
072d8     24 50 B1 FD | 	call	#__system____builtin_atoi
072dc     FD 36 02 F6 | 	mov	local13, result1
072e0                 | 	'.live	local13
072e0                 | 	'.live	local12
072e0     00 34 8E F9 | 	altd	local12, #0
072e4     1B 35 02 F6 | 	mov	local12, local13
072e8     01 32 06 F1 | 	add	local11, #1
072ec     10 00 90 FD | 	jmp	#LR__0607
072f0                 | LR__0606
072f0     11 12 06 F6 | 	mov	arg01, #17
072f4     1C E9 B0 FD | 	call	#_printerror
072f8                 | '       printerror (17)  : return(17)
072f8     11 FA 05 F6 | 	mov	result1, #17
072fc     44 04 90 FD | 	jmp	#LR__0626
07300                 | LR__0607
07300                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
07300     18 25 02 F6 | 	mov	local04, local10
07304     01 24 06 F1 | 	add	local04, #1
07308     03 24 66 F0 | 	shl	local04, #3
0730c     54 00 00 FF 
07310     D0 E4 05 F1 | 	add	objptr, ##43216
07314     F2 24 02 F1 | 	add	local04, objptr
07318     12 13 02 FB | 	rdlong	arg01, local04
0731c     45 01 00 FF 
07320     26 15 06 F6 | 	mov	arg02, ##@LR__4569
07324     54 00 00 FF 
07328     D0 E4 85 F1 | 	sub	objptr, ##43216
0732c     94 1E B1 FD | 	call	#__system___string_cmp
07330     00 FA 0D F2 | 	cmp	result1, #0 wz
07334     48 00 90 AD |  if_e	jmp	#LR__0608
07338     18 37 02 F6 | 	mov	local13, local10
0733c     01 36 06 F1 | 	add	local13, #1
07340     03 36 66 F0 | 	shl	local13, #3
07344     54 00 00 FF 
07348     D0 E4 05 F1 | 	add	objptr, ##43216
0734c     F2 36 02 F1 | 	add	local13, objptr
07350     1B 13 02 FB | 	rdlong	arg01, local13
07354     45 01 00 FF 
07358     28 15 06 F6 | 	mov	arg02, ##@LR__4570
0735c     54 00 00 FF 
07360     D0 E4 85 F1 | 	sub	objptr, ##43216
07364     5C 1E B1 FD | 	call	#__system___string_cmp
07368     00 FA 0D F2 | 	cmp	result1, #0 wz
0736c     10 00 90 AD |  if_e	jmp	#LR__0608
07370     2C 12 06 F6 | 	mov	arg01, #44
07374     9C E8 B0 FD | 	call	#_printerror
07378     2C FA 05 F6 | 	mov	result1, #44
0737c     C4 03 90 FD | 	jmp	#LR__0626
07380                 | LR__0608
07380     02 30 06 F1 | 	add	local10, #2
07384     18 25 02 F6 | 	mov	local04, local10
07388     01 24 86 F1 | 	sub	local04, #1
0738c     03 24 66 F0 | 	shl	local04, #3
07390     54 00 00 FF 
07394     D0 E4 05 F1 | 	add	objptr, ##43216
07398     F2 24 02 F1 | 	add	local04, objptr
0739c     12 13 02 FB | 	rdlong	arg01, local04
073a0     45 01 00 FF 
073a4     2A 15 06 F6 | 	mov	arg02, ##@LR__4571
073a8     54 00 00 FF 
073ac     D0 E4 85 F1 | 	sub	objptr, ##43216
073b0     10 1E B1 FD | 	call	#__system___string_cmp
073b4     00 FA 0D F2 | 	cmp	result1, #0 wz
073b8     03 32 56 52 |  if_ne	cmps	local11, #3 wc
073bc     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0605
073c0                 | '   if m>3 then printerror(45): return(45)
073c0     04 32 56 F2 | 	cmps	local11, #4 wc
073c4     10 00 90 CD |  if_b	jmp	#LR__0609
073c8     2D 12 06 F6 | 	mov	arg01, #45
073cc     44 E8 B0 FD | 	call	#_printerror
073d0     2D FA 05 F6 | 	mov	result1, #45
073d4     6C 03 90 FD | 	jmp	#LR__0626
073d8                 | LR__0609
073d8     00 39 06 F6 | 	mov	local14, #256
073dc     0C 3A 06 F6 | 	mov	local15, #12
073e0                 | LR__0610
073e0                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
073e0                 | '   arraytype=array_no_type : esize=12
073e0                 | ' 1350 
073e0                 | '   if lparts(l).part$="as" then
073e0     18 25 02 F6 | 	mov	local04, local10
073e4     03 24 66 F0 | 	shl	local04, #3
073e8     54 00 00 FF 
073ec     D0 E4 05 F1 | 	add	objptr, ##43216
073f0     F2 24 02 F1 | 	add	local04, objptr
073f4     12 13 02 FB | 	rdlong	arg01, local04
073f8     45 01 00 FF 
073fc     2C 15 06 F6 | 	mov	arg02, ##@LR__4572
07400     54 00 00 FF 
07404     D0 E4 85 F1 | 	sub	objptr, ##43216
07408     B8 1D B1 FD | 	call	#__system___string_cmp
0740c     00 FA 0D F2 | 	cmp	result1, #0 wz
07410     F8 01 90 5D |  if_ne	jmp	#LR__0625
07414                 | '     select case lparts(l+1).part$
07414     18 35 02 F6 | 	mov	local12, local10
07418     01 34 06 F1 | 	add	local12, #1
0741c     03 34 66 F0 | 	shl	local12, #3
07420     54 00 00 FF 
07424     D0 E4 05 F1 | 	add	objptr, ##43216
07428     F2 34 02 F1 | 	add	local12, objptr
0742c     1A 3D 02 FB | 	rdlong	local16, local12
07430     45 01 00 FF 
07434     2F 15 06 F6 | 	mov	arg02, ##@LR__4573
07438     1E 13 02 F6 | 	mov	arg01, local16
0743c     54 00 00 FF 
07440     D0 E4 85 F1 | 	sub	objptr, ##43216
07444     7C 1D B1 FD | 	call	#__system___string_cmp
07448     00 FA 0D F2 | 	cmp	result1, #0 wz
0744c     0C 01 90 AD |  if_e	jmp	#LR__0611
07450     45 01 00 FF 
07454     34 15 06 F6 | 	mov	arg02, ##@LR__4574
07458     1E 13 02 F6 | 	mov	arg01, local16
0745c     64 1D B1 FD | 	call	#__system___string_cmp
07460     00 FA 0D F2 | 	cmp	result1, #0 wz
07464     00 01 90 AD |  if_e	jmp	#LR__0612
07468     45 01 00 FF 
0746c     3A 15 06 F6 | 	mov	arg02, ##@LR__4575
07470     1E 13 02 F6 | 	mov	arg01, local16
07474     4C 1D B1 FD | 	call	#__system___string_cmp
07478     00 FA 0D F2 | 	cmp	result1, #0 wz
0747c     F4 00 90 AD |  if_e	jmp	#LR__0613
07480     45 01 00 FF 
07484     40 15 06 F6 | 	mov	arg02, ##@LR__4576
07488     1E 13 02 F6 | 	mov	arg01, local16
0748c     34 1D B1 FD | 	call	#__system___string_cmp
07490     00 FA 0D F2 | 	cmp	result1, #0 wz
07494     E8 00 90 AD |  if_e	jmp	#LR__0614
07498     45 01 00 FF 
0749c     47 15 06 F6 | 	mov	arg02, ##@LR__4577
074a0     1E 13 02 F6 | 	mov	arg01, local16
074a4     1C 1D B1 FD | 	call	#__system___string_cmp
074a8     00 FA 0D F2 | 	cmp	result1, #0 wz
074ac     DC 00 90 AD |  if_e	jmp	#LR__0615
074b0     45 01 00 FF 
074b4     4C 15 06 F6 | 	mov	arg02, ##@LR__4578
074b8     1E 13 02 F6 | 	mov	arg01, local16
074bc     04 1D B1 FD | 	call	#__system___string_cmp
074c0     00 FA 0D F2 | 	cmp	result1, #0 wz
074c4     D0 00 90 AD |  if_e	jmp	#LR__0616
074c8     45 01 00 FF 
074cc     54 15 06 F6 | 	mov	arg02, ##@LR__4579
074d0     1E 13 02 F6 | 	mov	arg01, local16
074d4     EC 1C B1 FD | 	call	#__system___string_cmp
074d8     00 FA 0D F2 | 	cmp	result1, #0 wz
074dc     C4 00 90 AD |  if_e	jmp	#LR__0617
074e0     45 01 00 FF 
074e4     5A 15 06 F6 | 	mov	arg02, ##@LR__4580
074e8     1E 13 02 F6 | 	mov	arg01, local16
074ec     D4 1C B1 FD | 	call	#__system___string_cmp
074f0     00 FA 0D F2 | 	cmp	result1, #0 wz
074f4     B8 00 90 AD |  if_e	jmp	#LR__0618
074f8     45 01 00 FF 
074fc     60 15 06 F6 | 	mov	arg02, ##@LR__4581
07500     1E 13 02 F6 | 	mov	arg01, local16
07504     BC 1C B1 FD | 	call	#__system___string_cmp
07508     00 FA 0D F2 | 	cmp	result1, #0 wz
0750c     AC 00 90 AD |  if_e	jmp	#LR__0619
07510     45 01 00 FF 
07514     67 15 06 F6 | 	mov	arg02, ##@LR__4582
07518     1E 13 02 F6 | 	mov	arg01, local16
0751c     A4 1C B1 FD | 	call	#__system___string_cmp
07520     00 FA 0D F2 | 	cmp	result1, #0 wz
07524     A0 00 90 AD |  if_e	jmp	#LR__0620
07528     45 01 00 FF 
0752c     6E 15 06 F6 | 	mov	arg02, ##@LR__4583
07530     1E 13 02 F6 | 	mov	arg01, local16
07534     8C 1C B1 FD | 	call	#__system___string_cmp
07538     00 FA 0D F2 | 	cmp	result1, #0 wz
0753c     94 00 90 AD |  if_e	jmp	#LR__0621
07540     45 01 00 FF 
07544     75 15 06 F6 | 	mov	arg02, ##@LR__4584
07548     1E 13 02 F6 | 	mov	arg01, local16
0754c     74 1C B1 FD | 	call	#__system___string_cmp
07550     00 FA 0D F2 | 	cmp	result1, #0 wz
07554     88 00 90 AD |  if_e	jmp	#LR__0622
07558     90 00 90 FD | 	jmp	#LR__0623
0755c                 | LR__0611
0755c     01 39 06 F6 | 	mov	local14, #257
07560     01 3A 06 F6 | 	mov	local15, #1
07564     A4 00 90 FD | 	jmp	#LR__0625
07568                 | LR__0612
07568     02 39 06 F6 | 	mov	local14, #258
0756c     01 3A 06 F6 | 	mov	local15, #1
07570     98 00 90 FD | 	jmp	#LR__0625
07574                 | LR__0613
07574     03 39 06 F6 | 	mov	local14, #259
07578     02 3A 06 F6 | 	mov	local15, #2
0757c     8C 00 90 FD | 	jmp	#LR__0625
07580                 | LR__0614
07580     04 39 06 F6 | 	mov	local14, #260
07584     02 3A 06 F6 | 	mov	local15, #2
07588     80 00 90 FD | 	jmp	#LR__0625
0758c                 | LR__0615
0758c     05 39 06 F6 | 	mov	local14, #261
07590     04 3A 06 F6 | 	mov	local15, #4
07594     74 00 90 FD | 	jmp	#LR__0625
07598                 | LR__0616
07598     05 39 06 F6 | 	mov	local14, #261
0759c     04 3A 06 F6 | 	mov	local15, #4
075a0     68 00 90 FD | 	jmp	#LR__0625
075a4                 | LR__0617
075a4     06 39 06 F6 | 	mov	local14, #262
075a8     04 3A 06 F6 | 	mov	local15, #4
075ac     5C 00 90 FD | 	jmp	#LR__0625
075b0                 | LR__0618
075b0     07 39 06 F6 | 	mov	local14, #263
075b4     08 3A 06 F6 | 	mov	local15, #8
075b8     50 00 90 FD | 	jmp	#LR__0625
075bc                 | LR__0619
075bc     08 39 06 F6 | 	mov	local14, #264
075c0     08 3A 06 F6 | 	mov	local15, #8
075c4     44 00 90 FD | 	jmp	#LR__0625
075c8                 | LR__0620
075c8     09 39 06 F6 | 	mov	local14, #265
075cc     04 3A 06 F6 | 	mov	local15, #4
075d0     38 00 90 FD | 	jmp	#LR__0625
075d4                 | LR__0621
075d4     0A 39 06 F6 | 	mov	local14, #266
075d8     08 3A 06 F6 | 	mov	local15, #8
075dc     2C 00 90 FD | 	jmp	#LR__0625
075e0                 | LR__0622
075e0     0B 39 06 F6 | 	mov	local14, #267
075e4     04 3A 06 F6 | 	mov	local15, #4
075e8     20 00 90 FD | 	jmp	#LR__0625
075ec                 | LR__0623
075ec     2F 12 06 F6 | 	mov	arg01, #47
075f0     20 E6 B0 FD | 	call	#_printerror
075f4     2F FA 05 F6 | 	mov	result1, #47
075f8     48 01 90 FD | 	jmp	#LR__0626
075fc                 | LR__0624
075fc     2E 12 06 F6 | 	mov	arg01, #46
07600     10 E6 B0 FD | 	call	#_printerror
07604                 | '   printerror(46): return 46
07604     2E FA 05 F6 | 	mov	result1, #46
07608     38 01 90 FD | 	jmp	#LR__0626
0760c                 | LR__0625
0760c     0F 3B 02 FD | 	qmul	local15, local01
07610     18 2A 62 FD | 	getqx	local07
07614     10 2B 02 FD | 	qmul	local07, local02
07618     18 3C 62 FD | 	getqx	local16
0761c     11 3D 02 FD | 	qmul	local16, local03
07620     7A 00 00 FF 
07624     3C E5 05 F1 | 	add	objptr, ##62780
07628     F2 3E 02 FB | 	rdlong	local17, objptr
0762c     1C 15 02 F6 | 	mov	arg02, local14
07630     01 16 06 F6 | 	mov	arg03, #1
07634     00 18 06 F6 | 	mov	arg04, #0
07638                 | '     return fill(addr, pattern, count, listPtr, 4)
07638     04 1A 06 F6 | 	mov	arg05, #4
0763c     18 3C 62 FD | 	getqx	local16
07640     1E 3F 82 F1 | 	sub	local17, local16
07644     10 3E 86 F1 | 	sub	local17, #16
07648     F2 3E 62 FC | 	wrlong	local17, objptr
0764c     1F 13 02 F6 | 	mov	arg01, local17
07650     6F 00 00 FF 
07654     7C E4 85 F1 | 	sub	objptr, ##56956
07658     28 11 B1 FD | 	call	#_psram_spin2_fill
0765c     1F 13 02 F6 | 	mov	arg01, local17
07660     02 12 06 F1 | 	add	arg01, #2
07664     1D 15 02 F6 | 	mov	arg02, local15
07668     01 16 06 F6 | 	mov	arg03, #1
0766c     00 18 06 F6 | 	mov	arg04, #0
07670                 | '     return fill(addr, pattern, count, listPtr, 1)
07670     01 1A 06 F6 | 	mov	arg05, #1
07674     0C 11 B1 FD | 	call	#_psram_spin2_fill
07678     1F 13 02 F6 | 	mov	arg01, local17
0767c     04 12 06 F1 | 	add	arg01, #4
07680     0F 15 02 F6 | 	mov	arg02, local01
07684     01 16 06 F6 | 	mov	arg03, #1
07688     00 18 06 F6 | 	mov	arg04, #0
0768c                 | '     return fill(addr, pattern, count, listPtr, 4)
0768c     04 1A 06 F6 | 	mov	arg05, #4
07690     F0 10 B1 FD | 	call	#_psram_spin2_fill
07694     1F 13 02 F6 | 	mov	arg01, local17
07698     08 12 06 F1 | 	add	arg01, #8
0769c     10 15 02 F6 | 	mov	arg02, local02
076a0     01 16 06 F6 | 	mov	arg03, #1
076a4     00 18 06 F6 | 	mov	arg04, #0
076a8                 | '     return fill(addr, pattern, count, listPtr, 4)
076a8     04 1A 06 F6 | 	mov	arg05, #4
076ac     D4 10 B1 FD | 	call	#_psram_spin2_fill
076b0     1F 13 02 F6 | 	mov	arg01, local17
076b4     0C 12 06 F1 | 	add	arg01, #12
076b8     11 15 02 F6 | 	mov	arg02, local03
076bc     01 16 06 F6 | 	mov	arg03, #1
076c0     00 18 06 F6 | 	mov	arg04, #0
076c4                 | '     return fill(addr, pattern, count, listPtr, 4)
076c4     04 1A 06 F6 | 	mov	arg05, #4
076c8     B8 10 B1 FD | 	call	#_psram_spin2_fill
076cc     14 35 02 F6 | 	mov	local12, local06
076d0     04 34 66 F0 | 	shl	local12, #4
076d4     29 00 00 FF 
076d8     0C E4 05 F1 | 	add	objptr, ##21004
076dc     F2 34 02 F1 | 	add	local12, objptr
076e0     1A 27 62 FC | 	wrlong	local05, local12
076e4     14 35 02 F6 | 	mov	local12, local06
076e8     04 34 66 F0 | 	shl	local12, #4
076ec     F2 34 02 F1 | 	add	local12, objptr
076f0     04 34 06 F1 | 	add	local12, #4
076f4     1A 3F 62 FC | 	wrlong	local17, local12
076f8     14 35 02 F6 | 	mov	local12, local06
076fc     04 34 66 F0 | 	shl	local12, #4
07700     F2 34 02 F1 | 	add	local12, objptr
07704     0C 34 06 F1 | 	add	local12, #12
07708     1A 39 62 FC | 	wrlong	local14, local12
0770c                 | ' 'print dims(0),dims(1),dims(2),arraytype
0770c                 | ' 
0770c                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
0770c                 | ' arrayptr=memtop-arraysize-16
0770c                 | ' memtop=arrayptr
0770c                 | ' 
0770c                 | ' pslpoke arrayptr,arraytype
0770c                 | ' pspoke arrayptr+2,esize
0770c                 | ' pslpoke arrayptr+4,dims(0)
0770c                 | ' pslpoke arrayptr+8,dims(1)
0770c                 | ' pslpoke arrayptr+12,dims(2)
0770c                 | ' 
0770c                 | ' variables(j).name=varname2$
0770c                 | ' variables(j).value.uresult=arrayptr
0770c                 | ' variables(j).vartype=arraytype
0770c                 | ' if j=varnum then varnum+=1
0770c     20 00 00 FF 
07710     00 E4 05 F1 | 	add	objptr, ##16384
07714     F2 2A 02 FB | 	rdlong	local07, objptr
07718     54 00 00 FF 
0771c     CC E4 85 F1 | 	sub	objptr, ##43212
07720     15 29 0A F2 | 	cmp	local06, local07 wz
07724     54 00 00 AF 
07728     CC E4 05 A1 |  if_e	add	objptr, ##43212
0772c     F2 2A 02 AB |  if_e	rdlong	local07, objptr
07730     01 2A 06 A1 |  if_e	add	local07, #1
07734     F2 2A 62 AC |  if_e	wrlong	local07, objptr
07738     54 00 00 AF 
0773c     CC E4 85 A1 |  if_e	sub	objptr, ##43212
07740                 | ' 
07740                 | ' return 0
07740     00 FA 05 F6 | 	mov	result1, #0
07744                 | LR__0626
07744     A7 F0 03 F6 | 	mov	ptra, fp
07748     B2 00 A0 FD | 	call	#popregs_
0774c                 | _compile_dim_ret
0774c     2D 00 64 FD | 	ret
07750                 | 
07750                 | ' 
07750                 | ' 
07750                 | ' function compile_for() as ulong  
07750                 | _compile_for
07750     07 4A 05 F6 | 	mov	COUNT_, #7
07754     A8 00 A0 FD | 	call	#pushregs_
07758                 | ' 
07758                 | ' 
07758                 | ' 
07758                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
07758     56 00 00 FF 
0775c     08 E5 05 F1 | 	add	objptr, ##44296
07760     F2 14 02 FB | 	rdlong	arg02, objptr
07764     01 14 06 F1 | 	add	arg02, #1
07768     03 14 66 F0 | 	shl	arg02, #3
0776c     02 00 00 FF 
07770     38 E4 85 F1 | 	sub	objptr, ##1080
07774     F2 14 02 F1 | 	add	arg02, objptr
07778     0A 13 02 FB | 	rdlong	arg01, arg02
0777c     54 00 00 FF 
07780     D0 E4 85 F1 | 	sub	objptr, ##43216
07784                 | ' 
07784                 | ' select case s
07784     44 01 00 FF 
07788     7D 14 06 F6 | 	mov	arg02, ##@LR__4414
0778c     34 1A B1 FD | 	call	#__system___string_cmp
07790     00 FA 0D F2 | 	cmp	result1, #0 wz
07794     1B FA 05 A6 |  if_e	mov	result1, #27
07798     00 FA 05 56 |  if_ne	mov	result1, #0
0779c     00 FA 0D F2 | 	cmp	result1, #0 wz
077a0     0C 00 90 AD |  if_e	jmp	#LR__0630
077a4     05 12 06 F6 | 	mov	arg01, #5
077a8     A0 E4 BF FD | 	call	#_compile_immediate_assign
077ac     10 00 90 FD | 	jmp	#LR__0631
077b0                 | LR__0630
077b0     20 12 06 F6 | 	mov	arg01, #32
077b4     10 E9 BF FD | 	call	#_compile_error
077b8     20 FA 05 F6 | 	mov	result1, #32
077bc     E8 02 90 FD | 	jmp	#LR__0637
077c0                 | LR__0631
077c0     69 00 00 FF 
077c4     40 E5 05 F1 | 	add	objptr, ##54080
077c8     F2 12 02 FB | 	rdlong	arg01, objptr
077cc     09 25 02 F6 | 	mov	local04, arg01
077d0     01 24 86 F1 | 	sub	local04, #1
077d4     12 15 02 F6 | 	mov	arg02, local04
077d8     01 14 66 F0 | 	shl	arg02, #1
077dc     12 15 02 F1 | 	add	arg02, local04
077e0     02 14 66 F0 | 	shl	arg02, #2
077e4     03 00 00 FF 
077e8     00 E4 85 F1 | 	sub	objptr, ##1536
077ec     F2 14 02 F1 | 	add	arg02, objptr
077f0     0A 1F 02 FB | 	rdlong	local01, arg02
077f4     04 14 06 F1 | 	add	arg02, #4
077f8     0A 27 02 FB | 	rdlong	local05, arg02
077fc     01 12 86 F1 | 	sub	arg01, #1
07800     09 29 02 F6 | 	mov	local06, arg01
07804     01 28 66 F0 | 	shl	local06, #1
07808     09 29 02 F1 | 	add	local06, arg01
0780c     02 28 66 F0 | 	shl	local06, #2
07810     F2 28 02 F1 | 	add	local06, objptr
07814     08 28 06 F1 | 	add	local06, #8
07818     14 13 02 FB | 	rdlong	arg01, local06
0781c     13 21 02 F6 | 	mov	local02, local05
07820     09 23 02 F6 | 	mov	local03, arg01
07824                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
07824                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
07824     17 22 0E F2 | 	cmp	local03, #23 wz
07828     66 00 00 FF 
0782c     40 E5 85 F1 | 	sub	objptr, ##52544
07830     10 00 90 AD |  if_e	jmp	#LR__0632
07834     22 12 06 F6 | 	mov	arg01, #34
07838     8C E8 BF FD | 	call	#_compile_error
0783c     22 FA 05 F6 | 	mov	result1, #34
07840     64 02 90 FD | 	jmp	#LR__0637
07844                 | LR__0632
07844     0F 2B 02 F6 | 	mov	local07, local01
07848                 | ' varnum=t1.result.uresult
07848                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
07848     56 00 00 FF 
0784c     08 E5 05 F1 | 	add	objptr, ##44296
07850     F2 24 02 FB | 	rdlong	local04, objptr
07854     03 24 66 F0 | 	shl	local04, #3
07858     02 00 00 FF 
0785c     38 E4 85 F1 | 	sub	objptr, ##1080
07860     F2 24 02 F1 | 	add	local04, objptr
07864     12 13 02 FB | 	rdlong	arg01, local04
07868     45 01 00 FF 
0786c     7C 15 06 F6 | 	mov	arg02, ##@LR__4585
07870     54 00 00 FF 
07874     D0 E4 85 F1 | 	sub	objptr, ##43216
07878     48 19 B1 FD | 	call	#__system___string_cmp
0787c     00 FA 0D F2 | 	cmp	result1, #0 wz
07880     10 00 90 AD |  if_e	jmp	#LR__0633
07884     21 12 06 F6 | 	mov	arg01, #33
07888     3C E8 BF FD | 	call	#_compile_error
0788c     21 FA 05 F6 | 	mov	result1, #33
07890     14 02 90 FD | 	jmp	#LR__0637
07894                 | LR__0633
07894     56 00 00 FF 
07898     08 E5 05 F1 | 	add	objptr, ##44296
0789c     F2 24 02 FB | 	rdlong	local04, objptr
078a0     01 24 06 F1 | 	add	local04, #1
078a4     F2 24 62 FC | 	wrlong	local04, objptr
078a8     56 00 00 FF 
078ac     08 E5 85 F1 | 	sub	objptr, ##44296
078b0     D4 0B B0 FD | 	call	#_expr
078b4                 | ' ct+=1
078b4                 | ' expr()  ' there is "to" value pushed on the stack
078b4                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
078b4     56 00 00 FF 
078b8     08 E5 05 F1 | 	add	objptr, ##44296
078bc     F2 24 02 FB | 	rdlong	local04, objptr
078c0     03 24 66 F0 | 	shl	local04, #3
078c4     02 00 00 FF 
078c8     38 E4 85 F1 | 	sub	objptr, ##1080
078cc     F2 24 02 F1 | 	add	local04, objptr
078d0     12 13 02 FB | 	rdlong	arg01, local04
078d4     45 01 00 FF 
078d8     7F 15 06 F6 | 	mov	arg02, ##@LR__4586
078dc     54 00 00 FF 
078e0     D0 E4 85 F1 | 	sub	objptr, ##43216
078e4     DC 18 B1 FD | 	call	#__system___string_cmp
078e8     00 FA 0D F2 | 	cmp	result1, #0 wz
078ec     3C 00 90 AD |  if_e	jmp	#LR__0634
078f0     56 00 00 FF 
078f4     08 E5 05 F1 | 	add	objptr, ##44296
078f8     F2 28 02 FB | 	rdlong	local06, objptr
078fc     03 28 66 F0 | 	shl	local06, #3
07900     02 00 00 FF 
07904     38 E4 85 F1 | 	sub	objptr, ##1080
07908     F2 28 02 F1 | 	add	local06, objptr
0790c     14 13 02 FB | 	rdlong	arg01, local06
07910     45 01 00 FF 
07914     84 15 06 F6 | 	mov	arg02, ##@LR__4587
07918     54 00 00 FF 
0791c     D0 E4 85 F1 | 	sub	objptr, ##43216
07920     A0 18 B1 FD | 	call	#__system___string_cmp
07924     00 FA 0D F2 | 	cmp	result1, #0 wz
07928     24 00 90 5D |  if_ne	jmp	#LR__0635
0792c                 | LR__0634
0792c     56 00 00 FF 
07930     08 E5 05 F1 | 	add	objptr, ##44296
07934     F2 28 02 FB | 	rdlong	local06, objptr
07938     01 28 06 F1 | 	add	local06, #1
0793c     F2 28 62 FC | 	wrlong	local06, objptr
07940     56 00 00 FF 
07944     08 E5 85 F1 | 	sub	objptr, ##44296
07948     3C 0B B0 FD | 	call	#_expr
0794c     78 00 90 FD | 	jmp	#LR__0636
07950                 | LR__0635
07950     69 00 00 FF 
07954     40 E5 05 F1 | 	add	objptr, ##54080
07958     F2 28 02 FB | 	rdlong	local06, objptr
0795c     14 27 02 F6 | 	mov	local05, local06
07960     01 26 66 F0 | 	shl	local05, #1
07964     14 27 02 F1 | 	add	local05, local06
07968     02 26 66 F0 | 	shl	local05, #2
0796c     03 00 00 FF 
07970     00 E4 85 F1 | 	sub	objptr, ##1536
07974     F2 26 02 F1 | 	add	local05, objptr
07978     08 26 06 F1 | 	add	local05, #8
0797c     13 39 68 FC | 	wrlong	#28, local05
07980     03 00 00 FF 
07984     00 E4 05 F1 | 	add	objptr, ##1536
07988     F2 28 02 FB | 	rdlong	local06, objptr
0798c     14 27 02 F6 | 	mov	local05, local06
07990     01 26 66 F0 | 	shl	local05, #1
07994     14 27 02 F1 | 	add	local05, local06
07998     02 26 66 F0 | 	shl	local05, #2
0799c     03 00 00 FF 
079a0     00 E4 85 F1 | 	sub	objptr, ##1536
079a4     F2 26 02 F1 | 	add	local05, objptr
079a8     13 03 68 FC | 	wrlong	#1, local05
079ac     03 00 00 FF 
079b0     00 E4 05 F1 | 	add	objptr, ##1536
079b4     F2 28 02 FB | 	rdlong	local06, objptr
079b8     01 28 06 F1 | 	add	local06, #1
079bc     F2 28 62 FC | 	wrlong	local06, objptr
079c0     69 00 00 FF 
079c4     40 E5 85 F1 | 	sub	objptr, ##54080
079c8                 | LR__0636
079c8     69 00 00 FF 
079cc     40 E5 05 F1 | 	add	objptr, ##54080
079d0     F2 28 02 FB | 	rdlong	local06, objptr
079d4     14 27 02 F6 | 	mov	local05, local06
079d8     01 26 66 F0 | 	shl	local05, #1
079dc     14 27 02 F1 | 	add	local05, local06
079e0     02 26 66 F0 | 	shl	local05, #2
079e4     03 00 00 FF 
079e8     00 E4 85 F1 | 	sub	objptr, ##1536
079ec     F2 26 02 F1 | 	add	local05, objptr
079f0     08 26 06 F1 | 	add	local05, #8
079f4     13 39 68 FC | 	wrlong	#28, local05
079f8     03 00 00 FF 
079fc     00 E4 05 F1 | 	add	objptr, ##1536
07a00     F2 28 02 FB | 	rdlong	local06, objptr
07a04     14 27 02 F6 | 	mov	local05, local06
07a08     01 26 66 F0 | 	shl	local05, #1
07a0c     14 27 02 F1 | 	add	local05, local06
07a10     02 26 66 F0 | 	shl	local05, #2
07a14     03 00 00 FF 
07a18     00 E4 85 F1 | 	sub	objptr, ##1536
07a1c     F2 26 02 F1 | 	add	local05, objptr
07a20     13 2B 62 FC | 	wrlong	local07, local05
07a24     03 00 00 FF 
07a28     00 E4 05 F1 | 	add	objptr, ##1536
07a2c     F2 2A 02 FB | 	rdlong	local07, objptr
07a30     01 2A 06 F1 | 	add	local07, #1
07a34     F2 2A 62 FC | 	wrlong	local07, objptr
07a38     15 29 02 F6 | 	mov	local06, local07
07a3c     01 28 66 F0 | 	shl	local06, #1
07a40     15 29 02 F1 | 	add	local06, local07
07a44     02 28 66 F0 | 	shl	local06, #2
07a48     03 00 00 FF 
07a4c     00 E4 85 F1 | 	sub	objptr, ##1536
07a50     F2 28 02 F1 | 	add	local06, objptr
07a54     08 28 06 F1 | 	add	local06, #8
07a58     14 95 68 FC | 	wrlong	#74, local06
07a5c     03 00 00 FF 
07a60     00 E4 05 F1 | 	add	objptr, ##1536
07a64     F2 2A 02 FB | 	rdlong	local07, objptr
07a68     15 29 02 F6 | 	mov	local06, local07
07a6c     01 28 66 F0 | 	shl	local06, #1
07a70     15 29 02 F1 | 	add	local06, local07
07a74     02 28 66 F0 | 	shl	local06, #2
07a78     03 00 00 FF 
07a7c     00 E4 85 F1 | 	sub	objptr, ##1536
07a80     F2 28 02 F1 | 	add	local06, objptr
07a84     14 01 68 FC | 	wrlong	#0, local06
07a88     03 00 00 FF 
07a8c     00 E4 05 F1 | 	add	objptr, ##1536
07a90     F2 2A 02 FB | 	rdlong	local07, objptr
07a94     01 2A 06 F1 | 	add	local07, #1
07a98     F2 2A 62 FC | 	wrlong	local07, objptr
07a9c     69 00 00 FF 
07aa0     40 E5 85 F1 | 	sub	objptr, ##54080
07aa4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
07aa4                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
07aa4                 | ' 
07aa4                 | ' 
07aa4                 | ' return 0
07aa4     00 FA 05 F6 | 	mov	result1, #0
07aa8                 | LR__0637
07aa8     A7 F0 03 F6 | 	mov	ptra, fp
07aac     B2 00 A0 FD | 	call	#popregs_
07ab0                 | _compile_for_ret
07ab0     2D 00 64 FD | 	ret
07ab4                 | 
07ab4                 | ' 
07ab4                 | ' 
07ab4                 | ' sub do_for()
07ab4                 | _do_for
07ab4     05 4A 05 F6 | 	mov	COUNT_, #5
07ab8     A8 00 A0 FD | 	call	#pushregs_
07abc     79 00 00 FF 
07ac0     9C E4 05 F1 | 	add	objptr, ##62108
07ac4     F2 24 02 FB | 	rdlong	local04, objptr
07ac8     01 24 06 F1 | 	add	local04, #1
07acc     F2 24 62 FC | 	wrlong	local04, objptr
07ad0     79 00 00 FF 
07ad4     9C E4 85 F1 | 	sub	objptr, ##62108
07ad8     5C 1E B0 FD | 	call	#_pop
07adc     FD 1E 02 F6 | 	mov	local01, result1
07ae0     FE 20 02 F6 | 	mov	local02, result2
07ae4     FF 22 02 F6 | 	mov	local03, result3
07ae8     79 00 00 FF 
07aec     9C E4 05 F1 | 	add	objptr, ##62108
07af0     F2 24 02 FB | 	rdlong	local04, objptr
07af4     12 27 02 F6 | 	mov	local05, local04
07af8     02 26 66 F0 | 	shl	local05, #2
07afc     12 27 02 F1 | 	add	local05, local04
07b00     02 26 66 F0 | 	shl	local05, #2
07b04     07 00 00 FF 
07b08     40 E5 85 F1 | 	sub	objptr, ##3904
07b0c     F2 26 02 F1 | 	add	local05, objptr
07b10     08 26 06 F1 | 	add	local05, #8
07b14     13 1F 62 FC | 	wrlong	local01, local05
07b18     71 00 00 FF 
07b1c     5C E5 85 F1 | 	sub	objptr, ##58204
07b20     14 1E B0 FD | 	call	#_pop
07b24     FD 1E 02 F6 | 	mov	local01, result1
07b28     FE 20 02 F6 | 	mov	local02, result2
07b2c     FF 22 02 F6 | 	mov	local03, result3
07b30     79 00 00 FF 
07b34     9C E4 05 F1 | 	add	objptr, ##62108
07b38     F2 24 02 FB | 	rdlong	local04, objptr
07b3c     12 27 02 F6 | 	mov	local05, local04
07b40     02 26 66 F0 | 	shl	local05, #2
07b44     12 27 02 F1 | 	add	local05, local04
07b48     02 26 66 F0 | 	shl	local05, #2
07b4c     07 00 00 FF 
07b50     40 E5 85 F1 | 	sub	objptr, ##3904
07b54     F2 26 02 F1 | 	add	local05, objptr
07b58     0C 26 06 F1 | 	add	local05, #12
07b5c     13 1F 62 FC | 	wrlong	local01, local05
07b60     71 00 00 FF 
07b64     5C E5 85 F1 | 	sub	objptr, ##58204
07b68     CC 1D B0 FD | 	call	#_pop
07b6c     FD 1E 02 F6 | 	mov	local01, result1
07b70     FE 20 02 F6 | 	mov	local02, result2
07b74     FF 22 02 F6 | 	mov	local03, result3
07b78     79 00 00 FF 
07b7c     9C E4 05 F1 | 	add	objptr, ##62108
07b80     F2 24 02 FB | 	rdlong	local04, objptr
07b84     12 27 02 F6 | 	mov	local05, local04
07b88     02 26 66 F0 | 	shl	local05, #2
07b8c     12 27 02 F1 | 	add	local05, local04
07b90     02 26 66 F0 | 	shl	local05, #2
07b94     07 00 00 FF 
07b98     40 E5 85 F1 | 	sub	objptr, ##3904
07b9c     F2 26 02 F1 | 	add	local05, objptr
07ba0     10 26 06 F1 | 	add	local05, #16
07ba4     13 1F 62 FC | 	wrlong	local01, local05
07ba8                 | ' fortop+=1
07ba8                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
07ba8                 | ' 'if i> maxfor then printerror(36) : return
07ba8                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
07ba8                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
07ba8                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
07ba8                 | ' if compiledline(lineptr_e).result_type=token_end then
07ba8     08 00 00 FF 
07bac     18 E4 85 F1 | 	sub	objptr, ##4120
07bb0     F2 1E 02 FB | 	rdlong	local01, objptr
07bb4     0F 27 02 F6 | 	mov	local05, local01
07bb8     01 26 66 F0 | 	shl	local05, #1
07bbc     0F 27 02 F1 | 	add	local05, local01
07bc0     02 26 66 F0 | 	shl	local05, #2
07bc4     03 00 00 FF 
07bc8     04 E4 85 F1 | 	sub	objptr, ##1540
07bcc     F2 26 02 F1 | 	add	local05, objptr
07bd0     08 26 06 F1 | 	add	local05, #8
07bd4     13 27 02 FB | 	rdlong	local05, local05
07bd8     FE 27 0E F2 | 	cmp	local05, #510 wz
07bdc     66 00 00 FF 
07be0     40 E5 85 F1 | 	sub	objptr, ##52544
07be4     70 00 90 5D |  if_ne	jmp	#LR__0640
07be8     79 00 00 FF 
07bec     9C E4 05 F1 | 	add	objptr, ##62108
07bf0     F2 1E 02 FB | 	rdlong	local01, objptr
07bf4     0F 27 02 F6 | 	mov	local05, local01
07bf8     02 26 66 F0 | 	shl	local05, #2
07bfc     0F 27 02 F1 | 	add	local05, local01
07c00     02 26 66 F0 | 	shl	local05, #2
07c04     07 00 00 FF 
07c08     40 E5 85 F1 | 	sub	objptr, ##3904
07c0c     F2 26 02 F1 | 	add	local05, objptr
07c10     07 00 00 FF 
07c14     18 E5 05 F1 | 	add	objptr, ##3864
07c18     F2 1E 02 FB | 	rdlong	local01, objptr
07c1c     13 1F 62 FC | 	wrlong	local01, local05
07c20     28 E4 05 F1 | 	add	objptr, #40
07c24     F2 1E 02 FB | 	rdlong	local01, objptr
07c28     0F 27 02 F6 | 	mov	local05, local01
07c2c     02 26 66 F0 | 	shl	local05, #2
07c30     0F 27 02 F1 | 	add	local05, local01
07c34     02 26 66 F0 | 	shl	local05, #2
07c38     07 00 00 FF 
07c3c     40 E5 85 F1 | 	sub	objptr, ##3904
07c40     F2 26 02 F1 | 	add	local05, objptr
07c44     04 26 06 F1 | 	add	local05, #4
07c48     13 01 68 FC | 	wrlong	#0, local05
07c4c     71 00 00 FF 
07c50     5C E5 85 F1 | 	sub	objptr, ##58204
07c54     7C 00 90 FD | 	jmp	#LR__0641
07c58                 | LR__0640
07c58     79 00 00 FF 
07c5c     9C E4 05 F1 | 	add	objptr, ##62108
07c60     F2 1E 02 FB | 	rdlong	local01, objptr
07c64     0F 27 02 F6 | 	mov	local05, local01
07c68     02 26 66 F0 | 	shl	local05, #2
07c6c     0F 27 02 F1 | 	add	local05, local01
07c70     02 26 66 F0 | 	shl	local05, #2
07c74     07 00 00 FF 
07c78     40 E5 85 F1 | 	sub	objptr, ##3904
07c7c     F2 26 02 F1 | 	add	local05, objptr
07c80     07 00 00 FF 
07c84     20 E5 05 F1 | 	add	objptr, ##3872
07c88     F2 1E 02 FB | 	rdlong	local01, objptr
07c8c     13 1F 62 FC | 	wrlong	local01, local05
07c90     20 E4 05 F1 | 	add	objptr, #32
07c94     F2 1E 02 FB | 	rdlong	local01, objptr
07c98     0F 27 02 F6 | 	mov	local05, local01
07c9c     02 26 66 F0 | 	shl	local05, #2
07ca0     0F 27 02 F1 | 	add	local05, local01
07ca4     02 26 66 F0 | 	shl	local05, #2
07ca8     07 00 00 FF 
07cac     40 E5 85 F1 | 	sub	objptr, ##3904
07cb0     F2 26 02 F1 | 	add	local05, objptr
07cb4     08 00 00 FF 
07cb8     18 E4 85 F1 | 	sub	objptr, ##4120
07cbc     F2 1E 02 FB | 	rdlong	local01, objptr
07cc0     69 00 00 FF 
07cc4     44 E5 85 F1 | 	sub	objptr, ##54084
07cc8     01 1E 06 F1 | 	add	local01, #1
07ccc     04 26 06 F1 | 	add	local05, #4
07cd0     13 1F 62 FC | 	wrlong	local01, local05
07cd4                 | LR__0641
07cd4     A7 F0 03 F6 | 	mov	ptra, fp
07cd8     B2 00 A0 FD | 	call	#popregs_
07cdc                 | _do_for_ret
07cdc     2D 00 64 FD | 	ret
07ce0                 | 
07ce0                 | ' 
07ce0                 | ' ' now do_next todo
07ce0                 | ' 
07ce0                 | ' sub do_next()
07ce0                 | _do_next
07ce0     04 4A 05 F6 | 	mov	COUNT_, #4
07ce4     A8 00 A0 FD | 	call	#pushregs_
07ce8     4C 1C B0 FD | 	call	#_pop
07cec     FD 1E 02 F6 | 	mov	local01, result1
07cf0     FE 20 02 F6 | 	mov	local02, result2
07cf4     FF 22 02 F6 | 	mov	local03, result3
07cf8                 | ' 
07cf8                 | ' t1=pop() :varnum=t1.result.uresult
07cf8                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
07cf8     79 00 00 FF 
07cfc     9C E4 05 F1 | 	add	objptr, ##62108
07d00     F2 12 02 FB | 	rdlong	arg01, objptr
07d04     09 25 02 F6 | 	mov	local04, arg01
07d08     02 24 66 F0 | 	shl	local04, #2
07d0c     09 25 02 F1 | 	add	local04, arg01
07d10     02 24 66 F0 | 	shl	local04, #2
07d14     07 00 00 FF 
07d18     40 E5 85 F1 | 	sub	objptr, ##3904
07d1c     F2 24 02 F1 | 	add	local04, objptr
07d20     08 24 06 F1 | 	add	local04, #8
07d24     12 25 02 FB | 	rdlong	local04, local04
07d28     0F 25 0A F2 | 	cmp	local04, local01 wz
07d2c     71 00 00 FF 
07d30     5C E5 85 F1 | 	sub	objptr, ##58204
07d34     0C 00 90 AD |  if_e	jmp	#LR__0650
07d38     25 12 06 F6 | 	mov	arg01, #37
07d3c     D4 DE B0 FD | 	call	#_printerror
07d40     28 02 90 FD | 	jmp	#LR__0654
07d44                 | LR__0650
07d44     79 00 00 FF 
07d48     9C E4 05 F1 | 	add	objptr, ##62108
07d4c     F2 12 02 FB | 	rdlong	arg01, objptr
07d50     09 25 02 F6 | 	mov	local04, arg01
07d54     02 24 66 F0 | 	shl	local04, #2
07d58     09 25 02 F1 | 	add	local04, arg01
07d5c     02 24 66 F0 | 	shl	local04, #2
07d60     07 00 00 FF 
07d64     40 E5 85 F1 | 	sub	objptr, ##3904
07d68     F2 24 02 F1 | 	add	local04, objptr
07d6c     0C 24 06 F1 | 	add	local04, #12
07d70     12 25 02 FB | 	rdlong	local04, local04
07d74     0F 13 02 F6 | 	mov	arg01, local01
07d78     04 12 66 F0 | 	shl	arg01, #4
07d7c     3D 00 00 FF 
07d80     90 E4 85 F1 | 	sub	objptr, ##31376
07d84     F2 12 02 F1 | 	add	arg01, objptr
07d88     0F FF 01 F6 | 	mov	result3, local01
07d8c     04 FE 65 F0 | 	shl	result3, #4
07d90     F2 FE 01 F1 | 	add	result3, objptr
07d94     04 FE 05 F1 | 	add	result3, #4
07d98     FF FE 01 FB | 	rdlong	result3, result3
07d9c     12 FF 01 F1 | 	add	result3, local04
07da0     04 12 06 F1 | 	add	arg01, #4
07da4     09 FF 61 FC | 	wrlong	result3, arg01
07da8                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
07da8                 | ' if fortable(fortop).stepval>=0 then
07da8     44 00 00 FF 
07dac     D0 E5 05 F1 | 	add	objptr, ##35280
07db0     F2 12 02 FB | 	rdlong	arg01, objptr
07db4     09 25 02 F6 | 	mov	local04, arg01
07db8     02 24 66 F0 | 	shl	local04, #2
07dbc     09 25 02 F1 | 	add	local04, arg01
07dc0     02 24 66 F0 | 	shl	local04, #2
07dc4     07 00 00 FF 
07dc8     40 E5 85 F1 | 	sub	objptr, ##3904
07dcc     F2 24 02 F1 | 	add	local04, objptr
07dd0     0C 24 06 F1 | 	add	local04, #12
07dd4     12 25 02 FB | 	rdlong	local04, local04
07dd8     00 24 56 F2 | 	cmps	local04, #0 wc
07ddc     71 00 00 FF 
07de0     5C E5 85 F1 | 	sub	objptr, ##58204
07de4     78 00 90 CD |  if_b	jmp	#LR__0651
07de8                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
07de8     04 1E 66 F0 | 	shl	local01, #4
07dec     34 00 00 FF 
07df0     CC E4 05 F1 | 	add	objptr, ##26828
07df4     F2 1E 02 F1 | 	add	local01, objptr
07df8     44 00 00 FF 
07dfc     D0 E5 05 F1 | 	add	objptr, ##35280
07e00     F2 24 02 FB | 	rdlong	local04, objptr
07e04     12 13 02 F6 | 	mov	arg01, local04
07e08     02 12 66 F0 | 	shl	arg01, #2
07e0c     12 13 02 F1 | 	add	arg01, local04
07e10     02 12 66 F0 | 	shl	arg01, #2
07e14     07 00 00 FF 
07e18     40 E5 85 F1 | 	sub	objptr, ##3904
07e1c     F2 12 02 F1 | 	add	arg01, objptr
07e20     04 1E 06 F1 | 	add	local01, #4
07e24     0F 25 02 FB | 	rdlong	local04, local01
07e28     10 12 06 F1 | 	add	arg01, #16
07e2c     09 13 02 FB | 	rdlong	arg01, arg01
07e30     09 25 5A F2 | 	cmps	local04, arg01 wcz
07e34     71 00 00 FF 
07e38     5C E5 85 F1 | 	sub	objptr, ##58204
07e3c     9C 00 90 ED |  if_be	jmp	#LR__0653
07e40     79 00 00 FF 
07e44     9C E4 05 F1 | 	add	objptr, ##62108
07e48     F2 24 02 FB | 	rdlong	local04, objptr
07e4c     01 24 86 F1 | 	sub	local04, #1
07e50     F2 24 62 FC | 	wrlong	local04, objptr
07e54     79 00 00 FF 
07e58     9C E4 85 F1 | 	sub	objptr, ##62108
07e5c     0C 01 90 FD | 	jmp	#LR__0654
07e60                 | LR__0651
07e60                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
07e60     0F 13 02 F6 | 	mov	arg01, local01
07e64     04 12 66 F0 | 	shl	arg01, #4
07e68     34 00 00 FF 
07e6c     CC E4 05 F1 | 	add	objptr, ##26828
07e70     F2 12 02 F1 | 	add	arg01, objptr
07e74     44 00 00 FF 
07e78     D0 E5 05 F1 | 	add	objptr, ##35280
07e7c     F2 24 02 FB | 	rdlong	local04, objptr
07e80     12 1F 02 F6 | 	mov	local01, local04
07e84     02 1E 66 F0 | 	shl	local01, #2
07e88     12 1F 02 F1 | 	add	local01, local04
07e8c     02 1E 66 F0 | 	shl	local01, #2
07e90     07 00 00 FF 
07e94     40 E5 85 F1 | 	sub	objptr, ##3904
07e98     F2 1E 02 F1 | 	add	local01, objptr
07e9c     04 12 06 F1 | 	add	arg01, #4
07ea0     09 13 02 FB | 	rdlong	arg01, arg01
07ea4     10 1E 06 F1 | 	add	local01, #16
07ea8     0F 1F 02 FB | 	rdlong	local01, local01
07eac     0F 13 52 F2 | 	cmps	arg01, local01 wc
07eb0     71 00 00 FF 
07eb4     5C E5 85 F1 | 	sub	objptr, ##58204
07eb8     20 00 90 3D |  if_ae	jmp	#LR__0652
07ebc     79 00 00 FF 
07ec0     9C E4 05 F1 | 	add	objptr, ##62108
07ec4     F2 24 02 FB | 	rdlong	local04, objptr
07ec8     01 24 86 F1 | 	sub	local04, #1
07ecc     F2 24 62 FC | 	wrlong	local04, objptr
07ed0     79 00 00 FF 
07ed4     9C E4 85 F1 | 	sub	objptr, ##62108
07ed8     90 00 90 FD | 	jmp	#LR__0654
07edc                 | LR__0652
07edc                 | LR__0653
07edc     79 00 00 FF 
07ee0     9C E4 05 F1 | 	add	objptr, ##62108
07ee4     F2 1E 02 FB | 	rdlong	local01, objptr
07ee8     0F 25 02 F6 | 	mov	local04, local01
07eec     02 24 66 F0 | 	shl	local04, #2
07ef0     0F 25 02 F1 | 	add	local04, local01
07ef4     02 24 66 F0 | 	shl	local04, #2
07ef8     07 00 00 FF 
07efc     40 E5 85 F1 | 	sub	objptr, ##3904
07f00     F2 24 02 F1 | 	add	local04, objptr
07f04     12 25 02 FB | 	rdlong	local04, local04
07f08     07 00 00 FF 
07f0c     18 E5 05 F1 | 	add	objptr, ##3864
07f10     F2 24 62 FC | 	wrlong	local04, objptr
07f14     28 E4 05 F1 | 	add	objptr, #40
07f18     F2 1E 02 FB | 	rdlong	local01, objptr
07f1c     0F 25 02 F6 | 	mov	local04, local01
07f20     02 24 66 F0 | 	shl	local04, #2
07f24     0F 25 02 F1 | 	add	local04, local01
07f28     02 24 66 F0 | 	shl	local04, #2
07f2c     07 00 00 FF 
07f30     40 E5 85 F1 | 	sub	objptr, ##3904
07f34     F2 24 02 F1 | 	add	local04, objptr
07f38     04 24 06 F1 | 	add	local04, #4
07f3c     12 25 02 FB | 	rdlong	local04, local04
07f40     07 00 00 FF 
07f44     1C E5 05 F1 | 	add	objptr, ##3868
07f48     F2 24 62 FC | 	wrlong	local04, objptr
07f4c     0F 00 00 FF 
07f50     38 E5 85 F1 | 	sub	objptr, ##7992
07f54     F2 24 02 FB | 	rdlong	local04, objptr
07f58     01 24 86 F1 | 	sub	local04, #1
07f5c     04 E4 05 F1 | 	add	objptr, #4
07f60     F2 24 62 FC | 	wrlong	local04, objptr
07f64     69 00 00 FF 
07f68     44 E5 85 F1 | 	sub	objptr, ##54084
07f6c                 | LR__0654
07f6c     A7 F0 03 F6 | 	mov	ptra, fp
07f70     B2 00 A0 FD | 	call	#popregs_
07f74                 | _do_next_ret
07f74     2D 00 64 FD | 	ret
07f78                 | 
07f78                 | ' 
07f78                 | ' 
07f78                 | ' function compile_next() as ulong
07f78                 | _compile_next
07f78     04 4A 05 F6 | 	mov	COUNT_, #4
07f7c     A8 00 A0 FD | 	call	#pushregs_
07f80     56 00 00 FF 
07f84     08 E5 05 F1 | 	add	objptr, ##44296
07f88     F2 12 02 FB | 	rdlong	arg01, objptr
07f8c     03 12 66 F0 | 	shl	arg01, #3
07f90     02 00 00 FF 
07f94     38 E4 85 F1 | 	sub	objptr, ##1080
07f98     F2 12 02 F1 | 	add	arg01, objptr
07f9c     09 1F 02 FB | 	rdlong	local01, arg01
07fa0                 | ' 
07fa0                 | ' varname$=lparts(ct).part$ 
07fa0                 | ' 'suffix$=right$(varname$,1)
07fa0                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
07fa0                 | ' if varnum=0 then compile_error(35)  : return 35
07fa0     04 E4 85 F1 | 	sub	objptr, #4
07fa4     F2 14 0A FB | 	rdlong	arg02, objptr wz
07fa8     54 00 00 FF 
07fac     CC E4 85 F1 | 	sub	objptr, ##43212
07fb0     10 00 90 5D |  if_ne	jmp	#LR__0660
07fb4     23 12 06 F6 | 	mov	arg01, #35
07fb8     0C E1 BF FD | 	call	#_compile_error
07fbc     23 FA 05 F6 | 	mov	result1, #35
07fc0     58 01 90 FD | 	jmp	#LR__0664
07fc4                 | LR__0660
07fc4     01 20 66 F6 | 	neg	local02, #1
07fc8                 | ' j=-1
07fc8                 | ' for i=0 to varnum-1
07fc8     00 22 06 F6 | 	mov	local03, #0
07fcc     54 00 00 FF 
07fd0     CC E4 05 F1 | 	add	objptr, ##43212
07fd4     F2 24 02 FB | 	rdlong	local04, objptr
07fd8     54 00 00 FF 
07fdc     CC E4 85 F1 | 	sub	objptr, ##43212
07fe0                 | LR__0661
07fe0     12 23 12 F2 | 	cmp	local03, local04 wc
07fe4     38 00 90 3D |  if_ae	jmp	#LR__0662
07fe8                 | '   if variables(i).name=varname$ then j=i : exit
07fe8     11 15 02 F6 | 	mov	arg02, local03
07fec     04 14 66 F0 | 	shl	arg02, #4
07ff0     34 00 00 FF 
07ff4     CC E4 05 F1 | 	add	objptr, ##26828
07ff8     F2 14 02 F1 | 	add	arg02, objptr
07ffc     0A 13 02 FB | 	rdlong	arg01, arg02
08000     0F 15 02 F6 | 	mov	arg02, local01
08004     34 00 00 FF 
08008     CC E4 85 F1 | 	sub	objptr, ##26828
0800c     B4 11 B1 FD | 	call	#__system___string_cmp
08010     00 FA 0D F2 | 	cmp	result1, #0 wz
08014     11 21 02 A6 |  if_e	mov	local02, local03
08018     01 22 06 51 |  if_ne	add	local03, #1
0801c     C0 FF 9F 5D |  if_ne	jmp	#LR__0661
08020                 | LR__0662
08020                 | ' if j=-1 then compile_error(35) : return 35
08020     FF FF 7F FF 
08024     FF 21 0E F2 | 	cmp	local02, ##-1 wz
08028     10 00 90 5D |  if_ne	jmp	#LR__0663
0802c     23 12 06 F6 | 	mov	arg01, #35
08030     94 E0 BF FD | 	call	#_compile_error
08034     23 FA 05 F6 | 	mov	result1, #35
08038     E0 00 90 FD | 	jmp	#LR__0664
0803c                 | LR__0663
0803c     69 00 00 FF 
08040     40 E5 05 F1 | 	add	objptr, ##54080
08044     F2 24 02 FB | 	rdlong	local04, objptr
08048     12 23 02 F6 | 	mov	local03, local04
0804c     01 22 66 F0 | 	shl	local03, #1
08050     12 23 02 F1 | 	add	local03, local04
08054     02 22 66 F0 | 	shl	local03, #2
08058     03 00 00 FF 
0805c     00 E4 85 F1 | 	sub	objptr, ##1536
08060     F2 22 02 F1 | 	add	local03, objptr
08064     08 22 06 F1 | 	add	local03, #8
08068     11 39 68 FC | 	wrlong	#28, local03
0806c     03 00 00 FF 
08070     00 E4 05 F1 | 	add	objptr, ##1536
08074     F2 24 02 FB | 	rdlong	local04, objptr
08078     12 23 02 F6 | 	mov	local03, local04
0807c     01 22 66 F0 | 	shl	local03, #1
08080     12 23 02 F1 | 	add	local03, local04
08084     02 22 66 F0 | 	shl	local03, #2
08088     03 00 00 FF 
0808c     00 E4 85 F1 | 	sub	objptr, ##1536
08090     F2 22 02 F1 | 	add	local03, objptr
08094     11 21 62 FC | 	wrlong	local02, local03
08098     03 00 00 FF 
0809c     00 E4 05 F1 | 	add	objptr, ##1536
080a0     F2 24 02 FB | 	rdlong	local04, objptr
080a4     01 24 06 F1 | 	add	local04, #1
080a8     F2 24 62 FC | 	wrlong	local04, objptr
080ac     12 23 02 F6 | 	mov	local03, local04
080b0     01 22 66 F0 | 	shl	local03, #1
080b4     12 23 02 F1 | 	add	local03, local04
080b8     02 22 66 F0 | 	shl	local03, #2
080bc     03 00 00 FF 
080c0     00 E4 85 F1 | 	sub	objptr, ##1536
080c4     F2 22 02 F1 | 	add	local03, objptr
080c8     08 22 06 F1 | 	add	local03, #8
080cc     11 97 68 FC | 	wrlong	#75, local03
080d0     03 00 00 FF 
080d4     00 E4 05 F1 | 	add	objptr, ##1536
080d8     F2 24 02 FB | 	rdlong	local04, objptr
080dc     12 23 02 F6 | 	mov	local03, local04
080e0     01 22 66 F0 | 	shl	local03, #1
080e4     12 23 02 F1 | 	add	local03, local04
080e8     02 22 66 F0 | 	shl	local03, #2
080ec     03 00 00 FF 
080f0     00 E4 85 F1 | 	sub	objptr, ##1536
080f4     F2 22 02 F1 | 	add	local03, objptr
080f8     11 01 68 FC | 	wrlong	#0, local03
080fc     03 00 00 FF 
08100     00 E4 05 F1 | 	add	objptr, ##1536
08104     F2 24 02 FB | 	rdlong	local04, objptr
08108     01 24 06 F1 | 	add	local04, #1
0810c     F2 24 62 FC | 	wrlong	local04, objptr
08110     69 00 00 FF 
08114     40 E5 85 F1 | 	sub	objptr, ##54080
08118                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
08118                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
08118                 | ' return 0
08118     00 FA 05 F6 | 	mov	result1, #0
0811c                 | LR__0664
0811c     A7 F0 03 F6 | 	mov	ptra, fp
08120     B2 00 A0 FD | 	call	#popregs_
08124                 | _compile_next_ret
08124     2D 00 64 FD | 	ret
08128                 | 
08128                 | ' 
08128                 | ' 
08128                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
08128                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
08128                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
08128                 | ' 
08128                 | ' 
08128                 | ' function compile_goto( ) as ulong
08128                 | _compile_goto
08128     03 4A 05 F6 | 	mov	COUNT_, #3
0812c     A8 00 A0 FD | 	call	#pushregs_
08130     28 F0 07 F1 | 	add	ptra, #40
08134                 | ' 
08134                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
08134     56 00 00 FF 
08138     08 E5 05 F1 | 	add	objptr, ##44296
0813c     F2 16 02 FB | 	rdlong	arg03, objptr
08140     03 16 66 F0 | 	shl	arg03, #3
08144     02 00 00 FF 
08148     38 E4 85 F1 | 	sub	objptr, ##1080
0814c     F2 16 02 F1 | 	add	arg03, objptr
08150     04 16 06 F1 | 	add	arg03, #4
08154     0B 17 02 FB | 	rdlong	arg03, arg03
08158     01 00 00 FF 
0815c     00 16 0E F2 | 	cmp	arg03, ##512 wz
08160     54 00 00 FF 
08164     D0 E4 85 F1 | 	sub	objptr, ##43216
08168     CC 02 90 5D |  if_ne	jmp	#LR__0675
0816c     56 00 00 FF 
08170     08 E5 05 F1 | 	add	objptr, ##44296
08174     F2 16 02 FB | 	rdlong	arg03, objptr
08178     01 16 06 F1 | 	add	arg03, #1
0817c     03 16 66 F0 | 	shl	arg03, #3
08180     02 00 00 FF 
08184     38 E4 85 F1 | 	sub	objptr, ##1080
08188     F2 16 02 F1 | 	add	arg03, objptr
0818c     04 16 06 F1 | 	add	arg03, #4
08190     0B 17 02 FB | 	rdlong	arg03, arg03
08194     FE 17 0E F2 | 	cmp	arg03, #510 wz
08198     54 00 00 FF 
0819c     D0 E4 85 F1 | 	sub	objptr, ##43216
081a0     94 02 90 5D |  if_ne	jmp	#LR__0675
081a4     56 00 00 FF 
081a8     08 E5 05 F1 | 	add	objptr, ##44296
081ac     F2 16 02 FB | 	rdlong	arg03, objptr
081b0     03 16 66 F0 | 	shl	arg03, #3
081b4     02 00 00 FF 
081b8     38 E4 85 F1 | 	sub	objptr, ##1080
081bc     F2 16 02 F1 | 	add	arg03, objptr
081c0     0B 13 02 FB | 	rdlong	arg01, arg03
081c4     00 14 06 F6 | 	mov	arg02, #0
081c8     54 00 00 FF 
081cc     D0 E4 85 F1 | 	sub	objptr, ##43216
081d0     2C 41 B1 FD | 	call	#__system____builtin_atoi
081d4     04 4E 05 F1 | 	add	fp, #4
081d8     A7 FA 61 FC | 	wrlong	result1, fp
081dc     69 00 00 FF 
081e0     40 E5 05 F1 | 	add	objptr, ##54080
081e4     F2 1E 02 FB | 	rdlong	local01, objptr
081e8     0F 21 02 F6 | 	mov	local02, local01
081ec     01 20 66 F0 | 	shl	local02, #1
081f0     0F 21 02 F1 | 	add	local02, local01
081f4     02 20 66 F0 | 	shl	local02, #2
081f8     03 00 00 FF 
081fc     00 E4 85 F1 | 	sub	objptr, ##1536
08200     F2 20 02 F1 | 	add	local02, objptr
08204     08 20 06 F1 | 	add	local02, #8
08208     10 9D 68 FC | 	wrlong	#78, local02
0820c     03 00 00 FF 
08210     08 E4 05 F1 | 	add	objptr, ##1544
08214     F2 22 02 FB | 	rdlong	local03, objptr
08218     69 00 00 FF 
0821c     48 E5 85 F1 | 	sub	objptr, ##54088
08220     04 4E 05 F1 | 	add	fp, #4
08224     A7 22 62 FC | 	wrlong	local03, fp
08228     08 4E 85 F1 | 	sub	fp, #8
0822c                 | ' 
0822c                 | '   gotoline=val%(lparts(ct).part$) 
0822c                 | '   compiledline(lineptr).result_type=token_fast_goto
0822c                 | ' ' now find a pointer to goto
0822c                 | '   gotoptr=programstart
0822c                 | '   do
0822c                 | LR__0670
0822c     10 4E 05 F1 | 	add	fp, #16
08230     A7 12 02 F6 | 	mov	arg01, fp
08234     08 4E 85 F1 | 	sub	fp, #8
08238     A7 14 02 FB | 	rdlong	arg02, fp
0823c     08 4E 85 F1 | 	sub	fp, #8
08240     18 16 06 F6 | 	mov	arg03, #24
08244     0B 00 00 FF 
08248     C0 E4 05 F1 | 	add	objptr, ##5824
0824c     FC 03 B1 FD | 	call	#_psram_spin2_read1
08250     0B 00 00 FF 
08254     C0 E4 85 F1 | 	sub	objptr, ##5824
08258                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08258                 | '     if gotoheader(0)<>$FFFFFFFF then
08258     10 4E 05 F1 | 	add	fp, #16
0825c     A7 22 02 FB | 	rdlong	local03, fp
08260     10 4E 85 F1 | 	sub	fp, #16
08264     FF FF 7F FF 
08268     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0826c     24 00 90 AD |  if_e	jmp	#LR__0671
08270     08 4E 05 F1 | 	add	fp, #8
08274     A7 22 02 FB | 	rdlong	local03, fp
08278     04 4E 05 F1 | 	add	fp, #4
0827c     A7 22 62 FC | 	wrlong	local03, fp
08280     18 4E 05 F1 | 	add	fp, #24
08284     A7 22 02 FB | 	rdlong	local03, fp
08288     1C 4E 85 F1 | 	sub	fp, #28
0828c     A7 22 62 FC | 	wrlong	local03, fp
08290     08 4E 85 F1 | 	sub	fp, #8
08294                 | LR__0671
08294     24 4E 05 F1 | 	add	fp, #36
08298     A7 22 02 FB | 	rdlong	local03, fp
0829c     24 4E 85 F1 | 	sub	fp, #36
082a0     FF FF 3F FF 
082a4     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
082a8     10 4E 05 51 |  if_ne	add	fp, #16
082ac     A7 1E 02 5B |  if_ne	rdlong	local01, fp
082b0     10 4E 85 51 |  if_ne	sub	fp, #16
082b4     FF FF 7F 5F 
082b8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
082bc     1C 00 90 AD |  if_e	jmp	#LR__0672
082c0     10 4E 05 F1 | 	add	fp, #16
082c4     A7 22 02 FB | 	rdlong	local03, fp
082c8     0C 4E 85 F1 | 	sub	fp, #12
082cc     A7 20 02 FB | 	rdlong	local02, fp
082d0     04 4E 85 F1 | 	sub	fp, #4
082d4     10 23 0A F2 | 	cmp	local03, local02 wz
082d8     50 FF 9F 5D |  if_ne	jmp	#LR__0670
082dc                 | LR__0672
082dc                 | '   if gotoheader(0)=gotoline then
082dc     10 4E 05 F1 | 	add	fp, #16
082e0     A7 22 02 FB | 	rdlong	local03, fp
082e4     0C 4E 85 F1 | 	sub	fp, #12
082e8     A7 1E 02 FB | 	rdlong	local01, fp
082ec     04 4E 85 F1 | 	sub	fp, #4
082f0     0F 23 0A F2 | 	cmp	local03, local01 wz
082f4     7C 00 90 5D |  if_ne	jmp	#LR__0673
082f8     69 00 00 FF 
082fc     40 E5 05 F1 | 	add	objptr, ##54080
08300     F2 1E 02 FB | 	rdlong	local01, objptr
08304     0F 21 02 F6 | 	mov	local02, local01
08308     01 20 66 F0 | 	shl	local02, #1
0830c     0F 21 02 F1 | 	add	local02, local01
08310     02 20 66 F0 | 	shl	local02, #2
08314     03 00 00 FF 
08318     00 E4 85 F1 | 	sub	objptr, ##1536
0831c     F2 20 02 F1 | 	add	local02, objptr
08320     0C 4E 05 F1 | 	add	fp, #12
08324     A7 22 02 FB | 	rdlong	local03, fp
08328     10 23 62 FC | 	wrlong	local03, local02
0832c     03 00 00 FF 
08330     00 E4 05 F1 | 	add	objptr, ##1536
08334     F2 1E 02 FB | 	rdlong	local01, objptr
08338     0F 21 02 F6 | 	mov	local02, local01
0833c     01 20 66 F0 | 	shl	local02, #1
08340     0F 21 02 F1 | 	add	local02, local01
08344     02 20 66 F0 | 	shl	local02, #2
08348     03 00 00 FF 
0834c     00 E4 85 F1 | 	sub	objptr, ##1536
08350     F2 20 02 F1 | 	add	local02, objptr
08354     08 4E 85 F1 | 	sub	fp, #8
08358     A7 22 02 FB | 	rdlong	local03, fp
0835c     04 4E 85 F1 | 	sub	fp, #4
08360     04 20 06 F1 | 	add	local02, #4
08364     10 23 62 FC | 	wrlong	local03, local02
08368     66 00 00 FF 
0836c     40 E5 85 F1 | 	sub	objptr, ##52544
08370     A4 00 90 FD | 	jmp	#LR__0674
08374                 | LR__0673
08374     69 00 00 FF 
08378     40 E5 05 F1 | 	add	objptr, ##54080
0837c     F2 1E 02 FB | 	rdlong	local01, objptr
08380     0F 21 02 F6 | 	mov	local02, local01
08384     01 20 66 F0 | 	shl	local02, #1
08388     0F 21 02 F1 | 	add	local02, local01
0838c     02 20 66 F0 | 	shl	local02, #2
08390     03 00 00 FF 
08394     00 E4 85 F1 | 	sub	objptr, ##1536
08398     F2 20 02 F1 | 	add	local02, objptr
0839c     00 00 C0 FF 
083a0     10 01 68 FC | 	wrlong	##-2147483648, local02
083a4     03 00 00 FF 
083a8     00 E4 05 F1 | 	add	objptr, ##1536
083ac     F2 1E 02 FB | 	rdlong	local01, objptr
083b0     0F 21 02 F6 | 	mov	local02, local01
083b4     01 20 66 F0 | 	shl	local02, #1
083b8     0F 21 02 F1 | 	add	local02, local01
083bc     02 20 66 F0 | 	shl	local02, #2
083c0     03 00 00 FF 
083c4     00 E4 85 F1 | 	sub	objptr, ##1536
083c8     F2 20 02 F1 | 	add	local02, objptr
083cc     04 4E 05 F1 | 	add	fp, #4
083d0     A7 22 02 FB | 	rdlong	local03, fp
083d4     04 4E 85 F1 | 	sub	fp, #4
083d8     04 20 06 F1 | 	add	local02, #4
083dc     10 23 62 FC | 	wrlong	local03, local02
083e0     03 00 00 FF 
083e4     00 E4 05 F1 | 	add	objptr, ##1536
083e8     F2 1E 02 FB | 	rdlong	local01, objptr
083ec     0F 21 02 F6 | 	mov	local02, local01
083f0     01 20 66 F0 | 	shl	local02, #1
083f4     0F 21 02 F1 | 	add	local02, local01
083f8     02 20 66 F0 | 	shl	local02, #2
083fc     03 00 00 FF 
08400     00 E4 85 F1 | 	sub	objptr, ##1536
08404     F2 20 02 F1 | 	add	local02, objptr
08408     08 20 06 F1 | 	add	local02, #8
0840c     10 A7 68 FC | 	wrlong	#83, local02
08410     66 00 00 FF 
08414     40 E5 85 F1 | 	sub	objptr, ##52544
08418                 | LR__0674
08418     69 00 00 FF 
0841c     40 E5 05 F1 | 	add	objptr, ##54080
08420     F2 22 02 FB | 	rdlong	local03, objptr
08424     01 22 06 F1 | 	add	local03, #1
08428     F2 22 62 FC | 	wrlong	local03, objptr
0842c     69 00 00 FF 
08430     40 E5 85 F1 | 	sub	objptr, ##54080
08434     40 00 90 FD | 	jmp	#LR__0676
08438                 | LR__0675
08438                 | '    print "We have a slow goto, todo  "
08438     00 12 06 F6 | 	mov	arg01, #0
0843c     60 66 B1 FD | 	call	#__system___getiolock_0425
08440     FD 12 02 F6 | 	mov	arg01, result1
08444     54 0D B1 FD | 	call	#__system___lockmem
08448     45 01 00 FF 
0844c     87 15 06 F6 | 	mov	arg02, ##@LR__4588
08450     00 12 06 F6 | 	mov	arg01, #0
08454     00 16 06 F6 | 	mov	arg03, #0
08458     34 1A B1 FD | 	call	#__system___basic_print_string
0845c     00 12 06 F6 | 	mov	arg01, #0
08460     0A 14 06 F6 | 	mov	arg02, #10
08464     00 16 06 F6 | 	mov	arg03, #0
08468     CC 19 B1 FD | 	call	#__system___basic_print_char
0846c     00 12 06 F6 | 	mov	arg01, #0
08470     2C 66 B1 FD | 	call	#__system___getiolock_0425
08474     FD 00 68 FC | 	wrlong	#0, result1
08478                 | LR__0676
08478                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
08478                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
08478                 | ' return 0
08478     00 FA 05 F6 | 	mov	result1, #0
0847c     A7 F0 03 F6 | 	mov	ptra, fp
08480     B2 00 A0 FD | 	call	#popregs_
08484                 | _compile_goto_ret
08484     2D 00 64 FD | 	ret
08488                 | 
08488                 | ' 
08488                 | ' 
08488                 | ' 
08488                 | ' 
08488                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08488                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
08488                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08488                 | ' 
08488                 | ' 
08488                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08488                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
08488                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08488                 | ' 
08488                 | ' 
08488                 | ' function expr() as integer 
08488                 | _expr
08488     07 4A 05 F6 | 	mov	COUNT_, #7
0848c     A8 00 A0 FD | 	call	#pushregs_
08490                 | _expr_enter
08490     56 00 00 FF 
08494     08 E5 05 F1 | 	add	objptr, ##44296
08498     F2 24 02 FB | 	rdlong	local04, objptr
0849c     03 24 66 F0 | 	shl	local04, #3
084a0     02 00 00 FF 
084a4     38 E4 85 F1 | 	sub	objptr, ##1080
084a8     F2 24 02 F1 | 	add	local04, objptr
084ac     04 24 06 F1 | 	add	local04, #4
084b0     12 27 02 FB | 	rdlong	local05, local04
084b4                 | ' 
084b4                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
084b4     FE 27 0E F2 | 	cmp	local05, #510 wz
084b8     54 00 00 FF 
084bc     D0 E4 85 F1 | 	sub	objptr, ##43216
084c0     C4 00 90 5D |  if_ne	jmp	#LR__0680
084c4     1D 1E 06 F6 | 	mov	local01, #29
084c8     FF 22 06 F6 | 	mov	local03, #255
084cc     0F 29 02 F6 | 	mov	local06, local01
084d0     10 2B 02 F6 | 	mov	local07, local02
084d4     11 1F 02 F6 | 	mov	local01, local03
084d8     69 00 00 FF 
084dc     40 E5 05 F1 | 	add	objptr, ##54080
084e0     F2 26 02 FB | 	rdlong	local05, objptr
084e4     13 25 02 F6 | 	mov	local04, local05
084e8     01 24 66 F0 | 	shl	local04, #1
084ec     13 25 02 F1 | 	add	local04, local05
084f0     02 24 66 F0 | 	shl	local04, #2
084f4     03 00 00 FF 
084f8     00 E4 85 F1 | 	sub	objptr, ##1536
084fc     F2 24 02 F1 | 	add	local04, objptr
08500     12 29 62 FC | 	wrlong	local06, local04
08504     03 00 00 FF 
08508     00 E4 05 F1 | 	add	objptr, ##1536
0850c     F2 28 02 FB | 	rdlong	local06, objptr
08510     14 27 02 F6 | 	mov	local05, local06
08514     01 26 66 F0 | 	shl	local05, #1
08518     14 27 02 F1 | 	add	local05, local06
0851c     02 26 66 F0 | 	shl	local05, #2
08520     03 00 00 FF 
08524     00 E4 85 F1 | 	sub	objptr, ##1536
08528     F2 26 02 F1 | 	add	local05, objptr
0852c     04 26 06 F1 | 	add	local05, #4
08530     13 2B 62 FC | 	wrlong	local07, local05
08534     03 00 00 FF 
08538     00 E4 05 F1 | 	add	objptr, ##1536
0853c     F2 2A 02 FB | 	rdlong	local07, objptr
08540     15 29 02 F6 | 	mov	local06, local07
08544     01 28 66 F0 | 	shl	local06, #1
08548     15 29 02 F1 | 	add	local06, local07
0854c     02 28 66 F0 | 	shl	local06, #2
08550     03 00 00 FF 
08554     00 E4 85 F1 | 	sub	objptr, ##1536
08558     F2 28 02 F1 | 	add	local06, objptr
0855c     08 28 06 F1 | 	add	local06, #8
08560     14 1F 62 FC | 	wrlong	local01, local06
08564     03 00 00 FF 
08568     00 E4 05 F1 | 	add	objptr, ##1536
0856c     F2 28 02 FB | 	rdlong	local06, objptr
08570     01 28 06 F1 | 	add	local06, #1
08574     F2 28 62 FC | 	wrlong	local06, objptr
08578     69 00 00 FF 
0857c     40 E5 85 F1 | 	sub	objptr, ##54080
08580     1D FA 05 F6 | 	mov	result1, #29
08584     54 01 90 FD | 	jmp	#LR__0683
08588                 | LR__0680
08588     00 1E 06 F6 | 	mov	local01, #0
0858c     58 01 B0 FD | 	call	#_addsub
08590     56 00 00 FF 
08594     08 E5 05 F1 | 	add	objptr, ##44296
08598     F2 24 02 FB | 	rdlong	local04, objptr
0859c     03 24 66 F0 | 	shl	local04, #3
085a0     02 00 00 FF 
085a4     38 E4 85 F1 | 	sub	objptr, ##1080
085a8     F2 24 02 F1 | 	add	local04, objptr
085ac     04 24 06 F1 | 	add	local04, #4
085b0     12 27 02 FB | 	rdlong	local05, local04
085b4                 | ' t3.result.uresult=0
085b4                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
085b4                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
085b4                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
085b4     54 00 00 FF 
085b8     D0 E4 85 F1 | 	sub	objptr, ##43216
085bc                 | LR__0681
085bc     1B 26 0E F2 | 	cmp	local05, #27 wz
085c0     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
085c4     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
085c8     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
085cc     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
085d0     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
085d4     00 01 90 5D |  if_ne	jmp	#LR__0682
085d8     56 00 00 FF 
085dc     08 E5 05 F1 | 	add	objptr, ##44296
085e0     F2 28 02 FB | 	rdlong	local06, objptr
085e4     01 28 06 F1 | 	add	local06, #1
085e8     F2 28 62 FC | 	wrlong	local06, objptr
085ec     56 00 00 FF 
085f0     08 E5 85 F1 | 	sub	objptr, ##44296
085f4     F0 00 B0 FD | 	call	#_addsub
085f8     13 23 02 F6 | 	mov	local03, local05
085fc     0F 29 02 F6 | 	mov	local06, local01
08600     10 2B 02 F6 | 	mov	local07, local02
08604     11 27 02 F6 | 	mov	local05, local03
08608     69 00 00 FF 
0860c     40 E5 05 F1 | 	add	objptr, ##54080
08610     F2 24 02 FB | 	rdlong	local04, objptr
08614     12 FB 01 F6 | 	mov	result1, local04
08618     01 FA 65 F0 | 	shl	result1, #1
0861c     12 FB 01 F1 | 	add	result1, local04
08620     02 FA 65 F0 | 	shl	result1, #2
08624     03 00 00 FF 
08628     00 E4 85 F1 | 	sub	objptr, ##1536
0862c     F2 FA 01 F1 | 	add	result1, objptr
08630     FD 28 62 FC | 	wrlong	local06, result1
08634     03 00 00 FF 
08638     00 E4 05 F1 | 	add	objptr, ##1536
0863c     F2 28 02 FB | 	rdlong	local06, objptr
08640     14 25 02 F6 | 	mov	local04, local06
08644     01 24 66 F0 | 	shl	local04, #1
08648     14 25 02 F1 | 	add	local04, local06
0864c     02 24 66 F0 | 	shl	local04, #2
08650     03 00 00 FF 
08654     00 E4 85 F1 | 	sub	objptr, ##1536
08658     F2 24 02 F1 | 	add	local04, objptr
0865c     04 24 06 F1 | 	add	local04, #4
08660     12 2B 62 FC | 	wrlong	local07, local04
08664     03 00 00 FF 
08668     00 E4 05 F1 | 	add	objptr, ##1536
0866c     F2 2A 02 FB | 	rdlong	local07, objptr
08670     15 29 02 F6 | 	mov	local06, local07
08674     01 28 66 F0 | 	shl	local06, #1
08678     15 29 02 F1 | 	add	local06, local07
0867c     02 28 66 F0 | 	shl	local06, #2
08680     03 00 00 FF 
08684     00 E4 85 F1 | 	sub	objptr, ##1536
08688     F2 28 02 F1 | 	add	local06, objptr
0868c     08 28 06 F1 | 	add	local06, #8
08690     14 27 62 FC | 	wrlong	local05, local06
08694     03 00 00 FF 
08698     00 E4 05 F1 | 	add	objptr, ##1536
0869c     F2 28 02 FB | 	rdlong	local06, objptr
086a0     01 28 06 F1 | 	add	local06, #1
086a4     F2 28 62 FC | 	wrlong	local06, objptr
086a8     13 00 00 FF 
086ac     38 E4 85 F1 | 	sub	objptr, ##9784
086b0     F2 24 02 FB | 	rdlong	local04, objptr
086b4     03 24 66 F0 | 	shl	local04, #3
086b8     02 00 00 FF 
086bc     38 E4 85 F1 | 	sub	objptr, ##1080
086c0     F2 24 02 F1 | 	add	local04, objptr
086c4     04 24 06 F1 | 	add	local04, #4
086c8     12 27 02 FB | 	rdlong	local05, local04
086cc     54 00 00 FF 
086d0     D0 E4 85 F1 | 	sub	objptr, ##43216
086d4     E4 FE 9F FD | 	jmp	#LR__0681
086d8                 | LR__0682
086d8                 | ' return 0  
086d8     00 FA 05 F6 | 	mov	result1, #0
086dc                 | LR__0683
086dc     A7 F0 03 F6 | 	mov	ptra, fp
086e0     B2 00 A0 FD | 	call	#popregs_
086e4                 | _expr_ret
086e4     2D 00 64 FD | 	ret
086e8                 | 
086e8                 | ' 
086e8                 | ' 
086e8                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
086e8                 | ' 
086e8                 | ' function addsub() as integer 
086e8                 | _addsub
086e8     07 4A 05 F6 | 	mov	COUNT_, #7
086ec     A8 00 A0 FD | 	call	#pushregs_
086f0                 | _addsub_enter
086f0     00 1E 06 F6 | 	mov	local01, #0
086f4     50 01 B0 FD | 	call	#_muldiv
086f8     56 00 00 FF 
086fc     08 E5 05 F1 | 	add	objptr, ##44296
08700     F2 24 02 FB | 	rdlong	local04, objptr
08704     03 24 66 F0 | 	shl	local04, #3
08708     02 00 00 FF 
0870c     38 E4 85 F1 | 	sub	objptr, ##1080
08710     F2 24 02 F1 | 	add	local04, objptr
08714     04 24 06 F1 | 	add	local04, #4
08718     12 27 02 FB | 	rdlong	local05, local04
0871c                 | ' t3.result.uresult=0
0871c                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0871c                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0871c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0871c     54 00 00 FF 
08720     D0 E4 85 F1 | 	sub	objptr, ##43216
08724                 | LR__0690
08724     01 26 0E F2 | 	cmp	local05, #1 wz
08728     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
0872c     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
08730     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
08734     00 01 90 5D |  if_ne	jmp	#LR__0691
08738     56 00 00 FF 
0873c     08 E5 05 F1 | 	add	objptr, ##44296
08740     F2 24 02 FB | 	rdlong	local04, objptr
08744     01 24 06 F1 | 	add	local04, #1
08748     F2 24 62 FC | 	wrlong	local04, objptr
0874c     56 00 00 FF 
08750     08 E5 85 F1 | 	sub	objptr, ##44296
08754     F0 00 B0 FD | 	call	#_muldiv
08758     13 23 02 F6 | 	mov	local03, local05
0875c     0F 29 02 F6 | 	mov	local06, local01
08760     10 2B 02 F6 | 	mov	local07, local02
08764     11 27 02 F6 | 	mov	local05, local03
08768     69 00 00 FF 
0876c     40 E5 05 F1 | 	add	objptr, ##54080
08770     F2 24 02 FB | 	rdlong	local04, objptr
08774     12 FB 01 F6 | 	mov	result1, local04
08778     01 FA 65 F0 | 	shl	result1, #1
0877c     12 FB 01 F1 | 	add	result1, local04
08780     02 FA 65 F0 | 	shl	result1, #2
08784     03 00 00 FF 
08788     00 E4 85 F1 | 	sub	objptr, ##1536
0878c     F2 FA 01 F1 | 	add	result1, objptr
08790     FD 28 62 FC | 	wrlong	local06, result1
08794     03 00 00 FF 
08798     00 E4 05 F1 | 	add	objptr, ##1536
0879c     F2 28 02 FB | 	rdlong	local06, objptr
087a0     14 25 02 F6 | 	mov	local04, local06
087a4     01 24 66 F0 | 	shl	local04, #1
087a8     14 25 02 F1 | 	add	local04, local06
087ac     02 24 66 F0 | 	shl	local04, #2
087b0     03 00 00 FF 
087b4     00 E4 85 F1 | 	sub	objptr, ##1536
087b8     F2 24 02 F1 | 	add	local04, objptr
087bc     04 24 06 F1 | 	add	local04, #4
087c0     12 2B 62 FC | 	wrlong	local07, local04
087c4     03 00 00 FF 
087c8     00 E4 05 F1 | 	add	objptr, ##1536
087cc     F2 2A 02 FB | 	rdlong	local07, objptr
087d0     15 29 02 F6 | 	mov	local06, local07
087d4     01 28 66 F0 | 	shl	local06, #1
087d8     15 29 02 F1 | 	add	local06, local07
087dc     02 28 66 F0 | 	shl	local06, #2
087e0     03 00 00 FF 
087e4     00 E4 85 F1 | 	sub	objptr, ##1536
087e8     F2 28 02 F1 | 	add	local06, objptr
087ec     08 28 06 F1 | 	add	local06, #8
087f0     14 27 62 FC | 	wrlong	local05, local06
087f4     03 00 00 FF 
087f8     00 E4 05 F1 | 	add	objptr, ##1536
087fc     F2 28 02 FB | 	rdlong	local06, objptr
08800     01 28 06 F1 | 	add	local06, #1
08804     F2 28 62 FC | 	wrlong	local06, objptr
08808     13 00 00 FF 
0880c     38 E4 85 F1 | 	sub	objptr, ##9784
08810     F2 24 02 FB | 	rdlong	local04, objptr
08814     03 24 66 F0 | 	shl	local04, #3
08818     02 00 00 FF 
0881c     38 E4 85 F1 | 	sub	objptr, ##1080
08820     F2 24 02 F1 | 	add	local04, objptr
08824     04 24 06 F1 | 	add	local04, #4
08828     12 27 02 FB | 	rdlong	local05, local04
0882c     54 00 00 FF 
08830     D0 E4 85 F1 | 	sub	objptr, ##43216
08834     EC FE 9F FD | 	jmp	#LR__0690
08838                 | LR__0691
08838                 | '   return 0
08838     00 FA 05 F6 | 	mov	result1, #0
0883c     A7 F0 03 F6 | 	mov	ptra, fp
08840     B2 00 A0 FD | 	call	#popregs_
08844                 | _addsub_ret
08844     2D 00 64 FD | 	ret
08848                 | 
08848                 | ' 
08848                 | ' sub muldiv()
08848                 | _muldiv
08848     08 4A 05 F6 | 	mov	COUNT_, #8
0884c     A8 00 A0 FD | 	call	#pushregs_
08850                 | _muldiv_enter
08850     00 1E 06 F6 | 	mov	local01, #0
08854     58 01 B0 FD | 	call	#_getvalue
08858     56 00 00 FF 
0885c     08 E5 05 F1 | 	add	objptr, ##44296
08860     F2 24 02 FB | 	rdlong	local04, objptr
08864     03 24 66 F0 | 	shl	local04, #3
08868     02 00 00 FF 
0886c     38 E4 85 F1 | 	sub	objptr, ##1080
08870     F2 24 02 F1 | 	add	local04, objptr
08874     04 24 06 F1 | 	add	local04, #4
08878     12 27 02 FB | 	rdlong	local05, local04
0887c                 | ' t3.result.uresult=0
0887c                 | ' getvalue()    
0887c                 | ' op = lparts(ct).token
0887c                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0887c     54 00 00 FF 
08880     D0 E4 85 F1 | 	sub	objptr, ##43216
08884                 | LR__0700
08884     05 26 0E F2 | 	cmp	local05, #5 wz
08888     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
0888c     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
08890     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
08894     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
08898     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
0889c     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
088a0     00 01 90 5D |  if_ne	jmp	#LR__0701
088a4     56 00 00 FF 
088a8     08 E5 05 F1 | 	add	objptr, ##44296
088ac     F2 24 02 FB | 	rdlong	local04, objptr
088b0     01 24 06 F1 | 	add	local04, #1
088b4     F2 24 62 FC | 	wrlong	local04, objptr
088b8     56 00 00 FF 
088bc     08 E5 85 F1 | 	sub	objptr, ##44296
088c0     EC 00 B0 FD | 	call	#_getvalue
088c4     13 23 02 F6 | 	mov	local03, local05
088c8     0F 29 02 F6 | 	mov	local06, local01
088cc     10 2B 02 F6 | 	mov	local07, local02
088d0     11 27 02 F6 | 	mov	local05, local03
088d4     69 00 00 FF 
088d8     40 E5 05 F1 | 	add	objptr, ##54080
088dc     F2 24 02 FB | 	rdlong	local04, objptr
088e0     12 2D 02 F6 | 	mov	local08, local04
088e4     01 2C 66 F0 | 	shl	local08, #1
088e8     12 2D 02 F1 | 	add	local08, local04
088ec     02 2C 66 F0 | 	shl	local08, #2
088f0     03 00 00 FF 
088f4     00 E4 85 F1 | 	sub	objptr, ##1536
088f8     F2 2C 02 F1 | 	add	local08, objptr
088fc     16 29 62 FC | 	wrlong	local06, local08
08900     03 00 00 FF 
08904     00 E4 05 F1 | 	add	objptr, ##1536
08908     F2 2C 02 FB | 	rdlong	local08, objptr
0890c     16 29 02 F6 | 	mov	local06, local08
08910     01 28 66 F0 | 	shl	local06, #1
08914     16 29 02 F1 | 	add	local06, local08
08918     02 28 66 F0 | 	shl	local06, #2
0891c     03 00 00 FF 
08920     00 E4 85 F1 | 	sub	objptr, ##1536
08924     F2 28 02 F1 | 	add	local06, objptr
08928     04 28 06 F1 | 	add	local06, #4
0892c     14 2B 62 FC | 	wrlong	local07, local06
08930     03 00 00 FF 
08934     00 E4 05 F1 | 	add	objptr, ##1536
08938     F2 2C 02 FB | 	rdlong	local08, objptr
0893c     16 2B 02 F6 | 	mov	local07, local08
08940     01 2A 66 F0 | 	shl	local07, #1
08944     16 2B 02 F1 | 	add	local07, local08
08948     02 2A 66 F0 | 	shl	local07, #2
0894c     03 00 00 FF 
08950     00 E4 85 F1 | 	sub	objptr, ##1536
08954     F2 2A 02 F1 | 	add	local07, objptr
08958     08 2A 06 F1 | 	add	local07, #8
0895c     15 27 62 FC | 	wrlong	local05, local07
08960     03 00 00 FF 
08964     00 E4 05 F1 | 	add	objptr, ##1536
08968     F2 28 02 FB | 	rdlong	local06, objptr
0896c     01 28 06 F1 | 	add	local06, #1
08970     F2 28 62 FC | 	wrlong	local06, objptr
08974     13 00 00 FF 
08978     38 E4 85 F1 | 	sub	objptr, ##9784
0897c     F2 24 02 FB | 	rdlong	local04, objptr
08980     03 24 66 F0 | 	shl	local04, #3
08984     02 00 00 FF 
08988     38 E4 85 F1 | 	sub	objptr, ##1080
0898c     F2 24 02 F1 | 	add	local04, objptr
08990     04 24 06 F1 | 	add	local04, #4
08994     12 27 02 FB | 	rdlong	local05, local04
08998     54 00 00 FF 
0899c     D0 E4 85 F1 | 	sub	objptr, ##43216
089a0     E0 FE 9F FD | 	jmp	#LR__0700
089a4                 | LR__0701
089a4     A7 F0 03 F6 | 	mov	ptra, fp
089a8     B2 00 A0 FD | 	call	#popregs_
089ac                 | _muldiv_ret
089ac     2D 00 64 FD | 	ret
089b0                 | 
089b0                 | ' 
089b0                 | ' sub getvalue() 
089b0                 | _getvalue
089b0     0B 4A 05 F6 | 	mov	COUNT_, #11
089b4     A8 00 A0 FD | 	call	#pushregs_
089b8                 | _getvalue_enter
089b8     01 24 06 F6 | 	mov	local04, #1
089bc     00 1E 06 F6 | 	mov	local01, #0
089c0     1D 22 06 F6 | 	mov	local03, #29
089c4     56 00 00 FF 
089c8     08 E5 05 F1 | 	add	objptr, ##44296
089cc     F2 16 02 FB | 	rdlong	arg03, objptr
089d0     03 16 66 F0 | 	shl	arg03, #3
089d4     02 00 00 FF 
089d8     38 E4 85 F1 | 	sub	objptr, ##1080
089dc     F2 16 02 F1 | 	add	arg03, objptr
089e0     04 16 06 F1 | 	add	arg03, #4
089e4     0B 27 02 FB | 	rdlong	local05, arg03
089e8                 | ' m=1
089e8                 | ' t1.result.uresult=0: t1.result_type=result_uint
089e8                 | ' op=lparts(ct).token
089e8                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
089e8     02 26 0E F2 | 	cmp	local05, #2 wz
089ec     54 00 00 FF 
089f0     D0 E4 85 F1 | 	sub	objptr, ##43216
089f4     38 00 90 5D |  if_ne	jmp	#LR__0710
089f8     01 24 66 F6 | 	neg	local04, #1
089fc     56 00 00 FF 
08a00     08 E5 05 F1 | 	add	objptr, ##44296
08a04     F2 26 02 FB | 	rdlong	local05, objptr
08a08     01 26 06 F1 | 	add	local05, #1
08a0c     F2 26 62 FC | 	wrlong	local05, objptr
08a10     03 26 66 F0 | 	shl	local05, #3
08a14     02 00 00 FF 
08a18     38 E4 85 F1 | 	sub	objptr, ##1080
08a1c     F2 26 02 F1 | 	add	local05, objptr
08a20     04 26 06 F1 | 	add	local05, #4
08a24     13 27 02 FB | 	rdlong	local05, local05
08a28     54 00 00 FF 
08a2c     D0 E4 85 F1 | 	sub	objptr, ##43216
08a30                 | LR__0710
08a30                 | ' select case op
08a30     01 00 00 FF 
08a34     00 26 0E F2 | 	cmp	local05, ##512 wz
08a38     3C 00 90 AD |  if_e	jmp	#LR__0711
08a3c     01 00 00 FF 
08a40     01 26 0E F2 | 	cmp	local05, ##513 wz
08a44     88 01 90 AD |  if_e	jmp	#LR__0714
08a48     01 00 00 FF 
08a4c     02 26 0E F2 | 	cmp	local05, ##514 wz
08a50     84 02 90 AD |  if_e	jmp	#LR__0715
08a54     01 00 00 FF 
08a58     03 26 0E F2 | 	cmp	local05, ##515 wz
08a5c     E8 03 90 AD |  if_e	jmp	#LR__0718
08a60     01 00 00 FF 
08a64     04 26 0E F2 | 	cmp	local05, ##516 wz
08a68     E0 05 90 AD |  if_e	jmp	#LR__0723
08a6c     15 26 0E F2 | 	cmp	local05, #21 wz
08a70     00 06 90 AD |  if_e	jmp	#LR__0724
08a74     70 06 90 FD | 	jmp	#LR__0725
08a78                 | LR__0711
08a78                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
08a78     01 24 0E F2 | 	cmp	local04, #1 wz
08a7c     3C 00 90 5D |  if_ne	jmp	#LR__0712
08a80     56 00 00 FF 
08a84     08 E5 05 F1 | 	add	objptr, ##44296
08a88     F2 26 02 FB | 	rdlong	local05, objptr
08a8c     03 26 66 F0 | 	shl	local05, #3
08a90     02 00 00 FF 
08a94     38 E4 85 F1 | 	sub	objptr, ##1080
08a98     F2 26 02 F1 | 	add	local05, objptr
08a9c     13 13 02 FB | 	rdlong	arg01, local05
08aa0     00 14 06 F6 | 	mov	arg02, #0
08aa4     54 00 00 FF 
08aa8     D0 E4 85 F1 | 	sub	objptr, ##43216
08aac     50 38 B1 FD | 	call	#__system____builtin_atoi
08ab0     FD 24 02 FD | 	qmul	local04, result1
08ab4     18 1E 62 FD | 	getqx	local01
08ab8     1C 22 06 F6 | 	mov	local03, #28
08abc                 | LR__0712
08abc                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
08abc     FF FF 7F FF 
08ac0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08ac4     3C 00 90 5D |  if_ne	jmp	#LR__0713
08ac8     56 00 00 FF 
08acc     08 E5 05 F1 | 	add	objptr, ##44296
08ad0     F2 26 02 FB | 	rdlong	local05, objptr
08ad4     03 26 66 F0 | 	shl	local05, #3
08ad8     02 00 00 FF 
08adc     38 E4 85 F1 | 	sub	objptr, ##1080
08ae0     F2 26 02 F1 | 	add	local05, objptr
08ae4     13 13 02 FB | 	rdlong	arg01, local05
08ae8     00 14 06 F6 | 	mov	arg02, #0
08aec     54 00 00 FF 
08af0     D0 E4 85 F1 | 	sub	objptr, ##43216
08af4     08 38 B1 FD | 	call	#__system____builtin_atoi
08af8     FD 24 02 FD | 	qmul	local04, result1
08afc     18 1E 62 FD | 	getqx	local01
08b00     1C 22 06 F6 | 	mov	local03, #28
08b04                 | LR__0713
08b04     0F 29 02 F6 | 	mov	local06, local01
08b08     10 2B 02 F6 | 	mov	local07, local02
08b0c     11 27 02 F6 | 	mov	local05, local03
08b10     69 00 00 FF 
08b14     40 E5 05 F1 | 	add	objptr, ##54080
08b18     F2 1E 02 FB | 	rdlong	local01, objptr
08b1c     0F 25 02 F6 | 	mov	local04, local01
08b20     01 24 66 F0 | 	shl	local04, #1
08b24     0F 25 02 F1 | 	add	local04, local01
08b28     02 24 66 F0 | 	shl	local04, #2
08b2c     03 00 00 FF 
08b30     00 E4 85 F1 | 	sub	objptr, ##1536
08b34     F2 24 02 F1 | 	add	local04, objptr
08b38     12 29 62 FC | 	wrlong	local06, local04
08b3c     03 00 00 FF 
08b40     00 E4 05 F1 | 	add	objptr, ##1536
08b44     F2 28 02 FB | 	rdlong	local06, objptr
08b48     14 1F 02 F6 | 	mov	local01, local06
08b4c     01 1E 66 F0 | 	shl	local01, #1
08b50     14 1F 02 F1 | 	add	local01, local06
08b54     02 1E 66 F0 | 	shl	local01, #2
08b58     03 00 00 FF 
08b5c     00 E4 85 F1 | 	sub	objptr, ##1536
08b60     F2 1E 02 F1 | 	add	local01, objptr
08b64     04 1E 06 F1 | 	add	local01, #4
08b68     0F 2B 62 FC | 	wrlong	local07, local01
08b6c     03 00 00 FF 
08b70     00 E4 05 F1 | 	add	objptr, ##1536
08b74     F2 2A 02 FB | 	rdlong	local07, objptr
08b78     15 29 02 F6 | 	mov	local06, local07
08b7c     01 28 66 F0 | 	shl	local06, #1
08b80     15 29 02 F1 | 	add	local06, local07
08b84     02 28 66 F0 | 	shl	local06, #2
08b88     03 00 00 FF 
08b8c     00 E4 85 F1 | 	sub	objptr, ##1536
08b90     F2 28 02 F1 | 	add	local06, objptr
08b94     08 28 06 F1 | 	add	local06, #8
08b98     14 27 62 FC | 	wrlong	local05, local06
08b9c     03 00 00 FF 
08ba0     00 E4 05 F1 | 	add	objptr, ##1536
08ba4     F2 28 02 FB | 	rdlong	local06, objptr
08ba8     01 28 06 F1 | 	add	local06, #1
08bac     F2 28 62 FC | 	wrlong	local06, objptr
08bb0     13 00 00 FF 
08bb4     38 E4 85 F1 | 	sub	objptr, ##9784
08bb8     F2 28 02 FB | 	rdlong	local06, objptr
08bbc     01 28 06 F1 | 	add	local06, #1
08bc0     F2 28 62 FC | 	wrlong	local06, objptr
08bc4     56 00 00 FF 
08bc8     08 E5 85 F1 | 	sub	objptr, ##44296
08bcc     3C 05 90 FD | 	jmp	#LR__0726
08bd0                 | LR__0714
08bd0     56 00 00 FF 
08bd4     08 E5 05 F1 | 	add	objptr, ##44296
08bd8     F2 28 02 FB | 	rdlong	local06, objptr
08bdc     03 28 66 F0 | 	shl	local06, #3
08be0     02 00 00 FF 
08be4     38 E4 85 F1 | 	sub	objptr, ##1080
08be8     F2 28 02 F1 | 	add	local06, objptr
08bec     14 13 02 FB | 	rdlong	arg01, local06
08bf0     00 14 06 F6 | 	mov	arg02, #0
08bf4     54 00 00 FF 
08bf8     D0 E4 85 F1 | 	sub	objptr, ##43216
08bfc     00 37 B1 FD | 	call	#__system____builtin_atoi
08c00     FD 24 02 FD | 	qmul	local04, result1
08c04     69 00 00 FF 
08c08     40 E5 05 F1 | 	add	objptr, ##54080
08c0c     F2 28 02 FB | 	rdlong	local06, objptr
08c10     14 2D 02 F6 | 	mov	local08, local06
08c14     01 2C 66 F0 | 	shl	local08, #1
08c18     14 2D 02 F1 | 	add	local08, local06
08c1c     02 2C 66 F0 | 	shl	local08, #2
08c20     03 00 00 FF 
08c24     00 E4 85 F1 | 	sub	objptr, ##1536
08c28     F2 2C 02 F1 | 	add	local08, objptr
08c2c     03 00 00 FF 
08c30     00 E4 05 F1 | 	add	objptr, ##1536
08c34     18 1E 62 FD | 	getqx	local01
08c38     1C 22 06 F6 | 	mov	local03, #28
08c3c     0F 29 02 F6 | 	mov	local06, local01
08c40     10 2B 02 F6 | 	mov	local07, local02
08c44     16 29 62 FC | 	wrlong	local06, local08
08c48     11 2D 02 F6 | 	mov	local08, local03
08c4c     F2 28 02 FB | 	rdlong	local06, objptr
08c50     14 27 02 F6 | 	mov	local05, local06
08c54     01 26 66 F0 | 	shl	local05, #1
08c58     14 27 02 F1 | 	add	local05, local06
08c5c     02 26 66 F0 | 	shl	local05, #2
08c60     03 00 00 FF 
08c64     00 E4 85 F1 | 	sub	objptr, ##1536
08c68     F2 26 02 F1 | 	add	local05, objptr
08c6c     04 26 06 F1 | 	add	local05, #4
08c70     13 2B 62 FC | 	wrlong	local07, local05
08c74     03 00 00 FF 
08c78     00 E4 05 F1 | 	add	objptr, ##1536
08c7c     F2 2A 02 FB | 	rdlong	local07, objptr
08c80     15 29 02 F6 | 	mov	local06, local07
08c84     01 28 66 F0 | 	shl	local06, #1
08c88     15 29 02 F1 | 	add	local06, local07
08c8c     02 28 66 F0 | 	shl	local06, #2
08c90     03 00 00 FF 
08c94     00 E4 85 F1 | 	sub	objptr, ##1536
08c98     F2 28 02 F1 | 	add	local06, objptr
08c9c     08 28 06 F1 | 	add	local06, #8
08ca0     14 2D 62 FC | 	wrlong	local08, local06
08ca4     03 00 00 FF 
08ca8     00 E4 05 F1 | 	add	objptr, ##1536
08cac     F2 28 02 FB | 	rdlong	local06, objptr
08cb0     01 28 06 F1 | 	add	local06, #1
08cb4     F2 28 62 FC | 	wrlong	local06, objptr
08cb8     13 00 00 FF 
08cbc     38 E4 85 F1 | 	sub	objptr, ##9784
08cc0     F2 28 02 FB | 	rdlong	local06, objptr
08cc4     01 28 06 F1 | 	add	local06, #1
08cc8     F2 28 62 FC | 	wrlong	local06, objptr
08ccc     56 00 00 FF 
08cd0     08 E5 85 F1 | 	sub	objptr, ##44296
08cd4     34 04 90 FD | 	jmp	#LR__0726
08cd8                 | LR__0715
08cd8                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
08cd8     01 24 0E F2 | 	cmp	local04, #1 wz
08cdc     48 00 90 5D |  if_ne	jmp	#LR__0716
08ce0     00 C0 1F FF 
08ce4     00 28 06 F6 | 	mov	local06, ##1065353216
08ce8     56 00 00 FF 
08cec     08 E5 05 F1 | 	add	objptr, ##44296
08cf0     F2 2C 02 FB | 	rdlong	local08, objptr
08cf4     03 2C 66 F0 | 	shl	local08, #3
08cf8     02 00 00 FF 
08cfc     38 E4 85 F1 | 	sub	objptr, ##1080
08d00     F2 2C 02 F1 | 	add	local08, objptr
08d04     16 13 02 FB | 	rdlong	arg01, local08
08d08     54 00 00 FF 
08d0c     D0 E4 85 F1 | 	sub	objptr, ##43216
08d10     5C 37 B1 FD | 	call	#__system____builtin_atof
08d14     FD 14 02 F6 | 	mov	arg02, result1
08d18     14 13 02 F6 | 	mov	arg01, local06
08d1c     68 2F B1 FD | 	call	#__system___float_mul
08d20     FD 1E 02 F6 | 	mov	local01, result1
08d24     1E 22 06 F6 | 	mov	local03, #30
08d28                 | LR__0716
08d28                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
08d28     FF FF 7F FF 
08d2c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08d30     48 00 90 5D |  if_ne	jmp	#LR__0717
08d34     00 C0 5F FF 
08d38     00 28 06 F6 | 	mov	local06, ##-1082130432
08d3c     56 00 00 FF 
08d40     08 E5 05 F1 | 	add	objptr, ##44296
08d44     F2 2C 02 FB | 	rdlong	local08, objptr
08d48     03 2C 66 F0 | 	shl	local08, #3
08d4c     02 00 00 FF 
08d50     38 E4 85 F1 | 	sub	objptr, ##1080
08d54     F2 2C 02 F1 | 	add	local08, objptr
08d58     16 13 02 FB | 	rdlong	arg01, local08
08d5c     54 00 00 FF 
08d60     D0 E4 85 F1 | 	sub	objptr, ##43216
08d64     08 37 B1 FD | 	call	#__system____builtin_atof
08d68     FD 14 02 F6 | 	mov	arg02, result1
08d6c     14 13 02 F6 | 	mov	arg01, local06
08d70     14 2F B1 FD | 	call	#__system___float_mul
08d74     FD 1E 02 F6 | 	mov	local01, result1
08d78     1E 22 06 F6 | 	mov	local03, #30
08d7c                 | LR__0717
08d7c     0F 29 02 F6 | 	mov	local06, local01
08d80     10 2B 02 F6 | 	mov	local07, local02
08d84     11 27 02 F6 | 	mov	local05, local03
08d88     69 00 00 FF 
08d8c     40 E5 05 F1 | 	add	objptr, ##54080
08d90     F2 1E 02 FB | 	rdlong	local01, objptr
08d94     0F 2D 02 F6 | 	mov	local08, local01
08d98     01 2C 66 F0 | 	shl	local08, #1
08d9c     0F 2D 02 F1 | 	add	local08, local01
08da0     02 2C 66 F0 | 	shl	local08, #2
08da4     03 00 00 FF 
08da8     00 E4 85 F1 | 	sub	objptr, ##1536
08dac     F2 2C 02 F1 | 	add	local08, objptr
08db0     16 29 62 FC | 	wrlong	local06, local08
08db4     03 00 00 FF 
08db8     00 E4 05 F1 | 	add	objptr, ##1536
08dbc     F2 2C 02 FB | 	rdlong	local08, objptr
08dc0     16 29 02 F6 | 	mov	local06, local08
08dc4     01 28 66 F0 | 	shl	local06, #1
08dc8     16 29 02 F1 | 	add	local06, local08
08dcc     02 28 66 F0 | 	shl	local06, #2
08dd0     03 00 00 FF 
08dd4     00 E4 85 F1 | 	sub	objptr, ##1536
08dd8     F2 28 02 F1 | 	add	local06, objptr
08ddc     04 28 06 F1 | 	add	local06, #4
08de0     14 2B 62 FC | 	wrlong	local07, local06
08de4     03 00 00 FF 
08de8     00 E4 05 F1 | 	add	objptr, ##1536
08dec     F2 2C 02 FB | 	rdlong	local08, objptr
08df0     16 2B 02 F6 | 	mov	local07, local08
08df4     01 2A 66 F0 | 	shl	local07, #1
08df8     16 2B 02 F1 | 	add	local07, local08
08dfc     02 2A 66 F0 | 	shl	local07, #2
08e00     03 00 00 FF 
08e04     00 E4 85 F1 | 	sub	objptr, ##1536
08e08     F2 2A 02 F1 | 	add	local07, objptr
08e0c     08 2A 06 F1 | 	add	local07, #8
08e10     15 27 62 FC | 	wrlong	local05, local07
08e14     03 00 00 FF 
08e18     00 E4 05 F1 | 	add	objptr, ##1536
08e1c     F2 28 02 FB | 	rdlong	local06, objptr
08e20     01 28 06 F1 | 	add	local06, #1
08e24     F2 28 62 FC | 	wrlong	local06, objptr
08e28     13 00 00 FF 
08e2c     38 E4 85 F1 | 	sub	objptr, ##9784
08e30     F2 28 02 FB | 	rdlong	local06, objptr
08e34     01 28 06 F1 | 	add	local06, #1
08e38     F2 28 62 FC | 	wrlong	local06, objptr
08e3c     56 00 00 FF 
08e40     08 E5 85 F1 | 	sub	objptr, ##44296
08e44     C4 02 90 FD | 	jmp	#LR__0726
08e48                 | LR__0718
08e48     1F 22 06 F6 | 	mov	local03, #31
08e4c     56 00 00 FF 
08e50     08 E5 05 F1 | 	add	objptr, ##44296
08e54     F2 16 02 FB | 	rdlong	arg03, objptr
08e58     03 16 66 F0 | 	shl	arg03, #3
08e5c     02 00 00 FF 
08e60     38 E4 85 F1 | 	sub	objptr, ##1080
08e64     F2 16 02 F1 | 	add	arg03, objptr
08e68     0B 13 02 FB | 	rdlong	arg01, arg03
08e6c     54 00 00 FF 
08e70     D0 E4 85 F1 | 	sub	objptr, ##43216
08e74     09 2F 02 F6 | 	mov	local09, arg01
08e78     97 06 48 FB | 	callpa	#(@LR__0720-@LR__0719)>>2,fcache_load_ptr_
08e7c                 | LR__0719
08e7c     17 FB C9 FA | 	rdbyte	result1, local09 wz
08e80     01 2E 06 51 |  if_ne	add	local09, #1
08e84     F4 FF 9F 5D |  if_ne	jmp	#LR__0719
08e88                 | LR__0720
08e88     09 2F 82 F1 | 	sub	local09, arg01
08e8c     17 FB 01 F6 | 	mov	result1, local09
08e90     7A 00 00 FF 
08e94     78 E5 05 F1 | 	add	objptr, ##62840
08e98     F2 FA 61 FC | 	wrlong	result1, objptr
08e9c     3C E4 85 F1 | 	sub	objptr, #60
08ea0     F2 12 02 FB | 	rdlong	arg01, objptr
08ea4     FD 12 82 F1 | 	sub	arg01, result1
08ea8     04 12 86 F1 | 	sub	arg01, #4
08eac     03 12 26 F5 | 	andn	arg01, #3
08eb0     F2 12 62 FC | 	wrlong	arg01, objptr
08eb4     3C E4 05 F1 | 	add	objptr, #60
08eb8     F2 14 02 FB | 	rdlong	arg02, objptr
08ebc     01 16 06 F6 | 	mov	arg03, #1
08ec0     00 18 06 F6 | 	mov	arg04, #0
08ec4     6F 00 00 FF 
08ec8     B8 E4 85 F1 | 	sub	objptr, ##57016
08ecc                 | '     return fill(addr, pattern, count, listPtr, 4)
08ecc     04 1A 06 F6 | 	mov	arg05, #4
08ed0     B0 F8 B0 FD | 	call	#_psram_spin2_fill
08ed4                 | '     pslpoke memtop,l
08ed4                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08ed4     01 30 06 F6 | 	mov	local10, #1
08ed8     6F 00 00 FF 
08edc     B8 E4 05 F1 | 	add	objptr, ##57016
08ee0     F2 32 02 FB | 	rdlong	local11, objptr
08ee4     7A 00 00 FF 
08ee8     78 E5 85 F1 | 	sub	objptr, ##62840
08eec     01 32 06 F1 | 	add	local11, #1
08ef0                 | LR__0721
08ef0     19 31 52 F2 | 	cmps	local10, local11 wc
08ef4     78 00 90 3D |  if_ae	jmp	#LR__0722
08ef8     7A 00 00 FF 
08efc     3C E5 05 F1 | 	add	objptr, ##62780
08f00     F2 2A 02 FB | 	rdlong	local07, objptr
08f04     03 2A 06 F1 | 	add	local07, #3
08f08     18 2B 02 F1 | 	add	local07, local10
08f0c     24 00 00 FF 
08f10     34 E4 85 F1 | 	sub	objptr, ##18484
08f14     F2 2C 02 FB | 	rdlong	local08, objptr
08f18     03 2C 66 F0 | 	shl	local08, #3
08f1c     02 00 00 FF 
08f20     38 E4 85 F1 | 	sub	objptr, ##1080
08f24     F2 2C 02 F1 | 	add	local08, objptr
08f28     16 13 02 FB | 	rdlong	arg01, local08
08f2c     18 15 02 F6 | 	mov	arg02, local10
08f30     01 16 06 F6 | 	mov	arg03, #1
08f34     54 00 00 FF 
08f38     D0 E4 85 F1 | 	sub	objptr, ##43216
08f3c     84 23 B1 FD | 	call	#__system__Mid_S
08f40     FD 14 C2 FA | 	rdbyte	arg02, result1
08f44     15 13 02 F6 | 	mov	arg01, local07
08f48     01 16 06 F6 | 	mov	arg03, #1
08f4c     00 18 06 F6 | 	mov	arg04, #0
08f50     0B 00 00 FF 
08f54     C0 E4 05 F1 | 	add	objptr, ##5824
08f58                 | '     return fill(addr, pattern, count, listPtr, 1)
08f58     01 1A 06 F6 | 	mov	arg05, #1
08f5c     24 F8 B0 FD | 	call	#_psram_spin2_fill
08f60     0B 00 00 FF 
08f64     C0 E4 85 F1 | 	sub	objptr, ##5824
08f68     01 30 06 F1 | 	add	local10, #1
08f6c     80 FF 9F FD | 	jmp	#LR__0721
08f70                 | LR__0722
08f70     7A 00 00 FF 
08f74     3C E5 05 F1 | 	add	objptr, ##62780
08f78     F2 1E 02 FB | 	rdlong	local01, objptr
08f7c     2B 22 06 F6 | 	mov	local03, #43
08f80     0F 29 02 F6 | 	mov	local06, local01
08f84     10 2B 02 F6 | 	mov	local07, local02
08f88     11 33 02 F6 | 	mov	local11, local03
08f8c     10 00 00 FF 
08f90     FC E5 85 F1 | 	sub	objptr, ##8700
08f94     F2 30 02 FB | 	rdlong	local10, objptr
08f98     18 2D 02 F6 | 	mov	local08, local10
08f9c     01 2C 66 F0 | 	shl	local08, #1
08fa0     18 2D 02 F1 | 	add	local08, local10
08fa4     02 2C 66 F0 | 	shl	local08, #2
08fa8     03 00 00 FF 
08fac     00 E4 85 F1 | 	sub	objptr, ##1536
08fb0     F2 2C 02 F1 | 	add	local08, objptr
08fb4     16 29 62 FC | 	wrlong	local06, local08
08fb8     03 00 00 FF 
08fbc     00 E4 05 F1 | 	add	objptr, ##1536
08fc0     F2 30 02 FB | 	rdlong	local10, objptr
08fc4     18 2D 02 F6 | 	mov	local08, local10
08fc8     01 2C 66 F0 | 	shl	local08, #1
08fcc     18 2D 02 F1 | 	add	local08, local10
08fd0     02 2C 66 F0 | 	shl	local08, #2
08fd4     03 00 00 FF 
08fd8     00 E4 85 F1 | 	sub	objptr, ##1536
08fdc     F2 2C 02 F1 | 	add	local08, objptr
08fe0     04 2C 06 F1 | 	add	local08, #4
08fe4     16 2B 62 FC | 	wrlong	local07, local08
08fe8     03 00 00 FF 
08fec     00 E4 05 F1 | 	add	objptr, ##1536
08ff0     F2 30 02 FB | 	rdlong	local10, objptr
08ff4     18 2D 02 F6 | 	mov	local08, local10
08ff8     01 2C 66 F0 | 	shl	local08, #1
08ffc     18 2D 02 F1 | 	add	local08, local10
09000     02 2C 66 F0 | 	shl	local08, #2
09004     03 00 00 FF 
09008     00 E4 85 F1 | 	sub	objptr, ##1536
0900c     F2 2C 02 F1 | 	add	local08, objptr
09010     08 2C 06 F1 | 	add	local08, #8
09014     16 33 62 FC | 	wrlong	local11, local08
09018     03 00 00 FF 
0901c     00 E4 05 F1 | 	add	objptr, ##1536
09020     F2 28 02 FB | 	rdlong	local06, objptr
09024     01 28 06 F1 | 	add	local06, #1
09028     F2 28 62 FC | 	wrlong	local06, objptr
0902c     13 00 00 FF 
09030     38 E4 85 F1 | 	sub	objptr, ##9784
09034     F2 28 02 FB | 	rdlong	local06, objptr
09038     01 28 06 F1 | 	add	local06, #1
0903c     F2 28 62 FC | 	wrlong	local06, objptr
09040     56 00 00 FF 
09044     08 E5 85 F1 | 	sub	objptr, ##44296
09048     C0 00 90 FD | 	jmp	#LR__0726
0904c                 | LR__0723
0904c     12 13 02 F6 | 	mov	arg01, local04
09050     B8 03 B0 FD | 	call	#_getvar
09054     56 00 00 FF 
09058     08 E5 05 F1 | 	add	objptr, ##44296
0905c     F2 28 02 FB | 	rdlong	local06, objptr
09060     01 28 06 F1 | 	add	local06, #1
09064     F2 28 62 FC | 	wrlong	local06, objptr
09068     56 00 00 FF 
0906c     08 E5 85 F1 | 	sub	objptr, ##44296
09070     98 00 90 FD | 	jmp	#LR__0726
09074                 | LR__0724
09074     56 00 00 FF 
09078     08 E5 05 F1 | 	add	objptr, ##44296
0907c     F2 28 02 FB | 	rdlong	local06, objptr
09080     01 28 06 F1 | 	add	local06, #1
09084     F2 28 62 FC | 	wrlong	local06, objptr
09088     56 00 00 FF 
0908c     08 E5 85 F1 | 	sub	objptr, ##44296
09090     F4 F3 BF FD | 	call	#_expr
09094                 | '     ct+=1
09094                 | '     expr() 
09094                 | '     if lparts(ct).token=token_rpar then ct+=1
09094     56 00 00 FF 
09098     08 E5 05 F1 | 	add	objptr, ##44296
0909c     F2 32 02 FB | 	rdlong	local11, objptr
090a0     03 32 66 F0 | 	shl	local11, #3
090a4     02 00 00 FF 
090a8     38 E4 85 F1 | 	sub	objptr, ##1080
090ac     F2 32 02 F1 | 	add	local11, objptr
090b0     04 32 06 F1 | 	add	local11, #4
090b4     19 33 02 FB | 	rdlong	local11, local11
090b8     14 32 0E F2 | 	cmp	local11, #20 wz
090bc     54 00 00 FF 
090c0     D0 E4 85 F1 | 	sub	objptr, ##43216
090c4     44 00 90 5D |  if_ne	jmp	#LR__0726
090c8     56 00 00 FF 
090cc     08 E5 05 F1 | 	add	objptr, ##44296
090d0     F2 28 02 FB | 	rdlong	local06, objptr
090d4     01 28 06 F1 | 	add	local06, #1
090d8     F2 28 62 FC | 	wrlong	local06, objptr
090dc     56 00 00 FF 
090e0     08 E5 85 F1 | 	sub	objptr, ##44296
090e4     24 00 90 FD | 	jmp	#LR__0726
090e8                 | LR__0725
090e8     12 13 02 F6 | 	mov	arg01, local04
090ec     28 00 B0 FD | 	call	#_getfun
090f0     56 00 00 FF 
090f4     08 E5 05 F1 | 	add	objptr, ##44296
090f8     F2 28 02 FB | 	rdlong	local06, objptr
090fc     01 28 06 F1 | 	add	local06, #1
09100     F2 28 62 FC | 	wrlong	local06, objptr
09104     56 00 00 FF 
09108     08 E5 85 F1 | 	sub	objptr, ##44296
0910c                 | LR__0726
0910c     A7 F0 03 F6 | 	mov	ptra, fp
09110     B2 00 A0 FD | 	call	#popregs_
09114                 | _getvalue_ret
09114     2D 00 64 FD | 	ret
09118                 | 
09118                 | ' 
09118                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
09118                 | _getfun
09118     0A 4A 05 F6 | 	mov	COUNT_, #10
0911c     A8 00 A0 FD | 	call	#pushregs_
09120                 | _getfun_enter
09120     09 25 02 F6 | 	mov	local04, arg01
09124     56 00 00 FF 
09128     08 E5 05 F1 | 	add	objptr, ##44296
0912c     F2 26 02 FB | 	rdlong	local05, objptr
09130     13 29 02 F6 | 	mov	local06, local05
09134     00 2A 06 F6 | 	mov	local07, #0
09138                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
09138                 | ' oldct=ct
09138                 | ' numpar=0
09138                 | '   
09138                 | ' if lparts(ct+1).token=token_lpar then
09138     01 26 06 F1 | 	add	local05, #1
0913c     03 26 66 F0 | 	shl	local05, #3
09140     02 00 00 FF 
09144     38 E4 85 F1 | 	sub	objptr, ##1080
09148     F2 26 02 F1 | 	add	local05, objptr
0914c     04 26 06 F1 | 	add	local05, #4
09150     13 27 02 FB | 	rdlong	local05, local05
09154     15 26 0E F2 | 	cmp	local05, #21 wz
09158     54 00 00 FF 
0915c     D0 E4 85 F1 | 	sub	objptr, ##43216
09160     08 01 90 5D |  if_ne	jmp	#LR__0734
09164     56 00 00 FF 
09168     08 E5 05 F1 | 	add	objptr, ##44296
0916c     F2 2C 02 FB | 	rdlong	local08, objptr
09170     01 2C 06 F1 | 	add	local08, #1
09174     F2 2C 62 FC | 	wrlong	local08, objptr
09178     56 00 00 FF 
0917c     08 E5 85 F1 | 	sub	objptr, ##44296
09180                 | '   ct+=1 											' omit this lpar, this is for expr list
09180                 | '   do
09180                 | LR__0730
09180     56 00 00 FF 
09184     08 E5 05 F1 | 	add	objptr, ##44296
09188     F2 26 02 FB | 	rdlong	local05, objptr
0918c     01 26 06 F1 | 	add	local05, #1
09190     F2 26 62 FC | 	wrlong	local05, objptr
09194                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09194                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09194     03 26 66 F0 | 	shl	local05, #3
09198     02 00 00 FF 
0919c     38 E4 85 F1 | 	sub	objptr, ##1080
091a0     F2 26 02 F1 | 	add	local05, objptr
091a4     04 26 06 F1 | 	add	local05, #4
091a8     13 2D 02 FB | 	rdlong	local08, local05
091ac     15 2C 0E F2 | 	cmp	local08, #21 wz
091b0     54 00 00 FF 
091b4     D0 E4 85 F1 | 	sub	objptr, ##43216
091b8     40 00 90 5D |  if_ne	jmp	#LR__0731
091bc     56 00 00 FF 
091c0     08 E5 05 F1 | 	add	objptr, ##44296
091c4     F2 2C 02 FB | 	rdlong	local08, objptr
091c8     01 2C 06 F1 | 	add	local08, #1
091cc     F2 2C 62 FC | 	wrlong	local08, objptr
091d0     56 00 00 FF 
091d4     08 E5 85 F1 | 	sub	objptr, ##44296
091d8     AC F2 BF FD | 	call	#_expr
091dc     56 00 00 FF 
091e0     08 E5 05 F1 | 	add	objptr, ##44296
091e4     F2 2C 02 FB | 	rdlong	local08, objptr
091e8     01 2C 06 F1 | 	add	local08, #1
091ec     F2 2C 62 FC | 	wrlong	local08, objptr
091f0     56 00 00 FF 
091f4     08 E5 85 F1 | 	sub	objptr, ##44296
091f8     04 00 90 FD | 	jmp	#LR__0732
091fc                 | LR__0731
091fc     88 F2 BF FD | 	call	#_expr
09200                 | LR__0732
09200     01 2A 06 F1 | 	add	local07, #1
09204     56 00 00 FF 
09208     08 E5 05 F1 | 	add	objptr, ##44296
0920c     F2 26 02 FB | 	rdlong	local05, objptr
09210     03 26 66 F0 | 	shl	local05, #3
09214     02 00 00 FF 
09218     38 E4 85 F1 | 	sub	objptr, ##1080
0921c     F2 26 02 F1 | 	add	local05, objptr
09220     04 26 06 F1 | 	add	local05, #4
09224     13 2D 02 FB | 	rdlong	local08, local05
09228     14 2C 0E F2 | 	cmp	local08, #20 wz
0922c     54 00 00 FF 
09230     D0 E4 85 F1 | 	sub	objptr, ##43216
09234     34 00 90 AD |  if_e	jmp	#LR__0733
09238     56 00 00 FF 
0923c     08 E5 05 F1 | 	add	objptr, ##44296
09240     F2 2C 02 FB | 	rdlong	local08, objptr
09244     03 2C 66 F0 | 	shl	local08, #3
09248     02 00 00 FF 
0924c     38 E4 85 F1 | 	sub	objptr, ##1080
09250     F2 2C 02 F1 | 	add	local08, objptr
09254     04 2C 06 F1 | 	add	local08, #4
09258     16 2D 02 FB | 	rdlong	local08, local08
0925c     FE 2D 0E F2 | 	cmp	local08, #510 wz
09260     54 00 00 FF 
09264     D0 E4 85 F1 | 	sub	objptr, ##43216
09268     14 FF 9F 5D |  if_ne	jmp	#LR__0730
0926c                 | LR__0733
0926c                 | LR__0734
0926c     15 1F 02 F6 | 	mov	local01, local07
09270     03 28 66 F0 | 	shl	local06, #3
09274     54 00 00 FF 
09278     D0 E4 05 F1 | 	add	objptr, ##43216
0927c     F2 28 02 F1 | 	add	local06, objptr
09280     04 28 06 F1 | 	add	local06, #4
09284     14 23 02 FB | 	rdlong	local03, local06
09288     0F 2D 02 F6 | 	mov	local08, local01
0928c     10 2B 02 F6 | 	mov	local07, local02
09290     11 29 02 F6 | 	mov	local06, local03
09294     15 00 00 FF 
09298     70 E4 05 F1 | 	add	objptr, ##10864
0929c     F2 26 02 FB | 	rdlong	local05, objptr
092a0     13 13 02 F6 | 	mov	arg01, local05
092a4     01 12 66 F0 | 	shl	arg01, #1
092a8     13 13 02 F1 | 	add	arg01, local05
092ac     02 12 66 F0 | 	shl	arg01, #2
092b0     03 00 00 FF 
092b4     00 E4 85 F1 | 	sub	objptr, ##1536
092b8     F2 12 02 F1 | 	add	arg01, objptr
092bc     09 2D 62 FC | 	wrlong	local08, arg01
092c0     03 00 00 FF 
092c4     00 E4 05 F1 | 	add	objptr, ##1536
092c8     F2 2C 02 FB | 	rdlong	local08, objptr
092cc     16 2F 02 F6 | 	mov	local09, local08
092d0     01 2E 66 F0 | 	shl	local09, #1
092d4     16 2F 02 F1 | 	add	local09, local08
092d8     02 2E 66 F0 | 	shl	local09, #2
092dc     03 00 00 FF 
092e0     00 E4 85 F1 | 	sub	objptr, ##1536
092e4     F2 2E 02 F1 | 	add	local09, objptr
092e8     04 2E 06 F1 | 	add	local09, #4
092ec     17 2B 62 FC | 	wrlong	local07, local09
092f0     03 00 00 FF 
092f4     00 E4 05 F1 | 	add	objptr, ##1536
092f8     F2 2C 02 FB | 	rdlong	local08, objptr
092fc     16 31 02 F6 | 	mov	local10, local08
09300     01 30 66 F0 | 	shl	local10, #1
09304     16 31 02 F1 | 	add	local10, local08
09308     02 30 66 F0 | 	shl	local10, #2
0930c     03 00 00 FF 
09310     00 E4 85 F1 | 	sub	objptr, ##1536
09314     F2 30 02 F1 | 	add	local10, objptr
09318     08 30 06 F1 | 	add	local10, #8
0931c     18 29 62 FC | 	wrlong	local06, local10
09320     03 00 00 FF 
09324     00 E4 05 F1 | 	add	objptr, ##1536
09328     F2 2C 02 FB | 	rdlong	local08, objptr
0932c     01 2C 06 F1 | 	add	local08, #1
09330     F2 2C 62 FC | 	wrlong	local08, objptr
09334     69 00 00 FF 
09338     40 E5 85 F1 | 	sub	objptr, ##54080
0933c                 | ' 
0933c                 | ' t2.result.uresult=numpar
0933c                 | ' 
0933c                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0933c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0933c                 | ' 
0933c                 | '   
0933c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0933c     FF FF 7F FF 
09340     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09344     B8 00 90 5D |  if_ne	jmp	#LR__0735
09348     15 22 06 F6 | 	mov	local03, #21
0934c     0F 2D 02 F6 | 	mov	local08, local01
09350     10 2B 02 F6 | 	mov	local07, local02
09354     11 29 02 F6 | 	mov	local06, local03
09358     69 00 00 FF 
0935c     40 E5 05 F1 | 	add	objptr, ##54080
09360     F2 26 02 FB | 	rdlong	local05, objptr
09364     13 13 02 F6 | 	mov	arg01, local05
09368     01 12 66 F0 | 	shl	arg01, #1
0936c     13 13 02 F1 | 	add	arg01, local05
09370     02 12 66 F0 | 	shl	arg01, #2
09374     03 00 00 FF 
09378     00 E4 85 F1 | 	sub	objptr, ##1536
0937c     F2 12 02 F1 | 	add	arg01, objptr
09380     09 2D 62 FC | 	wrlong	local08, arg01
09384     03 00 00 FF 
09388     00 E4 05 F1 | 	add	objptr, ##1536
0938c     F2 30 02 FB | 	rdlong	local10, objptr
09390     18 2F 02 F6 | 	mov	local09, local10
09394     01 2E 66 F0 | 	shl	local09, #1
09398     18 2F 02 F1 | 	add	local09, local10
0939c     02 2E 66 F0 | 	shl	local09, #2
093a0     03 00 00 FF 
093a4     00 E4 85 F1 | 	sub	objptr, ##1536
093a8     F2 2E 02 F1 | 	add	local09, objptr
093ac     04 2E 06 F1 | 	add	local09, #4
093b0     17 2B 62 FC | 	wrlong	local07, local09
093b4     03 00 00 FF 
093b8     00 E4 05 F1 | 	add	objptr, ##1536
093bc     F2 2E 02 FB | 	rdlong	local09, objptr
093c0     17 31 02 F6 | 	mov	local10, local09
093c4     01 30 66 F0 | 	shl	local10, #1
093c8     17 31 02 F1 | 	add	local10, local09
093cc     02 30 66 F0 | 	shl	local10, #2
093d0     03 00 00 FF 
093d4     00 E4 85 F1 | 	sub	objptr, ##1536
093d8     F2 30 02 F1 | 	add	local10, objptr
093dc     08 30 06 F1 | 	add	local10, #8
093e0     18 29 62 FC | 	wrlong	local06, local10
093e4     03 00 00 FF 
093e8     00 E4 05 F1 | 	add	objptr, ##1536
093ec     F2 2C 02 FB | 	rdlong	local08, objptr
093f0     01 2C 06 F1 | 	add	local08, #1
093f4     F2 2C 62 FC | 	wrlong	local08, objptr
093f8     69 00 00 FF 
093fc     40 E5 85 F1 | 	sub	objptr, ##54080
09400                 | LR__0735
09400     A7 F0 03 F6 | 	mov	ptra, fp
09404     B2 00 A0 FD | 	call	#popregs_
09408                 | _getfun_ret
09408     2D 00 64 FD | 	ret
0940c                 | 
0940c                 | '   
0940c                 | '   
0940c                 | ' sub getvar(m as integer) 
0940c                 | _getvar
0940c     0A 4A 05 F6 | 	mov	COUNT_, #10
09410     A8 00 A0 FD | 	call	#pushregs_
09414                 | _getvar_enter
09414     09 25 02 F6 | 	mov	local04, arg01
09418     56 00 00 FF 
0941c     08 E5 05 F1 | 	add	objptr, ##44296
09420     F2 14 02 FB | 	rdlong	arg02, objptr
09424     03 14 66 F0 | 	shl	arg02, #3
09428     02 00 00 FF 
0942c     38 E4 85 F1 | 	sub	objptr, ##1080
09430     F2 14 02 F1 | 	add	arg02, objptr
09434     0A 27 02 FB | 	rdlong	local05, arg02
09438     13 13 02 F6 | 	mov	arg01, local05
0943c     01 14 06 F6 | 	mov	arg02, #1
09440     54 00 00 FF 
09444     D0 E4 85 F1 | 	sub	objptr, ##43216
09448     E8 1D B1 FD | 	call	#__system__Right_S
0944c     FD 28 02 F6 | 	mov	local06, result1
09450     01 2A 66 F6 | 	neg	local07, #1
09454                 | ' 
09454                 | ' varname$=lparts(ct).part$
09454                 | ' suffix$=right$(varname$,1)
09454                 | ' j=-1
09454                 | ' 
09454                 | ' for i=0 to varnum-1
09454     00 2C 06 F6 | 	mov	local08, #0
09458     54 00 00 FF 
0945c     CC E4 05 F1 | 	add	objptr, ##43212
09460     F2 2E 02 FB | 	rdlong	local09, objptr
09464     54 00 00 FF 
09468     CC E4 85 F1 | 	sub	objptr, ##43212
0946c                 | LR__0740
0946c     17 2D 52 F2 | 	cmps	local08, local09 wc
09470     38 00 90 3D |  if_ae	jmp	#LR__0741
09474                 | '   if variables(i).name=varname$ then j=i : exit
09474     16 15 02 F6 | 	mov	arg02, local08
09478     04 14 66 F0 | 	shl	arg02, #4
0947c     34 00 00 FF 
09480     CC E4 05 F1 | 	add	objptr, ##26828
09484     F2 14 02 F1 | 	add	arg02, objptr
09488     0A 13 02 FB | 	rdlong	arg01, arg02
0948c     13 15 02 F6 | 	mov	arg02, local05
09490     34 00 00 FF 
09494     CC E4 85 F1 | 	sub	objptr, ##26828
09498     28 FD B0 FD | 	call	#__system___string_cmp
0949c     00 FA 0D F2 | 	cmp	result1, #0 wz
094a0     16 2B 02 A6 |  if_e	mov	local07, local08
094a4     01 2C 06 51 |  if_ne	add	local08, #1
094a8     C0 FF 9F 5D |  if_ne	jmp	#LR__0740
094ac                 | LR__0741
094ac                 | ' if  j=-1 andalso varnum<maxvars then   
094ac     FF FF 7F FF 
094b0     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
094b4     A8 00 90 5D |  if_ne	jmp	#LR__0742
094b8     54 00 00 FF 
094bc     CC E4 05 F1 | 	add	objptr, ##43212
094c0     F2 2E 02 FB | 	rdlong	local09, objptr
094c4     54 00 00 FF 
094c8     CC E4 85 F1 | 	sub	objptr, ##43212
094cc     01 00 00 FF 
094d0     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
094d4     88 00 90 3D |  if_ae	jmp	#LR__0742
094d8     54 00 00 FF 
094dc     CC E4 05 F1 | 	add	objptr, ##43212
094e0     F2 2E 02 FB | 	rdlong	local09, objptr
094e4     04 2E 66 F0 | 	shl	local09, #4
094e8     20 00 00 FF 
094ec     00 E4 85 F1 | 	sub	objptr, ##16384
094f0     F2 2E 02 F1 | 	add	local09, objptr
094f4     17 27 62 FC | 	wrlong	local05, local09
094f8     20 00 00 FF 
094fc     00 E4 05 F1 | 	add	objptr, ##16384
09500     F2 2E 02 FB | 	rdlong	local09, objptr
09504     04 2E 66 F0 | 	shl	local09, #4
09508     20 00 00 FF 
0950c     00 E4 85 F1 | 	sub	objptr, ##16384
09510     F2 2E 02 F1 | 	add	local09, objptr
09514     04 2E 06 F1 | 	add	local09, #4
09518     17 01 68 FC | 	wrlong	#0, local09
0951c     20 00 00 FF 
09520     00 E4 05 F1 | 	add	objptr, ##16384
09524     F2 2E 02 FB | 	rdlong	local09, objptr
09528     04 2E 66 F0 | 	shl	local09, #4
0952c     20 00 00 FF 
09530     00 E4 85 F1 | 	sub	objptr, ##16384
09534     F2 2E 02 F1 | 	add	local09, objptr
09538     0C 2E 06 F1 | 	add	local09, #12
0953c     17 39 68 FC | 	wrlong	#28, local09
09540     20 00 00 FF 
09544     00 E4 05 F1 | 	add	objptr, ##16384
09548     F2 2E 02 FB | 	rdlong	local09, objptr
0954c     17 2B 02 F6 | 	mov	local07, local09
09550     01 2E 06 F1 | 	add	local09, #1
09554     F2 2E 62 FC | 	wrlong	local09, objptr
09558     54 00 00 FF 
0955c     CC E4 85 F1 | 	sub	objptr, ##43212
09560                 | LR__0742
09560     00 2E 06 F6 | 	mov	local09, #0
09564                 | ' numpar=0
09564                 | ' ' check if it is an array
09564                 | ' 
09564                 | ' if lparts(ct+1).token=token_lpar then
09564     56 00 00 FF 
09568     08 E5 05 F1 | 	add	objptr, ##44296
0956c     F2 2C 02 FB | 	rdlong	local08, objptr
09570     01 2C 06 F1 | 	add	local08, #1
09574     03 2C 66 F0 | 	shl	local08, #3
09578     02 00 00 FF 
0957c     38 E4 85 F1 | 	sub	objptr, ##1080
09580     F2 2C 02 F1 | 	add	local08, objptr
09584     04 2C 06 F1 | 	add	local08, #4
09588     16 2D 02 FB | 	rdlong	local08, local08
0958c     15 2C 0E F2 | 	cmp	local08, #21 wz
09590     54 00 00 FF 
09594     D0 E4 85 F1 | 	sub	objptr, ##43216
09598     08 01 90 5D |  if_ne	jmp	#LR__0747
0959c     56 00 00 FF 
095a0     08 E5 05 F1 | 	add	objptr, ##44296
095a4     F2 30 02 FB | 	rdlong	local10, objptr
095a8     01 30 06 F1 | 	add	local10, #1
095ac     F2 30 62 FC | 	wrlong	local10, objptr
095b0     56 00 00 FF 
095b4     08 E5 85 F1 | 	sub	objptr, ##44296
095b8                 | '   ct+=1 											' omit this lpar, this is for expr list
095b8                 | '   do
095b8                 | LR__0743
095b8     56 00 00 FF 
095bc     08 E5 05 F1 | 	add	objptr, ##44296
095c0     F2 2C 02 FB | 	rdlong	local08, objptr
095c4     01 2C 06 F1 | 	add	local08, #1
095c8     F2 2C 62 FC | 	wrlong	local08, objptr
095cc                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
095cc                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
095cc     03 2C 66 F0 | 	shl	local08, #3
095d0     02 00 00 FF 
095d4     38 E4 85 F1 | 	sub	objptr, ##1080
095d8     F2 2C 02 F1 | 	add	local08, objptr
095dc     04 2C 06 F1 | 	add	local08, #4
095e0     16 31 02 FB | 	rdlong	local10, local08
095e4     15 30 0E F2 | 	cmp	local10, #21 wz
095e8     54 00 00 FF 
095ec     D0 E4 85 F1 | 	sub	objptr, ##43216
095f0     40 00 90 5D |  if_ne	jmp	#LR__0744
095f4     56 00 00 FF 
095f8     08 E5 05 F1 | 	add	objptr, ##44296
095fc     F2 30 02 FB | 	rdlong	local10, objptr
09600     01 30 06 F1 | 	add	local10, #1
09604     F2 30 62 FC | 	wrlong	local10, objptr
09608     56 00 00 FF 
0960c     08 E5 85 F1 | 	sub	objptr, ##44296
09610     74 EE BF FD | 	call	#_expr
09614     56 00 00 FF 
09618     08 E5 05 F1 | 	add	objptr, ##44296
0961c     F2 30 02 FB | 	rdlong	local10, objptr
09620     01 30 06 F1 | 	add	local10, #1
09624     F2 30 62 FC | 	wrlong	local10, objptr
09628     56 00 00 FF 
0962c     08 E5 85 F1 | 	sub	objptr, ##44296
09630     04 00 90 FD | 	jmp	#LR__0745
09634                 | LR__0744
09634     50 EE BF FD | 	call	#_expr
09638                 | LR__0745
09638     01 2E 06 F1 | 	add	local09, #1
0963c     56 00 00 FF 
09640     08 E5 05 F1 | 	add	objptr, ##44296
09644     F2 2C 02 FB | 	rdlong	local08, objptr
09648     03 2C 66 F0 | 	shl	local08, #3
0964c     02 00 00 FF 
09650     38 E4 85 F1 | 	sub	objptr, ##1080
09654     F2 2C 02 F1 | 	add	local08, objptr
09658     04 2C 06 F1 | 	add	local08, #4
0965c     16 31 02 FB | 	rdlong	local10, local08
09660     14 30 0E F2 | 	cmp	local10, #20 wz
09664     54 00 00 FF 
09668     D0 E4 85 F1 | 	sub	objptr, ##43216
0966c     34 00 90 AD |  if_e	jmp	#LR__0746
09670     56 00 00 FF 
09674     08 E5 05 F1 | 	add	objptr, ##44296
09678     F2 30 02 FB | 	rdlong	local10, objptr
0967c     03 30 66 F0 | 	shl	local10, #3
09680     02 00 00 FF 
09684     38 E4 85 F1 | 	sub	objptr, ##1080
09688     F2 30 02 F1 | 	add	local10, objptr
0968c     04 30 06 F1 | 	add	local10, #4
09690     18 31 02 FB | 	rdlong	local10, local10
09694     FE 31 0E F2 | 	cmp	local10, #510 wz
09698     54 00 00 FF 
0969c     D0 E4 85 F1 | 	sub	objptr, ##43216
096a0     14 FF 9F 5D |  if_ne	jmp	#LR__0743
096a4                 | LR__0746
096a4                 | LR__0747
096a4     17 21 02 F6 | 	mov	local02, local09
096a8     11 22 06 F6 | 	mov	local03, #17
096ac     15 1F 02 F6 | 	mov	local01, local07
096b0     0F 31 02 F6 | 	mov	local10, local01
096b4     10 2F 02 F6 | 	mov	local09, local02
096b8     11 2D 02 F6 | 	mov	local08, local03
096bc     69 00 00 FF 
096c0     40 E5 05 F1 | 	add	objptr, ##54080
096c4     F2 2A 02 FB | 	rdlong	local07, objptr
096c8     15 29 02 F6 | 	mov	local06, local07
096cc     01 28 66 F0 | 	shl	local06, #1
096d0     15 29 02 F1 | 	add	local06, local07
096d4     02 28 66 F0 | 	shl	local06, #2
096d8     03 00 00 FF 
096dc     00 E4 85 F1 | 	sub	objptr, ##1536
096e0     F2 28 02 F1 | 	add	local06, objptr
096e4     14 31 62 FC | 	wrlong	local10, local06
096e8     03 00 00 FF 
096ec     00 E4 05 F1 | 	add	objptr, ##1536
096f0     F2 30 02 FB | 	rdlong	local10, objptr
096f4     18 27 02 F6 | 	mov	local05, local10
096f8     01 26 66 F0 | 	shl	local05, #1
096fc     18 27 02 F1 | 	add	local05, local10
09700     02 26 66 F0 | 	shl	local05, #2
09704     03 00 00 FF 
09708     00 E4 85 F1 | 	sub	objptr, ##1536
0970c     F2 26 02 F1 | 	add	local05, objptr
09710     04 26 06 F1 | 	add	local05, #4
09714     13 2F 62 FC | 	wrlong	local09, local05
09718     03 00 00 FF 
0971c     00 E4 05 F1 | 	add	objptr, ##1536
09720     F2 30 02 FB | 	rdlong	local10, objptr
09724     18 FB 01 F6 | 	mov	result1, local10
09728     01 FA 65 F0 | 	shl	result1, #1
0972c     18 FB 01 F1 | 	add	result1, local10
09730     02 FA 65 F0 | 	shl	result1, #2
09734     03 00 00 FF 
09738     00 E4 85 F1 | 	sub	objptr, ##1536
0973c     F2 FA 01 F1 | 	add	result1, objptr
09740     08 FA 05 F1 | 	add	result1, #8
09744     FD 2C 62 FC | 	wrlong	local08, result1
09748     03 00 00 FF 
0974c     00 E4 05 F1 | 	add	objptr, ##1536
09750     F2 30 02 FB | 	rdlong	local10, objptr
09754     01 30 06 F1 | 	add	local10, #1
09758     F2 30 62 FC | 	wrlong	local10, objptr
0975c     69 00 00 FF 
09760     40 E5 85 F1 | 	sub	objptr, ##54080
09764                 | ' 
09764                 | ' t2.result.twowords(1)=numpar
09764                 | ' 
09764                 | ' 
09764                 | ' 
09764                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
09764                 | ' 
09764                 | ' 
09764                 | '  
09764                 | ' 
09764                 | ' 701 
09764                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09764                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09764     FF FF 7F FF 
09768     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0976c     B8 00 90 5D |  if_ne	jmp	#LR__0748
09770     15 22 06 F6 | 	mov	local03, #21
09774     0F 31 02 F6 | 	mov	local10, local01
09778     10 2F 02 F6 | 	mov	local09, local02
0977c     11 2D 02 F6 | 	mov	local08, local03
09780     69 00 00 FF 
09784     40 E5 05 F1 | 	add	objptr, ##54080
09788     F2 2A 02 FB | 	rdlong	local07, objptr
0978c     15 29 02 F6 | 	mov	local06, local07
09790     01 28 66 F0 | 	shl	local06, #1
09794     15 29 02 F1 | 	add	local06, local07
09798     02 28 66 F0 | 	shl	local06, #2
0979c     03 00 00 FF 
097a0     00 E4 85 F1 | 	sub	objptr, ##1536
097a4     F2 28 02 F1 | 	add	local06, objptr
097a8     14 31 62 FC | 	wrlong	local10, local06
097ac     03 00 00 FF 
097b0     00 E4 05 F1 | 	add	objptr, ##1536
097b4     F2 1E 02 FB | 	rdlong	local01, objptr
097b8     0F 27 02 F6 | 	mov	local05, local01
097bc     01 26 66 F0 | 	shl	local05, #1
097c0     0F 27 02 F1 | 	add	local05, local01
097c4     02 26 66 F0 | 	shl	local05, #2
097c8     03 00 00 FF 
097cc     00 E4 85 F1 | 	sub	objptr, ##1536
097d0     F2 26 02 F1 | 	add	local05, objptr
097d4     04 26 06 F1 | 	add	local05, #4
097d8     13 2F 62 FC | 	wrlong	local09, local05
097dc     03 00 00 FF 
097e0     00 E4 05 F1 | 	add	objptr, ##1536
097e4     F2 1E 02 FB | 	rdlong	local01, objptr
097e8     0F FB 01 F6 | 	mov	result1, local01
097ec     01 FA 65 F0 | 	shl	result1, #1
097f0     0F FB 01 F1 | 	add	result1, local01
097f4     02 FA 65 F0 | 	shl	result1, #2
097f8     03 00 00 FF 
097fc     00 E4 85 F1 | 	sub	objptr, ##1536
09800     F2 FA 01 F1 | 	add	result1, objptr
09804     08 FA 05 F1 | 	add	result1, #8
09808     FD 2C 62 FC | 	wrlong	local08, result1
0980c     03 00 00 FF 
09810     00 E4 05 F1 | 	add	objptr, ##1536
09814     F2 30 02 FB | 	rdlong	local10, objptr
09818     01 30 06 F1 | 	add	local10, #1
0981c     F2 30 62 FC | 	wrlong	local10, objptr
09820     69 00 00 FF 
09824     40 E5 85 F1 | 	sub	objptr, ##54080
09828                 | LR__0748
09828     A7 F0 03 F6 | 	mov	ptra, fp
0982c     B2 00 A0 FD | 	call	#popregs_
09830                 | _getvar_ret
09830     2D 00 64 FD | 	ret
09834                 | 
09834                 | ' 
09834                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09834                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
09834                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09834                 | ' 
09834                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09834                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
09834                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09834                 | ' 
09834                 | ' function execute_line (astart=0 as integer) as integer
09834                 | _execute_line
09834     04 4A 05 F6 | 	mov	COUNT_, #4
09838     A8 00 A0 FD | 	call	#pushregs_
0983c     79 00 00 FF 
09840     78 E4 05 F1 | 	add	objptr, ##62072
09844     F2 00 68 FC | 	wrlong	#0, objptr
09848                 | ' runptr2=0
09848                 | ' for lineptr_e=astart to lineptr-1
09848     0F 00 00 FF 
0984c     34 E5 85 F1 | 	sub	objptr, ##7988
09850     F2 12 62 FC | 	wrlong	arg01, objptr
09854     04 E4 85 F1 | 	sub	objptr, #4
09858     F2 1E 02 FB | 	rdlong	local01, objptr
0985c     69 00 00 FF 
09860     40 E5 85 F1 | 	sub	objptr, ##54080
09864                 | LR__0750
09864     69 00 00 FF 
09868     44 E5 05 F1 | 	add	objptr, ##54084
0986c     F2 FA 01 FB | 	rdlong	result1, objptr
09870     69 00 00 FF 
09874     44 E5 85 F1 | 	sub	objptr, ##54084
09878     0F FB 51 F2 | 	cmps	result1, local01 wc
0987c     98 00 90 3D |  if_ae	jmp	#LR__0751
09880     69 00 00 FF 
09884     44 E5 05 F1 | 	add	objptr, ##54084
09888     F2 FA 01 FB | 	rdlong	result1, objptr
0988c     FD 20 02 F6 | 	mov	local02, result1
09890     01 20 66 F0 | 	shl	local02, #1
09894     FD 20 02 F1 | 	add	local02, result1
09898     02 20 66 F0 | 	shl	local02, #2
0989c     03 00 00 FF 
098a0     04 E4 85 F1 | 	sub	objptr, ##1540
098a4     F2 20 02 F1 | 	add	local02, objptr
098a8     08 20 06 F1 | 	add	local02, #8
098ac     10 21 02 FB | 	rdlong	local02, local02
098b0     10 21 E2 F8 | 	getbyte	local02, local02, #0
098b4     02 20 66 F0 | 	shl	local02, #2
098b8     04 00 00 FF 
098bc     1C E4 85 F1 | 	sub	objptr, ##2076
098c0     F2 20 02 F1 | 	add	local02, objptr
098c4     10 21 02 FB | 	rdlong	local02, local02
098c8     10 23 02 F6 | 	mov	local03, local02
098cc     13 20 46 F7 | 	zerox	local02, #19
098d0     14 22 46 F0 | 	shr	local03, #20
098d4     02 22 66 F0 | 	shl	local03, #2
098d8     ED 22 02 F1 | 	add	local03, __methods__
098dc     11 23 02 FB | 	rdlong	local03, local03
098e0     62 00 00 FF 
098e4     24 E5 85 F1 | 	sub	objptr, ##50468
098e8     F2 24 02 F6 | 	mov	local04, objptr
098ec     10 E5 01 F6 | 	mov	objptr, local02
098f0     2D 22 62 FD | 	call	local03
098f4     12 E5 01 F6 | 	mov	objptr, local04
098f8     69 00 00 FF 
098fc     44 E5 05 F1 | 	add	objptr, ##54084
09900     F2 24 02 FB | 	rdlong	local04, objptr
09904     01 24 06 F1 | 	add	local04, #1
09908     F2 24 62 FC | 	wrlong	local04, objptr
0990c     69 00 00 FF 
09910     44 E5 85 F1 | 	sub	objptr, ##54084
09914     4C FF 9F FD | 	jmp	#LR__0750
09918                 | LR__0751
09918                 | ' return runptr2
09918     79 00 00 FF 
0991c     78 E4 05 F1 | 	add	objptr, ##62072
09920     F2 FA 01 FB | 	rdlong	result1, objptr
09924     79 00 00 FF 
09928     78 E4 85 F1 | 	sub	objptr, ##62072
0992c     A7 F0 03 F6 | 	mov	ptra, fp
09930     B2 00 A0 FD | 	call	#popregs_
09934                 | _execute_line_ret
09934     2D 00 64 FD | 	ret
09938                 | 
09938                 | ' 
09938                 | ' 
09938                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
09938                 | ' 
09938                 | ' function pop() as expr_result
09938                 | _pop
09938                 | ' 
09938                 | ' if stackpointer=0 then
09938     62 00 00 FF 
0993c     1C E5 05 F1 | 	add	objptr, ##50460
09940     F2 FA 09 FB | 	rdlong	result1, objptr wz
09944     62 00 00 FF 
09948     1C E5 85 F1 | 	sub	objptr, ##50460
0994c     FF 04 06 A6 |  if_e	mov	_var03, #255
09950     18 00 06 A6 |  if_e	mov	_var01, #24
09954     68 00 90 AD |  if_e	jmp	#LR__0760
09958     62 00 00 FF 
0995c     1C E5 05 F1 | 	add	objptr, ##50460
09960     F2 FA 01 FB | 	rdlong	result1, objptr
09964     01 FA 85 F1 | 	sub	result1, #1
09968     F2 FA 61 FC | 	wrlong	result1, objptr
0996c     FD FE 01 F6 | 	mov	result3, result1
09970     01 FE 65 F0 | 	shl	result3, #1
09974     FD FE 01 F1 | 	add	result3, result1
09978     02 FE 65 F0 | 	shl	result3, #2
0997c     0C 00 00 FF 
09980     0C E4 85 F1 | 	sub	objptr, ##6156
09984     F2 FE 01 F1 | 	add	result3, objptr
09988     FF 00 02 FB | 	rdlong	_var01, result3
0998c     04 FE 05 F1 | 	add	result3, #4
09990     FF FE 01 FB | 	rdlong	result3, result3
09994     FD FC 01 F6 | 	mov	result2, result1
09998     01 FC 65 F0 | 	shl	result2, #1
0999c     FD FC 01 F1 | 	add	result2, result1
099a0     02 FC 65 F0 | 	shl	result2, #2
099a4     F2 FC 01 F1 | 	add	result2, objptr
099a8     08 FC 05 F1 | 	add	result2, #8
099ac     FE FA 01 FB | 	rdlong	result1, result2
099b0     FF 02 02 F6 | 	mov	_var02, result3
099b4     FD 04 02 F6 | 	mov	_var03, result1
099b8     56 00 00 FF 
099bc     10 E5 85 F1 | 	sub	objptr, ##44304
099c0                 | LR__0760
099c0                 | ' return t1
099c0     01 FD 01 F6 | 	mov	result2, _var02
099c4     02 FF 01 F6 | 	mov	result3, _var03
099c8     00 FB 01 F6 | 	mov	result1, _var01
099cc                 | _pop_ret
099cc     2D 00 64 FD | 	ret
099d0                 | 
099d0                 | ' 
099d0                 | ' sub push(t1 as expr_result )
099d0                 | _push
099d0                 | ' 
099d0                 | ' 'print "In push: "; t1.result_type
099d0                 | ' 'print "In push: "; t1.result.uresult
099d0                 | ' 
099d0                 | ' if stackpointer<maxstack then 
099d0     62 00 00 FF 
099d4     1C E5 05 F1 | 	add	objptr, ##50460
099d8     F2 00 02 FB | 	rdlong	_var01, objptr
099dc     62 00 00 FF 
099e0     1C E5 85 F1 | 	sub	objptr, ##50460
099e4     01 00 00 FF 
099e8     00 00 56 F2 | 	cmps	_var01, ##512 wc
099ec     BC 00 90 3D |  if_ae	jmp	#LR__0770
099f0     09 01 02 FB | 	rdlong	_var01, arg01
099f4     04 12 06 F1 | 	add	arg01, #4
099f8     09 03 02 FB | 	rdlong	_var02, arg01
099fc     04 12 06 F1 | 	add	arg01, #4
09a00     09 13 02 FB | 	rdlong	arg01, arg01
09a04     62 00 00 FF 
09a08     1C E5 05 F1 | 	add	objptr, ##50460
09a0c     F2 04 02 FB | 	rdlong	_var03, objptr
09a10     02 07 02 F6 | 	mov	_var04, _var03
09a14     01 06 66 F0 | 	shl	_var04, #1
09a18     02 07 02 F1 | 	add	_var04, _var03
09a1c     02 06 66 F0 | 	shl	_var04, #2
09a20     0C 00 00 FF 
09a24     0C E4 85 F1 | 	sub	objptr, ##6156
09a28     F2 06 02 F1 | 	add	_var04, objptr
09a2c     03 01 62 FC | 	wrlong	_var01, _var04
09a30     0C 00 00 FF 
09a34     0C E4 05 F1 | 	add	objptr, ##6156
09a38     F2 06 02 FB | 	rdlong	_var04, objptr
09a3c     03 05 02 F6 | 	mov	_var03, _var04
09a40     01 04 66 F0 | 	shl	_var03, #1
09a44     03 05 02 F1 | 	add	_var03, _var04
09a48     02 04 66 F0 | 	shl	_var03, #2
09a4c     0C 00 00 FF 
09a50     0C E4 85 F1 | 	sub	objptr, ##6156
09a54     F2 04 02 F1 | 	add	_var03, objptr
09a58     04 04 06 F1 | 	add	_var03, #4
09a5c     02 03 62 FC | 	wrlong	_var02, _var03
09a60     0C 00 00 FF 
09a64     0C E4 05 F1 | 	add	objptr, ##6156
09a68     F2 06 02 FB | 	rdlong	_var04, objptr
09a6c     03 05 02 F6 | 	mov	_var03, _var04
09a70     01 04 66 F0 | 	shl	_var03, #1
09a74     03 05 02 F1 | 	add	_var03, _var04
09a78     02 04 66 F0 | 	shl	_var03, #2
09a7c     0C 00 00 FF 
09a80     0C E4 85 F1 | 	sub	objptr, ##6156
09a84     F2 04 02 F1 | 	add	_var03, objptr
09a88     08 04 06 F1 | 	add	_var03, #8
09a8c     02 13 62 FC | 	wrlong	arg01, _var03
09a90     0C 00 00 FF 
09a94     0C E4 05 F1 | 	add	objptr, ##6156
09a98     F2 00 02 FB | 	rdlong	_var01, objptr
09a9c     01 00 06 F1 | 	add	_var01, #1
09aa0     F2 00 62 FC | 	wrlong	_var01, objptr
09aa4     62 00 00 FF 
09aa8     1C E5 85 F1 | 	sub	objptr, ##50460
09aac                 | LR__0770
09aac                 | _push_ret
09aac     2D 00 64 FD | 	ret
09ab0                 | 
09ab0                 | ' 
09ab0                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
09ab0                 | ' 
09ab0                 | ' sub do_push
09ab0                 | _do_push
09ab0                 | ' if stackpointer<maxstack then 
09ab0     62 00 00 FF 
09ab4     1C E5 05 F1 | 	add	objptr, ##50460
09ab8     F2 00 02 FB | 	rdlong	_var01, objptr
09abc     62 00 00 FF 
09ac0     1C E5 85 F1 | 	sub	objptr, ##50460
09ac4     01 00 00 FF 
09ac8     00 00 56 F2 | 	cmps	_var01, ##512 wc
09acc     F8 00 90 3D |  if_ae	jmp	#LR__0780
09ad0     69 00 00 FF 
09ad4     44 E5 05 F1 | 	add	objptr, ##54084
09ad8     F2 02 02 FB | 	rdlong	_var02, objptr
09adc     01 05 02 F6 | 	mov	_var03, _var02
09ae0     01 04 66 F0 | 	shl	_var03, #1
09ae4     01 05 02 F1 | 	add	_var03, _var02
09ae8     02 04 66 F0 | 	shl	_var03, #2
09aec     03 00 00 FF 
09af0     04 E4 85 F1 | 	sub	objptr, ##1540
09af4     F2 04 02 F1 | 	add	_var03, objptr
09af8     02 01 02 FB | 	rdlong	_var01, _var03
09afc     04 04 06 F1 | 	add	_var03, #4
09b00     02 07 02 FB | 	rdlong	_var04, _var03
09b04     01 05 02 F6 | 	mov	_var03, _var02
09b08     01 04 66 F0 | 	shl	_var03, #1
09b0c     01 05 02 F1 | 	add	_var03, _var02
09b10     02 04 66 F0 | 	shl	_var03, #2
09b14     F2 04 02 F1 | 	add	_var03, objptr
09b18     08 04 06 F1 | 	add	_var03, #8
09b1c     02 03 02 FB | 	rdlong	_var02, _var03
09b20     04 00 00 FF 
09b24     24 E4 85 F1 | 	sub	objptr, ##2084
09b28     F2 04 02 FB | 	rdlong	_var03, objptr
09b2c     02 09 02 F6 | 	mov	_var05, _var03
09b30     01 08 66 F0 | 	shl	_var05, #1
09b34     02 09 02 F1 | 	add	_var05, _var03
09b38     02 08 66 F0 | 	shl	_var05, #2
09b3c     0C 00 00 FF 
09b40     0C E4 85 F1 | 	sub	objptr, ##6156
09b44     F2 08 02 F1 | 	add	_var05, objptr
09b48     04 01 62 FC | 	wrlong	_var01, _var05
09b4c     0C 00 00 FF 
09b50     0C E4 05 F1 | 	add	objptr, ##6156
09b54     F2 08 02 FB | 	rdlong	_var05, objptr
09b58     04 05 02 F6 | 	mov	_var03, _var05
09b5c     01 04 66 F0 | 	shl	_var03, #1
09b60     04 05 02 F1 | 	add	_var03, _var05
09b64     02 04 66 F0 | 	shl	_var03, #2
09b68     0C 00 00 FF 
09b6c     0C E4 85 F1 | 	sub	objptr, ##6156
09b70     F2 04 02 F1 | 	add	_var03, objptr
09b74     04 04 06 F1 | 	add	_var03, #4
09b78     02 07 62 FC | 	wrlong	_var04, _var03
09b7c     0C 00 00 FF 
09b80     0C E4 05 F1 | 	add	objptr, ##6156
09b84     F2 08 02 FB | 	rdlong	_var05, objptr
09b88     04 07 02 F6 | 	mov	_var04, _var05
09b8c     01 06 66 F0 | 	shl	_var04, #1
09b90     04 07 02 F1 | 	add	_var04, _var05
09b94     02 06 66 F0 | 	shl	_var04, #2
09b98     0C 00 00 FF 
09b9c     0C E4 85 F1 | 	sub	objptr, ##6156
09ba0     F2 06 02 F1 | 	add	_var04, objptr
09ba4     08 06 06 F1 | 	add	_var04, #8
09ba8     03 03 62 FC | 	wrlong	_var02, _var04
09bac     0C 00 00 FF 
09bb0     0C E4 05 F1 | 	add	objptr, ##6156
09bb4     F2 00 02 FB | 	rdlong	_var01, objptr
09bb8     01 00 06 F1 | 	add	_var01, #1
09bbc     F2 00 62 FC | 	wrlong	_var01, objptr
09bc0     62 00 00 FF 
09bc4     1C E5 85 F1 | 	sub	objptr, ##50460
09bc8                 | LR__0780
09bc8                 | _do_push_ret
09bc8     2D 00 64 FD | 	ret
09bcc                 | 
09bcc                 | ' 
09bcc                 | '   
09bcc                 | ' sub csave_block(address as ulong)
09bcc                 | _csave_block
09bcc     09 01 02 F6 | 	mov	_var01, arg01
09bd0                 | ' 
09bd0                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
09bd0                 | ' ' we enter it at the state of playing 1 kHz header tone
09bd0                 | ' 
09bd0                 | ' for i=0 to 63 step 2
09bd0     00 02 06 F6 | 	mov	_var02, #0
09bd4                 | LR__0790
09bd4                 | '   do: loop until lpeek(base+32*7)>32768
09bd4     56 00 00 FF 
09bd8     D4 E4 05 F1 | 	add	objptr, ##44244
09bdc     97 0C 48 FB | 	callpa	#(@LR__0792-@LR__0791)>>2,fcache_load_ptr_
09be0                 | LR__0791
09be0     F2 12 02 FB | 	rdlong	arg01, objptr
09be4     E0 12 06 F1 | 	add	arg01, #224
09be8     09 FB 01 FB | 	rdlong	result1, arg01
09bec     40 00 00 FF 
09bf0     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09bf4     E8 FF 9F CD |  if_b	jmp	#LR__0791
09bf8                 | LR__0792
09bf8     00 13 02 F6 | 	mov	arg01, _var01
09bfc     01 05 02 F6 | 	mov	_var03, _var02
09c00     02 04 66 F0 | 	shl	_var03, #2
09c04     02 13 02 F1 | 	add	arg01, _var03
09c08     09 07 02 FB | 	rdlong	_var04, arg01
09c0c     24 00 00 FF 
09c10     C4 E4 05 F1 | 	add	objptr, ##18628
09c14     F2 06 62 FC | 	wrlong	_var04, objptr
09c18     7A 00 00 FF 
09c1c     98 E5 85 F1 | 	sub	objptr, ##62872
09c20                 | '   q=lpeek(address+4*i)
09c20                 | '      for bit=0 to 31
09c20     00 08 06 F6 | 	mov	_var05, #0
09c24     97 84 48 FB | 	callpa	#(@LR__0797-@LR__0793)>>2,fcache_load_ptr_
09c28                 | LR__0793
09c28                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
09c28     7A 00 00 FF 
09c2c     98 E5 05 F1 | 	add	objptr, ##62872
09c30     F2 06 02 FB | 	rdlong	_var04, objptr
09c34     7A 00 00 FF 
09c38     98 E5 85 F1 | 	sub	objptr, ##62872
09c3c     04 05 C2 F9 | 	decod	_var03, _var05
09c40     02 07 CA F7 | 	test	_var04, _var03 wz
09c44     60 00 90 AD |  if_e	jmp	#LR__0794
09c48     04 05 02 F6 | 	mov	_var03, _var05
09c4c     02 04 66 F0 | 	shl	_var03, #2
09c50     76 00 00 FF 
09c54     70 E5 05 F1 | 	add	objptr, ##60784
09c58     F2 04 02 F1 | 	add	_var03, objptr
09c5c     02 FF 48 FC | 	wrbyte	#127, _var03
09c60     04 05 02 F6 | 	mov	_var03, _var05
09c64     02 04 66 F0 | 	shl	_var03, #2
09c68     01 04 06 F1 | 	add	_var03, #1
09c6c     F2 04 02 F1 | 	add	_var03, objptr
09c70     02 01 49 FC | 	wrbyte	#128, _var03
09c74     04 05 02 F6 | 	mov	_var03, _var05
09c78     02 04 66 F0 | 	shl	_var03, #2
09c7c     02 04 06 F1 | 	add	_var03, #2
09c80     F2 04 02 F1 | 	add	_var03, objptr
09c84     02 FF 48 FC | 	wrbyte	#127, _var03
09c88     04 05 02 F6 | 	mov	_var03, _var05
09c8c     02 04 66 F0 | 	shl	_var03, #2
09c90     03 04 06 F1 | 	add	_var03, #3
09c94     F2 04 02 F1 | 	add	_var03, objptr
09c98     02 01 49 FC | 	wrbyte	#128, _var03
09c9c     76 00 00 FF 
09ca0     70 E5 85 F1 | 	sub	objptr, ##60784
09ca4     5C 00 90 FD | 	jmp	#LR__0795
09ca8                 | LR__0794
09ca8     04 05 02 F6 | 	mov	_var03, _var05
09cac     02 04 66 F0 | 	shl	_var03, #2
09cb0     76 00 00 FF 
09cb4     70 E5 05 F1 | 	add	objptr, ##60784
09cb8     F2 04 02 F1 | 	add	_var03, objptr
09cbc     02 01 49 FC | 	wrbyte	#128, _var03
09cc0     04 05 02 F6 | 	mov	_var03, _var05
09cc4     02 04 66 F0 | 	shl	_var03, #2
09cc8     01 04 06 F1 | 	add	_var03, #1
09ccc     F2 04 02 F1 | 	add	_var03, objptr
09cd0     02 01 49 FC | 	wrbyte	#128, _var03
09cd4     04 05 02 F6 | 	mov	_var03, _var05
09cd8     02 04 66 F0 | 	shl	_var03, #2
09cdc     02 04 06 F1 | 	add	_var03, #2
09ce0     F2 04 02 F1 | 	add	_var03, objptr
09ce4     02 FF 48 FC | 	wrbyte	#127, _var03
09ce8     04 05 02 F6 | 	mov	_var03, _var05
09cec     02 04 66 F0 | 	shl	_var03, #2
09cf0     03 04 06 F1 | 	add	_var03, #3
09cf4     F2 04 02 F1 | 	add	_var03, objptr
09cf8     02 FF 48 FC | 	wrbyte	#127, _var03
09cfc     76 00 00 FF 
09d00     70 E5 85 F1 | 	sub	objptr, ##60784
09d04                 | LR__0795
09d04     01 08 06 F1 | 	add	_var05, #1
09d08     20 08 56 F2 | 	cmps	_var05, #32 wc
09d0c     18 FF 9F CD |  if_b	jmp	#LR__0793
09d10                 | '   do: loop until lpeek(base+32*7)<32768
09d10     56 00 00 FF 
09d14     D4 E4 05 F1 | 	add	objptr, ##44244
09d18                 | LR__0796
09d18     F2 12 02 FB | 	rdlong	arg01, objptr
09d1c     E0 12 06 F1 | 	add	arg01, #224
09d20     09 FB 01 FB | 	rdlong	result1, arg01
09d24     40 00 00 FF 
09d28     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09d2c     E8 FF 9F 3D |  if_ae	jmp	#LR__0796
09d30                 | LR__0797
09d30     00 13 02 F6 | 	mov	arg01, _var01
09d34     04 12 06 F1 | 	add	arg01, #4
09d38     01 05 02 F6 | 	mov	_var03, _var02
09d3c     02 04 66 F0 | 	shl	_var03, #2
09d40     02 13 02 F1 | 	add	arg01, _var03
09d44     09 07 02 FB | 	rdlong	_var04, arg01
09d48     24 00 00 FF 
09d4c     C4 E4 05 F1 | 	add	objptr, ##18628
09d50     F2 06 62 FC | 	wrlong	_var04, objptr
09d54     7A 00 00 FF 
09d58     98 E5 85 F1 | 	sub	objptr, ##62872
09d5c                 | '   q=lpeek(address+4+4*i)
09d5c                 | '      for bit=0 to 31
09d5c     00 08 06 F6 | 	mov	_var05, #0
09d60     97 94 48 FB | 	callpa	#(@LR__0801-@LR__0798)>>2,fcache_load_ptr_
09d64                 | LR__0798
09d64                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
09d64     7A 00 00 FF 
09d68     98 E5 05 F1 | 	add	objptr, ##62872
09d6c     F2 06 02 FB | 	rdlong	_var04, objptr
09d70     7A 00 00 FF 
09d74     98 E5 85 F1 | 	sub	objptr, ##62872
09d78     04 05 C2 F9 | 	decod	_var03, _var05
09d7c     02 07 CA F7 | 	test	_var04, _var03 wz
09d80     80 00 90 AD |  if_e	jmp	#LR__0799
09d84     04 0B 02 F6 | 	mov	_var06, _var05
09d88     02 0A 66 F0 | 	shl	_var06, #2
09d8c     80 04 06 F6 | 	mov	_var03, #128
09d90     05 05 02 F1 | 	add	_var03, _var06
09d94     76 00 00 FF 
09d98     70 E5 05 F1 | 	add	objptr, ##60784
09d9c     F2 04 02 F1 | 	add	_var03, objptr
09da0     02 FF 48 FC | 	wrbyte	#127, _var03
09da4     04 0B 02 F6 | 	mov	_var06, _var05
09da8     02 0A 66 F0 | 	shl	_var06, #2
09dac     80 04 06 F6 | 	mov	_var03, #128
09db0     05 05 02 F1 | 	add	_var03, _var06
09db4     01 04 06 F1 | 	add	_var03, #1
09db8     F2 04 02 F1 | 	add	_var03, objptr
09dbc     02 01 49 FC | 	wrbyte	#128, _var03
09dc0     04 0B 02 F6 | 	mov	_var06, _var05
09dc4     02 0A 66 F0 | 	shl	_var06, #2
09dc8     80 04 06 F6 | 	mov	_var03, #128
09dcc     05 05 02 F1 | 	add	_var03, _var06
09dd0     02 04 06 F1 | 	add	_var03, #2
09dd4     F2 04 02 F1 | 	add	_var03, objptr
09dd8     02 FF 48 FC | 	wrbyte	#127, _var03
09ddc     04 0B 02 F6 | 	mov	_var06, _var05
09de0     02 0A 66 F0 | 	shl	_var06, #2
09de4     80 04 06 F6 | 	mov	_var03, #128
09de8     05 05 02 F1 | 	add	_var03, _var06
09dec     03 04 06 F1 | 	add	_var03, #3
09df0     F2 04 02 F1 | 	add	_var03, objptr
09df4     02 01 49 FC | 	wrbyte	#128, _var03
09df8     76 00 00 FF 
09dfc     70 E5 85 F1 | 	sub	objptr, ##60784
09e00     7C 00 90 FD | 	jmp	#LR__0800
09e04                 | LR__0799
09e04     04 0B 02 F6 | 	mov	_var06, _var05
09e08     02 0A 66 F0 | 	shl	_var06, #2
09e0c     80 04 06 F6 | 	mov	_var03, #128
09e10     05 05 02 F1 | 	add	_var03, _var06
09e14     76 00 00 FF 
09e18     70 E5 05 F1 | 	add	objptr, ##60784
09e1c     F2 04 02 F1 | 	add	_var03, objptr
09e20     02 01 49 FC | 	wrbyte	#128, _var03
09e24     04 0B 02 F6 | 	mov	_var06, _var05
09e28     02 0A 66 F0 | 	shl	_var06, #2
09e2c     80 04 06 F6 | 	mov	_var03, #128
09e30     05 05 02 F1 | 	add	_var03, _var06
09e34     01 04 06 F1 | 	add	_var03, #1
09e38     F2 04 02 F1 | 	add	_var03, objptr
09e3c     02 01 49 FC | 	wrbyte	#128, _var03
09e40     04 0B 02 F6 | 	mov	_var06, _var05
09e44     02 0A 66 F0 | 	shl	_var06, #2
09e48     80 04 06 F6 | 	mov	_var03, #128
09e4c     05 05 02 F1 | 	add	_var03, _var06
09e50     02 04 06 F1 | 	add	_var03, #2
09e54     F2 04 02 F1 | 	add	_var03, objptr
09e58     02 FF 48 FC | 	wrbyte	#127, _var03
09e5c     04 0B 02 F6 | 	mov	_var06, _var05
09e60     02 0A 66 F0 | 	shl	_var06, #2
09e64     80 04 06 F6 | 	mov	_var03, #128
09e68     05 05 02 F1 | 	add	_var03, _var06
09e6c     03 04 06 F1 | 	add	_var03, #3
09e70     F2 04 02 F1 | 	add	_var03, objptr
09e74     02 FF 48 FC | 	wrbyte	#127, _var03
09e78     76 00 00 FF 
09e7c     70 E5 85 F1 | 	sub	objptr, ##60784
09e80                 | LR__0800
09e80     01 08 06 F1 | 	add	_var05, #1
09e84     20 08 56 F2 | 	cmps	_var05, #32 wc
09e88     D8 FE 9F CD |  if_b	jmp	#LR__0798
09e8c                 | LR__0801
09e8c     02 02 06 F1 | 	add	_var02, #2
09e90     40 02 56 F2 | 	cmps	_var02, #64 wc
09e94     3C FD 9F CD |  if_b	jmp	#LR__0790
09e98                 | ' do: loop until lpeek(base+32*7)>32768
09e98     56 00 00 FF 
09e9c     D4 E4 05 F1 | 	add	objptr, ##44244
09ea0     97 84 48 FB | 	callpa	#(@LR__0810-@LR__0802)>>2,fcache_load_ptr_
09ea4                 | LR__0802
09ea4     F2 12 02 FB | 	rdlong	arg01, objptr
09ea8     E0 12 06 F1 | 	add	arg01, #224
09eac     09 FB 01 FB | 	rdlong	result1, arg01
09eb0     40 00 00 FF 
09eb4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09eb8     E8 FF 9F CD |  if_b	jmp	#LR__0802
09ebc     56 00 00 FF 
09ec0     D4 E4 85 F1 | 	sub	objptr, ##44244
09ec4                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09ec4     00 02 06 F6 | 	mov	_var02, #0
09ec8                 | LR__0803
09ec8     01 07 52 F6 | 	abs	_var04, _var02 wc
09ecc     07 06 06 F5 | 	and	_var04, #7
09ed0     03 07 82 F6 | 	negc	_var04, _var04
09ed4     04 06 56 F2 | 	cmps	_var04, #4 wc
09ed8     20 00 90 3D |  if_ae	jmp	#LR__0804
09edc     01 0B 02 F6 | 	mov	_var06, _var02
09ee0     76 00 00 FF 
09ee4     70 E5 05 F1 | 	add	objptr, ##60784
09ee8     F2 0A 02 F1 | 	add	_var06, objptr
09eec     05 FF 48 FC | 	wrbyte	#127, _var06
09ef0     76 00 00 FF 
09ef4     70 E5 85 F1 | 	sub	objptr, ##60784
09ef8     1C 00 90 FD | 	jmp	#LR__0805
09efc                 | LR__0804
09efc     01 0B 02 F6 | 	mov	_var06, _var02
09f00     76 00 00 FF 
09f04     70 E5 05 F1 | 	add	objptr, ##60784
09f08     F2 0A 02 F1 | 	add	_var06, objptr
09f0c     05 01 49 FC | 	wrbyte	#128, _var06
09f10     76 00 00 FF 
09f14     70 E5 85 F1 | 	sub	objptr, ##60784
09f18                 | LR__0805
09f18     01 02 06 F1 | 	add	_var02, #1
09f1c     80 02 56 F2 | 	cmps	_var02, #128 wc
09f20     A4 FF 9F CD |  if_b	jmp	#LR__0803
09f24                 | ' 
09f24                 | ' do: loop until lpeek(base+32*7)<32768
09f24     56 00 00 FF 
09f28     D4 E4 05 F1 | 	add	objptr, ##44244
09f2c                 | LR__0806
09f2c     F2 12 02 FB | 	rdlong	arg01, objptr
09f30     E0 12 06 F1 | 	add	arg01, #224
09f34     09 FB 01 FB | 	rdlong	result1, arg01
09f38     40 00 00 FF 
09f3c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09f40     E8 FF 9F 3D |  if_ae	jmp	#LR__0806
09f44     56 00 00 FF 
09f48     D4 E4 85 F1 | 	sub	objptr, ##44244
09f4c                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09f4c     80 02 06 F6 | 	mov	_var02, #128
09f50                 | LR__0807
09f50     01 07 52 F6 | 	abs	_var04, _var02 wc
09f54     07 06 06 F5 | 	and	_var04, #7
09f58     03 07 82 F6 | 	negc	_var04, _var04
09f5c     04 06 56 F2 | 	cmps	_var04, #4 wc
09f60     20 00 90 3D |  if_ae	jmp	#LR__0808
09f64     01 0B 02 F6 | 	mov	_var06, _var02
09f68     76 00 00 FF 
09f6c     70 E5 05 F1 | 	add	objptr, ##60784
09f70     F2 0A 02 F1 | 	add	_var06, objptr
09f74     05 FF 48 FC | 	wrbyte	#127, _var06
09f78     76 00 00 FF 
09f7c     70 E5 85 F1 | 	sub	objptr, ##60784
09f80     1C 00 90 FD | 	jmp	#LR__0809
09f84                 | LR__0808
09f84     01 0B 02 F6 | 	mov	_var06, _var02
09f88     76 00 00 FF 
09f8c     70 E5 05 F1 | 	add	objptr, ##60784
09f90     F2 0A 02 F1 | 	add	_var06, objptr
09f94     05 01 49 FC | 	wrbyte	#128, _var06
09f98     76 00 00 FF 
09f9c     70 E5 85 F1 | 	sub	objptr, ##60784
09fa0                 | LR__0809
09fa0     01 02 06 F1 | 	add	_var02, #1
09fa4     00 03 16 F2 | 	cmp	_var02, #256 wc
09fa8     A4 FF 9F CD |  if_b	jmp	#LR__0807
09fac                 | LR__0810
09fac                 | _csave_block_ret
09fac     2D 00 64 FD | 	ret
09fb0                 | 
09fb0                 | ' 
09fb0                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
09fb0                 | _csave_addtoblock
09fb0     04 4A 05 F6 | 	mov	COUNT_, #4
09fb4     A8 00 A0 FD | 	call	#pushregs_
09fb8     09 1F 02 F6 | 	mov	local01, arg01
09fbc                 | ' 
09fbc                 | ' 
09fbc                 | ' if force=0 then
09fbc     07 14 4E F7 | 	zerox	arg02, #7 wz
09fc0     78 00 90 5D |  if_ne	jmp	#LR__0820
09fc4     79 00 00 FF 
09fc8     70 E4 05 F1 | 	add	objptr, ##62064
09fcc     F2 14 02 FB | 	rdlong	arg02, objptr
09fd0     02 00 00 FF 
09fd4     00 E4 85 F1 | 	sub	objptr, ##1024
09fd8     F2 14 02 F1 | 	add	arg02, objptr
09fdc     0A 1F 42 FC | 	wrbyte	local01, arg02
09fe0     02 00 00 FF 
09fe4     00 E4 05 F1 | 	add	objptr, ##1024
09fe8     F2 1E 02 FB | 	rdlong	local01, objptr
09fec     01 1E 06 F1 | 	add	local01, #1
09ff0     F2 1E 62 FC | 	wrlong	local01, objptr
09ff4                 | '   block(blockptr)=d
09ff4                 | '   blockptr+=1
09ff4                 | '   if blockptr>=255 then
09ff4     79 00 00 FF 
09ff8     70 E4 85 F1 | 	sub	objptr, ##62064
09ffc     FF 1E 16 F2 | 	cmp	local01, #255 wc
0a000     E4 00 90 CD |  if_b	jmp	#LR__0824
0a004     77 00 00 FF 
0a008     70 E4 05 F1 | 	add	objptr, ##61040
0a00c     F2 12 02 F6 | 	mov	arg01, objptr
0a010     77 00 00 FF 
0a014     70 E4 85 F1 | 	sub	objptr, ##61040
0a018     B0 FB BF FD | 	call	#_csave_block
0a01c     79 00 00 FF 
0a020     70 E4 05 F1 | 	add	objptr, ##62064
0a024     F2 00 68 FC | 	wrlong	#0, objptr
0a028     79 00 00 FF 
0a02c     70 E4 85 F1 | 	sub	objptr, ##62064
0a030     2C 13 06 F6 | 	mov	arg01, #300
0a034     58 F4 B0 FD | 	call	#__system___waitms
0a038     AC 00 90 FD | 	jmp	#LR__0824
0a03c                 | LR__0820
0a03c     79 00 00 FF 
0a040     70 E4 05 F1 | 	add	objptr, ##62064
0a044     F2 20 02 FB | 	rdlong	local02, objptr
0a048     02 00 00 FF 
0a04c     00 E4 85 F1 | 	sub	objptr, ##1024
0a050     F2 20 02 F1 | 	add	local02, objptr
0a054     10 1F 42 FC | 	wrbyte	local01, local02
0a058                 | '   block(blockptr)=d
0a058                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0a058     02 00 00 FF 
0a05c     00 E4 05 F1 | 	add	objptr, ##1024
0a060     F2 22 02 FB | 	rdlong	local03, objptr
0a064     79 00 00 FF 
0a068     70 E4 85 F1 | 	sub	objptr, ##62064
0a06c     FF 22 16 F2 | 	cmp	local03, #255 wc
0a070     40 00 90 3D |  if_ae	jmp	#LR__0823
0a074     79 00 00 FF 
0a078     70 E4 05 F1 | 	add	objptr, ##62064
0a07c     F2 24 02 FB | 	rdlong	local04, objptr
0a080     79 00 00 FF 
0a084     70 E4 85 F1 | 	sub	objptr, ##62064
0a088                 | LR__0821
0a088     00 25 56 F2 | 	cmps	local04, #256 wc
0a08c     24 00 90 3D |  if_ae	jmp	#LR__0822
0a090     12 21 02 F6 | 	mov	local02, local04
0a094     77 00 00 FF 
0a098     70 E4 05 F1 | 	add	objptr, ##61040
0a09c     F2 20 02 F1 | 	add	local02, objptr
0a0a0     10 01 48 FC | 	wrbyte	#0, local02
0a0a4     01 24 06 F1 | 	add	local04, #1
0a0a8     77 00 00 FF 
0a0ac     70 E4 85 F1 | 	sub	objptr, ##61040
0a0b0     D4 FF 9F FD | 	jmp	#LR__0821
0a0b4                 | LR__0822
0a0b4                 | LR__0823
0a0b4     77 00 00 FF 
0a0b8     70 E4 05 F1 | 	add	objptr, ##61040
0a0bc     F2 12 02 F6 | 	mov	arg01, objptr
0a0c0     77 00 00 FF 
0a0c4     70 E4 85 F1 | 	sub	objptr, ##61040
0a0c8     00 FB BF FD | 	call	#_csave_block
0a0cc     79 00 00 FF 
0a0d0     70 E4 05 F1 | 	add	objptr, ##62064
0a0d4     F2 00 68 FC | 	wrlong	#0, objptr
0a0d8     79 00 00 FF 
0a0dc     70 E4 85 F1 | 	sub	objptr, ##62064
0a0e0     2C 13 06 F6 | 	mov	arg01, #300
0a0e4     A8 F3 B0 FD | 	call	#__system___waitms
0a0e8                 | LR__0824
0a0e8     A7 F0 03 F6 | 	mov	ptra, fp
0a0ec     B2 00 A0 FD | 	call	#popregs_
0a0f0                 | _csave_addtoblock_ret
0a0f0     2D 00 64 FD | 	ret
0a0f4                 | 
0a0f4                 | ' 
0a0f4                 | ' sub test_csave
0a0f4                 | _test_csave
0a0f4     04 4A 05 F6 | 	mov	COUNT_, #4
0a0f8     A8 00 A0 FD | 	call	#pushregs_
0a0fc     C0 F0 07 F1 | 	add	ptra, #192
0a100                 | ' 'dim fileheader,savestart, saveptr as ulong
0a100                 | ' 
0a100                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a100     69 00 00 FF 
0a104     48 E5 05 F1 | 	add	objptr, ##54088
0a108     F2 12 02 FB | 	rdlong	arg01, objptr
0a10c     69 00 00 FF 
0a110     48 E5 85 F1 | 	sub	objptr, ##54088
0a114     B8 BC B0 FD | 	call	#_pslpeek
0a118     FF FF 7F FF 
0a11c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a120     0C 00 90 5D |  if_ne	jmp	#LR__0830
0a124     1B 12 06 F6 | 	mov	arg01, #27
0a128     E8 BA B0 FD | 	call	#_printerror
0a12c     0C 03 90 FD | 	jmp	#LR__0842
0a130                 | LR__0830
0a130     04 F8 BF FD | 	call	#_pop
0a134     FF 1E 02 F6 | 	mov	local01, result3
0a138     90 4E 05 F1 | 	add	fp, #144
0a13c     A7 FA 61 FC | 	wrlong	result1, fp
0a140     04 4E 05 F1 | 	add	fp, #4
0a144     A7 FC 61 FC | 	wrlong	result2, fp
0a148     04 4E 05 F1 | 	add	fp, #4
0a14c     A7 1E 62 FC | 	wrlong	local01, fp
0a150                 | ' t1=pop()
0a150                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
0a150     98 4E 85 F1 | 	sub	fp, #152
0a154     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a158     45 01 00 5F 
0a15c     A3 1F 06 56 |  if_ne	mov	local01, ##@LR__4589
0a160     8C 4E 05 51 |  if_ne	add	fp, #140
0a164     A7 1E 62 5C |  if_ne	wrlong	local01, fp
0a168     8C 4E 85 51 |  if_ne	sub	fp, #140
0a16c     90 4E 05 A1 |  if_e	add	fp, #144
0a170     A7 1E 02 AB |  if_e	rdlong	local01, fp
0a174     04 4E 85 A1 |  if_e	sub	fp, #4
0a178     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a17c     8C 4E 85 A1 |  if_e	sub	fp, #140
0a180                 | ' 
0a180                 | ' ' prepare 1 kHz header wave
0a180                 | ' 
0a180                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a180     A7 00 68 FC | 	wrlong	#0, fp
0a184     97 34 48 FB | 	callpa	#(@LR__0834-@LR__0831)>>2,fcache_load_ptr_
0a188                 | LR__0831
0a188     A7 1E 02 FB | 	rdlong	local01, fp
0a18c     0F 1F 52 F6 | 	abs	local01, local01 wc
0a190     07 1E 06 F5 | 	and	local01, #7
0a194     0F 1F 82 F6 | 	negc	local01, local01
0a198     04 1E 56 F2 | 	cmps	local01, #4 wc
0a19c     20 00 90 3D |  if_ae	jmp	#LR__0832
0a1a0     A7 1E 02 FB | 	rdlong	local01, fp
0a1a4     76 00 00 FF 
0a1a8     70 E5 05 F1 | 	add	objptr, ##60784
0a1ac     F2 1E 02 F1 | 	add	local01, objptr
0a1b0     0F FF 48 FC | 	wrbyte	#127, local01
0a1b4     76 00 00 FF 
0a1b8     70 E5 85 F1 | 	sub	objptr, ##60784
0a1bc     1C 00 90 FD | 	jmp	#LR__0833
0a1c0                 | LR__0832
0a1c0     A7 1E 02 FB | 	rdlong	local01, fp
0a1c4     76 00 00 FF 
0a1c8     70 E5 05 F1 | 	add	objptr, ##60784
0a1cc     F2 1E 02 F1 | 	add	local01, objptr
0a1d0     0F 01 49 FC | 	wrbyte	#128, local01
0a1d4     76 00 00 FF 
0a1d8     70 E5 85 F1 | 	sub	objptr, ##60784
0a1dc                 | LR__0833
0a1dc     A7 1E 02 FB | 	rdlong	local01, fp
0a1e0     01 1E 06 F1 | 	add	local01, #1
0a1e4     A7 1E 62 FC | 	wrlong	local01, fp
0a1e8     00 1F 56 F2 | 	cmps	local01, #256 wc
0a1ec     98 FF 9F CD |  if_b	jmp	#LR__0831
0a1f0                 | LR__0834
0a1f0     76 00 00 FF 
0a1f4     70 E5 05 F1 | 	add	objptr, ##60784
0a1f8     F2 14 02 F6 | 	mov	arg02, objptr
0a1fc     07 12 06 F6 | 	mov	arg01, #7
0a200     0F 00 00 FF 
0a204     40 17 06 F6 | 	mov	arg03, ##8000
0a208     0E 18 C6 F9 | 	decod	arg04, #14
0a20c     00 1B 06 F6 | 	mov	arg05, #256
0a210     00 1C 06 F6 | 	mov	arg06, #0
0a214     6B 00 00 FF 
0a218     B0 E4 85 F1 | 	sub	objptr, ##54960
0a21c     E0 EB B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
0a220     0B 00 00 FF 
0a224     C0 E4 85 F1 | 	sub	objptr, ##5824
0a228     05 00 00 FF 
0a22c     B8 13 06 F6 | 	mov	arg01, ##3000
0a230     5C F2 B0 FD | 	call	#__system___waitms
0a234     79 00 00 FF 
0a238     70 E4 05 F1 | 	add	objptr, ##62064
0a23c     F2 00 68 FC | 	wrlong	#0, objptr
0a240     79 00 00 FF 
0a244     70 E4 85 F1 | 	sub	objptr, ##62064
0a248     72 12 06 F6 | 	mov	arg01, #114
0a24c     00 14 06 F6 | 	mov	arg02, #0
0a250     5C FD BF FD | 	call	#_csave_addtoblock
0a254     62 12 06 F6 | 	mov	arg01, #98
0a258     00 14 06 F6 | 	mov	arg02, #0
0a25c     50 FD BF FD | 	call	#_csave_addtoblock
0a260     61 12 06 F6 | 	mov	arg01, #97
0a264     00 14 06 F6 | 	mov	arg02, #0
0a268     44 FD BF FD | 	call	#_csave_addtoblock
0a26c     0D 12 06 F6 | 	mov	arg01, #13
0a270     00 14 06 F6 | 	mov	arg02, #0
0a274     38 FD BF FD | 	call	#_csave_addtoblock
0a278                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0a278                 | ' waitms 3000 
0a278                 | ' 
0a278                 | ' blockptr=0
0a278                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0a278                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0a278     A7 02 68 FC | 	wrlong	#1, fp
0a27c     8C 4E 05 F1 | 	add	fp, #140
0a280     A7 12 02 FB | 	rdlong	arg01, fp
0a284     8C 4E 85 F1 | 	sub	fp, #140
0a288     09 21 02 F6 | 	mov	local02, arg01
0a28c     97 06 48 FB | 	callpa	#(@LR__0836-@LR__0835)>>2,fcache_load_ptr_
0a290                 | LR__0835
0a290     10 FB C9 FA | 	rdbyte	result1, local02 wz
0a294     01 20 06 51 |  if_ne	add	local02, #1
0a298     F4 FF 9F 5D |  if_ne	jmp	#LR__0835
0a29c                 | LR__0836
0a29c     09 21 82 F1 | 	sub	local02, arg01
0a2a0     10 23 02 F6 | 	mov	local03, local02
0a2a4     01 22 06 F1 | 	add	local03, #1
0a2a8                 | LR__0837
0a2a8     A7 1E 02 FB | 	rdlong	local01, fp
0a2ac     11 1F 52 F2 | 	cmps	local01, local03 wc
0a2b0     34 00 90 3D |  if_ae	jmp	#LR__0838
0a2b4     8C 4E 05 F1 | 	add	fp, #140
0a2b8     A7 12 02 FB | 	rdlong	arg01, fp
0a2bc     8C 4E 85 F1 | 	sub	fp, #140
0a2c0     A7 14 02 FB | 	rdlong	arg02, fp
0a2c4     01 16 06 F6 | 	mov	arg03, #1
0a2c8     F8 0F B1 FD | 	call	#__system__Mid_S
0a2cc     FD 12 C2 FA | 	rdbyte	arg01, result1
0a2d0     00 14 06 F6 | 	mov	arg02, #0
0a2d4     D8 FC BF FD | 	call	#_csave_addtoblock
0a2d8     A7 1E 02 FB | 	rdlong	local01, fp
0a2dc     01 1E 06 F1 | 	add	local01, #1
0a2e0     A7 1E 62 FC | 	wrlong	local01, fp
0a2e4     C0 FF 9F FD | 	jmp	#LR__0837
0a2e8                 | LR__0838
0a2e8     00 12 06 F6 | 	mov	arg01, #0
0a2ec     00 14 06 F6 | 	mov	arg02, #0
0a2f0     BC FC BF FD | 	call	#_csave_addtoblock
0a2f4     72 12 06 F6 | 	mov	arg01, #114
0a2f8     00 14 06 F6 | 	mov	arg02, #0
0a2fc     B0 FC BF FD | 	call	#_csave_addtoblock
0a300     62 12 06 F6 | 	mov	arg01, #98
0a304     00 14 06 F6 | 	mov	arg02, #0
0a308     A4 FC BF FD | 	call	#_csave_addtoblock
0a30c     73 12 06 F6 | 	mov	arg01, #115
0a310     00 14 06 F6 | 	mov	arg02, #0
0a314     98 FC BF FD | 	call	#_csave_addtoblock
0a318     0D 12 06 F6 | 	mov	arg01, #13
0a31c     00 14 06 F6 | 	mov	arg02, #0
0a320     8C FC BF FD | 	call	#_csave_addtoblock
0a324     69 00 00 FF 
0a328     48 E5 05 F1 | 	add	objptr, ##54088
0a32c     F2 1E 02 FB | 	rdlong	local01, objptr
0a330     69 00 00 FF 
0a334     48 E5 85 F1 | 	sub	objptr, ##54088
0a338     9C 4E 05 F1 | 	add	fp, #156
0a33c     A7 1E 62 FC | 	wrlong	local01, fp
0a340     9C 4E 85 F1 | 	sub	fp, #156
0a344                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0a344                 | ' 
0a344                 | ' saveptr=programstart
0a344                 | ' do
0a344                 | LR__0839
0a344     A0 4E 05 F1 | 	add	fp, #160
0a348     A7 12 02 F6 | 	mov	arg01, fp
0a34c     04 4E 85 F1 | 	sub	fp, #4
0a350     A7 14 02 FB | 	rdlong	arg02, fp
0a354     9C 4E 85 F1 | 	sub	fp, #156
0a358     18 16 06 F6 | 	mov	arg03, #24
0a35c     0B 00 00 FF 
0a360     C0 E4 05 F1 | 	add	objptr, ##5824
0a364     E4 E2 B0 FD | 	call	#_psram_spin2_read1
0a368     0C 4E 05 F1 | 	add	fp, #12
0a36c     A7 12 02 F6 | 	mov	arg01, fp
0a370     9C 4E 05 F1 | 	add	fp, #156
0a374     A7 14 02 FB | 	rdlong	arg02, fp
0a378     04 4E 05 F1 | 	add	fp, #4
0a37c     A7 16 02 FB | 	rdlong	arg03, fp
0a380     AC 4E 85 F1 | 	sub	fp, #172
0a384     C4 E2 B0 FD | 	call	#_psram_spin2_read1
0a388     0B 00 00 FF 
0a38c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a390     AC 4E 05 F1 | 	add	fp, #172
0a394     A7 12 02 FB | 	rdlong	arg01, fp
0a398     AC 4E 85 F1 | 	sub	fp, #172
0a39c     00 14 06 F6 | 	mov	arg02, #0
0a3a0     0C FC BF FD | 	call	#_csave_addtoblock
0a3a4                 | '   psram.read1(varptr(header(0)),saveptr,24)
0a3a4                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0a3a4                 | '   csave_addtoblock(header(3),0) ' that's always <255
0a3a4                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0a3a4     A7 00 68 FC | 	wrlong	#0, fp
0a3a8     AC 4E 05 F1 | 	add	fp, #172
0a3ac     A7 24 02 FB | 	rdlong	local04, fp
0a3b0     AC 4E 85 F1 | 	sub	fp, #172
0a3b4                 | LR__0840
0a3b4     A7 1E 02 FB | 	rdlong	local01, fp
0a3b8     12 1F 52 F2 | 	cmps	local01, local04 wc
0a3bc     2C 00 90 3D |  if_ae	jmp	#LR__0841
0a3c0     A7 22 02 FB | 	rdlong	local03, fp
0a3c4     0C 4E 05 F1 | 	add	fp, #12
0a3c8     A7 22 02 F1 | 	add	local03, fp
0a3cc     11 13 C2 FA | 	rdbyte	arg01, local03
0a3d0     00 14 06 F6 | 	mov	arg02, #0
0a3d4     0C 4E 85 F1 | 	sub	fp, #12
0a3d8     D4 FB BF FD | 	call	#_csave_addtoblock
0a3dc     A7 22 02 FB | 	rdlong	local03, fp
0a3e0     01 22 06 F1 | 	add	local03, #1
0a3e4     A7 22 62 FC | 	wrlong	local03, fp
0a3e8     C8 FF 9F FD | 	jmp	#LR__0840
0a3ec                 | LR__0841
0a3ec     B4 4E 05 F1 | 	add	fp, #180
0a3f0     A7 1E 02 FB | 	rdlong	local01, fp
0a3f4     18 4E 85 F1 | 	sub	fp, #24
0a3f8     A7 1E 62 FC | 	wrlong	local01, fp
0a3fc     18 4E 05 F1 | 	add	fp, #24
0a400     A7 1E 02 FB | 	rdlong	local01, fp
0a404     B4 4E 85 F1 | 	sub	fp, #180
0a408     FF FF 3F FF 
0a40c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a410     30 FF 9F 5D |  if_ne	jmp	#LR__0839
0a414     00 12 06 F6 | 	mov	arg01, #0
0a418     01 14 06 F6 | 	mov	arg02, #1
0a41c     90 FB BF FD | 	call	#_csave_addtoblock
0a420     56 00 00 FF 
0a424     D4 E4 05 F1 | 	add	objptr, ##44244
0a428     F2 12 02 FB | 	rdlong	arg01, objptr
0a42c     56 00 00 FF 
0a430     D4 E4 85 F1 | 	sub	objptr, ##44244
0a434     F4 12 06 F1 | 	add	arg01, #244
0a438     09 01 58 FC | 	wrword	#0, arg01
0a43c                 | LR__0842
0a43c     A7 F0 03 F6 | 	mov	ptra, fp
0a440     B2 00 A0 FD | 	call	#popregs_
0a444                 | _test_csave_ret
0a444     2D 00 64 FD | 	ret
0a448                 | 
0a448                 | ' 
0a448                 | ' ' ----------------- Save the program
0a448                 | ' 
0a448                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0a448                 | _do_save
0a448     02 4A 05 F6 | 	mov	COUNT_, #2
0a44c     A8 00 A0 FD | 	call	#pushregs_
0a450     01 00 00 FF 
0a454     BC F0 07 F1 | 	add	ptra, ##700
0a458     01 00 00 FF 
0a45c     10 4E 05 F1 | 	add	fp, ##528
0a460     B1 B0 86 FF 
0a464     A7 E4 68 FC | 	wrlong	##224486002, fp
0a468     01 00 00 FF 
0a46c     10 4E 85 F1 | 	sub	fp, ##528
0a470     C4 F4 BF FD | 	call	#_pop
0a474     FF 16 02 F6 | 	mov	arg03, result3
0a478     A7 FA 61 FC | 	wrlong	result1, fp
0a47c     04 4E 05 F1 | 	add	fp, #4
0a480     A7 FC 61 FC | 	wrlong	result2, fp
0a484     04 4E 05 F1 | 	add	fp, #4
0a488     A7 16 62 FC | 	wrlong	arg03, fp
0a48c     08 4E 85 F1 | 	sub	fp, #8
0a490                 | ' 
0a490                 | ' fileheader=$0D616272' rba+ver'
0a490                 | ' 
0a490                 | ' t1=pop() 
0a490                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a490     69 00 00 FF 
0a494     48 E5 05 F1 | 	add	objptr, ##54088
0a498     F2 12 02 FB | 	rdlong	arg01, objptr
0a49c     69 00 00 FF 
0a4a0     48 E5 85 F1 | 	sub	objptr, ##54088
0a4a4     28 B9 B0 FD | 	call	#_pslpeek
0a4a8     FF FF 7F FF 
0a4ac     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a4b0     0C 00 90 5D |  if_ne	jmp	#LR__0850
0a4b4     1B 12 06 F6 | 	mov	arg01, #27
0a4b8     58 B7 B0 FD | 	call	#_printerror
0a4bc     68 02 90 FD | 	jmp	#LR__0856
0a4c0                 | LR__0850
0a4c0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0a4c0     08 4E 05 F1 | 	add	fp, #8
0a4c4     A7 16 02 FB | 	rdlong	arg03, fp
0a4c8     08 4E 85 F1 | 	sub	fp, #8
0a4cc     2B 16 0E F2 | 	cmp	arg03, #43 wz
0a4d0     18 00 90 5D |  if_ne	jmp	#LR__0851
0a4d4     A7 12 02 FB | 	rdlong	arg01, fp
0a4d8     C0 27 B0 FD | 	call	#_convertstring
0a4dc     A7 FA 61 FC | 	wrlong	result1, fp
0a4e0     08 4E 05 F1 | 	add	fp, #8
0a4e4     A7 3E 68 FC | 	wrlong	#31, fp
0a4e8     08 4E 85 F1 | 	sub	fp, #8
0a4ec                 | LR__0851
0a4ec                 | ' if t1.result_type=result_string then
0a4ec     08 4E 05 F1 | 	add	fp, #8
0a4f0     A7 1E 02 FB | 	rdlong	local01, fp
0a4f4     08 4E 85 F1 | 	sub	fp, #8
0a4f8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a4fc     28 02 90 5D |  if_ne	jmp	#LR__0855
0a500                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0a500     A7 12 02 FB | 	rdlong	arg01, fp
0a504     45 01 00 FF 
0a508     AE 15 06 F6 | 	mov	arg02, ##@LR__4590
0a50c     B4 EC B0 FD | 	call	#__system___string_cmp
0a510     00 FA 0D F2 | 	cmp	result1, #0 wz
0a514     45 01 00 AF 
0a518     AF 1F 06 A6 |  if_e	mov	local01, ##@LR__4591
0a51c     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a520                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0a520     09 12 06 F6 | 	mov	arg01, #9
0a524     A8 3B B1 FD | 	call	#__system__close
0a528     09 1E 06 F6 | 	mov	local01, #9
0a52c     71 00 00 FF 
0a530     58 E5 05 F1 | 	add	objptr, ##58200
0a534     F2 12 02 FB | 	rdlong	arg01, objptr
0a538     71 00 00 FF 
0a53c     58 E5 85 F1 | 	sub	objptr, ##58200
0a540     45 01 00 FF 
0a544     BA 15 06 F6 | 	mov	arg02, ##@LR__4592
0a548     AC EC B0 FD | 	call	#__system___string_concat
0a54c     FD 12 02 F6 | 	mov	arg01, result1
0a550     A7 14 02 FB | 	rdlong	arg02, fp
0a554     A0 EC B0 FD | 	call	#__system___string_concat
0a558     FD 14 02 F6 | 	mov	arg02, result1
0a55c     0F 13 02 F6 | 	mov	arg01, local01
0a560     0D 16 06 F6 | 	mov	arg03, #13
0a564     38 F8 B0 FD | 	call	#__system___basic_open_string
0a568     01 00 00 FF 
0a56c     0C 4E 05 F1 | 	add	fp, ##524
0a570     A7 0A 68 FC | 	wrlong	#5, fp
0a574     69 00 00 FF 
0a578     48 E5 05 F1 | 	add	objptr, ##54088
0a57c     F2 1E 02 FB | 	rdlong	local01, objptr
0a580     69 00 00 FF 
0a584     48 E5 85 F1 | 	sub	objptr, ##54088
0a588     0C 4E 05 F1 | 	add	fp, #12
0a58c     A7 1E 62 FC | 	wrlong	local01, fp
0a590     01 00 00 FF 
0a594     18 4E 85 F1 | 	sub	fp, ##536
0a598                 | ' '  put #9,1,fileheader,1
0a598                 | '   i=5
0a598                 | '   saveptr=programstart
0a598                 | '   do
0a598                 | LR__0852
0a598     01 00 00 FF 
0a59c     1C 4E 05 F1 | 	add	fp, ##540
0a5a0     A7 12 02 F6 | 	mov	arg01, fp
0a5a4     04 4E 85 F1 | 	sub	fp, #4
0a5a8     A7 14 02 FB | 	rdlong	arg02, fp
0a5ac     01 00 00 FF 
0a5b0     18 4E 85 F1 | 	sub	fp, ##536
0a5b4     18 16 06 F6 | 	mov	arg03, #24
0a5b8     0B 00 00 FF 
0a5bc     C0 E4 05 F1 | 	add	objptr, ##5824
0a5c0     88 E0 B0 FD | 	call	#_psram_spin2_read1
0a5c4     01 00 00 FF 
0a5c8     34 4E 05 F1 | 	add	fp, ##564
0a5cc     A7 12 02 F6 | 	mov	arg01, fp
0a5d0     10 4E 85 F1 | 	sub	fp, #16
0a5d4     A7 14 02 FB | 	rdlong	arg02, fp
0a5d8     04 4E 05 F1 | 	add	fp, #4
0a5dc     A7 16 02 FB | 	rdlong	arg03, fp
0a5e0     01 00 00 FF 
0a5e4     28 4E 85 F1 | 	sub	fp, ##552
0a5e8     60 E0 B0 FD | 	call	#_psram_spin2_read1
0a5ec     0B 00 00 FF 
0a5f0     C0 E4 85 F1 | 	sub	objptr, ##5824
0a5f4     45 01 00 FF 
0a5f8     BC 1F 06 F6 | 	mov	local01, ##@LR__4593
0a5fc     01 00 00 FF 
0a600     B4 4E 05 F1 | 	add	fp, ##692
0a604     A7 1E 62 FC | 	wrlong	local01, fp
0a608                 | '     psram.read1(varptr(header(0)),saveptr,24)
0a608                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0a608                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0a608     A8 4E 85 F1 | 	sub	fp, #168
0a60c     A7 02 68 FC | 	wrlong	#1, fp
0a610     1C 4E 05 F1 | 	add	fp, #28
0a614     A7 20 02 FB | 	rdlong	local02, fp
0a618     01 00 00 FF 
0a61c     28 4E 85 F1 | 	sub	fp, ##552
0a620     01 20 06 F1 | 	add	local02, #1
0a624                 | LR__0853
0a624     01 00 00 FF 
0a628     0C 4E 05 F1 | 	add	fp, ##524
0a62c     A7 1E 02 FB | 	rdlong	local01, fp
0a630     01 00 00 FF 
0a634     0C 4E 85 F1 | 	sub	fp, ##524
0a638     10 1F 52 F2 | 	cmps	local01, local02 wc
0a63c     64 00 90 3D |  if_ae	jmp	#LR__0854
0a640     01 00 00 FF 
0a644     B4 4E 05 F1 | 	add	fp, ##692
0a648     A7 1E 02 FB | 	rdlong	local01, fp
0a64c     A8 4E 85 F1 | 	sub	fp, #168
0a650     A7 16 02 FB | 	rdlong	arg03, fp
0a654     01 16 86 F1 | 	sub	arg03, #1
0a658     28 4E 05 F1 | 	add	fp, #40
0a65c     A7 16 02 F1 | 	add	arg03, fp
0a660     0B 13 C2 FA | 	rdbyte	arg01, arg03
0a664     01 00 00 FF 
0a668     34 4E 85 F1 | 	sub	fp, ##564
0a66c     00 0D B1 FD | 	call	#__system__Chr_S
0a670     FD 14 02 F6 | 	mov	arg02, result1
0a674     0F 13 02 F6 | 	mov	arg01, local01
0a678     7C EB B0 FD | 	call	#__system___string_concat
0a67c     01 00 00 FF 
0a680     B4 4E 05 F1 | 	add	fp, ##692
0a684     A7 FA 61 FC | 	wrlong	result1, fp
0a688     A8 4E 85 F1 | 	sub	fp, #168
0a68c     A7 1E 02 FB | 	rdlong	local01, fp
0a690     01 1E 06 F1 | 	add	local01, #1
0a694     A7 1E 62 FC | 	wrlong	local01, fp
0a698     01 00 00 FF 
0a69c     0C 4E 85 F1 | 	sub	fp, ##524
0a6a0     80 FF 9F FD | 	jmp	#LR__0853
0a6a4                 | LR__0854
0a6a4                 | '  '   put #9,i,header(3),1 : i+=4
0a6a4                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0a6a4                 | '      print #9, saveline$
0a6a4     09 12 06 F6 | 	mov	arg01, #9
0a6a8     F4 43 B1 FD | 	call	#__system___getiolock_0425
0a6ac     FD 12 02 F6 | 	mov	arg01, result1
0a6b0     E8 EA B0 FD | 	call	#__system___lockmem
0a6b4     01 00 00 FF 
0a6b8     B4 4E 05 F1 | 	add	fp, ##692
0a6bc     A7 14 02 FB | 	rdlong	arg02, fp
0a6c0     01 00 00 FF 
0a6c4     B4 4E 85 F1 | 	sub	fp, ##692
0a6c8     09 12 06 F6 | 	mov	arg01, #9
0a6cc     00 16 06 F6 | 	mov	arg03, #0
0a6d0     BC F7 B0 FD | 	call	#__system___basic_print_string
0a6d4     09 12 06 F6 | 	mov	arg01, #9
0a6d8     0A 14 06 F6 | 	mov	arg02, #10
0a6dc     00 16 06 F6 | 	mov	arg03, #0
0a6e0     54 F7 B0 FD | 	call	#__system___basic_print_char
0a6e4     09 12 06 F6 | 	mov	arg01, #9
0a6e8     B4 43 B1 FD | 	call	#__system___getiolock_0425
0a6ec     FD 00 68 FC | 	wrlong	#0, result1
0a6f0     01 00 00 FF 
0a6f4     30 4E 05 F1 | 	add	fp, ##560
0a6f8     A7 1E 02 FB | 	rdlong	local01, fp
0a6fc     18 4E 85 F1 | 	sub	fp, #24
0a700     A7 1E 62 FC | 	wrlong	local01, fp
0a704     18 4E 05 F1 | 	add	fp, #24
0a708     A7 1E 02 FB | 	rdlong	local01, fp
0a70c     01 00 00 FF 
0a710     30 4E 85 F1 | 	sub	fp, ##560
0a714     FF FF 3F FF 
0a718     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a71c     78 FE 9F 5D |  if_ne	jmp	#LR__0852
0a720                 | '   close #9  
0a720     09 12 06 F6 | 	mov	arg01, #9
0a724     A8 39 B1 FD | 	call	#__system__close
0a728                 | LR__0855
0a728                 | LR__0856
0a728     A7 F0 03 F6 | 	mov	ptra, fp
0a72c     B2 00 A0 FD | 	call	#popregs_
0a730                 | _do_save_ret
0a730     2D 00 64 FD | 	ret
0a734                 | 
0a734                 | ' 
0a734                 | ' '----------------- Load the program
0a734                 | ' 'lo todo: errors while loading
0a734                 | ' sub do_load
0a734                 | _do_load
0a734     01 4A 05 F6 | 	mov	COUNT_, #1
0a738     A8 00 A0 FD | 	call	#pushregs_
0a73c     A4 F0 07 F1 | 	add	ptra, #164
0a740     A0 4E 05 F1 | 	add	fp, #160
0a744     A7 12 02 F6 | 	mov	arg01, fp
0a748     80 4E 85 F1 | 	sub	fp, #128
0a74c     A7 14 02 F6 | 	mov	arg02, fp
0a750     20 4E 85 F1 | 	sub	fp, #32
0a754     09 15 62 FC | 	wrlong	arg02, arg01
0a758     DC F1 BF FD | 	call	#_pop
0a75c     FF 1A 02 F6 | 	mov	arg05, result3
0a760     A7 FA 61 FC | 	wrlong	result1, fp
0a764     04 4E 05 F1 | 	add	fp, #4
0a768     A7 FC 61 FC | 	wrlong	result2, fp
0a76c     04 4E 05 F1 | 	add	fp, #4
0a770     A7 1A 62 FC | 	wrlong	arg05, fp
0a774                 | ' 
0a774                 | ' lpoke varptr(line2$),varptr(line2)
0a774                 | ' t1=pop() 
0a774                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0a774                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0a774     08 4E 85 F1 | 	sub	fp, #8
0a778     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0a77c     18 00 90 5D |  if_ne	jmp	#LR__0860
0a780     A7 12 02 FB | 	rdlong	arg01, fp
0a784     14 25 B0 FD | 	call	#_convertstring
0a788     A7 FA 61 FC | 	wrlong	result1, fp
0a78c     08 4E 05 F1 | 	add	fp, #8
0a790     A7 3E 68 FC | 	wrlong	#31, fp
0a794     08 4E 85 F1 | 	sub	fp, #8
0a798                 | LR__0860
0a798                 | ' if t1.result_type=result_string then
0a798     08 4E 05 F1 | 	add	fp, #8
0a79c     A7 1E 02 FB | 	rdlong	local01, fp
0a7a0     08 4E 85 F1 | 	sub	fp, #8
0a7a4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a7a8     40 03 90 5D |  if_ne	jmp	#LR__0867
0a7ac     54 1F B0 FD | 	call	#_do_new
0a7b0                 | '   do_new
0a7b0                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
0a7b0     A7 12 02 FB | 	rdlong	arg01, fp
0a7b4     45 01 00 FF 
0a7b8     BD 15 06 F6 | 	mov	arg02, ##@LR__4594
0a7bc     04 EA B0 FD | 	call	#__system___string_cmp
0a7c0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a7c4     45 01 00 AF 
0a7c8     BE 1F 06 A6 |  if_e	mov	local01, ##@LR__4595
0a7cc     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a7d0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a7d0     09 12 06 F6 | 	mov	arg01, #9
0a7d4     F8 38 B1 FD | 	call	#__system__close
0a7d8     09 1E 06 F6 | 	mov	local01, #9
0a7dc     71 00 00 FF 
0a7e0     58 E5 05 F1 | 	add	objptr, ##58200
0a7e4     F2 12 02 FB | 	rdlong	arg01, objptr
0a7e8     71 00 00 FF 
0a7ec     58 E5 85 F1 | 	sub	objptr, ##58200
0a7f0     45 01 00 FF 
0a7f4     C9 15 06 F6 | 	mov	arg02, ##@LR__4596
0a7f8     FC E9 B0 FD | 	call	#__system___string_concat
0a7fc     FD 12 02 F6 | 	mov	arg01, result1
0a800     A7 14 02 FB | 	rdlong	arg02, fp
0a804     F0 E9 B0 FD | 	call	#__system___string_concat
0a808     FD 14 02 F6 | 	mov	arg02, result1
0a80c     0F 13 02 F6 | 	mov	arg01, local01
0a810     00 16 06 F6 | 	mov	arg03, #0
0a814     88 F5 B0 FD | 	call	#__system___basic_open_string
0a818     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0a81c     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0a820     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0a824     10 4E 05 F1 | 	add	fp, #16
0a828     A7 FA 61 FC | 	wrlong	result1, fp
0a82c                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0a82c     10 4E 85 F1 | 	sub	fp, #16
0a830     9C 00 90 AD |  if_e	jmp	#LR__0861
0a834     00 12 06 F6 | 	mov	arg01, #0
0a838     64 42 B1 FD | 	call	#__system___getiolock_0425
0a83c     FD 12 02 F6 | 	mov	arg01, result1
0a840     58 E9 B0 FD | 	call	#__system___lockmem
0a844     45 01 00 FF 
0a848     CB 15 06 F6 | 	mov	arg02, ##@LR__4597
0a84c     00 12 06 F6 | 	mov	arg01, #0
0a850     00 16 06 F6 | 	mov	arg03, #0
0a854     38 F6 B0 FD | 	call	#__system___basic_print_string
0a858     10 4E 05 F1 | 	add	fp, #16
0a85c     A7 14 02 FB | 	rdlong	arg02, fp
0a860     10 4E 85 F1 | 	sub	fp, #16
0a864     00 12 06 F6 | 	mov	arg01, #0
0a868     00 16 06 F6 | 	mov	arg03, #0
0a86c     0A 18 06 F6 | 	mov	arg04, #10
0a870     60 F6 B0 FD | 	call	#__system___basic_print_integer
0a874     45 01 00 FF 
0a878     D9 15 06 F6 | 	mov	arg02, ##@LR__4598
0a87c     00 12 06 F6 | 	mov	arg01, #0
0a880     00 16 06 F6 | 	mov	arg03, #0
0a884     08 F6 B0 FD | 	call	#__system___basic_print_string
0a888     10 4E 05 F1 | 	add	fp, #16
0a88c     A7 12 02 FB | 	rdlong	arg01, fp
0a890     10 4E 85 F1 | 	sub	fp, #16
0a894     04 0F B1 FD | 	call	#__system___strerror
0a898     FD 14 02 F6 | 	mov	arg02, result1
0a89c     00 12 06 F6 | 	mov	arg01, #0
0a8a0     00 16 06 F6 | 	mov	arg03, #0
0a8a4     E8 F5 B0 FD | 	call	#__system___basic_print_string
0a8a8     00 12 06 F6 | 	mov	arg01, #0
0a8ac     0A 14 06 F6 | 	mov	arg02, #10
0a8b0     00 16 06 F6 | 	mov	arg03, #0
0a8b4     80 F5 B0 FD | 	call	#__system___basic_print_char
0a8b8     00 12 06 F6 | 	mov	arg01, #0
0a8bc     E0 41 B1 FD | 	call	#__system___getiolock_0425
0a8c0     FD 00 68 FC | 	wrlong	#0, result1
0a8c4     09 12 06 F6 | 	mov	arg01, #9
0a8c8     04 38 B1 FD | 	call	#__system__close
0a8cc     24 02 90 FD | 	jmp	#LR__0869
0a8d0                 | LR__0861
0a8d0     0C 4E 05 F1 | 	add	fp, #12
0a8d4     A7 0A 68 FC | 	wrlong	#5, fp
0a8d8                 | '   i=5
0a8d8                 | '   get #9,1,header,1
0a8d8     0C 4E 05 F1 | 	add	fp, #12
0a8dc     A7 16 02 F6 | 	mov	arg03, fp
0a8e0     18 4E 85 F1 | 	sub	fp, #24
0a8e4     09 12 06 F6 | 	mov	arg01, #9
0a8e8     01 14 06 F6 | 	mov	arg02, #1
0a8ec     01 18 06 F6 | 	mov	arg04, #1
0a8f0     04 1A 06 F6 | 	mov	arg05, #4
0a8f4     A8 F6 B0 FD | 	call	#__system___basic_get
0a8f8                 | '   
0a8f8                 | '   if header<>$0D616272 then 
0a8f8     18 4E 05 F1 | 	add	fp, #24
0a8fc     A7 1E 02 FB | 	rdlong	local01, fp
0a900     18 4E 85 F1 | 	sub	fp, #24
0a904     B1 B0 06 FF 
0a908     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0a90c     F0 00 90 AD |  if_e	jmp	#LR__0864
0a910                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a910     09 12 06 F6 | 	mov	arg01, #9
0a914     B8 37 B1 FD | 	call	#__system__close
0a918     09 1E 06 F6 | 	mov	local01, #9
0a91c     71 00 00 FF 
0a920     58 E5 05 F1 | 	add	objptr, ##58200
0a924     F2 12 02 FB | 	rdlong	arg01, objptr
0a928     71 00 00 FF 
0a92c     58 E5 85 F1 | 	sub	objptr, ##58200
0a930     45 01 00 FF 
0a934     DC 15 06 F6 | 	mov	arg02, ##@LR__4599
0a938     BC E8 B0 FD | 	call	#__system___string_concat
0a93c     FD 12 02 F6 | 	mov	arg01, result1
0a940     A7 14 02 FB | 	rdlong	arg02, fp
0a944     B0 E8 B0 FD | 	call	#__system___string_concat
0a948     FD 14 02 F6 | 	mov	arg02, result1
0a94c     0F 13 02 F6 | 	mov	arg01, local01
0a950     00 16 06 F6 | 	mov	arg03, #0
0a954     48 F4 B0 FD | 	call	#__system___basic_open_string
0a958                 | '     do
0a958                 | LR__0862
0a958     09 12 06 F6 | 	mov	arg01, #9
0a95c     48 EA B0 FD | 	call	#__system___basic_read_line
0a960     56 00 00 FF 
0a964     E0 E4 05 F1 | 	add	objptr, ##44256
0a968     F2 FA 61 FC | 	wrlong	result1, objptr
0a96c                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0a96c     56 00 00 FF 
0a970     E0 E4 85 F1 | 	sub	objptr, ##44256
0a974     FD 12 02 F6 | 	mov	arg01, result1
0a978     01 14 06 F6 | 	mov	arg02, #1
0a97c     2C 08 B1 FD | 	call	#__system__Left_S
0a980     FD 12 02 F6 | 	mov	arg01, result1
0a984     45 01 00 FF 
0a988     DE 15 06 F6 | 	mov	arg02, ##@LR__4600
0a98c     34 E8 B0 FD | 	call	#__system___string_cmp
0a990     00 FA 55 F2 | 	cmps	result1, #0 wc
0a994     34 00 90 CD |  if_b	jmp	#LR__0863
0a998     56 00 00 FF 
0a99c     E0 E4 05 F1 | 	add	objptr, ##44256
0a9a0     F2 12 02 FB | 	rdlong	arg01, objptr
0a9a4     56 00 00 FF 
0a9a8     E0 E4 85 F1 | 	sub	objptr, ##44256
0a9ac     01 14 06 F6 | 	mov	arg02, #1
0a9b0     F8 07 B1 FD | 	call	#__system__Left_S
0a9b4     FD 12 02 F6 | 	mov	arg01, result1
0a9b8     45 01 00 FF 
0a9bc     E0 15 06 F6 | 	mov	arg02, ##@LR__4601
0a9c0     00 E8 B0 FD | 	call	#__system___string_cmp
0a9c4     01 FA 55 F2 | 	cmps	result1, #1 wc
0a9c8     50 60 BF CD |  if_b	call	#_interpret
0a9cc                 | LR__0863
0a9cc     56 00 00 FF 
0a9d0     E0 E4 05 F1 | 	add	objptr, ##44256
0a9d4     F2 12 02 FB | 	rdlong	arg01, objptr
0a9d8     56 00 00 FF 
0a9dc     E0 E4 85 F1 | 	sub	objptr, ##44256
0a9e0     45 01 00 FF 
0a9e4     E2 15 06 F6 | 	mov	arg02, ##@LR__4602
0a9e8     D8 E7 B0 FD | 	call	#__system___string_cmp
0a9ec     00 FA 0D F2 | 	cmp	result1, #0 wz
0a9f0     64 FF 9F 5D |  if_ne	jmp	#LR__0862
0a9f4                 | '     close #9
0a9f4     09 12 06 F6 | 	mov	arg01, #9
0a9f8     D4 36 B1 FD | 	call	#__system__close
0a9fc     F4 00 90 FD | 	jmp	#LR__0868
0aa00                 | LR__0864
0aa00                 | '   'printerror(26) : close #9 : return
0aa00                 | '     do
0aa00                 | LR__0865
0aa00                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0aa00     0C 4E 05 F1 | 	add	fp, #12
0aa04     A7 14 02 FB | 	rdlong	arg02, fp
0aa08     10 4E 05 F1 | 	add	fp, #16
0aa0c     A7 16 02 F6 | 	mov	arg03, fp
0aa10     1C 4E 85 F1 | 	sub	fp, #28
0aa14     09 12 06 F6 | 	mov	arg01, #9
0aa18     01 18 06 F6 | 	mov	arg04, #1
0aa1c     04 1A 06 F6 | 	mov	arg05, #4
0aa20     7C F5 B0 FD | 	call	#__system___basic_get
0aa24     14 4E 05 F1 | 	add	fp, #20
0aa28     A7 FA 61 FC | 	wrlong	result1, fp
0aa2c     08 4E 85 F1 | 	sub	fp, #8
0aa30     A7 1E 02 FB | 	rdlong	local01, fp
0aa34     04 1E 06 F1 | 	add	local01, #4
0aa38     A7 1E 62 FC | 	wrlong	local01, fp
0aa3c     10 4E 05 F1 | 	add	fp, #16
0aa40     A7 1E 02 FB | 	rdlong	local01, fp
0aa44     04 4E 05 F1 | 	add	fp, #4
0aa48     A7 1E 02 F1 | 	add	local01, fp
0aa4c     0F 01 48 FC | 	wrbyte	#0, local01
0aa50                 | '       if amount=1 then  
0aa50     0C 4E 85 F1 | 	sub	fp, #12
0aa54     A7 1E 02 FB | 	rdlong	local01, fp
0aa58     14 4E 85 F1 | 	sub	fp, #20
0aa5c     01 1E 0E F2 | 	cmp	local01, #1 wz
0aa60     68 00 90 5D |  if_ne	jmp	#LR__0866
0aa64                 | '         get #9,i,line2(0),linelength : i+=linelength
0aa64     0C 4E 05 F1 | 	add	fp, #12
0aa68     A7 14 02 FB | 	rdlong	arg02, fp
0aa6c     14 4E 05 F1 | 	add	fp, #20
0aa70     A7 16 02 F6 | 	mov	arg03, fp
0aa74     04 4E 85 F1 | 	sub	fp, #4
0aa78     A7 18 02 FB | 	rdlong	arg04, fp
0aa7c     1C 4E 85 F1 | 	sub	fp, #28
0aa80     09 12 06 F6 | 	mov	arg01, #9
0aa84     01 1A 06 F6 | 	mov	arg05, #1
0aa88     14 F5 B0 FD | 	call	#__system___basic_get
0aa8c     0C 4E 05 F1 | 	add	fp, #12
0aa90     A7 1E 02 FB | 	rdlong	local01, fp
0aa94     10 4E 05 F1 | 	add	fp, #16
0aa98     A7 1A 02 FB | 	rdlong	arg05, fp
0aa9c     0D 1F 02 F1 | 	add	local01, arg05
0aaa0     10 4E 85 F1 | 	sub	fp, #16
0aaa4     A7 1E 62 FC | 	wrlong	local01, fp
0aaa8     94 4E 05 F1 | 	add	fp, #148
0aaac     A7 1E 02 FB | 	rdlong	local01, fp
0aab0     A0 4E 85 F1 | 	sub	fp, #160
0aab4     56 00 00 FF 
0aab8     E0 E4 05 F1 | 	add	objptr, ##44256
0aabc     F2 1E 62 FC | 	wrlong	local01, objptr
0aac0     56 00 00 FF 
0aac4     E0 E4 85 F1 | 	sub	objptr, ##44256
0aac8     50 5F BF FD | 	call	#_interpret
0aacc                 | LR__0866
0aacc     14 4E 05 F1 | 	add	fp, #20
0aad0     A7 1E 02 FB | 	rdlong	local01, fp
0aad4     14 4E 85 F1 | 	sub	fp, #20
0aad8     01 1E 56 F2 | 	cmps	local01, #1 wc
0aadc     20 FF 9F 3D |  if_ae	jmp	#LR__0865
0aae0                 | '     close #9 
0aae0     09 12 06 F6 | 	mov	arg01, #9
0aae4     E8 35 B1 FD | 	call	#__system__close
0aae8     08 00 90 FD | 	jmp	#LR__0868
0aaec                 | LR__0867
0aaec     1E 12 06 F6 | 	mov	arg01, #30
0aaf0     20 B1 B0 FD | 	call	#_printerror
0aaf4                 | LR__0868
0aaf4                 | LR__0869
0aaf4     A7 F0 03 F6 | 	mov	ptra, fp
0aaf8     B2 00 A0 FD | 	call	#popregs_
0aafc                 | _do_load_ret
0aafc     2D 00 64 FD | 	ret
0ab00                 | 
0ab00                 | ' 
0ab00                 | ' '----------------- Run the program 
0ab00                 | ' 
0ab00                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0ab00                 | ' 
0ab00                 | ' sub do_run
0ab00                 | _do_run
0ab00     01 4A 05 F6 | 	mov	COUNT_, #1
0ab04     A8 00 A0 FD | 	call	#pushregs_
0ab08     69 00 00 FF 
0ab0c     48 E5 05 F1 | 	add	objptr, ##54088
0ab10     F2 1C 02 FB | 	rdlong	arg06, objptr
0ab14     0F 00 00 FF 
0ab18     2C E5 05 F1 | 	add	objptr, ##7980
0ab1c     F2 1C 62 FC | 	wrlong	arg06, objptr
0ab20     04 E4 05 F1 | 	add	objptr, #4
0ab24     F2 00 68 FC | 	wrlong	#0, objptr
0ab28     04 E4 05 F1 | 	add	objptr, #4
0ab2c     FF FF FF FF 
0ab30     F2 FE 6B FC | 	wrlong	##-1, objptr
0ab34                 | ' if inrun>0 then 
0ab34     04 E4 05 F1 | 	add	objptr, #4
0ab38     F2 1C 02 FB | 	rdlong	arg06, objptr
0ab3c     79 00 00 FF 
0ab40     80 E4 85 F1 | 	sub	objptr, ##62080
0ab44     01 1C 16 F2 | 	cmp	arg06, #1 wc
0ab48     30 00 90 CD |  if_b	jmp	#LR__0870
0ab4c     79 00 00 FF 
0ab50     84 E4 05 F1 | 	add	objptr, ##62084
0ab54     F2 12 02 F6 | 	mov	arg01, objptr
0ab58     10 E4 85 F1 | 	sub	objptr, #16
0ab5c     F2 14 02 FB | 	rdlong	arg02, objptr
0ab60     18 16 06 F6 | 	mov	arg03, #24
0ab64     6D 00 00 FF 
0ab68     B4 E5 85 F1 | 	sub	objptr, ##56244
0ab6c     DC DA B0 FD | 	call	#_psram_spin2_read1
0ab70     0B 00 00 FF 
0ab74     C0 E4 85 F1 | 	sub	objptr, ##5824
0ab78                 | '   psram.read1(varptr(runheader),runptr,24)  
0ab78                 | '   return
0ab78     9C 02 90 FD | 	jmp	#LR__0876
0ab7c                 | LR__0870
0ab7c     79 00 00 FF 
0ab80     80 E4 05 F1 | 	add	objptr, ##62080
0ab84     F2 02 68 FC | 	wrlong	#1, objptr
0ab88     04 E4 05 F1 | 	add	objptr, #4
0ab8c     F2 12 02 F6 | 	mov	arg01, objptr
0ab90     10 E4 85 F1 | 	sub	objptr, #16
0ab94     F2 14 02 FB | 	rdlong	arg02, objptr
0ab98     18 16 06 F6 | 	mov	arg03, #24
0ab9c     6D 00 00 FF 
0aba0     B4 E5 85 F1 | 	sub	objptr, ##56244
0aba4     A4 DA B0 FD | 	call	#_psram_spin2_read1
0aba8                 | ' inrun=1
0aba8                 | ' psram.read1(varptr(runheader),runptr,24) 
0aba8                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0aba8     6D 00 00 FF 
0abac     C4 E5 05 F1 | 	add	objptr, ##56260
0abb0     F2 1E 02 FB | 	rdlong	local01, objptr
0abb4     79 00 00 FF 
0abb8     84 E4 85 F1 | 	sub	objptr, ##62084
0abbc     FF FF 7F FF 
0abc0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0abc4     79 00 00 AF 
0abc8     80 E4 05 A1 |  if_e	add	objptr, ##62080
0abcc     F2 00 68 AC |  if_e	wrlong	#0, objptr
0abd0     79 00 00 AF 
0abd4     80 E4 85 A1 |  if_e	sub	objptr, ##62080
0abd8     3C 02 90 AD |  if_e	jmp	#LR__0876
0abdc                 | ' do 
0abdc                 | LR__0871
0abdc                 | '   if runptr<>oldrunptr then
0abdc     79 00 00 FF 
0abe0     74 E4 05 F1 | 	add	objptr, ##62068
0abe4     F2 1E 02 FB | 	rdlong	local01, objptr
0abe8     08 E4 05 F1 | 	add	objptr, #8
0abec     F2 1C 02 FB | 	rdlong	arg06, objptr
0abf0     79 00 00 FF 
0abf4     7C E4 85 F1 | 	sub	objptr, ##62076
0abf8     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0abfc     CC 00 90 AD |  if_e	jmp	#LR__0872
0ac00     79 00 00 FF 
0ac04     84 E4 05 F1 | 	add	objptr, ##62084
0ac08     F2 12 02 F6 | 	mov	arg01, objptr
0ac0c     10 E4 85 F1 | 	sub	objptr, #16
0ac10     F2 14 02 FB | 	rdlong	arg02, objptr
0ac14     18 16 06 F6 | 	mov	arg03, #24
0ac18     6D 00 00 FF 
0ac1c     B4 E5 85 F1 | 	sub	objptr, ##56244
0ac20     28 DA B0 FD | 	call	#_psram_spin2_read1
0ac24     5B 00 00 FF 
0ac28     80 E4 05 F1 | 	add	objptr, ##46720
0ac2c     F2 12 02 F6 | 	mov	arg01, objptr
0ac30     12 00 00 FF 
0ac34     34 E5 05 F1 | 	add	objptr, ##9524
0ac38     F2 14 02 FB | 	rdlong	arg02, objptr
0ac3c     14 00 00 FF 
0ac40     4C E5 85 F1 | 	sub	objptr, ##10572
0ac44     F2 1E 02 FB | 	rdlong	local01, objptr
0ac48     01 1E 66 F0 | 	shl	local01, #1
0ac4c     0F 15 02 F1 | 	add	arg02, local01
0ac50     14 00 00 FF 
0ac54     64 E5 05 F1 | 	add	objptr, ##10596
0ac58     F2 16 02 FB | 	rdlong	arg03, objptr
0ac5c     18 E4 85 F1 | 	sub	objptr, #24
0ac60     F2 1E 02 FB | 	rdlong	local01, objptr
0ac64     0F 17 82 F1 | 	sub	arg03, local01
0ac68     6D 00 00 FF 
0ac6c     B4 E5 85 F1 | 	sub	objptr, ##56244
0ac70     D8 D9 B0 FD | 	call	#_psram_spin2_read1
0ac74     6D 00 00 FF 
0ac78     CC E5 05 F1 | 	add	objptr, ##56268
0ac7c     F2 1E 02 FB | 	rdlong	local01, objptr
0ac80     18 E4 85 F1 | 	sub	objptr, #24
0ac84     F2 1C 02 FB | 	rdlong	arg06, objptr
0ac88     0E 1F 82 F1 | 	sub	local01, arg06
0ac8c     14 00 00 FF 
0ac90     4C E5 85 F1 | 	sub	objptr, ##10572
0ac94     F2 1C 02 FB | 	rdlong	arg06, objptr
0ac98     0E 1F 12 FD | 	qdiv	local01, arg06
0ac9c     05 00 00 FF 
0aca0     18 E4 05 F1 | 	add	objptr, ##2584
0aca4     18 1E 62 FD | 	getqx	local01
0aca8     03 1E 86 F1 | 	sub	local01, #3
0acac     F2 1E 62 FC | 	wrlong	local01, objptr
0acb0     0F 00 00 FF 
0acb4     34 E5 05 F1 | 	add	objptr, ##7988
0acb8     F2 1E 02 FB | 	rdlong	local01, objptr
0acbc     08 E4 05 F1 | 	add	objptr, #8
0acc0     F2 1E 62 FC | 	wrlong	local01, objptr
0acc4     79 00 00 FF 
0acc8     7C E4 85 F1 | 	sub	objptr, ##62076
0accc                 | LR__0872
0accc     79 00 00 FF 
0acd0     98 E4 05 F1 | 	add	objptr, ##62104
0acd4     F2 1E 02 FB | 	rdlong	local01, objptr
0acd8     24 E4 85 F1 | 	sub	objptr, #36
0acdc     F2 1E 62 FC | 	wrlong	local01, objptr
0ace0     04 E4 05 F1 | 	add	objptr, #4
0ace4     F2 12 02 FB | 	rdlong	arg01, objptr
0ace8     79 00 00 FF 
0acec     78 E4 85 F1 | 	sub	objptr, ##62072
0acf0     40 EB BF FD | 	call	#_execute_line
0acf4     79 00 00 FF 
0acf8     78 E4 05 F1 | 	add	objptr, ##62072
0acfc     F2 FA 61 FC | 	wrlong	result1, objptr
0ad00     04 E4 85 F1 | 	sub	objptr, #4
0ad04     F2 1E 02 FB | 	rdlong	local01, objptr
0ad08     79 00 00 FF 
0ad0c     74 E4 85 F1 | 	sub	objptr, ##62068
0ad10     FF FF 3F FF 
0ad14     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0ad18     0C 00 90 AD |  if_e	jmp	#LR__0873
0ad1c     BC DC B0 FD | 	call	#_usbnew_spin2_get_key
0ad20     06 FB 0D F2 | 	cmp	result1, #262 wz
0ad24     B4 FE 9F 5D |  if_ne	jmp	#LR__0871
0ad28                 | LR__0873
0ad28                 | ' if runheader(5)<>$7FFF_FFFF then 
0ad28     79 00 00 FF 
0ad2c     98 E4 05 F1 | 	add	objptr, ##62104
0ad30     F2 1E 02 FB | 	rdlong	local01, objptr
0ad34     79 00 00 FF 
0ad38     98 E4 85 F1 | 	sub	objptr, ##62104
0ad3c     FF FF 3F FF 
0ad40     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0ad44     BC 00 90 AD |  if_e	jmp	#LR__0875
0ad48                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len)  
0ad48     79 00 00 FF 
0ad4c     A4 E4 05 F1 | 	add	objptr, ##62116
0ad50     F2 1E 02 FB | 	rdlong	local01, objptr
0ad54     79 00 00 FF 
0ad58     A4 E4 85 F1 | 	sub	objptr, ##62116
0ad5c     01 1E 0E F2 | 	cmp	local01, #1 wz
0ad60     3C 00 90 5D |  if_ne	jmp	#LR__0874
0ad64     7A 00 00 FF 
0ad68     48 E5 05 F1 | 	add	objptr, ##62792
0ad6c     F2 14 02 FB | 	rdlong	arg02, objptr
0ad70     04 E4 85 F1 | 	sub	objptr, #4
0ad74     F2 1A 02 FB | 	rdlong	arg05, objptr
0ad78     07 12 06 F6 | 	mov	arg01, #7
0ad7c     56 00 00 FF 
0ad80     44 16 06 F6 | 	mov	arg03, ##44100
0ad84     0E 18 C6 F9 | 	decod	arg04, #14
0ad88     01 1C 66 F6 | 	neg	arg06, #1
0ad8c     6F 00 00 FF 
0ad90     84 E4 85 F1 | 	sub	objptr, ##56964
0ad94     CC DF B0 FD | 	call	#_Audio093b_8_sc_spin2_play
0ad98     0B 00 00 FF 
0ad9c     C0 E4 85 F1 | 	sub	objptr, ##5824
0ada0                 | LR__0874
0ada0                 | '   print "Stopped at line ";runheader(0)
0ada0     00 12 06 F6 | 	mov	arg01, #0
0ada4     F8 3C B1 FD | 	call	#__system___getiolock_0425
0ada8     FD 12 02 F6 | 	mov	arg01, result1
0adac     EC E3 B0 FD | 	call	#__system___lockmem
0adb0     45 01 00 FF 
0adb4     E3 15 06 F6 | 	mov	arg02, ##@LR__4603
0adb8     00 12 06 F6 | 	mov	arg01, #0
0adbc     00 16 06 F6 | 	mov	arg03, #0
0adc0     CC F0 B0 FD | 	call	#__system___basic_print_string
0adc4     79 00 00 FF 
0adc8     84 E4 05 F1 | 	add	objptr, ##62084
0adcc     F2 14 02 FB | 	rdlong	arg02, objptr
0add0     79 00 00 FF 
0add4     84 E4 85 F1 | 	sub	objptr, ##62084
0add8     00 12 06 F6 | 	mov	arg01, #0
0addc     00 16 06 F6 | 	mov	arg03, #0
0ade0     0A 18 06 F6 | 	mov	arg04, #10
0ade4     2C F1 B0 FD | 	call	#__system___basic_print_unsigned
0ade8     00 12 06 F6 | 	mov	arg01, #0
0adec     0A 14 06 F6 | 	mov	arg02, #10
0adf0     00 16 06 F6 | 	mov	arg03, #0
0adf4     40 F0 B0 FD | 	call	#__system___basic_print_char
0adf8     00 12 06 F6 | 	mov	arg01, #0
0adfc     A0 3C B1 FD | 	call	#__system___getiolock_0425
0ae00     FD 00 68 FC | 	wrlong	#0, result1
0ae04                 | LR__0875
0ae04     79 00 00 FF 
0ae08     80 E4 05 F1 | 	add	objptr, ##62080
0ae0c     F2 00 68 FC | 	wrlong	#0, objptr
0ae10     79 00 00 FF 
0ae14     80 E4 85 F1 | 	sub	objptr, ##62080
0ae18                 | LR__0876
0ae18     A7 F0 03 F6 | 	mov	ptra, fp
0ae1c     B2 00 A0 FD | 	call	#popregs_
0ae20                 | _do_run_ret
0ae20     2D 00 64 FD | 	ret
0ae24                 | 
0ae24                 | ' 
0ae24                 | ' sub do_defenv
0ae24                 | _do_defenv
0ae24     05 4A 05 F6 | 	mov	COUNT_, #5
0ae28     A8 00 A0 FD | 	call	#pushregs_
0ae2c     84 F0 07 F1 | 	add	ptra, #132
0ae30     69 00 00 FF 
0ae34     44 E5 05 F1 | 	add	objptr, ##54084
0ae38     F2 1A 02 FB | 	rdlong	arg05, objptr
0ae3c     0D 19 02 F6 | 	mov	arg04, arg05
0ae40     01 18 66 F0 | 	shl	arg04, #1
0ae44     0D 19 02 F1 | 	add	arg04, arg05
0ae48     02 18 66 F0 | 	shl	arg04, #2
0ae4c     03 00 00 FF 
0ae50     04 E4 85 F1 | 	sub	objptr, ##1540
0ae54     F2 18 02 F1 | 	add	arg04, objptr
0ae58     0C 1B 02 FB | 	rdlong	arg05, arg04
0ae5c     A7 1A 62 FC | 	wrlong	arg05, fp
0ae60                 | ' 
0ae60                 | ' numpar=compiledline(lineptr_e).result.uresult
0ae60                 | ' 
0ae60                 | ' 
0ae60                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0ae60                 | ' ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0ae60                 | ' ' Every 5 ms added 
0ae60                 | ' ' defsnd channel, a,d,s,r - defines ADSR as in SID 
0ae60                 | ' 
0ae60                 | ' 
0ae60                 | ' if numpar<2 then return
0ae60     02 1A 56 F2 | 	cmps	arg05, #2 wc
0ae64     66 00 00 FF 
0ae68     40 E5 85 F1 | 	sub	objptr, ##52544
0ae6c     B4 09 90 CD |  if_b	jmp	#LR__0906
0ae70                 | ' 
0ae70                 | '  
0ae70                 | ' if numpar=2 then
0ae70     A7 1A 02 FB | 	rdlong	arg05, fp
0ae74     02 1A 0E F2 | 	cmp	arg05, #2 wz
0ae78     20 04 90 5D |  if_ne	jmp	#LR__0889
0ae7c     B8 EA BF FD | 	call	#_pop
0ae80     FF 1A 02 F6 | 	mov	arg05, result3
0ae84     28 4E 05 F1 | 	add	fp, #40
0ae88     A7 FA 61 FC | 	wrlong	result1, fp
0ae8c     04 4E 05 F1 | 	add	fp, #4
0ae90     A7 FC 61 FC | 	wrlong	result2, fp
0ae94     04 4E 05 F1 | 	add	fp, #4
0ae98     A7 1A 62 FC | 	wrlong	arg05, fp
0ae9c                 | '   t1=pop()
0ae9c                 | '   if t1.result_type=result_string2 then 
0ae9c     30 4E 85 F1 | 	sub	fp, #48
0aea0     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0aea4     20 00 90 5D |  if_ne	jmp	#LR__0880
0aea8     28 4E 05 F1 | 	add	fp, #40
0aeac     A7 12 02 FB | 	rdlong	arg01, fp
0aeb0     28 4E 85 F1 | 	sub	fp, #40
0aeb4     E4 1D B0 FD | 	call	#_convertstring
0aeb8     34 4E 05 F1 | 	add	fp, #52
0aebc     A7 FA 61 FC | 	wrlong	result1, fp
0aec0     34 4E 85 F1 | 	sub	fp, #52
0aec4     40 00 90 FD | 	jmp	#LR__0883
0aec8                 | LR__0880
0aec8     30 4E 05 F1 | 	add	fp, #48
0aecc     A7 1A 02 FB | 	rdlong	arg05, fp
0aed0     30 4E 85 F1 | 	sub	fp, #48
0aed4     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0aed8     18 00 90 5D |  if_ne	jmp	#LR__0881
0aedc     28 4E 05 F1 | 	add	fp, #40
0aee0     A7 1A 02 FB | 	rdlong	arg05, fp
0aee4     0C 4E 05 F1 | 	add	fp, #12
0aee8     A7 1A 62 FC | 	wrlong	arg05, fp
0aeec     34 4E 85 F1 | 	sub	fp, #52
0aef0     14 00 90 FD | 	jmp	#LR__0882
0aef4                 | LR__0881
0aef4     45 01 00 FF 
0aef8     F4 1B 06 F6 | 	mov	arg05, ##@LR__4604
0aefc     34 4E 05 F1 | 	add	fp, #52
0af00     A7 1A 62 FC | 	wrlong	arg05, fp
0af04     34 4E 85 F1 | 	sub	fp, #52
0af08                 | LR__0882
0af08                 | LR__0883
0af08                 | ' 
0af08                 | '     
0af08                 | '   if s<>"" then 
0af08     34 4E 05 F1 | 	add	fp, #52
0af0c     A7 12 02 FB | 	rdlong	arg01, fp
0af10     34 4E 85 F1 | 	sub	fp, #52
0af14     45 01 00 FF 
0af18     F5 15 06 F6 | 	mov	arg02, ##@LR__4605
0af1c     A4 E2 B0 FD | 	call	#__system___string_cmp
0af20     00 FA 0D F2 | 	cmp	result1, #0 wz
0af24     10 02 90 AD |  if_e	jmp	#LR__0887
0af28     0C EA BF FD | 	call	#_pop
0af2c     FF 1A 02 F6 | 	mov	arg05, result3
0af30     28 4E 05 F1 | 	add	fp, #40
0af34     A7 FA 61 FC | 	wrlong	result1, fp
0af38     04 4E 05 F1 | 	add	fp, #4
0af3c     A7 FC 61 FC | 	wrlong	result2, fp
0af40     04 4E 05 F1 | 	add	fp, #4
0af44     A7 1A 62 FC | 	wrlong	arg05, fp
0af48     08 4E 85 F1 | 	sub	fp, #8
0af4c     A7 12 02 F6 | 	mov	arg01, fp
0af50     28 4E 85 F1 | 	sub	fp, #40
0af54     78 61 B0 FD | 	call	#_converttoint
0af58     10 4E 05 F1 | 	add	fp, #16
0af5c     A7 FA 61 FC | 	wrlong	result1, fp
0af60     10 4E 85 F1 | 	sub	fp, #16
0af64                 | '     t1=pop()
0af64                 | '     channel=converttoint(t1) 
0af64                 | '     close #9 : open "/sd/media/h/"+s for input as #9
0af64     09 12 06 F6 | 	mov	arg01, #9
0af68     64 31 B1 FD | 	call	#__system__close
0af6c     09 1E 06 F6 | 	mov	local01, #9
0af70     45 01 00 FF 
0af74     F6 13 06 F6 | 	mov	arg01, ##@LR__4606
0af78     34 4E 05 F1 | 	add	fp, #52
0af7c     A7 14 02 FB | 	rdlong	arg02, fp
0af80     34 4E 85 F1 | 	sub	fp, #52
0af84     70 E2 B0 FD | 	call	#__system___string_concat
0af88     FD 14 02 F6 | 	mov	arg02, result1
0af8c     0F 13 02 F6 | 	mov	arg01, local01
0af90     00 16 06 F6 | 	mov	arg03, #0
0af94     08 EE B0 FD | 	call	#__system___basic_open_string
0af98     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0af9c     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0afa0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0afa4     7A 00 00 FF 
0afa8     C4 E5 05 F1 | 	add	objptr, ##62916
0afac     F2 FA 61 FC | 	wrlong	result1, objptr
0afb0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0afb0     7A 00 00 FF 
0afb4     C4 E5 85 F1 | 	sub	objptr, ##62916
0afb8     B0 00 90 AD |  if_e	jmp	#LR__0884
0afbc     00 12 06 F6 | 	mov	arg01, #0
0afc0     DC 3A B1 FD | 	call	#__system___getiolock_0425
0afc4     FD 12 02 F6 | 	mov	arg01, result1
0afc8     D0 E1 B0 FD | 	call	#__system___lockmem
0afcc     46 01 00 FF 
0afd0     03 14 06 F6 | 	mov	arg02, ##@LR__4607
0afd4     00 12 06 F6 | 	mov	arg01, #0
0afd8     00 16 06 F6 | 	mov	arg03, #0
0afdc     B0 EE B0 FD | 	call	#__system___basic_print_string
0afe0     7A 00 00 FF 
0afe4     C4 E5 05 F1 | 	add	objptr, ##62916
0afe8     F2 14 02 FB | 	rdlong	arg02, objptr
0afec     7A 00 00 FF 
0aff0     C4 E5 85 F1 | 	sub	objptr, ##62916
0aff4     00 12 06 F6 | 	mov	arg01, #0
0aff8     00 16 06 F6 | 	mov	arg03, #0
0affc     0A 18 06 F6 | 	mov	arg04, #10
0b000     D0 EE B0 FD | 	call	#__system___basic_print_integer
0b004     46 01 00 FF 
0b008     11 14 06 F6 | 	mov	arg02, ##@LR__4608
0b00c     00 12 06 F6 | 	mov	arg01, #0
0b010     00 16 06 F6 | 	mov	arg03, #0
0b014     78 EE B0 FD | 	call	#__system___basic_print_string
0b018     00 1E 06 F6 | 	mov	local01, #0
0b01c     7A 00 00 FF 
0b020     C4 E5 05 F1 | 	add	objptr, ##62916
0b024     F2 12 02 FB | 	rdlong	arg01, objptr
0b028     7A 00 00 FF 
0b02c     C4 E5 85 F1 | 	sub	objptr, ##62916
0b030     68 07 B1 FD | 	call	#__system___strerror
0b034     FD 14 02 F6 | 	mov	arg02, result1
0b038     0F 13 02 F6 | 	mov	arg01, local01
0b03c     00 16 06 F6 | 	mov	arg03, #0
0b040     4C EE B0 FD | 	call	#__system___basic_print_string
0b044     00 12 06 F6 | 	mov	arg01, #0
0b048     0A 14 06 F6 | 	mov	arg02, #10
0b04c     00 16 06 F6 | 	mov	arg03, #0
0b050     E4 ED B0 FD | 	call	#__system___basic_print_char
0b054     00 12 06 F6 | 	mov	arg01, #0
0b058     44 3A B1 FD | 	call	#__system___getiolock_0425
0b05c     FD 00 68 FC | 	wrlong	#0, result1
0b060     09 12 06 F6 | 	mov	arg01, #9
0b064     68 30 B1 FD | 	call	#__system__close
0b068     B8 07 90 FD | 	jmp	#LR__0906
0b06c                 | LR__0884
0b06c                 | '     get #9,17,envbuf8(channel,0),256
0b06c     10 4E 05 F1 | 	add	fp, #16
0b070     A7 1A 02 FB | 	rdlong	arg05, fp
0b074     10 4E 85 F1 | 	sub	fp, #16
0b078     0D 17 02 F6 | 	mov	arg03, arg05
0b07c     09 16 66 F0 | 	shl	arg03, #9
0b080     0D 17 02 F1 | 	add	arg03, arg05
0b084     2C 00 00 FF 
0b088     CC E4 05 F1 | 	add	objptr, ##22732
0b08c     F2 16 02 F1 | 	add	arg03, objptr
0b090     09 12 06 F6 | 	mov	arg01, #9
0b094     11 14 06 F6 | 	mov	arg02, #17
0b098     00 19 06 F6 | 	mov	arg04, #256
0b09c     01 1A 06 F6 | 	mov	arg05, #1
0b0a0     2C 00 00 FF 
0b0a4     CC E4 85 F1 | 	sub	objptr, ##22732
0b0a8     F4 EE B0 FD | 	call	#__system___basic_get
0b0ac                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0b0ac     04 4E 05 F1 | 	add	fp, #4
0b0b0     A7 FE 69 FC | 	wrlong	#255, fp
0b0b4     04 4E 85 F1 | 	sub	fp, #4
0b0b8     2C 00 00 FF 
0b0bc     CC E4 05 F1 | 	add	objptr, ##22732
0b0c0     97 30 48 FB | 	callpa	#(@LR__0886-@LR__0885)>>2,fcache_load_ptr_
0b0c4                 | LR__0885
0b0c4     10 4E 05 F1 | 	add	fp, #16
0b0c8     A7 1E 02 FB | 	rdlong	local01, fp
0b0cc     0F 1B 02 F6 | 	mov	arg05, local01
0b0d0     09 1A 66 F0 | 	shl	arg05, #9
0b0d4     F2 1A 02 F1 | 	add	arg05, objptr
0b0d8     0C 4E 85 F1 | 	sub	fp, #12
0b0dc     A7 18 02 FB | 	rdlong	arg04, fp
0b0e0     0C 17 02 F6 | 	mov	arg03, arg04
0b0e4     01 16 66 F0 | 	shl	arg03, #1
0b0e8     0D 17 02 F1 | 	add	arg03, arg05
0b0ec     0F 1B 02 F6 | 	mov	arg05, local01
0b0f0     09 1A 66 F0 | 	shl	arg05, #9
0b0f4     0F 1B 02 F1 | 	add	arg05, local01
0b0f8     F2 1A 02 F1 | 	add	arg05, objptr
0b0fc     0D 19 02 F1 | 	add	arg04, arg05
0b100     0C 1F C2 FA | 	rdbyte	local01, arg04
0b104     00 1F 06 FA | 	mul	local01, #256
0b108     0B 1F 52 FC | 	wrword	local01, arg03
0b10c     A7 1E 02 FB | 	rdlong	local01, fp
0b110     01 1E 86 F1 | 	sub	local01, #1
0b114     A7 1E 62 FC | 	wrlong	local01, fp
0b118     04 4E 85 F1 | 	sub	fp, #4
0b11c     00 1E 56 F2 | 	cmps	local01, #0 wc
0b120     A0 FF 9F 3D |  if_ae	jmp	#LR__0885
0b124                 | LR__0886
0b124     2C 00 00 FF 
0b128     CC E4 85 F1 | 	sub	objptr, ##22732
0b12c                 | '     close #9
0b12c     09 12 06 F6 | 	mov	arg01, #9
0b130     9C 2F B1 FD | 	call	#__system__close
0b134                 | '                                                                     '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0b134                 | '     return
0b134     EC 06 90 FD | 	jmp	#LR__0906
0b138                 | LR__0887
0b138     28 4E 05 F1 | 	add	fp, #40
0b13c     A7 12 02 F6 | 	mov	arg01, fp
0b140     28 4E 85 F1 | 	sub	fp, #40
0b144     88 5F B0 FD | 	call	#_converttoint
0b148     FD 1E 02 F6 | 	mov	local01, result1
0b14c     0C 4E 05 F1 | 	add	fp, #12
0b150     A7 1E 62 FC | 	wrlong	local01, fp
0b154     0C 4E 85 F1 | 	sub	fp, #12
0b158                 | '   
0b158                 | '   par=converttoint(t1)  : print par
0b158     00 12 06 F6 | 	mov	arg01, #0
0b15c     40 39 B1 FD | 	call	#__system___getiolock_0425
0b160     FD 12 02 F6 | 	mov	arg01, result1
0b164     34 E0 B0 FD | 	call	#__system___lockmem
0b168     0C 4E 05 F1 | 	add	fp, #12
0b16c     A7 14 02 FB | 	rdlong	arg02, fp
0b170     0C 4E 85 F1 | 	sub	fp, #12
0b174     00 12 06 F6 | 	mov	arg01, #0
0b178     00 16 06 F6 | 	mov	arg03, #0
0b17c     0A 18 06 F6 | 	mov	arg04, #10
0b180     50 ED B0 FD | 	call	#__system___basic_print_integer
0b184     00 12 06 F6 | 	mov	arg01, #0
0b188     0A 14 06 F6 | 	mov	arg02, #10
0b18c     00 16 06 F6 | 	mov	arg03, #0
0b190     A4 EC B0 FD | 	call	#__system___basic_print_char
0b194     00 12 06 F6 | 	mov	arg01, #0
0b198     04 39 B1 FD | 	call	#__system___getiolock_0425
0b19c     FD 00 68 FC | 	wrlong	#0, result1
0b1a0     94 E7 BF FD | 	call	#_pop
0b1a4     FF 1E 02 F6 | 	mov	local01, result3
0b1a8     28 4E 05 F1 | 	add	fp, #40
0b1ac     A7 FA 61 FC | 	wrlong	result1, fp
0b1b0     04 4E 05 F1 | 	add	fp, #4
0b1b4     A7 FC 61 FC | 	wrlong	result2, fp
0b1b8     04 4E 05 F1 | 	add	fp, #4
0b1bc     A7 1E 62 FC | 	wrlong	local01, fp
0b1c0     08 4E 85 F1 | 	sub	fp, #8
0b1c4     A7 12 02 F6 | 	mov	arg01, fp
0b1c8     28 4E 85 F1 | 	sub	fp, #40
0b1cc     00 5F B0 FD | 	call	#_converttoint
0b1d0     10 4E 05 F1 | 	add	fp, #16
0b1d4     A7 FA 61 FC | 	wrlong	result1, fp
0b1d8                 | '   t1=pop()
0b1d8                 | '   channel=converttoint(t1)  
0b1d8                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0b1d8     04 4E 85 F1 | 	sub	fp, #4
0b1dc     A7 1E 0A FB | 	rdlong	local01, fp wz
0b1e0     0C 4E 85 F1 | 	sub	fp, #12
0b1e4     3C 06 90 5D |  if_ne	jmp	#LR__0906
0b1e8     04 4E 05 F1 | 	add	fp, #4
0b1ec     A7 00 68 FC | 	wrlong	#0, fp
0b1f0     04 4E 85 F1 | 	sub	fp, #4
0b1f4                 | LR__0888
0b1f4     10 4E 05 F1 | 	add	fp, #16
0b1f8     A7 1E 02 FB | 	rdlong	local01, fp
0b1fc     0B 1E 66 F0 | 	shl	local01, #11
0b200     0C 00 00 FF 
0b204     CC E4 05 F1 | 	add	objptr, ##6348
0b208     F2 1E 02 F1 | 	add	local01, objptr
0b20c     0C 4E 85 F1 | 	sub	fp, #12
0b210     A7 12 02 FB | 	rdlong	arg01, fp
0b214     09 21 02 F6 | 	mov	local02, arg01
0b218     01 20 66 F0 | 	shl	local02, #1
0b21c     0F 21 02 F1 | 	add	local02, local01
0b220     04 4E 85 F1 | 	sub	fp, #4
0b224     0C 00 00 FF 
0b228     CC E4 85 F1 | 	sub	objptr, ##6348
0b22c     09 13 52 F6 | 	abs	arg01, arg01 wc
0b230     1F 22 C6 C9 |  if_b	decod	local03, #31
0b234     00 22 06 36 |  if_ae	mov	local03, #0
0b238     48 06 B1 FD | 	call	#__system___float_fromuns
0b23c     11 FB 61 F5 | 	xor	result1, local03
0b240     FD 14 02 F6 | 	mov	arg02, result1
0b244     87 E4 1D FF 
0b248     DB 13 06 F6 | 	mov	arg01, ##1003032539
0b24c     38 0A B1 FD | 	call	#__system___float_mul
0b250     FD 12 02 F6 | 	mov	arg01, result1
0b254     6C 13 B1 FD | 	call	#__system____builtin_sinf
0b258     FD 14 02 F6 | 	mov	arg02, result1
0b25c     58 7F 23 FF 
0b260     00 12 06 F6 | 	mov	arg01, ##1191096320
0b264     20 0A B1 FD | 	call	#__system___float_mul
0b268     FD 12 02 F6 | 	mov	arg01, result1
0b26c     01 14 06 F6 | 	mov	arg02, #1
0b270     DC 0E B1 FD | 	call	#__system___float_tointeger
0b274     10 FB 51 FC | 	wrword	result1, local02
0b278     04 4E 05 F1 | 	add	fp, #4
0b27c     A7 20 02 FB | 	rdlong	local02, fp
0b280     01 20 06 F1 | 	add	local02, #1
0b284     A7 20 62 FC | 	wrlong	local02, fp
0b288     04 4E 85 F1 | 	sub	fp, #4
0b28c     02 00 00 FF 
0b290     00 20 56 F2 | 	cmps	local02, ##1024 wc
0b294     5C FF 9F CD |  if_b	jmp	#LR__0888
0b298                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0b298                 | '   return
0b298     88 05 90 FD | 	jmp	#LR__0906
0b29c                 | LR__0889
0b29c                 | ' for i=0 to 15 : harm(i)=0: next i  
0b29c     04 4E 05 F1 | 	add	fp, #4
0b2a0     A7 00 68 FC | 	wrlong	#0, fp
0b2a4     97 16 48 FB | 	callpa	#(@LR__0891-@LR__0890)>>2,fcache_load_ptr_
0b2a8                 | LR__0890
0b2a8     A7 1E 02 FB | 	rdlong	local01, fp
0b2ac     02 1E 66 F0 | 	shl	local01, #2
0b2b0     34 4E 05 F1 | 	add	fp, #52
0b2b4     A7 1E 02 F1 | 	add	local01, fp
0b2b8     0F 01 68 FC | 	wrlong	#0, local01
0b2bc     34 4E 85 F1 | 	sub	fp, #52
0b2c0     A7 1E 02 FB | 	rdlong	local01, fp
0b2c4     01 1E 06 F1 | 	add	local01, #1
0b2c8     A7 1E 62 FC | 	wrlong	local01, fp
0b2cc     10 1E 56 F2 | 	cmps	local01, #16 wc
0b2d0     D4 FF 9F CD |  if_b	jmp	#LR__0890
0b2d4                 | LR__0891
0b2d4     04 4E 85 F1 | 	sub	fp, #4
0b2d8                 | ' for i=numpar to 2 step -1 
0b2d8     A7 1E 02 FB | 	rdlong	local01, fp
0b2dc     04 4E 05 F1 | 	add	fp, #4
0b2e0     A7 1E 62 FC | 	wrlong	local01, fp
0b2e4     04 4E 85 F1 | 	sub	fp, #4
0b2e8                 | LR__0892
0b2e8     4C E6 BF FD | 	call	#_pop
0b2ec     28 4E 05 F1 | 	add	fp, #40
0b2f0     A7 FA 61 FC | 	wrlong	result1, fp
0b2f4     04 4E 05 F1 | 	add	fp, #4
0b2f8     A7 FC 61 FC | 	wrlong	result2, fp
0b2fc     04 4E 05 F1 | 	add	fp, #4
0b300     A7 FE 61 FC | 	wrlong	result3, fp
0b304     2C 4E 85 F1 | 	sub	fp, #44
0b308     A7 1E 02 FB | 	rdlong	local01, fp
0b30c     02 1E 86 F1 | 	sub	local01, #2
0b310     02 1E 66 F0 | 	shl	local01, #2
0b314     34 4E 05 F1 | 	add	fp, #52
0b318     A7 1E 02 F1 | 	add	local01, fp
0b31c     10 4E 85 F1 | 	sub	fp, #16
0b320     A7 12 02 F6 | 	mov	arg01, fp
0b324     28 4E 85 F1 | 	sub	fp, #40
0b328     50 5E B0 FD | 	call	#_converttofloat
0b32c     0F FB 61 FC | 	wrlong	result1, local01
0b330     04 4E 05 F1 | 	add	fp, #4
0b334     A7 1E 02 FB | 	rdlong	local01, fp
0b338     01 1E 86 F1 | 	sub	local01, #1
0b33c     A7 1E 62 FC | 	wrlong	local01, fp
0b340     04 4E 85 F1 | 	sub	fp, #4
0b344     02 1E 56 F2 | 	cmps	local01, #2 wc
0b348     9C FF 9F 3D |  if_ae	jmp	#LR__0892
0b34c     E8 E5 BF FD | 	call	#_pop
0b350     FF 1E 02 F6 | 	mov	local01, result3
0b354     28 4E 05 F1 | 	add	fp, #40
0b358     A7 FA 61 FC | 	wrlong	result1, fp
0b35c     04 4E 05 F1 | 	add	fp, #4
0b360     A7 FC 61 FC | 	wrlong	result2, fp
0b364     04 4E 05 F1 | 	add	fp, #4
0b368     A7 1E 62 FC | 	wrlong	local01, fp
0b36c     08 4E 85 F1 | 	sub	fp, #8
0b370     A7 12 02 F6 | 	mov	arg01, fp
0b374     28 4E 85 F1 | 	sub	fp, #40
0b378     54 5D B0 FD | 	call	#_converttoint
0b37c     FD 1E 02 F6 | 	mov	local01, result1
0b380     10 4E 05 F1 | 	add	fp, #16
0b384     A7 1E 62 FC | 	wrlong	local01, fp
0b388     10 4E 85 F1 | 	sub	fp, #16
0b38c                 | ' t1=pop()
0b38c                 | ' channel=converttoint(t1) : print channel
0b38c     00 12 06 F6 | 	mov	arg01, #0
0b390     0C 37 B1 FD | 	call	#__system___getiolock_0425
0b394     FD 12 02 F6 | 	mov	arg01, result1
0b398     00 DE B0 FD | 	call	#__system___lockmem
0b39c     10 4E 05 F1 | 	add	fp, #16
0b3a0     A7 14 02 FB | 	rdlong	arg02, fp
0b3a4     10 4E 85 F1 | 	sub	fp, #16
0b3a8     00 12 06 F6 | 	mov	arg01, #0
0b3ac     00 16 06 F6 | 	mov	arg03, #0
0b3b0     0A 18 06 F6 | 	mov	arg04, #10
0b3b4     1C EB B0 FD | 	call	#__system___basic_print_integer
0b3b8     00 12 06 F6 | 	mov	arg01, #0
0b3bc     0A 14 06 F6 | 	mov	arg02, #10
0b3c0     00 16 06 F6 | 	mov	arg03, #0
0b3c4     70 EA B0 FD | 	call	#__system___basic_print_char
0b3c8     00 12 06 F6 | 	mov	arg01, #0
0b3cc     D0 36 B1 FD | 	call	#__system___getiolock_0425
0b3d0     FD 00 68 FC | 	wrlong	#0, result1
0b3d4                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0b3d4     08 4E 05 F1 | 	add	fp, #8
0b3d8     02 00 80 FF 
0b3dc     A7 00 68 FC | 	wrlong	##1024, fp
0b3e0     08 4E 85 F1 | 	sub	fp, #8
0b3e4     0C 00 00 FF 
0b3e8     CC E4 05 F1 | 	add	objptr, ##6348
0b3ec     97 18 48 FB | 	callpa	#(@LR__0895-@LR__0893)>>2,fcache_load_ptr_
0b3f0                 | LR__0893
0b3f0     02 00 00 FF 
0b3f4     00 14 DC FC | 	rep	@LR__0896, ##1024
0b3f8                 | LR__0894
0b3f8     10 4E 05 F1 | 	add	fp, #16
0b3fc     A7 20 02 FB | 	rdlong	local02, fp
0b400     0B 20 66 F0 | 	shl	local02, #11
0b404     F2 20 02 F1 | 	add	local02, objptr
0b408     0C 4E 85 F1 | 	sub	fp, #12
0b40c     A7 1E 02 FB | 	rdlong	local01, fp
0b410     04 4E 85 F1 | 	sub	fp, #4
0b414     01 1E 66 F0 | 	shl	local01, #1
0b418     10 1F 02 F1 | 	add	local01, local02
0b41c     0F 01 58 FC | 	wrword	#0, local01
0b420                 | LR__0895
0b420                 | LR__0896
0b420     0C 00 00 FF 
0b424     CC E4 85 F1 | 	sub	objptr, ##6348
0b428     1C 4E 05 F1 | 	add	fp, #28
0b42c     A7 00 68 FC | 	wrlong	#0, fp
0b430                 | ' max=0
0b430                 | ' if harm(0)<0 then
0b430     1C 4E 05 F1 | 	add	fp, #28
0b434     A7 12 02 FB | 	rdlong	arg01, fp
0b438     38 4E 85 F1 | 	sub	fp, #56
0b43c     00 14 06 F6 | 	mov	arg02, #0
0b440     01 16 06 F6 | 	mov	arg03, #1
0b444     74 0C B1 FD | 	call	#__system___float_cmp
0b448     00 FA 55 F2 | 	cmps	result1, #0 wc
0b44c     04 01 90 3D |  if_ae	jmp	#LR__0899
0b450     38 4E 05 F1 | 	add	fp, #56
0b454     A7 FA 01 FB | 	rdlong	result1, fp
0b458     1F FA 05 F4 | 	bitl	result1, #31
0b45c     24 4E 85 F1 | 	sub	fp, #36
0b460     A7 FA 61 FC | 	wrlong	result1, fp
0b464     28 4E 05 F1 | 	add	fp, #40
0b468     A7 FA 01 FB | 	rdlong	result1, fp
0b46c     1F FA 05 F4 | 	bitl	result1, #31
0b470     24 4E 85 F1 | 	sub	fp, #36
0b474     A7 FA 61 FC | 	wrlong	result1, fp
0b478     20 4E 05 F1 | 	add	fp, #32
0b47c     00 C0 9F FF 
0b480     A7 00 68 FC | 	wrlong	##1065353216, fp
0b484     24 4E 85 F1 | 	sub	fp, #36
0b488     A7 1E 02 FB | 	rdlong	local01, fp
0b48c     28 4E 05 F1 | 	add	fp, #40
0b490     A7 1E 62 FC | 	wrlong	local01, fp
0b494     24 4E 85 F1 | 	sub	fp, #36
0b498     A7 1E 02 FB | 	rdlong	local01, fp
0b49c     28 4E 05 F1 | 	add	fp, #40
0b4a0     A7 1E 62 FC | 	wrlong	local01, fp
0b4a4                 | '   harm(0)=1
0b4a4                 | '   harm(1)=even
0b4a4                 | '   harm(2)=odd
0b4a4                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0b4a4     3C 4E 85 F1 | 	sub	fp, #60
0b4a8     A7 06 68 FC | 	wrlong	#3, fp
0b4ac                 | LR__0897
0b4ac     A7 1A 02 FB | 	rdlong	arg05, fp
0b4b0     0D 25 02 F6 | 	mov	local04, arg05
0b4b4     02 24 66 F0 | 	shl	local04, #2
0b4b8     34 4E 05 F1 | 	add	fp, #52
0b4bc     A7 24 02 F1 | 	add	local04, fp
0b4c0     02 1A 86 F1 | 	sub	arg05, #2
0b4c4     02 1A 66 F0 | 	shl	arg05, #2
0b4c8     A7 1A 02 F1 | 	add	arg05, fp
0b4cc     0D 13 02 FB | 	rdlong	arg01, arg05
0b4d0     24 4E 85 F1 | 	sub	fp, #36
0b4d4     A7 14 02 FB | 	rdlong	arg02, fp
0b4d8     14 4E 85 F1 | 	sub	fp, #20
0b4dc     A8 07 B1 FD | 	call	#__system___float_mul
0b4e0     12 FB 61 FC | 	wrlong	result1, local04
0b4e4     04 4E 05 F1 | 	add	fp, #4
0b4e8     A7 26 02 FB | 	rdlong	local05, fp
0b4ec     02 26 06 F1 | 	add	local05, #2
0b4f0     A7 26 62 FC | 	wrlong	local05, fp
0b4f4     10 26 56 F2 | 	cmps	local05, #16 wc
0b4f8     B0 FF 9F CD |  if_b	jmp	#LR__0897
0b4fc                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0b4fc     A7 08 68 FC | 	wrlong	#4, fp
0b500                 | LR__0898
0b500     A7 26 02 FB | 	rdlong	local05, fp
0b504     13 25 02 F6 | 	mov	local04, local05
0b508     02 24 66 F0 | 	shl	local04, #2
0b50c     34 4E 05 F1 | 	add	fp, #52
0b510     A7 24 02 F1 | 	add	local04, fp
0b514     02 26 86 F1 | 	sub	local05, #2
0b518     02 26 66 F0 | 	shl	local05, #2
0b51c     A7 26 02 F1 | 	add	local05, fp
0b520     13 13 02 FB | 	rdlong	arg01, local05
0b524     20 4E 85 F1 | 	sub	fp, #32
0b528     A7 14 02 FB | 	rdlong	arg02, fp
0b52c     18 4E 85 F1 | 	sub	fp, #24
0b530     54 07 B1 FD | 	call	#__system___float_mul
0b534     12 FB 61 FC | 	wrlong	result1, local04
0b538     04 4E 05 F1 | 	add	fp, #4
0b53c     A7 26 02 FB | 	rdlong	local05, fp
0b540     02 26 06 F1 | 	add	local05, #2
0b544     A7 26 62 FC | 	wrlong	local05, fp
0b548     0F 26 56 F2 | 	cmps	local05, #15 wc
0b54c     B0 FF 9F CD |  if_b	jmp	#LR__0898
0b550     04 4E 85 F1 | 	sub	fp, #4
0b554                 | LR__0899
0b554                 | ' if harm(0)>=0 then ' synthesize with harmonics
0b554     38 4E 05 F1 | 	add	fp, #56
0b558     A7 12 02 FB | 	rdlong	arg01, fp
0b55c     38 4E 85 F1 | 	sub	fp, #56
0b560     00 14 06 F6 | 	mov	arg02, #0
0b564     01 16 66 F6 | 	neg	arg03, #1
0b568     50 0B B1 FD | 	call	#__system___float_cmp
0b56c     00 FA 55 F2 | 	cmps	result1, #0 wc
0b570     B0 02 90 CD |  if_b	jmp	#LR__0905
0b574                 | '   for i=0 to 1023
0b574     04 4E 05 F1 | 	add	fp, #4
0b578     A7 00 68 FC | 	wrlong	#0, fp
0b57c     04 4E 85 F1 | 	sub	fp, #4
0b580                 | LR__0900
0b580     20 4E 05 F1 | 	add	fp, #32
0b584     A7 00 68 FC | 	wrlong	#0, fp
0b588                 | '     spl=0
0b588                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0b588     18 4E 85 F1 | 	sub	fp, #24
0b58c     A7 00 68 FC | 	wrlong	#0, fp
0b590                 | LR__0901
0b590     A7 24 02 FB | 	rdlong	local04, fp
0b594     02 24 66 F0 | 	shl	local04, #2
0b598     30 4E 05 F1 | 	add	fp, #48
0b59c     A7 24 02 F1 | 	add	local04, fp
0b5a0     12 27 02 FB | 	rdlong	local05, local04
0b5a4     87 E4 1D FF 
0b5a8     DB 25 06 F6 | 	mov	local04, ##1003032539
0b5ac     34 4E 85 F1 | 	sub	fp, #52
0b5b0     A7 12 02 FB | 	rdlong	arg01, fp
0b5b4     04 4E 85 F1 | 	sub	fp, #4
0b5b8     09 13 52 F6 | 	abs	arg01, arg01 wc
0b5bc     1F 22 C6 C9 |  if_b	decod	local03, #31
0b5c0     00 22 06 36 |  if_ae	mov	local03, #0
0b5c4     BC 02 B1 FD | 	call	#__system___float_fromuns
0b5c8     11 FB 61 F5 | 	xor	result1, local03
0b5cc     FD 14 02 F6 | 	mov	arg02, result1
0b5d0     12 13 02 F6 | 	mov	arg01, local04
0b5d4     B0 06 B1 FD | 	call	#__system___float_mul
0b5d8     FD 24 02 F6 | 	mov	local04, result1
0b5dc     08 4E 05 F1 | 	add	fp, #8
0b5e0     A7 12 02 FB | 	rdlong	arg01, fp
0b5e4     08 4E 85 F1 | 	sub	fp, #8
0b5e8     01 12 06 F1 | 	add	arg01, #1
0b5ec     09 13 52 F6 | 	abs	arg01, arg01 wc
0b5f0     1F 22 C6 C9 |  if_b	decod	local03, #31
0b5f4     00 22 06 36 |  if_ae	mov	local03, #0
0b5f8     88 02 B1 FD | 	call	#__system___float_fromuns
0b5fc     11 FB 61 F5 | 	xor	result1, local03
0b600     FD 14 02 F6 | 	mov	arg02, result1
0b604     12 13 02 F6 | 	mov	arg01, local04
0b608     7C 06 B1 FD | 	call	#__system___float_mul
0b60c     FD 12 02 F6 | 	mov	arg01, result1
0b610     B0 0F B1 FD | 	call	#__system____builtin_sinf
0b614     FD 14 02 F6 | 	mov	arg02, result1
0b618     13 13 02 F6 | 	mov	arg01, local05
0b61c     68 06 B1 FD | 	call	#__system___float_mul
0b620     FD 14 02 F6 | 	mov	arg02, result1
0b624     20 4E 05 F1 | 	add	fp, #32
0b628     A7 12 02 FB | 	rdlong	arg01, fp
0b62c     20 4E 85 F1 | 	sub	fp, #32
0b630     84 02 B1 FD | 	call	#__system___float_add
0b634     20 4E 05 F1 | 	add	fp, #32
0b638     A7 FA 61 FC | 	wrlong	result1, fp
0b63c     18 4E 85 F1 | 	sub	fp, #24
0b640     A7 16 02 FB | 	rdlong	arg03, fp
0b644     01 16 06 F1 | 	add	arg03, #1
0b648     A7 16 62 FC | 	wrlong	arg03, fp
0b64c     10 16 56 F2 | 	cmps	arg03, #16 wc
0b650     3C FF 9F CD |  if_b	jmp	#LR__0901
0b654                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0b654     18 4E 05 F1 | 	add	fp, #24
0b658     A7 12 02 FB | 	rdlong	arg01, fp
0b65c     1F 12 06 F4 | 	bitl	arg01, #31
0b660     04 4E 85 F1 | 	sub	fp, #4
0b664     A7 14 02 FB | 	rdlong	arg02, fp
0b668     1C 4E 85 F1 | 	sub	fp, #28
0b66c     01 16 66 F6 | 	neg	arg03, #1
0b670     48 0A B1 FD | 	call	#__system___float_cmp
0b674     01 FA 55 F2 | 	cmps	result1, #1 wc
0b678     18 00 90 CD |  if_b	jmp	#LR__0902
0b67c     20 4E 05 F1 | 	add	fp, #32
0b680     A7 FA 01 FB | 	rdlong	result1, fp
0b684     1F FA 05 F4 | 	bitl	result1, #31
0b688     04 4E 85 F1 | 	sub	fp, #4
0b68c     A7 FA 61 FC | 	wrlong	result1, fp
0b690     1C 4E 85 F1 | 	sub	fp, #28
0b694                 | LR__0902
0b694     04 4E 05 F1 | 	add	fp, #4
0b698     A7 26 02 FB | 	rdlong	local05, fp
0b69c     01 26 06 F1 | 	add	local05, #1
0b6a0     A7 26 62 FC | 	wrlong	local05, fp
0b6a4     04 4E 85 F1 | 	sub	fp, #4
0b6a8     02 00 00 FF 
0b6ac     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b6b0     CC FE 9F CD |  if_b	jmp	#LR__0900
0b6b4                 | '   for i=0 to 1023
0b6b4     04 4E 05 F1 | 	add	fp, #4
0b6b8     A7 00 68 FC | 	wrlong	#0, fp
0b6bc     04 4E 85 F1 | 	sub	fp, #4
0b6c0                 | LR__0903
0b6c0     20 4E 05 F1 | 	add	fp, #32
0b6c4     A7 00 68 FC | 	wrlong	#0, fp
0b6c8                 | '     spl=0
0b6c8                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0b6c8     18 4E 85 F1 | 	sub	fp, #24
0b6cc     A7 00 68 FC | 	wrlong	#0, fp
0b6d0                 | LR__0904
0b6d0     A7 26 02 FB | 	rdlong	local05, fp
0b6d4     02 26 66 F0 | 	shl	local05, #2
0b6d8     30 4E 05 F1 | 	add	fp, #48
0b6dc     A7 26 02 F1 | 	add	local05, fp
0b6e0     13 27 02 FB | 	rdlong	local05, local05
0b6e4     1C 4E 85 F1 | 	sub	fp, #28
0b6e8     A7 14 02 FB | 	rdlong	arg02, fp
0b6ec     1C 4E 85 F1 | 	sub	fp, #28
0b6f0     58 7F 23 FF 
0b6f4     00 12 06 F6 | 	mov	arg01, ##1191096320
0b6f8     90 07 B1 FD | 	call	#__system___float_div
0b6fc     FD 14 02 F6 | 	mov	arg02, result1
0b700     13 13 02 F6 | 	mov	arg01, local05
0b704     80 05 B1 FD | 	call	#__system___float_mul
0b708     FD 26 02 F6 | 	mov	local05, result1
0b70c     87 E4 1D FF 
0b710     DB 25 06 F6 | 	mov	local04, ##1003032539
0b714     04 4E 05 F1 | 	add	fp, #4
0b718     A7 12 02 FB | 	rdlong	arg01, fp
0b71c     04 4E 85 F1 | 	sub	fp, #4
0b720     09 13 52 F6 | 	abs	arg01, arg01 wc
0b724     1F 22 C6 C9 |  if_b	decod	local03, #31
0b728     00 22 06 36 |  if_ae	mov	local03, #0
0b72c     54 01 B1 FD | 	call	#__system___float_fromuns
0b730     11 FB 61 F5 | 	xor	result1, local03
0b734     FD 14 02 F6 | 	mov	arg02, result1
0b738     12 13 02 F6 | 	mov	arg01, local04
0b73c     48 05 B1 FD | 	call	#__system___float_mul
0b740     FD 24 02 F6 | 	mov	local04, result1
0b744     08 4E 05 F1 | 	add	fp, #8
0b748     A7 12 02 FB | 	rdlong	arg01, fp
0b74c     08 4E 85 F1 | 	sub	fp, #8
0b750     01 12 06 F1 | 	add	arg01, #1
0b754     09 13 52 F6 | 	abs	arg01, arg01 wc
0b758     1F 22 C6 C9 |  if_b	decod	local03, #31
0b75c     00 22 06 36 |  if_ae	mov	local03, #0
0b760     20 01 B1 FD | 	call	#__system___float_fromuns
0b764     11 FB 61 F5 | 	xor	result1, local03
0b768     FD 14 02 F6 | 	mov	arg02, result1
0b76c     12 13 02 F6 | 	mov	arg01, local04
0b770     14 05 B1 FD | 	call	#__system___float_mul
0b774     FD 12 02 F6 | 	mov	arg01, result1
0b778     48 0E B1 FD | 	call	#__system____builtin_sinf
0b77c     FD 14 02 F6 | 	mov	arg02, result1
0b780     13 13 02 F6 | 	mov	arg01, local05
0b784     00 05 B1 FD | 	call	#__system___float_mul
0b788     FD 14 02 F6 | 	mov	arg02, result1
0b78c     20 4E 05 F1 | 	add	fp, #32
0b790     A7 12 02 FB | 	rdlong	arg01, fp
0b794     20 4E 85 F1 | 	sub	fp, #32
0b798     1C 01 B1 FD | 	call	#__system___float_add
0b79c     20 4E 05 F1 | 	add	fp, #32
0b7a0     A7 FA 61 FC | 	wrlong	result1, fp
0b7a4     18 4E 85 F1 | 	sub	fp, #24
0b7a8     A7 26 02 FB | 	rdlong	local05, fp
0b7ac     01 26 06 F1 | 	add	local05, #1
0b7b0     A7 26 62 FC | 	wrlong	local05, fp
0b7b4     10 26 56 F2 | 	cmps	local05, #16 wc
0b7b8     14 FF 9F CD |  if_b	jmp	#LR__0904
0b7bc     08 4E 05 F1 | 	add	fp, #8
0b7c0     A7 26 02 FB | 	rdlong	local05, fp
0b7c4     0B 26 66 F0 | 	shl	local05, #11
0b7c8     0C 00 00 FF 
0b7cc     CC E4 05 F1 | 	add	objptr, ##6348
0b7d0     F2 26 02 F1 | 	add	local05, objptr
0b7d4     0C 4E 85 F1 | 	sub	fp, #12
0b7d8     A7 20 02 FB | 	rdlong	local02, fp
0b7dc     01 20 66 F0 | 	shl	local02, #1
0b7e0     13 21 02 F1 | 	add	local02, local05
0b7e4     1C 4E 05 F1 | 	add	fp, #28
0b7e8     A7 12 02 FB | 	rdlong	arg01, fp
0b7ec     20 4E 85 F1 | 	sub	fp, #32
0b7f0     0C 00 00 FF 
0b7f4     CC E4 85 F1 | 	sub	objptr, ##6348
0b7f8     01 14 06 F6 | 	mov	arg02, #1
0b7fc     50 09 B1 FD | 	call	#__system___float_tointeger
0b800     10 FB 51 FC | 	wrword	result1, local02
0b804     04 4E 05 F1 | 	add	fp, #4
0b808     A7 26 02 FB | 	rdlong	local05, fp
0b80c     01 26 06 F1 | 	add	local05, #1
0b810     A7 26 62 FC | 	wrlong	local05, fp
0b814     04 4E 85 F1 | 	sub	fp, #4
0b818     02 00 00 FF 
0b81c     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b820     9C FE 9F CD |  if_b	jmp	#LR__0903
0b824                 | LR__0905
0b824                 | LR__0906
0b824     A7 F0 03 F6 | 	mov	ptra, fp
0b828     B2 00 A0 FD | 	call	#popregs_
0b82c                 | _do_defenv_ret
0b82c     2D 00 64 FD | 	ret
0b830                 | 
0b830                 | ' 
0b830                 | ' 
0b830                 | ' sub do_play
0b830                 | _do_play
0b830     04 4A 05 F6 | 	mov	COUNT_, #4
0b834     A8 00 A0 FD | 	call	#pushregs_
0b838     38 F0 07 F1 | 	add	ptra, #56
0b83c     14 4E 05 F1 | 	add	fp, #20
0b840     A7 00 68 FC | 	wrlong	#0, fp
0b844     04 4E 05 F1 | 	add	fp, #4
0b848     A7 70 6B FC | 	wrlong	#440, fp
0b84c     04 4E 05 F1 | 	add	fp, #4
0b850     A7 00 68 FC | 	wrlong	#0, fp
0b854     04 4E 05 F1 | 	add	fp, #4
0b858     20 00 80 FF 
0b85c     A7 00 68 FC | 	wrlong	##16384, fp
0b860     04 4E 05 F1 | 	add	fp, #4
0b864     FF FF FF FF 
0b868     A7 FE 6B FC | 	wrlong	##-1, fp
0b86c     24 4E 85 F1 | 	sub	fp, #36
0b870     69 00 00 FF 
0b874     44 E5 05 F1 | 	add	objptr, ##54084
0b878     F2 1E 02 FB | 	rdlong	local01, objptr
0b87c     0F 21 02 F6 | 	mov	local02, local01
0b880     01 20 66 F0 | 	shl	local02, #1
0b884     0F 21 02 F1 | 	add	local02, local01
0b888     02 20 66 F0 | 	shl	local02, #2
0b88c     03 00 00 FF 
0b890     04 E4 85 F1 | 	sub	objptr, ##1540
0b894     F2 20 02 F1 | 	add	local02, objptr
0b898     10 23 02 FB | 	rdlong	local03, local02
0b89c     A7 22 62 FC | 	wrlong	local03, fp
0b8a0                 | ' 
0b8a0                 | ' params(0)=0 : params(1)=440 : params(2)=0 : params(3)=16384 : params(4)=-1
0b8a0                 | ' 
0b8a0                 | ' numpar=compiledline(lineptr_e).result.uresult
0b8a0                 | ' for i=numpar to 1 step -1 
0b8a0     04 4E 05 F1 | 	add	fp, #4
0b8a4     A7 22 62 FC | 	wrlong	local03, fp
0b8a8     04 4E 85 F1 | 	sub	fp, #4
0b8ac     66 00 00 FF 
0b8b0     40 E5 85 F1 | 	sub	objptr, ##52544
0b8b4                 | LR__0910
0b8b4     80 E0 BF FD | 	call	#_pop
0b8b8     2C 4E 05 F1 | 	add	fp, #44
0b8bc     A7 FA 61 FC | 	wrlong	result1, fp
0b8c0     04 4E 05 F1 | 	add	fp, #4
0b8c4     A7 FC 61 FC | 	wrlong	result2, fp
0b8c8     04 4E 05 F1 | 	add	fp, #4
0b8cc     A7 FE 61 FC | 	wrlong	result3, fp
0b8d0     30 4E 85 F1 | 	sub	fp, #48
0b8d4     A7 20 02 FB | 	rdlong	local02, fp
0b8d8     01 20 86 F1 | 	sub	local02, #1
0b8dc     02 20 66 F0 | 	shl	local02, #2
0b8e0     10 4E 05 F1 | 	add	fp, #16
0b8e4     A7 20 02 F1 | 	add	local02, fp
0b8e8     18 4E 05 F1 | 	add	fp, #24
0b8ec     A7 12 02 F6 | 	mov	arg01, fp
0b8f0     2C 4E 85 F1 | 	sub	fp, #44
0b8f4     84 58 B0 FD | 	call	#_converttofloat
0b8f8     FD 12 02 F6 | 	mov	arg01, result1
0b8fc     00 14 06 F6 | 	mov	arg02, #0
0b900     4C 08 B1 FD | 	call	#__system___float_tointeger
0b904     10 FB 61 FC | 	wrlong	result1, local02
0b908     04 4E 05 F1 | 	add	fp, #4
0b90c     A7 22 02 FB | 	rdlong	local03, fp
0b910     01 22 86 F1 | 	sub	local03, #1
0b914     A7 22 62 FC | 	wrlong	local03, fp
0b918     04 4E 85 F1 | 	sub	fp, #4
0b91c     01 22 56 F2 | 	cmps	local03, #1 wc
0b920     90 FF 9F 3D |  if_ae	jmp	#LR__0910
0b924     56 00 00 FF 
0b928     D4 E4 05 F1 | 	add	objptr, ##44244
0b92c     F2 22 02 FB | 	rdlong	local03, objptr
0b930     56 00 00 FF 
0b934     D4 E4 85 F1 | 	sub	objptr, ##44244
0b938     14 4E 05 F1 | 	add	fp, #20
0b93c     A7 1E 02 FB | 	rdlong	local01, fp
0b940     06 1E 66 F0 | 	shl	local01, #6
0b944     0F 23 02 F1 | 	add	local03, local01
0b948     0C 4E 85 F1 | 	sub	fp, #12
0b94c     A7 22 62 FC | 	wrlong	local03, fp
0b950     10 4E 05 F1 | 	add	fp, #16
0b954     A7 12 02 FB | 	rdlong	arg01, fp
0b958     18 4E 85 F1 | 	sub	fp, #24
0b95c     09 13 52 F6 | 	abs	arg01, arg01 wc
0b960     1F 24 C6 C9 |  if_b	decod	local04, #31
0b964     00 24 06 36 |  if_ae	mov	local04, #0
0b968     18 FF B0 FD | 	call	#__system___float_fromuns
0b96c     12 FB 61 F5 | 	xor	result1, local04
0b970     FD 12 02 F6 | 	mov	arg01, result1
0b974     F1 46 20 FF 
0b978     6C 14 06 F6 | 	mov	arg02, ##1083040364
0b97c     08 03 B1 FD | 	call	#__system___float_mul
0b980     FD 12 02 F6 | 	mov	arg01, result1
0b984     01 14 06 F6 | 	mov	arg02, #1
0b988     C4 07 B1 FD | 	call	#__system___float_tointeger
0b98c     10 4E 05 F1 | 	add	fp, #16
0b990     A7 FA 61 FC | 	wrlong	result1, fp
0b994     08 4E 85 F1 | 	sub	fp, #8
0b998     A7 12 02 FB | 	rdlong	arg01, fp
0b99c     08 12 06 F1 | 	add	arg01, #8
0b9a0     0C 4E 05 F1 | 	add	fp, #12
0b9a4     A7 14 02 FB | 	rdlong	arg02, fp
0b9a8     0B 14 66 F0 | 	shl	arg02, #11
0b9ac     0C 00 00 FF 
0b9b0     CC E4 05 F1 | 	add	objptr, ##6348
0b9b4     F2 14 02 F1 | 	add	arg02, objptr
0b9b8     0C 00 00 FF 
0b9bc     CC E4 85 F1 | 	sub	objptr, ##6348
0b9c0     00 00 60 FF 
0b9c4     00 14 06 F1 | 	add	arg02, ##-1073741824
0b9c8     09 15 62 FC | 	wrlong	arg02, arg01
0b9cc     0C 4E 85 F1 | 	sub	fp, #12
0b9d0     A7 12 02 FB | 	rdlong	arg01, fp
0b9d4     10 12 06 F1 | 	add	arg01, #16
0b9d8     04 00 80 FF 
0b9dc     09 01 68 FC | 	wrlong	##2048, arg01
0b9e0     A7 12 02 FB | 	rdlong	arg01, fp
0b9e4     0C 12 06 F1 | 	add	arg01, #12
0b9e8     09 01 68 FC | 	wrlong	#0, arg01
0b9ec     A7 12 02 FB | 	rdlong	arg01, fp
0b9f0     14 12 06 F1 | 	add	arg01, #20
0b9f4     18 4E 05 F1 | 	add	fp, #24
0b9f8     A7 14 02 FB | 	rdlong	arg02, fp
0b9fc     09 15 52 FC | 	wrword	arg02, arg01
0ba00     18 4E 85 F1 | 	sub	fp, #24
0ba04     A7 12 02 FB | 	rdlong	arg01, fp
0ba08     16 12 06 F1 | 	add	arg01, #22
0ba0c     10 00 80 FF 
0ba10     09 01 58 FC | 	wrword	##8192, arg01
0ba14     A7 12 02 FB | 	rdlong	arg01, fp
0ba18     18 12 06 F1 | 	add	arg01, #24
0ba1c     09 79 58 FC | 	wrword	#60, arg01
0ba20     A7 12 02 FB | 	rdlong	arg01, fp
0ba24     1A 12 06 F1 | 	add	arg01, #26
0ba28     08 4E 05 F1 | 	add	fp, #8
0ba2c     A7 14 02 FB | 	rdlong	arg02, fp
0ba30     09 15 52 FC | 	wrword	arg02, arg01
0ba34     08 4E 85 F1 | 	sub	fp, #8
0ba38     A7 12 02 FB | 	rdlong	arg01, fp
0ba3c     1C 12 06 F1 | 	add	arg01, #28
0ba40     09 01 58 FC | 	wrword	#0, arg01
0ba44     A7 12 02 FB | 	rdlong	arg01, fp
0ba48     20 12 06 F1 | 	add	arg01, #32
0ba4c     09 01 68 FC | 	wrlong	#0, arg01
0ba50                 | ' base2=base+64*params(0)
0ba50                 | ' skip=round(params(1)*4.4338896)
0ba50                 | '  
0ba50                 | ' lpoke base2+8,varptr(samplebuf(params(0),0))+$C000_0000 
0ba50                 | ' lpoke base2+16,2048
0ba50                 | ' lpoke base2+12,0
0ba50                 | ' dpoke base2+20,params(3)
0ba50                 | ' dpoke base2+22,8192
0ba50                 | ' dpoke base2+24,60  'spl=59122.8 57.773711 Hz at skip 256, 0.225535610 per skip
0ba50                 | ' dpoke base2+26,skip ' todo: use skip to make accurate sample rate
0ba50                 | ' dpoke base2+28,$4000_0000
0ba50                 | ' lpoke base2+32,0 
0ba50                 | ' if params(4)=-1 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(params(4),0))
0ba50     1C 4E 05 F1 | 	add	fp, #28
0ba54     A7 22 02 FB | 	rdlong	local03, fp
0ba58     24 4E 85 F1 | 	sub	fp, #36
0ba5c     FF FF 7F FF 
0ba60     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0ba64     18 00 90 5D |  if_ne	jmp	#LR__0911
0ba68     08 4E 05 F1 | 	add	fp, #8
0ba6c     A7 12 02 FB | 	rdlong	arg01, fp
0ba70     08 4E 85 F1 | 	sub	fp, #8
0ba74     24 12 06 F1 | 	add	arg01, #36
0ba78     09 01 68 FC | 	wrlong	#0, arg01
0ba7c     34 00 90 FD | 	jmp	#LR__0912
0ba80                 | LR__0911
0ba80     08 4E 05 F1 | 	add	fp, #8
0ba84     A7 12 02 FB | 	rdlong	arg01, fp
0ba88     24 12 06 F1 | 	add	arg01, #36
0ba8c     1C 4E 05 F1 | 	add	fp, #28
0ba90     A7 14 02 FB | 	rdlong	arg02, fp
0ba94     24 4E 85 F1 | 	sub	fp, #36
0ba98     09 14 66 F0 | 	shl	arg02, #9
0ba9c     2C 00 00 FF 
0baa0     CC E4 05 F1 | 	add	objptr, ##22732
0baa4     F2 14 02 F1 | 	add	arg02, objptr
0baa8     2C 00 00 FF 
0baac     CC E4 85 F1 | 	sub	objptr, ##22732
0bab0     09 15 62 FC | 	wrlong	arg02, arg01
0bab4                 | LR__0912
0bab4     08 4E 05 F1 | 	add	fp, #8
0bab8     A7 12 02 FB | 	rdlong	arg01, fp
0babc     28 12 06 F1 | 	add	arg01, #40
0bac0     01 00 80 FF 
0bac4     09 01 68 FC | 	wrlong	##512, arg01
0bac8     A7 12 02 FB | 	rdlong	arg01, fp
0bacc     08 4E 85 F1 | 	sub	fp, #8
0bad0     2C 12 06 F1 | 	add	arg01, #44
0bad4     09 FF 69 FC | 	wrlong	#255, arg01
0bad8     A7 F0 03 F6 | 	mov	ptra, fp
0badc     B2 00 A0 FD | 	call	#popregs_
0bae0                 | _do_play_ret
0bae0     2D 00 64 FD | 	ret
0bae4                 | 
0bae4                 | ' 
0bae4                 | ' 
0bae4                 | ' 
0bae4                 | ' sub do_defsnd
0bae4                 | _do_defsnd
0bae4     05 4A 05 F6 | 	mov	COUNT_, #5
0bae8     A8 00 A0 FD | 	call	#pushregs_
0baec     84 F0 07 F1 | 	add	ptra, #132
0baf0     69 00 00 FF 
0baf4     44 E5 05 F1 | 	add	objptr, ##54084
0baf8     F2 1A 02 FB | 	rdlong	arg05, objptr
0bafc     0D 19 02 F6 | 	mov	arg04, arg05
0bb00     01 18 66 F0 | 	shl	arg04, #1
0bb04     0D 19 02 F1 | 	add	arg04, arg05
0bb08     02 18 66 F0 | 	shl	arg04, #2
0bb0c     03 00 00 FF 
0bb10     04 E4 85 F1 | 	sub	objptr, ##1540
0bb14     F2 18 02 F1 | 	add	arg04, objptr
0bb18     0C 1B 02 FB | 	rdlong	arg05, arg04
0bb1c     A7 1A 62 FC | 	wrlong	arg05, fp
0bb20                 | ' 
0bb20                 | ' numpar=compiledline(lineptr_e).result.uresult
0bb20                 | ' 
0bb20                 | ' 
0bb20                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0bb20                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0bb20                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0bb20                 | ' ' defsnd channel, oneint - defines waveshape as in SID and 0=sinewave
0bb20                 | ' 
0bb20                 | ' if numpar<2 then return
0bb20     02 1A 56 F2 | 	cmps	arg05, #2 wc
0bb24     66 00 00 FF 
0bb28     40 E5 85 F1 | 	sub	objptr, ##52544
0bb2c     2C 09 90 CD |  if_b	jmp	#LR__0944
0bb30                 | ' 
0bb30                 | '  
0bb30                 | ' if numpar=2 then
0bb30     A7 1A 02 FB | 	rdlong	arg05, fp
0bb34     02 1A 0E F2 | 	cmp	arg05, #2 wz
0bb38     98 03 90 5D |  if_ne	jmp	#LR__0927
0bb3c     F8 DD BF FD | 	call	#_pop
0bb40     FF 1A 02 F6 | 	mov	arg05, result3
0bb44     28 4E 05 F1 | 	add	fp, #40
0bb48     A7 FA 61 FC | 	wrlong	result1, fp
0bb4c     04 4E 05 F1 | 	add	fp, #4
0bb50     A7 FC 61 FC | 	wrlong	result2, fp
0bb54     04 4E 05 F1 | 	add	fp, #4
0bb58     A7 1A 62 FC | 	wrlong	arg05, fp
0bb5c                 | '   t1=pop()
0bb5c                 | '   if t1.result_type=result_string2 then 
0bb5c     30 4E 85 F1 | 	sub	fp, #48
0bb60     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0bb64     20 00 90 5D |  if_ne	jmp	#LR__0920
0bb68     28 4E 05 F1 | 	add	fp, #40
0bb6c     A7 12 02 FB | 	rdlong	arg01, fp
0bb70     28 4E 85 F1 | 	sub	fp, #40
0bb74     24 11 B0 FD | 	call	#_convertstring
0bb78     34 4E 05 F1 | 	add	fp, #52
0bb7c     A7 FA 61 FC | 	wrlong	result1, fp
0bb80     34 4E 85 F1 | 	sub	fp, #52
0bb84     40 00 90 FD | 	jmp	#LR__0923
0bb88                 | LR__0920
0bb88     30 4E 05 F1 | 	add	fp, #48
0bb8c     A7 1A 02 FB | 	rdlong	arg05, fp
0bb90     30 4E 85 F1 | 	sub	fp, #48
0bb94     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0bb98     18 00 90 5D |  if_ne	jmp	#LR__0921
0bb9c     28 4E 05 F1 | 	add	fp, #40
0bba0     A7 1A 02 FB | 	rdlong	arg05, fp
0bba4     0C 4E 05 F1 | 	add	fp, #12
0bba8     A7 1A 62 FC | 	wrlong	arg05, fp
0bbac     34 4E 85 F1 | 	sub	fp, #52
0bbb0     14 00 90 FD | 	jmp	#LR__0922
0bbb4                 | LR__0921
0bbb4     46 01 00 FF 
0bbb8     14 1A 06 F6 | 	mov	arg05, ##@LR__4609
0bbbc     34 4E 05 F1 | 	add	fp, #52
0bbc0     A7 1A 62 FC | 	wrlong	arg05, fp
0bbc4     34 4E 85 F1 | 	sub	fp, #52
0bbc8                 | LR__0922
0bbc8                 | LR__0923
0bbc8                 | ' 
0bbc8                 | '     
0bbc8                 | '   if s<>"" then 
0bbc8     34 4E 05 F1 | 	add	fp, #52
0bbcc     A7 12 02 FB | 	rdlong	arg01, fp
0bbd0     34 4E 85 F1 | 	sub	fp, #52
0bbd4     46 01 00 FF 
0bbd8     15 14 06 F6 | 	mov	arg02, ##@LR__4610
0bbdc     E4 D5 B0 FD | 	call	#__system___string_cmp
0bbe0     00 FA 0D F2 | 	cmp	result1, #0 wz
0bbe4     88 01 90 AD |  if_e	jmp	#LR__0925
0bbe8     4C DD BF FD | 	call	#_pop
0bbec     FF 1A 02 F6 | 	mov	arg05, result3
0bbf0     28 4E 05 F1 | 	add	fp, #40
0bbf4     A7 FA 61 FC | 	wrlong	result1, fp
0bbf8     04 4E 05 F1 | 	add	fp, #4
0bbfc     A7 FC 61 FC | 	wrlong	result2, fp
0bc00     04 4E 05 F1 | 	add	fp, #4
0bc04     A7 1A 62 FC | 	wrlong	arg05, fp
0bc08     08 4E 85 F1 | 	sub	fp, #8
0bc0c     A7 12 02 F6 | 	mov	arg01, fp
0bc10     28 4E 85 F1 | 	sub	fp, #40
0bc14     B8 54 B0 FD | 	call	#_converttoint
0bc18     10 4E 05 F1 | 	add	fp, #16
0bc1c     A7 FA 61 FC | 	wrlong	result1, fp
0bc20     10 4E 85 F1 | 	sub	fp, #16
0bc24                 | '     t1=pop()
0bc24                 | '     channel=converttoint(t1) 
0bc24                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0bc24     09 12 06 F6 | 	mov	arg01, #9
0bc28     A4 24 B1 FD | 	call	#__system__close
0bc2c     09 1E 06 F6 | 	mov	local01, #9
0bc30     46 01 00 FF 
0bc34     16 12 06 F6 | 	mov	arg01, ##@LR__4611
0bc38     34 4E 05 F1 | 	add	fp, #52
0bc3c     A7 14 02 FB | 	rdlong	arg02, fp
0bc40     34 4E 85 F1 | 	sub	fp, #52
0bc44     B0 D5 B0 FD | 	call	#__system___string_concat
0bc48     FD 14 02 F6 | 	mov	arg02, result1
0bc4c     0F 13 02 F6 | 	mov	arg01, local01
0bc50     00 16 06 F6 | 	mov	arg03, #0
0bc54     48 E1 B0 FD | 	call	#__system___basic_open_string
0bc58     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0bc5c     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0bc60     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0bc64     7A 00 00 FF 
0bc68     C4 E5 05 F1 | 	add	objptr, ##62916
0bc6c     F2 FA 61 FC | 	wrlong	result1, objptr
0bc70                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0bc70     7A 00 00 FF 
0bc74     C4 E5 85 F1 | 	sub	objptr, ##62916
0bc78     B0 00 90 AD |  if_e	jmp	#LR__0924
0bc7c     00 12 06 F6 | 	mov	arg01, #0
0bc80     1C 2E B1 FD | 	call	#__system___getiolock_0425
0bc84     FD 12 02 F6 | 	mov	arg01, result1
0bc88     10 D5 B0 FD | 	call	#__system___lockmem
0bc8c     46 01 00 FF 
0bc90     23 14 06 F6 | 	mov	arg02, ##@LR__4612
0bc94     00 12 06 F6 | 	mov	arg01, #0
0bc98     00 16 06 F6 | 	mov	arg03, #0
0bc9c     F0 E1 B0 FD | 	call	#__system___basic_print_string
0bca0     7A 00 00 FF 
0bca4     C4 E5 05 F1 | 	add	objptr, ##62916
0bca8     F2 14 02 FB | 	rdlong	arg02, objptr
0bcac     7A 00 00 FF 
0bcb0     C4 E5 85 F1 | 	sub	objptr, ##62916
0bcb4     00 12 06 F6 | 	mov	arg01, #0
0bcb8     00 16 06 F6 | 	mov	arg03, #0
0bcbc     0A 18 06 F6 | 	mov	arg04, #10
0bcc0     10 E2 B0 FD | 	call	#__system___basic_print_integer
0bcc4     46 01 00 FF 
0bcc8     31 14 06 F6 | 	mov	arg02, ##@LR__4613
0bccc     00 12 06 F6 | 	mov	arg01, #0
0bcd0     00 16 06 F6 | 	mov	arg03, #0
0bcd4     B8 E1 B0 FD | 	call	#__system___basic_print_string
0bcd8     00 1E 06 F6 | 	mov	local01, #0
0bcdc     7A 00 00 FF 
0bce0     C4 E5 05 F1 | 	add	objptr, ##62916
0bce4     F2 12 02 FB | 	rdlong	arg01, objptr
0bce8     7A 00 00 FF 
0bcec     C4 E5 85 F1 | 	sub	objptr, ##62916
0bcf0     A8 FA B0 FD | 	call	#__system___strerror
0bcf4     FD 14 02 F6 | 	mov	arg02, result1
0bcf8     0F 13 02 F6 | 	mov	arg01, local01
0bcfc     00 16 06 F6 | 	mov	arg03, #0
0bd00     8C E1 B0 FD | 	call	#__system___basic_print_string
0bd04     00 12 06 F6 | 	mov	arg01, #0
0bd08     0A 14 06 F6 | 	mov	arg02, #10
0bd0c     00 16 06 F6 | 	mov	arg03, #0
0bd10     24 E1 B0 FD | 	call	#__system___basic_print_char
0bd14     00 12 06 F6 | 	mov	arg01, #0
0bd18     84 2D B1 FD | 	call	#__system___getiolock_0425
0bd1c     FD 00 68 FC | 	wrlong	#0, result1
0bd20     09 12 06 F6 | 	mov	arg01, #9
0bd24     A8 23 B1 FD | 	call	#__system__close
0bd28     30 07 90 FD | 	jmp	#LR__0944
0bd2c                 | LR__0924
0bd2c                 | '     get #9,17,samplebuf(channel,0),1024
0bd2c     10 4E 05 F1 | 	add	fp, #16
0bd30     A7 16 02 FB | 	rdlong	arg03, fp
0bd34     10 4E 85 F1 | 	sub	fp, #16
0bd38     0B 16 66 F0 | 	shl	arg03, #11
0bd3c     0C 00 00 FF 
0bd40     CC E4 05 F1 | 	add	objptr, ##6348
0bd44     F2 16 02 F1 | 	add	arg03, objptr
0bd48     09 12 06 F6 | 	mov	arg01, #9
0bd4c     11 14 06 F6 | 	mov	arg02, #17
0bd50     0A 18 C6 F9 | 	decod	arg04, #10
0bd54     02 1A 06 F6 | 	mov	arg05, #2
0bd58     0C 00 00 FF 
0bd5c     CC E4 85 F1 | 	sub	objptr, ##6348
0bd60     3C E2 B0 FD | 	call	#__system___basic_get
0bd64                 | '     close #9
0bd64     09 12 06 F6 | 	mov	arg01, #9
0bd68     64 23 B1 FD | 	call	#__system__close
0bd6c                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0bd6c                 | '     return
0bd6c     EC 06 90 FD | 	jmp	#LR__0944
0bd70                 | LR__0925
0bd70     28 4E 05 F1 | 	add	fp, #40
0bd74     A7 12 02 F6 | 	mov	arg01, fp
0bd78     28 4E 85 F1 | 	sub	fp, #40
0bd7c     50 53 B0 FD | 	call	#_converttoint
0bd80     FD 1E 02 F6 | 	mov	local01, result1
0bd84     0C 4E 05 F1 | 	add	fp, #12
0bd88     A7 1E 62 FC | 	wrlong	local01, fp
0bd8c     0C 4E 85 F1 | 	sub	fp, #12
0bd90                 | '   
0bd90                 | '   par=converttoint(t1)  : print par
0bd90     00 12 06 F6 | 	mov	arg01, #0
0bd94     08 2D B1 FD | 	call	#__system___getiolock_0425
0bd98     FD 12 02 F6 | 	mov	arg01, result1
0bd9c     FC D3 B0 FD | 	call	#__system___lockmem
0bda0     0C 4E 05 F1 | 	add	fp, #12
0bda4     A7 14 02 FB | 	rdlong	arg02, fp
0bda8     0C 4E 85 F1 | 	sub	fp, #12
0bdac     00 12 06 F6 | 	mov	arg01, #0
0bdb0     00 16 06 F6 | 	mov	arg03, #0
0bdb4     0A 18 06 F6 | 	mov	arg04, #10
0bdb8     18 E1 B0 FD | 	call	#__system___basic_print_integer
0bdbc     00 12 06 F6 | 	mov	arg01, #0
0bdc0     0A 14 06 F6 | 	mov	arg02, #10
0bdc4     00 16 06 F6 | 	mov	arg03, #0
0bdc8     6C E0 B0 FD | 	call	#__system___basic_print_char
0bdcc     00 12 06 F6 | 	mov	arg01, #0
0bdd0     CC 2C B1 FD | 	call	#__system___getiolock_0425
0bdd4     FD 00 68 FC | 	wrlong	#0, result1
0bdd8     5C DB BF FD | 	call	#_pop
0bddc     FF 1E 02 F6 | 	mov	local01, result3
0bde0     28 4E 05 F1 | 	add	fp, #40
0bde4     A7 FA 61 FC | 	wrlong	result1, fp
0bde8     04 4E 05 F1 | 	add	fp, #4
0bdec     A7 FC 61 FC | 	wrlong	result2, fp
0bdf0     04 4E 05 F1 | 	add	fp, #4
0bdf4     A7 1E 62 FC | 	wrlong	local01, fp
0bdf8     08 4E 85 F1 | 	sub	fp, #8
0bdfc     A7 12 02 F6 | 	mov	arg01, fp
0be00     28 4E 85 F1 | 	sub	fp, #40
0be04     C8 52 B0 FD | 	call	#_converttoint
0be08     10 4E 05 F1 | 	add	fp, #16
0be0c     A7 FA 61 FC | 	wrlong	result1, fp
0be10                 | '   t1=pop()
0be10                 | '   channel=converttoint(t1)  
0be10                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0be10     04 4E 85 F1 | 	sub	fp, #4
0be14     A7 1E 0A FB | 	rdlong	local01, fp wz
0be18     0C 4E 85 F1 | 	sub	fp, #12
0be1c     3C 06 90 5D |  if_ne	jmp	#LR__0944
0be20     04 4E 05 F1 | 	add	fp, #4
0be24     A7 00 68 FC | 	wrlong	#0, fp
0be28     04 4E 85 F1 | 	sub	fp, #4
0be2c                 | LR__0926
0be2c     10 4E 05 F1 | 	add	fp, #16
0be30     A7 1E 02 FB | 	rdlong	local01, fp
0be34     0B 1E 66 F0 | 	shl	local01, #11
0be38     0C 00 00 FF 
0be3c     CC E4 05 F1 | 	add	objptr, ##6348
0be40     F2 1E 02 F1 | 	add	local01, objptr
0be44     0C 4E 85 F1 | 	sub	fp, #12
0be48     A7 12 02 FB | 	rdlong	arg01, fp
0be4c     09 21 02 F6 | 	mov	local02, arg01
0be50     01 20 66 F0 | 	shl	local02, #1
0be54     0F 21 02 F1 | 	add	local02, local01
0be58     04 4E 85 F1 | 	sub	fp, #4
0be5c     0C 00 00 FF 
0be60     CC E4 85 F1 | 	sub	objptr, ##6348
0be64     09 13 52 F6 | 	abs	arg01, arg01 wc
0be68     1F 22 C6 C9 |  if_b	decod	local03, #31
0be6c     00 22 06 36 |  if_ae	mov	local03, #0
0be70     10 FA B0 FD | 	call	#__system___float_fromuns
0be74     11 FB 61 F5 | 	xor	result1, local03
0be78     FD 14 02 F6 | 	mov	arg02, result1
0be7c     87 E4 1D FF 
0be80     DB 13 06 F6 | 	mov	arg01, ##1003032539
0be84     00 FE B0 FD | 	call	#__system___float_mul
0be88     FD 12 02 F6 | 	mov	arg01, result1
0be8c     34 07 B1 FD | 	call	#__system____builtin_sinf
0be90     FD 14 02 F6 | 	mov	arg02, result1
0be94     58 7F 23 FF 
0be98     00 12 06 F6 | 	mov	arg01, ##1191096320
0be9c     E8 FD B0 FD | 	call	#__system___float_mul
0bea0     FD 12 02 F6 | 	mov	arg01, result1
0bea4     01 14 06 F6 | 	mov	arg02, #1
0bea8     A4 02 B1 FD | 	call	#__system___float_tointeger
0beac     10 FB 51 FC | 	wrword	result1, local02
0beb0     04 4E 05 F1 | 	add	fp, #4
0beb4     A7 20 02 FB | 	rdlong	local02, fp
0beb8     01 20 06 F1 | 	add	local02, #1
0bebc     A7 20 62 FC | 	wrlong	local02, fp
0bec0     04 4E 85 F1 | 	sub	fp, #4
0bec4     02 00 00 FF 
0bec8     00 20 56 F2 | 	cmps	local02, ##1024 wc
0becc     5C FF 9F CD |  if_b	jmp	#LR__0926
0bed0                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0bed0                 | '   return
0bed0     88 05 90 FD | 	jmp	#LR__0944
0bed4                 | LR__0927
0bed4                 | ' for i=0 to 15 : harm(i)=0: next i  
0bed4     04 4E 05 F1 | 	add	fp, #4
0bed8     A7 00 68 FC | 	wrlong	#0, fp
0bedc     97 16 48 FB | 	callpa	#(@LR__0929-@LR__0928)>>2,fcache_load_ptr_
0bee0                 | LR__0928
0bee0     A7 1E 02 FB | 	rdlong	local01, fp
0bee4     02 1E 66 F0 | 	shl	local01, #2
0bee8     34 4E 05 F1 | 	add	fp, #52
0beec     A7 1E 02 F1 | 	add	local01, fp
0bef0     0F 01 68 FC | 	wrlong	#0, local01
0bef4     34 4E 85 F1 | 	sub	fp, #52
0bef8     A7 1E 02 FB | 	rdlong	local01, fp
0befc     01 1E 06 F1 | 	add	local01, #1
0bf00     A7 1E 62 FC | 	wrlong	local01, fp
0bf04     10 1E 56 F2 | 	cmps	local01, #16 wc
0bf08     D4 FF 9F CD |  if_b	jmp	#LR__0928
0bf0c                 | LR__0929
0bf0c     04 4E 85 F1 | 	sub	fp, #4
0bf10                 | ' for i=numpar to 2 step -1 
0bf10     A7 1E 02 FB | 	rdlong	local01, fp
0bf14     04 4E 05 F1 | 	add	fp, #4
0bf18     A7 1E 62 FC | 	wrlong	local01, fp
0bf1c     04 4E 85 F1 | 	sub	fp, #4
0bf20                 | LR__0930
0bf20     14 DA BF FD | 	call	#_pop
0bf24     28 4E 05 F1 | 	add	fp, #40
0bf28     A7 FA 61 FC | 	wrlong	result1, fp
0bf2c     04 4E 05 F1 | 	add	fp, #4
0bf30     A7 FC 61 FC | 	wrlong	result2, fp
0bf34     04 4E 05 F1 | 	add	fp, #4
0bf38     A7 FE 61 FC | 	wrlong	result3, fp
0bf3c     2C 4E 85 F1 | 	sub	fp, #44
0bf40     A7 1E 02 FB | 	rdlong	local01, fp
0bf44     02 1E 86 F1 | 	sub	local01, #2
0bf48     02 1E 66 F0 | 	shl	local01, #2
0bf4c     34 4E 05 F1 | 	add	fp, #52
0bf50     A7 1E 02 F1 | 	add	local01, fp
0bf54     10 4E 85 F1 | 	sub	fp, #16
0bf58     A7 12 02 F6 | 	mov	arg01, fp
0bf5c     28 4E 85 F1 | 	sub	fp, #40
0bf60     18 52 B0 FD | 	call	#_converttofloat
0bf64     0F FB 61 FC | 	wrlong	result1, local01
0bf68     04 4E 05 F1 | 	add	fp, #4
0bf6c     A7 1E 02 FB | 	rdlong	local01, fp
0bf70     01 1E 86 F1 | 	sub	local01, #1
0bf74     A7 1E 62 FC | 	wrlong	local01, fp
0bf78     04 4E 85 F1 | 	sub	fp, #4
0bf7c     02 1E 56 F2 | 	cmps	local01, #2 wc
0bf80     9C FF 9F 3D |  if_ae	jmp	#LR__0930
0bf84     B0 D9 BF FD | 	call	#_pop
0bf88     FF 1E 02 F6 | 	mov	local01, result3
0bf8c     28 4E 05 F1 | 	add	fp, #40
0bf90     A7 FA 61 FC | 	wrlong	result1, fp
0bf94     04 4E 05 F1 | 	add	fp, #4
0bf98     A7 FC 61 FC | 	wrlong	result2, fp
0bf9c     04 4E 05 F1 | 	add	fp, #4
0bfa0     A7 1E 62 FC | 	wrlong	local01, fp
0bfa4     08 4E 85 F1 | 	sub	fp, #8
0bfa8     A7 12 02 F6 | 	mov	arg01, fp
0bfac     28 4E 85 F1 | 	sub	fp, #40
0bfb0     1C 51 B0 FD | 	call	#_converttoint
0bfb4     FD 1E 02 F6 | 	mov	local01, result1
0bfb8     10 4E 05 F1 | 	add	fp, #16
0bfbc     A7 1E 62 FC | 	wrlong	local01, fp
0bfc0     10 4E 85 F1 | 	sub	fp, #16
0bfc4                 | ' t1=pop()
0bfc4                 | ' channel=converttoint(t1) : print channel
0bfc4     00 12 06 F6 | 	mov	arg01, #0
0bfc8     D4 2A B1 FD | 	call	#__system___getiolock_0425
0bfcc     FD 12 02 F6 | 	mov	arg01, result1
0bfd0     C8 D1 B0 FD | 	call	#__system___lockmem
0bfd4     10 4E 05 F1 | 	add	fp, #16
0bfd8     A7 14 02 FB | 	rdlong	arg02, fp
0bfdc     10 4E 85 F1 | 	sub	fp, #16
0bfe0     00 12 06 F6 | 	mov	arg01, #0
0bfe4     00 16 06 F6 | 	mov	arg03, #0
0bfe8     0A 18 06 F6 | 	mov	arg04, #10
0bfec     E4 DE B0 FD | 	call	#__system___basic_print_integer
0bff0     00 12 06 F6 | 	mov	arg01, #0
0bff4     0A 14 06 F6 | 	mov	arg02, #10
0bff8     00 16 06 F6 | 	mov	arg03, #0
0bffc     38 DE B0 FD | 	call	#__system___basic_print_char
0c000     00 12 06 F6 | 	mov	arg01, #0
0c004     98 2A B1 FD | 	call	#__system___getiolock_0425
0c008     FD 00 68 FC | 	wrlong	#0, result1
0c00c                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0c00c     08 4E 05 F1 | 	add	fp, #8
0c010     02 00 80 FF 
0c014     A7 00 68 FC | 	wrlong	##1024, fp
0c018     08 4E 85 F1 | 	sub	fp, #8
0c01c     0C 00 00 FF 
0c020     CC E4 05 F1 | 	add	objptr, ##6348
0c024     97 18 48 FB | 	callpa	#(@LR__0933-@LR__0931)>>2,fcache_load_ptr_
0c028                 | LR__0931
0c028     02 00 00 FF 
0c02c     00 14 DC FC | 	rep	@LR__0934, ##1024
0c030                 | LR__0932
0c030     10 4E 05 F1 | 	add	fp, #16
0c034     A7 20 02 FB | 	rdlong	local02, fp
0c038     0B 20 66 F0 | 	shl	local02, #11
0c03c     F2 20 02 F1 | 	add	local02, objptr
0c040     0C 4E 85 F1 | 	sub	fp, #12
0c044     A7 1E 02 FB | 	rdlong	local01, fp
0c048     04 4E 85 F1 | 	sub	fp, #4
0c04c     01 1E 66 F0 | 	shl	local01, #1
0c050     10 1F 02 F1 | 	add	local01, local02
0c054     0F 01 58 FC | 	wrword	#0, local01
0c058                 | LR__0933
0c058                 | LR__0934
0c058     0C 00 00 FF 
0c05c     CC E4 85 F1 | 	sub	objptr, ##6348
0c060     1C 4E 05 F1 | 	add	fp, #28
0c064     A7 00 68 FC | 	wrlong	#0, fp
0c068                 | ' max=0
0c068                 | ' if harm(0)<0 then
0c068     1C 4E 05 F1 | 	add	fp, #28
0c06c     A7 12 02 FB | 	rdlong	arg01, fp
0c070     38 4E 85 F1 | 	sub	fp, #56
0c074     00 14 06 F6 | 	mov	arg02, #0
0c078     01 16 06 F6 | 	mov	arg03, #1
0c07c     3C 00 B1 FD | 	call	#__system___float_cmp
0c080     00 FA 55 F2 | 	cmps	result1, #0 wc
0c084     04 01 90 3D |  if_ae	jmp	#LR__0937
0c088     38 4E 05 F1 | 	add	fp, #56
0c08c     A7 FA 01 FB | 	rdlong	result1, fp
0c090     1F FA 05 F4 | 	bitl	result1, #31
0c094     24 4E 85 F1 | 	sub	fp, #36
0c098     A7 FA 61 FC | 	wrlong	result1, fp
0c09c     28 4E 05 F1 | 	add	fp, #40
0c0a0     A7 FA 01 FB | 	rdlong	result1, fp
0c0a4     1F FA 05 F4 | 	bitl	result1, #31
0c0a8     24 4E 85 F1 | 	sub	fp, #36
0c0ac     A7 FA 61 FC | 	wrlong	result1, fp
0c0b0     20 4E 05 F1 | 	add	fp, #32
0c0b4     00 C0 9F FF 
0c0b8     A7 00 68 FC | 	wrlong	##1065353216, fp
0c0bc     24 4E 85 F1 | 	sub	fp, #36
0c0c0     A7 1E 02 FB | 	rdlong	local01, fp
0c0c4     28 4E 05 F1 | 	add	fp, #40
0c0c8     A7 1E 62 FC | 	wrlong	local01, fp
0c0cc     24 4E 85 F1 | 	sub	fp, #36
0c0d0     A7 1E 02 FB | 	rdlong	local01, fp
0c0d4     28 4E 05 F1 | 	add	fp, #40
0c0d8     A7 1E 62 FC | 	wrlong	local01, fp
0c0dc                 | '   harm(0)=1
0c0dc                 | '   harm(1)=even
0c0dc                 | '   harm(2)=odd
0c0dc                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0c0dc     3C 4E 85 F1 | 	sub	fp, #60
0c0e0     A7 06 68 FC | 	wrlong	#3, fp
0c0e4                 | LR__0935
0c0e4     A7 1A 02 FB | 	rdlong	arg05, fp
0c0e8     0D 25 02 F6 | 	mov	local04, arg05
0c0ec     02 24 66 F0 | 	shl	local04, #2
0c0f0     34 4E 05 F1 | 	add	fp, #52
0c0f4     A7 24 02 F1 | 	add	local04, fp
0c0f8     02 1A 86 F1 | 	sub	arg05, #2
0c0fc     02 1A 66 F0 | 	shl	arg05, #2
0c100     A7 1A 02 F1 | 	add	arg05, fp
0c104     0D 13 02 FB | 	rdlong	arg01, arg05
0c108     24 4E 85 F1 | 	sub	fp, #36
0c10c     A7 14 02 FB | 	rdlong	arg02, fp
0c110     14 4E 85 F1 | 	sub	fp, #20
0c114     70 FB B0 FD | 	call	#__system___float_mul
0c118     12 FB 61 FC | 	wrlong	result1, local04
0c11c     04 4E 05 F1 | 	add	fp, #4
0c120     A7 26 02 FB | 	rdlong	local05, fp
0c124     02 26 06 F1 | 	add	local05, #2
0c128     A7 26 62 FC | 	wrlong	local05, fp
0c12c     10 26 56 F2 | 	cmps	local05, #16 wc
0c130     B0 FF 9F CD |  if_b	jmp	#LR__0935
0c134                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0c134     A7 08 68 FC | 	wrlong	#4, fp
0c138                 | LR__0936
0c138     A7 26 02 FB | 	rdlong	local05, fp
0c13c     13 25 02 F6 | 	mov	local04, local05
0c140     02 24 66 F0 | 	shl	local04, #2
0c144     34 4E 05 F1 | 	add	fp, #52
0c148     A7 24 02 F1 | 	add	local04, fp
0c14c     02 26 86 F1 | 	sub	local05, #2
0c150     02 26 66 F0 | 	shl	local05, #2
0c154     A7 26 02 F1 | 	add	local05, fp
0c158     13 13 02 FB | 	rdlong	arg01, local05
0c15c     20 4E 85 F1 | 	sub	fp, #32
0c160     A7 14 02 FB | 	rdlong	arg02, fp
0c164     18 4E 85 F1 | 	sub	fp, #24
0c168     1C FB B0 FD | 	call	#__system___float_mul
0c16c     12 FB 61 FC | 	wrlong	result1, local04
0c170     04 4E 05 F1 | 	add	fp, #4
0c174     A7 26 02 FB | 	rdlong	local05, fp
0c178     02 26 06 F1 | 	add	local05, #2
0c17c     A7 26 62 FC | 	wrlong	local05, fp
0c180     0F 26 56 F2 | 	cmps	local05, #15 wc
0c184     B0 FF 9F CD |  if_b	jmp	#LR__0936
0c188     04 4E 85 F1 | 	sub	fp, #4
0c18c                 | LR__0937
0c18c                 | ' if harm(0)>=0 then ' synthesize with harmonics
0c18c     38 4E 05 F1 | 	add	fp, #56
0c190     A7 12 02 FB | 	rdlong	arg01, fp
0c194     38 4E 85 F1 | 	sub	fp, #56
0c198     00 14 06 F6 | 	mov	arg02, #0
0c19c     01 16 66 F6 | 	neg	arg03, #1
0c1a0     18 FF B0 FD | 	call	#__system___float_cmp
0c1a4     00 FA 55 F2 | 	cmps	result1, #0 wc
0c1a8     B0 02 90 CD |  if_b	jmp	#LR__0943
0c1ac                 | '   for i=0 to 1023
0c1ac     04 4E 05 F1 | 	add	fp, #4
0c1b0     A7 00 68 FC | 	wrlong	#0, fp
0c1b4     04 4E 85 F1 | 	sub	fp, #4
0c1b8                 | LR__0938
0c1b8     20 4E 05 F1 | 	add	fp, #32
0c1bc     A7 00 68 FC | 	wrlong	#0, fp
0c1c0                 | '     spl=0
0c1c0                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0c1c0     18 4E 85 F1 | 	sub	fp, #24
0c1c4     A7 00 68 FC | 	wrlong	#0, fp
0c1c8                 | LR__0939
0c1c8     A7 24 02 FB | 	rdlong	local04, fp
0c1cc     02 24 66 F0 | 	shl	local04, #2
0c1d0     30 4E 05 F1 | 	add	fp, #48
0c1d4     A7 24 02 F1 | 	add	local04, fp
0c1d8     12 27 02 FB | 	rdlong	local05, local04
0c1dc     87 E4 1D FF 
0c1e0     DB 25 06 F6 | 	mov	local04, ##1003032539
0c1e4     34 4E 85 F1 | 	sub	fp, #52
0c1e8     A7 12 02 FB | 	rdlong	arg01, fp
0c1ec     04 4E 85 F1 | 	sub	fp, #4
0c1f0     09 13 52 F6 | 	abs	arg01, arg01 wc
0c1f4     1F 22 C6 C9 |  if_b	decod	local03, #31
0c1f8     00 22 06 36 |  if_ae	mov	local03, #0
0c1fc     84 F6 B0 FD | 	call	#__system___float_fromuns
0c200     11 FB 61 F5 | 	xor	result1, local03
0c204     FD 14 02 F6 | 	mov	arg02, result1
0c208     12 13 02 F6 | 	mov	arg01, local04
0c20c     78 FA B0 FD | 	call	#__system___float_mul
0c210     FD 24 02 F6 | 	mov	local04, result1
0c214     08 4E 05 F1 | 	add	fp, #8
0c218     A7 12 02 FB | 	rdlong	arg01, fp
0c21c     08 4E 85 F1 | 	sub	fp, #8
0c220     01 12 06 F1 | 	add	arg01, #1
0c224     09 13 52 F6 | 	abs	arg01, arg01 wc
0c228     1F 22 C6 C9 |  if_b	decod	local03, #31
0c22c     00 22 06 36 |  if_ae	mov	local03, #0
0c230     50 F6 B0 FD | 	call	#__system___float_fromuns
0c234     11 FB 61 F5 | 	xor	result1, local03
0c238     FD 14 02 F6 | 	mov	arg02, result1
0c23c     12 13 02 F6 | 	mov	arg01, local04
0c240     44 FA B0 FD | 	call	#__system___float_mul
0c244     FD 12 02 F6 | 	mov	arg01, result1
0c248     78 03 B1 FD | 	call	#__system____builtin_sinf
0c24c     FD 14 02 F6 | 	mov	arg02, result1
0c250     13 13 02 F6 | 	mov	arg01, local05
0c254     30 FA B0 FD | 	call	#__system___float_mul
0c258     FD 14 02 F6 | 	mov	arg02, result1
0c25c     20 4E 05 F1 | 	add	fp, #32
0c260     A7 12 02 FB | 	rdlong	arg01, fp
0c264     20 4E 85 F1 | 	sub	fp, #32
0c268     4C F6 B0 FD | 	call	#__system___float_add
0c26c     20 4E 05 F1 | 	add	fp, #32
0c270     A7 FA 61 FC | 	wrlong	result1, fp
0c274     18 4E 85 F1 | 	sub	fp, #24
0c278     A7 16 02 FB | 	rdlong	arg03, fp
0c27c     01 16 06 F1 | 	add	arg03, #1
0c280     A7 16 62 FC | 	wrlong	arg03, fp
0c284     10 16 56 F2 | 	cmps	arg03, #16 wc
0c288     3C FF 9F CD |  if_b	jmp	#LR__0939
0c28c                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0c28c     18 4E 05 F1 | 	add	fp, #24
0c290     A7 12 02 FB | 	rdlong	arg01, fp
0c294     1F 12 06 F4 | 	bitl	arg01, #31
0c298     04 4E 85 F1 | 	sub	fp, #4
0c29c     A7 14 02 FB | 	rdlong	arg02, fp
0c2a0     1C 4E 85 F1 | 	sub	fp, #28
0c2a4     01 16 66 F6 | 	neg	arg03, #1
0c2a8     10 FE B0 FD | 	call	#__system___float_cmp
0c2ac     01 FA 55 F2 | 	cmps	result1, #1 wc
0c2b0     18 00 90 CD |  if_b	jmp	#LR__0940
0c2b4     20 4E 05 F1 | 	add	fp, #32
0c2b8     A7 FA 01 FB | 	rdlong	result1, fp
0c2bc     1F FA 05 F4 | 	bitl	result1, #31
0c2c0     04 4E 85 F1 | 	sub	fp, #4
0c2c4     A7 FA 61 FC | 	wrlong	result1, fp
0c2c8     1C 4E 85 F1 | 	sub	fp, #28
0c2cc                 | LR__0940
0c2cc     04 4E 05 F1 | 	add	fp, #4
0c2d0     A7 26 02 FB | 	rdlong	local05, fp
0c2d4     01 26 06 F1 | 	add	local05, #1
0c2d8     A7 26 62 FC | 	wrlong	local05, fp
0c2dc     04 4E 85 F1 | 	sub	fp, #4
0c2e0     02 00 00 FF 
0c2e4     00 26 56 F2 | 	cmps	local05, ##1024 wc
0c2e8     CC FE 9F CD |  if_b	jmp	#LR__0938
0c2ec                 | '   for i=0 to 1023
0c2ec     04 4E 05 F1 | 	add	fp, #4
0c2f0     A7 00 68 FC | 	wrlong	#0, fp
0c2f4     04 4E 85 F1 | 	sub	fp, #4
0c2f8                 | LR__0941
0c2f8     20 4E 05 F1 | 	add	fp, #32
0c2fc     A7 00 68 FC | 	wrlong	#0, fp
0c300                 | '     spl=0
0c300                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0c300     18 4E 85 F1 | 	sub	fp, #24
0c304     A7 00 68 FC | 	wrlong	#0, fp
0c308                 | LR__0942
0c308     A7 26 02 FB | 	rdlong	local05, fp
0c30c     02 26 66 F0 | 	shl	local05, #2
0c310     30 4E 05 F1 | 	add	fp, #48
0c314     A7 26 02 F1 | 	add	local05, fp
0c318     13 27 02 FB | 	rdlong	local05, local05
0c31c     1C 4E 85 F1 | 	sub	fp, #28
0c320     A7 14 02 FB | 	rdlong	arg02, fp
0c324     1C 4E 85 F1 | 	sub	fp, #28
0c328     58 7F 23 FF 
0c32c     00 12 06 F6 | 	mov	arg01, ##1191096320
0c330     58 FB B0 FD | 	call	#__system___float_div
0c334     FD 14 02 F6 | 	mov	arg02, result1
0c338     13 13 02 F6 | 	mov	arg01, local05
0c33c     48 F9 B0 FD | 	call	#__system___float_mul
0c340     FD 26 02 F6 | 	mov	local05, result1
0c344     87 E4 1D FF 
0c348     DB 25 06 F6 | 	mov	local04, ##1003032539
0c34c     04 4E 05 F1 | 	add	fp, #4
0c350     A7 12 02 FB | 	rdlong	arg01, fp
0c354     04 4E 85 F1 | 	sub	fp, #4
0c358     09 13 52 F6 | 	abs	arg01, arg01 wc
0c35c     1F 22 C6 C9 |  if_b	decod	local03, #31
0c360     00 22 06 36 |  if_ae	mov	local03, #0
0c364     1C F5 B0 FD | 	call	#__system___float_fromuns
0c368     11 FB 61 F5 | 	xor	result1, local03
0c36c     FD 14 02 F6 | 	mov	arg02, result1
0c370     12 13 02 F6 | 	mov	arg01, local04
0c374     10 F9 B0 FD | 	call	#__system___float_mul
0c378     FD 24 02 F6 | 	mov	local04, result1
0c37c     08 4E 05 F1 | 	add	fp, #8
0c380     A7 12 02 FB | 	rdlong	arg01, fp
0c384     08 4E 85 F1 | 	sub	fp, #8
0c388     01 12 06 F1 | 	add	arg01, #1
0c38c     09 13 52 F6 | 	abs	arg01, arg01 wc
0c390     1F 22 C6 C9 |  if_b	decod	local03, #31
0c394     00 22 06 36 |  if_ae	mov	local03, #0
0c398     E8 F4 B0 FD | 	call	#__system___float_fromuns
0c39c     11 FB 61 F5 | 	xor	result1, local03
0c3a0     FD 14 02 F6 | 	mov	arg02, result1
0c3a4     12 13 02 F6 | 	mov	arg01, local04
0c3a8     DC F8 B0 FD | 	call	#__system___float_mul
0c3ac     FD 12 02 F6 | 	mov	arg01, result1
0c3b0     10 02 B1 FD | 	call	#__system____builtin_sinf
0c3b4     FD 14 02 F6 | 	mov	arg02, result1
0c3b8     13 13 02 F6 | 	mov	arg01, local05
0c3bc     C8 F8 B0 FD | 	call	#__system___float_mul
0c3c0     FD 14 02 F6 | 	mov	arg02, result1
0c3c4     20 4E 05 F1 | 	add	fp, #32
0c3c8     A7 12 02 FB | 	rdlong	arg01, fp
0c3cc     20 4E 85 F1 | 	sub	fp, #32
0c3d0     E4 F4 B0 FD | 	call	#__system___float_add
0c3d4     20 4E 05 F1 | 	add	fp, #32
0c3d8     A7 FA 61 FC | 	wrlong	result1, fp
0c3dc     18 4E 85 F1 | 	sub	fp, #24
0c3e0     A7 26 02 FB | 	rdlong	local05, fp
0c3e4     01 26 06 F1 | 	add	local05, #1
0c3e8     A7 26 62 FC | 	wrlong	local05, fp
0c3ec     10 26 56 F2 | 	cmps	local05, #16 wc
0c3f0     14 FF 9F CD |  if_b	jmp	#LR__0942
0c3f4     08 4E 05 F1 | 	add	fp, #8
0c3f8     A7 26 02 FB | 	rdlong	local05, fp
0c3fc     0B 26 66 F0 | 	shl	local05, #11
0c400     0C 00 00 FF 
0c404     CC E4 05 F1 | 	add	objptr, ##6348
0c408     F2 26 02 F1 | 	add	local05, objptr
0c40c     0C 4E 85 F1 | 	sub	fp, #12
0c410     A7 20 02 FB | 	rdlong	local02, fp
0c414     01 20 66 F0 | 	shl	local02, #1
0c418     13 21 02 F1 | 	add	local02, local05
0c41c     1C 4E 05 F1 | 	add	fp, #28
0c420     A7 12 02 FB | 	rdlong	arg01, fp
0c424     20 4E 85 F1 | 	sub	fp, #32
0c428     0C 00 00 FF 
0c42c     CC E4 85 F1 | 	sub	objptr, ##6348
0c430     01 14 06 F6 | 	mov	arg02, #1
0c434     18 FD B0 FD | 	call	#__system___float_tointeger
0c438     10 FB 51 FC | 	wrword	result1, local02
0c43c     04 4E 05 F1 | 	add	fp, #4
0c440     A7 26 02 FB | 	rdlong	local05, fp
0c444     01 26 06 F1 | 	add	local05, #1
0c448     A7 26 62 FC | 	wrlong	local05, fp
0c44c     04 4E 85 F1 | 	sub	fp, #4
0c450     02 00 00 FF 
0c454     00 26 56 F2 | 	cmps	local05, ##1024 wc
0c458     9C FE 9F CD |  if_b	jmp	#LR__0941
0c45c                 | LR__0943
0c45c                 | LR__0944
0c45c     A7 F0 03 F6 | 	mov	ptra, fp
0c460     B2 00 A0 FD | 	call	#popregs_
0c464                 | _do_defsnd_ret
0c464     2D 00 64 FD | 	ret
0c468                 | 
0c468                 | ' 
0c468                 | ' ' ---------------  List the program. 
0c468                 | ' 
0c468                 | ' sub do_list
0c468                 | _do_list
0c468     02 4A 05 F6 | 	mov	COUNT_, #2
0c46c     A8 00 A0 FD | 	call	#pushregs_
0c470     B8 F0 07 F1 | 	add	ptra, #184
0c474     04 4E 05 F1 | 	add	fp, #4
0c478     A7 00 68 FC | 	wrlong	#0, fp
0c47c     04 4E 05 F1 | 	add	fp, #4
0c480     FF FF BF FF 
0c484     A7 FE 6B FC | 	wrlong	##2147483647, fp
0c488     08 4E 85 F1 | 	sub	fp, #8
0c48c     69 00 00 FF 
0c490     44 E5 05 F1 | 	add	objptr, ##54084
0c494     F2 1E 02 FB | 	rdlong	local01, objptr
0c498     0F 17 02 F6 | 	mov	arg03, local01
0c49c     01 16 66 F0 | 	shl	arg03, #1
0c4a0     0F 17 02 F1 | 	add	arg03, local01
0c4a4     02 16 66 F0 | 	shl	arg03, #2
0c4a8     03 00 00 FF 
0c4ac     04 E4 85 F1 | 	sub	objptr, ##1540
0c4b0     F2 16 02 F1 | 	add	arg03, objptr
0c4b4     0B 17 02 FB | 	rdlong	arg03, arg03
0c4b8     A7 16 62 FC | 	wrlong	arg03, fp
0c4bc                 | ' 
0c4bc                 | ' startline=0 : endline=$7FFFFFFF
0c4bc                 | ' numpar=compiledline(lineptr_e).result.uresult
0c4bc                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0c4bc     01 16 0E F2 | 	cmp	arg03, #1 wz
0c4c0     66 00 00 FF 
0c4c4     40 E5 85 F1 | 	sub	objptr, ##52544
0c4c8     3C 00 90 5D |  if_ne	jmp	#LR__0950
0c4cc     68 D4 BF FD | 	call	#_pop
0c4d0     FF 1E 02 F6 | 	mov	local01, result3
0c4d4     0C 4E 05 F1 | 	add	fp, #12
0c4d8     A7 FA 61 FC | 	wrlong	result1, fp
0c4dc     04 4E 05 F1 | 	add	fp, #4
0c4e0     A7 FC 61 FC | 	wrlong	result2, fp
0c4e4     04 4E 05 F1 | 	add	fp, #4
0c4e8     A7 1E 62 FC | 	wrlong	local01, fp
0c4ec     08 4E 85 F1 | 	sub	fp, #8
0c4f0     A7 12 02 F6 | 	mov	arg01, fp
0c4f4     0C 4E 85 F1 | 	sub	fp, #12
0c4f8     D4 4B B0 FD | 	call	#_converttoint
0c4fc     04 4E 05 F1 | 	add	fp, #4
0c500     A7 FA 61 FC | 	wrlong	result1, fp
0c504     04 4E 85 F1 | 	sub	fp, #4
0c508                 | LR__0950
0c508                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0c508     A7 16 02 FB | 	rdlong	arg03, fp
0c50c     02 16 0E F2 | 	cmp	arg03, #2 wz
0c510     7C 00 90 5D |  if_ne	jmp	#LR__0951
0c514     20 D4 BF FD | 	call	#_pop
0c518     FF 1E 02 F6 | 	mov	local01, result3
0c51c     0C 4E 05 F1 | 	add	fp, #12
0c520     A7 FA 61 FC | 	wrlong	result1, fp
0c524     04 4E 05 F1 | 	add	fp, #4
0c528     A7 FC 61 FC | 	wrlong	result2, fp
0c52c     04 4E 05 F1 | 	add	fp, #4
0c530     A7 1E 62 FC | 	wrlong	local01, fp
0c534     08 4E 85 F1 | 	sub	fp, #8
0c538     A7 12 02 F6 | 	mov	arg01, fp
0c53c     0C 4E 85 F1 | 	sub	fp, #12
0c540     8C 4B B0 FD | 	call	#_converttoint
0c544     FD 1E 02 F6 | 	mov	local01, result1
0c548     08 4E 05 F1 | 	add	fp, #8
0c54c     A7 1E 62 FC | 	wrlong	local01, fp
0c550     08 4E 85 F1 | 	sub	fp, #8
0c554     E0 D3 BF FD | 	call	#_pop
0c558     FF 1E 02 F6 | 	mov	local01, result3
0c55c     0C 4E 05 F1 | 	add	fp, #12
0c560     A7 FA 61 FC | 	wrlong	result1, fp
0c564     04 4E 05 F1 | 	add	fp, #4
0c568     A7 FC 61 FC | 	wrlong	result2, fp
0c56c     04 4E 05 F1 | 	add	fp, #4
0c570     A7 1E 62 FC | 	wrlong	local01, fp
0c574     08 4E 85 F1 | 	sub	fp, #8
0c578     A7 12 02 F6 | 	mov	arg01, fp
0c57c     0C 4E 85 F1 | 	sub	fp, #12
0c580     4C 4B B0 FD | 	call	#_converttoint
0c584     04 4E 05 F1 | 	add	fp, #4
0c588     A7 FA 61 FC | 	wrlong	result1, fp
0c58c     04 4E 85 F1 | 	sub	fp, #4
0c590                 | LR__0951
0c590                 | ' 
0c590                 | ' 
0c590                 | ' print
0c590     00 12 06 F6 | 	mov	arg01, #0
0c594     08 25 B1 FD | 	call	#__system___getiolock_0425
0c598     FD 12 02 F6 | 	mov	arg01, result1
0c59c     FC CB B0 FD | 	call	#__system___lockmem
0c5a0     00 12 06 F6 | 	mov	arg01, #0
0c5a4     0A 14 06 F6 | 	mov	arg02, #10
0c5a8     00 16 06 F6 | 	mov	arg03, #0
0c5ac     88 D8 B0 FD | 	call	#__system___basic_print_char
0c5b0     00 12 06 F6 | 	mov	arg01, #0
0c5b4     E8 24 B1 FD | 	call	#__system___getiolock_0425
0c5b8     FD 00 68 FC | 	wrlong	#0, result1
0c5bc     69 00 00 FF 
0c5c0     48 E5 05 F1 | 	add	objptr, ##54088
0c5c4     F2 20 02 FB | 	rdlong	local02, objptr
0c5c8     11 00 00 FF 
0c5cc     74 E4 05 F1 | 	add	objptr, ##8820
0c5d0     F2 20 62 FC | 	wrlong	local02, objptr
0c5d4     7A 00 00 FF 
0c5d8     BC E5 85 F1 | 	sub	objptr, ##62908
0c5dc                 | ' do 
0c5dc                 | LR__0952
0c5dc     20 4E 05 F1 | 	add	fp, #32
0c5e0     A7 12 02 F6 | 	mov	arg01, fp
0c5e4     20 4E 85 F1 | 	sub	fp, #32
0c5e8     7A 00 00 FF 
0c5ec     BC E5 05 F1 | 	add	objptr, ##62908
0c5f0     F2 14 02 FB | 	rdlong	arg02, objptr
0c5f4     18 16 06 F6 | 	mov	arg03, #24
0c5f8     6F 00 00 FF 
0c5fc     FC E4 85 F1 | 	sub	objptr, ##57084
0c600     48 C0 B0 FD | 	call	#_psram_spin2_read1
0c604     0B 00 00 FF 
0c608     C0 E4 85 F1 | 	sub	objptr, ##5824
0c60c                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0c60c                 | '   
0c60c                 | '   if header(0)<> $FFFFFFFF then
0c60c     20 4E 05 F1 | 	add	fp, #32
0c610     A7 20 02 FB | 	rdlong	local02, fp
0c614     20 4E 85 F1 | 	sub	fp, #32
0c618     FF FF 7F FF 
0c61c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0c620     A8 00 90 AD |  if_e	jmp	#LR__0954
0c624     38 4E 05 F1 | 	add	fp, #56
0c628     3F 16 06 F6 | 	mov	arg03, #63
0c62c     28 16 62 FD | 	setq	arg03
0c630     A7 00 68 FC | 	wrlong	#0, fp
0c634     A7 12 02 F6 | 	mov	arg01, fp
0c638     10 4E 85 F1 | 	sub	fp, #16
0c63c     A7 14 02 FB | 	rdlong	arg02, fp
0c640     04 4E 05 F1 | 	add	fp, #4
0c644     A7 16 02 FB | 	rdlong	arg03, fp
0c648     2C 4E 85 F1 | 	sub	fp, #44
0c64c     0B 00 00 FF 
0c650     C0 E4 05 F1 | 	add	objptr, ##5824
0c654     F4 BF B0 FD | 	call	#_psram_spin2_read1
0c658     0B 00 00 FF 
0c65c     C0 E4 85 F1 | 	sub	objptr, ##5824
0c660                 | '     longfill(linebuf,0,64)
0c660                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0c660                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0c660     20 4E 05 F1 | 	add	fp, #32
0c664     A7 20 02 FB | 	rdlong	local02, fp
0c668     1C 4E 85 F1 | 	sub	fp, #28
0c66c     A7 1E 02 FB | 	rdlong	local01, fp
0c670     04 4E 85 F1 | 	sub	fp, #4
0c674     0F 21 52 F2 | 	cmps	local02, local01 wc
0c678     30 00 90 CD |  if_b	jmp	#LR__0953
0c67c     20 4E 05 F1 | 	add	fp, #32
0c680     A7 20 02 FB | 	rdlong	local02, fp
0c684     18 4E 85 F1 | 	sub	fp, #24
0c688     A7 16 02 FB | 	rdlong	arg03, fp
0c68c     08 4E 85 F1 | 	sub	fp, #8
0c690     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0c694     14 00 90 1D |  if_a	jmp	#LR__0953
0c698     38 4E 05 F1 | 	add	fp, #56
0c69c     A7 12 02 F6 | 	mov	arg01, fp
0c6a0     38 4E 85 F1 | 	sub	fp, #56
0c6a4                 | ' 
0c6a4                 | ' write(text)
0c6a4     6C BA B0 FD | 	call	#_hg010b_spin2_write
0c6a8                 | ' crlf
0c6a8     C8 BB B0 FD | 	call	#_hg010b_spin2_crlf
0c6ac                 | LR__0953
0c6ac     34 4E 05 F1 | 	add	fp, #52
0c6b0     A7 20 02 FB | 	rdlong	local02, fp
0c6b4     34 4E 85 F1 | 	sub	fp, #52
0c6b8     7A 00 00 FF 
0c6bc     BC E5 05 F1 | 	add	objptr, ##62908
0c6c0     F2 20 62 FC | 	wrlong	local02, objptr
0c6c4     7A 00 00 FF 
0c6c8     BC E5 85 F1 | 	sub	objptr, ##62908
0c6cc                 | LR__0954
0c6cc     34 4E 05 F1 | 	add	fp, #52
0c6d0     A7 20 02 FB | 	rdlong	local02, fp
0c6d4     34 4E 85 F1 | 	sub	fp, #52
0c6d8     FF FF 3F FF 
0c6dc     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0c6e0     20 4E 05 51 |  if_ne	add	fp, #32
0c6e4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c6e8     20 4E 85 51 |  if_ne	sub	fp, #32
0c6ec     FF FF 7F 5F 
0c6f0     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0c6f4     E4 FE 9F 5D |  if_ne	jmp	#LR__0952
0c6f8     A7 F0 03 F6 | 	mov	ptra, fp
0c6fc     B2 00 A0 FD | 	call	#popregs_
0c700                 | _do_list_ret
0c700     2D 00 64 FD | 	ret
0c704                 | 
0c704                 | ' 
0c704                 | ' '---------------- Clear the program
0c704                 | ' 
0c704                 | ' sub do_new
0c704                 | _do_new
0c704     03 4A 05 F6 | 	mov	COUNT_, #3
0c708     A8 00 A0 FD | 	call	#pushregs_
0c70c     00 12 06 F6 | 	mov	arg01, #0
0c710     01 14 66 F6 | 	neg	arg02, #1
0c714     01 16 06 F6 | 	mov	arg03, #1
0c718     00 18 06 F6 | 	mov	arg04, #0
0c71c     0B 00 00 FF 
0c720     C0 E4 05 F1 | 	add	objptr, ##5824
0c724                 | '     return fill(addr, pattern, count, listPtr, 4)
0c724     04 1A 06 F6 | 	mov	arg05, #4
0c728     58 C0 B0 FD | 	call	#_psram_spin2_fill
0c72c     49 00 00 FF 
0c730     0C E4 05 F1 | 	add	objptr, ##37388
0c734     F2 00 68 FC | 	wrlong	#0, objptr
0c738     15 00 00 FF 
0c73c     7C E4 05 F1 | 	add	objptr, ##10876
0c740     F2 00 68 FC | 	wrlong	#0, objptr
0c744     0F 00 00 FF 
0c748     2C E5 05 F1 | 	add	objptr, ##7980
0c74c     F2 00 68 FC | 	wrlong	#0, objptr
0c750     04 E4 05 F1 | 	add	objptr, #4
0c754     F2 00 68 FC | 	wrlong	#0, objptr
0c758     16 00 00 FF 
0c75c     5C E5 85 F1 | 	sub	objptr, ##11612
0c760     F2 00 68 FC | 	wrlong	#0, objptr
0c764     07 00 00 FF 
0c768     24 E4 05 F1 | 	add	objptr, ##3620
0c76c     F2 00 68 FC | 	wrlong	#0, objptr
0c770     07 00 00 FF 
0c774     20 E4 85 F1 | 	sub	objptr, ##3616
0c778     F2 00 68 FC | 	wrlong	#0, objptr
0c77c     0F 00 00 FF 
0c780     34 E4 05 F1 | 	add	objptr, ##7732
0c784     F2 00 68 FC | 	wrlong	#0, objptr
0c788     08 00 00 FF 
0c78c     08 E4 85 F1 | 	sub	objptr, ##4104
0c790     F2 00 68 FC | 	wrlong	#0, objptr
0c794     04 E4 05 F1 | 	add	objptr, #4
0c798     FF FF FF FF 
0c79c     F2 FE 6B FC | 	wrlong	##-1, objptr
0c7a0     0F 00 00 FF 
0c7a4     4C E5 05 F1 | 	add	objptr, ##8012
0c7a8     F2 00 68 FC | 	wrlong	#0, objptr
0c7ac                 | ' 
0c7ac                 | ' pslpoke(0,$FFFFFFFF)
0c7ac                 | ' varnum=0
0c7ac                 | ' programstart=0 :runptr=0 : runptr2=0
0c7ac                 | ' stackpointer=0
0c7ac                 | ' lineptr=0 
0c7ac                 | ' programptr=0 : stringptr=0
0c7ac                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0c7ac                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0c7ac     00 1E 06 F6 | 	mov	local01, #0
0c7b0     07 00 00 FF 
0c7b4     40 E5 85 F1 | 	sub	objptr, ##3904
0c7b8     97 16 48 FB | 	callpa	#(@LR__0961-@LR__0960)>>2,fcache_load_ptr_
0c7bc                 | LR__0960
0c7bc     0F 21 02 F6 | 	mov	local02, local01
0c7c0     02 20 66 F0 | 	shl	local02, #2
0c7c4     0F 21 02 F1 | 	add	local02, local01
0c7c8     02 20 66 F0 | 	shl	local02, #2
0c7cc     F2 20 02 F1 | 	add	local02, objptr
0c7d0     08 20 06 F1 | 	add	local02, #8
0c7d4     FF FF FF FF 
0c7d8     10 FF 6B FC | 	wrlong	##-1, local02
0c7dc     01 1E 06 F1 | 	add	local01, #1
0c7e0     81 1E 56 F2 | 	cmps	local01, #129 wc
0c7e4     D4 FF 9F CD |  if_b	jmp	#LR__0960
0c7e8                 | LR__0961
0c7e8     71 00 00 FF 
0c7ec     5C E5 85 F1 | 	sub	objptr, ##58204
0c7f0                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0c7f0     00 1E 06 F6 | 	mov	local01, #0
0c7f4                 | LR__0962
0c7f4     0F 21 02 F6 | 	mov	local02, local01
0c7f8     02 20 66 F0 | 	shl	local02, #2
0c7fc     7A 00 00 FF 
0c800     F8 E4 05 F1 | 	add	objptr, ##62712
0c804     F2 20 02 F1 | 	add	local02, objptr
0c808     10 21 0A FB | 	rdlong	local02, local02 wz
0c80c     7A 00 00 FF 
0c810     F8 E4 85 F1 | 	sub	objptr, ##62712
0c814     34 00 90 AD |  if_e	jmp	#LR__0963
0c818     0F 13 02 F6 | 	mov	arg01, local01
0c81c     00 14 06 F6 | 	mov	arg02, #0
0c820     00 16 06 F6 | 	mov	arg03, #0
0c824     78 A9 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c828     0F 21 02 F6 | 	mov	local02, local01
0c82c     02 20 66 F0 | 	shl	local02, #2
0c830     7A 00 00 FF 
0c834     F8 E4 05 F1 | 	add	objptr, ##62712
0c838     F2 20 02 F1 | 	add	local02, objptr
0c83c     10 13 02 FB | 	rdlong	arg01, local02
0c840     7A 00 00 FF 
0c844     F8 E4 85 F1 | 	sub	objptr, ##62712
0c848     44 08 B1 FD | 	call	#__system___gc_free
0c84c                 | LR__0963
0c84c     7A 00 00 FF 
0c850     4C E5 05 F1 | 	add	objptr, ##62796
0c854     00 C0 9F FF 
0c858     F2 00 68 FC | 	wrlong	##1065353216, objptr
0c85c     04 E4 05 F1 | 	add	objptr, #4
0c860     00 C0 9F FF 
0c864     F2 00 68 FC | 	wrlong	##1065353216, objptr
0c868     7A 00 00 FF 
0c86c     50 E5 85 F1 | 	sub	objptr, ##62800
0c870     F2 22 02 FB | 	rdlong	local03, objptr
0c874     7A 00 00 FF 
0c878     3C E5 05 F1 | 	add	objptr, ##62780
0c87c     F2 22 62 FC | 	wrlong	local03, objptr
0c880     7A 00 00 FF 
0c884     3C E5 85 F1 | 	sub	objptr, ##62780
0c888     11 12 06 F6 | 	mov	arg01, #17
0c88c     08 14 06 F6 | 	mov	arg02, #8
0c890     10 16 06 F6 | 	mov	arg03, #16
0c894     08 A9 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c898     10 12 06 F6 | 	mov	arg01, #16
0c89c     20 14 06 F6 | 	mov	arg02, #32
0c8a0     20 16 06 F6 | 	mov	arg03, #32
0c8a4     F8 A8 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c8a8     01 1E 06 F1 | 	add	local01, #1
0c8ac     10 1E 56 F2 | 	cmps	local01, #16 wc
0c8b0     40 FF 9F CD |  if_b	jmp	#LR__0962
0c8b4     A7 F0 03 F6 | 	mov	ptra, fp
0c8b8     B2 00 A0 FD | 	call	#popregs_
0c8bc                 | _do_new_ret
0c8bc     2D 00 64 FD | 	ret
0c8c0                 | 
0c8c0                 | ' 
0c8c0                 | ' '----------------------- goto
0c8c0                 | ' sub do_fast_goto
0c8c0                 | _do_fast_goto
0c8c0     02 4A 05 F6 | 	mov	COUNT_, #2
0c8c4     A8 00 A0 FD | 	call	#pushregs_
0c8c8                 | _do_fast_goto_enter
0c8c8     69 00 00 FF 
0c8cc     44 E5 05 F1 | 	add	objptr, ##54084
0c8d0     F2 12 02 FB | 	rdlong	arg01, objptr
0c8d4     09 1F 02 F6 | 	mov	local01, arg01
0c8d8     01 1E 66 F0 | 	shl	local01, #1
0c8dc     09 1F 02 F1 | 	add	local01, arg01
0c8e0     02 1E 66 F0 | 	shl	local01, #2
0c8e4     03 00 00 FF 
0c8e8     04 E4 85 F1 | 	sub	objptr, ##1540
0c8ec     F2 1E 02 F1 | 	add	local01, objptr
0c8f0     0F 21 02 FB | 	rdlong	local02, local01
0c8f4     10 13 02 F6 | 	mov	arg01, local02
0c8f8     66 00 00 FF 
0c8fc     40 E5 85 F1 | 	sub	objptr, ##52544
0c900     CC 94 B0 FD | 	call	#_pslpeek
0c904     FD 12 02 F6 | 	mov	arg01, result1
0c908                 | ' 
0c908                 | ' testptr=compiledline(lineptr_e).result.uresult
0c908                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0c908                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0c908     69 00 00 FF 
0c90c     44 E5 05 F1 | 	add	objptr, ##54084
0c910     F2 FA 01 FB | 	rdlong	result1, objptr
0c914     FD 1E 02 F6 | 	mov	local01, result1
0c918     01 1E 66 F0 | 	shl	local01, #1
0c91c     FD 1E 02 F1 | 	add	local01, result1
0c920     02 1E 66 F0 | 	shl	local01, #2
0c924     03 00 00 FF 
0c928     04 E4 85 F1 | 	sub	objptr, ##1540
0c92c     F2 1E 02 F1 | 	add	local01, objptr
0c930     04 1E 06 F1 | 	add	local01, #4
0c934     0F 1F 02 FB | 	rdlong	local01, local01
0c938     0F 13 0A F2 | 	cmp	arg01, local01 wz
0c93c     66 00 00 FF 
0c940     40 E5 85 F1 | 	sub	objptr, ##52544
0c944     58 00 90 5D |  if_ne	jmp	#LR__0970
0c948     79 00 00 FF 
0c94c     74 E4 05 F1 | 	add	objptr, ##62068
0c950     F2 20 62 FC | 	wrlong	local02, objptr
0c954     0F 00 00 FF 
0c958     34 E5 85 F1 | 	sub	objptr, ##7988
0c95c     F2 20 02 FB | 	rdlong	local02, objptr
0c960     01 20 86 F1 | 	sub	local02, #1
0c964     04 E4 05 F1 | 	add	objptr, #4
0c968     F2 20 62 FC | 	wrlong	local02, objptr
0c96c                 | '   runptr=testptr
0c96c                 | '   lineptr_e=lineptr-1
0c96c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0c96c     0F 00 00 FF 
0c970     54 E5 05 F1 | 	add	objptr, ##8020
0c974     F2 20 02 FB | 	rdlong	local02, objptr
0c978     79 00 00 FF 
0c97c     98 E4 85 F1 | 	sub	objptr, ##62104
0c980     FF FF 3F FF 
0c984     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0c988     79 00 00 AF 
0c98c     98 E4 05 A1 |  if_e	add	objptr, ##62104
0c990     F2 00 68 AC |  if_e	wrlong	#0, objptr
0c994     79 00 00 AF 
0c998     98 E4 85 A1 |  if_e	sub	objptr, ##62104
0c99c     04 00 90 FD | 	jmp	#LR__0971
0c9a0                 | LR__0970
0c9a0     0C 00 B0 FD | 	call	#_do_find_goto
0c9a4                 | LR__0971
0c9a4     A7 F0 03 F6 | 	mov	ptra, fp
0c9a8     B2 00 A0 FD | 	call	#popregs_
0c9ac                 | _do_fast_goto_ret
0c9ac     2D 00 64 FD | 	ret
0c9b0                 | 
0c9b0                 | ' 
0c9b0                 | ' 
0c9b0                 | ' 
0c9b0                 | ' 
0c9b0                 | ' sub do_find_goto
0c9b0                 | _do_find_goto
0c9b0     03 4A 05 F6 | 	mov	COUNT_, #3
0c9b4     A8 00 A0 FD | 	call	#pushregs_
0c9b8     24 F0 07 F1 | 	add	ptra, #36
0c9bc                 | _do_find_goto_enter
0c9bc     69 00 00 FF 
0c9c0     44 E5 05 F1 | 	add	objptr, ##54084
0c9c4     F2 1E 02 FB | 	rdlong	local01, objptr
0c9c8     0F 21 02 F6 | 	mov	local02, local01
0c9cc     01 20 66 F0 | 	shl	local02, #1
0c9d0     0F 21 02 F1 | 	add	local02, local01
0c9d4     02 20 66 F0 | 	shl	local02, #2
0c9d8     03 00 00 FF 
0c9dc     04 E4 85 F1 | 	sub	objptr, ##1540
0c9e0     F2 20 02 F1 | 	add	local02, objptr
0c9e4     04 20 06 F1 | 	add	local02, #4
0c9e8     10 21 02 FB | 	rdlong	local02, local02
0c9ec     A7 20 62 FC | 	wrlong	local02, fp
0c9f0     03 00 00 FF 
0c9f4     08 E4 05 F1 | 	add	objptr, ##1544
0c9f8     F2 22 02 FB | 	rdlong	local03, objptr
0c9fc     69 00 00 FF 
0ca00     48 E5 85 F1 | 	sub	objptr, ##54088
0ca04     04 4E 05 F1 | 	add	fp, #4
0ca08     A7 22 62 FC | 	wrlong	local03, fp
0ca0c     04 4E 85 F1 | 	sub	fp, #4
0ca10                 | ' 
0ca10                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0ca10                 | '  ' print "find goto"                                                                     'print gotoline 
0ca10                 | ' gotoptr=programstart
0ca10                 | ' do
0ca10                 | LR__0980
0ca10     0C 4E 05 F1 | 	add	fp, #12
0ca14     A7 12 02 F6 | 	mov	arg01, fp
0ca18     08 4E 85 F1 | 	sub	fp, #8
0ca1c     A7 14 02 FB | 	rdlong	arg02, fp
0ca20     04 4E 85 F1 | 	sub	fp, #4
0ca24     18 16 06 F6 | 	mov	arg03, #24
0ca28     0B 00 00 FF 
0ca2c     C0 E4 05 F1 | 	add	objptr, ##5824
0ca30     18 BC B0 FD | 	call	#_psram_spin2_read1
0ca34     0B 00 00 FF 
0ca38     C0 E4 85 F1 | 	sub	objptr, ##5824
0ca3c                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0ca3c                 | '   if gotoheader(0)<>$FFFFFFFF then
0ca3c     0C 4E 05 F1 | 	add	fp, #12
0ca40     A7 22 02 FB | 	rdlong	local03, fp
0ca44     0C 4E 85 F1 | 	sub	fp, #12
0ca48     FF FF 7F FF 
0ca4c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0ca50     24 00 90 AD |  if_e	jmp	#LR__0981
0ca54     04 4E 05 F1 | 	add	fp, #4
0ca58     A7 22 02 FB | 	rdlong	local03, fp
0ca5c     04 4E 05 F1 | 	add	fp, #4
0ca60     A7 22 62 FC | 	wrlong	local03, fp
0ca64     18 4E 05 F1 | 	add	fp, #24
0ca68     A7 22 02 FB | 	rdlong	local03, fp
0ca6c     1C 4E 85 F1 | 	sub	fp, #28
0ca70     A7 22 62 FC | 	wrlong	local03, fp
0ca74     04 4E 85 F1 | 	sub	fp, #4
0ca78                 | LR__0981
0ca78     20 4E 05 F1 | 	add	fp, #32
0ca7c     A7 22 02 FB | 	rdlong	local03, fp
0ca80     20 4E 85 F1 | 	sub	fp, #32
0ca84     FF FF 3F FF 
0ca88     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0ca8c     0C 4E 05 51 |  if_ne	add	fp, #12
0ca90     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ca94     0C 4E 85 51 |  if_ne	sub	fp, #12
0ca98     FF FF 7F 5F 
0ca9c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0caa0     18 00 90 AD |  if_e	jmp	#LR__0982
0caa4     0C 4E 05 F1 | 	add	fp, #12
0caa8     A7 22 02 FB | 	rdlong	local03, fp
0caac     0C 4E 85 F1 | 	sub	fp, #12
0cab0     A7 20 02 FB | 	rdlong	local02, fp
0cab4     10 23 0A F2 | 	cmp	local03, local02 wz
0cab8     54 FF 9F 5D |  if_ne	jmp	#LR__0980
0cabc                 | LR__0982
0cabc                 | ' 
0cabc                 | ' if gotoheader(0)=gotoline then
0cabc     0C 4E 05 F1 | 	add	fp, #12
0cac0     A7 22 02 FB | 	rdlong	local03, fp
0cac4     0C 4E 85 F1 | 	sub	fp, #12
0cac8     A7 1E 02 FB | 	rdlong	local01, fp
0cacc     0F 23 0A F2 | 	cmp	local03, local01 wz
0cad0     D8 00 90 5D |  if_ne	jmp	#LR__0983
0cad4     69 00 00 FF 
0cad8     44 E5 05 F1 | 	add	objptr, ##54084
0cadc     F2 1E 02 FB | 	rdlong	local01, objptr
0cae0     0F 21 02 F6 | 	mov	local02, local01
0cae4     01 20 66 F0 | 	shl	local02, #1
0cae8     0F 21 02 F1 | 	add	local02, local01
0caec     02 20 66 F0 | 	shl	local02, #2
0caf0     03 00 00 FF 
0caf4     04 E4 85 F1 | 	sub	objptr, ##1540
0caf8     F2 20 02 F1 | 	add	local02, objptr
0cafc     08 4E 05 F1 | 	add	fp, #8
0cb00     A7 22 02 FB | 	rdlong	local03, fp
0cb04     10 23 62 FC | 	wrlong	local03, local02
0cb08     03 00 00 FF 
0cb0c     04 E4 05 F1 | 	add	objptr, ##1540
0cb10     F2 1E 02 FB | 	rdlong	local01, objptr
0cb14     0F 21 02 F6 | 	mov	local02, local01
0cb18     01 20 66 F0 | 	shl	local02, #1
0cb1c     0F 21 02 F1 | 	add	local02, local01
0cb20     02 20 66 F0 | 	shl	local02, #2
0cb24     03 00 00 FF 
0cb28     04 E4 85 F1 | 	sub	objptr, ##1540
0cb2c     F2 20 02 F1 | 	add	local02, objptr
0cb30     08 20 06 F1 | 	add	local02, #8
0cb34     10 9D 68 FC | 	wrlong	#78, local02
0cb38     03 00 00 FF 
0cb3c     04 E4 05 F1 | 	add	objptr, ##1540
0cb40     F2 20 02 FB | 	rdlong	local02, objptr
0cb44     10 13 02 F6 | 	mov	arg01, local02
0cb48     01 12 66 F0 | 	shl	arg01, #1
0cb4c     10 13 02 F1 | 	add	arg01, local02
0cb50     02 12 66 F0 | 	shl	arg01, #2
0cb54     03 00 00 FF 
0cb58     04 E4 85 F1 | 	sub	objptr, ##1540
0cb5c     F2 12 02 F1 | 	add	arg01, objptr
0cb60     12 00 00 FF 
0cb64     3C E5 05 F1 | 	add	objptr, ##9532
0cb68     F2 14 02 FB | 	rdlong	arg02, objptr
0cb6c     02 22 06 F6 | 	mov	local03, #2
0cb70     10 23 02 F1 | 	add	local03, local02
0cb74     14 00 00 FF 
0cb78     54 E5 85 F1 | 	sub	objptr, ##10580
0cb7c     F2 16 02 FB | 	rdlong	arg03, objptr
0cb80     0B 23 02 FD | 	qmul	local03, arg03
0cb84     08 4E 85 F1 | 	sub	fp, #8
0cb88     59 00 00 FF 
0cb8c     68 E4 85 F1 | 	sub	objptr, ##45672
0cb90     18 22 62 FD | 	getqx	local03
0cb94     11 15 02 F1 | 	add	arg02, local03
0cb98     4C BB B0 FD | 	call	#_psram_spin2_write
0cb9c     0B 00 00 FF 
0cba0     C0 E4 85 F1 | 	sub	objptr, ##5824
0cba4     18 FD BF FD | 	call	#_do_fast_goto
0cba8     08 00 90 FD | 	jmp	#LR__0984
0cbac                 | LR__0983
0cbac     26 12 06 F6 | 	mov	arg01, #38
0cbb0     60 90 B0 FD | 	call	#_printerror
0cbb4                 | LR__0984
0cbb4     A7 F0 03 F6 | 	mov	ptra, fp
0cbb8     B2 00 A0 FD | 	call	#popregs_
0cbbc                 | _do_find_goto_ret
0cbbc     2D 00 64 FD | 	ret
0cbc0                 | 
0cbc0                 | ' 
0cbc0                 | ' sub do_slow_goto
0cbc0                 | _do_slow_goto
0cbc0                 | _do_slow_goto_ret
0cbc0     2D 00 64 FD | 	ret
0cbc4                 | 
0cbc4                 | ' 
0cbc4                 | ' '----------------------- Error processing
0cbc4                 | ' 
0cbc4                 | ' sub do_error
0cbc4                 | _do_error
0cbc4     01 4A 05 F6 | 	mov	COUNT_, #1
0cbc8     A8 00 A0 FD | 	call	#pushregs_
0cbcc     69 00 00 FF 
0cbd0     44 E5 05 F1 | 	add	objptr, ##54084
0cbd4     F2 18 02 FB | 	rdlong	arg04, objptr
0cbd8     0C 17 02 F6 | 	mov	arg03, arg04
0cbdc     01 16 66 F0 | 	shl	arg03, #1
0cbe0     0C 17 02 F1 | 	add	arg03, arg04
0cbe4     02 16 66 F0 | 	shl	arg03, #2
0cbe8     03 00 00 FF 
0cbec     04 E4 85 F1 | 	sub	objptr, ##1540
0cbf0     F2 16 02 F1 | 	add	arg03, objptr
0cbf4     0B 1F 02 FB | 	rdlong	local01, arg03
0cbf8                 | ' r=compiledline(lineptr_e).result.uresult
0cbf8                 | ' print "Error ";r;": ";errors$(r)
0cbf8     00 12 06 F6 | 	mov	arg01, #0
0cbfc     66 00 00 FF 
0cc00     40 E5 85 F1 | 	sub	objptr, ##52544
0cc04     98 1E B1 FD | 	call	#__system___getiolock_0425
0cc08     FD 12 02 F6 | 	mov	arg01, result1
0cc0c     8C C5 B0 FD | 	call	#__system___lockmem
0cc10     46 01 00 FF 
0cc14     34 14 06 F6 | 	mov	arg02, ##@LR__4614
0cc18     00 12 06 F6 | 	mov	arg01, #0
0cc1c     00 16 06 F6 | 	mov	arg03, #0
0cc20     6C D2 B0 FD | 	call	#__system___basic_print_string
0cc24     00 12 06 F6 | 	mov	arg01, #0
0cc28     0F 15 02 F6 | 	mov	arg02, local01
0cc2c     00 16 06 F6 | 	mov	arg03, #0
0cc30     0A 18 06 F6 | 	mov	arg04, #10
0cc34     DC D2 B0 FD | 	call	#__system___basic_print_unsigned
0cc38     46 01 00 FF 
0cc3c     3B 14 06 F6 | 	mov	arg02, ##@LR__4615
0cc40     00 12 06 F6 | 	mov	arg01, #0
0cc44     00 16 06 F6 | 	mov	arg03, #0
0cc48     44 D2 B0 FD | 	call	#__system___basic_print_string
0cc4c     02 1E 66 F0 | 	shl	local01, #2
0cc50     64 00 00 FF 
0cc54     40 E5 05 F1 | 	add	objptr, ##51520
0cc58     F2 1E 02 F1 | 	add	local01, objptr
0cc5c     0F 15 02 FB | 	rdlong	arg02, local01
0cc60     00 12 06 F6 | 	mov	arg01, #0
0cc64     00 16 06 F6 | 	mov	arg03, #0
0cc68     64 00 00 FF 
0cc6c     40 E5 85 F1 | 	sub	objptr, ##51520
0cc70     1C D2 B0 FD | 	call	#__system___basic_print_string
0cc74     00 12 06 F6 | 	mov	arg01, #0
0cc78     0A 14 06 F6 | 	mov	arg02, #10
0cc7c     00 16 06 F6 | 	mov	arg03, #0
0cc80     B4 D1 B0 FD | 	call	#__system___basic_print_char
0cc84     00 12 06 F6 | 	mov	arg01, #0
0cc88     14 1E B1 FD | 	call	#__system___getiolock_0425
0cc8c     FD 00 68 FC | 	wrlong	#0, result1
0cc90     A7 F0 03 F6 | 	mov	ptra, fp
0cc94     B2 00 A0 FD | 	call	#popregs_
0cc98                 | _do_error_ret
0cc98     2D 00 64 FD | 	ret
0cc9c                 | 
0cc9c                 | ' 
0cc9c                 | ' 
0cc9c                 | ' '------------------ Assigning to a variable  
0cc9c                 | ' 
0cc9c                 | ' function  convertstring(psaddr as ulong) as string
0cc9c                 | _convertstring
0cc9c     04 4A 05 F6 | 	mov	COUNT_, #4
0cca0     A8 00 A0 FD | 	call	#pushregs_
0cca4     09 1F 02 F6 | 	mov	local01, arg01
0cca8     24 91 B0 FD | 	call	#_pslpeek
0ccac     FD 20 02 F6 | 	mov	local02, result1
0ccb0     46 01 00 FF 
0ccb4     3E 22 06 F6 | 	mov	local03, ##@LR__4616
0ccb8                 | ' 'print "in convertstring: psaddr=";psaddr
0ccb8                 | ' l=pslpeek(psaddr)
0ccb8                 | ' 'print "in convertstring: len=";l
0ccb8                 | ' s="" 
0ccb8                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0ccb8     01 24 06 F6 | 	mov	local04, #1
0ccbc     01 20 06 F1 | 	add	local02, #1
0ccc0                 | LR__0990
0ccc0     10 25 52 F2 | 	cmps	local04, local02 wc
0ccc4     30 00 90 3D |  if_ae	jmp	#LR__0991
0ccc8     0F 13 02 F6 | 	mov	arg01, local01
0cccc     03 12 06 F1 | 	add	arg01, #3
0ccd0     12 13 02 F1 | 	add	arg01, local04
0ccd4     A0 90 B0 FD | 	call	#_pspeek
0ccd8     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0ccdc     90 E6 B0 FD | 	call	#__system__Chr_S
0cce0     FD 14 02 F6 | 	mov	arg02, result1
0cce4     11 13 02 F6 | 	mov	arg01, local03
0cce8     0C C5 B0 FD | 	call	#__system___string_concat
0ccec     FD 22 02 F6 | 	mov	local03, result1
0ccf0     01 24 06 F1 | 	add	local04, #1
0ccf4     C8 FF 9F FD | 	jmp	#LR__0990
0ccf8                 | LR__0991
0ccf8                 | ' 'print "in convertstring: str=";s
0ccf8                 | ' return s
0ccf8     11 FB 01 F6 | 	mov	result1, local03
0ccfc     A7 F0 03 F6 | 	mov	ptra, fp
0cd00     B2 00 A0 FD | 	call	#popregs_
0cd04                 | _convertstring_ret
0cd04     2D 00 64 FD | 	ret
0cd08                 | 
0cd08                 | ' 
0cd08                 | ' sub do_assign
0cd08                 | _do_assign
0cd08     05 4A 05 F6 | 	mov	COUNT_, #5
0cd0c     A8 00 A0 FD | 	call	#pushregs_
0cd10     44 F0 07 F1 | 	add	ptra, #68
0cd14     69 00 00 FF 
0cd18     44 E5 05 F1 | 	add	objptr, ##54084
0cd1c     F2 16 02 FB | 	rdlong	arg03, objptr
0cd20     0B 15 02 F6 | 	mov	arg02, arg03
0cd24     01 14 66 F0 | 	shl	arg02, #1
0cd28     0B 15 02 F1 | 	add	arg02, arg03
0cd2c     02 14 66 F0 | 	shl	arg02, #2
0cd30     03 00 00 FF 
0cd34     04 E4 85 F1 | 	sub	objptr, ##1540
0cd38     F2 14 02 F1 | 	add	arg02, objptr
0cd3c     0A 15 02 FB | 	rdlong	arg02, arg02
0cd40     18 4E 05 F1 | 	add	fp, #24
0cd44     A7 14 62 FC | 	wrlong	arg02, fp
0cd48                 | ' 
0cd48                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0cd48                 | ' 
0cd48                 | ' if variables(varnum).vartype<array_no_type then 
0cd48     18 4E 85 F1 | 	sub	fp, #24
0cd4c     04 14 66 F0 | 	shl	arg02, #4
0cd50     32 00 00 FF 
0cd54     74 E4 85 F1 | 	sub	objptr, ##25716
0cd58     F2 14 02 F1 | 	add	arg02, objptr
0cd5c     0C 14 06 F1 | 	add	arg02, #12
0cd60     0A 17 02 FB | 	rdlong	arg03, arg02
0cd64     00 17 16 F2 | 	cmp	arg03, #256 wc
0cd68     34 00 00 FF 
0cd6c     CC E4 85 F1 | 	sub	objptr, ##26828
0cd70     18 01 90 3D |  if_ae	jmp	#LR__1000
0cd74     C0 CB BF FD | 	call	#_pop
0cd78     A7 FA 61 FC | 	wrlong	result1, fp
0cd7c     04 4E 05 F1 | 	add	fp, #4
0cd80     A7 FC 61 FC | 	wrlong	result2, fp
0cd84     04 4E 05 F1 | 	add	fp, #4
0cd88     A7 FE 61 FC | 	wrlong	result3, fp
0cd8c     08 4E 85 F1 | 	sub	fp, #8
0cd90     A7 16 02 FB | 	rdlong	arg03, fp
0cd94     04 4E 05 F1 | 	add	fp, #4
0cd98     A7 14 02 FB | 	rdlong	arg02, fp
0cd9c     14 4E 05 F1 | 	add	fp, #20
0cda0     A7 12 02 FB | 	rdlong	arg01, fp
0cda4     04 12 66 F0 | 	shl	arg01, #4
0cda8     34 00 00 FF 
0cdac     CC E4 05 F1 | 	add	objptr, ##26828
0cdb0     F2 12 02 F1 | 	add	arg01, objptr
0cdb4     04 12 06 F1 | 	add	arg01, #4
0cdb8     09 17 62 FC | 	wrlong	arg03, arg01
0cdbc     A7 16 02 FB | 	rdlong	arg03, fp
0cdc0     04 16 66 F0 | 	shl	arg03, #4
0cdc4     F2 16 02 F1 | 	add	arg03, objptr
0cdc8     08 16 06 F1 | 	add	arg03, #8
0cdcc     0B 15 62 FC | 	wrlong	arg02, arg03
0cdd0     A7 16 02 FB | 	rdlong	arg03, fp
0cdd4     04 16 66 F0 | 	shl	arg03, #4
0cdd8     F2 16 02 F1 | 	add	arg03, objptr
0cddc     10 4E 85 F1 | 	sub	fp, #16
0cde0     A7 14 02 FB | 	rdlong	arg02, fp
0cde4     0C 16 06 F1 | 	add	arg03, #12
0cde8     0B 15 62 FC | 	wrlong	arg02, arg03
0cdec                 | '   t1=pop() 
0cdec                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0cdec                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0cdec                 | '   if variables(varnum).vartype<>result_string2 then return
0cdec     10 4E 05 F1 | 	add	fp, #16
0cdf0     A7 16 02 FB | 	rdlong	arg03, fp
0cdf4     18 4E 85 F1 | 	sub	fp, #24
0cdf8     04 16 66 F0 | 	shl	arg03, #4
0cdfc     F2 16 02 F1 | 	add	arg03, objptr
0ce00     0C 16 06 F1 | 	add	arg03, #12
0ce04     0B 17 02 FB | 	rdlong	arg03, arg03
0ce08     2B 16 0E F2 | 	cmp	arg03, #43 wz
0ce0c     34 00 00 FF 
0ce10     CC E4 85 F1 | 	sub	objptr, ##26828
0ce14     30 06 90 5D |  if_ne	jmp	#LR__1023
0ce18     18 4E 05 F1 | 	add	fp, #24
0ce1c     A7 16 02 FB | 	rdlong	arg03, fp
0ce20     0B 1F 02 F6 | 	mov	local01, arg03
0ce24     04 1E 66 F0 | 	shl	local01, #4
0ce28     34 00 00 FF 
0ce2c     CC E4 05 F1 | 	add	objptr, ##26828
0ce30     F2 1E 02 F1 | 	add	local01, objptr
0ce34     18 4E 85 F1 | 	sub	fp, #24
0ce38     04 16 66 F0 | 	shl	arg03, #4
0ce3c     F2 16 02 F1 | 	add	arg03, objptr
0ce40     04 16 06 F1 | 	add	arg03, #4
0ce44     0B 13 02 FB | 	rdlong	arg01, arg03
0ce48     34 00 00 FF 
0ce4c     CC E4 85 F1 | 	sub	objptr, ##26828
0ce50     48 FE BF FD | 	call	#_convertstring
0ce54     04 1E 06 F1 | 	add	local01, #4
0ce58     0F FB 61 FC | 	wrlong	result1, local01
0ce5c     18 4E 05 F1 | 	add	fp, #24
0ce60     A7 1E 02 FB | 	rdlong	local01, fp
0ce64     18 4E 85 F1 | 	sub	fp, #24
0ce68     04 1E 66 F0 | 	shl	local01, #4
0ce6c     34 00 00 FF 
0ce70     CC E4 05 F1 | 	add	objptr, ##26828
0ce74     F2 1E 02 F1 | 	add	local01, objptr
0ce78     0C 1E 06 F1 | 	add	local01, #12
0ce7c     0F 3F 68 FC | 	wrlong	#31, local01
0ce80                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0ce80                 | '   variables(varnum).vartype=result_string
0ce80                 | '   return
0ce80     34 00 00 FF 
0ce84     CC E4 85 F1 | 	sub	objptr, ##26828
0ce88     BC 05 90 FD | 	jmp	#LR__1023
0ce8c                 | LR__1000
0ce8c                 | ' for i=0 to 2 : arrid(i)=0 : next i
0ce8c     1C 4E 05 F1 | 	add	fp, #28
0ce90     A7 00 68 FC | 	wrlong	#0, fp
0ce94     97 16 48 FB | 	callpa	#(@LR__1002-@LR__1001)>>2,fcache_load_ptr_
0ce98                 | LR__1001
0ce98     A7 1E 02 FB | 	rdlong	local01, fp
0ce9c     02 1E 66 F0 | 	shl	local01, #2
0cea0     18 4E 05 F1 | 	add	fp, #24
0cea4     A7 1E 02 F1 | 	add	local01, fp
0cea8     0F 01 68 FC | 	wrlong	#0, local01
0ceac     18 4E 85 F1 | 	sub	fp, #24
0ceb0     A7 1E 02 FB | 	rdlong	local01, fp
0ceb4     01 1E 06 F1 | 	add	local01, #1
0ceb8     A7 1E 62 FC | 	wrlong	local01, fp
0cebc     03 1E 16 F2 | 	cmp	local01, #3 wc
0cec0     D4 FF 9F CD |  if_b	jmp	#LR__1001
0cec4                 | LR__1002
0cec4     69 00 00 FF 
0cec8     44 E5 05 F1 | 	add	objptr, ##54084
0cecc     F2 16 02 FB | 	rdlong	arg03, objptr
0ced0     0B 1F 02 F6 | 	mov	local01, arg03
0ced4     01 1E 66 F0 | 	shl	local01, #1
0ced8     0B 1F 02 F1 | 	add	local01, arg03
0cedc     02 1E 66 F0 | 	shl	local01, #2
0cee0     03 00 00 FF 
0cee4     04 E4 85 F1 | 	sub	objptr, ##1540
0cee8     F2 1E 02 F1 | 	add	local01, objptr
0ceec     04 1E 06 F1 | 	add	local01, #4
0cef0     0F 21 02 FB | 	rdlong	local02, local01
0cef4     04 4E 05 F1 | 	add	fp, #4
0cef8     A7 20 62 FC | 	wrlong	local02, fp
0cefc     20 4E 85 F1 | 	sub	fp, #32
0cf00     66 00 00 FF 
0cf04     40 E5 85 F1 | 	sub	objptr, ##52544
0cf08     2C CA BF FD | 	call	#_pop
0cf0c     A7 FA 61 FC | 	wrlong	result1, fp
0cf10     04 4E 05 F1 | 	add	fp, #4
0cf14     A7 FC 61 FC | 	wrlong	result2, fp
0cf18     04 4E 05 F1 | 	add	fp, #4
0cf1c     A7 FE 61 FC | 	wrlong	result3, fp
0cf20                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0cf20                 | ' t1=pop() ' var value
0cf20                 | ' if numpar>0 then
0cf20     18 4E 05 F1 | 	add	fp, #24
0cf24     A7 22 02 FB | 	rdlong	local03, fp
0cf28     20 4E 85 F1 | 	sub	fp, #32
0cf2c     01 22 16 F2 | 	cmp	local03, #1 wc
0cf30     78 00 90 CD |  if_b	jmp	#LR__1005
0cf34                 | '   for i=numpar to 1 step -1
0cf34     20 4E 05 F1 | 	add	fp, #32
0cf38     A7 24 0A FB | 	rdlong	local04, fp wz
0cf3c     04 4E 85 F1 | 	sub	fp, #4
0cf40     A7 24 62 FC | 	wrlong	local04, fp
0cf44     1C 4E 85 F1 | 	sub	fp, #28
0cf48     60 00 90 AD |  if_e	jmp	#LR__1004
0cf4c                 | LR__1003
0cf4c     E8 C9 BF FD | 	call	#_pop
0cf50     0C 4E 05 F1 | 	add	fp, #12
0cf54     A7 FA 61 FC | 	wrlong	result1, fp
0cf58     04 4E 05 F1 | 	add	fp, #4
0cf5c     A7 FC 61 FC | 	wrlong	result2, fp
0cf60     04 4E 05 F1 | 	add	fp, #4
0cf64     A7 FE 61 FC | 	wrlong	result3, fp
0cf68     08 4E 05 F1 | 	add	fp, #8
0cf6c     A7 22 02 FB | 	rdlong	local03, fp
0cf70     01 22 86 F1 | 	sub	local03, #1
0cf74     02 22 66 F0 | 	shl	local03, #2
0cf78     18 4E 05 F1 | 	add	fp, #24
0cf7c     A7 22 02 F1 | 	add	local03, fp
0cf80     28 4E 85 F1 | 	sub	fp, #40
0cf84     A7 12 02 F6 | 	mov	arg01, fp
0cf88     0C 4E 85 F1 | 	sub	fp, #12
0cf8c     40 41 B0 FD | 	call	#_converttoint
0cf90     11 FB 61 FC | 	wrlong	result1, local03
0cf94     1C 4E 05 F1 | 	add	fp, #28
0cf98     A7 24 02 FB | 	rdlong	local04, fp
0cf9c     01 24 8E F1 | 	sub	local04, #1 wz
0cfa0     A7 24 62 FC | 	wrlong	local04, fp
0cfa4     1C 4E 85 F1 | 	sub	fp, #28
0cfa8     A0 FF 9F 5D |  if_ne	jmp	#LR__1003
0cfac                 | LR__1004
0cfac                 | LR__1005
0cfac     18 4E 05 F1 | 	add	fp, #24
0cfb0     A7 1E 02 FB | 	rdlong	local01, fp
0cfb4     04 1E 66 F0 | 	shl	local01, #4
0cfb8     34 00 00 FF 
0cfbc     CC E4 05 F1 | 	add	objptr, ##26828
0cfc0     F2 1E 02 F1 | 	add	local01, objptr
0cfc4     04 1E 06 F1 | 	add	local01, #4
0cfc8     0F 13 02 FB | 	rdlong	arg01, local01
0cfcc     0C 4E 05 F1 | 	add	fp, #12
0cfd0     A7 12 62 FC | 	wrlong	arg01, fp
0cfd4     24 4E 85 F1 | 	sub	fp, #36
0cfd8     34 00 00 FF 
0cfdc     CC E4 85 F1 | 	sub	objptr, ##26828
0cfe0     EC 8D B0 FD | 	call	#_pslpeek
0cfe4     FD 24 32 F9 | 	getword	local04, result1, #0
0cfe8     28 4E 05 F1 | 	add	fp, #40
0cfec     A7 24 62 FC | 	wrlong	local04, fp
0cff0     04 4E 85 F1 | 	sub	fp, #4
0cff4     A7 12 02 FB | 	rdlong	arg01, fp
0cff8     24 4E 85 F1 | 	sub	fp, #36
0cffc     02 12 06 F1 | 	add	arg01, #2
0d000     74 8D B0 FD | 	call	#_pspeek
0d004     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d008     2C 4E 05 F1 | 	add	fp, #44
0d00c     A7 FA 61 FC | 	wrlong	result1, fp
0d010                 | ' esize=pspeek(arrptr+2)
0d010                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0d010     08 4E 85 F1 | 	sub	fp, #8
0d014     A7 12 02 FB | 	rdlong	arg01, fp
0d018     24 4E 85 F1 | 	sub	fp, #36
0d01c     04 12 06 F1 | 	add	arg01, #4
0d020     AC 8D B0 FD | 	call	#_pslpeek
0d024     FD 24 02 F6 | 	mov	local04, result1
0d028     34 4E 05 F1 | 	add	fp, #52
0d02c     A7 1E 02 FB | 	rdlong	local01, fp
0d030     34 4E 85 F1 | 	sub	fp, #52
0d034     12 1F 12 F2 | 	cmp	local01, local04 wc
0d038     54 00 90 3D |  if_ae	jmp	#LR__1006
0d03c     24 4E 05 F1 | 	add	fp, #36
0d040     A7 12 02 FB | 	rdlong	arg01, fp
0d044     24 4E 85 F1 | 	sub	fp, #36
0d048     08 12 06 F1 | 	add	arg01, #8
0d04c     80 8D B0 FD | 	call	#_pslpeek
0d050     FD 1E 02 F6 | 	mov	local01, result1
0d054     38 4E 05 F1 | 	add	fp, #56
0d058     A7 24 02 FB | 	rdlong	local04, fp
0d05c     38 4E 85 F1 | 	sub	fp, #56
0d060     0F 25 12 F2 | 	cmp	local04, local01 wc
0d064     28 00 90 3D |  if_ae	jmp	#LR__1006
0d068     24 4E 05 F1 | 	add	fp, #36
0d06c     A7 12 02 FB | 	rdlong	arg01, fp
0d070     24 4E 85 F1 | 	sub	fp, #36
0d074     0C 12 06 F1 | 	add	arg01, #12
0d078     54 8D B0 FD | 	call	#_pslpeek
0d07c     3C 4E 05 F1 | 	add	fp, #60
0d080     A7 24 02 FB | 	rdlong	local04, fp
0d084     3C 4E 85 F1 | 	sub	fp, #60
0d088     FD 24 12 F2 | 	cmp	local04, result1 wc
0d08c     0C 00 90 CD |  if_b	jmp	#LR__1007
0d090                 | LR__1006
0d090     31 12 06 F6 | 	mov	arg01, #49
0d094     7C 8B B0 FD | 	call	#_printerror
0d098     AC 03 90 FD | 	jmp	#LR__1023
0d09c                 | LR__1007
0d09c     24 4E 05 F1 | 	add	fp, #36
0d0a0     A7 12 02 FB | 	rdlong	arg01, fp
0d0a4     09 25 02 F6 | 	mov	local04, arg01
0d0a8     10 24 06 F1 | 	add	local04, #16
0d0ac     24 4E 85 F1 | 	sub	fp, #36
0d0b0     04 12 06 F1 | 	add	arg01, #4
0d0b4     18 8D B0 FD | 	call	#_pslpeek
0d0b8     FD 1E 02 F6 | 	mov	local01, result1
0d0bc     38 4E 05 F1 | 	add	fp, #56
0d0c0     A7 20 02 FB | 	rdlong	local02, fp
0d0c4     10 1F 02 FD | 	qmul	local01, local02
0d0c8     04 4E 85 F1 | 	sub	fp, #4
0d0cc     A7 22 02 FB | 	rdlong	local03, fp
0d0d0     10 4E 85 F1 | 	sub	fp, #16
0d0d4     A7 12 02 FB | 	rdlong	arg01, fp
0d0d8     24 4E 85 F1 | 	sub	fp, #36
0d0dc     08 12 06 F1 | 	add	arg01, #8
0d0e0     18 20 62 FD | 	getqx	local02
0d0e4     10 23 02 F1 | 	add	local03, local02
0d0e8     E4 8C B0 FD | 	call	#_pslpeek
0d0ec     FD 20 02 F6 | 	mov	local02, result1
0d0f0     24 4E 05 F1 | 	add	fp, #36
0d0f4     A7 12 02 FB | 	rdlong	arg01, fp
0d0f8     24 4E 85 F1 | 	sub	fp, #36
0d0fc     04 12 06 F1 | 	add	arg01, #4
0d100     CC 8C B0 FD | 	call	#_pslpeek
0d104     FD 20 02 FD | 	qmul	local02, result1
0d108     3C 4E 05 F1 | 	add	fp, #60
0d10c     A7 20 02 FB | 	rdlong	local02, fp
0d110     18 1E 62 FD | 	getqx	local01
0d114     10 1F 02 FD | 	qmul	local01, local02
0d118     10 4E 85 F1 | 	sub	fp, #16
0d11c     A7 20 02 FB | 	rdlong	local02, fp
0d120     18 1E 62 FD | 	getqx	local01
0d124     0F 23 02 F1 | 	add	local03, local01
0d128     11 21 02 FD | 	qmul	local02, local03
0d12c     04 4E 05 F1 | 	add	fp, #4
0d130                 | ' 
0d130                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0d130                 | ' select case arrtype
0d130     18 22 62 FD | 	getqx	local03
0d134     11 25 02 F1 | 	add	local04, local03
0d138     A7 24 62 FC | 	wrlong	local04, fp
0d13c     08 4E 85 F1 | 	sub	fp, #8
0d140     A7 26 02 FB | 	rdlong	local05, fp
0d144     28 4E 85 F1 | 	sub	fp, #40
0d148     00 27 86 F1 | 	sub	local05, #256
0d14c     0C 26 26 F3 | 	fle	local05, #12
0d150     30 26 62 FD | 	jmprel	local05
0d154                 | LR__1008
0d154     30 00 90 FD | 	jmp	#LR__1009
0d158     58 00 90 FD | 	jmp	#LR__1010
0d15c     88 00 90 FD | 	jmp	#LR__1011
0d160     B8 00 90 FD | 	jmp	#LR__1012
0d164     10 01 90 FD | 	jmp	#LR__1013
0d168     68 01 90 FD | 	jmp	#LR__1014
0d16c     98 01 90 FD | 	jmp	#LR__1015
0d170     C8 01 90 FD | 	jmp	#LR__1016
0d174     F8 01 90 FD | 	jmp	#LR__1017
0d178     28 02 90 FD | 	jmp	#LR__1018
0d17c     58 02 90 FD | 	jmp	#LR__1019
0d180     88 02 90 FD | 	jmp	#LR__1020
0d184     B8 02 90 FD | 	jmp	#LR__1021
0d188                 | LR__1009
0d188     A7 12 02 F6 | 	mov	arg01, fp
0d18c     30 4E 05 F1 | 	add	fp, #48
0d190     A7 14 02 FB | 	rdlong	arg02, fp
0d194     30 4E 85 F1 | 	sub	fp, #48
0d198     0C 16 06 F6 | 	mov	arg03, #12
0d19c     0B 00 00 FF 
0d1a0     C0 E4 05 F1 | 	add	objptr, ##5824
0d1a4     40 B5 B0 FD | 	call	#_psram_spin2_write
0d1a8     0B 00 00 FF 
0d1ac     C0 E4 85 F1 | 	sub	objptr, ##5824
0d1b0     94 02 90 FD | 	jmp	#LR__1022
0d1b4                 | LR__1010
0d1b4     30 4E 05 F1 | 	add	fp, #48
0d1b8     A7 12 02 FB | 	rdlong	arg01, fp
0d1bc     30 4E 85 F1 | 	sub	fp, #48
0d1c0     A7 14 02 FB | 	rdlong	arg02, fp
0d1c4     01 16 06 F6 | 	mov	arg03, #1
0d1c8     00 18 06 F6 | 	mov	arg04, #0
0d1cc     0B 00 00 FF 
0d1d0     C0 E4 05 F1 | 	add	objptr, ##5824
0d1d4                 | '     return fill(addr, pattern, count, listPtr, 1)
0d1d4     01 1A 06 F6 | 	mov	arg05, #1
0d1d8     A8 B5 B0 FD | 	call	#_psram_spin2_fill
0d1dc     0B 00 00 FF 
0d1e0     C0 E4 85 F1 | 	sub	objptr, ##5824
0d1e4     60 02 90 FD | 	jmp	#LR__1022
0d1e8                 | LR__1011
0d1e8     30 4E 05 F1 | 	add	fp, #48
0d1ec     A7 12 02 FB | 	rdlong	arg01, fp
0d1f0     30 4E 85 F1 | 	sub	fp, #48
0d1f4     A7 14 02 FB | 	rdlong	arg02, fp
0d1f8     01 16 06 F6 | 	mov	arg03, #1
0d1fc     00 18 06 F6 | 	mov	arg04, #0
0d200     0B 00 00 FF 
0d204     C0 E4 05 F1 | 	add	objptr, ##5824
0d208                 | '     return fill(addr, pattern, count, listPtr, 1)
0d208     01 1A 06 F6 | 	mov	arg05, #1
0d20c     74 B5 B0 FD | 	call	#_psram_spin2_fill
0d210     0B 00 00 FF 
0d214     C0 E4 85 F1 | 	sub	objptr, ##5824
0d218     2C 02 90 FD | 	jmp	#LR__1022
0d21c                 | LR__1012
0d21c     30 4E 05 F1 | 	add	fp, #48
0d220     A7 12 02 FB | 	rdlong	arg01, fp
0d224     30 4E 85 F1 | 	sub	fp, #48
0d228     A7 14 02 FB | 	rdlong	arg02, fp
0d22c     01 16 06 F6 | 	mov	arg03, #1
0d230     00 18 06 F6 | 	mov	arg04, #0
0d234     0B 00 00 FF 
0d238     C0 E4 05 F1 | 	add	objptr, ##5824
0d23c                 | '     return fill(addr, pattern, count, listPtr, 1)
0d23c     01 1A 06 F6 | 	mov	arg05, #1
0d240     40 B5 B0 FD | 	call	#_psram_spin2_fill
0d244     30 4E 05 F1 | 	add	fp, #48
0d248     A7 12 02 FB | 	rdlong	arg01, fp
0d24c     30 4E 85 F1 | 	sub	fp, #48
0d250     01 12 06 F1 | 	add	arg01, #1
0d254     A7 14 02 FB | 	rdlong	arg02, fp
0d258     08 14 46 F0 | 	shr	arg02, #8
0d25c     01 16 06 F6 | 	mov	arg03, #1
0d260     00 18 06 F6 | 	mov	arg04, #0
0d264                 | '     return fill(addr, pattern, count, listPtr, 1)
0d264     01 1A 06 F6 | 	mov	arg05, #1
0d268     18 B5 B0 FD | 	call	#_psram_spin2_fill
0d26c     0B 00 00 FF 
0d270     C0 E4 85 F1 | 	sub	objptr, ##5824
0d274     D0 01 90 FD | 	jmp	#LR__1022
0d278                 | LR__1013
0d278     30 4E 05 F1 | 	add	fp, #48
0d27c     A7 12 02 FB | 	rdlong	arg01, fp
0d280     30 4E 85 F1 | 	sub	fp, #48
0d284     A7 14 02 FB | 	rdlong	arg02, fp
0d288     01 16 06 F6 | 	mov	arg03, #1
0d28c     00 18 06 F6 | 	mov	arg04, #0
0d290     0B 00 00 FF 
0d294     C0 E4 05 F1 | 	add	objptr, ##5824
0d298                 | '     return fill(addr, pattern, count, listPtr, 1)
0d298     01 1A 06 F6 | 	mov	arg05, #1
0d29c     E4 B4 B0 FD | 	call	#_psram_spin2_fill
0d2a0     30 4E 05 F1 | 	add	fp, #48
0d2a4     A7 12 02 FB | 	rdlong	arg01, fp
0d2a8     30 4E 85 F1 | 	sub	fp, #48
0d2ac     01 12 06 F1 | 	add	arg01, #1
0d2b0     A7 14 02 FB | 	rdlong	arg02, fp
0d2b4     08 14 46 F0 | 	shr	arg02, #8
0d2b8     01 16 06 F6 | 	mov	arg03, #1
0d2bc     00 18 06 F6 | 	mov	arg04, #0
0d2c0                 | '     return fill(addr, pattern, count, listPtr, 1)
0d2c0     01 1A 06 F6 | 	mov	arg05, #1
0d2c4     BC B4 B0 FD | 	call	#_psram_spin2_fill
0d2c8     0B 00 00 FF 
0d2cc     C0 E4 85 F1 | 	sub	objptr, ##5824
0d2d0     74 01 90 FD | 	jmp	#LR__1022
0d2d4                 | LR__1014
0d2d4     30 4E 05 F1 | 	add	fp, #48
0d2d8     A7 12 02 FB | 	rdlong	arg01, fp
0d2dc     30 4E 85 F1 | 	sub	fp, #48
0d2e0     A7 14 02 FB | 	rdlong	arg02, fp
0d2e4     01 16 06 F6 | 	mov	arg03, #1
0d2e8     00 18 06 F6 | 	mov	arg04, #0
0d2ec     0B 00 00 FF 
0d2f0     C0 E4 05 F1 | 	add	objptr, ##5824
0d2f4                 | '     return fill(addr, pattern, count, listPtr, 4)
0d2f4     04 1A 06 F6 | 	mov	arg05, #4
0d2f8     88 B4 B0 FD | 	call	#_psram_spin2_fill
0d2fc     0B 00 00 FF 
0d300     C0 E4 85 F1 | 	sub	objptr, ##5824
0d304     40 01 90 FD | 	jmp	#LR__1022
0d308                 | LR__1015
0d308     30 4E 05 F1 | 	add	fp, #48
0d30c     A7 12 02 FB | 	rdlong	arg01, fp
0d310     30 4E 85 F1 | 	sub	fp, #48
0d314     A7 14 02 FB | 	rdlong	arg02, fp
0d318     01 16 06 F6 | 	mov	arg03, #1
0d31c     00 18 06 F6 | 	mov	arg04, #0
0d320     0B 00 00 FF 
0d324     C0 E4 05 F1 | 	add	objptr, ##5824
0d328                 | '     return fill(addr, pattern, count, listPtr, 4)
0d328     04 1A 06 F6 | 	mov	arg05, #4
0d32c     54 B4 B0 FD | 	call	#_psram_spin2_fill
0d330     0B 00 00 FF 
0d334     C0 E4 85 F1 | 	sub	objptr, ##5824
0d338     0C 01 90 FD | 	jmp	#LR__1022
0d33c                 | LR__1016
0d33c     30 4E 05 F1 | 	add	fp, #48
0d340     A7 12 02 FB | 	rdlong	arg01, fp
0d344     30 4E 85 F1 | 	sub	fp, #48
0d348     A7 14 02 FB | 	rdlong	arg02, fp
0d34c     01 16 06 F6 | 	mov	arg03, #1
0d350     00 18 06 F6 | 	mov	arg04, #0
0d354     0B 00 00 FF 
0d358     C0 E4 05 F1 | 	add	objptr, ##5824
0d35c                 | '     return fill(addr, pattern, count, listPtr, 4)
0d35c     04 1A 06 F6 | 	mov	arg05, #4
0d360     20 B4 B0 FD | 	call	#_psram_spin2_fill
0d364     0B 00 00 FF 
0d368     C0 E4 85 F1 | 	sub	objptr, ##5824
0d36c     D8 00 90 FD | 	jmp	#LR__1022
0d370                 | LR__1017
0d370     30 4E 05 F1 | 	add	fp, #48
0d374     A7 12 02 FB | 	rdlong	arg01, fp
0d378     30 4E 85 F1 | 	sub	fp, #48
0d37c     A7 14 02 FB | 	rdlong	arg02, fp
0d380     01 16 06 F6 | 	mov	arg03, #1
0d384     00 18 06 F6 | 	mov	arg04, #0
0d388     0B 00 00 FF 
0d38c     C0 E4 05 F1 | 	add	objptr, ##5824
0d390                 | '     return fill(addr, pattern, count, listPtr, 4)
0d390     04 1A 06 F6 | 	mov	arg05, #4
0d394     EC B3 B0 FD | 	call	#_psram_spin2_fill
0d398     0B 00 00 FF 
0d39c     C0 E4 85 F1 | 	sub	objptr, ##5824
0d3a0     A4 00 90 FD | 	jmp	#LR__1022
0d3a4                 | LR__1018
0d3a4     30 4E 05 F1 | 	add	fp, #48
0d3a8     A7 12 02 FB | 	rdlong	arg01, fp
0d3ac     30 4E 85 F1 | 	sub	fp, #48
0d3b0     A7 14 02 FB | 	rdlong	arg02, fp
0d3b4     01 16 06 F6 | 	mov	arg03, #1
0d3b8     00 18 06 F6 | 	mov	arg04, #0
0d3bc     0B 00 00 FF 
0d3c0     C0 E4 05 F1 | 	add	objptr, ##5824
0d3c4                 | '     return fill(addr, pattern, count, listPtr, 4)
0d3c4     04 1A 06 F6 | 	mov	arg05, #4
0d3c8     B8 B3 B0 FD | 	call	#_psram_spin2_fill
0d3cc     0B 00 00 FF 
0d3d0     C0 E4 85 F1 | 	sub	objptr, ##5824
0d3d4     70 00 90 FD | 	jmp	#LR__1022
0d3d8                 | LR__1019
0d3d8     30 4E 05 F1 | 	add	fp, #48
0d3dc     A7 12 02 FB | 	rdlong	arg01, fp
0d3e0     30 4E 85 F1 | 	sub	fp, #48
0d3e4     A7 14 02 FB | 	rdlong	arg02, fp
0d3e8     01 16 06 F6 | 	mov	arg03, #1
0d3ec     00 18 06 F6 | 	mov	arg04, #0
0d3f0     0B 00 00 FF 
0d3f4     C0 E4 05 F1 | 	add	objptr, ##5824
0d3f8                 | '     return fill(addr, pattern, count, listPtr, 4)
0d3f8     04 1A 06 F6 | 	mov	arg05, #4
0d3fc     84 B3 B0 FD | 	call	#_psram_spin2_fill
0d400     0B 00 00 FF 
0d404     C0 E4 85 F1 | 	sub	objptr, ##5824
0d408     3C 00 90 FD | 	jmp	#LR__1022
0d40c                 | LR__1020
0d40c     30 4E 05 F1 | 	add	fp, #48
0d410     A7 12 02 FB | 	rdlong	arg01, fp
0d414     30 4E 85 F1 | 	sub	fp, #48
0d418     A7 14 02 FB | 	rdlong	arg02, fp
0d41c     01 16 06 F6 | 	mov	arg03, #1
0d420     00 18 06 F6 | 	mov	arg04, #0
0d424     0B 00 00 FF 
0d428     C0 E4 05 F1 | 	add	objptr, ##5824
0d42c                 | '     return fill(addr, pattern, count, listPtr, 4)
0d42c     04 1A 06 F6 | 	mov	arg05, #4
0d430     50 B3 B0 FD | 	call	#_psram_spin2_fill
0d434     0B 00 00 FF 
0d438     C0 E4 85 F1 | 	sub	objptr, ##5824
0d43c     08 00 90 FD | 	jmp	#LR__1022
0d440                 | LR__1021
0d440     2F 12 06 F6 | 	mov	arg01, #47
0d444     CC 87 B0 FD | 	call	#_printerror
0d448                 | LR__1022
0d448                 | LR__1023
0d448     A7 F0 03 F6 | 	mov	ptra, fp
0d44c     B2 00 A0 FD | 	call	#popregs_
0d450                 | _do_assign_ret
0d450     2D 00 64 FD | 	ret
0d454                 | 
0d454                 | ' 
0d454                 | ' 
0d454                 | ' ' --------------------- Read a variable and push to the stack
0d454                 | ' 
0d454                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0d454                 | ' 
0d454                 | ' sub do_getvar
0d454                 | _do_getvar
0d454     04 4A 05 F6 | 	mov	COUNT_, #4
0d458     A8 00 A0 FD | 	call	#pushregs_
0d45c     3C F0 07 F1 | 	add	ptra, #60
0d460                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0d460                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0d460     69 00 00 FF 
0d464     44 E5 05 F1 | 	add	objptr, ##54084
0d468     F2 1E 02 FB | 	rdlong	local01, objptr
0d46c     0F 17 02 F6 | 	mov	arg03, local01
0d470     01 16 66 F0 | 	shl	arg03, #1
0d474     0F 17 02 F1 | 	add	arg03, local01
0d478     02 16 66 F0 | 	shl	arg03, #2
0d47c     03 00 00 FF 
0d480     04 E4 85 F1 | 	sub	objptr, ##1540
0d484     F2 16 02 F1 | 	add	arg03, objptr
0d488     04 16 06 F1 | 	add	arg03, #4
0d48c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0d490     66 00 00 FF 
0d494     40 E5 85 F1 | 	sub	objptr, ##52544
0d498     C4 00 90 5D |  if_ne	jmp	#LR__1031
0d49c     69 00 00 FF 
0d4a0     44 E5 05 F1 | 	add	objptr, ##54084
0d4a4     F2 1E 02 FB | 	rdlong	local01, objptr
0d4a8     0F 13 02 F6 | 	mov	arg01, local01
0d4ac     01 12 66 F0 | 	shl	arg01, #1
0d4b0     0F 13 02 F1 | 	add	arg01, local01
0d4b4     02 12 66 F0 | 	shl	arg01, #2
0d4b8     03 00 00 FF 
0d4bc     04 E4 85 F1 | 	sub	objptr, ##1540
0d4c0     F2 12 02 F1 | 	add	arg01, objptr
0d4c4     09 1F 02 FB | 	rdlong	local01, arg01
0d4c8     04 1E 66 F0 | 	shl	local01, #4
0d4cc     32 00 00 FF 
0d4d0     74 E4 85 F1 | 	sub	objptr, ##25716
0d4d4     F2 1E 02 F1 | 	add	local01, objptr
0d4d8     04 1E 06 F1 | 	add	local01, #4
0d4dc     0F 13 02 FB | 	rdlong	arg01, local01
0d4e0     04 1E 06 F1 | 	add	local01, #4
0d4e4     0F 1F 02 FB | 	rdlong	local01, local01
0d4e8     A7 12 62 FC | 	wrlong	arg01, fp
0d4ec     04 4E 05 F1 | 	add	fp, #4
0d4f0     A7 1E 62 FC | 	wrlong	local01, fp
0d4f4     35 00 00 FF 
0d4f8     78 E4 05 F1 | 	add	objptr, ##27256
0d4fc     F2 1E 02 FB | 	rdlong	local01, objptr
0d500     0F 13 02 F6 | 	mov	arg01, local01
0d504     01 12 66 F0 | 	shl	arg01, #1
0d508     0F 13 02 F1 | 	add	arg01, local01
0d50c     02 12 66 F0 | 	shl	arg01, #2
0d510     03 00 00 FF 
0d514     04 E4 85 F1 | 	sub	objptr, ##1540
0d518     F2 12 02 F1 | 	add	arg01, objptr
0d51c     09 1F 02 FB | 	rdlong	local01, arg01
0d520     04 1E 66 F0 | 	shl	local01, #4
0d524     32 00 00 FF 
0d528     74 E4 85 F1 | 	sub	objptr, ##25716
0d52c     F2 1E 02 F1 | 	add	local01, objptr
0d530     0C 1E 06 F1 | 	add	local01, #12
0d534     0F 1F 02 FB | 	rdlong	local01, local01
0d538     04 4E 05 F1 | 	add	fp, #4
0d53c     A7 1E 62 FC | 	wrlong	local01, fp
0d540                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0d540                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0d540                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0d540     08 4E 85 F1 | 	sub	fp, #8
0d544     00 1F 16 F2 | 	cmp	local01, #256 wc
0d548     34 00 00 FF 
0d54c     CC E4 85 F1 | 	sub	objptr, ##26828
0d550     0C 00 90 3D |  if_ae	jmp	#LR__1030
0d554     A7 12 02 F6 | 	mov	arg01, fp
0d558     74 C4 BF FD | 	call	#_push
0d55c     A0 04 90 FD | 	jmp	#LR__1052
0d560                 | LR__1030
0d560                 | LR__1031
0d560     69 00 00 FF 
0d564     44 E5 05 F1 | 	add	objptr, ##54084
0d568     F2 16 02 FB | 	rdlong	arg03, objptr
0d56c     0B 15 02 F6 | 	mov	arg02, arg03
0d570     01 14 66 F0 | 	shl	arg02, #1
0d574     0B 15 02 F1 | 	add	arg02, arg03
0d578     02 14 66 F0 | 	shl	arg02, #2
0d57c     03 00 00 FF 
0d580     04 E4 85 F1 | 	sub	objptr, ##1540
0d584     F2 14 02 F1 | 	add	arg02, objptr
0d588     0A 17 02 FB | 	rdlong	arg03, arg02
0d58c     04 16 66 F0 | 	shl	arg03, #4
0d590     32 00 00 FF 
0d594     74 E4 85 F1 | 	sub	objptr, ##25716
0d598     F2 16 02 F1 | 	add	arg03, objptr
0d59c     04 16 06 F1 | 	add	arg03, #4
0d5a0     0B 13 02 FB | 	rdlong	arg01, arg03
0d5a4     0C 4E 05 F1 | 	add	fp, #12
0d5a8     A7 12 62 FC | 	wrlong	arg01, fp
0d5ac     0C 4E 85 F1 | 	sub	fp, #12
0d5b0     34 00 00 FF 
0d5b4     CC E4 85 F1 | 	sub	objptr, ##26828
0d5b8     14 88 B0 FD | 	call	#_pslpeek
0d5bc     FD FA 31 F9 | 	getword	result1, result1, #0
0d5c0     10 4E 05 F1 | 	add	fp, #16
0d5c4     A7 FA 61 FC | 	wrlong	result1, fp
0d5c8     69 00 00 FF 
0d5cc     44 E5 05 F1 | 	add	objptr, ##54084
0d5d0     F2 16 02 FB | 	rdlong	arg03, objptr
0d5d4     0B 15 02 F6 | 	mov	arg02, arg03
0d5d8     01 14 66 F0 | 	shl	arg02, #1
0d5dc     0B 15 02 F1 | 	add	arg02, arg03
0d5e0     02 14 66 F0 | 	shl	arg02, #2
0d5e4     03 00 00 FF 
0d5e8     04 E4 85 F1 | 	sub	objptr, ##1540
0d5ec     F2 14 02 F1 | 	add	arg02, objptr
0d5f0     04 14 06 F1 | 	add	arg02, #4
0d5f4     0A 17 02 FB | 	rdlong	arg03, arg02
0d5f8     04 4E 05 F1 | 	add	fp, #4
0d5fc     A7 16 62 FC | 	wrlong	arg03, fp
0d600     08 4E 85 F1 | 	sub	fp, #8
0d604     A7 12 02 FB | 	rdlong	arg01, fp
0d608     0C 4E 85 F1 | 	sub	fp, #12
0d60c     02 12 06 F1 | 	add	arg01, #2
0d610     66 00 00 FF 
0d614     40 E5 85 F1 | 	sub	objptr, ##52544
0d618     5C 87 B0 FD | 	call	#_pspeek
0d61c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d620     18 4E 05 F1 | 	add	fp, #24
0d624     A7 FA 61 FC | 	wrlong	result1, fp
0d628     0C 4E 85 F1 | 	sub	fp, #12
0d62c     A7 12 02 FB | 	rdlong	arg01, fp
0d630     0C 4E 85 F1 | 	sub	fp, #12
0d634     04 12 06 F1 | 	add	arg01, #4
0d638     94 87 B0 FD | 	call	#_pslpeek
0d63c     1C 4E 05 F1 | 	add	fp, #28
0d640     A7 FA 61 FC | 	wrlong	result1, fp
0d644     10 4E 85 F1 | 	sub	fp, #16
0d648     A7 12 02 FB | 	rdlong	arg01, fp
0d64c     0C 4E 85 F1 | 	sub	fp, #12
0d650     08 12 06 F1 | 	add	arg01, #8
0d654     78 87 B0 FD | 	call	#_pslpeek
0d658     20 4E 05 F1 | 	add	fp, #32
0d65c     A7 FA 61 FC | 	wrlong	result1, fp
0d660     14 4E 85 F1 | 	sub	fp, #20
0d664     A7 12 02 FB | 	rdlong	arg01, fp
0d668     0C 4E 85 F1 | 	sub	fp, #12
0d66c     0C 12 06 F1 | 	add	arg01, #12
0d670     5C 87 B0 FD | 	call	#_pslpeek
0d674     24 4E 05 F1 | 	add	fp, #36
0d678     A7 FA 61 FC | 	wrlong	result1, fp
0d67c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0d67c                 | ' esize=pspeek(arrptr+2)
0d67c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0d67c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0d67c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0d67c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0d67c     10 4E 85 F1 | 	sub	fp, #16
0d680     A7 16 02 FB | 	rdlong	arg03, fp
0d684     14 4E 85 F1 | 	sub	fp, #20
0d688     03 16 16 F2 | 	cmp	arg03, #3 wc
0d68c     38 00 90 CD |  if_b	jmp	#LR__1032
0d690     A4 C2 BF FD | 	call	#_pop
0d694     FF 16 02 F6 | 	mov	arg03, result3
0d698     A7 FA 61 FC | 	wrlong	result1, fp
0d69c     04 4E 05 F1 | 	add	fp, #4
0d6a0     A7 FC 61 FC | 	wrlong	result2, fp
0d6a4     04 4E 05 F1 | 	add	fp, #4
0d6a8     A7 16 62 FC | 	wrlong	arg03, fp
0d6ac     08 4E 85 F1 | 	sub	fp, #8
0d6b0     A7 12 02 F6 | 	mov	arg01, fp
0d6b4     18 3A B0 FD | 	call	#_converttoint
0d6b8     30 4E 05 F1 | 	add	fp, #48
0d6bc     A7 FA 61 FC | 	wrlong	result1, fp
0d6c0     30 4E 85 F1 | 	sub	fp, #48
0d6c4     0C 00 90 FD | 	jmp	#LR__1033
0d6c8                 | LR__1032
0d6c8     30 4E 05 F1 | 	add	fp, #48
0d6cc     A7 00 68 FC | 	wrlong	#0, fp
0d6d0     30 4E 85 F1 | 	sub	fp, #48
0d6d4                 | LR__1033
0d6d4                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0d6d4     14 4E 05 F1 | 	add	fp, #20
0d6d8     A7 16 02 FB | 	rdlong	arg03, fp
0d6dc     14 4E 85 F1 | 	sub	fp, #20
0d6e0     02 16 16 F2 | 	cmp	arg03, #2 wc
0d6e4     38 00 90 CD |  if_b	jmp	#LR__1034
0d6e8     4C C2 BF FD | 	call	#_pop
0d6ec     FF 16 02 F6 | 	mov	arg03, result3
0d6f0     A7 FA 61 FC | 	wrlong	result1, fp
0d6f4     04 4E 05 F1 | 	add	fp, #4
0d6f8     A7 FC 61 FC | 	wrlong	result2, fp
0d6fc     04 4E 05 F1 | 	add	fp, #4
0d700     A7 16 62 FC | 	wrlong	arg03, fp
0d704     08 4E 85 F1 | 	sub	fp, #8
0d708     A7 12 02 F6 | 	mov	arg01, fp
0d70c     C0 39 B0 FD | 	call	#_converttoint
0d710     2C 4E 05 F1 | 	add	fp, #44
0d714     A7 FA 61 FC | 	wrlong	result1, fp
0d718     2C 4E 85 F1 | 	sub	fp, #44
0d71c     0C 00 90 FD | 	jmp	#LR__1035
0d720                 | LR__1034
0d720     2C 4E 05 F1 | 	add	fp, #44
0d724     A7 00 68 FC | 	wrlong	#0, fp
0d728     2C 4E 85 F1 | 	sub	fp, #44
0d72c                 | LR__1035
0d72c                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0d72c     14 4E 05 F1 | 	add	fp, #20
0d730     A7 16 02 FB | 	rdlong	arg03, fp
0d734     14 4E 85 F1 | 	sub	fp, #20
0d738     01 16 16 F2 | 	cmp	arg03, #1 wc
0d73c     38 00 90 CD |  if_b	jmp	#LR__1036
0d740     F4 C1 BF FD | 	call	#_pop
0d744     FF 16 02 F6 | 	mov	arg03, result3
0d748     A7 FA 61 FC | 	wrlong	result1, fp
0d74c     04 4E 05 F1 | 	add	fp, #4
0d750     A7 FC 61 FC | 	wrlong	result2, fp
0d754     04 4E 05 F1 | 	add	fp, #4
0d758     A7 16 62 FC | 	wrlong	arg03, fp
0d75c     08 4E 85 F1 | 	sub	fp, #8
0d760     A7 12 02 F6 | 	mov	arg01, fp
0d764     68 39 B0 FD | 	call	#_converttoint
0d768     28 4E 05 F1 | 	add	fp, #40
0d76c     A7 FA 61 FC | 	wrlong	result1, fp
0d770     28 4E 85 F1 | 	sub	fp, #40
0d774     0C 00 90 FD | 	jmp	#LR__1037
0d778                 | LR__1036
0d778     28 4E 05 F1 | 	add	fp, #40
0d77c     A7 00 68 FC | 	wrlong	#0, fp
0d780     28 4E 85 F1 | 	sub	fp, #40
0d784                 | LR__1037
0d784     0C 4E 05 F1 | 	add	fp, #12
0d788     A7 20 02 FB | 	rdlong	local02, fp
0d78c     1C 4E 05 F1 | 	add	fp, #28
0d790     A7 22 02 FB | 	rdlong	local03, fp
0d794     04 4E 05 F1 | 	add	fp, #4
0d798     A7 FC 01 FB | 	rdlong	result2, fp
0d79c     10 4E 85 F1 | 	sub	fp, #16
0d7a0     A7 FE 01 FB | 	rdlong	result3, fp
0d7a4     FF FC 01 FD | 	qmul	result2, result3
0d7a8     10 20 06 F1 | 	add	local02, #16
0d7ac     14 4E 05 F1 | 	add	fp, #20
0d7b0     A7 FC 01 FB | 	rdlong	result2, fp
0d7b4     18 FA 61 FD | 	getqx	result1
0d7b8     FF FC 01 FD | 	qmul	result2, result3
0d7bc     FD 22 02 F1 | 	add	local03, result1
0d7c0     10 4E 85 F1 | 	sub	fp, #16
0d7c4     A7 FE 01 FB | 	rdlong	result3, fp
0d7c8     18 FC 61 FD | 	getqx	result2
0d7cc     FF FC 01 FD | 	qmul	result2, result3
0d7d0     08 4E 85 F1 | 	sub	fp, #8
0d7d4     A7 FE 01 FB | 	rdlong	result3, fp
0d7d8     18 FC 61 FD | 	getqx	result2
0d7dc     FE 22 02 F1 | 	add	local03, result2
0d7e0     FF 22 02 FD | 	qmul	local03, result3
0d7e4     1C 4E 05 F1 | 	add	fp, #28
0d7e8                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0d7e8                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0d7e8                 | ' 
0d7e8                 | ' select case vartype
0d7e8     18 FC 61 FD | 	getqx	result2
0d7ec     FE 20 02 F1 | 	add	local02, result2
0d7f0     A7 20 62 FC | 	wrlong	local02, fp
0d7f4     24 4E 85 F1 | 	sub	fp, #36
0d7f8     A7 24 02 FB | 	rdlong	local04, fp
0d7fc     10 4E 85 F1 | 	sub	fp, #16
0d800     00 25 86 F1 | 	sub	local04, #256
0d804     0C 24 26 F3 | 	fle	local04, #12
0d808     30 24 62 FD | 	jmprel	local04
0d80c                 | LR__1038
0d80c     30 00 90 FD | 	jmp	#LR__1039
0d810     58 00 90 FD | 	jmp	#LR__1040
0d814     8C 00 90 FD | 	jmp	#LR__1041
0d818     AC 00 90 FD | 	jmp	#LR__1042
0d81c     E8 00 90 FD | 	jmp	#LR__1043
0d820     08 01 90 FD | 	jmp	#LR__1044
0d824     24 01 90 FD | 	jmp	#LR__1045
0d828     40 01 90 FD | 	jmp	#LR__1046
0d82c     50 01 90 FD | 	jmp	#LR__1047
0d830     60 01 90 FD | 	jmp	#LR__1048
0d834     7C 01 90 FD | 	jmp	#LR__1049
0d838     8C 01 90 FD | 	jmp	#LR__1050
0d83c     B8 01 90 FD | 	jmp	#LR__1051
0d840                 | LR__1039
0d840     A7 12 02 F6 | 	mov	arg01, fp
0d844     34 4E 05 F1 | 	add	fp, #52
0d848     A7 14 02 FB | 	rdlong	arg02, fp
0d84c     34 4E 85 F1 | 	sub	fp, #52
0d850     0C 16 06 F6 | 	mov	arg03, #12
0d854     0B 00 00 FF 
0d858     C0 E4 05 F1 | 	add	objptr, ##5824
0d85c     EC AD B0 FD | 	call	#_psram_spin2_read1
0d860     0B 00 00 FF 
0d864     C0 E4 85 F1 | 	sub	objptr, ##5824
0d868     8C 01 90 FD | 	jmp	#LR__1051
0d86c                 | LR__1040
0d86c     08 4E 05 F1 | 	add	fp, #8
0d870     A7 38 68 FC | 	wrlong	#28, fp
0d874     2C 4E 05 F1 | 	add	fp, #44
0d878     A7 12 02 FB | 	rdlong	arg01, fp
0d87c     34 4E 85 F1 | 	sub	fp, #52
0d880     F4 84 B0 FD | 	call	#_pspeek
0d884     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d888     A7 FA 61 FC | 	wrlong	result1, fp
0d88c     80 FA 15 F2 | 	cmp	result1, #128 wc
0d890     00 1F 66 36 |  if_ae	neg	local01, #256
0d894     A7 22 02 3B |  if_ae	rdlong	local03, fp
0d898     11 1F 42 35 |  if_ae	or	local01, local03
0d89c     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0d8a0     54 01 90 FD | 	jmp	#LR__1051
0d8a4                 | LR__1041
0d8a4     08 4E 05 F1 | 	add	fp, #8
0d8a8     A7 3A 68 FC | 	wrlong	#29, fp
0d8ac     2C 4E 05 F1 | 	add	fp, #44
0d8b0     A7 12 02 FB | 	rdlong	arg01, fp
0d8b4     34 4E 85 F1 | 	sub	fp, #52
0d8b8     BC 84 B0 FD | 	call	#_pspeek
0d8bc     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d8c0     A7 FA 61 FC | 	wrlong	result1, fp
0d8c4     30 01 90 FD | 	jmp	#LR__1051
0d8c8                 | LR__1042
0d8c8     08 4E 05 F1 | 	add	fp, #8
0d8cc     A7 38 68 FC | 	wrlong	#28, fp
0d8d0     2C 4E 05 F1 | 	add	fp, #44
0d8d4     A7 12 02 FB | 	rdlong	arg01, fp
0d8d8     34 4E 85 F1 | 	sub	fp, #52
0d8dc     F0 84 B0 FD | 	call	#_pslpeek
0d8e0     FD FA 31 F9 | 	getword	result1, result1, #0
0d8e4     A7 FA 61 FC | 	wrlong	result1, fp
0d8e8     40 00 00 FF 
0d8ec     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0d8f0     FF 7F 00 3F 
0d8f4     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0d8f8     A7 22 02 3B |  if_ae	rdlong	local03, fp
0d8fc     11 1F 42 35 |  if_ae	or	local01, local03
0d900     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0d904     F0 00 90 FD | 	jmp	#LR__1051
0d908                 | LR__1043
0d908     08 4E 05 F1 | 	add	fp, #8
0d90c     A7 3A 68 FC | 	wrlong	#29, fp
0d910     2C 4E 05 F1 | 	add	fp, #44
0d914     A7 12 02 FB | 	rdlong	arg01, fp
0d918     34 4E 85 F1 | 	sub	fp, #52
0d91c     B0 84 B0 FD | 	call	#_pslpeek
0d920     FD FA 31 F9 | 	getword	result1, result1, #0
0d924     A7 FA 61 FC | 	wrlong	result1, fp
0d928     CC 00 90 FD | 	jmp	#LR__1051
0d92c                 | LR__1044
0d92c     08 4E 05 F1 | 	add	fp, #8
0d930     A7 38 68 FC | 	wrlong	#28, fp
0d934     2C 4E 05 F1 | 	add	fp, #44
0d938     A7 12 02 FB | 	rdlong	arg01, fp
0d93c     34 4E 85 F1 | 	sub	fp, #52
0d940     8C 84 B0 FD | 	call	#_pslpeek
0d944     A7 FA 61 FC | 	wrlong	result1, fp
0d948     AC 00 90 FD | 	jmp	#LR__1051
0d94c                 | LR__1045
0d94c     08 4E 05 F1 | 	add	fp, #8
0d950     A7 3A 68 FC | 	wrlong	#29, fp
0d954     2C 4E 05 F1 | 	add	fp, #44
0d958     A7 12 02 FB | 	rdlong	arg01, fp
0d95c     34 4E 85 F1 | 	sub	fp, #52
0d960     6C 84 B0 FD | 	call	#_pslpeek
0d964     A7 FA 61 FC | 	wrlong	result1, fp
0d968     8C 00 90 FD | 	jmp	#LR__1051
0d96c                 | LR__1046
0d96c     08 4E 05 F1 | 	add	fp, #8
0d970     A7 FE 69 FC | 	wrlong	#255, fp
0d974     08 4E 85 F1 | 	sub	fp, #8
0d978     A7 60 68 FC | 	wrlong	#48, fp
0d97c     78 00 90 FD | 	jmp	#LR__1051
0d980                 | LR__1047
0d980     08 4E 05 F1 | 	add	fp, #8
0d984     A7 FE 69 FC | 	wrlong	#255, fp
0d988     08 4E 85 F1 | 	sub	fp, #8
0d98c     A7 60 68 FC | 	wrlong	#48, fp
0d990     64 00 90 FD | 	jmp	#LR__1051
0d994                 | LR__1048
0d994     08 4E 05 F1 | 	add	fp, #8
0d998     A7 3C 68 FC | 	wrlong	#30, fp
0d99c     2C 4E 05 F1 | 	add	fp, #44
0d9a0     A7 12 02 FB | 	rdlong	arg01, fp
0d9a4     34 4E 85 F1 | 	sub	fp, #52
0d9a8     24 84 B0 FD | 	call	#_pslpeek
0d9ac     A7 FA 61 FC | 	wrlong	result1, fp
0d9b0     44 00 90 FD | 	jmp	#LR__1051
0d9b4                 | LR__1049
0d9b4     08 4E 05 F1 | 	add	fp, #8
0d9b8     A7 FE 69 FC | 	wrlong	#255, fp
0d9bc     08 4E 85 F1 | 	sub	fp, #8
0d9c0     A7 60 68 FC | 	wrlong	#48, fp
0d9c4     30 00 90 FD | 	jmp	#LR__1051
0d9c8                 | LR__1050
0d9c8     08 4E 05 F1 | 	add	fp, #8
0d9cc     A7 3E 68 FC | 	wrlong	#31, fp
0d9d0     2C 4E 05 F1 | 	add	fp, #44
0d9d4     A7 12 02 FB | 	rdlong	arg01, fp
0d9d8     34 4E 85 F1 | 	sub	fp, #52
0d9dc     F0 83 B0 FD | 	call	#_pslpeek
0d9e0     A7 FA 61 FC | 	wrlong	result1, fp
0d9e4     00 04 00 FF 
0d9e8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0d9ec     08 4E 05 31 |  if_ae	add	fp, #8
0d9f0     A7 56 68 3C |  if_ae	wrlong	#43, fp
0d9f4     08 4E 85 31 |  if_ae	sub	fp, #8
0d9f8                 | LR__1051
0d9f8     A7 12 02 F6 | 	mov	arg01, fp
0d9fc     D0 BF BF FD | 	call	#_push
0da00                 | LR__1052
0da00     A7 F0 03 F6 | 	mov	ptra, fp
0da04     B2 00 A0 FD | 	call	#popregs_
0da08                 | _do_getvar_ret
0da08     2D 00 64 FD | 	ret
0da0c                 | 
0da0c                 | ' 
0da0c                 | ' '------------------------ Operators 
0da0c                 | ' 
0da0c                 | ' sub do_plus 
0da0c                 | _do_plus
0da0c     05 4A 05 F6 | 	mov	COUNT_, #5
0da10     A8 00 A0 FD | 	call	#pushregs_
0da14     18 F0 07 F1 | 	add	ptra, #24
0da18     1C BF BF FD | 	call	#_pop
0da1c     FD 1E 02 F6 | 	mov	local01, result1
0da20     FE 20 02 F6 | 	mov	local02, result2
0da24     FF 22 02 F6 | 	mov	local03, result3
0da28     0C 4E 05 F1 | 	add	fp, #12
0da2c     A7 1E 62 FC | 	wrlong	local01, fp
0da30     04 4E 05 F1 | 	add	fp, #4
0da34     A7 20 62 FC | 	wrlong	local02, fp
0da38     04 4E 05 F1 | 	add	fp, #4
0da3c     A7 22 62 FC | 	wrlong	local03, fp
0da40     14 4E 85 F1 | 	sub	fp, #20
0da44     F0 BE BF FD | 	call	#_pop
0da48     FF 22 02 F6 | 	mov	local03, result3
0da4c     A7 FA 61 FC | 	wrlong	result1, fp
0da50     04 4E 05 F1 | 	add	fp, #4
0da54     A7 FC 61 FC | 	wrlong	result2, fp
0da58     04 4E 05 F1 | 	add	fp, #4
0da5c     A7 22 62 FC | 	wrlong	local03, fp
0da60                 | ' 
0da60                 | ' t2=pop()
0da60                 | ' t1=pop()
0da60                 | ' 
0da60                 | ' 
0da60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0da60     08 4E 85 F1 | 	sub	fp, #8
0da64     1D 22 0E F2 | 	cmp	local03, #29 wz
0da68     14 4E 05 A1 |  if_e	add	fp, #20
0da6c     A7 24 02 AB |  if_e	rdlong	local04, fp
0da70     14 4E 85 A1 |  if_e	sub	fp, #20
0da74     12 23 02 A6 |  if_e	mov	local03, local04
0da78     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0da7c     1C 00 90 5D |  if_ne	jmp	#LR__1060
0da80     A7 1E 02 FB | 	rdlong	local01, fp
0da84     0C 4E 05 F1 | 	add	fp, #12
0da88     A7 20 02 FB | 	rdlong	local02, fp
0da8c     0C 4E 85 F1 | 	sub	fp, #12
0da90     10 1F 02 F1 | 	add	local01, local02
0da94     A7 1E 62 FC | 	wrlong	local01, fp
0da98     48 04 90 FD | 	jmp	#LR__1075
0da9c                 | LR__1060
0da9c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0da9c     08 4E 05 F1 | 	add	fp, #8
0daa0     A7 1E 02 FB | 	rdlong	local01, fp
0daa4     08 4E 85 F1 | 	sub	fp, #8
0daa8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0daac     14 4E 05 A1 |  if_e	add	fp, #20
0dab0     A7 24 02 AB |  if_e	rdlong	local04, fp
0dab4     14 4E 85 A1 |  if_e	sub	fp, #20
0dab8     12 23 02 A6 |  if_e	mov	local03, local04
0dabc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dac0     28 00 90 5D |  if_ne	jmp	#LR__1061
0dac4     A7 1E 02 FB | 	rdlong	local01, fp
0dac8     0C 4E 05 F1 | 	add	fp, #12
0dacc     A7 20 02 FB | 	rdlong	local02, fp
0dad0     0C 4E 85 F1 | 	sub	fp, #12
0dad4     10 1F 02 F1 | 	add	local01, local02
0dad8     A7 1E 62 FC | 	wrlong	local01, fp
0dadc     08 4E 05 F1 | 	add	fp, #8
0dae0     A7 38 68 FC | 	wrlong	#28, fp
0dae4     08 4E 85 F1 | 	sub	fp, #8
0dae8     F8 03 90 FD | 	jmp	#LR__1075
0daec                 | LR__1061
0daec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0daec     08 4E 05 F1 | 	add	fp, #8
0daf0     A7 1E 02 FB | 	rdlong	local01, fp
0daf4     08 4E 85 F1 | 	sub	fp, #8
0daf8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dafc     14 4E 05 A1 |  if_e	add	fp, #20
0db00     A7 24 02 AB |  if_e	rdlong	local04, fp
0db04     14 4E 85 A1 |  if_e	sub	fp, #20
0db08     12 23 02 A6 |  if_e	mov	local03, local04
0db0c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0db10     30 00 90 5D |  if_ne	jmp	#LR__1062
0db14     A7 12 02 FB | 	rdlong	arg01, fp
0db18     68 DD B0 FD | 	call	#__system___float_fromuns
0db1c     FD 12 02 F6 | 	mov	arg01, result1
0db20     0C 4E 05 F1 | 	add	fp, #12
0db24     A7 14 02 FB | 	rdlong	arg02, fp
0db28     0C 4E 85 F1 | 	sub	fp, #12
0db2c     88 DD B0 FD | 	call	#__system___float_add
0db30     A7 FA 61 FC | 	wrlong	result1, fp
0db34     08 4E 05 F1 | 	add	fp, #8
0db38     A7 3C 68 FC | 	wrlong	#30, fp
0db3c     08 4E 85 F1 | 	sub	fp, #8
0db40     A0 03 90 FD | 	jmp	#LR__1075
0db44                 | LR__1062
0db44                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0db44     08 4E 05 F1 | 	add	fp, #8
0db48     A7 1E 02 FB | 	rdlong	local01, fp
0db4c     08 4E 85 F1 | 	sub	fp, #8
0db50     1C 1E 0E F2 | 	cmp	local01, #28 wz
0db54     14 4E 05 A1 |  if_e	add	fp, #20
0db58     A7 24 02 AB |  if_e	rdlong	local04, fp
0db5c     14 4E 85 A1 |  if_e	sub	fp, #20
0db60     12 23 02 A6 |  if_e	mov	local03, local04
0db64     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0db68     1C 00 90 5D |  if_ne	jmp	#LR__1063
0db6c     A7 1E 02 FB | 	rdlong	local01, fp
0db70     0C 4E 05 F1 | 	add	fp, #12
0db74     A7 20 02 FB | 	rdlong	local02, fp
0db78     0C 4E 85 F1 | 	sub	fp, #12
0db7c     10 1F 02 F1 | 	add	local01, local02
0db80     A7 1E 62 FC | 	wrlong	local01, fp
0db84     5C 03 90 FD | 	jmp	#LR__1075
0db88                 | LR__1063
0db88                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0db88     08 4E 05 F1 | 	add	fp, #8
0db8c     A7 1E 02 FB | 	rdlong	local01, fp
0db90     08 4E 85 F1 | 	sub	fp, #8
0db94     1C 1E 0E F2 | 	cmp	local01, #28 wz
0db98     14 4E 05 A1 |  if_e	add	fp, #20
0db9c     A7 24 02 AB |  if_e	rdlong	local04, fp
0dba0     14 4E 85 A1 |  if_e	sub	fp, #20
0dba4     12 23 02 A6 |  if_e	mov	local03, local04
0dba8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dbac     1C 00 90 5D |  if_ne	jmp	#LR__1064
0dbb0     A7 1E 02 FB | 	rdlong	local01, fp
0dbb4     0C 4E 05 F1 | 	add	fp, #12
0dbb8     A7 20 02 FB | 	rdlong	local02, fp
0dbbc     0C 4E 85 F1 | 	sub	fp, #12
0dbc0     10 1F 02 F1 | 	add	local01, local02
0dbc4     A7 1E 62 FC | 	wrlong	local01, fp
0dbc8     18 03 90 FD | 	jmp	#LR__1075
0dbcc                 | LR__1064
0dbcc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0dbcc     08 4E 05 F1 | 	add	fp, #8
0dbd0     A7 1E 02 FB | 	rdlong	local01, fp
0dbd4     08 4E 85 F1 | 	sub	fp, #8
0dbd8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dbdc     14 4E 05 A1 |  if_e	add	fp, #20
0dbe0     A7 24 02 AB |  if_e	rdlong	local04, fp
0dbe4     14 4E 85 A1 |  if_e	sub	fp, #20
0dbe8     12 23 02 A6 |  if_e	mov	local03, local04
0dbec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dbf0     40 00 90 5D |  if_ne	jmp	#LR__1065
0dbf4     A7 12 02 FB | 	rdlong	arg01, fp
0dbf8     09 13 52 F6 | 	abs	arg01, arg01 wc
0dbfc     1F 26 C6 C9 |  if_b	decod	local05, #31
0dc00     00 26 06 36 |  if_ae	mov	local05, #0
0dc04     7C DC B0 FD | 	call	#__system___float_fromuns
0dc08     13 FB 61 F5 | 	xor	result1, local05
0dc0c     FD 12 02 F6 | 	mov	arg01, result1
0dc10     0C 4E 05 F1 | 	add	fp, #12
0dc14     A7 14 02 FB | 	rdlong	arg02, fp
0dc18     0C 4E 85 F1 | 	sub	fp, #12
0dc1c     98 DC B0 FD | 	call	#__system___float_add
0dc20     A7 FA 61 FC | 	wrlong	result1, fp
0dc24     08 4E 05 F1 | 	add	fp, #8
0dc28     A7 3C 68 FC | 	wrlong	#30, fp
0dc2c     08 4E 85 F1 | 	sub	fp, #8
0dc30     B0 02 90 FD | 	jmp	#LR__1075
0dc34                 | LR__1065
0dc34                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0dc34     08 4E 05 F1 | 	add	fp, #8
0dc38     A7 1E 02 FB | 	rdlong	local01, fp
0dc3c     08 4E 85 F1 | 	sub	fp, #8
0dc40     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dc44     14 4E 05 A1 |  if_e	add	fp, #20
0dc48     A7 24 02 AB |  if_e	rdlong	local04, fp
0dc4c     14 4E 85 A1 |  if_e	sub	fp, #20
0dc50     12 23 02 A6 |  if_e	mov	local03, local04
0dc54     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dc58     28 00 90 5D |  if_ne	jmp	#LR__1066
0dc5c     A7 1E 02 FB | 	rdlong	local01, fp
0dc60     0C 4E 05 F1 | 	add	fp, #12
0dc64     A7 12 02 FB | 	rdlong	arg01, fp
0dc68     0C 4E 85 F1 | 	sub	fp, #12
0dc6c     14 DC B0 FD | 	call	#__system___float_fromuns
0dc70     FD 14 02 F6 | 	mov	arg02, result1
0dc74     0F 13 02 F6 | 	mov	arg01, local01
0dc78     3C DC B0 FD | 	call	#__system___float_add
0dc7c     A7 FA 61 FC | 	wrlong	result1, fp
0dc80     60 02 90 FD | 	jmp	#LR__1075
0dc84                 | LR__1066
0dc84                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0dc84     08 4E 05 F1 | 	add	fp, #8
0dc88     A7 1E 02 FB | 	rdlong	local01, fp
0dc8c     08 4E 85 F1 | 	sub	fp, #8
0dc90     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dc94     14 4E 05 A1 |  if_e	add	fp, #20
0dc98     A7 24 02 AB |  if_e	rdlong	local04, fp
0dc9c     14 4E 85 A1 |  if_e	sub	fp, #20
0dca0     12 23 02 A6 |  if_e	mov	local03, local04
0dca4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dca8     38 00 90 5D |  if_ne	jmp	#LR__1067
0dcac     A7 1E 02 FB | 	rdlong	local01, fp
0dcb0     0C 4E 05 F1 | 	add	fp, #12
0dcb4     A7 12 02 FB | 	rdlong	arg01, fp
0dcb8     0C 4E 85 F1 | 	sub	fp, #12
0dcbc     09 13 52 F6 | 	abs	arg01, arg01 wc
0dcc0     1F 26 C6 C9 |  if_b	decod	local05, #31
0dcc4     00 26 06 36 |  if_ae	mov	local05, #0
0dcc8     B8 DB B0 FD | 	call	#__system___float_fromuns
0dccc     13 FB 61 F5 | 	xor	result1, local05
0dcd0     FD 14 02 F6 | 	mov	arg02, result1
0dcd4     0F 13 02 F6 | 	mov	arg01, local01
0dcd8     DC DB B0 FD | 	call	#__system___float_add
0dcdc     A7 FA 61 FC | 	wrlong	result1, fp
0dce0     00 02 90 FD | 	jmp	#LR__1075
0dce4                 | LR__1067
0dce4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0dce4     08 4E 05 F1 | 	add	fp, #8
0dce8     A7 1E 02 FB | 	rdlong	local01, fp
0dcec     08 4E 85 F1 | 	sub	fp, #8
0dcf0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dcf4     14 4E 05 A1 |  if_e	add	fp, #20
0dcf8     A7 24 02 AB |  if_e	rdlong	local04, fp
0dcfc     14 4E 85 A1 |  if_e	sub	fp, #20
0dd00     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0dd04     1C 00 90 5D |  if_ne	jmp	#LR__1068
0dd08     A7 12 02 FB | 	rdlong	arg01, fp
0dd0c     0C 4E 05 F1 | 	add	fp, #12
0dd10     A7 14 02 FB | 	rdlong	arg02, fp
0dd14     0C 4E 85 F1 | 	sub	fp, #12
0dd18     9C DB B0 FD | 	call	#__system___float_add
0dd1c     A7 FA 61 FC | 	wrlong	result1, fp
0dd20     C0 01 90 FD | 	jmp	#LR__1075
0dd24                 | LR__1068
0dd24                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0dd24     08 4E 05 F1 | 	add	fp, #8
0dd28     A7 1E 02 FB | 	rdlong	local01, fp
0dd2c     08 4E 85 F1 | 	sub	fp, #8
0dd30     1F 1E 0E F2 | 	cmp	local01, #31 wz
0dd34     24 00 90 5D |  if_ne	jmp	#LR__1069
0dd38     14 4E 05 F1 | 	add	fp, #20
0dd3c     A7 22 02 FB | 	rdlong	local03, fp
0dd40     14 4E 85 F1 | 	sub	fp, #20
0dd44     1F 22 0E F2 | 	cmp	local03, #31 wz
0dd48     A7 04 68 5C |  if_ne	wrlong	#2, fp
0dd4c     08 4E 05 51 |  if_ne	add	fp, #8
0dd50     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0dd54     08 4E 85 51 |  if_ne	sub	fp, #8
0dd58     88 01 90 5D |  if_ne	jmp	#LR__1075
0dd5c                 | LR__1069
0dd5c                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0dd5c     14 4E 05 F1 | 	add	fp, #20
0dd60     A7 1E 02 FB | 	rdlong	local01, fp
0dd64     14 4E 85 F1 | 	sub	fp, #20
0dd68     1F 1E 0E F2 | 	cmp	local01, #31 wz
0dd6c     24 00 90 5D |  if_ne	jmp	#LR__1070
0dd70     08 4E 05 F1 | 	add	fp, #8
0dd74     A7 22 02 FB | 	rdlong	local03, fp
0dd78     08 4E 85 F1 | 	sub	fp, #8
0dd7c     1F 22 0E F2 | 	cmp	local03, #31 wz
0dd80     A7 04 68 5C |  if_ne	wrlong	#2, fp
0dd84     08 4E 05 51 |  if_ne	add	fp, #8
0dd88     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0dd8c     08 4E 85 51 |  if_ne	sub	fp, #8
0dd90     50 01 90 5D |  if_ne	jmp	#LR__1075
0dd94                 | LR__1070
0dd94                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0dd94     08 4E 05 F1 | 	add	fp, #8
0dd98     A7 1E 02 FB | 	rdlong	local01, fp
0dd9c     08 4E 85 F1 | 	sub	fp, #8
0dda0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0dda4     14 4E 05 A1 |  if_e	add	fp, #20
0dda8     A7 22 02 AB |  if_e	rdlong	local03, fp
0ddac     14 4E 85 A1 |  if_e	sub	fp, #20
0ddb0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0ddb4     1C 00 90 5D |  if_ne	jmp	#LR__1071
0ddb8     A7 12 02 FB | 	rdlong	arg01, fp
0ddbc     0C 4E 05 F1 | 	add	fp, #12
0ddc0     A7 14 02 FB | 	rdlong	arg02, fp
0ddc4     0C 4E 85 F1 | 	sub	fp, #12
0ddc8     2C B4 B0 FD | 	call	#__system___string_concat
0ddcc     A7 FA 61 FC | 	wrlong	result1, fp
0ddd0     10 01 90 FD | 	jmp	#LR__1075
0ddd4                 | LR__1071
0ddd4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0ddd4     08 4E 05 F1 | 	add	fp, #8
0ddd8     A7 1E 02 FB | 	rdlong	local01, fp
0dddc     08 4E 85 F1 | 	sub	fp, #8
0dde0     2B 1E 0E F2 | 	cmp	local01, #43 wz
0dde4     14 4E 05 A1 |  if_e	add	fp, #20
0dde8     A7 22 02 AB |  if_e	rdlong	local03, fp
0ddec     14 4E 85 A1 |  if_e	sub	fp, #20
0ddf0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0ddf4     30 00 90 5D |  if_ne	jmp	#LR__1072
0ddf8     A7 12 02 FB | 	rdlong	arg01, fp
0ddfc     9C EE BF FD | 	call	#_convertstring
0de00     FD 12 02 F6 | 	mov	arg01, result1
0de04     0C 4E 05 F1 | 	add	fp, #12
0de08     A7 14 02 FB | 	rdlong	arg02, fp
0de0c     0C 4E 85 F1 | 	sub	fp, #12
0de10     E4 B3 B0 FD | 	call	#__system___string_concat
0de14     A7 FA 61 FC | 	wrlong	result1, fp
0de18     08 4E 05 F1 | 	add	fp, #8
0de1c     A7 3E 68 FC | 	wrlong	#31, fp
0de20     08 4E 85 F1 | 	sub	fp, #8
0de24     BC 00 90 FD | 	jmp	#LR__1075
0de28                 | LR__1072
0de28                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0de28     08 4E 05 F1 | 	add	fp, #8
0de2c     A7 1E 02 FB | 	rdlong	local01, fp
0de30     08 4E 85 F1 | 	sub	fp, #8
0de34     1F 1E 0E F2 | 	cmp	local01, #31 wz
0de38     14 4E 05 A1 |  if_e	add	fp, #20
0de3c     A7 22 02 AB |  if_e	rdlong	local03, fp
0de40     14 4E 85 A1 |  if_e	sub	fp, #20
0de44     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0de48     28 00 90 5D |  if_ne	jmp	#LR__1073
0de4c     A7 1E 02 FB | 	rdlong	local01, fp
0de50     0C 4E 05 F1 | 	add	fp, #12
0de54     A7 12 02 FB | 	rdlong	arg01, fp
0de58     0C 4E 85 F1 | 	sub	fp, #12
0de5c     3C EE BF FD | 	call	#_convertstring
0de60     FD 14 02 F6 | 	mov	arg02, result1
0de64     0F 13 02 F6 | 	mov	arg01, local01
0de68     8C B3 B0 FD | 	call	#__system___string_concat
0de6c     A7 FA 61 FC | 	wrlong	result1, fp
0de70     70 00 90 FD | 	jmp	#LR__1075
0de74                 | LR__1073
0de74                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0de74     08 4E 05 F1 | 	add	fp, #8
0de78     A7 1E 02 FB | 	rdlong	local01, fp
0de7c     08 4E 85 F1 | 	sub	fp, #8
0de80     2B 1E 0E F2 | 	cmp	local01, #43 wz
0de84     14 4E 05 A1 |  if_e	add	fp, #20
0de88     A7 22 02 AB |  if_e	rdlong	local03, fp
0de8c     14 4E 85 A1 |  if_e	sub	fp, #20
0de90     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0de94     3C 00 90 5D |  if_ne	jmp	#LR__1074
0de98     A7 12 02 FB | 	rdlong	arg01, fp
0de9c     FC ED BF FD | 	call	#_convertstring
0dea0     FD 1E 02 F6 | 	mov	local01, result1
0dea4     0C 4E 05 F1 | 	add	fp, #12
0dea8     A7 12 02 FB | 	rdlong	arg01, fp
0deac     0C 4E 85 F1 | 	sub	fp, #12
0deb0     E8 ED BF FD | 	call	#_convertstring
0deb4     FD 14 02 F6 | 	mov	arg02, result1
0deb8     0F 13 02 F6 | 	mov	arg01, local01
0debc     38 B3 B0 FD | 	call	#__system___string_concat
0dec0     A7 FA 61 FC | 	wrlong	result1, fp
0dec4     08 4E 05 F1 | 	add	fp, #8
0dec8     A7 3E 68 FC | 	wrlong	#31, fp
0decc     08 4E 85 F1 | 	sub	fp, #8
0ded0     10 00 90 FD | 	jmp	#LR__1075
0ded4                 | LR__1074
0ded4     A7 08 68 FC | 	wrlong	#4, fp
0ded8     08 4E 05 F1 | 	add	fp, #8
0dedc     A7 FE 69 FC | 	wrlong	#255, fp
0dee0     08 4E 85 F1 | 	sub	fp, #8
0dee4                 | LR__1075
0dee4     A7 12 02 F6 | 	mov	arg01, fp
0dee8     E4 BA BF FD | 	call	#_push
0deec     A7 F0 03 F6 | 	mov	ptra, fp
0def0     B2 00 A0 FD | 	call	#popregs_
0def4                 | _do_plus_ret
0def4     2D 00 64 FD | 	ret
0def8                 | 
0def8                 | ' 
0def8                 | ' sub do_minus
0def8                 | _do_minus
0def8     05 4A 05 F6 | 	mov	COUNT_, #5
0defc     A8 00 A0 FD | 	call	#pushregs_
0df00     18 F0 07 F1 | 	add	ptra, #24
0df04     30 BA BF FD | 	call	#_pop
0df08     FD 1E 02 F6 | 	mov	local01, result1
0df0c     FE 20 02 F6 | 	mov	local02, result2
0df10     FF 22 02 F6 | 	mov	local03, result3
0df14     0C 4E 05 F1 | 	add	fp, #12
0df18     A7 1E 62 FC | 	wrlong	local01, fp
0df1c     04 4E 05 F1 | 	add	fp, #4
0df20     A7 20 62 FC | 	wrlong	local02, fp
0df24     04 4E 05 F1 | 	add	fp, #4
0df28     A7 22 62 FC | 	wrlong	local03, fp
0df2c     14 4E 85 F1 | 	sub	fp, #20
0df30     04 BA BF FD | 	call	#_pop
0df34     FF 22 02 F6 | 	mov	local03, result3
0df38     A7 FA 61 FC | 	wrlong	result1, fp
0df3c     04 4E 05 F1 | 	add	fp, #4
0df40     A7 FC 61 FC | 	wrlong	result2, fp
0df44     04 4E 05 F1 | 	add	fp, #4
0df48     A7 22 62 FC | 	wrlong	local03, fp
0df4c                 | ' 
0df4c                 | ' t2=pop()
0df4c                 | ' t1=pop()
0df4c                 | ' 
0df4c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0df4c     08 4E 85 F1 | 	sub	fp, #8
0df50     1D 22 0E F2 | 	cmp	local03, #29 wz
0df54     14 4E 05 A1 |  if_e	add	fp, #20
0df58     A7 24 02 AB |  if_e	rdlong	local04, fp
0df5c     14 4E 85 A1 |  if_e	sub	fp, #20
0df60     12 23 02 A6 |  if_e	mov	local03, local04
0df64     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0df68     5C 00 90 5D |  if_ne	jmp	#LR__1081
0df6c                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0df6c     0C 4E 05 F1 | 	add	fp, #12
0df70     A7 1E 02 FB | 	rdlong	local01, fp
0df74     0C 4E 85 F1 | 	sub	fp, #12
0df78     A7 22 02 FB | 	rdlong	local03, fp
0df7c     11 1F 12 F2 | 	cmp	local01, local03 wc
0df80     1C 00 90 3D |  if_ae	jmp	#LR__1080
0df84     A7 1E 02 FB | 	rdlong	local01, fp
0df88     0C 4E 05 F1 | 	add	fp, #12
0df8c     A7 20 02 FB | 	rdlong	local02, fp
0df90     0C 4E 85 F1 | 	sub	fp, #12
0df94     10 1F 82 F1 | 	sub	local01, local02
0df98     A7 1E 62 FC | 	wrlong	local01, fp
0df9c     F4 02 90 FD | 	jmp	#LR__1090
0dfa0                 | LR__1080
0dfa0     A7 1E 02 FB | 	rdlong	local01, fp
0dfa4     0C 4E 05 F1 | 	add	fp, #12
0dfa8     A7 20 02 FB | 	rdlong	local02, fp
0dfac     0C 4E 85 F1 | 	sub	fp, #12
0dfb0     10 1F 82 F1 | 	sub	local01, local02
0dfb4     A7 1E 62 FC | 	wrlong	local01, fp
0dfb8     08 4E 05 F1 | 	add	fp, #8
0dfbc     A7 38 68 FC | 	wrlong	#28, fp
0dfc0     08 4E 85 F1 | 	sub	fp, #8
0dfc4     CC 02 90 FD | 	jmp	#LR__1090
0dfc8                 | LR__1081
0dfc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0dfc8     08 4E 05 F1 | 	add	fp, #8
0dfcc     A7 1E 02 FB | 	rdlong	local01, fp
0dfd0     08 4E 85 F1 | 	sub	fp, #8
0dfd4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dfd8     14 4E 05 A1 |  if_e	add	fp, #20
0dfdc     A7 24 02 AB |  if_e	rdlong	local04, fp
0dfe0     14 4E 85 A1 |  if_e	sub	fp, #20
0dfe4     12 23 02 A6 |  if_e	mov	local03, local04
0dfe8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dfec     28 00 90 5D |  if_ne	jmp	#LR__1082
0dff0     A7 1E 02 FB | 	rdlong	local01, fp
0dff4     0C 4E 05 F1 | 	add	fp, #12
0dff8     A7 20 02 FB | 	rdlong	local02, fp
0dffc     0C 4E 85 F1 | 	sub	fp, #12
0e000     10 1F 82 F1 | 	sub	local01, local02
0e004     A7 1E 62 FC | 	wrlong	local01, fp
0e008     08 4E 05 F1 | 	add	fp, #8
0e00c     A7 38 68 FC | 	wrlong	#28, fp
0e010     08 4E 85 F1 | 	sub	fp, #8
0e014     7C 02 90 FD | 	jmp	#LR__1090
0e018                 | LR__1082
0e018                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0e018     08 4E 05 F1 | 	add	fp, #8
0e01c     A7 1E 02 FB | 	rdlong	local01, fp
0e020     08 4E 85 F1 | 	sub	fp, #8
0e024     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e028     14 4E 05 A1 |  if_e	add	fp, #20
0e02c     A7 24 02 AB |  if_e	rdlong	local04, fp
0e030     14 4E 85 A1 |  if_e	sub	fp, #20
0e034     12 23 02 A6 |  if_e	mov	local03, local04
0e038     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e03c     34 00 90 5D |  if_ne	jmp	#LR__1083
0e040     A7 12 02 FB | 	rdlong	arg01, fp
0e044     3C D8 B0 FD | 	call	#__system___float_fromuns
0e048     FD 12 02 F6 | 	mov	arg01, result1
0e04c     0C 4E 05 F1 | 	add	fp, #12
0e050     A7 14 02 FB | 	rdlong	arg02, fp
0e054     0C 4E 85 F1 | 	sub	fp, #12
0e058     1F 14 E6 F4 | 	bitnot	arg02, #31
0e05c     58 D8 B0 FD | 	call	#__system___float_add
0e060     A7 FA 61 FC | 	wrlong	result1, fp
0e064     08 4E 05 F1 | 	add	fp, #8
0e068     A7 3C 68 FC | 	wrlong	#30, fp
0e06c     08 4E 85 F1 | 	sub	fp, #8
0e070     20 02 90 FD | 	jmp	#LR__1090
0e074                 | LR__1083
0e074                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0e074     08 4E 05 F1 | 	add	fp, #8
0e078     A7 1E 02 FB | 	rdlong	local01, fp
0e07c     08 4E 85 F1 | 	sub	fp, #8
0e080     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e084     14 4E 05 A1 |  if_e	add	fp, #20
0e088     A7 24 02 AB |  if_e	rdlong	local04, fp
0e08c     14 4E 85 A1 |  if_e	sub	fp, #20
0e090     12 23 02 A6 |  if_e	mov	local03, local04
0e094     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e098     1C 00 90 5D |  if_ne	jmp	#LR__1084
0e09c     A7 1E 02 FB | 	rdlong	local01, fp
0e0a0     0C 4E 05 F1 | 	add	fp, #12
0e0a4     A7 20 02 FB | 	rdlong	local02, fp
0e0a8     0C 4E 85 F1 | 	sub	fp, #12
0e0ac     10 1F 82 F1 | 	sub	local01, local02
0e0b0     A7 1E 62 FC | 	wrlong	local01, fp
0e0b4     DC 01 90 FD | 	jmp	#LR__1090
0e0b8                 | LR__1084
0e0b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0e0b8     08 4E 05 F1 | 	add	fp, #8
0e0bc     A7 1E 02 FB | 	rdlong	local01, fp
0e0c0     08 4E 85 F1 | 	sub	fp, #8
0e0c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e0c8     14 4E 05 A1 |  if_e	add	fp, #20
0e0cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0e0d0     14 4E 85 A1 |  if_e	sub	fp, #20
0e0d4     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0e0d8     1C 00 90 5D |  if_ne	jmp	#LR__1085
0e0dc     A7 1E 02 FB | 	rdlong	local01, fp
0e0e0     0C 4E 05 F1 | 	add	fp, #12
0e0e4     A7 20 02 FB | 	rdlong	local02, fp
0e0e8     0C 4E 85 F1 | 	sub	fp, #12
0e0ec     10 1F 82 F1 | 	sub	local01, local02
0e0f0     A7 1E 62 FC | 	wrlong	local01, fp
0e0f4     9C 01 90 FD | 	jmp	#LR__1090
0e0f8                 | LR__1085
0e0f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0e0f8     08 4E 05 F1 | 	add	fp, #8
0e0fc     A7 1E 02 FB | 	rdlong	local01, fp
0e100     08 4E 85 F1 | 	sub	fp, #8
0e104     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e108     14 4E 05 A1 |  if_e	add	fp, #20
0e10c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e110     14 4E 85 A1 |  if_e	sub	fp, #20
0e114     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e118     44 00 90 5D |  if_ne	jmp	#LR__1086
0e11c     A7 12 02 FB | 	rdlong	arg01, fp
0e120     09 13 52 F6 | 	abs	arg01, arg01 wc
0e124     1F 26 C6 C9 |  if_b	decod	local05, #31
0e128     00 26 06 36 |  if_ae	mov	local05, #0
0e12c     54 D7 B0 FD | 	call	#__system___float_fromuns
0e130     13 FB 61 F5 | 	xor	result1, local05
0e134     FD 12 02 F6 | 	mov	arg01, result1
0e138     0C 4E 05 F1 | 	add	fp, #12
0e13c     A7 14 02 FB | 	rdlong	arg02, fp
0e140     0C 4E 85 F1 | 	sub	fp, #12
0e144     1F 14 E6 F4 | 	bitnot	arg02, #31
0e148     6C D7 B0 FD | 	call	#__system___float_add
0e14c     A7 FA 61 FC | 	wrlong	result1, fp
0e150     08 4E 05 F1 | 	add	fp, #8
0e154     A7 3C 68 FC | 	wrlong	#30, fp
0e158     08 4E 85 F1 | 	sub	fp, #8
0e15c     34 01 90 FD | 	jmp	#LR__1090
0e160                 | LR__1086
0e160                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0e160     08 4E 05 F1 | 	add	fp, #8
0e164     A7 1E 02 FB | 	rdlong	local01, fp
0e168     08 4E 85 F1 | 	sub	fp, #8
0e16c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e170     14 4E 05 A1 |  if_e	add	fp, #20
0e174     A7 22 02 AB |  if_e	rdlong	local03, fp
0e178     14 4E 85 A1 |  if_e	sub	fp, #20
0e17c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e180     2C 00 90 5D |  if_ne	jmp	#LR__1087
0e184     A7 1E 02 FB | 	rdlong	local01, fp
0e188     0C 4E 05 F1 | 	add	fp, #12
0e18c     A7 12 02 FB | 	rdlong	arg01, fp
0e190     0C 4E 85 F1 | 	sub	fp, #12
0e194     EC D6 B0 FD | 	call	#__system___float_fromuns
0e198     FD 14 02 F6 | 	mov	arg02, result1
0e19c     0F 13 02 F6 | 	mov	arg01, local01
0e1a0     1F 14 E6 F4 | 	bitnot	arg02, #31
0e1a4     10 D7 B0 FD | 	call	#__system___float_add
0e1a8     A7 FA 61 FC | 	wrlong	result1, fp
0e1ac     E4 00 90 FD | 	jmp	#LR__1090
0e1b0                 | LR__1087
0e1b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0e1b0     08 4E 05 F1 | 	add	fp, #8
0e1b4     A7 1E 02 FB | 	rdlong	local01, fp
0e1b8     08 4E 85 F1 | 	sub	fp, #8
0e1bc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e1c0     14 4E 05 A1 |  if_e	add	fp, #20
0e1c4     A7 22 02 AB |  if_e	rdlong	local03, fp
0e1c8     14 4E 85 A1 |  if_e	sub	fp, #20
0e1cc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e1d0     3C 00 90 5D |  if_ne	jmp	#LR__1088
0e1d4     A7 1E 02 FB | 	rdlong	local01, fp
0e1d8     0C 4E 05 F1 | 	add	fp, #12
0e1dc     A7 12 02 FB | 	rdlong	arg01, fp
0e1e0     0C 4E 85 F1 | 	sub	fp, #12
0e1e4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e1e8     1F 26 C6 C9 |  if_b	decod	local05, #31
0e1ec     00 26 06 36 |  if_ae	mov	local05, #0
0e1f0     90 D6 B0 FD | 	call	#__system___float_fromuns
0e1f4     13 FB 61 F5 | 	xor	result1, local05
0e1f8     FD 14 02 F6 | 	mov	arg02, result1
0e1fc     0F 13 02 F6 | 	mov	arg01, local01
0e200     1F 14 E6 F4 | 	bitnot	arg02, #31
0e204     B0 D6 B0 FD | 	call	#__system___float_add
0e208     A7 FA 61 FC | 	wrlong	result1, fp
0e20c     84 00 90 FD | 	jmp	#LR__1090
0e210                 | LR__1088
0e210                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0e210     08 4E 05 F1 | 	add	fp, #8
0e214     A7 1E 02 FB | 	rdlong	local01, fp
0e218     08 4E 85 F1 | 	sub	fp, #8
0e21c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e220     14 4E 05 A1 |  if_e	add	fp, #20
0e224     A7 22 02 AB |  if_e	rdlong	local03, fp
0e228     14 4E 85 A1 |  if_e	sub	fp, #20
0e22c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e230     20 00 90 5D |  if_ne	jmp	#LR__1089
0e234     A7 12 02 FB | 	rdlong	arg01, fp
0e238     0C 4E 05 F1 | 	add	fp, #12
0e23c     A7 14 02 FB | 	rdlong	arg02, fp
0e240     0C 4E 85 F1 | 	sub	fp, #12
0e244     1F 14 E6 F4 | 	bitnot	arg02, #31
0e248     6C D6 B0 FD | 	call	#__system___float_add
0e24c     A7 FA 61 FC | 	wrlong	result1, fp
0e250     40 00 90 FD | 	jmp	#LR__1090
0e254                 | LR__1089
0e254                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0e254     08 4E 05 F1 | 	add	fp, #8
0e258     A7 1E 02 FB | 	rdlong	local01, fp
0e25c     08 4E 85 F1 | 	sub	fp, #8
0e260     1F 1E 0E F2 | 	cmp	local01, #31 wz
0e264     14 4E 05 51 |  if_ne	add	fp, #20
0e268     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e26c     14 4E 85 51 |  if_ne	sub	fp, #20
0e270     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0e274     A7 06 68 AC |  if_e	wrlong	#3, fp
0e278     08 4E 05 A1 |  if_e	add	fp, #8
0e27c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e280     08 4E 85 A1 |  if_e	sub	fp, #8
0e284     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0e288     08 4E 05 51 |  if_ne	add	fp, #8
0e28c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0e290     08 4E 85 51 |  if_ne	sub	fp, #8
0e294                 | LR__1090
0e294     A7 12 02 F6 | 	mov	arg01, fp
0e298     34 B7 BF FD | 	call	#_push
0e29c     A7 F0 03 F6 | 	mov	ptra, fp
0e2a0     B2 00 A0 FD | 	call	#popregs_
0e2a4                 | _do_minus_ret
0e2a4     2D 00 64 FD | 	ret
0e2a8                 | 
0e2a8                 | ' 
0e2a8                 | ' sub do_and 
0e2a8                 | _do_and
0e2a8     03 4A 05 F6 | 	mov	COUNT_, #3
0e2ac     A8 00 A0 FD | 	call	#pushregs_
0e2b0     18 F0 07 F1 | 	add	ptra, #24
0e2b4     80 B6 BF FD | 	call	#_pop
0e2b8     FD 12 02 F6 | 	mov	arg01, result1
0e2bc     FE 1E 02 F6 | 	mov	local01, result2
0e2c0     FF 20 02 F6 | 	mov	local02, result3
0e2c4     0C 4E 05 F1 | 	add	fp, #12
0e2c8     A7 12 62 FC | 	wrlong	arg01, fp
0e2cc     04 4E 05 F1 | 	add	fp, #4
0e2d0     A7 1E 62 FC | 	wrlong	local01, fp
0e2d4     04 4E 05 F1 | 	add	fp, #4
0e2d8     A7 20 62 FC | 	wrlong	local02, fp
0e2dc     14 4E 85 F1 | 	sub	fp, #20
0e2e0     54 B6 BF FD | 	call	#_pop
0e2e4     FF 22 02 F6 | 	mov	local03, result3
0e2e8     A7 FA 61 FC | 	wrlong	result1, fp
0e2ec     04 4E 05 F1 | 	add	fp, #4
0e2f0     A7 FC 61 FC | 	wrlong	result2, fp
0e2f4     04 4E 05 F1 | 	add	fp, #4
0e2f8     A7 22 62 FC | 	wrlong	local03, fp
0e2fc                 | ' 
0e2fc                 | ' t2=pop()
0e2fc                 | ' t1=pop()
0e2fc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0e2fc     08 4E 85 F1 | 	sub	fp, #8
0e300     1C 22 0E F2 | 	cmp	local03, #28 wz
0e304     A7 22 02 AB |  if_e	rdlong	local03, fp
0e308     A7 22 62 AC |  if_e	wrlong	local03, fp
0e30c     08 4E 05 A1 |  if_e	add	fp, #8
0e310     A7 3A 68 AC |  if_e	wrlong	#29, fp
0e314     08 4E 85 A1 |  if_e	sub	fp, #8
0e318                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0e318     14 4E 05 F1 | 	add	fp, #20
0e31c     A7 22 02 FB | 	rdlong	local03, fp
0e320     14 4E 85 F1 | 	sub	fp, #20
0e324     1C 22 0E F2 | 	cmp	local03, #28 wz
0e328     18 00 90 5D |  if_ne	jmp	#LR__1100
0e32c     0C 4E 05 F1 | 	add	fp, #12
0e330     A7 22 02 FB | 	rdlong	local03, fp
0e334     A7 22 62 FC | 	wrlong	local03, fp
0e338     08 4E 05 F1 | 	add	fp, #8
0e33c     A7 3A 68 FC | 	wrlong	#29, fp
0e340     14 4E 85 F1 | 	sub	fp, #20
0e344                 | LR__1100
0e344                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0e344     08 4E 05 F1 | 	add	fp, #8
0e348     A7 22 02 FB | 	rdlong	local03, fp
0e34c     08 4E 85 F1 | 	sub	fp, #8
0e350     1F 22 0E F2 | 	cmp	local03, #31 wz
0e354     14 4E 05 51 |  if_ne	add	fp, #20
0e358     A7 20 02 5B |  if_ne	rdlong	local02, fp
0e35c     14 4E 85 51 |  if_ne	sub	fp, #20
0e360     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0e364     08 4E 05 51 |  if_ne	add	fp, #8
0e368     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e36c     08 4E 85 51 |  if_ne	sub	fp, #8
0e370     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0e374     14 4E 05 51 |  if_ne	add	fp, #20
0e378     14 4E 85 51 |  if_ne	sub	fp, #20
0e37c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0e380     A7 0C 68 AC |  if_e	wrlong	#6, fp
0e384     08 4E 05 A1 |  if_e	add	fp, #8
0e388     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e38c     08 4E 85 A1 |  if_e	sub	fp, #8
0e390     18 00 90 AD |  if_e	jmp	#LR__1101
0e394     A7 22 02 FB | 	rdlong	local03, fp
0e398     0C 4E 05 F1 | 	add	fp, #12
0e39c     A7 1E 02 FB | 	rdlong	local01, fp
0e3a0     0C 4E 85 F1 | 	sub	fp, #12
0e3a4     0F 23 02 F5 | 	and	local03, local01
0e3a8     A7 22 62 FC | 	wrlong	local03, fp
0e3ac                 | LR__1101
0e3ac     A7 12 02 F6 | 	mov	arg01, fp
0e3b0     1C B6 BF FD | 	call	#_push
0e3b4     A7 F0 03 F6 | 	mov	ptra, fp
0e3b8     B2 00 A0 FD | 	call	#popregs_
0e3bc                 | _do_and_ret
0e3bc     2D 00 64 FD | 	ret
0e3c0                 | 
0e3c0                 | ' 
0e3c0                 | ' sub do_or 
0e3c0                 | _do_or
0e3c0     03 4A 05 F6 | 	mov	COUNT_, #3
0e3c4     A8 00 A0 FD | 	call	#pushregs_
0e3c8     18 F0 07 F1 | 	add	ptra, #24
0e3cc     68 B5 BF FD | 	call	#_pop
0e3d0     FD 12 02 F6 | 	mov	arg01, result1
0e3d4     FE 1E 02 F6 | 	mov	local01, result2
0e3d8     FF 20 02 F6 | 	mov	local02, result3
0e3dc     0C 4E 05 F1 | 	add	fp, #12
0e3e0     A7 12 62 FC | 	wrlong	arg01, fp
0e3e4     04 4E 05 F1 | 	add	fp, #4
0e3e8     A7 1E 62 FC | 	wrlong	local01, fp
0e3ec     04 4E 05 F1 | 	add	fp, #4
0e3f0     A7 20 62 FC | 	wrlong	local02, fp
0e3f4     14 4E 85 F1 | 	sub	fp, #20
0e3f8     3C B5 BF FD | 	call	#_pop
0e3fc     FF 22 02 F6 | 	mov	local03, result3
0e400     A7 FA 61 FC | 	wrlong	result1, fp
0e404     04 4E 05 F1 | 	add	fp, #4
0e408     A7 FC 61 FC | 	wrlong	result2, fp
0e40c     04 4E 05 F1 | 	add	fp, #4
0e410     A7 22 62 FC | 	wrlong	local03, fp
0e414                 | ' 
0e414                 | ' t2=pop()
0e414                 | ' t1=pop()
0e414                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0e414     08 4E 85 F1 | 	sub	fp, #8
0e418     1C 22 0E F2 | 	cmp	local03, #28 wz
0e41c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e420     A7 22 62 AC |  if_e	wrlong	local03, fp
0e424     08 4E 05 A1 |  if_e	add	fp, #8
0e428     A7 3A 68 AC |  if_e	wrlong	#29, fp
0e42c     08 4E 85 A1 |  if_e	sub	fp, #8
0e430                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0e430     14 4E 05 F1 | 	add	fp, #20
0e434     A7 22 02 FB | 	rdlong	local03, fp
0e438     14 4E 85 F1 | 	sub	fp, #20
0e43c     1C 22 0E F2 | 	cmp	local03, #28 wz
0e440     18 00 90 5D |  if_ne	jmp	#LR__1110
0e444     0C 4E 05 F1 | 	add	fp, #12
0e448     A7 22 02 FB | 	rdlong	local03, fp
0e44c     A7 22 62 FC | 	wrlong	local03, fp
0e450     08 4E 05 F1 | 	add	fp, #8
0e454     A7 3A 68 FC | 	wrlong	#29, fp
0e458     14 4E 85 F1 | 	sub	fp, #20
0e45c                 | LR__1110
0e45c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0e45c     08 4E 05 F1 | 	add	fp, #8
0e460     A7 22 02 FB | 	rdlong	local03, fp
0e464     08 4E 85 F1 | 	sub	fp, #8
0e468     1F 22 0E F2 | 	cmp	local03, #31 wz
0e46c     14 4E 05 51 |  if_ne	add	fp, #20
0e470     A7 20 02 5B |  if_ne	rdlong	local02, fp
0e474     14 4E 85 51 |  if_ne	sub	fp, #20
0e478     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0e47c     08 4E 05 51 |  if_ne	add	fp, #8
0e480     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e484     08 4E 85 51 |  if_ne	sub	fp, #8
0e488     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0e48c     14 4E 05 51 |  if_ne	add	fp, #20
0e490     14 4E 85 51 |  if_ne	sub	fp, #20
0e494     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0e498     A7 0C 68 AC |  if_e	wrlong	#6, fp
0e49c     08 4E 05 A1 |  if_e	add	fp, #8
0e4a0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e4a4     08 4E 85 A1 |  if_e	sub	fp, #8
0e4a8     18 00 90 AD |  if_e	jmp	#LR__1111
0e4ac     A7 22 02 FB | 	rdlong	local03, fp
0e4b0     0C 4E 05 F1 | 	add	fp, #12
0e4b4     A7 1E 02 FB | 	rdlong	local01, fp
0e4b8     0C 4E 85 F1 | 	sub	fp, #12
0e4bc     0F 23 42 F5 | 	or	local03, local01
0e4c0     A7 22 62 FC | 	wrlong	local03, fp
0e4c4                 | LR__1111
0e4c4     A7 12 02 F6 | 	mov	arg01, fp
0e4c8     04 B5 BF FD | 	call	#_push
0e4cc     A7 F0 03 F6 | 	mov	ptra, fp
0e4d0     B2 00 A0 FD | 	call	#popregs_
0e4d4                 | _do_or_ret
0e4d4     2D 00 64 FD | 	ret
0e4d8                 | 
0e4d8                 | ' 
0e4d8                 | ' sub do_mul
0e4d8                 | _do_mul
0e4d8     05 4A 05 F6 | 	mov	COUNT_, #5
0e4dc     A8 00 A0 FD | 	call	#pushregs_
0e4e0     18 F0 07 F1 | 	add	ptra, #24
0e4e4     50 B4 BF FD | 	call	#_pop
0e4e8     FD 1E 02 F6 | 	mov	local01, result1
0e4ec     FE 20 02 F6 | 	mov	local02, result2
0e4f0     FF 22 02 F6 | 	mov	local03, result3
0e4f4     0C 4E 05 F1 | 	add	fp, #12
0e4f8     A7 1E 62 FC | 	wrlong	local01, fp
0e4fc     04 4E 05 F1 | 	add	fp, #4
0e500     A7 20 62 FC | 	wrlong	local02, fp
0e504     04 4E 05 F1 | 	add	fp, #4
0e508     A7 22 62 FC | 	wrlong	local03, fp
0e50c     14 4E 85 F1 | 	sub	fp, #20
0e510     24 B4 BF FD | 	call	#_pop
0e514     FF 22 02 F6 | 	mov	local03, result3
0e518     A7 FA 61 FC | 	wrlong	result1, fp
0e51c     04 4E 05 F1 | 	add	fp, #4
0e520     A7 FC 61 FC | 	wrlong	result2, fp
0e524     04 4E 05 F1 | 	add	fp, #4
0e528     A7 22 62 FC | 	wrlong	local03, fp
0e52c                 | ' 
0e52c                 | ' t2=pop()
0e52c                 | ' t1=pop()
0e52c                 | ' 
0e52c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0e52c     08 4E 85 F1 | 	sub	fp, #8
0e530     1D 22 0E F2 | 	cmp	local03, #29 wz
0e534     14 4E 05 A1 |  if_e	add	fp, #20
0e538     A7 24 02 AB |  if_e	rdlong	local04, fp
0e53c     14 4E 85 A1 |  if_e	sub	fp, #20
0e540     12 23 02 A6 |  if_e	mov	local03, local04
0e544     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e548     20 00 90 5D |  if_ne	jmp	#LR__1120
0e54c     A7 20 02 FB | 	rdlong	local02, fp
0e550     0C 4E 05 F1 | 	add	fp, #12
0e554     A7 22 02 FB | 	rdlong	local03, fp
0e558     11 21 02 FD | 	qmul	local02, local03
0e55c     0C 4E 85 F1 | 	sub	fp, #12
0e560     18 1E 62 FD | 	getqx	local01
0e564     A7 1E 62 FC | 	wrlong	local01, fp
0e568     C4 02 90 FD | 	jmp	#LR__1129
0e56c                 | LR__1120
0e56c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0e56c     08 4E 05 F1 | 	add	fp, #8
0e570     A7 1E 02 FB | 	rdlong	local01, fp
0e574     08 4E 85 F1 | 	sub	fp, #8
0e578     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e57c     14 4E 05 A1 |  if_e	add	fp, #20
0e580     A7 24 02 AB |  if_e	rdlong	local04, fp
0e584     14 4E 85 A1 |  if_e	sub	fp, #20
0e588     12 23 02 A6 |  if_e	mov	local03, local04
0e58c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e590     2C 00 90 5D |  if_ne	jmp	#LR__1121
0e594     A7 20 02 FB | 	rdlong	local02, fp
0e598     0C 4E 05 F1 | 	add	fp, #12
0e59c     A7 22 02 FB | 	rdlong	local03, fp
0e5a0     11 21 02 FD | 	qmul	local02, local03
0e5a4     0C 4E 85 F1 | 	sub	fp, #12
0e5a8     18 1E 62 FD | 	getqx	local01
0e5ac     A7 1E 62 FC | 	wrlong	local01, fp
0e5b0     08 4E 05 F1 | 	add	fp, #8
0e5b4     A7 38 68 FC | 	wrlong	#28, fp
0e5b8     08 4E 85 F1 | 	sub	fp, #8
0e5bc     70 02 90 FD | 	jmp	#LR__1129
0e5c0                 | LR__1121
0e5c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0e5c0     08 4E 05 F1 | 	add	fp, #8
0e5c4     A7 1E 02 FB | 	rdlong	local01, fp
0e5c8     08 4E 85 F1 | 	sub	fp, #8
0e5cc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e5d0     14 4E 05 A1 |  if_e	add	fp, #20
0e5d4     A7 24 02 AB |  if_e	rdlong	local04, fp
0e5d8     14 4E 85 A1 |  if_e	sub	fp, #20
0e5dc     12 23 02 A6 |  if_e	mov	local03, local04
0e5e0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e5e4     30 00 90 5D |  if_ne	jmp	#LR__1122
0e5e8     A7 12 02 FB | 	rdlong	arg01, fp
0e5ec     94 D2 B0 FD | 	call	#__system___float_fromuns
0e5f0     FD 12 02 F6 | 	mov	arg01, result1
0e5f4     0C 4E 05 F1 | 	add	fp, #12
0e5f8     A7 14 02 FB | 	rdlong	arg02, fp
0e5fc     0C 4E 85 F1 | 	sub	fp, #12
0e600     84 D6 B0 FD | 	call	#__system___float_mul
0e604     A7 FA 61 FC | 	wrlong	result1, fp
0e608     08 4E 05 F1 | 	add	fp, #8
0e60c     A7 3C 68 FC | 	wrlong	#30, fp
0e610     08 4E 85 F1 | 	sub	fp, #8
0e614     18 02 90 FD | 	jmp	#LR__1129
0e618                 | LR__1122
0e618                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0e618     08 4E 05 F1 | 	add	fp, #8
0e61c     A7 1E 02 FB | 	rdlong	local01, fp
0e620     08 4E 85 F1 | 	sub	fp, #8
0e624     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e628     14 4E 05 A1 |  if_e	add	fp, #20
0e62c     A7 24 02 AB |  if_e	rdlong	local04, fp
0e630     14 4E 85 A1 |  if_e	sub	fp, #20
0e634     12 23 02 A6 |  if_e	mov	local03, local04
0e638     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e63c     20 00 90 5D |  if_ne	jmp	#LR__1123
0e640     A7 20 02 FB | 	rdlong	local02, fp
0e644     0C 4E 05 F1 | 	add	fp, #12
0e648     A7 22 02 FB | 	rdlong	local03, fp
0e64c     11 21 02 FD | 	qmul	local02, local03
0e650     0C 4E 85 F1 | 	sub	fp, #12
0e654     18 1E 62 FD | 	getqx	local01
0e658     A7 1E 62 FC | 	wrlong	local01, fp
0e65c     D0 01 90 FD | 	jmp	#LR__1129
0e660                 | LR__1123
0e660                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0e660     08 4E 05 F1 | 	add	fp, #8
0e664     A7 1E 02 FB | 	rdlong	local01, fp
0e668     08 4E 85 F1 | 	sub	fp, #8
0e66c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e670     14 4E 05 A1 |  if_e	add	fp, #20
0e674     A7 24 02 AB |  if_e	rdlong	local04, fp
0e678     14 4E 85 A1 |  if_e	sub	fp, #20
0e67c     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0e680     20 00 90 5D |  if_ne	jmp	#LR__1124
0e684     A7 20 02 FB | 	rdlong	local02, fp
0e688     0C 4E 05 F1 | 	add	fp, #12
0e68c     A7 22 02 FB | 	rdlong	local03, fp
0e690     11 21 02 FD | 	qmul	local02, local03
0e694     0C 4E 85 F1 | 	sub	fp, #12
0e698     18 1E 62 FD | 	getqx	local01
0e69c     A7 1E 62 FC | 	wrlong	local01, fp
0e6a0     8C 01 90 FD | 	jmp	#LR__1129
0e6a4                 | LR__1124
0e6a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0e6a4     08 4E 05 F1 | 	add	fp, #8
0e6a8     A7 1E 02 FB | 	rdlong	local01, fp
0e6ac     08 4E 85 F1 | 	sub	fp, #8
0e6b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e6b4     14 4E 05 A1 |  if_e	add	fp, #20
0e6b8     A7 22 02 AB |  if_e	rdlong	local03, fp
0e6bc     14 4E 85 A1 |  if_e	sub	fp, #20
0e6c0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e6c4     40 00 90 5D |  if_ne	jmp	#LR__1125
0e6c8     A7 12 02 FB | 	rdlong	arg01, fp
0e6cc     09 13 52 F6 | 	abs	arg01, arg01 wc
0e6d0     1F 26 C6 C9 |  if_b	decod	local05, #31
0e6d4     00 26 06 36 |  if_ae	mov	local05, #0
0e6d8     A8 D1 B0 FD | 	call	#__system___float_fromuns
0e6dc     13 FB 61 F5 | 	xor	result1, local05
0e6e0     FD 12 02 F6 | 	mov	arg01, result1
0e6e4     0C 4E 05 F1 | 	add	fp, #12
0e6e8     A7 14 02 FB | 	rdlong	arg02, fp
0e6ec     0C 4E 85 F1 | 	sub	fp, #12
0e6f0     94 D5 B0 FD | 	call	#__system___float_mul
0e6f4     A7 FA 61 FC | 	wrlong	result1, fp
0e6f8     08 4E 05 F1 | 	add	fp, #8
0e6fc     A7 3C 68 FC | 	wrlong	#30, fp
0e700     08 4E 85 F1 | 	sub	fp, #8
0e704     28 01 90 FD | 	jmp	#LR__1129
0e708                 | LR__1125
0e708                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0e708     08 4E 05 F1 | 	add	fp, #8
0e70c     A7 1E 02 FB | 	rdlong	local01, fp
0e710     08 4E 85 F1 | 	sub	fp, #8
0e714     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e718     14 4E 05 A1 |  if_e	add	fp, #20
0e71c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e720     14 4E 85 A1 |  if_e	sub	fp, #20
0e724     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e728     28 00 90 5D |  if_ne	jmp	#LR__1126
0e72c     A7 1E 02 FB | 	rdlong	local01, fp
0e730     0C 4E 05 F1 | 	add	fp, #12
0e734     A7 12 02 FB | 	rdlong	arg01, fp
0e738     0C 4E 85 F1 | 	sub	fp, #12
0e73c     44 D1 B0 FD | 	call	#__system___float_fromuns
0e740     FD 14 02 F6 | 	mov	arg02, result1
0e744     0F 13 02 F6 | 	mov	arg01, local01
0e748     3C D5 B0 FD | 	call	#__system___float_mul
0e74c     A7 FA 61 FC | 	wrlong	result1, fp
0e750     DC 00 90 FD | 	jmp	#LR__1129
0e754                 | LR__1126
0e754                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0e754     08 4E 05 F1 | 	add	fp, #8
0e758     A7 1E 02 FB | 	rdlong	local01, fp
0e75c     08 4E 85 F1 | 	sub	fp, #8
0e760     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e764     14 4E 05 A1 |  if_e	add	fp, #20
0e768     A7 22 02 AB |  if_e	rdlong	local03, fp
0e76c     14 4E 85 A1 |  if_e	sub	fp, #20
0e770     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e774     38 00 90 5D |  if_ne	jmp	#LR__1127
0e778     A7 1E 02 FB | 	rdlong	local01, fp
0e77c     0C 4E 05 F1 | 	add	fp, #12
0e780     A7 12 02 FB | 	rdlong	arg01, fp
0e784     0C 4E 85 F1 | 	sub	fp, #12
0e788     09 13 52 F6 | 	abs	arg01, arg01 wc
0e78c     1F 26 C6 C9 |  if_b	decod	local05, #31
0e790     00 26 06 36 |  if_ae	mov	local05, #0
0e794     EC D0 B0 FD | 	call	#__system___float_fromuns
0e798     13 FB 61 F5 | 	xor	result1, local05
0e79c     FD 14 02 F6 | 	mov	arg02, result1
0e7a0     0F 13 02 F6 | 	mov	arg01, local01
0e7a4     E0 D4 B0 FD | 	call	#__system___float_mul
0e7a8     A7 FA 61 FC | 	wrlong	result1, fp
0e7ac     80 00 90 FD | 	jmp	#LR__1129
0e7b0                 | LR__1127
0e7b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0e7b0     08 4E 05 F1 | 	add	fp, #8
0e7b4     A7 1E 02 FB | 	rdlong	local01, fp
0e7b8     08 4E 85 F1 | 	sub	fp, #8
0e7bc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e7c0     14 4E 05 A1 |  if_e	add	fp, #20
0e7c4     A7 22 02 AB |  if_e	rdlong	local03, fp
0e7c8     14 4E 85 A1 |  if_e	sub	fp, #20
0e7cc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e7d0     1C 00 90 5D |  if_ne	jmp	#LR__1128
0e7d4     A7 12 02 FB | 	rdlong	arg01, fp
0e7d8     0C 4E 05 F1 | 	add	fp, #12
0e7dc     A7 14 02 FB | 	rdlong	arg02, fp
0e7e0     0C 4E 85 F1 | 	sub	fp, #12
0e7e4     A0 D4 B0 FD | 	call	#__system___float_mul
0e7e8     A7 FA 61 FC | 	wrlong	result1, fp
0e7ec     40 00 90 FD | 	jmp	#LR__1129
0e7f0                 | LR__1128
0e7f0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0e7f0     08 4E 05 F1 | 	add	fp, #8
0e7f4     A7 1E 02 FB | 	rdlong	local01, fp
0e7f8     08 4E 85 F1 | 	sub	fp, #8
0e7fc     1F 1E 0E F2 | 	cmp	local01, #31 wz
0e800     14 4E 05 51 |  if_ne	add	fp, #20
0e804     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e808     14 4E 85 51 |  if_ne	sub	fp, #20
0e80c     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0e810     A7 10 68 AC |  if_e	wrlong	#8, fp
0e814     08 4E 05 A1 |  if_e	add	fp, #8
0e818     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e81c     08 4E 85 A1 |  if_e	sub	fp, #8
0e820     A7 12 68 5C |  if_ne	wrlong	#9, fp
0e824     08 4E 05 51 |  if_ne	add	fp, #8
0e828     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0e82c     08 4E 85 51 |  if_ne	sub	fp, #8
0e830                 | LR__1129
0e830     A7 12 02 F6 | 	mov	arg01, fp
0e834     98 B1 BF FD | 	call	#_push
0e838     A7 F0 03 F6 | 	mov	ptra, fp
0e83c     B2 00 A0 FD | 	call	#popregs_
0e840                 | _do_mul_ret
0e840     2D 00 64 FD | 	ret
0e844                 | 
0e844                 | ' 
0e844                 | ' sub do_div 
0e844                 | _do_div
0e844     01 4A 05 F6 | 	mov	COUNT_, #1
0e848     A8 00 A0 FD | 	call	#pushregs_
0e84c     18 F0 07 F1 | 	add	ptra, #24
0e850     E4 B0 BF FD | 	call	#_pop
0e854     FD 64 02 F6 | 	mov	muldivb_, result1
0e858     FE 62 02 F6 | 	mov	muldiva_, result2
0e85c     FF 1E 02 F6 | 	mov	local01, result3
0e860     0C 4E 05 F1 | 	add	fp, #12
0e864     A7 64 62 FC | 	wrlong	muldivb_, fp
0e868     04 4E 05 F1 | 	add	fp, #4
0e86c     A7 62 62 FC | 	wrlong	muldiva_, fp
0e870     04 4E 05 F1 | 	add	fp, #4
0e874     A7 1E 62 FC | 	wrlong	local01, fp
0e878     14 4E 85 F1 | 	sub	fp, #20
0e87c     B8 B0 BF FD | 	call	#_pop
0e880     A7 FA 61 FC | 	wrlong	result1, fp
0e884     04 4E 05 F1 | 	add	fp, #4
0e888     A7 FC 61 FC | 	wrlong	result2, fp
0e88c     04 4E 05 F1 | 	add	fp, #4
0e890     A7 FE 61 FC | 	wrlong	result3, fp
0e894                 | ' 
0e894                 | ' t2=pop()
0e894                 | ' t1=pop()
0e894                 | ' 
0e894                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0e894     08 4E 85 F1 | 	sub	fp, #8
0e898     1F FE 0D F2 | 	cmp	result3, #31 wz
0e89c     14 4E 05 51 |  if_ne	add	fp, #20
0e8a0     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0e8a4     14 4E 85 51 |  if_ne	sub	fp, #20
0e8a8     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0e8ac     A7 14 68 AC |  if_e	wrlong	#10, fp
0e8b0     08 4E 05 A1 |  if_e	add	fp, #8
0e8b4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e8b8     08 4E 85 A1 |  if_e	sub	fp, #8
0e8bc     90 01 90 AD |  if_e	jmp	#LR__1136
0e8c0                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0e8c0     08 4E 05 F1 | 	add	fp, #8
0e8c4     A7 64 02 FB | 	rdlong	muldivb_, fp
0e8c8     08 4E 85 F1 | 	sub	fp, #8
0e8cc     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0e8d0     1C 00 90 5D |  if_ne	jmp	#LR__1130
0e8d4     08 4E 05 F1 | 	add	fp, #8
0e8d8     A7 38 68 FC | 	wrlong	#28, fp
0e8dc     08 4E 85 F1 | 	sub	fp, #8
0e8e0     A7 12 02 FB | 	rdlong	arg01, fp
0e8e4     00 14 06 F6 | 	mov	arg02, #0
0e8e8     64 D8 B0 FD | 	call	#__system___float_tointeger
0e8ec     A7 FA 61 FC | 	wrlong	result1, fp
0e8f0                 | LR__1130
0e8f0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0e8f0     14 4E 05 F1 | 	add	fp, #20
0e8f4     A7 64 02 FB | 	rdlong	muldivb_, fp
0e8f8     14 4E 85 F1 | 	sub	fp, #20
0e8fc     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0e900     28 00 90 5D |  if_ne	jmp	#LR__1131
0e904     14 4E 05 F1 | 	add	fp, #20
0e908     A7 38 68 FC | 	wrlong	#28, fp
0e90c     08 4E 85 F1 | 	sub	fp, #8
0e910     A7 12 02 FB | 	rdlong	arg01, fp
0e914     0C 4E 85 F1 | 	sub	fp, #12
0e918     00 14 06 F6 | 	mov	arg02, #0
0e91c     30 D8 B0 FD | 	call	#__system___float_tointeger
0e920     0C 4E 05 F1 | 	add	fp, #12
0e924     A7 FA 61 FC | 	wrlong	result1, fp
0e928     0C 4E 85 F1 | 	sub	fp, #12
0e92c                 | LR__1131
0e92c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0e92c     08 4E 05 F1 | 	add	fp, #8
0e930     A7 64 02 FB | 	rdlong	muldivb_, fp
0e934     08 4E 85 F1 | 	sub	fp, #8
0e938     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0e93c     14 4E 05 A1 |  if_e	add	fp, #20
0e940     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e944     14 4E 85 A1 |  if_e	sub	fp, #20
0e948     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e94c     20 00 90 5D |  if_ne	jmp	#LR__1132
0e950     0C 4E 05 F1 | 	add	fp, #12
0e954     A7 1E 02 FB | 	rdlong	local01, fp
0e958     0C 4E 85 F1 | 	sub	fp, #12
0e95c     A7 64 02 FB | 	rdlong	muldivb_, fp
0e960     0F 65 12 FD | 	qdiv	muldivb_, local01
0e964     18 1E 62 FD | 	getqx	local01
0e968     A7 1E 62 FC | 	wrlong	local01, fp
0e96c     E0 00 90 FD | 	jmp	#LR__1136
0e970                 | LR__1132
0e970                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0e970     08 4E 05 F1 | 	add	fp, #8
0e974     A7 64 02 FB | 	rdlong	muldivb_, fp
0e978     08 4E 85 F1 | 	sub	fp, #8
0e97c     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0e980     14 4E 05 A1 |  if_e	add	fp, #20
0e984     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e988     14 4E 85 A1 |  if_e	sub	fp, #20
0e98c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e990     2C 00 90 5D |  if_ne	jmp	#LR__1133
0e994     0C 4E 05 F1 | 	add	fp, #12
0e998     A7 1E 02 FB | 	rdlong	local01, fp
0e99c     0C 4E 85 F1 | 	sub	fp, #12
0e9a0     A7 64 02 FB | 	rdlong	muldivb_, fp
0e9a4     0F 65 12 FD | 	qdiv	muldivb_, local01
0e9a8     18 1E 62 FD | 	getqx	local01
0e9ac     A7 1E 62 FC | 	wrlong	local01, fp
0e9b0     08 4E 05 F1 | 	add	fp, #8
0e9b4     A7 38 68 FC | 	wrlong	#28, fp
0e9b8     08 4E 85 F1 | 	sub	fp, #8
0e9bc     90 00 90 FD | 	jmp	#LR__1136
0e9c0                 | LR__1133
0e9c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0e9c0     08 4E 05 F1 | 	add	fp, #8
0e9c4     A7 64 02 FB | 	rdlong	muldivb_, fp
0e9c8     08 4E 85 F1 | 	sub	fp, #8
0e9cc     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0e9d0     14 4E 05 A1 |  if_e	add	fp, #20
0e9d4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e9d8     14 4E 85 A1 |  if_e	sub	fp, #20
0e9dc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e9e0     1C 00 90 5D |  if_ne	jmp	#LR__1134
0e9e4     A7 62 02 FB | 	rdlong	muldiva_, fp
0e9e8     0C 4E 05 F1 | 	add	fp, #12
0e9ec     A7 64 02 FB | 	rdlong	muldivb_, fp
0e9f0     0C 4E 85 F1 | 	sub	fp, #12
0e9f4     BA 00 A0 FD | 	call	#divide_
0e9f8     A7 64 62 FC | 	wrlong	muldivb_, fp
0e9fc     50 00 90 FD | 	jmp	#LR__1136
0ea00                 | LR__1134
0ea00                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0ea00     08 4E 05 F1 | 	add	fp, #8
0ea04     A7 64 02 FB | 	rdlong	muldivb_, fp
0ea08     08 4E 85 F1 | 	sub	fp, #8
0ea0c     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0ea10     14 4E 05 A1 |  if_e	add	fp, #20
0ea14     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ea18     14 4E 85 A1 |  if_e	sub	fp, #20
0ea1c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0ea20     1C 00 90 5D |  if_ne	jmp	#LR__1135
0ea24     A7 62 02 FB | 	rdlong	muldiva_, fp
0ea28     0C 4E 05 F1 | 	add	fp, #12
0ea2c     A7 64 02 FB | 	rdlong	muldivb_, fp
0ea30     0C 4E 85 F1 | 	sub	fp, #12
0ea34     BA 00 A0 FD | 	call	#divide_
0ea38     A7 64 62 FC | 	wrlong	muldivb_, fp
0ea3c     10 00 90 FD | 	jmp	#LR__1136
0ea40                 | LR__1135
0ea40     A7 16 68 FC | 	wrlong	#11, fp
0ea44     08 4E 05 F1 | 	add	fp, #8
0ea48     A7 FE 69 FC | 	wrlong	#255, fp
0ea4c     08 4E 85 F1 | 	sub	fp, #8
0ea50                 | LR__1136
0ea50     A7 12 02 F6 | 	mov	arg01, fp
0ea54     78 AF BF FD | 	call	#_push
0ea58     A7 F0 03 F6 | 	mov	ptra, fp
0ea5c     B2 00 A0 FD | 	call	#popregs_
0ea60                 | _do_div_ret
0ea60     2D 00 64 FD | 	ret
0ea64                 | 
0ea64                 | ' 
0ea64                 | ' sub do_fdiv 
0ea64                 | _do_fdiv
0ea64     02 4A 05 F6 | 	mov	COUNT_, #2
0ea68     A8 00 A0 FD | 	call	#pushregs_
0ea6c     18 F0 07 F1 | 	add	ptra, #24
0ea70     C4 AE BF FD | 	call	#_pop
0ea74     FD 14 02 F6 | 	mov	arg02, result1
0ea78     FE 12 02 F6 | 	mov	arg01, result2
0ea7c     FF 1E 02 F6 | 	mov	local01, result3
0ea80     0C 4E 05 F1 | 	add	fp, #12
0ea84     A7 14 62 FC | 	wrlong	arg02, fp
0ea88     04 4E 05 F1 | 	add	fp, #4
0ea8c     A7 12 62 FC | 	wrlong	arg01, fp
0ea90     04 4E 05 F1 | 	add	fp, #4
0ea94     A7 1E 62 FC | 	wrlong	local01, fp
0ea98     14 4E 85 F1 | 	sub	fp, #20
0ea9c     98 AE BF FD | 	call	#_pop
0eaa0     A7 FA 61 FC | 	wrlong	result1, fp
0eaa4     04 4E 05 F1 | 	add	fp, #4
0eaa8     A7 FC 61 FC | 	wrlong	result2, fp
0eaac     04 4E 05 F1 | 	add	fp, #4
0eab0     A7 FE 61 FC | 	wrlong	result3, fp
0eab4                 | ' 
0eab4                 | ' t2=pop()
0eab4                 | ' t1=pop()
0eab4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0eab4     08 4E 85 F1 | 	sub	fp, #8
0eab8     1F FE 0D F2 | 	cmp	result3, #31 wz
0eabc     14 4E 05 51 |  if_ne	add	fp, #20
0eac0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0eac4     14 4E 85 51 |  if_ne	sub	fp, #20
0eac8     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0eacc     A7 14 68 AC |  if_e	wrlong	#10, fp
0ead0     08 4E 05 A1 |  if_e	add	fp, #8
0ead4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ead8     08 4E 85 A1 |  if_e	sub	fp, #8
0eadc     38 01 90 AD |  if_e	jmp	#LR__1145
0eae0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0eae0     08 4E 05 F1 | 	add	fp, #8
0eae4     A7 14 02 FB | 	rdlong	arg02, fp
0eae8     08 4E 85 F1 | 	sub	fp, #8
0eaec     1C 14 0E F2 | 	cmp	arg02, #28 wz
0eaf0     28 00 90 5D |  if_ne	jmp	#LR__1140
0eaf4     08 4E 05 F1 | 	add	fp, #8
0eaf8     A7 3C 68 FC | 	wrlong	#30, fp
0eafc     08 4E 85 F1 | 	sub	fp, #8
0eb00     A7 12 02 FB | 	rdlong	arg01, fp
0eb04     09 13 52 F6 | 	abs	arg01, arg01 wc
0eb08     1F 20 C6 C9 |  if_b	decod	local02, #31
0eb0c     00 20 06 36 |  if_ae	mov	local02, #0
0eb10     70 CD B0 FD | 	call	#__system___float_fromuns
0eb14     10 FB 61 F5 | 	xor	result1, local02
0eb18     A7 FA 61 FC | 	wrlong	result1, fp
0eb1c                 | LR__1140
0eb1c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0eb1c     08 4E 05 F1 | 	add	fp, #8
0eb20     A7 14 02 FB | 	rdlong	arg02, fp
0eb24     08 4E 85 F1 | 	sub	fp, #8
0eb28     1D 14 0E F2 | 	cmp	arg02, #29 wz
0eb2c     18 00 90 5D |  if_ne	jmp	#LR__1141
0eb30     08 4E 05 F1 | 	add	fp, #8
0eb34     A7 3C 68 FC | 	wrlong	#30, fp
0eb38     08 4E 85 F1 | 	sub	fp, #8
0eb3c     A7 12 02 FB | 	rdlong	arg01, fp
0eb40     40 CD B0 FD | 	call	#__system___float_fromuns
0eb44     A7 FA 61 FC | 	wrlong	result1, fp
0eb48                 | LR__1141
0eb48                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0eb48     14 4E 05 F1 | 	add	fp, #20
0eb4c     A7 14 02 FB | 	rdlong	arg02, fp
0eb50     14 4E 85 F1 | 	sub	fp, #20
0eb54     1C 14 0E F2 | 	cmp	arg02, #28 wz
0eb58     34 00 90 5D |  if_ne	jmp	#LR__1142
0eb5c     14 4E 05 F1 | 	add	fp, #20
0eb60     A7 3C 68 FC | 	wrlong	#30, fp
0eb64     08 4E 85 F1 | 	sub	fp, #8
0eb68     A7 12 02 FB | 	rdlong	arg01, fp
0eb6c     0C 4E 85 F1 | 	sub	fp, #12
0eb70     09 13 52 F6 | 	abs	arg01, arg01 wc
0eb74     1F 20 C6 C9 |  if_b	decod	local02, #31
0eb78     00 20 06 36 |  if_ae	mov	local02, #0
0eb7c     04 CD B0 FD | 	call	#__system___float_fromuns
0eb80     10 FB 61 F5 | 	xor	result1, local02
0eb84     0C 4E 05 F1 | 	add	fp, #12
0eb88     A7 FA 61 FC | 	wrlong	result1, fp
0eb8c     0C 4E 85 F1 | 	sub	fp, #12
0eb90                 | LR__1142
0eb90                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0eb90     14 4E 05 F1 | 	add	fp, #20
0eb94     A7 14 02 FB | 	rdlong	arg02, fp
0eb98     14 4E 85 F1 | 	sub	fp, #20
0eb9c     1D 14 0E F2 | 	cmp	arg02, #29 wz
0eba0     24 00 90 5D |  if_ne	jmp	#LR__1143
0eba4     14 4E 05 F1 | 	add	fp, #20
0eba8     A7 3C 68 FC | 	wrlong	#30, fp
0ebac     08 4E 85 F1 | 	sub	fp, #8
0ebb0     A7 12 02 FB | 	rdlong	arg01, fp
0ebb4     0C 4E 85 F1 | 	sub	fp, #12
0ebb8     C8 CC B0 FD | 	call	#__system___float_fromuns
0ebbc     0C 4E 05 F1 | 	add	fp, #12
0ebc0     A7 FA 61 FC | 	wrlong	result1, fp
0ebc4     0C 4E 85 F1 | 	sub	fp, #12
0ebc8                 | LR__1143
0ebc8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0ebc8     08 4E 05 F1 | 	add	fp, #8
0ebcc     A7 14 02 FB | 	rdlong	arg02, fp
0ebd0     08 4E 85 F1 | 	sub	fp, #8
0ebd4     1E 14 0E F2 | 	cmp	arg02, #30 wz
0ebd8     14 4E 05 A1 |  if_e	add	fp, #20
0ebdc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ebe0     14 4E 85 A1 |  if_e	sub	fp, #20
0ebe4     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0ebe8     1C 00 90 5D |  if_ne	jmp	#LR__1144
0ebec     A7 12 02 FB | 	rdlong	arg01, fp
0ebf0     0C 4E 05 F1 | 	add	fp, #12
0ebf4     A7 14 02 FB | 	rdlong	arg02, fp
0ebf8     0C 4E 85 F1 | 	sub	fp, #12
0ebfc     8C D2 B0 FD | 	call	#__system___float_div
0ec00     A7 FA 61 FC | 	wrlong	result1, fp
0ec04     10 00 90 FD | 	jmp	#LR__1145
0ec08                 | LR__1144
0ec08     A7 16 68 FC | 	wrlong	#11, fp
0ec0c     08 4E 05 F1 | 	add	fp, #8
0ec10     A7 FE 69 FC | 	wrlong	#255, fp
0ec14     08 4E 85 F1 | 	sub	fp, #8
0ec18                 | LR__1145
0ec18     A7 12 02 F6 | 	mov	arg01, fp
0ec1c     B0 AD BF FD | 	call	#_push
0ec20     A7 F0 03 F6 | 	mov	ptra, fp
0ec24     B2 00 A0 FD | 	call	#popregs_
0ec28                 | _do_fdiv_ret
0ec28     2D 00 64 FD | 	ret
0ec2c                 | 
0ec2c                 | ' 
0ec2c                 | ' 
0ec2c                 | ' sub do_mod 
0ec2c                 | _do_mod
0ec2c     01 4A 05 F6 | 	mov	COUNT_, #1
0ec30     A8 00 A0 FD | 	call	#pushregs_
0ec34     18 F0 07 F1 | 	add	ptra, #24
0ec38     FC AC BF FD | 	call	#_pop
0ec3c     FD 64 02 F6 | 	mov	muldivb_, result1
0ec40     FE 62 02 F6 | 	mov	muldiva_, result2
0ec44     FF 1E 02 F6 | 	mov	local01, result3
0ec48     0C 4E 05 F1 | 	add	fp, #12
0ec4c     A7 64 62 FC | 	wrlong	muldivb_, fp
0ec50     04 4E 05 F1 | 	add	fp, #4
0ec54     A7 62 62 FC | 	wrlong	muldiva_, fp
0ec58     04 4E 05 F1 | 	add	fp, #4
0ec5c     A7 1E 62 FC | 	wrlong	local01, fp
0ec60     14 4E 85 F1 | 	sub	fp, #20
0ec64     D0 AC BF FD | 	call	#_pop
0ec68     A7 FA 61 FC | 	wrlong	result1, fp
0ec6c     04 4E 05 F1 | 	add	fp, #4
0ec70     A7 FC 61 FC | 	wrlong	result2, fp
0ec74     04 4E 05 F1 | 	add	fp, #4
0ec78     A7 FE 61 FC | 	wrlong	result3, fp
0ec7c                 | ' 
0ec7c                 | ' t2=pop()
0ec7c                 | ' t1=pop()
0ec7c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0ec7c     08 4E 85 F1 | 	sub	fp, #8
0ec80     1F FE 0D F2 | 	cmp	result3, #31 wz
0ec84     14 4E 05 51 |  if_ne	add	fp, #20
0ec88     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0ec8c     14 4E 85 51 |  if_ne	sub	fp, #20
0ec90     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0ec94     A7 14 68 AC |  if_e	wrlong	#10, fp
0ec98     08 4E 05 A1 |  if_e	add	fp, #8
0ec9c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0eca0     08 4E 85 A1 |  if_e	sub	fp, #8
0eca4     90 01 90 AD |  if_e	jmp	#LR__1156
0eca8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0eca8     08 4E 05 F1 | 	add	fp, #8
0ecac     A7 64 02 FB | 	rdlong	muldivb_, fp
0ecb0     08 4E 85 F1 | 	sub	fp, #8
0ecb4     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0ecb8     1C 00 90 5D |  if_ne	jmp	#LR__1150
0ecbc     08 4E 05 F1 | 	add	fp, #8
0ecc0     A7 38 68 FC | 	wrlong	#28, fp
0ecc4     08 4E 85 F1 | 	sub	fp, #8
0ecc8     A7 12 02 FB | 	rdlong	arg01, fp
0eccc     00 14 06 F6 | 	mov	arg02, #0
0ecd0     7C D4 B0 FD | 	call	#__system___float_tointeger
0ecd4     A7 FA 61 FC | 	wrlong	result1, fp
0ecd8                 | LR__1150
0ecd8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0ecd8     14 4E 05 F1 | 	add	fp, #20
0ecdc     A7 64 02 FB | 	rdlong	muldivb_, fp
0ece0     14 4E 85 F1 | 	sub	fp, #20
0ece4     1E 64 0E F2 | 	cmp	muldivb_, #30 wz
0ece8     28 00 90 5D |  if_ne	jmp	#LR__1151
0ecec     14 4E 05 F1 | 	add	fp, #20
0ecf0     A7 38 68 FC | 	wrlong	#28, fp
0ecf4     08 4E 85 F1 | 	sub	fp, #8
0ecf8     A7 12 02 FB | 	rdlong	arg01, fp
0ecfc     0C 4E 85 F1 | 	sub	fp, #12
0ed00     00 14 06 F6 | 	mov	arg02, #0
0ed04     48 D4 B0 FD | 	call	#__system___float_tointeger
0ed08     0C 4E 05 F1 | 	add	fp, #12
0ed0c     A7 FA 61 FC | 	wrlong	result1, fp
0ed10     0C 4E 85 F1 | 	sub	fp, #12
0ed14                 | LR__1151
0ed14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0ed14     08 4E 05 F1 | 	add	fp, #8
0ed18     A7 64 02 FB | 	rdlong	muldivb_, fp
0ed1c     08 4E 85 F1 | 	sub	fp, #8
0ed20     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0ed24     14 4E 05 A1 |  if_e	add	fp, #20
0ed28     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ed2c     14 4E 85 A1 |  if_e	sub	fp, #20
0ed30     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0ed34     20 00 90 5D |  if_ne	jmp	#LR__1152
0ed38     0C 4E 05 F1 | 	add	fp, #12
0ed3c     A7 1E 02 FB | 	rdlong	local01, fp
0ed40     0C 4E 85 F1 | 	sub	fp, #12
0ed44     A7 64 02 FB | 	rdlong	muldivb_, fp
0ed48     0F 65 12 FD | 	qdiv	muldivb_, local01
0ed4c     19 1E 62 FD | 	getqy	local01
0ed50     A7 1E 62 FC | 	wrlong	local01, fp
0ed54     E0 00 90 FD | 	jmp	#LR__1156
0ed58                 | LR__1152
0ed58                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0ed58     08 4E 05 F1 | 	add	fp, #8
0ed5c     A7 64 02 FB | 	rdlong	muldivb_, fp
0ed60     08 4E 85 F1 | 	sub	fp, #8
0ed64     1D 64 0E F2 | 	cmp	muldivb_, #29 wz
0ed68     14 4E 05 A1 |  if_e	add	fp, #20
0ed6c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ed70     14 4E 85 A1 |  if_e	sub	fp, #20
0ed74     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0ed78     2C 00 90 5D |  if_ne	jmp	#LR__1153
0ed7c     0C 4E 05 F1 | 	add	fp, #12
0ed80     A7 1E 02 FB | 	rdlong	local01, fp
0ed84     0C 4E 85 F1 | 	sub	fp, #12
0ed88     A7 64 02 FB | 	rdlong	muldivb_, fp
0ed8c     0F 65 12 FD | 	qdiv	muldivb_, local01
0ed90     19 1E 62 FD | 	getqy	local01
0ed94     A7 1E 62 FC | 	wrlong	local01, fp
0ed98     08 4E 05 F1 | 	add	fp, #8
0ed9c     A7 38 68 FC | 	wrlong	#28, fp
0eda0     08 4E 85 F1 | 	sub	fp, #8
0eda4     90 00 90 FD | 	jmp	#LR__1156
0eda8                 | LR__1153
0eda8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0eda8     08 4E 05 F1 | 	add	fp, #8
0edac     A7 64 02 FB | 	rdlong	muldivb_, fp
0edb0     08 4E 85 F1 | 	sub	fp, #8
0edb4     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0edb8     14 4E 05 A1 |  if_e	add	fp, #20
0edbc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0edc0     14 4E 85 A1 |  if_e	sub	fp, #20
0edc4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0edc8     1C 00 90 5D |  if_ne	jmp	#LR__1154
0edcc     A7 62 02 FB | 	rdlong	muldiva_, fp
0edd0     0C 4E 05 F1 | 	add	fp, #12
0edd4     A7 64 02 FB | 	rdlong	muldivb_, fp
0edd8     0C 4E 85 F1 | 	sub	fp, #12
0eddc     BA 00 A0 FD | 	call	#divide_
0ede0     A7 62 62 FC | 	wrlong	muldiva_, fp
0ede4     50 00 90 FD | 	jmp	#LR__1156
0ede8                 | LR__1154
0ede8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0ede8     08 4E 05 F1 | 	add	fp, #8
0edec     A7 64 02 FB | 	rdlong	muldivb_, fp
0edf0     08 4E 85 F1 | 	sub	fp, #8
0edf4     1C 64 0E F2 | 	cmp	muldivb_, #28 wz
0edf8     14 4E 05 A1 |  if_e	add	fp, #20
0edfc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ee00     14 4E 85 A1 |  if_e	sub	fp, #20
0ee04     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0ee08     1C 00 90 5D |  if_ne	jmp	#LR__1155
0ee0c     A7 62 02 FB | 	rdlong	muldiva_, fp
0ee10     0C 4E 05 F1 | 	add	fp, #12
0ee14     A7 64 02 FB | 	rdlong	muldivb_, fp
0ee18     0C 4E 85 F1 | 	sub	fp, #12
0ee1c     BA 00 A0 FD | 	call	#divide_
0ee20     A7 62 62 FC | 	wrlong	muldiva_, fp
0ee24     10 00 90 FD | 	jmp	#LR__1156
0ee28                 | LR__1155
0ee28     A7 16 68 FC | 	wrlong	#11, fp
0ee2c     08 4E 05 F1 | 	add	fp, #8
0ee30     A7 FE 69 FC | 	wrlong	#255, fp
0ee34     08 4E 85 F1 | 	sub	fp, #8
0ee38                 | LR__1156
0ee38     A7 12 02 F6 | 	mov	arg01, fp
0ee3c     90 AB BF FD | 	call	#_push
0ee40     A7 F0 03 F6 | 	mov	ptra, fp
0ee44     B2 00 A0 FD | 	call	#popregs_
0ee48                 | _do_mod_ret
0ee48     2D 00 64 FD | 	ret
0ee4c                 | 
0ee4c                 | ' 
0ee4c                 | ' sub do_shl 
0ee4c                 | _do_shl
0ee4c     03 4A 05 F6 | 	mov	COUNT_, #3
0ee50     A8 00 A0 FD | 	call	#pushregs_
0ee54     18 F0 07 F1 | 	add	ptra, #24
0ee58     DC AA BF FD | 	call	#_pop
0ee5c     FD 12 02 F6 | 	mov	arg01, result1
0ee60     FE 1E 02 F6 | 	mov	local01, result2
0ee64     FF 20 02 F6 | 	mov	local02, result3
0ee68     0C 4E 05 F1 | 	add	fp, #12
0ee6c     A7 12 62 FC | 	wrlong	arg01, fp
0ee70     04 4E 05 F1 | 	add	fp, #4
0ee74     A7 1E 62 FC | 	wrlong	local01, fp
0ee78     04 4E 05 F1 | 	add	fp, #4
0ee7c     A7 20 62 FC | 	wrlong	local02, fp
0ee80     14 4E 85 F1 | 	sub	fp, #20
0ee84     B0 AA BF FD | 	call	#_pop
0ee88     FF 22 02 F6 | 	mov	local03, result3
0ee8c     A7 FA 61 FC | 	wrlong	result1, fp
0ee90     04 4E 05 F1 | 	add	fp, #4
0ee94     A7 FC 61 FC | 	wrlong	result2, fp
0ee98     04 4E 05 F1 | 	add	fp, #4
0ee9c     A7 22 62 FC | 	wrlong	local03, fp
0eea0                 | ' 
0eea0                 | ' t2=pop()
0eea0                 | ' t1=pop()
0eea0                 | ' 
0eea0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0eea0     08 4E 85 F1 | 	sub	fp, #8
0eea4     1C 22 0E F2 | 	cmp	local03, #28 wz
0eea8     A7 22 02 AB |  if_e	rdlong	local03, fp
0eeac     A7 22 62 AC |  if_e	wrlong	local03, fp
0eeb0     08 4E 05 A1 |  if_e	add	fp, #8
0eeb4     A7 3A 68 AC |  if_e	wrlong	#29, fp
0eeb8     08 4E 85 A1 |  if_e	sub	fp, #8
0eebc                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0eebc     14 4E 05 F1 | 	add	fp, #20
0eec0     A7 22 02 FB | 	rdlong	local03, fp
0eec4     14 4E 85 F1 | 	sub	fp, #20
0eec8     1C 22 0E F2 | 	cmp	local03, #28 wz
0eecc     18 00 90 5D |  if_ne	jmp	#LR__1160
0eed0     0C 4E 05 F1 | 	add	fp, #12
0eed4     A7 22 02 FB | 	rdlong	local03, fp
0eed8     A7 22 62 FC | 	wrlong	local03, fp
0eedc     08 4E 05 F1 | 	add	fp, #8
0eee0     A7 3A 68 FC | 	wrlong	#29, fp
0eee4     14 4E 85 F1 | 	sub	fp, #20
0eee8                 | LR__1160
0eee8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0eee8     08 4E 05 F1 | 	add	fp, #8
0eeec     A7 22 02 FB | 	rdlong	local03, fp
0eef0     08 4E 85 F1 | 	sub	fp, #8
0eef4     1F 22 0E F2 | 	cmp	local03, #31 wz
0eef8     14 4E 05 51 |  if_ne	add	fp, #20
0eefc     A7 20 02 5B |  if_ne	rdlong	local02, fp
0ef00     14 4E 85 51 |  if_ne	sub	fp, #20
0ef04     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0ef08     08 4E 05 51 |  if_ne	add	fp, #8
0ef0c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0ef10     08 4E 85 51 |  if_ne	sub	fp, #8
0ef14     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0ef18     14 4E 05 51 |  if_ne	add	fp, #20
0ef1c     14 4E 85 51 |  if_ne	sub	fp, #20
0ef20     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0ef24     A7 0C 68 AC |  if_e	wrlong	#6, fp
0ef28     08 4E 05 A1 |  if_e	add	fp, #8
0ef2c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ef30     08 4E 85 A1 |  if_e	sub	fp, #8
0ef34     18 00 90 AD |  if_e	jmp	#LR__1161
0ef38     A7 22 02 FB | 	rdlong	local03, fp
0ef3c     0C 4E 05 F1 | 	add	fp, #12
0ef40     A7 1E 02 FB | 	rdlong	local01, fp
0ef44     0C 4E 85 F1 | 	sub	fp, #12
0ef48     0F 23 62 F0 | 	shl	local03, local01
0ef4c     A7 22 62 FC | 	wrlong	local03, fp
0ef50                 | LR__1161
0ef50     A7 12 02 F6 | 	mov	arg01, fp
0ef54     78 AA BF FD | 	call	#_push
0ef58     A7 F0 03 F6 | 	mov	ptra, fp
0ef5c     B2 00 A0 FD | 	call	#popregs_
0ef60                 | _do_shl_ret
0ef60     2D 00 64 FD | 	ret
0ef64                 | 
0ef64                 | ' 
0ef64                 | ' sub do_shr 
0ef64                 | _do_shr
0ef64     03 4A 05 F6 | 	mov	COUNT_, #3
0ef68     A8 00 A0 FD | 	call	#pushregs_
0ef6c     18 F0 07 F1 | 	add	ptra, #24
0ef70     C4 A9 BF FD | 	call	#_pop
0ef74     FD 12 02 F6 | 	mov	arg01, result1
0ef78     FE 1E 02 F6 | 	mov	local01, result2
0ef7c     FF 20 02 F6 | 	mov	local02, result3
0ef80     0C 4E 05 F1 | 	add	fp, #12
0ef84     A7 12 62 FC | 	wrlong	arg01, fp
0ef88     04 4E 05 F1 | 	add	fp, #4
0ef8c     A7 1E 62 FC | 	wrlong	local01, fp
0ef90     04 4E 05 F1 | 	add	fp, #4
0ef94     A7 20 62 FC | 	wrlong	local02, fp
0ef98     14 4E 85 F1 | 	sub	fp, #20
0ef9c     98 A9 BF FD | 	call	#_pop
0efa0     FF 22 02 F6 | 	mov	local03, result3
0efa4     A7 FA 61 FC | 	wrlong	result1, fp
0efa8     04 4E 05 F1 | 	add	fp, #4
0efac     A7 FC 61 FC | 	wrlong	result2, fp
0efb0     04 4E 05 F1 | 	add	fp, #4
0efb4     A7 22 62 FC | 	wrlong	local03, fp
0efb8                 | ' t2=pop()
0efb8                 | ' t1=pop()
0efb8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0efb8     08 4E 85 F1 | 	sub	fp, #8
0efbc     1C 22 0E F2 | 	cmp	local03, #28 wz
0efc0     A7 22 02 AB |  if_e	rdlong	local03, fp
0efc4     A7 22 62 AC |  if_e	wrlong	local03, fp
0efc8     08 4E 05 A1 |  if_e	add	fp, #8
0efcc     A7 3A 68 AC |  if_e	wrlong	#29, fp
0efd0     08 4E 85 A1 |  if_e	sub	fp, #8
0efd4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0efd4     14 4E 05 F1 | 	add	fp, #20
0efd8     A7 22 02 FB | 	rdlong	local03, fp
0efdc     14 4E 85 F1 | 	sub	fp, #20
0efe0     1C 22 0E F2 | 	cmp	local03, #28 wz
0efe4     18 00 90 5D |  if_ne	jmp	#LR__1170
0efe8     0C 4E 05 F1 | 	add	fp, #12
0efec     A7 22 02 FB | 	rdlong	local03, fp
0eff0     A7 22 62 FC | 	wrlong	local03, fp
0eff4     08 4E 05 F1 | 	add	fp, #8
0eff8     A7 3A 68 FC | 	wrlong	#29, fp
0effc     14 4E 85 F1 | 	sub	fp, #20
0f000                 | LR__1170
0f000                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0f000     08 4E 05 F1 | 	add	fp, #8
0f004     A7 22 02 FB | 	rdlong	local03, fp
0f008     08 4E 85 F1 | 	sub	fp, #8
0f00c     1F 22 0E F2 | 	cmp	local03, #31 wz
0f010     14 4E 05 51 |  if_ne	add	fp, #20
0f014     A7 20 02 5B |  if_ne	rdlong	local02, fp
0f018     14 4E 85 51 |  if_ne	sub	fp, #20
0f01c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0f020     08 4E 05 51 |  if_ne	add	fp, #8
0f024     A7 22 02 5B |  if_ne	rdlong	local03, fp
0f028     08 4E 85 51 |  if_ne	sub	fp, #8
0f02c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0f030     14 4E 05 51 |  if_ne	add	fp, #20
0f034     14 4E 85 51 |  if_ne	sub	fp, #20
0f038     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0f03c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0f040     08 4E 05 A1 |  if_e	add	fp, #8
0f044     A7 FE 69 AC |  if_e	wrlong	#255, fp
0f048     08 4E 85 A1 |  if_e	sub	fp, #8
0f04c     18 00 90 AD |  if_e	jmp	#LR__1171
0f050     A7 22 02 FB | 	rdlong	local03, fp
0f054     0C 4E 05 F1 | 	add	fp, #12
0f058     A7 1E 02 FB | 	rdlong	local01, fp
0f05c     0C 4E 85 F1 | 	sub	fp, #12
0f060     0F 23 42 F0 | 	shr	local03, local01
0f064     A7 22 62 FC | 	wrlong	local03, fp
0f068                 | LR__1171
0f068     A7 12 02 F6 | 	mov	arg01, fp
0f06c     60 A9 BF FD | 	call	#_push
0f070     A7 F0 03 F6 | 	mov	ptra, fp
0f074     B2 00 A0 FD | 	call	#popregs_
0f078                 | _do_shr_ret
0f078     2D 00 64 FD | 	ret
0f07c                 | 
0f07c                 | ' 
0f07c                 | ' sub do_power 
0f07c                 | _do_power
0f07c     02 4A 05 F6 | 	mov	COUNT_, #2
0f080     A8 00 A0 FD | 	call	#pushregs_
0f084     18 F0 07 F1 | 	add	ptra, #24
0f088     AC A8 BF FD | 	call	#_pop
0f08c     FD 14 02 F6 | 	mov	arg02, result1
0f090     FE 12 02 F6 | 	mov	arg01, result2
0f094     FF 1E 02 F6 | 	mov	local01, result3
0f098     0C 4E 05 F1 | 	add	fp, #12
0f09c     A7 14 62 FC | 	wrlong	arg02, fp
0f0a0     04 4E 05 F1 | 	add	fp, #4
0f0a4     A7 12 62 FC | 	wrlong	arg01, fp
0f0a8     04 4E 05 F1 | 	add	fp, #4
0f0ac     A7 1E 62 FC | 	wrlong	local01, fp
0f0b0     14 4E 85 F1 | 	sub	fp, #20
0f0b4     80 A8 BF FD | 	call	#_pop
0f0b8     A7 FA 61 FC | 	wrlong	result1, fp
0f0bc     04 4E 05 F1 | 	add	fp, #4
0f0c0     A7 FC 61 FC | 	wrlong	result2, fp
0f0c4     04 4E 05 F1 | 	add	fp, #4
0f0c8     A7 FE 61 FC | 	wrlong	result3, fp
0f0cc                 | ' t2=pop()
0f0cc                 | ' t1=pop()
0f0cc                 | ' 
0f0cc                 | ' 
0f0cc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0f0cc     08 4E 85 F1 | 	sub	fp, #8
0f0d0     1F FE 0D F2 | 	cmp	result3, #31 wz
0f0d4     14 4E 05 51 |  if_ne	add	fp, #20
0f0d8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f0dc     14 4E 85 51 |  if_ne	sub	fp, #20
0f0e0     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0f0e4     A7 18 68 AC |  if_e	wrlong	#12, fp
0f0e8     08 4E 05 A1 |  if_e	add	fp, #8
0f0ec     A7 FE 69 AC |  if_e	wrlong	#255, fp
0f0f0     08 4E 85 A1 |  if_e	sub	fp, #8
0f0f4     38 01 90 AD |  if_e	jmp	#LR__1185
0f0f8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0f0f8     08 4E 05 F1 | 	add	fp, #8
0f0fc     A7 14 02 FB | 	rdlong	arg02, fp
0f100     08 4E 85 F1 | 	sub	fp, #8
0f104     1C 14 0E F2 | 	cmp	arg02, #28 wz
0f108     28 00 90 5D |  if_ne	jmp	#LR__1180
0f10c     08 4E 05 F1 | 	add	fp, #8
0f110     A7 3C 68 FC | 	wrlong	#30, fp
0f114     08 4E 85 F1 | 	sub	fp, #8
0f118     A7 12 02 FB | 	rdlong	arg01, fp
0f11c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f120     1F 20 C6 C9 |  if_b	decod	local02, #31
0f124     00 20 06 36 |  if_ae	mov	local02, #0
0f128     58 C7 B0 FD | 	call	#__system___float_fromuns
0f12c     10 FB 61 F5 | 	xor	result1, local02
0f130     A7 FA 61 FC | 	wrlong	result1, fp
0f134                 | LR__1180
0f134                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0f134     08 4E 05 F1 | 	add	fp, #8
0f138     A7 14 02 FB | 	rdlong	arg02, fp
0f13c     08 4E 85 F1 | 	sub	fp, #8
0f140     1D 14 0E F2 | 	cmp	arg02, #29 wz
0f144     18 00 90 5D |  if_ne	jmp	#LR__1181
0f148     08 4E 05 F1 | 	add	fp, #8
0f14c     A7 3C 68 FC | 	wrlong	#30, fp
0f150     08 4E 85 F1 | 	sub	fp, #8
0f154     A7 12 02 FB | 	rdlong	arg01, fp
0f158     28 C7 B0 FD | 	call	#__system___float_fromuns
0f15c     A7 FA 61 FC | 	wrlong	result1, fp
0f160                 | LR__1181
0f160                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0f160     14 4E 05 F1 | 	add	fp, #20
0f164     A7 14 02 FB | 	rdlong	arg02, fp
0f168     14 4E 85 F1 | 	sub	fp, #20
0f16c     1C 14 0E F2 | 	cmp	arg02, #28 wz
0f170     34 00 90 5D |  if_ne	jmp	#LR__1182
0f174     14 4E 05 F1 | 	add	fp, #20
0f178     A7 3C 68 FC | 	wrlong	#30, fp
0f17c     08 4E 85 F1 | 	sub	fp, #8
0f180     A7 12 02 FB | 	rdlong	arg01, fp
0f184     0C 4E 85 F1 | 	sub	fp, #12
0f188     09 13 52 F6 | 	abs	arg01, arg01 wc
0f18c     1F 20 C6 C9 |  if_b	decod	local02, #31
0f190     00 20 06 36 |  if_ae	mov	local02, #0
0f194     EC C6 B0 FD | 	call	#__system___float_fromuns
0f198     10 FB 61 F5 | 	xor	result1, local02
0f19c     0C 4E 05 F1 | 	add	fp, #12
0f1a0     A7 FA 61 FC | 	wrlong	result1, fp
0f1a4     0C 4E 85 F1 | 	sub	fp, #12
0f1a8                 | LR__1182
0f1a8                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0f1a8     14 4E 05 F1 | 	add	fp, #20
0f1ac     A7 14 02 FB | 	rdlong	arg02, fp
0f1b0     14 4E 85 F1 | 	sub	fp, #20
0f1b4     1D 14 0E F2 | 	cmp	arg02, #29 wz
0f1b8     24 00 90 5D |  if_ne	jmp	#LR__1183
0f1bc     14 4E 05 F1 | 	add	fp, #20
0f1c0     A7 3C 68 FC | 	wrlong	#30, fp
0f1c4     08 4E 85 F1 | 	sub	fp, #8
0f1c8     A7 12 02 FB | 	rdlong	arg01, fp
0f1cc     0C 4E 85 F1 | 	sub	fp, #12
0f1d0     B0 C6 B0 FD | 	call	#__system___float_fromuns
0f1d4     0C 4E 05 F1 | 	add	fp, #12
0f1d8     A7 FA 61 FC | 	wrlong	result1, fp
0f1dc     0C 4E 85 F1 | 	sub	fp, #12
0f1e0                 | LR__1183
0f1e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0f1e0     08 4E 05 F1 | 	add	fp, #8
0f1e4     A7 14 02 FB | 	rdlong	arg02, fp
0f1e8     08 4E 85 F1 | 	sub	fp, #8
0f1ec     1E 14 0E F2 | 	cmp	arg02, #30 wz
0f1f0     14 4E 05 A1 |  if_e	add	fp, #20
0f1f4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0f1f8     14 4E 85 A1 |  if_e	sub	fp, #20
0f1fc     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0f200     1C 00 90 5D |  if_ne	jmp	#LR__1184
0f204     A7 12 02 FB | 	rdlong	arg01, fp
0f208     0C 4E 05 F1 | 	add	fp, #12
0f20c     A7 14 02 FB | 	rdlong	arg02, fp
0f210     0C 4E 85 F1 | 	sub	fp, #12
0f214     54 D9 B0 FD | 	call	#__system____builtin_powf
0f218     A7 FA 61 FC | 	wrlong	result1, fp
0f21c     10 00 90 FD | 	jmp	#LR__1185
0f220                 | LR__1184
0f220     A7 1A 68 FC | 	wrlong	#13, fp
0f224     08 4E 05 F1 | 	add	fp, #8
0f228     A7 FE 69 FC | 	wrlong	#255, fp
0f22c     08 4E 85 F1 | 	sub	fp, #8
0f230                 | LR__1185
0f230     A7 12 02 F6 | 	mov	arg01, fp
0f234     98 A7 BF FD | 	call	#_push
0f238     A7 F0 03 F6 | 	mov	ptra, fp
0f23c     B2 00 A0 FD | 	call	#popregs_
0f240                 | _do_power_ret
0f240     2D 00 64 FD | 	ret
0f244                 | 
0f244                 | ' 
0f244                 | ' 
0f244                 | ' sub do_eq
0f244                 | _do_eq
0f244     05 4A 05 F6 | 	mov	COUNT_, #5
0f248     A8 00 A0 FD | 	call	#pushregs_
0f24c     18 F0 07 F1 | 	add	ptra, #24
0f250     E4 A6 BF FD | 	call	#_pop
0f254     FD 1E 02 F6 | 	mov	local01, result1
0f258     FE 20 02 F6 | 	mov	local02, result2
0f25c     FF 22 02 F6 | 	mov	local03, result3
0f260     0C 4E 05 F1 | 	add	fp, #12
0f264     A7 1E 62 FC | 	wrlong	local01, fp
0f268     04 4E 05 F1 | 	add	fp, #4
0f26c     A7 20 62 FC | 	wrlong	local02, fp
0f270     04 4E 05 F1 | 	add	fp, #4
0f274     A7 22 62 FC | 	wrlong	local03, fp
0f278     14 4E 85 F1 | 	sub	fp, #20
0f27c     B8 A6 BF FD | 	call	#_pop
0f280     FF 22 02 F6 | 	mov	local03, result3
0f284     A7 FA 61 FC | 	wrlong	result1, fp
0f288     04 4E 05 F1 | 	add	fp, #4
0f28c     A7 FC 61 FC | 	wrlong	result2, fp
0f290     04 4E 05 F1 | 	add	fp, #4
0f294     A7 22 62 FC | 	wrlong	local03, fp
0f298                 | ' t2=pop()
0f298                 | ' t1=pop()
0f298                 | ' 
0f298                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0f298     08 4E 85 F1 | 	sub	fp, #8
0f29c     1F 22 0E F2 | 	cmp	local03, #31 wz
0f2a0     14 4E 05 A1 |  if_e	add	fp, #20
0f2a4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f2a8     14 4E 85 A1 |  if_e	sub	fp, #20
0f2ac     12 23 02 A6 |  if_e	mov	local03, local04
0f2b0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f2b4     28 00 90 5D |  if_ne	jmp	#LR__1190
0f2b8     00 1E 06 F6 | 	mov	local01, #0
0f2bc     A7 12 02 FB | 	rdlong	arg01, fp
0f2c0     0C 4E 05 F1 | 	add	fp, #12
0f2c4     A7 14 02 FB | 	rdlong	arg02, fp
0f2c8     0C 4E 85 F1 | 	sub	fp, #12
0f2cc     F4 9E B0 FD | 	call	#__system___string_cmp
0f2d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0f2d4     00 1E 26 A6 |  if_e	not	local01, #0
0f2d8     A7 1E 62 FC | 	wrlong	local01, fp
0f2dc     1C 04 90 FD | 	jmp	#LR__1203
0f2e0                 | LR__1190
0f2e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0f2e0     08 4E 05 F1 | 	add	fp, #8
0f2e4     A7 1E 02 FB | 	rdlong	local01, fp
0f2e8     08 4E 85 F1 | 	sub	fp, #8
0f2ec     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f2f0     14 4E 05 A1 |  if_e	add	fp, #20
0f2f4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f2f8     14 4E 85 A1 |  if_e	sub	fp, #20
0f2fc     12 23 02 A6 |  if_e	mov	local03, local04
0f300     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f304     2C 00 90 5D |  if_ne	jmp	#LR__1191
0f308     00 1E 06 F6 | 	mov	local01, #0
0f30c     A7 12 02 FB | 	rdlong	arg01, fp
0f310     0C 4E 05 F1 | 	add	fp, #12
0f314     A7 14 02 FB | 	rdlong	arg02, fp
0f318     0C 4E 85 F1 | 	sub	fp, #12
0f31c     01 16 06 F6 | 	mov	arg03, #1
0f320     98 CD B0 FD | 	call	#__system___float_cmp
0f324     00 FA 0D F2 | 	cmp	result1, #0 wz
0f328     00 1E 26 A6 |  if_e	not	local01, #0
0f32c     A7 1E 62 FC | 	wrlong	local01, fp
0f330     C8 03 90 FD | 	jmp	#LR__1203
0f334                 | LR__1191
0f334                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0f334     08 4E 05 F1 | 	add	fp, #8
0f338     A7 1E 02 FB | 	rdlong	local01, fp
0f33c     08 4E 85 F1 | 	sub	fp, #8
0f340     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f344     14 4E 05 A1 |  if_e	add	fp, #20
0f348     A7 24 02 AB |  if_e	rdlong	local04, fp
0f34c     14 4E 85 A1 |  if_e	sub	fp, #20
0f350     12 23 02 A6 |  if_e	mov	local03, local04
0f354     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f358     48 00 90 5D |  if_ne	jmp	#LR__1192
0f35c     00 1E 06 F6 | 	mov	local01, #0
0f360     A7 20 02 FB | 	rdlong	local02, fp
0f364     0C 4E 05 F1 | 	add	fp, #12
0f368     A7 12 02 FB | 	rdlong	arg01, fp
0f36c     0C 4E 85 F1 | 	sub	fp, #12
0f370     09 13 52 F6 | 	abs	arg01, arg01 wc
0f374     1F 26 C6 C9 |  if_b	decod	local05, #31
0f378     00 26 06 36 |  if_ae	mov	local05, #0
0f37c     04 C5 B0 FD | 	call	#__system___float_fromuns
0f380     13 FB 61 F5 | 	xor	result1, local05
0f384     FD 14 02 F6 | 	mov	arg02, result1
0f388     10 13 02 F6 | 	mov	arg01, local02
0f38c     01 16 06 F6 | 	mov	arg03, #1
0f390     28 CD B0 FD | 	call	#__system___float_cmp
0f394     00 FA 0D F2 | 	cmp	result1, #0 wz
0f398     00 1E 26 A6 |  if_e	not	local01, #0
0f39c     A7 1E 62 FC | 	wrlong	local01, fp
0f3a0     58 03 90 FD | 	jmp	#LR__1203
0f3a4                 | LR__1192
0f3a4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0f3a4     08 4E 05 F1 | 	add	fp, #8
0f3a8     A7 1E 02 FB | 	rdlong	local01, fp
0f3ac     08 4E 85 F1 | 	sub	fp, #8
0f3b0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f3b4     14 4E 05 A1 |  if_e	add	fp, #20
0f3b8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f3bc     14 4E 85 A1 |  if_e	sub	fp, #20
0f3c0     12 23 02 A6 |  if_e	mov	local03, local04
0f3c4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f3c8     38 00 90 5D |  if_ne	jmp	#LR__1193
0f3cc     00 1E 06 F6 | 	mov	local01, #0
0f3d0     A7 20 02 FB | 	rdlong	local02, fp
0f3d4     0C 4E 05 F1 | 	add	fp, #12
0f3d8     A7 12 02 FB | 	rdlong	arg01, fp
0f3dc     0C 4E 85 F1 | 	sub	fp, #12
0f3e0     A0 C4 B0 FD | 	call	#__system___float_fromuns
0f3e4     FD 14 02 F6 | 	mov	arg02, result1
0f3e8     10 13 02 F6 | 	mov	arg01, local02
0f3ec     01 16 06 F6 | 	mov	arg03, #1
0f3f0     C8 CC B0 FD | 	call	#__system___float_cmp
0f3f4     00 FA 0D F2 | 	cmp	result1, #0 wz
0f3f8     00 1E 26 A6 |  if_e	not	local01, #0
0f3fc     A7 1E 62 FC | 	wrlong	local01, fp
0f400     F8 02 90 FD | 	jmp	#LR__1203
0f404                 | LR__1193
0f404                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0f404     08 4E 05 F1 | 	add	fp, #8
0f408     A7 1E 02 FB | 	rdlong	local01, fp
0f40c     08 4E 85 F1 | 	sub	fp, #8
0f410     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f414     14 4E 05 A1 |  if_e	add	fp, #20
0f418     A7 24 02 AB |  if_e	rdlong	local04, fp
0f41c     14 4E 85 A1 |  if_e	sub	fp, #20
0f420     12 23 02 A6 |  if_e	mov	local03, local04
0f424     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f428     44 00 90 5D |  if_ne	jmp	#LR__1194
0f42c     00 1E 06 F6 | 	mov	local01, #0
0f430     A7 12 02 FB | 	rdlong	arg01, fp
0f434     09 13 52 F6 | 	abs	arg01, arg01 wc
0f438     1F 26 C6 C9 |  if_b	decod	local05, #31
0f43c     00 26 06 36 |  if_ae	mov	local05, #0
0f440     40 C4 B0 FD | 	call	#__system___float_fromuns
0f444     13 FB 61 F5 | 	xor	result1, local05
0f448     FD 12 02 F6 | 	mov	arg01, result1
0f44c     0C 4E 05 F1 | 	add	fp, #12
0f450     A7 14 02 FB | 	rdlong	arg02, fp
0f454     0C 4E 85 F1 | 	sub	fp, #12
0f458     01 16 06 F6 | 	mov	arg03, #1
0f45c     5C CC B0 FD | 	call	#__system___float_cmp
0f460     00 FA 0D F2 | 	cmp	result1, #0 wz
0f464     00 1E 26 A6 |  if_e	not	local01, #0
0f468     A7 1E 62 FC | 	wrlong	local01, fp
0f46c     8C 02 90 FD | 	jmp	#LR__1203
0f470                 | LR__1194
0f470                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0f470     08 4E 05 F1 | 	add	fp, #8
0f474     A7 1E 02 FB | 	rdlong	local01, fp
0f478     08 4E 85 F1 | 	sub	fp, #8
0f47c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f480     14 4E 05 A1 |  if_e	add	fp, #20
0f484     A7 24 02 AB |  if_e	rdlong	local04, fp
0f488     14 4E 85 A1 |  if_e	sub	fp, #20
0f48c     12 23 02 A6 |  if_e	mov	local03, local04
0f490     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f494     24 00 90 5D |  if_ne	jmp	#LR__1195
0f498     00 1E 06 F6 | 	mov	local01, #0
0f49c     A7 20 02 FB | 	rdlong	local02, fp
0f4a0     0C 4E 05 F1 | 	add	fp, #12
0f4a4     A7 22 02 FB | 	rdlong	local03, fp
0f4a8     0C 4E 85 F1 | 	sub	fp, #12
0f4ac     11 21 0A F2 | 	cmp	local02, local03 wz
0f4b0     01 1E 66 A6 |  if_e	neg	local01, #1
0f4b4     A7 1E 62 FC | 	wrlong	local01, fp
0f4b8     40 02 90 FD | 	jmp	#LR__1203
0f4bc                 | LR__1195
0f4bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0f4bc     08 4E 05 F1 | 	add	fp, #8
0f4c0     A7 1E 02 FB | 	rdlong	local01, fp
0f4c4     08 4E 85 F1 | 	sub	fp, #8
0f4c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f4cc     14 4E 05 A1 |  if_e	add	fp, #20
0f4d0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f4d4     14 4E 85 A1 |  if_e	sub	fp, #20
0f4d8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f4dc     24 00 90 5D |  if_ne	jmp	#LR__1196
0f4e0     00 1E 06 F6 | 	mov	local01, #0
0f4e4     A7 20 02 FB | 	rdlong	local02, fp
0f4e8     0C 4E 05 F1 | 	add	fp, #12
0f4ec     A7 22 02 FB | 	rdlong	local03, fp
0f4f0     0C 4E 85 F1 | 	sub	fp, #12
0f4f4     11 21 0A F2 | 	cmp	local02, local03 wz
0f4f8     01 1E 66 A6 |  if_e	neg	local01, #1
0f4fc     A7 1E 62 FC | 	wrlong	local01, fp
0f500     F8 01 90 FD | 	jmp	#LR__1203
0f504                 | LR__1196
0f504                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0f504     08 4E 05 F1 | 	add	fp, #8
0f508     A7 1E 02 FB | 	rdlong	local01, fp
0f50c     08 4E 85 F1 | 	sub	fp, #8
0f510     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f514     14 4E 05 A1 |  if_e	add	fp, #20
0f518     A7 22 02 AB |  if_e	rdlong	local03, fp
0f51c     14 4E 85 A1 |  if_e	sub	fp, #20
0f520     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f524     34 00 90 5D |  if_ne	jmp	#LR__1197
0f528     00 1E 06 F6 | 	mov	local01, #0
0f52c     A7 12 02 FB | 	rdlong	arg01, fp
0f530     50 C3 B0 FD | 	call	#__system___float_fromuns
0f534     FD 12 02 F6 | 	mov	arg01, result1
0f538     0C 4E 05 F1 | 	add	fp, #12
0f53c     A7 14 02 FB | 	rdlong	arg02, fp
0f540     0C 4E 85 F1 | 	sub	fp, #12
0f544     01 16 06 F6 | 	mov	arg03, #1
0f548     70 CB B0 FD | 	call	#__system___float_cmp
0f54c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f550     00 1E 26 A6 |  if_e	not	local01, #0
0f554     A7 1E 62 FC | 	wrlong	local01, fp
0f558     A0 01 90 FD | 	jmp	#LR__1203
0f55c                 | LR__1197
0f55c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0f55c     08 4E 05 F1 | 	add	fp, #8
0f560     A7 1E 02 FB | 	rdlong	local01, fp
0f564     08 4E 85 F1 | 	sub	fp, #8
0f568     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f56c     14 4E 05 A1 |  if_e	add	fp, #20
0f570     A7 22 02 AB |  if_e	rdlong	local03, fp
0f574     14 4E 85 A1 |  if_e	sub	fp, #20
0f578     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f57c     24 00 90 5D |  if_ne	jmp	#LR__1198
0f580     00 1E 06 F6 | 	mov	local01, #0
0f584     A7 20 02 FB | 	rdlong	local02, fp
0f588     0C 4E 05 F1 | 	add	fp, #12
0f58c     A7 22 02 FB | 	rdlong	local03, fp
0f590     0C 4E 85 F1 | 	sub	fp, #12
0f594     11 21 0A F2 | 	cmp	local02, local03 wz
0f598     01 1E 66 A6 |  if_e	neg	local01, #1
0f59c     A7 1E 62 FC | 	wrlong	local01, fp
0f5a0     58 01 90 FD | 	jmp	#LR__1203
0f5a4                 | LR__1198
0f5a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0f5a4     08 4E 05 F1 | 	add	fp, #8
0f5a8     A7 1E 02 FB | 	rdlong	local01, fp
0f5ac     08 4E 85 F1 | 	sub	fp, #8
0f5b0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f5b4     14 4E 05 A1 |  if_e	add	fp, #20
0f5b8     A7 22 02 AB |  if_e	rdlong	local03, fp
0f5bc     14 4E 85 A1 |  if_e	sub	fp, #20
0f5c0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f5c4     24 00 90 5D |  if_ne	jmp	#LR__1199
0f5c8     00 1E 06 F6 | 	mov	local01, #0
0f5cc     A7 20 02 FB | 	rdlong	local02, fp
0f5d0     0C 4E 05 F1 | 	add	fp, #12
0f5d4     A7 22 02 FB | 	rdlong	local03, fp
0f5d8     0C 4E 85 F1 | 	sub	fp, #12
0f5dc     11 21 0A F2 | 	cmp	local02, local03 wz
0f5e0     01 1E 66 A6 |  if_e	neg	local01, #1
0f5e4     A7 1E 62 FC | 	wrlong	local01, fp
0f5e8     10 01 90 FD | 	jmp	#LR__1203
0f5ec                 | LR__1199
0f5ec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
0f5ec     08 4E 05 F1 | 	add	fp, #8
0f5f0     A7 1E 02 FB | 	rdlong	local01, fp
0f5f4     08 4E 85 F1 | 	sub	fp, #8
0f5f8     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f5fc     14 4E 05 A1 |  if_e	add	fp, #20
0f600     A7 22 02 AB |  if_e	rdlong	local03, fp
0f604     14 4E 85 A1 |  if_e	sub	fp, #20
0f608     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f60c     30 00 90 5D |  if_ne	jmp	#LR__1200
0f610     00 1E 06 F6 | 	mov	local01, #0
0f614     A7 12 02 FB | 	rdlong	arg01, fp
0f618     80 D6 BF FD | 	call	#_convertstring
0f61c     FD 12 02 F6 | 	mov	arg01, result1
0f620     0C 4E 05 F1 | 	add	fp, #12
0f624     A7 14 02 FB | 	rdlong	arg02, fp
0f628     0C 4E 85 F1 | 	sub	fp, #12
0f62c     94 9B B0 FD | 	call	#__system___string_cmp
0f630     00 FA 0D F2 | 	cmp	result1, #0 wz
0f634     00 1E 26 A6 |  if_e	not	local01, #0
0f638     A7 1E 62 FC | 	wrlong	local01, fp
0f63c     BC 00 90 FD | 	jmp	#LR__1203
0f640                 | LR__1200
0f640                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
0f640     08 4E 05 F1 | 	add	fp, #8
0f644     A7 1E 02 FB | 	rdlong	local01, fp
0f648     08 4E 85 F1 | 	sub	fp, #8
0f64c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f650     14 4E 05 A1 |  if_e	add	fp, #20
0f654     A7 22 02 AB |  if_e	rdlong	local03, fp
0f658     14 4E 85 A1 |  if_e	sub	fp, #20
0f65c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f660     34 00 90 5D |  if_ne	jmp	#LR__1201
0f664     00 1E 06 F6 | 	mov	local01, #0
0f668     A7 20 02 FB | 	rdlong	local02, fp
0f66c     0C 4E 05 F1 | 	add	fp, #12
0f670     A7 12 02 FB | 	rdlong	arg01, fp
0f674     0C 4E 85 F1 | 	sub	fp, #12
0f678     20 D6 BF FD | 	call	#_convertstring
0f67c     FD 14 02 F6 | 	mov	arg02, result1
0f680     10 13 02 F6 | 	mov	arg01, local02
0f684     3C 9B B0 FD | 	call	#__system___string_cmp
0f688     00 FA 0D F2 | 	cmp	result1, #0 wz
0f68c     00 1E 26 A6 |  if_e	not	local01, #0
0f690     A7 1E 62 FC | 	wrlong	local01, fp
0f694     64 00 90 FD | 	jmp	#LR__1203
0f698                 | LR__1201
0f698                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
0f698     08 4E 05 F1 | 	add	fp, #8
0f69c     A7 1E 02 FB | 	rdlong	local01, fp
0f6a0     08 4E 85 F1 | 	sub	fp, #8
0f6a4     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f6a8     14 4E 05 A1 |  if_e	add	fp, #20
0f6ac     A7 22 02 AB |  if_e	rdlong	local03, fp
0f6b0     14 4E 85 A1 |  if_e	sub	fp, #20
0f6b4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f6b8     3C 00 90 5D |  if_ne	jmp	#LR__1202
0f6bc     00 1E 06 F6 | 	mov	local01, #0
0f6c0     A7 12 02 FB | 	rdlong	arg01, fp
0f6c4     D4 D5 BF FD | 	call	#_convertstring
0f6c8     FD 20 02 F6 | 	mov	local02, result1
0f6cc     0C 4E 05 F1 | 	add	fp, #12
0f6d0     A7 12 02 FB | 	rdlong	arg01, fp
0f6d4     0C 4E 85 F1 | 	sub	fp, #12
0f6d8     C0 D5 BF FD | 	call	#_convertstring
0f6dc     FD 14 02 F6 | 	mov	arg02, result1
0f6e0     10 13 02 F6 | 	mov	arg01, local02
0f6e4     DC 9A B0 FD | 	call	#__system___string_cmp
0f6e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0f6ec     00 1E 26 A6 |  if_e	not	local01, #0
0f6f0     A7 1E 62 FC | 	wrlong	local01, fp
0f6f4     04 00 90 FD | 	jmp	#LR__1203
0f6f8                 | LR__1202
0f6f8     A7 00 68 FC | 	wrlong	#0, fp
0f6fc                 | LR__1203
0f6fc     08 4E 05 F1 | 	add	fp, #8
0f700     A7 38 68 FC | 	wrlong	#28, fp
0f704     08 4E 85 F1 | 	sub	fp, #8
0f708     A7 12 02 F6 | 	mov	arg01, fp
0f70c     C0 A2 BF FD | 	call	#_push
0f710     A7 F0 03 F6 | 	mov	ptra, fp
0f714     B2 00 A0 FD | 	call	#popregs_
0f718                 | _do_eq_ret
0f718     2D 00 64 FD | 	ret
0f71c                 | 
0f71c                 | ' 
0f71c                 | ' sub do_gt
0f71c                 | _do_gt
0f71c     05 4A 05 F6 | 	mov	COUNT_, #5
0f720     A8 00 A0 FD | 	call	#pushregs_
0f724     18 F0 07 F1 | 	add	ptra, #24
0f728     0C A2 BF FD | 	call	#_pop
0f72c     FD 1E 02 F6 | 	mov	local01, result1
0f730     FE 20 02 F6 | 	mov	local02, result2
0f734     FF 22 02 F6 | 	mov	local03, result3
0f738     0C 4E 05 F1 | 	add	fp, #12
0f73c     A7 1E 62 FC | 	wrlong	local01, fp
0f740     04 4E 05 F1 | 	add	fp, #4
0f744     A7 20 62 FC | 	wrlong	local02, fp
0f748     04 4E 05 F1 | 	add	fp, #4
0f74c     A7 22 62 FC | 	wrlong	local03, fp
0f750     14 4E 85 F1 | 	sub	fp, #20
0f754     E0 A1 BF FD | 	call	#_pop
0f758     FF 22 02 F6 | 	mov	local03, result3
0f75c     A7 FA 61 FC | 	wrlong	result1, fp
0f760     04 4E 05 F1 | 	add	fp, #4
0f764     A7 FC 61 FC | 	wrlong	result2, fp
0f768     04 4E 05 F1 | 	add	fp, #4
0f76c     A7 22 62 FC | 	wrlong	local03, fp
0f770                 | ' t2=pop()
0f770                 | ' t1=pop()
0f770                 | ' 
0f770                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0f770     08 4E 85 F1 | 	sub	fp, #8
0f774     1F 22 0E F2 | 	cmp	local03, #31 wz
0f778     14 4E 05 A1 |  if_e	add	fp, #20
0f77c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f780     14 4E 85 A1 |  if_e	sub	fp, #20
0f784     12 23 02 A6 |  if_e	mov	local03, local04
0f788     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f78c     28 00 90 5D |  if_ne	jmp	#LR__1210
0f790     00 1E 06 F6 | 	mov	local01, #0
0f794     A7 12 02 FB | 	rdlong	arg01, fp
0f798     0C 4E 05 F1 | 	add	fp, #12
0f79c     A7 14 02 FB | 	rdlong	arg02, fp
0f7a0     0C 4E 85 F1 | 	sub	fp, #12
0f7a4     1C 9A B0 FD | 	call	#__system___string_cmp
0f7a8     01 FA 55 F2 | 	cmps	result1, #1 wc
0f7ac     00 1E 26 36 |  if_ae	not	local01, #0
0f7b0     A7 1E 62 FC | 	wrlong	local01, fp
0f7b4     1C 04 90 FD | 	jmp	#LR__1223
0f7b8                 | LR__1210
0f7b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0f7b8     08 4E 05 F1 | 	add	fp, #8
0f7bc     A7 1E 02 FB | 	rdlong	local01, fp
0f7c0     08 4E 85 F1 | 	sub	fp, #8
0f7c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f7c8     14 4E 05 A1 |  if_e	add	fp, #20
0f7cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0f7d0     14 4E 85 A1 |  if_e	sub	fp, #20
0f7d4     12 23 02 A6 |  if_e	mov	local03, local04
0f7d8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f7dc     2C 00 90 5D |  if_ne	jmp	#LR__1211
0f7e0     00 1E 06 F6 | 	mov	local01, #0
0f7e4     A7 12 02 FB | 	rdlong	arg01, fp
0f7e8     0C 4E 05 F1 | 	add	fp, #12
0f7ec     A7 14 02 FB | 	rdlong	arg02, fp
0f7f0     0C 4E 85 F1 | 	sub	fp, #12
0f7f4     01 16 66 F6 | 	neg	arg03, #1
0f7f8     C0 C8 B0 FD | 	call	#__system___float_cmp
0f7fc     01 FA 55 F2 | 	cmps	result1, #1 wc
0f800     00 1E 26 36 |  if_ae	not	local01, #0
0f804     A7 1E 62 FC | 	wrlong	local01, fp
0f808     C8 03 90 FD | 	jmp	#LR__1223
0f80c                 | LR__1211
0f80c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0f80c     08 4E 05 F1 | 	add	fp, #8
0f810     A7 1E 02 FB | 	rdlong	local01, fp
0f814     08 4E 85 F1 | 	sub	fp, #8
0f818     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f81c     14 4E 05 A1 |  if_e	add	fp, #20
0f820     A7 24 02 AB |  if_e	rdlong	local04, fp
0f824     14 4E 85 A1 |  if_e	sub	fp, #20
0f828     12 23 02 A6 |  if_e	mov	local03, local04
0f82c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f830     48 00 90 5D |  if_ne	jmp	#LR__1212
0f834     00 1E 06 F6 | 	mov	local01, #0
0f838     A7 20 02 FB | 	rdlong	local02, fp
0f83c     0C 4E 05 F1 | 	add	fp, #12
0f840     A7 12 02 FB | 	rdlong	arg01, fp
0f844     0C 4E 85 F1 | 	sub	fp, #12
0f848     09 13 52 F6 | 	abs	arg01, arg01 wc
0f84c     1F 26 C6 C9 |  if_b	decod	local05, #31
0f850     00 26 06 36 |  if_ae	mov	local05, #0
0f854     2C C0 B0 FD | 	call	#__system___float_fromuns
0f858     13 FB 61 F5 | 	xor	result1, local05
0f85c     FD 14 02 F6 | 	mov	arg02, result1
0f860     10 13 02 F6 | 	mov	arg01, local02
0f864     01 16 66 F6 | 	neg	arg03, #1
0f868     50 C8 B0 FD | 	call	#__system___float_cmp
0f86c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f870     00 1E 26 36 |  if_ae	not	local01, #0
0f874     A7 1E 62 FC | 	wrlong	local01, fp
0f878     58 03 90 FD | 	jmp	#LR__1223
0f87c                 | LR__1212
0f87c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0f87c     08 4E 05 F1 | 	add	fp, #8
0f880     A7 1E 02 FB | 	rdlong	local01, fp
0f884     08 4E 85 F1 | 	sub	fp, #8
0f888     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f88c     14 4E 05 A1 |  if_e	add	fp, #20
0f890     A7 24 02 AB |  if_e	rdlong	local04, fp
0f894     14 4E 85 A1 |  if_e	sub	fp, #20
0f898     12 23 02 A6 |  if_e	mov	local03, local04
0f89c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f8a0     38 00 90 5D |  if_ne	jmp	#LR__1213
0f8a4     00 1E 06 F6 | 	mov	local01, #0
0f8a8     A7 20 02 FB | 	rdlong	local02, fp
0f8ac     0C 4E 05 F1 | 	add	fp, #12
0f8b0     A7 12 02 FB | 	rdlong	arg01, fp
0f8b4     0C 4E 85 F1 | 	sub	fp, #12
0f8b8     C8 BF B0 FD | 	call	#__system___float_fromuns
0f8bc     FD 14 02 F6 | 	mov	arg02, result1
0f8c0     10 13 02 F6 | 	mov	arg01, local02
0f8c4     01 16 66 F6 | 	neg	arg03, #1
0f8c8     F0 C7 B0 FD | 	call	#__system___float_cmp
0f8cc     01 FA 55 F2 | 	cmps	result1, #1 wc
0f8d0     00 1E 26 36 |  if_ae	not	local01, #0
0f8d4     A7 1E 62 FC | 	wrlong	local01, fp
0f8d8     F8 02 90 FD | 	jmp	#LR__1223
0f8dc                 | LR__1213
0f8dc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0f8dc     08 4E 05 F1 | 	add	fp, #8
0f8e0     A7 1E 02 FB | 	rdlong	local01, fp
0f8e4     08 4E 85 F1 | 	sub	fp, #8
0f8e8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f8ec     14 4E 05 A1 |  if_e	add	fp, #20
0f8f0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f8f4     14 4E 85 A1 |  if_e	sub	fp, #20
0f8f8     12 23 02 A6 |  if_e	mov	local03, local04
0f8fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f900     44 00 90 5D |  if_ne	jmp	#LR__1214
0f904     00 1E 06 F6 | 	mov	local01, #0
0f908     A7 12 02 FB | 	rdlong	arg01, fp
0f90c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f910     1F 26 C6 C9 |  if_b	decod	local05, #31
0f914     00 26 06 36 |  if_ae	mov	local05, #0
0f918     68 BF B0 FD | 	call	#__system___float_fromuns
0f91c     13 FB 61 F5 | 	xor	result1, local05
0f920     FD 12 02 F6 | 	mov	arg01, result1
0f924     0C 4E 05 F1 | 	add	fp, #12
0f928     A7 14 02 FB | 	rdlong	arg02, fp
0f92c     0C 4E 85 F1 | 	sub	fp, #12
0f930     01 16 66 F6 | 	neg	arg03, #1
0f934     84 C7 B0 FD | 	call	#__system___float_cmp
0f938     01 FA 55 F2 | 	cmps	result1, #1 wc
0f93c     00 1E 26 36 |  if_ae	not	local01, #0
0f940     A7 1E 62 FC | 	wrlong	local01, fp
0f944     8C 02 90 FD | 	jmp	#LR__1223
0f948                 | LR__1214
0f948                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0f948     08 4E 05 F1 | 	add	fp, #8
0f94c     A7 1E 02 FB | 	rdlong	local01, fp
0f950     08 4E 85 F1 | 	sub	fp, #8
0f954     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f958     14 4E 05 A1 |  if_e	add	fp, #20
0f95c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f960     14 4E 85 A1 |  if_e	sub	fp, #20
0f964     12 23 02 A6 |  if_e	mov	local03, local04
0f968     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f96c     24 00 90 5D |  if_ne	jmp	#LR__1215
0f970     00 1E 06 F6 | 	mov	local01, #0
0f974     A7 20 02 FB | 	rdlong	local02, fp
0f978     0C 4E 05 F1 | 	add	fp, #12
0f97c     A7 22 02 FB | 	rdlong	local03, fp
0f980     0C 4E 85 F1 | 	sub	fp, #12
0f984     11 21 5A F2 | 	cmps	local02, local03 wcz
0f988     01 1E 66 16 |  if_a	neg	local01, #1
0f98c     A7 1E 62 FC | 	wrlong	local01, fp
0f990     40 02 90 FD | 	jmp	#LR__1223
0f994                 | LR__1215
0f994                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0f994     08 4E 05 F1 | 	add	fp, #8
0f998     A7 1E 02 FB | 	rdlong	local01, fp
0f99c     08 4E 85 F1 | 	sub	fp, #8
0f9a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f9a4     14 4E 05 A1 |  if_e	add	fp, #20
0f9a8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f9ac     14 4E 85 A1 |  if_e	sub	fp, #20
0f9b0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f9b4     24 00 90 5D |  if_ne	jmp	#LR__1216
0f9b8     00 1E 06 F6 | 	mov	local01, #0
0f9bc     A7 20 02 FB | 	rdlong	local02, fp
0f9c0     0C 4E 05 F1 | 	add	fp, #12
0f9c4     A7 22 02 FB | 	rdlong	local03, fp
0f9c8     0C 4E 85 F1 | 	sub	fp, #12
0f9cc     11 21 5A F2 | 	cmps	local02, local03 wcz
0f9d0     01 1E 66 16 |  if_a	neg	local01, #1
0f9d4     A7 1E 62 FC | 	wrlong	local01, fp
0f9d8     F8 01 90 FD | 	jmp	#LR__1223
0f9dc                 | LR__1216
0f9dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0f9dc     08 4E 05 F1 | 	add	fp, #8
0f9e0     A7 1E 02 FB | 	rdlong	local01, fp
0f9e4     08 4E 85 F1 | 	sub	fp, #8
0f9e8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f9ec     14 4E 05 A1 |  if_e	add	fp, #20
0f9f0     A7 22 02 AB |  if_e	rdlong	local03, fp
0f9f4     14 4E 85 A1 |  if_e	sub	fp, #20
0f9f8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f9fc     34 00 90 5D |  if_ne	jmp	#LR__1217
0fa00     00 1E 06 F6 | 	mov	local01, #0
0fa04     A7 12 02 FB | 	rdlong	arg01, fp
0fa08     78 BE B0 FD | 	call	#__system___float_fromuns
0fa0c     FD 12 02 F6 | 	mov	arg01, result1
0fa10     0C 4E 05 F1 | 	add	fp, #12
0fa14     A7 14 02 FB | 	rdlong	arg02, fp
0fa18     0C 4E 85 F1 | 	sub	fp, #12
0fa1c     01 16 66 F6 | 	neg	arg03, #1
0fa20     98 C6 B0 FD | 	call	#__system___float_cmp
0fa24     01 FA 55 F2 | 	cmps	result1, #1 wc
0fa28     00 1E 26 36 |  if_ae	not	local01, #0
0fa2c     A7 1E 62 FC | 	wrlong	local01, fp
0fa30     A0 01 90 FD | 	jmp	#LR__1223
0fa34                 | LR__1217
0fa34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0fa34     08 4E 05 F1 | 	add	fp, #8
0fa38     A7 1E 02 FB | 	rdlong	local01, fp
0fa3c     08 4E 85 F1 | 	sub	fp, #8
0fa40     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fa44     14 4E 05 A1 |  if_e	add	fp, #20
0fa48     A7 22 02 AB |  if_e	rdlong	local03, fp
0fa4c     14 4E 85 A1 |  if_e	sub	fp, #20
0fa50     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fa54     24 00 90 5D |  if_ne	jmp	#LR__1218
0fa58     00 1E 06 F6 | 	mov	local01, #0
0fa5c     A7 20 02 FB | 	rdlong	local02, fp
0fa60     0C 4E 05 F1 | 	add	fp, #12
0fa64     A7 22 02 FB | 	rdlong	local03, fp
0fa68     0C 4E 85 F1 | 	sub	fp, #12
0fa6c     11 21 5A F2 | 	cmps	local02, local03 wcz
0fa70     01 1E 66 16 |  if_a	neg	local01, #1
0fa74     A7 1E 62 FC | 	wrlong	local01, fp
0fa78     58 01 90 FD | 	jmp	#LR__1223
0fa7c                 | LR__1218
0fa7c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0fa7c     08 4E 05 F1 | 	add	fp, #8
0fa80     A7 1E 02 FB | 	rdlong	local01, fp
0fa84     08 4E 85 F1 | 	sub	fp, #8
0fa88     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fa8c     14 4E 05 A1 |  if_e	add	fp, #20
0fa90     A7 22 02 AB |  if_e	rdlong	local03, fp
0fa94     14 4E 85 A1 |  if_e	sub	fp, #20
0fa98     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fa9c     24 00 90 5D |  if_ne	jmp	#LR__1219
0faa0     00 1E 06 F6 | 	mov	local01, #0
0faa4     A7 20 02 FB | 	rdlong	local02, fp
0faa8     0C 4E 05 F1 | 	add	fp, #12
0faac     A7 22 02 FB | 	rdlong	local03, fp
0fab0     0C 4E 85 F1 | 	sub	fp, #12
0fab4     11 21 1A F2 | 	cmp	local02, local03 wcz
0fab8     01 1E 66 16 |  if_a	neg	local01, #1
0fabc     A7 1E 62 FC | 	wrlong	local01, fp
0fac0     10 01 90 FD | 	jmp	#LR__1223
0fac4                 | LR__1219
0fac4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
0fac4     08 4E 05 F1 | 	add	fp, #8
0fac8     A7 1E 02 FB | 	rdlong	local01, fp
0facc     08 4E 85 F1 | 	sub	fp, #8
0fad0     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fad4     14 4E 05 A1 |  if_e	add	fp, #20
0fad8     A7 22 02 AB |  if_e	rdlong	local03, fp
0fadc     14 4E 85 A1 |  if_e	sub	fp, #20
0fae0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fae4     30 00 90 5D |  if_ne	jmp	#LR__1220
0fae8     00 1E 06 F6 | 	mov	local01, #0
0faec     A7 12 02 FB | 	rdlong	arg01, fp
0faf0     A8 D1 BF FD | 	call	#_convertstring
0faf4     FD 12 02 F6 | 	mov	arg01, result1
0faf8     0C 4E 05 F1 | 	add	fp, #12
0fafc     A7 14 02 FB | 	rdlong	arg02, fp
0fb00     0C 4E 85 F1 | 	sub	fp, #12
0fb04     BC 96 B0 FD | 	call	#__system___string_cmp
0fb08     01 FA 55 F2 | 	cmps	result1, #1 wc
0fb0c     00 1E 26 36 |  if_ae	not	local01, #0
0fb10     A7 1E 62 FC | 	wrlong	local01, fp
0fb14     BC 00 90 FD | 	jmp	#LR__1223
0fb18                 | LR__1220
0fb18                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
0fb18     08 4E 05 F1 | 	add	fp, #8
0fb1c     A7 1E 02 FB | 	rdlong	local01, fp
0fb20     08 4E 85 F1 | 	sub	fp, #8
0fb24     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fb28     14 4E 05 A1 |  if_e	add	fp, #20
0fb2c     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb30     14 4E 85 A1 |  if_e	sub	fp, #20
0fb34     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fb38     34 00 90 5D |  if_ne	jmp	#LR__1221
0fb3c     00 1E 06 F6 | 	mov	local01, #0
0fb40     A7 20 02 FB | 	rdlong	local02, fp
0fb44     0C 4E 05 F1 | 	add	fp, #12
0fb48     A7 12 02 FB | 	rdlong	arg01, fp
0fb4c     0C 4E 85 F1 | 	sub	fp, #12
0fb50     48 D1 BF FD | 	call	#_convertstring
0fb54     FD 14 02 F6 | 	mov	arg02, result1
0fb58     10 13 02 F6 | 	mov	arg01, local02
0fb5c     64 96 B0 FD | 	call	#__system___string_cmp
0fb60     01 FA 55 F2 | 	cmps	result1, #1 wc
0fb64     00 1E 26 36 |  if_ae	not	local01, #0
0fb68     A7 1E 62 FC | 	wrlong	local01, fp
0fb6c     64 00 90 FD | 	jmp	#LR__1223
0fb70                 | LR__1221
0fb70                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
0fb70     08 4E 05 F1 | 	add	fp, #8
0fb74     A7 1E 02 FB | 	rdlong	local01, fp
0fb78     08 4E 85 F1 | 	sub	fp, #8
0fb7c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fb80     14 4E 05 A1 |  if_e	add	fp, #20
0fb84     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb88     14 4E 85 A1 |  if_e	sub	fp, #20
0fb8c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fb90     3C 00 90 5D |  if_ne	jmp	#LR__1222
0fb94     00 1E 06 F6 | 	mov	local01, #0
0fb98     A7 12 02 FB | 	rdlong	arg01, fp
0fb9c     FC D0 BF FD | 	call	#_convertstring
0fba0     FD 20 02 F6 | 	mov	local02, result1
0fba4     0C 4E 05 F1 | 	add	fp, #12
0fba8     A7 12 02 FB | 	rdlong	arg01, fp
0fbac     0C 4E 85 F1 | 	sub	fp, #12
0fbb0     E8 D0 BF FD | 	call	#_convertstring
0fbb4     FD 14 02 F6 | 	mov	arg02, result1
0fbb8     10 13 02 F6 | 	mov	arg01, local02
0fbbc     04 96 B0 FD | 	call	#__system___string_cmp
0fbc0     01 FA 55 F2 | 	cmps	result1, #1 wc
0fbc4     00 1E 26 36 |  if_ae	not	local01, #0
0fbc8     A7 1E 62 FC | 	wrlong	local01, fp
0fbcc     04 00 90 FD | 	jmp	#LR__1223
0fbd0                 | LR__1222
0fbd0     A7 00 68 FC | 	wrlong	#0, fp
0fbd4                 | LR__1223
0fbd4     08 4E 05 F1 | 	add	fp, #8
0fbd8     A7 38 68 FC | 	wrlong	#28, fp
0fbdc     08 4E 85 F1 | 	sub	fp, #8
0fbe0     A7 12 02 F6 | 	mov	arg01, fp
0fbe4     E8 9D BF FD | 	call	#_push
0fbe8     A7 F0 03 F6 | 	mov	ptra, fp
0fbec     B2 00 A0 FD | 	call	#popregs_
0fbf0                 | _do_gt_ret
0fbf0     2D 00 64 FD | 	ret
0fbf4                 | 
0fbf4                 | ' 
0fbf4                 | ' sub do_lt
0fbf4                 | _do_lt
0fbf4     05 4A 05 F6 | 	mov	COUNT_, #5
0fbf8     A8 00 A0 FD | 	call	#pushregs_
0fbfc     18 F0 07 F1 | 	add	ptra, #24
0fc00     34 9D BF FD | 	call	#_pop
0fc04     FD 1E 02 F6 | 	mov	local01, result1
0fc08     FE 20 02 F6 | 	mov	local02, result2
0fc0c     FF 22 02 F6 | 	mov	local03, result3
0fc10     0C 4E 05 F1 | 	add	fp, #12
0fc14     A7 1E 62 FC | 	wrlong	local01, fp
0fc18     04 4E 05 F1 | 	add	fp, #4
0fc1c     A7 20 62 FC | 	wrlong	local02, fp
0fc20     04 4E 05 F1 | 	add	fp, #4
0fc24     A7 22 62 FC | 	wrlong	local03, fp
0fc28     14 4E 85 F1 | 	sub	fp, #20
0fc2c     08 9D BF FD | 	call	#_pop
0fc30     FF 22 02 F6 | 	mov	local03, result3
0fc34     A7 FA 61 FC | 	wrlong	result1, fp
0fc38     04 4E 05 F1 | 	add	fp, #4
0fc3c     A7 FC 61 FC | 	wrlong	result2, fp
0fc40     04 4E 05 F1 | 	add	fp, #4
0fc44     A7 22 62 FC | 	wrlong	local03, fp
0fc48                 | ' t2=pop()
0fc48                 | ' t1=pop()
0fc48                 | ' 
0fc48                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0fc48     08 4E 85 F1 | 	sub	fp, #8
0fc4c     1F 22 0E F2 | 	cmp	local03, #31 wz
0fc50     14 4E 05 A1 |  if_e	add	fp, #20
0fc54     A7 24 02 AB |  if_e	rdlong	local04, fp
0fc58     14 4E 85 A1 |  if_e	sub	fp, #20
0fc5c     12 23 02 A6 |  if_e	mov	local03, local04
0fc60     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fc64     28 00 90 5D |  if_ne	jmp	#LR__1230
0fc68     00 1E 06 F6 | 	mov	local01, #0
0fc6c     A7 12 02 FB | 	rdlong	arg01, fp
0fc70     0C 4E 05 F1 | 	add	fp, #12
0fc74     A7 14 02 FB | 	rdlong	arg02, fp
0fc78     0C 4E 85 F1 | 	sub	fp, #12
0fc7c     44 95 B0 FD | 	call	#__system___string_cmp
0fc80     00 FA 55 F2 | 	cmps	result1, #0 wc
0fc84     00 1E 26 C6 |  if_b	not	local01, #0
0fc88     A7 1E 62 FC | 	wrlong	local01, fp
0fc8c     0C 04 90 FD | 	jmp	#LR__1243
0fc90                 | LR__1230
0fc90                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0fc90     08 4E 05 F1 | 	add	fp, #8
0fc94     A7 1E 02 FB | 	rdlong	local01, fp
0fc98     08 4E 85 F1 | 	sub	fp, #8
0fc9c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fca0     14 4E 05 A1 |  if_e	add	fp, #20
0fca4     A7 24 02 AB |  if_e	rdlong	local04, fp
0fca8     14 4E 85 A1 |  if_e	sub	fp, #20
0fcac     12 23 02 A6 |  if_e	mov	local03, local04
0fcb0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fcb4     2C 00 90 5D |  if_ne	jmp	#LR__1231
0fcb8     00 1E 06 F6 | 	mov	local01, #0
0fcbc     A7 12 02 FB | 	rdlong	arg01, fp
0fcc0     0C 4E 05 F1 | 	add	fp, #12
0fcc4     A7 14 02 FB | 	rdlong	arg02, fp
0fcc8     0C 4E 85 F1 | 	sub	fp, #12
0fccc     01 16 06 F6 | 	mov	arg03, #1
0fcd0     E8 C3 B0 FD | 	call	#__system___float_cmp
0fcd4     00 FA 55 F2 | 	cmps	result1, #0 wc
0fcd8     00 1E 26 C6 |  if_b	not	local01, #0
0fcdc     A7 1E 62 FC | 	wrlong	local01, fp
0fce0     B8 03 90 FD | 	jmp	#LR__1243
0fce4                 | LR__1231
0fce4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0fce4     08 4E 05 F1 | 	add	fp, #8
0fce8     A7 1E 02 FB | 	rdlong	local01, fp
0fcec     08 4E 85 F1 | 	sub	fp, #8
0fcf0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fcf4     14 4E 05 A1 |  if_e	add	fp, #20
0fcf8     A7 24 02 AB |  if_e	rdlong	local04, fp
0fcfc     14 4E 85 A1 |  if_e	sub	fp, #20
0fd00     12 23 02 A6 |  if_e	mov	local03, local04
0fd04     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fd08     48 00 90 5D |  if_ne	jmp	#LR__1232
0fd0c     00 1E 06 F6 | 	mov	local01, #0
0fd10     A7 20 02 FB | 	rdlong	local02, fp
0fd14     0C 4E 05 F1 | 	add	fp, #12
0fd18     A7 12 02 FB | 	rdlong	arg01, fp
0fd1c     0C 4E 85 F1 | 	sub	fp, #12
0fd20     09 13 52 F6 | 	abs	arg01, arg01 wc
0fd24     1F 26 C6 C9 |  if_b	decod	local05, #31
0fd28     00 26 06 36 |  if_ae	mov	local05, #0
0fd2c     54 BB B0 FD | 	call	#__system___float_fromuns
0fd30     13 FB 61 F5 | 	xor	result1, local05
0fd34     FD 14 02 F6 | 	mov	arg02, result1
0fd38     10 13 02 F6 | 	mov	arg01, local02
0fd3c     01 16 06 F6 | 	mov	arg03, #1
0fd40     78 C3 B0 FD | 	call	#__system___float_cmp
0fd44     00 FA 55 F2 | 	cmps	result1, #0 wc
0fd48     00 1E 26 C6 |  if_b	not	local01, #0
0fd4c     A7 1E 62 FC | 	wrlong	local01, fp
0fd50     48 03 90 FD | 	jmp	#LR__1243
0fd54                 | LR__1232
0fd54                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0fd54     08 4E 05 F1 | 	add	fp, #8
0fd58     A7 1E 02 FB | 	rdlong	local01, fp
0fd5c     08 4E 85 F1 | 	sub	fp, #8
0fd60     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fd64     14 4E 05 A1 |  if_e	add	fp, #20
0fd68     A7 24 02 AB |  if_e	rdlong	local04, fp
0fd6c     14 4E 85 A1 |  if_e	sub	fp, #20
0fd70     12 23 02 A6 |  if_e	mov	local03, local04
0fd74     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fd78     38 00 90 5D |  if_ne	jmp	#LR__1233
0fd7c     00 1E 06 F6 | 	mov	local01, #0
0fd80     A7 20 02 FB | 	rdlong	local02, fp
0fd84     0C 4E 05 F1 | 	add	fp, #12
0fd88     A7 12 02 FB | 	rdlong	arg01, fp
0fd8c     0C 4E 85 F1 | 	sub	fp, #12
0fd90     F0 BA B0 FD | 	call	#__system___float_fromuns
0fd94     FD 14 02 F6 | 	mov	arg02, result1
0fd98     10 13 02 F6 | 	mov	arg01, local02
0fd9c     01 16 06 F6 | 	mov	arg03, #1
0fda0     18 C3 B0 FD | 	call	#__system___float_cmp
0fda4     00 FA 55 F2 | 	cmps	result1, #0 wc
0fda8     00 1E 26 C6 |  if_b	not	local01, #0
0fdac     A7 1E 62 FC | 	wrlong	local01, fp
0fdb0     E8 02 90 FD | 	jmp	#LR__1243
0fdb4                 | LR__1233
0fdb4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0fdb4     08 4E 05 F1 | 	add	fp, #8
0fdb8     A7 1E 02 FB | 	rdlong	local01, fp
0fdbc     08 4E 85 F1 | 	sub	fp, #8
0fdc0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fdc4     14 4E 05 A1 |  if_e	add	fp, #20
0fdc8     A7 24 02 AB |  if_e	rdlong	local04, fp
0fdcc     14 4E 85 A1 |  if_e	sub	fp, #20
0fdd0     12 23 02 A6 |  if_e	mov	local03, local04
0fdd4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fdd8     44 00 90 5D |  if_ne	jmp	#LR__1234
0fddc     00 1E 06 F6 | 	mov	local01, #0
0fde0     A7 12 02 FB | 	rdlong	arg01, fp
0fde4     09 13 52 F6 | 	abs	arg01, arg01 wc
0fde8     1F 26 C6 C9 |  if_b	decod	local05, #31
0fdec     00 26 06 36 |  if_ae	mov	local05, #0
0fdf0     90 BA B0 FD | 	call	#__system___float_fromuns
0fdf4     13 FB 61 F5 | 	xor	result1, local05
0fdf8     FD 12 02 F6 | 	mov	arg01, result1
0fdfc     0C 4E 05 F1 | 	add	fp, #12
0fe00     A7 14 02 FB | 	rdlong	arg02, fp
0fe04     0C 4E 85 F1 | 	sub	fp, #12
0fe08     01 16 06 F6 | 	mov	arg03, #1
0fe0c     AC C2 B0 FD | 	call	#__system___float_cmp
0fe10     00 FA 55 F2 | 	cmps	result1, #0 wc
0fe14     00 1E 26 C6 |  if_b	not	local01, #0
0fe18     A7 1E 62 FC | 	wrlong	local01, fp
0fe1c     7C 02 90 FD | 	jmp	#LR__1243
0fe20                 | LR__1234
0fe20                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0fe20     08 4E 05 F1 | 	add	fp, #8
0fe24     A7 1E 02 FB | 	rdlong	local01, fp
0fe28     08 4E 85 F1 | 	sub	fp, #8
0fe2c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fe30     14 4E 05 A1 |  if_e	add	fp, #20
0fe34     A7 24 02 AB |  if_e	rdlong	local04, fp
0fe38     14 4E 85 A1 |  if_e	sub	fp, #20
0fe3c     12 23 02 A6 |  if_e	mov	local03, local04
0fe40     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fe44     20 00 90 5D |  if_ne	jmp	#LR__1235
0fe48     A7 20 02 FB | 	rdlong	local02, fp
0fe4c     0C 4E 05 F1 | 	add	fp, #12
0fe50     A7 22 02 FB | 	rdlong	local03, fp
0fe54     0C 4E 85 F1 | 	sub	fp, #12
0fe58     11 21 52 F2 | 	cmps	local02, local03 wc
0fe5c     0F 1F A2 F1 | 	subx	local01, local01
0fe60     A7 1E 62 FC | 	wrlong	local01, fp
0fe64     34 02 90 FD | 	jmp	#LR__1243
0fe68                 | LR__1235
0fe68                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0fe68     08 4E 05 F1 | 	add	fp, #8
0fe6c     A7 1E 02 FB | 	rdlong	local01, fp
0fe70     08 4E 85 F1 | 	sub	fp, #8
0fe74     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fe78     14 4E 05 A1 |  if_e	add	fp, #20
0fe7c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fe80     14 4E 85 A1 |  if_e	sub	fp, #20
0fe84     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0fe88     20 00 90 5D |  if_ne	jmp	#LR__1236
0fe8c     A7 20 02 FB | 	rdlong	local02, fp
0fe90     0C 4E 05 F1 | 	add	fp, #12
0fe94     A7 22 02 FB | 	rdlong	local03, fp
0fe98     0C 4E 85 F1 | 	sub	fp, #12
0fe9c     11 21 52 F2 | 	cmps	local02, local03 wc
0fea0     0F 1F A2 F1 | 	subx	local01, local01
0fea4     A7 1E 62 FC | 	wrlong	local01, fp
0fea8     F0 01 90 FD | 	jmp	#LR__1243
0feac                 | LR__1236
0feac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0feac     08 4E 05 F1 | 	add	fp, #8
0feb0     A7 1E 02 FB | 	rdlong	local01, fp
0feb4     08 4E 85 F1 | 	sub	fp, #8
0feb8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0febc     14 4E 05 A1 |  if_e	add	fp, #20
0fec0     A7 22 02 AB |  if_e	rdlong	local03, fp
0fec4     14 4E 85 A1 |  if_e	sub	fp, #20
0fec8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fecc     34 00 90 5D |  if_ne	jmp	#LR__1237
0fed0     00 1E 06 F6 | 	mov	local01, #0
0fed4     A7 12 02 FB | 	rdlong	arg01, fp
0fed8     A8 B9 B0 FD | 	call	#__system___float_fromuns
0fedc     FD 12 02 F6 | 	mov	arg01, result1
0fee0     0C 4E 05 F1 | 	add	fp, #12
0fee4     A7 14 02 FB | 	rdlong	arg02, fp
0fee8     0C 4E 85 F1 | 	sub	fp, #12
0feec     01 16 06 F6 | 	mov	arg03, #1
0fef0     C8 C1 B0 FD | 	call	#__system___float_cmp
0fef4     00 FA 55 F2 | 	cmps	result1, #0 wc
0fef8     00 1E 26 C6 |  if_b	not	local01, #0
0fefc     A7 1E 62 FC | 	wrlong	local01, fp
0ff00     98 01 90 FD | 	jmp	#LR__1243
0ff04                 | LR__1237
0ff04                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0ff04     08 4E 05 F1 | 	add	fp, #8
0ff08     A7 1E 02 FB | 	rdlong	local01, fp
0ff0c     08 4E 85 F1 | 	sub	fp, #8
0ff10     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ff14     14 4E 05 A1 |  if_e	add	fp, #20
0ff18     A7 22 02 AB |  if_e	rdlong	local03, fp
0ff1c     14 4E 85 A1 |  if_e	sub	fp, #20
0ff20     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ff24     20 00 90 5D |  if_ne	jmp	#LR__1238
0ff28     A7 20 02 FB | 	rdlong	local02, fp
0ff2c     0C 4E 05 F1 | 	add	fp, #12
0ff30     A7 22 02 FB | 	rdlong	local03, fp
0ff34     0C 4E 85 F1 | 	sub	fp, #12
0ff38     11 21 52 F2 | 	cmps	local02, local03 wc
0ff3c     0F 1F A2 F1 | 	subx	local01, local01
0ff40     A7 1E 62 FC | 	wrlong	local01, fp
0ff44     54 01 90 FD | 	jmp	#LR__1243
0ff48                 | LR__1238
0ff48                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0ff48     08 4E 05 F1 | 	add	fp, #8
0ff4c     A7 1E 02 FB | 	rdlong	local01, fp
0ff50     08 4E 85 F1 | 	sub	fp, #8
0ff54     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ff58     14 4E 05 A1 |  if_e	add	fp, #20
0ff5c     A7 22 02 AB |  if_e	rdlong	local03, fp
0ff60     14 4E 85 A1 |  if_e	sub	fp, #20
0ff64     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ff68     20 00 90 5D |  if_ne	jmp	#LR__1239
0ff6c     A7 20 02 FB | 	rdlong	local02, fp
0ff70     0C 4E 05 F1 | 	add	fp, #12
0ff74     A7 22 02 FB | 	rdlong	local03, fp
0ff78     0C 4E 85 F1 | 	sub	fp, #12
0ff7c     11 21 12 F2 | 	cmp	local02, local03 wc
0ff80     0F 1F A2 F1 | 	subx	local01, local01
0ff84     A7 1E 62 FC | 	wrlong	local01, fp
0ff88     10 01 90 FD | 	jmp	#LR__1243
0ff8c                 | LR__1239
0ff8c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
0ff8c     08 4E 05 F1 | 	add	fp, #8
0ff90     A7 1E 02 FB | 	rdlong	local01, fp
0ff94     08 4E 85 F1 | 	sub	fp, #8
0ff98     2B 1E 0E F2 | 	cmp	local01, #43 wz
0ff9c     14 4E 05 A1 |  if_e	add	fp, #20
0ffa0     A7 22 02 AB |  if_e	rdlong	local03, fp
0ffa4     14 4E 85 A1 |  if_e	sub	fp, #20
0ffa8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0ffac     30 00 90 5D |  if_ne	jmp	#LR__1240
0ffb0     00 1E 06 F6 | 	mov	local01, #0
0ffb4     A7 12 02 FB | 	rdlong	arg01, fp
0ffb8     E0 CC BF FD | 	call	#_convertstring
0ffbc     FD 12 02 F6 | 	mov	arg01, result1
0ffc0     0C 4E 05 F1 | 	add	fp, #12
0ffc4     A7 14 02 FB | 	rdlong	arg02, fp
0ffc8     0C 4E 85 F1 | 	sub	fp, #12
0ffcc     F4 91 B0 FD | 	call	#__system___string_cmp
0ffd0     00 FA 55 F2 | 	cmps	result1, #0 wc
0ffd4     00 1E 26 C6 |  if_b	not	local01, #0
0ffd8     A7 1E 62 FC | 	wrlong	local01, fp
0ffdc     BC 00 90 FD | 	jmp	#LR__1243
0ffe0                 | LR__1240
0ffe0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
0ffe0     08 4E 05 F1 | 	add	fp, #8
0ffe4     A7 1E 02 FB | 	rdlong	local01, fp
0ffe8     08 4E 85 F1 | 	sub	fp, #8
0ffec     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fff0     14 4E 05 A1 |  if_e	add	fp, #20
0fff4     A7 22 02 AB |  if_e	rdlong	local03, fp
0fff8     14 4E 85 A1 |  if_e	sub	fp, #20
0fffc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10000     34 00 90 5D |  if_ne	jmp	#LR__1241
10004     00 1E 06 F6 | 	mov	local01, #0
10008     A7 20 02 FB | 	rdlong	local02, fp
1000c     0C 4E 05 F1 | 	add	fp, #12
10010     A7 12 02 FB | 	rdlong	arg01, fp
10014     0C 4E 85 F1 | 	sub	fp, #12
10018     80 CC BF FD | 	call	#_convertstring
1001c     FD 14 02 F6 | 	mov	arg02, result1
10020     10 13 02 F6 | 	mov	arg01, local02
10024     9C 91 B0 FD | 	call	#__system___string_cmp
10028     00 FA 55 F2 | 	cmps	result1, #0 wc
1002c     00 1E 26 C6 |  if_b	not	local01, #0
10030     A7 1E 62 FC | 	wrlong	local01, fp
10034     64 00 90 FD | 	jmp	#LR__1243
10038                 | LR__1241
10038                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
10038     08 4E 05 F1 | 	add	fp, #8
1003c     A7 1E 02 FB | 	rdlong	local01, fp
10040     08 4E 85 F1 | 	sub	fp, #8
10044     2B 1E 0E F2 | 	cmp	local01, #43 wz
10048     14 4E 05 A1 |  if_e	add	fp, #20
1004c     A7 22 02 AB |  if_e	rdlong	local03, fp
10050     14 4E 85 A1 |  if_e	sub	fp, #20
10054     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10058     3C 00 90 5D |  if_ne	jmp	#LR__1242
1005c     00 1E 06 F6 | 	mov	local01, #0
10060     A7 12 02 FB | 	rdlong	arg01, fp
10064     34 CC BF FD | 	call	#_convertstring
10068     FD 20 02 F6 | 	mov	local02, result1
1006c     0C 4E 05 F1 | 	add	fp, #12
10070     A7 12 02 FB | 	rdlong	arg01, fp
10074     0C 4E 85 F1 | 	sub	fp, #12
10078     20 CC BF FD | 	call	#_convertstring
1007c     FD 14 02 F6 | 	mov	arg02, result1
10080     10 13 02 F6 | 	mov	arg01, local02
10084     3C 91 B0 FD | 	call	#__system___string_cmp
10088     00 FA 55 F2 | 	cmps	result1, #0 wc
1008c     00 1E 26 C6 |  if_b	not	local01, #0
10090     A7 1E 62 FC | 	wrlong	local01, fp
10094     04 00 90 FD | 	jmp	#LR__1243
10098                 | LR__1242
10098     A7 00 68 FC | 	wrlong	#0, fp
1009c                 | LR__1243
1009c     08 4E 05 F1 | 	add	fp, #8
100a0     A7 38 68 FC | 	wrlong	#28, fp
100a4     08 4E 85 F1 | 	sub	fp, #8
100a8     A7 12 02 F6 | 	mov	arg01, fp
100ac     20 99 BF FD | 	call	#_push
100b0     A7 F0 03 F6 | 	mov	ptra, fp
100b4     B2 00 A0 FD | 	call	#popregs_
100b8                 | _do_lt_ret
100b8     2D 00 64 FD | 	ret
100bc                 | 
100bc                 | ' 
100bc                 | ' sub do_ge
100bc                 | _do_ge
100bc     05 4A 05 F6 | 	mov	COUNT_, #5
100c0     A8 00 A0 FD | 	call	#pushregs_
100c4     18 F0 07 F1 | 	add	ptra, #24
100c8     6C 98 BF FD | 	call	#_pop
100cc     FD 1E 02 F6 | 	mov	local01, result1
100d0     FE 20 02 F6 | 	mov	local02, result2
100d4     FF 22 02 F6 | 	mov	local03, result3
100d8     0C 4E 05 F1 | 	add	fp, #12
100dc     A7 1E 62 FC | 	wrlong	local01, fp
100e0     04 4E 05 F1 | 	add	fp, #4
100e4     A7 20 62 FC | 	wrlong	local02, fp
100e8     04 4E 05 F1 | 	add	fp, #4
100ec     A7 22 62 FC | 	wrlong	local03, fp
100f0     14 4E 85 F1 | 	sub	fp, #20
100f4     40 98 BF FD | 	call	#_pop
100f8     FF 22 02 F6 | 	mov	local03, result3
100fc     A7 FA 61 FC | 	wrlong	result1, fp
10100     04 4E 05 F1 | 	add	fp, #4
10104     A7 FC 61 FC | 	wrlong	result2, fp
10108     04 4E 05 F1 | 	add	fp, #4
1010c     A7 22 62 FC | 	wrlong	local03, fp
10110                 | ' t2=pop()
10110                 | ' t1=pop()
10110                 | ' 
10110                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
10110     08 4E 85 F1 | 	sub	fp, #8
10114     1F 22 0E F2 | 	cmp	local03, #31 wz
10118     14 4E 05 A1 |  if_e	add	fp, #20
1011c     A7 24 02 AB |  if_e	rdlong	local04, fp
10120     14 4E 85 A1 |  if_e	sub	fp, #20
10124     12 23 02 A6 |  if_e	mov	local03, local04
10128     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1012c     28 00 90 5D |  if_ne	jmp	#LR__1250
10130     00 1E 06 F6 | 	mov	local01, #0
10134     A7 12 02 FB | 	rdlong	arg01, fp
10138     0C 4E 05 F1 | 	add	fp, #12
1013c     A7 14 02 FB | 	rdlong	arg02, fp
10140     0C 4E 85 F1 | 	sub	fp, #12
10144     7C 90 B0 FD | 	call	#__system___string_cmp
10148     00 FA 55 F2 | 	cmps	result1, #0 wc
1014c     00 1E 26 36 |  if_ae	not	local01, #0
10150     A7 1E 62 FC | 	wrlong	local01, fp
10154     1C 04 90 FD | 	jmp	#LR__1263
10158                 | LR__1250
10158                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
10158     08 4E 05 F1 | 	add	fp, #8
1015c     A7 1E 02 FB | 	rdlong	local01, fp
10160     08 4E 85 F1 | 	sub	fp, #8
10164     1E 1E 0E F2 | 	cmp	local01, #30 wz
10168     14 4E 05 A1 |  if_e	add	fp, #20
1016c     A7 24 02 AB |  if_e	rdlong	local04, fp
10170     14 4E 85 A1 |  if_e	sub	fp, #20
10174     12 23 02 A6 |  if_e	mov	local03, local04
10178     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1017c     2C 00 90 5D |  if_ne	jmp	#LR__1251
10180     00 1E 06 F6 | 	mov	local01, #0
10184     A7 12 02 FB | 	rdlong	arg01, fp
10188     0C 4E 05 F1 | 	add	fp, #12
1018c     A7 14 02 FB | 	rdlong	arg02, fp
10190     0C 4E 85 F1 | 	sub	fp, #12
10194     01 16 66 F6 | 	neg	arg03, #1
10198     20 BF B0 FD | 	call	#__system___float_cmp
1019c     00 FA 55 F2 | 	cmps	result1, #0 wc
101a0     00 1E 26 36 |  if_ae	not	local01, #0
101a4     A7 1E 62 FC | 	wrlong	local01, fp
101a8     C8 03 90 FD | 	jmp	#LR__1263
101ac                 | LR__1251
101ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
101ac     08 4E 05 F1 | 	add	fp, #8
101b0     A7 1E 02 FB | 	rdlong	local01, fp
101b4     08 4E 85 F1 | 	sub	fp, #8
101b8     1E 1E 0E F2 | 	cmp	local01, #30 wz
101bc     14 4E 05 A1 |  if_e	add	fp, #20
101c0     A7 24 02 AB |  if_e	rdlong	local04, fp
101c4     14 4E 85 A1 |  if_e	sub	fp, #20
101c8     12 23 02 A6 |  if_e	mov	local03, local04
101cc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
101d0     48 00 90 5D |  if_ne	jmp	#LR__1252
101d4     00 1E 06 F6 | 	mov	local01, #0
101d8     A7 20 02 FB | 	rdlong	local02, fp
101dc     0C 4E 05 F1 | 	add	fp, #12
101e0     A7 12 02 FB | 	rdlong	arg01, fp
101e4     0C 4E 85 F1 | 	sub	fp, #12
101e8     09 13 52 F6 | 	abs	arg01, arg01 wc
101ec     1F 26 C6 C9 |  if_b	decod	local05, #31
101f0     00 26 06 36 |  if_ae	mov	local05, #0
101f4     8C B6 B0 FD | 	call	#__system___float_fromuns
101f8     13 FB 61 F5 | 	xor	result1, local05
101fc     FD 14 02 F6 | 	mov	arg02, result1
10200     10 13 02 F6 | 	mov	arg01, local02
10204     01 16 66 F6 | 	neg	arg03, #1
10208     B0 BE B0 FD | 	call	#__system___float_cmp
1020c     00 FA 55 F2 | 	cmps	result1, #0 wc
10210     00 1E 26 36 |  if_ae	not	local01, #0
10214     A7 1E 62 FC | 	wrlong	local01, fp
10218     58 03 90 FD | 	jmp	#LR__1263
1021c                 | LR__1252
1021c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1021c     08 4E 05 F1 | 	add	fp, #8
10220     A7 1E 02 FB | 	rdlong	local01, fp
10224     08 4E 85 F1 | 	sub	fp, #8
10228     1E 1E 0E F2 | 	cmp	local01, #30 wz
1022c     14 4E 05 A1 |  if_e	add	fp, #20
10230     A7 24 02 AB |  if_e	rdlong	local04, fp
10234     14 4E 85 A1 |  if_e	sub	fp, #20
10238     12 23 02 A6 |  if_e	mov	local03, local04
1023c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10240     38 00 90 5D |  if_ne	jmp	#LR__1253
10244     00 1E 06 F6 | 	mov	local01, #0
10248     A7 20 02 FB | 	rdlong	local02, fp
1024c     0C 4E 05 F1 | 	add	fp, #12
10250     A7 12 02 FB | 	rdlong	arg01, fp
10254     0C 4E 85 F1 | 	sub	fp, #12
10258     28 B6 B0 FD | 	call	#__system___float_fromuns
1025c     FD 14 02 F6 | 	mov	arg02, result1
10260     10 13 02 F6 | 	mov	arg01, local02
10264     01 16 66 F6 | 	neg	arg03, #1
10268     50 BE B0 FD | 	call	#__system___float_cmp
1026c     00 FA 55 F2 | 	cmps	result1, #0 wc
10270     00 1E 26 36 |  if_ae	not	local01, #0
10274     A7 1E 62 FC | 	wrlong	local01, fp
10278     F8 02 90 FD | 	jmp	#LR__1263
1027c                 | LR__1253
1027c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1027c     08 4E 05 F1 | 	add	fp, #8
10280     A7 1E 02 FB | 	rdlong	local01, fp
10284     08 4E 85 F1 | 	sub	fp, #8
10288     1C 1E 0E F2 | 	cmp	local01, #28 wz
1028c     14 4E 05 A1 |  if_e	add	fp, #20
10290     A7 24 02 AB |  if_e	rdlong	local04, fp
10294     14 4E 85 A1 |  if_e	sub	fp, #20
10298     12 23 02 A6 |  if_e	mov	local03, local04
1029c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
102a0     44 00 90 5D |  if_ne	jmp	#LR__1254
102a4     00 1E 06 F6 | 	mov	local01, #0
102a8     A7 12 02 FB | 	rdlong	arg01, fp
102ac     09 13 52 F6 | 	abs	arg01, arg01 wc
102b0     1F 26 C6 C9 |  if_b	decod	local05, #31
102b4     00 26 06 36 |  if_ae	mov	local05, #0
102b8     C8 B5 B0 FD | 	call	#__system___float_fromuns
102bc     13 FB 61 F5 | 	xor	result1, local05
102c0     FD 12 02 F6 | 	mov	arg01, result1
102c4     0C 4E 05 F1 | 	add	fp, #12
102c8     A7 14 02 FB | 	rdlong	arg02, fp
102cc     0C 4E 85 F1 | 	sub	fp, #12
102d0     01 16 66 F6 | 	neg	arg03, #1
102d4     E4 BD B0 FD | 	call	#__system___float_cmp
102d8     00 FA 55 F2 | 	cmps	result1, #0 wc
102dc     00 1E 26 36 |  if_ae	not	local01, #0
102e0     A7 1E 62 FC | 	wrlong	local01, fp
102e4     8C 02 90 FD | 	jmp	#LR__1263
102e8                 | LR__1254
102e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
102e8     08 4E 05 F1 | 	add	fp, #8
102ec     A7 1E 02 FB | 	rdlong	local01, fp
102f0     08 4E 85 F1 | 	sub	fp, #8
102f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
102f8     14 4E 05 A1 |  if_e	add	fp, #20
102fc     A7 24 02 AB |  if_e	rdlong	local04, fp
10300     14 4E 85 A1 |  if_e	sub	fp, #20
10304     12 23 02 A6 |  if_e	mov	local03, local04
10308     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1030c     24 00 90 5D |  if_ne	jmp	#LR__1255
10310     00 1E 06 F6 | 	mov	local01, #0
10314     A7 20 02 FB | 	rdlong	local02, fp
10318     0C 4E 05 F1 | 	add	fp, #12
1031c     A7 22 02 FB | 	rdlong	local03, fp
10320     0C 4E 85 F1 | 	sub	fp, #12
10324     11 21 52 F2 | 	cmps	local02, local03 wc
10328     01 1E 66 36 |  if_ae	neg	local01, #1
1032c     A7 1E 62 FC | 	wrlong	local01, fp
10330     40 02 90 FD | 	jmp	#LR__1263
10334                 | LR__1255
10334                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
10334     08 4E 05 F1 | 	add	fp, #8
10338     A7 1E 02 FB | 	rdlong	local01, fp
1033c     08 4E 85 F1 | 	sub	fp, #8
10340     1C 1E 0E F2 | 	cmp	local01, #28 wz
10344     14 4E 05 A1 |  if_e	add	fp, #20
10348     A7 24 02 AB |  if_e	rdlong	local04, fp
1034c     14 4E 85 A1 |  if_e	sub	fp, #20
10350     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10354     24 00 90 5D |  if_ne	jmp	#LR__1256
10358     00 1E 06 F6 | 	mov	local01, #0
1035c     A7 20 02 FB | 	rdlong	local02, fp
10360     0C 4E 05 F1 | 	add	fp, #12
10364     A7 22 02 FB | 	rdlong	local03, fp
10368     0C 4E 85 F1 | 	sub	fp, #12
1036c     11 21 52 F2 | 	cmps	local02, local03 wc
10370     01 1E 66 36 |  if_ae	neg	local01, #1
10374     A7 1E 62 FC | 	wrlong	local01, fp
10378     F8 01 90 FD | 	jmp	#LR__1263
1037c                 | LR__1256
1037c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1037c     08 4E 05 F1 | 	add	fp, #8
10380     A7 1E 02 FB | 	rdlong	local01, fp
10384     08 4E 85 F1 | 	sub	fp, #8
10388     1D 1E 0E F2 | 	cmp	local01, #29 wz
1038c     14 4E 05 A1 |  if_e	add	fp, #20
10390     A7 22 02 AB |  if_e	rdlong	local03, fp
10394     14 4E 85 A1 |  if_e	sub	fp, #20
10398     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1039c     34 00 90 5D |  if_ne	jmp	#LR__1257
103a0     00 1E 06 F6 | 	mov	local01, #0
103a4     A7 12 02 FB | 	rdlong	arg01, fp
103a8     D8 B4 B0 FD | 	call	#__system___float_fromuns
103ac     FD 12 02 F6 | 	mov	arg01, result1
103b0     0C 4E 05 F1 | 	add	fp, #12
103b4     A7 14 02 FB | 	rdlong	arg02, fp
103b8     0C 4E 85 F1 | 	sub	fp, #12
103bc     01 16 66 F6 | 	neg	arg03, #1
103c0     F8 BC B0 FD | 	call	#__system___float_cmp
103c4     00 FA 55 F2 | 	cmps	result1, #0 wc
103c8     00 1E 26 36 |  if_ae	not	local01, #0
103cc     A7 1E 62 FC | 	wrlong	local01, fp
103d0     A0 01 90 FD | 	jmp	#LR__1263
103d4                 | LR__1257
103d4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
103d4     08 4E 05 F1 | 	add	fp, #8
103d8     A7 1E 02 FB | 	rdlong	local01, fp
103dc     08 4E 85 F1 | 	sub	fp, #8
103e0     1D 1E 0E F2 | 	cmp	local01, #29 wz
103e4     14 4E 05 A1 |  if_e	add	fp, #20
103e8     A7 22 02 AB |  if_e	rdlong	local03, fp
103ec     14 4E 85 A1 |  if_e	sub	fp, #20
103f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
103f4     24 00 90 5D |  if_ne	jmp	#LR__1258
103f8     00 1E 06 F6 | 	mov	local01, #0
103fc     A7 20 02 FB | 	rdlong	local02, fp
10400     0C 4E 05 F1 | 	add	fp, #12
10404     A7 22 02 FB | 	rdlong	local03, fp
10408     0C 4E 85 F1 | 	sub	fp, #12
1040c     11 21 52 F2 | 	cmps	local02, local03 wc
10410     01 1E 66 36 |  if_ae	neg	local01, #1
10414     A7 1E 62 FC | 	wrlong	local01, fp
10418     58 01 90 FD | 	jmp	#LR__1263
1041c                 | LR__1258
1041c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1041c     08 4E 05 F1 | 	add	fp, #8
10420     A7 1E 02 FB | 	rdlong	local01, fp
10424     08 4E 85 F1 | 	sub	fp, #8
10428     1D 1E 0E F2 | 	cmp	local01, #29 wz
1042c     14 4E 05 A1 |  if_e	add	fp, #20
10430     A7 22 02 AB |  if_e	rdlong	local03, fp
10434     14 4E 85 A1 |  if_e	sub	fp, #20
10438     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1043c     24 00 90 5D |  if_ne	jmp	#LR__1259
10440     00 1E 06 F6 | 	mov	local01, #0
10444     A7 20 02 FB | 	rdlong	local02, fp
10448     0C 4E 05 F1 | 	add	fp, #12
1044c     A7 22 02 FB | 	rdlong	local03, fp
10450     0C 4E 85 F1 | 	sub	fp, #12
10454     11 21 12 F2 | 	cmp	local02, local03 wc
10458     01 1E 66 36 |  if_ae	neg	local01, #1
1045c     A7 1E 62 FC | 	wrlong	local01, fp
10460     10 01 90 FD | 	jmp	#LR__1263
10464                 | LR__1259
10464                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
10464     08 4E 05 F1 | 	add	fp, #8
10468     A7 1E 02 FB | 	rdlong	local01, fp
1046c     08 4E 85 F1 | 	sub	fp, #8
10470     2B 1E 0E F2 | 	cmp	local01, #43 wz
10474     14 4E 05 A1 |  if_e	add	fp, #20
10478     A7 22 02 AB |  if_e	rdlong	local03, fp
1047c     14 4E 85 A1 |  if_e	sub	fp, #20
10480     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10484     30 00 90 5D |  if_ne	jmp	#LR__1260
10488     00 1E 06 F6 | 	mov	local01, #0
1048c     A7 12 02 FB | 	rdlong	arg01, fp
10490     08 C8 BF FD | 	call	#_convertstring
10494     FD 12 02 F6 | 	mov	arg01, result1
10498     0C 4E 05 F1 | 	add	fp, #12
1049c     A7 14 02 FB | 	rdlong	arg02, fp
104a0     0C 4E 85 F1 | 	sub	fp, #12
104a4     1C 8D B0 FD | 	call	#__system___string_cmp
104a8     00 FA 55 F2 | 	cmps	result1, #0 wc
104ac     00 1E 26 36 |  if_ae	not	local01, #0
104b0     A7 1E 62 FC | 	wrlong	local01, fp
104b4     BC 00 90 FD | 	jmp	#LR__1263
104b8                 | LR__1260
104b8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
104b8     08 4E 05 F1 | 	add	fp, #8
104bc     A7 1E 02 FB | 	rdlong	local01, fp
104c0     08 4E 85 F1 | 	sub	fp, #8
104c4     1F 1E 0E F2 | 	cmp	local01, #31 wz
104c8     14 4E 05 A1 |  if_e	add	fp, #20
104cc     A7 22 02 AB |  if_e	rdlong	local03, fp
104d0     14 4E 85 A1 |  if_e	sub	fp, #20
104d4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
104d8     34 00 90 5D |  if_ne	jmp	#LR__1261
104dc     00 1E 06 F6 | 	mov	local01, #0
104e0     A7 20 02 FB | 	rdlong	local02, fp
104e4     0C 4E 05 F1 | 	add	fp, #12
104e8     A7 12 02 FB | 	rdlong	arg01, fp
104ec     0C 4E 85 F1 | 	sub	fp, #12
104f0     A8 C7 BF FD | 	call	#_convertstring
104f4     FD 14 02 F6 | 	mov	arg02, result1
104f8     10 13 02 F6 | 	mov	arg01, local02
104fc     C4 8C B0 FD | 	call	#__system___string_cmp
10500     00 FA 55 F2 | 	cmps	result1, #0 wc
10504     00 1E 26 36 |  if_ae	not	local01, #0
10508     A7 1E 62 FC | 	wrlong	local01, fp
1050c     64 00 90 FD | 	jmp	#LR__1263
10510                 | LR__1261
10510                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
10510     08 4E 05 F1 | 	add	fp, #8
10514     A7 1E 02 FB | 	rdlong	local01, fp
10518     08 4E 85 F1 | 	sub	fp, #8
1051c     2B 1E 0E F2 | 	cmp	local01, #43 wz
10520     14 4E 05 A1 |  if_e	add	fp, #20
10524     A7 22 02 AB |  if_e	rdlong	local03, fp
10528     14 4E 85 A1 |  if_e	sub	fp, #20
1052c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10530     3C 00 90 5D |  if_ne	jmp	#LR__1262
10534     00 1E 06 F6 | 	mov	local01, #0
10538     A7 12 02 FB | 	rdlong	arg01, fp
1053c     5C C7 BF FD | 	call	#_convertstring
10540     FD 20 02 F6 | 	mov	local02, result1
10544     0C 4E 05 F1 | 	add	fp, #12
10548     A7 12 02 FB | 	rdlong	arg01, fp
1054c     0C 4E 85 F1 | 	sub	fp, #12
10550     48 C7 BF FD | 	call	#_convertstring
10554     FD 14 02 F6 | 	mov	arg02, result1
10558     10 13 02 F6 | 	mov	arg01, local02
1055c     64 8C B0 FD | 	call	#__system___string_cmp
10560     00 FA 55 F2 | 	cmps	result1, #0 wc
10564     00 1E 26 36 |  if_ae	not	local01, #0
10568     A7 1E 62 FC | 	wrlong	local01, fp
1056c     04 00 90 FD | 	jmp	#LR__1263
10570                 | LR__1262
10570     A7 00 68 FC | 	wrlong	#0, fp
10574                 | LR__1263
10574     08 4E 05 F1 | 	add	fp, #8
10578     A7 38 68 FC | 	wrlong	#28, fp
1057c     08 4E 85 F1 | 	sub	fp, #8
10580     A7 12 02 F6 | 	mov	arg01, fp
10584     48 94 BF FD | 	call	#_push
10588     A7 F0 03 F6 | 	mov	ptra, fp
1058c     B2 00 A0 FD | 	call	#popregs_
10590                 | _do_ge_ret
10590     2D 00 64 FD | 	ret
10594                 | 
10594                 | ' 
10594                 | ' sub do_le
10594                 | _do_le
10594     05 4A 05 F6 | 	mov	COUNT_, #5
10598     A8 00 A0 FD | 	call	#pushregs_
1059c     18 F0 07 F1 | 	add	ptra, #24
105a0     94 93 BF FD | 	call	#_pop
105a4     FD 1E 02 F6 | 	mov	local01, result1
105a8     FE 20 02 F6 | 	mov	local02, result2
105ac     FF 22 02 F6 | 	mov	local03, result3
105b0     0C 4E 05 F1 | 	add	fp, #12
105b4     A7 1E 62 FC | 	wrlong	local01, fp
105b8     04 4E 05 F1 | 	add	fp, #4
105bc     A7 20 62 FC | 	wrlong	local02, fp
105c0     04 4E 05 F1 | 	add	fp, #4
105c4     A7 22 62 FC | 	wrlong	local03, fp
105c8     14 4E 85 F1 | 	sub	fp, #20
105cc     68 93 BF FD | 	call	#_pop
105d0     FF 22 02 F6 | 	mov	local03, result3
105d4     A7 FA 61 FC | 	wrlong	result1, fp
105d8     04 4E 05 F1 | 	add	fp, #4
105dc     A7 FC 61 FC | 	wrlong	result2, fp
105e0     04 4E 05 F1 | 	add	fp, #4
105e4     A7 22 62 FC | 	wrlong	local03, fp
105e8                 | ' t2=pop()
105e8                 | ' t1=pop()
105e8                 | ' 
105e8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
105e8     08 4E 85 F1 | 	sub	fp, #8
105ec     1F 22 0E F2 | 	cmp	local03, #31 wz
105f0     14 4E 05 A1 |  if_e	add	fp, #20
105f4     A7 24 02 AB |  if_e	rdlong	local04, fp
105f8     14 4E 85 A1 |  if_e	sub	fp, #20
105fc     12 23 02 A6 |  if_e	mov	local03, local04
10600     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10604     28 00 90 5D |  if_ne	jmp	#LR__1270
10608     00 1E 06 F6 | 	mov	local01, #0
1060c     A7 12 02 FB | 	rdlong	arg01, fp
10610     0C 4E 05 F1 | 	add	fp, #12
10614     A7 14 02 FB | 	rdlong	arg02, fp
10618     0C 4E 85 F1 | 	sub	fp, #12
1061c     A4 8B B0 FD | 	call	#__system___string_cmp
10620     01 FA 55 F2 | 	cmps	result1, #1 wc
10624     00 1E 26 C6 |  if_b	not	local01, #0
10628     A7 1E 62 FC | 	wrlong	local01, fp
1062c     1C 04 90 FD | 	jmp	#LR__1283
10630                 | LR__1270
10630                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
10630     08 4E 05 F1 | 	add	fp, #8
10634     A7 1E 02 FB | 	rdlong	local01, fp
10638     08 4E 85 F1 | 	sub	fp, #8
1063c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10640     14 4E 05 A1 |  if_e	add	fp, #20
10644     A7 24 02 AB |  if_e	rdlong	local04, fp
10648     14 4E 85 A1 |  if_e	sub	fp, #20
1064c     12 23 02 A6 |  if_e	mov	local03, local04
10650     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10654     2C 00 90 5D |  if_ne	jmp	#LR__1271
10658     00 1E 06 F6 | 	mov	local01, #0
1065c     A7 12 02 FB | 	rdlong	arg01, fp
10660     0C 4E 05 F1 | 	add	fp, #12
10664     A7 14 02 FB | 	rdlong	arg02, fp
10668     0C 4E 85 F1 | 	sub	fp, #12
1066c     01 16 06 F6 | 	mov	arg03, #1
10670     48 BA B0 FD | 	call	#__system___float_cmp
10674     01 FA 55 F2 | 	cmps	result1, #1 wc
10678     00 1E 26 C6 |  if_b	not	local01, #0
1067c     A7 1E 62 FC | 	wrlong	local01, fp
10680     C8 03 90 FD | 	jmp	#LR__1283
10684                 | LR__1271
10684                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
10684     08 4E 05 F1 | 	add	fp, #8
10688     A7 1E 02 FB | 	rdlong	local01, fp
1068c     08 4E 85 F1 | 	sub	fp, #8
10690     1E 1E 0E F2 | 	cmp	local01, #30 wz
10694     14 4E 05 A1 |  if_e	add	fp, #20
10698     A7 24 02 AB |  if_e	rdlong	local04, fp
1069c     14 4E 85 A1 |  if_e	sub	fp, #20
106a0     12 23 02 A6 |  if_e	mov	local03, local04
106a4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
106a8     48 00 90 5D |  if_ne	jmp	#LR__1272
106ac     00 1E 06 F6 | 	mov	local01, #0
106b0     A7 20 02 FB | 	rdlong	local02, fp
106b4     0C 4E 05 F1 | 	add	fp, #12
106b8     A7 12 02 FB | 	rdlong	arg01, fp
106bc     0C 4E 85 F1 | 	sub	fp, #12
106c0     09 13 52 F6 | 	abs	arg01, arg01 wc
106c4     1F 26 C6 C9 |  if_b	decod	local05, #31
106c8     00 26 06 36 |  if_ae	mov	local05, #0
106cc     B4 B1 B0 FD | 	call	#__system___float_fromuns
106d0     13 FB 61 F5 | 	xor	result1, local05
106d4     FD 14 02 F6 | 	mov	arg02, result1
106d8     10 13 02 F6 | 	mov	arg01, local02
106dc     01 16 06 F6 | 	mov	arg03, #1
106e0     D8 B9 B0 FD | 	call	#__system___float_cmp
106e4     01 FA 55 F2 | 	cmps	result1, #1 wc
106e8     00 1E 26 C6 |  if_b	not	local01, #0
106ec     A7 1E 62 FC | 	wrlong	local01, fp
106f0     58 03 90 FD | 	jmp	#LR__1283
106f4                 | LR__1272
106f4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
106f4     08 4E 05 F1 | 	add	fp, #8
106f8     A7 1E 02 FB | 	rdlong	local01, fp
106fc     08 4E 85 F1 | 	sub	fp, #8
10700     1E 1E 0E F2 | 	cmp	local01, #30 wz
10704     14 4E 05 A1 |  if_e	add	fp, #20
10708     A7 24 02 AB |  if_e	rdlong	local04, fp
1070c     14 4E 85 A1 |  if_e	sub	fp, #20
10710     12 23 02 A6 |  if_e	mov	local03, local04
10714     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10718     38 00 90 5D |  if_ne	jmp	#LR__1273
1071c     00 1E 06 F6 | 	mov	local01, #0
10720     A7 20 02 FB | 	rdlong	local02, fp
10724     0C 4E 05 F1 | 	add	fp, #12
10728     A7 12 02 FB | 	rdlong	arg01, fp
1072c     0C 4E 85 F1 | 	sub	fp, #12
10730     50 B1 B0 FD | 	call	#__system___float_fromuns
10734     FD 14 02 F6 | 	mov	arg02, result1
10738     10 13 02 F6 | 	mov	arg01, local02
1073c     01 16 06 F6 | 	mov	arg03, #1
10740     78 B9 B0 FD | 	call	#__system___float_cmp
10744     01 FA 55 F2 | 	cmps	result1, #1 wc
10748     00 1E 26 C6 |  if_b	not	local01, #0
1074c     A7 1E 62 FC | 	wrlong	local01, fp
10750     F8 02 90 FD | 	jmp	#LR__1283
10754                 | LR__1273
10754                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
10754     08 4E 05 F1 | 	add	fp, #8
10758     A7 1E 02 FB | 	rdlong	local01, fp
1075c     08 4E 85 F1 | 	sub	fp, #8
10760     1C 1E 0E F2 | 	cmp	local01, #28 wz
10764     14 4E 05 A1 |  if_e	add	fp, #20
10768     A7 24 02 AB |  if_e	rdlong	local04, fp
1076c     14 4E 85 A1 |  if_e	sub	fp, #20
10770     12 23 02 A6 |  if_e	mov	local03, local04
10774     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10778     44 00 90 5D |  if_ne	jmp	#LR__1274
1077c     00 1E 06 F6 | 	mov	local01, #0
10780     A7 12 02 FB | 	rdlong	arg01, fp
10784     09 13 52 F6 | 	abs	arg01, arg01 wc
10788     1F 26 C6 C9 |  if_b	decod	local05, #31
1078c     00 26 06 36 |  if_ae	mov	local05, #0
10790     F0 B0 B0 FD | 	call	#__system___float_fromuns
10794     13 FB 61 F5 | 	xor	result1, local05
10798     FD 12 02 F6 | 	mov	arg01, result1
1079c     0C 4E 05 F1 | 	add	fp, #12
107a0     A7 14 02 FB | 	rdlong	arg02, fp
107a4     0C 4E 85 F1 | 	sub	fp, #12
107a8     01 16 06 F6 | 	mov	arg03, #1
107ac     0C B9 B0 FD | 	call	#__system___float_cmp
107b0     01 FA 55 F2 | 	cmps	result1, #1 wc
107b4     00 1E 26 C6 |  if_b	not	local01, #0
107b8     A7 1E 62 FC | 	wrlong	local01, fp
107bc     8C 02 90 FD | 	jmp	#LR__1283
107c0                 | LR__1274
107c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
107c0     08 4E 05 F1 | 	add	fp, #8
107c4     A7 1E 02 FB | 	rdlong	local01, fp
107c8     08 4E 85 F1 | 	sub	fp, #8
107cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
107d0     14 4E 05 A1 |  if_e	add	fp, #20
107d4     A7 24 02 AB |  if_e	rdlong	local04, fp
107d8     14 4E 85 A1 |  if_e	sub	fp, #20
107dc     12 23 02 A6 |  if_e	mov	local03, local04
107e0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
107e4     24 00 90 5D |  if_ne	jmp	#LR__1275
107e8     00 1E 06 F6 | 	mov	local01, #0
107ec     A7 20 02 FB | 	rdlong	local02, fp
107f0     0C 4E 05 F1 | 	add	fp, #12
107f4     A7 22 02 FB | 	rdlong	local03, fp
107f8     0C 4E 85 F1 | 	sub	fp, #12
107fc     11 21 5A F2 | 	cmps	local02, local03 wcz
10800     01 1E 66 E6 |  if_be	neg	local01, #1
10804     A7 1E 62 FC | 	wrlong	local01, fp
10808     40 02 90 FD | 	jmp	#LR__1283
1080c                 | LR__1275
1080c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1080c     08 4E 05 F1 | 	add	fp, #8
10810     A7 1E 02 FB | 	rdlong	local01, fp
10814     08 4E 85 F1 | 	sub	fp, #8
10818     1C 1E 0E F2 | 	cmp	local01, #28 wz
1081c     14 4E 05 A1 |  if_e	add	fp, #20
10820     A7 24 02 AB |  if_e	rdlong	local04, fp
10824     14 4E 85 A1 |  if_e	sub	fp, #20
10828     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1082c     24 00 90 5D |  if_ne	jmp	#LR__1276
10830     00 1E 06 F6 | 	mov	local01, #0
10834     A7 20 02 FB | 	rdlong	local02, fp
10838     0C 4E 05 F1 | 	add	fp, #12
1083c     A7 22 02 FB | 	rdlong	local03, fp
10840     0C 4E 85 F1 | 	sub	fp, #12
10844     11 21 5A F2 | 	cmps	local02, local03 wcz
10848     01 1E 66 E6 |  if_be	neg	local01, #1
1084c     A7 1E 62 FC | 	wrlong	local01, fp
10850     F8 01 90 FD | 	jmp	#LR__1283
10854                 | LR__1276
10854                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
10854     08 4E 05 F1 | 	add	fp, #8
10858     A7 1E 02 FB | 	rdlong	local01, fp
1085c     08 4E 85 F1 | 	sub	fp, #8
10860     1D 1E 0E F2 | 	cmp	local01, #29 wz
10864     14 4E 05 A1 |  if_e	add	fp, #20
10868     A7 22 02 AB |  if_e	rdlong	local03, fp
1086c     14 4E 85 A1 |  if_e	sub	fp, #20
10870     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10874     34 00 90 5D |  if_ne	jmp	#LR__1277
10878     00 1E 06 F6 | 	mov	local01, #0
1087c     A7 12 02 FB | 	rdlong	arg01, fp
10880     00 B0 B0 FD | 	call	#__system___float_fromuns
10884     FD 12 02 F6 | 	mov	arg01, result1
10888     0C 4E 05 F1 | 	add	fp, #12
1088c     A7 14 02 FB | 	rdlong	arg02, fp
10890     0C 4E 85 F1 | 	sub	fp, #12
10894     01 16 06 F6 | 	mov	arg03, #1
10898     20 B8 B0 FD | 	call	#__system___float_cmp
1089c     01 FA 55 F2 | 	cmps	result1, #1 wc
108a0     00 1E 26 C6 |  if_b	not	local01, #0
108a4     A7 1E 62 FC | 	wrlong	local01, fp
108a8     A0 01 90 FD | 	jmp	#LR__1283
108ac                 | LR__1277
108ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
108ac     08 4E 05 F1 | 	add	fp, #8
108b0     A7 1E 02 FB | 	rdlong	local01, fp
108b4     08 4E 85 F1 | 	sub	fp, #8
108b8     1D 1E 0E F2 | 	cmp	local01, #29 wz
108bc     14 4E 05 A1 |  if_e	add	fp, #20
108c0     A7 22 02 AB |  if_e	rdlong	local03, fp
108c4     14 4E 85 A1 |  if_e	sub	fp, #20
108c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
108cc     24 00 90 5D |  if_ne	jmp	#LR__1278
108d0     00 1E 06 F6 | 	mov	local01, #0
108d4     A7 20 02 FB | 	rdlong	local02, fp
108d8     0C 4E 05 F1 | 	add	fp, #12
108dc     A7 22 02 FB | 	rdlong	local03, fp
108e0     0C 4E 85 F1 | 	sub	fp, #12
108e4     11 21 5A F2 | 	cmps	local02, local03 wcz
108e8     01 1E 66 E6 |  if_be	neg	local01, #1
108ec     A7 1E 62 FC | 	wrlong	local01, fp
108f0     58 01 90 FD | 	jmp	#LR__1283
108f4                 | LR__1278
108f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
108f4     08 4E 05 F1 | 	add	fp, #8
108f8     A7 1E 02 FB | 	rdlong	local01, fp
108fc     08 4E 85 F1 | 	sub	fp, #8
10900     1D 1E 0E F2 | 	cmp	local01, #29 wz
10904     14 4E 05 A1 |  if_e	add	fp, #20
10908     A7 22 02 AB |  if_e	rdlong	local03, fp
1090c     14 4E 85 A1 |  if_e	sub	fp, #20
10910     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10914     24 00 90 5D |  if_ne	jmp	#LR__1279
10918     00 1E 06 F6 | 	mov	local01, #0
1091c     A7 20 02 FB | 	rdlong	local02, fp
10920     0C 4E 05 F1 | 	add	fp, #12
10924     A7 22 02 FB | 	rdlong	local03, fp
10928     0C 4E 85 F1 | 	sub	fp, #12
1092c     11 21 1A F2 | 	cmp	local02, local03 wcz
10930     01 1E 66 E6 |  if_be	neg	local01, #1
10934     A7 1E 62 FC | 	wrlong	local01, fp
10938     10 01 90 FD | 	jmp	#LR__1283
1093c                 | LR__1279
1093c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1093c     08 4E 05 F1 | 	add	fp, #8
10940     A7 1E 02 FB | 	rdlong	local01, fp
10944     08 4E 85 F1 | 	sub	fp, #8
10948     2B 1E 0E F2 | 	cmp	local01, #43 wz
1094c     14 4E 05 A1 |  if_e	add	fp, #20
10950     A7 22 02 AB |  if_e	rdlong	local03, fp
10954     14 4E 85 A1 |  if_e	sub	fp, #20
10958     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1095c     30 00 90 5D |  if_ne	jmp	#LR__1280
10960     00 1E 06 F6 | 	mov	local01, #0
10964     A7 12 02 FB | 	rdlong	arg01, fp
10968     30 C3 BF FD | 	call	#_convertstring
1096c     FD 12 02 F6 | 	mov	arg01, result1
10970     0C 4E 05 F1 | 	add	fp, #12
10974     A7 14 02 FB | 	rdlong	arg02, fp
10978     0C 4E 85 F1 | 	sub	fp, #12
1097c     44 88 B0 FD | 	call	#__system___string_cmp
10980     01 FA 55 F2 | 	cmps	result1, #1 wc
10984     00 1E 26 C6 |  if_b	not	local01, #0
10988     A7 1E 62 FC | 	wrlong	local01, fp
1098c     BC 00 90 FD | 	jmp	#LR__1283
10990                 | LR__1280
10990                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
10990     08 4E 05 F1 | 	add	fp, #8
10994     A7 1E 02 FB | 	rdlong	local01, fp
10998     08 4E 85 F1 | 	sub	fp, #8
1099c     1F 1E 0E F2 | 	cmp	local01, #31 wz
109a0     14 4E 05 A1 |  if_e	add	fp, #20
109a4     A7 22 02 AB |  if_e	rdlong	local03, fp
109a8     14 4E 85 A1 |  if_e	sub	fp, #20
109ac     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
109b0     34 00 90 5D |  if_ne	jmp	#LR__1281
109b4     00 1E 06 F6 | 	mov	local01, #0
109b8     A7 20 02 FB | 	rdlong	local02, fp
109bc     0C 4E 05 F1 | 	add	fp, #12
109c0     A7 12 02 FB | 	rdlong	arg01, fp
109c4     0C 4E 85 F1 | 	sub	fp, #12
109c8     D0 C2 BF FD | 	call	#_convertstring
109cc     FD 14 02 F6 | 	mov	arg02, result1
109d0     10 13 02 F6 | 	mov	arg01, local02
109d4     EC 87 B0 FD | 	call	#__system___string_cmp
109d8     01 FA 55 F2 | 	cmps	result1, #1 wc
109dc     00 1E 26 C6 |  if_b	not	local01, #0
109e0     A7 1E 62 FC | 	wrlong	local01, fp
109e4     64 00 90 FD | 	jmp	#LR__1283
109e8                 | LR__1281
109e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
109e8     08 4E 05 F1 | 	add	fp, #8
109ec     A7 1E 02 FB | 	rdlong	local01, fp
109f0     08 4E 85 F1 | 	sub	fp, #8
109f4     2B 1E 0E F2 | 	cmp	local01, #43 wz
109f8     14 4E 05 A1 |  if_e	add	fp, #20
109fc     A7 22 02 AB |  if_e	rdlong	local03, fp
10a00     14 4E 85 A1 |  if_e	sub	fp, #20
10a04     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10a08     3C 00 90 5D |  if_ne	jmp	#LR__1282
10a0c     00 1E 06 F6 | 	mov	local01, #0
10a10     A7 12 02 FB | 	rdlong	arg01, fp
10a14     84 C2 BF FD | 	call	#_convertstring
10a18     FD 20 02 F6 | 	mov	local02, result1
10a1c     0C 4E 05 F1 | 	add	fp, #12
10a20     A7 12 02 FB | 	rdlong	arg01, fp
10a24     0C 4E 85 F1 | 	sub	fp, #12
10a28     70 C2 BF FD | 	call	#_convertstring
10a2c     FD 14 02 F6 | 	mov	arg02, result1
10a30     10 13 02 F6 | 	mov	arg01, local02
10a34     8C 87 B0 FD | 	call	#__system___string_cmp
10a38     01 FA 55 F2 | 	cmps	result1, #1 wc
10a3c     00 1E 26 C6 |  if_b	not	local01, #0
10a40     A7 1E 62 FC | 	wrlong	local01, fp
10a44     04 00 90 FD | 	jmp	#LR__1283
10a48                 | LR__1282
10a48     A7 00 68 FC | 	wrlong	#0, fp
10a4c                 | LR__1283
10a4c     08 4E 05 F1 | 	add	fp, #8
10a50     A7 38 68 FC | 	wrlong	#28, fp
10a54     08 4E 85 F1 | 	sub	fp, #8
10a58     A7 12 02 F6 | 	mov	arg01, fp
10a5c     70 8F BF FD | 	call	#_push
10a60     A7 F0 03 F6 | 	mov	ptra, fp
10a64     B2 00 A0 FD | 	call	#popregs_
10a68                 | _do_le_ret
10a68     2D 00 64 FD | 	ret
10a6c                 | 
10a6c                 | ' 
10a6c                 | ' 
10a6c                 | ' sub do_ne
10a6c                 | _do_ne
10a6c     05 4A 05 F6 | 	mov	COUNT_, #5
10a70     A8 00 A0 FD | 	call	#pushregs_
10a74     18 F0 07 F1 | 	add	ptra, #24
10a78     BC 8E BF FD | 	call	#_pop
10a7c     FD 1E 02 F6 | 	mov	local01, result1
10a80     FE 20 02 F6 | 	mov	local02, result2
10a84     FF 22 02 F6 | 	mov	local03, result3
10a88     0C 4E 05 F1 | 	add	fp, #12
10a8c     A7 1E 62 FC | 	wrlong	local01, fp
10a90     04 4E 05 F1 | 	add	fp, #4
10a94     A7 20 62 FC | 	wrlong	local02, fp
10a98     04 4E 05 F1 | 	add	fp, #4
10a9c     A7 22 62 FC | 	wrlong	local03, fp
10aa0     14 4E 85 F1 | 	sub	fp, #20
10aa4     90 8E BF FD | 	call	#_pop
10aa8     FF 22 02 F6 | 	mov	local03, result3
10aac     A7 FA 61 FC | 	wrlong	result1, fp
10ab0     04 4E 05 F1 | 	add	fp, #4
10ab4     A7 FC 61 FC | 	wrlong	result2, fp
10ab8     04 4E 05 F1 | 	add	fp, #4
10abc     A7 22 62 FC | 	wrlong	local03, fp
10ac0                 | ' t2=pop()
10ac0                 | ' t1=pop()
10ac0                 | ' 
10ac0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
10ac0     08 4E 85 F1 | 	sub	fp, #8
10ac4     1F 22 0E F2 | 	cmp	local03, #31 wz
10ac8     14 4E 05 A1 |  if_e	add	fp, #20
10acc     A7 24 02 AB |  if_e	rdlong	local04, fp
10ad0     14 4E 85 A1 |  if_e	sub	fp, #20
10ad4     12 23 02 A6 |  if_e	mov	local03, local04
10ad8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10adc     28 00 90 5D |  if_ne	jmp	#LR__1290
10ae0     00 1E 06 F6 | 	mov	local01, #0
10ae4     A7 12 02 FB | 	rdlong	arg01, fp
10ae8     0C 4E 05 F1 | 	add	fp, #12
10aec     A7 14 02 FB | 	rdlong	arg02, fp
10af0     0C 4E 85 F1 | 	sub	fp, #12
10af4     CC 86 B0 FD | 	call	#__system___string_cmp
10af8     00 FA 0D F2 | 	cmp	result1, #0 wz
10afc     00 1E 26 56 |  if_ne	not	local01, #0
10b00     A7 1E 62 FC | 	wrlong	local01, fp
10b04     1C 04 90 FD | 	jmp	#LR__1303
10b08                 | LR__1290
10b08                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
10b08     08 4E 05 F1 | 	add	fp, #8
10b0c     A7 1E 02 FB | 	rdlong	local01, fp
10b10     08 4E 85 F1 | 	sub	fp, #8
10b14     1E 1E 0E F2 | 	cmp	local01, #30 wz
10b18     14 4E 05 A1 |  if_e	add	fp, #20
10b1c     A7 24 02 AB |  if_e	rdlong	local04, fp
10b20     14 4E 85 A1 |  if_e	sub	fp, #20
10b24     12 23 02 A6 |  if_e	mov	local03, local04
10b28     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10b2c     2C 00 90 5D |  if_ne	jmp	#LR__1291
10b30     00 1E 06 F6 | 	mov	local01, #0
10b34     A7 12 02 FB | 	rdlong	arg01, fp
10b38     0C 4E 05 F1 | 	add	fp, #12
10b3c     A7 14 02 FB | 	rdlong	arg02, fp
10b40     0C 4E 85 F1 | 	sub	fp, #12
10b44     01 16 06 F6 | 	mov	arg03, #1
10b48     70 B5 B0 FD | 	call	#__system___float_cmp
10b4c     00 FA 0D F2 | 	cmp	result1, #0 wz
10b50     00 1E 26 56 |  if_ne	not	local01, #0
10b54     A7 1E 62 FC | 	wrlong	local01, fp
10b58     C8 03 90 FD | 	jmp	#LR__1303
10b5c                 | LR__1291
10b5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
10b5c     08 4E 05 F1 | 	add	fp, #8
10b60     A7 1E 02 FB | 	rdlong	local01, fp
10b64     08 4E 85 F1 | 	sub	fp, #8
10b68     1E 1E 0E F2 | 	cmp	local01, #30 wz
10b6c     14 4E 05 A1 |  if_e	add	fp, #20
10b70     A7 24 02 AB |  if_e	rdlong	local04, fp
10b74     14 4E 85 A1 |  if_e	sub	fp, #20
10b78     12 23 02 A6 |  if_e	mov	local03, local04
10b7c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10b80     48 00 90 5D |  if_ne	jmp	#LR__1292
10b84     00 1E 06 F6 | 	mov	local01, #0
10b88     A7 20 02 FB | 	rdlong	local02, fp
10b8c     0C 4E 05 F1 | 	add	fp, #12
10b90     A7 12 02 FB | 	rdlong	arg01, fp
10b94     0C 4E 85 F1 | 	sub	fp, #12
10b98     09 13 52 F6 | 	abs	arg01, arg01 wc
10b9c     1F 26 C6 C9 |  if_b	decod	local05, #31
10ba0     00 26 06 36 |  if_ae	mov	local05, #0
10ba4     DC AC B0 FD | 	call	#__system___float_fromuns
10ba8     13 FB 61 F5 | 	xor	result1, local05
10bac     FD 14 02 F6 | 	mov	arg02, result1
10bb0     10 13 02 F6 | 	mov	arg01, local02
10bb4     01 16 06 F6 | 	mov	arg03, #1
10bb8     00 B5 B0 FD | 	call	#__system___float_cmp
10bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
10bc0     00 1E 26 56 |  if_ne	not	local01, #0
10bc4     A7 1E 62 FC | 	wrlong	local01, fp
10bc8     58 03 90 FD | 	jmp	#LR__1303
10bcc                 | LR__1292
10bcc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
10bcc     08 4E 05 F1 | 	add	fp, #8
10bd0     A7 1E 02 FB | 	rdlong	local01, fp
10bd4     08 4E 85 F1 | 	sub	fp, #8
10bd8     1E 1E 0E F2 | 	cmp	local01, #30 wz
10bdc     14 4E 05 A1 |  if_e	add	fp, #20
10be0     A7 24 02 AB |  if_e	rdlong	local04, fp
10be4     14 4E 85 A1 |  if_e	sub	fp, #20
10be8     12 23 02 A6 |  if_e	mov	local03, local04
10bec     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10bf0     38 00 90 5D |  if_ne	jmp	#LR__1293
10bf4     00 1E 06 F6 | 	mov	local01, #0
10bf8     A7 20 02 FB | 	rdlong	local02, fp
10bfc     0C 4E 05 F1 | 	add	fp, #12
10c00     A7 12 02 FB | 	rdlong	arg01, fp
10c04     0C 4E 85 F1 | 	sub	fp, #12
10c08     78 AC B0 FD | 	call	#__system___float_fromuns
10c0c     FD 14 02 F6 | 	mov	arg02, result1
10c10     10 13 02 F6 | 	mov	arg01, local02
10c14     01 16 06 F6 | 	mov	arg03, #1
10c18     A0 B4 B0 FD | 	call	#__system___float_cmp
10c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
10c20     00 1E 26 56 |  if_ne	not	local01, #0
10c24     A7 1E 62 FC | 	wrlong	local01, fp
10c28     F8 02 90 FD | 	jmp	#LR__1303
10c2c                 | LR__1293
10c2c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
10c2c     08 4E 05 F1 | 	add	fp, #8
10c30     A7 1E 02 FB | 	rdlong	local01, fp
10c34     08 4E 85 F1 | 	sub	fp, #8
10c38     1C 1E 0E F2 | 	cmp	local01, #28 wz
10c3c     14 4E 05 A1 |  if_e	add	fp, #20
10c40     A7 24 02 AB |  if_e	rdlong	local04, fp
10c44     14 4E 85 A1 |  if_e	sub	fp, #20
10c48     12 23 02 A6 |  if_e	mov	local03, local04
10c4c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10c50     44 00 90 5D |  if_ne	jmp	#LR__1294
10c54     00 1E 06 F6 | 	mov	local01, #0
10c58     A7 12 02 FB | 	rdlong	arg01, fp
10c5c     09 13 52 F6 | 	abs	arg01, arg01 wc
10c60     1F 26 C6 C9 |  if_b	decod	local05, #31
10c64     00 26 06 36 |  if_ae	mov	local05, #0
10c68     18 AC B0 FD | 	call	#__system___float_fromuns
10c6c     13 FB 61 F5 | 	xor	result1, local05
10c70     FD 12 02 F6 | 	mov	arg01, result1
10c74     0C 4E 05 F1 | 	add	fp, #12
10c78     A7 14 02 FB | 	rdlong	arg02, fp
10c7c     0C 4E 85 F1 | 	sub	fp, #12
10c80     01 16 06 F6 | 	mov	arg03, #1
10c84     34 B4 B0 FD | 	call	#__system___float_cmp
10c88     00 FA 0D F2 | 	cmp	result1, #0 wz
10c8c     00 1E 26 56 |  if_ne	not	local01, #0
10c90     A7 1E 62 FC | 	wrlong	local01, fp
10c94     8C 02 90 FD | 	jmp	#LR__1303
10c98                 | LR__1294
10c98                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
10c98     08 4E 05 F1 | 	add	fp, #8
10c9c     A7 1E 02 FB | 	rdlong	local01, fp
10ca0     08 4E 85 F1 | 	sub	fp, #8
10ca4     1C 1E 0E F2 | 	cmp	local01, #28 wz
10ca8     14 4E 05 A1 |  if_e	add	fp, #20
10cac     A7 24 02 AB |  if_e	rdlong	local04, fp
10cb0     14 4E 85 A1 |  if_e	sub	fp, #20
10cb4     12 23 02 A6 |  if_e	mov	local03, local04
10cb8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10cbc     24 00 90 5D |  if_ne	jmp	#LR__1295
10cc0     00 1E 06 F6 | 	mov	local01, #0
10cc4     A7 20 02 FB | 	rdlong	local02, fp
10cc8     0C 4E 05 F1 | 	add	fp, #12
10ccc     A7 22 02 FB | 	rdlong	local03, fp
10cd0     0C 4E 85 F1 | 	sub	fp, #12
10cd4     11 21 0A F2 | 	cmp	local02, local03 wz
10cd8     01 1E 66 56 |  if_ne	neg	local01, #1
10cdc     A7 1E 62 FC | 	wrlong	local01, fp
10ce0     40 02 90 FD | 	jmp	#LR__1303
10ce4                 | LR__1295
10ce4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
10ce4     08 4E 05 F1 | 	add	fp, #8
10ce8     A7 1E 02 FB | 	rdlong	local01, fp
10cec     08 4E 85 F1 | 	sub	fp, #8
10cf0     1C 1E 0E F2 | 	cmp	local01, #28 wz
10cf4     14 4E 05 A1 |  if_e	add	fp, #20
10cf8     A7 24 02 AB |  if_e	rdlong	local04, fp
10cfc     14 4E 85 A1 |  if_e	sub	fp, #20
10d00     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10d04     24 00 90 5D |  if_ne	jmp	#LR__1296
10d08     00 1E 06 F6 | 	mov	local01, #0
10d0c     A7 20 02 FB | 	rdlong	local02, fp
10d10     0C 4E 05 F1 | 	add	fp, #12
10d14     A7 22 02 FB | 	rdlong	local03, fp
10d18     0C 4E 85 F1 | 	sub	fp, #12
10d1c     11 21 0A F2 | 	cmp	local02, local03 wz
10d20     01 1E 66 56 |  if_ne	neg	local01, #1
10d24     A7 1E 62 FC | 	wrlong	local01, fp
10d28     F8 01 90 FD | 	jmp	#LR__1303
10d2c                 | LR__1296
10d2c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
10d2c     08 4E 05 F1 | 	add	fp, #8
10d30     A7 1E 02 FB | 	rdlong	local01, fp
10d34     08 4E 85 F1 | 	sub	fp, #8
10d38     1D 1E 0E F2 | 	cmp	local01, #29 wz
10d3c     14 4E 05 A1 |  if_e	add	fp, #20
10d40     A7 22 02 AB |  if_e	rdlong	local03, fp
10d44     14 4E 85 A1 |  if_e	sub	fp, #20
10d48     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10d4c     34 00 90 5D |  if_ne	jmp	#LR__1297
10d50     00 1E 06 F6 | 	mov	local01, #0
10d54     A7 12 02 FB | 	rdlong	arg01, fp
10d58     28 AB B0 FD | 	call	#__system___float_fromuns
10d5c     FD 12 02 F6 | 	mov	arg01, result1
10d60     0C 4E 05 F1 | 	add	fp, #12
10d64     A7 14 02 FB | 	rdlong	arg02, fp
10d68     0C 4E 85 F1 | 	sub	fp, #12
10d6c     01 16 06 F6 | 	mov	arg03, #1
10d70     48 B3 B0 FD | 	call	#__system___float_cmp
10d74     00 FA 0D F2 | 	cmp	result1, #0 wz
10d78     00 1E 26 56 |  if_ne	not	local01, #0
10d7c     A7 1E 62 FC | 	wrlong	local01, fp
10d80     A0 01 90 FD | 	jmp	#LR__1303
10d84                 | LR__1297
10d84                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
10d84     08 4E 05 F1 | 	add	fp, #8
10d88     A7 1E 02 FB | 	rdlong	local01, fp
10d8c     08 4E 85 F1 | 	sub	fp, #8
10d90     1D 1E 0E F2 | 	cmp	local01, #29 wz
10d94     14 4E 05 A1 |  if_e	add	fp, #20
10d98     A7 22 02 AB |  if_e	rdlong	local03, fp
10d9c     14 4E 85 A1 |  if_e	sub	fp, #20
10da0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10da4     24 00 90 5D |  if_ne	jmp	#LR__1298
10da8     00 1E 06 F6 | 	mov	local01, #0
10dac     A7 20 02 FB | 	rdlong	local02, fp
10db0     0C 4E 05 F1 | 	add	fp, #12
10db4     A7 22 02 FB | 	rdlong	local03, fp
10db8     0C 4E 85 F1 | 	sub	fp, #12
10dbc     11 21 0A F2 | 	cmp	local02, local03 wz
10dc0     01 1E 66 56 |  if_ne	neg	local01, #1
10dc4     A7 1E 62 FC | 	wrlong	local01, fp
10dc8     58 01 90 FD | 	jmp	#LR__1303
10dcc                 | LR__1298
10dcc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
10dcc     08 4E 05 F1 | 	add	fp, #8
10dd0     A7 1E 02 FB | 	rdlong	local01, fp
10dd4     08 4E 85 F1 | 	sub	fp, #8
10dd8     1D 1E 0E F2 | 	cmp	local01, #29 wz
10ddc     14 4E 05 A1 |  if_e	add	fp, #20
10de0     A7 22 02 AB |  if_e	rdlong	local03, fp
10de4     14 4E 85 A1 |  if_e	sub	fp, #20
10de8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10dec     24 00 90 5D |  if_ne	jmp	#LR__1299
10df0     00 1E 06 F6 | 	mov	local01, #0
10df4     A7 20 02 FB | 	rdlong	local02, fp
10df8     0C 4E 05 F1 | 	add	fp, #12
10dfc     A7 22 02 FB | 	rdlong	local03, fp
10e00     0C 4E 85 F1 | 	sub	fp, #12
10e04     11 21 0A F2 | 	cmp	local02, local03 wz
10e08     01 1E 66 56 |  if_ne	neg	local01, #1
10e0c     A7 1E 62 FC | 	wrlong	local01, fp
10e10     10 01 90 FD | 	jmp	#LR__1303
10e14                 | LR__1299
10e14                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
10e14     08 4E 05 F1 | 	add	fp, #8
10e18     A7 1E 02 FB | 	rdlong	local01, fp
10e1c     08 4E 85 F1 | 	sub	fp, #8
10e20     2B 1E 0E F2 | 	cmp	local01, #43 wz
10e24     14 4E 05 A1 |  if_e	add	fp, #20
10e28     A7 22 02 AB |  if_e	rdlong	local03, fp
10e2c     14 4E 85 A1 |  if_e	sub	fp, #20
10e30     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10e34     30 00 90 5D |  if_ne	jmp	#LR__1300
10e38     00 1E 06 F6 | 	mov	local01, #0
10e3c     A7 12 02 FB | 	rdlong	arg01, fp
10e40     58 BE BF FD | 	call	#_convertstring
10e44     FD 12 02 F6 | 	mov	arg01, result1
10e48     0C 4E 05 F1 | 	add	fp, #12
10e4c     A7 14 02 FB | 	rdlong	arg02, fp
10e50     0C 4E 85 F1 | 	sub	fp, #12
10e54     6C 83 B0 FD | 	call	#__system___string_cmp
10e58     00 FA 0D F2 | 	cmp	result1, #0 wz
10e5c     00 1E 26 56 |  if_ne	not	local01, #0
10e60     A7 1E 62 FC | 	wrlong	local01, fp
10e64     BC 00 90 FD | 	jmp	#LR__1303
10e68                 | LR__1300
10e68                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
10e68     08 4E 05 F1 | 	add	fp, #8
10e6c     A7 1E 02 FB | 	rdlong	local01, fp
10e70     08 4E 85 F1 | 	sub	fp, #8
10e74     1F 1E 0E F2 | 	cmp	local01, #31 wz
10e78     14 4E 05 A1 |  if_e	add	fp, #20
10e7c     A7 22 02 AB |  if_e	rdlong	local03, fp
10e80     14 4E 85 A1 |  if_e	sub	fp, #20
10e84     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10e88     34 00 90 5D |  if_ne	jmp	#LR__1301
10e8c     00 1E 06 F6 | 	mov	local01, #0
10e90     A7 20 02 FB | 	rdlong	local02, fp
10e94     0C 4E 05 F1 | 	add	fp, #12
10e98     A7 12 02 FB | 	rdlong	arg01, fp
10e9c     0C 4E 85 F1 | 	sub	fp, #12
10ea0     F8 BD BF FD | 	call	#_convertstring
10ea4     FD 14 02 F6 | 	mov	arg02, result1
10ea8     10 13 02 F6 | 	mov	arg01, local02
10eac     14 83 B0 FD | 	call	#__system___string_cmp
10eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
10eb4     00 1E 26 56 |  if_ne	not	local01, #0
10eb8     A7 1E 62 FC | 	wrlong	local01, fp
10ebc     64 00 90 FD | 	jmp	#LR__1303
10ec0                 | LR__1301
10ec0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
10ec0     08 4E 05 F1 | 	add	fp, #8
10ec4     A7 1E 02 FB | 	rdlong	local01, fp
10ec8     08 4E 85 F1 | 	sub	fp, #8
10ecc     2B 1E 0E F2 | 	cmp	local01, #43 wz
10ed0     14 4E 05 A1 |  if_e	add	fp, #20
10ed4     A7 22 02 AB |  if_e	rdlong	local03, fp
10ed8     14 4E 85 A1 |  if_e	sub	fp, #20
10edc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10ee0     3C 00 90 5D |  if_ne	jmp	#LR__1302
10ee4     00 1E 06 F6 | 	mov	local01, #0
10ee8     A7 12 02 FB | 	rdlong	arg01, fp
10eec     AC BD BF FD | 	call	#_convertstring
10ef0     FD 20 02 F6 | 	mov	local02, result1
10ef4     0C 4E 05 F1 | 	add	fp, #12
10ef8     A7 12 02 FB | 	rdlong	arg01, fp
10efc     0C 4E 85 F1 | 	sub	fp, #12
10f00     98 BD BF FD | 	call	#_convertstring
10f04     FD 14 02 F6 | 	mov	arg02, result1
10f08     10 13 02 F6 | 	mov	arg01, local02
10f0c     B4 82 B0 FD | 	call	#__system___string_cmp
10f10     00 FA 0D F2 | 	cmp	result1, #0 wz
10f14     00 1E 26 56 |  if_ne	not	local01, #0
10f18     A7 1E 62 FC | 	wrlong	local01, fp
10f1c     04 00 90 FD | 	jmp	#LR__1303
10f20                 | LR__1302
10f20     A7 00 68 FC | 	wrlong	#0, fp
10f24                 | LR__1303
10f24     08 4E 05 F1 | 	add	fp, #8
10f28     A7 38 68 FC | 	wrlong	#28, fp
10f2c     08 4E 85 F1 | 	sub	fp, #8
10f30     A7 12 02 F6 | 	mov	arg01, fp
10f34     98 8A BF FD | 	call	#_push
10f38     A7 F0 03 F6 | 	mov	ptra, fp
10f3c     B2 00 A0 FD | 	call	#popregs_
10f40                 | _do_ne_ret
10f40     2D 00 64 FD | 	ret
10f44                 | 
10f44                 | ' 
10f44                 | ' 
10f44                 | ' 
10f44                 | ' ' -------------------   convert a variable on the top of stack to integer
10f44                 | ' 
10f44                 | ' sub do_converttoint
10f44                 | _do_converttoint
10f44     02 4A 05 F6 | 	mov	COUNT_, #2
10f48     A8 00 A0 FD | 	call	#pushregs_
10f4c     18 F0 07 F1 | 	add	ptra, #24
10f50     E4 89 BF FD | 	call	#_pop
10f54     FE 1E 02 F6 | 	mov	local01, result2
10f58     FF 20 02 F6 | 	mov	local02, result3
10f5c     A7 FA 61 FC | 	wrlong	result1, fp
10f60     04 4E 05 F1 | 	add	fp, #4
10f64     A7 1E 62 FC | 	wrlong	local01, fp
10f68     04 4E 05 F1 | 	add	fp, #4
10f6c     A7 20 62 FC | 	wrlong	local02, fp
10f70                 | ' t1=pop() 
10f70                 | ' select case t1.result_type
10f70     08 4E 85 F1 | 	sub	fp, #8
10f74     1C 20 0E F2 | 	cmp	local02, #28 wz
10f78     2C 00 90 AD |  if_e	jmp	#LR__1310
10f7c     1D 20 0E F2 | 	cmp	local02, #29 wz
10f80     40 00 90 AD |  if_e	jmp	#LR__1311
10f84     1E 20 0E F2 | 	cmp	local02, #30 wz
10f88     54 00 90 AD |  if_e	jmp	#LR__1312
10f8c     1F 20 0E F2 | 	cmp	local02, #31 wz
10f90     70 00 90 AD |  if_e	jmp	#LR__1313
10f94     2B 20 0E F2 | 	cmp	local02, #43 wz
10f98     94 00 90 AD |  if_e	jmp	#LR__1314
10f9c     FF 20 0E F2 | 	cmp	local02, #255 wz
10fa0     C0 00 90 AD |  if_e	jmp	#LR__1315
10fa4     DC 00 90 FD | 	jmp	#LR__1316
10fa8                 | LR__1310
10fa8     A7 20 02 FB | 	rdlong	local02, fp
10fac     0C 4E 05 F1 | 	add	fp, #12
10fb0     A7 20 62 FC | 	wrlong	local02, fp
10fb4     04 4E 05 F1 | 	add	fp, #4
10fb8     A7 38 68 FC | 	wrlong	#28, fp
10fbc     10 4E 85 F1 | 	sub	fp, #16
10fc0     D4 00 90 FD | 	jmp	#LR__1317
10fc4                 | LR__1311
10fc4     A7 20 02 FB | 	rdlong	local02, fp
10fc8     0C 4E 05 F1 | 	add	fp, #12
10fcc     A7 20 62 FC | 	wrlong	local02, fp
10fd0     04 4E 05 F1 | 	add	fp, #4
10fd4     A7 38 68 FC | 	wrlong	#28, fp
10fd8     10 4E 85 F1 | 	sub	fp, #16
10fdc     B8 00 90 FD | 	jmp	#LR__1317
10fe0                 | LR__1312
10fe0     A7 12 02 FB | 	rdlong	arg01, fp
10fe4     01 14 06 F6 | 	mov	arg02, #1
10fe8     64 B1 B0 FD | 	call	#__system___float_tointeger
10fec     0C 4E 05 F1 | 	add	fp, #12
10ff0     A7 FA 61 FC | 	wrlong	result1, fp
10ff4     04 4E 05 F1 | 	add	fp, #4
10ff8     A7 38 68 FC | 	wrlong	#28, fp
10ffc     10 4E 85 F1 | 	sub	fp, #16
11000     94 00 90 FD | 	jmp	#LR__1317
11004                 | LR__1313
11004     A7 12 02 FB | 	rdlong	arg01, fp
11008     64 B4 B0 FD | 	call	#__system____builtin_atof
1100c     FD 12 02 F6 | 	mov	arg01, result1
11010     00 14 06 F6 | 	mov	arg02, #0
11014     38 B1 B0 FD | 	call	#__system___float_tointeger
11018     0C 4E 05 F1 | 	add	fp, #12
1101c     A7 FA 61 FC | 	wrlong	result1, fp
11020     04 4E 05 F1 | 	add	fp, #4
11024     A7 38 68 FC | 	wrlong	#28, fp
11028     10 4E 85 F1 | 	sub	fp, #16
1102c     68 00 90 FD | 	jmp	#LR__1317
11030                 | LR__1314
11030     A7 12 02 FB | 	rdlong	arg01, fp
11034     64 BC BF FD | 	call	#_convertstring
11038     FD 12 02 F6 | 	mov	arg01, result1
1103c     30 B4 B0 FD | 	call	#__system____builtin_atof
11040     FD 12 02 F6 | 	mov	arg01, result1
11044     00 14 06 F6 | 	mov	arg02, #0
11048     04 B1 B0 FD | 	call	#__system___float_tointeger
1104c     0C 4E 05 F1 | 	add	fp, #12
11050     A7 FA 61 FC | 	wrlong	result1, fp
11054     04 4E 05 F1 | 	add	fp, #4
11058     A7 38 68 FC | 	wrlong	#28, fp
1105c     10 4E 85 F1 | 	sub	fp, #16
11060     34 00 90 FD | 	jmp	#LR__1317
11064                 | LR__1315
11064     0C 4E 05 F1 | 	add	fp, #12
11068     A7 00 68 FC | 	wrlong	#0, fp
1106c     0C 4E 85 F1 | 	sub	fp, #12
11070     A7 20 02 FB | 	rdlong	local02, fp
11074     10 4E 05 F1 | 	add	fp, #16
11078     A7 20 62 FC | 	wrlong	local02, fp
1107c     10 4E 85 F1 | 	sub	fp, #16
11080     14 00 90 FD | 	jmp	#LR__1317
11084                 | LR__1316
11084     0C 4E 05 F1 | 	add	fp, #12
11088     A7 00 68 FC | 	wrlong	#0, fp
1108c     04 4E 05 F1 | 	add	fp, #4
11090     A7 02 68 FC | 	wrlong	#1, fp
11094     10 4E 85 F1 | 	sub	fp, #16
11098                 | LR__1317
11098     0C 4E 05 F1 | 	add	fp, #12
1109c     A7 20 02 FB | 	rdlong	local02, fp
110a0     0C 4E 85 F1 | 	sub	fp, #12
110a4     A7 20 62 FC | 	wrlong	local02, fp
110a8     10 4E 05 F1 | 	add	fp, #16
110ac     A7 20 02 FB | 	rdlong	local02, fp
110b0     08 4E 85 F1 | 	sub	fp, #8
110b4     A7 20 62 FC | 	wrlong	local02, fp
110b8     08 4E 85 F1 | 	sub	fp, #8
110bc     A7 12 02 F6 | 	mov	arg01, fp
110c0     0C 89 BF FD | 	call	#_push
110c4     A7 F0 03 F6 | 	mov	ptra, fp
110c8     B2 00 A0 FD | 	call	#popregs_
110cc                 | _do_converttoint_ret
110cc     2D 00 64 FD | 	ret
110d0                 | 
110d0                 | ' 
110d0                 | ' function converttoint (t1 as expr_result) as integer
110d0                 | _converttoint
110d0     02 4A 05 F6 | 	mov	COUNT_, #2
110d4     A8 00 A0 FD | 	call	#pushregs_
110d8     09 1F 02 F6 | 	mov	local01, arg01
110dc                 | ' 
110dc                 | ' select case t1.result_type
110dc     08 1E 06 F1 | 	add	local01, #8
110e0     0F 21 02 FB | 	rdlong	local02, local01
110e4     08 1E 86 F1 | 	sub	local01, #8
110e8     1C 20 0E F2 | 	cmp	local02, #28 wz
110ec     24 00 90 AD |  if_e	jmp	#LR__1320
110f0     1D 20 0E F2 | 	cmp	local02, #29 wz
110f4     24 00 90 AD |  if_e	jmp	#LR__1321
110f8     1E 20 0E F2 | 	cmp	local02, #30 wz
110fc     24 00 90 AD |  if_e	jmp	#LR__1322
11100     1F 20 0E F2 | 	cmp	local02, #31 wz
11104     2C 00 90 AD |  if_e	jmp	#LR__1323
11108     2B 20 0E F2 | 	cmp	local02, #43 wz
1110c     3C 00 90 AD |  if_e	jmp	#LR__1324
11110     58 00 90 FD | 	jmp	#LR__1325
11114                 | LR__1320
11114     0F FB 01 FB | 	rdlong	result1, local01
11118     54 00 90 FD | 	jmp	#LR__1326
1111c                 | LR__1321
1111c     0F FB 01 FB | 	rdlong	result1, local01
11120     4C 00 90 FD | 	jmp	#LR__1326
11124                 | LR__1322
11124     0F 13 02 FB | 	rdlong	arg01, local01
11128     01 14 06 F6 | 	mov	arg02, #1
1112c     20 B0 B0 FD | 	call	#__system___float_tointeger
11130     3C 00 90 FD | 	jmp	#LR__1326
11134                 | LR__1323
11134     0F 13 02 FB | 	rdlong	arg01, local01
11138     34 B3 B0 FD | 	call	#__system____builtin_atof
1113c     FD 12 02 F6 | 	mov	arg01, result1
11140     00 14 06 F6 | 	mov	arg02, #0
11144     08 B0 B0 FD | 	call	#__system___float_tointeger
11148     24 00 90 FD | 	jmp	#LR__1326
1114c                 | LR__1324
1114c     0F 13 02 FB | 	rdlong	arg01, local01
11150     48 BB BF FD | 	call	#_convertstring
11154     FD 12 02 F6 | 	mov	arg01, result1
11158     14 B3 B0 FD | 	call	#__system____builtin_atof
1115c     FD 12 02 F6 | 	mov	arg01, result1
11160     00 14 06 F6 | 	mov	arg02, #0
11164     E8 AF B0 FD | 	call	#__system___float_tointeger
11168     04 00 90 FD | 	jmp	#LR__1326
1116c                 | LR__1325
1116c     00 FA 05 F6 | 	mov	result1, #0
11170                 | LR__1326
11170     A7 F0 03 F6 | 	mov	ptra, fp
11174     B2 00 A0 FD | 	call	#popregs_
11178                 | _converttoint_ret
11178     2D 00 64 FD | 	ret
1117c                 | 
1117c                 | ' 
1117c                 | ' function converttofloat (t1 as expr_result) as single
1117c                 | _converttofloat
1117c     03 4A 05 F6 | 	mov	COUNT_, #3
11180     A8 00 A0 FD | 	call	#pushregs_
11184     09 1F 02 F6 | 	mov	local01, arg01
11188                 | ' 
11188                 | ' select case t1.result_type
11188     08 1E 06 F1 | 	add	local01, #8
1118c     0F 21 02 FB | 	rdlong	local02, local01
11190     08 1E 86 F1 | 	sub	local01, #8
11194     1C 20 0E F2 | 	cmp	local02, #28 wz
11198     24 00 90 AD |  if_e	jmp	#LR__1330
1119c     1D 20 0E F2 | 	cmp	local02, #29 wz
111a0     38 00 90 AD |  if_e	jmp	#LR__1331
111a4     1E 20 0E F2 | 	cmp	local02, #30 wz
111a8     3C 00 90 AD |  if_e	jmp	#LR__1332
111ac     1F 20 0E F2 | 	cmp	local02, #31 wz
111b0     3C 00 90 AD |  if_e	jmp	#LR__1333
111b4     2B 20 0E F2 | 	cmp	local02, #43 wz
111b8     40 00 90 AD |  if_e	jmp	#LR__1334
111bc     50 00 90 FD | 	jmp	#LR__1335
111c0                 | LR__1330
111c0     0F 13 02 FB | 	rdlong	arg01, local01
111c4     09 13 52 F6 | 	abs	arg01, arg01 wc
111c8     1F 22 C6 C9 |  if_b	decod	local03, #31
111cc     00 22 06 36 |  if_ae	mov	local03, #0
111d0     B0 A6 B0 FD | 	call	#__system___float_fromuns
111d4     11 FB 61 F5 | 	xor	result1, local03
111d8     38 00 90 FD | 	jmp	#LR__1336
111dc                 | LR__1331
111dc     0F 13 02 FB | 	rdlong	arg01, local01
111e0     A0 A6 B0 FD | 	call	#__system___float_fromuns
111e4     2C 00 90 FD | 	jmp	#LR__1336
111e8                 | LR__1332
111e8     0F FB 01 FB | 	rdlong	result1, local01
111ec     24 00 90 FD | 	jmp	#LR__1336
111f0                 | LR__1333
111f0     0F 13 02 FB | 	rdlong	arg01, local01
111f4     78 B2 B0 FD | 	call	#__system____builtin_atof
111f8     18 00 90 FD | 	jmp	#LR__1336
111fc                 | LR__1334
111fc     0F 13 02 FB | 	rdlong	arg01, local01
11200     98 BA BF FD | 	call	#_convertstring
11204     FD 12 02 F6 | 	mov	arg01, result1
11208     64 B2 B0 FD | 	call	#__system____builtin_atof
1120c     04 00 90 FD | 	jmp	#LR__1336
11210                 | LR__1335
11210     00 FA 05 F6 | 	mov	result1, #0
11214                 | LR__1336
11214     A7 F0 03 F6 | 	mov	ptra, fp
11218     B2 00 A0 FD | 	call	#popregs_
1121c                 | _converttofloat_ret
1121c     2D 00 64 FD | 	ret
11220                 | 
11220                 | ' 
11220                 | ' sub do_rnd
11220                 | _do_rnd
11220     01 4A 05 F6 | 	mov	COUNT_, #1
11224     A8 00 A0 FD | 	call	#pushregs_
11228     10 F0 07 F1 | 	add	ptra, #16
1122c     69 00 00 FF 
11230     44 E5 05 F1 | 	add	objptr, ##54084
11234     F2 1E 02 FB | 	rdlong	local01, objptr
11238     0F 17 02 F6 | 	mov	arg03, local01
1123c     01 16 66 F0 | 	shl	arg03, #1
11240     0F 17 02 F1 | 	add	arg03, local01
11244     02 16 66 F0 | 	shl	arg03, #2
11248     03 00 00 FF 
1124c     04 E4 85 F1 | 	sub	objptr, ##1540
11250     F2 16 02 F1 | 	add	arg03, objptr
11254     0B 17 02 FB | 	rdlong	arg03, arg03
11258     0C 4E 05 F1 | 	add	fp, #12
1125c     A7 16 62 FC | 	wrlong	arg03, fp
11260                 | ' 
11260                 | ' numpar=compiledline(lineptr_e).result.uresult
11260                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
11260     0C 4E 85 F1 | 	sub	fp, #12
11264     02 16 16 F2 | 	cmp	arg03, #2 wc
11268     66 00 00 FF 
1126c     40 E5 85 F1 | 	sub	objptr, ##52544
11270     3C 00 90 CD |  if_b	jmp	#LR__1340
11274     00 12 06 F6 | 	mov	arg01, #0
11278     24 D8 B0 FD | 	call	#__system___getiolock_0425
1127c     FD 12 02 F6 | 	mov	arg01, result1
11280     18 7F B0 FD | 	call	#__system___lockmem
11284     46 01 00 FF 
11288     3F 14 06 F6 | 	mov	arg02, ##@LR__4617
1128c     00 12 06 F6 | 	mov	arg01, #0
11290     00 16 06 F6 | 	mov	arg03, #0
11294     F8 8B B0 FD | 	call	#__system___basic_print_string
11298     00 12 06 F6 | 	mov	arg01, #0
1129c     00 D8 B0 FD | 	call	#__system___getiolock_0425
112a0     FD 00 68 FC | 	wrlong	#0, result1
112a4     27 12 06 F6 | 	mov	arg01, #39
112a8     68 49 B0 FD | 	call	#_printerror
112ac     2C 01 90 FD | 	jmp	#LR__1347
112b0                 | LR__1340
112b0                 | ' if numpar=0 then
112b0     0C 4E 05 F1 | 	add	fp, #12
112b4     A7 FE 09 FB | 	rdlong	result3, fp wz
112b8     0C 4E 85 F1 | 	sub	fp, #12
112bc     20 00 90 5D |  if_ne	jmp	#LR__1341
112c0     08 4E 05 F1 | 	add	fp, #8
112c4     A7 3A 68 FC | 	wrlong	#29, fp
112c8     08 4E 85 F1 | 	sub	fp, #8
112cc     1B FA 61 FD | 	getrnd	result1
112d0     A7 FA 61 FC | 	wrlong	result1, fp
112d4     A7 12 02 F6 | 	mov	arg01, fp
112d8     F4 86 BF FD | 	call	#_push
112dc     FC 00 90 FD | 	jmp	#LR__1346
112e0                 | LR__1341
112e0     54 86 BF FD | 	call	#_pop
112e4     A7 FA 61 FC | 	wrlong	result1, fp
112e8     04 4E 05 F1 | 	add	fp, #4
112ec     A7 FC 61 FC | 	wrlong	result2, fp
112f0     04 4E 05 F1 | 	add	fp, #4
112f4     A7 FE 61 FC | 	wrlong	result3, fp
112f8                 | '   t1=pop()
112f8                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
112f8     08 4E 85 F1 | 	sub	fp, #8
112fc     1C FE 0D F2 | 	cmp	result3, #28 wz
11300     08 4E 05 51 |  if_ne	add	fp, #8
11304     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11308     08 4E 85 51 |  if_ne	sub	fp, #8
1130c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11310     2C 00 90 5D |  if_ne	jmp	#LR__1342
11314     1B FA 61 FD | 	getrnd	result1
11318     A7 1E 02 FB | 	rdlong	local01, fp
1131c     0F FB 11 FD | 	qdiv	result1, local01
11320     A7 12 02 F6 | 	mov	arg01, fp
11324     19 1E 62 FD | 	getqy	local01
11328     A7 1E 62 FC | 	wrlong	local01, fp
1132c     08 4E 05 F1 | 	add	fp, #8
11330     A7 3A 68 FC | 	wrlong	#29, fp
11334     08 4E 85 F1 | 	sub	fp, #8
11338     94 86 BF FD | 	call	#_push
1133c     9C 00 90 FD | 	jmp	#LR__1345
11340                 | LR__1342
11340     08 4E 05 F1 | 	add	fp, #8
11344     A7 1E 02 FB | 	rdlong	local01, fp
11348     08 4E 85 F1 | 	sub	fp, #8
1134c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11350     48 00 90 5D |  if_ne	jmp	#LR__1343
11354     A7 12 02 FB | 	rdlong	arg01, fp
11358     00 C0 24 FF 
1135c     00 14 06 F6 | 	mov	arg02, ##1233125376
11360     28 AB B0 FD | 	call	#__system___float_div
11364     FD 1E 02 F6 | 	mov	local01, result1
11368     1B 12 62 FD | 	getrnd	arg01
1136c     74 13 06 F4 | 	bitl	arg01, #372
11370     10 A5 B0 FD | 	call	#__system___float_fromuns
11374     FD 14 02 F6 | 	mov	arg02, result1
11378     0F 13 02 F6 | 	mov	arg01, local01
1137c     08 A9 B0 FD | 	call	#__system___float_mul
11380     A7 FA 61 FC | 	wrlong	result1, fp
11384     08 4E 05 F1 | 	add	fp, #8
11388     A7 3C 68 FC | 	wrlong	#30, fp
1138c     08 4E 85 F1 | 	sub	fp, #8
11390     A7 12 02 F6 | 	mov	arg01, fp
11394     38 86 BF FD | 	call	#_push
11398     40 00 90 FD | 	jmp	#LR__1344
1139c                 | LR__1343
1139c                 | '     print "rnd: "; : printerror(40) 
1139c     00 12 06 F6 | 	mov	arg01, #0
113a0     FC D6 B0 FD | 	call	#__system___getiolock_0425
113a4     FD 12 02 F6 | 	mov	arg01, result1
113a8     F0 7D B0 FD | 	call	#__system___lockmem
113ac     46 01 00 FF 
113b0     45 14 06 F6 | 	mov	arg02, ##@LR__4618
113b4     00 12 06 F6 | 	mov	arg01, #0
113b8     00 16 06 F6 | 	mov	arg03, #0
113bc     D0 8A B0 FD | 	call	#__system___basic_print_string
113c0     00 12 06 F6 | 	mov	arg01, #0
113c4     D8 D6 B0 FD | 	call	#__system___getiolock_0425
113c8     FD 00 68 FC | 	wrlong	#0, result1
113cc     28 12 06 F6 | 	mov	arg01, #40
113d0     40 48 B0 FD | 	call	#_printerror
113d4     A7 12 02 F6 | 	mov	arg01, fp
113d8     F4 85 BF FD | 	call	#_push
113dc                 | LR__1344
113dc                 | LR__1345
113dc                 | LR__1346
113dc                 | LR__1347
113dc     A7 F0 03 F6 | 	mov	ptra, fp
113e0     B2 00 A0 FD | 	call	#popregs_
113e4                 | _do_rnd_ret
113e4     2D 00 64 FD | 	ret
113e8                 | 
113e8                 | ' 
113e8                 | ' sub do_sin
113e8                 | _do_sin
113e8     01 4A 05 F6 | 	mov	COUNT_, #1
113ec     A8 00 A0 FD | 	call	#pushregs_
113f0     10 F0 07 F1 | 	add	ptra, #16
113f4     69 00 00 FF 
113f8     44 E5 05 F1 | 	add	objptr, ##54084
113fc     F2 1E 02 FB | 	rdlong	local01, objptr
11400     0F 17 02 F6 | 	mov	arg03, local01
11404     01 16 66 F0 | 	shl	arg03, #1
11408     0F 17 02 F1 | 	add	arg03, local01
1140c     02 16 66 F0 | 	shl	arg03, #2
11410     03 00 00 FF 
11414     04 E4 85 F1 | 	sub	objptr, ##1540
11418     F2 16 02 F1 | 	add	arg03, objptr
1141c     0B 17 02 FB | 	rdlong	arg03, arg03
11420     0C 4E 05 F1 | 	add	fp, #12
11424     A7 16 62 FC | 	wrlong	arg03, fp
11428                 | ' 
11428                 | ' numpar=compiledline(lineptr_e).result.uresult
11428                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
11428     0C 4E 85 F1 | 	sub	fp, #12
1142c     02 16 16 F2 | 	cmp	arg03, #2 wc
11430     66 00 00 FF 
11434     40 E5 85 F1 | 	sub	objptr, ##52544
11438     0C 4E 05 C1 |  if_b	add	fp, #12
1143c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11440     0C 4E 85 C1 |  if_b	sub	fp, #12
11444     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1350
11448     00 12 06 F6 | 	mov	arg01, #0
1144c     50 D6 B0 FD | 	call	#__system___getiolock_0425
11450     FD 12 02 F6 | 	mov	arg01, result1
11454     44 7D B0 FD | 	call	#__system___lockmem
11458     46 01 00 FF 
1145c     4B 14 06 F6 | 	mov	arg02, ##@LR__4619
11460     00 12 06 F6 | 	mov	arg01, #0
11464     00 16 06 F6 | 	mov	arg03, #0
11468     24 8A B0 FD | 	call	#__system___basic_print_string
1146c     00 12 06 F6 | 	mov	arg01, #0
11470     2C D6 B0 FD | 	call	#__system___getiolock_0425
11474     FD 00 68 FC | 	wrlong	#0, result1
11478     27 12 06 F6 | 	mov	arg01, #39
1147c     94 47 B0 FD | 	call	#_printerror
11480     64 00 90 FD | 	jmp	#LR__1351
11484                 | LR__1350
11484     B0 84 BF FD | 	call	#_pop
11488     A7 FA 61 FC | 	wrlong	result1, fp
1148c     04 4E 05 F1 | 	add	fp, #4
11490     A7 FC 61 FC | 	wrlong	result2, fp
11494     04 4E 05 F1 | 	add	fp, #4
11498     A7 FE 61 FC | 	wrlong	result3, fp
1149c     08 4E 85 F1 | 	sub	fp, #8
114a0     7A 00 00 FF 
114a4     4C E5 05 F1 | 	add	objptr, ##62796
114a8     F2 1E 02 FB | 	rdlong	local01, objptr
114ac     7A 00 00 FF 
114b0     4C E5 85 F1 | 	sub	objptr, ##62796
114b4     A7 12 02 F6 | 	mov	arg01, fp
114b8     C0 FC BF FD | 	call	#_converttofloat
114bc     FD 14 02 F6 | 	mov	arg02, result1
114c0     0F 13 02 F6 | 	mov	arg01, local01
114c4     C0 A7 B0 FD | 	call	#__system___float_mul
114c8     FD 12 02 F6 | 	mov	arg01, result1
114cc     F4 B0 B0 FD | 	call	#__system____builtin_sinf
114d0     A7 FA 61 FC | 	wrlong	result1, fp
114d4     08 4E 05 F1 | 	add	fp, #8
114d8     A7 3C 68 FC | 	wrlong	#30, fp
114dc     08 4E 85 F1 | 	sub	fp, #8
114e0     A7 12 02 F6 | 	mov	arg01, fp
114e4     E8 84 BF FD | 	call	#_push
114e8                 | LR__1351
114e8     A7 F0 03 F6 | 	mov	ptra, fp
114ec     B2 00 A0 FD | 	call	#popregs_
114f0                 | _do_sin_ret
114f0     2D 00 64 FD | 	ret
114f4                 | 
114f4                 | ' 
114f4                 | ' sub do_cos
114f4                 | _do_cos
114f4     01 4A 05 F6 | 	mov	COUNT_, #1
114f8     A8 00 A0 FD | 	call	#pushregs_
114fc     10 F0 07 F1 | 	add	ptra, #16
11500     69 00 00 FF 
11504     44 E5 05 F1 | 	add	objptr, ##54084
11508     F2 1E 02 FB | 	rdlong	local01, objptr
1150c     0F 17 02 F6 | 	mov	arg03, local01
11510     01 16 66 F0 | 	shl	arg03, #1
11514     0F 17 02 F1 | 	add	arg03, local01
11518     02 16 66 F0 | 	shl	arg03, #2
1151c     03 00 00 FF 
11520     04 E4 85 F1 | 	sub	objptr, ##1540
11524     F2 16 02 F1 | 	add	arg03, objptr
11528     0B 17 02 FB | 	rdlong	arg03, arg03
1152c     0C 4E 05 F1 | 	add	fp, #12
11530     A7 16 62 FC | 	wrlong	arg03, fp
11534                 | ' 
11534                 | ' numpar=compiledline(lineptr_e).result.uresult
11534                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
11534     0C 4E 85 F1 | 	sub	fp, #12
11538     02 16 16 F2 | 	cmp	arg03, #2 wc
1153c     66 00 00 FF 
11540     40 E5 85 F1 | 	sub	objptr, ##52544
11544     0C 4E 05 C1 |  if_b	add	fp, #12
11548     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1154c     0C 4E 85 C1 |  if_b	sub	fp, #12
11550     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1360
11554     00 12 06 F6 | 	mov	arg01, #0
11558     44 D5 B0 FD | 	call	#__system___getiolock_0425
1155c     FD 12 02 F6 | 	mov	arg01, result1
11560     38 7C B0 FD | 	call	#__system___lockmem
11564     46 01 00 FF 
11568     51 14 06 F6 | 	mov	arg02, ##@LR__4620
1156c     00 12 06 F6 | 	mov	arg01, #0
11570     00 16 06 F6 | 	mov	arg03, #0
11574     18 89 B0 FD | 	call	#__system___basic_print_string
11578     00 12 06 F6 | 	mov	arg01, #0
1157c     20 D5 B0 FD | 	call	#__system___getiolock_0425
11580     FD 00 68 FC | 	wrlong	#0, result1
11584     27 12 06 F6 | 	mov	arg01, #39
11588     88 46 B0 FD | 	call	#_printerror
1158c     78 00 90 FD | 	jmp	#LR__1361
11590                 | LR__1360
11590     A4 83 BF FD | 	call	#_pop
11594     A7 FA 61 FC | 	wrlong	result1, fp
11598     04 4E 05 F1 | 	add	fp, #4
1159c     A7 FC 61 FC | 	wrlong	result2, fp
115a0     04 4E 05 F1 | 	add	fp, #4
115a4     A7 FE 61 FC | 	wrlong	result3, fp
115a8     08 4E 85 F1 | 	sub	fp, #8
115ac     7A 00 00 FF 
115b0     4C E5 05 F1 | 	add	objptr, ##62796
115b4     F2 1E 02 FB | 	rdlong	local01, objptr
115b8     7A 00 00 FF 
115bc     4C E5 85 F1 | 	sub	objptr, ##62796
115c0     A7 12 02 F6 | 	mov	arg01, fp
115c4     B4 FB BF FD | 	call	#_converttofloat
115c8     FD 14 02 F6 | 	mov	arg02, result1
115cc     0F 13 02 F6 | 	mov	arg01, local01
115d0     B4 A6 B0 FD | 	call	#__system___float_mul
115d4     FD 14 02 F6 | 	mov	arg02, result1
115d8     87 E4 1F FF 
115dc     DB 13 06 F6 | 	mov	arg01, ##1070141403
115e0     1F 14 E6 F4 | 	bitnot	arg02, #31
115e4     D0 A2 B0 FD | 	call	#__system___float_add
115e8     FD 12 02 F6 | 	mov	arg01, result1
115ec     D4 AF B0 FD | 	call	#__system____builtin_sinf
115f0     A7 FA 61 FC | 	wrlong	result1, fp
115f4     08 4E 05 F1 | 	add	fp, #8
115f8     A7 3C 68 FC | 	wrlong	#30, fp
115fc     08 4E 85 F1 | 	sub	fp, #8
11600     A7 12 02 F6 | 	mov	arg01, fp
11604     C8 83 BF FD | 	call	#_push
11608                 | LR__1361
11608     A7 F0 03 F6 | 	mov	ptra, fp
1160c     B2 00 A0 FD | 	call	#popregs_
11610                 | _do_cos_ret
11610     2D 00 64 FD | 	ret
11614                 | 
11614                 | ' 
11614                 | ' sub do_tan
11614                 | _do_tan
11614     01 4A 05 F6 | 	mov	COUNT_, #1
11618     A8 00 A0 FD | 	call	#pushregs_
1161c     10 F0 07 F1 | 	add	ptra, #16
11620     69 00 00 FF 
11624     44 E5 05 F1 | 	add	objptr, ##54084
11628     F2 1E 02 FB | 	rdlong	local01, objptr
1162c     0F 17 02 F6 | 	mov	arg03, local01
11630     01 16 66 F0 | 	shl	arg03, #1
11634     0F 17 02 F1 | 	add	arg03, local01
11638     02 16 66 F0 | 	shl	arg03, #2
1163c     03 00 00 FF 
11640     04 E4 85 F1 | 	sub	objptr, ##1540
11644     F2 16 02 F1 | 	add	arg03, objptr
11648     0B 17 02 FB | 	rdlong	arg03, arg03
1164c     0C 4E 05 F1 | 	add	fp, #12
11650     A7 16 62 FC | 	wrlong	arg03, fp
11654                 | ' 
11654                 | ' numpar=compiledline(lineptr_e).result.uresult
11654                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
11654     0C 4E 85 F1 | 	sub	fp, #12
11658     02 16 16 F2 | 	cmp	arg03, #2 wc
1165c     66 00 00 FF 
11660     40 E5 85 F1 | 	sub	objptr, ##52544
11664     0C 4E 05 C1 |  if_b	add	fp, #12
11668     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1166c     0C 4E 85 C1 |  if_b	sub	fp, #12
11670     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1370
11674     00 12 06 F6 | 	mov	arg01, #0
11678     24 D4 B0 FD | 	call	#__system___getiolock_0425
1167c     FD 12 02 F6 | 	mov	arg01, result1
11680     18 7B B0 FD | 	call	#__system___lockmem
11684     46 01 00 FF 
11688     57 14 06 F6 | 	mov	arg02, ##@LR__4621
1168c     00 12 06 F6 | 	mov	arg01, #0
11690     00 16 06 F6 | 	mov	arg03, #0
11694     F8 87 B0 FD | 	call	#__system___basic_print_string
11698     00 12 06 F6 | 	mov	arg01, #0
1169c     00 D4 B0 FD | 	call	#__system___getiolock_0425
116a0     FD 00 68 FC | 	wrlong	#0, result1
116a4     27 12 06 F6 | 	mov	arg01, #39
116a8     68 45 B0 FD | 	call	#_printerror
116ac     64 00 90 FD | 	jmp	#LR__1371
116b0                 | LR__1370
116b0     84 82 BF FD | 	call	#_pop
116b4     A7 FA 61 FC | 	wrlong	result1, fp
116b8     04 4E 05 F1 | 	add	fp, #4
116bc     A7 FC 61 FC | 	wrlong	result2, fp
116c0     04 4E 05 F1 | 	add	fp, #4
116c4     A7 FE 61 FC | 	wrlong	result3, fp
116c8     08 4E 85 F1 | 	sub	fp, #8
116cc     7A 00 00 FF 
116d0     4C E5 05 F1 | 	add	objptr, ##62796
116d4     F2 1E 02 FB | 	rdlong	local01, objptr
116d8     7A 00 00 FF 
116dc     4C E5 85 F1 | 	sub	objptr, ##62796
116e0     A7 12 02 F6 | 	mov	arg01, fp
116e4     94 FA BF FD | 	call	#_converttofloat
116e8     FD 14 02 F6 | 	mov	arg02, result1
116ec     0F 13 02 F6 | 	mov	arg01, local01
116f0     94 A5 B0 FD | 	call	#__system___float_mul
116f4     FD 12 02 F6 | 	mov	arg01, result1
116f8     14 B0 B0 FD | 	call	#__system____builtin_tanf
116fc     A7 FA 61 FC | 	wrlong	result1, fp
11700     08 4E 05 F1 | 	add	fp, #8
11704     A7 3C 68 FC | 	wrlong	#30, fp
11708     08 4E 85 F1 | 	sub	fp, #8
1170c     A7 12 02 F6 | 	mov	arg01, fp
11710     BC 82 BF FD | 	call	#_push
11714                 | LR__1371
11714     A7 F0 03 F6 | 	mov	ptra, fp
11718     B2 00 A0 FD | 	call	#popregs_
1171c                 | _do_tan_ret
1171c     2D 00 64 FD | 	ret
11720                 | 
11720                 | ' 
11720                 | ' sub do_asin
11720                 | _do_asin
11720     01 4A 05 F6 | 	mov	COUNT_, #1
11724     A8 00 A0 FD | 	call	#pushregs_
11728     10 F0 07 F1 | 	add	ptra, #16
1172c     69 00 00 FF 
11730     44 E5 05 F1 | 	add	objptr, ##54084
11734     F2 1E 02 FB | 	rdlong	local01, objptr
11738     0F 17 02 F6 | 	mov	arg03, local01
1173c     01 16 66 F0 | 	shl	arg03, #1
11740     0F 17 02 F1 | 	add	arg03, local01
11744     02 16 66 F0 | 	shl	arg03, #2
11748     03 00 00 FF 
1174c     04 E4 85 F1 | 	sub	objptr, ##1540
11750     F2 16 02 F1 | 	add	arg03, objptr
11754     0B 17 02 FB | 	rdlong	arg03, arg03
11758     0C 4E 05 F1 | 	add	fp, #12
1175c     A7 16 62 FC | 	wrlong	arg03, fp
11760                 | ' 
11760                 | ' numpar=compiledline(lineptr_e).result.uresult
11760                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
11760     0C 4E 85 F1 | 	sub	fp, #12
11764     02 16 16 F2 | 	cmp	arg03, #2 wc
11768     66 00 00 FF 
1176c     40 E5 85 F1 | 	sub	objptr, ##52544
11770     0C 4E 05 C1 |  if_b	add	fp, #12
11774     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11778     0C 4E 85 C1 |  if_b	sub	fp, #12
1177c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1380
11780     00 12 06 F6 | 	mov	arg01, #0
11784     18 D3 B0 FD | 	call	#__system___getiolock_0425
11788     FD 12 02 F6 | 	mov	arg01, result1
1178c     0C 7A B0 FD | 	call	#__system___lockmem
11790     46 01 00 FF 
11794     5D 14 06 F6 | 	mov	arg02, ##@LR__4622
11798     00 12 06 F6 | 	mov	arg01, #0
1179c     00 16 06 F6 | 	mov	arg03, #0
117a0     EC 86 B0 FD | 	call	#__system___basic_print_string
117a4     00 12 06 F6 | 	mov	arg01, #0
117a8     F4 D2 B0 FD | 	call	#__system___getiolock_0425
117ac     FD 00 68 FC | 	wrlong	#0, result1
117b0     27 12 06 F6 | 	mov	arg01, #39
117b4     5C 44 B0 FD | 	call	#_printerror
117b8     64 00 90 FD | 	jmp	#LR__1381
117bc                 | LR__1380
117bc     78 81 BF FD | 	call	#_pop
117c0     FF 1E 02 F6 | 	mov	local01, result3
117c4     A7 FA 61 FC | 	wrlong	result1, fp
117c8     04 4E 05 F1 | 	add	fp, #4
117cc     A7 FC 61 FC | 	wrlong	result2, fp
117d0     04 4E 05 F1 | 	add	fp, #4
117d4     A7 1E 62 FC | 	wrlong	local01, fp
117d8     08 4E 85 F1 | 	sub	fp, #8
117dc     A7 12 02 F6 | 	mov	arg01, fp
117e0     98 F9 BF FD | 	call	#_converttofloat
117e4     FD 12 02 F6 | 	mov	arg01, result1
117e8     6C AF B0 FD | 	call	#__system____builtin_asinf
117ec     FD 12 02 F6 | 	mov	arg01, result1
117f0     7A 00 00 FF 
117f4     50 E5 05 F1 | 	add	objptr, ##62800
117f8     F2 14 02 FB | 	rdlong	arg02, objptr
117fc     7A 00 00 FF 
11800     50 E5 85 F1 | 	sub	objptr, ##62800
11804     80 A4 B0 FD | 	call	#__system___float_mul
11808     A7 FA 61 FC | 	wrlong	result1, fp
1180c     08 4E 05 F1 | 	add	fp, #8
11810     A7 3C 68 FC | 	wrlong	#30, fp
11814     08 4E 85 F1 | 	sub	fp, #8
11818     A7 12 02 F6 | 	mov	arg01, fp
1181c     B0 81 BF FD | 	call	#_push
11820                 | LR__1381
11820     A7 F0 03 F6 | 	mov	ptra, fp
11824     B2 00 A0 FD | 	call	#popregs_
11828                 | _do_asin_ret
11828     2D 00 64 FD | 	ret
1182c                 | 
1182c                 | ' 
1182c                 | ' sub do_acos
1182c                 | _do_acos
1182c     01 4A 05 F6 | 	mov	COUNT_, #1
11830     A8 00 A0 FD | 	call	#pushregs_
11834     10 F0 07 F1 | 	add	ptra, #16
11838     69 00 00 FF 
1183c     44 E5 05 F1 | 	add	objptr, ##54084
11840     F2 1E 02 FB | 	rdlong	local01, objptr
11844     0F 17 02 F6 | 	mov	arg03, local01
11848     01 16 66 F0 | 	shl	arg03, #1
1184c     0F 17 02 F1 | 	add	arg03, local01
11850     02 16 66 F0 | 	shl	arg03, #2
11854     03 00 00 FF 
11858     04 E4 85 F1 | 	sub	objptr, ##1540
1185c     F2 16 02 F1 | 	add	arg03, objptr
11860     0B 17 02 FB | 	rdlong	arg03, arg03
11864     0C 4E 05 F1 | 	add	fp, #12
11868     A7 16 62 FC | 	wrlong	arg03, fp
1186c                 | ' 
1186c                 | ' numpar=compiledline(lineptr_e).result.uresult
1186c                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
1186c     0C 4E 85 F1 | 	sub	fp, #12
11870     02 16 16 F2 | 	cmp	arg03, #2 wc
11874     66 00 00 FF 
11878     40 E5 85 F1 | 	sub	objptr, ##52544
1187c     0C 4E 05 C1 |  if_b	add	fp, #12
11880     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11884     0C 4E 85 C1 |  if_b	sub	fp, #12
11888     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1390
1188c     00 12 06 F6 | 	mov	arg01, #0
11890     0C D2 B0 FD | 	call	#__system___getiolock_0425
11894     FD 12 02 F6 | 	mov	arg01, result1
11898     00 79 B0 FD | 	call	#__system___lockmem
1189c     46 01 00 FF 
118a0     64 14 06 F6 | 	mov	arg02, ##@LR__4623
118a4     00 12 06 F6 | 	mov	arg01, #0
118a8     00 16 06 F6 | 	mov	arg03, #0
118ac     E0 85 B0 FD | 	call	#__system___basic_print_string
118b0     00 12 06 F6 | 	mov	arg01, #0
118b4     E8 D1 B0 FD | 	call	#__system___getiolock_0425
118b8     FD 00 68 FC | 	wrlong	#0, result1
118bc     27 12 06 F6 | 	mov	arg01, #39
118c0     50 43 B0 FD | 	call	#_printerror
118c4     64 00 90 FD | 	jmp	#LR__1391
118c8                 | LR__1390
118c8     6C 80 BF FD | 	call	#_pop
118cc     FF 1E 02 F6 | 	mov	local01, result3
118d0     A7 FA 61 FC | 	wrlong	result1, fp
118d4     04 4E 05 F1 | 	add	fp, #4
118d8     A7 FC 61 FC | 	wrlong	result2, fp
118dc     04 4E 05 F1 | 	add	fp, #4
118e0     A7 1E 62 FC | 	wrlong	local01, fp
118e4     08 4E 85 F1 | 	sub	fp, #8
118e8     A7 12 02 F6 | 	mov	arg01, fp
118ec     8C F8 BF FD | 	call	#_converttofloat
118f0     FD 12 02 F6 | 	mov	arg01, result1
118f4     AC AE B0 FD | 	call	#__system____builtin_acosf
118f8     FD 12 02 F6 | 	mov	arg01, result1
118fc     7A 00 00 FF 
11900     50 E5 05 F1 | 	add	objptr, ##62800
11904     F2 14 02 FB | 	rdlong	arg02, objptr
11908     7A 00 00 FF 
1190c     50 E5 85 F1 | 	sub	objptr, ##62800
11910     74 A3 B0 FD | 	call	#__system___float_mul
11914     A7 FA 61 FC | 	wrlong	result1, fp
11918     08 4E 05 F1 | 	add	fp, #8
1191c     A7 3C 68 FC | 	wrlong	#30, fp
11920     08 4E 85 F1 | 	sub	fp, #8
11924     A7 12 02 F6 | 	mov	arg01, fp
11928     A4 80 BF FD | 	call	#_push
1192c                 | LR__1391
1192c     A7 F0 03 F6 | 	mov	ptra, fp
11930     B2 00 A0 FD | 	call	#popregs_
11934                 | _do_acos_ret
11934     2D 00 64 FD | 	ret
11938                 | 
11938                 | ' 
11938                 | ' sub do_atn
11938                 | _do_atn
11938     01 4A 05 F6 | 	mov	COUNT_, #1
1193c     A8 00 A0 FD | 	call	#pushregs_
11940     10 F0 07 F1 | 	add	ptra, #16
11944     69 00 00 FF 
11948     44 E5 05 F1 | 	add	objptr, ##54084
1194c     F2 1E 02 FB | 	rdlong	local01, objptr
11950     0F 17 02 F6 | 	mov	arg03, local01
11954     01 16 66 F0 | 	shl	arg03, #1
11958     0F 17 02 F1 | 	add	arg03, local01
1195c     02 16 66 F0 | 	shl	arg03, #2
11960     03 00 00 FF 
11964     04 E4 85 F1 | 	sub	objptr, ##1540
11968     F2 16 02 F1 | 	add	arg03, objptr
1196c     0B 17 02 FB | 	rdlong	arg03, arg03
11970     0C 4E 05 F1 | 	add	fp, #12
11974     A7 16 62 FC | 	wrlong	arg03, fp
11978                 | ' 
11978                 | ' numpar=compiledline(lineptr_e).result.uresult
11978                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
11978     0C 4E 85 F1 | 	sub	fp, #12
1197c     02 16 16 F2 | 	cmp	arg03, #2 wc
11980     66 00 00 FF 
11984     40 E5 85 F1 | 	sub	objptr, ##52544
11988     0C 4E 05 C1 |  if_b	add	fp, #12
1198c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11990     0C 4E 85 C1 |  if_b	sub	fp, #12
11994     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1400
11998     00 12 06 F6 | 	mov	arg01, #0
1199c     00 D1 B0 FD | 	call	#__system___getiolock_0425
119a0     FD 12 02 F6 | 	mov	arg01, result1
119a4     F4 77 B0 FD | 	call	#__system___lockmem
119a8     46 01 00 FF 
119ac     6B 14 06 F6 | 	mov	arg02, ##@LR__4624
119b0     00 12 06 F6 | 	mov	arg01, #0
119b4     00 16 06 F6 | 	mov	arg03, #0
119b8     D4 84 B0 FD | 	call	#__system___basic_print_string
119bc     00 12 06 F6 | 	mov	arg01, #0
119c0     DC D0 B0 FD | 	call	#__system___getiolock_0425
119c4     FD 00 68 FC | 	wrlong	#0, result1
119c8     27 12 06 F6 | 	mov	arg01, #39
119cc     44 42 B0 FD | 	call	#_printerror
119d0     6C 00 90 FD | 	jmp	#LR__1401
119d4                 | LR__1400
119d4     60 7F BF FD | 	call	#_pop
119d8     FF 1E 02 F6 | 	mov	local01, result3
119dc     A7 FA 61 FC | 	wrlong	result1, fp
119e0     04 4E 05 F1 | 	add	fp, #4
119e4     A7 FC 61 FC | 	wrlong	result2, fp
119e8     04 4E 05 F1 | 	add	fp, #4
119ec     A7 1E 62 FC | 	wrlong	local01, fp
119f0     08 4E 85 F1 | 	sub	fp, #8
119f4     A7 12 02 F6 | 	mov	arg01, fp
119f8     80 F7 BF FD | 	call	#_converttofloat
119fc     FD 12 02 F6 | 	mov	arg01, result1
11a00     00 C0 1F FF 
11a04     00 14 06 F6 | 	mov	arg02, ##1065353216
11a08     E4 AD B0 FD | 	call	#__system____builtin_atan2f
11a0c     FD 12 02 F6 | 	mov	arg01, result1
11a10     7A 00 00 FF 
11a14     50 E5 05 F1 | 	add	objptr, ##62800
11a18     F2 14 02 FB | 	rdlong	arg02, objptr
11a1c     7A 00 00 FF 
11a20     50 E5 85 F1 | 	sub	objptr, ##62800
11a24     60 A2 B0 FD | 	call	#__system___float_mul
11a28     A7 FA 61 FC | 	wrlong	result1, fp
11a2c     08 4E 05 F1 | 	add	fp, #8
11a30     A7 3C 68 FC | 	wrlong	#30, fp
11a34     08 4E 85 F1 | 	sub	fp, #8
11a38     A7 12 02 F6 | 	mov	arg01, fp
11a3c     90 7F BF FD | 	call	#_push
11a40                 | LR__1401
11a40     A7 F0 03 F6 | 	mov	ptra, fp
11a44     B2 00 A0 FD | 	call	#popregs_
11a48                 | _do_atn_ret
11a48     2D 00 64 FD | 	ret
11a4c                 | 
11a4c                 | ' 
11a4c                 | ' sub do_sqr
11a4c                 | _do_sqr
11a4c     01 4A 05 F6 | 	mov	COUNT_, #1
11a50     A8 00 A0 FD | 	call	#pushregs_
11a54     10 F0 07 F1 | 	add	ptra, #16
11a58     69 00 00 FF 
11a5c     44 E5 05 F1 | 	add	objptr, ##54084
11a60     F2 1E 02 FB | 	rdlong	local01, objptr
11a64     0F 17 02 F6 | 	mov	arg03, local01
11a68     01 16 66 F0 | 	shl	arg03, #1
11a6c     0F 17 02 F1 | 	add	arg03, local01
11a70     02 16 66 F0 | 	shl	arg03, #2
11a74     03 00 00 FF 
11a78     04 E4 85 F1 | 	sub	objptr, ##1540
11a7c     F2 16 02 F1 | 	add	arg03, objptr
11a80     0B 17 02 FB | 	rdlong	arg03, arg03
11a84     0C 4E 05 F1 | 	add	fp, #12
11a88     A7 16 62 FC | 	wrlong	arg03, fp
11a8c                 | ' 
11a8c                 | ' numpar=compiledline(lineptr_e).result.uresult
11a8c                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
11a8c     0C 4E 85 F1 | 	sub	fp, #12
11a90     02 16 16 F2 | 	cmp	arg03, #2 wc
11a94     66 00 00 FF 
11a98     40 E5 85 F1 | 	sub	objptr, ##52544
11a9c     0C 4E 05 C1 |  if_b	add	fp, #12
11aa0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11aa4     0C 4E 85 C1 |  if_b	sub	fp, #12
11aa8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1410
11aac     00 12 06 F6 | 	mov	arg01, #0
11ab0     EC CF B0 FD | 	call	#__system___getiolock_0425
11ab4     FD 12 02 F6 | 	mov	arg01, result1
11ab8     E0 76 B0 FD | 	call	#__system___lockmem
11abc     46 01 00 FF 
11ac0     71 14 06 F6 | 	mov	arg02, ##@LR__4625
11ac4     00 12 06 F6 | 	mov	arg01, #0
11ac8     00 16 06 F6 | 	mov	arg03, #0
11acc     C0 83 B0 FD | 	call	#__system___basic_print_string
11ad0     00 12 06 F6 | 	mov	arg01, #0
11ad4     C8 CF B0 FD | 	call	#__system___getiolock_0425
11ad8     FD 00 68 FC | 	wrlong	#0, result1
11adc     27 12 06 F6 | 	mov	arg01, #39
11ae0     30 41 B0 FD | 	call	#_printerror
11ae4     48 00 90 FD | 	jmp	#LR__1411
11ae8                 | LR__1410
11ae8     4C 7E BF FD | 	call	#_pop
11aec     FF 1E 02 F6 | 	mov	local01, result3
11af0     A7 FA 61 FC | 	wrlong	result1, fp
11af4     04 4E 05 F1 | 	add	fp, #4
11af8     A7 FC 61 FC | 	wrlong	result2, fp
11afc     04 4E 05 F1 | 	add	fp, #4
11b00     A7 1E 62 FC | 	wrlong	local01, fp
11b04     08 4E 85 F1 | 	sub	fp, #8
11b08     A7 12 02 F6 | 	mov	arg01, fp
11b0c     6C F6 BF FD | 	call	#_converttofloat
11b10     FD 12 02 F6 | 	mov	arg01, result1
11b14     98 A0 B0 FD | 	call	#__system___float_sqrt
11b18     A7 FA 61 FC | 	wrlong	result1, fp
11b1c     08 4E 05 F1 | 	add	fp, #8
11b20     A7 3C 68 FC | 	wrlong	#30, fp
11b24     08 4E 85 F1 | 	sub	fp, #8
11b28     A7 12 02 F6 | 	mov	arg01, fp
11b2c     A0 7E BF FD | 	call	#_push
11b30                 | LR__1411
11b30     A7 F0 03 F6 | 	mov	ptra, fp
11b34     B2 00 A0 FD | 	call	#popregs_
11b38                 | _do_sqr_ret
11b38     2D 00 64 FD | 	ret
11b3c                 | 
11b3c                 | ' 
11b3c                 | ' sub do_stick
11b3c                 | _do_stick
11b3c     01 4A 05 F6 | 	mov	COUNT_, #1
11b40     A8 00 A0 FD | 	call	#pushregs_
11b44     10 F0 07 F1 | 	add	ptra, #16
11b48     69 00 00 FF 
11b4c     44 E5 05 F1 | 	add	objptr, ##54084
11b50     F2 1E 02 FB | 	rdlong	local01, objptr
11b54     0F 17 02 F6 | 	mov	arg03, local01
11b58     01 16 66 F0 | 	shl	arg03, #1
11b5c     0F 17 02 F1 | 	add	arg03, local01
11b60     02 16 66 F0 | 	shl	arg03, #2
11b64     03 00 00 FF 
11b68     04 E4 85 F1 | 	sub	objptr, ##1540
11b6c     F2 16 02 F1 | 	add	arg03, objptr
11b70     0B 17 02 FB | 	rdlong	arg03, arg03
11b74     0C 4E 05 F1 | 	add	fp, #12
11b78     A7 16 62 FC | 	wrlong	arg03, fp
11b7c                 | ' 
11b7c                 | ' numpar=compiledline(lineptr_e).result.uresult
11b7c                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
11b7c     0C 4E 85 F1 | 	sub	fp, #12
11b80     02 16 16 F2 | 	cmp	arg03, #2 wc
11b84     66 00 00 FF 
11b88     40 E5 85 F1 | 	sub	objptr, ##52544
11b8c     3C 00 90 CD |  if_b	jmp	#LR__1420
11b90     00 12 06 F6 | 	mov	arg01, #0
11b94     08 CF B0 FD | 	call	#__system___getiolock_0425
11b98     FD 12 02 F6 | 	mov	arg01, result1
11b9c     FC 75 B0 FD | 	call	#__system___lockmem
11ba0     46 01 00 FF 
11ba4     77 14 06 F6 | 	mov	arg02, ##@LR__4626
11ba8     00 12 06 F6 | 	mov	arg01, #0
11bac     00 16 06 F6 | 	mov	arg03, #0
11bb0     DC 82 B0 FD | 	call	#__system___basic_print_string
11bb4     00 12 06 F6 | 	mov	arg01, #0
11bb8     E4 CE B0 FD | 	call	#__system___getiolock_0425
11bbc     FD 00 68 FC | 	wrlong	#0, result1
11bc0     27 12 06 F6 | 	mov	arg01, #39
11bc4     4C 40 B0 FD | 	call	#_printerror
11bc8     E8 00 90 FD | 	jmp	#LR__1424
11bcc                 | LR__1420
11bcc                 | ' 
11bcc                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
11bcc     0C 4E 05 F1 | 	add	fp, #12
11bd0     A7 FE 09 FB | 	rdlong	result3, fp wz
11bd4     0C 4E 85 F1 | 	sub	fp, #12
11bd8     30 00 90 5D |  if_ne	jmp	#LR__1421
11bdc     7A 00 00 FF 
11be0     C0 E4 05 F1 | 	add	objptr, ##62656
11be4     F2 1E 02 FB | 	rdlong	local01, objptr
11be8     7A 00 00 FF 
11bec     C0 E4 85 F1 | 	sub	objptr, ##62656
11bf0     A7 1E 62 FC | 	wrlong	local01, fp
11bf4     08 4E 05 F1 | 	add	fp, #8
11bf8     A7 3A 68 FC | 	wrlong	#29, fp
11bfc     08 4E 85 F1 | 	sub	fp, #8
11c00     A7 12 02 F6 | 	mov	arg01, fp
11c04     C8 7D BF FD | 	call	#_push
11c08     A8 00 90 FD | 	jmp	#LR__1424
11c0c                 | LR__1421
11c0c     28 7D BF FD | 	call	#_pop
11c10     A7 FA 61 FC | 	wrlong	result1, fp
11c14     04 4E 05 F1 | 	add	fp, #4
11c18     A7 FC 61 FC | 	wrlong	result2, fp
11c1c     04 4E 05 F1 | 	add	fp, #4
11c20     A7 FE 61 FC | 	wrlong	result3, fp
11c24                 | ' 
11c24                 | ' t1=pop()
11c24                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
11c24     08 4E 85 F1 | 	sub	fp, #8
11c28     1C FE 0D F2 | 	cmp	result3, #28 wz
11c2c     08 4E 05 51 |  if_ne	add	fp, #8
11c30     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11c34     08 4E 85 51 |  if_ne	sub	fp, #8
11c38     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11c3c     6C 00 90 5D |  if_ne	jmp	#LR__1423
11c40     A7 1E 02 FB | 	rdlong	local01, fp
11c44     7A 00 00 FF 
11c48     98 E5 05 F1 | 	add	objptr, ##62872
11c4c     F2 1E 62 FC | 	wrlong	local01, objptr
11c50                 | '   q=t1.result.uresult
11c50                 | '   if q<7 then 
11c50     7A 00 00 FF 
11c54     98 E5 85 F1 | 	sub	objptr, ##62872
11c58     07 1E 56 F2 | 	cmps	local01, #7 wc
11c5c     40 00 90 3D |  if_ae	jmp	#LR__1422
11c60     7A 00 00 FF 
11c64     98 E5 05 F1 | 	add	objptr, ##62872
11c68     F2 1E 02 FB | 	rdlong	local01, objptr
11c6c     02 1E 66 F0 | 	shl	local01, #2
11c70     D8 E4 85 F1 | 	sub	objptr, #216
11c74     F2 1E 02 F1 | 	add	local01, objptr
11c78     0F 1F 02 FB | 	rdlong	local01, local01
11c7c     A7 1E 62 FC | 	wrlong	local01, fp
11c80     08 4E 05 F1 | 	add	fp, #8
11c84     A7 3A 68 FC | 	wrlong	#29, fp
11c88     08 4E 85 F1 | 	sub	fp, #8
11c8c     A7 12 02 F6 | 	mov	arg01, fp
11c90     7A 00 00 FF 
11c94     C0 E4 85 F1 | 	sub	objptr, ##62656
11c98     34 7D BF FD | 	call	#_push
11c9c                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
11c9c     14 00 90 FD | 	jmp	#LR__1424
11ca0                 | LR__1422
11ca0     29 12 06 F6 | 	mov	arg01, #41
11ca4     6C 3F B0 FD | 	call	#_printerror
11ca8                 | '      printerror(41) : return
11ca8     08 00 90 FD | 	jmp	#LR__1424
11cac                 | LR__1423
11cac     29 12 06 F6 | 	mov	arg01, #41
11cb0     60 3F B0 FD | 	call	#_printerror
11cb4                 | LR__1424
11cb4     A7 F0 03 F6 | 	mov	ptra, fp
11cb8     B2 00 A0 FD | 	call	#popregs_
11cbc                 | _do_stick_ret
11cbc     2D 00 64 FD | 	ret
11cc0                 | 
11cc0                 | ' 
11cc0                 | ' sub do_strig
11cc0                 | _do_strig
11cc0     01 4A 05 F6 | 	mov	COUNT_, #1
11cc4     A8 00 A0 FD | 	call	#pushregs_
11cc8     10 F0 07 F1 | 	add	ptra, #16
11ccc     69 00 00 FF 
11cd0     44 E5 05 F1 | 	add	objptr, ##54084
11cd4     F2 1E 02 FB | 	rdlong	local01, objptr
11cd8     0F 17 02 F6 | 	mov	arg03, local01
11cdc     01 16 66 F0 | 	shl	arg03, #1
11ce0     0F 17 02 F1 | 	add	arg03, local01
11ce4     02 16 66 F0 | 	shl	arg03, #2
11ce8     03 00 00 FF 
11cec     04 E4 85 F1 | 	sub	objptr, ##1540
11cf0     F2 16 02 F1 | 	add	arg03, objptr
11cf4     0B 17 02 FB | 	rdlong	arg03, arg03
11cf8     0C 4E 05 F1 | 	add	fp, #12
11cfc     A7 16 62 FC | 	wrlong	arg03, fp
11d00                 | ' 
11d00                 | ' numpar=compiledline(lineptr_e).result.uresult
11d00                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
11d00     0C 4E 85 F1 | 	sub	fp, #12
11d04     02 16 16 F2 | 	cmp	arg03, #2 wc
11d08     66 00 00 FF 
11d0c     40 E5 85 F1 | 	sub	objptr, ##52544
11d10     3C 00 90 CD |  if_b	jmp	#LR__1430
11d14     00 12 06 F6 | 	mov	arg01, #0
11d18     84 CD B0 FD | 	call	#__system___getiolock_0425
11d1c     FD 12 02 F6 | 	mov	arg01, result1
11d20     78 74 B0 FD | 	call	#__system___lockmem
11d24     46 01 00 FF 
11d28     7F 14 06 F6 | 	mov	arg02, ##@LR__4627
11d2c     00 12 06 F6 | 	mov	arg01, #0
11d30     00 16 06 F6 | 	mov	arg03, #0
11d34     58 81 B0 FD | 	call	#__system___basic_print_string
11d38     00 12 06 F6 | 	mov	arg01, #0
11d3c     60 CD B0 FD | 	call	#__system___getiolock_0425
11d40     FD 00 68 FC | 	wrlong	#0, result1
11d44     27 12 06 F6 | 	mov	arg01, #39
11d48     C8 3E B0 FD | 	call	#_printerror
11d4c     E8 00 90 FD | 	jmp	#LR__1434
11d50                 | LR__1430
11d50                 | ' 
11d50                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
11d50     0C 4E 05 F1 | 	add	fp, #12
11d54     A7 FE 09 FB | 	rdlong	result3, fp wz
11d58     0C 4E 85 F1 | 	sub	fp, #12
11d5c     30 00 90 5D |  if_ne	jmp	#LR__1431
11d60     7A 00 00 FF 
11d64     DC E4 05 F1 | 	add	objptr, ##62684
11d68     F2 1E 02 FB | 	rdlong	local01, objptr
11d6c     7A 00 00 FF 
11d70     DC E4 85 F1 | 	sub	objptr, ##62684
11d74     A7 1E 62 FC | 	wrlong	local01, fp
11d78     08 4E 05 F1 | 	add	fp, #8
11d7c     A7 3A 68 FC | 	wrlong	#29, fp
11d80     08 4E 85 F1 | 	sub	fp, #8
11d84     A7 12 02 F6 | 	mov	arg01, fp
11d88     44 7C BF FD | 	call	#_push
11d8c     A8 00 90 FD | 	jmp	#LR__1434
11d90                 | LR__1431
11d90     A4 7B BF FD | 	call	#_pop
11d94     A7 FA 61 FC | 	wrlong	result1, fp
11d98     04 4E 05 F1 | 	add	fp, #4
11d9c     A7 FC 61 FC | 	wrlong	result2, fp
11da0     04 4E 05 F1 | 	add	fp, #4
11da4     A7 FE 61 FC | 	wrlong	result3, fp
11da8                 | ' 
11da8                 | ' t1=pop()
11da8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
11da8     08 4E 85 F1 | 	sub	fp, #8
11dac     1C FE 0D F2 | 	cmp	result3, #28 wz
11db0     08 4E 05 51 |  if_ne	add	fp, #8
11db4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11db8     08 4E 85 51 |  if_ne	sub	fp, #8
11dbc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11dc0     6C 00 90 5D |  if_ne	jmp	#LR__1433
11dc4     A7 1E 02 FB | 	rdlong	local01, fp
11dc8     7A 00 00 FF 
11dcc     98 E5 05 F1 | 	add	objptr, ##62872
11dd0     F2 1E 62 FC | 	wrlong	local01, objptr
11dd4                 | '   q=t1.result.uresult
11dd4                 | '   if q<7 then 
11dd4     7A 00 00 FF 
11dd8     98 E5 85 F1 | 	sub	objptr, ##62872
11ddc     07 1E 56 F2 | 	cmps	local01, #7 wc
11de0     40 00 90 3D |  if_ae	jmp	#LR__1432
11de4     7A 00 00 FF 
11de8     98 E5 05 F1 | 	add	objptr, ##62872
11dec     F2 1E 02 FB | 	rdlong	local01, objptr
11df0     02 1E 66 F0 | 	shl	local01, #2
11df4     BC E4 85 F1 | 	sub	objptr, #188
11df8     F2 1E 02 F1 | 	add	local01, objptr
11dfc     0F 1F 02 FB | 	rdlong	local01, local01
11e00     A7 1E 62 FC | 	wrlong	local01, fp
11e04     08 4E 05 F1 | 	add	fp, #8
11e08     A7 3A 68 FC | 	wrlong	#29, fp
11e0c     08 4E 85 F1 | 	sub	fp, #8
11e10     A7 12 02 F6 | 	mov	arg01, fp
11e14     7A 00 00 FF 
11e18     DC E4 85 F1 | 	sub	objptr, ##62684
11e1c     B0 7B BF FD | 	call	#_push
11e20                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
11e20     14 00 90 FD | 	jmp	#LR__1434
11e24                 | LR__1432
11e24     29 12 06 F6 | 	mov	arg01, #41
11e28     E8 3D B0 FD | 	call	#_printerror
11e2c                 | '      printerror(41) : return
11e2c     08 00 90 FD | 	jmp	#LR__1434
11e30                 | LR__1433
11e30     29 12 06 F6 | 	mov	arg01, #41
11e34     DC 3D B0 FD | 	call	#_printerror
11e38                 | LR__1434
11e38     A7 F0 03 F6 | 	mov	ptra, fp
11e3c     B2 00 A0 FD | 	call	#popregs_
11e40                 | _do_strig_ret
11e40     2D 00 64 FD | 	ret
11e44                 | 
11e44                 | ' 
11e44                 | ' sub do_getpixel
11e44                 | _do_getpixel
11e44     00 4A 05 F6 | 	mov	COUNT_, #0
11e48     A8 00 A0 FD | 	call	#pushregs_
11e4c     24 F0 07 F1 | 	add	ptra, #36
11e50     69 00 00 FF 
11e54     44 E5 05 F1 | 	add	objptr, ##54084
11e58     F2 16 02 FB | 	rdlong	arg03, objptr
11e5c     0B 15 02 F6 | 	mov	arg02, arg03
11e60     01 14 66 F0 | 	shl	arg02, #1
11e64     0B 15 02 F1 | 	add	arg02, arg03
11e68     02 14 66 F0 | 	shl	arg02, #2
11e6c     03 00 00 FF 
11e70     04 E4 85 F1 | 	sub	objptr, ##1540
11e74     F2 14 02 F1 | 	add	arg02, objptr
11e78     0A 17 02 FB | 	rdlong	arg03, arg02
11e7c     18 4E 05 F1 | 	add	fp, #24
11e80     A7 16 62 FC | 	wrlong	arg03, fp
11e84                 | ' 
11e84                 | ' numpar=compiledline(lineptr_e).result.uresult
11e84                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
11e84     18 4E 85 F1 | 	sub	fp, #24
11e88     02 16 0E F2 | 	cmp	arg03, #2 wz
11e8c     66 00 00 FF 
11e90     40 E5 85 F1 | 	sub	objptr, ##52544
11e94     3C 00 90 AD |  if_e	jmp	#LR__1440
11e98     00 12 06 F6 | 	mov	arg01, #0
11e9c     00 CC B0 FD | 	call	#__system___getiolock_0425
11ea0     FD 12 02 F6 | 	mov	arg01, result1
11ea4     F4 72 B0 FD | 	call	#__system___lockmem
11ea8     46 01 00 FF 
11eac     87 14 06 F6 | 	mov	arg02, ##@LR__4628
11eb0     00 12 06 F6 | 	mov	arg01, #0
11eb4     00 16 06 F6 | 	mov	arg03, #0
11eb8     D4 7F B0 FD | 	call	#__system___basic_print_string
11ebc     00 12 06 F6 | 	mov	arg01, #0
11ec0     DC CB B0 FD | 	call	#__system___getiolock_0425
11ec4     FD 00 68 FC | 	wrlong	#0, result1
11ec8     27 12 06 F6 | 	mov	arg01, #39
11ecc     44 3D B0 FD | 	call	#_printerror
11ed0     B4 00 90 FD | 	jmp	#LR__1441
11ed4                 | LR__1440
11ed4     60 7A BF FD | 	call	#_pop
11ed8     FD 16 02 F6 | 	mov	arg03, result1
11edc     FE 14 02 F6 | 	mov	arg02, result2
11ee0     FF 12 02 F6 | 	mov	arg01, result3
11ee4     0C 4E 05 F1 | 	add	fp, #12
11ee8     A7 16 62 FC | 	wrlong	arg03, fp
11eec     04 4E 05 F1 | 	add	fp, #4
11ef0     A7 14 62 FC | 	wrlong	arg02, fp
11ef4     04 4E 05 F1 | 	add	fp, #4
11ef8     A7 12 62 FC | 	wrlong	arg01, fp
11efc     14 4E 85 F1 | 	sub	fp, #20
11f00     34 7A BF FD | 	call	#_pop
11f04     FF 16 02 F6 | 	mov	arg03, result3
11f08     A7 FA 61 FC | 	wrlong	result1, fp
11f0c     04 4E 05 F1 | 	add	fp, #4
11f10     A7 FC 61 FC | 	wrlong	result2, fp
11f14     04 4E 05 F1 | 	add	fp, #4
11f18     A7 16 62 FC | 	wrlong	arg03, fp
11f1c     08 4E 85 F1 | 	sub	fp, #8
11f20     A7 12 02 F6 | 	mov	arg01, fp
11f24     A8 F1 BF FD | 	call	#_converttoint
11f28     1C 4E 05 F1 | 	add	fp, #28
11f2c     A7 FA 61 FC | 	wrlong	result1, fp
11f30     10 4E 85 F1 | 	sub	fp, #16
11f34     A7 12 02 F6 | 	mov	arg01, fp
11f38     0C 4E 85 F1 | 	sub	fp, #12
11f3c     90 F1 BF FD | 	call	#_converttoint
11f40     FD 16 02 F6 | 	mov	arg03, result1
11f44     20 4E 05 F1 | 	add	fp, #32
11f48     A7 16 62 FC | 	wrlong	arg03, fp
11f4c     F2 12 02 FB | 	rdlong	arg01, objptr
11f50     04 4E 85 F1 | 	sub	fp, #4
11f54     A7 FE 01 FB | 	rdlong	result3, fp
11f58     FF 12 02 F1 | 	add	arg01, result3
11f5c     1C 4E 85 F1 | 	sub	fp, #28
11f60     0A 16 66 F0 | 	shl	arg03, #10
11f64     0B 13 02 F1 | 	add	arg01, arg03
11f68     0C 3E B0 FD | 	call	#_pspeek
11f6c     FD FA E1 F8 | 	getbyte	result1, result1, #0
11f70     A7 FA 61 FC | 	wrlong	result1, fp
11f74     08 4E 05 F1 | 	add	fp, #8
11f78     A7 3A 68 FC | 	wrlong	#29, fp
11f7c     08 4E 85 F1 | 	sub	fp, #8
11f80     A7 12 02 F6 | 	mov	arg01, fp
11f84     48 7A BF FD | 	call	#_push
11f88                 | LR__1441
11f88     A7 F0 03 F6 | 	mov	ptra, fp
11f8c     B2 00 A0 FD | 	call	#popregs_
11f90                 | _do_getpixel_ret
11f90     2D 00 64 FD | 	ret
11f94                 | 
11f94                 | ' 
11f94                 | ' 
11f94                 | ' 
11f94                 | ' sub do_defsprite
11f94                 | _do_defsprite
11f94     07 4A 05 F6 | 	mov	COUNT_, #7
11f98     A8 00 A0 FD | 	call	#pushregs_
11f9c     5C F0 07 F1 | 	add	ptra, #92
11fa0     94 79 BF FD | 	call	#_pop
11fa4     FD 16 02 F6 | 	mov	arg03, result1
11fa8     FE 14 02 F6 | 	mov	arg02, result2
11fac     FF 12 02 F6 | 	mov	arg01, result3
11fb0     30 4E 05 F1 | 	add	fp, #48
11fb4     A7 16 62 FC | 	wrlong	arg03, fp
11fb8     04 4E 05 F1 | 	add	fp, #4
11fbc     A7 14 62 FC | 	wrlong	arg02, fp
11fc0     04 4E 05 F1 | 	add	fp, #4
11fc4     A7 12 62 FC | 	wrlong	arg01, fp
11fc8     38 4E 85 F1 | 	sub	fp, #56
11fcc     68 79 BF FD | 	call	#_pop
11fd0     FD 16 02 F6 | 	mov	arg03, result1
11fd4     FE 14 02 F6 | 	mov	arg02, result2
11fd8     FF 12 02 F6 | 	mov	arg01, result3
11fdc     24 4E 05 F1 | 	add	fp, #36
11fe0     A7 16 62 FC | 	wrlong	arg03, fp
11fe4     04 4E 05 F1 | 	add	fp, #4
11fe8     A7 14 62 FC | 	wrlong	arg02, fp
11fec     04 4E 05 F1 | 	add	fp, #4
11ff0     A7 12 62 FC | 	wrlong	arg01, fp
11ff4     2C 4E 85 F1 | 	sub	fp, #44
11ff8     3C 79 BF FD | 	call	#_pop
11ffc     FD 16 02 F6 | 	mov	arg03, result1
12000     FE 14 02 F6 | 	mov	arg02, result2
12004     FF 12 02 F6 | 	mov	arg01, result3
12008     18 4E 05 F1 | 	add	fp, #24
1200c     A7 16 62 FC | 	wrlong	arg03, fp
12010     04 4E 05 F1 | 	add	fp, #4
12014     A7 14 62 FC | 	wrlong	arg02, fp
12018     04 4E 05 F1 | 	add	fp, #4
1201c     A7 12 62 FC | 	wrlong	arg01, fp
12020     20 4E 85 F1 | 	sub	fp, #32
12024     10 79 BF FD | 	call	#_pop
12028     FD 16 02 F6 | 	mov	arg03, result1
1202c     FE 14 02 F6 | 	mov	arg02, result2
12030     FF 12 02 F6 | 	mov	arg01, result3
12034     0C 4E 05 F1 | 	add	fp, #12
12038     A7 16 62 FC | 	wrlong	arg03, fp
1203c     04 4E 05 F1 | 	add	fp, #4
12040     A7 14 62 FC | 	wrlong	arg02, fp
12044     04 4E 05 F1 | 	add	fp, #4
12048     A7 12 62 FC | 	wrlong	arg01, fp
1204c     14 4E 85 F1 | 	sub	fp, #20
12050     E4 78 BF FD | 	call	#_pop
12054     FF 16 02 F6 | 	mov	arg03, result3
12058     A7 FA 61 FC | 	wrlong	result1, fp
1205c     04 4E 05 F1 | 	add	fp, #4
12060     A7 FC 61 FC | 	wrlong	result2, fp
12064     04 4E 05 F1 | 	add	fp, #4
12068     A7 16 62 FC | 	wrlong	arg03, fp
1206c     08 4E 85 F1 | 	sub	fp, #8
12070     A7 12 02 F6 | 	mov	arg01, fp
12074     58 F0 BF FD | 	call	#_converttoint
12078     3C 4E 05 F1 | 	add	fp, #60
1207c     A7 FA 61 FC | 	wrlong	result1, fp
12080     30 4E 85 F1 | 	sub	fp, #48
12084     A7 12 02 F6 | 	mov	arg01, fp
12088     0C 4E 85 F1 | 	sub	fp, #12
1208c     40 F0 BF FD | 	call	#_converttoint
12090     40 4E 05 F1 | 	add	fp, #64
12094     A7 FA 61 FC | 	wrlong	result1, fp
12098     28 4E 85 F1 | 	sub	fp, #40
1209c     A7 12 02 F6 | 	mov	arg01, fp
120a0     18 4E 85 F1 | 	sub	fp, #24
120a4     28 F0 BF FD | 	call	#_converttoint
120a8     44 4E 05 F1 | 	add	fp, #68
120ac     A7 FA 61 FC | 	wrlong	result1, fp
120b0     20 4E 85 F1 | 	sub	fp, #32
120b4     A7 12 02 F6 | 	mov	arg01, fp
120b8     24 4E 85 F1 | 	sub	fp, #36
120bc     10 F0 BF FD | 	call	#_converttoint
120c0     48 4E 05 F1 | 	add	fp, #72
120c4     A7 FA 61 FC | 	wrlong	result1, fp
120c8     18 4E 85 F1 | 	sub	fp, #24
120cc     A7 12 02 F6 | 	mov	arg01, fp
120d0     30 4E 85 F1 | 	sub	fp, #48
120d4     F8 EF BF FD | 	call	#_converttoint
120d8     4C 4E 05 F1 | 	add	fp, #76
120dc     A7 FA 61 FC | 	wrlong	result1, fp
120e0                 | ' 
120e0                 | ' t5=pop()
120e0                 | ' t4=pop()
120e0                 | ' t3=pop()
120e0                 | ' t2=pop()
120e0                 | ' t1=pop()
120e0                 | ' 
120e0                 | ' ' do convert, defsprite is not a racing command
120e0                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
120e0                 | '  
120e0                 | ' ' todo: check parameters for linits
120e0                 | ' if sprite(a1)<> nil then delete(sprite(a1))
120e0     10 4E 85 F1 | 	sub	fp, #16
120e4     A7 16 02 FB | 	rdlong	arg03, fp
120e8     3C 4E 85 F1 | 	sub	fp, #60
120ec     02 16 66 F0 | 	shl	arg03, #2
120f0     7A 00 00 FF 
120f4     F8 E4 05 F1 | 	add	objptr, ##62712
120f8     F2 16 02 F1 | 	add	arg03, objptr
120fc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
12100     7A 00 00 FF 
12104     F8 E4 85 F1 | 	sub	objptr, ##62712
12108     2C 00 90 AD |  if_e	jmp	#LR__1450
1210c     3C 4E 05 F1 | 	add	fp, #60
12110     A7 16 02 FB | 	rdlong	arg03, fp
12114     3C 4E 85 F1 | 	sub	fp, #60
12118     02 16 66 F0 | 	shl	arg03, #2
1211c     7A 00 00 FF 
12120     F8 E4 05 F1 | 	add	objptr, ##62712
12124     F2 16 02 F1 | 	add	arg03, objptr
12128     0B 13 02 FB | 	rdlong	arg01, arg03
1212c     7A 00 00 FF 
12130     F8 E4 85 F1 | 	sub	objptr, ##62712
12134     58 AF B0 FD | 	call	#__system___gc_free
12138                 | LR__1450
12138     3C 4E 05 F1 | 	add	fp, #60
1213c     A7 1E 02 FB | 	rdlong	local01, fp
12140     0C 4E 05 F1 | 	add	fp, #12
12144     A7 16 02 FB | 	rdlong	arg03, fp
12148     04 4E 05 F1 | 	add	fp, #4
1214c     A7 14 02 FB | 	rdlong	arg02, fp
12150     0A 17 02 FD | 	qmul	arg03, arg02
12154     02 1E 66 F0 | 	shl	local01, #2
12158     7A 00 00 FF 
1215c     F8 E4 05 F1 | 	add	objptr, ##62712
12160     F2 1E 02 F1 | 	add	local01, objptr
12164     4C 4E 85 F1 | 	sub	fp, #76
12168     7A 00 00 FF 
1216c     F8 E4 85 F1 | 	sub	objptr, ##62712
12170     18 12 62 FD | 	getqx	arg01
12174     DC AD B0 FD | 	call	#__system___gc_alloc_managed
12178     0F FB 61 FC | 	wrlong	result1, local01
1217c                 | ' for y=a3 to a3+a5-1
1217c     44 4E 05 F1 | 	add	fp, #68
12180     A7 20 02 FB | 	rdlong	local02, fp
12184     0C 4E 05 F1 | 	add	fp, #12
12188     A7 20 62 FC | 	wrlong	local02, fp
1218c     0C 4E 85 F1 | 	sub	fp, #12
12190     A7 22 02 FB | 	rdlong	local03, fp
12194     08 4E 05 F1 | 	add	fp, #8
12198     A7 24 02 FB | 	rdlong	local04, fp
1219c     4C 4E 85 F1 | 	sub	fp, #76
121a0     12 23 02 F1 | 	add	local03, local04
121a4                 | LR__1451
121a4     50 4E 05 F1 | 	add	fp, #80
121a8     A7 20 02 FB | 	rdlong	local02, fp
121ac     50 4E 85 F1 | 	sub	fp, #80
121b0     11 21 52 F2 | 	cmps	local02, local03 wc
121b4     10 01 90 3D |  if_ae	jmp	#LR__1454
121b8                 | '   for x=a2 to a4+a2-1
121b8     40 4E 05 F1 | 	add	fp, #64
121bc     A7 1E 02 FB | 	rdlong	local01, fp
121c0     7A 00 00 FF 
121c4     6C E5 05 F1 | 	add	objptr, ##62828
121c8     F2 1E 62 FC | 	wrlong	local01, objptr
121cc     7A 00 00 FF 
121d0     6C E5 85 F1 | 	sub	objptr, ##62828
121d4     08 4E 05 F1 | 	add	fp, #8
121d8     A7 26 02 FB | 	rdlong	local05, fp
121dc     08 4E 85 F1 | 	sub	fp, #8
121e0     A7 28 02 FB | 	rdlong	local06, fp
121e4     40 4E 85 F1 | 	sub	fp, #64
121e8     14 27 02 F1 | 	add	local05, local06
121ec                 | LR__1452
121ec     7A 00 00 FF 
121f0     6C E5 05 F1 | 	add	objptr, ##62828
121f4     F2 1E 02 FB | 	rdlong	local01, objptr
121f8     7A 00 00 FF 
121fc     6C E5 85 F1 | 	sub	objptr, ##62828
12200     13 1F 52 F2 | 	cmps	local01, local05 wc
12204     A8 00 90 3D |  if_ae	jmp	#LR__1453
12208     3C 4E 05 F1 | 	add	fp, #60
1220c     A7 28 02 FB | 	rdlong	local06, fp
12210     04 4E 05 F1 | 	add	fp, #4
12214     A7 24 02 FB | 	rdlong	local04, fp
12218     10 4E 05 F1 | 	add	fp, #16
1221c     A7 20 02 FB | 	rdlong	local02, fp
12220     10 1F 02 F6 | 	mov	local01, local02
12224     0C 4E 85 F1 | 	sub	fp, #12
12228     A7 16 02 FB | 	rdlong	arg03, fp
1222c     0B 1F 82 F1 | 	sub	local01, arg03
12230     04 4E 05 F1 | 	add	fp, #4
12234     A7 16 02 FB | 	rdlong	arg03, fp
12238     0B 1F 02 FD | 	qmul	local01, arg03
1223c     02 28 66 F0 | 	shl	local06, #2
12240     7A 00 00 FF 
12244     F8 E4 05 F1 | 	add	objptr, ##62712
12248     F2 28 02 F1 | 	add	local06, objptr
1224c     14 29 02 FB | 	rdlong	local06, local06
12250     74 E4 05 F1 | 	add	objptr, #116
12254     F2 1E 02 FB | 	rdlong	local01, objptr
12258     7A 00 00 FF 
1225c     6C E5 85 F1 | 	sub	objptr, ##62828
12260     0F 2B 02 F6 | 	mov	local07, local01
12264     12 2B 82 F1 | 	sub	local07, local04
12268     F2 12 02 FB | 	rdlong	arg01, objptr
1226c     0F 13 02 F1 | 	add	arg01, local01
12270     48 4E 85 F1 | 	sub	fp, #72
12274     0A 20 66 F0 | 	shl	local02, #10
12278     10 13 02 F1 | 	add	arg01, local02
1227c     18 24 62 FD | 	getqx	local04
12280     12 2B 02 F1 | 	add	local07, local04
12284     14 2B 02 F1 | 	add	local07, local06
12288     EC 3A B0 FD | 	call	#_pspeek
1228c     15 FB 41 FC | 	wrbyte	result1, local07
12290     7A 00 00 FF 
12294     6C E5 05 F1 | 	add	objptr, ##62828
12298     F2 2A 02 FB | 	rdlong	local07, objptr
1229c     01 2A 06 F1 | 	add	local07, #1
122a0     F2 2A 62 FC | 	wrlong	local07, objptr
122a4     7A 00 00 FF 
122a8     6C E5 85 F1 | 	sub	objptr, ##62828
122ac     3C FF 9F FD | 	jmp	#LR__1452
122b0                 | LR__1453
122b0     50 4E 05 F1 | 	add	fp, #80
122b4     A7 2A 02 FB | 	rdlong	local07, fp
122b8     01 2A 06 F1 | 	add	local07, #1
122bc     A7 2A 62 FC | 	wrlong	local07, fp
122c0     50 4E 85 F1 | 	sub	fp, #80
122c4     DC FE 9F FD | 	jmp	#LR__1451
122c8                 | LR__1454
122c8     3C 4E 05 F1 | 	add	fp, #60
122cc     A7 2A 02 FB | 	rdlong	local07, fp
122d0     15 13 02 F6 | 	mov	arg01, local07
122d4     3C 4E 85 F1 | 	sub	fp, #60
122d8     02 2A 66 F0 | 	shl	local07, #2
122dc     7A 00 00 FF 
122e0     F8 E4 05 F1 | 	add	objptr, ##62712
122e4     F2 2A 02 F1 | 	add	local07, objptr
122e8     15 15 02 FB | 	rdlong	arg02, local07
122ec     7A 00 00 FF 
122f0     F8 E4 85 F1 | 	sub	objptr, ##62712
122f4     34 4E B0 FD | 	call	#_hg010b_spin2_setspriteptr
122f8     3C 4E 05 F1 | 	add	fp, #60
122fc     A7 12 02 FB | 	rdlong	arg01, fp
12300     0C 4E 05 F1 | 	add	fp, #12
12304     A7 14 02 FB | 	rdlong	arg02, fp
12308     04 4E 05 F1 | 	add	fp, #4
1230c     A7 16 02 FB | 	rdlong	arg03, fp
12310     4C 4E 85 F1 | 	sub	fp, #76
12314     88 4E B0 FD | 	call	#_hg010b_spin2_setspritesize
12318     A7 F0 03 F6 | 	mov	ptra, fp
1231c     B2 00 A0 FD | 	call	#popregs_
12320                 | _do_defsprite_ret
12320     2D 00 64 FD | 	ret
12324                 | 
12324                 | ' 
12324                 | ' sub do_sprite
12324                 | _do_sprite
12324     00 4A 05 F6 | 	mov	COUNT_, #0
12328     A8 00 A0 FD | 	call	#pushregs_
1232c     30 F0 07 F1 | 	add	ptra, #48
12330     04 76 BF FD | 	call	#_pop
12334     FD 16 02 F6 | 	mov	arg03, result1
12338     FE 14 02 F6 | 	mov	arg02, result2
1233c     FF 12 02 F6 | 	mov	arg01, result3
12340     18 4E 05 F1 | 	add	fp, #24
12344     A7 16 62 FC | 	wrlong	arg03, fp
12348     04 4E 05 F1 | 	add	fp, #4
1234c     A7 14 62 FC | 	wrlong	arg02, fp
12350     04 4E 05 F1 | 	add	fp, #4
12354     A7 12 62 FC | 	wrlong	arg01, fp
12358     20 4E 85 F1 | 	sub	fp, #32
1235c     D8 75 BF FD | 	call	#_pop
12360     FD 16 02 F6 | 	mov	arg03, result1
12364     FE 14 02 F6 | 	mov	arg02, result2
12368     FF 12 02 F6 | 	mov	arg01, result3
1236c     0C 4E 05 F1 | 	add	fp, #12
12370     A7 16 62 FC | 	wrlong	arg03, fp
12374     04 4E 05 F1 | 	add	fp, #4
12378     A7 14 62 FC | 	wrlong	arg02, fp
1237c     04 4E 05 F1 | 	add	fp, #4
12380     A7 12 62 FC | 	wrlong	arg01, fp
12384     14 4E 85 F1 | 	sub	fp, #20
12388     AC 75 BF FD | 	call	#_pop
1238c     FF 16 02 F6 | 	mov	arg03, result3
12390     A7 FA 61 FC | 	wrlong	result1, fp
12394     04 4E 05 F1 | 	add	fp, #4
12398     A7 FC 61 FC | 	wrlong	result2, fp
1239c     04 4E 05 F1 | 	add	fp, #4
123a0     A7 16 62 FC | 	wrlong	arg03, fp
123a4     08 4E 85 F1 | 	sub	fp, #8
123a8     A7 12 02 F6 | 	mov	arg01, fp
123ac     20 ED BF FD | 	call	#_converttoint
123b0     24 4E 05 F1 | 	add	fp, #36
123b4     A7 FA 61 FC | 	wrlong	result1, fp
123b8     18 4E 85 F1 | 	sub	fp, #24
123bc     A7 12 02 F6 | 	mov	arg01, fp
123c0     0C 4E 85 F1 | 	sub	fp, #12
123c4     08 ED BF FD | 	call	#_converttoint
123c8     28 4E 05 F1 | 	add	fp, #40
123cc     A7 FA 61 FC | 	wrlong	result1, fp
123d0     10 4E 85 F1 | 	sub	fp, #16
123d4     A7 12 02 F6 | 	mov	arg01, fp
123d8     18 4E 85 F1 | 	sub	fp, #24
123dc     F0 EC BF FD | 	call	#_converttoint
123e0     2C 4E 05 F1 | 	add	fp, #44
123e4     A7 FA 61 FC | 	wrlong	result1, fp
123e8     08 4E 85 F1 | 	sub	fp, #8
123ec     A7 12 02 FB | 	rdlong	arg01, fp
123f0     04 4E 05 F1 | 	add	fp, #4
123f4     A7 14 02 FB | 	rdlong	arg02, fp
123f8     FD 16 02 F6 | 	mov	arg03, result1
123fc     28 4E 85 F1 | 	sub	fp, #40
12400     50 4D B0 FD | 	call	#_hg010b_spin2_setspritepos
12404     A7 F0 03 F6 | 	mov	ptra, fp
12408     B2 00 A0 FD | 	call	#popregs_
1240c                 | _do_sprite_ret
1240c     2D 00 64 FD | 	ret
12410                 | 
12410                 | ' 
12410                 | ' sub do_mousex
12410                 | _do_mousex
12410     00 4A 05 F6 | 	mov	COUNT_, #0
12414     A8 00 A0 FD | 	call	#pushregs_
12418     0C F0 07 F1 | 	add	ptra, #12
1241c     08 4E 05 F1 | 	add	fp, #8
12420     A7 3A 68 FC | 	wrlong	#29, fp
12424     08 4E 85 F1 | 	sub	fp, #8
12428     7A 00 00 FF 
1242c     B0 E4 05 F1 | 	add	objptr, ##62640
12430     F2 12 02 FB | 	rdlong	arg01, objptr
12434     7A 00 00 FF 
12438     B0 E4 85 F1 | 	sub	objptr, ##62640
1243c     A7 12 62 FC | 	wrlong	arg01, fp
12440     A7 12 02 F6 | 	mov	arg01, fp
12444     88 75 BF FD | 	call	#_push
12448     A7 F0 03 F6 | 	mov	ptra, fp
1244c     B2 00 A0 FD | 	call	#popregs_
12450                 | _do_mousex_ret
12450     2D 00 64 FD | 	ret
12454                 | 
12454                 | ' 
12454                 | ' sub do_mousey
12454                 | _do_mousey
12454     00 4A 05 F6 | 	mov	COUNT_, #0
12458     A8 00 A0 FD | 	call	#pushregs_
1245c     0C F0 07 F1 | 	add	ptra, #12
12460     08 4E 05 F1 | 	add	fp, #8
12464     A7 3A 68 FC | 	wrlong	#29, fp
12468     08 4E 85 F1 | 	sub	fp, #8
1246c     7A 00 00 FF 
12470     B4 E4 05 F1 | 	add	objptr, ##62644
12474     F2 12 02 FB | 	rdlong	arg01, objptr
12478     7A 00 00 FF 
1247c     B4 E4 85 F1 | 	sub	objptr, ##62644
12480     A7 12 62 FC | 	wrlong	arg01, fp
12484     A7 12 02 F6 | 	mov	arg01, fp
12488     44 75 BF FD | 	call	#_push
1248c     A7 F0 03 F6 | 	mov	ptra, fp
12490     B2 00 A0 FD | 	call	#popregs_
12494                 | _do_mousey_ret
12494     2D 00 64 FD | 	ret
12498                 | 
12498                 | ' 
12498                 | ' sub do_mousew
12498                 | _do_mousew
12498     00 4A 05 F6 | 	mov	COUNT_, #0
1249c     A8 00 A0 FD | 	call	#pushregs_
124a0     0C F0 07 F1 | 	add	ptra, #12
124a4     08 4E 05 F1 | 	add	fp, #8
124a8     A7 38 68 FC | 	wrlong	#28, fp
124ac     08 4E 85 F1 | 	sub	fp, #8
124b0     7A 00 00 FF 
124b4     BC E4 05 F1 | 	add	objptr, ##62652
124b8     F2 12 02 FB | 	rdlong	arg01, objptr
124bc     7A 00 00 FF 
124c0     BC E4 85 F1 | 	sub	objptr, ##62652
124c4     A7 12 62 FC | 	wrlong	arg01, fp
124c8     A7 12 02 F6 | 	mov	arg01, fp
124cc     00 75 BF FD | 	call	#_push
124d0     A7 F0 03 F6 | 	mov	ptra, fp
124d4     B2 00 A0 FD | 	call	#popregs_
124d8                 | _do_mousew_ret
124d8     2D 00 64 FD | 	ret
124dc                 | 
124dc                 | ' 
124dc                 | ' sub do_mousek
124dc                 | _do_mousek
124dc     00 4A 05 F6 | 	mov	COUNT_, #0
124e0     A8 00 A0 FD | 	call	#pushregs_
124e4     0C F0 07 F1 | 	add	ptra, #12
124e8     08 4E 05 F1 | 	add	fp, #8
124ec     A7 3A 68 FC | 	wrlong	#29, fp
124f0     08 4E 85 F1 | 	sub	fp, #8
124f4     7A 00 00 FF 
124f8     B8 E4 05 F1 | 	add	objptr, ##62648
124fc     F2 12 02 FB | 	rdlong	arg01, objptr
12500     7A 00 00 FF 
12504     B8 E4 85 F1 | 	sub	objptr, ##62648
12508     A7 12 62 FC | 	wrlong	arg01, fp
1250c     A7 12 02 F6 | 	mov	arg01, fp
12510     BC 74 BF FD | 	call	#_push
12514     A7 F0 03 F6 | 	mov	ptra, fp
12518     B2 00 A0 FD | 	call	#popregs_
1251c                 | _do_mousek_ret
1251c     2D 00 64 FD | 	ret
12520                 | 
12520                 | ' 
12520                 | ' 
12520                 | ' sub do_rdpin
12520                 | _do_rdpin
12520     00 4A 05 F6 | 	mov	COUNT_, #0
12524     A8 00 A0 FD | 	call	#pushregs_
12528     0C F0 07 F1 | 	add	ptra, #12
1252c     08 74 BF FD | 	call	#_pop
12530     A7 FA 61 FC | 	wrlong	result1, fp
12534     04 4E 05 F1 | 	add	fp, #4
12538     A7 FC 61 FC | 	wrlong	result2, fp
1253c     04 4E 05 F1 | 	add	fp, #4
12540     A7 FE 61 FC | 	wrlong	result3, fp
12544     08 4E 85 F1 | 	sub	fp, #8
12548     A7 12 02 F6 | 	mov	arg01, fp
1254c     80 EB BF FD | 	call	#_converttoint
12550     FD FA 89 FA | 	rdpin	result1, result1
12554     7A 00 00 FF 
12558     C4 E5 05 F1 | 	add	objptr, ##62916
1255c     F2 FA 61 FC | 	wrlong	result1, objptr
12560     7A 00 00 FF 
12564     C4 E5 85 F1 | 	sub	objptr, ##62916
12568     08 4E 05 F1 | 	add	fp, #8
1256c     A7 3A 68 FC | 	wrlong	#29, fp
12570     08 4E 85 F1 | 	sub	fp, #8
12574     A7 08 68 FC | 	wrlong	#4, fp
12578     A7 12 02 F6 | 	mov	arg01, fp
1257c     50 74 BF FD | 	call	#_push
12580     A7 F0 03 F6 | 	mov	ptra, fp
12584     B2 00 A0 FD | 	call	#popregs_
12588                 | _do_rdpin_ret
12588     2D 00 64 FD | 	ret
1258c                 | 
1258c                 | ' 
1258c                 | ' sub do_rqpin
1258c                 | _do_rqpin
1258c     00 4A 05 F6 | 	mov	COUNT_, #0
12590     A8 00 A0 FD | 	call	#pushregs_
12594     0C F0 07 F1 | 	add	ptra, #12
12598     9C 73 BF FD | 	call	#_pop
1259c     A7 FA 61 FC | 	wrlong	result1, fp
125a0     04 4E 05 F1 | 	add	fp, #4
125a4     A7 FC 61 FC | 	wrlong	result2, fp
125a8     04 4E 05 F1 | 	add	fp, #4
125ac     A7 FE 61 FC | 	wrlong	result3, fp
125b0     08 4E 85 F1 | 	sub	fp, #8
125b4     A7 12 02 F6 | 	mov	arg01, fp
125b8     14 EB BF FD | 	call	#_converttoint
125bc     FD 12 02 F6 | 	mov	arg01, result1
125c0     00 FA 05 F6 | 	mov	result1, #0
125c4     09 FB 81 FA | 	rqpin	result1, arg01
125c8     7A 00 00 FF 
125cc     C4 E5 05 F1 | 	add	objptr, ##62916
125d0     F2 FA 61 FC | 	wrlong	result1, objptr
125d4     7A 00 00 FF 
125d8     C4 E5 85 F1 | 	sub	objptr, ##62916
125dc     08 4E 05 F1 | 	add	fp, #8
125e0     A7 3A 68 FC | 	wrlong	#29, fp
125e4     08 4E 85 F1 | 	sub	fp, #8
125e8     A7 08 68 FC | 	wrlong	#4, fp
125ec     A7 12 02 F6 | 	mov	arg01, fp
125f0     DC 73 BF FD | 	call	#_push
125f4     A7 F0 03 F6 | 	mov	ptra, fp
125f8     B2 00 A0 FD | 	call	#popregs_
125fc                 | _do_rqpin_ret
125fc     2D 00 64 FD | 	ret
12600                 | 
12600                 | ' 
12600                 | ' sub do_pinread
12600                 | _do_pinread
12600     00 4A 05 F6 | 	mov	COUNT_, #0
12604     A8 00 A0 FD | 	call	#pushregs_
12608     0C F0 07 F1 | 	add	ptra, #12
1260c     28 73 BF FD | 	call	#_pop
12610     A7 FA 61 FC | 	wrlong	result1, fp
12614     04 4E 05 F1 | 	add	fp, #4
12618     A7 FC 61 FC | 	wrlong	result2, fp
1261c     04 4E 05 F1 | 	add	fp, #4
12620     A7 FE 61 FC | 	wrlong	result3, fp
12624     08 4E 85 F1 | 	sub	fp, #8
12628     A7 12 02 F6 | 	mov	arg01, fp
1262c     A0 EA BF FD | 	call	#_converttoint
12630     FD 12 02 F6 | 	mov	arg01, result1
12634     20 12 CE F7 | 	test	arg01, #32 wz
12638     FF FB 01 56 |  if_ne	mov	result1, inb
1263c     FE FB 01 A6 |  if_e	mov	result1, ina
12640     09 FB 41 F0 | 	shr	result1, arg01
12644     06 12 46 F0 | 	shr	arg01, #6
12648     09 FB 41 F7 | 	zerox	result1, arg01
1264c     7A 00 00 FF 
12650     C4 E5 05 F1 | 	add	objptr, ##62916
12654     F2 FA 61 FC | 	wrlong	result1, objptr
12658     7A 00 00 FF 
1265c     C4 E5 85 F1 | 	sub	objptr, ##62916
12660     08 4E 05 F1 | 	add	fp, #8
12664     A7 3A 68 FC | 	wrlong	#29, fp
12668     08 4E 85 F1 | 	sub	fp, #8
1266c     A7 08 68 FC | 	wrlong	#4, fp
12670     A7 12 02 F6 | 	mov	arg01, fp
12674     58 73 BF FD | 	call	#_push
12678     A7 F0 03 F6 | 	mov	ptra, fp
1267c     B2 00 A0 FD | 	call	#popregs_
12680                 | _do_pinread_ret
12680     2D 00 64 FD | 	ret
12684                 | 
12684                 | ' 
12684                 | ' sub do_gettime
12684                 | _do_gettime
12684     02 4A 05 F6 | 	mov	COUNT_, #2
12688     A8 00 A0 FD | 	call	#pushregs_
1268c     14 F0 07 F1 | 	add	ptra, #20
12690                 | ' 
12690                 | ' const asm 
12690     1A 1E 72 FD | 	getct	local01 wc
12694     1A 20 62 FD | 	getct	local02
12698                 | ' 
12698                 | ' return hi1, lo1
12698     10 FD 01 F6 | 	mov	result2, local02
1269c     A7 1E 62 FC | 	wrlong	local01, fp
126a0     04 4E 05 F1 | 	add	fp, #4
126a4     A7 FC 61 FC | 	wrlong	result2, fp
126a8     0C 4E 05 F1 | 	add	fp, #12
126ac     A7 3A 68 FC | 	wrlong	#29, fp
126b0     0C 4E 85 F1 | 	sub	fp, #12
126b4     A7 12 02 FB | 	rdlong	arg01, fp
126b8     04 4E 05 F1 | 	add	fp, #4
126bc     A7 12 62 FC | 	wrlong	arg01, fp
126c0     08 4E 85 F1 | 	sub	fp, #8
126c4     A7 12 02 FB | 	rdlong	arg01, fp
126c8     0C 4E 05 F1 | 	add	fp, #12
126cc     A7 12 62 FC | 	wrlong	arg01, fp
126d0     04 4E 85 F1 | 	sub	fp, #4
126d4     A7 12 02 F6 | 	mov	arg01, fp
126d8     08 4E 85 F1 | 	sub	fp, #8
126dc     F0 72 BF FD | 	call	#_push
126e0     A7 F0 03 F6 | 	mov	ptra, fp
126e4     B2 00 A0 FD | 	call	#popregs_
126e8                 | _do_gettime_ret
126e8     2D 00 64 FD | 	ret
126ec                 | 
126ec                 | '    
126ec                 | ' 
126ec                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
126ec                 | ' 
126ec                 | ' '' ----------------------------- Clear the screen
126ec                 | ' 
126ec                 | ' sub do_cls
126ec                 | _do_cls
126ec     56 00 00 FF 
126f0     00 E5 05 F1 | 	add	objptr, ##44288
126f4     F2 12 02 FB | 	rdlong	arg01, objptr
126f8     04 E4 85 F1 | 	sub	objptr, #4
126fc     F2 14 02 FB | 	rdlong	arg02, objptr
12700     56 00 00 FF 
12704     FC E4 85 F1 | 	sub	objptr, ##44284
12708     4C 57 B0 FD | 	call	#_hg010b_spin2_cls
1270c     56 00 00 FF 
12710     00 E5 05 F1 | 	add	objptr, ##44288
12714     F2 14 02 FB | 	rdlong	arg02, objptr
12718     14 E4 85 F1 | 	sub	objptr, #20
1271c     F2 14 62 FC | 	wrlong	arg02, objptr
12720     56 00 00 FF 
12724     EC E4 85 F1 | 	sub	objptr, ##44268
12728                 | ' cls(ink,paper): plot_color=ink: print
12728     00 12 06 F6 | 	mov	arg01, #0
1272c     70 C3 B0 FD | 	call	#__system___getiolock_0425
12730     FD 12 02 F6 | 	mov	arg01, result1
12734     64 6A B0 FD | 	call	#__system___lockmem
12738     00 12 06 F6 | 	mov	arg01, #0
1273c     0A 14 06 F6 | 	mov	arg02, #10
12740     00 16 06 F6 | 	mov	arg03, #0
12744     F0 76 B0 FD | 	call	#__system___basic_print_char
12748     00 12 06 F6 | 	mov	arg01, #0
1274c     50 C3 B0 FD | 	call	#__system___getiolock_0425
12750     FD 00 68 FC | 	wrlong	#0, result1
12754                 | _do_cls_ret
12754     2D 00 64 FD | 	ret
12758                 | 
12758                 | ' 
12758                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
12758                 | ' 
12758                 | ' sub do_color
12758                 | _do_color
12758     03 4A 05 F6 | 	mov	COUNT_, #3
1275c     A8 00 A0 FD | 	call	#pushregs_
12760     D4 71 BF FD | 	call	#_pop
12764     FD 1E 02 F6 | 	mov	local01, result1
12768     FE 20 02 F6 | 	mov	local02, result2
1276c     FF 22 02 F6 | 	mov	local03, result3
12770     56 00 00 FF 
12774     EC E4 05 F1 | 	add	objptr, ##44268
12778     F2 1E 62 FC | 	wrlong	local01, objptr
1277c     56 00 00 FF 
12780     EC E4 85 F1 | 	sub	objptr, ##44268
12784     A7 F0 03 F6 | 	mov	ptra, fp
12788     B2 00 A0 FD | 	call	#popregs_
1278c                 | _do_color_ret
1278c     2D 00 64 FD | 	ret
12790                 | 
12790                 | ' 
12790                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
12790                 | ' 
12790                 | ' sub do_plot
12790                 | _do_plot
12790     00 4A 05 F6 | 	mov	COUNT_, #0
12794     A8 00 A0 FD | 	call	#pushregs_
12798     20 F0 07 F1 | 	add	ptra, #32
1279c     98 71 BF FD | 	call	#_pop
127a0     FD 16 02 F6 | 	mov	arg03, result1
127a4     FE 14 02 F6 | 	mov	arg02, result2
127a8     FF 12 02 F6 | 	mov	arg01, result3
127ac     0C 4E 05 F1 | 	add	fp, #12
127b0     A7 16 62 FC | 	wrlong	arg03, fp
127b4     04 4E 05 F1 | 	add	fp, #4
127b8     A7 14 62 FC | 	wrlong	arg02, fp
127bc     04 4E 05 F1 | 	add	fp, #4
127c0     A7 12 62 FC | 	wrlong	arg01, fp
127c4     14 4E 85 F1 | 	sub	fp, #20
127c8     6C 71 BF FD | 	call	#_pop
127cc     FF 16 02 F6 | 	mov	arg03, result3
127d0     A7 FA 61 FC | 	wrlong	result1, fp
127d4     04 4E 05 F1 | 	add	fp, #4
127d8     A7 FC 61 FC | 	wrlong	result2, fp
127dc     04 4E 05 F1 | 	add	fp, #4
127e0     A7 16 62 FC | 	wrlong	arg03, fp
127e4     08 4E 85 F1 | 	sub	fp, #8
127e8     A7 12 02 F6 | 	mov	arg01, fp
127ec     E0 E8 BF FD | 	call	#_converttoint
127f0     18 4E 05 F1 | 	add	fp, #24
127f4     A7 FA 61 FC | 	wrlong	result1, fp
127f8     0C 4E 85 F1 | 	sub	fp, #12
127fc     A7 12 02 F6 | 	mov	arg01, fp
12800     0C 4E 85 F1 | 	sub	fp, #12
12804     C8 E8 BF FD | 	call	#_converttoint
12808     1C 4E 05 F1 | 	add	fp, #28
1280c     A7 FA 61 FC | 	wrlong	result1, fp
12810     04 4E 85 F1 | 	sub	fp, #4
12814     A7 16 02 FB | 	rdlong	arg03, fp
12818     56 00 00 FF 
1281c     F0 E4 05 F1 | 	add	objptr, ##44272
12820     F2 16 62 FC | 	wrlong	arg03, objptr
12824     04 4E 05 F1 | 	add	fp, #4
12828     A7 14 02 FB | 	rdlong	arg02, fp
1282c     1C 4E 85 F1 | 	sub	fp, #28
12830     04 E4 05 F1 | 	add	objptr, #4
12834     F2 14 62 FC | 	wrlong	arg02, objptr
12838     04 E4 85 F1 | 	sub	objptr, #4
1283c     F2 12 02 FB | 	rdlong	arg01, objptr
12840     04 E4 85 F1 | 	sub	objptr, #4
12844     F2 16 02 FB | 	rdlong	arg03, objptr
12848     56 00 00 FF 
1284c     EC E4 85 F1 | 	sub	objptr, ##44268
12850     98 49 B0 FD | 	call	#_hg010b_spin2_putpixel
12854     A7 F0 03 F6 | 	mov	ptra, fp
12858     B2 00 A0 FD | 	call	#popregs_
1285c                 | _do_plot_ret
1285c     2D 00 64 FD | 	ret
12860                 | 
12860                 | ' 
12860                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
12860                 | ' 
12860                 | ' sub do_draw
12860                 | _do_draw
12860     00 4A 05 F6 | 	mov	COUNT_, #0
12864     A8 00 A0 FD | 	call	#pushregs_
12868     20 F0 07 F1 | 	add	ptra, #32
1286c     C8 70 BF FD | 	call	#_pop
12870     FD 1A 02 F6 | 	mov	arg05, result1
12874     FE 18 02 F6 | 	mov	arg04, result2
12878     FF 16 02 F6 | 	mov	arg03, result3
1287c     0C 4E 05 F1 | 	add	fp, #12
12880     A7 1A 62 FC | 	wrlong	arg05, fp
12884     04 4E 05 F1 | 	add	fp, #4
12888     A7 18 62 FC | 	wrlong	arg04, fp
1288c     04 4E 05 F1 | 	add	fp, #4
12890     A7 16 62 FC | 	wrlong	arg03, fp
12894     14 4E 85 F1 | 	sub	fp, #20
12898     9C 70 BF FD | 	call	#_pop
1289c     FF 1A 02 F6 | 	mov	arg05, result3
128a0     A7 FA 61 FC | 	wrlong	result1, fp
128a4     04 4E 05 F1 | 	add	fp, #4
128a8     A7 FC 61 FC | 	wrlong	result2, fp
128ac     04 4E 05 F1 | 	add	fp, #4
128b0     A7 1A 62 FC | 	wrlong	arg05, fp
128b4     08 4E 85 F1 | 	sub	fp, #8
128b8     A7 12 02 F6 | 	mov	arg01, fp
128bc     10 E8 BF FD | 	call	#_converttoint
128c0     18 4E 05 F1 | 	add	fp, #24
128c4     A7 FA 61 FC | 	wrlong	result1, fp
128c8     0C 4E 85 F1 | 	sub	fp, #12
128cc     A7 12 02 F6 | 	mov	arg01, fp
128d0     0C 4E 85 F1 | 	sub	fp, #12
128d4     F8 E7 BF FD | 	call	#_converttoint
128d8     1C 4E 05 F1 | 	add	fp, #28
128dc     A7 FA 61 FC | 	wrlong	result1, fp
128e0     56 00 00 FF 
128e4     F0 E4 05 F1 | 	add	objptr, ##44272
128e8     F2 12 02 FB | 	rdlong	arg01, objptr
128ec     04 E4 05 F1 | 	add	objptr, #4
128f0     F2 14 02 FB | 	rdlong	arg02, objptr
128f4     04 4E 85 F1 | 	sub	fp, #4
128f8     A7 16 02 FB | 	rdlong	arg03, fp
128fc     FD 18 02 F6 | 	mov	arg04, result1
12900     18 4E 85 F1 | 	sub	fp, #24
12904     08 E4 85 F1 | 	sub	objptr, #8
12908     F2 1A 02 FB | 	rdlong	arg05, objptr
1290c     56 00 00 FF 
12910     EC E4 85 F1 | 	sub	objptr, ##44268
12914     84 4B B0 FD | 	call	#_hg010b_spin2_draw
12918     18 4E 05 F1 | 	add	fp, #24
1291c     A7 1A 02 FB | 	rdlong	arg05, fp
12920     56 00 00 FF 
12924     F0 E4 05 F1 | 	add	objptr, ##44272
12928     F2 1A 62 FC | 	wrlong	arg05, objptr
1292c     04 4E 05 F1 | 	add	fp, #4
12930     A7 1A 02 FB | 	rdlong	arg05, fp
12934     1C 4E 85 F1 | 	sub	fp, #28
12938     04 E4 05 F1 | 	add	objptr, #4
1293c     F2 1A 62 FC | 	wrlong	arg05, objptr
12940     56 00 00 FF 
12944     F4 E4 85 F1 | 	sub	objptr, ##44276
12948     A7 F0 03 F6 | 	mov	ptra, fp
1294c     B2 00 A0 FD | 	call	#popregs_
12950                 | _do_draw_ret
12950     2D 00 64 FD | 	ret
12954                 | 
12954                 | ' 
12954                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
12954                 | ' 
12954                 | ' sub do_fcircle
12954                 | _do_fcircle
12954     02 4A 05 F6 | 	mov	COUNT_, #2
12958     A8 00 A0 FD | 	call	#pushregs_
1295c     24 F0 07 F1 | 	add	ptra, #36
12960     D4 6F BF FD | 	call	#_pop
12964     FD 18 02 F6 | 	mov	arg04, result1
12968     FE 16 02 F6 | 	mov	arg03, result2
1296c     FF 14 02 F6 | 	mov	arg02, result3
12970     18 4E 05 F1 | 	add	fp, #24
12974     A7 18 62 FC | 	wrlong	arg04, fp
12978     04 4E 05 F1 | 	add	fp, #4
1297c     A7 16 62 FC | 	wrlong	arg03, fp
12980     04 4E 05 F1 | 	add	fp, #4
12984     A7 14 62 FC | 	wrlong	arg02, fp
12988     20 4E 85 F1 | 	sub	fp, #32
1298c     A8 6F BF FD | 	call	#_pop
12990     FD 18 02 F6 | 	mov	arg04, result1
12994     FE 16 02 F6 | 	mov	arg03, result2
12998     FF 1E 02 F6 | 	mov	local01, result3
1299c     0C 4E 05 F1 | 	add	fp, #12
129a0     A7 18 62 FC | 	wrlong	arg04, fp
129a4     04 4E 05 F1 | 	add	fp, #4
129a8     A7 16 62 FC | 	wrlong	arg03, fp
129ac     04 4E 05 F1 | 	add	fp, #4
129b0     A7 1E 62 FC | 	wrlong	local01, fp
129b4     14 4E 85 F1 | 	sub	fp, #20
129b8     7C 6F BF FD | 	call	#_pop
129bc     A7 FA 61 FC | 	wrlong	result1, fp
129c0     04 4E 05 F1 | 	add	fp, #4
129c4     A7 FC 61 FC | 	wrlong	result2, fp
129c8     04 4E 05 F1 | 	add	fp, #4
129cc     A7 FE 61 FC | 	wrlong	result3, fp
129d0                 | ' 
129d0                 | ' t3=pop()
129d0                 | ' t2=pop()
129d0                 | ' t1=pop()
129d0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
129d0     FF 18 02 F6 | 	mov	arg04, result3
129d4     08 4E 85 F1 | 	sub	fp, #8
129d8     1C 18 0E F2 | 	cmp	arg04, #28 wz
129dc     08 4E 05 51 |  if_ne	add	fp, #8
129e0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
129e4     08 4E 85 51 |  if_ne	sub	fp, #8
129e8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
129ec     7C 00 90 5D |  if_ne	jmp	#LR__1460
129f0     14 4E 05 F1 | 	add	fp, #20
129f4     A7 1E 02 FB | 	rdlong	local01, fp
129f8     14 4E 85 F1 | 	sub	fp, #20
129fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
12a00     14 4E 05 51 |  if_ne	add	fp, #20
12a04     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12a08     14 4E 85 51 |  if_ne	sub	fp, #20
12a0c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12a10     58 00 90 5D |  if_ne	jmp	#LR__1460
12a14     20 4E 05 F1 | 	add	fp, #32
12a18     A7 1E 02 FB | 	rdlong	local01, fp
12a1c     20 4E 85 F1 | 	sub	fp, #32
12a20     1C 1E 0E F2 | 	cmp	local01, #28 wz
12a24     20 4E 05 51 |  if_ne	add	fp, #32
12a28     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12a2c     20 4E 85 51 |  if_ne	sub	fp, #32
12a30     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12a34     34 00 90 5D |  if_ne	jmp	#LR__1460
12a38     A7 12 02 FB | 	rdlong	arg01, fp
12a3c     0C 4E 05 F1 | 	add	fp, #12
12a40     A7 14 02 FB | 	rdlong	arg02, fp
12a44     0C 4E 05 F1 | 	add	fp, #12
12a48     A7 16 02 FB | 	rdlong	arg03, fp
12a4c     18 4E 85 F1 | 	sub	fp, #24
12a50     56 00 00 FF 
12a54     EC E4 05 F1 | 	add	objptr, ##44268
12a58     F2 18 02 FB | 	rdlong	arg04, objptr
12a5c     56 00 00 FF 
12a60     EC E4 85 F1 | 	sub	objptr, ##44268
12a64     B8 4E B0 FD | 	call	#_hg010b_spin2_fcircle
12a68                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
12a68     54 00 90 FD | 	jmp	#LR__1461
12a6c                 | LR__1460
12a6c     A7 12 02 F6 | 	mov	arg01, fp
12a70     5C E6 BF FD | 	call	#_converttoint
12a74     FD 1E 02 F6 | 	mov	local01, result1
12a78     0C 4E 05 F1 | 	add	fp, #12
12a7c     A7 12 02 F6 | 	mov	arg01, fp
12a80     0C 4E 85 F1 | 	sub	fp, #12
12a84     48 E6 BF FD | 	call	#_converttoint
12a88     FD 20 02 F6 | 	mov	local02, result1
12a8c     18 4E 05 F1 | 	add	fp, #24
12a90     A7 12 02 F6 | 	mov	arg01, fp
12a94     18 4E 85 F1 | 	sub	fp, #24
12a98     34 E6 BF FD | 	call	#_converttoint
12a9c     FD 16 02 F6 | 	mov	arg03, result1
12aa0     56 00 00 FF 
12aa4     EC E4 05 F1 | 	add	objptr, ##44268
12aa8     F2 18 02 FB | 	rdlong	arg04, objptr
12aac     56 00 00 FF 
12ab0     EC E4 85 F1 | 	sub	objptr, ##44268
12ab4     0F 13 02 F6 | 	mov	arg01, local01
12ab8     10 15 02 F6 | 	mov	arg02, local02
12abc     60 4E B0 FD | 	call	#_hg010b_spin2_fcircle
12ac0                 | LR__1461
12ac0     A7 F0 03 F6 | 	mov	ptra, fp
12ac4     B2 00 A0 FD | 	call	#popregs_
12ac8                 | _do_fcircle_ret
12ac8     2D 00 64 FD | 	ret
12acc                 | 
12acc                 | ' 
12acc                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
12acc                 | ' 
12acc                 | ' sub do_circle
12acc                 | _do_circle
12acc     02 4A 05 F6 | 	mov	COUNT_, #2
12ad0     A8 00 A0 FD | 	call	#pushregs_
12ad4     24 F0 07 F1 | 	add	ptra, #36
12ad8     5C 6E BF FD | 	call	#_pop
12adc     FD 18 02 F6 | 	mov	arg04, result1
12ae0     FE 16 02 F6 | 	mov	arg03, result2
12ae4     FF 14 02 F6 | 	mov	arg02, result3
12ae8     18 4E 05 F1 | 	add	fp, #24
12aec     A7 18 62 FC | 	wrlong	arg04, fp
12af0     04 4E 05 F1 | 	add	fp, #4
12af4     A7 16 62 FC | 	wrlong	arg03, fp
12af8     04 4E 05 F1 | 	add	fp, #4
12afc     A7 14 62 FC | 	wrlong	arg02, fp
12b00     20 4E 85 F1 | 	sub	fp, #32
12b04     30 6E BF FD | 	call	#_pop
12b08     FD 18 02 F6 | 	mov	arg04, result1
12b0c     FE 16 02 F6 | 	mov	arg03, result2
12b10     FF 1E 02 F6 | 	mov	local01, result3
12b14     0C 4E 05 F1 | 	add	fp, #12
12b18     A7 18 62 FC | 	wrlong	arg04, fp
12b1c     04 4E 05 F1 | 	add	fp, #4
12b20     A7 16 62 FC | 	wrlong	arg03, fp
12b24     04 4E 05 F1 | 	add	fp, #4
12b28     A7 1E 62 FC | 	wrlong	local01, fp
12b2c     14 4E 85 F1 | 	sub	fp, #20
12b30     04 6E BF FD | 	call	#_pop
12b34     A7 FA 61 FC | 	wrlong	result1, fp
12b38     04 4E 05 F1 | 	add	fp, #4
12b3c     A7 FC 61 FC | 	wrlong	result2, fp
12b40     04 4E 05 F1 | 	add	fp, #4
12b44     A7 FE 61 FC | 	wrlong	result3, fp
12b48                 | ' 
12b48                 | ' t3=pop()
12b48                 | ' t2=pop()
12b48                 | ' t1=pop()
12b48                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
12b48     FF 18 02 F6 | 	mov	arg04, result3
12b4c     08 4E 85 F1 | 	sub	fp, #8
12b50     1C 18 0E F2 | 	cmp	arg04, #28 wz
12b54     08 4E 05 51 |  if_ne	add	fp, #8
12b58     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12b5c     08 4E 85 51 |  if_ne	sub	fp, #8
12b60     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12b64     7C 00 90 5D |  if_ne	jmp	#LR__1470
12b68     14 4E 05 F1 | 	add	fp, #20
12b6c     A7 1E 02 FB | 	rdlong	local01, fp
12b70     14 4E 85 F1 | 	sub	fp, #20
12b74     1C 1E 0E F2 | 	cmp	local01, #28 wz
12b78     14 4E 05 51 |  if_ne	add	fp, #20
12b7c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12b80     14 4E 85 51 |  if_ne	sub	fp, #20
12b84     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12b88     58 00 90 5D |  if_ne	jmp	#LR__1470
12b8c     20 4E 05 F1 | 	add	fp, #32
12b90     A7 1E 02 FB | 	rdlong	local01, fp
12b94     20 4E 85 F1 | 	sub	fp, #32
12b98     1C 1E 0E F2 | 	cmp	local01, #28 wz
12b9c     20 4E 05 51 |  if_ne	add	fp, #32
12ba0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12ba4     20 4E 85 51 |  if_ne	sub	fp, #32
12ba8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12bac     34 00 90 5D |  if_ne	jmp	#LR__1470
12bb0     A7 12 02 FB | 	rdlong	arg01, fp
12bb4     0C 4E 05 F1 | 	add	fp, #12
12bb8     A7 14 02 FB | 	rdlong	arg02, fp
12bbc     0C 4E 05 F1 | 	add	fp, #12
12bc0     A7 16 02 FB | 	rdlong	arg03, fp
12bc4     18 4E 85 F1 | 	sub	fp, #24
12bc8     56 00 00 FF 
12bcc     EC E4 05 F1 | 	add	objptr, ##44268
12bd0     F2 18 02 FB | 	rdlong	arg04, objptr
12bd4     56 00 00 FF 
12bd8     EC E4 85 F1 | 	sub	objptr, ##44268
12bdc     4C 4E B0 FD | 	call	#_hg010b_spin2_circle
12be0                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
12be0     54 00 90 FD | 	jmp	#LR__1471
12be4                 | LR__1470
12be4     A7 12 02 F6 | 	mov	arg01, fp
12be8     E4 E4 BF FD | 	call	#_converttoint
12bec     FD 1E 02 F6 | 	mov	local01, result1
12bf0     0C 4E 05 F1 | 	add	fp, #12
12bf4     A7 12 02 F6 | 	mov	arg01, fp
12bf8     0C 4E 85 F1 | 	sub	fp, #12
12bfc     D0 E4 BF FD | 	call	#_converttoint
12c00     FD 20 02 F6 | 	mov	local02, result1
12c04     18 4E 05 F1 | 	add	fp, #24
12c08     A7 12 02 F6 | 	mov	arg01, fp
12c0c     18 4E 85 F1 | 	sub	fp, #24
12c10     BC E4 BF FD | 	call	#_converttoint
12c14     FD 16 02 F6 | 	mov	arg03, result1
12c18     56 00 00 FF 
12c1c     EC E4 05 F1 | 	add	objptr, ##44268
12c20     F2 18 02 FB | 	rdlong	arg04, objptr
12c24     56 00 00 FF 
12c28     EC E4 85 F1 | 	sub	objptr, ##44268
12c2c     0F 13 02 F6 | 	mov	arg01, local01
12c30     10 15 02 F6 | 	mov	arg02, local02
12c34     F4 4D B0 FD | 	call	#_hg010b_spin2_circle
12c38                 | LR__1471
12c38     A7 F0 03 F6 | 	mov	ptra, fp
12c3c     B2 00 A0 FD | 	call	#popregs_
12c40                 | _do_circle_ret
12c40     2D 00 64 FD | 	ret
12c44                 | 
12c44                 | ' 
12c44                 | ' ' -------------------------- Draw a rectangle
12c44                 | ' 
12c44                 | ' sub do_box
12c44                 | _do_box
12c44     03 4A 05 F6 | 	mov	COUNT_, #3
12c48     A8 00 A0 FD | 	call	#pushregs_
12c4c     30 F0 07 F1 | 	add	ptra, #48
12c50     E4 6C BF FD | 	call	#_pop
12c54     FD 1A 02 F6 | 	mov	arg05, result1
12c58     FE 18 02 F6 | 	mov	arg04, result2
12c5c     FF 16 02 F6 | 	mov	arg03, result3
12c60     24 4E 05 F1 | 	add	fp, #36
12c64     A7 1A 62 FC | 	wrlong	arg05, fp
12c68     04 4E 05 F1 | 	add	fp, #4
12c6c     A7 18 62 FC | 	wrlong	arg04, fp
12c70     04 4E 05 F1 | 	add	fp, #4
12c74     A7 16 62 FC | 	wrlong	arg03, fp
12c78     2C 4E 85 F1 | 	sub	fp, #44
12c7c     B8 6C BF FD | 	call	#_pop
12c80     FD 1A 02 F6 | 	mov	arg05, result1
12c84     FE 18 02 F6 | 	mov	arg04, result2
12c88     FF 16 02 F6 | 	mov	arg03, result3
12c8c     18 4E 05 F1 | 	add	fp, #24
12c90     A7 1A 62 FC | 	wrlong	arg05, fp
12c94     04 4E 05 F1 | 	add	fp, #4
12c98     A7 18 62 FC | 	wrlong	arg04, fp
12c9c     04 4E 05 F1 | 	add	fp, #4
12ca0     A7 16 62 FC | 	wrlong	arg03, fp
12ca4     20 4E 85 F1 | 	sub	fp, #32
12ca8     8C 6C BF FD | 	call	#_pop
12cac     FD 1A 02 F6 | 	mov	arg05, result1
12cb0     FE 18 02 F6 | 	mov	arg04, result2
12cb4     FF 1E 02 F6 | 	mov	local01, result3
12cb8     0C 4E 05 F1 | 	add	fp, #12
12cbc     A7 1A 62 FC | 	wrlong	arg05, fp
12cc0     04 4E 05 F1 | 	add	fp, #4
12cc4     A7 18 62 FC | 	wrlong	arg04, fp
12cc8     04 4E 05 F1 | 	add	fp, #4
12ccc     A7 1E 62 FC | 	wrlong	local01, fp
12cd0     14 4E 85 F1 | 	sub	fp, #20
12cd4     60 6C BF FD | 	call	#_pop
12cd8     A7 FA 61 FC | 	wrlong	result1, fp
12cdc     04 4E 05 F1 | 	add	fp, #4
12ce0     A7 FC 61 FC | 	wrlong	result2, fp
12ce4     04 4E 05 F1 | 	add	fp, #4
12ce8     A7 FE 61 FC | 	wrlong	result3, fp
12cec                 | ' 
12cec                 | ' t4=pop()
12cec                 | ' t3=pop()
12cec                 | ' t2=pop()
12cec                 | ' t1=pop()
12cec                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12cec     FF 1A 02 F6 | 	mov	arg05, result3
12cf0     08 4E 85 F1 | 	sub	fp, #8
12cf4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
12cf8     08 4E 05 51 |  if_ne	add	fp, #8
12cfc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12d00     08 4E 85 51 |  if_ne	sub	fp, #8
12d04     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12d08     A8 00 90 5D |  if_ne	jmp	#LR__1480
12d0c     14 4E 05 F1 | 	add	fp, #20
12d10     A7 1E 02 FB | 	rdlong	local01, fp
12d14     14 4E 85 F1 | 	sub	fp, #20
12d18     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d1c     14 4E 05 51 |  if_ne	add	fp, #20
12d20     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12d24     14 4E 85 51 |  if_ne	sub	fp, #20
12d28     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12d2c     84 00 90 5D |  if_ne	jmp	#LR__1480
12d30     20 4E 05 F1 | 	add	fp, #32
12d34     A7 1E 02 FB | 	rdlong	local01, fp
12d38     20 4E 85 F1 | 	sub	fp, #32
12d3c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d40     20 4E 05 51 |  if_ne	add	fp, #32
12d44     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12d48     20 4E 85 51 |  if_ne	sub	fp, #32
12d4c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12d50     60 00 90 5D |  if_ne	jmp	#LR__1480
12d54     2C 4E 05 F1 | 	add	fp, #44
12d58     A7 1E 02 FB | 	rdlong	local01, fp
12d5c     2C 4E 85 F1 | 	sub	fp, #44
12d60     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d64     2C 4E 05 51 |  if_ne	add	fp, #44
12d68     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12d6c     2C 4E 85 51 |  if_ne	sub	fp, #44
12d70     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12d74     3C 00 90 5D |  if_ne	jmp	#LR__1480
12d78     A7 12 02 FB | 	rdlong	arg01, fp
12d7c     0C 4E 05 F1 | 	add	fp, #12
12d80     A7 14 02 FB | 	rdlong	arg02, fp
12d84     0C 4E 05 F1 | 	add	fp, #12
12d88     A7 16 02 FB | 	rdlong	arg03, fp
12d8c     0C 4E 05 F1 | 	add	fp, #12
12d90     A7 18 02 FB | 	rdlong	arg04, fp
12d94     24 4E 85 F1 | 	sub	fp, #36
12d98     56 00 00 FF 
12d9c     EC E4 05 F1 | 	add	objptr, ##44268
12da0     F2 1A 02 FB | 	rdlong	arg05, objptr
12da4     56 00 00 FF 
12da8     EC E4 85 F1 | 	sub	objptr, ##44268
12dac     48 4E B0 FD | 	call	#_hg010b_spin2_box
12db0                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
12db0     6C 00 90 FD | 	jmp	#LR__1481
12db4                 | LR__1480
12db4     A7 12 02 F6 | 	mov	arg01, fp
12db8     14 E3 BF FD | 	call	#_converttoint
12dbc     FD 20 02 F6 | 	mov	local02, result1
12dc0     0C 4E 05 F1 | 	add	fp, #12
12dc4     A7 12 02 F6 | 	mov	arg01, fp
12dc8     0C 4E 85 F1 | 	sub	fp, #12
12dcc     00 E3 BF FD | 	call	#_converttoint
12dd0     FD 22 02 F6 | 	mov	local03, result1
12dd4     18 4E 05 F1 | 	add	fp, #24
12dd8     A7 12 02 F6 | 	mov	arg01, fp
12ddc     18 4E 85 F1 | 	sub	fp, #24
12de0     EC E2 BF FD | 	call	#_converttoint
12de4     FD 1E 02 F6 | 	mov	local01, result1
12de8     24 4E 05 F1 | 	add	fp, #36
12dec     A7 12 02 F6 | 	mov	arg01, fp
12df0     24 4E 85 F1 | 	sub	fp, #36
12df4     D8 E2 BF FD | 	call	#_converttoint
12df8     FD 18 02 F6 | 	mov	arg04, result1
12dfc     56 00 00 FF 
12e00     EC E4 05 F1 | 	add	objptr, ##44268
12e04     F2 1A 02 FB | 	rdlong	arg05, objptr
12e08     56 00 00 FF 
12e0c     EC E4 85 F1 | 	sub	objptr, ##44268
12e10     10 13 02 F6 | 	mov	arg01, local02
12e14     11 15 02 F6 | 	mov	arg02, local03
12e18     0F 17 02 F6 | 	mov	arg03, local01
12e1c     D8 4D B0 FD | 	call	#_hg010b_spin2_box
12e20                 | LR__1481
12e20     A7 F0 03 F6 | 	mov	ptra, fp
12e24     B2 00 A0 FD | 	call	#popregs_
12e28                 | _do_box_ret
12e28     2D 00 64 FD | 	ret
12e2c                 | 
12e2c                 | ' 
12e2c                 | ' sub do_fill
12e2c                 | _do_fill
12e2c     03 4A 05 F6 | 	mov	COUNT_, #3
12e30     A8 00 A0 FD | 	call	#pushregs_
12e34     30 F0 07 F1 | 	add	ptra, #48
12e38     FC 6A BF FD | 	call	#_pop
12e3c     FD 18 02 F6 | 	mov	arg04, result1
12e40     FE 16 02 F6 | 	mov	arg03, result2
12e44     FF 14 02 F6 | 	mov	arg02, result3
12e48     24 4E 05 F1 | 	add	fp, #36
12e4c     A7 18 62 FC | 	wrlong	arg04, fp
12e50     04 4E 05 F1 | 	add	fp, #4
12e54     A7 16 62 FC | 	wrlong	arg03, fp
12e58     04 4E 05 F1 | 	add	fp, #4
12e5c     A7 14 62 FC | 	wrlong	arg02, fp
12e60     2C 4E 85 F1 | 	sub	fp, #44
12e64     D0 6A BF FD | 	call	#_pop
12e68     FD 18 02 F6 | 	mov	arg04, result1
12e6c     FE 16 02 F6 | 	mov	arg03, result2
12e70     FF 14 02 F6 | 	mov	arg02, result3
12e74     18 4E 05 F1 | 	add	fp, #24
12e78     A7 18 62 FC | 	wrlong	arg04, fp
12e7c     04 4E 05 F1 | 	add	fp, #4
12e80     A7 16 62 FC | 	wrlong	arg03, fp
12e84     04 4E 05 F1 | 	add	fp, #4
12e88     A7 14 62 FC | 	wrlong	arg02, fp
12e8c     20 4E 85 F1 | 	sub	fp, #32
12e90     A4 6A BF FD | 	call	#_pop
12e94     FD 18 02 F6 | 	mov	arg04, result1
12e98     FE 16 02 F6 | 	mov	arg03, result2
12e9c     FF 1E 02 F6 | 	mov	local01, result3
12ea0     0C 4E 05 F1 | 	add	fp, #12
12ea4     A7 18 62 FC | 	wrlong	arg04, fp
12ea8     04 4E 05 F1 | 	add	fp, #4
12eac     A7 16 62 FC | 	wrlong	arg03, fp
12eb0     04 4E 05 F1 | 	add	fp, #4
12eb4     A7 1E 62 FC | 	wrlong	local01, fp
12eb8     14 4E 85 F1 | 	sub	fp, #20
12ebc     78 6A BF FD | 	call	#_pop
12ec0     A7 FA 61 FC | 	wrlong	result1, fp
12ec4     04 4E 05 F1 | 	add	fp, #4
12ec8     A7 FC 61 FC | 	wrlong	result2, fp
12ecc     04 4E 05 F1 | 	add	fp, #4
12ed0     A7 FE 61 FC | 	wrlong	result3, fp
12ed4                 | ' 
12ed4                 | ' t4=pop()
12ed4                 | ' t3=pop()
12ed4                 | ' t2=pop()
12ed4                 | ' t1=pop()
12ed4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12ed4     FF 18 02 F6 | 	mov	arg04, result3
12ed8     08 4E 85 F1 | 	sub	fp, #8
12edc     1C 18 0E F2 | 	cmp	arg04, #28 wz
12ee0     08 4E 05 51 |  if_ne	add	fp, #8
12ee4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12ee8     08 4E 85 51 |  if_ne	sub	fp, #8
12eec     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12ef0     94 00 90 5D |  if_ne	jmp	#LR__1490
12ef4     14 4E 05 F1 | 	add	fp, #20
12ef8     A7 1E 02 FB | 	rdlong	local01, fp
12efc     14 4E 85 F1 | 	sub	fp, #20
12f00     1C 1E 0E F2 | 	cmp	local01, #28 wz
12f04     14 4E 05 51 |  if_ne	add	fp, #20
12f08     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12f0c     14 4E 85 51 |  if_ne	sub	fp, #20
12f10     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12f14     70 00 90 5D |  if_ne	jmp	#LR__1490
12f18     20 4E 05 F1 | 	add	fp, #32
12f1c     A7 1E 02 FB | 	rdlong	local01, fp
12f20     20 4E 85 F1 | 	sub	fp, #32
12f24     1C 1E 0E F2 | 	cmp	local01, #28 wz
12f28     20 4E 05 51 |  if_ne	add	fp, #32
12f2c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12f30     20 4E 85 51 |  if_ne	sub	fp, #32
12f34     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12f38     4C 00 90 5D |  if_ne	jmp	#LR__1490
12f3c     2C 4E 05 F1 | 	add	fp, #44
12f40     A7 1E 02 FB | 	rdlong	local01, fp
12f44     2C 4E 85 F1 | 	sub	fp, #44
12f48     1C 1E 0E F2 | 	cmp	local01, #28 wz
12f4c     2C 4E 05 51 |  if_ne	add	fp, #44
12f50     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12f54     2C 4E 85 51 |  if_ne	sub	fp, #44
12f58     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12f5c     28 00 90 5D |  if_ne	jmp	#LR__1490
12f60     A7 12 02 FB | 	rdlong	arg01, fp
12f64     0C 4E 05 F1 | 	add	fp, #12
12f68     A7 14 02 FB | 	rdlong	arg02, fp
12f6c     0C 4E 05 F1 | 	add	fp, #12
12f70     A7 16 02 FB | 	rdlong	arg03, fp
12f74     0C 4E 05 F1 | 	add	fp, #12
12f78     A7 18 02 FB | 	rdlong	arg04, fp
12f7c     24 4E 85 F1 | 	sub	fp, #36
12f80     08 47 B0 FD | 	call	#_hg010b_spin2_fill
12f84                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
12f84     58 00 90 FD | 	jmp	#LR__1491
12f88                 | LR__1490
12f88     A7 12 02 F6 | 	mov	arg01, fp
12f8c     40 E1 BF FD | 	call	#_converttoint
12f90     FD 20 02 F6 | 	mov	local02, result1
12f94     0C 4E 05 F1 | 	add	fp, #12
12f98     A7 12 02 F6 | 	mov	arg01, fp
12f9c     0C 4E 85 F1 | 	sub	fp, #12
12fa0     2C E1 BF FD | 	call	#_converttoint
12fa4     FD 22 02 F6 | 	mov	local03, result1
12fa8     18 4E 05 F1 | 	add	fp, #24
12fac     A7 12 02 F6 | 	mov	arg01, fp
12fb0     18 4E 85 F1 | 	sub	fp, #24
12fb4     18 E1 BF FD | 	call	#_converttoint
12fb8     FD 1E 02 F6 | 	mov	local01, result1
12fbc     24 4E 05 F1 | 	add	fp, #36
12fc0     A7 12 02 F6 | 	mov	arg01, fp
12fc4     24 4E 85 F1 | 	sub	fp, #36
12fc8     04 E1 BF FD | 	call	#_converttoint
12fcc     FD 18 02 F6 | 	mov	arg04, result1
12fd0     10 13 02 F6 | 	mov	arg01, local02
12fd4     11 15 02 F6 | 	mov	arg02, local03
12fd8     0F 17 02 F6 | 	mov	arg03, local01
12fdc     AC 46 B0 FD | 	call	#_hg010b_spin2_fill
12fe0                 | LR__1491
12fe0     A7 F0 03 F6 | 	mov	ptra, fp
12fe4     B2 00 A0 FD | 	call	#popregs_
12fe8                 | _do_fill_ret
12fe8     2D 00 64 FD | 	ret
12fec                 | 
12fec                 | ' 
12fec                 | ' ' -------------------------- Draw a frane
12fec                 | ' 
12fec                 | ' sub do_frame
12fec                 | _do_frame
12fec     03 4A 05 F6 | 	mov	COUNT_, #3
12ff0     A8 00 A0 FD | 	call	#pushregs_
12ff4     30 F0 07 F1 | 	add	ptra, #48
12ff8     3C 69 BF FD | 	call	#_pop
12ffc     FD 1A 02 F6 | 	mov	arg05, result1
13000     FE 18 02 F6 | 	mov	arg04, result2
13004     FF 16 02 F6 | 	mov	arg03, result3
13008     24 4E 05 F1 | 	add	fp, #36
1300c     A7 1A 62 FC | 	wrlong	arg05, fp
13010     04 4E 05 F1 | 	add	fp, #4
13014     A7 18 62 FC | 	wrlong	arg04, fp
13018     04 4E 05 F1 | 	add	fp, #4
1301c     A7 16 62 FC | 	wrlong	arg03, fp
13020     2C 4E 85 F1 | 	sub	fp, #44
13024     10 69 BF FD | 	call	#_pop
13028     FD 1A 02 F6 | 	mov	arg05, result1
1302c     FE 18 02 F6 | 	mov	arg04, result2
13030     FF 16 02 F6 | 	mov	arg03, result3
13034     18 4E 05 F1 | 	add	fp, #24
13038     A7 1A 62 FC | 	wrlong	arg05, fp
1303c     04 4E 05 F1 | 	add	fp, #4
13040     A7 18 62 FC | 	wrlong	arg04, fp
13044     04 4E 05 F1 | 	add	fp, #4
13048     A7 16 62 FC | 	wrlong	arg03, fp
1304c     20 4E 85 F1 | 	sub	fp, #32
13050     E4 68 BF FD | 	call	#_pop
13054     FD 1A 02 F6 | 	mov	arg05, result1
13058     FE 18 02 F6 | 	mov	arg04, result2
1305c     FF 1E 02 F6 | 	mov	local01, result3
13060     0C 4E 05 F1 | 	add	fp, #12
13064     A7 1A 62 FC | 	wrlong	arg05, fp
13068     04 4E 05 F1 | 	add	fp, #4
1306c     A7 18 62 FC | 	wrlong	arg04, fp
13070     04 4E 05 F1 | 	add	fp, #4
13074     A7 1E 62 FC | 	wrlong	local01, fp
13078     14 4E 85 F1 | 	sub	fp, #20
1307c     B8 68 BF FD | 	call	#_pop
13080     A7 FA 61 FC | 	wrlong	result1, fp
13084     04 4E 05 F1 | 	add	fp, #4
13088     A7 FC 61 FC | 	wrlong	result2, fp
1308c     04 4E 05 F1 | 	add	fp, #4
13090     A7 FE 61 FC | 	wrlong	result3, fp
13094                 | ' 
13094                 | ' t4=pop()
13094                 | ' t3=pop()
13094                 | ' t2=pop()
13094                 | ' t1=pop()
13094                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
13094     FF 1A 02 F6 | 	mov	arg05, result3
13098     08 4E 85 F1 | 	sub	fp, #8
1309c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
130a0     08 4E 05 51 |  if_ne	add	fp, #8
130a4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
130a8     08 4E 85 51 |  if_ne	sub	fp, #8
130ac     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
130b0     A8 00 90 5D |  if_ne	jmp	#LR__1500
130b4     14 4E 05 F1 | 	add	fp, #20
130b8     A7 1E 02 FB | 	rdlong	local01, fp
130bc     14 4E 85 F1 | 	sub	fp, #20
130c0     1C 1E 0E F2 | 	cmp	local01, #28 wz
130c4     14 4E 05 51 |  if_ne	add	fp, #20
130c8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
130cc     14 4E 85 51 |  if_ne	sub	fp, #20
130d0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
130d4     84 00 90 5D |  if_ne	jmp	#LR__1500
130d8     20 4E 05 F1 | 	add	fp, #32
130dc     A7 1E 02 FB | 	rdlong	local01, fp
130e0     20 4E 85 F1 | 	sub	fp, #32
130e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
130e8     20 4E 05 51 |  if_ne	add	fp, #32
130ec     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
130f0     20 4E 85 51 |  if_ne	sub	fp, #32
130f4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
130f8     60 00 90 5D |  if_ne	jmp	#LR__1500
130fc     2C 4E 05 F1 | 	add	fp, #44
13100     A7 1E 02 FB | 	rdlong	local01, fp
13104     2C 4E 85 F1 | 	sub	fp, #44
13108     1C 1E 0E F2 | 	cmp	local01, #28 wz
1310c     2C 4E 05 51 |  if_ne	add	fp, #44
13110     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
13114     2C 4E 85 51 |  if_ne	sub	fp, #44
13118     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
1311c     3C 00 90 5D |  if_ne	jmp	#LR__1500
13120     A7 12 02 FB | 	rdlong	arg01, fp
13124     0C 4E 05 F1 | 	add	fp, #12
13128     A7 14 02 FB | 	rdlong	arg02, fp
1312c     0C 4E 05 F1 | 	add	fp, #12
13130     A7 16 02 FB | 	rdlong	arg03, fp
13134     0C 4E 05 F1 | 	add	fp, #12
13138     A7 18 02 FB | 	rdlong	arg04, fp
1313c     24 4E 85 F1 | 	sub	fp, #36
13140     56 00 00 FF 
13144     EC E4 05 F1 | 	add	objptr, ##44268
13148     F2 1A 02 FB | 	rdlong	arg05, objptr
1314c     56 00 00 FF 
13150     EC E4 85 F1 | 	sub	objptr, ##44268
13154     20 4A B0 FD | 	call	#_hg010b_spin2_frame
13158                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
13158     6C 00 90 FD | 	jmp	#LR__1501
1315c                 | LR__1500
1315c     A7 12 02 F6 | 	mov	arg01, fp
13160     6C DF BF FD | 	call	#_converttoint
13164     FD 20 02 F6 | 	mov	local02, result1
13168     0C 4E 05 F1 | 	add	fp, #12
1316c     A7 12 02 F6 | 	mov	arg01, fp
13170     0C 4E 85 F1 | 	sub	fp, #12
13174     58 DF BF FD | 	call	#_converttoint
13178     FD 22 02 F6 | 	mov	local03, result1
1317c     18 4E 05 F1 | 	add	fp, #24
13180     A7 12 02 F6 | 	mov	arg01, fp
13184     18 4E 85 F1 | 	sub	fp, #24
13188     44 DF BF FD | 	call	#_converttoint
1318c     FD 1E 02 F6 | 	mov	local01, result1
13190     24 4E 05 F1 | 	add	fp, #36
13194     A7 12 02 F6 | 	mov	arg01, fp
13198     24 4E 85 F1 | 	sub	fp, #36
1319c     30 DF BF FD | 	call	#_converttoint
131a0     FD 18 02 F6 | 	mov	arg04, result1
131a4     56 00 00 FF 
131a8     EC E4 05 F1 | 	add	objptr, ##44268
131ac     F2 1A 02 FB | 	rdlong	arg05, objptr
131b0     56 00 00 FF 
131b4     EC E4 85 F1 | 	sub	objptr, ##44268
131b8     10 13 02 F6 | 	mov	arg01, local02
131bc     11 15 02 F6 | 	mov	arg02, local03
131c0     0F 17 02 F6 | 	mov	arg03, local01
131c4     B0 49 B0 FD | 	call	#_hg010b_spin2_frame
131c8                 | LR__1501
131c8     A7 F0 03 F6 | 	mov	ptra, fp
131cc     B2 00 A0 FD | 	call	#popregs_
131d0                 | _do_frame_ret
131d0     2D 00 64 FD | 	ret
131d4                 | 
131d4                 | ' 
131d4                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
131d4                 | ' 
131d4                 | ' ' ------------------------- Print to the screem
131d4                 | ' 
131d4                 | ' sub do_print  
131d4                 | _do_print
131d4     0A 4A 05 F6 | 	mov	COUNT_, #10
131d8     A8 00 A0 FD | 	call	#pushregs_
131dc     00 24 06 F6 | 	mov	local04, #0
131e0     54 67 BF FD | 	call	#_pop
131e4     FD 26 02 F6 | 	mov	local05, result1
131e8     FE 28 02 F6 | 	mov	local06, result2
131ec     FF 2A 02 F6 | 	mov	local07, result3
131f0     13 1F 02 F6 | 	mov	local01, local05
131f4     14 21 02 F6 | 	mov	local02, local06
131f8     15 23 02 F6 | 	mov	local03, local07
131fc                 | '  
131fc                 | ' r=0
131fc                 | ' t1=pop() 
131fc                 | ' 'print t1.result_type,t1.result.uresult
131fc                 | ' 
131fc                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
131fc     21 22 0E F2 | 	cmp	local03, #33 wz
13200     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
13204     20 00 90 5D |  if_ne	jmp	#LR__1510
13208     11 25 02 F6 | 	mov	local04, local03
1320c     28 67 BF FD | 	call	#_pop
13210     FD 26 02 F6 | 	mov	local05, result1
13214     FE 28 02 F6 | 	mov	local06, result2
13218     FF 2A 02 F6 | 	mov	local07, result3
1321c     13 1F 02 F6 | 	mov	local01, local05
13220     14 21 02 F6 | 	mov	local02, local06
13224     15 23 02 F6 | 	mov	local03, local07
13228                 | LR__1510
13228                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
13228     20 22 0E F2 | 	cmp	local03, #32 wz
1322c     11 25 02 A6 |  if_e	mov	local04, local03
13230                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
13230     FF 22 0E F2 | 	cmp	local03, #255 wz
13234     0C 00 90 5D |  if_ne	jmp	#LR__1511
13238     0F 13 02 F6 | 	mov	arg01, local01
1323c     D4 29 B0 FD | 	call	#_printerror
13240     4C 04 90 FD | 	jmp	#LR__1529
13244                 | LR__1511
13244                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
13244     2B 22 0E F2 | 	cmp	local03, #43 wz
13248     14 00 90 5D |  if_ne	jmp	#LR__1512
1324c     0F 13 02 F6 | 	mov	arg01, local01
13250     48 9A BF FD | 	call	#_convertstring
13254     FD 26 02 F6 | 	mov	local05, result1
13258     13 1F 02 F6 | 	mov	local01, local05
1325c     1F 22 06 F6 | 	mov	local03, #31
13260                 | LR__1512
13260                 | ' 
13260                 | ' if r=print_mod_comma  then
13260     21 24 0E F2 | 	cmp	local04, #33 wz
13264     AC 01 90 5D |  if_ne	jmp	#LR__1517
13268                 | '   if t1.result_type=result_int then print t1.result.iresult,
13268     1C 22 0E F2 | 	cmp	local03, #28 wz
1326c     64 00 90 5D |  if_ne	jmp	#LR__1513
13270     00 12 06 F6 | 	mov	arg01, #0
13274     28 B8 B0 FD | 	call	#__system___getiolock_0425
13278     FD 12 02 F6 | 	mov	arg01, result1
1327c     1C 5F B0 FD | 	call	#__system___lockmem
13280     00 28 06 F6 | 	mov	local06, #0
13284     00 12 06 F6 | 	mov	arg01, #0
13288     0F 15 02 F6 | 	mov	arg02, local01
1328c     00 16 06 F6 | 	mov	arg03, #0
13290     0A 18 06 F6 | 	mov	arg04, #10
13294     3C 6C B0 FD | 	call	#__system___basic_print_integer
13298     FD 2A 02 F6 | 	mov	local07, result1
1329c     14 27 02 F6 | 	mov	local05, local06
132a0     15 27 02 F1 | 	add	local05, local07
132a4     00 2C 06 F6 | 	mov	local08, #0
132a8     00 12 06 F6 | 	mov	arg01, #0
132ac     09 14 06 F6 | 	mov	arg02, #9
132b0     00 16 06 F6 | 	mov	arg03, #0
132b4     80 6B B0 FD | 	call	#__system___basic_print_char
132b8     FD 2E 02 F6 | 	mov	local09, result1
132bc     FD 26 02 F1 | 	add	local05, result1
132c0     00 12 06 F6 | 	mov	arg01, #0
132c4     D8 B7 B0 FD | 	call	#__system___getiolock_0425
132c8     FD 00 68 FC | 	wrlong	#0, result1
132cc     00 FA 05 F6 | 	mov	result1, #0
132d0     00 30 06 F6 | 	mov	local10, #0
132d4                 | LR__1513
132d4                 | '   if t1.result_type=result_uint then print t1.result.uresult,
132d4     1D 22 0E F2 | 	cmp	local03, #29 wz
132d8     64 00 90 5D |  if_ne	jmp	#LR__1514
132dc     00 12 06 F6 | 	mov	arg01, #0
132e0     BC B7 B0 FD | 	call	#__system___getiolock_0425
132e4     FD 12 02 F6 | 	mov	arg01, result1
132e8     B0 5E B0 FD | 	call	#__system___lockmem
132ec     00 28 06 F6 | 	mov	local06, #0
132f0     00 12 06 F6 | 	mov	arg01, #0
132f4     0F 15 02 F6 | 	mov	arg02, local01
132f8     00 16 06 F6 | 	mov	arg03, #0
132fc     0A 18 06 F6 | 	mov	arg04, #10
13300     10 6C B0 FD | 	call	#__system___basic_print_unsigned
13304     FD 2A 02 F6 | 	mov	local07, result1
13308     14 27 02 F6 | 	mov	local05, local06
1330c     15 27 02 F1 | 	add	local05, local07
13310     00 2C 06 F6 | 	mov	local08, #0
13314     00 12 06 F6 | 	mov	arg01, #0
13318     09 14 06 F6 | 	mov	arg02, #9
1331c     00 16 06 F6 | 	mov	arg03, #0
13320     14 6B B0 FD | 	call	#__system___basic_print_char
13324     FD 2E 02 F6 | 	mov	local09, result1
13328     FD 26 02 F1 | 	add	local05, result1
1332c     00 12 06 F6 | 	mov	arg01, #0
13330     6C B7 B0 FD | 	call	#__system___getiolock_0425
13334     FD 00 68 FC | 	wrlong	#0, result1
13338     00 FA 05 F6 | 	mov	result1, #0
1333c     00 30 06 F6 | 	mov	local10, #0
13340                 | LR__1514
13340                 | '   if t1.result_type=result_float then print t1.result.fresult,
13340     1E 22 0E F2 | 	cmp	local03, #30 wz
13344     64 00 90 5D |  if_ne	jmp	#LR__1515
13348     00 12 06 F6 | 	mov	arg01, #0
1334c     50 B7 B0 FD | 	call	#__system___getiolock_0425
13350     FD 12 02 F6 | 	mov	arg01, result1
13354     44 5E B0 FD | 	call	#__system___lockmem
13358     00 28 06 F6 | 	mov	local06, #0
1335c     00 12 06 F6 | 	mov	arg01, #0
13360     0F 15 02 F6 | 	mov	arg02, local01
13364     00 16 06 F6 | 	mov	arg03, #0
13368     23 18 06 F6 | 	mov	arg04, #35
1336c     30 8F B0 FD | 	call	#__system___basic_print_float
13370     FD 2A 02 F6 | 	mov	local07, result1
13374     14 27 02 F6 | 	mov	local05, local06
13378     15 27 02 F1 | 	add	local05, local07
1337c     00 2C 06 F6 | 	mov	local08, #0
13380     00 12 06 F6 | 	mov	arg01, #0
13384     09 14 06 F6 | 	mov	arg02, #9
13388     00 16 06 F6 | 	mov	arg03, #0
1338c     A8 6A B0 FD | 	call	#__system___basic_print_char
13390     FD 2E 02 F6 | 	mov	local09, result1
13394     FD 26 02 F1 | 	add	local05, result1
13398     00 12 06 F6 | 	mov	arg01, #0
1339c     00 B7 B0 FD | 	call	#__system___getiolock_0425
133a0     FD 00 68 FC | 	wrlong	#0, result1
133a4     00 FA 05 F6 | 	mov	result1, #0
133a8     00 30 06 F6 | 	mov	local10, #0
133ac                 | LR__1515
133ac                 | '   if t1.result_type=result_string then print t1.result.sresult,
133ac     1F 22 0E F2 | 	cmp	local03, #31 wz
133b0     60 00 90 5D |  if_ne	jmp	#LR__1516
133b4     00 12 06 F6 | 	mov	arg01, #0
133b8     E4 B6 B0 FD | 	call	#__system___getiolock_0425
133bc     FD 12 02 F6 | 	mov	arg01, result1
133c0     D8 5D B0 FD | 	call	#__system___lockmem
133c4     00 28 06 F6 | 	mov	local06, #0
133c8     00 12 06 F6 | 	mov	arg01, #0
133cc     0F 15 02 F6 | 	mov	arg02, local01
133d0     00 16 06 F6 | 	mov	arg03, #0
133d4     B8 6A B0 FD | 	call	#__system___basic_print_string
133d8     FD 2A 02 F6 | 	mov	local07, result1
133dc     14 27 02 F6 | 	mov	local05, local06
133e0     15 27 02 F1 | 	add	local05, local07
133e4     00 2C 06 F6 | 	mov	local08, #0
133e8     00 12 06 F6 | 	mov	arg01, #0
133ec     09 14 06 F6 | 	mov	arg02, #9
133f0     00 16 06 F6 | 	mov	arg03, #0
133f4     40 6A B0 FD | 	call	#__system___basic_print_char
133f8     FD 2E 02 F6 | 	mov	local09, result1
133fc     FD 26 02 F1 | 	add	local05, result1
13400     00 12 06 F6 | 	mov	arg01, #0
13404     98 B6 B0 FD | 	call	#__system___getiolock_0425
13408     FD 00 68 FC | 	wrlong	#0, result1
1340c     00 FA 05 F6 | 	mov	result1, #0
13410     00 30 06 F6 | 	mov	local10, #0
13414                 | LR__1516
13414                 | LR__1517
13414                 | ' if r=print_mod_semicolon then 
13414     22 24 0E F2 | 	cmp	local04, #34 wz
13418     1C 01 90 5D |  if_ne	jmp	#LR__1522
1341c                 | '   if t1.result_type=result_int then print t1.result.iresult;
1341c     1C 22 0E F2 | 	cmp	local03, #28 wz
13420     50 00 90 5D |  if_ne	jmp	#LR__1518
13424     00 12 06 F6 | 	mov	arg01, #0
13428     74 B6 B0 FD | 	call	#__system___getiolock_0425
1342c     FD 12 02 F6 | 	mov	arg01, result1
13430     68 5D B0 FD | 	call	#__system___lockmem
13434     00 28 06 F6 | 	mov	local06, #0
13438     00 30 06 F6 | 	mov	local10, #0
1343c     0A 2C 06 F6 | 	mov	local08, #10
13440     00 12 06 F6 | 	mov	arg01, #0
13444     0F 15 02 F6 | 	mov	arg02, local01
13448     00 16 06 F6 | 	mov	arg03, #0
1344c     0A 18 06 F6 | 	mov	arg04, #10
13450     80 6A B0 FD | 	call	#__system___basic_print_integer
13454     FD 2A 02 F6 | 	mov	local07, result1
13458     14 27 02 F6 | 	mov	local05, local06
1345c     15 27 02 F1 | 	add	local05, local07
13460     00 12 06 F6 | 	mov	arg01, #0
13464     38 B6 B0 FD | 	call	#__system___getiolock_0425
13468     FD 00 68 FC | 	wrlong	#0, result1
1346c     00 FA 05 F6 | 	mov	result1, #0
13470     00 2E 06 F6 | 	mov	local09, #0
13474                 | LR__1518
13474                 | '   if t1.result_type=result_uint then print t1.result.uresult;
13474     1D 22 0E F2 | 	cmp	local03, #29 wz
13478     50 00 90 5D |  if_ne	jmp	#LR__1519
1347c     00 12 06 F6 | 	mov	arg01, #0
13480     1C B6 B0 FD | 	call	#__system___getiolock_0425
13484     FD 12 02 F6 | 	mov	arg01, result1
13488     10 5D B0 FD | 	call	#__system___lockmem
1348c     00 28 06 F6 | 	mov	local06, #0
13490     00 30 06 F6 | 	mov	local10, #0
13494     0A 2C 06 F6 | 	mov	local08, #10
13498     00 12 06 F6 | 	mov	arg01, #0
1349c     0F 15 02 F6 | 	mov	arg02, local01
134a0     00 16 06 F6 | 	mov	arg03, #0
134a4     0A 18 06 F6 | 	mov	arg04, #10
134a8     68 6A B0 FD | 	call	#__system___basic_print_unsigned
134ac     FD 2A 02 F6 | 	mov	local07, result1
134b0     14 27 02 F6 | 	mov	local05, local06
134b4     15 27 02 F1 | 	add	local05, local07
134b8     00 12 06 F6 | 	mov	arg01, #0
134bc     E0 B5 B0 FD | 	call	#__system___getiolock_0425
134c0     FD 00 68 FC | 	wrlong	#0, result1
134c4     00 FA 05 F6 | 	mov	result1, #0
134c8     00 2E 06 F6 | 	mov	local09, #0
134cc                 | LR__1519
134cc                 | '   if t1.result_type=result_float then print t1.result.fresult;
134cc     1E 22 0E F2 | 	cmp	local03, #30 wz
134d0     30 00 90 5D |  if_ne	jmp	#LR__1520
134d4     00 12 06 F6 | 	mov	arg01, #0
134d8     C4 B5 B0 FD | 	call	#__system___getiolock_0425
134dc     FD 12 02 F6 | 	mov	arg01, result1
134e0     B8 5C B0 FD | 	call	#__system___lockmem
134e4     00 12 06 F6 | 	mov	arg01, #0
134e8     0F 15 02 F6 | 	mov	arg02, local01
134ec     00 16 06 F6 | 	mov	arg03, #0
134f0     23 18 06 F6 | 	mov	arg04, #35
134f4     A8 8D B0 FD | 	call	#__system___basic_print_float
134f8     00 12 06 F6 | 	mov	arg01, #0
134fc     A0 B5 B0 FD | 	call	#__system___getiolock_0425
13500     FD 00 68 FC | 	wrlong	#0, result1
13504                 | LR__1520
13504                 | '   if t1.result_type=result_string then print t1.result.sresult;
13504     1F 22 0E F2 | 	cmp	local03, #31 wz
13508     2C 00 90 5D |  if_ne	jmp	#LR__1521
1350c     00 12 06 F6 | 	mov	arg01, #0
13510     8C B5 B0 FD | 	call	#__system___getiolock_0425
13514     FD 12 02 F6 | 	mov	arg01, result1
13518     80 5C B0 FD | 	call	#__system___lockmem
1351c     00 12 06 F6 | 	mov	arg01, #0
13520     0F 15 02 F6 | 	mov	arg02, local01
13524     00 16 06 F6 | 	mov	arg03, #0
13528     64 69 B0 FD | 	call	#__system___basic_print_string
1352c     00 12 06 F6 | 	mov	arg01, #0
13530     6C B5 B0 FD | 	call	#__system___getiolock_0425
13534     FD 00 68 FC | 	wrlong	#0, result1
13538                 | LR__1521
13538                 | LR__1522
13538                 | ' if r=0 then 
13538     00 24 0E F2 | 	cmp	local04, #0 wz
1353c     1C 01 90 5D |  if_ne	jmp	#LR__1527
13540                 | '   if t1.result_type=result_int then print t1.result.iresult
13540     1C 22 0E F2 | 	cmp	local03, #28 wz
13544     40 00 90 5D |  if_ne	jmp	#LR__1523
13548     00 12 06 F6 | 	mov	arg01, #0
1354c     50 B5 B0 FD | 	call	#__system___getiolock_0425
13550     FD 12 02 F6 | 	mov	arg01, result1
13554     44 5C B0 FD | 	call	#__system___lockmem
13558     00 12 06 F6 | 	mov	arg01, #0
1355c     0F 15 02 F6 | 	mov	arg02, local01
13560     00 16 06 F6 | 	mov	arg03, #0
13564     0A 18 06 F6 | 	mov	arg04, #10
13568     68 69 B0 FD | 	call	#__system___basic_print_integer
1356c     00 12 06 F6 | 	mov	arg01, #0
13570     0A 14 06 F6 | 	mov	arg02, #10
13574     00 16 06 F6 | 	mov	arg03, #0
13578     BC 68 B0 FD | 	call	#__system___basic_print_char
1357c     00 12 06 F6 | 	mov	arg01, #0
13580     1C B5 B0 FD | 	call	#__system___getiolock_0425
13584     FD 00 68 FC | 	wrlong	#0, result1
13588                 | LR__1523
13588                 | '   if t1.result_type=result_uint then print t1.result.uresult
13588     1D 22 0E F2 | 	cmp	local03, #29 wz
1358c     40 00 90 5D |  if_ne	jmp	#LR__1524
13590     00 12 06 F6 | 	mov	arg01, #0
13594     08 B5 B0 FD | 	call	#__system___getiolock_0425
13598     FD 12 02 F6 | 	mov	arg01, result1
1359c     FC 5B B0 FD | 	call	#__system___lockmem
135a0     00 12 06 F6 | 	mov	arg01, #0
135a4     0F 15 02 F6 | 	mov	arg02, local01
135a8     00 16 06 F6 | 	mov	arg03, #0
135ac     0A 18 06 F6 | 	mov	arg04, #10
135b0     60 69 B0 FD | 	call	#__system___basic_print_unsigned
135b4     00 12 06 F6 | 	mov	arg01, #0
135b8     0A 14 06 F6 | 	mov	arg02, #10
135bc     00 16 06 F6 | 	mov	arg03, #0
135c0     74 68 B0 FD | 	call	#__system___basic_print_char
135c4     00 12 06 F6 | 	mov	arg01, #0
135c8     D4 B4 B0 FD | 	call	#__system___getiolock_0425
135cc     FD 00 68 FC | 	wrlong	#0, result1
135d0                 | LR__1524
135d0                 | '   if t1.result_type=result_float then print t1.result.fresult
135d0     1E 22 0E F2 | 	cmp	local03, #30 wz
135d4     40 00 90 5D |  if_ne	jmp	#LR__1525
135d8     00 12 06 F6 | 	mov	arg01, #0
135dc     C0 B4 B0 FD | 	call	#__system___getiolock_0425
135e0     FD 12 02 F6 | 	mov	arg01, result1
135e4     B4 5B B0 FD | 	call	#__system___lockmem
135e8     00 12 06 F6 | 	mov	arg01, #0
135ec     0F 15 02 F6 | 	mov	arg02, local01
135f0     00 16 06 F6 | 	mov	arg03, #0
135f4     23 18 06 F6 | 	mov	arg04, #35
135f8     A4 8C B0 FD | 	call	#__system___basic_print_float
135fc     00 12 06 F6 | 	mov	arg01, #0
13600     0A 14 06 F6 | 	mov	arg02, #10
13604     00 16 06 F6 | 	mov	arg03, #0
13608     2C 68 B0 FD | 	call	#__system___basic_print_char
1360c     00 12 06 F6 | 	mov	arg01, #0
13610     8C B4 B0 FD | 	call	#__system___getiolock_0425
13614     FD 00 68 FC | 	wrlong	#0, result1
13618                 | LR__1525
13618                 | '   if t1.result_type=result_string then print t1.result.sresult
13618     1F 22 0E F2 | 	cmp	local03, #31 wz
1361c     3C 00 90 5D |  if_ne	jmp	#LR__1526
13620     00 12 06 F6 | 	mov	arg01, #0
13624     78 B4 B0 FD | 	call	#__system___getiolock_0425
13628     FD 12 02 F6 | 	mov	arg01, result1
1362c     6C 5B B0 FD | 	call	#__system___lockmem
13630     00 12 06 F6 | 	mov	arg01, #0
13634     0F 15 02 F6 | 	mov	arg02, local01
13638     00 16 06 F6 | 	mov	arg03, #0
1363c     50 68 B0 FD | 	call	#__system___basic_print_string
13640     00 12 06 F6 | 	mov	arg01, #0
13644     0A 14 06 F6 | 	mov	arg02, #10
13648     00 16 06 F6 | 	mov	arg03, #0
1364c     E8 67 B0 FD | 	call	#__system___basic_print_char
13650     00 12 06 F6 | 	mov	arg01, #0
13654     48 B4 B0 FD | 	call	#__system___getiolock_0425
13658     FD 00 68 FC | 	wrlong	#0, result1
1365c                 | LR__1526
1365c                 | LR__1527
1365c                 | ' if r=print_mod_empty then print
1365c     20 24 0E F2 | 	cmp	local04, #32 wz
13660     2C 00 90 5D |  if_ne	jmp	#LR__1528
13664     00 12 06 F6 | 	mov	arg01, #0
13668     34 B4 B0 FD | 	call	#__system___getiolock_0425
1366c     FD 12 02 F6 | 	mov	arg01, result1
13670     28 5B B0 FD | 	call	#__system___lockmem
13674     00 12 06 F6 | 	mov	arg01, #0
13678     0A 14 06 F6 | 	mov	arg02, #10
1367c     00 16 06 F6 | 	mov	arg03, #0
13680     B4 67 B0 FD | 	call	#__system___basic_print_char
13684     00 12 06 F6 | 	mov	arg01, #0
13688     14 B4 B0 FD | 	call	#__system___getiolock_0425
1368c     FD 00 68 FC | 	wrlong	#0, result1
13690                 | LR__1528
13690                 | LR__1529
13690     A7 F0 03 F6 | 	mov	ptra, fp
13694     B2 00 A0 FD | 	call	#popregs_
13698                 | _do_print_ret
13698     2D 00 64 FD | 	ret
1369c                 | 
1369c                 | ' 
1369c                 | ' 
1369c                 | ' sub do_paper
1369c                 | _do_paper
1369c     03 4A 05 F6 | 	mov	COUNT_, #3
136a0     A8 00 A0 FD | 	call	#pushregs_
136a4     90 62 BF FD | 	call	#_pop
136a8     FD 1E 02 F6 | 	mov	local01, result1
136ac     FE 20 02 F6 | 	mov	local02, result2
136b0     FF 22 02 F6 | 	mov	local03, result3
136b4                 | ' t1=pop() 
136b4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
136b4     1E 22 0E F2 | 	cmp	local03, #30 wz
136b8     10 00 90 5D |  if_ne	jmp	#LR__1530
136bc     0F 13 02 F6 | 	mov	arg01, local01
136c0     00 14 06 F6 | 	mov	arg02, #0
136c4     88 8A B0 FD | 	call	#__system___float_tointeger
136c8     FD 1E 02 F6 | 	mov	local01, result1
136cc                 | LR__1530
136cc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
136cc     1F 22 0E F2 | 	cmp	local03, #31 wz
136d0     18 00 90 5D |  if_ne	jmp	#LR__1531
136d4     0F 13 02 F6 | 	mov	arg01, local01
136d8     94 8D B0 FD | 	call	#__system____builtin_atof
136dc     FD 12 02 F6 | 	mov	arg01, result1
136e0     00 14 06 F6 | 	mov	arg02, #0
136e4     68 8A B0 FD | 	call	#__system___float_tointeger
136e8     FD 1E 02 F6 | 	mov	local01, result1
136ec                 | LR__1531
136ec     56 00 00 FF 
136f0     FC E4 05 F1 | 	add	objptr, ##44284
136f4     F2 1E 62 FC | 	wrlong	local01, objptr
136f8     04 E4 05 F1 | 	add	objptr, #4
136fc     F2 12 02 FB | 	rdlong	arg01, objptr
13700                 | ' 
13700                 | ' write_color:=ff
13700     56 00 00 FF 
13704     C3 E4 85 F1 | 	sub	objptr, ##44227
13708     F2 12 62 FC | 	wrlong	arg01, objptr
1370c                 | ' write_background:=bb
1370c     04 E4 05 F1 | 	add	objptr, #4
13710     F2 1E 62 FC | 	wrlong	local01, objptr
13714     41 E4 85 F1 | 	sub	objptr, #65
13718     A7 F0 03 F6 | 	mov	ptra, fp
1371c     B2 00 A0 FD | 	call	#popregs_
13720                 | _do_paper_ret
13720     2D 00 64 FD | 	ret
13724                 | 
13724                 | ' 
13724                 | ' sub do_ink
13724                 | _do_ink
13724     03 4A 05 F6 | 	mov	COUNT_, #3
13728     A8 00 A0 FD | 	call	#pushregs_
1372c     08 62 BF FD | 	call	#_pop
13730     FD 1E 02 F6 | 	mov	local01, result1
13734     FE 20 02 F6 | 	mov	local02, result2
13738     FF 22 02 F6 | 	mov	local03, result3
1373c                 | ' t1=pop() 
1373c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1373c     1E 22 0E F2 | 	cmp	local03, #30 wz
13740     10 00 90 5D |  if_ne	jmp	#LR__1540
13744     0F 13 02 F6 | 	mov	arg01, local01
13748     00 14 06 F6 | 	mov	arg02, #0
1374c     00 8A B0 FD | 	call	#__system___float_tointeger
13750     FD 1E 02 F6 | 	mov	local01, result1
13754                 | LR__1540
13754                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13754     1F 22 0E F2 | 	cmp	local03, #31 wz
13758     18 00 90 5D |  if_ne	jmp	#LR__1541
1375c     0F 13 02 F6 | 	mov	arg01, local01
13760     0C 8D B0 FD | 	call	#__system____builtin_atof
13764     FD 12 02 F6 | 	mov	arg01, result1
13768     00 14 06 F6 | 	mov	arg02, #0
1376c     E0 89 B0 FD | 	call	#__system___float_tointeger
13770     FD 1E 02 F6 | 	mov	local01, result1
13774                 | LR__1541
13774     56 00 00 FF 
13778     00 E5 05 F1 | 	add	objptr, ##44288
1377c     F2 1E 62 FC | 	wrlong	local01, objptr
13780     04 E4 85 F1 | 	sub	objptr, #4
13784     F2 14 02 FB | 	rdlong	arg02, objptr
13788                 | ' 
13788                 | ' write_color:=ff
13788     56 00 00 FF 
1378c     BF E4 85 F1 | 	sub	objptr, ##44223
13790     F2 1E 62 FC | 	wrlong	local01, objptr
13794                 | ' write_background:=bb
13794     04 E4 05 F1 | 	add	objptr, #4
13798     F2 14 62 FC | 	wrlong	arg02, objptr
1379c     56 00 00 FF 
137a0     BF E4 05 F1 | 	add	objptr, ##44223
137a4     F2 12 02 FB | 	rdlong	arg01, objptr
137a8     56 00 00 FF 
137ac     00 E5 85 F1 | 	sub	objptr, ##44288
137b0     5C 36 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
137b4     A7 F0 03 F6 | 	mov	ptra, fp
137b8     B2 00 A0 FD | 	call	#popregs_
137bc                 | _do_ink_ret
137bc     2D 00 64 FD | 	ret
137c0                 | 
137c0                 | ' 
137c0                 | ' 
137c0                 | ' sub do_font
137c0                 | _do_font
137c0     03 4A 05 F6 | 	mov	COUNT_, #3
137c4     A8 00 A0 FD | 	call	#pushregs_
137c8     6C 61 BF FD | 	call	#_pop
137cc     FD 1E 02 F6 | 	mov	local01, result1
137d0     FE 20 02 F6 | 	mov	local02, result2
137d4     FF 22 02 F6 | 	mov	local03, result3
137d8                 | ' t1=pop() 
137d8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
137d8     1E 22 0E F2 | 	cmp	local03, #30 wz
137dc     10 00 90 5D |  if_ne	jmp	#LR__1550
137e0     0F 13 02 F6 | 	mov	arg01, local01
137e4     00 14 06 F6 | 	mov	arg02, #0
137e8     64 89 B0 FD | 	call	#__system___float_tointeger
137ec     FD 1E 02 F6 | 	mov	local01, result1
137f0                 | LR__1550
137f0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
137f0     1F 22 0E F2 | 	cmp	local03, #31 wz
137f4     18 00 90 5D |  if_ne	jmp	#LR__1551
137f8     0F 13 02 F6 | 	mov	arg01, local01
137fc     70 8C B0 FD | 	call	#__system____builtin_atof
13800     FD 12 02 F6 | 	mov	arg01, result1
13804     00 14 06 F6 | 	mov	arg02, #0
13808     44 89 B0 FD | 	call	#__system___float_tointeger
1380c     FD 1E 02 F6 | 	mov	local01, result1
13810                 | LR__1551
13810     56 00 00 FF 
13814     04 E5 05 F1 | 	add	objptr, ##44292
13818     F2 1E 62 FC | 	wrlong	local01, objptr
1381c     56 00 00 FF 
13820     04 E5 85 F1 | 	sub	objptr, ##44292
13824     02 1E 66 F0 | 	shl	local01, #2
13828     0F 13 02 F6 | 	mov	arg01, local01
1382c     40 45 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13830     A7 F0 03 F6 | 	mov	ptra, fp
13834     B2 00 A0 FD | 	call	#popregs_
13838                 | _do_font_ret
13838     2D 00 64 FD | 	ret
1383c                 | 
1383c                 | ' 
1383c                 | ' sub do_mode
1383c                 | _do_mode
1383c     04 4A 05 F6 | 	mov	COUNT_, #4
13840     A8 00 A0 FD | 	call	#pushregs_
13844     F0 60 BF FD | 	call	#_pop
13848     FD 1E 02 F6 | 	mov	local01, result1
1384c     FE 20 02 F6 | 	mov	local02, result2
13850     FF 22 02 F6 | 	mov	local03, result3
13854                 | ' t1=pop() 
13854                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13854     1E 22 0E F2 | 	cmp	local03, #30 wz
13858     10 00 90 5D |  if_ne	jmp	#LR__1560
1385c     0F 13 02 F6 | 	mov	arg01, local01
13860     00 14 06 F6 | 	mov	arg02, #0
13864     E8 88 B0 FD | 	call	#__system___float_tointeger
13868     FD 1E 02 F6 | 	mov	local01, result1
1386c                 | LR__1560
1386c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1386c     1F 22 0E F2 | 	cmp	local03, #31 wz
13870     18 00 90 5D |  if_ne	jmp	#LR__1561
13874     0F 13 02 F6 | 	mov	arg01, local01
13878     F4 8B B0 FD | 	call	#__system____builtin_atof
1387c     FD 12 02 F6 | 	mov	arg01, result1
13880     00 14 06 F6 | 	mov	arg02, #0
13884     C8 88 B0 FD | 	call	#__system___float_tointeger
13888     FD 1E 02 F6 | 	mov	local01, result1
1388c                 | LR__1561
1388c                 | ' select case t1.result.iresult
1388c     0F 25 02 F6 | 	mov	local04, local01
13890     05 24 26 F3 | 	fle	local04, #5
13894     30 24 62 FD | 	jmprel	local04
13898                 | LR__1562
13898     14 00 90 FD | 	jmp	#LR__1563
1389c     A8 00 90 FD | 	jmp	#LR__1564
138a0     10 01 90 FD | 	jmp	#LR__1565
138a4     78 01 90 FD | 	jmp	#LR__1566
138a8     E0 01 90 FD | 	jmp	#LR__1567
138ac     70 02 90 FD | 	jmp	#LR__1568
138b0                 | LR__1563
138b0     56 00 00 FF 
138b4     04 E5 05 F1 | 	add	objptr, ##44292
138b8     F2 02 68 FC | 	wrlong	#1, objptr
138bc     04 E4 85 F1 | 	sub	objptr, #4
138c0     F2 34 69 FC | 	wrlong	#154, objptr
138c4     22 00 00 FF 
138c8     A4 E5 05 F1 | 	add	objptr, ##17828
138cc     F2 02 68 FC | 	wrlong	#1, objptr
138d0     22 00 00 FF 
138d4     A8 E5 85 F1 | 	sub	objptr, ##17832
138d8     F2 26 69 FC | 	wrlong	#147, objptr
138dc     56 00 00 FF 
138e0     FC E4 85 F1 | 	sub	objptr, ##44284
138e4     04 12 06 F6 | 	mov	arg01, #4
138e8     84 44 B0 FD | 	call	#_hg010b_spin2_setfontfamily
138ec     56 00 00 FF 
138f0     00 E5 05 F1 | 	add	objptr, ##44288
138f4     F2 12 02 FB | 	rdlong	arg01, objptr
138f8     04 E4 85 F1 | 	sub	objptr, #4
138fc     F2 14 02 FB | 	rdlong	arg02, objptr
13900                 | ' 
13900                 | ' write_color:=ff
13900     56 00 00 FF 
13904     BF E4 85 F1 | 	sub	objptr, ##44223
13908     F2 12 62 FC | 	wrlong	arg01, objptr
1390c                 | ' write_background:=bb
1390c     04 E4 05 F1 | 	add	objptr, #4
13910     F2 14 62 FC | 	wrlong	arg02, objptr
13914     01 00 00 FF 
13918     00 EA 05 F1 | 	add	ptr__dat__, ##512
1391c     7A 00 00 FF 
13920     07 E5 05 F1 | 	add	objptr, ##62727
13924     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
13928     04 E4 85 F1 | 	sub	objptr, #4
1392c     03 00 80 FF 
13930     F2 28 69 FC | 	wrlong	##1684, objptr
13934     7A 00 00 FF 
13938     44 E5 85 F1 | 	sub	objptr, ##62788
1393c     01 00 00 FF 
13940     00 EA 85 F1 | 	sub	ptr__dat__, ##512
13944     D8 01 90 FD | 	jmp	#LR__1568
13948                 | LR__1564
13948     56 00 00 FF 
1394c     04 E5 05 F1 | 	add	objptr, ##44292
13950     F2 00 68 FC | 	wrlong	#0, objptr
13954     04 E4 85 F1 | 	sub	objptr, #4
13958     F2 2E 68 FC | 	wrlong	#23, objptr
1395c     22 00 00 FF 
13960     A4 E5 05 F1 | 	add	objptr, ##17828
13964     F2 00 68 FC | 	wrlong	#0, objptr
13968     22 00 00 FF 
1396c     A8 E5 85 F1 | 	sub	objptr, ##17832
13970     F2 00 68 FC | 	wrlong	#0, objptr
13974     56 00 00 FF 
13978     FC E4 85 F1 | 	sub	objptr, ##44284
1397c     00 12 06 F6 | 	mov	arg01, #0
13980     EC 43 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13984     56 00 00 FF 
13988     00 E5 05 F1 | 	add	objptr, ##44288
1398c     F2 12 02 FB | 	rdlong	arg01, objptr
13990     04 E4 85 F1 | 	sub	objptr, #4
13994     F2 14 02 FB | 	rdlong	arg02, objptr
13998                 | ' 
13998                 | ' write_color:=ff
13998     56 00 00 FF 
1399c     BF E4 85 F1 | 	sub	objptr, ##44223
139a0     F2 12 62 FC | 	wrlong	arg01, objptr
139a4                 | ' write_background:=bb
139a4     04 E4 05 F1 | 	add	objptr, #4
139a8     F2 14 62 FC | 	wrlong	arg02, objptr
139ac     41 E4 85 F1 | 	sub	objptr, #65
139b0     6C 01 90 FD | 	jmp	#LR__1568
139b4                 | LR__1565
139b4     56 00 00 FF 
139b8     04 E5 05 F1 | 	add	objptr, ##44292
139bc     F2 00 68 FC | 	wrlong	#0, objptr
139c0     04 E4 85 F1 | 	sub	objptr, #4
139c4     F2 6A 69 FC | 	wrlong	#181, objptr
139c8     22 00 00 FF 
139cc     A4 E5 05 F1 | 	add	objptr, ##17828
139d0     F2 00 68 FC | 	wrlong	#0, objptr
139d4     22 00 00 FF 
139d8     A8 E5 85 F1 | 	sub	objptr, ##17832
139dc     F2 00 68 FC | 	wrlong	#0, objptr
139e0     56 00 00 FF 
139e4     FC E4 85 F1 | 	sub	objptr, ##44284
139e8     00 12 06 F6 | 	mov	arg01, #0
139ec     80 43 B0 FD | 	call	#_hg010b_spin2_setfontfamily
139f0     56 00 00 FF 
139f4     00 E5 05 F1 | 	add	objptr, ##44288
139f8     F2 12 02 FB | 	rdlong	arg01, objptr
139fc     04 E4 85 F1 | 	sub	objptr, #4
13a00     F2 14 02 FB | 	rdlong	arg02, objptr
13a04                 | ' 
13a04                 | ' write_color:=ff
13a04     56 00 00 FF 
13a08     BF E4 85 F1 | 	sub	objptr, ##44223
13a0c     F2 12 62 FC | 	wrlong	arg01, objptr
13a10                 | ' write_background:=bb
13a10     04 E4 05 F1 | 	add	objptr, #4
13a14     F2 14 62 FC | 	wrlong	arg02, objptr
13a18     41 E4 85 F1 | 	sub	objptr, #65
13a1c     00 01 90 FD | 	jmp	#LR__1568
13a20                 | LR__1566
13a20     56 00 00 FF 
13a24     04 E5 05 F1 | 	add	objptr, ##44292
13a28     F2 00 68 FC | 	wrlong	#0, objptr
13a2c     04 E4 85 F1 | 	sub	objptr, #4
13a30     F2 1E 68 FC | 	wrlong	#15, objptr
13a34     22 00 00 FF 
13a38     A4 E5 05 F1 | 	add	objptr, ##17828
13a3c     F2 00 68 FC | 	wrlong	#0, objptr
13a40     22 00 00 FF 
13a44     A8 E5 85 F1 | 	sub	objptr, ##17832
13a48     F2 00 68 FC | 	wrlong	#0, objptr
13a4c     56 00 00 FF 
13a50     FC E4 85 F1 | 	sub	objptr, ##44284
13a54     00 12 06 F6 | 	mov	arg01, #0
13a58     14 43 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13a5c     56 00 00 FF 
13a60     00 E5 05 F1 | 	add	objptr, ##44288
13a64     F2 12 02 FB | 	rdlong	arg01, objptr
13a68     04 E4 85 F1 | 	sub	objptr, #4
13a6c     F2 14 02 FB | 	rdlong	arg02, objptr
13a70                 | ' 
13a70                 | ' write_color:=ff
13a70     56 00 00 FF 
13a74     BF E4 85 F1 | 	sub	objptr, ##44223
13a78     F2 12 62 FC | 	wrlong	arg01, objptr
13a7c                 | ' write_background:=bb
13a7c     04 E4 05 F1 | 	add	objptr, #4
13a80     F2 14 62 FC | 	wrlong	arg02, objptr
13a84     41 E4 85 F1 | 	sub	objptr, #65
13a88     94 00 90 FD | 	jmp	#LR__1568
13a8c                 | LR__1567
13a8c     56 00 00 FF 
13a90     04 E5 05 F1 | 	add	objptr, ##44292
13a94     F2 02 68 FC | 	wrlong	#1, objptr
13a98     04 E4 85 F1 | 	sub	objptr, #4
13a9c     F2 02 68 FC | 	wrlong	#1, objptr
13aa0     22 00 00 FF 
13aa4     A4 E5 05 F1 | 	add	objptr, ##17828
13aa8     F2 02 68 FC | 	wrlong	#1, objptr
13aac     22 00 00 FF 
13ab0     A8 E5 85 F1 | 	sub	objptr, ##17832
13ab4     F2 1C 68 FC | 	wrlong	#14, objptr
13ab8     56 00 00 FF 
13abc     FC E4 85 F1 | 	sub	objptr, ##44284
13ac0     04 12 06 F6 | 	mov	arg01, #4
13ac4     A8 42 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13ac8     56 00 00 FF 
13acc     00 E5 05 F1 | 	add	objptr, ##44288
13ad0     F2 12 02 FB | 	rdlong	arg01, objptr
13ad4     04 E4 85 F1 | 	sub	objptr, #4
13ad8     F2 14 02 FB | 	rdlong	arg02, objptr
13adc                 | ' 
13adc                 | ' write_color:=ff
13adc     56 00 00 FF 
13ae0     BF E4 85 F1 | 	sub	objptr, ##44223
13ae4     F2 12 62 FC | 	wrlong	arg01, objptr
13ae8                 | ' write_background:=bb
13ae8     04 E4 05 F1 | 	add	objptr, #4
13aec     F2 14 62 FC | 	wrlong	arg02, objptr
13af0     07 00 00 FF 
13af4     72 EB 05 F1 | 	add	ptr__dat__, ##3954
13af8     7A 00 00 FF 
13afc     07 E5 05 F1 | 	add	objptr, ##62727
13b00     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
13b04     04 E4 85 F1 | 	sub	objptr, #4
13b08     03 00 80 FF 
13b0c     F2 28 69 FC | 	wrlong	##1684, objptr
13b10     7A 00 00 FF 
13b14     44 E5 85 F1 | 	sub	objptr, ##62788
13b18     07 00 00 FF 
13b1c     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
13b20                 | LR__1568
13b20     7A 00 00 FF 
13b24     40 E5 05 F1 | 	add	objptr, ##62784
13b28     F2 1E 62 FC | 	wrlong	local01, objptr
13b2c     24 00 00 FF 
13b30     40 E4 85 F1 | 	sub	objptr, ##18496
13b34     F2 12 02 FB | 	rdlong	arg01, objptr
13b38     04 E4 85 F1 | 	sub	objptr, #4
13b3c     F2 14 02 FB | 	rdlong	arg02, objptr
13b40     56 00 00 FF 
13b44     FC E4 85 F1 | 	sub	objptr, ##44284
13b48     0C 43 B0 FD | 	call	#_hg010b_spin2_cls
13b4c     46 01 00 FF 
13b50     92 12 06 F6 | 	mov	arg01, ##@LR__4629
13b54                 | ' 
13b54                 | ' write(text)
13b54     BC 45 B0 FD | 	call	#_hg010b_spin2_write
13b58                 | ' crlf
13b58     18 47 B0 FD | 	call	#_hg010b_spin2_crlf
13b5c     10 00 00 FF 
13b60     10 EB 05 F1 | 	add	ptr__dat__, ##8464
13b64     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
13b68     10 00 00 FF 
13b6c     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
13b70                 | ' 
13b70                 | ' write(text)
13b70     A0 45 B0 FD | 	call	#_hg010b_spin2_write
13b74                 | ' crlf
13b74     FC 46 B0 FD | 	call	#_hg010b_spin2_crlf
13b78     79 00 00 FF 
13b7c     A0 E4 05 F1 | 	add	objptr, ##62112
13b80     F2 12 02 FB | 	rdlong	arg01, objptr
13b84     79 00 00 FF 
13b88     A0 E4 85 F1 | 	sub	objptr, ##62112
13b8c                 | ' 
13b8c                 | ' write(text)
13b8c     84 45 B0 FD | 	call	#_hg010b_spin2_write
13b90                 | ' crlf
13b90     E0 46 B0 FD | 	call	#_hg010b_spin2_crlf
13b94     A7 F0 03 F6 | 	mov	ptra, fp
13b98     B2 00 A0 FD | 	call	#popregs_
13b9c                 | _do_mode_ret
13b9c     2D 00 64 FD | 	ret
13ba0                 | 
13ba0                 | ' 
13ba0                 | ' 
13ba0                 | ' 
13ba0                 | ' sub do_pinwrite
13ba0                 | _do_pinwrite
13ba0     01 4A 05 F6 | 	mov	COUNT_, #1
13ba4     A8 00 A0 FD | 	call	#pushregs_
13ba8     18 F0 07 F1 | 	add	ptra, #24
13bac     88 5D BF FD | 	call	#_pop
13bb0     FD 14 02 F6 | 	mov	arg02, result1
13bb4     FE 12 02 F6 | 	mov	arg01, result2
13bb8     FF 1E 02 F6 | 	mov	local01, result3
13bbc     A7 14 62 FC | 	wrlong	arg02, fp
13bc0     04 4E 05 F1 | 	add	fp, #4
13bc4     A7 12 62 FC | 	wrlong	arg01, fp
13bc8     04 4E 05 F1 | 	add	fp, #4
13bcc     A7 1E 62 FC | 	wrlong	local01, fp
13bd0     08 4E 85 F1 | 	sub	fp, #8
13bd4     60 5D BF FD | 	call	#_pop
13bd8     FF 1E 02 F6 | 	mov	local01, result3
13bdc     0C 4E 05 F1 | 	add	fp, #12
13be0     A7 FA 61 FC | 	wrlong	result1, fp
13be4     04 4E 05 F1 | 	add	fp, #4
13be8     A7 FC 61 FC | 	wrlong	result2, fp
13bec     04 4E 05 F1 | 	add	fp, #4
13bf0     A7 1E 62 FC | 	wrlong	local01, fp
13bf4     08 4E 85 F1 | 	sub	fp, #8
13bf8     A7 12 02 F6 | 	mov	arg01, fp
13bfc     0C 4E 85 F1 | 	sub	fp, #12
13c00     CC D4 BF FD | 	call	#_converttoint
13c04     FD 1E 02 F6 | 	mov	local01, result1
13c08     A7 12 02 F6 | 	mov	arg01, fp
13c0c     C0 D4 BF FD | 	call	#_converttoint
13c10     FD 14 02 F6 | 	mov	arg02, result1
13c14     0F 13 02 F6 | 	mov	arg01, local01
13c18     34 57 B0 FD | 	call	#__system___pinwrite
13c1c     A7 F0 03 F6 | 	mov	ptra, fp
13c20     B2 00 A0 FD | 	call	#popregs_
13c24                 | _do_pinwrite_ret
13c24     2D 00 64 FD | 	ret
13c28                 | 
13c28                 | ' 
13c28                 | ' sub do_pinfloat
13c28                 | _do_pinfloat
13c28     00 4A 05 F6 | 	mov	COUNT_, #0
13c2c     A8 00 A0 FD | 	call	#pushregs_
13c30     0C F0 07 F1 | 	add	ptra, #12
13c34     00 5D BF FD | 	call	#_pop
13c38     A7 FA 61 FC | 	wrlong	result1, fp
13c3c     04 4E 05 F1 | 	add	fp, #4
13c40     A7 FC 61 FC | 	wrlong	result2, fp
13c44     04 4E 05 F1 | 	add	fp, #4
13c48     A7 FE 61 FC | 	wrlong	result3, fp
13c4c     08 4E 85 F1 | 	sub	fp, #8
13c50     A7 12 02 F6 | 	mov	arg01, fp
13c54     78 D4 BF FD | 	call	#_converttoint
13c58     50 FA 61 FD | 	fltl	result1
13c5c     A7 F0 03 F6 | 	mov	ptra, fp
13c60     B2 00 A0 FD | 	call	#popregs_
13c64                 | _do_pinfloat_ret
13c64     2D 00 64 FD | 	ret
13c68                 | 
13c68                 | ' 
13c68                 | ' sub do_pinlo
13c68                 | _do_pinlo
13c68     00 4A 05 F6 | 	mov	COUNT_, #0
13c6c     A8 00 A0 FD | 	call	#pushregs_
13c70     0C F0 07 F1 | 	add	ptra, #12
13c74     C0 5C BF FD | 	call	#_pop
13c78     A7 FA 61 FC | 	wrlong	result1, fp
13c7c     04 4E 05 F1 | 	add	fp, #4
13c80     A7 FC 61 FC | 	wrlong	result2, fp
13c84     04 4E 05 F1 | 	add	fp, #4
13c88     A7 FE 61 FC | 	wrlong	result3, fp
13c8c     08 4E 85 F1 | 	sub	fp, #8
13c90     A7 12 02 F6 | 	mov	arg01, fp
13c94     38 D4 BF FD | 	call	#_converttoint
13c98     58 FA 61 FD | 	drvl	result1
13c9c     A7 F0 03 F6 | 	mov	ptra, fp
13ca0     B2 00 A0 FD | 	call	#popregs_
13ca4                 | _do_pinlo_ret
13ca4     2D 00 64 FD | 	ret
13ca8                 | 
13ca8                 | ' 
13ca8                 | ' sub do_pinhi
13ca8                 | _do_pinhi
13ca8     00 4A 05 F6 | 	mov	COUNT_, #0
13cac     A8 00 A0 FD | 	call	#pushregs_
13cb0     0C F0 07 F1 | 	add	ptra, #12
13cb4     80 5C BF FD | 	call	#_pop
13cb8     A7 FA 61 FC | 	wrlong	result1, fp
13cbc     04 4E 05 F1 | 	add	fp, #4
13cc0     A7 FC 61 FC | 	wrlong	result2, fp
13cc4     04 4E 05 F1 | 	add	fp, #4
13cc8     A7 FE 61 FC | 	wrlong	result3, fp
13ccc     08 4E 85 F1 | 	sub	fp, #8
13cd0     A7 12 02 F6 | 	mov	arg01, fp
13cd4     F8 D3 BF FD | 	call	#_converttoint
13cd8     59 FA 61 FD | 	drvh	result1
13cdc     A7 F0 03 F6 | 	mov	ptra, fp
13ce0     B2 00 A0 FD | 	call	#popregs_
13ce4                 | _do_pinhi_ret
13ce4     2D 00 64 FD | 	ret
13ce8                 | 
13ce8                 | ' 
13ce8                 | ' sub do_pintoggle
13ce8                 | _do_pintoggle
13ce8     00 4A 05 F6 | 	mov	COUNT_, #0
13cec     A8 00 A0 FD | 	call	#pushregs_
13cf0     0C F0 07 F1 | 	add	ptra, #12
13cf4     40 5C BF FD | 	call	#_pop
13cf8     A7 FA 61 FC | 	wrlong	result1, fp
13cfc     04 4E 05 F1 | 	add	fp, #4
13d00     A7 FC 61 FC | 	wrlong	result2, fp
13d04     04 4E 05 F1 | 	add	fp, #4
13d08     A7 FE 61 FC | 	wrlong	result3, fp
13d0c     08 4E 85 F1 | 	sub	fp, #8
13d10     A7 12 02 F6 | 	mov	arg01, fp
13d14     B8 D3 BF FD | 	call	#_converttoint
13d18     5F FA 61 FD | 	drvnot	result1
13d1c     A7 F0 03 F6 | 	mov	ptra, fp
13d20     B2 00 A0 FD | 	call	#popregs_
13d24                 | _do_pintoggle_ret
13d24     2D 00 64 FD | 	ret
13d28                 | 
13d28                 | ' 
13d28                 | ' 
13d28                 | ' sub do_pinstart
13d28                 | _do_pinstart
13d28     03 4A 05 F6 | 	mov	COUNT_, #3
13d2c     A8 00 A0 FD | 	call	#pushregs_
13d30     30 F0 07 F1 | 	add	ptra, #48
13d34     00 5C BF FD | 	call	#_pop
13d38     FD 16 02 F6 | 	mov	arg03, result1
13d3c     FE 14 02 F6 | 	mov	arg02, result2
13d40     FF 18 02 F6 | 	mov	arg04, result3
13d44     A7 16 62 FC | 	wrlong	arg03, fp
13d48     04 4E 05 F1 | 	add	fp, #4
13d4c     A7 14 62 FC | 	wrlong	arg02, fp
13d50     04 4E 05 F1 | 	add	fp, #4
13d54     A7 18 62 FC | 	wrlong	arg04, fp
13d58     08 4E 85 F1 | 	sub	fp, #8
13d5c     D8 5B BF FD | 	call	#_pop
13d60     FD 16 02 F6 | 	mov	arg03, result1
13d64     FE 14 02 F6 | 	mov	arg02, result2
13d68     FF 18 02 F6 | 	mov	arg04, result3
13d6c     0C 4E 05 F1 | 	add	fp, #12
13d70     A7 16 62 FC | 	wrlong	arg03, fp
13d74     04 4E 05 F1 | 	add	fp, #4
13d78     A7 14 62 FC | 	wrlong	arg02, fp
13d7c     04 4E 05 F1 | 	add	fp, #4
13d80     A7 18 62 FC | 	wrlong	arg04, fp
13d84     14 4E 85 F1 | 	sub	fp, #20
13d88     AC 5B BF FD | 	call	#_pop
13d8c     FD 16 02 F6 | 	mov	arg03, result1
13d90     FE 14 02 F6 | 	mov	arg02, result2
13d94     FF 18 02 F6 | 	mov	arg04, result3
13d98     18 4E 05 F1 | 	add	fp, #24
13d9c     A7 16 62 FC | 	wrlong	arg03, fp
13da0     04 4E 05 F1 | 	add	fp, #4
13da4     A7 14 62 FC | 	wrlong	arg02, fp
13da8     04 4E 05 F1 | 	add	fp, #4
13dac     A7 18 62 FC | 	wrlong	arg04, fp
13db0     20 4E 85 F1 | 	sub	fp, #32
13db4     80 5B BF FD | 	call	#_pop
13db8     FF 16 02 F6 | 	mov	arg03, result3
13dbc     24 4E 05 F1 | 	add	fp, #36
13dc0     A7 FA 61 FC | 	wrlong	result1, fp
13dc4     04 4E 05 F1 | 	add	fp, #4
13dc8     A7 FC 61 FC | 	wrlong	result2, fp
13dcc     04 4E 05 F1 | 	add	fp, #4
13dd0     A7 16 62 FC | 	wrlong	arg03, fp
13dd4     08 4E 85 F1 | 	sub	fp, #8
13dd8     A7 12 02 F6 | 	mov	arg01, fp
13ddc     24 4E 85 F1 | 	sub	fp, #36
13de0     EC D2 BF FD | 	call	#_converttoint
13de4     FD 1E 02 F6 | 	mov	local01, result1
13de8     18 4E 05 F1 | 	add	fp, #24
13dec     A7 12 02 F6 | 	mov	arg01, fp
13df0     18 4E 85 F1 | 	sub	fp, #24
13df4     D8 D2 BF FD | 	call	#_converttoint
13df8     FD 20 02 F6 | 	mov	local02, result1
13dfc     0C 4E 05 F1 | 	add	fp, #12
13e00     A7 12 02 F6 | 	mov	arg01, fp
13e04     0C 4E 85 F1 | 	sub	fp, #12
13e08     C4 D2 BF FD | 	call	#_converttoint
13e0c     FD 22 02 F6 | 	mov	local03, result1
13e10     A7 12 02 F6 | 	mov	arg01, fp
13e14     B8 D2 BF FD | 	call	#_converttoint
13e18     40 1E 62 FD | 	dirl	local01
13e1c     0F 21 02 FC | 	wrpin	local02, local01
13e20     0F 23 12 FC | 	wxpin	local03, local01
13e24     0F FB 21 FC | 	wypin	result1, local01
13e28     41 1E 62 FD | 	dirh	local01
13e2c     A7 F0 03 F6 | 	mov	ptra, fp
13e30     B2 00 A0 FD | 	call	#popregs_
13e34                 | _do_pinstart_ret
13e34     2D 00 64 FD | 	ret
13e38                 | 
13e38                 | ' 
13e38                 | ' 
13e38                 | ' sub do_wrpin
13e38                 | _do_wrpin
13e38     01 4A 05 F6 | 	mov	COUNT_, #1
13e3c     A8 00 A0 FD | 	call	#pushregs_
13e40     18 F0 07 F1 | 	add	ptra, #24
13e44     F0 5A BF FD | 	call	#_pop
13e48     FD 14 02 F6 | 	mov	arg02, result1
13e4c     FE 12 02 F6 | 	mov	arg01, result2
13e50     FF 1E 02 F6 | 	mov	local01, result3
13e54     A7 14 62 FC | 	wrlong	arg02, fp
13e58     04 4E 05 F1 | 	add	fp, #4
13e5c     A7 12 62 FC | 	wrlong	arg01, fp
13e60     04 4E 05 F1 | 	add	fp, #4
13e64     A7 1E 62 FC | 	wrlong	local01, fp
13e68     08 4E 85 F1 | 	sub	fp, #8
13e6c     C8 5A BF FD | 	call	#_pop
13e70     FF 1E 02 F6 | 	mov	local01, result3
13e74     0C 4E 05 F1 | 	add	fp, #12
13e78     A7 FA 61 FC | 	wrlong	result1, fp
13e7c     04 4E 05 F1 | 	add	fp, #4
13e80     A7 FC 61 FC | 	wrlong	result2, fp
13e84     04 4E 05 F1 | 	add	fp, #4
13e88     A7 1E 62 FC | 	wrlong	local01, fp
13e8c     08 4E 85 F1 | 	sub	fp, #8
13e90     A7 12 02 F6 | 	mov	arg01, fp
13e94     0C 4E 85 F1 | 	sub	fp, #12
13e98     34 D2 BF FD | 	call	#_converttoint
13e9c     FD 1E 02 F6 | 	mov	local01, result1
13ea0     A7 12 02 F6 | 	mov	arg01, fp
13ea4     28 D2 BF FD | 	call	#_converttoint
13ea8     0F FB 01 FC | 	wrpin	result1, local01
13eac     A7 F0 03 F6 | 	mov	ptra, fp
13eb0     B2 00 A0 FD | 	call	#popregs_
13eb4                 | _do_wrpin_ret
13eb4     2D 00 64 FD | 	ret
13eb8                 | 
13eb8                 | ' 
13eb8                 | ' sub do_wxpin
13eb8                 | _do_wxpin
13eb8     01 4A 05 F6 | 	mov	COUNT_, #1
13ebc     A8 00 A0 FD | 	call	#pushregs_
13ec0     18 F0 07 F1 | 	add	ptra, #24
13ec4     70 5A BF FD | 	call	#_pop
13ec8     FD 14 02 F6 | 	mov	arg02, result1
13ecc     FE 12 02 F6 | 	mov	arg01, result2
13ed0     FF 1E 02 F6 | 	mov	local01, result3
13ed4     A7 14 62 FC | 	wrlong	arg02, fp
13ed8     04 4E 05 F1 | 	add	fp, #4
13edc     A7 12 62 FC | 	wrlong	arg01, fp
13ee0     04 4E 05 F1 | 	add	fp, #4
13ee4     A7 1E 62 FC | 	wrlong	local01, fp
13ee8     08 4E 85 F1 | 	sub	fp, #8
13eec     48 5A BF FD | 	call	#_pop
13ef0     FF 1E 02 F6 | 	mov	local01, result3
13ef4     0C 4E 05 F1 | 	add	fp, #12
13ef8     A7 FA 61 FC | 	wrlong	result1, fp
13efc     04 4E 05 F1 | 	add	fp, #4
13f00     A7 FC 61 FC | 	wrlong	result2, fp
13f04     04 4E 05 F1 | 	add	fp, #4
13f08     A7 1E 62 FC | 	wrlong	local01, fp
13f0c     08 4E 85 F1 | 	sub	fp, #8
13f10     A7 12 02 F6 | 	mov	arg01, fp
13f14     0C 4E 85 F1 | 	sub	fp, #12
13f18     B4 D1 BF FD | 	call	#_converttoint
13f1c     FD 1E 02 F6 | 	mov	local01, result1
13f20     A7 12 02 F6 | 	mov	arg01, fp
13f24     A8 D1 BF FD | 	call	#_converttoint
13f28     0F FB 11 FC | 	wxpin	result1, local01
13f2c     A7 F0 03 F6 | 	mov	ptra, fp
13f30     B2 00 A0 FD | 	call	#popregs_
13f34                 | _do_wxpin_ret
13f34     2D 00 64 FD | 	ret
13f38                 | 
13f38                 | ' 
13f38                 | ' sub do_wypin
13f38                 | _do_wypin
13f38     01 4A 05 F6 | 	mov	COUNT_, #1
13f3c     A8 00 A0 FD | 	call	#pushregs_
13f40     18 F0 07 F1 | 	add	ptra, #24
13f44     F0 59 BF FD | 	call	#_pop
13f48     FD 14 02 F6 | 	mov	arg02, result1
13f4c     FE 12 02 F6 | 	mov	arg01, result2
13f50     FF 1E 02 F6 | 	mov	local01, result3
13f54     A7 14 62 FC | 	wrlong	arg02, fp
13f58     04 4E 05 F1 | 	add	fp, #4
13f5c     A7 12 62 FC | 	wrlong	arg01, fp
13f60     04 4E 05 F1 | 	add	fp, #4
13f64     A7 1E 62 FC | 	wrlong	local01, fp
13f68     08 4E 85 F1 | 	sub	fp, #8
13f6c     C8 59 BF FD | 	call	#_pop
13f70     FF 1E 02 F6 | 	mov	local01, result3
13f74     0C 4E 05 F1 | 	add	fp, #12
13f78     A7 FA 61 FC | 	wrlong	result1, fp
13f7c     04 4E 05 F1 | 	add	fp, #4
13f80     A7 FC 61 FC | 	wrlong	result2, fp
13f84     04 4E 05 F1 | 	add	fp, #4
13f88     A7 1E 62 FC | 	wrlong	local01, fp
13f8c     08 4E 85 F1 | 	sub	fp, #8
13f90     A7 12 02 F6 | 	mov	arg01, fp
13f94     0C 4E 85 F1 | 	sub	fp, #12
13f98     34 D1 BF FD | 	call	#_converttoint
13f9c     FD 1E 02 F6 | 	mov	local01, result1
13fa0     A7 12 02 F6 | 	mov	arg01, fp
13fa4     28 D1 BF FD | 	call	#_converttoint
13fa8     0F FB 21 FC | 	wypin	result1, local01
13fac     A7 F0 03 F6 | 	mov	ptra, fp
13fb0     B2 00 A0 FD | 	call	#popregs_
13fb4                 | _do_wypin_ret
13fb4     2D 00 64 FD | 	ret
13fb8                 | 
13fb8                 | ' 
13fb8                 | ' sub do_position
13fb8                 | _do_position
13fb8     01 4A 05 F6 | 	mov	COUNT_, #1
13fbc     A8 00 A0 FD | 	call	#pushregs_
13fc0     18 F0 07 F1 | 	add	ptra, #24
13fc4     70 59 BF FD | 	call	#_pop
13fc8     FD 14 02 F6 | 	mov	arg02, result1
13fcc     FE 12 02 F6 | 	mov	arg01, result2
13fd0     FF 1E 02 F6 | 	mov	local01, result3
13fd4     A7 14 62 FC | 	wrlong	arg02, fp
13fd8     04 4E 05 F1 | 	add	fp, #4
13fdc     A7 12 62 FC | 	wrlong	arg01, fp
13fe0     04 4E 05 F1 | 	add	fp, #4
13fe4     A7 1E 62 FC | 	wrlong	local01, fp
13fe8     08 4E 85 F1 | 	sub	fp, #8
13fec     48 59 BF FD | 	call	#_pop
13ff0     FF 1E 02 F6 | 	mov	local01, result3
13ff4     0C 4E 05 F1 | 	add	fp, #12
13ff8     A7 FA 61 FC | 	wrlong	result1, fp
13ffc     04 4E 05 F1 | 	add	fp, #4
14000     A7 FC 61 FC | 	wrlong	result2, fp
14004     04 4E 05 F1 | 	add	fp, #4
14008     A7 1E 62 FC | 	wrlong	local01, fp
1400c     08 4E 85 F1 | 	sub	fp, #8
14010     A7 12 02 F6 | 	mov	arg01, fp
14014     0C 4E 85 F1 | 	sub	fp, #12
14018     B4 D0 BF FD | 	call	#_converttoint
1401c     FD 1E 02 F6 | 	mov	local01, result1
14020     A7 12 02 F6 | 	mov	arg01, fp
14024     A8 D0 BF FD | 	call	#_converttoint
14028     FD 14 02 F6 | 	mov	arg02, result1
1402c     0F 13 02 F6 | 	mov	arg01, local01
14030     7C 3D B0 FD | 	call	#_hg010b_spin2_setcursorpos
14034     A7 F0 03 F6 | 	mov	ptra, fp
14038     B2 00 A0 FD | 	call	#popregs_
1403c                 | _do_position_ret
1403c     2D 00 64 FD | 	ret
14040                 | 
14040                 | ' 
14040                 | ' sub do_waitms
14040                 | _do_waitms
14040     01 4A 05 F6 | 	mov	COUNT_, #1
14044     A8 00 A0 FD | 	call	#pushregs_
14048     18 F0 07 F1 | 	add	ptra, #24
1404c     E8 58 BF FD | 	call	#_pop
14050     A7 FA 61 FC | 	wrlong	result1, fp
14054     04 4E 05 F1 | 	add	fp, #4
14058     A7 FC 61 FC | 	wrlong	result2, fp
1405c     04 4E 05 F1 | 	add	fp, #4
14060     A7 FE 61 FC | 	wrlong	result3, fp
14064                 | ' 
14064                 | ' t1=pop() 'value
14064                 | ' 
14064                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
14064     08 4E 85 F1 | 	sub	fp, #8
14068     1C FE 0D F2 | 	cmp	result3, #28 wz
1406c     08 4E 05 51 |  if_ne	add	fp, #8
14070     A7 12 02 5B |  if_ne	rdlong	arg01, fp
14074     08 4E 85 51 |  if_ne	sub	fp, #8
14078     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
1407c     A7 12 02 AB |  if_e	rdlong	arg01, fp
14080     0C 4E 05 A1 |  if_e	add	fp, #12
14084     A7 12 62 AC |  if_e	wrlong	arg01, fp
14088     0C 4E 85 A1 |  if_e	sub	fp, #12
1408c     14 00 90 AD |  if_e	jmp	#LR__1570
14090     A7 12 02 F6 | 	mov	arg01, fp
14094     38 D0 BF FD | 	call	#_converttoint
14098     0C 4E 05 F1 | 	add	fp, #12
1409c     A7 FA 61 FC | 	wrlong	result1, fp
140a0     0C 4E 85 F1 | 	sub	fp, #12
140a4                 | LR__1570
140a4                 | ' if t<0 then return
140a4     0C 4E 05 F1 | 	add	fp, #12
140a8     A7 12 02 FB | 	rdlong	arg01, fp
140ac     0C 4E 85 F1 | 	sub	fp, #12
140b0     00 12 56 F2 | 	cmps	arg01, #0 wc
140b4     B8 00 90 CD |  if_b	jmp	#LR__1575
140b8                 | ' if t < 5000 then 
140b8     0C 4E 05 F1 | 	add	fp, #12
140bc     A7 12 02 FB | 	rdlong	arg01, fp
140c0     0C 4E 85 F1 | 	sub	fp, #12
140c4     09 00 00 FF 
140c8     88 13 56 F2 | 	cmps	arg01, ##5000 wc
140cc     14 00 90 3D |  if_ae	jmp	#LR__1571
140d0     0C 4E 05 F1 | 	add	fp, #12
140d4     A7 12 02 FB | 	rdlong	arg01, fp
140d8     0C 4E 85 F1 | 	sub	fp, #12
140dc     B0 53 B0 FD | 	call	#__system___waitms
140e0     8C 00 90 FD | 	jmp	#LR__1574
140e4                 | LR__1571
140e4     10 4E 05 F1 | 	add	fp, #16
140e8     A7 02 68 FC | 	wrlong	#1, fp
140ec     04 4E 85 F1 | 	sub	fp, #4
140f0     A7 12 02 FB | 	rdlong	arg01, fp
140f4     09 13 52 F6 | 	abs	arg01, arg01 wc
140f8     09 00 00 FF 
140fc     88 13 16 FD | 	qdiv	arg01, ##5000
14100                 | '   for i=1 to t/5000
14100     0C 4E 85 F1 | 	sub	fp, #12
14104     18 1E 62 FD | 	getqx	local01
14108     0F 1F 82 F6 | 	negc	local01, local01
1410c     01 1E 06 F1 | 	add	local01, #1
14110                 | LR__1572
14110     10 4E 05 F1 | 	add	fp, #16
14114     A7 12 02 FB | 	rdlong	arg01, fp
14118     10 4E 85 F1 | 	sub	fp, #16
1411c     0F 13 52 F2 | 	cmps	arg01, local01 wc
14120     28 00 90 3D |  if_ae	jmp	#LR__1573
14124     0C 4E 05 F1 | 	add	fp, #12
14128     A7 12 02 FB | 	rdlong	arg01, fp
1412c     0C 4E 85 F1 | 	sub	fp, #12
14130     5C 53 B0 FD | 	call	#__system___waitms
14134     10 4E 05 F1 | 	add	fp, #16
14138     A7 12 02 FB | 	rdlong	arg01, fp
1413c     01 12 06 F1 | 	add	arg01, #1
14140     A7 12 62 FC | 	wrlong	arg01, fp
14144     10 4E 85 F1 | 	sub	fp, #16
14148     C4 FF 9F FD | 	jmp	#LR__1572
1414c                 | LR__1573
1414c     0C 4E 05 F1 | 	add	fp, #12
14150     A7 1E 02 FB | 	rdlong	local01, fp
14154     0F 1F 52 F6 | 	abs	local01, local01 wc
14158     09 00 00 FF 
1415c     88 1F 16 FD | 	qdiv	local01, ##5000
14160     0C 4E 85 F1 | 	sub	fp, #12
14164     19 1E 62 FD | 	getqy	local01
14168     0F 13 82 F6 | 	negc	arg01, local01
1416c     20 53 B0 FD | 	call	#__system___waitms
14170                 | LR__1574
14170                 | LR__1575
14170     A7 F0 03 F6 | 	mov	ptra, fp
14174     B2 00 A0 FD | 	call	#popregs_
14178                 | _do_waitms_ret
14178     2D 00 64 FD | 	ret
1417c                 | 
1417c                 | ' 
1417c                 | ' sub do_waitvbl
1417c                 | _do_waitvbl
1417c     01 12 06 F6 | 	mov	arg01, #1
14180     64 3C B0 FD | 	call	#_hg010b_spin2_waitvbl
14184                 | _do_waitvbl_ret
14184     2D 00 64 FD | 	ret
14188                 | 
14188                 | ' 
14188                 | ' sub do_waitclock
14188                 | _do_waitclock
14188     7A 00 00 FF 
1418c     38 E5 05 F1 | 	add	objptr, ##62776
14190     F2 00 02 FB | 	rdlong	_var01, objptr
14194                 | ' c=hkcnt
14194                 | ' do: loop until hkcnt<>c
14194                 | LR__1580
14194     F2 02 02 FB | 	rdlong	_var02, objptr
14198     00 03 0A F2 | 	cmp	_var02, _var01 wz
1419c     F4 FF 9F AD |  if_e	jmp	#LR__1580
141a0     7A 00 00 FF 
141a4     38 E5 85 F1 | 	sub	objptr, ##62776
141a8                 | _do_waitclock_ret
141a8     2D 00 64 FD | 	ret
141ac                 | 
141ac                 | ' 
141ac                 | ' sub do_dir
141ac                 | _do_dir
141ac     03 4A 05 F6 | 	mov	COUNT_, #3
141b0     A8 00 A0 FD | 	call	#pushregs_
141b4     46 01 00 FF 
141b8     93 12 06 F6 | 	mov	arg01, ##@LR__4630
141bc     68 56 B0 FD | 	call	#__system___chdir
141c0                 | ' chdir("/sd/bas")       ' set working directory
141c0                 | ' print "Working directory: "; currentdir$ 
141c0     00 12 06 F6 | 	mov	arg01, #0
141c4     D8 A8 B0 FD | 	call	#__system___getiolock_0425
141c8     FD 12 02 F6 | 	mov	arg01, result1
141cc     CC 4F B0 FD | 	call	#__system___lockmem
141d0     46 01 00 FF 
141d4     9B 14 06 F6 | 	mov	arg02, ##@LR__4631
141d8     00 12 06 F6 | 	mov	arg01, #0
141dc     00 16 06 F6 | 	mov	arg03, #0
141e0     AC 5C B0 FD | 	call	#__system___basic_print_string
141e4     71 00 00 FF 
141e8     58 E5 05 F1 | 	add	objptr, ##58200
141ec     F2 14 02 FB | 	rdlong	arg02, objptr
141f0     71 00 00 FF 
141f4     58 E5 85 F1 | 	sub	objptr, ##58200
141f8     00 12 06 F6 | 	mov	arg01, #0
141fc     00 16 06 F6 | 	mov	arg03, #0
14200     8C 5C B0 FD | 	call	#__system___basic_print_string
14204     00 12 06 F6 | 	mov	arg01, #0
14208     0A 14 06 F6 | 	mov	arg02, #10
1420c     00 16 06 F6 | 	mov	arg03, #0
14210     24 5C B0 FD | 	call	#__system___basic_print_char
14214     00 12 06 F6 | 	mov	arg01, #0
14218     84 A8 B0 FD | 	call	#__system___getiolock_0425
1421c     FD 00 68 FC | 	wrlong	#0, result1
14220     46 01 00 FF 
14224     AF 12 06 F6 | 	mov	arg01, ##@LR__4632
14228     10 14 06 F6 | 	mov	arg02, #16
1422c     A8 A9 B0 FD | 	call	#__system___basic_dir
14230     FD 1E 02 F6 | 	mov	local01, result1
14234                 | ' 
14234                 | ' filename=dir$("*", fbDirectory)
14234                 | ' while filename <> "" and filename <> nil
14234                 | LR__1590
14234     00 20 06 F6 | 	mov	local02, #0
14238     46 01 00 FF 
1423c     B1 14 06 F6 | 	mov	arg02, ##@LR__4633
14240     0F 13 02 F6 | 	mov	arg01, local01
14244     7C 4F B0 FD | 	call	#__system___string_cmp
14248     00 FA 0D F2 | 	cmp	result1, #0 wz
1424c     00 20 26 56 |  if_ne	not	local02, #0
14250     00 22 06 F6 | 	mov	local03, #0
14254     0F 13 02 F6 | 	mov	arg01, local01
14258     00 14 06 F6 | 	mov	arg02, #0
1425c     64 4F B0 FD | 	call	#__system___string_cmp
14260     00 FA 0D F2 | 	cmp	result1, #0 wz
14264     00 22 26 56 |  if_ne	not	local03, #0
14268     11 21 CA F7 | 	test	local02, local03 wz
1426c     64 00 90 AD |  if_e	jmp	#LR__1591
14270                 | '   print "[dir] ";filename
14270     00 12 06 F6 | 	mov	arg01, #0
14274     28 A8 B0 FD | 	call	#__system___getiolock_0425
14278     FD 12 02 F6 | 	mov	arg01, result1
1427c     1C 4F B0 FD | 	call	#__system___lockmem
14280     46 01 00 FF 
14284     B2 14 06 F6 | 	mov	arg02, ##@LR__4634
14288     00 12 06 F6 | 	mov	arg01, #0
1428c     00 16 06 F6 | 	mov	arg03, #0
14290     FC 5B B0 FD | 	call	#__system___basic_print_string
14294     00 12 06 F6 | 	mov	arg01, #0
14298     0F 15 02 F6 | 	mov	arg02, local01
1429c     00 16 06 F6 | 	mov	arg03, #0
142a0     EC 5B B0 FD | 	call	#__system___basic_print_string
142a4     00 12 06 F6 | 	mov	arg01, #0
142a8     0A 14 06 F6 | 	mov	arg02, #10
142ac     00 16 06 F6 | 	mov	arg03, #0
142b0     84 5B B0 FD | 	call	#__system___basic_print_char
142b4     00 12 06 F6 | 	mov	arg01, #0
142b8     E4 A7 B0 FD | 	call	#__system___getiolock_0425
142bc     FD 00 68 FC | 	wrlong	#0, result1
142c0     00 12 06 F6 | 	mov	arg01, #0
142c4     00 14 06 F6 | 	mov	arg02, #0
142c8     0C A9 B0 FD | 	call	#__system___basic_dir
142cc     FD 1E 02 F6 | 	mov	local01, result1
142d0     60 FF 9F FD | 	jmp	#LR__1590
142d4                 | LR__1591
142d4     46 01 00 FF 
142d8     B9 12 06 F6 | 	mov	arg01, ##@LR__4635
142dc     21 14 06 F6 | 	mov	arg02, #33
142e0     F4 A8 B0 FD | 	call	#__system___basic_dir
142e4     FD 1E 02 F6 | 	mov	local01, result1
142e8                 | ' 
142e8                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
142e8                 | ' do while filename <> "" and filename <> nil
142e8                 | LR__1592
142e8     00 20 06 F6 | 	mov	local02, #0
142ec     46 01 00 FF 
142f0     BB 14 06 F6 | 	mov	arg02, ##@LR__4636
142f4     0F 13 02 F6 | 	mov	arg01, local01
142f8     C8 4E B0 FD | 	call	#__system___string_cmp
142fc     00 FA 0D F2 | 	cmp	result1, #0 wz
14300     00 20 26 56 |  if_ne	not	local02, #0
14304     00 22 06 F6 | 	mov	local03, #0
14308     0F 13 02 F6 | 	mov	arg01, local01
1430c     00 14 06 F6 | 	mov	arg02, #0
14310     B0 4E B0 FD | 	call	#__system___string_cmp
14314     00 FA 0D F2 | 	cmp	result1, #0 wz
14318     00 22 26 56 |  if_ne	not	local03, #0
1431c     11 21 CA F7 | 	test	local02, local03 wz
14320     4C 01 90 AD |  if_e	jmp	#LR__1596
14324                 | '   print filename
14324     00 12 06 F6 | 	mov	arg01, #0
14328     74 A7 B0 FD | 	call	#__system___getiolock_0425
1432c     FD 12 02 F6 | 	mov	arg01, result1
14330     68 4E B0 FD | 	call	#__system___lockmem
14334     00 12 06 F6 | 	mov	arg01, #0
14338     0F 15 02 F6 | 	mov	arg02, local01
1433c     00 16 06 F6 | 	mov	arg03, #0
14340     4C 5B B0 FD | 	call	#__system___basic_print_string
14344     00 12 06 F6 | 	mov	arg01, #0
14348     0A 14 06 F6 | 	mov	arg02, #10
1434c     00 16 06 F6 | 	mov	arg03, #0
14350     E4 5A B0 FD | 	call	#__system___basic_print_char
14354     00 12 06 F6 | 	mov	arg01, #0
14358     44 A7 B0 FD | 	call	#__system___getiolock_0425
1435c     FD 00 68 FC | 	wrlong	#0, result1
14360     00 12 06 F6 | 	mov	arg01, #0
14364     00 14 06 F6 | 	mov	arg02, #0
14368     6C A8 B0 FD | 	call	#__system___basic_dir
1436c     FD 1E 02 F6 | 	mov	local01, result1
14370                 | '   filename = dir$()      ' continue scan
14370                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
14370                 | ' return cursor_y
14370     3A E4 05 F1 | 	add	objptr, #58
14374     F2 FA C1 FA | 	rdbyte	result1, objptr
14378     3A E4 85 F1 | 	sub	objptr, #58
1437c     22 FA 0D F2 | 	cmp	result1, #34 wz
14380     64 FF 9F 5D |  if_ne	jmp	#LR__1592
14384                 | '     print "-----more, press any key";
14384     00 12 06 F6 | 	mov	arg01, #0
14388     14 A7 B0 FD | 	call	#__system___getiolock_0425
1438c     FD 12 02 F6 | 	mov	arg01, result1
14390     08 4E B0 FD | 	call	#__system___lockmem
14394     46 01 00 FF 
14398     BC 14 06 F6 | 	mov	arg02, ##@LR__4637
1439c     00 12 06 F6 | 	mov	arg01, #0
143a0     00 16 06 F6 | 	mov	arg03, #0
143a4     E8 5A B0 FD | 	call	#__system___basic_print_string
143a8     00 12 06 F6 | 	mov	arg01, #0
143ac     F0 A6 B0 FD | 	call	#__system___getiolock_0425
143b0     FD 00 68 FC | 	wrlong	#0, result1
143b4                 | '     do 
143b4                 | LR__1593
143b4     24 46 B0 FD | 	call	#_usbnew_spin2_get_key
143b8     00 FA 0D F2 | 	cmp	result1, #0 wz
143bc     F4 FF 9F 5D |  if_ne	jmp	#LR__1593
143c0                 | '     do
143c0                 | LR__1594
143c0     18 46 B0 FD | 	call	#_usbnew_spin2_get_key
143c4     00 FA 0D F2 | 	cmp	result1, #0 wz
143c8     F4 FF 9F AD |  if_e	jmp	#LR__1594
143cc                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
143cc     79 00 00 FF 
143d0     A4 E4 05 F1 | 	add	objptr, ##62116
143d4     F2 20 02 FB | 	rdlong	local02, objptr
143d8     79 00 00 FF 
143dc     A4 E4 85 F1 | 	sub	objptr, ##62116
143e0     01 20 0E F2 | 	cmp	local02, #1 wz
143e4     3C 00 90 5D |  if_ne	jmp	#LR__1595
143e8     7A 00 00 FF 
143ec     48 E5 05 F1 | 	add	objptr, ##62792
143f0     F2 14 02 FB | 	rdlong	arg02, objptr
143f4     04 E4 85 F1 | 	sub	objptr, #4
143f8     F2 1A 02 FB | 	rdlong	arg05, objptr
143fc     07 12 06 F6 | 	mov	arg01, #7
14400     56 00 00 FF 
14404     44 16 06 F6 | 	mov	arg03, ##44100
14408     0E 18 C6 F9 | 	decod	arg04, #14
1440c     01 1C 66 F6 | 	neg	arg06, #1
14410     6F 00 00 FF 
14414     84 E4 85 F1 | 	sub	objptr, ##56964
14418     48 49 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
1441c     0B 00 00 FF 
14420     C0 E4 85 F1 | 	sub	objptr, ##5824
14424                 | LR__1595
14424     00 12 06 F6 | 	mov	arg01, #0
14428     23 14 06 F6 | 	mov	arg02, #35
1442c     80 39 B0 FD | 	call	#_hg010b_spin2_setcursorpos
14430                 | '     position 0,35: print "                             ";: position 4,35  
14430     00 12 06 F6 | 	mov	arg01, #0
14434     68 A6 B0 FD | 	call	#__system___getiolock_0425
14438     FD 12 02 F6 | 	mov	arg01, result1
1443c     5C 4D B0 FD | 	call	#__system___lockmem
14440     46 01 00 FF 
14444     D5 14 06 F6 | 	mov	arg02, ##@LR__4638
14448     00 12 06 F6 | 	mov	arg01, #0
1444c     00 16 06 F6 | 	mov	arg03, #0
14450     3C 5A B0 FD | 	call	#__system___basic_print_string
14454     00 12 06 F6 | 	mov	arg01, #0
14458     44 A6 B0 FD | 	call	#__system___getiolock_0425
1445c     FD 00 68 FC | 	wrlong	#0, result1
14460     04 12 06 F6 | 	mov	arg01, #4
14464     23 14 06 F6 | 	mov	arg02, #35
14468     44 39 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1446c     78 FE 9F FD | 	jmp	#LR__1592
14470                 | LR__1596
14470     A7 F0 03 F6 | 	mov	ptra, fp
14474     B2 00 A0 FD | 	call	#popregs_
14478                 | _do_dir_ret
14478     2D 00 64 FD | 	ret
1447c                 | 
1447c                 | ' 
1447c                 | ' sub do_if
1447c                 | _do_if
1447c     05 4A 05 F6 | 	mov	COUNT_, #5
14480     A8 00 A0 FD | 	call	#pushregs_
14484     B0 54 BF FD | 	call	#_pop
14488     FD 1E 0A F6 | 	mov	local01, result1 wz
1448c     FE 20 02 F6 | 	mov	local02, result2
14490     FF 22 02 F6 | 	mov	local03, result3
14494                 | ' t1=pop()
14494                 | ' ' if uresult=0, jump over else
14494                 | ' if t1.result.uresult = 0 then 
14494     BC 00 90 5D |  if_ne	jmp	#LR__1602
14498                 | '   for i=lineptr_e to lineptr-1
14498     69 00 00 FF 
1449c     44 E5 05 F1 | 	add	objptr, ##54084
144a0     F2 24 02 FB | 	rdlong	local04, objptr
144a4     04 E4 85 F1 | 	sub	objptr, #4
144a8     F2 26 02 FB | 	rdlong	local05, objptr
144ac     69 00 00 FF 
144b0     40 E5 85 F1 | 	sub	objptr, ##54080
144b4                 | LR__1600
144b4     13 25 52 F2 | 	cmps	local04, local05 wc
144b8     78 00 90 3D |  if_ae	jmp	#LR__1601
144bc     12 FF 01 F6 | 	mov	result3, local04
144c0     01 FE 65 F0 | 	shl	result3, #1
144c4     12 FF 01 F1 | 	add	result3, local04
144c8     02 FE 65 F0 | 	shl	result3, #2
144cc     66 00 00 FF 
144d0     40 E5 05 F1 | 	add	objptr, ##52544
144d4     F2 FE 01 F1 | 	add	result3, objptr
144d8     FF 1E 02 FB | 	rdlong	local01, result3
144dc     04 FE 05 F1 | 	add	result3, #4
144e0     FF FC 01 FB | 	rdlong	result2, result3
144e4     12 FF 01 F6 | 	mov	result3, local04
144e8     01 FE 65 F0 | 	shl	result3, #1
144ec     12 FF 01 F1 | 	add	result3, local04
144f0     02 FE 65 F0 | 	shl	result3, #2
144f4     F2 FE 01 F1 | 	add	result3, objptr
144f8     08 FE 05 F1 | 	add	result3, #8
144fc     FF FE 01 FB | 	rdlong	result3, result3
14500     FE 20 02 F6 | 	mov	local02, result2
14504     FF 22 02 F6 | 	mov	local03, result3
14508                 | '     t1=compiledline(i)
14508                 | '     if t1.result_type=token_else then lineptr_e=i : return
14508     5A 22 0E F2 | 	cmp	local03, #90 wz
1450c     66 00 00 FF 
14510     40 E5 85 F1 | 	sub	objptr, ##52544
14514     69 00 00 AF 
14518     44 E5 05 A1 |  if_e	add	objptr, ##54084
1451c     F2 24 62 AC |  if_e	wrlong	local04, objptr
14520     69 00 00 AF 
14524     44 E5 85 A1 |  if_e	sub	objptr, ##54084
14528     28 00 90 AD |  if_e	jmp	#LR__1603
1452c     01 24 06 F1 | 	add	local04, #1
14530     80 FF 9F FD | 	jmp	#LR__1600
14534                 | LR__1601
14534     69 00 00 FF 
14538     40 E5 05 F1 | 	add	objptr, ##54080
1453c     F2 26 02 FB | 	rdlong	local05, objptr
14540     01 26 86 F1 | 	sub	local05, #1
14544     04 E4 05 F1 | 	add	objptr, #4
14548     F2 26 62 FC | 	wrlong	local05, objptr
1454c     69 00 00 FF 
14550     44 E5 85 F1 | 	sub	objptr, ##54084
14554                 | LR__1602
14554                 | LR__1603
14554     A7 F0 03 F6 | 	mov	ptra, fp
14558     B2 00 A0 FD | 	call	#popregs_
1455c                 | _do_if_ret
1455c     2D 00 64 FD | 	ret
14560                 | 
14560                 | ' 
14560                 | ' sub do_else
14560                 | _do_else
14560     69 00 00 FF 
14564     40 E5 05 F1 | 	add	objptr, ##54080
14568     F2 00 02 FB | 	rdlong	_var01, objptr
1456c     01 00 86 F1 | 	sub	_var01, #1
14570     04 E4 05 F1 | 	add	objptr, #4
14574     F2 00 62 FC | 	wrlong	_var01, objptr
14578     69 00 00 FF 
1457c     44 E5 85 F1 | 	sub	objptr, ##54084
14580                 | _do_else_ret
14580     2D 00 64 FD | 	ret
14584                 | 
14584                 | ' 
14584                 | ' sub do_rad
14584                 | _do_rad
14584     7A 00 00 FF 
14588     4C E5 05 F1 | 	add	objptr, ##62796
1458c     00 C0 9F FF 
14590     F2 00 68 FC | 	wrlong	##1065353216, objptr
14594     04 E4 05 F1 | 	add	objptr, #4
14598     00 C0 9F FF 
1459c     F2 00 68 FC | 	wrlong	##1065353216, objptr
145a0     7A 00 00 FF 
145a4     50 E5 85 F1 | 	sub	objptr, ##62800
145a8                 | _do_rad_ret
145a8     2D 00 64 FD | 	ret
145ac                 | 
145ac                 | ' 
145ac                 | ' sub do_deg
145ac                 | _do_deg
145ac     7A 00 00 FF 
145b0     4C E5 05 F1 | 	add	objptr, ##62796
145b4     7D 47 9E FF 
145b8     F2 6A 68 FC | 	wrlong	##1016003125, objptr
145bc     04 E4 05 F1 | 	add	objptr, #4
145c0     97 32 A1 FF 
145c4     F2 C2 69 FC | 	wrlong	##1113927393, objptr
145c8     7A 00 00 FF 
145cc     50 E5 85 F1 | 	sub	objptr, ##62800
145d0                 | _do_deg_ret
145d0     2D 00 64 FD | 	ret
145d4                 | 
145d4                 | ' 
145d4                 | ' sub do_int
145d4                 | _do_int
145d4     00 4A 05 F6 | 	mov	COUNT_, #0
145d8     A8 00 A0 FD | 	call	#pushregs_
145dc     0C F0 07 F1 | 	add	ptra, #12
145e0     54 53 BF FD | 	call	#_pop
145e4     A7 FA 61 FC | 	wrlong	result1, fp
145e8     04 4E 05 F1 | 	add	fp, #4
145ec     A7 FC 61 FC | 	wrlong	result2, fp
145f0     04 4E 05 F1 | 	add	fp, #4
145f4     A7 FE 61 FC | 	wrlong	result3, fp
145f8     08 4E 85 F1 | 	sub	fp, #8
145fc     A7 12 02 F6 | 	mov	arg01, fp
14600     CC CA BF FD | 	call	#_converttoint
14604     A7 FA 61 FC | 	wrlong	result1, fp
14608     08 4E 05 F1 | 	add	fp, #8
1460c     A7 38 68 FC | 	wrlong	#28, fp
14610     08 4E 85 F1 | 	sub	fp, #8
14614     A7 12 02 F6 | 	mov	arg01, fp
14618     B4 53 BF FD | 	call	#_push
1461c     A7 F0 03 F6 | 	mov	ptra, fp
14620     B2 00 A0 FD | 	call	#popregs_
14624                 | _do_int_ret
14624     2D 00 64 FD | 	ret
14628                 | 
14628                 | ' 
14628                 | ' sub do_nothing
14628                 | _do_nothing
14628                 | _do_nothing_ret
14628     2D 00 64 FD | 	ret
1462c                 | 
1462c                 | ' 
1462c                 | ' sub do_brun
1462c                 | _do_brun
1462c     08 4A 05 F6 | 	mov	COUNT_, #8
14630     A8 00 A0 FD | 	call	#pushregs_
14634     00 53 BF FD | 	call	#_pop
14638     FE 1A 02 F6 | 	mov	arg05, result2
1463c     FF 18 02 F6 | 	mov	arg04, result3
14640     FD 1E 02 F6 | 	mov	local01, result1
14644     0D 21 02 F6 | 	mov	local02, arg05
14648     0C 23 02 F6 | 	mov	local03, arg04
1464c                 | ' 
1464c                 | ' t1=pop() 
1464c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1464c     2B 22 0E F2 | 	cmp	local03, #43 wz
14650     10 00 90 5D |  if_ne	jmp	#LR__1610
14654     0F 13 02 F6 | 	mov	arg01, local01
14658     40 86 BF FD | 	call	#_convertstring
1465c     FD 1E 02 F6 | 	mov	local01, result1
14660     1F 22 06 F6 | 	mov	local03, #31
14664                 | LR__1610
14664                 | ' if t1.result_type=result_string then
14664     1F 22 0E F2 | 	cmp	local03, #31 wz
14668     EC 01 90 5D |  if_ne	jmp	#LR__1614
1466c     0F 25 02 F6 | 	mov	local04, local01
14670                 | '   filename=t1.result.sresult
14670                 | '   if left$(filename,1)="/" then 
14670     12 13 02 F6 | 	mov	arg01, local04
14674     01 14 06 F6 | 	mov	arg02, #1
14678     30 6B B0 FD | 	call	#__system__Left_S
1467c     FD 12 02 F6 | 	mov	arg01, result1
14680     46 01 00 FF 
14684     F3 14 06 F6 | 	mov	arg02, ##@LR__4639
14688     38 4B B0 FD | 	call	#__system___string_cmp
1468c     00 FA 0D F2 | 	cmp	result1, #0 wz
14690     12 27 02 A6 |  if_e	mov	local05, local04
14694     14 00 90 AD |  if_e	jmp	#LR__1611
14698     46 01 00 FF 
1469c     F5 12 06 F6 | 	mov	arg01, ##@LR__4640
146a0     12 15 02 F6 | 	mov	arg02, local04
146a4     50 4B B0 FD | 	call	#__system___string_concat
146a8     FD 26 02 F6 | 	mov	local05, result1
146ac                 | LR__1611
146ac                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
146ac                 | '   open fullfilename for input as #9
146ac     09 12 06 F6 | 	mov	arg01, #9
146b0     13 15 02 F6 | 	mov	arg02, local05
146b4     00 16 06 F6 | 	mov	arg03, #0
146b8     E4 56 B0 FD | 	call	#__system___basic_open_string
146bc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
146c0     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
146c4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
146c8     FD 28 0A F6 | 	mov	local06, result1 wz
146cc                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
146cc     8C 00 90 AD |  if_e	jmp	#LR__1612
146d0     00 12 06 F6 | 	mov	arg01, #0
146d4     C8 A3 B0 FD | 	call	#__system___getiolock_0425
146d8     FD 12 02 F6 | 	mov	arg01, result1
146dc     BC 4A B0 FD | 	call	#__system___lockmem
146e0     46 01 00 FF 
146e4     FE 14 06 F6 | 	mov	arg02, ##@LR__4641
146e8     00 12 06 F6 | 	mov	arg01, #0
146ec     00 16 06 F6 | 	mov	arg03, #0
146f0     9C 57 B0 FD | 	call	#__system___basic_print_string
146f4     00 12 06 F6 | 	mov	arg01, #0
146f8     14 15 02 F6 | 	mov	arg02, local06
146fc     00 16 06 F6 | 	mov	arg03, #0
14700     0A 18 06 F6 | 	mov	arg04, #10
14704     CC 57 B0 FD | 	call	#__system___basic_print_integer
14708     46 01 00 FF 
1470c     0C 15 06 F6 | 	mov	arg02, ##@LR__4642
14710     00 12 06 F6 | 	mov	arg01, #0
14714     00 16 06 F6 | 	mov	arg03, #0
14718     74 57 B0 FD | 	call	#__system___basic_print_string
1471c     14 13 02 F6 | 	mov	arg01, local06
14720     78 70 B0 FD | 	call	#__system___strerror
14724     FD 14 02 F6 | 	mov	arg02, result1
14728     00 12 06 F6 | 	mov	arg01, #0
1472c     00 16 06 F6 | 	mov	arg03, #0
14730     5C 57 B0 FD | 	call	#__system___basic_print_string
14734     00 12 06 F6 | 	mov	arg01, #0
14738     0A 14 06 F6 | 	mov	arg02, #10
1473c     00 16 06 F6 | 	mov	arg03, #0
14740     F4 56 B0 FD | 	call	#__system___basic_print_char
14744     00 12 06 F6 | 	mov	arg01, #0
14748     54 A3 B0 FD | 	call	#__system___getiolock_0425
1474c     FD 00 68 FC | 	wrlong	#0, result1
14750     09 12 06 F6 | 	mov	arg01, #9
14754     78 99 B0 FD | 	call	#__system__close
14758     FC 00 90 FD | 	jmp	#LR__1615
1475c                 | LR__1612
1475c     01 2A 06 F6 | 	mov	local07, #1
14760     00 2C 06 F6 | 	mov	local08, #0
14764                 | '   do
14764                 | LR__1613
14764                 | '     get #9,pos,block(0),1024,r : pos+=r	
14764     77 00 00 FF 
14768     70 E4 05 F1 | 	add	objptr, ##61040
1476c     F2 16 02 F6 | 	mov	arg03, objptr
14770     77 00 00 FF 
14774     70 E4 85 F1 | 	sub	objptr, ##61040
14778     09 12 06 F6 | 	mov	arg01, #9
1477c     15 15 02 F6 | 	mov	arg02, local07
14780     0A 18 C6 F9 | 	decod	arg04, #10
14784     01 1A 06 F6 | 	mov	arg05, #1
14788     14 58 B0 FD | 	call	#__system___basic_get
1478c     FD 28 02 F6 | 	mov	local06, result1
14790     FD 2A 02 F1 | 	add	local07, result1
14794     77 00 00 FF 
14798     70 E4 05 F1 | 	add	objptr, ##61040
1479c     F2 12 02 F6 | 	mov	arg01, objptr
147a0     16 15 02 F6 | 	mov	arg02, local08
147a4     0A 16 C6 F9 | 	decod	arg03, #10
147a8     6B 00 00 FF 
147ac     B0 E5 85 F1 | 	sub	objptr, ##55216
147b0     34 3F B0 FD | 	call	#_psram_spin2_write
147b4     0B 00 00 FF 
147b8     C0 E4 85 F1 | 	sub	objptr, ##5824
147bc     14 2D 02 F1 | 	add	local08, local06
147c0     02 00 00 FF 
147c4     00 28 0E F2 | 	cmp	local06, ##1024 wz
147c8     E0 03 00 AF 
147cc     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
147d0     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1613
147d4     56 00 00 FF 
147d8     C0 E4 05 F1 | 	add	objptr, ##44224
147dc     F2 12 02 FB | 	rdlong	arg01, objptr
147e0     03 12 62 FD | 	cogstop	arg01
147e4     04 E4 05 F1 | 	add	objptr, #4
147e8     F2 12 02 FB | 	rdlong	arg01, objptr
147ec     03 12 62 FD | 	cogstop	arg01
147f0     04 E4 05 F1 | 	add	objptr, #4
147f4     F2 12 02 FB | 	rdlong	arg01, objptr
147f8     03 12 62 FD | 	cogstop	arg01
147fc     22 00 00 FF 
14800     E0 E5 05 F1 | 	add	objptr, ##17888
14804     F2 12 02 FB | 	rdlong	arg01, objptr
14808     03 12 62 FD | 	cogstop	arg01
1480c     10 00 00 FF 
14810     9C EA 05 F1 | 	add	ptr__dat__, ##8348
14814     F5 14 02 F6 | 	mov	arg02, ptr__dat__
14818     10 00 00 FF 
1481c     9C EA 85 F1 | 	sub	ptr__dat__, ##8348
14820     22 00 00 FF 
14824     D8 E5 85 F1 | 	sub	objptr, ##17880
14828     1E 2C 06 F6 | 	mov	local08, #30
1482c     28 E4 61 FD | 	setq	objptr
14830     0A 2D F2 FC | 	coginit	local08, arg02 wc
14834     01 2C 66 C6 |  if_b	neg	local08, #1
14838     24 00 00 FF 
1483c     FC E4 05 F1 | 	add	objptr, ##18684
14840     F2 2C 62 FC | 	wrlong	local08, objptr
14844     7A 00 00 FF 
14848     CC E5 85 F1 | 	sub	objptr, ##62924
1484c     00 12 06 F6 | 	mov	arg01, #0
14850     01 12 62 FD | 	cogid	arg01
14854     03 12 62 FD | 	cogstop	arg01
14858                 | LR__1614
14858                 | LR__1615
14858     A7 F0 03 F6 | 	mov	ptra, fp
1485c     B2 00 A0 FD | 	call	#popregs_
14860                 | _do_brun_ret
14860     2D 00 64 FD | 	ret
14864                 | 
14864                 | ' 
14864                 | ' 
14864                 | ' sub do_mouse
14864                 | _do_mouse
14864     D0 50 BF FD | 	call	#_pop
14868     00 FA 4D F2 | 	cmps	result1, #0 wz
1486c                 | ' 
1486c                 | ' t1=pop()
1486c                 | ' 
1486c                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1486c     14 00 90 5D |  if_ne	jmp	#LR__1620
14870     10 12 06 F6 | 	mov	arg01, #16
14874     00 14 06 F6 | 	mov	arg02, #0
14878     00 16 06 F6 | 	mov	arg03, #0
1487c     20 29 B0 FD | 	call	#_hg010b_spin2_setspritesize
14880     10 00 90 FD | 	jmp	#LR__1621
14884                 | LR__1620
14884     10 12 06 F6 | 	mov	arg01, #16
14888     20 14 06 F6 | 	mov	arg02, #32
1488c     20 16 06 F6 | 	mov	arg03, #32
14890     0C 29 B0 FD | 	call	#_hg010b_spin2_setspritesize
14894                 | LR__1621
14894                 | _do_mouse_ret
14894     2D 00 64 FD | 	ret
14898                 | 
14898                 | ' 
14898                 | ' sub do_cursor
14898                 | _do_cursor
14898     9C 50 BF FD | 	call	#_pop
1489c     00 FA 4D F2 | 	cmps	result1, #0 wz
148a0                 | ' 
148a0                 | ' t1=pop()
148a0                 | ' 
148a0                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
148a0     14 00 90 5D |  if_ne	jmp	#LR__1630
148a4     11 12 06 F6 | 	mov	arg01, #17
148a8     00 14 06 F6 | 	mov	arg02, #0
148ac     00 16 06 F6 | 	mov	arg03, #0
148b0     EC 28 B0 FD | 	call	#_hg010b_spin2_setspritesize
148b4     10 00 90 FD | 	jmp	#LR__1631
148b8                 | LR__1630
148b8     11 12 06 F6 | 	mov	arg01, #17
148bc     08 14 06 F6 | 	mov	arg02, #8
148c0     10 16 06 F6 | 	mov	arg03, #16
148c4     D8 28 B0 FD | 	call	#_hg010b_spin2_setspritesize
148c8                 | LR__1631
148c8                 | _do_cursor_ret
148c8     2D 00 64 FD | 	ret
148cc                 | 
148cc                 | ' 
148cc                 | ' 
148cc                 | ' sub do_click
148cc                 | _do_click
148cc     68 50 BF FD | 	call	#_pop
148d0     00 FA 4D F2 | 	cmps	result1, #0 wz
148d4                 | ' 
148d4                 | ' t1=pop()
148d4                 | ' 
148d4                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
148d4     79 00 00 AF 
148d8     A4 E4 05 A1 |  if_e	add	objptr, ##62116
148dc     F2 00 68 AC |  if_e	wrlong	#0, objptr
148e0     79 00 00 FF 
148e4     A4 E4 C5 F3 | 	sumz	objptr, ##62116
148e8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
148ec     79 00 00 5F 
148f0     A4 E4 85 51 |  if_ne	sub	objptr, ##62116
148f4                 | _do_click_ret
148f4     2D 00 64 FD | 	ret
148f8                 | 
148f8                 | ' 
148f8                 | ' 
148f8                 | ' sub do_beep
148f8                 | _do_beep
148f8     02 4A 05 F6 | 	mov	COUNT_, #2
148fc     A8 00 A0 FD | 	call	#pushregs_
14900     20 F0 07 F1 | 	add	ptra, #32
14904     30 50 BF FD | 	call	#_pop
14908     FD 1E 02 F6 | 	mov	local01, result1
1490c     FE 1C 02 F6 | 	mov	arg06, result2
14910     FF 20 02 F6 | 	mov	local02, result3
14914     0C 4E 05 F1 | 	add	fp, #12
14918     A7 1E 62 FC | 	wrlong	local01, fp
1491c     04 4E 05 F1 | 	add	fp, #4
14920     A7 1C 62 FC | 	wrlong	arg06, fp
14924     04 4E 05 F1 | 	add	fp, #4
14928     A7 20 62 FC | 	wrlong	local02, fp
1492c     14 4E 85 F1 | 	sub	fp, #20
14930     04 50 BF FD | 	call	#_pop
14934     A7 FA 61 FC | 	wrlong	result1, fp
14938     04 4E 05 F1 | 	add	fp, #4
1493c     A7 FC 61 FC | 	wrlong	result2, fp
14940     04 4E 05 F1 | 	add	fp, #4
14944     A7 FE 61 FC | 	wrlong	result3, fp
14948                 | ' 
14948                 | ' 
14948                 | ' 
14948                 | ' t2=pop()
14948                 | ' t1=pop()
14948                 | ' 
14948                 | ' 
14948                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
14948     08 4E 85 F1 | 	sub	fp, #8
1494c     1C FE 0D F2 | 	cmp	result3, #28 wz
14950     08 4E 05 51 |  if_ne	add	fp, #8
14954     A7 20 02 5B |  if_ne	rdlong	local02, fp
14958     08 4E 85 51 |  if_ne	sub	fp, #8
1495c     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
14960     A7 1E 02 AB |  if_e	rdlong	local01, fp
14964     18 4E 05 A1 |  if_e	add	fp, #24
14968     A7 1E 62 AC |  if_e	wrlong	local01, fp
1496c     18 4E 85 A1 |  if_e	sub	fp, #24
14970     14 00 90 AD |  if_e	jmp	#LR__1640
14974     A7 12 02 F6 | 	mov	arg01, fp
14978     54 C7 BF FD | 	call	#_converttoint
1497c     18 4E 05 F1 | 	add	fp, #24
14980     A7 FA 61 FC | 	wrlong	result1, fp
14984     18 4E 85 F1 | 	sub	fp, #24
14988                 | LR__1640
14988     1C 4E 05 F1 | 	add	fp, #28
1498c     A7 FE 48 FC | 	wrbyte	#127, fp
14990     01 4E 05 F1 | 	add	fp, #1
14994     A7 00 49 FC | 	wrbyte	#128, fp
14998     01 4E 85 F1 | 	sub	fp, #1
1499c     A7 14 02 F6 | 	mov	arg02, fp
149a0     04 4E 85 F1 | 	sub	fp, #4
149a4     A7 16 02 FB | 	rdlong	arg03, fp
149a8     18 4E 85 F1 | 	sub	fp, #24
149ac     01 16 66 F0 | 	shl	arg03, #1
149b0     07 12 06 F6 | 	mov	arg01, #7
149b4     0E 18 C6 F9 | 	decod	arg04, #14
149b8     02 1A 06 F6 | 	mov	arg05, #2
149bc     00 1C 06 F6 | 	mov	arg06, #0
149c0     0B 00 00 FF 
149c4     C0 E4 05 F1 | 	add	objptr, ##5824
149c8     34 44 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
149cc     0B 00 00 FF 
149d0     C0 E4 85 F1 | 	sub	objptr, ##5824
149d4     0C 4E 05 F1 | 	add	fp, #12
149d8     A7 12 02 F6 | 	mov	arg01, fp
149dc     0C 4E 85 F1 | 	sub	fp, #12
149e0     EC 4F BF FD | 	call	#_push
149e4     58 F6 BF FD | 	call	#_do_waitms
149e8     07 12 06 F6 | 	mov	arg01, #7
149ec     0B 00 00 FF 
149f0     C0 E4 05 F1 | 	add	objptr, ##5824
149f4     BC 44 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
149f8     0B 00 00 FF 
149fc     C0 E4 85 F1 | 	sub	objptr, ##5824
14a00     A7 F0 03 F6 | 	mov	ptra, fp
14a04     B2 00 A0 FD | 	call	#popregs_
14a08                 | _do_beep_ret
14a08     2D 00 64 FD | 	ret
14a0c                 | 
14a0c                 | ' 
14a0c                 | ' sub do_no_command
14a0c                 | _do_no_command
14a0c     17 12 06 F6 | 	mov	arg01, #23
14a10     00 12 B0 FD | 	call	#_printerror
14a14                 | _do_no_command_ret
14a14     2D 00 64 FD | 	ret
14a18                 | 
14a18                 | ' 
14a18                 | ' sub do_negative
14a18                 | _do_negative
14a18     02 4A 05 F6 | 	mov	COUNT_, #2
14a1c     A8 00 A0 FD | 	call	#pushregs_
14a20     0C F0 07 F1 | 	add	ptra, #12
14a24     10 4F BF FD | 	call	#_pop
14a28     FF 1E 02 F6 | 	mov	local01, result3
14a2c     A7 FA 61 FC | 	wrlong	result1, fp
14a30     04 4E 05 F1 | 	add	fp, #4
14a34     A7 FC 61 FC | 	wrlong	result2, fp
14a38     04 4E 05 F1 | 	add	fp, #4
14a3c     A7 1E 62 FC | 	wrlong	local01, fp
14a40                 | ' t1=pop()
14a40                 | ' if t1.result_type=result_int then 
14a40     08 4E 85 F1 | 	sub	fp, #8
14a44     1C 1E 0E F2 | 	cmp	local01, #28 wz
14a48     A7 20 02 AB |  if_e	rdlong	local02, fp
14a4c     10 1F 62 A6 |  if_e	neg	local01, local02
14a50     A7 1E 62 AC |  if_e	wrlong	local01, fp
14a54     5C 00 90 AD |  if_e	jmp	#LR__1652
14a58     08 4E 05 F1 | 	add	fp, #8
14a5c     A7 1E 02 FB | 	rdlong	local01, fp
14a60     08 4E 85 F1 | 	sub	fp, #8
14a64     1D 1E 0E F2 | 	cmp	local01, #29 wz
14a68     1C 00 90 5D |  if_ne	jmp	#LR__1650
14a6c     A7 20 02 FB | 	rdlong	local02, fp
14a70     10 1F 62 F6 | 	neg	local01, local02
14a74     A7 1E 62 FC | 	wrlong	local01, fp
14a78     08 4E 05 F1 | 	add	fp, #8
14a7c     A7 38 68 FC | 	wrlong	#28, fp
14a80     08 4E 85 F1 | 	sub	fp, #8
14a84     2C 00 90 FD | 	jmp	#LR__1651
14a88                 | LR__1650
14a88     08 4E 05 F1 | 	add	fp, #8
14a8c     A7 1E 02 FB | 	rdlong	local01, fp
14a90     08 4E 85 F1 | 	sub	fp, #8
14a94     1E 1E 0E F2 | 	cmp	local01, #30 wz
14a98     A7 FA 01 AB |  if_e	rdlong	result1, fp
14a9c     1F FA E5 A4 |  if_e	bitnot	result1, #31
14aa0     A7 FA 61 AC |  if_e	wrlong	result1, fp
14aa4     08 4E 05 51 |  if_ne	add	fp, #8
14aa8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
14aac     08 4E 85 51 |  if_ne	sub	fp, #8
14ab0     A7 50 68 5C |  if_ne	wrlong	#40, fp
14ab4                 | LR__1651
14ab4                 | LR__1652
14ab4     A7 12 02 F6 | 	mov	arg01, fp
14ab8     14 4F BF FD | 	call	#_push
14abc     A7 F0 03 F6 | 	mov	ptra, fp
14ac0     B2 00 A0 FD | 	call	#popregs_
14ac4                 | _do_negative_ret
14ac4     2D 00 64 FD | 	ret
14ac8                 | 
14ac8                 | ' 
14ac8                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
14ac8                 | ' 
14ac8                 | ' ''----------------------------------------------------------------------------------------------------
14ac8                 | ' ''------------------ Initialization procedures -------------------------------------------------------
14ac8                 | ' ''----------------------------------------------------------------------------------------------------
14ac8                 | ' 
14ac8                 | ' ''--------------------------- Command function pointers
14ac8                 | ' 
14ac8                 | ' sub init_commands
14ac8                 | _init_commands
14ac8                 | ' 
14ac8                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
14ac8     00 00 06 F6 | 	mov	_var01, #0
14acc     97 16 48 FB | 	callpa	#(@LR__1661-@LR__1660)>>2,fcache_load_ptr_
14ad0                 | LR__1660
14ad0     00 FB 01 F6 | 	mov	result1, _var01
14ad4     02 FA 65 F0 | 	shl	result1, #2
14ad8     62 00 00 FF 
14adc     24 E5 05 F1 | 	add	objptr, ##50468
14ae0     F2 FA 01 F1 | 	add	result1, objptr
14ae4     62 00 00 FF 
14ae8     24 E5 85 F1 | 	sub	objptr, ##50468
14aec     FD E4 61 FC | 	wrlong	objptr, result1
14af0     01 00 06 F1 | 	add	_var01, #1
14af4     00 01 56 F2 | 	cmps	_var01, #256 wc
14af8     D4 FF 9F CD |  if_b	jmp	#LR__1660
14afc                 | LR__1661
14afc     F2 FA 01 F6 | 	mov	result1, objptr
14b00     14 FA 25 F4 | 	bith	result1, #20
14b04     62 00 00 FF 
14b08     28 E5 05 F1 | 	add	objptr, ##50472
14b0c     F2 FA 61 FC | 	wrlong	result1, objptr
14b10     62 00 00 FF 
14b14     28 E5 85 F1 | 	sub	objptr, ##50472
14b18     F2 FA 01 F6 | 	mov	result1, objptr
14b1c     15 FA 25 F4 | 	bith	result1, #21
14b20     62 00 00 FF 
14b24     2C E5 05 F1 | 	add	objptr, ##50476
14b28     F2 FA 61 FC | 	wrlong	result1, objptr
14b2c     62 00 00 FF 
14b30     2C E5 85 F1 | 	sub	objptr, ##50476
14b34     F2 FA 01 F6 | 	mov	result1, objptr
14b38     34 FA 25 F4 | 	bith	result1, #52
14b3c     62 00 00 FF 
14b40     30 E5 05 F1 | 	add	objptr, ##50480
14b44     F2 FA 61 FC | 	wrlong	result1, objptr
14b48     62 00 00 FF 
14b4c     30 E5 85 F1 | 	sub	objptr, ##50480
14b50     F2 FA 01 F6 | 	mov	result1, objptr
14b54     16 FA 25 F4 | 	bith	result1, #22
14b58     62 00 00 FF 
14b5c     38 E5 05 F1 | 	add	objptr, ##50488
14b60     F2 FA 61 FC | 	wrlong	result1, objptr
14b64     62 00 00 FF 
14b68     38 E5 85 F1 | 	sub	objptr, ##50488
14b6c     F2 FA 01 F6 | 	mov	result1, objptr
14b70     00 28 00 FF 
14b74     00 FA 45 F5 | 	or	result1, ##5242880
14b78     62 00 00 FF 
14b7c     3C E5 05 F1 | 	add	objptr, ##50492
14b80     F2 FA 61 FC | 	wrlong	result1, objptr
14b84     62 00 00 FF 
14b88     3C E5 85 F1 | 	sub	objptr, ##50492
14b8c     F2 FA 01 F6 | 	mov	result1, objptr
14b90     35 FA 25 F4 | 	bith	result1, #53
14b94     62 00 00 FF 
14b98     40 E5 05 F1 | 	add	objptr, ##50496
14b9c     F2 FA 61 FC | 	wrlong	result1, objptr
14ba0     62 00 00 FF 
14ba4     40 E5 85 F1 | 	sub	objptr, ##50496
14ba8     F2 FA 01 F6 | 	mov	result1, objptr
14bac     54 FA 25 F4 | 	bith	result1, #84
14bb0     62 00 00 FF 
14bb4     44 E5 05 F1 | 	add	objptr, ##50500
14bb8     F2 FA 61 FC | 	wrlong	result1, objptr
14bbc     62 00 00 FF 
14bc0     44 E5 85 F1 | 	sub	objptr, ##50500
14bc4     F2 FA 01 F6 | 	mov	result1, objptr
14bc8     17 FA 25 F4 | 	bith	result1, #23
14bcc     62 00 00 FF 
14bd0     48 E5 05 F1 | 	add	objptr, ##50504
14bd4     F2 FA 61 FC | 	wrlong	result1, objptr
14bd8     62 00 00 FF 
14bdc     48 E5 85 F1 | 	sub	objptr, ##50504
14be0     F2 FA 01 F6 | 	mov	result1, objptr
14be4     00 48 00 FF 
14be8     00 FA 45 F5 | 	or	result1, ##9437184
14bec     62 00 00 FF 
14bf0     4C E5 05 F1 | 	add	objptr, ##50508
14bf4     F2 FA 61 FC | 	wrlong	result1, objptr
14bf8     62 00 00 FF 
14bfc     4C E5 85 F1 | 	sub	objptr, ##50508
14c00     F2 FA 01 F6 | 	mov	result1, objptr
14c04     00 50 00 FF 
14c08     00 FA 45 F5 | 	or	result1, ##10485760
14c0c     62 00 00 FF 
14c10     50 E5 05 F1 | 	add	objptr, ##50512
14c14     F2 FA 61 FC | 	wrlong	result1, objptr
14c18     62 00 00 FF 
14c1c     50 E5 85 F1 | 	sub	objptr, ##50512
14c20     F2 FA 01 F6 | 	mov	result1, objptr
14c24     00 58 00 FF 
14c28     00 FA 45 F5 | 	or	result1, ##11534336
14c2c     62 00 00 FF 
14c30     54 E5 05 F1 | 	add	objptr, ##50516
14c34     F2 FA 61 FC | 	wrlong	result1, objptr
14c38     62 00 00 FF 
14c3c     54 E5 85 F1 | 	sub	objptr, ##50516
14c40     F2 FA 01 F6 | 	mov	result1, objptr
14c44     36 FA 25 F4 | 	bith	result1, #54
14c48     62 00 00 FF 
14c4c     68 E5 05 F1 | 	add	objptr, ##50536
14c50     F2 FA 61 FC | 	wrlong	result1, objptr
14c54     62 00 00 FF 
14c58     68 E5 85 F1 | 	sub	objptr, ##50536
14c5c     F2 FA 01 F6 | 	mov	result1, objptr
14c60     00 68 00 FF 
14c64     00 FA 45 F5 | 	or	result1, ##13631488
14c68     62 00 00 FF 
14c6c     98 E5 05 F1 | 	add	objptr, ##50584
14c70     F2 FA 61 FC | 	wrlong	result1, objptr
14c74     62 00 00 FF 
14c78     98 E5 85 F1 | 	sub	objptr, ##50584
14c7c     F2 FA 01 F6 | 	mov	result1, objptr
14c80     00 68 00 FF 
14c84     00 FA 45 F5 | 	or	result1, ##13631488
14c88     62 00 00 FF 
14c8c     94 E5 05 F1 | 	add	objptr, ##50580
14c90     F2 FA 61 FC | 	wrlong	result1, objptr
14c94     62 00 00 FF 
14c98     94 E5 85 F1 | 	sub	objptr, ##50580
14c9c     F2 FA 01 F6 | 	mov	result1, objptr
14ca0     00 68 00 FF 
14ca4     00 FA 45 F5 | 	or	result1, ##13631488
14ca8     62 00 00 FF 
14cac     9C E5 05 F1 | 	add	objptr, ##50588
14cb0     F2 FA 61 FC | 	wrlong	result1, objptr
14cb4     62 00 00 FF 
14cb8     9C E5 85 F1 | 	sub	objptr, ##50588
14cbc     F2 FA 01 F6 | 	mov	result1, objptr
14cc0     00 68 00 FF 
14cc4     00 FA 45 F5 | 	or	result1, ##13631488
14cc8     62 00 00 FF 
14ccc     A0 E5 05 F1 | 	add	objptr, ##50592
14cd0     F2 FA 61 FC | 	wrlong	result1, objptr
14cd4     62 00 00 FF 
14cd8     A0 E5 85 F1 | 	sub	objptr, ##50592
14cdc     F2 FA 01 F6 | 	mov	result1, objptr
14ce0     00 68 00 FF 
14ce4     00 FA 45 F5 | 	or	result1, ##13631488
14ce8     62 00 00 FF 
14cec     D0 E5 05 F1 | 	add	objptr, ##50640
14cf0     F2 FA 61 FC | 	wrlong	result1, objptr
14cf4     62 00 00 FF 
14cf8     D0 E5 85 F1 | 	sub	objptr, ##50640
14cfc     F2 FA 01 F6 | 	mov	result1, objptr
14d00     55 FA 25 F4 | 	bith	result1, #85
14d04     62 00 00 FF 
14d08     80 E5 05 F1 | 	add	objptr, ##50560
14d0c     F2 FA 61 FC | 	wrlong	result1, objptr
14d10     62 00 00 FF 
14d14     80 E5 85 F1 | 	sub	objptr, ##50560
14d18     F2 FA 01 F6 | 	mov	result1, objptr
14d1c     00 68 00 FF 
14d20     00 FA 45 F5 | 	or	result1, ##13631488
14d24     62 00 00 FF 
14d28     A4 E5 05 F1 | 	add	objptr, ##50596
14d2c     F2 FA 61 FC | 	wrlong	result1, objptr
14d30     62 00 00 FF 
14d34     A4 E5 85 F1 | 	sub	objptr, ##50596
14d38     F2 FA 01 F6 | 	mov	result1, objptr
14d3c     00 68 00 FF 
14d40     00 FA 45 F5 | 	or	result1, ##13631488
14d44     62 00 00 FF 
14d48     A8 E5 05 F1 | 	add	objptr, ##50600
14d4c     F2 FA 61 FC | 	wrlong	result1, objptr
14d50     62 00 00 FF 
14d54     A8 E5 85 F1 | 	sub	objptr, ##50600
14d58     F2 FA 01 F6 | 	mov	result1, objptr
14d5c     00 68 00 FF 
14d60     00 FA 45 F5 | 	or	result1, ##13631488
14d64     62 00 00 FF 
14d68     AC E5 05 F1 | 	add	objptr, ##50604
14d6c     F2 FA 61 FC | 	wrlong	result1, objptr
14d70     62 00 00 FF 
14d74     AC E5 85 F1 | 	sub	objptr, ##50604
14d78     F2 FA 01 F6 | 	mov	result1, objptr
14d7c     74 FA 25 F4 | 	bith	result1, #116
14d80     63 00 00 FF 
14d84     24 E4 05 F1 | 	add	objptr, ##50724
14d88     F2 FA 61 FC | 	wrlong	result1, objptr
14d8c     63 00 00 FF 
14d90     24 E4 85 F1 | 	sub	objptr, ##50724
14d94     F2 FA 01 F6 | 	mov	result1, objptr
14d98     18 FA 25 F4 | 	bith	result1, #24
14d9c     63 00 00 FF 
14da0     28 E4 05 F1 | 	add	objptr, ##50728
14da4     F2 FA 61 FC | 	wrlong	result1, objptr
14da8     63 00 00 FF 
14dac     28 E4 85 F1 | 	sub	objptr, ##50728
14db0     F2 FA 01 F6 | 	mov	result1, objptr
14db4     00 88 00 FF 
14db8     00 FA 45 F5 | 	or	result1, ##17825792
14dbc     63 00 00 FF 
14dc0     2C E4 05 F1 | 	add	objptr, ##50732
14dc4     F2 FA 61 FC | 	wrlong	result1, objptr
14dc8     63 00 00 FF 
14dcc     2C E4 85 F1 | 	sub	objptr, ##50732
14dd0     F2 FA 01 F6 | 	mov	result1, objptr
14dd4     00 90 00 FF 
14dd8     00 FA 45 F5 | 	or	result1, ##18874368
14ddc     63 00 00 FF 
14de0     30 E4 05 F1 | 	add	objptr, ##50736
14de4     F2 FA 61 FC | 	wrlong	result1, objptr
14de8     63 00 00 FF 
14dec     30 E4 85 F1 | 	sub	objptr, ##50736
14df0     F2 FA 01 F6 | 	mov	result1, objptr
14df4     00 98 00 FF 
14df8     00 FA 45 F5 | 	or	result1, ##19922944
14dfc     63 00 00 FF 
14e00     34 E4 05 F1 | 	add	objptr, ##50740
14e04     F2 FA 61 FC | 	wrlong	result1, objptr
14e08     63 00 00 FF 
14e0c     34 E4 85 F1 | 	sub	objptr, ##50740
14e10     F2 FA 01 F6 | 	mov	result1, objptr
14e14     00 A0 00 FF 
14e18     00 FA 45 F5 | 	or	result1, ##20971520
14e1c     63 00 00 FF 
14e20     38 E4 05 F1 | 	add	objptr, ##50744
14e24     F2 FA 61 FC | 	wrlong	result1, objptr
14e28     63 00 00 FF 
14e2c     38 E4 85 F1 | 	sub	objptr, ##50744
14e30     F2 FA 01 F6 | 	mov	result1, objptr
14e34     00 A8 00 FF 
14e38     00 FA 45 F5 | 	or	result1, ##22020096
14e3c     63 00 00 FF 
14e40     3C E4 05 F1 | 	add	objptr, ##50748
14e44     F2 FA 61 FC | 	wrlong	result1, objptr
14e48     63 00 00 FF 
14e4c     3C E4 85 F1 | 	sub	objptr, ##50748
14e50     F2 FA 01 F6 | 	mov	result1, objptr
14e54     00 B0 00 FF 
14e58     00 FA 45 F5 | 	or	result1, ##23068672
14e5c     63 00 00 FF 
14e60     40 E4 05 F1 | 	add	objptr, ##50752
14e64     F2 FA 61 FC | 	wrlong	result1, objptr
14e68     63 00 00 FF 
14e6c     40 E4 85 F1 | 	sub	objptr, ##50752
14e70     F2 FA 01 F6 | 	mov	result1, objptr
14e74     00 B8 00 FF 
14e78     00 FA 45 F5 | 	or	result1, ##24117248
14e7c     63 00 00 FF 
14e80     44 E4 05 F1 | 	add	objptr, ##50756
14e84     F2 FA 61 FC | 	wrlong	result1, objptr
14e88     63 00 00 FF 
14e8c     44 E4 85 F1 | 	sub	objptr, ##50756
14e90     F2 FA 01 F6 | 	mov	result1, objptr
14e94     37 FA 25 F4 | 	bith	result1, #55
14e98     63 00 00 FF 
14e9c     48 E4 05 F1 | 	add	objptr, ##50760
14ea0     F2 FA 61 FC | 	wrlong	result1, objptr
14ea4     63 00 00 FF 
14ea8     48 E4 85 F1 | 	sub	objptr, ##50760
14eac     F2 FA 01 F6 | 	mov	result1, objptr
14eb0     00 C8 00 FF 
14eb4     00 FA 45 F5 | 	or	result1, ##26214400
14eb8     63 00 00 FF 
14ebc     4C E4 05 F1 | 	add	objptr, ##50764
14ec0     F2 FA 61 FC | 	wrlong	result1, objptr
14ec4     63 00 00 FF 
14ec8     4C E4 85 F1 | 	sub	objptr, ##50764
14ecc     F2 FA 01 F6 | 	mov	result1, objptr
14ed0     00 D0 00 FF 
14ed4     00 FA 45 F5 | 	or	result1, ##27262976
14ed8     63 00 00 FF 
14edc     50 E4 05 F1 | 	add	objptr, ##50768
14ee0     F2 FA 61 FC | 	wrlong	result1, objptr
14ee4     63 00 00 FF 
14ee8     50 E4 85 F1 | 	sub	objptr, ##50768
14eec     F2 FA 01 F6 | 	mov	result1, objptr
14ef0     00 D8 00 FF 
14ef4     00 FA 45 F5 | 	or	result1, ##28311552
14ef8     63 00 00 FF 
14efc     54 E4 05 F1 | 	add	objptr, ##50772
14f00     F2 FA 61 FC | 	wrlong	result1, objptr
14f04     63 00 00 FF 
14f08     54 E4 85 F1 | 	sub	objptr, ##50772
14f0c     F2 FA 01 F6 | 	mov	result1, objptr
14f10     56 FA 25 F4 | 	bith	result1, #86
14f14     63 00 00 FF 
14f18     58 E4 05 F1 | 	add	objptr, ##50776
14f1c     F2 FA 61 FC | 	wrlong	result1, objptr
14f20     63 00 00 FF 
14f24     58 E4 85 F1 | 	sub	objptr, ##50776
14f28     F2 FA 01 F6 | 	mov	result1, objptr
14f2c     00 E8 00 FF 
14f30     00 FA 45 F5 | 	or	result1, ##30408704
14f34     64 00 00 FF 
14f38     20 E5 05 F1 | 	add	objptr, ##51488
14f3c     F2 FA 61 FC | 	wrlong	result1, objptr
14f40     64 00 00 FF 
14f44     20 E5 85 F1 | 	sub	objptr, ##51488
14f48     F2 FA 01 F6 | 	mov	result1, objptr
14f4c     75 FA 25 F4 | 	bith	result1, #117
14f50     63 00 00 FF 
14f54     5C E4 05 F1 | 	add	objptr, ##50780
14f58     F2 FA 61 FC | 	wrlong	result1, objptr
14f5c     63 00 00 FF 
14f60     5C E4 85 F1 | 	sub	objptr, ##50780
14f64     F2 FA 01 F6 | 	mov	result1, objptr
14f68     94 FA 25 F4 | 	bith	result1, #148
14f6c     63 00 00 FF 
14f70     70 E4 05 F1 | 	add	objptr, ##50800
14f74     F2 FA 61 FC | 	wrlong	result1, objptr
14f78     63 00 00 FF 
14f7c     70 E4 85 F1 | 	sub	objptr, ##50800
14f80     F2 FA 01 F6 | 	mov	result1, objptr
14f84     19 FA 25 F4 | 	bith	result1, #25
14f88     63 00 00 FF 
14f8c     60 E4 05 F1 | 	add	objptr, ##50784
14f90     F2 FA 61 FC | 	wrlong	result1, objptr
14f94     63 00 00 FF 
14f98     60 E4 85 F1 | 	sub	objptr, ##50784
14f9c     F2 FA 01 F6 | 	mov	result1, objptr
14fa0     00 08 01 FF 
14fa4     00 FA 45 F5 | 	or	result1, ##34603008
14fa8     62 00 00 FF 
14fac     7C E5 05 F1 | 	add	objptr, ##50556
14fb0     F2 FA 61 FC | 	wrlong	result1, objptr
14fb4     62 00 00 FF 
14fb8     7C E5 85 F1 | 	sub	objptr, ##50556
14fbc     F2 FA 01 F6 | 	mov	result1, objptr
14fc0     00 10 01 FF 
14fc4     00 FA 45 F5 | 	or	result1, ##35651584
14fc8     63 00 00 FF 
14fcc     64 E4 05 F1 | 	add	objptr, ##50788
14fd0     F2 FA 61 FC | 	wrlong	result1, objptr
14fd4     63 00 00 FF 
14fd8     64 E4 85 F1 | 	sub	objptr, ##50788
14fdc     F2 FA 01 F6 | 	mov	result1, objptr
14fe0     00 18 01 FF 
14fe4     00 FA 45 F5 | 	or	result1, ##36700160
14fe8     63 00 00 FF 
14fec     68 E4 05 F1 | 	add	objptr, ##50792
14ff0     F2 FA 61 FC | 	wrlong	result1, objptr
14ff4     63 00 00 FF 
14ff8     68 E4 85 F1 | 	sub	objptr, ##50792
14ffc     F2 FA 01 F6 | 	mov	result1, objptr
15000     00 20 01 FF 
15004     00 FA 45 F5 | 	or	result1, ##37748736
15008     63 00 00 FF 
1500c     6C E4 05 F1 | 	add	objptr, ##50796
15010     F2 FA 61 FC | 	wrlong	result1, objptr
15014     63 00 00 FF 
15018     6C E4 85 F1 | 	sub	objptr, ##50796
1501c     F2 FA 01 F6 | 	mov	result1, objptr
15020     00 28 01 FF 
15024     00 FA 45 F5 | 	or	result1, ##38797312
15028     63 00 00 FF 
1502c     78 E4 05 F1 | 	add	objptr, ##50808
15030     F2 FA 61 FC | 	wrlong	result1, objptr
15034     63 00 00 FF 
15038     78 E4 85 F1 | 	sub	objptr, ##50808
1503c     F2 FA 01 F6 | 	mov	result1, objptr
15040     00 30 01 FF 
15044     00 FA 45 F5 | 	or	result1, ##39845888
15048     63 00 00 FF 
1504c     7C E4 05 F1 | 	add	objptr, ##50812
15050     F2 FA 61 FC | 	wrlong	result1, objptr
15054     63 00 00 FF 
15058     7C E4 85 F1 | 	sub	objptr, ##50812
1505c     F2 FA 01 F6 | 	mov	result1, objptr
15060     00 38 01 FF 
15064     00 FA 45 F5 | 	or	result1, ##40894464
15068     63 00 00 FF 
1506c     80 E4 05 F1 | 	add	objptr, ##50816
15070     F2 FA 61 FC | 	wrlong	result1, objptr
15074     63 00 00 FF 
15078     80 E4 85 F1 | 	sub	objptr, ##50816
1507c     F2 FA 01 F6 | 	mov	result1, objptr
15080     00 40 01 FF 
15084     00 FA 45 F5 | 	or	result1, ##41943040
15088     63 00 00 FF 
1508c     84 E4 05 F1 | 	add	objptr, ##50820
15090     F2 FA 61 FC | 	wrlong	result1, objptr
15094     63 00 00 FF 
15098     84 E4 85 F1 | 	sub	objptr, ##50820
1509c     F2 FA 01 F6 | 	mov	result1, objptr
150a0     00 48 01 FF 
150a4     00 FA 45 F5 | 	or	result1, ##42991616
150a8     63 00 00 FF 
150ac     8C E4 05 F1 | 	add	objptr, ##50828
150b0     F2 FA 61 FC | 	wrlong	result1, objptr
150b4     63 00 00 FF 
150b8     8C E4 85 F1 | 	sub	objptr, ##50828
150bc     F2 FA 01 F6 | 	mov	result1, objptr
150c0     00 50 01 FF 
150c4     00 FA 45 F5 | 	or	result1, ##44040192
150c8     63 00 00 FF 
150cc     90 E4 05 F1 | 	add	objptr, ##50832
150d0     F2 FA 61 FC | 	wrlong	result1, objptr
150d4     63 00 00 FF 
150d8     90 E4 85 F1 | 	sub	objptr, ##50832
150dc     F2 FA 01 F6 | 	mov	result1, objptr
150e0     00 58 01 FF 
150e4     00 FA 45 F5 | 	or	result1, ##45088768
150e8     62 00 00 FF 
150ec     90 E5 05 F1 | 	add	objptr, ##50576
150f0     F2 FA 61 FC | 	wrlong	result1, objptr
150f4     62 00 00 FF 
150f8     90 E5 85 F1 | 	sub	objptr, ##50576
150fc     F2 FA 01 F6 | 	mov	result1, objptr
15100     00 60 01 FF 
15104     00 FA 45 F5 | 	or	result1, ##46137344
15108     62 00 00 FF 
1510c     C0 E5 05 F1 | 	add	objptr, ##50624
15110     F2 FA 61 FC | 	wrlong	result1, objptr
15114     62 00 00 FF 
15118     C0 E5 85 F1 | 	sub	objptr, ##50624
1511c     F2 FA 01 F6 | 	mov	result1, objptr
15120     00 68 01 FF 
15124     00 FA 45 F5 | 	or	result1, ##47185920
15128     62 00 00 FF 
1512c     BC E5 05 F1 | 	add	objptr, ##50620
15130     F2 FA 61 FC | 	wrlong	result1, objptr
15134     62 00 00 FF 
15138     BC E5 85 F1 | 	sub	objptr, ##50620
1513c     F2 FA 01 F6 | 	mov	result1, objptr
15140     00 70 01 FF 
15144     00 FA 45 F5 | 	or	result1, ##48234496
15148     62 00 00 FF 
1514c     60 E5 05 F1 | 	add	objptr, ##50528
15150     F2 FA 61 FC | 	wrlong	result1, objptr
15154     62 00 00 FF 
15158     60 E5 85 F1 | 	sub	objptr, ##50528
1515c     F2 FA 01 F6 | 	mov	result1, objptr
15160     00 78 01 FF 
15164     00 FA 45 F5 | 	or	result1, ##49283072
15168     62 00 00 FF 
1516c     64 E5 05 F1 | 	add	objptr, ##50532
15170     F2 FA 61 FC | 	wrlong	result1, objptr
15174     62 00 00 FF 
15178     64 E5 85 F1 | 	sub	objptr, ##50532
1517c     F2 FA 01 F6 | 	mov	result1, objptr
15180     38 FA 25 F4 | 	bith	result1, #56
15184     62 00 00 FF 
15188     CC E5 05 F1 | 	add	objptr, ##50636
1518c     F2 FA 61 FC | 	wrlong	result1, objptr
15190     62 00 00 FF 
15194     CC E5 85 F1 | 	sub	objptr, ##50636
15198     F2 FA 01 F6 | 	mov	result1, objptr
1519c     00 88 01 FF 
151a0     00 FA 45 F5 | 	or	result1, ##51380224
151a4     63 00 00 FF 
151a8     74 E4 05 F1 | 	add	objptr, ##50804
151ac     F2 FA 61 FC | 	wrlong	result1, objptr
151b0     63 00 00 FF 
151b4     74 E4 85 F1 | 	sub	objptr, ##50804
151b8     F2 FA 01 F6 | 	mov	result1, objptr
151bc     00 90 01 FF 
151c0     00 FA 45 F5 | 	or	result1, ##52428800
151c4     63 00 00 FF 
151c8     88 E4 05 F1 | 	add	objptr, ##50824
151cc     F2 FA 61 FC | 	wrlong	result1, objptr
151d0     63 00 00 FF 
151d4     88 E4 85 F1 | 	sub	objptr, ##50824
151d8     F2 FA 01 F6 | 	mov	result1, objptr
151dc     00 98 01 FF 
151e0     00 FA 45 F5 | 	or	result1, ##53477376
151e4     63 00 00 FF 
151e8     94 E4 05 F1 | 	add	objptr, ##50836
151ec     F2 FA 61 FC | 	wrlong	result1, objptr
151f0     63 00 00 FF 
151f4     94 E4 85 F1 | 	sub	objptr, ##50836
151f8     F2 FA 01 F6 | 	mov	result1, objptr
151fc     00 A0 01 FF 
15200     00 FA 45 F5 | 	or	result1, ##54525952
15204     63 00 00 FF 
15208     98 E4 05 F1 | 	add	objptr, ##50840
1520c     F2 FA 61 FC | 	wrlong	result1, objptr
15210     63 00 00 FF 
15214     98 E4 85 F1 | 	sub	objptr, ##50840
15218     F2 FA 01 F6 | 	mov	result1, objptr
1521c     00 A8 01 FF 
15220     00 FA 45 F5 | 	or	result1, ##55574528
15224     63 00 00 FF 
15228     9C E4 05 F1 | 	add	objptr, ##50844
1522c     F2 FA 61 FC | 	wrlong	result1, objptr
15230     63 00 00 FF 
15234     9C E4 85 F1 | 	sub	objptr, ##50844
15238     F2 FA 01 F6 | 	mov	result1, objptr
1523c     00 B0 01 FF 
15240     00 FA 45 F5 | 	or	result1, ##56623104
15244     63 00 00 FF 
15248     A0 E4 05 F1 | 	add	objptr, ##50848
1524c     F2 FA 61 FC | 	wrlong	result1, objptr
15250     63 00 00 FF 
15254     A0 E4 85 F1 | 	sub	objptr, ##50848
15258     F2 FA 01 F6 | 	mov	result1, objptr
1525c     00 B8 01 FF 
15260     00 FA 45 F5 | 	or	result1, ##57671680
15264     63 00 00 FF 
15268     A4 E4 05 F1 | 	add	objptr, ##50852
1526c     F2 FA 61 FC | 	wrlong	result1, objptr
15270     63 00 00 FF 
15274     A4 E4 85 F1 | 	sub	objptr, ##50852
15278     F2 FA 01 F6 | 	mov	result1, objptr
1527c     57 FA 25 F4 | 	bith	result1, #87
15280     63 00 00 FF 
15284     A8 E4 05 F1 | 	add	objptr, ##50856
15288     F2 FA 61 FC | 	wrlong	result1, objptr
1528c     63 00 00 FF 
15290     A8 E4 85 F1 | 	sub	objptr, ##50856
15294     F2 FA 01 F6 | 	mov	result1, objptr
15298     94 FA 25 F4 | 	bith	result1, #148
1529c     63 00 00 FF 
152a0     70 E4 05 F1 | 	add	objptr, ##50800
152a4     F2 FA 61 FC | 	wrlong	result1, objptr
152a8     63 00 00 FF 
152ac     70 E4 85 F1 | 	sub	objptr, ##50800
152b0     F2 FA 01 F6 | 	mov	result1, objptr
152b4     00 C8 01 FF 
152b8     00 FA 45 F5 | 	or	result1, ##59768832
152bc     63 00 00 FF 
152c0     B0 E4 05 F1 | 	add	objptr, ##50864
152c4     F2 FA 61 FC | 	wrlong	result1, objptr
152c8     63 00 00 FF 
152cc     B0 E4 85 F1 | 	sub	objptr, ##50864
152d0     F2 FA 01 F6 | 	mov	result1, objptr
152d4     00 D0 01 FF 
152d8     00 FA 45 F5 | 	or	result1, ##60817408
152dc     63 00 00 FF 
152e0     AC E4 05 F1 | 	add	objptr, ##50860
152e4     F2 FA 61 FC | 	wrlong	result1, objptr
152e8     63 00 00 FF 
152ec     AC E4 85 F1 | 	sub	objptr, ##50860
152f0     F2 FA 01 F6 | 	mov	result1, objptr
152f4     00 D8 01 FF 
152f8     00 FA 45 F5 | 	or	result1, ##61865984
152fc     63 00 00 FF 
15300     C4 E4 05 F1 | 	add	objptr, ##50884
15304     F2 FA 61 FC | 	wrlong	result1, objptr
15308     63 00 00 FF 
1530c     C4 E4 85 F1 | 	sub	objptr, ##50884
15310     F2 FA 01 F6 | 	mov	result1, objptr
15314     76 FA 25 F4 | 	bith	result1, #118
15318     63 00 00 FF 
1531c     C8 E4 05 F1 | 	add	objptr, ##50888
15320     F2 FA 61 FC | 	wrlong	result1, objptr
15324     63 00 00 FF 
15328     C8 E4 85 F1 | 	sub	objptr, ##50888
1532c     F2 FA 01 F6 | 	mov	result1, objptr
15330     00 E8 01 FF 
15334     00 FA 45 F5 | 	or	result1, ##63963136
15338     63 00 00 FF 
1533c     B4 E4 05 F1 | 	add	objptr, ##50868
15340     F2 FA 61 FC | 	wrlong	result1, objptr
15344     63 00 00 FF 
15348     B4 E4 85 F1 | 	sub	objptr, ##50868
1534c     F2 FA 01 F6 | 	mov	result1, objptr
15350     95 FA 25 F4 | 	bith	result1, #149
15354     63 00 00 FF 
15358     B8 E4 05 F1 | 	add	objptr, ##50872
1535c     F2 FA 61 FC | 	wrlong	result1, objptr
15360     63 00 00 FF 
15364     B8 E4 85 F1 | 	sub	objptr, ##50872
15368     F2 FA 01 F6 | 	mov	result1, objptr
1536c     B4 FA 25 F4 | 	bith	result1, #180
15370     63 00 00 FF 
15374     BC E4 05 F1 | 	add	objptr, ##50876
15378     F2 FA 61 FC | 	wrlong	result1, objptr
1537c     63 00 00 FF 
15380     BC E4 85 F1 | 	sub	objptr, ##50876
15384     F2 FA 01 F6 | 	mov	result1, objptr
15388     1A FA 25 F4 | 	bith	result1, #26
1538c     63 00 00 FF 
15390     C0 E4 05 F1 | 	add	objptr, ##50880
15394     F2 FA 61 FC | 	wrlong	result1, objptr
15398     63 00 00 FF 
1539c     C0 E4 85 F1 | 	sub	objptr, ##50880
153a0     F2 FA 01 F6 | 	mov	result1, objptr
153a4     00 08 02 FF 
153a8     00 FA 45 F5 | 	or	result1, ##68157440
153ac     63 00 00 FF 
153b0     D0 E4 05 F1 | 	add	objptr, ##50896
153b4     F2 FA 61 FC | 	wrlong	result1, objptr
153b8     63 00 00 FF 
153bc     D0 E4 85 F1 | 	sub	objptr, ##50896
153c0     F2 FA 01 F6 | 	mov	result1, objptr
153c4     00 10 02 FF 
153c8     00 FA 45 F5 | 	or	result1, ##69206016
153cc     63 00 00 FF 
153d0     CC E4 05 F1 | 	add	objptr, ##50892
153d4     F2 FA 61 FC | 	wrlong	result1, objptr
153d8     63 00 00 FF 
153dc     CC E4 85 F1 | 	sub	objptr, ##50892
153e0     F2 FA 01 F6 | 	mov	result1, objptr
153e4     00 18 02 FF 
153e8     00 FA 45 F5 | 	or	result1, ##70254592
153ec     63 00 00 FF 
153f0     DC E4 05 F1 | 	add	objptr, ##50908
153f4     F2 FA 61 FC | 	wrlong	result1, objptr
153f8     63 00 00 FF 
153fc     DC E4 85 F1 | 	sub	objptr, ##50908
15400     F2 FA 01 F6 | 	mov	result1, objptr
15404     00 20 02 FF 
15408     00 FA 45 F5 | 	or	result1, ##71303168
1540c     63 00 00 FF 
15410     D8 E4 05 F1 | 	add	objptr, ##50904
15414     F2 FA 61 FC | 	wrlong	result1, objptr
15418     63 00 00 FF 
1541c     D8 E4 85 F1 | 	sub	objptr, ##50904
15420     F2 FA 01 F6 | 	mov	result1, objptr
15424     00 28 02 FF 
15428     00 FA 45 F5 | 	or	result1, ##72351744
1542c     63 00 00 FF 
15430     D4 E4 05 F1 | 	add	objptr, ##50900
15434     F2 FA 61 FC | 	wrlong	result1, objptr
15438     63 00 00 FF 
1543c     D4 E4 85 F1 | 	sub	objptr, ##50900
15440     F2 FA 01 F6 | 	mov	result1, objptr
15444     00 30 02 FF 
15448     00 FA 45 F5 | 	or	result1, ##73400320
1544c     63 00 00 FF 
15450     E0 E4 05 F1 | 	add	objptr, ##50912
15454     F2 FA 61 FC | 	wrlong	result1, objptr
15458     63 00 00 FF 
1545c     E0 E4 85 F1 | 	sub	objptr, ##50912
15460     F2 FA 01 F6 | 	mov	result1, objptr
15464     00 38 02 FF 
15468     00 FA 45 F5 | 	or	result1, ##74448896
1546c     63 00 00 FF 
15470     E4 E4 05 F1 | 	add	objptr, ##50916
15474     F2 FA 61 FC | 	wrlong	result1, objptr
15478     63 00 00 FF 
1547c     E4 E4 85 F1 | 	sub	objptr, ##50916
15480     F2 FA 01 F6 | 	mov	result1, objptr
15484     00 40 02 FF 
15488     00 FA 45 F5 | 	or	result1, ##75497472
1548c     62 00 00 FF 
15490     78 E5 05 F1 | 	add	objptr, ##50552
15494     F2 FA 61 FC | 	wrlong	result1, objptr
15498     62 00 00 FF 
1549c     78 E5 85 F1 | 	sub	objptr, ##50552
154a0     F2 FA 01 F6 | 	mov	result1, objptr
154a4     00 48 02 FF 
154a8     00 FA 45 F5 | 	or	result1, ##76546048
154ac     63 00 00 FF 
154b0     FC E4 05 F1 | 	add	objptr, ##50940
154b4     F2 FA 61 FC | 	wrlong	result1, objptr
154b8     63 00 00 FF 
154bc     FC E4 85 F1 | 	sub	objptr, ##50940
154c0     F2 FA 01 F6 | 	mov	result1, objptr
154c4     00 50 02 FF 
154c8     00 FA 45 F5 | 	or	result1, ##77594624
154cc     63 00 00 FF 
154d0     0C E5 05 F1 | 	add	objptr, ##50956
154d4     F2 FA 61 FC | 	wrlong	result1, objptr
154d8     63 00 00 FF 
154dc     0C E5 85 F1 | 	sub	objptr, ##50956
154e0     F2 FA 01 F6 | 	mov	result1, objptr
154e4     00 58 02 FF 
154e8     00 FA 45 F5 | 	or	result1, ##78643200
154ec     63 00 00 FF 
154f0     10 E5 05 F1 | 	add	objptr, ##50960
154f4     F2 FA 61 FC | 	wrlong	result1, objptr
154f8     63 00 00 FF 
154fc     10 E5 85 F1 | 	sub	objptr, ##50960
15500     F2 FA 01 F6 | 	mov	result1, objptr
15504     00 60 02 FF 
15508     00 FA 45 F5 | 	or	result1, ##79691776
1550c     63 00 00 FF 
15510     08 E5 05 F1 | 	add	objptr, ##50952
15514     F2 FA 61 FC | 	wrlong	result1, objptr
15518     63 00 00 FF 
1551c     08 E5 85 F1 | 	sub	objptr, ##50952
15520     F2 FA 01 F6 | 	mov	result1, objptr
15524     00 68 02 FF 
15528     00 FA 45 F5 | 	or	result1, ##80740352
1552c     63 00 00 FF 
15530     00 E5 05 F1 | 	add	objptr, ##50944
15534     F2 FA 61 FC | 	wrlong	result1, objptr
15538     63 00 00 FF 
1553c     00 E5 85 F1 | 	sub	objptr, ##50944
15540     F2 FA 01 F6 | 	mov	result1, objptr
15544     00 70 02 FF 
15548     00 FA 45 F5 | 	or	result1, ##81788928
1554c     63 00 00 FF 
15550     04 E5 05 F1 | 	add	objptr, ##50948
15554     F2 FA 61 FC | 	wrlong	result1, objptr
15558     63 00 00 FF 
1555c     04 E5 85 F1 | 	sub	objptr, ##50948
15560     F2 FA 01 F6 | 	mov	result1, objptr
15564     00 78 02 FF 
15568     00 FA 45 F5 | 	or	result1, ##82837504
1556c     63 00 00 FF 
15570     14 E5 05 F1 | 	add	objptr, ##50964
15574     F2 FA 61 FC | 	wrlong	result1, objptr
15578     63 00 00 FF 
1557c     14 E5 85 F1 | 	sub	objptr, ##50964
15580     F2 FA 01 F6 | 	mov	result1, objptr
15584     00 80 02 FF 
15588     00 FA 45 F5 | 	or	result1, ##83886080
1558c     63 00 00 FF 
15590     18 E5 05 F1 | 	add	objptr, ##50968
15594     F2 FA 61 FC | 	wrlong	result1, objptr
15598     63 00 00 FF 
1559c     18 E5 85 F1 | 	sub	objptr, ##50968
155a0     F2 FA 01 F6 | 	mov	result1, objptr
155a4     00 88 02 FF 
155a8     00 FA 45 F5 | 	or	result1, ##84934656
155ac     63 00 00 FF 
155b0     1C E5 05 F1 | 	add	objptr, ##50972
155b4     F2 FA 61 FC | 	wrlong	result1, objptr
155b8     63 00 00 FF 
155bc     1C E5 85 F1 | 	sub	objptr, ##50972
155c0     F2 FA 01 F6 | 	mov	result1, objptr
155c4     00 90 02 FF 
155c8     00 FA 45 F5 | 	or	result1, ##85983232
155cc     63 00 00 FF 
155d0     20 E5 05 F1 | 	add	objptr, ##50976
155d4     F2 FA 61 FC | 	wrlong	result1, objptr
155d8     63 00 00 FF 
155dc     20 E5 85 F1 | 	sub	objptr, ##50976
155e0     F2 FA 01 F6 | 	mov	result1, objptr
155e4     00 98 02 FF 
155e8     00 FA 45 F5 | 	or	result1, ##87031808
155ec     63 00 00 FF 
155f0     24 E5 05 F1 | 	add	objptr, ##50980
155f4     F2 FA 61 FC | 	wrlong	result1, objptr
155f8     63 00 00 FF 
155fc     24 E5 85 F1 | 	sub	objptr, ##50980
15600     F2 FA 01 F6 | 	mov	result1, objptr
15604     00 A0 02 FF 
15608     00 FA 45 F5 | 	or	result1, ##88080384
1560c     63 00 00 FF 
15610     28 E5 05 F1 | 	add	objptr, ##50984
15614     F2 FA 61 FC | 	wrlong	result1, objptr
15618     63 00 00 FF 
1561c     28 E5 85 F1 | 	sub	objptr, ##50984
15620     F2 FA 01 F6 | 	mov	result1, objptr
15624     00 A8 02 FF 
15628     00 FA 45 F5 | 	or	result1, ##89128960
1562c     63 00 00 FF 
15630     2C E5 05 F1 | 	add	objptr, ##50988
15634     F2 FA 61 FC | 	wrlong	result1, objptr
15638     63 00 00 FF 
1563c     2C E5 85 F1 | 	sub	objptr, ##50988
15640     F2 FA 01 F6 | 	mov	result1, objptr
15644     00 B0 02 FF 
15648     00 FA 45 F5 | 	or	result1, ##90177536
1564c     63 00 00 FF 
15650     30 E5 05 F1 | 	add	objptr, ##50992
15654     F2 FA 61 FC | 	wrlong	result1, objptr
15658     63 00 00 FF 
1565c     30 E5 85 F1 | 	sub	objptr, ##50992
15660     F2 FA 01 F6 | 	mov	result1, objptr
15664     00 B8 02 FF 
15668     00 FA 45 F5 | 	or	result1, ##91226112
1566c     63 00 00 FF 
15670     3C E5 05 F1 | 	add	objptr, ##51004
15674     F2 FA 61 FC | 	wrlong	result1, objptr
15678     63 00 00 FF 
1567c     3C E5 85 F1 | 	sub	objptr, ##51004
15680     F2 FA 01 F6 | 	mov	result1, objptr
15684     00 C0 02 FF 
15688     00 FA 45 F5 | 	or	result1, ##92274688
1568c     63 00 00 FF 
15690     34 E5 05 F1 | 	add	objptr, ##50996
15694     F2 FA 61 FC | 	wrlong	result1, objptr
15698     63 00 00 FF 
1569c     34 E5 85 F1 | 	sub	objptr, ##50996
156a0     F2 FA 01 F6 | 	mov	result1, objptr
156a4     00 C8 02 FF 
156a8     00 FA 45 F5 | 	or	result1, ##93323264
156ac     63 00 00 FF 
156b0     38 E5 05 F1 | 	add	objptr, ##51000
156b4     F2 FA 61 FC | 	wrlong	result1, objptr
156b8     63 00 00 FF 
156bc     38 E5 85 F1 | 	sub	objptr, ##51000
156c0     F2 FA 01 F6 | 	mov	result1, objptr
156c4     00 D0 02 FF 
156c8     00 FA 45 F5 | 	or	result1, ##94371840
156cc     63 00 00 FF 
156d0     40 E5 05 F1 | 	add	objptr, ##51008
156d4     F2 FA 61 FC | 	wrlong	result1, objptr
156d8     63 00 00 FF 
156dc     40 E5 85 F1 | 	sub	objptr, ##51008
156e0     F2 FA 01 F6 | 	mov	result1, objptr
156e4     00 D8 02 FF 
156e8     00 FA 45 F5 | 	or	result1, ##95420416
156ec     63 00 00 FF 
156f0     E8 E4 05 F1 | 	add	objptr, ##50920
156f4     F2 FA 61 FC | 	wrlong	result1, objptr
156f8     63 00 00 FF 
156fc     E8 E4 85 F1 | 	sub	objptr, ##50920
15700     F2 FA 01 F6 | 	mov	result1, objptr
15704     00 E0 02 FF 
15708     00 FA 45 F5 | 	or	result1, ##96468992
1570c     63 00 00 FF 
15710     F0 E4 05 F1 | 	add	objptr, ##50928
15714     F2 FA 61 FC | 	wrlong	result1, objptr
15718     63 00 00 FF 
1571c     F0 E4 85 F1 | 	sub	objptr, ##50928
15720     F2 FA 01 F6 | 	mov	result1, objptr
15724     00 E8 02 FF 
15728     00 FA 45 F5 | 	or	result1, ##97517568
1572c     63 00 00 FF 
15730     F4 E4 05 F1 | 	add	objptr, ##50932
15734     F2 FA 61 FC | 	wrlong	result1, objptr
15738     63 00 00 FF 
1573c     F4 E4 85 F1 | 	sub	objptr, ##50932
15740     F2 FA 01 F6 | 	mov	result1, objptr
15744     00 F0 02 FF 
15748     00 FA 45 F5 | 	or	result1, ##98566144
1574c     63 00 00 FF 
15750     44 E5 05 F1 | 	add	objptr, ##51012
15754     F2 FA 61 FC | 	wrlong	result1, objptr
15758     63 00 00 FF 
1575c     44 E5 85 F1 | 	sub	objptr, ##51012
15760     F2 FA 01 F6 | 	mov	result1, objptr
15764     00 F8 02 FF 
15768     00 FA 45 F5 | 	or	result1, ##99614720
1576c     63 00 00 FF 
15770     48 E5 05 F1 | 	add	objptr, ##51016
15774     F2 FA 61 FC | 	wrlong	result1, objptr
15778     63 00 00 FF 
1577c     48 E5 85 F1 | 	sub	objptr, ##51016
15780     F2 FA 01 F6 | 	mov	result1, objptr
15784     39 FA 25 F4 | 	bith	result1, #57
15788     63 00 00 FF 
1578c     4C E5 05 F1 | 	add	objptr, ##51020
15790     F2 FA 61 FC | 	wrlong	result1, objptr
15794     63 00 00 FF 
15798     4C E5 85 F1 | 	sub	objptr, ##51020
1579c     F2 FA 01 F6 | 	mov	result1, objptr
157a0     00 08 03 FF 
157a4     00 FA 45 F5 | 	or	result1, ##101711872
157a8     63 00 00 FF 
157ac     F8 E4 05 F1 | 	add	objptr, ##50936
157b0     F2 FA 61 FC | 	wrlong	result1, objptr
157b4     63 00 00 FF 
157b8     F8 E4 85 F1 | 	sub	objptr, ##50936
157bc                 | _init_commands_ret
157bc     2D 00 64 FD | 	ret
157c0                 | 
157c0                 | ' 
157c0                 | ' ''--------------------------------Error strings -------------------------------------
157c0                 | ' sub init_audio
157c0                 | _init_audio
157c0     05 4A 05 F6 | 	mov	COUNT_, #5
157c4     A8 00 A0 FD | 	call	#pushregs_
157c8                 | ' 
157c8                 | ' for i=0 to 1023 : for j=0 to 7 : samplebuf(j,i)=round(32600*sin(i*3.1415926535/512.0)) : next j: next i
157c8     00 1E 06 F6 | 	mov	local01, #0
157cc                 | LR__1670
157cc     00 20 06 F6 | 	mov	local02, #0
157d0                 | LR__1671
157d0     10 15 02 F6 | 	mov	arg02, local02
157d4     0B 14 66 F0 | 	shl	arg02, #11
157d8     0C 00 00 FF 
157dc     CC E4 05 F1 | 	add	objptr, ##6348
157e0     F2 14 02 F1 | 	add	arg02, objptr
157e4     0F 23 02 F6 | 	mov	local03, local01
157e8     01 22 66 F0 | 	shl	local03, #1
157ec     0A 23 02 F1 | 	add	local03, arg02
157f0     58 7F 23 FF 
157f4     00 24 06 F6 | 	mov	local04, ##1191096320
157f8     0C 00 00 FF 
157fc     CC E4 85 F1 | 	sub	objptr, ##6348
15800     0F 13 52 F6 | 	abs	arg01, local01 wc
15804     1F 26 C6 C9 |  if_b	decod	local05, #31
15808     00 26 06 36 |  if_ae	mov	local05, #0
1580c     74 60 B0 FD | 	call	#__system___float_fromuns
15810     13 FB 61 F5 | 	xor	result1, local05
15814     FD 12 02 F6 | 	mov	arg01, result1
15818     87 24 20 FF 
1581c     DB 15 06 F6 | 	mov	arg02, ##1078530011
15820     64 64 B0 FD | 	call	#__system___float_mul
15824     FD 12 02 F6 | 	mov	arg01, result1
15828     00 00 22 FF 
1582c     00 14 06 F6 | 	mov	arg02, ##1140850688
15830     58 66 B0 FD | 	call	#__system___float_div
15834     FD 12 02 F6 | 	mov	arg01, result1
15838     88 6D B0 FD | 	call	#__system____builtin_sinf
1583c     FD 14 02 F6 | 	mov	arg02, result1
15840     12 13 02 F6 | 	mov	arg01, local04
15844     40 64 B0 FD | 	call	#__system___float_mul
15848     FD 12 02 F6 | 	mov	arg01, result1
1584c     01 14 06 F6 | 	mov	arg02, #1
15850     FC 68 B0 FD | 	call	#__system___float_tointeger
15854     11 FB 51 FC | 	wrword	result1, local03
15858     01 20 06 F1 | 	add	local02, #1
1585c     08 20 56 F2 | 	cmps	local02, #8 wc
15860     6C FF 9F CD |  if_b	jmp	#LR__1671
15864     01 1E 06 F1 | 	add	local01, #1
15868     02 00 00 FF 
1586c     00 1E 56 F2 | 	cmps	local01, ##1024 wc
15870     58 FF 9F CD |  if_b	jmp	#LR__1670
15874                 | ' for i=0 to 255 : for j=0 to 7 : envbuf(j,i)=65280-256*i : next j : next i
15874     00 1E 06 F6 | 	mov	local01, #0
15878     97 2E 48 FB | 	callpa	#(@LR__1674-@LR__1672)>>2,fcache_load_ptr_
1587c                 | LR__1672
1587c     00 20 06 F6 | 	mov	local02, #0
15880     2C 00 00 FF 
15884     CC E4 05 F1 | 	add	objptr, ##22732
15888                 | LR__1673
15888     10 25 02 F6 | 	mov	local04, local02
1588c     09 24 66 F0 | 	shl	local04, #9
15890     F2 24 02 F1 | 	add	local04, objptr
15894     0F 23 02 F6 | 	mov	local03, local01
15898     01 22 66 F0 | 	shl	local03, #1
1589c     12 23 02 F1 | 	add	local03, local04
158a0     0F 15 02 F6 | 	mov	arg02, local01
158a4     08 14 66 F0 | 	shl	arg02, #8
158a8     7F 00 00 FF 
158ac     00 25 06 F6 | 	mov	local04, ##65280
158b0     0A 25 82 F1 | 	sub	local04, arg02
158b4     11 25 52 FC | 	wrword	local04, local03
158b8     01 20 06 F1 | 	add	local02, #1
158bc     08 20 56 F2 | 	cmps	local02, #8 wc
158c0     C4 FF 9F CD |  if_b	jmp	#LR__1673
158c4     2C 00 00 FF 
158c8     CC E4 85 F1 | 	sub	objptr, ##22732
158cc     01 1E 06 F1 | 	add	local01, #1
158d0     00 1F 56 F2 | 	cmps	local01, #256 wc
158d4     A4 FF 9F CD |  if_b	jmp	#LR__1672
158d8                 | LR__1674
158d8     A7 F0 03 F6 | 	mov	ptra, fp
158dc     B2 00 A0 FD | 	call	#popregs_
158e0                 | _init_audio_ret
158e0     2D 00 64 FD | 	ret
158e4                 | 
158e4                 | ' 
158e4                 | ' sub init_error_strings
158e4                 | _init_error_strings
158e4     46 01 00 FF 
158e8     0F 01 06 F6 | 	mov	_var01, ##@LR__4643
158ec     64 00 00 FF 
158f0     40 E5 05 F1 | 	add	objptr, ##51520
158f4     F2 00 62 FC | 	wrlong	_var01, objptr
158f8     46 01 00 FF 
158fc     10 01 06 F6 | 	mov	_var01, ##@LR__4644
15900     04 E4 05 F1 | 	add	objptr, #4
15904     F2 00 62 FC | 	wrlong	_var01, objptr
15908     46 01 00 FF 
1590c     35 01 06 F6 | 	mov	_var01, ##@LR__4645
15910     04 E4 05 F1 | 	add	objptr, #4
15914     F2 00 62 FC | 	wrlong	_var01, objptr
15918     46 01 00 FF 
1591c     56 01 06 F6 | 	mov	_var01, ##@LR__4646
15920     04 E4 05 F1 | 	add	objptr, #4
15924     F2 00 62 FC | 	wrlong	_var01, objptr
15928     46 01 00 FF 
1592c     70 01 06 F6 | 	mov	_var01, ##@LR__4647
15930     04 E4 05 F1 | 	add	objptr, #4
15934     F2 00 62 FC | 	wrlong	_var01, objptr
15938     46 01 00 FF 
1593c     8C 01 06 F6 | 	mov	_var01, ##@LR__4648
15940     04 E4 05 F1 | 	add	objptr, #4
15944     F2 00 62 FC | 	wrlong	_var01, objptr
15948     46 01 00 FF 
1594c     AE 01 06 F6 | 	mov	_var01, ##@LR__4649
15950     04 E4 05 F1 | 	add	objptr, #4
15954     F2 00 62 FC | 	wrlong	_var01, objptr
15958     46 01 00 FF 
1595c     DC 01 06 F6 | 	mov	_var01, ##@LR__4650
15960     04 E4 05 F1 | 	add	objptr, #4
15964     F2 00 62 FC | 	wrlong	_var01, objptr
15968     47 01 00 FF 
1596c     07 00 06 F6 | 	mov	_var01, ##@LR__4651
15970     04 E4 05 F1 | 	add	objptr, #4
15974     F2 00 62 FC | 	wrlong	_var01, objptr
15978     47 01 00 FF 
1597c     20 00 06 F6 | 	mov	_var01, ##@LR__4652
15980     04 E4 05 F1 | 	add	objptr, #4
15984     F2 00 62 FC | 	wrlong	_var01, objptr
15988     47 01 00 FF 
1598c     41 00 06 F6 | 	mov	_var01, ##@LR__4653
15990     04 E4 05 F1 | 	add	objptr, #4
15994     F2 00 62 FC | 	wrlong	_var01, objptr
15998     47 01 00 FF 
1599c     58 00 06 F6 | 	mov	_var01, ##@LR__4654
159a0     04 E4 05 F1 | 	add	objptr, #4
159a4     F2 00 62 FC | 	wrlong	_var01, objptr
159a8     47 01 00 FF 
159ac     76 00 06 F6 | 	mov	_var01, ##@LR__4655
159b0     04 E4 05 F1 | 	add	objptr, #4
159b4     F2 00 62 FC | 	wrlong	_var01, objptr
159b8     47 01 00 FF 
159bc     9A 00 06 F6 | 	mov	_var01, ##@LR__4656
159c0     04 E4 05 F1 | 	add	objptr, #4
159c4     F2 00 62 FC | 	wrlong	_var01, objptr
159c8     47 01 00 FF 
159cc     C1 00 06 F6 | 	mov	_var01, ##@LR__4657
159d0     04 E4 05 F1 | 	add	objptr, #4
159d4     F2 00 62 FC | 	wrlong	_var01, objptr
159d8     47 01 00 FF 
159dc     DD 00 06 F6 | 	mov	_var01, ##@LR__4658
159e0     04 E4 05 F1 | 	add	objptr, #4
159e4     F2 00 62 FC | 	wrlong	_var01, objptr
159e8     47 01 00 FF 
159ec     EE 00 06 F6 | 	mov	_var01, ##@LR__4659
159f0     04 E4 05 F1 | 	add	objptr, #4
159f4     F2 00 62 FC | 	wrlong	_var01, objptr
159f8     47 01 00 FF 
159fc     FE 00 06 F6 | 	mov	_var01, ##@LR__4660
15a00     04 E4 05 F1 | 	add	objptr, #4
15a04     F2 00 62 FC | 	wrlong	_var01, objptr
15a08     47 01 00 FF 
15a0c     19 01 06 F6 | 	mov	_var01, ##@LR__4661
15a10     04 E4 05 F1 | 	add	objptr, #4
15a14     F2 00 62 FC | 	wrlong	_var01, objptr
15a18     47 01 00 FF 
15a1c     2B 01 06 F6 | 	mov	_var01, ##@LR__4662
15a20     04 E4 05 F1 | 	add	objptr, #4
15a24     F2 00 62 FC | 	wrlong	_var01, objptr
15a28     47 01 00 FF 
15a2c     43 01 06 F6 | 	mov	_var01, ##@LR__4663
15a30     04 E4 05 F1 | 	add	objptr, #4
15a34     F2 00 62 FC | 	wrlong	_var01, objptr
15a38     47 01 00 FF 
15a3c     57 01 06 F6 | 	mov	_var01, ##@LR__4664
15a40     04 E4 05 F1 | 	add	objptr, #4
15a44     F2 00 62 FC | 	wrlong	_var01, objptr
15a48     47 01 00 FF 
15a4c     67 01 06 F6 | 	mov	_var01, ##@LR__4665
15a50     04 E4 05 F1 | 	add	objptr, #4
15a54     F2 00 62 FC | 	wrlong	_var01, objptr
15a58     47 01 00 FF 
15a5c     84 01 06 F6 | 	mov	_var01, ##@LR__4666
15a60     04 E4 05 F1 | 	add	objptr, #4
15a64     F2 00 62 FC | 	wrlong	_var01, objptr
15a68     47 01 00 FF 
15a6c     95 01 06 F6 | 	mov	_var01, ##@LR__4667
15a70     04 E4 05 F1 | 	add	objptr, #4
15a74     F2 00 62 FC | 	wrlong	_var01, objptr
15a78     47 01 00 FF 
15a7c     A6 01 06 F6 | 	mov	_var01, ##@LR__4668
15a80     04 E4 05 F1 | 	add	objptr, #4
15a84     F2 00 62 FC | 	wrlong	_var01, objptr
15a88     47 01 00 FF 
15a8c     D1 01 06 F6 | 	mov	_var01, ##@LR__4669
15a90     04 E4 05 F1 | 	add	objptr, #4
15a94     F2 00 62 FC | 	wrlong	_var01, objptr
15a98     47 01 00 FF 
15a9c     ED 01 06 F6 | 	mov	_var01, ##@LR__4670
15aa0     04 E4 05 F1 | 	add	objptr, #4
15aa4     F2 00 62 FC | 	wrlong	_var01, objptr
15aa8     48 01 00 FF 
15aac     03 00 06 F6 | 	mov	_var01, ##@LR__4671
15ab0     04 E4 05 F1 | 	add	objptr, #4
15ab4     F2 00 62 FC | 	wrlong	_var01, objptr
15ab8     48 01 00 FF 
15abc     10 00 06 F6 | 	mov	_var01, ##@LR__4672
15ac0     04 E4 05 F1 | 	add	objptr, #4
15ac4     F2 00 62 FC | 	wrlong	_var01, objptr
15ac8     48 01 00 FF 
15acc     22 00 06 F6 | 	mov	_var01, ##@LR__4673
15ad0     04 E4 05 F1 | 	add	objptr, #4
15ad4     F2 00 62 FC | 	wrlong	_var01, objptr
15ad8     48 01 00 FF 
15adc     33 00 06 F6 | 	mov	_var01, ##@LR__4674
15ae0     04 E4 05 F1 | 	add	objptr, #4
15ae4     F2 00 62 FC | 	wrlong	_var01, objptr
15ae8     48 01 00 FF 
15aec     4F 00 06 F6 | 	mov	_var01, ##@LR__4675
15af0     04 E4 05 F1 | 	add	objptr, #4
15af4     F2 00 62 FC | 	wrlong	_var01, objptr
15af8     48 01 00 FF 
15afc     60 00 06 F6 | 	mov	_var01, ##@LR__4676
15b00     04 E4 05 F1 | 	add	objptr, #4
15b04     F2 00 62 FC | 	wrlong	_var01, objptr
15b08     48 01 00 FF 
15b0c     6F 00 06 F6 | 	mov	_var01, ##@LR__4677
15b10     04 E4 05 F1 | 	add	objptr, #4
15b14     F2 00 62 FC | 	wrlong	_var01, objptr
15b18     48 01 00 FF 
15b1c     8A 00 06 F6 | 	mov	_var01, ##@LR__4678
15b20     04 E4 05 F1 | 	add	objptr, #4
15b24     F2 00 62 FC | 	wrlong	_var01, objptr
15b28     48 01 00 FF 
15b2c     BE 00 06 F6 | 	mov	_var01, ##@LR__4679
15b30     04 E4 05 F1 | 	add	objptr, #4
15b34     F2 00 62 FC | 	wrlong	_var01, objptr
15b38     48 01 00 FF 
15b3c     D7 00 06 F6 | 	mov	_var01, ##@LR__4680
15b40     04 E4 05 F1 | 	add	objptr, #4
15b44     F2 00 62 FC | 	wrlong	_var01, objptr
15b48     48 01 00 FF 
15b4c     F3 00 06 F6 | 	mov	_var01, ##@LR__4681
15b50     04 E4 05 F1 | 	add	objptr, #4
15b54     F2 00 62 FC | 	wrlong	_var01, objptr
15b58     48 01 00 FF 
15b5c     11 01 06 F6 | 	mov	_var01, ##@LR__4682
15b60     04 E4 05 F1 | 	add	objptr, #4
15b64     F2 00 62 FC | 	wrlong	_var01, objptr
15b68     48 01 00 FF 
15b6c     2A 01 06 F6 | 	mov	_var01, ##@LR__4683
15b70     04 E4 05 F1 | 	add	objptr, #4
15b74     F2 00 62 FC | 	wrlong	_var01, objptr
15b78     48 01 00 FF 
15b7c     49 01 06 F6 | 	mov	_var01, ##@LR__4684
15b80     04 E4 05 F1 | 	add	objptr, #4
15b84     F2 00 62 FC | 	wrlong	_var01, objptr
15b88     48 01 00 FF 
15b8c     58 01 06 F6 | 	mov	_var01, ##@LR__4685
15b90     04 E4 05 F1 | 	add	objptr, #4
15b94     F2 00 62 FC | 	wrlong	_var01, objptr
15b98     48 01 00 FF 
15b9c     86 01 06 F6 | 	mov	_var01, ##@LR__4686
15ba0     04 E4 05 F1 | 	add	objptr, #4
15ba4     F2 00 62 FC | 	wrlong	_var01, objptr
15ba8     48 01 00 FF 
15bac     94 01 06 F6 | 	mov	_var01, ##@LR__4687
15bb0     04 E4 05 F1 | 	add	objptr, #4
15bb4     F2 00 62 FC | 	wrlong	_var01, objptr
15bb8     48 01 00 FF 
15bbc     A9 01 06 F6 | 	mov	_var01, ##@LR__4688
15bc0     04 E4 05 F1 | 	add	objptr, #4
15bc4     F2 00 62 FC | 	wrlong	_var01, objptr
15bc8     48 01 00 FF 
15bcc     CD 01 06 F6 | 	mov	_var01, ##@LR__4689
15bd0     04 E4 05 F1 | 	add	objptr, #4
15bd4     F2 00 62 FC | 	wrlong	_var01, objptr
15bd8     48 01 00 FF 
15bdc     E4 01 06 F6 | 	mov	_var01, ##@LR__4690
15be0     04 E4 05 F1 | 	add	objptr, #4
15be4     F2 00 62 FC | 	wrlong	_var01, objptr
15be8     48 01 00 FF 
15bec     F7 01 06 F6 | 	mov	_var01, ##@LR__4691
15bf0     04 E4 05 F1 | 	add	objptr, #4
15bf4     F2 00 62 FC | 	wrlong	_var01, objptr
15bf8     49 01 00 FF 
15bfc     0E 00 06 F6 | 	mov	_var01, ##@LR__4692
15c00     04 E4 05 F1 | 	add	objptr, #4
15c04     F2 00 62 FC | 	wrlong	_var01, objptr
15c08     65 00 00 FF 
15c0c     04 E4 85 F1 | 	sub	objptr, ##51716
15c10                 | _init_error_strings_ret
15c10     2D 00 64 FD | 	ret
15c14                 | 
15c14                 | '         
15c14                 | ' sub printerror(err as integer)
15c14                 | _printerror
15c14     01 4A 05 F6 | 	mov	COUNT_, #1
15c18     A8 00 A0 FD | 	call	#pushregs_
15c1c     09 1F 02 F6 | 	mov	local01, arg01
15c20     49 01 00 FF 
15c24     27 12 06 F6 | 	mov	arg01, ##@LR__4693
15c28     E8 24 B0 FD | 	call	#_hg010b_spin2_write
15c2c     0F 13 02 F6 | 	mov	arg01, local01
15c30     E0 26 B0 FD | 	call	#_hg010b_spin2_inttostr
15c34     FD 12 02 F6 | 	mov	arg01, result1
15c38     D8 24 B0 FD | 	call	#_hg010b_spin2_write
15c3c     49 01 00 FF 
15c40     2E 12 06 F6 | 	mov	arg01, ##@LR__4694
15c44     CC 24 B0 FD | 	call	#_hg010b_spin2_write
15c48     02 1E 66 F0 | 	shl	local01, #2
15c4c     64 00 00 FF 
15c50     40 E5 05 F1 | 	add	objptr, ##51520
15c54     F2 1E 02 F1 | 	add	local01, objptr
15c58     0F 13 02 FB | 	rdlong	arg01, local01
15c5c     64 00 00 FF 
15c60     40 E5 85 F1 | 	sub	objptr, ##51520
15c64                 | ' 
15c64                 | ' write(text)
15c64     AC 24 B0 FD | 	call	#_hg010b_spin2_write
15c68                 | ' crlf
15c68     08 26 B0 FD | 	call	#_hg010b_spin2_crlf
15c6c     A7 F0 03 F6 | 	mov	ptra, fp
15c70     B2 00 A0 FD | 	call	#popregs_
15c74                 | _printerror_ret
15c74     2D 00 64 FD | 	ret
15c78                 | 
15c78                 | ' 
15c78                 | ' '' ------------------------------- Hardware start/stop/initialization 
15c78                 | ' 
15c78                 | ' sub startpsram
15c78                 | _startpsram
15c78     00 12 06 F6 | 	mov	arg01, #0
15c7c     0A 14 C6 F9 | 	decod	arg02, #10
15c80     0B 16 06 F6 | 	mov	arg03, #11
15c84     07 18 06 F6 | 	mov	arg04, #7
15c88     0B 00 00 FF 
15c8c     C0 E4 05 F1 | 	add	objptr, ##5824
15c90     8C 27 B0 FD | 	call	#_psram_spin2_startx
15c94     4B 00 00 FF 
15c98     0C E4 05 F1 | 	add	objptr, ##38412
15c9c     F2 FA 61 FC | 	wrlong	result1, objptr
15ca0                 | '     return $7FF00 + cog*12
15ca0     0C E4 05 F1 | 	add	objptr, #12
15ca4     FF 03 80 FF 
15ca8     F2 00 6A FC | 	wrlong	##524032, objptr
15cac     56 00 00 FF 
15cb0     D8 E4 85 F1 | 	sub	objptr, ##44248
15cb4                 | _startpsram_ret
15cb4     2D 00 64 FD | 	ret
15cb8                 | 
15cb8                 | ' 
15cb8                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
15cb8                 | _startvideo
15cb8     01 4A 05 F6 | 	mov	COUNT_, #1
15cbc     A8 00 A0 FD | 	call	#pushregs_
15cc0     56 00 00 FF 
15cc4     D8 E4 05 F1 | 	add	objptr, ##44248
15cc8     F2 18 02 FB | 	rdlong	arg04, objptr
15ccc     56 00 00 FF 
15cd0     D8 E4 85 F1 | 	sub	objptr, ##44248
15cd4     0A 13 02 F6 | 	mov	arg01, arg02
15cd8     0C 15 02 F6 | 	mov	arg02, arg04
15cdc     54 0F B0 FD | 	call	#_hg010b_spin2_start
15ce0     56 00 00 FF 
15ce4     C4 E4 05 F1 | 	add	objptr, ##44228
15ce8     F2 FA 61 FC | 	wrlong	result1, objptr
15cec                 | ' 
15cec                 | ' videocog=v.start(pin,mbox)
15cec                 | ' 
15cec                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
15cec     00 1E 06 F6 | 	mov	local01, #0
15cf0     4B 00 00 FF 
15cf4     04 E4 85 F1 | 	sub	objptr, ##38404
15cf8                 | LR__1680
15cf8     0F 13 02 F6 | 	mov	arg01, local01
15cfc     00 28 00 FF 
15d00     00 14 06 F6 | 	mov	arg02, ##5242880
15d04     70 2B B0 FD | 	call	#_psram_spin2_setQos
15d08     01 1E 06 F1 | 	add	local01, #1
15d0c     08 1E 56 F2 | 	cmps	local01, #8 wc
15d10     E4 FF 9F CD |  if_b	jmp	#LR__1680
15d14     4B 00 00 FF 
15d18     04 E4 05 F1 | 	add	objptr, ##38404
15d1c     F2 12 02 FB | 	rdlong	arg01, objptr
15d20     7A 00 02 FF 
15d24     00 14 06 F6 | 	mov	arg02, ##67171328
15d28     4B 00 00 FF 
15d2c     04 E4 85 F1 | 	sub	objptr, ##38404
15d30     44 2B B0 FD | 	call	#_psram_spin2_setQos
15d34     0B 00 00 FF 
15d38     C0 E4 85 F1 | 	sub	objptr, ##5824
15d3c                 | ' psram.setQoS(videocog, $0400f400) 
15d3c                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
15d3c     F2 14 02 F6 | 	mov	arg02, objptr
15d40     00 10 03 FF 
15d44     00 14 46 F5 | 	or	arg02, ##102760448
15d48     00 16 06 F6 | 	mov	arg03, #0
15d4c     00 18 06 F6 | 	mov	arg04, #0
15d50     00 12 06 F6 | 	mov	arg01, #0
15d54     EC 3E B0 FD | 	call	#__system___basic_open
15d58                 | ' return videocog
15d58     56 00 00 FF 
15d5c     C4 E4 05 F1 | 	add	objptr, ##44228
15d60     F2 FA 01 FB | 	rdlong	result1, objptr
15d64     56 00 00 FF 
15d68     C4 E4 85 F1 | 	sub	objptr, ##44228
15d6c     A7 F0 03 F6 | 	mov	ptra, fp
15d70     B2 00 A0 FD | 	call	#popregs_
15d74                 | _startvideo_ret
15d74     2D 00 64 FD | 	ret
15d78                 | 
15d78                 | ' 
15d78                 | ' function pspeek(adr as ulong) as ubyte
15d78                 | _pspeek
15d78     00 4A 05 F6 | 	mov	COUNT_, #0
15d7c     A8 00 A0 FD | 	call	#pushregs_
15d80     0C F0 07 F1 | 	add	ptra, #12
15d84     04 4E 05 F1 | 	add	fp, #4
15d88     A7 12 62 FC | 	wrlong	arg01, fp
15d8c     04 4E 05 F1 | 	add	fp, #4
15d90     A7 12 02 F6 | 	mov	arg01, fp
15d94     04 4E 85 F1 | 	sub	fp, #4
15d98     A7 14 02 FB | 	rdlong	arg02, fp
15d9c     04 4E 85 F1 | 	sub	fp, #4
15da0     01 16 06 F6 | 	mov	arg03, #1
15da4     0B 00 00 FF 
15da8     C0 E4 05 F1 | 	add	objptr, ##5824
15dac     9C 28 B0 FD | 	call	#_psram_spin2_read1
15db0     0B 00 00 FF 
15db4     C0 E4 85 F1 | 	sub	objptr, ##5824
15db8                 | ' psram.read1(varptr(res),adr,1)
15db8                 | ' return res
15db8     08 4E 05 F1 | 	add	fp, #8
15dbc     A7 FA C1 FA | 	rdbyte	result1, fp
15dc0     08 4E 85 F1 | 	sub	fp, #8
15dc4     A7 F0 03 F6 | 	mov	ptra, fp
15dc8     B2 00 A0 FD | 	call	#popregs_
15dcc                 | _pspeek_ret
15dcc     2D 00 64 FD | 	ret
15dd0                 | 
15dd0                 | ' 
15dd0                 | ' function pslpeek(adr as ulong) as ulong
15dd0                 | _pslpeek
15dd0     00 4A 05 F6 | 	mov	COUNT_, #0
15dd4     A8 00 A0 FD | 	call	#pushregs_
15dd8     0C F0 07 F1 | 	add	ptra, #12
15ddc     04 4E 05 F1 | 	add	fp, #4
15de0     A7 12 62 FC | 	wrlong	arg01, fp
15de4     04 4E 05 F1 | 	add	fp, #4
15de8     A7 12 02 F6 | 	mov	arg01, fp
15dec     04 4E 85 F1 | 	sub	fp, #4
15df0     A7 14 02 FB | 	rdlong	arg02, fp
15df4     04 4E 85 F1 | 	sub	fp, #4
15df8     04 16 06 F6 | 	mov	arg03, #4
15dfc     0B 00 00 FF 
15e00     C0 E4 05 F1 | 	add	objptr, ##5824
15e04     44 28 B0 FD | 	call	#_psram_spin2_read1
15e08     0B 00 00 FF 
15e0c     C0 E4 85 F1 | 	sub	objptr, ##5824
15e10                 | ' psram.read1(varptr(res),adr,4)
15e10                 | ' return res
15e10     08 4E 05 F1 | 	add	fp, #8
15e14     A7 FA 01 FB | 	rdlong	result1, fp
15e18     08 4E 85 F1 | 	sub	fp, #8
15e1c     A7 F0 03 F6 | 	mov	ptra, fp
15e20     B2 00 A0 FD | 	call	#popregs_
15e24                 | _pslpeek_ret
15e24     2D 00 64 FD | 	ret
15e28                 | 
15e28                 | ' 
15e28                 | ' '' ------------------------------- USB keyboard scan to char translator
15e28                 | ' 
15e28                 | ' function scantochar(key)
15e28                 | _scantochar
15e28                 | ' 
15e28                 | ' select case (key shr 8) and 255
15e28     09 01 02 F6 | 	mov	_var01, arg01
15e2c     08 00 C6 F0 | 	sar	_var01, #8
15e30     FF 00 0E F5 | 	and	_var01, #255 wz
15e34     24 00 90 AD |  if_e	jmp	#LR__1690
15e38     02 00 0E F2 | 	cmp	_var01, #2 wz
15e3c     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
15e40     30 00 90 AD |  if_e	jmp	#LR__1691
15e44     40 00 0E F2 | 	cmp	_var01, #64 wz
15e48     44 00 90 AD |  if_e	jmp	#LR__1692
15e4c     42 00 0E F2 | 	cmp	_var01, #66 wz
15e50     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
15e54     70 00 90 5D |  if_ne	jmp	#LR__1694
15e58     50 00 90 FD | 	jmp	#LR__1693
15e5c                 | LR__1690
15e5c     09 FB 01 F6 | 	mov	result1, arg01
15e60     7F FA 05 F5 | 	and	result1, #127
15e64     02 FA 65 F0 | 	shl	result1, #2
15e68     F5 FA 01 F1 | 	add	result1, ptr__dat__
15e6c     FD FA C1 FA | 	rdbyte	result1, result1
15e70     54 00 90 FD | 	jmp	#_scantochar_ret
15e74                 | LR__1691
15e74     09 FB 01 F6 | 	mov	result1, arg01
15e78     7F FA 05 F5 | 	and	result1, #127
15e7c     02 FA 65 F0 | 	shl	result1, #2
15e80     01 FA 05 F1 | 	add	result1, #1
15e84     F5 FA 01 F1 | 	add	result1, ptr__dat__
15e88     FD FA C1 FA | 	rdbyte	result1, result1
15e8c     38 00 90 FD | 	jmp	#_scantochar_ret
15e90                 | LR__1692
15e90     09 FB 01 F6 | 	mov	result1, arg01
15e94     7F FA 05 F5 | 	and	result1, #127
15e98     02 FA 65 F0 | 	shl	result1, #2
15e9c     02 FA 05 F1 | 	add	result1, #2
15ea0     F5 FA 01 F1 | 	add	result1, ptr__dat__
15ea4     FD FA C1 FA | 	rdbyte	result1, result1
15ea8     1C 00 90 FD | 	jmp	#_scantochar_ret
15eac                 | LR__1693
15eac     09 FB 01 F6 | 	mov	result1, arg01
15eb0     7F FA 05 F5 | 	and	result1, #127
15eb4     02 FA 65 F0 | 	shl	result1, #2
15eb8     03 FA 05 F1 | 	add	result1, #3
15ebc     F5 FA 01 F1 | 	add	result1, ptr__dat__
15ec0     FD FA C1 FA | 	rdbyte	result1, result1
15ec4     00 00 90 FD | 	jmp	#_scantochar_ret
15ec8                 | LR__1694
15ec8                 | _scantochar_ret
15ec8     2D 00 64 FD | 	ret
15ecc                 | 
15ecc                 | _program
15ecc     0B 4A 05 F6 | 	mov	COUNT_, #11
15ed0     A8 00 A0 FD | 	call	#pushregs_
15ed4     A0 FD BF FD | 	call	#_startpsram
15ed8     40 12 06 F6 | 	mov	arg01, #64
15edc     00 14 06 F6 | 	mov	arg02, #0
15ee0     00 16 06 F6 | 	mov	arg03, #0
15ee4     D0 FD BF FD | 	call	#_startvideo
15ee8     00 12 06 F6 | 	mov	arg01, #0
15eec     00 14 06 F6 | 	mov	arg02, #0
15ef0     00 16 06 F6 | 	mov	arg03, #0
15ef4     0B 00 00 FF 
15ef8     C0 E4 05 F1 | 	add	objptr, ##5824
15efc     8C 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
15f00     FE 1C 02 F6 | 	mov	arg06, result2
15f04     4B 00 00 FF 
15f08     00 E4 05 F1 | 	add	objptr, ##38400
15f0c     F2 FA 61 FC | 	wrlong	result1, objptr
15f10     14 E4 05 F1 | 	add	objptr, #20
15f14     F2 1C 62 FC | 	wrlong	arg06, objptr
15f18     56 00 00 FF 
15f1c     D4 E4 85 F1 | 	sub	objptr, ##44244
15f20     32 12 06 F6 | 	mov	arg01, #50
15f24     68 35 B0 FD | 	call	#__system___waitms
15f28     56 00 00 FF 
15f2c     D4 E4 05 F1 | 	add	objptr, ##44244
15f30     F2 12 02 FB | 	rdlong	arg01, objptr
15f34     56 00 00 FF 
15f38     D4 E4 85 F1 | 	sub	objptr, ##44244
15f3c     14 12 06 F1 | 	add	arg01, #20
15f40     20 00 80 FF 
15f44     09 01 58 FC | 	wrword	##16384, arg01
15f48     34 2A B0 FD | 	call	#_usbnew_spin2_start
15f4c     56 00 00 FF 
15f50     C8 E4 05 F1 | 	add	objptr, ##44232
15f54     F2 FA 61 FC | 	wrlong	result1, objptr
15f58                 | '   mouse_limits[0] := xlim
15f58     0F 00 00 FF 
15f5c     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
15f60     01 00 80 FF 
15f64     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
15f68                 | '   mouse_limits[1] := ylim
15f68     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
15f6c     01 00 80 FF 
15f70     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
15f74     55 00 00 FF 
15f78     BB E5 85 F1 | 	sub	objptr, ##43963
15f7c     F2 12 02 F6 | 	mov	arg01, objptr
15f80     0D E5 85 F1 | 	sub	objptr, #269
15f84     C4 12 06 F1 | 	add	arg01, #196
15f88                 | '   mouse_outptr := ptr
15f88     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
15f8c     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
15f90     0F 00 00 FF 
15f94     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
15f98     0E 00 00 FF 
15f9c     9A EA 05 F1 | 	add	ptr__dat__, ##7322
15fa0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15fa4     0E 00 00 FF 
15fa8     9A EA 85 F1 | 	sub	ptr__dat__, ##7322
15fac     10 12 06 F6 | 	mov	arg01, #16
15fb0     78 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
15fb4     10 12 06 F6 | 	mov	arg01, #16
15fb8     20 14 06 F6 | 	mov	arg02, #32
15fbc     20 16 06 F6 | 	mov	arg03, #32
15fc0     DC 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
15fc4     09 12 C6 F9 | 	decod	arg01, #9
15fc8     20 15 06 F6 | 	mov	arg02, #288
15fcc     6C 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
15fd0     F2 1C 02 F6 | 	mov	arg06, objptr
15fd4     79 00 00 FF 
15fd8     AC E4 05 F1 | 	add	objptr, ##62124
15fdc     F2 1A 02 F6 | 	mov	arg05, objptr
15fe0     0D 1D 62 FC | 	wrlong	arg06, arg05
15fe4     04 1A 06 F1 | 	add	arg05, #4
15fe8     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
15fec     EF 14 02 F6 | 	mov	arg02, entryptr__
15ff0     F2 1E 02 F6 | 	mov	local01, objptr
15ff4     1E FA 05 F6 | 	mov	result1, #30
15ff8     28 1E 62 FD | 	setq	local01
15ffc     0A FB F1 FC | 	coginit	result1, arg02 wc
16000     01 FA 65 C6 |  if_b	neg	result1, #1
16004     04 E4 85 F1 | 	sub	objptr, #4
16008     F2 FA 61 FC | 	wrlong	result1, objptr
1600c     01 00 00 FF 
16010     90 E4 05 F1 | 	add	objptr, ##656
16014     F2 00 68 FC | 	wrlong	#0, objptr
16018     24 00 00 FF 
1601c     40 E4 85 F1 | 	sub	objptr, ##18496
16020     F2 04 68 FC | 	wrlong	#2, objptr
16024     04 E4 05 F1 | 	add	objptr, #4
16028     F2 26 69 FC | 	wrlong	#147, objptr
1602c     04 E4 05 F1 | 	add	objptr, #4
16030     F2 34 69 FC | 	wrlong	#154, objptr
16034     04 E4 05 F1 | 	add	objptr, #4
16038     F2 08 68 FC | 	wrlong	#4, objptr
1603c     04 E4 85 F1 | 	sub	objptr, #4
16040     F2 1C 02 FB | 	rdlong	arg06, objptr
16044     14 E4 85 F1 | 	sub	objptr, #20
16048     F2 1C 62 FC | 	wrlong	arg06, objptr
1604c     04 E4 05 F1 | 	add	objptr, #4
16050     F2 00 68 FC | 	wrlong	#0, objptr
16054     04 E4 05 F1 | 	add	objptr, #4
16058     F2 00 68 FC | 	wrlong	#0, objptr
1605c     22 00 00 FF 
16060     B0 E5 05 F1 | 	add	objptr, ##17840
16064     F2 02 68 FC | 	wrlong	#1, objptr
16068     01 00 00 FF 
1606c     9C E4 05 F1 | 	add	objptr, ##668
16070     F2 00 68 FC | 	wrlong	#0, objptr
16074     01 00 00 FF 
16078     00 EA 05 F1 | 	add	ptr__dat__, ##512
1607c     08 E4 05 F1 | 	add	objptr, #8
16080     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
16084     04 E4 85 F1 | 	sub	objptr, #4
16088     03 00 80 FF 
1608c     F2 28 69 FC | 	wrlong	##1684, objptr
16090     16 00 00 FF 
16094     1C E4 85 F1 | 	sub	objptr, ##11292
16098     F2 18 68 FC | 	wrlong	#12, objptr
1609c     64 00 00 FF 
160a0     28 E5 85 F1 | 	sub	objptr, ##51496
160a4     01 00 00 FF 
160a8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
160ac     18 EA BF FD | 	call	#_init_commands
160b0     30 F8 BF FD | 	call	#_init_error_strings
160b4     08 F7 BF FD | 	call	#_init_audio
160b8     48 66 BF FD | 	call	#_do_new
160bc     56 00 00 FF 
160c0     00 E5 05 F1 | 	add	objptr, ##44288
160c4     F2 12 02 FB | 	rdlong	arg01, objptr
160c8     04 E4 85 F1 | 	sub	objptr, #4
160cc     F2 14 02 FB | 	rdlong	arg02, objptr
160d0     56 00 00 FF 
160d4     FC E4 85 F1 | 	sub	objptr, ##44284
160d8     7C 1D B0 FD | 	call	#_hg010b_spin2_cls
160dc     56 00 00 FF 
160e0     04 E5 05 F1 | 	add	objptr, ##44292
160e4     F2 12 02 FB | 	rdlong	arg01, objptr
160e8     56 00 00 FF 
160ec     04 E5 85 F1 | 	sub	objptr, ##44292
160f0     7C 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
160f4                 | ' 
160f4                 | ' leading_spaces:=amount
160f4     01 00 00 FF 
160f8     B2 E4 05 F1 | 	add	objptr, ##690
160fc     F2 04 68 FC | 	wrlong	#2, objptr
16100     01 00 00 FF 
16104     B2 E4 85 F1 | 	sub	objptr, ##690
16108     49 01 00 FF 
1610c     31 20 06 F6 | 	mov	local02, ##@LR__4695
16110     3D 12 06 F6 | 	mov	arg01, #61
16114     3C 14 06 F6 | 	mov	arg02, #60
16118     3B 16 06 F6 | 	mov	arg03, #59
1611c     3A 18 06 F6 | 	mov	arg04, #58
16120     14 7A B0 FD | 	call	#__system___vfs_open_sdcardx
16124     FD 14 02 F6 | 	mov	arg02, result1
16128     10 13 02 F6 | 	mov	arg01, local02
1612c     38 34 B0 FD | 	call	#__system___mount
16130     49 01 00 FF 
16134     35 12 06 F6 | 	mov	arg01, ##@LR__4696
16138     EC 36 B0 FD | 	call	#__system___chdir
1613c     49 01 00 FF 
16140     3D 20 06 F6 | 	mov	local02, ##@LR__4697
16144     71 00 00 FF 
16148     58 E5 05 F1 | 	add	objptr, ##58200
1614c     F2 20 62 FC | 	wrlong	local02, objptr
16150     1B 00 00 FF 
16154     60 E4 85 F1 | 	sub	objptr, ##13920
16158     F2 12 02 FB | 	rdlong	arg01, objptr
1615c     56 00 00 FF 
16160     F8 E4 85 F1 | 	sub	objptr, ##44280
16164     01 12 66 F0 | 	shl	arg01, #1
16168     01 14 06 F6 | 	mov	arg02, #1
1616c     40 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
16170                 | ' 
16170                 | ' init_commands
16170                 | ' init_error_strings
16170                 | ' init_audio
16170                 | ' do_new
16170                 | ' 
16170                 | ' 
16170                 | ' cls(ink, paper)
16170                 | ' v.setfontfamily(font) 				' use ST Mono font
16170                 | ' v.setleadingspaces(2)
16170                 | ' mount "/sd", _vfs_open_sdcard()
16170                 | ' chdir "/sd/bas"
16170                 | ' 
16170                 | ' currentdir$="/sd/bas"
16170                 | ' 
16170                 | ' position 2*editor_spaces,1 : print ver$
16170     00 12 06 F6 | 	mov	arg01, #0
16174     28 89 B0 FD | 	call	#__system___getiolock_0425
16178     FD 12 02 F6 | 	mov	arg01, result1
1617c     1C 30 B0 FD | 	call	#__system___lockmem
16180     10 00 00 FF 
16184     10 EB 05 F1 | 	add	ptr__dat__, ##8464
16188     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1618c     10 00 00 FF 
16190     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
16194     00 12 06 F6 | 	mov	arg01, #0
16198     00 16 06 F6 | 	mov	arg03, #0
1619c     F0 3C B0 FD | 	call	#__system___basic_print_string
161a0     00 12 06 F6 | 	mov	arg01, #0
161a4     0A 14 06 F6 | 	mov	arg02, #10
161a8     00 16 06 F6 | 	mov	arg03, #0
161ac     88 3C B0 FD | 	call	#__system___basic_print_char
161b0     00 12 06 F6 | 	mov	arg01, #0
161b4     E8 88 B0 FD | 	call	#__system___getiolock_0425
161b8     FD 00 68 FC | 	wrlong	#0, result1
161bc     F2 12 02 FB | 	rdlong	arg01, objptr
161c0     00 14 06 F6 | 	mov	arg02, #0
161c4     0A 16 06 F6 | 	mov	arg03, #10
161c8     D8 51 B0 FD | 	call	#__system__Number_S
161cc     FD 12 02 F6 | 	mov	arg01, result1
161d0     49 01 00 FF 
161d4     45 14 06 F6 | 	mov	arg02, ##@LR__4698
161d8     1C 30 B0 FD | 	call	#__system___string_concat
161dc     FD 20 02 F6 | 	mov	local02, result1
161e0     79 00 00 FF 
161e4     A0 E4 05 F1 | 	add	objptr, ##62112
161e8     F2 20 62 FC | 	wrlong	local02, objptr
161ec     79 00 00 FF 
161f0     A0 E4 85 F1 | 	sub	objptr, ##62112
161f4                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
161f4     00 12 06 F6 | 	mov	arg01, #0
161f8     A4 88 B0 FD | 	call	#__system___getiolock_0425
161fc     FD 12 02 F6 | 	mov	arg01, result1
16200     98 2F B0 FD | 	call	#__system___lockmem
16204     79 00 00 FF 
16208     A0 E4 05 F1 | 	add	objptr, ##62112
1620c     F2 14 02 FB | 	rdlong	arg02, objptr
16210     79 00 00 FF 
16214     A0 E4 85 F1 | 	sub	objptr, ##62112
16218     00 12 06 F6 | 	mov	arg01, #0
1621c     00 16 06 F6 | 	mov	arg03, #0
16220     6C 3C B0 FD | 	call	#__system___basic_print_string
16224     00 12 06 F6 | 	mov	arg01, #0
16228     0A 14 06 F6 | 	mov	arg02, #10
1622c     00 16 06 F6 | 	mov	arg03, #0
16230     04 3C B0 FD | 	call	#__system___basic_print_char
16234     00 12 06 F6 | 	mov	arg01, #0
16238     64 88 B0 FD | 	call	#__system___getiolock_0425
1623c     FD 00 68 FC | 	wrlong	#0, result1
16240     56 00 00 FF 
16244     F8 E4 05 F1 | 	add	objptr, ##44280
16248     F2 12 02 FB | 	rdlong	arg01, objptr
1624c     56 00 00 FF 
16250     F8 E4 85 F1 | 	sub	objptr, ##44280
16254     01 12 66 F0 | 	shl	arg01, #1
16258     04 14 06 F6 | 	mov	arg02, #4
1625c     50 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
16260                 | ' position 2*editor_spaces,4 : print "Ready"
16260     00 12 06 F6 | 	mov	arg01, #0
16264     38 88 B0 FD | 	call	#__system___getiolock_0425
16268     FD 12 02 F6 | 	mov	arg01, result1
1626c     2C 2F B0 FD | 	call	#__system___lockmem
16270     49 01 00 FF 
16274     57 14 06 F6 | 	mov	arg02, ##@LR__4699
16278     00 12 06 F6 | 	mov	arg01, #0
1627c     00 16 06 F6 | 	mov	arg03, #0
16280     0C 3C B0 FD | 	call	#__system___basic_print_string
16284     FD 22 02 F6 | 	mov	local03, result1
16288     00 12 06 F6 | 	mov	arg01, #0
1628c     0A 14 06 F6 | 	mov	arg02, #10
16290     00 16 06 F6 | 	mov	arg03, #0
16294     A0 3B B0 FD | 	call	#__system___basic_print_char
16298     01 24 06 F6 | 	mov	local04, #1
1629c     00 12 06 F6 | 	mov	arg01, #0
162a0     FC 87 B0 FD | 	call	#__system___getiolock_0425
162a4     FD 00 68 FC | 	wrlong	#0, result1
162a8     00 26 06 F6 | 	mov	local05, #0
162ac     00 14 06 F6 | 	mov	arg02, #0
162b0     01 14 D6 F7 | 	test	arg02, #1 wc
162b4     5A 4C 64 FD | 	drvc	#38
162b8     01 14 D6 F7 | 	test	arg02, #1 wc
162bc     5A 4E 64 FD | 	drvc	#39
162c0                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
162c0                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
162c0                 | ' 
162c0                 | ' 'paula.play(0,@samplebuf(0,0),88200,16484,0,2048)
162c0                 | ' 
162c0                 | ' 'base2:=@channel1[0]+64*channel
162c0                 | ' 'long[base2+8]:=sample+$C0000000 
162c0                 | ' 'long[base2+12]:= len
162c0                 | ' 'if loop >=0 
162c0                 | ' '  long[base2+16]:= loop
162c0                 | ' 'else
162c0                 | ' '  long[base2+16]:= len+2
162c0                 | ' 'word[base2+20]:=vol
162c0                 | ' 'word[base2+24]:= 3546911/splfreq 
162c0                 | ' 'word[base2+26]:=256 ' todo: use skip to make accurate sample rate
162c0                 | ' 'long[base2+28]:=$40000000
162c0                 | ' 
162c0                 | ' 'lpoke base+8,varptr(samplebuf(0,0))+$C000_0000 
162c0                 | ' 'lpoke base+16,2048
162c0                 | ' 'lpoke base+12,0
162c0                 | ' 'dpoke base+20,16383
162c0                 | ' 'dpoke base+22,8192
162c0                 | ' 'dpoke base+24,40
162c0                 | ' 'dpoke base+26,1280 ' todo: use skip to make accurate sample rate
162c0                 | ' 'dpoke base+28,$4000_0000
162c0                 | ' 'lpoke base+32,0 
162c0                 | ' 'lpoke base+36, varptr(envbuf(0,0))
162c0                 | ' 'lpoke base+40,25600' speed
162c0                 | ' 'lpoke base+44,1023 'len
162c0                 | ' 
162c0                 | ' 'do: position 0,0 : print lpeek(base+32): loop 
162c0                 | ' '-------------------------------------------------------------------------------------------------------- 
162c0                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
162c0                 | ' '--------------------------------------------------------------------------------------------------------
162c0                 | ' 
162c0                 | ' do
162c0                 | LR__1700
162c0     01 12 06 F6 | 	mov	arg01, #1
162c4     20 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
162c8     10 27 B0 FD | 	call	#_usbnew_spin2_get_key
162cc     64 00 00 FF 
162d0     38 E5 05 F1 | 	add	objptr, ##51512
162d4     F2 FA 61 FC | 	wrlong	result1, objptr
162d8                 | '   return hkbd_led_rep
162d8     13 00 00 FF 
162dc     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
162e0     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
162e4     13 00 00 FF 
162e8     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
162ec     16 00 00 FF 
162f0     20 E4 05 F1 | 	add	objptr, ##11296
162f4     F2 FA 61 FC | 	wrlong	result1, objptr
162f8                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
162f8     16 00 00 FF 
162fc     20 E4 85 F1 | 	sub	objptr, ##11296
16300     F2 20 02 FB | 	rdlong	local02, objptr
16304     64 00 00 FF 
16308     38 E5 85 F1 | 	sub	objptr, ##51512
1630c     01 20 16 F2 | 	cmp	local02, #1 wc
16310     BC 00 90 CD |  if_b	jmp	#LR__1701
16314     64 00 00 FF 
16318     38 E5 05 F1 | 	add	objptr, ##51512
1631c     F2 24 02 FB | 	rdlong	local04, objptr
16320     64 00 00 FF 
16324     38 E5 85 F1 | 	sub	objptr, ##51512
16328     12 23 02 F6 | 	mov	local03, local04
1632c     04 22 16 F2 | 	cmp	local03, #4 wc
16330     9C 00 90 3D |  if_ae	jmp	#LR__1701
16334     79 00 00 FF 
16338     A4 E4 05 F1 | 	add	objptr, ##62116
1633c     F2 1E 02 FB | 	rdlong	local01, objptr
16340     79 00 00 FF 
16344     A4 E4 85 F1 | 	sub	objptr, ##62116
16348     0F 27 02 F6 | 	mov	local05, local01
1634c     01 26 0E F2 | 	cmp	local05, #1 wz
16350     7C 00 90 5D |  if_ne	jmp	#LR__1701
16354     04 00 00 FF 
16358     94 EA 05 F1 | 	add	ptr__dat__, ##2196
1635c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
16360     04 00 00 FF 
16364     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
16368     56 00 00 FF 
1636c     44 22 06 F6 | 	mov	local03, ##44100
16370     0E 24 C6 F9 | 	decod	local04, #14
16374     00 26 06 F6 | 	mov	local05, #0
16378     03 00 00 FF 
1637c     DE 1E 06 F6 | 	mov	local01, ##1758
16380     07 12 06 F6 | 	mov	arg01, #7
16384     56 00 00 FF 
16388     44 16 06 F6 | 	mov	arg03, ##44100
1638c     0E 18 C6 F9 | 	decod	arg04, #14
16390     00 1A 06 F6 | 	mov	arg05, #0
16394     03 00 00 FF 
16398     DE 1C 06 F6 | 	mov	arg06, ##1758
1639c     0B 00 00 FF 
163a0     C0 E4 05 F1 | 	add	objptr, ##5824
163a4     BC 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
163a8     0B 00 00 FF 
163ac     C0 E4 85 F1 | 	sub	objptr, ##5824
163b0     0A 12 06 F6 | 	mov	arg01, #10
163b4     D8 30 B0 FD | 	call	#__system___waitms
163b8     07 12 06 F6 | 	mov	arg01, #7
163bc     0B 00 00 FF 
163c0     C0 E4 05 F1 | 	add	objptr, ##5824
163c4     EC 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
163c8     0B 00 00 FF 
163cc     C0 E4 85 F1 | 	sub	objptr, ##5824
163d0                 | LR__1701
163d0                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
163d0     64 00 00 FF 
163d4     38 E5 05 F1 | 	add	objptr, ##51512
163d8     F2 20 02 FB | 	rdlong	local02, objptr
163dc     64 00 00 FF 
163e0     38 E5 85 F1 | 	sub	objptr, ##51512
163e4     04 20 16 F2 | 	cmp	local02, #4 wc
163e8     80 00 90 CD |  if_b	jmp	#LR__1702
163ec     64 00 00 FF 
163f0     38 E5 05 F1 | 	add	objptr, ##51512
163f4     F2 24 02 FB | 	rdlong	local04, objptr
163f8     64 00 00 FF 
163fc     38 E5 85 F1 | 	sub	objptr, ##51512
16400     12 23 02 F6 | 	mov	local03, local04
16404     00 00 40 FF 
16408     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
1640c     64 00 00 CF 
16410     38 E5 05 C1 |  if_b	add	objptr, ##51512
16414     F2 1E 02 CB |  if_b	rdlong	local01, objptr
16418     64 00 00 CF 
1641c     38 E5 85 C1 |  if_b	sub	objptr, ##51512
16420     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
16424     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
16428     40 00 90 3D |  if_ae	jmp	#LR__1702
1642c     64 00 00 FF 
16430     38 E5 05 F1 | 	add	objptr, ##51512
16434     F2 20 02 FB | 	rdlong	local02, objptr
16438     04 E4 05 F1 | 	add	objptr, #4
1643c     F2 20 62 FC | 	wrlong	local02, objptr
16440     16 00 00 FF 
16444     20 E4 05 F1 | 	add	objptr, ##11296
16448     F2 02 68 FC | 	wrlong	#1, objptr
1644c     16 00 00 FF 
16450     20 E4 85 F1 | 	sub	objptr, ##11296
16454     F2 20 02 FB | 	rdlong	local02, objptr
16458     16 00 00 FF 
1645c     24 E4 05 F1 | 	add	objptr, ##11300
16460     F2 20 62 FC | 	wrlong	local02, objptr
16464     7A 00 00 FF 
16468     60 E5 85 F1 | 	sub	objptr, ##62816
1646c                 | LR__1702
1646c                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
1646c     64 00 00 FF 
16470     38 E5 05 F1 | 	add	objptr, ##51512
16474     F2 20 02 FB | 	rdlong	local02, objptr
16478     64 00 00 FF 
1647c     38 E5 85 F1 | 	sub	objptr, ##51512
16480     00 00 40 FF 
16484     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
16488     7A 00 00 3F 
1648c     64 E5 05 31 |  if_ae	add	objptr, ##62820
16490     F2 00 68 3C |  if_ae	wrlong	#0, objptr
16494     08 E4 85 31 |  if_ae	sub	objptr, #8
16498     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1649c     7A 00 00 3F 
164a0     5C E5 85 31 |  if_ae	sub	objptr, ##62812
164a4                 | ' if key=0 andalso rpt=1 then rptcnt+=1
164a4     64 00 00 FF 
164a8     38 E5 05 F1 | 	add	objptr, ##51512
164ac     F2 20 0A FB | 	rdlong	local02, objptr wz
164b0     64 00 00 FF 
164b4     38 E5 85 F1 | 	sub	objptr, ##51512
164b8     7A 00 00 AF 
164bc     5C E5 05 A1 |  if_e	add	objptr, ##62812
164c0     F2 24 02 AB |  if_e	rdlong	local04, objptr
164c4     7A 00 00 AF 
164c8     5C E5 85 A1 |  if_e	sub	objptr, ##62812
164cc     12 23 02 A6 |  if_e	mov	local03, local04
164d0     01 22 0E A2 |  if_e	cmp	local03, #1 wz
164d4     7A 00 00 AF 
164d8     64 E5 05 A1 |  if_e	add	objptr, ##62820
164dc     F2 20 02 AB |  if_e	rdlong	local02, objptr
164e0     01 20 06 A1 |  if_e	add	local02, #1
164e4     F2 20 62 AC |  if_e	wrlong	local02, objptr
164e8     7A 00 00 AF 
164ec     64 E5 85 A1 |  if_e	sub	objptr, ##62820
164f0                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
164f0     64 00 00 FF 
164f4     38 E5 05 F1 | 	add	objptr, ##51512
164f8     F2 20 02 FB | 	rdlong	local02, objptr
164fc     64 00 00 FF 
16500     38 E5 85 F1 | 	sub	objptr, ##51512
16504     00 00 40 FF 
16508     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
1650c     44 00 90 3D |  if_ae	jmp	#LR__1704
16510     7A 00 00 FF 
16514     64 E5 05 F1 | 	add	objptr, ##62820
16518     F2 20 02 FB | 	rdlong	local02, objptr
1651c     7A 00 00 FF 
16520     64 E5 85 F1 | 	sub	objptr, ##62820
16524     19 20 0E F2 | 	cmp	local02, #25 wz
16528     28 00 90 5D |  if_ne	jmp	#LR__1703
1652c     64 00 00 FF 
16530     3C E5 05 F1 | 	add	objptr, ##51516
16534     F2 20 02 FB | 	rdlong	local02, objptr
16538     16 00 00 FF 
1653c     24 E4 05 F1 | 	add	objptr, ##11300
16540     F2 20 62 FC | 	wrlong	local02, objptr
16544     04 E4 05 F1 | 	add	objptr, #4
16548     F2 2A 68 FC | 	wrlong	#21, objptr
1654c     7A 00 00 FF 
16550     64 E5 85 F1 | 	sub	objptr, ##62820
16554                 | LR__1703
16554                 | LR__1704
16554                 | ' 
16554                 | ' 
16554                 | ' if key3<>0 then
16554     7A 00 00 FF 
16558     60 E5 05 F1 | 	add	objptr, ##62816
1655c     F2 28 0A FB | 	rdlong	local06, objptr wz
16560     7A 00 00 FF 
16564     60 E5 85 F1 | 	sub	objptr, ##62816
16568     54 FD 9F AD |  if_e	jmp	#LR__1700
1656c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
1656c     79 00 00 FF 
16570     A4 E4 05 F1 | 	add	objptr, ##62116
16574     F2 20 02 FB | 	rdlong	local02, objptr
16578     79 00 00 FF 
1657c     A4 E4 85 F1 | 	sub	objptr, ##62116
16580     01 20 0E F2 | 	cmp	local02, #1 wz
16584     50 00 90 5D |  if_ne	jmp	#LR__1705
16588     7A 00 00 FF 
1658c     48 E5 05 F1 | 	add	objptr, ##62792
16590     F2 14 02 FB | 	rdlong	arg02, objptr
16594     56 00 00 FF 
16598     44 22 06 F6 | 	mov	local03, ##44100
1659c     0E 24 C6 F9 | 	decod	local04, #14
165a0     04 E4 85 F1 | 	sub	objptr, #4
165a4     F2 26 02 FB | 	rdlong	local05, objptr
165a8     01 1E 66 F6 | 	neg	local01, #1
165ac     07 12 06 F6 | 	mov	arg01, #7
165b0     56 00 00 FF 
165b4     44 16 06 F6 | 	mov	arg03, ##44100
165b8     0E 18 C6 F9 | 	decod	arg04, #14
165bc     13 1B 02 F6 | 	mov	arg05, local05
165c0     01 1C 66 F6 | 	neg	arg06, #1
165c4     6F 00 00 FF 
165c8     84 E4 85 F1 | 	sub	objptr, ##56964
165cc     94 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
165d0     0B 00 00 FF 
165d4     C0 E4 85 F1 | 	sub	objptr, ##5824
165d8                 | LR__1705
165d8     7A 00 00 FF 
165dc     60 E5 05 F1 | 	add	objptr, ##62816
165e0     F2 12 02 FB | 	rdlong	arg01, objptr
165e4     7A 00 00 FF 
165e8     60 E5 85 F1 | 	sub	objptr, ##62816
165ec     38 F8 BF FD | 	call	#_scantochar
165f0     7A 00 00 FF 
165f4     68 E5 05 F1 | 	add	objptr, ##62824
165f8     F2 FA 61 FC | 	wrlong	result1, objptr
165fc                 | '   if leds and 2 = 2 then 
165fc     10 E4 85 F1 | 	sub	objptr, #16
16600     F2 20 0A FB | 	rdlong	local02, objptr wz
16604     7A 00 00 FF 
16608     58 E5 85 F1 | 	sub	objptr, ##62808
1660c     68 01 90 AD |  if_e	jmp	#LR__1713
16610                 | '     if key4>96 andalso key4<123 then
16610     7A 00 00 FF 
16614     68 E5 05 F1 | 	add	objptr, ##62824
16618     F2 20 02 FB | 	rdlong	local02, objptr
1661c     7A 00 00 FF 
16620     68 E5 85 F1 | 	sub	objptr, ##62824
16624     61 20 56 F2 | 	cmps	local02, #97 wc
16628     40 00 90 CD |  if_b	jmp	#LR__1706
1662c     7A 00 00 FF 
16630     68 E5 05 F1 | 	add	objptr, ##62824
16634     F2 24 02 FB | 	rdlong	local04, objptr
16638     7A 00 00 FF 
1663c     68 E5 85 F1 | 	sub	objptr, ##62824
16640     12 23 02 F6 | 	mov	local03, local04
16644     7B 22 56 F2 | 	cmps	local03, #123 wc
16648     20 00 90 3D |  if_ae	jmp	#LR__1706
1664c     7A 00 00 FF 
16650     68 E5 05 F1 | 	add	objptr, ##62824
16654     F2 20 02 FB | 	rdlong	local02, objptr
16658     20 20 86 F1 | 	sub	local02, #32
1665c     F2 20 62 FC | 	wrlong	local02, objptr
16660     7A 00 00 FF 
16664     68 E5 85 F1 | 	sub	objptr, ##62824
16668     0C 01 90 FD | 	jmp	#LR__1712
1666c                 | LR__1706
1666c     7A 00 00 FF 
16670     68 E5 05 F1 | 	add	objptr, ##62824
16674     F2 20 02 FB | 	rdlong	local02, objptr
16678     7A 00 00 FF 
1667c     68 E5 85 F1 | 	sub	objptr, ##62824
16680     41 20 56 F2 | 	cmps	local02, #65 wc
16684     40 00 90 CD |  if_b	jmp	#LR__1707
16688     7A 00 00 FF 
1668c     68 E5 05 F1 | 	add	objptr, ##62824
16690     F2 24 02 FB | 	rdlong	local04, objptr
16694     7A 00 00 FF 
16698     68 E5 85 F1 | 	sub	objptr, ##62824
1669c     12 23 02 F6 | 	mov	local03, local04
166a0     5B 22 56 F2 | 	cmps	local03, #91 wc
166a4     20 00 90 3D |  if_ae	jmp	#LR__1707
166a8     7A 00 00 FF 
166ac     68 E5 05 F1 | 	add	objptr, ##62824
166b0     F2 20 02 FB | 	rdlong	local02, objptr
166b4     20 20 06 F1 | 	add	local02, #32
166b8     F2 20 62 FC | 	wrlong	local02, objptr
166bc     7A 00 00 FF 
166c0     68 E5 85 F1 | 	sub	objptr, ##62824
166c4     B0 00 90 FD | 	jmp	#LR__1711
166c8                 | LR__1707
166c8     7A 00 00 FF 
166cc     68 E5 05 F1 | 	add	objptr, ##62824
166d0     F2 20 02 FB | 	rdlong	local02, objptr
166d4     7A 00 00 FF 
166d8     68 E5 85 F1 | 	sub	objptr, ##62824
166dc     17 20 56 F2 | 	cmps	local02, #23 wc
166e0     40 00 90 CD |  if_b	jmp	#LR__1708
166e4     7A 00 00 FF 
166e8     68 E5 05 F1 | 	add	objptr, ##62824
166ec     F2 24 02 FB | 	rdlong	local04, objptr
166f0     7A 00 00 FF 
166f4     68 E5 85 F1 | 	sub	objptr, ##62824
166f8     12 23 02 F6 | 	mov	local03, local04
166fc     20 22 56 F2 | 	cmps	local03, #32 wc
16700     20 00 90 3D |  if_ae	jmp	#LR__1708
16704     7A 00 00 FF 
16708     68 E5 05 F1 | 	add	objptr, ##62824
1670c     F2 20 02 FB | 	rdlong	local02, objptr
16710     09 20 86 F1 | 	sub	local02, #9
16714     F2 20 62 FC | 	wrlong	local02, objptr
16718     7A 00 00 FF 
1671c     68 E5 85 F1 | 	sub	objptr, ##62824
16720     54 00 90 FD | 	jmp	#LR__1710
16724                 | LR__1708
16724     7A 00 00 FF 
16728     68 E5 05 F1 | 	add	objptr, ##62824
1672c     F2 20 02 FB | 	rdlong	local02, objptr
16730     7A 00 00 FF 
16734     68 E5 85 F1 | 	sub	objptr, ##62824
16738     0E 20 56 F2 | 	cmps	local02, #14 wc
1673c     38 00 90 CD |  if_b	jmp	#LR__1709
16740     7A 00 00 FF 
16744     68 E5 05 F1 | 	add	objptr, ##62824
16748     F2 24 02 FB | 	rdlong	local04, objptr
1674c     7A 00 00 FF 
16750     68 E5 85 F1 | 	sub	objptr, ##62824
16754     12 23 02 F6 | 	mov	local03, local04
16758     17 22 56 F2 | 	cmps	local03, #23 wc
1675c     7A 00 00 CF 
16760     68 E5 05 C1 |  if_b	add	objptr, ##62824
16764     F2 20 02 CB |  if_b	rdlong	local02, objptr
16768     27 20 06 C1 |  if_b	add	local02, #39
1676c     F2 20 62 CC |  if_b	wrlong	local02, objptr
16770     7A 00 00 CF 
16774     68 E5 85 C1 |  if_b	sub	objptr, ##62824
16778                 | LR__1709
16778                 | LR__1710
16778                 | LR__1711
16778                 | LR__1712
16778                 | LR__1713
16778                 | '  
16778                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
16778     7A 00 00 FF 
1677c     68 E5 05 F1 | 	add	objptr, ##62824
16780     F2 20 02 FB | 	rdlong	local02, objptr
16784     7A 00 00 FF 
16788     68 E5 85 F1 | 	sub	objptr, ##62824
1678c     01 20 56 F2 | 	cmps	local02, #1 wc
16790     90 00 90 CD |  if_b	jmp	#LR__1714
16794     7A 00 00 FF 
16798     68 E5 05 F1 | 	add	objptr, ##62824
1679c     F2 24 02 FB | 	rdlong	local04, objptr
167a0     7A 00 00 FF 
167a4     68 E5 85 F1 | 	sub	objptr, ##62824
167a8     12 23 02 F6 | 	mov	local03, local04
167ac     7F 22 56 F2 | 	cmps	local03, #127 wc
167b0     38 E4 05 C1 |  if_b	add	objptr, #56
167b4     F2 1E E2 CA |  if_b	rdword	local01, objptr
167b8     38 E4 85 C1 |  if_b	sub	objptr, #56
167bc     0F 27 32 C9 |  if_b	getword	local05, local01, #0
167c0     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
167c4     5C 00 90 3D |  if_ae	jmp	#LR__1714
167c8     7A 00 00 FF 
167cc     68 E5 05 F1 | 	add	objptr, ##62824
167d0     F2 12 02 FB | 	rdlong	arg01, objptr
167d4     7A 00 00 FF 
167d8     68 E5 85 F1 | 	sub	objptr, ##62824
167dc     90 4B B0 FD | 	call	#__system__Chr_S
167e0     FD 2A 02 F6 | 	mov	local07, result1
167e4     56 00 00 FF 
167e8     E0 E4 05 F1 | 	add	objptr, ##44256
167ec     F2 12 02 FB | 	rdlong	arg01, objptr
167f0     56 00 00 FF 
167f4     E0 E4 85 F1 | 	sub	objptr, ##44256
167f8     15 15 02 F6 | 	mov	arg02, local07
167fc     F8 29 B0 FD | 	call	#__system___string_concat
16800     56 00 00 FF 
16804     E0 E4 05 F1 | 	add	objptr, ##44256
16808     F2 FA 61 FC | 	wrlong	result1, objptr
1680c     24 00 00 FF 
16810     88 E4 05 F1 | 	add	objptr, ##18568
16814     F2 12 02 FB | 	rdlong	arg01, objptr
16818     7A 00 00 FF 
1681c     68 E5 85 F1 | 	sub	objptr, ##62824
16820     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
16824                 | LR__1714
16824                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(7) 'end of line reached
16824     7A 00 00 FF 
16828     68 E5 05 F1 | 	add	objptr, ##62824
1682c     F2 20 02 FB | 	rdlong	local02, objptr
16830     7A 00 00 FF 
16834     68 E5 85 F1 | 	sub	objptr, ##62824
16838     01 20 56 F2 | 	cmps	local02, #1 wc
1683c     D0 00 90 CD |  if_b	jmp	#LR__1715
16840     7A 00 00 FF 
16844     68 E5 05 F1 | 	add	objptr, ##62824
16848     F2 24 02 FB | 	rdlong	local04, objptr
1684c     7A 00 00 FF 
16850     68 E5 85 F1 | 	sub	objptr, ##62824
16854     12 23 02 F6 | 	mov	local03, local04
16858     7F 22 56 F2 | 	cmps	local03, #127 wc
1685c     B0 00 90 3D |  if_ae	jmp	#LR__1715
16860     38 E4 05 F1 | 	add	objptr, #56
16864     F2 1E E2 FA | 	rdword	local01, objptr
16868     38 E4 85 F1 | 	sub	objptr, #56
1686c     0F 27 32 F9 | 	getword	local05, local01, #0
16870     FE 26 0E F2 | 	cmp	local05, #254 wz
16874     79 00 00 AF 
16878     A4 E4 05 A1 |  if_e	add	objptr, ##62116
1687c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
16880     79 00 00 AF 
16884     A4 E4 85 A1 |  if_e	sub	objptr, ##62116
16888     16 2F 02 A6 |  if_e	mov	local09, local08
1688c     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
16890     7C 00 90 5D |  if_ne	jmp	#LR__1715
16894     04 00 00 FF 
16898     94 EA 05 F1 | 	add	ptr__dat__, ##2196
1689c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
168a0     04 00 00 FF 
168a4     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
168a8     56 00 00 FF 
168ac     44 22 06 F6 | 	mov	local03, ##44100
168b0     0E 24 C6 F9 | 	decod	local04, #14
168b4     00 26 06 F6 | 	mov	local05, #0
168b8     03 00 00 FF 
168bc     DE 1E 06 F6 | 	mov	local01, ##1758
168c0     07 12 06 F6 | 	mov	arg01, #7
168c4     56 00 00 FF 
168c8     44 16 06 F6 | 	mov	arg03, ##44100
168cc     0E 18 C6 F9 | 	decod	arg04, #14
168d0     00 1A 06 F6 | 	mov	arg05, #0
168d4     03 00 00 FF 
168d8     DE 1C 06 F6 | 	mov	arg06, ##1758
168dc     0B 00 00 FF 
168e0     C0 E4 05 F1 | 	add	objptr, ##5824
168e4     7C 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
168e8     0B 00 00 FF 
168ec     C0 E4 85 F1 | 	sub	objptr, ##5824
168f0     2C 13 06 F6 | 	mov	arg01, #300
168f4     98 2B B0 FD | 	call	#__system___waitms
168f8     07 12 06 F6 | 	mov	arg01, #7
168fc     0B 00 00 FF 
16900     C0 E4 05 F1 | 	add	objptr, ##5824
16904     AC 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
16908     0B 00 00 FF 
1690c     C0 E4 85 F1 | 	sub	objptr, ##5824
16910                 | LR__1715
16910                 | '  
16910                 | '   'tab
16910                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
16910     7A 00 00 FF 
16914     60 E5 05 F1 | 	add	objptr, ##62816
16918     F2 20 02 FB | 	rdlong	local02, objptr
1691c     7A 00 00 FF 
16920     60 E5 85 F1 | 	sub	objptr, ##62816
16924     10 21 E2 F8 | 	getbyte	local02, local02, #0
16928     2B 20 0E F2 | 	cmp	local02, #43 wz
1692c     B4 00 90 5D |  if_ne	jmp	#LR__1716
16930     38 E4 05 F1 | 	add	objptr, #56
16934     F2 24 E2 FA | 	rdword	local04, objptr
16938     38 E4 85 F1 | 	sub	objptr, #56
1693c     12 23 32 F9 | 	getword	local03, local04, #0
16940     F0 22 16 F2 | 	cmp	local03, #240 wc
16944     9C 00 90 CD |  if_b	jmp	#LR__1716
16948     79 00 00 FF 
1694c     A4 E4 05 F1 | 	add	objptr, ##62116
16950     F2 1E 02 FB | 	rdlong	local01, objptr
16954     79 00 00 FF 
16958     A4 E4 85 F1 | 	sub	objptr, ##62116
1695c     0F 27 02 F6 | 	mov	local05, local01
16960     01 26 0E F2 | 	cmp	local05, #1 wz
16964     7C 00 90 5D |  if_ne	jmp	#LR__1716
16968     04 00 00 FF 
1696c     94 EA 05 F1 | 	add	ptr__dat__, ##2196
16970     F5 14 02 F6 | 	mov	arg02, ptr__dat__
16974     04 00 00 FF 
16978     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
1697c     56 00 00 FF 
16980     44 22 06 F6 | 	mov	local03, ##44100
16984     0E 24 C6 F9 | 	decod	local04, #14
16988     00 26 06 F6 | 	mov	local05, #0
1698c     03 00 00 FF 
16990     DE 1E 06 F6 | 	mov	local01, ##1758
16994     00 12 06 F6 | 	mov	arg01, #0
16998     56 00 00 FF 
1699c     44 16 06 F6 | 	mov	arg03, ##44100
169a0     0E 18 C6 F9 | 	decod	arg04, #14
169a4     00 1A 06 F6 | 	mov	arg05, #0
169a8     03 00 00 FF 
169ac     DE 1C 06 F6 | 	mov	arg06, ##1758
169b0     0B 00 00 FF 
169b4     C0 E4 05 F1 | 	add	objptr, ##5824
169b8     A8 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
169bc     0B 00 00 FF 
169c0     C0 E4 85 F1 | 	sub	objptr, ##5824
169c4     2C 13 06 F6 | 	mov	arg01, #300
169c8     C4 2A B0 FD | 	call	#__system___waitms
169cc     00 12 06 F6 | 	mov	arg01, #0
169d0     0B 00 00 FF 
169d4     C0 E4 05 F1 | 	add	objptr, ##5824
169d8     D8 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
169dc     0B 00 00 FF 
169e0     C0 E4 85 F1 | 	sub	objptr, ##5824
169e4                 | LR__1716
169e4                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
169e4     7A 00 00 FF 
169e8     60 E5 05 F1 | 	add	objptr, ##62816
169ec     F2 20 02 FB | 	rdlong	local02, objptr
169f0     7A 00 00 FF 
169f4     60 E5 85 F1 | 	sub	objptr, ##62816
169f8     10 21 E2 F8 | 	getbyte	local02, local02, #0
169fc     2B 20 0E F2 | 	cmp	local02, #43 wz
16a00     AC 00 90 5D |  if_ne	jmp	#LR__1719
16a04     38 E4 05 F1 | 	add	objptr, #56
16a08     F2 24 E2 FA | 	rdword	local04, objptr
16a0c     38 E4 85 F1 | 	sub	objptr, #56
16a10     12 23 32 F9 | 	getword	local03, local04, #0
16a14     F0 22 16 F2 | 	cmp	local03, #240 wc
16a18     94 00 90 3D |  if_ae	jmp	#LR__1719
16a1c     38 E4 05 F1 | 	add	objptr, #56
16a20     F2 20 E2 FA | 	rdword	local02, objptr
16a24     10 23 52 F6 | 	abs	local03, local02 wc
16a28     11 23 42 F8 | 	getnib	local03, local03, #0
16a2c     11 23 82 F6 | 	negc	local03, local03
16a30     11 25 52 F6 | 	abs	local04, local03 wc
16a34     01 24 46 F0 | 	shr	local04, #1
16a38     12 25 82 F6 | 	negc	local04, local04
16a3c     7A 00 00 FF 
16a40     34 E5 05 F1 | 	add	objptr, ##62772
16a44     F2 24 62 FC | 	wrlong	local04, objptr
16a48     12 31 02 F6 | 	mov	local10, local04
16a4c     7A 00 00 FF 
16a50     6C E5 85 F1 | 	sub	objptr, ##62828
16a54                 | LR__1717
16a54     08 30 56 F2 | 	cmps	local10, #8 wc
16a58     54 00 90 3D |  if_ae	jmp	#LR__1718
16a5c     56 00 00 FF 
16a60     E0 E4 05 F1 | 	add	objptr, ##44256
16a64     F2 12 02 FB | 	rdlong	arg01, objptr
16a68     56 00 00 FF 
16a6c     E0 E4 85 F1 | 	sub	objptr, ##44256
16a70     49 01 00 FF 
16a74     5D 24 06 F6 | 	mov	local04, ##@LR__4700
16a78     12 15 02 F6 | 	mov	arg02, local04
16a7c     78 27 B0 FD | 	call	#__system___string_concat
16a80     56 00 00 FF 
16a84     E0 E4 05 F1 | 	add	objptr, ##44256
16a88     F2 FA 61 FC | 	wrlong	result1, objptr
16a8c     56 00 00 FF 
16a90     E0 E4 85 F1 | 	sub	objptr, ##44256
16a94     49 01 00 FF 
16a98     5F 12 06 F6 | 	mov	arg01, ##@LR__4701
16a9c     74 16 B0 FD | 	call	#_hg010b_spin2_write
16aa0     18 23 02 F6 | 	mov	local03, local10
16aa4     01 22 06 F1 | 	add	local03, #1
16aa8     11 31 02 F6 | 	mov	local10, local03
16aac     A4 FF 9F FD | 	jmp	#LR__1717
16ab0                 | LR__1718
16ab0                 | LR__1719
16ab0                 | '  
16ab0                 | '   'backspace
16ab0                 | '   if (key3 and 255) = 42 then 
16ab0     7A 00 00 FF 
16ab4     60 E5 05 F1 | 	add	objptr, ##62816
16ab8     F2 20 02 FB | 	rdlong	local02, objptr
16abc     7A 00 00 FF 
16ac0     60 E5 85 F1 | 	sub	objptr, ##62816
16ac4     10 21 E2 F8 | 	getbyte	local02, local02, #0
16ac8     2A 20 0E F2 | 	cmp	local02, #42 wz
16acc     D4 00 90 5D |  if_ne	jmp	#LR__1724
16ad0                 | '       if v.cursor_x>4 then 
16ad0     38 E4 05 F1 | 	add	objptr, #56
16ad4     F2 20 E2 FA | 	rdword	local02, objptr
16ad8     38 E4 85 F1 | 	sub	objptr, #56
16adc     05 20 16 F2 | 	cmp	local02, #5 wc
16ae0     9C 00 90 CD |  if_b	jmp	#LR__1722
16ae4     56 00 00 FF 
16ae8     E0 E4 05 F1 | 	add	objptr, ##44256
16aec     F2 26 02 FB | 	rdlong	local05, objptr
16af0     56 00 00 FF 
16af4     E0 E4 85 F1 | 	sub	objptr, ##44256
16af8     13 13 02 F6 | 	mov	arg01, local05
16afc     09 33 02 F6 | 	mov	local11, arg01
16b00     97 06 48 FB | 	callpa	#(@LR__1721-@LR__1720)>>2,fcache_load_ptr_
16b04                 | LR__1720
16b04     19 FB C9 FA | 	rdbyte	result1, local11 wz
16b08     01 32 06 51 |  if_ne	add	local11, #1
16b0c     F4 FF 9F 5D |  if_ne	jmp	#LR__1720
16b10                 | LR__1721
16b10     09 33 82 F1 | 	sub	local11, arg01
16b14     19 15 02 F6 | 	mov	arg02, local11
16b18     01 14 86 F1 | 	sub	arg02, #1
16b1c     13 13 02 F6 | 	mov	arg01, local05
16b20     88 46 B0 FD | 	call	#__system__Left_S
16b24     56 00 00 FF 
16b28     E0 E4 05 F1 | 	add	objptr, ##44256
16b2c     F2 FA 61 FC | 	wrlong	result1, objptr
16b30     56 00 00 FF 
16b34     A8 E4 85 F1 | 	sub	objptr, ##44200
16b38     F2 12 E2 FA | 	rdword	arg01, objptr
16b3c     02 12 86 F1 | 	sub	arg01, #2
16b40     02 E4 05 F1 | 	add	objptr, #2
16b44     F2 14 C2 FA | 	rdbyte	arg02, objptr
16b48     3A E4 85 F1 | 	sub	objptr, #58
16b4c     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
16b50     20 12 06 F6 | 	mov	arg01, #32
16b54     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
16b58     38 E4 05 F1 | 	add	objptr, #56
16b5c     F2 12 E2 FA | 	rdword	arg01, objptr
16b60     02 12 86 F1 | 	sub	arg01, #2
16b64     02 E4 05 F1 | 	add	objptr, #2
16b68     F2 24 C2 FA | 	rdbyte	local04, objptr
16b6c     3A E4 85 F1 | 	sub	objptr, #58
16b70     12 23 E2 F8 | 	getbyte	local03, local04, #0
16b74     11 15 02 F6 | 	mov	arg02, local03
16b78     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
16b7c     24 00 90 FD | 	jmp	#LR__1723
16b80                 | LR__1722
16b80     49 01 00 FF 
16b84     61 20 06 F6 | 	mov	local02, ##@LR__4702
16b88     56 00 00 FF 
16b8c     E0 E4 05 F1 | 	add	objptr, ##44256
16b90     F2 20 62 FC | 	wrlong	local02, objptr
16b94     56 00 00 FF 
16b98     A8 E4 85 F1 | 	sub	objptr, ##44200
16b9c     F2 08 58 FC | 	wrword	#4, objptr
16ba0     38 E4 85 F1 | 	sub	objptr, #56
16ba4                 | LR__1723
16ba4                 | LR__1724
16ba4                 | '    
16ba4                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
16ba4                 | '  
16ba4                 | '   if key4=key_enter then 
16ba4     7A 00 00 FF 
16ba8     68 E5 05 F1 | 	add	objptr, ##62824
16bac     F2 28 02 FB | 	rdlong	local06, objptr
16bb0     7A 00 00 FF 
16bb4     68 E5 85 F1 | 	sub	objptr, ##62824
16bb8     8D 28 0E F2 | 	cmp	local06, #141 wz
16bbc     50 00 90 5D |  if_ne	jmp	#LR__1725
16bc0     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
16bc4     54 9E BE FD | 	call	#_interpret
16bc8     49 01 00 FF 
16bcc     62 20 06 F6 | 	mov	local02, ##@LR__4703
16bd0     56 00 00 FF 
16bd4     E0 E4 05 F1 | 	add	objptr, ##44256
16bd8     F2 20 62 FC | 	wrlong	local02, objptr
16bdc     1A FA 61 FD | 	getct	result1
16be0     24 00 00 FF 
16be4     90 E4 05 F1 | 	add	objptr, ##18576
16be8     F2 24 02 FB | 	rdlong	local04, objptr
16bec     12 23 02 F6 | 	mov	local03, local04
16bf0     11 FB 81 F1 | 	sub	result1, local03
16bf4     F2 FA 61 FC | 	wrlong	result1, objptr
16bf8     14 E4 85 F1 | 	sub	objptr, #20
16bfc     F2 00 68 FC | 	wrlong	#0, objptr
16c00     08 E4 05 F1 | 	add	objptr, #8
16c04     F2 00 68 FC | 	wrlong	#0, objptr
16c08     7A 00 00 FF 
16c0c     64 E5 85 F1 | 	sub	objptr, ##62820
16c10                 | LR__1725
16c10     7A 00 00 FF 
16c14     60 E5 05 F1 | 	add	objptr, ##62816
16c18     F2 00 68 FC | 	wrlong	#0, objptr
16c1c     7A 00 00 FF 
16c20     60 E5 85 F1 | 	sub	objptr, ##62816
16c24     98 F6 9F FD | 	jmp	#LR__1700
16c28     A7 F0 03 F6 | 	mov	ptra, fp
16c2c     B2 00 A0 FD | 	call	#popregs_
16c30                 | _program_ret
16c30     2D 00 64 FD | 	ret
16c34                 | 
16c34                 | ' '' this is not a main program.
16c34                 | ' 
16c34                 | ' '****************************************************************************************************************
16c34                 | ' '                                                                                                             	*
16c34                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
16c34                 | ' '                                                                                                            	*
16c34                 | ' ' mode - mode #, see below											*
16c34                 | ' ' base - HDMI base pin												*
16c34                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
16c34                 | ' '														*
16c34                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
16c34                 | ' '' set bit #15 for custom timings														*
16c34                 | ' '' p - 1 - psram, 0 - hub											*
16c34                 | ' '' t - 1 - graphics, 0 - text											*
16c34                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
16c34                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
16c34                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
16c34                 | ' '														*
16c34                 | ' '****************************************************************************************************************
16c34                 | ' 
16c34                 | ' pub start(base,mb):result |i
16c34                 | _hg010b_spin2_start
16c34                 | ' 
16c34                 | ' '--------------------------- initialize pointers and variables
16c34                 | ' 
16c34                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
16c34     30 E4 05 F1 | 	add	objptr, #48
16c38     F2 FA 01 F6 | 	mov	result1, objptr
16c3c     28 E4 85 F1 | 	sub	objptr, #40
16c40     F2 FA 61 FC | 	wrlong	result1, objptr
16c44                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
16c44                 | ' hdmibase:=base							' HDMI base pin, 8*n
16c44     18 E4 05 F1 | 	add	objptr, #24
16c48     F2 12 62 FC | 	wrlong	arg01, objptr
16c4c                 | ' mailbox_ptr:=mb		
16c4c     04 E4 05 F1 | 	add	objptr, #4
16c50     F2 14 62 FC | 	wrlong	arg02, objptr
16c54                 | ' mailbox0:=mb				' PSRAM mailbox pointer
16c54     C1 E5 05 F1 | 	add	objptr, #449
16c58     F2 14 62 FC | 	wrlong	arg02, objptr
16c5c                 | ' sprite_ptr:=@spr1ptr
16c5c     D8 E4 85 F1 | 	sub	objptr, #216
16c60     F2 FA 01 F6 | 	mov	result1, objptr
16c64     E5 E4 85 F1 | 	sub	objptr, #229
16c68     F2 FA 61 FC | 	wrlong	result1, objptr
16c6c                 | ' 
16c6c                 | ' 		'
16c6c                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
16c6c     E5 E4 05 F1 | 	add	objptr, #229
16c70     F2 FA 01 FB | 	rdlong	result1, objptr
16c74     D0 FA 05 F1 | 	add	result1, #208
16c78     FD 10 58 FC | 	wrword	#8, result1
16c7c                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
16c7c     F2 16 02 FB | 	rdlong	arg03, objptr
16c80     D2 16 06 F1 | 	add	arg03, #210
16c84     0B 21 58 FC | 	wrword	#16, arg03
16c88                 | ' leading_spaces:=0				'
16c88     A5 E5 05 F1 | 	add	objptr, #421
16c8c     F2 00 68 FC | 	wrlong	#0, objptr
16c90                 | ' 
16c90                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
16c90     99 E4 85 F1 | 	sub	objptr, #153
16c94     00 00 A0 FF 
16c98     F2 0E 68 FC | 	wrlong	##1073741831, objptr
16c9c                 | ' emptydl[1]:=0
16c9c     04 E4 05 F1 | 	add	objptr, #4
16ca0     F2 00 68 FC | 	wrlong	#0, objptr
16ca4                 | ' 
16ca4                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
16ca4                 | ' 
16ca4                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
16ca4     28 E5 85 F1 | 	sub	objptr, #296
16ca8     F2 02 68 FC | 	wrlong	#1, objptr
16cac                 | ' if s_debug<>0
16cac                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
16cac     20 00 80 FF 
16cb0     F2 00 68 FC | 	wrlong	##16384, objptr
16cb4     F5 E4 85 F1 | 	sub	objptr, #245
16cb8                 | ' setmode()							' set the mode, see below
16cb8     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
16cbc                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
16cbc     45 E4 05 F1 | 	add	objptr, #69
16cc0     F2 FA 01 F6 | 	mov	result1, objptr
16cc4     35 E4 85 F1 | 	sub	objptr, #53
16cc8     F2 FA 61 FC | 	wrlong	result1, objptr
16ccc                 | ' cursor_ptr:=@cursor_x						
16ccc     28 E4 05 F1 | 	add	objptr, #40
16cd0     F2 16 02 F6 | 	mov	arg03, objptr
16cd4     2C E4 85 F1 | 	sub	objptr, #44
16cd8     F2 16 62 FC | 	wrlong	arg03, objptr
16cdc                 | ' fontnum:=0  							' start with a PC type font 
16cdc     55 E4 05 F1 | 	add	objptr, #85
16ce0     F2 00 68 FC | 	wrlong	#0, objptr
16ce4                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
16ce4     1C E4 05 F1 | 	add	objptr, #28
16ce8     F2 12 02 F6 | 	mov	arg01, objptr
16cec     7D E4 85 F1 | 	sub	objptr, #125
16cf0     10 00 00 FF 
16cf4     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
16cf8     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
16cfc     10 00 00 FF 
16d00     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
16d04     10 16 06 F6 | 	mov	arg03, #16
16d08     B0 23 B0 FD | 	call	#__system____builtin_memmove
16d0c                 | ' leading_spaces:=0
16d0c     01 00 00 FF 
16d10     B2 E4 05 F1 | 	add	objptr, ##690
16d14     F2 00 68 FC | 	wrlong	#0, objptr
16d18     01 00 00 FF 
16d1c     B2 E4 85 F1 | 	sub	objptr, ##690
16d20                 | ' '---------------------------- initialize a cursor (MSDOS type)
16d20                 | ' 
16d20                 | ' initcursor(154)
16d20     9A 12 06 F6 | 	mov	arg01, #154
16d24     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
16d28                 | ' 
16d28                 | ' '---------------------------- start the cog
16d28                 | ' 
16d28                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
16d28     10 00 00 FF 
16d2c     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
16d30     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
16d34     10 00 00 FF 
16d38     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
16d3c     10 E4 05 F1 | 	add	objptr, #16
16d40     10 FA 05 F6 | 	mov	result1, #16
16d44     28 E4 61 FD | 	setq	objptr
16d48     0A FB F1 FC | 	coginit	result1, arg02 wc
16d4c     01 FA 65 C6 |  if_b	neg	result1, #1
16d50     1C E4 05 F1 | 	add	objptr, #28
16d54     F2 FA 61 FC | 	wrlong	result1, objptr
16d58     2C E4 85 F1 | 	sub	objptr, #44
16d5c                 | ' waitms(40)							' wait for stabilize
16d5c     28 12 06 F6 | 	mov	arg01, #40
16d60     2C 27 B0 FD | 	call	#__system___waitms
16d64                 | ' return cog							' return the driver's cog #
16d64     2C E4 05 F1 | 	add	objptr, #44
16d68     F2 FA 01 FB | 	rdlong	result1, objptr
16d6c     2C E4 85 F1 | 	sub	objptr, #44
16d70                 | _hg010b_spin2_start_ret
16d70     2D 00 64 FD | 	ret
16d74                 | 
16d74                 | ' 
16d74                 | ' 
16d74                 | ' '**************************************************************************************************************** 
16d74                 | ' '                                                                                                             	*
16d74                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
16d74                 | ' '  Mode number - see start() above or bits below								*
16d74                 | ' '                                                                                                             	*
16d74                 | ' '****************************************************************************************************************
16d74                 | ' 
16d74                 | ' '---------------------------- initialize a cursor (MSDOS type)
16d74                 | ' pub initcursor(color) |i
16d74                 | _hg010b_spin2_initcursor
16d74     03 4A 05 F6 | 	mov	COUNT_, #3
16d78     A8 00 A0 FD | 	call	#pushregs_
16d7c     09 1F 02 F6 | 	mov	local01, arg01
16d80                 | ' 
16d80                 | ' cursor_x:=0							' place the cursor at 0:0
16d80     38 E4 05 F1 | 	add	objptr, #56
16d84     F2 00 58 FC | 	wrword	#0, objptr
16d88                 | ' cursor_y:=0
16d88     02 E4 05 F1 | 	add	objptr, #2
16d8c     F2 00 48 FC | 	wrbyte	#0, objptr
16d90                 | ' repeat i from 0 to 111
16d90     00 20 06 F6 | 	mov	local02, #0
16d94     F8 E5 05 F1 | 	add	objptr, #504
16d98     97 1A 48 FB | 	callpa	#(@LR__1732-@LR__1730)>>2,fcache_load_ptr_
16d9c                 | LR__1730
16d9c                 | '   cursor[i]:=0
16d9c     10 23 02 F6 | 	mov	local03, local02
16da0     F2 22 02 F1 | 	add	local03, objptr
16da4     11 01 48 FC | 	wrbyte	#0, local03
16da8     01 20 06 F1 | 	add	local02, #1
16dac     70 20 56 F2 | 	cmps	local02, #112 wc
16db0     E8 FF 9F CD |  if_b	jmp	#LR__1730
16db4                 | ' repeat i from 112 to 127
16db4     70 20 06 F6 | 	mov	local02, #112
16db8                 | LR__1731
16db8                 | '   cursor[i]:=color  
16db8     10 23 02 F6 | 	mov	local03, local02
16dbc     F2 22 02 F1 | 	add	local03, objptr
16dc0     11 1F 42 FC | 	wrbyte	local01, local03
16dc4     01 20 06 F1 | 	add	local02, #1
16dc8     80 20 16 F2 | 	cmp	local02, #128 wc
16dcc     E8 FF 9F CD |  if_b	jmp	#LR__1731
16dd0                 | LR__1732
16dd0                 | ' 'repeat i from 0 to 127
16dd0                 | ' '  if ((i/8)//2)
16dd0                 | ' '    cursor[i]:=15
16dd0                 | ' '  else
16dd0                 | ' '    cursor[i]:=0
16dd0                 | ' '  if i>=120    
16dd0                 | ' '    cursor[i]:=40
16dd0                 | ' setspriteptr(17,@cursor)
16dd0     F2 14 02 F6 | 	mov	arg02, objptr
16dd4     01 00 00 FF 
16dd8     32 E4 85 F1 | 	sub	objptr, ##562
16ddc     11 12 06 F6 | 	mov	arg01, #17
16de0     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
16de4                 | ' setspritesize(17,8,16)
16de4     11 12 06 F6 | 	mov	arg01, #17
16de8     08 14 06 F6 | 	mov	arg02, #8
16dec     10 16 06 F6 | 	mov	arg03, #16
16df0     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
16df4                 | ' setspritepos(17,0,0)
16df4     11 12 06 F6 | 	mov	arg01, #17
16df8     00 14 06 F6 | 	mov	arg02, #0
16dfc     00 16 06 F6 | 	mov	arg03, #0
16e00     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
16e04     A7 F0 03 F6 | 	mov	ptra, fp
16e08     B2 00 A0 FD | 	call	#popregs_
16e0c                 | _hg010b_spin2_initcursor_ret
16e0c     2D 00 64 FD | 	ret
16e10                 | 
16e10                 | ' 
16e10                 | '  
16e10                 | ' pub setcursorcolor(color) |i
16e10                 | _hg010b_spin2_setcursorcolor
16e10                 | ' 
16e10                 | ' 
16e10                 | ' repeat i from 0 to 111
16e10     00 00 06 F6 | 	mov	_var01, #0
16e14     01 00 00 FF 
16e18     32 E4 05 F1 | 	add	objptr, ##562
16e1c     97 1A 48 FB | 	callpa	#(@LR__1742-@LR__1740)>>2,fcache_load_ptr_
16e20                 | LR__1740
16e20                 | '   cursor[i]:=0
16e20     00 03 02 F6 | 	mov	_var02, _var01
16e24     F2 02 02 F1 | 	add	_var02, objptr
16e28     01 01 48 FC | 	wrbyte	#0, _var02
16e2c     01 00 06 F1 | 	add	_var01, #1
16e30     70 00 56 F2 | 	cmps	_var01, #112 wc
16e34     E8 FF 9F CD |  if_b	jmp	#LR__1740
16e38                 | ' repeat i from 112 to 127
16e38     70 00 06 F6 | 	mov	_var01, #112
16e3c                 | LR__1741
16e3c                 | '   cursor[i]:=color  
16e3c     00 03 02 F6 | 	mov	_var02, _var01
16e40     F2 02 02 F1 | 	add	_var02, objptr
16e44     01 13 42 FC | 	wrbyte	arg01, _var02
16e48     01 00 06 F1 | 	add	_var01, #1
16e4c     80 00 16 F2 | 	cmp	_var01, #128 wc
16e50     E8 FF 9F CD |  if_b	jmp	#LR__1741
16e54                 | LR__1742
16e54     01 00 00 FF 
16e58     32 E4 85 F1 | 	sub	objptr, ##562
16e5c                 | _hg010b_spin2_setcursorcolor_ret
16e5c     2D 00 64 FD | 	ret
16e60                 | 
16e60                 | '  
16e60                 | ' 
16e60                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
16e60                 | _hg010b_spin2_setmode
16e60     02 4A 05 F6 | 	mov	COUNT_, #2
16e64     A8 00 A0 FD | 	call	#pushregs_
16e68                 | ' 
16e68                 | ' 
16e68                 | ' dl_ptr:=@emptydl[0]
16e68     01 00 00 FF 
16e6c     19 E4 05 F1 | 	add	objptr, ##537
16e70     F2 64 02 F6 | 	mov	muldivb_, objptr
16e74     FD E5 85 F1 | 	sub	objptr, #509
16e78     F2 64 62 FC | 	wrlong	muldivb_, objptr
16e7c                 | ' 
16e7c                 | ' if cog>0 
16e7c     10 E4 05 F1 | 	add	objptr, #16
16e80     F2 64 02 FB | 	rdlong	muldivb_, objptr
16e84     2C E4 85 F1 | 	sub	objptr, #44
16e88     01 64 56 F2 | 	cmps	muldivb_, #1 wc
16e8c                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
16e8c     01 12 06 36 |  if_ae	mov	arg01, #1
16e90     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
16e94                 | ' xres:=1024
16e94     01 00 00 FF 
16e98     22 E4 05 F1 | 	add	objptr, ##546
16e9c     02 00 80 FF 
16ea0     F2 00 68 FC | 	wrlong	##1024, objptr
16ea4                 | ' yres:=576  
16ea4     04 E4 05 F1 | 	add	objptr, #4
16ea8     01 00 80 FF 
16eac     F2 80 68 FC | 	wrlong	##576, objptr
16eb0                 | ' ppl:=(timings[3])
16eb0     10 00 00 FF 
16eb4     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
16eb8     F7 64 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
16ebc     51 E5 85 F1 | 	sub	objptr, #337
16ec0     F2 64 62 FC | 	wrlong	muldivb_, objptr
16ec4                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
16ec4     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
16ec8     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
16ecc     01 1E 66 F0 | 	shl	local01, #1
16ed0     80 E4 85 F1 | 	sub	objptr, #128
16ed4     F2 1E 62 FC | 	wrlong	local01, objptr
16ed8                 | ' cpl1:=cpl '' todo remove
16ed8     04 E4 05 F1 | 	add	objptr, #4
16edc     F2 1E 62 FC | 	wrlong	local01, objptr
16ee0                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
16ee0     02 00 00 FF 
16ee4     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
16ee8     41 E4 85 F1 | 	sub	objptr, #65
16eec     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
16ef0                 | ' repeat i from 0 to 3
16ef0     00 20 06 F6 | 	mov	local02, #0
16ef4     02 00 00 FF 
16ef8     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
16efc     08 E4 05 F1 | 	add	objptr, #8
16f00     97 20 48 FB | 	callpa	#(@LR__1751-@LR__1750)>>2,fcache_load_ptr_
16f04                 | LR__1750
16f04                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
16f04     10 1F 02 F6 | 	mov	local01, local02
16f08     02 1E 66 F0 | 	shl	local01, #2
16f0c     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
16f10     F2 64 02 FB | 	rdlong	muldivb_, objptr
16f14     11 64 66 F0 | 	shl	muldivb_, #17
16f18     0F 1F 02 FB | 	rdlong	local01, local01
16f1c     32 1F 02 F1 | 	add	local01, muldivb_
16f20     80 40 38 FF 
16f24     00 1E 06 F1 | 	add	local01, ##1887502336
16f28     10 65 02 F6 | 	mov	muldivb_, local02
16f2c     02 64 66 F0 | 	shl	muldivb_, #2
16f30     F7 64 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
16f34     32 1F 62 FC | 	wrlong	local01, muldivb_
16f38     01 20 06 F1 | 	add	local02, #1
16f3c     04 20 56 F2 | 	cmps	local02, #4 wc
16f40     C0 FF 9F CD |  if_b	jmp	#LR__1750
16f44                 | LR__1751
16f44     20 E4 85 F1 | 	sub	objptr, #32
16f48                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
16f48     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
16f4c     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
16f50     14 1E 66 FC | 	wrlong	local01, #20
16f54                 | ' hubset(timings[10])
16f54     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
16f58     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
16f5c     10 00 00 FF 
16f60     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
16f64     00 12 62 FD | 	hubset	arg01
16f68                 | ' waitms(1)                                                   	' wait for stabilization
16f68     01 12 06 F6 | 	mov	arg01, #1
16f6c     20 25 B0 FD | 	call	#__system___waitms
16f70     10 00 00 FF 
16f74     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
16f78     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
16f7c     5D E4 05 F1 | 	add	objptr, #93
16f80     F2 20 62 FC | 	wrlong	local02, objptr
16f84     10 1F 52 F6 | 	abs	local01, local02 wc
16f88     04 1E 46 F0 | 	shr	local01, #4
16f8c     0F 1F 82 F6 | 	negc	local01, local01
16f90     9C E4 05 F1 | 	add	objptr, #156
16f94     F2 1E 62 FC | 	wrlong	local01, objptr
16f98     A4 E4 85 F1 | 	sub	objptr, #164
16f9c     F2 20 02 FB | 	rdlong	local02, objptr
16fa0     08 E4 05 F1 | 	add	objptr, #8
16fa4     F2 1E 02 FB | 	rdlong	local01, objptr
16fa8     0F 21 02 FD | 	qmul	local02, local01
16fac                 | ' lines:=timings[11]
16fac                 | ' t_lines:=lines/16
16fac                 | ' buflen:=cpl*lines						' framebuffer length in longs
16fac     29 E4 85 F1 | 	sub	objptr, #41
16fb0                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
16fb0     19 1E C6 F9 | 	decod	local01, #25
16fb4                 | ' mode_ptr:=@timings						' set pointers to timings
16fb4     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
16fb8                 | ' graphmode:=1024+512+192+48							' det global variable
16fb8                 | ' makedl(graphmode)							' make a DL for the mode
16fb8     03 00 00 FF 
16fbc     F0 12 06 F6 | 	mov	arg01, ##1776
16fc0     18 20 62 FD | 	getqx	local02
16fc4     F2 20 62 FC | 	wrlong	local02, objptr
16fc8     34 E4 85 F1 | 	sub	objptr, #52
16fcc     02 20 66 F0 | 	shl	local02, #2
16fd0     10 1F 82 F1 | 	sub	local01, local02
16fd4     F2 1E 62 FC | 	wrlong	local01, objptr
16fd8     14 E4 05 F1 | 	add	objptr, #20
16fdc     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
16fe0     79 E4 05 F1 | 	add	objptr, #121
16fe4     03 00 80 FF 
16fe8     F2 E0 69 FC | 	wrlong	##1776, objptr
16fec     8D E4 85 F1 | 	sub	objptr, #141
16ff0     10 00 00 FF 
16ff4     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
16ff8     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
16ffc                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
16ffc     F2 1E 02 FB | 	rdlong	local01, objptr
17000     D9 E4 05 F1 | 	add	objptr, #217
17004     F2 1E 62 FC | 	wrlong	local01, objptr
17008                 | ' s_font_ptr:=font_ptr
17008     D5 E4 85 F1 | 	sub	objptr, #213
1700c     F2 1E 02 FB | 	rdlong	local01, objptr
17010     D9 E4 05 F1 | 	add	objptr, #217
17014     F2 1E 62 FC | 	wrlong	local01, objptr
17018                 | ' s_lines:=lines
17018     80 E4 85 F1 | 	sub	objptr, #128
1701c     F2 1E 02 FB | 	rdlong	local01, objptr
17020     84 E4 05 F1 | 	add	objptr, #132
17024     F2 1E 62 FC | 	wrlong	local01, objptr
17028                 | ' s_buflen:=buflen
17028     AD E4 85 F1 | 	sub	objptr, #173
1702c     F2 1E 02 FB | 	rdlong	local01, objptr
17030     B5 E4 05 F1 | 	add	objptr, #181
17034     F2 1E 62 FC | 	wrlong	local01, objptr
17038                 | ' s_cpl:=cpl
17038     94 E4 85 F1 | 	sub	objptr, #148
1703c     F2 1E 02 FB | 	rdlong	local01, objptr
17040     90 E4 05 F1 | 	add	objptr, #144
17044     F2 1E 62 FC | 	wrlong	local01, objptr
17048                 | ' s_cpl1:=cpl
17048     90 E4 85 F1 | 	sub	objptr, #144
1704c     F2 1E 02 FB | 	rdlong	local01, objptr
17050     98 E4 05 F1 | 	add	objptr, #152
17054     F2 1E 62 FC | 	wrlong	local01, objptr
17058                 | ' st_lines:=t_lines
17058     0C E4 05 F1 | 	add	objptr, #12
1705c     F2 1E 02 FB | 	rdlong	local01, objptr
17060     04 E4 05 F1 | 	add	objptr, #4
17064     F2 1E 62 FC | 	wrlong	local01, objptr
17068                 | ' ppl:=ppl/xzoom  
17068     28 E4 85 F1 | 	sub	objptr, #40
1706c     F2 62 02 FB | 	rdlong	muldiva_, objptr
17070     2C E4 05 F1 | 	add	objptr, #44
17074     F2 64 02 FB | 	rdlong	muldivb_, objptr
17078     01 E5 85 F1 | 	sub	objptr, #257
1707c     BA 00 A0 FD | 	call	#divide_
17080     D5 E4 05 F1 | 	add	objptr, #213
17084     F2 64 62 FC | 	wrlong	muldivb_, objptr
17088                 | ' s_ppl:=ppl
17088     1C E4 05 F1 | 	add	objptr, #28
1708c     F2 64 62 FC | 	wrlong	muldivb_, objptr
17090     F1 E4 85 F1 | 	sub	objptr, #241
17094                 | ' waitms(20)							' wait 
17094     14 12 06 F6 | 	mov	arg01, #20
17098     F4 23 B0 FD | 	call	#__system___waitms
1709c     A7 F0 03 F6 | 	mov	ptra, fp
170a0     B2 00 A0 FD | 	call	#popregs_
170a4                 | _hg010b_spin2_setmode_ret
170a4     2D 00 64 FD | 	ret
170a8                 | 
170a8                 | ' 
170a8                 | ' 
170a8                 | ' '****************************************************************************************************************
170a8                 | ' '                                                                                                             	*
170a8                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
170a8                 | ' '                                                                                                             	*
170a8                 | ' '****************************************************************************************************************
170a8                 | ' 
170a8                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
170a8                 | _hg010b_spin2_makedl
170a8                 | ' 
170a8                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
170a8                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
170a8                 | ' repeat i from 0 to 11                                                           ' clear DL
170a8     00 00 06 F6 | 	mov	_var01, #0
170ac     E9 E5 05 F1 | 	add	objptr, #489
170b0     97 0E 48 FB | 	callpa	#(@LR__1761-@LR__1760)>>2,fcache_load_ptr_
170b4                 | LR__1760
170b4                 | '   displaylist[i]:=0 
170b4     00 03 02 F6 | 	mov	_var02, _var01
170b8     02 02 66 F0 | 	shl	_var02, #2
170bc     F2 02 02 F1 | 	add	_var02, objptr
170c0     01 01 68 FC | 	wrlong	#0, _var02
170c4     01 00 06 F1 | 	add	_var01, #1
170c8     0C 00 56 F2 | 	cmps	_var01, #12 wc
170cc     E4 FF 9F CD |  if_b	jmp	#LR__1760
170d0                 | LR__1761
170d0                 | '                         ' 
170d0                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
170d0     8C E5 85 F1 | 	sub	objptr, #396
170d4     F2 02 02 FB | 	rdlong	_var02, objptr
170d8     14 02 66 F0 | 	shl	_var02, #20
170dc     01 02 06 F1 | 	add	_var02, #1
170e0     04 E4 85 F1 | 	sub	objptr, #4
170e4     F2 00 02 FB | 	rdlong	_var01, objptr
170e8     02 00 66 F0 | 	shl	_var01, #2
170ec     04 00 66 F0 | 	shl	_var01, #4
170f0     00 03 02 F1 | 	add	_var02, _var01
170f4     90 E5 05 F1 | 	add	objptr, #400
170f8     F2 02 62 FC | 	wrlong	_var02, objptr
170fc     E9 E5 85 F1 | 	sub	objptr, #489
17100                 | ' displaylist[1]:=buf_ptr<<4+%10  
17100     F2 02 02 FB | 	rdlong	_var02, objptr
17104     04 02 66 F0 | 	shl	_var02, #4
17108     02 02 06 F1 | 	add	_var02, #2
1710c     ED E5 05 F1 | 	add	objptr, #493
17110     F2 02 62 FC | 	wrlong	_var02, objptr
17114                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
17114     04 E4 85 F1 | 	sub	objptr, #4
17118     F2 02 02 F6 | 	mov	_var02, objptr
1711c     CD E5 85 F1 | 	sub	objptr, #461
17120     F2 02 62 FC | 	wrlong	_var02, objptr
17124     1C E4 85 F1 | 	sub	objptr, #28
17128                 | _hg010b_spin2_makedl_ret
17128     2D 00 64 FD | 	ret
1712c                 | 
1712c                 | ' 
1712c                 | ' 
1712c                 | ' '****************************************************************************************************************
1712c                 | ' '                                                                        					*
1712c                 | ' '  Graphic primitives                                                    					*
1712c                 | ' '                                                                        					*
1712c                 | ' '****************************************************************************************************************
1712c                 | ' 
1712c                 | ' pub setspriteptr(num,ptr)
1712c                 | _hg010b_spin2_setspriteptr
1712c                 | ' long[@spr1ptr+12*num]:=ptr
1712c     0D E5 05 F1 | 	add	objptr, #269
17130     F2 00 02 F6 | 	mov	_var01, objptr
17134     09 03 02 F6 | 	mov	_var02, arg01
17138     01 02 66 F0 | 	shl	_var02, #1
1713c     09 03 02 F1 | 	add	_var02, arg01
17140     02 02 66 F0 | 	shl	_var02, #2
17144     01 01 02 F1 | 	add	_var01, _var02
17148     00 15 62 FC | 	wrlong	arg02, _var01
1714c     0D E5 85 F1 | 	sub	objptr, #269
17150                 | _hg010b_spin2_setspriteptr_ret
17150     2D 00 64 FD | 	ret
17154                 | 
17154                 | ' 
17154                 | ' pub setspritepos(num,x,y)
17154                 | _hg010b_spin2_setspritepos
17154                 | ' word[@spr1ptr+12*num+4]:=x
17154     0D E5 05 F1 | 	add	objptr, #269
17158     F2 00 02 F6 | 	mov	_var01, objptr
1715c     09 03 02 F6 | 	mov	_var02, arg01
17160     01 02 66 F0 | 	shl	_var02, #1
17164     09 03 02 F1 | 	add	_var02, arg01
17168     02 02 66 F0 | 	shl	_var02, #2
1716c     01 01 02 F1 | 	add	_var01, _var02
17170     04 00 06 F1 | 	add	_var01, #4
17174     00 15 52 FC | 	wrword	arg02, _var01
17178                 | ' word[@spr1ptr+12*num+6]:=y
17178     F2 00 02 F6 | 	mov	_var01, objptr
1717c     09 03 02 F6 | 	mov	_var02, arg01
17180     01 02 66 F0 | 	shl	_var02, #1
17184     09 03 02 F1 | 	add	_var02, arg01
17188     02 02 66 F0 | 	shl	_var02, #2
1718c     01 01 02 F1 | 	add	_var01, _var02
17190     06 00 06 F1 | 	add	_var01, #6
17194     00 17 52 FC | 	wrword	arg03, _var01
17198     0D E5 85 F1 | 	sub	objptr, #269
1719c                 | _hg010b_spin2_setspritepos_ret
1719c     2D 00 64 FD | 	ret
171a0                 | 
171a0                 | ' 
171a0                 | ' pub setspritesize(num,w,h)
171a0                 | _hg010b_spin2_setspritesize
171a0                 | ' word[@spr1ptr+12*num+8]:=w
171a0     0D E5 05 F1 | 	add	objptr, #269
171a4     F2 00 02 F6 | 	mov	_var01, objptr
171a8     09 03 02 F6 | 	mov	_var02, arg01
171ac     01 02 66 F0 | 	shl	_var02, #1
171b0     09 03 02 F1 | 	add	_var02, arg01
171b4     02 02 66 F0 | 	shl	_var02, #2
171b8     01 01 02 F1 | 	add	_var01, _var02
171bc     08 00 06 F1 | 	add	_var01, #8
171c0     00 15 52 FC | 	wrword	arg02, _var01
171c4                 | ' word[@spr1ptr+12*num+10]:=h
171c4     F2 00 02 F6 | 	mov	_var01, objptr
171c8     09 03 02 F6 | 	mov	_var02, arg01
171cc     01 02 66 F0 | 	shl	_var02, #1
171d0     09 03 02 F1 | 	add	_var02, arg01
171d4     02 02 66 F0 | 	shl	_var02, #2
171d8     01 01 02 F1 | 	add	_var01, _var02
171dc     0A 00 06 F1 | 	add	_var01, #10
171e0     00 17 52 FC | 	wrword	arg03, _var01
171e4     0D E5 85 F1 | 	sub	objptr, #269
171e8                 | _hg010b_spin2_setspritesize_ret
171e8     2D 00 64 FD | 	ret
171ec                 | 
171ec                 | ' 
171ec                 | ' 
171ec                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
171ec                 | ' 
171ec                 | ' 
171ec                 | ' pub putpixel(x,y,c)
171ec                 | _hg010b_spin2_putpixel
171ec     04 4A 05 F6 | 	mov	COUNT_, #4
171f0     A8 00 A0 FD | 	call	#pushregs_
171f4     09 1F 02 F6 | 	mov	local01, arg01
171f8                 | ' 
171f8                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
171f8     00 20 06 F6 | 	mov	local02, #0
171fc     00 1E 56 F2 | 	cmps	local01, #0 wc
17200     01 20 66 36 |  if_ae	neg	local02, #1
17204     E5 E4 05 F1 | 	add	objptr, #229
17208     F2 1A 02 FB | 	rdlong	arg05, objptr
1720c     02 1A 66 F0 | 	shl	arg05, #2
17210     0D 1F 52 F2 | 	cmps	local01, arg05 wc
17214     11 23 A2 F1 | 	subx	local03, local03
17218     11 21 02 F5 | 	and	local02, local03
1721c     00 22 06 F6 | 	mov	local03, #0
17220     00 14 56 F2 | 	cmps	arg02, #0 wc
17224     01 22 66 36 |  if_ae	neg	local03, #1
17228     11 21 02 F5 | 	and	local02, local03
1722c     04 E4 85 F1 | 	sub	objptr, #4
17230     F2 22 02 FB | 	rdlong	local03, objptr
17234     E1 E4 85 F1 | 	sub	objptr, #225
17238     11 15 52 F2 | 	cmps	arg02, local03 wc
1723c     12 25 A2 F1 | 	subx	local04, local04
17240     12 21 CA F7 | 	test	local02, local04 wz
17244     48 00 90 AD |  if_e	jmp	#LR__1770
17248     D9 E4 05 F1 | 	add	objptr, #217
1724c     F2 12 02 FB | 	rdlong	arg01, objptr
17250     14 E4 05 F1 | 	add	objptr, #20
17254     F2 24 02 FB | 	rdlong	local04, objptr
17258     02 24 66 F0 | 	shl	local04, #2
1725c     0A 25 02 FD | 	qmul	local04, arg02
17260                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
17260     0B 15 02 F6 | 	mov	arg02, arg03
17264     01 16 06 F6 | 	mov	arg03, #1
17268     00 18 06 F6 | 	mov	arg04, #0
1726c     01 1A 06 F6 | 	mov	arg05, #1
17270     0A 00 00 FF 
17274     D3 E5 05 F1 | 	add	objptr, ##5587
17278     18 24 62 FD | 	getqx	local04
1727c     0F 25 02 F1 | 	add	local04, local01
17280     12 13 02 F1 | 	add	arg01, local04
17284     FC 14 B0 FD | 	call	#_psram_spin2_fill
17288     0B 00 00 FF 
1728c     C0 E4 85 F1 | 	sub	objptr, ##5824
17290                 | LR__1770
17290     A7 F0 03 F6 | 	mov	ptra, fp
17294     B2 00 A0 FD | 	call	#popregs_
17298                 | _hg010b_spin2_putpixel_ret
17298     2D 00 64 FD | 	ret
1729c                 | 
1729c                 | ' 
1729c                 | ' pub putpixel2(x,y,c)
1729c                 | _hg010b_spin2_putpixel2
1729c     02 4A 05 F6 | 	mov	COUNT_, #2
172a0     A8 00 A0 FD | 	call	#pushregs_
172a4     D9 E4 05 F1 | 	add	objptr, #217
172a8     F2 1E 02 FB | 	rdlong	local01, objptr
172ac     14 E4 05 F1 | 	add	objptr, #20
172b0     F2 1A 02 FB | 	rdlong	arg05, objptr
172b4     02 1A 66 F0 | 	shl	arg05, #2
172b8     0A 1B 02 FD | 	qmul	arg05, arg02
172bc                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
172bc     0B 15 02 F6 | 	mov	arg02, arg03
172c0     01 16 06 F6 | 	mov	arg03, #1
172c4     00 18 06 F6 | 	mov	arg04, #0
172c8     01 1A 06 F6 | 	mov	arg05, #1
172cc     0A 00 00 FF 
172d0     D3 E5 05 F1 | 	add	objptr, ##5587
172d4     18 20 62 FD | 	getqx	local02
172d8     09 21 02 F1 | 	add	local02, arg01
172dc     10 1F 02 F1 | 	add	local01, local02
172e0     0F 13 02 F6 | 	mov	arg01, local01
172e4     9C 14 B0 FD | 	call	#_psram_spin2_fill
172e8     0B 00 00 FF 
172ec     C0 E4 85 F1 | 	sub	objptr, ##5824
172f0     A7 F0 03 F6 | 	mov	ptra, fp
172f4     B2 00 A0 FD | 	call	#popregs_
172f8                 | _hg010b_spin2_putpixel2_ret
172f8     2D 00 64 FD | 	ret
172fc                 | 
172fc                 | ' 
172fc                 | ' pub getpixel2(x,y): c 
172fc                 | _hg010b_spin2_getpixel2
172fc     02 4A 05 F6 | 	mov	COUNT_, #2
17300     A8 00 A0 FD | 	call	#pushregs_
17304     0C F0 07 F1 | 	add	ptra, #12
17308     04 4E 05 F1 | 	add	fp, #4
1730c     A7 12 62 FC | 	wrlong	arg01, fp
17310     04 4E 05 F1 | 	add	fp, #4
17314     A7 14 62 FC | 	wrlong	arg02, fp
17318     08 4E 85 F1 | 	sub	fp, #8
1731c     A7 00 68 FC | 	wrlong	#0, fp
17320     A7 12 02 F6 | 	mov	arg01, fp
17324     D9 E4 05 F1 | 	add	objptr, #217
17328     F2 14 02 FB | 	rdlong	arg02, objptr
1732c     14 E4 05 F1 | 	add	objptr, #20
17330     F2 16 02 FB | 	rdlong	arg03, objptr
17334     02 16 66 F0 | 	shl	arg03, #2
17338     08 4E 05 F1 | 	add	fp, #8
1733c     A7 FA 01 FB | 	rdlong	result1, fp
17340     FD 16 02 FD | 	qmul	arg03, result1
17344                 | ' 
17344                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
17344     04 4E 85 F1 | 	sub	fp, #4
17348     A7 1E 02 FB | 	rdlong	local01, fp
1734c     04 4E 85 F1 | 	sub	fp, #4
17350     01 16 06 F6 | 	mov	arg03, #1
17354     0A 00 00 FF 
17358     D3 E5 05 F1 | 	add	objptr, ##5587
1735c     18 20 62 FD | 	getqx	local02
17360     0F 21 02 F1 | 	add	local02, local01
17364     10 15 02 F1 | 	add	arg02, local02
17368     E0 12 B0 FD | 	call	#_psram_spin2_read1
1736c     0B 00 00 FF 
17370     C0 E4 85 F1 | 	sub	objptr, ##5824
17374                 | ' return c
17374     A7 FA 01 FB | 	rdlong	result1, fp
17378     A7 F0 03 F6 | 	mov	ptra, fp
1737c     B2 00 A0 FD | 	call	#popregs_
17380                 | _hg010b_spin2_getpixel2_ret
17380     2D 00 64 FD | 	ret
17384                 | 
17384                 | '   
17384                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
17384                 | ' 
17384                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
17384                 | _hg010b_spin2_fastline
17384     02 4A 05 F6 | 	mov	COUNT_, #2
17388     A8 00 A0 FD | 	call	#pushregs_
1738c     09 1F 02 F6 | 	mov	local01, arg01
17390     0A 21 02 F6 | 	mov	local02, arg02
17394                 | ' 
17394                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
17394     00 16 56 F2 | 	cmps	arg03, #0 wc
17398     F4 00 90 CD |  if_b	jmp	#LR__1780
1739c     01 00 00 FF 
173a0     26 E4 05 F1 | 	add	objptr, ##550
173a4     F2 1A 02 FB | 	rdlong	arg05, objptr
173a8     01 00 00 FF 
173ac     26 E4 85 F1 | 	sub	objptr, ##550
173b0     0D 17 52 F2 | 	cmps	arg03, arg05 wc
173b4     D8 00 90 3D |  if_ae	jmp	#LR__1780
173b8     00 1E 56 F2 | 	cmps	local01, #0 wc
173bc     00 20 56 C2 |  if_b	cmps	local02, #0 wc
173c0     CC 00 90 CD |  if_b	jmp	#LR__1780
173c4     01 00 00 FF 
173c8     22 E4 05 F1 | 	add	objptr, ##546
173cc     F2 1A 02 FB | 	rdlong	arg05, objptr
173d0     01 00 00 FF 
173d4     22 E4 85 F1 | 	sub	objptr, ##546
173d8     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
173dc     01 00 00 1F 
173e0     22 E4 05 11 |  if_a	add	objptr, ##546
173e4     F2 12 02 1B |  if_a	rdlong	arg01, objptr
173e8     01 00 00 1F 
173ec     22 E4 85 11 |  if_a	sub	objptr, ##546
173f0     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
173f4                 | '   return
173f4     98 00 90 1D |  if_a	jmp	#LR__1780
173f8     10 1F 5A F2 | 	cmps	local01, local02 wcz
173fc     0F 1B 02 16 |  if_a	mov	arg05, local01
17400     10 1F 02 16 |  if_a	mov	local01, local02
17404     0D 21 02 16 |  if_a	mov	local02, arg05
17408     00 1E 56 F2 | 	cmps	local01, #0 wc
1740c     00 1E 06 C6 |  if_b	mov	local01, #0
17410     01 00 00 FF 
17414     22 E4 05 F1 | 	add	objptr, ##546
17418     F2 1A 02 FB | 	rdlong	arg05, objptr
1741c     01 00 00 FF 
17420     22 E4 85 F1 | 	sub	objptr, ##546
17424     0D 21 52 F2 | 	cmps	local02, arg05 wc
17428     01 00 00 3F 
1742c     22 E4 05 31 |  if_ae	add	objptr, ##546
17430     F2 20 02 3B |  if_ae	rdlong	local02, objptr
17434     01 00 00 3F 
17438     22 E4 85 31 |  if_ae	sub	objptr, ##546
1743c     D9 E4 05 F1 | 	add	objptr, #217
17440     F2 12 02 FB | 	rdlong	arg01, objptr
17444     14 E4 05 F1 | 	add	objptr, #20
17448     F2 1A 02 FB | 	rdlong	arg05, objptr
1744c     02 1A 66 F0 | 	shl	arg05, #2
17450     0B 1B 02 FD | 	qmul	arg05, arg03
17454                 | ' if x1>x2
17454                 | '   x1,x2:=x2,x1
17454                 | ' if x1<0 
17454                 | '   x1:=0
17454                 | ' if x2>=xres
17454                 | '   x2:=xres-1  
17454     01 20 86 31 |  if_ae	sub	local02, #1
17458                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
17458     01 16 06 F6 | 	mov	arg03, #1
1745c     10 17 02 F1 | 	add	arg03, local02
17460     0F 17 82 F1 | 	sub	arg03, local01
17464     0C 15 02 F6 | 	mov	arg02, arg04
17468     00 18 06 F6 | 	mov	arg04, #0
1746c     01 1A 06 F6 | 	mov	arg05, #1
17470     0A 00 00 FF 
17474     D3 E5 05 F1 | 	add	objptr, ##5587
17478     18 20 62 FD | 	getqx	local02
1747c     0F 21 02 F1 | 	add	local02, local01
17480     10 13 02 F1 | 	add	arg01, local02
17484     FC 12 B0 FD | 	call	#_psram_spin2_fill
17488     0B 00 00 FF 
1748c     C0 E4 85 F1 | 	sub	objptr, ##5824
17490                 | LR__1780
17490     A7 F0 03 F6 | 	mov	ptra, fp
17494     B2 00 A0 FD | 	call	#popregs_
17498                 | _hg010b_spin2_fastline_ret
17498     2D 00 64 FD | 	ret
1749c                 | 
1749c                 | ' 
1749c                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1749c                 | _hg010b_spin2_draw
1749c     0E 4A 05 F6 | 	mov	COUNT_, #14
174a0     A8 00 A0 FD | 	call	#pushregs_
174a4     09 1F 02 F6 | 	mov	local01, arg01
174a8     0A 21 02 F6 | 	mov	local02, arg02
174ac     0B 23 02 F6 | 	mov	local03, arg03
174b0     0C 25 02 F6 | 	mov	local04, arg04
174b4     0D 27 02 F6 | 	mov	local05, arg05
174b8                 | ' 
174b8                 | ' if (y1==y2)
174b8     12 21 0A F2 | 	cmp	local02, local04 wz
174bc     18 00 90 5D |  if_ne	jmp	#LR__1790
174c0                 | '   fastline(x1,x2,y1,c)
174c0     0F 13 02 F6 | 	mov	arg01, local01
174c4     11 15 02 F6 | 	mov	arg02, local03
174c8     10 17 02 F6 | 	mov	arg03, local02
174cc     13 19 02 F6 | 	mov	arg04, local05
174d0     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
174d4     F8 00 90 FD | 	jmp	#LR__1796
174d8                 | LR__1790
174d8                 | ' else  
174d8                 | '   x:=x1
174d8     0F 29 02 F6 | 	mov	local06, local01
174dc                 | '   y:=y1
174dc     10 2B 02 F6 | 	mov	local07, local02
174e0                 | ' 
174e0                 | '   if (x1<x2) 
174e0     11 1F 52 F2 | 	cmps	local01, local03 wc
174e4                 | '     xi:=1
174e4     01 2C 06 C6 |  if_b	mov	local08, #1
174e8                 | '     dx:=x2-x1
174e8     11 2F 02 C6 |  if_b	mov	local09, local03
174ec     0F 2F 82 C1 |  if_b	sub	local09, local01
174f0                 | '   else
174f0                 | '     xi:=-1
174f0     01 2C 66 36 |  if_ae	neg	local08, #1
174f4                 | '     dx:=x1-x2
174f4     11 1F 82 31 |  if_ae	sub	local01, local03
174f8     0F 2F 02 36 |  if_ae	mov	local09, local01
174fc                 | '   
174fc                 | '   if (y1<y2) 
174fc     12 21 52 F2 | 	cmps	local02, local04 wc
17500                 | '     yi:=1
17500     01 30 06 C6 |  if_b	mov	local10, #1
17504                 | '     dy:=y2-y1
17504     12 33 02 C6 |  if_b	mov	local11, local04
17508     10 33 82 C1 |  if_b	sub	local11, local02
1750c                 | '   else
1750c                 | '     yi:=-1
1750c     01 30 66 36 |  if_ae	neg	local10, #1
17510                 | '     dy:=y1-y2
17510     12 21 82 31 |  if_ae	sub	local02, local04
17514     10 33 02 36 |  if_ae	mov	local11, local02
17518                 | ' 
17518                 | '   putpixel(x,y,c)
17518     13 17 02 F6 | 	mov	arg03, local05
1751c     14 13 02 F6 | 	mov	arg01, local06
17520     15 15 02 F6 | 	mov	arg02, local07
17524     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
17528                 | ' 
17528                 | '   if (dx>dy)
17528     19 2F 5A F2 | 	cmps	local09, local11 wcz
1752c     50 00 90 ED |  if_be	jmp	#LR__1792
17530                 | '     ai:=(dy-dx)*2
17530     19 35 02 F6 | 	mov	local12, local11
17534     17 35 82 F1 | 	sub	local12, local09
17538     01 34 66 F0 | 	shl	local12, #1
1753c                 | '     bi:=dy*2
1753c     01 32 66 F0 | 	shl	local11, #1
17540     19 37 02 F6 | 	mov	local13, local11
17544                 | '     d:= bi-dx
17544     1B 39 02 F6 | 	mov	local14, local13
17548     17 39 82 F1 | 	sub	local14, local09
1754c                 | '     repeat while (x<>x2) 
1754c                 | LR__1791
1754c     11 29 0A F2 | 	cmp	local06, local03 wz
17550     7C 00 90 AD |  if_e	jmp	#LR__1795
17554                 | '       if (d>=0) 
17554     00 38 56 F2 | 	cmps	local14, #0 wc
17558                 | '         x+=xi
17558     16 29 02 31 |  if_ae	add	local06, local08
1755c                 | '         y+=yi
1755c     18 2B 02 31 |  if_ae	add	local07, local10
17560                 | '         d+=ai
17560     1A 39 02 31 |  if_ae	add	local14, local12
17564                 | '       else
17564                 | '         d+=bi
17564     1B 39 02 C1 |  if_b	add	local14, local13
17568                 | '         x+=xi
17568     16 29 02 C1 |  if_b	add	local06, local08
1756c                 | '       putpixel(x,y,c)
1756c     14 13 02 F6 | 	mov	arg01, local06
17570     15 15 02 F6 | 	mov	arg02, local07
17574     13 17 02 F6 | 	mov	arg03, local05
17578     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1757c     CC FF 9F FD | 	jmp	#LR__1791
17580                 | LR__1792
17580                 | '   else
17580                 | '     ai:=(dx-dy)*2
17580     17 35 02 F6 | 	mov	local12, local09
17584     19 35 82 F1 | 	sub	local12, local11
17588     01 34 66 F0 | 	shl	local12, #1
1758c                 | '     bi:=dx*2
1758c     01 2E 66 F0 | 	shl	local09, #1
17590     17 37 02 F6 | 	mov	local13, local09
17594                 | '     d:=bi-dy
17594     1B 39 02 F6 | 	mov	local14, local13
17598     19 39 82 F1 | 	sub	local14, local11
1759c                 | '     repeat while (y<>y2)
1759c                 | LR__1793
1759c     12 2B 0A F2 | 	cmp	local07, local04 wz
175a0     2C 00 90 AD |  if_e	jmp	#LR__1794
175a4                 | '       if (d>=0)
175a4     00 38 56 F2 | 	cmps	local14, #0 wc
175a8                 | '         x+=xi
175a8     16 29 02 31 |  if_ae	add	local06, local08
175ac                 | '         y+=yi
175ac     18 2B 02 31 |  if_ae	add	local07, local10
175b0                 | '         d+=ai
175b0     1A 39 02 31 |  if_ae	add	local14, local12
175b4                 | '       else
175b4                 | '         d+=bi
175b4     1B 39 02 C1 |  if_b	add	local14, local13
175b8                 | '         y+=yi
175b8     18 2B 02 C1 |  if_b	add	local07, local10
175bc                 | '       putpixel(x, y,c)
175bc     14 13 02 F6 | 	mov	arg01, local06
175c0     15 15 02 F6 | 	mov	arg02, local07
175c4     13 17 02 F6 | 	mov	arg03, local05
175c8     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
175cc     CC FF 9F FD | 	jmp	#LR__1793
175d0                 | LR__1794
175d0                 | LR__1795
175d0                 | LR__1796
175d0     A7 F0 03 F6 | 	mov	ptra, fp
175d4     B2 00 A0 FD | 	call	#popregs_
175d8                 | _hg010b_spin2_draw_ret
175d8     2D 00 64 FD | 	ret
175dc                 | 
175dc                 | '  
175dc                 | ' pub fillpush(val) 
175dc                 | _hg010b_spin2_fillpush
175dc                 | ' fillstack[fillptr]:=val
175dc     0B 00 00 FF 
175e0     B6 E4 05 F1 | 	add	objptr, ##5814
175e4     F2 00 02 FB | 	rdlong	_var01, objptr
175e8     02 00 66 F0 | 	shl	_var01, #2
175ec     0A 00 00 FF 
175f0     00 E4 85 F1 | 	sub	objptr, ##5120
175f4     F2 00 02 F1 | 	add	_var01, objptr
175f8     00 13 62 FC | 	wrlong	arg01, _var01
175fc                 | ' fillptr+=1   
175fc     0A 00 00 FF 
17600     00 E4 05 F1 | 	add	objptr, ##5120
17604     F2 00 02 FB | 	rdlong	_var01, objptr
17608     01 00 06 F1 | 	add	_var01, #1
1760c     F2 00 62 FC | 	wrlong	_var01, objptr
17610     0B 00 00 FF 
17614     B6 E4 85 F1 | 	sub	objptr, ##5814
17618                 | _hg010b_spin2_fillpush_ret
17618     2D 00 64 FD | 	ret
1761c                 | 
1761c                 | ' 
1761c                 | '     
1761c                 | ' pub fillpop() : val
1761c                 | _hg010b_spin2_fillpop
1761c                 | ' 
1761c                 | ' fillptr-=1
1761c     0B 00 00 FF 
17620     B6 E4 05 F1 | 	add	objptr, ##5814
17624     F2 FA 01 FB | 	rdlong	result1, objptr
17628     01 FA 85 F1 | 	sub	result1, #1
1762c     F2 FA 61 FC | 	wrlong	result1, objptr
17630                 | ' if fillptr<0
17630     0B 00 00 FF 
17634     B6 E4 85 F1 | 	sub	objptr, ##5814
17638     00 FA 55 F2 | 	cmps	result1, #0 wc
1763c                 | '   fillptr:=0
1763c     0B 00 00 CF 
17640     B6 E4 05 C1 |  if_b	add	objptr, ##5814
17644     F2 00 68 CC |  if_b	wrlong	#0, objptr
17648     0B 00 00 CF 
1764c     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
17650                 | '   val:=-12345
17650     E7 FF 7F CF 
17654     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
17658     28 00 90 CD |  if_b	jmp	#LR__1800
1765c                 | ' else 
1765c                 | '   val:=fillstack[fillptr]
1765c     0B 00 00 FF 
17660     B6 E4 05 F1 | 	add	objptr, ##5814
17664     F2 00 02 FB | 	rdlong	_var01, objptr
17668     02 00 66 F0 | 	shl	_var01, #2
1766c     0A 00 00 FF 
17670     00 E4 85 F1 | 	sub	objptr, ##5120
17674     F2 00 02 F1 | 	add	_var01, objptr
17678     00 01 02 FB | 	rdlong	_var01, _var01
1767c     01 00 00 FF 
17680     B6 E4 85 F1 | 	sub	objptr, ##694
17684                 | LR__1800
17684                 | ' return val
17684     00 FB 01 F6 | 	mov	result1, _var01
17688                 | _hg010b_spin2_fillpop_ret
17688     2D 00 64 FD | 	ret
1768c                 | 
1768c                 | ' 
1768c                 | '       
1768c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1768c                 | _hg010b_spin2_fill
1768c     0B 4A 05 F6 | 	mov	COUNT_, #11
17690     A8 00 A0 FD | 	call	#pushregs_
17694                 | ' 
17694                 | ' newcolor:=newcolor & 255
17694     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
17698                 | ' oldcolor:=oldcolor & 255
17698     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1769c                 | ' 
1769c                 | ' if (oldcolor == newcolor) 
1769c     0F 21 0A F2 | 	cmp	local02, local01 wz
176a0                 | '   return
176a0     70 02 90 AD |  if_e	jmp	#LR__1819
176a4                 | ' 
176a4                 | ' fillptr:=0
176a4     0B 00 00 FF 
176a8     B6 E4 05 F1 | 	add	objptr, ##5814
176ac     F2 00 68 FC | 	wrlong	#0, objptr
176b0                 | ' fillmax:=0
176b0     04 E4 05 F1 | 	add	objptr, #4
176b4     F2 00 68 FC | 	wrlong	#0, objptr
176b8     0B 00 00 FF 
176bc     BA E4 85 F1 | 	sub	objptr, ##5818
176c0                 | ' fillpush(x)
176c0     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
176c4                 | ' fillpush(y)
176c4     0A 13 02 F6 | 	mov	arg01, arg02
176c8     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
176cc                 | ' y:=fillpop()
176cc     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
176d0     FD 22 02 F6 | 	mov	local03, result1
176d4                 | ' x:=fillpop()
176d4     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
176d8     FD 24 02 F6 | 	mov	local04, result1
176dc                 | ' 'pinhigh(38)
176dc                 | ' repeat while (x>-1)       
176dc                 | LR__1810
176dc     00 24 56 F2 | 	cmps	local04, #0 wc
176e0     30 02 90 CD |  if_b	jmp	#LR__1818
176e4                 | '  ' pintoggle(39)
176e4                 | '   x1 := x
176e4     12 27 02 F6 | 	mov	local05, local04
176e8                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
176e8                 | LR__1811
176e8     00 28 06 F6 | 	mov	local06, #0
176ec     00 2A 06 F6 | 	mov	local07, #0
176f0     00 26 56 F2 | 	cmps	local05, #0 wc
176f4     01 2A 66 36 |  if_ae	neg	local07, #1
176f8     00 2A 0E F2 | 	cmp	local07, #0 wz
176fc     00 28 26 56 |  if_ne	not	local06, #0
17700     00 2C 06 F6 | 	mov	local08, #0
17704     00 2E 06 F6 | 	mov	local09, #0
17708     11 15 02 F6 | 	mov	arg02, local03
1770c     13 13 02 F6 | 	mov	arg01, local05
17710     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
17714     10 FB 09 F2 | 	cmp	result1, local02 wz
17718     00 2E 26 A6 |  if_e	not	local09, #0
1771c     00 2E 0E F2 | 	cmp	local09, #0 wz
17720     00 2C 26 56 |  if_ne	not	local08, #0
17724     16 29 CA F7 | 	test	local06, local08 wz
17728                 | '     x1--
17728     01 26 86 51 |  if_ne	sub	local05, #1
1772c     B8 FF 9F 5D |  if_ne	jmp	#LR__1811
17730                 | '   x1++
17730     01 26 06 F1 | 	add	local05, #1
17734                 | '   spanabove := 0
17734     00 30 06 F6 | 	mov	local10, #0
17738                 | '   spanbelow := 0
17738     00 32 06 F6 | 	mov	local11, #0
1773c                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1773c                 | LR__1812
1773c     00 28 06 F6 | 	mov	local06, #0
17740     02 00 00 FF 
17744     00 26 56 F2 | 	cmps	local05, ##1024 wc
17748     00 28 26 C6 |  if_b	not	local06, #0
1774c     00 2C 06 F6 | 	mov	local08, #0
17750     00 2E 06 F6 | 	mov	local09, #0
17754     11 15 02 F6 | 	mov	arg02, local03
17758     13 13 02 F6 | 	mov	arg01, local05
1775c     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
17760     10 FB 09 F2 | 	cmp	result1, local02 wz
17764     00 2E 26 A6 |  if_e	not	local09, #0
17768     00 2E 0E F2 | 	cmp	local09, #0 wz
1776c     00 2C 26 56 |  if_ne	not	local08, #0
17770     16 29 CA F7 | 	test	local06, local08 wz
17774     88 01 90 AD |  if_e	jmp	#LR__1817
17778                 | '     putpixel2 (x1,y, newcolor & 255)
17778     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1777c     13 13 02 F6 | 	mov	arg01, local05
17780     11 15 02 F6 | 	mov	arg02, local03
17784     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
17788                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
17788     00 28 06 F6 | 	mov	local06, #0
1778c     00 2A 06 F6 | 	mov	local07, #0
17790     00 30 0E F2 | 	cmp	local10, #0 wz
17794     01 22 56 A2 |  if_e	cmps	local03, #1 wc
17798     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1779c     00 2A 0E F2 | 	cmp	local07, #0 wz
177a0     00 28 26 56 |  if_ne	not	local06, #0
177a4     00 2C 06 F6 | 	mov	local08, #0
177a8     00 2E 06 F6 | 	mov	local09, #0
177ac     11 15 02 F6 | 	mov	arg02, local03
177b0     01 14 86 F1 | 	sub	arg02, #1
177b4     13 13 02 F6 | 	mov	arg01, local05
177b8     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
177bc     10 FB 09 F2 | 	cmp	result1, local02 wz
177c0     00 2E 26 A6 |  if_e	not	local09, #0
177c4     00 2E 0E F2 | 	cmp	local09, #0 wz
177c8     00 2C 26 56 |  if_ne	not	local08, #0
177cc     16 29 CA F7 | 	test	local06, local08 wz
177d0     1C 00 90 AD |  if_e	jmp	#LR__1813
177d4                 | '       fillpush(x1)
177d4     13 13 02 F6 | 	mov	arg01, local05
177d8     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
177dc                 | '       fillpush(y-1)
177dc     11 13 02 F6 | 	mov	arg01, local03
177e0     01 12 86 F1 | 	sub	arg01, #1
177e4     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
177e8                 | '       spanabove := 1 
177e8     01 30 06 F6 | 	mov	local10, #1
177ec     4C 00 90 FD | 	jmp	#LR__1814
177f0                 | LR__1813
177f0                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
177f0     00 28 06 F6 | 	mov	local06, #0
177f4     00 2A 06 F6 | 	mov	local07, #0
177f8     00 30 0E F2 | 	cmp	local10, #0 wz
177fc     01 22 56 52 |  if_ne	cmps	local03, #1 wc
17800     01 2A 66 16 |  if_a	neg	local07, #1
17804     00 2A 0E F2 | 	cmp	local07, #0 wz
17808     00 28 26 56 |  if_ne	not	local06, #0
1780c     00 2C 06 F6 | 	mov	local08, #0
17810     00 2E 06 F6 | 	mov	local09, #0
17814     11 15 02 F6 | 	mov	arg02, local03
17818     01 14 86 F1 | 	sub	arg02, #1
1781c     13 13 02 F6 | 	mov	arg01, local05
17820     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
17824     10 FB 09 F2 | 	cmp	result1, local02 wz
17828     00 2E 26 56 |  if_ne	not	local09, #0
1782c     00 2E 0E F2 | 	cmp	local09, #0 wz
17830     00 2C 26 56 |  if_ne	not	local08, #0
17834     16 29 CA F7 | 	test	local06, local08 wz
17838                 | '       spanabove := 0 
17838     00 30 06 56 |  if_ne	mov	local10, #0
1783c                 | LR__1814
1783c                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1783c     00 28 06 F6 | 	mov	local06, #0
17840     00 2A 06 F6 | 	mov	local07, #0
17844     00 32 0E F2 | 	cmp	local11, #0 wz
17848     01 00 00 AF 
1784c     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
17850     01 2A 66 86 |  if_c_and_z	neg	local07, #1
17854     00 2A 0E F2 | 	cmp	local07, #0 wz
17858     00 28 26 56 |  if_ne	not	local06, #0
1785c     00 2C 06 F6 | 	mov	local08, #0
17860     00 2E 06 F6 | 	mov	local09, #0
17864     11 15 02 F6 | 	mov	arg02, local03
17868     01 14 06 F1 | 	add	arg02, #1
1786c     13 13 02 F6 | 	mov	arg01, local05
17870     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
17874     10 FB 09 F2 | 	cmp	result1, local02 wz
17878     00 2E 26 A6 |  if_e	not	local09, #0
1787c     00 2E 0E F2 | 	cmp	local09, #0 wz
17880     00 2C 26 56 |  if_ne	not	local08, #0
17884     16 29 CA F7 | 	test	local06, local08 wz
17888     1C 00 90 AD |  if_e	jmp	#LR__1815
1788c                 | '       fillpush(x1)
1788c     13 13 02 F6 | 	mov	arg01, local05
17890     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
17894                 | '       fillpush(y + 1)
17894     11 13 02 F6 | 	mov	arg01, local03
17898     01 12 06 F1 | 	add	arg01, #1
1789c     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
178a0                 | '       spanBelow := 1
178a0     01 32 06 F6 | 	mov	local11, #1
178a4     50 00 90 FD | 	jmp	#LR__1816
178a8                 | LR__1815
178a8                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
178a8     00 28 06 F6 | 	mov	local06, #0
178ac     00 2A 06 F6 | 	mov	local07, #0
178b0     00 32 0E F2 | 	cmp	local11, #0 wz
178b4     01 00 00 5F 
178b8     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
178bc     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
178c0     00 2A 0E F2 | 	cmp	local07, #0 wz
178c4     00 28 26 56 |  if_ne	not	local06, #0
178c8     00 2C 06 F6 | 	mov	local08, #0
178cc     00 2E 06 F6 | 	mov	local09, #0
178d0     11 15 02 F6 | 	mov	arg02, local03
178d4     01 14 06 F1 | 	add	arg02, #1
178d8     13 13 02 F6 | 	mov	arg01, local05
178dc     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
178e0     10 FB 09 F2 | 	cmp	result1, local02 wz
178e4     00 2E 26 56 |  if_ne	not	local09, #0
178e8     00 2E 0E F2 | 	cmp	local09, #0 wz
178ec     00 2C 26 56 |  if_ne	not	local08, #0
178f0     16 29 CA F7 | 	test	local06, local08 wz
178f4                 | '       spanbelow := 0
178f4     00 32 06 56 |  if_ne	mov	local11, #0
178f8                 | LR__1816
178f8                 | '     x1++
178f8     01 26 06 F1 | 	add	local05, #1
178fc     3C FE 9F FD | 	jmp	#LR__1812
17900                 | LR__1817
17900                 | '   y:=fillpop()
17900     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
17904     FD 22 02 F6 | 	mov	local03, result1
17908                 | '   x:=fillpop()
17908     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1790c     FD 24 02 F6 | 	mov	local04, result1
17910     C8 FD 9F FD | 	jmp	#LR__1810
17914                 | LR__1818
17914                 | LR__1819
17914     A7 F0 03 F6 | 	mov	ptra, fp
17918     B2 00 A0 FD | 	call	#popregs_
1791c                 | _hg010b_spin2_fill_ret
1791c     2D 00 64 FD | 	ret
17920                 | 
17920                 | ' 'pinlow(38)    
17920                 | ' 
17920                 | ' '-- A filled circle -----------------------------------------------------
17920                 | ' 
17920                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
17920                 | _hg010b_spin2_fcircle
17920     08 4A 05 F6 | 	mov	COUNT_, #8
17924     A8 00 A0 FD | 	call	#pushregs_
17928     0B 1F 02 F6 | 	mov	local01, arg03
1792c     FF FF 7F FF 
17930     FE 1F 06 FD | 	qmul	local01, ##-2
17934     09 21 02 F6 | 	mov	local02, arg01
17938     0A 23 02 F6 | 	mov	local03, arg02
1793c     0C 25 02 F6 | 	mov	local04, arg04
17940                 | ' 
17940                 | ' d:=5-4*r
17940     0F 19 02 F6 | 	mov	arg04, local01
17944     02 18 66 F0 | 	shl	arg04, #2
17948     05 26 06 F6 | 	mov	local05, #5
1794c     0C 27 82 F1 | 	sub	local05, arg04
17950                 | ' x:=0
17950     00 28 06 F6 | 	mov	local06, #0
17954                 | ' y:=r
17954                 | ' da:=(-2*r+5)*4
17954                 | ' db:=3*4
17954     0C 2A 06 F6 | 	mov	local07, #12
17958                 | ' repeat while (x<=y) 
17958     18 2C 62 FD | 	getqx	local08
1795c     05 2C 06 F1 | 	add	local08, #5
17960     02 2C 66 F0 | 	shl	local08, #2
17964                 | LR__1820
17964     0F 29 5A F2 | 	cmps	local06, local01 wcz
17968     B4 00 90 1D |  if_a	jmp	#LR__1822
1796c                 | '   fastline(x0-x,x0+x,y0-y,c)
1796c     10 13 02 F6 | 	mov	arg01, local02
17970     14 13 82 F1 | 	sub	arg01, local06
17974     10 15 02 F6 | 	mov	arg02, local02
17978     14 15 02 F1 | 	add	arg02, local06
1797c     11 17 02 F6 | 	mov	arg03, local03
17980     0F 17 82 F1 | 	sub	arg03, local01
17984     12 19 02 F6 | 	mov	arg04, local04
17988     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1798c                 | '   fastline(x0-x,x0+x,y0+y,c)
1798c     10 13 02 F6 | 	mov	arg01, local02
17990     14 13 82 F1 | 	sub	arg01, local06
17994     10 15 02 F6 | 	mov	arg02, local02
17998     14 15 02 F1 | 	add	arg02, local06
1799c     11 17 02 F6 | 	mov	arg03, local03
179a0     0F 17 02 F1 | 	add	arg03, local01
179a4     12 19 02 F6 | 	mov	arg04, local04
179a8     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
179ac                 | '   fastline(x0-y,x0+y,y0-x,c)
179ac     10 13 02 F6 | 	mov	arg01, local02
179b0     0F 13 82 F1 | 	sub	arg01, local01
179b4     10 15 02 F6 | 	mov	arg02, local02
179b8     0F 15 02 F1 | 	add	arg02, local01
179bc     11 17 02 F6 | 	mov	arg03, local03
179c0     14 17 82 F1 | 	sub	arg03, local06
179c4     12 19 02 F6 | 	mov	arg04, local04
179c8     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
179cc                 | '   fastline(x0-y,x0+y,y0+x,c)
179cc     10 13 02 F6 | 	mov	arg01, local02
179d0     0F 13 82 F1 | 	sub	arg01, local01
179d4     10 15 02 F6 | 	mov	arg02, local02
179d8     0F 15 02 F1 | 	add	arg02, local01
179dc     11 17 02 F6 | 	mov	arg03, local03
179e0     14 17 02 F1 | 	add	arg03, local06
179e4     12 19 02 F6 | 	mov	arg04, local04
179e8     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
179ec                 | '   if d>0 
179ec     01 26 56 F2 | 	cmps	local05, #1 wc
179f0     18 00 90 CD |  if_b	jmp	#LR__1821
179f4                 | '     d+=da
179f4     16 27 02 F1 | 	add	local05, local08
179f8                 | '     y-=1
179f8     01 1E 86 F1 | 	sub	local01, #1
179fc                 | '     x+=1
179fc     01 28 06 F1 | 	add	local06, #1
17a00                 | '     da+=4*4
17a00     10 2C 06 F1 | 	add	local08, #16
17a04                 | '     db+=2*4
17a04     08 2A 06 F1 | 	add	local07, #8
17a08     58 FF 9F FD | 	jmp	#LR__1820
17a0c                 | LR__1821
17a0c                 | '   else
17a0c                 | '     d+=db
17a0c     15 27 02 F1 | 	add	local05, local07
17a10                 | '     x+=1
17a10     01 28 06 F1 | 	add	local06, #1
17a14                 | '     da+=2*4
17a14     08 2C 06 F1 | 	add	local08, #8
17a18                 | '     db+=2*4
17a18     08 2A 06 F1 | 	add	local07, #8
17a1c     44 FF 9F FD | 	jmp	#LR__1820
17a20                 | LR__1822
17a20     A7 F0 03 F6 | 	mov	ptra, fp
17a24     B2 00 A0 FD | 	call	#popregs_
17a28                 | _hg010b_spin2_fcircle_ret
17a28     2D 00 64 FD | 	ret
17a2c                 | 
17a2c                 | '  
17a2c                 | ' '-- A circle ------------------------------------------------------------ 
17a2c                 | '  
17a2c                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
17a2c                 | _hg010b_spin2_circle
17a2c     08 4A 05 F6 | 	mov	COUNT_, #8
17a30     A8 00 A0 FD | 	call	#pushregs_
17a34     0B 1F 02 F6 | 	mov	local01, arg03
17a38     FF FF 7F FF 
17a3c     FE 1F 06 FD | 	qmul	local01, ##-2
17a40     09 21 02 F6 | 	mov	local02, arg01
17a44     0A 23 02 F6 | 	mov	local03, arg02
17a48     0C 25 02 F6 | 	mov	local04, arg04
17a4c                 | ' 
17a4c                 | '  
17a4c                 | ' d:=5-4*r
17a4c     0F 19 02 F6 | 	mov	arg04, local01
17a50     02 18 66 F0 | 	shl	arg04, #2
17a54     05 26 06 F6 | 	mov	local05, #5
17a58     0C 27 82 F1 | 	sub	local05, arg04
17a5c                 | ' x:=0
17a5c     00 28 06 F6 | 	mov	local06, #0
17a60                 | ' y:=r
17a60                 | ' da:=(-2*r+5)*4
17a60                 | ' db:=3*4
17a60     0C 2A 06 F6 | 	mov	local07, #12
17a64                 | ' repeat while (x<=y) 
17a64     18 2C 62 FD | 	getqx	local08
17a68     05 2C 06 F1 | 	add	local08, #5
17a6c     02 2C 66 F0 | 	shl	local08, #2
17a70                 | LR__1830
17a70     0F 29 5A F2 | 	cmps	local06, local01 wcz
17a74     F4 00 90 1D |  if_a	jmp	#LR__1832
17a78                 | '   putpixel(x0-x,y0-y,c)
17a78     10 13 02 F6 | 	mov	arg01, local02
17a7c     14 13 82 F1 | 	sub	arg01, local06
17a80     11 15 02 F6 | 	mov	arg02, local03
17a84     0F 15 82 F1 | 	sub	arg02, local01
17a88     12 17 02 F6 | 	mov	arg03, local04
17a8c     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
17a90                 | '   putpixel(x0-x,y0+y,c)
17a90     10 13 02 F6 | 	mov	arg01, local02
17a94     14 13 82 F1 | 	sub	arg01, local06
17a98     11 15 02 F6 | 	mov	arg02, local03
17a9c     0F 15 02 F1 | 	add	arg02, local01
17aa0     12 17 02 F6 | 	mov	arg03, local04
17aa4     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
17aa8                 | '   putpixel(x0+x,y0-y,c)
17aa8     10 13 02 F6 | 	mov	arg01, local02
17aac     14 13 02 F1 | 	add	arg01, local06
17ab0     11 15 02 F6 | 	mov	arg02, local03
17ab4     0F 15 82 F1 | 	sub	arg02, local01
17ab8     12 17 02 F6 | 	mov	arg03, local04
17abc     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
17ac0                 | '   putpixel(x0+x,y0+y,c)
17ac0     10 13 02 F6 | 	mov	arg01, local02
17ac4     14 13 02 F1 | 	add	arg01, local06
17ac8     11 15 02 F6 | 	mov	arg02, local03
17acc     0F 15 02 F1 | 	add	arg02, local01
17ad0     12 17 02 F6 | 	mov	arg03, local04
17ad4     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
17ad8                 | '   putpixel(x0-y,y0-x,c)
17ad8     10 13 02 F6 | 	mov	arg01, local02
17adc     0F 13 82 F1 | 	sub	arg01, local01
17ae0     11 15 02 F6 | 	mov	arg02, local03
17ae4     14 15 82 F1 | 	sub	arg02, local06
17ae8     12 17 02 F6 | 	mov	arg03, local04
17aec     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
17af0                 | '   putpixel(x0-y,y0+x,c)
17af0     10 13 02 F6 | 	mov	arg01, local02
17af4     0F 13 82 F1 | 	sub	arg01, local01
17af8     11 15 02 F6 | 	mov	arg02, local03
17afc     14 15 02 F1 | 	add	arg02, local06
17b00     12 17 02 F6 | 	mov	arg03, local04
17b04     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
17b08                 | '   putpixel(x0+y,y0-x,c)
17b08     10 13 02 F6 | 	mov	arg01, local02
17b0c     0F 13 02 F1 | 	add	arg01, local01
17b10     11 15 02 F6 | 	mov	arg02, local03
17b14     14 15 82 F1 | 	sub	arg02, local06
17b18     12 17 02 F6 | 	mov	arg03, local04
17b1c     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
17b20                 | '   putpixel(x0+y,y0+x,c)
17b20     10 13 02 F6 | 	mov	arg01, local02
17b24     0F 13 02 F1 | 	add	arg01, local01
17b28     11 15 02 F6 | 	mov	arg02, local03
17b2c     14 15 02 F1 | 	add	arg02, local06
17b30     12 17 02 F6 | 	mov	arg03, local04
17b34     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
17b38                 | '   if d>0 
17b38     01 26 56 F2 | 	cmps	local05, #1 wc
17b3c     18 00 90 CD |  if_b	jmp	#LR__1831
17b40                 | '     d+=da
17b40     16 27 02 F1 | 	add	local05, local08
17b44                 | '     y-=1
17b44     01 1E 86 F1 | 	sub	local01, #1
17b48                 | '     x+=1
17b48     01 28 06 F1 | 	add	local06, #1
17b4c                 | '     da+=4*4
17b4c     10 2C 06 F1 | 	add	local08, #16
17b50                 | '     db+=2*4
17b50     08 2A 06 F1 | 	add	local07, #8
17b54     18 FF 9F FD | 	jmp	#LR__1830
17b58                 | LR__1831
17b58                 | '   else
17b58                 | '     d+=db
17b58     15 27 02 F1 | 	add	local05, local07
17b5c                 | '     x+=1
17b5c     01 28 06 F1 | 	add	local06, #1
17b60                 | '     da+=2*4
17b60     08 2C 06 F1 | 	add	local08, #8
17b64                 | '     db+=2*4
17b64     08 2A 06 F1 | 	add	local07, #8
17b68     04 FF 9F FD | 	jmp	#LR__1830
17b6c                 | LR__1832
17b6c     A7 F0 03 F6 | 	mov	ptra, fp
17b70     B2 00 A0 FD | 	call	#popregs_
17b74                 | _hg010b_spin2_circle_ret
17b74     2D 00 64 FD | 	ret
17b78                 | 
17b78                 | '     
17b78                 | ' '-- A frame (an empty rectangle) ---------------------------------------
17b78                 | ' 
17b78                 | ' pub frame(x1,y1,x2,y2,c)
17b78                 | _hg010b_spin2_frame
17b78     05 4A 05 F6 | 	mov	COUNT_, #5
17b7c     A8 00 A0 FD | 	call	#pushregs_
17b80     09 1F 02 F6 | 	mov	local01, arg01
17b84     0A 21 02 F6 | 	mov	local02, arg02
17b88     0B 23 02 F6 | 	mov	local03, arg03
17b8c     0C 25 02 F6 | 	mov	local04, arg04
17b90     0D 27 02 F6 | 	mov	local05, arg05
17b94                 | ' 
17b94                 | ' fastline(x1,x2,y1,c)
17b94     0F 13 02 F6 | 	mov	arg01, local01
17b98     11 15 02 F6 | 	mov	arg02, local03
17b9c     10 17 02 F6 | 	mov	arg03, local02
17ba0     13 19 02 F6 | 	mov	arg04, local05
17ba4     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
17ba8                 | ' fastline(x1,x2,y2,c)
17ba8     0F 13 02 F6 | 	mov	arg01, local01
17bac     11 15 02 F6 | 	mov	arg02, local03
17bb0     12 17 02 F6 | 	mov	arg03, local04
17bb4     13 19 02 F6 | 	mov	arg04, local05
17bb8     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
17bbc                 | ' line(x1,y1,x1,y2,c)
17bbc     0F 13 02 F6 | 	mov	arg01, local01
17bc0     10 15 02 F6 | 	mov	arg02, local02
17bc4     0F 17 02 F6 | 	mov	arg03, local01
17bc8     12 19 02 F6 | 	mov	arg04, local04
17bcc     13 1B 02 F6 | 	mov	arg05, local05
17bd0                 | ' draw(x1,y1,x2,y2,c)
17bd0     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
17bd4                 | ' line(x2,y1,x2,y2,c)
17bd4     11 13 02 F6 | 	mov	arg01, local03
17bd8     10 15 02 F6 | 	mov	arg02, local02
17bdc     11 17 02 F6 | 	mov	arg03, local03
17be0     12 19 02 F6 | 	mov	arg04, local04
17be4     13 1B 02 F6 | 	mov	arg05, local05
17be8                 | ' draw(x1,y1,x2,y2,c)
17be8     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
17bec     A7 F0 03 F6 | 	mov	ptra, fp
17bf0     B2 00 A0 FD | 	call	#popregs_
17bf4                 | _hg010b_spin2_frame_ret
17bf4     2D 00 64 FD | 	ret
17bf8                 | 
17bf8                 | ' 
17bf8                 | ' '-- A box (a filled rectangle) ----------------------------------------
17bf8                 | ' 
17bf8                 | ' pub box(x1,y1,x2,y2,c) |yy
17bf8                 | _hg010b_spin2_box
17bf8     06 4A 05 F6 | 	mov	COUNT_, #6
17bfc     A8 00 A0 FD | 	call	#pushregs_
17c00     09 1F 02 F6 | 	mov	local01, arg01
17c04     0A 21 02 F6 | 	mov	local02, arg02
17c08     0B 23 02 F6 | 	mov	local03, arg03
17c0c     0C 25 02 F6 | 	mov	local04, arg04
17c10     0D 27 02 F6 | 	mov	local05, arg05
17c14                 | ' 
17c14                 | ' repeat yy from y1 to y2
17c14     10 25 52 F2 | 	cmps	local04, local02 wc
17c18     01 28 86 F6 | 	negc	local06, #1
17c1c     14 25 02 F1 | 	add	local04, local06
17c20                 | LR__1840
17c20                 | '   fastline(x1,x2,yy,c)
17c20     0F 13 02 F6 | 	mov	arg01, local01
17c24     11 15 02 F6 | 	mov	arg02, local03
17c28     13 19 02 F6 | 	mov	arg04, local05
17c2c     10 17 02 F6 | 	mov	arg03, local02
17c30     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
17c34     14 21 02 F1 | 	add	local02, local06
17c38     12 21 0A F2 | 	cmp	local02, local04 wz
17c3c     E0 FF 9F 5D |  if_ne	jmp	#LR__1840
17c40     A7 F0 03 F6 | 	mov	ptra, fp
17c44     B2 00 A0 FD | 	call	#popregs_
17c48                 | _hg010b_spin2_box_ret
17c48     2D 00 64 FD | 	ret
17c4c                 | 
17c4c                 | '       
17c4c                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
17c4c                 | _hg010b_spin2_putcharxycgf
17c4c                 | ' 
17c4c                 | '  
17c4c                 | ' repeat yy from 0 to 15
17c4c     00 00 06 F6 | 	mov	_var01, #0
17c50     97 8C 48 FB | 	callpa	#(@LR__1852-@LR__1850)>>2,fcache_load_ptr_
17c54                 | LR__1850
17c54                 | ' 
17c54                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
17c54     91 E4 05 F1 | 	add	objptr, #145
17c58     F2 02 02 FB | 	rdlong	_var02, objptr
17c5c     0A 02 66 F0 | 	shl	_var02, #10
17c60     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
17c64     01 05 02 F1 | 	add	_var03, _var02
17c68     0B 03 02 F6 | 	mov	_var02, arg03
17c6c     04 02 66 F0 | 	shl	_var02, #4
17c70     01 05 02 F1 | 	add	_var03, _var02
17c74     00 05 02 F1 | 	add	_var03, _var01
17c78     02 05 C2 FA | 	rdbyte	_var03, _var03
17c7c                 | '   asm
17c7c     00 04 0E F4 | 	testb	_var03, #0 wz
17c80     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
17c84     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
17c88     01 04 0E F4 | 	testb	_var03, #1 wz
17c8c     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
17c90     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
17c94     02 04 0E F4 | 	testb	_var03, #2 wz
17c98     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
17c9c     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
17ca0     03 04 0E F4 | 	testb	_var03, #3 wz
17ca4     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
17ca8     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
17cac     04 04 0E F4 | 	testb	_var03, #4 wz
17cb0     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
17cb4     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
17cb8     05 04 0E F4 | 	testb	_var03, #5 wz
17cbc     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
17cc0     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
17cc4     06 04 0E F4 | 	testb	_var03, #6 wz
17cc8     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
17ccc     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
17cd0     07 04 0E F4 | 	testb	_var03, #7 wz
17cd4     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
17cd8     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
17cdc                 | '   
17cdc                 | '   ccc[0]:=c1
17cdc     99 E5 05 F1 | 	add	objptr, #409
17ce0     F2 06 62 FC | 	wrlong	_var04, objptr
17ce4                 | '   ccc[1]:=c2 
17ce4     04 E4 05 F1 | 	add	objptr, #4
17ce8     F2 08 62 FC | 	wrlong	_var05, objptr
17cec                 | '   long[mailbox0][2]:=8
17cec     49 E4 85 F1 | 	sub	objptr, #73
17cf0     F2 04 02 FB | 	rdlong	_var03, objptr
17cf4     08 04 06 F1 | 	add	_var03, #8
17cf8     02 11 68 FC | 	wrlong	#8, _var03
17cfc                 | '   long[mailbox0][1]:=@ccc
17cfc     45 E4 05 F1 | 	add	objptr, #69
17d00     F2 04 02 F6 | 	mov	_var03, objptr
17d04     45 E4 85 F1 | 	sub	objptr, #69
17d08     F2 02 02 FB | 	rdlong	_var02, objptr
17d0c     04 02 06 F1 | 	add	_var02, #4
17d10     01 05 62 FC | 	wrlong	_var03, _var02
17d14                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
17d14     0C E5 85 F1 | 	sub	objptr, #268
17d18     F2 04 02 FB | 	rdlong	_var03, objptr
17d1c     0A 03 02 F6 | 	mov	_var02, arg02
17d20     00 03 02 F1 | 	add	_var02, _var01
17d24     0A 02 66 F0 | 	shl	_var02, #10
17d28     09 0B 02 F6 | 	mov	_var06, arg01
17d2c     02 0A 66 F0 | 	shl	_var06, #2
17d30     05 03 02 F1 | 	add	_var02, _var06
17d34     01 05 02 F1 | 	add	_var03, _var02
17d38     00 00 78 FF 
17d3c     00 04 06 F1 | 	add	_var03, ##-268435456
17d40     0C E5 05 F1 | 	add	objptr, #268
17d44     F2 0A 02 FB | 	rdlong	_var06, objptr
17d48     05 05 62 FC | 	wrlong	_var03, _var06
17d4c                 | '   repeat
17d4c                 | LR__1851
17d4c     F2 04 02 FB | 	rdlong	_var03, objptr
17d50     02 03 02 FB | 	rdlong	_var02, _var03
17d54     00 02 56 F2 | 	cmps	_var02, #0 wc
17d58     F0 FF 9F CD |  if_b	jmp	#LR__1851
17d5c     E5 E5 85 F1 | 	sub	objptr, #485
17d60     01 00 06 F1 | 	add	_var01, #1
17d64     10 00 56 F2 | 	cmps	_var01, #16 wc
17d68     E8 FE 9F CD |  if_b	jmp	#LR__1850
17d6c                 | LR__1852
17d6c                 | _hg010b_spin2_putcharxycgf_ret
17d6c     2D 00 64 FD | 	ret
17d70                 | 
17d70                 | ' 
17d70                 | ' 
17d70                 | ' '**********************************************************************r***
17d70                 | ' '                                                                        *
17d70                 | ' ' Font related functions                                                 *
17d70                 | ' '                                                                        *
17d70                 | ' '*************************************************************************
17d70                 | ' 
17d70                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
17d70                 | ' 
17d70                 | ' pub setfontfamily(afontnum)
17d70                 | _hg010b_spin2_setfontfamily
17d70                 | ' 
17d70                 | ' font_family:=afontnum
17d70     91 E4 05 F1 | 	add	objptr, #145
17d74     F2 12 62 FC | 	wrlong	arg01, objptr
17d78     91 E4 85 F1 | 	sub	objptr, #145
17d7c                 | ' 'if afontnum==8
17d7c                 | ' '  font_ptr:=@amiga_font
17d7c                 | ' 
17d7c                 | ' if afontnum==4
17d7c     04 12 0E F2 | 	cmp	arg01, #4 wz
17d80                 | '   font_ptr:=@st_font
17d80     08 00 00 AF 
17d84     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
17d88     04 E4 05 A1 |  if_e	add	objptr, #4
17d8c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
17d90     04 E4 85 A1 |  if_e	sub	objptr, #4
17d94     08 00 00 AF 
17d98     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
17d9c                 | ' if afontnum==0
17d9c     00 12 0E F2 | 	cmp	arg01, #0 wz
17da0                 | '   font_ptr:=@vga_font
17da0     04 E4 05 A1 |  if_e	add	objptr, #4
17da4     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
17da8     04 E4 85 A1 |  if_e	sub	objptr, #4
17dac                 | _hg010b_spin2_setfontfamily_ret
17dac     2D 00 64 FD | 	ret
17db0                 | 
17db0                 | ' 
17db0                 | ' '*************************************************************************
17db0                 | ' '                                                                        *
17db0                 | ' '  Cursor functions                                                      *
17db0                 | ' '                                                                        *
17db0                 | ' '*************************************************************************
17db0                 | ' 
17db0                 | ' 
17db0                 | ' pub setcursorpos(x,y)
17db0                 | _hg010b_spin2_setcursorpos
17db0                 | ' 
17db0                 | ' ''---------- Set the (x,y) position of cursor
17db0                 | ' 
17db0                 | ' cursor_x:=x
17db0     38 E4 05 F1 | 	add	objptr, #56
17db4     F2 12 52 FC | 	wrword	arg01, objptr
17db8                 | ' cursor_y:=y
17db8     02 E4 05 F1 | 	add	objptr, #2
17dbc     F2 14 42 FC | 	wrbyte	arg02, objptr
17dc0                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17dc0     02 E4 85 F1 | 	sub	objptr, #2
17dc4     F2 14 E2 FA | 	rdword	arg02, objptr
17dc8     02 14 66 F0 | 	shl	arg02, #2
17dcc     02 E4 05 F1 | 	add	objptr, #2
17dd0     F2 16 C2 FA | 	rdbyte	arg03, objptr
17dd4     3A E4 85 F1 | 	sub	objptr, #58
17dd8     04 16 66 F0 | 	shl	arg03, #4
17ddc     11 12 06 F6 | 	mov	arg01, #17
17de0     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
17de4                 | _hg010b_spin2_setcursorpos_ret
17de4     2D 00 64 FD | 	ret
17de8                 | 
17de8                 | ' 
17de8                 | ' '*************************************************************************
17de8                 | ' '                                                                        *
17de8                 | ' '  VBlank functions                                                      *
17de8                 | ' '                                                                        *
17de8                 | ' '*************************************************************************
17de8                 | ' 
17de8                 | ' pub waitvbl(amount) | i
17de8                 | _hg010b_spin2_waitvbl
17de8     03 4A 05 F6 | 	mov	COUNT_, #3
17dec     A8 00 A0 FD | 	call	#pushregs_
17df0     09 1F 02 F6 | 	mov	local01, arg01
17df4                 | ' 
17df4                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
17df4                 | ' 
17df4                 | ' repeat i from 1 to amount
17df4     01 20 06 F6 | 	mov	local02, #1
17df8     01 1E 56 F2 | 	cmps	local01, #1 wc
17dfc     01 22 86 F6 | 	negc	local03, #1
17e00     11 1F 02 F1 | 	add	local01, local03
17e04                 | LR__1860
17e04                 | '   repeat until vblank==0
17e04                 | LR__1861
17e04     45 E4 05 F1 | 	add	objptr, #69
17e08     F2 12 0A FB | 	rdlong	arg01, objptr wz
17e0c     45 E4 85 F1 | 	sub	objptr, #69
17e10     0C 00 90 AD |  if_e	jmp	#LR__1862
17e14                 | '     waitus(100)
17e14     64 12 06 F6 | 	mov	arg01, #100
17e18     E0 16 B0 FD | 	call	#__system___waitus
17e1c     E4 FF 9F FD | 	jmp	#LR__1861
17e20                 | LR__1862
17e20                 | '   repeat until vblank==1
17e20                 | LR__1863
17e20     45 E4 05 F1 | 	add	objptr, #69
17e24     F2 12 02 FB | 	rdlong	arg01, objptr
17e28     45 E4 85 F1 | 	sub	objptr, #69
17e2c     01 12 0E F2 | 	cmp	arg01, #1 wz
17e30     0C 00 90 AD |  if_e	jmp	#LR__1864
17e34                 | '     waitus(100)
17e34     64 12 06 F6 | 	mov	arg01, #100
17e38     C0 16 B0 FD | 	call	#__system___waitus
17e3c     E0 FF 9F FD | 	jmp	#LR__1863
17e40                 | LR__1864
17e40     11 21 02 F1 | 	add	local02, local03
17e44     0F 21 0A F2 | 	cmp	local02, local01 wz
17e48     B8 FF 9F 5D |  if_ne	jmp	#LR__1860
17e4c     A7 F0 03 F6 | 	mov	ptra, fp
17e50     B2 00 A0 FD | 	call	#popregs_
17e54                 | _hg010b_spin2_waitvbl_ret
17e54     2D 00 64 FD | 	ret
17e58                 | 
17e58                 | ' 
17e58                 | ' 
17e58                 | ' pub cls(fc,bc)   :c,i
17e58                 | _hg010b_spin2_cls
17e58     02 4A 05 F6 | 	mov	COUNT_, #2
17e5c     A8 00 A0 FD | 	call	#pushregs_
17e60     09 1F 02 F6 | 	mov	local01, arg01
17e64     0A 21 02 F6 | 	mov	local02, arg02
17e68                 | ' 
17e68                 | ' c:=bc
17e68                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
17e68     D9 E4 05 F1 | 	add	objptr, #217
17e6c     F2 12 02 FB | 	rdlong	arg01, objptr
17e70     A5 E4 85 F1 | 	sub	objptr, #165
17e74     F2 16 02 FB | 	rdlong	arg03, objptr
17e78     02 16 66 F0 | 	shl	arg03, #2
17e7c     10 15 02 F6 | 	mov	arg02, local02
17e80     00 18 06 F6 | 	mov	arg04, #0
17e84     01 1A 06 F6 | 	mov	arg05, #1
17e88     0B 00 00 FF 
17e8c     8C E4 05 F1 | 	add	objptr, ##5772
17e90     F0 08 B0 FD | 	call	#_psram_spin2_fill
17e94                 | ' setwritecolors(fc,bc)
17e94                 | ' 
17e94                 | ' write_color:=ff
17e94     0B 00 00 FF 
17e98     83 E4 85 F1 | 	sub	objptr, ##5763
17e9c     F2 1E 62 FC | 	wrlong	local01, objptr
17ea0                 | ' write_background:=bb
17ea0     04 E4 05 F1 | 	add	objptr, #4
17ea4     F2 20 62 FC | 	wrlong	local02, objptr
17ea8                 | ' cursor_x:=0
17ea8     09 E4 85 F1 | 	sub	objptr, #9
17eac     F2 00 58 FC | 	wrword	#0, objptr
17eb0                 | ' cursor_y:=0
17eb0     02 E4 05 F1 | 	add	objptr, #2
17eb4     F2 00 48 FC | 	wrbyte	#0, objptr
17eb8                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17eb8     02 E4 85 F1 | 	sub	objptr, #2
17ebc     F2 14 E2 FA | 	rdword	arg02, objptr
17ec0     02 14 66 F0 | 	shl	arg02, #2
17ec4     02 E4 05 F1 | 	add	objptr, #2
17ec8     F2 16 C2 FA | 	rdbyte	arg03, objptr
17ecc     3A E4 85 F1 | 	sub	objptr, #58
17ed0     04 16 66 F0 | 	shl	arg03, #4
17ed4     11 12 06 F6 | 	mov	arg01, #17
17ed8     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
17edc                 | ' setcursorcolor(fc)
17edc     0F 13 02 F6 | 	mov	arg01, local01
17ee0     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
17ee4     10 FB 01 F6 | 	mov	result1, local02
17ee8     00 FC 05 F6 | 	mov	result2, #0
17eec     A7 F0 03 F6 | 	mov	ptra, fp
17ef0     B2 00 A0 FD | 	call	#popregs_
17ef4                 | _hg010b_spin2_cls_ret
17ef4     2D 00 64 FD | 	ret
17ef8                 | 
17ef8                 | ' 
17ef8                 | ' ''---------- Output a char at the cursor position, move the cursor 
17ef8                 | ' 
17ef8                 | ' pub putchar(achar) | c,x,y,l,newcpl
17ef8                 | _hg010b_spin2_putchar
17ef8     01 4A 05 F6 | 	mov	COUNT_, #1
17efc     A8 00 A0 FD | 	call	#pushregs_
17f00     09 1F 02 F6 | 	mov	local01, arg01
17f04                 | ' 
17f04                 | ' if achar==10
17f04     0A 1E 0E F2 | 	cmp	local01, #10 wz
17f08                 | '   crlf()
17f08     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
17f0c                 | ' if achar==9
17f0c     09 1E 0E F2 | 	cmp	local01, #9 wz
17f10     18 00 90 5D |  if_ne	jmp	#LR__1870
17f14                 | '   cursor_x:=(cursor_x& %11110000)+16
17f14     38 E4 05 F1 | 	add	objptr, #56
17f18     F2 16 E2 FA | 	rdword	arg03, objptr
17f1c     F0 16 06 F5 | 	and	arg03, #240
17f20     10 16 06 F1 | 	add	arg03, #16
17f24     F2 16 52 FC | 	wrword	arg03, objptr
17f28     38 E4 85 F1 | 	sub	objptr, #56
17f2c                 | LR__1870
17f2c                 | '   
17f2c                 | ' if (achar<>9) && (achar<>10) 
17f2c     09 1E 0E F2 | 	cmp	local01, #9 wz
17f30     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
17f34     44 00 90 AD |  if_e	jmp	#LR__1871
17f38                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
17f38     38 E4 05 F1 | 	add	objptr, #56
17f3c     F2 12 E2 FA | 	rdword	arg01, objptr
17f40     02 E4 05 F1 | 	add	objptr, #2
17f44     F2 14 C2 FA | 	rdbyte	arg02, objptr
17f48     04 14 66 F0 | 	shl	arg02, #4
17f4c     03 E4 05 F1 | 	add	objptr, #3
17f50     F2 18 02 FB | 	rdlong	arg04, objptr
17f54     04 E4 05 F1 | 	add	objptr, #4
17f58     F2 1A 02 FB | 	rdlong	arg05, objptr
17f5c     41 E4 85 F1 | 	sub	objptr, #65
17f60     0F 17 02 F6 | 	mov	arg03, local01
17f64     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
17f68                 | '   cursor_x+=2
17f68     38 E4 05 F1 | 	add	objptr, #56
17f6c     F2 1E E2 FA | 	rdword	local01, objptr
17f70     02 1E 06 F1 | 	add	local01, #2
17f74     F2 1E 52 FC | 	wrword	local01, objptr
17f78     38 E4 85 F1 | 	sub	objptr, #56
17f7c                 | LR__1871
17f7c                 | ' 
17f7c                 | ' if cursor_x>=256
17f7c     38 E4 05 F1 | 	add	objptr, #56
17f80     F2 1E E2 FA | 	rdword	local01, objptr
17f84     38 E4 85 F1 | 	sub	objptr, #56
17f88     00 1F 56 F2 | 	cmps	local01, #256 wc
17f8c     64 00 90 CD |  if_b	jmp	#LR__1873
17f90                 | '   cursor_x:=0
17f90     38 E4 05 F1 | 	add	objptr, #56
17f94     F2 00 58 FC | 	wrword	#0, objptr
17f98                 | '   cursor_y+=1
17f98     02 E4 05 F1 | 	add	objptr, #2
17f9c     F2 1E C2 FA | 	rdbyte	local01, objptr
17fa0     01 1E 06 F1 | 	add	local01, #1
17fa4     F2 1E 42 FC | 	wrbyte	local01, objptr
17fa8                 | '   if cursor_y>st_lines-1
17fa8     C3 E4 05 F1 | 	add	objptr, #195
17fac     F2 1E 02 FB | 	rdlong	local01, objptr
17fb0     01 1E 86 F1 | 	sub	local01, #1
17fb4     C3 E4 85 F1 | 	sub	objptr, #195
17fb8     F2 16 C2 FA | 	rdbyte	arg03, objptr
17fbc     3A E4 85 F1 | 	sub	objptr, #58
17fc0     0F 17 5A F2 | 	cmps	arg03, local01 wcz
17fc4     2C 00 90 ED |  if_be	jmp	#LR__1872
17fc8                 | '     scrollup()
17fc8     00 12 06 F6 | 	mov	arg01, #0
17fcc     01 00 00 FF 
17fd0     40 14 06 F6 | 	mov	arg02, ##576
17fd4     10 16 06 F6 | 	mov	arg03, #16
17fd8     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
17fdc                 | '     cursor_y:=st_lines-1
17fdc     FD E4 05 F1 | 	add	objptr, #253
17fe0     F2 1E 02 FB | 	rdlong	local01, objptr
17fe4     01 1E 86 F1 | 	sub	local01, #1
17fe8     C3 E4 85 F1 | 	sub	objptr, #195
17fec     F2 1E 42 FC | 	wrbyte	local01, objptr
17ff0     3A E4 85 F1 | 	sub	objptr, #58
17ff4                 | LR__1872
17ff4                 | LR__1873
17ff4                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17ff4     38 E4 05 F1 | 	add	objptr, #56
17ff8     F2 14 E2 FA | 	rdword	arg02, objptr
17ffc     02 14 66 F0 | 	shl	arg02, #2
18000     02 E4 05 F1 | 	add	objptr, #2
18004     F2 16 C2 FA | 	rdbyte	arg03, objptr
18008     3A E4 85 F1 | 	sub	objptr, #58
1800c     04 16 66 F0 | 	shl	arg03, #4
18010     11 12 06 F6 | 	mov	arg01, #17
18014     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
18018     A7 F0 03 F6 | 	mov	ptra, fp
1801c     B2 00 A0 FD | 	call	#popregs_
18020                 | _hg010b_spin2_putchar_ret
18020     2D 00 64 FD | 	ret
18024                 | 
18024                 | '     
18024                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
18024                 | ' 
18024                 | ' pub putchar2(achar) | c,x,y,l,newcpl
18024                 | _hg010b_spin2_putchar2
18024     01 4A 05 F6 | 	mov	COUNT_, #1
18028     A8 00 A0 FD | 	call	#pushregs_
1802c                 | ' 
1802c                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
1802c     38 E4 05 F1 | 	add	objptr, #56
18030     F2 1E E2 FA | 	rdword	local01, objptr
18034     02 E4 05 F1 | 	add	objptr, #2
18038     F2 14 C2 FA | 	rdbyte	arg02, objptr
1803c     04 14 66 F0 | 	shl	arg02, #4
18040     09 17 02 F6 | 	mov	arg03, arg01
18044     03 E4 05 F1 | 	add	objptr, #3
18048     F2 18 02 FB | 	rdlong	arg04, objptr
1804c     04 E4 05 F1 | 	add	objptr, #4
18050     F2 1A 02 FB | 	rdlong	arg05, objptr
18054     41 E4 85 F1 | 	sub	objptr, #65
18058     0F 13 02 F6 | 	mov	arg01, local01
1805c     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
18060                 | ' cursor_x+=2
18060     38 E4 05 F1 | 	add	objptr, #56
18064     F2 1E E2 FA | 	rdword	local01, objptr
18068     02 1E 06 F1 | 	add	local01, #2
1806c     F2 1E 52 FC | 	wrword	local01, objptr
18070                 | ' if cursor_x>=256
18070     F2 1E E2 FA | 	rdword	local01, objptr
18074     38 E4 85 F1 | 	sub	objptr, #56
18078     00 1F 56 F2 | 	cmps	local01, #256 wc
1807c     64 00 90 CD |  if_b	jmp	#LR__1881
18080                 | '   cursor_x:=0
18080     38 E4 05 F1 | 	add	objptr, #56
18084     F2 00 58 FC | 	wrword	#0, objptr
18088                 | '   cursor_y+=1
18088     02 E4 05 F1 | 	add	objptr, #2
1808c     F2 1E C2 FA | 	rdbyte	local01, objptr
18090     01 1E 06 F1 | 	add	local01, #1
18094     F2 1E 42 FC | 	wrbyte	local01, objptr
18098                 | '   if cursor_y>st_lines-1
18098     C3 E4 05 F1 | 	add	objptr, #195
1809c     F2 1E 02 FB | 	rdlong	local01, objptr
180a0     01 1E 86 F1 | 	sub	local01, #1
180a4     C3 E4 85 F1 | 	sub	objptr, #195
180a8     F2 1A C2 FA | 	rdbyte	arg05, objptr
180ac     3A E4 85 F1 | 	sub	objptr, #58
180b0     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
180b4     2C 00 90 ED |  if_be	jmp	#LR__1880
180b8                 | '     scrollup()
180b8     00 12 06 F6 | 	mov	arg01, #0
180bc     01 00 00 FF 
180c0     40 14 06 F6 | 	mov	arg02, ##576
180c4     10 16 06 F6 | 	mov	arg03, #16
180c8     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
180cc                 | '     cursor_y:=st_lines-1
180cc     FD E4 05 F1 | 	add	objptr, #253
180d0     F2 1E 02 FB | 	rdlong	local01, objptr
180d4     01 1E 86 F1 | 	sub	local01, #1
180d8     C3 E4 85 F1 | 	sub	objptr, #195
180dc     F2 1E 42 FC | 	wrbyte	local01, objptr
180e0     3A E4 85 F1 | 	sub	objptr, #58
180e4                 | LR__1880
180e4                 | LR__1881
180e4                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
180e4     38 E4 05 F1 | 	add	objptr, #56
180e8     F2 14 E2 FA | 	rdword	arg02, objptr
180ec     02 14 66 F0 | 	shl	arg02, #2
180f0     02 E4 05 F1 | 	add	objptr, #2
180f4     F2 16 C2 FA | 	rdbyte	arg03, objptr
180f8     3A E4 85 F1 | 	sub	objptr, #58
180fc     04 16 66 F0 | 	shl	arg03, #4
18100     11 12 06 F6 | 	mov	arg01, #17
18104     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
18108     A7 F0 03 F6 | 	mov	ptra, fp
1810c     B2 00 A0 FD | 	call	#popregs_
18110                 | _hg010b_spin2_putchar2_ret
18110     2D 00 64 FD | 	ret
18114                 | 
18114                 | ' ''--------- Output a string at the cursor position, move the cursor  
18114                 | ' 
18114                 | ' pub write(text) | iii,c,ncx,ncy
18114                 | _hg010b_spin2_write
18114     04 4A 05 F6 | 	mov	COUNT_, #4
18118     A8 00 A0 FD | 	call	#pushregs_
1811c     09 1F 02 F6 | 	mov	local01, arg01
18120                 | ' 
18120                 | ' repeat iii from 0 to strsize(text)-1
18120     00 20 06 F6 | 	mov	local02, #0
18124     0F 13 02 F6 | 	mov	arg01, local01
18128     09 23 02 F6 | 	mov	local03, arg01
1812c     97 06 48 FB | 	callpa	#(@LR__1891-@LR__1890)>>2,fcache_load_ptr_
18130                 | LR__1890
18130     11 FB C9 FA | 	rdbyte	result1, local03 wz
18134     01 22 06 51 |  if_ne	add	local03, #1
18138     F4 FF 9F 5D |  if_ne	jmp	#LR__1890
1813c                 | LR__1891
1813c     09 23 82 F1 | 	sub	local03, arg01
18140     01 22 86 F1 | 	sub	local03, #1
18144     00 22 56 F2 | 	cmps	local03, #0 wc
18148     01 24 86 F6 | 	negc	local04, #1
1814c     12 23 02 F1 | 	add	local03, local04
18150                 | LR__1892
18150                 | '   putchar2(byte[text+iii])
18150     0F 13 02 F6 | 	mov	arg01, local01
18154     10 13 02 F1 | 	add	arg01, local02
18158     09 13 C2 FA | 	rdbyte	arg01, arg01
1815c     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
18160     12 21 02 F1 | 	add	local02, local04
18164     11 21 0A F2 | 	cmp	local02, local03 wz
18168     E4 FF 9F 5D |  if_ne	jmp	#LR__1892
1816c     A7 F0 03 F6 | 	mov	ptra, fp
18170     B2 00 A0 FD | 	call	#popregs_
18174                 | _hg010b_spin2_write_ret
18174     2D 00 64 FD | 	ret
18178                 | 
18178                 | ' 
18178                 | ' ''-----------  Scroll the screen one line up
18178                 | ' 
18178                 | ' pub scrollup(start=0, end=576 , amount=16) | i
18178                 | _hg010b_spin2_scrollup
18178     01 4A 05 F6 | 	mov	COUNT_, #1
1817c     A8 00 A0 FD | 	call	#pushregs_
18180                 | ' 	
18180                 | ' repeat i from 0 to 559 
18180     00 1E 06 F6 | 	mov	local01, #0
18184                 | LR__1900
18184     F5 E4 05 F1 | 	add	objptr, #245
18188     F2 18 02 FB | 	rdlong	arg04, objptr
1818c     1C E4 85 F1 | 	sub	objptr, #28
18190     F2 14 02 FB | 	rdlong	arg02, objptr
18194     0F 13 02 F6 | 	mov	arg01, local01
18198     10 12 06 F1 | 	add	arg01, #16
1819c     02 12 66 F0 | 	shl	arg01, #2
181a0     14 E4 05 F1 | 	add	objptr, #20
181a4     F2 16 02 FB | 	rdlong	arg03, objptr
181a8     0B 13 02 FD | 	qmul	arg01, arg03
181ac                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
181ac     F6 03 00 FF 
181b0     00 12 06 F6 | 	mov	arg01, ##519168
181b4     0C 13 82 F1 | 	sub	arg01, arg04
181b8     02 16 66 F0 | 	shl	arg03, #2
181bc     0A 00 00 FF 
181c0     D3 E5 05 F1 | 	add	objptr, ##5587
181c4     18 18 62 FD | 	getqx	arg04
181c8     0C 15 02 F1 | 	add	arg02, arg04
181cc     7C 04 B0 FD | 	call	#_psram_spin2_read1
181d0     0A 00 00 FF 
181d4     CB E5 85 F1 | 	sub	objptr, ##5579
181d8     F2 18 02 FB | 	rdlong	arg04, objptr
181dc     1C E4 85 F1 | 	sub	objptr, #28
181e0     F2 14 02 FB | 	rdlong	arg02, objptr
181e4     0F 13 02 F6 | 	mov	arg01, local01
181e8     02 12 66 F0 | 	shl	arg01, #2
181ec     14 E4 05 F1 | 	add	objptr, #20
181f0     F2 16 02 FB | 	rdlong	arg03, objptr
181f4     0B 13 02 FD | 	qmul	arg01, arg03
181f8                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
181f8     F6 03 00 FF 
181fc     00 12 06 F6 | 	mov	arg01, ##519168
18200     0C 13 82 F1 | 	sub	arg01, arg04
18204     02 16 66 F0 | 	shl	arg03, #2
18208     0A 00 00 FF 
1820c     D3 E5 05 F1 | 	add	objptr, ##5587
18210     18 18 62 FD | 	getqx	arg04
18214     0C 15 02 F1 | 	add	arg02, arg04
18218     CC 04 B0 FD | 	call	#_psram_spin2_write
1821c     0B 00 00 FF 
18220     C0 E4 85 F1 | 	sub	objptr, ##5824
18224     01 1E 06 F1 | 	add	local01, #1
18228     01 00 00 FF 
1822c     30 1E 56 F2 | 	cmps	local01, ##560 wc
18230     50 FF 9F CD |  if_b	jmp	#LR__1900
18234                 | ' 
18234                 | ' repeat i from 560 to 575
18234     01 00 00 FF 
18238     30 1E 06 F6 | 	mov	local01, ##560
1823c                 | LR__1901
1823c                 | '    fastline(0,1023,i,write_background)   
1823c     41 E4 05 F1 | 	add	objptr, #65
18240     F2 18 02 FB | 	rdlong	arg04, objptr
18244     41 E4 85 F1 | 	sub	objptr, #65
18248     00 12 06 F6 | 	mov	arg01, #0
1824c     09 14 CE F9 | 	bmask	arg02, #9
18250     0F 17 02 F6 | 	mov	arg03, local01
18254     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
18258     01 1E 06 F1 | 	add	local01, #1
1825c     01 00 00 FF 
18260     40 1E 16 F2 | 	cmp	local01, ##576 wc
18264     D4 FF 9F CD |  if_b	jmp	#LR__1901
18268     A7 F0 03 F6 | 	mov	ptra, fp
1826c     B2 00 A0 FD | 	call	#popregs_
18270                 | _hg010b_spin2_scrollup_ret
18270     2D 00 64 FD | 	ret
18274                 | 
18274                 | ' 
18274                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
18274                 | ' 
18274                 | ' pub crlf()
18274                 | _hg010b_spin2_crlf
18274                 | ' 
18274                 | ' cursor_x:=leading_spaces*2
18274     01 00 00 FF 
18278     B2 E4 05 F1 | 	add	objptr, ##690
1827c     F2 16 02 FB | 	rdlong	arg03, objptr
18280     01 16 66 F0 | 	shl	arg03, #1
18284     01 00 00 FF 
18288     7A E4 85 F1 | 	sub	objptr, ##634
1828c     F2 16 52 FC | 	wrword	arg03, objptr
18290                 | ' cursor_y+=1
18290     02 E4 05 F1 | 	add	objptr, #2
18294     F2 16 C2 FA | 	rdbyte	arg03, objptr
18298     01 16 06 F1 | 	add	arg03, #1
1829c     F2 16 42 FC | 	wrbyte	arg03, objptr
182a0                 | ' if cursor_y>st_lines-1
182a0     C3 E4 05 F1 | 	add	objptr, #195
182a4     F2 16 02 FB | 	rdlong	arg03, objptr
182a8     01 16 86 F1 | 	sub	arg03, #1
182ac     C3 E4 85 F1 | 	sub	objptr, #195
182b0     F2 14 C2 FA | 	rdbyte	arg02, objptr
182b4     3A E4 85 F1 | 	sub	objptr, #58
182b8     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
182bc     2C 00 90 ED |  if_be	jmp	#LR__1910
182c0                 | '   scrollup()
182c0     00 12 06 F6 | 	mov	arg01, #0
182c4     01 00 00 FF 
182c8     40 14 06 F6 | 	mov	arg02, ##576
182cc     10 16 06 F6 | 	mov	arg03, #16
182d0     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
182d4                 | '   cursor_y:=st_lines-1
182d4     FD E4 05 F1 | 	add	objptr, #253
182d8     F2 16 02 FB | 	rdlong	arg03, objptr
182dc     01 16 86 F1 | 	sub	arg03, #1
182e0     C3 E4 85 F1 | 	sub	objptr, #195
182e4     F2 16 42 FC | 	wrbyte	arg03, objptr
182e8     3A E4 85 F1 | 	sub	objptr, #58
182ec                 | LR__1910
182ec                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
182ec     38 E4 05 F1 | 	add	objptr, #56
182f0     F2 14 E2 FA | 	rdword	arg02, objptr
182f4     02 14 66 F0 | 	shl	arg02, #2
182f8     02 E4 05 F1 | 	add	objptr, #2
182fc     F2 16 C2 FA | 	rdbyte	arg03, objptr
18300     3A E4 85 F1 | 	sub	objptr, #58
18304     04 16 66 F0 | 	shl	arg03, #4
18308     11 12 06 F6 | 	mov	arg01, #17
1830c     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
18310                 | _hg010b_spin2_crlf_ret
18310     2D 00 64 FD | 	ret
18314                 | 
18314                 | ' 
18314                 | ' 
18314                 | ' '*************************************************************************
18314                 | ' '                                                                        *
18314                 | ' '  Conversions                                                           *
18314                 | ' '                                                                        *
18314                 | ' '*************************************************************************
18314                 | ' 
18314                 | ' ''---------- Convert a integer to dec string, return a pointer
18314                 | ' 
18314                 | ' pub inttostr(i):result |q,pos,k,j
18314                 | _hg010b_spin2_inttostr
18314     03 4A 05 F6 | 	mov	COUNT_, #3
18318     A8 00 A0 FD | 	call	#pushregs_
1831c     09 1F 0A F6 | 	mov	local01, arg01 wz
18320                 | ' 
18320                 | ' j:=i
18320                 | ' pos:=10
18320     0A 20 06 F6 | 	mov	local02, #10
18324                 | ' k:=0
18324     00 22 06 F6 | 	mov	local03, #0
18328                 | ' 
18328                 | ' if (j==0)
18328     18 00 90 5D |  if_ne	jmp	#LR__1920
1832c                 | '   n_string[0]:=48
1832c     49 E4 05 F1 | 	add	objptr, #73
18330     F2 60 48 FC | 	wrbyte	#48, objptr
18334                 | '   n_string[1]:=0
18334     01 E4 05 F1 | 	add	objptr, #1
18338     F2 00 48 FC | 	wrbyte	#0, objptr
1833c     4A E4 85 F1 | 	sub	objptr, #74
18340     C4 00 90 FD | 	jmp	#LR__1927
18344                 | LR__1920
18344                 | ' 
18344                 | ' else
18344                 | '   if (j<0)
18344     0F 1F 52 F6 | 	abs	local01, local01 wc
18348                 | '     j:=0-j
18348                 | '     k:=45
18348     2D 22 06 C6 |  if_b	mov	local03, #45
1834c                 | ' 
1834c                 | '   n_string[11]:=0
1834c     54 E4 05 F1 | 	add	objptr, #84
18350     F2 00 48 FC | 	wrbyte	#0, objptr
18354     54 E4 85 F1 | 	sub	objptr, #84
18358     97 24 48 FB | 	callpa	#(@LR__1922-@LR__1921)>>2,fcache_load_ptr_
1835c                 | '   repeat while (pos>-1)
1835c                 | LR__1921
1835c     00 20 56 F2 | 	cmps	local02, #0 wc
18360     40 00 90 CD |  if_b	jmp	#LR__1923
18364     0F FB 51 F6 | 	abs	result1, local01 wc
18368     0A FA 15 FD | 	qdiv	result1, #10
1836c                 | '     q:=j//10
1836c     19 FA 61 FD | 	getqy	result1
18370     FD FA 81 F6 | 	negc	result1, result1
18374     0F 1F 52 F6 | 	abs	local01, local01 wc
18378     0A 1E 16 FD | 	qdiv	local01, #10
1837c                 | '     q:=48+q
1837c     30 FA 05 F1 | 	add	result1, #48
18380                 | '     n_string[pos]:=q
18380     10 1F 02 F6 | 	mov	local01, local02
18384     49 E4 05 F1 | 	add	objptr, #73
18388     F2 1E 02 F1 | 	add	local01, objptr
1838c     0F FB 41 FC | 	wrbyte	result1, local01
18390                 | '     j:=j/10
18390     49 E4 85 F1 | 	sub	objptr, #73
18394                 | '     pos-=1
18394     01 20 86 F1 | 	sub	local02, #1
18398     18 1E 62 FD | 	getqx	local01
1839c     0F 1F 82 F6 | 	negc	local01, local01
183a0     B8 FF 9F FD | 	jmp	#LR__1921
183a4                 | LR__1922
183a4                 | LR__1923
183a4                 | '   repeat while n_string[0]==48
183a4                 | LR__1924
183a4     49 E4 05 F1 | 	add	objptr, #73
183a8     F2 16 C2 FA | 	rdbyte	arg03, objptr
183ac     49 E4 85 F1 | 	sub	objptr, #73
183b0     30 16 0E F2 | 	cmp	arg03, #48 wz
183b4     20 00 90 5D |  if_ne	jmp	#LR__1925
183b8                 | '     bytemove(@n_string,@n_string+1,12)
183b8     49 E4 05 F1 | 	add	objptr, #73
183bc     F2 12 02 F6 | 	mov	arg01, objptr
183c0     F2 14 02 F6 | 	mov	arg02, objptr
183c4     49 E4 85 F1 | 	sub	objptr, #73
183c8     01 14 06 F1 | 	add	arg02, #1
183cc     0C 16 06 F6 | 	mov	arg03, #12
183d0     E8 0C B0 FD | 	call	#__system____builtin_memmove
183d4     CC FF 9F FD | 	jmp	#LR__1924
183d8                 | LR__1925
183d8                 | ' 
183d8                 | '   if k==45
183d8     2D 22 0E F2 | 	cmp	local03, #45 wz
183dc     28 00 90 5D |  if_ne	jmp	#LR__1926
183e0                 | '      bytemove(@n_string+1,@n_string,12)
183e0     49 E4 05 F1 | 	add	objptr, #73
183e4     F2 12 02 F6 | 	mov	arg01, objptr
183e8     01 12 06 F1 | 	add	arg01, #1
183ec     F2 14 02 F6 | 	mov	arg02, objptr
183f0     49 E4 85 F1 | 	sub	objptr, #73
183f4     0C 16 06 F6 | 	mov	arg03, #12
183f8     C0 0C B0 FD | 	call	#__system____builtin_memmove
183fc                 | '      n_string[0]:=k
183fc     49 E4 05 F1 | 	add	objptr, #73
18400     F2 22 42 FC | 	wrbyte	local03, objptr
18404     49 E4 85 F1 | 	sub	objptr, #73
18408                 | LR__1926
18408                 | LR__1927
18408                 | ' 
18408                 | ' q:=@n_string
18408     49 E4 05 F1 | 	add	objptr, #73
1840c     F2 FA 01 F6 | 	mov	result1, objptr
18410     49 E4 85 F1 | 	sub	objptr, #73
18414                 | ' return q
18414     A7 F0 03 F6 | 	mov	ptra, fp
18418     B2 00 A0 FD | 	call	#popregs_
1841c                 | _hg010b_spin2_inttostr_ret
1841c     2D 00 64 FD | 	ret
18420                 | 
18420                 | ' 
18420                 | ' '..............................................................................
18420                 | ' 
18420                 | ' {{
18420                 | ' }}
18420                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
18420                 | _psram_spin2_startx
18420     04 4A 05 F6 | 	mov	COUNT_, #4
18424     A8 00 A0 FD | 	call	#pushregs_
18428     09 1F 02 F6 | 	mov	local01, arg01
1842c     0B 21 02 F6 | 	mov	local02, arg03
18430     0C 23 02 F6 | 	mov	local03, arg04
18434                 | '     stop() ' restart driver if required
18434     54 01 B0 FD | 	call	#_psram_spin2_stop
18438     00 1E 0E F2 | 	cmp	local01, #0 wz
1843c     14 1E 06 AB |  if_e	rdlong	local01, #20
18440     0F 15 52 F6 | 	abs	arg02, local01 wc
18444     A1 07 00 FF 
18448     40 14 16 FD | 	qdiv	arg02, ##1000000
1844c                 | ' 
1844c                 | '     ' use current frequency if none specified
1844c                 | ' 
1844c                 | '     if freq == 0 
1844c                 | '         freq := clkfreq 
1844c                 | ' 
1844c                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1844c                 | ' 
1844c                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1844c                 | '     if burst < 0
1844c                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1844c     18 14 62 FD | 	getqx	arg02
18450     0A 19 82 F6 | 	negc	arg04, arg02
18454     03 18 66 F0 | 	shl	arg04, #3
18458     84 18 86 F1 | 	sub	arg04, #132
1845c     04 18 46 F0 | 	shr	arg04, #4
18460     04 18 66 F0 | 	shl	arg04, #4
18464     00 18 56 F2 | 	cmps	arg04, #0 wc
18468     0E FA 65 C6 |  if_b	neg	result1, #14
1846c     10 01 90 CD |  if_b	jmp	#LR__1933
18470                 | ' 
18470                 | '     ' compute the input delay
18470                 | ' 
18470                 | '     if delay <= 0
18470     01 20 56 F2 | 	cmps	local02, #1 wc
18474     10 00 90 3D |  if_ae	jmp	#LR__1930
18478                 | '         delay := lookupDelay(freq)
18478     0F 13 02 F6 | 	mov	arg01, local01
1847c     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
18480     FD 20 02 F6 | 	mov	local02, result1
18484     04 00 90 FD | 	jmp	#LR__1931
18488                 | LR__1930
18488                 | '     else
18488                 | '         delay <#= $f ' limit to 15
18488     0F 20 66 F3 | 	fles	local02, #15
1848c                 | LR__1931
1848c                 | ' 
1848c                 | '     ' create our lock
1848c                 | ' 
1848c                 | '     driverlock := LOCKNEW()  
1848c     00 FA 05 F6 | 	mov	result1, #0
18490     04 FA 61 FD | 	locknew	result1
18494     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
18498     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1849c                 | '     if driverlock == -1
1849c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
184a0     FF FF 7F FF 
184a4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
184a8                 | '         return ERR_NO_LOCK
184a8     1A FA 65 A6 |  if_e	neg	result1, #26
184ac     D0 00 90 AD |  if_e	jmp	#LR__1933
184b0                 | ' 
184b0                 | '     ' patch in the proper data and HUB addresses to the startup structure
184b0                 | ' 
184b0                 | '     long[@startupData][0]:=clkfreq
184b0     14 1E 06 FB | 	rdlong	local01, #20
184b4     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
184b8     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
184bc                 | ' '    long[@startupData][1]:=$1000_0000
184bc                 | '     long[@startupData][5]:=@deviceData
184bc     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
184c0     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
184c4     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
184c8     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
184cc     14 14 06 F1 | 	add	arg02, #20
184d0     0A 1F 62 FC | 	wrlong	local01, arg02
184d4                 | '     long[@startupData][6]:=@qosData
184d4     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
184d8     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
184dc     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
184e0     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
184e4     18 14 06 F1 | 	add	arg02, #24
184e8     0A 1F 62 FC | 	wrlong	local01, arg02
184ec                 | '     long[@startupData][7]:=$7FF00
184ec     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
184f0     1C 1E 06 F1 | 	add	local01, #28
184f4     FF 03 80 FF 
184f8     0F 01 6A FC | 	wrlong	##524032, local01
184fc                 | ' 
184fc                 | '     ' setup some default bank and QoS parameter values
184fc                 | ' 
184fc                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
184fc     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
18500     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
18504     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
18508     10 18 66 F0 | 	shl	arg04, #16
1850c     0C 20 66 F0 | 	shl	local02, #12
18510     10 19 42 F5 | 	or	arg04, local02
18514     18 18 46 F5 | 	or	arg04, #24
18518     0C 15 02 F6 | 	mov	arg02, arg04
1851c     02 16 06 F6 | 	mov	arg03, #2
18520     A0 00 A0 FD | 	call	#\builtin_longfill_
18524                 | '     longfill(@qosData, $FFFF0000, 8)
18524     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
18528     07 16 06 F6 | 	mov	arg03, #7
1852c     28 16 62 FD | 	setq	arg03
18530     80 FF FF FF 
18534     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
18538                 | ' 
18538                 | '     ' get the address of the PSRAM memory driver so we can start it
18538                 | ' 
18538                 | '     driverAddr:= driver.getDriverAddr()
18538                 | '     return @driver_start
18538     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1853c     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
18540     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
18544                 | ' 
18544                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
18544                 | ' 
18544                 | '     if desiredcog < 0
18544     00 22 56 F2 | 	cmps	local03, #0 wc
18548                 | '         desiredcog := NEWCOG
18548     10 22 06 C6 |  if_b	mov	local03, #16
1854c                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1854c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
18550     11 25 02 F6 | 	mov	local04, local03
18554     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
18558     0A 25 F2 FC | 	coginit	local04, arg02 wc
1855c     01 24 66 C6 |  if_b	neg	local04, #1
18560     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
18564     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
18568                 | '     repeat until long[@startupData] == 0 
18568     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1856c                 | LR__1932
1856c     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
18570     F8 FF 9F 5D |  if_ne	jmp	#LR__1932
18574                 | ' 
18574                 | '     return drivercog
18574     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
18578     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1857c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18580                 | LR__1933
18580     A7 F0 03 F6 | 	mov	ptra, fp
18584     B2 00 A0 FD | 	call	#popregs_
18588                 | _psram_spin2_startx_ret
18588     2D 00 64 FD | 	ret
1858c                 | 
1858c                 | ' 
1858c                 | ' '..............................................................................
1858c                 | ' 
1858c                 | ' {{
1858c                 | ' }}
1858c                 | ' PUB stop() : i
1858c                 | _psram_spin2_stop
1858c     00 00 06 F6 | 	mov	_var01, #0
18590                 | '     if drivercog <> -1
18590     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18594     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
18598     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1859c     FF FF 7F FF 
185a0     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
185a4     70 00 90 AD |  if_e	jmp	#LR__1943
185a8                 | '         cogstop(drivercog) ' a rather brutal stop
185a8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
185ac     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
185b0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
185b4     03 12 62 FD | 	cogstop	arg01
185b8     97 26 48 FB | 	callpa	#(@LR__1942-@LR__1940)>>2,fcache_load_ptr_
185bc                 | '         repeat i from 0 to 7
185bc                 | LR__1940
185bc                 | '             if long[$7FF00][i*3] < 0
185bc     00 FB 01 F6 | 	mov	result1, _var01
185c0     01 FA 65 F0 | 	shl	result1, #1
185c4     00 FB 01 F1 | 	add	result1, _var01
185c8     02 FA 65 F0 | 	shl	result1, #2
185cc     FF 03 00 FF 
185d0     00 FB 05 F1 | 	add	result1, ##524032
185d4     FD FA 01 FB | 	rdlong	result1, result1
185d8     00 FA 55 F2 | 	cmps	result1, #0 wc
185dc     1C 00 90 3D |  if_ae	jmp	#LR__1941
185e0                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
185e0     00 FB 01 F6 | 	mov	result1, _var01
185e4     01 FA 65 F0 | 	shl	result1, #1
185e8     00 FB 01 F1 | 	add	result1, _var01
185ec     02 FA 65 F0 | 	shl	result1, #2
185f0     FF 03 00 FF 
185f4     00 FB 05 F1 | 	add	result1, ##524032
185f8     FD 20 68 FC | 	wrlong	#16, result1
185fc                 | LR__1941
185fc     01 00 06 F1 | 	add	_var01, #1
18600     08 00 56 F2 | 	cmps	_var01, #8 wc
18604     B4 FF 9F CD |  if_b	jmp	#LR__1940
18608                 | LR__1942
18608                 | '         drivercog := -1
18608     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1860c     FF FF FF FF 
18610     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
18614     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18618                 | LR__1943
18618                 | '     if driverlock <> -1
18618     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1861c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
18620     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
18624     FF FF 7F FF 
18628     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1862c                 | '         LOCKRET(driverlock)
1862c     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
18630     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
18634     05 12 62 5D |  if_ne	lockret	arg01
18638                 | '         driverlock := -1
18638     FF FF FF 5F 
1863c     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
18640     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
18644     00 FB 01 F6 | 	mov	result1, _var01
18648                 | _psram_spin2_stop_ret
18648     2D 00 64 FD | 	ret
1864c                 | 
1864c                 | ' 
1864c                 | ' '..............................................................................
1864c                 | ' 
1864c                 | ' {{
1864c                 | ' }}
1864c                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1864c                 | _psram_spin2_read1
1864c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1864c                 | '     if drivercog == -1 ' driver must be running
1864c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18650     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
18654     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18658     FF FF 7F FF 
1865c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
18660                 | '         return ERR_INACTIVE
18660     0F FA 65 A6 |  if_e	neg	result1, #15
18664     7C 00 90 AD |  if_e	jmp	#LR__1951
18668                 | '     if count == 0 ' don't even bother reading
18668     00 16 0E F2 | 	cmp	arg03, #0 wz
1866c                 | '         return 0
1866c     00 FA 05 A6 |  if_e	mov	result1, #0
18670     70 00 90 AD |  if_e	jmp	#LR__1951
18674                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
18674     00 FA 05 F6 | 	mov	result1, #0
18678     01 FA 61 FD | 	cogid	result1
1867c     FD 00 02 F6 | 	mov	_var01, result1
18680     01 00 66 F0 | 	shl	_var01, #1
18684     FD 00 02 F1 | 	add	_var01, result1
18688     02 00 66 F0 | 	shl	_var01, #2
1868c     FF 03 00 FF 
18690     00 03 06 F6 | 	mov	_var02, ##524032
18694     00 03 02 F1 | 	add	_var02, _var01
18698                 | '     if long[mailbox] < 0
18698     01 01 02 FB | 	rdlong	_var01, _var02
1869c     00 00 56 F2 | 	cmps	_var01, #0 wc
186a0                 | '         return ERR_MAILBOX_BUSY
186a0     1C FA 65 C6 |  if_b	neg	result1, #28
186a4     3C 00 90 CD |  if_b	jmp	#LR__1951
186a8                 | '     long[mailbox][2] := count
186a8     08 02 06 F1 | 	add	_var02, #8
186ac     01 17 62 FC | 	wrlong	arg03, _var02
186b0                 | '     long[mailbox][1] := dstHubAddr
186b0     04 02 86 F1 | 	sub	_var02, #4
186b4     01 13 62 FC | 	wrlong	arg01, _var02
186b8     04 02 86 F1 | 	sub	_var02, #4
186bc                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
186bc     0A 05 02 F6 | 	mov	_var03, arg02
186c0     D9 04 06 F4 | 	bitl	_var03, #217
186c4     00 00 58 FF 
186c8     00 00 06 F6 | 	mov	_var01, ##-1342177280
186cc     02 01 02 F1 | 	add	_var01, _var03
186d0     01 01 62 FC | 	wrlong	_var01, _var02
186d4                 | '     repeat
186d4                 | LR__1950
186d4                 | '         result := long[mailbox]    
186d4     01 05 02 FB | 	rdlong	_var03, _var02
186d8     00 04 56 F2 | 	cmps	_var03, #0 wc
186dc     F4 FF 9F CD |  if_b	jmp	#LR__1950
186e0                 | '     while result < 0   
186e0                 | '     return -result                       'return success or error
186e0     02 FB 61 F6 | 	neg	result1, _var03
186e4                 | LR__1951
186e4                 | _psram_spin2_read1_ret
186e4     2D 00 64 FD | 	ret
186e8                 | 
186e8                 | ' 
186e8                 | ' '..............................................................................
186e8                 | ' 
186e8                 | ' {{
186e8                 | ' }}
186e8                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
186e8                 | _psram_spin2_write
186e8                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
186e8                 | '     if drivercog == -1 ' driver must be running
186e8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
186ec     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
186f0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
186f4     FF FF 7F FF 
186f8     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
186fc                 | '         return ERR_INACTIVE
186fc     0F FA 65 A6 |  if_e	neg	result1, #15
18700     7C 00 90 AD |  if_e	jmp	#LR__1961
18704                 | '     if count == 0 ' don't even bother writing
18704     00 16 0E F2 | 	cmp	arg03, #0 wz
18708                 | '         return 0
18708     00 FA 05 A6 |  if_e	mov	result1, #0
1870c     70 00 90 AD |  if_e	jmp	#LR__1961
18710                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
18710     00 FA 05 F6 | 	mov	result1, #0
18714     01 FA 61 FD | 	cogid	result1
18718     FD 00 02 F6 | 	mov	_var01, result1
1871c     01 00 66 F0 | 	shl	_var01, #1
18720     FD 00 02 F1 | 	add	_var01, result1
18724     02 00 66 F0 | 	shl	_var01, #2
18728     FF 03 00 FF 
1872c     00 03 06 F6 | 	mov	_var02, ##524032
18730     00 03 02 F1 | 	add	_var02, _var01
18734                 | '     if long[mailbox] < 0
18734     01 01 02 FB | 	rdlong	_var01, _var02
18738     00 00 56 F2 | 	cmps	_var01, #0 wc
1873c                 | '         return ERR_MAILBOX_BUSY
1873c     1C FA 65 C6 |  if_b	neg	result1, #28
18740     3C 00 90 CD |  if_b	jmp	#LR__1961
18744                 | '     long[mailbox][2] := count
18744     08 02 06 F1 | 	add	_var02, #8
18748     01 17 62 FC | 	wrlong	arg03, _var02
1874c                 | '     long[mailbox][1] := srcHubAddr
1874c     04 02 86 F1 | 	sub	_var02, #4
18750     01 13 62 FC | 	wrlong	arg01, _var02
18754     04 02 86 F1 | 	sub	_var02, #4
18758                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
18758     0A 05 02 F6 | 	mov	_var03, arg02
1875c     D9 04 06 F4 | 	bitl	_var03, #217
18760     00 00 78 FF 
18764     00 00 06 F6 | 	mov	_var01, ##-268435456
18768     02 01 02 F1 | 	add	_var01, _var03
1876c     01 01 62 FC | 	wrlong	_var01, _var02
18770                 | '     repeat
18770                 | LR__1960
18770                 | '         result := long[mailbox]    
18770     01 05 02 FB | 	rdlong	_var03, _var02
18774     00 04 56 F2 | 	cmps	_var03, #0 wc
18778     F4 FF 9F CD |  if_b	jmp	#LR__1960
1877c                 | '     while result < 0   
1877c                 | '     return -result                       'return success or error
1877c     02 FB 61 F6 | 	neg	result1, _var03
18780                 | LR__1961
18780                 | _psram_spin2_write_ret
18780     2D 00 64 FD | 	ret
18784                 | 
18784                 | ' 
18784                 | ' ' generalized fill
18784                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
18784                 | _psram_spin2_fill
18784     09 01 02 F6 | 	mov	_var01, arg01
18788     0A 03 02 F6 | 	mov	_var02, arg02
1878c     0B 05 02 F6 | 	mov	_var03, arg03
18790     0D 07 02 F6 | 	mov	_var04, arg05
18794                 | '     case datasize 
18794     01 06 86 F1 | 	sub	_var04, #1
18798     04 06 26 F3 | 	fle	_var04, #4
1879c     30 06 62 FD | 	jmprel	_var04
187a0                 | LR__1970
187a0     10 00 90 FD | 	jmp	#LR__1971
187a4     18 00 90 FD | 	jmp	#LR__1972
187a8     2C 00 90 FD | 	jmp	#LR__1974
187ac     1C 00 90 FD | 	jmp	#LR__1973
187b0     24 00 90 FD | 	jmp	#LR__1974
187b4                 | LR__1971
187b4                 | '         1: req := driver.R_WRITEBYTE
187b4     00 00 60 FF 
187b8     00 08 06 F6 | 	mov	_var05, ##-1073741824
187bc     20 00 90 FD | 	jmp	#LR__1975
187c0                 | LR__1972
187c0                 | '         2: req := driver.R_WRITEWORD
187c0     00 00 68 FF 
187c4     00 08 06 F6 | 	mov	_var05, ##-805306368
187c8     14 00 90 FD | 	jmp	#LR__1975
187cc                 | LR__1973
187cc                 | '         4: req := driver.R_WRITELONG
187cc     00 00 70 FF 
187d0     00 08 06 F6 | 	mov	_var05, ##-536870912
187d4     08 00 90 FD | 	jmp	#LR__1975
187d8                 | LR__1974
187d8                 | '         other : return ERR_INVALID
187d8     06 FA 65 F6 | 	neg	result1, #6
187dc     94 00 90 FD | 	jmp	#LR__1977
187e0                 | LR__1975
187e0                 | '     if count == 0   ' nothing to do
187e0     00 04 0E F2 | 	cmp	_var03, #0 wz
187e4                 | '         return 0
187e4     00 FA 05 A6 |  if_e	mov	result1, #0
187e8     88 00 90 AD |  if_e	jmp	#LR__1977
187ec                 | '     if drivercog == -1
187ec     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
187f0     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
187f4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
187f8     FF FF 7F FF 
187fc     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
18800                 | '         return ERR_INACTIVE
18800     0F FA 65 A6 |  if_e	neg	result1, #15
18804     6C 00 90 AD |  if_e	jmp	#LR__1977
18808                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
18808     00 FA 05 F6 | 	mov	result1, #0
1880c     01 FA 61 FD | 	cogid	result1
18810     FD 06 02 F6 | 	mov	_var04, result1
18814     01 06 66 F0 | 	shl	_var04, #1
18818     FD 06 02 F1 | 	add	_var04, result1
1881c     02 06 66 F0 | 	shl	_var04, #2
18820     FF 03 00 FF 
18824     00 0B 06 F6 | 	mov	_var06, ##524032
18828     03 0B 02 F1 | 	add	_var06, _var04
1882c                 | '     if long[mailbox] < 0
1882c     05 07 02 FB | 	rdlong	_var04, _var06
18830     00 06 56 F2 | 	cmps	_var04, #0 wc
18834                 | '         return ERR_MAILBOX_BUSY
18834     1C FA 65 C6 |  if_b	neg	result1, #28
18838     38 00 90 CD |  if_b	jmp	#LR__1977
1883c                 | '     long[mailbox][2] := count
1883c     08 0A 06 F1 | 	add	_var06, #8
18840     05 05 62 FC | 	wrlong	_var03, _var06
18844                 | '     long[mailbox][1] := pattern
18844     04 0A 86 F1 | 	sub	_var06, #4
18848     05 03 62 FC | 	wrlong	_var02, _var06
1884c     04 0A 86 F1 | 	sub	_var06, #4
18850                 | '     long[mailbox] := req + (addr & $fffffff)
18850     04 0D 02 F6 | 	mov	_var07, _var05
18854     00 0F 02 F6 | 	mov	_var08, _var01
18858     7C 0E 06 F4 | 	bitl	_var08, #124
1885c     07 0D 02 F1 | 	add	_var07, _var08
18860     05 0D 62 FC | 	wrlong	_var07, _var06
18864                 | '     repeat
18864                 | LR__1976
18864                 | '         r := long[mailbox]
18864     05 0F 02 FB | 	rdlong	_var08, _var06
18868     00 0E 56 F2 | 	cmps	_var08, #0 wc
1886c     F4 FF 9F CD |  if_b	jmp	#LR__1976
18870                 | '     while r < 0
18870                 | '     return -r                  ' return 0 for success or negated error code
18870     07 FB 61 F6 | 	neg	result1, _var08
18874                 | LR__1977
18874                 | _psram_spin2_fill_ret
18874     2D 00 64 FD | 	ret
18878                 | 
18878                 | ' 
18878                 | ' '..............................................................................
18878                 | ' 
18878                 | ' {{
18878                 | ' }}
18878                 | ' PUB setQos(cog, qos) : result | mailbox
18878                 | _psram_spin2_setQos
18878     09 01 02 F6 | 	mov	_var01, arg01
1887c                 | '     if drivercog == -1 ' driver must be running
1887c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18880     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
18884     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18888     FF FF 7F FF 
1888c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
18890                 | '         return ERR_INACTIVE
18890     0F FA 65 A6 |  if_e	neg	result1, #15
18894     9C 00 90 AD |  if_e	jmp	#LR__1984
18898                 | '     if cog < 0 or cog > 7 ' enforce cog id range
18898     00 00 56 F2 | 	cmps	_var01, #0 wc
1889c     08 00 90 CD |  if_b	jmp	#LR__1980
188a0     08 00 56 F2 | 	cmps	_var01, #8 wc
188a4     08 00 90 CD |  if_b	jmp	#LR__1981
188a8                 | LR__1980
188a8                 | '         return ERR_INVALID
188a8     06 FA 65 F6 | 	neg	result1, #6
188ac     84 00 90 FD | 	jmp	#LR__1984
188b0                 | LR__1981
188b0                 | '     long[@qosData][cog] := qos & !$1ff
188b0     FF 15 26 F5 | 	andn	arg02, #511
188b4     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
188b8     02 00 66 F0 | 	shl	_var01, #2
188bc     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
188c0     00 15 62 FC | 	wrlong	arg02, _var01
188c4                 | '     mailbox := $7FF00 + drivercog*12
188c4     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
188c8     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
188cc     02 07 02 F6 | 	mov	_var04, _var03
188d0     01 06 66 F0 | 	shl	_var04, #1
188d4     02 07 02 F1 | 	add	_var04, _var03
188d8     02 06 66 F0 | 	shl	_var04, #2
188dc     FF 03 00 FF 
188e0     00 09 06 F6 | 	mov	_var05, ##524032
188e4     03 09 02 F1 | 	add	_var05, _var04
188e8                 | '     repeat until LOCKTRY(driverlock)
188e8     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
188ec                 | LR__1982
188ec     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
188f0     06 12 72 FD | 	locktry	arg01 wc
188f4     F4 FF 9F 3D |  if_ae	jmp	#LR__1982
188f8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
188fc                 | '     long[mailbox] := driver.R_CONFIG + cogid()
188fc     00 06 06 F6 | 	mov	_var04, #0
18900     01 06 62 FD | 	cogid	_var04
18904     00 00 78 FF 
18908     00 02 06 F6 | 	mov	_var02, ##-268435456
1890c     03 03 02 F1 | 	add	_var02, _var04
18910     04 03 62 FC | 	wrlong	_var02, _var05
18914                 | '     repeat while long[mailbox] < 0
18914                 | LR__1983
18914     04 03 02 FB | 	rdlong	_var02, _var05
18918     00 02 56 F2 | 	cmps	_var02, #0 wc
1891c     F4 FF 9F CD |  if_b	jmp	#LR__1983
18920                 | '     LOCKREL(driverlock)
18920     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
18924     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
18928     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1892c     07 12 72 FD | 	lockrel	arg01 wc
18930     00 FA 05 F6 | 	mov	result1, #0
18934                 | LR__1984
18934                 | _psram_spin2_setQos_ret
18934     2D 00 64 FD | 	ret
18938                 | 
18938                 | ' 
18938                 | ' '..............................................................................
18938                 | ' 
18938                 | ' {{
18938                 | ' }}
18938                 | ' PRI lookupDelay(freq) : delay | profile
18938                 | _psram_spin2_lookupDelay
18938                 | '     profile := @delayTable
18938     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1893c     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
18940                 | '     delay := long[profile][0]
18940     00 03 02 FB | 	rdlong	_var02, _var01
18944                 | '     repeat while long[profile][1] 
18944     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
18948     97 16 48 FB | 	callpa	#(@LR__1991-@LR__1990)>>2,fcache_load_ptr_
1894c                 | LR__1990
1894c     04 00 06 F1 | 	add	_var01, #4
18950     00 FB 09 FB | 	rdlong	result1, _var01 wz
18954     04 00 86 F1 | 	sub	_var01, #4
18958     1C 00 90 AD |  if_e	jmp	#LR__1992
1895c                 | '         if freq +< long[profile][1] 
1895c     04 00 06 F1 | 	add	_var01, #4
18960     00 FB 01 FB | 	rdlong	result1, _var01
18964     04 00 86 F1 | 	sub	_var01, #4
18968     FD 12 12 F2 | 	cmp	arg01, result1 wc
1896c                 | '             quit
1896c                 | '         profile += 4
1896c     04 00 06 31 |  if_ae	add	_var01, #4
18970                 | '         delay++
18970     01 02 06 31 |  if_ae	add	_var02, #1
18974     D4 FF 9F 3D |  if_ae	jmp	#LR__1990
18978                 | LR__1991
18978                 | LR__1992
18978     01 FB 01 F6 | 	mov	result1, _var02
1897c                 | _psram_spin2_lookupDelay_ret
1897c     2D 00 64 FD | 	ret
18980                 | 
18980                 | ' 
18980                 | ' PUB start() : r
18980                 | _usbnew_spin2_start
18980     00 00 06 F6 | 	mov	_var01, #0
18984                 | '   ifnot driver_cog
18984     15 00 00 FF 
18988     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1898c     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
18990     15 00 00 FF 
18994     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
18998     38 00 90 5D |  if_ne	jmp	#LR__2000
1899c                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1899c     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
189a0     10 00 06 F6 | 	mov	_var01, #16
189a4     00 16 06 F6 | 	mov	arg03, #0
189a8     28 16 62 FD | 	setq	arg03
189ac     0A 01 F2 FC | 	coginit	_var01, arg02 wc
189b0     01 00 66 C6 |  if_b	neg	_var01, #1
189b4                 | '     if r >= 0
189b4     00 00 56 F2 | 	cmps	_var01, #0 wc
189b8                 | '       driver_cog := r+1
189b8     00 03 02 36 |  if_ae	mov	_var02, _var01
189bc     01 02 06 31 |  if_ae	add	_var02, #1
189c0     15 00 00 3F 
189c4     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
189c8     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
189cc     15 00 00 3F 
189d0     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
189d4                 | LR__2000
189d4     00 FB 01 F6 | 	mov	result1, _var01
189d8                 | _usbnew_spin2_start_ret
189d8     2D 00 64 FD | 	ret
189dc                 | 
189dc                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
189dc                 | ' 
189dc                 | ' '' Return key event from buffer if there is one
189dc                 | ' PUB get_key() : r | tail
189dc                 | _usbnew_spin2_get_key
189dc                 | '   tail := keyq_tail
189dc     0F 00 00 FF 
189e0     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
189e4     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
189e8                 | '   if keyq_head == tail
189e8     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
189ec     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
189f0     0F 00 00 FF 
189f4     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
189f8     00 03 0A F2 | 	cmp	_var02, _var01 wz
189fc                 | '     return 0 ' No event
189fc     00 FA 05 A6 |  if_e	mov	result1, #0
18a00     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
18a04                 | '   r := keyq_data[tail]
18a04     00 03 02 F6 | 	mov	_var02, _var01
18a08     02 02 66 F0 | 	shl	_var02, #2
18a0c     0F 00 00 FF 
18a10     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
18a14     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
18a18     01 FB 01 FB | 	rdlong	result1, _var02
18a1c                 | '   if ++tail == KEYQUEUE_SIZE
18a1c     01 00 06 F1 | 	add	_var01, #1
18a20     80 00 0E F2 | 	cmp	_var01, #128 wz
18a24                 | '     tail := 0
18a24     00 00 06 A6 |  if_e	mov	_var01, #0
18a28                 | '   keyq_tail := tail
18a28     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
18a2c     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
18a30     0F 00 00 FF 
18a34     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
18a38                 | _usbnew_spin2_get_key_ret
18a38     2D 00 64 FD | 	ret
18a3c                 | 
18a3c                 | ' 
18a3c                 | ' '' Emulate mouse movement
18a3c                 | ' PUB mouse_move(x,y)
18a3c                 | _usbnew_spin2_mouse_move
18a3c     02 4A 05 F6 | 	mov	COUNT_, #2
18a40     A8 00 A0 FD | 	call	#pushregs_
18a44     09 1F 02 F6 | 	mov	local01, arg01
18a48     0A 21 02 F6 | 	mov	local02, arg02
18a4c                 | '   mouse_lock := 1
18a4c     14 00 00 FF 
18a50     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
18a54     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
18a58     14 00 00 FF 
18a5c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
18a60                 | '   waitus(2) ' hope driver is now done
18a60     02 12 06 F6 | 	mov	arg01, #2
18a64     94 0A B0 FD | 	call	#__system___waitus
18a68                 | '   mouse_xacc := x
18a68     14 00 00 FF 
18a6c     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
18a70     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
18a74                 | '   mouse_yacc := y
18a74     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
18a78     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
18a7c                 | '   if mouse_outptr
18a7c     04 00 00 FF 
18a80     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
18a84     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
18a88     0F 00 00 FF 
18a8c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
18a90     24 00 90 AD |  if_e	jmp	#LR__2010
18a94                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
18a94     10 20 66 F0 | 	shl	local02, #16
18a98     0F 1F 32 F9 | 	getword	local01, local01, #0
18a9c     0F 21 42 F5 | 	or	local02, local01
18aa0     0F 00 00 FF 
18aa4     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
18aa8     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
18aac     0F 00 00 FF 
18ab0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
18ab4     0F 21 62 FC | 	wrlong	local02, local01
18ab8                 | LR__2010
18ab8                 | '   mouse_lock := 0
18ab8     14 00 00 FF 
18abc     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
18ac0     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
18ac4     14 00 00 FF 
18ac8     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
18acc     A7 F0 03 F6 | 	mov	ptra, fp
18ad0     B2 00 A0 FD | 	call	#popregs_
18ad4                 | _usbnew_spin2_mouse_move_ret
18ad4     2D 00 64 FD | 	ret
18ad8                 | 
18ad8                 | '     '' Set HAVE_HIDPAD to enable.
18ad8                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
18ad8                 | ' 
18ad8                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
18ad8                 | ' PUB hidpad_id(dev) : r
18ad8                 | _usbnew_spin2_hidpad_id
18ad8                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
18ad8     13 00 00 FF 
18adc     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
18ae0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
18ae4     09 01 02 F6 | 	mov	_var01, arg01
18ae8     03 00 66 F0 | 	shl	_var01, #3
18aec     09 01 82 F1 | 	sub	_var01, arg01
18af0     02 00 66 F0 | 	shl	_var01, #2
18af4     00 FB 01 F1 | 	add	result1, _var01
18af8     FD FA 01 FB | 	rdlong	result1, result1
18afc     13 00 00 FF 
18b00     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
18b04                 | _usbnew_spin2_hidpad_id_ret
18b04     2D 00 64 FD | 	ret
18b08                 | 
18b08                 | ' 
18b08                 | ' '' Get all button states for a device
18b08                 | ' PUB hidpad_buttons(dev) : r 
18b08                 | _usbnew_spin2_hidpad_buttons
18b08                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
18b08     13 00 00 FF 
18b0c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
18b10     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
18b14     09 01 02 F6 | 	mov	_var01, arg01
18b18     03 00 66 F0 | 	shl	_var01, #3
18b1c     09 01 82 F1 | 	sub	_var01, arg01
18b20     02 00 66 F0 | 	shl	_var01, #2
18b24     00 FB 01 F1 | 	add	result1, _var01
18b28     14 FA 05 F1 | 	add	result1, #20
18b2c     FD FA 01 FB | 	rdlong	result1, result1
18b30     13 00 00 FF 
18b34     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
18b38                 | _usbnew_spin2_hidpad_buttons_ret
18b38     2D 00 64 FD | 	ret
18b3c                 | 
18b3c                 | ' 
18b3c                 | ' '' Get state of an axis (normalized between -32768 and 32767)
18b3c                 | ' PUB hidpad_axis(dev,axnum) : r
18b3c                 | _usbnew_spin2_hidpad_axis
18b3c                 | '   if axnum +>= 6
18b3c     06 14 16 F2 | 	cmp	arg02, #6 wc
18b40                 | '     return 0
18b40     00 FA 05 36 |  if_ae	mov	result1, #0
18b44     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
18b48                 | '   else 
18b48                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
18b48     13 00 00 FF 
18b4c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
18b50     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
18b54     09 01 02 F6 | 	mov	_var01, arg01
18b58     03 00 66 F0 | 	shl	_var01, #3
18b5c     09 01 82 F1 | 	sub	_var01, arg01
18b60     02 00 66 F0 | 	shl	_var01, #2
18b64     00 FB 01 F1 | 	add	result1, _var01
18b68     04 00 06 F6 | 	mov	_var01, #4
18b6c     0A 01 02 F1 | 	add	_var01, arg02
18b70     01 00 66 F0 | 	shl	_var01, #1
18b74     FD 00 02 F1 | 	add	_var01, result1
18b78     00 FB E1 FA | 	rdword	result1, _var01
18b7c     0F FA 65 F7 | 	signx	result1, #15
18b80     13 00 00 FF 
18b84     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
18b88                 | _usbnew_spin2_hidpad_axis_ret
18b88     2D 00 64 FD | 	ret
18b8c                 | 
18b8c                 | ' 
18b8c                 | ' 
18b8c                 | ' '--------------------------------------------------------------
18b8c                 | ' '---------- Init the variables, start the cog. ----------------
18b8c                 | ' '--------------------------------------------------------------
18b8c                 | ' 
18b8c                 | ' pub start(mbox,scope,cache) :cog,base | iii
18b8c                 | _Audio093b_8_sc_spin2_start
18b8c     04 4A 05 F6 | 	mov	COUNT_, #4
18b90     A8 00 A0 FD | 	call	#pushregs_
18b94     09 1F 02 F6 | 	mov	local01, arg01
18b98                 | ' 
18b98                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
18b98                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
18b98                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
18b98                 | ' 
18b98                 | ' mailboxaddr:=mbox 
18b98     F2 1E 62 FC | 	wrlong	local01, objptr
18b9c                 | ' scope_ptr:=scope
18b9c     04 E4 05 F1 | 	add	objptr, #4
18ba0     F2 14 62 FC | 	wrlong	arg02, objptr
18ba4                 | ' cache_ptr:=cache
18ba4     04 E4 05 F1 | 	add	objptr, #4
18ba8     F2 16 62 FC | 	wrlong	arg03, objptr
18bac                 | ' base:=@channel1[0]
18bac     04 E4 05 F1 | 	add	objptr, #4
18bb0     F2 20 02 F6 | 	mov	local02, objptr
18bb4                 | ' 
18bb4                 | ' repeat iii from 0 to 7
18bb4     00 22 06 F6 | 	mov	local03, #0
18bb8     02 00 00 FF 
18bbc     84 E6 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##1156
18bc0     0C E4 85 F1 | 	sub	objptr, #12
18bc4     97 B0 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
18bc8                 | LR__2020
18bc8                 | '   long[base+64*iii]:=0
18bc8     10 1F 02 F6 | 	mov	local01, local02
18bcc     11 FD 01 F6 | 	mov	result2, local03
18bd0     06 FC 65 F0 | 	shl	result2, #6
18bd4     FE 1E 02 F1 | 	add	local01, result2
18bd8     0F 01 68 FC | 	wrlong	#0, local01
18bdc                 | '   long[base+64*iii+4]:=0
18bdc     10 1F 02 F6 | 	mov	local01, local02
18be0     11 FD 01 F6 | 	mov	result2, local03
18be4     06 FC 65 F0 | 	shl	result2, #6
18be8     FE 1E 02 F1 | 	add	local01, result2
18bec     04 1E 06 F1 | 	add	local01, #4
18bf0     0F 01 68 FC | 	wrlong	#0, local01
18bf4                 | '   long[base+64*iii+12]:=0
18bf4     10 25 02 F6 | 	mov	local04, local02
18bf8     11 1F 02 F6 | 	mov	local01, local03
18bfc     06 1E 66 F0 | 	shl	local01, #6
18c00     0F 25 02 F1 | 	add	local04, local01
18c04     0C 24 06 F1 | 	add	local04, #12
18c08     12 01 68 FC | 	wrlong	#0, local04
18c0c                 | '   long[base+64*iii+16]:=2 
18c0c     10 25 02 F6 | 	mov	local04, local02
18c10     11 1F 02 F6 | 	mov	local01, local03
18c14     06 1E 66 F0 | 	shl	local01, #6
18c18     0F 25 02 F1 | 	add	local04, local01
18c1c     10 24 06 F1 | 	add	local04, #16
18c20     12 05 68 FC | 	wrlong	#2, local04
18c24                 | '   word[base+64*iii+20]:=0
18c24     10 25 02 F6 | 	mov	local04, local02
18c28     11 1F 02 F6 | 	mov	local01, local03
18c2c     06 1E 66 F0 | 	shl	local01, #6
18c30     0F 25 02 F1 | 	add	local04, local01
18c34     14 24 06 F1 | 	add	local04, #20
18c38     12 01 58 FC | 	wrword	#0, local04
18c3c                 | '   word[base+64*iii+22]:=8192
18c3c     10 25 02 F6 | 	mov	local04, local02
18c40     11 1F 02 F6 | 	mov	local01, local03
18c44     06 1E 66 F0 | 	shl	local01, #6
18c48     0F 25 02 F1 | 	add	local04, local01
18c4c     16 24 06 F1 | 	add	local04, #22
18c50     10 00 80 FF 
18c54     12 01 58 FC | 	wrword	##8192, local04
18c58                 | '   word[base+64*iii+24]:=4000+2*iii
18c58     11 25 02 F6 | 	mov	local04, local03
18c5c     01 24 66 F0 | 	shl	local04, #1
18c60     07 00 00 FF 
18c64     A0 1F 06 F6 | 	mov	local01, ##4000
18c68     12 1F 02 F1 | 	add	local01, local04
18c6c     10 25 02 F6 | 	mov	local04, local02
18c70     11 FD 01 F6 | 	mov	result2, local03
18c74     06 FC 65 F0 | 	shl	result2, #6
18c78     FE 24 02 F1 | 	add	local04, result2
18c7c     18 24 06 F1 | 	add	local04, #24
18c80     12 1F 52 FC | 	wrword	local01, local04
18c84                 | '   word[base+64*iii+26]:=2
18c84     10 25 02 F6 | 	mov	local04, local02
18c88     11 1F 02 F6 | 	mov	local01, local03
18c8c     06 1E 66 F0 | 	shl	local01, #6
18c90     0F 25 02 F1 | 	add	local04, local01
18c94     1A 24 06 F1 | 	add	local04, #26
18c98     12 05 58 FC | 	wrword	#2, local04
18c9c                 | '   long [base+64*iii+8]:=@null | $C0000000
18c9c     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
18ca0     3E 1E 26 F4 | 	bith	local01, #62
18ca4     10 25 02 F6 | 	mov	local04, local02
18ca8     11 17 02 F6 | 	mov	arg03, local03
18cac     06 16 66 F0 | 	shl	arg03, #6
18cb0     0B 25 02 F1 | 	add	local04, arg03
18cb4     08 24 06 F1 | 	add	local04, #8
18cb8     12 1F 62 FC | 	wrlong	local01, local04
18cbc                 | '   long[base+64*iii+32]:=0
18cbc     10 25 02 F6 | 	mov	local04, local02
18cc0     11 1F 02 F6 | 	mov	local01, local03
18cc4     06 1E 66 F0 | 	shl	local01, #6
18cc8     0F 25 02 F1 | 	add	local04, local01
18ccc     20 24 06 F1 | 	add	local04, #32
18cd0     12 01 68 FC | 	wrlong	#0, local04
18cd4                 | '   long[base+64*iii+36]:=0
18cd4     10 25 02 F6 | 	mov	local04, local02
18cd8     11 1F 02 F6 | 	mov	local01, local03
18cdc     06 1E 66 F0 | 	shl	local01, #6
18ce0     0F 25 02 F1 | 	add	local04, local01
18ce4     24 24 06 F1 | 	add	local04, #36
18ce8     12 01 68 FC | 	wrlong	#0, local04
18cec                 | '   long[base+64*iii+40]:=0
18cec     10 25 02 F6 | 	mov	local04, local02
18cf0     11 1F 02 F6 | 	mov	local01, local03
18cf4     06 1E 66 F0 | 	shl	local01, #6
18cf8     0F 25 02 F1 | 	add	local04, local01
18cfc     28 24 06 F1 | 	add	local04, #40
18d00     12 01 68 FC | 	wrlong	#0, local04
18d04                 | '   long[base+64*iii+44]:=0
18d04     10 25 02 F6 | 	mov	local04, local02
18d08     11 1F 02 F6 | 	mov	local01, local03
18d0c     06 1E 66 F0 | 	shl	local01, #6
18d10     0F 25 02 F1 | 	add	local04, local01
18d14     2C 24 06 F1 | 	add	local04, #44
18d18     12 01 68 FC | 	wrlong	#0, local04
18d1c     01 22 06 F1 | 	add	local03, #1
18d20     08 22 56 F2 | 	cmps	local03, #8 wc
18d24     A0 FE 9F CD |  if_b	jmp	#LR__2020
18d28                 | LR__2021
18d28     02 00 00 FF 
18d2c     84 E6 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##1156
18d30                 | '   
18d30                 | ' cog:=coginit(16,@audio,@mailboxaddr)
18d30     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
18d34     F2 16 02 F6 | 	mov	arg03, objptr
18d38     10 24 06 F6 | 	mov	local04, #16
18d3c     28 16 62 FD | 	setq	arg03
18d40     0A 25 F2 FC | 	coginit	local04, arg02 wc
18d44     01 24 66 C6 |  if_b	neg	local04, #1
18d48                 | ' waitms(100)
18d48     64 12 06 F6 | 	mov	arg01, #100
18d4c     40 07 B0 FD | 	call	#__system___waitms
18d50                 | ' return cog,base
18d50     10 FD 01 F6 | 	mov	result2, local02
18d54     12 FB 01 F6 | 	mov	result1, local04
18d58     A7 F0 03 F6 | 	mov	ptra, fp
18d5c     B2 00 A0 FD | 	call	#popregs_
18d60                 | _Audio093b_8_sc_spin2_start_ret
18d60     2D 00 64 FD | 	ret
18d64                 | 
18d64                 | ' 
18d64                 | ' ' a simple play procedure to not poke everything. 
18d64                 | ' 
18d64                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
18d64                 | _Audio093b_8_sc_spin2_play
18d64     0C E4 05 F1 | 	add	objptr, #12
18d68     F2 00 02 F6 | 	mov	_var01, objptr
18d6c     06 12 66 F0 | 	shl	arg01, #6
18d70     09 01 02 F1 | 	add	_var01, arg01
18d74     00 00 60 FF 
18d78     00 14 06 F1 | 	add	arg02, ##-1073741824
18d7c     00 13 02 F6 | 	mov	arg01, _var01
18d80     08 12 06 F1 | 	add	arg01, #8
18d84     09 15 62 FC | 	wrlong	arg02, arg01
18d88     00 15 02 F6 | 	mov	arg02, _var01
18d8c     0C 14 06 F1 | 	add	arg02, #12
18d90     0A 1B 62 FC | 	wrlong	arg05, arg02
18d94     00 1C 56 F2 | 	cmps	arg06, #0 wc
18d98     00 15 02 36 |  if_ae	mov	arg02, _var01
18d9c     10 14 06 31 |  if_ae	add	arg02, #16
18da0     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
18da4     02 1A 06 C1 |  if_b	add	arg05, #2
18da8     00 13 02 C6 |  if_b	mov	arg01, _var01
18dac     10 12 06 C1 |  if_b	add	arg01, #16
18db0     09 1B 62 CC |  if_b	wrlong	arg05, arg01
18db4     0B 15 52 F6 | 	abs	arg02, arg03 wc
18db8     0F 1B 80 FF 
18dbc     0A 3F 1A FD | 	qdiv	##3546911, arg02
18dc0                 | ' 
18dc0                 | ' base2:=@channel1[0]+64*channel
18dc0                 | ' long[base2+8]:=sample+$C0000000 
18dc0                 | ' long[base2+12]:= len
18dc0                 | ' if loop >=0 
18dc0                 | '   long[base2+16]:= loop
18dc0     0C E4 85 F1 | 	sub	objptr, #12
18dc4                 | ' else
18dc4                 | '   long[base2+16]:= len+2
18dc4                 | ' word[base2+20]:=vol
18dc4     00 15 02 F6 | 	mov	arg02, _var01
18dc8     14 14 06 F1 | 	add	arg02, #20
18dcc     0A 19 52 FC | 	wrword	arg04, arg02
18dd0                 | ' word[base2+24]:= 3546911/splfreq 
18dd0     00 13 02 F6 | 	mov	arg01, _var01
18dd4     18 12 06 F1 | 	add	arg01, #24
18dd8                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
18dd8                 | ' long[base2+28]:=$40000000
18dd8     18 14 62 FD | 	getqx	arg02
18ddc     0A 15 82 F6 | 	negc	arg02, arg02
18de0     09 15 52 FC | 	wrword	arg02, arg01
18de4     00 15 02 F6 | 	mov	arg02, _var01
18de8     1A 14 06 F1 | 	add	arg02, #26
18dec     0A 01 5A FC | 	wrword	#256, arg02
18df0     1C 00 06 F1 | 	add	_var01, #28
18df4     00 00 A0 FF 
18df8     00 01 68 FC | 	wrlong	##1073741824, _var01
18dfc                 | _Audio093b_8_sc_spin2_play_ret
18dfc     2D 00 64 FD | 	ret
18e00                 | 
18e00                 | ' until (i >>8) >=len
18e00                 | ' 
18e00                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
18e00                 | _Audio093b_8_sc_spin2_play8
18e00                 | ' 
18e00                 | ' base2:=@channel1[0]+64*channel
18e00     0C E4 05 F1 | 	add	objptr, #12
18e04     F2 00 02 F6 | 	mov	_var01, objptr
18e08     06 12 66 F0 | 	shl	arg01, #6
18e0c     09 01 02 F1 | 	add	_var01, arg01
18e10                 | ' long[base2]:=0
18e10     00 01 68 FC | 	wrlong	#0, _var01
18e14                 | ' long[base2+8]:=sample+$40000000 
18e14     00 00 20 FF 
18e18     00 14 06 F1 | 	add	arg02, ##1073741824
18e1c     00 13 02 F6 | 	mov	arg01, _var01
18e20     08 12 06 F1 | 	add	arg01, #8
18e24     09 15 62 FC | 	wrlong	arg02, arg01
18e28                 | ' if loop>=0
18e28     00 1C 56 F2 | 	cmps	arg06, #0 wc
18e2c     0C E4 85 F1 | 	sub	objptr, #12
18e30     1C 00 90 CD |  if_b	jmp	#LR__2030
18e34                 | '   long[base2+12]:=loop
18e34     00 15 02 F6 | 	mov	arg02, _var01
18e38     0C 14 06 F1 | 	add	arg02, #12
18e3c     0A 1D 62 FC | 	wrlong	arg06, arg02
18e40                 | '   long[base2+16]:= len
18e40     00 1D 02 F6 | 	mov	arg06, _var01
18e44     10 1C 06 F1 | 	add	arg06, #16
18e48     0E 1B 62 FC | 	wrlong	arg05, arg06
18e4c     1C 00 90 FD | 	jmp	#LR__2031
18e50                 | LR__2030
18e50                 | ' else
18e50                 | '   long[base2+12]:= len
18e50     00 1D 02 F6 | 	mov	arg06, _var01
18e54     0C 1C 06 F1 | 	add	arg06, #12
18e58     0E 1B 62 FC | 	wrlong	arg05, arg06
18e5c                 | '   long[base2+16]:= len+1
18e5c     01 1A 06 F1 | 	add	arg05, #1
18e60     00 13 02 F6 | 	mov	arg01, _var01
18e64     10 12 06 F1 | 	add	arg01, #16
18e68     09 1B 62 FC | 	wrlong	arg05, arg01
18e6c                 | LR__2031
18e6c     0B 17 52 F6 | 	abs	arg03, arg03 wc
18e70     0F 1B 80 FF 
18e74     0B 3F 1A FD | 	qdiv	##3546911, arg03
18e78                 | ' word[base2+20]:=vol
18e78     00 17 02 F6 | 	mov	arg03, _var01
18e7c     14 16 06 F1 | 	add	arg03, #20
18e80     0B 19 52 FC | 	wrword	arg04, arg03
18e84                 | ' word[base2+24]:= 3546911/splfreq 
18e84     00 13 02 F6 | 	mov	arg01, _var01
18e88     18 12 06 F1 | 	add	arg01, #24
18e8c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
18e8c                 | ' long[base2+28]:=$40000000
18e8c     18 18 62 FD | 	getqx	arg04
18e90     0C 19 82 F6 | 	negc	arg04, arg04
18e94     09 19 52 FC | 	wrword	arg04, arg01
18e98     00 19 02 F6 | 	mov	arg04, _var01
18e9c     1A 18 06 F1 | 	add	arg04, #26
18ea0     0C 01 5A FC | 	wrword	#256, arg04
18ea4     1C 00 06 F1 | 	add	_var01, #28
18ea8     00 00 A0 FF 
18eac     00 01 68 FC | 	wrlong	##1073741824, _var01
18eb0                 | _Audio093b_8_sc_spin2_play8_ret
18eb0     2D 00 64 FD | 	ret
18eb4                 | 
18eb4                 | ' 
18eb4                 | '     
18eb4                 | ' pub stop(channel) 'silence it
18eb4                 | _Audio093b_8_sc_spin2_stop
18eb4                 | ' 
18eb4                 | ' word[@channel1[0]+64*channel+20]:=0
18eb4     0C E4 05 F1 | 	add	objptr, #12
18eb8     F2 00 02 F6 | 	mov	_var01, objptr
18ebc     06 12 66 F0 | 	shl	arg01, #6
18ec0     09 01 02 F1 | 	add	_var01, arg01
18ec4     14 00 06 F1 | 	add	_var01, #20
18ec8     00 01 58 FC | 	wrword	#0, _var01
18ecc     0C E4 85 F1 | 	sub	objptr, #12
18ed0                 | _Audio093b_8_sc_spin2_stop_ret
18ed0     2D 00 64 FD | 	ret
18ed4                 | hubexit
18ed4     81 00 80 FD | 	jmp	#cogexit
18ed8                 | 
18ed8                 | __system___setbaud
18ed8     14 62 06 FB | 	rdlong	muldiva_, #20
18edc     09 65 02 F6 | 	mov	muldivb_, arg01
18ee0     BA 00 A0 FD | 	call	#divide_
18ee4     97 06 48 FB | 	callpa	#(@LR__2041-@LR__2040)>>2,fcache_load_ptr_
18ee8                 | LR__2040
18ee8     3E FA 9D FA | 	rdpin	result1, #62 wc
18eec     FE FC A1 F1 | 	subx	result2, result2
18ef0     F4 FF 9F CD |  if_b	jmp	#LR__2040
18ef4                 | LR__2041
18ef4     40 7C 64 FD | 	dirl	#62
18ef8     40 7E 64 FD | 	dirl	#63
18efc     F4 64 62 FC | 	wrlong	muldivb_, ptr___system__dat__
18f00     10 64 66 F0 | 	shl	muldivb_, #16
18f04     07 14 06 F6 | 	mov	arg02, #7
18f08     32 15 02 F1 | 	add	arg02, muldivb_
18f0c     3E F8 0C FC | 	wrpin	#124, #62
18f10     3E 14 16 FC | 	wxpin	arg02, #62
18f14     3F 7C 0C FC | 	wrpin	#62, #63
18f18     14 14 06 F1 | 	add	arg02, #20
18f1c     3F 14 16 FC | 	wxpin	arg02, #63
18f20     41 7C 64 FD | 	dirh	#62
18f24     41 7E 64 FD | 	dirh	#63
18f28                 | __system___setbaud_ret
18f28     2D 00 64 FD | 	ret
18f2c                 | 
18f2c                 | __system___txraw
18f2c     01 4A 05 F6 | 	mov	COUNT_, #1
18f30     A8 00 A0 FD | 	call	#pushregs_
18f34     09 1F 02 F6 | 	mov	local01, arg01
18f38     97 06 48 FB | 	callpa	#(@LR__2051-@LR__2050)>>2,fcache_load_ptr_
18f3c                 | LR__2050
18f3c     3E FA 9D FA | 	rdpin	result1, #62 wc
18f40     FE FC A1 F1 | 	subx	result2, result2
18f44     F4 FF 9F CD |  if_b	jmp	#LR__2050
18f48                 | LR__2051
18f48     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
18f4c     C2 01 00 AF 
18f50     00 12 06 A6 |  if_e	mov	arg01, ##230400
18f54     80 FF BF AD |  if_e	call	#__system___setbaud
18f58     58 7C 64 FD | 	drvl	#62
18f5c     3E 1E 26 FC | 	wypin	local01, #62
18f60     01 FA 05 F6 | 	mov	result1, #1
18f64     A7 F0 03 F6 | 	mov	ptra, fp
18f68     B2 00 A0 FD | 	call	#popregs_
18f6c                 | __system___txraw_ret
18f6c     2D 00 64 FD | 	ret
18f70                 | 
18f70                 | __system___rxraw
18f70     0D 4A 05 F6 | 	mov	COUNT_, #13
18f74     A8 00 A0 FD | 	call	#pushregs_
18f78     09 1F 02 F6 | 	mov	local01, arg01
18f7c     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
18f80     C2 01 00 AF 
18f84     00 12 06 A6 |  if_e	mov	arg01, ##230400
18f88     4C FF BF AD |  if_e	call	#__system___setbaud
18f8c     00 1E 0E F2 | 	cmp	local01, #0 wz
18f90     20 00 90 AD |  if_e	jmp	#LR__2060
18f94     14 22 06 FB | 	rdlong	local03, #20
18f98     0A 22 46 F0 | 	shr	local03, #10
18f9c     11 1F 02 FD | 	qmul	local01, local03
18fa0     1A FA 61 FD | 	getct	result1
18fa4     18 24 62 FD | 	getqx	local04
18fa8     12 FB 01 F1 | 	add	result1, local04
18fac     FD 26 02 F6 | 	mov	local05, result1
18fb0     04 00 90 FD | 	jmp	#LR__2061
18fb4                 | LR__2060
18fb4     00 26 06 F6 | 	mov	local05, #0
18fb8                 | LR__2061
18fb8     01 28 66 F6 | 	neg	local06, #1
18fbc     3F 2A 06 F6 | 	mov	local07, #63
18fc0     00 2C 06 F6 | 	mov	local08, #0
18fc4     04 E8 05 F1 | 	add	ptr___system__dat__, #4
18fc8     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
18fcc     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
18fd0                 | LR__2062
18fd0     08 2E 16 F4 | 	testb	local09, #8 wc
18fd4     09 2E 76 F4 | 	testbn	local09, #9 andc
18fd8     0A 2E 46 F0 | 	shr	local09, #10
18fdc     01 2C 06 C6 |  if_b	mov	local08, #1
18fe0     40 7E 6C 3D |  if_ae	testp	#63 wz
18fe4     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
18fe8     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
18fec     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
18ff0                 | LR__2063
18ff0     00 20 06 F6 | 	mov	local02, #0
18ff4     00 2C 0E F2 | 	cmp	local08, #0 wz
18ff8     01 20 66 56 |  if_ne	neg	local02, #1
18ffc     00 30 06 F6 | 	mov	local10, #0
19000     00 22 06 F6 | 	mov	local03, #0
19004     00 1E 0E F2 | 	cmp	local01, #0 wz
19008     01 22 66 56 |  if_ne	neg	local03, #1
1900c     00 24 06 F6 | 	mov	local04, #0
19010     00 32 06 F6 | 	mov	local11, #0
19014     1A FA 61 FD | 	getct	result1
19018     FD 34 02 F6 | 	mov	local12, result1
1901c     1A 37 02 F6 | 	mov	local13, local12
19020     13 37 82 F1 | 	sub	local13, local05
19024     00 36 56 F2 | 	cmps	local13, #0 wc
19028     00 32 26 C6 |  if_b	not	local11, #0
1902c     00 32 0E F2 | 	cmp	local11, #0 wz
19030     00 24 26 56 |  if_ne	not	local04, #0
19034     12 23 CA F7 | 	test	local03, local04 wz
19038     00 30 26 56 |  if_ne	not	local10, #0
1903c     18 21 4A F5 | 	or	local02, local10 wz
19040     8C FF 9F AD |  if_e	jmp	#LR__2062
19044     00 2C 0E F2 | 	cmp	local08, #0 wz
19048     17 29 02 56 |  if_ne	mov	local06, local09
1904c     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
19050     04 E8 05 F1 | 	add	ptr___system__dat__, #4
19054     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
19058     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
1905c     14 FB 01 F6 | 	mov	result1, local06
19060     A7 F0 03 F6 | 	mov	ptra, fp
19064     B2 00 A0 FD | 	call	#popregs_
19068                 | __system___rxraw_ret
19068     2D 00 64 FD | 	ret
1906c                 | 
1906c                 | __system___getus
1906c     1A FC 71 FD | 	getct	result2 wc
19070     1A 00 62 FD | 	getct	_var01
19074     10 E8 05 F1 | 	add	ptr___system__dat__, #16
19078     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
1907c     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
19080     20 00 90 5D |  if_ne	jmp	#LR__2070
19084     14 02 06 FB | 	rdlong	_var02, #20
19088     A1 07 00 FF 
1908c     40 02 16 FD | 	qdiv	_var02, ##1000000
19090     10 E8 05 F1 | 	add	ptr___system__dat__, #16
19094     18 FA 61 FD | 	getqx	result1
19098     FD 02 02 F6 | 	mov	_var02, result1
1909c     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
190a0     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
190a4                 | LR__2070
190a4     01 FD 11 FD | 	qdiv	result2, _var02
190a8     19 FC 61 FD | 	getqy	result2
190ac     28 FC 61 FD | 	setq	result2
190b0     01 01 12 FD | 	qdiv	_var01, _var02
190b4     18 FA 61 FD | 	getqx	result1
190b8                 | __system___getus_ret
190b8     2D 00 64 FD | 	ret
190bc                 | 
190bc                 | __system____builtin_memmove
190bc     09 01 02 F6 | 	mov	_var01, arg01
190c0     0A 13 52 F2 | 	cmps	arg01, arg02 wc
190c4     10 00 90 CD |  if_b	jmp	#LR__2080
190c8     0A 03 02 F6 | 	mov	_var02, arg02
190cc     0B 03 02 F1 | 	add	_var02, arg03
190d0     01 13 52 F2 | 	cmps	arg01, _var02 wc
190d4     48 00 90 CD |  if_b	jmp	#LR__2086
190d8                 | LR__2080
190d8     0B 05 02 F6 | 	mov	_var03, arg03
190dc     02 04 4E F0 | 	shr	_var03, #2 wz
190e0     18 00 90 AD |  if_e	jmp	#LR__2085
190e4     97 0A 48 FB | 	callpa	#(@LR__2083-@LR__2081)>>2,fcache_load_ptr_
190e8                 | LR__2081
190e8     02 09 D8 FC | 	rep	@LR__2084, _var03
190ec                 | LR__2082
190ec     0A 05 02 FB | 	rdlong	_var03, arg02
190f0     09 05 62 FC | 	wrlong	_var03, arg01
190f4     04 12 06 F1 | 	add	arg01, #4
190f8     04 14 06 F1 | 	add	arg02, #4
190fc                 | LR__2083
190fc                 | LR__2084
190fc                 | LR__2085
190fc     02 16 CE F7 | 	test	arg03, #2 wz
19100     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
19104     09 03 52 5C |  if_ne	wrword	_var02, arg01
19108     02 12 06 51 |  if_ne	add	arg01, #2
1910c     02 14 06 51 |  if_ne	add	arg02, #2
19110     01 16 CE F7 | 	test	arg03, #1 wz
19114     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
19118     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
1911c     28 00 90 FD | 	jmp	#LR__2092
19120                 | LR__2086
19120     0B 13 02 F1 | 	add	arg01, arg03
19124     0B 15 02 F1 | 	add	arg02, arg03
19128     0B 07 0A F6 | 	mov	_var04, arg03 wz
1912c     18 00 90 AD |  if_e	jmp	#LR__2091
19130     97 0A 48 FB | 	callpa	#(@LR__2089-@LR__2087)>>2,fcache_load_ptr_
19134                 | LR__2087
19134     03 09 D8 FC | 	rep	@LR__2090, _var04
19138                 | LR__2088
19138     01 12 86 F1 | 	sub	arg01, #1
1913c     01 14 86 F1 | 	sub	arg02, #1
19140     0A 03 C2 FA | 	rdbyte	_var02, arg02
19144     09 03 42 FC | 	wrbyte	_var02, arg01
19148                 | LR__2089
19148                 | LR__2090
19148                 | LR__2091
19148                 | LR__2092
19148     00 FB 01 F6 | 	mov	result1, _var01
1914c                 | __system____builtin_memmove_ret
1914c     2D 00 64 FD | 	ret
19150                 | 
19150                 | __system____builtin_strcpy
19150     09 01 02 F6 | 	mov	_var01, arg01
19154     97 0A 48 FB | 	callpa	#(@LR__2101-@LR__2100)>>2,fcache_load_ptr_
19158                 | LR__2100
19158     0A FB C9 FA | 	rdbyte	result1, arg02 wz
1915c     09 FB 41 FC | 	wrbyte	result1, arg01
19160     01 14 06 F1 | 	add	arg02, #1
19164     01 12 06 F1 | 	add	arg01, #1
19168     EC FF 9F 5D |  if_ne	jmp	#LR__2100
1916c                 | LR__2101
1916c     00 FB 01 F6 | 	mov	result1, _var01
19170                 | __system____builtin_strcpy_ret
19170     2D 00 64 FD | 	ret
19174                 | 
19174                 | __system____topofstack
19174     00 4A 05 F6 | 	mov	COUNT_, #0
19178     A8 00 A0 FD | 	call	#pushregs_
1917c     08 F0 07 F1 | 	add	ptra, #8
19180     04 4E 05 F1 | 	add	fp, #4
19184     A7 12 62 FC | 	wrlong	arg01, fp
19188     A7 FA 01 F6 | 	mov	result1, fp
1918c     04 4E 85 F1 | 	sub	fp, #4
19190     A7 F0 03 F6 | 	mov	ptra, fp
19194     B2 00 A0 FD | 	call	#popregs_
19198                 | __system____topofstack_ret
19198     2D 00 64 FD | 	ret
1919c                 | 
1919c                 | __system___lockmem
1919c     00 FA 05 F6 | 	mov	result1, #0
191a0     01 FA 61 FD | 	cogid	result1
191a4     00 FB 05 F1 | 	add	result1, #256
191a8                 | LR__2110
191a8     09 01 0A FB | 	rdlong	_var01, arg01 wz
191ac     09 FB 61 AC |  if_e	wrlong	result1, arg01
191b0     09 01 02 AB |  if_e	rdlong	_var01, arg01
191b4     09 01 02 AB |  if_e	rdlong	_var01, arg01
191b8     FD 00 0A F2 | 	cmp	_var01, result1 wz
191bc     E8 FF 9F 5D |  if_ne	jmp	#LR__2110
191c0                 | __system___lockmem_ret
191c0     2D 00 64 FD | 	ret
191c4                 | 
191c4                 | __system___string_cmp
191c4     97 14 48 FB | 	callpa	#(@LR__2121-@LR__2120)>>2,fcache_load_ptr_
191c8                 | LR__2120
191c8     09 01 C2 FA | 	rdbyte	_var01, arg01
191cc     0A 03 C2 FA | 	rdbyte	_var02, arg02
191d0     00 05 02 F6 | 	mov	_var03, _var01
191d4     01 05 8A F1 | 	sub	_var03, _var02 wz
191d8     01 12 06 F1 | 	add	arg01, #1
191dc     01 14 06 F1 | 	add	arg02, #1
191e0     0C 00 90 5D |  if_ne	jmp	#LR__2122
191e4     00 00 0E F2 | 	cmp	_var01, #0 wz
191e8     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
191ec     D8 FF 9F 5D |  if_ne	jmp	#LR__2120
191f0                 | LR__2121
191f0                 | LR__2122
191f0     02 FB 01 F6 | 	mov	result1, _var03
191f4                 | __system___string_cmp_ret
191f4     2D 00 64 FD | 	ret
191f8                 | 
191f8                 | __system___string_concat
191f8     05 4A 05 F6 | 	mov	COUNT_, #5
191fc     A8 00 A0 FD | 	call	#pushregs_
19200     09 1F 02 F6 | 	mov	local01, arg01
19204     0A 21 02 F6 | 	mov	local02, arg02
19208     0F 13 02 F6 | 	mov	arg01, local01
1920c     09 23 02 F6 | 	mov	local03, arg01
19210     97 06 48 FB | 	callpa	#(@LR__2131-@LR__2130)>>2,fcache_load_ptr_
19214                 | LR__2130
19214     11 FB C9 FA | 	rdbyte	result1, local03 wz
19218     01 22 06 51 |  if_ne	add	local03, #1
1921c     F4 FF 9F 5D |  if_ne	jmp	#LR__2130
19220                 | LR__2131
19220     09 23 82 F1 | 	sub	local03, arg01
19224     11 25 02 F6 | 	mov	local04, local03
19228     10 13 02 F6 | 	mov	arg01, local02
1922c     09 23 02 F6 | 	mov	local03, arg01
19230     97 06 48 FB | 	callpa	#(@LR__2133-@LR__2132)>>2,fcache_load_ptr_
19234                 | LR__2132
19234     11 FB C9 FA | 	rdbyte	result1, local03 wz
19238     01 22 06 51 |  if_ne	add	local03, #1
1923c     F4 FF 9F 5D |  if_ne	jmp	#LR__2132
19240                 | LR__2133
19240     09 23 82 F1 | 	sub	local03, arg01
19244     12 13 02 F6 | 	mov	arg01, local04
19248     11 13 02 F1 | 	add	arg01, local03
1924c     01 12 06 F1 | 	add	arg01, #1
19250     00 3D B0 FD | 	call	#__system___gc_alloc_managed
19254     FD 26 0A F6 | 	mov	local05, result1 wz
19258     28 00 90 AD |  if_e	jmp	#LR__2134
1925c     13 13 02 F6 | 	mov	arg01, local05
19260     0F 15 02 F6 | 	mov	arg02, local01
19264     12 17 02 F6 | 	mov	arg03, local04
19268     50 FE BF FD | 	call	#__system____builtin_memmove
1926c     13 13 02 F6 | 	mov	arg01, local05
19270     12 13 02 F1 | 	add	arg01, local04
19274     01 22 06 F1 | 	add	local03, #1
19278     10 15 02 F6 | 	mov	arg02, local02
1927c     11 17 02 F6 | 	mov	arg03, local03
19280     38 FE BF FD | 	call	#__system____builtin_memmove
19284                 | LR__2134
19284     13 FB 01 F6 | 	mov	result1, local05
19288     A7 F0 03 F6 | 	mov	ptra, fp
1928c     B2 00 A0 FD | 	call	#popregs_
19290                 | __system___string_concat_ret
19290     2D 00 64 FD | 	ret
19294                 | 
19294                 | __system___tx
19294     02 4A 05 F6 | 	mov	COUNT_, #2
19298     A8 00 A0 FD | 	call	#pushregs_
1929c     09 1F 02 F6 | 	mov	local01, arg01
192a0     0A 1E 0E F2 | 	cmp	local01, #10 wz
192a4     18 00 90 5D |  if_ne	jmp	#LR__2140
192a8     08 E8 05 F1 | 	add	ptr___system__dat__, #8
192ac     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
192b0     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
192b4     02 20 CE F7 | 	test	local02, #2 wz
192b8     0D 12 06 56 |  if_ne	mov	arg01, #13
192bc     6C FC BF 5D |  if_ne	call	#__system___txraw
192c0                 | LR__2140
192c0     0F 13 02 F6 | 	mov	arg01, local01
192c4     64 FC BF FD | 	call	#__system___txraw
192c8     A7 F0 03 F6 | 	mov	ptra, fp
192cc     B2 00 A0 FD | 	call	#popregs_
192d0                 | __system___tx_ret
192d0     2D 00 64 FD | 	ret
192d4                 | 
192d4                 | __system___rx
192d4     01 4A 05 F6 | 	mov	COUNT_, #1
192d8     A8 00 A0 FD | 	call	#pushregs_
192dc                 | LR__2150
192dc     00 12 06 F6 | 	mov	arg01, #0
192e0     8C FC BF FD | 	call	#__system___rxraw
192e4     FD 1E 02 F6 | 	mov	local01, result1
192e8     FF FF 7F FF 
192ec     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
192f0     E8 FF 9F AD |  if_e	jmp	#LR__2150
192f4     0D 1E 0E F2 | 	cmp	local01, #13 wz
192f8     14 00 90 5D |  if_ne	jmp	#LR__2151
192fc     08 E8 05 F1 | 	add	ptr___system__dat__, #8
19300     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
19304     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
19308     02 FA CD F7 | 	test	result1, #2 wz
1930c     0A 1E 06 56 |  if_ne	mov	local01, #10
19310                 | LR__2151
19310     08 E8 05 F1 | 	add	ptr___system__dat__, #8
19314     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
19318     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1931c     01 12 CE F7 | 	test	arg01, #1 wz
19320     1C 00 90 AD |  if_e	jmp	#LR__2154
19324     7F 1E 0E F2 | 	cmp	local01, #127 wz
19328     0C 00 90 5D |  if_ne	jmp	#LR__2152
1932c     08 12 06 F6 | 	mov	arg01, #8
19330     60 FF BF FD | 	call	#__system___tx
19334     08 00 90 FD | 	jmp	#LR__2153
19338                 | LR__2152
19338     0F 13 02 F6 | 	mov	arg01, local01
1933c     54 FF BF FD | 	call	#__system___tx
19340                 | LR__2153
19340                 | LR__2154
19340     0F FB 01 F6 | 	mov	result1, local01
19344     A7 F0 03 F6 | 	mov	ptra, fp
19348     B2 00 A0 FD | 	call	#popregs_
1934c                 | __system___rx_ret
1934c     2D 00 64 FD | 	ret
19350                 | 
19350                 | __system___pinwrite
19350     09 01 02 F6 | 	mov	_var01, arg01
19354     1F 00 06 F5 | 	and	_var01, #31
19358     20 12 CE F7 | 	test	arg01, #32 wz
1935c     06 12 46 F0 | 	shr	arg01, #6
19360     09 13 CA F9 | 	bmask	arg01, arg01
19364     00 13 62 F0 | 	shl	arg01, _var01
19368     00 15 62 F0 | 	shl	arg02, _var01
1936c     1C 00 90 AD |  if_e	jmp	#LR__2160
19370     09 F7 43 F5 | 	or	dirb, arg01
19374     FD 01 02 F6 | 	mov	_var01, outb
19378     09 01 22 F5 | 	andn	_var01, arg01
1937c     09 15 02 F5 | 	and	arg02, arg01
19380     0A 01 42 F5 | 	or	_var01, arg02
19384     00 FB 03 F6 | 	mov	outb, _var01
19388     18 00 90 FD | 	jmp	#LR__2161
1938c                 | LR__2160
1938c     09 F5 43 F5 | 	or	dira, arg01
19390     FC 01 02 F6 | 	mov	_var01, outa
19394     09 01 22 F5 | 	andn	_var01, arg01
19398     09 15 02 F5 | 	and	arg02, arg01
1939c     0A 01 42 F5 | 	or	_var01, arg02
193a0     00 F9 03 F6 | 	mov	outa, _var01
193a4                 | LR__2161
193a4                 | __system___pinwrite_ret
193a4     2D 00 64 FD | 	ret
193a8                 | 
193a8                 | __system___basic_read_line
193a8     06 4A 05 F6 | 	mov	COUNT_, #6
193ac     A8 00 A0 FD | 	call	#pushregs_
193b0     09 1F 02 F6 | 	mov	local01, arg01
193b4     00 20 06 F6 | 	mov	local02, #0
193b8     18 22 06 F6 | 	mov	local03, #24
193bc     00 24 06 F6 | 	mov	local04, #0
193c0     18 12 06 F6 | 	mov	arg01, #24
193c4     8C 3B B0 FD | 	call	#__system___gc_alloc_managed
193c8     FD 26 0A F6 | 	mov	local05, result1 wz
193cc     13 FB 01 A6 |  if_e	mov	result1, local05
193d0     B0 00 90 AD |  if_e	jmp	#LR__2173
193d4                 | LR__2170
193d4     0F 13 02 F6 | 	mov	arg01, local01
193d8     78 0B B0 FD | 	call	#__system___basic_get_char
193dc     FD 28 02 F6 | 	mov	local06, result1
193e0     01 28 56 F2 | 	cmps	local06, #1 wc
193e4     8C 00 90 CD |  if_b	jmp	#LR__2172
193e8     0A 28 0E F2 | 	cmp	local06, #10 wz
193ec     10 00 90 5D |  if_ne	jmp	#LR__2171
193f0     00 24 0E F2 | 	cmp	local04, #0 wz
193f4     01 20 56 52 |  if_ne	cmps	local02, #1 wc
193f8     01 20 86 11 |  if_a	sub	local02, #1
193fc     74 00 90 FD | 	jmp	#LR__2172
19400                 | LR__2171
19400     0D 28 0E F2 | 	cmp	local06, #13 wz
19404     01 24 06 A6 |  if_e	mov	local04, #1
19408     00 24 06 56 |  if_ne	mov	local04, #0
1940c     08 28 0E F2 | 	cmp	local06, #8 wz
19410     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
19414     01 20 56 A2 |  if_e	cmps	local02, #1 wc
19418     01 20 86 21 |  if_nc_and_z	sub	local02, #1
1941c     B4 FF 9F AD |  if_e	jmp	#LR__2170
19420     13 17 02 F6 | 	mov	arg03, local05
19424     10 17 02 F1 | 	add	arg03, local02
19428     0B 29 42 FC | 	wrbyte	local06, arg03
1942c     01 20 06 F1 | 	add	local02, #1
19430     11 21 0A F2 | 	cmp	local02, local03 wz
19434     9C FF 9F 5D |  if_ne	jmp	#LR__2170
19438     11 13 02 F6 | 	mov	arg01, local03
1943c     20 12 06 F1 | 	add	arg01, #32
19440     10 3B B0 FD | 	call	#__system___gc_alloc_managed
19444     FD 28 0A F6 | 	mov	local06, result1 wz
19448     14 FB 01 A6 |  if_e	mov	result1, local06
1944c     34 00 90 AD |  if_e	jmp	#LR__2173
19450     14 13 02 F6 | 	mov	arg01, local06
19454     13 15 02 F6 | 	mov	arg02, local05
19458     11 17 02 F6 | 	mov	arg03, local03
1945c     5C FC BF FD | 	call	#__system____builtin_memmove
19460     20 22 06 F1 | 	add	local03, #32
19464     13 13 02 F6 | 	mov	arg01, local05
19468     24 3C B0 FD | 	call	#__system___gc_free
1946c     14 27 02 F6 | 	mov	local05, local06
19470     60 FF 9F FD | 	jmp	#LR__2170
19474                 | LR__2172
19474     13 29 02 F6 | 	mov	local06, local05
19478     10 29 02 F1 | 	add	local06, local02
1947c     14 01 48 FC | 	wrbyte	#0, local06
19480     13 FB 01 F6 | 	mov	result1, local05
19484                 | LR__2173
19484     A7 F0 03 F6 | 	mov	ptra, fp
19488     B2 00 A0 FD | 	call	#popregs_
1948c                 | __system___basic_read_line_ret
1948c     2D 00 64 FD | 	ret
19490                 | 
19490                 | __system___waitms
19490     09 01 02 F6 | 	mov	_var01, arg01
19494     1A 02 62 FD | 	getct	_var02
19498     14 04 06 FB | 	rdlong	_var03, #20
1949c     97 14 48 FB | 	callpa	#(@LR__2181-@LR__2180)>>2,fcache_load_ptr_
194a0                 | LR__2180
194a0     01 00 00 FF 
194a4     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
194a8     1C 00 90 CD |  if_b	jmp	#LR__2182
194ac     02 03 02 F1 | 	add	_var02, _var03
194b0     01 13 02 F6 | 	mov	arg01, _var02
194b4     00 12 66 FA | 	addct1	arg01, #0
194b8     24 22 60 FD | 	waitct1
194bc     01 00 00 FF 
194c0     E8 01 86 F1 | 	sub	_var01, ##1000
194c4     D8 FF 9F FD | 	jmp	#LR__2180
194c8                 | LR__2181
194c8                 | LR__2182
194c8     01 00 56 F2 | 	cmps	_var01, #1 wc
194cc     28 00 90 CD |  if_b	jmp	#LR__2183
194d0     02 01 02 FD | 	qmul	_var01, _var03
194d4     01 00 00 FF 
194d8     E8 17 06 F6 | 	mov	arg03, ##1000
194dc     19 FA 61 FD | 	getqy	result1
194e0     18 12 62 FD | 	getqx	arg01
194e4     28 FA 61 FD | 	setq	result1
194e8     0B 13 12 FD | 	qdiv	arg01, arg03
194ec     18 12 62 FD | 	getqx	arg01
194f0     01 13 62 FA | 	addct1	arg01, _var02
194f4     24 22 60 FD | 	waitct1
194f8                 | LR__2183
194f8                 | __system___waitms_ret
194f8     2D 00 64 FD | 	ret
194fc                 | 
194fc                 | __system___waitus
194fc     09 01 02 F6 | 	mov	_var01, arg01
19500     1A 02 62 FD | 	getct	_var02
19504     14 04 06 FB | 	rdlong	_var03, #20
19508     97 14 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
1950c                 | LR__2190
1950c     A1 07 00 FF 
19510     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
19514     1C 00 90 CD |  if_b	jmp	#LR__2192
19518     02 03 02 F1 | 	add	_var02, _var03
1951c     01 13 02 F6 | 	mov	arg01, _var02
19520     00 12 66 FA | 	addct1	arg01, #0
19524     24 22 60 FD | 	waitct1
19528     A1 07 00 FF 
1952c     40 00 86 F1 | 	sub	_var01, ##1000000
19530     D8 FF 9F FD | 	jmp	#LR__2190
19534                 | LR__2191
19534                 | LR__2192
19534     01 00 56 F2 | 	cmps	_var01, #1 wc
19538     28 00 90 CD |  if_b	jmp	#LR__2193
1953c     02 01 02 FD | 	qmul	_var01, _var03
19540     A1 07 00 FF 
19544     40 16 06 F6 | 	mov	arg03, ##1000000
19548     19 FA 61 FD | 	getqy	result1
1954c     18 12 62 FD | 	getqx	arg01
19550     28 FA 61 FD | 	setq	result1
19554     0B 13 12 FD | 	qdiv	arg01, arg03
19558     18 FA 61 FD | 	getqx	result1
1955c     FD 02 62 FA | 	addct1	_var02, result1
19560     24 22 60 FD | 	waitct1
19564                 | LR__2193
19564                 | __system___waitus_ret
19564     2D 00 64 FD | 	ret
19568                 | 
19568                 | __system___mount
19568     0B 4A 05 F6 | 	mov	COUNT_, #11
1956c     A8 00 A0 FD | 	call	#pushregs_
19570     09 1F 02 F6 | 	mov	local01, arg01
19574     0A 21 0A F6 | 	mov	local02, arg02 wz
19578     01 22 66 F6 | 	neg	local03, #1
1957c     01 FA 65 A6 |  if_e	neg	result1, #1
19580     98 02 90 AD |  if_e	jmp	#LR__2215
19584     0F FB C1 FA | 	rdbyte	result1, local01
19588     2F FA 0D F2 | 	cmp	result1, #47 wz
1958c     28 00 90 5D |  if_ne	jmp	#LR__2202
19590     0F 13 02 F6 | 	mov	arg01, local01
19594     09 25 02 F6 | 	mov	local04, arg01
19598     97 06 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
1959c                 | LR__2200
1959c     12 FB C9 FA | 	rdbyte	result1, local04 wz
195a0     01 24 06 51 |  if_ne	add	local04, #1
195a4     F4 FF 9F 5D |  if_ne	jmp	#LR__2200
195a8                 | LR__2201
195a8     09 25 82 F1 | 	sub	local04, arg01
195ac     12 FB 01 F6 | 	mov	result1, local04
195b0     10 FA 55 F2 | 	cmps	result1, #16 wc
195b4     14 00 90 CD |  if_b	jmp	#LR__2203
195b8                 | LR__2202
195b8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
195bc     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
195c0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
195c4     01 FA 65 F6 | 	neg	result1, #1
195c8     50 02 90 FD | 	jmp	#LR__2215
195cc                 | LR__2203
195cc     00 26 06 F6 | 	mov	local05, #0
195d0                 | LR__2204
195d0     04 26 56 F2 | 	cmps	local05, #4 wc
195d4     B0 00 90 3D |  if_ae	jmp	#LR__2209
195d8     13 13 02 F6 | 	mov	arg01, local05
195dc     02 12 66 F0 | 	shl	arg01, #2
195e0     64 E8 05 F1 | 	add	ptr___system__dat__, #100
195e4     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
195e8     09 FB 09 FB | 	rdlong	result1, arg01 wz
195ec     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
195f0     00 22 56 A2 |  if_e	cmps	local03, #0 wc
195f4     13 23 02 86 |  if_c_and_z	mov	local03, local05
195f8     84 00 90 8D |  if_c_and_z	jmp	#LR__2208
195fc     13 13 02 F6 | 	mov	arg01, local05
19600     02 12 66 F0 | 	shl	arg01, #2
19604     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19608     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1960c     09 13 02 FB | 	rdlong	arg01, arg01
19610     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19614     09 25 02 F6 | 	mov	local04, arg01
19618     97 06 48 FB | 	callpa	#(@LR__2206-@LR__2205)>>2,fcache_load_ptr_
1961c                 | LR__2205
1961c     12 FB C9 FA | 	rdbyte	result1, local04 wz
19620     01 24 06 51 |  if_ne	add	local04, #1
19624     F4 FF 9F 5D |  if_ne	jmp	#LR__2205
19628                 | LR__2206
19628     09 25 82 F1 | 	sub	local04, arg01
1962c     12 29 02 F6 | 	mov	local06, local04
19630     14 13 02 F6 | 	mov	arg01, local06
19634     0F 13 02 F1 | 	add	arg01, local01
19638     09 FB C1 FA | 	rdbyte	result1, arg01
1963c     2F FA 0D F2 | 	cmp	result1, #47 wz
19640     14 2B 02 56 |  if_ne	mov	local07, local06
19644     0F 2B 02 51 |  if_ne	add	local07, local01
19648     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
1964c     30 00 90 5D |  if_ne	jmp	#LR__2207
19650     13 17 02 F6 | 	mov	arg03, local05
19654     02 16 66 F0 | 	shl	arg03, #2
19658     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1965c     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
19660     0B 15 02 FB | 	rdlong	arg02, arg03
19664     0F 13 02 F6 | 	mov	arg01, local01
19668     14 17 02 F6 | 	mov	arg03, local06
1966c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19670     24 4D B0 FD | 	call	#__system__strncmp
19674     00 FA 0D F2 | 	cmp	result1, #0 wz
19678     13 23 02 A6 |  if_e	mov	local03, local05
1967c     08 00 90 AD |  if_e	jmp	#LR__2209
19680                 | LR__2207
19680                 | LR__2208
19680     01 26 06 F1 | 	add	local05, #1
19684     48 FF 9F FD | 	jmp	#LR__2204
19688                 | LR__2209
19688     FF FF 7F FF 
1968c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
19690     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19694     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
19698     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1969c     01 FA 65 A6 |  if_e	neg	result1, #1
196a0     78 01 90 AD |  if_e	jmp	#LR__2215
196a4     11 27 02 F6 | 	mov	local05, local03
196a8     13 2B 02 F6 | 	mov	local07, local05
196ac     02 2A 66 F0 | 	shl	local07, #2
196b0     74 E8 05 F1 | 	add	ptr___system__dat__, #116
196b4     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
196b8     15 29 0A FB | 	rdlong	local06, local07 wz
196bc     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
196c0     58 00 90 AD |  if_e	jmp	#LR__2210
196c4     4C 28 06 F1 | 	add	local06, #76
196c8     14 2B 0A FB | 	rdlong	local07, local06 wz
196cc     4C 28 86 F1 | 	sub	local06, #76
196d0     48 00 90 AD |  if_e	jmp	#LR__2210
196d4     4C 28 06 F1 | 	add	local06, #76
196d8     14 2B 02 FB | 	rdlong	local07, local06
196dc     15 23 02 F6 | 	mov	local03, local07
196e0     13 2A 46 F7 | 	zerox	local07, #19
196e4     14 22 46 F0 | 	shr	local03, #20
196e8     02 22 66 F0 | 	shl	local03, #2
196ec     ED 22 02 F1 | 	add	local03, __methods__
196f0     11 23 02 FB | 	rdlong	local03, local03
196f4     13 29 02 F6 | 	mov	local06, local05
196f8     02 28 66 F0 | 	shl	local06, #2
196fc     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19700     F4 28 02 F1 | 	add	local06, ptr___system__dat__
19704     14 13 02 FB | 	rdlong	arg01, local06
19708     F2 28 02 F6 | 	mov	local06, objptr
1970c     15 E5 01 F6 | 	mov	objptr, local07
19710     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19714     2D 22 62 FD | 	call	local03
19718     14 E5 01 F6 | 	mov	objptr, local06
1971c                 | LR__2210
1971c     13 2D 02 F6 | 	mov	local08, local05
19720     02 2C 66 F0 | 	shl	local08, #2
19724     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19728     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
1972c     16 21 62 FC | 	wrlong	local02, local08
19730     00 20 0E F2 | 	cmp	local02, #0 wz
19734     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
19738     18 00 90 5D |  if_ne	jmp	#LR__2211
1973c     02 26 66 F0 | 	shl	local05, #2
19740     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19744     F4 26 02 F1 | 	add	local05, ptr___system__dat__
19748     13 01 68 FC | 	wrlong	#0, local05
1974c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19750     C4 00 90 FD | 	jmp	#LR__2214
19754                 | LR__2211
19754     13 2F 02 F6 | 	mov	local09, local05
19758     04 2E 66 F0 | 	shl	local09, #4
1975c     24 E8 05 F1 | 	add	ptr___system__dat__, #36
19760     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
19764     17 13 02 F6 | 	mov	arg01, local09
19768     0F 15 02 F6 | 	mov	arg02, local01
1976c     10 16 06 F6 | 	mov	arg03, #16
19770     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
19774     74 4B B0 FD | 	call	#__system__strncpy
19778     48 20 06 F1 | 	add	local02, #72
1977c     10 2D 0A FB | 	rdlong	local08, local02 wz
19780     48 20 86 F1 | 	sub	local02, #72
19784     7C 00 90 AD |  if_e	jmp	#LR__2213
19788     48 20 06 F1 | 	add	local02, #72
1978c     10 2D 02 FB | 	rdlong	local08, local02
19790     16 31 02 F6 | 	mov	local10, local08
19794     13 2C 46 F7 | 	zerox	local08, #19
19798     14 30 46 F0 | 	shr	local10, #20
1979c     02 30 66 F0 | 	shl	local10, #2
197a0     ED 30 02 F1 | 	add	local10, __methods__
197a4     18 31 02 FB | 	rdlong	local10, local10
197a8     17 13 02 F6 | 	mov	arg01, local09
197ac     F2 32 02 F6 | 	mov	local11, objptr
197b0     16 E5 01 F6 | 	mov	objptr, local08
197b4     2D 30 62 FD | 	call	local10
197b8     19 E5 01 F6 | 	mov	objptr, local11
197bc     FD 12 0A F6 | 	mov	arg01, result1 wz
197c0     40 00 90 AD |  if_e	jmp	#LR__2212
197c4     13 2D 02 F6 | 	mov	local08, local05
197c8     02 2C 66 F0 | 	shl	local08, #2
197cc     74 E8 05 F1 | 	add	ptr___system__dat__, #116
197d0     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
197d4     16 01 68 FC | 	wrlong	#0, local08
197d8     02 26 66 F0 | 	shl	local05, #2
197dc     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
197e0     F4 26 02 F1 | 	add	local05, ptr___system__dat__
197e4     13 01 68 FC | 	wrlong	#0, local05
197e8     09 13 6A F6 | 	neg	arg01, arg01 wz
197ec     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
197f0     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
197f4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
197f8     01 FA 65 56 |  if_ne	neg	result1, #1
197fc     00 FA 05 A6 |  if_e	mov	result1, #0
19800     18 00 90 FD | 	jmp	#LR__2215
19804                 | LR__2212
19804                 | LR__2213
19804     02 26 66 F0 | 	shl	local05, #2
19808     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1980c     F4 26 02 F1 | 	add	local05, ptr___system__dat__
19810     13 2F 62 FC | 	wrlong	local09, local05
19814     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19818                 | LR__2214
19818     00 FA 05 F6 | 	mov	result1, #0
1981c                 | LR__2215
1981c     A7 F0 03 F6 | 	mov	ptra, fp
19820     B2 00 A0 FD | 	call	#popregs_
19824                 | __system___mount_ret
19824     2D 00 64 FD | 	ret
19828                 | 
19828                 | __system___chdir
19828     00 4A 05 F6 | 	mov	COUNT_, #0
1982c     A8 00 A0 FD | 	call	#pushregs_
19830     40 F0 07 F1 | 	add	ptra, #64
19834     04 4E 05 F1 | 	add	fp, #4
19838     A7 12 62 FC | 	wrlong	arg01, fp
1983c     04 4E 05 F1 | 	add	fp, #4
19840     A7 14 02 F6 | 	mov	arg02, fp
19844     08 4E 85 F1 | 	sub	fp, #8
19848     80 47 B0 FD | 	call	#__system__stat
1984c     3C 4E 05 F1 | 	add	fp, #60
19850     A7 FA 61 FC | 	wrlong	result1, fp
19854     3C 4E 85 F1 | 	sub	fp, #60
19858     00 FA 0D F2 | 	cmp	result1, #0 wz
1985c     3C 4E 05 51 |  if_ne	add	fp, #60
19860     A7 FA 01 5B |  if_ne	rdlong	result1, fp
19864     3C 4E 85 51 |  if_ne	sub	fp, #60
19868     BC 00 90 5D |  if_ne	jmp	#LR__2222
1986c     10 4E 05 F1 | 	add	fp, #16
19870     A7 12 02 FB | 	rdlong	arg01, fp
19874     10 4E 85 F1 | 	sub	fp, #16
19878     78 00 00 FF 
1987c     00 12 06 F5 | 	and	arg01, ##61440
19880     08 00 00 FF 
19884     00 12 0E F2 | 	cmp	arg01, ##4096 wz
19888     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
1988c     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
19890     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
19894     01 FA 65 56 |  if_ne	neg	result1, #1
19898     8C 00 90 5D |  if_ne	jmp	#LR__2222
1989c     04 4E 05 F1 | 	add	fp, #4
198a0     A7 16 02 FB | 	rdlong	arg03, fp
198a4     04 4E 85 F1 | 	sub	fp, #4
198a8     0B 17 C2 FA | 	rdbyte	arg03, arg03
198ac     2F 16 0E F2 | 	cmp	arg03, #47 wz
198b0     24 00 90 5D |  if_ne	jmp	#LR__2220
198b4     84 E8 05 F1 | 	add	ptr___system__dat__, #132
198b8     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
198bc     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
198c0     04 4E 05 F1 | 	add	fp, #4
198c4     A7 14 02 FB | 	rdlong	arg02, fp
198c8     04 4E 85 F1 | 	sub	fp, #4
198cc     00 17 06 F6 | 	mov	arg03, #256
198d0     18 4A B0 FD | 	call	#__system__strncpy
198d4     4C 00 90 FD | 	jmp	#LR__2221
198d8                 | LR__2220
198d8     84 E9 05 F1 | 	add	ptr___system__dat__, #388
198dc     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
198e0     38 4E 05 F1 | 	add	fp, #56
198e4     A7 12 62 FC | 	wrlong	arg01, fp
198e8     38 4E 85 F1 | 	sub	fp, #56
198ec     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
198f0     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
198f4     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
198f8     00 17 06 F6 | 	mov	arg03, #256
198fc     EC 49 B0 FD | 	call	#__system__strncpy
19900     38 4E 05 F1 | 	add	fp, #56
19904     A7 12 02 FB | 	rdlong	arg01, fp
19908     34 4E 85 F1 | 	sub	fp, #52
1990c     A7 14 02 FB | 	rdlong	arg02, fp
19910     04 4E 85 F1 | 	sub	fp, #4
19914     84 E8 05 F1 | 	add	ptr___system__dat__, #132
19918     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
1991c     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
19920     10 00 B0 FD | 	call	#__system____getvfsforfile
19924                 | LR__2221
19924     00 FA 05 F6 | 	mov	result1, #0
19928                 | LR__2222
19928     A7 F0 03 F6 | 	mov	ptra, fp
1992c     B2 00 A0 FD | 	call	#popregs_
19930                 | __system___chdir_ret
19930     2D 00 64 FD | 	ret
19934                 | 
19934                 | __system____getvfsforfile
19934     0E 4A 05 F6 | 	mov	COUNT_, #14
19938     A8 00 A0 FD | 	call	#pushregs_
1993c     09 1F 02 F6 | 	mov	local01, arg01
19940     0A 21 02 F6 | 	mov	local02, arg02
19944     0B 23 02 F6 | 	mov	local03, arg03
19948     97 10 48 FB | 	callpa	#(@LR__2231-@LR__2230)>>2,fcache_load_ptr_
1994c                 | LR__2230
1994c     10 FB C1 FA | 	rdbyte	result1, local02
19950     2F FA 0D F2 | 	cmp	result1, #47 wz
19954     01 20 06 A1 |  if_e	add	local02, #1
19958     10 25 C2 AA |  if_e	rdbyte	local04, local02
1995c     01 20 86 A1 |  if_e	sub	local02, #1
19960     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
19964     01 20 06 A1 |  if_e	add	local02, #1
19968     E0 FF 9F AD |  if_e	jmp	#LR__2230
1996c                 | LR__2231
1996c     10 25 C2 FA | 	rdbyte	local04, local02
19970     2F 24 0E F2 | 	cmp	local04, #47 wz
19974     14 00 90 5D |  if_ne	jmp	#LR__2232
19978     0F 13 02 F6 | 	mov	arg01, local01
1997c     10 15 02 F6 | 	mov	arg02, local02
19980     00 17 06 F6 | 	mov	arg03, #256
19984     64 49 B0 FD | 	call	#__system__strncpy
19988     7C 00 90 FD | 	jmp	#LR__2234
1998c                 | LR__2232
1998c     84 E8 05 F1 | 	add	ptr___system__dat__, #132
19990     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
19994     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
19998     0F 13 02 F6 | 	mov	arg01, local01
1999c     00 17 06 F6 | 	mov	arg03, #256
199a0     48 49 B0 FD | 	call	#__system__strncpy
199a4     10 25 CA FA | 	rdbyte	local04, local02 wz
199a8     5C 00 90 AD |  if_e	jmp	#LR__2233
199ac     10 25 C2 FA | 	rdbyte	local04, local02
199b0     2E 24 0E F2 | 	cmp	local04, #46 wz
199b4     01 20 06 A1 |  if_e	add	local02, #1
199b8     10 27 C2 AA |  if_e	rdbyte	local05, local02
199bc     01 20 86 A1 |  if_e	sub	local02, #1
199c0     13 29 02 A6 |  if_e	mov	local06, local05
199c4     07 28 4E A7 |  if_e	zerox	local06, #7 wz
199c8     3C 00 90 AD |  if_e	jmp	#LR__2233
199cc     0F 27 C2 FA | 	rdbyte	local05, local01
199d0     2F 26 0E F2 | 	cmp	local05, #47 wz
199d4     01 1E 06 A1 |  if_e	add	local01, #1
199d8     0F 25 C2 AA |  if_e	rdbyte	local04, local01
199dc     01 1E 86 A1 |  if_e	sub	local01, #1
199e0     00 24 4E A2 |  if_e	cmps	local04, #0 wz
199e4     43 01 00 5F 
199e8     A4 14 06 56 |  if_ne	mov	arg02, ##@LR__4280
199ec     0F 13 02 56 |  if_ne	mov	arg01, local01
199f0     00 17 06 56 |  if_ne	mov	arg03, #256
199f4     40 49 B0 5D |  if_ne	call	#__system__strncat
199f8     0F 13 02 F6 | 	mov	arg01, local01
199fc     10 15 02 F6 | 	mov	arg02, local02
19a00     00 17 06 F6 | 	mov	arg03, #256
19a04     30 49 B0 FD | 	call	#__system__strncat
19a08                 | LR__2233
19a08                 | LR__2234
19a08     0F 13 02 F6 | 	mov	arg01, local01
19a0c     E8 4A B0 FD | 	call	#__system___normalizeName
19a10     0F 25 CA FA | 	rdbyte	local04, local01 wz
19a14     1C 00 90 AD |  if_e	jmp	#LR__2235
19a18     0F 25 C2 FA | 	rdbyte	local04, local01
19a1c     2F 24 0E F2 | 	cmp	local04, #47 wz
19a20     01 1E 06 A1 |  if_e	add	local01, #1
19a24     0F 29 C2 AA |  if_e	rdbyte	local06, local01
19a28     01 1E 86 A1 |  if_e	sub	local01, #1
19a2c     00 28 4E A2 |  if_e	cmps	local06, #0 wz
19a30     18 00 90 5D |  if_ne	jmp	#LR__2236
19a34                 | LR__2235
19a34     01 00 00 FF 
19a38     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
19a3c     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
19a40     01 00 00 FF 
19a44     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
19a48     EC 01 90 FD | 	jmp	#LR__2250
19a4c                 | LR__2236
19a4c     00 2A 06 F6 | 	mov	local07, #0
19a50                 | LR__2237
19a50     04 2A 56 F2 | 	cmps	local07, #4 wc
19a54     CC 01 90 3D |  if_ae	jmp	#LR__2249
19a58     15 29 02 F6 | 	mov	local06, local07
19a5c     02 28 66 F0 | 	shl	local06, #2
19a60     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19a64     F4 28 02 F1 | 	add	local06, ptr___system__dat__
19a68     14 29 0A FB | 	rdlong	local06, local06 wz
19a6c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19a70     A8 01 90 AD |  if_e	jmp	#LR__2248
19a74     15 25 02 F6 | 	mov	local04, local07
19a78     02 24 66 F0 | 	shl	local04, #2
19a7c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19a80     F4 24 02 F1 | 	add	local04, ptr___system__dat__
19a84     12 13 02 FB | 	rdlong	arg01, local04
19a88     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19a8c     09 2D 02 F6 | 	mov	local08, arg01
19a90     97 06 48 FB | 	callpa	#(@LR__2239-@LR__2238)>>2,fcache_load_ptr_
19a94                 | LR__2238
19a94     16 FB C9 FA | 	rdbyte	result1, local08 wz
19a98     01 2C 06 51 |  if_ne	add	local08, #1
19a9c     F4 FF 9F 5D |  if_ne	jmp	#LR__2238
19aa0                 | LR__2239
19aa0     09 2D 82 F1 | 	sub	local08, arg01
19aa4     16 2F 02 F6 | 	mov	local09, local08
19aa8     17 25 02 F6 | 	mov	local04, local09
19aac     0F 25 02 F1 | 	add	local04, local01
19ab0     12 29 C2 FA | 	rdbyte	local06, local04
19ab4     2F 28 0E F2 | 	cmp	local06, #47 wz
19ab8     17 31 02 56 |  if_ne	mov	local10, local09
19abc     0F 31 02 51 |  if_ne	add	local10, local01
19ac0     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
19ac4     54 01 90 5D |  if_ne	jmp	#LR__2247
19ac8     15 17 02 F6 | 	mov	arg03, local07
19acc     02 16 66 F0 | 	shl	arg03, #2
19ad0     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19ad4     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
19ad8     0B 15 02 FB | 	rdlong	arg02, arg03
19adc     17 17 02 F6 | 	mov	arg03, local09
19ae0     0F 13 02 F6 | 	mov	arg01, local01
19ae4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19ae8     AC 48 B0 FD | 	call	#__system__strncmp
19aec     00 FA 4D F2 | 	cmps	result1, #0 wz
19af0     28 01 90 5D |  if_ne	jmp	#LR__2247
19af4     15 33 02 F6 | 	mov	local11, local07
19af8     02 32 66 F0 | 	shl	local11, #2
19afc     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19b00     F4 32 02 F1 | 	add	local11, ptr___system__dat__
19b04     19 35 02 FB | 	rdlong	local12, local11
19b08     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
19b0c     97 22 48 FB | 	callpa	#(@LR__2241-@LR__2240)>>2,fcache_load_ptr_
19b10                 | LR__2240
19b10     17 29 02 F6 | 	mov	local06, local09
19b14     01 28 06 F1 | 	add	local06, #1
19b18     0F 29 02 F1 | 	add	local06, local01
19b1c     14 33 C2 FA | 	rdbyte	local11, local06
19b20     2E 32 0E F2 | 	cmp	local11, #46 wz
19b24     2C 00 90 5D |  if_ne	jmp	#LR__2242
19b28     17 33 02 F6 | 	mov	local11, local09
19b2c     02 32 06 F1 | 	add	local11, #2
19b30     0F 33 02 F1 | 	add	local11, local01
19b34     19 31 C2 FA | 	rdbyte	local10, local11
19b38     2F 30 0E F2 | 	cmp	local10, #47 wz
19b3c     17 37 02 56 |  if_ne	mov	local13, local09
19b40     02 36 06 51 |  if_ne	add	local13, #2
19b44     0F 37 02 51 |  if_ne	add	local13, local01
19b48     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
19b4c     01 2E 06 A1 |  if_e	add	local09, #1
19b50     BC FF 9F AD |  if_e	jmp	#LR__2240
19b54                 | LR__2241
19b54                 | LR__2242
19b54     00 22 0E F2 | 	cmp	local03, #0 wz
19b58     11 13 02 56 |  if_ne	mov	arg01, local03
19b5c     0F 15 02 56 |  if_ne	mov	arg02, local01
19b60     00 17 06 56 |  if_ne	mov	arg03, #256
19b64     84 47 B0 5D |  if_ne	call	#__system__strncpy
19b68     0F 15 02 F6 | 	mov	arg02, local01
19b6c     17 15 02 F1 | 	add	arg02, local09
19b70     01 14 06 F1 | 	add	arg02, #1
19b74     0F 13 02 F6 | 	mov	arg01, local01
19b78     D4 F5 BF FD | 	call	#__system____builtin_strcpy
19b7c     0F 13 02 F6 | 	mov	arg01, local01
19b80     09 2D 02 F6 | 	mov	local08, arg01
19b84     97 06 48 FB | 	callpa	#(@LR__2244-@LR__2243)>>2,fcache_load_ptr_
19b88                 | LR__2243
19b88     16 FB C9 FA | 	rdbyte	result1, local08 wz
19b8c     01 2C 06 51 |  if_ne	add	local08, #1
19b90     F4 FF 9F 5D |  if_ne	jmp	#LR__2243
19b94                 | LR__2244
19b94     09 2D 82 F1 | 	sub	local08, arg01
19b98     16 2F 02 F6 | 	mov	local09, local08
19b9c                 | LR__2245
19b9c     01 2E 56 F2 | 	cmps	local09, #1 wc
19ba0     70 00 90 CD |  if_b	jmp	#LR__2246
19ba4     17 25 02 F6 | 	mov	local04, local09
19ba8     0F 25 02 F1 | 	add	local04, local01
19bac     12 33 C2 FA | 	rdbyte	local11, local04
19bb0     2F 32 0E F2 | 	cmp	local11, #47 wz
19bb4     17 33 02 A6 |  if_e	mov	local11, local09
19bb8     0F 33 02 A1 |  if_e	add	local11, local01
19bbc     19 01 48 AC |  if_e	wrbyte	#0, local11
19bc0     01 2E 86 A1 |  if_e	sub	local09, #1
19bc4     D4 FF 9F AD |  if_e	jmp	#LR__2245
19bc8     17 25 02 F6 | 	mov	local04, local09
19bcc     0F 25 02 F1 | 	add	local04, local01
19bd0     12 33 C2 FA | 	rdbyte	local11, local04
19bd4     2E 32 0E F2 | 	cmp	local11, #46 wz
19bd8     38 00 90 5D |  if_ne	jmp	#LR__2246
19bdc     02 2E 56 F2 | 	cmps	local09, #2 wc
19be0     30 00 90 CD |  if_b	jmp	#LR__2246
19be4     17 39 02 F6 | 	mov	local14, local09
19be8     01 38 86 F1 | 	sub	local14, #1
19bec     0F 39 02 F1 | 	add	local14, local01
19bf0     1C 27 C2 FA | 	rdbyte	local05, local14
19bf4     2F 26 0E F2 | 	cmp	local05, #47 wz
19bf8     18 00 90 5D |  if_ne	jmp	#LR__2246
19bfc     17 25 02 F6 | 	mov	local04, local09
19c00     01 24 86 F1 | 	sub	local04, #1
19c04     0F 25 02 F1 | 	add	local04, local01
19c08     12 01 48 FC | 	wrbyte	#0, local04
19c0c     02 2E 86 F1 | 	sub	local09, #2
19c10     88 FF 9F FD | 	jmp	#LR__2245
19c14                 | LR__2246
19c14     1A FB 01 F6 | 	mov	result1, local12
19c18     1C 00 90 FD | 	jmp	#LR__2250
19c1c                 | LR__2247
19c1c                 | LR__2248
19c1c     01 2A 06 F1 | 	add	local07, #1
19c20     2C FE 9F FD | 	jmp	#LR__2237
19c24                 | LR__2249
19c24     03 00 00 FF 
19c28     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
19c2c     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
19c30     03 00 00 FF 
19c34     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
19c38                 | LR__2250
19c38     A7 F0 03 F6 | 	mov	ptra, fp
19c3c     B2 00 A0 FD | 	call	#popregs_
19c40                 | __system____getvfsforfile_ret
19c40     2D 00 64 FD | 	ret
19c44                 | 
19c44                 | __system___basic_open
19c44     05 4A 05 F6 | 	mov	COUNT_, #5
19c48     A8 00 A0 FD | 	call	#pushregs_
19c4c     0A 1F 02 F6 | 	mov	local01, arg02
19c50     0B 21 02 F6 | 	mov	local02, arg03
19c54     0C 23 02 F6 | 	mov	local03, arg04
19c58     00 24 06 F6 | 	mov	local04, #0
19c5c     64 46 B0 FD | 	call	#__system____getftab
19c60     FD 26 0A F6 | 	mov	local05, result1 wz
19c64     18 00 90 5D |  if_ne	jmp	#LR__2260
19c68     EE 12 02 F6 | 	mov	arg01, abortchain
19c6c     0C 14 06 F6 | 	mov	arg02, #12
19c70     01 16 06 F6 | 	mov	arg03, #1
19c74     DA 00 A0 FD | 	call	#__longjmp
19c78     01 FA 65 F6 | 	neg	result1, #1
19c7c     14 01 90 FD | 	jmp	#LR__2269
19c80                 | LR__2260
19c80     08 26 06 F1 | 	add	local05, #8
19c84     13 FB 09 FB | 	rdlong	result1, local05 wz
19c88     08 26 86 F1 | 	sub	local05, #8
19c8c     13 13 02 56 |  if_ne	mov	arg01, local05
19c90     C0 3D B0 5D |  if_ne	call	#__system___closeraw
19c94     00 1E 0E F2 | 	cmp	local01, #0 wz
19c98     00 20 0E A2 |  if_e	cmp	local02, #0 wz
19c9c     00 22 0E A2 |  if_e	cmp	local03, #0 wz
19ca0     3C 00 90 AD |  if_e	jmp	#LR__2262
19ca4     0C 12 06 F6 | 	mov	arg01, #12
19ca8     A8 32 B0 FD | 	call	#__system___gc_alloc_managed
19cac     FD 24 0A F6 | 	mov	local04, result1 wz
19cb0     18 00 90 5D |  if_ne	jmp	#LR__2261
19cb4     EE 12 02 F6 | 	mov	arg01, abortchain
19cb8     07 14 06 F6 | 	mov	arg02, #7
19cbc     01 16 06 F6 | 	mov	arg03, #1
19cc0     DA 00 A0 FD | 	call	#__longjmp
19cc4     01 FA 65 F6 | 	neg	result1, #1
19cc8     C8 00 90 FD | 	jmp	#LR__2269
19ccc                 | LR__2261
19ccc     12 01 68 FC | 	wrlong	#0, local04
19cd0     04 24 06 F1 | 	add	local04, #4
19cd4     12 01 68 FC | 	wrlong	#0, local04
19cd8     04 24 86 F1 | 	sub	local04, #4
19cdc     13 25 62 FC | 	wrlong	local04, local05
19ce0                 | LR__2262
19ce0     00 1E 0E F2 | 	cmp	local01, #0 wz
19ce4     20 00 90 AD |  if_e	jmp	#LR__2263
19ce8     12 1F 62 FC | 	wrlong	local01, local04
19cec     12 FB 01 F6 | 	mov	result1, local04
19cf0     00 18 03 FF 
19cf4     00 FA 45 F5 | 	or	result1, ##103809024
19cf8     1C 26 06 F1 | 	add	local05, #28
19cfc     13 FB 61 FC | 	wrlong	result1, local05
19d00     1C 26 86 F1 | 	sub	local05, #28
19d04     0C 00 90 FD | 	jmp	#LR__2264
19d08                 | LR__2263
19d08     1C 26 06 F1 | 	add	local05, #28
19d0c     13 01 68 FC | 	wrlong	#0, local05
19d10     1C 26 86 F1 | 	sub	local05, #28
19d14                 | LR__2264
19d14     00 20 0E F2 | 	cmp	local02, #0 wz
19d18     28 00 90 AD |  if_e	jmp	#LR__2265
19d1c     04 24 06 F1 | 	add	local04, #4
19d20     12 21 62 FC | 	wrlong	local02, local04
19d24     04 24 86 F1 | 	sub	local04, #4
19d28     12 FB 01 F6 | 	mov	result1, local04
19d2c     00 20 03 FF 
19d30     00 FA 45 F5 | 	or	result1, ##104857600
19d34     20 26 06 F1 | 	add	local05, #32
19d38     13 FB 61 FC | 	wrlong	result1, local05
19d3c     20 26 86 F1 | 	sub	local05, #32
19d40     0C 00 90 FD | 	jmp	#LR__2266
19d44                 | LR__2265
19d44     20 26 06 F1 | 	add	local05, #32
19d48     13 01 68 FC | 	wrlong	#0, local05
19d4c     20 26 86 F1 | 	sub	local05, #32
19d50                 | LR__2266
19d50     00 22 0E F2 | 	cmp	local03, #0 wz
19d54     24 00 90 AD |  if_e	jmp	#LR__2267
19d58     08 24 06 F1 | 	add	local04, #8
19d5c     12 23 62 FC | 	wrlong	local03, local04
19d60     08 24 86 F1 | 	sub	local04, #8
19d64     00 28 03 FF 
19d68     00 24 46 F5 | 	or	local04, ##105906176
19d6c     24 26 06 F1 | 	add	local05, #36
19d70     13 25 62 FC | 	wrlong	local04, local05
19d74     24 26 86 F1 | 	sub	local05, #36
19d78     0C 00 90 FD | 	jmp	#LR__2268
19d7c                 | LR__2267
19d7c     24 26 06 F1 | 	add	local05, #36
19d80     13 01 68 FC | 	wrlong	#0, local05
19d84     24 26 86 F1 | 	sub	local05, #36
19d88                 | LR__2268
19d88     08 26 06 F1 | 	add	local05, #8
19d8c     13 0F 68 FC | 	wrlong	#7, local05
19d90     00 FA 05 F6 | 	mov	result1, #0
19d94                 | LR__2269
19d94     A7 F0 03 F6 | 	mov	ptra, fp
19d98     B2 00 A0 FD | 	call	#popregs_
19d9c                 | __system___basic_open_ret
19d9c     2D 00 64 FD | 	ret
19da0                 | 
19da0                 | __system___basic_open_string
19da0     04 4A 05 F6 | 	mov	COUNT_, #4
19da4     A8 00 A0 FD | 	call	#pushregs_
19da8     0A 1F 02 F6 | 	mov	local01, arg02
19dac     0B 21 02 F6 | 	mov	local02, arg03
19db0     10 45 B0 FD | 	call	#__system____getftab
19db4     FD 22 0A F6 | 	mov	local03, result1 wz
19db8     18 00 90 5D |  if_ne	jmp	#LR__2270
19dbc     EE 12 02 F6 | 	mov	arg01, abortchain
19dc0     0C 14 06 F6 | 	mov	arg02, #12
19dc4     01 16 06 F6 | 	mov	arg03, #1
19dc8     DA 00 A0 FD | 	call	#__longjmp
19dcc     01 FA 65 F6 | 	neg	result1, #1
19dd0     58 00 90 FD | 	jmp	#LR__2272
19dd4                 | LR__2270
19dd4     08 22 06 F1 | 	add	local03, #8
19dd8     11 19 0A FB | 	rdlong	arg04, local03 wz
19ddc     08 22 86 F1 | 	sub	local03, #8
19de0     11 13 02 56 |  if_ne	mov	arg01, local03
19de4     6C 3C B0 5D |  if_ne	call	#__system___closeraw
19de8     0F 15 02 F6 | 	mov	arg02, local01
19dec     10 17 02 F6 | 	mov	arg03, local02
19df0     11 13 02 F6 | 	mov	arg01, local03
19df4     B6 19 06 F6 | 	mov	arg04, #438
19df8     54 39 B0 FD | 	call	#__system___openraw
19dfc     FD 24 02 F6 | 	mov	local04, result1
19e00     00 24 56 F2 | 	cmps	local04, #0 wc
19e04     20 00 90 3D |  if_ae	jmp	#LR__2271
19e08     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19e0c     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
19e10     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19e14     EE 12 02 F6 | 	mov	arg01, abortchain
19e18     01 16 06 F6 | 	mov	arg03, #1
19e1c     DA 00 A0 FD | 	call	#__longjmp
19e20     01 FA 65 F6 | 	neg	result1, #1
19e24     04 00 90 FD | 	jmp	#LR__2272
19e28                 | LR__2271
19e28     12 FB 01 F6 | 	mov	result1, local04
19e2c                 | LR__2272
19e2c     A7 F0 03 F6 | 	mov	ptra, fp
19e30     B2 00 A0 FD | 	call	#popregs_
19e34                 | __system___basic_open_string_ret
19e34     2D 00 64 FD | 	ret
19e38                 | 
19e38                 | __system___basic_print_char
19e38     03 4A 05 F6 | 	mov	COUNT_, #3
19e3c     A8 00 A0 FD | 	call	#pushregs_
19e40     0A 1F 02 F6 | 	mov	local01, arg02
19e44     D0 4B B0 FD | 	call	#__system___gettxfunc
19e48     FD 20 0A F6 | 	mov	local02, result1 wz
19e4c     00 FA 05 A6 |  if_e	mov	result1, #0
19e50     30 00 90 AD |  if_e	jmp	#LR__2280
19e54     10 23 02 F6 | 	mov	local03, local02
19e58     13 20 46 F7 | 	zerox	local02, #19
19e5c     14 22 46 F0 | 	shr	local03, #20
19e60     02 22 66 F0 | 	shl	local03, #2
19e64     ED 22 02 F1 | 	add	local03, __methods__
19e68     11 23 02 FB | 	rdlong	local03, local03
19e6c     0F 13 02 F6 | 	mov	arg01, local01
19e70     F2 1E 02 F6 | 	mov	local01, objptr
19e74     10 E5 01 F6 | 	mov	objptr, local02
19e78     2D 22 62 FD | 	call	local03
19e7c     0F E5 01 F6 | 	mov	objptr, local01
19e80     01 FA 05 F6 | 	mov	result1, #1
19e84                 | LR__2280
19e84     A7 F0 03 F6 | 	mov	ptra, fp
19e88     B2 00 A0 FD | 	call	#popregs_
19e8c                 | __system___basic_print_char_ret
19e8c     2D 00 64 FD | 	ret
19e90                 | 
19e90                 | __system___basic_print_string
19e90     03 4A 05 F6 | 	mov	COUNT_, #3
19e94     A8 00 A0 FD | 	call	#pushregs_
19e98     0A 1F 02 F6 | 	mov	local01, arg02
19e9c     0B 21 02 F6 | 	mov	local02, arg03
19ea0     74 4B B0 FD | 	call	#__system___gettxfunc
19ea4     FD 22 0A F6 | 	mov	local03, result1 wz
19ea8     00 FA 05 A6 |  if_e	mov	result1, #0
19eac     18 00 90 AD |  if_e	jmp	#LR__2290
19eb0     00 1E 0E F2 | 	cmp	local01, #0 wz
19eb4     00 FA 05 A6 |  if_e	mov	result1, #0
19eb8     11 13 02 56 |  if_ne	mov	arg01, local03
19ebc     10 15 02 56 |  if_ne	mov	arg02, local02
19ec0     0F 17 02 56 |  if_ne	mov	arg03, local01
19ec4     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
19ec8                 | LR__2290
19ec8     A7 F0 03 F6 | 	mov	ptra, fp
19ecc     B2 00 A0 FD | 	call	#popregs_
19ed0                 | __system___basic_print_string_ret
19ed0     2D 00 64 FD | 	ret
19ed4                 | 
19ed4                 | __system___basic_print_integer
19ed4     04 4A 05 F6 | 	mov	COUNT_, #4
19ed8     A8 00 A0 FD | 	call	#pushregs_
19edc     0A 1F 02 F6 | 	mov	local01, arg02
19ee0     0B 21 02 F6 | 	mov	local02, arg03
19ee4     0C 23 02 F6 | 	mov	local03, arg04
19ee8     2C 4B B0 FD | 	call	#__system___gettxfunc
19eec     FD 24 0A F6 | 	mov	local04, result1 wz
19ef0     00 FA 05 A6 |  if_e	mov	result1, #0
19ef4     12 13 02 56 |  if_ne	mov	arg01, local04
19ef8     10 15 02 56 |  if_ne	mov	arg02, local02
19efc     0F 17 02 56 |  if_ne	mov	arg03, local01
19f00     11 19 02 56 |  if_ne	mov	arg04, local03
19f04     48 02 B0 5D |  if_ne	call	#__system___fmtnum
19f08     A7 F0 03 F6 | 	mov	ptra, fp
19f0c     B2 00 A0 FD | 	call	#popregs_
19f10                 | __system___basic_print_integer_ret
19f10     2D 00 64 FD | 	ret
19f14                 | 
19f14                 | __system___basic_print_unsigned
19f14     03 4A 05 F6 | 	mov	COUNT_, #3
19f18     A8 00 A0 FD | 	call	#pushregs_
19f1c     0A 1F 02 F6 | 	mov	local01, arg02
19f20     0B 21 02 F6 | 	mov	local02, arg03
19f24     0C 23 02 F6 | 	mov	local03, arg04
19f28     EC 4A B0 FD | 	call	#__system___gettxfunc
19f2c     FD 12 0A F6 | 	mov	arg01, result1 wz
19f30     00 FA 05 A6 |  if_e	mov	result1, #0
19f34     3A 20 26 54 |  if_ne	bith	local02, #58
19f38     10 15 02 56 |  if_ne	mov	arg02, local02
19f3c     0F 17 02 56 |  if_ne	mov	arg03, local01
19f40     11 19 02 56 |  if_ne	mov	arg04, local03
19f44     08 02 B0 5D |  if_ne	call	#__system___fmtnum
19f48     A7 F0 03 F6 | 	mov	ptra, fp
19f4c     B2 00 A0 FD | 	call	#popregs_
19f50                 | __system___basic_print_unsigned_ret
19f50     2D 00 64 FD | 	ret
19f54                 | 
19f54                 | __system___basic_get_char
19f54     03 4A 05 F6 | 	mov	COUNT_, #3
19f58     A8 00 A0 FD | 	call	#pushregs_
19f5c     FC 4A B0 FD | 	call	#__system___getrxfunc
19f60     FD 1E 0A F6 | 	mov	local01, result1 wz
19f64     01 FA 65 A6 |  if_e	neg	result1, #1
19f68     28 00 90 AD |  if_e	jmp	#LR__2300
19f6c     0F 21 02 F6 | 	mov	local02, local01
19f70     13 1E 46 F7 | 	zerox	local01, #19
19f74     14 20 46 F0 | 	shr	local02, #20
19f78     02 20 66 F0 | 	shl	local02, #2
19f7c     ED 20 02 F1 | 	add	local02, __methods__
19f80     10 21 02 FB | 	rdlong	local02, local02
19f84     F2 22 02 F6 | 	mov	local03, objptr
19f88     0F E5 01 F6 | 	mov	objptr, local01
19f8c     2D 20 62 FD | 	call	local02
19f90     11 E5 01 F6 | 	mov	objptr, local03
19f94                 | LR__2300
19f94     A7 F0 03 F6 | 	mov	ptra, fp
19f98     B2 00 A0 FD | 	call	#popregs_
19f9c                 | __system___basic_get_char_ret
19f9c     2D 00 64 FD | 	ret
19fa0                 | 
19fa0                 | __system___basic_get
19fa0     04 4A 05 F6 | 	mov	COUNT_, #4
19fa4     A8 00 A0 FD | 	call	#pushregs_
19fa8     0D 1F 02 F6 | 	mov	local01, arg05
19fac     0F 19 02 FD | 	qmul	arg04, local01
19fb0     09 21 02 F6 | 	mov	local02, arg01
19fb4     0B 23 02 F6 | 	mov	local03, arg03
19fb8     00 14 0E F2 | 	cmp	arg02, #0 wz
19fbc     01 14 86 51 |  if_ne	sub	arg02, #1
19fc0     10 13 02 56 |  if_ne	mov	arg01, local02
19fc4     00 16 06 56 |  if_ne	mov	arg03, #0
19fc8     18 24 62 FD | 	getqx	local04
19fcc     3C 41 B0 5D |  if_ne	call	#__system__lseek
19fd0     11 15 02 F6 | 	mov	arg02, local03
19fd4     12 17 02 F6 | 	mov	arg03, local04
19fd8     10 13 02 F6 | 	mov	arg01, local02
19fdc     B4 40 B0 FD | 	call	#__system__read
19fe0     FD 24 02 F6 | 	mov	local04, result1
19fe4     01 24 56 F2 | 	cmps	local04, #1 wc
19fe8     10 00 90 CD |  if_b	jmp	#LR__2310
19fec     12 63 02 F6 | 	mov	muldiva_, local04
19ff0     0F 65 02 F6 | 	mov	muldivb_, local01
19ff4     BA 00 A0 FD | 	call	#divide_
19ff8     32 25 02 F6 | 	mov	local04, muldivb_
19ffc                 | LR__2310
19ffc     12 FB 01 F6 | 	mov	result1, local04
1a000     A7 F0 03 F6 | 	mov	ptra, fp
1a004     B2 00 A0 FD | 	call	#popregs_
1a008                 | __system___basic_get_ret
1a008     2D 00 64 FD | 	ret
1a00c                 | 
1a00c                 | __system___fmtchar
1a00c     00 4A 05 F6 | 	mov	COUNT_, #0
1a010     A8 00 A0 FD | 	call	#pushregs_
1a014     10 F0 07 F1 | 	add	ptra, #16
1a018     04 4E 05 F1 | 	add	fp, #4
1a01c     A7 12 62 FC | 	wrlong	arg01, fp
1a020     04 4E 05 F1 | 	add	fp, #4
1a024     A7 14 62 FC | 	wrlong	arg02, fp
1a028     04 4E 05 F1 | 	add	fp, #4
1a02c     A7 16 62 FC | 	wrlong	arg03, fp
1a030     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1a034     A7 16 62 FC | 	wrlong	arg03, fp
1a038     08 4E 85 F1 | 	sub	fp, #8
1a03c     A7 12 02 FB | 	rdlong	arg01, fp
1a040     04 4E 05 F1 | 	add	fp, #4
1a044     A7 14 02 FB | 	rdlong	arg02, fp
1a048     04 4E 05 F1 | 	add	fp, #4
1a04c     A7 16 02 F6 | 	mov	arg03, fp
1a050     0C 4E 85 F1 | 	sub	fp, #12
1a054     0C 00 B0 FD | 	call	#__system___fmtstr
1a058     A7 F0 03 F6 | 	mov	ptra, fp
1a05c     B2 00 A0 FD | 	call	#popregs_
1a060                 | __system___fmtchar_ret
1a060     2D 00 64 FD | 	ret
1a064                 | 
1a064                 | __system___fmtstr
1a064     09 4A 05 F6 | 	mov	COUNT_, #9
1a068     A8 00 A0 FD | 	call	#pushregs_
1a06c     09 1F 02 F6 | 	mov	local01, arg01
1a070     0A 21 02 F6 | 	mov	local02, arg02
1a074     0B 23 02 F6 | 	mov	local03, arg03
1a078     10 19 E2 F8 | 	getbyte	arg04, local02, #0
1a07c     11 13 02 F6 | 	mov	arg01, local03
1a080     09 25 02 F6 | 	mov	local04, arg01
1a084     97 06 48 FB | 	callpa	#(@LR__2321-@LR__2320)>>2,fcache_load_ptr_
1a088                 | LR__2320
1a088     12 FB C9 FA | 	rdbyte	result1, local04 wz
1a08c     01 24 06 51 |  if_ne	add	local04, #1
1a090     F4 FF 9F 5D |  if_ne	jmp	#LR__2320
1a094                 | LR__2321
1a094     09 25 82 F1 | 	sub	local04, arg01
1a098     00 18 0E F2 | 	cmp	arg04, #0 wz
1a09c     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1a0a0     10 15 02 F6 | 	mov	arg02, local02
1a0a4     12 17 02 F6 | 	mov	arg03, local04
1a0a8     0F 13 02 F6 | 	mov	arg01, local01
1a0ac     02 18 06 F6 | 	mov	arg04, #2
1a0b0     04 46 B0 FD | 	call	#__system___fmtpad
1a0b4     FD 26 02 F6 | 	mov	local05, result1
1a0b8     00 26 56 F2 | 	cmps	local05, #0 wc
1a0bc     13 FB 01 C6 |  if_b	mov	result1, local05
1a0c0     80 00 90 CD |  if_b	jmp	#LR__2324
1a0c4     01 24 56 F2 | 	cmps	local04, #1 wc
1a0c8     50 00 90 CD |  if_b	jmp	#LR__2323
1a0cc     12 29 02 F6 | 	mov	local06, local04
1a0d0                 | LR__2322
1a0d0     0F 2B 02 F6 | 	mov	local07, local01
1a0d4     0F 2D 02 F6 | 	mov	local08, local01
1a0d8     13 2A 46 F7 | 	zerox	local07, #19
1a0dc     14 2C 46 F0 | 	shr	local08, #20
1a0e0     02 2C 66 F0 | 	shl	local08, #2
1a0e4     ED 2C 02 F1 | 	add	local08, __methods__
1a0e8     16 2D 02 FB | 	rdlong	local08, local08
1a0ec     11 13 C2 FA | 	rdbyte	arg01, local03
1a0f0     F2 2E 02 F6 | 	mov	local09, objptr
1a0f4     15 E5 01 F6 | 	mov	objptr, local07
1a0f8     01 22 06 F1 | 	add	local03, #1
1a0fc     2D 2C 62 FD | 	call	local08
1a100     17 E5 01 F6 | 	mov	objptr, local09
1a104     FD 2E 02 F6 | 	mov	local09, result1
1a108     00 2E 56 F2 | 	cmps	local09, #0 wc
1a10c     17 FB 01 C6 |  if_b	mov	result1, local09
1a110     30 00 90 CD |  if_b	jmp	#LR__2324
1a114     17 27 02 F1 | 	add	local05, local09
1a118     ED 29 6E FB | 	djnz	local06, #LR__2322
1a11c                 | LR__2323
1a11c     10 15 02 F6 | 	mov	arg02, local02
1a120     12 17 02 F6 | 	mov	arg03, local04
1a124     0F 13 02 F6 | 	mov	arg01, local01
1a128     01 18 06 F6 | 	mov	arg04, #1
1a12c     88 45 B0 FD | 	call	#__system___fmtpad
1a130     FD 2E 02 F6 | 	mov	local09, result1
1a134     00 2E 56 F2 | 	cmps	local09, #0 wc
1a138     17 FB 01 C6 |  if_b	mov	result1, local09
1a13c     17 27 02 31 |  if_ae	add	local05, local09
1a140     13 FB 01 36 |  if_ae	mov	result1, local05
1a144                 | LR__2324
1a144     A7 F0 03 F6 | 	mov	ptra, fp
1a148     B2 00 A0 FD | 	call	#popregs_
1a14c                 | __system___fmtstr_ret
1a14c     2D 00 64 FD | 	ret
1a150                 | 
1a150                 | __system___fmtnum
1a150     0B 4A 05 F6 | 	mov	COUNT_, #11
1a154     A8 00 A0 FD | 	call	#pushregs_
1a158     09 1F 02 F6 | 	mov	local01, arg01
1a15c     0A 21 02 F6 | 	mov	local02, arg02
1a160     0B 23 02 F6 | 	mov	local03, arg03
1a164     0C 25 02 F6 | 	mov	local04, arg04
1a168     F8 27 02 F6 | 	mov	local05, ptra
1a16c     13 29 02 F6 | 	mov	local06, local05
1a170     00 2A 06 F6 | 	mov	local07, #0
1a174     10 2D 02 F6 | 	mov	local08, local02
1a178     10 2C 46 F0 | 	shr	local08, #16
1a17c     3F 2C 06 F5 | 	and	local08, #63
1a180     10 2F E2 F8 | 	getbyte	local09, local02, #0
1a184     10 31 02 F6 | 	mov	local10, local02
1a188     1A 30 46 F0 | 	shr	local10, #26
1a18c     03 30 06 F5 | 	and	local10, #3
1a190     18 33 02 F6 | 	mov	local11, local10
1a194     01 2C 56 F2 | 	cmps	local08, #1 wc
1a198     44 F0 07 F1 | 	add	ptra, #68
1a19c     01 2C 86 31 |  if_ae	sub	local08, #1
1a1a0     41 2E 56 F2 | 	cmps	local09, #65 wc
1a1a4     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
1a1a8     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
1a1ac     03 32 0E F2 | 	cmp	local11, #3 wz
1a1b0     00 32 06 A6 |  if_e	mov	local11, #0
1a1b4     00 22 56 52 |  if_ne	cmps	local03, #0 wc
1a1b8     04 32 06 46 |  if_c_and_nz	mov	local11, #4
1a1bc     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1a1c0     00 32 0E F2 | 	cmp	local11, #0 wz
1a1c4     4C 00 90 AD |  if_e	jmp	#LR__2333
1a1c8     01 2A 06 F6 | 	mov	local07, #1
1a1cc     17 2D 0A F2 | 	cmp	local08, local09 wz
1a1d0     18 00 90 5D |  if_ne	jmp	#LR__2331
1a1d4     05 2C 6E FB | 	djnz	local08, #LR__2330
1a1d8     0F 13 02 F6 | 	mov	arg01, local01
1a1dc     10 15 02 F6 | 	mov	arg02, local02
1a1e0     23 16 06 F6 | 	mov	arg03, #35
1a1e4     24 FE BF FD | 	call	#__system___fmtchar
1a1e8     88 00 90 FD | 	jmp	#LR__2337
1a1ec                 | LR__2330
1a1ec                 | LR__2331
1a1ec     02 32 0E F2 | 	cmp	local11, #2 wz
1a1f0     14 31 02 A6 |  if_e	mov	local10, local06
1a1f4     01 28 06 A1 |  if_e	add	local06, #1
1a1f8     18 41 48 AC |  if_e	wrbyte	#32, local10
1a1fc     14 00 90 AD |  if_e	jmp	#LR__2332
1a200     04 32 0E F2 | 	cmp	local11, #4 wz
1a204     14 5B 48 AC |  if_e	wrbyte	#45, local06
1a208     01 28 06 A1 |  if_e	add	local06, #1
1a20c     14 57 48 5C |  if_ne	wrbyte	#43, local06
1a210     01 28 06 51 |  if_ne	add	local06, #1
1a214                 | LR__2332
1a214                 | LR__2333
1a214     14 13 02 F6 | 	mov	arg01, local06
1a218     11 15 02 F6 | 	mov	arg02, local03
1a21c     12 17 02 F6 | 	mov	arg03, local04
1a220     16 19 02 F6 | 	mov	arg04, local08
1a224     00 1A 06 F6 | 	mov	arg05, #0
1a228     1D 20 2E F4 | 	testbn	local02, #29 wz
1a22c     01 1A 06 56 |  if_ne	mov	arg05, #1
1a230     4C 45 B0 FD | 	call	#__system___uitoa
1a234     FD 2A 02 F1 | 	add	local07, result1
1a238     17 2B 5A F2 | 	cmps	local07, local09 wcz
1a23c     24 00 90 ED |  if_be	jmp	#LR__2336
1a240     97 0E 48 FB | 	callpa	#(@LR__2335-@LR__2334)>>2,fcache_load_ptr_
1a244                 | LR__2334
1a244     17 31 02 F6 | 	mov	local10, local09
1a248     01 30 56 F2 | 	cmps	local10, #1 wc
1a24c     01 2E 86 F1 | 	sub	local09, #1
1a250     14 31 02 36 |  if_ae	mov	local10, local06
1a254     01 28 06 31 |  if_ae	add	local06, #1
1a258     18 47 48 3C |  if_ae	wrbyte	#35, local10
1a25c     E4 FF 9F 3D |  if_ae	jmp	#LR__2334
1a260                 | LR__2335
1a260     14 01 48 FC | 	wrbyte	#0, local06
1a264                 | LR__2336
1a264     0F 13 02 F6 | 	mov	arg01, local01
1a268     10 15 02 F6 | 	mov	arg02, local02
1a26c     13 17 02 F6 | 	mov	arg03, local05
1a270     F0 FD BF FD | 	call	#__system___fmtstr
1a274                 | LR__2337
1a274     A7 F0 03 F6 | 	mov	ptra, fp
1a278     B2 00 A0 FD | 	call	#popregs_
1a27c                 | __system___fmtnum_ret
1a27c     2D 00 64 FD | 	ret
1a280                 | 
1a280                 | __system___fmtfloat
1a280     10 4A 05 F6 | 	mov	COUNT_, #16
1a284     A8 00 A0 FD | 	call	#pushregs_
1a288     24 F1 07 F1 | 	add	ptra, #292
1a28c     04 4E 05 F1 | 	add	fp, #4
1a290     A7 12 62 FC | 	wrlong	arg01, fp
1a294     04 4E 05 F1 | 	add	fp, #4
1a298     A7 14 62 FC | 	wrlong	arg02, fp
1a29c     04 4E 05 F1 | 	add	fp, #4
1a2a0     A7 16 62 FC | 	wrlong	arg03, fp
1a2a4     04 4E 05 F1 | 	add	fp, #4
1a2a8     A7 18 62 FC | 	wrlong	arg04, fp
1a2ac     0C 4E 05 F1 | 	add	fp, #12
1a2b0     A7 14 68 FC | 	wrlong	#10, fp
1a2b4     08 4E 05 F1 | 	add	fp, #8
1a2b8     A7 00 68 FC | 	wrlong	#0, fp
1a2bc     08 4E 05 F1 | 	add	fp, #8
1a2c0     A7 00 68 FC | 	wrlong	#0, fp
1a2c4     08 4E 05 F1 | 	add	fp, #8
1a2c8     A7 00 68 FC | 	wrlong	#0, fp
1a2cc     04 4E 05 F1 | 	add	fp, #4
1a2d0     A7 04 68 FC | 	wrlong	#2, fp
1a2d4     04 4E 05 F1 | 	add	fp, #4
1a2d8     A7 00 68 FC | 	wrlong	#0, fp
1a2dc     04 4E 05 F1 | 	add	fp, #4
1a2e0     A7 00 68 FC | 	wrlong	#0, fp
1a2e4     04 4E 05 F1 | 	add	fp, #4
1a2e8     A7 00 68 FC | 	wrlong	#0, fp
1a2ec     04 4E 05 F1 | 	add	fp, #4
1a2f0     A7 00 68 FC | 	wrlong	#0, fp
1a2f4     18 4E 05 F1 | 	add	fp, #24
1a2f8     A7 00 68 FC | 	wrlong	#0, fp
1a2fc     68 4E 05 F1 | 	add	fp, #104
1a300     A7 1E 02 F6 | 	mov	local01, fp
1a304     08 4E 85 F1 | 	sub	fp, #8
1a308     A7 1E 62 FC | 	wrlong	local01, fp
1a30c     04 4E 05 F1 | 	add	fp, #4
1a310     A7 1E 62 FC | 	wrlong	local01, fp
1a314     BC 4E 85 F1 | 	sub	fp, #188
1a318     A7 1E 02 FB | 	rdlong	local01, fp
1a31c     10 1E 46 F0 | 	shr	local01, #16
1a320     3F 1E 06 F5 | 	and	local01, #63
1a324     B0 4E 05 F1 | 	add	fp, #176
1a328     A7 1E 62 FC | 	wrlong	local01, fp
1a32c     B0 4E 85 F1 | 	sub	fp, #176
1a330     A7 1E 02 FB | 	rdlong	local01, fp
1a334     1C 1E 46 F0 | 	shr	local01, #28
1a338     01 1E 06 F5 | 	and	local01, #1
1a33c     08 4F 05 F1 | 	add	fp, #264
1a340     A7 1E 62 FC | 	wrlong	local01, fp
1a344     58 4E 85 F1 | 	sub	fp, #88
1a348     A7 1E 0A FB | 	rdlong	local01, fp wz
1a34c     B8 4E 85 F1 | 	sub	fp, #184
1a350     3C 00 90 5D |  if_ne	jmp	#LR__2341
1a354     10 4E 05 F1 | 	add	fp, #16
1a358     A7 1E 02 FB | 	rdlong	local01, fp
1a35c     10 4E 85 F1 | 	sub	fp, #16
1a360     61 1E 0E F2 | 	cmp	local01, #97 wz
1a364     18 00 90 5D |  if_ne	jmp	#LR__2340
1a368     B8 4E 05 F1 | 	add	fp, #184
1a36c     A7 1A 68 FC | 	wrlong	#13, fp
1a370     84 4E 85 F1 | 	sub	fp, #132
1a374     A7 02 68 FC | 	wrlong	#1, fp
1a378     34 4E 85 F1 | 	sub	fp, #52
1a37c     24 00 90 FD | 	jmp	#LR__2342
1a380                 | LR__2340
1a380     B8 4E 05 F1 | 	add	fp, #184
1a384     A7 0C 68 FC | 	wrlong	#6, fp
1a388     B8 4E 85 F1 | 	sub	fp, #184
1a38c     14 00 90 FD | 	jmp	#LR__2342
1a390                 | LR__2341
1a390     B8 4E 05 F1 | 	add	fp, #184
1a394     A7 1E 02 FB | 	rdlong	local01, fp
1a398     01 1E 86 F1 | 	sub	local01, #1
1a39c     A7 1E 62 FC | 	wrlong	local01, fp
1a3a0     B8 4E 85 F1 | 	sub	fp, #184
1a3a4                 | LR__2342
1a3a4     08 4E 05 F1 | 	add	fp, #8
1a3a8     A7 1E 02 FB | 	rdlong	local01, fp
1a3ac     16 1E 46 F0 | 	shr	local01, #22
1a3b0     03 1E 06 F5 | 	and	local01, #3
1a3b4     04 4F 05 F1 | 	add	fp, #260
1a3b8     A7 1E 62 FC | 	wrlong	local01, fp
1a3bc     04 4F 85 F1 | 	sub	fp, #260
1a3c0     A7 1E 02 FB | 	rdlong	local01, fp
1a3c4     1D 1E 46 F0 | 	shr	local01, #29
1a3c8     01 1E 06 F5 | 	and	local01, #1
1a3cc     B4 4E 05 F1 | 	add	fp, #180
1a3d0     A7 1E 62 FC | 	wrlong	local01, fp
1a3d4     B4 4E 85 F1 | 	sub	fp, #180
1a3d8     A7 1E 02 FB | 	rdlong	local01, fp
1a3dc     0F 1F EA F8 | 	getbyte	local01, local01, #1
1a3e0     60 4E 05 F1 | 	add	fp, #96
1a3e4     A7 1E 62 FC | 	wrlong	local01, fp
1a3e8     60 4E 85 F1 | 	sub	fp, #96
1a3ec     A7 1E 02 FB | 	rdlong	local01, fp
1a3f0     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1a3f4     64 4E 05 F1 | 	add	fp, #100
1a3f8     A7 1E 62 FC | 	wrlong	local01, fp
1a3fc     00 1E 06 F6 | 	mov	local01, #0
1a400     5C 4E 85 F1 | 	sub	fp, #92
1a404     A7 1A 02 FB | 	rdlong	arg05, fp
1a408     65 1A 0E F2 | 	cmp	arg05, #101 wz
1a40c     01 1E 06 A6 |  if_e	mov	local01, #1
1a410     14 4E 05 F1 | 	add	fp, #20
1a414     A7 1E 62 FC | 	wrlong	local01, fp
1a418     98 4E 05 F1 | 	add	fp, #152
1a41c     A7 20 0A FB | 	rdlong	local02, fp wz
1a420     45 1E 06 56 |  if_ne	mov	local01, #69
1a424     65 1E 06 A6 |  if_e	mov	local01, #101
1a428     8C 4E 85 F1 | 	sub	fp, #140
1a42c     A7 1E 62 FC | 	wrlong	local01, fp
1a430     20 4E 85 F1 | 	sub	fp, #32
1a434     A7 1E 02 FB | 	rdlong	local01, fp
1a438     10 4E 85 F1 | 	sub	fp, #16
1a43c     61 1E 0E F2 | 	cmp	local01, #97 wz
1a440     4C 00 90 5D |  if_ne	jmp	#LR__2343
1a444     24 4E 05 F1 | 	add	fp, #36
1a448     A7 02 68 FC | 	wrlong	#1, fp
1a44c     98 4E 05 F1 | 	add	fp, #152
1a450     A7 20 0A FB | 	rdlong	local02, fp wz
1a454     50 1E 06 56 |  if_ne	mov	local01, #80
1a458     70 1E 06 A6 |  if_e	mov	local01, #112
1a45c     8C 4E 85 F1 | 	sub	fp, #140
1a460     A7 1E 62 FC | 	wrlong	local01, fp
1a464     14 4E 85 F1 | 	sub	fp, #20
1a468     A7 04 68 FC | 	wrlong	#2, fp
1a46c     1C 4E 05 F1 | 	add	fp, #28
1a470     A7 02 68 FC | 	wrlong	#1, fp
1a474     84 4E 05 F1 | 	add	fp, #132
1a478     A7 20 0A FB | 	rdlong	local02, fp wz
1a47c     58 1E 06 56 |  if_ne	mov	local01, #88
1a480     78 1E 06 A6 |  if_e	mov	local01, #120
1a484     7C 4E 85 F1 | 	sub	fp, #124
1a488     A7 1E 62 FC | 	wrlong	local01, fp
1a48c     40 4E 85 F1 | 	sub	fp, #64
1a490                 | LR__2343
1a490     10 4E 05 F1 | 	add	fp, #16
1a494     A7 1E 02 FB | 	rdlong	local01, fp
1a498     10 4E 85 F1 | 	sub	fp, #16
1a49c     23 1E 0E F2 | 	cmp	local01, #35 wz
1a4a0     3C 00 90 5D |  if_ne	jmp	#LR__2346
1a4a4     48 4E 05 F1 | 	add	fp, #72
1a4a8     A7 02 68 FC | 	wrlong	#1, fp
1a4ac     C8 4E 05 F1 | 	add	fp, #200
1a4b0     A7 1E 0A FB | 	rdlong	local01, fp wz
1a4b4     10 4F 85 F1 | 	sub	fp, #272
1a4b8     18 00 90 AD |  if_e	jmp	#LR__2344
1a4bc     10 4E 05 F1 | 	add	fp, #16
1a4c0     A7 CC 68 FC | 	wrlong	#102, fp
1a4c4     00 4F 05 F1 | 	add	fp, #256
1a4c8     A7 00 68 FC | 	wrlong	#0, fp
1a4cc     10 4F 85 F1 | 	sub	fp, #272
1a4d0     0C 00 90 FD | 	jmp	#LR__2345
1a4d4                 | LR__2344
1a4d4     10 4F 05 F1 | 	add	fp, #272
1a4d8     A7 02 68 FC | 	wrlong	#1, fp
1a4dc     10 4F 85 F1 | 	sub	fp, #272
1a4e0                 | LR__2345
1a4e0                 | LR__2346
1a4e0     08 4E 05 F1 | 	add	fp, #8
1a4e4     A7 1E 02 FB | 	rdlong	local01, fp
1a4e8     1A 1E 46 F0 | 	shr	local01, #26
1a4ec     03 1E 06 F5 | 	and	local01, #3
1a4f0     5C 4E 05 F1 | 	add	fp, #92
1a4f4     A7 1E 62 FC | 	wrlong	local01, fp
1a4f8     58 4E 85 F1 | 	sub	fp, #88
1a4fc     A7 FA 01 FB | 	rdlong	result1, fp
1a500     0C 4E 85 F1 | 	sub	fp, #12
1a504     1F FA 4D F0 | 	shr	result1, #31 wz
1a508     20 00 90 AD |  if_e	jmp	#LR__2347
1a50c     2C 4E 05 F1 | 	add	fp, #44
1a510     A7 5A 68 FC | 	wrlong	#45, fp
1a514     20 4E 85 F1 | 	sub	fp, #32
1a518     A7 FA 01 FB | 	rdlong	result1, fp
1a51c     1F FA E5 F4 | 	bitnot	result1, #31
1a520     A7 FA 61 FC | 	wrlong	result1, fp
1a524     0C 4E 85 F1 | 	sub	fp, #12
1a528     3C 00 90 FD | 	jmp	#LR__2349
1a52c                 | LR__2347
1a52c     64 4E 05 F1 | 	add	fp, #100
1a530     A7 1E 02 FB | 	rdlong	local01, fp
1a534     64 4E 85 F1 | 	sub	fp, #100
1a538     01 1E 0E F2 | 	cmp	local01, #1 wz
1a53c     2C 4E 05 A1 |  if_e	add	fp, #44
1a540     A7 56 68 AC |  if_e	wrlong	#43, fp
1a544     2C 4E 85 A1 |  if_e	sub	fp, #44
1a548     1C 00 90 AD |  if_e	jmp	#LR__2348
1a54c     64 4E 05 F1 | 	add	fp, #100
1a550     A7 1E 02 FB | 	rdlong	local01, fp
1a554     64 4E 85 F1 | 	sub	fp, #100
1a558     02 1E 0E F2 | 	cmp	local01, #2 wz
1a55c     2C 4E 05 A1 |  if_e	add	fp, #44
1a560     A7 40 68 AC |  if_e	wrlong	#32, fp
1a564     2C 4E 85 A1 |  if_e	sub	fp, #44
1a568                 | LR__2348
1a568                 | LR__2349
1a568     08 4E 05 F1 | 	add	fp, #8
1a56c     A7 1E 02 FB | 	rdlong	local01, fp
1a570     18 1E 46 F0 | 	shr	local01, #24
1a574     03 1E 06 F5 | 	and	local01, #3
1a578     3C 4E 05 F1 | 	add	fp, #60
1a57c     A7 1E 62 FC | 	wrlong	local01, fp
1a580     00 1E 06 F6 | 	mov	local01, #0
1a584     18 4E 85 F1 | 	sub	fp, #24
1a588     A7 22 0A FB | 	rdlong	local03, fp wz
1a58c     2C 4E 85 F1 | 	sub	fp, #44
1a590     18 00 90 5D |  if_ne	jmp	#LR__2350
1a594     1C 4E 05 F1 | 	add	fp, #28
1a598     A7 24 02 FB | 	rdlong	local04, fp
1a59c     1C 4E 85 F1 | 	sub	fp, #28
1a5a0     12 27 02 F6 | 	mov	local05, local04
1a5a4     0A 26 0E F2 | 	cmp	local05, #10 wz
1a5a8     04 00 90 AD |  if_e	jmp	#LR__2351
1a5ac                 | LR__2350
1a5ac     01 1E 66 F5 | 	xor	local01, #1
1a5b0                 | LR__2351
1a5b0     3C 4E 05 F1 | 	add	fp, #60
1a5b4     A7 1E 62 FC | 	wrlong	local01, fp
1a5b8     3C 4E 85 F1 | 	sub	fp, #60
1a5bc     00 1E 0E F2 | 	cmp	local01, #0 wz
1a5c0     0C 01 90 AD |  if_e	jmp	#LR__2353
1a5c4     44 4E 05 F1 | 	add	fp, #68
1a5c8     A7 26 02 FB | 	rdlong	local05, fp
1a5cc     44 4E 85 F1 | 	sub	fp, #68
1a5d0     13 23 02 F6 | 	mov	local03, local05
1a5d4     02 22 0E F2 | 	cmp	local03, #2 wz
1a5d8     F4 00 90 5D |  if_ne	jmp	#LR__2353
1a5dc     0C 4F 05 F1 | 	add	fp, #268
1a5e0     A7 28 02 FB | 	rdlong	local06, fp
1a5e4     0C 4F 85 F1 | 	sub	fp, #268
1a5e8     14 25 02 F6 | 	mov	local04, local06
1a5ec     02 24 0E F2 | 	cmp	local04, #2 wz
1a5f0     DC 00 90 AD |  if_e	jmp	#LR__2353
1a5f4     C0 4E 05 F1 | 	add	fp, #192
1a5f8     A7 12 02 FB | 	rdlong	arg01, fp
1a5fc     94 4E 85 F1 | 	sub	fp, #148
1a600     A7 14 02 FB | 	rdlong	arg02, fp
1a604     14 4E 05 F1 | 	add	fp, #20
1a608     A7 16 02 FB | 	rdlong	arg03, fp
1a60c     40 4E 85 F1 | 	sub	fp, #64
1a610     D4 43 B0 FD | 	call	#__system__emitsign_0385
1a614     14 4F 05 F1 | 	add	fp, #276
1a618     A7 FA 61 FC | 	wrlong	result1, fp
1a61c     14 4F 85 F1 | 	sub	fp, #276
1a620     00 FA 55 F2 | 	cmps	result1, #0 wc
1a624     14 4F 05 C1 |  if_b	add	fp, #276
1a628     A7 FA 01 CB |  if_b	rdlong	result1, fp
1a62c     14 4F 85 C1 |  if_b	sub	fp, #276
1a630     6C 0B 90 CD |  if_b	jmp	#LR__2403
1a634     C0 4E 05 F1 | 	add	fp, #192
1a638     A7 1E 02 FB | 	rdlong	local01, fp
1a63c     54 4E 05 F1 | 	add	fp, #84
1a640     A7 26 02 FB | 	rdlong	local05, fp
1a644     13 23 02 F6 | 	mov	local03, local05
1a648     13 1F 02 F1 | 	add	local01, local05
1a64c     54 4E 85 F1 | 	sub	fp, #84
1a650     A7 1E 62 FC | 	wrlong	local01, fp
1a654     58 4E 85 F1 | 	sub	fp, #88
1a658     A7 1E 0A FB | 	rdlong	local01, fp wz
1a65c     68 4E 85 F1 | 	sub	fp, #104
1a660     60 00 90 AD |  if_e	jmp	#LR__2352
1a664     68 4E 05 F1 | 	add	fp, #104
1a668     A7 1E 02 FB | 	rdlong	local01, fp
1a66c     AC 4E 05 F1 | 	add	fp, #172
1a670     A7 22 02 FB | 	rdlong	local03, fp
1a674     11 1F 82 F1 | 	sub	local01, local03
1a678     AC 4E 85 F1 | 	sub	fp, #172
1a67c     A7 1E 62 FC | 	wrlong	local01, fp
1a680     68 4E 85 F1 | 	sub	fp, #104
1a684     00 1E 56 F2 | 	cmps	local01, #0 wc
1a688     68 4E 05 C1 |  if_b	add	fp, #104
1a68c     A7 00 68 CC |  if_b	wrlong	#0, fp
1a690     68 4E 85 C1 |  if_b	sub	fp, #104
1a694     08 4E 05 F1 | 	add	fp, #8
1a698     A7 1E 02 FB | 	rdlong	local01, fp
1a69c     E8 1E 06 F4 | 	bitl	local01, #232
1a6a0     A7 1E 62 FC | 	wrlong	local01, fp
1a6a4     60 4E 05 F1 | 	add	fp, #96
1a6a8     A7 26 02 FB | 	rdlong	local05, fp
1a6ac     13 23 02 F6 | 	mov	local03, local05
1a6b0     08 22 66 F0 | 	shl	local03, #8
1a6b4     11 1F 42 F5 | 	or	local01, local03
1a6b8     60 4E 85 F1 | 	sub	fp, #96
1a6bc     A7 1E 62 FC | 	wrlong	local01, fp
1a6c0     08 4E 85 F1 | 	sub	fp, #8
1a6c4                 | LR__2352
1a6c4     3C 4E 05 F1 | 	add	fp, #60
1a6c8     A7 00 68 FC | 	wrlong	#0, fp
1a6cc     3C 4E 85 F1 | 	sub	fp, #60
1a6d0                 | LR__2353
1a6d0     0C 4E 05 F1 | 	add	fp, #12
1a6d4     A7 12 02 FB | 	rdlong	arg01, fp
1a6d8     0C 4E 85 F1 | 	sub	fp, #12
1a6dc     A8 1E B0 FD | 	call	#__system____builtin_ilogb
1a6e0     FF FF 3F FF 
1a6e4     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1a6e8     50 00 90 5D |  if_ne	jmp	#LR__2355
1a6ec     2C 4E 05 F1 | 	add	fp, #44
1a6f0     A7 1E 0A FB | 	rdlong	local01, fp wz
1a6f4     2C 4E 85 F1 | 	sub	fp, #44
1a6f8     24 00 90 AD |  if_e	jmp	#LR__2354
1a6fc     C0 4E 05 F1 | 	add	fp, #192
1a700     A7 20 02 FB | 	rdlong	local02, fp
1a704     10 23 02 F6 | 	mov	local03, local02
1a708     01 22 06 F1 | 	add	local03, #1
1a70c     A7 22 62 FC | 	wrlong	local03, fp
1a710     94 4E 85 F1 | 	sub	fp, #148
1a714     A7 24 02 FB | 	rdlong	local04, fp
1a718     2C 4E 85 F1 | 	sub	fp, #44
1a71c     10 25 42 FC | 	wrbyte	local04, local02
1a720                 | LR__2354
1a720     C0 4E 05 F1 | 	add	fp, #192
1a724     A7 12 02 FB | 	rdlong	arg01, fp
1a728     C0 4E 85 F1 | 	sub	fp, #192
1a72c     43 01 00 FF 
1a730     A6 14 06 F6 | 	mov	arg02, ##@LR__4281
1a734     18 EA BF FD | 	call	#__system____builtin_strcpy
1a738     A4 08 90 FD | 	jmp	#LR__2391
1a73c                 | LR__2355
1a73c     0C 4E 05 F1 | 	add	fp, #12
1a740     A7 20 02 FB | 	rdlong	local02, fp
1a744     0C 4E 85 F1 | 	sub	fp, #12
1a748     10 13 02 F6 | 	mov	arg01, local02
1a74c     38 1E B0 FD | 	call	#__system____builtin_ilogb
1a750     00 00 40 FF 
1a754     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
1a758     50 00 90 5D |  if_ne	jmp	#LR__2357
1a75c     2C 4E 05 F1 | 	add	fp, #44
1a760     A7 1E 0A FB | 	rdlong	local01, fp wz
1a764     2C 4E 85 F1 | 	sub	fp, #44
1a768     24 00 90 AD |  if_e	jmp	#LR__2356
1a76c     C0 4E 05 F1 | 	add	fp, #192
1a770     A7 20 02 FB | 	rdlong	local02, fp
1a774     10 23 02 F6 | 	mov	local03, local02
1a778     01 22 06 F1 | 	add	local03, #1
1a77c     A7 22 62 FC | 	wrlong	local03, fp
1a780     94 4E 85 F1 | 	sub	fp, #148
1a784     A7 24 02 FB | 	rdlong	local04, fp
1a788     2C 4E 85 F1 | 	sub	fp, #44
1a78c     10 25 42 FC | 	wrbyte	local04, local02
1a790                 | LR__2356
1a790     C0 4E 05 F1 | 	add	fp, #192
1a794     A7 12 02 FB | 	rdlong	arg01, fp
1a798     C0 4E 85 F1 | 	sub	fp, #192
1a79c     43 01 00 FF 
1a7a0     AA 14 06 F6 | 	mov	arg02, ##@LR__4282
1a7a4     A8 E9 BF FD | 	call	#__system____builtin_strcpy
1a7a8     34 08 90 FD | 	jmp	#LR__2391
1a7ac                 | LR__2357
1a7ac     10 4E 05 F1 | 	add	fp, #16
1a7b0     A7 1E 02 FB | 	rdlong	local01, fp
1a7b4     10 4E 85 F1 | 	sub	fp, #16
1a7b8     67 1E 0E F2 | 	cmp	local01, #103 wz
1a7bc     10 4E 05 51 |  if_ne	add	fp, #16
1a7c0     A7 22 02 5B |  if_ne	rdlong	local03, fp
1a7c4     10 4E 85 51 |  if_ne	sub	fp, #16
1a7c8     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
1a7cc     94 01 90 5D |  if_ne	jmp	#LR__2362
1a7d0     0C 4E 05 F1 | 	add	fp, #12
1a7d4     A7 12 02 FB | 	rdlong	arg01, fp
1a7d8     08 4E 05 F1 | 	add	fp, #8
1a7dc     A7 14 02 F6 | 	mov	arg02, fp
1a7e0     0C 4E 05 F1 | 	add	fp, #12
1a7e4     A7 16 02 F6 | 	mov	arg03, fp
1a7e8     98 4E 05 F1 | 	add	fp, #152
1a7ec     A7 18 02 FB | 	rdlong	arg04, fp
1a7f0     9C 4E 85 F1 | 	sub	fp, #156
1a7f4     A7 1A 02 FB | 	rdlong	arg05, fp
1a7f8     1C 4E 85 F1 | 	sub	fp, #28
1a7fc     F4 3F B0 FD | 	call	#__system__disassemble_0383
1a800     10 4E 05 F1 | 	add	fp, #16
1a804     A7 1E 02 FB | 	rdlong	local01, fp
1a808     10 4E 85 F1 | 	sub	fp, #16
1a80c     23 1E 0E F2 | 	cmp	local01, #35 wz
1a810     A0 00 90 5D |  if_ne	jmp	#LR__2359
1a814     20 4E 05 F1 | 	add	fp, #32
1a818     A7 1E 02 FB | 	rdlong	local01, fp
1a81c     98 4E 05 F1 | 	add	fp, #152
1a820     A7 22 02 FB | 	rdlong	local03, fp
1a824     B8 4E 85 F1 | 	sub	fp, #184
1a828     11 1F 5A F2 | 	cmps	local01, local03 wcz
1a82c     24 4E 05 11 |  if_a	add	fp, #36
1a830     A7 02 68 1C |  if_a	wrlong	#1, fp
1a834     24 4E 85 11 |  if_a	sub	fp, #36
1a838     A4 01 90 1D |  if_a	jmp	#LR__2365
1a83c     20 4E 05 F1 | 	add	fp, #32
1a840     A7 1E 02 FB | 	rdlong	local01, fp
1a844     20 4E 85 F1 | 	sub	fp, #32
1a848     00 1E 56 F2 | 	cmps	local01, #0 wc
1a84c     2C 00 90 3D |  if_ae	jmp	#LR__2358
1a850     B8 4E 05 F1 | 	add	fp, #184
1a854     A7 1E 02 FB | 	rdlong	local01, fp
1a858     0F 1F 62 F6 | 	neg	local01, local01
1a85c     98 4E 85 F1 | 	sub	fp, #152
1a860     A7 22 02 FB | 	rdlong	local03, fp
1a864     20 4E 85 F1 | 	sub	fp, #32
1a868     0F 23 5A F2 | 	cmps	local03, local01 wcz
1a86c     24 4E 05 E1 |  if_be	add	fp, #36
1a870     A7 02 68 EC |  if_be	wrlong	#1, fp
1a874     24 4E 85 E1 |  if_be	sub	fp, #36
1a878     64 01 90 FD | 	jmp	#LR__2365
1a87c                 | LR__2358
1a87c     20 4E 05 F1 | 	add	fp, #32
1a880     A7 1E 02 FB | 	rdlong	local01, fp
1a884     20 4E 85 F1 | 	sub	fp, #32
1a888     01 1E 56 F2 | 	cmps	local01, #1 wc
1a88c     50 01 90 CD |  if_b	jmp	#LR__2365
1a890     B8 4E 05 F1 | 	add	fp, #184
1a894     A7 1E 02 FB | 	rdlong	local01, fp
1a898     98 4E 85 F1 | 	sub	fp, #152
1a89c     A7 22 02 FB | 	rdlong	local03, fp
1a8a0     11 1F 82 F1 | 	sub	local01, local03
1a8a4     98 4E 05 F1 | 	add	fp, #152
1a8a8     A7 1E 62 FC | 	wrlong	local01, fp
1a8ac     B8 4E 85 F1 | 	sub	fp, #184
1a8b0     2C 01 90 FD | 	jmp	#LR__2365
1a8b4                 | LR__2359
1a8b4     00 1E 06 F6 | 	mov	local01, #0
1a8b8     08 4E 05 F1 | 	add	fp, #8
1a8bc     A7 20 02 FB | 	rdlong	local02, fp
1a8c0     1C 20 46 F0 | 	shr	local02, #28
1a8c4     01 20 0E F5 | 	and	local02, #1 wz
1a8c8     01 1E 06 A6 |  if_e	mov	local01, #1
1a8cc     2C 4E 05 F1 | 	add	fp, #44
1a8d0     A7 1E 62 FC | 	wrlong	local01, fp
1a8d4     14 4E 85 F1 | 	sub	fp, #20
1a8d8     A7 1E 02 FB | 	rdlong	local01, fp
1a8dc     98 4E 05 F1 | 	add	fp, #152
1a8e0     A7 22 02 FB | 	rdlong	local03, fp
1a8e4     B8 4E 85 F1 | 	sub	fp, #184
1a8e8     11 1F 52 F2 | 	cmps	local01, local03 wc
1a8ec     18 00 90 3D |  if_ae	jmp	#LR__2360
1a8f0     20 4E 05 F1 | 	add	fp, #32
1a8f4     A7 24 02 FB | 	rdlong	local04, fp
1a8f8     20 4E 85 F1 | 	sub	fp, #32
1a8fc     FF FF 7F FF 
1a900     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1a904     10 00 90 3D |  if_ae	jmp	#LR__2361
1a908                 | LR__2360
1a908     24 4E 05 F1 | 	add	fp, #36
1a90c     A7 02 68 FC | 	wrlong	#1, fp
1a910     24 4E 85 F1 | 	sub	fp, #36
1a914     C8 00 90 FD | 	jmp	#LR__2365
1a918                 | LR__2361
1a918     B8 4E 05 F1 | 	add	fp, #184
1a91c     A7 24 02 FB | 	rdlong	local04, fp
1a920     98 4E 85 F1 | 	sub	fp, #152
1a924     A7 22 02 FB | 	rdlong	local03, fp
1a928     11 25 82 F1 | 	sub	local04, local03
1a92c     98 4E 05 F1 | 	add	fp, #152
1a930     A7 24 62 FC | 	wrlong	local04, fp
1a934     AC 4E 85 F1 | 	sub	fp, #172
1a938     A7 12 02 FB | 	rdlong	arg01, fp
1a93c     08 4E 05 F1 | 	add	fp, #8
1a940     A7 14 02 F6 | 	mov	arg02, fp
1a944     0C 4E 05 F1 | 	add	fp, #12
1a948     A7 16 02 F6 | 	mov	arg03, fp
1a94c     12 19 62 F6 | 	neg	arg04, local04
1a950     04 4E 85 F1 | 	sub	fp, #4
1a954     A7 1A 02 FB | 	rdlong	arg05, fp
1a958     1C 4E 85 F1 | 	sub	fp, #28
1a95c     94 3E B0 FD | 	call	#__system__disassemble_0383
1a960     7C 00 90 FD | 	jmp	#LR__2365
1a964                 | LR__2362
1a964     24 4E 05 F1 | 	add	fp, #36
1a968     A7 1E 0A FB | 	rdlong	local01, fp wz
1a96c     24 4E 85 F1 | 	sub	fp, #36
1a970     34 00 90 AD |  if_e	jmp	#LR__2363
1a974     0C 4E 05 F1 | 	add	fp, #12
1a978     A7 12 02 FB | 	rdlong	arg01, fp
1a97c     08 4E 05 F1 | 	add	fp, #8
1a980     A7 14 02 F6 | 	mov	arg02, fp
1a984     0C 4E 05 F1 | 	add	fp, #12
1a988     A7 16 02 F6 | 	mov	arg03, fp
1a98c     98 4E 05 F1 | 	add	fp, #152
1a990     A7 18 02 FB | 	rdlong	arg04, fp
1a994     9C 4E 85 F1 | 	sub	fp, #156
1a998     A7 1A 02 FB | 	rdlong	arg05, fp
1a99c     1C 4E 85 F1 | 	sub	fp, #28
1a9a0     50 3E B0 FD | 	call	#__system__disassemble_0383
1a9a4     38 00 90 FD | 	jmp	#LR__2364
1a9a8                 | LR__2363
1a9a8     0C 4E 05 F1 | 	add	fp, #12
1a9ac     A7 12 02 FB | 	rdlong	arg01, fp
1a9b0     08 4E 05 F1 | 	add	fp, #8
1a9b4     A7 14 02 F6 | 	mov	arg02, fp
1a9b8     0C 4E 05 F1 | 	add	fp, #12
1a9bc     A7 16 02 F6 | 	mov	arg03, fp
1a9c0     98 4E 05 F1 | 	add	fp, #152
1a9c4     A7 24 02 FB | 	rdlong	local04, fp
1a9c8     01 24 06 F1 | 	add	local04, #1
1a9cc     12 19 62 F6 | 	neg	arg04, local04
1a9d0     9C 4E 85 F1 | 	sub	fp, #156
1a9d4     A7 1A 02 FB | 	rdlong	arg05, fp
1a9d8     1C 4E 85 F1 | 	sub	fp, #28
1a9dc     14 3E B0 FD | 	call	#__system__disassemble_0383
1a9e0                 | LR__2364
1a9e0                 | LR__2365
1a9e0     1C 4E 05 F1 | 	add	fp, #28
1a9e4     A7 1E 02 FB | 	rdlong	local01, fp
1a9e8     1C 4E 85 F1 | 	sub	fp, #28
1a9ec     02 1E 0E F2 | 	cmp	local01, #2 wz
1a9f0     4C 00 90 5D |  if_ne	jmp	#LR__2368
1a9f4     1C 4E 05 F1 | 	add	fp, #28
1a9f8     A7 20 68 FC | 	wrlong	#16, fp
1a9fc     1C 4E 85 F1 | 	sub	fp, #28
1aa00                 | LR__2366
1aa00     14 4E 05 F1 | 	add	fp, #20
1aa04     A7 1E 0A FB | 	rdlong	local01, fp wz
1aa08     14 4E 85 F1 | 	sub	fp, #20
1aa0c     30 00 90 AD |  if_e	jmp	#LR__2367
1aa10     14 4E 05 F1 | 	add	fp, #20
1aa14     A7 22 02 FB | 	rdlong	local03, fp
1aa18     14 4E 85 F1 | 	sub	fp, #20
1aa1c     00 80 00 FF 
1aa20     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1aa24     18 00 90 3D |  if_ae	jmp	#LR__2367
1aa28     14 4E 05 F1 | 	add	fp, #20
1aa2c     A7 1E 02 FB | 	rdlong	local01, fp
1aa30     01 1E 66 F0 | 	shl	local01, #1
1aa34     A7 1E 62 FC | 	wrlong	local01, fp
1aa38     14 4E 85 F1 | 	sub	fp, #20
1aa3c     C0 FF 9F FD | 	jmp	#LR__2366
1aa40                 | LR__2367
1aa40                 | LR__2368
1aa40     70 4E 05 F1 | 	add	fp, #112
1aa44     A7 12 02 F6 | 	mov	arg01, fp
1aa48     5C 4E 85 F1 | 	sub	fp, #92
1aa4c     A7 14 02 FB | 	rdlong	arg02, fp
1aa50     08 4E 05 F1 | 	add	fp, #8
1aa54     A7 16 02 FB | 	rdlong	arg03, fp
1aa58     A0 4E 05 F1 | 	add	fp, #160
1aa5c     A7 1A 02 FB | 	rdlong	arg05, fp
1aa60     BC 4E 85 F1 | 	sub	fp, #188
1aa64     01 18 06 F6 | 	mov	arg04, #1
1aa68     14 3D B0 FD | 	call	#__system___uitoa
1aa6c     58 4E 05 F1 | 	add	fp, #88
1aa70     A7 FA 61 FC | 	wrlong	result1, fp
1aa74     38 4E 85 F1 | 	sub	fp, #56
1aa78     A7 1E 02 FB | 	rdlong	local01, fp
1aa7c     20 4E 85 F1 | 	sub	fp, #32
1aa80     00 1E 56 F2 | 	cmps	local01, #0 wc
1aa84     50 00 90 3D |  if_ae	jmp	#LR__2369
1aa88     60 4E 05 F1 | 	add	fp, #96
1aa8c     A7 5A 68 FC | 	wrlong	#45, fp
1aa90     50 4E 05 F1 | 	add	fp, #80
1aa94     A7 12 02 F6 | 	mov	arg01, fp
1aa98     90 4E 85 F1 | 	sub	fp, #144
1aa9c     A7 22 02 FB | 	rdlong	local03, fp
1aaa0     11 15 62 F6 | 	neg	arg02, local03
1aaa4     18 4E 05 F1 | 	add	fp, #24
1aaa8     A7 18 02 FB | 	rdlong	arg04, fp
1aaac     84 4E 05 F1 | 	add	fp, #132
1aab0     A7 28 02 FB | 	rdlong	local06, fp
1aab4     BC 4E 85 F1 | 	sub	fp, #188
1aab8     14 25 02 F6 | 	mov	local04, local06
1aabc     0A 16 06 F6 | 	mov	arg03, #10
1aac0     12 1B 02 F6 | 	mov	arg05, local04
1aac4     B8 3C B0 FD | 	call	#__system___uitoa
1aac8     5C 4E 05 F1 | 	add	fp, #92
1aacc     A7 FA 61 FC | 	wrlong	result1, fp
1aad0     5C 4E 85 F1 | 	sub	fp, #92
1aad4     48 00 90 FD | 	jmp	#LR__2370
1aad8                 | LR__2369
1aad8     60 4E 05 F1 | 	add	fp, #96
1aadc     A7 56 68 FC | 	wrlong	#43, fp
1aae0     50 4E 05 F1 | 	add	fp, #80
1aae4     A7 12 02 F6 | 	mov	arg01, fp
1aae8     90 4E 85 F1 | 	sub	fp, #144
1aaec     A7 14 02 FB | 	rdlong	arg02, fp
1aaf0     18 4E 05 F1 | 	add	fp, #24
1aaf4     A7 18 02 FB | 	rdlong	arg04, fp
1aaf8     84 4E 05 F1 | 	add	fp, #132
1aafc     A7 28 02 FB | 	rdlong	local06, fp
1ab00     BC 4E 85 F1 | 	sub	fp, #188
1ab04     14 25 02 F6 | 	mov	local04, local06
1ab08     0A 16 06 F6 | 	mov	arg03, #10
1ab0c     12 1B 02 F6 | 	mov	arg05, local04
1ab10     6C 3C B0 FD | 	call	#__system___uitoa
1ab14     5C 4E 05 F1 | 	add	fp, #92
1ab18     A7 FA 61 FC | 	wrlong	result1, fp
1ab1c     5C 4E 85 F1 | 	sub	fp, #92
1ab20                 | LR__2370
1ab20     24 4E 05 F1 | 	add	fp, #36
1ab24     A7 1E 0A FB | 	rdlong	local01, fp wz
1ab28     24 4E 85 F1 | 	sub	fp, #36
1ab2c     2C 00 90 AD |  if_e	jmp	#LR__2371
1ab30     50 4E 05 F1 | 	add	fp, #80
1ab34     A7 00 68 FC | 	wrlong	#0, fp
1ab38     04 4E 85 F1 | 	sub	fp, #4
1ab3c     A7 00 68 FC | 	wrlong	#0, fp
1ab40     6C 4E 05 F1 | 	add	fp, #108
1ab44     A7 1E 02 FB | 	rdlong	local01, fp
1ab48     01 1E 06 F1 | 	add	local01, #1
1ab4c     64 4E 85 F1 | 	sub	fp, #100
1ab50     A7 1E 62 FC | 	wrlong	local01, fp
1ab54     54 4E 85 F1 | 	sub	fp, #84
1ab58     88 00 90 FD | 	jmp	#LR__2374
1ab5c                 | LR__2371
1ab5c     20 4E 05 F1 | 	add	fp, #32
1ab60     A7 1E 02 FB | 	rdlong	local01, fp
1ab64     20 4E 85 F1 | 	sub	fp, #32
1ab68     00 1E 56 F2 | 	cmps	local01, #0 wc
1ab6c     40 00 90 3D |  if_ae	jmp	#LR__2372
1ab70     20 4E 05 F1 | 	add	fp, #32
1ab74     A7 20 02 FB | 	rdlong	local02, fp
1ab78     30 4E 05 F1 | 	add	fp, #48
1ab7c     A7 20 62 FC | 	wrlong	local02, fp
1ab80     04 4E 85 F1 | 	sub	fp, #4
1ab84     A7 20 62 FC | 	wrlong	local02, fp
1ab88     2C 4E 85 F1 | 	sub	fp, #44
1ab8c     A7 1E 02 FB | 	rdlong	local01, fp
1ab90     98 4E 05 F1 | 	add	fp, #152
1ab94     A7 22 02 FB | 	rdlong	local03, fp
1ab98     11 1F 02 F1 | 	add	local01, local03
1ab9c     01 1E 06 F1 | 	add	local01, #1
1aba0     64 4E 85 F1 | 	sub	fp, #100
1aba4     A7 1E 62 FC | 	wrlong	local01, fp
1aba8     54 4E 85 F1 | 	sub	fp, #84
1abac     34 00 90 FD | 	jmp	#LR__2373
1abb0                 | LR__2372
1abb0     4C 4E 05 F1 | 	add	fp, #76
1abb4     A7 00 68 FC | 	wrlong	#0, fp
1abb8     2C 4E 85 F1 | 	sub	fp, #44
1abbc     A7 1E 02 FB | 	rdlong	local01, fp
1abc0     30 4E 05 F1 | 	add	fp, #48
1abc4     A7 1E 62 FC | 	wrlong	local01, fp
1abc8     68 4E 05 F1 | 	add	fp, #104
1abcc     A7 22 02 FB | 	rdlong	local03, fp
1abd0     11 1F 02 F1 | 	add	local01, local03
1abd4     01 1E 06 F1 | 	add	local01, #1
1abd8     64 4E 85 F1 | 	sub	fp, #100
1abdc     A7 1E 62 FC | 	wrlong	local01, fp
1abe0     54 4E 85 F1 | 	sub	fp, #84
1abe4                 | LR__2373
1abe4                 | LR__2374
1abe4     54 4E 05 F1 | 	add	fp, #84
1abe8     A7 1E 02 FB | 	rdlong	local01, fp
1abec     08 4E 85 F1 | 	sub	fp, #8
1abf0     A7 22 02 FB | 	rdlong	local03, fp
1abf4     11 1F 82 F1 | 	sub	local01, local03
1abf8     01 1E 06 F1 | 	add	local01, #1
1abfc     24 4E 85 F1 | 	sub	fp, #36
1ac00     A7 1E 62 FC | 	wrlong	local01, fp
1ac04     04 4E 05 F1 | 	add	fp, #4
1ac08     A7 1E 0A FB | 	rdlong	local01, fp wz
1ac0c     2C 4E 85 F1 | 	sub	fp, #44
1ac10     28 4E 05 51 |  if_ne	add	fp, #40
1ac14     A7 22 02 5B |  if_ne	rdlong	local03, fp
1ac18     01 22 06 51 |  if_ne	add	local03, #1
1ac1c     A7 22 62 5C |  if_ne	wrlong	local03, fp
1ac20     28 4E 85 51 |  if_ne	sub	fp, #40
1ac24     1C 4E 05 F1 | 	add	fp, #28
1ac28     A7 1E 02 FB | 	rdlong	local01, fp
1ac2c     1C 4E 85 F1 | 	sub	fp, #28
1ac30     10 1E 0E F2 | 	cmp	local01, #16 wz
1ac34     28 4E 05 A1 |  if_e	add	fp, #40
1ac38     A7 1E 02 AB |  if_e	rdlong	local01, fp
1ac3c     02 1E 06 A1 |  if_e	add	local01, #2
1ac40     A7 1E 62 AC |  if_e	wrlong	local01, fp
1ac44     28 4E 85 A1 |  if_e	sub	fp, #40
1ac48     24 4E 05 F1 | 	add	fp, #36
1ac4c     A7 1E 0A FB | 	rdlong	local01, fp wz
1ac50     24 4E 85 F1 | 	sub	fp, #36
1ac54     28 00 90 AD |  if_e	jmp	#LR__2375
1ac58     28 4E 05 F1 | 	add	fp, #40
1ac5c     A7 1E 02 FB | 	rdlong	local01, fp
1ac60     02 22 06 F6 | 	mov	local03, #2
1ac64     34 4E 05 F1 | 	add	fp, #52
1ac68     A7 26 02 FB | 	rdlong	local05, fp
1ac6c     13 23 02 F1 | 	add	local03, local05
1ac70     11 1F 02 F1 | 	add	local01, local03
1ac74     34 4E 85 F1 | 	sub	fp, #52
1ac78     A7 1E 62 FC | 	wrlong	local01, fp
1ac7c     28 4E 85 F1 | 	sub	fp, #40
1ac80                 | LR__2375
1ac80     28 4E 05 F1 | 	add	fp, #40
1ac84     A7 1E 02 FB | 	rdlong	local01, fp
1ac88     28 4E 85 F1 | 	sub	fp, #40
1ac8c     41 1E 56 F2 | 	cmps	local01, #65 wc
1ac90     01 FA 65 36 |  if_ae	neg	result1, #1
1ac94     08 05 90 3D |  if_ae	jmp	#LR__2403
1ac98     3C 4E 05 F1 | 	add	fp, #60
1ac9c     A7 1E 0A FB | 	rdlong	local01, fp wz
1aca0     3C 4E 85 F1 | 	sub	fp, #60
1aca4     60 00 90 AD |  if_e	jmp	#LR__2376
1aca8     C0 4E 05 F1 | 	add	fp, #192
1acac     A7 12 02 FB | 	rdlong	arg01, fp
1acb0     94 4E 85 F1 | 	sub	fp, #148
1acb4     A7 14 02 FB | 	rdlong	arg02, fp
1acb8     14 4E 05 F1 | 	add	fp, #20
1acbc     A7 16 02 FB | 	rdlong	arg03, fp
1acc0     40 4E 85 F1 | 	sub	fp, #64
1acc4     20 3D B0 FD | 	call	#__system__emitsign_0385
1acc8     18 4F 05 F1 | 	add	fp, #280
1accc     A7 FA 61 FC | 	wrlong	result1, fp
1acd0     18 4F 85 F1 | 	sub	fp, #280
1acd4     00 FA 55 F2 | 	cmps	result1, #0 wc
1acd8     18 4F 05 C1 |  if_b	add	fp, #280
1acdc     A7 FA 01 CB |  if_b	rdlong	result1, fp
1ace0     18 4F 85 C1 |  if_b	sub	fp, #280
1ace4     B8 04 90 CD |  if_b	jmp	#LR__2403
1ace8     C0 4E 05 F1 | 	add	fp, #192
1acec     A7 1E 02 FB | 	rdlong	local01, fp
1acf0     58 4E 05 F1 | 	add	fp, #88
1acf4     A7 22 02 FB | 	rdlong	local03, fp
1acf8     11 1F 02 F1 | 	add	local01, local03
1acfc     58 4E 85 F1 | 	sub	fp, #88
1ad00     A7 1E 62 FC | 	wrlong	local01, fp
1ad04     C0 4E 85 F1 | 	sub	fp, #192
1ad08                 | LR__2376
1ad08     4C 4E 05 F1 | 	add	fp, #76
1ad0c     A7 1E 02 FB | 	rdlong	local01, fp
1ad10     34 4E 85 F1 | 	sub	fp, #52
1ad14     A7 1E 62 FC | 	wrlong	local01, fp
1ad18     18 4E 85 F1 | 	sub	fp, #24
1ad1c     97 9E 48 FB | 	callpa	#(@LR__2382-@LR__2377)>>2,fcache_load_ptr_
1ad20                 | LR__2377
1ad20     18 4E 05 F1 | 	add	fp, #24
1ad24     A7 20 02 FB | 	rdlong	local02, fp
1ad28     3C 4E 05 F1 | 	add	fp, #60
1ad2c     A7 26 02 FB | 	rdlong	local05, fp
1ad30     54 4E 85 F1 | 	sub	fp, #84
1ad34     13 21 52 F2 | 	cmps	local02, local05 wc
1ad38     20 01 90 3D |  if_ae	jmp	#LR__2383
1ad3c     18 4E 05 F1 | 	add	fp, #24
1ad40     A7 28 02 FB | 	rdlong	local06, fp
1ad44     18 4E 85 F1 | 	sub	fp, #24
1ad48     00 28 56 F2 | 	cmps	local06, #0 wc
1ad4c     58 00 90 CD |  if_b	jmp	#LR__2378
1ad50     18 4E 05 F1 | 	add	fp, #24
1ad54     A7 28 02 FB | 	rdlong	local06, fp
1ad58     40 4E 05 F1 | 	add	fp, #64
1ad5c     A7 2A 02 FB | 	rdlong	local07, fp
1ad60     58 4E 85 F1 | 	sub	fp, #88
1ad64     15 29 52 F2 | 	cmps	local06, local07 wc
1ad68     3C 00 90 3D |  if_ae	jmp	#LR__2378
1ad6c     C0 4E 05 F1 | 	add	fp, #192
1ad70     A7 2C 02 FB | 	rdlong	local08, fp
1ad74     16 2B 02 F6 | 	mov	local07, local08
1ad78     01 2A 06 F1 | 	add	local07, #1
1ad7c     A7 2A 62 FC | 	wrlong	local07, fp
1ad80     A8 4E 85 F1 | 	sub	fp, #168
1ad84     A7 2A 02 FB | 	rdlong	local07, fp
1ad88     15 2F 02 F6 | 	mov	local09, local07
1ad8c     58 4E 05 F1 | 	add	fp, #88
1ad90     A7 30 02 F6 | 	mov	local10, fp
1ad94     A7 2E 02 F1 | 	add	local09, fp
1ad98     17 33 C2 FA | 	rdbyte	local11, local09
1ad9c     16 33 42 FC | 	wrbyte	local11, local08
1ada0     70 4E 85 F1 | 	sub	fp, #112
1ada4     20 00 90 FD | 	jmp	#LR__2379
1ada8                 | LR__2378
1ada8     C0 4E 05 F1 | 	add	fp, #192
1adac     A7 2C 02 FB | 	rdlong	local08, fp
1adb0     16 2F 02 F6 | 	mov	local09, local08
1adb4     01 2E 06 F1 | 	add	local09, #1
1adb8     A7 2E 62 FC | 	wrlong	local09, fp
1adbc     C0 4E 85 F1 | 	sub	fp, #192
1adc0     30 2E 06 F6 | 	mov	local09, #48
1adc4     16 61 48 FC | 	wrbyte	#48, local08
1adc8                 | LR__2379
1adc8     18 4E 05 F1 | 	add	fp, #24
1adcc     A7 28 02 FB | 	rdlong	local06, fp
1add0     38 4E 05 F1 | 	add	fp, #56
1add4     A7 34 02 FB | 	rdlong	local12, fp
1add8     50 4E 85 F1 | 	sub	fp, #80
1addc     1A 29 0A F2 | 	cmp	local06, local12 wz
1ade0     5C 00 90 5D |  if_ne	jmp	#LR__2381
1ade4     10 4F 05 F1 | 	add	fp, #272
1ade8     A7 2A 02 FB | 	rdlong	local07, fp
1adec     10 4F 85 F1 | 	sub	fp, #272
1adf0     15 2F 0A F6 | 	mov	local09, local07 wz
1adf4     28 00 90 5D |  if_ne	jmp	#LR__2380
1adf8     54 4E 05 F1 | 	add	fp, #84
1adfc     A7 32 02 FB | 	rdlong	local11, fp
1ae00     19 31 02 F6 | 	mov	local10, local11
1ae04     01 30 86 F1 | 	sub	local10, #1
1ae08     3C 4E 85 F1 | 	sub	fp, #60
1ae0c     A7 36 02 FB | 	rdlong	local13, fp
1ae10     18 4E 85 F1 | 	sub	fp, #24
1ae14     1B 39 02 F6 | 	mov	local14, local13
1ae18     18 39 52 F2 | 	cmps	local14, local10 wc
1ae1c     20 00 90 3D |  if_ae	jmp	#LR__2381
1ae20                 | LR__2380
1ae20     C0 4E 05 F1 | 	add	fp, #192
1ae24     A7 2C 02 FB | 	rdlong	local08, fp
1ae28     16 35 02 F6 | 	mov	local12, local08
1ae2c     01 34 06 F1 | 	add	local12, #1
1ae30     A7 34 62 FC | 	wrlong	local12, fp
1ae34     C0 4E 85 F1 | 	sub	fp, #192
1ae38     2E 2E 06 F6 | 	mov	local09, #46
1ae3c     16 5D 48 FC | 	wrbyte	#46, local08
1ae40                 | LR__2381
1ae40     18 4E 05 F1 | 	add	fp, #24
1ae44     A7 3A 02 FB | 	rdlong	local15, fp
1ae48     1D 35 02 F6 | 	mov	local12, local15
1ae4c     01 34 06 F1 | 	add	local12, #1
1ae50     A7 34 62 FC | 	wrlong	local12, fp
1ae54     18 4E 85 F1 | 	sub	fp, #24
1ae58     C4 FE 9F FD | 	jmp	#LR__2377
1ae5c                 | LR__2382
1ae5c                 | LR__2383
1ae5c     34 4E 05 F1 | 	add	fp, #52
1ae60     A7 1E 0A FB | 	rdlong	local01, fp wz
1ae64     34 4E 85 F1 | 	sub	fp, #52
1ae68     A0 00 90 AD |  if_e	jmp	#LR__2387
1ae6c     C0 4E 05 F1 | 	add	fp, #192
1ae70     A7 1E 02 FB | 	rdlong	local01, fp
1ae74     01 1E 86 F1 | 	sub	local01, #1
1ae78     A7 1E 62 FC | 	wrlong	local01, fp
1ae7c     C0 4E 85 F1 | 	sub	fp, #192
1ae80     97 26 48 FB | 	callpa	#(@LR__2385-@LR__2384)>>2,fcache_load_ptr_
1ae84                 | LR__2384
1ae84     C0 4E 05 F1 | 	add	fp, #192
1ae88     A7 1E 02 FB | 	rdlong	local01, fp
1ae8c     04 4E 05 F1 | 	add	fp, #4
1ae90     A7 22 02 FB | 	rdlong	local03, fp
1ae94     C4 4E 85 F1 | 	sub	fp, #196
1ae98     11 1F 5A F2 | 	cmps	local01, local03 wcz
1ae9c     30 00 90 ED |  if_be	jmp	#LR__2386
1aea0     C0 4E 05 F1 | 	add	fp, #192
1aea4     A7 28 02 FB | 	rdlong	local06, fp
1aea8     C0 4E 85 F1 | 	sub	fp, #192
1aeac     14 25 C2 FA | 	rdbyte	local04, local06
1aeb0     30 24 0E F2 | 	cmp	local04, #48 wz
1aeb4     18 00 90 5D |  if_ne	jmp	#LR__2386
1aeb8     C0 4E 05 F1 | 	add	fp, #192
1aebc     A7 1E 02 FB | 	rdlong	local01, fp
1aec0     01 1E 86 F1 | 	sub	local01, #1
1aec4     A7 1E 62 FC | 	wrlong	local01, fp
1aec8     C0 4E 85 F1 | 	sub	fp, #192
1aecc     B4 FF 9F FD | 	jmp	#LR__2384
1aed0                 | LR__2385
1aed0                 | LR__2386
1aed0     C0 4E 05 F1 | 	add	fp, #192
1aed4     A7 20 02 FB | 	rdlong	local02, fp
1aed8     C0 4E 85 F1 | 	sub	fp, #192
1aedc     10 1F C2 FA | 	rdbyte	local01, local02
1aee0     2E 1E 0E F2 | 	cmp	local01, #46 wz
1aee4     C0 4E 05 A1 |  if_e	add	fp, #192
1aee8     A7 1E 02 AB |  if_e	rdlong	local01, fp
1aeec     01 1E 86 A1 |  if_e	sub	local01, #1
1aef0     A7 1E 62 AC |  if_e	wrlong	local01, fp
1aef4     C0 4E 85 A1 |  if_e	sub	fp, #192
1aef8     C0 4E 05 F1 | 	add	fp, #192
1aefc     A7 22 02 FB | 	rdlong	local03, fp
1af00     01 22 06 F1 | 	add	local03, #1
1af04     A7 22 62 FC | 	wrlong	local03, fp
1af08     C0 4E 85 F1 | 	sub	fp, #192
1af0c                 | LR__2387
1af0c     24 4E 05 F1 | 	add	fp, #36
1af10     A7 1E 0A FB | 	rdlong	local01, fp wz
1af14     24 4E 85 F1 | 	sub	fp, #36
1af18     B4 00 90 AD |  if_e	jmp	#LR__2390
1af1c     C0 4E 05 F1 | 	add	fp, #192
1af20     A7 20 02 FB | 	rdlong	local02, fp
1af24     10 23 02 F6 | 	mov	local03, local02
1af28     01 22 06 F1 | 	add	local03, #1
1af2c     A7 22 62 FC | 	wrlong	local03, fp
1af30     90 4E 85 F1 | 	sub	fp, #144
1af34     A7 24 02 FB | 	rdlong	local04, fp
1af38     10 25 42 FC | 	wrbyte	local04, local02
1af3c     90 4E 05 F1 | 	add	fp, #144
1af40     A7 20 02 FB | 	rdlong	local02, fp
1af44     10 23 02 F6 | 	mov	local03, local02
1af48     01 22 06 F1 | 	add	local03, #1
1af4c     A7 22 62 FC | 	wrlong	local03, fp
1af50     60 4E 85 F1 | 	sub	fp, #96
1af54     A7 24 02 FB | 	rdlong	local04, fp
1af58     10 25 42 FC | 	wrbyte	local04, local02
1af5c     48 4E 85 F1 | 	sub	fp, #72
1af60     A7 00 68 FC | 	wrlong	#0, fp
1af64     18 4E 85 F1 | 	sub	fp, #24
1af68                 | LR__2388
1af68     18 4E 05 F1 | 	add	fp, #24
1af6c     A7 20 02 FB | 	rdlong	local02, fp
1af70     44 4E 05 F1 | 	add	fp, #68
1af74     A7 26 02 FB | 	rdlong	local05, fp
1af78     5C 4E 85 F1 | 	sub	fp, #92
1af7c     13 21 52 F2 | 	cmps	local02, local05 wc
1af80     4C 00 90 3D |  if_ae	jmp	#LR__2389
1af84     C0 4E 05 F1 | 	add	fp, #192
1af88     A7 2C 02 FB | 	rdlong	local08, fp
1af8c     16 35 02 F6 | 	mov	local12, local08
1af90     01 34 06 F1 | 	add	local12, #1
1af94     A7 34 62 FC | 	wrlong	local12, fp
1af98     A8 4E 85 F1 | 	sub	fp, #168
1af9c     A7 2A 02 FB | 	rdlong	local07, fp
1afa0     15 2F 02 F6 | 	mov	local09, local07
1afa4     98 4E 05 F1 | 	add	fp, #152
1afa8     A7 30 02 F6 | 	mov	local10, fp
1afac     A7 2E 02 F1 | 	add	local09, fp
1afb0     17 33 C2 FA | 	rdbyte	local11, local09
1afb4     16 33 42 FC | 	wrbyte	local11, local08
1afb8     98 4E 85 F1 | 	sub	fp, #152
1afbc     A7 34 02 FB | 	rdlong	local12, fp
1afc0     01 34 06 F1 | 	add	local12, #1
1afc4     A7 34 62 FC | 	wrlong	local12, fp
1afc8     18 4E 85 F1 | 	sub	fp, #24
1afcc     98 FF 9F FD | 	jmp	#LR__2388
1afd0                 | LR__2389
1afd0                 | LR__2390
1afd0     C0 4E 05 F1 | 	add	fp, #192
1afd4     A7 1E 02 FB | 	rdlong	local01, fp
1afd8     C0 4E 85 F1 | 	sub	fp, #192
1afdc     0F 01 48 FC | 	wrbyte	#0, local01
1afe0                 | LR__2391
1afe0     6C 4E 05 F1 | 	add	fp, #108
1afe4     A7 1E 0A FB | 	rdlong	local01, fp wz
1afe8     6C 4E 85 F1 | 	sub	fp, #108
1afec     90 01 90 AD |  if_e	jmp	#LR__2402
1aff0     48 4E 05 F1 | 	add	fp, #72
1aff4     A7 22 0A FB | 	rdlong	local03, fp wz
1aff8     48 4E 85 F1 | 	sub	fp, #72
1affc     80 01 90 AD |  if_e	jmp	#LR__2402
1b000     C4 4E 05 F1 | 	add	fp, #196
1b004     A7 12 02 FB | 	rdlong	arg01, fp
1b008     C4 4E 85 F1 | 	sub	fp, #196
1b00c     09 3D 02 F6 | 	mov	local16, arg01
1b010     97 06 48 FB | 	callpa	#(@LR__2393-@LR__2392)>>2,fcache_load_ptr_
1b014                 | LR__2392
1b014     1E FB C9 FA | 	rdbyte	result1, local16 wz
1b018     01 3C 06 51 |  if_ne	add	local16, #1
1b01c     F4 FF 9F 5D |  if_ne	jmp	#LR__2392
1b020                 | LR__2393
1b020     09 3D 82 F1 | 	sub	local16, arg01
1b024     1E 25 02 F6 | 	mov	local04, local16
1b028     6C 4E 05 F1 | 	add	fp, #108
1b02c     A7 28 02 FB | 	rdlong	local06, fp
1b030     6C 4E 85 F1 | 	sub	fp, #108
1b034     14 25 5A F2 | 	cmps	local04, local06 wcz
1b038     44 01 90 ED |  if_be	jmp	#LR__2402
1b03c     C4 4E 05 F1 | 	add	fp, #196
1b040     A7 1E 02 FB | 	rdlong	local01, fp
1b044     5C 4E 05 F1 | 	add	fp, #92
1b048     A7 1E 62 FC | 	wrlong	local01, fp
1b04c     FC 4E 85 F1 | 	sub	fp, #252
1b050     A7 1E 0A FB | 	rdlong	local01, fp wz
1b054     24 4E 85 F1 | 	sub	fp, #36
1b058     20 00 90 AD |  if_e	jmp	#LR__2394
1b05c     B8 4E 05 F1 | 	add	fp, #184
1b060     A7 00 68 FC | 	wrlong	#0, fp
1b064     4C 4E 85 F1 | 	sub	fp, #76
1b068     A7 1E 02 FB | 	rdlong	local01, fp
1b06c     B0 4E 05 F1 | 	add	fp, #176
1b070     A7 1E 62 FC | 	wrlong	local01, fp
1b074     1C 4F 85 F1 | 	sub	fp, #284
1b078     24 00 90 FD | 	jmp	#LR__2395
1b07c                 | LR__2394
1b07c     6C 4E 05 F1 | 	add	fp, #108
1b080     A7 1E 02 FB | 	rdlong	local01, fp
1b084     01 1E 86 F1 | 	sub	local01, #1
1b088     4C 4E 05 F1 | 	add	fp, #76
1b08c     A7 22 02 FB | 	rdlong	local03, fp
1b090     11 1F 82 F1 | 	sub	local01, local03
1b094     64 4E 05 F1 | 	add	fp, #100
1b098     A7 1E 62 FC | 	wrlong	local01, fp
1b09c     1C 4F 85 F1 | 	sub	fp, #284
1b0a0                 | LR__2395
1b0a0     97 20 48 FB | 	callpa	#(@LR__2397-@LR__2396)>>2,fcache_load_ptr_
1b0a4                 | LR__2396
1b0a4     1C 4F 05 F1 | 	add	fp, #284
1b0a8     A7 1E 0A FB | 	rdlong	local01, fp wz
1b0ac     1C 4F 85 F1 | 	sub	fp, #284
1b0b0     30 00 90 AD |  if_e	jmp	#LR__2398
1b0b4     20 4F 05 F1 | 	add	fp, #288
1b0b8     A7 20 02 FB | 	rdlong	local02, fp
1b0bc     10 23 02 F6 | 	mov	local03, local02
1b0c0     01 22 06 F1 | 	add	local03, #1
1b0c4     A7 22 62 FC | 	wrlong	local03, fp
1b0c8     10 55 48 FC | 	wrbyte	#42, local02
1b0cc     04 4E 85 F1 | 	sub	fp, #4
1b0d0     A7 1E 02 FB | 	rdlong	local01, fp
1b0d4     01 1E 86 F1 | 	sub	local01, #1
1b0d8     A7 1E 62 FC | 	wrlong	local01, fp
1b0dc     1C 4F 85 F1 | 	sub	fp, #284
1b0e0     C0 FF 9F FD | 	jmp	#LR__2396
1b0e4                 | LR__2397
1b0e4                 | LR__2398
1b0e4     B8 4E 05 F1 | 	add	fp, #184
1b0e8     A7 1E 0A FB | 	rdlong	local01, fp wz
1b0ec     B8 4E 85 F1 | 	sub	fp, #184
1b0f0     70 00 90 AD |  if_e	jmp	#LR__2401
1b0f4     20 4F 05 F1 | 	add	fp, #288
1b0f8     A7 20 02 FB | 	rdlong	local02, fp
1b0fc     10 23 02 F6 | 	mov	local03, local02
1b100     01 22 06 F1 | 	add	local03, #1
1b104     A7 22 62 FC | 	wrlong	local03, fp
1b108     10 5D 48 FC | 	wrbyte	#46, local02
1b10c     04 4E 85 F1 | 	sub	fp, #4
1b110     A7 00 68 FC | 	wrlong	#0, fp
1b114     1C 4F 85 F1 | 	sub	fp, #284
1b118                 | LR__2399
1b118     1C 4F 05 F1 | 	add	fp, #284
1b11c     A7 20 02 FB | 	rdlong	local02, fp
1b120     64 4E 85 F1 | 	sub	fp, #100
1b124     A7 26 02 FB | 	rdlong	local05, fp
1b128     B8 4E 85 F1 | 	sub	fp, #184
1b12c     13 21 52 F2 | 	cmps	local02, local05 wc
1b130     30 00 90 3D |  if_ae	jmp	#LR__2400
1b134     20 4F 05 F1 | 	add	fp, #288
1b138     A7 2C 02 FB | 	rdlong	local08, fp
1b13c     16 35 02 F6 | 	mov	local12, local08
1b140     01 34 06 F1 | 	add	local12, #1
1b144     A7 34 62 FC | 	wrlong	local12, fp
1b148     16 55 48 FC | 	wrbyte	#42, local08
1b14c     04 4E 85 F1 | 	sub	fp, #4
1b150     A7 34 02 FB | 	rdlong	local12, fp
1b154     01 34 06 F1 | 	add	local12, #1
1b158     A7 34 62 FC | 	wrlong	local12, fp
1b15c     1C 4F 85 F1 | 	sub	fp, #284
1b160     B4 FF 9F FD | 	jmp	#LR__2399
1b164                 | LR__2400
1b164                 | LR__2401
1b164     20 4F 05 F1 | 	add	fp, #288
1b168     A7 20 02 FB | 	rdlong	local02, fp
1b16c     10 23 02 F6 | 	mov	local03, local02
1b170     01 22 06 F1 | 	add	local03, #1
1b174     A7 22 62 FC | 	wrlong	local03, fp
1b178     20 4F 85 F1 | 	sub	fp, #288
1b17c     10 01 48 FC | 	wrbyte	#0, local02
1b180                 | LR__2402
1b180     04 4E 05 F1 | 	add	fp, #4
1b184     A7 12 02 FB | 	rdlong	arg01, fp
1b188     04 4E 05 F1 | 	add	fp, #4
1b18c     A7 14 02 FB | 	rdlong	arg02, fp
1b190     BC 4E 05 F1 | 	add	fp, #188
1b194     A7 16 02 FB | 	rdlong	arg03, fp
1b198     C4 4E 85 F1 | 	sub	fp, #196
1b19c     C4 EE BF FD | 	call	#__system___fmtstr
1b1a0                 | LR__2403
1b1a0     A7 F0 03 F6 | 	mov	ptra, fp
1b1a4     B2 00 A0 FD | 	call	#popregs_
1b1a8                 | __system___fmtfloat_ret
1b1a8     2D 00 64 FD | 	ret
1b1ac                 | 
1b1ac                 | __system__Left_S
1b1ac     04 4A 05 F6 | 	mov	COUNT_, #4
1b1b0     A8 00 A0 FD | 	call	#pushregs_
1b1b4     09 1F 02 F6 | 	mov	local01, arg01
1b1b8     0A 21 02 F6 | 	mov	local02, arg02
1b1bc     01 20 56 F2 | 	cmps	local02, #1 wc
1b1c0     43 01 00 CF 
1b1c4     AE FA 05 C6 |  if_b	mov	result1, ##@LR__4283
1b1c8     5C 00 90 CD |  if_b	jmp	#LR__2413
1b1cc     0F 13 02 F6 | 	mov	arg01, local01
1b1d0     09 23 02 F6 | 	mov	local03, arg01
1b1d4     97 06 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1b1d8                 | LR__2410
1b1d8     11 FB C9 FA | 	rdbyte	result1, local03 wz
1b1dc     01 22 06 51 |  if_ne	add	local03, #1
1b1e0     F4 FF 9F 5D |  if_ne	jmp	#LR__2410
1b1e4                 | LR__2411
1b1e4     09 23 82 F1 | 	sub	local03, arg01
1b1e8     11 FB 01 F6 | 	mov	result1, local03
1b1ec     10 FB 59 F2 | 	cmps	result1, local02 wcz
1b1f0     0F FB 01 E6 |  if_be	mov	result1, local01
1b1f4     30 00 90 ED |  if_be	jmp	#LR__2413
1b1f8     10 13 02 F6 | 	mov	arg01, local02
1b1fc     02 12 06 F1 | 	add	arg01, #2
1b200     50 1D B0 FD | 	call	#__system___gc_alloc_managed
1b204     FD 24 0A F6 | 	mov	local04, result1 wz
1b208     18 00 90 AD |  if_e	jmp	#LR__2412
1b20c     12 13 02 F6 | 	mov	arg01, local04
1b210     0F 15 02 F6 | 	mov	arg02, local01
1b214     10 17 02 F6 | 	mov	arg03, local02
1b218     A0 DE BF FD | 	call	#__system____builtin_memmove
1b21c     12 21 02 F1 | 	add	local02, local04
1b220     10 01 48 FC | 	wrbyte	#0, local02
1b224                 | LR__2412
1b224     12 FB 01 F6 | 	mov	result1, local04
1b228                 | LR__2413
1b228     A7 F0 03 F6 | 	mov	ptra, fp
1b22c     B2 00 A0 FD | 	call	#popregs_
1b230                 | __system__Left_S_ret
1b230     2D 00 64 FD | 	ret
1b234                 | 
1b234                 | __system__Right_S
1b234     05 4A 05 F6 | 	mov	COUNT_, #5
1b238     A8 00 A0 FD | 	call	#pushregs_
1b23c     09 1F 02 F6 | 	mov	local01, arg01
1b240     0A 21 02 F6 | 	mov	local02, arg02
1b244     01 20 56 F2 | 	cmps	local02, #1 wc
1b248     43 01 00 CF 
1b24c     AF FA 05 C6 |  if_b	mov	result1, ##@LR__4284
1b250     64 00 90 CD |  if_b	jmp	#LR__2423
1b254     0F 13 02 F6 | 	mov	arg01, local01
1b258     09 23 02 F6 | 	mov	local03, arg01
1b25c     97 06 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1b260                 | LR__2420
1b260     11 FB C9 FA | 	rdbyte	result1, local03 wz
1b264     01 22 06 51 |  if_ne	add	local03, #1
1b268     F4 FF 9F 5D |  if_ne	jmp	#LR__2420
1b26c                 | LR__2421
1b26c     09 23 82 F1 | 	sub	local03, arg01
1b270     11 FB 01 F6 | 	mov	result1, local03
1b274     FD 24 02 F6 | 	mov	local04, result1
1b278     10 25 5A F2 | 	cmps	local04, local02 wcz
1b27c     0F FB 01 E6 |  if_be	mov	result1, local01
1b280     34 00 90 ED |  if_be	jmp	#LR__2423
1b284     10 13 02 F6 | 	mov	arg01, local02
1b288     02 12 06 F1 | 	add	arg01, #2
1b28c     C4 1C B0 FD | 	call	#__system___gc_alloc_managed
1b290     FD 26 0A F6 | 	mov	local05, result1 wz
1b294     1C 00 90 AD |  if_e	jmp	#LR__2422
1b298     10 25 82 F1 | 	sub	local04, local02
1b29c     0F 25 02 F1 | 	add	local04, local01
1b2a0     01 20 06 F1 | 	add	local02, #1
1b2a4     13 13 02 F6 | 	mov	arg01, local05
1b2a8     12 15 02 F6 | 	mov	arg02, local04
1b2ac     10 17 02 F6 | 	mov	arg03, local02
1b2b0     08 DE BF FD | 	call	#__system____builtin_memmove
1b2b4                 | LR__2422
1b2b4     13 FB 01 F6 | 	mov	result1, local05
1b2b8                 | LR__2423
1b2b8     A7 F0 03 F6 | 	mov	ptra, fp
1b2bc     B2 00 A0 FD | 	call	#popregs_
1b2c0                 | __system__Right_S_ret
1b2c0     2D 00 64 FD | 	ret
1b2c4                 | 
1b2c4                 | __system__Mid_S
1b2c4     05 4A 05 F6 | 	mov	COUNT_, #5
1b2c8     A8 00 A0 FD | 	call	#pushregs_
1b2cc     09 1F 02 F6 | 	mov	local01, arg01
1b2d0     0A 21 02 F6 | 	mov	local02, arg02
1b2d4     01 16 56 F2 | 	cmps	arg03, #1 wc
1b2d8     43 01 00 CF 
1b2dc     B0 FA 05 C6 |  if_b	mov	result1, ##@LR__4285
1b2e0     80 00 90 CD |  if_b	jmp	#LR__2433
1b2e4     01 20 86 F1 | 	sub	local02, #1
1b2e8     00 20 56 F3 | 	fges	local02, #0 wc
1b2ec     0F 13 02 F6 | 	mov	arg01, local01
1b2f0     09 23 02 F6 | 	mov	local03, arg01
1b2f4     97 06 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1b2f8                 | LR__2430
1b2f8     11 FB C9 FA | 	rdbyte	result1, local03 wz
1b2fc     01 22 06 51 |  if_ne	add	local03, #1
1b300     F4 FF 9F 5D |  if_ne	jmp	#LR__2430
1b304                 | LR__2431
1b304     09 23 82 F1 | 	sub	local03, arg01
1b308     11 FB 01 F6 | 	mov	result1, local03
1b30c     FD 14 02 F6 | 	mov	arg02, result1
1b310     10 15 52 F2 | 	cmps	arg02, local02 wc
1b314     43 01 00 CF 
1b318     B1 FA 05 C6 |  if_b	mov	result1, ##@LR__4286
1b31c     44 00 90 CD |  if_b	jmp	#LR__2433
1b320     0A 25 02 F6 | 	mov	local04, arg02
1b324     10 25 82 F1 | 	sub	local04, local02
1b328     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1b32c     0B 25 02 16 |  if_a	mov	local04, arg03
1b330     12 13 02 F6 | 	mov	arg01, local04
1b334     02 12 06 F1 | 	add	arg01, #2
1b338     18 1C B0 FD | 	call	#__system___gc_alloc_managed
1b33c     FD 26 0A F6 | 	mov	local05, result1 wz
1b340     1C 00 90 AD |  if_e	jmp	#LR__2432
1b344     0F 21 02 F1 | 	add	local02, local01
1b348     13 13 02 F6 | 	mov	arg01, local05
1b34c     10 15 02 F6 | 	mov	arg02, local02
1b350     12 17 02 F6 | 	mov	arg03, local04
1b354     64 DD BF FD | 	call	#__system____builtin_memmove
1b358     13 25 02 F1 | 	add	local04, local05
1b35c     12 01 48 FC | 	wrbyte	#0, local04
1b360                 | LR__2432
1b360     13 FB 01 F6 | 	mov	result1, local05
1b364                 | LR__2433
1b364     A7 F0 03 F6 | 	mov	ptra, fp
1b368     B2 00 A0 FD | 	call	#popregs_
1b36c                 | __system__Mid_S_ret
1b36c     2D 00 64 FD | 	ret
1b370                 | 
1b370                 | __system__Chr_S
1b370     01 4A 05 F6 | 	mov	COUNT_, #1
1b374     A8 00 A0 FD | 	call	#pushregs_
1b378     09 1F 02 F6 | 	mov	local01, arg01
1b37c     03 12 06 F6 | 	mov	arg01, #3
1b380     D0 1B B0 FD | 	call	#__system___gc_alloc_managed
1b384     00 FA 4D F2 | 	cmps	result1, #0 wz
1b388     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1b38c     01 FA 05 51 |  if_ne	add	result1, #1
1b390     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1b394     01 FA 85 51 |  if_ne	sub	result1, #1
1b398     A7 F0 03 F6 | 	mov	ptra, fp
1b39c     B2 00 A0 FD | 	call	#popregs_
1b3a0                 | __system__Chr_S_ret
1b3a0     2D 00 64 FD | 	ret
1b3a4                 | 
1b3a4                 | __system__Number_S
1b3a4     08 4A 05 F6 | 	mov	COUNT_, #8
1b3a8     A8 00 A0 FD | 	call	#pushregs_
1b3ac     09 1F 02 F6 | 	mov	local01, arg01
1b3b0     0A 21 0A F6 | 	mov	local02, arg02 wz
1b3b4     0B 23 02 F6 | 	mov	local03, arg03
1b3b8     3C 00 90 5D |  if_ne	jmp	#LR__2442
1b3bc     01 20 06 F6 | 	mov	local02, #1
1b3c0     11 25 02 F6 | 	mov	local04, local03
1b3c4     01 26 06 F6 | 	mov	local05, #1
1b3c8     97 16 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1b3cc                 | LR__2440
1b3cc     00 28 06 F6 | 	mov	local06, #0
1b3d0     0F 25 1A F2 | 	cmp	local04, local01 wcz
1b3d4     01 28 66 E6 |  if_be	neg	local06, #1
1b3d8     12 27 12 F2 | 	cmp	local05, local04 wc
1b3dc     15 2B A2 F1 | 	subx	local07, local07
1b3e0     15 29 CA F7 | 	test	local06, local07 wz
1b3e4     11 25 02 5D |  if_ne	qmul	local04, local03
1b3e8     12 27 02 56 |  if_ne	mov	local05, local04
1b3ec     01 20 06 51 |  if_ne	add	local02, #1
1b3f0     18 24 62 5D |  if_ne	getqx	local04
1b3f4     D4 FF 9F 5D |  if_ne	jmp	#LR__2440
1b3f8                 | LR__2441
1b3f8                 | LR__2442
1b3f8     20 20 36 F3 | 	fle	local02, #32 wc
1b3fc     10 13 02 F6 | 	mov	arg01, local02
1b400     02 12 06 F1 | 	add	arg01, #2
1b404     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
1b408     FD 28 02 F6 | 	mov	local06, result1
1b40c     10 2B 02 F6 | 	mov	local07, local02
1b410     14 2B 02 F1 | 	add	local07, local06
1b414     15 01 48 FC | 	wrbyte	#0, local07
1b418     97 1A 48 FB | 	callpa	#(@LR__2444-@LR__2443)>>2,fcache_load_ptr_
1b41c                 | LR__2443
1b41c     01 20 16 F2 | 	cmp	local02, #1 wc
1b420     2C 00 90 CD |  if_b	jmp	#LR__2445
1b424     11 1F 12 FD | 	qdiv	local01, local03
1b428     01 20 86 F1 | 	sub	local02, #1
1b42c     10 2B 02 F6 | 	mov	local07, local02
1b430     14 2B 02 F1 | 	add	local07, local06
1b434     19 2C 62 FD | 	getqy	local08
1b438     0A 2C 16 F2 | 	cmp	local08, #10 wc
1b43c     30 2C 06 C1 |  if_b	add	local08, #48
1b440     37 2C 06 31 |  if_ae	add	local08, #55
1b444     15 2D 42 FC | 	wrbyte	local08, local07
1b448     18 1E 62 FD | 	getqx	local01
1b44c     CC FF 9F FD | 	jmp	#LR__2443
1b450                 | LR__2444
1b450                 | LR__2445
1b450     14 FB 01 F6 | 	mov	result1, local06
1b454     A7 F0 03 F6 | 	mov	ptra, fp
1b458     B2 00 A0 FD | 	call	#popregs_
1b45c                 | __system__Number_S_ret
1b45c     2D 00 64 FD | 	ret
1b460                 | 
1b460                 | __system__LCase_S
1b460     07 4A 05 F6 | 	mov	COUNT_, #7
1b464     A8 00 A0 FD | 	call	#pushregs_
1b468     09 1F 02 F6 | 	mov	local01, arg01
1b46c     09 21 02 F6 | 	mov	local02, arg01
1b470     97 06 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1b474                 | LR__2450
1b474     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b478     01 20 06 51 |  if_ne	add	local02, #1
1b47c     F4 FF 9F 5D |  if_ne	jmp	#LR__2450
1b480                 | LR__2451
1b480     09 21 82 F1 | 	sub	local02, arg01
1b484     10 FB 01 F6 | 	mov	result1, local02
1b488     FD 20 0A F6 | 	mov	local02, result1 wz
1b48c     43 01 00 AF 
1b490     B2 FA 05 A6 |  if_e	mov	result1, ##@LR__4287
1b494     7C 00 90 AD |  if_e	jmp	#LR__2457
1b498     10 13 02 F6 | 	mov	arg01, local02
1b49c     02 12 06 F1 | 	add	arg01, #2
1b4a0     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
1b4a4     FD 22 0A F6 | 	mov	local03, result1 wz
1b4a8     64 00 90 AD |  if_e	jmp	#LR__2456
1b4ac     01 24 66 F6 | 	neg	local04, #1
1b4b0     97 26 48 FB | 	callpa	#(@LR__2455-@LR__2452)>>2,fcache_load_ptr_
1b4b4                 | LR__2452
1b4b4     01 24 06 F1 | 	add	local04, #1
1b4b8     12 27 02 F6 | 	mov	local05, local04
1b4bc     0F 27 02 F1 | 	add	local05, local01
1b4c0     13 29 C2 FA | 	rdbyte	local06, local05
1b4c4     41 28 56 F2 | 	cmps	local06, #65 wc
1b4c8     18 00 90 CD |  if_b	jmp	#LR__2453
1b4cc     5B 28 56 F2 | 	cmps	local06, #91 wc
1b4d0     12 2B 02 C6 |  if_b	mov	local07, local04
1b4d4     11 2B 02 C1 |  if_b	add	local07, local03
1b4d8     20 28 06 C1 |  if_b	add	local06, #32
1b4dc     15 29 42 CC |  if_b	wrbyte	local06, local07
1b4e0     0C 00 90 CD |  if_b	jmp	#LR__2454
1b4e4                 | LR__2453
1b4e4     12 2B 02 F6 | 	mov	local07, local04
1b4e8     11 2B 02 F1 | 	add	local07, local03
1b4ec     15 29 42 FC | 	wrbyte	local06, local07
1b4f0                 | LR__2454
1b4f0     10 29 02 F6 | 	mov	local06, local02
1b4f4     01 28 86 F1 | 	sub	local06, #1
1b4f8     14 25 0A F2 | 	cmp	local04, local06 wz
1b4fc     B4 FF 9F 5D |  if_ne	jmp	#LR__2452
1b500                 | LR__2455
1b500     11 21 02 F1 | 	add	local02, local03
1b504     10 01 48 FC | 	wrbyte	#0, local02
1b508     11 FB 01 F6 | 	mov	result1, local03
1b50c     04 00 90 FD | 	jmp	#LR__2457
1b510                 | LR__2456
1b510     11 FB 01 F6 | 	mov	result1, local03
1b514                 | LR__2457
1b514     A7 F0 03 F6 | 	mov	ptra, fp
1b518     B2 00 A0 FD | 	call	#popregs_
1b51c                 | __system__LCase_S_ret
1b51c     2D 00 64 FD | 	ret
1b520                 | 
1b520                 | __system__LTrim_S
1b520     05 4A 05 F6 | 	mov	COUNT_, #5
1b524     A8 00 A0 FD | 	call	#pushregs_
1b528     09 1F 02 F6 | 	mov	local01, arg01
1b52c     09 21 02 F6 | 	mov	local02, arg01
1b530     97 06 48 FB | 	callpa	#(@LR__2461-@LR__2460)>>2,fcache_load_ptr_
1b534                 | LR__2460
1b534     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b538     01 20 06 51 |  if_ne	add	local02, #1
1b53c     F4 FF 9F 5D |  if_ne	jmp	#LR__2460
1b540                 | LR__2461
1b540     09 21 82 F1 | 	sub	local02, arg01
1b544     10 FB 01 F6 | 	mov	result1, local02
1b548     FD 20 0A F6 | 	mov	local02, result1 wz
1b54c     43 01 00 AF 
1b550     B3 FA 05 A6 |  if_e	mov	result1, ##@LR__4288
1b554     7C 00 90 AD |  if_e	jmp	#LR__2466
1b558     00 22 06 F6 | 	mov	local03, #0
1b55c     10 25 02 F6 | 	mov	local04, local02
1b560                 | LR__2462
1b560     12 23 52 F2 | 	cmps	local03, local04 wc
1b564     68 00 90 3D |  if_ae	jmp	#LR__2465
1b568     11 17 02 F6 | 	mov	arg03, local03
1b56c     0F 17 02 F1 | 	add	arg03, local01
1b570     0B 17 C2 FA | 	rdbyte	arg03, arg03
1b574     20 16 0E F2 | 	cmp	arg03, #32 wz
1b578     4C 00 90 AD |  if_e	jmp	#LR__2464
1b57c     10 13 02 F6 | 	mov	arg01, local02
1b580     11 13 82 F1 | 	sub	arg01, local03
1b584     02 12 06 F1 | 	add	arg01, #2
1b588     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
1b58c     FD 26 0A F6 | 	mov	local05, result1 wz
1b590     2C 00 90 AD |  if_e	jmp	#LR__2463
1b594     11 15 02 F6 | 	mov	arg02, local03
1b598     0F 15 02 F1 | 	add	arg02, local01
1b59c     10 17 02 F6 | 	mov	arg03, local02
1b5a0     11 17 82 F1 | 	sub	arg03, local03
1b5a4     13 13 02 F6 | 	mov	arg01, local05
1b5a8     10 DB BF FD | 	call	#__system____builtin_memmove
1b5ac     11 21 82 F1 | 	sub	local02, local03
1b5b0     13 21 02 F1 | 	add	local02, local05
1b5b4     10 01 48 FC | 	wrbyte	#0, local02
1b5b8     13 FB 01 F6 | 	mov	result1, local05
1b5bc     14 00 90 FD | 	jmp	#LR__2466
1b5c0                 | LR__2463
1b5c0     13 FB 01 F6 | 	mov	result1, local05
1b5c4     0C 00 90 FD | 	jmp	#LR__2466
1b5c8                 | LR__2464
1b5c8     01 22 06 F1 | 	add	local03, #1
1b5cc     90 FF 9F FD | 	jmp	#LR__2462
1b5d0                 | LR__2465
1b5d0     0F FB 01 F6 | 	mov	result1, local01
1b5d4                 | LR__2466
1b5d4     A7 F0 03 F6 | 	mov	ptra, fp
1b5d8     B2 00 A0 FD | 	call	#popregs_
1b5dc                 | __system__LTrim_S_ret
1b5dc     2D 00 64 FD | 	ret
1b5e0                 | 
1b5e0                 | __system__RTrim_S
1b5e0     04 4A 05 F6 | 	mov	COUNT_, #4
1b5e4     A8 00 A0 FD | 	call	#pushregs_
1b5e8     09 1F 02 F6 | 	mov	local01, arg01
1b5ec     09 21 02 F6 | 	mov	local02, arg01
1b5f0     97 06 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
1b5f4                 | LR__2470
1b5f4     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b5f8     01 20 06 51 |  if_ne	add	local02, #1
1b5fc     F4 FF 9F 5D |  if_ne	jmp	#LR__2470
1b600                 | LR__2471
1b600     09 21 82 F1 | 	sub	local02, arg01
1b604     10 FB 01 F6 | 	mov	result1, local02
1b608     FD 20 0A F6 | 	mov	local02, result1 wz
1b60c     43 01 00 AF 
1b610     B4 FA 05 A6 |  if_e	mov	result1, ##@LR__4289
1b614     74 00 90 AD |  if_e	jmp	#LR__2475
1b618     10 23 02 F6 | 	mov	local03, local02
1b61c     01 22 86 F1 | 	sub	local03, #1
1b620                 | LR__2472
1b620     11 15 02 F6 | 	mov	arg02, local03
1b624     0F 15 02 F1 | 	add	arg02, local01
1b628     0A 21 C2 FA | 	rdbyte	local02, arg02
1b62c     20 20 0E F2 | 	cmp	local02, #32 wz
1b630     44 00 90 AD |  if_e	jmp	#LR__2474
1b634     11 13 02 F6 | 	mov	arg01, local03
1b638     02 12 06 F1 | 	add	arg01, #2
1b63c     14 19 B0 FD | 	call	#__system___gc_alloc_managed
1b640     FD 24 0A F6 | 	mov	local04, result1 wz
1b644     28 00 90 AD |  if_e	jmp	#LR__2473
1b648     11 17 02 F6 | 	mov	arg03, local03
1b64c     01 16 06 F1 | 	add	arg03, #1
1b650     12 13 02 F6 | 	mov	arg01, local04
1b654     0F 15 02 F6 | 	mov	arg02, local01
1b658     60 DA BF FD | 	call	#__system____builtin_memmove
1b65c     01 22 06 F1 | 	add	local03, #1
1b660     12 23 02 F1 | 	add	local03, local04
1b664     11 01 48 FC | 	wrbyte	#0, local03
1b668     12 FB 01 F6 | 	mov	result1, local04
1b66c     1C 00 90 FD | 	jmp	#LR__2475
1b670                 | LR__2473
1b670     12 FB 01 F6 | 	mov	result1, local04
1b674     14 00 90 FD | 	jmp	#LR__2475
1b678                 | LR__2474
1b678     01 22 86 F1 | 	sub	local03, #1
1b67c     00 22 56 F2 | 	cmps	local03, #0 wc
1b680     9C FF 9F 3D |  if_ae	jmp	#LR__2472
1b684     43 01 00 FF 
1b688     B5 FA 05 F6 | 	mov	result1, ##@LR__4290
1b68c                 | LR__2475
1b68c     A7 F0 03 F6 | 	mov	ptra, fp
1b690     B2 00 A0 FD | 	call	#popregs_
1b694                 | __system__RTrim_S_ret
1b694     2D 00 64 FD | 	ret
1b698                 | 
1b698                 | __system__Instr
1b698     07 4A 05 F6 | 	mov	COUNT_, #7
1b69c     A8 00 A0 FD | 	call	#pushregs_
1b6a0     09 1F 02 F6 | 	mov	local01, arg01
1b6a4     0A 21 02 F6 | 	mov	local02, arg02
1b6a8     0B 23 02 F6 | 	mov	local03, arg03
1b6ac     11 13 02 F6 | 	mov	arg01, local03
1b6b0     09 25 02 F6 | 	mov	local04, arg01
1b6b4     97 06 48 FB | 	callpa	#(@LR__2481-@LR__2480)>>2,fcache_load_ptr_
1b6b8                 | LR__2480
1b6b8     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b6bc     01 24 06 51 |  if_ne	add	local04, #1
1b6c0     F4 FF 9F 5D |  if_ne	jmp	#LR__2480
1b6c4                 | LR__2481
1b6c4     09 25 82 F1 | 	sub	local04, arg01
1b6c8     12 27 02 F6 | 	mov	local05, local04
1b6cc     10 13 02 F6 | 	mov	arg01, local02
1b6d0     09 25 02 F6 | 	mov	local04, arg01
1b6d4     97 06 48 FB | 	callpa	#(@LR__2483-@LR__2482)>>2,fcache_load_ptr_
1b6d8                 | LR__2482
1b6d8     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b6dc     01 24 06 51 |  if_ne	add	local04, #1
1b6e0     F4 FF 9F 5D |  if_ne	jmp	#LR__2482
1b6e4                 | LR__2483
1b6e4     09 25 82 F1 | 	sub	local04, arg01
1b6e8     12 FB 01 F6 | 	mov	result1, local04
1b6ec     FD 18 0A F6 | 	mov	arg04, result1 wz
1b6f0     00 FA 05 A6 |  if_e	mov	result1, #0
1b6f4     98 00 90 AD |  if_e	jmp	#LR__2487
1b6f8     00 26 0E F2 | 	cmp	local05, #0 wz
1b6fc     00 FA 05 A6 |  if_e	mov	result1, #0
1b700     8C 00 90 AD |  if_e	jmp	#LR__2487
1b704     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
1b708     00 FA 05 16 |  if_a	mov	result1, #0
1b70c     80 00 90 1D |  if_a	jmp	#LR__2487
1b710     01 1E 56 F2 | 	cmps	local01, #1 wc
1b714     01 1E 06 C6 |  if_b	mov	local01, #1
1b718     11 29 C2 FA | 	rdbyte	local06, local03
1b71c     01 26 0E F2 | 	cmp	local05, #1 wz
1b720     18 00 90 5D |  if_ne	jmp	#LR__2484
1b724     10 13 02 F6 | 	mov	arg01, local02
1b728     14 15 02 F6 | 	mov	arg02, local06
1b72c     0F 17 02 F6 | 	mov	arg03, local01
1b730     00 18 06 F6 | 	mov	arg04, #0
1b734     B8 33 B0 FD | 	call	#__system____ScanForChar
1b738     54 00 90 FD | 	jmp	#LR__2487
1b73c                 | LR__2484
1b73c     0F 2B 02 F6 | 	mov	local07, local01
1b740                 | LR__2485
1b740     10 13 02 F6 | 	mov	arg01, local02
1b744     14 15 02 F6 | 	mov	arg02, local06
1b748     15 17 02 F6 | 	mov	arg03, local07
1b74c     00 18 06 F6 | 	mov	arg04, #0
1b750     9C 33 B0 FD | 	call	#__system____ScanForChar
1b754     FD 2A 0A F6 | 	mov	local07, result1 wz
1b758     30 00 90 AD |  if_e	jmp	#LR__2486
1b75c     13 17 02 F6 | 	mov	arg03, local05
1b760     10 13 02 F6 | 	mov	arg01, local02
1b764     15 15 02 F6 | 	mov	arg02, local07
1b768     58 FB BF FD | 	call	#__system__Mid_S
1b76c     FD 12 02 F6 | 	mov	arg01, result1
1b770     11 15 02 F6 | 	mov	arg02, local03
1b774     4C DA BF FD | 	call	#__system___string_cmp
1b778     00 FA 0D F2 | 	cmp	result1, #0 wz
1b77c     15 FB 01 A6 |  if_e	mov	result1, local07
1b780     0C 00 90 AD |  if_e	jmp	#LR__2487
1b784     13 2B 02 F1 | 	add	local07, local05
1b788     B4 FF 9F FD | 	jmp	#LR__2485
1b78c                 | LR__2486
1b78c     00 FA 05 F6 | 	mov	result1, #0
1b790                 | LR__2487
1b790     A7 F0 03 F6 | 	mov	ptra, fp
1b794     B2 00 A0 FD | 	call	#popregs_
1b798                 | __system__Instr_ret
1b798     2D 00 64 FD | 	ret
1b79c                 | 
1b79c                 | __system___strerror
1b79c     00 12 56 F2 | 	cmps	arg01, #0 wc
1b7a0     08 00 90 CD |  if_b	jmp	#LR__2490
1b7a4     1A 12 56 F2 | 	cmps	arg01, #26 wc
1b7a8     04 00 90 CD |  if_b	jmp	#LR__2491
1b7ac                 | LR__2490
1b7ac     19 12 06 F6 | 	mov	arg01, #25
1b7b0                 | LR__2491
1b7b0     02 12 66 F0 | 	shl	arg01, #2
1b7b4     01 00 00 FF 
1b7b8     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
1b7bc     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1b7c0     09 FB 01 FB | 	rdlong	result1, arg01
1b7c4     01 00 00 FF 
1b7c8     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
1b7cc                 | __system___strerror_ret
1b7cc     2D 00 64 FD | 	ret
1b7d0                 | 
1b7d0                 | __system___int64_shl
1b7d0     20 16 CE F7 | 	test	arg03, #32 wz
1b7d4     09 15 02 56 |  if_ne	mov	arg02, arg01
1b7d8     00 12 06 56 |  if_ne	mov	arg01, #0
1b7dc     1F 16 CE F7 | 	test	arg03, #31 wz
1b7e0     18 00 90 AD |  if_e	jmp	#LR__2500
1b7e4     0B 15 62 F0 | 	shl	arg02, arg03
1b7e8     09 FB 01 F6 | 	mov	result1, arg01
1b7ec     0B FD 61 F6 | 	neg	result2, arg03
1b7f0     FE FA 41 F0 | 	shr	result1, result2
1b7f4     FD 14 42 F5 | 	or	arg02, result1
1b7f8     0B 13 62 F0 | 	shl	arg01, arg03
1b7fc                 | LR__2500
1b7fc     0A FD 01 F6 | 	mov	result2, arg02
1b800     09 FB 01 F6 | 	mov	result1, arg01
1b804                 | __system___int64_shl_ret
1b804     2D 00 64 FD | 	ret
1b808                 | 
1b808                 | __system___usepins
1b808     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b80c     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b810     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
1b814     00 13 CA F7 | 	test	arg01, _var01 wz
1b818     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
1b81c     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1b820     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
1b824     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1b828     00 FA 05 56 |  if_ne	mov	result1, #0
1b82c     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1b830     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b834     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1b838     09 03 42 F5 | 	or	_var02, arg01
1b83c     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1b840     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b844     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1b848     0A 03 42 F5 | 	or	_var02, arg02
1b84c     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1b850     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1b854     01 FA 65 F6 | 	neg	result1, #1
1b858                 | __system___usepins_ret
1b858     2D 00 64 FD | 	ret
1b85c                 | 
1b85c                 | __system___freepins
1b85c     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b860     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b864     09 01 22 F5 | 	andn	_var01, arg01
1b868     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1b86c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b870     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b874     0A 01 22 F5 | 	andn	_var01, arg02
1b878     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1b87c     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1b880                 | __system___freepins_ret
1b880     2D 00 64 FD | 	ret
1b884                 | 
1b884                 | __system___float_fromuns
1b884     09 17 0A F6 | 	mov	arg03, arg01 wz
1b888     0B FB 01 A6 |  if_e	mov	result1, arg03
1b88c     24 00 90 AD |  if_e	jmp	#LR__2510
1b890     0B 15 92 F7 | 	encod	arg02, arg03 wc
1b894     01 14 06 C1 |  if_b	add	arg02, #1
1b898     01 14 86 F1 | 	sub	arg02, #1
1b89c     1F 12 06 F6 | 	mov	arg01, #31
1b8a0     0A 13 82 F1 | 	sub	arg01, arg02
1b8a4     09 17 62 F0 | 	shl	arg03, arg01
1b8a8     02 16 46 F0 | 	shr	arg03, #2
1b8ac     00 12 06 F6 | 	mov	arg01, #0
1b8b0     4C 09 B0 FD | 	call	#__system___float_Pack
1b8b4                 | LR__2510
1b8b4                 | __system___float_fromuns_ret
1b8b4     2D 00 64 FD | 	ret
1b8b8                 | 
1b8b8                 | __system___float_add
1b8b8     0F 4A 05 F6 | 	mov	COUNT_, #15
1b8bc     A8 00 A0 FD | 	call	#pushregs_
1b8c0     09 1F 02 F6 | 	mov	local01, arg01
1b8c4     0A 21 02 F6 | 	mov	local02, arg02
1b8c8     00 22 06 F6 | 	mov	local03, #0
1b8cc     0F 25 02 F6 | 	mov	local04, local01
1b8d0     12 27 02 F6 | 	mov	local05, local04
1b8d4     16 26 46 F7 | 	zerox	local05, #22
1b8d8     12 29 02 F6 | 	mov	local06, local04
1b8dc     01 28 66 F0 | 	shl	local06, #1
1b8e0     18 28 46 F0 | 	shr	local06, #24
1b8e4     1F 24 46 F0 | 	shr	local04, #31
1b8e8     10 13 02 F6 | 	mov	arg01, local02
1b8ec     09 FB 01 F6 | 	mov	result1, arg01
1b8f0     FD 2A 02 F6 | 	mov	local07, result1
1b8f4     15 2D 02 F6 | 	mov	local08, local07
1b8f8     16 2C 46 F7 | 	zerox	local08, #22
1b8fc     15 2F 02 F6 | 	mov	local09, local07
1b900     01 2E 66 F0 | 	shl	local09, #1
1b904     18 2E 46 F0 | 	shr	local09, #24
1b908     17 31 02 F6 | 	mov	local10, local09
1b90c     1F 2A 46 F0 | 	shr	local07, #31
1b910     00 32 06 F6 | 	mov	local11, #0
1b914     00 34 06 F6 | 	mov	local12, #0
1b918     18 29 12 F2 | 	cmp	local06, local10 wc
1b91c     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1b920     2C 00 90 1D |  if_a	jmp	#LR__2520
1b924     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1b928     24 00 90 3D |  if_ae	jmp	#LR__2520
1b92c     13 37 02 F6 | 	mov	local13, local05
1b930     16 27 02 F6 | 	mov	local05, local08
1b934     1B 2D 02 F6 | 	mov	local08, local13
1b938     14 37 02 F6 | 	mov	local13, local06
1b93c     18 29 02 F6 | 	mov	local06, local10
1b940     1B 31 02 F6 | 	mov	local10, local13
1b944     12 37 02 F6 | 	mov	local13, local04
1b948     15 25 02 F6 | 	mov	local04, local07
1b94c     1B 2B 02 F6 | 	mov	local07, local13
1b950                 | LR__2520
1b950     FF 28 0E F2 | 	cmp	local06, #255 wz
1b954     70 01 90 AD |  if_e	jmp	#LR__2535
1b958     00 28 0E F2 | 	cmp	local06, #0 wz
1b95c     AC 01 90 AD |  if_e	jmp	#LR__2537
1b960     17 26 26 F4 | 	bith	local05, #23
1b964                 | LR__2521
1b964     00 30 0E F2 | 	cmp	local10, #0 wz
1b968     F0 01 90 AD |  if_e	jmp	#LR__2541
1b96c     17 2C 26 F4 | 	bith	local08, #23
1b970                 | LR__2522
1b970     7F 28 86 F1 | 	sub	local06, #127
1b974     7F 30 86 F1 | 	sub	local10, #127
1b978     14 39 02 F6 | 	mov	local14, local06
1b97c     18 39 82 F1 | 	sub	local14, local10
1b980     97 14 48 FB | 	callpa	#(@LR__2524-@LR__2523)>>2,fcache_load_ptr_
1b984                 | LR__2523
1b984     20 38 56 F2 | 	cmps	local14, #32 wc
1b988     20 00 90 CD |  if_b	jmp	#LR__2525
1b98c     16 2F 02 F6 | 	mov	local09, local08
1b990     00 32 0E F2 | 	cmp	local11, #0 wz
1b994     6F 32 62 FD | 	wrnz	local11
1b998     19 2F 42 F5 | 	or	local09, local11
1b99c     17 33 02 F6 | 	mov	local11, local09
1b9a0     00 2C 06 F6 | 	mov	local08, #0
1b9a4     20 38 86 F1 | 	sub	local14, #32
1b9a8     D8 FF 9F FD | 	jmp	#LR__2523
1b9ac                 | LR__2524
1b9ac                 | LR__2525
1b9ac     00 38 0E F2 | 	cmp	local14, #0 wz
1b9b0     38 00 90 AD |  if_e	jmp	#LR__2526
1b9b4     16 37 02 F6 | 	mov	local13, local08
1b9b8     20 30 06 F6 | 	mov	local10, #32
1b9bc     1C 31 82 F1 | 	sub	local10, local14
1b9c0     18 37 62 F0 | 	shl	local13, local10
1b9c4     19 31 02 F6 | 	mov	local10, local11
1b9c8     20 2E 06 F6 | 	mov	local09, #32
1b9cc     1C 2F 82 F1 | 	sub	local09, local14
1b9d0     17 31 6A F0 | 	shl	local10, local09 wz
1b9d4     1C 33 42 F0 | 	shr	local11, local14
1b9d8     1C 2D 42 F0 | 	shr	local08, local14
1b9dc     1B 33 42 F5 | 	or	local11, local13
1b9e0     00 3A 06 F6 | 	mov	local15, #0
1b9e4     01 3A 06 56 |  if_ne	mov	local15, #1
1b9e8     1D 33 42 F5 | 	or	local11, local15
1b9ec                 | LR__2526
1b9ec     12 3B 02 F6 | 	mov	local15, local04
1b9f0     15 3B 62 F5 | 	xor	local15, local07
1b9f4     01 3A CE F7 | 	test	local15, #1 wz
1b9f8     18 00 90 AD |  if_e	jmp	#LR__2527
1b9fc     16 2D 22 F6 | 	not	local08, local08
1ba00     19 33 22 F6 | 	not	local11, local11
1ba04     01 32 0E F1 | 	add	local11, #1 wz
1ba08     00 3A 06 F6 | 	mov	local15, #0
1ba0c     01 3A 06 A6 |  if_e	mov	local15, #1
1ba10     1D 2D 02 F1 | 	add	local08, local15
1ba14                 | LR__2527
1ba14     19 35 12 F1 | 	add	local12, local11 wc
1ba18     16 27 22 F1 | 	addx	local05, local08
1ba1c     00 26 56 F2 | 	cmps	local05, #0 wc
1ba20     1C 00 90 3D |  if_ae	jmp	#LR__2528
1ba24     01 24 66 F5 | 	xor	local04, #1
1ba28     13 27 22 F6 | 	not	local05, local05
1ba2c     1A 35 22 F6 | 	not	local12, local12
1ba30     01 34 0E F1 | 	add	local12, #1 wz
1ba34     00 3A 06 F6 | 	mov	local15, #0
1ba38     01 3A 06 A6 |  if_e	mov	local15, #1
1ba3c     1D 27 02 F1 | 	add	local05, local15
1ba40                 | LR__2528
1ba40     00 80 00 FF 
1ba44     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1ba48     28 00 90 CD |  if_b	jmp	#LR__2529
1ba4c     01 28 06 F1 | 	add	local06, #1
1ba50     1A 39 02 F6 | 	mov	local14, local12
1ba54     01 38 06 F5 | 	and	local14, #1
1ba58     01 34 46 F0 | 	shr	local12, #1
1ba5c     13 3B 02 F6 | 	mov	local15, local05
1ba60     1F 3A 66 F0 | 	shl	local15, #31
1ba64     1D 35 42 F5 | 	or	local12, local15
1ba68     1C 35 42 F5 | 	or	local12, local14
1ba6c     01 26 46 F0 | 	shr	local05, #1
1ba70     3C 00 90 FD | 	jmp	#LR__2534
1ba74                 | LR__2529
1ba74     00 40 00 FF 
1ba78     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1ba7c     30 00 90 3D |  if_ae	jmp	#LR__2533
1ba80     00 26 0E F2 | 	cmp	local05, #0 wz
1ba84     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1ba88     08 24 46 A5 |  if_e	or	local04, #8
1ba8c     01 24 26 A5 |  if_e	andn	local04, #1
1ba90     1C 00 90 AD |  if_e	jmp	#LR__2532
1ba94                 | LR__2530
1ba94     00 40 00 FF 
1ba98     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1ba9c     10 00 90 3D |  if_ae	jmp	#LR__2531
1baa0     1A 35 12 F1 | 	add	local12, local12 wc
1baa4     13 27 22 F1 | 	addx	local05, local05
1baa8     01 28 86 F1 | 	sub	local06, #1
1baac     E4 FF 9F FD | 	jmp	#LR__2530
1bab0                 | LR__2531
1bab0                 | LR__2532
1bab0                 | LR__2533
1bab0                 | LR__2534
1bab0     13 13 02 F6 | 	mov	arg01, local05
1bab4     1A 15 02 F6 | 	mov	arg02, local12
1bab8     14 17 02 F6 | 	mov	arg03, local06
1babc     12 19 02 F6 | 	mov	arg04, local04
1bac0     70 34 B0 FD | 	call	#__system__pack_0491
1bac4     DC 00 90 FD | 	jmp	#LR__2545
1bac8                 | LR__2535
1bac8     FF 30 0E F2 | 	cmp	local10, #255 wz
1bacc     10 00 90 5D |  if_ne	jmp	#LR__2536
1bad0     12 2B 0A F2 | 	cmp	local07, local04 wz
1bad4     00 F8 3F 5F 
1bad8     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1badc     C4 00 90 5D |  if_ne	jmp	#LR__2545
1bae0                 | LR__2536
1bae0     00 26 0E F2 | 	cmp	local05, #0 wz
1bae4     00 F8 3F 5F 
1bae8     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1baec     B4 00 90 5D |  if_ne	jmp	#LR__2545
1baf0     1A 15 02 F6 | 	mov	arg02, local12
1baf4     14 17 02 F6 | 	mov	arg03, local06
1baf8     12 19 02 F6 | 	mov	arg04, local04
1bafc     02 18 46 F5 | 	or	arg04, #2
1bb00     13 13 02 F6 | 	mov	arg01, local05
1bb04     2C 34 B0 FD | 	call	#__system__pack_0491
1bb08     98 00 90 FD | 	jmp	#LR__2545
1bb0c                 | LR__2537
1bb0c     00 26 0E F2 | 	cmp	local05, #0 wz
1bb10     28 00 90 AD |  if_e	jmp	#LR__2540
1bb14     01 26 66 F0 | 	shl	local05, #1
1bb18     97 0E 48 FB | 	callpa	#(@LR__2539-@LR__2538)>>2,fcache_load_ptr_
1bb1c                 | LR__2538
1bb1c     00 40 00 FF 
1bb20     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1bb24     14 3B 02 C6 |  if_b	mov	local15, local06
1bb28     01 3A 86 C1 |  if_b	sub	local15, #1
1bb2c     1D 29 02 C6 |  if_b	mov	local06, local15
1bb30     01 26 66 C0 |  if_b	shl	local05, #1
1bb34     E4 FF 9F CD |  if_b	jmp	#LR__2538
1bb38                 | LR__2539
1bb38     28 FE 9F FD | 	jmp	#LR__2521
1bb3c                 | LR__2540
1bb3c     15 25 02 F5 | 	and	local04, local07
1bb40     12 19 02 F6 | 	mov	arg04, local04
1bb44     08 18 46 F5 | 	or	arg04, #8
1bb48     00 12 06 F6 | 	mov	arg01, #0
1bb4c     00 14 06 F6 | 	mov	arg02, #0
1bb50     00 16 06 F6 | 	mov	arg03, #0
1bb54     DC 33 B0 FD | 	call	#__system__pack_0491
1bb58     48 00 90 FD | 	jmp	#LR__2545
1bb5c                 | LR__2541
1bb5c     00 2C 0E F2 | 	cmp	local08, #0 wz
1bb60     28 00 90 AD |  if_e	jmp	#LR__2544
1bb64     01 2C 66 F0 | 	shl	local08, #1
1bb68     97 0E 48 FB | 	callpa	#(@LR__2543-@LR__2542)>>2,fcache_load_ptr_
1bb6c                 | LR__2542
1bb6c     00 40 00 FF 
1bb70     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1bb74     18 3B 02 C6 |  if_b	mov	local15, local10
1bb78     01 3A 86 C1 |  if_b	sub	local15, #1
1bb7c     1D 31 02 C6 |  if_b	mov	local10, local15
1bb80     01 2C 66 C0 |  if_b	shl	local08, #1
1bb84     E4 FF 9F CD |  if_b	jmp	#LR__2542
1bb88                 | LR__2543
1bb88     E4 FD 9F FD | 	jmp	#LR__2522
1bb8c                 | LR__2544
1bb8c     7F 28 86 F1 | 	sub	local06, #127
1bb90     13 13 02 F6 | 	mov	arg01, local05
1bb94     1A 15 02 F6 | 	mov	arg02, local12
1bb98     14 17 02 F6 | 	mov	arg03, local06
1bb9c     12 19 02 F6 | 	mov	arg04, local04
1bba0     90 33 B0 FD | 	call	#__system__pack_0491
1bba4                 | LR__2545
1bba4     A7 F0 03 F6 | 	mov	ptra, fp
1bba8     B2 00 A0 FD | 	call	#popregs_
1bbac                 | __system___float_add_ret
1bbac     2D 00 64 FD | 	ret
1bbb0                 | 
1bbb0                 | __system___float_sqrt
1bbb0     04 4A 05 F6 | 	mov	COUNT_, #4
1bbb4     A8 00 A0 FD | 	call	#pushregs_
1bbb8     09 1F 02 F6 | 	mov	local01, arg01
1bbbc     09 FB 01 F6 | 	mov	result1, arg01
1bbc0     FD 20 02 F6 | 	mov	local02, result1
1bbc4     10 23 02 F6 | 	mov	local03, local02
1bbc8     16 22 46 F7 | 	zerox	local03, #22
1bbcc     10 25 02 F6 | 	mov	local04, local02
1bbd0     01 24 66 F0 | 	shl	local04, #1
1bbd4     18 24 4E F0 | 	shr	local04, #24 wz
1bbd8     1F 20 46 F0 | 	shr	local02, #31
1bbdc     70 00 90 AD |  if_e	jmp	#LR__2551
1bbe0     17 22 26 F4 | 	bith	local03, #23
1bbe4                 | LR__2550
1bbe4     00 20 0E F2 | 	cmp	local02, #0 wz
1bbe8     00 F8 3F 5F 
1bbec     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1bbf0     88 00 90 5D |  if_ne	jmp	#LR__2554
1bbf4     FF 24 0E F2 | 	cmp	local04, #255 wz
1bbf8     0F FB 01 A6 |  if_e	mov	result1, local01
1bbfc     7C 00 90 AD |  if_e	jmp	#LR__2554
1bc00     7F 24 86 F1 | 	sub	local04, #127
1bc04     01 24 CE F7 | 	test	local04, #1 wz
1bc08     01 22 66 50 |  if_ne	shl	local03, #1
1bc0c     05 22 66 F0 | 	shl	local03, #5
1bc10     11 01 38 FD | 	qsqrt	#0, local03
1bc14     01 24 86 51 |  if_ne	sub	local04, #1
1bc18     12 25 52 F6 | 	abs	local04, local04 wc
1bc1c     01 24 46 F0 | 	shr	local04, #1
1bc20     12 17 82 F6 | 	negc	arg03, local04
1bc24     10 19 02 F6 | 	mov	arg04, local02
1bc28     18 12 62 FD | 	getqx	arg01
1bc2c     09 15 02 F6 | 	mov	arg02, arg01
1bc30     19 14 66 F0 | 	shl	arg02, #25
1bc34     07 12 46 F0 | 	shr	arg01, #7
1bc38     00 80 00 FF 
1bc3c     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1bc40     01 16 06 31 |  if_ae	add	arg03, #1
1bc44     01 12 46 30 |  if_ae	shr	arg01, #1
1bc48     E8 32 B0 FD | 	call	#__system__pack_0491
1bc4c     2C 00 90 FD | 	jmp	#LR__2554
1bc50                 | LR__2551
1bc50     00 22 0E F2 | 	cmp	local03, #0 wz
1bc54     0F FB 01 A6 |  if_e	mov	result1, local01
1bc58     20 00 90 AD |  if_e	jmp	#LR__2554
1bc5c     01 22 66 F0 | 	shl	local03, #1
1bc60     97 0A 48 FB | 	callpa	#(@LR__2553-@LR__2552)>>2,fcache_load_ptr_
1bc64                 | LR__2552
1bc64     00 40 00 FF 
1bc68     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1bc6c     01 24 86 C1 |  if_b	sub	local04, #1
1bc70     01 22 66 C0 |  if_b	shl	local03, #1
1bc74     EC FF 9F CD |  if_b	jmp	#LR__2552
1bc78                 | LR__2553
1bc78     68 FF 9F FD | 	jmp	#LR__2550
1bc7c                 | LR__2554
1bc7c     A7 F0 03 F6 | 	mov	ptra, fp
1bc80     B2 00 A0 FD | 	call	#popregs_
1bc84                 | __system___float_sqrt_ret
1bc84     2D 00 64 FD | 	ret
1bc88                 | 
1bc88                 | __system___float_mul
1bc88     0B 4A 05 F6 | 	mov	COUNT_, #11
1bc8c     A8 00 A0 FD | 	call	#pushregs_
1bc90     09 1F 02 F6 | 	mov	local01, arg01
1bc94     0A 21 02 F6 | 	mov	local02, arg02
1bc98     0F 23 02 F6 | 	mov	local03, local01
1bc9c     11 25 02 F6 | 	mov	local04, local03
1bca0     16 24 46 F7 | 	zerox	local04, #22
1bca4     11 27 02 F6 | 	mov	local05, local03
1bca8     01 26 66 F0 | 	shl	local05, #1
1bcac     18 26 46 F0 | 	shr	local05, #24
1bcb0     1F 22 46 F0 | 	shr	local03, #31
1bcb4     10 FB 01 F6 | 	mov	result1, local02
1bcb8     FD 28 02 F6 | 	mov	local06, result1
1bcbc     14 2B 02 F6 | 	mov	local07, local06
1bcc0     16 2A 46 F7 | 	zerox	local07, #22
1bcc4     14 2D 02 F6 | 	mov	local08, local06
1bcc8     01 2C 66 F0 | 	shl	local08, #1
1bccc     18 2C 46 F0 | 	shr	local08, #24
1bcd0     1F 28 46 F0 | 	shr	local06, #31
1bcd4     14 23 62 F5 | 	xor	local03, local06
1bcd8     FF 26 0E F2 | 	cmp	local05, #255 wz
1bcdc     90 00 90 AD |  if_e	jmp	#LR__2563
1bce0     FF 2C 0E F2 | 	cmp	local08, #255 wz
1bce4     D8 00 90 AD |  if_e	jmp	#LR__2565
1bce8     00 26 0E F2 | 	cmp	local05, #0 wz
1bcec     0C 01 90 AD |  if_e	jmp	#LR__2566
1bcf0     17 24 26 F4 | 	bith	local04, #23
1bcf4                 | LR__2560
1bcf4     00 2C 0E F2 | 	cmp	local08, #0 wz
1bcf8     44 01 90 AD |  if_e	jmp	#LR__2570
1bcfc     17 2A 26 F4 | 	bith	local07, #23
1bd00                 | LR__2561
1bd00     12 21 02 F6 | 	mov	local02, local04
1bd04     04 20 66 F0 | 	shl	local02, #4
1bd08     15 29 02 F6 | 	mov	local06, local07
1bd0c     05 28 66 F0 | 	shl	local06, #5
1bd10     14 21 02 FD | 	qmul	local02, local06
1bd14     16 27 02 F1 | 	add	local05, local08
1bd18     FE 26 86 F1 | 	sub	local05, #254
1bd1c     13 2F 02 F6 | 	mov	local09, local05
1bd20     04 24 66 F0 | 	shl	local04, #4
1bd24     05 2A 66 F0 | 	shl	local07, #5
1bd28     18 30 62 FD | 	getqx	local10
1bd2c     15 25 02 FD | 	qmul	local04, local07
1bd30     19 32 62 FD | 	getqy	local11
1bd34     00 80 00 FF 
1bd38     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1bd3c     18 00 90 CD |  if_b	jmp	#LR__2562
1bd40     01 2E 06 F1 | 	add	local09, #1
1bd44     01 30 46 F0 | 	shr	local10, #1
1bd48     19 2D 02 F6 | 	mov	local08, local11
1bd4c     1F 2C 66 F0 | 	shl	local08, #31
1bd50     16 31 42 F5 | 	or	local10, local08
1bd54     01 32 46 F0 | 	shr	local11, #1
1bd58                 | LR__2562
1bd58     19 13 02 F6 | 	mov	arg01, local11
1bd5c     18 15 02 F6 | 	mov	arg02, local10
1bd60     17 17 02 F6 | 	mov	arg03, local09
1bd64     11 19 02 F6 | 	mov	arg04, local03
1bd68     C8 31 B0 FD | 	call	#__system__pack_0491
1bd6c     10 01 90 FD | 	jmp	#LR__2574
1bd70                 | LR__2563
1bd70     00 24 0E F2 | 	cmp	local04, #0 wz
1bd74     0F FB 01 56 |  if_ne	mov	result1, local01
1bd78     04 01 90 5D |  if_ne	jmp	#LR__2574
1bd7c     FF 2C 56 F2 | 	cmps	local08, #255 wc
1bd80     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1bd84     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1bd88     18 00 90 4D |  if_c_and_nz	jmp	#LR__2564
1bd8c     00 F8 3F CF 
1bd90     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1bd94     E8 00 90 CD |  if_b	jmp	#LR__2574
1bd98     00 2A 0E F2 | 	cmp	local07, #0 wz
1bd9c     10 FB 01 56 |  if_ne	mov	result1, local02
1bda0     DC 00 90 5D |  if_ne	jmp	#LR__2574
1bda4                 | LR__2564
1bda4     02 22 46 F5 | 	or	local03, #2
1bda8     00 12 06 F6 | 	mov	arg01, #0
1bdac     00 14 06 F6 | 	mov	arg02, #0
1bdb0     13 17 02 F6 | 	mov	arg03, local05
1bdb4     11 19 02 F6 | 	mov	arg04, local03
1bdb8     78 31 B0 FD | 	call	#__system__pack_0491
1bdbc     C0 00 90 FD | 	jmp	#LR__2574
1bdc0                 | LR__2565
1bdc0     00 26 0E F2 | 	cmp	local05, #0 wz
1bdc4     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1bdc8     00 F8 3F AF 
1bdcc     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1bdd0     AC 00 90 AD |  if_e	jmp	#LR__2574
1bdd4     00 2A 0E F2 | 	cmp	local07, #0 wz
1bdd8     10 FB 01 56 |  if_ne	mov	result1, local02
1bddc     A0 00 90 5D |  if_ne	jmp	#LR__2574
1bde0     16 17 02 F6 | 	mov	arg03, local08
1bde4     11 19 02 F6 | 	mov	arg04, local03
1bde8     02 18 46 F5 | 	or	arg04, #2
1bdec     00 12 06 F6 | 	mov	arg01, #0
1bdf0     00 14 06 F6 | 	mov	arg02, #0
1bdf4     3C 31 B0 FD | 	call	#__system__pack_0491
1bdf8     84 00 90 FD | 	jmp	#LR__2574
1bdfc                 | LR__2566
1bdfc     00 24 0E F2 | 	cmp	local04, #0 wz
1be00     20 00 90 AD |  if_e	jmp	#LR__2569
1be04     01 24 66 F0 | 	shl	local04, #1
1be08     97 0A 48 FB | 	callpa	#(@LR__2568-@LR__2567)>>2,fcache_load_ptr_
1be0c                 | LR__2567
1be0c     00 40 00 FF 
1be10     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1be14     01 26 86 C1 |  if_b	sub	local05, #1
1be18     01 24 66 C0 |  if_b	shl	local04, #1
1be1c     EC FF 9F CD |  if_b	jmp	#LR__2567
1be20                 | LR__2568
1be20     D0 FE 9F FD | 	jmp	#LR__2560
1be24                 | LR__2569
1be24     08 22 46 F5 | 	or	local03, #8
1be28     00 12 06 F6 | 	mov	arg01, #0
1be2c     00 14 06 F6 | 	mov	arg02, #0
1be30     00 16 06 F6 | 	mov	arg03, #0
1be34     11 19 02 F6 | 	mov	arg04, local03
1be38     F8 30 B0 FD | 	call	#__system__pack_0491
1be3c     40 00 90 FD | 	jmp	#LR__2574
1be40                 | LR__2570
1be40     00 2A 0E F2 | 	cmp	local07, #0 wz
1be44     20 00 90 AD |  if_e	jmp	#LR__2573
1be48     01 2A 66 F0 | 	shl	local07, #1
1be4c     97 0A 48 FB | 	callpa	#(@LR__2572-@LR__2571)>>2,fcache_load_ptr_
1be50                 | LR__2571
1be50     00 40 00 FF 
1be54     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1be58     01 2C 86 C1 |  if_b	sub	local08, #1
1be5c     01 2A 66 C0 |  if_b	shl	local07, #1
1be60     EC FF 9F CD |  if_b	jmp	#LR__2571
1be64                 | LR__2572
1be64     98 FE 9F FD | 	jmp	#LR__2561
1be68                 | LR__2573
1be68     08 22 46 F5 | 	or	local03, #8
1be6c     00 12 06 F6 | 	mov	arg01, #0
1be70     00 14 06 F6 | 	mov	arg02, #0
1be74     00 16 06 F6 | 	mov	arg03, #0
1be78     11 19 02 F6 | 	mov	arg04, local03
1be7c     B4 30 B0 FD | 	call	#__system__pack_0491
1be80                 | LR__2574
1be80     A7 F0 03 F6 | 	mov	ptra, fp
1be84     B2 00 A0 FD | 	call	#popregs_
1be88                 | __system___float_mul_ret
1be88     2D 00 64 FD | 	ret
1be8c                 | 
1be8c                 | __system___float_div
1be8c     0E 4A 05 F6 | 	mov	COUNT_, #14
1be90     A8 00 A0 FD | 	call	#pushregs_
1be94     09 23 02 F6 | 	mov	local03, arg01
1be98     0A 25 02 F6 | 	mov	local04, arg02
1be9c     11 27 02 F6 | 	mov	local05, local03
1bea0     13 29 02 F6 | 	mov	local06, local05
1bea4     16 28 46 F7 | 	zerox	local06, #22
1bea8     13 2B 02 F6 | 	mov	local07, local05
1beac     01 2A 66 F0 | 	shl	local07, #1
1beb0     18 2A 46 F0 | 	shr	local07, #24
1beb4     1F 26 46 F0 | 	shr	local05, #31
1beb8     12 FB 01 F6 | 	mov	result1, local04
1bebc     FD 2C 02 F6 | 	mov	local08, result1
1bec0     16 2F 02 F6 | 	mov	local09, local08
1bec4     16 2E 46 F7 | 	zerox	local09, #22
1bec8     16 31 02 F6 | 	mov	local10, local08
1becc     01 30 66 F0 | 	shl	local10, #1
1bed0     18 30 46 F0 | 	shr	local10, #24
1bed4     1F 2C 46 F0 | 	shr	local08, #31
1bed8     16 27 62 F5 | 	xor	local05, local08
1bedc     FF 2A 0E F2 | 	cmp	local07, #255 wz
1bee0     D4 00 90 AD |  if_e	jmp	#LR__2585
1bee4     FF 30 0E F2 | 	cmp	local10, #255 wz
1bee8     04 01 90 AD |  if_e	jmp	#LR__2586
1beec     00 2A 0E F2 | 	cmp	local07, #0 wz
1bef0     24 01 90 AD |  if_e	jmp	#LR__2587
1bef4     17 28 26 F4 | 	bith	local06, #23
1bef8                 | LR__2580
1bef8     00 30 0E F2 | 	cmp	local10, #0 wz
1befc     70 01 90 AD |  if_e	jmp	#LR__2591
1bf00     17 2E 26 F4 | 	bith	local09, #23
1bf04                 | LR__2581
1bf04     18 2B 82 F1 | 	sub	local07, local10
1bf08     15 33 02 F6 | 	mov	local11, local07
1bf0c     14 13 02 F6 | 	mov	arg01, local06
1bf10     02 12 46 F0 | 	shr	arg01, #2
1bf14     1E 28 66 F0 | 	shl	local06, #30
1bf18     14 15 02 F6 | 	mov	arg02, local06
1bf1c     17 17 02 F6 | 	mov	arg03, local09
1bf20     28 12 62 FD | 	setq	arg01
1bf24     0B 15 12 FD | 	qdiv	arg02, arg03
1bf28     00 34 06 F6 | 	mov	local12, #0
1bf2c     18 1E 62 FD | 	getqx	local01
1bf30     19 FC 61 FD | 	getqy	result2
1bf34     FE 20 02 F6 | 	mov	local02, result2
1bf38     0F 37 02 F6 | 	mov	local13, local01
1bf3c     00 20 4E F2 | 	cmps	local02, #0 wz
1bf40     1B 39 02 F6 | 	mov	local14, local13
1bf44     19 38 66 F0 | 	shl	local14, #25
1bf48     01 34 06 56 |  if_ne	mov	local12, #1
1bf4c     1A 39 42 F5 | 	or	local14, local12
1bf50     07 36 46 F0 | 	shr	local13, #7
1bf54     00 80 00 FF 
1bf58     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1bf5c     1C 00 90 CD |  if_b	jmp	#LR__2582
1bf60     01 32 06 F1 | 	add	local11, #1
1bf64     01 38 46 F0 | 	shr	local14, #1
1bf68     1B 35 02 F6 | 	mov	local12, local13
1bf6c     1F 34 66 F0 | 	shl	local12, #31
1bf70     1A 39 42 F5 | 	or	local14, local12
1bf74     01 36 46 F0 | 	shr	local13, #1
1bf78     24 00 90 FD | 	jmp	#LR__2584
1bf7c                 | LR__2582
1bf7c     00 40 00 FF 
1bf80     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1bf84     18 00 90 3D |  if_ae	jmp	#LR__2583
1bf88     01 32 86 F1 | 	sub	local11, #1
1bf8c     01 36 66 F0 | 	shl	local13, #1
1bf90     1C 35 02 F6 | 	mov	local12, local14
1bf94     1F 34 46 F0 | 	shr	local12, #31
1bf98     1A 37 42 F5 | 	or	local13, local12
1bf9c     01 38 66 F0 | 	shl	local14, #1
1bfa0                 | LR__2583
1bfa0                 | LR__2584
1bfa0     1B 13 02 F6 | 	mov	arg01, local13
1bfa4     1C 15 02 F6 | 	mov	arg02, local14
1bfa8     19 17 02 F6 | 	mov	arg03, local11
1bfac     13 19 02 F6 | 	mov	arg04, local05
1bfb0     80 2F B0 FD | 	call	#__system__pack_0491
1bfb4     F8 00 90 FD | 	jmp	#LR__2595
1bfb8                 | LR__2585
1bfb8     00 28 0E F2 | 	cmp	local06, #0 wz
1bfbc     11 FB 01 56 |  if_ne	mov	result1, local03
1bfc0     EC 00 90 5D |  if_ne	jmp	#LR__2595
1bfc4     FF 30 0E F2 | 	cmp	local10, #255 wz
1bfc8     00 F8 3F AF 
1bfcc     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1bfd0     DC 00 90 AD |  if_e	jmp	#LR__2595
1bfd4     02 26 46 F5 | 	or	local05, #2
1bfd8     00 12 06 F6 | 	mov	arg01, #0
1bfdc     00 14 06 F6 | 	mov	arg02, #0
1bfe0     15 17 02 F6 | 	mov	arg03, local07
1bfe4     13 19 02 F6 | 	mov	arg04, local05
1bfe8     48 2F B0 FD | 	call	#__system__pack_0491
1bfec     C0 00 90 FD | 	jmp	#LR__2595
1bff0                 | LR__2586
1bff0     00 2E 0E F2 | 	cmp	local09, #0 wz
1bff4     12 FB 01 56 |  if_ne	mov	result1, local04
1bff8     B4 00 90 5D |  if_ne	jmp	#LR__2595
1bffc     13 19 02 F6 | 	mov	arg04, local05
1c000     08 18 46 F5 | 	or	arg04, #8
1c004     00 12 06 F6 | 	mov	arg01, #0
1c008     00 14 06 F6 | 	mov	arg02, #0
1c00c     00 16 06 F6 | 	mov	arg03, #0
1c010     20 2F B0 FD | 	call	#__system__pack_0491
1c014     98 00 90 FD | 	jmp	#LR__2595
1c018                 | LR__2587
1c018     00 28 0E F2 | 	cmp	local06, #0 wz
1c01c     20 00 90 AD |  if_e	jmp	#LR__2590
1c020     01 28 66 F0 | 	shl	local06, #1
1c024     97 0A 48 FB | 	callpa	#(@LR__2589-@LR__2588)>>2,fcache_load_ptr_
1c028                 | LR__2588
1c028     00 40 00 FF 
1c02c     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1c030     01 2A 86 C1 |  if_b	sub	local07, #1
1c034     01 28 66 C0 |  if_b	shl	local06, #1
1c038     EC FF 9F CD |  if_b	jmp	#LR__2588
1c03c                 | LR__2589
1c03c     B8 FE 9F FD | 	jmp	#LR__2580
1c040                 | LR__2590
1c040     00 30 0E F2 | 	cmp	local10, #0 wz
1c044     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1c048     00 F8 3F AF 
1c04c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1c050     5C 00 90 AD |  if_e	jmp	#LR__2595
1c054     13 19 02 F6 | 	mov	arg04, local05
1c058     08 18 46 F5 | 	or	arg04, #8
1c05c     00 12 06 F6 | 	mov	arg01, #0
1c060     00 14 06 F6 | 	mov	arg02, #0
1c064     00 16 06 F6 | 	mov	arg03, #0
1c068     C8 2E B0 FD | 	call	#__system__pack_0491
1c06c     40 00 90 FD | 	jmp	#LR__2595
1c070                 | LR__2591
1c070     00 2E 0E F2 | 	cmp	local09, #0 wz
1c074     20 00 90 AD |  if_e	jmp	#LR__2594
1c078     01 2E 66 F0 | 	shl	local09, #1
1c07c     97 0A 48 FB | 	callpa	#(@LR__2593-@LR__2592)>>2,fcache_load_ptr_
1c080                 | LR__2592
1c080     00 40 00 FF 
1c084     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
1c088     01 30 86 C1 |  if_b	sub	local10, #1
1c08c     01 2E 66 C0 |  if_b	shl	local09, #1
1c090     EC FF 9F CD |  if_b	jmp	#LR__2592
1c094                 | LR__2593
1c094     6C FE 9F FD | 	jmp	#LR__2581
1c098                 | LR__2594
1c098     02 26 46 F5 | 	or	local05, #2
1c09c     00 12 06 F6 | 	mov	arg01, #0
1c0a0     00 14 06 F6 | 	mov	arg02, #0
1c0a4     00 16 06 F6 | 	mov	arg03, #0
1c0a8     13 19 02 F6 | 	mov	arg04, local05
1c0ac     84 2E B0 FD | 	call	#__system__pack_0491
1c0b0                 | LR__2595
1c0b0     A7 F0 03 F6 | 	mov	ptra, fp
1c0b4     B2 00 A0 FD | 	call	#popregs_
1c0b8                 | __system___float_div_ret
1c0b8     2D 00 64 FD | 	ret
1c0bc                 | 
1c0bc                 | __system___float_cmp
1c0bc     00 C0 3F FF 
1c0c0     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
1c0c4     00 C0 3F CF 
1c0c8     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1c0cc     0B FB 01 36 |  if_ae	mov	result1, arg03
1c0d0     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1c0d4     00 C0 7F FF 
1c0d8     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1c0dc     00 C0 7F CF 
1c0e0     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
1c0e4     0B FB 01 36 |  if_ae	mov	result1, arg03
1c0e8     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1c0ec     00 12 56 F2 | 	cmps	arg01, #0 wc
1c0f0     2C 00 90 3D |  if_ae	jmp	#LR__2600
1c0f4     00 14 56 F2 | 	cmps	arg02, #0 wc
1c0f8     0A FB 01 C6 |  if_b	mov	result1, arg02
1c0fc     09 FB 81 C1 |  if_b	sub	result1, arg01
1c100     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
1c104     00 14 0E F2 | 	cmp	arg02, #0 wz
1c108     00 00 40 AF 
1c10c     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1c110     00 FA 05 A6 |  if_e	mov	result1, #0
1c114     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1c118     01 FA 65 F6 | 	neg	result1, #1
1c11c     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1c120                 | LR__2600
1c120     00 14 56 F2 | 	cmps	arg02, #0 wc
1c124     1C 00 90 3D |  if_ae	jmp	#LR__2601
1c128     00 12 0E F2 | 	cmp	arg01, #0 wz
1c12c     00 00 40 AF 
1c130     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
1c134     00 FA 05 A6 |  if_e	mov	result1, #0
1c138     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1c13c     01 FA 05 F6 | 	mov	result1, #1
1c140     08 00 90 FD | 	jmp	#__system___float_cmp_ret
1c144                 | LR__2601
1c144     0A 13 82 F1 | 	sub	arg01, arg02
1c148     09 FB 01 F6 | 	mov	result1, arg01
1c14c                 | __system___float_cmp_ret
1c14c     2D 00 64 FD | 	ret
1c150                 | 
1c150                 | __system___float_tointeger
1c150     02 4A 05 F6 | 	mov	COUNT_, #2
1c154     A8 00 A0 FD | 	call	#pushregs_
1c158     50 00 B0 FD | 	call	#__system___float_Unpack
1c15c     FF FF 7F FF 
1c160     FF FD 55 F2 | 	cmps	result2, ##-1 wc
1c164     34 00 90 CD |  if_b	jmp	#LR__2610
1c168     1F FC 55 F2 | 	cmps	result2, #31 wc
1c16c     2C 00 90 3D |  if_ae	jmp	#LR__2610
1c170     02 FE 65 F0 | 	shl	result3, #2
1c174     1E 1E 06 F6 | 	mov	local01, #30
1c178     FE 1E 82 F1 | 	sub	local01, result2
1c17c     0F FF 41 F0 | 	shr	result3, local01
1c180     FF 20 02 F6 | 	mov	local02, result3
1c184     0A 21 02 F1 | 	add	local02, arg02
1c188     01 20 46 F0 | 	shr	local02, #1
1c18c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c190     10 21 62 56 |  if_ne	neg	local02, local02
1c194     10 FB 01 F6 | 	mov	result1, local02
1c198     04 00 90 FD | 	jmp	#LR__2611
1c19c                 | LR__2610
1c19c     00 FA 05 F6 | 	mov	result1, #0
1c1a0                 | LR__2611
1c1a0     A7 F0 03 F6 | 	mov	ptra, fp
1c1a4     B2 00 A0 FD | 	call	#popregs_
1c1a8                 | __system___float_tointeger_ret
1c1a8     2D 00 64 FD | 	ret
1c1ac                 | 
1c1ac                 | __system___float_Unpack
1c1ac     09 01 02 F6 | 	mov	_var01, arg01
1c1b0     1F 00 46 F0 | 	shr	_var01, #31
1c1b4     09 03 02 F6 | 	mov	_var02, arg01
1c1b8     01 02 66 F0 | 	shl	_var02, #1
1c1bc     18 02 4E F0 | 	shr	_var02, #24 wz
1c1c0     17 13 06 F4 | 	bitl	arg01, #279
1c1c4     06 12 66 50 |  if_ne	shl	arg01, #6
1c1c8     1D 12 26 54 |  if_ne	bith	arg01, #29
1c1cc     1C 00 90 5D |  if_ne	jmp	#LR__2620
1c1d0     09 05 92 F7 | 	encod	_var03, arg01 wc
1c1d4     01 04 06 C1 |  if_b	add	_var03, #1
1c1d8     17 04 86 F1 | 	sub	_var03, #23
1c1dc     02 03 02 F6 | 	mov	_var02, _var03
1c1e0     07 FC 05 F6 | 	mov	result2, #7
1c1e4     02 FD 81 F1 | 	sub	result2, _var03
1c1e8     FE 12 62 F0 | 	shl	arg01, result2
1c1ec                 | LR__2620
1c1ec     7F 02 86 F1 | 	sub	_var02, #127
1c1f0     09 FF 01 F6 | 	mov	result3, arg01
1c1f4     00 FB 01 F6 | 	mov	result1, _var01
1c1f8     01 FD 01 F6 | 	mov	result2, _var02
1c1fc                 | __system___float_Unpack_ret
1c1fc     2D 00 64 FD | 	ret
1c200                 | 
1c200                 | __system___float_Pack
1c200     00 00 06 F6 | 	mov	_var01, #0
1c204     00 16 0E F2 | 	cmp	arg03, #0 wz
1c208     8C 00 90 AD |  if_e	jmp	#LR__2631
1c20c     0B 03 92 F7 | 	encod	_var02, arg03 wc
1c210     01 02 06 C1 |  if_b	add	_var02, #1
1c214     21 00 06 F6 | 	mov	_var01, #33
1c218     01 01 82 F1 | 	sub	_var01, _var02
1c21c     00 17 62 F0 | 	shl	arg03, _var01
1c220     03 02 06 F6 | 	mov	_var02, #3
1c224     00 03 82 F1 | 	sub	_var02, _var01
1c228     01 15 02 F1 | 	add	arg02, _var02
1c22c     0A 05 02 F6 | 	mov	_var03, arg02
1c230     00 17 06 F1 | 	add	arg03, #256
1c234     0B 03 02 F6 | 	mov	_var02, arg03
1c238     FF 02 2E F5 | 	andn	_var02, #255 wz
1c23c     01 04 06 A1 |  if_e	add	_var03, #1
1c240     7F 04 06 F1 | 	add	_var03, #127
1c244     FF FF 7F FF 
1c248     E9 05 46 F3 | 	fges	_var03, ##-23
1c24c     FF 04 66 F3 | 	fles	_var03, #255
1c250     01 04 56 F2 | 	cmps	_var03, #1 wc
1c254     1C 00 90 3D |  if_ae	jmp	#LR__2630
1c258     01 16 46 F0 | 	shr	arg03, #1
1c25c     1F 02 C6 F9 | 	decod	_var02, #31
1c260     0B 03 02 F1 | 	add	_var02, arg03
1c264     02 05 62 F6 | 	neg	_var03, _var03
1c268     02 03 42 F0 | 	shr	_var02, _var03
1c26c     01 17 02 F6 | 	mov	arg03, _var02
1c270     00 04 06 F6 | 	mov	_var03, #0
1c274                 | LR__2630
1c274     09 FB 01 F6 | 	mov	result1, arg01
1c278     1F FA 65 F0 | 	shl	result1, #31
1c27c     02 03 02 F6 | 	mov	_var02, _var03
1c280     17 02 66 F0 | 	shl	_var02, #23
1c284     01 FB 41 F5 | 	or	result1, _var02
1c288     0B 07 02 F6 | 	mov	_var04, arg03
1c28c     09 06 46 F0 | 	shr	_var04, #9
1c290     03 FB 41 F5 | 	or	result1, _var04
1c294     04 00 90 FD | 	jmp	#__system___float_Pack_ret
1c298                 | LR__2631
1c298     00 FB 01 F6 | 	mov	result1, _var01
1c29c                 | __system___float_Pack_ret
1c29c     2D 00 64 FD | 	ret
1c2a0                 | 
1c2a0                 | __system___basic_print_float
1c2a0     05 4A 05 F6 | 	mov	COUNT_, #5
1c2a4     A8 00 A0 FD | 	call	#pushregs_
1c2a8     09 1F 02 F6 | 	mov	local01, arg01
1c2ac     0A 21 02 F6 | 	mov	local02, arg02
1c2b0     0B 23 0A F6 | 	mov	local03, arg03 wz
1c2b4     0C 25 02 F6 | 	mov	local04, arg04
1c2b8     14 00 90 5D |  if_ne	jmp	#LR__2640
1c2bc     23 24 0E F2 | 	cmp	local04, #35 wz
1c2c0     80 02 10 AF 
1c2c4     00 26 06 A6 |  if_e	mov	local05, ##537198592
1c2c8     1D 26 C6 59 |  if_ne	decod	local05, #29
1c2cc     13 23 02 F6 | 	mov	local03, local05
1c2d0                 | LR__2640
1c2d0     0F 13 02 F6 | 	mov	arg01, local01
1c2d4     40 27 B0 FD | 	call	#__system___gettxfunc
1c2d8     FD 26 0A F6 | 	mov	local05, result1 wz
1c2dc     00 FA 05 A6 |  if_e	mov	result1, #0
1c2e0     13 13 02 56 |  if_ne	mov	arg01, local05
1c2e4     11 15 02 56 |  if_ne	mov	arg02, local03
1c2e8     10 17 02 56 |  if_ne	mov	arg03, local02
1c2ec     12 19 02 56 |  if_ne	mov	arg04, local04
1c2f0     8C DF BF 5D |  if_ne	call	#__system___fmtfloat
1c2f4     A7 F0 03 F6 | 	mov	ptra, fp
1c2f8     B2 00 A0 FD | 	call	#popregs_
1c2fc                 | __system___basic_print_float_ret
1c2fc     2D 00 64 FD | 	ret
1c300                 | 
1c300                 | __system____builtin_atoi
1c300     07 4A 05 F6 | 	mov	COUNT_, #7
1c304     A8 00 A0 FD | 	call	#pushregs_
1c308                 | __system____builtin_atoi_enter
1c308     09 1F 02 F6 | 	mov	local01, arg01
1c30c     0A 21 02 F6 | 	mov	local02, arg02
1c310     00 22 06 F6 | 	mov	local03, #0
1c314     00 24 06 F6 | 	mov	local04, #0
1c318     00 26 06 F6 | 	mov	local05, #0
1c31c     97 08 48 FB | 	callpa	#(@LR__2651-@LR__2650)>>2,fcache_load_ptr_
1c320                 | LR__2650
1c320     0F 29 C2 FA | 	rdbyte	local06, local01
1c324     20 28 0E F2 | 	cmp	local06, #32 wz
1c328     01 1E 06 A1 |  if_e	add	local01, #1
1c32c     F0 FF 9F AD |  if_e	jmp	#LR__2650
1c330                 | LR__2651
1c330     0F 2B C2 FA | 	rdbyte	local07, local01
1c334                 | LR__2652
1c334     2D 2A 0E F2 | 	cmp	local07, #45 wz
1c338     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1c33c     18 00 90 5D |  if_ne	jmp	#LR__2653
1c340     01 1E 06 F1 | 	add	local01, #1
1c344     2D 2A 0E F2 | 	cmp	local07, #45 wz
1c348     01 28 06 A6 |  if_e	mov	local06, #1
1c34c     14 27 C2 A2 |  if_e	subr	local05, local06
1c350     0F 2B C2 FA | 	rdbyte	local07, local01
1c354     DC FF 9F FD | 	jmp	#LR__2652
1c358                 | LR__2653
1c358     97 48 48 FB | 	callpa	#(@LR__2661-@LR__2654)>>2,fcache_load_ptr_
1c35c                 | LR__2654
1c35c                 | LR__2655
1c35c     0F 2B C2 FA | 	rdbyte	local07, local01
1c360     5F 2A 0E F2 | 	cmp	local07, #95 wz
1c364     01 1E 06 F1 | 	add	local01, #1
1c368     F0 FF 9F AD |  if_e	jmp	#LR__2655
1c36c     30 2A 0E F2 | 	cmp	local07, #48 wz
1c370     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
1c374     00 24 06 A6 |  if_e	mov	local04, #0
1c378     60 00 90 AD |  if_e	jmp	#LR__2660
1c37c     31 2A 56 F2 | 	cmps	local07, #49 wc
1c380     18 00 90 CD |  if_b	jmp	#LR__2656
1c384     3A 2A 56 F2 | 	cmps	local07, #58 wc
1c388     15 25 02 C6 |  if_b	mov	local04, local07
1c38c     30 24 86 C1 |  if_b	sub	local04, #48
1c390     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1c394     0A 20 06 86 |  if_c_and_z	mov	local02, #10
1c398     40 00 90 CD |  if_b	jmp	#LR__2659
1c39c                 | LR__2656
1c39c     0B 20 56 F2 | 	cmps	local02, #11 wc
1c3a0     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
1c3a4     14 00 90 CD |  if_b	jmp	#LR__2657
1c3a8     67 2A 56 F2 | 	cmps	local07, #103 wc
1c3ac     61 2A 86 C1 |  if_b	sub	local07, #97
1c3b0     0A 24 06 C6 |  if_b	mov	local04, #10
1c3b4     15 25 02 C1 |  if_b	add	local04, local07
1c3b8     20 00 90 CD |  if_b	jmp	#LR__2658
1c3bc                 | LR__2657
1c3bc     0B 20 56 F2 | 	cmps	local02, #11 wc
1c3c0     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
1c3c4     24 00 90 CD |  if_b	jmp	#LR__2662
1c3c8     47 2A 56 F2 | 	cmps	local07, #71 wc
1c3cc     41 2A 86 C1 |  if_b	sub	local07, #65
1c3d0     0A 24 06 C6 |  if_b	mov	local04, #10
1c3d4     15 25 02 C1 |  if_b	add	local04, local07
1c3d8     10 00 90 3D |  if_ae	jmp	#LR__2662
1c3dc                 | LR__2658
1c3dc                 | LR__2659
1c3dc                 | LR__2660
1c3dc     11 21 02 FD | 	qmul	local02, local03
1c3e0     18 22 62 FD | 	getqx	local03
1c3e4     12 23 02 F1 | 	add	local03, local04
1c3e8     70 FF 9F FD | 	jmp	#LR__2654
1c3ec                 | LR__2661
1c3ec                 | LR__2662
1c3ec     00 20 0E F2 | 	cmp	local02, #0 wz
1c3f0     64 00 90 5D |  if_ne	jmp	#LR__2668
1c3f4     78 2A 0E F2 | 	cmp	local07, #120 wz
1c3f8     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1c3fc     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1c400     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
1c404     14 00 90 5D |  if_ne	jmp	#LR__2663
1c408     0F 13 02 F6 | 	mov	arg01, local01
1c40c     10 14 06 F6 | 	mov	arg02, #16
1c410     EC FE BF FD | 	call	#__system____builtin_atoi
1c414     FD 22 02 F6 | 	mov	local03, result1
1c418     3C 00 90 FD | 	jmp	#LR__2667
1c41c                 | LR__2663
1c41c     62 2A 0E F2 | 	cmp	local07, #98 wz
1c420     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
1c424     14 00 90 5D |  if_ne	jmp	#LR__2664
1c428     0F 13 02 F6 | 	mov	arg01, local01
1c42c     02 14 06 F6 | 	mov	arg02, #2
1c430     CC FE BF FD | 	call	#__system____builtin_atoi
1c434     FD 22 02 F6 | 	mov	local03, result1
1c438     1C 00 90 FD | 	jmp	#LR__2666
1c43c                 | LR__2664
1c43c     6F 2A 0E F2 | 	cmp	local07, #111 wz
1c440     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
1c444     10 00 90 5D |  if_ne	jmp	#LR__2665
1c448     0F 13 02 F6 | 	mov	arg01, local01
1c44c     08 14 06 F6 | 	mov	arg02, #8
1c450     AC FE BF FD | 	call	#__system____builtin_atoi
1c454     FD 22 02 F6 | 	mov	local03, result1
1c458                 | LR__2665
1c458                 | LR__2666
1c458                 | LR__2667
1c458                 | LR__2668
1c458     00 26 0E F2 | 	cmp	local05, #0 wz
1c45c     11 23 62 56 |  if_ne	neg	local03, local03
1c460     11 FB 01 F6 | 	mov	result1, local03
1c464     A7 F0 03 F6 | 	mov	ptra, fp
1c468     B2 00 A0 FD | 	call	#popregs_
1c46c                 | __system____builtin_atoi_ret
1c46c     2D 00 64 FD | 	ret
1c470                 | 
1c470                 | __system____builtin_atof
1c470     07 4A 05 F6 | 	mov	COUNT_, #7
1c474     A8 00 A0 FD | 	call	#pushregs_
1c478     09 1F 02 F6 | 	mov	local01, arg01
1c47c     00 20 06 F6 | 	mov	local02, #0
1c480     00 22 06 F6 | 	mov	local03, #0
1c484     00 24 06 F6 | 	mov	local04, #0
1c488     00 26 06 F6 | 	mov	local05, #0
1c48c     97 08 48 FB | 	callpa	#(@LR__2671-@LR__2670)>>2,fcache_load_ptr_
1c490                 | LR__2670
1c490     0F 17 C2 FA | 	rdbyte	arg03, local01
1c494     20 16 0E F2 | 	cmp	arg03, #32 wz
1c498     01 1E 06 A1 |  if_e	add	local01, #1
1c49c     F0 FF 9F AD |  if_e	jmp	#LR__2670
1c4a0                 | LR__2671
1c4a0     0F 29 C2 FA | 	rdbyte	local06, local01
1c4a4                 | LR__2672
1c4a4     2B 28 0E F2 | 	cmp	local06, #43 wz
1c4a8     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1c4ac     14 00 90 5D |  if_ne	jmp	#LR__2673
1c4b0     2D 28 0E F2 | 	cmp	local06, #45 wz
1c4b4     1F 24 E6 A4 |  if_e	bitnot	local04, #31
1c4b8     01 1E 06 F1 | 	add	local01, #1
1c4bc     0F 29 C2 FA | 	rdbyte	local06, local01
1c4c0     E0 FF 9F FD | 	jmp	#LR__2672
1c4c4                 | LR__2673
1c4c4                 | LR__2674
1c4c4     97 08 48 FB | 	callpa	#(@LR__2676-@LR__2675)>>2,fcache_load_ptr_
1c4c8                 | LR__2675
1c4c8     0F 29 C2 FA | 	rdbyte	local06, local01
1c4cc     5F 28 0E F2 | 	cmp	local06, #95 wz
1c4d0     01 1E 06 F1 | 	add	local01, #1
1c4d4     F0 FF 9F AD |  if_e	jmp	#LR__2675
1c4d8                 | LR__2676
1c4d8     00 28 0E F2 | 	cmp	local06, #0 wz
1c4dc     5C 00 90 AD |  if_e	jmp	#LR__2678
1c4e0     30 28 56 F2 | 	cmps	local06, #48 wc
1c4e4     44 00 90 CD |  if_b	jmp	#LR__2677
1c4e8     3A 28 56 F2 | 	cmps	local06, #58 wc
1c4ec     3C 00 90 3D |  if_ae	jmp	#LR__2677
1c4f0     10 13 02 F6 | 	mov	arg01, local02
1c4f4     00 90 20 FF 
1c4f8     00 14 06 F6 | 	mov	arg02, ##1092616192
1c4fc     88 F7 BF FD | 	call	#__system___float_mul
1c500     FD 20 02 F6 | 	mov	local02, result1
1c504     30 28 86 F1 | 	sub	local06, #48
1c508     14 13 02 F6 | 	mov	arg01, local06
1c50c     74 F3 BF FD | 	call	#__system___float_fromuns
1c510     FD 14 02 F6 | 	mov	arg02, result1
1c514     10 13 02 F6 | 	mov	arg01, local02
1c518     9C F3 BF FD | 	call	#__system___float_add
1c51c     FD 20 02 F6 | 	mov	local02, result1
1c520     00 26 0E F2 | 	cmp	local05, #0 wz
1c524     01 22 86 51 |  if_ne	sub	local03, #1
1c528     98 FF 9F FD | 	jmp	#LR__2674
1c52c                 | LR__2677
1c52c     2E 28 0E F2 | 	cmp	local06, #46 wz
1c530     00 26 0E A2 |  if_e	cmp	local05, #0 wz
1c534     01 26 06 A6 |  if_e	mov	local05, #1
1c538     88 FF 9F AD |  if_e	jmp	#LR__2674
1c53c                 | LR__2678
1c53c     45 28 0E F2 | 	cmp	local06, #69 wz
1c540     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
1c544     18 00 90 5D |  if_ne	jmp	#LR__2679
1c548     0F 13 02 F6 | 	mov	arg01, local01
1c54c     00 14 06 F6 | 	mov	arg02, #0
1c550     AC FD BF FD | 	call	#__system____builtin_atoi
1c554     11 FB 01 F1 | 	add	result1, local03
1c558     FD 2A 02 F6 | 	mov	local07, result1
1c55c     04 00 90 FD | 	jmp	#LR__2680
1c560                 | LR__2679
1c560     11 2B 02 F6 | 	mov	local07, local03
1c564                 | LR__2680
1c564     15 17 02 F6 | 	mov	arg03, local07
1c568     10 13 02 F6 | 	mov	arg01, local02
1c56c     00 90 20 FF 
1c570     00 14 06 F6 | 	mov	arg02, ##1092616192
1c574     BC 06 B0 FD | 	call	#__system___float_pow_n
1c578     12 FB 61 F5 | 	xor	result1, local04
1c57c     A7 F0 03 F6 | 	mov	ptra, fp
1c580     B2 00 A0 FD | 	call	#popregs_
1c584                 | __system____builtin_atof_ret
1c584     2D 00 64 FD | 	ret
1c588                 | 
1c588                 | __system____builtin_ilogb
1c588     20 FC BF FD | 	call	#__system___float_Unpack
1c58c     00 FE 0D F2 | 	cmp	result3, #0 wz
1c590     00 00 40 AF 
1c594     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
1c598     24 00 90 AD |  if_e	jmp	#LR__2691
1c59c     80 FC 0D F2 | 	cmp	result2, #128 wz
1c5a0     18 00 90 5D |  if_ne	jmp	#LR__2690
1c5a4     00 00 10 FF 
1c5a8     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1c5ac     1E FA CD A9 |  if_e	bmask	result1, #30
1c5b0     0C 00 90 AD |  if_e	jmp	#LR__2691
1c5b4     1F FA C5 F9 | 	decod	result1, #31
1c5b8     04 00 90 FD | 	jmp	#LR__2691
1c5bc                 | LR__2690
1c5bc     FE FA 01 F6 | 	mov	result1, result2
1c5c0                 | LR__2691
1c5c0                 | __system____builtin_ilogb_ret
1c5c0     2D 00 64 FD | 	ret
1c5c4                 | 
1c5c4                 | __system____builtin_sinf
1c5c4     03 4A 05 F6 | 	mov	COUNT_, #3
1c5c8     A8 00 A0 FD | 	call	#pushregs_
1c5cc     09 1F 02 F6 | 	mov	local01, arg01
1c5d0     87 64 20 FF 
1c5d4     DB 15 06 F6 | 	mov	arg02, ##1086918619
1c5d8     B0 F8 BF FD | 	call	#__system___float_div
1c5dc     FD 12 02 F6 | 	mov	arg01, result1
1c5e0     00 14 06 F6 | 	mov	arg02, #0
1c5e4     68 FB BF FD | 	call	#__system___float_tointeger
1c5e8     FD 16 0A F6 | 	mov	arg03, result1 wz
1c5ec     44 00 90 AD |  if_e	jmp	#LR__2700
1c5f0     0B 13 52 F6 | 	abs	arg01, arg03 wc
1c5f4     1F 20 C6 C9 |  if_b	decod	local02, #31
1c5f8     00 20 06 36 |  if_ae	mov	local02, #0
1c5fc     84 F2 BF FD | 	call	#__system___float_fromuns
1c600     10 FB 61 F5 | 	xor	result1, local02
1c604     FD 12 02 F6 | 	mov	arg01, result1
1c608     1E 14 C6 F9 | 	decod	arg02, #30
1c60c     78 F6 BF FD | 	call	#__system___float_mul
1c610     FD 12 02 F6 | 	mov	arg01, result1
1c614     87 24 20 FF 
1c618     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c61c     68 F6 BF FD | 	call	#__system___float_mul
1c620     FD 14 02 F6 | 	mov	arg02, result1
1c624     0F 13 02 F6 | 	mov	arg01, local01
1c628     1F 14 E6 F4 | 	bitnot	arg02, #31
1c62c     88 F2 BF FD | 	call	#__system___float_add
1c630     FD 1E 02 F6 | 	mov	local01, result1
1c634                 | LR__2700
1c634     0F 13 02 F6 | 	mov	arg01, local01
1c638     66 E6 1E FF 
1c63c     CD 14 06 F6 | 	mov	arg02, ##1036831949
1c640     01 16 06 F6 | 	mov	arg03, #1
1c644     74 FA BF FD | 	call	#__system___float_cmp
1c648     00 FA 55 F2 | 	cmps	result1, #0 wc
1c64c     5C 00 90 3D |  if_ae	jmp	#LR__2701
1c650     0F 13 02 F6 | 	mov	arg01, local01
1c654     66 E6 5E FF 
1c658     CD 14 06 F6 | 	mov	arg02, ##-1110651699
1c65c     01 16 66 F6 | 	neg	arg03, #1
1c660     58 FA BF FD | 	call	#__system___float_cmp
1c664     01 FA 55 F2 | 	cmps	result1, #1 wc
1c668     40 00 90 CD |  if_b	jmp	#LR__2701
1c66c     0F 13 02 F6 | 	mov	arg01, local01
1c670     0F 15 02 F6 | 	mov	arg02, local01
1c674     10 F6 BF FD | 	call	#__system___float_mul
1c678     FD 12 02 F6 | 	mov	arg01, result1
1c67c     0F 15 02 F6 | 	mov	arg02, local01
1c680     04 F6 BF FD | 	call	#__system___float_mul
1c684     FD 12 02 F6 | 	mov	arg01, result1
1c688     00 60 20 FF 
1c68c     00 14 06 F6 | 	mov	arg02, ##1086324736
1c690     F8 F7 BF FD | 	call	#__system___float_div
1c694     FD 14 02 F6 | 	mov	arg02, result1
1c698     0F 13 02 F6 | 	mov	arg01, local01
1c69c     1F 14 E6 F4 | 	bitnot	arg02, #31
1c6a0     14 F2 BF FD | 	call	#__system___float_add
1c6a4     FD 22 02 F6 | 	mov	local03, result1
1c6a8     54 00 90 FD | 	jmp	#LR__2702
1c6ac                 | LR__2701
1c6ac     0F 13 02 F6 | 	mov	arg01, local01
1c6b0     7C 91 26 FF 
1c6b4     83 15 06 F6 | 	mov	arg02, ##1294137731
1c6b8     CC F5 BF FD | 	call	#__system___float_mul
1c6bc     FD 12 02 F6 | 	mov	arg01, result1
1c6c0     00 14 06 F6 | 	mov	arg02, #0
1c6c4     88 FA BF FD | 	call	#__system___float_tointeger
1c6c8     02 FA 65 F0 | 	shl	result1, #2
1c6cc     00 00 A0 FF 
1c6d0     FD 00 48 FD | 	qrotate	##1073741824, result1
1c6d4     19 12 62 FD | 	getqy	arg01
1c6d8     09 13 52 F6 | 	abs	arg01, arg01 wc
1c6dc     1F 20 C6 C9 |  if_b	decod	local02, #31
1c6e0     00 20 06 36 |  if_ae	mov	local02, #0
1c6e4     9C F1 BF FD | 	call	#__system___float_fromuns
1c6e8     10 FB 61 F5 | 	xor	result1, local02
1c6ec     FD 12 02 F6 | 	mov	arg01, result1
1c6f0     00 40 27 FF 
1c6f4     00 14 06 F6 | 	mov	arg02, ##1317011456
1c6f8     90 F7 BF FD | 	call	#__system___float_div
1c6fc     FD 22 02 F6 | 	mov	local03, result1
1c700                 | LR__2702
1c700     11 FB 01 F6 | 	mov	result1, local03
1c704     A7 F0 03 F6 | 	mov	ptra, fp
1c708     B2 00 A0 FD | 	call	#popregs_
1c70c                 | __system____builtin_sinf_ret
1c70c     2D 00 64 FD | 	ret
1c710                 | 
1c710                 | __system____builtin_tanf
1c710     02 4A 05 F6 | 	mov	COUNT_, #2
1c714     A8 00 A0 FD | 	call	#pushregs_
1c718     09 1F 02 F6 | 	mov	local01, arg01
1c71c     A4 FE BF FD | 	call	#__system____builtin_sinf
1c720     FD 20 02 F6 | 	mov	local02, result1
1c724     0F 15 02 F6 | 	mov	arg02, local01
1c728     87 E4 1F FF 
1c72c     DB 13 06 F6 | 	mov	arg01, ##1070141403
1c730     1F 14 E6 F4 | 	bitnot	arg02, #31
1c734     80 F1 BF FD | 	call	#__system___float_add
1c738     FD 12 02 F6 | 	mov	arg01, result1
1c73c     84 FE BF FD | 	call	#__system____builtin_sinf
1c740     FD 14 02 F6 | 	mov	arg02, result1
1c744     10 13 02 F6 | 	mov	arg01, local02
1c748     40 F7 BF FD | 	call	#__system___float_div
1c74c     A7 F0 03 F6 | 	mov	ptra, fp
1c750     B2 00 A0 FD | 	call	#popregs_
1c754                 | __system____builtin_tanf_ret
1c754     2D 00 64 FD | 	ret
1c758                 | 
1c758                 | __system____builtin_asinf
1c758     01 4A 05 F6 | 	mov	COUNT_, #1
1c75c     A8 00 A0 FD | 	call	#pushregs_
1c760     09 1F 02 F6 | 	mov	local01, arg01
1c764     0F 15 02 F6 | 	mov	arg02, local01
1c768     0F 13 02 F6 | 	mov	arg01, local01
1c76c     18 F5 BF FD | 	call	#__system___float_mul
1c770     FD 14 02 F6 | 	mov	arg02, result1
1c774     00 C0 1F FF 
1c778     00 12 06 F6 | 	mov	arg01, ##1065353216
1c77c     1F 14 E6 F4 | 	bitnot	arg02, #31
1c780     34 F1 BF FD | 	call	#__system___float_add
1c784     FD 12 02 F6 | 	mov	arg01, result1
1c788     24 F4 BF FD | 	call	#__system___float_sqrt
1c78c     FD 14 02 F6 | 	mov	arg02, result1
1c790     0F 13 02 F6 | 	mov	arg01, local01
1c794     58 00 B0 FD | 	call	#__system____builtin_atan2f
1c798     A7 F0 03 F6 | 	mov	ptra, fp
1c79c     B2 00 A0 FD | 	call	#popregs_
1c7a0                 | __system____builtin_asinf_ret
1c7a0     2D 00 64 FD | 	ret
1c7a4                 | 
1c7a4                 | __system____builtin_acosf
1c7a4     01 4A 05 F6 | 	mov	COUNT_, #1
1c7a8     A8 00 A0 FD | 	call	#pushregs_
1c7ac     09 1F 02 F6 | 	mov	local01, arg01
1c7b0     0F 15 02 F6 | 	mov	arg02, local01
1c7b4     0F 13 02 F6 | 	mov	arg01, local01
1c7b8     CC F4 BF FD | 	call	#__system___float_mul
1c7bc     FD 14 02 F6 | 	mov	arg02, result1
1c7c0     00 C0 1F FF 
1c7c4     00 12 06 F6 | 	mov	arg01, ##1065353216
1c7c8     1F 14 E6 F4 | 	bitnot	arg02, #31
1c7cc     E8 F0 BF FD | 	call	#__system___float_add
1c7d0     FD 12 02 F6 | 	mov	arg01, result1
1c7d4     D8 F3 BF FD | 	call	#__system___float_sqrt
1c7d8     FD 12 02 F6 | 	mov	arg01, result1
1c7dc     0F 15 02 F6 | 	mov	arg02, local01
1c7e0     0C 00 B0 FD | 	call	#__system____builtin_atan2f
1c7e4     A7 F0 03 F6 | 	mov	ptra, fp
1c7e8     B2 00 A0 FD | 	call	#popregs_
1c7ec                 | __system____builtin_acosf_ret
1c7ec     2D 00 64 FD | 	ret
1c7f0                 | 
1c7f0                 | __system____builtin_atan2f
1c7f0     04 4A 05 F6 | 	mov	COUNT_, #4
1c7f4     A8 00 A0 FD | 	call	#pushregs_
1c7f8     09 1F 02 F6 | 	mov	local01, arg01
1c7fc     0A 21 02 F6 | 	mov	local02, arg02
1c800     0F 13 02 F6 | 	mov	arg01, local01
1c804     00 14 06 F6 | 	mov	arg02, #0
1c808     01 16 06 F6 | 	mov	arg03, #1
1c80c     AC F8 BF FD | 	call	#__system___float_cmp
1c810     00 FA 0D F2 | 	cmp	result1, #0 wz
1c814     28 00 90 5D |  if_ne	jmp	#LR__2710
1c818     10 13 02 F6 | 	mov	arg01, local02
1c81c     00 14 06 F6 | 	mov	arg02, #0
1c820     01 16 06 F6 | 	mov	arg03, #1
1c824     94 F8 BF FD | 	call	#__system___float_cmp
1c828     00 FA 55 F2 | 	cmps	result1, #0 wc
1c82c     87 24 60 CF 
1c830     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
1c834     DC 00 90 CD |  if_b	jmp	#LR__2711
1c838     00 FA 05 F6 | 	mov	result1, #0
1c83c     D4 00 90 FD | 	jmp	#LR__2711
1c840                 | LR__2710
1c840     10 13 02 F6 | 	mov	arg01, local02
1c844     10 15 02 F6 | 	mov	arg02, local02
1c848     3C F4 BF FD | 	call	#__system___float_mul
1c84c     FD 22 02 F6 | 	mov	local03, result1
1c850     0F 13 02 F6 | 	mov	arg01, local01
1c854     0F 15 02 F6 | 	mov	arg02, local01
1c858     2C F4 BF FD | 	call	#__system___float_mul
1c85c     FD 14 02 F6 | 	mov	arg02, result1
1c860     11 13 02 F6 | 	mov	arg01, local03
1c864     50 F0 BF FD | 	call	#__system___float_add
1c868     FD 12 02 F6 | 	mov	arg01, result1
1c86c     40 F3 BF FD | 	call	#__system___float_sqrt
1c870     FD 22 02 F6 | 	mov	local03, result1
1c874     10 13 02 F6 | 	mov	arg01, local02
1c878     11 15 02 F6 | 	mov	arg02, local03
1c87c     0C F6 BF FD | 	call	#__system___float_div
1c880     FD 20 02 F6 | 	mov	local02, result1
1c884     0F 13 02 F6 | 	mov	arg01, local01
1c888     11 15 02 F6 | 	mov	arg02, local03
1c88c     FC F5 BF FD | 	call	#__system___float_div
1c890     FD 1E 02 F6 | 	mov	local01, result1
1c894     00 40 27 FF 
1c898     00 12 06 F6 | 	mov	arg01, ##1317011456
1c89c     10 15 02 F6 | 	mov	arg02, local02
1c8a0     E4 F3 BF FD | 	call	#__system___float_mul
1c8a4     FD 12 02 F6 | 	mov	arg01, result1
1c8a8     00 14 06 F6 | 	mov	arg02, #0
1c8ac     A0 F8 BF FD | 	call	#__system___float_tointeger
1c8b0     FD 22 02 F6 | 	mov	local03, result1
1c8b4     00 40 27 FF 
1c8b8     00 12 06 F6 | 	mov	arg01, ##1317011456
1c8bc     0F 15 02 F6 | 	mov	arg02, local01
1c8c0     C4 F3 BF FD | 	call	#__system___float_mul
1c8c4     FD 12 02 F6 | 	mov	arg01, result1
1c8c8     00 14 06 F6 | 	mov	arg02, #0
1c8cc     80 F8 BF FD | 	call	#__system___float_tointeger
1c8d0     FD 22 52 FD | 	qvector	local03, result1
1c8d4     87 24 20 FF 
1c8d8     DB 23 06 F6 | 	mov	local03, ##1078530011
1c8dc     19 12 62 FD | 	getqy	arg01
1c8e0     01 12 C6 F0 | 	sar	arg01, #1
1c8e4     09 13 52 F6 | 	abs	arg01, arg01 wc
1c8e8     1F 24 C6 C9 |  if_b	decod	local04, #31
1c8ec     00 24 06 36 |  if_ae	mov	local04, #0
1c8f0     90 EF BF FD | 	call	#__system___float_fromuns
1c8f4     12 FB 61 F5 | 	xor	result1, local04
1c8f8     FD 12 02 F6 | 	mov	arg01, result1
1c8fc     00 40 27 FF 
1c900     00 14 06 F6 | 	mov	arg02, ##1317011456
1c904     84 F5 BF FD | 	call	#__system___float_div
1c908     FD 14 02 F6 | 	mov	arg02, result1
1c90c     11 13 02 F6 | 	mov	arg01, local03
1c910     74 F3 BF FD | 	call	#__system___float_mul
1c914                 | LR__2711
1c914     A7 F0 03 F6 | 	mov	ptra, fp
1c918     B2 00 A0 FD | 	call	#popregs_
1c91c                 | __system____builtin_atan2f_ret
1c91c     2D 00 64 FD | 	ret
1c920                 | 
1c920                 | __system____builtin_exp2f
1c920     04 4A 05 F6 | 	mov	COUNT_, #4
1c924     A8 00 A0 FD | 	call	#pushregs_
1c928     09 1F 02 F6 | 	mov	local01, arg01
1c92c     00 7F 21 FF 
1c930     00 14 06 F6 | 	mov	arg02, ##1123942400
1c934     01 16 66 F6 | 	neg	arg03, #1
1c938     80 F7 BF FD | 	call	#__system___float_cmp
1c93c     00 FA 55 F2 | 	cmps	result1, #0 wc
1c940     00 C0 3F 3F 
1c944     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1c948     DC 00 90 3D |  if_ae	jmp	#LR__2721
1c94c     0F 13 02 F6 | 	mov	arg01, local01
1c950     00 7F 61 FF 
1c954     00 14 06 F6 | 	mov	arg02, ##-1023541248
1c958     01 16 06 F6 | 	mov	arg03, #1
1c95c     5C F7 BF FD | 	call	#__system___float_cmp
1c960     00 FA 55 F2 | 	cmps	result1, #0 wc
1c964     00 FA 05 C6 |  if_b	mov	result1, #0
1c968     BC 00 90 CD |  if_b	jmp	#LR__2721
1c96c     0F 13 02 F6 | 	mov	arg01, local01
1c970     00 14 06 F6 | 	mov	arg02, #0
1c974     D8 F7 BF FD | 	call	#__system___float_tointeger
1c978     FD 20 02 F6 | 	mov	local02, result1
1c97c     10 13 52 F6 | 	abs	arg01, local02 wc
1c980     1F 22 C6 C9 |  if_b	decod	local03, #31
1c984     00 22 06 36 |  if_ae	mov	local03, #0
1c988     F8 EE BF FD | 	call	#__system___float_fromuns
1c98c     11 FB 61 F5 | 	xor	result1, local03
1c990     FD 14 02 F6 | 	mov	arg02, result1
1c994     0F 13 02 F6 | 	mov	arg01, local01
1c998     1F 14 E6 F4 | 	bitnot	arg02, #31
1c99c     18 EF BF FD | 	call	#__system___float_add
1c9a0     FD 24 02 F6 | 	mov	local04, result1
1c9a4     12 13 02 F6 | 	mov	arg01, local04
1c9a8     00 14 06 F6 | 	mov	arg02, #0
1c9ac     01 16 06 F6 | 	mov	arg03, #1
1c9b0     08 F7 BF FD | 	call	#__system___float_cmp
1c9b4     00 FA 55 F2 | 	cmps	result1, #0 wc
1c9b8     18 00 90 3D |  if_ae	jmp	#LR__2720
1c9bc     12 13 02 F6 | 	mov	arg01, local04
1c9c0     00 C0 1F FF 
1c9c4     00 14 06 F6 | 	mov	arg02, ##1065353216
1c9c8     EC EE BF FD | 	call	#__system___float_add
1c9cc     FD 24 02 F6 | 	mov	local04, result1
1c9d0     01 20 86 F1 | 	sub	local02, #1
1c9d4                 | LR__2720
1c9d4     7F 20 06 F1 | 	add	local02, #127
1c9d8     17 20 66 F0 | 	shl	local02, #23
1c9dc     12 13 02 F6 | 	mov	arg01, local04
1c9e0     00 80 26 FF 
1c9e4     00 14 06 F6 | 	mov	arg02, ##1291845632
1c9e8     9C F2 BF FD | 	call	#__system___float_mul
1c9ec     FD 12 02 F6 | 	mov	arg01, result1
1c9f0     00 14 06 F6 | 	mov	arg02, #0
1c9f4     58 F7 BF FD | 	call	#__system___float_tointeger
1c9f8     FD 24 0A F6 | 	mov	local04, result1 wz
1c9fc     10 FB 01 A6 |  if_e	mov	result1, local02
1ca00     24 00 90 AD |  if_e	jmp	#LR__2721
1ca04     3E 24 26 F4 | 	bith	local04, #62
1ca08     0F 24 62 FD | 	qexp	local04
1ca0c     10 13 02 F6 | 	mov	arg01, local02
1ca10     18 14 62 FD | 	getqx	arg02
1ca14     01 14 06 F1 | 	add	arg02, #1
1ca18     01 14 46 F0 | 	shr	arg02, #1
1ca1c     00 80 1F FF 
1ca20     00 14 06 F1 | 	add	arg02, ##1056964608
1ca24     60 F2 BF FD | 	call	#__system___float_mul
1ca28                 | LR__2721
1ca28     A7 F0 03 F6 | 	mov	ptra, fp
1ca2c     B2 00 A0 FD | 	call	#popregs_
1ca30                 | __system____builtin_exp2f_ret
1ca30     2D 00 64 FD | 	ret
1ca34                 | 
1ca34                 | __system____builtin_log2f
1ca34     06 4A 05 F6 | 	mov	COUNT_, #6
1ca38     A8 00 A0 FD | 	call	#pushregs_
1ca3c     09 1F 02 F6 | 	mov	local01, arg01
1ca40     09 21 0A F6 | 	mov	local02, arg01 wz
1ca44     00 00 40 5F 
1ca48     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
1ca4c     00 40 00 AF 
1ca50     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1ca54     08 01 90 AD |  if_e	jmp	#LR__2734
1ca58     00 20 56 F2 | 	cmps	local02, #0 wc
1ca5c     00 E0 3F CF 
1ca60     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1ca64     F8 00 90 CD |  if_b	jmp	#LR__2734
1ca68     0F 13 02 F6 | 	mov	arg01, local01
1ca6c     00 90 20 FF 
1ca70     00 14 06 F6 | 	mov	arg02, ##1092616192
1ca74     01 16 06 F6 | 	mov	arg03, #1
1ca78     40 F6 BF FD | 	call	#__system___float_cmp
1ca7c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ca80     4D 2A 20 AF 
1ca84     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
1ca88     D4 00 90 AD |  if_e	jmp	#LR__2734
1ca8c     0F 13 02 F6 | 	mov	arg01, local01
1ca90     FC 16 20 FF 
1ca94     54 14 06 F6 | 	mov	arg02, ##1076754516
1ca98     01 16 06 F6 | 	mov	arg03, #1
1ca9c     1C F6 BF FD | 	call	#__system___float_cmp
1caa0     00 FA 0D F2 | 	cmp	result1, #0 wz
1caa4     55 DC 1F AF 
1caa8     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
1caac     B0 00 90 AD |  if_e	jmp	#LR__2734
1cab0     10 23 02 F6 | 	mov	local03, local02
1cab4     17 22 46 F0 | 	shr	local03, #23
1cab8     11 23 E2 F8 | 	getbyte	local03, local03, #0
1cabc     17 21 06 F4 | 	bitl	local02, #279
1cac0     10 25 02 F6 | 	mov	local04, local02
1cac4     FF 22 0E F2 | 	cmp	local03, #255 wz
1cac8     1C 00 90 5D |  if_ne	jmp	#LR__2730
1cacc     00 24 0E F2 | 	cmp	local04, #0 wz
1cad0     00 C0 3F 5F 
1cad4     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1cad8     00 E0 3F AF 
1cadc     00 26 06 A6 |  if_e	mov	local05, ##2143289344
1cae0     13 FB 01 F6 | 	mov	result1, local05
1cae4     78 00 90 FD | 	jmp	#LR__2734
1cae8                 | LR__2730
1cae8     00 22 0E F2 | 	cmp	local03, #0 wz
1caec     17 24 26 54 |  if_ne	bith	local04, #23
1caf0     7F 22 86 51 |  if_ne	sub	local03, #127
1caf4     28 00 90 5D |  if_ne	jmp	#LR__2733
1caf8     00 24 0E F2 | 	cmp	local04, #0 wz
1cafc     00 40 00 AF 
1cb00     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1cb04     58 00 90 AD |  if_e	jmp	#LR__2734
1cb08     7E 22 66 F6 | 	neg	local03, #126
1cb0c     97 08 48 FB | 	callpa	#(@LR__2732-@LR__2731)>>2,fcache_load_ptr_
1cb10                 | LR__2731
1cb10     17 24 2E F4 | 	testbn	local04, #23 wz
1cb14     01 24 66 A0 |  if_e	shl	local04, #1
1cb18     01 22 06 A1 |  if_e	add	local03, #1
1cb1c     F0 FF 9F AD |  if_e	jmp	#LR__2731
1cb20                 | LR__2732
1cb20                 | LR__2733
1cb20     0E 24 62 FD | 	qlog	local04
1cb24     01 22 86 F1 | 	sub	local03, #1
1cb28     11 13 52 F6 | 	abs	arg01, local03 wc
1cb2c     1F 28 C6 C9 |  if_b	decod	local06, #31
1cb30     00 28 06 36 |  if_ae	mov	local06, #0
1cb34     18 26 62 FD | 	getqx	local05
1cb38     9B 26 06 F4 | 	bitl	local05, #155
1cb3c     08 26 06 F1 | 	add	local05, #8
1cb40     04 26 46 F0 | 	shr	local05, #4
1cb44     00 C0 1F FF 
1cb48     00 26 06 F1 | 	add	local05, ##1065353216
1cb4c     34 ED BF FD | 	call	#__system___float_fromuns
1cb50     14 FB 61 F5 | 	xor	result1, local06
1cb54     FD 14 02 F6 | 	mov	arg02, result1
1cb58     13 13 02 F6 | 	mov	arg01, local05
1cb5c     58 ED BF FD | 	call	#__system___float_add
1cb60                 | LR__2734
1cb60     A7 F0 03 F6 | 	mov	ptra, fp
1cb64     B2 00 A0 FD | 	call	#popregs_
1cb68                 | __system____builtin_log2f_ret
1cb68     2D 00 64 FD | 	ret
1cb6c                 | 
1cb6c                 | __system____builtin_powf
1cb6c     04 4A 05 F6 | 	mov	COUNT_, #4
1cb70     A8 00 A0 FD | 	call	#pushregs_
1cb74     09 1F 02 F6 | 	mov	local01, arg01
1cb78     0A 21 02 F6 | 	mov	local02, arg02
1cb7c     10 13 02 F6 | 	mov	arg01, local02
1cb80     00 14 06 F6 | 	mov	arg02, #0
1cb84     C8 F5 BF FD | 	call	#__system___float_tointeger
1cb88     FD 22 02 F6 | 	mov	local03, result1
1cb8c     11 13 52 F6 | 	abs	arg01, local03 wc
1cb90     1F 24 C6 C9 |  if_b	decod	local04, #31
1cb94     00 24 06 36 |  if_ae	mov	local04, #0
1cb98     E8 EC BF FD | 	call	#__system___float_fromuns
1cb9c     12 FB 61 F5 | 	xor	result1, local04
1cba0     FD 12 02 F6 | 	mov	arg01, result1
1cba4     10 15 02 F6 | 	mov	arg02, local02
1cba8     01 16 06 F6 | 	mov	arg03, #1
1cbac     0C F5 BF FD | 	call	#__system___float_cmp
1cbb0     00 FA 0D F2 | 	cmp	result1, #0 wz
1cbb4     18 00 90 5D |  if_ne	jmp	#LR__2740
1cbb8     00 C0 1F FF 
1cbbc     00 12 06 F6 | 	mov	arg01, ##1065353216
1cbc0     0F 15 02 F6 | 	mov	arg02, local01
1cbc4     11 17 02 F6 | 	mov	arg03, local03
1cbc8     68 00 B0 FD | 	call	#__system___float_pow_n
1cbcc     58 00 90 FD | 	jmp	#LR__2741
1cbd0                 | LR__2740
1cbd0     0F 13 02 F6 | 	mov	arg01, local01
1cbd4     00 14 06 F6 | 	mov	arg02, #0
1cbd8     01 16 06 F6 | 	mov	arg03, #1
1cbdc     DC F4 BF FD | 	call	#__system___float_cmp
1cbe0     00 FA 55 F2 | 	cmps	result1, #0 wc
1cbe4     00 E0 3F CF 
1cbe8     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1cbec     38 00 90 CD |  if_b	jmp	#LR__2741
1cbf0     0F 13 02 F6 | 	mov	arg01, local01
1cbf4     00 14 06 F6 | 	mov	arg02, #0
1cbf8     01 16 06 F6 | 	mov	arg03, #1
1cbfc     BC F4 BF FD | 	call	#__system___float_cmp
1cc00     00 FA 0D F2 | 	cmp	result1, #0 wz
1cc04     00 FA 05 A6 |  if_e	mov	result1, #0
1cc08     1C 00 90 AD |  if_e	jmp	#LR__2741
1cc0c     0F 13 02 F6 | 	mov	arg01, local01
1cc10     20 FE BF FD | 	call	#__system____builtin_log2f
1cc14     FD 12 02 F6 | 	mov	arg01, result1
1cc18     10 15 02 F6 | 	mov	arg02, local02
1cc1c     68 F0 BF FD | 	call	#__system___float_mul
1cc20     FD 12 02 F6 | 	mov	arg01, result1
1cc24     F8 FC BF FD | 	call	#__system____builtin_exp2f
1cc28                 | LR__2741
1cc28     A7 F0 03 F6 | 	mov	ptra, fp
1cc2c     B2 00 A0 FD | 	call	#popregs_
1cc30                 | __system____builtin_powf_ret
1cc30     2D 00 64 FD | 	ret
1cc34                 | 
1cc34                 | __system___float_pow_n
1cc34     05 4A 05 F6 | 	mov	COUNT_, #5
1cc38     A8 00 A0 FD | 	call	#pushregs_
1cc3c     09 1F 02 F6 | 	mov	local01, arg01
1cc40     0A 21 02 F6 | 	mov	local02, arg02
1cc44     0B 23 02 F6 | 	mov	local03, arg03
1cc48     00 22 56 F2 | 	cmps	local03, #0 wc
1cc4c     18 00 90 3D |  if_ae	jmp	#LR__2750
1cc50     01 24 06 F6 | 	mov	local04, #1
1cc54     11 23 62 F6 | 	neg	local03, local03
1cc58     00 22 56 F2 | 	cmps	local03, #0 wc
1cc5c     00 FA 05 C6 |  if_b	mov	result1, #0
1cc60     94 00 90 CD |  if_b	jmp	#LR__2758
1cc64     04 00 90 FD | 	jmp	#LR__2751
1cc68                 | LR__2750
1cc68     00 24 06 F6 | 	mov	local04, #0
1cc6c                 | LR__2751
1cc6c     00 C0 1F FF 
1cc70     00 26 06 F6 | 	mov	local05, ##1065353216
1cc74                 | LR__2752
1cc74     01 22 56 F2 | 	cmps	local03, #1 wc
1cc78     30 00 90 CD |  if_b	jmp	#LR__2754
1cc7c     01 22 CE F7 | 	test	local03, #1 wz
1cc80     10 00 90 AD |  if_e	jmp	#LR__2753
1cc84     13 13 02 F6 | 	mov	arg01, local05
1cc88     10 15 02 F6 | 	mov	arg02, local02
1cc8c     F8 EF BF FD | 	call	#__system___float_mul
1cc90     FD 26 02 F6 | 	mov	local05, result1
1cc94                 | LR__2753
1cc94     01 22 C6 F0 | 	sar	local03, #1
1cc98     10 13 02 F6 | 	mov	arg01, local02
1cc9c     10 15 02 F6 | 	mov	arg02, local02
1cca0     E4 EF BF FD | 	call	#__system___float_mul
1cca4     FD 20 02 F6 | 	mov	local02, result1
1cca8     C8 FF 9F FD | 	jmp	#LR__2752
1ccac                 | LR__2754
1ccac     00 24 0E F2 | 	cmp	local04, #0 wz
1ccb0     14 00 90 AD |  if_e	jmp	#LR__2755
1ccb4     0F 13 02 F6 | 	mov	arg01, local01
1ccb8     13 15 02 F6 | 	mov	arg02, local05
1ccbc     CC F1 BF FD | 	call	#__system___float_div
1ccc0     FD 26 02 F6 | 	mov	local05, result1
1ccc4     2C 00 90 FD | 	jmp	#LR__2757
1ccc8                 | LR__2755
1ccc8     0F 13 02 F6 | 	mov	arg01, local01
1cccc     00 C0 1F FF 
1ccd0     00 14 06 F6 | 	mov	arg02, ##1065353216
1ccd4     01 16 06 F6 | 	mov	arg03, #1
1ccd8     E0 F3 BF FD | 	call	#__system___float_cmp
1ccdc     00 FA 0D F2 | 	cmp	result1, #0 wz
1cce0     10 00 90 AD |  if_e	jmp	#LR__2756
1cce4     0F 13 02 F6 | 	mov	arg01, local01
1cce8     13 15 02 F6 | 	mov	arg02, local05
1ccec     98 EF BF FD | 	call	#__system___float_mul
1ccf0     FD 26 02 F6 | 	mov	local05, result1
1ccf4                 | LR__2756
1ccf4                 | LR__2757
1ccf4     13 FB 01 F6 | 	mov	result1, local05
1ccf8                 | LR__2758
1ccf8     A7 F0 03 F6 | 	mov	ptra, fp
1ccfc     B2 00 A0 FD | 	call	#popregs_
1cd00                 | __system___float_pow_n_ret
1cd00     2D 00 64 FD | 	ret
1cd04                 | 
1cd04                 | __system___gc_ptrs
1cd04     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1cd08     00 03 02 F6 | 	mov	_var02, _var01
1cd0c     76 01 00 FF 
1cd10     F8 03 06 F1 | 	add	_var02, ##191992
1cd14     00 FD 09 FB | 	rdlong	result2, _var01 wz
1cd18     74 00 90 5D |  if_ne	jmp	#LR__2760
1cd1c     01 FD 01 F6 | 	mov	result2, _var02
1cd20     00 FD 81 F1 | 	sub	result2, _var01
1cd24     00 03 58 FC | 	wrword	#1, _var01
1cd28     00 FB 01 F6 | 	mov	result1, _var01
1cd2c     02 FA 05 F1 | 	add	result1, #2
1cd30     36 00 80 FF 
1cd34     FD 20 59 FC | 	wrword	##27792, result1
1cd38     00 FB 01 F6 | 	mov	result1, _var01
1cd3c     04 FA 05 F1 | 	add	result1, #4
1cd40     FD 00 58 FC | 	wrword	#0, result1
1cd44     00 FB 01 F6 | 	mov	result1, _var01
1cd48     06 FA 05 F1 | 	add	result1, #6
1cd4c     FD 02 58 FC | 	wrword	#1, result1
1cd50     10 00 06 F1 | 	add	_var01, #16
1cd54     FE FC 51 F6 | 	abs	result2, result2 wc
1cd58     04 FC 45 F0 | 	shr	result2, #4
1cd5c     FE FC 81 F6 | 	negc	result2, result2
1cd60     00 FD 51 FC | 	wrword	result2, _var01
1cd64     00 FD 01 F6 | 	mov	result2, _var01
1cd68     02 FC 05 F1 | 	add	result2, #2
1cd6c     36 00 80 FF 
1cd70     FE 1E 59 FC | 	wrword	##27791, result2
1cd74     00 FD 01 F6 | 	mov	result2, _var01
1cd78     04 FC 05 F1 | 	add	result2, #4
1cd7c     FE 00 58 FC | 	wrword	#0, result2
1cd80     00 FD 01 F6 | 	mov	result2, _var01
1cd84     06 FC 05 F1 | 	add	result2, #6
1cd88     FE 00 58 FC | 	wrword	#0, result2
1cd8c     10 00 86 F1 | 	sub	_var01, #16
1cd90                 | LR__2760
1cd90     00 FB 01 F6 | 	mov	result1, _var01
1cd94     01 FD 01 F6 | 	mov	result2, _var02
1cd98                 | __system___gc_ptrs_ret
1cd98     2D 00 64 FD | 	ret
1cd9c                 | 
1cd9c                 | __system___gc_tryalloc
1cd9c     0B 4A 05 F6 | 	mov	COUNT_, #11
1cda0     A8 00 A0 FD | 	call	#pushregs_
1cda4     09 1F 02 F6 | 	mov	local01, arg01
1cda8     0A 21 02 F6 | 	mov	local02, arg02
1cdac     54 FF BF FD | 	call	#__system___gc_ptrs
1cdb0     FD 22 02 F6 | 	mov	local03, result1
1cdb4     FE 24 02 F6 | 	mov	local04, result2
1cdb8     11 27 02 F6 | 	mov	local05, local03
1cdbc     00 28 06 F6 | 	mov	local06, #0
1cdc0     97 1E 48 FB | 	callpa	#(@LR__2771-@LR__2770)>>2,fcache_load_ptr_
1cdc4                 | LR__2770
1cdc4     13 2B 02 F6 | 	mov	local07, local05
1cdc8     06 26 06 F1 | 	add	local05, #6
1cdcc     13 15 EA FA | 	rdword	arg02, local05 wz
1cdd0     11 13 02 F6 | 	mov	arg01, local03
1cdd4     00 FA 05 A6 |  if_e	mov	result1, #0
1cdd8     04 14 66 50 |  if_ne	shl	arg02, #4
1cddc     0A 13 02 51 |  if_ne	add	arg01, arg02
1cde0     09 FB 01 56 |  if_ne	mov	result1, arg01
1cde4     FD 26 0A F6 | 	mov	local05, result1 wz
1cde8     13 29 E2 5A |  if_ne	rdword	local06, local05
1cdec     00 26 0E F2 | 	cmp	local05, #0 wz
1cdf0     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1cdf4     08 00 90 1D |  if_a	jmp	#LR__2772
1cdf8     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
1cdfc     C4 FF 9F 1D |  if_a	jmp	#LR__2770
1ce00                 | LR__2771
1ce00                 | LR__2772
1ce00     00 26 0E F2 | 	cmp	local05, #0 wz
1ce04     13 FB 01 A6 |  if_e	mov	result1, local05
1ce08     3C 01 90 AD |  if_e	jmp	#LR__2775
1ce0c     13 FD 01 F6 | 	mov	result2, local05
1ce10     06 FC 05 F1 | 	add	result2, #6
1ce14     FE 2C E2 FA | 	rdword	local08, result2
1ce18     14 1F 52 F2 | 	cmps	local01, local06 wc
1ce1c     C0 00 90 3D |  if_ae	jmp	#LR__2774
1ce20     13 1F 52 FC | 	wrword	local01, local05
1ce24     13 13 02 F6 | 	mov	arg01, local05
1ce28     0F 2D 02 F6 | 	mov	local08, local01
1ce2c     04 2C 66 F0 | 	shl	local08, #4
1ce30     16 13 02 F1 | 	add	arg01, local08
1ce34     0F 29 82 F1 | 	sub	local06, local01
1ce38     09 29 52 FC | 	wrword	local06, arg01
1ce3c     09 2D 02 F6 | 	mov	local08, arg01
1ce40     02 2C 06 F1 | 	add	local08, #2
1ce44     36 00 80 FF 
1ce48     16 1F 59 FC | 	wrword	##27791, local08
1ce4c     13 15 0A F6 | 	mov	arg02, local05 wz
1ce50     00 FA 05 A6 |  if_e	mov	result1, #0
1ce54     11 15 82 51 |  if_ne	sub	arg02, local03
1ce58     04 14 46 50 |  if_ne	shr	arg02, #4
1ce5c     0A FB 01 56 |  if_ne	mov	result1, arg02
1ce60     09 2D 02 F6 | 	mov	local08, arg01
1ce64     04 2C 06 F1 | 	add	local08, #4
1ce68     16 FB 51 FC | 	wrword	result1, local08
1ce6c     13 2D 02 F6 | 	mov	local08, local05
1ce70     06 2C 06 F1 | 	add	local08, #6
1ce74     09 15 02 F6 | 	mov	arg02, arg01
1ce78     16 2D E2 FA | 	rdword	local08, local08
1ce7c     06 14 06 F1 | 	add	arg02, #6
1ce80     0A 2D 52 FC | 	wrword	local08, arg02
1ce84     09 2F 02 F6 | 	mov	local09, arg01
1ce88     17 15 0A F6 | 	mov	arg02, local09 wz
1ce8c     00 FA 05 A6 |  if_e	mov	result1, #0
1ce90     11 15 82 51 |  if_ne	sub	arg02, local03
1ce94     04 14 46 50 |  if_ne	shr	arg02, #4
1ce98     0A FB 01 56 |  if_ne	mov	result1, arg02
1ce9c     FD 2C 02 F6 | 	mov	local08, result1
1cea0     09 31 EA FA | 	rdword	local10, arg01 wz
1cea4     00 FA 05 A6 |  if_e	mov	result1, #0
1cea8     04 30 66 50 |  if_ne	shl	local10, #4
1ceac     18 13 02 51 |  if_ne	add	arg01, local10
1ceb0     09 FB 01 56 |  if_ne	mov	result1, arg01
1ceb4     FD 32 0A F6 | 	mov	local11, result1 wz
1ceb8     24 00 90 AD |  if_e	jmp	#LR__2773
1cebc     12 33 52 F2 | 	cmps	local11, local04 wc
1cec0     1C 00 90 3D |  if_ae	jmp	#LR__2773
1cec4     17 15 0A F6 | 	mov	arg02, local09 wz
1cec8     00 FA 05 A6 |  if_e	mov	result1, #0
1cecc     11 15 82 51 |  if_ne	sub	arg02, local03
1ced0     04 14 46 50 |  if_ne	shr	arg02, #4
1ced4     0A FB 01 56 |  if_ne	mov	result1, arg02
1ced8     04 32 06 F1 | 	add	local11, #4
1cedc     19 FB 51 FC | 	wrword	result1, local11
1cee0                 | LR__2773
1cee0                 | LR__2774
1cee0     06 2A 06 F1 | 	add	local07, #6
1cee4     15 2D 52 FC | 	wrword	local08, local07
1cee8     36 00 00 FF 
1ceec     80 2E 06 F6 | 	mov	local09, ##27776
1cef0     10 2F 42 F5 | 	or	local09, local02
1cef4     00 FA 05 F6 | 	mov	result1, #0
1cef8     01 FA 61 FD | 	cogid	result1
1cefc     FD 2E 42 F5 | 	or	local09, result1
1cf00     13 33 02 F6 | 	mov	local11, local05
1cf04     02 32 06 F1 | 	add	local11, #2
1cf08     19 2F 52 FC | 	wrword	local09, local11
1cf0c     11 2F 02 F6 | 	mov	local09, local03
1cf10     08 2E 06 F1 | 	add	local09, #8
1cf14     13 33 02 F6 | 	mov	local11, local05
1cf18     17 2F E2 FA | 	rdword	local09, local09
1cf1c     06 32 06 F1 | 	add	local11, #6
1cf20     19 2F 52 FC | 	wrword	local09, local11
1cf24     13 15 0A F6 | 	mov	arg02, local05 wz
1cf28     00 FA 05 A6 |  if_e	mov	result1, #0
1cf2c     11 15 82 51 |  if_ne	sub	arg02, local03
1cf30     04 14 46 50 |  if_ne	shr	arg02, #4
1cf34     0A FB 01 56 |  if_ne	mov	result1, arg02
1cf38     08 22 06 F1 | 	add	local03, #8
1cf3c     11 FB 51 FC | 	wrword	result1, local03
1cf40     08 26 06 F1 | 	add	local05, #8
1cf44     13 FB 01 F6 | 	mov	result1, local05
1cf48                 | LR__2775
1cf48     A7 F0 03 F6 | 	mov	ptra, fp
1cf4c     B2 00 A0 FD | 	call	#popregs_
1cf50                 | __system___gc_tryalloc_ret
1cf50     2D 00 64 FD | 	ret
1cf54                 | 
1cf54                 | __system___gc_alloc_managed
1cf54     01 4A 05 F6 | 	mov	COUNT_, #1
1cf58     A8 00 A0 FD | 	call	#pushregs_
1cf5c     09 1F 02 F6 | 	mov	local01, arg01
1cf60     00 14 06 F6 | 	mov	arg02, #0
1cf64     1C 00 B0 FD | 	call	#__system___gc_doalloc
1cf68     FD 14 0A F6 | 	mov	arg02, result1 wz
1cf6c     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
1cf70     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
1cf74     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
1cf78     A7 F0 03 F6 | 	mov	ptra, fp
1cf7c     B2 00 A0 FD | 	call	#popregs_
1cf80                 | __system___gc_alloc_managed_ret
1cf80     2D 00 64 FD | 	ret
1cf84                 | 
1cf84                 | __system___gc_doalloc
1cf84     06 4A 05 F6 | 	mov	COUNT_, #6
1cf88     A8 00 A0 FD | 	call	#pushregs_
1cf8c     09 1F 0A F6 | 	mov	local01, arg01 wz
1cf90     0A 21 02 F6 | 	mov	local02, arg02
1cf94     00 FA 05 A6 |  if_e	mov	result1, #0
1cf98     8C 00 90 AD |  if_e	jmp	#LR__2787
1cf9c     17 1E 06 F1 | 	add	local01, #23
1cfa0     0F 1E 26 F5 | 	andn	local01, #15
1cfa4     04 1E 46 F0 | 	shr	local01, #4
1cfa8     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cfac     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cfb0     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cfb4     E4 C1 BF FD | 	call	#__system___lockmem
1cfb8     0F 13 02 F6 | 	mov	arg01, local01
1cfbc     10 15 02 F6 | 	mov	arg02, local02
1cfc0     D8 FD BF FD | 	call	#__system___gc_tryalloc
1cfc4     FD 22 0A F6 | 	mov	local03, result1 wz
1cfc8     14 00 90 5D |  if_ne	jmp	#LR__2780
1cfcc     70 03 B0 FD | 	call	#__system___gc_docollect
1cfd0     0F 13 02 F6 | 	mov	arg01, local01
1cfd4     10 15 02 F6 | 	mov	arg02, local02
1cfd8     C0 FD BF FD | 	call	#__system___gc_tryalloc
1cfdc     FD 22 02 F6 | 	mov	local03, result1
1cfe0                 | LR__2780
1cfe0     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cfe4     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cfe8     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cfec     09 01 68 FC | 	wrlong	#0, arg01
1cff0     00 22 0E F2 | 	cmp	local03, #0 wz
1cff4     2C 00 90 AD |  if_e	jmp	#LR__2786
1cff8     04 1E 66 F0 | 	shl	local01, #4
1cffc     08 1E 86 F1 | 	sub	local01, #8
1d000     0F 25 52 F6 | 	abs	local04, local01 wc
1d004     02 24 46 F0 | 	shr	local04, #2
1d008     12 27 8A F6 | 	negc	local05, local04 wz
1d00c     11 29 02 F6 | 	mov	local06, local03
1d010     10 00 90 AD |  if_e	jmp	#LR__2785
1d014     97 06 48 FB | 	callpa	#(@LR__2783-@LR__2781)>>2,fcache_load_ptr_
1d018                 | LR__2781
1d018     13 05 D8 FC | 	rep	@LR__2784, local05
1d01c                 | LR__2782
1d01c     14 01 68 FC | 	wrlong	#0, local06
1d020     04 28 06 F1 | 	add	local06, #4
1d024                 | LR__2783
1d024                 | LR__2784
1d024                 | LR__2785
1d024                 | LR__2786
1d024     11 FB 01 F6 | 	mov	result1, local03
1d028                 | LR__2787
1d028     A7 F0 03 F6 | 	mov	ptra, fp
1d02c     B2 00 A0 FD | 	call	#popregs_
1d030                 | __system___gc_doalloc_ret
1d030     2D 00 64 FD | 	ret
1d034                 | 
1d034                 | __system___gc_isvalidptr
1d034     F8 16 06 F4 | 	bitl	arg03, #248
1d038     08 16 86 F1 | 	sub	arg03, #8
1d03c     09 17 52 F2 | 	cmps	arg03, arg01 wc
1d040     08 00 90 CD |  if_b	jmp	#LR__2790
1d044     0A 17 52 F2 | 	cmps	arg03, arg02 wc
1d048     08 00 90 CD |  if_b	jmp	#LR__2791
1d04c                 | LR__2790
1d04c     00 FA 05 F6 | 	mov	result1, #0
1d050     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
1d054                 | LR__2791
1d054     0B 01 02 F6 | 	mov	_var01, arg03
1d058     09 01 62 F5 | 	xor	_var01, arg01
1d05c     0F 00 CE F7 | 	test	_var01, #15 wz
1d060     00 FA 05 56 |  if_ne	mov	result1, #0
1d064     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
1d068     0B 01 02 F6 | 	mov	_var01, arg03
1d06c     02 00 06 F1 | 	add	_var01, #2
1d070     00 01 E2 FA | 	rdword	_var01, _var01
1d074     7F 00 00 FF 
1d078     C0 01 06 F5 | 	and	_var01, ##65472
1d07c     36 00 00 FF 
1d080     80 00 0E F2 | 	cmp	_var01, ##27776 wz
1d084     00 FA 05 56 |  if_ne	mov	result1, #0
1d088     0B FB 01 A6 |  if_e	mov	result1, arg03
1d08c                 | __system___gc_isvalidptr_ret
1d08c     2D 00 64 FD | 	ret
1d090                 | 
1d090                 | __system___gc_free
1d090     09 17 02 F6 | 	mov	arg03, arg01
1d094     6C FC BF FD | 	call	#__system___gc_ptrs
1d098     FD 12 02 F6 | 	mov	arg01, result1
1d09c     FE 14 02 F6 | 	mov	arg02, result2
1d0a0     90 FF BF FD | 	call	#__system___gc_isvalidptr
1d0a4     FD 14 0A F6 | 	mov	arg02, result1 wz
1d0a8     28 00 90 AD |  if_e	jmp	#LR__2800
1d0ac     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1d0b0     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1d0b4     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1d0b8     E0 C0 BF FD | 	call	#__system___lockmem
1d0bc     0A 13 02 F6 | 	mov	arg01, arg02
1d0c0     14 00 B0 FD | 	call	#__system___gc_dofree
1d0c4     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1d0c8     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1d0cc     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1d0d0     09 01 68 FC | 	wrlong	#0, arg01
1d0d4                 | LR__2800
1d0d4                 | __system___gc_free_ret
1d0d4     2D 00 64 FD | 	ret
1d0d8                 | 
1d0d8                 | __system___gc_dofree
1d0d8     06 4A 05 F6 | 	mov	COUNT_, #6
1d0dc     A8 00 A0 FD | 	call	#pushregs_
1d0e0     09 1F 02 F6 | 	mov	local01, arg01
1d0e4     1C FC BF FD | 	call	#__system___gc_ptrs
1d0e8     FD 20 02 F6 | 	mov	local02, result1
1d0ec     FE 22 02 F6 | 	mov	local03, result2
1d0f0     0F 15 02 F6 | 	mov	arg02, local01
1d0f4     02 14 06 F1 | 	add	arg02, #2
1d0f8     36 00 80 FF 
1d0fc     0A 1F 59 FC | 	wrword	##27791, arg02
1d100     0F 25 02 F6 | 	mov	local04, local01
1d104     0F 13 02 F6 | 	mov	arg01, local01
1d108     09 27 EA FA | 	rdword	local05, arg01 wz
1d10c     00 FA 05 A6 |  if_e	mov	result1, #0
1d110     04 26 66 50 |  if_ne	shl	local05, #4
1d114     13 13 02 51 |  if_ne	add	arg01, local05
1d118     09 FB 01 56 |  if_ne	mov	result1, arg01
1d11c     FD 28 02 F6 | 	mov	local06, result1
1d120     97 24 48 FB | 	callpa	#(@LR__2811-@LR__2810)>>2,fcache_load_ptr_
1d124                 | LR__2810
1d124     04 24 06 F1 | 	add	local04, #4
1d128     12 15 EA FA | 	rdword	arg02, local04 wz
1d12c     10 13 02 F6 | 	mov	arg01, local02
1d130     00 FA 05 A6 |  if_e	mov	result1, #0
1d134     04 14 66 50 |  if_ne	shl	arg02, #4
1d138     0A 13 02 51 |  if_ne	add	arg01, arg02
1d13c     09 FB 01 56 |  if_ne	mov	result1, arg01
1d140     FD 24 0A F6 | 	mov	local04, result1 wz
1d144     24 00 90 AD |  if_e	jmp	#LR__2812
1d148     12 13 02 F6 | 	mov	arg01, local04
1d14c     00 FA 05 F6 | 	mov	result1, #0
1d150     02 12 06 F1 | 	add	arg01, #2
1d154     09 13 E2 FA | 	rdword	arg01, arg01
1d158     36 00 00 FF 
1d15c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1d160     01 FA 65 A6 |  if_e	neg	result1, #1
1d164     00 FA 0D F2 | 	cmp	result1, #0 wz
1d168     B8 FF 9F AD |  if_e	jmp	#LR__2810
1d16c                 | LR__2811
1d16c                 | LR__2812
1d16c     00 24 0E F2 | 	cmp	local04, #0 wz
1d170     10 25 02 A6 |  if_e	mov	local04, local02
1d174     12 15 02 F6 | 	mov	arg02, local04
1d178     06 14 06 F1 | 	add	arg02, #6
1d17c     0F 13 02 F6 | 	mov	arg01, local01
1d180     0A 15 E2 FA | 	rdword	arg02, arg02
1d184     06 12 06 F1 | 	add	arg01, #6
1d188     09 15 52 FC | 	wrword	arg02, arg01
1d18c     0F 15 0A F6 | 	mov	arg02, local01 wz
1d190     00 FA 05 A6 |  if_e	mov	result1, #0
1d194     10 15 82 51 |  if_ne	sub	arg02, local02
1d198     04 14 46 50 |  if_ne	shr	arg02, #4
1d19c     0A FB 01 56 |  if_ne	mov	result1, arg02
1d1a0     12 15 02 F6 | 	mov	arg02, local04
1d1a4     06 14 06 F1 | 	add	arg02, #6
1d1a8     0A FB 51 FC | 	wrword	result1, arg02
1d1ac     10 25 0A F2 | 	cmp	local04, local02 wz
1d1b0     A4 00 90 AD |  if_e	jmp	#LR__2815
1d1b4     12 13 02 F6 | 	mov	arg01, local04
1d1b8     09 27 EA FA | 	rdword	local05, arg01 wz
1d1bc     00 FA 05 A6 |  if_e	mov	result1, #0
1d1c0     04 26 66 50 |  if_ne	shl	local05, #4
1d1c4     13 13 02 51 |  if_ne	add	arg01, local05
1d1c8     09 FB 01 56 |  if_ne	mov	result1, arg01
1d1cc     0F FB 09 F2 | 	cmp	result1, local01 wz
1d1d0     84 00 90 5D |  if_ne	jmp	#LR__2814
1d1d4     12 29 E2 FA | 	rdword	local06, local04
1d1d8     0F 15 E2 FA | 	rdword	arg02, local01
1d1dc     0A 29 02 F1 | 	add	local06, arg02
1d1e0     12 29 52 FC | 	wrword	local06, local04
1d1e4     0F 29 02 F6 | 	mov	local06, local01
1d1e8     02 28 06 F1 | 	add	local06, #2
1d1ec     14 01 58 FC | 	wrword	#0, local06
1d1f0     0F 13 02 F6 | 	mov	arg01, local01
1d1f4     09 27 EA FA | 	rdword	local05, arg01 wz
1d1f8     00 FA 05 A6 |  if_e	mov	result1, #0
1d1fc     04 26 66 50 |  if_ne	shl	local05, #4
1d200     13 13 02 51 |  if_ne	add	arg01, local05
1d204     09 FB 01 56 |  if_ne	mov	result1, arg01
1d208     FD 28 02 F6 | 	mov	local06, result1
1d20c     11 29 52 F2 | 	cmps	local06, local03 wc
1d210     20 00 90 3D |  if_ae	jmp	#LR__2813
1d214     12 15 0A F6 | 	mov	arg02, local04 wz
1d218     00 FA 05 A6 |  if_e	mov	result1, #0
1d21c     10 15 82 51 |  if_ne	sub	arg02, local02
1d220     04 14 46 50 |  if_ne	shr	arg02, #4
1d224     0A FB 01 56 |  if_ne	mov	result1, arg02
1d228     14 15 02 F6 | 	mov	arg02, local06
1d22c     04 14 06 F1 | 	add	arg02, #4
1d230     0A FB 51 FC | 	wrword	result1, arg02
1d234                 | LR__2813
1d234     0F 15 02 F6 | 	mov	arg02, local01
1d238     06 14 06 F1 | 	add	arg02, #6
1d23c     12 FD 01 F6 | 	mov	result2, local04
1d240     0A 15 E2 FA | 	rdword	arg02, arg02
1d244     06 FC 05 F1 | 	add	result2, #6
1d248     FE 14 52 FC | 	wrword	arg02, result2
1d24c     06 1E 06 F1 | 	add	local01, #6
1d250     0F 01 58 FC | 	wrword	#0, local01
1d254     12 1F 02 F6 | 	mov	local01, local04
1d258                 | LR__2814
1d258                 | LR__2815
1d258     0F 13 02 F6 | 	mov	arg01, local01
1d25c     09 27 EA FA | 	rdword	local05, arg01 wz
1d260     00 FA 05 A6 |  if_e	mov	result1, #0
1d264     04 26 66 50 |  if_ne	shl	local05, #4
1d268     13 13 02 51 |  if_ne	add	arg01, local05
1d26c     09 FB 01 56 |  if_ne	mov	result1, arg01
1d270     FD 14 0A F6 | 	mov	arg02, result1 wz
1d274     B8 00 90 AD |  if_e	jmp	#LR__2817
1d278     11 15 52 F2 | 	cmps	arg02, local03 wc
1d27c     B0 00 90 3D |  if_ae	jmp	#LR__2817
1d280     0A 13 02 F6 | 	mov	arg01, arg02
1d284     00 FA 05 F6 | 	mov	result1, #0
1d288     02 12 06 F1 | 	add	arg01, #2
1d28c     09 13 E2 FA | 	rdword	arg01, arg01
1d290     36 00 00 FF 
1d294     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1d298     01 FA 65 A6 |  if_e	neg	result1, #1
1d29c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d2a0     8C 00 90 AD |  if_e	jmp	#LR__2817
1d2a4     0F 25 02 F6 | 	mov	local04, local01
1d2a8     12 29 E2 FA | 	rdword	local06, local04
1d2ac     0A 13 02 F6 | 	mov	arg01, arg02
1d2b0     09 1F E2 FA | 	rdword	local01, arg01
1d2b4     0F 29 02 F1 | 	add	local06, local01
1d2b8     12 29 52 FC | 	wrword	local06, local04
1d2bc     09 29 02 F6 | 	mov	local06, arg01
1d2c0     06 28 06 F1 | 	add	local06, #6
1d2c4     12 1F 02 F6 | 	mov	local01, local04
1d2c8     14 29 E2 FA | 	rdword	local06, local06
1d2cc     06 1E 06 F1 | 	add	local01, #6
1d2d0     0F 29 52 FC | 	wrword	local06, local01
1d2d4     09 29 02 F6 | 	mov	local06, arg01
1d2d8     02 28 06 F1 | 	add	local06, #2
1d2dc     14 55 59 FC | 	wrword	#170, local06
1d2e0     09 29 02 F6 | 	mov	local06, arg01
1d2e4     06 28 06 F1 | 	add	local06, #6
1d2e8     14 01 58 FC | 	wrword	#0, local06
1d2ec     09 27 EA FA | 	rdword	local05, arg01 wz
1d2f0     00 FA 05 A6 |  if_e	mov	result1, #0
1d2f4     04 26 66 50 |  if_ne	shl	local05, #4
1d2f8     13 13 02 51 |  if_ne	add	arg01, local05
1d2fc     09 FB 01 56 |  if_ne	mov	result1, arg01
1d300     FD 28 0A F6 | 	mov	local06, result1 wz
1d304     28 00 90 AD |  if_e	jmp	#LR__2816
1d308     11 29 52 F2 | 	cmps	local06, local03 wc
1d30c     20 00 90 3D |  if_ae	jmp	#LR__2816
1d310     12 15 0A F6 | 	mov	arg02, local04 wz
1d314     00 FA 05 A6 |  if_e	mov	result1, #0
1d318     10 15 82 51 |  if_ne	sub	arg02, local02
1d31c     04 14 46 50 |  if_ne	shr	arg02, #4
1d320     0A FB 01 56 |  if_ne	mov	result1, arg02
1d324     14 25 02 F6 | 	mov	local04, local06
1d328     04 24 06 F1 | 	add	local04, #4
1d32c     12 FB 51 FC | 	wrword	result1, local04
1d330                 | LR__2816
1d330                 | LR__2817
1d330     14 FB 01 F6 | 	mov	result1, local06
1d334     A7 F0 03 F6 | 	mov	ptra, fp
1d338     B2 00 A0 FD | 	call	#popregs_
1d33c                 | __system___gc_dofree_ret
1d33c     2D 00 64 FD | 	ret
1d340                 | 
1d340                 | __system___gc_docollect
1d340     05 4A 05 F6 | 	mov	COUNT_, #5
1d344     A8 00 A0 FD | 	call	#pushregs_
1d348     B8 F9 BF FD | 	call	#__system___gc_ptrs
1d34c     FE 1E 02 F6 | 	mov	local01, result2
1d350     FD 20 02 F6 | 	mov	local02, result1
1d354     10 13 02 F6 | 	mov	arg01, local02
1d358     09 23 EA FA | 	rdword	local03, arg01 wz
1d35c     00 FA 05 A6 |  if_e	mov	result1, #0
1d360     04 22 66 50 |  if_ne	shl	local03, #4
1d364     11 13 02 51 |  if_ne	add	arg01, local03
1d368     09 FB 01 56 |  if_ne	mov	result1, arg01
1d36c     FD 24 0A F6 | 	mov	local04, result1 wz
1d370     00 FA 05 F6 | 	mov	result1, #0
1d374     01 FA 61 FD | 	cogid	result1
1d378     FD 26 02 F6 | 	mov	local05, result1
1d37c     48 00 90 AD |  if_e	jmp	#LR__2822
1d380     97 22 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
1d384                 | LR__2820
1d384     0F 25 52 F2 | 	cmps	local04, local01 wc
1d388     3C 00 90 3D |  if_ae	jmp	#LR__2822
1d38c     12 15 02 F6 | 	mov	arg02, local04
1d390     02 14 06 F1 | 	add	arg02, #2
1d394     0A 15 E2 FA | 	rdword	arg02, arg02
1d398     20 14 26 F5 | 	andn	arg02, #32
1d39c     12 13 02 F6 | 	mov	arg01, local04
1d3a0     02 12 06 F1 | 	add	arg01, #2
1d3a4     09 15 52 FC | 	wrword	arg02, arg01
1d3a8     12 13 02 F6 | 	mov	arg01, local04
1d3ac     09 23 EA FA | 	rdword	local03, arg01 wz
1d3b0     00 FA 05 A6 |  if_e	mov	result1, #0
1d3b4     04 22 66 50 |  if_ne	shl	local03, #4
1d3b8     11 13 02 51 |  if_ne	add	arg01, local03
1d3bc     09 FB 01 56 |  if_ne	mov	result1, arg01
1d3c0     FD 24 0A F6 | 	mov	local04, result1 wz
1d3c4     BC FF 9F 5D |  if_ne	jmp	#LR__2820
1d3c8                 | LR__2821
1d3c8                 | LR__2822
1d3c8     00 22 06 F6 | 	mov	local03, #0
1d3cc     00 12 06 F6 | 	mov	arg01, #0
1d3d0     A0 BD BF FD | 	call	#__system____topofstack
1d3d4     FD 14 02 F6 | 	mov	arg02, result1
1d3d8     11 13 02 F6 | 	mov	arg01, local03
1d3dc     90 00 B0 FD | 	call	#__system___gc_markhub
1d3e0     1C 01 B0 FD | 	call	#__system___gc_markcog
1d3e4     10 13 02 F6 | 	mov	arg01, local02
1d3e8     09 23 EA FA | 	rdword	local03, arg01 wz
1d3ec     00 FA 05 A6 |  if_e	mov	result1, #0
1d3f0     04 22 66 50 |  if_ne	shl	local03, #4
1d3f4     11 13 02 51 |  if_ne	add	arg01, local03
1d3f8     09 FB 01 56 |  if_ne	mov	result1, arg01
1d3fc     FD 20 0A F6 | 	mov	local02, result1 wz
1d400     60 00 90 AD |  if_e	jmp	#LR__2826
1d404                 | LR__2823
1d404     10 25 02 F6 | 	mov	local04, local02
1d408     12 13 02 F6 | 	mov	arg01, local04
1d40c     09 23 EA FA | 	rdword	local03, arg01 wz
1d410     00 FA 05 A6 |  if_e	mov	result1, #0
1d414     04 22 66 50 |  if_ne	shl	local03, #4
1d418     11 13 02 51 |  if_ne	add	arg01, local03
1d41c     09 FB 01 56 |  if_ne	mov	result1, arg01
1d420     FD 20 02 F6 | 	mov	local02, result1
1d424     12 15 02 F6 | 	mov	arg02, local04
1d428     02 14 06 F1 | 	add	arg02, #2
1d42c     0A 15 E2 FA | 	rdword	arg02, arg02
1d430     20 14 CE F7 | 	test	arg02, #32 wz
1d434     10 14 CE A7 |  if_e	test	arg02, #16 wz
1d438     1C 00 90 5D |  if_ne	jmp	#LR__2825
1d43c     0A 15 42 F8 | 	getnib	arg02, arg02, #0
1d440     13 15 0A F2 | 	cmp	arg02, local05 wz
1d444     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
1d448     0C 00 90 5D |  if_ne	jmp	#LR__2824
1d44c     12 13 02 F6 | 	mov	arg01, local04
1d450     84 FC BF FD | 	call	#__system___gc_dofree
1d454     FD 20 02 F6 | 	mov	local02, result1
1d458                 | LR__2824
1d458                 | LR__2825
1d458     00 20 0E F2 | 	cmp	local02, #0 wz
1d45c     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
1d460     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2823
1d464                 | LR__2826
1d464     A7 F0 03 F6 | 	mov	ptra, fp
1d468     B2 00 A0 FD | 	call	#popregs_
1d46c                 | __system___gc_docollect_ret
1d46c     2D 00 64 FD | 	ret
1d470                 | 
1d470                 | __system___gc_markhub
1d470     04 4A 05 F6 | 	mov	COUNT_, #4
1d474     A8 00 A0 FD | 	call	#pushregs_
1d478     09 1F 02 F6 | 	mov	local01, arg01
1d47c     0A 21 02 F6 | 	mov	local02, arg02
1d480     80 F8 BF FD | 	call	#__system___gc_ptrs
1d484     FD 22 02 F6 | 	mov	local03, result1
1d488     FE 24 02 F6 | 	mov	local04, result2
1d48c                 | LR__2830
1d48c     10 1F 52 F2 | 	cmps	local01, local02 wc
1d490     60 00 90 3D |  if_ae	jmp	#LR__2831
1d494     0F 17 02 FB | 	rdlong	arg03, local01
1d498     04 1E 06 F1 | 	add	local01, #4
1d49c     12 15 02 F6 | 	mov	arg02, local04
1d4a0     11 13 02 F6 | 	mov	arg01, local03
1d4a4     8C FB BF FD | 	call	#__system___gc_isvalidptr
1d4a8     FD 16 0A F6 | 	mov	arg03, result1 wz
1d4ac     DC FF 9F AD |  if_e	jmp	#LR__2830
1d4b0     0B 13 02 F6 | 	mov	arg01, arg03
1d4b4     00 FA 05 F6 | 	mov	result1, #0
1d4b8     02 12 06 F1 | 	add	arg01, #2
1d4bc     09 13 E2 FA | 	rdword	arg01, arg01
1d4c0     36 00 00 FF 
1d4c4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1d4c8     01 FA 65 A6 |  if_e	neg	result1, #1
1d4cc     00 FA 0D F2 | 	cmp	result1, #0 wz
1d4d0     B8 FF 9F 5D |  if_ne	jmp	#LR__2830
1d4d4     0B FD 01 F6 | 	mov	result2, arg03
1d4d8     02 FC 05 F1 | 	add	result2, #2
1d4dc     FE FC E1 FA | 	rdword	result2, result2
1d4e0     0F FC 25 F5 | 	andn	result2, #15
1d4e4     2E FC 45 F5 | 	or	result2, #46
1d4e8     02 16 06 F1 | 	add	arg03, #2
1d4ec     0B FD 51 FC | 	wrword	result2, arg03
1d4f0     98 FF 9F FD | 	jmp	#LR__2830
1d4f4                 | LR__2831
1d4f4     A7 F0 03 F6 | 	mov	ptra, fp
1d4f8     B2 00 A0 FD | 	call	#popregs_
1d4fc                 | __system___gc_markhub_ret
1d4fc     2D 00 64 FD | 	ret
1d500                 | 
1d500                 | __system___gc_markcog
1d500     04 4A 05 F6 | 	mov	COUNT_, #4
1d504     A8 00 A0 FD | 	call	#pushregs_
1d508     F8 F7 BF FD | 	call	#__system___gc_ptrs
1d50c     FD 1E 02 F6 | 	mov	local01, result1
1d510     FE 20 02 F6 | 	mov	local02, result2
1d514     EF 23 06 F6 | 	mov	local03, #495
1d518                 | LR__2840
1d518                 | 	'.live	local03
1d518     00 22 96 F9 | 	alts	local03, #0
1d51c     11 25 02 F6 | 	mov	local04, local03
1d520     0F 13 02 F6 | 	mov	arg01, local01
1d524     10 15 02 F6 | 	mov	arg02, local02
1d528     12 17 02 F6 | 	mov	arg03, local04
1d52c     04 FB BF FD | 	call	#__system___gc_isvalidptr
1d530     00 FA 0D F2 | 	cmp	result1, #0 wz
1d534     18 00 90 AD |  if_e	jmp	#LR__2841
1d538     FD 24 02 F6 | 	mov	local04, result1
1d53c     02 24 06 F1 | 	add	local04, #2
1d540     12 25 E2 FA | 	rdword	local04, local04
1d544     20 24 46 F5 | 	or	local04, #32
1d548     02 FA 05 F1 | 	add	result1, #2
1d54c     FD 24 52 FC | 	wrword	local04, result1
1d550                 | LR__2841
1d550     01 22 86 F1 | 	sub	local03, #1
1d554     00 22 56 F2 | 	cmps	local03, #0 wc
1d558     BC FF 9F 3D |  if_ae	jmp	#LR__2840
1d55c     A7 F0 03 F6 | 	mov	ptra, fp
1d560     B2 00 A0 FD | 	call	#popregs_
1d564                 | __system___gc_markcog_ret
1d564     2D 00 64 FD | 	ret
1d568                 | 
1d568                 | __system__opendir
1d568     06 4A 05 F6 | 	mov	COUNT_, #6
1d56c     A8 00 A0 FD | 	call	#pushregs_
1d570     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1d574     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
1d578     09 15 02 F6 | 	mov	arg02, arg01
1d57c     0F 13 02 F6 | 	mov	arg01, local01
1d580     00 16 06 F6 | 	mov	arg03, #0
1d584     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1d588     A8 C3 BF FD | 	call	#__system____getvfsforfile
1d58c     FD 20 0A F6 | 	mov	local02, result1 wz
1d590     10 00 90 AD |  if_e	jmp	#LR__2850
1d594     28 20 06 F1 | 	add	local02, #40
1d598     10 17 0A FB | 	rdlong	arg03, local02 wz
1d59c     28 20 86 F1 | 	sub	local02, #40
1d5a0     14 00 90 5D |  if_ne	jmp	#LR__2851
1d5a4                 | LR__2850
1d5a4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d5a8     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1d5ac     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d5b0     00 FA 05 F6 | 	mov	result1, #0
1d5b4     90 00 90 FD | 	jmp	#LR__2853
1d5b8                 | LR__2851
1d5b8     5C 12 06 F6 | 	mov	arg01, #92
1d5bc     10 14 06 F6 | 	mov	arg02, #16
1d5c0     C0 F9 BF FD | 	call	#__system___gc_doalloc
1d5c4     FD 22 0A F6 | 	mov	local03, result1 wz
1d5c8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d5cc     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
1d5d0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d5d4     00 FA 05 A6 |  if_e	mov	result1, #0
1d5d8     6C 00 90 AD |  if_e	jmp	#LR__2853
1d5dc     28 20 06 F1 | 	add	local02, #40
1d5e0     10 25 02 FB | 	rdlong	local04, local02
1d5e4     12 27 02 F6 | 	mov	local05, local04
1d5e8     28 20 86 F1 | 	sub	local02, #40
1d5ec     13 26 46 F7 | 	zerox	local05, #19
1d5f0     14 24 46 F0 | 	shr	local04, #20
1d5f4     02 24 66 F0 | 	shl	local04, #2
1d5f8     ED 24 02 F1 | 	add	local04, __methods__
1d5fc     12 25 02 FB | 	rdlong	local04, local04
1d600     11 13 02 F6 | 	mov	arg01, local03
1d604     0F 15 02 F6 | 	mov	arg02, local01
1d608     F2 28 02 F6 | 	mov	local06, objptr
1d60c     13 E5 01 F6 | 	mov	objptr, local05
1d610     2D 24 62 FD | 	call	local04
1d614     14 E5 01 F6 | 	mov	objptr, local06
1d618     FD 16 0A F6 | 	mov	arg03, result1 wz
1d61c     20 00 90 AD |  if_e	jmp	#LR__2852
1d620     00 16 4E F2 | 	cmps	arg03, #0 wz
1d624     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d628     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
1d62c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d630     11 13 02 F6 | 	mov	arg01, local03
1d634     58 FA BF FD | 	call	#__system___gc_free
1d638     00 FA 05 F6 | 	mov	result1, #0
1d63c     08 00 90 FD | 	jmp	#LR__2853
1d640                 | LR__2852
1d640     11 21 62 FC | 	wrlong	local02, local03
1d644     11 FB 01 F6 | 	mov	result1, local03
1d648                 | LR__2853
1d648     A7 F0 03 F6 | 	mov	ptra, fp
1d64c     B2 00 A0 FD | 	call	#popregs_
1d650                 | __system__opendir_ret
1d650     2D 00 64 FD | 	ret
1d654                 | 
1d654                 | __system__closedir
1d654     04 4A 05 F6 | 	mov	COUNT_, #4
1d658     A8 00 A0 FD | 	call	#pushregs_
1d65c     09 1F 02 F6 | 	mov	local01, arg01
1d660     0F 13 02 FB | 	rdlong	arg01, local01
1d664     2C 12 06 F1 | 	add	arg01, #44
1d668     09 21 02 FB | 	rdlong	local02, arg01
1d66c     10 23 02 F6 | 	mov	local03, local02
1d670     13 22 46 F7 | 	zerox	local03, #19
1d674     14 20 46 F0 | 	shr	local02, #20
1d678     02 20 66 F0 | 	shl	local02, #2
1d67c     ED 20 02 F1 | 	add	local02, __methods__
1d680     10 21 02 FB | 	rdlong	local02, local02
1d684     0F 13 02 F6 | 	mov	arg01, local01
1d688     F2 24 02 F6 | 	mov	local04, objptr
1d68c     11 E5 01 F6 | 	mov	objptr, local03
1d690     2D 20 62 FD | 	call	local02
1d694     12 E5 01 F6 | 	mov	objptr, local04
1d698     FD 24 02 F6 | 	mov	local04, result1
1d69c     0F 13 02 F6 | 	mov	arg01, local01
1d6a0     EC F9 BF FD | 	call	#__system___gc_free
1d6a4     00 24 4E F2 | 	cmps	local04, #0 wz
1d6a8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d6ac     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
1d6b0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d6b4     01 FA 65 56 |  if_ne	neg	result1, #1
1d6b8     00 FA 05 A6 |  if_e	mov	result1, #0
1d6bc     A7 F0 03 F6 | 	mov	ptra, fp
1d6c0     B2 00 A0 FD | 	call	#popregs_
1d6c4                 | __system__closedir_ret
1d6c4     2D 00 64 FD | 	ret
1d6c8                 | 
1d6c8                 | __system__readdir
1d6c8     04 4A 05 F6 | 	mov	COUNT_, #4
1d6cc     A8 00 A0 FD | 	call	#pushregs_
1d6d0     09 15 0A FB | 	rdlong	arg02, arg01 wz
1d6d4     08 12 06 F1 | 	add	arg01, #8
1d6d8     09 1F 02 F6 | 	mov	local01, arg01
1d6dc     08 12 86 F1 | 	sub	arg01, #8
1d6e0     00 FA 05 A6 |  if_e	mov	result1, #0
1d6e4     5C 00 90 AD |  if_e	jmp	#LR__2861
1d6e8     30 14 06 F1 | 	add	arg02, #48
1d6ec     0A 21 02 FB | 	rdlong	local02, arg02
1d6f0     10 23 02 F6 | 	mov	local03, local02
1d6f4     13 22 46 F7 | 	zerox	local03, #19
1d6f8     14 20 46 F0 | 	shr	local02, #20
1d6fc     02 20 66 F0 | 	shl	local02, #2
1d700     ED 20 02 F1 | 	add	local02, __methods__
1d704     10 21 02 FB | 	rdlong	local02, local02
1d708     0F 15 02 F6 | 	mov	arg02, local01
1d70c     F2 24 02 F6 | 	mov	local04, objptr
1d710     11 E5 01 F6 | 	mov	objptr, local03
1d714     2D 20 62 FD | 	call	local02
1d718     12 E5 01 F6 | 	mov	objptr, local04
1d71c     00 FA 4D F2 | 	cmps	result1, #0 wz
1d720     1C 00 90 AD |  if_e	jmp	#LR__2860
1d724     01 FA 55 F2 | 	cmps	result1, #1 wc
1d728     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
1d72c     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1d730     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
1d734     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1d738     00 FA 05 F6 | 	mov	result1, #0
1d73c     04 00 90 FD | 	jmp	#LR__2861
1d740                 | LR__2860
1d740     0F FB 01 F6 | 	mov	result1, local01
1d744                 | LR__2861
1d744     A7 F0 03 F6 | 	mov	ptra, fp
1d748     B2 00 A0 FD | 	call	#popregs_
1d74c                 | __system__readdir_ret
1d74c     2D 00 64 FD | 	ret
1d750                 | 
1d750                 | __system___openraw
1d750     15 4A 05 F6 | 	mov	COUNT_, #21
1d754     A8 00 A0 FD | 	call	#pushregs_
1d758     09 1F 02 F6 | 	mov	local01, arg01
1d75c     0A 21 02 F6 | 	mov	local02, arg02
1d760     0B 23 02 F6 | 	mov	local03, arg03
1d764     0C 25 02 F6 | 	mov	local04, arg04
1d768     04 26 06 F6 | 	mov	local05, #4
1d76c     0F 29 02 F6 | 	mov	local06, local01
1d770     00 2A 06 F6 | 	mov	local07, #0
1d774     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1d778     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
1d77c     16 13 02 F6 | 	mov	arg01, local08
1d780     10 15 02 F6 | 	mov	arg02, local02
1d784     00 16 06 F6 | 	mov	arg03, #0
1d788     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1d78c     A4 C1 BF FD | 	call	#__system____getvfsforfile
1d790     FD 2E 0A F6 | 	mov	local09, result1 wz
1d794     10 00 90 AD |  if_e	jmp	#LR__2870
1d798     20 2E 06 F1 | 	add	local09, #32
1d79c     17 FB 09 FB | 	rdlong	result1, local09 wz
1d7a0     20 2E 86 F1 | 	sub	local09, #32
1d7a4     14 00 90 5D |  if_ne	jmp	#LR__2871
1d7a8                 | LR__2870
1d7a8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d7ac     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1d7b0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d7b4     01 FA 65 F6 | 	neg	result1, #1
1d7b8     8C 02 90 FD | 	jmp	#LR__2884
1d7bc                 | LR__2871
1d7bc     14 13 02 F6 | 	mov	arg01, local06
1d7c0     00 14 06 F6 | 	mov	arg02, #0
1d7c4     34 16 06 F6 | 	mov	arg03, #52
1d7c8     09 31 02 F6 | 	mov	local10, arg01
1d7cc     98 00 A0 FD | 	call	#\builtin_bytefill_
1d7d0     20 2E 06 F1 | 	add	local09, #32
1d7d4     17 33 02 FB | 	rdlong	local11, local09
1d7d8     19 35 02 F6 | 	mov	local12, local11
1d7dc     19 37 02 F6 | 	mov	local13, local11
1d7e0     20 2E 86 F1 | 	sub	local09, #32
1d7e4     1B 39 02 F6 | 	mov	local14, local13
1d7e8     13 34 46 F7 | 	zerox	local12, #19
1d7ec     14 38 46 F0 | 	shr	local14, #20
1d7f0     02 38 66 F0 | 	shl	local14, #2
1d7f4     ED 38 02 F1 | 	add	local14, __methods__
1d7f8     1C 39 02 FB | 	rdlong	local14, local14
1d7fc     14 3B 02 F6 | 	mov	local15, local06
1d800     16 3D 02 F6 | 	mov	local16, local08
1d804     11 3F 02 F6 | 	mov	local17, local03
1d808     1D 13 02 F6 | 	mov	arg01, local15
1d80c     1E 15 02 F6 | 	mov	arg02, local16
1d810     1F 17 02 F6 | 	mov	arg03, local17
1d814     F2 40 02 F6 | 	mov	local18, objptr
1d818     1A E5 01 F6 | 	mov	objptr, local12
1d81c     2D 38 62 FD | 	call	local14
1d820     20 E5 01 F6 | 	mov	objptr, local18
1d824     FD 42 0A F6 | 	mov	local19, result1 wz
1d828     04 22 CE 57 |  if_ne	test	local03, #4 wz
1d82c     58 00 90 AD |  if_e	jmp	#LR__2872
1d830     24 2E 06 F1 | 	add	local09, #36
1d834     17 33 02 FB | 	rdlong	local11, local09
1d838     19 35 02 F6 | 	mov	local12, local11
1d83c     19 37 02 F6 | 	mov	local13, local11
1d840     24 2E 86 F1 | 	sub	local09, #36
1d844     1B 39 02 F6 | 	mov	local14, local13
1d848     13 34 46 F7 | 	zerox	local12, #19
1d84c     14 38 46 F0 | 	shr	local14, #20
1d850     02 38 66 F0 | 	shl	local14, #2
1d854     ED 38 02 F1 | 	add	local14, __methods__
1d858     1C 39 02 FB | 	rdlong	local14, local14
1d85c     14 3B 02 F6 | 	mov	local15, local06
1d860     16 3D 02 F6 | 	mov	local16, local08
1d864     12 3F 02 F6 | 	mov	local17, local04
1d868     1D 13 02 F6 | 	mov	arg01, local15
1d86c     1E 15 02 F6 | 	mov	arg02, local16
1d870     1F 17 02 F6 | 	mov	arg03, local17
1d874     F2 40 02 F6 | 	mov	local18, objptr
1d878     1A E5 01 F6 | 	mov	objptr, local12
1d87c     2D 38 62 FD | 	call	local14
1d880     20 E5 01 F6 | 	mov	objptr, local18
1d884     FD 42 02 F6 | 	mov	local19, result1
1d888                 | LR__2872
1d888     00 42 0E F2 | 	cmp	local19, #0 wz
1d88c     8C 01 90 5D |  if_ne	jmp	#LR__2882
1d890     11 45 02 F6 | 	mov	local20, local03
1d894     03 44 0E F5 | 	and	local20, #3 wz
1d898     02 26 46 55 |  if_ne	or	local05, #2
1d89c     01 44 0E F2 | 	cmp	local20, #1 wz
1d8a0     01 26 46 55 |  if_ne	or	local05, #1
1d8a4     20 22 CE F7 | 	test	local03, #32 wz
1d8a8     C0 26 46 55 |  if_ne	or	local05, #192
1d8ac     08 28 06 F1 | 	add	local06, #8
1d8b0     14 27 62 FC | 	wrlong	local05, local06
1d8b4     0C 28 06 F1 | 	add	local06, #12
1d8b8     14 47 0A FB | 	rdlong	local21, local06 wz
1d8bc     14 28 86 F1 | 	sub	local06, #20
1d8c0     18 00 90 5D |  if_ne	jmp	#LR__2873
1d8c4     04 2E 06 F1 | 	add	local09, #4
1d8c8     17 47 02 FB | 	rdlong	local21, local09
1d8cc     04 2E 86 F1 | 	sub	local09, #4
1d8d0     14 28 06 F1 | 	add	local06, #20
1d8d4     14 47 62 FC | 	wrlong	local21, local06
1d8d8     14 28 86 F1 | 	sub	local06, #20
1d8dc                 | LR__2873
1d8dc     18 28 06 F1 | 	add	local06, #24
1d8e0     14 47 0A FB | 	rdlong	local21, local06 wz
1d8e4     18 28 86 F1 | 	sub	local06, #24
1d8e8     18 00 90 5D |  if_ne	jmp	#LR__2874
1d8ec     08 2E 06 F1 | 	add	local09, #8
1d8f0     17 47 02 FB | 	rdlong	local21, local09
1d8f4     08 2E 86 F1 | 	sub	local09, #8
1d8f8     18 28 06 F1 | 	add	local06, #24
1d8fc     14 47 62 FC | 	wrlong	local21, local06
1d900     18 28 86 F1 | 	sub	local06, #24
1d904                 | LR__2874
1d904     24 28 06 F1 | 	add	local06, #36
1d908     14 47 0A FB | 	rdlong	local21, local06 wz
1d90c     24 28 86 F1 | 	sub	local06, #36
1d910     17 47 02 AB |  if_e	rdlong	local21, local09
1d914     24 28 06 A1 |  if_e	add	local06, #36
1d918     14 47 62 AC |  if_e	wrlong	local21, local06
1d91c     24 28 86 A1 |  if_e	sub	local06, #36
1d920     28 28 06 F1 | 	add	local06, #40
1d924     14 47 0A FB | 	rdlong	local21, local06 wz
1d928     28 28 86 F1 | 	sub	local06, #40
1d92c     18 00 90 5D |  if_ne	jmp	#LR__2875
1d930     10 2E 06 F1 | 	add	local09, #16
1d934     17 47 02 FB | 	rdlong	local21, local09
1d938     10 2E 86 F1 | 	sub	local09, #16
1d93c     28 28 06 F1 | 	add	local06, #40
1d940     14 47 62 FC | 	wrlong	local21, local06
1d944     28 28 86 F1 | 	sub	local06, #40
1d948                 | LR__2875
1d948     30 28 06 F1 | 	add	local06, #48
1d94c     14 47 0A FB | 	rdlong	local21, local06 wz
1d950     30 28 86 F1 | 	sub	local06, #48
1d954     18 00 90 5D |  if_ne	jmp	#LR__2876
1d958     0C 2E 06 F1 | 	add	local09, #12
1d95c     17 47 02 FB | 	rdlong	local21, local09
1d960     0C 2E 86 F1 | 	sub	local09, #12
1d964     30 28 06 F1 | 	add	local06, #48
1d968     14 47 62 FC | 	wrlong	local21, local06
1d96c     30 28 86 F1 | 	sub	local06, #48
1d970                 | LR__2876
1d970     1C 28 06 F1 | 	add	local06, #28
1d974     14 47 0A FB | 	rdlong	local21, local06 wz
1d978     1C 28 86 F1 | 	sub	local06, #28
1d97c     1C 00 90 5D |  if_ne	jmp	#LR__2877
1d980     01 2A 06 F6 | 	mov	local07, #1
1d984     F2 12 02 F6 | 	mov	arg01, objptr
1d988     00 68 03 FF 
1d98c     00 12 46 F5 | 	or	arg01, ##114294784
1d990     1C 28 06 F1 | 	add	local06, #28
1d994     14 13 62 FC | 	wrlong	arg01, local06
1d998     1C 28 86 F1 | 	sub	local06, #28
1d99c                 | LR__2877
1d99c     20 28 06 F1 | 	add	local06, #32
1d9a0     14 47 0A FB | 	rdlong	local21, local06 wz
1d9a4     20 28 86 F1 | 	sub	local06, #32
1d9a8     1C 00 90 5D |  if_ne	jmp	#LR__2878
1d9ac     01 2A 06 F6 | 	mov	local07, #1
1d9b0     F2 12 02 F6 | 	mov	arg01, objptr
1d9b4     00 70 03 FF 
1d9b8     00 12 46 F5 | 	or	arg01, ##115343360
1d9bc     20 28 06 F1 | 	add	local06, #32
1d9c0     14 13 62 FC | 	wrlong	arg01, local06
1d9c4     20 28 86 F1 | 	sub	local06, #32
1d9c8                 | LR__2878
1d9c8     2C 28 06 F1 | 	add	local06, #44
1d9cc     14 47 0A FB | 	rdlong	local21, local06 wz
1d9d0     2C 28 86 F1 | 	sub	local06, #44
1d9d4     44 00 90 5D |  if_ne	jmp	#LR__2881
1d9d8     14 2E 06 F1 | 	add	local09, #20
1d9dc     17 47 0A FB | 	rdlong	local21, local09 wz
1d9e0     14 2E 86 F1 | 	sub	local09, #20
1d9e4     18 00 90 AD |  if_e	jmp	#LR__2879
1d9e8     14 2E 06 F1 | 	add	local09, #20
1d9ec     17 47 02 FB | 	rdlong	local21, local09
1d9f0     2C 28 06 F1 | 	add	local06, #44
1d9f4     14 47 62 FC | 	wrlong	local21, local06
1d9f8     2C 28 86 F1 | 	sub	local06, #44
1d9fc     1C 00 90 FD | 	jmp	#LR__2880
1da00                 | LR__2879
1da00     01 2A 06 F6 | 	mov	local07, #1
1da04     F2 12 02 F6 | 	mov	arg01, objptr
1da08     00 78 03 FF 
1da0c     00 12 46 F5 | 	or	arg01, ##116391936
1da10     2C 28 06 F1 | 	add	local06, #44
1da14     14 13 62 FC | 	wrlong	arg01, local06
1da18     2C 28 86 F1 | 	sub	local06, #44
1da1c                 | LR__2880
1da1c                 | LR__2881
1da1c                 | LR__2882
1da1c     00 2A 0E F2 | 	cmp	local07, #0 wz
1da20     14 13 02 56 |  if_ne	mov	arg01, local06
1da24     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
1da28     00 42 0E F2 | 	cmp	local19, #0 wz
1da2c     00 12 06 A6 |  if_e	mov	arg01, #0
1da30     10 00 90 5D |  if_ne	jmp	#LR__2883
1da34     00 12 4E F2 | 	cmps	arg01, #0 wz
1da38     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1da3c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1da40     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1da44                 | LR__2883
1da44     21 FB 01 F6 | 	mov	result1, local19
1da48                 | LR__2884
1da48     A7 F0 03 F6 | 	mov	ptra, fp
1da4c     B2 00 A0 FD | 	call	#popregs_
1da50                 | __system___openraw_ret
1da50     2D 00 64 FD | 	ret
1da54                 | 
1da54                 | __system___closeraw
1da54     05 4A 05 F6 | 	mov	COUNT_, #5
1da58     A8 00 A0 FD | 	call	#pushregs_
1da5c     09 1F 02 F6 | 	mov	local01, arg01
1da60     00 20 06 F6 | 	mov	local02, #0
1da64     08 1E 06 F1 | 	add	local01, #8
1da68     0F FB 09 FB | 	rdlong	result1, local01 wz
1da6c     08 1E 86 F1 | 	sub	local01, #8
1da70     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1da74     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1da78     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1da7c     01 FA 65 A6 |  if_e	neg	result1, #1
1da80     A8 00 90 AD |  if_e	jmp	#LR__2892
1da84     2C 1E 06 F1 | 	add	local01, #44
1da88     0F FB 09 FB | 	rdlong	result1, local01 wz
1da8c     2C 1E 86 F1 | 	sub	local01, #44
1da90     38 00 90 AD |  if_e	jmp	#LR__2890
1da94     2C 1E 06 F1 | 	add	local01, #44
1da98     0F 23 02 FB | 	rdlong	local03, local01
1da9c     11 25 02 F6 | 	mov	local04, local03
1daa0     2C 1E 86 F1 | 	sub	local01, #44
1daa4     13 24 46 F7 | 	zerox	local04, #19
1daa8     14 22 46 F0 | 	shr	local03, #20
1daac     02 22 66 F0 | 	shl	local03, #2
1dab0     ED 22 02 F1 | 	add	local03, __methods__
1dab4     11 23 02 FB | 	rdlong	local03, local03
1dab8     0F 13 02 F6 | 	mov	arg01, local01
1dabc     F2 26 02 F6 | 	mov	local05, objptr
1dac0     12 E5 01 F6 | 	mov	objptr, local04
1dac4     2D 22 62 FD | 	call	local03
1dac8     13 E5 01 F6 | 	mov	objptr, local05
1dacc                 | LR__2890
1dacc     24 1E 06 F1 | 	add	local01, #36
1dad0     0F 27 0A FB | 	rdlong	local05, local01 wz
1dad4     24 1E 86 F1 | 	sub	local01, #36
1dad8     3C 00 90 AD |  if_e	jmp	#LR__2891
1dadc     24 1E 06 F1 | 	add	local01, #36
1dae0     0F 23 02 FB | 	rdlong	local03, local01
1dae4     11 25 02 F6 | 	mov	local04, local03
1dae8     24 1E 86 F1 | 	sub	local01, #36
1daec     13 24 46 F7 | 	zerox	local04, #19
1daf0     14 22 46 F0 | 	shr	local03, #20
1daf4     02 22 66 F0 | 	shl	local03, #2
1daf8     ED 22 02 F1 | 	add	local03, __methods__
1dafc     11 23 02 FB | 	rdlong	local03, local03
1db00     0F 13 02 F6 | 	mov	arg01, local01
1db04     F2 26 02 F6 | 	mov	local05, objptr
1db08     12 E5 01 F6 | 	mov	objptr, local04
1db0c     2D 22 62 FD | 	call	local03
1db10     13 E5 01 F6 | 	mov	objptr, local05
1db14     FD 20 02 F6 | 	mov	local02, result1
1db18                 | LR__2891
1db18     0F 13 02 F6 | 	mov	arg01, local01
1db1c     00 14 06 F6 | 	mov	arg02, #0
1db20     34 16 06 F6 | 	mov	arg03, #52
1db24     98 00 A0 FD | 	call	#\builtin_bytefill_
1db28     10 FB 01 F6 | 	mov	result1, local02
1db2c                 | LR__2892
1db2c     A7 F0 03 F6 | 	mov	ptra, fp
1db30     B2 00 A0 FD | 	call	#popregs_
1db34                 | __system___closeraw_ret
1db34     2D 00 64 FD | 	ret
1db38                 | 
1db38                 | __system___vfs_open_sdcardx
1db38     0B 4A 05 F6 | 	mov	COUNT_, #11
1db3c     A8 00 A0 FD | 	call	#pushregs_
1db40     09 23 02 F6 | 	mov	local03, arg01
1db44     0A 25 02 F6 | 	mov	local04, arg02
1db48     0B 27 02 F6 | 	mov	local05, arg03
1db4c     0C 29 02 F6 | 	mov	local06, arg04
1db50     01 00 00 FF 
1db54     24 12 06 F6 | 	mov	arg01, ##548
1db58     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
1db5c     FD 2A 02 F6 | 	mov	local07, result1
1db60     01 00 00 FF 
1db64     34 12 06 F6 | 	mov	arg01, ##564
1db68     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
1db6c     FD 2C 02 F6 | 	mov	local08, result1
1db70     11 19 02 F6 | 	mov	arg04, local03
1db74     1F 18 C6 F0 | 	sar	arg04, #31
1db78     11 17 02 F6 | 	mov	arg03, local03
1db7c     01 12 06 F6 | 	mov	arg01, #1
1db80     00 14 06 F6 | 	mov	arg02, #0
1db84     48 DC BF FD | 	call	#__system___int64_shl
1db88     FD 1E 02 F6 | 	mov	local01, result1
1db8c     FE 2E 02 F6 | 	mov	local09, result2
1db90     12 19 02 F6 | 	mov	arg04, local04
1db94     1F 18 C6 F0 | 	sar	arg04, #31
1db98     12 17 02 F6 | 	mov	arg03, local04
1db9c     01 12 06 F6 | 	mov	arg01, #1
1dba0     00 14 06 F6 | 	mov	arg02, #0
1dba4     28 DC BF FD | 	call	#__system___int64_shl
1dba8     FD 1E 42 F5 | 	or	local01, result1
1dbac     FE 2E 42 F5 | 	or	local09, result2
1dbb0     13 19 02 F6 | 	mov	arg04, local05
1dbb4     1F 18 C6 F0 | 	sar	arg04, #31
1dbb8     13 17 02 F6 | 	mov	arg03, local05
1dbbc     01 12 06 F6 | 	mov	arg01, #1
1dbc0     00 14 06 F6 | 	mov	arg02, #0
1dbc4     08 DC BF FD | 	call	#__system___int64_shl
1dbc8     FD 1E 42 F5 | 	or	local01, result1
1dbcc     FE 2E 42 F5 | 	or	local09, result2
1dbd0     14 19 02 F6 | 	mov	arg04, local06
1dbd4     1F 18 C6 F0 | 	sar	arg04, #31
1dbd8     14 17 02 F6 | 	mov	arg03, local06
1dbdc     01 12 06 F6 | 	mov	arg01, #1
1dbe0     00 14 06 F6 | 	mov	arg02, #0
1dbe4     E8 DB BF FD | 	call	#__system___int64_shl
1dbe8     17 15 02 F6 | 	mov	arg02, local09
1dbec     FD 1E 42 F5 | 	or	local01, result1
1dbf0     0A FD 41 F5 | 	or	result2, arg02
1dbf4     FE 20 02 F6 | 	mov	local02, result2
1dbf8     0F 13 02 F6 | 	mov	arg01, local01
1dbfc     10 15 02 F6 | 	mov	arg02, local02
1dc00     04 DC BF FD | 	call	#__system___usepins
1dc04     00 FA 0D F2 | 	cmp	result1, #0 wz
1dc08     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1dc0c     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
1dc10     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1dc14     00 FA 05 A6 |  if_e	mov	result1, #0
1dc18     B4 00 90 AD |  if_e	jmp	#LR__2902
1dc1c     0F 31 02 F6 | 	mov	local10, local01
1dc20     10 2F 02 F6 | 	mov	local09, local02
1dc24     01 00 00 FF 
1dc28     08 2A 06 F1 | 	add	local07, ##520
1dc2c     15 31 62 FC | 	wrlong	local10, local07
1dc30     04 2A 06 F1 | 	add	local07, #4
1dc34     15 2F 62 FC | 	wrlong	local09, local07
1dc38     01 00 00 FF 
1dc3c     0C 2A 86 F1 | 	sub	local07, ##524
1dc40     14 1B 02 F6 | 	mov	arg05, local06
1dc44     00 12 06 F6 | 	mov	arg01, #0
1dc48     11 15 02 F6 | 	mov	arg02, local03
1dc4c     12 17 02 F6 | 	mov	arg03, local04
1dc50     13 19 02 F6 | 	mov	arg04, local05
1dc54     F2 30 02 F6 | 	mov	local10, objptr
1dc58     15 E5 01 F6 | 	mov	objptr, local07
1dc5c     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
1dc60     18 E5 01 F6 | 	mov	objptr, local10
1dc64     FD 32 0A F6 | 	mov	local11, result1 wz
1dc68     24 00 90 5D |  if_ne	jmp	#LR__2900
1dc6c     43 01 00 FF 
1dc70     0E 15 06 F6 | 	mov	arg02, ##@LR__4297
1dc74     16 13 02 F6 | 	mov	arg01, local08
1dc78     00 16 06 F6 | 	mov	arg03, #0
1dc7c     F2 32 02 F6 | 	mov	local11, objptr
1dc80     15 E5 01 F6 | 	mov	objptr, local07
1dc84     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
1dc88     19 E5 01 F6 | 	mov	objptr, local11
1dc8c     FD 32 02 F6 | 	mov	local11, result1
1dc90                 | LR__2900
1dc90     00 32 0E F2 | 	cmp	local11, #0 wz
1dc94     24 00 90 AD |  if_e	jmp	#LR__2901
1dc98     0F 13 02 F6 | 	mov	arg01, local01
1dc9c     10 15 02 F6 | 	mov	arg02, local02
1dca0     B8 DB BF FD | 	call	#__system___freepins
1dca4     19 13 6A F6 | 	neg	arg01, local11 wz
1dca8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1dcac     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1dcb0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1dcb4     00 FA 05 F6 | 	mov	result1, #0
1dcb8     14 00 90 FD | 	jmp	#LR__2902
1dcbc                 | LR__2901
1dcbc     15 13 02 F6 | 	mov	arg01, local07
1dcc0     F2 32 02 F6 | 	mov	local11, objptr
1dcc4     15 E5 01 F6 | 	mov	objptr, local07
1dcc8     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
1dccc     19 E5 01 F6 | 	mov	objptr, local11
1dcd0                 | LR__2902
1dcd0     A7 F0 03 F6 | 	mov	ptra, fp
1dcd4     B2 00 A0 FD | 	call	#popregs_
1dcd8                 | __system___vfs_open_sdcardx_ret
1dcd8     2D 00 64 FD | 	ret
1dcdc                 | 
1dcdc                 | __system____default_getc
1dcdc     03 4A 05 F6 | 	mov	COUNT_, #3
1dce0     A8 00 A0 FD | 	call	#pushregs_
1dce4     09 1F 02 F6 | 	mov	local01, arg01
1dce8     0F 21 02 FB | 	rdlong	local02, local01
1dcec     08 20 06 F1 | 	add	local02, #8
1dcf0     10 23 02 FB | 	rdlong	local03, local02
1dcf4     02 22 CE F7 | 	test	local03, #2 wz
1dcf8     0F 13 02 56 |  if_ne	mov	arg01, local01
1dcfc     00 01 B0 5D |  if_ne	call	#__system____default_flush
1dd00     10 23 02 FB | 	rdlong	local03, local02
1dd04     01 22 46 F5 | 	or	local03, #1
1dd08     10 23 62 FC | 	wrlong	local03, local02
1dd0c     08 20 86 F1 | 	sub	local02, #8
1dd10     10 23 0A FB | 	rdlong	local03, local02 wz
1dd14     0C 00 90 5D |  if_ne	jmp	#LR__2910
1dd18     0F 13 02 F6 | 	mov	arg01, local01
1dd1c     64 16 B0 FD | 	call	#__system____default_filbuf
1dd20     FD 22 02 F6 | 	mov	local03, result1
1dd24                 | LR__2910
1dd24     01 22 56 F2 | 	cmps	local03, #1 wc
1dd28     01 FA 65 C6 |  if_b	neg	result1, #1
1dd2c     1C 00 90 CD |  if_b	jmp	#LR__2911
1dd30     01 22 86 F1 | 	sub	local03, #1
1dd34     10 23 62 FC | 	wrlong	local03, local02
1dd38     04 20 06 F1 | 	add	local02, #4
1dd3c     10 23 02 FB | 	rdlong	local03, local02
1dd40     11 FB C1 FA | 	rdbyte	result1, local03
1dd44     01 22 06 F1 | 	add	local03, #1
1dd48     10 23 62 FC | 	wrlong	local03, local02
1dd4c                 | LR__2911
1dd4c     A7 F0 03 F6 | 	mov	ptra, fp
1dd50     B2 00 A0 FD | 	call	#popregs_
1dd54                 | __system____default_getc_ret
1dd54     2D 00 64 FD | 	ret
1dd58                 | 
1dd58                 | __system____default_putc
1dd58     06 4A 05 F6 | 	mov	COUNT_, #6
1dd5c     A8 00 A0 FD | 	call	#pushregs_
1dd60     09 1F 02 F6 | 	mov	local01, arg01
1dd64     0A 21 02 F6 | 	mov	local02, arg02
1dd68     10 23 02 FB | 	rdlong	local03, local02
1dd6c     08 22 06 F1 | 	add	local03, #8
1dd70     11 FB 01 FB | 	rdlong	result1, local03
1dd74     01 FA CD F7 | 	test	result1, #1 wz
1dd78     10 13 02 56 |  if_ne	mov	arg01, local02
1dd7c     80 00 B0 5D |  if_ne	call	#__system____default_flush
1dd80     11 25 02 FB | 	rdlong	local04, local03
1dd84     02 24 46 F5 | 	or	local04, #2
1dd88     11 25 62 FC | 	wrlong	local04, local03
1dd8c     08 22 86 F1 | 	sub	local03, #8
1dd90     11 27 02 FB | 	rdlong	local05, local03
1dd94     10 22 06 F1 | 	add	local03, #16
1dd98     11 15 02 FB | 	rdlong	arg02, local03
1dd9c     10 22 86 F1 | 	sub	local03, #16
1dda0     13 FB 01 F6 | 	mov	result1, local05
1dda4     0A FB 01 F1 | 	add	result1, arg02
1dda8     FD 1E 42 FC | 	wrbyte	local01, result1
1ddac     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1ddb0     01 26 06 F1 | 	add	local05, #1
1ddb4     11 27 62 FC | 	wrlong	local05, local03
1ddb8     06 20 06 F1 | 	add	local02, #6
1ddbc     10 29 EA FA | 	rdword	local06, local02 wz
1ddc0     06 20 86 F1 | 	sub	local02, #6
1ddc4     0C 22 06 51 |  if_ne	add	local03, #12
1ddc8     11 25 02 5B |  if_ne	rdlong	local04, local03
1ddcc     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1ddd0     0C 00 90 AD |  if_e	jmp	#LR__2920
1ddd4     0A 1E 0E F2 | 	cmp	local01, #10 wz
1ddd8     01 28 0E A2 |  if_e	cmp	local06, #1 wz
1dddc     10 00 90 5D |  if_ne	jmp	#LR__2921
1dde0                 | LR__2920
1dde0     10 13 02 F6 | 	mov	arg01, local02
1dde4     18 00 B0 FD | 	call	#__system____default_flush
1dde8     00 FA 0D F2 | 	cmp	result1, #0 wz
1ddec     01 1E 66 56 |  if_ne	neg	local01, #1
1ddf0                 | LR__2921
1ddf0     0F FB 01 F6 | 	mov	result1, local01
1ddf4     A7 F0 03 F6 | 	mov	ptra, fp
1ddf8     B2 00 A0 FD | 	call	#popregs_
1ddfc                 | __system____default_putc_ret
1ddfc     2D 00 64 FD | 	ret
1de00                 | 
1de00                 | __system____default_flush
1de00     06 4A 05 F6 | 	mov	COUNT_, #6
1de04     A8 00 A0 FD | 	call	#pushregs_
1de08     09 1F 02 F6 | 	mov	local01, arg01
1de0c     0F 21 02 FB | 	rdlong	local02, local01
1de10     10 23 02 FB | 	rdlong	local03, local02
1de14     08 20 06 F1 | 	add	local02, #8
1de18     10 FB 01 FB | 	rdlong	result1, local02
1de1c     08 20 86 F1 | 	sub	local02, #8
1de20     02 FA CD F7 | 	test	result1, #2 wz
1de24     D0 00 90 AD |  if_e	jmp	#LR__2932
1de28     01 22 56 F2 | 	cmps	local03, #1 wc
1de2c     20 01 90 CD |  if_b	jmp	#LR__2934
1de30     08 1E 06 F1 | 	add	local01, #8
1de34     0F FB 01 FB | 	rdlong	result1, local01
1de38     08 1E 86 F1 | 	sub	local01, #8
1de3c     40 FA CD F7 | 	test	result1, #64 wz
1de40     68 00 90 AD |  if_e	jmp	#LR__2931
1de44     08 1E 06 F1 | 	add	local01, #8
1de48     0F 17 02 FB | 	rdlong	arg03, local01
1de4c     08 1E 86 F1 | 	sub	local01, #8
1de50     80 16 CE F7 | 	test	arg03, #128 wz
1de54     54 00 90 AD |  if_e	jmp	#LR__2930
1de58     30 1E 06 F1 | 	add	local01, #48
1de5c     0F 25 02 FB | 	rdlong	local04, local01
1de60     12 27 02 F6 | 	mov	local05, local04
1de64     30 1E 86 F1 | 	sub	local01, #48
1de68     13 26 46 F7 | 	zerox	local05, #19
1de6c     14 24 46 F0 | 	shr	local04, #20
1de70     02 24 66 F0 | 	shl	local04, #2
1de74     ED 24 02 F1 | 	add	local04, __methods__
1de78     12 25 02 FB | 	rdlong	local04, local04
1de7c     0F 13 02 F6 | 	mov	arg01, local01
1de80     00 14 06 F6 | 	mov	arg02, #0
1de84     02 16 06 F6 | 	mov	arg03, #2
1de88     F2 28 02 F6 | 	mov	local06, objptr
1de8c     13 E5 01 F6 | 	mov	objptr, local05
1de90     2D 24 62 FD | 	call	local04
1de94     14 E5 01 F6 | 	mov	objptr, local06
1de98     08 1E 06 F1 | 	add	local01, #8
1de9c     0F 29 02 FB | 	rdlong	local06, local01
1dea0     80 28 26 F5 | 	andn	local06, #128
1dea4     0F 29 62 FC | 	wrlong	local06, local01
1dea8     08 1E 86 F1 | 	sub	local01, #8
1deac                 | LR__2930
1deac                 | LR__2931
1deac     18 1E 06 F1 | 	add	local01, #24
1deb0     0F 25 02 FB | 	rdlong	local04, local01
1deb4     12 27 02 F6 | 	mov	local05, local04
1deb8     18 1E 86 F1 | 	sub	local01, #24
1debc     13 26 46 F7 | 	zerox	local05, #19
1dec0     14 24 46 F0 | 	shr	local04, #20
1dec4     02 24 66 F0 | 	shl	local04, #2
1dec8     ED 24 02 F1 | 	add	local04, __methods__
1decc     12 25 02 FB | 	rdlong	local04, local04
1ded0     10 20 06 F1 | 	add	local02, #16
1ded4     10 15 02 FB | 	rdlong	arg02, local02
1ded8     10 20 86 F1 | 	sub	local02, #16
1dedc     0F 13 02 F6 | 	mov	arg01, local01
1dee0     11 17 02 F6 | 	mov	arg03, local03
1dee4     F2 28 02 F6 | 	mov	local06, objptr
1dee8     13 E5 01 F6 | 	mov	objptr, local05
1deec     2D 24 62 FD | 	call	local04
1def0     14 E5 01 F6 | 	mov	objptr, local06
1def4     58 00 90 FD | 	jmp	#LR__2934
1def8                 | LR__2932
1def8     08 20 06 F1 | 	add	local02, #8
1defc     10 29 02 FB | 	rdlong	local06, local02
1df00     08 20 86 F1 | 	sub	local02, #8
1df04     01 28 CE F7 | 	test	local06, #1 wz
1df08     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1df0c     40 00 90 AD |  if_e	jmp	#LR__2933
1df10     30 1E 06 F1 | 	add	local01, #48
1df14     0F 25 02 FB | 	rdlong	local04, local01
1df18     12 27 02 F6 | 	mov	local05, local04
1df1c     30 1E 86 F1 | 	sub	local01, #48
1df20     13 26 46 F7 | 	zerox	local05, #19
1df24     14 24 46 F0 | 	shr	local04, #20
1df28     02 24 66 F0 | 	shl	local04, #2
1df2c     ED 24 02 F1 | 	add	local04, __methods__
1df30     12 25 02 FB | 	rdlong	local04, local04
1df34     0F 13 02 F6 | 	mov	arg01, local01
1df38     11 15 62 F6 | 	neg	arg02, local03
1df3c     01 16 06 F6 | 	mov	arg03, #1
1df40     F2 28 02 F6 | 	mov	local06, objptr
1df44     13 E5 01 F6 | 	mov	objptr, local05
1df48     2D 24 62 FD | 	call	local04
1df4c     14 E5 01 F6 | 	mov	objptr, local06
1df50                 | LR__2933
1df50                 | LR__2934
1df50     10 01 68 FC | 	wrlong	#0, local02
1df54     04 20 06 F1 | 	add	local02, #4
1df58     10 01 68 FC | 	wrlong	#0, local02
1df5c     04 20 06 F1 | 	add	local02, #4
1df60     10 01 68 FC | 	wrlong	#0, local02
1df64     00 FA 05 F6 | 	mov	result1, #0
1df68     A7 F0 03 F6 | 	mov	ptra, fp
1df6c     B2 00 A0 FD | 	call	#popregs_
1df70                 | __system____default_flush_ret
1df70     2D 00 64 FD | 	ret
1df74                 | 
1df74                 | __system____default_buffer_init
1df74     02 4A 05 F6 | 	mov	COUNT_, #2
1df78     A8 00 A0 FD | 	call	#pushregs_
1df7c     09 1F 02 F6 | 	mov	local01, arg01
1df80     0F 21 02 FB | 	rdlong	local02, local01
1df84     0F 13 02 F6 | 	mov	arg01, local01
1df88     F8 02 B0 FD | 	call	#__system___isatty
1df8c     00 FA 0D F2 | 	cmp	result1, #0 wz
1df90     06 1E 06 51 |  if_ne	add	local01, #6
1df94     0F 0B 58 5C |  if_ne	wrword	#5, local01
1df98     06 1E 06 A1 |  if_e	add	local01, #6
1df9c     0F 0D 58 AC |  if_e	wrword	#6, local01
1dfa0     14 20 06 F1 | 	add	local02, #20
1dfa4     10 1F 02 F6 | 	mov	local01, local02
1dfa8     04 20 86 F1 | 	sub	local02, #4
1dfac     10 1F 62 FC | 	wrlong	local01, local02
1dfb0     04 20 86 F1 | 	sub	local02, #4
1dfb4     02 00 80 FF 
1dfb8     10 01 68 FC | 	wrlong	##1024, local02
1dfbc     00 FA 05 F6 | 	mov	result1, #0
1dfc0     A7 F0 03 F6 | 	mov	ptra, fp
1dfc4     B2 00 A0 FD | 	call	#popregs_
1dfc8                 | __system____default_buffer_init_ret
1dfc8     2D 00 64 FD | 	ret
1dfcc                 | 
1dfcc                 | __system__stat
1dfcc     04 4A 05 F6 | 	mov	COUNT_, #4
1dfd0     A8 00 A0 FD | 	call	#pushregs_
1dfd4     0A 1F 02 F6 | 	mov	local01, arg02
1dfd8     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1dfdc     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
1dfe0     09 15 02 F6 | 	mov	arg02, arg01
1dfe4     10 13 02 F6 | 	mov	arg01, local02
1dfe8     00 16 06 F6 | 	mov	arg03, #0
1dfec     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1dff0     40 B9 BF FD | 	call	#__system____getvfsforfile
1dff4     FD 22 0A F6 | 	mov	local03, result1 wz
1dff8     10 00 90 AD |  if_e	jmp	#LR__2940
1dffc     34 22 06 F1 | 	add	local03, #52
1e000     11 17 0A FB | 	rdlong	arg03, local03 wz
1e004     34 22 86 F1 | 	sub	local03, #52
1e008     14 00 90 5D |  if_ne	jmp	#LR__2941
1e00c                 | LR__2940
1e00c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1e010     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1e014     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1e018     01 FA 65 F6 | 	neg	result1, #1
1e01c     68 00 90 FD | 	jmp	#LR__2942
1e020                 | LR__2941
1e020     0F 13 02 F6 | 	mov	arg01, local01
1e024     00 14 06 F6 | 	mov	arg02, #0
1e028     30 16 06 F6 | 	mov	arg03, #48
1e02c     09 25 02 F6 | 	mov	local04, arg01
1e030     98 00 A0 FD | 	call	#\builtin_bytefill_
1e034     12 FB 01 F6 | 	mov	result1, local04
1e038     10 13 CA FA | 	rdbyte	arg01, local02 wz
1e03c     08 1E 06 A1 |  if_e	add	local01, #8
1e040     08 00 80 AF 
1e044     0F FF 6B AC |  if_e	wrlong	##4607, local01
1e048     00 FA 05 A6 |  if_e	mov	result1, #0
1e04c     38 00 90 AD |  if_e	jmp	#LR__2942
1e050     34 22 06 F1 | 	add	local03, #52
1e054     11 23 02 FB | 	rdlong	local03, local03
1e058     11 25 02 F6 | 	mov	local04, local03
1e05c     13 22 46 F7 | 	zerox	local03, #19
1e060     14 24 46 F0 | 	shr	local04, #20
1e064     02 24 66 F0 | 	shl	local04, #2
1e068     ED 24 02 F1 | 	add	local04, __methods__
1e06c     12 25 02 FB | 	rdlong	local04, local04
1e070     10 13 02 F6 | 	mov	arg01, local02
1e074     0F 15 02 F6 | 	mov	arg02, local01
1e078     F2 20 02 F6 | 	mov	local02, objptr
1e07c     11 E5 01 F6 | 	mov	objptr, local03
1e080     2D 24 62 FD | 	call	local04
1e084     10 E5 01 F6 | 	mov	objptr, local02
1e088                 | LR__2942
1e088     A7 F0 03 F6 | 	mov	ptra, fp
1e08c     B2 00 A0 FD | 	call	#popregs_
1e090                 | __system__stat_ret
1e090     2D 00 64 FD | 	ret
1e094                 | 
1e094                 | __system__read
1e094     0A 12 16 F2 | 	cmp	arg01, #10 wc
1e098     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1e09c     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1e0a0     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1e0a4     01 FA 65 36 |  if_ae	neg	result1, #1
1e0a8     20 00 90 3D |  if_ae	jmp	#LR__2950
1e0ac     34 12 06 FD | 	qmul	arg01, #52
1e0b0     02 00 00 FF 
1e0b4     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1e0b8     18 12 62 FD | 	getqx	arg01
1e0bc     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1e0c0     02 00 00 FF 
1e0c4     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1e0c8     D0 0F B0 FD | 	call	#__system___vfsread
1e0cc                 | LR__2950
1e0cc                 | __system__read_ret
1e0cc     2D 00 64 FD | 	ret
1e0d0                 | 
1e0d0                 | __system__close
1e0d0     0A 12 16 F2 | 	cmp	arg01, #10 wc
1e0d4     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1e0d8     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1e0dc     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1e0e0     01 FA 65 36 |  if_ae	neg	result1, #1
1e0e4     20 00 90 3D |  if_ae	jmp	#LR__2960
1e0e8     34 12 06 FD | 	qmul	arg01, #52
1e0ec     02 00 00 FF 
1e0f0     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1e0f4     18 12 62 FD | 	getqx	arg01
1e0f8     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1e0fc     02 00 00 FF 
1e100     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1e104     4C F9 BF FD | 	call	#__system___closeraw
1e108                 | LR__2960
1e108                 | __system__close_ret
1e108     2D 00 64 FD | 	ret
1e10c                 | 
1e10c                 | __system__lseek
1e10c     06 4A 05 F6 | 	mov	COUNT_, #6
1e110     A8 00 A0 FD | 	call	#pushregs_
1e114     0A 12 16 F2 | 	cmp	arg01, #10 wc
1e118     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1e11c     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1e120     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1e124     01 FA 65 36 |  if_ae	neg	result1, #1
1e128     C4 00 90 3D |  if_ae	jmp	#LR__2971
1e12c     34 12 06 FD | 	qmul	arg01, #52
1e130     02 00 00 FF 
1e134     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1e138     18 1E 62 FD | 	getqx	local01
1e13c     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
1e140     30 1E 06 F1 | 	add	local01, #48
1e144     0F 13 0A FB | 	rdlong	arg01, local01 wz
1e148     30 1E 86 F1 | 	sub	local01, #48
1e14c     02 00 00 FF 
1e150     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1e154     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1e158     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1e15c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1e160     01 FA 65 A6 |  if_e	neg	result1, #1
1e164     88 00 90 AD |  if_e	jmp	#LR__2971
1e168     08 1E 06 F1 | 	add	local01, #8
1e16c     0F 21 02 FB | 	rdlong	local02, local01
1e170     08 1E 86 F1 | 	sub	local01, #8
1e174     40 20 CE F7 | 	test	local02, #64 wz
1e178     08 1E 06 51 |  if_ne	add	local01, #8
1e17c     0F 21 02 5B |  if_ne	rdlong	local02, local01
1e180     80 20 46 55 |  if_ne	or	local02, #128
1e184     0F 21 62 5C |  if_ne	wrlong	local02, local01
1e188     08 1E 86 51 |  if_ne	sub	local01, #8
1e18c     30 1E 06 F1 | 	add	local01, #48
1e190     0F 23 02 FB | 	rdlong	local03, local01
1e194     11 25 02 F6 | 	mov	local04, local03
1e198     30 1E 86 F1 | 	sub	local01, #48
1e19c     13 24 46 F7 | 	zerox	local04, #19
1e1a0     14 22 46 F0 | 	shr	local03, #20
1e1a4     02 22 66 F0 | 	shl	local03, #2
1e1a8     ED 22 02 F1 | 	add	local03, __methods__
1e1ac     11 23 02 FB | 	rdlong	local03, local03
1e1b0     0F 13 02 F6 | 	mov	arg01, local01
1e1b4     F2 26 02 F6 | 	mov	local05, objptr
1e1b8     12 E5 01 F6 | 	mov	objptr, local04
1e1bc     2D 22 62 FD | 	call	local03
1e1c0     13 E5 01 F6 | 	mov	objptr, local05
1e1c4     FD 28 02 F6 | 	mov	local06, result1
1e1c8     00 28 56 F2 | 	cmps	local06, #0 wc
1e1cc     1C 00 90 3D |  if_ae	jmp	#LR__2970
1e1d0     14 13 6A F6 | 	neg	arg01, local06 wz
1e1d4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1e1d8     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1e1dc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1e1e0     01 FA 65 56 |  if_ne	neg	result1, #1
1e1e4     00 FA 05 A6 |  if_e	mov	result1, #0
1e1e8     04 00 90 FD | 	jmp	#LR__2971
1e1ec                 | LR__2970
1e1ec     14 FB 01 F6 | 	mov	result1, local06
1e1f0                 | LR__2971
1e1f0     A7 F0 03 F6 | 	mov	ptra, fp
1e1f4     B2 00 A0 FD | 	call	#popregs_
1e1f8                 | __system__lseek_ret
1e1f8     2D 00 64 FD | 	ret
1e1fc                 | 
1e1fc                 | __system___ioctl
1e1fc     03 4A 05 F6 | 	mov	COUNT_, #3
1e200     A8 00 A0 FD | 	call	#pushregs_
1e204     00 12 4E F2 | 	cmps	arg01, #0 wz
1e208     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1e20c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1e210     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1e214     01 FA 65 A6 |  if_e	neg	result1, #1
1e218     5C 00 90 AD |  if_e	jmp	#LR__2981
1e21c     28 12 06 F1 | 	add	arg01, #40
1e220     09 1F 02 FB | 	rdlong	local01, arg01
1e224     0F 21 02 F6 | 	mov	local02, local01
1e228     28 12 86 F1 | 	sub	arg01, #40
1e22c     13 20 46 F7 | 	zerox	local02, #19
1e230     14 1E 46 F0 | 	shr	local01, #20
1e234     02 1E 66 F0 | 	shl	local01, #2
1e238     ED 1E 02 F1 | 	add	local01, __methods__
1e23c     0F 1F 02 FB | 	rdlong	local01, local01
1e240     F2 22 02 F6 | 	mov	local03, objptr
1e244     10 E5 01 F6 | 	mov	objptr, local02
1e248     2D 1E 62 FD | 	call	local01
1e24c     11 E5 01 F6 | 	mov	objptr, local03
1e250     FD 12 0A F6 | 	mov	arg01, result1 wz
1e254     1C 00 90 AD |  if_e	jmp	#LR__2980
1e258     00 12 4E F2 | 	cmps	arg01, #0 wz
1e25c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1e260     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1e264     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1e268     01 FA 65 56 |  if_ne	neg	result1, #1
1e26c     00 FA 05 A6 |  if_e	mov	result1, #0
1e270     04 00 90 FD | 	jmp	#LR__2981
1e274                 | LR__2980
1e274     00 FA 05 F6 | 	mov	result1, #0
1e278                 | LR__2981
1e278     A7 F0 03 F6 | 	mov	ptra, fp
1e27c     B2 00 A0 FD | 	call	#popregs_
1e280                 | __system___ioctl_ret
1e280     2D 00 64 FD | 	ret
1e284                 | 
1e284                 | __system___isatty
1e284     00 4A 05 F6 | 	mov	COUNT_, #0
1e288     A8 00 A0 FD | 	call	#pushregs_
1e28c     0C F0 07 F1 | 	add	ptra, #12
1e290     04 4E 05 F1 | 	add	fp, #4
1e294     A7 12 62 FC | 	wrlong	arg01, fp
1e298     04 4E 05 F1 | 	add	fp, #4
1e29c     A7 16 02 F6 | 	mov	arg03, fp
1e2a0     08 4E 85 F1 | 	sub	fp, #8
1e2a4     00 15 06 F6 | 	mov	arg02, #256
1e2a8     50 FF BF FD | 	call	#__system___ioctl
1e2ac     00 FA 0D F2 | 	cmp	result1, #0 wz
1e2b0     01 FA 05 A6 |  if_e	mov	result1, #1
1e2b4     00 FA 05 56 |  if_ne	mov	result1, #0
1e2b8     A7 F0 03 F6 | 	mov	ptra, fp
1e2bc     B2 00 A0 FD | 	call	#popregs_
1e2c0                 | __system___isatty_ret
1e2c0     2D 00 64 FD | 	ret
1e2c4                 | 
1e2c4                 | __system____getftab
1e2c4     0A 12 16 F2 | 	cmp	arg01, #10 wc
1e2c8     34 12 06 CD |  if_b	qmul	arg01, #52
1e2cc     00 FA 05 36 |  if_ae	mov	result1, #0
1e2d0     02 00 00 CF 
1e2d4     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1e2d8     18 FA 61 CD |  if_b	getqx	result1
1e2dc     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1e2e0     02 00 00 CF 
1e2e4     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1e2e8                 | __system____getftab_ret
1e2e8     2D 00 64 FD | 	ret
1e2ec                 | 
1e2ec                 | __system__strncpy
1e2ec     09 01 02 F6 | 	mov	_var01, arg01
1e2f0                 | LR__2990
1e2f0     01 16 86 F1 | 	sub	arg03, #1
1e2f4     00 16 56 F2 | 	cmps	arg03, #0 wc
1e2f8     18 00 90 CD |  if_b	jmp	#LR__2991
1e2fc     0A FB C1 FA | 	rdbyte	result1, arg02
1e300     00 FB 41 FC | 	wrbyte	result1, _var01
1e304     01 14 06 F1 | 	add	arg02, #1
1e308     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1e30c     01 00 06 F1 | 	add	_var01, #1
1e310     DC FF 9F 5D |  if_ne	jmp	#LR__2990
1e314                 | LR__2991
1e314     97 0C 48 FB | 	callpa	#(@LR__2993-@LR__2992)>>2,fcache_load_ptr_
1e318                 | LR__2992
1e318     01 16 86 F1 | 	sub	arg03, #1
1e31c     00 16 56 F2 | 	cmps	arg03, #0 wc
1e320     00 03 02 36 |  if_ae	mov	_var02, _var01
1e324     01 00 06 31 |  if_ae	add	_var01, #1
1e328     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1e32c     E8 FF 9F 3D |  if_ae	jmp	#LR__2992
1e330                 | LR__2993
1e330     09 FB 01 F6 | 	mov	result1, arg01
1e334                 | __system__strncpy_ret
1e334     2D 00 64 FD | 	ret
1e338                 | 
1e338                 | __system__strncat
1e338     00 14 4E F2 | 	cmps	arg02, #0 wz
1e33c     50 00 90 AD |  if_e	jmp	#LR__3004
1e340     01 16 16 F2 | 	cmp	arg03, #1 wc
1e344     48 00 90 CD |  if_b	jmp	#LR__3004
1e348     09 01 02 F6 | 	mov	_var01, arg01
1e34c     97 1E 48 FB | 	callpa	#(@LR__3002-@LR__3000)>>2,fcache_load_ptr_
1e350                 | LR__3000
1e350     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1e354     01 00 06 51 |  if_ne	add	_var01, #1
1e358     F4 FF 9F 5D |  if_ne	jmp	#LR__3000
1e35c     0B 03 02 F6 | 	mov	_var02, arg03
1e360                 | LR__3001
1e360     0A 05 C2 FA | 	rdbyte	_var03, arg02
1e364     02 07 02 F6 | 	mov	_var04, _var03
1e368     07 06 4E F7 | 	zerox	_var04, #7 wz
1e36c     01 14 06 F1 | 	add	arg02, #1
1e370     18 00 90 AD |  if_e	jmp	#LR__3003
1e374     01 02 86 F1 | 	sub	_var02, #1
1e378     00 02 56 F2 | 	cmps	_var02, #0 wc
1e37c     00 07 02 36 |  if_ae	mov	_var04, _var01
1e380     01 00 06 31 |  if_ae	add	_var01, #1
1e384     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1e388     D4 FF 9F 3D |  if_ae	jmp	#LR__3001
1e38c                 | LR__3002
1e38c                 | LR__3003
1e38c     00 01 48 FC | 	wrbyte	#0, _var01
1e390                 | LR__3004
1e390     09 FB 01 F6 | 	mov	result1, arg01
1e394                 | __system__strncat_ret
1e394     2D 00 64 FD | 	ret
1e398                 | 
1e398                 | __system__strncmp
1e398     09 01 0A F6 | 	mov	_var01, arg01 wz
1e39c     14 00 90 5D |  if_ne	jmp	#LR__3010
1e3a0     00 14 0E F2 | 	cmp	arg02, #0 wz
1e3a4     01 02 66 56 |  if_ne	neg	_var02, #1
1e3a8     00 02 06 A6 |  if_e	mov	_var02, #0
1e3ac     01 FB 01 F6 | 	mov	result1, _var02
1e3b0     74 00 90 FD | 	jmp	#__system__strncmp_ret
1e3b4                 | LR__3010
1e3b4     00 14 0E F2 | 	cmp	arg02, #0 wz
1e3b8     01 FA 05 A6 |  if_e	mov	result1, #1
1e3bc     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1e3c0     0B 05 02 F6 | 	mov	_var03, arg03
1e3c4     97 16 48 FB | 	callpa	#(@LR__3012-@LR__3011)>>2,fcache_load_ptr_
1e3c8                 | LR__3011
1e3c8     00 07 C2 FA | 	rdbyte	_var04, _var01
1e3cc     0A 09 02 F6 | 	mov	_var05, arg02
1e3d0     04 0B C2 FA | 	rdbyte	_var06, _var05
1e3d4     01 04 86 F1 | 	sub	_var03, #1
1e3d8     00 04 56 F2 | 	cmps	_var03, #0 wc
1e3dc     01 00 06 F1 | 	add	_var01, #1
1e3e0     01 14 06 F1 | 	add	arg02, #1
1e3e4     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1e3e8     08 00 90 2D |  if_nc_and_z	jmp	#LR__3013
1e3ec     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1e3f0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3011
1e3f4                 | LR__3012
1e3f4                 | LR__3013
1e3f4     00 04 56 F2 | 	cmps	_var03, #0 wc
1e3f8     00 FA 05 C6 |  if_b	mov	result1, #0
1e3fc     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1e400     05 07 0A F2 | 	cmp	_var04, _var06 wz
1e404     00 FA 05 A6 |  if_e	mov	result1, #0
1e408     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1e40c     00 06 0E F2 | 	cmp	_var04, #0 wz
1e410     01 FA 65 A6 |  if_e	neg	result1, #1
1e414     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1e418     00 0A 0E F2 | 	cmp	_var06, #0 wz
1e41c     01 FA 05 A6 |  if_e	mov	result1, #1
1e420     03 FB 01 56 |  if_ne	mov	result1, _var04
1e424     05 FB 81 51 |  if_ne	sub	result1, _var06
1e428                 | __system__strncmp_ret
1e428     2D 00 64 FD | 	ret
1e42c                 | 
1e42c                 | __system____root_opendir
1e42c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1e430     04 12 06 F1 | 	add	arg01, #4
1e434     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
1e438     00 FA 05 F6 | 	mov	result1, #0
1e43c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1e440                 | __system____root_opendir_ret
1e440     2D 00 64 FD | 	ret
1e444                 | 
1e444                 | __system____root_readdir
1e444     03 4A 05 F6 | 	mov	COUNT_, #3
1e448     A8 00 A0 FD | 	call	#pushregs_
1e44c     09 1F 02 F6 | 	mov	local01, arg01
1e450     0A 21 02 F6 | 	mov	local02, arg02
1e454     04 1E 06 F1 | 	add	local01, #4
1e458     0F 23 02 FB | 	rdlong	local03, local01
1e45c     04 1E 86 F1 | 	sub	local01, #4
1e460                 | LR__3020
1e460     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1e464     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1e468     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1e46c     01 FA 65 A6 |  if_e	neg	result1, #1
1e470     48 00 90 AD |  if_e	jmp	#LR__3021
1e474     11 17 0A FB | 	rdlong	arg03, local03 wz
1e478     04 22 06 A1 |  if_e	add	local03, #4
1e47c     E0 FF 9F AD |  if_e	jmp	#LR__3020
1e480     11 15 02 FB | 	rdlong	arg02, local03
1e484     01 14 06 F1 | 	add	arg02, #1
1e488     10 13 02 F6 | 	mov	arg01, local02
1e48c     40 16 06 F6 | 	mov	arg03, #64
1e490     58 FE BF FD | 	call	#__system__strncpy
1e494     50 20 06 F1 | 	add	local02, #80
1e498     10 03 48 FC | 	wrbyte	#1, local02
1e49c     08 20 86 F1 | 	sub	local02, #8
1e4a0     10 01 68 FC | 	wrlong	#0, local02
1e4a4     04 20 06 F1 | 	add	local02, #4
1e4a8     10 01 68 FC | 	wrlong	#0, local02
1e4ac     04 22 06 F1 | 	add	local03, #4
1e4b0     04 1E 06 F1 | 	add	local01, #4
1e4b4     0F 23 62 FC | 	wrlong	local03, local01
1e4b8     00 FA 05 F6 | 	mov	result1, #0
1e4bc                 | LR__3021
1e4bc     A7 F0 03 F6 | 	mov	ptra, fp
1e4c0     B2 00 A0 FD | 	call	#popregs_
1e4c4                 | __system____root_readdir_ret
1e4c4     2D 00 64 FD | 	ret
1e4c8                 | 
1e4c8                 | __system____root_closedir
1e4c8     00 FA 05 F6 | 	mov	result1, #0
1e4cc                 | __system____root_closedir_ret
1e4cc     2D 00 64 FD | 	ret
1e4d0                 | 
1e4d0                 | __system____root_stat
1e4d0     0A 01 02 F6 | 	mov	_var01, arg02
1e4d4     00 13 02 F6 | 	mov	arg01, _var01
1e4d8     00 14 06 F6 | 	mov	arg02, #0
1e4dc     30 16 06 F6 | 	mov	arg03, #48
1e4e0     98 00 A0 FD | 	call	#\builtin_bytefill_
1e4e4     08 00 06 F1 | 	add	_var01, #8
1e4e8     08 00 80 FF 
1e4ec     00 FF 6B FC | 	wrlong	##4607, _var01
1e4f0     00 FA 05 F6 | 	mov	result1, #0
1e4f4                 | __system____root_stat_ret
1e4f4     2D 00 64 FD | 	ret
1e4f8                 | 
1e4f8                 | __system___normalizeName
1e4f8     00 00 06 F6 | 	mov	_var01, #0
1e4fc     09 03 02 F6 | 	mov	_var02, arg01
1e500     01 05 02 F6 | 	mov	_var03, _var02
1e504                 | LR__3030
1e504     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1e508     5C 01 90 AD |  if_e	jmp	#LR__3049
1e50c     00 00 0E F2 | 	cmp	_var01, #0 wz
1e510     02 07 02 56 |  if_ne	mov	_var04, _var03
1e514     01 04 06 51 |  if_ne	add	_var03, #1
1e518     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
1e51c     00 00 06 56 |  if_ne	mov	_var01, #0
1e520     01 07 C2 FA | 	rdbyte	_var04, _var02
1e524     2E 06 0E F2 | 	cmp	_var04, #46 wz
1e528     D8 00 90 5D |  if_ne	jmp	#LR__3042
1e52c     01 02 06 F1 | 	add	_var02, #1
1e530     01 07 C2 FA | 	rdbyte	_var04, _var02
1e534     01 02 86 F1 | 	sub	_var02, #1
1e538     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e53c     18 00 90 AD |  if_e	jmp	#LR__3031
1e540     01 02 06 F1 | 	add	_var02, #1
1e544     01 09 C2 FA | 	rdbyte	_var05, _var02
1e548     01 02 86 F1 | 	sub	_var02, #1
1e54c     04 0B 02 F6 | 	mov	_var06, _var05
1e550     07 0A 4E F7 | 	zerox	_var06, #7 wz
1e554     10 00 90 5D |  if_ne	jmp	#LR__3032
1e558                 | LR__3031
1e558     01 0D 02 F6 | 	mov	_var07, _var02
1e55c     01 0C 06 F1 | 	add	_var07, #1
1e560     06 03 02 F6 | 	mov	_var02, _var07
1e564     E0 00 90 FD | 	jmp	#LR__3046
1e568                 | LR__3032
1e568     01 02 06 F1 | 	add	_var02, #1
1e56c     01 0D C2 FA | 	rdbyte	_var07, _var02
1e570     01 02 86 F1 | 	sub	_var02, #1
1e574     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1e578     2E 06 0E F2 | 	cmp	_var04, #46 wz
1e57c     84 00 90 5D |  if_ne	jmp	#LR__3041
1e580     02 02 06 F1 | 	add	_var02, #2
1e584     01 0D C2 FA | 	rdbyte	_var07, _var02
1e588     02 02 86 F1 | 	sub	_var02, #2
1e58c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1e590     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e594     18 00 90 AD |  if_e	jmp	#LR__3033
1e598     02 02 06 F1 | 	add	_var02, #2
1e59c     01 09 C2 FA | 	rdbyte	_var05, _var02
1e5a0     02 02 86 F1 | 	sub	_var02, #2
1e5a4     04 0B 02 F6 | 	mov	_var06, _var05
1e5a8     07 0A 4E F7 | 	zerox	_var06, #7 wz
1e5ac     54 00 90 5D |  if_ne	jmp	#LR__3040
1e5b0                 | LR__3033
1e5b0     02 02 06 F1 | 	add	_var02, #2
1e5b4     09 05 5A F2 | 	cmps	_var03, arg01 wcz
1e5b8     40 00 90 ED |  if_be	jmp	#LR__3039
1e5bc     02 0F 02 F6 | 	mov	_var08, _var03
1e5c0     01 0E 86 F1 | 	sub	_var08, #1
1e5c4                 | LR__3034
1e5c4     07 07 C2 FA | 	rdbyte	_var04, _var08
1e5c8     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e5cc     0C 00 90 5D |  if_ne	jmp	#LR__3035
1e5d0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1e5d4     01 0E 86 11 |  if_a	sub	_var08, #1
1e5d8     E8 FF 9F 1D |  if_a	jmp	#LR__3034
1e5dc                 | LR__3035
1e5dc     97 0C 48 FB | 	callpa	#(@LR__3037-@LR__3036)>>2,fcache_load_ptr_
1e5e0                 | LR__3036
1e5e0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1e5e4     10 00 90 ED |  if_be	jmp	#LR__3038
1e5e8     07 07 C2 FA | 	rdbyte	_var04, _var08
1e5ec     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e5f0     01 0E 86 51 |  if_ne	sub	_var08, #1
1e5f4     E8 FF 9F 5D |  if_ne	jmp	#LR__3036
1e5f8                 | LR__3037
1e5f8                 | LR__3038
1e5f8     07 05 02 F6 | 	mov	_var03, _var08
1e5fc                 | LR__3039
1e5fc     01 00 06 F6 | 	mov	_var01, #1
1e600     44 00 90 FD | 	jmp	#LR__3046
1e604                 | LR__3040
1e604                 | LR__3041
1e604                 | LR__3042
1e604     97 18 48 FB | 	callpa	#(@LR__3044-@LR__3043)>>2,fcache_load_ptr_
1e608                 | LR__3043
1e608     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1e60c     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1e610     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1e614     20 00 90 AD |  if_e	jmp	#LR__3045
1e618     01 0B 02 F6 | 	mov	_var06, _var02
1e61c     01 09 02 F6 | 	mov	_var05, _var02
1e620     01 08 06 F1 | 	add	_var05, #1
1e624     05 11 C2 FA | 	rdbyte	_var09, _var06
1e628     04 03 02 F6 | 	mov	_var02, _var05
1e62c     02 11 42 FC | 	wrbyte	_var09, _var03
1e630     01 04 06 F1 | 	add	_var03, #1
1e634     D0 FF 9F FD | 	jmp	#LR__3043
1e638                 | LR__3044
1e638                 | LR__3045
1e638     01 07 C2 FA | 	rdbyte	_var04, _var02
1e63c     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e640     C0 FE 9F 5D |  if_ne	jmp	#LR__3030
1e644     01 00 06 F6 | 	mov	_var01, #1
1e648                 | LR__3046
1e648     97 0C 48 FB | 	callpa	#(@LR__3048-@LR__3047)>>2,fcache_load_ptr_
1e64c                 | LR__3047
1e64c     01 07 C2 FA | 	rdbyte	_var04, _var02
1e650     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e654     01 0D 02 A6 |  if_e	mov	_var07, _var02
1e658     01 0C 06 A1 |  if_e	add	_var07, #1
1e65c     06 03 02 A6 |  if_e	mov	_var02, _var07
1e660     E8 FF 9F AD |  if_e	jmp	#LR__3047
1e664                 | LR__3048
1e664     9C FE 9F FD | 	jmp	#LR__3030
1e668                 | LR__3049
1e668     02 01 48 FC | 	wrbyte	#0, _var03
1e66c                 | __system___normalizeName_ret
1e66c     2D 00 64 FD | 	ret
1e670                 | 
1e670                 | __system___strrev
1e670     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1e674     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1e678     09 03 02 F6 | 	mov	_var02, arg01
1e67c     97 1A 48 FB | 	callpa	#(@LR__3052-@LR__3050)>>2,fcache_load_ptr_
1e680                 | LR__3050
1e680     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1e684     01 02 06 51 |  if_ne	add	_var02, #1
1e688     F4 FF 9F 5D |  if_ne	jmp	#LR__3050
1e68c     01 02 86 F1 | 	sub	_var02, #1
1e690                 | LR__3051
1e690     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1e694     1C 00 90 ED |  if_be	jmp	#LR__3053
1e698     09 01 C2 FA | 	rdbyte	_var01, arg01
1e69c     01 05 C2 FA | 	rdbyte	_var03, _var02
1e6a0     09 05 42 FC | 	wrbyte	_var03, arg01
1e6a4     01 01 42 FC | 	wrbyte	_var01, _var02
1e6a8     01 12 06 F1 | 	add	arg01, #1
1e6ac     01 02 86 F1 | 	sub	_var02, #1
1e6b0     DC FF 9F FD | 	jmp	#LR__3051
1e6b4                 | LR__3052
1e6b4                 | LR__3053
1e6b4                 | __system___strrev_ret
1e6b4     2D 00 64 FD | 	ret
1e6b8                 | 
1e6b8                 | __system___fmtpad
1e6b8     06 4A 05 F6 | 	mov	COUNT_, #6
1e6bc     A8 00 A0 FD | 	call	#pushregs_
1e6c0     09 1F 02 F6 | 	mov	local01, arg01
1e6c4     0A 21 02 F6 | 	mov	local02, arg02
1e6c8     0B 23 02 F6 | 	mov	local03, arg03
1e6cc     10 13 EA F8 | 	getbyte	arg01, local02, #1
1e6d0     16 20 46 F0 | 	shr	local02, #22
1e6d4     03 20 0E F5 | 	and	local02, #3 wz
1e6d8     00 24 06 F6 | 	mov	local04, #0
1e6dc     01 20 06 A6 |  if_e	mov	local02, #1
1e6e0     0C 21 CA F7 | 	test	local02, arg04 wz
1e6e4     00 FA 05 A6 |  if_e	mov	result1, #0
1e6e8     88 00 90 AD |  if_e	jmp	#LR__3063
1e6ec     09 23 C2 F2 | 	subr	local03, arg01
1e6f0     01 22 56 F2 | 	cmps	local03, #1 wc
1e6f4     00 FA 05 C6 |  if_b	mov	result1, #0
1e6f8     78 00 90 CD |  if_b	jmp	#LR__3063
1e6fc     03 20 0E F2 | 	cmp	local02, #3 wz
1e700     18 00 90 5D |  if_ne	jmp	#LR__3060
1e704     01 18 0E F2 | 	cmp	arg04, #1 wz
1e708     6E 20 62 FD | 	wrz	local02
1e70c     10 23 02 F1 | 	add	local03, local02
1e710     11 23 52 F6 | 	abs	local03, local03 wc
1e714     01 22 46 F0 | 	shr	local03, #1
1e718     11 23 82 F6 | 	negc	local03, local03
1e71c                 | LR__3060
1e71c     01 22 56 F2 | 	cmps	local03, #1 wc
1e720     4C 00 90 CD |  if_b	jmp	#LR__3062
1e724     11 27 02 F6 | 	mov	local05, local03
1e728                 | LR__3061
1e728     0F 21 02 F6 | 	mov	local02, local01
1e72c     0F 29 02 F6 | 	mov	local06, local01
1e730     13 20 46 F7 | 	zerox	local02, #19
1e734     14 28 46 F0 | 	shr	local06, #20
1e738     02 28 66 F0 | 	shl	local06, #2
1e73c     ED 28 02 F1 | 	add	local06, __methods__
1e740     14 29 02 FB | 	rdlong	local06, local06
1e744     20 12 06 F6 | 	mov	arg01, #32
1e748     F2 22 02 F6 | 	mov	local03, objptr
1e74c     10 E5 01 F6 | 	mov	objptr, local02
1e750     2D 28 62 FD | 	call	local06
1e754     11 E5 01 F6 | 	mov	objptr, local03
1e758     FD 28 02 F6 | 	mov	local06, result1
1e75c     00 28 56 F2 | 	cmps	local06, #0 wc
1e760     14 FB 01 C6 |  if_b	mov	result1, local06
1e764     0C 00 90 CD |  if_b	jmp	#LR__3063
1e768     14 25 02 F1 | 	add	local04, local06
1e76c     EE 27 6E FB | 	djnz	local05, #LR__3061
1e770                 | LR__3062
1e770     12 FB 01 F6 | 	mov	result1, local04
1e774                 | LR__3063
1e774     A7 F0 03 F6 | 	mov	ptra, fp
1e778     B2 00 A0 FD | 	call	#popregs_
1e77c                 | __system___fmtpad_ret
1e77c     2D 00 64 FD | 	ret
1e780                 | 
1e780                 | __system___uitoa
1e780     04 4A 05 F6 | 	mov	COUNT_, #4
1e784     A8 00 A0 FD | 	call	#pushregs_
1e788     09 1F 02 F6 | 	mov	local01, arg01
1e78c     00 1A 4E F2 | 	cmps	arg05, #0 wz
1e790     0F 1B 02 F6 | 	mov	arg05, local01
1e794     00 20 06 F6 | 	mov	local02, #0
1e798     37 22 06 56 |  if_ne	mov	local03, #55
1e79c     57 22 06 A6 |  if_e	mov	local03, #87
1e7a0                 | LR__3070
1e7a0     0B 15 12 FD | 	qdiv	arg02, arg03
1e7a4     19 24 62 FD | 	getqy	local04
1e7a8     0B 15 12 FD | 	qdiv	arg02, arg03
1e7ac     0A 24 16 F2 | 	cmp	local04, #10 wc
1e7b0     30 24 06 C1 |  if_b	add	local04, #48
1e7b4     11 25 02 31 |  if_ae	add	local04, local03
1e7b8     0D 25 42 FC | 	wrbyte	local04, arg05
1e7bc     01 1A 06 F1 | 	add	arg05, #1
1e7c0     01 20 06 F1 | 	add	local02, #1
1e7c4     18 14 62 FD | 	getqx	arg02
1e7c8     00 14 0E F2 | 	cmp	arg02, #0 wz
1e7cc     D0 FF 9F 5D |  if_ne	jmp	#LR__3070
1e7d0     0C 21 12 F2 | 	cmp	local02, arg04 wc
1e7d4     C8 FF 9F CD |  if_b	jmp	#LR__3070
1e7d8     0D 01 48 FC | 	wrbyte	#0, arg05
1e7dc     0F 13 02 F6 | 	mov	arg01, local01
1e7e0     8C FE BF FD | 	call	#__system___strrev
1e7e4     10 FB 01 F6 | 	mov	result1, local02
1e7e8     A7 F0 03 F6 | 	mov	ptra, fp
1e7ec     B2 00 A0 FD | 	call	#popregs_
1e7f0                 | __system___uitoa_ret
1e7f0     2D 00 64 FD | 	ret
1e7f4                 | 
1e7f4                 | __system__disassemble_0383
1e7f4     10 4A 05 F6 | 	mov	COUNT_, #16
1e7f8     A8 00 A0 FD | 	call	#pushregs_
1e7fc     09 1F 02 F6 | 	mov	local01, arg01
1e800     0A 21 02 F6 | 	mov	local02, arg02
1e804     0B 23 02 F6 | 	mov	local03, arg03
1e808     0C 25 02 F6 | 	mov	local04, arg04
1e80c     0D 27 02 F6 | 	mov	local05, arg05
1e810     13 13 52 F6 | 	abs	arg01, local05 wc
1e814     1F 28 C6 C9 |  if_b	decod	local06, #31
1e818     00 28 06 36 |  if_ae	mov	local06, #0
1e81c     64 D0 BF FD | 	call	#__system___float_fromuns
1e820     14 FB 61 F5 | 	xor	result1, local06
1e824     FD 2A 02 F6 | 	mov	local07, result1
1e828     00 2C 06 F6 | 	mov	local08, #0
1e82c     0F 13 02 F6 | 	mov	arg01, local01
1e830     00 14 06 F6 | 	mov	arg02, #0
1e834     01 16 06 F6 | 	mov	arg03, #1
1e838     80 D8 BF FD | 	call	#__system___float_cmp
1e83c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e840     00 2E 06 A6 |  if_e	mov	local09, #0
1e844     10 01 68 AC |  if_e	wrlong	#0, local02
1e848     11 2F 62 AC |  if_e	wrlong	local09, local03
1e84c     8C 01 90 AD |  if_e	jmp	#LR__3092
1e850     0F 13 02 F6 | 	mov	arg01, local01
1e854     30 DD BF FD | 	call	#__system____builtin_ilogb
1e858     FD 30 02 F6 | 	mov	local10, result1
1e85c     0A 26 0E F2 | 	cmp	local05, #10 wz
1e860     24 00 90 5D |  if_ne	jmp	#LR__3080
1e864     18 2F 02 F6 | 	mov	local09, local10
1e868     01 2E 66 F0 | 	shl	local09, #1
1e86c     18 2F 02 F1 | 	add	local09, local10
1e870     17 31 52 F6 | 	abs	local10, local09 wc
1e874     0A 30 16 FD | 	qdiv	local10, #10
1e878     09 32 06 F6 | 	mov	local11, #9
1e87c     18 30 62 FD | 	getqx	local10
1e880     18 31 82 F6 | 	negc	local10, local10
1e884     04 00 90 FD | 	jmp	#LR__3081
1e888                 | LR__3080
1e888     18 32 06 F6 | 	mov	local11, #24
1e88c                 | LR__3081
1e88c                 | LR__3082
1e88c     08 2C 56 F2 | 	cmps	local08, #8 wc
1e890     01 2C 06 F1 | 	add	local08, #1
1e894     60 00 90 3D |  if_ae	jmp	#LR__3083
1e898     00 C0 1F FF 
1e89c     00 12 06 F6 | 	mov	arg01, ##1065353216
1e8a0     15 15 02 F6 | 	mov	arg02, local07
1e8a4     18 17 02 F6 | 	mov	arg03, local10
1e8a8     88 E3 BF FD | 	call	#__system___float_pow_n
1e8ac     FD 14 02 F6 | 	mov	arg02, result1
1e8b0     0F 13 02 F6 | 	mov	arg01, local01
1e8b4     D4 D5 BF FD | 	call	#__system___float_div
1e8b8     FD 34 02 F6 | 	mov	local12, result1
1e8bc     1A 13 02 F6 | 	mov	arg01, local12
1e8c0     00 C0 1F FF 
1e8c4     00 14 06 F6 | 	mov	arg02, ##1065353216
1e8c8     01 16 06 F6 | 	mov	arg03, #1
1e8cc     EC D7 BF FD | 	call	#__system___float_cmp
1e8d0     00 FA 55 F2 | 	cmps	result1, #0 wc
1e8d4     01 30 86 C1 |  if_b	sub	local10, #1
1e8d8     B0 FF 9F CD |  if_b	jmp	#LR__3082
1e8dc     15 15 02 F6 | 	mov	arg02, local07
1e8e0     1A 13 02 F6 | 	mov	arg01, local12
1e8e4     01 16 66 F6 | 	neg	arg03, #1
1e8e8     D0 D7 BF FD | 	call	#__system___float_cmp
1e8ec     00 FA 55 F2 | 	cmps	result1, #0 wc
1e8f0     01 30 06 31 |  if_ae	add	local10, #1
1e8f4     94 FF 9F 3D |  if_ae	jmp	#LR__3082
1e8f8                 | LR__3083
1e8f8     1A 13 02 F6 | 	mov	arg01, local12
1e8fc     88 DC BF FD | 	call	#__system____builtin_ilogb
1e900     FD 36 02 F6 | 	mov	local13, result1
1e904     1A 39 02 F6 | 	mov	local14, local12
1e908     17 39 06 F4 | 	bitl	local14, #279
1e90c     17 38 26 F4 | 	bith	local14, #23
1e910     1B 39 62 F0 | 	shl	local14, local13
1e914     02 26 0E F2 | 	cmp	local05, #2 wz
1e918     02 24 66 A0 |  if_e	shl	local04, #2
1e91c     00 3A 06 F6 | 	mov	local15, #0
1e920     00 24 56 F2 | 	cmps	local04, #0 wc
1e924     10 00 90 3D |  if_ae	jmp	#LR__3084
1e928     18 25 C2 F2 | 	subr	local04, local10
1e92c     00 24 56 F2 | 	cmps	local04, #0 wc
1e930     A0 00 90 CD |  if_b	jmp	#LR__3091
1e934     04 00 90 FD | 	jmp	#LR__3085
1e938                 | LR__3084
1e938     01 24 06 F1 | 	add	local04, #1
1e93c                 | LR__3085
1e93c     19 25 7A F3 | 	fles	local04, local11 wcz
1e940     01 3C 06 F6 | 	mov	local16, #1
1e944     97 22 48 FB | 	callpa	#(@LR__3087-@LR__3086)>>2,fcache_load_ptr_
1e948                 | LR__3086
1e948     00 40 00 FF 
1e94c     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1e950     38 00 90 3D |  if_ae	jmp	#LR__3088
1e954     01 24 56 F2 | 	cmps	local04, #1 wc
1e958     01 24 86 F1 | 	sub	local04, #1
1e95c     2C 00 90 CD |  if_b	jmp	#LR__3088
1e960     13 3B 02 FD | 	qmul	local15, local05
1e964     1C 37 02 F6 | 	mov	local13, local14
1e968     17 36 46 F0 | 	shr	local13, #23
1e96c     17 39 06 F4 | 	bitl	local14, #279
1e970     18 3A 62 FD | 	getqx	local15
1e974     13 3D 02 FD | 	qmul	local16, local05
1e978     18 3C 62 FD | 	getqx	local16
1e97c     13 39 02 FD | 	qmul	local14, local05
1e980     1B 3B 02 F1 | 	add	local15, local13
1e984     18 38 62 FD | 	getqx	local14
1e988     BC FF 9F FD | 	jmp	#LR__3086
1e98c                 | LR__3087
1e98c                 | LR__3088
1e98c     13 2F 02 F6 | 	mov	local09, local05
1e990     17 2E 66 F0 | 	shl	local09, #23
1e994     17 37 52 F6 | 	abs	local13, local09 wc
1e998     01 36 46 F0 | 	shr	local13, #1
1e99c     1B 37 82 F6 | 	negc	local13, local13
1e9a0     1B 39 1A F2 | 	cmp	local14, local13 wcz
1e9a4     20 00 90 1D |  if_a	jmp	#LR__3089
1e9a8     17 26 66 F0 | 	shl	local05, #23
1e9ac     13 37 52 F6 | 	abs	local13, local05 wc
1e9b0     01 36 46 F0 | 	shr	local13, #1
1e9b4     1B 37 82 F6 | 	negc	local13, local13
1e9b8     1B 39 0A F2 | 	cmp	local14, local13 wz
1e9bc     14 00 90 5D |  if_ne	jmp	#LR__3090
1e9c0     01 3A CE F7 | 	test	local15, #1 wz
1e9c4     0C 00 90 AD |  if_e	jmp	#LR__3090
1e9c8                 | LR__3089
1e9c8     01 3A 06 F1 | 	add	local15, #1
1e9cc     1E 3B 0A F2 | 	cmp	local15, local16 wz
1e9d0     01 30 06 A1 |  if_e	add	local10, #1
1e9d4                 | LR__3090
1e9d4                 | LR__3091
1e9d4     10 3B 62 FC | 	wrlong	local15, local02
1e9d8     11 31 62 FC | 	wrlong	local10, local03
1e9dc                 | LR__3092
1e9dc     A7 F0 03 F6 | 	mov	ptra, fp
1e9e0     B2 00 A0 FD | 	call	#popregs_
1e9e4                 | __system__disassemble_0383_ret
1e9e4     2D 00 64 FD | 	ret
1e9e8                 | 
1e9e8                 | __system__emitsign_0385
1e9e8     00 FA 05 F6 | 	mov	result1, #0
1e9ec     00 14 0E F2 | 	cmp	arg02, #0 wz
1e9f0     09 01 02 56 |  if_ne	mov	_var01, arg01
1e9f4     01 12 06 51 |  if_ne	add	arg01, #1
1e9f8     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1e9fc     01 FA 05 56 |  if_ne	mov	result1, #1
1ea00     00 16 0E F2 | 	cmp	arg03, #0 wz
1ea04     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1ea08     01 12 06 51 |  if_ne	add	arg01, #1
1ea0c     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1ea10     02 FA 05 51 |  if_ne	add	result1, #2
1ea14                 | __system__emitsign_0385_ret
1ea14     2D 00 64 FD | 	ret
1ea18                 | 
1ea18                 | __system___gettxfunc
1ea18     01 4A 05 F6 | 	mov	COUNT_, #1
1ea1c     A8 00 A0 FD | 	call	#pushregs_
1ea20     A0 F8 BF FD | 	call	#__system____getftab
1ea24     FD 1E 0A F6 | 	mov	local01, result1 wz
1ea28     10 00 90 AD |  if_e	jmp	#LR__3100
1ea2c     08 1E 06 F1 | 	add	local01, #8
1ea30     0F 15 0A FB | 	rdlong	arg02, local01 wz
1ea34     08 1E 86 F1 | 	sub	local01, #8
1ea38     08 00 90 5D |  if_ne	jmp	#LR__3101
1ea3c                 | LR__3100
1ea3c     00 FA 05 F6 | 	mov	result1, #0
1ea40     0C 00 90 FD | 	jmp	#LR__3102
1ea44                 | LR__3101
1ea44     00 30 03 FF 
1ea48     00 1E 46 F5 | 	or	local01, ##106954752
1ea4c     0F FB 01 F6 | 	mov	result1, local01
1ea50                 | LR__3102
1ea50     A7 F0 03 F6 | 	mov	ptra, fp
1ea54     B2 00 A0 FD | 	call	#popregs_
1ea58                 | __system___gettxfunc_ret
1ea58     2D 00 64 FD | 	ret
1ea5c                 | 
1ea5c                 | __system___getrxfunc
1ea5c     01 4A 05 F6 | 	mov	COUNT_, #1
1ea60     A8 00 A0 FD | 	call	#pushregs_
1ea64     5C F8 BF FD | 	call	#__system____getftab
1ea68     FD 1E 0A F6 | 	mov	local01, result1 wz
1ea6c     10 00 90 AD |  if_e	jmp	#LR__3110
1ea70     08 1E 06 F1 | 	add	local01, #8
1ea74     0F 15 0A FB | 	rdlong	arg02, local01 wz
1ea78     08 1E 86 F1 | 	sub	local01, #8
1ea7c     08 00 90 5D |  if_ne	jmp	#LR__3111
1ea80                 | LR__3110
1ea80     00 FA 05 F6 | 	mov	result1, #0
1ea84     0C 00 90 FD | 	jmp	#LR__3112
1ea88                 | LR__3111
1ea88     00 38 03 FF 
1ea8c     00 1E 46 F5 | 	or	local01, ##108003328
1ea90     0F FB 01 F6 | 	mov	result1, local01
1ea94                 | LR__3112
1ea94     A7 F0 03 F6 | 	mov	ptra, fp
1ea98     B2 00 A0 FD | 	call	#popregs_
1ea9c                 | __system___getrxfunc_ret
1ea9c     2D 00 64 FD | 	ret
1eaa0                 | 
1eaa0                 | __system___getiolock_0425
1eaa0     01 4A 05 F6 | 	mov	COUNT_, #1
1eaa4     A8 00 A0 FD | 	call	#pushregs_
1eaa8     18 F8 BF FD | 	call	#__system____getftab
1eaac     FD 1E 0A F6 | 	mov	local01, result1 wz
1eab0     10 00 90 AD |  if_e	jmp	#LR__3120
1eab4     08 1E 06 F1 | 	add	local01, #8
1eab8     0F FB 09 FB | 	rdlong	result1, local01 wz
1eabc     08 1E 86 F1 | 	sub	local01, #8
1eac0     18 00 90 5D |  if_ne	jmp	#LR__3121
1eac4                 | LR__3120
1eac4     01 00 00 FF 
1eac8     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1eacc     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1ead0     01 00 00 FF 
1ead4     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1ead8     08 00 90 FD | 	jmp	#LR__3122
1eadc                 | LR__3121
1eadc     0C 1E 06 F1 | 	add	local01, #12
1eae0     0F FB 01 F6 | 	mov	result1, local01
1eae4                 | LR__3122
1eae4     A7 F0 03 F6 | 	mov	ptra, fp
1eae8     B2 00 A0 FD | 	call	#popregs_
1eaec                 | __system___getiolock_0425_ret
1eaec     2D 00 64 FD | 	ret
1eaf0                 | 
1eaf0                 | __system____ScanForChar
1eaf0     09 01 02 F6 | 	mov	_var01, arg01
1eaf4     09 03 02 F6 | 	mov	_var02, arg01
1eaf8     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
1eafc                 | LR__3130
1eafc     01 FB C9 FA | 	rdbyte	result1, _var02 wz
1eb00     01 02 06 51 |  if_ne	add	_var02, #1
1eb04     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
1eb08                 | LR__3131
1eb08     09 03 82 F1 | 	sub	_var02, arg01
1eb0c     01 FB 01 F6 | 	mov	result1, _var02
1eb10     FD 12 0A F6 | 	mov	arg01, result1 wz
1eb14     00 FA 05 A6 |  if_e	mov	result1, #0
1eb18     B8 00 90 AD |  if_e	jmp	#LR__3138
1eb1c     0A 05 02 F6 | 	mov	_var03, arg02
1eb20     07 04 4E F7 | 	zerox	_var03, #7 wz
1eb24     00 FA 05 A6 |  if_e	mov	result1, #0
1eb28     A8 00 90 AD |  if_e	jmp	#LR__3138
1eb2c     01 16 16 F2 | 	cmp	arg03, #1 wc
1eb30     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
1eb34     01 16 06 86 |  if_c_and_z	mov	arg03, #1
1eb38     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
1eb3c     94 00 90 4D |  if_c_and_nz	jmp	#LR__3138
1eb40     09 17 1A F2 | 	cmp	arg03, arg01 wcz
1eb44     10 00 90 ED |  if_be	jmp	#LR__3132
1eb48     00 18 0E F2 | 	cmp	arg04, #0 wz
1eb4c     00 FA 05 A6 |  if_e	mov	result1, #0
1eb50     80 00 90 AD |  if_e	jmp	#LR__3138
1eb54     09 17 02 F6 | 	mov	arg03, arg01
1eb58                 | LR__3132
1eb58     01 16 86 F1 | 	sub	arg03, #1
1eb5c     00 18 0E F2 | 	cmp	arg04, #0 wz
1eb60     38 00 90 5D |  if_ne	jmp	#LR__3134
1eb64     0B 07 02 F6 | 	mov	_var04, arg03
1eb68     09 09 02 F6 | 	mov	_var05, arg01
1eb6c                 | LR__3133
1eb6c     04 07 12 F2 | 	cmp	_var04, _var05 wc
1eb70     5C 00 90 3D |  if_ae	jmp	#LR__3137
1eb74     03 05 02 F6 | 	mov	_var03, _var04
1eb78     00 05 02 F1 | 	add	_var03, _var01
1eb7c     02 05 C2 FA | 	rdbyte	_var03, _var03
1eb80     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
1eb84     0C 05 0A F2 | 	cmp	_var03, arg04 wz
1eb88     01 06 06 A1 |  if_e	add	_var04, #1
1eb8c     03 FB 01 A6 |  if_e	mov	result1, _var04
1eb90     40 00 90 AD |  if_e	jmp	#LR__3138
1eb94     01 06 06 F1 | 	add	_var04, #1
1eb98     D0 FF 9F FD | 	jmp	#LR__3133
1eb9c                 | LR__3134
1eb9c     0B 07 02 F6 | 	mov	_var04, arg03
1eba0                 | LR__3135
1eba0     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
1eba4     28 00 90 1D |  if_a	jmp	#LR__3136
1eba8     03 09 02 F6 | 	mov	_var05, _var04
1ebac     00 09 02 F1 | 	add	_var05, _var01
1ebb0     04 05 C2 FA | 	rdbyte	_var03, _var05
1ebb4     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
1ebb8     04 05 0A F2 | 	cmp	_var03, _var05 wz
1ebbc     01 06 06 A1 |  if_e	add	_var04, #1
1ebc0     03 FB 01 A6 |  if_e	mov	result1, _var04
1ebc4     0C 00 90 AD |  if_e	jmp	#LR__3138
1ebc8     01 06 86 F1 | 	sub	_var04, #1
1ebcc     D0 FF 9F FD | 	jmp	#LR__3135
1ebd0                 | LR__3136
1ebd0                 | LR__3137
1ebd0     00 FA 05 F6 | 	mov	result1, #0
1ebd4                 | LR__3138
1ebd4                 | __system____ScanForChar_ret
1ebd4     2D 00 64 FD | 	ret
1ebd8                 | 
1ebd8                 | __system___basic_dir
1ebd8     05 4A 05 F6 | 	mov	COUNT_, #5
1ebdc     A8 00 A0 FD | 	call	#pushregs_
1ebe0     4C F0 07 F1 | 	add	ptra, #76
1ebe4     04 4E 05 F1 | 	add	fp, #4
1ebe8     A7 12 62 FC | 	wrlong	arg01, fp
1ebec     04 4E 05 F1 | 	add	fp, #4
1ebf0     A7 14 62 FC | 	wrlong	arg02, fp
1ebf4     04 4E 85 F1 | 	sub	fp, #4
1ebf8     A7 14 0A FB | 	rdlong	arg02, fp wz
1ebfc     04 4E 85 F1 | 	sub	fp, #4
1ec00     04 4E 05 51 |  if_ne	add	fp, #4
1ec04     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1ec08     04 4E 85 51 |  if_ne	sub	fp, #4
1ec0c     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1ec10     70 00 90 AD |  if_e	jmp	#LR__3140
1ec14     03 00 00 FF 
1ec18     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ec1c     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1ec20     03 00 00 FF 
1ec24     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1ec28     03 00 00 5F 
1ec2c     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1ec30     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1ec34     03 00 00 5F 
1ec38     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1ec3c     14 EA BF 5D |  if_ne	call	#__system__closedir
1ec40     43 01 00 FF 
1ec44     10 13 06 F6 | 	mov	arg01, ##@LR__4298
1ec48     1C E9 BF FD | 	call	#__system__opendir
1ec4c     03 00 00 FF 
1ec50     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ec54     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1ec58     08 4E 05 F1 | 	add	fp, #8
1ec5c     A7 20 02 FB | 	rdlong	local02, fp
1ec60     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1ec64     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1ec68     04 4E 85 F1 | 	sub	fp, #4
1ec6c     A7 20 02 FB | 	rdlong	local02, fp
1ec70     04 4E 85 F1 | 	sub	fp, #4
1ec74     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1ec78     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1ec7c     03 00 00 FF 
1ec80     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1ec84                 | LR__3140
1ec84     03 00 00 FF 
1ec88     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ec8c     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1ec90     03 00 00 FF 
1ec94     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1ec98     43 01 00 AF 
1ec9c     12 FB 05 A6 |  if_e	mov	result1, ##@LR__4299
1eca0     84 02 90 AD |  if_e	jmp	#LR__3153
1eca4                 | LR__3141
1eca4     03 00 00 FF 
1eca8     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ecac     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1ecb0     03 00 00 FF 
1ecb4     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1ecb8     0C EA BF FD | 	call	#__system__readdir
1ecbc     0C 4E 05 F1 | 	add	fp, #12
1ecc0     A7 FA 61 FC | 	wrlong	result1, fp
1ecc4     0C 4E 85 F1 | 	sub	fp, #12
1ecc8     00 FA 0D F2 | 	cmp	result1, #0 wz
1eccc     38 00 90 5D |  if_ne	jmp	#LR__3142
1ecd0     03 00 00 FF 
1ecd4     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ecd8     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1ecdc     03 00 00 FF 
1ece0     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1ece4     6C E9 BF FD | 	call	#__system__closedir
1ece8     03 00 00 FF 
1ecec     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1ecf0     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1ecf4     03 00 00 FF 
1ecf8     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1ecfc     43 01 00 FF 
1ed00     14 FB 05 F6 | 	mov	result1, ##@LR__4300
1ed04     20 02 90 FD | 	jmp	#LR__3153
1ed08                 | LR__3142
1ed08     0C 4E 05 F1 | 	add	fp, #12
1ed0c     A7 12 02 FB | 	rdlong	arg01, fp
1ed10     0C 4E 85 F1 | 	sub	fp, #12
1ed14     03 00 00 FF 
1ed18     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1ed1c     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1ed20     03 00 00 FF 
1ed24     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1ed28     48 07 B0 FD | 	call	#__system___pat_match
1ed2c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ed30     70 FF 9F AD |  if_e	jmp	#LR__3141
1ed34     03 00 00 FF 
1ed38     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1ed3c     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1ed40     03 00 00 FF 
1ed44     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1ed48     78 01 90 AD |  if_e	jmp	#LR__3149
1ed4c     0C 4E 05 F1 | 	add	fp, #12
1ed50     A7 12 02 FB | 	rdlong	arg01, fp
1ed54     04 4E 05 F1 | 	add	fp, #4
1ed58     A7 14 02 F6 | 	mov	arg02, fp
1ed5c     10 4E 85 F1 | 	sub	fp, #16
1ed60     68 F2 BF FD | 	call	#__system__stat
1ed64     40 4E 05 F1 | 	add	fp, #64
1ed68     A7 FA 61 FC | 	wrlong	result1, fp
1ed6c     40 4E 85 F1 | 	sub	fp, #64
1ed70     00 FA 0D F2 | 	cmp	result1, #0 wz
1ed74     43 01 00 5F 
1ed78     16 FB 05 56 |  if_ne	mov	result1, ##@LR__4301
1ed7c     A8 01 90 5D |  if_ne	jmp	#LR__3153
1ed80     18 4E 05 F1 | 	add	fp, #24
1ed84     A7 20 02 FB | 	rdlong	local02, fp
1ed88     78 00 00 FF 
1ed8c     00 20 06 F5 | 	and	local02, ##61440
1ed90     2C 4E 05 F1 | 	add	fp, #44
1ed94     A7 20 62 FC | 	wrlong	local02, fp
1ed98     38 4E 85 F1 | 	sub	fp, #56
1ed9c     A7 20 02 FB | 	rdlong	local02, fp
1eda0     0C 4E 85 F1 | 	sub	fp, #12
1eda4     10 21 C2 FA | 	rdbyte	local02, local02
1eda8     2E 20 0E F2 | 	cmp	local02, #46 wz
1edac     08 4E 05 A1 |  if_e	add	fp, #8
1edb0     A7 04 68 AC |  if_e	wrlong	#2, fp
1edb4     08 4E C5 F3 | 	sumz	fp, #8
1edb8     A7 00 68 5C |  if_ne	wrlong	#0, fp
1edbc     08 4E 85 51 |  if_ne	sub	fp, #8
1edc0     44 4E 05 F1 | 	add	fp, #68
1edc4     A7 20 02 FB | 	rdlong	local02, fp
1edc8     44 4E 85 F1 | 	sub	fp, #68
1edcc     08 00 00 FF 
1edd0     00 20 0E F2 | 	cmp	local02, ##4096 wz
1edd4     18 00 90 5D |  if_ne	jmp	#LR__3143
1edd8     08 4E 05 F1 | 	add	fp, #8
1eddc     A7 20 02 FB | 	rdlong	local02, fp
1ede0     10 20 46 F5 | 	or	local02, #16
1ede4     A7 20 62 FC | 	wrlong	local02, fp
1ede8     08 4E 85 F1 | 	sub	fp, #8
1edec     AC 00 90 FD | 	jmp	#LR__3148
1edf0                 | LR__3143
1edf0     44 4E 05 F1 | 	add	fp, #68
1edf4     A7 20 02 FB | 	rdlong	local02, fp
1edf8     44 4E 85 F1 | 	sub	fp, #68
1edfc     10 00 00 FF 
1ee00     00 20 0E F2 | 	cmp	local02, ##8192 wz
1ee04     44 4E 05 51 |  if_ne	add	fp, #68
1ee08     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1ee0c     44 4E 85 51 |  if_ne	sub	fp, #68
1ee10     18 00 00 5F 
1ee14     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1ee18     44 4E 05 51 |  if_ne	add	fp, #68
1ee1c     0F 23 02 56 |  if_ne	mov	local03, local01
1ee20     44 4E 85 51 |  if_ne	sub	fp, #68
1ee24     20 00 00 5F 
1ee28     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1ee2c     18 00 90 5D |  if_ne	jmp	#LR__3144
1ee30     08 4E 05 F1 | 	add	fp, #8
1ee34     A7 20 02 FB | 	rdlong	local02, fp
1ee38     04 20 46 F5 | 	or	local02, #4
1ee3c     A7 20 62 FC | 	wrlong	local02, fp
1ee40     08 4E 85 F1 | 	sub	fp, #8
1ee44     54 00 90 FD | 	jmp	#LR__3147
1ee48                 | LR__3144
1ee48     18 4E 05 F1 | 	add	fp, #24
1ee4c     A7 20 02 FB | 	rdlong	local02, fp
1ee50     18 4E 85 F1 | 	sub	fp, #24
1ee54     92 20 CE F7 | 	test	local02, #146 wz
1ee58     18 00 90 5D |  if_ne	jmp	#LR__3145
1ee5c     08 4E 05 F1 | 	add	fp, #8
1ee60     A7 20 02 FB | 	rdlong	local02, fp
1ee64     01 20 46 F5 | 	or	local02, #1
1ee68     A7 20 62 FC | 	wrlong	local02, fp
1ee6c     08 4E 85 F1 | 	sub	fp, #8
1ee70     28 00 90 FD | 	jmp	#LR__3146
1ee74                 | LR__3145
1ee74     44 4E 05 F1 | 	add	fp, #68
1ee78     A7 24 02 FB | 	rdlong	local04, fp
1ee7c     44 4E 85 F1 | 	sub	fp, #68
1ee80     08 00 00 FF 
1ee84     00 24 0E F2 | 	cmp	local04, ##4096 wz
1ee88     08 4E 05 51 |  if_ne	add	fp, #8
1ee8c     A7 24 02 5B |  if_ne	rdlong	local04, fp
1ee90     20 24 46 55 |  if_ne	or	local04, #32
1ee94     A7 24 62 5C |  if_ne	wrlong	local04, fp
1ee98     08 4E 85 51 |  if_ne	sub	fp, #8
1ee9c                 | LR__3146
1ee9c                 | LR__3147
1ee9c                 | LR__3148
1ee9c     08 4E 05 F1 | 	add	fp, #8
1eea0     A7 24 02 FB | 	rdlong	local04, fp
1eea4     08 4E 85 F1 | 	sub	fp, #8
1eea8     03 00 00 FF 
1eeac     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1eeb0     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1eeb4     03 00 00 FF 
1eeb8     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1eebc     0F 25 CA F7 | 	test	local04, local01 wz
1eec0     E0 FD 9F AD |  if_e	jmp	#LR__3141
1eec4                 | LR__3149
1eec4     0C 4E 05 F1 | 	add	fp, #12
1eec8     A7 12 02 FB | 	rdlong	arg01, fp
1eecc     0C 4E 85 F1 | 	sub	fp, #12
1eed0     09 27 02 F6 | 	mov	local05, arg01
1eed4     97 06 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
1eed8                 | LR__3150
1eed8     13 FB C9 FA | 	rdbyte	result1, local05 wz
1eedc     01 26 06 51 |  if_ne	add	local05, #1
1eee0     F4 FF 9F 5D |  if_ne	jmp	#LR__3150
1eee4                 | LR__3151
1eee4     13 13 C2 F2 | 	subr	arg01, local05
1eee8     01 12 06 F1 | 	add	arg01, #1
1eeec     64 E0 BF FD | 	call	#__system___gc_alloc_managed
1eef0     48 4E 05 F1 | 	add	fp, #72
1eef4     A7 FA 61 FC | 	wrlong	result1, fp
1eef8     48 4E 85 F1 | 	sub	fp, #72
1eefc     00 FA 0D F2 | 	cmp	result1, #0 wz
1ef00     18 00 90 AD |  if_e	jmp	#LR__3152
1ef04     48 4E 05 F1 | 	add	fp, #72
1ef08     A7 12 02 FB | 	rdlong	arg01, fp
1ef0c     3C 4E 85 F1 | 	sub	fp, #60
1ef10     A7 14 02 FB | 	rdlong	arg02, fp
1ef14     0C 4E 85 F1 | 	sub	fp, #12
1ef18     34 A2 BF FD | 	call	#__system____builtin_strcpy
1ef1c                 | LR__3152
1ef1c     48 4E 05 F1 | 	add	fp, #72
1ef20     A7 FA 01 FB | 	rdlong	result1, fp
1ef24     48 4E 85 F1 | 	sub	fp, #72
1ef28                 | LR__3153
1ef28     A7 F0 03 F6 | 	mov	ptra, fp
1ef2c     B2 00 A0 FD | 	call	#popregs_
1ef30                 | __system___basic_dir_ret
1ef30     2D 00 64 FD | 	ret
1ef34                 | 
1ef34                 | __system__pack_0491
1ef34     09 01 02 F6 | 	mov	_var01, arg01
1ef38     7F 16 06 F1 | 	add	arg03, #127
1ef3c     04 18 CE F7 | 	test	arg04, #4 wz
1ef40     10 00 90 AD |  if_e	jmp	#LR__3160
1ef44     00 00 0E F2 | 	cmp	_var01, #0 wz
1ef48     16 00 C6 A9 |  if_e	decod	_var01, #22
1ef4c     F7 00 26 F4 | 	bith	_var01, #247
1ef50     B4 00 90 FD | 	jmp	#LR__3169
1ef54                 | LR__3160
1ef54     02 18 CE F7 | 	test	arg04, #2 wz
1ef58     00 C0 3F 5F 
1ef5c     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1ef60     00 14 06 56 |  if_ne	mov	arg02, #0
1ef64     A0 00 90 5D |  if_ne	jmp	#LR__3168
1ef68     08 18 CE F7 | 	test	arg04, #8 wz
1ef6c     00 00 06 56 |  if_ne	mov	_var01, #0
1ef70     94 00 90 5D |  if_ne	jmp	#LR__3167
1ef74     FF 16 56 F2 | 	cmps	arg03, #255 wc
1ef78     00 C0 3F 3F 
1ef7c     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1ef80     00 14 06 36 |  if_ae	mov	arg02, #0
1ef84     80 00 90 3D |  if_ae	jmp	#LR__3166
1ef88     01 16 56 F2 | 	cmps	arg03, #1 wc
1ef8c     6C 00 90 3D |  if_ae	jmp	#LR__3164
1ef90     01 14 46 F0 | 	shr	arg02, #1
1ef94     00 03 02 F6 | 	mov	_var02, _var01
1ef98     01 02 06 F5 | 	and	_var02, #1
1ef9c     1F 02 66 F0 | 	shl	_var02, #31
1efa0     01 15 42 F5 | 	or	arg02, _var02
1efa4     01 00 46 F0 | 	shr	_var01, #1
1efa8     97 1E 48 FB | 	callpa	#(@LR__3162-@LR__3161)>>2,fcache_load_ptr_
1efac                 | LR__3161
1efac     00 16 56 F2 | 	cmps	arg03, #0 wc
1efb0     34 00 90 3D |  if_ae	jmp	#LR__3163
1efb4     00 00 0E F2 | 	cmp	_var01, #0 wz
1efb8     2C 00 90 AD |  if_e	jmp	#LR__3163
1efbc     0A 13 02 F6 | 	mov	arg01, arg02
1efc0     01 12 06 F5 | 	and	arg01, #1
1efc4     01 16 06 F1 | 	add	arg03, #1
1efc8     01 14 46 F0 | 	shr	arg02, #1
1efcc     00 03 02 F6 | 	mov	_var02, _var01
1efd0     01 02 06 F5 | 	and	_var02, #1
1efd4     1F 02 66 F0 | 	shl	_var02, #31
1efd8     01 15 42 F5 | 	or	arg02, _var02
1efdc     09 15 42 F5 | 	or	arg02, arg01
1efe0     01 00 46 F0 | 	shr	_var01, #1
1efe4     C4 FF 9F FD | 	jmp	#LR__3161
1efe8                 | LR__3162
1efe8                 | LR__3163
1efe8     00 16 56 F2 | 	cmps	arg03, #0 wc
1efec     18 00 90 3D |  if_ae	jmp	#LR__3165
1eff0     00 14 0E F2 | 	cmp	arg02, #0 wz
1eff4     6F 14 62 FD | 	wrnz	arg02
1eff8     0C 00 90 FD | 	jmp	#LR__3165
1effc                 | LR__3164
1effc     17 01 06 F4 | 	bitl	_var01, #279
1f000     17 16 66 F0 | 	shl	arg03, #23
1f004     0B 01 42 F5 | 	or	_var01, arg03
1f008                 | LR__3165
1f008                 | LR__3166
1f008                 | LR__3167
1f008                 | LR__3168
1f008                 | LR__3169
1f008     01 00 CE F7 | 	test	_var01, #1 wz
1f00c     01 14 46 55 |  if_ne	or	arg02, #1
1f010     0A 17 02 F6 | 	mov	arg03, arg02
1f014     00 02 06 F6 | 	mov	_var02, #0
1f018     FF FF 3F FF 
1f01c     FF 15 06 F1 | 	add	arg02, ##2147483647
1f020     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1f024     01 02 06 C6 |  if_b	mov	_var02, #1
1f028     01 01 02 F1 | 	add	_var01, _var02
1f02c     01 18 CE F7 | 	test	arg04, #1 wz
1f030     1F 00 26 54 |  if_ne	bith	_var01, #31
1f034     00 FB 01 F6 | 	mov	result1, _var01
1f038                 | __system__pack_0491_ret
1f038     2D 00 64 FD | 	ret
1f03c                 | 
1f03c                 | __system___rxtxioctl_0581
1f03c     00 15 0E F2 | 	cmp	arg02, #256 wz
1f040     0C 00 90 AD |  if_e	jmp	#LR__3170
1f044     01 15 0E F2 | 	cmp	arg02, #257 wz
1f048     1C 00 90 AD |  if_e	jmp	#LR__3171
1f04c     30 00 90 FD | 	jmp	#LR__3172
1f050                 | LR__3170
1f050     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1f054     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1f058     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1f05c     0B FB 61 FC | 	wrlong	result1, arg03
1f060     00 FA 05 F6 | 	mov	result1, #0
1f064     28 00 90 FD | 	jmp	#LR__3173
1f068                 | LR__3171
1f068     0B 13 02 FB | 	rdlong	arg01, arg03
1f06c     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1f070     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1f074     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1f078     00 FA 05 F6 | 	mov	result1, #0
1f07c     10 00 90 FD | 	jmp	#LR__3173
1f080                 | LR__3172
1f080     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1f084     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1f088     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1f08c     01 FA 65 F6 | 	neg	result1, #1
1f090                 | LR__3173
1f090                 | __system___rxtxioctl_0581_ret
1f090     2D 00 64 FD | 	ret
1f094                 | 
1f094                 | __system____dummy_flush_0582
1f094     00 FA 05 F6 | 	mov	result1, #0
1f098                 | __system____dummy_flush_0582_ret
1f098     2D 00 64 FD | 	ret
1f09c                 | 
1f09c                 | __system___vfsread
1f09c     03 4A 05 F6 | 	mov	COUNT_, #3
1f0a0     A8 00 A0 FD | 	call	#pushregs_
1f0a4     28 F0 07 F1 | 	add	ptra, #40
1f0a8     04 4E 05 F1 | 	add	fp, #4
1f0ac     A7 12 62 FC | 	wrlong	arg01, fp
1f0b0     04 4E 05 F1 | 	add	fp, #4
1f0b4     A7 14 62 FC | 	wrlong	arg02, fp
1f0b8     04 4E 05 F1 | 	add	fp, #4
1f0bc     A7 16 62 FC | 	wrlong	arg03, fp
1f0c0     04 4E 85 F1 | 	sub	fp, #4
1f0c4     A7 FA 01 FB | 	rdlong	result1, fp
1f0c8     14 4E 05 F1 | 	add	fp, #20
1f0cc     A7 FA 61 FC | 	wrlong	result1, fp
1f0d0     04 4E 05 F1 | 	add	fp, #4
1f0d4     A7 00 68 FC | 	wrlong	#0, fp
1f0d8     1C 4E 85 F1 | 	sub	fp, #28
1f0dc     A7 12 02 FB | 	rdlong	arg01, fp
1f0e0     04 4E 85 F1 | 	sub	fp, #4
1f0e4     08 12 06 F1 | 	add	arg01, #8
1f0e8     09 FB 01 FB | 	rdlong	result1, arg01
1f0ec     01 FA CD F7 | 	test	result1, #1 wz
1f0f0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1f0f4     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1f0f8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1f0fc     01 FA 65 A6 |  if_e	neg	result1, #1
1f100     74 02 90 AD |  if_e	jmp	#LR__3186
1f104     04 4E 05 F1 | 	add	fp, #4
1f108     A7 12 02 FB | 	rdlong	arg01, fp
1f10c     04 4E 85 F1 | 	sub	fp, #4
1f110     14 12 06 F1 | 	add	arg01, #20
1f114     09 FB 09 FB | 	rdlong	result1, arg01 wz
1f118     B8 00 90 AD |  if_e	jmp	#LR__3181
1f11c     04 4E 05 F1 | 	add	fp, #4
1f120     A7 12 02 FB | 	rdlong	arg01, fp
1f124     09 17 02 F6 | 	mov	arg03, arg01
1f128     14 16 06 F1 | 	add	arg03, #20
1f12c     0B 1F 02 FB | 	rdlong	local01, arg03
1f130     0F 21 02 F6 | 	mov	local02, local01
1f134     13 1E 46 F7 | 	zerox	local01, #19
1f138     14 20 46 F0 | 	shr	local02, #20
1f13c     02 20 66 F0 | 	shl	local02, #2
1f140     ED 20 02 F1 | 	add	local02, __methods__
1f144     10 21 02 FB | 	rdlong	local02, local02
1f148     04 4E 05 F1 | 	add	fp, #4
1f14c     A7 14 02 FB | 	rdlong	arg02, fp
1f150     04 4E 05 F1 | 	add	fp, #4
1f154     A7 16 02 FB | 	rdlong	arg03, fp
1f158     0C 4E 85 F1 | 	sub	fp, #12
1f15c     F2 22 02 F6 | 	mov	local03, objptr
1f160     0F E5 01 F6 | 	mov	objptr, local01
1f164     2D 20 62 FD | 	call	local02
1f168     11 E5 01 F6 | 	mov	objptr, local03
1f16c     10 4E 05 F1 | 	add	fp, #16
1f170     A7 FA 61 FC | 	wrlong	result1, fp
1f174     10 4E 85 F1 | 	sub	fp, #16
1f178     00 FA 55 F2 | 	cmps	result1, #0 wc
1f17c     44 00 90 3D |  if_ae	jmp	#LR__3180
1f180     04 4E 05 F1 | 	add	fp, #4
1f184     A7 22 02 FB | 	rdlong	local03, fp
1f188     11 1F 02 F6 | 	mov	local01, local03
1f18c     08 22 06 F1 | 	add	local03, #8
1f190     11 21 02 FB | 	rdlong	local02, local03
1f194     20 20 46 F5 | 	or	local02, #32
1f198     08 1E 06 F1 | 	add	local01, #8
1f19c     0F 21 62 FC | 	wrlong	local02, local01
1f1a0     0C 4E 05 F1 | 	add	fp, #12
1f1a4     A7 12 0A FB | 	rdlong	arg01, fp wz
1f1a8     10 4E 85 F1 | 	sub	fp, #16
1f1ac     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1f1b0     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1f1b4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1f1b8     01 FA 65 56 |  if_ne	neg	result1, #1
1f1bc     00 FA 05 A6 |  if_e	mov	result1, #0
1f1c0     B4 01 90 FD | 	jmp	#LR__3186
1f1c4                 | LR__3180
1f1c4     10 4E 05 F1 | 	add	fp, #16
1f1c8     A7 FA 01 FB | 	rdlong	result1, fp
1f1cc     10 4E 85 F1 | 	sub	fp, #16
1f1d0     A4 01 90 FD | 	jmp	#LR__3186
1f1d4                 | LR__3181
1f1d4     04 4E 05 F1 | 	add	fp, #4
1f1d8     A7 12 02 FB | 	rdlong	arg01, fp
1f1dc     20 12 06 F1 | 	add	arg01, #32
1f1e0     09 13 0A FB | 	rdlong	arg01, arg01 wz
1f1e4     14 4E 05 F1 | 	add	fp, #20
1f1e8     A7 12 62 FC | 	wrlong	arg01, fp
1f1ec     18 4E 85 F1 | 	sub	fp, #24
1f1f0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1f1f4     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1f1f8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1f1fc     01 FA 65 A6 |  if_e	neg	result1, #1
1f200     74 01 90 AD |  if_e	jmp	#LR__3186
1f204     04 4E 05 F1 | 	add	fp, #4
1f208     A7 22 02 FB | 	rdlong	local03, fp
1f20c     04 4E 85 F1 | 	sub	fp, #4
1f210     28 22 06 F1 | 	add	local03, #40
1f214     11 21 0A FB | 	rdlong	local02, local03 wz
1f218     7C 00 90 AD |  if_e	jmp	#LR__3183
1f21c     04 4E 05 F1 | 	add	fp, #4
1f220     A7 12 02 FB | 	rdlong	arg01, fp
1f224     09 23 02 F6 | 	mov	local03, arg01
1f228     28 22 06 F1 | 	add	local03, #40
1f22c     11 1F 02 FB | 	rdlong	local01, local03
1f230     0F 21 02 F6 | 	mov	local02, local01
1f234     13 1E 46 F7 | 	zerox	local01, #19
1f238     14 20 46 F0 | 	shr	local02, #20
1f23c     02 20 66 F0 | 	shl	local02, #2
1f240     ED 20 02 F1 | 	add	local02, __methods__
1f244     10 21 02 FB | 	rdlong	local02, local02
1f248     20 4E 05 F1 | 	add	fp, #32
1f24c     A7 16 02 F6 | 	mov	arg03, fp
1f250     24 4E 85 F1 | 	sub	fp, #36
1f254     00 15 06 F6 | 	mov	arg02, #256
1f258     F2 22 02 F6 | 	mov	local03, objptr
1f25c     0F E5 01 F6 | 	mov	objptr, local01
1f260     2D 20 62 FD | 	call	local02
1f264     11 E5 01 F6 | 	mov	objptr, local03
1f268     10 4E 05 F1 | 	add	fp, #16
1f26c     A7 FA 61 FC | 	wrlong	result1, fp
1f270     00 FA 4D F2 | 	cmps	result1, #0 wz
1f274     10 4E 85 F1 | 	sub	fp, #16
1f278     1C 00 90 5D |  if_ne	jmp	#LR__3182
1f27c     24 4E 05 F1 | 	add	fp, #36
1f280     A7 20 02 FB | 	rdlong	local02, fp
1f284     24 4E 85 F1 | 	sub	fp, #36
1f288     02 20 CE F7 | 	test	local02, #2 wz
1f28c     20 4E 05 51 |  if_ne	add	fp, #32
1f290     A7 02 68 5C |  if_ne	wrlong	#1, fp
1f294     20 4E 85 51 |  if_ne	sub	fp, #32
1f298                 | LR__3182
1f298                 | LR__3183
1f298     10 4E 05 F1 | 	add	fp, #16
1f29c     A7 00 68 FC | 	wrlong	#0, fp
1f2a0     10 4E 85 F1 | 	sub	fp, #16
1f2a4                 | LR__3184
1f2a4     0C 4E 05 F1 | 	add	fp, #12
1f2a8     A7 22 02 FB | 	rdlong	local03, fp
1f2ac     0C 4E 85 F1 | 	sub	fp, #12
1f2b0     01 22 16 F2 | 	cmp	local03, #1 wc
1f2b4     B4 00 90 CD |  if_b	jmp	#LR__3185
1f2b8     18 4E 05 F1 | 	add	fp, #24
1f2bc     A7 20 02 FB | 	rdlong	local02, fp
1f2c0     10 23 02 F6 | 	mov	local03, local02
1f2c4     13 22 46 F7 | 	zerox	local03, #19
1f2c8     14 20 46 F0 | 	shr	local02, #20
1f2cc     02 20 66 F0 | 	shl	local02, #2
1f2d0     ED 20 02 F1 | 	add	local02, __methods__
1f2d4     10 21 02 FB | 	rdlong	local02, local02
1f2d8     14 4E 85 F1 | 	sub	fp, #20
1f2dc     A7 12 02 FB | 	rdlong	arg01, fp
1f2e0     04 4E 85 F1 | 	sub	fp, #4
1f2e4     F2 1E 02 F6 | 	mov	local01, objptr
1f2e8     11 E5 01 F6 | 	mov	objptr, local03
1f2ec     2D 20 62 FD | 	call	local02
1f2f0     0F E5 01 F6 | 	mov	objptr, local01
1f2f4     14 4E 05 F1 | 	add	fp, #20
1f2f8     A7 FA 61 FC | 	wrlong	result1, fp
1f2fc     14 4E 85 F1 | 	sub	fp, #20
1f300     00 FA 55 F2 | 	cmps	result1, #0 wc
1f304     64 00 90 CD |  if_b	jmp	#LR__3185
1f308     1C 4E 05 F1 | 	add	fp, #28
1f30c     A7 22 02 FB | 	rdlong	local03, fp
1f310     11 21 02 F6 | 	mov	local02, local03
1f314     01 20 06 F1 | 	add	local02, #1
1f318     A7 20 62 FC | 	wrlong	local02, fp
1f31c     08 4E 85 F1 | 	sub	fp, #8
1f320     A7 20 02 FB | 	rdlong	local02, fp
1f324     11 21 42 FC | 	wrbyte	local02, local03
1f328     04 4E 85 F1 | 	sub	fp, #4
1f32c     A7 22 02 FB | 	rdlong	local03, fp
1f330     01 22 06 F1 | 	add	local03, #1
1f334     A7 22 62 FC | 	wrlong	local03, fp
1f338     04 4E 85 F1 | 	sub	fp, #4
1f33c     A7 22 02 FB | 	rdlong	local03, fp
1f340     01 22 86 F1 | 	sub	local03, #1
1f344     A7 22 62 FC | 	wrlong	local03, fp
1f348     14 4E 05 F1 | 	add	fp, #20
1f34c     A7 22 0A FB | 	rdlong	local03, fp wz
1f350     20 4E 85 F1 | 	sub	fp, #32
1f354     4C FF 9F AD |  if_e	jmp	#LR__3184
1f358     14 4E 05 F1 | 	add	fp, #20
1f35c     A7 20 02 FB | 	rdlong	local02, fp
1f360     14 4E 85 F1 | 	sub	fp, #20
1f364     0A 20 0E F2 | 	cmp	local02, #10 wz
1f368     38 FF 9F 5D |  if_ne	jmp	#LR__3184
1f36c                 | LR__3185
1f36c     10 4E 05 F1 | 	add	fp, #16
1f370     A7 FA 01 FB | 	rdlong	result1, fp
1f374     10 4E 85 F1 | 	sub	fp, #16
1f378                 | LR__3186
1f378     A7 F0 03 F6 | 	mov	ptra, fp
1f37c     B2 00 A0 FD | 	call	#popregs_
1f380                 | __system___vfsread_ret
1f380     2D 00 64 FD | 	ret
1f384                 | 
1f384                 | __system____default_filbuf
1f384     04 4A 05 F6 | 	mov	COUNT_, #4
1f388     A8 00 A0 FD | 	call	#pushregs_
1f38c     09 1F 02 F6 | 	mov	local01, arg01
1f390     0F 21 02 FB | 	rdlong	local02, local01
1f394     0C 20 06 F1 | 	add	local02, #12
1f398     10 FB 09 FB | 	rdlong	result1, local02 wz
1f39c     0C 20 86 F1 | 	sub	local02, #12
1f3a0     20 00 90 5D |  if_ne	jmp	#LR__3190
1f3a4     14 20 06 F1 | 	add	local02, #20
1f3a8     10 FB 01 F6 | 	mov	result1, local02
1f3ac     04 20 86 F1 | 	sub	local02, #4
1f3b0     10 FB 61 FC | 	wrlong	result1, local02
1f3b4     04 20 86 F1 | 	sub	local02, #4
1f3b8     02 00 80 FF 
1f3bc     10 01 68 FC | 	wrlong	##1024, local02
1f3c0     0C 20 86 F1 | 	sub	local02, #12
1f3c4                 | LR__3190
1f3c4     14 1E 06 F1 | 	add	local01, #20
1f3c8     0F 23 02 FB | 	rdlong	local03, local01
1f3cc     11 25 02 F6 | 	mov	local04, local03
1f3d0     14 1E 86 F1 | 	sub	local01, #20
1f3d4     13 24 46 F7 | 	zerox	local04, #19
1f3d8     14 22 46 F0 | 	shr	local03, #20
1f3dc     02 22 66 F0 | 	shl	local03, #2
1f3e0     ED 22 02 F1 | 	add	local03, __methods__
1f3e4     11 23 02 FB | 	rdlong	local03, local03
1f3e8     10 20 06 F1 | 	add	local02, #16
1f3ec     10 15 02 FB | 	rdlong	arg02, local02
1f3f0     04 20 86 F1 | 	sub	local02, #4
1f3f4     10 17 02 FB | 	rdlong	arg03, local02
1f3f8     0C 20 86 F1 | 	sub	local02, #12
1f3fc     0F 13 02 F6 | 	mov	arg01, local01
1f400     F2 1E 02 F6 | 	mov	local01, objptr
1f404     12 E5 01 F6 | 	mov	objptr, local04
1f408     2D 22 62 FD | 	call	local03
1f40c     0F E5 01 F6 | 	mov	objptr, local01
1f410     FD 24 02 F6 | 	mov	local04, result1
1f414     00 24 56 F2 | 	cmps	local04, #0 wc
1f418     01 FA 65 C6 |  if_b	neg	result1, #1
1f41c     28 00 90 CD |  if_b	jmp	#LR__3191
1f420     10 25 62 FC | 	wrlong	local04, local02
1f424     10 20 06 F1 | 	add	local02, #16
1f428     10 23 02 FB | 	rdlong	local03, local02
1f42c     0C 20 86 F1 | 	sub	local02, #12
1f430     10 23 62 FC | 	wrlong	local03, local02
1f434     04 20 06 F1 | 	add	local02, #4
1f438     10 23 02 FB | 	rdlong	local03, local02
1f43c     01 22 46 F5 | 	or	local03, #1
1f440     10 23 62 FC | 	wrlong	local03, local02
1f444     12 FB 01 F6 | 	mov	result1, local04
1f448                 | LR__3191
1f448     A7 F0 03 F6 | 	mov	ptra, fp
1f44c     B2 00 A0 FD | 	call	#popregs_
1f450                 | __system____default_filbuf_ret
1f450     2D 00 64 FD | 	ret
1f454                 | 
1f454                 | __system__getlower_0967
1f454     41 12 56 F2 | 	cmps	arg01, #65 wc
1f458     10 00 90 CD |  if_b	jmp	#LR__3200
1f45c     5B 12 56 F2 | 	cmps	arg01, #91 wc
1f460     09 FB 01 C6 |  if_b	mov	result1, arg01
1f464     20 FA 05 C1 |  if_b	add	result1, #32
1f468     04 00 90 CD |  if_b	jmp	#__system__getlower_0967_ret
1f46c                 | LR__3200
1f46c     09 FB 01 F6 | 	mov	result1, arg01
1f470                 | __system__getlower_0967_ret
1f470     2D 00 64 FD | 	ret
1f474                 | 
1f474                 | __system___pat_match
1f474     08 4A 05 F6 | 	mov	COUNT_, #8
1f478     A8 00 A0 FD | 	call	#pushregs_
1f47c     09 1F 02 F6 | 	mov	local01, arg01
1f480                 | LR__3210
1f480     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1f484     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1f488     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1f48c     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1f490     2C 00 90 AD |  if_e	jmp	#LR__3211
1f494     0A 13 C2 FA | 	rdbyte	arg01, arg02
1f498     B8 FF BF FD | 	call	#__system__getlower_0967
1f49c     FD 22 02 F6 | 	mov	local03, result1
1f4a0     0F 13 C2 FA | 	rdbyte	arg01, local01
1f4a4     AC FF BF FD | 	call	#__system__getlower_0967
1f4a8     11 FB 09 F2 | 	cmp	result1, local03 wz
1f4ac     00 FA 05 56 |  if_ne	mov	result1, #0
1f4b0     FC 00 90 5D |  if_ne	jmp	#LR__3219
1f4b4     01 1E 06 F1 | 	add	local01, #1
1f4b8     01 14 06 F1 | 	add	arg02, #1
1f4bc     C0 FF 9F FD | 	jmp	#LR__3210
1f4c0                 | LR__3211
1f4c0     0A 23 C2 FA | 	rdbyte	local03, arg02
1f4c4     2A 22 0E F2 | 	cmp	local03, #42 wz
1f4c8     D4 00 90 5D |  if_ne	jmp	#LR__3218
1f4cc     01 14 06 F1 | 	add	arg02, #1
1f4d0     0A 21 C2 FA | 	rdbyte	local02, arg02
1f4d4     01 14 86 F1 | 	sub	arg02, #1
1f4d8     2E 20 0E F2 | 	cmp	local02, #46 wz
1f4dc     28 00 90 5D |  if_ne	jmp	#LR__3212
1f4e0     02 14 06 F1 | 	add	arg02, #2
1f4e4     0A 21 C2 FA | 	rdbyte	local02, arg02
1f4e8     02 14 86 F1 | 	sub	arg02, #2
1f4ec     2A 20 0E F2 | 	cmp	local02, #42 wz
1f4f0     03 14 06 A1 |  if_e	add	arg02, #3
1f4f4     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1f4f8     03 14 86 A1 |  if_e	sub	arg02, #3
1f4fc     12 27 0A A6 |  if_e	mov	local05, local04 wz
1f500     01 FA 05 A6 |  if_e	mov	result1, #1
1f504     A8 00 90 AD |  if_e	jmp	#LR__3219
1f508                 | LR__3212
1f508     01 14 06 F1 | 	add	arg02, #1
1f50c     00 28 06 F6 | 	mov	local06, #0
1f510     97 1E 48 FB | 	callpa	#(@LR__3215-@LR__3213)>>2,fcache_load_ptr_
1f514                 | LR__3213
1f514     14 2B 02 F6 | 	mov	local07, local06
1f518     0A 2B 02 F1 | 	add	local07, arg02
1f51c     15 2B CA FA | 	rdbyte	local07, local07 wz
1f520     14 27 02 56 |  if_ne	mov	local05, local06
1f524     01 26 06 51 |  if_ne	add	local05, #1
1f528     13 29 02 56 |  if_ne	mov	local06, local05
1f52c     E4 FF 9F 5D |  if_ne	jmp	#LR__3213
1f530     00 2C 06 F6 | 	mov	local08, #0
1f534                 | LR__3214
1f534     16 2B 02 F6 | 	mov	local07, local08
1f538     0F 2B 02 F1 | 	add	local07, local01
1f53c     15 2B CA FA | 	rdbyte	local07, local07 wz
1f540     16 27 02 56 |  if_ne	mov	local05, local08
1f544     01 26 06 51 |  if_ne	add	local05, #1
1f548     13 2D 02 56 |  if_ne	mov	local08, local05
1f54c     E4 FF 9F 5D |  if_ne	jmp	#LR__3214
1f550                 | LR__3215
1f550     14 2D 52 F2 | 	cmps	local08, local06 wc
1f554     00 FA 05 C6 |  if_b	mov	result1, #0
1f558     54 00 90 CD |  if_b	jmp	#LR__3219
1f55c     16 21 02 F6 | 	mov	local02, local08
1f560     14 21 82 F1 | 	sub	local02, local06
1f564     10 1F 02 F1 | 	add	local01, local02
1f568                 | LR__3216
1f568     01 28 56 F2 | 	cmps	local06, #1 wc
1f56c     30 00 90 CD |  if_b	jmp	#LR__3217
1f570     0F 13 C2 FA | 	rdbyte	arg01, local01
1f574     DC FE BF FD | 	call	#__system__getlower_0967
1f578     FD 2C 02 F6 | 	mov	local08, result1
1f57c     0A 13 C2 FA | 	rdbyte	arg01, arg02
1f580     D0 FE BF FD | 	call	#__system__getlower_0967
1f584     FD 2C 0A F2 | 	cmp	local08, result1 wz
1f588     00 FA 05 56 |  if_ne	mov	result1, #0
1f58c     20 00 90 5D |  if_ne	jmp	#LR__3219
1f590     01 1E 06 F1 | 	add	local01, #1
1f594     01 14 06 F1 | 	add	arg02, #1
1f598     01 28 86 F1 | 	sub	local06, #1
1f59c     C8 FF 9F FD | 	jmp	#LR__3216
1f5a0                 | LR__3217
1f5a0                 | LR__3218
1f5a0     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1f5a4     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1f5a8     01 FA 05 A6 |  if_e	mov	result1, #1
1f5ac     00 FA 05 56 |  if_ne	mov	result1, #0
1f5b0                 | LR__3219
1f5b0     A7 F0 03 F6 | 	mov	ptra, fp
1f5b4     B2 00 A0 FD | 	call	#popregs_
1f5b8                 | __system___pat_match_ret
1f5b8     2D 00 64 FD | 	ret
1f5bc                 | 
1f5bc                 | _fatfs_cc_ff_uni2oem
1f5bc     00 00 06 F6 | 	mov	_var01, #0
1f5c0     80 12 16 F2 | 	cmp	arg01, #128 wc
1f5c4     09 01 02 C6 |  if_b	mov	_var01, arg01
1f5c8     58 00 90 CD |  if_b	jmp	#LR__3224
1f5cc     80 00 00 FF 
1f5d0     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1f5d4     4C 00 90 3D |  if_ae	jmp	#LR__3223
1f5d8     0A FB 31 F9 | 	getword	result1, arg02, #0
1f5dc     01 00 00 FF 
1f5e0     52 FB 0D F2 | 	cmp	result1, ##850 wz
1f5e4     3C 00 90 5D |  if_ne	jmp	#LR__3223
1f5e8                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1f5e8     00 00 06 F6 | 	mov	_var01, #0
1f5ec     97 14 48 FB | 	callpa	#(@LR__3221-@LR__3220)>>2,fcache_load_ptr_
1f5f0                 | LR__3220
1f5f0     00 FB 31 F9 | 	getword	result1, _var01, #0
1f5f4     80 FA 15 F2 | 	cmp	result1, #128 wc
1f5f8     1C 00 90 3D |  if_ae	jmp	#LR__3222
1f5fc     00 FB 31 F9 | 	getword	result1, _var01, #0
1f600     01 FA 65 F0 | 	shl	result1, #1
1f604     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1f608     FD FA E1 FA | 	rdword	result1, result1
1f60c     FD 12 0A F2 | 	cmp	arg01, result1 wz
1f610     01 00 06 51 |  if_ne	add	_var01, #1
1f614     D8 FF 9F 5D |  if_ne	jmp	#LR__3220
1f618                 | LR__3221
1f618                 | LR__3222
1f618     00 01 32 F9 | 	getword	_var01, _var01, #0
1f61c     80 00 06 F1 | 	add	_var01, #128
1f620     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1f624                 | LR__3223
1f624                 | LR__3224
1f624                 | ' 			c = (c + 0x80) & 0xFF;
1f624                 | ' 		}
1f624                 | ' 	}
1f624                 | ' 
1f624                 | ' 	return c;
1f624     00 FB 01 F6 | 	mov	result1, _var01
1f628                 | _fatfs_cc_ff_uni2oem_ret
1f628     2D 00 64 FD | 	ret
1f62c                 | 
1f62c                 | _fatfs_cc_ff_oem2uni
1f62c     00 00 06 F6 | 	mov	_var01, #0
1f630     09 FB 31 F9 | 	getword	result1, arg01, #0
1f634     80 FA 15 F2 | 	cmp	result1, #128 wc
1f638     09 01 02 C6 |  if_b	mov	_var01, arg01
1f63c     2C 00 90 CD |  if_b	jmp	#LR__3231
1f640     0A 15 32 F9 | 	getword	arg02, arg02, #0
1f644     01 00 00 FF 
1f648     52 15 0E F2 | 	cmp	arg02, ##850 wz
1f64c     1C 00 90 5D |  if_ne	jmp	#LR__3230
1f650     09 FB 31 F9 | 	getword	result1, arg01, #0
1f654     00 FB 15 F2 | 	cmp	result1, #256 wc
1f658     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1f65c     80 12 86 C1 |  if_b	sub	arg01, #128
1f660     01 12 66 C0 |  if_b	shl	arg01, #1
1f664     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1f668     09 01 E2 CA |  if_b	rdword	_var01, arg01
1f66c                 | LR__3230
1f66c                 | LR__3231
1f66c                 | ' 		}
1f66c                 | ' 	}
1f66c                 | ' 
1f66c                 | ' 	return c;
1f66c     00 FB 01 F6 | 	mov	result1, _var01
1f670                 | _fatfs_cc_ff_oem2uni_ret
1f670     2D 00 64 FD | 	ret
1f674                 | 
1f674                 | _fatfs_cc_ff_wtoupper
1f674     09 01 02 F6 | 	mov	_var01, arg01
1f678     80 00 00 FF 
1f67c     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1f680     60 01 90 3D |  if_ae	jmp	#LR__3253
1f684     00 03 02 F6 | 	mov	_var02, _var01
1f688     01 01 32 F9 | 	getword	_var01, _var02, #0
1f68c     08 00 00 FF 
1f690     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1f694     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1f698     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1f69c     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1f6a0     01 00 00 3F 
1f6a4     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1f6a8     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1f6ac     01 00 00 3F 
1f6b0     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1f6b4     02 07 02 F6 | 	mov	_var04, _var03
1f6b8                 | ' 		uc = (WORD)uni;
1f6b8                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1f6b8                 | ' 		for (;;) {
1f6b8                 | LR__3240
1f6b8     03 09 E2 FA | 	rdword	_var05, _var04
1f6bc     04 05 02 F6 | 	mov	_var03, _var05
1f6c0     0F 04 4E F7 | 	zerox	_var03, #15 wz
1f6c4     02 06 06 F1 | 	add	_var04, #2
1f6c8     14 01 90 AD |  if_e	jmp	#LR__3252
1f6cc     01 05 32 F9 | 	getword	_var03, _var02, #0
1f6d0     04 01 32 F9 | 	getword	_var01, _var05, #0
1f6d4     00 05 12 F2 | 	cmp	_var03, _var01 wc
1f6d8     04 01 90 CD |  if_b	jmp	#LR__3252
1f6dc     03 0B E2 FA | 	rdword	_var06, _var04
1f6e0     05 0D 32 F9 | 	getword	_var07, _var06, #0
1f6e4     08 0C 46 F0 | 	shr	_var07, #8
1f6e8     05 0B 32 F9 | 	getword	_var06, _var06, #0
1f6ec     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1f6f0     01 05 32 F9 | 	getword	_var03, _var02, #0
1f6f4     04 0F 32 F9 | 	getword	_var08, _var05, #0
1f6f8     05 01 32 F9 | 	getword	_var01, _var06, #0
1f6fc     00 0F 02 F1 | 	add	_var08, _var01
1f700     07 05 52 F2 | 	cmps	_var03, _var08 wc
1f704     02 06 06 F1 | 	add	_var04, #2
1f708     C4 00 90 3D |  if_ae	jmp	#LR__3251
1f70c                 | ' 				switch (cmd) {
1f70c     06 11 32 F9 | 	getword	_var09, _var07, #0
1f710     09 10 26 F3 | 	fle	_var09, #9
1f714     30 10 62 FD | 	jmprel	_var09
1f718                 | LR__3241
1f718     24 00 90 FD | 	jmp	#LR__3242
1f71c     3C 00 90 FD | 	jmp	#LR__3243
1f720     54 00 90 FD | 	jmp	#LR__3244
1f724     5C 00 90 FD | 	jmp	#LR__3245
1f728     64 00 90 FD | 	jmp	#LR__3246
1f72c     6C 00 90 FD | 	jmp	#LR__3247
1f730     74 00 90 FD | 	jmp	#LR__3248
1f734     7C 00 90 FD | 	jmp	#LR__3249
1f738     84 00 90 FD | 	jmp	#LR__3250
1f73c     A0 00 90 FD | 	jmp	#LR__3252
1f740                 | LR__3242
1f740     01 03 32 F9 | 	getword	_var02, _var02, #0
1f744     04 09 32 F9 | 	getword	_var05, _var05, #0
1f748     04 03 82 F1 | 	sub	_var02, _var05
1f74c     01 02 66 F0 | 	shl	_var02, #1
1f750     03 03 02 F1 | 	add	_var02, _var04
1f754     01 03 E2 FA | 	rdword	_var02, _var02
1f758     84 00 90 FD | 	jmp	#LR__3252
1f75c                 | LR__3243
1f75c     01 05 32 F9 | 	getword	_var03, _var02, #0
1f760     01 03 32 F9 | 	getword	_var02, _var02, #0
1f764     04 09 32 F9 | 	getword	_var05, _var05, #0
1f768     04 03 82 F1 | 	sub	_var02, _var05
1f76c     01 02 06 F5 | 	and	_var02, #1
1f770     02 03 C2 F2 | 	subr	_var02, _var03
1f774     68 00 90 FD | 	jmp	#LR__3252
1f778                 | LR__3244
1f778     01 03 32 F9 | 	getword	_var02, _var02, #0
1f77c     10 02 86 F1 | 	sub	_var02, #16
1f780     5C 00 90 FD | 	jmp	#LR__3252
1f784                 | LR__3245
1f784     01 03 32 F9 | 	getword	_var02, _var02, #0
1f788     20 02 86 F1 | 	sub	_var02, #32
1f78c     50 00 90 FD | 	jmp	#LR__3252
1f790                 | LR__3246
1f790     01 03 32 F9 | 	getword	_var02, _var02, #0
1f794     30 02 86 F1 | 	sub	_var02, #48
1f798     44 00 90 FD | 	jmp	#LR__3252
1f79c                 | LR__3247
1f79c     01 03 32 F9 | 	getword	_var02, _var02, #0
1f7a0     1A 02 86 F1 | 	sub	_var02, #26
1f7a4     38 00 90 FD | 	jmp	#LR__3252
1f7a8                 | LR__3248
1f7a8     01 03 32 F9 | 	getword	_var02, _var02, #0
1f7ac     08 02 06 F1 | 	add	_var02, #8
1f7b0     2C 00 90 FD | 	jmp	#LR__3252
1f7b4                 | LR__3249
1f7b4     01 03 32 F9 | 	getword	_var02, _var02, #0
1f7b8     50 02 86 F1 | 	sub	_var02, #80
1f7bc     20 00 90 FD | 	jmp	#LR__3252
1f7c0                 | LR__3250
1f7c0     01 03 32 F9 | 	getword	_var02, _var02, #0
1f7c4     0E 00 00 FF 
1f7c8     60 02 86 F1 | 	sub	_var02, ##7264
1f7cc                 | ' 				}
1f7cc                 | ' 				break;
1f7cc     10 00 90 FD | 	jmp	#LR__3252
1f7d0                 | LR__3251
1f7d0     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1f7d4     02 0A 06 AA |  if_e	mul	_var06, #2
1f7d8     05 07 02 A1 |  if_e	add	_var04, _var06
1f7dc     D8 FE 9F FD | 	jmp	#LR__3240
1f7e0                 | LR__3252
1f7e0     01 01 32 F9 | 	getword	_var01, _var02, #0
1f7e4                 | LR__3253
1f7e4                 | ' 		}
1f7e4                 | ' 		uni = uc;
1f7e4                 | ' 	}
1f7e4                 | ' 
1f7e4                 | ' 	return uni;
1f7e4     00 FB 01 F6 | 	mov	result1, _var01
1f7e8                 | _fatfs_cc_ff_wtoupper_ret
1f7e8     2D 00 64 FD | 	ret
1f7ec                 | 
1f7ec                 | _fatfs_cc_strncpy
1f7ec     09 01 02 F6 | 	mov	_var01, arg01
1f7f0     97 12 48 FB | 	callpa	#(@LR__3261-@LR__3260)>>2,fcache_load_ptr_
1f7f4                 | ' 
1f7f4                 | ' 	dscan = dst;
1f7f4                 | ' 	sscan = src;
1f7f4                 | ' 	count = n;
1f7f4                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1f7f4                 | LR__3260
1f7f4     01 16 86 F1 | 	sub	arg03, #1
1f7f8     00 16 56 F2 | 	cmps	arg03, #0 wc
1f7fc     18 00 90 CD |  if_b	jmp	#LR__3262
1f800     0A FB C1 FA | 	rdbyte	result1, arg02
1f804     00 FB 41 FC | 	wrbyte	result1, _var01
1f808     01 14 06 F1 | 	add	arg02, #1
1f80c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1f810                 | ' 		continue;
1f810     01 00 06 F1 | 	add	_var01, #1
1f814     DC FF 9F 5D |  if_ne	jmp	#LR__3260
1f818                 | LR__3261
1f818                 | LR__3262
1f818     97 0C 48 FB | 	callpa	#(@LR__3264-@LR__3263)>>2,fcache_load_ptr_
1f81c                 | ' 	while (--count >= 0)
1f81c                 | LR__3263
1f81c     01 16 86 F1 | 	sub	arg03, #1
1f820     00 16 56 F2 | 	cmps	arg03, #0 wc
1f824     00 03 02 36 |  if_ae	mov	_var02, _var01
1f828     01 00 06 31 |  if_ae	add	_var01, #1
1f82c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1f830     E8 FF 9F 3D |  if_ae	jmp	#LR__3263
1f834                 | LR__3264
1f834                 | ' 		*dscan++ = '\0';
1f834                 | ' 	return(dst);
1f834     09 FB 01 F6 | 	mov	result1, arg01
1f838                 | _fatfs_cc_strncpy_ret
1f838     2D 00 64 FD | 	ret
1f83c                 | 
1f83c                 | _fatfs_cc_memcmp
1f83c                 | ' 	for (n = size; n > 0; n--)
1f83c     00 16 0E F2 | 	cmp	arg03, #0 wz
1f840     28 00 90 AD |  if_e	jmp	#LR__3271
1f844                 | LR__3270
1f844     09 01 C2 FA | 	rdbyte	_var01, arg01
1f848     0A 03 C2 FA | 	rdbyte	_var02, arg02
1f84c     01 01 0A F2 | 	cmp	_var01, _var02 wz
1f850     01 12 06 A1 |  if_e	add	arg01, #1
1f854     01 14 06 A1 |  if_e	add	arg02, #1
1f858                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1f858     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1f85c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1f860     01 FB 81 51 |  if_ne	sub	result1, _var02
1f864     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1f868     F6 17 6E FB | 	djnz	arg03, #LR__3270
1f86c                 | LR__3271
1f86c                 | ' 
1f86c                 | ' 	return(0);
1f86c     00 FA 05 F6 | 	mov	result1, #0
1f870                 | _fatfs_cc_memcmp_ret
1f870     2D 00 64 FD | 	ret
1f874                 | 
1f874                 | _fatfs_cc_strncmp
1f874     09 01 0A F6 | 	mov	_var01, arg01 wz
1f878     14 00 90 5D |  if_ne	jmp	#LR__3280
1f87c                 | ' 		return scan2 ? -1 : 0;
1f87c     00 14 0E F2 | 	cmp	arg02, #0 wz
1f880     01 02 66 56 |  if_ne	neg	_var02, #1
1f884     00 02 06 A6 |  if_e	mov	_var02, #0
1f888     01 FB 01 F6 | 	mov	result1, _var02
1f88c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1f890                 | LR__3280
1f890     00 14 0E F2 | 	cmp	arg02, #0 wz
1f894     01 FA 05 A6 |  if_e	mov	result1, #1
1f898     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f89c     0B 05 02 F6 | 	mov	_var03, arg03
1f8a0     97 16 48 FB | 	callpa	#(@LR__3282-@LR__3281)>>2,fcache_load_ptr_
1f8a4                 | ' 	count = n;
1f8a4                 | ' 	do {
1f8a4                 | LR__3281
1f8a4     00 07 C2 FA | 	rdbyte	_var04, _var01
1f8a8     0A 09 02 F6 | 	mov	_var05, arg02
1f8ac     04 0B C2 FA | 	rdbyte	_var06, _var05
1f8b0     01 04 86 F1 | 	sub	_var03, #1
1f8b4     00 04 56 F2 | 	cmps	_var03, #0 wc
1f8b8     01 00 06 F1 | 	add	_var01, #1
1f8bc     01 14 06 F1 | 	add	arg02, #1
1f8c0     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1f8c4     08 00 90 2D |  if_nc_and_z	jmp	#LR__3283
1f8c8     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1f8cc     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3281
1f8d0                 | LR__3282
1f8d0                 | LR__3283
1f8d0     00 04 56 F2 | 	cmps	_var03, #0 wc
1f8d4                 | ' 		return(0);
1f8d4     00 FA 05 C6 |  if_b	mov	result1, #0
1f8d8     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1f8dc     05 07 0A F2 | 	cmp	_var04, _var06 wz
1f8e0                 | ' 		return(0);
1f8e0     00 FA 05 A6 |  if_e	mov	result1, #0
1f8e4     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f8e8     00 06 0E F2 | 	cmp	_var04, #0 wz
1f8ec                 | ' 		return(-1);
1f8ec     01 FA 65 A6 |  if_e	neg	result1, #1
1f8f0     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f8f4     00 0A 0E F2 | 	cmp	_var06, #0 wz
1f8f8                 | ' 		return(1);
1f8f8     01 FA 05 A6 |  if_e	mov	result1, #1
1f8fc                 | ' 		return(c1 - c2);
1f8fc     03 FB 01 56 |  if_ne	mov	result1, _var04
1f900     05 FB 81 51 |  if_ne	sub	result1, _var06
1f904                 | _fatfs_cc_strncmp_ret
1f904     2D 00 64 FD | 	ret
1f908                 | 
1f908                 | _fatfs_cc_strchr
1f908                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
1f908                 | ' 	while ((c = *s++) != (char) charwanted)
1f908                 | LR__3290
1f908     09 01 02 F6 | 	mov	_var01, arg01
1f90c     00 03 C2 FA | 	rdbyte	_var02, _var01
1f910     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1f914     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1f918     03 05 0A F2 | 	cmp	_var03, _var04 wz
1f91c     01 12 06 F1 | 	add	arg01, #1
1f920     14 00 90 AD |  if_e	jmp	#LR__3291
1f924     01 05 02 F6 | 	mov	_var03, _var02
1f928     07 04 4E F7 | 	zerox	_var03, #7 wz
1f92c     00 FA 05 A6 |  if_e	mov	result1, #0
1f930     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1f934     D0 FF 9F FD | 	jmp	#LR__3290
1f938                 | LR__3291
1f938                 | ' 	return((char *)--s);
1f938     01 12 86 F1 | 	sub	arg01, #1
1f93c     09 FB 01 F6 | 	mov	result1, arg01
1f940                 | _fatfs_cc_strchr_ret
1f940     2D 00 64 FD | 	ret
1f944                 | 
1f944                 | _fatfs_cc_disk_initialize
1f944     04 4A 05 F6 | 	mov	COUNT_, #4
1f948     A8 00 A0 FD | 	call	#pushregs_
1f94c     40 F0 07 F1 | 	add	ptra, #64
1f950     04 4E 05 F1 | 	add	fp, #4
1f954     A7 12 42 FC | 	wrbyte	arg01, fp
1f958     01 00 00 FF 
1f95c     14 E4 05 F1 | 	add	objptr, ##532
1f960     F2 18 02 FB | 	rdlong	arg04, objptr
1f964     2C 4E 05 F1 | 	add	fp, #44
1f968     A7 18 62 FC | 	wrlong	arg04, fp
1f96c     04 E4 85 F1 | 	sub	objptr, #4
1f970     F2 18 02 FB | 	rdlong	arg04, objptr
1f974     04 4E 05 F1 | 	add	fp, #4
1f978     A7 18 62 FC | 	wrlong	arg04, fp
1f97c     08 E4 05 F1 | 	add	objptr, #8
1f980     F2 18 02 FB | 	rdlong	arg04, objptr
1f984     04 4E 05 F1 | 	add	fp, #4
1f988     A7 18 62 FC | 	wrlong	arg04, fp
1f98c     04 E4 05 F1 | 	add	objptr, #4
1f990     F2 18 02 FB | 	rdlong	arg04, objptr
1f994     04 4E 05 F1 | 	add	fp, #4
1f998     A7 18 62 FC | 	wrlong	arg04, fp
1f99c     04 E4 05 F1 | 	add	objptr, #4
1f9a0     F2 02 48 FC | 	wrbyte	#1, objptr
1f9a4     01 00 00 FF 
1f9a8     20 E4 85 F1 | 	sub	objptr, ##544
1f9ac     38 4E 85 F1 | 	sub	fp, #56
1f9b0     A7 18 CA FA | 	rdbyte	arg04, fp wz
1f9b4     04 4E 85 F1 | 	sub	fp, #4
1f9b8                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1f9b8                 | '             return RES_NOTRDY;
1f9b8     03 FA 05 56 |  if_ne	mov	result1, #3
1f9bc     D8 05 90 5D |  if_ne	jmp	#LR__3318
1f9c0     13 00 00 FF 
1f9c4     10 13 06 F6 | 	mov	arg01, ##10000
1f9c8     30 9B BF FD | 	call	#__system___waitus
1f9cc     30 4E 05 F1 | 	add	fp, #48
1f9d0     A7 12 02 FB | 	rdlong	arg01, fp
1f9d4     09 01 08 FC | 	wrpin	#0, arg01
1f9d8     04 4E 05 F1 | 	add	fp, #4
1f9dc     A7 12 02 FB | 	rdlong	arg01, fp
1f9e0     09 01 08 FC | 	wrpin	#0, arg01
1f9e4     04 4E 05 F1 | 	add	fp, #4
1f9e8     A7 12 02 FB | 	rdlong	arg01, fp
1f9ec     09 01 08 FC | 	wrpin	#0, arg01
1f9f0     04 4E 05 F1 | 	add	fp, #4
1f9f4     A7 12 02 FB | 	rdlong	arg01, fp
1f9f8     09 00 80 FF 
1f9fc     09 01 08 FC | 	wrpin	##4608, arg01
1fa00     0C 4E 85 F1 | 	sub	fp, #12
1fa04     A7 12 02 FB | 	rdlong	arg01, fp
1fa08     59 12 62 FD | 	drvh	arg01
1fa0c     04 4E 05 F1 | 	add	fp, #4
1fa10     A7 12 02 FB | 	rdlong	arg01, fp
1fa14     59 12 62 FD | 	drvh	arg01
1fa18     04 4E 05 F1 | 	add	fp, #4
1fa1c     A7 12 02 FB | 	rdlong	arg01, fp
1fa20     59 12 62 FD | 	drvh	arg01
1fa24     04 4E 05 F1 | 	add	fp, #4
1fa28     A7 12 02 FB | 	rdlong	arg01, fp
1fa2c     59 12 62 FD | 	drvh	arg01
1fa30     20 4E 85 F1 | 	sub	fp, #32
1fa34     00 04 80 FF 
1fa38     A7 20 68 FC | 	wrlong	##524304, fp
1fa3c     04 4E 05 F1 | 	add	fp, #4
1fa40     20 03 80 FF 
1fa44     A7 90 68 FC | 	wrlong	##409672, fp
1fa48     14 4E 05 F1 | 	add	fp, #20
1fa4c     A7 1E 02 FB | 	rdlong	local01, fp
1fa50     18 4E 85 F1 | 	sub	fp, #24
1fa54     A7 16 02 FB | 	rdlong	arg03, fp
1fa58     40 1E 62 FD | 	dirl	local01
1fa5c     A0 03 80 FF 
1fa60     0F 91 08 FC | 	wrpin	##475208, local01
1fa64     0F 17 12 FC | 	wxpin	arg03, local01
1fa68     0F 01 28 FC | 	wypin	#0, local01
1fa6c     41 1E 62 FD | 	dirh	local01
1fa70     1C 4E 05 F1 | 	add	fp, #28
1fa74     A7 20 02 FB | 	rdlong	local02, fp
1fa78     10 1F 82 F1 | 	sub	local01, local02
1fa7c     07 1E 06 F5 | 	and	local01, #7
1fa80     18 1E 66 F0 | 	shl	local01, #24
1fa84     78 14 06 F6 | 	mov	arg02, #120
1fa88     0F 15 42 F5 | 	or	arg02, local01
1fa8c     14 4E 85 F1 | 	sub	fp, #20
1fa90     A7 14 62 FC | 	wrlong	arg02, fp
1fa94     14 4E 05 F1 | 	add	fp, #20
1fa98     A7 12 02 FB | 	rdlong	arg01, fp
1fa9c     10 14 26 F4 | 	bith	arg02, #16
1faa0     40 12 62 FD | 	dirl	arg01
1faa4     09 15 02 FC | 	wrpin	arg02, arg01
1faa8     09 3F 18 FC | 	wxpin	#31, arg01
1faac     FF FF FF FF 
1fab0     09 FF 2B FC | 	wypin	##-1, arg01
1fab4     41 12 62 FD | 	dirh	arg01
1fab8     04 4E 85 F1 | 	sub	fp, #4
1fabc     A7 14 02 FB | 	rdlong	arg02, fp
1fac0     08 4E 05 F1 | 	add	fp, #8
1fac4     A7 22 02 FB | 	rdlong	local03, fp
1fac8     11 15 82 F1 | 	sub	arg02, local03
1facc     07 14 06 F5 | 	and	arg02, #7
1fad0     18 14 66 F0 | 	shl	arg02, #24
1fad4     14 4E 85 F1 | 	sub	fp, #20
1fad8     A7 14 62 FC | 	wrlong	arg02, fp
1fadc     29 00 00 FF 
1fae0     7A 14 46 F5 | 	or	arg02, ##21114
1fae4     A7 14 62 FC | 	wrlong	arg02, fp
1fae8     14 4E 05 F1 | 	add	fp, #20
1faec     A7 12 02 FB | 	rdlong	arg01, fp
1faf0     40 12 62 FD | 	dirl	arg01
1faf4     09 15 02 FC | 	wrpin	arg02, arg01
1faf8     09 4F 18 FC | 	wxpin	#39, arg01
1fafc     09 01 28 FC | 	wypin	#0, arg01
1fb00     41 12 62 FD | 	dirh	arg01
1fb04     28 4E 85 F1 | 	sub	fp, #40
1fb08     A7 12 02 F6 | 	mov	arg01, fp
1fb0c     14 4E 85 F1 | 	sub	fp, #20
1fb10     0A 14 06 F6 | 	mov	arg02, #10
1fb14     08 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1001
1fb18     00 12 06 F6 | 	mov	arg01, #0
1fb1c     00 14 06 F6 | 	mov	arg02, #0
1fb20     D4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1025
1fb24     10 80 B0 FD | 	call	#_fatfs_cc_deselect_1011
1fb28     64 12 06 F6 | 	mov	arg01, #100
1fb2c     CC 99 BF FD | 	call	#__system___waitus
1fb30     14 4E 05 F1 | 	add	fp, #20
1fb34     A7 12 02 F6 | 	mov	arg01, fp
1fb38     14 4E 85 F1 | 	sub	fp, #20
1fb3c     0A 14 06 F6 | 	mov	arg02, #10
1fb40     DC 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1001
1fb44     0C 4E 05 F1 | 	add	fp, #12
1fb48     A7 00 48 FC | 	wrbyte	#0, fp
1fb4c     0C 4E 85 F1 | 	sub	fp, #12
1fb50     00 12 06 F6 | 	mov	arg01, #0
1fb54     00 14 06 F6 | 	mov	arg02, #0
1fb58     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1025
1fb5c     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1fb60     01 18 0E F2 | 	cmp	arg04, #1 wz
1fb64     B8 03 90 5D |  if_ne	jmp	#LR__3317
1fb68     08 12 06 F6 | 	mov	arg01, #8
1fb6c     AA 15 06 F6 | 	mov	arg02, #426
1fb70     84 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1025
1fb74     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fb78     01 FA 0D F2 | 	cmp	result1, #1 wz
1fb7c     98 01 90 5D |  if_ne	jmp	#LR__3303
1fb80     14 4E 05 F1 | 	add	fp, #20
1fb84     A7 12 02 F6 | 	mov	arg01, fp
1fb88     14 4E 85 F1 | 	sub	fp, #20
1fb8c     04 14 06 F6 | 	mov	arg02, #4
1fb90     8C 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1001
1fb94     16 4E 05 F1 | 	add	fp, #22
1fb98     A7 24 C2 FA | 	rdbyte	local04, fp
1fb9c     16 4E 85 F1 | 	sub	fp, #22
1fba0     01 24 0E F2 | 	cmp	local04, #1 wz
1fba4     17 4E 05 A1 |  if_e	add	fp, #23
1fba8     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1fbac     17 4E 85 A1 |  if_e	sub	fp, #23
1fbb0     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1fbb4     68 03 90 5D |  if_ne	jmp	#LR__3316
1fbb8                 | ' 				for (tmr = 1000; tmr; tmr--) {
1fbb8     18 4E 05 F1 | 	add	fp, #24
1fbbc     01 00 80 FF 
1fbc0     A7 D0 6B FC | 	wrlong	##1000, fp
1fbc4     18 4E 85 F1 | 	sub	fp, #24
1fbc8                 | LR__3300
1fbc8     18 4E 05 F1 | 	add	fp, #24
1fbcc     A7 1E 0A FB | 	rdlong	local01, fp wz
1fbd0     18 4E 85 F1 | 	sub	fp, #24
1fbd4     3C 00 90 AD |  if_e	jmp	#LR__3301
1fbd8     A9 12 06 F6 | 	mov	arg01, #169
1fbdc     1E 14 C6 F9 | 	decod	arg02, #30
1fbe0     14 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1025
1fbe4     FD 24 02 F6 | 	mov	local04, result1
1fbe8     07 24 4E F7 | 	zerox	local04, #7 wz
1fbec     24 00 90 AD |  if_e	jmp	#LR__3301
1fbf0     01 00 00 FF 
1fbf4     E8 13 06 F6 | 	mov	arg01, ##1000
1fbf8     00 99 BF FD | 	call	#__system___waitus
1fbfc     18 4E 05 F1 | 	add	fp, #24
1fc00     A7 24 02 FB | 	rdlong	local04, fp
1fc04     01 24 86 F1 | 	sub	local04, #1
1fc08     A7 24 62 FC | 	wrlong	local04, fp
1fc0c     18 4E 85 F1 | 	sub	fp, #24
1fc10     B4 FF 9F FD | 	jmp	#LR__3300
1fc14                 | LR__3301
1fc14     18 4E 05 F1 | 	add	fp, #24
1fc18     A7 24 0A FB | 	rdlong	local04, fp wz
1fc1c     18 4E 85 F1 | 	sub	fp, #24
1fc20     4C 00 90 AD |  if_e	jmp	#LR__3302
1fc24     3A 12 06 F6 | 	mov	arg01, #58
1fc28     00 14 06 F6 | 	mov	arg02, #0
1fc2c     C8 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1025
1fc30     FD 22 02 F6 | 	mov	local03, result1
1fc34     07 22 4E F7 | 	zerox	local03, #7 wz
1fc38     34 00 90 5D |  if_ne	jmp	#LR__3302
1fc3c     14 4E 05 F1 | 	add	fp, #20
1fc40     A7 12 02 F6 | 	mov	arg01, fp
1fc44     14 4E 85 F1 | 	sub	fp, #20
1fc48     04 14 06 F6 | 	mov	arg02, #4
1fc4c     D0 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1001
1fc50     14 4E 05 F1 | 	add	fp, #20
1fc54     A7 1E C2 FA | 	rdbyte	local01, fp
1fc58     40 1E CE F7 | 	test	local01, #64 wz
1fc5c     0C 24 06 56 |  if_ne	mov	local04, #12
1fc60     04 24 06 A6 |  if_e	mov	local04, #4
1fc64     08 4E 85 F1 | 	sub	fp, #8
1fc68     A7 24 42 FC | 	wrbyte	local04, fp
1fc6c     0C 4E 85 F1 | 	sub	fp, #12
1fc70                 | LR__3302
1fc70     14 24 06 FB | 	rdlong	local04, #20
1fc74     18 4E 05 F1 | 	add	fp, #24
1fc78     A7 24 62 FC | 	wrlong	local04, fp
1fc7c     0C 4E 05 F1 | 	add	fp, #12
1fc80     A7 24 02 FB | 	rdlong	local04, fp
1fc84     1B 24 26 F4 | 	bith	local04, #27
1fc88     A7 24 62 FC | 	wrlong	local04, fp
1fc8c     0C 4E 85 F1 | 	sub	fp, #12
1fc90     A7 24 02 FB | 	rdlong	local04, fp
1fc94     18 4E 85 F1 | 	sub	fp, #24
1fc98     68 78 04 FF 
1fc9c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1fca0     1C 4E 05 C1 |  if_b	add	fp, #28
1fca4     00 01 80 CF 
1fca8     A7 08 68 CC |  if_b	wrlong	##131076, fp
1fcac     1C 4E 85 C1 |  if_b	sub	fp, #28
1fcb0     6C 02 90 CD |  if_b	jmp	#LR__3316
1fcb4     18 4E 05 F1 | 	add	fp, #24
1fcb8     A7 24 02 FB | 	rdlong	local04, fp
1fcbc     18 4E 85 F1 | 	sub	fp, #24
1fcc0     E1 F5 05 FF 
1fcc4     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1fcc8     1C 4E 05 C1 |  if_b	add	fp, #28
1fccc     00 01 80 CF 
1fcd0     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1fcd4     1C 4E 85 C1 |  if_b	sub	fp, #28
1fcd8     44 02 90 CD |  if_b	jmp	#LR__3316
1fcdc     18 4E 05 F1 | 	add	fp, #24
1fce0     A7 24 02 FB | 	rdlong	local04, fp
1fce4     18 4E 85 F1 | 	sub	fp, #24
1fce8     3B 58 08 FF 
1fcec     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1fcf0     1C 4E 05 C1 |  if_b	add	fp, #28
1fcf4     00 01 80 CF 
1fcf8     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1fcfc     1C 4E 85 C1 |  if_b	sub	fp, #28
1fd00     1C 02 90 CD |  if_b	jmp	#LR__3316
1fd04     1C 4E 05 F1 | 	add	fp, #28
1fd08     80 01 80 FF 
1fd0c     A7 10 68 FC | 	wrlong	##196616, fp
1fd10     1C 4E 85 F1 | 	sub	fp, #28
1fd14     08 02 90 FD | 	jmp	#LR__3316
1fd18                 | LR__3303
1fd18     A9 12 06 F6 | 	mov	arg01, #169
1fd1c     00 14 06 F6 | 	mov	arg02, #0
1fd20     D4 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1025
1fd24     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1fd28     02 24 16 F2 | 	cmp	local04, #2 wc
1fd2c     18 00 90 3D |  if_ae	jmp	#LR__3304
1fd30     0C 4E 05 F1 | 	add	fp, #12
1fd34     A7 04 48 FC | 	wrbyte	#2, fp
1fd38     04 4E 05 F1 | 	add	fp, #4
1fd3c     A7 52 49 FC | 	wrbyte	#169, fp
1fd40     10 4E 85 F1 | 	sub	fp, #16
1fd44     14 00 90 FD | 	jmp	#LR__3305
1fd48                 | LR__3304
1fd48     0C 4E 05 F1 | 	add	fp, #12
1fd4c     A7 02 48 FC | 	wrbyte	#1, fp
1fd50     04 4E 05 F1 | 	add	fp, #4
1fd54     A7 02 48 FC | 	wrbyte	#1, fp
1fd58     10 4E 85 F1 | 	sub	fp, #16
1fd5c                 | LR__3305
1fd5c                 | ' 				ty =  0x01 ; cmd =  (1) ;
1fd5c                 | ' 			}
1fd5c                 | ' 			for (tmr = 1000; tmr; tmr--) {
1fd5c     18 4E 05 F1 | 	add	fp, #24
1fd60     01 00 80 FF 
1fd64     A7 D0 6B FC | 	wrlong	##1000, fp
1fd68     18 4E 85 F1 | 	sub	fp, #24
1fd6c                 | LR__3306
1fd6c     18 4E 05 F1 | 	add	fp, #24
1fd70     A7 22 0A FB | 	rdlong	local03, fp wz
1fd74     18 4E 85 F1 | 	sub	fp, #24
1fd78     44 00 90 AD |  if_e	jmp	#LR__3307
1fd7c     10 4E 05 F1 | 	add	fp, #16
1fd80     A7 12 C2 FA | 	rdbyte	arg01, fp
1fd84     10 4E 85 F1 | 	sub	fp, #16
1fd88     00 14 06 F6 | 	mov	arg02, #0
1fd8c     68 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1025
1fd90     FD 24 02 F6 | 	mov	local04, result1
1fd94     07 24 4E F7 | 	zerox	local04, #7 wz
1fd98     24 00 90 AD |  if_e	jmp	#LR__3307
1fd9c     01 00 00 FF 
1fda0     E8 13 06 F6 | 	mov	arg01, ##1000
1fda4     54 97 BF FD | 	call	#__system___waitus
1fda8     18 4E 05 F1 | 	add	fp, #24
1fdac     A7 24 02 FB | 	rdlong	local04, fp
1fdb0     01 24 86 F1 | 	sub	local04, #1
1fdb4     A7 24 62 FC | 	wrlong	local04, fp
1fdb8     18 4E 85 F1 | 	sub	fp, #24
1fdbc     AC FF 9F FD | 	jmp	#LR__3306
1fdc0                 | LR__3307
1fdc0     18 4E 05 F1 | 	add	fp, #24
1fdc4     A7 24 0A FB | 	rdlong	local04, fp wz
1fdc8     18 4E 85 F1 | 	sub	fp, #24
1fdcc     14 00 90 AD |  if_e	jmp	#LR__3308
1fdd0     10 12 06 F6 | 	mov	arg01, #16
1fdd4     09 14 C6 F9 | 	decod	arg02, #9
1fdd8     1C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1025
1fddc     07 FA 4D F7 | 	zerox	result1, #7 wz
1fde0     0C 00 90 AD |  if_e	jmp	#LR__3309
1fde4                 | LR__3308
1fde4     0C 4E 05 F1 | 	add	fp, #12
1fde8     A7 00 48 FC | 	wrbyte	#0, fp
1fdec     0C 4E 85 F1 | 	sub	fp, #12
1fdf0                 | LR__3309
1fdf0     14 24 06 FB | 	rdlong	local04, #20
1fdf4     18 4E 05 F1 | 	add	fp, #24
1fdf8     A7 24 62 FC | 	wrlong	local04, fp
1fdfc     18 4E 85 F1 | 	sub	fp, #24
1fe00     F0 FA 02 FF 
1fe04     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1fe08     18 00 90 3D |  if_ae	jmp	#LR__3310
1fe0c     24 4E 05 F1 | 	add	fp, #36
1fe10     A7 24 02 FB | 	rdlong	local04, fp
1fe14     1B 24 26 F4 | 	bith	local04, #27
1fe18     A7 24 62 FC | 	wrlong	local04, fp
1fe1c     24 4E 85 F1 | 	sub	fp, #36
1fe20     2C 00 90 FD | 	jmp	#LR__3311
1fe24                 | LR__3310
1fe24     18 4E 05 F1 | 	add	fp, #24
1fe28     A7 24 02 FB | 	rdlong	local04, fp
1fe2c     18 4E 85 F1 | 	sub	fp, #24
1fe30     E1 F5 05 FF 
1fe34     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1fe38     24 4E 05 C1 |  if_b	add	fp, #36
1fe3c     A7 24 02 CB |  if_b	rdlong	local04, fp
1fe40     80 00 04 CF 
1fe44     00 24 46 C5 |  if_b	or	local04, ##134283264
1fe48     A7 24 62 CC |  if_b	wrlong	local04, fp
1fe4c     24 4E 85 C1 |  if_b	sub	fp, #36
1fe50                 | LR__3311
1fe50     18 4E 05 F1 | 	add	fp, #24
1fe54     A7 24 02 FB | 	rdlong	local04, fp
1fe58     18 4E 85 F1 | 	sub	fp, #24
1fe5c     F0 FA 02 FF 
1fe60     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1fe64     1C 4E 05 C1 |  if_b	add	fp, #28
1fe68     00 01 80 CF 
1fe6c     A7 08 68 CC |  if_b	wrlong	##131076, fp
1fe70     1C 4E 85 C1 |  if_b	sub	fp, #28
1fe74     A8 00 90 CD |  if_b	jmp	#LR__3315
1fe78     18 4E 05 F1 | 	add	fp, #24
1fe7c     A7 24 02 FB | 	rdlong	local04, fp
1fe80     18 4E 85 F1 | 	sub	fp, #24
1fe84     68 78 04 FF 
1fe88     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1fe8c     1C 4E 05 C1 |  if_b	add	fp, #28
1fe90     80 01 80 CF 
1fe94     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1fe98     1C 4E 85 C1 |  if_b	sub	fp, #28
1fe9c     80 00 90 CD |  if_b	jmp	#LR__3314
1fea0     18 4E 05 F1 | 	add	fp, #24
1fea4     A7 24 02 FB | 	rdlong	local04, fp
1fea8     18 4E 85 F1 | 	sub	fp, #24
1feac     E1 F5 05 FF 
1feb0     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1feb4     1C 4E 05 C1 |  if_b	add	fp, #28
1feb8     00 02 80 CF 
1febc     A7 10 68 CC |  if_b	wrlong	##262152, fp
1fec0     1C 4E 85 C1 |  if_b	sub	fp, #28
1fec4     58 00 90 CD |  if_b	jmp	#LR__3313
1fec8     18 4E 05 F1 | 	add	fp, #24
1fecc     A7 24 02 FB | 	rdlong	local04, fp
1fed0     18 4E 85 F1 | 	sub	fp, #24
1fed4     59 73 07 FF 
1fed8     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1fedc     1C 4E 05 C1 |  if_b	add	fp, #28
1fee0     80 02 80 CF 
1fee4     A7 14 68 CC |  if_b	wrlong	##327690, fp
1fee8     1C 4E 85 C1 |  if_b	sub	fp, #28
1feec     30 00 90 CD |  if_b	jmp	#LR__3312
1fef0     18 4E 05 F1 | 	add	fp, #24
1fef4     A7 24 02 FB | 	rdlong	local04, fp
1fef8     18 4E 85 F1 | 	sub	fp, #24
1fefc     D1 F0 08 FF 
1ff00     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1ff04     1C 4E 05 C1 |  if_b	add	fp, #28
1ff08     00 03 80 CF 
1ff0c     A7 18 68 CC |  if_b	wrlong	##393228, fp
1ff10     1C 4E 85 F3 | 	sumc	fp, #28
1ff14     80 03 80 3F 
1ff18     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1ff1c     1C 4E 85 31 |  if_ae	sub	fp, #28
1ff20                 | LR__3312
1ff20                 | LR__3313
1ff20                 | LR__3314
1ff20                 | LR__3315
1ff20                 | LR__3316
1ff20                 | LR__3317
1ff20     0C 4E 05 F1 | 	add	fp, #12
1ff24     A7 24 C2 FA | 	rdbyte	local04, fp
1ff28     01 00 00 FF 
1ff2c     21 E4 05 F1 | 	add	objptr, ##545
1ff30     F2 24 42 FC | 	wrbyte	local04, objptr
1ff34     A7 1E CA FA | 	rdbyte	local01, fp wz
1ff38     00 24 06 56 |  if_ne	mov	local04, #0
1ff3c     01 24 06 A6 |  if_e	mov	local04, #1
1ff40     20 4E 05 F1 | 	add	fp, #32
1ff44     A7 24 42 FC | 	wrbyte	local04, fp
1ff48     A7 24 C2 FA | 	rdbyte	local04, fp
1ff4c     2C 4E 85 F1 | 	sub	fp, #44
1ff50     01 E4 85 F1 | 	sub	objptr, #1
1ff54     F2 24 42 FC | 	wrbyte	local04, objptr
1ff58     01 00 00 FF 
1ff5c     20 E4 85 F1 | 	sub	objptr, ##544
1ff60     D4 7B B0 FD | 	call	#_fatfs_cc_deselect_1011
1ff64     34 4E 05 F1 | 	add	fp, #52
1ff68     A7 12 02 FB | 	rdlong	arg01, fp
1ff6c     18 4E 85 F1 | 	sub	fp, #24
1ff70     A7 14 02 FB | 	rdlong	arg02, fp
1ff74     09 15 12 FC | 	wxpin	arg02, arg01
1ff78     1C 4E 05 F1 | 	add	fp, #28
1ff7c     A7 12 02 FB | 	rdlong	arg01, fp
1ff80     14 4E 85 F1 | 	sub	fp, #20
1ff84     A7 14 02 FB | 	rdlong	arg02, fp
1ff88     09 15 02 FC | 	wrpin	arg02, arg01
1ff8c                 | ' 
1ff8c                 | ' 		}
1ff8c                 | ' 	}
1ff8c                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1ff8c                 | ' 	CardType = ty;
1ff8c                 | ' 	s = ty ? 0 :  0x01 ;
1ff8c                 | ' 	Stat = s;
1ff8c                 | ' 
1ff8c                 | ' 	deselect();
1ff8c                 | ' 
1ff8c                 | ' 
1ff8c                 | ' 	_wxpin( PIN_CLK, ck_div );
1ff8c                 | ' 	_wrpin( PIN_DI, spm_tx );
1ff8c                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1ff8c                 | ' 	return s;
1ff8c     08 4E 05 F1 | 	add	fp, #8
1ff90     A7 FA C1 FA | 	rdbyte	result1, fp
1ff94     2C 4E 85 F1 | 	sub	fp, #44
1ff98                 | LR__3318
1ff98     A7 F0 03 F6 | 	mov	ptra, fp
1ff9c     B2 00 A0 FD | 	call	#popregs_
1ffa0                 | _fatfs_cc_disk_initialize_ret
1ffa0     2D 00 64 FD | 	ret
1ffa4                 | 
1ffa4                 | _fatfs_cc_disk_read
1ffa4     05 4A 05 F6 | 	mov	COUNT_, #5
1ffa8     A8 00 A0 FD | 	call	#pushregs_
1ffac     0A 1F 02 F6 | 	mov	local01, arg02
1ffb0     0B 21 02 F6 | 	mov	local02, arg03
1ffb4     0C 23 02 F6 | 	mov	local03, arg04
1ffb8     00 12 0E F2 | 	cmp	arg01, #0 wz
1ffbc     01 FA 05 56 |  if_ne	mov	result1, #1
1ffc0                 | ' 
1ffc0                 | ' 	return Stat;
1ffc0     01 00 00 AF 
1ffc4     20 E4 05 A1 |  if_e	add	objptr, ##544
1ffc8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1ffcc     01 00 00 AF 
1ffd0     20 E4 85 A1 |  if_e	sub	objptr, ##544
1ffd4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1ffd8     01 FA CD F7 | 	test	result1, #1 wz
1ffdc     03 FA 05 56 |  if_ne	mov	result1, #3
1ffe0     84 00 90 5D |  if_ne	jmp	#LR__3322
1ffe4     01 00 00 FF 
1ffe8     21 E4 05 F1 | 	add	objptr, ##545
1ffec     F2 24 C2 FA | 	rdbyte	local04, objptr
1fff0     01 00 00 FF 
1fff4     21 E4 85 F1 | 	sub	objptr, ##545
1fff8     08 24 CE F7 | 	test	local04, #8 wz
1fffc     09 20 66 A0 |  if_e	shl	local02, #9
20000     02 22 16 F2 | 	cmp	local03, #2 wc
20004     12 24 06 36 |  if_ae	mov	local04, #18
20008     11 24 06 C6 |  if_b	mov	local04, #17
2000c     10 15 02 F6 | 	mov	arg02, local02
20010     12 13 02 F6 | 	mov	arg01, local04
20014     E0 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1025
20018     FD 26 02 F6 | 	mov	local05, result1
2001c     07 26 4E F7 | 	zerox	local05, #7 wz
20020     30 00 90 5D |  if_ne	jmp	#LR__3321
20024                 | ' 		do {
20024                 | LR__3320
20024     0F 13 02 F6 | 	mov	arg01, local01
20028     09 14 C6 F9 | 	decod	arg02, #9
2002c     1C 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1019
20030     00 FA 0D F2 | 	cmp	result1, #0 wz
20034     01 00 00 5F 
20038     00 1E 06 51 |  if_ne	add	local01, ##512
2003c     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3320
20040     12 25 E2 F8 | 	getbyte	local04, local04, #0
20044     12 24 0E F2 | 	cmp	local04, #18 wz
20048     0C 12 06 A6 |  if_e	mov	arg01, #12
2004c     00 14 06 A6 |  if_e	mov	arg02, #0
20050     A4 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1025
20054                 | LR__3321
20054     E0 7A B0 FD | 	call	#_fatfs_cc_deselect_1011
20058                 | ' 	}
20058                 | ' 	deselect();
20058                 | ' 
20058                 | ' 	return count ? RES_ERROR : RES_OK;
20058     00 22 0E F2 | 	cmp	local03, #0 wz
2005c     01 26 06 56 |  if_ne	mov	local05, #1
20060     00 26 06 A6 |  if_e	mov	local05, #0
20064     13 FB 01 F6 | 	mov	result1, local05
20068                 | LR__3322
20068     A7 F0 03 F6 | 	mov	ptra, fp
2006c     B2 00 A0 FD | 	call	#popregs_
20070                 | _fatfs_cc_disk_read_ret
20070     2D 00 64 FD | 	ret
20074                 | 
20074                 | _fatfs_cc_disk_write
20074     04 4A 05 F6 | 	mov	COUNT_, #4
20078     A8 00 A0 FD | 	call	#pushregs_
2007c     0A 1F 02 F6 | 	mov	local01, arg02
20080     0C 21 02 F6 | 	mov	local02, arg04
20084     0B 23 02 F6 | 	mov	local03, arg03
20088     00 12 0E F2 | 	cmp	arg01, #0 wz
2008c     01 FA 05 56 |  if_ne	mov	result1, #1
20090                 | ' 
20090                 | ' 	return Stat;
20090     01 00 00 AF 
20094     20 E4 05 A1 |  if_e	add	objptr, ##544
20098     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2009c     01 00 00 AF 
200a0     20 E4 85 A1 |  if_e	sub	objptr, ##544
200a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
200a8     01 FA CD F7 | 	test	result1, #1 wz
200ac     03 FA 05 56 |  if_ne	mov	result1, #3
200b0     D4 00 90 5D |  if_ne	jmp	#LR__3334
200b4     01 00 00 FF 
200b8     21 E4 05 F1 | 	add	objptr, ##545
200bc     F2 16 C2 FA | 	rdbyte	arg03, objptr
200c0     01 00 00 FF 
200c4     21 E4 85 F1 | 	sub	objptr, ##545
200c8     08 16 CE F7 | 	test	arg03, #8 wz
200cc     09 22 66 A0 |  if_e	shl	local03, #9
200d0     01 20 0E F2 | 	cmp	local02, #1 wz
200d4     30 00 90 5D |  if_ne	jmp	#LR__3330
200d8     18 12 06 F6 | 	mov	arg01, #24
200dc     11 15 02 F6 | 	mov	arg02, local03
200e0     14 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1025
200e4     FD 24 02 F6 | 	mov	local04, result1
200e8     07 24 4E F7 | 	zerox	local04, #7 wz
200ec     84 00 90 5D |  if_ne	jmp	#LR__3333
200f0     0F 13 02 F6 | 	mov	arg01, local01
200f4     FE 14 06 F6 | 	mov	arg02, #254
200f8     30 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1021
200fc     00 FA 0D F2 | 	cmp	result1, #0 wz
20100     00 20 06 56 |  if_ne	mov	local02, #0
20104     6C 00 90 FD | 	jmp	#LR__3333
20108                 | LR__3330
20108     01 00 00 FF 
2010c     21 E4 05 F1 | 	add	objptr, ##545
20110     F2 24 C2 FA | 	rdbyte	local04, objptr
20114     01 00 00 FF 
20118     21 E4 85 F1 | 	sub	objptr, ##545
2011c     06 24 CE F7 | 	test	local04, #6 wz
20120     97 12 06 56 |  if_ne	mov	arg01, #151
20124     10 15 02 56 |  if_ne	mov	arg02, local02
20128     CC 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1025
2012c     11 15 02 F6 | 	mov	arg02, local03
20130     19 12 06 F6 | 	mov	arg01, #25
20134     C0 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1025
20138     FD 24 02 F6 | 	mov	local04, result1
2013c     07 24 4E F7 | 	zerox	local04, #7 wz
20140     30 00 90 5D |  if_ne	jmp	#LR__3332
20144                 | ' 			do {
20144                 | LR__3331
20144     0F 13 02 F6 | 	mov	arg01, local01
20148     FC 14 06 F6 | 	mov	arg02, #252
2014c     DC 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1021
20150     00 FA 0D F2 | 	cmp	result1, #0 wz
20154     01 00 00 5F 
20158     00 1E 06 51 |  if_ne	add	local01, ##512
2015c     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3331
20160     00 12 06 F6 | 	mov	arg01, #0
20164     FD 14 06 F6 | 	mov	arg02, #253
20168     C0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1021
2016c     00 FA 0D F2 | 	cmp	result1, #0 wz
20170     01 20 06 A6 |  if_e	mov	local02, #1
20174                 | LR__3332
20174                 | LR__3333
20174     C0 79 B0 FD | 	call	#_fatfs_cc_deselect_1011
20178                 | ' 				count = 1;
20178                 | ' 		}
20178                 | ' 	}
20178                 | ' 	deselect();
20178                 | ' 
20178                 | ' 	return count ? RES_ERROR : RES_OK;
20178     00 20 0E F2 | 	cmp	local02, #0 wz
2017c     01 24 06 56 |  if_ne	mov	local04, #1
20180     00 24 06 A6 |  if_e	mov	local04, #0
20184     12 FB 01 F6 | 	mov	result1, local04
20188                 | LR__3334
20188     A7 F0 03 F6 | 	mov	ptra, fp
2018c     B2 00 A0 FD | 	call	#popregs_
20190                 | _fatfs_cc_disk_write_ret
20190     2D 00 64 FD | 	ret
20194                 | 
20194                 | _fatfs_cc_disk_ioctl
20194     01 4A 05 F6 | 	mov	COUNT_, #1
20198     A8 00 A0 FD | 	call	#pushregs_
2019c     30 F0 07 F1 | 	add	ptra, #48
201a0     04 4E 05 F1 | 	add	fp, #4
201a4     A7 12 42 FC | 	wrbyte	arg01, fp
201a8     04 4E 05 F1 | 	add	fp, #4
201ac     A7 14 42 FC | 	wrbyte	arg02, fp
201b0     04 4E 05 F1 | 	add	fp, #4
201b4     A7 16 62 FC | 	wrlong	arg03, fp
201b8     08 4E 85 F1 | 	sub	fp, #8
201bc     A7 12 CA FA | 	rdbyte	arg01, fp wz
201c0     04 4E 85 F1 | 	sub	fp, #4
201c4     01 FA 05 56 |  if_ne	mov	result1, #1
201c8                 | ' 
201c8                 | ' 	return Stat;
201c8     01 00 00 AF 
201cc     20 E4 05 A1 |  if_e	add	objptr, ##544
201d0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
201d4     01 00 00 AF 
201d8     20 E4 85 A1 |  if_e	sub	objptr, ##544
201dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
201e0     01 FA CD F7 | 	test	result1, #1 wz
201e4     03 FA 05 56 |  if_ne	mov	result1, #3
201e8     E4 01 90 5D |  if_ne	jmp	#LR__3348
201ec     10 4E 05 F1 | 	add	fp, #16
201f0     A7 02 68 FC | 	wrlong	#1, fp
201f4                 | ' 
201f4                 | ' 	res = RES_ERROR;
201f4                 | ' 	switch (ctrl) {
201f4     08 4E 85 F1 | 	sub	fp, #8
201f8     A7 1E C2 FA | 	rdbyte	local01, fp
201fc     08 4E 85 F1 | 	sub	fp, #8
20200     04 1E 26 F3 | 	fle	local01, #4
20204     30 1E 62 FD | 	jmprel	local01
20208                 | LR__3340
20208     10 00 90 FD | 	jmp	#LR__3341
2020c     24 00 90 FD | 	jmp	#LR__3342
20210     A0 01 90 FD | 	jmp	#LR__3346
20214     80 01 90 FD | 	jmp	#LR__3345
20218     98 01 90 FD | 	jmp	#LR__3346
2021c                 | LR__3341
2021c     9C 79 B0 FD | 	call	#_fatfs_cc_select_1015
20220     00 FA 0D F2 | 	cmp	result1, #0 wz
20224     10 4E 05 51 |  if_ne	add	fp, #16
20228     A7 00 68 5C |  if_ne	wrlong	#0, fp
2022c     10 4E 85 51 |  if_ne	sub	fp, #16
20230                 | ' 			break;
20230     8C 01 90 FD | 	jmp	#LR__3347
20234                 | LR__3342
20234     09 12 06 F6 | 	mov	arg01, #9
20238     00 14 06 F6 | 	mov	arg02, #0
2023c     B8 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1025
20240     FD 1E 02 F6 | 	mov	local01, result1
20244     07 1E 4E F7 | 	zerox	local01, #7 wz
20248     74 01 90 5D |  if_ne	jmp	#LR__3347
2024c     18 4E 05 F1 | 	add	fp, #24
20250     A7 12 02 F6 | 	mov	arg01, fp
20254     18 4E 85 F1 | 	sub	fp, #24
20258     10 14 06 F6 | 	mov	arg02, #16
2025c     EC 79 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1019
20260     00 FA 0D F2 | 	cmp	result1, #0 wz
20264     58 01 90 AD |  if_e	jmp	#LR__3347
20268     18 4E 05 F1 | 	add	fp, #24
2026c     A7 1E C2 FA | 	rdbyte	local01, fp
20270     18 4E 85 F1 | 	sub	fp, #24
20274     06 1E 46 F0 | 	shr	local01, #6
20278     01 1E 0E F2 | 	cmp	local01, #1 wz
2027c     5C 00 90 5D |  if_ne	jmp	#LR__3343
20280     21 4E 05 F1 | 	add	fp, #33
20284     A7 1E C2 FA | 	rdbyte	local01, fp
20288     01 4E 85 F1 | 	sub	fp, #1
2028c     A7 FA C1 FA | 	rdbyte	result1, fp
20290     FD FA 31 F9 | 	getword	result1, result1, #0
20294     08 FA 65 F0 | 	shl	result1, #8
20298     FD 1E 02 F1 | 	add	local01, result1
2029c     01 4E 85 F1 | 	sub	fp, #1
202a0     A7 FA C1 FA | 	rdbyte	result1, fp
202a4     3F FA 05 F5 | 	and	result1, #63
202a8     10 FA 65 F0 | 	shl	result1, #16
202ac     FD 1E 02 F1 | 	add	local01, result1
202b0     01 1E 06 F1 | 	add	local01, #1
202b4     09 4E 05 F1 | 	add	fp, #9
202b8     A7 1E 62 FC | 	wrlong	local01, fp
202bc     1C 4E 85 F1 | 	sub	fp, #28
202c0     A7 1E 02 FB | 	rdlong	local01, fp
202c4     1C 4E 05 F1 | 	add	fp, #28
202c8     A7 FA 01 FB | 	rdlong	result1, fp
202cc     28 4E 85 F1 | 	sub	fp, #40
202d0     0A FA 65 F0 | 	shl	result1, #10
202d4     0F FB 61 FC | 	wrlong	result1, local01
202d8     AC 00 90 FD | 	jmp	#LR__3344
202dc                 | LR__3343
202dc     1D 4E 05 F1 | 	add	fp, #29
202e0     A7 1E C2 FA | 	rdbyte	local01, fp
202e4     0F 1F 42 F8 | 	getnib	local01, local01, #0
202e8     05 4E 05 F1 | 	add	fp, #5
202ec     A7 FA C1 FA | 	rdbyte	result1, fp
202f0     80 FA 05 F5 | 	and	result1, #128
202f4     07 FA C5 F0 | 	sar	result1, #7
202f8     FD 1E 02 F1 | 	add	local01, result1
202fc     01 4E 85 F1 | 	sub	fp, #1
20300     A7 FA C1 FA | 	rdbyte	result1, fp
20304     03 FA 05 F5 | 	and	result1, #3
20308     01 FA 65 F0 | 	shl	result1, #1
2030c     FD 1E 02 F1 | 	add	local01, result1
20310     02 1E 06 F1 | 	add	local01, #2
20314     0D 4E 85 F1 | 	sub	fp, #13
20318     A7 1E 42 FC | 	wrbyte	local01, fp
2031c     0C 4E 05 F1 | 	add	fp, #12
20320     A7 1E C2 FA | 	rdbyte	local01, fp
20324     06 1E 46 F0 | 	shr	local01, #6
20328     01 4E 85 F1 | 	sub	fp, #1
2032c     A7 FA C1 FA | 	rdbyte	result1, fp
20330     FD FA 31 F9 | 	getword	result1, result1, #0
20334     02 FA 65 F0 | 	shl	result1, #2
20338     FD 1E 02 F1 | 	add	local01, result1
2033c     01 4E 85 F1 | 	sub	fp, #1
20340     A7 FA C1 FA | 	rdbyte	result1, fp
20344     03 FA 05 F5 | 	and	result1, #3
20348     FD FA 31 F9 | 	getword	result1, result1, #0
2034c     0A FA 65 F0 | 	shl	result1, #10
20350     FD 1E 02 F1 | 	add	local01, result1
20354     01 1E 06 F1 | 	add	local01, #1
20358     0A 4E 05 F1 | 	add	fp, #10
2035c     A7 1E 62 FC | 	wrlong	local01, fp
20360     1C 4E 85 F1 | 	sub	fp, #28
20364     A7 1E 02 FB | 	rdlong	local01, fp
20368     1C 4E 05 F1 | 	add	fp, #28
2036c     A7 FA 01 FB | 	rdlong	result1, fp
20370     14 4E 85 F1 | 	sub	fp, #20
20374     A7 16 C2 FA | 	rdbyte	arg03, fp
20378     14 4E 85 F1 | 	sub	fp, #20
2037c     09 16 86 F1 | 	sub	arg03, #9
20380     0B FB 61 F0 | 	shl	result1, arg03
20384     0F FB 61 FC | 	wrlong	result1, local01
20388                 | LR__3344
20388     10 4E 05 F1 | 	add	fp, #16
2038c     A7 00 68 FC | 	wrlong	#0, fp
20390     10 4E 85 F1 | 	sub	fp, #16
20394                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
20394                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
20394                 | ' 					*(LBA_t*)buff = cs << (n - 9);
20394                 | ' 				}
20394                 | ' 				res = RES_OK;
20394                 | ' 			}
20394                 | ' 			break;
20394     28 00 90 FD | 	jmp	#LR__3347
20398                 | LR__3345
20398     0C 4E 05 F1 | 	add	fp, #12
2039c     A7 1E 02 FB | 	rdlong	local01, fp
203a0     0F 01 69 FC | 	wrlong	#128, local01
203a4     04 4E 05 F1 | 	add	fp, #4
203a8     A7 00 68 FC | 	wrlong	#0, fp
203ac     10 4E 85 F1 | 	sub	fp, #16
203b0                 | ' 			*(DWORD*)buff = 128;
203b0                 | ' 			res = RES_OK;
203b0                 | ' 			break;
203b0     0C 00 90 FD | 	jmp	#LR__3347
203b4                 | LR__3346
203b4     10 4E 05 F1 | 	add	fp, #16
203b8     A7 08 68 FC | 	wrlong	#4, fp
203bc     10 4E 85 F1 | 	sub	fp, #16
203c0                 | LR__3347
203c0     74 77 B0 FD | 	call	#_fatfs_cc_deselect_1011
203c4                 | ' 			res = RES_PARERR;
203c4                 | ' 	}
203c4                 | ' 
203c4                 | ' 	deselect();
203c4                 | ' 
203c4                 | ' 	return res;
203c4     10 4E 05 F1 | 	add	fp, #16
203c8     A7 FA 01 FB | 	rdlong	result1, fp
203cc     10 4E 85 F1 | 	sub	fp, #16
203d0                 | LR__3348
203d0     A7 F0 03 F6 | 	mov	ptra, fp
203d4     B2 00 A0 FD | 	call	#popregs_
203d8                 | _fatfs_cc_disk_ioctl_ret
203d8     2D 00 64 FD | 	ret
203dc                 | 
203dc                 | _fatfs_cc_disk_setpins
203dc     00 12 0E F2 | 	cmp	arg01, #0 wz
203e0     01 FA 65 56 |  if_ne	neg	result1, #1
203e4     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
203e8     01 00 00 FF 
203ec     10 E4 05 F1 | 	add	objptr, ##528
203f0     F2 14 62 FC | 	wrlong	arg02, objptr
203f4     04 E4 05 F1 | 	add	objptr, #4
203f8     F2 16 62 FC | 	wrlong	arg03, objptr
203fc     04 E4 05 F1 | 	add	objptr, #4
20400     F2 18 62 FC | 	wrlong	arg04, objptr
20404     04 E4 05 F1 | 	add	objptr, #4
20408     F2 1A 62 FC | 	wrlong	arg05, objptr
2040c     01 00 00 FF 
20410     1C E4 85 F1 | 	sub	objptr, ##540
20414     00 FA 05 F6 | 	mov	result1, #0
20418                 | _fatfs_cc_disk_setpins_ret
20418     2D 00 64 FD | 	ret
2041c                 | 
2041c                 | _fatfs_cc_tchar2uni
2041c     09 01 02 FB | 	rdlong	_var01, arg01
20420     00 03 02 F6 | 	mov	_var02, _var01
20424     01 00 06 F1 | 	add	_var01, #1
20428     00 05 02 F6 | 	mov	_var03, _var01
2042c     01 07 C2 FA | 	rdbyte	_var04, _var02
20430     80 06 CE F7 | 	test	_var04, #128 wz
20434     E8 00 90 AD |  if_e	jmp	#LR__3357
20438     03 09 02 F6 | 	mov	_var05, _var04
2043c     E0 08 06 F5 | 	and	_var05, #224
20440     C0 08 0E F2 | 	cmp	_var05, #192 wz
20444     1F 06 06 A5 |  if_e	and	_var04, #31
20448     01 0A 06 A6 |  if_e	mov	_var06, #1
2044c     34 00 90 AD |  if_e	jmp	#LR__3351
20450     03 09 02 F6 | 	mov	_var05, _var04
20454     F0 08 06 F5 | 	and	_var05, #240
20458     E0 08 0E F2 | 	cmp	_var05, #224 wz
2045c     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
20460     02 0A 06 A6 |  if_e	mov	_var06, #2
20464     1C 00 90 AD |  if_e	jmp	#LR__3350
20468     03 09 02 F6 | 	mov	_var05, _var04
2046c     F8 08 06 F5 | 	and	_var05, #248
20470     F0 08 0E F2 | 	cmp	_var05, #240 wz
20474     07 06 06 A5 |  if_e	and	_var04, #7
20478     03 0A 06 A6 |  if_e	mov	_var06, #3
2047c                 | ' 			return 0xFFFFFFFF;
2047c     01 FA 65 56 |  if_ne	neg	result1, #1
20480     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
20484                 | LR__3350
20484                 | LR__3351
20484                 | ' 		}
20484                 | ' 		do {
20484                 | LR__3352
20484     02 0D C2 FA | 	rdbyte	_var07, _var03
20488     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2048c     C0 08 06 F5 | 	and	_var05, #192
20490     80 08 0E F2 | 	cmp	_var05, #128 wz
20494     01 04 06 F1 | 	add	_var03, #1
20498     01 FA 65 56 |  if_ne	neg	result1, #1
2049c     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
204a0     06 06 66 F0 | 	shl	_var04, #6
204a4     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
204a8     3F 02 06 F5 | 	and	_var02, #63
204ac     01 07 42 F5 | 	or	_var04, _var02
204b0     F4 0B 6E FB | 	djnz	_var06, #LR__3352
204b4     80 06 16 F2 | 	cmp	_var04, #128 wc
204b8     24 00 90 CD |  if_b	jmp	#LR__3354
204bc     6C 00 00 FF 
204c0     00 06 16 F2 | 	cmp	_var04, ##55296 wc
204c4     0C 00 90 CD |  if_b	jmp	#LR__3353
204c8     70 00 00 FF 
204cc     00 06 16 F2 | 	cmp	_var04, ##57344 wc
204d0     0C 00 90 CD |  if_b	jmp	#LR__3354
204d4                 | LR__3353
204d4     80 08 00 FF 
204d8     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
204dc     08 00 90 CD |  if_b	jmp	#LR__3355
204e0                 | LR__3354
204e0     01 FA 65 F6 | 	neg	result1, #1
204e4     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
204e8                 | LR__3355
204e8     80 00 00 FF 
204ec     00 06 16 F2 | 	cmp	_var04, ##65536 wc
204f0     2C 00 90 CD |  if_b	jmp	#LR__3356
204f4     03 03 02 F6 | 	mov	_var02, _var04
204f8     80 00 00 FF 
204fc     00 02 86 F1 | 	sub	_var02, ##65536
20500     06 02 66 F0 | 	shl	_var02, #6
20504     80 FF 01 FF 
20508     00 02 06 F5 | 	and	_var02, ##67043328
2050c     6E 00 6C FF 
20510     00 08 06 F6 | 	mov	_var05, ##-671032320
20514     01 09 42 F5 | 	or	_var05, _var02
20518     09 06 46 F7 | 	zerox	_var04, #9
2051c     04 07 42 F5 | 	or	_var04, _var05
20520                 | LR__3356
20520                 | LR__3357
20520     09 05 62 FC | 	wrlong	_var03, arg01
20524                 | ' 	}
20524                 | ' #line 811 "ff.c"
20524                 | ' 	*str = p;
20524                 | ' 	return uc;
20524     03 FB 01 F6 | 	mov	result1, _var04
20528                 | _fatfs_cc_tchar2uni_ret
20528     2D 00 64 FD | 	ret
2052c                 | 
2052c                 | _fatfs_cc_put_utf
2052c     80 12 16 F2 | 	cmp	arg01, #128 wc
20530     18 00 90 3D |  if_ae	jmp	#LR__3360
20534     01 16 16 F2 | 	cmp	arg03, #1 wc
20538     00 FA 05 C6 |  if_b	mov	result1, #0
2053c     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
20540     0A 13 42 FC | 	wrbyte	arg01, arg02
20544                 | ' 		*buf = (TCHAR)chr;
20544                 | ' 		return 1;
20544     01 FA 05 F6 | 	mov	result1, #1
20548     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2054c                 | LR__3360
2054c     04 00 00 FF 
20550     00 12 16 F2 | 	cmp	arg01, ##2048 wc
20554     40 00 90 3D |  if_ae	jmp	#LR__3361
20558     02 16 16 F2 | 	cmp	arg03, #2 wc
2055c     00 FA 05 C6 |  if_b	mov	result1, #0
20560     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
20564     09 FB 01 F6 | 	mov	result1, arg01
20568     06 FA 45 F0 | 	shr	result1, #6
2056c     1F FA 05 F5 | 	and	result1, #31
20570     C0 16 06 F6 | 	mov	arg03, #192
20574     FD 16 42 F5 | 	or	arg03, result1
20578     0A 17 42 FC | 	wrbyte	arg03, arg02
2057c     01 14 06 F1 | 	add	arg02, #1
20580     3F 12 06 F5 | 	and	arg01, #63
20584     80 FA 05 F6 | 	mov	result1, #128
20588     09 FB 41 F5 | 	or	result1, arg01
2058c     0A FB 41 FC | 	wrbyte	result1, arg02
20590                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
20590                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
20590                 | ' 		return 2;
20590     02 FA 05 F6 | 	mov	result1, #2
20594     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
20598                 | LR__3361
20598     80 00 00 FF 
2059c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
205a0     70 00 90 3D |  if_ae	jmp	#LR__3364
205a4     03 16 16 F2 | 	cmp	arg03, #3 wc
205a8     18 00 90 CD |  if_b	jmp	#LR__3362
205ac     6C 00 00 FF 
205b0     00 12 16 F2 | 	cmp	arg01, ##55296 wc
205b4     14 00 90 CD |  if_b	jmp	#LR__3363
205b8     70 00 00 FF 
205bc     00 12 16 F2 | 	cmp	arg01, ##57344 wc
205c0     08 00 90 3D |  if_ae	jmp	#LR__3363
205c4                 | LR__3362
205c4     00 FA 05 F6 | 	mov	result1, #0
205c8     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
205cc                 | LR__3363
205cc     09 FB 59 F8 | 	getnib	result1, arg01, #3
205d0     E0 16 06 F6 | 	mov	arg03, #224
205d4     FD 16 42 F5 | 	or	arg03, result1
205d8     0A 17 42 FC | 	wrbyte	arg03, arg02
205dc     01 14 06 F1 | 	add	arg02, #1
205e0     09 FB 01 F6 | 	mov	result1, arg01
205e4     06 FA 45 F0 | 	shr	result1, #6
205e8     3F FA 05 F5 | 	and	result1, #63
205ec     80 16 06 F6 | 	mov	arg03, #128
205f0     FD 16 42 F5 | 	or	arg03, result1
205f4     0A 17 42 FC | 	wrbyte	arg03, arg02
205f8     01 14 06 F1 | 	add	arg02, #1
205fc     3F 12 06 F5 | 	and	arg01, #63
20600     80 FA 05 F6 | 	mov	result1, #128
20604     09 FB 41 F5 | 	or	result1, arg01
20608     0A FB 41 FC | 	wrbyte	result1, arg02
2060c                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2060c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2060c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2060c                 | ' 		return 3;
2060c     03 FA 05 F6 | 	mov	result1, #3
20610     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
20614                 | LR__3364
20614     04 16 16 F2 | 	cmp	arg03, #4 wc
20618     00 FA 05 C6 |  if_b	mov	result1, #0
2061c     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
20620     09 01 02 F6 | 	mov	_var01, arg01
20624     E0 01 06 F4 | 	bitl	_var01, #480
20628     00 00 6C FF 
2062c     00 00 86 F1 | 	sub	_var01, ##-671088640
20630     06 00 46 F0 | 	shr	_var01, #6
20634     09 13 32 F9 | 	getword	arg01, arg01, #0
20638     6E 00 00 FF 
2063c     00 12 86 F1 | 	sub	arg01, ##56320
20640     00 08 00 FF 
20644     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
20648     02 00 00 CF 
2064c     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
20650     00 FA 05 36 |  if_ae	mov	result1, #0
20654     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
20658     09 01 42 F5 | 	or	_var01, arg01
2065c     80 00 00 FF 
20660     00 00 06 F1 | 	add	_var01, ##65536
20664     00 FB 01 F6 | 	mov	result1, _var01
20668     12 FA 45 F0 | 	shr	result1, #18
2066c     07 FA 05 F5 | 	and	result1, #7
20670     F0 16 06 F6 | 	mov	arg03, #240
20674     FD 16 42 F5 | 	or	arg03, result1
20678     0A 17 42 FC | 	wrbyte	arg03, arg02
2067c     01 14 06 F1 | 	add	arg02, #1
20680     00 FB 01 F6 | 	mov	result1, _var01
20684     0C FA 45 F0 | 	shr	result1, #12
20688     3F FA 05 F5 | 	and	result1, #63
2068c     80 16 06 F6 | 	mov	arg03, #128
20690     FD 16 42 F5 | 	or	arg03, result1
20694     0A 17 42 FC | 	wrbyte	arg03, arg02
20698     01 14 06 F1 | 	add	arg02, #1
2069c     00 FB 01 F6 | 	mov	result1, _var01
206a0     06 FA 45 F0 | 	shr	result1, #6
206a4     3F FA 05 F5 | 	and	result1, #63
206a8     80 16 06 F6 | 	mov	arg03, #128
206ac     FD 16 42 F5 | 	or	arg03, result1
206b0     0A 17 42 FC | 	wrbyte	arg03, arg02
206b4     01 14 06 F1 | 	add	arg02, #1
206b8     3F 00 06 F5 | 	and	_var01, #63
206bc     80 FA 05 F6 | 	mov	result1, #128
206c0     00 FB 41 F5 | 	or	result1, _var01
206c4     0A FB 41 FC | 	wrbyte	result1, arg02
206c8                 | ' 	chr = (hc | chr) + 0x10000;
206c8                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
206c8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
206c8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
206c8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
206c8                 | ' 	return 4;
206c8     04 FA 05 F6 | 	mov	result1, #4
206cc                 | _fatfs_cc_put_utf_ret
206cc     2D 00 64 FD | 	ret
206d0                 | 
206d0                 | _fatfs_cc_sync_window
206d0     02 4A 05 F6 | 	mov	COUNT_, #2
206d4     A8 00 A0 FD | 	call	#pushregs_
206d8     09 1F 02 F6 | 	mov	local01, arg01
206dc     00 20 06 F6 | 	mov	local02, #0
206e0     03 1E 06 F1 | 	add	local01, #3
206e4     0F FB C9 FA | 	rdbyte	result1, local01 wz
206e8     03 1E 86 F1 | 	sub	local01, #3
206ec     A4 00 90 AD |  if_e	jmp	#LR__3372
206f0     01 1E 06 F1 | 	add	local01, #1
206f4     0F 13 C2 FA | 	rdbyte	arg01, local01
206f8     33 1E 06 F1 | 	add	local01, #51
206fc     0F 15 02 F6 | 	mov	arg02, local01
20700     04 1E 86 F1 | 	sub	local01, #4
20704     0F 17 02 FB | 	rdlong	arg03, local01
20708     30 1E 86 F1 | 	sub	local01, #48
2070c     01 18 06 F6 | 	mov	arg04, #1
20710     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
20714     00 FA 0D F2 | 	cmp	result1, #0 wz
20718     74 00 90 5D |  if_ne	jmp	#LR__3370
2071c     03 1E 06 F1 | 	add	local01, #3
20720     0F 01 48 FC | 	wrbyte	#0, local01
20724     2D 1E 06 F1 | 	add	local01, #45
20728     0F FB 01 FB | 	rdlong	result1, local01
2072c     0C 1E 86 F1 | 	sub	local01, #12
20730     0F 19 02 FB | 	rdlong	arg04, local01
20734     0C FB 81 F1 | 	sub	result1, arg04
20738     08 1E 86 F1 | 	sub	local01, #8
2073c     0F 19 02 FB | 	rdlong	arg04, local01
20740     1C 1E 86 F1 | 	sub	local01, #28
20744     0C FB 11 F2 | 	cmp	result1, arg04 wc
20748     48 00 90 3D |  if_ae	jmp	#LR__3371
2074c     02 1E 06 F1 | 	add	local01, #2
20750     0F 19 C2 FA | 	rdbyte	arg04, local01
20754     02 1E 86 F1 | 	sub	local01, #2
20758     02 18 0E F2 | 	cmp	arg04, #2 wz
2075c     34 00 90 5D |  if_ne	jmp	#LR__3371
20760     01 1E 06 F1 | 	add	local01, #1
20764     0F 13 C2 FA | 	rdbyte	arg01, local01
20768     33 1E 06 F1 | 	add	local01, #51
2076c     0F 15 02 F6 | 	mov	arg02, local01
20770     04 1E 86 F1 | 	sub	local01, #4
20774     0F 17 02 FB | 	rdlong	arg03, local01
20778     14 1E 86 F1 | 	sub	local01, #20
2077c     0F 1F 02 FB | 	rdlong	local01, local01
20780     0F 17 02 F1 | 	add	arg03, local01
20784     01 18 06 F6 | 	mov	arg04, #1
20788     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2078c     04 00 90 FD | 	jmp	#LR__3371
20790                 | LR__3370
20790     01 20 06 F6 | 	mov	local02, #1
20794                 | LR__3371
20794                 | LR__3372
20794                 | ' 			res = FR_DISK_ERR;
20794                 | ' 		}
20794                 | ' 	}
20794                 | ' 	return res;
20794     10 FB 01 F6 | 	mov	result1, local02
20798     A7 F0 03 F6 | 	mov	ptra, fp
2079c     B2 00 A0 FD | 	call	#popregs_
207a0                 | _fatfs_cc_sync_window_ret
207a0     2D 00 64 FD | 	ret
207a4                 | 
207a4                 | _fatfs_cc_move_window
207a4     03 4A 05 F6 | 	mov	COUNT_, #3
207a8     A8 00 A0 FD | 	call	#pushregs_
207ac     09 1F 02 F6 | 	mov	local01, arg01
207b0     0A 21 02 F6 | 	mov	local02, arg02
207b4     00 22 06 F6 | 	mov	local03, #0
207b8     30 1E 06 F1 | 	add	local01, #48
207bc     0F 19 02 FB | 	rdlong	arg04, local01
207c0     30 1E 86 F1 | 	sub	local01, #48
207c4     0C 21 0A F2 | 	cmp	local02, arg04 wz
207c8     40 00 90 AD |  if_e	jmp	#LR__3381
207cc     0F 13 02 F6 | 	mov	arg01, local01
207d0     FC FE BF FD | 	call	#_fatfs_cc_sync_window
207d4     FD 22 0A F6 | 	mov	local03, result1 wz
207d8     30 00 90 5D |  if_ne	jmp	#LR__3380
207dc     01 1E 06 F1 | 	add	local01, #1
207e0     0F 13 C2 FA | 	rdbyte	arg01, local01
207e4     33 1E 06 F1 | 	add	local01, #51
207e8     0F 15 02 F6 | 	mov	arg02, local01
207ec     10 17 02 F6 | 	mov	arg03, local02
207f0     01 18 06 F6 | 	mov	arg04, #1
207f4     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
207f8     00 FA 0D F2 | 	cmp	result1, #0 wz
207fc     01 20 66 56 |  if_ne	neg	local02, #1
20800     01 22 06 56 |  if_ne	mov	local03, #1
20804     04 1E 86 F1 | 	sub	local01, #4
20808     0F 21 62 FC | 	wrlong	local02, local01
2080c                 | LR__3380
2080c                 | LR__3381
2080c                 | ' 				sect = (LBA_t)0 - 1;
2080c                 | ' 				res = FR_DISK_ERR;
2080c                 | ' 			}
2080c                 | ' 			fs->winsect = sect;
2080c                 | ' 		}
2080c                 | ' 	}
2080c                 | ' 	return res;
2080c     11 FB 01 F6 | 	mov	result1, local03
20810     A7 F0 03 F6 | 	mov	ptra, fp
20814     B2 00 A0 FD | 	call	#popregs_
20818                 | _fatfs_cc_move_window_ret
20818     2D 00 64 FD | 	ret
2081c                 | 
2081c                 | _fatfs_cc_sync_fs
2081c     02 4A 05 F6 | 	mov	COUNT_, #2
20820     A8 00 A0 FD | 	call	#pushregs_
20824     09 1F 02 F6 | 	mov	local01, arg01
20828     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2082c     FD 20 0A F6 | 	mov	local02, result1 wz
20830     D8 00 90 5D |  if_ne	jmp	#LR__3391
20834     0F 19 C2 FA | 	rdbyte	arg04, local01
20838     03 18 0E F2 | 	cmp	arg04, #3 wz
2083c     04 1E 06 A1 |  if_e	add	local01, #4
20840     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
20844     04 1E 86 A1 |  if_e	sub	local01, #4
20848     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2084c     A0 00 90 5D |  if_ne	jmp	#LR__3390
20850     34 1E 06 F1 | 	add	local01, #52
20854     0F 13 02 F6 | 	mov	arg01, local01
20858     00 14 06 F6 | 	mov	arg02, #0
2085c     09 16 C6 F9 | 	decod	arg03, #9
20860     98 00 A0 FD | 	call	#\builtin_bytefill_
20864     0F 13 02 F6 | 	mov	arg01, local01
20868     FE 13 06 F1 | 	add	arg01, #510
2086c     55 00 80 FF 
20870     09 AB 58 FC | 	wrword	##43605, arg01
20874     A9 B0 A0 FF 
20878     0F A5 68 FC | 	wrlong	##1096897106, local01
2087c     0F 13 02 F6 | 	mov	arg01, local01
20880     E4 13 06 F1 | 	add	arg01, #484
20884     B9 A0 B0 FF 
20888     09 E5 68 FC | 	wrlong	##1631679090, arg01
2088c     0F 13 02 F6 | 	mov	arg01, local01
20890     E8 13 06 F1 | 	add	arg01, #488
20894     20 1E 86 F1 | 	sub	local01, #32
20898     0F 15 02 FB | 	rdlong	arg02, local01
2089c     09 15 62 FC | 	wrlong	arg02, arg01
208a0     20 1E 06 F1 | 	add	local01, #32
208a4     0F 13 02 F6 | 	mov	arg01, local01
208a8     EC 13 06 F1 | 	add	arg01, #492
208ac     24 1E 86 F1 | 	sub	local01, #36
208b0     0F 15 02 FB | 	rdlong	arg02, local01
208b4     09 15 62 FC | 	wrlong	arg02, arg01
208b8     10 1E 06 F1 | 	add	local01, #16
208bc     0F 17 02 FB | 	rdlong	arg03, local01
208c0     01 16 06 F1 | 	add	arg03, #1
208c4     10 1E 06 F1 | 	add	local01, #16
208c8     0F 17 62 FC | 	wrlong	arg03, local01
208cc     2F 1E 86 F1 | 	sub	local01, #47
208d0     0F 13 C2 FA | 	rdbyte	arg01, local01
208d4     33 1E 06 F1 | 	add	local01, #51
208d8     0F 15 02 F6 | 	mov	arg02, local01
208dc     01 18 06 F6 | 	mov	arg04, #1
208e0     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
208e4     30 1E 86 F1 | 	sub	local01, #48
208e8     0F 01 48 FC | 	wrbyte	#0, local01
208ec     04 1E 86 F1 | 	sub	local01, #4
208f0                 | LR__3390
208f0     01 1E 06 F1 | 	add	local01, #1
208f4     0F 13 C2 FA | 	rdbyte	arg01, local01
208f8     00 14 06 F6 | 	mov	arg02, #0
208fc     00 16 06 F6 | 	mov	arg03, #0
20900     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
20904     00 FA 0D F2 | 	cmp	result1, #0 wz
20908     01 20 06 56 |  if_ne	mov	local02, #1
2090c                 | LR__3391
2090c                 | ' 	}
2090c                 | ' 
2090c                 | ' 	return res;
2090c     10 FB 01 F6 | 	mov	result1, local02
20910     A7 F0 03 F6 | 	mov	ptra, fp
20914     B2 00 A0 FD | 	call	#popregs_
20918                 | _fatfs_cc_sync_fs_ret
20918     2D 00 64 FD | 	ret
2091c                 | 
2091c                 | _fatfs_cc_clst2sect
2091c     02 14 86 F1 | 	sub	arg02, #2
20920     18 12 06 F1 | 	add	arg01, #24
20924     09 01 02 FB | 	rdlong	_var01, arg01
20928     18 12 86 F1 | 	sub	arg01, #24
2092c     02 00 86 F1 | 	sub	_var01, #2
20930     00 15 12 F2 | 	cmp	arg02, _var01 wc
20934     00 FA 05 36 |  if_ae	mov	result1, #0
20938     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2093c     0A 12 06 F1 | 	add	arg01, #10
20940     09 01 E2 FA | 	rdword	_var01, arg01
20944     0A 01 02 FD | 	qmul	_var01, arg02
20948                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
20948     22 12 06 F1 | 	add	arg01, #34
2094c     09 FB 01 FB | 	rdlong	result1, arg01
20950     18 00 62 FD | 	getqx	_var01
20954     00 FB 01 F1 | 	add	result1, _var01
20958                 | _fatfs_cc_clst2sect_ret
20958     2D 00 64 FD | 	ret
2095c                 | 
2095c                 | _fatfs_cc_get_fat
2095c     07 4A 05 F6 | 	mov	COUNT_, #7
20960     A8 00 A0 FD | 	call	#pushregs_
20964     0A 1F 02 F6 | 	mov	local01, arg02
20968     09 21 02 FB | 	rdlong	local02, arg01
2096c     02 1E 16 F2 | 	cmp	local01, #2 wc
20970     14 00 90 CD |  if_b	jmp	#LR__3400
20974     18 20 06 F1 | 	add	local02, #24
20978     10 23 02 FB | 	rdlong	local03, local02
2097c     18 20 86 F1 | 	sub	local02, #24
20980     11 1F 12 F2 | 	cmp	local01, local03 wc
20984     08 00 90 CD |  if_b	jmp	#LR__3401
20988                 | LR__3400
20988     01 24 06 F6 | 	mov	local04, #1
2098c     60 01 90 FD | 	jmp	#LR__3408
20990                 | LR__3401
20990     01 24 66 F6 | 	neg	local04, #1
20994                 | ' 		val = 0xFFFFFFFF;
20994                 | ' 
20994                 | ' 		switch (fs->fs_type) {
20994     10 27 C2 FA | 	rdbyte	local05, local02
20998     01 26 86 F1 | 	sub	local05, #1
2099c     03 26 26 F3 | 	fle	local05, #3
209a0     30 26 62 FD | 	jmprel	local05
209a4                 | LR__3402
209a4     0C 00 90 FD | 	jmp	#LR__3403
209a8     B8 00 90 FD | 	jmp	#LR__3404
209ac     F8 00 90 FD | 	jmp	#LR__3405
209b0     38 01 90 FD | 	jmp	#LR__3406
209b4                 | LR__3403
209b4     0F 27 02 F6 | 	mov	local05, local01
209b8     0F 13 02 F6 | 	mov	arg01, local01
209bc     01 12 46 F0 | 	shr	arg01, #1
209c0     09 27 02 F1 | 	add	local05, arg01
209c4     10 13 02 F6 | 	mov	arg01, local02
209c8     13 29 02 F6 | 	mov	local06, local05
209cc     09 28 46 F0 | 	shr	local06, #9
209d0     24 20 06 F1 | 	add	local02, #36
209d4     10 15 02 FB | 	rdlong	arg02, local02
209d8     24 20 86 F1 | 	sub	local02, #36
209dc     14 15 02 F1 | 	add	arg02, local06
209e0     C0 FD BF FD | 	call	#_fatfs_cc_move_window
209e4     00 FA 0D F2 | 	cmp	result1, #0 wz
209e8     04 01 90 5D |  if_ne	jmp	#LR__3407
209ec     13 29 02 F6 | 	mov	local06, local05
209f0     FF 29 06 F5 | 	and	local06, #511
209f4     34 20 06 F1 | 	add	local02, #52
209f8     10 29 02 F1 | 	add	local06, local02
209fc     14 2B C2 FA | 	rdbyte	local07, local06
20a00     34 20 86 F1 | 	sub	local02, #52
20a04     10 13 02 F6 | 	mov	arg01, local02
20a08     01 26 06 F1 | 	add	local05, #1
20a0c     13 29 02 F6 | 	mov	local06, local05
20a10     09 28 46 F0 | 	shr	local06, #9
20a14     24 20 06 F1 | 	add	local02, #36
20a18     10 15 02 FB | 	rdlong	arg02, local02
20a1c     24 20 86 F1 | 	sub	local02, #36
20a20     14 15 02 F1 | 	add	arg02, local06
20a24     7C FD BF FD | 	call	#_fatfs_cc_move_window
20a28     00 FA 0D F2 | 	cmp	result1, #0 wz
20a2c     C0 00 90 5D |  if_ne	jmp	#LR__3407
20a30     FF 27 06 F5 | 	and	local05, #511
20a34     34 20 06 F1 | 	add	local02, #52
20a38     10 27 02 F1 | 	add	local05, local02
20a3c     13 29 C2 FA | 	rdbyte	local06, local05
20a40     08 28 66 F0 | 	shl	local06, #8
20a44     14 2B 42 F5 | 	or	local07, local06
20a48     01 1E CE F7 | 	test	local01, #1 wz
20a4c     04 2A 46 50 |  if_ne	shr	local07, #4
20a50     15 23 02 56 |  if_ne	mov	local03, local07
20a54     0B 2A 46 A7 |  if_e	zerox	local07, #11
20a58     15 23 02 A6 |  if_e	mov	local03, local07
20a5c     11 25 02 F6 | 	mov	local04, local03
20a60                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
20a60                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
20a60                 | ' 			break;
20a60     8C 00 90 FD | 	jmp	#LR__3407
20a64                 | LR__3404
20a64     10 13 02 F6 | 	mov	arg01, local02
20a68     0F 29 02 F6 | 	mov	local06, local01
20a6c     08 28 46 F0 | 	shr	local06, #8
20a70     24 20 06 F1 | 	add	local02, #36
20a74     10 15 02 FB | 	rdlong	arg02, local02
20a78     24 20 86 F1 | 	sub	local02, #36
20a7c     14 15 02 F1 | 	add	arg02, local06
20a80     20 FD BF FD | 	call	#_fatfs_cc_move_window
20a84     00 FA 0D F2 | 	cmp	result1, #0 wz
20a88     64 00 90 5D |  if_ne	jmp	#LR__3407
20a8c     34 20 06 F1 | 	add	local02, #52
20a90     01 1E 66 F0 | 	shl	local01, #1
20a94     FF 1F 06 F5 | 	and	local01, #511
20a98     0F 21 02 F1 | 	add	local02, local01
20a9c                 | ' {
20a9c                 | ' 
20a9c                 | ' 	return *((WORD*)ptr);
20a9c     10 FB E1 FA | 	rdword	result1, local02
20aa0     FD 24 32 F9 | 	getword	local04, result1, #0
20aa4                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
20aa4                 | ' 			break;
20aa4     48 00 90 FD | 	jmp	#LR__3407
20aa8                 | LR__3405
20aa8     10 13 02 F6 | 	mov	arg01, local02
20aac     0F 29 02 F6 | 	mov	local06, local01
20ab0     07 28 46 F0 | 	shr	local06, #7
20ab4     24 20 06 F1 | 	add	local02, #36
20ab8     10 15 02 FB | 	rdlong	arg02, local02
20abc     24 20 86 F1 | 	sub	local02, #36
20ac0     14 15 02 F1 | 	add	arg02, local06
20ac4     DC FC BF FD | 	call	#_fatfs_cc_move_window
20ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
20acc     20 00 90 5D |  if_ne	jmp	#LR__3407
20ad0     34 20 06 F1 | 	add	local02, #52
20ad4     02 1E 66 F0 | 	shl	local01, #2
20ad8     FF 1F 06 F5 | 	and	local01, #511
20adc     0F 21 02 F1 | 	add	local02, local01
20ae0                 | ' {
20ae0                 | ' 
20ae0                 | ' 	return *((DWORD*)ptr);
20ae0     10 25 02 FB | 	rdlong	local04, local02
20ae4     7C 24 06 F4 | 	bitl	local04, #124
20ae8                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
20ae8                 | ' 			break;
20ae8     04 00 90 FD | 	jmp	#LR__3407
20aec                 | LR__3406
20aec     01 24 06 F6 | 	mov	local04, #1
20af0                 | LR__3407
20af0                 | LR__3408
20af0                 | ' 			val = 1;
20af0                 | ' 		}
20af0                 | ' 	}
20af0                 | ' 
20af0                 | ' 	return val;
20af0     12 FB 01 F6 | 	mov	result1, local04
20af4     A7 F0 03 F6 | 	mov	ptra, fp
20af8     B2 00 A0 FD | 	call	#popregs_
20afc                 | _fatfs_cc_get_fat_ret
20afc     2D 00 64 FD | 	ret
20b00                 | 
20b00                 | _fatfs_cc_put_fat
20b00     08 4A 05 F6 | 	mov	COUNT_, #8
20b04     A8 00 A0 FD | 	call	#pushregs_
20b08     09 1F 02 F6 | 	mov	local01, arg01
20b0c     0A 21 02 F6 | 	mov	local02, arg02
20b10     0B 23 02 F6 | 	mov	local03, arg03
20b14     02 24 06 F6 | 	mov	local04, #2
20b18     02 20 16 F2 | 	cmp	local02, #2 wc
20b1c     E0 01 90 CD |  if_b	jmp	#LR__3417
20b20     18 1E 06 F1 | 	add	local01, #24
20b24     0F 27 02 FB | 	rdlong	local05, local01
20b28     18 1E 86 F1 | 	sub	local01, #24
20b2c     13 21 12 F2 | 	cmp	local02, local05 wc
20b30     CC 01 90 3D |  if_ae	jmp	#LR__3417
20b34                 | ' 		switch (fs->fs_type) {
20b34     0F 29 C2 FA | 	rdbyte	local06, local01
20b38     01 28 86 F1 | 	sub	local06, #1
20b3c     03 28 26 F3 | 	fle	local06, #3
20b40     30 28 62 FD | 	jmprel	local06
20b44                 | LR__3410
20b44     0C 00 90 FD | 	jmp	#LR__3411
20b48     F8 00 90 FD | 	jmp	#LR__3414
20b4c     40 01 90 FD | 	jmp	#LR__3415
20b50     AC 01 90 FD | 	jmp	#LR__3416
20b54                 | LR__3411
20b54     10 2B 02 F6 | 	mov	local07, local02
20b58     10 27 02 F6 | 	mov	local05, local02
20b5c     01 26 46 F0 | 	shr	local05, #1
20b60     13 2B 02 F1 | 	add	local07, local05
20b64     0F 13 02 F6 | 	mov	arg01, local01
20b68     15 29 02 F6 | 	mov	local06, local07
20b6c     09 28 46 F0 | 	shr	local06, #9
20b70     24 1E 06 F1 | 	add	local01, #36
20b74     0F 15 02 FB | 	rdlong	arg02, local01
20b78     24 1E 86 F1 | 	sub	local01, #36
20b7c     14 15 02 F1 | 	add	arg02, local06
20b80     20 FC BF FD | 	call	#_fatfs_cc_move_window
20b84     FD 24 0A F6 | 	mov	local04, result1 wz
20b88     74 01 90 5D |  if_ne	jmp	#LR__3416
20b8c     34 1E 06 F1 | 	add	local01, #52
20b90     0F 2D 02 F6 | 	mov	local08, local01
20b94     15 27 02 F6 | 	mov	local05, local07
20b98     FF 27 06 F5 | 	and	local05, #511
20b9c     13 2D 02 F1 | 	add	local08, local05
20ba0     01 20 CE F7 | 	test	local02, #1 wz
20ba4     34 1E 86 F1 | 	sub	local01, #52
20ba8     01 2A 06 F1 | 	add	local07, #1
20bac     18 00 90 AD |  if_e	jmp	#LR__3412
20bb0     16 27 C2 FA | 	rdbyte	local05, local08
20bb4     13 27 42 F8 | 	getnib	local05, local05, #0
20bb8     11 29 E2 F8 | 	getbyte	local06, local03, #0
20bbc     04 28 66 F0 | 	shl	local06, #4
20bc0     14 27 42 F5 | 	or	local05, local06
20bc4     04 00 90 FD | 	jmp	#LR__3413
20bc8                 | LR__3412
20bc8     11 27 02 F6 | 	mov	local05, local03
20bcc                 | LR__3413
20bcc     16 27 42 FC | 	wrbyte	local05, local08
20bd0     03 1E 06 F1 | 	add	local01, #3
20bd4     0F 03 48 FC | 	wrbyte	#1, local01
20bd8     03 1E 86 F1 | 	sub	local01, #3
20bdc     0F 13 02 F6 | 	mov	arg01, local01
20be0     15 2D 02 F6 | 	mov	local08, local07
20be4     09 2C 46 F0 | 	shr	local08, #9
20be8     24 1E 06 F1 | 	add	local01, #36
20bec     0F 15 02 FB | 	rdlong	arg02, local01
20bf0     24 1E 86 F1 | 	sub	local01, #36
20bf4     16 15 02 F1 | 	add	arg02, local08
20bf8     A8 FB BF FD | 	call	#_fatfs_cc_move_window
20bfc     FD 24 0A F6 | 	mov	local04, result1 wz
20c00     FC 00 90 5D |  if_ne	jmp	#LR__3416
20c04     34 1E 06 F1 | 	add	local01, #52
20c08     0F 2D 02 F6 | 	mov	local08, local01
20c0c     FF 2B 06 F5 | 	and	local07, #511
20c10     15 2D 02 F1 | 	add	local08, local07
20c14     01 20 CE F7 | 	test	local02, #1 wz
20c18     04 22 46 50 |  if_ne	shr	local03, #4
20c1c     11 27 02 56 |  if_ne	mov	local05, local03
20c20     16 27 C2 AA |  if_e	rdbyte	local05, local08
20c24     F0 26 06 A5 |  if_e	and	local05, #240
20c28     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
20c2c     11 23 42 A8 |  if_e	getnib	local03, local03, #0
20c30     11 27 42 A5 |  if_e	or	local05, local03
20c34     16 27 42 FC | 	wrbyte	local05, local08
20c38     31 1E 86 F1 | 	sub	local01, #49
20c3c     0F 03 48 FC | 	wrbyte	#1, local01
20c40                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
20c40                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
20c40                 | ' 			fs->wflag = 1;
20c40                 | ' 			break;
20c40     BC 00 90 FD | 	jmp	#LR__3416
20c44                 | LR__3414
20c44     0F 13 02 F6 | 	mov	arg01, local01
20c48     10 2D 02 F6 | 	mov	local08, local02
20c4c     08 2C 46 F0 | 	shr	local08, #8
20c50     24 1E 06 F1 | 	add	local01, #36
20c54     0F 15 02 FB | 	rdlong	arg02, local01
20c58     24 1E 86 F1 | 	sub	local01, #36
20c5c     16 15 02 F1 | 	add	arg02, local08
20c60     40 FB BF FD | 	call	#_fatfs_cc_move_window
20c64     FD 24 0A F6 | 	mov	local04, result1 wz
20c68     94 00 90 5D |  if_ne	jmp	#LR__3416
20c6c     34 1E 06 F1 | 	add	local01, #52
20c70     0F 13 02 F6 | 	mov	arg01, local01
20c74     01 20 66 F0 | 	shl	local02, #1
20c78     FF 21 06 F5 | 	and	local02, #511
20c7c     10 13 02 F1 | 	add	arg01, local02
20c80     09 23 52 FC | 	wrword	local03, arg01
20c84     31 1E 86 F1 | 	sub	local01, #49
20c88     0F 03 48 FC | 	wrbyte	#1, local01
20c8c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
20c8c                 | ' 			fs->wflag = 1;
20c8c                 | ' 			break;
20c8c     70 00 90 FD | 	jmp	#LR__3416
20c90                 | LR__3415
20c90     0F 13 02 F6 | 	mov	arg01, local01
20c94     10 2D 02 F6 | 	mov	local08, local02
20c98     07 2C 46 F0 | 	shr	local08, #7
20c9c     24 1E 06 F1 | 	add	local01, #36
20ca0     0F 15 02 FB | 	rdlong	arg02, local01
20ca4     24 1E 86 F1 | 	sub	local01, #36
20ca8     16 15 02 F1 | 	add	arg02, local08
20cac     F4 FA BF FD | 	call	#_fatfs_cc_move_window
20cb0     FD 24 0A F6 | 	mov	local04, result1 wz
20cb4     48 00 90 5D |  if_ne	jmp	#LR__3416
20cb8     7C 22 06 F4 | 	bitl	local03, #124
20cbc     34 1E 06 F1 | 	add	local01, #52
20cc0     10 2D 02 F6 | 	mov	local08, local02
20cc4     02 2C 66 F0 | 	shl	local08, #2
20cc8     FF 2D 06 F5 | 	and	local08, #511
20ccc     0F 13 02 F6 | 	mov	arg01, local01
20cd0     16 13 02 F1 | 	add	arg01, local08
20cd4                 | ' {
20cd4                 | ' 
20cd4                 | ' 	return *((DWORD*)ptr);
20cd4     09 2D 02 FB | 	rdlong	local08, arg01
20cd8     00 00 78 FF 
20cdc     00 2C 06 F5 | 	and	local08, ##-268435456
20ce0     16 23 42 F5 | 	or	local03, local08
20ce4     0F 13 02 F6 | 	mov	arg01, local01
20ce8     02 20 66 F0 | 	shl	local02, #2
20cec     FF 21 06 F5 | 	and	local02, #511
20cf0     10 13 02 F1 | 	add	arg01, local02
20cf4     09 23 62 FC | 	wrlong	local03, arg01
20cf8     31 1E 86 F1 | 	sub	local01, #49
20cfc     0F 03 48 FC | 	wrbyte	#1, local01
20d00                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
20d00                 | ' 			}
20d00                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
20d00                 | ' 			fs->wflag = 1;
20d00                 | ' 			break;
20d00                 | LR__3416
20d00                 | LR__3417
20d00                 | ' 		}
20d00                 | ' 	}
20d00                 | ' 	return res;
20d00     12 FB 01 F6 | 	mov	result1, local04
20d04     A7 F0 03 F6 | 	mov	ptra, fp
20d08     B2 00 A0 FD | 	call	#popregs_
20d0c                 | _fatfs_cc_put_fat_ret
20d0c     2D 00 64 FD | 	ret
20d10                 | 
20d10                 | _fatfs_cc_remove_chain
20d10     05 4A 05 F6 | 	mov	COUNT_, #5
20d14     A8 00 A0 FD | 	call	#pushregs_
20d18     09 1F 02 F6 | 	mov	local01, arg01
20d1c     0A 21 02 F6 | 	mov	local02, arg02
20d20     0B 23 02 F6 | 	mov	local03, arg03
20d24     0F 25 02 FB | 	rdlong	local04, local01
20d28     02 20 16 F2 | 	cmp	local02, #2 wc
20d2c     14 00 90 CD |  if_b	jmp	#LR__3420
20d30     18 24 06 F1 | 	add	local04, #24
20d34     12 FB 01 FB | 	rdlong	result1, local04
20d38     18 24 86 F1 | 	sub	local04, #24
20d3c     FD 20 12 F2 | 	cmp	local02, result1 wc
20d40     08 00 90 CD |  if_b	jmp	#LR__3421
20d44                 | LR__3420
20d44     02 FA 05 F6 | 	mov	result1, #2
20d48     CC 00 90 FD | 	jmp	#LR__3426
20d4c                 | LR__3421
20d4c     00 22 0E F2 | 	cmp	local03, #0 wz
20d50     18 00 90 AD |  if_e	jmp	#LR__3422
20d54     11 15 02 F6 | 	mov	arg02, local03
20d58     12 13 02 F6 | 	mov	arg01, local04
20d5c     01 16 66 F6 | 	neg	arg03, #1
20d60     9C FD BF FD | 	call	#_fatfs_cc_put_fat
20d64     00 FA 0D F2 | 	cmp	result1, #0 wz
20d68     AC 00 90 5D |  if_ne	jmp	#LR__3426
20d6c                 | LR__3422
20d6c                 | ' 	}
20d6c                 | ' 
20d6c                 | ' 
20d6c                 | ' 	do {
20d6c                 | LR__3423
20d6c     10 15 02 F6 | 	mov	arg02, local02
20d70     0F 13 02 F6 | 	mov	arg01, local01
20d74     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
20d78     FD 26 0A F6 | 	mov	local05, result1 wz
20d7c     94 00 90 AD |  if_e	jmp	#LR__3425
20d80     01 26 0E F2 | 	cmp	local05, #1 wz
20d84     02 FA 05 A6 |  if_e	mov	result1, #2
20d88     8C 00 90 AD |  if_e	jmp	#LR__3426
20d8c     FF FF 7F FF 
20d90     FF 27 0E F2 | 	cmp	local05, ##-1 wz
20d94     01 FA 05 A6 |  if_e	mov	result1, #1
20d98     7C 00 90 AD |  if_e	jmp	#LR__3426
20d9c     10 15 02 F6 | 	mov	arg02, local02
20da0     12 13 02 F6 | 	mov	arg01, local04
20da4     00 16 06 F6 | 	mov	arg03, #0
20da8     54 FD BF FD | 	call	#_fatfs_cc_put_fat
20dac     FD 22 0A F6 | 	mov	local03, result1 wz
20db0     11 FB 01 56 |  if_ne	mov	result1, local03
20db4     60 00 90 5D |  if_ne	jmp	#LR__3426
20db8     18 24 06 F1 | 	add	local04, #24
20dbc     12 23 02 FB | 	rdlong	local03, local04
20dc0     02 22 86 F1 | 	sub	local03, #2
20dc4     04 24 86 F1 | 	sub	local04, #4
20dc8     12 21 02 FB | 	rdlong	local02, local04
20dcc     14 24 86 F1 | 	sub	local04, #20
20dd0     11 21 12 F2 | 	cmp	local02, local03 wc
20dd4     24 00 90 3D |  if_ae	jmp	#LR__3424
20dd8     14 24 06 F1 | 	add	local04, #20
20ddc     12 23 02 FB | 	rdlong	local03, local04
20de0     01 22 06 F1 | 	add	local03, #1
20de4     12 23 62 FC | 	wrlong	local03, local04
20de8     10 24 86 F1 | 	sub	local04, #16
20dec     12 23 C2 FA | 	rdbyte	local03, local04
20df0     01 22 46 F5 | 	or	local03, #1
20df4     12 23 42 FC | 	wrbyte	local03, local04
20df8     04 24 86 F1 | 	sub	local04, #4
20dfc                 | LR__3424
20dfc     13 21 02 F6 | 	mov	local02, local05
20e00     18 24 06 F1 | 	add	local04, #24
20e04     12 27 02 FB | 	rdlong	local05, local04
20e08     18 24 86 F1 | 	sub	local04, #24
20e0c     13 21 12 F2 | 	cmp	local02, local05 wc
20e10     58 FF 9F CD |  if_b	jmp	#LR__3423
20e14                 | LR__3425
20e14                 | ' #line 1500 "ff.c"
20e14                 | ' 	return FR_OK;
20e14     00 FA 05 F6 | 	mov	result1, #0
20e18                 | LR__3426
20e18     A7 F0 03 F6 | 	mov	ptra, fp
20e1c     B2 00 A0 FD | 	call	#popregs_
20e20                 | _fatfs_cc_remove_chain_ret
20e20     2D 00 64 FD | 	ret
20e24                 | 
20e24                 | _fatfs_cc_create_chain
20e24     09 4A 05 F6 | 	mov	COUNT_, #9
20e28     A8 00 A0 FD | 	call	#pushregs_
20e2c     09 1F 02 F6 | 	mov	local01, arg01
20e30     0A 21 0A F6 | 	mov	local02, arg02 wz
20e34     0F 23 02 FB | 	rdlong	local03, local01
20e38     28 00 90 5D |  if_ne	jmp	#LR__3430
20e3c     10 22 06 F1 | 	add	local03, #16
20e40     11 25 0A FB | 	rdlong	local04, local03 wz
20e44     10 22 86 F1 | 	sub	local03, #16
20e48     18 22 06 51 |  if_ne	add	local03, #24
20e4c     11 27 02 5B |  if_ne	rdlong	local05, local03
20e50     18 22 86 51 |  if_ne	sub	local03, #24
20e54     13 25 12 52 |  if_ne	cmp	local04, local05 wc
20e58     50 00 90 4D |  if_c_and_nz	jmp	#LR__3431
20e5c     01 24 06 F6 | 	mov	local04, #1
20e60     48 00 90 FD | 	jmp	#LR__3431
20e64                 | LR__3430
20e64     10 15 02 F6 | 	mov	arg02, local02
20e68     0F 13 02 F6 | 	mov	arg01, local01
20e6c     EC FA BF FD | 	call	#_fatfs_cc_get_fat
20e70     FD 24 02 F6 | 	mov	local04, result1
20e74     02 24 16 F2 | 	cmp	local04, #2 wc
20e78     01 FA 05 C6 |  if_b	mov	result1, #1
20e7c     BC 01 90 CD |  if_b	jmp	#LR__3441
20e80     FF FF 7F FF 
20e84     FF 25 0E F2 | 	cmp	local04, ##-1 wz
20e88     12 FB 01 A6 |  if_e	mov	result1, local04
20e8c     AC 01 90 AD |  if_e	jmp	#LR__3441
20e90     18 22 06 F1 | 	add	local03, #24
20e94     11 27 02 FB | 	rdlong	local05, local03
20e98     18 22 86 F1 | 	sub	local03, #24
20e9c     13 25 12 F2 | 	cmp	local04, local05 wc
20ea0     12 FB 01 C6 |  if_b	mov	result1, local04
20ea4     94 01 90 CD |  if_b	jmp	#LR__3441
20ea8     10 25 02 F6 | 	mov	local04, local02
20eac                 | LR__3431
20eac     14 22 06 F1 | 	add	local03, #20
20eb0     11 27 0A FB | 	rdlong	local05, local03 wz
20eb4     14 22 86 F1 | 	sub	local03, #20
20eb8     00 FA 05 A6 |  if_e	mov	result1, #0
20ebc     7C 01 90 AD |  if_e	jmp	#LR__3441
20ec0     00 28 06 F6 | 	mov	local06, #0
20ec4     10 25 0A F2 | 	cmp	local04, local02 wz
20ec8     74 00 90 5D |  if_ne	jmp	#LR__3434
20ecc     12 29 02 F6 | 	mov	local06, local04
20ed0     01 28 06 F1 | 	add	local06, #1
20ed4     18 22 06 F1 | 	add	local03, #24
20ed8     11 27 02 FB | 	rdlong	local05, local03
20edc     18 22 86 F1 | 	sub	local03, #24
20ee0     13 29 12 F2 | 	cmp	local06, local05 wc
20ee4     02 28 06 36 |  if_ae	mov	local06, #2
20ee8     14 15 02 F6 | 	mov	arg02, local06
20eec     0F 13 02 F6 | 	mov	arg01, local01
20ef0     68 FA BF FD | 	call	#_fatfs_cc_get_fat
20ef4     FD 26 02 F6 | 	mov	local05, result1
20ef8     01 26 0E F2 | 	cmp	local05, #1 wz
20efc     FF FF 7F 5F 
20f00     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
20f04     13 FB 01 A6 |  if_e	mov	result1, local05
20f08     30 01 90 AD |  if_e	jmp	#LR__3441
20f0c     00 26 0E F2 | 	cmp	local05, #0 wz
20f10     2C 00 90 AD |  if_e	jmp	#LR__3433
20f14     10 22 06 F1 | 	add	local03, #16
20f18     11 2B 02 FB | 	rdlong	local07, local03
20f1c     10 22 86 F1 | 	sub	local03, #16
20f20     02 2A 16 F2 | 	cmp	local07, #2 wc
20f24     14 00 90 CD |  if_b	jmp	#LR__3432
20f28     18 22 06 F1 | 	add	local03, #24
20f2c     11 27 02 FB | 	rdlong	local05, local03
20f30     18 22 86 F1 | 	sub	local03, #24
20f34     13 2B 12 F2 | 	cmp	local07, local05 wc
20f38     15 25 02 C6 |  if_b	mov	local04, local07
20f3c                 | LR__3432
20f3c     00 28 06 F6 | 	mov	local06, #0
20f40                 | LR__3433
20f40                 | LR__3434
20f40     00 28 0E F2 | 	cmp	local06, #0 wz
20f44     60 00 90 5D |  if_ne	jmp	#LR__3437
20f48     12 29 02 F6 | 	mov	local06, local04
20f4c                 | ' 			ncl = scl;
20f4c                 | ' 			for (;;) {
20f4c                 | LR__3435
20f4c     01 28 06 F1 | 	add	local06, #1
20f50     18 22 06 F1 | 	add	local03, #24
20f54     11 27 02 FB | 	rdlong	local05, local03
20f58     18 22 86 F1 | 	sub	local03, #24
20f5c     13 29 12 F2 | 	cmp	local06, local05 wc
20f60     02 28 06 36 |  if_ae	mov	local06, #2
20f64     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
20f68     00 FA 05 16 |  if_a	mov	result1, #0
20f6c     CC 00 90 1D |  if_a	jmp	#LR__3441
20f70     14 15 02 F6 | 	mov	arg02, local06
20f74     0F 13 02 F6 | 	mov	arg01, local01
20f78     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
20f7c     FD 2A 0A F6 | 	mov	local07, result1 wz
20f80     24 00 90 AD |  if_e	jmp	#LR__3436
20f84     01 2A 0E F2 | 	cmp	local07, #1 wz
20f88     FF FF 7F 5F 
20f8c     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
20f90     15 FB 01 A6 |  if_e	mov	result1, local07
20f94     A4 00 90 AD |  if_e	jmp	#LR__3441
20f98     12 29 0A F2 | 	cmp	local06, local04 wz
20f9c     00 FA 05 A6 |  if_e	mov	result1, #0
20fa0     98 00 90 AD |  if_e	jmp	#LR__3441
20fa4     A4 FF 9F FD | 	jmp	#LR__3435
20fa8                 | LR__3436
20fa8                 | LR__3437
20fa8     11 13 02 F6 | 	mov	arg01, local03
20fac     14 15 02 F6 | 	mov	arg02, local06
20fb0     01 16 66 F6 | 	neg	arg03, #1
20fb4     48 FB BF FD | 	call	#_fatfs_cc_put_fat
20fb8     FD 2C 0A F6 | 	mov	local08, result1 wz
20fbc     1C 00 90 5D |  if_ne	jmp	#LR__3438
20fc0     00 20 0E F2 | 	cmp	local02, #0 wz
20fc4     14 00 90 AD |  if_e	jmp	#LR__3438
20fc8     11 13 02 F6 | 	mov	arg01, local03
20fcc     10 15 02 F6 | 	mov	arg02, local02
20fd0     14 17 02 F6 | 	mov	arg03, local06
20fd4     28 FB BF FD | 	call	#_fatfs_cc_put_fat
20fd8     FD 2C 02 F6 | 	mov	local08, result1
20fdc                 | LR__3438
20fdc     00 2C 0E F2 | 	cmp	local08, #0 wz
20fe0     4C 00 90 5D |  if_ne	jmp	#LR__3439
20fe4     10 22 06 F1 | 	add	local03, #16
20fe8     11 29 62 FC | 	wrlong	local06, local03
20fec     08 22 06 F1 | 	add	local03, #8
20ff0     11 27 02 FB | 	rdlong	local05, local03
20ff4     02 26 86 F1 | 	sub	local05, #2
20ff8     04 22 86 F1 | 	sub	local03, #4
20ffc     11 2F 02 FB | 	rdlong	local09, local03
21000     14 22 86 F1 | 	sub	local03, #20
21004     13 2F 1A F2 | 	cmp	local09, local05 wcz
21008     14 22 06 E1 |  if_be	add	local03, #20
2100c     11 2F 02 EB |  if_be	rdlong	local09, local03
21010     01 2E 86 E1 |  if_be	sub	local09, #1
21014     11 2F 62 EC |  if_be	wrlong	local09, local03
21018     14 22 86 E1 |  if_be	sub	local03, #20
2101c     04 22 06 F1 | 	add	local03, #4
21020     11 27 C2 FA | 	rdbyte	local05, local03
21024     01 26 46 F5 | 	or	local05, #1
21028     11 27 42 FC | 	wrbyte	local05, local03
2102c     08 00 90 FD | 	jmp	#LR__3440
21030                 | LR__3439
21030     01 2C 0E F2 | 	cmp	local08, #1 wz
21034     01 28 C6 F6 | 	negz	local06, #1
21038                 | LR__3440
21038                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
21038                 | ' 	}
21038                 | ' 
21038                 | ' 	return ncl;
21038     14 FB 01 F6 | 	mov	result1, local06
2103c                 | LR__3441
2103c     A7 F0 03 F6 | 	mov	ptra, fp
21040     B2 00 A0 FD | 	call	#popregs_
21044                 | _fatfs_cc_create_chain_ret
21044     2D 00 64 FD | 	ret
21048                 | 
21048                 | _fatfs_cc_dir_clear
21048     06 4A 05 F6 | 	mov	COUNT_, #6
2104c     A8 00 A0 FD | 	call	#pushregs_
21050     09 1F 02 F6 | 	mov	local01, arg01
21054     0A 21 02 F6 | 	mov	local02, arg02
21058     0F 13 02 F6 | 	mov	arg01, local01
2105c     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
21060     00 FA 0D F2 | 	cmp	result1, #0 wz
21064     01 FA 05 56 |  if_ne	mov	result1, #1
21068     90 00 90 5D |  if_ne	jmp	#LR__3452
2106c     0F 13 02 F6 | 	mov	arg01, local01
21070     10 15 02 F6 | 	mov	arg02, local02
21074     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
21078     FD 22 02 F6 | 	mov	local03, result1
2107c     30 1E 06 F1 | 	add	local01, #48
21080     0F 23 62 FC | 	wrlong	local03, local01
21084     04 1E 06 F1 | 	add	local01, #4
21088     0F 13 02 F6 | 	mov	arg01, local01
2108c     00 14 06 F6 | 	mov	arg02, #0
21090     09 16 C6 F9 | 	decod	arg03, #9
21094     98 00 A0 FD | 	call	#\builtin_bytefill_
21098     0F 25 02 F6 | 	mov	local04, local01
2109c                 | ' #line 1667 "ff.c"
2109c                 | ' 	{
2109c                 | ' 		ibuf = fs->win; szb = 1;
2109c                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2109c     00 26 06 F6 | 	mov	local05, #0
210a0     34 1E 86 F1 | 	sub	local01, #52
210a4                 | LR__3450
210a4     0A 1E 06 F1 | 	add	local01, #10
210a8     0F 29 E2 FA | 	rdword	local06, local01
210ac     0A 1E 86 F1 | 	sub	local01, #10
210b0     14 27 12 F2 | 	cmp	local05, local06 wc
210b4     2C 00 90 3D |  if_ae	jmp	#LR__3451
210b8     01 1E 06 F1 | 	add	local01, #1
210bc     0F 13 C2 FA | 	rdbyte	arg01, local01
210c0     01 1E 86 F1 | 	sub	local01, #1
210c4     12 15 02 F6 | 	mov	arg02, local04
210c8     11 17 02 F6 | 	mov	arg03, local03
210cc     13 17 02 F1 | 	add	arg03, local05
210d0     01 18 06 F6 | 	mov	arg04, #1
210d4     9C EF BF FD | 	call	#_fatfs_cc_disk_write
210d8     00 FA 0D F2 | 	cmp	result1, #0 wz
210dc     01 26 06 A1 |  if_e	add	local05, #1
210e0     C0 FF 9F AD |  if_e	jmp	#LR__3450
210e4                 | LR__3451
210e4                 | ' 	}
210e4                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
210e4     0A 1E 06 F1 | 	add	local01, #10
210e8     0F 25 E2 FA | 	rdword	local04, local01
210ec     12 27 0A F2 | 	cmp	local05, local04 wz
210f0     00 28 06 A6 |  if_e	mov	local06, #0
210f4     01 28 06 56 |  if_ne	mov	local06, #1
210f8     14 FB 01 F6 | 	mov	result1, local06
210fc                 | LR__3452
210fc     A7 F0 03 F6 | 	mov	ptra, fp
21100     B2 00 A0 FD | 	call	#popregs_
21104                 | _fatfs_cc_dir_clear_ret
21104     2D 00 64 FD | 	ret
21108                 | 
21108                 | _fatfs_cc_dir_sdi
21108     06 4A 05 F6 | 	mov	COUNT_, #6
2110c     A8 00 A0 FD | 	call	#pushregs_
21110     09 1F 02 F6 | 	mov	local01, arg01
21114     0A 21 02 F6 | 	mov	local02, arg02
21118     0F 23 02 FB | 	rdlong	local03, local01
2111c     00 10 00 FF 
21120     00 20 16 F2 | 	cmp	local02, ##2097152 wc
21124     1F 20 CE C7 |  if_b	test	local02, #31 wz
21128                 | ' 		return FR_INT_ERR;
21128     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2112c     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3466
21130     10 1E 06 F1 | 	add	local01, #16
21134     0F 21 62 FC | 	wrlong	local02, local01
21138     08 1E 86 F1 | 	sub	local01, #8
2113c     0F 25 0A FB | 	rdlong	local04, local01 wz
21140     08 1E 86 F1 | 	sub	local01, #8
21144     11 27 C2 AA |  if_e	rdbyte	local05, local03
21148     03 26 16 A2 |  if_e	cmp	local05, #3 wc
2114c     28 22 06 21 |  if_nc_and_z	add	local03, #40
21150     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
21154     28 22 86 21 |  if_nc_and_z	sub	local03, #40
21158     00 24 0E F2 | 	cmp	local04, #0 wz
2115c     3C 00 90 5D |  if_ne	jmp	#LR__3460
21160     10 27 02 F6 | 	mov	local05, local02
21164     05 26 46 F0 | 	shr	local05, #5
21168     08 22 06 F1 | 	add	local03, #8
2116c     11 15 E2 FA | 	rdword	arg02, local03
21170     08 22 86 F1 | 	sub	local03, #8
21174     0A 27 12 F2 | 	cmp	local05, arg02 wc
21178     02 FA 05 36 |  if_ae	mov	result1, #2
2117c     E4 00 90 3D |  if_ae	jmp	#LR__3466
21180     28 22 06 F1 | 	add	local03, #40
21184     11 27 02 FB | 	rdlong	local05, local03
21188     28 22 86 F1 | 	sub	local03, #40
2118c     18 1E 06 F1 | 	add	local01, #24
21190     0F 27 62 FC | 	wrlong	local05, local01
21194     18 1E 86 F1 | 	sub	local01, #24
21198     7C 00 90 FD | 	jmp	#LR__3465
2119c                 | LR__3460
2119c     0A 22 06 F1 | 	add	local03, #10
211a0     11 29 E2 FA | 	rdword	local06, local03
211a4     0A 22 86 F1 | 	sub	local03, #10
211a8     09 28 66 F0 | 	shl	local06, #9
211ac                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
211ac                 | ' 		while (ofs >= csz) {
211ac                 | LR__3461
211ac     14 21 12 F2 | 	cmp	local02, local06 wc
211b0     4C 00 90 CD |  if_b	jmp	#LR__3464
211b4     0F 13 02 F6 | 	mov	arg01, local01
211b8     12 15 02 F6 | 	mov	arg02, local04
211bc     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
211c0     FD 24 02 F6 | 	mov	local04, result1
211c4     FF FF 7F FF 
211c8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
211cc     01 FA 05 A6 |  if_e	mov	result1, #1
211d0     90 00 90 AD |  if_e	jmp	#LR__3466
211d4     02 24 16 F2 | 	cmp	local04, #2 wc
211d8     14 00 90 CD |  if_b	jmp	#LR__3462
211dc     18 22 06 F1 | 	add	local03, #24
211e0     11 27 02 FB | 	rdlong	local05, local03
211e4     18 22 86 F1 | 	sub	local03, #24
211e8     13 25 12 F2 | 	cmp	local04, local05 wc
211ec     08 00 90 CD |  if_b	jmp	#LR__3463
211f0                 | LR__3462
211f0     02 FA 05 F6 | 	mov	result1, #2
211f4     6C 00 90 FD | 	jmp	#LR__3466
211f8                 | LR__3463
211f8     14 21 82 F1 | 	sub	local02, local06
211fc     AC FF 9F FD | 	jmp	#LR__3461
21200                 | LR__3464
21200     11 13 02 F6 | 	mov	arg01, local03
21204     12 15 02 F6 | 	mov	arg02, local04
21208     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2120c     18 1E 06 F1 | 	add	local01, #24
21210     0F FB 61 FC | 	wrlong	result1, local01
21214     18 1E 86 F1 | 	sub	local01, #24
21218                 | LR__3465
21218     14 1E 06 F1 | 	add	local01, #20
2121c     0F 25 62 FC | 	wrlong	local04, local01
21220     04 1E 06 F1 | 	add	local01, #4
21224     0F 27 0A FB | 	rdlong	local05, local01 wz
21228     18 1E 86 F1 | 	sub	local01, #24
2122c     02 FA 05 A6 |  if_e	mov	result1, #2
21230     30 00 90 AD |  if_e	jmp	#LR__3466
21234     10 29 02 F6 | 	mov	local06, local02
21238     09 28 46 F0 | 	shr	local06, #9
2123c     18 1E 06 F1 | 	add	local01, #24
21240     0F 27 02 FB | 	rdlong	local05, local01
21244     14 27 02 F1 | 	add	local05, local06
21248     0F 27 62 FC | 	wrlong	local05, local01
2124c     34 22 06 F1 | 	add	local03, #52
21250     FF 21 06 F5 | 	and	local02, #511
21254     10 23 02 F1 | 	add	local03, local02
21258     04 1E 06 F1 | 	add	local01, #4
2125c     0F 23 62 FC | 	wrlong	local03, local01
21260                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
21260                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
21260                 | ' 
21260                 | ' 	return FR_OK;
21260     00 FA 05 F6 | 	mov	result1, #0
21264                 | LR__3466
21264     A7 F0 03 F6 | 	mov	ptra, fp
21268     B2 00 A0 FD | 	call	#popregs_
2126c                 | _fatfs_cc_dir_sdi_ret
2126c     2D 00 64 FD | 	ret
21270                 | 
21270                 | _fatfs_cc_dir_next
21270     05 4A 05 F6 | 	mov	COUNT_, #5
21274     A8 00 A0 FD | 	call	#pushregs_
21278     09 1F 02 F6 | 	mov	local01, arg01
2127c     0A 21 02 F6 | 	mov	local02, arg02
21280     0F 23 02 FB | 	rdlong	local03, local01
21284     10 1E 06 F1 | 	add	local01, #16
21288     0F 25 02 FB | 	rdlong	local04, local01
2128c     10 1E 86 F1 | 	sub	local01, #16
21290     20 24 06 F1 | 	add	local04, #32
21294     00 10 00 FF 
21298     00 24 16 F2 | 	cmp	local04, ##2097152 wc
2129c     18 1E 06 31 |  if_ae	add	local01, #24
212a0     0F 01 68 3C |  if_ae	wrlong	#0, local01
212a4     18 1E 86 31 |  if_ae	sub	local01, #24
212a8     18 1E 06 F1 | 	add	local01, #24
212ac     0F 15 0A FB | 	rdlong	arg02, local01 wz
212b0     18 1E 86 F1 | 	sub	local01, #24
212b4     04 FA 05 A6 |  if_e	mov	result1, #4
212b8     64 01 90 AD |  if_e	jmp	#LR__3475
212bc     FF 25 CE F7 | 	test	local04, #511 wz
212c0     3C 01 90 5D |  if_ne	jmp	#LR__3474
212c4     18 1E 06 F1 | 	add	local01, #24
212c8     0F 15 02 FB | 	rdlong	arg02, local01
212cc     01 14 06 F1 | 	add	arg02, #1
212d0     0F 15 62 FC | 	wrlong	arg02, local01
212d4     04 1E 86 F1 | 	sub	local01, #4
212d8     0F 15 0A FB | 	rdlong	arg02, local01 wz
212dc     14 1E 86 F1 | 	sub	local01, #20
212e0     2C 00 90 5D |  if_ne	jmp	#LR__3470
212e4     12 15 02 F6 | 	mov	arg02, local04
212e8     05 14 46 F0 | 	shr	arg02, #5
212ec     08 22 06 F1 | 	add	local03, #8
212f0     11 21 E2 FA | 	rdword	local02, local03
212f4     08 22 86 F1 | 	sub	local03, #8
212f8     10 15 12 F2 | 	cmp	arg02, local02 wc
212fc     18 1E 06 31 |  if_ae	add	local01, #24
21300     0F 01 68 3C |  if_ae	wrlong	#0, local01
21304                 | ' 				dp->sect = 0; return FR_NO_FILE;
21304     04 FA 05 36 |  if_ae	mov	result1, #4
21308     14 01 90 3D |  if_ae	jmp	#LR__3475
2130c     F0 00 90 FD | 	jmp	#LR__3473
21310                 | LR__3470
21310     12 13 02 F6 | 	mov	arg01, local04
21314     09 12 46 F0 | 	shr	arg01, #9
21318     0A 22 06 F1 | 	add	local03, #10
2131c     11 15 E2 FA | 	rdword	arg02, local03
21320     0A 22 86 F1 | 	sub	local03, #10
21324     01 14 86 F1 | 	sub	arg02, #1
21328     0A 13 CA F7 | 	test	arg01, arg02 wz
2132c     D0 00 90 5D |  if_ne	jmp	#LR__3472
21330     0F 13 02 F6 | 	mov	arg01, local01
21334     14 1E 06 F1 | 	add	local01, #20
21338     0F 15 02 FB | 	rdlong	arg02, local01
2133c     14 1E 86 F1 | 	sub	local01, #20
21340     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
21344     FD 26 02 F6 | 	mov	local05, result1
21348     02 26 16 F2 | 	cmp	local05, #2 wc
2134c     02 FA 05 C6 |  if_b	mov	result1, #2
21350     CC 00 90 CD |  if_b	jmp	#LR__3475
21354     FF FF 7F FF 
21358     FF 27 0E F2 | 	cmp	local05, ##-1 wz
2135c     01 FA 05 A6 |  if_e	mov	result1, #1
21360     BC 00 90 AD |  if_e	jmp	#LR__3475
21364     18 22 06 F1 | 	add	local03, #24
21368     11 15 02 FB | 	rdlong	arg02, local03
2136c     18 22 86 F1 | 	sub	local03, #24
21370     0A 27 12 F2 | 	cmp	local05, arg02 wc
21374     68 00 90 CD |  if_b	jmp	#LR__3471
21378     00 20 0E F2 | 	cmp	local02, #0 wz
2137c     18 1E 06 A1 |  if_e	add	local01, #24
21380     0F 01 68 AC |  if_e	wrlong	#0, local01
21384                 | ' 						dp->sect = 0; return FR_NO_FILE;
21384     04 FA 05 A6 |  if_e	mov	result1, #4
21388     94 00 90 AD |  if_e	jmp	#LR__3475
2138c     0F 13 02 F6 | 	mov	arg01, local01
21390     14 1E 06 F1 | 	add	local01, #20
21394     0F 15 02 FB | 	rdlong	arg02, local01
21398     14 1E 86 F1 | 	sub	local01, #20
2139c     84 FA BF FD | 	call	#_fatfs_cc_create_chain
213a0     FD 26 0A F6 | 	mov	local05, result1 wz
213a4     07 FA 05 A6 |  if_e	mov	result1, #7
213a8     74 00 90 AD |  if_e	jmp	#LR__3475
213ac     01 26 0E F2 | 	cmp	local05, #1 wz
213b0     02 FA 05 A6 |  if_e	mov	result1, #2
213b4     68 00 90 AD |  if_e	jmp	#LR__3475
213b8     FF FF 7F FF 
213bc     FF 27 0E F2 | 	cmp	local05, ##-1 wz
213c0     01 FA 05 A6 |  if_e	mov	result1, #1
213c4     58 00 90 AD |  if_e	jmp	#LR__3475
213c8     13 15 02 F6 | 	mov	arg02, local05
213cc     11 13 02 F6 | 	mov	arg01, local03
213d0     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
213d4     00 FA 0D F2 | 	cmp	result1, #0 wz
213d8     01 FA 05 56 |  if_ne	mov	result1, #1
213dc     40 00 90 5D |  if_ne	jmp	#LR__3475
213e0                 | LR__3471
213e0     14 1E 06 F1 | 	add	local01, #20
213e4     0F 27 62 FC | 	wrlong	local05, local01
213e8     11 13 02 F6 | 	mov	arg01, local03
213ec     13 15 02 F6 | 	mov	arg02, local05
213f0     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
213f4     04 1E 06 F1 | 	add	local01, #4
213f8     0F FB 61 FC | 	wrlong	result1, local01
213fc     18 1E 86 F1 | 	sub	local01, #24
21400                 | LR__3472
21400                 | LR__3473
21400                 | LR__3474
21400     10 1E 06 F1 | 	add	local01, #16
21404     0F 25 62 FC | 	wrlong	local04, local01
21408     34 22 06 F1 | 	add	local03, #52
2140c     FF 25 06 F5 | 	and	local04, #511
21410     12 23 02 F1 | 	add	local03, local04
21414     0C 1E 06 F1 | 	add	local01, #12
21418     0F 23 62 FC | 	wrlong	local03, local01
2141c                 | ' #line 1771 "ff.c"
2141c                 | ' 				}
2141c                 | ' 				dp->clust = clst;
2141c                 | ' 				dp->sect = clst2sect(fs, clst);
2141c                 | ' 			}
2141c                 | ' 		}
2141c                 | ' 	}
2141c                 | ' 	dp->dptr = ofs;
2141c                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2141c                 | ' 
2141c                 | ' 	return FR_OK;
2141c     00 FA 05 F6 | 	mov	result1, #0
21420                 | LR__3475
21420     A7 F0 03 F6 | 	mov	ptra, fp
21424     B2 00 A0 FD | 	call	#popregs_
21428                 | _fatfs_cc_dir_next_ret
21428     2D 00 64 FD | 	ret
2142c                 | 
2142c                 | _fatfs_cc_dir_alloc
2142c     08 4A 05 F6 | 	mov	COUNT_, #8
21430     A8 00 A0 FD | 	call	#pushregs_
21434     09 1F 02 F6 | 	mov	local01, arg01
21438     0A 21 02 F6 | 	mov	local02, arg02
2143c     0F 23 02 FB | 	rdlong	local03, local01
21440     0F 13 02 F6 | 	mov	arg01, local01
21444     00 14 06 F6 | 	mov	arg02, #0
21448     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2144c     FD 24 0A F6 | 	mov	local04, result1 wz
21450     70 00 90 5D |  if_ne	jmp	#LR__3484
21454     00 26 06 F6 | 	mov	local05, #0
21458                 | ' 		n = 0;
21458                 | ' 		do {
21458                 | LR__3480
21458     18 1E 06 F1 | 	add	local01, #24
2145c     0F 15 02 FB | 	rdlong	arg02, local01
21460     18 1E 86 F1 | 	sub	local01, #24
21464     11 13 02 F6 | 	mov	arg01, local03
21468     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2146c     FD 24 0A F6 | 	mov	local04, result1 wz
21470     50 00 90 5D |  if_ne	jmp	#LR__3483
21474     1C 1E 06 F1 | 	add	local01, #28
21478     0F 29 02 FB | 	rdlong	local06, local01
2147c     1C 1E 86 F1 | 	sub	local01, #28
21480     14 29 C2 FA | 	rdbyte	local06, local06
21484     E5 28 0E F2 | 	cmp	local06, #229 wz
21488     1C 1E 06 51 |  if_ne	add	local01, #28
2148c     0F 2B 02 5B |  if_ne	rdlong	local07, local01
21490     1C 1E 86 51 |  if_ne	sub	local01, #28
21494     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
21498     10 00 90 5D |  if_ne	jmp	#LR__3481
2149c     01 26 06 F1 | 	add	local05, #1
214a0     10 27 0A F2 | 	cmp	local05, local02 wz
214a4     1C 00 90 AD |  if_e	jmp	#LR__3483
214a8     04 00 90 FD | 	jmp	#LR__3482
214ac                 | LR__3481
214ac     00 26 06 F6 | 	mov	local05, #0
214b0                 | LR__3482
214b0     0F 13 02 F6 | 	mov	arg01, local01
214b4     01 14 06 F6 | 	mov	arg02, #1
214b8     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
214bc     FD 24 0A F6 | 	mov	local04, result1 wz
214c0     94 FF 9F AD |  if_e	jmp	#LR__3480
214c4                 | LR__3483
214c4                 | LR__3484
214c4     04 24 0E F2 | 	cmp	local04, #4 wz
214c8     07 24 06 A6 |  if_e	mov	local04, #7
214cc                 | ' 	return res;
214cc     12 FB 01 F6 | 	mov	result1, local04
214d0     A7 F0 03 F6 | 	mov	ptra, fp
214d4     B2 00 A0 FD | 	call	#popregs_
214d8                 | _fatfs_cc_dir_alloc_ret
214d8     2D 00 64 FD | 	ret
214dc                 | 
214dc                 | _fatfs_cc_ld_clust
214dc     09 01 02 F6 | 	mov	_var01, arg01
214e0     0A 13 02 F6 | 	mov	arg01, arg02
214e4     1A 12 06 F1 | 	add	arg01, #26
214e8                 | ' {
214e8                 | ' 
214e8                 | ' 	return *((WORD*)ptr);
214e8     09 FB E1 FA | 	rdword	result1, arg01
214ec     FD 12 32 F9 | 	getword	arg01, result1, #0
214f0     00 01 C2 FA | 	rdbyte	_var01, _var01
214f4     03 00 0E F2 | 	cmp	_var01, #3 wz
214f8     14 14 06 A1 |  if_e	add	arg02, #20
214fc                 | ' {
214fc                 | ' 
214fc                 | ' 	return *((WORD*)ptr);
214fc     0A FB E1 AA |  if_e	rdword	result1, arg02
21500     10 FA 65 A0 |  if_e	shl	result1, #16
21504     FD 12 42 A5 |  if_e	or	arg01, result1
21508                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
21508                 | ' 	}
21508                 | ' 
21508                 | ' 	return cl;
21508     09 FB 01 F6 | 	mov	result1, arg01
2150c                 | _fatfs_cc_ld_clust_ret
2150c     2D 00 64 FD | 	ret
21510                 | 
21510                 | _fatfs_cc_st_clust
21510     09 01 02 F6 | 	mov	_var01, arg01
21514     0A 13 02 F6 | 	mov	arg01, arg02
21518     1A 12 06 F1 | 	add	arg01, #26
2151c     09 17 52 FC | 	wrword	arg03, arg01
21520     00 01 C2 FA | 	rdbyte	_var01, _var01
21524     03 00 0E F2 | 	cmp	_var01, #3 wz
21528     14 14 06 A1 |  if_e	add	arg02, #20
2152c     10 16 46 A0 |  if_e	shr	arg03, #16
21530     0A 17 52 AC |  if_e	wrword	arg03, arg02
21534                 | _fatfs_cc_st_clust_ret
21534     2D 00 64 FD | 	ret
21538                 | 
21538                 | _fatfs_cc_cmp_lfn
21538     07 4A 05 F6 | 	mov	COUNT_, #7
2153c     A8 00 A0 FD | 	call	#pushregs_
21540     09 1F 02 F6 | 	mov	local01, arg01
21544     0A 13 02 F6 | 	mov	arg01, arg02
21548     1A 12 06 F1 | 	add	arg01, #26
2154c                 | ' {
2154c                 | ' 
2154c                 | ' 	return *((WORD*)ptr);
2154c     09 FB E9 FA | 	rdword	result1, arg01 wz
21550     00 FA 05 56 |  if_ne	mov	result1, #0
21554     E0 00 90 5D |  if_ne	jmp	#LR__3496
21558     0A 21 C2 FA | 	rdbyte	local02, arg02
2155c     3F 20 06 F5 | 	and	local02, #63
21560     01 20 86 F1 | 	sub	local02, #1
21564     0D 20 06 FD | 	qmul	local02, #13
21568                 | ' 
21568                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
21568                 | ' 
21568                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
21568     01 22 06 F6 | 	mov	local03, #1
2156c     00 24 06 F6 | 	mov	local04, #0
21570     18 26 62 FD | 	getqx	local05
21574                 | LR__3490
21574     0D 24 16 F2 | 	cmp	local04, #13 wc
21578     9C 00 90 3D |  if_ae	jmp	#LR__3495
2157c     0A 13 02 F6 | 	mov	arg01, arg02
21580     12 21 02 F6 | 	mov	local02, local04
21584     01 00 00 FF 
21588     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2158c     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
21590     10 21 C2 FA | 	rdbyte	local02, local02
21594     01 20 06 FA | 	mul	local02, #1
21598     10 13 02 F1 | 	add	arg01, local02
2159c     01 00 00 FF 
215a0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
215a4                 | ' {
215a4                 | ' 
215a4                 | ' 	return *((WORD*)ptr);
215a4     09 FB E1 FA | 	rdword	result1, arg01
215a8     FD 28 02 F6 | 	mov	local06, result1
215ac     11 21 02 F6 | 	mov	local02, local03
215b0     0F 20 4E F7 | 	zerox	local02, #15 wz
215b4     44 00 90 AD |  if_e	jmp	#LR__3493
215b8     00 27 16 F2 | 	cmp	local05, #256 wc
215bc     2C 00 90 3D |  if_ae	jmp	#LR__3491
215c0     14 13 32 F9 | 	getword	arg01, local06, #0
215c4     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
215c8     FD 20 02 F6 | 	mov	local02, result1
215cc     13 23 02 F6 | 	mov	local03, local05
215d0     01 22 66 F0 | 	shl	local03, #1
215d4     0F 23 02 F1 | 	add	local03, local01
215d8     11 13 E2 FA | 	rdword	arg01, local03
215dc     01 26 06 F1 | 	add	local05, #1
215e0     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
215e4     FD 20 0A F2 | 	cmp	local02, result1 wz
215e8     08 00 90 AD |  if_e	jmp	#LR__3492
215ec                 | LR__3491
215ec                 | ' 				return 0;
215ec     00 FA 05 F6 | 	mov	result1, #0
215f0     44 00 90 FD | 	jmp	#LR__3496
215f4                 | LR__3492
215f4     14 23 02 F6 | 	mov	local03, local06
215f8     14 00 90 FD | 	jmp	#LR__3494
215fc                 | LR__3493
215fc     14 29 32 F9 | 	getword	local06, local06, #0
21600     7F 00 00 FF 
21604     FF 29 0E F2 | 	cmp	local06, ##65535 wz
21608     00 FA 05 56 |  if_ne	mov	result1, #0
2160c     28 00 90 5D |  if_ne	jmp	#LR__3496
21610                 | LR__3494
21610     01 24 06 F1 | 	add	local04, #1
21614     5C FF 9F FD | 	jmp	#LR__3490
21618                 | LR__3495
21618     0A 21 C2 FA | 	rdbyte	local02, arg02
2161c     40 20 CE F7 | 	test	local02, #64 wz
21620     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
21624     01 26 66 50 |  if_ne	shl	local05, #1
21628     0F 27 02 51 |  if_ne	add	local05, local01
2162c     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
21630     00 FA 05 56 |  if_ne	mov	result1, #0
21634                 | ' 
21634                 | ' 	return 1;
21634     01 FA 05 A6 |  if_e	mov	result1, #1
21638                 | LR__3496
21638     A7 F0 03 F6 | 	mov	ptra, fp
2163c     B2 00 A0 FD | 	call	#popregs_
21640                 | _fatfs_cc_cmp_lfn_ret
21640     2D 00 64 FD | 	ret
21644                 | 
21644                 | _fatfs_cc_pick_lfn
21644     09 01 02 F6 | 	mov	_var01, arg01
21648     0A 13 02 F6 | 	mov	arg01, arg02
2164c     1A 12 06 F1 | 	add	arg01, #26
21650                 | ' {
21650                 | ' 
21650                 | ' 	return *((WORD*)ptr);
21650     09 FB E9 FA | 	rdword	result1, arg01 wz
21654     00 FA 05 56 |  if_ne	mov	result1, #0
21658     D4 00 90 5D |  if_ne	jmp	#LR__3505
2165c     0A 03 C2 FA | 	rdbyte	_var02, arg02
21660     40 02 26 F5 | 	andn	_var02, #64
21664     01 02 86 F1 | 	sub	_var02, #1
21668     0D 02 06 FD | 	qmul	_var02, #13
2166c                 | ' 
2166c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2166c                 | ' 
2166c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2166c     01 04 06 F6 | 	mov	_var03, #1
21670     00 06 06 F6 | 	mov	_var04, #0
21674     18 08 62 FD | 	getqx	_var05
21678                 | LR__3500
21678     0D 06 16 F2 | 	cmp	_var04, #13 wc
2167c     80 00 90 3D |  if_ae	jmp	#LR__3503
21680     0A 13 02 F6 | 	mov	arg01, arg02
21684     03 03 02 F6 | 	mov	_var02, _var04
21688     01 00 00 FF 
2168c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
21690     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
21694     01 03 C2 FA | 	rdbyte	_var02, _var02
21698     01 02 06 FA | 	mul	_var02, #1
2169c     01 13 02 F1 | 	add	arg01, _var02
216a0     01 00 00 FF 
216a4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
216a8                 | ' {
216a8                 | ' 
216a8                 | ' 	return *((WORD*)ptr);
216a8     09 FB E1 FA | 	rdword	result1, arg01
216ac     FD 0A 02 F6 | 	mov	_var06, result1
216b0     02 03 02 F6 | 	mov	_var02, _var03
216b4     0F 02 4E F7 | 	zerox	_var02, #15 wz
216b8     28 00 90 AD |  if_e	jmp	#LR__3501
216bc     00 09 16 F2 | 	cmp	_var05, #256 wc
216c0     00 FA 05 36 |  if_ae	mov	result1, #0
216c4     68 00 90 3D |  if_ae	jmp	#LR__3505
216c8     04 03 02 F6 | 	mov	_var02, _var05
216cc     01 02 66 F0 | 	shl	_var02, #1
216d0     00 03 02 F1 | 	add	_var02, _var01
216d4     05 05 02 F6 | 	mov	_var03, _var06
216d8     01 05 52 FC | 	wrword	_var03, _var02
216dc     01 08 06 F1 | 	add	_var05, #1
216e0     14 00 90 FD | 	jmp	#LR__3502
216e4                 | LR__3501
216e4     05 0B 32 F9 | 	getword	_var06, _var06, #0
216e8     7F 00 00 FF 
216ec     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
216f0     00 FA 05 56 |  if_ne	mov	result1, #0
216f4     38 00 90 5D |  if_ne	jmp	#LR__3505
216f8                 | LR__3502
216f8     01 06 06 F1 | 	add	_var04, #1
216fc     78 FF 9F FD | 	jmp	#LR__3500
21700                 | LR__3503
21700     0A 03 C2 FA | 	rdbyte	_var02, arg02
21704     40 02 CE F7 | 	test	_var02, #64 wz
21708     02 0D 02 56 |  if_ne	mov	_var07, _var03
2170c     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
21710     18 00 90 AD |  if_e	jmp	#LR__3504
21714     00 09 16 F2 | 	cmp	_var05, #256 wc
21718     00 FA 05 36 |  if_ae	mov	result1, #0
2171c     10 00 90 3D |  if_ae	jmp	#LR__3505
21720     01 08 66 F0 | 	shl	_var05, #1
21724     00 09 02 F1 | 	add	_var05, _var01
21728     04 01 58 FC | 	wrword	#0, _var05
2172c                 | LR__3504
2172c                 | ' 		lfnbuf[i] = 0;
2172c                 | ' 	}
2172c                 | ' 
2172c                 | ' 	return 1;
2172c     01 FA 05 F6 | 	mov	result1, #1
21730                 | LR__3505
21730                 | _fatfs_cc_pick_lfn_ret
21730     2D 00 64 FD | 	ret
21734                 | 
21734                 | _fatfs_cc_put_lfn
21734     0D 14 06 F1 | 	add	arg02, #13
21738     0A 19 42 FC | 	wrbyte	arg04, arg02
2173c     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
21740     01 18 86 F1 | 	sub	arg04, #1
21744     0D 18 06 FD | 	qmul	arg04, #13
21748     09 01 02 F6 | 	mov	_var01, arg01
2174c     02 14 86 F1 | 	sub	arg02, #2
21750     0A 1F 48 FC | 	wrbyte	#15, arg02
21754     01 14 06 F1 | 	add	arg02, #1
21758     0A 01 48 FC | 	wrbyte	#0, arg02
2175c     0C 14 86 F1 | 	sub	arg02, #12
21760     0A 13 02 F6 | 	mov	arg01, arg02
21764     1A 12 06 F1 | 	add	arg01, #26
21768     09 01 58 FC | 	wrword	#0, arg01
2176c     00 02 06 F6 | 	mov	_var02, #0
21770     00 04 06 F6 | 	mov	_var03, #0
21774                 | ' 	BYTE* dir,
21774                 | ' 	BYTE ord,
21774                 | ' 	BYTE sum
21774                 | ' )
21774                 | ' {
21774                 | ' 	UINT i, s;
21774                 | ' 	WCHAR wc;
21774                 | ' 
21774                 | ' 
21774                 | ' 	dir[ 13 ] = sum;
21774                 | ' 	dir[ 11 ] =  0x0F ;
21774                 | ' 	dir[ 12 ] = 0;
21774                 | ' 	st_word(dir +  26 , 0);
21774                 | ' 
21774                 | ' 	i = (ord - 1) * 13;
21774                 | ' 	s = wc = 0;
21774                 | ' 	do {
21774     01 00 00 FF 
21778     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2177c     18 06 62 FD | 	getqx	_var04
21780     97 2A 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
21784                 | LR__3510
21784     01 19 32 F9 | 	getword	arg04, _var02, #0
21788     7F 00 00 FF 
2178c     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
21790     03 13 02 56 |  if_ne	mov	arg01, _var04
21794     01 06 06 51 |  if_ne	add	_var04, #1
21798     01 12 66 50 |  if_ne	shl	arg01, #1
2179c     00 13 02 51 |  if_ne	add	arg01, _var01
217a0     09 03 E2 5A |  if_ne	rdword	_var02, arg01
217a4     0A 13 02 F6 | 	mov	arg01, arg02
217a8     02 19 02 F6 | 	mov	arg04, _var03
217ac     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
217b0     0C 19 C2 FA | 	rdbyte	arg04, arg04
217b4     01 18 06 FA | 	mul	arg04, #1
217b8     0C 13 02 F1 | 	add	arg01, arg04
217bc     09 03 52 FC | 	wrword	_var02, arg01
217c0     01 19 02 F6 | 	mov	arg04, _var02
217c4     0F 18 4E F7 | 	zerox	arg04, #15 wz
217c8     0F 02 CE A9 |  if_e	bmask	_var02, #15
217cc     01 04 06 F1 | 	add	_var03, #1
217d0     0D 04 16 F2 | 	cmp	_var03, #13 wc
217d4     AC FF 9F CD |  if_b	jmp	#LR__3510
217d8                 | LR__3511
217d8     01 00 00 FF 
217dc     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
217e0     01 03 32 F9 | 	getword	_var02, _var02, #0
217e4     7F 00 00 FF 
217e8     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
217ec     01 06 66 50 |  if_ne	shl	_var04, #1
217f0     00 07 02 51 |  if_ne	add	_var04, _var01
217f4     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
217f8     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
217fc     40 16 46 A5 |  if_e	or	arg03, #64
21800     0A 17 42 FC | 	wrbyte	arg03, arg02
21804                 | _fatfs_cc_put_lfn_ret
21804     2D 00 64 FD | 	ret
21808                 | 
21808                 | _fatfs_cc_gen_numname
21808     08 4A 05 F6 | 	mov	COUNT_, #8
2180c     A8 00 A0 FD | 	call	#pushregs_
21810     2C F0 07 F1 | 	add	ptra, #44
21814     09 1F 02 F6 | 	mov	local01, arg01
21818     0A 21 02 F6 | 	mov	local02, arg02
2181c     0B 23 02 F6 | 	mov	local03, arg03
21820     0C 25 02 F6 | 	mov	local04, arg04
21824     0F 13 02 F6 | 	mov	arg01, local01
21828     10 15 02 F6 | 	mov	arg02, local02
2182c     0B 16 06 F6 | 	mov	arg03, #11
21830     88 78 BF FD | 	call	#__system____builtin_memmove
21834     06 24 16 F2 | 	cmp	local04, #6 wc
21838     48 00 90 CD |  if_b	jmp	#LR__3525
2183c     12 27 02 F6 | 	mov	local05, local04
21840     97 1E 48 FB | 	callpa	#(@LR__3523-@LR__3520)>>2,fcache_load_ptr_
21844                 | ' 		sreg = seq;
21844                 | ' 		while (*lfn) {
21844                 | LR__3520
21844     11 29 EA FA | 	rdword	local06, local03 wz
21848     34 00 90 AD |  if_e	jmp	#LR__3524
2184c     11 2B E2 FA | 	rdword	local07, local03
21850                 | ' 			wc = *lfn++;
21850                 | ' 			for (i = 0; i < 16; i++) {
21850     02 22 06 F1 | 	add	local03, #2
21854     10 12 DC FC | 	rep	@LR__3522, #16
21858                 | LR__3521
21858     01 26 66 F0 | 	shl	local05, #1
2185c     15 29 32 F9 | 	getword	local06, local07, #0
21860     01 28 06 F5 | 	and	local06, #1
21864     14 27 02 F1 | 	add	local05, local06
21868     15 2B 32 F9 | 	getword	local07, local07, #0
2186c     01 2A 46 F0 | 	shr	local07, #1
21870     10 26 2E F4 | 	testbn	local05, #16 wz
21874     88 00 00 5F 
21878     21 26 66 55 |  if_ne	xor	local05, ##69665
2187c                 | LR__3522
2187c     C4 FF 9F FD | 	jmp	#LR__3520
21880                 | LR__3523
21880                 | LR__3524
21880     13 25 02 F6 | 	mov	local04, local05
21884                 | LR__3525
21884     07 2A 06 F6 | 	mov	local07, #7
21888                 | ' 			}
21888                 | ' 		}
21888                 | ' 		seq = (UINT)sreg;
21888                 | ' 	}
21888                 | ' 
21888                 | ' 
21888                 | ' 	i = 7;
21888                 | ' 	do {
21888     10 4E 05 F1 | 	add	fp, #16
2188c     97 1A 48 FB | 	callpa	#(@LR__3527-@LR__3526)>>2,fcache_load_ptr_
21890                 | LR__3526
21890     12 27 42 F8 | 	getnib	local05, local04, #0
21894     30 26 06 F1 | 	add	local05, #48
21898     04 24 46 F0 | 	shr	local04, #4
2189c     13 29 E2 F8 | 	getbyte	local06, local05, #0
218a0     3A 28 16 F2 | 	cmp	local06, #58 wc
218a4     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
218a8     07 26 06 31 |  if_ae	add	local05, #7
218ac     15 29 02 F6 | 	mov	local06, local07
218b0     01 2A 8E F1 | 	sub	local07, #1 wz
218b4     A7 28 02 F1 | 	add	local06, fp
218b8     14 27 42 FC | 	wrbyte	local05, local06
218bc     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
218c0     CC FF 9F 5D |  if_ne	jmp	#LR__3526
218c4                 | LR__3527
218c4     15 29 02 F6 | 	mov	local06, local07
218c8     A7 28 02 F1 | 	add	local06, fp
218cc     14 FD 48 FC | 	wrbyte	#126, local06
218d0                 | ' 	ns[i] = '~';
218d0                 | ' 
218d0                 | ' 
218d0                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
218d0     00 26 06 F6 | 	mov	local05, #0
218d4     10 4E 85 F1 | 	sub	fp, #16
218d8     97 2A 48 FB | 	callpa	#(@LR__3530-@LR__3528)>>2,fcache_load_ptr_
218dc                 | LR__3528
218dc     15 27 12 F2 | 	cmp	local05, local07 wc
218e0     4C 00 90 3D |  if_ae	jmp	#LR__3531
218e4     13 29 02 F6 | 	mov	local06, local05
218e8     0F 29 02 F1 | 	add	local06, local01
218ec     14 29 C2 FA | 	rdbyte	local06, local06
218f0     20 28 0E F2 | 	cmp	local06, #32 wz
218f4     38 00 90 AD |  if_e	jmp	#LR__3531
218f8     13 13 02 F6 | 	mov	arg01, local05
218fc     0F 13 02 F1 | 	add	arg01, local01
21900     09 13 CA FA | 	rdbyte	arg01, arg01 wz
21904     00 FA 05 56 |  if_ne	mov	result1, #0
21908                 | ' 
21908                 | ' 	return 0;
21908     00 FA 05 A6 |  if_e	mov	result1, #0
2190c     00 FA 0D F2 | 	cmp	result1, #0 wz
21910     14 00 90 AD |  if_e	jmp	#LR__3529
21914     15 29 02 F6 | 	mov	local06, local07
21918     01 28 86 F1 | 	sub	local06, #1
2191c     14 27 0A F2 | 	cmp	local05, local06 wz
21920     0C 00 90 AD |  if_e	jmp	#LR__3531
21924     01 26 06 F1 | 	add	local05, #1
21928                 | LR__3529
21928     01 26 06 F1 | 	add	local05, #1
2192c     AC FF 9F FD | 	jmp	#LR__3528
21930                 | LR__3530
21930                 | LR__3531
21930     97 20 48 FB | 	callpa	#(@LR__3535-@LR__3532)>>2,fcache_load_ptr_
21934                 | ' 			j++;
21934                 | ' 		}
21934                 | ' 	}
21934                 | ' 	do {
21934                 | LR__3532
21934     13 29 02 F6 | 	mov	local06, local05
21938     0F 29 02 F1 | 	add	local06, local01
2193c     08 2A 16 F2 | 	cmp	local07, #8 wc
21940     01 26 06 F1 | 	add	local05, #1
21944     1C 00 90 3D |  if_ae	jmp	#LR__3533
21948     15 25 02 F6 | 	mov	local04, local07
2194c     10 4E 05 F1 | 	add	fp, #16
21950     A7 24 02 F1 | 	add	local04, fp
21954     12 2D C2 FA | 	rdbyte	local08, local04
21958     01 2A 06 F1 | 	add	local07, #1
2195c     10 4E 85 F1 | 	sub	fp, #16
21960     04 00 90 FD | 	jmp	#LR__3534
21964                 | LR__3533
21964     20 2C 06 F6 | 	mov	local08, #32
21968                 | LR__3534
21968     14 2D 42 FC | 	wrbyte	local08, local06
2196c     08 26 16 F2 | 	cmp	local05, #8 wc
21970     C0 FF 9F CD |  if_b	jmp	#LR__3532
21974                 | LR__3535
21974     A7 F0 03 F6 | 	mov	ptra, fp
21978     B2 00 A0 FD | 	call	#popregs_
2197c                 | _fatfs_cc_gen_numname_ret
2197c     2D 00 64 FD | 	ret
21980                 | 
21980                 | _fatfs_cc_sum_sfn
21980     00 00 06 F6 | 	mov	_var01, #0
21984                 | ' )
21984                 | ' {
21984                 | ' 	BYTE sum = 0;
21984                 | ' 	UINT n = 11;
21984                 | ' 
21984                 | ' 	do {
21984     97 12 48 FB | 	callpa	#(@LR__3542-@LR__3540)>>2,fcache_load_ptr_
21988                 | LR__3540
21988     0B 10 DC FC | 	rep	@LR__3543, #11
2198c                 | LR__3541
2198c     00 FB E1 F8 | 	getbyte	result1, _var01, #0
21990     01 FA 45 F0 | 	shr	result1, #1
21994     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
21998     07 00 66 F0 | 	shl	_var01, #7
2199c     00 FB 01 F1 | 	add	result1, _var01
219a0     09 01 C2 FA | 	rdbyte	_var01, arg01
219a4     FD 00 02 F1 | 	add	_var01, result1
219a8     01 12 06 F1 | 	add	arg01, #1
219ac                 | LR__3542
219ac                 | LR__3543
219ac                 | ' 	return sum;
219ac     00 FB 01 F6 | 	mov	result1, _var01
219b0                 | _fatfs_cc_sum_sfn_ret
219b0     2D 00 64 FD | 	ret
219b4                 | 
219b4                 | _fatfs_cc_dir_read
219b4     0C 4A 05 F6 | 	mov	COUNT_, #12
219b8     A8 00 A0 FD | 	call	#pushregs_
219bc     09 1F 02 F6 | 	mov	local01, arg01
219c0     0A 21 02 F6 | 	mov	local02, arg02
219c4     04 22 06 F6 | 	mov	local03, #4
219c8     0F 25 02 FB | 	rdlong	local04, local01
219cc     FF 26 06 F6 | 	mov	local05, #255
219d0     FF 28 06 F6 | 	mov	local06, #255
219d4                 | ' )
219d4                 | ' {
219d4                 | ' 	FRESULT res = FR_NO_FILE;
219d4                 | ' 	FATFS *fs = dp->obj.fs;
219d4                 | ' 	BYTE attr, b;
219d4                 | ' 
219d4                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
219d4                 | ' 
219d4                 | ' 
219d4                 | ' 	while (dp->sect) {
219d4                 | LR__3550
219d4     18 1E 06 F1 | 	add	local01, #24
219d8     0F FB 09 FB | 	rdlong	result1, local01 wz
219dc     18 1E 86 F1 | 	sub	local01, #24
219e0     AC 01 90 AD |  if_e	jmp	#LR__3560
219e4     18 1E 06 F1 | 	add	local01, #24
219e8     0F 15 02 FB | 	rdlong	arg02, local01
219ec     18 1E 86 F1 | 	sub	local01, #24
219f0     12 13 02 F6 | 	mov	arg01, local04
219f4     AC ED BF FD | 	call	#_fatfs_cc_move_window
219f8     FD 22 0A F6 | 	mov	local03, result1 wz
219fc     90 01 90 5D |  if_ne	jmp	#LR__3560
21a00     1C 1E 06 F1 | 	add	local01, #28
21a04     0F FB 01 FB | 	rdlong	result1, local01
21a08     1C 1E 86 F1 | 	sub	local01, #28
21a0c     FD 2A C2 FA | 	rdbyte	local07, result1
21a10     15 FB 01 F6 | 	mov	result1, local07
21a14     07 FA 4D F7 | 	zerox	result1, #7 wz
21a18     04 22 06 A6 |  if_e	mov	local03, #4
21a1c                 | ' 			res = FR_NO_FILE; break;
21a1c     70 01 90 AD |  if_e	jmp	#LR__3560
21a20     1C 1E 06 F1 | 	add	local01, #28
21a24     0F 2D 02 FB | 	rdlong	local08, local01
21a28     0B 2C 06 F1 | 	add	local08, #11
21a2c     16 2F C2 FA | 	rdbyte	local09, local08
21a30     3F 2E 06 F5 | 	and	local09, #63
21a34     16 1E 86 F1 | 	sub	local01, #22
21a38     0F 2F 42 FC | 	wrbyte	local09, local01
21a3c     06 1E 86 F1 | 	sub	local01, #6
21a40     15 FB E1 F8 | 	getbyte	result1, local07, #0
21a44     E5 FA 0D F2 | 	cmp	result1, #229 wz
21a48     15 2D 02 56 |  if_ne	mov	local08, local07
21a4c     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
21a50     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
21a54     1C 00 90 AD |  if_e	jmp	#LR__3551
21a58     00 30 06 F6 | 	mov	local10, #0
21a5c     17 2D E2 F8 | 	getbyte	local08, local09, #0
21a60     20 2C 26 F5 | 	andn	local08, #32
21a64     08 2C 0E F2 | 	cmp	local08, #8 wz
21a68     01 30 06 A6 |  if_e	mov	local10, #1
21a6c     10 31 0A F2 | 	cmp	local10, local02 wz
21a70     08 00 90 AD |  if_e	jmp	#LR__3552
21a74                 | LR__3551
21a74     FF 26 06 F6 | 	mov	local05, #255
21a78     00 01 90 FD | 	jmp	#LR__3559
21a7c                 | LR__3552
21a7c     17 2F E2 F8 | 	getbyte	local09, local09, #0
21a80     0F 2E 0E F2 | 	cmp	local09, #15 wz
21a84     B4 00 90 5D |  if_ne	jmp	#LR__3556
21a88     15 33 E2 F8 | 	getbyte	local11, local07, #0
21a8c     40 32 CE F7 | 	test	local11, #64 wz
21a90     30 00 90 AD |  if_e	jmp	#LR__3553
21a94     1C 1E 06 F1 | 	add	local01, #28
21a98     0F 33 02 FB | 	rdlong	local11, local01
21a9c     0D 32 06 F1 | 	add	local11, #13
21aa0     19 29 C2 FA | 	rdbyte	local06, local11
21aa4     15 2B E2 F8 | 	getbyte	local07, local07, #0
21aa8     BF 2A 06 F5 | 	and	local07, #191
21aac     15 27 02 F6 | 	mov	local05, local07
21ab0     0C 1E 86 F1 | 	sub	local01, #12
21ab4     0F 33 02 FB | 	rdlong	local11, local01
21ab8     1C 1E 06 F1 | 	add	local01, #28
21abc     0F 33 62 FC | 	wrlong	local11, local01
21ac0     2C 1E 86 F1 | 	sub	local01, #44
21ac4                 | LR__3553
21ac4     15 2D E2 F8 | 	getbyte	local08, local07, #0
21ac8     13 31 E2 F8 | 	getbyte	local10, local05, #0
21acc     18 2D 0A F2 | 	cmp	local08, local10 wz
21ad0     5C 00 90 5D |  if_ne	jmp	#LR__3554
21ad4     14 31 E2 F8 | 	getbyte	local10, local06, #0
21ad8     1C 1E 06 F1 | 	add	local01, #28
21adc     0F 2F 02 FB | 	rdlong	local09, local01
21ae0     1C 1E 86 F1 | 	sub	local01, #28
21ae4     0D 2E 06 F1 | 	add	local09, #13
21ae8     17 2D C2 FA | 	rdbyte	local08, local09
21aec     16 2F E2 F8 | 	getbyte	local09, local08, #0
21af0     17 31 0A F2 | 	cmp	local10, local09 wz
21af4     38 00 90 5D |  if_ne	jmp	#LR__3554
21af8     0C 24 06 F1 | 	add	local04, #12
21afc     12 13 02 FB | 	rdlong	arg01, local04
21b00     0C 24 86 F1 | 	sub	local04, #12
21b04     1C 1E 06 F1 | 	add	local01, #28
21b08     0F 35 02 FB | 	rdlong	local12, local01
21b0c     1C 1E 86 F1 | 	sub	local01, #28
21b10     1A 15 02 F6 | 	mov	arg02, local12
21b14     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
21b18     00 FA 4D F2 | 	cmps	result1, #0 wz
21b1c     13 35 02 56 |  if_ne	mov	local12, local05
21b20     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
21b24     01 34 86 51 |  if_ne	sub	local12, #1
21b28     1A 33 02 56 |  if_ne	mov	local11, local12
21b2c     04 00 90 5D |  if_ne	jmp	#LR__3555
21b30                 | LR__3554
21b30     FF 32 06 F6 | 	mov	local11, #255
21b34                 | LR__3555
21b34     19 27 02 F6 | 	mov	local05, local11
21b38     40 00 90 FD | 	jmp	#LR__3558
21b3c                 | LR__3556
21b3c     13 33 02 F6 | 	mov	local11, local05
21b40     07 32 4E F7 | 	zerox	local11, #7 wz
21b44     20 00 90 5D |  if_ne	jmp	#LR__3557
21b48     14 29 E2 F8 | 	getbyte	local06, local06, #0
21b4c     1C 1E 06 F1 | 	add	local01, #28
21b50     0F 13 02 FB | 	rdlong	arg01, local01
21b54     1C 1E 86 F1 | 	sub	local01, #28
21b58     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
21b5c     FD FA E1 F8 | 	getbyte	result1, result1, #0
21b60     FD 28 0A F2 | 	cmp	local06, result1 wz
21b64     28 00 90 AD |  if_e	jmp	#LR__3560
21b68                 | LR__3557
21b68     2C 1E 06 F1 | 	add	local01, #44
21b6c     FF FF FF FF 
21b70     0F FF 6B FC | 	wrlong	##-1, local01
21b74     2C 1E 86 F1 | 	sub	local01, #44
21b78                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
21b78                 | ' 					}
21b78                 | ' 					break;
21b78     14 00 90 FD | 	jmp	#LR__3560
21b7c                 | LR__3558
21b7c                 | LR__3559
21b7c     0F 13 02 F6 | 	mov	arg01, local01
21b80     00 14 06 F6 | 	mov	arg02, #0
21b84     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
21b88     FD 22 0A F6 | 	mov	local03, result1 wz
21b8c     44 FE 9F AD |  if_e	jmp	#LR__3550
21b90                 | LR__3560
21b90     00 22 0E F2 | 	cmp	local03, #0 wz
21b94     18 1E 06 51 |  if_ne	add	local01, #24
21b98     0F 01 68 5C |  if_ne	wrlong	#0, local01
21b9c                 | ' 	return res;
21b9c     11 FB 01 F6 | 	mov	result1, local03
21ba0     A7 F0 03 F6 | 	mov	ptra, fp
21ba4     B2 00 A0 FD | 	call	#popregs_
21ba8                 | _fatfs_cc_dir_read_ret
21ba8     2D 00 64 FD | 	ret
21bac                 | 
21bac                 | _fatfs_cc_dir_find
21bac     0B 4A 05 F6 | 	mov	COUNT_, #11
21bb0     A8 00 A0 FD | 	call	#pushregs_
21bb4     09 1F 02 F6 | 	mov	local01, arg01
21bb8     0F 21 02 FB | 	rdlong	local02, local01
21bbc     0F 13 02 F6 | 	mov	arg01, local01
21bc0     00 14 06 F6 | 	mov	arg02, #0
21bc4     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
21bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
21bcc     18 02 90 5D |  if_ne	jmp	#LR__3582
21bd0     FF 22 06 F6 | 	mov	local03, #255
21bd4     FF 24 06 F6 | 	mov	local04, #255
21bd8     2C 1E 06 F1 | 	add	local01, #44
21bdc     FF FF FF FF 
21be0     0F FF 6B FC | 	wrlong	##-1, local01
21be4     2C 1E 86 F1 | 	sub	local01, #44
21be8                 | ' #line 2404 "ff.c"
21be8                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
21be8                 | ' 
21be8                 | ' 	do {
21be8                 | LR__3570
21be8     18 1E 06 F1 | 	add	local01, #24
21bec     0F 15 02 FB | 	rdlong	arg02, local01
21bf0     18 1E 86 F1 | 	sub	local01, #24
21bf4     10 13 02 F6 | 	mov	arg01, local02
21bf8     A8 EB BF FD | 	call	#_fatfs_cc_move_window
21bfc     FD 26 0A F6 | 	mov	local05, result1 wz
21c00     E0 01 90 5D |  if_ne	jmp	#LR__3581
21c04     1C 1E 06 F1 | 	add	local01, #28
21c08     0F 17 02 FB | 	rdlong	arg03, local01
21c0c     1C 1E 86 F1 | 	sub	local01, #28
21c10     0B 29 C2 FA | 	rdbyte	local06, arg03
21c14     14 17 02 F6 | 	mov	arg03, local06
21c18     07 16 4E F7 | 	zerox	arg03, #7 wz
21c1c     04 26 06 A6 |  if_e	mov	local05, #4
21c20     C0 01 90 AD |  if_e	jmp	#LR__3581
21c24     1C 1E 06 F1 | 	add	local01, #28
21c28     0F 2B 02 FB | 	rdlong	local07, local01
21c2c     15 17 02 F6 | 	mov	arg03, local07
21c30     0B 16 06 F1 | 	add	arg03, #11
21c34     0B 2D C2 FA | 	rdbyte	local08, arg03
21c38     3F 2C 06 F5 | 	and	local08, #63
21c3c     16 1E 86 F1 | 	sub	local01, #22
21c40     0F 2D 42 FC | 	wrbyte	local08, local01
21c44     06 1E 86 F1 | 	sub	local01, #6
21c48     14 17 E2 F8 | 	getbyte	arg03, local06, #0
21c4c     E5 16 0E F2 | 	cmp	arg03, #229 wz
21c50     18 00 90 AD |  if_e	jmp	#LR__3571
21c54     16 17 E2 F8 | 	getbyte	arg03, local08, #0
21c58     08 16 CE F7 | 	test	arg03, #8 wz
21c5c     16 2B 02 56 |  if_ne	mov	local07, local08
21c60     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
21c64     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
21c68     18 00 90 AD |  if_e	jmp	#LR__3572
21c6c                 | LR__3571
21c6c     FF 24 06 F6 | 	mov	local04, #255
21c70     2C 1E 06 F1 | 	add	local01, #44
21c74     FF FF FF FF 
21c78     0F FF 6B FC | 	wrlong	##-1, local01
21c7c     2C 1E 86 F1 | 	sub	local01, #44
21c80     4C 01 90 FD | 	jmp	#LR__3580
21c84                 | LR__3572
21c84     16 2D E2 F8 | 	getbyte	local08, local08, #0
21c88     0F 2C 0E F2 | 	cmp	local08, #15 wz
21c8c     C8 00 90 5D |  if_ne	jmp	#LR__3576
21c90     2B 1E 06 F1 | 	add	local01, #43
21c94     0F 2D C2 FA | 	rdbyte	local08, local01
21c98     2B 1E 86 F1 | 	sub	local01, #43
21c9c     40 2C CE F7 | 	test	local08, #64 wz
21ca0     2C 01 90 5D |  if_ne	jmp	#LR__3579
21ca4     14 2F E2 F8 | 	getbyte	local09, local06, #0
21ca8     40 2E CE F7 | 	test	local09, #64 wz
21cac     30 00 90 AD |  if_e	jmp	#LR__3573
21cb0     1C 1E 06 F1 | 	add	local01, #28
21cb4     0F 2F 02 FB | 	rdlong	local09, local01
21cb8     0D 2E 06 F1 | 	add	local09, #13
21cbc     17 23 C2 FA | 	rdbyte	local03, local09
21cc0     14 29 E2 F8 | 	getbyte	local06, local06, #0
21cc4     BF 28 06 F5 | 	and	local06, #191
21cc8     14 25 02 F6 | 	mov	local04, local06
21ccc     0C 1E 86 F1 | 	sub	local01, #12
21cd0     0F 2F 02 FB | 	rdlong	local09, local01
21cd4     1C 1E 06 F1 | 	add	local01, #28
21cd8     0F 2F 62 FC | 	wrlong	local09, local01
21cdc     2C 1E 86 F1 | 	sub	local01, #44
21ce0                 | LR__3573
21ce0     14 31 E2 F8 | 	getbyte	local10, local06, #0
21ce4     12 2B E2 F8 | 	getbyte	local07, local04, #0
21ce8     15 31 0A F2 | 	cmp	local10, local07 wz
21cec     5C 00 90 5D |  if_ne	jmp	#LR__3574
21cf0     11 2D E2 F8 | 	getbyte	local08, local03, #0
21cf4     1C 1E 06 F1 | 	add	local01, #28
21cf8     0F 2B 02 FB | 	rdlong	local07, local01
21cfc     1C 1E 86 F1 | 	sub	local01, #28
21d00     0D 2A 06 F1 | 	add	local07, #13
21d04     15 29 C2 FA | 	rdbyte	local06, local07
21d08     14 2B E2 F8 | 	getbyte	local07, local06, #0
21d0c     15 2D 0A F2 | 	cmp	local08, local07 wz
21d10     38 00 90 5D |  if_ne	jmp	#LR__3574
21d14     0C 20 06 F1 | 	add	local02, #12
21d18     10 13 02 FB | 	rdlong	arg01, local02
21d1c     0C 20 86 F1 | 	sub	local02, #12
21d20     1C 1E 06 F1 | 	add	local01, #28
21d24     0F 33 02 FB | 	rdlong	local11, local01
21d28     1C 1E 86 F1 | 	sub	local01, #28
21d2c     19 15 02 F6 | 	mov	arg02, local11
21d30     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
21d34     00 FA 4D F2 | 	cmps	result1, #0 wz
21d38     12 33 02 56 |  if_ne	mov	local11, local04
21d3c     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
21d40     01 32 86 51 |  if_ne	sub	local11, #1
21d44     19 2F 02 56 |  if_ne	mov	local09, local11
21d48     04 00 90 5D |  if_ne	jmp	#LR__3575
21d4c                 | LR__3574
21d4c     FF 2E 06 F6 | 	mov	local09, #255
21d50                 | LR__3575
21d50     17 25 02 F6 | 	mov	local04, local09
21d54     78 00 90 FD | 	jmp	#LR__3579
21d58                 | LR__3576
21d58     12 2F 02 F6 | 	mov	local09, local04
21d5c     07 2E 4E F7 | 	zerox	local09, #7 wz
21d60     20 00 90 5D |  if_ne	jmp	#LR__3577
21d64     11 31 E2 F8 | 	getbyte	local10, local03, #0
21d68     1C 1E 06 F1 | 	add	local01, #28
21d6c     0F 13 02 FB | 	rdlong	arg01, local01
21d70     1C 1E 86 F1 | 	sub	local01, #28
21d74     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
21d78     FD FA E1 F8 | 	getbyte	result1, result1, #0
21d7c     FD 30 0A F2 | 	cmp	local10, result1 wz
21d80     60 00 90 AD |  if_e	jmp	#LR__3581
21d84                 | LR__3577
21d84     2B 1E 06 F1 | 	add	local01, #43
21d88     0F 2F C2 FA | 	rdbyte	local09, local01
21d8c     2B 1E 86 F1 | 	sub	local01, #43
21d90     01 2E CE F7 | 	test	local09, #1 wz
21d94     24 00 90 5D |  if_ne	jmp	#LR__3578
21d98     1C 1E 06 F1 | 	add	local01, #28
21d9c     0F 13 02 FB | 	rdlong	arg01, local01
21da0     04 1E 06 F1 | 	add	local01, #4
21da4     0F 15 02 F6 | 	mov	arg02, local01
21da8     20 1E 86 F1 | 	sub	local01, #32
21dac     0B 16 06 F6 | 	mov	arg03, #11
21db0     88 DA BF FD | 	call	#_fatfs_cc_memcmp
21db4     00 FA 0D F2 | 	cmp	result1, #0 wz
21db8     28 00 90 AD |  if_e	jmp	#LR__3581
21dbc                 | LR__3578
21dbc     FF 24 06 F6 | 	mov	local04, #255
21dc0     2C 1E 06 F1 | 	add	local01, #44
21dc4     FF FF FF FF 
21dc8     0F FF 6B FC | 	wrlong	##-1, local01
21dcc     2C 1E 86 F1 | 	sub	local01, #44
21dd0                 | LR__3579
21dd0                 | LR__3580
21dd0     0F 13 02 F6 | 	mov	arg01, local01
21dd4     00 14 06 F6 | 	mov	arg02, #0
21dd8     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
21ddc     FD 26 0A F6 | 	mov	local05, result1 wz
21de0     04 FE 9F AD |  if_e	jmp	#LR__3570
21de4                 | LR__3581
21de4                 | ' 
21de4                 | ' 	return res;
21de4     13 FB 01 F6 | 	mov	result1, local05
21de8                 | LR__3582
21de8     A7 F0 03 F6 | 	mov	ptra, fp
21dec     B2 00 A0 FD | 	call	#popregs_
21df0                 | _fatfs_cc_dir_find_ret
21df0     2D 00 64 FD | 	ret
21df4                 | 
21df4                 | _fatfs_cc_dir_register
21df4     0A 4A 05 F6 | 	mov	COUNT_, #10
21df8     A8 00 A0 FD | 	call	#pushregs_
21dfc     2C F0 07 F1 | 	add	ptra, #44
21e00     04 4E 05 F1 | 	add	fp, #4
21e04     A7 12 62 FC | 	wrlong	arg01, fp
21e08     09 1F 02 FB | 	rdlong	local01, arg01
21e0c     08 4E 05 F1 | 	add	fp, #8
21e10     A7 1E 62 FC | 	wrlong	local01, fp
21e14     08 4E 85 F1 | 	sub	fp, #8
21e18     A7 20 02 FB | 	rdlong	local02, fp
21e1c     04 4E 85 F1 | 	sub	fp, #4
21e20     2B 20 06 F1 | 	add	local02, #43
21e24     10 21 C2 FA | 	rdbyte	local02, local02
21e28     A0 20 CE F7 | 	test	local02, #160 wz
21e2c     06 FA 05 56 |  if_ne	mov	result1, #6
21e30     F8 03 90 5D |  if_ne	jmp	#LR__3605
21e34                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
21e34     14 4E 05 F1 | 	add	fp, #20
21e38     A7 00 68 FC | 	wrlong	#0, fp
21e3c     14 4E 85 F1 | 	sub	fp, #20
21e40     97 28 48 FB | 	callpa	#(@LR__3591-@LR__3590)>>2,fcache_load_ptr_
21e44                 | LR__3590
21e44     0C 4E 05 F1 | 	add	fp, #12
21e48     A7 20 02 FB | 	rdlong	local02, fp
21e4c     0C 20 06 F1 | 	add	local02, #12
21e50     10 23 02 FB | 	rdlong	local03, local02
21e54     08 4E 05 F1 | 	add	fp, #8
21e58     A7 24 02 FB | 	rdlong	local04, fp
21e5c     14 4E 85 F1 | 	sub	fp, #20
21e60     01 24 66 F0 | 	shl	local04, #1
21e64     11 25 02 F1 | 	add	local04, local03
21e68     12 21 EA FA | 	rdword	local02, local04 wz
21e6c     24 00 90 AD |  if_e	jmp	#LR__3592
21e70     14 4E 05 F1 | 	add	fp, #20
21e74     A7 26 02 FB | 	rdlong	local05, fp
21e78     13 29 02 F6 | 	mov	local06, local05
21e7c     13 2B 02 F6 | 	mov	local07, local05
21e80     15 2D 02 F6 | 	mov	local08, local07
21e84     01 2C 06 F1 | 	add	local08, #1
21e88     A7 2C 62 FC | 	wrlong	local08, fp
21e8c     14 4E 85 F1 | 	sub	fp, #20
21e90     B0 FF 9F FD | 	jmp	#LR__3590
21e94                 | LR__3591
21e94                 | LR__3592
21e94     1C 4E 05 F1 | 	add	fp, #28
21e98     A7 12 02 F6 | 	mov	arg01, fp
21e9c     18 4E 85 F1 | 	sub	fp, #24
21ea0     A7 14 02 FB | 	rdlong	arg02, fp
21ea4     04 4E 85 F1 | 	sub	fp, #4
21ea8     20 14 06 F1 | 	add	arg02, #32
21eac     0C 16 06 F6 | 	mov	arg03, #12
21eb0     08 72 BF FD | 	call	#__system____builtin_memmove
21eb4     27 4E 05 F1 | 	add	fp, #39
21eb8     A7 2E C2 FA | 	rdbyte	local09, fp
21ebc     27 4E 85 F1 | 	sub	fp, #39
21ec0     01 2E CE F7 | 	test	local09, #1 wz
21ec4     F4 00 90 AD |  if_e	jmp	#LR__3595
21ec8     04 4E 05 F1 | 	add	fp, #4
21ecc     A7 30 02 FB | 	rdlong	local10, fp
21ed0     2B 30 06 F1 | 	add	local10, #43
21ed4     18 81 48 FC | 	wrbyte	#64, local10
21ed8                 | ' 		dp->fn[ 11 ] =  0x40 ;
21ed8                 | ' 		for (n = 1; n < 100; n++) {
21ed8     0C 4E 05 F1 | 	add	fp, #12
21edc     A7 02 68 FC | 	wrlong	#1, fp
21ee0     10 4E 85 F1 | 	sub	fp, #16
21ee4                 | LR__3593
21ee4     10 4E 05 F1 | 	add	fp, #16
21ee8     A7 20 02 FB | 	rdlong	local02, fp
21eec     10 4E 85 F1 | 	sub	fp, #16
21ef0     64 20 16 F2 | 	cmp	local02, #100 wc
21ef4     70 00 90 3D |  if_ae	jmp	#LR__3594
21ef8     04 4E 05 F1 | 	add	fp, #4
21efc     A7 12 02 FB | 	rdlong	arg01, fp
21f00     20 12 06 F1 | 	add	arg01, #32
21f04     18 4E 05 F1 | 	add	fp, #24
21f08     A7 14 02 F6 | 	mov	arg02, fp
21f0c     10 4E 85 F1 | 	sub	fp, #16
21f10     A7 30 02 FB | 	rdlong	local10, fp
21f14     0C 30 06 F1 | 	add	local10, #12
21f18     18 17 02 FB | 	rdlong	arg03, local10
21f1c     04 4E 05 F1 | 	add	fp, #4
21f20     A7 18 02 FB | 	rdlong	arg04, fp
21f24     10 4E 85 F1 | 	sub	fp, #16
21f28     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
21f2c     04 4E 05 F1 | 	add	fp, #4
21f30     A7 12 02 FB | 	rdlong	arg01, fp
21f34     04 4E 85 F1 | 	sub	fp, #4
21f38     70 FC BF FD | 	call	#_fatfs_cc_dir_find
21f3c     08 4E 05 F1 | 	add	fp, #8
21f40     A7 FA 61 FC | 	wrlong	result1, fp
21f44     00 FA 4D F2 | 	cmps	result1, #0 wz
21f48     08 4E 85 F1 | 	sub	fp, #8
21f4c     18 00 90 5D |  if_ne	jmp	#LR__3594
21f50     10 4E 05 F1 | 	add	fp, #16
21f54     A7 30 02 FB | 	rdlong	local10, fp
21f58     01 30 06 F1 | 	add	local10, #1
21f5c     A7 30 62 FC | 	wrlong	local10, fp
21f60     10 4E 85 F1 | 	sub	fp, #16
21f64     7C FF 9F FD | 	jmp	#LR__3593
21f68                 | LR__3594
21f68     10 4E 05 F1 | 	add	fp, #16
21f6c     A7 30 02 FB | 	rdlong	local10, fp
21f70     10 4E 85 F1 | 	sub	fp, #16
21f74     64 30 0E F2 | 	cmp	local10, #100 wz
21f78     07 FA 05 A6 |  if_e	mov	result1, #7
21f7c     AC 02 90 AD |  if_e	jmp	#LR__3605
21f80     08 4E 05 F1 | 	add	fp, #8
21f84     A7 30 02 FB | 	rdlong	local10, fp
21f88     08 4E 85 F1 | 	sub	fp, #8
21f8c     04 30 0E F2 | 	cmp	local10, #4 wz
21f90     08 4E 05 51 |  if_ne	add	fp, #8
21f94     A7 FA 01 5B |  if_ne	rdlong	result1, fp
21f98     08 4E 85 51 |  if_ne	sub	fp, #8
21f9c     8C 02 90 5D |  if_ne	jmp	#LR__3605
21fa0     04 4E 05 F1 | 	add	fp, #4
21fa4     A7 30 02 FB | 	rdlong	local10, fp
21fa8     23 4E 05 F1 | 	add	fp, #35
21fac     A7 1E C2 FA | 	rdbyte	local01, fp
21fb0     27 4E 85 F1 | 	sub	fp, #39
21fb4     2B 30 06 F1 | 	add	local10, #43
21fb8     18 1F 42 FC | 	wrbyte	local01, local10
21fbc                 | LR__3595
21fbc     27 4E 05 F1 | 	add	fp, #39
21fc0     A7 20 C2 FA | 	rdbyte	local02, fp
21fc4     27 4E 85 F1 | 	sub	fp, #39
21fc8     02 20 CE F7 | 	test	local02, #2 wz
21fcc     20 00 90 AD |  if_e	jmp	#LR__3596
21fd0     14 4E 05 F1 | 	add	fp, #20
21fd4     A7 30 02 FB | 	rdlong	local10, fp
21fd8     0C 30 06 F1 | 	add	local10, #12
21fdc     0D 30 16 FD | 	qdiv	local10, #13
21fe0     14 4E 85 F1 | 	sub	fp, #20
21fe4     18 30 62 FD | 	getqx	local10
21fe8     01 30 06 F1 | 	add	local10, #1
21fec     04 00 90 FD | 	jmp	#LR__3597
21ff0                 | LR__3596
21ff0     01 30 06 F6 | 	mov	local10, #1
21ff4                 | LR__3597
21ff4     18 4E 05 F1 | 	add	fp, #24
21ff8     A7 30 62 FC | 	wrlong	local10, fp
21ffc     14 4E 85 F1 | 	sub	fp, #20
22000     A7 12 02 FB | 	rdlong	arg01, fp
22004     18 15 02 F6 | 	mov	arg02, local10
22008     04 4E 85 F1 | 	sub	fp, #4
2200c     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
22010     08 4E 05 F1 | 	add	fp, #8
22014     A7 FA 61 FC | 	wrlong	result1, fp
22018     08 4E 85 F1 | 	sub	fp, #8
2201c     00 FA 0D F2 | 	cmp	result1, #0 wz
22020     38 01 90 5D |  if_ne	jmp	#LR__3602
22024     18 4E 05 F1 | 	add	fp, #24
22028     A7 30 02 FB | 	rdlong	local10, fp
2202c     01 30 8E F1 | 	sub	local10, #1 wz
22030     A7 30 62 FC | 	wrlong	local10, fp
22034     18 4E 85 F1 | 	sub	fp, #24
22038     20 01 90 AD |  if_e	jmp	#LR__3602
2203c     04 4E 05 F1 | 	add	fp, #4
22040     A7 30 02 FB | 	rdlong	local10, fp
22044     18 13 02 F6 | 	mov	arg01, local10
22048     14 4E 05 F1 | 	add	fp, #20
2204c     A7 18 02 FB | 	rdlong	arg04, fp
22050     18 4E 85 F1 | 	sub	fp, #24
22054     05 18 66 F0 | 	shl	arg04, #5
22058     10 30 06 F1 | 	add	local10, #16
2205c     18 15 02 FB | 	rdlong	arg02, local10
22060     0C 15 82 F1 | 	sub	arg02, arg04
22064     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
22068     08 4E 05 F1 | 	add	fp, #8
2206c     A7 FA 61 FC | 	wrlong	result1, fp
22070     08 4E 85 F1 | 	sub	fp, #8
22074     00 FA 0D F2 | 	cmp	result1, #0 wz
22078     E0 00 90 5D |  if_ne	jmp	#LR__3601
2207c     04 4E 05 F1 | 	add	fp, #4
22080     A7 12 02 FB | 	rdlong	arg01, fp
22084     04 4E 85 F1 | 	sub	fp, #4
22088     20 12 06 F1 | 	add	arg01, #32
2208c     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
22090     FD 30 02 F6 | 	mov	local10, result1
22094     28 4E 05 F1 | 	add	fp, #40
22098     A7 30 42 FC | 	wrbyte	local10, fp
2209c     28 4E 85 F1 | 	sub	fp, #40
220a0                 | ' 			sum = sum_sfn(dp->fn);
220a0                 | ' 			do {
220a0                 | LR__3598
220a0     0C 4E 05 F1 | 	add	fp, #12
220a4     A7 12 02 FB | 	rdlong	arg01, fp
220a8     08 4E 85 F1 | 	sub	fp, #8
220ac     A7 1E 02 FB | 	rdlong	local01, fp
220b0     04 4E 85 F1 | 	sub	fp, #4
220b4     18 1E 06 F1 | 	add	local01, #24
220b8     0F 15 02 FB | 	rdlong	arg02, local01
220bc     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
220c0     08 4E 05 F1 | 	add	fp, #8
220c4     A7 FA 61 FC | 	wrlong	result1, fp
220c8     00 FA 4D F2 | 	cmps	result1, #0 wz
220cc     08 4E 85 F1 | 	sub	fp, #8
220d0     88 00 90 5D |  if_ne	jmp	#LR__3600
220d4     0C 4E 05 F1 | 	add	fp, #12
220d8     A7 20 02 FB | 	rdlong	local02, fp
220dc     0C 20 06 F1 | 	add	local02, #12
220e0     10 13 02 FB | 	rdlong	arg01, local02
220e4     08 4E 85 F1 | 	sub	fp, #8
220e8     A7 1E 02 FB | 	rdlong	local01, fp
220ec     1C 1E 06 F1 | 	add	local01, #28
220f0     0F 15 02 FB | 	rdlong	arg02, local01
220f4     14 4E 05 F1 | 	add	fp, #20
220f8     A7 16 02 FB | 	rdlong	arg03, fp
220fc     10 4E 05 F1 | 	add	fp, #16
22100     A7 18 C2 FA | 	rdbyte	arg04, fp
22104     28 4E 85 F1 | 	sub	fp, #40
22108     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2210c     0C 4E 05 F1 | 	add	fp, #12
22110     A7 30 02 FB | 	rdlong	local10, fp
22114     03 30 06 F1 | 	add	local10, #3
22118     18 03 48 FC | 	wrbyte	#1, local10
2211c     08 4E 85 F1 | 	sub	fp, #8
22120     A7 12 02 FB | 	rdlong	arg01, fp
22124     04 4E 85 F1 | 	sub	fp, #4
22128     00 14 06 F6 | 	mov	arg02, #0
2212c     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
22130     08 4E 05 F1 | 	add	fp, #8
22134     A7 FA 61 FC | 	wrlong	result1, fp
22138     00 FA 4D F2 | 	cmps	result1, #0 wz
2213c     08 4E 85 F1 | 	sub	fp, #8
22140     18 00 90 5D |  if_ne	jmp	#LR__3599
22144     18 4E 05 F1 | 	add	fp, #24
22148     A7 30 02 FB | 	rdlong	local10, fp
2214c     01 30 8E F1 | 	sub	local10, #1 wz
22150     A7 30 62 FC | 	wrlong	local10, fp
22154     18 4E 85 F1 | 	sub	fp, #24
22158     44 FF 9F 5D |  if_ne	jmp	#LR__3598
2215c                 | LR__3599
2215c                 | LR__3600
2215c                 | LR__3601
2215c                 | LR__3602
2215c     08 4E 05 F1 | 	add	fp, #8
22160     A7 30 0A FB | 	rdlong	local10, fp wz
22164     08 4E 85 F1 | 	sub	fp, #8
22168     B4 00 90 5D |  if_ne	jmp	#LR__3604
2216c     0C 4E 05 F1 | 	add	fp, #12
22170     A7 12 02 FB | 	rdlong	arg01, fp
22174     08 4E 85 F1 | 	sub	fp, #8
22178     A7 1E 02 FB | 	rdlong	local01, fp
2217c     04 4E 85 F1 | 	sub	fp, #4
22180     18 1E 06 F1 | 	add	local01, #24
22184     0F 15 02 FB | 	rdlong	arg02, local01
22188     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2218c     08 4E 05 F1 | 	add	fp, #8
22190     A7 FA 61 FC | 	wrlong	result1, fp
22194     08 4E 85 F1 | 	sub	fp, #8
22198     00 FA 0D F2 | 	cmp	result1, #0 wz
2219c     80 00 90 5D |  if_ne	jmp	#LR__3603
221a0     04 4E 05 F1 | 	add	fp, #4
221a4     A7 20 02 FB | 	rdlong	local02, fp
221a8     04 4E 85 F1 | 	sub	fp, #4
221ac     1C 20 06 F1 | 	add	local02, #28
221b0     10 13 02 FB | 	rdlong	arg01, local02
221b4     00 14 06 F6 | 	mov	arg02, #0
221b8     20 16 06 F6 | 	mov	arg03, #32
221bc     98 00 A0 FD | 	call	#\builtin_bytefill_
221c0     04 4E 05 F1 | 	add	fp, #4
221c4     A7 14 02 FB | 	rdlong	arg02, fp
221c8     0A 1F 02 F6 | 	mov	local01, arg02
221cc     1C 1E 06 F1 | 	add	local01, #28
221d0     0F 13 02 FB | 	rdlong	arg01, local01
221d4     04 4E 85 F1 | 	sub	fp, #4
221d8     20 14 06 F1 | 	add	arg02, #32
221dc     0B 16 06 F6 | 	mov	arg03, #11
221e0     D8 6E BF FD | 	call	#__system____builtin_memmove
221e4     04 4E 05 F1 | 	add	fp, #4
221e8     A7 2E 02 FB | 	rdlong	local09, fp
221ec     17 31 02 F6 | 	mov	local10, local09
221f0     1C 30 06 F1 | 	add	local10, #28
221f4     18 1F 02 FB | 	rdlong	local01, local10
221f8     2B 2E 06 F1 | 	add	local09, #43
221fc     17 31 C2 FA | 	rdbyte	local10, local09
22200     18 30 06 F5 | 	and	local10, #24
22204     0C 1E 06 F1 | 	add	local01, #12
22208     0F 31 42 FC | 	wrbyte	local10, local01
2220c     08 4E 05 F1 | 	add	fp, #8
22210     A7 30 02 FB | 	rdlong	local10, fp
22214     0C 4E 85 F1 | 	sub	fp, #12
22218     03 30 06 F1 | 	add	local10, #3
2221c     18 03 48 FC | 	wrbyte	#1, local10
22220                 | LR__3603
22220                 | LR__3604
22220                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
22220                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
22220                 | ' 
22220                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
22220                 | ' 
22220                 | ' 			fs->wflag = 1;
22220                 | ' 		}
22220                 | ' 	}
22220                 | ' 
22220                 | ' 	return res;
22220     08 4E 05 F1 | 	add	fp, #8
22224     A7 FA 01 FB | 	rdlong	result1, fp
22228     08 4E 85 F1 | 	sub	fp, #8
2222c                 | LR__3605
2222c     A7 F0 03 F6 | 	mov	ptra, fp
22230     B2 00 A0 FD | 	call	#popregs_
22234                 | _fatfs_cc_dir_register_ret
22234     2D 00 64 FD | 	ret
22238                 | 
22238                 | _fatfs_cc_dir_remove
22238     05 4A 05 F6 | 	mov	COUNT_, #5
2223c     A8 00 A0 FD | 	call	#pushregs_
22240     09 1F 02 F6 | 	mov	local01, arg01
22244     0F 21 02 FB | 	rdlong	local02, local01
22248     10 1E 06 F1 | 	add	local01, #16
2224c     0F 23 02 FB | 	rdlong	local03, local01
22250     1C 1E 06 F1 | 	add	local01, #28
22254     0F 15 02 FB | 	rdlong	arg02, local01
22258     2C 1E 86 F1 | 	sub	local01, #44
2225c     FF FF 7F FF 
22260     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
22264     00 24 06 A6 |  if_e	mov	local04, #0
22268     18 00 90 AD |  if_e	jmp	#LR__3610
2226c     0F 13 02 F6 | 	mov	arg01, local01
22270     2C 1E 06 F1 | 	add	local01, #44
22274     0F 15 02 FB | 	rdlong	arg02, local01
22278     2C 1E 86 F1 | 	sub	local01, #44
2227c     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
22280     FD 24 02 F6 | 	mov	local04, result1
22284                 | LR__3610
22284     12 27 0A F6 | 	mov	local05, local04 wz
22288     64 00 90 5D |  if_ne	jmp	#LR__3613
2228c                 | ' 		do {
2228c                 | LR__3611
2228c     18 1E 06 F1 | 	add	local01, #24
22290     0F 15 02 FB | 	rdlong	arg02, local01
22294     18 1E 86 F1 | 	sub	local01, #24
22298     10 13 02 F6 | 	mov	arg01, local02
2229c     04 E5 BF FD | 	call	#_fatfs_cc_move_window
222a0     FD 26 0A F6 | 	mov	local05, result1 wz
222a4     40 00 90 5D |  if_ne	jmp	#LR__3612
222a8     1C 1E 06 F1 | 	add	local01, #28
222ac     0F 25 02 FB | 	rdlong	local04, local01
222b0     12 CB 49 FC | 	wrbyte	#229, local04
222b4     03 20 06 F1 | 	add	local02, #3
222b8     10 03 48 FC | 	wrbyte	#1, local02
222bc     03 20 86 F1 | 	sub	local02, #3
222c0     0C 1E 86 F1 | 	sub	local01, #12
222c4     0F 25 02 FB | 	rdlong	local04, local01
222c8     10 1E 86 F1 | 	sub	local01, #16
222cc     11 25 12 F2 | 	cmp	local04, local03 wc
222d0     14 00 90 3D |  if_ae	jmp	#LR__3612
222d4     0F 13 02 F6 | 	mov	arg01, local01
222d8     00 14 06 F6 | 	mov	arg02, #0
222dc     90 EF BF FD | 	call	#_fatfs_cc_dir_next
222e0     FD 26 0A F6 | 	mov	local05, result1 wz
222e4     A4 FF 9F AD |  if_e	jmp	#LR__3611
222e8                 | LR__3612
222e8     04 26 0E F2 | 	cmp	local05, #4 wz
222ec     02 26 06 A6 |  if_e	mov	local05, #2
222f0                 | LR__3613
222f0                 | ' 	}
222f0                 | ' #line 2590 "ff.c"
222f0                 | ' 	return res;
222f0     13 FB 01 F6 | 	mov	result1, local05
222f4     A7 F0 03 F6 | 	mov	ptra, fp
222f8     B2 00 A0 FD | 	call	#popregs_
222fc                 | _fatfs_cc_dir_remove_ret
222fc     2D 00 64 FD | 	ret
22300                 | 
22300                 | _fatfs_cc_get_fileinfo
22300     0F 4A 05 F6 | 	mov	COUNT_, #15
22304     A8 00 A0 FD | 	call	#pushregs_
22308     09 1F 02 F6 | 	mov	local01, arg01
2230c     0A 21 02 F6 | 	mov	local02, arg02
22310     0F 23 02 FB | 	rdlong	local03, local01
22314     1C 20 06 F1 | 	add	local02, #28
22318     10 01 48 FC | 	wrbyte	#0, local02
2231c     1C 20 86 F1 | 	sub	local02, #28
22320     18 1E 06 F1 | 	add	local01, #24
22324     0F 25 0A FB | 	rdlong	local04, local01 wz
22328     18 1E 86 F1 | 	sub	local01, #24
2232c     90 03 90 AD |  if_e	jmp	#LR__3634
22330     2C 1E 06 F1 | 	add	local01, #44
22334     0F 25 02 FB | 	rdlong	local04, local01
22338     2C 1E 86 F1 | 	sub	local01, #44
2233c     FF FF 7F FF 
22340     FF 25 0E F2 | 	cmp	local04, ##-1 wz
22344     D8 00 90 AD |  if_e	jmp	#LR__3623
22348     00 26 06 F6 | 	mov	local05, #0
2234c     00 28 06 F6 | 	mov	local06, #0
22350     00 2A 06 F6 | 	mov	local07, #0
22354                 | ' 			si = di = 0;
22354                 | ' 			hs = 0;
22354                 | ' 			while (fs->lfnbuf[si] != 0) {
22354                 | LR__3620
22354     0C 22 06 F1 | 	add	local03, #12
22358     11 25 02 FB | 	rdlong	local04, local03
2235c     0C 22 86 F1 | 	sub	local03, #12
22360     14 2D 02 F6 | 	mov	local08, local06
22364     01 2C 66 F0 | 	shl	local08, #1
22368     12 2D 02 F1 | 	add	local08, local04
2236c     16 25 EA FA | 	rdword	local04, local08 wz
22370     90 00 90 AD |  if_e	jmp	#LR__3622
22374     0C 22 06 F1 | 	add	local03, #12
22378     11 2F 02 FB | 	rdlong	local09, local03
2237c     0C 22 86 F1 | 	sub	local03, #12
22380     14 31 02 F6 | 	mov	local10, local06
22384     01 30 66 F0 | 	shl	local10, #1
22388     17 31 02 F1 | 	add	local10, local09
2238c     18 33 E2 FA | 	rdword	local11, local10
22390     15 25 02 F6 | 	mov	local04, local07
22394     0F 24 4E F7 | 	zerox	local04, #15 wz
22398     01 28 06 F1 | 	add	local06, #1
2239c     24 00 90 5D |  if_ne	jmp	#LR__3621
223a0     19 35 32 F9 | 	getword	local12, local11, #0
223a4     6C 00 00 FF 
223a8     00 34 16 F2 | 	cmp	local12, ##55296 wc
223ac     14 00 90 CD |  if_b	jmp	#LR__3621
223b0     19 37 32 F9 | 	getword	local13, local11, #0
223b4     70 00 00 FF 
223b8     00 36 16 F2 | 	cmp	local13, ##57344 wc
223bc     19 2B 02 C6 |  if_b	mov	local07, local11
223c0                 | ' 					hs = wc; continue;
223c0     90 FF 9F CD |  if_b	jmp	#LR__3620
223c4                 | LR__3621
223c4     15 13 32 F9 | 	getword	arg01, local07, #0
223c8     10 12 66 F0 | 	shl	arg01, #16
223cc     19 33 32 F9 | 	getword	local11, local11, #0
223d0     19 13 42 F5 | 	or	arg01, local11
223d4     13 15 02 F6 | 	mov	arg02, local05
223d8     1C 20 06 F1 | 	add	local02, #28
223dc     10 15 02 F1 | 	add	arg02, local02
223e0     FF 16 06 F6 | 	mov	arg03, #255
223e4     13 17 82 F1 | 	sub	arg03, local05
223e8     1C 20 86 F1 | 	sub	local02, #28
223ec     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
223f0     FD 38 0A F6 | 	mov	local14, result1 wz
223f4     00 26 06 A6 |  if_e	mov	local05, #0
223f8     1C 27 02 51 |  if_ne	add	local05, local14
223fc     00 2A 06 56 |  if_ne	mov	local07, #0
22400     50 FF 9F 5D |  if_ne	jmp	#LR__3620
22404                 | LR__3622
22404     15 25 02 F6 | 	mov	local04, local07
22408     0F 24 4E F7 | 	zerox	local04, #15 wz
2240c     00 26 06 56 |  if_ne	mov	local05, #0
22410     1C 20 06 F1 | 	add	local02, #28
22414     10 27 02 F1 | 	add	local05, local02
22418     13 01 48 FC | 	wrbyte	#0, local05
2241c     1C 20 86 F1 | 	sub	local02, #28
22420                 | LR__3623
22420     00 26 06 F6 | 	mov	local05, #0
22424     00 28 06 F6 | 	mov	local06, #0
22428                 | ' 			fno->fname[di] = 0;
22428                 | ' 		}
22428                 | ' 	}
22428                 | ' 
22428                 | ' 	si = di = 0;
22428                 | ' 	while (si < 11) {
22428                 | LR__3624
22428     0B 28 16 F2 | 	cmp	local06, #11 wc
2242c     20 01 90 3D |  if_ae	jmp	#LR__3627
22430     1C 1E 06 F1 | 	add	local01, #28
22434     0F 2F 02 FB | 	rdlong	local09, local01
22438     1C 1E 86 F1 | 	sub	local01, #28
2243c     14 31 02 F6 | 	mov	local10, local06
22440     17 31 02 F1 | 	add	local10, local09
22444     18 33 C2 FA | 	rdbyte	local11, local10
22448     19 25 32 F9 | 	getword	local04, local11, #0
2244c     20 24 0E F2 | 	cmp	local04, #32 wz
22450     01 28 06 F1 | 	add	local06, #1
22454     D0 FF 9F AD |  if_e	jmp	#LR__3624
22458     19 25 32 F9 | 	getword	local04, local11, #0
2245c     05 24 0E F2 | 	cmp	local04, #5 wz
22460     E5 32 06 A6 |  if_e	mov	local11, #229
22464     09 28 0E F2 | 	cmp	local06, #9 wz
22468     20 00 90 5D |  if_ne	jmp	#LR__3625
2246c     0C 26 16 F2 | 	cmp	local05, #12 wc
22470     18 00 90 3D |  if_ae	jmp	#LR__3625
22474     13 37 02 F6 | 	mov	local13, local05
22478     0C 20 06 F1 | 	add	local02, #12
2247c     10 37 02 F1 | 	add	local13, local02
22480     1B 5D 48 FC | 	wrbyte	#46, local13
22484     01 26 06 F1 | 	add	local05, #1
22488     0C 20 86 F1 | 	sub	local02, #12
2248c                 | LR__3625
2248c     19 13 32 F9 | 	getword	arg01, local11, #0
22490     07 12 4E F7 | 	zerox	arg01, #7 wz
22494     00 FA 05 56 |  if_ne	mov	result1, #0
22498                 | ' 
22498                 | ' 	return 0;
22498     00 FA 05 A6 |  if_e	mov	result1, #0
2249c     00 FA 0D F2 | 	cmp	result1, #0 wz
224a0     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
224a4     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
224a8     50 00 90 AD |  if_e	jmp	#LR__3626
224ac     1C 1E 06 F1 | 	add	local01, #28
224b0     0F 31 02 FB | 	rdlong	local10, local01
224b4     1C 1E 86 F1 | 	sub	local01, #28
224b8     14 2D 02 F6 | 	mov	local08, local06
224bc     18 2D 02 F1 | 	add	local08, local10
224c0     16 13 CA FA | 	rdbyte	arg01, local08 wz
224c4     00 FA 05 56 |  if_ne	mov	result1, #0
224c8                 | ' 
224c8                 | ' 	return 0;
224c8     00 FA 05 A6 |  if_e	mov	result1, #0
224cc     00 FA 0D F2 | 	cmp	result1, #0 wz
224d0     28 00 90 AD |  if_e	jmp	#LR__3626
224d4     19 33 32 F9 | 	getword	local11, local11, #0
224d8     08 32 66 F0 | 	shl	local11, #8
224dc     1C 1E 06 F1 | 	add	local01, #28
224e0     0F 39 02 FB | 	rdlong	local14, local01
224e4     1C 1E 86 F1 | 	sub	local01, #28
224e8     14 2F 02 F6 | 	mov	local09, local06
224ec     1C 2F 02 F1 | 	add	local09, local14
224f0     17 35 C2 FA | 	rdbyte	local12, local09
224f4     1A 33 42 F5 | 	or	local11, local12
224f8     01 28 06 F1 | 	add	local06, #1
224fc                 | LR__3626
224fc     19 13 02 F6 | 	mov	arg01, local11
22500     01 00 00 FF 
22504     52 15 06 F6 | 	mov	arg02, ##850
22508     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2250c     FD 32 02 F6 | 	mov	local11, result1
22510     19 25 02 F6 | 	mov	local04, local11
22514     0F 24 4E F7 | 	zerox	local04, #15 wz
22518     00 26 06 A6 |  if_e	mov	local05, #0
2251c     30 00 90 AD |  if_e	jmp	#LR__3627
22520     19 13 32 F9 | 	getword	arg01, local11, #0
22524     13 15 02 F6 | 	mov	arg02, local05
22528     0C 20 06 F1 | 	add	local02, #12
2252c     10 15 02 F1 | 	add	arg02, local02
22530     0C 16 06 F6 | 	mov	arg03, #12
22534     13 17 82 F1 | 	sub	arg03, local05
22538     0C 20 86 F1 | 	sub	local02, #12
2253c     EC DF BF FD | 	call	#_fatfs_cc_put_utf
22540     FD 38 0A F6 | 	mov	local14, result1 wz
22544     00 26 06 A6 |  if_e	mov	local05, #0
22548     1C 27 02 51 |  if_ne	add	local05, local14
2254c     D8 FE 9F 5D |  if_ne	jmp	#LR__3624
22550                 | LR__3627
22550     13 25 02 F6 | 	mov	local04, local05
22554     0C 20 06 F1 | 	add	local02, #12
22558     10 25 02 F1 | 	add	local04, local02
2255c     12 01 48 FC | 	wrbyte	#0, local04
22560     10 20 06 F1 | 	add	local02, #16
22564     10 25 CA FA | 	rdbyte	local04, local02 wz
22568     1C 20 86 F1 | 	sub	local02, #28
2256c     F8 00 90 5D |  if_ne	jmp	#LR__3633
22570     00 26 0E F2 | 	cmp	local05, #0 wz
22574     1C 00 90 5D |  if_ne	jmp	#LR__3628
22578     13 37 02 F6 | 	mov	local13, local05
2257c     1C 20 06 F1 | 	add	local02, #28
22580     10 37 02 F1 | 	add	local13, local02
22584     1B 7F 48 FC | 	wrbyte	#63, local13
22588     01 26 06 F1 | 	add	local05, #1
2258c     1C 20 86 F1 | 	sub	local02, #28
22590     A4 00 90 FD | 	jmp	#LR__3632
22594                 | LR__3628
22594                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
22594     00 26 06 F6 | 	mov	local05, #0
22598     00 28 06 F6 | 	mov	local06, #0
2259c     08 3A 06 F6 | 	mov	local15, #8
225a0                 | LR__3629
225a0     14 25 02 F6 | 	mov	local04, local06
225a4     0C 20 06 F1 | 	add	local02, #12
225a8     10 25 02 F1 | 	add	local04, local02
225ac     12 37 CA FA | 	rdbyte	local13, local04 wz
225b0     0C 20 86 F1 | 	sub	local02, #12
225b4     80 00 90 AD |  if_e	jmp	#LR__3631
225b8     14 2D 02 F6 | 	mov	local08, local06
225bc     0C 20 06 F1 | 	add	local02, #12
225c0     10 2D 02 F1 | 	add	local08, local02
225c4     16 33 C2 FA | 	rdbyte	local11, local08
225c8     19 39 32 F9 | 	getword	local14, local11, #0
225cc     2E 38 0E F2 | 	cmp	local14, #46 wz
225d0     0C 20 86 F1 | 	sub	local02, #12
225d4     10 3A 06 A6 |  if_e	mov	local15, #16
225d8     19 39 32 F9 | 	getword	local14, local11, #0
225dc     41 38 16 F2 | 	cmp	local14, #65 wc
225e0     30 00 90 CD |  if_b	jmp	#LR__3630
225e4     19 2D 32 F9 | 	getword	local08, local11, #0
225e8     5B 2C 16 F2 | 	cmp	local08, #91 wc
225ec     24 00 90 3D |  if_ae	jmp	#LR__3630
225f0     1C 1E 06 F1 | 	add	local01, #28
225f4     0F 2F 02 FB | 	rdlong	local09, local01
225f8     1C 1E 86 F1 | 	sub	local01, #28
225fc     0C 2E 06 F1 | 	add	local09, #12
22600     17 31 C2 FA | 	rdbyte	local10, local09
22604     1D 39 E2 F8 | 	getbyte	local14, local15, #0
22608     1C 31 CA F7 | 	test	local10, local14 wz
2260c     19 33 32 59 |  if_ne	getword	local11, local11, #0
22610     20 32 06 51 |  if_ne	add	local11, #32
22614                 | LR__3630
22614     13 39 02 F6 | 	mov	local14, local05
22618     1C 20 06 F1 | 	add	local02, #28
2261c     10 39 02 F1 | 	add	local14, local02
22620     19 33 32 F9 | 	getword	local11, local11, #0
22624     1C 33 42 FC | 	wrbyte	local11, local14
22628     01 28 06 F1 | 	add	local06, #1
2262c     01 26 06 F1 | 	add	local05, #1
22630     1C 20 86 F1 | 	sub	local02, #28
22634     68 FF 9F FD | 	jmp	#LR__3629
22638                 | LR__3631
22638                 | LR__3632
22638     1C 20 06 F1 | 	add	local02, #28
2263c     10 27 02 F1 | 	add	local05, local02
22640     13 01 48 FC | 	wrbyte	#0, local05
22644     1C 1E 06 F1 | 	add	local01, #28
22648     0F 25 02 FB | 	rdlong	local04, local01
2264c     1C 1E 86 F1 | 	sub	local01, #28
22650     0C 24 06 F1 | 	add	local04, #12
22654     12 37 CA FA | 	rdbyte	local13, local04 wz
22658     1C 20 86 F1 | 	sub	local02, #28
2265c     0C 20 06 A1 |  if_e	add	local02, #12
22660     10 01 48 AC |  if_e	wrbyte	#0, local02
22664     0C 20 86 A1 |  if_e	sub	local02, #12
22668                 | LR__3633
22668     1C 1E 06 F1 | 	add	local01, #28
2266c     0F 35 02 FB | 	rdlong	local12, local01
22670     0B 34 06 F1 | 	add	local12, #11
22674     1A 25 C2 FA | 	rdbyte	local04, local12
22678     3F 24 06 F5 | 	and	local04, #63
2267c     08 20 06 F1 | 	add	local02, #8
22680     10 25 42 FC | 	wrbyte	local04, local02
22684     08 20 86 F1 | 	sub	local02, #8
22688     0F 13 02 FB | 	rdlong	arg01, local01
2268c     1C 12 06 F1 | 	add	arg01, #28
22690                 | ' {
22690                 | ' 
22690                 | ' 	return *((DWORD*)ptr);
22690     09 FB 01 FB | 	rdlong	result1, arg01
22694     10 FB 61 FC | 	wrlong	result1, local02
22698     0F 13 02 FB | 	rdlong	arg01, local01
2269c     16 12 06 F1 | 	add	arg01, #22
226a0                 | ' {
226a0                 | ' 
226a0                 | ' 	return *((WORD*)ptr);
226a0     09 FB E1 FA | 	rdword	result1, arg01
226a4     06 20 06 F1 | 	add	local02, #6
226a8     10 FB 51 FC | 	wrword	result1, local02
226ac     0F 13 02 FB | 	rdlong	arg01, local01
226b0     18 12 06 F1 | 	add	arg01, #24
226b4                 | ' {
226b4                 | ' 
226b4                 | ' 	return *((WORD*)ptr);
226b4     09 FB E1 FA | 	rdword	result1, arg01
226b8     02 20 86 F1 | 	sub	local02, #2
226bc     10 FB 51 FC | 	wrword	result1, local02
226c0                 | LR__3634
226c0     A7 F0 03 F6 | 	mov	ptra, fp
226c4     B2 00 A0 FD | 	call	#popregs_
226c8                 | _fatfs_cc_get_fileinfo_ret
226c8     2D 00 64 FD | 	ret
226cc                 | 
226cc                 | _fatfs_cc_create_name
226cc     0D 4A 05 F6 | 	mov	COUNT_, #13
226d0     A8 00 A0 FD | 	call	#pushregs_
226d4     34 F0 07 F1 | 	add	ptra, #52
226d8     04 4E 05 F1 | 	add	fp, #4
226dc     A7 12 62 FC | 	wrlong	arg01, fp
226e0     04 4E 05 F1 | 	add	fp, #4
226e4     A7 14 62 FC | 	wrlong	arg02, fp
226e8     0A FB 01 FB | 	rdlong	result1, arg02
226ec     28 4E 05 F1 | 	add	fp, #40
226f0     A7 FA 61 FC | 	wrlong	result1, fp
226f4     2C 4E 85 F1 | 	sub	fp, #44
226f8     A7 FA 01 FB | 	rdlong	result1, fp
226fc     FD 1E 02 FB | 	rdlong	local01, result1
22700     0C 1E 06 F1 | 	add	local01, #12
22704     0F 21 02 FB | 	rdlong	local02, local01
22708     14 4E 05 F1 | 	add	fp, #20
2270c     A7 20 62 FC | 	wrlong	local02, fp
22710     14 4E 05 F1 | 	add	fp, #20
22714     A7 00 68 FC | 	wrlong	#0, fp
22718     2C 4E 85 F1 | 	sub	fp, #44
2271c                 | ' 
2271c                 | ' 
2271c                 | ' 
2271c                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2271c                 | ' 	for (;;) {
2271c                 | LR__3640
2271c     30 4E 05 F1 | 	add	fp, #48
22720     A7 12 02 F6 | 	mov	arg01, fp
22724     30 4E 85 F1 | 	sub	fp, #48
22728     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2272c     1C 4E 05 F1 | 	add	fp, #28
22730     A7 FA 61 FC | 	wrlong	result1, fp
22734     1C 4E 85 F1 | 	sub	fp, #28
22738     FF FF 7F FF 
2273c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
22740     06 FA 05 A6 |  if_e	mov	result1, #6
22744     74 08 90 AD |  if_e	jmp	#LR__3680
22748     1C 4E 05 F1 | 	add	fp, #28
2274c     A7 1E 02 FB | 	rdlong	local01, fp
22750     1C 4E 85 F1 | 	sub	fp, #28
22754     80 00 00 FF 
22758     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2275c     3C 00 90 CD |  if_b	jmp	#LR__3641
22760     18 4E 05 F1 | 	add	fp, #24
22764     A7 22 02 FB | 	rdlong	local03, fp
22768     14 4E 05 F1 | 	add	fp, #20
2276c     A7 1E 02 FB | 	rdlong	local01, fp
22770     0F 25 02 F6 | 	mov	local04, local01
22774     01 24 06 F1 | 	add	local04, #1
22778     A7 24 62 FC | 	wrlong	local04, fp
2277c     01 1E 66 F0 | 	shl	local01, #1
22780     11 1F 02 F1 | 	add	local01, local03
22784     10 4E 85 F1 | 	sub	fp, #16
22788     A7 26 02 FB | 	rdlong	local05, fp
2278c     1C 4E 85 F1 | 	sub	fp, #28
22790     13 29 02 F6 | 	mov	local06, local05
22794     10 28 46 F0 | 	shr	local06, #16
22798     0F 29 52 FC | 	wrword	local06, local01
2279c                 | LR__3641
2279c     1C 4E 05 F1 | 	add	fp, #28
227a0     A7 1E 02 FB | 	rdlong	local01, fp
227a4     08 4E 85 F1 | 	sub	fp, #8
227a8     A7 1E 52 FC | 	wrword	local01, fp
227ac     A7 1E E2 FA | 	rdword	local01, fp
227b0     14 4E 85 F1 | 	sub	fp, #20
227b4     20 1E 16 F2 | 	cmp	local01, #32 wc
227b8     B0 00 90 CD |  if_b	jmp	#LR__3643
227bc     14 4E 05 F1 | 	add	fp, #20
227c0     A7 1E E2 FA | 	rdword	local01, fp
227c4     14 4E 85 F1 | 	sub	fp, #20
227c8     2F 1E 0E F2 | 	cmp	local01, #47 wz
227cc     14 4E 05 51 |  if_ne	add	fp, #20
227d0     A7 24 E2 5A |  if_ne	rdword	local04, fp
227d4     14 4E 85 51 |  if_ne	sub	fp, #20
227d8     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
227dc     8C 00 90 AD |  if_e	jmp	#LR__3643
227e0     14 4E 05 F1 | 	add	fp, #20
227e4     A7 12 E2 FA | 	rdword	arg01, fp
227e8     14 4E 85 F1 | 	sub	fp, #20
227ec     80 12 16 F2 | 	cmp	arg01, #128 wc
227f0     24 00 90 3D |  if_ae	jmp	#LR__3642
227f4     43 01 00 FF 
227f8     18 13 06 F6 | 	mov	arg01, ##@LR__4302
227fc     14 4E 05 F1 | 	add	fp, #20
22800     A7 14 E2 FA | 	rdword	arg02, fp
22804     14 4E 85 F1 | 	sub	fp, #20
22808     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2280c     00 FA 0D F2 | 	cmp	result1, #0 wz
22810     06 FA 05 56 |  if_ne	mov	result1, #6
22814     A4 07 90 5D |  if_ne	jmp	#LR__3680
22818                 | LR__3642
22818     2C 4E 05 F1 | 	add	fp, #44
2281c     A7 28 02 FB | 	rdlong	local06, fp
22820     2C 4E 85 F1 | 	sub	fp, #44
22824     FF 28 16 F2 | 	cmp	local06, #255 wc
22828     06 FA 05 36 |  if_ae	mov	result1, #6
2282c     8C 07 90 3D |  if_ae	jmp	#LR__3680
22830     18 4E 05 F1 | 	add	fp, #24
22834     A7 22 02 FB | 	rdlong	local03, fp
22838     14 4E 05 F1 | 	add	fp, #20
2283c     A7 20 02 FB | 	rdlong	local02, fp
22840     10 25 02 F6 | 	mov	local04, local02
22844     01 24 06 F1 | 	add	local04, #1
22848     A7 24 62 FC | 	wrlong	local04, fp
2284c     10 1F 02 F6 | 	mov	local01, local02
22850     01 1E 66 F0 | 	shl	local01, #1
22854     11 1F 02 F1 | 	add	local01, local03
22858     18 4E 85 F1 | 	sub	fp, #24
2285c     A7 28 E2 FA | 	rdword	local06, fp
22860     14 4E 85 F1 | 	sub	fp, #20
22864     0F 29 52 FC | 	wrword	local06, local01
22868     B0 FE 9F FD | 	jmp	#LR__3640
2286c                 | LR__3643
2286c     14 4E 05 F1 | 	add	fp, #20
22870     A7 2A E2 FA | 	rdword	local07, fp
22874     14 4E 85 F1 | 	sub	fp, #20
22878     20 2A 16 F2 | 	cmp	local07, #32 wc
2287c     10 4E 05 C1 |  if_b	add	fp, #16
22880     A7 08 48 CC |  if_b	wrbyte	#4, fp
22884     10 4E 85 C1 |  if_b	sub	fp, #16
22888     74 00 90 CD |  if_b	jmp	#LR__3648
2288c     97 24 48 FB | 	callpa	#(@LR__3646-@LR__3644)>>2,fcache_load_ptr_
22890                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
22890                 | LR__3644
22890     30 4E 05 F1 | 	add	fp, #48
22894     A7 24 02 FB | 	rdlong	local04, fp
22898     30 4E 85 F1 | 	sub	fp, #48
2289c     12 2B C2 FA | 	rdbyte	local07, local04
228a0     2F 2A 0E F2 | 	cmp	local07, #47 wz
228a4     18 00 90 AD |  if_e	jmp	#LR__3645
228a8     30 4E 05 F1 | 	add	fp, #48
228ac     A7 24 02 FB | 	rdlong	local04, fp
228b0     30 4E 85 F1 | 	sub	fp, #48
228b4     12 21 C2 FA | 	rdbyte	local02, local04
228b8     5C 20 0E F2 | 	cmp	local02, #92 wz
228bc     18 00 90 5D |  if_ne	jmp	#LR__3647
228c0                 | LR__3645
228c0     30 4E 05 F1 | 	add	fp, #48
228c4     A7 1E 02 FB | 	rdlong	local01, fp
228c8     01 1E 06 F1 | 	add	local01, #1
228cc     A7 1E 62 FC | 	wrlong	local01, fp
228d0     30 4E 85 F1 | 	sub	fp, #48
228d4     B8 FF 9F FD | 	jmp	#LR__3644
228d8                 | LR__3646
228d8                 | LR__3647
228d8     10 4E 05 F1 | 	add	fp, #16
228dc     A7 00 48 FC | 	wrbyte	#0, fp
228e0     20 4E 05 F1 | 	add	fp, #32
228e4     A7 28 02 FB | 	rdlong	local06, fp
228e8     30 4E 85 F1 | 	sub	fp, #48
228ec     14 2B C2 FA | 	rdbyte	local07, local06
228f0     20 2A 16 F2 | 	cmp	local07, #32 wc
228f4     10 4E 05 C1 |  if_b	add	fp, #16
228f8     A7 08 48 CC |  if_b	wrbyte	#4, fp
228fc     10 4E 85 C1 |  if_b	sub	fp, #16
22900                 | LR__3648
22900     08 4E 05 F1 | 	add	fp, #8
22904     A7 2A 02 FB | 	rdlong	local07, fp
22908     28 4E 05 F1 | 	add	fp, #40
2290c     A7 1E 02 FB | 	rdlong	local01, fp
22910     30 4E 85 F1 | 	sub	fp, #48
22914     15 1F 62 FC | 	wrlong	local01, local07
22918     97 38 48 FB | 	callpa	#(@LR__3650-@LR__3649)>>2,fcache_load_ptr_
2291c                 | ' 	}
2291c                 | ' 	*path = p;
2291c                 | ' #line 2862 "ff.c"
2291c                 | ' 	while (di) {
2291c                 | LR__3649
2291c     2C 4E 05 F1 | 	add	fp, #44
22920     A7 2A 0A FB | 	rdlong	local07, fp wz
22924     2C 4E 85 F1 | 	sub	fp, #44
22928     60 00 90 AD |  if_e	jmp	#LR__3651
2292c     18 4E 05 F1 | 	add	fp, #24
22930     A7 28 02 FB | 	rdlong	local06, fp
22934     14 4E 05 F1 | 	add	fp, #20
22938     A7 24 02 FB | 	rdlong	local04, fp
2293c     01 24 86 F1 | 	sub	local04, #1
22940     01 24 66 F0 | 	shl	local04, #1
22944     14 25 02 F1 | 	add	local04, local06
22948     12 29 E2 FA | 	rdword	local06, local04
2294c     18 4E 85 F1 | 	sub	fp, #24
22950     A7 28 52 FC | 	wrword	local06, fp
22954     A7 2A E2 FA | 	rdword	local07, fp
22958     14 4E 85 F1 | 	sub	fp, #20
2295c     20 2A 0E F2 | 	cmp	local07, #32 wz
22960     14 4E 05 51 |  if_ne	add	fp, #20
22964     A7 1E E2 5A |  if_ne	rdword	local01, fp
22968     14 4E 85 51 |  if_ne	sub	fp, #20
2296c     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
22970     18 00 90 5D |  if_ne	jmp	#LR__3651
22974     2C 4E 05 F1 | 	add	fp, #44
22978     A7 1E 02 FB | 	rdlong	local01, fp
2297c     01 1E 86 F1 | 	sub	local01, #1
22980     A7 1E 62 FC | 	wrlong	local01, fp
22984     2C 4E 85 F1 | 	sub	fp, #44
22988     90 FF 9F FD | 	jmp	#LR__3649
2298c                 | LR__3650
2298c                 | LR__3651
2298c     18 4E 05 F1 | 	add	fp, #24
22990     A7 2C 02 FB | 	rdlong	local08, fp
22994     14 4E 05 F1 | 	add	fp, #20
22998     A7 24 02 FB | 	rdlong	local04, fp
2299c     01 24 66 F0 | 	shl	local04, #1
229a0     16 25 02 F1 | 	add	local04, local08
229a4     12 01 58 FC | 	wrword	#0, local04
229a8     A7 2A 0A FB | 	rdlong	local07, fp wz
229ac     2C 4E 85 F1 | 	sub	fp, #44
229b0     06 FA 05 A6 |  if_e	mov	result1, #6
229b4     04 06 90 AD |  if_e	jmp	#LR__3680
229b8                 | ' 
229b8                 | ' 
229b8                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
229b8     28 4E 05 F1 | 	add	fp, #40
229bc     A7 00 68 FC | 	wrlong	#0, fp
229c0     28 4E 85 F1 | 	sub	fp, #40
229c4     97 22 48 FB | 	callpa	#(@LR__3653-@LR__3652)>>2,fcache_load_ptr_
229c8                 | LR__3652
229c8     18 4E 05 F1 | 	add	fp, #24
229cc     A7 2E 02 FB | 	rdlong	local09, fp
229d0     10 4E 05 F1 | 	add	fp, #16
229d4     A7 30 02 FB | 	rdlong	local10, fp
229d8     28 4E 85 F1 | 	sub	fp, #40
229dc     01 30 66 F0 | 	shl	local10, #1
229e0     17 31 02 F1 | 	add	local10, local09
229e4     18 33 E2 FA | 	rdword	local11, local10
229e8     20 32 0E F2 | 	cmp	local11, #32 wz
229ec     1C 00 90 5D |  if_ne	jmp	#LR__3654
229f0     28 4E 05 F1 | 	add	fp, #40
229f4     A7 34 02 FB | 	rdlong	local12, fp
229f8     1A 27 02 F6 | 	mov	local05, local12
229fc     01 26 06 F1 | 	add	local05, #1
22a00     A7 26 62 FC | 	wrlong	local05, fp
22a04     28 4E 85 F1 | 	sub	fp, #40
22a08     BC FF 9F FD | 	jmp	#LR__3652
22a0c                 | LR__3653
22a0c                 | LR__3654
22a0c     28 4E 05 F1 | 	add	fp, #40
22a10     A7 2A 02 FB | 	rdlong	local07, fp
22a14     28 4E 85 F1 | 	sub	fp, #40
22a18     01 2A 16 F2 | 	cmp	local07, #1 wc
22a1c     28 00 90 3D |  if_ae	jmp	#LR__3655
22a20     18 4E 05 F1 | 	add	fp, #24
22a24     A7 22 02 FB | 	rdlong	local03, fp
22a28     10 4E 05 F1 | 	add	fp, #16
22a2c     A7 2E 02 FB | 	rdlong	local09, fp
22a30     28 4E 85 F1 | 	sub	fp, #40
22a34     01 2E 66 F0 | 	shl	local09, #1
22a38     11 2F 02 F1 | 	add	local09, local03
22a3c     17 1F E2 FA | 	rdword	local01, local09
22a40     2E 1E 0E F2 | 	cmp	local01, #46 wz
22a44     14 00 90 5D |  if_ne	jmp	#LR__3656
22a48                 | LR__3655
22a48     10 4E 05 F1 | 	add	fp, #16
22a4c     A7 2A C2 FA | 	rdbyte	local07, fp
22a50     03 2A 46 F5 | 	or	local07, #3
22a54     A7 2A 42 FC | 	wrbyte	local07, fp
22a58     10 4E 85 F1 | 	sub	fp, #16
22a5c                 | LR__3656
22a5c     97 2C 48 FB | 	callpa	#(@LR__3658-@LR__3657)>>2,fcache_load_ptr_
22a60                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
22a60                 | LR__3657
22a60     2C 4E 05 F1 | 	add	fp, #44
22a64     A7 2A 02 FB | 	rdlong	local07, fp
22a68     2C 4E 85 F1 | 	sub	fp, #44
22a6c     01 2A 16 F2 | 	cmp	local07, #1 wc
22a70     44 00 90 CD |  if_b	jmp	#LR__3659
22a74     18 4E 05 F1 | 	add	fp, #24
22a78     A7 28 02 FB | 	rdlong	local06, fp
22a7c     14 4E 05 F1 | 	add	fp, #20
22a80     A7 22 02 FB | 	rdlong	local03, fp
22a84     2C 4E 85 F1 | 	sub	fp, #44
22a88     01 22 86 F1 | 	sub	local03, #1
22a8c     01 22 66 F0 | 	shl	local03, #1
22a90     14 23 02 F1 | 	add	local03, local06
22a94     11 1F E2 FA | 	rdword	local01, local03
22a98     2E 1E 0E F2 | 	cmp	local01, #46 wz
22a9c     18 00 90 AD |  if_e	jmp	#LR__3659
22aa0     2C 4E 05 F1 | 	add	fp, #44
22aa4     A7 1E 02 FB | 	rdlong	local01, fp
22aa8     01 1E 86 F1 | 	sub	local01, #1
22aac     A7 1E 62 FC | 	wrlong	local01, fp
22ab0     2C 4E 85 F1 | 	sub	fp, #44
22ab4     A8 FF 9F FD | 	jmp	#LR__3657
22ab8                 | LR__3658
22ab8                 | LR__3659
22ab8     04 4E 05 F1 | 	add	fp, #4
22abc     A7 12 02 FB | 	rdlong	arg01, fp
22ac0     04 4E 85 F1 | 	sub	fp, #4
22ac4     20 12 06 F1 | 	add	arg01, #32
22ac8     20 14 06 F6 | 	mov	arg02, #32
22acc     0B 16 06 F6 | 	mov	arg03, #11
22ad0     09 37 02 F6 | 	mov	local13, arg01
22ad4     98 00 A0 FD | 	call	#\builtin_bytefill_
22ad8     1B FB 01 F6 | 	mov	result1, local13
22adc     0C 4E 05 F1 | 	add	fp, #12
22ae0     A7 00 48 FC | 	wrbyte	#0, fp
22ae4     A7 2A C2 FA | 	rdbyte	local07, fp
22ae8     14 4E 05 F1 | 	add	fp, #20
22aec     A7 2A 62 FC | 	wrlong	local07, fp
22af0     04 4E 05 F1 | 	add	fp, #4
22af4     A7 10 68 FC | 	wrlong	#8, fp
22af8     24 4E 85 F1 | 	sub	fp, #36
22afc                 | ' 
22afc                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
22afc                 | ' 	i = b = 0; ni = 8;
22afc                 | ' 	for (;;) {
22afc                 | LR__3660
22afc     18 4E 05 F1 | 	add	fp, #24
22b00     A7 22 02 FB | 	rdlong	local03, fp
22b04     10 4E 05 F1 | 	add	fp, #16
22b08     A7 2E 02 FB | 	rdlong	local09, fp
22b0c     17 25 02 F6 | 	mov	local04, local09
22b10     01 24 06 F1 | 	add	local04, #1
22b14     A7 24 62 FC | 	wrlong	local04, fp
22b18     01 2E 66 F0 | 	shl	local09, #1
22b1c     11 2F 02 F1 | 	add	local09, local03
22b20     17 29 E2 FA | 	rdword	local06, local09
22b24     14 4E 85 F1 | 	sub	fp, #20
22b28     A7 28 52 FC | 	wrword	local06, fp
22b2c     A7 2A EA FA | 	rdword	local07, fp wz
22b30     14 4E 85 F1 | 	sub	fp, #20
22b34     74 03 90 AD |  if_e	jmp	#LR__3676
22b38     14 4E 05 F1 | 	add	fp, #20
22b3c     A7 2A E2 FA | 	rdword	local07, fp
22b40     14 4E 85 F1 | 	sub	fp, #20
22b44     20 2A 0E F2 | 	cmp	local07, #32 wz
22b48     30 00 90 AD |  if_e	jmp	#LR__3661
22b4c     14 4E 05 F1 | 	add	fp, #20
22b50     A7 1E E2 FA | 	rdword	local01, fp
22b54     14 4E 85 F1 | 	sub	fp, #20
22b58     2E 1E 0E F2 | 	cmp	local01, #46 wz
22b5c     34 00 90 5D |  if_ne	jmp	#LR__3662
22b60     28 4E 05 F1 | 	add	fp, #40
22b64     A7 24 02 FB | 	rdlong	local04, fp
22b68     04 4E 05 F1 | 	add	fp, #4
22b6c     A7 30 02 FB | 	rdlong	local10, fp
22b70     2C 4E 85 F1 | 	sub	fp, #44
22b74     18 25 0A F2 | 	cmp	local04, local10 wz
22b78     18 00 90 AD |  if_e	jmp	#LR__3662
22b7c                 | LR__3661
22b7c     10 4E 05 F1 | 	add	fp, #16
22b80     A7 2A C2 FA | 	rdbyte	local07, fp
22b84     03 2A 46 F5 | 	or	local07, #3
22b88     A7 2A 42 FC | 	wrbyte	local07, fp
22b8c     10 4E 85 F1 | 	sub	fp, #16
22b90                 | ' 			cf |=  0x01  |  0x02 ;
22b90                 | ' 			continue;
22b90     68 FF 9F FD | 	jmp	#LR__3660
22b94                 | LR__3662
22b94     20 4E 05 F1 | 	add	fp, #32
22b98     A7 2A 02 FB | 	rdlong	local07, fp
22b9c     04 4E 05 F1 | 	add	fp, #4
22ba0     A7 1E 02 FB | 	rdlong	local01, fp
22ba4     24 4E 85 F1 | 	sub	fp, #36
22ba8     0F 2B 12 F2 | 	cmp	local07, local01 wc
22bac     1C 00 90 3D |  if_ae	jmp	#LR__3663
22bb0     28 4E 05 F1 | 	add	fp, #40
22bb4     A7 2C 02 FB | 	rdlong	local08, fp
22bb8     04 4E 05 F1 | 	add	fp, #4
22bbc     A7 30 02 FB | 	rdlong	local10, fp
22bc0     2C 4E 85 F1 | 	sub	fp, #44
22bc4     18 2D 0A F2 | 	cmp	local08, local10 wz
22bc8     B0 00 90 5D |  if_ne	jmp	#LR__3665
22bcc                 | LR__3663
22bcc     24 4E 05 F1 | 	add	fp, #36
22bd0     A7 2A 02 FB | 	rdlong	local07, fp
22bd4     24 4E 85 F1 | 	sub	fp, #36
22bd8     0B 2A 0E F2 | 	cmp	local07, #11 wz
22bdc     18 00 90 5D |  if_ne	jmp	#LR__3664
22be0     10 4E 05 F1 | 	add	fp, #16
22be4     A7 2A C2 FA | 	rdbyte	local07, fp
22be8     03 2A 46 F5 | 	or	local07, #3
22bec     A7 2A 42 FC | 	wrbyte	local07, fp
22bf0     10 4E 85 F1 | 	sub	fp, #16
22bf4                 | ' 				cf |=  0x01  |  0x02 ;
22bf4                 | ' 				break;
22bf4     B4 02 90 FD | 	jmp	#LR__3676
22bf8                 | LR__3664
22bf8     28 4E 05 F1 | 	add	fp, #40
22bfc     A7 2A 02 FB | 	rdlong	local07, fp
22c00     04 4E 05 F1 | 	add	fp, #4
22c04     A7 1E 02 FB | 	rdlong	local01, fp
22c08     2C 4E 85 F1 | 	sub	fp, #44
22c0c     0F 2B 0A F2 | 	cmp	local07, local01 wz
22c10     10 4E 05 51 |  if_ne	add	fp, #16
22c14     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
22c18     03 2A 46 55 |  if_ne	or	local07, #3
22c1c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22c20     10 4E 85 51 |  if_ne	sub	fp, #16
22c24     28 4E 05 F1 | 	add	fp, #40
22c28     A7 2A 02 FB | 	rdlong	local07, fp
22c2c     04 4E 05 F1 | 	add	fp, #4
22c30     A7 20 02 FB | 	rdlong	local02, fp
22c34     2C 4E 85 F1 | 	sub	fp, #44
22c38     10 2B 1A F2 | 	cmp	local07, local02 wcz
22c3c     6C 02 90 1D |  if_a	jmp	#LR__3676
22c40     2C 4E 05 F1 | 	add	fp, #44
22c44     A7 2A 02 FB | 	rdlong	local07, fp
22c48     04 4E 85 F1 | 	sub	fp, #4
22c4c     A7 2A 62 FC | 	wrlong	local07, fp
22c50     08 4E 85 F1 | 	sub	fp, #8
22c54     A7 10 68 FC | 	wrlong	#8, fp
22c58     04 4E 05 F1 | 	add	fp, #4
22c5c     A7 16 68 FC | 	wrlong	#11, fp
22c60     18 4E 85 F1 | 	sub	fp, #24
22c64     A7 32 C2 FA | 	rdbyte	local11, fp
22c68     19 2B E2 F8 | 	getbyte	local07, local11, #0
22c6c     02 2A 66 F0 | 	shl	local07, #2
22c70     A7 2A 42 FC | 	wrbyte	local07, fp
22c74     0C 4E 85 F1 | 	sub	fp, #12
22c78                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
22c78                 | ' 			continue;
22c78     80 FE 9F FD | 	jmp	#LR__3660
22c7c                 | LR__3665
22c7c     14 4E 05 F1 | 	add	fp, #20
22c80     A7 2A E2 FA | 	rdword	local07, fp
22c84     14 4E 85 F1 | 	sub	fp, #20
22c88     80 2A 16 F2 | 	cmp	local07, #128 wc
22c8c     6C 00 90 CD |  if_b	jmp	#LR__3667
22c90     10 4E 05 F1 | 	add	fp, #16
22c94     A7 2A C2 FA | 	rdbyte	local07, fp
22c98     02 2A 46 F5 | 	or	local07, #2
22c9c     A7 2A 42 FC | 	wrbyte	local07, fp
22ca0     04 4E 05 F1 | 	add	fp, #4
22ca4     A7 12 E2 FA | 	rdword	arg01, fp
22ca8     14 4E 85 F1 | 	sub	fp, #20
22cac     01 00 00 FF 
22cb0     52 15 06 F6 | 	mov	arg02, ##850
22cb4     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
22cb8     14 4E 05 F1 | 	add	fp, #20
22cbc     A7 FA 51 FC | 	wrword	result1, fp
22cc0     A7 2A E2 FA | 	rdword	local07, fp
22cc4     14 4E 85 F1 | 	sub	fp, #20
22cc8     80 2A CE F7 | 	test	local07, #128 wz
22ccc     2C 00 90 AD |  if_e	jmp	#LR__3666
22cd0     14 4E 05 F1 | 	add	fp, #20
22cd4     A7 20 E2 FA | 	rdword	local02, fp
22cd8     7F 20 06 F5 | 	and	local02, #127
22cdc     01 00 00 FF 
22ce0     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
22ce4     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
22ce8     10 2B C2 FA | 	rdbyte	local07, local02
22cec     A7 2A 52 FC | 	wrword	local07, fp
22cf0     14 4E 85 F1 | 	sub	fp, #20
22cf4     01 00 00 FF 
22cf8     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
22cfc                 | LR__3666
22cfc                 | LR__3667
22cfc     14 4E 05 F1 | 	add	fp, #20
22d00     A7 2A E2 FA | 	rdword	local07, fp
22d04     14 4E 85 F1 | 	sub	fp, #20
22d08     00 2B 16 F2 | 	cmp	local07, #256 wc
22d0c     88 00 90 CD |  if_b	jmp	#LR__3669
22d10     24 4E 05 F1 | 	add	fp, #36
22d14     A7 2A 02 FB | 	rdlong	local07, fp
22d18     01 2A 86 F1 | 	sub	local07, #1
22d1c     04 4E 85 F1 | 	sub	fp, #4
22d20     A7 20 02 FB | 	rdlong	local02, fp
22d24     20 4E 85 F1 | 	sub	fp, #32
22d28     15 21 12 F2 | 	cmp	local02, local07 wc
22d2c     2C 00 90 CD |  if_b	jmp	#LR__3668
22d30     10 4E 05 F1 | 	add	fp, #16
22d34     A7 32 C2 FA | 	rdbyte	local11, fp
22d38     19 2B E2 F8 | 	getbyte	local07, local11, #0
22d3c     03 2A 46 F5 | 	or	local07, #3
22d40     A7 2A 42 FC | 	wrbyte	local07, fp
22d44     14 4E 05 F1 | 	add	fp, #20
22d48     A7 2A 02 FB | 	rdlong	local07, fp
22d4c     04 4E 85 F1 | 	sub	fp, #4
22d50     A7 2A 62 FC | 	wrlong	local07, fp
22d54     20 4E 85 F1 | 	sub	fp, #32
22d58                 | ' 				cf |=  0x01  |  0x02 ;
22d58                 | ' 				i = ni; continue;
22d58     A0 FD 9F FD | 	jmp	#LR__3660
22d5c                 | LR__3668
22d5c     04 4E 05 F1 | 	add	fp, #4
22d60     A7 2E 02 FB | 	rdlong	local09, fp
22d64     1C 4E 05 F1 | 	add	fp, #28
22d68     A7 30 02 FB | 	rdlong	local10, fp
22d6c     18 25 02 F6 | 	mov	local04, local10
22d70     01 24 06 F1 | 	add	local04, #1
22d74     A7 24 62 FC | 	wrlong	local04, fp
22d78     20 2E 06 F1 | 	add	local09, #32
22d7c     17 31 02 F1 | 	add	local10, local09
22d80     0C 4E 85 F1 | 	sub	fp, #12
22d84     A7 22 E2 FA | 	rdword	local03, fp
22d88     14 4E 85 F1 | 	sub	fp, #20
22d8c     08 22 46 F0 | 	shr	local03, #8
22d90     18 23 42 FC | 	wrbyte	local03, local10
22d94     D4 00 90 FD | 	jmp	#LR__3675
22d98                 | LR__3669
22d98     14 4E 05 F1 | 	add	fp, #20
22d9c     A7 2A EA FA | 	rdword	local07, fp wz
22da0     14 4E 85 F1 | 	sub	fp, #20
22da4     20 00 90 AD |  if_e	jmp	#LR__3670
22da8     43 01 00 FF 
22dac     21 13 06 F6 | 	mov	arg01, ##@LR__4303
22db0     14 4E 05 F1 | 	add	fp, #20
22db4     A7 14 E2 FA | 	rdword	arg02, fp
22db8     14 4E 85 F1 | 	sub	fp, #20
22dbc     48 CB BF FD | 	call	#_fatfs_cc_strchr
22dc0     00 FA 0D F2 | 	cmp	result1, #0 wz
22dc4     20 00 90 AD |  if_e	jmp	#LR__3671
22dc8                 | LR__3670
22dc8     14 4E 05 F1 | 	add	fp, #20
22dcc     A7 BE 58 FC | 	wrword	#95, fp
22dd0     04 4E 85 F1 | 	sub	fp, #4
22dd4     A7 2A C2 FA | 	rdbyte	local07, fp
22dd8     03 2A 46 F5 | 	or	local07, #3
22ddc     A7 2A 42 FC | 	wrbyte	local07, fp
22de0     10 4E 85 F1 | 	sub	fp, #16
22de4     84 00 90 FD | 	jmp	#LR__3674
22de8                 | LR__3671
22de8     14 4E 05 F1 | 	add	fp, #20
22dec     A7 2A E2 FA | 	rdword	local07, fp
22df0     14 4E 85 F1 | 	sub	fp, #20
22df4     41 2A 16 F2 | 	cmp	local07, #65 wc
22df8     24 00 90 CD |  if_b	jmp	#LR__3672
22dfc     14 4E 05 F1 | 	add	fp, #20
22e00     A7 1E E2 FA | 	rdword	local01, fp
22e04     14 4E 85 F1 | 	sub	fp, #20
22e08     5B 1E 16 F2 | 	cmp	local01, #91 wc
22e0c     0C 4E 05 C1 |  if_b	add	fp, #12
22e10     A7 2A C2 CA |  if_b	rdbyte	local07, fp
22e14     02 2A 46 C5 |  if_b	or	local07, #2
22e18     A7 2A 42 CC |  if_b	wrbyte	local07, fp
22e1c     0C 4E 85 C1 |  if_b	sub	fp, #12
22e20                 | LR__3672
22e20     14 4E 05 F1 | 	add	fp, #20
22e24     A7 2A E2 FA | 	rdword	local07, fp
22e28     14 4E 85 F1 | 	sub	fp, #20
22e2c     61 2A 16 F2 | 	cmp	local07, #97 wc
22e30     38 00 90 CD |  if_b	jmp	#LR__3673
22e34     14 4E 05 F1 | 	add	fp, #20
22e38     A7 1E E2 FA | 	rdword	local01, fp
22e3c     14 4E 85 F1 | 	sub	fp, #20
22e40     7B 1E 16 F2 | 	cmp	local01, #123 wc
22e44     24 00 90 3D |  if_ae	jmp	#LR__3673
22e48     0C 4E 05 F1 | 	add	fp, #12
22e4c     A7 2A C2 FA | 	rdbyte	local07, fp
22e50     01 2A 46 F5 | 	or	local07, #1
22e54     A7 2A 42 FC | 	wrbyte	local07, fp
22e58     08 4E 05 F1 | 	add	fp, #8
22e5c     A7 2A E2 FA | 	rdword	local07, fp
22e60     20 2A 86 F1 | 	sub	local07, #32
22e64     A7 2A 52 FC | 	wrword	local07, fp
22e68     14 4E 85 F1 | 	sub	fp, #20
22e6c                 | LR__3673
22e6c                 | LR__3674
22e6c                 | LR__3675
22e6c     04 4E 05 F1 | 	add	fp, #4
22e70     A7 32 02 FB | 	rdlong	local11, fp
22e74     19 2F 02 F6 | 	mov	local09, local11
22e78     1C 4E 05 F1 | 	add	fp, #28
22e7c     A7 20 02 FB | 	rdlong	local02, fp
22e80     10 25 02 F6 | 	mov	local04, local02
22e84     01 24 06 F1 | 	add	local04, #1
22e88     A7 24 62 FC | 	wrlong	local04, fp
22e8c     10 31 02 F6 | 	mov	local10, local02
22e90     20 2E 06 F1 | 	add	local09, #32
22e94     17 31 02 F1 | 	add	local10, local09
22e98     0C 4E 85 F1 | 	sub	fp, #12
22e9c     A7 22 E2 FA | 	rdword	local03, fp
22ea0     14 4E 85 F1 | 	sub	fp, #20
22ea4     18 23 42 FC | 	wrbyte	local03, local10
22ea8     50 FC 9F FD | 	jmp	#LR__3660
22eac                 | LR__3676
22eac     04 4E 05 F1 | 	add	fp, #4
22eb0     A7 32 02 FB | 	rdlong	local11, fp
22eb4     04 4E 85 F1 | 	sub	fp, #4
22eb8     20 32 06 F1 | 	add	local11, #32
22ebc     19 2B C2 FA | 	rdbyte	local07, local11
22ec0     E5 2A 0E F2 | 	cmp	local07, #229 wz
22ec4     04 4E 05 A1 |  if_e	add	fp, #4
22ec8     A7 2A 02 AB |  if_e	rdlong	local07, fp
22ecc     04 4E 85 A1 |  if_e	sub	fp, #4
22ed0     20 2A 06 A1 |  if_e	add	local07, #32
22ed4     15 0B 48 AC |  if_e	wrbyte	#5, local07
22ed8     24 4E 05 F1 | 	add	fp, #36
22edc     A7 2A 02 FB | 	rdlong	local07, fp
22ee0     24 4E 85 F1 | 	sub	fp, #36
22ee4     08 2A 0E F2 | 	cmp	local07, #8 wz
22ee8     0C 4E 05 A1 |  if_e	add	fp, #12
22eec     A7 2A C2 AA |  if_e	rdbyte	local07, fp
22ef0     02 2A 66 A0 |  if_e	shl	local07, #2
22ef4     A7 2A 42 AC |  if_e	wrbyte	local07, fp
22ef8     0C 4E 85 A1 |  if_e	sub	fp, #12
22efc     0C 4E 05 F1 | 	add	fp, #12
22f00     A7 2A C2 FA | 	rdbyte	local07, fp
22f04     0C 4E 85 F1 | 	sub	fp, #12
22f08     0C 2A 06 F5 | 	and	local07, #12
22f0c     0C 2A 0E F2 | 	cmp	local07, #12 wz
22f10     18 00 90 AD |  if_e	jmp	#LR__3677
22f14     0C 4E 05 F1 | 	add	fp, #12
22f18     A7 1E C2 FA | 	rdbyte	local01, fp
22f1c     0C 4E 85 F1 | 	sub	fp, #12
22f20     03 1E 06 F5 | 	and	local01, #3
22f24     03 1E 0E F2 | 	cmp	local01, #3 wz
22f28     14 00 90 5D |  if_ne	jmp	#LR__3678
22f2c                 | LR__3677
22f2c     10 4E 05 F1 | 	add	fp, #16
22f30     A7 2A C2 FA | 	rdbyte	local07, fp
22f34     02 2A 46 F5 | 	or	local07, #2
22f38     A7 2A 42 FC | 	wrbyte	local07, fp
22f3c     10 4E 85 F1 | 	sub	fp, #16
22f40                 | LR__3678
22f40     10 4E 05 F1 | 	add	fp, #16
22f44     A7 2A C2 FA | 	rdbyte	local07, fp
22f48     10 4E 85 F1 | 	sub	fp, #16
22f4c     02 2A CE F7 | 	test	local07, #2 wz
22f50     48 00 90 5D |  if_ne	jmp	#LR__3679
22f54     0C 4E 05 F1 | 	add	fp, #12
22f58     A7 2A C2 FA | 	rdbyte	local07, fp
22f5c     0C 4E 85 F1 | 	sub	fp, #12
22f60     01 2A CE F7 | 	test	local07, #1 wz
22f64     10 4E 05 51 |  if_ne	add	fp, #16
22f68     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
22f6c     10 2A 46 55 |  if_ne	or	local07, #16
22f70     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22f74     10 4E 85 51 |  if_ne	sub	fp, #16
22f78     0C 4E 05 F1 | 	add	fp, #12
22f7c     A7 2A C2 FA | 	rdbyte	local07, fp
22f80     0C 4E 85 F1 | 	sub	fp, #12
22f84     04 2A CE F7 | 	test	local07, #4 wz
22f88     10 4E 05 51 |  if_ne	add	fp, #16
22f8c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
22f90     08 2A 46 55 |  if_ne	or	local07, #8
22f94     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22f98     10 4E 85 51 |  if_ne	sub	fp, #16
22f9c                 | LR__3679
22f9c     04 4E 05 F1 | 	add	fp, #4
22fa0     A7 2A 02 FB | 	rdlong	local07, fp
22fa4     0C 4E 05 F1 | 	add	fp, #12
22fa8     A7 1E C2 FA | 	rdbyte	local01, fp
22fac     10 4E 85 F1 | 	sub	fp, #16
22fb0     2B 2A 06 F1 | 	add	local07, #43
22fb4     15 1F 42 FC | 	wrbyte	local01, local07
22fb8                 | ' 	}
22fb8                 | ' 
22fb8                 | ' 	dp->fn[ 11 ] = cf;
22fb8                 | ' 
22fb8                 | ' 	return FR_OK;
22fb8     00 FA 05 F6 | 	mov	result1, #0
22fbc                 | LR__3680
22fbc     A7 F0 03 F6 | 	mov	ptra, fp
22fc0     B2 00 A0 FD | 	call	#popregs_
22fc4                 | _fatfs_cc_create_name_ret
22fc4     2D 00 64 FD | 	ret
22fc8                 | 
22fc8                 | _fatfs_cc_follow_path
22fc8     02 4A 05 F6 | 	mov	COUNT_, #2
22fcc     A8 00 A0 FD | 	call	#pushregs_
22fd0     18 F0 07 F1 | 	add	ptra, #24
22fd4     04 4E 05 F1 | 	add	fp, #4
22fd8     A7 12 62 FC | 	wrlong	arg01, fp
22fdc     04 4E 05 F1 | 	add	fp, #4
22fe0     A7 14 62 FC | 	wrlong	arg02, fp
22fe4     04 4E 85 F1 | 	sub	fp, #4
22fe8     A7 FA 01 FB | 	rdlong	result1, fp
22fec     FD 1E 02 FB | 	rdlong	local01, result1
22ff0     10 4E 05 F1 | 	add	fp, #16
22ff4     A7 1E 62 FC | 	wrlong	local01, fp
22ff8     14 4E 85 F1 | 	sub	fp, #20
22ffc     97 24 48 FB | 	callpa	#(@LR__3692-@LR__3690)>>2,fcache_load_ptr_
23000                 | ' )
23000                 | ' {
23000                 | ' 	FRESULT res;
23000                 | ' 	BYTE ns;
23000                 | ' 	FATFS *fs = dp->obj.fs;
23000                 | ' #line 3034 "ff.c"
23000                 | ' 	{
23000                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
23000                 | LR__3690
23000     08 4E 05 F1 | 	add	fp, #8
23004     A7 1E 02 FB | 	rdlong	local01, fp
23008     08 4E 85 F1 | 	sub	fp, #8
2300c     0F 1F C2 FA | 	rdbyte	local01, local01
23010     2F 1E 0E F2 | 	cmp	local01, #47 wz
23014     18 00 90 AD |  if_e	jmp	#LR__3691
23018     08 4E 05 F1 | 	add	fp, #8
2301c     A7 1E 02 FB | 	rdlong	local01, fp
23020     08 4E 85 F1 | 	sub	fp, #8
23024     0F 1F C2 FA | 	rdbyte	local01, local01
23028     5C 1E 0E F2 | 	cmp	local01, #92 wz
2302c     18 00 90 5D |  if_ne	jmp	#LR__3693
23030                 | LR__3691
23030     08 4E 05 F1 | 	add	fp, #8
23034     A7 1E 02 FB | 	rdlong	local01, fp
23038     01 1E 06 F1 | 	add	local01, #1
2303c     A7 1E 62 FC | 	wrlong	local01, fp
23040     08 4E 85 F1 | 	sub	fp, #8
23044     B8 FF 9F FD | 	jmp	#LR__3690
23048                 | LR__3692
23048                 | LR__3693
23048     04 4E 05 F1 | 	add	fp, #4
2304c     A7 1E 02 FB | 	rdlong	local01, fp
23050     08 1E 06 F1 | 	add	local01, #8
23054     0F 01 68 FC | 	wrlong	#0, local01
23058     04 4E 05 F1 | 	add	fp, #4
2305c     A7 1E 02 FB | 	rdlong	local01, fp
23060     08 4E 85 F1 | 	sub	fp, #8
23064     0F 1F C2 FA | 	rdbyte	local01, local01
23068     20 1E 16 F2 | 	cmp	local01, #32 wc
2306c     30 00 90 3D |  if_ae	jmp	#LR__3694
23070     04 4E 05 F1 | 	add	fp, #4
23074     A7 1E 02 FB | 	rdlong	local01, fp
23078     2B 1E 06 F1 | 	add	local01, #43
2307c     0F 01 49 FC | 	wrbyte	#128, local01
23080     A7 12 02 FB | 	rdlong	arg01, fp
23084     04 4E 85 F1 | 	sub	fp, #4
23088     00 14 06 F6 | 	mov	arg02, #0
2308c     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
23090     0C 4E 05 F1 | 	add	fp, #12
23094     A7 FA 61 FC | 	wrlong	result1, fp
23098     0C 4E 85 F1 | 	sub	fp, #12
2309c     1C 01 90 FD | 	jmp	#LR__3698
230a0                 | LR__3694
230a0                 | ' 		for (;;) {
230a0                 | LR__3695
230a0     04 4E 05 F1 | 	add	fp, #4
230a4     A7 12 02 FB | 	rdlong	arg01, fp
230a8     04 4E 05 F1 | 	add	fp, #4
230ac     A7 14 02 F6 | 	mov	arg02, fp
230b0     08 4E 85 F1 | 	sub	fp, #8
230b4     14 F6 BF FD | 	call	#_fatfs_cc_create_name
230b8     0C 4E 05 F1 | 	add	fp, #12
230bc     A7 FA 61 FC | 	wrlong	result1, fp
230c0     00 FA 4D F2 | 	cmps	result1, #0 wz
230c4     0C 4E 85 F1 | 	sub	fp, #12
230c8     F0 00 90 5D |  if_ne	jmp	#LR__3697
230cc     04 4E 05 F1 | 	add	fp, #4
230d0     A7 12 02 FB | 	rdlong	arg01, fp
230d4     04 4E 85 F1 | 	sub	fp, #4
230d8     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
230dc     0C 4E 05 F1 | 	add	fp, #12
230e0     A7 FA 61 FC | 	wrlong	result1, fp
230e4     08 4E 85 F1 | 	sub	fp, #8
230e8     A7 1E 02 FB | 	rdlong	local01, fp
230ec     2B 1E 06 F1 | 	add	local01, #43
230f0     0F 1F C2 FA | 	rdbyte	local01, local01
230f4     0C 4E 05 F1 | 	add	fp, #12
230f8     A7 1E 42 FC | 	wrbyte	local01, fp
230fc     04 4E 85 F1 | 	sub	fp, #4
23100     A7 1E 0A FB | 	rdlong	local01, fp wz
23104     0C 4E 85 F1 | 	sub	fp, #12
23108     34 00 90 AD |  if_e	jmp	#LR__3696
2310c     0C 4E 05 F1 | 	add	fp, #12
23110     A7 1E 02 FB | 	rdlong	local01, fp
23114     0C 4E 85 F1 | 	sub	fp, #12
23118     04 1E 0E F2 | 	cmp	local01, #4 wz
2311c     9C 00 90 5D |  if_ne	jmp	#LR__3697
23120     10 4E 05 F1 | 	add	fp, #16
23124     A7 1E C2 FA | 	rdbyte	local01, fp
23128     10 4E 85 F1 | 	sub	fp, #16
2312c     04 1E CE F7 | 	test	local01, #4 wz
23130     0C 4E 05 A1 |  if_e	add	fp, #12
23134     A7 0A 68 AC |  if_e	wrlong	#5, fp
23138     0C 4E 85 A1 |  if_e	sub	fp, #12
2313c                 | ' 					}
2313c                 | ' 				}
2313c                 | ' 				break;
2313c     7C 00 90 FD | 	jmp	#LR__3697
23140                 | LR__3696
23140     10 4E 05 F1 | 	add	fp, #16
23144     A7 1E C2 FA | 	rdbyte	local01, fp
23148     10 4E 85 F1 | 	sub	fp, #16
2314c     04 1E CE F7 | 	test	local01, #4 wz
23150     68 00 90 5D |  if_ne	jmp	#LR__3697
23154     04 4E 05 F1 | 	add	fp, #4
23158     A7 1E 02 FB | 	rdlong	local01, fp
2315c     04 4E 85 F1 | 	sub	fp, #4
23160     06 1E 06 F1 | 	add	local01, #6
23164     0F 1F C2 FA | 	rdbyte	local01, local01
23168     10 1E CE F7 | 	test	local01, #16 wz
2316c     0C 4E 05 A1 |  if_e	add	fp, #12
23170     A7 0A 68 AC |  if_e	wrlong	#5, fp
23174     0C 4E 85 A1 |  if_e	sub	fp, #12
23178                 | ' 				res = FR_NO_PATH; break;
23178     40 00 90 AD |  if_e	jmp	#LR__3697
2317c     04 4E 05 F1 | 	add	fp, #4
23180     A7 20 02 FB | 	rdlong	local02, fp
23184     10 1F 02 F6 | 	mov	local01, local02
23188     10 4E 05 F1 | 	add	fp, #16
2318c     A7 14 02 FB | 	rdlong	arg02, fp
23190     0A 13 02 F6 | 	mov	arg01, arg02
23194     34 14 06 F1 | 	add	arg02, #52
23198     14 4E 85 F1 | 	sub	fp, #20
2319c     10 20 06 F1 | 	add	local02, #16
231a0     10 21 02 FB | 	rdlong	local02, local02
231a4     FF 21 06 F5 | 	and	local02, #511
231a8     10 15 02 F1 | 	add	arg02, local02
231ac     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
231b0     08 1E 06 F1 | 	add	local01, #8
231b4     0F FB 61 FC | 	wrlong	result1, local01
231b8     E4 FE 9F FD | 	jmp	#LR__3695
231bc                 | LR__3697
231bc                 | LR__3698
231bc                 | ' 			}
231bc                 | ' #line 3090 "ff.c"
231bc                 | ' 			{
231bc                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
231bc                 | ' 			}
231bc                 | ' 		}
231bc                 | ' 	}
231bc                 | ' 
231bc                 | ' 	return res;
231bc     0C 4E 05 F1 | 	add	fp, #12
231c0     A7 FA 01 FB | 	rdlong	result1, fp
231c4     0C 4E 85 F1 | 	sub	fp, #12
231c8     A7 F0 03 F6 | 	mov	ptra, fp
231cc     B2 00 A0 FD | 	call	#popregs_
231d0                 | _fatfs_cc_follow_path_ret
231d0     2D 00 64 FD | 	ret
231d4                 | 
231d4                 | _fatfs_cc_get_ldnumber
231d4     01 00 66 F6 | 	neg	_var01, #1
231d8     09 03 0A FB | 	rdlong	_var02, arg01 wz
231dc     01 05 02 F6 | 	mov	_var03, _var02
231e0     01 FA 65 A6 |  if_e	neg	result1, #1
231e4     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
231e8     97 10 48 FB | 	callpa	#(@LR__3701-@LR__3700)>>2,fcache_load_ptr_
231ec                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
231ec                 | LR__3700
231ec     02 07 C2 FA | 	rdbyte	_var04, _var03
231f0     03 FB E1 F8 | 	getbyte	result1, _var04, #0
231f4     20 FA 15 F2 | 	cmp	result1, #32 wc
231f8     01 04 06 F1 | 	add	_var03, #1
231fc     03 09 02 36 |  if_ae	mov	_var05, _var04
23200     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
23204     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
23208     E0 FF 9F 1D |  if_a	jmp	#LR__3700
2320c                 | LR__3701
2320c     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
23210     3A 06 0E F2 | 	cmp	_var04, #58 wz
23214     40 00 90 5D |  if_ne	jmp	#LR__3703
23218     01 0A 06 F6 | 	mov	_var06, #1
2321c     01 09 C2 FA | 	rdbyte	_var05, _var02
23220     30 08 16 F2 | 	cmp	_var05, #48 wc
23224     1C 00 90 CD |  if_b	jmp	#LR__3702
23228     01 09 C2 FA | 	rdbyte	_var05, _var02
2322c     3A 08 16 F2 | 	cmp	_var05, #58 wc
23230     01 0D 02 C6 |  if_b	mov	_var07, _var02
23234     02 0C 06 C1 |  if_b	add	_var07, #2
23238     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2323c     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
23240     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
23244                 | LR__3702
23244     01 0A 56 F2 | 	cmps	_var06, #1 wc
23248     05 01 02 C6 |  if_b	mov	_var01, _var06
2324c     09 05 62 CC |  if_b	wrlong	_var03, arg01
23250                 | ' 			vol = i;
23250                 | ' 			*path = tt;
23250                 | ' 		}
23250                 | ' 		return vol;
23250     00 FB 01 F6 | 	mov	result1, _var01
23254     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
23258                 | LR__3703
23258                 | ' 	}
23258                 | ' #line 3170 "ff.c"
23258                 | ' 	vol = 0;
23258                 | ' 
23258                 | ' 	return vol;
23258     00 FA 05 F6 | 	mov	result1, #0
2325c                 | _fatfs_cc_get_ldnumber_ret
2325c     2D 00 64 FD | 	ret
23260                 | 
23260                 | _fatfs_cc_check_fs
23260     04 4A 05 F6 | 	mov	COUNT_, #4
23264     A8 00 A0 FD | 	call	#pushregs_
23268     09 1F 02 F6 | 	mov	local01, arg01
2326c     03 1E 06 F1 | 	add	local01, #3
23270     0F 01 48 FC | 	wrbyte	#0, local01
23274     2D 1E 06 F1 | 	add	local01, #45
23278     FF FF FF FF 
2327c     0F FF 6B FC | 	wrlong	##-1, local01
23280     30 1E 86 F1 | 	sub	local01, #48
23284     0F 13 02 F6 | 	mov	arg01, local01
23288     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2328c     00 FA 0D F2 | 	cmp	result1, #0 wz
23290     04 FA 05 56 |  if_ne	mov	result1, #4
23294     94 01 90 5D |  if_ne	jmp	#LR__3714
23298     34 1E 06 F1 | 	add	local01, #52
2329c     0F 13 02 F6 | 	mov	arg01, local01
232a0     FE 13 06 F1 | 	add	arg01, #510
232a4                 | ' {
232a4                 | ' 
232a4                 | ' 	return *((WORD*)ptr);
232a4     09 21 E2 FA | 	rdword	local02, arg01
232a8     0F 23 C2 FA | 	rdbyte	local03, local01
232ac     34 1E 86 F1 | 	sub	local01, #52
232b0     11 25 E2 F8 | 	getbyte	local04, local03, #0
232b4     EB 24 0E F2 | 	cmp	local04, #235 wz
232b8     11 17 02 56 |  if_ne	mov	arg03, local03
232bc     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
232c0     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
232c4     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
232c8     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
232cc     44 01 90 5D |  if_ne	jmp	#LR__3713
232d0     10 25 32 F9 | 	getword	local04, local02, #0
232d4     55 00 00 FF 
232d8     55 24 0E F2 | 	cmp	local04, ##43605 wz
232dc     2C 00 90 5D |  if_ne	jmp	#LR__3710
232e0     34 1E 06 F1 | 	add	local01, #52
232e4     0F 13 02 F6 | 	mov	arg01, local01
232e8     34 1E 86 F1 | 	sub	local01, #52
232ec     52 12 06 F1 | 	add	arg01, #82
232f0     43 01 00 FF 
232f4     28 15 06 F6 | 	mov	arg02, ##@LR__4304
232f8     08 16 06 F6 | 	mov	arg03, #8
232fc     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
23300     00 FA 0D F2 | 	cmp	result1, #0 wz
23304                 | ' 			return 0;
23304     00 FA 05 A6 |  if_e	mov	result1, #0
23308     20 01 90 AD |  if_e	jmp	#LR__3714
2330c                 | LR__3710
2330c     34 1E 06 F1 | 	add	local01, #52
23310     0F 13 02 F6 | 	mov	arg01, local01
23314     0B 12 06 F1 | 	add	arg01, #11
23318                 | ' {
23318                 | ' 
23318                 | ' 	return *((WORD*)ptr);
23318     09 FB E1 FA | 	rdword	result1, arg01
2331c     0D 1E 06 F1 | 	add	local01, #13
23320     0F 23 C2 FA | 	rdbyte	local03, local01
23324     41 1E 86 F1 | 	sub	local01, #65
23328     FD 24 32 F9 | 	getword	local04, result1, #0
2332c     FD 14 32 F9 | 	getword	arg02, result1, #0
23330     01 14 86 F1 | 	sub	arg02, #1
23334     0A 25 CA F7 | 	test	local04, arg02 wz
23338     D8 00 90 5D |  if_ne	jmp	#LR__3712
2333c     FD 14 32 F9 | 	getword	arg02, result1, #0
23340     01 00 00 FF 
23344     00 14 16 F2 | 	cmp	arg02, ##512 wc
23348     C8 00 90 CD |  if_b	jmp	#LR__3712
2334c     FD 14 32 F9 | 	getword	arg02, result1, #0
23350     01 00 00 FF 
23354     01 14 16 F2 | 	cmp	arg02, ##513 wc
23358     B8 00 90 3D |  if_ae	jmp	#LR__3712
2335c     11 13 02 F6 | 	mov	arg01, local03
23360     07 12 4E F7 | 	zerox	arg01, #7 wz
23364     AC 00 90 AD |  if_e	jmp	#LR__3712
23368     11 13 E2 F8 | 	getbyte	arg01, local03, #0
2336c     11 23 E2 F8 | 	getbyte	local03, local03, #0
23370     01 22 86 F1 | 	sub	local03, #1
23374     11 13 CA F7 | 	test	arg01, local03 wz
23378     98 00 90 5D |  if_ne	jmp	#LR__3712
2337c     34 1E 06 F1 | 	add	local01, #52
23380     0F 13 02 F6 | 	mov	arg01, local01
23384     34 1E 86 F1 | 	sub	local01, #52
23388     0E 12 06 F1 | 	add	arg01, #14
2338c                 | ' {
2338c                 | ' 
2338c                 | ' 	return *((WORD*)ptr);
2338c     09 FB E9 FA | 	rdword	result1, arg01 wz
23390     80 00 90 AD |  if_e	jmp	#LR__3712
23394     44 1E 06 F1 | 	add	local01, #68
23398     0F 13 C2 FA | 	rdbyte	arg01, local01
2339c     44 1E 86 F1 | 	sub	local01, #68
233a0     01 12 86 F1 | 	sub	arg01, #1
233a4     02 12 16 F2 | 	cmp	arg01, #2 wc
233a8     68 00 90 3D |  if_ae	jmp	#LR__3712
233ac     34 1E 06 F1 | 	add	local01, #52
233b0     0F 13 02 F6 | 	mov	arg01, local01
233b4     34 1E 86 F1 | 	sub	local01, #52
233b8     11 12 06 F1 | 	add	arg01, #17
233bc                 | ' {
233bc                 | ' 
233bc                 | ' 	return *((WORD*)ptr);
233bc     09 FB E9 FA | 	rdword	result1, arg01 wz
233c0     50 00 90 AD |  if_e	jmp	#LR__3712
233c4     34 1E 06 F1 | 	add	local01, #52
233c8     0F 13 02 F6 | 	mov	arg01, local01
233cc     34 1E 86 F1 | 	sub	local01, #52
233d0     13 12 06 F1 | 	add	arg01, #19
233d4                 | ' {
233d4                 | ' 
233d4                 | ' 	return *((WORD*)ptr);
233d4     09 FB E1 FA | 	rdword	result1, arg01
233d8     FD 22 32 F9 | 	getword	local03, result1, #0
233dc     80 22 16 F2 | 	cmp	local03, #128 wc
233e0     20 00 90 3D |  if_ae	jmp	#LR__3711
233e4     34 1E 06 F1 | 	add	local01, #52
233e8     0F 13 02 F6 | 	mov	arg01, local01
233ec     34 1E 86 F1 | 	sub	local01, #52
233f0     20 12 06 F1 | 	add	arg01, #32
233f4                 | ' {
233f4                 | ' 
233f4                 | ' 	return *((DWORD*)ptr);
233f4     09 FB 01 FB | 	rdlong	result1, arg01
233f8     80 00 00 FF 
233fc     00 FA 15 F2 | 	cmp	result1, ##65536 wc
23400     10 00 90 CD |  if_b	jmp	#LR__3712
23404                 | LR__3711
23404     4A 1E 06 F1 | 	add	local01, #74
23408                 | ' {
23408                 | ' 
23408                 | ' 	return *((WORD*)ptr);
23408     0F FB E9 FA | 	rdword	result1, local01 wz
2340c                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2340c                 | ' 			&& ld_word(fs->win +  14 ) != 0
2340c                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2340c                 | ' 			&& ld_word(fs->win +  17 ) != 0
2340c                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2340c                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2340c                 | ' 				return 0;
2340c     00 FA 05 56 |  if_ne	mov	result1, #0
23410     18 00 90 5D |  if_ne	jmp	#LR__3714
23414                 | LR__3712
23414                 | LR__3713
23414                 | ' 		}
23414                 | ' 	}
23414                 | ' 	return sign == 0xAA55 ? 2 : 3;
23414     10 23 32 F9 | 	getword	local03, local02, #0
23418     55 00 00 FF 
2341c     55 22 0E F2 | 	cmp	local03, ##43605 wz
23420     02 24 06 A6 |  if_e	mov	local04, #2
23424     03 24 06 56 |  if_ne	mov	local04, #3
23428     12 FB 01 F6 | 	mov	result1, local04
2342c                 | LR__3714
2342c     A7 F0 03 F6 | 	mov	ptra, fp
23430     B2 00 A0 FD | 	call	#popregs_
23434                 | _fatfs_cc_check_fs_ret
23434     2D 00 64 FD | 	ret
23438                 | 
23438                 | _fatfs_cc_find_volume
23438     05 4A 05 F6 | 	mov	COUNT_, #5
2343c     A8 00 A0 FD | 	call	#pushregs_
23440     24 F0 07 F1 | 	add	ptra, #36
23444     09 1F 02 F6 | 	mov	local01, arg01
23448     0A 21 02 F6 | 	mov	local02, arg02
2344c     0F 13 02 F6 | 	mov	arg01, local01
23450     00 14 06 F6 | 	mov	arg02, #0
23454     08 FE BF FD | 	call	#_fatfs_cc_check_fs
23458     02 FA 0D F2 | 	cmp	result1, #2 wz
2345c     0C 00 90 AD |  if_e	jmp	#LR__3720
23460     03 FA 15 F2 | 	cmp	result1, #3 wc
23464     00 20 0E C2 |  if_b	cmp	local02, #0 wz
23468     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3728
2346c                 | LR__3720
2346c                 | ' 	for (i = 0; i < 4; i++) {
2346c     00 22 06 F6 | 	mov	local03, #0
23470     97 26 48 FB | 	callpa	#(@LR__3722-@LR__3721)>>2,fcache_load_ptr_
23474                 | LR__3721
23474     04 22 16 F2 | 	cmp	local03, #4 wc
23478     44 00 90 3D |  if_ae	jmp	#LR__3723
2347c     11 25 02 F6 | 	mov	local04, local03
23480     02 24 66 F0 | 	shl	local04, #2
23484     14 4E 05 F1 | 	add	fp, #20
23488     A7 24 02 F1 | 	add	local04, fp
2348c     34 1E 06 F1 | 	add	local01, #52
23490     0F 13 02 F6 | 	mov	arg01, local01
23494     34 1E 86 F1 | 	sub	local01, #52
23498     BE 13 06 F1 | 	add	arg01, #446
2349c     11 15 02 F6 | 	mov	arg02, local03
234a0     04 14 66 F0 | 	shl	arg02, #4
234a4     0A 13 02 F1 | 	add	arg01, arg02
234a8     08 12 06 F1 | 	add	arg01, #8
234ac                 | ' {
234ac                 | ' 
234ac                 | ' 	return *((DWORD*)ptr);
234ac     09 FB 01 FB | 	rdlong	result1, arg01
234b0     14 4E 85 F1 | 	sub	fp, #20
234b4     12 FB 61 FC | 	wrlong	result1, local04
234b8     01 22 06 F1 | 	add	local03, #1
234bc     B4 FF 9F FD | 	jmp	#LR__3721
234c0                 | LR__3722
234c0                 | LR__3723
234c0     00 20 0E F2 | 	cmp	local02, #0 wz
234c4     10 25 02 56 |  if_ne	mov	local04, local02
234c8     01 24 86 51 |  if_ne	sub	local04, #1
234cc     00 24 06 A6 |  if_e	mov	local04, #0
234d0     12 23 02 F6 | 	mov	local03, local04
234d4                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
234d4                 | ' 	}
234d4                 | ' 	i = part ? part - 1 : 0;
234d4                 | ' 	do {
234d4                 | LR__3724
234d4     11 25 02 F6 | 	mov	local04, local03
234d8     02 24 66 F0 | 	shl	local04, #2
234dc     14 4E 05 F1 | 	add	fp, #20
234e0     A7 24 02 F1 | 	add	local04, fp
234e4     12 25 0A FB | 	rdlong	local04, local04 wz
234e8     14 4E 85 F1 | 	sub	fp, #20
234ec     28 00 90 AD |  if_e	jmp	#LR__3725
234f0     11 25 02 F6 | 	mov	local04, local03
234f4     02 24 66 F0 | 	shl	local04, #2
234f8     14 4E 05 F1 | 	add	fp, #20
234fc     A7 24 02 F1 | 	add	local04, fp
23500     12 15 02 FB | 	rdlong	arg02, local04
23504     0F 13 02 F6 | 	mov	arg01, local01
23508     14 4E 85 F1 | 	sub	fp, #20
2350c     50 FD BF FD | 	call	#_fatfs_cc_check_fs
23510     FD 24 02 F6 | 	mov	local04, result1
23514     04 00 90 FD | 	jmp	#LR__3726
23518                 | LR__3725
23518     03 24 06 F6 | 	mov	local04, #3
2351c                 | LR__3726
2351c     12 27 02 F6 | 	mov	local05, local04
23520     00 20 0E F2 | 	cmp	local02, #0 wz
23524     02 26 16 A2 |  if_e	cmp	local05, #2 wc
23528     0C 00 90 8D |  if_c_and_z	jmp	#LR__3727
2352c     01 22 06 A1 |  if_e	add	local03, #1
23530     04 22 16 A2 |  if_e	cmp	local03, #4 wc
23534     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3724
23538                 | LR__3727
23538                 | ' 	return fmt;
23538     13 FB 01 F6 | 	mov	result1, local05
2353c                 | LR__3728
2353c     A7 F0 03 F6 | 	mov	ptra, fp
23540     B2 00 A0 FD | 	call	#popregs_
23544                 | _fatfs_cc_find_volume_ret
23544     2D 00 64 FD | 	ret
23548                 | 
23548                 | _fatfs_cc_mount_volume
23548     0B 4A 05 F6 | 	mov	COUNT_, #11
2354c     A8 00 A0 FD | 	call	#pushregs_
23550     0A 1F 02 F6 | 	mov	local01, arg02
23554     0B 21 02 F6 | 	mov	local02, arg03
23558     0F 01 68 FC | 	wrlong	#0, local01
2355c     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
23560     FD 22 02 F6 | 	mov	local03, result1
23564     00 22 56 F2 | 	cmps	local03, #0 wc
23568     0B FA 05 C6 |  if_b	mov	result1, #11
2356c     3C 05 90 CD |  if_b	jmp	#LR__3740
23570     11 17 02 F6 | 	mov	arg03, local03
23574     02 16 66 F0 | 	shl	arg03, #2
23578     F2 16 02 F1 | 	add	arg03, objptr
2357c     0B 25 0A FB | 	rdlong	local04, arg03 wz
23580     0C FA 05 A6 |  if_e	mov	result1, #12
23584     24 05 90 AD |  if_e	jmp	#LR__3740
23588     0F 25 62 FC | 	wrlong	local04, local01
2358c     10 21 E2 F8 | 	getbyte	local02, local02, #0
23590     FE 20 06 F5 | 	and	local02, #254
23594     12 17 CA FA | 	rdbyte	arg03, local04 wz
23598     4C 00 90 AD |  if_e	jmp	#LR__3731
2359c     01 24 06 F1 | 	add	local04, #1
235a0     12 13 CA FA | 	rdbyte	arg01, local04 wz
235a4     01 24 86 F1 | 	sub	local04, #1
235a8     01 FA 05 56 |  if_ne	mov	result1, #1
235ac                 | ' 
235ac                 | ' 	return Stat;
235ac     01 00 00 AF 
235b0     20 E4 05 A1 |  if_e	add	objptr, ##544
235b4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
235b8     01 00 00 AF 
235bc     20 E4 85 A1 |  if_e	sub	objptr, ##544
235c0     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
235c4     01 16 CE F7 | 	test	arg03, #1 wz
235c8     1C 00 90 5D |  if_ne	jmp	#LR__3730
235cc     00 20 0E F2 | 	cmp	local02, #0 wz
235d0     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
235d4     04 FA CD 57 |  if_ne	test	result1, #4 wz
235d8                 | ' 				return FR_WRITE_PROTECTED;
235d8     0A FA 05 56 |  if_ne	mov	result1, #10
235dc     CC 04 90 5D |  if_ne	jmp	#LR__3740
235e0                 | ' 			}
235e0                 | ' 			return FR_OK;
235e0     00 FA 05 F6 | 	mov	result1, #0
235e4     C4 04 90 FD | 	jmp	#LR__3740
235e8                 | LR__3730
235e8                 | LR__3731
235e8     12 01 48 FC | 	wrbyte	#0, local04
235ec     01 24 06 F1 | 	add	local04, #1
235f0     12 23 42 FC | 	wrbyte	local03, local04
235f4     12 13 C2 FA | 	rdbyte	arg01, local04
235f8     01 24 86 F1 | 	sub	local04, #1
235fc     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
23600     FD 16 02 F6 | 	mov	arg03, result1
23604     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
23608     01 26 CE F7 | 	test	local05, #1 wz
2360c                 | ' 		return FR_NOT_READY;
2360c     03 FA 05 56 |  if_ne	mov	result1, #3
23610     98 04 90 5D |  if_ne	jmp	#LR__3740
23614     00 20 0E F2 | 	cmp	local02, #0 wz
23618     0B 27 02 56 |  if_ne	mov	local05, arg03
2361c     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
23620     04 26 CE 57 |  if_ne	test	local05, #4 wz
23624                 | ' 		return FR_WRITE_PROTECTED;
23624     0A FA 05 56 |  if_ne	mov	result1, #10
23628     80 04 90 5D |  if_ne	jmp	#LR__3740
2362c     12 13 02 F6 | 	mov	arg01, local04
23630     00 14 06 F6 | 	mov	arg02, #0
23634     00 FE BF FD | 	call	#_fatfs_cc_find_volume
23638     FD 12 02 F6 | 	mov	arg01, result1
2363c     04 12 0E F2 | 	cmp	arg01, #4 wz
23640     01 FA 05 A6 |  if_e	mov	result1, #1
23644     64 04 90 AD |  if_e	jmp	#LR__3740
23648     02 12 16 F2 | 	cmp	arg01, #2 wc
2364c     0D FA 05 36 |  if_ae	mov	result1, #13
23650     58 04 90 3D |  if_ae	jmp	#LR__3740
23654     30 24 06 F1 | 	add	local04, #48
23658     12 29 02 FB | 	rdlong	local06, local04
2365c     04 24 06 F1 | 	add	local04, #4
23660     12 13 02 F6 | 	mov	arg01, local04
23664     34 24 86 F1 | 	sub	local04, #52
23668     0B 12 06 F1 | 	add	arg01, #11
2366c                 | ' {
2366c                 | ' 
2366c                 | ' 	return *((WORD*)ptr);
2366c     09 FB E1 FA | 	rdword	result1, arg01
23670     01 00 00 FF 
23674     00 FA 0D F2 | 	cmp	result1, ##512 wz
23678     0D FA 05 56 |  if_ne	mov	result1, #13
2367c     2C 04 90 5D |  if_ne	jmp	#LR__3740
23680     34 24 06 F1 | 	add	local04, #52
23684     12 13 02 F6 | 	mov	arg01, local04
23688     34 24 86 F1 | 	sub	local04, #52
2368c     16 12 06 F1 | 	add	arg01, #22
23690                 | ' {
23690                 | ' 
23690                 | ' 	return *((WORD*)ptr);
23690     09 FB E1 FA | 	rdword	result1, arg01
23694     FD 2A 0A F6 | 	mov	local07, result1 wz
23698     18 00 90 5D |  if_ne	jmp	#LR__3732
2369c     34 24 06 F1 | 	add	local04, #52
236a0     12 13 02 F6 | 	mov	arg01, local04
236a4     34 24 86 F1 | 	sub	local04, #52
236a8     24 12 06 F1 | 	add	arg01, #36
236ac                 | ' {
236ac                 | ' 
236ac                 | ' 	return *((DWORD*)ptr);
236ac     09 FB 01 FB | 	rdlong	result1, arg01
236b0     FD 2A 02 F6 | 	mov	local07, result1
236b4                 | LR__3732
236b4     1C 24 06 F1 | 	add	local04, #28
236b8     12 2B 62 FC | 	wrlong	local07, local04
236bc     28 24 06 F1 | 	add	local04, #40
236c0     12 27 C2 FA | 	rdbyte	local05, local04
236c4     42 24 86 F1 | 	sub	local04, #66
236c8     12 27 42 FC | 	wrbyte	local05, local04
236cc     12 27 C2 FA | 	rdbyte	local05, local04
236d0     02 24 86 F1 | 	sub	local04, #2
236d4     01 26 0E F2 | 	cmp	local05, #1 wz
236d8     02 24 06 51 |  if_ne	add	local04, #2
236dc     12 27 C2 5A |  if_ne	rdbyte	local05, local04
236e0     02 24 86 51 |  if_ne	sub	local04, #2
236e4     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
236e8     0D FA 05 56 |  if_ne	mov	result1, #13
236ec     BC 03 90 5D |  if_ne	jmp	#LR__3740
236f0     02 24 06 F1 | 	add	local04, #2
236f4     12 27 C2 FA | 	rdbyte	local05, local04
236f8     13 2B 02 FD | 	qmul	local07, local05
236fc     3F 24 06 F1 | 	add	local04, #63
23700     12 27 C2 FA | 	rdbyte	local05, local04
23704     37 24 86 F1 | 	sub	local04, #55
23708     12 27 52 FC | 	wrword	local05, local04
2370c     12 27 EA FA | 	rdword	local05, local04 wz
23710     0A 24 86 F1 | 	sub	local04, #10
23714     18 2A 62 FD | 	getqx	local07
23718     20 00 90 AD |  if_e	jmp	#LR__3733
2371c     0A 24 06 F1 | 	add	local04, #10
23720     12 27 E2 FA | 	rdword	local05, local04
23724     13 23 32 F9 | 	getword	local03, local05, #0
23728     0A 24 86 F1 | 	sub	local04, #10
2372c     13 27 32 F9 | 	getword	local05, local05, #0
23730     01 26 86 F1 | 	sub	local05, #1
23734     13 23 CA F7 | 	test	local03, local05 wz
23738     08 00 90 AD |  if_e	jmp	#LR__3734
2373c                 | LR__3733
2373c     0D FA 05 F6 | 	mov	result1, #13
23740     68 03 90 FD | 	jmp	#LR__3740
23744                 | LR__3734
23744     34 24 06 F1 | 	add	local04, #52
23748     12 13 02 F6 | 	mov	arg01, local04
2374c     11 12 06 F1 | 	add	arg01, #17
23750                 | ' {
23750                 | ' 
23750                 | ' 	return *((WORD*)ptr);
23750     09 FB E1 FA | 	rdword	result1, arg01
23754     2C 24 86 F1 | 	sub	local04, #44
23758     12 FB 51 FC | 	wrword	result1, local04
2375c     12 27 E2 FA | 	rdword	local05, local04
23760     08 24 86 F1 | 	sub	local04, #8
23764     13 13 52 F6 | 	abs	arg01, local05 wc
23768     09 13 42 F8 | 	getnib	arg01, arg01, #0
2376c     09 13 8A F6 | 	negc	arg01, arg01 wz
23770     0D FA 05 56 |  if_ne	mov	result1, #13
23774     34 03 90 5D |  if_ne	jmp	#LR__3740
23778     34 24 06 F1 | 	add	local04, #52
2377c     12 13 02 F6 | 	mov	arg01, local04
23780     34 24 86 F1 | 	sub	local04, #52
23784     13 12 06 F1 | 	add	arg01, #19
23788                 | ' {
23788                 | ' 
23788                 | ' 	return *((WORD*)ptr);
23788     09 FB E1 FA | 	rdword	result1, arg01
2378c     FD 2C 0A F6 | 	mov	local08, result1 wz
23790     34 24 06 A1 |  if_e	add	local04, #52
23794     12 13 02 A6 |  if_e	mov	arg01, local04
23798     34 24 86 A1 |  if_e	sub	local04, #52
2379c     20 12 06 A1 |  if_e	add	arg01, #32
237a0                 | ' {
237a0                 | ' 
237a0                 | ' 	return *((DWORD*)ptr);
237a0     09 2D 02 AB |  if_e	rdlong	local08, arg01
237a4     34 24 06 F1 | 	add	local04, #52
237a8     12 13 02 F6 | 	mov	arg01, local04
237ac     34 24 86 F1 | 	sub	local04, #52
237b0     0E 12 06 F1 | 	add	arg01, #14
237b4                 | ' {
237b4                 | ' 
237b4                 | ' 	return *((WORD*)ptr);
237b4     09 FB E1 FA | 	rdword	result1, arg01
237b8     FD 12 02 F6 | 	mov	arg01, result1
237bc     09 27 02 F6 | 	mov	local05, arg01
237c0     0F 26 4E F7 | 	zerox	local05, #15 wz
237c4     0D FA 05 A6 |  if_e	mov	result1, #13
237c8     E0 02 90 AD |  if_e	jmp	#LR__3740
237cc     09 2F 32 F9 | 	getword	local09, arg01, #0
237d0     15 2F 02 F1 | 	add	local09, local07
237d4     08 24 06 F1 | 	add	local04, #8
237d8     12 27 E2 FA | 	rdword	local05, local04
237dc     08 24 86 F1 | 	sub	local04, #8
237e0     13 27 52 F6 | 	abs	local05, local05 wc
237e4     04 26 46 F0 | 	shr	local05, #4
237e8     13 2F 82 F3 | 	sumc	local09, local05
237ec     17 2D 12 F2 | 	cmp	local08, local09 wc
237f0     0D FA 05 C6 |  if_b	mov	result1, #13
237f4     B4 02 90 CD |  if_b	jmp	#LR__3740
237f8     17 2D 82 F1 | 	sub	local08, local09
237fc     0A 24 06 F1 | 	add	local04, #10
23800     12 27 E2 FA | 	rdword	local05, local04
23804     13 2D 12 FD | 	qdiv	local08, local05
23808     0A 24 86 F1 | 	sub	local04, #10
2380c     18 26 62 FD | 	getqx	local05
23810     00 26 0E F2 | 	cmp	local05, #0 wz
23814     0D FA 05 A6 |  if_e	mov	result1, #13
23818     90 02 90 AD |  if_e	jmp	#LR__3740
2381c     00 30 06 F6 | 	mov	local10, #0
23820     FF FF 07 FF 
23824     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
23828     03 30 06 C6 |  if_b	mov	local10, #3
2382c     7F 00 00 FF 
23830     F6 27 16 F2 | 	cmp	local05, ##65526 wc
23834     02 30 06 C6 |  if_b	mov	local10, #2
23838     07 00 00 FF 
2383c     F6 27 16 F2 | 	cmp	local05, ##4086 wc
23840     01 30 06 C6 |  if_b	mov	local10, #1
23844     00 30 0E F2 | 	cmp	local10, #0 wz
23848     0D FA 05 A6 |  if_e	mov	result1, #13
2384c     5C 02 90 AD |  if_e	jmp	#LR__3740
23850     02 26 06 F1 | 	add	local05, #2
23854     18 24 06 F1 | 	add	local04, #24
23858     12 27 62 FC | 	wrlong	local05, local04
2385c     08 24 06 F1 | 	add	local04, #8
23860     12 29 62 FC | 	wrlong	local06, local04
23864     14 27 02 F6 | 	mov	local05, local06
23868     09 13 32 F9 | 	getword	arg01, arg01, #0
2386c     09 27 02 F1 | 	add	local05, arg01
23870     04 24 06 F1 | 	add	local04, #4
23874     12 27 62 FC | 	wrlong	local05, local04
23878     14 27 02 F6 | 	mov	local05, local06
2387c     17 27 02 F1 | 	add	local05, local09
23880     08 24 06 F1 | 	add	local04, #8
23884     12 27 62 FC | 	wrlong	local05, local04
23888     2C 24 86 F1 | 	sub	local04, #44
2388c     03 30 0E F2 | 	cmp	local10, #3 wz
23890     5C 00 90 5D |  if_ne	jmp	#LR__3735
23894     34 24 06 F1 | 	add	local04, #52
23898     12 13 02 F6 | 	mov	arg01, local04
2389c     34 24 86 F1 | 	sub	local04, #52
238a0     2A 12 06 F1 | 	add	arg01, #42
238a4                 | ' {
238a4                 | ' 
238a4                 | ' 	return *((WORD*)ptr);
238a4     09 FB E9 FA | 	rdword	result1, arg01 wz
238a8     0D FA 05 56 |  if_ne	mov	result1, #13
238ac     FC 01 90 5D |  if_ne	jmp	#LR__3740
238b0     08 24 06 F1 | 	add	local04, #8
238b4     12 27 EA FA | 	rdword	local05, local04 wz
238b8     08 24 86 F1 | 	sub	local04, #8
238bc     0D FA 05 56 |  if_ne	mov	result1, #13
238c0     E8 01 90 5D |  if_ne	jmp	#LR__3740
238c4     34 24 06 F1 | 	add	local04, #52
238c8     12 13 02 F6 | 	mov	arg01, local04
238cc     2C 12 06 F1 | 	add	arg01, #44
238d0                 | ' {
238d0                 | ' 
238d0                 | ' 	return *((DWORD*)ptr);
238d0     09 FB 01 FB | 	rdlong	result1, arg01
238d4     0C 24 86 F1 | 	sub	local04, #12
238d8     12 FB 61 FC | 	wrlong	result1, local04
238dc     10 24 86 F1 | 	sub	local04, #16
238e0     12 33 02 FB | 	rdlong	local11, local04
238e4     18 24 86 F1 | 	sub	local04, #24
238e8     02 32 66 F0 | 	shl	local11, #2
238ec     6C 00 90 FD | 	jmp	#LR__3737
238f0                 | LR__3735
238f0     08 24 06 F1 | 	add	local04, #8
238f4     12 27 EA FA | 	rdword	local05, local04 wz
238f8     08 24 86 F1 | 	sub	local04, #8
238fc     0D FA 05 A6 |  if_e	mov	result1, #13
23900     A8 01 90 AD |  if_e	jmp	#LR__3740
23904     24 24 06 F1 | 	add	local04, #36
23908     12 27 02 FB | 	rdlong	local05, local04
2390c     15 27 02 F1 | 	add	local05, local07
23910     04 24 06 F1 | 	add	local04, #4
23914     12 27 62 FC | 	wrlong	local05, local04
23918     28 24 86 F1 | 	sub	local04, #40
2391c     02 30 0E F2 | 	cmp	local10, #2 wz
23920     18 24 06 A1 |  if_e	add	local04, #24
23924     12 27 02 AB |  if_e	rdlong	local05, local04
23928     18 24 86 A1 |  if_e	sub	local04, #24
2392c     01 26 66 A0 |  if_e	shl	local05, #1
23930     24 00 90 AD |  if_e	jmp	#LR__3736
23934     18 24 06 F1 | 	add	local04, #24
23938     12 33 02 FB | 	rdlong	local11, local04
2393c     19 27 02 F6 | 	mov	local05, local11
23940     01 26 66 F0 | 	shl	local05, #1
23944     19 27 02 F1 | 	add	local05, local11
23948     01 26 46 F0 | 	shr	local05, #1
2394c     18 24 86 F1 | 	sub	local04, #24
23950     01 32 06 F5 | 	and	local11, #1
23954     19 27 02 F1 | 	add	local05, local11
23958                 | LR__3736
23958     13 33 02 F6 | 	mov	local11, local05
2395c                 | LR__3737
2395c     FF 33 06 F1 | 	add	local11, #511
23960     09 32 46 F0 | 	shr	local11, #9
23964     1C 24 06 F1 | 	add	local04, #28
23968     12 17 02 FB | 	rdlong	arg03, local04
2396c     1C 24 86 F1 | 	sub	local04, #28
23970     19 17 12 F2 | 	cmp	arg03, local11 wc
23974     0D FA 05 C6 |  if_b	mov	result1, #13
23978     30 01 90 CD |  if_b	jmp	#LR__3740
2397c     14 24 06 F1 | 	add	local04, #20
23980     FF FF FF FF 
23984     12 FF 6B FC | 	wrlong	##-1, local04
23988     04 24 86 F1 | 	sub	local04, #4
2398c     FF FF FF FF 
23990     12 FF 6B FC | 	wrlong	##-1, local04
23994     0C 24 86 F1 | 	sub	local04, #12
23998     12 01 49 FC | 	wrbyte	#128, local04
2399c     04 24 86 F1 | 	sub	local04, #4
239a0     03 30 0E F2 | 	cmp	local10, #3 wz
239a4     D0 00 90 5D |  if_ne	jmp	#LR__3739
239a8     34 24 06 F1 | 	add	local04, #52
239ac     12 13 02 F6 | 	mov	arg01, local04
239b0     34 24 86 F1 | 	sub	local04, #52
239b4     30 12 06 F1 | 	add	arg01, #48
239b8                 | ' {
239b8                 | ' 
239b8                 | ' 	return *((WORD*)ptr);
239b8     09 FB E1 FA | 	rdword	result1, arg01
239bc     FD 26 32 F9 | 	getword	local05, result1, #0
239c0     01 26 0E F2 | 	cmp	local05, #1 wz
239c4     B0 00 90 5D |  if_ne	jmp	#LR__3739
239c8     01 28 06 F1 | 	add	local06, #1
239cc     12 13 02 F6 | 	mov	arg01, local04
239d0     14 15 02 F6 | 	mov	arg02, local06
239d4     CC CD BF FD | 	call	#_fatfs_cc_move_window
239d8     00 FA 0D F2 | 	cmp	result1, #0 wz
239dc     98 00 90 5D |  if_ne	jmp	#LR__3739
239e0     04 24 06 F1 | 	add	local04, #4
239e4     12 01 48 FC | 	wrbyte	#0, local04
239e8     30 24 06 F1 | 	add	local04, #48
239ec     12 13 02 F6 | 	mov	arg01, local04
239f0     34 24 86 F1 | 	sub	local04, #52
239f4     FE 13 06 F1 | 	add	arg01, #510
239f8                 | ' {
239f8                 | ' 
239f8                 | ' 	return *((WORD*)ptr);
239f8     09 FB E1 FA | 	rdword	result1, arg01
239fc     FD 26 32 F9 | 	getword	local05, result1, #0
23a00     55 00 00 FF 
23a04     55 26 0E F2 | 	cmp	local05, ##43605 wz
23a08     34 24 06 A1 |  if_e	add	local04, #52
23a0c     12 13 02 A6 |  if_e	mov	arg01, local04
23a10     34 24 86 A1 |  if_e	sub	local04, #52
23a14                 | ' {
23a14                 | ' 
23a14                 | ' 	return *((DWORD*)ptr);
23a14     09 FB 01 AB |  if_e	rdlong	result1, arg01
23a18     A9 B0 20 AF 
23a1c     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
23a20     54 00 90 5D |  if_ne	jmp	#LR__3738
23a24     34 24 06 F1 | 	add	local04, #52
23a28     12 13 02 F6 | 	mov	arg01, local04
23a2c     34 24 86 F1 | 	sub	local04, #52
23a30     E4 13 06 F1 | 	add	arg01, #484
23a34                 | ' {
23a34                 | ' 
23a34                 | ' 	return *((DWORD*)ptr);
23a34     09 FB 01 FB | 	rdlong	result1, arg01
23a38     B9 A0 30 FF 
23a3c     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
23a40     34 00 90 5D |  if_ne	jmp	#LR__3738
23a44     34 24 06 F1 | 	add	local04, #52
23a48     12 13 02 F6 | 	mov	arg01, local04
23a4c     E8 13 06 F1 | 	add	arg01, #488
23a50                 | ' {
23a50                 | ' 
23a50                 | ' 	return *((DWORD*)ptr);
23a50     09 FB 01 FB | 	rdlong	result1, arg01
23a54     20 24 86 F1 | 	sub	local04, #32
23a58     12 FB 61 FC | 	wrlong	result1, local04
23a5c     20 24 06 F1 | 	add	local04, #32
23a60     12 13 02 F6 | 	mov	arg01, local04
23a64     EC 13 06 F1 | 	add	arg01, #492
23a68                 | ' {
23a68                 | ' 
23a68                 | ' 	return *((DWORD*)ptr);
23a68     09 FB 01 FB | 	rdlong	result1, arg01
23a6c     24 24 86 F1 | 	sub	local04, #36
23a70     12 FB 61 FC | 	wrlong	result1, local04
23a74     10 24 86 F1 | 	sub	local04, #16
23a78                 | LR__3738
23a78                 | LR__3739
23a78     12 31 42 FC | 	wrbyte	local10, local04
23a7c     04 E4 05 F1 | 	add	objptr, #4
23a80     F2 26 E2 FA | 	rdword	local05, objptr
23a84     01 26 06 F1 | 	add	local05, #1
23a88     F2 26 52 FC | 	wrword	local05, objptr
23a8c     F2 32 E2 FA | 	rdword	local11, objptr
23a90     06 24 06 F1 | 	add	local04, #6
23a94     12 33 52 FC | 	wrword	local11, local04
23a98     04 E4 05 F1 | 	add	objptr, #4
23a9c     06 24 06 F1 | 	add	local04, #6
23aa0     12 E5 61 FC | 	wrlong	objptr, local04
23aa4                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
23aa4                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
23aa4                 | ' 			{
23aa4                 | ' 
23aa4                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
23aa4                 | ' 
23aa4                 | ' 
23aa4                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
23aa4                 | ' 
23aa4                 | ' 			}
23aa4                 | ' 		}
23aa4                 | ' 
23aa4                 | ' 
23aa4                 | ' 	}
23aa4                 | ' 
23aa4                 | ' 	fs->fs_type = (BYTE)fmt;
23aa4                 | ' 	fs->id = ++Fsid;
23aa4                 | ' 
23aa4                 | ' 	fs->lfnbuf = LfnBuf;
23aa4                 | ' #line 3567 "ff.c"
23aa4                 | ' 	return FR_OK;
23aa4     00 FA 05 F6 | 	mov	result1, #0
23aa8     08 E4 85 F1 | 	sub	objptr, #8
23aac                 | LR__3740
23aac     A7 F0 03 F6 | 	mov	ptra, fp
23ab0     B2 00 A0 FD | 	call	#popregs_
23ab4                 | _fatfs_cc_mount_volume_ret
23ab4     2D 00 64 FD | 	ret
23ab8                 | 
23ab8                 | _fatfs_cc_validate
23ab8     09 01 0A F6 | 	mov	_var01, arg01 wz
23abc     09 02 06 F6 | 	mov	_var02, #9
23ac0     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
23ac4     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
23ac8     50 00 90 AD |  if_e	jmp	#LR__3750
23acc     04 00 06 F1 | 	add	_var01, #4
23ad0     00 07 E2 FA | 	rdword	_var04, _var01
23ad4     04 00 86 F1 | 	sub	_var01, #4
23ad8     00 13 02 FB | 	rdlong	arg01, _var01
23adc     06 12 06 F1 | 	add	arg01, #6
23ae0     09 FB E1 FA | 	rdword	result1, arg01
23ae4     FD 06 0A F2 | 	cmp	_var04, result1 wz
23ae8     30 00 90 5D |  if_ne	jmp	#LR__3750
23aec     00 07 02 FB | 	rdlong	_var04, _var01
23af0     01 06 06 F1 | 	add	_var04, #1
23af4     03 13 CA FA | 	rdbyte	arg01, _var04 wz
23af8     01 FA 05 56 |  if_ne	mov	result1, #1
23afc                 | ' 
23afc                 | ' 	return Stat;
23afc     01 00 00 AF 
23b00     20 E4 05 A1 |  if_e	add	objptr, ##544
23b04     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
23b08     01 00 00 AF 
23b0c     20 E4 85 A1 |  if_e	sub	objptr, ##544
23b10     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
23b14     01 04 CE F7 | 	test	_var03, #1 wz
23b18     00 02 06 A6 |  if_e	mov	_var02, #0
23b1c                 | LR__3750
23b1c     00 02 0E F2 | 	cmp	_var02, #0 wz
23b20     00 05 02 AB |  if_e	rdlong	_var03, _var01
23b24     00 04 06 56 |  if_ne	mov	_var03, #0
23b28     0A 05 62 FC | 	wrlong	_var03, arg02
23b2c                 | ' 			res = FR_OK;
23b2c                 | ' 		}
23b2c                 | ' 
23b2c                 | ' 	}
23b2c                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
23b2c                 | ' 	return res;
23b2c     01 FB 01 F6 | 	mov	result1, _var02
23b30                 | _fatfs_cc_validate_ret
23b30     2D 00 64 FD | 	ret
23b34                 | 
23b34                 | _fatfs_cc_f_mount
23b34     01 4A 05 F6 | 	mov	COUNT_, #1
23b38     A8 00 A0 FD | 	call	#pushregs_
23b3c     20 F0 07 F1 | 	add	ptra, #32
23b40     04 4E 05 F1 | 	add	fp, #4
23b44     A7 12 62 FC | 	wrlong	arg01, fp
23b48     04 4E 05 F1 | 	add	fp, #4
23b4c     A7 14 62 FC | 	wrlong	arg02, fp
23b50     04 4E 05 F1 | 	add	fp, #4
23b54     A7 16 42 FC | 	wrbyte	arg03, fp
23b58     04 4E 85 F1 | 	sub	fp, #4
23b5c     A7 16 02 FB | 	rdlong	arg03, fp
23b60     14 4E 05 F1 | 	add	fp, #20
23b64     A7 16 62 FC | 	wrlong	arg03, fp
23b68     A7 12 02 F6 | 	mov	arg01, fp
23b6c     1C 4E 85 F1 | 	sub	fp, #28
23b70     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
23b74     14 4E 05 F1 | 	add	fp, #20
23b78     A7 FA 61 FC | 	wrlong	result1, fp
23b7c     14 4E 85 F1 | 	sub	fp, #20
23b80     00 FA 55 F2 | 	cmps	result1, #0 wc
23b84     0B FA 05 C6 |  if_b	mov	result1, #11
23b88     C0 00 90 CD |  if_b	jmp	#LR__3761
23b8c     14 4E 05 F1 | 	add	fp, #20
23b90     A7 16 02 FB | 	rdlong	arg03, fp
23b94     02 16 66 F0 | 	shl	arg03, #2
23b98     F2 16 02 F1 | 	add	arg03, objptr
23b9c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
23ba0     04 4E 85 F1 | 	sub	fp, #4
23ba4     A7 16 62 FC | 	wrlong	arg03, fp
23ba8     10 4E 85 F1 | 	sub	fp, #16
23bac     28 00 90 AD |  if_e	jmp	#LR__3760
23bb0     10 4E 05 F1 | 	add	fp, #16
23bb4     A7 16 02 FB | 	rdlong	arg03, fp
23bb8     10 4E 85 F1 | 	sub	fp, #16
23bbc     01 16 06 F1 | 	add	arg03, #1
23bc0     0B 13 C2 FA | 	rdbyte	arg01, arg03
23bc4     1C 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
23bc8     10 4E 05 F1 | 	add	fp, #16
23bcc     A7 16 02 FB | 	rdlong	arg03, fp
23bd0     10 4E 85 F1 | 	sub	fp, #16
23bd4     0B 01 48 FC | 	wrbyte	#0, arg03
23bd8                 | LR__3760
23bd8     04 4E 05 F1 | 	add	fp, #4
23bdc     A7 1E 0A FB | 	rdlong	local01, fp wz
23be0     04 4E 85 F1 | 	sub	fp, #4
23be4     04 4E 05 51 |  if_ne	add	fp, #4
23be8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
23bec     04 4E 85 51 |  if_ne	sub	fp, #4
23bf0     0F 01 48 5C |  if_ne	wrbyte	#0, local01
23bf4     14 4E 05 F1 | 	add	fp, #20
23bf8     A7 1E 02 FB | 	rdlong	local01, fp
23bfc     02 1E 66 F0 | 	shl	local01, #2
23c00     F2 1E 02 F1 | 	add	local01, objptr
23c04     10 4E 85 F1 | 	sub	fp, #16
23c08     A7 16 02 FB | 	rdlong	arg03, fp
23c0c     0F 17 62 FC | 	wrlong	arg03, local01
23c10     08 4E 05 F1 | 	add	fp, #8
23c14     A7 1E CA FA | 	rdbyte	local01, fp wz
23c18     0C 4E 85 F1 | 	sub	fp, #12
23c1c     00 FA 05 A6 |  if_e	mov	result1, #0
23c20     28 00 90 AD |  if_e	jmp	#LR__3761
23c24     08 4E 05 F1 | 	add	fp, #8
23c28     A7 12 02 F6 | 	mov	arg01, fp
23c2c     04 4E 85 F1 | 	sub	fp, #4
23c30     A7 14 02 F6 | 	mov	arg02, fp
23c34     04 4E 85 F1 | 	sub	fp, #4
23c38     00 16 06 F6 | 	mov	arg03, #0
23c3c     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
23c40     18 4E 05 F1 | 	add	fp, #24
23c44     A7 FA 61 FC | 	wrlong	result1, fp
23c48                 | ' 
23c48                 | ' 	res = mount_volume(&path, &fs, 0);
23c48                 | ' 	return res ;
23c48     18 4E 85 F1 | 	sub	fp, #24
23c4c                 | LR__3761
23c4c     A7 F0 03 F6 | 	mov	ptra, fp
23c50     B2 00 A0 FD | 	call	#popregs_
23c54                 | _fatfs_cc_f_mount_ret
23c54     2D 00 64 FD | 	ret
23c58                 | 
23c58                 | _fatfs_cc_f_open
23c58     02 4A 05 F6 | 	mov	COUNT_, #2
23c5c     A8 00 A0 FD | 	call	#pushregs_
23c60     60 F0 07 F1 | 	add	ptra, #96
23c64     04 4E 05 F1 | 	add	fp, #4
23c68     A7 12 62 FC | 	wrlong	arg01, fp
23c6c     04 4E 05 F1 | 	add	fp, #4
23c70     A7 14 62 FC | 	wrlong	arg02, fp
23c74     04 4E 05 F1 | 	add	fp, #4
23c78     A7 16 42 FC | 	wrbyte	arg03, fp
23c7c     08 4E 85 F1 | 	sub	fp, #8
23c80     A7 18 0A FB | 	rdlong	arg04, fp wz
23c84     04 4E 85 F1 | 	sub	fp, #4
23c88     09 FA 05 A6 |  if_e	mov	result1, #9
23c8c     98 06 90 AD |  if_e	jmp	#LR__3787
23c90     0C 4E 05 F1 | 	add	fp, #12
23c94     A7 18 C2 FA | 	rdbyte	arg04, fp
23c98     3F 18 06 F5 | 	and	arg04, #63
23c9c     A7 18 42 FC | 	wrbyte	arg04, fp
23ca0     04 4E 85 F1 | 	sub	fp, #4
23ca4     A7 12 02 F6 | 	mov	arg01, fp
23ca8     3C 4E 05 F1 | 	add	fp, #60
23cac     A7 14 02 F6 | 	mov	arg02, fp
23cb0     38 4E 85 F1 | 	sub	fp, #56
23cb4     A7 16 C2 FA | 	rdbyte	arg03, fp
23cb8     0C 4E 85 F1 | 	sub	fp, #12
23cbc     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
23cc0     10 4E 05 F1 | 	add	fp, #16
23cc4     A7 FA 61 FC | 	wrlong	result1, fp
23cc8     10 4E 85 F1 | 	sub	fp, #16
23ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
23cd0     2C 06 90 5D |  if_ne	jmp	#LR__3786
23cd4     44 4E 05 F1 | 	add	fp, #68
23cd8     A7 18 02 FB | 	rdlong	arg04, fp
23cdc     30 4E 85 F1 | 	sub	fp, #48
23ce0     A7 18 62 FC | 	wrlong	arg04, fp
23ce4     A7 12 02 F6 | 	mov	arg01, fp
23ce8     0C 4E 85 F1 | 	sub	fp, #12
23cec     A7 1E 02 FB | 	rdlong	local01, fp
23cf0     08 4E 85 F1 | 	sub	fp, #8
23cf4     0F 15 02 F6 | 	mov	arg02, local01
23cf8     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
23cfc     10 4E 05 F1 | 	add	fp, #16
23d00     A7 FA 61 FC | 	wrlong	result1, fp
23d04     10 4E 85 F1 | 	sub	fp, #16
23d08     00 FA 0D F2 | 	cmp	result1, #0 wz
23d0c     1C 00 90 5D |  if_ne	jmp	#LR__3770
23d10     3F 4E 05 F1 | 	add	fp, #63
23d14     A7 18 C2 FA | 	rdbyte	arg04, fp
23d18     3F 4E 85 F1 | 	sub	fp, #63
23d1c     80 18 CE F7 | 	test	arg04, #128 wz
23d20     10 4E 05 51 |  if_ne	add	fp, #16
23d24     A7 0C 68 5C |  if_ne	wrlong	#6, fp
23d28     10 4E 85 51 |  if_ne	sub	fp, #16
23d2c                 | LR__3770
23d2c     0C 4E 05 F1 | 	add	fp, #12
23d30     A7 18 C2 FA | 	rdbyte	arg04, fp
23d34     0C 4E 85 F1 | 	sub	fp, #12
23d38     1C 18 CE F7 | 	test	arg04, #28 wz
23d3c     F0 01 90 AD |  if_e	jmp	#LR__3775
23d40     10 4E 05 F1 | 	add	fp, #16
23d44     A7 1E 0A FB | 	rdlong	local01, fp wz
23d48     10 4E 85 F1 | 	sub	fp, #16
23d4c     48 00 90 AD |  if_e	jmp	#LR__3772
23d50     10 4E 05 F1 | 	add	fp, #16
23d54     A7 18 02 FB | 	rdlong	arg04, fp
23d58     10 4E 85 F1 | 	sub	fp, #16
23d5c     04 18 0E F2 | 	cmp	arg04, #4 wz
23d60     1C 00 90 5D |  if_ne	jmp	#LR__3771
23d64     14 4E 05 F1 | 	add	fp, #20
23d68     A7 12 02 F6 | 	mov	arg01, fp
23d6c     14 4E 85 F1 | 	sub	fp, #20
23d70     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
23d74     10 4E 05 F1 | 	add	fp, #16
23d78     A7 FA 61 FC | 	wrlong	result1, fp
23d7c     10 4E 85 F1 | 	sub	fp, #16
23d80                 | LR__3771
23d80     0C 4E 05 F1 | 	add	fp, #12
23d84     A7 1E C2 FA | 	rdbyte	local01, fp
23d88     08 1E 46 F5 | 	or	local01, #8
23d8c     A7 1E 42 FC | 	wrbyte	local01, fp
23d90     0C 4E 85 F1 | 	sub	fp, #12
23d94     3C 00 90 FD | 	jmp	#LR__3774
23d98                 | LR__3772
23d98     1A 4E 05 F1 | 	add	fp, #26
23d9c     A7 1E C2 FA | 	rdbyte	local01, fp
23da0     1A 4E 85 F1 | 	sub	fp, #26
23da4     11 1E CE F7 | 	test	local01, #17 wz
23da8     10 4E 05 51 |  if_ne	add	fp, #16
23dac     A7 0E 68 5C |  if_ne	wrlong	#7, fp
23db0     10 4E 85 51 |  if_ne	sub	fp, #16
23db4     1C 00 90 5D |  if_ne	jmp	#LR__3773
23db8     0C 4E 05 F1 | 	add	fp, #12
23dbc     A7 1E C2 FA | 	rdbyte	local01, fp
23dc0     0C 4E 85 F1 | 	sub	fp, #12
23dc4     04 1E CE F7 | 	test	local01, #4 wz
23dc8     10 4E 05 51 |  if_ne	add	fp, #16
23dcc     A7 10 68 5C |  if_ne	wrlong	#8, fp
23dd0     10 4E 85 51 |  if_ne	sub	fp, #16
23dd4                 | LR__3773
23dd4                 | LR__3774
23dd4     10 4E 05 F1 | 	add	fp, #16
23dd8     A7 1E 0A FB | 	rdlong	local01, fp wz
23ddc     10 4E 85 F1 | 	sub	fp, #16
23de0     A8 01 90 5D |  if_ne	jmp	#LR__3778
23de4     0C 4E 05 F1 | 	add	fp, #12
23de8     A7 1E C2 FA | 	rdbyte	local01, fp
23dec     0C 4E 85 F1 | 	sub	fp, #12
23df0     08 1E CE F7 | 	test	local01, #8 wz
23df4     94 01 90 AD |  if_e	jmp	#LR__3778
23df8     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
23dfc     54 4E 05 F1 | 	add	fp, #84
23e00     A7 FA 61 FC | 	wrlong	result1, fp
23e04     24 4E 85 F1 | 	sub	fp, #36
23e08     A7 12 02 FB | 	rdlong	arg01, fp
23e0c     0E 12 06 F1 | 	add	arg01, #14
23e10     09 FB 61 FC | 	wrlong	result1, arg01
23e14     A7 12 02 FB | 	rdlong	arg01, fp
23e18     16 12 06 F1 | 	add	arg01, #22
23e1c     24 4E 05 F1 | 	add	fp, #36
23e20     A7 14 02 FB | 	rdlong	arg02, fp
23e24     09 15 62 FC | 	wrlong	arg02, arg01
23e28     10 4E 85 F1 | 	sub	fp, #16
23e2c     A7 12 02 FB | 	rdlong	arg01, fp
23e30     14 4E 85 F1 | 	sub	fp, #20
23e34     A7 14 02 FB | 	rdlong	arg02, fp
23e38     30 4E 85 F1 | 	sub	fp, #48
23e3c     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
23e40     48 4E 05 F1 | 	add	fp, #72
23e44     A7 FA 61 FC | 	wrlong	result1, fp
23e48     18 4E 85 F1 | 	sub	fp, #24
23e4c     A7 1E 02 FB | 	rdlong	local01, fp
23e50     0B 1E 06 F1 | 	add	local01, #11
23e54     0F 41 48 FC | 	wrbyte	#32, local01
23e58     14 4E 05 F1 | 	add	fp, #20
23e5c     A7 12 02 FB | 	rdlong	arg01, fp
23e60     14 4E 85 F1 | 	sub	fp, #20
23e64     A7 14 02 FB | 	rdlong	arg02, fp
23e68     30 4E 85 F1 | 	sub	fp, #48
23e6c     00 16 06 F6 | 	mov	arg03, #0
23e70     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
23e74     30 4E 05 F1 | 	add	fp, #48
23e78     A7 12 02 FB | 	rdlong	arg01, fp
23e7c     1C 12 06 F1 | 	add	arg01, #28
23e80     09 01 68 FC | 	wrlong	#0, arg01
23e84     14 4E 05 F1 | 	add	fp, #20
23e88     A7 1E 02 FB | 	rdlong	local01, fp
23e8c     03 1E 06 F1 | 	add	local01, #3
23e90     0F 03 48 FC | 	wrbyte	#1, local01
23e94     04 4E 05 F1 | 	add	fp, #4
23e98     A7 1E 0A FB | 	rdlong	local01, fp wz
23e9c     48 4E 85 F1 | 	sub	fp, #72
23ea0     E8 00 90 AD |  if_e	jmp	#LR__3778
23ea4     44 4E 05 F1 | 	add	fp, #68
23ea8     A7 1E 02 FB | 	rdlong	local01, fp
23eac     30 1E 06 F1 | 	add	local01, #48
23eb0     0F 1F 02 FB | 	rdlong	local01, local01
23eb4     14 4E 05 F1 | 	add	fp, #20
23eb8     A7 1E 62 FC | 	wrlong	local01, fp
23ebc     44 4E 85 F1 | 	sub	fp, #68
23ec0     A7 12 02 F6 | 	mov	arg01, fp
23ec4     34 4E 05 F1 | 	add	fp, #52
23ec8     A7 14 02 FB | 	rdlong	arg02, fp
23ecc     48 4E 85 F1 | 	sub	fp, #72
23ed0     00 16 06 F6 | 	mov	arg03, #0
23ed4     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
23ed8     10 4E 05 F1 | 	add	fp, #16
23edc     A7 FA 61 FC | 	wrlong	result1, fp
23ee0     10 4E 85 F1 | 	sub	fp, #16
23ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
23ee8     A0 00 90 5D |  if_ne	jmp	#LR__3778
23eec     44 4E 05 F1 | 	add	fp, #68
23ef0     A7 12 02 FB | 	rdlong	arg01, fp
23ef4     14 4E 05 F1 | 	add	fp, #20
23ef8     A7 14 02 FB | 	rdlong	arg02, fp
23efc     58 4E 85 F1 | 	sub	fp, #88
23f00     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
23f04     10 4E 05 F1 | 	add	fp, #16
23f08     A7 FA 61 FC | 	wrlong	result1, fp
23f0c     34 4E 05 F1 | 	add	fp, #52
23f10     A7 18 02 FB | 	rdlong	arg04, fp
23f14     04 4E 05 F1 | 	add	fp, #4
23f18     A7 1E 02 FB | 	rdlong	local01, fp
23f1c     48 4E 85 F1 | 	sub	fp, #72
23f20     01 1E 86 F1 | 	sub	local01, #1
23f24     10 18 06 F1 | 	add	arg04, #16
23f28     0C 1F 62 FC | 	wrlong	local01, arg04
23f2c     5C 00 90 FD | 	jmp	#LR__3778
23f30                 | LR__3775
23f30     10 4E 05 F1 | 	add	fp, #16
23f34     A7 18 0A FB | 	rdlong	arg04, fp wz
23f38     10 4E 85 F1 | 	sub	fp, #16
23f3c     4C 00 90 5D |  if_ne	jmp	#LR__3777
23f40     1A 4E 05 F1 | 	add	fp, #26
23f44     A7 18 C2 FA | 	rdbyte	arg04, fp
23f48     1A 4E 85 F1 | 	sub	fp, #26
23f4c     10 18 CE F7 | 	test	arg04, #16 wz
23f50     10 4E 05 51 |  if_ne	add	fp, #16
23f54     A7 08 68 5C |  if_ne	wrlong	#4, fp
23f58     10 4E 85 51 |  if_ne	sub	fp, #16
23f5c     2C 00 90 5D |  if_ne	jmp	#LR__3776
23f60     0C 4E 05 F1 | 	add	fp, #12
23f64     A7 18 C2 FA | 	rdbyte	arg04, fp
23f68     0C 4E 85 F1 | 	sub	fp, #12
23f6c     02 18 CE F7 | 	test	arg04, #2 wz
23f70     1A 4E 05 51 |  if_ne	add	fp, #26
23f74     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
23f78     1A 4E 85 51 |  if_ne	sub	fp, #26
23f7c     01 1E CE 57 |  if_ne	test	local01, #1 wz
23f80     10 4E 05 51 |  if_ne	add	fp, #16
23f84     A7 0E 68 5C |  if_ne	wrlong	#7, fp
23f88     10 4E 85 51 |  if_ne	sub	fp, #16
23f8c                 | LR__3776
23f8c                 | LR__3777
23f8c                 | LR__3778
23f8c     10 4E 05 F1 | 	add	fp, #16
23f90     A7 1E 0A FB | 	rdlong	local01, fp wz
23f94     10 4E 85 F1 | 	sub	fp, #16
23f98     60 00 90 5D |  if_ne	jmp	#LR__3779
23f9c     0C 4E 05 F1 | 	add	fp, #12
23fa0     A7 20 C2 FA | 	rdbyte	local02, fp
23fa4     0C 4E 85 F1 | 	sub	fp, #12
23fa8     08 20 CE F7 | 	test	local02, #8 wz
23fac     0C 4E 05 51 |  if_ne	add	fp, #12
23fb0     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
23fb4     40 20 46 55 |  if_ne	or	local02, #64
23fb8     A7 20 42 5C |  if_ne	wrbyte	local02, fp
23fbc     0C 4E 85 51 |  if_ne	sub	fp, #12
23fc0     04 4E 05 F1 | 	add	fp, #4
23fc4     A7 20 02 FB | 	rdlong	local02, fp
23fc8     40 4E 05 F1 | 	add	fp, #64
23fcc     A7 1E 02 FB | 	rdlong	local01, fp
23fd0     30 1E 06 F1 | 	add	local01, #48
23fd4     0F 1F 02 FB | 	rdlong	local01, local01
23fd8     20 20 06 F1 | 	add	local02, #32
23fdc     10 1F 62 FC | 	wrlong	local01, local02
23fe0     40 4E 85 F1 | 	sub	fp, #64
23fe4     A7 20 02 FB | 	rdlong	local02, fp
23fe8     2C 4E 05 F1 | 	add	fp, #44
23fec     A7 1E 02 FB | 	rdlong	local01, fp
23ff0     30 4E 85 F1 | 	sub	fp, #48
23ff4     24 20 06 F1 | 	add	local02, #36
23ff8     10 1F 62 FC | 	wrlong	local01, local02
23ffc                 | LR__3779
23ffc     10 4E 05 F1 | 	add	fp, #16
24000     A7 20 0A FB | 	rdlong	local02, fp wz
24004     10 4E 85 F1 | 	sub	fp, #16
24008     F4 02 90 5D |  if_ne	jmp	#LR__3785
2400c     04 4E 05 F1 | 	add	fp, #4
24010     A7 20 02 FB | 	rdlong	local02, fp
24014     40 4E 05 F1 | 	add	fp, #64
24018     A7 12 02 FB | 	rdlong	arg01, fp
2401c     14 4E 85 F1 | 	sub	fp, #20
24020     A7 14 02 FB | 	rdlong	arg02, fp
24024     30 4E 85 F1 | 	sub	fp, #48
24028     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2402c     08 20 06 F1 | 	add	local02, #8
24030     10 FB 61 FC | 	wrlong	result1, local02
24034     04 4E 05 F1 | 	add	fp, #4
24038     A7 20 02 FB | 	rdlong	local02, fp
2403c     2C 4E 05 F1 | 	add	fp, #44
24040     A7 12 02 FB | 	rdlong	arg01, fp
24044     1C 12 06 F1 | 	add	arg01, #28
24048                 | ' {
24048                 | ' 
24048                 | ' 	return *((DWORD*)ptr);
24048     09 FB 01 FB | 	rdlong	result1, arg01
2404c     0C 20 06 F1 | 	add	local02, #12
24050     10 FB 61 FC | 	wrlong	result1, local02
24054     2C 4E 85 F1 | 	sub	fp, #44
24058     A7 20 02 FB | 	rdlong	local02, fp
2405c     40 4E 05 F1 | 	add	fp, #64
24060     A7 1E 02 FB | 	rdlong	local01, fp
24064     10 1F 62 FC | 	wrlong	local01, local02
24068     40 4E 85 F1 | 	sub	fp, #64
2406c     A7 20 02 FB | 	rdlong	local02, fp
24070     40 4E 05 F1 | 	add	fp, #64
24074     A7 1E 02 FB | 	rdlong	local01, fp
24078     06 1E 06 F1 | 	add	local01, #6
2407c     0F 1F E2 FA | 	rdword	local01, local01
24080     04 20 06 F1 | 	add	local02, #4
24084     10 1F 52 FC | 	wrword	local01, local02
24088     40 4E 85 F1 | 	sub	fp, #64
2408c     A7 20 02 FB | 	rdlong	local02, fp
24090     08 4E 05 F1 | 	add	fp, #8
24094     A7 1E C2 FA | 	rdbyte	local01, fp
24098     10 20 06 F1 | 	add	local02, #16
2409c     10 1F 42 FC | 	wrbyte	local01, local02
240a0     08 4E 85 F1 | 	sub	fp, #8
240a4     A7 20 02 FB | 	rdlong	local02, fp
240a8     11 20 06 F1 | 	add	local02, #17
240ac     10 01 48 FC | 	wrbyte	#0, local02
240b0     A7 20 02 FB | 	rdlong	local02, fp
240b4     1C 20 06 F1 | 	add	local02, #28
240b8     10 01 68 FC | 	wrlong	#0, local02
240bc     A7 20 02 FB | 	rdlong	local02, fp
240c0     14 20 06 F1 | 	add	local02, #20
240c4     10 01 68 FC | 	wrlong	#0, local02
240c8     A7 12 02 FB | 	rdlong	arg01, fp
240cc     04 4E 85 F1 | 	sub	fp, #4
240d0     28 12 06 F1 | 	add	arg01, #40
240d4     00 14 06 F6 | 	mov	arg02, #0
240d8     09 16 C6 F9 | 	decod	arg03, #9
240dc     98 00 A0 FD | 	call	#\builtin_bytefill_
240e0     0C 4E 05 F1 | 	add	fp, #12
240e4     A7 20 C2 FA | 	rdbyte	local02, fp
240e8     0C 4E 85 F1 | 	sub	fp, #12
240ec     20 20 CE F7 | 	test	local02, #32 wz
240f0     0C 02 90 AD |  if_e	jmp	#LR__3784
240f4     04 4E 05 F1 | 	add	fp, #4
240f8     A7 1E 02 FB | 	rdlong	local01, fp
240fc     04 4E 85 F1 | 	sub	fp, #4
24100     0C 1E 06 F1 | 	add	local01, #12
24104     0F 21 02 FB | 	rdlong	local02, local01
24108     01 20 16 F2 | 	cmp	local02, #1 wc
2410c     F0 01 90 CD |  if_b	jmp	#LR__3784
24110     04 4E 05 F1 | 	add	fp, #4
24114     A7 1E 02 FB | 	rdlong	local01, fp
24118     0F 21 02 F6 | 	mov	local02, local01
2411c     0C 1E 06 F1 | 	add	local01, #12
24120     0F 1F 02 FB | 	rdlong	local01, local01
24124     14 20 06 F1 | 	add	local02, #20
24128     10 1F 62 FC | 	wrlong	local01, local02
2412c     40 4E 05 F1 | 	add	fp, #64
24130     A7 20 02 FB | 	rdlong	local02, fp
24134     0A 20 06 F1 | 	add	local02, #10
24138     10 21 E2 FA | 	rdword	local02, local02
2413c     09 20 66 F0 | 	shl	local02, #9
24140     08 4E 05 F1 | 	add	fp, #8
24144     A7 20 62 FC | 	wrlong	local02, fp
24148     48 4E 85 F1 | 	sub	fp, #72
2414c     A7 20 02 FB | 	rdlong	local02, fp
24150     08 20 06 F1 | 	add	local02, #8
24154     10 1F 02 FB | 	rdlong	local01, local02
24158     4C 4E 05 F1 | 	add	fp, #76
2415c     A7 1E 62 FC | 	wrlong	local01, fp
24160                 | ' 				fp->fptr = fp->obj.objsize;
24160                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
24160                 | ' 				clst = fp->obj.sclust;
24160                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
24160     4C 4E 85 F1 | 	sub	fp, #76
24164     A7 20 02 FB | 	rdlong	local02, fp
24168     0C 20 06 F1 | 	add	local02, #12
2416c     10 1F 02 FB | 	rdlong	local01, local02
24170     58 4E 05 F1 | 	add	fp, #88
24174     A7 1E 62 FC | 	wrlong	local01, fp
24178     5C 4E 85 F1 | 	sub	fp, #92
2417c                 | LR__3780
2417c     10 4E 05 F1 | 	add	fp, #16
24180     A7 20 0A FB | 	rdlong	local02, fp wz
24184     10 4E 85 F1 | 	sub	fp, #16
24188     94 00 90 5D |  if_ne	jmp	#LR__3781
2418c     5C 4E 05 F1 | 	add	fp, #92
24190     A7 20 02 FB | 	rdlong	local02, fp
24194     10 4E 85 F1 | 	sub	fp, #16
24198     A7 1E 02 FB | 	rdlong	local01, fp
2419c     4C 4E 85 F1 | 	sub	fp, #76
241a0     0F 21 1A F2 | 	cmp	local02, local01 wcz
241a4     78 00 90 ED |  if_be	jmp	#LR__3781
241a8     04 4E 05 F1 | 	add	fp, #4
241ac     A7 12 02 FB | 	rdlong	arg01, fp
241b0     4C 4E 05 F1 | 	add	fp, #76
241b4     A7 14 02 FB | 	rdlong	arg02, fp
241b8     50 4E 85 F1 | 	sub	fp, #80
241bc     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
241c0     50 4E 05 F1 | 	add	fp, #80
241c4     A7 FA 61 FC | 	wrlong	result1, fp
241c8     50 4E 85 F1 | 	sub	fp, #80
241cc     02 FA 15 F2 | 	cmp	result1, #2 wc
241d0     10 4E 05 C1 |  if_b	add	fp, #16
241d4     A7 04 68 CC |  if_b	wrlong	#2, fp
241d8     10 4E 85 C1 |  if_b	sub	fp, #16
241dc     50 4E 05 F1 | 	add	fp, #80
241e0     A7 20 02 FB | 	rdlong	local02, fp
241e4     50 4E 85 F1 | 	sub	fp, #80
241e8     FF FF 7F FF 
241ec     FF 21 0E F2 | 	cmp	local02, ##-1 wz
241f0     10 4E 05 A1 |  if_e	add	fp, #16
241f4     A7 02 68 AC |  if_e	wrlong	#1, fp
241f8     10 4E 85 A1 |  if_e	sub	fp, #16
241fc     5C 4E 05 F1 | 	add	fp, #92
24200     A7 20 02 FB | 	rdlong	local02, fp
24204     10 4E 85 F1 | 	sub	fp, #16
24208     A7 1E 02 FB | 	rdlong	local01, fp
2420c     0F 21 82 F1 | 	sub	local02, local01
24210     10 4E 05 F1 | 	add	fp, #16
24214     A7 20 62 FC | 	wrlong	local02, fp
24218     5C 4E 85 F1 | 	sub	fp, #92
2421c     5C FF 9F FD | 	jmp	#LR__3780
24220                 | LR__3781
24220     04 4E 05 F1 | 	add	fp, #4
24224     A7 20 02 FB | 	rdlong	local02, fp
24228     4C 4E 05 F1 | 	add	fp, #76
2422c     A7 1E 02 FB | 	rdlong	local01, fp
24230     18 20 06 F1 | 	add	local02, #24
24234     10 1F 62 FC | 	wrlong	local01, local02
24238     40 4E 85 F1 | 	sub	fp, #64
2423c     A7 20 0A FB | 	rdlong	local02, fp wz
24240     10 4E 85 F1 | 	sub	fp, #16
24244     B8 00 90 5D |  if_ne	jmp	#LR__3783
24248     5C 4E 05 F1 | 	add	fp, #92
2424c     A7 1E 02 FB | 	rdlong	local01, fp
24250     5C 4E 85 F1 | 	sub	fp, #92
24254     FF 1F CE F7 | 	test	local01, #511 wz
24258     A4 00 90 AD |  if_e	jmp	#LR__3783
2425c     44 4E 05 F1 | 	add	fp, #68
24260     A7 12 02 FB | 	rdlong	arg01, fp
24264     0C 4E 05 F1 | 	add	fp, #12
24268     A7 14 02 FB | 	rdlong	arg02, fp
2426c     50 4E 85 F1 | 	sub	fp, #80
24270     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
24274     58 4E 05 F1 | 	add	fp, #88
24278     A7 FA 61 FC | 	wrlong	result1, fp
2427c     00 FA 4D F2 | 	cmps	result1, #0 wz
24280     58 4E 85 F1 | 	sub	fp, #88
24284     10 4E 05 A1 |  if_e	add	fp, #16
24288     A7 04 68 AC |  if_e	wrlong	#2, fp
2428c     10 4E 85 A1 |  if_e	sub	fp, #16
24290     6C 00 90 AD |  if_e	jmp	#LR__3782
24294     04 4E 05 F1 | 	add	fp, #4
24298     A7 20 02 FB | 	rdlong	local02, fp
2429c     54 4E 05 F1 | 	add	fp, #84
242a0     A7 1E 02 FB | 	rdlong	local01, fp
242a4     04 4E 05 F1 | 	add	fp, #4
242a8     A7 18 02 FB | 	rdlong	arg04, fp
242ac     09 18 46 F0 | 	shr	arg04, #9
242b0     0C 1F 02 F1 | 	add	local01, arg04
242b4     1C 20 06 F1 | 	add	local02, #28
242b8     10 1F 62 FC | 	wrlong	local01, local02
242bc     18 4E 85 F1 | 	sub	fp, #24
242c0     A7 20 02 FB | 	rdlong	local02, fp
242c4     01 20 06 F1 | 	add	local02, #1
242c8     10 13 C2 FA | 	rdbyte	arg01, local02
242cc     40 4E 85 F1 | 	sub	fp, #64
242d0     A7 20 02 FB | 	rdlong	local02, fp
242d4     10 15 02 F6 | 	mov	arg02, local02
242d8     28 14 06 F1 | 	add	arg02, #40
242dc     04 4E 85 F1 | 	sub	fp, #4
242e0     1C 20 06 F1 | 	add	local02, #28
242e4     10 17 02 FB | 	rdlong	arg03, local02
242e8     01 18 06 F6 | 	mov	arg04, #1
242ec     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
242f0     00 FA 0D F2 | 	cmp	result1, #0 wz
242f4     10 4E 05 51 |  if_ne	add	fp, #16
242f8     A7 02 68 5C |  if_ne	wrlong	#1, fp
242fc     10 4E 85 51 |  if_ne	sub	fp, #16
24300                 | LR__3782
24300                 | LR__3783
24300                 | LR__3784
24300                 | LR__3785
24300                 | LR__3786
24300     10 4E 05 F1 | 	add	fp, #16
24304     A7 20 0A FB | 	rdlong	local02, fp wz
24308     10 4E 85 F1 | 	sub	fp, #16
2430c     04 4E 05 51 |  if_ne	add	fp, #4
24310     A7 20 02 5B |  if_ne	rdlong	local02, fp
24314     04 4E 85 51 |  if_ne	sub	fp, #4
24318     10 01 68 5C |  if_ne	wrlong	#0, local02
2431c                 | ' 
2431c                 | ' 	return res ;
2431c     10 4E 05 F1 | 	add	fp, #16
24320     A7 FA 01 FB | 	rdlong	result1, fp
24324     10 4E 85 F1 | 	sub	fp, #16
24328                 | LR__3787
24328     A7 F0 03 F6 | 	mov	ptra, fp
2432c     B2 00 A0 FD | 	call	#popregs_
24330                 | _fatfs_cc_f_open_ret
24330     2D 00 64 FD | 	ret
24334                 | 
24334                 | _fatfs_cc_f_read
24334     0E 4A 05 F6 | 	mov	COUNT_, #14
24338     A8 00 A0 FD | 	call	#pushregs_
2433c     38 F0 07 F1 | 	add	ptra, #56
24340     04 4E 05 F1 | 	add	fp, #4
24344     A7 12 62 FC | 	wrlong	arg01, fp
24348     04 4E 05 F1 | 	add	fp, #4
2434c     A7 14 62 FC | 	wrlong	arg02, fp
24350     04 4E 05 F1 | 	add	fp, #4
24354     A7 16 62 FC | 	wrlong	arg03, fp
24358     04 4E 05 F1 | 	add	fp, #4
2435c     A7 18 62 FC | 	wrlong	arg04, fp
24360     08 4E 85 F1 | 	sub	fp, #8
24364     A7 FA 01 FB | 	rdlong	result1, fp
24368     2C 4E 05 F1 | 	add	fp, #44
2436c     A7 FA 61 FC | 	wrlong	result1, fp
24370     24 4E 85 F1 | 	sub	fp, #36
24374     A7 FA 01 FB | 	rdlong	result1, fp
24378     FD 00 68 FC | 	wrlong	#0, result1
2437c     0C 4E 85 F1 | 	sub	fp, #12
24380     A7 12 02 FB | 	rdlong	arg01, fp
24384     14 4E 05 F1 | 	add	fp, #20
24388     A7 14 02 F6 | 	mov	arg02, fp
2438c     18 4E 85 F1 | 	sub	fp, #24
24390     24 F7 BF FD | 	call	#_fatfs_cc_validate
24394     14 4E 05 F1 | 	add	fp, #20
24398     A7 FA 61 FC | 	wrlong	result1, fp
2439c     00 FA 4D F2 | 	cmps	result1, #0 wz
243a0     14 4E 85 F1 | 	sub	fp, #20
243a4     20 00 90 5D |  if_ne	jmp	#LR__3790
243a8     04 4E 05 F1 | 	add	fp, #4
243ac     A7 14 02 FB | 	rdlong	arg02, fp
243b0     11 14 06 F1 | 	add	arg02, #17
243b4     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
243b8     10 4E 05 F1 | 	add	fp, #16
243bc     A7 14 62 FC | 	wrlong	arg02, fp
243c0     14 4E 85 F1 | 	sub	fp, #20
243c4     10 00 90 AD |  if_e	jmp	#LR__3791
243c8                 | LR__3790
243c8     14 4E 05 F1 | 	add	fp, #20
243cc     A7 FA 01 FB | 	rdlong	result1, fp
243d0     14 4E 85 F1 | 	sub	fp, #20
243d4     EC 05 90 FD | 	jmp	#LR__3810
243d8                 | LR__3791
243d8     04 4E 05 F1 | 	add	fp, #4
243dc     A7 18 02 FB | 	rdlong	arg04, fp
243e0     04 4E 85 F1 | 	sub	fp, #4
243e4     10 18 06 F1 | 	add	arg04, #16
243e8     0C 19 C2 FA | 	rdbyte	arg04, arg04
243ec     01 18 CE F7 | 	test	arg04, #1 wz
243f0     07 FA 05 A6 |  if_e	mov	result1, #7
243f4     CC 05 90 AD |  if_e	jmp	#LR__3810
243f8     04 4E 05 F1 | 	add	fp, #4
243fc     A7 1E 02 FB | 	rdlong	local01, fp
24400     0F 21 02 F6 | 	mov	local02, local01
24404     0C 20 06 F1 | 	add	local02, #12
24408     10 23 02 FB | 	rdlong	local03, local02
2440c     14 1E 06 F1 | 	add	local01, #20
24410     0F 1F 02 FB | 	rdlong	local01, local01
24414     0F 23 82 F1 | 	sub	local03, local01
24418     20 4E 05 F1 | 	add	fp, #32
2441c     A7 22 62 FC | 	wrlong	local03, fp
24420     18 4E 85 F1 | 	sub	fp, #24
24424     A7 24 02 FB | 	rdlong	local04, fp
24428     0C 4E 85 F1 | 	sub	fp, #12
2442c     11 25 1A F2 | 	cmp	local04, local03 wcz
24430     24 4E 05 11 |  if_a	add	fp, #36
24434     A7 24 02 1B |  if_a	rdlong	local04, fp
24438     18 4E 85 11 |  if_a	sub	fp, #24
2443c     A7 24 62 1C |  if_a	wrlong	local04, fp
24440     0C 4E 85 11 |  if_a	sub	fp, #12
24444                 | ' 
24444                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
24444                 | LR__3792
24444     0C 4E 05 F1 | 	add	fp, #12
24448     A7 20 02 FB | 	rdlong	local02, fp
2444c     0C 4E 85 F1 | 	sub	fp, #12
24450     10 25 02 F6 | 	mov	local04, local02
24454     01 24 16 F2 | 	cmp	local04, #1 wc
24458     64 05 90 CD |  if_b	jmp	#LR__3809
2445c     04 4E 05 F1 | 	add	fp, #4
24460     A7 22 02 FB | 	rdlong	local03, fp
24464     04 4E 85 F1 | 	sub	fp, #4
24468     14 22 06 F1 | 	add	local03, #20
2446c     11 23 02 FB | 	rdlong	local03, local03
24470     FF 23 CE F7 | 	test	local03, #511 wz
24474     3C 04 90 5D |  if_ne	jmp	#LR__3807
24478     04 4E 05 F1 | 	add	fp, #4
2447c     A7 1E 02 FB | 	rdlong	local01, fp
24480     14 1E 06 F1 | 	add	local01, #20
24484     0F 23 02 FB | 	rdlong	local03, local01
24488     09 22 46 F0 | 	shr	local03, #9
2448c     14 4E 05 F1 | 	add	fp, #20
24490     A7 26 02 FB | 	rdlong	local05, fp
24494     13 29 02 F6 | 	mov	local06, local05
24498     0A 28 06 F1 | 	add	local06, #10
2449c     14 2B E2 FA | 	rdword	local07, local06
244a0     0A 28 86 F1 | 	sub	local06, #10
244a4     15 2D 32 F9 | 	getword	local08, local07, #0
244a8     01 2C 86 F1 | 	sub	local08, #1
244ac     16 23 0A F5 | 	and	local03, local08 wz
244b0     18 4E 05 F1 | 	add	fp, #24
244b4     A7 22 62 FC | 	wrlong	local03, fp
244b8     30 4E 85 F1 | 	sub	fp, #48
244bc     E0 00 90 5D |  if_ne	jmp	#LR__3797
244c0     04 4E 05 F1 | 	add	fp, #4
244c4     A7 22 02 FB | 	rdlong	local03, fp
244c8     04 4E 85 F1 | 	sub	fp, #4
244cc     14 22 06 F1 | 	add	local03, #20
244d0     11 23 0A FB | 	rdlong	local03, local03 wz
244d4     20 00 90 5D |  if_ne	jmp	#LR__3793
244d8     04 4E 05 F1 | 	add	fp, #4
244dc     A7 22 02 FB | 	rdlong	local03, fp
244e0     08 22 06 F1 | 	add	local03, #8
244e4     11 23 02 FB | 	rdlong	local03, local03
244e8     18 4E 05 F1 | 	add	fp, #24
244ec     A7 22 62 FC | 	wrlong	local03, fp
244f0     1C 4E 85 F1 | 	sub	fp, #28
244f4     28 00 90 FD | 	jmp	#LR__3794
244f8                 | LR__3793
244f8     04 4E 05 F1 | 	add	fp, #4
244fc     A7 2C 02 FB | 	rdlong	local08, fp
24500     16 13 02 F6 | 	mov	arg01, local08
24504     04 4E 85 F1 | 	sub	fp, #4
24508     18 2C 06 F1 | 	add	local08, #24
2450c     16 15 02 FB | 	rdlong	arg02, local08
24510     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
24514     1C 4E 05 F1 | 	add	fp, #28
24518     A7 FA 61 FC | 	wrlong	result1, fp
2451c     1C 4E 85 F1 | 	sub	fp, #28
24520                 | LR__3794
24520     1C 4E 05 F1 | 	add	fp, #28
24524     A7 22 02 FB | 	rdlong	local03, fp
24528     1C 4E 85 F1 | 	sub	fp, #28
2452c     02 22 16 F2 | 	cmp	local03, #2 wc
24530     1C 00 90 3D |  if_ae	jmp	#LR__3795
24534     04 4E 05 F1 | 	add	fp, #4
24538     A7 22 02 FB | 	rdlong	local03, fp
2453c     04 4E 85 F1 | 	sub	fp, #4
24540     11 22 06 F1 | 	add	local03, #17
24544     11 05 48 FC | 	wrbyte	#2, local03
24548     02 FA 05 F6 | 	mov	result1, #2
2454c     74 04 90 FD | 	jmp	#LR__3810
24550                 | LR__3795
24550     1C 4E 05 F1 | 	add	fp, #28
24554     A7 22 02 FB | 	rdlong	local03, fp
24558     1C 4E 85 F1 | 	sub	fp, #28
2455c     FF FF 7F FF 
24560     FF 23 0E F2 | 	cmp	local03, ##-1 wz
24564     1C 00 90 5D |  if_ne	jmp	#LR__3796
24568     04 4E 05 F1 | 	add	fp, #4
2456c     A7 22 02 FB | 	rdlong	local03, fp
24570     04 4E 85 F1 | 	sub	fp, #4
24574     11 22 06 F1 | 	add	local03, #17
24578     11 03 48 FC | 	wrbyte	#1, local03
2457c     01 FA 05 F6 | 	mov	result1, #1
24580     40 04 90 FD | 	jmp	#LR__3810
24584                 | LR__3796
24584     04 4E 05 F1 | 	add	fp, #4
24588     A7 22 02 FB | 	rdlong	local03, fp
2458c     18 4E 05 F1 | 	add	fp, #24
24590     A7 2C 02 FB | 	rdlong	local08, fp
24594     1C 4E 85 F1 | 	sub	fp, #28
24598     18 22 06 F1 | 	add	local03, #24
2459c     11 2D 62 FC | 	wrlong	local08, local03
245a0                 | LR__3797
245a0     18 4E 05 F1 | 	add	fp, #24
245a4     A7 12 02 FB | 	rdlong	arg01, fp
245a8     14 4E 85 F1 | 	sub	fp, #20
245ac     A7 22 02 FB | 	rdlong	local03, fp
245b0     04 4E 85 F1 | 	sub	fp, #4
245b4     18 22 06 F1 | 	add	local03, #24
245b8     11 15 02 FB | 	rdlong	arg02, local03
245bc     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
245c0     20 4E 05 F1 | 	add	fp, #32
245c4     A7 FA 61 FC | 	wrlong	result1, fp
245c8     20 4E 85 F1 | 	sub	fp, #32
245cc     00 FA 0D F2 | 	cmp	result1, #0 wz
245d0     1C 00 90 5D |  if_ne	jmp	#LR__3798
245d4     04 4E 05 F1 | 	add	fp, #4
245d8     A7 22 02 FB | 	rdlong	local03, fp
245dc     04 4E 85 F1 | 	sub	fp, #4
245e0     11 22 06 F1 | 	add	local03, #17
245e4     11 05 48 FC | 	wrbyte	#2, local03
245e8     02 FA 05 F6 | 	mov	result1, #2
245ec     D4 03 90 FD | 	jmp	#LR__3810
245f0                 | LR__3798
245f0     20 4E 05 F1 | 	add	fp, #32
245f4     A7 22 02 FB | 	rdlong	local03, fp
245f8     10 4E 05 F1 | 	add	fp, #16
245fc     A7 2C 02 FB | 	rdlong	local08, fp
24600     16 23 02 F1 | 	add	local03, local08
24604     10 4E 85 F1 | 	sub	fp, #16
24608     A7 22 62 FC | 	wrlong	local03, fp
2460c     14 4E 85 F1 | 	sub	fp, #20
24610     A7 22 02 FB | 	rdlong	local03, fp
24614     09 22 46 F0 | 	shr	local03, #9
24618     20 4E 05 F1 | 	add	fp, #32
2461c     A7 22 62 FC | 	wrlong	local03, fp
24620     2C 4E 85 F1 | 	sub	fp, #44
24624     01 22 16 F2 | 	cmp	local03, #1 wc
24628     5C 01 90 CD |  if_b	jmp	#LR__3802
2462c     30 4E 05 F1 | 	add	fp, #48
24630     A7 22 02 FB | 	rdlong	local03, fp
24634     04 4E 85 F1 | 	sub	fp, #4
24638     A7 2C 02 FB | 	rdlong	local08, fp
2463c     16 23 02 F1 | 	add	local03, local08
24640     14 4E 85 F1 | 	sub	fp, #20
24644     A7 2C 02 FB | 	rdlong	local08, fp
24648     18 4E 85 F1 | 	sub	fp, #24
2464c     0A 2C 06 F1 | 	add	local08, #10
24650     16 2D E2 FA | 	rdword	local08, local08
24654     16 23 1A F2 | 	cmp	local03, local08 wcz
24658     28 00 90 ED |  if_be	jmp	#LR__3799
2465c     18 4E 05 F1 | 	add	fp, #24
24660     A7 1E 02 FB | 	rdlong	local01, fp
24664     0A 1E 06 F1 | 	add	local01, #10
24668     0F 23 E2 FA | 	rdword	local03, local01
2466c     18 4E 05 F1 | 	add	fp, #24
24670     A7 2C 02 FB | 	rdlong	local08, fp
24674     16 23 82 F1 | 	sub	local03, local08
24678     04 4E 85 F1 | 	sub	fp, #4
2467c     A7 22 62 FC | 	wrlong	local03, fp
24680     2C 4E 85 F1 | 	sub	fp, #44
24684                 | LR__3799
24684     18 4E 05 F1 | 	add	fp, #24
24688     A7 1E 02 FB | 	rdlong	local01, fp
2468c     01 1E 06 F1 | 	add	local01, #1
24690     0F 13 C2 FA | 	rdbyte	arg01, local01
24694     1C 4E 05 F1 | 	add	fp, #28
24698     A7 14 02 FB | 	rdlong	arg02, fp
2469c     14 4E 85 F1 | 	sub	fp, #20
246a0     A7 16 02 FB | 	rdlong	arg03, fp
246a4     0C 4E 05 F1 | 	add	fp, #12
246a8     A7 18 02 FB | 	rdlong	arg04, fp
246ac     2C 4E 85 F1 | 	sub	fp, #44
246b0     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
246b4     00 FA 0D F2 | 	cmp	result1, #0 wz
246b8     1C 00 90 AD |  if_e	jmp	#LR__3800
246bc     04 4E 05 F1 | 	add	fp, #4
246c0     A7 22 02 FB | 	rdlong	local03, fp
246c4     04 4E 85 F1 | 	sub	fp, #4
246c8     11 22 06 F1 | 	add	local03, #17
246cc     11 03 48 FC | 	wrbyte	#1, local03
246d0     01 FA 05 F6 | 	mov	result1, #1
246d4     EC 02 90 FD | 	jmp	#LR__3810
246d8                 | LR__3800
246d8     04 4E 05 F1 | 	add	fp, #4
246dc     A7 1E 02 FB | 	rdlong	local01, fp
246e0     04 4E 85 F1 | 	sub	fp, #4
246e4     10 1E 06 F1 | 	add	local01, #16
246e8     0F 23 C2 FA | 	rdbyte	local03, local01
246ec     80 22 CE F7 | 	test	local03, #128 wz
246f0     78 00 90 AD |  if_e	jmp	#LR__3801
246f4     04 4E 05 F1 | 	add	fp, #4
246f8     A7 2C 02 FB | 	rdlong	local08, fp
246fc     1C 2C 06 F1 | 	add	local08, #28
24700     16 2D 02 FB | 	rdlong	local08, local08
24704     1C 4E 05 F1 | 	add	fp, #28
24708     A7 2E 02 FB | 	rdlong	local09, fp
2470c     17 2D 82 F1 | 	sub	local08, local09
24710     0C 4E 05 F1 | 	add	fp, #12
24714     A7 30 02 FB | 	rdlong	local10, fp
24718     2C 4E 85 F1 | 	sub	fp, #44
2471c     18 33 02 F6 | 	mov	local11, local10
24720     19 2D 12 F2 | 	cmp	local08, local11 wc
24724     44 00 90 3D |  if_ae	jmp	#LR__3801
24728     34 4E 05 F1 | 	add	fp, #52
2472c     A7 12 02 FB | 	rdlong	arg01, fp
24730     30 4E 85 F1 | 	sub	fp, #48
24734     A7 14 02 FB | 	rdlong	arg02, fp
24738     0A 33 02 F6 | 	mov	local11, arg02
2473c     1C 32 06 F1 | 	add	local11, #28
24740     19 2F 02 FB | 	rdlong	local09, local11
24744     1C 4E 05 F1 | 	add	fp, #28
24748     A7 26 02 FB | 	rdlong	local05, fp
2474c     13 2F 82 F1 | 	sub	local09, local05
24750     09 2E 66 F0 | 	shl	local09, #9
24754     17 33 02 F6 | 	mov	local11, local09
24758     17 13 02 F1 | 	add	arg01, local09
2475c     20 4E 85 F1 | 	sub	fp, #32
24760     28 14 06 F1 | 	add	arg02, #40
24764     09 16 C6 F9 | 	decod	arg03, #9
24768     50 49 BF FD | 	call	#__system____builtin_memmove
2476c                 | LR__3801
2476c     2C 4E 05 F1 | 	add	fp, #44
24770     A7 22 02 FB | 	rdlong	local03, fp
24774     09 22 66 F0 | 	shl	local03, #9
24778     04 4E 85 F1 | 	sub	fp, #4
2477c     A7 22 62 FC | 	wrlong	local03, fp
24780     28 4E 85 F1 | 	sub	fp, #40
24784                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
24784                 | ' 				}
24784                 | ' 
24784                 | ' 
24784                 | ' 				rcnt =  ((UINT) 512 )  * cc;
24784                 | ' 				continue;
24784     B4 01 90 FD | 	jmp	#LR__3808
24788                 | LR__3802
24788     04 4E 05 F1 | 	add	fp, #4
2478c     A7 22 02 FB | 	rdlong	local03, fp
24790     1C 22 06 F1 | 	add	local03, #28
24794     11 23 02 FB | 	rdlong	local03, local03
24798     1C 4E 05 F1 | 	add	fp, #28
2479c     A7 1E 02 FB | 	rdlong	local01, fp
247a0     20 4E 85 F1 | 	sub	fp, #32
247a4     0F 23 0A F2 | 	cmp	local03, local01 wz
247a8     EC 00 90 AD |  if_e	jmp	#LR__3806
247ac     04 4E 05 F1 | 	add	fp, #4
247b0     A7 1E 02 FB | 	rdlong	local01, fp
247b4     04 4E 85 F1 | 	sub	fp, #4
247b8     10 1E 06 F1 | 	add	local01, #16
247bc     0F 23 C2 FA | 	rdbyte	local03, local01
247c0     80 22 CE F7 | 	test	local03, #128 wz
247c4     7C 00 90 AD |  if_e	jmp	#LR__3804
247c8     18 4E 05 F1 | 	add	fp, #24
247cc     A7 1E 02 FB | 	rdlong	local01, fp
247d0     01 1E 06 F1 | 	add	local01, #1
247d4     0F 13 C2 FA | 	rdbyte	arg01, local01
247d8     14 4E 85 F1 | 	sub	fp, #20
247dc     A7 22 02 FB | 	rdlong	local03, fp
247e0     11 15 02 F6 | 	mov	arg02, local03
247e4     28 14 06 F1 | 	add	arg02, #40
247e8     04 4E 85 F1 | 	sub	fp, #4
247ec     1C 22 06 F1 | 	add	local03, #28
247f0     11 17 02 FB | 	rdlong	arg03, local03
247f4     01 18 06 F6 | 	mov	arg04, #1
247f8     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
247fc     00 FA 0D F2 | 	cmp	result1, #0 wz
24800     1C 00 90 AD |  if_e	jmp	#LR__3803
24804     04 4E 05 F1 | 	add	fp, #4
24808     A7 22 02 FB | 	rdlong	local03, fp
2480c     04 4E 85 F1 | 	sub	fp, #4
24810     11 22 06 F1 | 	add	local03, #17
24814     11 03 48 FC | 	wrbyte	#1, local03
24818     01 FA 05 F6 | 	mov	result1, #1
2481c     A4 01 90 FD | 	jmp	#LR__3810
24820                 | LR__3803
24820     04 4E 05 F1 | 	add	fp, #4
24824     A7 32 02 FB | 	rdlong	local11, fp
24828     19 23 02 F6 | 	mov	local03, local11
2482c     04 4E 85 F1 | 	sub	fp, #4
24830     10 32 06 F1 | 	add	local11, #16
24834     19 33 C2 FA | 	rdbyte	local11, local11
24838     7F 32 06 F5 | 	and	local11, #127
2483c     10 22 06 F1 | 	add	local03, #16
24840     11 33 42 FC | 	wrbyte	local11, local03
24844                 | LR__3804
24844     18 4E 05 F1 | 	add	fp, #24
24848     A7 1E 02 FB | 	rdlong	local01, fp
2484c     01 1E 06 F1 | 	add	local01, #1
24850     0F 13 C2 FA | 	rdbyte	arg01, local01
24854     14 4E 85 F1 | 	sub	fp, #20
24858     A7 14 02 FB | 	rdlong	arg02, fp
2485c     28 14 06 F1 | 	add	arg02, #40
24860     1C 4E 05 F1 | 	add	fp, #28
24864     A7 16 02 FB | 	rdlong	arg03, fp
24868     20 4E 85 F1 | 	sub	fp, #32
2486c     01 18 06 F6 | 	mov	arg04, #1
24870     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
24874     00 FA 0D F2 | 	cmp	result1, #0 wz
24878     1C 00 90 AD |  if_e	jmp	#LR__3805
2487c     04 4E 05 F1 | 	add	fp, #4
24880     A7 22 02 FB | 	rdlong	local03, fp
24884     04 4E 85 F1 | 	sub	fp, #4
24888     11 22 06 F1 | 	add	local03, #17
2488c     11 03 48 FC | 	wrbyte	#1, local03
24890     01 FA 05 F6 | 	mov	result1, #1
24894     2C 01 90 FD | 	jmp	#LR__3810
24898                 | LR__3805
24898                 | LR__3806
24898     04 4E 05 F1 | 	add	fp, #4
2489c     A7 22 02 FB | 	rdlong	local03, fp
248a0     1C 4E 05 F1 | 	add	fp, #28
248a4     A7 32 02 FB | 	rdlong	local11, fp
248a8     20 4E 85 F1 | 	sub	fp, #32
248ac     1C 22 06 F1 | 	add	local03, #28
248b0     11 33 62 FC | 	wrlong	local11, local03
248b4                 | LR__3807
248b4     04 4E 05 F1 | 	add	fp, #4
248b8     A7 1E 02 FB | 	rdlong	local01, fp
248bc     14 1E 06 F1 | 	add	local01, #20
248c0     0F 33 02 FB | 	rdlong	local11, local01
248c4     FF 33 06 F5 | 	and	local11, #511
248c8     09 22 C6 F9 | 	decod	local03, #9
248cc     19 23 82 F1 | 	sub	local03, local11
248d0     24 4E 05 F1 | 	add	fp, #36
248d4     A7 22 62 FC | 	wrlong	local03, fp
248d8     1C 4E 85 F1 | 	sub	fp, #28
248dc     A7 32 02 FB | 	rdlong	local11, fp
248e0     0C 4E 85 F1 | 	sub	fp, #12
248e4     19 23 1A F2 | 	cmp	local03, local11 wcz
248e8     0C 4E 05 11 |  if_a	add	fp, #12
248ec     A7 22 02 1B |  if_a	rdlong	local03, fp
248f0     1C 4E 05 11 |  if_a	add	fp, #28
248f4     A7 22 62 1C |  if_a	wrlong	local03, fp
248f8     28 4E 85 11 |  if_a	sub	fp, #40
248fc     34 4E 05 F1 | 	add	fp, #52
24900     A7 12 02 FB | 	rdlong	arg01, fp
24904     30 4E 85 F1 | 	sub	fp, #48
24908     A7 28 02 FB | 	rdlong	local06, fp
2490c     14 15 02 F6 | 	mov	arg02, local06
24910     28 14 06 F1 | 	add	arg02, #40
24914     14 28 06 F1 | 	add	local06, #20
24918     14 33 02 FB | 	rdlong	local11, local06
2491c     19 2F 02 F6 | 	mov	local09, local11
24920     17 31 02 F6 | 	mov	local10, local09
24924     FF 31 06 F5 | 	and	local10, #511
24928     18 15 02 F1 | 	add	arg02, local10
2492c     24 4E 05 F1 | 	add	fp, #36
24930     A7 16 02 FB | 	rdlong	arg03, fp
24934     28 4E 85 F1 | 	sub	fp, #40
24938     80 47 BF FD | 	call	#__system____builtin_memmove
2493c                 | LR__3808
2493c     0C 4E 05 F1 | 	add	fp, #12
24940     A7 22 02 FB | 	rdlong	local03, fp
24944     1C 4E 05 F1 | 	add	fp, #28
24948     A7 2C 02 FB | 	rdlong	local08, fp
2494c     16 23 82 F1 | 	sub	local03, local08
24950     1C 4E 85 F1 | 	sub	fp, #28
24954     A7 22 62 FC | 	wrlong	local03, fp
24958     04 4E 05 F1 | 	add	fp, #4
2495c     A7 1E 02 FB | 	rdlong	local01, fp
24960     0F 2B 02 FB | 	rdlong	local07, local01
24964     18 4E 05 F1 | 	add	fp, #24
24968     A7 2C 02 FB | 	rdlong	local08, fp
2496c     16 2B 02 F1 | 	add	local07, local08
24970     0F 2B 62 FC | 	wrlong	local07, local01
24974     0C 4E 05 F1 | 	add	fp, #12
24978     A7 22 02 FB | 	rdlong	local03, fp
2497c     0C 4E 85 F1 | 	sub	fp, #12
24980     A7 34 02 FB | 	rdlong	local12, fp
24984     1A 23 02 F1 | 	add	local03, local12
24988     0C 4E 05 F1 | 	add	fp, #12
2498c     A7 22 62 FC | 	wrlong	local03, fp
24990     30 4E 85 F1 | 	sub	fp, #48
24994     A7 36 02 FB | 	rdlong	local13, fp
24998     1B 23 02 F6 | 	mov	local03, local13
2499c     14 36 06 F1 | 	add	local13, #20
249a0     1B 39 02 FB | 	rdlong	local14, local13
249a4     24 4E 05 F1 | 	add	fp, #36
249a8     A7 28 02 FB | 	rdlong	local06, fp
249ac     28 4E 85 F1 | 	sub	fp, #40
249b0     14 39 02 F1 | 	add	local14, local06
249b4     14 22 06 F1 | 	add	local03, #20
249b8     11 39 62 FC | 	wrlong	local14, local03
249bc     84 FA 9F FD | 	jmp	#LR__3792
249c0                 | LR__3809
249c0                 | ' 
249c0                 | ' 
249c0                 | ' 
249c0                 | ' 
249c0                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
249c0                 | ' 
249c0                 | ' 	}
249c0                 | ' 
249c0                 | ' 	return FR_OK ;
249c0     00 FA 05 F6 | 	mov	result1, #0
249c4                 | LR__3810
249c4     A7 F0 03 F6 | 	mov	ptra, fp
249c8     B2 00 A0 FD | 	call	#popregs_
249cc                 | _fatfs_cc_f_read_ret
249cc     2D 00 64 FD | 	ret
249d0                 | 
249d0                 | _fatfs_cc_f_write
249d0     15 4A 05 F6 | 	mov	COUNT_, #21
249d4     A8 00 A0 FD | 	call	#pushregs_
249d8     34 F0 07 F1 | 	add	ptra, #52
249dc     04 4E 05 F1 | 	add	fp, #4
249e0     A7 12 62 FC | 	wrlong	arg01, fp
249e4     04 4E 05 F1 | 	add	fp, #4
249e8     A7 14 62 FC | 	wrlong	arg02, fp
249ec     04 4E 05 F1 | 	add	fp, #4
249f0     A7 16 62 FC | 	wrlong	arg03, fp
249f4     04 4E 05 F1 | 	add	fp, #4
249f8     A7 18 62 FC | 	wrlong	arg04, fp
249fc     08 4E 85 F1 | 	sub	fp, #8
24a00     A7 FA 01 FB | 	rdlong	result1, fp
24a04     28 4E 05 F1 | 	add	fp, #40
24a08     A7 FA 61 FC | 	wrlong	result1, fp
24a0c     20 4E 85 F1 | 	sub	fp, #32
24a10     A7 FA 01 FB | 	rdlong	result1, fp
24a14     FD 00 68 FC | 	wrlong	#0, result1
24a18     0C 4E 85 F1 | 	sub	fp, #12
24a1c     A7 12 02 FB | 	rdlong	arg01, fp
24a20     14 4E 05 F1 | 	add	fp, #20
24a24     A7 14 02 F6 | 	mov	arg02, fp
24a28     18 4E 85 F1 | 	sub	fp, #24
24a2c     88 F0 BF FD | 	call	#_fatfs_cc_validate
24a30     14 4E 05 F1 | 	add	fp, #20
24a34     A7 FA 61 FC | 	wrlong	result1, fp
24a38     00 FA 4D F2 | 	cmps	result1, #0 wz
24a3c     14 4E 85 F1 | 	sub	fp, #20
24a40     20 00 90 5D |  if_ne	jmp	#LR__3820
24a44     04 4E 05 F1 | 	add	fp, #4
24a48     A7 14 02 FB | 	rdlong	arg02, fp
24a4c     11 14 06 F1 | 	add	arg02, #17
24a50     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
24a54     10 4E 05 F1 | 	add	fp, #16
24a58     A7 14 62 FC | 	wrlong	arg02, fp
24a5c     14 4E 85 F1 | 	sub	fp, #20
24a60     10 00 90 AD |  if_e	jmp	#LR__3821
24a64                 | LR__3820
24a64     14 4E 05 F1 | 	add	fp, #20
24a68     A7 FA 01 FB | 	rdlong	result1, fp
24a6c     14 4E 85 F1 | 	sub	fp, #20
24a70     44 07 90 FD | 	jmp	#LR__3843
24a74                 | LR__3821
24a74     04 4E 05 F1 | 	add	fp, #4
24a78     A7 14 02 FB | 	rdlong	arg02, fp
24a7c     04 4E 85 F1 | 	sub	fp, #4
24a80     10 14 06 F1 | 	add	arg02, #16
24a84     0A 15 C2 FA | 	rdbyte	arg02, arg02
24a88     02 14 CE F7 | 	test	arg02, #2 wz
24a8c     07 FA 05 A6 |  if_e	mov	result1, #7
24a90     24 07 90 AD |  if_e	jmp	#LR__3843
24a94     04 4E 05 F1 | 	add	fp, #4
24a98     A7 14 02 FB | 	rdlong	arg02, fp
24a9c     0A 13 02 F6 | 	mov	arg01, arg02
24aa0     14 12 06 F1 | 	add	arg01, #20
24aa4     09 13 02 FB | 	rdlong	arg01, arg01
24aa8     08 4E 05 F1 | 	add	fp, #8
24aac     A7 FA 01 FB | 	rdlong	result1, fp
24ab0     FD 12 02 F1 | 	add	arg01, result1
24ab4     0C 4E 85 F1 | 	sub	fp, #12
24ab8     14 14 06 F1 | 	add	arg02, #20
24abc     0A FB 01 FB | 	rdlong	result1, arg02
24ac0     FD 12 12 F2 | 	cmp	arg01, result1 wc
24ac4     24 00 90 3D |  if_ae	jmp	#LR__3822
24ac8     04 4E 05 F1 | 	add	fp, #4
24acc     A7 14 02 FB | 	rdlong	arg02, fp
24ad0     01 FA 65 F6 | 	neg	result1, #1
24ad4     14 14 06 F1 | 	add	arg02, #20
24ad8     0A 15 02 FB | 	rdlong	arg02, arg02
24adc     0A FB 81 F1 | 	sub	result1, arg02
24ae0     08 4E 05 F1 | 	add	fp, #8
24ae4     A7 FA 61 FC | 	wrlong	result1, fp
24ae8     0C 4E 85 F1 | 	sub	fp, #12
24aec                 | LR__3822
24aec                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
24aec                 | ' 	}
24aec                 | ' 
24aec                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
24aec                 | LR__3823
24aec     0C 4E 05 F1 | 	add	fp, #12
24af0     A7 FA 01 FB | 	rdlong	result1, fp
24af4     0C 4E 85 F1 | 	sub	fp, #12
24af8     01 FA 15 F2 | 	cmp	result1, #1 wc
24afc     90 06 90 CD |  if_b	jmp	#LR__3842
24b00     04 4E 05 F1 | 	add	fp, #4
24b04     A7 FA 01 FB | 	rdlong	result1, fp
24b08     04 4E 85 F1 | 	sub	fp, #4
24b0c     14 FA 05 F1 | 	add	result1, #20
24b10     FD FA 01 FB | 	rdlong	result1, result1
24b14     FF FB CD F7 | 	test	result1, #511 wz
24b18     D8 04 90 5D |  if_ne	jmp	#LR__3838
24b1c     04 4E 05 F1 | 	add	fp, #4
24b20     A7 FA 01 FB | 	rdlong	result1, fp
24b24     14 FA 05 F1 | 	add	result1, #20
24b28     FD FA 01 FB | 	rdlong	result1, result1
24b2c     09 FA 45 F0 | 	shr	result1, #9
24b30     14 4E 05 F1 | 	add	fp, #20
24b34     A7 14 02 FB | 	rdlong	arg02, fp
24b38     0A 14 06 F1 | 	add	arg02, #10
24b3c     0A 19 E2 FA | 	rdword	arg04, arg02
24b40     0C 15 32 F9 | 	getword	arg02, arg04, #0
24b44     01 14 86 F1 | 	sub	arg02, #1
24b48     0A FB 09 F5 | 	and	result1, arg02 wz
24b4c     14 4E 05 F1 | 	add	fp, #20
24b50     A7 FA 61 FC | 	wrlong	result1, fp
24b54     2C 4E 85 F1 | 	sub	fp, #44
24b58     44 01 90 5D |  if_ne	jmp	#LR__3829
24b5c     04 4E 05 F1 | 	add	fp, #4
24b60     A7 FA 01 FB | 	rdlong	result1, fp
24b64     04 4E 85 F1 | 	sub	fp, #4
24b68     14 FA 05 F1 | 	add	result1, #20
24b6c     FD 14 0A FB | 	rdlong	arg02, result1 wz
24b70     44 00 90 5D |  if_ne	jmp	#LR__3824
24b74     04 4E 05 F1 | 	add	fp, #4
24b78     A7 14 02 FB | 	rdlong	arg02, fp
24b7c     08 14 06 F1 | 	add	arg02, #8
24b80     0A 15 0A FB | 	rdlong	arg02, arg02 wz
24b84     18 4E 05 F1 | 	add	fp, #24
24b88     A7 14 62 FC | 	wrlong	arg02, fp
24b8c     1C 4E 85 F1 | 	sub	fp, #28
24b90     4C 00 90 5D |  if_ne	jmp	#LR__3825
24b94     04 4E 05 F1 | 	add	fp, #4
24b98     A7 12 02 FB | 	rdlong	arg01, fp
24b9c     04 4E 85 F1 | 	sub	fp, #4
24ba0     00 14 06 F6 | 	mov	arg02, #0
24ba4     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
24ba8     1C 4E 05 F1 | 	add	fp, #28
24bac     A7 FA 61 FC | 	wrlong	result1, fp
24bb0     1C 4E 85 F1 | 	sub	fp, #28
24bb4     28 00 90 FD | 	jmp	#LR__3825
24bb8                 | LR__3824
24bb8     04 4E 05 F1 | 	add	fp, #4
24bbc     A7 18 02 FB | 	rdlong	arg04, fp
24bc0     0C 13 02 F6 | 	mov	arg01, arg04
24bc4     04 4E 85 F1 | 	sub	fp, #4
24bc8     18 18 06 F1 | 	add	arg04, #24
24bcc     0C 15 02 FB | 	rdlong	arg02, arg04
24bd0     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
24bd4     1C 4E 05 F1 | 	add	fp, #28
24bd8     A7 FA 61 FC | 	wrlong	result1, fp
24bdc     1C 4E 85 F1 | 	sub	fp, #28
24be0                 | LR__3825
24be0     1C 4E 05 F1 | 	add	fp, #28
24be4     A7 FA 09 FB | 	rdlong	result1, fp wz
24be8     1C 4E 85 F1 | 	sub	fp, #28
24bec     A0 05 90 AD |  if_e	jmp	#LR__3842
24bf0     1C 4E 05 F1 | 	add	fp, #28
24bf4     A7 FA 01 FB | 	rdlong	result1, fp
24bf8     1C 4E 85 F1 | 	sub	fp, #28
24bfc     01 FA 0D F2 | 	cmp	result1, #1 wz
24c00     1C 00 90 5D |  if_ne	jmp	#LR__3826
24c04     04 4E 05 F1 | 	add	fp, #4
24c08     A7 FA 01 FB | 	rdlong	result1, fp
24c0c     04 4E 85 F1 | 	sub	fp, #4
24c10     11 FA 05 F1 | 	add	result1, #17
24c14     FD 04 48 FC | 	wrbyte	#2, result1
24c18     02 FA 05 F6 | 	mov	result1, #2
24c1c     98 05 90 FD | 	jmp	#LR__3843
24c20                 | LR__3826
24c20     1C 4E 05 F1 | 	add	fp, #28
24c24     A7 FA 01 FB | 	rdlong	result1, fp
24c28     1C 4E 85 F1 | 	sub	fp, #28
24c2c     FF FF 7F FF 
24c30     FF FB 0D F2 | 	cmp	result1, ##-1 wz
24c34     1C 00 90 5D |  if_ne	jmp	#LR__3827
24c38     04 4E 05 F1 | 	add	fp, #4
24c3c     A7 FA 01 FB | 	rdlong	result1, fp
24c40     04 4E 85 F1 | 	sub	fp, #4
24c44     11 FA 05 F1 | 	add	result1, #17
24c48     FD 02 48 FC | 	wrbyte	#1, result1
24c4c     01 FA 05 F6 | 	mov	result1, #1
24c50     64 05 90 FD | 	jmp	#LR__3843
24c54                 | LR__3827
24c54     04 4E 05 F1 | 	add	fp, #4
24c58     A7 FA 01 FB | 	rdlong	result1, fp
24c5c     18 4E 05 F1 | 	add	fp, #24
24c60     A7 18 02 FB | 	rdlong	arg04, fp
24c64     18 FA 05 F1 | 	add	result1, #24
24c68     FD 18 62 FC | 	wrlong	arg04, result1
24c6c     18 4E 85 F1 | 	sub	fp, #24
24c70     A7 FA 01 FB | 	rdlong	result1, fp
24c74     04 4E 85 F1 | 	sub	fp, #4
24c78     08 FA 05 F1 | 	add	result1, #8
24c7c     FD FA 09 FB | 	rdlong	result1, result1 wz
24c80     1C 00 90 5D |  if_ne	jmp	#LR__3828
24c84     04 4E 05 F1 | 	add	fp, #4
24c88     A7 18 02 FB | 	rdlong	arg04, fp
24c8c     18 4E 05 F1 | 	add	fp, #24
24c90     A7 FA 01 FB | 	rdlong	result1, fp
24c94     1C 4E 85 F1 | 	sub	fp, #28
24c98     08 18 06 F1 | 	add	arg04, #8
24c9c     0C FB 61 FC | 	wrlong	result1, arg04
24ca0                 | LR__3828
24ca0                 | LR__3829
24ca0     04 4E 05 F1 | 	add	fp, #4
24ca4     A7 18 02 FB | 	rdlong	arg04, fp
24ca8     04 4E 85 F1 | 	sub	fp, #4
24cac     10 18 06 F1 | 	add	arg04, #16
24cb0     0C 19 C2 FA | 	rdbyte	arg04, arg04
24cb4     80 18 CE F7 | 	test	arg04, #128 wz
24cb8     7C 00 90 AD |  if_e	jmp	#LR__3831
24cbc     18 4E 05 F1 | 	add	fp, #24
24cc0     A7 18 02 FB | 	rdlong	arg04, fp
24cc4     01 18 06 F1 | 	add	arg04, #1
24cc8     0C 13 C2 FA | 	rdbyte	arg01, arg04
24ccc     14 4E 85 F1 | 	sub	fp, #20
24cd0     A7 18 02 FB | 	rdlong	arg04, fp
24cd4     0C 15 02 F6 | 	mov	arg02, arg04
24cd8     28 14 06 F1 | 	add	arg02, #40
24cdc     04 4E 85 F1 | 	sub	fp, #4
24ce0     1C 18 06 F1 | 	add	arg04, #28
24ce4     0C 17 02 FB | 	rdlong	arg03, arg04
24ce8     01 18 06 F6 | 	mov	arg04, #1
24cec     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
24cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
24cf4     1C 00 90 AD |  if_e	jmp	#LR__3830
24cf8     04 4E 05 F1 | 	add	fp, #4
24cfc     A7 FA 01 FB | 	rdlong	result1, fp
24d00     04 4E 85 F1 | 	sub	fp, #4
24d04     11 FA 05 F1 | 	add	result1, #17
24d08     FD 02 48 FC | 	wrbyte	#1, result1
24d0c     01 FA 05 F6 | 	mov	result1, #1
24d10     A4 04 90 FD | 	jmp	#LR__3843
24d14                 | LR__3830
24d14     04 4E 05 F1 | 	add	fp, #4
24d18     A7 18 02 FB | 	rdlong	arg04, fp
24d1c     0C FB 01 F6 | 	mov	result1, arg04
24d20     04 4E 85 F1 | 	sub	fp, #4
24d24     10 18 06 F1 | 	add	arg04, #16
24d28     0C 19 C2 FA | 	rdbyte	arg04, arg04
24d2c     7F 18 06 F5 | 	and	arg04, #127
24d30     10 FA 05 F1 | 	add	result1, #16
24d34     FD 18 42 FC | 	wrbyte	arg04, result1
24d38                 | LR__3831
24d38     18 4E 05 F1 | 	add	fp, #24
24d3c     A7 12 02 FB | 	rdlong	arg01, fp
24d40     14 4E 85 F1 | 	sub	fp, #20
24d44     A7 14 02 FB | 	rdlong	arg02, fp
24d48     04 4E 85 F1 | 	sub	fp, #4
24d4c     18 14 06 F1 | 	add	arg02, #24
24d50     0A 15 02 FB | 	rdlong	arg02, arg02
24d54     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
24d58     20 4E 05 F1 | 	add	fp, #32
24d5c     A7 FA 61 FC | 	wrlong	result1, fp
24d60     20 4E 85 F1 | 	sub	fp, #32
24d64     00 FA 0D F2 | 	cmp	result1, #0 wz
24d68     1C 00 90 5D |  if_ne	jmp	#LR__3832
24d6c     04 4E 05 F1 | 	add	fp, #4
24d70     A7 FA 01 FB | 	rdlong	result1, fp
24d74     04 4E 85 F1 | 	sub	fp, #4
24d78     11 FA 05 F1 | 	add	result1, #17
24d7c     FD 04 48 FC | 	wrbyte	#2, result1
24d80     02 FA 05 F6 | 	mov	result1, #2
24d84     30 04 90 FD | 	jmp	#LR__3843
24d88                 | LR__3832
24d88     20 4E 05 F1 | 	add	fp, #32
24d8c     A7 FA 01 FB | 	rdlong	result1, fp
24d90     0C 4E 05 F1 | 	add	fp, #12
24d94     A7 1E 02 FB | 	rdlong	local01, fp
24d98     0F FB 01 F1 | 	add	result1, local01
24d9c     0C 4E 85 F1 | 	sub	fp, #12
24da0     A7 FA 61 FC | 	wrlong	result1, fp
24da4     14 4E 85 F1 | 	sub	fp, #20
24da8     A7 FA 01 FB | 	rdlong	result1, fp
24dac     09 FA 45 F0 | 	shr	result1, #9
24db0     1C 4E 05 F1 | 	add	fp, #28
24db4     A7 FA 61 FC | 	wrlong	result1, fp
24db8     28 4E 85 F1 | 	sub	fp, #40
24dbc     01 FA 15 F2 | 	cmp	result1, #1 wc
24dc0     60 01 90 CD |  if_b	jmp	#LR__3836
24dc4     2C 4E 05 F1 | 	add	fp, #44
24dc8     A7 FA 01 FB | 	rdlong	result1, fp
24dcc     04 4E 85 F1 | 	sub	fp, #4
24dd0     A7 18 02 FB | 	rdlong	arg04, fp
24dd4     0C FB 01 F1 | 	add	result1, arg04
24dd8     10 4E 85 F1 | 	sub	fp, #16
24ddc     A7 18 02 FB | 	rdlong	arg04, fp
24de0     18 4E 85 F1 | 	sub	fp, #24
24de4     0A 18 06 F1 | 	add	arg04, #10
24de8     0C 19 E2 FA | 	rdword	arg04, arg04
24dec     0C FB 19 F2 | 	cmp	result1, arg04 wcz
24df0     28 00 90 ED |  if_be	jmp	#LR__3833
24df4     18 4E 05 F1 | 	add	fp, #24
24df8     A7 FA 01 FB | 	rdlong	result1, fp
24dfc     0A FA 05 F1 | 	add	result1, #10
24e00     FD FA E1 FA | 	rdword	result1, result1
24e04     14 4E 05 F1 | 	add	fp, #20
24e08     A7 18 02 FB | 	rdlong	arg04, fp
24e0c     0C FB 81 F1 | 	sub	result1, arg04
24e10     04 4E 85 F1 | 	sub	fp, #4
24e14     A7 FA 61 FC | 	wrlong	result1, fp
24e18     28 4E 85 F1 | 	sub	fp, #40
24e1c                 | LR__3833
24e1c     18 4E 05 F1 | 	add	fp, #24
24e20     A7 18 02 FB | 	rdlong	arg04, fp
24e24     01 18 06 F1 | 	add	arg04, #1
24e28     0C 13 C2 FA | 	rdbyte	arg01, arg04
24e2c     18 4E 05 F1 | 	add	fp, #24
24e30     A7 14 02 FB | 	rdlong	arg02, fp
24e34     10 4E 85 F1 | 	sub	fp, #16
24e38     A7 16 02 FB | 	rdlong	arg03, fp
24e3c     08 4E 05 F1 | 	add	fp, #8
24e40     A7 18 02 FB | 	rdlong	arg04, fp
24e44     28 4E 85 F1 | 	sub	fp, #40
24e48     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
24e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
24e50     1C 00 90 AD |  if_e	jmp	#LR__3834
24e54     04 4E 05 F1 | 	add	fp, #4
24e58     A7 1E 02 FB | 	rdlong	local01, fp
24e5c     04 4E 85 F1 | 	sub	fp, #4
24e60     11 1E 06 F1 | 	add	local01, #17
24e64     0F 03 48 FC | 	wrbyte	#1, local01
24e68     01 FA 05 F6 | 	mov	result1, #1
24e6c     48 03 90 FD | 	jmp	#LR__3843
24e70                 | LR__3834
24e70     04 4E 05 F1 | 	add	fp, #4
24e74     A7 FA 01 FB | 	rdlong	result1, fp
24e78     1C FA 05 F1 | 	add	result1, #28
24e7c     FD FA 01 FB | 	rdlong	result1, result1
24e80     1C 4E 05 F1 | 	add	fp, #28
24e84     A7 20 02 FB | 	rdlong	local02, fp
24e88     10 FB 81 F1 | 	sub	result1, local02
24e8c     08 4E 05 F1 | 	add	fp, #8
24e90     A7 18 02 FB | 	rdlong	arg04, fp
24e94     28 4E 85 F1 | 	sub	fp, #40
24e98     0C FB 11 F2 | 	cmp	result1, arg04 wc
24e9c     68 00 90 3D |  if_ae	jmp	#LR__3835
24ea0     04 4E 05 F1 | 	add	fp, #4
24ea4     A7 12 02 FB | 	rdlong	arg01, fp
24ea8     28 12 06 F1 | 	add	arg01, #40
24eac     2C 4E 05 F1 | 	add	fp, #44
24eb0     A7 14 02 FB | 	rdlong	arg02, fp
24eb4     2C 4E 85 F1 | 	sub	fp, #44
24eb8     A7 FA 01 FB | 	rdlong	result1, fp
24ebc     1C FA 05 F1 | 	add	result1, #28
24ec0     FD 22 02 FB | 	rdlong	local03, result1
24ec4     1C 4E 05 F1 | 	add	fp, #28
24ec8     A7 18 02 FB | 	rdlong	arg04, fp
24ecc     20 4E 85 F1 | 	sub	fp, #32
24ed0     0C 23 82 F1 | 	sub	local03, arg04
24ed4     09 22 66 F0 | 	shl	local03, #9
24ed8     11 15 02 F1 | 	add	arg02, local03
24edc     09 16 C6 F9 | 	decod	arg03, #9
24ee0     D8 41 BF FD | 	call	#__system____builtin_memmove
24ee4     04 4E 05 F1 | 	add	fp, #4
24ee8     A7 18 02 FB | 	rdlong	arg04, fp
24eec     0C FB 01 F6 | 	mov	result1, arg04
24ef0     04 4E 85 F1 | 	sub	fp, #4
24ef4     10 18 06 F1 | 	add	arg04, #16
24ef8     0C 19 C2 FA | 	rdbyte	arg04, arg04
24efc     7F 18 06 F5 | 	and	arg04, #127
24f00     10 FA 05 F1 | 	add	result1, #16
24f04     FD 18 42 FC | 	wrbyte	arg04, result1
24f08                 | LR__3835
24f08     28 4E 05 F1 | 	add	fp, #40
24f0c     A7 FA 01 FB | 	rdlong	result1, fp
24f10     09 FA 65 F0 | 	shl	result1, #9
24f14     04 4E 85 F1 | 	sub	fp, #4
24f18     A7 FA 61 FC | 	wrlong	result1, fp
24f1c     24 4E 85 F1 | 	sub	fp, #36
24f20                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
24f20                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
24f20                 | ' 				}
24f20                 | ' 
24f20                 | ' 
24f20                 | ' 				wcnt =  ((UINT) 512 )  * cc;
24f20                 | ' 				continue;
24f20     74 01 90 FD | 	jmp	#LR__3839
24f24                 | LR__3836
24f24     04 4E 05 F1 | 	add	fp, #4
24f28     A7 20 02 FB | 	rdlong	local02, fp
24f2c     1C 20 06 F1 | 	add	local02, #28
24f30     10 FB 01 FB | 	rdlong	result1, local02
24f34     1C 4E 05 F1 | 	add	fp, #28
24f38     A7 20 02 FB | 	rdlong	local02, fp
24f3c     20 4E 85 F1 | 	sub	fp, #32
24f40     10 FB 09 F2 | 	cmp	result1, local02 wz
24f44     90 00 90 AD |  if_e	jmp	#LR__3837
24f48     04 4E 05 F1 | 	add	fp, #4
24f4c     A7 FA 01 FB | 	rdlong	result1, fp
24f50     FD 22 02 F6 | 	mov	local03, result1
24f54     04 4E 85 F1 | 	sub	fp, #4
24f58     14 22 06 F1 | 	add	local03, #20
24f5c     11 23 02 FB | 	rdlong	local03, local03
24f60     0C FA 05 F1 | 	add	result1, #12
24f64     FD 24 02 FB | 	rdlong	local04, result1
24f68     12 27 02 F6 | 	mov	local05, local04
24f6c     13 23 12 F2 | 	cmp	local03, local05 wc
24f70     64 00 90 3D |  if_ae	jmp	#LR__3837
24f74     18 4E 05 F1 | 	add	fp, #24
24f78     A7 18 02 FB | 	rdlong	arg04, fp
24f7c     01 18 06 F1 | 	add	arg04, #1
24f80     0C 13 C2 FA | 	rdbyte	arg01, arg04
24f84     14 4E 85 F1 | 	sub	fp, #20
24f88     A7 28 02 FB | 	rdlong	local06, fp
24f8c     28 28 06 F1 | 	add	local06, #40
24f90     14 2B 02 F6 | 	mov	local07, local06
24f94     1C 4E 05 F1 | 	add	fp, #28
24f98     A7 2C 02 FB | 	rdlong	local08, fp
24f9c     20 4E 85 F1 | 	sub	fp, #32
24fa0     01 2E 06 F6 | 	mov	local09, #1
24fa4     15 15 02 F6 | 	mov	arg02, local07
24fa8     16 17 02 F6 | 	mov	arg03, local08
24fac     01 18 06 F6 | 	mov	arg04, #1
24fb0     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
24fb4     FD 30 0A F6 | 	mov	local10, result1 wz
24fb8     1C 00 90 AD |  if_e	jmp	#LR__3837
24fbc     04 4E 05 F1 | 	add	fp, #4
24fc0     A7 30 02 FB | 	rdlong	local10, fp
24fc4     04 4E 85 F1 | 	sub	fp, #4
24fc8     11 30 06 F1 | 	add	local10, #17
24fcc     18 03 48 FC | 	wrbyte	#1, local10
24fd0                 | ' 				fp->fptr < fp->obj.objsize &&
24fd0                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
24fd0                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
24fd0     01 FA 05 F6 | 	mov	result1, #1
24fd4     E0 01 90 FD | 	jmp	#LR__3843
24fd8                 | LR__3837
24fd8     04 4E 05 F1 | 	add	fp, #4
24fdc     A7 18 02 FB | 	rdlong	arg04, fp
24fe0     1C 4E 05 F1 | 	add	fp, #28
24fe4     A7 FA 01 FB | 	rdlong	result1, fp
24fe8     20 4E 85 F1 | 	sub	fp, #32
24fec     1C 18 06 F1 | 	add	arg04, #28
24ff0     0C FB 61 FC | 	wrlong	result1, arg04
24ff4                 | LR__3838
24ff4     04 4E 05 F1 | 	add	fp, #4
24ff8     A7 FA 01 FB | 	rdlong	result1, fp
24ffc     14 FA 05 F1 | 	add	result1, #20
25000     FD FA 01 FB | 	rdlong	result1, result1
25004     FF FB 05 F5 | 	and	result1, #511
25008     09 32 C6 F9 | 	decod	local11, #9
2500c     FD 32 82 F1 | 	sub	local11, result1
25010     20 4E 05 F1 | 	add	fp, #32
25014     A7 32 62 FC | 	wrlong	local11, fp
25018     18 4E 85 F1 | 	sub	fp, #24
2501c     A7 FA 01 FB | 	rdlong	result1, fp
25020     0C 4E 85 F1 | 	sub	fp, #12
25024     FD 32 1A F2 | 	cmp	local11, result1 wcz
25028     0C 4E 05 11 |  if_a	add	fp, #12
2502c     A7 32 02 1B |  if_a	rdlong	local11, fp
25030     18 4E 05 11 |  if_a	add	fp, #24
25034     A7 32 62 1C |  if_a	wrlong	local11, fp
25038     24 4E 85 11 |  if_a	sub	fp, #36
2503c     04 4E 05 F1 | 	add	fp, #4
25040     A7 32 02 FB | 	rdlong	local11, fp
25044     19 13 02 F6 | 	mov	arg01, local11
25048     28 12 06 F1 | 	add	arg01, #40
2504c     14 32 06 F1 | 	add	local11, #20
25050     19 33 02 FB | 	rdlong	local11, local11
25054     FF 33 06 F5 | 	and	local11, #511
25058     19 13 02 F1 | 	add	arg01, local11
2505c     2C 4E 05 F1 | 	add	fp, #44
25060     A7 14 02 FB | 	rdlong	arg02, fp
25064     0C 4E 85 F1 | 	sub	fp, #12
25068     A7 16 02 FB | 	rdlong	arg03, fp
2506c     24 4E 85 F1 | 	sub	fp, #36
25070     48 40 BF FD | 	call	#__system____builtin_memmove
25074     04 4E 05 F1 | 	add	fp, #4
25078     A7 FA 01 FB | 	rdlong	result1, fp
2507c     FD 32 02 F6 | 	mov	local11, result1
25080     04 4E 85 F1 | 	sub	fp, #4
25084     10 FA 05 F1 | 	add	result1, #16
25088     FD FA C1 FA | 	rdbyte	result1, result1
2508c     80 FA 45 F5 | 	or	result1, #128
25090     10 32 06 F1 | 	add	local11, #16
25094     19 FB 41 FC | 	wrbyte	result1, local11
25098                 | LR__3839
25098     0C 4E 05 F1 | 	add	fp, #12
2509c     A7 32 02 FB | 	rdlong	local11, fp
250a0     18 4E 05 F1 | 	add	fp, #24
250a4     A7 FA 01 FB | 	rdlong	result1, fp
250a8     FD 32 82 F1 | 	sub	local11, result1
250ac     18 4E 85 F1 | 	sub	fp, #24
250b0     A7 32 62 FC | 	wrlong	local11, fp
250b4     04 4E 05 F1 | 	add	fp, #4
250b8     A7 34 02 FB | 	rdlong	local12, fp
250bc     1A 33 02 FB | 	rdlong	local11, local12
250c0     14 4E 05 F1 | 	add	fp, #20
250c4     A7 36 02 FB | 	rdlong	local13, fp
250c8     1B 33 02 F1 | 	add	local11, local13
250cc     1A 33 62 FC | 	wrlong	local11, local12
250d0     0C 4E 05 F1 | 	add	fp, #12
250d4     A7 32 02 FB | 	rdlong	local11, fp
250d8     0C 4E 85 F1 | 	sub	fp, #12
250dc     A7 38 02 FB | 	rdlong	local14, fp
250e0     1C 33 02 F1 | 	add	local11, local14
250e4     0C 4E 05 F1 | 	add	fp, #12
250e8     A7 32 62 FC | 	wrlong	local11, fp
250ec     2C 4E 85 F1 | 	sub	fp, #44
250f0     A7 3A 02 FB | 	rdlong	local15, fp
250f4     1D 33 02 F6 | 	mov	local11, local15
250f8     14 3A 06 F1 | 	add	local15, #20
250fc     1D 3B 02 FB | 	rdlong	local15, local15
25100     20 4E 05 F1 | 	add	fp, #32
25104     A7 3C 02 FB | 	rdlong	local16, fp
25108     1E 3B 02 F1 | 	add	local15, local16
2510c     14 32 06 F1 | 	add	local11, #20
25110     19 3B 62 FC | 	wrlong	local15, local11
25114     20 4E 85 F1 | 	sub	fp, #32
25118     A7 3E 02 FB | 	rdlong	local17, fp
2511c     1F 33 02 F6 | 	mov	local11, local17
25120     1F 41 02 F6 | 	mov	local18, local17
25124     04 4E 85 F1 | 	sub	fp, #4
25128     14 3E 06 F1 | 	add	local17, #20
2512c     1F 43 02 FB | 	rdlong	local19, local17
25130     0C 40 06 F1 | 	add	local18, #12
25134     20 45 02 FB | 	rdlong	local20, local18
25138     22 43 1A F2 | 	cmp	local19, local20 wcz
2513c     24 00 90 ED |  if_be	jmp	#LR__3840
25140     04 4E 05 F1 | 	add	fp, #4
25144     A7 26 02 FB | 	rdlong	local05, fp
25148     04 4E 85 F1 | 	sub	fp, #4
2514c     13 23 02 F6 | 	mov	local03, local05
25150     14 22 06 F1 | 	add	local03, #20
25154     11 25 02 FB | 	rdlong	local04, local03
25158     14 22 86 F1 | 	sub	local03, #20
2515c     12 47 02 F6 | 	mov	local21, local04
25160     20 00 90 FD | 	jmp	#LR__3841
25164                 | LR__3840
25164     04 4E 05 F1 | 	add	fp, #4
25168     A7 2A 02 FB | 	rdlong	local07, fp
2516c     04 4E 85 F1 | 	sub	fp, #4
25170     15 31 02 F6 | 	mov	local10, local07
25174     0C 30 06 F1 | 	add	local10, #12
25178     18 2D 02 FB | 	rdlong	local08, local10
2517c     0C 30 86 F1 | 	sub	local10, #12
25180     16 47 02 F6 | 	mov	local21, local08
25184                 | LR__3841
25184     0C 32 06 F1 | 	add	local11, #12
25188     19 47 62 FC | 	wrlong	local21, local11
2518c     5C F9 9F FD | 	jmp	#LR__3823
25190                 | LR__3842
25190     04 4E 05 F1 | 	add	fp, #4
25194     A7 34 02 FB | 	rdlong	local12, fp
25198     1A 1F 02 F6 | 	mov	local01, local12
2519c     04 4E 85 F1 | 	sub	fp, #4
251a0     10 34 06 F1 | 	add	local12, #16
251a4     1A 33 C2 FA | 	rdbyte	local11, local12
251a8     40 32 46 F5 | 	or	local11, #64
251ac     10 1E 06 F1 | 	add	local01, #16
251b0     0F 33 42 FC | 	wrbyte	local11, local01
251b4                 | ' 
251b4                 | ' 
251b4                 | ' 
251b4                 | ' 
251b4                 | ' 
251b4                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
251b4                 | ' 		fp->flag |=  0x80 ;
251b4                 | ' 
251b4                 | ' 	}
251b4                 | ' 
251b4                 | ' 	fp->flag |=  0x40 ;
251b4                 | ' 
251b4                 | ' 	return FR_OK ;
251b4     00 FA 05 F6 | 	mov	result1, #0
251b8                 | LR__3843
251b8     A7 F0 03 F6 | 	mov	ptra, fp
251bc     B2 00 A0 FD | 	call	#popregs_
251c0                 | _fatfs_cc_f_write_ret
251c0     2D 00 64 FD | 	ret
251c4                 | 
251c4                 | _fatfs_cc_f_sync
251c4     00 4A 05 F6 | 	mov	COUNT_, #0
251c8     A8 00 A0 FD | 	call	#pushregs_
251cc     18 F0 07 F1 | 	add	ptra, #24
251d0     04 4E 05 F1 | 	add	fp, #4
251d4     A7 12 62 FC | 	wrlong	arg01, fp
251d8     08 4E 05 F1 | 	add	fp, #8
251dc     A7 14 02 F6 | 	mov	arg02, fp
251e0     0C 4E 85 F1 | 	sub	fp, #12
251e4     D0 E8 BF FD | 	call	#_fatfs_cc_validate
251e8     08 4E 05 F1 | 	add	fp, #8
251ec     A7 FA 61 FC | 	wrlong	result1, fp
251f0     08 4E 85 F1 | 	sub	fp, #8
251f4     00 FA 0D F2 | 	cmp	result1, #0 wz
251f8     C0 01 90 5D |  if_ne	jmp	#LR__3853
251fc     04 4E 05 F1 | 	add	fp, #4
25200     A7 18 02 FB | 	rdlong	arg04, fp
25204     04 4E 85 F1 | 	sub	fp, #4
25208     10 18 06 F1 | 	add	arg04, #16
2520c     0C 19 C2 FA | 	rdbyte	arg04, arg04
25210     40 18 CE F7 | 	test	arg04, #64 wz
25214     A4 01 90 AD |  if_e	jmp	#LR__3852
25218     04 4E 05 F1 | 	add	fp, #4
2521c     A7 18 02 FB | 	rdlong	arg04, fp
25220     04 4E 85 F1 | 	sub	fp, #4
25224     10 18 06 F1 | 	add	arg04, #16
25228     0C 19 C2 FA | 	rdbyte	arg04, arg04
2522c     80 18 CE F7 | 	test	arg04, #128 wz
25230     64 00 90 AD |  if_e	jmp	#LR__3850
25234     0C 4E 05 F1 | 	add	fp, #12
25238     A7 18 02 FB | 	rdlong	arg04, fp
2523c     01 18 06 F1 | 	add	arg04, #1
25240     0C 13 C2 FA | 	rdbyte	arg01, arg04
25244     08 4E 85 F1 | 	sub	fp, #8
25248     A7 18 02 FB | 	rdlong	arg04, fp
2524c     0C 15 02 F6 | 	mov	arg02, arg04
25250     28 14 06 F1 | 	add	arg02, #40
25254     04 4E 85 F1 | 	sub	fp, #4
25258     1C 18 06 F1 | 	add	arg04, #28
2525c     0C 17 02 FB | 	rdlong	arg03, arg04
25260     01 18 06 F6 | 	mov	arg04, #1
25264     0C AE BF FD | 	call	#_fatfs_cc_disk_write
25268     00 FA 0D F2 | 	cmp	result1, #0 wz
2526c     01 FA 05 56 |  if_ne	mov	result1, #1
25270     54 01 90 5D |  if_ne	jmp	#LR__3854
25274     04 4E 05 F1 | 	add	fp, #4
25278     A7 18 02 FB | 	rdlong	arg04, fp
2527c     0C 17 02 F6 | 	mov	arg03, arg04
25280     04 4E 85 F1 | 	sub	fp, #4
25284     10 18 06 F1 | 	add	arg04, #16
25288     0C 19 C2 FA | 	rdbyte	arg04, arg04
2528c     7F 18 06 F5 | 	and	arg04, #127
25290     10 16 06 F1 | 	add	arg03, #16
25294     0B 19 42 FC | 	wrbyte	arg04, arg03
25298                 | LR__3850
25298     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2529c     10 4E 05 F1 | 	add	fp, #16
252a0     A7 FA 61 FC | 	wrlong	result1, fp
252a4     04 4E 85 F1 | 	sub	fp, #4
252a8     A7 12 02 FB | 	rdlong	arg01, fp
252ac     08 4E 85 F1 | 	sub	fp, #8
252b0     A7 18 02 FB | 	rdlong	arg04, fp
252b4     04 4E 85 F1 | 	sub	fp, #4
252b8     20 18 06 F1 | 	add	arg04, #32
252bc     0C 15 02 FB | 	rdlong	arg02, arg04
252c0     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
252c4     08 4E 05 F1 | 	add	fp, #8
252c8     A7 FA 61 FC | 	wrlong	result1, fp
252cc     08 4E 85 F1 | 	sub	fp, #8
252d0     00 FA 0D F2 | 	cmp	result1, #0 wz
252d4     E4 00 90 5D |  if_ne	jmp	#LR__3851
252d8     04 4E 05 F1 | 	add	fp, #4
252dc     A7 18 02 FB | 	rdlong	arg04, fp
252e0     24 18 06 F1 | 	add	arg04, #36
252e4     0C 19 02 FB | 	rdlong	arg04, arg04
252e8     10 4E 05 F1 | 	add	fp, #16
252ec     A7 18 62 FC | 	wrlong	arg04, fp
252f0     0C 17 02 F6 | 	mov	arg03, arg04
252f4     0B 16 06 F1 | 	add	arg03, #11
252f8     0B 17 C2 FA | 	rdbyte	arg03, arg03
252fc     20 16 46 F5 | 	or	arg03, #32
25300     0B 18 06 F1 | 	add	arg04, #11
25304     0C 17 42 FC | 	wrbyte	arg03, arg04
25308     10 4E 85 F1 | 	sub	fp, #16
2530c     A7 18 02 FB | 	rdlong	arg04, fp
25310     0C 13 02 FB | 	rdlong	arg01, arg04
25314     10 4E 05 F1 | 	add	fp, #16
25318     A7 14 02 FB | 	rdlong	arg02, fp
2531c     14 4E 85 F1 | 	sub	fp, #20
25320     08 18 06 F1 | 	add	arg04, #8
25324     0C 17 02 FB | 	rdlong	arg03, arg04
25328     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2532c     14 4E 05 F1 | 	add	fp, #20
25330     A7 12 02 FB | 	rdlong	arg01, fp
25334     1C 12 06 F1 | 	add	arg01, #28
25338     10 4E 85 F1 | 	sub	fp, #16
2533c     A7 18 02 FB | 	rdlong	arg04, fp
25340     0C 18 06 F1 | 	add	arg04, #12
25344     0C 15 02 FB | 	rdlong	arg02, arg04
25348     09 15 62 FC | 	wrlong	arg02, arg01
2534c     10 4E 05 F1 | 	add	fp, #16
25350     A7 12 02 FB | 	rdlong	arg01, fp
25354     16 12 06 F1 | 	add	arg01, #22
25358     04 4E 85 F1 | 	sub	fp, #4
2535c     A7 14 02 FB | 	rdlong	arg02, fp
25360     09 15 62 FC | 	wrlong	arg02, arg01
25364     04 4E 05 F1 | 	add	fp, #4
25368     A7 12 02 FB | 	rdlong	arg01, fp
2536c     12 12 06 F1 | 	add	arg01, #18
25370     09 01 58 FC | 	wrword	#0, arg01
25374     08 4E 85 F1 | 	sub	fp, #8
25378     A7 18 02 FB | 	rdlong	arg04, fp
2537c     03 18 06 F1 | 	add	arg04, #3
25380     0C 03 48 FC | 	wrbyte	#1, arg04
25384     A7 12 02 FB | 	rdlong	arg01, fp
25388     0C 4E 85 F1 | 	sub	fp, #12
2538c     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
25390     08 4E 05 F1 | 	add	fp, #8
25394     A7 FA 61 FC | 	wrlong	result1, fp
25398     04 4E 85 F1 | 	sub	fp, #4
2539c     A7 18 02 FB | 	rdlong	arg04, fp
253a0     0C 17 02 F6 | 	mov	arg03, arg04
253a4     04 4E 85 F1 | 	sub	fp, #4
253a8     10 18 06 F1 | 	add	arg04, #16
253ac     0C 19 C2 FA | 	rdbyte	arg04, arg04
253b0     BF 18 06 F5 | 	and	arg04, #191
253b4     10 16 06 F1 | 	add	arg03, #16
253b8     0B 19 42 FC | 	wrbyte	arg04, arg03
253bc                 | LR__3851
253bc                 | LR__3852
253bc                 | LR__3853
253bc                 | ' 					dir = fp->dir_ptr;
253bc                 | ' 					dir[ 11 ] |=  0x20 ;
253bc                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
253bc                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
253bc                 | ' 					st_dword(dir +  22 , tm);
253bc                 | ' 					st_word(dir +  18 , 0);
253bc                 | ' 					fs->wflag = 1;
253bc                 | ' 					res = sync_fs(fs);
253bc                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
253bc                 | ' 				}
253bc                 | ' 			}
253bc                 | ' 		}
253bc                 | ' 	}
253bc                 | ' 
253bc                 | ' 	return res ;
253bc     08 4E 05 F1 | 	add	fp, #8
253c0     A7 FA 01 FB | 	rdlong	result1, fp
253c4     08 4E 85 F1 | 	sub	fp, #8
253c8                 | LR__3854
253c8     A7 F0 03 F6 | 	mov	ptra, fp
253cc     B2 00 A0 FD | 	call	#popregs_
253d0                 | _fatfs_cc_f_sync_ret
253d0     2D 00 64 FD | 	ret
253d4                 | 
253d4                 | _fatfs_cc_f_close
253d4     01 4A 05 F6 | 	mov	COUNT_, #1
253d8     A8 00 A0 FD | 	call	#pushregs_
253dc     10 F0 07 F1 | 	add	ptra, #16
253e0     04 4E 05 F1 | 	add	fp, #4
253e4     A7 12 62 FC | 	wrlong	arg01, fp
253e8     04 4E 85 F1 | 	sub	fp, #4
253ec     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
253f0     08 4E 05 F1 | 	add	fp, #8
253f4     A7 FA 61 FC | 	wrlong	result1, fp
253f8     08 4E 85 F1 | 	sub	fp, #8
253fc     00 FA 0D F2 | 	cmp	result1, #0 wz
25400     38 00 90 5D |  if_ne	jmp	#LR__3860
25404     04 4E 05 F1 | 	add	fp, #4
25408     A7 12 02 FB | 	rdlong	arg01, fp
2540c     08 4E 05 F1 | 	add	fp, #8
25410     A7 14 02 F6 | 	mov	arg02, fp
25414     0C 4E 85 F1 | 	sub	fp, #12
25418     9C E6 BF FD | 	call	#_fatfs_cc_validate
2541c     08 4E 05 F1 | 	add	fp, #8
25420     A7 FA 61 FC | 	wrlong	result1, fp
25424     08 4E 85 F1 | 	sub	fp, #8
25428     00 FA 0D F2 | 	cmp	result1, #0 wz
2542c     04 4E 05 A1 |  if_e	add	fp, #4
25430     A7 1E 02 AB |  if_e	rdlong	local01, fp
25434     04 4E 85 A1 |  if_e	sub	fp, #4
25438     0F 01 68 AC |  if_e	wrlong	#0, local01
2543c                 | LR__3860
2543c                 | ' 
2543c                 | ' 
2543c                 | ' 
2543c                 | ' 
2543c                 | ' 			fp->obj.fs = 0;
2543c                 | ' #line 4192 "ff.c"
2543c                 | ' 		}
2543c                 | ' 	}
2543c                 | ' 	return res;
2543c     08 4E 05 F1 | 	add	fp, #8
25440     A7 FA 01 FB | 	rdlong	result1, fp
25444     08 4E 85 F1 | 	sub	fp, #8
25448     A7 F0 03 F6 | 	mov	ptra, fp
2544c     B2 00 A0 FD | 	call	#popregs_
25450                 | _fatfs_cc_f_close_ret
25450     2D 00 64 FD | 	ret
25454                 | 
25454                 | _fatfs_cc_f_lseek
25454     00 4A 05 F6 | 	mov	COUNT_, #0
25458     A8 00 A0 FD | 	call	#pushregs_
2545c     24 F0 07 F1 | 	add	ptra, #36
25460     04 4E 05 F1 | 	add	fp, #4
25464     A7 12 62 FC | 	wrlong	arg01, fp
25468     04 4E 05 F1 | 	add	fp, #4
2546c     A7 14 62 FC | 	wrlong	arg02, fp
25470     04 4E 85 F1 | 	sub	fp, #4
25474     A7 12 02 FB | 	rdlong	arg01, fp
25478     0C 4E 05 F1 | 	add	fp, #12
2547c     A7 14 02 F6 | 	mov	arg02, fp
25480     10 4E 85 F1 | 	sub	fp, #16
25484     30 E6 BF FD | 	call	#_fatfs_cc_validate
25488     0C 4E 05 F1 | 	add	fp, #12
2548c     A7 FA 61 FC | 	wrlong	result1, fp
25490     0C 4E 85 F1 | 	sub	fp, #12
25494     00 FA 0D F2 | 	cmp	result1, #0 wz
25498     1C 00 90 5D |  if_ne	jmp	#LR__3870
2549c     04 4E 05 F1 | 	add	fp, #4
254a0     A7 18 02 FB | 	rdlong	arg04, fp
254a4     11 18 06 F1 | 	add	arg04, #17
254a8     0C 19 C2 FA | 	rdbyte	arg04, arg04
254ac     08 4E 05 F1 | 	add	fp, #8
254b0     A7 18 62 FC | 	wrlong	arg04, fp
254b4     0C 4E 85 F1 | 	sub	fp, #12
254b8                 | LR__3870
254b8     0C 4E 05 F1 | 	add	fp, #12
254bc     A7 18 0A FB | 	rdlong	arg04, fp wz
254c0     0C 4E 85 F1 | 	sub	fp, #12
254c4     0C 4E 05 51 |  if_ne	add	fp, #12
254c8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
254cc     0C 4E 85 51 |  if_ne	sub	fp, #12
254d0     40 06 90 5D |  if_ne	jmp	#LR__3893
254d4     04 4E 05 F1 | 	add	fp, #4
254d8     A7 18 02 FB | 	rdlong	arg04, fp
254dc     04 4E 05 F1 | 	add	fp, #4
254e0     A7 16 02 FB | 	rdlong	arg03, fp
254e4     08 4E 85 F1 | 	sub	fp, #8
254e8     0C 18 06 F1 | 	add	arg04, #12
254ec     0C 19 02 FB | 	rdlong	arg04, arg04
254f0     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
254f4     3C 00 90 ED |  if_be	jmp	#LR__3871
254f8     04 4E 05 F1 | 	add	fp, #4
254fc     A7 16 02 FB | 	rdlong	arg03, fp
25500     04 4E 85 F1 | 	sub	fp, #4
25504     10 16 06 F1 | 	add	arg03, #16
25508     0B 17 C2 FA | 	rdbyte	arg03, arg03
2550c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
25510     02 16 CE F7 | 	test	arg03, #2 wz
25514     1C 00 90 5D |  if_ne	jmp	#LR__3871
25518     04 4E 05 F1 | 	add	fp, #4
2551c     A7 16 02 FB | 	rdlong	arg03, fp
25520     0C 16 06 F1 | 	add	arg03, #12
25524     0B 17 02 FB | 	rdlong	arg03, arg03
25528     04 4E 05 F1 | 	add	fp, #4
2552c     A7 16 62 FC | 	wrlong	arg03, fp
25530     08 4E 85 F1 | 	sub	fp, #8
25534                 | LR__3871
25534     04 4E 05 F1 | 	add	fp, #4
25538     A7 16 02 FB | 	rdlong	arg03, fp
2553c     14 16 06 F1 | 	add	arg03, #20
25540     0B 17 02 FB | 	rdlong	arg03, arg03
25544     1C 4E 05 F1 | 	add	fp, #28
25548     A7 16 62 FC | 	wrlong	arg03, fp
2554c     1C 4E 85 F1 | 	sub	fp, #28
25550     A7 16 02 FB | 	rdlong	arg03, fp
25554     18 4E 05 F1 | 	add	fp, #24
25558     A7 00 68 FC | 	wrlong	#0, fp
2555c     14 16 06 F1 | 	add	arg03, #20
25560     0B 01 68 FC | 	wrlong	#0, arg03
25564     14 4E 85 F1 | 	sub	fp, #20
25568     A7 16 02 FB | 	rdlong	arg03, fp
2556c     08 4E 85 F1 | 	sub	fp, #8
25570     01 16 16 F2 | 	cmp	arg03, #1 wc
25574     E4 03 90 CD |  if_b	jmp	#LR__3887
25578     10 4E 05 F1 | 	add	fp, #16
2557c     A7 16 02 FB | 	rdlong	arg03, fp
25580     0A 16 06 F1 | 	add	arg03, #10
25584     0B 19 E2 FA | 	rdword	arg04, arg03
25588     09 18 66 F0 | 	shl	arg04, #9
2558c     08 4E 05 F1 | 	add	fp, #8
25590     A7 18 62 FC | 	wrlong	arg04, fp
25594     08 4E 05 F1 | 	add	fp, #8
25598     A7 18 02 FB | 	rdlong	arg04, fp
2559c     20 4E 85 F1 | 	sub	fp, #32
255a0     01 18 16 F2 | 	cmp	arg04, #1 wc
255a4     AC 00 90 CD |  if_b	jmp	#LR__3872
255a8     08 4E 05 F1 | 	add	fp, #8
255ac     A7 18 02 FB | 	rdlong	arg04, fp
255b0     01 18 86 F1 | 	sub	arg04, #1
255b4     10 4E 05 F1 | 	add	fp, #16
255b8     A7 16 02 FB | 	rdlong	arg03, fp
255bc     0B 19 12 FD | 	qdiv	arg04, arg03
255c0     08 4E 05 F1 | 	add	fp, #8
255c4     A7 FA 01 FB | 	rdlong	result1, fp
255c8     01 FA 85 F1 | 	sub	result1, #1
255cc     18 18 62 FD | 	getqx	arg04
255d0     0B FB 11 FD | 	qdiv	result1, arg03
255d4     20 4E 85 F1 | 	sub	fp, #32
255d8     18 16 62 FD | 	getqx	arg03
255dc     0B 19 12 F2 | 	cmp	arg04, arg03 wc
255e0     70 00 90 CD |  if_b	jmp	#LR__3872
255e4     04 4E 05 F1 | 	add	fp, #4
255e8     A7 16 02 FB | 	rdlong	arg03, fp
255ec     1C 4E 05 F1 | 	add	fp, #28
255f0     A7 FA 01 FB | 	rdlong	result1, fp
255f4     01 FA 85 F1 | 	sub	result1, #1
255f8     08 4E 85 F1 | 	sub	fp, #8
255fc     A7 18 02 FB | 	rdlong	arg04, fp
25600     01 18 86 F1 | 	sub	arg04, #1
25604     0C FB 21 F5 | 	andn	result1, arg04
25608     14 16 06 F1 | 	add	arg03, #20
2560c     0B FB 61 FC | 	wrlong	result1, arg03
25610     10 4E 85 F1 | 	sub	fp, #16
25614     A7 16 02 FB | 	rdlong	arg03, fp
25618     04 4E 85 F1 | 	sub	fp, #4
2561c     A7 18 02 FB | 	rdlong	arg04, fp
25620     14 18 06 F1 | 	add	arg04, #20
25624     0C 19 02 FB | 	rdlong	arg04, arg04
25628     0C 17 82 F1 | 	sub	arg03, arg04
2562c     04 4E 05 F1 | 	add	fp, #4
25630     A7 16 62 FC | 	wrlong	arg03, fp
25634     04 4E 85 F1 | 	sub	fp, #4
25638     A7 16 02 FB | 	rdlong	arg03, fp
2563c     18 16 06 F1 | 	add	arg03, #24
25640     0B 17 02 FB | 	rdlong	arg03, arg03
25644     10 4E 05 F1 | 	add	fp, #16
25648     A7 16 62 FC | 	wrlong	arg03, fp
2564c     14 4E 85 F1 | 	sub	fp, #20
25650     D0 00 90 FD | 	jmp	#LR__3876
25654                 | LR__3872
25654     04 4E 05 F1 | 	add	fp, #4
25658     A7 16 02 FB | 	rdlong	arg03, fp
2565c     08 16 06 F1 | 	add	arg03, #8
25660     0B 17 0A FB | 	rdlong	arg03, arg03 wz
25664     10 4E 05 F1 | 	add	fp, #16
25668     A7 16 62 FC | 	wrlong	arg03, fp
2566c     14 4E 85 F1 | 	sub	fp, #20
25670     94 00 90 5D |  if_ne	jmp	#LR__3875
25674     04 4E 05 F1 | 	add	fp, #4
25678     A7 12 02 FB | 	rdlong	arg01, fp
2567c     04 4E 85 F1 | 	sub	fp, #4
25680     00 14 06 F6 | 	mov	arg02, #0
25684     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
25688     14 4E 05 F1 | 	add	fp, #20
2568c     A7 FA 61 FC | 	wrlong	result1, fp
25690     14 4E 85 F1 | 	sub	fp, #20
25694     01 FA 0D F2 | 	cmp	result1, #1 wz
25698     1C 00 90 5D |  if_ne	jmp	#LR__3873
2569c     04 4E 05 F1 | 	add	fp, #4
256a0     A7 16 02 FB | 	rdlong	arg03, fp
256a4     04 4E 85 F1 | 	sub	fp, #4
256a8     11 16 06 F1 | 	add	arg03, #17
256ac     0B 05 48 FC | 	wrbyte	#2, arg03
256b0     02 FA 05 F6 | 	mov	result1, #2
256b4     5C 04 90 FD | 	jmp	#LR__3893
256b8                 | LR__3873
256b8     14 4E 05 F1 | 	add	fp, #20
256bc     A7 FA 01 FB | 	rdlong	result1, fp
256c0     14 4E 85 F1 | 	sub	fp, #20
256c4     FF FF 7F FF 
256c8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
256cc     1C 00 90 5D |  if_ne	jmp	#LR__3874
256d0     04 4E 05 F1 | 	add	fp, #4
256d4     A7 16 02 FB | 	rdlong	arg03, fp
256d8     04 4E 85 F1 | 	sub	fp, #4
256dc     11 16 06 F1 | 	add	arg03, #17
256e0     0B 03 48 FC | 	wrbyte	#1, arg03
256e4     01 FA 05 F6 | 	mov	result1, #1
256e8     28 04 90 FD | 	jmp	#LR__3893
256ec                 | LR__3874
256ec     04 4E 05 F1 | 	add	fp, #4
256f0     A7 16 02 FB | 	rdlong	arg03, fp
256f4     10 4E 05 F1 | 	add	fp, #16
256f8     A7 18 02 FB | 	rdlong	arg04, fp
256fc     14 4E 85 F1 | 	sub	fp, #20
25700     08 16 06 F1 | 	add	arg03, #8
25704     0B 19 62 FC | 	wrlong	arg04, arg03
25708                 | LR__3875
25708     04 4E 05 F1 | 	add	fp, #4
2570c     A7 16 02 FB | 	rdlong	arg03, fp
25710     10 4E 05 F1 | 	add	fp, #16
25714     A7 18 02 FB | 	rdlong	arg04, fp
25718     14 4E 85 F1 | 	sub	fp, #20
2571c     18 16 06 F1 | 	add	arg03, #24
25720     0B 19 62 FC | 	wrlong	arg04, arg03
25724                 | LR__3876
25724     14 4E 05 F1 | 	add	fp, #20
25728     A7 16 0A FB | 	rdlong	arg03, fp wz
2572c     14 4E 85 F1 | 	sub	fp, #20
25730     28 02 90 AD |  if_e	jmp	#LR__3886
25734                 | ' 				while (ofs > bcs) {
25734                 | LR__3877
25734     08 4E 05 F1 | 	add	fp, #8
25738     A7 18 02 FB | 	rdlong	arg04, fp
2573c     10 4E 05 F1 | 	add	fp, #16
25740     A7 16 02 FB | 	rdlong	arg03, fp
25744     18 4E 85 F1 | 	sub	fp, #24
25748     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2574c     68 01 90 ED |  if_be	jmp	#LR__3883
25750     08 4E 05 F1 | 	add	fp, #8
25754     A7 18 02 FB | 	rdlong	arg04, fp
25758     10 4E 05 F1 | 	add	fp, #16
2575c     A7 16 02 FB | 	rdlong	arg03, fp
25760     0B 19 82 F1 | 	sub	arg04, arg03
25764     10 4E 85 F1 | 	sub	fp, #16
25768     A7 18 62 FC | 	wrlong	arg04, fp
2576c     04 4E 85 F1 | 	sub	fp, #4
25770     A7 18 02 FB | 	rdlong	arg04, fp
25774     0C FB 01 F6 | 	mov	result1, arg04
25778     14 18 06 F1 | 	add	arg04, #20
2577c     0C 19 02 FB | 	rdlong	arg04, arg04
25780     14 4E 05 F1 | 	add	fp, #20
25784     A7 16 02 FB | 	rdlong	arg03, fp
25788     0B 19 02 F1 | 	add	arg04, arg03
2578c     14 FA 05 F1 | 	add	result1, #20
25790     FD 18 62 FC | 	wrlong	arg04, result1
25794     14 4E 85 F1 | 	sub	fp, #20
25798     A7 16 02 FB | 	rdlong	arg03, fp
2579c     04 4E 85 F1 | 	sub	fp, #4
257a0     10 16 06 F1 | 	add	arg03, #16
257a4     0B 17 C2 FA | 	rdbyte	arg03, arg03
257a8     02 16 CE F7 | 	test	arg03, #2 wz
257ac     3C 00 90 AD |  if_e	jmp	#LR__3878
257b0     04 4E 05 F1 | 	add	fp, #4
257b4     A7 12 02 FB | 	rdlong	arg01, fp
257b8     10 4E 05 F1 | 	add	fp, #16
257bc     A7 14 02 FB | 	rdlong	arg02, fp
257c0     14 4E 85 F1 | 	sub	fp, #20
257c4     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
257c8     14 4E 05 F1 | 	add	fp, #20
257cc     A7 FA 61 FC | 	wrlong	result1, fp
257d0     00 FA 4D F2 | 	cmps	result1, #0 wz
257d4     14 4E 85 F1 | 	sub	fp, #20
257d8     08 4E 05 A1 |  if_e	add	fp, #8
257dc     A7 00 68 AC |  if_e	wrlong	#0, fp
257e0     08 4E 85 A1 |  if_e	sub	fp, #8
257e4                 | ' 							ofs = 0; break;
257e4     D0 00 90 AD |  if_e	jmp	#LR__3883
257e8     24 00 90 FD | 	jmp	#LR__3879
257ec                 | LR__3878
257ec     04 4E 05 F1 | 	add	fp, #4
257f0     A7 12 02 FB | 	rdlong	arg01, fp
257f4     10 4E 05 F1 | 	add	fp, #16
257f8     A7 14 02 FB | 	rdlong	arg02, fp
257fc     14 4E 85 F1 | 	sub	fp, #20
25800     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
25804     14 4E 05 F1 | 	add	fp, #20
25808     A7 FA 61 FC | 	wrlong	result1, fp
2580c     14 4E 85 F1 | 	sub	fp, #20
25810                 | LR__3879
25810     14 4E 05 F1 | 	add	fp, #20
25814     A7 16 02 FB | 	rdlong	arg03, fp
25818     14 4E 85 F1 | 	sub	fp, #20
2581c     FF FF 7F FF 
25820     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
25824     1C 00 90 5D |  if_ne	jmp	#LR__3880
25828     04 4E 05 F1 | 	add	fp, #4
2582c     A7 16 02 FB | 	rdlong	arg03, fp
25830     04 4E 85 F1 | 	sub	fp, #4
25834     11 16 06 F1 | 	add	arg03, #17
25838     0B 03 48 FC | 	wrbyte	#1, arg03
2583c     01 FA 05 F6 | 	mov	result1, #1
25840     D0 02 90 FD | 	jmp	#LR__3893
25844                 | LR__3880
25844     14 4E 05 F1 | 	add	fp, #20
25848     A7 16 02 FB | 	rdlong	arg03, fp
2584c     14 4E 85 F1 | 	sub	fp, #20
25850     02 16 16 F2 | 	cmp	arg03, #2 wc
25854     24 00 90 CD |  if_b	jmp	#LR__3881
25858     10 4E 05 F1 | 	add	fp, #16
2585c     A7 18 02 FB | 	rdlong	arg04, fp
25860     04 4E 05 F1 | 	add	fp, #4
25864     A7 16 02 FB | 	rdlong	arg03, fp
25868     14 4E 85 F1 | 	sub	fp, #20
2586c     18 18 06 F1 | 	add	arg04, #24
25870     0C 19 02 FB | 	rdlong	arg04, arg04
25874     0C 17 12 F2 | 	cmp	arg03, arg04 wc
25878     1C 00 90 CD |  if_b	jmp	#LR__3882
2587c                 | LR__3881
2587c     04 4E 05 F1 | 	add	fp, #4
25880     A7 16 02 FB | 	rdlong	arg03, fp
25884     04 4E 85 F1 | 	sub	fp, #4
25888     11 16 06 F1 | 	add	arg03, #17
2588c     0B 05 48 FC | 	wrbyte	#2, arg03
25890     02 FA 05 F6 | 	mov	result1, #2
25894     7C 02 90 FD | 	jmp	#LR__3893
25898                 | LR__3882
25898     04 4E 05 F1 | 	add	fp, #4
2589c     A7 18 02 FB | 	rdlong	arg04, fp
258a0     10 4E 05 F1 | 	add	fp, #16
258a4     A7 16 02 FB | 	rdlong	arg03, fp
258a8     14 4E 85 F1 | 	sub	fp, #20
258ac     18 18 06 F1 | 	add	arg04, #24
258b0     0C 17 62 FC | 	wrlong	arg03, arg04
258b4     7C FE 9F FD | 	jmp	#LR__3877
258b8                 | LR__3883
258b8     04 4E 05 F1 | 	add	fp, #4
258bc     A7 16 02 FB | 	rdlong	arg03, fp
258c0     0B 13 02 F6 | 	mov	arg01, arg03
258c4     14 16 06 F1 | 	add	arg03, #20
258c8     0B 15 02 FB | 	rdlong	arg02, arg03
258cc     04 4E 05 F1 | 	add	fp, #4
258d0     A7 16 02 FB | 	rdlong	arg03, fp
258d4     0B 15 02 F1 | 	add	arg02, arg03
258d8     14 12 06 F1 | 	add	arg01, #20
258dc     09 15 62 FC | 	wrlong	arg02, arg01
258e0     A7 16 02 FB | 	rdlong	arg03, fp
258e4     08 4E 85 F1 | 	sub	fp, #8
258e8     FF 17 CE F7 | 	test	arg03, #511 wz
258ec     6C 00 90 AD |  if_e	jmp	#LR__3885
258f0     10 4E 05 F1 | 	add	fp, #16
258f4     A7 12 02 FB | 	rdlong	arg01, fp
258f8     04 4E 05 F1 | 	add	fp, #4
258fc     A7 14 02 FB | 	rdlong	arg02, fp
25900     14 4E 85 F1 | 	sub	fp, #20
25904     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
25908     1C 4E 05 F1 | 	add	fp, #28
2590c     A7 FA 61 FC | 	wrlong	result1, fp
25910     1C 4E 85 F1 | 	sub	fp, #28
25914     00 FA 0D F2 | 	cmp	result1, #0 wz
25918     1C 00 90 5D |  if_ne	jmp	#LR__3884
2591c     04 4E 05 F1 | 	add	fp, #4
25920     A7 16 02 FB | 	rdlong	arg03, fp
25924     04 4E 85 F1 | 	sub	fp, #4
25928     11 16 06 F1 | 	add	arg03, #17
2592c     0B 05 48 FC | 	wrbyte	#2, arg03
25930     02 FA 05 F6 | 	mov	result1, #2
25934     DC 01 90 FD | 	jmp	#LR__3893
25938                 | LR__3884
25938     1C 4E 05 F1 | 	add	fp, #28
2593c     A7 18 02 FB | 	rdlong	arg04, fp
25940     14 4E 85 F1 | 	sub	fp, #20
25944     A7 16 02 FB | 	rdlong	arg03, fp
25948     09 16 46 F0 | 	shr	arg03, #9
2594c     0B 19 02 F1 | 	add	arg04, arg03
25950     14 4E 05 F1 | 	add	fp, #20
25954     A7 18 62 FC | 	wrlong	arg04, fp
25958     1C 4E 85 F1 | 	sub	fp, #28
2595c                 | LR__3885
2595c                 | LR__3886
2595c                 | LR__3887
2595c     04 4E 05 F1 | 	add	fp, #4
25960     A7 18 02 FB | 	rdlong	arg04, fp
25964     0C 17 02 F6 | 	mov	arg03, arg04
25968     04 4E 85 F1 | 	sub	fp, #4
2596c     14 16 06 F1 | 	add	arg03, #20
25970     0B 17 02 FB | 	rdlong	arg03, arg03
25974     0C 18 06 F1 | 	add	arg04, #12
25978     0C 19 02 FB | 	rdlong	arg04, arg04
2597c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
25980     3C 00 90 ED |  if_be	jmp	#LR__3888
25984     04 4E 05 F1 | 	add	fp, #4
25988     A7 18 02 FB | 	rdlong	arg04, fp
2598c     0C 17 02 F6 | 	mov	arg03, arg04
25990     14 18 06 F1 | 	add	arg04, #20
25994     0C 19 02 FB | 	rdlong	arg04, arg04
25998     0C 16 06 F1 | 	add	arg03, #12
2599c     0B 19 62 FC | 	wrlong	arg04, arg03
259a0     A7 18 02 FB | 	rdlong	arg04, fp
259a4     0C 17 02 F6 | 	mov	arg03, arg04
259a8     04 4E 85 F1 | 	sub	fp, #4
259ac     10 18 06 F1 | 	add	arg04, #16
259b0     0C 19 C2 FA | 	rdbyte	arg04, arg04
259b4     40 18 46 F5 | 	or	arg04, #64
259b8     10 16 06 F1 | 	add	arg03, #16
259bc     0B 19 42 FC | 	wrbyte	arg04, arg03
259c0                 | LR__3888
259c0     04 4E 05 F1 | 	add	fp, #4
259c4     A7 16 02 FB | 	rdlong	arg03, fp
259c8     04 4E 85 F1 | 	sub	fp, #4
259cc     14 16 06 F1 | 	add	arg03, #20
259d0     0B 17 02 FB | 	rdlong	arg03, arg03
259d4     FF 17 CE F7 | 	test	arg03, #511 wz
259d8     2C 01 90 AD |  if_e	jmp	#LR__3892
259dc     04 4E 05 F1 | 	add	fp, #4
259e0     A7 18 02 FB | 	rdlong	arg04, fp
259e4     18 4E 05 F1 | 	add	fp, #24
259e8     A7 16 02 FB | 	rdlong	arg03, fp
259ec     1C 4E 85 F1 | 	sub	fp, #28
259f0     1C 18 06 F1 | 	add	arg04, #28
259f4     0C 19 02 FB | 	rdlong	arg04, arg04
259f8     0C 17 0A F2 | 	cmp	arg03, arg04 wz
259fc     08 01 90 AD |  if_e	jmp	#LR__3892
25a00     04 4E 05 F1 | 	add	fp, #4
25a04     A7 16 02 FB | 	rdlong	arg03, fp
25a08     04 4E 85 F1 | 	sub	fp, #4
25a0c     10 16 06 F1 | 	add	arg03, #16
25a10     0B 17 C2 FA | 	rdbyte	arg03, arg03
25a14     80 16 CE F7 | 	test	arg03, #128 wz
25a18     7C 00 90 AD |  if_e	jmp	#LR__3890
25a1c     10 4E 05 F1 | 	add	fp, #16
25a20     A7 16 02 FB | 	rdlong	arg03, fp
25a24     01 16 06 F1 | 	add	arg03, #1
25a28     0B 13 C2 FA | 	rdbyte	arg01, arg03
25a2c     0C 4E 85 F1 | 	sub	fp, #12
25a30     A7 16 02 FB | 	rdlong	arg03, fp
25a34     0B 15 02 F6 | 	mov	arg02, arg03
25a38     28 14 06 F1 | 	add	arg02, #40
25a3c     04 4E 85 F1 | 	sub	fp, #4
25a40     1C 16 06 F1 | 	add	arg03, #28
25a44     0B 17 02 FB | 	rdlong	arg03, arg03
25a48     01 18 06 F6 | 	mov	arg04, #1
25a4c     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
25a50     00 FA 0D F2 | 	cmp	result1, #0 wz
25a54     1C 00 90 AD |  if_e	jmp	#LR__3889
25a58     04 4E 05 F1 | 	add	fp, #4
25a5c     A7 16 02 FB | 	rdlong	arg03, fp
25a60     04 4E 85 F1 | 	sub	fp, #4
25a64     11 16 06 F1 | 	add	arg03, #17
25a68     0B 03 48 FC | 	wrbyte	#1, arg03
25a6c     01 FA 05 F6 | 	mov	result1, #1
25a70     A0 00 90 FD | 	jmp	#LR__3893
25a74                 | LR__3889
25a74     04 4E 05 F1 | 	add	fp, #4
25a78     A7 18 02 FB | 	rdlong	arg04, fp
25a7c     0C 17 02 F6 | 	mov	arg03, arg04
25a80     04 4E 85 F1 | 	sub	fp, #4
25a84     10 18 06 F1 | 	add	arg04, #16
25a88     0C 19 C2 FA | 	rdbyte	arg04, arg04
25a8c     7F 18 06 F5 | 	and	arg04, #127
25a90     10 16 06 F1 | 	add	arg03, #16
25a94     0B 19 42 FC | 	wrbyte	arg04, arg03
25a98                 | LR__3890
25a98     10 4E 05 F1 | 	add	fp, #16
25a9c     A7 16 02 FB | 	rdlong	arg03, fp
25aa0     01 16 06 F1 | 	add	arg03, #1
25aa4     0B 13 C2 FA | 	rdbyte	arg01, arg03
25aa8     0C 4E 85 F1 | 	sub	fp, #12
25aac     A7 14 02 FB | 	rdlong	arg02, fp
25ab0     28 14 06 F1 | 	add	arg02, #40
25ab4     18 4E 05 F1 | 	add	fp, #24
25ab8     A7 16 02 FB | 	rdlong	arg03, fp
25abc     1C 4E 85 F1 | 	sub	fp, #28
25ac0     01 18 06 F6 | 	mov	arg04, #1
25ac4     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
25ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
25acc     1C 00 90 AD |  if_e	jmp	#LR__3891
25ad0     04 4E 05 F1 | 	add	fp, #4
25ad4     A7 16 02 FB | 	rdlong	arg03, fp
25ad8     04 4E 85 F1 | 	sub	fp, #4
25adc     11 16 06 F1 | 	add	arg03, #17
25ae0     0B 03 48 FC | 	wrbyte	#1, arg03
25ae4     01 FA 05 F6 | 	mov	result1, #1
25ae8     28 00 90 FD | 	jmp	#LR__3893
25aec                 | LR__3891
25aec     04 4E 05 F1 | 	add	fp, #4
25af0     A7 18 02 FB | 	rdlong	arg04, fp
25af4     18 4E 05 F1 | 	add	fp, #24
25af8     A7 16 02 FB | 	rdlong	arg03, fp
25afc     1C 4E 85 F1 | 	sub	fp, #28
25b00     1C 18 06 F1 | 	add	arg04, #28
25b04     0C 17 62 FC | 	wrlong	arg03, arg04
25b08                 | LR__3892
25b08                 | ' 
25b08                 | ' 			fp->sect = nsect;
25b08                 | ' 		}
25b08                 | ' 	}
25b08                 | ' 
25b08                 | ' 	return res ;
25b08     0C 4E 05 F1 | 	add	fp, #12
25b0c     A7 FA 01 FB | 	rdlong	result1, fp
25b10     0C 4E 85 F1 | 	sub	fp, #12
25b14                 | LR__3893
25b14     A7 F0 03 F6 | 	mov	ptra, fp
25b18     B2 00 A0 FD | 	call	#popregs_
25b1c                 | _fatfs_cc_f_lseek_ret
25b1c     2D 00 64 FD | 	ret
25b20                 | 
25b20                 | _fatfs_cc_f_opendir
25b20     01 4A 05 F6 | 	mov	COUNT_, #1
25b24     A8 00 A0 FD | 	call	#pushregs_
25b28     14 F0 07 F1 | 	add	ptra, #20
25b2c     04 4E 05 F1 | 	add	fp, #4
25b30     A7 12 62 FC | 	wrlong	arg01, fp
25b34     04 4E 05 F1 | 	add	fp, #4
25b38     A7 14 62 FC | 	wrlong	arg02, fp
25b3c     04 4E 85 F1 | 	sub	fp, #4
25b40     A7 16 0A FB | 	rdlong	arg03, fp wz
25b44     04 4E 85 F1 | 	sub	fp, #4
25b48     09 FA 05 A6 |  if_e	mov	result1, #9
25b4c     78 01 90 AD |  if_e	jmp	#LR__3906
25b50     08 4E 05 F1 | 	add	fp, #8
25b54     A7 12 02 F6 | 	mov	arg01, fp
25b58     08 4E 05 F1 | 	add	fp, #8
25b5c     A7 14 02 F6 | 	mov	arg02, fp
25b60     10 4E 85 F1 | 	sub	fp, #16
25b64     00 16 06 F6 | 	mov	arg03, #0
25b68     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
25b6c     0C 4E 05 F1 | 	add	fp, #12
25b70     A7 FA 61 FC | 	wrlong	result1, fp
25b74     0C 4E 85 F1 | 	sub	fp, #12
25b78     00 FA 0D F2 | 	cmp	result1, #0 wz
25b7c     20 01 90 5D |  if_ne	jmp	#LR__3905
25b80     04 4E 05 F1 | 	add	fp, #4
25b84     A7 16 02 FB | 	rdlong	arg03, fp
25b88     0C 4E 05 F1 | 	add	fp, #12
25b8c     A7 FA 01 FB | 	rdlong	result1, fp
25b90     0B FB 61 FC | 	wrlong	result1, arg03
25b94     0C 4E 85 F1 | 	sub	fp, #12
25b98     A7 12 02 FB | 	rdlong	arg01, fp
25b9c     04 4E 05 F1 | 	add	fp, #4
25ba0     A7 14 02 FB | 	rdlong	arg02, fp
25ba4     08 4E 85 F1 | 	sub	fp, #8
25ba8     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
25bac     0C 4E 05 F1 | 	add	fp, #12
25bb0     A7 FA 61 FC | 	wrlong	result1, fp
25bb4     0C 4E 85 F1 | 	sub	fp, #12
25bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
25bbc     C4 00 90 5D |  if_ne	jmp	#LR__3904
25bc0     04 4E 05 F1 | 	add	fp, #4
25bc4     A7 16 02 FB | 	rdlong	arg03, fp
25bc8     04 4E 85 F1 | 	sub	fp, #4
25bcc     2B 16 06 F1 | 	add	arg03, #43
25bd0     0B 17 C2 FA | 	rdbyte	arg03, arg03
25bd4     80 16 CE F7 | 	test	arg03, #128 wz
25bd8     58 00 90 5D |  if_ne	jmp	#LR__3902
25bdc     04 4E 05 F1 | 	add	fp, #4
25be0     A7 16 02 FB | 	rdlong	arg03, fp
25be4     04 4E 85 F1 | 	sub	fp, #4
25be8     06 16 06 F1 | 	add	arg03, #6
25bec     0B 17 C2 FA | 	rdbyte	arg03, arg03
25bf0     10 16 CE F7 | 	test	arg03, #16 wz
25bf4     30 00 90 AD |  if_e	jmp	#LR__3900
25bf8     04 4E 05 F1 | 	add	fp, #4
25bfc     A7 16 02 FB | 	rdlong	arg03, fp
25c00     0B 1F 02 F6 | 	mov	local01, arg03
25c04     0C 4E 05 F1 | 	add	fp, #12
25c08     A7 12 02 FB | 	rdlong	arg01, fp
25c0c     10 4E 85 F1 | 	sub	fp, #16
25c10     1C 16 06 F1 | 	add	arg03, #28
25c14     0B 15 02 FB | 	rdlong	arg02, arg03
25c18     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
25c1c     08 1E 06 F1 | 	add	local01, #8
25c20     0F FB 61 FC | 	wrlong	result1, local01
25c24     0C 00 90 FD | 	jmp	#LR__3901
25c28                 | LR__3900
25c28     0C 4E 05 F1 | 	add	fp, #12
25c2c     A7 0A 68 FC | 	wrlong	#5, fp
25c30     0C 4E 85 F1 | 	sub	fp, #12
25c34                 | LR__3901
25c34                 | LR__3902
25c34     0C 4E 05 F1 | 	add	fp, #12
25c38     A7 1E 0A FB | 	rdlong	local01, fp wz
25c3c     0C 4E 85 F1 | 	sub	fp, #12
25c40     40 00 90 5D |  if_ne	jmp	#LR__3903
25c44     04 4E 05 F1 | 	add	fp, #4
25c48     A7 1E 02 FB | 	rdlong	local01, fp
25c4c     0C 4E 05 F1 | 	add	fp, #12
25c50     A7 16 02 FB | 	rdlong	arg03, fp
25c54     06 16 06 F1 | 	add	arg03, #6
25c58     0B 17 E2 FA | 	rdword	arg03, arg03
25c5c     04 1E 06 F1 | 	add	local01, #4
25c60     0F 17 52 FC | 	wrword	arg03, local01
25c64     0C 4E 85 F1 | 	sub	fp, #12
25c68     A7 12 02 FB | 	rdlong	arg01, fp
25c6c     04 4E 85 F1 | 	sub	fp, #4
25c70     00 14 06 F6 | 	mov	arg02, #0
25c74     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
25c78     0C 4E 05 F1 | 	add	fp, #12
25c7c     A7 FA 61 FC | 	wrlong	result1, fp
25c80     0C 4E 85 F1 | 	sub	fp, #12
25c84                 | LR__3903
25c84                 | LR__3904
25c84     0C 4E 05 F1 | 	add	fp, #12
25c88     A7 1E 02 FB | 	rdlong	local01, fp
25c8c     0C 4E 85 F1 | 	sub	fp, #12
25c90     04 1E 0E F2 | 	cmp	local01, #4 wz
25c94     0C 4E 05 A1 |  if_e	add	fp, #12
25c98     A7 0A 68 AC |  if_e	wrlong	#5, fp
25c9c     0C 4E 85 A1 |  if_e	sub	fp, #12
25ca0                 | LR__3905
25ca0     0C 4E 05 F1 | 	add	fp, #12
25ca4     A7 1E 0A FB | 	rdlong	local01, fp wz
25ca8     0C 4E 85 F1 | 	sub	fp, #12
25cac     04 4E 05 51 |  if_ne	add	fp, #4
25cb0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
25cb4     04 4E 85 51 |  if_ne	sub	fp, #4
25cb8     0F 01 68 5C |  if_ne	wrlong	#0, local01
25cbc                 | ' 
25cbc                 | ' 	return res ;
25cbc     0C 4E 05 F1 | 	add	fp, #12
25cc0     A7 FA 01 FB | 	rdlong	result1, fp
25cc4     0C 4E 85 F1 | 	sub	fp, #12
25cc8                 | LR__3906
25cc8     A7 F0 03 F6 | 	mov	ptra, fp
25ccc     B2 00 A0 FD | 	call	#popregs_
25cd0                 | _fatfs_cc_f_opendir_ret
25cd0     2D 00 64 FD | 	ret
25cd4                 | 
25cd4                 | _fatfs_cc_f_closedir
25cd4     00 4A 05 F6 | 	mov	COUNT_, #0
25cd8     A8 00 A0 FD | 	call	#pushregs_
25cdc     10 F0 07 F1 | 	add	ptra, #16
25ce0     04 4E 05 F1 | 	add	fp, #4
25ce4     A7 12 62 FC | 	wrlong	arg01, fp
25ce8     08 4E 05 F1 | 	add	fp, #8
25cec     A7 14 02 F6 | 	mov	arg02, fp
25cf0     0C 4E 85 F1 | 	sub	fp, #12
25cf4     C0 DD BF FD | 	call	#_fatfs_cc_validate
25cf8     08 4E 05 F1 | 	add	fp, #8
25cfc     A7 FA 61 FC | 	wrlong	result1, fp
25d00     08 4E 85 F1 | 	sub	fp, #8
25d04     00 FA 0D F2 | 	cmp	result1, #0 wz
25d08     04 4E 05 A1 |  if_e	add	fp, #4
25d0c     A7 FA 01 AB |  if_e	rdlong	result1, fp
25d10     04 4E 85 A1 |  if_e	sub	fp, #4
25d14     FD 00 68 AC |  if_e	wrlong	#0, result1
25d18                 | ' 
25d18                 | ' 
25d18                 | ' 
25d18                 | ' 
25d18                 | ' 		dp->obj.fs = 0;
25d18                 | ' #line 4633 "ff.c"
25d18                 | ' 	}
25d18                 | ' 	return res;
25d18     08 4E 05 F1 | 	add	fp, #8
25d1c     A7 FA 01 FB | 	rdlong	result1, fp
25d20     08 4E 85 F1 | 	sub	fp, #8
25d24     A7 F0 03 F6 | 	mov	ptra, fp
25d28     B2 00 A0 FD | 	call	#popregs_
25d2c                 | _fatfs_cc_f_closedir_ret
25d2c     2D 00 64 FD | 	ret
25d30                 | 
25d30                 | _fatfs_cc_f_readdir
25d30     00 4A 05 F6 | 	mov	COUNT_, #0
25d34     A8 00 A0 FD | 	call	#pushregs_
25d38     14 F0 07 F1 | 	add	ptra, #20
25d3c     04 4E 05 F1 | 	add	fp, #4
25d40     A7 12 62 FC | 	wrlong	arg01, fp
25d44     04 4E 05 F1 | 	add	fp, #4
25d48     A7 14 62 FC | 	wrlong	arg02, fp
25d4c     04 4E 85 F1 | 	sub	fp, #4
25d50     A7 12 02 FB | 	rdlong	arg01, fp
25d54     0C 4E 05 F1 | 	add	fp, #12
25d58     A7 14 02 F6 | 	mov	arg02, fp
25d5c     10 4E 85 F1 | 	sub	fp, #16
25d60     54 DD BF FD | 	call	#_fatfs_cc_validate
25d64     0C 4E 05 F1 | 	add	fp, #12
25d68     A7 FA 61 FC | 	wrlong	result1, fp
25d6c     0C 4E 85 F1 | 	sub	fp, #12
25d70     00 FA 0D F2 | 	cmp	result1, #0 wz
25d74     BC 00 90 5D |  if_ne	jmp	#LR__3913
25d78     08 4E 05 F1 | 	add	fp, #8
25d7c     A7 FA 09 FB | 	rdlong	result1, fp wz
25d80     08 4E 85 F1 | 	sub	fp, #8
25d84     24 00 90 5D |  if_ne	jmp	#LR__3910
25d88     04 4E 05 F1 | 	add	fp, #4
25d8c     A7 12 02 FB | 	rdlong	arg01, fp
25d90     04 4E 85 F1 | 	sub	fp, #4
25d94     00 14 06 F6 | 	mov	arg02, #0
25d98     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
25d9c     0C 4E 05 F1 | 	add	fp, #12
25da0     A7 FA 61 FC | 	wrlong	result1, fp
25da4     0C 4E 85 F1 | 	sub	fp, #12
25da8     88 00 90 FD | 	jmp	#LR__3912
25dac                 | LR__3910
25dac     04 4E 05 F1 | 	add	fp, #4
25db0     A7 12 02 FB | 	rdlong	arg01, fp
25db4     04 4E 85 F1 | 	sub	fp, #4
25db8     00 14 06 F6 | 	mov	arg02, #0
25dbc     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
25dc0     0C 4E 05 F1 | 	add	fp, #12
25dc4     A7 FA 61 FC | 	wrlong	result1, fp
25dc8     0C 4E 85 F1 | 	sub	fp, #12
25dcc     04 FA 0D F2 | 	cmp	result1, #4 wz
25dd0     0C 4E 05 A1 |  if_e	add	fp, #12
25dd4     A7 00 68 AC |  if_e	wrlong	#0, fp
25dd8     0C 4E 85 A1 |  if_e	sub	fp, #12
25ddc     0C 4E 05 F1 | 	add	fp, #12
25de0     A7 FA 09 FB | 	rdlong	result1, fp wz
25de4     0C 4E 85 F1 | 	sub	fp, #12
25de8     48 00 90 5D |  if_ne	jmp	#LR__3911
25dec     04 4E 05 F1 | 	add	fp, #4
25df0     A7 12 02 FB | 	rdlong	arg01, fp
25df4     04 4E 05 F1 | 	add	fp, #4
25df8     A7 14 02 FB | 	rdlong	arg02, fp
25dfc     08 4E 85 F1 | 	sub	fp, #8
25e00     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
25e04     04 4E 05 F1 | 	add	fp, #4
25e08     A7 12 02 FB | 	rdlong	arg01, fp
25e0c     04 4E 85 F1 | 	sub	fp, #4
25e10     00 14 06 F6 | 	mov	arg02, #0
25e14     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
25e18     0C 4E 05 F1 | 	add	fp, #12
25e1c     A7 FA 61 FC | 	wrlong	result1, fp
25e20     0C 4E 85 F1 | 	sub	fp, #12
25e24     04 FA 0D F2 | 	cmp	result1, #4 wz
25e28     0C 4E 05 A1 |  if_e	add	fp, #12
25e2c     A7 00 68 AC |  if_e	wrlong	#0, fp
25e30     0C 4E 85 A1 |  if_e	sub	fp, #12
25e34                 | LR__3911
25e34                 | LR__3912
25e34                 | LR__3913
25e34                 | ' 			}
25e34                 | ' 			;
25e34                 | ' 		}
25e34                 | ' 	}
25e34                 | ' 	return res ;
25e34     0C 4E 05 F1 | 	add	fp, #12
25e38     A7 FA 01 FB | 	rdlong	result1, fp
25e3c     0C 4E 85 F1 | 	sub	fp, #12
25e40     A7 F0 03 F6 | 	mov	ptra, fp
25e44     B2 00 A0 FD | 	call	#popregs_
25e48                 | _fatfs_cc_f_readdir_ret
25e48     2D 00 64 FD | 	ret
25e4c                 | 
25e4c                 | _fatfs_cc_f_stat
25e4c     00 4A 05 F6 | 	mov	COUNT_, #0
25e50     A8 00 A0 FD | 	call	#pushregs_
25e54     40 F0 07 F1 | 	add	ptra, #64
25e58     04 4E 05 F1 | 	add	fp, #4
25e5c     A7 12 62 FC | 	wrlong	arg01, fp
25e60     04 4E 05 F1 | 	add	fp, #4
25e64     A7 14 62 FC | 	wrlong	arg02, fp
25e68     04 4E 85 F1 | 	sub	fp, #4
25e6c     A7 12 02 F6 | 	mov	arg01, fp
25e70     0C 4E 05 F1 | 	add	fp, #12
25e74     A7 14 02 F6 | 	mov	arg02, fp
25e78     10 4E 85 F1 | 	sub	fp, #16
25e7c     00 16 06 F6 | 	mov	arg03, #0
25e80     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
25e84     0C 4E 05 F1 | 	add	fp, #12
25e88     A7 FA 61 FC | 	wrlong	result1, fp
25e8c     0C 4E 85 F1 | 	sub	fp, #12
25e90     00 FA 0D F2 | 	cmp	result1, #0 wz
25e94     74 00 90 5D |  if_ne	jmp	#LR__3923
25e98     10 4E 05 F1 | 	add	fp, #16
25e9c     A7 12 02 F6 | 	mov	arg01, fp
25ea0     0C 4E 85 F1 | 	sub	fp, #12
25ea4     A7 14 02 FB | 	rdlong	arg02, fp
25ea8     04 4E 85 F1 | 	sub	fp, #4
25eac     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
25eb0     0C 4E 05 F1 | 	add	fp, #12
25eb4     A7 FA 61 FC | 	wrlong	result1, fp
25eb8     0C 4E 85 F1 | 	sub	fp, #12
25ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
25ec0     48 00 90 5D |  if_ne	jmp	#LR__3922
25ec4     3B 4E 05 F1 | 	add	fp, #59
25ec8     A7 FA C1 FA | 	rdbyte	result1, fp
25ecc     3B 4E 85 F1 | 	sub	fp, #59
25ed0     80 FA CD F7 | 	test	result1, #128 wz
25ed4     0C 4E 05 51 |  if_ne	add	fp, #12
25ed8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
25edc     0C 4E 85 51 |  if_ne	sub	fp, #12
25ee0     28 00 90 5D |  if_ne	jmp	#LR__3921
25ee4     08 4E 05 F1 | 	add	fp, #8
25ee8     A7 FA 09 FB | 	rdlong	result1, fp wz
25eec     08 4E 85 F1 | 	sub	fp, #8
25ef0     18 00 90 AD |  if_e	jmp	#LR__3920
25ef4     10 4E 05 F1 | 	add	fp, #16
25ef8     A7 12 02 F6 | 	mov	arg01, fp
25efc     08 4E 85 F1 | 	sub	fp, #8
25f00     A7 14 02 FB | 	rdlong	arg02, fp
25f04     08 4E 85 F1 | 	sub	fp, #8
25f08     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
25f0c                 | LR__3920
25f0c                 | LR__3921
25f0c                 | LR__3922
25f0c                 | LR__3923
25f0c                 | ' 			}
25f0c                 | ' 		}
25f0c                 | ' 		;
25f0c                 | ' 	}
25f0c                 | ' 
25f0c                 | ' 	return res ;
25f0c     0C 4E 05 F1 | 	add	fp, #12
25f10     A7 FA 01 FB | 	rdlong	result1, fp
25f14     0C 4E 85 F1 | 	sub	fp, #12
25f18     A7 F0 03 F6 | 	mov	ptra, fp
25f1c     B2 00 A0 FD | 	call	#popregs_
25f20                 | _fatfs_cc_f_stat_ret
25f20     2D 00 64 FD | 	ret
25f24                 | 
25f24                 | _fatfs_cc_f_unlink
25f24     00 4A 05 F6 | 	mov	COUNT_, #0
25f28     A8 00 A0 FD | 	call	#pushregs_
25f2c     74 F0 07 F1 | 	add	ptra, #116
25f30     04 4E 05 F1 | 	add	fp, #4
25f34     A7 12 62 FC | 	wrlong	arg01, fp
25f38     68 4E 05 F1 | 	add	fp, #104
25f3c     A7 00 68 FC | 	wrlong	#0, fp
25f40     68 4E 85 F1 | 	sub	fp, #104
25f44     A7 12 02 F6 | 	mov	arg01, fp
25f48     6C 4E 05 F1 | 	add	fp, #108
25f4c     A7 14 02 F6 | 	mov	arg02, fp
25f50     70 4E 85 F1 | 	sub	fp, #112
25f54     02 16 06 F6 | 	mov	arg03, #2
25f58     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
25f5c     08 4E 05 F1 | 	add	fp, #8
25f60     A7 FA 61 FC | 	wrlong	result1, fp
25f64     08 4E 85 F1 | 	sub	fp, #8
25f68     00 FA 0D F2 | 	cmp	result1, #0 wz
25f6c     E4 01 90 5D |  if_ne	jmp	#LR__3938
25f70     70 4E 05 F1 | 	add	fp, #112
25f74     A7 16 02 FB | 	rdlong	arg03, fp
25f78     64 4E 85 F1 | 	sub	fp, #100
25f7c     A7 16 62 FC | 	wrlong	arg03, fp
25f80     A7 12 02 F6 | 	mov	arg01, fp
25f84     08 4E 85 F1 | 	sub	fp, #8
25f88     A7 14 02 FB | 	rdlong	arg02, fp
25f8c     04 4E 85 F1 | 	sub	fp, #4
25f90     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
25f94     08 4E 05 F1 | 	add	fp, #8
25f98     A7 FA 61 FC | 	wrlong	result1, fp
25f9c     00 FA 4D F2 | 	cmps	result1, #0 wz
25fa0     08 4E 85 F1 | 	sub	fp, #8
25fa4     AC 01 90 5D |  if_ne	jmp	#LR__3937
25fa8     37 4E 05 F1 | 	add	fp, #55
25fac     A7 FA C1 FA | 	rdbyte	result1, fp
25fb0     37 4E 85 F1 | 	sub	fp, #55
25fb4     80 FA CD F7 | 	test	result1, #128 wz
25fb8     08 4E 05 51 |  if_ne	add	fp, #8
25fbc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
25fc0     08 4E 85 51 |  if_ne	sub	fp, #8
25fc4     1C 00 90 5D |  if_ne	jmp	#LR__3930
25fc8     12 4E 05 F1 | 	add	fp, #18
25fcc     A7 FA C1 FA | 	rdbyte	result1, fp
25fd0     12 4E 85 F1 | 	sub	fp, #18
25fd4     01 FA CD F7 | 	test	result1, #1 wz
25fd8     08 4E 05 51 |  if_ne	add	fp, #8
25fdc     A7 0E 68 5C |  if_ne	wrlong	#7, fp
25fe0     08 4E 85 51 |  if_ne	sub	fp, #8
25fe4                 | LR__3930
25fe4     08 4E 05 F1 | 	add	fp, #8
25fe8     A7 FA 09 FB | 	rdlong	result1, fp wz
25fec     08 4E 85 F1 | 	sub	fp, #8
25ff0     C8 00 90 5D |  if_ne	jmp	#LR__3933
25ff4     70 4E 05 F1 | 	add	fp, #112
25ff8     A7 12 02 FB | 	rdlong	arg01, fp
25ffc     48 4E 85 F1 | 	sub	fp, #72
26000     A7 14 02 FB | 	rdlong	arg02, fp
26004     28 4E 85 F1 | 	sub	fp, #40
26008     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2600c     6C 4E 05 F1 | 	add	fp, #108
26010     A7 FA 61 FC | 	wrlong	result1, fp
26014     5A 4E 85 F1 | 	sub	fp, #90
26018     A7 FA C1 FA | 	rdbyte	result1, fp
2601c     12 4E 85 F1 | 	sub	fp, #18
26020     10 FA CD F7 | 	test	result1, #16 wz
26024     94 00 90 AD |  if_e	jmp	#LR__3932
26028     70 4E 05 F1 | 	add	fp, #112
2602c     A7 FA 01 FB | 	rdlong	result1, fp
26030     34 4E 85 F1 | 	sub	fp, #52
26034     A7 FA 61 FC | 	wrlong	result1, fp
26038     30 4E 05 F1 | 	add	fp, #48
2603c     A7 16 02 FB | 	rdlong	arg03, fp
26040     28 4E 85 F1 | 	sub	fp, #40
26044     A7 16 62 FC | 	wrlong	arg03, fp
26048     08 4E 85 F1 | 	sub	fp, #8
2604c     A7 12 02 F6 | 	mov	arg01, fp
26050     3C 4E 85 F1 | 	sub	fp, #60
26054     00 14 06 F6 | 	mov	arg02, #0
26058     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2605c     08 4E 05 F1 | 	add	fp, #8
26060     A7 FA 61 FC | 	wrlong	result1, fp
26064     08 4E 85 F1 | 	sub	fp, #8
26068     00 FA 0D F2 | 	cmp	result1, #0 wz
2606c     4C 00 90 5D |  if_ne	jmp	#LR__3931
26070     3C 4E 05 F1 | 	add	fp, #60
26074     A7 12 02 F6 | 	mov	arg01, fp
26078     3C 4E 85 F1 | 	sub	fp, #60
2607c     00 14 06 F6 | 	mov	arg02, #0
26080     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
26084     08 4E 05 F1 | 	add	fp, #8
26088     A7 FA 61 FC | 	wrlong	result1, fp
2608c     00 FA 4D F2 | 	cmps	result1, #0 wz
26090     08 4E 85 F1 | 	sub	fp, #8
26094     08 4E 05 A1 |  if_e	add	fp, #8
26098     A7 0E 68 AC |  if_e	wrlong	#7, fp
2609c     08 4E 85 A1 |  if_e	sub	fp, #8
260a0     08 4E 05 F1 | 	add	fp, #8
260a4     A7 FA 01 FB | 	rdlong	result1, fp
260a8     08 4E 85 F1 | 	sub	fp, #8
260ac     04 FA 0D F2 | 	cmp	result1, #4 wz
260b0     08 4E 05 A1 |  if_e	add	fp, #8
260b4     A7 00 68 AC |  if_e	wrlong	#0, fp
260b8     08 4E 85 A1 |  if_e	sub	fp, #8
260bc                 | LR__3931
260bc                 | LR__3932
260bc                 | LR__3933
260bc     08 4E 05 F1 | 	add	fp, #8
260c0     A7 FA 09 FB | 	rdlong	result1, fp wz
260c4     08 4E 85 F1 | 	sub	fp, #8
260c8     88 00 90 5D |  if_ne	jmp	#LR__3936
260cc     0C 4E 05 F1 | 	add	fp, #12
260d0     A7 12 02 F6 | 	mov	arg01, fp
260d4     0C 4E 85 F1 | 	sub	fp, #12
260d8     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
260dc     08 4E 05 F1 | 	add	fp, #8
260e0     A7 FA 61 FC | 	wrlong	result1, fp
260e4     08 4E 85 F1 | 	sub	fp, #8
260e8     00 FA 0D F2 | 	cmp	result1, #0 wz
260ec     38 00 90 5D |  if_ne	jmp	#LR__3934
260f0     6C 4E 05 F1 | 	add	fp, #108
260f4     A7 FA 09 FB | 	rdlong	result1, fp wz
260f8     6C 4E 85 F1 | 	sub	fp, #108
260fc     28 00 90 AD |  if_e	jmp	#LR__3934
26100     0C 4E 05 F1 | 	add	fp, #12
26104     A7 12 02 F6 | 	mov	arg01, fp
26108     60 4E 05 F1 | 	add	fp, #96
2610c     A7 14 02 FB | 	rdlong	arg02, fp
26110     6C 4E 85 F1 | 	sub	fp, #108
26114     00 16 06 F6 | 	mov	arg03, #0
26118     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2611c     08 4E 05 F1 | 	add	fp, #8
26120     A7 FA 61 FC | 	wrlong	result1, fp
26124     08 4E 85 F1 | 	sub	fp, #8
26128                 | LR__3934
26128     08 4E 05 F1 | 	add	fp, #8
2612c     A7 FA 09 FB | 	rdlong	result1, fp wz
26130     08 4E 85 F1 | 	sub	fp, #8
26134     1C 00 90 5D |  if_ne	jmp	#LR__3935
26138     70 4E 05 F1 | 	add	fp, #112
2613c     A7 12 02 FB | 	rdlong	arg01, fp
26140     70 4E 85 F1 | 	sub	fp, #112
26144     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
26148     08 4E 05 F1 | 	add	fp, #8
2614c     A7 FA 61 FC | 	wrlong	result1, fp
26150     08 4E 85 F1 | 	sub	fp, #8
26154                 | LR__3935
26154                 | LR__3936
26154                 | LR__3937
26154                 | LR__3938
26154                 | ' 			}
26154                 | ' 		}
26154                 | ' 		;
26154                 | ' 	}
26154                 | ' 
26154                 | ' 	return res ;
26154     08 4E 05 F1 | 	add	fp, #8
26158     A7 FA 01 FB | 	rdlong	result1, fp
2615c     08 4E 85 F1 | 	sub	fp, #8
26160     A7 F0 03 F6 | 	mov	ptra, fp
26164     B2 00 A0 FD | 	call	#popregs_
26168                 | _fatfs_cc_f_unlink_ret
26168     2D 00 64 FD | 	ret
2616c                 | 
2616c                 | _fatfs_cc_f_mkdir
2616c     00 4A 05 F6 | 	mov	COUNT_, #0
26170     A8 00 A0 FD | 	call	#pushregs_
26174     5C F0 07 F1 | 	add	ptra, #92
26178     04 4E 05 F1 | 	add	fp, #4
2617c     A7 12 62 FC | 	wrlong	arg01, fp
26180     A7 12 02 F6 | 	mov	arg01, fp
26184     48 4E 05 F1 | 	add	fp, #72
26188     A7 14 02 F6 | 	mov	arg02, fp
2618c     4C 4E 85 F1 | 	sub	fp, #76
26190     02 16 06 F6 | 	mov	arg03, #2
26194     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
26198     08 4E 05 F1 | 	add	fp, #8
2619c     A7 FA 61 FC | 	wrlong	result1, fp
261a0     08 4E 85 F1 | 	sub	fp, #8
261a4     00 FA 0D F2 | 	cmp	result1, #0 wz
261a8     C4 02 90 5D |  if_ne	jmp	#LR__3945
261ac     4C 4E 05 F1 | 	add	fp, #76
261b0     A7 16 02 FB | 	rdlong	arg03, fp
261b4     40 4E 85 F1 | 	sub	fp, #64
261b8     A7 16 62 FC | 	wrlong	arg03, fp
261bc     A7 12 02 F6 | 	mov	arg01, fp
261c0     08 4E 85 F1 | 	sub	fp, #8
261c4     A7 14 02 FB | 	rdlong	arg02, fp
261c8     04 4E 85 F1 | 	sub	fp, #4
261cc     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
261d0     08 4E 05 F1 | 	add	fp, #8
261d4     A7 FA 61 FC | 	wrlong	result1, fp
261d8     00 FA 4D F2 | 	cmps	result1, #0 wz
261dc     08 4E 85 F1 | 	sub	fp, #8
261e0     08 4E 05 A1 |  if_e	add	fp, #8
261e4     A7 10 68 AC |  if_e	wrlong	#8, fp
261e8     08 4E 85 A1 |  if_e	sub	fp, #8
261ec     08 4E 05 F1 | 	add	fp, #8
261f0     A7 FA 01 FB | 	rdlong	result1, fp
261f4     08 4E 85 F1 | 	sub	fp, #8
261f8     04 FA 0D F2 | 	cmp	result1, #4 wz
261fc     70 02 90 5D |  if_ne	jmp	#LR__3944
26200     4C 4E 05 F1 | 	add	fp, #76
26204     A7 16 02 FB | 	rdlong	arg03, fp
26208     10 4E 85 F1 | 	sub	fp, #16
2620c     A7 16 62 FC | 	wrlong	arg03, fp
26210     A7 12 02 F6 | 	mov	arg01, fp
26214     3C 4E 85 F1 | 	sub	fp, #60
26218     00 14 06 F6 | 	mov	arg02, #0
2621c     04 AC BF FD | 	call	#_fatfs_cc_create_chain
26220     50 4E 05 F1 | 	add	fp, #80
26224     A7 FA 61 FC | 	wrlong	result1, fp
26228     48 4E 85 F1 | 	sub	fp, #72
2622c     A7 00 68 FC | 	wrlong	#0, fp
26230     48 4E 05 F1 | 	add	fp, #72
26234     A7 FA 09 FB | 	rdlong	result1, fp wz
26238     50 4E 85 F1 | 	sub	fp, #80
2623c     08 4E 05 A1 |  if_e	add	fp, #8
26240     A7 0E 68 AC |  if_e	wrlong	#7, fp
26244     08 4E 85 A1 |  if_e	sub	fp, #8
26248     50 4E 05 F1 | 	add	fp, #80
2624c     A7 FA 01 FB | 	rdlong	result1, fp
26250     50 4E 85 F1 | 	sub	fp, #80
26254     01 FA 0D F2 | 	cmp	result1, #1 wz
26258     08 4E 05 A1 |  if_e	add	fp, #8
2625c     A7 04 68 AC |  if_e	wrlong	#2, fp
26260     08 4E 85 A1 |  if_e	sub	fp, #8
26264     50 4E 05 F1 | 	add	fp, #80
26268     A7 16 02 FB | 	rdlong	arg03, fp
2626c     50 4E 85 F1 | 	sub	fp, #80
26270     FF FF 7F FF 
26274     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
26278     08 4E 05 A1 |  if_e	add	fp, #8
2627c     A7 02 68 AC |  if_e	wrlong	#1, fp
26280     08 4E 85 A1 |  if_e	sub	fp, #8
26284     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
26288     58 4E 05 F1 | 	add	fp, #88
2628c     A7 FA 61 FC | 	wrlong	result1, fp
26290     50 4E 85 F1 | 	sub	fp, #80
26294     A7 FA 09 FB | 	rdlong	result1, fp wz
26298     08 4E 85 F1 | 	sub	fp, #8
2629c     1C 01 90 5D |  if_ne	jmp	#LR__3941
262a0     4C 4E 05 F1 | 	add	fp, #76
262a4     A7 12 02 FB | 	rdlong	arg01, fp
262a8     04 4E 05 F1 | 	add	fp, #4
262ac     A7 14 02 FB | 	rdlong	arg02, fp
262b0     50 4E 85 F1 | 	sub	fp, #80
262b4     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
262b8     08 4E 05 F1 | 	add	fp, #8
262bc     A7 FA 61 FC | 	wrlong	result1, fp
262c0     00 FA 4D F2 | 	cmps	result1, #0 wz
262c4     08 4E 85 F1 | 	sub	fp, #8
262c8     F0 00 90 5D |  if_ne	jmp	#LR__3940
262cc     4C 4E 05 F1 | 	add	fp, #76
262d0     A7 12 02 FB | 	rdlong	arg01, fp
262d4     4C 4E 85 F1 | 	sub	fp, #76
262d8     34 12 06 F1 | 	add	arg01, #52
262dc     20 14 06 F6 | 	mov	arg02, #32
262e0     0B 16 06 F6 | 	mov	arg03, #11
262e4     98 00 A0 FD | 	call	#\builtin_bytefill_
262e8     4C 4E 05 F1 | 	add	fp, #76
262ec     A7 FA 01 FB | 	rdlong	result1, fp
262f0     34 FA 05 F1 | 	add	result1, #52
262f4     FD 5C 48 FC | 	wrbyte	#46, result1
262f8     A7 16 02 FB | 	rdlong	arg03, fp
262fc     3F 16 06 F1 | 	add	arg03, #63
26300     0B 21 48 FC | 	wrbyte	#16, arg03
26304     A7 12 02 FB | 	rdlong	arg01, fp
26308     4A 12 06 F1 | 	add	arg01, #74
2630c     0C 4E 05 F1 | 	add	fp, #12
26310     A7 14 02 FB | 	rdlong	arg02, fp
26314     09 15 62 FC | 	wrlong	arg02, arg01
26318     0C 4E 85 F1 | 	sub	fp, #12
2631c     A7 14 02 FB | 	rdlong	arg02, fp
26320     0A 13 02 F6 | 	mov	arg01, arg02
26324     34 14 06 F1 | 	add	arg02, #52
26328     04 4E 05 F1 | 	add	fp, #4
2632c     A7 16 02 FB | 	rdlong	arg03, fp
26330     50 4E 85 F1 | 	sub	fp, #80
26334     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
26338     4C 4E 05 F1 | 	add	fp, #76
2633c     A7 14 02 FB | 	rdlong	arg02, fp
26340     0A 13 02 F6 | 	mov	arg01, arg02
26344     54 12 06 F1 | 	add	arg01, #84
26348     4C 4E 85 F1 | 	sub	fp, #76
2634c     34 14 06 F1 | 	add	arg02, #52
26350     20 16 06 F6 | 	mov	arg03, #32
26354     64 2D BF FD | 	call	#__system____builtin_memmove
26358     4C 4E 05 F1 | 	add	fp, #76
2635c     A7 16 02 FB | 	rdlong	arg03, fp
26360     55 16 06 F1 | 	add	arg03, #85
26364     0B 5D 48 FC | 	wrbyte	#46, arg03
26368     38 4E 85 F1 | 	sub	fp, #56
2636c     A7 16 02 FB | 	rdlong	arg03, fp
26370     40 4E 05 F1 | 	add	fp, #64
26374     A7 16 62 FC | 	wrlong	arg03, fp
26378     08 4E 85 F1 | 	sub	fp, #8
2637c     A7 14 02 FB | 	rdlong	arg02, fp
26380     0A 13 02 F6 | 	mov	arg01, arg02
26384     54 14 06 F1 | 	add	arg02, #84
26388     4C 4E 85 F1 | 	sub	fp, #76
2638c     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
26390     4C 4E 05 F1 | 	add	fp, #76
26394     A7 16 02 FB | 	rdlong	arg03, fp
26398     03 16 06 F1 | 	add	arg03, #3
2639c     0B 03 48 FC | 	wrbyte	#1, arg03
263a0     40 4E 85 F1 | 	sub	fp, #64
263a4     A7 12 02 F6 | 	mov	arg01, fp
263a8     0C 4E 85 F1 | 	sub	fp, #12
263ac     44 BA BF FD | 	call	#_fatfs_cc_dir_register
263b0     08 4E 05 F1 | 	add	fp, #8
263b4     A7 FA 61 FC | 	wrlong	result1, fp
263b8     08 4E 85 F1 | 	sub	fp, #8
263bc                 | LR__3940
263bc                 | LR__3941
263bc     08 4E 05 F1 | 	add	fp, #8
263c0     A7 FA 09 FB | 	rdlong	result1, fp wz
263c4     08 4E 85 F1 | 	sub	fp, #8
263c8     88 00 90 5D |  if_ne	jmp	#LR__3942
263cc     28 4E 05 F1 | 	add	fp, #40
263d0     A7 12 02 FB | 	rdlong	arg01, fp
263d4     16 12 06 F1 | 	add	arg01, #22
263d8     30 4E 05 F1 | 	add	fp, #48
263dc     A7 14 02 FB | 	rdlong	arg02, fp
263e0     09 15 62 FC | 	wrlong	arg02, arg01
263e4     0C 4E 85 F1 | 	sub	fp, #12
263e8     A7 12 02 FB | 	rdlong	arg01, fp
263ec     24 4E 85 F1 | 	sub	fp, #36
263f0     A7 14 02 FB | 	rdlong	arg02, fp
263f4     28 4E 05 F1 | 	add	fp, #40
263f8     A7 16 02 FB | 	rdlong	arg03, fp
263fc     50 4E 85 F1 | 	sub	fp, #80
26400     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
26404     28 4E 05 F1 | 	add	fp, #40
26408     A7 FA 01 FB | 	rdlong	result1, fp
2640c     0B FA 05 F1 | 	add	result1, #11
26410     FD 20 48 FC | 	wrbyte	#16, result1
26414     24 4E 05 F1 | 	add	fp, #36
26418     A7 FA 01 FB | 	rdlong	result1, fp
2641c     03 FA 05 F1 | 	add	result1, #3
26420     FD 02 48 FC | 	wrbyte	#1, result1
26424     44 4E 85 F1 | 	sub	fp, #68
26428     A7 FA 09 FB | 	rdlong	result1, fp wz
2642c     08 4E 85 F1 | 	sub	fp, #8
26430     3C 00 90 5D |  if_ne	jmp	#LR__3943
26434     4C 4E 05 F1 | 	add	fp, #76
26438     A7 12 02 FB | 	rdlong	arg01, fp
2643c     4C 4E 85 F1 | 	sub	fp, #76
26440     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
26444     08 4E 05 F1 | 	add	fp, #8
26448     A7 FA 61 FC | 	wrlong	result1, fp
2644c     08 4E 85 F1 | 	sub	fp, #8
26450     1C 00 90 FD | 	jmp	#LR__3943
26454                 | LR__3942
26454     3C 4E 05 F1 | 	add	fp, #60
26458     A7 12 02 F6 | 	mov	arg01, fp
2645c     14 4E 05 F1 | 	add	fp, #20
26460     A7 14 02 FB | 	rdlong	arg02, fp
26464     50 4E 85 F1 | 	sub	fp, #80
26468     00 16 06 F6 | 	mov	arg03, #0
2646c     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
26470                 | LR__3943
26470                 | LR__3944
26470                 | LR__3945
26470                 | ' 				remove_chain(&sobj, dcl, 0);
26470                 | ' 			}
26470                 | ' 		}
26470                 | ' 		;
26470                 | ' 	}
26470                 | ' 
26470                 | ' 	return res ;
26470     08 4E 05 F1 | 	add	fp, #8
26474     A7 FA 01 FB | 	rdlong	result1, fp
26478     08 4E 85 F1 | 	sub	fp, #8
2647c     A7 F0 03 F6 | 	mov	ptra, fp
26480     B2 00 A0 FD | 	call	#popregs_
26484                 | _fatfs_cc_f_mkdir_ret
26484     2D 00 64 FD | 	ret
26488                 | 
26488                 | _fatfs_cc_f_rename
26488     01 4A 05 F6 | 	mov	COUNT_, #1
2648c     A8 00 A0 FD | 	call	#pushregs_
26490     9C F0 07 F1 | 	add	ptra, #156
26494     04 4E 05 F1 | 	add	fp, #4
26498     A7 12 62 FC | 	wrlong	arg01, fp
2649c     04 4E 05 F1 | 	add	fp, #4
264a0     A7 14 62 FC | 	wrlong	arg02, fp
264a4     A7 12 02 F6 | 	mov	arg01, fp
264a8     08 4E 85 F1 | 	sub	fp, #8
264ac     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
264b0     04 4E 05 F1 | 	add	fp, #4
264b4     A7 12 02 F6 | 	mov	arg01, fp
264b8     6C 4E 05 F1 | 	add	fp, #108
264bc     A7 14 02 F6 | 	mov	arg02, fp
264c0     70 4E 85 F1 | 	sub	fp, #112
264c4     02 16 06 F6 | 	mov	arg03, #2
264c8     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
264cc     0C 4E 05 F1 | 	add	fp, #12
264d0     A7 FA 61 FC | 	wrlong	result1, fp
264d4     0C 4E 85 F1 | 	sub	fp, #12
264d8     00 FA 0D F2 | 	cmp	result1, #0 wz
264dc     44 03 90 5D |  if_ne	jmp	#LR__3963
264e0     70 4E 05 F1 | 	add	fp, #112
264e4     A7 16 02 FB | 	rdlong	arg03, fp
264e8     60 4E 85 F1 | 	sub	fp, #96
264ec     A7 16 62 FC | 	wrlong	arg03, fp
264f0     A7 12 02 F6 | 	mov	arg01, fp
264f4     0C 4E 85 F1 | 	sub	fp, #12
264f8     A7 14 02 FB | 	rdlong	arg02, fp
264fc     04 4E 85 F1 | 	sub	fp, #4
26500     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
26504     0C 4E 05 F1 | 	add	fp, #12
26508     A7 FA 61 FC | 	wrlong	result1, fp
2650c     00 FA 4D F2 | 	cmps	result1, #0 wz
26510     0C 4E 85 F1 | 	sub	fp, #12
26514     1C 00 90 5D |  if_ne	jmp	#LR__3950
26518     3B 4E 05 F1 | 	add	fp, #59
2651c     A7 FA C1 FA | 	rdbyte	result1, fp
26520     3B 4E 85 F1 | 	sub	fp, #59
26524     A0 FA CD F7 | 	test	result1, #160 wz
26528     0C 4E 05 51 |  if_ne	add	fp, #12
2652c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
26530     0C 4E 85 51 |  if_ne	sub	fp, #12
26534                 | LR__3950
26534     0C 4E 05 F1 | 	add	fp, #12
26538     A7 1E 0A FB | 	rdlong	local01, fp wz
2653c     0C 4E 85 F1 | 	sub	fp, #12
26540     E0 02 90 5D |  if_ne	jmp	#LR__3962
26544     74 4E 05 F1 | 	add	fp, #116
26548     A7 12 02 F6 | 	mov	arg01, fp
2654c     48 4E 85 F1 | 	sub	fp, #72
26550     A7 14 02 FB | 	rdlong	arg02, fp
26554     2C 4E 85 F1 | 	sub	fp, #44
26558     20 16 06 F6 | 	mov	arg03, #32
2655c     5C 2B BF FD | 	call	#__system____builtin_memmove
26560     40 4E 05 F1 | 	add	fp, #64
26564     A7 12 02 F6 | 	mov	arg01, fp
26568     30 4E 85 F1 | 	sub	fp, #48
2656c     A7 14 02 F6 | 	mov	arg02, fp
26570     10 4E 85 F1 | 	sub	fp, #16
26574     30 16 06 F6 | 	mov	arg03, #48
26578     40 2B BF FD | 	call	#__system____builtin_memmove
2657c     40 4E 05 F1 | 	add	fp, #64
26580     A7 12 02 F6 | 	mov	arg01, fp
26584     38 4E 85 F1 | 	sub	fp, #56
26588     A7 14 02 FB | 	rdlong	arg02, fp
2658c     08 4E 85 F1 | 	sub	fp, #8
26590     34 CA BF FD | 	call	#_fatfs_cc_follow_path
26594     0C 4E 05 F1 | 	add	fp, #12
26598     A7 FA 61 FC | 	wrlong	result1, fp
2659c     0C 4E 85 F1 | 	sub	fp, #12
265a0     00 FA 0D F2 | 	cmp	result1, #0 wz
265a4     4C 00 90 5D |  if_ne	jmp	#LR__3953
265a8     48 4E 05 F1 | 	add	fp, #72
265ac     A7 FA 01 FB | 	rdlong	result1, fp
265b0     30 4E 85 F1 | 	sub	fp, #48
265b4     A7 16 02 FB | 	rdlong	arg03, fp
265b8     18 4E 85 F1 | 	sub	fp, #24
265bc     0B FB 09 F2 | 	cmp	result1, arg03 wz
265c0     20 00 90 5D |  if_ne	jmp	#LR__3951
265c4     50 4E 05 F1 | 	add	fp, #80
265c8     A7 FA 01 FB | 	rdlong	result1, fp
265cc     30 4E 85 F1 | 	sub	fp, #48
265d0     A7 16 02 FB | 	rdlong	arg03, fp
265d4     20 4E 85 F1 | 	sub	fp, #32
265d8     0B FB 09 F2 | 	cmp	result1, arg03 wz
265dc     04 1E 06 A6 |  if_e	mov	local01, #4
265e0     04 00 90 AD |  if_e	jmp	#LR__3952
265e4                 | LR__3951
265e4     08 1E 06 F6 | 	mov	local01, #8
265e8                 | LR__3952
265e8     0C 4E 05 F1 | 	add	fp, #12
265ec     A7 1E 62 FC | 	wrlong	local01, fp
265f0     0C 4E 85 F1 | 	sub	fp, #12
265f4                 | LR__3953
265f4     0C 4E 05 F1 | 	add	fp, #12
265f8     A7 1E 02 FB | 	rdlong	local01, fp
265fc     0C 4E 85 F1 | 	sub	fp, #12
26600     04 1E 0E F2 | 	cmp	local01, #4 wz
26604     CC 01 90 5D |  if_ne	jmp	#LR__3959
26608     40 4E 05 F1 | 	add	fp, #64
2660c     A7 12 02 F6 | 	mov	arg01, fp
26610     40 4E 85 F1 | 	sub	fp, #64
26614     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
26618     0C 4E 05 F1 | 	add	fp, #12
2661c     A7 FA 61 FC | 	wrlong	result1, fp
26620     0C 4E 85 F1 | 	sub	fp, #12
26624     00 FA 0D F2 | 	cmp	result1, #0 wz
26628     A8 01 90 5D |  if_ne	jmp	#LR__3958
2662c     5C 4E 05 F1 | 	add	fp, #92
26630     A7 12 02 FB | 	rdlong	arg01, fp
26634     38 4E 05 F1 | 	add	fp, #56
26638     A7 12 62 FC | 	wrlong	arg01, fp
2663c     0D 12 06 F1 | 	add	arg01, #13
26640     20 4E 85 F1 | 	sub	fp, #32
26644     A7 14 02 F6 | 	mov	arg02, fp
26648     74 4E 85 F1 | 	sub	fp, #116
2664c     0D 14 06 F1 | 	add	arg02, #13
26650     13 16 06 F6 | 	mov	arg03, #19
26654     64 2A BF FD | 	call	#__system____builtin_memmove
26658     94 4E 05 F1 | 	add	fp, #148
2665c     A7 1E 02 FB | 	rdlong	local01, fp
26660     15 4E 85 F1 | 	sub	fp, #21
26664     A7 FA C1 FA | 	rdbyte	result1, fp
26668     0B 1E 06 F1 | 	add	local01, #11
2666c     0F FB 41 FC | 	wrbyte	result1, local01
26670     15 4E 05 F1 | 	add	fp, #21
26674     A7 1E 02 FB | 	rdlong	local01, fp
26678     94 4E 85 F1 | 	sub	fp, #148
2667c     0B 1E 06 F1 | 	add	local01, #11
26680     0F 1F C2 FA | 	rdbyte	local01, local01
26684     10 1E CE F7 | 	test	local01, #16 wz
26688     24 00 90 5D |  if_ne	jmp	#LR__3954
2668c     94 4E 05 F1 | 	add	fp, #148
26690     A7 FA 01 FB | 	rdlong	result1, fp
26694     FD 1E 02 F6 | 	mov	local01, result1
26698     94 4E 85 F1 | 	sub	fp, #148
2669c     0B FA 05 F1 | 	add	result1, #11
266a0     FD FA C1 FA | 	rdbyte	result1, result1
266a4     20 FA 45 F5 | 	or	result1, #32
266a8     0B 1E 06 F1 | 	add	local01, #11
266ac     0F FB 41 FC | 	wrbyte	result1, local01
266b0                 | LR__3954
266b0     70 4E 05 F1 | 	add	fp, #112
266b4     A7 1E 02 FB | 	rdlong	local01, fp
266b8     03 1E 06 F1 | 	add	local01, #3
266bc     0F 03 48 FC | 	wrbyte	#1, local01
266c0     24 4E 05 F1 | 	add	fp, #36
266c4     A7 1E 02 FB | 	rdlong	local01, fp
266c8     94 4E 85 F1 | 	sub	fp, #148
266cc     0B 1E 06 F1 | 	add	local01, #11
266d0     0F 1F C2 FA | 	rdbyte	local01, local01
266d4     10 1E CE F7 | 	test	local01, #16 wz
266d8     F8 00 90 AD |  if_e	jmp	#LR__3957
266dc     18 4E 05 F1 | 	add	fp, #24
266e0     A7 16 02 FB | 	rdlong	arg03, fp
266e4     30 4E 05 F1 | 	add	fp, #48
266e8     A7 1E 02 FB | 	rdlong	local01, fp
266ec     48 4E 85 F1 | 	sub	fp, #72
266f0     0F 17 0A F2 | 	cmp	arg03, local01 wz
266f4     DC 00 90 AD |  if_e	jmp	#LR__3957
266f8     70 4E 05 F1 | 	add	fp, #112
266fc     A7 12 02 FB | 	rdlong	arg01, fp
26700     09 1F 02 F6 | 	mov	local01, arg01
26704     24 4E 05 F1 | 	add	fp, #36
26708     A7 14 02 FB | 	rdlong	arg02, fp
2670c     94 4E 85 F1 | 	sub	fp, #148
26710     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
26714     FD 14 02 F6 | 	mov	arg02, result1
26718     0F 13 02 F6 | 	mov	arg01, local01
2671c     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
26720     98 4E 05 F1 | 	add	fp, #152
26724     A7 FA 61 FC | 	wrlong	result1, fp
26728     00 FA 4D F2 | 	cmps	result1, #0 wz
2672c     98 4E 85 F1 | 	sub	fp, #152
26730     0C 4E 05 A1 |  if_e	add	fp, #12
26734     A7 04 68 AC |  if_e	wrlong	#2, fp
26738     0C 4E 85 A1 |  if_e	sub	fp, #12
2673c     94 00 90 AD |  if_e	jmp	#LR__3956
26740     70 4E 05 F1 | 	add	fp, #112
26744     A7 12 02 FB | 	rdlong	arg01, fp
26748     28 4E 05 F1 | 	add	fp, #40
2674c     A7 14 02 FB | 	rdlong	arg02, fp
26750     98 4E 85 F1 | 	sub	fp, #152
26754     4C A0 BF FD | 	call	#_fatfs_cc_move_window
26758     0C 4E 05 F1 | 	add	fp, #12
2675c     A7 FA 61 FC | 	wrlong	result1, fp
26760     64 4E 05 F1 | 	add	fp, #100
26764     A7 1E 02 FB | 	rdlong	local01, fp
26768     54 1E 06 F1 | 	add	local01, #84
2676c     24 4E 05 F1 | 	add	fp, #36
26770     A7 1E 62 FC | 	wrlong	local01, fp
26774     88 4E 85 F1 | 	sub	fp, #136
26778     A7 1E 0A FB | 	rdlong	local01, fp wz
2677c     0C 4E 85 F1 | 	sub	fp, #12
26780     50 00 90 5D |  if_ne	jmp	#LR__3955
26784     94 4E 05 F1 | 	add	fp, #148
26788     A7 1E 02 FB | 	rdlong	local01, fp
2678c     94 4E 85 F1 | 	sub	fp, #148
26790     01 1E 06 F1 | 	add	local01, #1
26794     0F 1F C2 FA | 	rdbyte	local01, local01
26798     2E 1E 0E F2 | 	cmp	local01, #46 wz
2679c     34 00 90 5D |  if_ne	jmp	#LR__3955
267a0     70 4E 05 F1 | 	add	fp, #112
267a4     A7 12 02 FB | 	rdlong	arg01, fp
267a8     24 4E 05 F1 | 	add	fp, #36
267ac     A7 14 02 FB | 	rdlong	arg02, fp
267b0     4C 4E 85 F1 | 	sub	fp, #76
267b4     A7 16 02 FB | 	rdlong	arg03, fp
267b8     48 4E 85 F1 | 	sub	fp, #72
267bc     50 AD BF FD | 	call	#_fatfs_cc_st_clust
267c0     70 4E 05 F1 | 	add	fp, #112
267c4     A7 1E 02 FB | 	rdlong	local01, fp
267c8     70 4E 85 F1 | 	sub	fp, #112
267cc     03 1E 06 F1 | 	add	local01, #3
267d0     0F 03 48 FC | 	wrbyte	#1, local01
267d4                 | LR__3955
267d4                 | LR__3956
267d4                 | LR__3957
267d4                 | LR__3958
267d4                 | LR__3959
267d4     0C 4E 05 F1 | 	add	fp, #12
267d8     A7 1E 0A FB | 	rdlong	local01, fp wz
267dc     0C 4E 85 F1 | 	sub	fp, #12
267e0     40 00 90 5D |  if_ne	jmp	#LR__3961
267e4     10 4E 05 F1 | 	add	fp, #16
267e8     A7 12 02 F6 | 	mov	arg01, fp
267ec     10 4E 85 F1 | 	sub	fp, #16
267f0     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
267f4     0C 4E 05 F1 | 	add	fp, #12
267f8     A7 FA 61 FC | 	wrlong	result1, fp
267fc     0C 4E 85 F1 | 	sub	fp, #12
26800     00 FA 0D F2 | 	cmp	result1, #0 wz
26804     1C 00 90 5D |  if_ne	jmp	#LR__3960
26808     70 4E 05 F1 | 	add	fp, #112
2680c     A7 12 02 FB | 	rdlong	arg01, fp
26810     70 4E 85 F1 | 	sub	fp, #112
26814     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
26818     0C 4E 05 F1 | 	add	fp, #12
2681c     A7 FA 61 FC | 	wrlong	result1, fp
26820     0C 4E 85 F1 | 	sub	fp, #12
26824                 | LR__3960
26824                 | LR__3961
26824                 | LR__3962
26824                 | LR__3963
26824                 | ' 					res = sync_fs(fs);
26824                 | ' 				}
26824                 | ' 			}
26824                 | ' 
26824                 | ' 		}
26824                 | ' 		;
26824                 | ' 	}
26824                 | ' 
26824                 | ' 	return res ;
26824     0C 4E 05 F1 | 	add	fp, #12
26828     A7 FA 01 FB | 	rdlong	result1, fp
2682c     0C 4E 85 F1 | 	sub	fp, #12
26830     A7 F0 03 F6 | 	mov	ptra, fp
26834     B2 00 A0 FD | 	call	#popregs_
26838                 | _fatfs_cc_f_rename_ret
26838     2D 00 64 FD | 	ret
2683c                 | 
2683c                 | _fatfs_cc_time
2683c     00 4A 05 F6 | 	mov	COUNT_, #0
26840     A8 00 A0 FD | 	call	#pushregs_
26844     14 F0 07 F1 | 	add	ptra, #20
26848     04 4E 05 F1 | 	add	fp, #4
2684c     A7 12 62 FC | 	wrlong	arg01, fp
26850     04 4E 05 F1 | 	add	fp, #4
26854     A7 12 02 F6 | 	mov	arg01, fp
26858     08 4E 85 F1 | 	sub	fp, #8
2685c     00 14 06 F6 | 	mov	arg02, #0
26860     F8 17 B0 FD | 	call	#_fatfs_cc_gettimeofday
26864     08 4E 05 F1 | 	add	fp, #8
26868     A7 FA 01 FB | 	rdlong	result1, fp
2686c     08 4E 05 F1 | 	add	fp, #8
26870     A7 FA 61 FC | 	wrlong	result1, fp
26874     0C 4E 85 F1 | 	sub	fp, #12
26878     A7 FA 09 FB | 	rdlong	result1, fp wz
2687c     04 4E 85 F1 | 	sub	fp, #4
26880     18 00 90 AD |  if_e	jmp	#LR__3970
26884     04 4E 05 F1 | 	add	fp, #4
26888     A7 FA 01 FB | 	rdlong	result1, fp
2688c     0C 4E 05 F1 | 	add	fp, #12
26890     A7 14 02 FB | 	rdlong	arg02, fp
26894     10 4E 85 F1 | 	sub	fp, #16
26898     FD 14 62 FC | 	wrlong	arg02, result1
2689c                 | LR__3970
2689c                 | '         *tp = now;
2689c                 | '     return now;
2689c     10 4E 05 F1 | 	add	fp, #16
268a0     A7 FA 01 FB | 	rdlong	result1, fp
268a4     10 4E 85 F1 | 	sub	fp, #16
268a8     A7 F0 03 F6 | 	mov	ptra, fp
268ac     B2 00 A0 FD | 	call	#popregs_
268b0                 | _fatfs_cc_time_ret
268b0     2D 00 64 FD | 	ret
268b4                 | 
268b4                 | _fatfs_cc_mktime
268b4     06 4A 05 F6 | 	mov	COUNT_, #6
268b8     A8 00 A0 FD | 	call	#pushregs_
268bc     09 1F 02 F6 | 	mov	local01, arg01
268c0     14 1E 06 F1 | 	add	local01, #20
268c4     0F 13 02 FB | 	rdlong	arg01, local01
268c8     14 1E 86 F1 | 	sub	local01, #20
268cc     46 12 56 F2 | 	cmps	arg01, #70 wc
268d0                 | '                 return (time_t) -1;
268d0     01 FA 65 C6 |  if_b	neg	result1, #1
268d4     7C 01 90 CD |  if_b	jmp	#LR__3984
268d8     03 00 00 FF 
268dc     6C 21 06 F6 | 	mov	local02, ##1900
268e0     14 1E 06 F1 | 	add	local01, #20
268e4     0F FB 01 FB | 	rdlong	result1, local01
268e8     FD 20 02 F1 | 	add	local02, result1
268ec     08 1E 86 F1 | 	sub	local01, #8
268f0     0F 23 02 FB | 	rdlong	local03, local01
268f4     01 22 86 F1 | 	sub	local03, #1
268f8     04 1E 06 F1 | 	add	local01, #4
268fc     0F 13 02 FB | 	rdlong	arg01, local01
26900     10 1E 86 F1 | 	sub	local01, #16
26904     02 12 66 F0 | 	shl	arg01, #2
26908     02 00 00 FF 
2690c     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
26910     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
26914     09 FB 01 FB | 	rdlong	result1, arg01
26918     FD 22 02 F1 | 	add	local03, result1
2691c     10 13 02 F6 | 	mov	arg01, local02
26920     02 00 00 FF 
26924     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
26928     D8 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2692c     00 FA 0D F2 | 	cmp	result1, #0 wz
26930     1C 00 90 AD |  if_e	jmp	#LR__3980
26934     00 24 06 F6 | 	mov	local04, #0
26938     10 1E 06 F1 | 	add	local01, #16
2693c     0F FB 01 FB | 	rdlong	result1, local01
26940     10 1E 86 F1 | 	sub	local01, #16
26944     02 FA 55 F2 | 	cmps	result1, #2 wc
26948     01 24 06 36 |  if_ae	mov	local04, #1
2694c     04 00 90 FD | 	jmp	#LR__3981
26950                 | LR__3980
26950     00 24 06 F6 | 	mov	local04, #0
26954                 | LR__3981
26954     04 1E 06 F1 | 	add	local01, #4
26958     0F FB 01 FB | 	rdlong	result1, local01
2695c     04 1E 86 F1 | 	sub	local01, #4
26960     0F 27 02 FB | 	rdlong	local05, local01
26964     08 1E 06 F1 | 	add	local01, #8
26968     0F 13 02 FB | 	rdlong	arg01, local01
2696c     07 00 00 FF 
26970     10 12 06 FD | 	qmul	arg01, ##3600
26974     12 23 02 F1 | 	add	local03, local04
26978     FD 24 02 F6 | 	mov	local04, result1
2697c     04 24 66 F0 | 	shl	local04, #4
26980     FD 24 82 F1 | 	sub	local04, result1
26984     02 24 66 F0 | 	shl	local04, #2
26988     12 27 02 F1 | 	add	local05, local04
2698c     08 1E 86 F1 | 	sub	local01, #8
26990     18 24 62 FD | 	getqx	local04
26994     A8 00 00 FF 
26998     80 23 06 FD | 	qmul	local03, ##86400
2699c     12 27 02 F1 | 	add	local05, local04
269a0     10 23 02 F6 | 	mov	local03, local02
269a4     03 00 00 FF 
269a8     B2 23 86 F1 | 	sub	local03, ##1970
269ac     18 24 62 FD | 	getqx	local04
269b0     99 F0 00 FF 
269b4     80 23 06 FD | 	qmul	local03, ##31536000
269b8     12 27 02 F1 | 	add	local05, local04
269bc     10 23 02 F6 | 	mov	local03, local02
269c0     03 00 00 FF 
269c4     B1 23 86 F1 | 	sub	local03, ##1969
269c8     11 29 52 F6 | 	abs	local06, local03 wc
269cc     02 28 46 F0 | 	shr	local06, #2
269d0     14 29 82 F6 | 	negc	local06, local06
269d4     03 00 00 FF 
269d8     D1 21 56 F2 | 	cmps	local02, ##2001 wc
269dc     18 24 62 FD | 	getqx	local04
269e0     12 27 02 F1 | 	add	local05, local04
269e4     18 00 90 CD |  if_b	jmp	#LR__3982
269e8     03 00 00 FF 
269ec     D0 21 86 F1 | 	sub	local02, ##2000
269f0     10 25 52 F6 | 	abs	local04, local02 wc
269f4     64 24 16 FD | 	qdiv	local04, #100
269f8     18 24 62 FD | 	getqx	local04
269fc     12 29 A2 F3 | 	sumnc	local06, local04
26a00                 | LR__3982
26a00     A8 00 00 FF 
26a04     80 29 06 FD | 	qmul	local06, ##86400
26a08     18 28 62 FD | 	getqx	local06
26a0c     14 27 02 F1 | 	add	local05, local06
26a10     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
26a14     02 00 00 FF 
26a18     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
26a1c     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
26a20     14 27 02 F1 | 	add	local05, local06
26a24     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
26a28     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
26a2c     02 00 00 FF 
26a30     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
26a34     01 22 0E F2 | 	cmp	local03, #1 wz
26a38     14 00 90 5D |  if_ne	jmp	#LR__3983
26a3c     0F 13 02 F6 | 	mov	arg01, local01
26a40     C4 19 B0 FD | 	call	#_fatfs_cc___indst
26a44     00 FA 0D F2 | 	cmp	result1, #0 wz
26a48     07 00 00 5F 
26a4c     10 26 86 51 |  if_ne	sub	local05, ##3600
26a50                 | LR__3983
26a50                 | '                 s -=  (3600L) ;
26a50                 | ' 
26a50                 | '         return s;
26a50     13 FB 01 F6 | 	mov	result1, local05
26a54                 | LR__3984
26a54     A7 F0 03 F6 | 	mov	ptra, fp
26a58     B2 00 A0 FD | 	call	#popregs_
26a5c                 | _fatfs_cc_mktime_ret
26a5c     2D 00 64 FD | 	ret
26a60                 | 
26a60                 | _fatfs_cc__gmtime_r
26a60     03 4A 05 F6 | 	mov	COUNT_, #3
26a64     A8 00 A0 FD | 	call	#pushregs_
26a68     09 1F 02 FB | 	rdlong	local01, arg01
26a6c     A8 00 00 FF 
26a70     80 1F 16 FD | 	qdiv	local01, ##86400
26a74     18 FA 61 FD | 	getqx	result1
26a78     04 FA 05 F1 | 	add	result1, #4
26a7c     07 FA 15 FD | 	qdiv	result1, #7
26a80     18 14 06 F1 | 	add	arg02, #24
26a84     D1 7F 27 FF 
26a88     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
26a8c     D1 7F 27 3F 
26a90     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
26a94     03 00 00 3F 
26a98     DC 21 06 36 |  if_ae	mov	local02, ##2012
26a9c     03 00 00 CF 
26aa0     B2 21 06 C6 |  if_b	mov	local02, ##1970
26aa4                 | ' 	  year = 1970;
26aa4                 | ' 	}
26aa4                 | ' 
26aa4                 | ' 	for(;;) {
26aa4     19 FA 61 FD | 	getqy	result1
26aa8     0A FB 61 FC | 	wrlong	result1, arg02
26aac     18 14 86 F1 | 	sub	arg02, #24
26ab0                 | LR__3990
26ab0     10 13 02 F6 | 	mov	arg01, local02
26ab4     4C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
26ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
26abc     42 F1 00 5F 
26ac0     00 23 06 56 |  if_ne	mov	local03, ##31622400
26ac4     99 F0 00 AF 
26ac8     80 23 06 A6 |  if_e	mov	local03, ##31536000
26acc     11 1F 12 F2 | 	cmp	local01, local03 wc
26ad0                 | ' 	    break;
26ad0     01 20 06 31 |  if_ae	add	local02, #1
26ad4     11 1F 82 31 |  if_ae	sub	local01, local03
26ad8     D4 FF 9F 3D |  if_ae	jmp	#LR__3990
26adc     A8 00 00 FF 
26ae0     80 1F 16 FD | 	qdiv	local01, ##86400
26ae4     10 23 02 F6 | 	mov	local03, local02
26ae8     03 00 00 FF 
26aec     6C 23 86 F1 | 	sub	local03, ##1900
26af0     14 14 06 F1 | 	add	arg02, #20
26af4     0A 23 62 FC | 	wrlong	local03, arg02
26af8     08 14 06 F1 | 	add	arg02, #8
26afc     10 13 02 F6 | 	mov	arg01, local02
26b00     18 20 62 FD | 	getqx	local02
26b04     0A 21 62 FC | 	wrlong	local02, arg02
26b08     1C 14 86 F1 | 	sub	arg02, #28
26b0c     F4 15 B0 FD | 	call	#_fatfs_cc__is_leap_year
26b10     00 FA 0D F2 | 	cmp	result1, #0 wz
26b14     1D 22 06 56 |  if_ne	mov	local03, #29
26b18     1C 22 06 A6 |  if_e	mov	local03, #28
26b1c     02 00 00 FF 
26b20     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
26b24     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
26b28     02 00 00 FF 
26b2c     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
26b30                 | ' 
26b30                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
26b30                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
26b30     00 12 06 F6 | 	mov	arg01, #0
26b34     97 2A 48 FB | 	callpa	#(@LR__3992-@LR__3991)>>2,fcache_load_ptr_
26b38                 | LR__3991
26b38     09 23 02 F6 | 	mov	local03, arg01
26b3c     02 22 66 F0 | 	shl	local03, #2
26b40     02 00 00 FF 
26b44     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
26b48     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
26b4c     11 23 02 FB | 	rdlong	local03, local03
26b50     11 21 52 F2 | 	cmps	local02, local03 wc
26b54     02 00 00 FF 
26b58     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
26b5c     2C 00 90 CD |  if_b	jmp	#LR__3993
26b60     09 23 02 F6 | 	mov	local03, arg01
26b64     02 22 66 F0 | 	shl	local03, #2
26b68     02 00 00 FF 
26b6c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
26b70     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
26b74     11 23 02 FB | 	rdlong	local03, local03
26b78     11 21 82 F1 | 	sub	local02, local03
26b7c     01 12 06 F1 | 	add	arg01, #1
26b80     02 00 00 FF 
26b84     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
26b88     AC FF 9F FD | 	jmp	#LR__3991
26b8c                 | LR__3992
26b8c                 | LR__3993
26b8c     A8 00 00 FF 
26b90     80 1F 16 FD | 	qdiv	local01, ##86400
26b94     10 14 06 F1 | 	add	arg02, #16
26b98     0A 13 62 FC | 	wrlong	arg01, arg02
26b9c     01 20 06 F1 | 	add	local02, #1
26ba0     04 14 86 F1 | 	sub	arg02, #4
26ba4     0A 21 62 FC | 	wrlong	local02, arg02
26ba8     19 1E 62 FD | 	getqy	local01
26bac     07 00 00 FF 
26bb0     10 1E 16 FD | 	qdiv	local01, ##3600
26bb4     18 22 62 FD | 	getqx	local03
26bb8     07 00 00 FF 
26bbc     10 1E 16 FD | 	qdiv	local01, ##3600
26bc0     04 14 86 F1 | 	sub	arg02, #4
26bc4     0A 23 62 FC | 	wrlong	local03, arg02
26bc8     19 1E 62 FD | 	getqy	local01
26bcc     3C 1E 16 FD | 	qdiv	local01, #60
26bd0     18 22 62 FD | 	getqx	local03
26bd4     3C 1E 16 FD | 	qdiv	local01, #60
26bd8     04 14 86 F1 | 	sub	arg02, #4
26bdc     0A 23 62 FC | 	wrlong	local03, arg02
26be0     04 14 86 F1 | 	sub	arg02, #4
26be4                 | '         stm->tm_isdst = 0;
26be4                 | ' 
26be4                 | ' ;
26be4                 | '         return stm;
26be4     0A FB 01 F6 | 	mov	result1, arg02
26be8     19 22 62 FD | 	getqy	local03
26bec     0A 23 62 FC | 	wrlong	local03, arg02
26bf0     20 14 06 F1 | 	add	arg02, #32
26bf4     0A 01 68 FC | 	wrlong	#0, arg02
26bf8     A7 F0 03 F6 | 	mov	ptra, fp
26bfc     B2 00 A0 FD | 	call	#popregs_
26c00                 | _fatfs_cc__gmtime_r_ret
26c00     2D 00 64 FD | 	ret
26c04                 | 
26c04                 | _fatfs_cc__tzset
26c04     43 01 00 FF 
26c08     31 13 06 F6 | 	mov	arg01, ##@LR__4305
26c0c     34 00 B0 FD | 	call	#_fatfs_cc_getenv
26c10     FD 12 02 F6 | 	mov	arg01, result1
26c14     02 00 00 FF 
26c18     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
26c1c     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
26c20     02 00 00 FF 
26c24     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
26c28     28 15 B0 FD | 	call	#_fatfs_cc___tzoffset
26c2c     02 00 00 FF 
26c30     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
26c34     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
26c38     02 00 00 FF 
26c3c     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
26c40                 | _fatfs_cc__tzset_ret
26c40     2D 00 64 FD | 	ret
26c44                 | 
26c44                 | _fatfs_cc_getenv
26c44     06 4A 05 F6 | 	mov	COUNT_, #6
26c48     A8 00 A0 FD | 	call	#pushregs_
26c4c     09 1F 02 F6 | 	mov	local01, arg01
26c50     09 21 02 F6 | 	mov	local02, arg01
26c54     97 06 48 FB | 	callpa	#(@LR__4001-@LR__4000)>>2,fcache_load_ptr_
26c58                 | LR__4000
26c58     10 FB C9 FA | 	rdbyte	result1, local02 wz
26c5c     01 20 06 51 |  if_ne	add	local02, #1
26c60     F4 FF 9F 5D |  if_ne	jmp	#LR__4000
26c64                 | LR__4001
26c64     09 21 82 F1 | 	sub	local02, arg01
26c68     10 FB 01 F6 | 	mov	result1, local02
26c6c     02 00 00 FF 
26c70     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
26c74     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
26c78     02 00 00 FF 
26c7c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
26c80                 | '             return 0;
26c80     00 FA 05 A6 |  if_e	mov	result1, #0
26c84     5C 00 90 AD |  if_e	jmp	#LR__4004
26c88                 | ' 
26c88                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
26c88     02 00 00 FF 
26c8c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
26c90     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
26c94     02 00 00 FF 
26c98     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
26c9c                 | LR__4002
26c9c     11 25 0A FB | 	rdlong	local04, local03 wz
26ca0     3C 00 90 AD |  if_e	jmp	#LR__4003
26ca4     12 13 02 F6 | 	mov	arg01, local04
26ca8     0F 15 02 F6 | 	mov	arg02, local01
26cac     10 17 02 F6 | 	mov	arg03, local02
26cb0     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
26cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
26cb8     10 27 02 A6 |  if_e	mov	local05, local02
26cbc     12 27 02 A1 |  if_e	add	local05, local04
26cc0     13 29 C2 AA |  if_e	rdbyte	local06, local05
26cc4     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
26cc8                 | ' 			return name+len+1;
26cc8     10 25 02 A1 |  if_e	add	local04, local02
26ccc     01 24 06 A1 |  if_e	add	local04, #1
26cd0     12 FB 01 A6 |  if_e	mov	result1, local04
26cd4     0C 00 90 AD |  if_e	jmp	#LR__4004
26cd8     04 22 06 F1 | 	add	local03, #4
26cdc     BC FF 9F FD | 	jmp	#LR__4002
26ce0                 | LR__4003
26ce0                 | ' 	}
26ce0                 | ' 	return 0;
26ce0     00 FA 05 F6 | 	mov	result1, #0
26ce4                 | LR__4004
26ce4     A7 F0 03 F6 | 	mov	ptra, fp
26ce8     B2 00 A0 FD | 	call	#popregs_
26cec                 | _fatfs_cc_getenv_ret
26cec     2D 00 64 FD | 	ret
26cf0                 | 
26cf0                 | _fatfs_cc__get_fattime
26cf0     00 4A 05 F6 | 	mov	COUNT_, #0
26cf4     A8 00 A0 FD | 	call	#pushregs_
26cf8     34 F0 07 F1 | 	add	ptra, #52
26cfc     00 12 06 F6 | 	mov	arg01, #0
26d00     38 FB BF FD | 	call	#_fatfs_cc_time
26d04     04 4E 05 F1 | 	add	fp, #4
26d08     A7 FA 61 FC | 	wrlong	result1, fp
26d0c     A7 12 02 F6 | 	mov	arg01, fp
26d10     0C 4E 05 F1 | 	add	fp, #12
26d14     A7 14 02 F6 | 	mov	arg02, fp
26d18     10 4E 85 F1 | 	sub	fp, #16
26d1c     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
26d20     24 4E 05 F1 | 	add	fp, #36
26d24     A7 14 02 FB | 	rdlong	arg02, fp
26d28     50 14 86 F1 | 	sub	arg02, #80
26d2c     09 14 66 F0 | 	shl	arg02, #9
26d30     04 4E 85 F1 | 	sub	fp, #4
26d34     A7 FA 01 FB | 	rdlong	result1, fp
26d38     01 FA 05 F1 | 	add	result1, #1
26d3c     05 FA 65 F0 | 	shl	result1, #5
26d40     FD 14 42 F5 | 	or	arg02, result1
26d44     04 4E 85 F1 | 	sub	fp, #4
26d48     A7 FA 01 FB | 	rdlong	result1, fp
26d4c     FD 14 42 F5 | 	or	arg02, result1
26d50     14 4E 85 F1 | 	sub	fp, #20
26d54     A7 14 62 FC | 	wrlong	arg02, fp
26d58     10 4E 05 F1 | 	add	fp, #16
26d5c     A7 14 02 FB | 	rdlong	arg02, fp
26d60     0B 14 66 F0 | 	shl	arg02, #11
26d64     04 4E 85 F1 | 	sub	fp, #4
26d68     A7 FA 01 FB | 	rdlong	result1, fp
26d6c     05 FA 65 F0 | 	shl	result1, #5
26d70     FD 14 42 F5 | 	or	arg02, result1
26d74     04 4E 85 F1 | 	sub	fp, #4
26d78     A7 FA 01 FB | 	rdlong	result1, fp
26d7c     FD 14 42 F5 | 	or	arg02, result1
26d80     04 4E 85 F1 | 	sub	fp, #4
26d84     A7 14 62 FC | 	wrlong	arg02, fp
26d88                 | ' 
26d88                 | '     now = time(0);
26d88                 | '     _gmtime_r (&now, &date);
26d88                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
26d88                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
26d88                 | '     return (ffdate << 16) | fftime;
26d88     04 4E 85 F1 | 	sub	fp, #4
26d8c     A7 FA 01 FB | 	rdlong	result1, fp
26d90     10 FA 65 F0 | 	shl	result1, #16
26d94     08 4E 85 F1 | 	sub	fp, #8
26d98     0A FB 41 F5 | 	or	result1, arg02
26d9c     A7 F0 03 F6 | 	mov	ptra, fp
26da0     B2 00 A0 FD | 	call	#popregs_
26da4                 | _fatfs_cc__get_fattime_ret
26da4     2D 00 64 FD | 	ret
26da8                 | 
26da8                 | _fatfs_cc_unixtime_0845
26da8     00 4A 05 F6 | 	mov	COUNT_, #0
26dac     A8 00 A0 FD | 	call	#pushregs_
26db0     34 F0 07 F1 | 	add	ptra, #52
26db4     04 4E 05 F1 | 	add	fp, #4
26db8     A7 12 62 FC | 	wrlong	arg01, fp
26dbc     04 4E 05 F1 | 	add	fp, #4
26dc0     A7 14 62 FC | 	wrlong	arg02, fp
26dc4     04 4E 85 F1 | 	sub	fp, #4
26dc8     A7 14 02 FB | 	rdlong	arg02, fp
26dcc     09 14 46 F0 | 	shr	arg02, #9
26dd0     7F 14 06 F5 | 	and	arg02, #127
26dd4     50 FA 05 F6 | 	mov	result1, #80
26dd8     0A FB 01 F1 | 	add	result1, arg02
26ddc     20 4E 05 F1 | 	add	fp, #32
26de0     A7 FA 61 FC | 	wrlong	result1, fp
26de4     20 4E 85 F1 | 	sub	fp, #32
26de8     A7 FA 01 FB | 	rdlong	result1, fp
26dec     05 FA 45 F0 | 	shr	result1, #5
26df0     FD FA 41 F8 | 	getnib	result1, result1, #0
26df4     01 FA 85 F1 | 	sub	result1, #1
26df8     1C 4E 05 F1 | 	add	fp, #28
26dfc     A7 FA 61 FC | 	wrlong	result1, fp
26e00     1C 4E 85 F1 | 	sub	fp, #28
26e04     A7 FA 01 FB | 	rdlong	result1, fp
26e08     1F FA 05 F5 | 	and	result1, #31
26e0c     18 4E 05 F1 | 	add	fp, #24
26e10     A7 FA 61 FC | 	wrlong	result1, fp
26e14     14 4E 85 F1 | 	sub	fp, #20
26e18     A7 FA 01 FB | 	rdlong	result1, fp
26e1c     0B FA 45 F0 | 	shr	result1, #11
26e20     1F FA 05 F5 | 	and	result1, #31
26e24     10 4E 05 F1 | 	add	fp, #16
26e28     A7 FA 61 FC | 	wrlong	result1, fp
26e2c     10 4E 85 F1 | 	sub	fp, #16
26e30     A7 FA 01 FB | 	rdlong	result1, fp
26e34     05 FA 45 F0 | 	shr	result1, #5
26e38     3F FA 05 F5 | 	and	result1, #63
26e3c     0C 4E 05 F1 | 	add	fp, #12
26e40     A7 FA 61 FC | 	wrlong	result1, fp
26e44     0C 4E 85 F1 | 	sub	fp, #12
26e48     A7 14 02 FB | 	rdlong	arg02, fp
26e4c     1F 14 06 F5 | 	and	arg02, #31
26e50     01 14 66 F0 | 	shl	arg02, #1
26e54     08 4E 05 F1 | 	add	fp, #8
26e58     A7 14 62 FC | 	wrlong	arg02, fp
26e5c     A7 12 02 F6 | 	mov	arg01, fp
26e60     10 4E 85 F1 | 	sub	fp, #16
26e64     4C FA BF FD | 	call	#_fatfs_cc_mktime
26e68     0C 4E 05 F1 | 	add	fp, #12
26e6c     A7 FA 61 FC | 	wrlong	result1, fp
26e70                 | ' 
26e70                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
26e70                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
26e70                 | '     date.tm_mday = (dosdate & 0x1f);
26e70                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
26e70                 | '     date.tm_min = (dostime >> 5) & 0x3f;
26e70                 | '     date.tm_sec = (dostime & 0x1f) << 1;
26e70                 | ' 
26e70                 | '     t = mktime(&date);
26e70                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26e70                 | '     return t;
26e70     0C 4E 85 F1 | 	sub	fp, #12
26e74     A7 F0 03 F6 | 	mov	ptra, fp
26e78     B2 00 A0 FD | 	call	#popregs_
26e7c                 | _fatfs_cc_unixtime_0845_ret
26e7c     2D 00 64 FD | 	ret
26e80                 | 
26e80                 | _fatfs_cc__set_dos_error_0847
26e80     09 01 02 F6 | 	mov	_var01, arg01
26e84                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26e84                 | '     switch (derr) {
26e84     14 00 26 F3 | 	fle	_var01, #20
26e88     30 00 62 FD | 	jmprel	_var01
26e8c                 | LR__4010
26e8c     50 00 90 FD | 	jmp	#LR__4011
26e90     84 00 90 FD | 	jmp	#LR__4025
26e94     80 00 90 FD | 	jmp	#LR__4026
26e98     7C 00 90 FD | 	jmp	#LR__4027
26e9c     48 00 90 FD | 	jmp	#LR__4012
26ea0     44 00 90 FD | 	jmp	#LR__4013
26ea4     40 00 90 FD | 	jmp	#LR__4014
26ea8     44 00 90 FD | 	jmp	#LR__4015
26eac     48 00 90 FD | 	jmp	#LR__4017
26eb0     54 00 90 FD | 	jmp	#LR__4020
26eb4     38 00 90 FD | 	jmp	#LR__4016
26eb8     4C 00 90 FD | 	jmp	#LR__4021
26ebc     48 00 90 FD | 	jmp	#LR__4022
26ec0     44 00 90 FD | 	jmp	#LR__4023
26ec4     50 00 90 FD | 	jmp	#LR__4028
26ec8     4C 00 90 FD | 	jmp	#LR__4028
26ecc     48 00 90 FD | 	jmp	#LR__4028
26ed0     2C 00 90 FD | 	jmp	#LR__4018
26ed4     38 00 90 FD | 	jmp	#LR__4024
26ed8     2C 00 90 FD | 	jmp	#LR__4019
26edc     38 00 90 FD | 	jmp	#LR__4028
26ee0                 | LR__4011
26ee0     00 02 06 F6 | 	mov	_var02, #0
26ee4                 | '         r = 0;
26ee4                 | '         break;
26ee4     34 00 90 FD | 	jmp	#LR__4029
26ee8                 | LR__4012
26ee8                 | LR__4013
26ee8                 | LR__4014
26ee8     04 02 06 F6 | 	mov	_var02, #4
26eec                 | '         r =  4 ;
26eec                 | '         break;
26eec     2C 00 90 FD | 	jmp	#LR__4029
26ef0                 | LR__4015
26ef0                 | LR__4016
26ef0     06 02 06 F6 | 	mov	_var02, #6
26ef4                 | '         r =  6 ;
26ef4                 | '         break;
26ef4     24 00 90 FD | 	jmp	#LR__4029
26ef8                 | LR__4017
26ef8     09 02 06 F6 | 	mov	_var02, #9
26efc                 | '         r =  9 ;
26efc                 | '         break;
26efc     1C 00 90 FD | 	jmp	#LR__4029
26f00                 | LR__4018
26f00     07 02 06 F6 | 	mov	_var02, #7
26f04                 | '         r =  7 ;
26f04                 | '         break;
26f04     14 00 90 FD | 	jmp	#LR__4029
26f08                 | LR__4019
26f08                 | LR__4020
26f08                 | LR__4021
26f08                 | LR__4022
26f08                 | LR__4023
26f08     0A 02 06 F6 | 	mov	_var02, #10
26f0c                 | '         r =  10 ;
26f0c                 | '         break;
26f0c     0C 00 90 FD | 	jmp	#LR__4029
26f10                 | LR__4024
26f10     0B 02 06 F6 | 	mov	_var02, #11
26f14                 | '         r =  11 ;
26f14                 | '         break;
26f14     04 00 90 FD | 	jmp	#LR__4029
26f18                 | LR__4025
26f18                 | LR__4026
26f18                 | LR__4027
26f18                 | LR__4028
26f18     0C 02 06 F6 | 	mov	_var02, #12
26f1c                 | '         r =  12 ;
26f1c                 | '         break;
26f1c                 | LR__4029
26f1c                 | '     }
26f1c                 | '     return _seterror(r);
26f1c     00 02 4E F2 | 	cmps	_var02, #0 wz
26f20     20 E8 05 F1 | 	add	ptr___system__dat__, #32
26f24     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
26f28     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
26f2c     01 FA 65 56 |  if_ne	neg	result1, #1
26f30     00 FA 05 A6 |  if_e	mov	result1, #0
26f34                 | _fatfs_cc__set_dos_error_0847_ret
26f34     2D 00 64 FD | 	ret
26f38                 | 
26f38                 | _fatfs_cc_v_creat
26f38     04 4A 05 F6 | 	mov	COUNT_, #4
26f3c     A8 00 A0 FD | 	call	#pushregs_
26f40     09 1F 02 F6 | 	mov	local01, arg01
26f44     0A 21 02 F6 | 	mov	local02, arg02
26f48     03 00 00 FF 
26f4c     3C 12 06 F6 | 	mov	arg01, ##1596
26f50                 | '     return _gc_alloc(size);
26f50     10 14 06 F6 | 	mov	arg02, #16
26f54     2C 60 BF FD | 	call	#__system___gc_doalloc
26f58     FD 22 0A F6 | 	mov	local03, result1 wz
26f5c                 | '       return _seterror( 7 );
26f5c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26f60     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26f64     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26f68     01 FA 65 A6 |  if_e	neg	result1, #1
26f6c     58 00 90 AD |  if_e	jmp	#LR__4031
26f70     11 13 02 F6 | 	mov	arg01, local03
26f74     00 14 06 F6 | 	mov	arg02, #0
26f78     03 00 00 FF 
26f7c     3C 16 06 F6 | 	mov	arg03, ##1596
26f80     98 00 A0 FD | 	call	#\builtin_bytefill_
26f84     02 00 00 FF 
26f88     14 22 06 F1 | 	add	local03, ##1044
26f8c     11 13 02 F6 | 	mov	arg01, local03
26f90     02 00 00 FF 
26f94     14 22 86 F1 | 	sub	local03, ##1044
26f98     10 15 02 F6 | 	mov	arg02, local02
26f9c     07 16 06 F6 | 	mov	arg03, #7
26fa0     B4 CC BF FD | 	call	#_fatfs_cc_f_open
26fa4     FD 24 0A F6 | 	mov	local04, result1 wz
26fa8     14 00 90 AD |  if_e	jmp	#LR__4030
26fac     11 13 02 F6 | 	mov	arg01, local03
26fb0                 | '     return _gc_free(ptr);
26fb0     DC 60 BF FD | 	call	#__system___gc_free
26fb4                 | '     free(f);
26fb4                 | '     return _set_dos_error(r);
26fb4     12 13 02 F6 | 	mov	arg01, local04
26fb8     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0847
26fbc     08 00 90 FD | 	jmp	#LR__4031
26fc0                 | LR__4030
26fc0     0F 23 62 FC | 	wrlong	local03, local01
26fc4                 | '   }
26fc4                 | '   fil->vfsdata = f;
26fc4                 | '   return 0;
26fc4     00 FA 05 F6 | 	mov	result1, #0
26fc8                 | LR__4031
26fc8     A7 F0 03 F6 | 	mov	ptra, fp
26fcc     B2 00 A0 FD | 	call	#popregs_
26fd0                 | _fatfs_cc_v_creat_ret
26fd0     2D 00 64 FD | 	ret
26fd4                 | 
26fd4                 | _fatfs_cc_v_close
26fd4     02 4A 05 F6 | 	mov	COUNT_, #2
26fd8     A8 00 A0 FD | 	call	#pushregs_
26fdc     09 1F 02 FB | 	rdlong	local01, arg01
26fe0     02 00 00 FF 
26fe4     14 1E 06 F1 | 	add	local01, ##1044
26fe8     0F 13 02 F6 | 	mov	arg01, local01
26fec     02 00 00 FF 
26ff0     14 1E 86 F1 | 	sub	local01, ##1044
26ff4     DC E3 BF FD | 	call	#_fatfs_cc_f_close
26ff8     FD 20 02 F6 | 	mov	local02, result1
26ffc     0F 13 02 F6 | 	mov	arg01, local01
27000                 | '     return _gc_free(ptr);
27000     8C 60 BF FD | 	call	#__system___gc_free
27004                 | '     FAT_FIL *f = fil->vfsdata;
27004                 | '     r=f_close(&f->fil);
27004                 | '     free(f);
27004                 | '     return _set_dos_error(r);
27004     10 13 02 F6 | 	mov	arg01, local02
27008     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0847
2700c     A7 F0 03 F6 | 	mov	ptra, fp
27010     B2 00 A0 FD | 	call	#popregs_
27014                 | _fatfs_cc_v_close_ret
27014     2D 00 64 FD | 	ret
27018                 | 
27018                 | _fatfs_cc_v_opendir
27018     04 4A 05 F6 | 	mov	COUNT_, #4
2701c     A8 00 A0 FD | 	call	#pushregs_
27020     09 1F 02 F6 | 	mov	local01, arg01
27024     0A 21 02 F6 | 	mov	local02, arg02
27028     30 12 06 F6 | 	mov	arg01, #48
2702c                 | '     return _gc_alloc(size);
2702c     10 14 06 F6 | 	mov	arg02, #16
27030     50 5F BF FD | 	call	#__system___gc_doalloc
27034     FD 22 0A F6 | 	mov	local03, result1 wz
27038                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27038                 | '       return _seterror( 7 );
27038     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
2703c     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
27040     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27044     01 FA 65 A6 |  if_e	neg	result1, #1
27048     34 00 90 AD |  if_e	jmp	#LR__4041
2704c     10 15 02 F6 | 	mov	arg02, local02
27050     11 13 02 F6 | 	mov	arg01, local03
27054     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
27058     FD 24 0A F6 | 	mov	local04, result1 wz
2705c     14 00 90 AD |  if_e	jmp	#LR__4040
27060     11 13 02 F6 | 	mov	arg01, local03
27064                 | '     return _gc_free(ptr);
27064     28 60 BF FD | 	call	#__system___gc_free
27068                 | '         free(f);
27068                 | '         return _set_dos_error(r);
27068     12 13 02 F6 | 	mov	arg01, local04
2706c     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0847
27070     0C 00 90 FD | 	jmp	#LR__4041
27074                 | LR__4040
27074     04 1E 06 F1 | 	add	local01, #4
27078     0F 23 62 FC | 	wrlong	local03, local01
2707c                 | '     }
2707c                 | '     dir->vfsdata = f;
2707c                 | '     return 0;
2707c     00 FA 05 F6 | 	mov	result1, #0
27080                 | LR__4041
27080     A7 F0 03 F6 | 	mov	ptra, fp
27084     B2 00 A0 FD | 	call	#popregs_
27088                 | _fatfs_cc_v_opendir_ret
27088     2D 00 64 FD | 	ret
2708c                 | 
2708c                 | _fatfs_cc_v_closedir
2708c     02 4A 05 F6 | 	mov	COUNT_, #2
27090     A8 00 A0 FD | 	call	#pushregs_
27094     04 12 06 F1 | 	add	arg01, #4
27098     09 1F 02 FB | 	rdlong	local01, arg01
2709c     0F 13 02 F6 | 	mov	arg01, local01
270a0     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
270a4     FD 20 02 F6 | 	mov	local02, result1
270a8     0F 13 02 F6 | 	mov	arg01, local01
270ac                 | '     return _gc_free(ptr);
270ac     E0 5F BF FD | 	call	#__system___gc_free
270b0     00 20 0E F2 | 	cmp	local02, #0 wz
270b4     10 13 02 56 |  if_ne	mov	arg01, local02
270b8     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0847
270bc                 | '     return r;
270bc     10 FB 01 F6 | 	mov	result1, local02
270c0     A7 F0 03 F6 | 	mov	ptra, fp
270c4     B2 00 A0 FD | 	call	#popregs_
270c8                 | _fatfs_cc_v_closedir_ret
270c8     2D 00 64 FD | 	ret
270cc                 | 
270cc                 | _fatfs_cc_v_readdir
270cc     01 4A 05 F6 | 	mov	COUNT_, #1
270d0     A8 00 A0 FD | 	call	#pushregs_
270d4     2C F1 07 F1 | 	add	ptra, #300
270d8     04 4E 05 F1 | 	add	fp, #4
270dc     A7 12 62 FC | 	wrlong	arg01, fp
270e0     04 4E 05 F1 | 	add	fp, #4
270e4     A7 14 62 FC | 	wrlong	arg02, fp
270e8     04 4E 85 F1 | 	sub	fp, #4
270ec     A7 16 02 FB | 	rdlong	arg03, fp
270f0     04 16 06 F1 | 	add	arg03, #4
270f4     0B 13 02 FB | 	rdlong	arg01, arg03
270f8     08 4E 05 F1 | 	add	fp, #8
270fc     A7 14 02 F6 | 	mov	arg02, fp
27100     0C 4E 85 F1 | 	sub	fp, #12
27104     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
27108     28 4F 05 F1 | 	add	fp, #296
2710c     A7 FA 61 FC | 	wrlong	result1, fp
27110     28 4F 85 F1 | 	sub	fp, #296
27114     00 FA 0D F2 | 	cmp	result1, #0 wz
27118     14 00 90 AD |  if_e	jmp	#LR__4050
2711c                 | '         return _set_dos_error(r);
2711c     28 4F 05 F1 | 	add	fp, #296
27120     A7 12 02 FB | 	rdlong	arg01, fp
27124     28 4F 85 F1 | 	sub	fp, #296
27128     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0847
2712c     C4 00 90 FD | 	jmp	#LR__4053
27130                 | LR__4050
27130     28 4E 05 F1 | 	add	fp, #40
27134     A7 16 CA FA | 	rdbyte	arg03, fp wz
27138     28 4E 85 F1 | 	sub	fp, #40
2713c                 | '         return -1;
2713c     01 FA 65 A6 |  if_e	neg	result1, #1
27140     B0 00 90 AD |  if_e	jmp	#LR__4053
27144     08 4E 05 F1 | 	add	fp, #8
27148     A7 12 02 FB | 	rdlong	arg01, fp
2714c     20 4E 05 F1 | 	add	fp, #32
27150     A7 14 02 F6 | 	mov	arg02, fp
27154     28 4E 85 F1 | 	sub	fp, #40
27158     3F 16 06 F6 | 	mov	arg03, #63
2715c     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
27160     08 4E 05 F1 | 	add	fp, #8
27164     A7 16 02 FB | 	rdlong	arg03, fp
27168     3F 16 06 F1 | 	add	arg03, #63
2716c     0B 01 48 FC | 	wrbyte	#0, arg03
27170     0C 4E 05 F1 | 	add	fp, #12
27174     A7 16 C2 FA | 	rdbyte	arg03, fp
27178     14 4E 85 F1 | 	sub	fp, #20
2717c     10 16 CE F7 | 	test	arg03, #16 wz
27180     18 00 90 AD |  if_e	jmp	#LR__4051
27184     08 4E 05 F1 | 	add	fp, #8
27188     A7 16 02 FB | 	rdlong	arg03, fp
2718c     08 4E 85 F1 | 	sub	fp, #8
27190     50 16 06 F1 | 	add	arg03, #80
27194     0B 03 48 FC | 	wrbyte	#1, arg03
27198     14 00 90 FD | 	jmp	#LR__4052
2719c                 | LR__4051
2719c     08 4E 05 F1 | 	add	fp, #8
271a0     A7 16 02 FB | 	rdlong	arg03, fp
271a4     08 4E 85 F1 | 	sub	fp, #8
271a8     50 16 06 F1 | 	add	arg03, #80
271ac     0B 01 48 FC | 	wrbyte	#0, arg03
271b0                 | LR__4052
271b0     08 4E 05 F1 | 	add	fp, #8
271b4     A7 16 02 FB | 	rdlong	arg03, fp
271b8     04 4E 05 F1 | 	add	fp, #4
271bc     A7 14 02 FB | 	rdlong	arg02, fp
271c0     48 16 06 F1 | 	add	arg03, #72
271c4     0B 15 62 FC | 	wrlong	arg02, arg03
271c8     04 4E 85 F1 | 	sub	fp, #4
271cc     A7 1E 02 FB | 	rdlong	local01, fp
271d0     08 4E 05 F1 | 	add	fp, #8
271d4     A7 12 E2 FA | 	rdword	arg01, fp
271d8     02 4E 05 F1 | 	add	fp, #2
271dc     A7 14 E2 FA | 	rdword	arg02, fp
271e0     12 4E 85 F1 | 	sub	fp, #18
271e4     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0845
271e8     4C 1E 06 F1 | 	add	local01, #76
271ec     0F FB 61 FC | 	wrlong	result1, local01
271f0                 | '         ent->d_type =  (0) ;
271f0                 | '     }
271f0                 | '     ent->d_size = finfo.fsize;
271f0                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
271f0                 | '     return 0;
271f0     00 FA 05 F6 | 	mov	result1, #0
271f4                 | LR__4053
271f4     A7 F0 03 F6 | 	mov	ptra, fp
271f8     B2 00 A0 FD | 	call	#popregs_
271fc                 | _fatfs_cc_v_readdir_ret
271fc     2D 00 64 FD | 	ret
27200                 | 
27200                 | _fatfs_cc_v_stat
27200     03 4A 05 F6 | 	mov	COUNT_, #3
27204     A8 00 A0 FD | 	call	#pushregs_
27208     30 F1 07 F1 | 	add	ptra, #304
2720c     04 4E 05 F1 | 	add	fp, #4
27210     A7 12 62 FC | 	wrlong	arg01, fp
27214     04 4E 05 F1 | 	add	fp, #4
27218     A7 14 62 FC | 	wrlong	arg02, fp
2721c     08 4E 85 F1 | 	sub	fp, #8
27220     0A 13 02 F6 | 	mov	arg01, arg02
27224     00 14 06 F6 | 	mov	arg02, #0
27228     30 16 06 F6 | 	mov	arg03, #48
2722c     98 00 A0 FD | 	call	#\builtin_bytefill_
27230     04 4E 05 F1 | 	add	fp, #4
27234     A7 FA 01 FB | 	rdlong	result1, fp
27238     04 4E 85 F1 | 	sub	fp, #4
2723c     FD FA C9 FA | 	rdbyte	result1, result1 wz
27240     2C 00 90 AD |  if_e	jmp	#LR__4060
27244     04 4E 05 F1 | 	add	fp, #4
27248     A7 FA 01 FB | 	rdlong	result1, fp
2724c     04 4E 85 F1 | 	sub	fp, #4
27250     FD FA C1 FA | 	rdbyte	result1, result1
27254     2E FA 0D F2 | 	cmp	result1, #46 wz
27258     04 4E 05 A1 |  if_e	add	fp, #4
2725c     A7 1E 02 AB |  if_e	rdlong	local01, fp
27260     04 4E 85 A1 |  if_e	sub	fp, #4
27264     01 1E 06 A1 |  if_e	add	local01, #1
27268     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2726c     18 00 90 5D |  if_ne	jmp	#LR__4061
27270                 | LR__4060
27270     18 4E 05 F1 | 	add	fp, #24
27274     A7 20 48 FC | 	wrbyte	#16, fp
27278     0C 4E 85 F1 | 	sub	fp, #12
2727c     A7 00 68 FC | 	wrlong	#0, fp
27280     0C 4E 85 F1 | 	sub	fp, #12
27284     24 00 90 FD | 	jmp	#LR__4062
27288                 | LR__4061
27288     04 4E 05 F1 | 	add	fp, #4
2728c     A7 12 02 FB | 	rdlong	arg01, fp
27290     0C 4E 05 F1 | 	add	fp, #12
27294     A7 14 02 F6 | 	mov	arg02, fp
27298     10 4E 85 F1 | 	sub	fp, #16
2729c     AC EB BF FD | 	call	#_fatfs_cc_f_stat
272a0     0C 4E 05 F1 | 	add	fp, #12
272a4     A7 FA 61 FC | 	wrlong	result1, fp
272a8     0C 4E 85 F1 | 	sub	fp, #12
272ac                 | LR__4062
272ac     0C 4E 05 F1 | 	add	fp, #12
272b0     A7 20 0A FB | 	rdlong	local02, fp wz
272b4     0C 4E 85 F1 | 	sub	fp, #12
272b8     14 00 90 AD |  if_e	jmp	#LR__4063
272bc                 | '         return _set_dos_error(r);
272bc     0C 4E 05 F1 | 	add	fp, #12
272c0     A7 12 02 FB | 	rdlong	arg01, fp
272c4     0C 4E 85 F1 | 	sub	fp, #12
272c8     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0847
272cc     14 01 90 FD | 	jmp	#LR__4064
272d0                 | LR__4063
272d0     2C 4F 05 F1 | 	add	fp, #300
272d4     A7 48 6A FC | 	wrlong	#292, fp
272d8     14 4F 85 F1 | 	sub	fp, #276
272dc     A7 22 C2 FA | 	rdbyte	local03, fp
272e0     18 4E 85 F1 | 	sub	fp, #24
272e4     01 22 CE F7 | 	test	local03, #1 wz
272e8     2C 4F 05 A1 |  if_e	add	fp, #300
272ec     A7 22 02 AB |  if_e	rdlong	local03, fp
272f0     92 22 46 A5 |  if_e	or	local03, #146
272f4     A7 22 62 AC |  if_e	wrlong	local03, fp
272f8     2C 4F 85 A1 |  if_e	sub	fp, #300
272fc     18 4E 05 F1 | 	add	fp, #24
27300     A7 22 C2 FA | 	rdbyte	local03, fp
27304     18 4E 85 F1 | 	sub	fp, #24
27308     10 22 CE F7 | 	test	local03, #16 wz
2730c     2C 4F 05 51 |  if_ne	add	fp, #300
27310     A7 22 02 5B |  if_ne	rdlong	local03, fp
27314     08 00 00 5F 
27318     49 22 46 55 |  if_ne	or	local03, ##4169
2731c     A7 22 62 5C |  if_ne	wrlong	local03, fp
27320     2C 4F 85 51 |  if_ne	sub	fp, #300
27324     08 4E 05 F1 | 	add	fp, #8
27328     A7 22 02 FB | 	rdlong	local03, fp
2732c     24 4F 05 F1 | 	add	fp, #292
27330     A7 20 02 FB | 	rdlong	local02, fp
27334     08 22 06 F1 | 	add	local03, #8
27338     11 21 62 FC | 	wrlong	local02, local03
2733c     24 4F 85 F1 | 	sub	fp, #292
27340     A7 22 02 FB | 	rdlong	local03, fp
27344     0C 22 06 F1 | 	add	local03, #12
27348     11 03 68 FC | 	wrlong	#1, local03
2734c     A7 22 02 FB | 	rdlong	local03, fp
27350     08 4E 05 F1 | 	add	fp, #8
27354     A7 20 02 FB | 	rdlong	local02, fp
27358     18 22 06 F1 | 	add	local03, #24
2735c     11 21 62 FC | 	wrlong	local02, local03
27360     08 4E 85 F1 | 	sub	fp, #8
27364     A7 22 02 FB | 	rdlong	local03, fp
27368     1C 22 06 F1 | 	add	local03, #28
2736c     01 00 80 FF 
27370     11 01 68 FC | 	wrlong	##512, local03
27374     A7 20 02 FB | 	rdlong	local02, fp
27378     10 23 02 F6 | 	mov	local03, local02
2737c     18 20 06 F1 | 	add	local02, #24
27380     10 21 02 FB | 	rdlong	local02, local02
27384     FF 21 06 F1 | 	add	local02, #511
27388     10 21 52 F6 | 	abs	local02, local02 wc
2738c     09 20 46 F0 | 	shr	local02, #9
27390     10 21 82 F6 | 	negc	local02, local02
27394     20 22 06 F1 | 	add	local03, #32
27398     11 21 62 FC | 	wrlong	local02, local03
2739c     A7 20 02 FB | 	rdlong	local02, fp
273a0     10 23 02 F6 | 	mov	local03, local02
273a4     10 1F 02 F6 | 	mov	local01, local02
273a8     0C 4E 05 F1 | 	add	fp, #12
273ac     A7 12 E2 FA | 	rdword	arg01, fp
273b0     02 4E 05 F1 | 	add	fp, #2
273b4     A7 14 E2 FA | 	rdword	arg02, fp
273b8     16 4E 85 F1 | 	sub	fp, #22
273bc     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0845
273c0     2C 1E 06 F1 | 	add	local01, #44
273c4     0F FB 61 FC | 	wrlong	result1, local01
273c8     28 20 06 F1 | 	add	local02, #40
273cc     10 FB 61 FC | 	wrlong	result1, local02
273d0     24 22 06 F1 | 	add	local03, #36
273d4     11 FB 61 FC | 	wrlong	result1, local03
273d8                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
273d8                 | '     }
273d8                 | '     buf->st_mode = mode;
273d8                 | '     buf->st_nlink = 1;
273d8                 | '     buf->st_size = finfo.fsize;
273d8                 | '     buf->st_blksize = 512;
273d8                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
273d8                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
273d8                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
273d8                 | '     return r;
273d8     0C 4E 05 F1 | 	add	fp, #12
273dc     A7 FA 01 FB | 	rdlong	result1, fp
273e0     0C 4E 85 F1 | 	sub	fp, #12
273e4                 | LR__4064
273e4     A7 F0 03 F6 | 	mov	ptra, fp
273e8     B2 00 A0 FD | 	call	#popregs_
273ec                 | _fatfs_cc_v_stat_ret
273ec     2D 00 64 FD | 	ret
273f0                 | 
273f0                 | _fatfs_cc_v_read
273f0     00 4A 05 F6 | 	mov	COUNT_, #0
273f4     A8 00 A0 FD | 	call	#pushregs_
273f8     1C F0 07 F1 | 	add	ptra, #28
273fc     04 4E 05 F1 | 	add	fp, #4
27400     A7 12 62 FC | 	wrlong	arg01, fp
27404     04 4E 05 F1 | 	add	fp, #4
27408     A7 14 62 FC | 	wrlong	arg02, fp
2740c     04 4E 05 F1 | 	add	fp, #4
27410     A7 16 62 FC | 	wrlong	arg03, fp
27414     08 4E 85 F1 | 	sub	fp, #8
27418     A7 12 02 FB | 	rdlong	arg01, fp
2741c     09 13 0A FB | 	rdlong	arg01, arg01 wz
27420     0C 4E 05 F1 | 	add	fp, #12
27424     A7 12 62 FC | 	wrlong	arg01, fp
27428     10 4E 85 F1 | 	sub	fp, #16
2742c                 | '         return _seterror( 5 );
2742c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
27430     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
27434     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27438     01 FA 65 A6 |  if_e	neg	result1, #1
2743c     B8 00 90 AD |  if_e	jmp	#LR__4072
27440     10 4E 05 F1 | 	add	fp, #16
27444     A7 12 02 FB | 	rdlong	arg01, fp
27448     02 00 00 FF 
2744c     14 12 06 F1 | 	add	arg01, ##1044
27450     08 4E 85 F1 | 	sub	fp, #8
27454     A7 14 02 FB | 	rdlong	arg02, fp
27458     04 4E 05 F1 | 	add	fp, #4
2745c     A7 16 02 FB | 	rdlong	arg03, fp
27460     0C 4E 05 F1 | 	add	fp, #12
27464     A7 18 02 F6 | 	mov	arg04, fp
27468     18 4E 85 F1 | 	sub	fp, #24
2746c     C4 CE BF FD | 	call	#_fatfs_cc_f_read
27470     14 4E 05 F1 | 	add	fp, #20
27474     A7 FA 61 FC | 	wrlong	result1, fp
27478     14 4E 85 F1 | 	sub	fp, #20
2747c     00 FA 0D F2 | 	cmp	result1, #0 wz
27480     34 00 90 AD |  if_e	jmp	#LR__4070
27484     04 4E 05 F1 | 	add	fp, #4
27488     A7 18 02 FB | 	rdlong	arg04, fp
2748c     0C 17 02 F6 | 	mov	arg03, arg04
27490     08 18 06 F1 | 	add	arg04, #8
27494     0C 19 02 FB | 	rdlong	arg04, arg04
27498     20 18 46 F5 | 	or	arg04, #32
2749c     08 16 06 F1 | 	add	arg03, #8
274a0     0B 19 62 FC | 	wrlong	arg04, arg03
274a4                 | '         fil->state |=  (0x20) ;
274a4                 | '         return _set_dos_error(r);
274a4     10 4E 05 F1 | 	add	fp, #16
274a8     A7 12 02 FB | 	rdlong	arg01, fp
274ac     14 4E 85 F1 | 	sub	fp, #20
274b0     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0847
274b4     40 00 90 FD | 	jmp	#LR__4072
274b8                 | LR__4070
274b8     18 4E 05 F1 | 	add	fp, #24
274bc     A7 FA 09 FB | 	rdlong	result1, fp wz
274c0     18 4E 85 F1 | 	sub	fp, #24
274c4     24 00 90 5D |  if_ne	jmp	#LR__4071
274c8     04 4E 05 F1 | 	add	fp, #4
274cc     A7 FA 01 FB | 	rdlong	result1, fp
274d0     FD 18 02 F6 | 	mov	arg04, result1
274d4     04 4E 85 F1 | 	sub	fp, #4
274d8     08 FA 05 F1 | 	add	result1, #8
274dc     FD FA 01 FB | 	rdlong	result1, result1
274e0     10 FA 45 F5 | 	or	result1, #16
274e4     08 18 06 F1 | 	add	arg04, #8
274e8     0C FB 61 FC | 	wrlong	result1, arg04
274ec                 | LR__4071
274ec                 | '         fil->state |=  (0x10) ;
274ec                 | '     }
274ec                 | '     return x;
274ec     18 4E 05 F1 | 	add	fp, #24
274f0     A7 FA 01 FB | 	rdlong	result1, fp
274f4     18 4E 85 F1 | 	sub	fp, #24
274f8                 | LR__4072
274f8     A7 F0 03 F6 | 	mov	ptra, fp
274fc     B2 00 A0 FD | 	call	#popregs_
27500                 | _fatfs_cc_v_read_ret
27500     2D 00 64 FD | 	ret
27504                 | 
27504                 | _fatfs_cc_v_write
27504     00 4A 05 F6 | 	mov	COUNT_, #0
27508     A8 00 A0 FD | 	call	#pushregs_
2750c     1C F0 07 F1 | 	add	ptra, #28
27510     04 4E 05 F1 | 	add	fp, #4
27514     A7 12 62 FC | 	wrlong	arg01, fp
27518     04 4E 05 F1 | 	add	fp, #4
2751c     A7 14 62 FC | 	wrlong	arg02, fp
27520     04 4E 05 F1 | 	add	fp, #4
27524     A7 16 62 FC | 	wrlong	arg03, fp
27528     08 4E 85 F1 | 	sub	fp, #8
2752c     A7 12 02 FB | 	rdlong	arg01, fp
27530     09 13 0A FB | 	rdlong	arg01, arg01 wz
27534     0C 4E 05 F1 | 	add	fp, #12
27538     A7 12 62 FC | 	wrlong	arg01, fp
2753c     10 4E 85 F1 | 	sub	fp, #16
27540                 | '         return _seterror( 5 );
27540     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
27544     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
27548     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
2754c     01 FA 65 A6 |  if_e	neg	result1, #1
27550     84 00 90 AD |  if_e	jmp	#LR__4081
27554     10 4E 05 F1 | 	add	fp, #16
27558     A7 12 02 FB | 	rdlong	arg01, fp
2755c     02 00 00 FF 
27560     14 12 06 F1 | 	add	arg01, ##1044
27564     08 4E 85 F1 | 	sub	fp, #8
27568     A7 14 02 FB | 	rdlong	arg02, fp
2756c     04 4E 05 F1 | 	add	fp, #4
27570     A7 16 02 FB | 	rdlong	arg03, fp
27574     0C 4E 05 F1 | 	add	fp, #12
27578     A7 18 02 F6 | 	mov	arg04, fp
2757c     18 4E 85 F1 | 	sub	fp, #24
27580     4C D4 BF FD | 	call	#_fatfs_cc_f_write
27584     14 4E 05 F1 | 	add	fp, #20
27588     A7 FA 61 FC | 	wrlong	result1, fp
2758c     14 4E 85 F1 | 	sub	fp, #20
27590     00 FA 0D F2 | 	cmp	result1, #0 wz
27594     34 00 90 AD |  if_e	jmp	#LR__4080
27598     04 4E 05 F1 | 	add	fp, #4
2759c     A7 18 02 FB | 	rdlong	arg04, fp
275a0     0C 17 02 F6 | 	mov	arg03, arg04
275a4     08 18 06 F1 | 	add	arg04, #8
275a8     0C 19 02 FB | 	rdlong	arg04, arg04
275ac     20 18 46 F5 | 	or	arg04, #32
275b0     08 16 06 F1 | 	add	arg03, #8
275b4     0B 19 62 FC | 	wrlong	arg04, arg03
275b8                 | '         fil->state |=  (0x20) ;
275b8                 | '         return _set_dos_error(r);
275b8     10 4E 05 F1 | 	add	fp, #16
275bc     A7 12 02 FB | 	rdlong	arg01, fp
275c0     14 4E 85 F1 | 	sub	fp, #20
275c4     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0847
275c8     0C 00 90 FD | 	jmp	#LR__4081
275cc                 | LR__4080
275cc                 | '     }
275cc                 | '     return x;
275cc     18 4E 05 F1 | 	add	fp, #24
275d0     A7 FA 01 FB | 	rdlong	result1, fp
275d4     18 4E 85 F1 | 	sub	fp, #24
275d8                 | LR__4081
275d8     A7 F0 03 F6 | 	mov	ptra, fp
275dc     B2 00 A0 FD | 	call	#popregs_
275e0                 | _fatfs_cc_v_write_ret
275e0     2D 00 64 FD | 	ret
275e4                 | 
275e4                 | _fatfs_cc_v_lseek
275e4     04 4A 05 F6 | 	mov	COUNT_, #4
275e8     A8 00 A0 FD | 	call	#pushregs_
275ec     0A 1F 02 F6 | 	mov	local01, arg02
275f0     0B 21 02 F6 | 	mov	local02, arg03
275f4     09 23 02 FB | 	rdlong	local03, arg01
275f8     02 00 00 FF 
275fc     14 22 0E F1 | 	add	local03, ##1044 wz
27600                 | '         return _seterror( 5 );
27600     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
27604     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
27608     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
2760c     01 FA 65 A6 |  if_e	neg	result1, #1
27610     4C 00 90 AD |  if_e	jmp	#LR__4092
27614     00 20 0E F2 | 	cmp	local02, #0 wz
27618     24 00 90 AD |  if_e	jmp	#LR__4090
2761c     01 20 0E F2 | 	cmp	local02, #1 wz
27620     14 22 06 A1 |  if_e	add	local03, #20
27624     11 25 02 AB |  if_e	rdlong	local04, local03
27628     14 22 86 A1 |  if_e	sub	local03, #20
2762c     12 1F 02 A1 |  if_e	add	local01, local04
27630     0C 22 06 51 |  if_ne	add	local03, #12
27634     11 25 02 5B |  if_ne	rdlong	local04, local03
27638     0C 22 86 51 |  if_ne	sub	local03, #12
2763c     12 1F 02 51 |  if_ne	add	local01, local04
27640                 | LR__4090
27640     0F 15 02 F6 | 	mov	arg02, local01
27644     11 13 02 F6 | 	mov	arg01, local03
27648     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2764c     FD 12 0A F6 | 	mov	arg01, result1 wz
27650     08 00 90 AD |  if_e	jmp	#LR__4091
27654                 | '         return _set_dos_error(result);
27654     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0847
27658     04 00 90 FD | 	jmp	#LR__4092
2765c                 | LR__4091
2765c                 | '     }
2765c                 | '     return offset;
2765c     0F FB 01 F6 | 	mov	result1, local01
27660                 | LR__4092
27660     A7 F0 03 F6 | 	mov	ptra, fp
27664     B2 00 A0 FD | 	call	#popregs_
27668                 | _fatfs_cc_v_lseek_ret
27668     2D 00 64 FD | 	ret
2766c                 | 
2766c                 | _fatfs_cc_v_ioctl
2766c                 | ' {
2766c                 | '     return _seterror( 10 );
2766c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
27670     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
27674     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
27678     01 FA 65 F6 | 	neg	result1, #1
2767c                 | _fatfs_cc_v_ioctl_ret
2767c     2D 00 64 FD | 	ret
27680                 | 
27680                 | _fatfs_cc_v_mkdir
27680     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
27684     FD 12 02 F6 | 	mov	arg01, result1
27688                 | ' 
27688                 | '     r = f_mkdir(name);
27688                 | '     return _set_dos_error(r);
27688     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0847
2768c                 | _fatfs_cc_v_mkdir_ret
2768c     2D 00 64 FD | 	ret
27690                 | 
27690                 | _fatfs_cc_v_remove
27690     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
27694     FD 12 02 F6 | 	mov	arg01, result1
27698                 | ' 
27698                 | '     r = f_unlink(name);
27698                 | '     return _set_dos_error(r);
27698     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0847
2769c                 | _fatfs_cc_v_remove_ret
2769c     2D 00 64 FD | 	ret
276a0                 | 
276a0                 | _fatfs_cc_v_rmdir
276a0     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
276a4     FD 12 02 F6 | 	mov	arg01, result1
276a8                 | ' 
276a8                 | '     r = f_unlink(name);
276a8                 | '     return _set_dos_error(r);
276a8     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0847
276ac                 | _fatfs_cc_v_rmdir_ret
276ac     2D 00 64 FD | 	ret
276b0                 | 
276b0                 | _fatfs_cc_v_rename
276b0     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
276b4     FD 12 02 F6 | 	mov	arg01, result1
276b8                 | '     return _set_dos_error(r);
276b8     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0847
276bc                 | _fatfs_cc_v_rename_ret
276bc     2D 00 64 FD | 	ret
276c0                 | 
276c0                 | _fatfs_cc_v_open
276c0     07 4A 05 F6 | 	mov	COUNT_, #7
276c4     A8 00 A0 FD | 	call	#pushregs_
276c8     09 1F 02 F6 | 	mov	local01, arg01
276cc     0A 21 02 F6 | 	mov	local02, arg02
276d0     0B 23 02 F6 | 	mov	local03, arg03
276d4     03 00 00 FF 
276d8     3C 12 06 F6 | 	mov	arg01, ##1596
276dc                 | '     return _gc_alloc(size);
276dc     10 14 06 F6 | 	mov	arg02, #16
276e0     A0 58 BF FD | 	call	#__system___gc_doalloc
276e4     FD 24 0A F6 | 	mov	local04, result1 wz
276e8                 | '       return _seterror( 7 );
276e8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
276ec     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
276f0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
276f4     01 FA 65 A6 |  if_e	neg	result1, #1
276f8     98 00 90 AD |  if_e	jmp	#LR__4106
276fc     12 13 02 F6 | 	mov	arg01, local04
27700     00 14 06 F6 | 	mov	arg02, #0
27704     03 00 00 FF 
27708     3C 16 06 F6 | 	mov	arg03, ##1596
2770c     98 00 A0 FD | 	call	#\builtin_bytefill_
27710                 | '   switch (flags & 3) {
27710     11 27 02 F6 | 	mov	local05, local03
27714     03 26 0E F5 | 	and	local05, #3 wz
27718     0C 00 90 AD |  if_e	jmp	#LR__4100
2771c     01 26 0E F2 | 	cmp	local05, #1 wz
27720     0C 00 90 AD |  if_e	jmp	#LR__4101
27724     10 00 90 FD | 	jmp	#LR__4102
27728                 | LR__4100
27728     01 28 06 F6 | 	mov	local06, #1
2772c                 | '       fs_flags =  0x01 ;
2772c                 | '       break;
2772c     0C 00 90 FD | 	jmp	#LR__4103
27730                 | LR__4101
27730     02 28 06 F6 | 	mov	local06, #2
27734                 | '       fs_flags =  0x02 ;
27734                 | '       break;
27734     04 00 90 FD | 	jmp	#LR__4103
27738                 | LR__4102
27738     03 28 06 F6 | 	mov	local06, #3
2773c                 | '       fs_flags =  0x01  |  0x02 ;
2773c                 | '       break;
2773c                 | LR__4103
2773c     08 22 CE F7 | 	test	local03, #8 wz
27740     18 28 46 55 |  if_ne	or	local06, #24
27744     08 00 90 5D |  if_ne	jmp	#LR__4104
27748     20 22 CE F7 | 	test	local03, #32 wz
2774c     30 28 46 55 |  if_ne	or	local06, #48
27750                 | LR__4104
27750     02 00 00 FF 
27754     14 24 06 F1 | 	add	local04, ##1044
27758     12 13 02 F6 | 	mov	arg01, local04
2775c     02 00 00 FF 
27760     14 24 86 F1 | 	sub	local04, ##1044
27764     10 15 02 F6 | 	mov	arg02, local02
27768     14 17 02 F6 | 	mov	arg03, local06
2776c     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
27770     FD 2A 0A F6 | 	mov	local07, result1 wz
27774     14 00 90 AD |  if_e	jmp	#LR__4105
27778     12 13 02 F6 | 	mov	arg01, local04
2777c                 | '     return _gc_free(ptr);
2777c     10 59 BF FD | 	call	#__system___gc_free
27780                 | '     free(f);
27780                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27780                 | '     return _set_dos_error(r);
27780     15 13 02 F6 | 	mov	arg01, local07
27784     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0847
27788     08 00 90 FD | 	jmp	#LR__4106
2778c                 | LR__4105
2778c     0F 25 62 FC | 	wrlong	local04, local01
27790                 | '   }
27790                 | '   fil->vfsdata = f;
27790                 | '   return 0;
27790     00 FA 05 F6 | 	mov	result1, #0
27794                 | LR__4106
27794     A7 F0 03 F6 | 	mov	ptra, fp
27798     B2 00 A0 FD | 	call	#popregs_
2779c                 | _fatfs_cc_v_open_ret
2779c     2D 00 64 FD | 	ret
277a0                 | 
277a0                 | _fatfs_cc_v_flush
277a0     09 13 02 FB | 	rdlong	arg01, arg01
277a4     02 00 00 FF 
277a8     14 12 0E F1 | 	add	arg01, ##1044 wz
277ac                 | '         return _seterror( 5 );
277ac     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
277b0     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
277b4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
277b8     01 FA 65 A6 |  if_e	neg	result1, #1
277bc     0C 00 90 AD |  if_e	jmp	#LR__4110
277c0     00 DA BF FD | 	call	#_fatfs_cc_f_sync
277c4     FD 12 02 F6 | 	mov	arg01, result1
277c8                 | '     }
277c8                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
277c8                 | '     result = f_sync(f);
277c8                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
277c8                 | '     return _set_dos_error(result);
277c8     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0847
277cc                 | LR__4110
277cc                 | _fatfs_cc_v_flush_ret
277cc     2D 00 64 FD | 	ret
277d0                 | 
277d0                 | _fatfs_cc_v_init
277d0                 | ' {
277d0                 | '     return 0;
277d0     00 FA 05 F6 | 	mov	result1, #0
277d4                 | _fatfs_cc_v_init_ret
277d4     2D 00 64 FD | 	ret
277d8                 | 
277d8                 | _fatfs_cc_v_deinit
277d8     43 01 00 FF 
277dc     34 15 06 F6 | 	mov	arg02, ##@LR__4306
277e0     00 12 06 F6 | 	mov	arg01, #0
277e4     00 16 06 F6 | 	mov	arg03, #0
277e8     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
277ec     01 00 00 FF 
277f0     08 E4 05 F1 | 	add	objptr, ##520
277f4     F2 12 02 FB | 	rdlong	arg01, objptr
277f8     04 E4 05 F1 | 	add	objptr, #4
277fc     F2 14 02 FB | 	rdlong	arg02, objptr
27800     01 00 00 FF 
27804     0C E4 85 F1 | 	sub	objptr, ##524
27808     50 40 BF FD | 	call	#__system___freepins
2780c                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2780c                 | '     _freepins(f_pinmask);
2780c                 | '     return 0;
2780c     00 FA 05 F6 | 	mov	result1, #0
27810                 | _fatfs_cc_v_deinit_ret
27810     2D 00 64 FD | 	ret
27814                 | 
27814                 | _fatfs_cc_get_vfs
27814     01 4A 05 F6 | 	mov	COUNT_, #1
27818     A8 00 A0 FD | 	call	#pushregs_
2781c     09 1F 02 F6 | 	mov	local01, arg01
27820     50 12 06 F6 | 	mov	arg01, #80
27824     2C 57 BF FD | 	call	#__system___gc_alloc_managed
27828     FD 12 02 F6 | 	mov	arg01, result1
2782c     F2 FA 01 F6 | 	mov	result1, objptr
27830     58 FA 25 F4 | 	bith	result1, #88
27834     09 FB 61 FC | 	wrlong	result1, arg01
27838     F2 FA 01 F6 | 	mov	result1, objptr
2783c     00 88 03 FF 
27840     00 FA 45 F5 | 	or	result1, ##118489088
27844     04 12 06 F1 | 	add	arg01, #4
27848     09 FB 61 FC | 	wrlong	result1, arg01
2784c     F2 FA 01 F6 | 	mov	result1, objptr
27850     00 90 03 FF 
27854     00 FA 45 F5 | 	or	result1, ##119537664
27858     04 12 06 F1 | 	add	arg01, #4
2785c     09 FB 61 FC | 	wrlong	result1, arg01
27860     F2 FA 01 F6 | 	mov	result1, objptr
27864     00 98 03 FF 
27868     00 FA 45 F5 | 	or	result1, ##120586240
2786c     04 12 06 F1 | 	add	arg01, #4
27870     09 FB 61 FC | 	wrlong	result1, arg01
27874     F2 FA 01 F6 | 	mov	result1, objptr
27878     00 A0 03 FF 
2787c     00 FA 45 F5 | 	or	result1, ##121634816
27880     04 12 06 F1 | 	add	arg01, #4
27884     09 FB 61 FC | 	wrlong	result1, arg01
27888     04 12 06 F1 | 	add	arg01, #4
2788c     09 01 68 FC | 	wrlong	#0, arg01
27890     04 12 06 F1 | 	add	arg01, #4
27894     09 1F 62 FC | 	wrlong	local01, arg01
27898     04 12 06 F1 | 	add	arg01, #4
2789c     09 01 68 FC | 	wrlong	#0, arg01
278a0     F2 FA 01 F6 | 	mov	result1, objptr
278a4     00 A8 03 FF 
278a8     00 FA 45 F5 | 	or	result1, ##122683392
278ac     04 12 06 F1 | 	add	arg01, #4
278b0     09 FB 61 FC | 	wrlong	result1, arg01
278b4     F2 FA 01 F6 | 	mov	result1, objptr
278b8     00 B0 03 FF 
278bc     00 FA 45 F5 | 	or	result1, ##123731968
278c0     04 12 06 F1 | 	add	arg01, #4
278c4     09 FB 61 FC | 	wrlong	result1, arg01
278c8     F2 FA 01 F6 | 	mov	result1, objptr
278cc     00 B8 03 FF 
278d0     00 FA 45 F5 | 	or	result1, ##124780544
278d4     04 12 06 F1 | 	add	arg01, #4
278d8     09 FB 61 FC | 	wrlong	result1, arg01
278dc     F2 FA 01 F6 | 	mov	result1, objptr
278e0     77 FA 25 F4 | 	bith	result1, #119
278e4     04 12 06 F1 | 	add	arg01, #4
278e8     09 FB 61 FC | 	wrlong	result1, arg01
278ec     F2 FA 01 F6 | 	mov	result1, objptr
278f0     00 C8 03 FF 
278f4     00 FA 45 F5 | 	or	result1, ##126877696
278f8     04 12 06 F1 | 	add	arg01, #4
278fc     09 FB 61 FC | 	wrlong	result1, arg01
27900     F2 FA 01 F6 | 	mov	result1, objptr
27904     00 D0 03 FF 
27908     00 FA 45 F5 | 	or	result1, ##127926272
2790c     04 12 06 F1 | 	add	arg01, #4
27910     09 FB 61 FC | 	wrlong	result1, arg01
27914     F2 FA 01 F6 | 	mov	result1, objptr
27918     00 D8 03 FF 
2791c     00 FA 45 F5 | 	or	result1, ##128974848
27920     04 12 06 F1 | 	add	arg01, #4
27924     09 FB 61 FC | 	wrlong	result1, arg01
27928     F2 FA 01 F6 | 	mov	result1, objptr
2792c     96 FA 25 F4 | 	bith	result1, #150
27930     04 12 06 F1 | 	add	arg01, #4
27934     09 FB 61 FC | 	wrlong	result1, arg01
27938     F2 FA 01 F6 | 	mov	result1, objptr
2793c     00 E8 03 FF 
27940     00 FA 45 F5 | 	or	result1, ##131072000
27944     04 12 06 F1 | 	add	arg01, #4
27948     09 FB 61 FC | 	wrlong	result1, arg01
2794c     F2 FA 01 F6 | 	mov	result1, objptr
27950     B5 FA 25 F4 | 	bith	result1, #181
27954     04 12 06 F1 | 	add	arg01, #4
27958     09 FB 61 FC | 	wrlong	result1, arg01
2795c     F2 FA 01 F6 | 	mov	result1, objptr
27960     D4 FA 25 F4 | 	bith	result1, #212
27964     04 12 06 F1 | 	add	arg01, #4
27968     09 FB 61 FC | 	wrlong	result1, arg01
2796c     F2 FA 01 F6 | 	mov	result1, objptr
27970     1B FA 25 F4 | 	bith	result1, #27
27974     04 12 06 F1 | 	add	arg01, #4
27978     09 FB 61 FC | 	wrlong	result1, arg01
2797c     4C 12 86 F1 | 	sub	arg01, #76
27980                 | ' 
27980                 | '     v->close = &v_close;
27980                 | '     v->read = &v_read;
27980                 | '     v->write = &v_write;
27980                 | '     v->lseek = &v_lseek;
27980                 | '     v->ioctl = &v_ioctl;
27980                 | '     v->flush = 0;
27980                 | '     v->vfs_data = ptr;
27980                 | '     v->reserved = 0;
27980                 | ' 
27980                 | '     v->open = &v_open;
27980                 | '     v->creat = &v_creat;
27980                 | '     v->opendir = &v_opendir;
27980                 | '     v->closedir = &v_closedir;
27980                 | '     v->readdir = &v_readdir;
27980                 | '     v->stat = &v_stat;
27980                 | ' 
27980                 | '     v->mkdir = &v_mkdir;
27980                 | '     v->rmdir = &v_rmdir;
27980                 | ' 
27980                 | '     v->remove = &v_remove;
27980                 | '     v->rename = &v_rename;
27980                 | ' 
27980                 | '     v->init = &v_init;
27980                 | '     v->deinit = &v_deinit;
27980                 | ' 
27980                 | '     return v;
27980     09 FB 01 F6 | 	mov	result1, arg01
27984     A7 F0 03 F6 | 	mov	ptra, fp
27988     B2 00 A0 FD | 	call	#popregs_
2798c                 | _fatfs_cc_get_vfs_ret
2798c     2D 00 64 FD | 	ret
27990                 | 
27990                 | _fatfs_cc_xmit_mmc_0994
27990     01 00 00 FF 
27994     10 E4 05 F1 | 	add	objptr, ##528
27998     F2 00 02 FB | 	rdlong	_var01, objptr
2799c     08 E4 05 F1 | 	add	objptr, #8
279a0     F2 02 02 FB | 	rdlong	_var02, objptr
279a4     01 00 00 FF 
279a8     18 E4 85 F1 | 	sub	objptr, ##536
279ac     40 02 62 FD | 	dirl	_var02
279b0     28 02 64 FD | 	setq	#1
279b4     09 05 02 FB | 	rdlong	_var03, arg01
279b8     69 04 62 FD | 	rev	_var03
279bc     1B 04 FE F9 | 	movbyts	_var03, #27
279c0     01 05 22 FC | 	wypin	_var03, _var02
279c4     0A 05 02 F6 | 	mov	_var03, arg02
279c8     02 14 4E F0 | 	shr	arg02, #2 wz
279cc     03 04 66 F0 | 	shl	_var03, #3
279d0     00 05 22 FC | 	wypin	_var03, _var01
279d4     41 02 62 FD | 	dirh	_var02
279d8     08 12 06 F1 | 	add	arg01, #8
279dc     69 06 62 FD | 	rev	_var04
279e0     1B 06 FE F9 | 	movbyts	_var04, #27
279e4                 | LR__4120
279e4     01 07 22 5C |  if_ne	wypin	_var04, _var02
279e8     09 07 02 5B |  if_ne	rdlong	_var04, arg01
279ec     04 12 06 51 |  if_ne	add	arg01, #4
279f0     69 06 62 5D |  if_ne	rev	_var04
279f4     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
279f8                 | LR__4121
279f8     40 02 72 5D |  if_ne	testp	_var02 wc
279fc     F8 FF 9F 1D |  if_a	jmp	#LR__4121
27a00     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4120
27a04                 | LR__4122
27a04     40 00 72 FD | 	testp	_var01 wc
27a08     F8 FF 9F 3D |  if_ae	jmp	#LR__4122
27a0c     40 02 62 FD | 	dirl	_var02
27a10     FF FF FF FF 
27a14     01 FF 2B FC | 	wypin	##-1, _var02
27a18     41 02 62 FD | 	dirh	_var02
27a1c                 | _fatfs_cc_xmit_mmc_0994_ret
27a1c     2D 00 64 FD | 	ret
27a20                 | 
27a20                 | _fatfs_cc_rcvr_mmc_1001
27a20     01 00 00 FF 
27a24     10 E4 05 F1 | 	add	objptr, ##528
27a28     F2 00 02 FB | 	rdlong	_var01, objptr
27a2c     0C E4 05 F1 | 	add	objptr, #12
27a30     F2 02 02 FB | 	rdlong	_var02, objptr
27a34     01 00 00 FF 
27a38     1C E4 85 F1 | 	sub	objptr, ##540
27a3c     01 03 08 FC | 	akpin	_var02
27a40     0A 05 0A F6 | 	mov	_var03, arg02 wz
27a44     02 04 4E F0 | 	shr	_var03, #2 wz
27a48     30 00 90 AD |  if_e	jmp	#LR__4132
27a4c     02 07 02 F6 | 	mov	_var04, _var03
27a50     05 06 66 F0 | 	shl	_var04, #5
27a54     00 07 22 FC | 	wypin	_var04, _var01
27a58     01 7F 18 FC | 	wxpin	#63, _var02
27a5c                 | LR__4130
27a5c                 | LR__4131
27a5c     40 02 72 FD | 	testp	_var02 wc
27a60     F8 FF 9F 3D |  if_ae	jmp	#LR__4131
27a64     01 07 8A FA | 	rdpin	_var04, _var02
27a68     69 06 62 FD | 	rev	_var04
27a6c     1B 06 FE F9 | 	movbyts	_var04, #27
27a70     09 07 62 FC | 	wrlong	_var04, arg01
27a74     04 12 06 F1 | 	add	arg01, #4
27a78     F8 05 6E FB | 	djnz	_var03, #LR__4130
27a7c                 | LR__4132
27a7c     03 14 0E F5 | 	and	arg02, #3 wz
27a80     24 00 90 AD |  if_e	jmp	#LR__4135
27a84     01 4F 18 FC | 	wxpin	#39, _var02
27a88                 | LR__4133
27a88     00 11 28 FC | 	wypin	#8, _var01
27a8c                 | LR__4134
27a8c     40 02 72 FD | 	testp	_var02 wc
27a90     F8 FF 9F 3D |  if_ae	jmp	#LR__4134
27a94     01 07 8A FA | 	rdpin	_var04, _var02
27a98     69 06 62 FD | 	rev	_var04
27a9c     09 07 42 FC | 	wrbyte	_var04, arg01
27aa0     01 12 06 F1 | 	add	arg01, #1
27aa4     F8 15 6E FB | 	djnz	arg02, #LR__4133
27aa8                 | LR__4135
27aa8                 | _fatfs_cc_rcvr_mmc_1001_ret
27aa8     2D 00 64 FD | 	ret
27aac                 | 
27aac                 | _fatfs_cc_wait_ready_1005
27aac     01 4A 05 F6 | 	mov	COUNT_, #1
27ab0     A8 00 A0 FD | 	call	#pushregs_
27ab4     10 F0 07 F1 | 	add	ptra, #16
27ab8     1A FA 61 FD | 	getct	result1
27abc     08 4E 05 F1 | 	add	fp, #8
27ac0     A7 FA 61 FC | 	wrlong	result1, fp
27ac4     14 1E 06 FB | 	rdlong	local01, #20
27ac8     01 1E 46 F0 | 	shr	local01, #1
27acc     04 4E 05 F1 | 	add	fp, #4
27ad0     A7 1E 62 FC | 	wrlong	local01, fp
27ad4     0C 4E 85 F1 | 	sub	fp, #12
27ad8                 | ' {
27ad8                 | ' 	BYTE d;
27ad8                 | ' 	UINT tmr, tmout;
27ad8                 | ' 
27ad8                 | ' 	tmr = _cnt();
27ad8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
27ad8                 | ' 	for(;;) {
27ad8                 | LR__4140
27ad8     04 4E 05 F1 | 	add	fp, #4
27adc     A7 12 02 F6 | 	mov	arg01, fp
27ae0     04 4E 85 F1 | 	sub	fp, #4
27ae4     01 14 06 F6 | 	mov	arg02, #1
27ae8     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1001
27aec     04 4E 05 F1 | 	add	fp, #4
27af0     A7 1E C2 FA | 	rdbyte	local01, fp
27af4     04 4E 85 F1 | 	sub	fp, #4
27af8     FF 1E 0E F2 | 	cmp	local01, #255 wz
27afc     01 FA 05 A6 |  if_e	mov	result1, #1
27b00     28 00 90 AD |  if_e	jmp	#LR__4141
27b04     1A FA 61 FD | 	getct	result1
27b08     08 4E 05 F1 | 	add	fp, #8
27b0c     A7 1E 02 FB | 	rdlong	local01, fp
27b10     0F FB 81 F1 | 	sub	result1, local01
27b14     04 4E 05 F1 | 	add	fp, #4
27b18     A7 1E 02 FB | 	rdlong	local01, fp
27b1c     0C 4E 85 F1 | 	sub	fp, #12
27b20     0F FB 11 F2 | 	cmp	result1, local01 wc
27b24     00 FA 05 36 |  if_ae	mov	result1, #0
27b28     AC FF 9F CD |  if_b	jmp	#LR__4140
27b2c                 | LR__4141
27b2c     A7 F0 03 F6 | 	mov	ptra, fp
27b30     B2 00 A0 FD | 	call	#popregs_
27b34                 | _fatfs_cc_wait_ready_1005_ret
27b34     2D 00 64 FD | 	ret
27b38                 | 
27b38                 | _fatfs_cc_deselect_1011
27b38     00 4A 05 F6 | 	mov	COUNT_, #0
27b3c     A8 00 A0 FD | 	call	#pushregs_
27b40     14 F0 07 F1 | 	add	ptra, #20
27b44     01 00 00 FF 
27b48     14 E4 05 F1 | 	add	objptr, ##532
27b4c     F2 14 02 FB | 	rdlong	arg02, objptr
27b50     04 4E 05 F1 | 	add	fp, #4
27b54     A7 14 62 FC | 	wrlong	arg02, fp
27b58     04 E4 85 F1 | 	sub	objptr, #4
27b5c     F2 14 02 FB | 	rdlong	arg02, objptr
27b60     04 4E 05 F1 | 	add	fp, #4
27b64     A7 14 62 FC | 	wrlong	arg02, fp
27b68     08 E4 05 F1 | 	add	objptr, #8
27b6c     F2 14 02 FB | 	rdlong	arg02, objptr
27b70     04 4E 05 F1 | 	add	fp, #4
27b74     A7 14 62 FC | 	wrlong	arg02, fp
27b78     04 E4 05 F1 | 	add	objptr, #4
27b7c     F2 14 02 FB | 	rdlong	arg02, objptr
27b80     01 00 00 FF 
27b84     1C E4 85 F1 | 	sub	objptr, ##540
27b88     04 4E 05 F1 | 	add	fp, #4
27b8c     A7 14 62 FC | 	wrlong	arg02, fp
27b90     0C 4E 85 F1 | 	sub	fp, #12
27b94     A7 12 02 FB | 	rdlong	arg01, fp
27b98     04 4E 85 F1 | 	sub	fp, #4
27b9c     59 12 62 FD | 	drvh	arg01
27ba0     1F 20 64 FD | 	waitx	#16
27ba4     A7 12 02 F6 | 	mov	arg01, fp
27ba8     01 14 06 F6 | 	mov	arg02, #1
27bac     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1001
27bb0     A7 F0 03 F6 | 	mov	ptra, fp
27bb4     B2 00 A0 FD | 	call	#popregs_
27bb8                 | _fatfs_cc_deselect_1011_ret
27bb8     2D 00 64 FD | 	ret
27bbc                 | 
27bbc                 | _fatfs_cc_select_1015
27bbc     00 4A 05 F6 | 	mov	COUNT_, #0
27bc0     A8 00 A0 FD | 	call	#pushregs_
27bc4     10 F0 07 F1 | 	add	ptra, #16
27bc8     01 00 00 FF 
27bcc     14 E4 05 F1 | 	add	objptr, ##532
27bd0     F2 14 02 FB | 	rdlong	arg02, objptr
27bd4     08 4E 05 F1 | 	add	fp, #8
27bd8     A7 14 62 FC | 	wrlong	arg02, fp
27bdc     08 E4 05 F1 | 	add	objptr, #8
27be0     F2 12 02 FB | 	rdlong	arg01, objptr
27be4     01 00 00 FF 
27be8     1C E4 85 F1 | 	sub	objptr, ##540
27bec     04 4E 05 F1 | 	add	fp, #4
27bf0     A7 12 62 FC | 	wrlong	arg01, fp
27bf4     50 12 62 FD | 	fltl	arg01
27bf8     04 4E 85 F1 | 	sub	fp, #4
27bfc     A7 12 02 FB | 	rdlong	arg01, fp
27c00     58 12 62 FD | 	drvl	arg01
27c04     1F 20 64 FD | 	waitx	#16
27c08     04 4E 05 F1 | 	add	fp, #4
27c0c     A7 12 02 FB | 	rdlong	arg01, fp
27c10     41 12 62 FD | 	dirh	arg01
27c14     08 4E 85 F1 | 	sub	fp, #8
27c18     A7 12 02 F6 | 	mov	arg01, fp
27c1c     04 4E 85 F1 | 	sub	fp, #4
27c20     01 14 06 F6 | 	mov	arg02, #1
27c24     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1001
27c28     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1005
27c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
27c30     01 FA 05 56 |  if_ne	mov	result1, #1
27c34     08 00 90 5D |  if_ne	jmp	#LR__4150
27c38     FC FE BF FD | 	call	#_fatfs_cc_deselect_1011
27c3c                 | ' 
27c3c                 | ' 	deselect();
27c3c                 | ' 	return 0;
27c3c     00 FA 05 F6 | 	mov	result1, #0
27c40                 | LR__4150
27c40     A7 F0 03 F6 | 	mov	ptra, fp
27c44     B2 00 A0 FD | 	call	#popregs_
27c48                 | _fatfs_cc_select_1015_ret
27c48     2D 00 64 FD | 	ret
27c4c                 | 
27c4c                 | _fatfs_cc_rcvr_datablock_1019
27c4c     01 4A 05 F6 | 	mov	COUNT_, #1
27c50     A8 00 A0 FD | 	call	#pushregs_
27c54     18 F0 07 F1 | 	add	ptra, #24
27c58     04 4E 05 F1 | 	add	fp, #4
27c5c     A7 12 62 FC | 	wrlong	arg01, fp
27c60     04 4E 05 F1 | 	add	fp, #4
27c64     A7 14 62 FC | 	wrlong	arg02, fp
27c68     1A FA 61 FD | 	getct	result1
27c6c     08 4E 05 F1 | 	add	fp, #8
27c70     A7 FA 61 FC | 	wrlong	result1, fp
27c74     14 1E 06 FB | 	rdlong	local01, #20
27c78     03 1E 46 F0 | 	shr	local01, #3
27c7c     04 4E 05 F1 | 	add	fp, #4
27c80     A7 1E 62 FC | 	wrlong	local01, fp
27c84     14 4E 85 F1 | 	sub	fp, #20
27c88                 | ' 	BYTE *buff,
27c88                 | ' 	UINT btr
27c88                 | ' )
27c88                 | ' {
27c88                 | ' 	BYTE d[2];
27c88                 | ' 	UINT tmr, tmout;
27c88                 | ' 
27c88                 | ' 	tmr = _cnt();
27c88                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
27c88                 | ' 	for(;;) {
27c88                 | LR__4160
27c88     0C 4E 05 F1 | 	add	fp, #12
27c8c     A7 12 02 F6 | 	mov	arg01, fp
27c90     0C 4E 85 F1 | 	sub	fp, #12
27c94     01 14 06 F6 | 	mov	arg02, #1
27c98     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1001
27c9c     0C 4E 05 F1 | 	add	fp, #12
27ca0     A7 1E C2 FA | 	rdbyte	local01, fp
27ca4     0C 4E 85 F1 | 	sub	fp, #12
27ca8     FF 1E 0E F2 | 	cmp	local01, #255 wz
27cac     28 00 90 5D |  if_ne	jmp	#LR__4161
27cb0     1A FA 61 FD | 	getct	result1
27cb4     FD 1E 02 F6 | 	mov	local01, result1
27cb8     10 4E 05 F1 | 	add	fp, #16
27cbc     A7 14 02 FB | 	rdlong	arg02, fp
27cc0     0A 1F 82 F1 | 	sub	local01, arg02
27cc4     04 4E 05 F1 | 	add	fp, #4
27cc8     A7 14 02 FB | 	rdlong	arg02, fp
27ccc     14 4E 85 F1 | 	sub	fp, #20
27cd0     0A 1F 12 F2 | 	cmp	local01, arg02 wc
27cd4     B0 FF 9F CD |  if_b	jmp	#LR__4160
27cd8                 | LR__4161
27cd8     0C 4E 05 F1 | 	add	fp, #12
27cdc     A7 1E C2 FA | 	rdbyte	local01, fp
27ce0     0C 4E 85 F1 | 	sub	fp, #12
27ce4     FE 1E 0E F2 | 	cmp	local01, #254 wz
27ce8     00 FA 05 56 |  if_ne	mov	result1, #0
27cec     30 00 90 5D |  if_ne	jmp	#LR__4162
27cf0     04 4E 05 F1 | 	add	fp, #4
27cf4     A7 12 02 FB | 	rdlong	arg01, fp
27cf8     04 4E 05 F1 | 	add	fp, #4
27cfc     A7 14 02 FB | 	rdlong	arg02, fp
27d00     08 4E 85 F1 | 	sub	fp, #8
27d04     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1001
27d08     0C 4E 05 F1 | 	add	fp, #12
27d0c     A7 12 02 F6 | 	mov	arg01, fp
27d10     0C 4E 85 F1 | 	sub	fp, #12
27d14     02 14 06 F6 | 	mov	arg02, #2
27d18     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1001
27d1c                 | ' 
27d1c                 | ' 	rcvr_mmc(buff, btr);
27d1c                 | ' 	rcvr_mmc(d, 2);
27d1c                 | ' 
27d1c                 | ' 	return 1;
27d1c     01 FA 05 F6 | 	mov	result1, #1
27d20                 | LR__4162
27d20     A7 F0 03 F6 | 	mov	ptra, fp
27d24     B2 00 A0 FD | 	call	#popregs_
27d28                 | _fatfs_cc_rcvr_datablock_1019_ret
27d28     2D 00 64 FD | 	ret
27d2c                 | 
27d2c                 | _fatfs_cc_xmit_datablock_1021
27d2c     00 4A 05 F6 | 	mov	COUNT_, #0
27d30     A8 00 A0 FD | 	call	#pushregs_
27d34     10 F0 07 F1 | 	add	ptra, #16
27d38     04 4E 05 F1 | 	add	fp, #4
27d3c     A7 12 62 FC | 	wrlong	arg01, fp
27d40     04 4E 05 F1 | 	add	fp, #4
27d44     A7 14 42 FC | 	wrbyte	arg02, fp
27d48     08 4E 85 F1 | 	sub	fp, #8
27d4c     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1005
27d50     00 FA 0D F2 | 	cmp	result1, #0 wz
27d54     00 FA 05 A6 |  if_e	mov	result1, #0
27d58     90 00 90 AD |  if_e	jmp	#LR__4171
27d5c     08 4E 05 F1 | 	add	fp, #8
27d60     A7 14 C2 FA | 	rdbyte	arg02, fp
27d64     04 4E 05 F1 | 	add	fp, #4
27d68     A7 14 42 FC | 	wrbyte	arg02, fp
27d6c     A7 12 02 F6 | 	mov	arg01, fp
27d70     0C 4E 85 F1 | 	sub	fp, #12
27d74     01 14 06 F6 | 	mov	arg02, #1
27d78     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0994
27d7c     08 4E 05 F1 | 	add	fp, #8
27d80     A7 14 C2 FA | 	rdbyte	arg02, fp
27d84     08 4E 85 F1 | 	sub	fp, #8
27d88     FD 14 0E F2 | 	cmp	arg02, #253 wz
27d8c     58 00 90 AD |  if_e	jmp	#LR__4170
27d90     04 4E 05 F1 | 	add	fp, #4
27d94     A7 12 02 FB | 	rdlong	arg01, fp
27d98     04 4E 85 F1 | 	sub	fp, #4
27d9c     09 14 C6 F9 | 	decod	arg02, #9
27da0     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0994
27da4     0C 4E 05 F1 | 	add	fp, #12
27da8     A7 12 02 F6 | 	mov	arg01, fp
27dac     0C 4E 85 F1 | 	sub	fp, #12
27db0     02 14 06 F6 | 	mov	arg02, #2
27db4     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1001
27db8     0C 4E 05 F1 | 	add	fp, #12
27dbc     A7 12 02 F6 | 	mov	arg01, fp
27dc0     0C 4E 85 F1 | 	sub	fp, #12
27dc4     01 14 06 F6 | 	mov	arg02, #1
27dc8     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1001
27dcc     0C 4E 05 F1 | 	add	fp, #12
27dd0     A7 14 C2 FA | 	rdbyte	arg02, fp
27dd4     0C 4E 85 F1 | 	sub	fp, #12
27dd8     1F 14 06 F5 | 	and	arg02, #31
27ddc     05 14 0E F2 | 	cmp	arg02, #5 wz
27de0                 | ' 			return 0;
27de0     00 FA 05 56 |  if_ne	mov	result1, #0
27de4     04 00 90 5D |  if_ne	jmp	#LR__4171
27de8                 | LR__4170
27de8                 | ' 	}
27de8                 | ' 
27de8                 | ' 	return 1;
27de8     01 FA 05 F6 | 	mov	result1, #1
27dec                 | LR__4171
27dec     A7 F0 03 F6 | 	mov	ptra, fp
27df0     B2 00 A0 FD | 	call	#popregs_
27df4                 | _fatfs_cc_xmit_datablock_1021_ret
27df4     2D 00 64 FD | 	ret
27df8                 | 
27df8                 | _fatfs_cc_send_cmd_1025
27df8     01 4A 05 F6 | 	mov	COUNT_, #1
27dfc     A8 00 A0 FD | 	call	#pushregs_
27e00     1C F0 07 F1 | 	add	ptra, #28
27e04                 | _fatfs_cc_send_cmd_1025_enter
27e04     04 4E 05 F1 | 	add	fp, #4
27e08     A7 12 42 FC | 	wrbyte	arg01, fp
27e0c     04 4E 05 F1 | 	add	fp, #4
27e10     A7 14 62 FC | 	wrlong	arg02, fp
27e14     04 4E 85 F1 | 	sub	fp, #4
27e18     A7 FA C1 FA | 	rdbyte	result1, fp
27e1c     04 4E 85 F1 | 	sub	fp, #4
27e20     80 FA CD F7 | 	test	result1, #128 wz
27e24     44 00 90 AD |  if_e	jmp	#LR__4180
27e28     04 4E 05 F1 | 	add	fp, #4
27e2c     A7 14 C2 FA | 	rdbyte	arg02, fp
27e30     7F 14 06 F5 | 	and	arg02, #127
27e34     A7 14 42 FC | 	wrbyte	arg02, fp
27e38     04 4E 85 F1 | 	sub	fp, #4
27e3c     37 12 06 F6 | 	mov	arg01, #55
27e40     00 14 06 F6 | 	mov	arg02, #0
27e44     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1025
27e48     0C 4E 05 F1 | 	add	fp, #12
27e4c     A7 FA 41 FC | 	wrbyte	result1, fp
27e50     A7 14 C2 FA | 	rdbyte	arg02, fp
27e54     0C 4E 85 F1 | 	sub	fp, #12
27e58     02 14 16 F2 | 	cmp	arg02, #2 wc
27e5c     0C 4E 05 31 |  if_ae	add	fp, #12
27e60     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
27e64     0C 4E 85 31 |  if_ae	sub	fp, #12
27e68     6C 01 90 3D |  if_ae	jmp	#LR__4184
27e6c                 | LR__4180
27e6c     04 4E 05 F1 | 	add	fp, #4
27e70     A7 14 C2 FA | 	rdbyte	arg02, fp
27e74     04 4E 85 F1 | 	sub	fp, #4
27e78     0C 14 0E F2 | 	cmp	arg02, #12 wz
27e7c     14 00 90 AD |  if_e	jmp	#LR__4181
27e80     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1011
27e84     34 FD BF FD | 	call	#_fatfs_cc_select_1015
27e88     00 FA 0D F2 | 	cmp	result1, #0 wz
27e8c     FF FA 05 A6 |  if_e	mov	result1, #255
27e90     44 01 90 AD |  if_e	jmp	#LR__4184
27e94                 | LR__4181
27e94     04 4E 05 F1 | 	add	fp, #4
27e98     A7 14 C2 FA | 	rdbyte	arg02, fp
27e9c     40 FA 05 F6 | 	mov	result1, #64
27ea0     0A FB 41 F5 | 	or	result1, arg02
27ea4     10 4E 05 F1 | 	add	fp, #16
27ea8     A7 FA 41 FC | 	wrbyte	result1, fp
27eac     0C 4E 85 F1 | 	sub	fp, #12
27eb0     A7 FA 01 FB | 	rdlong	result1, fp
27eb4     18 FA 45 F0 | 	shr	result1, #24
27eb8     0D 4E 05 F1 | 	add	fp, #13
27ebc     A7 FA 41 FC | 	wrbyte	result1, fp
27ec0     0D 4E 85 F1 | 	sub	fp, #13
27ec4     A7 FA 01 FB | 	rdlong	result1, fp
27ec8     10 FA 45 F0 | 	shr	result1, #16
27ecc     0E 4E 05 F1 | 	add	fp, #14
27ed0     A7 FA 41 FC | 	wrbyte	result1, fp
27ed4     0E 4E 85 F1 | 	sub	fp, #14
27ed8     A7 FA 01 FB | 	rdlong	result1, fp
27edc     08 FA 45 F0 | 	shr	result1, #8
27ee0     0F 4E 05 F1 | 	add	fp, #15
27ee4     A7 FA 41 FC | 	wrbyte	result1, fp
27ee8     0F 4E 85 F1 | 	sub	fp, #15
27eec     A7 FA 01 FB | 	rdlong	result1, fp
27ef0     10 4E 05 F1 | 	add	fp, #16
27ef4     A7 FA 41 FC | 	wrbyte	result1, fp
27ef8     0C 4E 85 F1 | 	sub	fp, #12
27efc     A7 02 48 FC | 	wrbyte	#1, fp
27f00     08 4E 85 F1 | 	sub	fp, #8
27f04     A7 FA C9 FA | 	rdbyte	result1, fp wz
27f08     04 4E 85 F1 | 	sub	fp, #4
27f0c     0C 4E 05 A1 |  if_e	add	fp, #12
27f10     A7 2A 49 AC |  if_e	wrbyte	#149, fp
27f14     0C 4E 85 A1 |  if_e	sub	fp, #12
27f18     04 4E 05 F1 | 	add	fp, #4
27f1c     A7 FA C1 FA | 	rdbyte	result1, fp
27f20     04 4E 85 F1 | 	sub	fp, #4
27f24     08 FA 0D F2 | 	cmp	result1, #8 wz
27f28     0C 4E 05 A1 |  if_e	add	fp, #12
27f2c     A7 0E 49 AC |  if_e	wrbyte	#135, fp
27f30     0C 4E 85 A1 |  if_e	sub	fp, #12
27f34     0C 4E 05 F1 | 	add	fp, #12
27f38     A7 14 C2 FA | 	rdbyte	arg02, fp
27f3c     0D 4E 05 F1 | 	add	fp, #13
27f40     A7 14 42 FC | 	wrbyte	arg02, fp
27f44     05 4E 85 F1 | 	sub	fp, #5
27f48     A7 12 02 F6 | 	mov	arg01, fp
27f4c     14 4E 85 F1 | 	sub	fp, #20
27f50     06 14 06 F6 | 	mov	arg02, #6
27f54     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0994
27f58     04 4E 05 F1 | 	add	fp, #4
27f5c     A7 1E C2 FA | 	rdbyte	local01, fp
27f60     04 4E 85 F1 | 	sub	fp, #4
27f64     0C 1E 0E F2 | 	cmp	local01, #12 wz
27f68     10 4E 05 A1 |  if_e	add	fp, #16
27f6c     A7 12 02 A6 |  if_e	mov	arg01, fp
27f70     10 4E 85 A1 |  if_e	sub	fp, #16
27f74     01 14 06 A6 |  if_e	mov	arg02, #1
27f78     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1001
27f7c     0C 4E 05 F1 | 	add	fp, #12
27f80     A7 14 48 FC | 	wrbyte	#10, fp
27f84     0C 4E 85 F1 | 	sub	fp, #12
27f88                 | ' 	n = 10;
27f88                 | ' 	do
27f88                 | LR__4182
27f88     10 4E 05 F1 | 	add	fp, #16
27f8c     A7 12 02 F6 | 	mov	arg01, fp
27f90     10 4E 85 F1 | 	sub	fp, #16
27f94     01 14 06 F6 | 	mov	arg02, #1
27f98     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1001
27f9c     10 4E 05 F1 | 	add	fp, #16
27fa0     A7 1E C2 FA | 	rdbyte	local01, fp
27fa4     10 4E 85 F1 | 	sub	fp, #16
27fa8     80 1E CE F7 | 	test	local01, #128 wz
27fac     1C 00 90 AD |  if_e	jmp	#LR__4183
27fb0     0C 4E 05 F1 | 	add	fp, #12
27fb4     A7 1E C2 FA | 	rdbyte	local01, fp
27fb8     01 1E 86 F1 | 	sub	local01, #1
27fbc     A7 1E 42 FC | 	wrbyte	local01, fp
27fc0     A7 1E CA FA | 	rdbyte	local01, fp wz
27fc4     0C 4E 85 F1 | 	sub	fp, #12
27fc8     BC FF 9F 5D |  if_ne	jmp	#LR__4182
27fcc                 | LR__4183
27fcc                 | ' 
27fcc                 | ' 	return d;
27fcc     10 4E 05 F1 | 	add	fp, #16
27fd0     A7 FA C1 FA | 	rdbyte	result1, fp
27fd4     10 4E 85 F1 | 	sub	fp, #16
27fd8                 | LR__4184
27fd8     A7 F0 03 F6 | 	mov	ptra, fp
27fdc     B2 00 A0 FD | 	call	#popregs_
27fe0                 | _fatfs_cc_send_cmd_1025_ret
27fe0     2D 00 64 FD | 	ret
27fe4                 | 
27fe4                 | _fatfs_cc_disk_deinitialize
27fe4     03 4A 05 F6 | 	mov	COUNT_, #3
27fe8     A8 00 A0 FD | 	call	#pushregs_
27fec     00 12 4E F2 | 	cmps	arg01, #0 wz
27ff0     01 00 00 FF 
27ff4     14 E4 05 F1 | 	add	objptr, ##532
27ff8     F2 12 02 FB | 	rdlong	arg01, objptr
27ffc     04 E4 85 F1 | 	sub	objptr, #4
28000     F2 1E 02 FB | 	rdlong	local01, objptr
28004     08 E4 05 F1 | 	add	objptr, #8
28008     F2 20 02 FB | 	rdlong	local02, objptr
2800c     04 E4 05 F1 | 	add	objptr, #4
28010     F2 22 02 FB | 	rdlong	local03, objptr
28014     01 00 00 FF 
28018     1C E4 85 F1 | 	sub	objptr, ##540
2801c                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2801c                 | '         return RES_NOTRDY;
2801c     03 FA 05 56 |  if_ne	mov	result1, #3
28020     2C 00 90 5D |  if_ne	jmp	#LR__4190
28024     50 12 62 FD | 	fltl	arg01
28028     09 01 08 FC | 	wrpin	#0, arg01
2802c     50 1E 62 FD | 	fltl	local01
28030     0F 01 08 FC | 	wrpin	#0, local01
28034     50 20 62 FD | 	fltl	local02
28038     10 01 08 FC | 	wrpin	#0, local02
2803c     50 22 62 FD | 	fltl	local03
28040     11 01 08 FC | 	wrpin	#0, local03
28044     0A 12 06 F6 | 	mov	arg01, #10
28048     44 14 BF FD | 	call	#__system___waitms
2804c                 | '     }
2804c                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2804c                 | '     _pinclear(PIN_SS);
2804c                 | '     _pinclear(PIN_CLK);
2804c                 | '     _pinclear(PIN_DI);
2804c                 | '     _pinclear(PIN_DO);
2804c                 | ' 
2804c                 | '     _waitms(10);
2804c                 | ' 
2804c                 | '     return 0;
2804c     00 FA 05 F6 | 	mov	result1, #0
28050                 | LR__4190
28050     A7 F0 03 F6 | 	mov	ptra, fp
28054     B2 00 A0 FD | 	call	#popregs_
28058                 | _fatfs_cc_disk_deinitialize_ret
28058     2D 00 64 FD | 	ret
2805c                 | 
2805c                 | _fatfs_cc_gettimeofday
2805c     04 4A 05 F6 | 	mov	COUNT_, #4
28060     A8 00 A0 FD | 	call	#pushregs_
28064     09 1F 02 F6 | 	mov	local01, arg01
28068     00 10 BF FD | 	call	#__system___getus
2806c     FD 12 02 F6 | 	mov	arg01, result1
28070     02 00 00 FF 
28074     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
28078     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2807c     09 FB 01 F6 | 	mov	result1, arg01
28080     10 FB 81 F1 | 	sub	result1, local02
28084     A1 07 00 FF 
28088     40 FA 15 FD | 	qdiv	result1, ##1000000
2808c     02 00 00 FF 
28090     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
28094     18 20 62 FD | 	getqx	local02
28098     A1 07 00 FF 
2809c     40 FA 15 FD | 	qdiv	result1, ##1000000
280a0     00 20 0E F2 | 	cmp	local02, #0 wz
280a4     19 22 62 FD | 	getqy	local03
280a8     28 00 90 AD |  if_e	jmp	#LR__4200
280ac     02 00 00 FF 
280b0     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
280b4     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
280b8     10 25 02 F1 | 	add	local04, local02
280bc     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
280c0     11 13 82 F1 | 	sub	arg01, local03
280c4     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
280c8     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
280cc     02 00 00 FF 
280d0     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
280d4                 | LR__4200
280d4     02 00 00 FF 
280d8     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
280dc     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
280e0     02 00 00 FF 
280e4     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
280e8     0F 25 62 FC | 	wrlong	local04, local01
280ec     04 1E 06 F1 | 	add	local01, #4
280f0     0F 23 62 FC | 	wrlong	local03, local01
280f4                 | '         lastsec += secs;
280f4                 | '         lastus = now - leftover;
280f4                 | '     }
280f4                 | '     tv->tv_sec = lastsec;
280f4                 | '     tv->tv_usec = leftover;
280f4                 | '     return 0;
280f4     00 FA 05 F6 | 	mov	result1, #0
280f8     A7 F0 03 F6 | 	mov	ptra, fp
280fc     B2 00 A0 FD | 	call	#popregs_
28100                 | _fatfs_cc_gettimeofday_ret
28100     2D 00 64 FD | 	ret
28104                 | 
28104                 | _fatfs_cc__is_leap_year
28104     09 FB 51 F6 | 	abs	result1, arg01 wc
28108     03 FA 05 F5 | 	and	result1, #3
2810c     FD FA 89 F6 | 	negc	result1, result1 wz
28110     38 00 90 5D |  if_ne	jmp	#LR__4211
28114     09 FB 51 F6 | 	abs	result1, arg01 wc
28118     64 FA 15 FD | 	qdiv	result1, #100
2811c     19 FA 61 FD | 	getqy	result1
28120     FD FA 89 F6 | 	negc	result1, result1 wz
28124     1C 00 90 5D |  if_ne	jmp	#LR__4210
28128     09 FB 51 F6 | 	abs	result1, arg01 wc
2812c     90 FB 15 FD | 	qdiv	result1, #400
28130                 | '       return (0 == y % 400);
28130     00 FA 05 F6 | 	mov	result1, #0
28134     19 00 62 FD | 	getqy	_var01
28138     00 01 8A F6 | 	negc	_var01, _var01 wz
2813c     01 FA 05 A6 |  if_e	mov	result1, #1
28140     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
28144                 | LR__4210
28144                 | '     return 1;
28144     01 FA 05 F6 | 	mov	result1, #1
28148     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2814c                 | LR__4211
2814c                 | '   }
2814c                 | '   return 0;
2814c     00 FA 05 F6 | 	mov	result1, #0
28150                 | _fatfs_cc__is_leap_year_ret
28150     2D 00 64 FD | 	ret
28154                 | 
28154                 | _fatfs_cc___tzoffset
28154     09 01 0A F6 | 	mov	_var01, arg01 wz
28158     FF FF FF FF 
2815c     0A FF 6B FC | 	wrlong	##-1, arg02
28160     01 02 06 F6 | 	mov	_var02, #1
28164     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
28168                 | '                 return 0;
28168     00 FA 05 A6 |  if_e	mov	result1, #0
2816c     94 02 90 AD |  if_e	jmp	#LR__4237
28170     0A 01 68 FC | 	wrlong	#0, arg02
28174     02 00 00 FF 
28178     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2817c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
28180                 | ' 
28180                 | '        *hasdst = 0;
28180                 | ' 
28180                 | ' 	n = stdname;
28180                 | '         while (*s && isalpha(*s)) {
28180     02 00 00 FF 
28184     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
28188     97 28 48 FB | 	callpa	#(@LR__4221-@LR__4220)>>2,fcache_load_ptr_
2818c                 | LR__4220
2818c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
28190     48 00 90 AD |  if_e	jmp	#LR__4222
28194     00 13 C2 FA | 	rdbyte	arg01, _var01
28198                 | ' {
28198                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
28198     80 12 36 F3 | 	fle	arg01, #128 wc
2819c                 | '     return __ctype[c];
2819c     02 00 00 FF 
281a0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
281a4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
281a8     09 FB C1 FA | 	rdbyte	result1, arg01
281ac     02 00 00 FF 
281b0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
281b4     0C FA CD F7 | 	test	result1, #12 wz
281b8     20 00 90 AD |  if_e	jmp	#LR__4222
281bc     00 09 02 F6 | 	mov	_var05, _var01
281c0     00 0B 02 F6 | 	mov	_var06, _var01
281c4     01 0A 06 F1 | 	add	_var06, #1
281c8     04 0D C2 FA | 	rdbyte	_var07, _var05
281cc     05 01 02 F6 | 	mov	_var01, _var06
281d0     03 0D 42 FC | 	wrbyte	_var07, _var04
281d4     01 06 06 F1 | 	add	_var04, #1
281d8     B0 FF 9F FD | 	jmp	#LR__4220
281dc                 | LR__4221
281dc                 | LR__4222
281dc     03 01 48 FC | 	wrbyte	#0, _var04
281e0     00 0E 06 F6 | 	mov	_var08, #0
281e4     00 05 C2 FA | 	rdbyte	_var03, _var01
281e8     2D 04 0E F2 | 	cmp	_var03, #45 wz
281ec     01 02 66 A6 |  if_e	neg	_var02, #1
281f0     01 00 06 A1 |  if_e	add	_var01, #1
281f4     97 28 48 FB | 	callpa	#(@LR__4224-@LR__4223)>>2,fcache_load_ptr_
281f8                 | '                 sgn = -1;
281f8                 | '                 s++;
281f8                 | '         }
281f8                 | '         while (isdigit(*s)) {
281f8                 | LR__4223
281f8     00 13 C2 FA | 	rdbyte	arg01, _var01
281fc                 | ' {
281fc                 | '   return  (__ctype_get(c) & 0x02 ) ;
281fc     80 12 36 F3 | 	fle	arg01, #128 wc
28200                 | '     return __ctype[c];
28200     02 00 00 FF 
28204     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
28208     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2820c     09 FB C1 FA | 	rdbyte	result1, arg01
28210     02 00 00 FF 
28214     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
28218     02 FA CD F7 | 	test	result1, #2 wz
2821c     28 00 90 AD |  if_e	jmp	#LR__4225
28220     07 05 02 F6 | 	mov	_var03, _var08
28224     02 04 66 F0 | 	shl	_var03, #2
28228     07 05 02 F1 | 	add	_var03, _var08
2822c     01 04 66 F0 | 	shl	_var03, #1
28230     00 09 C2 FA | 	rdbyte	_var05, _var01
28234     30 08 86 F1 | 	sub	_var05, #48
28238     04 05 02 F1 | 	add	_var03, _var05
2823c     02 0F 02 F6 | 	mov	_var08, _var03
28240     01 00 06 F1 | 	add	_var01, #1
28244     B0 FF 9F FD | 	jmp	#LR__4223
28248                 | LR__4224
28248                 | LR__4225
28248     07 00 00 FF 
2824c     10 0E 06 FD | 	qmul	_var08, ##3600
28250     00 05 C2 FA | 	rdbyte	_var03, _var01
28254     3A 04 0E F2 | 	cmp	_var03, #58 wz
28258     18 10 62 FD | 	getqx	_var09
2825c     70 00 90 5D |  if_ne	jmp	#LR__4229
28260     00 0E 06 F6 | 	mov	_var08, #0
28264     01 00 06 F1 | 	add	_var01, #1
28268     97 28 48 FB | 	callpa	#(@LR__4227-@LR__4226)>>2,fcache_load_ptr_
2826c                 | '                 x = 0;
2826c                 | '                 s++;
2826c                 | '                 while (isdigit(*s)) {
2826c                 | LR__4226
2826c     00 13 C2 FA | 	rdbyte	arg01, _var01
28270                 | ' {
28270                 | '   return  (__ctype_get(c) & 0x02 ) ;
28270     80 12 36 F3 | 	fle	arg01, #128 wc
28274                 | '     return __ctype[c];
28274     02 00 00 FF 
28278     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2827c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
28280     09 FB C1 FA | 	rdbyte	result1, arg01
28284     02 00 00 FF 
28288     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2828c     02 FA CD F7 | 	test	result1, #2 wz
28290     28 00 90 AD |  if_e	jmp	#LR__4228
28294     07 05 02 F6 | 	mov	_var03, _var08
28298     02 04 66 F0 | 	shl	_var03, #2
2829c     07 05 02 F1 | 	add	_var03, _var08
282a0     01 04 66 F0 | 	shl	_var03, #1
282a4     00 09 C2 FA | 	rdbyte	_var05, _var01
282a8     30 08 86 F1 | 	sub	_var05, #48
282ac     04 05 02 F1 | 	add	_var03, _var05
282b0     02 0F 02 F6 | 	mov	_var08, _var03
282b4     01 00 06 F1 | 	add	_var01, #1
282b8     B0 FF 9F FD | 	jmp	#LR__4226
282bc                 | LR__4227
282bc                 | LR__4228
282bc     07 0D 02 F6 | 	mov	_var07, _var08
282c0     04 0C 66 F0 | 	shl	_var07, #4
282c4     07 0D 82 F1 | 	sub	_var07, _var08
282c8     02 0C 66 F0 | 	shl	_var07, #2
282cc     06 11 02 F1 | 	add	_var09, _var07
282d0                 | LR__4229
282d0     02 00 00 FF 
282d4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
282d8     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
282dc     00 13 C2 FA | 	rdbyte	arg01, _var01
282e0                 | ' {
282e0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
282e0     80 12 36 F3 | 	fle	arg01, #128 wc
282e4                 | '     return __ctype[c];
282e4     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
282e8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
282ec     09 FB C1 FA | 	rdbyte	result1, arg01
282f0     02 00 00 FF 
282f4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
282f8     0C FA CD F7 | 	test	result1, #12 wz
282fc     50 00 90 AD |  if_e	jmp	#LR__4232
28300     0A 03 68 FC | 	wrlong	#1, arg02
28304                 | '                 *hasdst = 1;
28304                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
28304                 | LR__4230
28304     00 05 CA FA | 	rdbyte	_var03, _var01 wz
28308     44 00 90 AD |  if_e	jmp	#LR__4231
2830c     00 13 C2 FA | 	rdbyte	arg01, _var01
28310                 | ' {
28310                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
28310     80 12 36 F3 | 	fle	arg01, #128 wc
28314                 | '     return __ctype[c];
28314     02 00 00 FF 
28318     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2831c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
28320     09 FB C1 FA | 	rdbyte	result1, arg01
28324     02 00 00 FF 
28328     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2832c     0C FA CD F7 | 	test	result1, #12 wz
28330     1C 00 90 AD |  if_e	jmp	#LR__4231
28334     00 0B 02 F6 | 	mov	_var06, _var01
28338     01 0A 06 F1 | 	add	_var06, #1
2833c     00 0D C2 FA | 	rdbyte	_var07, _var01
28340     05 01 02 F6 | 	mov	_var01, _var06
28344     03 0D 42 FC | 	wrbyte	_var07, _var04
28348     01 06 06 F1 | 	add	_var04, #1
2834c     B4 FF 9F FD | 	jmp	#LR__4230
28350                 | LR__4231
28350                 | LR__4232
28350     03 01 48 FC | 	wrbyte	#0, _var04
28354     02 00 00 FF 
28358     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2835c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
28360     02 00 00 FF 
28364     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
28368     20 00 90 AD |  if_e	jmp	#LR__4233
2836c     02 00 00 FF 
28370     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
28374     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
28378     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2837c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
28380     02 00 00 FF 
28384     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
28388     1C 00 90 FD | 	jmp	#LR__4234
2838c                 | LR__4233
2838c     02 00 00 FF 
28390     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
28394     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
28398     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2839c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
283a0     02 00 00 FF 
283a4     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
283a8                 | LR__4234
283a8     02 00 00 FF 
283ac     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
283b0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
283b4     02 00 00 FF 
283b8     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
283bc     20 00 90 AD |  if_e	jmp	#LR__4235
283c0     02 00 00 FF 
283c4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
283c8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
283cc     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
283d0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
283d4     02 00 00 FF 
283d8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
283dc     1C 00 90 FD | 	jmp	#LR__4236
283e0                 | LR__4235
283e0     02 00 00 FF 
283e4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
283e8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
283ec     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
283f0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
283f4     02 00 00 FF 
283f8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
283fc                 | LR__4236
283fc     08 03 02 FD | 	qmul	_var02, _var09
28400                 | ' 		_tzname[1] = stdname;
28400                 | ' 
28400                 | '         return sgn * off;
28400     18 FA 61 FD | 	getqx	result1
28404                 | LR__4237
28404                 | _fatfs_cc___tzoffset_ret
28404     2D 00 64 FD | 	ret
28408                 | 
28408                 | _fatfs_cc___indst
28408     10 12 06 F1 | 	add	arg01, #16
2840c     09 01 02 FB | 	rdlong	_var01, arg01
28410     10 12 86 F1 | 	sub	arg01, #16
28414     02 00 0E F2 | 	cmp	_var01, #2 wz
28418     30 00 90 5D |  if_ne	jmp	#LR__4240
2841c     07 00 06 F6 | 	mov	_var01, #7
28420     18 12 06 F1 | 	add	arg01, #24
28424     09 03 02 FB | 	rdlong	_var02, arg01
28428     01 01 02 F1 | 	add	_var01, _var02
2842c     0C 12 86 F1 | 	sub	arg01, #12
28430     09 05 02 FB | 	rdlong	_var03, arg01
28434     02 01 82 F1 | 	sub	_var01, _var03
28438     00 00 56 F2 | 	cmps	_var01, #0 wc
2843c                 | '                         return 1;
2843c     01 FA 05 C6 |  if_b	mov	result1, #1
28440     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
28444                 | '                 return 0;
28444     00 FA 05 F6 | 	mov	result1, #0
28448     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2844c                 | LR__4240
2844c     10 12 06 F1 | 	add	arg01, #16
28450     09 01 02 FB | 	rdlong	_var01, arg01
28454     10 12 86 F1 | 	sub	arg01, #16
28458     0A 00 0E F2 | 	cmp	_var01, #10 wz
2845c     28 00 90 5D |  if_ne	jmp	#LR__4241
28460     18 12 06 F1 | 	add	arg01, #24
28464     09 01 02 FB | 	rdlong	_var01, arg01
28468     0C 12 86 F1 | 	sub	arg01, #12
2846c     09 07 02 FB | 	rdlong	_var04, arg01
28470     03 01 82 F1 | 	sub	_var01, _var04
28474     00 00 56 F2 | 	cmps	_var01, #0 wc
28478                 | '                         return 0;
28478     00 FA 05 C6 |  if_b	mov	result1, #0
2847c     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
28480                 | '                 return 1;
28480     01 FA 05 F6 | 	mov	result1, #1
28484     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
28488                 | LR__4241
28488                 | '         }
28488                 | ' 
28488                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
28488     00 00 06 F6 | 	mov	_var01, #0
2848c     10 12 06 F1 | 	add	arg01, #16
28490     09 03 02 FB | 	rdlong	_var02, arg01
28494     10 12 86 F1 | 	sub	arg01, #16
28498     03 02 56 F2 | 	cmps	_var02, #3 wc
2849c     10 00 90 CD |  if_b	jmp	#LR__4242
284a0     10 12 06 F1 | 	add	arg01, #16
284a4     09 05 02 FB | 	rdlong	_var03, arg01
284a8     0A 04 56 F2 | 	cmps	_var03, #10 wc
284ac     01 00 06 C6 |  if_b	mov	_var01, #1
284b0                 | LR__4242
284b0     00 FB 01 F6 | 	mov	result1, _var01
284b4                 | _fatfs_cc___indst_ret
284b4     2D 00 64 FD | 	ret
284b8                 | 
284b8                 | ' 	
284b8                 | ' 	FUNCTION pfunc(c as integer) as integer
284b8                 | ___strs_cl_pfunc
284b8                 | ' 		if (i < 16) then
284b8     04 E4 05 F1 | 	add	objptr, #4
284bc     F2 FA 01 FB | 	rdlong	result1, objptr
284c0     04 E4 85 F1 | 	sub	objptr, #4
284c4     10 FA 55 F2 | 	cmps	result1, #16 wc
284c8     2C 00 90 3D |  if_ae	jmp	#LR__4250
284cc     F2 FA 01 FB | 	rdlong	result1, objptr
284d0     04 E4 05 F1 | 	add	objptr, #4
284d4     F2 00 02 FB | 	rdlong	_var01, objptr
284d8     FD 00 02 F1 | 	add	_var01, result1
284dc     00 13 42 FC | 	wrbyte	arg01, _var01
284e0     F2 FA 01 FB | 	rdlong	result1, objptr
284e4     01 FA 05 F1 | 	add	result1, #1
284e8     F2 FA 61 FC | 	wrlong	result1, objptr
284ec     04 E4 85 F1 | 	sub	objptr, #4
284f0                 | ' 			p(i) = c
284f0                 | ' 			i = i+1
284f0                 | ' 			return 1
284f0     01 FA 05 F6 | 	mov	result1, #1
284f4     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
284f8                 | LR__4250
284f8                 | ' 			return -1
284f8     01 FA 65 F6 | 	neg	result1, #1
284fc                 | ___strs_cl_pfunc_ret
284fc     2D 00 64 FD | 	ret
28500                 | 
28500                 | __struct__s_vfs_file_t_putchar
28500     04 4A 05 F6 | 	mov	COUNT_, #4
28504     A8 00 A0 FD | 	call	#pushregs_
28508     1C E4 05 F1 | 	add	objptr, #28
2850c     F2 1E 0A FB | 	rdlong	local01, objptr wz
28510     1C E4 85 F1 | 	sub	objptr, #28
28514     00 FA 05 A6 |  if_e	mov	result1, #0
28518     48 00 90 AD |  if_e	jmp	#LR__4260
2851c     1C E4 05 F1 | 	add	objptr, #28
28520     F2 20 02 FB | 	rdlong	local02, objptr
28524     10 23 02 F6 | 	mov	local03, local02
28528     1C E4 85 F1 | 	sub	objptr, #28
2852c     13 22 46 F7 | 	zerox	local03, #19
28530     14 20 46 F0 | 	shr	local02, #20
28534     02 20 66 F0 | 	shl	local02, #2
28538     ED 20 02 F1 | 	add	local02, __methods__
2853c     10 21 02 FB | 	rdlong	local02, local02
28540     F2 14 02 F6 | 	mov	arg02, objptr
28544     F2 24 02 F6 | 	mov	local04, objptr
28548     11 E5 01 F6 | 	mov	objptr, local03
2854c     2D 20 62 FD | 	call	local02
28550     12 E5 01 F6 | 	mov	objptr, local04
28554                 | '     return (i < 0) ? 0 : 1;
28554     00 FA 55 F2 | 	cmps	result1, #0 wc
28558     00 1E 06 C6 |  if_b	mov	local01, #0
2855c     01 1E 06 36 |  if_ae	mov	local01, #1
28560     0F FB 01 F6 | 	mov	result1, local01
28564                 | LR__4260
28564     A7 F0 03 F6 | 	mov	ptra, fp
28568     B2 00 A0 FD | 	call	#popregs_
2856c                 | __struct__s_vfs_file_t_putchar_ret
2856c     2D 00 64 FD | 	ret
28570                 | 
28570                 | __struct__s_vfs_file_t_getchar
28570     03 4A 05 F6 | 	mov	COUNT_, #3
28574     A8 00 A0 FD | 	call	#pushregs_
28578     20 E4 05 F1 | 	add	objptr, #32
2857c     F2 12 0A FB | 	rdlong	arg01, objptr wz
28580     20 E4 85 F1 | 	sub	objptr, #32
28584     01 FA 65 A6 |  if_e	neg	result1, #1
28588     38 00 90 AD |  if_e	jmp	#LR__4270
2858c                 | '     return getcf(__this);
2858c     20 E4 05 F1 | 	add	objptr, #32
28590     F2 1E 02 FB | 	rdlong	local01, objptr
28594     0F 21 02 F6 | 	mov	local02, local01
28598     20 E4 85 F1 | 	sub	objptr, #32
2859c     13 20 46 F7 | 	zerox	local02, #19
285a0     14 1E 46 F0 | 	shr	local01, #20
285a4     02 1E 66 F0 | 	shl	local01, #2
285a8     ED 1E 02 F1 | 	add	local01, __methods__
285ac     0F 1F 02 FB | 	rdlong	local01, local01
285b0     F2 12 02 F6 | 	mov	arg01, objptr
285b4     F2 22 02 F6 | 	mov	local03, objptr
285b8     10 E5 01 F6 | 	mov	objptr, local02
285bc     2D 1E 62 FD | 	call	local01
285c0     11 E5 01 F6 | 	mov	objptr, local03
285c4                 | LR__4270
285c4     A7 F0 03 F6 | 	mov	ptra, fp
285c8     B2 00 A0 FD | 	call	#popregs_
285cc                 | __struct__s_vfs_file_t_getchar_ret
285cc     2D 00 64 FD | 	ret
285d0                 | 
285d0                 | __struct___bas_wrap_sender_tx
285d0     03 4A 05 F6 | 	mov	COUNT_, #3
285d4     A8 00 A0 FD | 	call	#pushregs_
285d8     F2 1E 02 FB | 	rdlong	local01, objptr
285dc     0F 21 02 F6 | 	mov	local02, local01
285e0     13 1E 46 F7 | 	zerox	local01, #19
285e4     14 20 46 F0 | 	shr	local02, #20
285e8     02 20 66 F0 | 	shl	local02, #2
285ec     ED 20 02 F1 | 	add	local02, __methods__
285f0     10 21 02 FB | 	rdlong	local02, local02
285f4     F2 22 02 F6 | 	mov	local03, objptr
285f8     0F E5 01 F6 | 	mov	objptr, local01
285fc     2D 20 62 FD | 	call	local02
28600     11 E5 01 F6 | 	mov	objptr, local03
28604     01 FA 05 F6 | 	mov	result1, #1
28608     A7 F0 03 F6 | 	mov	ptra, fp
2860c     B2 00 A0 FD | 	call	#popregs_
28610                 | __struct___bas_wrap_sender_tx_ret
28610     2D 00 64 FD | 	ret
28614                 | 
28614                 | __struct___bas_wrap_sender_rx
28614     03 4A 05 F6 | 	mov	COUNT_, #3
28618     A8 00 A0 FD | 	call	#pushregs_
2861c     04 E4 05 F1 | 	add	objptr, #4
28620     F2 1E 02 FB | 	rdlong	local01, objptr
28624     0F 21 02 F6 | 	mov	local02, local01
28628     04 E4 85 F1 | 	sub	objptr, #4
2862c     13 20 46 F7 | 	zerox	local02, #19
28630     14 1E 46 F0 | 	shr	local01, #20
28634     02 1E 66 F0 | 	shl	local01, #2
28638     ED 1E 02 F1 | 	add	local01, __methods__
2863c     0F 1F 02 FB | 	rdlong	local01, local01
28640     F2 22 02 F6 | 	mov	local03, objptr
28644     10 E5 01 F6 | 	mov	objptr, local02
28648     2D 1E 62 FD | 	call	local01
2864c     11 E5 01 F6 | 	mov	objptr, local03
28650     A7 F0 03 F6 | 	mov	ptra, fp
28654     B2 00 A0 FD | 	call	#popregs_
28658                 | __struct___bas_wrap_sender_rx_ret
28658     2D 00 64 FD | 	ret
2865c                 | 
2865c                 | __struct___bas_wrap_sender_close
2865c     03 4A 05 F6 | 	mov	COUNT_, #3
28660     A8 00 A0 FD | 	call	#pushregs_
28664     08 E4 05 F1 | 	add	objptr, #8
28668     F2 1E 02 FB | 	rdlong	local01, objptr
2866c     0F 21 02 F6 | 	mov	local02, local01
28670     08 E4 85 F1 | 	sub	objptr, #8
28674     13 20 46 F7 | 	zerox	local02, #19
28678     14 1E 46 F0 | 	shr	local01, #20
2867c     02 1E 66 F0 | 	shl	local01, #2
28680     ED 1E 02 F1 | 	add	local01, __methods__
28684     0F 1F 02 FB | 	rdlong	local01, local01
28688     F2 22 02 F6 | 	mov	local03, objptr
2868c     10 E5 01 F6 | 	mov	objptr, local02
28690     2D 1E 62 FD | 	call	local01
28694     11 E5 01 F6 | 	mov	objptr, local03
28698     A7 F0 03 F6 | 	mov	ptra, fp
2869c     B2 00 A0 FD | 	call	#popregs_
286a0                 | __struct___bas_wrap_sender_close_ret
286a0     2D 00 64 FD | 	ret
286a4                 | 
286a4                 | LR__4280
286a4     2F          | 	byte	"/"
286a5     00          | 	byte	0
286a6                 | LR__4281
286a6     69 6E 66    | 	byte	"inf"
286a9     00          | 	byte	0
286aa                 | LR__4282
286aa     6E 61 6E    | 	byte	"nan"
286ad     00          | 	byte	0
286ae                 | LR__4283
286ae                 | 	byte	
286ae     00          | 	byte	0
286af                 | LR__4284
286af                 | 	byte	
286af     00          | 	byte	0
286b0                 | LR__4285
286b0                 | 	byte	
286b0     00          | 	byte	0
286b1                 | LR__4286
286b1                 | 	byte	
286b1     00          | 	byte	0
286b2                 | LR__4287
286b2                 | 	byte	
286b2     00          | 	byte	0
286b3                 | LR__4288
286b3                 | 	byte	
286b3     00          | 	byte	0
286b4                 | LR__4289
286b4                 | 	byte	
286b4     00          | 	byte	0
286b5                 | LR__4290
286b5                 | 	byte	
286b5     00          | 	byte	0
286b6                 | LR__4291
286b6     00          | 	byte	0
286b7     00          | 	byte	0
286b8                 | LR__4292
286b8     00          | 	byte	0
286b9     00          | 	byte	0
286ba                 | LR__4293
286ba     00          | 	byte	0
286bb     00          | 	byte	0
286bc                 | LR__4294
286bc     20 21 21 21 
286c0     20 63 6F 72 
286c4     72 75 70 74 
286c8     65 64 20 68 
286cc     65 61 70 3F 
286d0     3F 3F 20 21 
286d4     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
286d7     00          | 	byte	0
286d8                 | LR__4295
286d8     20 21 21 21 
286dc     20 6F 75 74 
286e0     20 6F 66 20 
286e4     68 65 61 70 
286e8     20 6D 65 6D 
286ec     6F 72 79 20 
286f0     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
286f4     00          | 	byte	0
286f5                 | LR__4296
286f5     20 21 21 21 
286f9     20 63 6F 72 
286fd     72 75 70 74 
28701     65 64 20 68 
28705     65 61 70 20 
28709     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2870d     00          | 	byte	0
2870e                 | LR__4297
2870e     00          | 	byte	0
2870f     00          | 	byte	0
28710                 | LR__4298
28710     2E          | 	byte	"."
28711     00          | 	byte	0
28712                 | LR__4299
28712     00          | 	byte	0
28713     00          | 	byte	0
28714                 | LR__4300
28714     00          | 	byte	0
28715     00          | 	byte	0
28716                 | LR__4301
28716     00          | 	byte	0
28717     00          | 	byte	0
28718                 | LR__4302
28718     2A 3A 3C 3E 
2871c     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
28720     00          | 	byte	0
28721                 | LR__4303
28721     2B 2C 3B 3D 
28725     5B 5D       | 	byte	"+,;=[]"
28727     00          | 	byte	0
28728                 | LR__4304
28728     46 41 54 33 
2872c     32 20 20 20 | 	byte	"FAT32   "
28730     00          | 	byte	0
28731                 | LR__4305
28731     54 5A       | 	byte	"TZ"
28733     00          | 	byte	0
28734                 | LR__4306
28734     00          | 	byte	0
28735     00          | 	byte	0
28736                 | LR__4307
28736                 | 	byte	
28736     00          | 	byte	0
28737                 | LR__4308
28737                 | 	byte	
28737     00          | 	byte	0
28738                 | LR__4309
28738     22          | 	byte	34
28739     00          | 	byte	0
2873a                 | LR__4310
2873a     22          | 	byte	34
2873b     00          | 	byte	0
2873c                 | LR__4311
2873c     3A          | 	byte	":"
2873d     00          | 	byte	0
2873e                 | LR__4312
2873e                 | 	byte	
2873e     00          | 	byte	0
2873f                 | LR__4313
2873f                 | 	byte	
2873f     00          | 	byte	0
28740                 | LR__4314
28740                 | 	byte	
28740     00          | 	byte	0
28741                 | LR__4315
28741                 | 	byte	
28741     00          | 	byte	0
28742                 | LR__4316
28742                 | 	byte	
28742     00          | 	byte	0
28743                 | LR__4317
28743                 | 	byte	
28743     00          | 	byte	0
28744                 | LR__4318
28744                 | 	byte	
28744     00          | 	byte	0
28745                 | LR__4319
28745     22          | 	byte	34
28746     00          | 	byte	0
28747                 | LR__4320
28747     22          | 	byte	34
28748     00          | 	byte	0
28749                 | LR__4321
28749     22          | 	byte	34
2874a     00          | 	byte	0
2874b                 | LR__4322
2874b     22          | 	byte	34
2874c     00          | 	byte	0
2874d                 | LR__4323
2874d     22          | 	byte	34
2874e     00          | 	byte	0
2874f                 | LR__4324
2874f     3E          | 	byte	">"
28750     00          | 	byte	0
28751                 | LR__4325
28751     3E          | 	byte	">"
28752     00          | 	byte	0
28753                 | LR__4326
28753     2B          | 	byte	"+"
28754     00          | 	byte	0
28755                 | LR__4327
28755     2D          | 	byte	"-"
28756     00          | 	byte	0
28757                 | LR__4328
28757     2A          | 	byte	"*"
28758     00          | 	byte	0
28759                 | LR__4329
28759     2F          | 	byte	"/"
2875a     00          | 	byte	0
2875b                 | LR__4330
2875b     5E          | 	byte	"^"
2875c     00          | 	byte	0
2875d                 | LR__4331
2875d     3D          | 	byte	"="
2875e     00          | 	byte	0
2875f                 | LR__4332
2875f     2B          | 	byte	"+"
28760     00          | 	byte	0
28761                 | LR__4333
28761     2B          | 	byte	"+"
28762     00          | 	byte	0
28763                 | LR__4334
28763     2D          | 	byte	"-"
28764     00          | 	byte	0
28765                 | LR__4335
28765     2D          | 	byte	"-"
28766     00          | 	byte	0
28767                 | LR__4336
28767     3C          | 	byte	"<"
28768     00          | 	byte	0
28769                 | LR__4337
28769     3E          | 	byte	">"
2876a     00          | 	byte	0
2876b                 | LR__4338
2876b     22          | 	byte	34
2876c     00          | 	byte	0
2876d                 | LR__4339
2876d     22          | 	byte	34
2876e     00          | 	byte	0
2876f                 | LR__4340
2876f     2E          | 	byte	"."
28770     00          | 	byte	0
28771                 | LR__4341
28771     3F          | 	byte	"?"
28772     00          | 	byte	0
28773                 | LR__4342
28773     3F          | 	byte	"?"
28774     00          | 	byte	0
28775                 | LR__4343
28775     6D 6F 75 73 
28779     65          | 	byte	"mouse"
2877a     00          | 	byte	0
2877b                 | LR__4344
2877b     63 75 72 73 
2877f     6F 72       | 	byte	"cursor"
28781     00          | 	byte	0
28782                 | LR__4345
28782     63 6C 69 63 
28786     6B          | 	byte	"click"
28787     00          | 	byte	0
28788                 | LR__4346
28788     6F 6E       | 	byte	"on"
2878a     00          | 	byte	0
2878b                 | LR__4347
2878b     31          | 	byte	"1"
2878c     00          | 	byte	0
2878d                 | LR__4348
2878d     6F 66 66    | 	byte	"off"
28790     00          | 	byte	0
28791                 | LR__4349
28791     30          | 	byte	"0"
28792     00          | 	byte	0
28793                 | LR__4350
28793     6D 6F 64 65 | 	byte	"mode"
28797     00          | 	byte	0
28798                 | LR__4351
28798     6D 2E       | 	byte	"m."
2879a     00          | 	byte	0
2879b                 | LR__4352
2879b     61 74 61 72 
2879f     69          | 	byte	"atari"
287a0     00          | 	byte	0
287a1                 | LR__4353
287a1     30          | 	byte	"0"
287a2     00          | 	byte	0
287a3                 | LR__4354
287a3     70 63 5F 61 
287a7     6D 62 65 72 | 	byte	"pc_amber"
287ab     00          | 	byte	0
287ac                 | LR__4355
287ac     31          | 	byte	"1"
287ad     00          | 	byte	0
287ae                 | LR__4356
287ae     70 63 5F 67 
287b2     72 65 65 6E | 	byte	"pc_green"
287b6     00          | 	byte	0
287b7                 | LR__4357
287b7     32          | 	byte	"2"
287b8     00          | 	byte	0
287b9                 | LR__4358
287b9     70 63 5F 77 
287bd     68 69 74 65 | 	byte	"pc_white"
287c1     00          | 	byte	0
287c2                 | LR__4359
287c2     33          | 	byte	"3"
287c3     00          | 	byte	0
287c4                 | LR__4360
287c4     73 74       | 	byte	"st"
287c6     00          | 	byte	0
287c7                 | LR__4361
287c7     34          | 	byte	"4"
287c8     00          | 	byte	0
287c9                 | LR__4362
287c9                 | 	byte	
287c9     00          | 	byte	0
287ca                 | LR__4363
287ca     6C 6F 61 64 | 	byte	"load"
287ce     00          | 	byte	0
287cf                 | LR__4364
287cf     73 61 76 65 | 	byte	"save"
287d3     00          | 	byte	0
287d4                 | LR__4365
287d4     62 72 75 6E | 	byte	"brun"
287d8     00          | 	byte	0
287d9                 | LR__4366
287d9     6C 6F 2E    | 	byte	"lo."
287dc     00          | 	byte	0
287dd                 | LR__4367
287dd     73 2E       | 	byte	"s."
287df     00          | 	byte	0
287e0                 | LR__4368
287e0     62 72 2E    | 	byte	"br."
287e3     00          | 	byte	0
287e4                 | LR__4369
287e4                 | 	byte	
287e4     00          | 	byte	0
287e5                 | LR__4370
287e5                 | 	byte	
287e5     00          | 	byte	0
287e6                 | LR__4371
287e6                 | 	byte	
287e6     00          | 	byte	0
287e7                 | LR__4372
287e7                 | 	byte	
287e7     00          | 	byte	0
287e8                 | LR__4373
287e8     20 55 73 65 
287ec     72 20 66 75 
287f0     6E 63 74 69 
287f4     6F 6E 73 20 
287f8     61 6E 64 20 
287fc     61 72 72 61 
28800     79 73 20 6E 
28804     6F 74 20 79 
28808     65 74 20 69 
2880c     6D 70 6C 65 
28810     6D 65 6E 74 
28814     65 64       | 	byte	" User functions and arrays not yet implemented"
28816     00          | 	byte	0
28817                 | LR__4374
28817                 | 	byte	
28817     00          | 	byte	0
28818                 | LR__4375
28818                 | 	byte	
28818     00          | 	byte	0
28819                 | LR__4376
28819     52 65 61 64 
2881d     79          | 	byte	"Ready"
2881e     00          | 	byte	0
2881f                 | LR__4377
2881f     2B          | 	byte	"+"
28820     00          | 	byte	0
28821                 | LR__4378
28821     2D          | 	byte	"-"
28822     00          | 	byte	0
28823                 | LR__4379
28823     6F 72       | 	byte	"or"
28825     00          | 	byte	0
28826                 | LR__4380
28826     78 6F 72    | 	byte	"xor"
28829     00          | 	byte	0
2882a                 | LR__4381
2882a     2A          | 	byte	"*"
2882b     00          | 	byte	0
2882c                 | LR__4382
2882c     2F          | 	byte	"/"
2882d     00          | 	byte	0
2882e                 | LR__4383
2882e     61 6E 64    | 	byte	"and"
28831     00          | 	byte	0
28832                 | LR__4384
28832     64 69 76    | 	byte	"div"
28835     00          | 	byte	0
28836                 | LR__4385
28836     6D 6F 64    | 	byte	"mod"
28839     00          | 	byte	0
2883a                 | LR__4386
2883a     73 68 6C    | 	byte	"shl"
2883d     00          | 	byte	0
2883e                 | LR__4387
2883e     73 68 72    | 	byte	"shr"
28841     00          | 	byte	0
28842                 | LR__4388
28842     5E          | 	byte	"^"
28843     00          | 	byte	0
28844                 | LR__4389
28844     6E 6F 74    | 	byte	"not"
28847     00          | 	byte	0
28848                 | LR__4390
28848     40          | 	byte	"@"
28849     00          | 	byte	0
2884a                 | LR__4391
2884a     3D          | 	byte	"="
2884b     00          | 	byte	0
2884c                 | LR__4392
2884c     3E 3D       | 	byte	">="
2884e     00          | 	byte	0
2884f                 | LR__4393
2884f     3C 3D       | 	byte	"<="
28851     00          | 	byte	0
28852                 | LR__4394
28852     3C          | 	byte	"<"
28853     00          | 	byte	0
28854                 | LR__4395
28854     3E          | 	byte	">"
28855     00          | 	byte	0
28856                 | LR__4396
28856     3C 3E       | 	byte	"<>"
28858     00          | 	byte	0
28859                 | LR__4397
28859     2B 2B       | 	byte	"++"
2885b     00          | 	byte	0
2885c                 | LR__4398
2885c     2D 2D       | 	byte	"--"
2885e     00          | 	byte	0
2885f                 | LR__4399
2885f     2B          | 	byte	"+"
28860     00          | 	byte	0
28861                 | LR__4400
28861     2D          | 	byte	"-"
28862     00          | 	byte	0
28863                 | LR__4401
28863     3D          | 	byte	"="
28864     00          | 	byte	0
28865                 | LR__4402
28865     2C          | 	byte	","
28866     00          | 	byte	0
28867                 | LR__4403
28867     2A          | 	byte	"*"
28868     00          | 	byte	0
28869                 | LR__4404
28869     2F          | 	byte	"/"
2886a     00          | 	byte	0
2886b                 | LR__4405
2886b     3B          | 	byte	";"
2886c     00          | 	byte	0
2886d                 | LR__4406
2886d     22          | 	byte	34
2886e     00          | 	byte	0
2886f                 | LR__4407
2886f     5E          | 	byte	"^"
28870     00          | 	byte	0
28871                 | LR__4408
28871     29          | 	byte	")"
28872     00          | 	byte	0
28873                 | LR__4409
28873     28          | 	byte	"("
28874     00          | 	byte	0
28875                 | LR__4410
28875     3A          | 	byte	":"
28876     00          | 	byte	0
28877                 | LR__4411
28877     20          | 	byte	" "
28878     00          | 	byte	0
28879                 | LR__4412
28879     3E          | 	byte	">"
2887a     00          | 	byte	0
2887b                 | LR__4413
2887b     3C          | 	byte	"<"
2887c     00          | 	byte	0
2887d                 | LR__4414
2887d     3D          | 	byte	"="
2887e     00          | 	byte	0
2887f                 | LR__4415
2887f     62 65 65 70 | 	byte	"beep"
28883     00          | 	byte	0
28884                 | LR__4416
28884     62 2E       | 	byte	"b."
28886     00          | 	byte	0
28887                 | LR__4417
28887     62 6F 78    | 	byte	"box"
2888a     00          | 	byte	0
2888b                 | LR__4418
2888b     62 72 75 6E | 	byte	"brun"
2888f     00          | 	byte	0
28890                 | LR__4419
28890     62 72 2E    | 	byte	"br."
28893     00          | 	byte	0
28894                 | LR__4420
28894     63 69 72 63 
28898     6C 65       | 	byte	"circle"
2889a     00          | 	byte	0
2889b                 | LR__4421
2889b     63 69 2E    | 	byte	"ci."
2889e     00          | 	byte	0
2889f                 | LR__4422
2889f     63 6C 69 63 
288a3     6B          | 	byte	"click"
288a4     00          | 	byte	0
288a5                 | LR__4423
288a5     63 6C 73    | 	byte	"cls"
288a8     00          | 	byte	0
288a9                 | LR__4424
288a9     63 6F 6C 6F 
288ad     72          | 	byte	"color"
288ae     00          | 	byte	0
288af                 | LR__4425
288af     63 2E       | 	byte	"c."
288b1     00          | 	byte	0
288b2                 | LR__4426
288b2     63 73 61 76 
288b6     65          | 	byte	"csave"
288b7     00          | 	byte	0
288b8                 | LR__4427
288b8     63 73 2E    | 	byte	"cs."
288bb     00          | 	byte	0
288bc                 | LR__4428
288bc     63 75 72 73 
288c0     6F 72       | 	byte	"cursor"
288c2     00          | 	byte	0
288c3                 | LR__4429
288c3     64 65 66 73 
288c7     6E 64       | 	byte	"defsnd"
288c9     00          | 	byte	0
288ca                 | LR__4430
288ca     64 65 66 65 
288ce     6E 76       | 	byte	"defenv"
288d0     00          | 	byte	0
288d1                 | LR__4431
288d1     64 65 66 73 
288d5     70 72 69 74 
288d9     65          | 	byte	"defsprite"
288da     00          | 	byte	0
288db                 | LR__4432
288db     64 73 2E    | 	byte	"ds."
288de     00          | 	byte	0
288df                 | LR__4433
288df     64 65 67    | 	byte	"deg"
288e2     00          | 	byte	0
288e3                 | LR__4434
288e3     64 69 6D    | 	byte	"dim"
288e6     00          | 	byte	0
288e7                 | LR__4435
288e7     64 69 72    | 	byte	"dir"
288ea     00          | 	byte	0
288eb                 | LR__4436
288eb     64 72 61 77 | 	byte	"draw"
288ef     00          | 	byte	0
288f0                 | LR__4437
288f0     64 72 2E    | 	byte	"dr."
288f3     00          | 	byte	0
288f4                 | LR__4438
288f4     65 6C 73 65 | 	byte	"else"
288f8     00          | 	byte	0
288f9                 | LR__4439
288f9     66 63 69 72 
288fd     63 6C 65    | 	byte	"fcircle"
28900     00          | 	byte	0
28901                 | LR__4440
28901     66 63 2E    | 	byte	"fc."
28904     00          | 	byte	0
28905                 | LR__4441
28905     66 69 6C 6C | 	byte	"fill"
28909     00          | 	byte	0
2890a                 | LR__4442
2890a     66 69 2E    | 	byte	"fi."
2890d     00          | 	byte	0
2890e                 | LR__4443
2890e     66 6F 6E 74 | 	byte	"font"
28912     00          | 	byte	0
28913                 | LR__4444
28913     66 6F 72    | 	byte	"for"
28916     00          | 	byte	0
28917                 | LR__4445
28917     66 2E       | 	byte	"f."
28919     00          | 	byte	0
2891a                 | LR__4446
2891a     66 72 61 6D 
2891e     65          | 	byte	"frame"
2891f     00          | 	byte	0
28920                 | LR__4447
28920     66 72 2E    | 	byte	"fr."
28923     00          | 	byte	0
28924                 | LR__4448
28924     67 6F 74 6F | 	byte	"goto"
28928     00          | 	byte	0
28929                 | LR__4449
28929     67 2E       | 	byte	"g."
2892b     00          | 	byte	0
2892c                 | LR__4450
2892c     69 66       | 	byte	"if"
2892e     00          | 	byte	0
2892f                 | LR__4451
2892f     69 6E 6B    | 	byte	"ink"
28932     00          | 	byte	0
28933                 | LR__4452
28933     69 2E       | 	byte	"i."
28935     00          | 	byte	0
28936                 | LR__4453
28936     69 6E 74    | 	byte	"int"
28939     00          | 	byte	0
2893a                 | LR__4454
2893a     6C 69 73 74 | 	byte	"list"
2893e     00          | 	byte	0
2893f                 | LR__4455
2893f     6C 2E       | 	byte	"l."
28941     00          | 	byte	0
28942                 | LR__4456
28942     6C 6F 61 64 | 	byte	"load"
28946     00          | 	byte	0
28947                 | LR__4457
28947     6C 6F 2E    | 	byte	"lo."
2894a     00          | 	byte	0
2894b                 | LR__4458
2894b     6D 6F 64 65 | 	byte	"mode"
2894f     00          | 	byte	0
28950                 | LR__4459
28950     6D 2E       | 	byte	"m."
28952     00          | 	byte	0
28953                 | LR__4460
28953     6D 6F 75 73 
28957     65          | 	byte	"mouse"
28958     00          | 	byte	0
28959                 | LR__4461
28959     6E 65 77    | 	byte	"new"
2895c     00          | 	byte	0
2895d                 | LR__4462
2895d     6E 65 78 74 | 	byte	"next"
28961     00          | 	byte	0
28962                 | LR__4463
28962     6E 2E       | 	byte	"n."
28964     00          | 	byte	0
28965                 | LR__4464
28965     70 61 70 65 
28969     72          | 	byte	"paper"
2896a     00          | 	byte	0
2896b                 | LR__4465
2896b     70 2E       | 	byte	"p."
2896d     00          | 	byte	0
2896e                 | LR__4466
2896e     70 69 6E 66 
28972     6C 6F 61 74 | 	byte	"pinfloat"
28976     00          | 	byte	0
28977                 | LR__4467
28977     70 69 6E 68 
2897b     69          | 	byte	"pinhi"
2897c     00          | 	byte	0
2897d                 | LR__4468
2897d     70 69 6E 6C 
28981     6F          | 	byte	"pinlo"
28982     00          | 	byte	0
28983                 | LR__4469
28983     70 69 6E 73 
28987     74 61 72 74 | 	byte	"pinstart"
2898b     00          | 	byte	0
2898c                 | LR__4470
2898c     70 69 6E 74 
28990     6F 67 67 6C 
28994     65          | 	byte	"pintoggle"
28995     00          | 	byte	0
28996                 | LR__4471
28996     70 69 6E 77 
2899a     72 69 74 65 | 	byte	"pinwrite"
2899e     00          | 	byte	0
2899f                 | LR__4472
2899f     70 6C 61 79 | 	byte	"play"
289a3     00          | 	byte	0
289a4                 | LR__4473
289a4     70 6C 6F 74 | 	byte	"plot"
289a8     00          | 	byte	0
289a9                 | LR__4474
289a9     70 6C 2E    | 	byte	"pl."
289ac     00          | 	byte	0
289ad                 | LR__4475
289ad     70 6F 73 69 
289b1     74 69 6F 6E | 	byte	"position"
289b5     00          | 	byte	0
289b6                 | LR__4476
289b6     70 6F 73 2E | 	byte	"pos."
289ba     00          | 	byte	0
289bb                 | LR__4477
289bb     70 72 69 6E 
289bf     74          | 	byte	"print"
289c0     00          | 	byte	0
289c1                 | LR__4478
289c1     3F          | 	byte	"?"
289c2     00          | 	byte	0
289c3                 | LR__4479
289c3     72 61 64    | 	byte	"rad"
289c6     00          | 	byte	0
289c7                 | LR__4480
289c7     72 75 6E    | 	byte	"run"
289ca     00          | 	byte	0
289cb                 | LR__4481
289cb     73 61 76 65 | 	byte	"save"
289cf     00          | 	byte	0
289d0                 | LR__4482
289d0     73 2E       | 	byte	"s."
289d2     00          | 	byte	0
289d3                 | LR__4483
289d3     73 6F 75 6E 
289d7     64          | 	byte	"sound"
289d8     00          | 	byte	0
289d9                 | LR__4484
289d9     73 6F 2E    | 	byte	"so."
289dc     00          | 	byte	0
289dd                 | LR__4485
289dd     73 70 72 69 
289e1     74 65       | 	byte	"sprite"
289e3     00          | 	byte	0
289e4                 | LR__4486
289e4     73 70 2E    | 	byte	"sp."
289e7     00          | 	byte	0
289e8                 | LR__4487
289e8     74 68 65 6E | 	byte	"then"
289ec     00          | 	byte	0
289ed                 | LR__4488
289ed     77 61 69 74 
289f1     6D 73       | 	byte	"waitms"
289f3     00          | 	byte	0
289f4                 | LR__4489
289f4     77 61 69 74 
289f8     63 6C 6F 63 
289fc     6B          | 	byte	"waitclock"
289fd     00          | 	byte	0
289fe                 | LR__4490
289fe     77 63 2E    | 	byte	"wc."
28a01     00          | 	byte	0
28a02                 | LR__4491
28a02     77 61 69 74 
28a06     76 62 6C    | 	byte	"waitvbl"
28a09     00          | 	byte	0
28a0a                 | LR__4492
28a0a     77 76 2E    | 	byte	"wv."
28a0d     00          | 	byte	0
28a0e                 | LR__4493
28a0e     77 78 70 69 
28a12     6E          | 	byte	"wxpin"
28a13     00          | 	byte	0
28a14                 | LR__4494
28a14     77 79 70 69 
28a18     6E          | 	byte	"wypin"
28a19     00          | 	byte	0
28a1a                 | LR__4495
28a1a     61 63 6F 73 | 	byte	"acos"
28a1e     00          | 	byte	0
28a1f                 | LR__4496
28a1f     61 73 69 6E | 	byte	"asin"
28a23     00          | 	byte	0
28a24                 | LR__4497
28a24     61 74 6E    | 	byte	"atn"
28a27     00          | 	byte	0
28a28                 | LR__4498
28a28     63 6F 73    | 	byte	"cos"
28a2b     00          | 	byte	0
28a2c                 | LR__4499
28a2c     67 65 74 70 
28a30     69 78 65 6C | 	byte	"getpixel"
28a34     00          | 	byte	0
28a35                 | LR__4500
28a35     67 65 2E    | 	byte	"ge."
28a38     00          | 	byte	0
28a39                 | LR__4501
28a39     67 65 74 74 
28a3d     69 6D 65    | 	byte	"gettime"
28a40     00          | 	byte	0
28a41                 | LR__4502
28a41     6D 6F 75 73 
28a45     65 6B       | 	byte	"mousek"
28a47     00          | 	byte	0
28a48                 | LR__4503
28a48     6D 6F 75 73 
28a4c     65 77       | 	byte	"mousew"
28a4e     00          | 	byte	0
28a4f                 | LR__4504
28a4f     6D 6F 75 73 
28a53     65 78       | 	byte	"mousex"
28a55     00          | 	byte	0
28a56                 | LR__4505
28a56     6D 6F 75 73 
28a5a     65 79       | 	byte	"mousey"
28a5c     00          | 	byte	0
28a5d                 | LR__4506
28a5d     70 69 6E 72 
28a61     65 61 64    | 	byte	"pinread"
28a64     00          | 	byte	0
28a65                 | LR__4507
28a65     72 64 70 69 
28a69     6E          | 	byte	"rdpin"
28a6a     00          | 	byte	0
28a6b                 | LR__4508
28a6b     72 71 70 69 
28a6f     6E          | 	byte	"rqpin"
28a70     00          | 	byte	0
28a71                 | LR__4509
28a71     72 6E 64    | 	byte	"rnd"
28a74     00          | 	byte	0
28a75                 | LR__4510
28a75     73 69 6E    | 	byte	"sin"
28a78     00          | 	byte	0
28a79                 | LR__4511
28a79     73 71 72    | 	byte	"sqr"
28a7c     00          | 	byte	0
28a7d                 | LR__4512
28a7d     73 74 69 63 
28a81     6B          | 	byte	"stick"
28a82     00          | 	byte	0
28a83                 | LR__4513
28a83     73 74 72 69 
28a87     67          | 	byte	"strig"
28a88     00          | 	byte	0
28a89                 | LR__4514
28a89     74 61 6E    | 	byte	"tan"
28a8c     00          | 	byte	0
28a8d                 | LR__4515
28a8d     61          | 	byte	"a"
28a8e     00          | 	byte	0
28a8f                 | LR__4516
28a8f     7A          | 	byte	"z"
28a90     00          | 	byte	0
28a91                 | LR__4517
28a91     5F          | 	byte	"_"
28a92     00          | 	byte	0
28a93                 | LR__4518
28a93     61          | 	byte	"a"
28a94     00          | 	byte	0
28a95                 | LR__4519
28a95     7A          | 	byte	"z"
28a96     00          | 	byte	0
28a97                 | LR__4520
28a97     30          | 	byte	"0"
28a98     00          | 	byte	0
28a99                 | LR__4521
28a99     39          | 	byte	"9"
28a9a     00          | 	byte	0
28a9b                 | LR__4522
28a9b     5F          | 	byte	"_"
28a9c     00          | 	byte	0
28a9d                 | LR__4523
28a9d     2E          | 	byte	"."
28a9e     00          | 	byte	0
28a9f                 | LR__4524
28a9f     61          | 	byte	"a"
28aa0     00          | 	byte	0
28aa1                 | LR__4525
28aa1     7A          | 	byte	"z"
28aa2     00          | 	byte	0
28aa3                 | LR__4526
28aa3     30          | 	byte	"0"
28aa4     00          | 	byte	0
28aa5                 | LR__4527
28aa5     39          | 	byte	"9"
28aa6     00          | 	byte	0
28aa7                 | LR__4528
28aa7     5F          | 	byte	"_"
28aa8     00          | 	byte	0
28aa9                 | LR__4529
28aa9     24          | 	byte	"$"
28aaa     00          | 	byte	0
28aab                 | LR__4530
28aab     25          | 	byte	"%"
28aac     00          | 	byte	0
28aad                 | LR__4531
28aad     21          | 	byte	"!"
28aae     00          | 	byte	0
28aaf                 | LR__4532
28aaf     30          | 	byte	"0"
28ab0     00          | 	byte	0
28ab1                 | LR__4533
28ab1     39          | 	byte	"9"
28ab2     00          | 	byte	0
28ab3                 | LR__4534
28ab3     2E          | 	byte	"."
28ab4     00          | 	byte	0
28ab5                 | LR__4535
28ab5     24          | 	byte	"$"
28ab6     00          | 	byte	0
28ab7                 | LR__4536
28ab7     25          | 	byte	"%"
28ab8     00          | 	byte	0
28ab9                 | LR__4537
28ab9     2D          | 	byte	"-"
28aba     00          | 	byte	0
28abb                 | LR__4538
28abb     2E          | 	byte	"."
28abc     00          | 	byte	0
28abd                 | LR__4539
28abd     30          | 	byte	"0"
28abe     00          | 	byte	0
28abf                 | LR__4540
28abf     39          | 	byte	"9"
28ac0     00          | 	byte	0
28ac1                 | LR__4541
28ac1     5F          | 	byte	"_"
28ac2     00          | 	byte	0
28ac3                 | LR__4542
28ac3     2E          | 	byte	"."
28ac4     00          | 	byte	0
28ac5                 | LR__4543
28ac5     45          | 	byte	"E"
28ac6     00          | 	byte	0
28ac7                 | LR__4544
28ac7     65          | 	byte	"e"
28ac8     00          | 	byte	0
28ac9                 | LR__4545
28ac9     2D          | 	byte	"-"
28aca     00          | 	byte	0
28acb                 | LR__4546
28acb     2D          | 	byte	"-"
28acc     00          | 	byte	0
28acd                 | LR__4547
28acd     65          | 	byte	"e"
28ace     00          | 	byte	0
28acf                 | LR__4548
28acf     2E          | 	byte	"."
28ad0     00          | 	byte	0
28ad1                 | LR__4549
28ad1     45          | 	byte	"E"
28ad2     00          | 	byte	0
28ad3                 | LR__4550
28ad3     65          | 	byte	"e"
28ad4     00          | 	byte	0
28ad5                 | LR__4551
28ad5     30          | 	byte	"0"
28ad6     00          | 	byte	0
28ad7                 | LR__4552
28ad7     39          | 	byte	"9"
28ad8     00          | 	byte	0
28ad9                 | LR__4553
28ad9     24          | 	byte	"$"
28ada     00          | 	byte	0
28adb                 | LR__4554
28adb     25          | 	byte	"%"
28adc     00          | 	byte	0
28add                 | LR__4555
28add     2D          | 	byte	"-"
28ade     00          | 	byte	0
28adf                 | LR__4556
28adf     30          | 	byte	"0"
28ae0     00          | 	byte	0
28ae1                 | LR__4557
28ae1     39          | 	byte	"9"
28ae2     00          | 	byte	0
28ae3                 | LR__4558
28ae3     5F          | 	byte	"_"
28ae4     00          | 	byte	0
28ae5                 | LR__4559
28ae5     30          | 	byte	"0"
28ae6     00          | 	byte	0
28ae7                 | LR__4560
28ae7     39          | 	byte	"9"
28ae8     00          | 	byte	0
28ae9                 | LR__4561
28ae9     5F          | 	byte	"_"
28aea     00          | 	byte	0
28aeb                 | LR__4562
28aeb     22          | 	byte	34
28aec     00          | 	byte	0
28aed                 | LR__4563
28aed     22          | 	byte	34
28aee     00          | 	byte	0
28aef                 | LR__4564
28aef     44 69 6D 3A 
28af3     20 61 74 20 
28af7     6C 69 6E 65 
28afb     20          | 	byte	"Dim: at line "
28afc     00          | 	byte	0
28afd                 | LR__4565
28afd     3A 20 77 61 
28b01     72 6E 69 6E 
28b05     67 3A 20 74 
28b09     68 65 20 76 
28b0d     61 72 69 61 
28b11     62 6C 65 20 
28b15     65 78 69 73 
28b19     74 65 64 2E | 	byte	": warning: the variable existed."
28b1d     00          | 	byte	0
28b1e                 | LR__4566
28b1e     28          | 	byte	"("
28b1f     00          | 	byte	0
28b20                 | LR__4567
28b20     61 73       | 	byte	"as"
28b22     00          | 	byte	0
28b23                 | LR__4568
28b23     61 73       | 	byte	"as"
28b25     00          | 	byte	0
28b26                 | LR__4569
28b26     2C          | 	byte	","
28b27     00          | 	byte	0
28b28                 | LR__4570
28b28     29          | 	byte	")"
28b29     00          | 	byte	0
28b2a                 | LR__4571
28b2a     29          | 	byte	")"
28b2b     00          | 	byte	0
28b2c                 | LR__4572
28b2c     61 73       | 	byte	"as"
28b2e     00          | 	byte	0
28b2f                 | LR__4573
28b2f     62 79 74 65 | 	byte	"byte"
28b33     00          | 	byte	0
28b34                 | LR__4574
28b34     75 62 79 74 
28b38     65          | 	byte	"ubyte"
28b39     00          | 	byte	0
28b3a                 | LR__4575
28b3a     73 68 6F 72 
28b3e     74          | 	byte	"short"
28b3f     00          | 	byte	0
28b40                 | LR__4576
28b40     75 73 68 6F 
28b44     72 74       | 	byte	"ushort"
28b46     00          | 	byte	0
28b47                 | LR__4577
28b47     6C 6F 6E 67 | 	byte	"long"
28b4b     00          | 	byte	0
28b4c                 | LR__4578
28b4c     69 6E 74 65 
28b50     67 65 72    | 	byte	"integer"
28b53     00          | 	byte	0
28b54                 | LR__4579
28b54     75 6C 6F 6E 
28b58     67          | 	byte	"ulong"
28b59     00          | 	byte	0
28b5a                 | LR__4580
28b5a     69 6E 74 36 
28b5e     34          | 	byte	"int64"
28b5f     00          | 	byte	0
28b60                 | LR__4581
28b60     75 69 6E 74 
28b64     36 34       | 	byte	"uint64"
28b66     00          | 	byte	0
28b67                 | LR__4582
28b67     73 69 6E 67 
28b6b     6C 65       | 	byte	"single"
28b6d     00          | 	byte	0
28b6e                 | LR__4583
28b6e     64 6F 75 62 
28b72     6C 65       | 	byte	"double"
28b74     00          | 	byte	0
28b75                 | LR__4584
28b75     73 74 72 69 
28b79     6E 67       | 	byte	"string"
28b7b     00          | 	byte	0
28b7c                 | LR__4585
28b7c     74 6F       | 	byte	"to"
28b7e     00          | 	byte	0
28b7f                 | LR__4586
28b7f     73 74 65 70 | 	byte	"step"
28b83     00          | 	byte	0
28b84                 | LR__4587
28b84     73 2E       | 	byte	"s."
28b86     00          | 	byte	0
28b87                 | LR__4588
28b87     57 65 20 68 
28b8b     61 76 65 20 
28b8f     61 20 73 6C 
28b93     6F 77 20 67 
28b97     6F 74 6F 2C 
28b9b     20 74 6F 64 
28b9f     6F 20 20    | 	byte	"We have a slow goto, todo  "
28ba2     00          | 	byte	0
28ba3                 | LR__4589
28ba3     6E 6F 6E 61 
28ba7     6D 65 2E 62 
28bab     61 73       | 	byte	"noname.bas"
28bad     00          | 	byte	0
28bae                 | LR__4590
28bae                 | 	byte	
28bae     00          | 	byte	0
28baf                 | LR__4591
28baf     6E 6F 6E 61 
28bb3     6D 65 2E 62 
28bb7     61 73       | 	byte	"noname.bas"
28bb9     00          | 	byte	0
28bba                 | LR__4592
28bba     2F          | 	byte	"/"
28bbb     00          | 	byte	0
28bbc                 | LR__4593
28bbc                 | 	byte	
28bbc     00          | 	byte	0
28bbd                 | LR__4594
28bbd                 | 	byte	
28bbd     00          | 	byte	0
28bbe                 | LR__4595
28bbe     6E 6F 6E 61 
28bc2     6D 65 2E 62 
28bc6     61 73       | 	byte	"noname.bas"
28bc8     00          | 	byte	0
28bc9                 | LR__4596
28bc9     2F          | 	byte	"/"
28bca     00          | 	byte	0
28bcb                 | LR__4597
28bcb     53 79 73 74 
28bcf     65 6D 20 65 
28bd3     72 72 6F 72 
28bd7     20          | 	byte	"System error "
28bd8     00          | 	byte	0
28bd9                 | LR__4598
28bd9     3A 20       | 	byte	": "
28bdb     00          | 	byte	0
28bdc                 | LR__4599
28bdc     2F          | 	byte	"/"
28bdd     00          | 	byte	0
28bde                 | LR__4600
28bde     30          | 	byte	"0"
28bdf     00          | 	byte	0
28be0                 | LR__4601
28be0     39          | 	byte	"9"
28be1     00          | 	byte	0
28be2                 | LR__4602
28be2                 | 	byte	
28be2     00          | 	byte	0
28be3                 | LR__4603
28be3     53 74 6F 70 
28be7     70 65 64 20 
28beb     61 74 20 6C 
28bef     69 6E 65 20 | 	byte	"Stopped at line "
28bf3     00          | 	byte	0
28bf4                 | LR__4604
28bf4                 | 	byte	
28bf4     00          | 	byte	0
28bf5                 | LR__4605
28bf5                 | 	byte	
28bf5     00          | 	byte	0
28bf6                 | LR__4606
28bf6     2F 73 64 2F 
28bfa     6D 65 64 69 
28bfe     61 2F 68 2F | 	byte	"/sd/media/h/"
28c02     00          | 	byte	0
28c03                 | LR__4607
28c03     53 79 73 74 
28c07     65 6D 20 65 
28c0b     72 72 6F 72 
28c0f     20          | 	byte	"System error "
28c10     00          | 	byte	0
28c11                 | LR__4608
28c11     3A 20       | 	byte	": "
28c13     00          | 	byte	0
28c14                 | LR__4609
28c14                 | 	byte	
28c14     00          | 	byte	0
28c15                 | LR__4610
28c15                 | 	byte	
28c15     00          | 	byte	0
28c16                 | LR__4611
28c16     2F 73 64 2F 
28c1a     6D 65 64 69 
28c1e     61 2F 73 2F | 	byte	"/sd/media/s/"
28c22     00          | 	byte	0
28c23                 | LR__4612
28c23     53 79 73 74 
28c27     65 6D 20 65 
28c2b     72 72 6F 72 
28c2f     20          | 	byte	"System error "
28c30     00          | 	byte	0
28c31                 | LR__4613
28c31     3A 20       | 	byte	": "
28c33     00          | 	byte	0
28c34                 | LR__4614
28c34     45 72 72 6F 
28c38     72 20       | 	byte	"Error "
28c3a     00          | 	byte	0
28c3b                 | LR__4615
28c3b     3A 20       | 	byte	": "
28c3d     00          | 	byte	0
28c3e                 | LR__4616
28c3e                 | 	byte	
28c3e     00          | 	byte	0
28c3f                 | LR__4617
28c3f     72 6E 64 3A 
28c43     20          | 	byte	"rnd: "
28c44     00          | 	byte	0
28c45                 | LR__4618
28c45     72 6E 64 3A 
28c49     20          | 	byte	"rnd: "
28c4a     00          | 	byte	0
28c4b                 | LR__4619
28c4b     73 69 6E 3A 
28c4f     20          | 	byte	"sin: "
28c50     00          | 	byte	0
28c51                 | LR__4620
28c51     63 6F 73 3A 
28c55     20          | 	byte	"cos: "
28c56     00          | 	byte	0
28c57                 | LR__4621
28c57     74 61 6E 3A 
28c5b     20          | 	byte	"tan: "
28c5c     00          | 	byte	0
28c5d                 | LR__4622
28c5d     61 73 69 6E 
28c61     3A 20       | 	byte	"asin: "
28c63     00          | 	byte	0
28c64                 | LR__4623
28c64     61 63 6F 73 
28c68     3A 20       | 	byte	"acos: "
28c6a     00          | 	byte	0
28c6b                 | LR__4624
28c6b     61 74 6E 3A 
28c6f     20          | 	byte	"atn: "
28c70     00          | 	byte	0
28c71                 | LR__4625
28c71     73 71 72 3A 
28c75     20          | 	byte	"sqr: "
28c76     00          | 	byte	0
28c77                 | LR__4626
28c77     73 74 69 63 
28c7b     6B 3A 20    | 	byte	"stick: "
28c7e     00          | 	byte	0
28c7f                 | LR__4627
28c7f     73 74 72 69 
28c83     67 3A 20    | 	byte	"strig: "
28c86     00          | 	byte	0
28c87                 | LR__4628
28c87     67 65 74 70 
28c8b     69 78 65 6C 
28c8f     3A 20       | 	byte	"getpixel: "
28c91     00          | 	byte	0
28c92                 | LR__4629
28c92                 | 	byte	
28c92     00          | 	byte	0
28c93                 | LR__4630
28c93     2F 73 64 2F 
28c97     62 61 73    | 	byte	"/sd/bas"
28c9a     00          | 	byte	0
28c9b                 | LR__4631
28c9b     57 6F 72 6B 
28c9f     69 6E 67 20 
28ca3     64 69 72 65 
28ca7     63 74 6F 72 
28cab     79 3A 20    | 	byte	"Working directory: "
28cae     00          | 	byte	0
28caf                 | LR__4632
28caf     2A          | 	byte	"*"
28cb0     00          | 	byte	0
28cb1                 | LR__4633
28cb1                 | 	byte	
28cb1     00          | 	byte	0
28cb2                 | LR__4634
28cb2     5B 64 69 72 
28cb6     5D 20       | 	byte	"[dir] "
28cb8     00          | 	byte	0
28cb9                 | LR__4635
28cb9     2A          | 	byte	"*"
28cba     00          | 	byte	0
28cbb                 | LR__4636
28cbb                 | 	byte	
28cbb     00          | 	byte	0
28cbc                 | LR__4637
28cbc     2D 2D 2D 2D 
28cc0     2D 6D 6F 72 
28cc4     65 2C 20 70 
28cc8     72 65 73 73 
28ccc     20 61 6E 79 
28cd0     20 6B 65 79 | 	byte	"-----more, press any key"
28cd4     00          | 	byte	0
28cd5                 | LR__4638
28cd5     20 20 20 20 
      ...             
28ced     20 20 20 20 
28cf1     20          | 	byte	"                             "
28cf2     00          | 	byte	0
28cf3                 | LR__4639
28cf3     2F          | 	byte	"/"
28cf4     00          | 	byte	0
28cf5                 | LR__4640
28cf5     2F 73 64 2F 
28cf9     62 69 6E 2F | 	byte	"/sd/bin/"
28cfd     00          | 	byte	0
28cfe                 | LR__4641
28cfe     53 79 73 74 
28d02     65 6D 20 65 
28d06     72 72 6F 72 
28d0a     20          | 	byte	"System error "
28d0b     00          | 	byte	0
28d0c                 | LR__4642
28d0c     3A 20       | 	byte	": "
28d0e     00          | 	byte	0
28d0f                 | LR__4643
28d0f                 | 	byte	
28d0f     00          | 	byte	0
28d10                 | LR__4644
28d10     45 78 70 65 
28d14     63 74 65 64 
28d18     20 6E 75 6D 
28d1c     62 65 72 2C 
28d20     20 67 6F 74 
28d24     20 73 6F 6D 
28d28     65 74 68 69 
28d2c     6E 67 20 65 
28d30     6C 73 65 2E | 	byte	"Expected number, got something else."
28d34     00          | 	byte	0
28d35                 | LR__4645
28d35     43 61 6E 6E 
28d39     6F 74 20 61 
28d3d     64 64 20 61 
28d41     20 6E 75 6D 
28d45     62 65 72 20 
28d49     74 6F 20 61 
28d4d     20 73 74 72 
28d51     69 6E 67 2E | 	byte	"Cannot add a number to a string."
28d55     00          | 	byte	0
28d56                 | LR__4646
28d56     43 61 6E 6E 
28d5a     6F 74 20 73 
28d5e     75 62 73 74 
28d62     72 61 63 74 
28d66     20 73 74 72 
28d6a     69 6E 67 73 
28d6e     2E          | 	byte	"Cannot substract strings."
28d6f     00          | 	byte	0
28d70                 | LR__4647
28d70     55 6E 6B 6E 
28d74     6F 77 6E 20 
28d78     65 72 72 6F 
28d7c     72 20 77 68 
28d80     69 6C 65 20 
28d84     61 64 64 69 
28d88     6E 67 2E    | 	byte	"Unknown error while adding."
28d8b     00          | 	byte	0
28d8c                 | LR__4648
28d8c     55 6E 6B 6E 
28d90     6F 77 6E 20 
28d94     65 72 72 6F 
28d98     72 20 77 68 
28d9c     69 6C 65 20 
28da0     73 75 62 73 
28da4     74 72 61 63 
28da8     74 69 6E 67 
28dac     2E          | 	byte	"Unknown error while substracting."
28dad     00          | 	byte	0
28dae                 | LR__4649
28dae     43 61 6E 6E 
28db2     6F 74 20 64 
28db6     6F 20 6C 6F 
28dba     67 69 63 20 
28dbe     6F 70 65 72 
28dc2     61 74 69 6F 
28dc6     6E 20 6F 6E 
28dca     20 73 74 72 
28dce     69 6E 67 20 
28dd2     6F 72 20 66 
28dd6     6C 6F 61 74 
28dda     2E          | 	byte	"Cannot do logic operation on string or float."
28ddb     00          | 	byte	0
28ddc                 | LR__4650
28ddc     55 6E 6B 6E 
28de0     6F 77 6E 20 
28de4     65 72 72 6F 
28de8     72 20 77 68 
28dec     69 6C 65 20 
28df0     64 6F 69 6E 
28df4     67 20 6C 6F 
28df8     67 69 63 20 
28dfc     6F 70 65 72 
28e00     61 74 69 6F 
28e04     6E 2E       | 	byte	"Unknown error while doing logic operation."
28e06     00          | 	byte	0
28e07                 | LR__4651
28e07     43 61 6E 6E 
28e0b     6F 74 20 6D 
28e0f     75 6C 74 69 
28e13     70 6C 79 20 
28e17     73 74 72 69 
28e1b     6E 67 73 2E | 	byte	"Cannot multiply strings."
28e1f     00          | 	byte	0
28e20                 | LR__4652
28e20     55 6E 6B 6E 
28e24     6F 77 6E 20 
28e28     65 72 72 6F 
28e2c     72 20 77 68 
28e30     69 6C 65 20 
28e34     6D 75 6C 74 
28e38     69 70 6C 79 
28e3c     69 6E 67 2E | 	byte	"Unknown error while multiplying."
28e40     00          | 	byte	0
28e41                 | LR__4653
28e41     43 61 6E 6E 
28e45     6F 74 20 64 
28e49     69 76 69 64 
28e4d     65 20 73 74 
28e51     72 69 6E 67 
28e55     73 2E       | 	byte	"Cannot divide strings."
28e57     00          | 	byte	0
28e58                 | LR__4654
28e58     55 6E 6B 6E 
28e5c     6F 77 6E 20 
28e60     65 72 72 6F 
28e64     72 20 77 68 
28e68     69 6C 65 20 
28e6c     64 69 76 69 
28e70     64 69 6E 67 
28e74     2E          | 	byte	"Unknown error while dividing."
28e75     00          | 	byte	0
28e76                 | LR__4655
28e76     43 61 6E 6E 
28e7a     6F 74 20 63 
28e7e     6F 6D 70 75 
28e82     74 65 20 61 
28e86     20 70 6F 77 
28e8a     65 72 20 6F 
28e8e     66 20 61 20 
28e92     73 74 72 69 
28e96     6E 67 2E    | 	byte	"Cannot compute a power of a string."
28e99     00          | 	byte	0
28e9a                 | LR__4656
28e9a     55 6E 6B 6E 
28e9e     6F 77 6E 20 
28ea2     65 72 72 6F 
28ea6     72 20 77 68 
28eaa     69 6C 65 20 
28eae     63 6F 6D 70 
28eb2     75 74 69 6E 
28eb6     67 20 61 20 
28eba     70 6F 77 65 
28ebe     72 2E       | 	byte	"Unknown error while computing a power."
28ec0     00          | 	byte	0
28ec1                 | LR__4657
28ec1     52 69 67 68 
28ec5     74 20 70 61 
28ec9     72 65 6E 74 
28ecd     68 65 73 69 
28ed1     73 20 65 78 
28ed5     70 65 63 74 
28ed9     65 64 2E    | 	byte	"Right parenthesis expected."
28edc     00          | 	byte	0
28edd                 | LR__4658
28edd     45 78 70 65 
28ee1     63 74 65 64 
28ee5     20 73 74 72 
28ee9     69 6E 67 2E | 	byte	"Expected string."
28eed     00          | 	byte	0
28eee                 | LR__4659
28eee     45 78 70 65 
28ef2     63 74 65 64 
28ef6     20 66 6C 6F 
28efa     61 74 2E    | 	byte	"Expected float."
28efd     00          | 	byte	0
28efe                 | LR__4660
28efe     45 78 70 65 
28f02     63 74 65 64 
28f06     20 75 6E 73 
28f0a     69 67 6E 65 
28f0e     64 20 69 6E 
28f12     74 65 67 65 
28f16     72 2E       | 	byte	"Expected unsigned integer."
28f18     00          | 	byte	0
28f19                 | LR__4661
28f19     45 78 70 65 
28f1d     63 74 65 64 
28f21     20 69 6E 74 
28f25     65 67 65 72 
28f29     2E          | 	byte	"Expected integer."
28f2a     00          | 	byte	0
28f2b                 | LR__4662
28f2b     4E 6F 20 6D 
28f2f     6F 72 65 20 
28f33     76 61 72 69 
28f37     61 62 6C 65 
28f3b     20 73 6C 6F 
28f3f     74 73 2E    | 	byte	"No more variable slots."
28f42     00          | 	byte	0
28f43                 | LR__4663
28f43     56 61 72 69 
28f47     61 62 6C 65 
28f4b     20 6E 6F 74 
28f4f     20 66 6F 75 
28f53     6E 64 2E    | 	byte	"Variable not found."
28f56     00          | 	byte	0
28f57                 | LR__4664
28f57     43 6F 6D 6D 
28f5b     61 20 65 78 
28f5f     70 65 63 74 
28f63     65 64 2E    | 	byte	"Comma expected."
28f66     00          | 	byte	0
28f67                 | LR__4665
28f67     43 6F 6D 6D 
28f6b     61 20 6F 72 
28f6f     20 73 65 6D 
28f73     69 63 6F 6C 
28f77     6F 6E 20 65 
28f7b     78 70 65 63 
28f7f     74 65 64 2E | 	byte	"Comma or semicolon expected."
28f83     00          | 	byte	0
28f84                 | LR__4666
28f84     55 6E 6B 6E 
28f88     6F 77 6E 20 
28f8c     63 6F 6D 6D 
28f90     61 6E 64 2E | 	byte	"Unknown command."
28f94     00          | 	byte	0
28f95                 | LR__4667
28f95     53 74 61 63 
28f99     6B 20 75 6E 
28f9d     64 65 72 66 
28fa1     6C 6F 77 2E | 	byte	"Stack underflow."
28fa5     00          | 	byte	0
28fa6                 | LR__4668
28fa6     43 61 6E 6E 
28faa     6F 74 20 65 
28fae     78 65 63 75 
28fb2     74 65 20 67 
28fb6     6F 74 6F 20 
28fba     69 6E 20 74 
28fbe     68 65 20 69 
28fc2     6D 6D 65 64 
28fc6     69 61 74 65 
28fca     20 6D 6F 64 
28fce     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
28fd0     00          | 	byte	0
28fd1                 | LR__4669
28fd1     43 61 6E 6E 
28fd5     6F 74 20 6C 
28fd9     6F 61 64 20 
28fdd     66 72 6F 6D 
28fe1     20 74 68 69 
28fe5     73 20 66 69 
28fe9     6C 65 2E    | 	byte	"Cannot load from this file."
28fec     00          | 	byte	0
28fed                 | LR__4670
28fed     54 68 65 20 
28ff1     70 72 6F 67 
28ff5     72 61 6D 20 
28ff9     69 73 20 65 
28ffd     6D 70 74 79 
29001     2E          | 	byte	"The program is empty."
29002     00          | 	byte	0
29003                 | LR__4671
29003     49 66 20 61 
29007     66 74 65 72 
2900b     20 69 66 2E | 	byte	"If after if."
2900f     00          | 	byte	0
29010                 | LR__4672
29010     45 6D 70 74 
29014     79 20 65 78 
29018     70 72 65 73 
2901c     73 69 6F 6E 
29020     2E          | 	byte	"Empty expression."
29021     00          | 	byte	0
29022                 | LR__4673
29022     53 74 72 69 
29026     6E 67 20 65 
2902a     78 70 65 63 
2902e     74 65 64 2E | 	byte	"String expected."
29032     00          | 	byte	0
29033                 | LR__4674
29033     49 6E 74 65 
29037     72 70 72 65 
2903b     74 65 72 20 
2903f     69 6E 74 65 
29043     72 6E 61 6C 
29047     20 65 72 72 
2904b     6F 72 2E    | 	byte	"Interpreter internal error."
2904e     00          | 	byte	0
2904f                 | LR__4675
2904f     45 78 70 65 
29053     63 74 65 64 
29057     20 61 73 73 
2905b     69 67 6E 2E | 	byte	"Expected assign."
2905f     00          | 	byte	0
29060                 | LR__4676
29060     45 78 70 65 
29064     63 74 65 64 
29068     20 27 74 6F 
2906c     27 2E       | 	byte	"Expected 'to'."
2906e     00          | 	byte	0
2906f                 | LR__4677
2906f     45 78 70 65 
29073     63 74 65 64 
29077     20 69 6E 74 
2907b     65 67 65 72 
2907f     20 76 61 72 
29083     69 61 62 6C 
29087     65 2E       | 	byte	"Expected integer variable."
29089     00          | 	byte	0
2908a                 | LR__4678
2908a     55 6E 69 6E 
2908e     69 74 69 61 
29092     6C 69 7A 65 
29096     64 20 76 61 
2909a     72 69 61 62 
2909e     6C 65 20 69 
290a2     6E 20 27 6E 
290a6     65 78 74 27 
290aa     2C 20 75 73 
290ae     65 20 27 66 
290b2     6F 72 27 20 
290b6     62 65 66 6F 
290ba     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
290bd     00          | 	byte	0
290be                 | LR__4679
290be     4E 6F 20 6D 
290c2     6F 72 65 20 
290c6     73 6C 6F 74 
290ca     73 20 66 6F 
290ce     72 20 27 66 
290d2     6F 72 27 2E | 	byte	"No more slots for 'for'."
290d6     00          | 	byte	0
290d7                 | LR__4680
290d7     27 4E 65 78 
290db     74 27 20 64 
290df     6F 65 73 6E 
290e3     27 74 20 6D 
290e7     61 74 63 68 
290eb     20 27 66 6F 
290ef     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
290f2     00          | 	byte	0
290f3                 | LR__4681
290f3     27 47 6F 74 
290f7     6F 27 20 74 
290fb     61 72 67 65 
290ff     74 20 6C 69 
29103     6E 65 20 6E 
29107     6F 74 20 66 
2910b     6F 75 6E 64 
2910f     2E          | 	byte	"'Goto' target line not found."
29110     00          | 	byte	0
29111                 | LR__4682
29111     42 61 64 20 
29115     6E 75 6D 62 
29119     65 72 20 6F 
2911d     66 20 70 61 
29121     72 61 6D 65 
29125     74 65 72 73 | 	byte	"Bad number of parameters"
29129     00          | 	byte	0
2912a                 | LR__4683
2912a     46 75 6E 63 
2912e     74 69 6F 6E 
29132     20 75 6E 64 
29136     65 66 69 6E 
2913a     65 64 20 66 
2913e     6F 72 20 73 
29142     74 72 69 6E 
29146     67 73       | 	byte	"Function undefined for strings"
29148     00          | 	byte	0
29149                 | LR__4684
29149     42 61 64 20 
2914d     70 61 72 61 
29151     6D 65 74 65 
29155     72 2E       | 	byte	"Bad parameter."
29157     00          | 	byte	0
29158                 | LR__4685
29158     43 61 6E 6E 
2915c     6F 74 20 64 
29160     65 63 6C 61 
29164     72 65 20 61 
29168     6E 20 61 72 
2916c     72 61 79 3A 
29170     20 74 68 65 
29174     20 76 61 72 
29178     69 61 62 6C 
2917c     65 20 65 78 
29180     69 73 74 73 
29184     2E          | 	byte	"Cannot declare an array: the variable exists."
29185     00          | 	byte	0
29186                 | LR__4686
29186     45 78 70 65 
2918a     63 74 65 64 
2918e     20 27 28 27 
29192     2E          | 	byte	"Expected '('."
29193     00          | 	byte	0
29194                 | LR__4687
29194     45 78 70 65 
29198     63 74 65 64 
2919c     20 27 29 27 
291a0     20 6F 72 20 
291a4     27 2C 27 2E | 	byte	"Expected ')' or ','."
291a8     00          | 	byte	0
291a9                 | LR__4688
291a9     4E 6F 20 6D 
291ad     6F 72 65 20 
291b1     74 68 61 6E 
291b5     20 33 20 64 
291b9     69 6D 65 6E 
291bd     73 69 6F 6E 
291c1     73 20 73 75 
291c5     70 70 6F 72 
291c9     74 65 64    | 	byte	"No more than 3 dimensions supported"
291cc     00          | 	byte	0
291cd                 | LR__4689
291cd     56 61 72 69 
291d1     61 62 6C 65 
291d5     20 6E 61 6D 
291d9     65 20 65 78 
291dd     70 65 63 74 
291e1     65 64       | 	byte	"Variable name expected"
291e3     00          | 	byte	0
291e4                 | LR__4690
291e4     54 79 70 65 
291e8     20 6E 61 6D 
291ec     65 20 65 78 
291f0     70 65 63 74 
291f4     65 64       | 	byte	"Type name expected"
291f6     00          | 	byte	0
291f7                 | LR__4691
291f7     54 79 70 65 
291fb     20 6E 6F 74 
291ff     20 73 75 70 
29203     70 6F 72 74 
29207     65 64 20 79 
2920b     65 74       | 	byte	"Type not supported yet"
2920d     00          | 	byte	0
2920e                 | LR__4692
2920e     41 72 72 61 
29212     79 20 69 6E 
29216     64 65 78 20 
2921a     6F 75 74 20 
2921e     6F 66 20 62 
29222     6F 75 6E 64 | 	byte	"Array index out of bound"
29226     00          | 	byte	0
29227                 | LR__4693
29227     45 72 72 6F 
2922b     72 20       | 	byte	"Error "
2922d     00          | 	byte	0
2922e                 | LR__4694
2922e     3A 20       | 	byte	": "
29230     00          | 	byte	0
29231                 | LR__4695
29231     2F 73 64    | 	byte	"/sd"
29234     00          | 	byte	0
29235                 | LR__4696
29235     2F 73 64 2F 
29239     62 61 73    | 	byte	"/sd/bas"
2923c     00          | 	byte	0
2923d                 | LR__4697
2923d     2F 73 64 2F 
29241     62 61 73    | 	byte	"/sd/bas"
29244     00          | 	byte	0
29245                 | LR__4698
29245     20 42 41 53 
29249     49 43 20 62 
2924d     79 74 65 73 
29251     20 66 72 65 
29255     65          | 	byte	" BASIC bytes free"
29256     00          | 	byte	0
29257                 | LR__4699
29257     52 65 61 64 
2925b     79          | 	byte	"Ready"
2925c     00          | 	byte	0
2925d                 | LR__4700
2925d     20          | 	byte	" "
2925e     00          | 	byte	0
2925f                 | LR__4701
2925f     20          | 	byte	" "
29260     00          | 	byte	0
29261                 | LR__4702
29261                 | 	byte	
29261     00          | 	byte	0
29262                 | LR__4703
29262                 | 	byte	
29262     00          | 	byte	0
29263     00          | 	alignl
29264                 | _dat_
29264     00 00 00 00 
29268     00 00 00 00 
2926c     00 00 00 00 
29270     00 00 00 00 | 	byte	$00[16]
29274     61 41 17 0E 
29278     62 42 00 00 
2927c     63 43 19 10 
29280     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
29284     65 45 18 0F 
29288     66 46 00 00 
2928c     67 47 00 00 
29290     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
29294     69 49 00 00 
29298     6A 4A 00 00 
2929c     6B 4B 00 00 
292a0     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
292a4     6D 4D 00 00 
292a8     6E 4E 1A 11 
292ac     6F 4F 1E 15 
292b0     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
292b4     71 51 00 00 
292b8     72 52 00 00 
292bc     73 53 1B 12 
292c0     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
292c4     75 55 00 00 
292c8     76 56 00 00 
292cc     77 57 00 00 
292d0     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
292d4     79 59 00 00 
292d8     7A 5A 1D 14 
292dc     31 21 04 00 
292e0     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
292e4     33 23 06 00 
292e8     34 24 07 00 
292ec     35 25 08 00 
292f0     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
292f4     37 26 0A 00 
292f8     38 2A 0B 00 
292fc     39 28 0C 00 
29300     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
29304     8D 8D 00 00 
29308     9B 9B 00 00 
2930c     88 88 00 00 
29310     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
29314     20 20 00 00 
29318     2D 5F 00 00 
2931c     3D 2B 00 00 
29320     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
29324     5D 7D 00 00 
29328     5C 7C 00 00 
2932c     23 7E 00 00 
29330     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
29334     27 22 00 00 
29338     60 7E 03 00 
2933c     2C 3C 00 00 
29340     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
29344     2F 3F 00 00 
29348     B9 B9 00 00 
2934c     BA 00 00 00 
29350     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
29354     BC 00 00 00 
29358     BD 00 00 00 
2935c     BE 00 00 00 
29360     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
29364     C0 00 00 00 
29368     C1 00 00 00 
2936c     C2 00 00 00 
29370     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
29374     C4 00 00 00 
29378     C5 00 00 00 
2937c     C6 00 00 00 
29380     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
29384     C8 00 00 00 
29388     C9 00 00 00 
2938c     CA 00 00 00 
29390     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
29394     7F 7F 00 00 
29398     CC 00 00 00 
2939c     CD 00 00 00 
293a0     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
293a4     CF 00 00 00 
293a8     D0 00 00 00 
293ac     D1 00 00 00 
293b0     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
293b4     2F 2F 00 00 
293b8     2A 2A 00 00 
293bc     2D 2D 00 00 
293c0     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
293c4     8D 8D 00 00 
293c8     31 31 00 00 
293cc     32 32 00 00 
293d0     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
293d4     34 34 00 00 
293d8     35 35 00 00 
293dc     36 36 00 00 
293e0     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
293e4     38 38 00 00 
293e8     39 39 00 00 
293ec     30 30 00 00 
293f0     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
293f4     5C 7C 00 00 
293f8     00 00 00 00 
293fc     00 00 00 00 
29400     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
29404     00 00 00 00 
      ...             
2945c     00 00 00 00 
29460     00 00 00 00 | 	byte	$00[96]
29464     2B 00 A6 F2 
29468     24 A7 09 80 
2946c     5B 88 4D 89 
29470     80 88 A5 88 | atari_spl file "atari.spl"
29474     6D 88 B8 88 
29478     80 88 CB 88 
2947c     92 88 A5 88 
29480     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
29484     A5 88 CA 88 
29488     A6 88 DD 88 
2948c     B8 88 AB 89 
29490     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
29494     C8 AD C6 F1 
29498     91 06 B6 FF 
2949c     13 00 4A 00 
294a0     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
294a4     5D 00 5E 00 
294a8     5D 00 5E 00 
294ac     5E 00 5D 00 
294b0     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
294b4     38 00 83 00 
294b8     25 00 83 00 
294bc     C3 FE D1 04 
294c0     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
294c4     48 88 38 85 
294c8     41 8A CB 88 
294cc     28 89 B8 88 
294d0     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
294d4     15 89 03 89 
294d8     02 89 15 89 
294dc     16 89 15 89 
294e0     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
294e4     15 89 3A 89 
294e8     72 89 E3 89 
294ec     52 83 AD 97 
294f0     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
294f4     0C 02 B6 FF 
294f8     E1 00 A8 00 
294fc     F3 00 A8 00 
29500     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
29504     CE 00 CD 00 
29508     CD 00 BA 00 
2950c     E1 00 BB 00 
29510     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
29514     DF 00 C9 FF 
29518     E6 01 B6 06 
2951c     EE DD 8D 98 
29520     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
29524     97 89 73 89 
29528     3B 89 60 89 
2952c     60 89 60 89 
29530     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
29534     73 89 72 89 
29538     85 89 73 89 
2953c     AA 89 60 89 
29540     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
29544     E8 8A 18 86 
29548     92 88 A5 C2 
2954c     E0 00 C3 05 
29550     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
29554     F2 00 64 01 
29558     06 01 3E 01 
2955c     2B 01 2B 01 
29560     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
29564     2B 01 2A 01 
29568     2B 01 2B 01 
2956c     2B 01 18 01 
29570     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
29574     39 07 61 F3 
29578     C0 AF 37 85 
2957c     0F 88 8B 8A 
29580     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
29584     AB 89 D0 89 
29588     AB 89 D0 89 
2958c     D0 89 CF 89 
29590     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
29594     D0 89 F5 89 
29598     BD 89 08 8A 
2959c     CF 89 E8 8A 
295a0     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
295a4     53 B3 0D F8 
295a8     F4 07 38 00 
295ac     63 01 63 01 
295b0     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
295b4     88 01 88 01 
295b8     76 01 88 01 
295bc     88 01 89 01 
295c0     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
295c4     75 01 AE 01 
295c8     76 01 88 01 
295cc     4A 00 46 06 
295d0     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
295d4     08 8A 9A 86 
295d8     33 8B 08 8A 
295dc     2D 8A F5 89 
295e0     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
295e4     2D 8A 2D 8A 
295e8     2E 8A 1B 8A 
295ec     40 8A 2D 8A 
295f0     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
295f4     2E 8A 79 8A 
295f8     66 8A C8 8B 
295fc     72 82 2B 97 
29600     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
29604     1D 02 05 01 
29608     F8 01 C0 01 
2960c     0B 02 C0 01 
29610     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
29614     F9 01 D3 01 
29618     F8 01 D3 01 
2961c     F8 01 D2 01 
29620     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
29624     E6 01 2B 01 
29628     8E 02 5F 07 
2962c     F7 E2 ED 9C 
29630     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
29634     E8 8A 78 8A 
29638     78 8A 65 8A 
2963c     8B 8A 78 8A 
29640     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
29644     8B 8A 9D 8A 
29648     9D 8A 8B 8A 
2964c     C2 8A 78 8A 
29650     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
29654     70 8C 18 86 
29658     8B 8A 23 C9 
2965c     CB 03 C4 05 
29660     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
29664     0B 02 7B 02 
29668     1E 02 55 02 
2966c     30 02 43 02 
29670     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
29674     43 02 44 02 
29678     43 02 30 02 
2967c     68 02 31 02 
29680     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
29684     07 08 3F F7 
29688     73 B2 13 85 
2968c     15 89 ED 8B 
29690     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
29694     B0 8A FB 8A 
29698     D5 8A FA 8A 
2969c     E8 8A FB 8A 
296a0     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
296a4     E8 8A 21 8B 
296a8     E7 8A 33 8B 
296ac     E8 8A 26 8C 
296b0     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
296b4     8D B0 27 F6 
296b8     9C 08 AD 01 
296bc     7B 02 8D 02 
296c0     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
296c4     A1 02 A0 02 
296c8     A1 02 A0 02 
296cc     A0 02 A0 02 
296d0     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
296d4     7B 02 D8 02 
296d8     7B 02 C6 02 
296dc     3E 01 C3 05 
296e0     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
296e4     00 8C 2A 86 
296e8     E0 8C FA 8A 
296ec     6A 8B FB 8A 
296f0     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
296f4     45 8B 45 8B 
296f8     45 8B 6B 8B 
296fc     46 8B 59 8B 
29700     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
29704     6B 8B 6B 8B 
29708     6B 8B 6B 8B 
2970c     7D 8B 7D 8B 
29710     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
29714     90 8B 91 8B 
29718     90 8B 90 8B 
2971c     A3 8B A3 8B 
29720     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
29724     B5 8B B6 8B 
29728     B5 8B B5 8B 
2972c     B6 8B C8 8B 
29730     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
29734     C8 8B DA 8B 
29738     DB 8B DB 8B 
2973c     DB 8B DC 8B 
29740     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
29744     EE 8B EE 8B 
29748     00 8C 01 8C 
2974c     00 8C 01 8C 
29750     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
29754     12 8C 13 8C 
29758     13 8C 26 8C 
2975c     26 8C 26 8C 
29760     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
29764     38 8C 38 8C 
29768     38 8C 38 8C 
2976c     4B 8C 4B 8C 
29770     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
29774     5E 8C 5E 8C 
29778     5E 8C 5E 8C 
2977c     70 8C 70 8C 
29780     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
29784     70 8C 83 8C 
29788     83 8C 83 8C 
2978c     83 8C 96 8C 
29790     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
29794     95 8C A9 8C 
29798     A9 8C A8 8C 
2979c     A8 8C A8 8C 
297a0     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
297a4     BB 8C BB 8C 
297a8     BB 8C CE 8C 
297ac     CE 8C CE 8C 
297b0     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
297b4     E0 8C E1 8C 
297b8     E1 8C E0 8C 
297bc     F4 8C F2 8C 
297c0     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
297c4     05 8D 05 8D 
297c8     06 8D 06 8D 
297cc     19 8D 19 8D 
297d0     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
297d4     18 8D 2B 8D 
297d8     2B 8D 2B 8D 
297dc     2A 8D 3E 8D 
297e0     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
297e4     3E 8D 51 8D 
297e8     50 8D 50 8D 
297ec     50 8D 51 8D 
297f0     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
297f4     63 8D 64 8D 
297f8     76 8D 75 8D 
297fc     75 8D 76 8D 
29800     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
29804     88 8D 88 8D 
29808     89 8D 9B 8D 
2980c     9A 8D 9B 8D 
29810     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
29814     AD 8D AE 8D 
29818     AD 8D AE 8D 
2981c     C1 8D C1 8D 
29820     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
29824     D3 8D D3 8D 
29828     D3 8D D3 8D 
2982c     D3 8D E6 8D 
29830     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
29834     E6 8D E6 8D 
29838     F9 8D F9 8D 
2983c     F9 8D F8 8D 
29840     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
29844     0B 8E 0B 8E 
29848     1D 8E 1D 8E 
2984c     1E 8E 1E 8E 
29850     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
29854     31 8E 31 8E 
29858     31 8E 42 8E 
2985c     43 8E 43 8E 
29860     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
29864     56 8E 56 8E 
29868     55 8E 56 8E 
2986c     68 8E 69 8E 
29870     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
29874     69 8E 7B 8E 
29878     7C 8E 7B 8E 
2987c     7B 8E 8D 8E 
29880     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
29884     8D 8E A1 8E 
29888     A0 8E A1 8E 
2988c     A1 8E A0 8E 
29890     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
29894     B3 8E B3 8E 
29898     C6 8E C5 8E 
2989c     C6 8E C6 8E 
298a0     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
298a4     D8 8E D9 8E 
298a8     D8 8E EC 8E 
298ac     EB 8E EC 8E 
298b0     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
298b4     FE 8E FE 8E 
298b8     FE 8E FE 8E 
298bc     10 8F 10 8F 
298c0     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
298c4     11 8F 23 8F 
298c8     24 8F 23 8F 
298cc     24 8F 37 8F 
298d0     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
298d4     36 8F 36 8F 
298d8     48 8F 49 8F 
298dc     49 8F 49 8F 
298e0     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
298e4     5B 8F 5C 8F 
298e8     5B 8F 6E 8F 
298ec     6E 8F 6E 8F 
298f0     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
298f4     81 8F 81 8F 
298f8     81 8F 81 8F 
298fc     93 8F 93 8F 
29900     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
29904     93 8F A6 8F 
29908     A6 8F A6 8F 
2990c     A6 8F B9 8F 
29910     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
29914     B9 8F B9 8F 
29918     CC 8F CB 8F 
2991c     CB 8F CC 8F 
29920     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
29924     DF 8F DE 8F 
29928     DE 8F F1 8F 
2992c     F1 8F F1 8F 
29930     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
29934     03 90 04 90 
29938     04 90 04 90 
2993c     16 90 17 90 
29940     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
29944     29 90 28 90 
29948     29 90 28 90 
2994c     29 90 3C 90 
29950     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
29954     3C 90 4F 90 
29958     4E 90 4E 90 
2995c     4E 90 4E 90 
29960     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
29964     61 90 61 90 
29968     73 90 74 90 
2996c     74 90 74 90 
29970     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
29974     87 90 86 90 
29978     87 90 86 90 
2997c     99 90 99 90 
29980     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
29984     AB 90 AB 90 
29988     AC 90 AB 90 
2998c     AB 90 BF 90 
29990     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
29994     BE 90 D1 90 
29998     D0 90 D1 90 
2999c     D1 90 D1 90 
299a0     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
299a4     E3 90 E4 90 
299a8     F6 90 F6 90 
299ac     F6 90 F6 90 
299b0     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
299b4     09 91 0A 91 
299b8     0A 91 1C 91 
299bc     1C 91 1C 91 
299c0     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
299c4     2F 91 2E 91 
299c8     2F 91 2F 91 
299cc     2E 91 41 91 
299d0     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
299d4     41 91 53 91 
299d8     54 91 54 91 
299dc     53 91 54 91 
299e0     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
299e4     67 91 67 91 
299e8     79 91 7A 91 
299ec     79 91 78 91 
299f0     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
299f4     8C 91 8B 91 
299f8     8C 91 8C 91 
299fc     9E 91 9E 91 
29a00     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
29a04     B1 91 B1 91 
29a08     B2 91 B1 91 
29a0c     B1 91 C4 91 
29a10     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
29a14     C4 91 D6 91 
29a18     D7 91 D7 91 
29a1c     D7 91 D6 91 
29a20     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
29a24     EA 91 EA 91 
29a28     EA 91 FC 91 
29a2c     FC 91 FB 91 
29a30     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
29a34     0E 92 0F 92 
29a38     0F 92 0E 92 
29a3c     21 92 21 92 
29a40     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
29a44     21 92 34 92 
29a48     33 92 34 92 
29a4c     34 92 47 92 
29a50     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
29a54     46 92 47 92 
29a58     59 92 59 92 
29a5c     59 92 59 92 
29a60     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
29a64     6C 92 6C 92 
29a68     6B 92 7E 92 
29a6c     7E 92 7E 92 
29a70     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
29a74     92 92 91 92 
29a78     91 92 90 92 
29a7c     91 92 A4 92 
29a80     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
29a84     A3 92 B6 92 
29a88     B6 92 B7 92 
29a8c     B7 92 B6 92 
29a90     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
29a94     CA 92 C9 92 
29a98     CA 92 DC 92 
29a9c     DC 92 DC 92 
29aa0     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
29aa4     EF 92 EF 92 
29aa8     EF 92 EF 92 
29aac     01 93 01 93 
29ab0     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
29ab4     15 93 14 93 
29ab8     14 93 14 93 
29abc     14 93 27 93 
29ac0     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
29ac4     27 93 39 93 
29ac8     3A 93 39 93 
29acc     39 93 39 93 
29ad0     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
29ad4     4B 93 4C 93 
29ad8     5F 93 5F 93 
29adc     5F 93 5E 93 
29ae0     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
29ae4     5F 93 84 93 
29ae8     4C 93 96 93 
29aec     5F 93 AE 94 
29af0     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
29af4     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
29af8     7A D7 00 80 
29afc     87 8A 48 8F 
29b00     EC 8C 76 8D 
29b04     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
29b08     3C 8D 82 8D 
29b0c     42 8D 88 8D 
29b10     8C 8D 8E 8D 
29b14     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
29b18     97 8D DE 8D 
29b1c     E1 8D F1 8E 
29b20     D8 8C A3 83 
29b24     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
29b28     65 71 C9 65 
29b2c     FC 64 C4 65 
29b30     C1 65 BF 65 
29b34     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
29b38     B6 65 B4 65 
29b3c     B2 65 AE 65 
29b40     AC 65 ED 65 
29b44     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
29b48     5E 65 25 66 
29b4c     FA 62 23 6B 
29b50     B5 6C 61 0A 
29b54     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
29b58     5D 90 BE 8D 
29b5c     47 8E C3 8D 
29b60     09 8E C9 8D 
29b64     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
29b68     15 8E 19 8E 
29b6c     1B 8E 62 8E 
29b70     64 8E 68 8E 
29b74     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
29b78     B5 8E 4C 90 
29b7c     FA 84 3C 9D 
29b80     98 13 79 6D 
29b84     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
29b88     D9 66 50 66 
29b8c     D4 66 4B 66 
29b90     8C 66 46 66 
29b94     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
29b98     81 66 3A 66 
29b9c     7C 66 36 66 
29ba0     76 66 30 66 
29ba4     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
29ba8     6B 66 88 72 
29bac     BF 37 E7 B7 
29bb0     75 83 8B 8E 
29bb4     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
29bb8     94 8E 96 8E 
29bbc     DD 8E 9C 8E 
29bc0     E2 8E A2 8E 
29bc4     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
29bc8     EE 8E AE 8E 
29bcc     38 8F B5 8E 
29bd0     3F 8F FD 8E 
29bd4     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
29bd8     A5 87 1E E3 
29bdc     6D 5D FA 71 
29be0     41 64 25 67 
29be4     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
29be8     D9 66 1A 67 
29bec     18 67 15 67 
29bf0     12 67 0F 67 
29bf4     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
29bf8     07 67 C0 66 
29bfc     01 67 BC 66 
29c00     B8 66 DE 64 
29c04     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
29c08     43 E5 1F 8B 
29c0c     14 8A F1 90 
29c10     1C 8F 63 8F 
29c14     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
29c18     29 8F 6E 8F 
29c1c     72 8F 75 8F 
29c20     34 8F BE 8F 
29c24     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
29c28     84 8F 87 8F 
29c2c     CC 8F 56 90 
29c30     67 91 49 80 
29c34     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
29c38     46 77 A6 66 
29c3c     E8 66 B0 67 
29c40     AD 67 ED 67 
29c44     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
29c48     A2 67 E3 67 
29c4c     9D 67 9A 67 
29c50     98 67 94 67 
29c54     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
29c58     49 67 CD 67 
29c5c     28 65 5F 6E 
29c60     82 67 3A 01 
29c64     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
29c68     C2 91 A9 8F 
29c6c     EF 8F AE 8F 
29c70     F4 8F B5 8F 
29c74     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
29c78     01 90 03 90 
29c7c     07 90 09 90 
29c80     0C 90 53 90 
29c84     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
29c88     18 90 44 93 
29c8c     85 84 D6 9D 
29c90     87 1F 2F 75 
29c94     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
29c98     C4 68 F6 67 
29c9c     BE 68 F1 67 
29ca0     76 68 2E 68 
29ca4     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
29ca8     27 68 24 68 
29cac     64 68 1E 68 
29cb0     5F 68 19 68 
29cb4     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
29cb8     DC 68 56 72 
29cbc     7E 36 C2 B8 
29cc0     D7 84 73 90 
29cc4     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
29cc8     7B 90 7F 90 
29ccc     82 90 84 90 
29cd0     CB 90 8B 90 
29cd4     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
29cd8     D7 90 96 90 
29cdc     20 91 59 90 
29ce0     25 91 A2 90 
29ce4     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
29ce8     D0 89 40 EE 
29cec     12 64 C4 71 
29cf0     29 66 0C 69 
29cf4     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
29cf8     C0 68 02 69 
29cfc     FE 68 FB 68 
29d00     F9 68 F6 68 
29d04     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
29d08     EE 68 A8 68 
29d0c     2C 69 5F 68 
29d10     E2 68 81 66 
29d14     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
29d18     1E EB A6 8A 
29d1c     73 8B 5E 93 
29d20     7B 90 48 91 
29d24     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
29d28     0D 91 11 91 
29d2c     14 91 16 91 
29d30     5C 91 1C 91 
29d34     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
29d38     68 91 AF 91 
29d3c     2A 91 B5 91 
29d40     75 91 1A 94 
29d44     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
29d48     70 0E CB 6C 
29d4c     5D 6E C4 67 
29d50     99 69 54 69 
29d54     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
29d58     D2 69 49 69 
29d5c     89 69 86 69 
29d60     40 69 C4 69 
29d64     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
29d68     35 69 76 69 
29d6c     58 67 EB 6D 
29d70     E9 6D 89 0F 
29d74     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
29d78     33 94 94 91 
29d7c     D9 91 56 91 
29d80     E0 91 9F 91 
29d84     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
29d88     EC 91 EE 91 
29d8c     F1 91 F4 91 
29d90     F7 91 3D 92 
29d94     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
29d98     46 92 21 94 
29d9c     11 89 A4 9D 
29da0     FD 0E 8F 6C 
29da4     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
29da8     28 6A E1 69 
29dac     65 6A 1F 6A 
29db0     5F 6A 1A 6A 
29db4     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
29db8     54 6A 0F 6A 
29dbc     4F 6A 09 6A 
29dc0     06 6A 03 6A 
29dc4     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
29dc8     23 68 69 77 
29dcc     3A 4D 38 CA 
29dd0     38 86 4E 91 
29dd4     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
29dd8     64 92 24 92 
29ddc     6A 92 2A 92 
29de0     70 92 30 92 
29de4     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
29de8     7B 92 7E 92 
29dec     C5 92 84 92 
29df0     CB 92 8A 92 
29df4     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
29df8     4D 8D F9 E2 
29dfc     97 59 FE 74 
29e00     DB 68 6D 6A 
29e04     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
29e08     A8 6A A5 6A 
29e0c     A3 6A 9F 6A 
29e10     9D 6A 9B 6A 
29e14     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
29e18     D6 6A 8F 6A 
29e1c     CF 6A 46 6A 
29e20     CA 6A E1 67 
29e24     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
29e28     D3 F7 15 92 
29e2c     90 8C BF 94 
29e30     A6 92 EB 92 
29e34     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
29e38     B1 92 F7 92 
29e3c     FA 92 FD 92 
29e40     00 93 02 93 
29e44     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
29e48     4F 93 52 93 
29e4c     54 93 22 94 
29e50     5A 93 8F 88 
29e54     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
29e58     1C 77 07 6C 
29e5c     E8 69 7A 6B 
29e60     34 6B 75 6B 
29e64     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
29e68     29 6B 26 6B 
29e6c     24 6B 21 6B 
29e70     1D 6B 5E 6B 
29e74     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
29e78     12 6B 52 6B 
29e7c     34 69 34 6E 
29e80     BA 73 A4 24 
29e84     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
29e88     7A 94 B3 93 
29e8c     72 93 31 93 
29e90     78 93 7A 93 
29e94     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
29e98     83 93 86 93 
29e9c     89 93 D0 93 
29ea0     D2 93 D5 93 
29ea4     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
29ea8     DD 93 40 96 
29eac     30 8B 99 9C 
29eb0     52 10 94 71 
29eb4     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
29eb8     46 6C 79 6B 
29ebc     40 6C B7 6B 
29ec0     F7 6B B1 6B 
29ec4     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
29ec8     EC 6B A5 6B 
29ecc     A2 6B 9F 6B 
29ed0     9D 6B 9A 6B 
29ed4     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
29ed8     C8 6A E4 76 
29edc     20 4B F9 CE 
29ee0     2E 8A 1A 92 
29ee4     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
29ee8     FB 93 BA 93 
29eec     01 94 03 94 
29ef0     4A 94 09 94 
29ef4     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
29ef8     55 94 14 94 
29efc     9E 94 1A 94 
29f00     61 94 20 94 
29f04     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
29f08     3E 87 E5 CD 
29f0c     5F 50 6C 78 
29f10     B5 6A 04 6C 
29f14     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
29f18     83 6C 7F 6C 
29f1c     7C 6C 36 6C 
29f20     76 6C 74 6C 
29f24     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
29f28     6B 6C 25 6C 
29f2c     66 6C 1F 6C 
29f30     1D 6C 41 6A 
29f34     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
29f38     BA FA FC 94 
29f3c     5B 8D 97 96 
29f40     3B 94 C5 94 
29f44     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
29f48     89 94 8C 94 
29f4c     8F 94 92 94 
29f50     94 94 DB 94 
29f54     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
29f58     E4 94 E7 94 
29f5c     2D 95 74 95 
29f60     C8 96 15 89 
29f64     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
29f68     CB 75 31 6F 
29f6c     7E 6B 10 6D 
29f70     C9 6C 0A 6D 
29f74     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
29f78     BD 6C FF 6C 
29f7c     FB 6C F9 6C 
29f80     B2 6C F3 6C 
29f84     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
29f88     A7 6C E8 6C 
29f8c     0D 6B 85 6F 
29f90     C7 74 10 28 
29f94     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
29f98     96 96 47 95 
29f9c     06 95 0A 95 
29fa0     0C 95 0F 95 
29fa4     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
29fa8     17 95 5E 95 
29fac     61 95 63 95 
29fb0     22 95 AC 95 
29fb4     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
29fb8     72 95 17 98 
29fbc     59 8E 01 96 
29fc0     CF FC 5A 68 
29fc4     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
29fc8     96 6D 50 6D 
29fcc     D5 6D 4A 6D 
29fd0     8C 6D 89 6D 
29fd4     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
29fd8     80 6D 3A 6D 
29fdc     7A 6D 77 6D 
29fe0     75 6D 71 6D 
29fe4     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
29fe8     18 6C BC 78 
29fec     9A 4F 7E CF 
29ff0     1F 89 F1 93 
29ff4     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
29ff8     D2 95 4E 95 
29ffc     D7 95 53 95 
2a000     DD 95 E0 95 
2a004     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
2a008     A5 95 EB 95 
2a00c     EE 95 F0 95 
2a010     37 96 B3 95 
2a014     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
2a018     1A 98 D5 8D 
2a01c     C5 9F CD 0F 
2a020     0F 71 F3 73 
2a024     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
2a028     D9 6D 5E 6E 
2a02c     D3 6D 58 6E 
2a030     12 6E 0F 6E 
2a034     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
2a038     49 6E BF 6D 
2a03c     87 6E 76 6D 
2a040     81 6E 11 6B 
2a044     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
2a048     3F 09 44 95 
2a04c     E5 8D 3F 99 
2a050     D4 95 A2 96 
2a054     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
2a058     23 96 69 96 
2a05c     6B 96 6E 96 
2a060     71 96 74 96 
2a064     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
2a068     BF 96 3C 96 
2a06c     C6 96 C8 96 
2a070     A3 98 51 8D 
2a074     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
2a078     CF 75 29 73 
2a07c     90 6C EC 6E 
2a080     62 6E E7 6E 
2a084     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
2a088     9A 6E 98 6E 
2a08c     95 6E 91 6E 
2a090     8E 6E CF 6E 
2a094     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2a098     40 6E C3 6E 
2a09c     E8 6C 45 6F 
2a0a0     A5 7B C9 35 
2a0a4     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2a0a8     2D 98 23 97 
2a0ac     E1 96 A0 96 
2a0b0     A4 96 EA 96 
2a0b4     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2a0b8     AF 96 F4 96 
2a0bc     F8 96 3E 97 
2a0c0     FD 96 43 97 
2a0c4     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2a0c8     08 97 6B 99 
2a0cc     D6 92 88 91 
2a0d0     D8 EE 84 66 
2a0d4     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2a0d8     2E 6F E7 6E 
2a0dc     6C 6F 24 6F 
2a0e0     21 6F 1F 6F 
2a0e4     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
2a0e8     17 6F 13 6F 
2a0ec     54 6F 0E 6F 
2a0f0     0B 6F 4B 6F 
2a0f4     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
2a0f8     27 6D 1C 7B 
2a0fc     19 59 9F DB 
2a100     66 8E BC 94 
2a104     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
2a108     67 97 26 97 
2a10c     6D 97 2B 97 
2a110     72 97 32 97 
2a114     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
2a118     C1 97 7F 97 
2a11c     C6 97 85 97 
2a120     CB 97 CE 97 
2a124     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
2a128     EC 8A C4 C6 
2a12c     68 4C F4 7D 
2a130     63 6E E8 6E 
2a134     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
2a138     ED 6F A7 6F 
2a13c     E7 6F A0 6F 
2a140     E1 6F 9B 6F 
2a144     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
2a148     D5 6F 8F 6F 
2a14c     CE 6F 45 6F 
2a150     86 6F 68 6D 
2a154     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
2a158     C0 13 AD A2 
2a15c     A7 8E 79 99 
2a160     E6 97 E8 97 
2a164     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
2a168     F1 97 F3 97 
2a16c     F6 97 F9 97 
2a170     FB 97 FE 97 
2a174     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
2a178     4A 98 0A 98 
2a17c     93 98 0F 98 
2a180     7F 9B BF 8C 
2a184     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
2a188     91 7B 62 73 
2a18c     1A 6E B9 70 
2a190     EB 6F B3 70 
2a194     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
2a198     25 70 20 70 
2a19c     1E 70 1B 70 
2a1a0     18 70 15 70 
2a1a4     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
2a1a8     0D 70 09 70 
2a1ac     07 70 03 70 
2a1b0     01 70 FD 6F 
2a1b4     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
2a1b8     F6 6F F2 6F 
2a1bc     EF 6F EC 6F 
2a1c0     2C 70 E6 6F 
2a1c4     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
2a1c8     DD 6F 97 6F 
2a1cc     D7 6F 84 6E 
2a1d0     8F 6F 3F 7D 
2a1d4     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2a1d6     FF FF FF FF 
2a1da     FF FF       | atarist_spl file "atarist.spl" '512
2a1dc     00 00 00 00 
2a1e0     00 00 00 00 
2a1e4     00 00       | 	byte	$00[10]
2a1e6     17 7F F2 7F 
2a1ea     B2 7F 72 7F 
2a1ee     33 7F F4 7E 
2a1f2     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
2a1f6     36 7E F5 7D 
2a1fa     E9 51 F2 0D 
2a1fe     8E 00 F3 FD 
2a202     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
2a206     57 FD 58 FD 
2a20a     5B FD 5C FD 
2a20e     5C FD 60 7D 
2a212     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
2a216     D6 7C 98 7C 
2a21a     59 7C 1A 7C 
2a21e     DC 7B 9E 7B 
2a222     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
2a226     F3 05 00 FD 
2a22a     41 FB EA FA 
2a22e     D9 FA DB FA 
2a232     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
2a236     E4 FA 9B 36 
2a23a     F8 7A C0 7A 
2a23e     84 7A 45 7A 
2a242     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
2a246     8E 79 51 79 
2a24a     15 79 D7 78 
2a24e     3C 1F EB FF 
2a252     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
2a256     6D F8 65 F8 
2a25a     68 F8 6D F8 
2a25e     70 F8 74 F8 
2a262     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
2a266     AB 60 79 60 
2a26a     4B 60 1A 60 
2a26e     E9 5F B9 5F 
2a272     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
2a276     FB 59 B2 0B 
2a27a     92 FA 3A F7 
2a27e     96 F6 79 F6 
2a282     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
2a286     82 F6 86 F6 
2a28a     8C F6 DB 5D 
2a28e     F1 5E C1 5E 
2a292     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2a296     34 5E 04 5E 
2a29a     D6 5D A6 5D 
2a29e     78 5D D4 3E 
2a2a2     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2a2a6     27 F5 BA F4 
2a2aa     AB F4 AD F4 
2a2ae     B2 F4 B8 F4 
2a2b2     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2a2b6     26 5D 2B 5D 
2a2ba     FC 5C CD 5C 
2a2be     9F 5C 70 5C 
2a2c2     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
2a2c6     E5 5B B8 5B 
2a2ca     DB 24 A7 FC 
2a2ce     D1 F4 4D F3 
2a2d2     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
2a2d6     04 F3 0B F3 
2a2da     11 F3 16 F3 
2a2de     DE 18 98 5B 
2a2e2     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
2a2e6     4E 4A 29 48 
2a2ea     A0 47 6A 47 
2a2ee     43 47 20 47 
2a2f2     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
2a2f6     E2 F6 98 F2 
2a2fa     C5 F1 A3 F1 
2a2fe     A3 F1 A8 F1 
2a302     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
2a306     BF F1 00 3D 
2a30a     EF 46 CD 46 
2a30e     AA 46 86 46 
2a312     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
2a316     1C 46 F9 45 
2a31a     D7 45 EE 43 
2a31e     DE 02 E8 F3 
2a322     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
2a326     61 F0 65 F0 
2a32a     6D F0 74 F0 
2a32e     7C F0 84 F0 
2a332     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
2a336     8E 45 6D 45 
2a33a     49 45 27 45 
2a33e     05 45 E1 44 
2a342     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
2a346     F1 2F A9 FB 
2a34a     8B F1 9B EF 
2a34e     40 EF 36 EF 
2a352     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
2a356     4D EF 56 EF 
2a35a     5E EF 7B 44 
2a35e     8C 44 69 44 
2a362     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
2a366     03 44 E1 43 
2a36a     C0 43 F5 37 
2a36e     69 33 0F 11 
2a372     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
2a376     66 EE 37 EE 
2a37a     38 EE 40 EE 
2a37e     48 EE 51 EE 
2a382     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
2a386     7D 32 6A 32 
2a38a     51 32 37 32 
2a38e     1F 32 05 32 
2a392     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2a396     B9 31 A1 31 
2a39a     F1 04 F4 F1 
2a39e     50 EE A0 ED 
2a3a2     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2a3a6     93 ED 9A ED 
2a3aa     A4 ED AD ED 
2a3ae     F4 27 C1 31 
2a3b2     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2a3b6     78 31 5F 31 
2a3ba     46 31 2E 31 
2a3be     15 31 FC 30 
2a3c2     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
2a3c6     C4 EF 4A ED 
2a3ca     DC EC CB EC 
2a3ce     D2 EC DA EC 
2a3d2     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2a3d6     F9 EC 64 2F 
2a3da     0A 31 F1 30 
2a3de     D9 30 C0 30 
2a3e2     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
2a3e6     78 30 5F 30 
2a3ea     46 30 38 23 
2a3ee     A6 F6 19 EE 
2a3f2     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
2a3f6     20 EC 28 EC 
2a3fa     32 EC 3C EC 
2a3fe     47 EC 51 EC 
2a402     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
2a406     A3 22 93 22 
2a40a     7F 22 6E 22 
2a40e     5D 22 4C 22 
2a412     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
2a416     77 09 76 F1 
2a41a     CC EC F0 EB 
2a41e     CD EB CE EB 
2a422     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
2a426     ED EB F5 EB 
2a42a     3E F6 6B 22 
2a42e     5F 22 4E 22 
2a432     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
2a436     1B 22 0B 22 
2a43a     FA 21 E9 21 
2a43e     D8 21 4D FF 
2a442     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
2a446     92 EB 7B EB 
2a44a     82 EB 8C EB 
2a44e     97 EB A1 EB 
2a452     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
2a456     15 22 04 22 
2a45a     F3 21 E3 21 
2a45e     D2 21 C0 21 
2a462     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
2a466     8E 21 7D 21 
2a46a     9A F8 A4 ED 
2a46e     8E EB 2F EB 
2a472     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
2a476     37 EB 42 EB 
2a47a     4C EB 57 EB 
2a47e     B2 17 22 19 
2a482     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
2a486     FD 18 EF 18 
2a48a     E3 18 D6 18 
2a48e     CA 18 BD 18 
2a492     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
2a496     60 EC 35 EB 
2a49a     01 EB 01 EB 
2a49e     0C EB 16 EB 
2a4a2     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
2a4a6     34 EB D0 18 
2a4aa     00 19 F4 18 
2a4ae     E8 18 DA 18 
2a4b2     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
2a4b6     B6 18 A9 18 
2a4ba     9D 18 91 05 
2a4be     F0 EF CA EB 
2a4c2     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
2a4c6     E8 EA F2 EA 
2a4ca     FE EA 07 EB 
2a4ce     12 EB C2 EF 
2a4d2     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
2a4d6     D9 18 CD 18 
2a4da     C0 18 B3 18 
2a4de     A7 18 9B 18 
2a4e2     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
2a4e6     B8 FC 30 EE 
2a4ea     61 EB DC EA 
2a4ee     CD EA D2 EA 
2a4f2     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
2a4f6     F3 EA FE EA 
2a4fa     D2 09 D1 18 
2a4fe     C3 18 17 18 
2a502     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
2a506     66 11 52 11 
2a50a     49 11 41 11 
2a50e     38 11 E0 F4 
2a512     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
2a516     C9 EA C5 EA 
2a51a     CF EA DB EA 
2a51e     E6 EA EF EA 
2a522     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
2a526     89 11 80 11 
2a52a     78 11 6E 11 
2a52e     67 11 5D 11 
2a532     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
2a536     43 11 32 0D 
2a53a     9C F1 07 EC 
2a53e     F8 EA CD EA 
2a542     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
2a546     E4 EA ED EA 
2a54a     F8 EA 02 EB 
2a54e     55 11 91 11 
2a552     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
2a556     75 11 6E 11 
2a55a     64 11 5E 11 
2a55e     54 11 4A 11 
2a562     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
2a566     A8 EB F1 EA 
2a56a     D9 EA DC EA 
2a56e     E8 EA F1 EA 
2a572     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
2a576     A6 EB 9E 11 
2a57a     A0 11 96 11 
2a57e     8D 11 85 11 
2a582     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
2a586     6A 11 CA 0D 
2a58a     36 0B 57 F8 
2a58e     6C ED 57 EB 
2a592     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
2a596     F4 EA FF EA 
2a59a     09 EB 15 EB 
2a59e     1E EB 1A FD 
2a5a2     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
2a5a6     ED 0A E8 0A 
2a5aa     E2 0A DC 0A 
2a5ae     D6 0A D1 0A 
2a5b2     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
2a5b6     F8 F3 BC EC 
2a5ba     57 EB 1E EB 
2a5be     18 EB 24 EB 
2a5c2     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
2a5c6     42 EB 4D EB 
2a5ca     08 09 20 0B 
2a5ce     1A 0B 14 0B 
2a5d2     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
2a5d6     04 0B FE 0A 
2a5da     F9 0A F2 0A 
2a5de     84 08 3A F1 
2a5e2     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
2a5e6     42 EB 42 EB 
2a5ea     4E EB 57 EB 
2a5ee     62 EB 6B EB 
2a5f2     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
2a5f6     48 0B 43 0B 
2a5fa     3C 0B 36 0B 
2a5fe     31 0B 2C 0B 
2a602     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
2a606     1B 0B 5C 00 
2a60a     6A EF 1B EC 
2a60e     81 EB 6A EB 
2a612     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
2a616     85 EB 8E EB 
2a61a     99 EB A3 EB 
2a61e     DD 05 E5 05 
2a622     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
2a626     DB 05 D8 05 
2a62a     D5 05 D1 05 
2a62e     D0 05 CB 05 
2a632     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
2a636     0C EC BB EB 
2a63a     B3 EB BB EB 
2a63e     C5 EB D0 EB 
2a642     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2a646     E4 F7 2C 06 
2a64a     28 06 24 06 
2a64e     22 06 1F 06 
2a652     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2a656     16 06 14 06 
2a65a     0F 06 D0 F3 
2a65e     65 ED 2D EC 
2a662     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2a666     01 EC 0A EC 
2a66a     14 EC 1E EC 
2a66e     29 EC FB 03 
2a672     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2a676     63 06 60 06 
2a67a     5E 06 59 06 
2a67e     58 06 54 06 
2a682     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2a686     69 F1 21 ED 
2a68a     55 EC 33 EC 
2a68e     36 EC 40 EC 
2a692     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2a696     5C EC 68 EC 
2a69a     92 02 D9 02 
2a69e     D7 02 D7 02 
2a6a2     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2a6a6     D1 02 D1 02 
2a6aa     CE 02 CD 02 
2a6ae     5D FC 80 EF 
2a6b2     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2a6b6     83 EC 8A EC 
2a6ba     93 EC 9C EC 
2a6be     A5 EC B1 EC 
2a6c2     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2a6c6     2B 03 2A 03 
2a6ca     29 03 26 03 
2a6ce     25 03 24 03 
2a6d2     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2a6d6     1F 03 70 F7 
2a6da     D0 EE 27 ED 
2a6de     DB EC D4 EC 
2a6e2     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2a6e6     F0 EC FA EC 
2a6ea     02 ED F9 F4 
2a6ee     7B 03 7C 03 
2a6f2     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2a6f6     75 03 73 03 
2a6fa     72 03 70 03 
2a6fe     6D 03 6C 03 
2a702     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2a706     54 ED 22 ED 
2a70a     22 ED 2C ED 
2a70e     35 ED 3F ED 
2a712     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2a716     14 01 C3 03 
2a71a     C1 03 C0 03 
2a71e     5F 01 A5 00 
2a722     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2a726     7B 00 7C 00 
2a72a     20 00 85 F1 
2a72e     2A EE 89 ED 
2a732     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
2a736     80 ED 87 ED 
2a73a     90 ED 9A ED 
2a73e     A3 ED 73 00 
2a742     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2a746     D0 00 D0 00 
2a74a     D0 00 D0 00 
2a74e     D0 00 CF 00 
2a752     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2a756     80 F0 3D EE 
2a75a     D5 ED C7 ED 
2a75e     CD ED D6 ED 
2a762     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2a766     F2 ED FA ED 
2a76a     1D 01 29 01 
2a76e     27 01 27 01 
2a772     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2a776     25 01 26 01 
2a77a     26 01 23 01 
2a77e     D0 F7 EC EF 
2a782     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2a786     1C EE 24 EE 
2a78a     2D EE 37 EE 
2a78e     40 EE 47 EE 
2a792     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2a796     7D 01 7B 01 
2a79a     7A 01 7A 01 
2a79e     79 01 78 01 
2a7a2     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2a7a6     84 FE DE F3 
2a7aa     6C EF 93 EE 
2a7ae     72 EE 72 EE 
2a7b2     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2a7b6     8B EE 95 EE 
2a7ba     9E EE 15 FC 
2a7be     67 FE 67 FE 
2a7c2     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2a7c6     6B FE 6B FE 
2a7ca     6D FE 6D FE 
2a7ce     6D FE 6F FE 
2a7d2     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2a7d6     DF EE CC EE 
2a7da     CF EE D9 EE 
2a7de     E1 EE EA EE 
2a7e2     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2a7e6     5A FE C4 FE 
2a7ea     C3 FE C5 FE 
2a7ee     C6 FE C6 FE 
2a7f2     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2a7f6     C8 FE C7 FE 
2a7fa     DA FB 85 F1 
2a7fe     8D EF 31 EF 
2a802     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2a806     34 EF 3E EF 
2a80a     46 EF 4F EF 
2a80e     57 EF 0D FF 
2a812     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2a816     1F FF 1F FF 
2a81a     21 FF 21 FF 
2a81e     21 FF 21 FF 
2a822     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2a826     15 F1 BE EF 
2a82a     84 EF 7E EF 
2a82e     88 EF 8F EF 
2a832     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
2a836     A9 EF 06 F2 
2a83a     A6 FC AB FC 
2a83e     AD FC AE FC 
2a842     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2a846     B2 FC B4 FC 
2a84a     B6 FC B7 FC 
2a84e     8B F4 BD F0 
2a852     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2a856     E4 EF EE EF 
2a85a     F6 EF FD EF 
2a85e     04 F0 0E F0 
2a862     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2a866     0B FD 0D FD 
2a86a     0F FD 11 FD 
2a86e     11 FD 13 FD 
2a872     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2a876     17 FD 64 F3 
2a87a     CD F0 52 F0 
2a87e     41 F0 45 F0 
2a882     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2a886     5B F0 64 F0 
2a88a     6D F0 FB FC 
2a88e     65 FD 68 FD 
2a892     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2a896     6C FD 6D FD 
2a89a     6F FD 70 FD 
2a89e     72 FD B3 FB 
2a8a2     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2a8a6     A4 F0 99 F0 
2a8aa     A0 F0 A8 F0 
2a8ae     AE F0 B9 F0 
2a8b2     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2a8b6     CB FB DD FB 
2a8ba     DE FB E0 FB 
2a8be     E3 FB E3 FB 
2a8c2     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2a8c6     E9 FB EC FB 
2a8ca     62 F7 27 F2 
2a8ce     2A F1 FF F0 
2a8d2     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2a8d6     0C F1 13 F1 
2a8da     1B F1 23 F1 
2a8de     33 F2 3C FC 
2a8e2     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
2a8e6     42 FC 45 FC 
2a8ea     47 FC 48 FC 
2a8ee     4A FC 4C FC 
2a8f2     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
2a8f6     20 F2 77 F1 
2a8fa     5C F1 5F F1 
2a8fe     64 F1 6C F1 
2a902     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
2a906     83 F1 DC F8 
2a90a     9A FC 9A FC 
2a90e     9B FC 9E FC 
2a912     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
2a916     A3 FC A4 FC 
2a91a     A6 FC A9 FC 
2a91e     90 F4 33 F2 
2a922     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
2a926     BA F1 BF F1 
2a92a     C7 F1 CE F1 
2a92e     D6 F1 DC F1 
2a932     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
2a936     F3 FC F5 FC 
2a93a     FE FB 79 FB 
2a93e     62 FB 5F FB 
2a942     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
2a946     6F FA AF F3 
2a94a     53 F2 12 F2 
2a94e     0F F2 15 F2 
2a952     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
2a956     2A F2 32 F2 
2a95a     38 F2 9A FB 
2a95e     AF FB B1 FB 
2a962     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2a966     B7 FB B8 FB 
2a96a     BA FB BC FB 
2a96e     C1 FB 3B F8 
2a972     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
2a976     6E F2 6C F2 
2a97a     74 F2 7A F2 
2a97e     81 F2 87 F2 
2a982     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
2a986     06 FC 09 FC 
2a98a     0C FC 0E FC 
2a98e     0F FC 12 FC 
2a992     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
2a996     17 FC 1A FC 
2a99a     B2 F6 7B F3 
2a99e     DD F2 C5 F2 
2a9a2     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
2a9a6     D4 F2 DB F2 
2a9aa     E0 F2 E8 F2 
2a9ae     28 F8 60 FC 
2a9b2     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
2a9b6     64 FC 66 FC 
2a9ba     68 FC 6A FC 
2a9be     6D FC 52 FC 
2a9c2     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
2a9c6     78 F3 24 F3 
2a9ca     1A F3 1E F3 
2a9ce     24 F3 2A F3 
2a9d2     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
2a9d6     3D F3 80 FA 
2a9da     0C FB 0F FB 
2a9de     10 FB 14 FB 
2a9e2     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
2a9e6     1B FB 1D FB 
2a9ea     1F FB 92 FA 
2a9ee     DE F4 AE F3 
2a9f2     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
2a9f6     79 F3 7E F3 
2a9fa     84 F3 8C F3 
2a9fe     92 F3 97 F3 
2aa02     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
2aa06     67 FB 69 FB 
2aa0a     6B FB 6F FB 
2aa0e     71 FB 72 FB 
2aa12     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
2aa16     E3 F8 BA F4 
2aa1a     EE F3 CC F3 
2aa1e     CA F3 CF F3 
2aa22     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
2aa26     E2 F3 E8 F3 
2aa2a     ED F3 B7 FB 
2aa2e     BC FB BE FB 
2aa32     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
2aa36     C4 FB C6 FB 
2aa3a     C8 FB C9 FB 
2aa3e     CC FB 8F F7 
2aa42     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
2aa46     1E F4 1E F4 
2aa4a     24 F4 2A F4 
2aa4e     30 F4 38 F4 
2aa52     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
2aa56     AD FA B1 FA 
2aa5a     B4 FA B6 FA 
2aa5e     BA FA BB FA 
2aa62     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
2aa66     C2 FA C6 FA 
2aa6a     55 F6 C6 F4 
2aa6e     7D F4 72 F4 
2aa72     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
2aa76     83 F4 89 F4 
2aa7a     8F F4 94 F4 
2aa7e     66 FA 03 FB 
2aa82     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
2aa86     0A FB 0E FB 
2aa8a     10 FB 11 FB 
2aa8e     16 FB 18 FB 
2aa92     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
2aa96     F9 F4 CA F4 
2aa9a     C5 F4 CB F4 
2aa9e     D1 F4 D7 F4 
2aaa2     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
2aaa6     E8 F4 3F FB 
2aaaa     56 FB 58 FB 
2aaae     5A FB 5E FB 
2aab2     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
2aab6     64 FB 64 FB 
2aaba     69 FB 99 F9 
2aabe     E9 F5 33 F5 
2aac2     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
2aac6     1D F5 22 F5 
2aaca     27 F5 2E F5 
2aace     32 F5 37 F5 
2aad2     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
2aad6     BC FA BC FA 
2aada     C1 FA C2 FA 
2aade     C4 FA C8 FA 
2aae2     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
2aae6     F9 F7 DB F5 
2aaea     78 F5 69 F5 
2aaee     6A F5 70 F5 
2aaf2     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
2aaf6     7F F5 85 F5 
2aafa     6E F7 06 FB 
2aafe     0A FB 0B FB 
2ab02     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
2ab06     14 FB 15 FB 
2ab0a     18 FB 1B FB 
2ab0e     1D FB 70 F7 
2ab12     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
2ab16     B6 F5 BB F5 
2ab1a     C0 F5 C6 F5 
2ab1e     CA F5 CF F5 
2ab22     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
2ab26     54 FB 56 FB 
2ab2a     5A FB 5B FB 
2ab2e     5E FB 5F FB 
2ab32     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
2ab36     67 FB 52 FB 
2ab3a     29 F7 33 F6 
2ab3e     06 F6 02 F6 
2ab42     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
2ab46     10 F6 16 F6 
2ab4a     1A F6 1F F6 
2ab4e     81 FB 9F FB 
2ab52     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
2ab56     51 FB F2 FA 
2ab5a     E3 FA E3 FA 
2ab5e     E5 FA E9 FA 
2ab62     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
2ab66     64 F6 4D F6 
2ab6a     4D F6 53 F6 
2ab6e     57 F6 5C F6 
2ab72     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
2ab76     6A F6 19 FB 
2ab7a     1E FB 22 FB 
2ab7e     23 FB 24 FB 
2ab82     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
2ab86     2C FB 2E FB 
2ab8a     32 FB F0 F8 
2ab8e     01 F7 A5 F6 
2ab92     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
2ab96     9F F6 A3 F6 
2ab9a     A6 F6 AC F6 
2ab9e     B0 F6 EB F7 
2aba2     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
2aba6     68 FB 6C FB 
2abaa     6E FB 71 FB 
2abae     72 FB 74 FB 
2abb2     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
2abb6     71 F8 21 F7 
2abba     E5 F6 DD F6 
2abbe     E1 F6 E6 F6 
2abc2     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
2abc6     F5 F6 F7 F6 
2abca     F7 FA AB FB 
2abce     AD FB AF FB 
2abd2     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
2abd6     B6 FB B9 FB 
2abda     BB FB BC FB 
2abde     21 FB 07 F8 
2abe2     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
2abe6     22 F7 26 F7 
2abea     2B F7 2E F7 
2abee     34 F7 38 F7 
2abf2     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
2abf6     13 FB 16 FB 
2abfa     17 FB 1B FB 
2abfe     1E FB 20 FB 
2ac02     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
2ac06     26 FB 77 FA 
2ac0a     F3 F7 7C F7 
2ac0e     67 F7 6A F7 
2ac12     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
2ac16     74 F7 7A F7 
2ac1a     7E F7 82 F7 
2ac1e     53 FB 5A FB 
2ac22     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
2ac26     5F FB 63 FB 
2ac2a     65 FB 67 FB 
2ac2e     69 FB 6A FB 
2ac32     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
2ac36     B5 F7 A9 F7 
2ac3a     AD F7 B0 F7 
2ac3e     B5 F7 B8 F7 
2ac42     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
2ac46     6E F8 99 FB 
2ac4a     9C FB 9D FB 
2ac4e     9F FB A4 FB 
2ac52     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
2ac56     A9 FB AB FB 
2ac5a     AD FB 46 F9 
2ac5e     26 F8 F0 F7 
2ac62     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
2ac66     F4 F7 F8 F7 
2ac6a     FB F7 FF F7 
2ac6e     03 F8 65 FA 
2ac72     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
2ac76     2B FB 2F FB 
2ac7a     30 FB 32 FB 
2ac7e     34 FB 38 FB 
2ac82     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
2ac86     E9 F8 4A F8 
2ac8a     2E F8 2C F8 
2ac8e     2F F8 36 F8 
2ac92     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
2ac96     41 F8 44 F8 
2ac9a     4A FB 67 FB 
2ac9e     68 FB 6B FB 
2aca2     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
2aca6     73 FB 74 FB 
2acaa     78 FB 7A FB 
2acae     14 FB E7 F8 
2acb2     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
2acb6     6D F8 70 F8 
2acba     73 F8 78 F8 
2acbe     7C F8 80 F8 
2acc2     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
2acc6     A6 FB A7 FB 
2acca     A9 FB AC FB 
2acce     AF FB B1 FB 
2acd2     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2acd6     B7 FB 73 FA 
2acda     F8 F8 B4 F8 
2acde     A9 F8 AB F8 
2ace2     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
2ace6     B4 F8 B8 F8 
2acea     BB F8 FA F8 
2acee     64 FB 65 FB 
2acf2     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
2acf6     6D FB 6F FB 
2acfa     70 FB 74 FB 
2acfe     77 FB 77 FB 
2ad02     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
2ad06     E9 F8 E4 F8 
2ad0a     E8 F8 EB F8 
2ad0e     EE F8 F2 F8 
2ad12     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
2ad16     B5 FA 9F FB 
2ad1a     A1 FB A4 FB 
2ad1e     A5 FB A9 FB 
2ad22     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
2ad26     AE FB B1 FB 
2ad2a     B2 FB C7 F9 
2ad2e     39 F9 22 F9 
2ad32     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
2ad36     26 F9 2A F9 
2ad3a     2E F9 32 F9 
2ad3e     33 F9 BA FB 
2ad42     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
2ad46     DE FB E1 FB 
2ad4a     E2 FB E4 FB 
2ad4e     E5 FB E7 FB 
2ad52     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
2ad56     C5 F9 67 F9 
2ad5a     57 F9 56 F9 
2ad5e     5B F9 5F F9 
2ad62     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
2ad66     68 F9 6C F9 
2ad6a     0B FC 11 FC 
2ad6e     14 FC 15 FC 
2ad72     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
2ad76     B5 FB B5 FB 
2ad7a     B6 FB B8 FB 
2ad7e     E9 FA C8 F9 
2ad82     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
2ad86     90 F9 94 F9 
2ad8a     95 F9 99 F9 
2ad8e     9D F9 9F F9 
2ad92     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
2ad96     DE FB DF FB 
2ad9a     E2 FB E4 FB 
2ad9e     E6 FB E8 FB 
2ada2     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
2ada6     EF FB AC FA 
2adaa     E9 F9 C7 F9 
2adae     C3 F9 C8 F9 
2adb2     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
2adb6     D0 F9 D4 F9 
2adba     D6 F9 0E FB 
2adbe     11 FC 13 FC 
2adc2     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
2adc6     19 FC 1B FC 
2adca     1D FC 1E FC 
2adce     21 FC 22 FC 
2add2     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
2add6     F7 F9 F7 F9 
2adda     FB F9 FE F9 
2adde     00 FA 03 FA 
2ade2     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
2ade6     1B FC 45 FC 
2adea     46 FC 48 FC 
2adee     4A FC 4B FC 
2adf2     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
2adf6     52 FC 54 FC 
2adfa     F3 FB 82 FA 
2adfe     35 FA 28 FA 
2ae02     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
2ae06     31 FA 32 FA 
2ae0a     37 FA 37 FA 
2ae0e     3C FA 00 FC 
2ae12     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
2ae16     09 FC 0B FC 
2ae1a     0F FC 12 FC 
2ae1e     12 FC 15 FC 
2ae22     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
2ae26     8D FA 60 FA 
2ae2a     5B FA 5C FA 
2ae2e     60 FA 61 FA 
2ae32     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
2ae36     6C FA 6D FA 
2ae3a     37 FC 3A FC 
2ae3e     3B FC 3D FC 
2ae42     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
2ae46     43 FC 44 FC 
2ae4a     45 FC 47 FC 
2ae4e     51 FB AB FA 
2ae52     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
2ae56     8E FA 91 FA 
2ae5a     93 FA 95 FA 
2ae5e     98 FA 9B FA 
2ae62     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
2ae66     68 FC 6A FC 
2ae6a     6C FC 6E FC 
2ae6e     70 FC 72 FC 
2ae72     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
2ae76     76 FC 3B FB 
2ae7a     D0 FA BB FA 
2ae7e     B9 FA BD FA 
2ae82     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
2ae86     C4 FA C6 FA 
2ae8a     CA FA 13 FC 
2ae8e     3A FC 3A FC 
2ae92     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2ae96     41 FC 43 FC 
2ae9a     44 FC 47 FC 
2ae9e     48 FC 3C FC 
2aea2     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2aea6     E6 FA E8 FA 
2aeaa     EB FA EE FA 
2aeae     F0 FA F2 FA 
2aeb2     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2aeb6     61 FC 66 FC 
2aeba     68 FC 6B FC 
2aebe     6C FC 6E FC 
2aec2     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2aec6     73 FC 75 FC 
2aeca     13 FC 3F FB 
2aece     17 FB 12 FB 
2aed2     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2aed6     1A FB 1D FB 
2aeda     1F FB 20 FB 
2aede     23 FB 92 FC 
2aee2     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2aee6     96 FC 97 FC 
2aeea     9A FC 9C FC 
2aeee     9E FC 9F FC 
2aef2     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2aef6     5A FB 41 FB 
2aefa     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2aefe     01 00 00 00 
2af02     00 00 00 00 
2af06     00 00 00 00 
2af0a     00 00 00 00 | mouse  file "mouse2.def"
2af0e     00 00 00 00 
2af12     00 00 00 00 
2af16     00 00 00 00 
2af1a     00 00 00 00 | 	byte	$00[16]
2af1e     01 01 00 00 
2af22     00 00 00 00 
2af26     00 00 00 00 
2af2a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2af2e     00 00 00 00 
2af32     00 00 00 00 
2af36     00 00 00 00 
2af3a     00 00 00 00 | 	byte	$00[16]
2af3e     01 0D 01 00 
2af42     00 00 00 00 
2af46     00 00 00 00 
2af4a     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2af4e     00 00 00 00 
2af52     00 00 00 00 
2af56     00 00 00 00 
2af5a     00 00 00 00 | 	byte	$00[16]
2af5e     01 0D 0D 01 
2af62     00 00 00 00 
2af66     00 00 00 00 
2af6a     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2af6e     00 00 00 00 
2af72     00 00 00 00 
2af76     00 00 00 00 
2af7a     00 00 00 00 | 	byte	$00[16]
2af7e     01 0D 0D 0D 
2af82     01 00 00 00 
2af86     00 00 00 00 
2af8a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2af8e     00 00 00 00 
2af92     00 00 00 00 
2af96     00 00 00 00 
2af9a     00 00 00 00 | 	byte	$00[16]
2af9e     01 0D 0D 0D 
2afa2     0D 01 00 00 
2afa6     00 00 00 00 
2afaa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2afae     00 00 00 00 
2afb2     00 00 00 00 
2afb6     00 00 00 00 
2afba     00 00 00 00 | 	byte	$00[16]
2afbe     01 0D 0D 0D 
2afc2     0D 0D 01 00 
2afc6     00 00 00 00 
2afca     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2afce     00 00 00 00 
2afd2     00 00 00 00 
2afd6     00 00 00 00 
2afda     00 00 00 00 | 	byte	$00[16]
2afde     01 0D 0D 0D 
2afe2     0D 0D 0D 01 
2afe6     00 00 00 00 
2afea     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2afee     00 00 00 00 
2aff2     00 00 00 00 
2aff6     00 00 00 00 
2affa     00 00 00 00 | 	byte	$00[16]
2affe     01 0D 0D 0D 
2b002     0D 0D 0D 0C 
2b006     01 00 00 00 
2b00a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2b00e     00 00 00 00 
2b012     00 00 00 00 
2b016     00 00 00 00 
2b01a     00 00 00 00 | 	byte	$00[16]
2b01e     01 0D 0D 0D 
2b022     0D 0D 0D 0D 
2b026     0C 01 00 00 
2b02a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2b02e     00 00 00 00 
2b032     00 00 00 00 
2b036     00 00 00 00 
2b03a     00 00 00 00 | 	byte	$00[16]
2b03e     01 0D 0D 0D 
2b042     0D 0D 0D 0D 
2b046     0D 0C 01 00 
2b04a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2b04e     00 00 00 00 
2b052     00 00 00 00 
2b056     00 00 00 00 
2b05a     00 00 00 00 | 	byte	$00[16]
2b05e     01 0D 0D 0D 
2b062     0D 0D 0D 0D 
2b066     0D 0D 0B 01 
2b06a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2b06e     00 00 00 00 
2b072     00 00 00 00 
2b076     00 00 00 00 
2b07a     00 00 00 00 | 	byte	$00[16]
2b07e     01 0D 0D 0D 
2b082     0C 0D 0D 03 
2b086     01 01 01 01 
2b08a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2b08e     00 00 00 00 
2b092     00 00 00 00 
2b096     00 00 00 00 
2b09a     00 00 00 00 | 	byte	$00[16]
2b09e     01 0D 0D 0C 
2b0a2     01 09 0D 03 
2b0a6     00 00 00 00 
2b0aa     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2b0ae     00 00 00 00 
2b0b2     00 00 00 00 
2b0b6     00 00 00 00 
2b0ba     00 00 00 00 | 	byte	$00[16]
2b0be     01 0D 0C 01 
2b0c2     00 01 0D 0B 
2b0c6     01 00 00 00 
2b0ca     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2b0ce     00 00 00 00 
2b0d2     00 00 00 00 
2b0d6     00 00 00 00 
2b0da     00 00 00 00 | 	byte	$00[16]
2b0de     01 0C 01 00 
2b0e2     00 01 0A 0D 
2b0e6     01 00 00 00 
2b0ea     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2b0ee     00 00 00 00 
2b0f2     00 00 00 00 
2b0f6     00 00 00 00 
2b0fa     00 00 00 00 | 	byte	$00[16]
2b0fe     01 01 00 00 
2b102     00 00 01 0D 
2b106     0B 01 00 00 
2b10a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2b10e     00 00 00 00 
2b112     00 00 00 00 
2b116     00 00 00 00 
2b11a     00 00 00 00 
2b11e     00 00 00 00 
2b122     00 00       | 	byte	$00[22]
2b124     01 0B 0D 01 
2b128     00 00 00 00 
2b12c     00 00 00 00 
2b130     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b134     00 00 00 00 
2b138     00 00 00 00 
2b13c     00 00 00 00 
2b140     00 00 00 00 
2b144     00          | 	byte	$00[17]
2b145     01 01 00 00 
2b149     00 00 00 00 
2b14d     00 00 00 00 
2b151     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b155     00 00 00 00 
      ...             
2b2f9     00 00 00 00 
2b2fd     00          | 	byte	$00[425]
2b2fe                 | 
2b2fe     00 00       |              	org
2b300 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
2b304 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
2b308 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
2b30c 003             | 
2b30c 003 00 30 04 F6 |                 mov     psramaddr,#0
2b310 004             | 
2b310 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
2b314 005 20 00 00 FF 
2b318 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
2b31c 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
2b320 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
2b324 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
2b328 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
2b32c 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
2b330 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2b334 00d             | 
2b334 00d 20 00 00 FF 
2b338 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2b33c 00f E0 03 00 FF 
2b340 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2b344 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2b348 012             | 
2b348 012             |                 
2b348 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2b34c 013             |     
2b34c 013 01 2C 60 FD |                 cogid 	t11				' get id
2b350 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2b354 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2b358 016             | 
2b358 016 00 00 00 00 | t11 		long 	0
2b35c 017 00 FF 07 00 | mailbox 	long 	$7FF00
2b360 018 00 00 00 00 | psramaddr 	long 	0
2b364 019 00 00 00 00 | pslockval	long 	0
2b368 01a 00 00 00 00 | cmd             long    0
2b36c 01b 00 00 00 00 | buf1            long    0
2b370 01c 00 40 00 00 | buf2            long    16384
2b374 01d 78 B3 02 00 | 	long	@@@_dat_ + 8468
2b378 01e 50 32 20 52 
2b37c 01f 65 74 72 6F 
2b380 020 6D 61 63 68 
2b384 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2b388 022 42 41 53 49 
2b38c 023 43 20 76 65 
2b390 024 72 73 69 6F 
2b394 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2b398 026 32 35 00 00 | 	byte	$32, $35, $00, $00
2b39c 027             | 	alignl
2b39c 027             | _hg010b_spin2_dat_
2b39c 027             | 
2b39c 027 00 00 00 00 
2b3a0 028 00 00 00 00 
2b3a4 029 00 00 00 00 
2b3a8 02a 00 00 00 00 
2b3ac 02b 00 00 00    | vga_font       file "vgafont.def"
2b3af 02b 7E 81 A5 81 
2b3b3 02c 81 BD 99 81 
2b3b7 02d 81 7E 00 00 
2b3bb 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
2b3bf 02f 7E FF DB FF 
2b3c3 030 FF C3 E7 FF 
2b3c7 031 FF 7E 00 00 
2b3cb 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
2b3cf 033 00 36 7F 7F 
2b3d3 034 7F 7F 3E 1C 
2b3d7 035 08 00 00 00 
2b3db 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
2b3df 037 00 08 1C 3E 
2b3e3 038 7F 3E 1C 08 
2b3e7 039 00 00 00 00 
2b3eb 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
2b3ef 03b 18 3C 3C E7 
2b3f3 03c E7 E7 18 18 
2b3f7 03d 3C 00 00 00 
2b3fb 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2b3ff 03f 18 3C 7E FF 
2b403 040 FF 7E 18 18 
2b407 041 3C 00 00 00 
2b40b 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2b40f 043 00 00 00 18 
2b413 044 3C 3C 18 00 
2b417 045 00 00 00 00 
2b41b 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
2b41f 047 FF FF FF E7 
2b423 048 C3 C3 E7 FF 
2b427 049 FF FF FF FF 
2b42b 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2b42f 04b 00 00 3C 66 
2b433 04c 42 42 66 3C 
2b437 04d 00 00 00 00 
2b43b 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2b43f 04f FF FF C3 99 
2b443 050 BD BD 99 C3 
2b447 051 FF FF FF FF 
2b44b 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2b44f 053 78 70 58 4C 
2b453 054 1E 33 33 33 
2b457 055 33 1E 00 00 
2b45b 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2b45f 057 3C 66 66 66 
2b463 058 66 3C 18 7E 
2b467 059 18 18 00 00 
2b46b 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2b46f 05b FC CC FC 0C 
2b473 05c 0C 0C 0C 0E 
2b477 05d 0F 07 00 00 
2b47b 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2b47f 05f FE C6 FE C6 
2b483 060 C6 C6 C6 E6 
2b487 061 E7 67 03 00 
2b48b 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2b48f 063 18 18 DB 3C 
2b493 064 E7 3C DB 18 
2b497 065 18 00 00 00 
2b49b 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2b49f 067 03 07 0F 1F 
2b4a3 068 7F 1F 0F 07 
2b4a7 069 03 01 00 00 
2b4ab 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
2b4af 06b 60 70 78 7C 
2b4b3 06c 7F 7C 78 70 
2b4b7 06d 60 40 00 00 
2b4bb 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
2b4bf 06f 18 3C 7E 18 
2b4c3 070 18 18 7E 3C 
2b4c7 071 18 00 00 00 
2b4cb 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
2b4cf 073 66 66 66 66 
2b4d3 074 66 66 66    | 	byte	$66[7]
2b4d6 075 00 66 66 00 
2b4da 076 00 00 00 00 
2b4de 077 00 FE DB DB 
2b4e2 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2b4e6 079 D8 D8 D8 00 
2b4ea 07a 00 00 00 3E 
2b4ee 07b 63 06 1C 36 
2b4f2 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2b4f6 07d 30 63 3E 00 
2b4fa 07e 00 00 00 00 
2b4fe 07f 00 00 00 00 
2b502 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2b506 081 7F 7F 7F 00 
2b50a 082 00 00 00 00 
2b50e 083 00 18 3C 7E 
2b512 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2b516 085 3C 18 7E 00 
2b51a 086 00 00 00 00 
2b51e 087 00 18 3C 7E 
2b522 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2b526 089 18 18 18 00 
2b52a 08a 00 00 00 00 
2b52e 08b 00 18 18 18 
2b532 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2b536 08d 7E 3C 18 00 
2b53a 08e 00 00 00 00 
2b53e 08f 00 00 00 18 
2b542 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2b546 091 00 00 00 00 
2b54a 092 00 00 00 00 
2b54e 093 00 00 00    | 	byte	$00[11]
2b551 094 0C 06 7F 06 
2b555 095 0C 00 00 00 
2b559 096 00 00 00 00 
2b55d 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b561 098 00 03 03 03 
2b565 099 7F 00 00 00 
2b569 09a 00 00 00 00 
2b56d 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b571 09c 14 36 7F 36 
2b575 09d 14 00 00 00 
2b579 09e 00 00 00 00 
2b57d 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
2b581 0a0 1C 1C 3E 3E 
2b585 0a1 7F 7F 00 00 
2b589 0a2 00 00 00 00 
2b58d 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2b591 0a4 7F 3E 3E 1C 
2b595 0a5 1C 08 00 00 
2b599 0a6 00 00 00 00 
2b59d 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b5a1 0a8 00 00 00 00 
2b5a5 0a9 00 00 00 00 
2b5a9 0aa 00 00 00 00 
2b5ad 0ab 00 00       | 	byte	$00[14]
2b5af 0ab 18 3C 3C 3C 
2b5b3 0ac 18 18 18 00 
2b5b7 0ad 18 18 00 00 
2b5bb 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2b5bf 0af 66 24 00 00 
2b5c3 0b0 00 00 00 00 
2b5c7 0b1 00 00 00 00 
2b5cb 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b5cf 0b3 00 36 36 7F 
2b5d3 0b4 36 36 36 7F 
2b5d7 0b5 36 36 00 00 
2b5db 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
2b5df 0b7 3E 63 43 03 
2b5e3 0b8 3E 60 60 61 
2b5e7 0b9 63 3E 18 18 
2b5eb 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
2b5ef 0bb 00 00 43 63 
2b5f3 0bc 30 18 0C 06 
2b5f7 0bd 63 61 00 00 
2b5fb 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
2b5ff 0bf 1C 36 36 1C 
2b603 0c0 6E 3B 33 33 
2b607 0c1 33 6E 00 00 
2b60b 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
2b60f 0c3 0C 0C 0C 06 
2b613 0c4 00 00 00 00 
2b617 0c5 00 00 00 00 
2b61b 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b61f 0c7 30 18 0C 0C 
2b623 0c8 0C 0C 0C 0C 
2b627 0c9 18 30 00 00 
2b62b 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
2b62f 0cb 0C 18 30 30 
2b633 0cc 30 30 30 30 
2b637 0cd 18 0C 00 00 
2b63b 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2b63f 0cf 00 00 00 66 
2b643 0d0 3C FF 3C 66 
2b647 0d1 00 00 00 00 
2b64b 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2b64f 0d3 00 00 00 18 
2b653 0d4 18 7E 18 18 
2b657 0d5 00 00 00 00 
2b65b 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2b65f 0d7 00 00 00 00 
2b663 0d8 00 00 00 00 | 	byte	$00[8]
2b667 0d9 18 18 18 0C 
2b66b 0da 00 00 00 00 
2b66f 0db 00 00 00 00 
2b673 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2b677 0dd 00 00 00 00 
2b67b 0de 00 00 00 00 
2b67f 0df 00 00 00 00 
2b683 0e0 00 00 00 00 | 	byte	$00[16]
2b687 0e1 18 18 00 00 
2b68b 0e2 00 00 00 00 
2b68f 0e3 00 00 40 60 
2b693 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2b697 0e5 03 01 00 00 
2b69b 0e6 00 00 00 00 
2b69f 0e7 1C 36 63 63 
2b6a3 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2b6a7 0e9 36 1C 00 00 
2b6ab 0ea 00 00 00 00 
2b6af 0eb 18 1C 1E 18 
2b6b3 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
2b6b7 0ed 18 7E 00 00 
2b6bb 0ee 00 00 00 00 
2b6bf 0ef 3E 63 60 30 
2b6c3 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
2b6c7 0f1 63 7F 00 00 
2b6cb 0f2 00 00 00 00 
2b6cf 0f3 3E 63 60 60 
2b6d3 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2b6d7 0f5 63 3E 00 00 
2b6db 0f6 00 00 00 00 
2b6df 0f7 30 38 3C 36 
2b6e3 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
2b6e7 0f9 30 78 00 00 
2b6eb 0fa 00 00 00 00 
2b6ef 0fb 7F 03 03 03 
2b6f3 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
2b6f7 0fd 63 3E 00 00 
2b6fb 0fe 00 00 00 00 
2b6ff 0ff 1C 06 03 03 
2b703 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
2b707 101 63 3E 00 00 
2b70b 102 00 00 00 00 
2b70f 103 7F 63 60 60 
2b713 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2b717 105 0C 0C 00 00 
2b71b 106 00 00 00 00 
2b71f 107 3E 63 63 63 
2b723 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2b727 109 63 3E 00 00 
2b72b 10a 00 00 00 00 
2b72f 10b 3E 63 63 63 
2b733 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2b737 10d 30 1E 00 00 
2b73b 10e 00 00 00 00 
2b73f 10f 00 00 00 18 
2b743 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2b747 111 18 18 00 00 
2b74b 112 00 00 00 00 
2b74f 113 00 00 00 18 
2b753 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2b757 115 18 18 0C 00 
2b75b 116 00 00 00 00 
2b75f 117 00 60 30 18 
2b763 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2b767 119 30 60 00 00 
2b76b 11a 00 00 00 00 
2b76f 11b 00 00 00 7E 
2b773 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2b777 11d 00 00 00 00 
2b77b 11e 00 00 00 00 
2b77f 11f 00          | 	byte	$00[9]
2b780 120 06 0C 18 30 
2b784 121 60 30 18 0C 
2b788 122 06 00 00 00 
2b78c 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
2b790 124 63 63 30 18 
2b794 125 18 18 00 18 
2b798 126 18 00 00 00 
2b79c 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
2b7a0 128 3E 63 63 7B 
2b7a4 129 7B 7B 3B 03 
2b7a8 12a 3E 00 00 00 
2b7ac 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
2b7b0 12c 1C 36 63 63 
2b7b4 12d 7F 63 63 63 
2b7b8 12e 63 00 00 00 
2b7bc 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
2b7c0 130 66 66 66 3E 
2b7c4 131 66 66 66 66 
2b7c8 132 3F 00 00 00 
2b7cc 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
2b7d0 134 66 43 03 03 
2b7d4 135 03 03 43 66 
2b7d8 136 3C 00 00 00 
2b7dc 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
2b7e0 138 36 66 66 66 
2b7e4 139 66 66 66 36 
2b7e8 13a 1F 00 00 00 
2b7ec 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
2b7f0 13c 66 46 16 1E 
2b7f4 13d 16 06 46 66 
2b7f8 13e 7F 00 00 00 
2b7fc 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
2b800 140 66 46 16 1E 
2b804 141 16 06 06 06 
2b808 142 0F 00 00 00 
2b80c 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
2b810 144 66 43 03 03 
2b814 145 7B 63 63 66 
2b818 146 5C 00 00 00 
2b81c 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
2b820 148 63 63 63 7F 
2b824 149 63 63 63 63 
2b828 14a 63 00 00 00 
2b82c 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
2b830 14c 18 18 18 18 
2b834 14d 18 18 18 18 | 	byte	$18[8]
2b838 14e 3C 00 00 00 
2b83c 14f 00 00 00 78 
2b840 150 30 30 30 30 
2b844 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2b848 152 1E 00 00 00 
2b84c 153 00 00 00 67 
2b850 154 66 66 36 1E 
2b854 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2b858 156 67 00 00 00 
2b85c 157 00 00 00 0F 
2b860 158 06 06 06 06 
2b864 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2b868 15a 7F 00 00 00 
2b86c 15b 00 00 00 63 
2b870 15c 77 7F 7F 6B 
2b874 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
2b878 15e 63 00 00 00 
2b87c 15f 00 00 00 63 
2b880 160 67 6F 7F 7B 
2b884 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
2b888 162 63 00 00 00 
2b88c 163 00 00 00 3E 
2b890 164 63 63 63 63 
2b894 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b898 166 3E 00 00 00 
2b89c 167 00 00 00 3F 
2b8a0 168 66 66 66 3E 
2b8a4 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
2b8a8 16a 0F 00 00 00 
2b8ac 16b 00 00 00 3E 
2b8b0 16c 63 63 63 63 
2b8b4 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
2b8b8 16e 3E 30 70 00 
2b8bc 16f 00 00 00 3F 
2b8c0 170 66 66 66 3E 
2b8c4 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
2b8c8 172 67 00 00 00 
2b8cc 173 00 00 00 3E 
2b8d0 174 63 63 06 1C 
2b8d4 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2b8d8 176 3E 00 00 00 
2b8dc 177 00 00 00 7E 
2b8e0 178 7E 5A 18 18 
2b8e4 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2b8e8 17a 3C 00 00 00 
2b8ec 17b 00 00 00 63 
2b8f0 17c 63 63 63 63 
2b8f4 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2b8f8 17e 3E 00 00 00 
2b8fc 17f 00 00 00 63 
2b900 180 63 63 63 63 
2b904 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
2b908 182 08 00 00 00 
2b90c 183 00 00 00 63 
2b910 184 63 63 63 6B 
2b914 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
2b918 186 36 00 00 00 
2b91c 187 00 00 00 63 
2b920 188 63 36 3E 1C 
2b924 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
2b928 18a 63 00 00 00 
2b92c 18b 00 00 00 66 
2b930 18c 66 66 66 3C 
2b934 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
2b938 18e 3C 00 00 00 
2b93c 18f 00 00 00 7F 
2b940 190 63 61 30 18 
2b944 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2b948 192 7F 00 00 00 
2b94c 193 00 00 00 3C 
2b950 194 0C 0C 0C 0C 
2b954 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
2b958 196 3C 00 00 00 
2b95c 197 00 00 00 00 
2b960 198 01 03 07 0E 
2b964 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
2b968 19a 40 00 00 00 
2b96c 19b 00 00 00 3C 
2b970 19c 30 30 30 30 
2b974 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
2b978 19e 3C 00 00 00 
2b97c 19f 1C 36 00 00 
2b980 1a0 00 00 00 00 
2b984 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b988 1a2 00 00 00 00 
2b98c 1a3 00 00 00 00 
2b990 1a4 00 00 00 00 
2b994 1a5 00 00 00 00 
2b998 1a6 00          | 	byte	$00[17]
2b999 1a6 FF 00 00 0C 
2b99d 1a7 18 00 00 00 
2b9a1 1a8 00 00 00 00 
2b9a5 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b9a9 1aa 00 00 00 00 
2b9ad 1ab 00 00 00 00 
2b9b1 1ac 00          | 	byte	$00[9]
2b9b2 1ac 1E 30 3E 33 
2b9b6 1ad 33 33 6E 00 
2b9ba 1ae 00 00 00 00 
2b9be 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
2b9c2 1b0 1E 36 66 66 
2b9c6 1b1 66 66 3E 00 
2b9ca 1b2 00 00 00 00 
2b9ce 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b9d2 1b4 3E 63 03 03 
2b9d6 1b5 03 63 3E 00 
2b9da 1b6 00 00 00 00 
2b9de 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
2b9e2 1b8 3C 36 33 33 
2b9e6 1b9 33 33 6E 00 
2b9ea 1ba 00 00 00 00 
2b9ee 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b9f2 1bc 3E 63 7F 03 
2b9f6 1bd 03 63 3E 00 
2b9fa 1be 00 00 00 00 
2b9fe 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
2ba02 1c0 0C 1E 0C 0C 
2ba06 1c1 0C 0C 1E 00 
2ba0a 1c2 00 00 00 00 
2ba0e 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ba12 1c4 6E 33 33 33 
2ba16 1c5 33 33 3E 30 
2ba1a 1c6 33 1E 00 00 
2ba1e 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
2ba22 1c8 36 6E 66 66 
2ba26 1c9 66 66 67 00 
2ba2a 1ca 00 00 00 00 
2ba2e 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
2ba32 1cc 1C 18 18 18 
2ba36 1cd 18 18 3C 00 
2ba3a 1ce 00 00 00 00 
2ba3e 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
2ba42 1d0 70 60 60 60 
2ba46 1d1 60 60 60 66 
2ba4a 1d2 66 3C 00 00 
2ba4e 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
2ba52 1d4 66 36 1E 1E 
2ba56 1d5 36 66 67 00 
2ba5a 1d6 00 00 00 00 
2ba5e 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
2ba62 1d8 18 18 18 18 
2ba66 1d9 18 18       | 	byte	$18[6]
2ba68 1da 3C 00 00 00 
2ba6c 1db 00 00 00 00 
2ba70 1dc 00 00 37 7F 
2ba74 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
2ba78 1de 63 00 00 00 
2ba7c 1df 00 00 00 00 
2ba80 1e0 00 00 3B 66 
2ba84 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2ba88 1e2 66 00 00 00 
2ba8c 1e3 00 00 00 00 
2ba90 1e4 00 00 3E 63 
2ba94 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
2ba98 1e6 3E 00 00 00 
2ba9c 1e7 00 00 00 00 
2baa0 1e8 00 00 3B 66 
2baa4 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2baa8 1ea 3E 06 06 0F 
2baac 1eb 00 00 00 00 
2bab0 1ec 00 00 6E 33 
2bab4 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
2bab8 1ee 3E 30 30 78 
2babc 1ef 00 00 00 00 
2bac0 1f0 00 00 3B 6E 
2bac4 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
2bac8 1f2 0F 00 00 00 
2bacc 1f3 00 00 00 00 
2bad0 1f4 00 00 3E 63 
2bad4 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
2bad8 1f6 3E 00 00 00 
2badc 1f7 00 00 00 08 
2bae0 1f8 0C 0C 3F 0C 
2bae4 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2bae8 1fa 38 00 00 00 
2baec 1fb 00 00 00 00 
2baf0 1fc 00 00 33 33 
2baf4 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
2baf8 1fe 6E 00 00 00 
2bafc 1ff 00 00 00 00 
2bb00 200 00 00 63 63 
2bb04 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
2bb08 202 1C 00 00 00 
2bb0c 203 00 00 00 00 
2bb10 204 00 00 63 63 
2bb14 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
2bb18 206 36 00 00 00 
2bb1c 207 00 00 00 00 
2bb20 208 00 00 63 36 
2bb24 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
2bb28 20a 63 00 00 00 
2bb2c 20b 00 00 00 00 
2bb30 20c 00 00 63 63 
2bb34 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
2bb38 20e 7E 60 30 1F 
2bb3c 20f 00 00 00 00 
2bb40 210 00 00 7F 33 
2bb44 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
2bb48 212 7F 00 00 00 
2bb4c 213 00 00 00 70 
2bb50 214 18 18 18 0E 
2bb54 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
2bb58 216 70 00 00 00 
2bb5c 217 00 00 00 18 
2bb60 218 18 18 18 18 
2bb64 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
2bb68 21a 18 00 00 00 
2bb6c 21b 00 00 00 0E 
2bb70 21c 18 18 18 70 
2bb74 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
2bb78 21e 0E 00 00 00 
2bb7c 21f 6E 3B 00 00 
2bb80 220 00 00 00 00 
2bb84 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bb88 222 00 00 00 00 
2bb8c 223 00 00 00 00 
2bb90 224 00 00       | 	byte	$00[10]
2bb92 224 08 1C 36 63 
2bb96 225 63 63 7F 00 
2bb9a 226 00 00 00 00 
2bb9e 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
2bba2 228 03 03 03 03 
2bba6 229 43 66 3C 18 
2bbaa 22a 30 1E 00 00 
2bbae 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
2bbb2 22c 33 33 33 33 
2bbb6 22d 33 33       | 	byte	$33[6]
2bbb8 22e 6E 00 00 00 
2bbbc 22f 00 00 60 30 
2bbc0 230 18 00 3E 63 
2bbc4 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
2bbc8 232 3E 00 00 00 
2bbcc 233 00 00 08 1C 
2bbd0 234 36 00 1E 30 
2bbd4 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
2bbd8 236 6E 00 00 00 
2bbdc 237 00 00 00 00 
2bbe0 238 33 00 1E 30 
2bbe4 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
2bbe8 23a 6E 00 00 00 
2bbec 23b 00 00 1C 36 
2bbf0 23c 1C 00 33 33 
2bbf4 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
2bbf8 23e 6E 00 00 00 
2bbfc 23f 00 00 60 30 
2bc00 240 18 00 3E 63 
2bc04 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
2bc08 242 3E 00 00 00 
2bc0c 243 00 00 00 00 
2bc10 244 00 00 3E 63 
2bc14 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
2bc18 246 3E 18 30 1E 
2bc1c 247 00 00 00 1C 
2bc20 248 58 78 38 18 
2bc24 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
2bc28 24a 3C 00 00 00 
2bc2c 24b 00 00 00 00 
2bc30 24c 63 00 3E 63 
2bc34 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
2bc38 24e 3E 00 00 00 
2bc3c 24f 66 33 00 3E 
2bc40 250 63 63 63 63 
2bc44 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2bc48 252 3E 00 00 00 
2bc4c 253 00 00 CC 66 
2bc50 254 33 00 3E 63 
2bc54 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
2bc58 256 3E 00 00 00 
2bc5c 257 00 00 18 3C 
2bc60 258 66 00 1C 18 
2bc64 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
2bc68 25a 3C 00 00 00 
2bc6c 25b 30 18 00 7F 
2bc70 25c 63 61 30 18 
2bc74 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2bc78 25e 7F 00 00 00 
2bc7c 25f 00 63 00 08 
2bc80 260 1C 36 63 63 
2bc84 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
2bc88 262 63 00 00 00 
2bc8c 263 30 18 00 3C 
2bc90 264 66 43 03 03 
2bc94 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
2bc98 266 3C 00 00 00 
2bc9c 267 30 18 00 7F 
2bca0 268 66 46 16 1E 
2bca4 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
2bca8 26a 7F 00 00 00 
2bcac 26b 0C 06 00 0F 
2bcb0 26c 06 06 06 06 
2bcb4 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2bcb8 26e 7F 00 00 00 
2bcbc 26f 30 18 00 1C 
2bcc0 270 18 18 18 18 
2bcc4 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
2bcc8 272 3C 00 00 00 
2bccc 273 00 00 08 1C 
2bcd0 274 36 00 3E 63 
2bcd4 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
2bcd8 276 3E 00 00 00 
2bcdc 277 00 00 00 00 
2bce0 278 63 00 3E 63 
2bce4 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
2bce8 27a 3E 00 00 00 
2bcec 27b 00 00 00 6F 
2bcf0 27c 46 26 06 06 
2bcf4 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
2bcf8 27e 7F 00 00 00 
2bcfc 27f 00 00 00 6E 
2bd00 280 4C 2C 0C 0C 
2bd04 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
2bd08 282 1E 00 00 00 
2bd0c 283 30 18 00 3E 
2bd10 284 63 63 06 1C 
2bd14 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2bd18 286 3E 00 00 00 
2bd1c 287 00 00 60 30 
2bd20 288 18 00 3E 63 
2bd24 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
2bd28 28a 3E 00 00 00 
2bd2c 28b 00 63 00 3E 
2bd30 28c 63 63 63 63 
2bd34 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2bd38 28e 3E 00 00 00 
2bd3c 28f 00 63 00 63 
2bd40 290 63 63 63 63 
2bd44 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2bd48 292 3E 00 00 00 
2bd4c 293 6C 38 00 7E 
2bd50 294 7E 5A 18 18 
2bd54 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2bd58 296 3C 00 00 00 
2bd5c 297 00 00 60 48 
2bd60 298 2C 0C 3F 0C 
2bd64 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2bd68 29a 38 00 00 00 
2bd6c 29b 00 00 00 0F 
2bd70 29c 26 36 1E 0E 
2bd74 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
2bd78 29e 7F 00 00 00 
2bd7c 29f 00 00 00 00 
2bd80 2a0 00 63 36 1C 
2bd84 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
2bd88 2a2 00 00 00 00 
2bd8c 2a3 00 00       | 	byte	$00[6]
2bd8e 2a3 36 1C 08 00 
2bd92 2a4 3E 63 03 03 
2bd96 2a5 03 63 3E 00 
2bd9a 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
2bd9e 2a7 30 18 0C 00 
2bda2 2a8 1E 30 3E 33 
2bda6 2a9 33 33 6E 00 
2bdaa 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2bdae 2ab 60 30 18 00 
2bdb2 2ac 1C 18 18 18 
2bdb6 2ad 18 18 3C 00 
2bdba 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
2bdbe 2af 60 30 18 00 
2bdc2 2b0 3E 63 63 63 
2bdc6 2b1 63 63 3E 00 
2bdca 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
2bdce 2b3 30 18 0C 00 
2bdd2 2b4 33 33 33 33 
2bdd6 2b5 33 33 6E 00 
2bdda 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2bdde 2b7 00 08 1C 36 
2bde2 2b8 63 63 7F 63 
2bde6 2b9 63 63 63 18 
2bdea 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
2bdee 2bb 00 00 00 00 
2bdf2 2bc 1E 30 3E 33 
2bdf6 2bd 33 33 6E 18 
2bdfa 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
2bdfe 2bf 00 7F 63 61 
2be02 2c0 30 18 0C 06 
2be06 2c1 43 63 7F 00 
2be0a 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
2be0e 2c3 36 1C 08 00 
2be12 2c4 7F 33 18 0C 
2be16 2c5 06 63 7F 00 
2be1a 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
2be1e 2c7 00 7F 66 46 
2be22 2c8 16 1E 16 06 
2be26 2c9 46 66 7F 18 
2be2a 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
2be2e 2cb 00 00 00 00 
2be32 2cc 3E 63 7F 03 
2be36 2cd 03 63 3E 18 
2be3a 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
2be3e 2cf 00 3C 66 03 
2be42 2d0 1F 03 0F 03 
2be46 2d1 03 66 3C 00 
2be4a 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
2be4e 2d3 60 30 18 00 
2be52 2d4 7F 33 18 0C 
2be56 2d5 06 63 7F 00 
2be5a 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
2be5e 2d7 00 3C 66 43 
2be62 2d8 03 03 03 03 
2be66 2d9 43 66 3C 00 
2be6a 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
2be6e 2db 00 00 00 00 
2be72 2dc 3E 63 06 1C 
2be76 2dd 30 63 3E 18 
2be7a 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
2be7e 2df 00 00 00 00 
2be82 2e0 00 00       | 	byte	$00[6]
2be84 2e1 6C 36 1B 36 
2be88 2e2 6C 00 00 00 
2be8c 2e3 00 00 00 00 
2be90 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2be94 2e5 1B 36 6C 36 
2be98 2e6 1B 00 00 00 
2be9c 2e7 88 22 88 22 
2bea0 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
2bea4 2e9 88 22 88 22 
2bea8 2ea 88 22 88 22 
2beac 2eb AA 55 AA 55 
2beb0 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
2beb4 2ed AA 55 AA 55 
2beb8 2ee AA 55 AA 55 
2bebc 2ef BB EE BB EE 
2bec0 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
2bec4 2f1 BB EE BB EE 
2bec8 2f2 BB EE BB EE 
2becc 2f3 18 18 18 18 
2bed0 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
2bed4 2f5 18 18 18 18 
2bed8 2f6 18 18 18 18 
2bedc 2f7 18 18 18 18 
2bee0 2f8 18 18 18    | 	byte	$18[15]
2bee3 2f8 1F 18 18 18 
2bee7 2f9 18 18 18 18 
2beeb 2fa 18 30 18 00 
2beef 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
2bef3 2fc 63 7F 63 63 
2bef7 2fd 63 63 00 00 
2befb 2fe 00 1C 36 00 
2beff 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
2bf03 300 63 7F 63 63 
2bf07 301 63 63 00 00 
2bf0b 302 00 36 1C 00 
2bf0f 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
2bf13 304 1E 16 06 46 
2bf17 305 66 7F 00 00 
2bf1b 306 00 00 00 00 
2bf1f 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
2bf23 308 1C 30 60 63 
2bf27 309 63 3E 18 30 
2bf2b 30a 1E 6C 6C 6C 
2bf2f 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
2bf33 30c 6F 6C 6C 6C 
2bf37 30d 6C 6C 6C 6C 
2bf3b 30e 6C 6C 6C 6C 
2bf3f 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2bf43 310 6C 6C 6C 6C 
2bf47 311 6C 6C 6C 6C 
2bf4b 312 6C          | 	byte	$6c[9]
2bf4c 313 00 00 00 00 
2bf50 314 00          | 	byte	$00[5]
2bf51 314 7F 60 6F 6C 
2bf55 315 6C 6C 6C 6C 
2bf59 316 6C 6C 6C 6C 
2bf5d 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2bf61 318 6F 60 7F 00 
2bf65 319 00 00 00 00 
2bf69 31a 00 00 00 18 
2bf6d 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
2bf71 31c 61 30 18 0C 
2bf75 31d 06 43 63 7F 
2bf79 31e 00 00 00 00 
2bf7d 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
2bf81 320 00 7F 33 18 
2bf85 321 0C 06 63 7F 
2bf89 322 00 00 00 00 
2bf8d 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
2bf91 324 00 00 1F 18 
2bf95 325 18 18 18 18 
2bf99 326 18 18 18 18 
2bf9d 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2bfa1 328 18 18 F8 00 
2bfa5 329 00 00 00 00 
2bfa9 32a 00 00 00 18 
2bfad 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2bfb1 32c 18 18 FF 00 
2bfb5 32d 00 00 00 00 
2bfb9 32e 00 00 00 00 
2bfbd 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bfc1 330 00 00 FF 18 
2bfc5 331 18 18 18 18 
2bfc9 332 18 18 18 18 
2bfcd 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2bfd1 334 18 18 F8 18 
2bfd5 335 18 18 18 18 
2bfd9 336 18 18 18 00 
2bfdd 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2bfe1 338 00 00 FF 00 
2bfe5 339 00 00 00 00 
2bfe9 33a 00 00 00 18 
2bfed 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2bff1 33c 18 18 FF 18 
2bff5 33d 18 18 18 18 
2bff9 33e 18 18 18 63 
2bffd 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
2c001 340 36 63 63 7F 
2c005 341 63 63 63 63 
2c009 342 00 00 00 00 
2c00d 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
2c011 344 00 1E 30 3E 
2c015 345 33 33 33 6E 
2c019 346 00 00 00 6C 
2c01d 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2c021 348 EC 0C FC 00 
2c025 349 00 00 00 00 
2c029 34a 00 00 00 00 
2c02d 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c031 34c FC 0C EC 6C 
2c035 34d 6C 6C 6C 6C 
2c039 34e 6C 6C 6C 6C 
2c03d 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2c041 350 EF 00 FF 00 
2c045 351 00 00 00 00 
2c049 352 00 00 00 00 
2c04d 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c051 354 FF 00 EF 6C 
2c055 355 6C 6C 6C 6C 
2c059 356 6C 6C 6C 6C 
2c05d 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2c061 358 EC 0C EC 6C 
2c065 359 6C 6C 6C 6C 
2c069 35a 6C 6C 6C 00 
2c06d 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2c071 35c FF 00 FF 00 
2c075 35d 00 00 00 00 
2c079 35e 00 00 00 6C 
2c07d 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2c081 360 EF 00 EF 6C 
2c085 361 6C 6C 6C 6C 
2c089 362 6C 6C 6C 00 
2c08d 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2c091 364 63 3E 63 63 
2c095 365 63 63 3E 63 
2c099 366 00 00 00 00 
2c09d 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
2c0a1 368 30 3C 36 33 
2c0a5 369 33 33 33 6E 
2c0a9 36a 00 00 00 00 
2c0ad 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
2c0b1 36c 66 66 6F 66 
2c0b5 36d 66 66 36 1F 
2c0b9 36e 00 00 00 36 
2c0bd 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
2c0c1 370 66 66 66 66 
2c0c5 371 66 66       | 	byte	$66[6]
2c0c7 371 36 1F 00 00 
2c0cb 372 00 00 63 00 
2c0cf 373 7F 66 46 16 
2c0d3 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
2c0d7 375 66 7F 00 00 
2c0db 376 00 6C 38 00 
2c0df 377 38 30 30 3C 
2c0e3 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
2c0e7 379 33 6E 00 00 
2c0eb 37a 00 36 1C 00 
2c0ef 37b 63 67 6F 7F 
2c0f3 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
2c0f7 37d 63 63 00 00 
2c0fb 37e 00 30 18 00 
2c0ff 37f 3C 18 18 18 
2c103 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2c107 381 18 3C 00 00 
2c10b 382 00 3C 66 00 
2c10f 383 3C 18 18 18 
2c113 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2c117 385 18 3C 00 00 
2c11b 386 00 00 00 36 
2c11f 387 1C 08 00 3E 
2c123 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
2c127 389 63 3E 00 00 
2c12b 38a 00 18 18 18 
2c12f 38b 18 18 18 18 
2c133 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
2c137 38d 00 00 00 00 
2c13b 38e 00 00 00 00 
2c13f 38f 00 00 00 00 | 	byte	$00[12]
2c143 390 F8 18 18 18 
2c147 391 18 18 18 18 
2c14b 392 18 FF FF FF 
2c14f 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
2c153 394 FF FF FF FF 
2c157 395 FF FF FF FF 
2c15b 396 FF          | 	byte	$ff[9]
2c15c 397 00 00 00 00 
2c160 398 00 00 00    | 	byte	$00[7]
2c163 398 FF FF FF FF 
2c167 399 FF FF FF FF 
2c16b 39a FF          | 	byte	$ff[9]
2c16c 39b 00 00 00 7E 
2c170 39c 7E 5A 18 18 
2c174 39d 18 18 18 18 
2c178 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
2c17c 39f 1C 36 1C 63 
2c180 3a0 63 63 63 63 
2c184 3a1 63 63 63 63 
2c188 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2c18c 3a3 FF FF FF FF 
2c190 3a4 FF FF FF    | 	byte	$ff[7]
2c193 3a4 00 00 00 00 
2c197 3a5 00 00 00 00 
2c19b 3a6 00          | 	byte	$00[9]
2c19c 3a7 30 18 00 3E 
2c1a0 3a8 63 63 63 63 
2c1a4 3a9 63 63 63 63 
2c1a8 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2c1ac 3ab 00 00 00 1E 
2c1b0 3ac 33 33 33 1B 
2c1b4 3ad 33 63 63 63 
2c1b8 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
2c1bc 3af 1C 36 00 3E 
2c1c0 3b0 63 63 63 63 
2c1c4 3b1 63 63 63 63 
2c1c8 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2c1cc 3b3 30 18 00 63 
2c1d0 3b4 67 6F 7F 7B 
2c1d4 3b5 73 63 63 63 
2c1d8 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
2c1dc 3b7 00 00 60 30 
2c1e0 3b8 18 00 3B 66 
2c1e4 3b9 66 66 66 66 
2c1e8 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2c1ec 3bb 00 00 36 1C 
2c1f0 3bc 08 00 3B 66 
2c1f4 3bd 66 66 66 66 
2c1f8 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2c1fc 3bf 36 1C 00 3E 
2c200 3c0 63 63 06 1C 
2c204 3c1 30 60 63 63 
2c208 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
2c20c 3c3 00 00 36 1C 
2c210 3c4 08 00 3E 63 
2c214 3c5 06 1C 30 63 
2c218 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
2c21c 3c7 30 18 00 3F 
2c220 3c8 66 66 66 3E 
2c224 3c9 36 66 66 66 
2c228 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
2c22c 3cb 30 18 00 63 
2c230 3cc 63 63 63 63 
2c234 3cd 63 63 63 63 
2c238 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2c23c 3cf 00 00 60 30 
2c240 3d0 18 00 3B 6E 
2c244 3d1 66 06 06 06 
2c248 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
2c24c 3d3 66 33 00 63 
2c250 3d4 63 63 63 63 
2c254 3d5 63 63 63 63 
2c258 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2c25c 3d7 00 00 60 30 
2c260 3d8 18 00 63 63 
2c264 3d9 63 63 63 63 
2c268 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
2c26c 3db 30 18 00 66 
2c270 3dc 66 66 66 3C 
2c274 3dd 18 18 18 18 
2c278 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
2c27c 3df 00 00 00 08 
2c280 3e0 0C 0C 3F 0C 
2c284 3e1 0C 0C 0C 6C 
2c288 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
2c28c 3e3 30 18 00 00 
2c290 3e4 00 00 00 00 
2c294 3e5 00 00 00 00 
2c298 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c29c 3e7 00 00 00 00 
2c2a0 3e8 00 00 00 00 | 	byte	$00[8]
2c2a4 3e9 7F 00 00 00 
2c2a8 3ea 00 00 00 00 
2c2ac 3eb 66 33 00 00 
2c2b0 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
2c2b4 3ed 00 00 00 00 
2c2b8 3ee 00 00 00 00 
2c2bc 3ef 00 00 00 00 
2c2c0 3f0 00 00 00 00 
2c2c4 3f1 00 00 00 00 
2c2c8 3f2 00          | 	byte	$00[21]
2c2c9 3f2 0C 06 3C 36 
2c2cd 3f3 1C 00 00 00 
2c2d1 3f4 00 00 00 00 
2c2d5 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c2d9 3f6 00 00 00 63 
2c2dd 3f7 3E 00 00 00 
2c2e1 3f8 00 00 00 00 
2c2e5 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c2e9 3fa 00 00 00 00 
2c2ed 3fb 3E 63 06 1C 
2c2f1 3fc 36 63 63 36 
2c2f5 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
2c2f9 3fe 00 00 00 00 
2c2fd 3ff 00 00 00 00 | 	byte	$00[8]
2c301 400 18 00 7E 00 
2c305 401 18 00 00 00 
2c309 402 00 00 00 00 
2c30d 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c311 404 00 00 00 00 
2c315 405 00 00 00 00 | 	byte	$00[8]
2c319 406 18 30 1E 00 
2c31d 407 00 00 1C 36 
2c321 408 36 1C 00 00 
2c325 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
2c329 40a 00 00 00 00 
2c32d 40b 63 00 00 00 
2c331 40c 00 00 00 00 
2c335 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c339 40e 00 00 00 18 
2c33d 40f 18 00 00 00 
2c341 410 00 00 00 00 
2c345 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c349 412 00 00 00 00 
2c34d 413 00          | 	byte	$00[5]
2c34e 413 CC 66 33 00 
2c352 414 33 33 33 33 
2c356 415 33 33 6E 00 
2c35a 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
2c35e 417 00 3F 66 66 
2c362 418 66 3E 36 66 
2c366 419 66 66 6F 00 
2c36a 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
2c36e 41b 36 1C 08 00 
2c372 41c 3B 6E 66 06 
2c376 41d 06 06 0F 00 
2c37a 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
2c37e 41f 00 00 00 7E 
2c382 420 7E 7E 7E 7E 
2c386 421 7E 7E 00 00 
2c38a 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
2c38e 423 00 00 00 00 
2c392 424 00 00 00 00 
2c396 425 00 00 00 00 
2c39a 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c39c 427             | 'vga_font       file "vgafont.def"
2c39c 427 00 00 00 00 
      ...             
2c3cc 433 00 00 00 00 
2c3d0 434 00 00 00    | st_font        file "st4font.def"
2c3d3 434 FF FF 00 00 
2c3d7 435 00 00 00 00 
2c3db 436 00 18 18 18 
2c3df 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2c3e3 438 18 18 18 18 
2c3e7 439 18 18 18 18 
2c3eb 43a 18          | 	byte	$18[9]
2c3ec 43b 00 00 00 00 
2c3f0 43c 00 00 00    | 	byte	$00[7]
2c3f3 43c FF FF 18 18 
2c3f7 43d 18 18 18 18 
2c3fb 43e 18 18 18 18 
2c3ff 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c403 440 FF FF 00 00 
2c407 441 00 00 00 00 
2c40b 442 00 18 18 18 
2c40f 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2c413 444 1F 1F 18 18 
2c417 445 18 18 18 18 
2c41b 446 18 18 18 18 
2c41f 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c423 448 F8 F8 18 18 
2c427 449 18 18 18 18 
2c42b 44a 18 00 00 00 
2c42f 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c433 44c 1F 1F 18 18 
2c437 44d 18 18 18 18 
2c43b 44e 18 00 00 00 
2c43f 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c443 450 F8 F8 18 18 
2c447 451 18 18 18 18 
2c44b 452 18 18 18 18 
2c44f 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c453 454 1F 1F 00 00 
2c457 455 00 00 00 00 
2c45b 456 00 18 18 18 
2c45f 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2c463 458 F8 F8 00 00 
2c467 459 00 00 00 00 
2c46b 45a 00 18 18 18 
2c46f 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2c473 45c FF FF 18 18 
2c477 45d 18 18 18 18 
2c47b 45e 18 00 00 18 
2c47f 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
2c483 460 66 7E 7E 66 
2c487 461 66 66 66 30 
2c48b 462 18 00 00 7E 
2c48f 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
2c493 464 3E 06 06 06 
2c497 465 06 7E 7E 18 
2c49b 466 0C 30 18 3C 
2c49f 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
2c4a3 468 06 06 06 66 
2c4a7 469 66 7E 3C 00 
2c4ab 46a 00 30 18 66 
2c4af 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
2c4b3 46c 7E 7E 76 76 
2c4b7 46d 66 66 66 00 
2c4bb 46e 00 30 18 7C 
2c4bf 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
2c4c3 470 1C 38 70 60 
2c4c7 471 60 7E 3E 00 
2c4cb 472 00 30 18 7E 
2c4cf 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
2c4d3 474 18 0C 0C 06 
2c4d7 475 06 7E 7E 00 
2c4db 476 00 18 18 00 
2c4df 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
2c4e3 478 18 18 0C 0C 
2c4e7 479 06 7E 7E 00 
2c4eb 47a 00 30 18 3C 
2c4ef 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
2c4f3 47c 66 66 66 66 
2c4f7 47d 66          | 	byte	$66[5]
2c4f8 47e 7E 3C 00 00 
2c4fc 47f 00 00 06 06 
2c500 480 06 06 16 1E 
2c504 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
2c508 482 7E 7E 00 00 
2c50c 483 00 00 00 00 
2c510 484 00 3C 7C 60 
2c514 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
2c518 486 7E 7C 30 18 
2c51c 487 00 00 00 00 
2c520 488 00 3C 7E 66 
2c524 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
2c528 48a 7E 7C 18 0C 
2c52c 48b 00 00 30 18 
2c530 48c 00 3C 3E 06 
2c534 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
2c538 48e 7E 7C 00 00 
2c53c 48f 00 00 30 18 
2c540 490 00 3E 7E 66 
2c544 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
2c548 492 66 66 00 00 
2c54c 493 00 00 30 18 
2c550 494 00 7C 7E 06 
2c554 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
2c558 496 7E 3E 00 00 
2c55c 497 00 00 30 18 
2c560 498 00 7E 7E 30 
2c564 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c568 49a 7E 7E 00 00 
2c56c 49b 00 00 18 18 
2c570 49c 00 7E 7E 30 
2c574 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c578 49e 7E 7E 00 00 
2c57c 49f 00 00 30 18 
2c580 4a0 00 3C 7E 66 
2c584 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
2c588 4a2 7E 3C 00 00 
2c58c 4a3 00 00 1C 1C 
2c590 4a4 18 18 38 3C 
2c594 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
2c598 4a6 3C 3C 00 00 
2c59c 4a7 00 00 00 00 
2c5a0 4a8 00 00 00 00 
2c5a4 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c5a8 4aa 00 00 00 00 
2c5ac 4ab 00 00       | 	byte	$00[6]
2c5ae 4ab 18 18 18 18 
2c5b2 4ac 18 18 18 18 | 	byte	$18[8]
2c5b6 4ad 00 00 18 18 
2c5ba 4ae 00 00 00 00 
2c5be 4af 66 66 66 66 
2c5c2 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
2c5c6 4b1 00 00 00 00 
2c5ca 4b2 00 00 00 00 
2c5ce 4b3 00          | 	byte	$00[9]
2c5cf 4b3 66 66 FF FF 
2c5d3 4b4 66 66 FF FF 
2c5d7 4b5 66 66 00 00 
2c5db 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
2c5df 4b7 7C 7E 06 06 
2c5e3 4b8 3E 7C 60 60 
2c5e7 4b9 7E 3E 18 18 
2c5eb 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
2c5ef 4bb 66 30 30 18 
2c5f3 4bc 18 0C 0C 66 
2c5f7 4bd 66 00 00 00 
2c5fb 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
2c5ff 4bf 66 66 3C 1C 
2c603 4c0 1C FC FE 66 
2c607 4c1 66 FE FC 00 
2c60b 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
2c60f 4c3 18 18 18 18 
2c613 4c4 00 00 00 00 
2c617 4c5 00 00 00 00 
2c61b 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
2c61f 4c7 18 1C 0C 0C 
2c623 4c8 0C 0C 0C 0C 
2c627 4c9 1C 18 30 00 
2c62b 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
2c62f 4cb 18 38 30 30 
2c633 4cc 30 30 30 30 
2c637 4cd 38 18 0C 00 
2c63b 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
2c63f 4cf 66 66 3C 3C 
2c643 4d0 FF FF 3C 3C 
2c647 4d1 66 66 00 00 
2c64b 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
2c64f 4d3 00 18 18 18 
2c653 4d4 7E 7E 18 18 
2c657 4d5 18 00 00 00 
2c65b 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c65f 4d7 00 00 00 00 
2c663 4d8 00 00       | 	byte	$00[6]
2c665 4d9 18 18 18 18 
2c669 4da 18          | 	byte	$18[5]
2c66a 4da 0C 04 00 00 
2c66e 4db 00 00 00 00 
2c672 4dc 7E 7E 00 00 
2c676 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
2c67a 4de 00 00 00 00 
2c67e 4df 00 00 00 00 
2c682 4e0 00 00 00 00 
2c686 4e1 00          | 	byte	$00[13]
2c687 4e1 18 18 18 00 
2c68b 4e2 00 00 00 60 
2c68f 4e3 60 60 30 30 
2c693 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
2c697 4e5 06 06 06 00 
2c69b 4e6 00 00 00 3C 
2c69f 4e7 7E 66 66 66 
2c6a3 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
2c6a7 4e9 66 7E 3C 00 
2c6ab 4ea 00 00 00 18 
2c6af 4eb 18 1C 1C 18 
2c6b3 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
2c6b7 4ed 18 7E 7E 00 
2c6bb 4ee 00 00 00 3C 
2c6bf 4ef 7E 66 66 30 
2c6c3 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
2c6c7 4f1 0C 7E 7E 00 
2c6cb 4f2 00 00 00 7E 
2c6cf 4f3 7E 30 30 18 
2c6d3 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
2c6d7 4f5 66 7E 3C 00 
2c6db 4f6 00 00 00 30 
2c6df 4f7 30 38 38 3C 
2c6e3 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
2c6e7 4f9 7E 30 30 00 
2c6eb 4fa 00 00 00 7E 
2c6ef 4fb 7E 06 06 3E 
2c6f3 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
2c6f7 4fd 66 7E 3C 00 
2c6fb 4fe 00 00 00 38 
2c6ff 4ff 3C 0E 06 06 
2c703 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
2c707 501 66 7E 3C 00 
2c70b 502 00 00 00 7E 
2c70f 503 7E 60 60 30 
2c713 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
2c717 505 0C 0C 0C 00 
2c71b 506 00 00 00 3C 
2c71f 507 7E 66 66 3C 
2c723 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
2c727 509 66 7E 3C 00 
2c72b 50a 00 00 00 3C 
2c72f 50b 7E 66 66 7E 
2c733 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
2c737 50d 70 3C 1C 00 
2c73b 50e 00 00 00 00 
2c73f 50f 00 00 18 18 
2c743 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
2c747 511 18 18 18 00 
2c74b 512 00 00 00 00 
2c74f 513 00 00 18 18 
2c753 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
2c757 515 18 18 18 0C 
2c75b 516 04 00 00 00 
2c75f 517 70 38 1C 0E 
2c763 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
2c767 519 70 00 00 00 
2c76b 51a 00 00 00 00 
2c76f 51b 00 00 7E 7E 
2c773 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
2c777 51d 00 00 00 00 
2c77b 51e 00 00 00 00 | 	byte	$00[8]
2c77f 51f 0E 1C 38 70 
2c783 520 E0 70 38 1C 
2c787 521 0E 00 00 00 
2c78b 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
2c78f 523 7E 66 66 30 
2c793 524 30 18 18 18 
2c797 525 00 18 18 00 
2c79b 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
2c79f 527 7E 66 66 66 
2c7a3 528 66 36 06 66 
2c7a7 529 66 7E 3C 00 
2c7ab 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
2c7af 52b 3C 7E 66 66 
2c7b3 52c 66 7E 7E 66 
2c7b7 52d 66 66 66 00 
2c7bb 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
2c7bf 52f 7E 66 66 7E 
2c7c3 530 3E 66 66 66 
2c7c7 531 66 7E 3E 00 
2c7cb 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
2c7cf 533 7E 66 66 06 
2c7d3 534 06 06 06 66 
2c7d7 535 66 7E 3C 00 
2c7db 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
2c7df 537 7E 66 66 66 
2c7e3 538 66 66 66 66 
2c7e7 539 66 7E 3E 00 
2c7eb 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
2c7ef 53b 7E 06 06 3E 
2c7f3 53c 3E 06 06 06 
2c7f7 53d 06 7E 7E 00 
2c7fb 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
2c7ff 53f 7E 06 06 3E 
2c803 540 3E 06 06 06 
2c807 541 06 06 06 00 
2c80b 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
2c80f 543 7E 06 06 76 
2c813 544 76 66 66 66 
2c817 545 66 7E 3C 00 
2c81b 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
2c81f 547 66 66 66 7E 
2c823 548 7E 66 66 66 
2c827 549 66 66 66 00 
2c82b 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
2c82f 54b 7E 18 18 18 
2c833 54c 18 18 18 18 
2c837 54d 18 7E 7E 00 
2c83b 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
2c83f 54f 60 60 60 60 
2c843 550 60 60 60    | 	byte	$60[7]
2c846 551 66 66 7E 3C 
2c84a 552 00 00 00 00 
2c84e 553 66 66 36 36 
2c852 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
2c856 555 66 66 C6 C6 
2c85a 556 00 00 00 00 
2c85e 557 06 06 06 06 
2c862 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
2c866 559 06 06 7E 7E 
2c86a 55a 00 00 00 00 
2c86e 55b C6 C6 EE EE 
2c872 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
2c876 55d C6 C6 C6 C6 
2c87a 55e 00 00 00 00 
2c87e 55f 66 66 66 6E 
2c882 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
2c886 561 76 66 66 66 
2c88a 562 00 00 00 00 
2c88e 563 3C 7E 66 66 
2c892 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2c896 565 66 66 7E 3C 
2c89a 566 00 00 00 00 
2c89e 567 3E 7E 66 66 
2c8a2 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
2c8a6 569 06 06 06 06 
2c8aa 56a 00 00 00 00 
2c8ae 56b 3C 7E 66 66 
2c8b2 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2c8b6 56d 66 56 3E 6C 
2c8ba 56e 00 00 00 00 
2c8be 56f 3E 7E 66 66 
2c8c2 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
2c8c6 571 66 66 C6 C6 
2c8ca 572 00 00 00 00 
2c8ce 573 7C 7E 06 06 
2c8d2 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
2c8d6 575 60 60 7E 3E 
2c8da 576 00 00 00 00 
2c8de 577 7E 7E 18 18 
2c8e2 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
2c8e6 579 18 18 18 18 
2c8ea 57a 00 00 00 00 
2c8ee 57b 66 66 66 66 
2c8f2 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2c8f6 57d 66 66 7E 3C 
2c8fa 57e 00 00 00 00 
2c8fe 57f 66 66 66 66 
2c902 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2c906 581 3C 3C 18 18 
2c90a 582 00 00 00 00 
2c90e 583 C6 C6 C6 C6 
2c912 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
2c916 585 FE EE C6 82 
2c91a 586 00 00 00 00 
2c91e 587 66 66 66 3C 
2c922 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
2c926 589 3C 66 66 66 
2c92a 58a 00 00 00 00 
2c92e 58b 66 66 66 66 
2c932 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
2c936 58d 18 18 18 18 
2c93a 58e 00 00 00 00 
2c93e 58f 7E 7E 30 30 
2c942 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
2c946 591 06 06 7E 7E 
2c94a 592 00 00 00 00 
2c94e 593 3C 3C 0C 0C 
2c952 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
2c956 595 0C 0C 3C 3C 
2c95a 596 00 00 00 00 
2c95e 597 06 06 0C 0C 
2c962 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
2c966 599 60 60 C0 C0 
2c96a 59a 00 00 00 00 
2c96e 59b 3C 3C 30 30 
2c972 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
2c976 59d 30 30 3C 3C 
2c97a 59e 00 00 00 00 
2c97e 59f 18 18 3C 3C 
2c982 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
2c986 5a1 00 00 00 00 
2c98a 5a2 00 00 00 00 
2c98e 5a3 00 00 00 00 
2c992 5a4 00 00 00 00 
2c996 5a5 00 00       | 	byte	$00[18]
2c998 5a6 FE FE 00 00 
2c99c 5a7 00 00 0C 0C 
2c9a0 5a8 18 18 00 00 
2c9a4 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
2c9a8 5aa 00 00 00 00 
2c9ac 5ab 00 00 00 00 
2c9b0 5ac 00          | 	byte	$00[9]
2c9b1 5ac 3C 7C 60 7C 
2c9b5 5ad 7E 66 66 7E 
2c9b9 5ae 7C 00 00 00 
2c9bd 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
2c9c1 5b0 3E 7E 66 66 
2c9c5 5b1 66 66 66 7E 
2c9c9 5b2 3E 00 00 00 
2c9cd 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
2c9d1 5b4 3C 3E 06 06 
2c9d5 5b5 06 06 06 7E 
2c9d9 5b6 7C 00 00 00 
2c9dd 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
2c9e1 5b8 7C 7E 66 66 
2c9e5 5b9 66 66 66 7E 
2c9e9 5ba 7C 00 00 00 
2c9ed 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
2c9f1 5bc 3C 7E 66 66 
2c9f5 5bd 7E 06 06 7E 
2c9f9 5be 7C 00 00 00 
2c9fd 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
2ca01 5c0 18 7E 7E 18 
2ca05 5c1 18 18 18 18 
2ca09 5c2 18 00 00 00 
2ca0d 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2ca11 5c4 7C 7E 66 66 
2ca15 5c5 66 66 7E 7C 
2ca19 5c6 60 7E 3E 00 
2ca1d 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
2ca21 5c8 3E 7E 66 66 
2ca25 5c9 66 66 66 66 
2ca29 5ca 66 00 00 00 
2ca2d 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
2ca31 5cc 1C 1C 18 18 
2ca35 5cd 18 18 18 3C 
2ca39 5ce 3C 00 00 00 
2ca3d 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
2ca41 5d0 30 30 30 30 
2ca45 5d1 30 30 30 30 
2ca49 5d2 30          | 	byte	$30[9]
2ca4a 5d2 3E 1E 00 00 
2ca4e 5d3 06 06 06 36 
2ca52 5d4 36 1E 1E 1E 
2ca56 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
2ca5a 5d6 00 00 00 00 
2ca5e 5d7 1C 1C 18 18 
2ca62 5d8 18 18 18 18 
2ca66 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
2ca6a 5da 00 00 00 00 
2ca6e 5db 00 00 00    | 	byte	$00[7]
2ca71 5dc 6C FE FE D6 
2ca75 5dd D6 C6 C6 C6 
2ca79 5de C6 00 00 00 
2ca7d 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
2ca81 5e0 3E 7E 66 66 
2ca85 5e1 66 66 66 66 
2ca89 5e2 66 00 00 00 
2ca8d 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
2ca91 5e4 3C 7E 66 66 
2ca95 5e5 66 66 66 7E 
2ca99 5e6 3C 00 00 00 
2ca9d 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
2caa1 5e8 3E 7E 66 66 
2caa5 5e9 66 66 66 7E 
2caa9 5ea 3E 06 06 00 
2caad 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
2cab1 5ec 7C 7E 66 66 
2cab5 5ed 66 66 66 7E 
2cab9 5ee 7C 60 60 00 
2cabd 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
2cac1 5f0 3E 7E 66 06 
2cac5 5f1 06 06 06 06 
2cac9 5f2 06 00 00 00 
2cacd 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
2cad1 5f4 7C 7E 06 0E 
2cad5 5f5 3C 70 60 7E 
2cad9 5f6 3E 00 00 00 
2cadd 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
2cae1 5f8 7E 7E 18 18 
2cae5 5f9 18 18 18 78 
2cae9 5fa 70 00 00 00 
2caed 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
2caf1 5fc 66 66 66 66 
2caf5 5fd 66 66 66    | 	byte	$66[7]
2caf8 5fe 7E 7C 00 00 
2cafc 5ff 00 00 00 00 
2cb00 600 00 66 66 66 
2cb04 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
2cb08 602 18 18 00 00 
2cb0c 603 00 00 00 00 
2cb10 604 00 C6 C6 D6 
2cb14 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
2cb18 606 C6 82 00 00 
2cb1c 607 00 00 00 00 
2cb20 608 00 66 66 3C 
2cb24 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
2cb28 60a 66 66 00 00 
2cb2c 60b 00 00 00 00 
2cb30 60c 00 66 66 66 
2cb34 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
2cb38 60e 7C 60 7E 3E 
2cb3c 60f 00 00 00 00 
2cb40 610 00 7E 7E 30 
2cb44 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2cb48 612 7E 7E 00 00 
2cb4c 613 00 00 30 18 
2cb50 614 18 18 18 0C 
2cb54 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
2cb58 616 18 30 00 00 
2cb5c 617 00 00 18 18 
2cb60 618 18 18 18 18 
2cb64 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2cb68 61a 18 18 00 00 
2cb6c 61b 00 00 0C 18 
2cb70 61c 18 18 18 30 
2cb74 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
2cb78 61e 18 0C 00 00 
2cb7c 61f 00 00 6C 7E 
2cb80 620 36 00 00 00 
2cb84 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
2cb88 622 00 00 00 00 
2cb8c 623 00 00 00 00 
2cb90 624 00          | 	byte	$00[9]
2cb91 624 18 18 18 18 
2cb95 625 18 18 00 00 
2cb99 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2cb9c 627             | 'amiga_font     file "amigafont.def"
2cb9c 627 00 6C FE FE 
2cba0 628 7C 38 10 00 
2cba4 629 18 18 18 F8 
2cba8 62a F8 18 18 18 | a8_font        file "atari8.fnt"
2cbac 62b C0 C0 C0 C0 
2cbb0 62c C0 C0 C0 C0 | 	byte	$c0[8]
2cbb4 62d 18 18 18 1F 
2cbb8 62e 1F 00 00 00 
2cbbc 62f 18 18 18 1F 
2cbc0 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
2cbc4 631 00 00 00 1F 
2cbc8 632 1F 18 18 18 
2cbcc 633 C0 E0 70 38 
2cbd0 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
2cbd4 635 03 07 0E 1C 
2cbd8 636 38 70 E0 C0 
2cbdc 637 80 C0 E0 F0 
2cbe0 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
2cbe4 639 00 00 00 00 
2cbe8 63a F0 F0 F0 F0 
2cbec 63b 01 03 07 0F 
2cbf0 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
2cbf4 63d F0 F0 F0 F0 
2cbf8 63e 00 00 00 00 
2cbfc 63f 0F 0F 0F 0F 
2cc00 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
2cc04 641 FF FF 00 00 
2cc08 642 00 00 00 00 
2cc0c 643 00 00 00 00 
2cc10 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
2cc14 645 00 00 00 00 
2cc18 646 0F 0F 0F 0F 
2cc1c 647 00 38 38 EE 
2cc20 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
2cc24 649 00 00 00 F8 
2cc28 64a F8 18 18 18 
2cc2c 64b 00 00 00 FF 
2cc30 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
2cc34 64d 18 18 18 FF 
2cc38 64e FF 18 18 18 
2cc3c 64f 00 00 3C 7E 
2cc40 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
2cc44 651 00 00 00 00 
2cc48 652 FF FF FF FF 
2cc4c 653 03 03 03 03 
2cc50 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
2cc54 655 00 00 00 FF 
2cc58 656 FF 18 18 18 
2cc5c 657 18 18 18 FF 
2cc60 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
2cc64 659 0F 0F 0F 0F 
2cc68 65a 0F 0F 0F 0F | 	byte	$0f[8]
2cc6c 65b 18 18 18 F8 
2cc70 65c F8 00 00 00 
2cc74 65d 1E 06 1E 06 
2cc78 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
2cc7c 65f 00 18 3C 7E 
2cc80 660 18 18 18 00 
2cc84 661 00 18 18 18 
2cc88 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
2cc8c 663 00 18 0C 7E 
2cc90 664 0C 18 00 00 
2cc94 665 00 18 30 7E 
2cc98 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
2cc9c 667 00 00 00 00 
2cca0 668 00 00 00 00 
2cca4 669 00          | 	byte	$00[9]
2cca5 669 18 18 18 18 
2cca9 66a 00 18 00 00 
2ccad 66b 66 66 66 00 
2ccb1 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
2ccb5 66d 66 FF 66 66 
2ccb9 66e FF 66 00 18 
2ccbd 66f 7C 06 3C 60 
2ccc1 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
2ccc5 671 66 36 18 0C 
2ccc9 672 66 62 00 38 
2cccd 673 6C 38 1C F6 
2ccd1 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
2ccd5 675 18 18 18 00 
2ccd9 676 00 00 00 00 
2ccdd 677 70 38 18 18 
2cce1 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
2cce5 679 0E 1C 18 18 
2cce9 67a 1C 0E 00 00 
2cced 67b 66 3C FF 3C 
2ccf1 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
2ccf5 67d 18 18 7E 18 
2ccf9 67e 18 00 00 00 
2ccfd 67f 00 00 00 00 
2cd01 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
2cd05 681 00 00 7E 00 
2cd09 682 00 00 00 00 
2cd0d 683 00 00 00 00 
2cd11 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
2cd15 685 60 30 18 0C 
2cd19 686 06 02 00 00 
2cd1d 687 3C 66 76 6E 
2cd21 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
2cd25 689 18 1C 18 18 
2cd29 68a 18 7E 00 00 
2cd2d 68b 3C 66 30 18 
2cd31 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
2cd35 68d 7E 30 18 30 
2cd39 68e 66 3C 00 00 
2cd3d 68f 30 38 3C 36 
2cd41 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
2cd45 691 7E 06 3E 60 
2cd49 692 66 3C 00 00 
2cd4d 693 3C 06 3E 66 
2cd51 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
2cd55 695 7E 60 30 18 
2cd59 696 0C 0C 00 00 
2cd5d 697 3C 66 3C 66 
2cd61 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
2cd65 699 3C 66 7C 60 
2cd69 69a 30 1C 00 00 
2cd6d 69b 00 18 18 00 
2cd71 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
2cd75 69d 00 18 18 00 
2cd79 69e 18 18 0C 60 
2cd7d 69f 30 18 0C 18 
2cd81 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
2cd85 6a1 00 7E 00 00 
2cd89 6a2 7E 00 00 06 
2cd8d 6a3 0C 18 30 18 
2cd91 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
2cd95 6a5 3C 66 30 18 
2cd99 6a6 00 18 00 00 
2cd9d 6a7 3C 66 76 76 
2cda1 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
2cda5 6a9 18 3C 66 66 
2cda9 6aa 7E 66 00 00 
2cdad 6ab 3E 66 3E 66 
2cdb1 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
2cdb5 6ad 3C 66 06 06 
2cdb9 6ae 66 3C 00 00 
2cdbd 6af 1E 36 66 66 
2cdc1 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
2cdc5 6b1 7E 06 3E 06 
2cdc9 6b2 06 7E 00 00 
2cdcd 6b3 7E 06 3E 06 
2cdd1 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
2cdd5 6b5 7C 06 06 76 
2cdd9 6b6 66 7C 00 00 
2cddd 6b7 66 66 7E 66 
2cde1 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
2cde5 6b9 7E 18 18 18 
2cde9 6ba 18 7E 00 00 
2cded 6bb 60 60 60 60 
2cdf1 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
2cdf5 6bd 66 36 1E 1E 
2cdf9 6be 36 66 00 00 
2cdfd 6bf 06 06 06 06 
2ce01 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
2ce05 6c1 C6 EE FE D6 
2ce09 6c2 C6 C6 00 00 
2ce0d 6c3 66 6E 7E 7E 
2ce11 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
2ce15 6c5 3C 66 66 66 
2ce19 6c6 66 3C 00 00 
2ce1d 6c7 3E 66 66 3E 
2ce21 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
2ce25 6c9 3C 66 66 66 
2ce29 6ca 36 6C 00 00 
2ce2d 6cb 3E 66 66 3E 
2ce31 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
2ce35 6cd 3C 06 3C 60 
2ce39 6ce 60 3C 00 00 
2ce3d 6cf 7E 18 18 18 
2ce41 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
2ce45 6d1 66 66 66 66 
2ce49 6d2 66          | 	byte	$66[5]
2ce4a 6d2 7E 00 00 66 
2ce4e 6d3 66 66 66 3C 
2ce52 6d4 18 00 00 C6 
2ce56 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2ce5a 6d6 C6 00 00 66 
2ce5e 6d7 66 3C 3C 66 
2ce62 6d8 66 00 00 66 
2ce66 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2ce6a 6da 18 00 00 7E 
2ce6e 6db 30 18 0C 06 
2ce72 6dc 7E 00 00 78 
2ce76 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
2ce7a 6de 78 00 00 02 
2ce7e 6df 06 0C 18 30 
2ce82 6e0 60 00 00 1E 
2ce86 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
2ce8a 6e2 1E 00 00 10 
2ce8e 6e3 38 6C C6 00 
2ce92 6e4 00 00 00 00 
2ce96 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ce9a 6e6 FF 00 00 18 
2ce9e 6e7 3C 7E 7E 3C 
2cea2 6e8 18 00 00 00 
2cea6 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
2ceaa 6ea 7C 00 00 06 
2ceae 6eb 06 3E 66 66 
2ceb2 6ec 3E 00 00 00 
2ceb6 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
2ceba 6ee 3C 00 00 60 
2cebe 6ef 60 7C 66 66 
2cec2 6f0 7C 00 00 00 
2cec6 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
2ceca 6f2 3C 00 00 70 
2cece 6f3 18 7C 18 18 
2ced2 6f4 18 00 00 00 
2ced6 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
2ceda 6f6 60 3E 00 06 
2cede 6f7 06 3E 66 66 
2cee2 6f8 66 00 00 18 
2cee6 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
2ceea 6fa 3C 00 00 60 
2ceee 6fb 00 60 60 60 
2cef2 6fc 60 3C 00 06 
2cef6 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
2cefa 6fe 66 00 00 1C 
2cefe 6ff 18 18 18 18 
2cf02 700 3C 00 00 00 
2cf06 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
2cf0a 702 C6 00 00 00 
2cf0e 703 3E 66 66 66 
2cf12 704 66 00 00 00 
2cf16 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
2cf1a 706 3C 00 00 00 
2cf1e 707 3E 66 66 3E 
2cf22 708 06 06 00 00 
2cf26 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
2cf2a 70a 60 60 00 00 
2cf2e 70b 3E 66 06 06 
2cf32 70c 06 00 00 00 
2cf36 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
2cf3a 70e 3E 00 00 18 
2cf3e 70f 7E 18 18 18 
2cf42 710 70 00 00 00 
2cf46 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
2cf4a 712 7C 00 00 00 
2cf4e 713 66 66 66 3C 
2cf52 714 18 00 00 00 
2cf56 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
2cf5a 716 6C 00 00 00 
2cf5e 717 66 3C 18 3C 
2cf62 718 66 00 00 00 
2cf66 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
2cf6a 71a 30 1E 00 00 
2cf6e 71b 7E 30 18 0C 
2cf72 71c 7E 00 00 18 
2cf76 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
2cf7a 71e 3C 00 18 18 
2cf7e 71f 18 18 18 18 
2cf82 720 18 18 00 7E 
2cf86 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
2cf8a 722 60 00 10 18 
2cf8e 723 1C 1E 1C 18 
2cf92 724 10 00 08 18 
2cf96 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
2cf9a 726 08 00       | 	byte	$08, $00
2cf9c 727 00 00 00 00 
2cfa0 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
2cfa1 728 80 00 00 00 
2cfa5 729 00 80 00 00 
2cfa9 72a 80 80 00 00 
2cfad 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
2cfb1 72c 80 00 80 00 
2cfb5 72d 00 40 80 00 
2cfb9 72e AA AA AA 00 
2cfbd 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
2cfc1 730 FF 00 00 00 
2cfc5 731 00 FF 00 00 
2cfc9 732 FF FF 00 00 
2cfcd 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
2cfd1 734 FF 00 FF 00 
2cfd5 735 00 FF FF 00 
2cfd9 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
2cfdc 737 00 00 00 00 
2cfe0 738 00          | ataripalette   file "ataripalettep2.def"
2cfe1 738 11 11 11 00 
2cfe5 739 22 22 22 00 
2cfe9 73a 33 33 33 00 
2cfed 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
2cff1 73c 55 55 55 00 
2cff5 73d 66 66 66 00 
2cff9 73e 77 77 77 00 
2cffd 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
2d001 740 99 99 99 00 
2d005 741 AA AA AA 00 
2d009 742 BB BB BB 00 
2d00d 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
2d011 744 DD DD DD 00 
2d015 745 EE EE EE 00 
2d019 746 FF FF FF 00 
2d01d 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
2d021 748 00 14 40 00 
2d025 749 00 1E 60 00 
2d029 74a 00 28 80 00 
2d02d 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
2d031 74c 00 3C BF 00 
2d035 74d 00 46 DF 00 
2d039 74e 00 50 FF 00 
2d03d 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
2d041 750 39 77 FF 00 
2d045 751 55 8A FF 00 
2d049 752 71 9E FF 00 
2d04d 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
2d051 754 AA C5 FF 00 
2d055 755 C6 D8 FF 00 
2d059 756 E3 EC FF 00 
2d05d 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
2d061 758 00 00 40 00 
2d065 759 00 00 60 00 
2d069 75a 00 00 80 00 
2d06d 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
2d071 75c 00 00 BF 00 
2d075 75d 00 00 DF 00 
2d079 75e 00 00 FF 00 
2d07d 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
2d081 760 39 39 FF 00 
2d085 761 55 55 FF 00 
2d089 762 71 71 FF 00 
2d08d 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
2d091 764 AA AA FF 00 
2d095 765 C6 C6 FF 00 
2d099 766 E3 E3 FF 00 
2d09d 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
2d0a1 768 20 00 40 00 
2d0a5 769 30 00 60 00 
2d0a9 76a 40 00 80 00 
2d0ad 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
2d0b1 76c 60 00 BF 00 
2d0b5 76d 70 00 DF 00 
2d0b9 76e 80 00 FF 00 
2d0bd 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
2d0c1 770 9C 39 FF 00 
2d0c5 771 AA 55 FF 00 
2d0c9 772 B8 71 FF 00 
2d0cd 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
2d0d1 774 D5 AA FF 00 
2d0d5 775 E3 C6 FF 00 
2d0d9 776 F1 E3 FF 00 
2d0dd 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
2d0e1 778 40 00 40 00 
2d0e5 779 60 00 60 00 
2d0e9 77a 80 00 80 00 
2d0ed 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
2d0f1 77c BF 00 BF 00 
2d0f5 77d DF 00 DF 00 
2d0f9 77e FF 00 FF 00 
2d0fd 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
2d101 780 FF 39 FF 00 
2d105 781 FF 55 FF 00 
2d109 782 FF 71 FF 00 
2d10d 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
2d111 784 FF AA FF 00 
2d115 785 FF C6 FF 00 
2d119 786 FF E3 FF 00 
2d11d 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
2d121 788 40 00 20 00 
2d125 789 60 00 30 00 
2d129 78a 80 00 40 00 
2d12d 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
2d131 78c BF 00 60 00 
2d135 78d DF 00 70 00 
2d139 78e FF 00 80 00 
2d13d 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
2d141 790 FF 39 9C 00 
2d145 791 FF 55 AA 00 
2d149 792 FF 71 B8 00 
2d14d 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
2d151 794 FF AA D5 00 
2d155 795 FF C6 E3 00 
2d159 796 FF E3 F1 00 
2d15d 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
2d161 798 40 00 00 00 
2d165 799 60 00 00 00 
2d169 79a 80 00 00 00 
2d16d 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
2d171 79c BF 00 00 00 
2d175 79d DF 00 00 00 
2d179 79e FF 00 00 00 
2d17d 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
2d181 7a0 FF 39 39 00 
2d185 7a1 FF 55 55 00 
2d189 7a2 FF 71 71 00 
2d18d 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
2d191 7a4 FF AA AA 00 
2d195 7a5 FF C6 C6 00 
2d199 7a6 FF E3 E3 00 
2d19d 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
2d1a1 7a8 40 10 00 00 
2d1a5 7a9 60 18 00 00 
2d1a9 7aa 80 20 00 00 
2d1ad 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
2d1b1 7ac BF 30 00 00 
2d1b5 7ad DF 38 00 00 
2d1b9 7ae FF 40 00 00 
2d1bd 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
2d1c1 7b0 FF 6A 39 00 
2d1c5 7b1 FF 80 55 00 
2d1c9 7b2 FF 95 71 00 
2d1cd 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
2d1d1 7b4 FF BF AA 00 
2d1d5 7b5 FF D5 C6 00 
2d1d9 7b6 FF EA E3 00 
2d1dd 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
2d1e1 7b8 40 20 00 00 
2d1e5 7b9 60 30 00 00 
2d1e9 7ba 80 40 00 00 
2d1ed 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
2d1f1 7bc BF 60 00 00 
2d1f5 7bd DF 70 00 00 
2d1f9 7be FF 80 00 00 
2d1fd 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
2d201 7c0 FF 9C 39 00 
2d205 7c1 FF AA 55 00 
2d209 7c2 FF B8 71 00 
2d20d 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
2d211 7c4 FF D5 AA 00 
2d215 7c5 FF E3 C6 00 
2d219 7c6 FF F1 E3 00 
2d21d 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
2d221 7c8 40 30 00 00 
2d225 7c9 60 48 00 00 
2d229 7ca 80 60 00 00 
2d22d 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
2d231 7cc BF 90 00 00 
2d235 7cd DF A8 00 00 
2d239 7ce FF C0 00 00 
2d23d 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
2d241 7d0 FF CE 39 00 
2d245 7d1 FF D5 55 00 
2d249 7d2 FF DC 71 00 
2d24d 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
2d251 7d4 FF EA AA 00 
2d255 7d5 FF F1 C6 00 
2d259 7d6 FF F8 E3 00 
2d25d 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
2d261 7d8 30 40 00 00 
2d265 7d9 48 60 00 00 
2d269 7da 60 80 00 00 
2d26d 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
2d271 7dc 90 BF 00 00 
2d275 7dd A8 DF 00 00 
2d279 7de C0 FF 00 00 
2d27d 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
2d281 7e0 CE FF 39 00 
2d285 7e1 D5 FF 55 00 
2d289 7e2 DC FF 71 00 
2d28d 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
2d291 7e4 EA FF AA 00 
2d295 7e5 F1 FF C6 00 
2d299 7e6 F8 FF E3 00 
2d29d 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
2d2a1 7e8 00 40 00 00 
2d2a5 7e9 00 60 00 00 
2d2a9 7ea 00 80 00 00 
2d2ad 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
2d2b1 7ec 00 BF 00 00 
2d2b5 7ed 00 DF 00 00 
2d2b9 7ee 00 FF 00 00 
2d2bd 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
2d2c1 7f0 39 FF 39 00 
2d2c5 7f1 55 FF 55 00 
2d2c9 7f2 71 FF 71 00 
2d2cd 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
2d2d1 7f4 AA FF AA 00 
2d2d5 7f5 C6 FF C6 00 
2d2d9 7f6 E3 FF E3 00 
2d2dd 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
2d2e1 7f8 00 40 14 00 
2d2e5 7f9 00 60 1E 00 
2d2e9 7fa 00 80 28 00 
2d2ed 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
2d2f1 7fc 00 BF 3C 00 
2d2f5 7fd 00 DF 46 00 
2d2f9 7fe 00 FF 50 00 
2d2fd 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
2d301 800 39 FF 77 00 
2d305 801 55 FF 8A 00 
2d309 802 71 FF 9E 00 
2d30d 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
2d311 804 AA FF C5 00 
2d315 805 C6 FF D8 00 
2d319 806 E3 FF EC 00 
2d31d 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
2d321 808 00 40 28 00 
2d325 809 00 60 3C 00 
2d329 80a 00 80 50 00 
2d32d 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
2d331 80c 00 BF 78 00 
2d335 80d 00 DF 8C 00 
2d339 80e 00 FF A0 00 
2d33d 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
2d341 810 39 FF B5 00 
2d345 811 55 FF C0 00 
2d349 812 71 FF CA 00 
2d34d 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
2d351 814 AA FF DF 00 
2d355 815 C6 FF EA 00 
2d359 816 E3 FF F4 00 
2d35d 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
2d361 818 00 40 40 00 
2d365 819 00 60 60 00 
2d369 81a 00 80 80 00 
2d36d 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
2d371 81c 00 BF BF 00 
2d375 81d 00 DF DF 00 
2d379 81e 00 FF FF 00 
2d37d 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
2d381 820 39 FF FF 00 
2d385 821 55 FF FF 00 
2d389 822 71 FF FF 00 
2d38d 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
2d391 824 AA FF FF 00 
2d395 825 C6 FF FF 00 
2d399 826 E3 FF FF 00 
2d39d 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
2d3a1 828 00 28 40 00 
2d3a5 829 00 3C 60 00 
2d3a9 82a 00 50 80 00 
2d3ad 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
2d3b1 82c 00 78 BF 00 
2d3b5 82d 00 8C DF 00 
2d3b9 82e 00 A0 FF 00 
2d3bd 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
2d3c1 830 39 B5 FF 00 
2d3c5 831 55 C0 FF 00 
2d3c9 832 71 CA FF 00 
2d3cd 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
2d3d1 834 AA DF FF 00 
2d3d5 835 C6 EA FF 00 
2d3d9 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
2d3dc 837             | 
2d3dc 837             | '**********************************************************************************
2d3dc 837             | '
2d3dc 837             | '        Timings and colors definitions
2d3dc 837             | '
2d3dc 837             | '**********************************************************************************
2d3dc 837             | 
2d3dc 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
2d3dc 837 10 00 00 00 
2d3e0 838 50 00 00 00 
2d3e4 839 0C 00 00 00 
2d3e8 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
2d3ec 83b 08 00 00 00 
2d3f0 83c 04 00 00 00 
2d3f4 83d 08 00 00 00 
2d3f8 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
2d3fc 83f 40 02 00 00 
2d400 840 6A 8C 15 14 
2d404 841 FB 06 B7 01 
2d408 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
2d40c 843 00 00 00 00 
2d410 844 C0 00 00 00 
2d414 845 00 00 00 00 
2d418 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d41c 847 00 75 C7 97 
2d420 848 27 47 F6 0A 
2d424 849 05 79 CB 9B 
2d428 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
2d42c 84b             | 
2d42c 84b             | ''--------  Initialization  ----------------------------------------------------------------
2d42c 84b             | 
2d42c 84b 28 0C 64 FD | hdmi            setq    #6
2d430 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
2d434 84d 28 10 64 FD |                 setq    #8
2d438 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
2d43c 84f             | 
2d43c 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
2d440 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
2d444 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
2d448 852 D6 C6 01 F1 |                 add     t1,hbase
2d44c 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
2d450 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
2d454 855 7B 0B 80 5F 
2d458 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
2d45c 857 66 66 86 FF 
2d460 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
2d464 859             | '
2d464 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
2d468 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
2d46c 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
2d470 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
2d474 85d             | 
2d474 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
2d478 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
2d47c 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
2d480 860             | 
2d480 860             | ''--------  frame rendering main loop  ---------------------------------------------------
2d480 860             | 
2d480 860 28 06 64 FD | p101            setq 	#3
2d484 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
2d488 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
2d48c 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
2d490 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
2d494 865 00 A0 05 F6 |                 mov     dlinum, #0
2d498 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
2d49c 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
2d4a0 868             | 
2d4a0 868             | 
2d4a0 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
2d4a4 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
2d4a8 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
2d4ac 86b             |                 
2d4ac 86b             | 
2d4ac 86b             | 
2d4ac 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
2d4ac 86b             |   
2d4ac 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
2d4b0 86c 29 FE 65 3D |          if_nc  setq2   #255
2d4b4 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
2d4b8 86e             | 
2d4b8 86e             | '' -----   up porch (before the picture)
2d4b8 86e             | 
2d4b8 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
2d4bc 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
2d4c0 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
2d4c4 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
2d4c8 872             |  
2d4c8 872             |    
2d4c8 872             |  
2d4c8 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2d4cc 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
2d4d0 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
2d4d4 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2d4d8 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
2d4dc 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
2d4e0 878             | 
2d4e0 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2d4e4 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
2d4e8 87a 48 00 B0 FD | 		call    #dli
2d4ec 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
2d4f0 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
2d4f4 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
2d4f8 87e             |                 	
2d4f8 87e             |                 
2d4f8 87e             | 
2d4f8 87e             |  
2d4f8 87e             | '' ------- the main screen drawing starts here
2d4f8 87e             | 
2d4f8 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
2d4fc 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
2d500 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
2d504 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
2d508 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
2d50c 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
2d510 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
2d514 885             |               
2d514 885             | 
2d514 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
2d518 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
2d51c 887             | 
2d51c 887             | ' ---------------- All visible lines displayed now, start vblank  
2d51c 887             | 
2d51c 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
2d520 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
2d524 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
2d528 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
2d52c 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
2d530 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
2d534 88d             | 
2d534 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
2d534 88d             | 
2d534 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
2d534 88d             | 
2d534 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
2d538 88e             | 
2d538 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
2d53c 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
2d540 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
2d544 891             | 
2d544 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
2d548 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
2d54c 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
2d550 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
2d554 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
2d558 896             | 
2d558 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
2d55c 897 DD C6 41 F8 |                 getnib  t1,dl,#0
2d560 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
2d564 899 70 00 90 AD |     if_z        jmp     #preload
2d568 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
2d56c 89b 94 00 90 AD |     if_z        jmp     #preload2
2d570 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
2d574 89d 0C 00 90 AD |     if_z        jmp     #p390
2d578 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
2d57c 89f 28 00 90 AD |     if_z        jmp     #p391  
2d580 8a0             | 
2d580 8a0 2D 00 64 FD | p308            ret
2d584 8a1             |    
2d584 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
2d588 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
2d58c 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
2d590 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
2d594 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
2d598 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
2d59c 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
2d5a0 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
2d5a4 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
2d5a8 8aa             |  
2d5a8 8aa             | '' --------  Reload palette. To do 
2d5a8 8aa             | 
2d5a8 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
2d5ac 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
2d5b0 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
2d5b4 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
2d5b8 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
2d5bc 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
2d5c0 8b0 70 FF 9F FD |         	jmp     #dli                
2d5c4 8b1             |       
2d5c4 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
2d5c4 8b1             | 
2d5c4 8b1             | 
2d5c4 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
2d5c4 8b1             | 
2d5c4 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
2d5c8 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
2d5cc 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2d5d0 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
2d5d4 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
2d5d8 8b6             |         
2d5d8 8b6             | '' -------------- Preload a line from PSRAM        
2d5d8 8b6             |         
2d5d8 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
2d5dc 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
2d5e0 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
2d5e4 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
2d5e8 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
2d5ec 8bb             | 
2d5ec 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
2d5f0 8bc 32 B7 01 F6 |                 mov     buf2,a1024
2d5f4 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
2d5f8 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
2d5fc 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
2d600 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
2d604 8c1             |  
2d604 8c1             |  
2d604 8c1             | preload2      '  incmod  dlinum,#3
2d604 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
2d608 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
2d60c 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
2d610 8c4 28 02 64 FD |                 setq	#1
2d614 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
2d618 8c6             |                 
2d618 8c6             | 
2d618 8c6             | '' -------------- Draw sprites
2d618 8c6             | 
2d618 8c6 CF 5C 02 F6 | sprite          mov t8,frames
2d61c 8c7 10 5C 0E F5 | 		and t8,#16 wz
2d620 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
2d624 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
2d628 8ca             | 		
2d628 8ca             | 
2d628 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
2d62c 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
2d630 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
2d634 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
2d638 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
2d63c 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
2d640 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
2d644 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
2d648 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
2d64c 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
2d650 8d4 01 52 86 F1 |                 sub     sprite_h,#1
2d654 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
2d658 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
2d65c 8d7             | 
2d65c 8d7             | 
2d65c 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
2d660 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
2d664 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
2d668 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
2d66c 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
2d670 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
2d674 8dd 00 5E 06 F6 |                 mov 	t9,#0
2d678 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
2d67c 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
2d680 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
2d684 8e1             |      
2d684 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
2d688 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
2d68c 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
2d690 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
2d694 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
2d698 8e6             |                 
2d698 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
2d69c 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
2d6a0 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
2d6a4 8e9             |   		
2d6a4 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
2d6a8 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
2d6ac 8eb             | 
2d6ac 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
2d6b0 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
2d6b4 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
2d6b8 8ee             |  
2d6b8 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
2d6bc 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
2d6c0 8f0 10 00 90 CD |      if_c 	jmp     #p899		
2d6c4 8f1             | 	
2d6c4 8f1             | 	
2d6c4 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
2d6c8 8f2 28 CD 01 F1 | 		add	t4,sprite_w
2d6cc 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
2d6d0 8f4             | 
2d6d0 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
2d6d4 8f5             | 
2d6d4 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
2d6d8 8f6 01 58 86 F1 | 	 	sub     t6,#1
2d6dc 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
2d6e0 8f8             | 
2d6e0 8f8 28 58 62 FD |                 setq   	t6
2d6e4 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
2d6e8 8fa 28 5D 02 F6 |                 mov t8,sprite_w
2d6ec 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
2d6f0 8fc 24 00 90 AD |         if_z    jmp #p898
2d6f4 8fd             |          
2d6f4 8fd             |         
2d6f4 8fd 70 5F 06 F6 |                 mov  t9,#368
2d6f8 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
2d6fc 8ff             | 
2d6fc 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
2d700 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
2d704 901 FF FF 7F FF 
2d708 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
2d70c 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
2d710 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
2d714 905 2D 01 00 F5 |                 and 0-0, t7
2d718 906             |                
2d718 906             | 
2d718 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
2d71c 907 E5 E0 7A FA |                 wmlong 368,t3				
2d720 908             |                 
2d720 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
2d724 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
2d728 90a 2D 00 64 FD |                 ret
2d72c 90b             | 	
2d72c 90b             | 	
2d72c 90b             |                
2d72c 90b             |  
2d72c 90b             | '' -------------- Graphics line ------------------------------------------------------------
2d72c 90b             |  
2d72c 90b             | 
2d72c 90b             | '' consts and vars
2d72c 90b             | 
2d72c 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
2d730 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
2d734 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
2d738 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
2d73c 90f             | 
2d73c 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
2d740 910             | 
2d740 910             | '------ these longs will be set by setmode function
2d740 910             | 
2d740 910 00 00 00 00 | m_bs            long    0        'blanks before sync
2d744 911 00 00 00 00 | m_sn            long    0        'sync
2d748 912 00 00 00 00 | m_bv            long    0        'blanks before visible
2d74c 913 00 00 00 00 | m_vi            long    0        'visible pixels #
2d750 914             | 'm_border        long    0        'left/right borders
2d750 914 00 00 00 00 | i_upporch       long    0        'up porch lines
2d754 915 00 00 00 00 | i_vsync         long    0        'vsync lines
2d758 916 00 00 00 00 | i_downporch     long    0        'down porch lines
2d75c 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
2d760 918 00 00 00 00 | i_totalvis      long    0
2d764 919             | 
2d764 919             | '-------------------------------------
2d764 919             |  
2d764 919 00 00 00 00 | linenum         long    0
2d768 91a 00 00 00 00 | frames          long    0
2d76c 91b 00 00 00 00 | dlinum long 0
2d770 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
2d774 91d             | 
2d774 91d 00 00 00 00 | vblankptr       long    0
2d778 91e 00 00 00 00 | modeptr         long    0
2d77c 91f 00 00 00 00 | paletteptr      long    0
2d780 920 00 00 00 00 | dlptr           long    0
2d784 921 01 00 00 00 | hbase           long    1
2d788 922 00 00 00 00 | mailbox         long    0
2d78c 923 00 00 00 00 | spriteptr          long 0
2d790 924             | 
2d790 924 00 00 00 00 | cmd             long    0
2d794 925 00 B0 07 00 | buf1            long    $80000-16384-4096
2d798 926 00 04 00 00 | buf2            long    1024
2d79c 927 01 00 00 00 | dlptr2          long    1
2d7a0 928 01 00 00 00 | dl              long    1
2d7a4 929             | 
2d7a4 929 00 00 00 00 | buf1c long 0
2d7a8 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
2d7ac 92b 01 00 00 00 | framebuf2       long    1
2d7b0 92c 01 00 00 00 | hsync0          long    1
2d7b4 92d 01 00 00 00 | hsync1          long    1
2d7b8 92e             | 
2d7b8 92e 01 00 00 00 | t1              long    1
2d7bc 92f 00 00 00 00 | t2 long 0
2d7c0 930 00 00 00 00 | t3 long 0
2d7c4 931 00 00 00 00 | t4 long 0
2d7c8 932             | 
2d7c8 932 00 00 00 00 | rcnt            long    0  'dl repeat count
2d7cc 933 00 00 00 00 | rcnt2           long    0
2d7d0 934 00 00 00 00 | rcnt2a          long    0
2d7d4 935 00 00 00 00 | roffset         long    0
2d7d8 936 00 00 00 00 | rdl             long    0  'dl repeat line
2d7dc 937 00 00 00 00 | dlc             long    0  'dl command
2d7e0 938             | 
2d7e0 938 FF FF FF FF | affffffff       long    $ffffffff
2d7e4 939 00 00 00 00 | sprite1pointer long 0
2d7e8 93a 00 00 00 00 | sprite1xy      long 0
2d7ec 93b 00 00 00 00 | sprite1wh      long 0
2d7f0 93c 00 00 00 00 | sprite2pointer long 0
2d7f4 93d 00 00 00 00 | sprite2xy      long 0
2d7f8 93e 00 00 00 00 | sprite2wh      long 0
2d7fc 93f 00 00 00 00 | sprite3pointer long 0
2d800 940 00 00 00 00 | sprite3xy      long 0
2d804 941 00 00 00 00 | sprite3wh      long 0
2d808 942 00 00 00 00 | sprite4pointer long 0
2d80c 943 00 00 00 00 | sprite4xy      long 0
2d810 944 00 00 00 00 | sprite4wh      long 0
2d814 945 00 00 00 00 | sprite5pointer long 0
2d818 946 00 00 00 00 | sprite5xy      long 0
2d81c 947 00 00 00 00 | sprite5wh      long 0
2d820 948 00 00 00 00 | sprite6pointer long 0
2d824 949 00 00 00 00 | sprite6xy      long 0
2d828 94a 00 00 00 00 | sprite6wh      long 0
2d82c 94b 00 00 00 00 | sprite7pointer long 0
2d830 94c 00 00 00 00 | sprite7xy      long 0
2d834 94d 00 00 00 00 | sprite7wh      long 0
2d838 94e 00 00 00 00 | sprite8pointer long 0
2d83c 94f 00 00 00 00 | sprite8xy      long 0
2d840 950 00 00 00 00 | sprite8wh      long 0
2d844 951 00 00 00 00 | sprite9pointer long 0
2d848 952 00 00 00 00 | sprite9xy      long 0
2d84c 953 00 00 00 00 | sprite9wh      long 0
2d850 954 00 00 00 00 | sprite10pointer long 0
2d854 955 00 00 00 00 | sprite10xy      long 0
2d858 956 00 00 00 00 | sprite10wh      long 0
2d85c 957 00 00 00 00 | sprite11pointer long 0
2d860 958 00 00 00 00 | sprite11xy      long 0
2d864 959 00 00 00 00 | sprite11wh      long 0
2d868 95a 00 00 00 00 | sprite12pointer long 0
2d86c 95b 00 00 00 00 | sprite12xy      long 0
2d870 95c 00 00 00 00 | sprite12wh      long 0
2d874 95d 00 00 00 00 | sprite13pointer long 0
2d878 95e 00 00 00 00 | sprite13xy      long 0
2d87c 95f 00 00 00 00 | sprite13wh      long 0
2d880 960 00 00 00 00 | sprite14pointer long 0
2d884 961 00 00 00 00 | sprite14xy      long 0
2d888 962 00 00 00 00 | sprite14wh      long 0
2d88c 963 00 00 00 00 | sprite15pointer long 0
2d890 964 00 00 00 00 | sprite15xy      long 0
2d894 965 00 00 00 00 | sprite15wh      long 0
2d898 966 00 00 00 00 | sprite16pointer long 0
2d89c 967 00 00 00 00 | sprite16xy      long 0
2d8a0 968 00 00 00 00 | sprite16wh      long 0
2d8a4 969 00 00 00 00 | sprite17pointer long 0
2d8a8 96a 00 00 00 00 | sprite17xy      long 0
2d8ac 96b 00 00 00 00 | sprite17wh      long 0
2d8b0 96c 00 00 00 00 | sprite18pointer long 0
2d8b4 96d 00 00 00 00 | sprite18xy      long 0
2d8b8 96e 00 00 00 00 | sprite18wh      long 0
2d8bc 96f 00 00 00 00 | spritenum long 0
2d8c0 970             | 
2d8c0 970 00 00 00 00 | spriteline long 0
2d8c4 971 84 03 00 00 | sprite_x long 900
2d8c8 972 00 00 00 00 | sprite_y long 0
2d8cc 973 10 00 00 00 | sprite_w long 16
2d8d0 974 40 00 00 00 | sprite_h long 64
2d8d4 975 00 00 00 00 | l2 long 0
2d8d8 976 00 00 00 00 | t5 long 0
2d8dc 977 00 00 00 00 | t6 long 0
2d8e0 978 00 00 00 00 | t7 long 0
2d8e4 979 00 00 00 00 | t8 long 0
2d8e8 97a 00 00 00 00 | t9 long 0
2d8ec 97b 00 00 00 00 | preloadaddr long 0
2d8f0 97c 00 00 00 00 | preloadlineaddr long 0
2d8f4 97d 00 04 00 00 | a1024 long 1024
2d8f8 97e             | 
2d8f8 97e E0 03 00 00 | aa long 992
2d8fc 97f FF 03 00 00 | a1023 long 1023
2d900 980 00 10 00 00 | a4096 long 4096
2d904 981             |  fit 368
2d904 981             | _psram_spin2_dat_
2d904 981 00 00 00 00 
      ...             
2d9fc 9bf 00 00 00 00 
2da00 9c0 00 00 00 00 |     listdata long 0[8*8]
2da04 9c1             |             orgh
2da04                 | 
2da04                 | ' driver state
2da04     FF FF FF FF | drivercog   long    -1  ' COG id of driver
2da08     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
2da0c                 | 
2da0c                 | ' delay profile
2da0c     07 00 00 00 
2da10     00 CF 7B 05 
2da14     80 D1 F0 08 
2da18     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
2da1c     80 C4 60 0F 
2da20     80 39 7A 12 
2da24     40 2D D9 13 
2da28     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
2da2c                 | 
2da2c                 | ' data to be passed to driver when starting it
2da2c                 | startupData
2da2c     00 00 00 00 |     long    0           ' current frequency
2da30     00 00 00 00 |     long    FLAGS       ' optional flags for driver
2da34     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
2da38     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
2da3c     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
2da40     4C DA 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
2da44     CC DA 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
2da48     EC DA 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
2da4c                 | 
2da4c                 | ' data for memory
2da4c                 | deviceData
2da4c                 |     ' 16 bank parameters follow (16MB per bank)
2da4c     00 00 00 00 
      ...             
2da84     00 00 00 00 
2da88     00 00 00 00 |     long    0[16]                               ' banks 0-15
2da8c                 |     ' 16 banks of pin parameters follow
2da8c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
2da90     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
2da94     FF FF FF FF 
      ...             
2dac4     FF FF FF FF 
2dac8     FF FF FF FF |     long    -1[14]                              ' banks 2-15
2dacc                 | 
2dacc                 | ' data for COG polling
2dacc                 | qosData 
2dacc     00 00 FF FF 
2dad0     00 00 FF FF 
2dad4     00 00 FF FF 
2dad8     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
2dadc     00 00 FF FF 
2dae0     00 00 FF FF 
2dae4     00 00 FF FF 
2dae8     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
2daec                 |     
2daec                 | ' mailbox storage
2daec                 | 
2daec                 | mailboxes
2daec     00 00 00 00 
      ...             
2db44     00 00 00 00 
2db48     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
2db4c                 | 	alignl
2db4c                 | _psram16drv_spin2_dat_
2db4c                 |                             orgh
2db4c     00 00 00 00 
      ...             
2db64     00 00 00 00 
2db68     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
2db6c                 | 
2db6c                 | driver_start
2db6c                 |                             org
2db6c 000             | '..................................................................................................
2db6c 000             | ' Memory layout for COG RAM once operational:
2db6c 000             | '
2db6c 000             | '  COG RAM address      Usage
2db6c 000             | '  ---------------      ----
2db6c 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
2db6c 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
2db6c 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
2db6c 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
2db6c 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
2db6c 000             | '  ~$198-$1F3           State and register variables
2db6c 000             | '
2db6c 000             | ' Also during driver COG startup:
2db6c 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
2db6c 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
2db6c 000             | '..................................................................................................
2db6c 000             |                             
2db6c 000             | ' Mailbox storage after vector initialization
2db6c 000             | 
2db6c 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
2db70 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
2db74 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
2db78 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
2db7c 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
2db80 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
2db84 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
2db88 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
2db8c 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
2db90 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
2db94 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
2db98 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
2db9c 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
2dba0 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
2dba4 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
2dba8 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
2dbac 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
2dbb0 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
2dbb4 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
2dbb8 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
2dbbc 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
2dbc0 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
2dbc4 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
2dbc8 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
2dbcc 018             | 
2dbcc 018             | ' Mailbox parameter addresses per COG once patched
2dbcc 018             |                             
2dbcc 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
2dbd0 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
2dbd4 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
2dbd8 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
2dbdc 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
2dbe0 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
2dbe4 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
2dbe8 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
2dbec 020             | 
2dbec 020             | '..................................................................................................
2dbec 020             | ' Per COG request and state setup and service branching
2dbec 020             |         
2dbec 020             | cog0                 
2dbec 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
2dbf0 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
2dbf4 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
2dbf8 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
2dbfc 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2dc00 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2dc04 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
2dc08 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
2dc0c 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
2dc10 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2dc14 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2dc18 02b 33 CA 63 FD |                             execf   request-0               'jump to service
2dc1c 02c             | cog1                        
2dc1c 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
2dc20 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
2dc24 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
2dc28 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
2dc2c 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2dc30 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2dc34 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
2dc38 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
2dc3c 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
2dc40 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2dc44 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2dc48 037 33 CA 63 FD |                             execf   request-0               'jump to service
2dc4c 038             | cog2                         
2dc4c 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
2dc50 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
2dc54 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
2dc58 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
2dc5c 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2dc60 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2dc64 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
2dc68 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
2dc6c 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
2dc70 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2dc74 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2dc78 043 33 CA 63 FD |                             execf   request-0               'jump to service
2dc7c 044             | cog3                        
2dc7c 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
2dc80 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
2dc84 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
2dc88 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
2dc8c 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2dc90 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2dc94 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
2dc98 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
2dc9c 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
2dca0 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2dca4 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2dca8 04f 33 CA 63 FD |                             execf   request-0               'jump to service
2dcac 050             | cog4                        
2dcac 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
2dcb0 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
2dcb4 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
2dcb8 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
2dcbc 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2dcc0 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2dcc4 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
2dcc8 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
2dccc 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
2dcd0 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2dcd4 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2dcd8 05b 33 CA 63 FD |                             execf   request-0               'jump to service
2dcdc 05c             | cog5                        
2dcdc 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
2dce0 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
2dce4 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
2dce8 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
2dcec 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2dcf0 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2dcf4 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
2dcf8 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
2dcfc 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
2dd00 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2dd04 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2dd08 067 33 CA 63 FD |                             execf   request-0               'jump to service
2dd0c 068             | cog6                        
2dd0c 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
2dd10 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
2dd14 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
2dd18 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
2dd1c 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2dd20 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2dd24 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
2dd28 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
2dd2c 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
2dd30 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2dd34 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2dd38 073 33 CA 63 FD |                             execf   request-0               'jump to service
2dd3c 074             | cog7                        
2dd3c 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
2dd40 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
2dd44 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
2dd48 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
2dd4c 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2dd50 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2dd54 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
2dd58 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
2dd5c 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
2dd60 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2dd64 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2dd68 07f 33 CA 63 FD |                             execf   request-0               'jump to service
2dd6c 080             |                             fit     128
2dd6c 080             | 
2dd6c 080             |                             fit     128
2dd6c 080             | pad                         long    0[128-$]                'align init code to $80
2dd6c 080             | 
2dd6c 080             | '..................................................................................................
2dd6c 080             | 
2dd6c 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
2dd6c 080             | 
2dd6c 080             | init                        
2dd6c 080             |                             ' get driver scratch long address in hub
2dd6c 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
2dd70 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
2dd74 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
2dd78 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
2dd7c 084             |                     
2dd7c 084             |                             ' read in the additional LUT RAM code
2dd7c 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
2dd80 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
2dd84 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
2dd88 087             | 
2dd88 087             |                             ' read the startup parameters
2dd88 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
2dd8c 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
2dd90 089             | 
2dd90 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
2dd90 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
2dd94 08a             | 
2dd94 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
2dd98 08b 01 00 00 5F 
2dd9c 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
2dda0 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
2dda4 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
2dda8 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
2ddac 090             | 
2ddac 090             |                             ' setup data pin modes and data bus pin group in streamer commands
2ddac 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
2ddb0 091 01 00 00 FF 
2ddb4 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
2ddb8 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
2ddbc 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
2ddc0 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
2ddc4 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
2ddc8 097 08 DE 47 F5 |                             or      a, #8
2ddcc 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
2ddd0 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
2ddd4 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
2ddd8 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
2dddc 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
2dde0 09d 01 DE 07 F1 |                             add     a, #1
2dde4 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
2dde8 09f             |  
2dde8 09f             |                             ' setup device control pin states
2dde8 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
2ddec 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
2ddf0 0a1 01 00 00 FF 
2ddf4 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
2ddf8 0a3             | 
2ddf8 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
2ddfc 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
2de00 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
2de04 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
2de08 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
2de0c 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
2de10 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
2de14 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
2de18 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
2de1c 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
2de20 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
2de24 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
2de28 0af             | pinloop
2de28 0af             |                             ' generate minimum CE high time before access
2de28 0af A1 07 00 FF 
2de2c 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
2de30 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
2de34 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
2de38 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
2de3c 0b4 1F DE 63 FD |                             waitx   a                       'delay
2de40 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
2de44 0b6             | 
2de44 0b6             |                             ' setup the COG mailboxes and addresses 
2de44 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
2de48 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
2de4c 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
2de50 0b9             | 
2de50 0b9 28 2E 64 FD |                             setq    #24-1
2de54 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
2de58 0bb             | 
2de58 0bb             |                             ' setup the polling loop for active COGs 
2de58 0bb 01 C2 63 FD |                             cogid   id
2de5c 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
2de60 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
2de64 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
2de68 0bf 0A F0 07 F6 |                             mov     ptra, #10
2de6c 0c0 E1 F1 03 FA |                             mul     ptra, id
2de70 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
2de74 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
2de78 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
2de7c 0c4 03 C2 07 FA |                             mul     id, #3
2de80 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
2de84 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
2de88 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
2de8c 0c8 D8 01 B0 FD |                             call    #reloadcogs
2de90 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
2de94 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
2de98 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
2de98 0cb D8 E5 B7 F9 |                             setd    d, #addr1
2de9c 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
2dea0 0cd 08 04 DC FC |                             rep     #2, #8
2dea4 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
2dea8 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
2deac 0d0             | 
2deac 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
2deac 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
2deac 0d0 01 C2 63 FD |                             cogid   id
2deb0 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
2deb4 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
2deb8 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
2debc 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
2dec0 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
2dec4 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
2dec8 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
2decc 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
2ded0 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
2ded4 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2ded8 0db 3F E4 A7 F9 |                             alti    d, #%111_111
2dedc 0dc 00 00 00 F6 |                             mov     0-0, 0-0
2dee0 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
2dee4 0de A5 E5 03 F1 |                             add     d, const512
2dee8 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2deec 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
2def0 0e1 00 00 00 F6 |                             mov     0-0, 0-0
2def4 0e2             |                             
2def4 0e2             |                             ' setup register values for control vector loop setup after we return
2def4 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
2def8 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
2defc 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
2df00 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
2df04 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
2df08 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
2df0c 0e8 D0 C3 8F F9 |                             altd    id, #id0
2df10 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
2df14 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
2df18 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
2df1c 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
2df20 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
2df24 0ee             |  
2df24 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
2df28 0ef 07 CA 07 F5 |                             and     request, #7
2df2c 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
2df30 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
2df34 0f2             |                             fit     $100                    'ensure all init code fits this space
2df34 0f2             | 
2df34 0f2             |                             fit     $100                    'ensure all init code fits this space
2df34 0f2             | 
2df34 0f2 00 00 00 00 
      ...             
2df64 0fe 00 00 00 00 
2df68 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
2df6c 100             | 
2df6c 100             | '..................................................................................................
2df6c 100             | ' Error result handling and COG notification of request completion
2df6c 100             | 
2df6c 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
2df70 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
2df74 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
2df78 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
2df7c 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
2df80 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
2df84 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
2df88 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
2df8c 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
2df90 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
2df94 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
2df98 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
2df9c 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
2dfa0 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
2dfa4 10e             | ' Poller re-starts here after a COG is serviced
2dfa4 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
2dfa8 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
2dfac 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
2dfb0 111             | ' Main dynamic polling loop repeats until a request arrives
2dfb0 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
2dfb4 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
2dfb8 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
2dfbc 114             | 
2dfbc 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
2dfc0 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
2dfc4 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
2dfc8 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
2dfcc 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
2dfd0 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
2dfd4 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
2dfd8 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
2dfdc 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
2dfe0 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
2dfe4 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
2dfe8 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
2dfec 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
2dff0 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
2dff4 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
2dff8 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
2dffc 124             | 
2dffc 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
2e000 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
2e004 126             |  
2e004 126             | '..................................................................................................
2e004 126             | ' List handler                               
2e004 126             | 
2e004 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
2e008 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
2e00c 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
2e010 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
2e014 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
2e018 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
2e01c 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
2e020 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
2e024 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
2e028 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
2e02c 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
2e030 131 33 00 60 FD |                             execf   0-0                     'process the request 
2e034 132             | 
2e034 132             | '..................................................................................................
2e034 132             | ' Restoring per COG state and resuming where we left off
2e034 132             | 
2e034 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
2e038 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
2e03c 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
2e040 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
2e044 136 D8 CB FB F8 |                             getbyte request, addr1, #3
2e048 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
2e04c 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
2e050 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
2e054 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
2e058 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
2e05c 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
2e060 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
2e064 13e             |                    
2e064 13e             | '..................................................................................................
2e064 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
2e064 13e             | 
2e064 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
2e068 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
2e06c 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
2e070 141 D0 DF B7 F9 |                             setd    a, #id0
2e074 142 D8 DF BF F9 |                             sets    a, #addr1
2e078 143 FE FF FF FF 
2e07c 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
2e080 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
2e084 146 3F DE A7 F9 |                             alti    a, #%111_111 
2e088 147 00 00 F0 F9 |                             muxq    0-0, 0-0
2e08c 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
2e090 149 01 E2 63 FD |                             cogid   c
2e094 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
2e098 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
2e09c 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
2e0a0 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
2e0a4 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
2e0a8 14f 00 E0 03 F6 |                             mov     b, 0-0
2e0ac 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
2e0b0 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
2e0b4 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
2e0b8 153 0C 00 90 AD |             if_z            jmp     #excluded               
2e0bc 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
2e0c0 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
2e0c4 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
2e0c8 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
2e0cc 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
2e0d0 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
2e0d4 15a             | 
2e0d4 15a             | 'determine priority cogs and build instructions for the polling sequence
2e0d4 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
2e0d8 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
2e0dc 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
2e0e0 15d             | 
2e0e0 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
2e0e4 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
2e0e8 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
2e0ec 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
2e0f0 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
2e0f4 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
2e0f8 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
2e0fc 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
2e100 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
2e104 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
2e108 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
2e10c 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
2e110 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
2e114 16a             | endprioloop
2e114 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
2e118 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
2e11c 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
2e120 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
2e124 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
2e128 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
2e12c 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
2e130 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
2e134 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
2e138 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
2e13c 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
2e140 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
2e144 176             | 
2e144 176             | ' populate the round robin COG polling instructions
2e144 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
2e148 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
2e14c 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
2e150 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
2e154 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
2e158 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
2e15c 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
2e160 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
2e164 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
2e168 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
2e16c 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
2e170 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
2e174 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
2e178 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
2e17c 184             | '..................................................................................................
2e17c 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
2e17c 184             | 
2e17c 184             | set_latency                                                 '            (a) set latency
2e17c 184             | get_latency                                                 '            (b) get latency
2e17c 184             | set_burst                                                   '            (c) set burst size of bank
2e17c 184             | get_burst                                                   '            (d) get burst size of bank
2e17c 184             |                                                             '            (e) dump state
2e17c 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
2e180 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
2e184 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
2e188 187             |                                                             ' | | | | e  account for following AUGS
2e188 187 04 00 00 FF 
2e18c 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
2e190 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
2e194 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
2e198 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
2e19c 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
2e1a0 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
2e1a4 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
2e1a8 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
2e1ac 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
2e1b0 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
2e1b4 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
2e1b8 193             | 
2e1b8 193             | '..................................................................................................
2e1b8 193             | ' Misc EXECF code
2e1b8 193             | 
2e1b8 193 33 72 63 FD | start_read_exec             execf   newburstr
2e1bc 194 33 7C 63 FD | start_write_exec            execf   resumewrites
2e1c0 195 33 78 63 FD | continue_read_exec          execf   lockedreads
2e1c4 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
2e1c8 197             | 
2e1c8 197             | '..................................................................................................
2e1c8 197             | ' Variables
2e1c8 197             | 
2e1c8 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
2e1cc 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
2e1d0 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
2e1d4 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
2e1d8 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
2e1dc 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
2e1e0 19d             | 
2e1e0 19d 00 00 00 80 | xfreq1          long    $80000000
2e1e4 19e 00 00 00 40 | xfreq2          long    $40000000
2e1e8 19f 03 00 00 00 | delay           long    3
2e1ec 1a0             | 
2e1ec 1a0             | lutcodeaddr                 
2e1ec 1a0             | startupparams
2e1ec 1a0             | excludedcogs                                    'careful: shared register use!
2e1ec 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
2e1f0 1a1 00 00 00 00 | flags           long    0
2e1f4 1a2             | mask                                            'careful: shared register use!
2e1f4 1a2 00 00 00 00 | resetmaskA      long    0
2e1f8 1a3             | limit                                           'careful: shared register use!
2e1f8 1a3 00 00 00 00 | resetmaskB      long    0
2e1fc 1a4 00 00 00 00 | datapins        long    0
2e200 1a5             | const512                                        'careful: shared register use!
2e200 1a5 00 00 00 00 | devicelist      long    0
2e204 1a6 00 00 00 00 | coglist         long    0
2e208 1a7 00 00 00 00 | mbox            long    0 
2e20c 1a8             | 
2e20c 1a8             | clkpin                                          'shared with code patched during init
2e20c 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
2e210 1a9             | cspin                                           'shared with code patched during init
2e210 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
2e214 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
2e218 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
2e21c 1ac 01 00 00 00 | clkdelay        long    1
2e220 1ad 00 00 00 00 | regdatabus      long    0
2e224 1ae             | 
2e224 1ae 10 00 00 00 | deviceaddr      long    $10
2e228 1af             | rrcounter
2e228 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
2e22c 1b0             | 
2e22c 1b0             | ' jump addresses for the per COG handlers
2e22c 1b0 20 00 00 00 | cog0_handler    long    cog0
2e230 1b1 2C 00 00 00 | cog1_handler    long    cog1
2e234 1b2 38 00 00 00 | cog2_handler    long    cog2
2e238 1b3 44 00 00 00 | cog3_handler    long    cog3
2e23c 1b4 50 00 00 00 | cog4_handler    long    cog4
2e240 1b5 5C 00 00 00 | cog5_handler    long    cog5
2e244 1b6 68 00 00 00 | cog6_handler    long    cog6
2e248 1b7 74 00 00 00 | cog7_handler    long    cog7
2e24c 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
2e250 1b9             | 
2e250 1b9             | ' EXECF sequences
2e250 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
2e254 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
2e258 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
2e25c 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
2e260 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
2e264 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
2e268 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
2e26c 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
2e26c 1c0             | 
2e26c 1c0             | 
2e26c 1c0             | ' SKIPF sequences
2e26c 1c0             | skiptable
2e26c 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
2e270 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
2e274 1c2 00 00 00 00 |                 long    0                      ' read modify write long
2e278 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
2e27c 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
2e280 1c5 00 00 00 00 | pattern2        long    0
2e284 1c6 00 00 00 00 | pattern3        long    0
2e288 1c7 77 02 00 00 | singlelong      long    %1001110111  
2e28c 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
2e290 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
2e294 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
2e298 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
2e29c 1cc             | 
2e29c 1cc             | ' LUT RAM address values
2e29c 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
2e2a0 1cd DD 02 00 00 | continue_read   long    continue_read_lut
2e2a4 1ce DB 02 00 00 | continue_write  long    continue_write_lut
2e2a8 1cf F6 02 00 00 | noread          long    noread_lut
2e2ac 1d0             | 
2e2ac 1d0 00 00 00 00 | id0             long    0
2e2b0 1d1 01 00 00 00 | id1             long    1
2e2b4 1d2 02 00 00 00 | id2             long    2
2e2b8 1d3 03 00 00 00 | id3             long    3
2e2bc 1d4 04 00 00 00 | id4             long    4
2e2c0 1d5 05 00 00 00 | id5             long    5
2e2c4 1d6 06 00 00 00 | id6             long    6
2e2c8 1d7 07 00 00 00 | id7             long    7
2e2cc 1d8             | 
2e2cc 1d8             | 'These next 10 request registers below are also temporarily reused during init 
2e2cc 1d8             | 'and COG updates and need to follow immediately after id0-id7
2e2cc 1d8 00 00 00 00 | addr1           long    0
2e2d0 1d9 00 00 00 00 | hubdata         long    0
2e2d4 1da 00 00 00 00 | count           long    0
2e2d8 1db 00 00 00 00 | addr2           long    0
2e2dc 1dc 00 00 00 00 | total           long    0
2e2e0 1dd 00 00 00 00 | offset1         long    0
2e2e4 1de 00 00 00 00 | offset2         long    0
2e2e8 1df 00 00 00 00 | link            long    0
2e2ec 1e0             | 
2e2ec 1e0             | burstwrite                                      'note shared register use during init
2e2ec 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
2e2f0 1e1 00 00 00 00 | id              long    0
2e2f4 1e2             | 
2e2f4 1e2 00 00 00 00 | header          long    0
2e2f8 1e3 00 00 00 00 | trailer         long    0
2e2fc 1e4 00 00 00 00 | cmdaddr         long    0
2e300 1e5 00 00 00 00 | request         long    0
2e304 1e6 00 00 00 00 | rrlimit         long    0
2e308 1e7 00 00 00 00 | pinconfig       long    0
2e30c 1e8 00 00 00 00 | clks            long    0
2e310 1e9 00 00 00 00 | resume          long    0
2e314 1ea 00 00 00 00 | orighubsize     long    0
2e318 1eb 00 00 00 00 | wrclks          long    0
2e31c 1ec             | 
2e31c 1ec 00 00 00 00 | pattern         long    0
2e320 1ed 00 00 00 00 | hubscratch      long    0
2e324 1ee 00 10 00 00 | val4k           long    4096
2e328 1ef             | 
2e328 1ef             | ' temporary general purpose regs
2e328 1ef 00 00 00 00 | a               long    0
2e32c 1f0 00 00 00 00 | b               long    0
2e330 1f1 00 00 00 00 | c               long    0
2e334 1f2 00 00 00 00 | d               long    0
2e338 1f3             |                 fit     502
2e338 1f3             | 
2e338 1f3             |                 fit     502
2e338 1f3             | 
2e338 1f3             | '..................................................................................................
2e338 1f3             | 
2e338 1f3             |             orgh
2e338                 | 
2e338                 | lut_code
2e338                 | 'HW init code up to 80 longs
2e338                 | 
2e338                 | '..................................................................................................
2e338                 | ' Memory layout for LUT RAM once operational:
2e338                 | '
2e338                 | '  LUT RAM address      Usage
2e338                 | '  ---------------      ----
2e338                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
2e338                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
2e338                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
2e338                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
2e338                 | '
2e338                 | ' Also during driver COG startup:
2e338                 | ' $230-$24F is used for HW init setup
2e338                 | ' $250-$26F is used as temporary vector storage 
2e338                 | '..................................................................................................
2e338                 | 
2e338                 |                 org $230    
2e338 230             | 
2e338 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
2e338 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
2e33c 231 24 16 60 FD |                             pollxfi
2e340 232 FF AA 2A FF 
2e344 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
2e348 234 28 00 B0 FD |                             call    #sendqspi
2e34c 235 07 F8 07 FF 
2e350 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
2e354 237 28 00 B0 FD |                             call    #sendspi
2e358 238 F8 07 78 FF 
2e35c 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
2e360 23a 1C 00 B0 FD |                             call    #sendspi
2e364 23b 7F 78 78 FF 
2e368 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
2e36c 23d 10 00 B0 FD |                             call    #sendspi 
2e370 23e 2D 00 64 FD |                             ret
2e374 23f             | 
2e374 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
2e378 240 32 0C 64 FD |                             skipf   #%110
2e37c 241 9C EF 03 F6 |                             mov     pb, xsendimm
2e380 242             | 
2e380 242 10 D0 07 F6 | sendspi                     mov     clks, #16
2e384 243 97 EF 03 F6 |                             mov     pb, ximm8lut
2e388 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
2e38c 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2e390 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
2e394 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
2e398 248 24 36 60 FD |                             waitxfi                         'wait for the completion
2e39c 249 50 48 63 FD |                             fltl    datapins                'float data bus
2e3a0 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
2e3a4 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
2e3a8 24c             | 
2e3a8 24c 00 00 00 00 
2e3ac 24d 00 00 00 00 
2e3b0 24e 00 00 00 00 
2e3b4 24f 00 00 00 00 |                 long    0[$270-32-$]
2e3b8 250             |                 fit     $270-32  ' keep room for 32 vector longs
2e3b8 250             |     
2e3b8 250             |                 fit     $270-32  ' keep room for 32 vector longs
2e3b8 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
2e3b8 250             | rw_vect ' PSRAM jump vectors
2e3b8 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2e3bc 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2e3c0 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2e3c4 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2e3c8 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
2e3cc 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
2e3d0 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
2e3d4 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
2e3d8 258             | ro_vect ' R/O PSRAM jump vectors
2e3d8 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2e3dc 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2e3e0 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2e3e4 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2e3e8 25c 00 01 00 00 |                 long    unsupported
2e3ec 25d 00 01 00 00 |                 long    unsupported
2e3f0 25e 00 01 00 00 |                 long    unsupported
2e3f4 25f 00 01 00 00 |                 long    unsupported
2e3f8 260             | ctrl_vect ' Control jump vectors
2e3f8 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
2e3fc 261 00 01 00 00 |                 long    unsupported
2e400 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
2e404 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
2e408 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
2e40c 265 00 01 00 00 |                 long    unsupported
2e410 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
2e414 267 3E 01 00 00 |                 long    reconfig 
2e418 268             | no_vect ' Invalid bank jump vectors
2e418 268 01 01 00 00 |                 long    invalidbank
2e41c 269 01 01 00 00 |                 long    invalidbank
2e420 26a 01 01 00 00 |                 long    invalidbank
2e424 26b 01 01 00 00 |                 long    invalidbank
2e428 26c 01 01 00 00 |                 long    invalidbank
2e42c 26d 01 01 00 00 |                 long    invalidbank
2e430 26e 01 01 00 00 |                 long    invalidbank
2e434 26f 01 01 00 00 |                 long    invalidbank
2e438 270             |                 fit     $270
2e438 270             | 
2e438 270             |                 fit     $270
2e438 270             | '..................................................................................................
2e438 270             | ' PSRAM READS
2e438 270             |                                                             ' a b c d e f
2e438 270             |                                                             ' B W L B R L  (a) byte read
2e438 270             |                                                             ' Y O O U E O  (b) word read
2e438 270             |                                                             ' T R N R S C  (c) long read
2e438 270             |                                                             ' E D G S U K  (d) new burst read
2e438 270             |                                                             '       T M E  (e) resumed sub-burst
2e438 270             |                                                             '         E D  (f) locked sub-burst
2e438 270             | 
2e438 270             | 
2e438 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
2e43c 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
2e440 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
2e444 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
2e448 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
2e44c 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
2e450 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
2e454 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
2e458 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
2e45c 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
2e460 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
2e464 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
2e468 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
2e46c 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
2e470 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
2e474 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
2e478 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
2e47c 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
2e480 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
2e484 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
2e488 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
2e48c 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
2e490 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
2e494 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
2e498 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
2e49c 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
2e4a0 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
2e4a4 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
2e4a8 28c             | 
2e4a8 28c             |                             ' fall through to read bursts
2e4a8 28c             |                         
2e4a8 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
2e4a8 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
2e4ac 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2e4b0 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2e4b4 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2e4b8 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
2e4bc 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
2e4c0 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
2e4c4 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
2e4c8 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
2e4cc 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
2e4d0 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
2e4d4 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
2e4d8 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
2e4dc 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
2e4e0 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
2e4e4 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
2e4e8 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
2e4ec 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
2e4f0 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
2e4f4 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
2e4f8 2a0 E8 D1 03 F1 |                             add     clks, clks
2e4fc 2a1             | readcommon
2e4fc 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
2e500 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2e504 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
2e508 2a4             | 
2e508 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2e50c 2a5 69 C8 63 FD |                             rev     cmdaddr
2e510 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2e514 2a7 61 C8 63 FD |                             mergeb  cmdaddr
2e518 2a8             | 
2e518 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
2e51c 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
2e520 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
2e520 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
2e524 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
2e528 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
2e52c 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
2e530 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
2e530 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
2e534 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
2e538 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
2e53c 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
2e540 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
2e544 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
2e548 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
2e548 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
2e54c 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
2e550 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
2e554 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
2e558 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
2e55c 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
2e560 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
2e564 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
2e568 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
2e56c 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
2e570 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
2e574 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
2e578 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
2e57c 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
2e580 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
2e580 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
2e584 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
2e588 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
2e58c 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
2e590 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
2e594 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
2e598 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
2e59c 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
2e5a0 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
2e5a4 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
2e5a8 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
2e5ac 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
2e5b0 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
2e5b4 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
2e5b8 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
2e5bc 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
2e5c0 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
2e5c4 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
2e5c8 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
2e5cc 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
2e5d0 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
2e5d4 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
2e5d8 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
2e5dc 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
2e5e0 2da 10 03 90 FD |                             jmp     #writecommon
2e5e4 2db             | 
2e5e4 2db             | '..................................................................................................
2e5e4 2db             | ' Burst continuation testing
2e5e4 2db             | 
2e5e4 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
2e5e8 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
2e5ec 2dd             | continue_read_lut          
2e5ec 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
2e5f0 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
2e5f4 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
2e5f8 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
2e5fc 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
2e600 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
2e604 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
2e608 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
2e60c 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
2e610 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
2e614 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
2e618 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
2e61c 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
2e620 2ea             | 
2e620 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
2e624 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
2e628 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
2e62c 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
2e630 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
2e634 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
2e638 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
2e63c 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
2e640 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
2e644 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
2e648 2f4 2A 1C 66 0D |             _ret_           push    #poller
2e64c 2f5             | 
2e64c 2f5             | 
2e64c 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
2e650 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
2e650 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
2e654 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
2e658 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
2e65c 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
2e660 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
2e664 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
2e668 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
2e66c 2fd 2D 00 64 FD |                             ret                             ' | continue processing
2e670 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
2e674 2ff             | '..................................................................................................
2e674 2ff             | ' Completion of requests
2e674 2ff             | 
2e674 2ff             | complete_rw_lut             
2e674 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
2e678 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
2e67c 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
2e680 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
2e684 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
2e688 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
2e68c 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
2e690 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
2e694 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
2e698 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
2e69c 309 32 62 64 AD |             if_z            skipf   #%110001
2e6a0 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
2e6a4 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
2e6a8 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
2e6ac 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
2e6b0 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
2e6b4 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
2e6b8 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
2e6bc 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
2e6c0 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
2e6c4 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
2e6c8 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
2e6cc 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
2e6d0 316             |                                                             ' skipcase (a) gfx copy to/from hub
2e6d0 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
2e6d0 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
2e6d0 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
2e6d4 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
2e6d8 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
2e6dc 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
2e6e0 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
2e6e4 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
2e6e8 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
2e6ec 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
2e6f0 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
2e6f4 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
2e6f8 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
2e6fc 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
2e700 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
2e704 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
2e708 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
2e70c 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
2e710 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
2e714 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
2e718 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
2e71c 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
2e720 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
2e724 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
2e728 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
2e72c 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
2e730 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
2e734 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
2e738 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
2e73c 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
2e740 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
2e744 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
2e748 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
2e74c 335 DF B7 03 A6 |             if_z            mov     addr2, link
2e750 336 34 FF 9F AD |             if_z            jmp     #checknext
2e754 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
2e758 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2e75c 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
2e760 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
2e764 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
2e768 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
2e76c 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
2e770 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
2e774 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
2e778 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
2e77c 341             | 
2e77c 341             | '..................................................................................................
2e77c 341             | ' PSRAM WRITES
2e77c 341             |                                                             '  a b c d e f g h
2e77c 341             | 
2e77c 341             |                                                             '  B W L F B R L L (a) byte write(s)
2e77c 341             |                                                             '  Y O O I U E O O (b) word write(s)
2e77c 341             |                                                             '  T R N L R S C C (c) long write(s)
2e77c 341             |                                                             '  E D G L S U K K (d) resumed fill
2e77c 341             |                                                             '          T M E E (e) new burst write
2e77c 341             |                                                             '            E D D (f) resumed burst
2e77c 341             |                                                             '              F B (g) locked fill
2e77c 341             |                                                             '              I U (h) locked burst write
2e77c 341             |                                                             '              L R 
2e77c 341             |                                                             '              L S 
2e77c 341             |                                                             '                T 
2e77c 341             | 
2e77c 341             | w_single                   
2e77c 341             | w_fill_cont           
2e77c 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
2e780 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
2e784 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
2e788 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
2e78c 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
2e790 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
2e794 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
2e798 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
2e79c 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
2e7a0 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
2e7a4 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
2e7a8 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
2e7ac 34d             |                ' disable call to r_resume_burst for single longs when z=0
2e7ac 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
2e7b0 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
2e7b4 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
2e7b8 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
2e7bc 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
2e7c0 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
2e7c4 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
2e7c8 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
2e7cc 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
2e7d0 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
2e7d4 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
2e7d8 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
2e7dc 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
2e7e0 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
2e7e4 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
2e7e8 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
2e7ec 35d             |         
2e7ec 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
2e7ec 35d             |             '
2e7ec 35d             |             '  At least one of these 3 optional components will be sent
2e7ec 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
2e7ec 35d             |             '     body - N x full longs of data
2e7ec 35d             |             '     trailer - last partial long of data
2e7ec 35d             |             '
2e7ec 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
2e7ec 35d             |             '
2e7ec 35d             |             'Case    Type                           Sends
2e7ec 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
2e7ec 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
2e7ec 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
2e7ec 35d             |             ' 4)     Multiple long fill             body only
2e7ec 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
2e7ec 35d             | 
2e7ec 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
2e7ec 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
2e7f0 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2e7f4 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2e7f8 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2e7fc 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
2e800 362 13 8C 07 F6 |                             mov     pattern3, #%10011
2e804 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
2e808 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
2e80c 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
2e810 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
2e814 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
2e818 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
2e81c 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
2e820 36a             |                             
2e820 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2e824 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
2e828 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
2e82c 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
2e830 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
2e834 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
2e838 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
2e83c 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
2e840 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
2e844 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
2e848 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
2e84c 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
2e850 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
2e854 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
2e858 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
2e85c 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
2e860 37a             | 
2e860 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2e864 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
2e868 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
2e86c 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
2e870 37e             |                  
2e870 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
2e874 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
2e878 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
2e87c 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
2e880 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
2e884 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
2e888 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
2e88c 385             | 
2e88c 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
2e890 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
2e894 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
2e898 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
2e89c 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
2e8a0 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
2e8a4 38b             | 
2e8a4 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
2e8a4 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
2e8a8 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
2e8ac 38d 2A B0 63 FD |                             push    addr1                   'save address
2e8b0 38e             | 
2e8b0 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
2e8b0 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
2e8b4 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
2e8b8 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
2e8bc 391             |             
2e8bc 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
2e8c0 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
2e8c4 393 2B B0 63 FD |                             pop     addr1                   'restore address
2e8c8 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
2e8cc 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
2e8d0 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
2e8d4 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
2e8d8 398             | 
2e8d8 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
2e8dc 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
2e8e0 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
2e8e4 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
2e8e8 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
2e8ec 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
2e8f0 39e             | 
2e8f0 39e             |                             'trailer is done
2e8f0 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
2e8f4 39f             | 
2e8f4 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
2e8f8 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2e8fc 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
2e900 3a2             | 
2e900 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2e904 3a3 69 C8 63 FD |                             rev     cmdaddr                 
2e908 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2e90c 3a5 61 C8 63 FD |                             mergeb  cmdaddr
2e910 3a6             |                             
2e910 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
2e914 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2e918 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
2e91c 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
2e920 3aa             |                                                          
2e920 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
2e924 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
2e928 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
2e92c 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
2e930 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
2e934 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
2e938 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
2e93c 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
2e940 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
2e944 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
2e948 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
2e94c 3b5             |  
2e94c 3b5 59 52 63 FD |                             drvh    cspin
2e950 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
2e954 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
2e958 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
2e95c 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
2e960 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
2e964 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
2e968 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
2e96c 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
2e970 3be EA E5 03 F6 |                             mov     d, orighubsize
2e974 3bf EF E5 63 F0 |                             shl     d, a
2e978 3c0 F2 E3 83 F1 |                             sub     c, d
2e97c 3c1 DD E3 03 F1 |                             add     c, offset1
2e980 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
2e984 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
2e988 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
2e98c 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
2e990 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
2e994 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
2e998 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
2e99c 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2e9a0 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
2e9a4 3cb BB D3 03 F6 |                             mov     resume, restorefill
2e9a8 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
2e9ac 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
2e9b0 3ce 6C FC BF CD |             if_c            call    #yield
2e9b4 3cf 2D 00 64 FD |                             ret
2e9b8 3d0             |                            
2e9b8 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
2e9b8 3d0             |                       '     rczl    pa                      'rotate left into address offset
2e9b8 3d0             |                       '     rczl    c wcz                   'restore count and flags
2e9b8 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
2e9bc 3d1 02 EC 67 F0 |                             shl     pa, #2
2e9c0 3d2 28 06 64 AD |             if_z            setq    #3
2e9c4 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
2e9c8 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
2e9cc 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
2e9d0 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
2e9d4 3d7             | 
2e9d4 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
2e9d8 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
2e9dc 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
2e9e0 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
2e9e4 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
2e9e8 3dc             |                 fit 1024-32
2e9e8 3dc             |         
2e9e8 3dc             | 
2e9e8 3dc             | '..................................................................................................
2e9e8 3dc             | 
2e9e8 3dc             |                 fit 1024-32
2e9e8 3dc 00 00 00 00 
2e9ec 3dd 00 00 00 00 
2e9f0 3de 00 00 00 00 
2e9f4 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
2e9f8 3e0             |                 org 1024-32
2e9f8 000             | 
2e9f8 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
2e9f8 000 00 00 00 00 |                 long $0000
2e9fc 001 11 11 00 00 |                 long $1111
2ea00 002 22 22 00 00 |                 long $2222
2ea04 003 33 33 00 00 |                 long $3333
2ea08 004 44 44 00 00 |                 long $4444
2ea0c 005 55 55 00 00 |                 long $5555
2ea10 006 66 66 00 00 |                 long $6666
2ea14 007 77 77 00 00 |                 long $7777
2ea18 008 88 88 00 00 |                 long $8888
2ea1c 009 99 99 00 00 |                 long $9999
2ea20 00a AA AA 00 00 |                 long $aaaa
2ea24 00b BB BB 00 00 |                 long $bbbb
2ea28 00c CC CC 00 00 |                 long $cccc
2ea2c 00d DD DD 00 00 |                 long $dddd
2ea30 00e EE EE 00 00 |                 long $eeee
2ea34 00f FF FF 00 00 |                 long $ffff
2ea38 010             | 
2ea38 010             | 'masks
2ea38 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
2ea3c 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
2ea40 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
2ea44 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
2ea48 014             | 
2ea48 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
2ea4c 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
2ea50 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
2ea54 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
2ea58 018             | 
2ea58 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
2ea5c 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
2ea60 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
2ea64 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
2ea68 01c             | 
2ea68 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
2ea6c 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
2ea70 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
2ea74 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
2ea78 020             |         fit 1024
2ea78 020             | 
2ea78 020             |         fit 1024
2ea78 020             | 
2ea78 020             | '--------------------------------------------------------------------------------------------------
2ea78 020             |         orgh
2ea78                 | 
2ea78                 | gfxexpansion
2ea78                 |                             'simple line drawing graphics expansion of memory driver
2ea78                 |                             'jmp     #donerepeats                'just return for now
2ea78                 | 
2ea78     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
2ea7c     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
2ea80     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
2ea84     DD E1 03 F6 |                             mov     b, offset1              'get error term
2ea88     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
2ea8c     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
2ea90     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
2ea94     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
2ea98     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
2ea9c     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
2eaa0     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
2eaa4     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
2eaa8     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
2eaac     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
2eab0     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
2eab4     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
2eab8     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
2eabc     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
2eac0     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
2eac4     DC E5 33 F9 |                             getword d, total, #0            'get line width
2eac8     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
2eacc     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
2ead0     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
2ead4     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
2ead8     C3 03 80 FD |                             jmp     #readmask               'continue filling
2eadc                 | 	alignl
2eadc                 | _usbnew_spin2_dat_
2eadc                 |                 org     $000
2eadc 000             | 
2eadc 000             | usb_host_start
2eadc 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
2eae0 001             | 
2eae0 001 03 00 00 FF 
2eae4 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
2eae8 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
2eaec 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
2eaf0 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
2eaf4 006 29 70 63 FD |                 setq2   htmp
2eaf8 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
2eafc 008             | 
2eafc 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
2eb00 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
2eb04 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
2eb08 00b             | 
2eb08 00b             | '------------------------------------------------------------------------------
2eb08 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
2eb08 00b             | ' special because the receiving function must not respond with either STALL or
2eb08 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
2eb08 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
2eb08 00b             | ' corrupt packet, it must ignore the transaction
2eb08 00b             | '------------------------------------------------------------------------------
2eb08 00b             | ' On entry:
2eb08 00b             | '   PTRA - start address of the SETUP data struct.
2eb08 00b             | ' On exit:
2eb08 00b             | '   retval - PID_ACK on success, otherwise error code.
2eb08 00b             | '------------------------------------------------------------------------------
2eb08 00b             | txn_setup
2eb08 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
2eb0c 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
2eb10 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
2eb14 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
2eb18 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
2eb1c 010             | .setup
2eb1c 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
2eb20 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2eb24 012 2D 00 64 AD |         if_z    ret
2eb28 013 7C 0B B0 FD |                 call    #retry_wait
2eb2c 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2eb30 015 2D 00 64 AD |         if_z    ret
2eb34 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
2eb38 017 E0 FF 9F FD |                 jmp     #.setup
2eb3c 018             | 
2eb3c 018             | '------------------------------------------------------------------------------
2eb3c 018             | ' IN/INTERRUPT transaction.
2eb3c 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
2eb3c 018             | '------------------------------------------------------------------------------
2eb3c 018             | ' On entry:
2eb3c 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
2eb3c 018             | '     CRC(b19..23).
2eb3c 018             | ' On exit:
2eb3c 018             | '------------------------------------------------------------------------------
2eb3c 018             | txn_in
2eb3c 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2eb40 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
2eb44 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
2eb48 01b             | 
2eb48 01b             |                 ' Fall through to urx_packet
2eb48 01b             | 
2eb48 01b             | '------------------------------------------------------------------------------
2eb48 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
2eb48 01b             | ' received are handshakes and IN DATAx.
2eb48 01b             | '------------------------------------------------------------------------------
2eb48 01b             | ' On entry:
2eb48 01b             | ' On exit:
2eb48 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
2eb48 01b             | '     returned.
2eb48 01b             | '------------------------------------------------------------------------------
2eb48 01b             | urx_packet
2eb48 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
2eb4c 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2eb50 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
2eb54 01e 1A 92 63 FD |                 getct   hct2
2eb58 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
2eb5c 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
2eb60 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
2eb64 022             | .wait_sop
2eb64 022 22 A7 8A FA |                 rdpin   urx, dm
2eb68 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2eb6c 024 08 00 90 CD |         if_c    jmp     #.get_pid
2eb70 025 FC 25 CC FB |                 jnct2   #.wait_sop
2eb74 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
2eb78 027             | .get_pid
2eb78 027 28 02 B0 FD |                 call    #urx_next
2eb7c 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
2eb80 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
2eb84 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
2eb88 02b             | .chk_pid
2eb88 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2eb8c 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
2eb90 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
2eb94 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
2eb98 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
2eb9c 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
2eba0 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
2eba4 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
2eba8 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
2ebac 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
2ebb0 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
2ebb4 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
2ebb8 037             | .ack_resend
2ebb8 037 22 A7 82 FA |                 rqpin   urx, dm
2ebbc 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2ebc0 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
2ebc4 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
2ebc8 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
2ebcc 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
2ebd0 03d             | .chk_eop
2ebd0 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2ebd4 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
2ebd8 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
2ebdc 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
2ebe0 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
2ebe4 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2ebe8 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
2ebec 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
2ebf0 045 2D 00 64 FD |                 ret
2ebf4 046             | .idle
2ebf4 046 22 A7 82 FA |                 rqpin   urx, dm
2ebf8 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2ebfc 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
2ec00 049 2D 00 64 FD |                 ret
2ec04 04a             | 
2ec04 04a             | '------------------------------------------------------------------------------
2ec04 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
2ec04 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
2ec04 04a             | ' if one is required.
2ec04 04a             | '------------------------------------------------------------------------------
2ec04 04a             | ' On entry:
2ec04 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
2ec04 04a             | ' On exit:
2ec04 04a             | '------------------------------------------------------------------------------
2ec04 04a             | utx_token
2ec04 04a 22 A7 82 FA |                 rqpin   urx, dm
2ec08 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2ec0c 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
2ec10 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2ec14 04e 34 0D B0 CD |         if_c    call    #utx_pre
2ec18 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2ec1c 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
2ec20 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
2ec24 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
2ec28 053             | .next_byte
2ec28 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
2ec2c 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
2ec30 055             | .wait
2ec30 055 40 46 72 FD |                 testp   dp                      wc
2ec34 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
2ec38 057 23 03 08 FC |                 akpin   dp
2ec3c 058 22 A5 22 FC |                 wypin   utx, dm
2ec40 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
2ec44 05a             | 
2ec44 05a             | '------------------------------------------------------------------------------
2ec44 05a             | ' SETUP/OUT/INTERRUPT transaction.
2ec44 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
2ec44 05a             | '------------------------------------------------------------------------------
2ec44 05a             | ' On entry:
2ec44 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
2ec44 05a             | '     CRC(b19..23).
2ec44 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
2ec44 05a             | '   pkt_data - count of DATAx payload bytes to send.
2ec44 05a             | ' On exit:
2ec44 05a             | '------------------------------------------------------------------------------
2ec44 05a             | txn_out
2ec44 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2ec48 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
2ec4c 05c 00 00 C0 FF 
2ec50 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
2ec54 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
2ec58 05f             | 
2ec58 05f             |                 ' Fall through to utx_data
2ec58 05f             | 
2ec58 05f             | '------------------------------------------------------------------------------
2ec58 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
2ec58 05f             | ' calculated while the data byte is being shifted out. Since data stage
2ec58 05f             | ' success/fail is not determined until the status stage of the transaction,
2ec58 05f             | ' this routine is only concerned about the current DATAx packet.
2ec58 05f             | '------------------------------------------------------------------------------
2ec58 05f             | ' On entry:
2ec58 05f             | '   PTRA - hub start address of the data to read.
2ec58 05f             | '   pkt_cnt - data payload size.
2ec58 05f             | ' On exit:
2ec58 05f             | '------------------------------------------------------------------------------
2ec58 05f             | utx_data
2ec58 05f 22 A7 82 FA |                 rqpin   urx, dm
2ec5c 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2ec60 061 F4 FF 9F CD |         if_c    jmp     #utx_data
2ec64 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
2ec68 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
2ec6c 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2ec70 065 D8 0C B0 CD |         if_c    call    #utx_pre
2ec74 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2ec78 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
2ec7c 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2ec80 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
2ec84 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
2ec88 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
2ec8c 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
2ec90 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
2ec94 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
2ec98 06f             | .read_byte
2ec98 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
2ec9c 070 F0 00 B0 FD |                 call    #utx_byte
2eca0 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
2eca4 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
2eca8 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2ecac 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2ecb0 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
2ecb4 076             | .send_crc
2ecb4 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
2ecb8 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
2ecbc 078 D0 00 B0 FD |                 call    #utx_byte
2ecc0 079 5D A5 EA F8 |                 getbyte utx, crc, #1
2ecc4 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
2ecc8 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
2eccc 07c             | 
2eccc 07c             | '------------------------------------------------------------------------------
2eccc 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
2eccc 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
2eccc 07c             | ' expects that the packet includes at least the CRC word.
2eccc 07c             | '
2eccc 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
2eccc 07c             | ' was requested, which makes it difficult to determine where the data stops
2eccc 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
2eccc 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
2eccc 07c             | ' USB-16 expected residual value of 0xB001.
2eccc 07c             | '
2eccc 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
2eccc 07c             | ' so the caller can verify IN success before writing the data to its final
2eccc 07c             | ' destination.
2eccc 07c             | '------------------------------------------------------------------------------
2eccc 07c             | ' On entry:
2eccc 07c             | '   pkt_data - max byte count expected to be in the packet.
2eccc 07c             | '   newb_flg - signals new byte ready when toggled.
2eccc 07c             | ' On exit:
2eccc 07c             | '   pkt_cnt - actual number of bytes read.
2eccc 07c             | '------------------------------------------------------------------------------
2eccc 07c             | urx_data
2eccc 07c F7 75 03 F6 |                 mov     htmp2, pb
2ecd0 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
2ecd4 07e 00 00 C0 FF 
2ecd8 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
2ecdc 080 BA EF 03 F6 |                 mov     pb, htmp2
2ece0 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2ece4 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
2ece8 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
2ecec 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
2ecf0 085             | .wait_byte
2ecf0 085             | ' In-line rx for max speed
2ecf0 085 22 A7 82 FA |                 rqpin   urx, dm
2ecf4 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2ecf8 087 53 A5 02 F5 |                 and     utx, urx
2ecfc 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2ed00 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2ed04 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
2ed08 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2ed0c 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
2ed10 08d DC FF 9F FD |                 jmp     #.wait_byte
2ed14 08e             | .get_byte
2ed14 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
2ed18 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
2ed1c 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
2ed20 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
2ed24 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2ed28 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2ed2c 094             | .end_crc
2ed2c 094 01 B8 06 F1 |                 add     pkt_cnt, #1
2ed30 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
2ed34 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
2ed38 097 2D 00 64 1D |         if_a    ret
2ed3c 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
2ed3c 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
2ed3c 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
2ed3c 098             | ' to miss it, so cheat a bit and look for SOP clear here.
2ed3c 098 22 A7 82 FA |                 rqpin   urx, dm
2ed40 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
2ed44 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
2ed48 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
2ed48 09b             | .chk_crc
2ed48 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
2ed4c 09c 58 00 00 FF 
2ed50 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
2ed54 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
2ed58 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
2ed5c 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
2ed60 0a1 34 09 B0 FD |                 call    #poll_waitx
2ed64 0a2             | 
2ed64 0a2             |                 ' Fall through to utx_handshake
2ed64 0a2             | 
2ed64 0a2             | '------------------------------------------------------------------------------
2ed64 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
2ed64 0a2             | ' the appropriate IP delay has been inserted.
2ed64 0a2             | '------------------------------------------------------------------------------
2ed64 0a2             | ' On entry:
2ed64 0a2             | '   retval - handshake PID to send.
2ed64 0a2             | ' On exit:
2ed64 0a2             | '   retval unchanged.
2ed64 0a2             | '------------------------------------------------------------------------------
2ed64 0a2             | utx_handshake
2ed64 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2ed68 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
2ed6c 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2ed70 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
2ed74 0a6 5F A5 02 F6 |                 mov     utx, retval
2ed78 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
2ed7c 0a8             | .idle
2ed7c 0a8 22 A7 82 FA |                 rqpin   urx, dm
2ed80 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2ed84 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
2ed88 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
2ed8c 0ac 08 09 90 FD |                 jmp     #poll_waitx
2ed90 0ad             | 
2ed90 0ad             | '------------------------------------------------------------------------------
2ed90 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
2ed90 0ad             | '------------------------------------------------------------------------------
2ed90 0ad             | ' On entry:
2ed90 0ad             | '   utx - byte to transmit.
2ed90 0ad             | ' On exit:
2ed90 0ad             | '------------------------------------------------------------------------------
2ed90 0ad             | utx_byte
2ed90 0ad 40 46 72 FD |                 testp   dp                      wc
2ed94 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
2ed98 0af 23 03 08 FC |                 akpin   dp
2ed9c 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
2eda0 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
2eda4 0b2             | 
2eda4 0b2             | '------------------------------------------------------------------------------
2eda4 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
2eda4 0b2             | '------------------------------------------------------------------------------
2eda4 0b2             | ' On entry:
2eda4 0b2             | ' On exit:
2eda4 0b2             | '   retval - the byte read.
2eda4 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
2eda4 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
2eda4 0b2             | '     received.
2eda4 0b2             | '------------------------------------------------------------------------------
2eda4 0b2             | urx_next
2eda4 0b2 22 A7 8A FA |                 rdpin   urx, dm
2eda8 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2edac 0b4 53 A5 02 F5 |                 and     utx, urx
2edb0 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2edb4 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2edb8 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
2edbc 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
2edc0 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2edc4 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2edc8 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
2edcc 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
2edd0 0bd 2D 00 64 FD |                 ret
2edd4 0be             | 
2edd4 0be             | '------------------------------------------------------------------------------
2edd4 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
2edd4 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
2edd4 0be             | ' length, and the PID is not included in the CRC calculation:
2edd4 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
2edd4 0be             | '  CRC5  ENDP ADDRESS PID
2edd4 0be             | ' %00000_1111_1111111_xxxxxxxx
2edd4 0be             | '------------------------------------------------------------------------------
2edd4 0be             | ' On entry:
2edd4 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
2edd4 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
2edd4 0be             | ' On exit:
2edd4 0be             | '   ep_addr_pid - CRC value appended to the packet.
2edd4 0be             | '------------------------------------------------------------------------------
2edd4 0be             | calc_crc5
2edd4 0be FF 03 00 FF 
2edd8 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
2eddc 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
2ede0 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
2ede4 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
2ede8 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
2edec 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
2edf0 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
2edf4 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
2edf8 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
2edfc 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
2ee00 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
2ee04 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2ee08 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
2ee0c 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2ee10 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
2ee14 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
2ee18 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
2ee1c 0d0             | 
2ee1c 0d0             | '------------------------------------------------------------------------------
2ee1c 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
2ee1c 0d0             | '------------------------------------------------------------------------------
2ee1c 0d0             | isr1_fsframe
2ee1c 0d0 1A 92 62 FD |                 getct   iframe_ct_base
2ee20 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2ee24 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2ee28 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2ee2c 0d4             | .wait
2ee2c 0d4 40 46 72 FD |                 testp   dp                      wc
2ee30 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
2ee34 0d6 23 03 08 FC |                 akpin   dp
2ee38 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2ee3c 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
2ee40 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
2ee44 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
2ee48 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
2ee4c 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
2ee50 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
2ee54 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
2ee58 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
2ee5c 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
2ee60 0e1 2C FF BF FD |                 call    #utx_byte
2ee64 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
2ee68 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
2ee6c 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
2ee70 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
2ee74 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
2ee78 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
2ee7c 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
2ee80 0e9 5B A5 42 F5 |                 or      utx, icrc
2ee84 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
2ee88 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
2ee8c 0ec 20 00 90 FD |                 jmp     #isr1_wait
2ee90 0ed             | isr1_lsframe
2ee90 0ed 1A 92 62 FD |                 getct   iframe_ct_base
2ee94 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2ee98 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2ee9c 0f0             | .wait
2ee9c 0f0 40 46 72 FD |                 testp   dp                      wc
2eea0 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
2eea4 0f2 23 03 08 FC |                 akpin   dp
2eea8 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
2eeac 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
2eeb0 0f5             | isr1_wait
2eeb0 0f5 22 A5 82 FA |                 rqpin   utx, dm
2eeb4 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
2eeb8 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
2eebc 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
2eec0 0f9 03 00 00 FF 
2eec4 0fa FF B3 06 F5 |                 and     frame, ##$7ff
2eec8 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
2eecc 0fc F5 FF 3B FB |                 reti1
2eed0 0fd             | 
2eed0 0fd             | '------------------------------------------------------------------------------
2eed0 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
2eed0 0fd             | ' transaction will complete before the next frame is triggered.
2eed0 0fd             | '------------------------------------------------------------------------------
2eed0 0fd             | ' On entry:
2eed0 0fd             | ' On exit:
2eed0 0fd             | '------------------------------------------------------------------------------
2eed0 0fd             | wait_txn_ok
2eed0 0fd 1A 74 63 FD |                 getct   htmp2
2eed4 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
2eed8 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2eedc 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
2eee0 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
2eee4 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
2eee8 103 2D 00 64 FD |                 ret
2eeec 104             | 
2eeec 104             | '------------------------------------------------------------------------------
2eeec 104             | ' A device connection was detected, or a bus reset was requested by the USB
2eeec 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
2eeec 104             | ' and perform a reset sequence prior to device enumeration.
2eeec 104             | '------------------------------------------------------------------------------
2eeec 104             | dev_reset
2eeec 104 22 A7 82 FA |                 rqpin   urx, dm
2eef0 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
2eef4 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
2eef8 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2eefc 108             | reset
2eefc 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
2ef00 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
2ef04 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
2ef08 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2ef0c 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
2ef10 10d 1A 92 62 FD |                 getct   iframe_ct_base
2ef14 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2ef18 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2ef1c 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
2ef20 111 24 70 07 F1 |                 add     htmp, #36
2ef24 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
2ef28 113             | .framewait
2ef28 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2ef2c 114 F8 FF 9F CD |         if_b    jmp     #.framewait
2ef30 115 2D 00 64 FD |                 ret
2ef34 116             | 
2ef34 116             | '------------------------------------------------------------------------------
2ef34 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
2ef34 116             | '------------------------------------------------------------------------------
2ef34 116             | ' On entry:
2ef34 116             | '   PTRA - source address.
2ef34 116             | '   PB - destination address.
2ef34 116             | '   hr0 - length of copy, in bytes.
2ef34 116             | ' On exit:
2ef34 116             | '------------------------------------------------------------------------------
2ef34 116             | hmemcpy
2ef34 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
2ef38 117 F7 71 43 FC |                 wrbyte  htmp, pb
2ef3c 118 01 EE 07 F1 |                 add     pb, #1
2ef40 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
2ef44 11a             | 
2ef44 11a             | '------------------------------------------------------------------------------
2ef44 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
2ef44 11a             | ' loop until the errant device is disconnected.
2ef44 11a             | '------------------------------------------------------------------------------
2ef44 11a             | ' On entry:
2ef44 11a             | ' On exit:
2ef44 11a             | '------------------------------------------------------------------------------
2ef44 11a             | host_error
2ef44 11a             |           if ERROR_LED >= 0
2ef44 11a             |           end
2ef44 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
2ef48 11b             | 
2ef48 11b             | '------------------------------------------------------------------------------
2ef48 11b             | ' Get HID descriptor buffer for current port
2ef48 11b             | '------------------------------------------------------------------------------
2ef48 11b             | ' On entry:
2ef48 11b             | ' On exit:
2ef48 11b             | '   PB - HID descriptor buffer pointer
2ef48 11b             | '------------------------------------------------------------------------------
2ef48 11b             | get_hid_descr_buffer
2ef48 11b 2D EF 03 F6 |                 mov     pb, hdev_port
2ef4c 11c 01 EE E7 F2 |                 cmpsub  pb, #1
2ef50 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
2ef54 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
2ef58 11f             | 
2ef58 11f             | 
2ef58 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
2ef5c 120             | 
2ef5c 120             | ' USB commands and error codes
2ef5c 120 00 00 00 00 | cmd_data        long    0
2ef60 121 00 00 00 00 | usb_err_code    long    ERR_NONE
2ef64 122             | 
2ef64 122             | ' Parameters block assigned at cog startup
2ef64 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
2ef68 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
2ef6c 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
2ef70 125             | if ACTIVITY_LED >= 0
2ef70 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
2ef70 125             | end
2ef70 125             | if ERROR_LED >= 0
2ef70 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
2ef70 125             | end
2ef70 125 00 00 00 00 | hid_descr_p     long    0
2ef74 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
2ef74 126             | 'hkbd_report_p   long    0
2ef74 126 00 00 00 00 | hub_descr_p     long    0
2ef78 127 00 00 00 00 | urx_buff_p      long    0
2ef7c 128 00 00 00 00 | dev_desc_buff_p long    0
2ef80 129 00 00 00 00 | con_desc_buff_p long    0
2ef84 12a 00 00 00 00 | cache_start_p   long    0
2ef88 12b 00 00 00 00 | cache_end_p     long    0
2ef8c 12c             | if EMUPAD_MAX_PLAYER > 0
2ef8c 12c             | emupad_out_ptr  long    0
2ef8c 12c             | end
2ef8c 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
2ef90 12d             | 
2ef90 12d             | hdev_init_start
2ef90 12d             | hdev_port       res     1
2ef90 12d             | hdev_port       res     1
2ef90 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2ef90 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2ef90 12d             | kbm_next_datax  res     1
2ef90 12d             | kbm_next_datax  res     1
2ef90 12d             | hub_intf_num    res     1
2ef90 12d             | hub_intf_num    res     1
2ef90 12d             | hub_next_datax  res     1
2ef90 12d             | hub_next_datax  res     1
2ef90 12d             | hub_status_chg  res     1
2ef90 12d             | hub_status_chg  res     1
2ef90 12d             | hub_port_status res     1
2ef90 12d             | hub_port_status res     1
2ef90 12d             | if HAVE_MOUSE
2ef90 12d             | ms_intf_num     res     1
2ef90 12d             | ms_intf_num     res     1
2ef90 12d             | ms_in_max_pkt   res     1
2ef90 12d             | ms_in_max_pkt   res     1
2ef90 12d             | end
2ef90 12d             | kb_intf_num     res     1
2ef90 12d             | kb_intf_num     res     1
2ef90 12d             | kb_interval     res     1
2ef90 12d             | kb_interval     res     1
2ef90 12d             | kb_in_max_pkt   res     1
2ef90 12d             | kb_in_max_pkt   res     1
2ef90 12d             | kb_max_index    res     1
2ef90 12d             | kb_max_index    res     1
2ef90 12d             | kb_led_states   res     1
2ef90 12d             | kb_led_states   res     1
2ef90 12d             | gp_intf_num     res     1
2ef90 12d             | gp_intf_num     res     1
2ef90 12d             | gp_interval     res     1
2ef90 12d             | gp_interval     res     1
2ef90 12d             | gp_max_index    res     1
2ef90 12d             | gp_max_index    res     1
2ef90 12d             | gp_descr_len    res     1+MAX_DEVICES
2ef90 12d             | gp_descr_len    res     1+MAX_DEVICES
2ef90 12d             | hdev_init_end
2ef90 12d             | 
2ef90 12d             | ' Initialized at cog startup:
2ef90 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2ef90 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2ef90 12d             | iframe_ct_new   res     1
2ef90 12d             | iframe_ct_new   res     1
2ef90 12d             | iframe_ct_base  res     1
2ef90 12d             | iframe_ct_base  res     1
2ef90 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2ef90 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2ef90 12d             | 
2ef90 12d             | ' This register block is reset to zero when a USB device connects
2ef90 12d             | hreg_init_start
2ef90 12d             | hstatus         res     1         ' Host status flags
2ef90 12d             | hstatus         res     1         ' Host status flags
2ef90 12d             | hctwait         res     1         ' Poll-based wait clocks
2ef90 12d             | hctwait         res     1         ' Poll-based wait clocks
2ef90 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2ef90 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2ef90 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2ef90 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2ef90 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2ef90 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2ef90 12d             | xfer_retry      res     1         ' Control transfer retry count
2ef90 12d             | xfer_retry      res     1         ' Control transfer retry count
2ef90 12d             | retry           res     1         ' Transaction retry count
2ef90 12d             | retry           res     1         ' Transaction retry count
2ef90 12d             | utx             res     1         ' Byte to transmit on USB
2ef90 12d             | utx             res     1         ' Byte to transmit on USB
2ef90 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2ef90 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2ef90 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2ef90 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2ef90 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2ef90 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2ef90 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2ef90 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2ef90 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2ef90 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2ef90 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2ef90 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2ef90 12d             | frame           res     1         ' USB 1ms frame counter value
2ef90 12d             | frame           res     1         ' USB 1ms frame counter value
2ef90 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2ef90 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2ef90 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2ef90 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2ef90 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2ef90 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2ef90 12d             | crc             res     1         ' Used for CRC16 calculation
2ef90 12d             | crc             res     1         ' Used for CRC16 calculation
2ef90 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2ef90 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2ef90 12d             | retval          res     1         ' Global success/fail return parameter
2ef90 12d             | retval          res     1         ' Global success/fail return parameter
2ef90 12d             | context_retval  res     1         ' Operation contextual return parameter
2ef90 12d             | context_retval  res     1         ' Operation contextual return parameter
2ef90 12d             | ' Device stuff
2ef90 12d             | hdev_id         res     1+MAX_DEVICES
2ef90 12d             | hdev_id         res     1+MAX_DEVICES
2ef90 12d             | hdev_bcd        res     1
2ef90 12d             | hdev_bcd        res     1
2ef90 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2ef90 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2ef90 12d             | ' Keyboard/mouse stuff
2ef90 12d             | hctrl_ep_addr   res     1
2ef90 12d             | hctrl_ep_addr   res     1
2ef90 12d             | hctrl_max_pkt   res     1
2ef90 12d             | hctrl_max_pkt   res     1
2ef90 12d             | hconfig_base    res     1
2ef90 12d             | hconfig_base    res     1
2ef90 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2ef90 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2ef90 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2ef90 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2ef90 12d             | hdev_class      res     1
2ef90 12d             | hdev_class      res     1
2ef90 12d             | hdev_subclass   res     1
2ef90 12d             | hdev_subclass   res     1
2ef90 12d             | hdev_protocol   res     1
2ef90 12d             | hdev_protocol   res     1
2ef90 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2ef90 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2ef90 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2ef90 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2ef90 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2ef90 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2ef90 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2ef90 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2ef90 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2ef90 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2ef90 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2ef90 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2ef90 12d             | if HAVE_MOUSE
2ef90 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2ef90 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2ef90 12d             | end
2ef90 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2ef90 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2ef90 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2ef90 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2ef90 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2ef90 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2ef90 12d             | hdev_out_addr   res     1
2ef90 12d             | hdev_out_addr   res     1
2ef90 12d             | 
2ef90 12d             | if EMUPAD_MAX_PLAYER > 0
2ef90 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
2ef90 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
2ef90 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
2ef90 12d             | end
2ef90 12d             | 
2ef90 12d             | hreg_init_end
2ef90 12d             | 
2ef90 12d             | hidr_start
2ef90 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2ef90 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2ef90 12d             | hidr_flags      res     1
2ef90 12d             | hidr_flags      res     1
2ef90 12d             | hidr_axis       res     3
2ef90 12d             | hidr_axis       res     3
2ef90 12d             | hidr_buttons    res     1
2ef90 12d             | hidr_buttons    res     1
2ef90 12d             | hidr_hats       res     1
2ef90 12d             | hidr_hats       res     1
2ef90 12d             | '' Above are actually useful values, 6 longs
2ef90 12d             | hidr_id         res     1
2ef90 12d             | hidr_id         res     1
2ef90 12d             | hidr_state      res     1
2ef90 12d             | hidr_state      res     1
2ef90 12d             | hidr_size       res     1
2ef90 12d             | hidr_size       res     1
2ef90 12d             | hidr_count      res     1
2ef90 12d             | hidr_count      res     1
2ef90 12d             | hidr_offset     res     1
2ef90 12d             | hidr_offset     res     1
2ef90 12d             | hidr_usage_idx  res     1
2ef90 12d             | hidr_usage_idx  res     1
2ef90 12d             | hidr_lminmax    res     1
2ef90 12d             | hidr_lminmax    res     1
2ef90 12d             | hidr_pminmax    res     1
2ef90 12d             | hidr_pminmax    res     1
2ef90 12d             | hidr_type       res     1
2ef90 12d             | hidr_type       res     1
2ef90 12d             | hidr_end
2ef90 12d             | 
2ef90 12d             | ' Variables dependent on the system freqency
2ef90 12d             | _var_64_lower_  res     1
2ef90 12d             | _var_64_lower_  res     1
2ef90 12d             | _var_64_upper_  res     1
2ef90 12d             | _var_64_upper_  res     1
2ef90 12d             | _12Mbps_        res     1
2ef90 12d             | _12Mbps_        res     1
2ef90 12d             | _1_5Mbps_       res     1
2ef90 12d             | _1_5Mbps_       res     1
2ef90 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2ef90 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2ef90 12d             | _1us_           res     1         ' 1us
2ef90 12d             | _1us_           res     1         ' 1us
2ef90 12d             | _10us_          res     1         ' 10us
2ef90 12d             | _10us_          res     1         ' 10us
2ef90 12d             | _33us_          res     1         ' 33us
2ef90 12d             | _33us_          res     1         ' 33us
2ef90 12d             | _txn_err_       res     1         ' 250us
2ef90 12d             | _txn_err_       res     1         ' 250us
2ef90 12d             | _500us_         res     1         ' 500us
2ef90 12d             | _500us_         res     1         ' 500us
2ef90 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2ef90 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2ef90 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2ef90 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2ef90 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2ef90 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2ef90 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2ef90 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2ef90 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2ef90 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2ef90 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2ef90 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2ef90 12d             | _preamble_wait_ res     1
2ef90 12d             | _preamble_wait_ res     1
2ef90 12d             | _1ms_           res     1         ' 1ms
2ef90 12d             | _1ms_           res     1         ' 1ms
2ef90 12d             | _2ms_           res     1         ' 2ms
2ef90 12d             | _2ms_           res     1         ' 2ms
2ef90 12d             | _suspend_wait_  res     1         ' 3ms
2ef90 12d             | _suspend_wait_  res     1         ' 3ms
2ef90 12d             | _4ms_           res     1         ' 4ms
2ef90 12d             | _4ms_           res     1         ' 4ms
2ef90 12d             | _xfer_wait_     res     1         ' 5ms
2ef90 12d             | _xfer_wait_     res     1         ' 5ms
2ef90 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2ef90 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2ef90 12d             | _reset_hold_    res     1         ' 15ms
2ef90 12d             | _reset_hold_    res     1         ' 15ms
2ef90 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2ef90 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2ef90 12d             | _21ms_          res     1         ' 21ms
2ef90 12d             | _21ms_          res     1         ' 21ms
2ef90 12d             | _100ms_         res     1         ' 100ms
2ef90 12d             | _100ms_         res     1         ' 100ms
2ef90 12d             | _500ms_         res     1         ' 500ms
2ef90 12d             | _500ms_         res     1         ' 500ms
2ef90 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2ef90 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2ef90 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2ef90 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2ef90 12d             | '------------------------------------------------------------------------------
2ef90 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2ef90 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2ef90 12d             | _usb_d_ls_nco_  res     1
2ef90 12d             | _usb_d_ls_nco_  res     1
2ef90 12d             | _usb_h_fs_nco_  res     1
2ef90 12d             | _usb_h_fs_nco_  res     1
2ef90 12d             | _usb_d_fs_nco_  res     1
2ef90 12d             | _usb_d_fs_nco_  res     1
2ef90 12d             | '------------------------------------------------------------------------------
2ef90 12d             | ' Scratch registers
2ef90 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2ef90 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2ef90 12d             | htmp1           res     1
2ef90 12d             | htmp1           res     1
2ef90 12d             | htmp2           res     1
2ef90 12d             | htmp2           res     1
2ef90 12d             | htmp3           res     1
2ef90 12d             | htmp3           res     1
2ef90 12d             | hrep            res     1         ' Repeat count
2ef90 12d             | hrep            res     1         ' Repeat count
2ef90 12d             | hsave0          res     1         ' Subroutine parameter saves
2ef90 12d             | hsave0          res     1         ' Subroutine parameter saves
2ef90 12d             | hsave1          res     1
2ef90 12d             | hsave1          res     1
2ef90 12d             | hsave2          res     1
2ef90 12d             | hsave2          res     1
2ef90 12d             | isrtmp1         res     1
2ef90 12d             | isrtmp1         res     1
2ef90 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2ef90 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2ef90 12d             | hr0             res     1         ' Multi-purpose registers
2ef90 12d             | hr0             res     1         ' Multi-purpose registers
2ef90 12d             | hr1             res     1
2ef90 12d             | hr1             res     1
2ef90 12d             | hr2             res     1
2ef90 12d             | hr2             res     1
2ef90 12d             | hr3             res     1
2ef90 12d             | hr3             res     1
2ef90 12d             | hpar1           res     1         ' Routine entry/exit parameters
2ef90 12d             | hpar1           res     1         ' Routine entry/exit parameters
2ef90 12d             | hpar2           res     1
2ef90 12d             | hpar2           res     1
2ef90 12d             | hpar3           res     1
2ef90 12d             | hpar3           res     1
2ef90 12d             | hct2            res     1         ' Function response bus turn-around timer
2ef90 12d             | hct2            res     1         ' Function response bus turn-around timer
2ef90 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2ef90 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2ef90 12d             | mod_cnt         res     1         ' Used in idle loops
2ef90 12d             | mod_cnt         res     1         ' Used in idle loops
2ef90 12d             |                 fit     $1F0
2ef90 12d             |                 org     $200
2ef90 200             | hlut_start
2ef90 200             | 
2ef90 200             | '------------------------------------------------------------------------------
2ef90 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
2ef90 200             | ' settings to startup defaults.
2ef90 200             | '------------------------------------------------------------------------------
2ef90 200             | ' On entry:
2ef90 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
2ef90 200             | '------------------------------------------------------------------------------
2ef90 200             | set_speed_full
2ef90 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
2ef94 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2ef98 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
2ef9c 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
2efa0 204             | '                ret                             wcz     ' Restore caller flags on exit
2efa0 204             | 
2efa0 204             | '------------------------------------------------------------------------------
2efa0 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
2efa0 204             | ' is a downstream hub connected (not yet implemented), the baud generator
2efa0 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
2efa0 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
2efa0 204             | ' putting the smart pins into reset.
2efa0 204             | '------------------------------------------------------------------------------
2efa0 204             | ' On entry:
2efa0 204             | ' On exit: CZ flags restored to caller states
2efa0 204             | '------------------------------------------------------------------------------
2efa0 204             | set_speed_low
2efa0 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
2efa4 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
2efa8 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
2efac 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2efb0 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2efb4 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2efb8 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
2efbc 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
2efc0 20c             | 
2efc0 20c             | '------------------------------------------------------------------------------
2efc0 20c             | ' Perform configuration stuff required when a device intitially connects.
2efc0 20c             | '------------------------------------------------------------------------------
2efc0 20c             | ' On entry:
2efc0 20c             | ' On exit:
2efc0 20c             | '------------------------------------------------------------------------------
2efc0 20c             | on_connect
2efc0 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
2efc4 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
2efc8 20e             | .retry
2efc8 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2efcc 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
2efd0 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
2efd4 211 00 08 00 FF 
2efd8 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2efdc 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
2efe0 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2efe4 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2efe8 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2efec 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2eff0 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2eff4 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
2eff8 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2effc 21b 4C 03 B0 FD |                 call    #poll_waitx
2f000 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
2f004 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
2f008 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2f00c 21f B8 FF 9F FD |                 jmp     #.retry
2f010 220             | .get_dev_desc
2f010 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2f014 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2f018 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2f01c 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
2f020 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
2f024 225 88 FB BF FD |                 call    #reset
2f028 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2f02c 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2f030 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
2f034 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
2f038 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f03c 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2f040 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
2f044 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2f048 22e 04 00 00 FF 
2f04c 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
2f050 230 34 FA BF FD |                 call    #calc_crc5
2f054 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
2f058 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2f05c 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2f060 234 F7 AD C2 FA |                 rdbyte  total_data, pb
2f064 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2f068 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2f06c 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f070 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2f074 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2f078 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2f07c 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2f080 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2f084 23d C4 02 B0 FD |                 call    #poll_waitx
2f088 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2f08c 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2f090 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2f094 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2f098 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2f09c 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f0a0 244 2D 00 64 5D |         if_nz   ret
2f0a4 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2f0a8 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2f0ac 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2f0b0 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2f0b4 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2f0b8 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2f0bc 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2f0c0 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2f0c4 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2f0c8 24e 2C FB 9F CD |         if_b    jmp     #host_error
2f0cc 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
2f0d0 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2f0d4 251 2D EC 63 FD |                 call    pa
2f0d8 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2f0dc 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
2f0e0 254 2C EC 63 FD |                 jmp     pa
2f0e4 255             | 
2f0e4 255             | '------------------------------------------------------------------------------
2f0e4 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2f0e4 255             | ' Status reporting is always in the function-to-host direction.
2f0e4 255             | '------------------------------------------------------------------------------
2f0e4 255             | ' On entry:
2f0e4 255             | '   PTRA - start address of the SETUP data in hub.
2f0e4 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2f0e4 255             | '     stage.
2f0e4 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2f0e4 255             | ' On exit:
2f0e4 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2f0e4 255             | '     contains the count of data stage bytes actually received, which must
2f0e4 255             | '     always be <= the count requested.
2f0e4 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2f0e4 255             | '     more specific USB operation error code.
2f0e4 255             | '------------------------------------------------------------------------------
2f0e4 255             | control_read
2f0e4 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2f0e8 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2f0ec 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
2f0f0 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2f0f4 259             | .xfer_start
2f0f4 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2f0f8 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2f0fc 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f100 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2f104 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
2f108 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2f10c 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2f110 260 61 00 00 FF 
2f114 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
2f118 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2f11c 263             | .data
2f11c 263 56 B1 02 F6 |                 mov     pkt_data, total_data
2f120 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
2f124 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2f128 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2f12c 267             | .nak_retry
2f12c 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
2f130 268             | .in_retry
2f130 268 BC F6 BF FD |                 call    #txn_in
2f134 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
2f138 26a 28 00 90 AD |         if_z    jmp     #.commit
2f13c 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2f140 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2f144 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2f148 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2f14c 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
2f150 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2f154 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2f158 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2f15c 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
2f160 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
2f164 275             | .commit
2f164 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
2f168 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2f16c 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
2f170 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
2f174 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
2f178 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2f17c 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
2f180 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2f184 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
2f188 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2f18c 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
2f190 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2f194 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
2f198 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
2f19c 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2f1a0 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2f1a4 285             | .pre_status
2f1a4 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
2f1a8 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
2f1ac 287 00 B0 06 F6 |                 mov     pkt_data, #0
2f1b0 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2f1b4 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2f1b8 28a 61 00 00 FF 
2f1bc 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
2f1c0 28c             | .out_retry
2f1c0 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2f1c4 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f1c8 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
2f1cc 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2f1d0 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2f1d4 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2f1d8 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2f1dc 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2f1e0 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2f1e4 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
2f1e8 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
2f1ec 297             | ' I've encountered transfer STALL, even though the data looks correct, and
2f1ec 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
2f1ec 297             | ' ControlRead() transfer gets things unstuck most of the time...
2f1ec 297             | .xfer_retry
2f1ec 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
2f1f0 298 58 01 B0 FD |                 call    #poll_waitx
2f1f4 299 8C F9 BF FD |                 call    #wait_txn_ok
2f1f8 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2f1fc 29b C7 F1 03 F6 |                 mov     ptra, hpar2
2f200 29c C8 EF 03 F6 |                 mov     pb, hpar3
2f204 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
2f208 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2f20c 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
2f210 2a0             | 
2f210 2a0             | '------------------------------------------------------------------------------
2f210 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
2f210 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
2f210 2a0             | ' the SETUP data struct is filled with the required values.
2f210 2a0             | '------------------------------------------------------------------------------
2f210 2a0             | ' On entry:
2f210 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
2f210 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
2f210 2a0             | '     stage.
2f210 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
2f210 2a0             | ' On exit:
2f210 2a0             | '   retval - used to convey the success/failure of each stage.
2f210 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2f210 2a0             | '     more specific USB operation error code.
2f210 2a0             | '------------------------------------------------------------------------------
2f210 2a0             | control_write
2f210 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2f214 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2f218 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2f21c 2a3             | 
2f21c 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2f220 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
2f224 2a5 F7 91 03 F6 |                 mov     hpar3, pb
2f228 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2f22c 2a7             | .xfer_start
2f22c 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
2f230 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2f234 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2f238 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f23c 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
2f240 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
2f244 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2f248 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2f24c 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
2f250 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2f254 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2f258 2b2             | .data
2f258 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2f25c 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
2f260 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2f264 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
2f268 2b6             | .out_retry
2f268 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2f26c 2b7 88 F6 BF FD |                 call    #txn_out
2f270 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f274 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
2f278 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2f27c 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
2f280 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
2f284 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
2f288 2be             | .commit
2f288 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2f28c 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
2f290 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
2f294 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2f298 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
2f29c 2c3             | pre_status_in
2f29c 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
2f2a0 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2f2a4 2c5             | .status_retry
2f2a4 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
2f2a8 2c6 44 F5 BF FD |                 call    #txn_in
2f2ac 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
2f2b0 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
2f2b4 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
2f2b8 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
2f2bc 2cb 2D 00 64 AD |         if_z    ret
2f2c0 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
2f2c4 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2f2c8 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
2f2cc 2cf             | '               ret                                     ' Caller must handle transfer retirement
2f2cc 2cf             | 
2f2cc 2cf             | '------------------------------------------------------------------------------
2f2cc 2cf             | ' Execute an IN interrupt transaction.
2f2cc 2cf             | '------------------------------------------------------------------------------
2f2cc 2cf             | ' On entry:
2f2cc 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
2f2cc 2cf             | '   hpar2 - Address of the IN data buffer
2f2cc 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
2f2cc 2cf             | ' On exit:
2f2cc 2cf             | '   retval - the result of the operation.
2f2cc 2cf             | '   hpar3 - the count of IN data bytes actually received.
2f2cc 2cf             | '------------------------------------------------------------------------------
2f2cc 2cf             | do_int_in
2f2cc 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2f2d0 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2f2d4 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2f2d8 2d2             | 
2f2d8 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
2f2dc 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
2f2e0 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
2f2e4 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
2f2e8 2d6             | .retry
2f2e8 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
2f2ec 2d7 00 F5 BF FD |                 call    #txn_in
2f2f0 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
2f2f4 2d9 1C 00 90 AD |         if_z    jmp     #.commit
2f2f8 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
2f2fc 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
2f300 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
2f304 2dd 54 00 B0 FD |                 call    #retry_wait
2f308 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2f30c 2df 18 00 90 AD |         if_z    jmp     #.post_ret
2f310 2e0 D4 FF 9F FD |                 jmp     #.retry
2f314 2e1             | .commit
2f314 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
2f318 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
2f31c 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
2f320 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
2f324 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2f328 2e6             | .post_ret
2f328 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
2f32c 2e7             | 
2f32c 2e7             | 
2f32c 2e7             | '------------------------------------------------------------------------------
2f32c 2e7             | ' Resets the downstream hub port to FS
2f32c 2e7             | '------------------------------------------------------------------------------
2f32c 2e7             | dwnstream_reset
2f32c 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2f330 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
2f334 2e9             | 
2f334 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
2f338 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2f33c 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2f340 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2f344 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2f348 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2f34c 2ef             | 
2f34c 2ef             | '------------------------------------------------------------------------------
2f34c 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
2f34c 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
2f34c 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
2f34c 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
2f34c 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
2f34c 2ef             | '------------------------------------------------------------------------------
2f34c 2ef             | ' On entry:
2f34c 2ef             | '   hctwait - wait interval in sysclocks.
2f34c 2ef             | ' On exit:
2f34c 2ef             | '------------------------------------------------------------------------------
2f34c 2ef             | poll_waitx
2f34c 2ef 1A 92 63 FD |                 getct   hct2
2f350 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
2f354 2f1             | .wait
2f354 2f1 FF 25 CC FB |                 jnct2   #.wait
2f358 2f2 2D 00 64 FD |                 ret
2f35c 2f3             | 
2f35c 2f3             | '------------------------------------------------------------------------------
2f35c 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
2f35c 2f3             | '------------------------------------------------------------------------------
2f35c 2f3             | ' On entry:
2f35c 2f3             | '   retval - transaction response PID or error code.
2f35c 2f3             | ' On exit:
2f35c 2f3             | '------------------------------------------------------------------------------
2f35c 2f3             | retry_wait
2f35c 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2f360 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
2f364 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2f368 2f6 14 00 90 AD |         if_z    jmp     #.nak
2f36c 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
2f370 2f8 D8 FF BF FD |                 call    #poll_waitx
2f374 2f9             | .dec
2f374 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
2f378 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
2f37c 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
2f380 2fc             | .nak
2f380 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
2f384 2fd C4 FF BF FD |                 call    #poll_waitx
2f388 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
2f38c 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
2f390 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
2f394 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
2f398 302 2D 00 64 FD |                 ret
2f39c 303             | 
2f39c 303             | host_reset
2f39c 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
2f3a0 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
2f3a4 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
2f3a4 305 BD 01 05 FF 
2f3a8 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
2f3ac 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
2f3b0 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
2f3b4 309             | ' Check to see if the system clock has been changed.
2f3b4 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2f3b8 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
2f3bc 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
2f3c0 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
2f3c4 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2f3c8 30e 40 46 62 FD |                 dirl    dp
2f3cc 30f             | 
2f3cc 30f 28 02 64 FD |                 setq    #1
2f3d0 310 80 00 80 FF 
2f3d4 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2f3d8 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
2f3dc 313             | .enable
2f3dc 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2f3e0 314 41 46 62 FD |                 dirh    dp
2f3e4 315 1F 36 63 FD |                 waitx   _1us_
2f3e8 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f3ec 317             | 
2f3ec 317             |                 ' Handle Port protection enable and startup delay
2f3ec 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
2f3f0 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
2f3f4 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
2f3f8 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
2f3fc 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
2f400 31c             | 
2f400 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
2f404 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
2f408 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
2f40c 31f 00 00 04 F6 |                 mov     0-0, #0
2f410 320             | .regloop
2f410 320             | 
2f410 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
2f410 320             | 
2f410 320             | discon_entry
2f410 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
2f414 321             | 
2f414 321             |               
2f414 321             |         if HAVE_HIDPAD
2f414 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
2f418 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
2f41c 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
2f420 324 F7 01 68 FC |                 wrlong  #0,pb
2f424 325             |         end
2f424 325             |         if EMUPAD_MAX_PLAYER > 0
2f424 325             |         end
2f424 325             | 
2f424 325             |                 ' Fall through to disconnected loop
2f424 325             | 
2f424 325             | '-----------------------------------------------------------------------------------------------------------------
2f424 325             | ' Device connect handling (Section 7.1.7.3).
2f424 325             | '-----------------------------------------------------------------------------------------------------------------
2f424 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
2f424 325             | ' device to connect (Section 7.1.7.3).
2f424 325             | '-----------------------------------------------------------------------------------------------------------------
2f424 325             | disconnected
2f424 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
2f428 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
2f42c 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
2f430 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
2f434 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
2f438 32a             |         if ACTIVITY_LED >= 0
2f438 32a             |         end
2f438 32a 22 A7 82 FA |                 rqpin   urx, dm
2f43c 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
2f440 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
2f444 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
2f448 32e             | .se1_test
2f448 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
2f44c 32f FC FE BF FD |                 call    #poll_waitx
2f450 330 22 A7 82 FA |                 rqpin   urx, dm
2f454 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2f458 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
2f45c 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
2f460 334             | .se1            'SE1 is a fatal error condition
2f460 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
2f464 335 E4 FE BF FD |                 call    #poll_waitx
2f468 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
2f46c 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
2f470 338             | .connect_test                                           ' Test lines until stable J/K state seen
2f470 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
2f474 339 22 A7 82 FA |                 rqpin   urx, dm
2f478 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2f47c 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
2f480 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
2f484 33d             | connected
2f484 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
2f488 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
2f48c 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
2f490 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
2f494 341             | .set_pulse
2f494 341 1A 64 63 FD |                 getct   _pulse_time_
2f498 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
2f49c 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
2f49c 343             | ' of 1ms and make a correction, if necessary.
2f49c 343             | '                mov     htmp, _1ms_
2f49c 343             | '                subs    htmp, iframe_delta
2f49c 343             | '                adds    _frame1ms_clks_, htmp
2f49c 343             | '                debug(udec(_frame1ms_clks_))
2f49c 343             | 
2f49c 343             |                 ' Fall through to idle/processing loop
2f49c 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
2f4a0 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
2f4a4 345             | 
2f4a4 345             | hidle
2f4a4 345 22 A7 82 FA |                 rqpin   urx, dm
2f4a8 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2f4ac 347 98 00 90 CD |         if_c    jmp     #.se0_test
2f4b0 348 24 06 70 FD |                 pollct3                         wc
2f4b4 349 68 00 90 3D |         if_nc   jmp     #.nopoll
2f4b8 34a 1A 94 63 FD |                 getct   hct3
2f4bc 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
2f4c0 34c             | 
2f4c0 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2f4c4 34d 00 70 E3 F8 |                 getbyte htmp
2f4c8 34e             | 
2f4c8 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2f4cc 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2f4d0 350 40 00 90 AD |         if_z    jmp     #.poll
2f4d4 351             | 
2f4d4 351             |         if _HAVE_GAMEPAD
2f4d4 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2f4d8 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2f4dc 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2f4e0 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2f4e4 355 2C 00 90 AD |         if_z    jmp     #.poll
2f4e8 356             |         end
2f4e8 356             | 
2f4e8 356             |         if HAVE_MOUSE
2f4e8 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2f4ec 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2f4f0 358 20 00 90 AD |         if_z    jmp     #.poll
2f4f4 359             |         end
2f4f4 359             | 
2f4f4 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2f4f8 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2f4fc 35b 14 00 90 AD |         if_z    jmp     #.poll
2f500 35c             | 
2f500 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2f504 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2f508 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2f50c 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2f510 360             |         if HAVE_MOUSE
2f510 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2f514 361             |         else
2f514 361             |         end
2f514 361             | 
2f514 361             | .poll
2f514 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2f518 362 2D EC 63 FD |                 call    pa
2f51c 363             | .skip_poll
2f51c 363             | 
2f51c 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2f520 364             | 
2f520 364             | .nopoll
2f520 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2f524 365 44 00 90 AD |         if_z    jmp     #hsuspend
2f528 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2f52c 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2f530 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2f534 369 1A 84 63 FD |                 getct   hr0
2f538 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2f53c 36b             |         if ACTIVITY_LED >= 0
2f53c 36b             |         end
2f53c 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2f540 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2f544 36d 5C FF 9F FD |                 jmp     #hidle
2f548 36e             | ' Check for extended SE0 state on the bus
2f548 36e             | .se0_test
2f548 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2f54c 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2f550 370 22 A7 82 FA |                 rqpin   urx, dm
2f554 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2f558 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2f55c 373 24 F6 BF FD |                 call    #wait_txn_ok
2f560 374 00 00 80 FF 
2f564 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2f568 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2f568 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2f56c 377             | 
2f56c 377             | hsuspend
2f56c 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2f570 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2f574 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2f578 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2f57c 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2f580 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2f584 37d             | 
2f584 37d             |                 ' Fall through to resume wait loop
2f584 37d             | 
2f584 37d             | hwait_resume
2f584 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2f588 37e 02 86 47 F0 |                 shr     hr1, #2
2f58c 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2f590 380             |         if ACTIVITY_LED >= 0
2f590 380             |         end
2f590 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2f594 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2f598 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2f59c 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2f5a0 384 18 00 90 AD |         if_z    jmp     #.resume
2f5a4 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2f5a8 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2f5ac 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2f5b0 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2f5b4 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2f5b8 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2f5bc 38b             | .resume
2f5bc 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2f5c0 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2f5c4 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2f5c8 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2f5cc 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2f5d0 390 1F 70 63 FD |                 waitx   htmp
2f5d4 391 22 07 28 FC |                 wypin   #OUT_J, dm
2f5d8 392 01 70 47 F0 |                 shr     htmp, #1
2f5dc 393 1F 70 63 FD |                 waitx   htmp
2f5e0 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f5e4 395 1A 92 62 FD |                 getct   iframe_ct_base
2f5e8 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2f5ec 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2f5f0 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2f5f4 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2f5f8 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2f5fc 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2f600 39c             | 
2f600 39c             | '------------------------------------------------------------------------------
2f600 39c             | ' Send preamble to enable low-speed HUB ports
2f600 39c             | '------------------------------------------------------------------------------
2f600 39c             | ' On entry:
2f600 39c             | ' On exit:
2f600 39c             | '   USB baud rate set to low-speed
2f600 39c             | '------------------------------------------------------------------------------
2f600 39c             | utx_pre
2f600 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2f604 39d 40 46 62 FD |                 dirl    dp
2f608 39e 28 02 64 FD |                 setq    #1
2f60c 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2f610 3a0 58 44 62 FD |                 drvl    dm
2f614 3a1 59 46 62 FD |                 drvh    dp
2f618 3a2             | 
2f618 3a2 1E 00 00 FF 
2f61c 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2f620 3a4             | 
2f620 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2f624 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2f628 3a6 28 02 64 3D |         if_nc   setq    #1
2f62c 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2f630 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2f634 3a9             | .l1
2f634 3a9             | 
2f634 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2f638 3aa 40 46 62 FD |                 dirl    dp
2f63c 3ab 28 02 64 FD |                 setq    #1
2f640 3ac 80 00 80 FF 
2f644 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2f648 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2f64c 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2f650 3b0 41 46 62 FD |                 dirh    dp
2f654 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f658 3b2             | 
2f658 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2f65c 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2f660 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2f664 3b5             | 
2f664 3b5             | hlut_end
2f664 3b5             |                 fit     $400
2f664 3b5             |                 orgh
2f664                 | if OVERLAP_MEMORY
2f664                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2f664                 | end
2f664                 | '------------------------------------------------------------------------------
2f664                 | ' Routines called from cog space.
2f664                 | '------------------------------------------------------------------------------
2f664                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2f664                 | '------------------------------------------------------------------------------
2f664                 | 
2f664                 | '------------------------------------------------------------------------------
2f664                 | ' USB host cog initialization.
2f664                 | '------------------------------------------------------------------------------
2f664                 | usb_host_init
2f664                 |                 ' Initialize buffer pointers
2f664                 |         if OVERLAP_MEMORY
2f664                 |         else
2f664     40 15 B0 FE |                 loc     pb, #hid_descr
2f668                 |         end
2f668     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2f66c                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2f66c                 |                 {
2f66c                 |                 }
2f66c                 |         
2f66c                 |                 {
2f66c                 |                 }
2f66c                 |                 'loc     pb,#hkbd_report
2f66c                 |                 'mov     hkbd_report_p,pb
2f66c                 | 
2f66c     08 1D B0 FE |                 loc     pb, #hub_descr
2f670     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2f674     1D 1D B0 FE |                 loc     pb, #urx_buff
2f678     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2f67c     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2f680     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2f684     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2f688     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2f68c     18 15 B0 FE |                 loc     pb, #usb_cache_start
2f690     F7 55 02 F6 |                 mov     cache_start_p, pb
2f694     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2f698     F7 57 02 F6 |                 mov     cache_end_p, pb
2f69c                 | 
2f69c                 |         if ERROR_LED >= 0
2f69c                 |         end
2f69c                 | 
2f69c                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2f69c                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2f69c                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2f69c                 | ' Configure and enable the Serial Host USB port.
2f69c     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2f6a0                 | 
2f6a0                 | '------------------------------------------------------------------------------
2f6a0                 | ' Timing calculations happen before any interrupt(s) are enabled.
2f6a0                 | '------------------------------------------------------------------------------
2f6a0                 | ' On entry:
2f6a0                 | '   htmp - current CLKFREQ value.
2f6a0                 | '------------------------------------------------------------------------------
2f6a0                 | hinit_usb_timings
2f6a0                 | '                getct   htmp2
2f6a0     B8 59 02 F6 |                 mov     save_sysclk, htmp
2f6a4     8D 5B 80 FF 
2f6a8     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2f6ac     18 30 63 FD |                 getqx   _12Mbps_
2f6b0     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2f6b4     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2f6b8     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2f6bc     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2f6c0     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2f6c4     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2f6c8     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2f6cc     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2f6d0     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2f6d4     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2f6d8     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2f6dc     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2f6e0     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2f6e4     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2f6e8     80 00 00 FF 
2f6ec     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2f6f0     18 2C 63 FD |                 getqx   _var_64_lower_
2f6f4     19 2E 63 FD |                 getqy   _var_64_upper_
2f6f8     28 2C 63 FD |                 setq    _var_64_lower_
2f6fc     65 CD 1D FF 
2f700     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2f704     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2f708     01 00 00 FF 
2f70c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2f710     18 2C 63 FD |                 getqx   _var_64_lower_
2f714     19 2E 63 FD |                 getqy   _var_64_upper_
2f718     28 2C 63 FD |                 setq    _var_64_lower_
2f71c     A1 07 00 FF 
2f720     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2f724     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2f728     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2f72c     09 36 57 F0 |                 shr     _1us_, #9               wc
2f730     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2f734     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2f738     18 38 63 FD |                 getqx   _10us_
2f73c     09 38 57 F0 |                 shr     _10us_, #9              wc
2f740     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2f744     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2f748     18 3A 63 FD |                 getqx   _33us_
2f74c     09 3A 57 F0 |                 shr     _33us_, #9              wc
2f750     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2f754     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2f758     18 3C 63 FD |                 getqx   _txn_err_
2f75c     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2f760     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2f764     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2f768     18 3E 63 FD |                 getqx   _500us_
2f76c     09 3E 57 F0 |                 shr     _500us_, #9             wc
2f770     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2f774     01 00 00 FF 
2f778     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2f77c     18 40 63 FD |                 getqx   _txn_ok_ls_
2f780     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2f784     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2f788     01 00 00 FF 
2f78c     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2f790     18 42 63 FD |                 getqx   _txn_ok_fs_
2f794     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2f798     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2f79c     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2f7a0     05 00 00 FF 
2f7a4     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2f7a8     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2f7ac     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2f7b0     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2f7b4     1C 00 00 FF 
2f7b8     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2f7bc     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2f7c0     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2f7c4     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2f7c8     00 00 00 FF 
2f7cc     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2f7d0     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2f7d4     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2f7d8     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2f7dc     04 00 00 FF 
2f7e0     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2f7e4     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2f7e8     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2f7ec     8D 5B 00 FF 
2f7f0     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2f7f4     18 4C 63 FD |                 getqx   _preamble_wait_
2f7f8     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2f7fc     01 00 00 FF 
2f800     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2f804     18 2C 63 FD |                 getqx   _var_64_lower_
2f808     19 2E 63 FD |                 getqy   _var_64_upper_
2f80c     28 2C 63 FD |                 setq    _var_64_lower_
2f810     01 00 00 FF 
2f814     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2f818     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2f81c     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2f820     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2f824     FF FF 7F FF 
2f828     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2f82c     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2f830     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2f834     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2f838     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2f83c     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2f840     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2f844     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2f848     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2f84c     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2f850     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2f854     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2f858     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2f85c     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2f860     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2f864     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2f868     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2f86c     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2f870     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2f874     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2f878     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2f87c     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2f880     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2f884     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2f888     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2f88c     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2f890     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2f894                 | '        _ret_   mov     _1sec_, save_sysclk
2f894                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2f894                 | '                ret
2f894                 | {
2f894                 | }
2f894                 | 
2f894                 | '------------------------------------------------------------------------------
2f894                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2f894                 | ' one. If it is, start the task progression that will configure the device for
2f894                 | ' use.
2f894                 | '------------------------------------------------------------------------------
2f894                 | ' On entry:
2f894                 | '   hconfig_base - start address of the cached config descriptor chain.
2f894                 | ' On exit:
2f894                 | '------------------------------------------------------------------------------
2f894                 | hparse_con_desc
2f894     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2f898     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2f89c     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2f8a0     4E 70 FF F9 |                 movbyts htmp,#%%1032
2f8a4     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2f8a8                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2f8a8                 | 
2f8a8     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2f8ac     6E ED 03 F1 |                 add     pa, hconfig_base
2f8b0     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2f8b4                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2f8b4                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2f8b4                 | ' that defines a keyboard and/or mouse.
2f8b4     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2f8b8                 | .next_intf
2f8b8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2f8bc     BC 01 90 3D |         if_ae   jmp     #hset_config
2f8c0     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2f8c4     75 F3 03 F1 |                 add     ptrb, hnext_desc
2f8c8     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2f8cc     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2f8d0     0C 00 90 AD |         if_z    jmp     #.intf
2f8d4     80 71 C7 FA |                 rdbyte  htmp, ptrb
2f8d8     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2f8dc     D8 FF 9F FD |                 jmp     #.next_intf
2f8e0                 | .intf
2f8e0     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2f8e4     00 90 07 F6 |                 mov     hpar3, #0
2f8e8     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2f8ec     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2f8f0     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2f8f4     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2f8f8                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2f8f8                 | 
2f8f8                 | .endp
2f8f8     80 71 C7 FA |                 rdbyte  htmp, ptrb
2f8fc     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2f900     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2f904     78 00 90 3D |         if_ae   jmp     #.get_device
2f908     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2f90c     75 F3 03 F1 |                 add     ptrb, hnext_desc
2f910     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2f914     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2f918     64 00 90 AD |         if_z    jmp     #.get_device
2f91c     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2f920     04 00 90 AD |         if_z    jmp     #.get_ep
2f924     D0 FF 9F FD |                 jmp     #.endp
2f928                 | .get_ep
2f928     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2f92c     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2f930     0F 86 67 F0 |                 shl     hr1, #8 + 7
2f934     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2f938     3F 00 00 FF 
2f93c     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2f940     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2f944     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2f948     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2f94c     00 90 0F F2 |                 cmp     hpar3, #0               wz
2f950     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2f954     A0 FF 9F FD |                 jmp     #.endp
2f958                 | .in_ep
2f958     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2f95c     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2f960                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2f960     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2f964     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2f968     8C FF 9F FD |                 jmp     #.endp
2f96c                 | .out_ep
2f96c     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2f970     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2f974                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2f974     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2f978     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2f97c     78 FF 9F FD |                 jmp     #.endp
2f980                 | 
2f980                 | .get_device
2f980     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2f984     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2f988     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2f98c     68 00 90 AD |         if_z    jmp     #.gamepad
2f990     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2f994     AC 00 90 AD |         if_z    jmp     #.hub
2f998     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2f99c     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2f9a0     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2f9a4     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2f9a8     4C 00 90 AD |         if_z    jmp     #.gamepad
2f9ac     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2f9b0     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2f9b4                 | .keyboard
2f9b4     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2f9b8                 |         if HAVE_MOUSE
2f9b8     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2f9bc                 |         else
2f9bc                 |         end
2f9bc     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2f9c0     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2f9c4     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f9c8     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2f9cc     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2f9d0     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2f9d4                 |                 'debug(udec(kb_intf_num))
2f9d4                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2f9d4     E0 FE 9F FD |                 jmp     #.next_intf
2f9d8                 | if HAVE_MOUSE
2f9d8                 | .mouse
2f9d8     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2f9dc     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2f9e0     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2f9e4     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2f9e8     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f9ec                 |                 'getbyte ms_interval, hr2, #3
2f9ec     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2f9f0     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2f9f4                 |                 'debug(udec(kb_intf_num))
2f9f4                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2f9f4     C0 FE 9F FD |                 jmp     #.next_intf
2f9f8                 | end
2f9f8                 | .gamepad
2f9f8     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2f9fc     C7 71 63 F5 |                 xor     htmp, hpar2
2fa00     3F 00 00 FF 
2fa04     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2fa08     AC FE 9F AD |         if_z    jmp     #.next_intf
2fa0c                 |         if HAVE_MOUSE
2fa0c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2fa10     C7 71 63 F5 |                 xor     htmp, hpar2
2fa14     3F 00 00 FF 
2fa18     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2fa1c     98 FE 9F AD |         if_z    jmp     #.next_intf
2fa20                 |         end
2fa20     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2fa24     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2fa28     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2fa2c                 | 
2fa2c     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2fa30     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2fa34     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2fa38     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2fa3c     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2fa40                 |                 'debug(udec(gp_intf_num))
2fa40                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2fa40     74 FE 9F FD |                 jmp     #.next_intf
2fa44                 | .hub
2fa44     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2fa48     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2fa4c     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2fa50     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2fa54     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2fa58     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2fa5c     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2fa60     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2fa64     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2fa68     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2fa6c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2fa70     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2fa74     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2fa78                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2fa78     3C FE 9F FD |                 jmp     #.next_intf
2fa7c                 | 
2fa7c                 | '------------------------------------------------------------------------------
2fa7c                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2fa7c                 | ' it according to its function, or functions. In the case of this boot protocol
2fa7c                 | ' keyboard/mouse class driver:
2fa7c                 | ' - SetConfiguration(config_num)
2fa7c                 | ' - SetProtocol(boot)
2fa7c                 | ' - SetIdle(indefinite)
2fa7c                 | ' - Enter the device interrupt IN polling task stage.
2fa7c                 | '------------------------------------------------------------------------------
2fa7c                 | ' On entry:
2fa7c                 | ' On exit:
2fa7c                 | '------------------------------------------------------------------------------
2fa7c                 | hset_config
2fa7c                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2fa7c                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2fa7c     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2fa80     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2fa84     00 00 0C F2 |                 cmp     0-0, #0                 wz
2fa88     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2fa8c                 |         if HAVE_MOUSE
2fa8c     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2fa90                 |         end
2fa90     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2fa94     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2fa98                 | .set_config
2fa98     6C 0E D0 FE |                 loc     ptra, #set_config
2fa9c     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2faa0     6E ED 03 F1 |                 add     pa, hconfig_base
2faa4     F6 8D C3 FA |                 rdbyte  hpar1, pa
2faa8     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2faac     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2fab0     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2fab4     A0 02 A0 FD |                 call    #control_write
2fab8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fabc     2D 00 64 5D |         if_nz   ret
2fac0                 | .kbd_config
2fac0     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2fac4     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2fac8                 | 
2fac8     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2facc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2fad0     3F 00 00 FF 
2fad4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2fad8     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2fadc                 | 
2fadc     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2fae0     34 0E D0 FE |                 loc     ptra, #set_protocol
2fae4     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2fae8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2faec     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2faf0     A0 02 A0 FD |                 call    #control_write
2faf4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2faf8     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2fafc     E4 02 90 5D |         if_nz   jmp     #.notify_client
2fb00     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2fb04     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2fb08     30 03 B0 FD |                 call    #hset_idle
2fb0c                 |                 'cmp     retval, #PID_ACK        wz
2fb0c                 |         'if_nz   mov     hkbd_ep_addr, #0
2fb0c                 |         'if_nz   jmp     #.notify_client
2fb0c     A8 99 02 F6 |                 mov     hctwait, _2ms_
2fb10     EF 02 A0 FD |                 call    #poll_waitx
2fb14     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2fb18     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2fb1c     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2fb20     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2fb24     2C 03 B0 FD |                 call    #hset_kbdled_report
2fb28     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fb2c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2fb30     B0 02 90 5D |         if_nz   jmp     #.notify_client
2fb34     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2fb38     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2fb3c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2fb40     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2fb44     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2fb48     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2fb4c     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2fb50     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2fb54     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2fb58     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2fb5c     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2fb60                 |         if !!HAVE_MOUSE
2fb60                 |         end
2fb60                 | 
2fb60                 | .mouse_config
2fb60                 | if HAVE_MOUSE
2fb60     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2fb64     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2fb68     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2fb6c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2fb70     3F 00 00 FF 
2fb74     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2fb78     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2fb7c                 | 
2fb7c                 |                 debug("mouse passed addr check")
2fb7c                 | 
2fb7c     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2fb80     00 00 80 FF 
2fb84     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2fb88     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2fb8c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2fb90     55 02 A0 FD |                 call    #control_read
2fb94     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fb98     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2fb9c     44 02 90 5D |         if_nz   jmp     #.notify_client
2fba0     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2fba4     56 01 00 F6 |                 mov     0-0, total_data
2fba8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2fbac                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2fbac                 | 
2fbac     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2fbb0     64 0D D0 FE |                 loc     ptra, #set_protocol
2fbb4     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2fbb8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2fbbc     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2fbc0     A0 02 A0 FD |                 call    #control_write
2fbc4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fbc8     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2fbcc     14 02 90 5D |         if_nz   jmp     #.notify_client
2fbd0                 |                 debug("mouse passed SetProtocol")
2fbd0     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2fbd4     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2fbd8     60 02 B0 FD |                 call    #hset_idle
2fbdc                 |                 'cmp     retval, #PID_ACK        wz
2fbdc                 |         'if_nz   mov     hmouse_ep_addr, #0
2fbdc                 |         'if_nz   jmp     #.notify_client
2fbdc                 |                 debug("mouse passed SetIdle")
2fbdc     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2fbe0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2fbe4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2fbe8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2fbec     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2fbf0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2fbf4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2fbf8     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2fbfc     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2fc00     3F 00 00 FF 
2fc04     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2fc08     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2fc0c     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2fc10     D0 01 90 FD |                 jmp     #.notify_client
2fc14                 | end
2fc14                 | .gamepad_config
2fc14                 | if _HAVE_GAMEPAD
2fc14     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2fc18     00 00 0C F2 |                 cmp     0-0, #0                 wz
2fc1c     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2fc20     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2fc24     00 70 03 F6 |                 mov     htmp, 0-0
2fc28     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2fc2c     3F 00 00 FF 
2fc30     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2fc34     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2fc38                 | 
2fc38     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2fc3c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2fc40     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2fc44     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2fc48     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2fc4c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2fc50     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2fc54     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2fc58     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2fc5c     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2fc60     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2fc64     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2fc68     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2fc6c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2fc70                 | 
2fc70                 |                 if EMUPAD_MAX_PLAYER > 0
2fc70                 |                 
2fc70                 | .rule_loop           
2fc70                 |                 end
2fc70                 | 
2fc70     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2fc74     5C 00 90 AD |         if_e    jmp     #.xinput
2fc78     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2fc7c     00 70 03 F6 |                 mov     htmp,0-0
2fc80     01 A6 02 FF 
2fc84     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2fc88     7C 00 90 AD |         if_e    jmp     #.ps3
2fc8c                 | 
2fc8c     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2fc90     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2fc94     00 00 80 5F 
2fc98     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2fc9c     03 00 80 AF 
2fca0     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2fca4     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2fca8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2fcac     55 02 A0 FD |                 call    #control_read
2fcb0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fcb4     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2fcb8     00 00 04 56 |         if_nz   mov     0-0, #0
2fcbc     24 01 90 5D |         if_nz   jmp     #.notify_client
2fcc0     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2fcc4     56 01 00 F6 |                 mov     0-0, total_data
2fcc8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2fccc                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2fccc                 | 
2fccc     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2fcd0     10 01 90 FD |                 jmp     #.notify_client
2fcd4                 | .xinput
2fcd4     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2fcd8     2D EF 03 F6 |                 mov     pb,hdev_port
2fcdc     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2fce0     03 EE 27 F3 |                 fle     pb,#3
2fce4     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2fce8     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2fcec                 | 
2fcec     03 B0 06 F6 |                 mov     pkt_data, #3
2fcf0     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2fcf4     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2fcf8     5A 00 A0 FD |                 call    #txn_out
2fcfc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2fd00                 | 
2fd00     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2fd04     DC 00 90 FD |                 jmp     #.notify_client
2fd08                 | .ps3
2fd08     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2fd0c     2D EF 03 F6 |                 mov     pb,hdev_port
2fd10     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2fd14     04 EE 27 F3 |                 fle     pb,#4
2fd18     F7 EF C3 F9 |                 decod   pb
2fd1c     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2fd20                 | 
2fd20     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2fd24     00 0C D0 FE |                 loc     ptra, #set_report
2fd28     01 00 80 FF 
2fd2c     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2fd30     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2fd34     03 61 5C FC |                 wrword  #48, ptra[wLength]
2fd38     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2fd3c     A0 02 A0 FD |                 call    #control_write
2fd40                 | 
2fd40     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2fd44     E0 0B D0 FE |                 loc     ptra, #set_report
2fd48     01 00 80 FF 
2fd4c     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2fd50     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2fd54     03 09 5C FC |                 wrword  #4, ptra[wLength]
2fd58     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2fd5c     A0 02 A0 FD |                 call    #control_write
2fd60     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2fd64     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2fd68     00 00 04 56 |         if_nz   mov     0-0, #0
2fd6c     74 00 90 5D |         if_nz   jmp     #.notify_client
2fd70                 | 
2fd70     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2fd74     6C 00 90 FD |                 jmp     #.notify_client
2fd78                 | end
2fd78                 | 
2fd78                 | .hub_config
2fd78     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2fd7c     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2fd80     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2fd84     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2fd88     3F 00 00 FF 
2fd8c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2fd90     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2fd94                 | 
2fd94     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2fd98     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2fd9c     26 EF 03 F6 |                 mov     pb, hub_descr_p
2fda0     55 02 A0 FD |                 call    #control_read
2fda4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fda8     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2fdac     34 00 90 5D |         if_nz   jmp     #.notify_client
2fdb0                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2fdb0                 | 
2fdb0     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2fdb4     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2fdb8     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2fdbc                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2fdbc                 | .pwr_loop
2fdbc     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2fdc0     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2fdc4     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2fdc8     A0 02 A0 FD |                 call    #control_write
2fdcc     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2fdd0                 | 
2fdd0     B1 99 02 F6 |                 mov     hctwait, _500ms_
2fdd4     B0 99 02 F1 |                 add     hctwait, _100ms_
2fdd8     EF 02 A0 FD |                 call    #poll_waitx
2fddc                 | 
2fddc     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2fde0     00 00 90 FD |                 jmp     #.notify_client
2fde4                 | 
2fde4                 | .notify_client
2fde4     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2fde8     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2fdec                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2fdec                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2fdec     2D 00 64 FD |                 ret
2fdf0                 | 
2fdf0                 | '------------------------------------------------------------------------------
2fdf0                 | ' Initialize the keyboard/mouse data area to start-up values.
2fdf0                 | '------------------------------------------------------------------------------
2fdf0                 | ' On entry:
2fdf0                 | ' On exit:
2fdf0                 | '------------------------------------------------------------------------------
2fdf0                 | init_kbdm_data
2fdf0     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2fdf4     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2fdf8                 | 
2fdf8     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2fdfc     2B ED 03 F6 |                 mov     pa, cache_end_p
2fe00                 | .loop
2fe00     61 01 4C FC |                 wrbyte  #0, ptra++
2fe04     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2fe08     F4 FF 9F CD |         if_b    jmp     #.loop
2fe0c                 |         
2fe0c                 |         if EMUPAD_MAX_PLAYER > 0
2fe0c                 |         end
2fe0c                 | 
2fe0c                 | 
2fe0c     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2fe10                 | .regloop
2fe10     00 EC 8F F9 |                 altd    pa
2fe14     00 00 04 F6 |                 mov     0-0, #0
2fe18     01 EC 07 F1 |                 add     pa, #1
2fe1c     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2fe20     EC FF 9F 5D |         if_nz   jmp     #.regloop
2fe24                 | 
2fe24     E1 E1 61 FF 
2fe28     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2fe2c     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2fe30     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2fe34     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2fe38                 | 
2fe38     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2fe3c                 | 
2fe3c                 | '------------------------------------------------------------------------------
2fe3c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2fe3c                 | ' function.
2fe3c                 | '------------------------------------------------------------------------------
2fe3c                 | ' On entry:
2fe3c                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2fe3c                 | '   hpar2 - index number of the target interface.
2fe3c                 | ' On exit:
2fe3c                 | '------------------------------------------------------------------------------
2fe3c                 | hset_idle
2fe3c     A8 99 02 F6 |                 mov     hctwait, _2ms_
2fe40     EF 02 A0 FD |                 call    #poll_waitx
2fe44     D8 0A D0 FE |                 loc     ptra, #set_idle
2fe48     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2fe4c     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2fe50     A0 02 80 FD |                 jmp     #control_write
2fe54                 | 
2fe54                 | '------------------------------------------------------------------------------
2fe54                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2fe54                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2fe54                 | '------------------------------------------------------------------------------
2fe54                 | ' On entry:
2fe54                 | '   ep_addr_pid - device address and enpoint for the request.
2fe54                 | ' On exit:
2fe54                 | '   retval - transaction result.
2fe54                 | '------------------------------------------------------------------------------
2fe54                 | hset_kbdled_report
2fe54     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2fe58     CC 0A D0 FE |                 loc     ptra, #set_report
2fe5c     01 00 80 FF 
2fe60     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2fe64     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2fe68     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2fe6c     27 EF 03 F6 |                 mov     pb, urx_buff_p
2fe70     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2fe74     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2fe78                 | 
2fe78                 | '------------------------------------------------------------------------------
2fe78                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2fe78                 | '------------------------------------------------------------------------------
2fe78                 | ' On entry:
2fe78                 | ' On exit:
2fe78                 | '------------------------------------------------------------------------------
2fe78                 | hget_kbd_in_report
2fe78     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2fe7c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2fe80     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2fe84     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2fe88     CF 02 A0 FD |                 call    #do_int_in
2fe8c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fe90     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2fe94                 | 
2fe94     00 90 0F F2 |                 cmp     hpar3, #0               wz
2fe98     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2fe9c                 | 
2fe9c     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2fea0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2fea4     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2fea8     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2feac                 | 
2feac     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2feb0     18 00 B0 FD |                 call    #hkbd_compare
2feb4                 |         if EMUPAD_MAX_PLAYER > 0
2feb4                 |         end
2feb4                 | 
2feb4                 | .led_check
2feb4     3B 71 03 F6 |                 mov     htmp, kb_led_states
2feb8     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2febc     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2fec0     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2fec4     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2fec8     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2fecc                 | 
2fecc                 | '------------------------------------------------------------------------------
2fecc                 | ' Compare current and previous keyboard data buffers for keypress changes.
2fecc                 | '------------------------------------------------------------------------------
2fecc                 | hkbd_compare
2fecc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2fed0     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2fed4     61 73 07 FB |                 rdlong  htmp1, ptra++
2fed8     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2fedc     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2fee0     61 73 07 FB |                 rdlong  htmp1, ptra++
2fee4     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2fee8     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2feec     2D 00 64 AD |         if_z    ret
2fef0                 | 
2fef0     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2fef4                 | 
2fef4                 |                 ' Handle modifiers
2fef4     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2fef8     00 87 C7 FA |                 rdbyte  hr1, ptra
2fefc     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2ff00     63 86 63 FD |                 mergew  hr1
2ff04     08 EC 07 F6 |                 mov     pa,#8
2ff08                 | .modloop
2ff08     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2ff0c     E8 8C 07 F6 |                 mov     hpar1,#$E8
2ff10     F6 8D 83 F1 |                 sub     hpar1,pa
2ff14     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2ff18     FB ED 6F FB |                 djnz    pa,#.modloop
2ff1c                 | 
2ff1c     6F E0 75 FD | .release        modc    _set    wc
2ff20                 |                 'alts    hdev_port, #hid_report_p
2ff20                 |                 'mov     ptra, hid_report_p
2ff20     02 F0 07 F1 |                 add     ptra, #2
2ff24     06 EC 07 F6 |                 mov     pa, #6
2ff28     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2ff2c     20 00 90 AD |         if_z    jmp     #.rl3
2ff30     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2ff34     02 F2 07 F1 |                 add     ptrb, #2
2ff38     06 EE 07 F6 |                 mov     pb, #6
2ff3c     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2ff40     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2ff44     08 00 90 AD |         if_z    jmp     #.rl3
2ff48     FC EF 6F FB |                 djnz    pb, #.rl2
2ff4c     68 00 B0 FD |                 call    #hkbd_translate
2ff50     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2ff54                 | 
2ff54     00 90 07 F6 |                 mov     hpar3, #0
2ff58     1F 90 27 F4 |                 bith    hpar3, #31
2ff5c                 | 
2ff5c     6F 00 74 FD | .press          modc    _clr    wc
2ff60     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2ff64     02 F0 07 F1 |                 add     ptra, #2
2ff68     06 EC 07 F6 |                 mov     pa, #6
2ff6c     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2ff70     20 00 90 AD |         if_z    jmp     #.pl3
2ff74     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2ff78     02 F2 07 F1 |                 add     ptrb, #2
2ff7c     06 EE 07 F6 |                 mov     pb, #6
2ff80     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2ff84     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2ff88     08 00 90 AD |         if_z    jmp     #.pl3
2ff8c     FC EF 6F FB |                 djnz    pb, #.pl2
2ff90     24 00 B0 FD |                 call    #hkbd_translate
2ff94     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2ff98                 | 
2ff98     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2ff9c     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2ffa0     28 02 64 FD |                 setq #1
2ffa4     61 73 07 FB |                 rdlong  htmp1, ptra++
2ffa8     28 02 64 FD |                 setq #1
2ffac     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2ffb0     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2ffb4                 | 
2ffb4     2D 00 64 FD |                 ret
2ffb8                 | 
2ffb8                 | '------------------------------------------------------------------------------
2ffb8                 | ' Translate keyboard scancode to ASCII
2ffb8                 | '------------------------------------------------------------------------------
2ffb8                 | ' On entry:
2ffb8                 | '   hpar1 - scancode
2ffb8                 | '   hpar2 - key modifiers state
2ffb8                 | '       c - pressed (0) or released (1) flag
2ffb8                 | ' On exit:
2ffb8                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2ffb8                 | '               30..17 = unused
2ffb8                 | '                   18 = scroll-lock state 
2ffb8                 | '                   17 = caps-lock state
2ffb8                 | '                   16 = num-lock state 
2ffb8                 | '                15..8 = key modifiers state
2ffb8                 | '                 7..0 = scancode
2ffb8                 | '------------------------------------------------------------------------------
2ffb8                 | hkbd_translate
2ffb8     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2ffbc     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2ffc0     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2ffc4     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2ffc8     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2ffcc     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2ffd0                 | 
2ffd0                 |         if EMUPAD_MAX_PLAYER > 0
2ffd0                 | 
2ffd0                 |         if EMUPAD_BT0_BIT >= 0
2ffd0                 |         end
2ffd0                 |         if EMUPAD_BT1_BIT >= 0
2ffd0                 |         end
2ffd0                 |         if EMUPAD_BT2_BIT >= 0
2ffd0                 |         end
2ffd0                 |         if EMUPAD_BT3_BIT >= 0
2ffd0                 |         end
2ffd0                 |         if EMUPAD_BT4_BIT >= 0
2ffd0                 |         end
2ffd0                 |         if EMUPAD_BT5_BIT >= 0
2ffd0                 |         end
2ffd0                 |         if EMUPAD_BT6_BIT >= 0
2ffd0                 |         end
2ffd0                 |         if EMUPAD_BT7_BIT >= 0
2ffd0                 |         end
2ffd0                 |         if EMUPAD_BT8_BIT >= 0
2ffd0                 |         end
2ffd0                 |         if EMUPAD_BT9_BIT >= 0
2ffd0                 |         end
2ffd0                 | 
2ffd0                 |         end
2ffd0     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2ffd4     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2ffd8     1F 8C 47 F4 |                 bitc    hpar1, #31
2ffdc                 |         if KEYQUEUE_SIZE > 0
2ffdc     C4 09 B0 FE |                 loc pb,#keyq_head
2ffe0     F7 71 E3 FA |                 rdword htmp,pb
2ffe4     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2ffe8     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2ffec     B8 75 03 F6 |                 mov htmp2,htmp
2fff0     04 74 07 FA |                 mul htmp2,#4
2fff4     F7 75 03 F1 |                 add htmp2,pb
2fff8     02 74 07 F1 |                 add htmp2,#2
2fffc     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
30000     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
30004     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
30008     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3000c                 |         end
3000c     2D 00 7C FD |                 ret wcz
30010                 | 
30010                 | if HAVE_MOUSE
30010                 | '------------------------------------------------------------------------------
30010                 | ' Execute an IN interrupt transaction to poll for mouse activity.
30010                 | '------------------------------------------------------------------------------
30010                 | ' On entry:
30010                 | ' On exit:
30010                 | '------------------------------------------------------------------------------
30010                 | hget_mouse_in_report
30010     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
30014     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
30018     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3001c     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
30020     CF 02 A0 FD |                 call    #do_int_in
30024     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30028     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3002c                 | 
3002c     00 90 0F F2 |                 cmp     hpar3, #0               wz
30030     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
30034                 | 
30034     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
30038     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3003c     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
30040     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
30044                 | 
30044     27 F1 03 F6 |                 mov     ptra, urx_buff_p
30048     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3004c     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
30050     01 90 87 31 |         if_ae   sub     hpar3, #1
30054                 | 
30054     40 09 90 FE |                 loc     pa, #mouse_limits
30058     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3005c                 | 
3005c                 |                 ' load xacc,yacc,zacc
3005c     28 04 64 FD |                 setq    #3-1
30060     80 87 07 FB |                 rdlong  hr1,ptrb
30064                 |                 ' load limits and outptr
30064     28 04 64 FD |                 setq    #3-1
30068     F6 73 03 FB |                 rdlong  htmp1,pa
3006c                 | 
3006c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
30070     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
30074     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
30078     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3007c     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
30080     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
30084     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
30088     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3008c                 |               
3008c                 | 
3008c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
30090     07 70 67 F7 |                 signx   htmp, #7
30094     B8 87 03 F1 |                 add     hr1,htmp
30098     00 72 0F F2 |                 cmp     htmp1,#0 wz
3009c     B9 87 63 53 |         if_ne   fles    hr1,htmp1
300a0     00 86 47 53 |         if_ne   fges    hr1,#0
300a4                 | 
300a4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
300a8     07 70 67 F7 |                 signx   htmp, #7
300ac     B8 89 03 F1 |                 add     hr2,htmp
300b0     00 74 0F F2 |                 cmp     htmp2,#0 wz
300b4     BA 89 63 53 |         if_ne   fles    hr2,htmp2
300b8     00 88 47 53 |         if_ne   fges    hr2,#0
300bc                 |                 
300bc                 | 
300bc     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
300c0     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
300c4     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
300c8     B8 8B 03 A1 |         if_z    add     hr3,htmp
300cc                 | 
300cc     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
300d0     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
300d4                 | 
300d4                 |                 ' write back accumulators
300d4     28 04 64 FD |                 setq    #3-1
300d8     80 87 67 FC |                 wrlong  hr1,ptrb
300dc                 |                 ' if outptr set, write X/Y words
300dc     00 76 0F F2 |                 cmp htmp3,#0                    wz
300e0     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
300e4     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
300e8     2D 00 64 FD |                 ret
300ec                 | end
300ec                 | 
300ec                 | '------------------------------------------------------------------------------
300ec                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
300ec                 | '------------------------------------------------------------------------------
300ec                 | ' On entry:
300ec                 | ' On exit:
300ec                 | '------------------------------------------------------------------------------
300ec                 | if _HAVE_GAMEPAD
300ec                 | hget_gp_in_report
300ec     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
300f0     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
300f4                 | 
300f4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
300f8     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
300fc     00 90 E3 F8 |                 getbyte hpar3
30100     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
30104     CF 02 A0 FD |                 call    #do_int_in
30108     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3010c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
30110                 | 
30110     00 90 0F F2 |                 cmp     hpar3, #0               wz
30114     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
30118                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
30118                 | 
30118     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3011c     00 70 E3 F8 |                 getbyte htmp                            ' |
30120     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
30124     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
30128     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3012c     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
30130     B8 01 C0 F8 |                 setbyte htmp                            ' |
30134                 | 
30134                 | ' Note: the following code compares the current and previous reports
30134                 | ' and process the data if there are changes to ease the debug output.
30134                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
30134                 | ' gpPreReport buffer.
30134                 | 
30134                 |                 ' ----- start of block to remove
30134                 |                 {
30134                 |                 }
30134                 |                 ' ----- end of block to remove
30134     F4 04 90 FE |                 loc pa,#hpad_translate
30138     2A EC 63 FD |                 push pa
3013c                 | 
3013c                 |                 ' FALL THROUGH !!!!
3013c                 | 
3013c                 | '------------------------------------------------------------------------------
3013c                 | ' Decode controller report
3013c                 | '------------------------------------------------------------------------------
3013c                 | hid_decode
3013c                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3013c     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
30140     00 04 00 FF 
30144     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
30148                 | 
30148     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3014c                 | 
3014c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
30150     00 2A E3 F8 |                 getbyte hidr_type
30154     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
30158     34 02 90 AD |         if_z    jmp     #hpad_xinput
3015c     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
30160     1C 03 90 AD |         if_z    jmp     #hpad_ps3
30164     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
30168     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3016c     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
30170                 |                 
30170                 | 
30170                 | '------------------------------------------------------------------------------
30170                 | ' Handle HID controller (or mouse now
30170                 | ' On entry:
30170                 | '   ptrb - controller report
30170                 | '------------------------------------------------------------------------------
30170                 | hpad_hid
30170     1B 01 A0 FD |                 call    #get_hid_descr_buffer
30174     F7 F1 03 F6 |                 mov     ptra, pb
30178     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3017c     00 EC 03 F6 |                 mov     pa, 0-0
30180                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
30180     19 2A 3B FF 
30184     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
30188                 | 
30188                 | .next
30188     00 EC 5F F2 |                 cmps    pa, #0      wcz
3018c     2D 00 7C ED |         if_be   ret     wcz
30190                 | 
30190     61 8D C7 FA |                 rdbyte  hpar1, ptra++
30194     01 EC 87 F1 |                 sub     pa, #1
30198     00 8E 07 F6 |                 mov     hpar2, #0
3019c                 | 
3019c     C6 71 03 F6 |                 mov     htmp, hpar1
301a0     03 70 07 F5 |                 and     htmp, #$03
301a4     01 70 0F F2 |                 cmp     htmp, #1    wz
301a8     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
301ac     07 8E 67 A7 |         if_z    signx   hpar2,#7
301b0     01 EC 87 A1 |         if_z    sub     pa, #1
301b4     02 70 0F F2 |                 cmp     htmp, #2    wz
301b8     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
301bc     0F 8E 67 A7 |         if_z    signx   hpar2,#15
301c0     02 EC 87 A1 |         if_z    sub     pa, #2
301c4     03 70 0F F2 |                 cmp     htmp, #3    wz
301c8     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
301cc     04 EC 87 A1 |         if_z    sub     pa, #4
301d0                 | 
301d0     FC 8C 07 F5 |                 and     hpar1, #$FC
301d4                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
301d4                 | 
301d4     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
301d8     0C 01 90 AD |         if_z    jmp     #.report_id
301dc     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
301e0     24 01 90 AD |         if_z    jmp     #.usage_page
301e4     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
301e8     2C 01 90 AD |         if_z    jmp     #.usage
301ec     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
301f0     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
301f4     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
301f8     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
301fc     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
30200     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
30204     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
30208     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3020c     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
30210     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
30214     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
30218     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3021c     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
30220     64 FF 9F 5D |         if_nz   jmp     #.next
30224                 | 
30224     D8 1D A7 FB |                 tjf     hidr_state,#.next
30228                 | 
30228     03 8E 07 F5 |                 and     hpar2, #$03
3022c     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
30230     18 00 90 5D |         if_nz   jmp     #.skip
30234                 | 
30234     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
30238     20 00 90 AD |         if_z    jmp     #.axes
3023c     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
30240     5C 00 90 AD |         if_z    jmp     #.hats
30244     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
30248     70 00 90 AD |         if_z    jmp     #.buttons
3024c                 | .skip
3024c     8F 71 03 F6 |                 mov     htmp, hidr_size
30250     90 71 03 FA |                 mul     htmp, hidr_count
30254     B8 23 03 F1 |                 add     hidr_offset, htmp
30258     2C FF 9F FD |                 jmp     #.next
3025c                 | .axes
3025c                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3025c     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
30260     90 87 03 F6 |                 mov     hr1, hidr_count
30264                 | .l1
30264     91 8D 03 F6 |                 mov     hpar1, hidr_offset
30268     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3026c     04 03 B0 FD |                 call    #hpad_getbits
30270     64 03 B0 FD |                 call    #hpad_normalize
30274     06 84 1F F2 |                 cmp     hr0, #6         wcz
30278     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3027c     00 88 43 C8 |         if_b    getnib  hr2
30280     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
30284     5F 01 20 C9 |         if_b    setword retval
30288     01 84 07 C1 |         if_b    add     hr0, #1
3028c     8F 23 03 F1 |                 add     hidr_offset, hidr_size
30290     F4 87 6F FB |                 djnz    hr1, #.l1
30294                 | 
30294     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
30298     01 1C 07 F6 |                 mov     hidr_state, #1
3029c     E8 FE 9F FD |                 jmp     #.next
302a0                 | .hats
302a0                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
302a0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
302a4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
302a8     C8 02 B0 FD |                 call    #hpad_getbits
302ac     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
302b0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
302b4     01 1C 07 F6 |                 mov     hidr_state, #1
302b8     90 FF 9F FD |                 jmp     #.skip
302bc                 | .buttons
302bc                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
302bc     91 8D 03 F6 |                 mov     hpar1, hidr_offset
302c0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
302c4     90 8F 03 FA |                 mul     hpar2, hidr_count
302c8     A8 02 B0 FD |                 call    #hpad_getbits
302cc     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
302d0     B8 BF 62 F0 |                 shl     retval, htmp
302d4     5F 17 43 F5 |                 or      hidr_buttons, retval
302d8     90 71 03 F1 |                 add     htmp, hidr_count
302dc     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
302e0     01 1C 07 F6 |                 mov     hidr_state, #1
302e4     64 FF 9F FD |                 jmp     #.skip
302e8                 | .report_id
302e8     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
302ec     2D 00 7C 5D |         if_nz   ret     wcz
302f0     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
302f4     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
302f8     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
302fc     01 1C 67 56 |         if_nz   neg     hidr_state,#1
30300     01 F2 87 51 |         if_nz   sub     ptrb,#1
30304     80 FE 9F FD |                 jmp     #.next
30308                 | .usage_page
30308     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3030c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
30310     04 1C 07 A6 |         if_z    mov     hidr_state, #4
30314     70 FE 9F FD |                 jmp     #.next
30318                 | .usage
30318     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3031c     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
30320     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
30324     01 1C 07 A6 |         if_z    mov     hidr_state, #1
30328     5C FE 9F AD |         if_z    jmp     #.next
3032c     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
30330     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
30334     01 1C 07 A6 |         if_z    mov     hidr_state, #1
30338     4C FE 9F AD |         if_z    jmp     #.next
3033c     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
30340     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
30344     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
30348     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3034c     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
30350     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
30354     10 00 90 AD |         if_z    jmp     #.usage_axis
30358     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3035c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
30360     03 1C 07 A6 |         if_z    mov     hidr_state, #3
30364     20 FE 9F FD |                 jmp     #.next
30368                 | .usage_axis
30368     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3036c     18 FE 9F CD |         if_b    jmp     #.next
30370     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
30374     C7 01 00 F8 |                 setnib  hpar2
30378                 | 
30378     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3037c     C7 8F C3 F9 |                 decod   hpar2
30380     C7 0F 43 F5 |                 or      hidr_flags, hpar2
30384                 | 
30384     01 24 07 F1 |                 add     hidr_usage_idx, #1
30388     02 1C 07 F6 |                 mov     hidr_state, #2
3038c     F8 FD 9F FD |                 jmp     #.next
30390                 | 
30390                 | '------------------------------------------------------------------------------
30390                 | ' Handle XInput controller
30390                 | ' On entry:
30390                 | '   ptrb - controller report
30390                 | '------------------------------------------------------------------------------
30390                 | '   Default implementation translates the report to a pseudo-defacto hid
30390                 | '   standard and jumps to hpad_translate for actions.
30390                 | '   Implementors may take specific actions for this kind of controller.
30390                 | '------------------------------------------------------------------------------
30390                 | hpad_xinput
30390     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
30394     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
30398     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3039c     14 70 0F F2 |                 cmp     htmp, #$14      wz
303a0     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
303a4                 | 
303a4                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
303a4                 | 
303a4     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
303a8     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
303ac                 | 
303ac     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
303b0     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
303b4     5F BF 22 F6 |                 not     retval
303b8     5F 11 2B F9 |                 setword hidr_axis, retval, #1
303bc     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
303c0     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
303c4     5F BF 22 F6 |                 not     retval
303c8     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
303cc                 | 
303cc     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
303d0     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
303d4     C0 BE 1E F2 |                 cmp     retval, #192    wcz
303d8     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
303dc     F8 01 B0 FD |                 call    #hpad_normalize
303e0     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
303e4     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
303e8     C0 BE 1E F2 |                 cmp     retval, #192    wcz
303ec     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
303f0     E4 01 B0 FD |                 call    #hpad_normalize
303f4     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
303f8                 | 
303f8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
303fc     81 BF E6 FA |                 rdword  retval, ptrb[1]
30400     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
30404     00 16 47 F4 |                 bitc    hidr_buttons, #0
30408     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3040c     01 16 47 F4 |                 bitc    hidr_buttons, #1
30410     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
30414     02 16 47 F4 |                 bitc    hidr_buttons, #2
30418     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3041c     03 16 47 F4 |                 bitc    hidr_buttons, #3
30420     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
30424     04 16 47 F4 |                 bitc    hidr_buttons, #4
30428     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3042c     05 16 47 F4 |                 bitc    hidr_buttons, #5
30430     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
30434     08 16 47 F4 |                 bitc    hidr_buttons, #8
30438     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3043c     09 16 47 F4 |                 bitc    hidr_buttons, #9
30440     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
30444     0A 16 47 F4 |                 bitc    hidr_buttons, #10
30448     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3044c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
30450     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
30454     0C 16 47 F4 |                 bitc    hidr_buttons, #12
30458                 | 
30458     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3045c     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
30460     7A BB 7A FF 
30464     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
30468     F9 FF 7F FF 
3046c     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
30470     B9 71 5F F9 |                 altgn   htmp, #htmp1
30474     00 70 43 F8 |                 getnib  htmp
30478     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3047c                 | 
3047c     AC 01 90 FD |                 jmp     #hpad_translate
30480                 | 
30480                 | '------------------------------------------------------------------------------
30480                 | ' Handle PS3 controller
30480                 | ' On entry:
30480                 | '   ptrb - controller report
30480                 | '------------------------------------------------------------------------------
30480                 | '   Default implementation translates the report to a pseudo-defacto hid
30480                 | '   standard and jumps to hpad_translate for actions.
30480                 | '   Implementors may take specific actions for this kind of controller.
30480                 | '------------------------------------------------------------------------------
30480                 | hpad_ps3
30480     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
30484     01 70 0F F2 |                 cmp     htmp, #$01      wz
30488     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3048c                 | 
3048c                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3048c                 | 
3048c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
30490     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
30494     40 01 B0 FD |                 call    #hpad_normalize
30498     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3049c     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
304a0     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
304a4     30 01 B0 FD |                 call    #hpad_normalize
304a8     5F 11 2B F9 |                 setword hidr_axis, retval, #1
304ac     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
304b0     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
304b4     20 01 B0 FD |                 call    #hpad_normalize
304b8     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
304bc     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
304c0     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
304c4     10 01 B0 FD |                 call    #hpad_normalize
304c8     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
304cc     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
304d0     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
304d4                 | 
304d4     08 8C 07 F6 |                 mov     hpar1, #8
304d8     13 8E 07 F6 |                 mov     hpar2, #19
304dc     94 00 B0 FD |                 call    #hpad_getbits
304e0                 | 
304e0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
304e4     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
304e8     00 16 47 F4 |                 bitc    hidr_buttons, #0
304ec     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
304f0     01 16 47 F4 |                 bitc    hidr_buttons, #1
304f4     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
304f8     02 16 47 F4 |                 bitc    hidr_buttons, #2
304fc     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
30500     03 16 47 F4 |                 bitc    hidr_buttons, #3
30504     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
30508     04 16 47 F4 |                 bitc    hidr_buttons, #4
3050c     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
30510     05 16 47 F4 |                 bitc    hidr_buttons, #5
30514     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
30518     06 16 47 F4 |                 bitc    hidr_buttons, #6
3051c     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
30520     07 16 47 F4 |                 bitc    hidr_buttons, #7
30524     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
30528     08 16 47 F4 |                 bitc    hidr_buttons, #8
3052c     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
30530     09 16 47 F4 |                 bitc    hidr_buttons, #9
30534     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
30538     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3053c     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
30540     0B 16 47 F4 |                 bitc    hidr_buttons, #11
30544     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
30548     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3054c                 | 
3054c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
30550     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
30554     09 FA 79 FF 
30558     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3055c     FF FA 7F FF 
30560     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
30564     B9 71 5F F9 |                 altgn   htmp, #htmp1
30568     00 70 43 F8 |                 getnib  htmp
3056c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
30570                 | 
30570     B8 00 90 FD |                 jmp     #hpad_translate
30574                 | 
30574                 | '------------------------------------------------------------------------------
30574                 | ' Read bits from report data buffer
30574                 | '------------------------------------------------------------------------------
30574                 | ' On entry:
30574                 | '   PTRB - report buffer
30574                 | '   hpar1 - start bit
30574                 | '   hpar2 - number of bits
30574                 | ' On exit:
30574                 | '   retval - bits
30574                 | '------------------------------------------------------------------------------
30574                 | hpad_getbits
30574     C6 71 03 F6 |                 mov     htmp, hpar1
30578     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3057c     F9 71 03 F1 |                 add     htmp, ptrb
30580     B8 BF 02 FB |                 rdlong  retval, htmp
30584                 | 
30584     C6 73 03 F6 |                 mov     htmp1, hpar1
30588     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3058c     B9 BF 42 F0 |                 shr     retval, htmp1
30590                 | 
30590     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
30594     10 00 90 1D |         if_a    jmp     #.l1
30598                 | 
30598     C7 8F C3 F9 |                 decod   hpar2
3059c     01 8E 87 F1 |                 sub     hpar2, #1
305a0     C7 BF 02 F5 |                 and     retval, hpar2
305a4     2D 00 64 FD |                 ret
305a8                 | .l1
305a8     FF 7F 00 FF 
305ac     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
305b0     03 70 07 F1 |                 add     htmp, #3
305b4     B8 75 03 FB |                 rdlong  htmp2, htmp
305b8     18 8E 87 F1 |                 sub     hpar2, #24
305bc     C7 8F C3 F9 |                 decod   hpar2
305c0     01 8E 87 F1 |                 sub     hpar2, #1
305c4     B9 75 43 F0 |                 shr     htmp2, htmp1
305c8     C7 75 03 F5 |                 and     htmp2, hpar2
305cc     18 74 67 F0 |                 shl     htmp2, #24
305d0     BA BF 42 F5 |                 or      retval, htmp2
305d4     2D 00 64 FD |                 ret
305d8                 | 
305d8                 | '------------------------------------------------------------------------------
305d8                 | ' Normalize value to signed word (-32768 / 32767)
305d8                 | '------------------------------------------------------------------------------
305d8                 | ' On entry:
305d8                 | '   retval - value to normalize
305d8                 | '   hidr_lminmax - min (word 1) max (word 0) value range
305d8                 | '   - or -
305d8                 | '   hidr_pminmax - min (word 1) max (word 0) value range
305d8                 | '   hidr_size - value bits length
305d8                 | ' On exit:
305d8                 | '   retval - normalized value
305d8                 | '------------------------------------------------------------------------------
305d8                 | hpad_normalize
305d8     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
305dc     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
305e0     2D 00 64 AD |         if_z    ret
305e4     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
305e8     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
305ec     0F 72 77 F7 |                 signx   htmp1, #15      wc
305f0     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
305f4     00 BE 66 C7 |         if_c    signx   retval, #0-0
305f8     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
305fc     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
30600     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
30604     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
30608     B8 71 53 F6 |                 abs     htmp            wc
3060c     1F BE 0E F4 |                 testb   retval, #31     wz
30610     5F BF 42 F6 |                 abs     retval
30614     B8 BF 12 FD |                 qdiv    retval, htmp
30618     18 BE 62 FD |                 getqx   retval
3061c     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
30620     C0 FF 7F FF 
30624     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
30628     2D 00 64 FD |                 ret
3062c                 | 
3062c                 | '------------------------------------------------------------------------------
3062c                 | ' Perform controller actions
3062c                 | ' On entry:
3062c                 | '    hidr_id        report id
3062c                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3062c                 | '                      X = hidr_axis+0, #0
3062c                 | '                      Y = hidr_axis+0, #1
3062c                 | '                      Z = hidr_axis+1, #0
3062c                 | '                     RX = hidr_axis+1, #1
3062c                 | '                     RY = hidr_axis+2, #0
3062c                 | '                     RZ = hidr_axis+2, #1
3062c                 | '    hidr_buttons   buttons state (bits 0 to 31)
3062c                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3062c                 | '
3062c                 | '                     -------3 -------2 -------1 -------0 byte
3062c                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3062c                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3062c                 | '                                zyx||| |||||||| ++++++++ n. buttons
3062c                 | '                                |||||| ||||++++--------- n. axes
3062c                 | '                                |||||| ++++------------- n. hats
3062c                 | '                                ++++++------------------ valid axes
3062c                 | '------------------------------------------------------------------------------
3062c                 | hpad_translate
3062c                 | 
3062c                 | 
3062c                 |         if HAVE_HIDPAD
3062c     84 0C F0 FE |                 loc     ptrb,#hidpad_report
30630     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
30634     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
30638     01 70 E7 F2 |                 cmpsub  htmp,#1
3063c     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
30640     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
30644     2D 00 7C 3D |         if_ae   ret     wcz
30648     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3064c     B8 F3 03 F1 |                 add     ptrb,htmp
30650     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
30654     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
30658     28 0C 64 FD |                 setq    #7-1
3065c     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
30660                 |         end
30660                 | 
30660                 | 
30660                 |         if EMUPAD_MAX_PLAYER > 0
30660                 | .emupad_no_hat
30660                 |         if EMUPAD_BT0_BIT >= 0
30660                 |         end
30660                 |         if EMUPAD_BT1_BIT >= 0
30660                 |         end
30660                 |         if EMUPAD_BT2_BIT >= 0
30660                 |         end
30660                 |         if EMUPAD_BT3_BIT >= 0
30660                 |         end
30660                 |         if EMUPAD_BT4_BIT >= 0
30660                 |         end
30660                 |         if EMUPAD_BT5_BIT >= 0
30660                 |         end
30660                 |         if EMUPAD_BT6_BIT >= 0
30660                 |         end
30660                 |         if EMUPAD_BT7_BIT >= 0
30660                 |         end
30660                 |         if EMUPAD_BT8_BIT >= 0
30660                 |         end
30660                 |         if EMUPAD_BT9_BIT >= 0
30660                 |         end
30660                 | .emupad_slot_over
30660                 |         end
30660                 | 
30660                 |         if 0
30660                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
30660                 | 
30660                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
30660                 | 
30660                 |         end
30660     2D 00 64 FD |                 ret
30664                 | end
30664                 | 
30664                 | if EMUPAD_MAX_PLAYER > 0
30664                 | '------------------------------------------------------------------------------
30664                 | ' Clear EmuPad state
30664                 | '------------------------------------------------------------------------------
30664                 | emupad_reset
30664                 | 
30664                 | '------------------------------------------------------------------------------
30664                 | ' Get EmuPad Player number for current device (into retval)
30664                 | ' Z flag is also set if current device is valid
30664                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
30664                 | '------------------------------------------------------------------------------
30664                 | emupad_getnum
30664                 | .loop
30664                 | '------------------------------------------------------------------------------
30664                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
30664                 | '------------------------------------------------------------------------------
30664                 | emupad_discon
30664                 | .loop         
30664                 |         
30664                 |         ' FALL THROUGH!!!
30664                 | 
30664                 | '------------------------------------------------------------------------------
30664                 | ' Update EmuPad reports (all of them...)
30664                 | '------------------------------------------------------------------------------
30664                 | emupad_write_reports
30664                 | .devloop
30664                 | 
30664                 | end
30664                 | 
30664                 | 
30664                 | '------------------------------------------------------------------------------
30664                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
30664                 | '------------------------------------------------------------------------------
30664                 | ' On entry:
30664                 | ' On exit:
30664                 | '------------------------------------------------------------------------------
30664                 | hget_hub_status
30664     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
30668     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3066c     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
30670     01 90 2F F9 |                 setword hpar3, #1, #1
30674     CF 02 A0 FD |                 call    #do_int_in
30678     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3067c     0C 00 90 AD |         if_z    jmp     #.data
30680     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
30684     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
30688     2D 00 64 FD |                 ret
3068c                 | .data
3068c     00 90 0F F2 |                 cmp     hpar3, #0               wz
30690     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
30694                 | 
30694     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
30698     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3069c     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
306a0     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
306a4                 |                 debug(ubin_long(hub_status_chg))
306a4                 | 
306a4     01 5A 06 F6 |                 mov     hdev_port, #1
306a8                 | .loop
306a8     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
306ac     0C 00 B0 AD |         if_x1   call    #hub_port_handler
306b0     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
306b4     F0 FF 9F 3D |         if_nc   jmp     #.loop
306b8     2D 00 64 FD |                 ret
306bc                 | 
306bc                 | hub_port_handler
306bc     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
306c0     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
306c4     27 EF 03 F6 |                 mov     pb, urx_buff_p
306c8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
306cc     55 02 A0 FD |                 call    #control_read
306d0     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
306d4                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
306d4                 | 
306d4     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
306d8     50 01 90 5D |         if_x0   jmp     #.other
306dc     68 02 D0 FE |                 loc     ptra, #clr_port_feat
306e0     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
306e4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
306e8     A0 02 A0 FD |                 call    #control_write
306ec     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
306f0     7C 01 90 5D |         if_x0   jmp     #.disconnect
306f4     B0 99 02 F6 |                 mov     hctwait, _100ms_
306f8     EF 02 A0 FD |                 call    #poll_waitx
306fc                 | 
306fc     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
30700     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
30704     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30708     A0 02 A0 FD |                 call    #control_write
3070c                 | 
3070c     02 76 07 F6 |                 mov     htmp3, #2
30710                 | .wait_reset
30710     AC 99 02 F6 |                 mov     hctwait, _8ms_
30714     EF 02 A0 FD |                 call    #poll_waitx
30718     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3071c     27 EF 03 F6 |                 mov     pb, urx_buff_p
30720     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30724     55 02 A0 FD |                 call    #control_read
30728     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3072c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
30730     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
30734                 | 
30734     10 02 D0 FE |                 loc     ptra, #clr_port_feat
30738     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3073c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30740     A0 02 A0 FD |                 call    #control_write
30744                 | 
30744     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
30748                 | .wait_recover
30748     A7 99 02 F6 |                 mov     hctwait, _1ms_
3074c     EF 02 A0 FD |                 call    #poll_waitx
30750     FD 71 6F FB |                 djnz    htmp,#.wait_recover
30754                 | 
30754     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
30758     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3075c     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
30760                 | 
30760     00 08 00 FF 
30764     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
30768     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3076c     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
30770     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
30774     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
30778     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3077c     48 01 90 5D |         if_nz   jmp     #.done
30780                 | .get_dev_desc
30780     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
30784     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
30788     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3078c     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
30790     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
30794     01 71 57 FC |                 wrword  htmp, ptra[wValue]
30798     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3079c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
307a0     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
307a4     AC 99 02 F6 |                 mov     hctwait, _8ms_
307a8     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
307ac     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
307b0     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
307b4     BE 00 A0 FD |                 call    #calc_crc5
307b8     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
307bc     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
307c0     F7 AD C2 FA |                 rdbyte  total_data, pb
307c4     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
307c8     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
307cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
307d0     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
307d4     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
307d8     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
307dc                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
307dc     9F 99 02 F6 |                 mov     hctwait, _500us_
307e0     EF 02 A0 FD |                 call    #poll_waitx
307e4     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
307e8     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
307ec     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
307f0     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
307f4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
307f8     CC 00 90 5D |         if_nz   jmp     #.done
307fc     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
30800     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
30804     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
30808     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3080c     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
30810     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
30814     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
30818     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3081c     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
30820     A4 00 90 CD |         if_b    jmp     #.done
30824     6C F0 BF FD |                 call    #hparse_con_desc
30828     9C 00 90 FD |                 jmp     #.done
3082c                 | 
3082c                 | .other
3082c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
30830     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
30834     28 00 90 AD |         if_x1   jmp     #.reset_feature
30838     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3083c     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
30840     1C 00 90 AD |         if_x1   jmp     #.reset_feature
30844     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
30848     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3084c     10 00 90 AD |         if_x1   jmp     #.reset_feature
30850     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
30854     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
30858     04 00 90 AD |         if_x1   jmp     #.reset_feature
3085c     68 00 90 FD |                 jmp     #.done
30860                 | .reset_feature
30860     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
30864     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30868     A0 02 A0 FD |                 call    #control_write
3086c     58 00 90 FD |                 jmp     #.done
30870                 | .disconnect
30870                 | 
30870     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
30874     00 70 E3 F8 |                 getbyte htmp
30878     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3087c     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
30880     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
30884     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
30888     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3088c     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
30890                 |         if EMUPAD_MAX_PLAYER > 0
30890                 |         end
30890                 |         if HAVE_MOUSE
30890     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
30894     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
30898     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3089c                 |         end
3089c                 |         if HAVE_HIDPAD
3089c     14 0A F0 FE |                 loc ptrb,#hidpad_report
308a0     2D 71 03 F6 |                 mov htmp,hdev_port
308a4     01 70 E7 F2 |                 cmpsub htmp,#1
308a8     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
308ac     B8 F3 03 F1 |                 add ptrb,htmp
308b0     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
308b4     80 01 6C FC |                 wrlong #0,ptrb
308b8                 |         end
308b8                 | 
308b8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
308bc     00 00 C4 F8 |                 setbyte #0
308c0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
308c4     00 00 04 F6 |                 mov     0-0, #0
308c8                 | 
308c8                 | .done
308c8     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
308cc     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
308d0     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
308d4     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
308d8     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
308dc     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
308e0                 | 
308e0     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
308e4     27 EF 03 F6 |                 mov     pb, urx_buff_p
308e8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
308ec     55 02 A0 FD |                 call    #control_read
308f0     00 69 06 FB |                 rdlong  hub_port_status, ptra
308f4                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
308f4     2D 00 64 FD |                 ret
308f8                 | 
308f8                 | '------------------------------------------------------------------------------
308f8                 | ' Partially populated SETUP packets
308f8                 | '------------------------------------------------------------------------------
308f8     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
308f9     06          |                 byte    REQ_GET_DESC
308fa     00 01       |                 word    TYPE_DEVICE << 8
308fc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
308fe     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30900     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
30901     06          |                 byte    REQ_GET_DESC
30902     00 02       |                 word    TYPE_CONFIG << 8
30904     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
30906     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30908     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
30909     09          |                 byte    REQ_SET_CONFIG
3090a     00 00       |                 word    0       ' Configuration value
3090c     00 00       |                 word    0       ' Zero
3090e     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
30910     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
30911     05          |                 byte    REQ_SET_ADDR
30912     00 00       |                 word    0       ' Zero
30914     00 00       |                 word    0       ' Zero
30916     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
30918                 | '------------------------------------------------------------------------------
30918                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
30918                 | ' wValue field dictates which protocol should be used.
30918                 | '
30918                 | ' When initialized, all devices default to report protocol. However the host
30918                 | ' should not make any assumptions about the device state and should set the
30918                 | ' desired protocol whenever initializing a device.
30918                 | '------------------------------------------------------------------------------
30918     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
30919     0B          |                 byte    HID_SET_PROTO
3091a     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3091c                 |                                                 ' (HID 1.11 Section 7.2.6).
3091c     00 00       |                 word    0               ' Interface index number.
3091e     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
30920                 | '------------------------------------------------------------------------------
30920     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
30921     0A          |                 byte    HID_SET_IDLE
30922     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
30924                 |                                         ' reporting until a change is detected in the report data
30924                 | 
30924                 |                                         ' (HID 1.11 Section 7.2.4).
30924     00 00       |                 word    0       ' Interface index number.
30926     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
30928     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
30929     09          |                 byte    HID_SET_REPORT
3092a     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3092c                 |                                         ' (HID 1.11 Section 7.2.2).
3092c     00 00       |                 word    0       ' Interface index number.
3092e     00 00       |                 word    0       ' Size of the report, in bytes.
30930     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
30931     06          |                 byte    REQ_GET_DESC
30932     00 22       |                 word    TYPE_REPORT << 8
30934     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
30936     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30938                 | '------------------------------------------------------------------------------
30938     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
30939     06          |                 byte    REQ_GET_DESC
3093a     00 29       |                 word    TYPE_HUB << 8
3093c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3093e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30940     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
30941     03          |                 byte    REQ_SET_FEATURE
30942     00 00       |                 word    0       ' port power
30944     01 00       |                 word    1       ' Port index number (1+)
30946     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30948     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
30949     01          |                 byte    REQ_CLEAR_FEATURE
3094a     00 00       |                 word    0       ' port power
3094c     01 00       |                 word    1       ' Port index number (1+)
3094e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30950     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
30951     00          |                 byte    REQ_GET_STATUS
30952     00 00       |                 word    0
30954     01 00       |                 word    1       ' Port index number (1+)
30956     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
30958                 | '------------------------------------------------------------------------------
30958                 | if _HAVE_GAMEPAD
30958     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3095c                 | ps3_command_buff
3095c     00 00 00 00 
30960     00          |                 byte    $00, $00, $00, $00, $00
30961     00 00 00 00 
30965     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
30966     FF 27 10 00 
3096a     32          |                 byte    $FF, $27, $10, $00, $32
3096b     FF 27 10 00 
3096f     32          |                 byte    $FF, $27, $10, $00, $32
30970     FF 27 10 00 
30974     32          |                 byte    $FF, $27, $10, $00, $32
30975     FF 27 10 00 
30979     32          |                 byte    $FF, $27, $10, $00, $32
3097a     00 00 00 00 
3097e     00          |                 byte    $00, $00, $00, $00, $00
3097f     00 00 00 00 
30983     00          |                 byte    $00, $00, $00, $00, $00
30984     00 00 00 00 
30988     00          |                 byte    $00, $00, $00, $00, $00
30989     00 00 00    |                 byte    $00, $00, $00
3098c                 | '------------------------------------------------------------------------------
3098c     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3098f                 |                                         ' 0x01 All blinking
3098f                 |                                         ' 0x02 1 flashes, then on
3098f                 |                                         ' 0x03 2 flashes, then on
3098f                 |                                         ' 0x04 3 flashes, then on
3098f                 |                                         ' 0x05 4 flashes, then on
3098f                 |                                         ' 0x06 1 on
3098f                 |                                         ' 0x07 2 on
3098f                 |                                         ' 0x08 3 on
3098f                 |                                         ' 0x09 4 on
3098f                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3098f                 |                                         ' 0x0B Blinking*
3098f                 |                                         ' 0x0C Slow blinking*
3098f                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3098f     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
30992     00          |                 byte    $00             ' Left rumble
30993     00          |                 byte    $00             ' Right rumble
30994     00 00 00    |                 byte    $00, $00, $00
30997     00          | end
30998                 | alignl
30998                 | 
30998                 | if HAVE_MOUSE
30998     00 00 00 00 
3099c     00 00 00 00 | mouse_limits long 0[2]
309a0     00 00 00 00 | mouse_outptr long 0
309a4                 | end
309a4                 | 
309a4                 | if KEYQUEUE_SIZE > 0
309a4     00          | keyq_head byte 0
309a5     00          | keyq_tail byte 0
309a6     00 00 00 00 
      ...             
30ba2     00 00 00 00 
30ba6     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
30ba8                 | alignl
30ba8                 | end
30ba8                 | 
30ba8                 | if EMUPAD_MAX_PLAYER > 0
30ba8                 | emupad_rule_buffer
30ba8                 | if EMUPAD_BUILTIN_RULES
30ba8                 | file "padmap_builtin.dat"
30ba8                 | end
30ba8                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
30ba8                 | '' Default rule directly follows!
30ba8                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
30ba8                 | end
30ba8                 | 
30ba8                 | '------------------------------------------------------------------------------
30ba8                 | ' The USB data cache area gets zero-filled at every device disconnect
30ba8                 | '------------------------------------------------------------------------------
30ba8                 | usb_cache_start
30ba8                 | 
30ba8                 | ' HID descriptor and report buffers
30ba8                 | if !!OVERLAP_MEMORY
30ba8     00 00 00 00 
      ...             
312a0     00 00 00 00 
312a4     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
312a8                 | end
312a8     00 00 00 00 
312ac     00 00 00 00 | hkbd_report     byte    0[8]
312b0     00 00 00 00 | hkbd_led_rep    byte    0
312b4                 | alignl
312b4                 | 
312b4                 | if HAVE_HIDPAD
312b4     00 00 00 00 
      ...             
31370     00 00 00 00 
31374     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
31378                 | end
31378                 | 
31378                 | ' HUB descriptor
31378     00          | hub_descr       byte    0   ' bDescLength
31379     00          |                 byte    0   ' bDescriptorType
3137a     00          |                 byte    0   ' bNbrPorts
3137b     00 00       |                 word    0   ' wHubCharacteristics
3137d     00          |                 byte    0   ' bPwrOn2PwrGood
3137e     00          |                 byte    0   ' bHubContrCurrent
3137f     00          |                 byte    0   ' DeviceRemoveable
31380     00          |                 byte    0   ' PortPwrCtrlMask
31381                 | 
31381                 | usb_cache_end
31381                 | 
31381                 | if HAVE_MOUSE
31381     00 00 00 00 | mouse_xacc      long 0
31385     00 00 00 00 | mouse_yacc      long 0
31389     00 00 00 00 | mouse_zacc      long 0
3138d     00          | mouse_bstate    byte 0
3138e     00          | mouse_lpending  byte 0
3138f     00          | mouse_rpending  byte 0
31390     00          | mouse_mpending  byte 0
31391     00          | mouse_lock      byte 0
31392     00 00 00    |                 byte 0[3] ' padding
31395                 | end
31395                 | 
31395     00 00 00 00 
      ...             
3140d     00 00 00 00 
31411     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
31415     00 00 00 00 
31419     00 00 00 00 
3141d     00 00 00 00 
31421     00 00 00 00 
31425     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
31427     00 00 00 00 
      ...             
3151f     00 00 00 00 
31523     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
31527                 | 
31527     00          | driver_cog      byte    0                       ' Current driver cog + 1
31528                 | 	alignl
31528                 | _Audio093b_8_sc_spin2_dat_
31528                 | 
31528                 | audio       org     0
31528                 | 
31528     61 C3 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3152c     61 11 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
31530     61 1D 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
31534                 | 
31534     01 EC 63 FD |             cogid   pa                   ' compute cogid
31538     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3153c     F6 C3 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
31540     E1 C0 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
31544                 | 
31544     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
31548     0E 18 06 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/95
3154c     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
31550     0F 18 06 FC |             wrpin   dac,#right
31554     0F BE 1C FC |             wxpin   #95,#right    
31558     41 9C 64 FD |             dirh    #left addpins 1
3155c     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
31560     C8 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
31564     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
31568                 |             
31568                 | '---------------------------------------------------------------------------------        
31568                 | '----------------- The main loop -------------------------------------------------
31568                 | '---------------------------------------------------------------------------------
31568                 | 
31568     D1 A4 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3156c     10 00 90 CD |       if_c  jmp     #loop1
31570                 |   
31570     09 F6 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
31574     D1 F6 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
31578     D0 00 80 F1 |             sub     0-0,a40000000
3157c     FD F7 6D FB |             djnz    cn,#p402
31580                 |     
31580     00 F6 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
31584     D3 F8 01 F6 |             mov     ct,time1            ' with the lowest next sample time
31588     D4 F8 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3158c     01 F6 05 C6 |     if_c    mov     cn,#1
31590     D5 F8 39 F3 |             fle     ct,time3 wcz
31594     02 F6 05 C6 |     if_c    mov     cn,#2     
31598     D6 F8 39 F3 |             fle     ct,time4 wcz
3159c     03 F6 05 C6 |     if_c    mov     cn,#3
315a0     D7 F8 39 F3 |             fle     ct,time5 wcz
315a4     04 F6 05 C6 |     if_c    mov     cn,#4
315a8     D8 F8 39 F3 |             fle     ct,time6 wcz
315ac     05 F6 05 C6 |     if_c    mov     cn,#5
315b0     D9 F8 39 F3 |             fle     ct,time7 wcz
315b4     06 F6 05 C6 |     if_c    mov     cn,#6
315b8     DA F8 39 F3 |             fle     ct,time8 wcz
315bc     07 F6 05 C6 |     if_c    mov     cn,#7
315c0                 | 
315c0                 | 
315c0                 | '----------------------------------------------------------------------------------
315c0                 | '------------- Compute channel samples --------------------------------------------
315c0                 | '----------------------------------------------------------------------------------
315c0                 | 
315c0                 | 
315c0     FB B6 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
315c4     06 B6 65 F0 |             shl     channeladd,#6
315c8     DB F0 03 F1 |             add     ptra,channeladd
315cc                 | 
315cc     28 16 64 FD |             setq    #11                        ' read parameters
315d0     00 CD 05 FB |             rdlong  pointer0,ptra
315d4                 |     	    
315d4     1F DA 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
315d8     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
315dc     ED BA 31 F9 |             getword qq,command0,#0            ' get the new rate
315e0     4E BA 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
315e4     DD BA E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
315e8     00 BA 0D F2 |             cmp     qq,#0 wz                         
315ec     4E 1A 06 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
315f0     4E 18 06 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
315f4                 |             
315f4     1E DA 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
315f8     E1 C0 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
315fc     00 C0 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
31600                 | 
31600                 | 
31600     E7 FC 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
31604     E7 FE 39 F9 |             getword oldrs,sample0,#1
31608     EB F2 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3160c     EB F0 31 F9 |     	    getword avol0,volpan0,#0
31610     EC EE 39 F9 |             getword askip0,freqskip0,#1    	    
31614     EC EC 31 F9 |             getword afreq0,freqskip0,#0
31618                 | 
31618     D3 F6 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3161c     00 FA 01 F6 |             mov     dt0,0-0    
31620     D2 FA 81 F1 |             sub     dt0,time0
31624                 |             
31624     D3 F6 8D F9 |             altd    cn, #time1                ' add channel period to channel time
31628     F6 00 00 F1 |             add     0-0,afreq0  	
3162c                 |             
3162c                 | '---- envelopes
3162c                 |             
3162c     00 DE 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
31630     20 00 00 AF 
31634     00 3E 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
31638     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3163c                 | 
3163c     F6 3E 02 F6 |             mov envs1,afreq0
31640     F0 3E 02 FA |             mul envs1,envspd0
31644     1F DD 01 F1 |             add envph0,envs1 
31648                 | 
31648     EE 3A 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3164c     06 3A 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
31650     1D 3D 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
31654     10 3A 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
31658     F1 3A 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3165c     F1 3A 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
31660     00 3C 06 36 |     if_ge   mov     envlo,#0
31664     F1 DC 01 36 |     if_ge   mov     envph0,envlen0
31668     16 DC 65 30 |     if_ge   shl     envph0,#22
3166c                 | 
3166c     1D 3F 02 F6 |             mov envs1,envhi
31670     01 3E 66 F0 |             shl envs1,#1
31674     EF 3E 02 F1 |             add envs1,envptr0
31678     1F 3F 02 FB |             rdlong envs1,envs1
3167c     1F 41 3A F9 |             getword envs2,envs1,#1
31680     1F 3F 32 F9 |             getword envs1,envs1,#0
31684     1E 41 02 FA |             mul envs2,envlo
31688     1E 3D 22 F6 |             not envlo
3168c     1E 3F 02 FA |             mul envs1,envlo
31690     20 3F 02 F1 |             add envs1,envs2
31694     12 3E 46 F0 |             shr envs1,#18
31698                 |             
31698                 | 
31698                 | 
31698     F7 CC 01 F1 | p410              add     pointer0,askip0           ' compute the pointer to the next sample       
3169c     E6 38 C2 F8 |          setbyte pointer00,pointer0,#0
316a0     08 CC 45 F0 |             shr     pointer0,#8
316a4                 |          
316a4     1F D0 0D F4 |             testb   sstart0,#31 wz            
316a8     01 CC 65 A0 |     if_z    shl     pointer0,#1        
316ac     1C D0 0D F4 |             testb   sstart0,#28 wz            
316b0     01 CC 65 A0 |     if_z    shl     pointer0,#1        
316b4                 |             
316b4     EA CC 19 F2 |             cmp     pointer0,lend0 wcz
316b8     EA CC 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
316bc     E9 CC 01 31 |     if_ge   add     pointer0,lstart0       
316c0                 |             
316c0     E6 BA 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
316c4     E8 BA 01 F1 |             add     qq,sstart0            
316c8                 | 
316c8                 | 
316c8                 | 
316c8     FF C1 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
316cc     DD BC E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
316d0     14 01 B0 1D |     if_gt   call    #cache_read
316d4                 |          
316d4                 |          
316d4                 |  
316d4                 |          
316d4     1F D0 0D F4 |             testb   sstart0,#31 wz 
316d8     08 BC 65 50 |     if_nz   shl     spl,#8
316dc     08 CC 65 50 |     if_nz   shl     pointer0,#8
316e0     07 CC 65 A0 |     if_z    shl     pointer0,#7
316e4     1C D0 0D F4 |             testb   sstart0,#28 wz            
316e8     01 CC 45 A0 |     if_z    shr     pointer0,#1    
316ec     1C CD C1 F8 | 	    setbyte pointer0,pointer00,#0       
316f0                 |     
316f0                 | 
316f0                 | p406        
316f0     1F BD 31 FA |            scas spl, envs1
316f4     00 BC 01 F6 |             mov spl,0-0
316f8     F8 BC 31 FA |             scas    spl,avol0                 ' apply volume
316fc     00 BC 01 F6 |             mov     spl,0-0
31700                 |  
31700     F9 BC 31 FA |             scas    spl,apan0                 ' apply pan
31704     00 00 02 F6 |             mov     ls0,0-0
31708     20 00 00 FF 
3170c     00 BA 05 F6 |             mov     qq,##16384
31710     F9 BA 81 F1 |             sub     qq,apan0
31714     DD BC 31 FA |             scas    spl,qq
31718     00 02 02 F6 |             mov     rs0, 0-0
3171c                 | 
3171c     FF 06 82 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
31720     01 07 02 F1 |             add     rs,rs0
31724     FE 04 82 F1 |             sub     ls,oldls
31728     00 05 02 F1 |             add     ls,ls0
3172c                 |    
3172c     01 CF 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
31730     00 CF 21 F9 |             setword sample0,ls0,#0
31734                 |             
31734     1E D0 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointers needs resetting  
31738     00 CC 05 A6 |     if_z    mov     pointer0, #0  
3173c     00 DC 05 A6 |     if_z    mov     envph0, #0  
31740     02 D1 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
31744     1D D0 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
31748     04 00 00 AF 
3174c     00 A6 05 A1 |     if_z    add     time1,##2048
31750     D3 A8 01 A6 |     if_z    mov     time2,time1
31754     02 D1 65 AC |     if_z    wrlong  sstart0,ptra[2]
31758                 |             
31758     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
3175c     00 CD 65 FC |             wrlong  pointer0,ptra
31760     08 DD 65 FC |             wrlong  envph0,ptra[8]
31764     DB F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
31768                 |                       
31768     D2 F4 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3176c     FF B9 25 A7 |     if_z    decmod  front, #511          
31770                 |          
31770     02 FD 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
31774     03 FF 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
31778     0F FC E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3177c     0F FE E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
31780                 | 	    
31780                 | 		    
31780     FE FE 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
31784     05 09 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
31788     FF 0A 02 F6 |             mov     newsample, oldrs       
3178c                 | 
3178c     D2 F4 01 F6 |             mov     oldt0,time0              ' update global time
31790     FD A4 01 F1 |             add     time0,dt0    
31794                 |                                      
31794     00 FA 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
31798     E4 FD 9F AD |     if_z    jmp     #loop1
3179c     FD BA 01 F6 |             mov     qq,dt0
317a0                 |   
317a0     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
317a4     00 B8 9D F2 |             cmpr    front, #0-0 wcz
317a8     F4 FF 9F AD |     if_e    jmp     #p301    
317ac                 | 		
317ac     00 10 0E F2 | 	    cmp     scbase,#0 wz
317b0     20 00 90 AD |     if_z    jmp #p302	   
317b4                 |  
317b4                 |  
317b4     3F 16 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
317b8     09 15 02 C6 |     if_c    mov scptr2,scptr
317bc     02 14 66 C0 |     if_c    shl scptr2,#2
317c0     08 15 02 C1 |     if_c    add scptr2,scbase     
317c4     60 14 66 FC |             wrlong scptr2,#$60
317c8     0A 09 62 CC |     if_c    wrlong oldsample,scptr2
317cc     01 00 00 CF 
317d0     7F 12 06 C7 |     if_c    incmod scptr,##639
317d4                 | 			    
317d4     DC 08 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
317d8     00 00 00 FF 
317dc     FF B9 05 F7 |             incmod  front, ##511
317e0     EF BB 6D FB |             djnz    qq,#p301
317e4                 |             
317e4     80 FD 9F FD |             jmp     #loop            'loop
317e8                 | 
317e8                 | '----------------------------------------------------------------------------------
317e8                 | '------------- This is the end of the main loop -----------------------------------
317e8                 | '----------------------------------------------------------------------------------
317e8                 | 
317e8                 | '----------------------------------------------------------------------------------
317e8                 | '------------- PSRAM cache ----------- --------------------------------------------
317e8                 | '----------------------------------------------------------------------------------
317e8                 | 
317e8                 | ' There are 8 cache pointers for 8 channels
317e8                 | ' if 24 higher bits of address=cache, then get a word from the cache
317e8                 | ' else load the cache from PSRAM, update the pointer, then read a sample
317e8                 | 
317e8                 | 
317e8     DD 34 E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
317ec                 |             
317ec     DD 36 02 F6 | 	    mov     addrhi,qq		
317f0     08 36 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
317f4     0F F7 95 F9 | 	    alts    cn,#cache1            
317f8     00 36 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
317fc     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
31800                 | 	
31800     0F F7 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
31804     1B 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
31808     1B 2F 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3180c     08 2E 66 F0 | 	    shl     cmd,#8
31810     0B 2E 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
31814     FB 30 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
31818     08 30 66 F0 |             shl     hubaddr,#8                  '
3181c     0E 31 02 F1 |             add     hubaddr,hubptr 
31820     00 33 06 F6 |             mov     count,#256                  ' 256 bytes
31824     28 04 64 FD |             setq    #2                          ' write 3 longs
31828     E0 2E 62 FC |             wrlong  cmd, mailbox                ' run it
3182c     E0 2E 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
31830     FE 2F B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
31834                 |             
31834                 | 	
31834     FB BA 01 F6 | p701	    mov     qq,cn			' cache hit
31838     08 BA 65 F0 | 	    shl     qq,#8			' compute the cache start
3183c     0E BB 01 F1 | 	    add     qq,hubptr
31840     1A BB 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
31844     DD BC E1 0A |     _ret_   rdword  spl,qq                      ' read a word
31848                 |           
31848                 | 
31848                 | '--------------------------------------------------------------------------
31848                 | '------ Interrupt service -------------------------------------------------
31848                 | '------ Output the sample, get the next one if exists ---------------------
31848                 | '--------------------------------------------------------------------------
31848                 | 
31848     0E C4 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
3184c     0F C6 25 FC |             wypin   rsample,#right       '4
31850     DC F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
31854     80 C9 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
31858     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3185c     E4 C6 39 59 |     if_ne   getword rsample,lsnext,#1    '13
31860     E4 C4 31 59 |     if_ne   getword lsample,lsnext,#0    '15
31864                 |     
31864     F5 FF 3B FB |             reti1                        '17/19 
31868                 |           
31868                 | '---------------------------------------------------------------------------
31868                 | '-------- End of interrupt -------------------------------------------------
31868                 | '---------------------------------------------------------------------------    
31868                 | 
31868                 | 
31868                 | '---------------------------------------------------------------------------
31868                 | '------- Variables ---------------------------------------------------------
31868                 | '---------------------------------------------------------------------------
31868                 | 
31868                 | ' constants
31868                 | 
31868     00 00 00 40 | a40000000   long $40000000
3186c     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
31870                 | 
31870                 | ' Time variables
31870                 | 
31870     00 00 00 00 | time0       long 0    ' Global sample computing time
31874     01 00 00 00 | time1       long 1    ' Local channels time
31878     02 00 00 00 | time2       long 2
3187c     03 00 00 00 | time3       long 3
31880     04 00 00 00 | time4       long 4
31884     05 00 00 00 | time5       long 5
31888     06 00 00 00 | time6       long 6
3188c     07 00 00 00 | time7       long 7
31890     08 00 00 00 | time8       long 8
31894                 | 
31894     00 00 00 00 | channeladd long 0
31898                 | 
31898     00 00 00 00 | front       long 0
3189c                 | 
3189c                 | ' temporary variables 
3189c     00 00 00 00 | qq          long 0
318a0     00 00 00 00 | spl         long 0
318a4     00 00 00 00 | zero        long 0
318a8     00 00 00 00 | mailbox     long 0
318ac     00 00 00 00 | mailbox2 long 0
318b0                 | 
318b0                 | ' Interrupt ISR variables
318b0                 | 
318b0     00 00 00 00 | lsample     long 0
318b4     00 00 00 00 | rsample     long 0
318b8     00 00 00 00 | lsnext      long 0
318bc     00 00 00 00 | rsnext      long 0 
318c0                 | 
318c0                 | ' channel parameter block
318c0                 | 
318c0     00 00 00 00 | pointer0    long 0     
318c4     00 00 00 00 | sample0     long 0
318c8     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
318cc     00 00 00 00 | lstart0     long 0
318d0     00 00 00 00 | lend0       long 0
318d4     00 00 00 00 | volpan0     long 0
318d8     00 00 00 00 | freqskip0   long 0
318dc     00 00 00 00 | command0    long 0
318e0     00 00 00 00 | envph0	    long 0
318e4     00 00 00 00 | envptr0	    long 0
318e8     00 00 00 00 | envspd0	    long 0
318ec     00 00 00 00 | envlen0	    long 0
318f0     00 00 00 00 | res5	    long 0
318f4     00 00 00 00 | res6	    long 0
318f8     00 00 00 00 | res7	    long 0
318fc     00 00 00 00 | res8	    long 0
31900                 | 
31900     00 00 00 00 | afreq0      long 0
31904     00 00 00 00 | askip0      long 0
31908     00 00 00 00 | avol0       long 0
3190c     00 00 00 00 | apan0       long 0
31910                 | 
31910     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
31914     00 00 00 00 | cn          long 0
31918     00 00 00 00 | ct          long 0
3191c     00 00 00 00 | dt0         long 0
31920                 | 
31920                 | ' Samples
31920     00 00 00 00 | oldls       long 0
31924     00 00 00 00 | oldrs       long 0
31928                 | 
31928     00 00 00 00 | ls0         long 0
3192c     00 00 00 00 | rs0         long 0
31930                 | 
31930     00 00 00 00 | ls          long 0    
31934     00 00 00 00 | rs          long 0
31938                 | 
31938     00 00 00 00 | oldsample   long 0
3193c     00 00 00 00 | newsample   long 0
31940                 | 
31940     00 00 00 00 | nrsample    long 0
31944     00 00 00 00 | nlsample    long 0
31948                 | 
31948     00 00 00 00 | scbase long 0
3194c     00 00 00 00 | scptr long 0
31950     00 00 00 00 | scptr2 long 0
31954     00 00 00 00 | scope long 0
31958                 | 
31958     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3195c     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
31960                 | 
31960     00 18 07 00 | hubptr      long $71800
31964     00 00 00 00 | cache1      long 0
31968     00 00 00 00 | cache2      long 0
3196c     00 00 00 00 | cache3      long 0
31970     00 00 00 00 | cache4      long 0
31974     00 00 00 00 | cache5      long 0
31978     00 00 00 00 | cache6      long 0
3197c     00 00 00 00 | cache7      long 0
31980     00 00 00 00 | cache8      long 0
31984                 | 
31984                 | 
31984     00 00 00 00 | cmd         long 0
31988     00 00 00 00 | hubaddr     long 0
3198c     00 01 00 00 | count       long 256
31990     00 00 00 00 | addrlo long 0
31994     00 00 00 00 | addrhi long 0
31998     00 00 00 00 | pointer00 long 0
3199c     00 00 00 00 | envhi long 0
319a0     00 00 00 00 | envlo long 0
319a4     00 00 00 00 | envs1 long 0
319a8     00 00 00 00 | envs2 long 0
319ac     00 00 00 00 
319b0     00 00 00 00 | null  			long 	0,0           ' for channel reset
319b4                 | 	alignl
319b4                 | __system__dat_
319b4     00 00 00 00 
319b8     00 00 00 00 | 	byte	$00[8]
319bc     03 00 00 00 
319c0     00 00 00 00 
319c4     00 00 00 00 
319c8     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
319cc     00 00 00 00 
      ...             
31c58     00 00 00 00 
31c5c     00 00 00 00 | 	byte	$00[660]
31c60     00 00 90 06 | 	long	(105 {__system____root_opendir})<<20
31c64     00 00 A0 06 | 	long	(106 {__system____root_closedir})<<20
31c68     00 00 B0 06 | 	long	(107 {__system____root_readdir})<<20
31c6c     00 00 C0 06 | 	long	(108 {__system____root_stat})<<20
31c70     00 00 00 00 
31c74     00 00 00 00 
31c78     00 00 00 00 
31c7c     00 00 00 00 
31c80     00 00 00 00 
31c84     00 00 00 00 
31c88     00 00 00 00 | 	byte	$00[28]
31c8c     F4 1C 03 00 | 	long	@@@__system__dat_ + 832
31c90     F7 1C 03 00 | 	long	@@@__system__dat_ + 835
31c94     18 1D 03 00 | 	long	@@@__system__dat_ + 868
31c98     31 1D 03 00 | 	long	@@@__system__dat_ + 893
31c9c     4C 1D 03 00 | 	long	@@@__system__dat_ + 920
31ca0     66 1D 03 00 | 	long	@@@__system__dat_ + 946
31ca4     76 1D 03 00 | 	long	@@@__system__dat_ + 962
31ca8     88 1D 03 00 | 	long	@@@__system__dat_ + 980
31cac     9A 1D 03 00 | 	long	@@@__system__dat_ + 998
31cb0     AC 1D 03 00 | 	long	@@@__system__dat_ + 1016
31cb4     B8 1D 03 00 | 	long	@@@__system__dat_ + 1028
31cb8     C9 1D 03 00 | 	long	@@@__system__dat_ + 1045
31cbc     DD 1D 03 00 | 	long	@@@__system__dat_ + 1065
31cc0     E7 1D 03 00 | 	long	@@@__system__dat_ + 1075
31cc4     F7 1D 03 00 | 	long	@@@__system__dat_ + 1091
31cc8     06 1E 03 00 | 	long	@@@__system__dat_ + 1106
31ccc     1C 1E 03 00 | 	long	@@@__system__dat_ + 1128
31cd0     35 1E 03 00 | 	long	@@@__system__dat_ + 1153
31cd4     49 1E 03 00 | 	long	@@@__system__dat_ + 1173
31cd8     57 1E 03 00 | 	long	@@@__system__dat_ + 1187
31cdc     6B 1E 03 00 | 	long	@@@__system__dat_ + 1207
31ce0     77 1E 03 00 | 	long	@@@__system__dat_ + 1219
31ce4     89 1E 03 00 | 	long	@@@__system__dat_ + 1237
31ce8     A1 1E 03 00 | 	long	@@@__system__dat_ + 1261
31cec     B3 1E 03 00 | 	long	@@@__system__dat_ + 1279
31cf0     C6 1E 03 00 | 	long	@@@__system__dat_ + 1298
31cf4     4F 4B 00 4E 
31cf8     75 6D 65 72 
31cfc     69 63 61 6C 
31d00     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
31d04     75 6D 65 6E 
31d08     74 20 6F 75 
31d0c     74 20 6F 66 
31d10     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
31d14     61 69 6E 00 
31d18     52 65 73 75 
31d1c     6C 74 20 6E 
31d20     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
31d24     65 70 72 65 
31d28     73 65 6E 74 
31d2c     61 62 6C 65 
31d30     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
31d34     65 67 61 6C 
31d38     20 6D 75 6C 
31d3c     74 69 62 79 
31d40     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
31d44     65 71 75 65 
31d48     6E 63 65 00 
31d4c     4E 6F 20 73 
31d50     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
31d54     66 69 6C 65 
31d58     20 6F 72 20 
31d5c     64 69 72 65 
31d60     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
31d64     79 00 42 61 
31d68     64 20 66 69 
31d6c     6C 65 20 6E 
31d70     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
31d74     72 00 50 65 
31d78     72 6D 69 73 
31d7c     73 69 6F 6E 
31d80     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
31d84     69 65 64 00 
31d88     4E 6F 74 20 
31d8c     65 6E 6F 75 
31d90     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
31d94     65 6D 6F 72 
31d98     79 00 54 65 
31d9c     6D 70 6F 72 
31da0     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
31da4     66 61 69 6C 
31da8     75 72 65 00 
31dac     46 69 6C 65 
31db0     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
31db4     73 74 73 00 
31db8     49 6E 76 61 
31dbc     6C 69 64 20 
31dc0     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
31dc4     6D 65 6E 74 
31dc8     00 54 6F 6F 
31dcc     20 6D 61 6E 
31dd0     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
31dd4     65 6E 20 66 
31dd8     69 6C 65 73 
31ddc     00 49 2F 4F 
31de0     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
31de4     6F 72 00 4E 
31de8     6F 74 20 61 
31dec     20 64 69 72 
31df0     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
31df4     72 79 00 49 
31df8     73 20 61 20 
31dfc     64 69 72 65 
31e00     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
31e04     79 00 52 65 
31e08     61 64 20 6F 
31e0c     6E 6C 79 20 
31e10     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
31e14     20 73 79 73 
31e18     74 65 6D 00 
31e1c     46 75 6E 63 
31e20     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
31e24     20 6E 6F 74 
31e28     20 69 6D 70 
31e2c     6C 65 6D 65 
31e30     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
31e34     00 44 69 72 
31e38     65 63 74 6F 
31e3c     72 79 20 6E 
31e40     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
31e44     6D 70 74 79 
31e48     00 4E 61 6D 
31e4c     65 20 74 6F 
31e50     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
31e54     6E 67 00 44 
31e58     65 76 69 63 
31e5c     65 20 6E 6F 
31e60     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
31e64     65 6B 61 62 
31e68     6C 65 00 42 
31e6c     61 64 20 61 
31e70     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
31e74     73 73 00 42 
31e78     72 6F 6B 65 
31e7c     6E 20 63 6F 
31e80     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
31e84     74 69 6F 6E 
31e88     00 44 65 76 
31e8c     69 63 65 20 
31e90     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
31e94     65 73 6F 75 
31e98     72 63 65 20 
31e9c     62 75 73 79 
31ea0     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
31ea4     73 73 20 64 
31ea8     65 76 69 63 
31eac     65 20 6C 69 
31eb0     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
31eb4     6F 20 73 70 
31eb8     61 63 65 20 
31ebc     6F 6E 20 64 
31ec0     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
31ec4     65 00 55 6E 
31ec8     6B 6E 6F 77 
31ecc     6E 20 65 72 
31ed0     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
31ed4     00 00 00 00 
31ed8     00 00 00 00 | 	byte	$00[8]
31edc     05 00 00 00 
31ee0     00 00 00 00 
31ee4     00 00 00 00 
31ee8     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31eec     00 00 00 00 | 	byte	$00, $00, $00, $00
31ef0     00 00 10 08 | 	long	(129 {__system___tx})<<20
31ef4     00 00 20 08 | 	long	(130 {__system___rx})<<20
31ef8     00 00 00 00 | 	byte	$00, $00, $00, $00
31efc     00 00 30 08 | 	long	(131 {__system___rxtxioctl_0581})<<20
31f00     00 00 40 08 | 	long	(132 {__system____dummy_flush_0582})<<20
31f04     00 00 00 00 
31f08     00 00 00 00 | 	byte	$00[8]
31f0c     01 00 00 00 
31f10     06 00 00 00 
31f14     00 00 00 00 
31f18     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31f1c     00 00 00 00 
31f20     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31f24     00 00 10 08 | 	long	(129 {__system___tx})<<20
31f28     00 00 20 08 | 	long	(130 {__system___rx})<<20
31f2c     00 00 00 00 | 	byte	$00, $00, $00, $00
31f30     00 00 30 08 | 	long	(131 {__system___rxtxioctl_0581})<<20
31f34     00 00 40 08 | 	long	(132 {__system____dummy_flush_0582})<<20
31f38     00 00 00 00 
31f3c     00 00 00 00 | 	byte	$00[8]
31f40     01 00 00 00 
31f44     06 00 00 00 
31f48     00 00 00 00 
31f4c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31f50     00 00 00 00 
31f54     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31f58     00 00 10 08 | 	long	(129 {__system___tx})<<20
31f5c     00 00 20 08 | 	long	(130 {__system___rx})<<20
31f60     00 00 00 00 | 	byte	$00, $00, $00, $00
31f64     00 00 30 08 | 	long	(131 {__system___rxtxioctl_0581})<<20
31f68     00 00 40 08 | 	long	(132 {__system____dummy_flush_0582})<<20
31f6c     00 00 00 00 
      ...             
320dc     00 00 00 00 
320e0     00 00 00 00 | 	byte	$00[376]
320e4     E8 20 03 00 | 	long	@@@__system__dat_ + 1844
320e8     00 00 00 00 
320ec     00 00 00 00 
320f0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
320f4                 | 	alignl
320f4                 | _fatfs_cc_dat_
320f4     C7 00 FC 00 
320f8     E9 00 E2 00 
320fc     E4 00 E0 00 
32100     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
32104     EA 00 EB 00 
32108     E8 00 EF 00 
3210c     EE 00 EC 00 
32110     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
32114     C9 00 E6 00 
32118     C6 00 F4 00 
3211c     F6 00 F2 00 
32120     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
32124     FF 00 D6 00 
32128     DC 00 F8 00 
3212c     A3 00 D8 00 
32130     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
32134     E1 00 ED 00 
32138     F3 00 FA 00 
3213c     F1 00 D1 00 
32140     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
32144     BF 00 AE 00 
32148     AC 00 BD 00 
3214c     BC 00 A1 00 
32150     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
32154     91 25 92 25 
32158     93 25 02 25 
3215c     24 25 C1 00 
32160     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
32164     A9 00 63 25 
32168     51 25 57 25 
3216c     5D 25 A2 00 
32170     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
32174     14 25 34 25 
32178     2C 25 1C 25 
3217c     00 25 3C 25 
32180     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
32184     5A 25 54 25 
32188     69 25 66 25 
3218c     60 25 50 25 
32190     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
32194     F0 00 D0 00 
32198     CA 00 CB 00 
3219c     C8 00 31 01 
321a0     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
321a4     CF 00 18 25 
321a8     0C 25 88 25 
321ac     84 25 A6 00 
321b0     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
321b4     D3 00 DF 00 
321b8     D4 00 D2 00 
321bc     F5 00 D5 00 
321c0     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
321c4     DE 00 DA 00 
321c8     DB 00 D9 00 
321cc     FD 00 DD 00 
321d0     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
321d4     AD 00 B1 00 
321d8     17 20 BE 00 
321dc     B6 00 A7 00 
321e0     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
321e4     B0 00 A8 00 
321e8     B7 00 B9 00 
321ec     B3 00 B2 00 
321f0     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
321f4     61 00 1A 03 
321f8     E0 00 17 03 
321fc     F8 00 07 03 
32200     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
32204     78 01 00 01 
32208     30 01 32 01 
3220c     06 01 39 01 
32210     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
32214     2E 01 79 01 
32218     06 01 80 01 
3221c     4D 00 43 02 
32220     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
32224     82 01 84 01 
32228     84 01 86 01 
3222c     87 01 87 01 
32230     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
32234     8B 01 8B 01 
32238     8D 01 8E 01 
3223c     8F 01 90 01 
32240     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
32244     93 01 94 01 
32248     F6 01 96 01 
3224c     97 01 98 01 
32250     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
32254     9B 01 9C 01 
32258     9D 01 20 02 
3225c     9F 01 A0 01 
32260     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
32264     A2 01 A4 01 
32268     A4 01 A6 01 
3226c     A7 01 A7 01 
32270     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
32274     AB 01 AC 01 
32278     AC 01 AE 01 
3227c     AF 01 AF 01 
32280     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
32284     B3 01 B3 01 
32288     B5 01 B5 01 
3228c     B7 01 B8 01 
32290     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
32294     BB 01 BC 01 
32298     BC 01 BE 01 
3229c     F7 01 C0 01 
322a0     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
322a4     C3 01 C4 01 
322a8     C5 01 C4 01 
322ac     C7 01 C8 01 
322b0     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
322b4     CB 01 CA 01 
322b8     CD 01 10 01 
322bc     DD 01 01 00 
322c0     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
322c4     12 01 F3 01 
322c8     03 00 F1 01 
322cc     F4 01 F4 01 
322d0     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
322d4     22 02 12 01 
322d8     3A 02 09 00 
322dc     65 2C 3B 02 
322e0     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
322e4     66 2C 3F 02 
322e8     40 02 41 02 
322ec     41 02 46 02 
322f0     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
322f4     40 00 81 01 
322f8     86 01 55 02 
322fc     89 01 8A 01 
32300     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
32304     5A 02 90 01 
32308     5C 02 5D 02 
3230c     5E 02 5F 02 
32310     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
32314     62 02 94 01 
32318     64 02 65 02 
3231c     66 02 67 02 
32320     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
32324     6A 02 62 2C 
32328     6C 02 6D 02 
3232c     6E 02 9C 01 
32330     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
32334     9D 01 73 02 
32338     74 02 9F 01 
3233c     76 02 77 02 
32340     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
32344     7A 02 7B 02 
32348     7C 02 64 2C 
3234c     7E 02 7F 02 
32350     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
32354     82 02 A9 01 
32358     84 02 85 02 
3235c     86 02 87 02 
32360     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
32364     B1 01 B2 01 
32368     45 02 8D 02 
3236c     8E 02 8F 02 
32370     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
32374     B7 01 7B 03 
32378     03 00 FD 03 
3237c     FE 03 FF 03 
32380     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
32384     86 03 88 03 
32388     89 03 8A 03 
3238c     B1 03 11 03 
32390     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
32394     A3 03 A3 03 
32398     C4 03 08 03 
3239c     CC 03 03 00 
323a0     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
323a4     8F 03 D8 03 
323a8     18 01 F2 03 
323ac     0A 00 F9 03 
323b0     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
323b4     F5 03 F6 03 
323b8     F7 03 F7 03 
323bc     F9 03 FA 03 
323c0     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
323c4     20 03 50 04 
323c8     10 07 60 04 
323cc     22 01 8A 04 
323d0     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
323d4     0E 01 CF 04 
323d8     01 00 C0 04 
323dc     D0 04 44 01 
323e0     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
323e4     00 00 7D 1D 
323e8     01 00 63 2C 
323ec     00 1E 96 01 
323f0     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
323f4     00 1F 08 06 
323f8     10 1F 06 06 
323fc     20 1F 08 06 
32400     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
32404     40 1F 06 06 
32408     51 1F 07 00 
3240c     59 1F 52 1F 
32410     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
32414     5D 1F 56 1F 
32418     5F 1F 60 1F 
3241c     08 06 70 1F 
32420     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
32424     BB 1F C8 1F 
32428     C9 1F CA 1F 
3242c     CB 1F DA 1F 
32430     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
32434     F9 1F EA 1F 
32438     EB 1F FA 1F 
3243c     FB 1F 80 1F 
32440     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
32444     08 06 A0 1F 
32448     08 06 B0 1F 
3244c     04 00 B8 1F 
32450     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
32454     BC 1F CC 1F 
32458     01 00 C3 1F 
3245c     D0 1F 02 06 
32460     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
32464     E5 1F 01 00 
32468     EC 1F F3 1F 
3246c     01 00 FC 1F 
32470     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
32474     32 21 70 21 
32478     10 02 84 21 
3247c     01 00 83 21 
32480     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
32484     30 2C 2F 04 
32488     60 2C 02 01 
3248c     67 2C 06 01 
32490     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
32494     80 2C 64 01 
32498     00 2D 26 08 
3249c     41 FF 1A 03 
324a0     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
324a4     05 07 09 0E 
324a8     10 12 14 16 
324ac     18 1C 1E 43 
324b0     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
324b4     41 41 43 45 
324b8     45 45 49 49 
324bc     49 41 41 45 
324c0     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
324c4     4F 55 55 59 
324c8     4F 55 4F 9C 
324cc     4F 9E 9F 41 
324d0     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
324d4     A5 A6 A7 A8 
324d8     A9 AA AB AC 
324dc     AD AE AF B0 
324e0     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
324e4     41 41 41 B8 
324e8     B9 BA BB BC 
324ec     BD BE BF C0 
324f0     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
324f4     C5 41 41 C8 
324f8     C9 CA CB CC 
324fc     CD CE CF D1 
32500     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
32504     49 49 49 49 
32508     D9 DA DB DC 
3250c     DD 49 DF 4F 
32510     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
32514     4F E6 E8 E8 
32518     55 55 55 59 
3251c     59 EE EF F0 
32520     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
32524     F5 F6 F7 F8 
32528     F9 FA FB FC 
3252c     FD FE FF 00 
32530     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
32534     00 00 00 00 | 	byte	$00, $00, $00, $00
32538     00 00 00 07 | 	long	(112 {_fatfs_cc_v_close})<<20
3253c     00 00 10 07 | 	long	(113 {_fatfs_cc_v_read})<<20
32540     00 00 20 07 | 	long	(114 {_fatfs_cc_v_write})<<20
32544     00 00 30 07 | 	long	(115 {_fatfs_cc_v_lseek})<<20
32548     00 00 40 07 | 	long	(116 {_fatfs_cc_v_ioctl})<<20
3254c     00 00 50 08 | 	long	(133 {_fatfs_cc_v_flush})<<20
32550     00 00 00 00 
32554     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
32558     00 00 50 07 | 	long	(117 {_fatfs_cc_v_open})<<20
3255c     00 00 60 07 | 	long	(118 {_fatfs_cc_v_creat})<<20
32560     00 00 70 07 | 	long	(119 {_fatfs_cc_v_opendir})<<20
32564     00 00 80 07 | 	long	(120 {_fatfs_cc_v_closedir})<<20
32568     00 00 90 07 | 	long	(121 {_fatfs_cc_v_readdir})<<20
3256c     00 00 A0 07 | 	long	(122 {_fatfs_cc_v_stat})<<20
32570     00 00 B0 07 | 	long	(123 {_fatfs_cc_v_mkdir})<<20
32574     00 00 C0 07 | 	long	(124 {_fatfs_cc_v_rmdir})<<20
32578     00 00 D0 07 | 	long	(125 {_fatfs_cc_v_remove})<<20
3257c     00 00 E0 07 | 	long	(126 {_fatfs_cc_v_rename})<<20
32580     00 00 F0 07 | 	long	(127 {_fatfs_cc_v_init})<<20
32584     00 00 00 08 | 	long	(128 {_fatfs_cc_v_deinit})<<20
32588     FF FF FF FF 
3258c     1F 00 00 00 
32590     1C 00 00 00 
32594     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
32598     1E 00 00 00 
3259c     1F 00 00 00 
325a0     1E 00 00 00 
325a4     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
325a8     1F 00 00 00 
325ac     1E 00 00 00 
325b0     1F 00 00 00 
325b4     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
325b8     1F 00 00 00 
325bc     00 00 00 00 
325c0     1F 00 00 00 
325c4     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
325c8     5A 00 00 00 
325cc     78 00 00 00 
325d0     97 00 00 00 
325d4     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
325d8     D4 00 00 00 
325dc     F3 00 00 00 
325e0     11 01 00 00 
325e4     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
325e8     4E 01 00 00 
325ec     6D 01 00 00 
325f0     FF FF FF FF 
325f4     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
325f8     00 00 00 00 
      ...             
32610     00 00 00 00 
32614     00 00 00 00 | 	byte	$00[32]
32618     36 26 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3261c     3A 26 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
32620     00 00 00 00 
32624     00 00 00 00 
32628     00 00 00 00 
3262c     00 00 00 00 
32630     00 00       | 	byte	$00[18]
32632     3F 3F 3F 00 
32636     55 43 54 00 
3263a     55 43 54 00 
3263e     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
32642     00 00 00 00 
32646     00 00 00    | 	byte	$00[7]
32649     CA 9A 3B 00 
3264d     00 00 00 01 
32651     01 01 01 01 
32655     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
32659     91 11 11 11 
3265d     11 01 01 01 
32661     01 01 01 01 
32665     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
32669     01 01 01 01 
3266d     01 01 01    | 	byte	$01[7]
32670     90 20 20 20 
32674     20 20 20 20 
32678     20 20 20 20 
3267c     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
32680     42 42 42 42 
32684     42 42 42 42 
32688     42 42       | 	byte	$42[10]
3268a     20 20 20 20 
3268e     20 20 20    | 	byte	$20[7]
32691     44 44 44 44 
32695     44 44       | 	byte	$44[6]
32697     04 04 04 04 
3269b     04 04 04 04 
3269f     04 04 04 04 
326a3     04 04 04 04 
326a7     04 04 04 04 | 	byte	$04[20]
326ab     20 20 20 20 
326af     20 20       | 	byte	$20[6]
326b1     48 48 48 48 
326b5     48 48       | 	byte	$48[6]
326b7     08 08 08 08 
326bb     08 08 08 08 
326bf     08 08 08 08 
326c3     08 08 08 08 
326c7     08 08 08 08 | 	byte	$08[20]
326cb     20 20 20 20 
326cf     01 00 00 00 
326d3     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
326d4                 | __methodtable__
326d4     0C 4A 01 00 | 	long	@_do_no_command
326d8     0C DA 00 00 | 	long	@_do_plus
326dc     F8 DE 00 00 | 	long	@_do_minus
326e0     C0 E3 00 00 | 	long	@_do_or
326e4     D8 E4 00 00 | 	long	@_do_mul
326e8     64 EA 00 00 | 	long	@_do_fdiv
326ec     A8 E2 00 00 | 	long	@_do_and
326f0     44 E8 00 00 | 	long	@_do_div
326f4     2C EC 00 00 | 	long	@_do_mod
326f8     4C EE 00 00 | 	long	@_do_shl
326fc     64 EF 00 00 | 	long	@_do_shr
32700     7C F0 00 00 | 	long	@_do_power
32704     54 D4 00 00 | 	long	@_do_getvar
32708     B0 9A 00 00 | 	long	@_do_push
3270c     08 CD 00 00 | 	long	@_do_assign
32710     EC 26 01 00 | 	long	@_do_cls
32714     04 C7 00 00 | 	long	@_do_new
32718     90 27 01 00 | 	long	@_do_plot
3271c     60 28 01 00 | 	long	@_do_draw
32720     D4 31 01 00 | 	long	@_do_print
32724     CC 2A 01 00 | 	long	@_do_circle
32728     54 29 01 00 | 	long	@_do_fcircle
3272c     44 2C 01 00 | 	long	@_do_box
32730     EC 2F 01 00 | 	long	@_do_frame
32734     58 27 01 00 | 	long	@_do_color
32738     B4 7A 00 00 | 	long	@_do_for
3273c     E0 7C 00 00 | 	long	@_do_next
32740     68 C4 00 00 | 	long	@_do_list
32744     00 AB 00 00 | 	long	@_do_run
32748     C4 CB 00 00 | 	long	@_do_error
3274c     C0 C8 00 00 | 	long	@_do_fast_goto
32750     B0 C9 00 00 | 	long	@_do_find_goto
32754     C0 CB 00 00 | 	long	@_do_slow_goto
32758     44 0F 01 00 | 	long	@_do_converttoint
3275c     F4 A0 00 00 | 	long	@_test_csave
32760     48 A4 00 00 | 	long	@_do_save
32764     34 A7 00 00 | 	long	@_do_load
32768     A0 3B 01 00 | 	long	@_do_pinwrite
3276c     40 40 01 00 | 	long	@_do_waitms
32770     7C 41 01 00 | 	long	@_do_waitvbl
32774     7C 44 01 00 | 	long	@_do_if
32778     60 45 01 00 | 	long	@_do_else
3277c     28 46 01 00 | 	long	@_do_nothing
32780     44 F2 00 00 | 	long	@_do_eq
32784     BC 00 01 00 | 	long	@_do_ge
32788     94 05 01 00 | 	long	@_do_le
3278c     1C F7 00 00 | 	long	@_do_gt
32790     F4 FB 00 00 | 	long	@_do_lt
32794     6C 0A 01 00 | 	long	@_do_ne
32798     20 12 01 00 | 	long	@_do_rnd
3279c     2C 46 01 00 | 	long	@_do_brun
327a0     F8 48 01 00 | 	long	@_do_beep
327a4     AC 41 01 00 | 	long	@_do_dir
327a8     9C 36 01 00 | 	long	@_do_paper
327ac     24 37 01 00 | 	long	@_do_ink
327b0     C0 37 01 00 | 	long	@_do_font
327b4     3C 38 01 00 | 	long	@_do_mode
327b8     64 48 01 00 | 	long	@_do_mouse
327bc     84 26 01 00 | 	long	@_do_gettime
327c0     98 48 01 00 | 	long	@_do_cursor
327c4     CC 48 01 00 | 	long	@_do_click
327c8     10 24 01 00 | 	long	@_do_mousex
327cc     54 24 01 00 | 	long	@_do_mousey
327d0     DC 24 01 00 | 	long	@_do_mousek
327d4     98 24 01 00 | 	long	@_do_mousew
327d8     E8 13 01 00 | 	long	@_do_sin
327dc     3C 1B 01 00 | 	long	@_do_stick
327e0     C0 1C 01 00 | 	long	@_do_strig
327e4     24 23 01 00 | 	long	@_do_sprite
327e8     94 1F 01 00 | 	long	@_do_defsprite
327ec     44 1E 01 00 | 	long	@_do_getpixel
327f0     88 41 01 00 | 	long	@_do_waitclock
327f4     18 4A 01 00 | 	long	@_do_negative
327f8     20 25 01 00 | 	long	@_do_rdpin
327fc     8C 25 01 00 | 	long	@_do_rqpin
32800     00 26 01 00 | 	long	@_do_pinread
32804     38 3E 01 00 | 	long	@_do_wrpin
32808     B8 3E 01 00 | 	long	@_do_wxpin
3280c     38 3F 01 00 | 	long	@_do_wypin
32810     28 3C 01 00 | 	long	@_do_pinfloat
32814     68 3C 01 00 | 	long	@_do_pinlo
32818     A8 3C 01 00 | 	long	@_do_pinhi
3281c     28 3D 01 00 | 	long	@_do_pinstart
32820     E8 3C 01 00 | 	long	@_do_pintoggle
32824     B8 3F 01 00 | 	long	@_do_position
32828     F4 14 01 00 | 	long	@_do_cos
3282c     14 16 01 00 | 	long	@_do_tan
32830     38 19 01 00 | 	long	@_do_atn
32834     20 17 01 00 | 	long	@_do_asin
32838     2C 18 01 00 | 	long	@_do_acos
3283c     4C 1A 01 00 | 	long	@_do_sqr
32840     2C 2E 01 00 | 	long	@_do_fill
32844     E4 BA 00 00 | 	long	@_do_defsnd
32848     24 AE 00 00 | 	long	@_do_defenv
3284c     84 45 01 00 | 	long	@_do_rad
32850     AC 45 01 00 | 	long	@_do_deg
32854     D4 45 01 00 | 	long	@_do_int
32858     30 B8 00 00 | 	long	@_do_play
3285c     F8 7E 01 00 | 	long	@_hg010b_spin2_putchar
32860     D0 85 02 00 | 	long	@__struct___bas_wrap_sender_tx
32864     14 86 02 00 | 	long	@__struct___bas_wrap_sender_rx
32868     5C 86 02 00 | 	long	@__struct___bas_wrap_sender_close
3286c     00 85 02 00 | 	long	@__struct__s_vfs_file_t_putchar
32870     70 85 02 00 | 	long	@__struct__s_vfs_file_t_getchar
32874     B8 84 02 00 | 	long	@___strs_cl_pfunc
32878     2C E4 01 00 | 	long	@__system____root_opendir
3287c     C8 E4 01 00 | 	long	@__system____root_closedir
32880     44 E4 01 00 | 	long	@__system____root_readdir
32884     D0 E4 01 00 | 	long	@__system____root_stat
32888     58 DD 01 00 | 	long	@__system____default_putc
3288c     DC DC 01 00 | 	long	@__system____default_getc
32890     00 DE 01 00 | 	long	@__system____default_flush
32894     D4 6F 02 00 | 	long	@_fatfs_cc_v_close
32898     F0 73 02 00 | 	long	@_fatfs_cc_v_read
3289c     04 75 02 00 | 	long	@_fatfs_cc_v_write
328a0     E4 75 02 00 | 	long	@_fatfs_cc_v_lseek
328a4     6C 76 02 00 | 	long	@_fatfs_cc_v_ioctl
328a8     C0 76 02 00 | 	long	@_fatfs_cc_v_open
328ac     38 6F 02 00 | 	long	@_fatfs_cc_v_creat
328b0     18 70 02 00 | 	long	@_fatfs_cc_v_opendir
328b4     8C 70 02 00 | 	long	@_fatfs_cc_v_closedir
328b8     CC 70 02 00 | 	long	@_fatfs_cc_v_readdir
328bc     00 72 02 00 | 	long	@_fatfs_cc_v_stat
328c0     80 76 02 00 | 	long	@_fatfs_cc_v_mkdir
328c4     A0 76 02 00 | 	long	@_fatfs_cc_v_rmdir
328c8     90 76 02 00 | 	long	@_fatfs_cc_v_remove
328cc     B0 76 02 00 | 	long	@_fatfs_cc_v_rename
328d0     D0 77 02 00 | 	long	@_fatfs_cc_v_init
328d4     D8 77 02 00 | 	long	@_fatfs_cc_v_deinit
328d8     94 92 01 00 | 	long	@__system___tx
328dc     D4 92 01 00 | 	long	@__system___rx
328e0     3C F0 01 00 | 	long	@__system___rxtxioctl_0581
328e4     94 F0 01 00 | 	long	@__system____dummy_flush_0582
328e8     A0 77 02 00 | 	long	@_fatfs_cc_v_flush
328ec                 | __heap_base
328ec     00 00 00 00 
      ...             
616ec     00 00 00 00 
616f0     00 00 00 00 | 	long	0[48002]
616f4                 | objmem
616f4     00 00 00 00 
      ...             
70cbc     00 00 00 00 
70cc0     00 00 00 00 | 	long	0[15732]
70cc4                 | stackspace
70cc4     00 00 00 00 | 	long	0[1]
70cc8 100             | 	org	COG_BSS_START
70cc8 100             | _var01
70cc8 100             | 	res	1
70cc8 101             | _var02
70cc8 101             | 	res	1
70cc8 102             | _var03
70cc8 102             | 	res	1
70cc8 103             | _var04
70cc8 103             | 	res	1
70cc8 104             | _var05
70cc8 104             | 	res	1
70cc8 105             | _var06
70cc8 105             | 	res	1
70cc8 106             | _var07
70cc8 106             | 	res	1
70cc8 107             | _var08
70cc8 107             | 	res	1
70cc8 108             | _var09
70cc8 108             | 	res	1
70cc8 109             | arg01
70cc8 109             | 	res	1
70cc8 10a             | arg02
70cc8 10a             | 	res	1
70cc8 10b             | arg03
70cc8 10b             | 	res	1
70cc8 10c             | arg04
70cc8 10c             | 	res	1
70cc8 10d             | arg05
70cc8 10d             | 	res	1
70cc8 10e             | arg06
70cc8 10e             | 	res	1
70cc8 10f             | local01
70cc8 10f             | 	res	1
70cc8 110             | local02
70cc8 110             | 	res	1
70cc8 111             | local03
70cc8 111             | 	res	1
70cc8 112             | local04
70cc8 112             | 	res	1
70cc8 113             | local05
70cc8 113             | 	res	1
70cc8 114             | local06
70cc8 114             | 	res	1
70cc8 115             | local07
70cc8 115             | 	res	1
70cc8 116             | local08
70cc8 116             | 	res	1
70cc8 117             | local09
70cc8 117             | 	res	1
70cc8 118             | local10
70cc8 118             | 	res	1
70cc8 119             | local11
70cc8 119             | 	res	1
70cc8 11a             | local12
70cc8 11a             | 	res	1
70cc8 11b             | local13
70cc8 11b             | 	res	1
70cc8 11c             | local14
70cc8 11c             | 	res	1
70cc8 11d             | local15
70cc8 11d             | 	res	1
70cc8 11e             | local16
70cc8 11e             | 	res	1
70cc8 11f             | local17
70cc8 11f             | 	res	1
70cc8 120             | local18
70cc8 120             | 	res	1
70cc8 121             | local19
70cc8 121             | 	res	1
70cc8 122             | local20
70cc8 122             | 	res	1
70cc8 123             | local21
70cc8 123             | 	res	1
70cc8 124             | local22
70cc8 124             | 	res	1
70cc8 125             | local23
70cc8 125             | 	res	1
70cc8 126             | local24
70cc8 126             | 	res	1
70cc8 127             | local25
70cc8 127             | 	res	1
70cc8 128             | local26
70cc8 128             | 	res	1
70cc8 129             | local27
70cc8 129             | 	res	1
70cc8 12a             | local28
70cc8 12a             | 	res	1
70cc8 12b             | local29
70cc8 12b             | 	res	1
70cc8 12c             | local30
70cc8 12c             | 	res	1
70cc8 12d             | local31
70cc8 12d             | 	res	1
70cc8 12e             | local32
70cc8 12e             | 	res	1
70cc8 12f             | local33
70cc8 12f             | 	res	1
70cc8 130             | local34
70cc8 130             | 	res	1
70cc8 131             | muldiva_
70cc8 131             | 	res	1
70cc8 132             | muldivb_
70cc8 132             | 	res	1
70cc8 133             | 	fit	480
70cc8 133             | 
